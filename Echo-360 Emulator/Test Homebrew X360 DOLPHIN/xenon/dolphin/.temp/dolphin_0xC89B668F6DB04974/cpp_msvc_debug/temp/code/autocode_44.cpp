#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 8222B914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B914);
		  /* 8222B914h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8222B914h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222B914h case    0:*/		return 0x8222B918;
		  /* 8222B918h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 8222B918h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8222B918h case    1:*/		return 0x8222B91C;
		  /* 8222B91Ch */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8222B91Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222B924;  }
		/* 8222B91Ch case    2:*/		return 0x8222B920;
		  /* 8222B920h */ case    3:  		/* addi R28, R29, 8 */
		/* 8222B920h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x8);
		/* 8222B920h case    3:*/		return 0x8222B924;
	}
	return 0x8222B924;
} // Block from 8222B914h-8222B924h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222B924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B924);
		  /* 8222B924h */ case    0:  		/* lwz R29, <#[R28]> */
		/* 8222B924h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 8222B924h case    0:*/		return 0x8222B928;
		  /* 8222B928h */ case    1:  		/* b -56 */
		/* 8222B928h case    1:*/		return 0x8222B8F0;
		/* 8222B928h case    1:*/		return 0x8222B92C;
	}
	return 0x8222B92C;
} // Block from 8222B924h-8222B92Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222B92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B92C);
		  /* 8222B92Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222B92Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222B92Ch case    0:*/		return 0x8222B930;
		  /* 8222B930h */ case    1:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8222B930h case    1:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8222B930h case    1:*/		return 0x8222B934;
		  /* 8222B934h */ case    2:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8222B934h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8222B934h case    2:*/		return 0x8222B938;
		  /* 8222B938h */ case    3:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8222B938h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8222B938h case    3:*/		return 0x8222B93C;
		  /* 8222B93Ch */ case    4:  		/* bl -816396 */
		/* 8222B93Ch case    4:*/		regs.LR = 0x8222B940; return 0x82164430;
		/* 8222B93Ch case    4:*/		return 0x8222B940;
		  /* 8222B940h */ case    5:  		/* addi R11, R31, -16 */
		/* 8222B940h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 8222B940h case    5:*/		return 0x8222B944;
		  /* 8222B944h */ case    6:  		/* li R6, 1 */
		/* 8222B944h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222B944h case    6:*/		return 0x8222B948;
		  /* 8222B948h */ case    7:  		/* lwz R29, <#[R31 + 28]> */
		/* 8222B948h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000001C) );
		/* 8222B948h case    7:*/		return 0x8222B94C;
		  /* 8222B94Ch */ case    8:  		/* li R5, 0 */
		/* 8222B94Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222B94Ch case    8:*/		return 0x8222B950;
		  /* 8222B950h */ case    9:  		/* mr R4, R31 */
		/* 8222B950h case    9:*/		regs.R4 = regs.R31;
		/* 8222B950h case    9:*/		return 0x8222B954;
		  /* 8222B954h */ case   10:  		/* lwzx R28, <#[R3 + R11]> */
		/* 8222B954h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8222B954h case   10:*/		return 0x8222B958;
		  /* 8222B958h */ case   11:  		/* mr R3, R30 */
		/* 8222B958h case   11:*/		regs.R3 = regs.R30;
		/* 8222B958h case   11:*/		return 0x8222B95C;
		  /* 8222B95Ch */ case   12:  		/* bl -1428 */
		/* 8222B95Ch case   12:*/		regs.LR = 0x8222B960; return 0x8222B3C8;
		/* 8222B95Ch case   12:*/		return 0x8222B960;
		  /* 8222B960h */ case   13:  		/* addi R5, R29, 32 */
		/* 8222B960h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x20);
		/* 8222B960h case   13:*/		return 0x8222B964;
		  /* 8222B964h */ case   14:  		/* li R8, 0 */
		/* 8222B964h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222B964h case   14:*/		return 0x8222B968;
		  /* 8222B968h */ case   15:  		/* li R7, 0 */
		/* 8222B968h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8222B968h case   15:*/		return 0x8222B96C;
		  /* 8222B96Ch */ case   16:  		/* li R6, 86 */
		/* 8222B96Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x56);
		/* 8222B96Ch case   16:*/		return 0x8222B970;
	}
	return 0x8222B970;
} // Block from 8222B92Ch-8222B970h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222B970h
// Function '?GetOrCreateUniformVariable@Compiler@D3DXShader@@QAA?AVResult@2@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B970);
		  /* 8222B970h */ case    0:  		/* mr R4, R29 */
		/* 8222B970h case    0:*/		regs.R4 = regs.R29;
		/* 8222B970h case    0:*/		return 0x8222B974;
		  /* 8222B974h */ case    1:  		/* mr R3, R30 */
		/* 8222B974h case    1:*/		regs.R3 = regs.R30;
		/* 8222B974h case    1:*/		return 0x8222B978;
		  /* 8222B978h */ case    2:  		/* bl -28640 */
		/* 8222B978h case    2:*/		regs.LR = 0x8222B97C; return 0x82224998;
		/* 8222B978h case    2:*/		return 0x8222B97C;
		  /* 8222B97Ch */ case    3:  		/* mr R31, R3 */
		/* 8222B97Ch case    3:*/		regs.R31 = regs.R3;
		/* 8222B97Ch case    3:*/		return 0x8222B980;
		  /* 8222B980h */ case    4:  		/* mr R3, R30 */
		/* 8222B980h case    4:*/		regs.R3 = regs.R30;
		/* 8222B980h case    4:*/		return 0x8222B984;
		  /* 8222B984h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222B984h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222B984h case    5:*/		return 0x8222B988;
		  /* 8222B988h */ case    6:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8222B988h case    6:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8222B988h case    6:*/		return 0x8222B98C;
		  /* 8222B98Ch */ case    7:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8222B98Ch case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8222B98Ch case    7:*/		return 0x8222B990;
		  /* 8222B990h */ case    8:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8222B990h case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8222B990h case    8:*/		return 0x8222B994;
		  /* 8222B994h */ case    9:  		/* bl -816484 */
		/* 8222B994h case    9:*/		regs.LR = 0x8222B998; return 0x82164430;
		/* 8222B994h case    9:*/		return 0x8222B998;
		  /* 8222B998h */ case   10:  		/* addi R11, R31, -16 */
		/* 8222B998h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 8222B998h case   10:*/		return 0x8222B99C;
		  /* 8222B99Ch */ case   11:  		/* stwx R28, <#[R3 + R11]> */
		/* 8222B99Ch case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8222B99Ch case   11:*/		return 0x8222B9A0;
		  /* 8222B9A0h */ case   12:  		/* b 112 */
		/* 8222B9A0h case   12:*/		return 0x8222BA10;
		/* 8222B9A0h case   12:*/		return 0x8222B9A4;
	}
	return 0x8222B9A4;
} // Block from 8222B970h-8222B9A4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222B9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B9A4);
		  /* 8222B9A4h */ case    0:  		/* cmpwi CR6, R10, 85 */
		/* 8222B9A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000055);
		/* 8222B9A4h case    0:*/		return 0x8222B9A8;
		  /* 8222B9A8h */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 8222B9A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222BA28;  }
		/* 8222B9A8h case    1:*/		return 0x8222B9AC;
		  /* 8222B9ACh */ case    2:  		/* cmpwi CR6, R10, 87 */
		/* 8222B9ACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000057);
		/* 8222B9ACh case    2:*/		return 0x8222B9B0;
		  /* 8222B9B0h */ case    3:  		/* mr R3, R30 */
		/* 8222B9B0h case    3:*/		regs.R3 = regs.R30;
		/* 8222B9B0h case    3:*/		return 0x8222B9B4;
		  /* 8222B9B4h */ case    4:  		/* bc 12, CR6_EQ, 100 */
		/* 8222B9B4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222BA18;  }
		/* 8222B9B4h case    4:*/		return 0x8222B9B8;
		  /* 8222B9B8h */ case    5:  		/* cmpwi CR6, R10, 90 */
		/* 8222B9B8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000005A);
		/* 8222B9B8h case    5:*/		return 0x8222B9BC;
		  /* 8222B9BCh */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8222B9BCh case    6:*/		if ( regs.CR[6].eq ) { return 0x8222B9D0;  }
		/* 8222B9BCh case    6:*/		return 0x8222B9C0;
		  /* 8222B9C0h */ case    7:  		/* lis R11, -32252 */
		/* 8222B9C0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8222B9C0h case    7:*/		return 0x8222B9C4;
		  /* 8222B9C4h */ case    8:  		/* li R4, 3500 */
		/* 8222B9C4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 8222B9C4h case    8:*/		return 0x8222B9C8;
		  /* 8222B9C8h */ case    9:  		/* addi R5, R11, -13284 */
		/* 8222B9C8h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCC1C);
		/* 8222B9C8h case    9:*/		return 0x8222B9CC;
		  /* 8222B9CCh */ case   10:  		/* bl -891748 */
		/* 8222B9CCh case   10:*/		regs.LR = 0x8222B9D0; return 0x82151E68;
		/* 8222B9CCh case   10:*/		return 0x8222B9D0;
	}
	return 0x8222B9D0;
} // Block from 8222B9A4h-8222B9D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222B9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B9D0);
		  /* 8222B9D0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222B9D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222B9D0h case    0:*/		return 0x8222B9D4;
		  /* 8222B9D4h */ case    1:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8222B9D4h case    1:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8222B9D4h case    1:*/		return 0x8222B9D8;
		  /* 8222B9D8h */ case    2:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8222B9D8h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8222B9D8h case    2:*/		return 0x8222B9DC;
		  /* 8222B9DCh */ case    3:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8222B9DCh case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8222B9DCh case    3:*/		return 0x8222B9E0;
		  /* 8222B9E0h */ case    4:  		/* bl -816560 */
		/* 8222B9E0h case    4:*/		regs.LR = 0x8222B9E4; return 0x82164430;
		/* 8222B9E0h case    4:*/		return 0x8222B9E4;
		  /* 8222B9E4h */ case    5:  		/* addi R11, R31, -16 */
		/* 8222B9E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 8222B9E4h case    5:*/		return 0x8222B9E8;
		  /* 8222B9E8h */ case    6:  		/* lwz R4, <#[R31 + 28]> */
		/* 8222B9E8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8222B9E8h case    6:*/		return 0x8222B9EC;
		  /* 8222B9ECh */ case    7:  		/* lwzx R5, <#[R3 + R11]> */
		/* 8222B9ECh case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8222B9ECh case    7:*/		return 0x8222B9F0;
		  /* 8222B9F0h */ case    8:  		/* mr R3, R30 */
		/* 8222B9F0h case    8:*/		regs.R3 = regs.R30;
		/* 8222B9F0h case    8:*/		return 0x8222B9F4;
		  /* 8222B9F4h */ case    9:  		/* bl -445764 */
		/* 8222B9F4h case    9:*/		regs.LR = 0x8222B9F8; return 0x821BECB0;
		/* 8222B9F4h case    9:*/		return 0x8222B9F8;
		  /* 8222B9F8h */ case   10:  		/* li R25, 1 */
		/* 8222B9F8h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8222B9F8h case   10:*/		return 0x8222B9FC;
	}
	return 0x8222B9FC;
} // Block from 8222B9D0h-8222B9FCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222B9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222B9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222B9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222B9FC);
		  /* 8222B9FCh */ case    0:  		/* li R6, 1 */
		/* 8222B9FCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222B9FCh case    0:*/		return 0x8222BA00;
		  /* 8222BA00h */ case    1:  		/* li R5, 0 */
		/* 8222BA00h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222BA00h case    1:*/		return 0x8222BA04;
		  /* 8222BA04h */ case    2:  		/* mr R4, R31 */
		/* 8222BA04h case    2:*/		regs.R4 = regs.R31;
		/* 8222BA04h case    2:*/		return 0x8222BA08;
		  /* 8222BA08h */ case    3:  		/* mr R3, R30 */
		/* 8222BA08h case    3:*/		regs.R3 = regs.R30;
		/* 8222BA08h case    3:*/		return 0x8222BA0C;
		  /* 8222BA0Ch */ case    4:  		/* bl -1604 */
		/* 8222BA0Ch case    4:*/		regs.LR = 0x8222BA10; return 0x8222B3C8;
		/* 8222BA0Ch case    4:*/		return 0x8222BA10;
	}
	return 0x8222BA10;
} // Block from 8222B9FCh-8222BA10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222BA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BA10);
		  /* 8222BA10h */ case    0:  		/* mr R3, R25 */
		/* 8222BA10h case    0:*/		regs.R3 = regs.R25;
		/* 8222BA10h case    0:*/		return 0x8222BA14;
		  /* 8222BA14h */ case    1:  		/* b 24 */
		/* 8222BA14h case    1:*/		return 0x8222BA2C;
		/* 8222BA14h case    1:*/		return 0x8222BA18;
	}
	return 0x8222BA18;
} // Block from 8222BA10h-8222BA18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222BA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BA18);
		  /* 8222BA18h */ case    0:  		/* lis R11, -32252 */
		/* 8222BA18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8222BA18h case    0:*/		return 0x8222BA1C;
		  /* 8222BA1Ch */ case    1:  		/* li R4, 3500 */
		/* 8222BA1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 8222BA1Ch case    1:*/		return 0x8222BA20;
		  /* 8222BA20h */ case    2:  		/* addi R5, R11, -216 */
		/* 8222BA20h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFF28);
		/* 8222BA20h case    2:*/		return 0x8222BA24;
		  /* 8222BA24h */ case    3:  		/* bl -891836 */
		/* 8222BA24h case    3:*/		regs.LR = 0x8222BA28; return 0x82151E68;
		/* 8222BA24h case    3:*/		return 0x8222BA28;
	}
	return 0x8222BA28;
} // Block from 8222BA18h-8222BA28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222BA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BA28);
		  /* 8222BA28h */ case    0:  		/* li R3, 0 */
		/* 8222BA28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222BA28h case    0:*/		return 0x8222BA2C;
	}
	return 0x8222BA2C;
} // Block from 8222BA28h-8222BA2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222BA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BA2C);
		  /* 8222BA2Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8222BA2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8222BA2Ch case    0:*/		return 0x8222BA30;
		  /* 8222BA30h */ case    1:  		/* b -1681300 */
		/* 8222BA30h case    1:*/		return 0x8209129C;
		/* 8222BA30h case    1:*/		return 0x8222BA34;
		  /* 8222BA34h */ case    2:  		/* nop */
		/* 8222BA34h case    2:*/		cpu::op::nop();
		/* 8222BA34h case    2:*/		return 0x8222BA38;
	}
	return 0x8222BA38;
} // Block from 8222BA2Ch-8222BA38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222BA38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BA38);
		  /* 8222BA38h */ case    0:  		/* mfspr R12, LR */
		/* 8222BA38h case    0:*/		regs.R12 = regs.LR;
		/* 8222BA38h case    0:*/		return 0x8222BA3C;
		  /* 8222BA3Ch */ case    1:  		/* bl -1681416 */
		/* 8222BA3Ch case    1:*/		regs.LR = 0x8222BA40; return 0x82091234;
		/* 8222BA3Ch case    1:*/		return 0x8222BA40;
		  /* 8222BA40h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8222BA40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8222BA40h case    2:*/		return 0x8222BA44;
		  /* 8222BA44h */ case    3:  		/* mr R24, R3 */
		/* 8222BA44h case    3:*/		regs.R24 = regs.R3;
		/* 8222BA44h case    3:*/		return 0x8222BA48;
		  /* 8222BA48h */ case    4:  		/* mr R21, R4 */
		/* 8222BA48h case    4:*/		regs.R21 = regs.R4;
		/* 8222BA48h case    4:*/		return 0x8222BA4C;
		  /* 8222BA4Ch */ case    5:  		/* mr R23, R5 */
		/* 8222BA4Ch case    5:*/		regs.R23 = regs.R5;
		/* 8222BA4Ch case    5:*/		return 0x8222BA50;
		  /* 8222BA50h */ case    6:  		/* mr R3, R7 */
		/* 8222BA50h case    6:*/		regs.R3 = regs.R7;
		/* 8222BA50h case    6:*/		return 0x8222BA54;
		  /* 8222BA54h */ case    7:  		/* li R5, 38 */
		/* 8222BA54h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222BA54h case    7:*/		return 0x8222BA58;
		  /* 8222BA58h */ case    8:  		/* li R4, 8 */
		/* 8222BA58h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222BA58h case    8:*/		return 0x8222BA5C;
		  /* 8222BA5Ch */ case    9:  		/* mr R20, R6 */
		/* 8222BA5Ch case    9:*/		regs.R20 = regs.R6;
		/* 8222BA5Ch case    9:*/		return 0x8222BA60;
		  /* 8222BA60h */ case   10:  		/* mr R28, R7 */
		/* 8222BA60h case   10:*/		regs.R28 = regs.R7;
		/* 8222BA60h case   10:*/		return 0x8222BA64;
		  /* 8222BA64h */ case   11:  		/* bl -815476 */
		/* 8222BA64h case   11:*/		regs.LR = 0x8222BA68; return 0x821648F0;
		/* 8222BA64h case   11:*/		return 0x8222BA68;
		  /* 8222BA68h */ case   12:  		/* addi R27, R3, 4 */
		/* 8222BA68h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 8222BA68h case   12:*/		return 0x8222BA6C;
		  /* 8222BA6Ch */ case   13:  		/* ori R11, R3, 1 */
		/* 8222BA6Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8222BA6Ch case   13:*/		return 0x8222BA70;
		  /* 8222BA70h */ case   14:  		/* ori R10, R27, 1 */
		/* 8222BA70h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 8222BA70h case   14:*/		return 0x8222BA74;
		  /* 8222BA74h */ case   15:  		/* stw R11, <#[R3 + 4]> */
		/* 8222BA74h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222BA74h case   15:*/		return 0x8222BA78;
		  /* 8222BA78h */ case   16:  		/* mr R31, R3 */
		/* 8222BA78h case   16:*/		regs.R31 = regs.R3;
		/* 8222BA78h case   16:*/		return 0x8222BA7C;
		  /* 8222BA7Ch */ case   17:  		/* stw R10, <#[R3]> */
		/* 8222BA7Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222BA7Ch case   17:*/		return 0x8222BA80;
		  /* 8222BA80h */ case   18:  		/* li R5, 38 */
		/* 8222BA80h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222BA80h case   18:*/		return 0x8222BA84;
		  /* 8222BA84h */ case   19:  		/* li R4, 8 */
		/* 8222BA84h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222BA84h case   19:*/		return 0x8222BA88;
		  /* 8222BA88h */ case   20:  		/* mr R3, R28 */
		/* 8222BA88h case   20:*/		regs.R3 = regs.R28;
		/* 8222BA88h case   20:*/		return 0x8222BA8C;
		  /* 8222BA8Ch */ case   21:  		/* bl -815516 */
		/* 8222BA8Ch case   21:*/		regs.LR = 0x8222BA90; return 0x821648F0;
		/* 8222BA8Ch case   21:*/		return 0x8222BA90;
		  /* 8222BA90h */ case   22:  		/* addi R26, R3, 4 */
		/* 8222BA90h case   22:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x4);
		/* 8222BA90h case   22:*/		return 0x8222BA94;
		  /* 8222BA94h */ case   23:  		/* ori R10, R3, 1 */
		/* 8222BA94h case   23:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 8222BA94h case   23:*/		return 0x8222BA98;
		  /* 8222BA98h */ case   24:  		/* ori R9, R26, 1 */
		/* 8222BA98h case   24:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R26,0x1);
		/* 8222BA98h case   24:*/		return 0x8222BA9C;
		  /* 8222BA9Ch */ case   25:  		/* mr R30, R3 */
		/* 8222BA9Ch case   25:*/		regs.R30 = regs.R3;
		/* 8222BA9Ch case   25:*/		return 0x8222BAA0;
		  /* 8222BAA0h */ case   26:  		/* stw R10, <#[R3 + 4]> */
		/* 8222BAA0h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 8222BAA0h case   26:*/		return 0x8222BAA4;
		  /* 8222BAA4h */ case   27:  		/* mr R11, R24 */
		/* 8222BAA4h case   27:*/		regs.R11 = regs.R24;
		/* 8222BAA4h case   27:*/		return 0x8222BAA8;
		  /* 8222BAA8h */ case   28:  		/* stw R9, <#[R3]> */
		/* 8222BAA8h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8222BAA8h case   28:*/		return 0x8222BAAC;
		  /* 8222BAACh */ case   29:  		/* li R19, 0 */
		/* 8222BAACh case   29:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 8222BAACh case   29:*/		return 0x8222BAB0;
		  /* 8222BAB0h */ case   30:  		/* li R22, 0 */
		/* 8222BAB0h case   30:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8222BAB0h case   30:*/		return 0x8222BAB4;
		  /* 8222BAB4h */ case   31:  		/* lwz R25, <#[R11]> */
		/* 8222BAB4h case   31:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BAB4h case   31:*/		return 0x8222BAB8;
		  /* 8222BAB8h */ case   32:  		/* cmplwi CR6, R25, 0 */
		/* 8222BAB8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8222BAB8h case   32:*/		return 0x8222BABC;
		  /* 8222BABCh */ case   33:  		/* bc 12, CR6_EQ, 308 */
		/* 8222BABCh case   33:*/		if ( regs.CR[6].eq ) { return 0x8222BBF0;  }
		/* 8222BABCh case   33:*/		return 0x8222BAC0;
		  /* 8222BAC0h */ case   34:  		/* lwz R29, <#[R25 + 12]> */
		/* 8222BAC0h case   34:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x0000000C) );
		/* 8222BAC0h case   34:*/		return 0x8222BAC4;
		  /* 8222BAC4h */ case   35:  		/* cmplw CR6, R29, R21 */
		/* 8222BAC4h case   35:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R21);
		/* 8222BAC4h case   35:*/		return 0x8222BAC8;
		  /* 8222BAC8h */ case   36:  		/* bc 12, CR6_EQ, 440 */
		/* 8222BAC8h case   36:*/		if ( regs.CR[6].eq ) { return 0x8222BC80;  }
		/* 8222BAC8h case   36:*/		return 0x8222BACC;
		  /* 8222BACCh */ case   37:  		/* lwz R11, <#[R29 + 28]> */
		/* 8222BACCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 8222BACCh case   37:*/		return 0x8222BAD0;
		  /* 8222BAD0h */ case   38:  		/* cmplwi CR6, R23, 0 */
		/* 8222BAD0h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8222BAD0h case   38:*/		return 0x8222BAD4;
		  /* 8222BAD4h */ case   39:  		/* bc 12, CR6_EQ, 52 */
		/* 8222BAD4h case   39:*/		if ( regs.CR[6].eq ) { return 0x8222BB08;  }
		/* 8222BAD4h case   39:*/		return 0x8222BAD8;
		  /* 8222BAD8h */ case   40:  		/* lwz R10, <#[R23 + 48]> */
		/* 8222BAD8h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 8222BAD8h case   40:*/		return 0x8222BADC;
		  /* 8222BADCh */ case   41:  		/* li R9, 1 */
		/* 8222BADCh case   41:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8222BADCh case   41:*/		return 0x8222BAE0;
		  /* 8222BAE0h */ case   42:  		/* lwz R8, <#[R11 + 40]> */
		/* 8222BAE0h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 8222BAE0h case   42:*/		return 0x8222BAE4;
		  /* 8222BAE4h */ case   43:  		/* rlwinm R7, R10, 0, 13, 31 */
		/* 8222BAE4h case   43:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R10);
		/* 8222BAE4h case   43:*/		return 0x8222BAE8;
		  /* 8222BAE8h */ case   44:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 8222BAE8h case   44:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 8222BAE8h case   44:*/		return 0x8222BAEC;
		  /* 8222BAECh */ case   45:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 8222BAECh case   45:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 8222BAECh case   45:*/		return 0x8222BAF0;
		  /* 8222BAF0h */ case   46:  		/* addi R10, R10, 1 */
		/* 8222BAF0h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222BAF0h case   46:*/		return 0x8222BAF4;
		  /* 8222BAF4h */ case   47:  		/* slw R9, R9, R7 */
		/* 8222BAF4h case   47:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8222BAF4h case   47:*/		return 0x8222BAF8;
		  /* 8222BAF8h */ case   48:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222BAF8h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222BAF8h case   48:*/		return 0x8222BAFC;
		  /* 8222BAFCh */ case   49:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8222BAFCh case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8222BAFCh case   49:*/		return 0x8222BB00;
		  /* 8222BB00h */ case   50:  		/* and. R10, R10, R9 */
		/* 8222BB00h case   50:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8222BB00h case   50:*/		return 0x8222BB04;
		  /* 8222BB04h */ case   51:  		/* bc 12, CR0_EQ, 228 */
		/* 8222BB04h case   51:*/		if ( regs.CR[0].eq ) { return 0x8222BBE8;  }
		/* 8222BB04h case   51:*/		return 0x8222BB08;
	}
	return 0x8222BB08;
} // Block from 8222BA38h-8222BB08h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8222BB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BB08);
		  /* 8222BB08h */ case    0:  		/* rlwinm. R10, R20, 0, 24, 31 */
		/* 8222BB08h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R20);
		/* 8222BB08h case    0:*/		return 0x8222BB0C;
		  /* 8222BB0Ch */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8222BB0Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8222BB2C;  }
		/* 8222BB0Ch case    1:*/		return 0x8222BB10;
		  /* 8222BB10h */ case    2:  		/* lwz R10, <#[R24 + 28]> */
		/* 8222BB10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000001C) );
		/* 8222BB10h case    2:*/		return 0x8222BB14;
		  /* 8222BB14h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8222BB14h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222BB14h case    3:*/		return 0x8222BB18;
		  /* 8222BB18h */ case    4:  		/* bc 4, CR6_EQ, 208 */
		/* 8222BB18h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8222BBE8;  }
		/* 8222BB18h case    4:*/		return 0x8222BB1C;
		  /* 8222BB1Ch */ case    5:  		/* lwz R11, <#[R29 + 8]> */
		/* 8222BB1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BB1Ch case    5:*/		return 0x8222BB20;
		  /* 8222BB20h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222BB20h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222BB20h case    6:*/		return 0x8222BB24;
		  /* 8222BB24h */ case    7:  		/* cmplwi CR6, R11, 14336 */
		/* 8222BB24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8222BB24h case    7:*/		return 0x8222BB28;
		  /* 8222BB28h */ case    8:  		/* bc 12, CR6_EQ, 192 */
		/* 8222BB28h case    8:*/		if ( regs.CR[6].eq ) { return 0x8222BBE8;  }
		/* 8222BB28h case    8:*/		return 0x8222BB2C;
	}
	return 0x8222BB2C;
} // Block from 8222BB08h-8222BB2Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222BB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BB2C);
		  /* 8222BB2Ch */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8222BB2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BB2Ch case    0:*/		return 0x8222BB30;
		  /* 8222BB30h */ case    1:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 8222BB30h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 8222BB30h case    1:*/		return 0x8222BB34;
		  /* 8222BB34h */ case    2:  		/* bc 4, CR0_EQ, 180 */
		/* 8222BB34h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222BBE8;  }
		/* 8222BB34h case    2:*/		return 0x8222BB38;
		  /* 8222BB38h */ case    3:  		/* oris R11, R11, 8192 */
		/* 8222BB38h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 8222BB38h case    3:*/		return 0x8222BB3C;
		  /* 8222BB3Ch */ case    4:  		/* stw R11, <#[R29 + 8]> */
		/* 8222BB3Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BB3Ch case    4:*/		return 0x8222BB40;
		  /* 8222BB40h */ case    5:  		/* lwz R11, <#[R27]> */
		/* 8222BB40h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8222BB40h case    5:*/		return 0x8222BB44;
		  /* 8222BB44h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222BB44h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222BB44h case    6:*/		return 0x8222BB48;
		  /* 8222BB48h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 8222BB48h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8222BB70;  }
		/* 8222BB48h case    7:*/		return 0x8222BB4C;
		  /* 8222BB4Ch */ case    8:  		/* lwz R11, <#[R31]> */
		/* 8222BB4Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222BB4Ch case    8:*/		return 0x8222BB50;
		  /* 8222BB50h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BB50h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BB50h case    9:*/		return 0x8222BB54;
		  /* 8222BB54h */ case   10:  		/* addic. R3, R11, -4 */
		/* 8222BB54h case   10:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222BB54h case   10:*/		return 0x8222BB58;
		  /* 8222BB58h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 8222BB58h case   11:*/		if ( regs.CR[0].eq ) { return 0x8222BB70;  }
		/* 8222BB58h case   11:*/		return 0x8222BB5C;
		  /* 8222BB5Ch */ case   12:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BB5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BB5Ch case   12:*/		return 0x8222BB60;
		  /* 8222BB60h */ case   13:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222BB60h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222BB60h case   13:*/		return 0x8222BB64;
		  /* 8222BB64h */ case   14:  		/* addi R11, R11, 1 */
		/* 8222BB64h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222BB64h case   14:*/		return 0x8222BB68;
		  /* 8222BB68h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8222BB68h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222BB68h case   15:*/		return 0x8222BB6C;
		  /* 8222BB6Ch */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 8222BB6Ch case   16:*/		if ( !regs.CR[6].gt ) { return 0x8222BB7C;  }
		/* 8222BB6Ch case   16:*/		return 0x8222BB70;
	}
	return 0x8222BB70;
} // Block from 8222BB2Ch-8222BB70h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222BB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BB70);
		  /* 8222BB70h */ case    0:  		/* li R4, 1 */
		/* 8222BB70h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222BB70h case    0:*/		return 0x8222BB74;
		  /* 8222BB74h */ case    1:  		/* mr R3, R31 */
		/* 8222BB74h case    1:*/		regs.R3 = regs.R31;
		/* 8222BB74h case    1:*/		return 0x8222BB78;
		  /* 8222BB78h */ case    2:  		/* bl -649904 */
		/* 8222BB78h case    2:*/		regs.LR = 0x8222BB7C; return 0x8218D0C8;
		/* 8222BB78h case    2:*/		return 0x8222BB7C;
	}
	return 0x8222BB7C;
} // Block from 8222BB70h-8222BB7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222BB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BB7C);
		  /* 8222BB7Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BB7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BB7Ch case    0:*/		return 0x8222BB80;
		  /* 8222BB80h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222BB80h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222BB80h case    1:*/		return 0x8222BB84;
		  /* 8222BB84h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222BB84h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222BB84h case    2:*/		return 0x8222BB88;
		  /* 8222BB88h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222BB88h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222BB88h case    3:*/		return 0x8222BB8C;
		  /* 8222BB8Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222BB8Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BB8Ch case    4:*/		return 0x8222BB90;
		  /* 8222BB90h */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 8222BB90h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222BB90h case    5:*/		return 0x8222BB94;
		  /* 8222BB94h */ case    6:  		/* lwz R11, <#[R26]> */
		/* 8222BB94h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222BB94h case    6:*/		return 0x8222BB98;
		  /* 8222BB98h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222BB98h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222BB98h case    7:*/		return 0x8222BB9C;
		  /* 8222BB9Ch */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8222BB9Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x8222BBC4;  }
		/* 8222BB9Ch case    8:*/		return 0x8222BBA0;
		  /* 8222BBA0h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 8222BBA0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222BBA0h case    9:*/		return 0x8222BBA4;
		  /* 8222BBA4h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BBA4h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BBA4h case   10:*/		return 0x8222BBA8;
		  /* 8222BBA8h */ case   11:  		/* addic. R3, R11, -4 */
		/* 8222BBA8h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222BBA8h case   11:*/		return 0x8222BBAC;
		  /* 8222BBACh */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 8222BBACh case   12:*/		if ( regs.CR[0].eq ) { return 0x8222BBC4;  }
		/* 8222BBACh case   12:*/		return 0x8222BBB0;
		  /* 8222BBB0h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BBB0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BBB0h case   13:*/		return 0x8222BBB4;
		  /* 8222BBB4h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222BBB4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222BBB4h case   14:*/		return 0x8222BBB8;
		  /* 8222BBB8h */ case   15:  		/* addi R11, R11, 1 */
		/* 8222BBB8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222BBB8h case   15:*/		return 0x8222BBBC;
		  /* 8222BBBCh */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8222BBBCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222BBBCh case   16:*/		return 0x8222BBC0;
		  /* 8222BBC0h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 8222BBC0h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8222BBD0;  }
		/* 8222BBC0h case   17:*/		return 0x8222BBC4;
	}
	return 0x8222BBC4;
} // Block from 8222BB7Ch-8222BBC4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222BBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BBC4);
		  /* 8222BBC4h */ case    0:  		/* li R4, 1 */
		/* 8222BBC4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222BBC4h case    0:*/		return 0x8222BBC8;
		  /* 8222BBC8h */ case    1:  		/* mr R3, R30 */
		/* 8222BBC8h case    1:*/		regs.R3 = regs.R30;
		/* 8222BBC8h case    1:*/		return 0x8222BBCC;
		  /* 8222BBCCh */ case    2:  		/* bl -649988 */
		/* 8222BBCCh case    2:*/		regs.LR = 0x8222BBD0; return 0x8218D0C8;
		/* 8222BBCCh case    2:*/		return 0x8222BBD0;
	}
	return 0x8222BBD0;
} // Block from 8222BBC4h-8222BBD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222BBD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BBD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BBD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BBD0);
		  /* 8222BBD0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BBD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BBD0h case    0:*/		return 0x8222BBD4;
		  /* 8222BBD4h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222BBD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222BBD4h case    1:*/		return 0x8222BBD8;
		  /* 8222BBD8h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222BBD8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222BBD8h case    2:*/		return 0x8222BBDC;
		  /* 8222BBDCh */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222BBDCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222BBDCh case    3:*/		return 0x8222BBE0;
		  /* 8222BBE0h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222BBE0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BBE0h case    4:*/		return 0x8222BBE4;
		  /* 8222BBE4h */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 8222BBE4h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222BBE4h case    5:*/		return 0x8222BBE8;
	}
	return 0x8222BBE8;
} // Block from 8222BBD0h-8222BBE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222BBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BBE8);
		  /* 8222BBE8h */ case    0:  		/* lwz R25, <#[R25 + 4]> */
		/* 8222BBE8h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x00000004) );
		/* 8222BBE8h case    0:*/		return 0x8222BBEC;
		  /* 8222BBECh */ case    1:  		/* b -308 */
		/* 8222BBECh case    1:*/		return 0x8222BAB8;
		/* 8222BBECh case    1:*/		return 0x8222BBF0;
	}
	return 0x8222BBF0;
} // Block from 8222BBE8h-8222BBF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222BBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BBF0);
		  /* 8222BBF0h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8222BBF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8222BBF0h case    0:*/		return 0x8222BBF4;
		  /* 8222BBF4h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222BBF4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222BBF4h case    1:*/		return 0x8222BBF8;
		  /* 8222BBF8h */ case    2:  		/* bc 4, CR0_EQ, 148 */
		/* 8222BBF8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222BC8C;  }
		/* 8222BBF8h case    2:*/		return 0x8222BBFC;
		  /* 8222BBFCh */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8222BBFCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222BBFCh case    3:*/		return 0x8222BC00;
		  /* 8222BC00h */ case    4:  		/* bc 12, CR0_EQ, 140 */
		/* 8222BC00h case    4:*/		if ( regs.CR[0].eq ) { return 0x8222BC8C;  }
		/* 8222BC00h case    4:*/		return 0x8222BC04;
		  /* 8222BC04h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8222BC04h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222BC04h case    5:*/		return 0x8222BC08;
		  /* 8222BC08h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BC08h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BC08h case    6:*/		return 0x8222BC0C;
		  /* 8222BC0Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 8222BC0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222BC0Ch case    7:*/		return 0x8222BC10;
		  /* 8222BC10h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222BC10h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BC10h case    8:*/		return 0x8222BC14;
		  /* 8222BC14h */ case    9:  		/* addi R10, R11, 3 */
		/* 8222BC14h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222BC14h case    9:*/		return 0x8222BC18;
		  /* 8222BC18h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8222BC18h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222BC18h case   10:*/		return 0x8222BC1C;
		  /* 8222BC1Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222BC1Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222BC1Ch case   11:*/		return 0x8222BC20;
		  /* 8222BC20h */ case   12:  		/* lwzx R29, <#[R10 + R4]> */
		/* 8222BC20h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222BC20h case   12:*/		return 0x8222BC24;
		  /* 8222BC24h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8222BC24h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222BC24h case   13:*/		return 0x8222BC28;
		  /* 8222BC28h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 8222BC28h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222BC64;  }
		/* 8222BC28h case   14:*/		return 0x8222BC2C;
		  /* 8222BC2Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222BC2Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222BC2Ch case   15:*/		return 0x8222BC30;
		  /* 8222BC30h */ case   16:  		/* mr R3, R31 */
		/* 8222BC30h case   16:*/		regs.R3 = regs.R31;
		/* 8222BC30h case   16:*/		return 0x8222BC34;
		  /* 8222BC34h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222BC34h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BC34h case   17:*/		return 0x8222BC38;
		  /* 8222BC38h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8222BC38h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BC38h case   18:*/		return 0x8222BC3C;
		  /* 8222BC3Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222BC3Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222BC3Ch case   19:*/		return 0x8222BC40;
		  /* 8222BC40h */ case   20:  		/* stw R9, <#[R10]> */
		/* 8222BC40h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222BC40h case   20:*/		return 0x8222BC44;
		  /* 8222BC44h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222BC44h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BC44h case   21:*/		return 0x8222BC48;
		  /* 8222BC48h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8222BC48h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BC48h case   22:*/		return 0x8222BC4C;
		  /* 8222BC4Ch */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BC4Ch case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BC4Ch case   23:*/		return 0x8222BC50;
		  /* 8222BC50h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8222BC50h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BC50h case   24:*/		return 0x8222BC54;
		  /* 8222BC54h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222BC54h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222BC54h case   25:*/		return 0x8222BC58;
		  /* 8222BC58h */ case   26:  		/* addi R11, R11, 4 */
		/* 8222BC58h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222BC58h case   26:*/		return 0x8222BC5C;
		  /* 8222BC5Ch */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222BC5Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222BC5Ch case   27:*/		return 0x8222BC60;
		  /* 8222BC60h */ case   28:  		/* bl -892504 */
		/* 8222BC60h case   28:*/		regs.LR = 0x8222BC64; return 0x82151E08;
		/* 8222BC60h case   28:*/		return 0x8222BC64;
	}
	return 0x8222BC64;
} // Block from 8222BBF0h-8222BC64h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8222BC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BC64);
		  /* 8222BC64h */ case    0:  		/* addi R22, R22, 1 */
		/* 8222BC64h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8222BC64h case    0:*/		return 0x8222BC68;
		  /* 8222BC68h */ case    1:  		/* mr R11, R29 */
		/* 8222BC68h case    1:*/		regs.R11 = regs.R29;
		/* 8222BC68h case    1:*/		return 0x8222BC6C;
		  /* 8222BC6Ch */ case    2:  		/* cmplwi CR6, R22, 40000 */
		/* 8222BC6Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00009C40);
		/* 8222BC6Ch case    2:*/		return 0x8222BC70;
		  /* 8222BC70h */ case    3:  		/* bc 4, CR6_GT, -444 */
		/* 8222BC70h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8222BAB4;  }
		/* 8222BC70h case    3:*/		return 0x8222BC74;
		  /* 8222BC74h */ case    4:  		/* li R4, 4800 */
		/* 8222BC74h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222BC74h case    4:*/		return 0x8222BC78;
		  /* 8222BC78h */ case    5:  		/* mr R3, R28 */
		/* 8222BC78h case    5:*/		regs.R3 = regs.R28;
		/* 8222BC78h case    5:*/		return 0x8222BC7C;
		  /* 8222BC7Ch */ case    6:  		/* bl -892436 */
		/* 8222BC7Ch case    6:*/		regs.LR = 0x8222BC80; return 0x82151E68;
		/* 8222BC7Ch case    6:*/		return 0x8222BC80;
	}
	return 0x8222BC80;
} // Block from 8222BC64h-8222BC80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222BC80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BC80);
		  /* 8222BC80h */ case    0:  		/* mr R3, R31 */
		/* 8222BC80h case    0:*/		regs.R3 = regs.R31;
		/* 8222BC80h case    0:*/		return 0x8222BC84;
		  /* 8222BC84h */ case    1:  		/* li R19, 1 */
		/* 8222BC84h case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 8222BC84h case    1:*/		return 0x8222BC88;
		  /* 8222BC88h */ case    2:  		/* bl -238248 */
		/* 8222BC88h case    2:*/		regs.LR = 0x8222BC8C; return 0x821F19E0;
		/* 8222BC88h case    2:*/		return 0x8222BC8C;
	}
	return 0x8222BC8C;
} // Block from 8222BC80h-8222BC8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222BC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BC8C);
		  /* 8222BC8Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 8222BC8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222BC8Ch case    0:*/		return 0x8222BC90;
		  /* 8222BC90h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222BC90h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222BC90h case    1:*/		return 0x8222BC94;
		  /* 8222BC94h */ case    2:  		/* bc 4, CR0_EQ, 124 */
		/* 8222BC94h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222BD10;  }
		/* 8222BC94h case    2:*/		return 0x8222BC98;
		  /* 8222BC98h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8222BC98h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222BC98h case    3:*/		return 0x8222BC9C;
		  /* 8222BC9Ch */ case    4:  		/* bc 12, CR0_EQ, 116 */
		/* 8222BC9Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8222BD10;  }
		/* 8222BC9Ch case    4:*/		return 0x8222BCA0;
		  /* 8222BCA0h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 8222BCA0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222BCA0h case    5:*/		return 0x8222BCA4;
		  /* 8222BCA4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BCA4h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BCA4h case    6:*/		return 0x8222BCA8;
		  /* 8222BCA8h */ case    7:  		/* addi R4, R11, -4 */
		/* 8222BCA8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222BCA8h case    7:*/		return 0x8222BCAC;
		  /* 8222BCACh */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222BCACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BCACh case    8:*/		return 0x8222BCB0;
		  /* 8222BCB0h */ case    9:  		/* addi R10, R11, 3 */
		/* 8222BCB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222BCB0h case    9:*/		return 0x8222BCB4;
		  /* 8222BCB4h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8222BCB4h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222BCB4h case   10:*/		return 0x8222BCB8;
		  /* 8222BCB8h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222BCB8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222BCB8h case   11:*/		return 0x8222BCBC;
		  /* 8222BCBCh */ case   12:  		/* lwzx R29, <#[R10 + R4]> */
		/* 8222BCBCh case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222BCBCh case   12:*/		return 0x8222BCC0;
		  /* 8222BCC0h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8222BCC0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222BCC0h case   13:*/		return 0x8222BCC4;
		  /* 8222BCC4h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 8222BCC4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222BD00;  }
		/* 8222BCC4h case   14:*/		return 0x8222BCC8;
		  /* 8222BCC8h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222BCC8h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222BCC8h case   15:*/		return 0x8222BCCC;
		  /* 8222BCCCh */ case   16:  		/* mr R3, R30 */
		/* 8222BCCCh case   16:*/		regs.R3 = regs.R30;
		/* 8222BCCCh case   16:*/		return 0x8222BCD0;
		  /* 8222BCD0h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222BCD0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BCD0h case   17:*/		return 0x8222BCD4;
		  /* 8222BCD4h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8222BCD4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BCD4h case   18:*/		return 0x8222BCD8;
		  /* 8222BCD8h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222BCD8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222BCD8h case   19:*/		return 0x8222BCDC;
		  /* 8222BCDCh */ case   20:  		/* stw R9, <#[R10]> */
		/* 8222BCDCh case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222BCDCh case   20:*/		return 0x8222BCE0;
		  /* 8222BCE0h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 8222BCE0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BCE0h case   21:*/		return 0x8222BCE4;
		  /* 8222BCE4h */ case   22:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222BCE4h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222BCE4h case   22:*/		return 0x8222BCE8;
		  /* 8222BCE8h */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222BCE8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BCE8h case   23:*/		return 0x8222BCEC;
		  /* 8222BCECh */ case   24:  		/* stw R11, <#[R10]> */
		/* 8222BCECh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222BCECh case   24:*/		return 0x8222BCF0;
		  /* 8222BCF0h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222BCF0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222BCF0h case   25:*/		return 0x8222BCF4;
		  /* 8222BCF4h */ case   26:  		/* addi R11, R11, 4 */
		/* 8222BCF4h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222BCF4h case   26:*/		return 0x8222BCF8;
		  /* 8222BCF8h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222BCF8h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222BCF8h case   27:*/		return 0x8222BCFC;
		  /* 8222BCFCh */ case   28:  		/* bl -892660 */
		/* 8222BCFCh case   28:*/		regs.LR = 0x8222BD00; return 0x82151E08;
		/* 8222BCFCh case   28:*/		return 0x8222BD00;
	}
	return 0x8222BD00;
} // Block from 8222BC8Ch-8222BD00h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8222BD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BD00);
		  /* 8222BD00h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8222BD00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BD00h case    0:*/		return 0x8222BD04;
		  /* 8222BD04h */ case    1:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 8222BD04h case    1:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 8222BD04h case    1:*/		return 0x8222BD08;
		  /* 8222BD08h */ case    2:  		/* stw R11, <#[R29 + 8]> */
		/* 8222BD08h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BD08h case    2:*/		return 0x8222BD0C;
		  /* 8222BD0Ch */ case    3:  		/* b -128 */
		/* 8222BD0Ch case    3:*/		return 0x8222BC8C;
		/* 8222BD0Ch case    3:*/		return 0x8222BD10;
	}
	return 0x8222BD10;
} // Block from 8222BD00h-8222BD10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222BD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BD10);
		  /* 8222BD10h */ case    0:  		/* lwz R10, <#[R28 + 976]> */
		/* 8222BD10h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000003D0) );
		/* 8222BD10h case    0:*/		return 0x8222BD14;
		  /* 8222BD14h */ case    1:  		/* addi R11, R28, 972 */
		/* 8222BD14h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 8222BD14h case    1:*/		return 0x8222BD18;
		  /* 8222BD18h */ case    2:  		/* rlwinm R11, R30, 0, 0, 31 */
		/* 8222BD18h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R30);
		/* 8222BD18h case    2:*/		return 0x8222BD1C;
		  /* 8222BD1Ch */ case    3:  		/* mr R3, R19 */
		/* 8222BD1Ch case    3:*/		regs.R3 = regs.R19;
		/* 8222BD1Ch case    3:*/		return 0x8222BD20;
		  /* 8222BD20h */ case    4:  		/* stw R10, <#[R30]> */
		/* 8222BD20h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8222BD20h case    4:*/		return 0x8222BD24;
		  /* 8222BD24h */ case    5:  		/* stw R30, <#[R28 + 976]> */
		/* 8222BD24h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x000003D0) );
		/* 8222BD24h case    5:*/		return 0x8222BD28;
		  /* 8222BD28h */ case    6:  		/* stw R11, <#[R31]> */
		/* 8222BD28h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222BD28h case    6:*/		return 0x8222BD2C;
		  /* 8222BD2Ch */ case    7:  		/* stw R31, <#[R28 + 976]> */
		/* 8222BD2Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x000003D0) );
		/* 8222BD2Ch case    7:*/		return 0x8222BD30;
	}
	return 0x8222BD30;
} // Block from 8222BD10h-8222BD30h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222BD30h
// Function '?GetOrCreateVariable@Compiler@D3DXShader@@QAA?AVResult@2@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BD30);
		  /* 8222BD30h */ case    0:  		/* addi R1, R1, 192 */
		/* 8222BD30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8222BD30h case    0:*/		return 0x8222BD34;
		  /* 8222BD34h */ case    1:  		/* b -1682096 */
		/* 8222BD34h case    1:*/		return 0x82091284;
		/* 8222BD34h case    1:*/		return 0x8222BD38;
	}
	return 0x8222BD38;
} // Block from 8222BD30h-8222BD38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222BD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BD38);
		  /* 8222BD38h */ case    0:  		/* mfspr R12, LR */
		/* 8222BD38h case    0:*/		regs.R12 = regs.LR;
		/* 8222BD38h case    0:*/		return 0x8222BD3C;
		  /* 8222BD3Ch */ case    1:  		/* bl -1682192 */
		/* 8222BD3Ch case    1:*/		regs.LR = 0x8222BD40; return 0x8209122C;
		/* 8222BD3Ch case    1:*/		return 0x8222BD40;
		  /* 8222BD40h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8222BD40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8222BD40h case    2:*/		return 0x8222BD44;
		  /* 8222BD44h */ case    3:  		/* lwz R20, <#[R4 + 28]> */
		/* 8222BD44h case    3:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R4 + 0x0000001C) );
		/* 8222BD44h case    3:*/		return 0x8222BD48;
		  /* 8222BD48h */ case    4:  		/* mr R25, R4 */
		/* 8222BD48h case    4:*/		regs.R25 = regs.R4;
		/* 8222BD48h case    4:*/		return 0x8222BD4C;
		  /* 8222BD4Ch */ case    5:  		/* mr R23, R5 */
		/* 8222BD4Ch case    5:*/		regs.R23 = regs.R5;
		/* 8222BD4Ch case    5:*/		return 0x8222BD50;
		  /* 8222BD50h */ case    6:  		/* li R5, 38 */
		/* 8222BD50h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222BD50h case    6:*/		return 0x8222BD54;
		  /* 8222BD54h */ case    7:  		/* li R4, 8 */
		/* 8222BD54h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222BD54h case    7:*/		return 0x8222BD58;
		  /* 8222BD58h */ case    8:  		/* mr R27, R3 */
		/* 8222BD58h case    8:*/		regs.R27 = regs.R3;
		/* 8222BD58h case    8:*/		return 0x8222BD5C;
		  /* 8222BD5Ch */ case    9:  		/* mr R19, R6 */
		/* 8222BD5Ch case    9:*/		regs.R19 = regs.R6;
		/* 8222BD5Ch case    9:*/		return 0x8222BD60;
		  /* 8222BD60h */ case   10:  		/* mr R18, R7 */
		/* 8222BD60h case   10:*/		regs.R18 = regs.R7;
		/* 8222BD60h case   10:*/		return 0x8222BD64;
		  /* 8222BD64h */ case   11:  		/* bl -816244 */
		/* 8222BD64h case   11:*/		regs.LR = 0x8222BD68; return 0x821648F0;
		/* 8222BD64h case   11:*/		return 0x8222BD68;
		  /* 8222BD68h */ case   12:  		/* addi R26, R3, 4 */
		/* 8222BD68h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x4);
		/* 8222BD68h case   12:*/		return 0x8222BD6C;
		  /* 8222BD6Ch */ case   13:  		/* ori R11, R3, 1 */
		/* 8222BD6Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8222BD6Ch case   13:*/		return 0x8222BD70;
		  /* 8222BD70h */ case   14:  		/* ori R10, R26, 1 */
		/* 8222BD70h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R26,0x1);
		/* 8222BD70h case   14:*/		return 0x8222BD74;
		  /* 8222BD74h */ case   15:  		/* stw R11, <#[R3 + 4]> */
		/* 8222BD74h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222BD74h case   15:*/		return 0x8222BD78;
		  /* 8222BD78h */ case   16:  		/* mr R31, R3 */
		/* 8222BD78h case   16:*/		regs.R31 = regs.R3;
		/* 8222BD78h case   16:*/		return 0x8222BD7C;
		  /* 8222BD7Ch */ case   17:  		/* stw R10, <#[R3]> */
		/* 8222BD7Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222BD7Ch case   17:*/		return 0x8222BD80;
		  /* 8222BD80h */ case   18:  		/* li R5, 38 */
		/* 8222BD80h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222BD80h case   18:*/		return 0x8222BD84;
		  /* 8222BD84h */ case   19:  		/* li R4, 8 */
		/* 8222BD84h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222BD84h case   19:*/		return 0x8222BD88;
		  /* 8222BD88h */ case   20:  		/* mr R3, R27 */
		/* 8222BD88h case   20:*/		regs.R3 = regs.R27;
		/* 8222BD88h case   20:*/		return 0x8222BD8C;
		  /* 8222BD8Ch */ case   21:  		/* bl -816284 */
		/* 8222BD8Ch case   21:*/		regs.LR = 0x8222BD90; return 0x821648F0;
		/* 8222BD8Ch case   21:*/		return 0x8222BD90;
		  /* 8222BD90h */ case   22:  		/* addi R24, R3, 4 */
		/* 8222BD90h case   22:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x4);
		/* 8222BD90h case   22:*/		return 0x8222BD94;
		  /* 8222BD94h */ case   23:  		/* ori R11, R3, 1 */
		/* 8222BD94h case   23:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8222BD94h case   23:*/		return 0x8222BD98;
		  /* 8222BD98h */ case   24:  		/* ori R10, R24, 1 */
		/* 8222BD98h case   24:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R24,0x1);
		/* 8222BD98h case   24:*/		return 0x8222BD9C;
		  /* 8222BD9Ch */ case   25:  		/* mr R30, R3 */
		/* 8222BD9Ch case   25:*/		regs.R30 = regs.R3;
		/* 8222BD9Ch case   25:*/		return 0x8222BDA0;
		  /* 8222BDA0h */ case   26:  		/* stw R11, <#[R3 + 4]> */
		/* 8222BDA0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222BDA0h case   26:*/		return 0x8222BDA4;
		  /* 8222BDA4h */ case   27:  		/* mr R29, R25 */
		/* 8222BDA4h case   27:*/		regs.R29 = regs.R25;
		/* 8222BDA4h case   27:*/		return 0x8222BDA8;
		  /* 8222BDA8h */ case   28:  		/* stw R10, <#[R3]> */
		/* 8222BDA8h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222BDA8h case   28:*/		return 0x8222BDAC;
		  /* 8222BDACh */ case   29:  		/* li R17, 1 */
		/* 8222BDACh case   29:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 8222BDACh case   29:*/		return 0x8222BDB0;
		  /* 8222BDB0h */ case   30:  		/* li R21, 0 */
		/* 8222BDB0h case   30:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8222BDB0h case   30:*/		return 0x8222BDB4;
		  /* 8222BDB4h */ case   31:  		/* lwz R22, <#[R29]> */
		/* 8222BDB4h case   31:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R29 + 0x00000000) );
		/* 8222BDB4h case   31:*/		return 0x8222BDB8;
		  /* 8222BDB8h */ case   32:  		/* cmplwi CR6, R22, 0 */
		/* 8222BDB8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8222BDB8h case   32:*/		return 0x8222BDBC;
		  /* 8222BDBCh */ case   33:  		/* bc 12, CR6_EQ, 484 */
		/* 8222BDBCh case   33:*/		if ( regs.CR[6].eq ) { return 0x8222BFA0;  }
		/* 8222BDBCh case   33:*/		return 0x8222BDC0;
		  /* 8222BDC0h */ case   34:  		/* lwz R28, <#[R22 + 12]> */
		/* 8222BDC0h case   34:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R22 + 0x0000000C) );
		/* 8222BDC0h case   34:*/		return 0x8222BDC4;
		  /* 8222BDC4h */ case   35:  		/* cmplw CR6, R28, R23 */
		/* 8222BDC4h case   35:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R23);
		/* 8222BDC4h case   35:*/		return 0x8222BDC8;
		  /* 8222BDC8h */ case   36:  		/* bc 4, CR6_EQ, 164 */
		/* 8222BDC8h case   36:*/		if ( !regs.CR[6].eq ) { return 0x8222BE6C;  }
		/* 8222BDC8h case   36:*/		return 0x8222BDCC;
		  /* 8222BDCCh */ case   37:  		/* cmplw CR6, R29, R25 */
		/* 8222BDCCh case   37:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 8222BDCCh case   37:*/		return 0x8222BDD0;
		  /* 8222BDD0h */ case   38:  		/* bc 4, CR6_EQ, 12 */
		/* 8222BDD0h case   38:*/		if ( !regs.CR[6].eq ) { return 0x8222BDDC;  }
		/* 8222BDD0h case   38:*/		return 0x8222BDD4;
		  /* 8222BDD4h */ case   39:  		/* rlwinm. R11, R19, 0, 24, 31 */
		/* 8222BDD4h case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R19);
		/* 8222BDD4h case   39:*/		return 0x8222BDD8;
		  /* 8222BDD8h */ case   40:  		/* bc 12, CR0_EQ, 440 */
		/* 8222BDD8h case   40:*/		if ( regs.CR[0].eq ) { return 0x8222BF90;  }
		/* 8222BDD8h case   40:*/		return 0x8222BDDC;
	}
	return 0x8222BDDC;
} // Block from 8222BD38h-8222BDDCh (41 instructions)

//////////////////////////////////////////////////////
// Block at 8222BDDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BDDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BDDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BDDC);
		  /* 8222BDDCh */ case    0:  		/* mr R3, R31 */
		/* 8222BDDCh case    0:*/		regs.R3 = regs.R31;
		/* 8222BDDCh case    0:*/		return 0x8222BDE0;
	}
	return 0x8222BDE0;
} // Block from 8222BDDCh-8222BDE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222BDE0h
// Function '?RemoveDeadInstruction@Compiler@D3DXShader@@QAAXPAVInstruction@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BDE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BDE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BDE0);
		  /* 8222BDE0h */ case    0:  		/* li R17, 0 */
		/* 8222BDE0h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 8222BDE0h case    0:*/		return 0x8222BDE4;
		  /* 8222BDE4h */ case    1:  		/* bl -238596 */
		/* 8222BDE4h case    1:*/		regs.LR = 0x8222BDE8; return 0x821F19E0;
		/* 8222BDE4h case    1:*/		return 0x8222BDE8;
		  /* 8222BDE8h */ case    2:  		/* lwz R11, <#[R24]> */
		/* 8222BDE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8222BDE8h case    2:*/		return 0x8222BDEC;
		  /* 8222BDECh */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222BDECh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222BDECh case    3:*/		return 0x8222BDF0;
		  /* 8222BDF0h */ case    4:  		/* bc 4, CR0_EQ, 572 */
		/* 8222BDF0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222C02C;  }
		/* 8222BDF0h case    4:*/		return 0x8222BDF4;
		  /* 8222BDF4h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8222BDF4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222BDF4h case    5:*/		return 0x8222BDF8;
		  /* 8222BDF8h */ case    6:  		/* bc 12, CR0_EQ, 564 */
		/* 8222BDF8h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222C02C;  }
		/* 8222BDF8h case    6:*/		return 0x8222BDFC;
		  /* 8222BDFCh */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8222BDFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222BDFCh case    7:*/		return 0x8222BE00;
		  /* 8222BE00h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BE00h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BE00h case    8:*/		return 0x8222BE04;
		  /* 8222BE04h */ case    9:  		/* addi R4, R11, -4 */
		/* 8222BE04h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222BE04h case    9:*/		return 0x8222BE08;
		  /* 8222BE08h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222BE08h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BE08h case   10:*/		return 0x8222BE0C;
		  /* 8222BE0Ch */ case   11:  		/* addi R10, R11, 3 */
		/* 8222BE0Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222BE0Ch case   11:*/		return 0x8222BE10;
		  /* 8222BE10h */ case   12:  		/* addic. R11, R11, -1 */
		/* 8222BE10h case   12:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222BE10h case   12:*/		return 0x8222BE14;
		  /* 8222BE14h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222BE14h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222BE14h case   13:*/		return 0x8222BE18;
		  /* 8222BE18h */ case   14:  		/* lwzx R29, <#[R10 + R4]> */
		/* 8222BE18h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222BE18h case   14:*/		return 0x8222BE1C;
		  /* 8222BE1Ch */ case   15:  		/* stw R11, <#[R4 + 8]> */
		/* 8222BE1Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222BE1Ch case   15:*/		return 0x8222BE20;
		  /* 8222BE20h */ case   16:  		/* bc 4, CR0_EQ, 60 */
		/* 8222BE20h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8222BE5C;  }
		/* 8222BE20h case   16:*/		return 0x8222BE24;
		  /* 8222BE24h */ case   17:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222BE24h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222BE24h case   17:*/		return 0x8222BE28;
		  /* 8222BE28h */ case   18:  		/* mr R3, R30 */
		/* 8222BE28h case   18:*/		regs.R3 = regs.R30;
		/* 8222BE28h case   18:*/		return 0x8222BE2C;
		  /* 8222BE2Ch */ case   19:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222BE2Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BE2Ch case   19:*/		return 0x8222BE30;
		  /* 8222BE30h */ case   20:  		/* lwz R9, <#[R11]> */
		/* 8222BE30h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BE30h case   20:*/		return 0x8222BE34;
		  /* 8222BE34h */ case   21:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222BE34h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222BE34h case   21:*/		return 0x8222BE38;
		  /* 8222BE38h */ case   22:  		/* stw R9, <#[R10]> */
		/* 8222BE38h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222BE38h case   22:*/		return 0x8222BE3C;
		  /* 8222BE3Ch */ case   23:  		/* lwz R10, <#[R11]> */
		/* 8222BE3Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BE3Ch case   23:*/		return 0x8222BE40;
		  /* 8222BE40h */ case   24:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222BE40h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222BE40h case   24:*/		return 0x8222BE44;
		  /* 8222BE44h */ case   25:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222BE44h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BE44h case   25:*/		return 0x8222BE48;
		  /* 8222BE48h */ case   26:  		/* stw R11, <#[R10]> */
		/* 8222BE48h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222BE48h case   26:*/		return 0x8222BE4C;
		  /* 8222BE4Ch */ case   27:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222BE4Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222BE4Ch case   27:*/		return 0x8222BE50;
		  /* 8222BE50h */ case   28:  		/* addi R11, R11, 4 */
		/* 8222BE50h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222BE50h case   28:*/		return 0x8222BE54;
		  /* 8222BE54h */ case   29:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222BE54h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222BE54h case   29:*/		return 0x8222BE58;
		  /* 8222BE58h */ case   30:  		/* bl -893008 */
		/* 8222BE58h case   30:*/		regs.LR = 0x8222BE5C; return 0x82151E08;
		/* 8222BE58h case   30:*/		return 0x8222BE5C;
	}
	return 0x8222BE5C;
} // Block from 8222BDE0h-8222BE5Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8222BE5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BE5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BE5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BE5C);
		  /* 8222BE5Ch */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8222BE5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BE5Ch case    0:*/		return 0x8222BE60;
		  /* 8222BE60h */ case    1:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 8222BE60h case    1:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 8222BE60h case    1:*/		return 0x8222BE64;
		  /* 8222BE64h */ case    2:  		/* stw R11, <#[R29 + 8]> */
		/* 8222BE64h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222BE64h case    2:*/		return 0x8222BE68;
		  /* 8222BE68h */ case    3:  		/* b -128 */
		/* 8222BE68h case    3:*/		return 0x8222BDE8;
		/* 8222BE68h case    3:*/		return 0x8222BE6C;
	}
	return 0x8222BE6C;
} // Block from 8222BE5Ch-8222BE6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222BE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BE6C);
		  /* 8222BE6Ch */ case    0:  		/* mr R3, R28 */
		/* 8222BE6Ch case    0:*/		regs.R3 = regs.R28;
		/* 8222BE6Ch case    0:*/		return 0x8222BE70;
		  /* 8222BE70h */ case    1:  		/* bl -631904 */
		/* 8222BE70h case    1:*/		regs.LR = 0x8222BE74; return 0x82191A10;
		/* 8222BE70h case    1:*/		return 0x8222BE74;
		  /* 8222BE74h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222BE74h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222BE74h case    2:*/		return 0x8222BE78;
		  /* 8222BE78h */ case    3:  		/* bc 12, CR0_EQ, 280 */
		/* 8222BE78h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222BF90;  }
		/* 8222BE78h case    3:*/		return 0x8222BE7C;
		  /* 8222BE7Ch */ case    4:  		/* lwz R11, <#[R28 + 28]> */
		/* 8222BE7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8222BE7Ch case    4:*/		return 0x8222BE80;
		  /* 8222BE80h */ case    5:  		/* cmplw CR6, R11, R20 */
		/* 8222BE80h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8222BE80h case    5:*/		return 0x8222BE84;
		  /* 8222BE84h */ case    6:  		/* bc 4, CR6_EQ, 268 */
		/* 8222BE84h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222BF90;  }
		/* 8222BE84h case    6:*/		return 0x8222BE88;
		  /* 8222BE88h */ case    7:  		/* rlwinm. R11, R18, 0, 24, 31 */
		/* 8222BE88h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R18);
		/* 8222BE88h case    7:*/		return 0x8222BE8C;
		  /* 8222BE8Ch */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8222BE8Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8222BEA0;  }
		/* 8222BE8Ch case    8:*/		return 0x8222BE90;
		  /* 8222BE90h */ case    9:  		/* mr R4, R23 */
		/* 8222BE90h case    9:*/		regs.R4 = regs.R23;
		/* 8222BE90h case    9:*/		return 0x8222BE94;
		  /* 8222BE94h */ case   10:  		/* mr R3, R28 */
		/* 8222BE94h case   10:*/		regs.R3 = regs.R28;
		/* 8222BE94h case   10:*/		return 0x8222BE98;
		  /* 8222BE98h */ case   11:  		/* bl -593496 */
		/* 8222BE98h case   11:*/		regs.LR = 0x8222BE9C; return 0x8219B040;
		/* 8222BE98h case   11:*/		return 0x8222BE9C;
		  /* 8222BE9Ch */ case   12:  		/* b 48 */
		/* 8222BE9Ch case   12:*/		return 0x8222BECC;
		/* 8222BE9Ch case   12:*/		return 0x8222BEA0;
	}
	return 0x8222BEA0;
} // Block from 8222BE6Ch-8222BEA0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222BEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BEA0);
		  /* 8222BEA0h */ case    0:  		/* mr R11, R28 */
		/* 8222BEA0h case    0:*/		regs.R11 = regs.R28;
		/* 8222BEA0h case    0:*/		return 0x8222BEA4;
		  /* 8222BEA4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BEA4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BEA4h case    1:*/		return 0x8222BEA8;
		  /* 8222BEA8h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8222BEA8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8222BEA8h case    2:*/		return 0x8222BEAC;
		  /* 8222BEACh */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222BEACh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222BEACh case    3:*/		return 0x8222BEB0;
		  /* 8222BEB0h */ case    4:  		/* bc 4, CR0_EQ, 232 */
		/* 8222BEB0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222BF98;  }
		/* 8222BEB0h case    4:*/		return 0x8222BEB4;
		  /* 8222BEB4h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BEB4h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BEB4h case    5:*/		return 0x8222BEB8;
		  /* 8222BEB8h */ case    6:  		/* addic. R11, R11, -40 */
		/* 8222BEB8h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8222BEB8h case    6:*/		return 0x8222BEBC;
		  /* 8222BEBCh */ case    7:  		/* bc 12, CR0_EQ, 220 */
		/* 8222BEBCh case    7:*/		if ( regs.CR[0].eq ) { return 0x8222BF98;  }
		/* 8222BEBCh case    7:*/		return 0x8222BEC0;
		  /* 8222BEC0h */ case    8:  		/* cmplw CR6, R11, R23 */
		/* 8222BEC0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8222BEC0h case    8:*/		return 0x8222BEC4;
		  /* 8222BEC4h */ case    9:  		/* bc 4, CR6_EQ, -32 */
		/* 8222BEC4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222BEA4;  }
		/* 8222BEC4h case    9:*/		return 0x8222BEC8;
		  /* 8222BEC8h */ case   10:  		/* li R3, 1 */
		/* 8222BEC8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222BEC8h case   10:*/		return 0x8222BECC;
	}
	return 0x8222BECC;
} // Block from 8222BEA0h-8222BECCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222BECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BECC);
		  /* 8222BECCh */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222BECCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222BECCh case    0:*/		return 0x8222BED0;
		  /* 8222BED0h */ case    1:  		/* bc 12, CR0_EQ, 192 */
		/* 8222BED0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222BF90;  }
		/* 8222BED0h case    1:*/		return 0x8222BED4;
		  /* 8222BED4h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 8222BED4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8222BED4h case    2:*/		return 0x8222BED8;
		  /* 8222BED8h */ case    3:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 8222BED8h case    3:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 8222BED8h case    3:*/		return 0x8222BEDC;
		  /* 8222BEDCh */ case    4:  		/* bc 4, CR0_EQ, 180 */
		/* 8222BEDCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222BF90;  }
		/* 8222BEDCh case    4:*/		return 0x8222BEE0;
		  /* 8222BEE0h */ case    5:  		/* oris R11, R11, 8192 */
		/* 8222BEE0h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 8222BEE0h case    5:*/		return 0x8222BEE4;
		  /* 8222BEE4h */ case    6:  		/* stw R11, <#[R28 + 8]> */
		/* 8222BEE4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8222BEE4h case    6:*/		return 0x8222BEE8;
		  /* 8222BEE8h */ case    7:  		/* lwz R11, <#[R26]> */
		/* 8222BEE8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222BEE8h case    7:*/		return 0x8222BEEC;
		  /* 8222BEECh */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222BEECh case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222BEECh case    8:*/		return 0x8222BEF0;
		  /* 8222BEF0h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 8222BEF0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8222BF18;  }
		/* 8222BEF0h case    9:*/		return 0x8222BEF4;
		  /* 8222BEF4h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 8222BEF4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222BEF4h case   10:*/		return 0x8222BEF8;
		  /* 8222BEF8h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BEF8h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BEF8h case   11:*/		return 0x8222BEFC;
		  /* 8222BEFCh */ case   12:  		/* addic. R3, R11, -4 */
		/* 8222BEFCh case   12:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222BEFCh case   12:*/		return 0x8222BF00;
		  /* 8222BF00h */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 8222BF00h case   13:*/		if ( regs.CR[0].eq ) { return 0x8222BF18;  }
		/* 8222BF00h case   13:*/		return 0x8222BF04;
		  /* 8222BF04h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BF04h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BF04h case   14:*/		return 0x8222BF08;
		  /* 8222BF08h */ case   15:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222BF08h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222BF08h case   15:*/		return 0x8222BF0C;
		  /* 8222BF0Ch */ case   16:  		/* addi R11, R11, 1 */
		/* 8222BF0Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222BF0Ch case   16:*/		return 0x8222BF10;
		  /* 8222BF10h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 8222BF10h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222BF10h case   17:*/		return 0x8222BF14;
		  /* 8222BF14h */ case   18:  		/* bc 4, CR6_GT, 16 */
		/* 8222BF14h case   18:*/		if ( !regs.CR[6].gt ) { return 0x8222BF24;  }
		/* 8222BF14h case   18:*/		return 0x8222BF18;
	}
	return 0x8222BF18;
} // Block from 8222BECCh-8222BF18h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8222BF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BF18);
		  /* 8222BF18h */ case    0:  		/* li R4, 1 */
		/* 8222BF18h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222BF18h case    0:*/		return 0x8222BF1C;
		  /* 8222BF1Ch */ case    1:  		/* mr R3, R31 */
		/* 8222BF1Ch case    1:*/		regs.R3 = regs.R31;
		/* 8222BF1Ch case    1:*/		return 0x8222BF20;
		  /* 8222BF20h */ case    2:  		/* bl -650840 */
		/* 8222BF20h case    2:*/		regs.LR = 0x8222BF24; return 0x8218D0C8;
		/* 8222BF20h case    2:*/		return 0x8222BF24;
	}
	return 0x8222BF24;
} // Block from 8222BF18h-8222BF24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222BF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BF24);
		  /* 8222BF24h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BF24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BF24h case    0:*/		return 0x8222BF28;
		  /* 8222BF28h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222BF28h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222BF28h case    1:*/		return 0x8222BF2C;
		  /* 8222BF2Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 8222BF2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222BF2Ch case    2:*/		return 0x8222BF30;
		  /* 8222BF30h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222BF30h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222BF30h case    3:*/		return 0x8222BF34;
		  /* 8222BF34h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222BF34h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BF34h case    4:*/		return 0x8222BF38;
		  /* 8222BF38h */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 8222BF38h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222BF38h case    5:*/		return 0x8222BF3C;
		  /* 8222BF3Ch */ case    6:  		/* lwz R11, <#[R24]> */
		/* 8222BF3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8222BF3Ch case    6:*/		return 0x8222BF40;
		  /* 8222BF40h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222BF40h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222BF40h case    7:*/		return 0x8222BF44;
		  /* 8222BF44h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8222BF44h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8222BF6C;  }
		/* 8222BF44h case    8:*/		return 0x8222BF48;
		  /* 8222BF48h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 8222BF48h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222BF48h case    9:*/		return 0x8222BF4C;
		  /* 8222BF4Ch */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BF4Ch case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BF4Ch case   10:*/		return 0x8222BF50;
		  /* 8222BF50h */ case   11:  		/* addic. R3, R11, -4 */
		/* 8222BF50h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222BF50h case   11:*/		return 0x8222BF54;
		  /* 8222BF54h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 8222BF54h case   12:*/		if ( regs.CR[0].eq ) { return 0x8222BF6C;  }
		/* 8222BF54h case   12:*/		return 0x8222BF58;
		  /* 8222BF58h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BF58h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BF58h case   13:*/		return 0x8222BF5C;
		  /* 8222BF5Ch */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222BF5Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222BF5Ch case   14:*/		return 0x8222BF60;
		  /* 8222BF60h */ case   15:  		/* addi R11, R11, 1 */
		/* 8222BF60h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222BF60h case   15:*/		return 0x8222BF64;
		  /* 8222BF64h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8222BF64h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222BF64h case   16:*/		return 0x8222BF68;
		  /* 8222BF68h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 8222BF68h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8222BF78;  }
		/* 8222BF68h case   17:*/		return 0x8222BF6C;
	}
	return 0x8222BF6C;
} // Block from 8222BF24h-8222BF6Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222BF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BF6C);
		  /* 8222BF6Ch */ case    0:  		/* li R4, 1 */
		/* 8222BF6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222BF6Ch case    0:*/		return 0x8222BF70;
		  /* 8222BF70h */ case    1:  		/* mr R3, R30 */
		/* 8222BF70h case    1:*/		regs.R3 = regs.R30;
		/* 8222BF70h case    1:*/		return 0x8222BF74;
		  /* 8222BF74h */ case    2:  		/* bl -650924 */
		/* 8222BF74h case    2:*/		regs.LR = 0x8222BF78; return 0x8218D0C8;
		/* 8222BF74h case    2:*/		return 0x8222BF78;
	}
	return 0x8222BF78;
} // Block from 8222BF6Ch-8222BF78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222BF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BF78);
		  /* 8222BF78h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222BF78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BF78h case    0:*/		return 0x8222BF7C;
		  /* 8222BF7Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 8222BF7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222BF7Ch case    1:*/		return 0x8222BF80;
		  /* 8222BF80h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222BF80h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222BF80h case    2:*/		return 0x8222BF84;
		  /* 8222BF84h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222BF84h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222BF84h case    3:*/		return 0x8222BF88;
		  /* 8222BF88h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222BF88h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222BF88h case    4:*/		return 0x8222BF8C;
		  /* 8222BF8Ch */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 8222BF8Ch case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222BF8Ch case    5:*/		return 0x8222BF90;
	}
	return 0x8222BF90;
} // Block from 8222BF78h-8222BF90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222BF90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BF90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BF90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BF90);
		  /* 8222BF90h */ case    0:  		/* lwz R22, <#[R22 + 4]> */
		/* 8222BF90h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R22 + 0x00000004) );
		/* 8222BF90h case    0:*/		return 0x8222BF94;
		  /* 8222BF94h */ case    1:  		/* b -476 */
		/* 8222BF94h case    1:*/		return 0x8222BDB8;
		/* 8222BF94h case    1:*/		return 0x8222BF98;
	}
	return 0x8222BF98;
} // Block from 8222BF90h-8222BF98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222BF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BF98);
		  /* 8222BF98h */ case    0:  		/* li R3, 0 */
		/* 8222BF98h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222BF98h case    0:*/		return 0x8222BF9C;
		  /* 8222BF9Ch */ case    1:  		/* b -208 */
		/* 8222BF9Ch case    1:*/		return 0x8222BECC;
		/* 8222BF9Ch case    1:*/		return 0x8222BFA0;
	}
	return 0x8222BFA0;
} // Block from 8222BF98h-8222BFA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222BFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222BFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222BFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222BFA0);
		  /* 8222BFA0h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 8222BFA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222BFA0h case    0:*/		return 0x8222BFA4;
		  /* 8222BFA4h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222BFA4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222BFA4h case    1:*/		return 0x8222BFA8;
		  /* 8222BFA8h */ case    2:  		/* bc 4, CR0_EQ, -448 */
		/* 8222BFA8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222BDE8;  }
		/* 8222BFA8h case    2:*/		return 0x8222BFAC;
		  /* 8222BFACh */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8222BFACh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222BFACh case    3:*/		return 0x8222BFB0;
		  /* 8222BFB0h */ case    4:  		/* bc 12, CR0_EQ, -456 */
		/* 8222BFB0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8222BDE8;  }
		/* 8222BFB0h case    4:*/		return 0x8222BFB4;
		  /* 8222BFB4h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8222BFB4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222BFB4h case    5:*/		return 0x8222BFB8;
		  /* 8222BFB8h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BFB8h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BFB8h case    6:*/		return 0x8222BFBC;
		  /* 8222BFBCh */ case    7:  		/* addi R4, R11, -4 */
		/* 8222BFBCh case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222BFBCh case    7:*/		return 0x8222BFC0;
		  /* 8222BFC0h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222BFC0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BFC0h case    8:*/		return 0x8222BFC4;
		  /* 8222BFC4h */ case    9:  		/* addi R10, R11, 3 */
		/* 8222BFC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222BFC4h case    9:*/		return 0x8222BFC8;
		  /* 8222BFC8h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8222BFC8h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222BFC8h case   10:*/		return 0x8222BFCC;
		  /* 8222BFCCh */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222BFCCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222BFCCh case   11:*/		return 0x8222BFD0;
		  /* 8222BFD0h */ case   12:  		/* lwzx R29, <#[R10 + R4]> */
		/* 8222BFD0h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222BFD0h case   12:*/		return 0x8222BFD4;
		  /* 8222BFD4h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8222BFD4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222BFD4h case   13:*/		return 0x8222BFD8;
		  /* 8222BFD8h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 8222BFD8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222C014;  }
		/* 8222BFD8h case   14:*/		return 0x8222BFDC;
		  /* 8222BFDCh */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222BFDCh case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222BFDCh case   15:*/		return 0x8222BFE0;
		  /* 8222BFE0h */ case   16:  		/* mr R3, R31 */
		/* 8222BFE0h case   16:*/		regs.R3 = regs.R31;
		/* 8222BFE0h case   16:*/		return 0x8222BFE4;
		  /* 8222BFE4h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222BFE4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BFE4h case   17:*/		return 0x8222BFE8;
		  /* 8222BFE8h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8222BFE8h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BFE8h case   18:*/		return 0x8222BFEC;
		  /* 8222BFECh */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222BFECh case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222BFECh case   19:*/		return 0x8222BFF0;
		  /* 8222BFF0h */ case   20:  		/* stw R9, <#[R10]> */
		/* 8222BFF0h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222BFF0h case   20:*/		return 0x8222BFF4;
		  /* 8222BFF4h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222BFF4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222BFF4h case   21:*/		return 0x8222BFF8;
		  /* 8222BFF8h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8222BFF8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222BFF8h case   22:*/		return 0x8222BFFC;
		  /* 8222BFFCh */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222BFFCh case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222BFFCh case   23:*/		return 0x8222C000;
		  /* 8222C000h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8222C000h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C000h case   24:*/		return 0x8222C004;
		  /* 8222C004h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222C004h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222C004h case   25:*/		return 0x8222C008;
		  /* 8222C008h */ case   26:  		/* addi R11, R11, 4 */
		/* 8222C008h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222C008h case   26:*/		return 0x8222C00C;
		  /* 8222C00Ch */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222C00Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222C00Ch case   27:*/		return 0x8222C010;
		  /* 8222C010h */ case   28:  		/* bl -893448 */
		/* 8222C010h case   28:*/		regs.LR = 0x8222C014; return 0x82151E08;
		/* 8222C010h case   28:*/		return 0x8222C014;
	}
	return 0x8222C014;
} // Block from 8222BFA0h-8222C014h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8222C014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C014);
		  /* 8222C014h */ case    0:  		/* addi R21, R21, 1 */
		/* 8222C014h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 8222C014h case    0:*/		return 0x8222C018;
		  /* 8222C018h */ case    1:  		/* cmplwi CR6, R21, 10000 */
		/* 8222C018h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00002710);
		/* 8222C018h case    1:*/		return 0x8222C01C;
		  /* 8222C01Ch */ case    2:  		/* bc 4, CR6_GT, -616 */
		/* 8222C01Ch case    2:*/		if ( !regs.CR[6].gt ) { return 0x8222BDB4;  }
		/* 8222C01Ch case    2:*/		return 0x8222C020;
		  /* 8222C020h */ case    3:  		/* li R4, 4800 */
		/* 8222C020h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222C020h case    3:*/		return 0x8222C024;
		  /* 8222C024h */ case    4:  		/* mr R3, R27 */
		/* 8222C024h case    4:*/		regs.R3 = regs.R27;
		/* 8222C024h case    4:*/		return 0x8222C028;
		  /* 8222C028h */ case    5:  		/* bl -893376 */
		/* 8222C028h case    5:*/		regs.LR = 0x8222C02C; return 0x82151E68;
		/* 8222C028h case    5:*/		return 0x8222C02C;
	}
	return 0x8222C02C;
} // Block from 8222C014h-8222C02Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222C02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C02C);
		  /* 8222C02Ch */ case    0:  		/* lwz R10, <#[R27 + 976]> */
		/* 8222C02Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x000003D0) );
		/* 8222C02Ch case    0:*/		return 0x8222C030;
		  /* 8222C030h */ case    1:  		/* addi R11, R27, 972 */
		/* 8222C030h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x3CC);
		/* 8222C030h case    1:*/		return 0x8222C034;
		  /* 8222C034h */ case    2:  		/* rlwinm R11, R30, 0, 0, 31 */
		/* 8222C034h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R30);
		/* 8222C034h case    2:*/		return 0x8222C038;
		  /* 8222C038h */ case    3:  		/* mr R3, R17 */
		/* 8222C038h case    3:*/		regs.R3 = regs.R17;
		/* 8222C038h case    3:*/		return 0x8222C03C;
		  /* 8222C03Ch */ case    4:  		/* stw R10, <#[R30]> */
		/* 8222C03Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8222C03Ch case    4:*/		return 0x8222C040;
		  /* 8222C040h */ case    5:  		/* stw R30, <#[R27 + 976]> */
		/* 8222C040h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x000003D0) );
		/* 8222C040h case    5:*/		return 0x8222C044;
		  /* 8222C044h */ case    6:  		/* stw R11, <#[R31]> */
		/* 8222C044h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222C044h case    6:*/		return 0x8222C048;
		  /* 8222C048h */ case    7:  		/* stw R31, <#[R27 + 976]> */
		/* 8222C048h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x000003D0) );
		/* 8222C048h case    7:*/		return 0x8222C04C;
		  /* 8222C04Ch */ case    8:  		/* addi R1, R1, 208 */
		/* 8222C04Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8222C04Ch case    8:*/		return 0x8222C050;
		  /* 8222C050h */ case    9:  		/* b -1682900 */
		/* 8222C050h case    9:*/		return 0x8209127C;
		/* 8222C050h case    9:*/		return 0x8222C054;
		  /* 8222C054h */ case   10:  		/* nop */
		/* 8222C054h case   10:*/		cpu::op::nop();
		/* 8222C054h case   10:*/		return 0x8222C058;
	}
	return 0x8222C058;
} // Block from 8222C02Ch-8222C058h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222C058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C058);
		  /* 8222C058h */ case    0:  		/* mfspr R12, LR */
		/* 8222C058h case    0:*/		regs.R12 = regs.LR;
		/* 8222C058h case    0:*/		return 0x8222C05C;
		  /* 8222C05Ch */ case    1:  		/* bl -1682980 */
		/* 8222C05Ch case    1:*/		regs.LR = 0x8222C060; return 0x82091238;
		/* 8222C05Ch case    1:*/		return 0x8222C060;
		  /* 8222C060h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8222C060h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8222C060h case    2:*/		return 0x8222C064;
		  /* 8222C064h */ case    3:  		/* lwz R21, <#[R4 + 28]> */
		/* 8222C064h case    3:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R4 + 0x0000001C) );
		/* 8222C064h case    3:*/		return 0x8222C068;
	}
	return 0x8222C068;
} // Block from 8222C058h-8222C068h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222C068h
// Function '?RemoveDeadCodeTree@Compiler@D3DXShader@@QAAXPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C068);
		  /* 8222C068h */ case    0:  		/* mr R24, R4 */
		/* 8222C068h case    0:*/		regs.R24 = regs.R4;
		/* 8222C068h case    0:*/		return 0x8222C06C;
		  /* 8222C06Ch */ case    1:  		/* mr R25, R5 */
		/* 8222C06Ch case    1:*/		regs.R25 = regs.R5;
		/* 8222C06Ch case    1:*/		return 0x8222C070;
		  /* 8222C070h */ case    2:  		/* li R5, 38 */
		/* 8222C070h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222C070h case    2:*/		return 0x8222C074;
		  /* 8222C074h */ case    3:  		/* li R4, 8 */
		/* 8222C074h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222C074h case    3:*/		return 0x8222C078;
		  /* 8222C078h */ case    4:  		/* mr R23, R3 */
		/* 8222C078h case    4:*/		regs.R23 = regs.R3;
		/* 8222C078h case    4:*/		return 0x8222C07C;
		  /* 8222C07Ch */ case    5:  		/* mr R22, R6 */
		/* 8222C07Ch case    5:*/		regs.R22 = regs.R6;
		/* 8222C07Ch case    5:*/		return 0x8222C080;
		  /* 8222C080h */ case    6:  		/* mr R20, R7 */
		/* 8222C080h case    6:*/		regs.R20 = regs.R7;
		/* 8222C080h case    6:*/		return 0x8222C084;
		  /* 8222C084h */ case    7:  		/* bl -817044 */
		/* 8222C084h case    7:*/		regs.LR = 0x8222C088; return 0x821648F0;
		/* 8222C084h case    7:*/		return 0x8222C088;
		  /* 8222C088h */ case    8:  		/* addi R26, R3, 4 */
		/* 8222C088h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x4);
		/* 8222C088h case    8:*/		return 0x8222C08C;
		  /* 8222C08Ch */ case    9:  		/* ori R10, R3, 1 */
		/* 8222C08Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 8222C08Ch case    9:*/		return 0x8222C090;
		  /* 8222C090h */ case   10:  		/* ori R11, R26, 1 */
		/* 8222C090h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R26,0x1);
		/* 8222C090h case   10:*/		return 0x8222C094;
		  /* 8222C094h */ case   11:  		/* mr R30, R3 */
		/* 8222C094h case   11:*/		regs.R30 = regs.R3;
		/* 8222C094h case   11:*/		return 0x8222C098;
		  /* 8222C098h */ case   12:  		/* stw R10, <#[R3 + 4]> */
		/* 8222C098h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 8222C098h case   12:*/		return 0x8222C09C;
		  /* 8222C09Ch */ case   13:  		/* mr R27, R24 */
		/* 8222C09Ch case   13:*/		regs.R27 = regs.R24;
		/* 8222C09Ch case   13:*/		return 0x8222C0A0;
		  /* 8222C0A0h */ case   14:  		/* stw R11, <#[R3]> */
		/* 8222C0A0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222C0A0h case   14:*/		return 0x8222C0A4;
		  /* 8222C0A4h */ case   15:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 8222C0A4h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 8222C0A4h case   15:*/		return 0x8222C0A8;
		  /* 8222C0A8h */ case   16:  		/* bc 4, CR0_EQ, 36 */
		/* 8222C0A8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8222C0CC;  }
		/* 8222C0A8h case   16:*/		return 0x8222C0AC;
		  /* 8222C0ACh */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C0ACh case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C0ACh case   17:*/		return 0x8222C0B0;
		  /* 8222C0B0h */ case   18:  		/* addic. R3, R11, -4 */
		/* 8222C0B0h case   18:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222C0B0h case   18:*/		return 0x8222C0B4;
		  /* 8222C0B4h */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 8222C0B4h case   19:*/		if ( regs.CR[0].eq ) { return 0x8222C0CC;  }
		/* 8222C0B4h case   19:*/		return 0x8222C0B8;
		  /* 8222C0B8h */ case   20:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C0B8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C0B8h case   20:*/		return 0x8222C0BC;
		  /* 8222C0BCh */ case   21:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222C0BCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222C0BCh case   21:*/		return 0x8222C0C0;
		  /* 8222C0C0h */ case   22:  		/* addi R11, R11, 1 */
		/* 8222C0C0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222C0C0h case   22:*/		return 0x8222C0C4;
		  /* 8222C0C4h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 8222C0C4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222C0C4h case   23:*/		return 0x8222C0C8;
		  /* 8222C0C8h */ case   24:  		/* bc 4, CR6_GT, 16 */
		/* 8222C0C8h case   24:*/		if ( !regs.CR[6].gt ) { return 0x8222C0D8;  }
		/* 8222C0C8h case   24:*/		return 0x8222C0CC;
	}
	return 0x8222C0CC;
} // Block from 8222C068h-8222C0CCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8222C0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C0CC);
		  /* 8222C0CCh */ case    0:  		/* li R4, 1 */
		/* 8222C0CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222C0CCh case    0:*/		return 0x8222C0D0;
		  /* 8222C0D0h */ case    1:  		/* mr R3, R30 */
		/* 8222C0D0h case    1:*/		regs.R3 = regs.R30;
		/* 8222C0D0h case    1:*/		return 0x8222C0D4;
		  /* 8222C0D4h */ case    2:  		/* bl -651276 */
		/* 8222C0D4h case    2:*/		regs.LR = 0x8222C0D8; return 0x8218D0C8;
		/* 8222C0D4h case    2:*/		return 0x8222C0D8;
	}
	return 0x8222C0D8;
} // Block from 8222C0CCh-8222C0D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C0D8);
		  /* 8222C0D8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C0D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C0D8h case    0:*/		return 0x8222C0DC;
		  /* 8222C0DCh */ case    1:  		/* addi R10, R11, 4 */
		/* 8222C0DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222C0DCh case    1:*/		return 0x8222C0E0;
		  /* 8222C0E0h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222C0E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222C0E0h case    2:*/		return 0x8222C0E4;
		  /* 8222C0E4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222C0E4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222C0E4h case    3:*/		return 0x8222C0E8;
		  /* 8222C0E8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222C0E8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C0E8h case    4:*/		return 0x8222C0EC;
		  /* 8222C0ECh */ case    5:  		/* stwx R24, <#[R11 + R3]> */
		/* 8222C0ECh case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222C0ECh case    5:*/		return 0x8222C0F0;
		  /* 8222C0F0h */ case    6:  		/* lwz R29, <#[R27]> */
		/* 8222C0F0h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000000) );
		/* 8222C0F0h case    6:*/		return 0x8222C0F4;
		  /* 8222C0F4h */ case    7:  		/* li R28, 0 */
		/* 8222C0F4h case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8222C0F4h case    7:*/		return 0x8222C0F8;
		  /* 8222C0F8h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 8222C0F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222C0F8h case    8:*/		return 0x8222C0FC;
		  /* 8222C0FCh */ case    9:  		/* bc 12, CR6_EQ, 360 */
		/* 8222C0FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x8222C264;  }
		/* 8222C0FCh case    9:*/		return 0x8222C100;
		  /* 8222C100h */ case   10:  		/* lwz R31, <#[R29 + 12]> */
		/* 8222C100h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222C100h case   10:*/		return 0x8222C104;
		  /* 8222C104h */ case   11:  		/* cmplw CR6, R31, R25 */
		/* 8222C104h case   11:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 8222C104h case   11:*/		return 0x8222C108;
		  /* 8222C108h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8222C108h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8222C128;  }
		/* 8222C108h case   12:*/		return 0x8222C10C;
		  /* 8222C10Ch */ case   13:  		/* cmplw CR6, R27, R24 */
		/* 8222C10Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 8222C10Ch case   13:*/		return 0x8222C110;
		  /* 8222C110h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 8222C110h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8222C11C;  }
		/* 8222C110h case   14:*/		return 0x8222C114;
		  /* 8222C114h */ case   15:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 8222C114h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 8222C114h case   15:*/		return 0x8222C118;
		  /* 8222C118h */ case   16:  		/* bc 12, CR0_EQ, 316 */
		/* 8222C118h case   16:*/		if ( regs.CR[0].eq ) { return 0x8222C254;  }
		/* 8222C118h case   16:*/		return 0x8222C11C;
	}
	return 0x8222C11C;
} // Block from 8222C0D8h-8222C11Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222C11Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C11C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C11C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C11C);
		  /* 8222C11Ch */ case    0:  		/* li R4, 4800 */
		/* 8222C11Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222C11Ch case    0:*/		return 0x8222C120;
		  /* 8222C120h */ case    1:  		/* mr R3, R23 */
		/* 8222C120h case    1:*/		regs.R3 = regs.R23;
		/* 8222C120h case    1:*/		return 0x8222C124;
		  /* 8222C124h */ case    2:  		/* bl -893628 */
		/* 8222C124h case    2:*/		regs.LR = 0x8222C128; return 0x82151E68;
		/* 8222C124h case    2:*/		return 0x8222C128;
	}
	return 0x8222C128;
} // Block from 8222C11Ch-8222C128h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C128);
		  /* 8222C128h */ case    0:  		/* mr R3, R31 */
		/* 8222C128h case    0:*/		regs.R3 = regs.R31;
		/* 8222C128h case    0:*/		return 0x8222C12C;
		  /* 8222C12Ch */ case    1:  		/* bl -632604 */
		/* 8222C12Ch case    1:*/		regs.LR = 0x8222C130; return 0x82191A10;
		/* 8222C12Ch case    1:*/		return 0x8222C130;
		  /* 8222C130h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222C130h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222C130h case    2:*/		return 0x8222C134;
		  /* 8222C134h */ case    3:  		/* bc 12, CR0_EQ, 288 */
		/* 8222C134h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222C254;  }
		/* 8222C134h case    3:*/		return 0x8222C138;
		  /* 8222C138h */ case    4:  		/* lwz R11, <#[R31 + 28]> */
		/* 8222C138h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8222C138h case    4:*/		return 0x8222C13C;
		  /* 8222C13Ch */ case    5:  		/* cmplw CR6, R11, R21 */
		/* 8222C13Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 8222C13Ch case    5:*/		return 0x8222C140;
		  /* 8222C140h */ case    6:  		/* bc 4, CR6_EQ, 276 */
		/* 8222C140h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222C254;  }
		/* 8222C140h case    6:*/		return 0x8222C144;
		  /* 8222C144h */ case    7:  		/* rlwinm. R11, R20, 0, 24, 31 */
		/* 8222C144h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R20);
		/* 8222C144h case    7:*/		return 0x8222C148;
		  /* 8222C148h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8222C148h case    8:*/		if ( regs.CR[0].eq ) { return 0x8222C15C;  }
		/* 8222C148h case    8:*/		return 0x8222C14C;
		  /* 8222C14Ch */ case    9:  		/* mr R4, R25 */
		/* 8222C14Ch case    9:*/		regs.R4 = regs.R25;
		/* 8222C14Ch case    9:*/		return 0x8222C150;
		  /* 8222C150h */ case   10:  		/* mr R3, R31 */
		/* 8222C150h case   10:*/		regs.R3 = regs.R31;
		/* 8222C150h case   10:*/		return 0x8222C154;
		  /* 8222C154h */ case   11:  		/* bl -594196 */
		/* 8222C154h case   11:*/		regs.LR = 0x8222C158; return 0x8219B040;
		/* 8222C154h case   11:*/		return 0x8222C158;
		  /* 8222C158h */ case   12:  		/* b 48 */
		/* 8222C158h case   12:*/		return 0x8222C188;
		/* 8222C158h case   12:*/		return 0x8222C15C;
	}
	return 0x8222C15C;
} // Block from 8222C128h-8222C15Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222C15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C15C);
		  /* 8222C15Ch */ case    0:  		/* mr R11, R31 */
		/* 8222C15Ch case    0:*/		regs.R11 = regs.R31;
		/* 8222C15Ch case    0:*/		return 0x8222C160;
		  /* 8222C160h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C160h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C160h case    1:*/		return 0x8222C164;
		  /* 8222C164h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8222C164h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8222C164h case    2:*/		return 0x8222C168;
		  /* 8222C168h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222C168h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222C168h case    3:*/		return 0x8222C16C;
		  /* 8222C16Ch */ case    4:  		/* bc 4, CR0_EQ, 240 */
		/* 8222C16Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222C25C;  }
		/* 8222C16Ch case    4:*/		return 0x8222C170;
		  /* 8222C170h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C170h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C170h case    5:*/		return 0x8222C174;
		  /* 8222C174h */ case    6:  		/* addic. R11, R11, -40 */
		/* 8222C174h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8222C174h case    6:*/		return 0x8222C178;
		  /* 8222C178h */ case    7:  		/* bc 12, CR0_EQ, 228 */
		/* 8222C178h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222C25C;  }
		/* 8222C178h case    7:*/		return 0x8222C17C;
		  /* 8222C17Ch */ case    8:  		/* cmplw CR6, R11, R25 */
		/* 8222C17Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8222C17Ch case    8:*/		return 0x8222C180;
		  /* 8222C180h */ case    9:  		/* bc 4, CR6_EQ, -32 */
		/* 8222C180h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222C160;  }
		/* 8222C180h case    9:*/		return 0x8222C184;
		  /* 8222C184h */ case   10:  		/* li R3, 1 */
		/* 8222C184h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222C184h case   10:*/		return 0x8222C188;
	}
	return 0x8222C188;
} // Block from 8222C15Ch-8222C188h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222C188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C188);
		  /* 8222C188h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222C188h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222C188h case    0:*/		return 0x8222C18C;
		  /* 8222C18Ch */ case    1:  		/* bc 12, CR0_EQ, 200 */
		/* 8222C18Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8222C254;  }
		/* 8222C18Ch case    1:*/		return 0x8222C190;
		  /* 8222C190h */ case    2:  		/* mr R4, R30 */
		/* 8222C190h case    2:*/		regs.R4 = regs.R30;
		/* 8222C190h case    2:*/		return 0x8222C194;
		  /* 8222C194h */ case    3:  		/* addi R3, R1, 80 */
		/* 8222C194h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8222C194h case    3:*/		return 0x8222C198;
		  /* 8222C198h */ case    4:  		/* li R28, 1 */
		/* 8222C198h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8222C198h case    4:*/		return 0x8222C19C;
		  /* 8222C19Ch */ case    5:  		/* bl -574316 */
		/* 8222C19Ch case    5:*/		regs.LR = 0x8222C1A0; return 0x8219FE30;
		/* 8222C19Ch case    5:*/		return 0x8222C1A0;
		  /* 8222C1A0h */ case    6:  		/* lwz R11, <#[R1 + 88]> */
		/* 8222C1A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222C1A0h case    6:*/		return 0x8222C1A4;
		  /* 8222C1A4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8222C1A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C1A4h case    7:*/		return 0x8222C1A8;
		  /* 8222C1A8h */ case    8:  		/* bc 4, CR6_EQ, 44 */
		/* 8222C1A8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8222C1D4;  }
		/* 8222C1A8h case    8:*/		return 0x8222C1AC;
		  /* 8222C1ACh */ case    9:  		/* lwz R11, <#[R1 + 80]> */
		/* 8222C1ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8222C1ACh case    9:*/		return 0x8222C1B0;
		  /* 8222C1B0h */ case   10:  		/* lwz R10, <#[R1 + 84]> */
		/* 8222C1B0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8222C1B0h case   10:*/		return 0x8222C1B4;
		  /* 8222C1B4h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222C1B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C1B4h case   11:*/		return 0x8222C1B8;
		  /* 8222C1B8h */ case   12:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 8222C1B8h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 8222C1B8h case   12:*/		return 0x8222C1BC;
		  /* 8222C1BCh */ case   13:  		/* addic R9, R9, -1 */
		/* 8222C1BCh case   13:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8222C1BCh case   13:*/		return 0x8222C1C0;
		  /* 8222C1C0h */ case   14:  		/* subfe R9, R9, R9 */
		/* 8222C1C0h case   14:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8222C1C0h case   14:*/		return 0x8222C1C4;
		  /* 8222C1C4h */ case   15:  		/* and R11, R9, R11 */
		/* 8222C1C4h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8222C1C4h case   15:*/		return 0x8222C1C8;
		  /* 8222C1C8h */ case   16:  		/* cmplw CR6, R10, R11 */
		/* 8222C1C8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8222C1C8h case   16:*/		return 0x8222C1CC;
		  /* 8222C1CCh */ case   17:  		/* li R11, 1 */
		/* 8222C1CCh case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222C1CCh case   17:*/		return 0x8222C1D0;
		  /* 8222C1D0h */ case   18:  		/* bc 12, CR6_EQ, 8 */
		/* 8222C1D0h case   18:*/		if ( regs.CR[6].eq ) { return 0x8222C1D8;  }
		/* 8222C1D0h case   18:*/		return 0x8222C1D4;
	}
	return 0x8222C1D4;
} // Block from 8222C188h-8222C1D4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8222C1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C1D4);
		  /* 8222C1D4h */ case    0:  		/* li R11, 0 */
		/* 8222C1D4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222C1D4h case    0:*/		return 0x8222C1D8;
	}
	return 0x8222C1D8;
} // Block from 8222C1D4h-8222C1D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222C1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C1D8);
		  /* 8222C1D8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222C1D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222C1D8h case    0:*/		return 0x8222C1DC;
		  /* 8222C1DCh */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 8222C1DCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222C200;  }
		/* 8222C1DCh case    1:*/		return 0x8222C1E0;
		  /* 8222C1E0h */ case    2:  		/* addi R3, R1, 80 */
		/* 8222C1E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8222C1E0h case    2:*/		return 0x8222C1E4;
		  /* 8222C1E4h */ case    3:  		/* bl -578540 */
		/* 8222C1E4h case    3:*/		regs.LR = 0x8222C1E8; return 0x8219EDF8;
		/* 8222C1E4h case    3:*/		return 0x8222C1E8;
		  /* 8222C1E8h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 8222C1E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222C1E8h case    4:*/		return 0x8222C1EC;
		  /* 8222C1ECh */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C1ECh case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C1ECh case    5:*/		return 0x8222C1F0;
		  /* 8222C1F0h */ case    6:  		/* cmplw CR6, R11, R31 */
		/* 8222C1F0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222C1F0h case    6:*/		return 0x8222C1F4;
		  /* 8222C1F4h */ case    7:  		/* bc 4, CR6_EQ, -84 */
		/* 8222C1F4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8222C1A0;  }
		/* 8222C1F4h case    7:*/		return 0x8222C1F8;
		  /* 8222C1F8h */ case    8:  		/* ori R11, R31, 1 */
		/* 8222C1F8h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R31,0x1);
		/* 8222C1F8h case    8:*/		return 0x8222C1FC;
		  /* 8222C1FCh */ case    9:  		/* stw R11, <#[R3]> */
		/* 8222C1FCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222C1FCh case    9:*/		return 0x8222C200;
	}
	return 0x8222C200;
} // Block from 8222C1D8h-8222C200h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222C200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C200);
		  /* 8222C200h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 8222C200h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222C200h case    0:*/		return 0x8222C204;
		  /* 8222C204h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222C204h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C204h case    1:*/		return 0x8222C208;
		  /* 8222C208h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 8222C208h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222C230;  }
		/* 8222C208h case    2:*/		return 0x8222C20C;
		  /* 8222C20Ch */ case    3:  		/* lwz R11, <#[R30]> */
		/* 8222C20Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222C20Ch case    3:*/		return 0x8222C210;
		  /* 8222C210h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C210h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C210h case    4:*/		return 0x8222C214;
		  /* 8222C214h */ case    5:  		/* addic. R3, R11, -4 */
		/* 8222C214h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222C214h case    5:*/		return 0x8222C218;
		  /* 8222C218h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8222C218h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222C230;  }
		/* 8222C218h case    6:*/		return 0x8222C21C;
		  /* 8222C21Ch */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C21Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C21Ch case    7:*/		return 0x8222C220;
		  /* 8222C220h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222C220h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222C220h case    8:*/		return 0x8222C224;
		  /* 8222C224h */ case    9:  		/* addi R11, R11, 1 */
		/* 8222C224h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222C224h case    9:*/		return 0x8222C228;
		  /* 8222C228h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8222C228h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222C228h case   10:*/		return 0x8222C22C;
		  /* 8222C22Ch */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 8222C22Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x8222C23C;  }
		/* 8222C22Ch case   11:*/		return 0x8222C230;
	}
	return 0x8222C230;
} // Block from 8222C200h-8222C230h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222C230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C230);
		  /* 8222C230h */ case    0:  		/* li R4, 1 */
		/* 8222C230h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222C230h case    0:*/		return 0x8222C234;
		  /* 8222C234h */ case    1:  		/* mr R3, R30 */
		/* 8222C234h case    1:*/		regs.R3 = regs.R30;
		/* 8222C234h case    1:*/		return 0x8222C238;
		  /* 8222C238h */ case    2:  		/* bl -651632 */
		/* 8222C238h case    2:*/		regs.LR = 0x8222C23C; return 0x8218D0C8;
		/* 8222C238h case    2:*/		return 0x8222C23C;
	}
	return 0x8222C23C;
} // Block from 8222C230h-8222C23Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C23C);
		  /* 8222C23Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C23Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C23Ch case    0:*/		return 0x8222C240;
		  /* 8222C240h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222C240h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222C240h case    1:*/		return 0x8222C244;
		  /* 8222C244h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222C244h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222C244h case    2:*/		return 0x8222C248;
		  /* 8222C248h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222C248h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222C248h case    3:*/		return 0x8222C24C;
		  /* 8222C24Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222C24Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C24Ch case    4:*/		return 0x8222C250;
		  /* 8222C250h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222C250h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222C250h case    5:*/		return 0x8222C254;
	}
	return 0x8222C254;
} // Block from 8222C23Ch-8222C254h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222C254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C254);
		  /* 8222C254h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 8222C254h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 8222C254h case    0:*/		return 0x8222C258;
		  /* 8222C258h */ case    1:  		/* b -352 */
		/* 8222C258h case    1:*/		return 0x8222C0F8;
		/* 8222C258h case    1:*/		return 0x8222C25C;
	}
	return 0x8222C25C;
} // Block from 8222C254h-8222C25Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C25C);
		  /* 8222C25Ch */ case    0:  		/* li R3, 0 */
		/* 8222C25Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222C25Ch case    0:*/		return 0x8222C260;
		  /* 8222C260h */ case    1:  		/* b -216 */
		/* 8222C260h case    1:*/		return 0x8222C188;
		/* 8222C260h case    1:*/		return 0x8222C264;
	}
	return 0x8222C264;
} // Block from 8222C25Ch-8222C264h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C264);
		  /* 8222C264h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8222C264h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8222C264h case    0:*/		return 0x8222C268;
		  /* 8222C268h */ case    1:  		/* bc 4, CR0_EQ, 208 */
		/* 8222C268h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222C338;  }
		/* 8222C268h case    1:*/		return 0x8222C26C;
		  /* 8222C26Ch */ case    2:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8222C26Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8222C26Ch case    2:*/		return 0x8222C270;
		  /* 8222C270h */ case    3:  		/* rlwinm R10, R25, 0, 0, 30 */
		/* 8222C270h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R25);
		/* 8222C270h case    3:*/		return 0x8222C274;
		  /* 8222C274h */ case    4:  		/* addi R11, R11, 36 */
		/* 8222C274h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8222C274h case    4:*/		return 0x8222C278;
		  /* 8222C278h */ case    5:  		/* addi R10, R10, 36 */
		/* 8222C278h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 8222C278h case    5:*/		return 0x8222C27C;
		  /* 8222C27Ch */ case    6:  		/* addi R8, R11, -36 */
		/* 8222C27Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 8222C27Ch case    6:*/		return 0x8222C280;
		  /* 8222C280h */ case    7:  		/* addi R7, R10, -36 */
		/* 8222C280h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 8222C280h case    7:*/		return 0x8222C284;
		  /* 8222C284h */ case    8:  		/* addi R9, R11, 4 */
		/* 8222C284h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8222C284h case    8:*/		return 0x8222C288;
	}
	return 0x8222C288;
} // Block from 8222C264h-8222C288h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222C288h
// Function '?RemovePredicate@Compiler@D3DXShader@@QAA_NPAVInstruction@2@PAVDependency@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C288);
		  /* 8222C288h */ case    0:  		/* lwz R6, <#[R11 + 4]> */
		/* 8222C288h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C288h case    0:*/		return 0x8222C28C;
		  /* 8222C28Ch */ case    1:  		/* lwz R5, <#[R11]> */
		/* 8222C28Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C28Ch case    1:*/		return 0x8222C290;
		  /* 8222C290h */ case    2:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8222C290h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8222C290h case    2:*/		return 0x8222C294;
		  /* 8222C294h */ case    3:  		/* stw R5, <#[R6 + 36]> */
		/* 8222C294h case    3:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000024) );
		/* 8222C294h case    3:*/		return 0x8222C298;
		  /* 8222C298h */ case    4:  		/* lwz R6, <#[R11 + 4]> */
		/* 8222C298h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C298h case    4:*/		return 0x8222C29C;
		  /* 8222C29Ch */ case    5:  		/* lwz R5, <#[R11]> */
		/* 8222C29Ch case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C29Ch case    5:*/		return 0x8222C2A0;
		  /* 8222C2A0h */ case    6:  		/* rlwinm R5, R5, 0, 0, 30 */
		/* 8222C2A0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R5,regs.R5);
		/* 8222C2A0h case    6:*/		return 0x8222C2A4;
		  /* 8222C2A4h */ case    7:  		/* stw R6, <#[R5]> */
		/* 8222C2A4h case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000000) );
		/* 8222C2A4h case    7:*/		return 0x8222C2A8;
		  /* 8222C2A8h */ case    8:  		/* lwz R6, <#[R10]> */
		/* 8222C2A8h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C2A8h case    8:*/		return 0x8222C2AC;
		  /* 8222C2ACh */ case    9:  		/* stw R6, <#[R11]> */
		/* 8222C2ACh case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C2ACh case    9:*/		return 0x8222C2B0;
		  /* 8222C2B0h */ case   10:  		/* lwz R6, <#[R10]> */
		/* 8222C2B0h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C2B0h case   10:*/		return 0x8222C2B4;
		  /* 8222C2B4h */ case   11:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8222C2B4h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8222C2B4h case   11:*/		return 0x8222C2B8;
		  /* 8222C2B8h */ case   12:  		/* stw R8, <#[R6]> */
		/* 8222C2B8h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 8222C2B8h case   12:*/		return 0x8222C2BC;
		  /* 8222C2BCh */ case   13:  		/* stw R7, <#[R11 + 4]> */
		/* 8222C2BCh case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C2BCh case   13:*/		return 0x8222C2C0;
		  /* 8222C2C0h */ case   14:  		/* stw R9, <#[R10]> */
		/* 8222C2C0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C2C0h case   14:*/		return 0x8222C2C4;
		  /* 8222C2C4h */ case   15:  		/* lwz R11, <#[R27 + 8]> */
		/* 8222C2C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8222C2C4h case   15:*/		return 0x8222C2C8;
		  /* 8222C2C8h */ case   16:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 8222C2C8h case   16:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 8222C2C8h case   16:*/		return 0x8222C2CC;
		  /* 8222C2CCh */ case   17:  		/* stw R11, <#[R27 + 8]> */
		/* 8222C2CCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8222C2CCh case   17:*/		return 0x8222C2D0;
		  /* 8222C2D0h */ case   18:  		/* lwz R11, <#[R26]> */
		/* 8222C2D0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222C2D0h case   18:*/		return 0x8222C2D4;
		  /* 8222C2D4h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222C2D4h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C2D4h case   19:*/		return 0x8222C2D8;
		  /* 8222C2D8h */ case   20:  		/* bc 12, CR0_EQ, 12 */
		/* 8222C2D8h case   20:*/		if ( regs.CR[0].eq ) { return 0x8222C2E4;  }
		/* 8222C2D8h case   20:*/		return 0x8222C2DC;
		  /* 8222C2DCh */ case   21:  		/* li R4, 0 */
		/* 8222C2DCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222C2DCh case   21:*/		return 0x8222C2E0;
		  /* 8222C2E0h */ case   22:  		/* b 16 */
		/* 8222C2E0h case   22:*/		return 0x8222C2F0;
		/* 8222C2E0h case   22:*/		return 0x8222C2E4;
	}
	return 0x8222C2E4;
} // Block from 8222C288h-8222C2E4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8222C2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C2E4);
		  /* 8222C2E4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8222C2E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222C2E4h case    0:*/		return 0x8222C2E8;
		  /* 8222C2E8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C2E8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C2E8h case    1:*/		return 0x8222C2EC;
		  /* 8222C2ECh */ case    2:  		/* addi R4, R11, -4 */
		/* 8222C2ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222C2ECh case    2:*/		return 0x8222C2F0;
	}
	return 0x8222C2F0;
} // Block from 8222C2E4h-8222C2F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C2F0);
		  /* 8222C2F0h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222C2F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222C2F0h case    0:*/		return 0x8222C2F4;
		  /* 8222C2F4h */ case    1:  		/* addic. R11, R11, -1 */
		/* 8222C2F4h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222C2F4h case    1:*/		return 0x8222C2F8;
		  /* 8222C2F8h */ case    2:  		/* stw R11, <#[R4 + 8]> */
		/* 8222C2F8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222C2F8h case    2:*/		return 0x8222C2FC;
		  /* 8222C2FCh */ case    3:  		/* bc 4, CR0_EQ, 60 */
		/* 8222C2FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222C338;  }
		/* 8222C2FCh case    3:*/		return 0x8222C300;
		  /* 8222C300h */ case    4:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222C300h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222C300h case    4:*/		return 0x8222C304;
		  /* 8222C304h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222C304h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C304h case    5:*/		return 0x8222C308;
		  /* 8222C308h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 8222C308h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C308h case    6:*/		return 0x8222C30C;
		  /* 8222C30Ch */ case    7:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222C30Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222C30Ch case    7:*/		return 0x8222C310;
		  /* 8222C310h */ case    8:  		/* stw R9, <#[R10]> */
		/* 8222C310h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C310h case    8:*/		return 0x8222C314;
		  /* 8222C314h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222C314h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C314h case    9:*/		return 0x8222C318;
		  /* 8222C318h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 8222C318h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C318h case   10:*/		return 0x8222C31C;
		  /* 8222C31Ch */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C31Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C31Ch case   11:*/		return 0x8222C320;
		  /* 8222C320h */ case   12:  		/* stw R10, <#[R11]> */
		/* 8222C320h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C320h case   12:*/		return 0x8222C324;
		  /* 8222C324h */ case   13:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222C324h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222C324h case   13:*/		return 0x8222C328;
		  /* 8222C328h */ case   14:  		/* mr R3, R30 */
		/* 8222C328h case   14:*/		regs.R3 = regs.R30;
		/* 8222C328h case   14:*/		return 0x8222C32C;
		  /* 8222C32Ch */ case   15:  		/* addi R11, R11, 4 */
		/* 8222C32Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222C32Ch case   15:*/		return 0x8222C330;
		  /* 8222C330h */ case   16:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222C330h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222C330h case   16:*/		return 0x8222C334;
		  /* 8222C334h */ case   17:  		/* bl -894252 */
		/* 8222C334h case   17:*/		regs.LR = 0x8222C338; return 0x82151E08;
		/* 8222C334h case   17:*/		return 0x8222C338;
	}
	return 0x8222C338;
} // Block from 8222C2F0h-8222C338h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222C338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C338);
		  /* 8222C338h */ case    0:  		/* lwz R10, <#[R26]> */
		/* 8222C338h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8222C338h case    0:*/		return 0x8222C33C;
		  /* 8222C33Ch */ case    1:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 8222C33Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 8222C33Ch case    1:*/		return 0x8222C340;
		  /* 8222C340h */ case    2:  		/* bc 4, CR0_EQ, 108 */
		/* 8222C340h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222C3AC;  }
		/* 8222C340h case    2:*/		return 0x8222C344;
		  /* 8222C344h */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 8222C344h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8222C344h case    3:*/		return 0x8222C348;
		  /* 8222C348h */ case    4:  		/* bc 12, CR0_EQ, 100 */
		/* 8222C348h case    4:*/		if ( regs.CR[0].eq ) { return 0x8222C3AC;  }
		/* 8222C348h case    4:*/		return 0x8222C34C;
		  /* 8222C34Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 8222C34Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222C34Ch case    5:*/		return 0x8222C350;
		  /* 8222C350h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C350h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C350h case    6:*/		return 0x8222C354;
		  /* 8222C354h */ case    7:  		/* addi R4, R11, -4 */
		/* 8222C354h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222C354h case    7:*/		return 0x8222C358;
		  /* 8222C358h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222C358h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C358h case    8:*/		return 0x8222C35C;
		  /* 8222C35Ch */ case    9:  		/* addi R11, R11, 3 */
		/* 8222C35Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8222C35Ch case    9:*/		return 0x8222C360;
		  /* 8222C360h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222C360h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222C360h case   10:*/		return 0x8222C364;
		  /* 8222C364h */ case   11:  		/* lwzx R11, <#[R11 + R4]> */
		/* 8222C364h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8222C364h case   11:*/		return 0x8222C368;
		  /* 8222C368h */ case   12:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 8222C368h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 8222C368h case   12:*/		return 0x8222C36C;
		  /* 8222C36Ch */ case   13:  		/* bc 12, CR0_EQ, 60 */
		/* 8222C36Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x8222C3A8;  }
		/* 8222C36Ch case   13:*/		return 0x8222C370;
		  /* 8222C370h */ case   14:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222C370h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222C370h case   14:*/		return 0x8222C374;
		  /* 8222C374h */ case   15:  		/* addic. R11, R11, -1 */
		/* 8222C374h case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222C374h case   15:*/		return 0x8222C378;
		  /* 8222C378h */ case   16:  		/* stw R11, <#[R4 + 8]> */
		/* 8222C378h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222C378h case   16:*/		return 0x8222C37C;
		  /* 8222C37Ch */ case   17:  		/* bc 4, CR0_EQ, -68 */
		/* 8222C37Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x8222C338;  }
		/* 8222C37Ch case   17:*/		return 0x8222C380;
		  /* 8222C380h */ case   18:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222C380h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222C380h case   18:*/		return 0x8222C384;
		  /* 8222C384h */ case   19:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222C384h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C384h case   19:*/		return 0x8222C388;
		  /* 8222C388h */ case   20:  		/* lwz R9, <#[R11]> */
		/* 8222C388h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C388h case   20:*/		return 0x8222C38C;
		  /* 8222C38Ch */ case   21:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222C38Ch case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222C38Ch case   21:*/		return 0x8222C390;
		  /* 8222C390h */ case   22:  		/* stw R9, <#[R10]> */
		/* 8222C390h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C390h case   22:*/		return 0x8222C394;
		  /* 8222C394h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 8222C394h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C394h case   23:*/		return 0x8222C398;
		  /* 8222C398h */ case   24:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222C398h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222C398h case   24:*/		return 0x8222C39C;
		  /* 8222C39Ch */ case   25:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222C39Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C39Ch case   25:*/		return 0x8222C3A0;
		  /* 8222C3A0h */ case   26:  		/* stw R11, <#[R10]> */
		/* 8222C3A0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C3A0h case   26:*/		return 0x8222C3A4;
		  /* 8222C3A4h */ case   27:  		/* b -128 */
		/* 8222C3A4h case   27:*/		return 0x8222C324;
		/* 8222C3A4h case   27:*/		return 0x8222C3A8;
	}
	return 0x8222C3A8;
} // Block from 8222C338h-8222C3A8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8222C3A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C3A8);
		  /* 8222C3A8h */ case    0:  		/* mr R27, R11 */
		/* 8222C3A8h case    0:*/		regs.R27 = regs.R11;
		/* 8222C3A8h case    0:*/		return 0x8222C3AC;
	}
	return 0x8222C3AC;
} // Block from 8222C3A8h-8222C3ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222C3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C3AC);
		  /* 8222C3ACh */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 8222C3ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8222C3ACh case    0:*/		return 0x8222C3B0;
		  /* 8222C3B0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8222C3B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222C3BC;  }
		/* 8222C3B0h case    1:*/		return 0x8222C3B4;
		  /* 8222C3B4h */ case    2:  		/* cmplwi CR0, R10, 0 */
		/* 8222C3B4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8222C3B4h case    2:*/		return 0x8222C3B8;
		  /* 8222C3B8h */ case    3:  		/* bc 4, CR0_EQ, -712 */
		/* 8222C3B8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222C0F0;  }
		/* 8222C3B8h case    3:*/		return 0x8222C3BC;
	}
	return 0x8222C3BC;
} // Block from 8222C3ACh-8222C3BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222C3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C3BC);
		  /* 8222C3BCh */ case    0:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 8222C3BCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 8222C3BCh case    0:*/		return 0x8222C3C0;
		  /* 8222C3C0h */ case    1:  		/* rlwinm. R10, R22, 0, 24, 31 */
		/* 8222C3C0h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R22);
		/* 8222C3C0h case    1:*/		return 0x8222C3C4;
		  /* 8222C3C4h */ case    2:  		/* addi R11, R11, 36 */
		/* 8222C3C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8222C3C4h case    2:*/		return 0x8222C3C8;
		  /* 8222C3C8h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222C3C8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C3C8h case    3:*/		return 0x8222C3CC;
		  /* 8222C3CCh */ case    4:  		/* lwz R9, <#[R11]> */
		/* 8222C3CCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C3CCh case    4:*/		return 0x8222C3D0;
		  /* 8222C3D0h */ case    5:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222C3D0h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222C3D0h case    5:*/		return 0x8222C3D4;
		  /* 8222C3D4h */ case    6:  		/* stw R9, <#[R10 + 36]> */
		/* 8222C3D4h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000024) );
		/* 8222C3D4h case    6:*/		return 0x8222C3D8;
		  /* 8222C3D8h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222C3D8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C3D8h case    7:*/		return 0x8222C3DC;
		  /* 8222C3DCh */ case    8:  		/* lwz R9, <#[R11]> */
		/* 8222C3DCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C3DCh case    8:*/		return 0x8222C3E0;
		  /* 8222C3E0h */ case    9:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8222C3E0h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8222C3E0h case    9:*/		return 0x8222C3E4;
		  /* 8222C3E4h */ case   10:  		/* stw R10, <#[R9]> */
		/* 8222C3E4h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8222C3E4h case   10:*/		return 0x8222C3E8;
		  /* 8222C3E8h */ case   11:  		/* rlwinm R10, R25, 0, 0, 30 */
		/* 8222C3E8h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R25);
		/* 8222C3E8h case   11:*/		return 0x8222C3EC;
		  /* 8222C3ECh */ case   12:  		/* addi R9, R11, 4 */
		/* 8222C3ECh case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8222C3ECh case   12:*/		return 0x8222C3F0;
		  /* 8222C3F0h */ case   13:  		/* addi R10, R10, 36 */
		/* 8222C3F0h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 8222C3F0h case   13:*/		return 0x8222C3F4;
		  /* 8222C3F4h */ case   14:  		/* bc 12, CR0_EQ, 44 */
		/* 8222C3F4h case   14:*/		if ( regs.CR[0].eq ) { return 0x8222C420;  }
		/* 8222C3F4h case   14:*/		return 0x8222C3F8;
		  /* 8222C3F8h */ case   15:  		/* lwz R6, <#[R10]> */
		/* 8222C3F8h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C3F8h case   15:*/		return 0x8222C3FC;
		  /* 8222C3FCh */ case   16:  		/* addi R8, R11, -36 */
		/* 8222C3FCh case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 8222C3FCh case   16:*/		return 0x8222C400;
		  /* 8222C400h */ case   17:  		/* addi R7, R10, -36 */
		/* 8222C400h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 8222C400h case   17:*/		return 0x8222C404;
		  /* 8222C404h */ case   18:  		/* stw R6, <#[R11]> */
		/* 8222C404h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C404h case   18:*/		return 0x8222C408;
		  /* 8222C408h */ case   19:  		/* lwz R6, <#[R10]> */
		/* 8222C408h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C408h case   19:*/		return 0x8222C40C;
		  /* 8222C40Ch */ case   20:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8222C40Ch case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8222C40Ch case   20:*/		return 0x8222C410;
		  /* 8222C410h */ case   21:  		/* stw R8, <#[R6]> */
		/* 8222C410h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 8222C410h case   21:*/		return 0x8222C414;
		  /* 8222C414h */ case   22:  		/* stw R7, <#[R11 + 4]> */
		/* 8222C414h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C414h case   22:*/		return 0x8222C418;
		  /* 8222C418h */ case   23:  		/* stw R9, <#[R10]> */
		/* 8222C418h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C418h case   23:*/		return 0x8222C41C;
		  /* 8222C41Ch */ case   24:  		/* b 40 */
		/* 8222C41Ch case   24:*/		return 0x8222C444;
		/* 8222C41Ch case   24:*/		return 0x8222C420;
	}
	return 0x8222C420;
} // Block from 8222C3BCh-8222C420h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8222C420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C420);
		  /* 8222C420h */ case    0:  		/* lwz R6, <#[R10 + 4]> */
		/* 8222C420h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8222C420h case    0:*/		return 0x8222C424;
		  /* 8222C424h */ case    1:  		/* addi R8, R10, 4 */
		/* 8222C424h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8222C424h case    1:*/		return 0x8222C428;
		  /* 8222C428h */ case    2:  		/* addi R7, R11, -36 */
		/* 8222C428h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8222C428h case    2:*/		return 0x8222C42C;
		  /* 8222C42Ch */ case    3:  		/* stw R6, <#[R11 + 4]> */
		/* 8222C42Ch case    3:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8222C42Ch case    3:*/		return 0x8222C430;
		  /* 8222C430h */ case    4:  		/* lwz R6, <#[R10 + 4]> */
		/* 8222C430h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8222C430h case    4:*/		return 0x8222C434;
		  /* 8222C434h */ case    5:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8222C434h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8222C434h case    5:*/		return 0x8222C438;
		  /* 8222C438h */ case    6:  		/* stw R9, <#[R6 + 36]> */
		/* 8222C438h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000024) );
		/* 8222C438h case    6:*/		return 0x8222C43C;
		  /* 8222C43Ch */ case    7:  		/* stw R8, <#[R11]> */
		/* 8222C43Ch case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C43Ch case    7:*/		return 0x8222C440;
		  /* 8222C440h */ case    8:  		/* stw R7, <#[R10 + 4]> */
		/* 8222C440h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8222C440h case    8:*/		return 0x8222C444;
	}
	return 0x8222C444;
} // Block from 8222C420h-8222C444h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222C444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C444);
		  /* 8222C444h */ case    0:  		/* lwz R10, <#[R24 + 8]> */
		/* 8222C444h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000008) );
		/* 8222C444h case    0:*/		return 0x8222C448;
		  /* 8222C448h */ case    1:  		/* addi R11, R23, 972 */
		/* 8222C448h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x3CC);
		/* 8222C448h case    1:*/		return 0x8222C44C;
		  /* 8222C44Ch */ case    2:  		/* rlwinm R11, R10, 0, 2, 0 */
		/* 8222C44Ch case    2:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R10);
		/* 8222C44Ch case    2:*/		return 0x8222C450;
	}
	return 0x8222C450;
} // Block from 8222C444h-8222C450h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C450h
// Function '?DependsOnWorker@Instruction@D3DXShader@@AAA_NPAV12@PAVBlock@2@_NPAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C450);
		  /* 8222C450h */ case    0:  		/* stw R11, <#[R24 + 8]> */
		/* 8222C450h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8222C450h case    0:*/		return 0x8222C454;
		  /* 8222C454h */ case    1:  		/* lwz R11, <#[R23 + 976]> */
		/* 8222C454h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x000003D0) );
		/* 8222C454h case    1:*/		return 0x8222C458;
		  /* 8222C458h */ case    2:  		/* stw R11, <#[R30]> */
		/* 8222C458h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222C458h case    2:*/		return 0x8222C45C;
		  /* 8222C45Ch */ case    3:  		/* stw R30, <#[R23 + 976]> */
		/* 8222C45Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R23 + 0x000003D0) );
		/* 8222C45Ch case    3:*/		return 0x8222C460;
		  /* 8222C460h */ case    4:  		/* addi R1, R1, 208 */
		/* 8222C460h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8222C460h case    4:*/		return 0x8222C464;
		  /* 8222C464h */ case    5:  		/* b -1683932 */
		/* 8222C464h case    5:*/		return 0x82091288;
		/* 8222C464h case    5:*/		return 0x8222C468;
	}
	return 0x8222C468;
} // Block from 8222C450h-8222C468h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222C468h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C468);
		  /* 8222C468h */ case    0:  		/* mfspr R12, LR */
		/* 8222C468h case    0:*/		regs.R12 = regs.LR;
		/* 8222C468h case    0:*/		return 0x8222C46C;
		  /* 8222C46Ch */ case    1:  		/* bl -1683988 */
		/* 8222C46Ch case    1:*/		regs.LR = 0x8222C470; return 0x82091258;
		/* 8222C46Ch case    1:*/		return 0x8222C470;
		  /* 8222C470h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222C470h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222C470h case    2:*/		return 0x8222C474;
		  /* 8222C474h */ case    3:  		/* lwz R11, <#[R4 + 28]> */
		/* 8222C474h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 8222C474h case    3:*/		return 0x8222C478;
		  /* 8222C478h */ case    4:  		/* mr R28, R3 */
		/* 8222C478h case    4:*/		regs.R28 = regs.R3;
		/* 8222C478h case    4:*/		return 0x8222C47C;
		  /* 8222C47Ch */ case    5:  		/* lwz R10, <#[R5 + 28]> */
		/* 8222C47Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x0000001C) );
		/* 8222C47Ch case    5:*/		return 0x8222C480;
		  /* 8222C480h */ case    6:  		/* mr R31, R4 */
		/* 8222C480h case    6:*/		regs.R31 = regs.R4;
		/* 8222C480h case    6:*/		return 0x8222C484;
		  /* 8222C484h */ case    7:  		/* mr R30, R5 */
		/* 8222C484h case    7:*/		regs.R30 = regs.R5;
		/* 8222C484h case    7:*/		return 0x8222C488;
		  /* 8222C488h */ case    8:  		/* mr R29, R6 */
		/* 8222C488h case    8:*/		regs.R29 = regs.R6;
		/* 8222C488h case    8:*/		return 0x8222C48C;
		  /* 8222C48Ch */ case    9:  		/* cmpw CR6, R11, R10 */
		/* 8222C48Ch case    9:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8222C48Ch case    9:*/		return 0x8222C490;
		  /* 8222C490h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 8222C490h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222C49C;  }
		/* 8222C490h case   10:*/		return 0x8222C494;
		  /* 8222C494h */ case   11:  		/* li R3, 0 */
		/* 8222C494h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222C494h case   11:*/		return 0x8222C498;
		  /* 8222C498h */ case   12:  		/* b 144 */
		/* 8222C498h case   12:*/		return 0x8222C528;
		/* 8222C498h case   12:*/		return 0x8222C49C;
	}
	return 0x8222C49C;
} // Block from 8222C468h-8222C49Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222C49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C49C);
		  /* 8222C49Ch */ case    0:  		/* mr R3, R30 */
		/* 8222C49Ch case    0:*/		regs.R3 = regs.R30;
		/* 8222C49Ch case    0:*/		return 0x8222C4A0;
		  /* 8222C4A0h */ case    1:  		/* bl -633488 */
		/* 8222C4A0h case    1:*/		regs.LR = 0x8222C4A4; return 0x82191A10;
		/* 8222C4A0h case    1:*/		return 0x8222C4A4;
		  /* 8222C4A4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222C4A4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222C4A4h case    2:*/		return 0x8222C4A8;
		  /* 8222C4A8h */ case    3:  		/* bc 12, CR0_EQ, -20 */
		/* 8222C4A8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222C494;  }
		/* 8222C4A8h case    3:*/		return 0x8222C4AC;
		  /* 8222C4ACh */ case    4:  		/* mr R3, R31 */
		/* 8222C4ACh case    4:*/		regs.R3 = regs.R31;
		/* 8222C4ACh case    4:*/		return 0x8222C4B0;
		  /* 8222C4B0h */ case    5:  		/* bl -633504 */
		/* 8222C4B0h case    5:*/		regs.LR = 0x8222C4B4; return 0x82191A10;
		/* 8222C4B0h case    5:*/		return 0x8222C4B4;
		  /* 8222C4B4h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222C4B4h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222C4B4h case    6:*/		return 0x8222C4B8;
		  /* 8222C4B8h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 8222C4B8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8222C4C4;  }
		/* 8222C4B8h case    7:*/		return 0x8222C4BC;
		  /* 8222C4BCh */ case    8:  		/* li R3, 1 */
		/* 8222C4BCh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222C4BCh case    8:*/		return 0x8222C4C0;
		  /* 8222C4C0h */ case    9:  		/* b 104 */
		/* 8222C4C0h case    9:*/		return 0x8222C528;
		/* 8222C4C0h case    9:*/		return 0x8222C4C4;
	}
	return 0x8222C4C4;
} // Block from 8222C49Ch-8222C4C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222C4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C4C4);
		  /* 8222C4C4h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 8222C4C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8222C4C4h case    0:*/		return 0x8222C4C8;
		  /* 8222C4C8h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8222C4C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222C4DC;  }
		/* 8222C4C8h case    1:*/		return 0x8222C4CC;
		  /* 8222C4CCh */ case    2:  		/* mr R4, R31 */
		/* 8222C4CCh case    2:*/		regs.R4 = regs.R31;
		/* 8222C4CCh case    2:*/		return 0x8222C4D0;
		  /* 8222C4D0h */ case    3:  		/* mr R3, R30 */
		/* 8222C4D0h case    3:*/		regs.R3 = regs.R30;
		/* 8222C4D0h case    3:*/		return 0x8222C4D4;
		  /* 8222C4D4h */ case    4:  		/* bl -595092 */
		/* 8222C4D4h case    4:*/		regs.LR = 0x8222C4D8; return 0x8219B040;
		/* 8222C4D4h case    4:*/		return 0x8222C4D8;
		  /* 8222C4D8h */ case    5:  		/* b 48 */
		/* 8222C4D8h case    5:*/		return 0x8222C508;
		/* 8222C4D8h case    5:*/		return 0x8222C4DC;
	}
	return 0x8222C4DC;
} // Block from 8222C4C4h-8222C4DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222C4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C4DC);
		  /* 8222C4DCh */ case    0:  		/* mr R11, R30 */
		/* 8222C4DCh case    0:*/		regs.R11 = regs.R30;
		/* 8222C4DCh case    0:*/		return 0x8222C4E0;
		  /* 8222C4E0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C4E0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C4E0h case    1:*/		return 0x8222C4E4;
		  /* 8222C4E4h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8222C4E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8222C4E4h case    2:*/		return 0x8222C4E8;
		  /* 8222C4E8h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222C4E8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222C4E8h case    3:*/		return 0x8222C4EC;
		  /* 8222C4ECh */ case    4:  		/* bc 4, CR0_EQ, 68 */
		/* 8222C4ECh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222C530;  }
		/* 8222C4ECh case    4:*/		return 0x8222C4F0;
		  /* 8222C4F0h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C4F0h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C4F0h case    5:*/		return 0x8222C4F4;
		  /* 8222C4F4h */ case    6:  		/* addic. R11, R11, -40 */
		/* 8222C4F4h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8222C4F4h case    6:*/		return 0x8222C4F8;
		  /* 8222C4F8h */ case    7:  		/* bc 12, CR0_EQ, 56 */
		/* 8222C4F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222C530;  }
		/* 8222C4F8h case    7:*/		return 0x8222C4FC;
		  /* 8222C4FCh */ case    8:  		/* cmplw CR6, R11, R31 */
		/* 8222C4FCh case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222C4FCh case    8:*/		return 0x8222C500;
		  /* 8222C500h */ case    9:  		/* bc 4, CR6_EQ, -32 */
		/* 8222C500h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222C4E0;  }
		/* 8222C500h case    9:*/		return 0x8222C504;
		  /* 8222C504h */ case   10:  		/* li R3, 1 */
		/* 8222C504h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222C504h case   10:*/		return 0x8222C508;
	}
	return 0x8222C508;
} // Block from 8222C4DCh-8222C508h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222C508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C508);
		  /* 8222C508h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222C508h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222C508h case    0:*/		return 0x8222C50C;
		  /* 8222C50Ch */ case    1:  		/* bc 4, CR0_EQ, -80 */
		/* 8222C50Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222C4BC;  }
		/* 8222C50Ch case    1:*/		return 0x8222C510;
		  /* 8222C510h */ case    2:  		/* mr R7, R29 */
		/* 8222C510h case    2:*/		regs.R7 = regs.R29;
		/* 8222C510h case    2:*/		return 0x8222C514;
		  /* 8222C514h */ case    3:  		/* li R6, 1 */
		/* 8222C514h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222C514h case    3:*/		return 0x8222C518;
		  /* 8222C518h */ case    4:  		/* mr R5, R30 */
		/* 8222C518h case    4:*/		regs.R5 = regs.R30;
		/* 8222C518h case    4:*/		return 0x8222C51C;
		  /* 8222C51Ch */ case    5:  		/* mr R4, R31 */
		/* 8222C51Ch case    5:*/		regs.R4 = regs.R31;
		/* 8222C51Ch case    5:*/		return 0x8222C520;
		  /* 8222C520h */ case    6:  		/* mr R3, R28 */
		/* 8222C520h case    6:*/		regs.R3 = regs.R28;
		/* 8222C520h case    6:*/		return 0x8222C524;
		  /* 8222C524h */ case    7:  		/* bl -2028 */
		/* 8222C524h case    7:*/		regs.LR = 0x8222C528; return 0x8222BD38;
		/* 8222C524h case    7:*/		return 0x8222C528;
	}
	return 0x8222C528;
} // Block from 8222C508h-8222C528h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222C528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C528);
		  /* 8222C528h */ case    0:  		/* addi R1, R1, 128 */
		/* 8222C528h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8222C528h case    0:*/		return 0x8222C52C;
		  /* 8222C52Ch */ case    1:  		/* b -1684100 */
		/* 8222C52Ch case    1:*/		return 0x820912A8;
		/* 8222C52Ch case    1:*/		return 0x8222C530;
	}
	return 0x8222C530;
} // Block from 8222C528h-8222C530h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C530);
		  /* 8222C530h */ case    0:  		/* li R3, 0 */
		/* 8222C530h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222C530h case    0:*/		return 0x8222C534;
		  /* 8222C534h */ case    1:  		/* b -44 */
		/* 8222C534h case    1:*/		return 0x8222C508;
		/* 8222C534h case    1:*/		return 0x8222C538;
	}
	return 0x8222C538;
} // Block from 8222C530h-8222C538h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C538h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C538);
		  /* 8222C538h */ case    0:  		/* mfspr R12, LR */
		/* 8222C538h case    0:*/		regs.R12 = regs.LR;
		/* 8222C538h case    0:*/		return 0x8222C53C;
		  /* 8222C53Ch */ case    1:  		/* bl -1684208 */
		/* 8222C53Ch case    1:*/		regs.LR = 0x8222C540; return 0x8209124C;
		/* 8222C53Ch case    1:*/		return 0x8222C540;
		  /* 8222C540h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8222C540h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8222C540h case    2:*/		return 0x8222C544;
		  /* 8222C544h */ case    3:  		/* lwz R30, <#[R4 + 28]> */
		/* 8222C544h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x0000001C) );
		/* 8222C544h case    3:*/		return 0x8222C548;
		  /* 8222C548h */ case    4:  		/* mr R28, R3 */
		/* 8222C548h case    4:*/		regs.R28 = regs.R3;
		/* 8222C548h case    4:*/		return 0x8222C54C;
		  /* 8222C54Ch */ case    5:  		/* mr R25, R5 */
		/* 8222C54Ch case    5:*/		regs.R25 = regs.R5;
		/* 8222C54Ch case    5:*/		return 0x8222C550;
		  /* 8222C550h */ case    6:  		/* mr R27, R6 */
		/* 8222C550h case    6:*/		regs.R27 = regs.R6;
		/* 8222C550h case    6:*/		return 0x8222C554;
		  /* 8222C554h */ case    7:  		/* lwz R29, <#[R30 + 64]> */
		/* 8222C554h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000040) );
		/* 8222C554h case    7:*/		return 0x8222C558;
		  /* 8222C558h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 8222C558h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222C558h case    8:*/		return 0x8222C55C;
		  /* 8222C55Ch */ case    9:  		/* bc 12, CR6_EQ, 680 */
		/* 8222C55Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8222C804;  }
		/* 8222C55Ch case    9:*/		return 0x8222C560;
		  /* 8222C560h */ case   10:  		/* li R26, 1 */
		/* 8222C560h case   10:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8222C560h case   10:*/		return 0x8222C564;
		  /* 8222C564h */ case   11:  		/* cmplwi CR6, R25, 0 */
		/* 8222C564h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8222C564h case   11:*/		return 0x8222C568;
		  /* 8222C568h */ case   12:  		/* bc 12, CR6_EQ, 72 */
		/* 8222C568h case   12:*/		if ( regs.CR[6].eq ) { return 0x8222C5B0;  }
		/* 8222C568h case   12:*/		return 0x8222C56C;
		  /* 8222C56Ch */ case   13:  		/* cmplw CR6, R29, R25 */
		/* 8222C56Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 8222C56Ch case   13:*/		return 0x8222C570;
		  /* 8222C570h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 8222C570h case   14:*/		if ( regs.CR[6].eq ) { return 0x8222C5A4;  }
		/* 8222C570h case   14:*/		return 0x8222C574;
		  /* 8222C574h */ case   15:  		/* lwz R11, <#[R29 + 48]> */
		/* 8222C574h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8222C574h case   15:*/		return 0x8222C578;
		  /* 8222C578h */ case   16:  		/* lwz R10, <#[R25 + 40]> */
		/* 8222C578h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000028) );
		/* 8222C578h case   16:*/		return 0x8222C57C;
		  /* 8222C57Ch */ case   17:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8222C57Ch case   17:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8222C57Ch case   17:*/		return 0x8222C580;
		  /* 8222C580h */ case   18:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8222C580h case   18:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8222C580h case   18:*/		return 0x8222C584;
		  /* 8222C584h */ case   19:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8222C584h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8222C584h case   19:*/		return 0x8222C588;
		  /* 8222C588h */ case   20:  		/* addi R11, R11, 1 */
		/* 8222C588h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222C588h case   20:*/		return 0x8222C58C;
		  /* 8222C58Ch */ case   21:  		/* slw R9, R26, R9 */
		/* 8222C58Ch case   21:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 8222C58Ch case   21:*/		return 0x8222C590;
		  /* 8222C590h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222C590h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222C590h case   22:*/		return 0x8222C594;
		  /* 8222C594h */ case   23:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8222C594h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8222C594h case   23:*/		return 0x8222C598;
		  /* 8222C598h */ case   24:  		/* and. R11, R11, R9 */
		/* 8222C598h case   24:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8222C598h case   24:*/		return 0x8222C59C;
		  /* 8222C59Ch */ case   25:  		/* mr R11, R26 */
		/* 8222C59Ch case   25:*/		regs.R11 = regs.R26;
		/* 8222C59Ch case   25:*/		return 0x8222C5A0;
		  /* 8222C5A0h */ case   26:  		/* bc 4, CR0_EQ, 8 */
		/* 8222C5A0h case   26:*/		if ( !regs.CR[0].eq ) { return 0x8222C5A8;  }
		/* 8222C5A0h case   26:*/		return 0x8222C5A4;
	}
	return 0x8222C5A4;
} // Block from 8222C538h-8222C5A4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222C5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C5A4);
		  /* 8222C5A4h */ case    0:  		/* li R11, 0 */
		/* 8222C5A4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222C5A4h case    0:*/		return 0x8222C5A8;
	}
	return 0x8222C5A8;
} // Block from 8222C5A4h-8222C5A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222C5A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C5A8);
		  /* 8222C5A8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222C5A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222C5A8h case    0:*/		return 0x8222C5AC;
		  /* 8222C5ACh */ case    1:  		/* bc 4, CR0_EQ, 600 */
		/* 8222C5ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222C804;  }
		/* 8222C5ACh case    1:*/		return 0x8222C5B0;
	}
	return 0x8222C5B0;
} // Block from 8222C5A8h-8222C5B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C5B0);
		  /* 8222C5B0h */ case    0:  		/* lwz R11, <#[R30 + 76]> */
		/* 8222C5B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8222C5B0h case    0:*/		return 0x8222C5B4;
		  /* 8222C5B4h */ case    1:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8222C5B4h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C5B4h case    1:*/		return 0x8222C5B8;
		  /* 8222C5B8h */ case    2:  		/* bc 12, CR0_EQ, 120 */
		/* 8222C5B8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8222C630;  }
		/* 8222C5B8h case    2:*/		return 0x8222C5BC;
		  /* 8222C5BCh */ case    3:  		/* lwz R11, <#[R30 + 112]> */
		/* 8222C5BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8222C5BCh case    3:*/		return 0x8222C5C0;
		  /* 8222C5C0h */ case    4:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C5C0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C5C0h case    4:*/		return 0x8222C5C4;
		  /* 8222C5C4h */ case    5:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8222C5C4h case    5:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8222C5C4h case    5:*/		return 0x8222C5C8;
		  /* 8222C5C8h */ case    6:  		/* bc 12, CR0_EQ, 48 */
		/* 8222C5C8h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222C5F8;  }
		/* 8222C5C8h case    6:*/		return 0x8222C5CC;
		  /* 8222C5CCh */ case    7:  		/* b 16 */
		/* 8222C5CCh case    7:*/		return 0x8222C5DC;
		/* 8222C5CCh case    7:*/		return 0x8222C5D0;
		  /* 8222C5D0h */ case    8:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C5D0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C5D0h case    8:*/		return 0x8222C5D4;
		  /* 8222C5D4h */ case    9:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8222C5D4h case    9:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8222C5D4h case    9:*/		return 0x8222C5D8;
		  /* 8222C5D8h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 8222C5D8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222C5E8;  }
		/* 8222C5D8h case   10:*/		return 0x8222C5DC;
	}
	return 0x8222C5DC;
} // Block from 8222C5B0h-8222C5DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222C5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C5DC);
		  /* 8222C5DCh */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 8222C5DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8222C5DCh case    0:*/		return 0x8222C5E0;
		  /* 8222C5E0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222C5E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C5E0h case    1:*/		return 0x8222C5E4;
		  /* 8222C5E4h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8222C5E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222C5D0;  }
		/* 8222C5E4h case    2:*/		return 0x8222C5E8;
	}
	return 0x8222C5E8;
} // Block from 8222C5DCh-8222C5E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C5E8);
		  /* 8222C5E8h */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C5E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C5E8h case    0:*/		return 0x8222C5EC;
		  /* 8222C5ECh */ case    1:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8222C5ECh case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8222C5ECh case    1:*/		return 0x8222C5F0;
		  /* 8222C5F0h */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 8222C5F0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222C5DC;  }
		/* 8222C5F0h case    2:*/		return 0x8222C5F4;
		  /* 8222C5F4h */ case    3:  		/* stw R11, <#[R30 + 112]> */
		/* 8222C5F4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8222C5F4h case    3:*/		return 0x8222C5F8;
	}
	return 0x8222C5F8;
} // Block from 8222C5E8h-8222C5F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222C5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C5F8);
		  /* 8222C5F8h */ case    0:  		/* lwz R31, <#[R30 + 112]> */
		/* 8222C5F8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000070) );
		/* 8222C5F8h case    0:*/		return 0x8222C5FC;
		  /* 8222C5FCh */ case    1:  		/* mr R3, R28 */
		/* 8222C5FCh case    1:*/		regs.R3 = regs.R28;
		/* 8222C5FCh case    1:*/		return 0x8222C600;
		  /* 8222C600h */ case    2:  		/* mr R4, R31 */
		/* 8222C600h case    2:*/		regs.R4 = regs.R31;
		/* 8222C600h case    2:*/		return 0x8222C604;
		  /* 8222C604h */ case    3:  		/* bl -736660 */
		/* 8222C604h case    3:*/		regs.LR = 0x8222C608; return 0x82178870;
		/* 8222C604h case    3:*/		return 0x8222C608;
		  /* 8222C608h */ case    4:  		/* or. R4, R3, R3 */
		/* 8222C608h case    4:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8222C608h case    4:*/		return 0x8222C60C;
		  /* 8222C60Ch */ case    5:  		/* bc 12, CR0_EQ, 68 */
		/* 8222C60Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8222C650;  }
		/* 8222C60Ch case    5:*/		return 0x8222C610;
		  /* 8222C610h */ case    6:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222C610h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222C610h case    6:*/		return 0x8222C614;
		  /* 8222C614h */ case    7:  		/* rlwinm. R10, R11, 15, 31, 31 */
		/* 8222C614h case    7:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R10,regs.R11);
		/* 8222C614h case    7:*/		return 0x8222C618;
		  /* 8222C618h */ case    8:  		/* bc 12, CR0_EQ, 56 */
		/* 8222C618h case    8:*/		if ( regs.CR[0].eq ) { return 0x8222C650;  }
		/* 8222C618h case    8:*/		return 0x8222C61C;
		  /* 8222C61Ch */ case    9:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 8222C61Ch case    9:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C61Ch case    9:*/		return 0x8222C620;
		  /* 8222C620h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 8222C620h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8222C630;  }
		/* 8222C620h case   10:*/		return 0x8222C624;
		  /* 8222C624h */ case   11:  		/* mr R5, R27 */
		/* 8222C624h case   11:*/		regs.R5 = regs.R27;
		/* 8222C624h case   11:*/		return 0x8222C628;
		  /* 8222C628h */ case   12:  		/* mr R3, R28 */
		/* 8222C628h case   12:*/		regs.R3 = regs.R28;
		/* 8222C628h case   12:*/		return 0x8222C62C;
		  /* 8222C62Ch */ case   13:  		/* bl 8772 */
		/* 8222C62Ch case   13:*/		regs.LR = 0x8222C630; return 0x8222E870;
		/* 8222C62Ch case   13:*/		return 0x8222C630;
	}
	return 0x8222C630;
} // Block from 8222C5F8h-8222C630h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8222C630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C630);
		  /* 8222C630h */ case    0:  		/* lbz R11, <#[R30 + 76]> */
		/* 8222C630h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8222C630h case    0:*/		return 0x8222C634;
		  /* 8222C634h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222C634h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C634h case    1:*/		return 0x8222C638;
		  /* 8222C638h */ case    2:  		/* bc 12, CR0_EQ, 268 */
		/* 8222C638h case    2:*/		if ( regs.CR[0].eq ) { return 0x8222C744;  }
		/* 8222C638h case    2:*/		return 0x8222C63C;
		  /* 8222C63Ch */ case    3:  		/* lwz R11, <#[R30 + 108]> */
		/* 8222C63Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8222C63Ch case    3:*/		return 0x8222C640;
		  /* 8222C640h */ case    4:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C640h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C640h case    4:*/		return 0x8222C644;
		  /* 8222C644h */ case    5:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8222C644h case    5:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8222C644h case    5:*/		return 0x8222C648;
		  /* 8222C648h */ case    6:  		/* bc 12, CR0_EQ, 212 */
		/* 8222C648h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222C71C;  }
		/* 8222C648h case    6:*/		return 0x8222C64C;
		  /* 8222C64Ch */ case    7:  		/* b 180 */
		/* 8222C64Ch case    7:*/		return 0x8222C700;
		/* 8222C64Ch case    7:*/		return 0x8222C650;
	}
	return 0x8222C650;
} // Block from 8222C630h-8222C650h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222C650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C650);
		  /* 8222C650h */ case    0:  		/* lwz R31, <#[R31 + 96]> */
		/* 8222C650h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000060) );
		/* 8222C650h case    0:*/		return 0x8222C654;
		  /* 8222C654h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8222C654h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222C654h case    1:*/		return 0x8222C658;
		  /* 8222C658h */ case    2:  		/* bc 12, CR6_EQ, -40 */
		/* 8222C658h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C630;  }
		/* 8222C658h case    2:*/		return 0x8222C65C;
		  /* 8222C65Ch */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222C65Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222C65Ch case    3:*/		return 0x8222C660;
		  /* 8222C660h */ case    4:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222C660h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222C660h case    4:*/		return 0x8222C664;
		  /* 8222C664h */ case    5:  		/* bc 4, CR0_EQ, -52 */
		/* 8222C664h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8222C630;  }
		/* 8222C664h case    5:*/		return 0x8222C668;
		  /* 8222C668h */ case    6:  		/* oris R11, R11, 1024 */
		/* 8222C668h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222C668h case    6:*/		return 0x8222C66C;
		  /* 8222C66Ch */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 8222C66Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8222C66Ch case    7:*/		return 0x8222C670;
		  /* 8222C670h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 8222C670h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222C670h case    8:*/		return 0x8222C674;
		  /* 8222C674h */ case    9:  		/* bc 12, CR6_EQ, 92 */
		/* 8222C674h case    9:*/		if ( regs.CR[6].eq ) { return 0x8222C6D0;  }
		/* 8222C674h case    9:*/		return 0x8222C678;
		  /* 8222C678h */ case   10:  		/* lwz R11, <#[R27 + 4]> */
		/* 8222C678h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 8222C678h case   10:*/		return 0x8222C67C;
		  /* 8222C67Ch */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222C67Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C67Ch case   11:*/		return 0x8222C680;
		  /* 8222C680h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8222C680h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8222C6A8;  }
		/* 8222C680h case   12:*/		return 0x8222C684;
		  /* 8222C684h */ case   13:  		/* lwz R11, <#[R27]> */
		/* 8222C684h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8222C684h case   13:*/		return 0x8222C688;
		  /* 8222C688h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222C688h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222C688h case   14:*/		return 0x8222C68C;
		  /* 8222C68Ch */ case   15:  		/* addic. R3, R11, -4 */
		/* 8222C68Ch case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222C68Ch case   15:*/		return 0x8222C690;
		  /* 8222C690h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 8222C690h case   16:*/		if ( regs.CR[0].eq ) { return 0x8222C6A8;  }
		/* 8222C690h case   16:*/		return 0x8222C694;
		  /* 8222C694h */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C694h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C694h case   17:*/		return 0x8222C698;
		  /* 8222C698h */ case   18:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222C698h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222C698h case   18:*/		return 0x8222C69C;
		  /* 8222C69Ch */ case   19:  		/* addi R11, R11, 1 */
		/* 8222C69Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222C69Ch case   19:*/		return 0x8222C6A0;
		  /* 8222C6A0h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 8222C6A0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222C6A0h case   20:*/		return 0x8222C6A4;
		  /* 8222C6A4h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 8222C6A4h case   21:*/		if ( !regs.CR[6].gt ) { return 0x8222C6B4;  }
		/* 8222C6A4h case   21:*/		return 0x8222C6A8;
	}
	return 0x8222C6A8;
} // Block from 8222C650h-8222C6A8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8222C6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C6A8);
		  /* 8222C6A8h */ case    0:  		/* li R4, 1 */
		/* 8222C6A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222C6A8h case    0:*/		return 0x8222C6AC;
		  /* 8222C6ACh */ case    1:  		/* mr R3, R27 */
		/* 8222C6ACh case    1:*/		regs.R3 = regs.R27;
		/* 8222C6ACh case    1:*/		return 0x8222C6B0;
		  /* 8222C6B0h */ case    2:  		/* bl -652776 */
		/* 8222C6B0h case    2:*/		regs.LR = 0x8222C6B4; return 0x8218D0C8;
		/* 8222C6B0h case    2:*/		return 0x8222C6B4;
	}
	return 0x8222C6B4;
} // Block from 8222C6A8h-8222C6B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C6B4);
		  /* 8222C6B4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C6B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C6B4h case    0:*/		return 0x8222C6B8;
		  /* 8222C6B8h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222C6B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222C6B8h case    1:*/		return 0x8222C6BC;
		  /* 8222C6BCh */ case    2:  		/* addi R9, R11, 1 */
		/* 8222C6BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222C6BCh case    2:*/		return 0x8222C6C0;
		  /* 8222C6C0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222C6C0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222C6C0h case    3:*/		return 0x8222C6C4;
		  /* 8222C6C4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222C6C4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C6C4h case    4:*/		return 0x8222C6C8;
		  /* 8222C6C8h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222C6C8h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222C6C8h case    5:*/		return 0x8222C6CC;
		  /* 8222C6CCh */ case    6:  		/* b -156 */
		/* 8222C6CCh case    6:*/		return 0x8222C630;
		/* 8222C6CCh case    6:*/		return 0x8222C6D0;
	}
	return 0x8222C6D0;
} // Block from 8222C6B4h-8222C6D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222C6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C6D0);
		  /* 8222C6D0h */ case    0:  		/* lwz R31, <#[R31]> */
		/* 8222C6D0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000000) );
		/* 8222C6D0h case    0:*/		return 0x8222C6D4;
		  /* 8222C6D4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8222C6D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222C6D4h case    1:*/		return 0x8222C6D8;
		  /* 8222C6D8h */ case    2:  		/* bc 12, CR6_EQ, -168 */
		/* 8222C6D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C630;  }
		/* 8222C6D8h case    2:*/		return 0x8222C6DC;
		  /* 8222C6DCh */ case    3:  		/* li R5, 0 */
		/* 8222C6DCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222C6DCh case    3:*/		return 0x8222C6E0;
		  /* 8222C6E0h */ case    4:  		/* mr R4, R31 */
		/* 8222C6E0h case    4:*/		regs.R4 = regs.R31;
		/* 8222C6E0h case    4:*/		return 0x8222C6E4;
		  /* 8222C6E4h */ case    5:  		/* mr R3, R28 */
		/* 8222C6E4h case    5:*/		regs.R3 = regs.R28;
		/* 8222C6E4h case    5:*/		return 0x8222C6E8;
		  /* 8222C6E8h */ case    6:  		/* bl 5760 */
		/* 8222C6E8h case    6:*/		regs.LR = 0x8222C6EC; return 0x8222DD68;
		/* 8222C6E8h case    6:*/		return 0x8222C6EC;
		  /* 8222C6ECh */ case    7:  		/* lwz R31, <#[R31 + 4]> */
		/* 8222C6ECh case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8222C6ECh case    7:*/		return 0x8222C6F0;
		  /* 8222C6F0h */ case    8:  		/* b -28 */
		/* 8222C6F0h case    8:*/		return 0x8222C6D4;
		/* 8222C6F0h case    8:*/		return 0x8222C6F4;
		  /* 8222C6F4h */ case    9:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C6F4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C6F4h case    9:*/		return 0x8222C6F8;
		  /* 8222C6F8h */ case   10:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8222C6F8h case   10:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8222C6F8h case   10:*/		return 0x8222C6FC;
		  /* 8222C6FCh */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 8222C6FCh case   11:*/		if ( regs.CR[0].eq ) { return 0x8222C70C;  }
		/* 8222C6FCh case   11:*/		return 0x8222C700;
	}
	return 0x8222C700;
} // Block from 8222C6D0h-8222C700h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222C700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C700);
		  /* 8222C700h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 8222C700h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8222C700h case    0:*/		return 0x8222C704;
		  /* 8222C704h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222C704h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C704h case    1:*/		return 0x8222C708;
		  /* 8222C708h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8222C708h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222C6F4;  }
		/* 8222C708h case    2:*/		return 0x8222C70C;
	}
	return 0x8222C70C;
} // Block from 8222C700h-8222C70Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C70Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C70C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C70C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C70C);
		  /* 8222C70Ch */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C70Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C70Ch case    0:*/		return 0x8222C710;
		  /* 8222C710h */ case    1:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8222C710h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8222C710h case    1:*/		return 0x8222C714;
		  /* 8222C714h */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 8222C714h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222C700;  }
		/* 8222C714h case    2:*/		return 0x8222C718;
		  /* 8222C718h */ case    3:  		/* stw R11, <#[R30 + 108]> */
		/* 8222C718h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8222C718h case    3:*/		return 0x8222C71C;
	}
	return 0x8222C71C;
} // Block from 8222C70Ch-8222C71Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222C71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C71C);
		  /* 8222C71Ch */ case    0:  		/* mr R3, R28 */
		/* 8222C71Ch case    0:*/		regs.R3 = regs.R28;
		/* 8222C71Ch case    0:*/		return 0x8222C720;
		  /* 8222C720h */ case    1:  		/* lwz R4, <#[R30 + 108]> */
		/* 8222C720h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000006C) );
		/* 8222C720h case    1:*/		return 0x8222C724;
		  /* 8222C724h */ case    2:  		/* bl -736948 */
		/* 8222C724h case    2:*/		regs.LR = 0x8222C728; return 0x82178870;
		/* 8222C724h case    2:*/		return 0x8222C728;
		  /* 8222C728h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222C728h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C728h case    3:*/		return 0x8222C72C;
		  /* 8222C72Ch */ case    4:  		/* mr R4, R3 */
		/* 8222C72Ch case    4:*/		regs.R4 = regs.R3;
		/* 8222C72Ch case    4:*/		return 0x8222C730;
		  /* 8222C730h */ case    5:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 8222C730h case    5:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C730h case    5:*/		return 0x8222C734;
		  /* 8222C734h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 8222C734h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8222C744;  }
		/* 8222C734h case    6:*/		return 0x8222C738;
		  /* 8222C738h */ case    7:  		/* mr R5, R27 */
		/* 8222C738h case    7:*/		regs.R5 = regs.R27;
		/* 8222C738h case    7:*/		return 0x8222C73C;
		  /* 8222C73Ch */ case    8:  		/* mr R3, R28 */
		/* 8222C73Ch case    8:*/		regs.R3 = regs.R28;
		/* 8222C73Ch case    8:*/		return 0x8222C740;
		  /* 8222C740h */ case    9:  		/* bl 8496 */
		/* 8222C740h case    9:*/		regs.LR = 0x8222C744; return 0x8222E870;
		/* 8222C740h case    9:*/		return 0x8222C744;
	}
	return 0x8222C744;
} // Block from 8222C71Ch-8222C744h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222C744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C744);
		  /* 8222C744h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 8222C744h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222C744h case    0:*/		return 0x8222C748;
		  /* 8222C748h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222C748h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C748h case    1:*/		return 0x8222C74C;
		  /* 8222C74Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8222C74Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C760;  }
		/* 8222C74Ch case    2:*/		return 0x8222C750;
	}
	return 0x8222C750;
} // Block from 8222C744h-8222C750h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C750h
// Function '?CanReorderAdjacentWorker@Compiler@D3DXShader@@QAA_NPAVInstruction@2@0_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C750);
		  /* 8222C750h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222C750h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222C750h case    0:*/		return 0x8222C754;
		  /* 8222C754h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222C754h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C754h case    1:*/		return 0x8222C758;
		  /* 8222C758h */ case    2:  		/* mr R11, R26 */
		/* 8222C758h case    2:*/		regs.R11 = regs.R26;
		/* 8222C758h case    2:*/		return 0x8222C75C;
		  /* 8222C75Ch */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 8222C75Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8222C764;  }
		/* 8222C75Ch case    3:*/		return 0x8222C760;
	}
	return 0x8222C760;
} // Block from 8222C750h-8222C760h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222C760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C760);
		  /* 8222C760h */ case    0:  		/* li R11, 0 */
		/* 8222C760h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222C760h case    0:*/		return 0x8222C764;
	}
	return 0x8222C764;
} // Block from 8222C760h-8222C764h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222C764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C764);
		  /* 8222C764h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222C764h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222C764h case    0:*/		return 0x8222C768;
		  /* 8222C768h */ case    1:  		/* bc 12, CR0_EQ, 80 */
		/* 8222C768h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222C7B8;  }
		/* 8222C768h case    1:*/		return 0x8222C76C;
		  /* 8222C76Ch */ case    2:  		/* mr R4, R29 */
		/* 8222C76Ch case    2:*/		regs.R4 = regs.R29;
		/* 8222C76Ch case    2:*/		return 0x8222C770;
		  /* 8222C770h */ case    3:  		/* mr R3, R28 */
		/* 8222C770h case    3:*/		regs.R3 = regs.R28;
		/* 8222C770h case    3:*/		return 0x8222C774;
		  /* 8222C774h */ case    4:  		/* bl -737028 */
		/* 8222C774h case    4:*/		regs.LR = 0x8222C778; return 0x82178870;
		/* 8222C774h case    4:*/		return 0x8222C778;
		  /* 8222C778h */ case    5:  		/* lwz R10, <#[R3 + 8]> */
		/* 8222C778h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8222C778h case    5:*/		return 0x8222C77C;
		  /* 8222C77Ch */ case    6:  		/* mr R4, R3 */
		/* 8222C77Ch case    6:*/		regs.R4 = regs.R3;
		/* 8222C77Ch case    6:*/		return 0x8222C780;
		  /* 8222C780h */ case    7:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8222C780h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8222C780h case    7:*/		return 0x8222C784;
		  /* 8222C784h */ case    8:  		/* cmplwi CR6, R11, 86 */
		/* 8222C784h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8222C784h case    8:*/		return 0x8222C788;
		  /* 8222C788h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8222C788h case    9:*/		if ( regs.CR[6].eq ) { return 0x8222C798;  }
		/* 8222C788h case    9:*/		return 0x8222C78C;
		  /* 8222C78Ch */ case   10:  		/* cmplwi CR6, R11, 87 */
		/* 8222C78Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8222C78Ch case   10:*/		return 0x8222C790;
		  /* 8222C790h */ case   11:  		/* li R11, 0 */
		/* 8222C790h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222C790h case   11:*/		return 0x8222C794;
		  /* 8222C794h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 8222C794h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8222C79C;  }
		/* 8222C794h case   12:*/		return 0x8222C798;
	}
	return 0x8222C798;
} // Block from 8222C764h-8222C798h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222C798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C798);
		  /* 8222C798h */ case    0:  		/* mr R11, R26 */
		/* 8222C798h case    0:*/		regs.R11 = regs.R26;
		/* 8222C798h case    0:*/		return 0x8222C79C;
	}
	return 0x8222C79C;
} // Block from 8222C798h-8222C79Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222C79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C79C);
		  /* 8222C79Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222C79Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222C79Ch case    0:*/		return 0x8222C7A0;
		  /* 8222C7A0h */ case    1:  		/* bc 4, CR0_EQ, 24 */
		/* 8222C7A0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222C7B8;  }
		/* 8222C7A0h case    1:*/		return 0x8222C7A4;
		  /* 8222C7A4h */ case    2:  		/* rlwinm. R11, R10, 6, 31, 31 */
		/* 8222C7A4h case    2:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R10);
		/* 8222C7A4h case    2:*/		return 0x8222C7A8;
		  /* 8222C7A8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8222C7A8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222C7B8;  }
		/* 8222C7A8h case    3:*/		return 0x8222C7AC;
		  /* 8222C7ACh */ case    4:  		/* mr R5, R27 */
		/* 8222C7ACh case    4:*/		regs.R5 = regs.R27;
		/* 8222C7ACh case    4:*/		return 0x8222C7B0;
		  /* 8222C7B0h */ case    5:  		/* mr R3, R28 */
		/* 8222C7B0h case    5:*/		regs.R3 = regs.R28;
		/* 8222C7B0h case    5:*/		return 0x8222C7B4;
		  /* 8222C7B4h */ case    6:  		/* bl 8380 */
		/* 8222C7B4h case    6:*/		regs.LR = 0x8222C7B8; return 0x8222E870;
		/* 8222C7B4h case    6:*/		return 0x8222C7B8;
	}
	return 0x8222C7B8;
} // Block from 8222C79Ch-8222C7B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222C7B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C7B8);
		  /* 8222C7B8h */ case    0:  		/* lwz R11, <#[R30 + 52]> */
		/* 8222C7B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8222C7B8h case    0:*/		return 0x8222C7BC;
		  /* 8222C7BCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222C7BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C7BCh case    1:*/		return 0x8222C7C0;
		  /* 8222C7C0h */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 8222C7C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C804;  }
		/* 8222C7C0h case    2:*/		return 0x8222C7C4;
		  /* 8222C7C4h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222C7C4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222C7C4h case    3:*/		return 0x8222C7C8;
		  /* 8222C7C8h */ case    4:  		/* lwz R9, <#[R29 + 40]> */
		/* 8222C7C8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000028) );
		/* 8222C7C8h case    4:*/		return 0x8222C7CC;
		  /* 8222C7CCh */ case    5:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 8222C7CCh case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 8222C7CCh case    5:*/		return 0x8222C7D0;
		  /* 8222C7D0h */ case    6:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 8222C7D0h case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 8222C7D0h case    6:*/		return 0x8222C7D4;
		  /* 8222C7D4h */ case    7:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8222C7D4h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8222C7D4h case    7:*/		return 0x8222C7D8;
		  /* 8222C7D8h */ case    8:  		/* addi R10, R10, 1 */
		/* 8222C7D8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222C7D8h case    8:*/		return 0x8222C7DC;
		  /* 8222C7DCh */ case    9:  		/* slw R8, R26, R8 */
		/* 8222C7DCh case    9:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R26,regs.R8);
		/* 8222C7DCh case    9:*/		return 0x8222C7E0;
		  /* 8222C7E0h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222C7E0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222C7E0h case   10:*/		return 0x8222C7E4;
		  /* 8222C7E4h */ case   11:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8222C7E4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8222C7E4h case   11:*/		return 0x8222C7E8;
		  /* 8222C7E8h */ case   12:  		/* and. R10, R10, R8 */
		/* 8222C7E8h case   12:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8222C7E8h case   12:*/		return 0x8222C7EC;
		  /* 8222C7ECh */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 8222C7ECh case   13:*/		if ( regs.CR[0].eq ) { return 0x8222C7F4;  }
		/* 8222C7ECh case   13:*/		return 0x8222C7F0;
		  /* 8222C7F0h */ case   14:  		/* mr R11, R29 */
		/* 8222C7F0h case   14:*/		regs.R11 = regs.R29;
		/* 8222C7F0h case   14:*/		return 0x8222C7F4;
	}
	return 0x8222C7F4;
} // Block from 8222C7B8h-8222C7F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8222C7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C7F4);
		  /* 8222C7F4h */ case    0:  		/* lwz R29, <#[R11 + 64]> */
		/* 8222C7F4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000040) );
		/* 8222C7F4h case    0:*/		return 0x8222C7F8;
		  /* 8222C7F8h */ case    1:  		/* mr R30, R11 */
		/* 8222C7F8h case    1:*/		regs.R30 = regs.R11;
		/* 8222C7F8h case    1:*/		return 0x8222C7FC;
		  /* 8222C7FCh */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8222C7FCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222C7FCh case    2:*/		return 0x8222C800;
		  /* 8222C800h */ case    3:  		/* bc 4, CR6_EQ, -668 */
		/* 8222C800h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8222C564;  }
		/* 8222C800h case    3:*/		return 0x8222C804;
	}
	return 0x8222C804;
} // Block from 8222C7F4h-8222C804h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222C804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C804);
		  /* 8222C804h */ case    0:  		/* addi R1, R1, 144 */
		/* 8222C804h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8222C804h case    0:*/		return 0x8222C808;
		  /* 8222C808h */ case    1:  		/* b -1684844 */
		/* 8222C808h case    1:*/		return 0x8209129C;
		/* 8222C808h case    1:*/		return 0x8222C80C;
		  /* 8222C80Ch */ case    2:  		/* nop */
		/* 8222C80Ch case    2:*/		cpu::op::nop();
		/* 8222C80Ch case    2:*/		return 0x8222C810;
	}
	return 0x8222C810;
} // Block from 8222C804h-8222C810h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222C810h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C810);
		  /* 8222C810h */ case    0:  		/* mfspr R12, LR */
		/* 8222C810h case    0:*/		regs.R12 = regs.LR;
		/* 8222C810h case    0:*/		return 0x8222C814;
		  /* 8222C814h */ case    1:  		/* bl -1684956 */
		/* 8222C814h case    1:*/		regs.LR = 0x8222C818; return 0x82091238;
		/* 8222C814h case    1:*/		return 0x8222C818;
		  /* 8222C818h */ case    2:  		/* stfd FR30, <#[R1 - 120]> */
		/* 8222C818h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 8222C818h case    2:*/		return 0x8222C81C;
		  /* 8222C81Ch */ case    3:  		/* stfd FR31, <#[R1 - 112]> */
		/* 8222C81Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 8222C81Ch case    3:*/		return 0x8222C820;
		  /* 8222C820h */ case    4:  		/* stwu R1, <#[R1 - 256]> */
		/* 8222C820h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8222C820h case    4:*/		return 0x8222C824;
		  /* 8222C824h */ case    5:  		/* mr R25, R4 */
		/* 8222C824h case    5:*/		regs.R25 = regs.R4;
		/* 8222C824h case    5:*/		return 0x8222C828;
		  /* 8222C828h */ case    6:  		/* fmr FR31, FR1 */
		/* 8222C828h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8222C828h case    6:*/		return 0x8222C82C;
		  /* 8222C82Ch */ case    7:  		/* mr R22, R3 */
		/* 8222C82Ch case    7:*/		regs.R22 = regs.R3;
		/* 8222C82Ch case    7:*/		return 0x8222C830;
		  /* 8222C830h */ case    8:  		/* addi R5, R1, 80 */
		/* 8222C830h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8222C830h case    8:*/		return 0x8222C834;
		  /* 8222C834h */ case    9:  		/* addi R4, R1, 96 */
		/* 8222C834h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8222C834h case    9:*/		return 0x8222C838;
		  /* 8222C838h */ case   10:  		/* mr R3, R25 */
		/* 8222C838h case   10:*/		regs.R3 = regs.R25;
		/* 8222C838h case   10:*/		return 0x8222C83C;
		  /* 8222C83Ch */ case   11:  		/* mr R27, R6 */
		/* 8222C83Ch case   11:*/		regs.R27 = regs.R6;
		/* 8222C83Ch case   11:*/		return 0x8222C840;
		  /* 8222C840h */ case   12:  		/* mr R26, R7 */
		/* 8222C840h case   12:*/		regs.R26 = regs.R7;
		/* 8222C840h case   12:*/		return 0x8222C844;
		  /* 8222C844h */ case   13:  		/* bl -21508 */
		/* 8222C844h case   13:*/		regs.LR = 0x8222C848; return 0x82227440;
		/* 8222C844h case   13:*/		return 0x8222C848;
		  /* 8222C848h */ case   14:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222C848h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222C848h case   14:*/		return 0x8222C84C;
		  /* 8222C84Ch */ case   15:  		/* li R20, 1 */
		/* 8222C84Ch case   15:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8222C84Ch case   15:*/		return 0x8222C850;
		  /* 8222C850h */ case   16:  		/* rlwinm R11, R11, 31, 1, 31 */
		/* 8222C850h case   16:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R11);
		/* 8222C850h case   16:*/		return 0x8222C854;
		  /* 8222C854h */ case   17:  		/* and R11, R11, R3 */
		/* 8222C854h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8222C854h case   17:*/		return 0x8222C858;
		  /* 8222C858h */ case   18:  		/* rlwinm. R28, R11, 0, 28, 31 */
		/* 8222C858h case   18:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R28,regs.R11);
		/* 8222C858h case   18:*/		return 0x8222C85C;
		  /* 8222C85Ch */ case   19:  		/* bc 12, CR0_EQ, 128 */
		/* 8222C85Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x8222C8DC;  }
		/* 8222C85Ch case   19:*/		return 0x8222C860;
		  /* 8222C860h */ case   20:  		/* li R29, 0 */
		/* 8222C860h case   20:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8222C860h case   20:*/		return 0x8222C864;
		  /* 8222C864h */ case   21:  		/* li R31, 0 */
		/* 8222C864h case   21:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8222C864h case   21:*/		return 0x8222C868;
		  /* 8222C868h */ case   22:  		/* addi R30, R1, 96 */
		/* 8222C868h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x60);
		/* 8222C868h case   22:*/		return 0x8222C86C;
		  /* 8222C86Ch */ case   23:  		/* slw R11, R20, R29 */
		/* 8222C86Ch case   23:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R29);
		/* 8222C86Ch case   23:*/		return 0x8222C870;
		  /* 8222C870h */ case   24:  		/* and. R11, R11, R28 */
		/* 8222C870h case   24:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R28);
		/* 8222C870h case   24:*/		return 0x8222C874;
		  /* 8222C874h */ case   25:  		/* bc 12, CR0_EQ, 84 */
		/* 8222C874h case   25:*/		if ( regs.CR[0].eq ) { return 0x8222C8C8;  }
		/* 8222C874h case   25:*/		return 0x8222C878;
		  /* 8222C878h */ case   26:  		/* addi R11, R31, 1 */
		/* 8222C878h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 8222C878h case   26:*/		return 0x8222C87C;
		  /* 8222C87Ch */ case   27:  		/* lfd FR1, <#[R30]> */
		/* 8222C87Ch case   27:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 8222C87Ch case   27:*/		return 0x8222C880;
		  /* 8222C880h */ case   28:  		/* li R10, 2 */
		/* 8222C880h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8222C880h case   28:*/		return 0x8222C884;
		  /* 8222C884h */ case   29:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8222C884h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8222C884h case   29:*/		return 0x8222C888;
		  /* 8222C888h */ case   30:  		/* rlwinm R9, R31, 29, 3, 29 */
		/* 8222C888h case   30:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R31);
		/* 8222C888h case   30:*/		return 0x8222C88C;
		  /* 8222C88Ch */ case   31:  		/* addi R8, R1, 80 */
		/* 8222C88Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8222C88Ch case   31:*/		return 0x8222C890;
		  /* 8222C890h */ case   32:  		/* slw R11, R10, R11 */
		/* 8222C890h case   32:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8222C890h case   32:*/		return 0x8222C894;
		  /* 8222C894h */ case   33:  		/* lwzx R10, <#[R9 + R8]> */
		/* 8222C894h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8222C894h case   33:*/		return 0x8222C898;
		  /* 8222C898h */ case   34:  		/* addi R11, R11, -1 */
		/* 8222C898h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222C898h case   34:*/		return 0x8222C89C;
		  /* 8222C89Ch */ case   35:  		/* rlwinm R9, R31, 0, 27, 31 */
		/* 8222C89Ch case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R31);
		/* 8222C89Ch case   35:*/		return 0x8222C8A0;
		  /* 8222C8A0h */ case   36:  		/* li R8, -1 */
		/* 8222C8A0h case   36:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 8222C8A0h case   36:*/		return 0x8222C8A4;
		  /* 8222C8A4h */ case   37:  		/* and R11, R11, R10 */
		/* 8222C8A4h case   37:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222C8A4h case   37:*/		return 0x8222C8A8;
		  /* 8222C8A8h */ case   38:  		/* slw R10, R8, R9 */
		/* 8222C8A8h case   38:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 8222C8A8h case   38:*/		return 0x8222C8AC;
		  /* 8222C8ACh */ case   39:  		/* and R11, R11, R10 */
		/* 8222C8ACh case   39:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222C8ACh case   39:*/		return 0x8222C8B0;
		  /* 8222C8B0h */ case   40:  		/* mr R5, R27 */
		/* 8222C8B0h case   40:*/		regs.R5 = regs.R27;
		/* 8222C8B0h case   40:*/		return 0x8222C8B4;
		  /* 8222C8B4h */ case   41:  		/* srw R4, R11, R9 */
		/* 8222C8B4h case   41:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R11,regs.R9);
		/* 8222C8B4h case   41:*/		return 0x8222C8B8;
		  /* 8222C8B8h */ case   42:  		/* bl -46144 */
		/* 8222C8B8h case   42:*/		regs.LR = 0x8222C8BC; return 0x82221478;
		/* 8222C8B8h case   42:*/		return 0x8222C8BC;
		  /* 8222C8BCh */ case   43:  		/* frsp FR0, FR1 */
		/* 8222C8BCh case   43:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 8222C8BCh case   43:*/		return 0x8222C8C0;
		  /* 8222C8C0h */ case   44:  		/* fcmpu CR6, FR0, FR31 */
		/* 8222C8C0h case   44:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 8222C8C0h case   44:*/		return 0x8222C8C4;
		  /* 8222C8C4h */ case   45:  		/* bc 12, CR6_EQ, 284 */
		/* 8222C8C4h case   45:*/		if ( regs.CR[6].eq ) { return 0x8222C9E0;  }
		/* 8222C8C4h case   45:*/		return 0x8222C8C8;
	}
	return 0x8222C8C8;
} // Block from 8222C810h-8222C8C8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8222C8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C8C8);
		  /* 8222C8C8h */ case    0:  		/* addi R31, R31, 2 */
		/* 8222C8C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 8222C8C8h case    0:*/		return 0x8222C8CC;
		  /* 8222C8CCh */ case    1:  		/* addi R29, R29, 1 */
		/* 8222C8CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8222C8CCh case    1:*/		return 0x8222C8D0;
		  /* 8222C8D0h */ case    2:  		/* addi R30, R30, 8 */
		/* 8222C8D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 8222C8D0h case    2:*/		return 0x8222C8D4;
		  /* 8222C8D4h */ case    3:  		/* cmplwi CR6, R31, 8 */
		/* 8222C8D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000008);
		/* 8222C8D4h case    3:*/		return 0x8222C8D8;
		  /* 8222C8D8h */ case    4:  		/* bc 12, CR6_LT, -108 */
		/* 8222C8D8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8222C86C;  }
		/* 8222C8D8h case    4:*/		return 0x8222C8DC;
	}
	return 0x8222C8DC;
} // Block from 8222C8C8h-8222C8DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222C8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C8DC);
		  /* 8222C8DCh */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 8222C8DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 8222C8DCh case    0:*/		return 0x8222C8E0;
		  /* 8222C8E0h */ case    1:  		/* bc 12, CR0_EQ, 2096 */
		/* 8222C8E0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222D110;  }
		/* 8222C8E0h case    1:*/		return 0x8222C8E4;
		  /* 8222C8E4h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8222C8E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8222C8E4h case    2:*/		return 0x8222C8E8;
		  /* 8222C8E8h */ case    3:  		/* bc 4, CR6_EQ, 2088 */
		/* 8222C8E8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8222D110;  }
		/* 8222C8E8h case    3:*/		return 0x8222C8EC;
		  /* 8222C8ECh */ case    4:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222C8ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222C8ECh case    4:*/		return 0x8222C8F0;
		  /* 8222C8F0h */ case    5:  		/* nor R10, R11, R11 */
		/* 8222C8F0h case    5:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 8222C8F0h case    5:*/		return 0x8222C8F4;
		  /* 8222C8F4h */ case    6:  		/* rlwinm. R29, R10, 31, 28, 31 */
		/* 8222C8F4h case    6:*/		cpu::op::rlwinm<1,31,28,31>(regs,&regs.R29,regs.R10);
		/* 8222C8F4h case    6:*/		return 0x8222C8F8;
		  /* 8222C8F8h */ case    7:  		/* bc 12, CR0_EQ, 2072 */
		/* 8222C8F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222D110;  }
		/* 8222C8F8h case    7:*/		return 0x8222C8FC;
		  /* 8222C8FCh */ case    8:  		/* lis R10, -32256 */
		/* 8222C8FCh case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8222C8FCh case    8:*/		return 0x8222C900;
		  /* 8222C900h */ case    9:  		/* lis R9, -32256 */
		/* 8222C900h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8222C900h case    9:*/		return 0x8222C904;
		  /* 8222C904h */ case   10:  		/* lfs FR0, <#[R10 + 1792]> */
		/* 8222C904h case   10:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000700) );
		/* 8222C904h case   10:*/		return 0x8222C908;
		  /* 8222C908h */ case   11:  		/* lfs FR30, <#[R9 + 1816]> */
		/* 8222C908h case   11:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R9 + 0x00000718) );
		/* 8222C908h case   11:*/		return 0x8222C90C;
		  /* 8222C90Ch */ case   12:  		/* fcmpu CR6, FR31, FR0 */
		/* 8222C90Ch case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 8222C90Ch case   12:*/		return 0x8222C910;
		  /* 8222C910h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 8222C910h case   13:*/		if ( regs.CR[6].eq ) { return 0x8222C91C;  }
		/* 8222C910h case   13:*/		return 0x8222C914;
		  /* 8222C914h */ case   14:  		/* fcmpu CR6, FR31, FR30 */
		/* 8222C914h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 8222C914h case   14:*/		return 0x8222C918;
		  /* 8222C918h */ case   15:  		/* bc 4, CR6_EQ, 24 */
		/* 8222C918h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8222C930;  }
		/* 8222C918h case   15:*/		return 0x8222C91C;
	}
	return 0x8222C91C;
} // Block from 8222C8DCh-8222C91Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8222C91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C91C);
		  /* 8222C91Ch */ case    0:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8222C91Ch case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8222C91Ch case    0:*/		return 0x8222C920;
		  /* 8222C920h */ case    1:  		/* cmplwi CR6, R10, 97 */
		/* 8222C920h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000061);
		/* 8222C920h case    1:*/		return 0x8222C924;
		  /* 8222C924h */ case    2:  		/* bc 12, CR6_EQ, 128 */
		/* 8222C924h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C9A4;  }
		/* 8222C924h case    2:*/		return 0x8222C928;
		  /* 8222C928h */ case    3:  		/* cmplwi CR6, R10, 96 */
		/* 8222C928h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000060);
		/* 8222C928h case    3:*/		return 0x8222C92C;
		  /* 8222C92Ch */ case    4:  		/* bc 12, CR6_EQ, 120 */
		/* 8222C92Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8222C9A4;  }
		/* 8222C92Ch case    4:*/		return 0x8222C930;
	}
	return 0x8222C930;
} // Block from 8222C91Ch-8222C930h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222C930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C930);
		  /* 8222C930h */ case    0:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8222C930h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8222C930h case    0:*/		return 0x8222C934;
		  /* 8222C934h */ case    1:  		/* cmplwi CR6, R10, 13 */
		/* 8222C934h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000D);
		/* 8222C934h case    1:*/		return 0x8222C938;
		  /* 8222C938h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8222C938h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C94C;  }
		/* 8222C938h case    2:*/		return 0x8222C93C;
		  /* 8222C93Ch */ case    3:  		/* cmplwi CR6, R10, 14 */
		/* 8222C93Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000E);
		/* 8222C93Ch case    3:*/		return 0x8222C940;
		  /* 8222C940h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 8222C940h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222C94C;  }
		/* 8222C940h case    4:*/		return 0x8222C944;
		  /* 8222C944h */ case    5:  		/* cmplwi CR6, R10, 15 */
		/* 8222C944h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000F);
		/* 8222C944h case    5:*/		return 0x8222C948;
		  /* 8222C948h */ case    6:  		/* bc 4, CR6_EQ, 1992 */
		/* 8222C948h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222D110;  }
		/* 8222C948h case    6:*/		return 0x8222C94C;
	}
	return 0x8222C94C;
} // Block from 8222C930h-8222C94Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222C94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C94C);
		  /* 8222C94Ch */ case    0:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8222C94Ch case    0:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C94Ch case    0:*/		return 0x8222C950;
		  /* 8222C950h */ case    1:  		/* bc 4, CR0_EQ, 1984 */
		/* 8222C950h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222D110;  }
		/* 8222C950h case    1:*/		return 0x8222C954;
		  /* 8222C954h */ case    2:  		/* lwz R10, <#[R25 + 48]> */
		/* 8222C954h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 8222C954h case    2:*/		return 0x8222C958;
		  /* 8222C958h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 8222C958h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8222C958h case    3:*/		return 0x8222C95C;
		  /* 8222C95Ch */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222C95Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222C95Ch case    4:*/		return 0x8222C960;
		  /* 8222C960h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222C960h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222C960h case    5:*/		return 0x8222C964;
		  /* 8222C964h */ case    6:  		/* cmplwi CR6, R11, 16000 */
		/* 8222C964h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 8222C964h case    6:*/		return 0x8222C968;
		  /* 8222C968h */ case    7:  		/* bc 4, CR6_EQ, 1960 */
		/* 8222C968h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8222D110;  }
		/* 8222C968h case    7:*/		return 0x8222C96C;
		  /* 8222C96Ch */ case    8:  		/* lwz R11, <#[R25 + 52]> */
		/* 8222C96Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000034) );
		/* 8222C96Ch case    8:*/		return 0x8222C970;
		  /* 8222C970h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 8222C970h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222C970h case    9:*/		return 0x8222C974;
		  /* 8222C974h */ case   10:  		/* lwz R9, <#[R9 + 8]> */
		/* 8222C974h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8222C974h case   10:*/		return 0x8222C978;
		  /* 8222C978h */ case   11:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 8222C978h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 8222C978h case   11:*/		return 0x8222C97C;
		  /* 8222C97Ch */ case   12:  		/* cmplwi CR6, R9, 16000 */
		/* 8222C97Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003E80);
		/* 8222C97Ch case   12:*/		return 0x8222C980;
		  /* 8222C980h */ case   13:  		/* bc 4, CR6_EQ, 1936 */
		/* 8222C980h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8222D110;  }
		/* 8222C980h case   13:*/		return 0x8222C984;
		  /* 8222C984h */ case   14:  		/* fcmpu CR6, FR31, FR30 */
		/* 8222C984h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 8222C984h case   14:*/		return 0x8222C988;
		  /* 8222C988h */ case   15:  		/* bc 4, CR6_LT, 28 */
		/* 8222C988h case   15:*/		if ( !regs.CR[6].lt ) { return 0x8222C9A4;  }
		/* 8222C988h case   15:*/		return 0x8222C98C;
		  /* 8222C98Ch */ case   16:  		/* lwz R10, <#[R10]> */
		/* 8222C98Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8222C98Ch case   16:*/		return 0x8222C990;
		  /* 8222C990h */ case   17:  		/* rlwinm. R10, R10, 31, 31, 31 */
		/* 8222C990h case   17:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R10,regs.R10);
		/* 8222C990h case   17:*/		return 0x8222C994;
		  /* 8222C994h */ case   18:  		/* bc 4, CR0_EQ, 1916 */
		/* 8222C994h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8222D110;  }
		/* 8222C994h case   18:*/		return 0x8222C998;
		  /* 8222C998h */ case   19:  		/* lwz R11, <#[R11]> */
		/* 8222C998h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C998h case   19:*/		return 0x8222C99C;
		  /* 8222C99Ch */ case   20:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 8222C99Ch case   20:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 8222C99Ch case   20:*/		return 0x8222C9A0;
		  /* 8222C9A0h */ case   21:  		/* bc 4, CR0_EQ, 1904 */
		/* 8222C9A0h case   21:*/		if ( !regs.CR[0].eq ) { return 0x8222D110;  }
		/* 8222C9A0h case   21:*/		return 0x8222C9A4;
	}
	return 0x8222C9A4;
} // Block from 8222C94Ch-8222C9A4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8222C9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C9A4);
		  /* 8222C9A4h */ case    0:  		/* lwz R11, <#[R25 + 4]> */
		/* 8222C9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 8222C9A4h case    0:*/		return 0x8222C9A8;
		  /* 8222C9A8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222C9A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222C9A8h case    1:*/		return 0x8222C9AC;
		  /* 8222C9ACh */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 8222C9ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x8222C9F0;  }
		/* 8222C9ACh case    2:*/		return 0x8222C9B0;
		  /* 8222C9B0h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 8222C9B0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8222C9B0h case    3:*/		return 0x8222C9B4;
		  /* 8222C9B4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8222C9B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222C9B4h case    4:*/		return 0x8222C9B8;
		  /* 8222C9B8h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8222C9B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222C9D8;  }
		/* 8222C9B8h case    5:*/		return 0x8222C9BC;
		  /* 8222C9BCh */ case    6:  		/* lwz R9, <#[R10 + 8]> */
		/* 8222C9BCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8222C9BCh case    6:*/		return 0x8222C9C0;
		  /* 8222C9C0h */ case    7:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 8222C9C0h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 8222C9C0h case    7:*/		return 0x8222C9C4;
		  /* 8222C9C4h */ case    8:  		/* cmplwi CR6, R9, 14080 */
		/* 8222C9C4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 8222C9C4h case    8:*/		return 0x8222C9C8;
		  /* 8222C9C8h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 8222C9C8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222C9D8;  }
		/* 8222C9C8h case    9:*/		return 0x8222C9CC;
		  /* 8222C9CCh */ case   10:  		/* lwz R9, <#[R11]> */
		/* 8222C9CCh case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222C9CCh case   10:*/		return 0x8222C9D0;
		  /* 8222C9D0h */ case   11:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 8222C9D0h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 8222C9D0h case   11:*/		return 0x8222C9D4;
		  /* 8222C9D4h */ case   12:  		/* bc 4, CR0_EQ, 20 */
		/* 8222C9D4h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8222C9E8;  }
		/* 8222C9D4h case   12:*/		return 0x8222C9D8;
	}
	return 0x8222C9D8;
} // Block from 8222C9A4h-8222C9D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222C9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C9D8);
		  /* 8222C9D8h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222C9D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222C9D8h case    0:*/		return 0x8222C9DC;
		  /* 8222C9DCh */ case    1:  		/* b -52 */
		/* 8222C9DCh case    1:*/		return 0x8222C9A8;
		/* 8222C9DCh case    1:*/		return 0x8222C9E0;
	}
	return 0x8222C9E0;
} // Block from 8222C9D8h-8222C9E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C9E0);
		  /* 8222C9E0h */ case    0:  		/* mr R3, R29 */
		/* 8222C9E0h case    0:*/		regs.R3 = regs.R29;
		/* 8222C9E0h case    0:*/		return 0x8222C9E4;
		  /* 8222C9E4h */ case    1:  		/* b 1840 */
		/* 8222C9E4h case    1:*/		return 0x8222D114;
		/* 8222C9E4h case    1:*/		return 0x8222C9E8;
	}
	return 0x8222C9E8;
} // Block from 8222C9E0h-8222C9E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C9E8);
		  /* 8222C9E8h */ case    0:  		/* mr R21, R10 */
		/* 8222C9E8h case    0:*/		regs.R21 = regs.R10;
		/* 8222C9E8h case    0:*/		return 0x8222C9EC;
		  /* 8222C9ECh */ case    1:  		/* b 8 */
		/* 8222C9ECh case    1:*/		return 0x8222C9F4;
		/* 8222C9ECh case    1:*/		return 0x8222C9F0;
	}
	return 0x8222C9F0;
} // Block from 8222C9E8h-8222C9F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222C9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C9F0);
		  /* 8222C9F0h */ case    0:  		/* li R21, 0 */
		/* 8222C9F0h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8222C9F0h case    0:*/		return 0x8222C9F4;
	}
	return 0x8222C9F4;
} // Block from 8222C9F0h-8222C9F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222C9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222C9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222C9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222C9F4);
		  /* 8222C9F4h */ case    0:  		/* li R24, 0 */
		/* 8222C9F4h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8222C9F4h case    0:*/		return 0x8222C9F8;
		  /* 8222C9F8h */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 8222C9F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8222C9F8h case    1:*/		return 0x8222C9FC;
		  /* 8222C9FCh */ case    2:  		/* bc 12, CR6_EQ, 156 */
		/* 8222C9FCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8222CA98;  }
		/* 8222C9FCh case    2:*/		return 0x8222CA00;
		  /* 8222CA00h */ case    3:  		/* li R30, 0 */
		/* 8222CA00h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8222CA00h case    3:*/		return 0x8222CA04;
		  /* 8222CA04h */ case    4:  		/* addi R31, R21, 44 */
		/* 8222CA04h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R21,0x2C);
		/* 8222CA04h case    4:*/		return 0x8222CA08;
		  /* 8222CA08h */ case    5:  		/* lwz R11, <#[R21 + 8]> */
		/* 8222CA08h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 8222CA08h case    5:*/		return 0x8222CA0C;
		  /* 8222CA0Ch */ case    6:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8222CA0Ch case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8222CA0Ch case    6:*/		return 0x8222CA10;
		  /* 8222CA10h */ case    7:  		/* cmplw CR6, R30, R11 */
		/* 8222CA10h case    7:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8222CA10h case    7:*/		return 0x8222CA14;
		  /* 8222CA14h */ case    8:  		/* bc 4, CR6_LT, 96 */
		/* 8222CA14h case    8:*/		if ( !regs.CR[6].lt ) { return 0x8222CA74;  }
		/* 8222CA14h case    8:*/		return 0x8222CA18;
		  /* 8222CA18h */ case    9:  		/* lwz R24, <#[R31]> */
		/* 8222CA18h case    9:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x00000000) );
		/* 8222CA18h case    9:*/		return 0x8222CA1C;
		  /* 8222CA1Ch */ case   10:  		/* li R10, 0 */
		/* 8222CA1Ch case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222CA1Ch case   10:*/		return 0x8222CA20;
		  /* 8222CA20h */ case   11:  		/* mr R9, R25 */
		/* 8222CA20h case   11:*/		regs.R9 = regs.R25;
		/* 8222CA20h case   11:*/		return 0x8222CA24;
		  /* 8222CA24h */ case   12:  		/* li R8, 0 */
		/* 8222CA24h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222CA24h case   12:*/		return 0x8222CA28;
		  /* 8222CA28h */ case   13:  		/* addi R7, R1, 84 */
		/* 8222CA28h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8222CA28h case   13:*/		return 0x8222CA2C;
		  /* 8222CA2Ch */ case   14:  		/* addi R6, R1, 88 */
		/* 8222CA2Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 8222CA2Ch case   14:*/		return 0x8222CA30;
		  /* 8222CA30h */ case   15:  		/* addi R5, R1, 80 */
		/* 8222CA30h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8222CA30h case   15:*/		return 0x8222CA34;
		  /* 8222CA34h */ case   16:  		/* li R4, 0 */
		/* 8222CA34h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222CA34h case   16:*/		return 0x8222CA38;
		  /* 8222CA38h */ case   17:  		/* mr R3, R24 */
		/* 8222CA38h case   17:*/		regs.R3 = regs.R24;
		/* 8222CA38h case   17:*/		return 0x8222CA3C;
		  /* 8222CA3Ch */ case   18:  		/* bl -38252 */
		/* 8222CA3Ch case   18:*/		regs.LR = 0x8222CA40; return 0x822234D0;
		/* 8222CA3Ch case   18:*/		return 0x8222CA40;
		  /* 8222CA40h */ case   19:  		/* lwz R3, <#[R1 + 80]> */
		/* 8222CA40h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8222CA40h case   19:*/		return 0x8222CA44;
		  /* 8222CA44h */ case   20:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222CA44h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222CA44h case   20:*/		return 0x8222CA48;
		  /* 8222CA48h */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222CA48h case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222CA48h case   21:*/		return 0x8222CA4C;
		  /* 8222CA4Ch */ case   22:  		/* cmplwi CR6, R11, 16000 */
		/* 8222CA4Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 8222CA4Ch case   22:*/		return 0x8222CA50;
		  /* 8222CA50h */ case   23:  		/* bc 4, CR6_EQ, 24 */
		/* 8222CA50h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8222CA68;  }
		/* 8222CA50h case   23:*/		return 0x8222CA54;
		  /* 8222CA54h */ case   24:  		/* lwz R5, <#[R1 + 84]> */
		/* 8222CA54h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 8222CA54h case   24:*/		return 0x8222CA58;
		  /* 8222CA58h */ case   25:  		/* lwz R4, <#[R1 + 88]> */
		/* 8222CA58h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8222CA58h case   25:*/		return 0x8222CA5C;
		  /* 8222CA5Ch */ case   26:  		/* bl -46012 */
		/* 8222CA5Ch case   26:*/		regs.LR = 0x8222CA60; return 0x822216A0;
		/* 8222CA5Ch case   26:*/		return 0x8222CA60;
		  /* 8222CA60h */ case   27:  		/* fcmpu CR6, FR31, FR1 */
		/* 8222CA60h case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR1);
		/* 8222CA60h case   27:*/		return 0x8222CA64;
		  /* 8222CA64h */ case   28:  		/* bc 12, CR6_EQ, 24 */
		/* 8222CA64h case   28:*/		if ( regs.CR[6].eq ) { return 0x8222CA7C;  }
		/* 8222CA64h case   28:*/		return 0x8222CA68;
	}
	return 0x8222CA68;
} // Block from 8222C9F4h-8222CA68h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8222CA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CA68);
		  /* 8222CA68h */ case    0:  		/* addi R30, R30, 1 */
		/* 8222CA68h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8222CA68h case    0:*/		return 0x8222CA6C;
		  /* 8222CA6Ch */ case    1:  		/* addi R31, R31, 4 */
		/* 8222CA6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8222CA6Ch case    1:*/		return 0x8222CA70;
	}
	return 0x8222CA70;
} // Block from 8222CA68h-8222CA70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222CA70h
// Function '?ReorderAdjacentWorker@Compiler@D3DXShader@@QAAXPAVInstruction@2@0_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CA70);
		  /* 8222CA70h */ case    0:  		/* b -104 */
		/* 8222CA70h case    0:*/		return 0x8222CA08;
		/* 8222CA70h case    0:*/		return 0x8222CA74;
	}
	return 0x8222CA74;
} // Block from 8222CA70h-8222CA74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222CA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CA74);
		  /* 8222CA74h */ case    0:  		/* li R24, 0 */
		/* 8222CA74h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8222CA74h case    0:*/		return 0x8222CA78;
		  /* 8222CA78h */ case    1:  		/* b 12 */
		/* 8222CA78h case    1:*/		return 0x8222CA84;
		/* 8222CA78h case    1:*/		return 0x8222CA7C;
	}
	return 0x8222CA7C;
} // Block from 8222CA74h-8222CA7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222CA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CA7C);
		  /* 8222CA7Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8222CA7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8222CA7Ch case    0:*/		return 0x8222CA80;
		  /* 8222CA80h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8222CA80h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222CA98;  }
		/* 8222CA80h case    1:*/		return 0x8222CA84;
	}
	return 0x8222CA84;
} // Block from 8222CA7Ch-8222CA84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222CA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CA84);
		  /* 8222CA84h */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 8222CA84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 8222CA84h case    0:*/		return 0x8222CA88;
		  /* 8222CA88h */ case    1:  		/* lis R10, 32 */
		/* 8222CA88h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x20);
		/* 8222CA88h case    1:*/		return 0x8222CA8C;
		  /* 8222CA8Ch */ case    2:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 8222CA8Ch case    2:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 8222CA8Ch case    2:*/		return 0x8222CA90;
		  /* 8222CA90h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8222CA90h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222CA90h case    3:*/		return 0x8222CA94;
		  /* 8222CA94h */ case    4:  		/* bc 12, CR6_EQ, 1660 */
		/* 8222CA94h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222D110;  }
		/* 8222CA94h case    4:*/		return 0x8222CA98;
	}
	return 0x8222CA98;
} // Block from 8222CA84h-8222CA98h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222CA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CA98);
		  /* 8222CA98h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222CA98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222CA98h case    0:*/		return 0x8222CA9C;
		  /* 8222CA9Ch */ case    1:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8222CA9Ch case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8222CA9Ch case    1:*/		return 0x8222CAA0;
		  /* 8222CAA0h */ case    2:  		/* cmplwi CR6, R4, 97 */
		/* 8222CAA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 8222CAA0h case    2:*/		return 0x8222CAA4;
		  /* 8222CAA4h */ case    3:  		/* bc 12, CR6_EQ, 544 */
		/* 8222CAA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222CCC4;  }
		/* 8222CAA4h case    3:*/		return 0x8222CAA8;
		  /* 8222CAA8h */ case    4:  		/* cmplwi CR6, R4, 96 */
		/* 8222CAA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000060);
		/* 8222CAA8h case    4:*/		return 0x8222CAAC;
		  /* 8222CAACh */ case    5:  		/* bc 12, CR6_EQ, 536 */
		/* 8222CAACh case    5:*/		if ( regs.CR[6].eq ) { return 0x8222CCC4;  }
		/* 8222CAACh case    5:*/		return 0x8222CAB0;
		  /* 8222CAB0h */ case    6:  		/* addi R10, R29, -1 */
		/* 8222CAB0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFFF);
		/* 8222CAB0h case    6:*/		return 0x8222CAB4;
		  /* 8222CAB4h */ case    7:  		/* andc R10, R29, R10 */
		/* 8222CAB4h case    7:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 8222CAB4h case    7:*/		return 0x8222CAB8;
		  /* 8222CAB8h */ case    8:  		/* cntlzw R10, R10 */
		/* 8222CAB8h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8222CAB8h case    8:*/		return 0x8222CABC;
		  /* 8222CABCh */ case    9:  		/* subfic R23, R10, 31 */
		/* 8222CABCh case    9:*/		cpu::op::subfic<0>(regs,&regs.R23,regs.R10,0x1F);
		/* 8222CABCh case    9:*/		return 0x8222CAC0;
		  /* 8222CAC0h */ case   10:  		/* slw R10, R20, R23 */
		/* 8222CAC0h case   10:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R20,regs.R23);
		/* 8222CAC0h case   10:*/		return 0x8222CAC4;
		  /* 8222CAC4h */ case   11:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8222CAC4h case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8222CAC4h case   11:*/		return 0x8222CAC8;
		  /* 8222CAC8h */ case   12:  		/* or R10, R10, R11 */
		/* 8222CAC8h case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8222CAC8h case   12:*/		return 0x8222CACC;
		  /* 8222CACCh */ case   13:  		/* rlwimi R10, R11, 0, 31, 26 */
		/* 8222CACCh case   13:*/		cpu::op::rlwimi<0,0,31,26>(regs,&regs.R10,regs.R11);
		/* 8222CACCh case   13:*/		return 0x8222CAD0;
		  /* 8222CAD0h */ case   14:  		/* rlwinm R11, R10, 0, 0, 17 */
		/* 8222CAD0h case   14:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R11,regs.R10);
		/* 8222CAD0h case   14:*/		return 0x8222CAD4;
		  /* 8222CAD4h */ case   15:  		/* addi R11, R11, 16384 */
		/* 8222CAD4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 8222CAD4h case   15:*/		return 0x8222CAD8;
		  /* 8222CAD8h */ case   16:  		/* rlwimi R11, R10, 0, 18, 14 */
		/* 8222CAD8h case   16:*/		cpu::op::rlwimi<0,0,18,14>(regs,&regs.R11,regs.R10);
		/* 8222CAD8h case   16:*/		return 0x8222CADC;
		  /* 8222CADCh */ case   17:  		/* stw R11, <#[R25 + 8]> */
		/* 8222CADCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222CADCh case   17:*/		return 0x8222CAE0;
		  /* 8222CAE0h */ case   18:  		/* lwz R11, <#[R25 + 44]> */
		/* 8222CAE0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 8222CAE0h case   18:*/		return 0x8222CAE4;
		  /* 8222CAE4h */ case   19:  		/* lwz R31, <#[R25 + 48]> */
		/* 8222CAE4h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000030) );
		/* 8222CAE4h case   19:*/		return 0x8222CAE8;
		  /* 8222CAE8h */ case   20:  		/* lwz R30, <#[R25 + 52]> */
		/* 8222CAE8h case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000034) );
		/* 8222CAE8h case   20:*/		return 0x8222CAEC;
		  /* 8222CAECh */ case   21:  		/* lwz R10, <#[R11]> */
		/* 8222CAECh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CAECh case   21:*/		return 0x8222CAF0;
		  /* 8222CAF0h */ case   22:  		/* rlwinm R9, R10, 7, 29, 31 */
		/* 8222CAF0h case   22:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R10);
		/* 8222CAF0h case   22:*/		return 0x8222CAF4;
		  /* 8222CAF4h */ case   23:  		/* cmplw CR6, R23, R9 */
		/* 8222CAF4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R9);
		/* 8222CAF4h case   23:*/		return 0x8222CAF8;
		  /* 8222CAF8h */ case   24:  		/* bc 12, CR6_LT, 64 */
		/* 8222CAF8h case   24:*/		if ( regs.CR[6].lt ) { return 0x8222CB38;  }
		/* 8222CAF8h case   24:*/		return 0x8222CAFC;
		  /* 8222CAFCh */ case   25:  		/* lis R9, 512 */
		/* 8222CAFCh case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0x200);
		/* 8222CAFCh case   25:*/		return 0x8222CB00;
		  /* 8222CB00h */ case   26:  		/* rlwinm R8, R10, 0, 0, 6 */
		/* 8222CB00h case   26:*/		cpu::op::rlwinm<0,0,0,6>(regs,&regs.R8,regs.R10);
		/* 8222CB00h case   26:*/		return 0x8222CB04;
		  /* 8222CB04h */ case   27:  		/* add R8, R8, R9 */
		/* 8222CB04h case   27:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 8222CB04h case   27:*/		return 0x8222CB08;
		  /* 8222CB08h */ case   28:  		/* rlwimi R8, R10, 0, 7, 3 */
		/* 8222CB08h case   28:*/		cpu::op::rlwimi<0,0,7,3>(regs,&regs.R8,regs.R10);
		/* 8222CB08h case   28:*/		return 0x8222CB0C;
		  /* 8222CB0Ch */ case   29:  		/* stw R8, <#[R11]> */
		/* 8222CB0Ch case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CB0Ch case   29:*/		return 0x8222CB10;
		  /* 8222CB10h */ case   30:  		/* lwz R10, <#[R31]> */
		/* 8222CB10h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222CB10h case   30:*/		return 0x8222CB14;
		  /* 8222CB14h */ case   31:  		/* rlwinm R8, R10, 0, 0, 6 */
		/* 8222CB14h case   31:*/		cpu::op::rlwinm<0,0,0,6>(regs,&regs.R8,regs.R10);
		/* 8222CB14h case   31:*/		return 0x8222CB18;
		  /* 8222CB18h */ case   32:  		/* add R8, R8, R9 */
		/* 8222CB18h case   32:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 8222CB18h case   32:*/		return 0x8222CB1C;
		  /* 8222CB1Ch */ case   33:  		/* rlwimi R8, R10, 0, 7, 3 */
		/* 8222CB1Ch case   33:*/		cpu::op::rlwimi<0,0,7,3>(regs,&regs.R8,regs.R10);
		/* 8222CB1Ch case   33:*/		return 0x8222CB20;
		  /* 8222CB20h */ case   34:  		/* stw R8, <#[R31]> */
		/* 8222CB20h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8222CB20h case   34:*/		return 0x8222CB24;
		  /* 8222CB24h */ case   35:  		/* lwz R10, <#[R30]> */
		/* 8222CB24h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8222CB24h case   35:*/		return 0x8222CB28;
		  /* 8222CB28h */ case   36:  		/* rlwinm R8, R10, 0, 0, 6 */
		/* 8222CB28h case   36:*/		cpu::op::rlwinm<0,0,0,6>(regs,&regs.R8,regs.R10);
		/* 8222CB28h case   36:*/		return 0x8222CB2C;
		  /* 8222CB2Ch */ case   37:  		/* add R9, R8, R9 */
		/* 8222CB2Ch case   37:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8222CB2Ch case   37:*/		return 0x8222CB30;
		  /* 8222CB30h */ case   38:  		/* rlwimi R9, R10, 0, 7, 3 */
		/* 8222CB30h case   38:*/		cpu::op::rlwimi<0,0,7,3>(regs,&regs.R9,regs.R10);
		/* 8222CB30h case   38:*/		return 0x8222CB34;
		  /* 8222CB34h */ case   39:  		/* stw R9, <#[R30]> */
		/* 8222CB34h case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8222CB34h case   39:*/		return 0x8222CB38;
	}
	return 0x8222CB38;
} // Block from 8222CA98h-8222CB38h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8222CB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CB38);
		  /* 8222CB38h */ case    0:  		/* nor R10, R29, R29 */
		/* 8222CB38h case    0:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R29,regs.R29);
		/* 8222CB38h case    0:*/		return 0x8222CB3C;
		  /* 8222CB3Ch */ case    1:  		/* lwz R9, <#[R11]> */
		/* 8222CB3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CB3Ch case    1:*/		return 0x8222CB40;
		  /* 8222CB40h */ case    2:  		/* rlwinm R8, R23, 1, 0, 30 */
		/* 8222CB40h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R23);
		/* 8222CB40h case    2:*/		return 0x8222CB44;
		  /* 8222CB44h */ case    3:  		/* addi R7, R10, -1 */
		/* 8222CB44h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFFF);
		/* 8222CB44h case    3:*/		return 0x8222CB48;
		  /* 8222CB48h */ case    4:  		/* rlwinm R6, R9, 27, 24, 31 */
		/* 8222CB48h case    4:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R9);
		/* 8222CB48h case    4:*/		return 0x8222CB4C;
		  /* 8222CB4Ch */ case    5:  		/* andc R10, R10, R7 */
		/* 8222CB4Ch case    5:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8222CB4Ch case    5:*/		return 0x8222CB50;
		  /* 8222CB50h */ case    6:  		/* li R7, 3 */
		/* 8222CB50h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8222CB50h case    6:*/		return 0x8222CB54;
		  /* 8222CB54h */ case    7:  		/* cntlzw R10, R10 */
		/* 8222CB54h case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8222CB54h case    7:*/		return 0x8222CB58;
		  /* 8222CB58h */ case    8:  		/* slw R7, R7, R8 */
		/* 8222CB58h case    8:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R8);
		/* 8222CB58h case    8:*/		return 0x8222CB5C;
		  /* 8222CB5Ch */ case    9:  		/* subfic R10, R10, 31 */
		/* 8222CB5Ch case    9:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8222CB5Ch case    9:*/		return 0x8222CB60;
		  /* 8222CB60h */ case   10:  		/* nor R7, R7, R7 */
		/* 8222CB60h case   10:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R7,regs.R7);
		/* 8222CB60h case   10:*/		return 0x8222CB64;
		  /* 8222CB64h */ case   11:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8222CB64h case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8222CB64h case   11:*/		return 0x8222CB68;
		  /* 8222CB68h */ case   12:  		/* rlwinm R7, R7, 5, 0, 26 */
		/* 8222CB68h case   12:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R7,regs.R7);
		/* 8222CB68h case   12:*/		return 0x8222CB6C;
		  /* 8222CB6Ch */ case   13:  		/* srw R10, R6, R10 */
		/* 8222CB6Ch case   13:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 8222CB6Ch case   13:*/		return 0x8222CB70;
		  /* 8222CB70h */ case   14:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 8222CB70h case   14:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 8222CB70h case   14:*/		return 0x8222CB74;
		  /* 8222CB74h */ case   15:  		/* and R7, R7, R9 */
		/* 8222CB74h case   15:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 8222CB74h case   15:*/		return 0x8222CB78;
		  /* 8222CB78h */ case   16:  		/* slw R10, R10, R8 */
		/* 8222CB78h case   16:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8222CB78h case   16:*/		return 0x8222CB7C;
		  /* 8222CB7Ch */ case   17:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 8222CB7Ch case   17:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 8222CB7Ch case   17:*/		return 0x8222CB80;
		  /* 8222CB80h */ case   18:  		/* addi R8, R1, 88 */
		/* 8222CB80h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 8222CB80h case   18:*/		return 0x8222CB84;
		  /* 8222CB84h */ case   19:  		/* or R10, R10, R7 */
		/* 8222CB84h case   19:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8222CB84h case   19:*/		return 0x8222CB88;
		  /* 8222CB88h */ case   20:  		/* li R7, 0 */
		/* 8222CB88h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8222CB88h case   20:*/		return 0x8222CB8C;
		  /* 8222CB8Ch */ case   21:  		/* rlwimi R10, R9, 0, 27, 18 */
		/* 8222CB8Ch case   21:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R10,regs.R9);
		/* 8222CB8Ch case   21:*/		return 0x8222CB90;
		  /* 8222CB90h */ case   22:  		/* addi R4, R1, 96 */
		/* 8222CB90h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8222CB90h case   22:*/		return 0x8222CB94;
		  /* 8222CB94h */ case   23:  		/* stw R10, <#[R11]> */
		/* 8222CB94h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CB94h case   23:*/		return 0x8222CB98;
		  /* 8222CB98h */ case   24:  		/* mr R3, R31 */
		/* 8222CB98h case   24:*/		regs.R3 = regs.R31;
		/* 8222CB98h case   24:*/		return 0x8222CB9C;
		  /* 8222CB9Ch */ case   25:  		/* stw R7, <#[R8]> */
		/* 8222CB9Ch case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000000) );
		/* 8222CB9Ch case   25:*/		return 0x8222CBA0;
		  /* 8222CBA0h */ case   26:  		/* bl -580632 */
		/* 8222CBA0h case   26:*/		regs.LR = 0x8222CBA4; return 0x8219EF88;
		/* 8222CBA0h case   26:*/		return 0x8222CBA4;
		  /* 8222CBA4h */ case   27:  		/* rlwinm R28, R23, 3, 0, 28 */
		/* 8222CBA4h case   27:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R28,regs.R23);
		/* 8222CBA4h case   27:*/		return 0x8222CBA8;
		  /* 8222CBA8h */ case   28:  		/* addi R29, R1, 96 */
		/* 8222CBA8h case   28:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x60);
		/* 8222CBA8h case   28:*/		return 0x8222CBAC;
		  /* 8222CBACh */ case   29:  		/* lwz R11, <#[R31]> */
		/* 8222CBACh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222CBACh case   29:*/		return 0x8222CBB0;
		  /* 8222CBB0h */ case   30:  		/* lwz R27, <#[R1 + 88]> */
		/* 8222CBB0h case   30:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 8222CBB0h case   30:*/		return 0x8222CBB4;
		  /* 8222CBB4h */ case   31:  		/* addi R5, R1, 96 */
		/* 8222CBB4h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8222CBB4h case   31:*/		return 0x8222CBB8;
		  /* 8222CBB8h */ case   32:  		/* mr R3, R22 */
		/* 8222CBB8h case   32:*/		regs.R3 = regs.R22;
		/* 8222CBB8h case   32:*/		return 0x8222CBBC;
		  /* 8222CBBCh */ case   33:  		/* mr R6, R27 */
		/* 8222CBBCh case   33:*/		regs.R6 = regs.R27;
		/* 8222CBBCh case   33:*/		return 0x8222CBC0;
		  /* 8222CBC0h */ case   34:  		/* rlwinm R4, R11, 7, 29, 31 */
		/* 8222CBC0h case   34:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R4,regs.R11);
		/* 8222CBC0h case   34:*/		return 0x8222CBC4;
		  /* 8222CBC4h */ case   35:  		/* stfdx FR31, <#[R28 + R29]> */
		/* 8222CBC4h case   35:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R28 + regs.R29 + 0x00000000) );
		/* 8222CBC4h case   35:*/		return 0x8222CBC8;
		  /* 8222CBC8h */ case   36:  		/* bl -22928 */
		/* 8222CBC8h case   36:*/		regs.LR = 0x8222CBCC; return 0x82227238;
		/* 8222CBC8h case   36:*/		return 0x8222CBCC;
		  /* 8222CBCCh */ case   37:  		/* lwz R10, <#[R31 + 12]> */
		/* 8222CBCCh case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222CBCCh case   37:*/		return 0x8222CBD0;
		  /* 8222CBD0h */ case   38:  		/* mr R11, R3 */
		/* 8222CBD0h case   38:*/		regs.R11 = regs.R3;
		/* 8222CBD0h case   38:*/		return 0x8222CBD4;
		  /* 8222CBD4h */ case   39:  		/* addi R10, R10, 4 */
		/* 8222CBD4h case   39:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8222CBD4h case   39:*/		return 0x8222CBD8;
		  /* 8222CBD8h */ case   40:  		/* lwz R9, <#[R10]> */
		/* 8222CBD8h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222CBD8h case   40:*/		return 0x8222CBDC;
		  /* 8222CBDCh */ case   41:  		/* b 12 */
		/* 8222CBDCh case   41:*/		return 0x8222CBE8;
		/* 8222CBDCh case   41:*/		return 0x8222CBE0;
		  /* 8222CBE0h */ case   42:  		/* addi R10, R9, 8 */
		/* 8222CBE0h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8222CBE0h case   42:*/		return 0x8222CBE4;
		  /* 8222CBE4h */ case   43:  		/* lwz R9, <#[R9 + 8]> */
		/* 8222CBE4h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8222CBE4h case   43:*/		return 0x8222CBE8;
	}
	return 0x8222CBE8;
} // Block from 8222CB38h-8222CBE8h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8222CBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CBE8);
		  /* 8222CBE8h */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 8222CBE8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 8222CBE8h case    0:*/		return 0x8222CBEC;
		  /* 8222CBECh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222CBECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222CBE0;  }
		/* 8222CBECh case    1:*/		return 0x8222CBF0;
		  /* 8222CBF0h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 8222CBF0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8222CBF0h case    2:*/		return 0x8222CBF4;
		  /* 8222CBF4h */ case    3:  		/* li R26, 57 */
		/* 8222CBF4h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x39);
		/* 8222CBF4h case    3:*/		return 0x8222CBF8;
		  /* 8222CBF8h */ case    4:  		/* addi R4, R1, 96 */
		/* 8222CBF8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8222CBF8h case    4:*/		return 0x8222CBFC;
		  /* 8222CBFCh */ case    5:  		/* mr R8, R26 */
		/* 8222CBFCh case    5:*/		regs.R8 = regs.R26;
		/* 8222CBFCh case    5:*/		return 0x8222CC00;
		  /* 8222CC00h */ case    6:  		/* mr R3, R30 */
		/* 8222CC00h case    6:*/		regs.R3 = regs.R30;
		/* 8222CC00h case    6:*/		return 0x8222CC04;
		  /* 8222CC04h */ case    7:  		/* stw R9, <#[R10]> */
		/* 8222CC04h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222CC04h case    7:*/		return 0x8222CC08;
		  /* 8222CC08h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222CC08h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222CC08h case    8:*/		return 0x8222CC0C;
		  /* 8222CC0Ch */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 8222CC0Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222CC0Ch case    9:*/		return 0x8222CC10;
		  /* 8222CC10h */ case   10:  		/* stw R31, <#[R11 + 4]> */
		/* 8222CC10h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8222CC10h case   10:*/		return 0x8222CC14;
		  /* 8222CC14h */ case   11:  		/* lwz R10, <#[R31]> */
		/* 8222CC14h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222CC14h case   11:*/		return 0x8222CC18;
		  /* 8222CC18h */ case   12:  		/* rlwimi R10, R8, 7, 29, 29 */
		/* 8222CC18h case   12:*/		cpu::op::rlwimi<0,7,29,29>(regs,&regs.R10,regs.R8);
		/* 8222CC18h case   12:*/		return 0x8222CC1C;
		  /* 8222CC1Ch */ case   13:  		/* rlwimi R10, R26, 7, 19, 26 */
		/* 8222CC1Ch case   13:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R10,regs.R26);
		/* 8222CC1Ch case   13:*/		return 0x8222CC20;
		  /* 8222CC20h */ case   14:  		/* stw R11, <#[R31 + 12]> */
		/* 8222CC20h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222CC20h case   14:*/		return 0x8222CC24;
		  /* 8222CC24h */ case   15:  		/* stw R10, <#[R31]> */
		/* 8222CC24h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222CC24h case   15:*/		return 0x8222CC28;
		  /* 8222CC28h */ case   16:  		/* bl -580768 */
		/* 8222CC28h case   16:*/		regs.LR = 0x8222CC2C; return 0x8219EF88;
		/* 8222CC28h case   16:*/		return 0x8222CC2C;
		  /* 8222CC2Ch */ case   17:  		/* stfdx FR31, <#[R28 + R29]> */
		/* 8222CC2Ch case   17:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R28 + regs.R29 + 0x00000000) );
		/* 8222CC2Ch case   17:*/		return 0x8222CC30;
		  /* 8222CC30h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 8222CC30h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222CC30h case   18:*/		return 0x8222CC34;
		  /* 8222CC34h */ case   19:  		/* mr R6, R27 */
		/* 8222CC34h case   19:*/		regs.R6 = regs.R27;
		/* 8222CC34h case   19:*/		return 0x8222CC38;
		  /* 8222CC38h */ case   20:  		/* addi R5, R1, 96 */
		/* 8222CC38h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8222CC38h case   20:*/		return 0x8222CC3C;
		  /* 8222CC3Ch */ case   21:  		/* mr R3, R22 */
		/* 8222CC3Ch case   21:*/		regs.R3 = regs.R22;
		/* 8222CC3Ch case   21:*/		return 0x8222CC40;
		  /* 8222CC40h */ case   22:  		/* rlwinm R4, R11, 7, 29, 31 */
		/* 8222CC40h case   22:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R4,regs.R11);
		/* 8222CC40h case   22:*/		return 0x8222CC44;
		  /* 8222CC44h */ case   23:  		/* bl -23052 */
		/* 8222CC44h case   23:*/		regs.LR = 0x8222CC48; return 0x82227238;
		/* 8222CC44h case   23:*/		return 0x8222CC48;
		  /* 8222CC48h */ case   24:  		/* lwz R11, <#[R30 + 12]> */
		/* 8222CC48h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222CC48h case   24:*/		return 0x8222CC4C;
		  /* 8222CC4Ch */ case   25:  		/* addi R11, R11, 4 */
		/* 8222CC4Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222CC4Ch case   25:*/		return 0x8222CC50;
		  /* 8222CC50h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 8222CC50h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CC50h case   26:*/		return 0x8222CC54;
		  /* 8222CC54h */ case   27:  		/* b 12 */
		/* 8222CC54h case   27:*/		return 0x8222CC60;
		/* 8222CC54h case   27:*/		return 0x8222CC58;
		  /* 8222CC58h */ case   28:  		/* addi R11, R10, 8 */
		/* 8222CC58h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8222CC58h case   28:*/		return 0x8222CC5C;
		  /* 8222CC5Ch */ case   29:  		/* lwz R10, <#[R10 + 8]> */
		/* 8222CC5Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8222CC5Ch case   29:*/		return 0x8222CC60;
	}
	return 0x8222CC60;
} // Block from 8222CBE8h-8222CC60h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8222CC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CC60);
		  /* 8222CC60h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 8222CC60h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 8222CC60h case    0:*/		return 0x8222CC64;
		  /* 8222CC64h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222CC64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222CC58;  }
		/* 8222CC64h case    1:*/		return 0x8222CC68;
		  /* 8222CC68h */ case    2:  		/* lwz R10, <#[R30 + 8]> */
		/* 8222CC68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8222CC68h case    2:*/		return 0x8222CC6C;
		  /* 8222CC6Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 8222CC6Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CC6Ch case    3:*/		return 0x8222CC70;
		  /* 8222CC70h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 8222CC70h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222CC70h case    4:*/		return 0x8222CC74;
		  /* 8222CC74h */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 8222CC74h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222CC74h case    5:*/		return 0x8222CC78;
		  /* 8222CC78h */ case    6:  		/* stw R30, <#[R3 + 4]> */
		/* 8222CC78h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 8222CC78h case    6:*/		return 0x8222CC7C;
		  /* 8222CC7Ch */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8222CC7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222CC7Ch case    7:*/		return 0x8222CC80;
		  /* 8222CC80h */ case    8:  		/* rlwimi R11, R26, 7, 29, 29 */
		/* 8222CC80h case    8:*/		cpu::op::rlwimi<0,7,29,29>(regs,&regs.R11,regs.R26);
		/* 8222CC80h case    8:*/		return 0x8222CC84;
		  /* 8222CC84h */ case    9:  		/* rlwimi R11, R26, 7, 19, 26 */
		/* 8222CC84h case    9:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R26);
		/* 8222CC84h case    9:*/		return 0x8222CC88;
		  /* 8222CC88h */ case   10:  		/* stw R3, <#[R30 + 12]> */
		/* 8222CC88h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222CC88h case   10:*/		return 0x8222CC8C;
		  /* 8222CC8Ch */ case   11:  		/* stw R11, <#[R30]> */
		/* 8222CC8Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222CC8Ch case   11:*/		return 0x8222CC90;
		  /* 8222CC90h */ case   12:  		/* lwz R3, <#[R31 + 12]> */
		/* 8222CC90h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222CC90h case   12:*/		return 0x8222CC94;
		  /* 8222CC94h */ case   13:  		/* bl -616676 */
		/* 8222CC94h case   13:*/		regs.LR = 0x8222CC98; return 0x821963B0;
		/* 8222CC94h case   13:*/		return 0x8222CC98;
		  /* 8222CC98h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 8222CC98h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222CC98h case   14:*/		return 0x8222CC9C;
		  /* 8222CC9Ch */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222CC9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CC9Ch case   15:*/		return 0x8222CCA0;
		  /* 8222CCA0h */ case   16:  		/* oris R10, R10, 256 */
		/* 8222CCA0h case   16:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x100);
		/* 8222CCA0h case   16:*/		return 0x8222CCA4;
		  /* 8222CCA4h */ case   17:  		/* stw R10, <#[R11 + 8]> */
		/* 8222CCA4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CCA4h case   17:*/		return 0x8222CCA8;
		  /* 8222CCA8h */ case   18:  		/* lwz R3, <#[R30 + 12]> */
		/* 8222CCA8h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222CCA8h case   18:*/		return 0x8222CCAC;
		  /* 8222CCACh */ case   19:  		/* bl -616700 */
		/* 8222CCACh case   19:*/		regs.LR = 0x8222CCB0; return 0x821963B0;
		/* 8222CCACh case   19:*/		return 0x8222CCB0;
		  /* 8222CCB0h */ case   20:  		/* lwz R11, <#[R30 + 12]> */
		/* 8222CCB0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222CCB0h case   20:*/		return 0x8222CCB4;
		  /* 8222CCB4h */ case   21:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222CCB4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CCB4h case   21:*/		return 0x8222CCB8;
		  /* 8222CCB8h */ case   22:  		/* oris R10, R10, 256 */
		/* 8222CCB8h case   22:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x100);
		/* 8222CCB8h case   22:*/		return 0x8222CCBC;
		  /* 8222CCBCh */ case   23:  		/* stw R10, <#[R11 + 8]> */
		/* 8222CCBCh case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CCBCh case   23:*/		return 0x8222CCC0;
		  /* 8222CCC0h */ case   24:  		/* b 252 */
		/* 8222CCC0h case   24:*/		return 0x8222CDBC;
		/* 8222CCC0h case   24:*/		return 0x8222CCC4;
	}
	return 0x8222CCC4;
} // Block from 8222CC60h-8222CCC4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8222CCC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CCC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CCC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CCC4);
		  /* 8222CCC4h */ case    0:  		/* addi R10, R29, -1 */
		/* 8222CCC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFFF);
		/* 8222CCC4h case    0:*/		return 0x8222CCC8;
		  /* 8222CCC8h */ case    1:  		/* fcmpu CR6, FR31, FR30 */
		/* 8222CCC8h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 8222CCC8h case    1:*/		return 0x8222CCCC;
		  /* 8222CCCCh */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8222CCCCh case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8222CCCCh case    2:*/		return 0x8222CCD0;
		  /* 8222CCD0h */ case    3:  		/* andc R31, R29, R10 */
		/* 8222CCD0h case    3:*/		cpu::op::andc<0>(regs,&regs.R31,regs.R29,regs.R10);
		/* 8222CCD0h case    3:*/		return 0x8222CCD4;
		  /* 8222CCD4h */ case    4:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8222CCD4h case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8222CCD4h case    4:*/		return 0x8222CCD8;
		  /* 8222CCD8h */ case    5:  		/* mr R3, R22 */
		/* 8222CCD8h case    5:*/		regs.R3 = regs.R22;
		/* 8222CCD8h case    5:*/		return 0x8222CCDC;
		  /* 8222CCDCh */ case    6:  		/* bc 4, CR6_EQ, 100 */
		/* 8222CCDCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222CD40;  }
		/* 8222CCDCh case    6:*/		return 0x8222CCE0;
		  /* 8222CCE0h */ case    7:  		/* cmplwi CR6, R4, 97 */
		/* 8222CCE0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 8222CCE0h case    7:*/		return 0x8222CCE4;
		  /* 8222CCE4h */ case    8:  		/* bc 4, CR6_EQ, 48 */
		/* 8222CCE4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8222CD14;  }
		/* 8222CCE4h case    8:*/		return 0x8222CCE8;
		  /* 8222CCE8h */ case    9:  		/* bl -821432 */
		/* 8222CCE8h case    9:*/		regs.LR = 0x8222CCEC; return 0x82164430;
		/* 8222CCE8h case    9:*/		return 0x8222CCEC;
		  /* 8222CCECh */ case   10:  		/* addi R11, R25, -24 */
		/* 8222CCECh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFE8);
		/* 8222CCECh case   10:*/		return 0x8222CCF0;
		  /* 8222CCF0h */ case   11:  		/* nor R9, R31, R31 */
		/* 8222CCF0h case   11:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R31,regs.R31);
		/* 8222CCF0h case   11:*/		return 0x8222CCF4;
		  /* 8222CCF4h */ case   12:  		/* add R11, R3, R11 */
		/* 8222CCF4h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8222CCF4h case   12:*/		return 0x8222CCF8;
		  /* 8222CCF8h */ case   13:  		/* li R8, -241 */
		/* 8222CCF8h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFF0F);
		/* 8222CCF8h case   13:*/		return 0x8222CCFC;
		  /* 8222CCFCh */ case   14:  		/* mr R10, R31 */
		/* 8222CCFCh case   14:*/		regs.R10 = regs.R31;
		/* 8222CCFCh case   14:*/		return 0x8222CD00;
		  /* 8222CD00h */ case   15:  		/* rlwimi R8, R9, 4, 24, 27 */
		/* 8222CD00h case   15:*/		cpu::op::rlwimi<0,4,24,27>(regs,&regs.R8,regs.R9);
		/* 8222CD00h case   15:*/		return 0x8222CD04;
		  /* 8222CD04h */ case   16:  		/* lwz R9, <#[R11 + 12]> */
		/* 8222CD04h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222CD04h case   16:*/		return 0x8222CD08;
		  /* 8222CD08h */ case   17:  		/* rlwimi R10, R9, 0, 0, 27 */
		/* 8222CD08h case   17:*/		cpu::op::rlwimi<0,0,0,27>(regs,&regs.R10,regs.R9);
		/* 8222CD08h case   17:*/		return 0x8222CD0C;
		  /* 8222CD0Ch */ case   18:  		/* and R10, R10, R8 */
		/* 8222CD0Ch case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8222CD0Ch case   18:*/		return 0x8222CD10;
		  /* 8222CD10h */ case   19:  		/* b 128 */
		/* 8222CD10h case   19:*/		return 0x8222CD90;
		/* 8222CD10h case   19:*/		return 0x8222CD14;
	}
	return 0x8222CD14;
} // Block from 8222CCC4h-8222CD14h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8222CD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CD14);
		  /* 8222CD14h */ case    0:  		/* bl -821476 */
		/* 8222CD14h case    0:*/		regs.LR = 0x8222CD18; return 0x82164430;
		/* 8222CD14h case    0:*/		return 0x8222CD18;
		  /* 8222CD18h */ case    1:  		/* addi R11, R25, -20 */
		/* 8222CD18h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFEC);
		/* 8222CD18h case    1:*/		return 0x8222CD1C;
		  /* 8222CD1Ch */ case    2:  		/* lis R10, -1 */
		/* 8222CD1Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8222CD1Ch case    2:*/		return 0x8222CD20;
		  /* 8222CD20h */ case    3:  		/* add R11, R3, R11 */
		/* 8222CD20h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8222CD20h case    3:*/		return 0x8222CD24;
		  /* 8222CD24h */ case    4:  		/* nor R9, R31, R31 */
		/* 8222CD24h case    4:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R31,regs.R31);
		/* 8222CD24h case    4:*/		return 0x8222CD28;
		  /* 8222CD28h */ case    5:  		/* ori R10, R10, 4095 */
		/* 8222CD28h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFF);
		/* 8222CD28h case    5:*/		return 0x8222CD2C;
		  /* 8222CD2Ch */ case    6:  		/* rlwimi R10, R9, 12, 16, 19 */
		/* 8222CD2Ch case    6:*/		cpu::op::rlwimi<0,12,16,19>(regs,&regs.R10,regs.R9);
		/* 8222CD2Ch case    6:*/		return 0x8222CD30;
		  /* 8222CD30h */ case    7:  		/* lwz R9, <#[R11 + 12]> */
		/* 8222CD30h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222CD30h case    7:*/		return 0x8222CD34;
		  /* 8222CD34h */ case    8:  		/* rlwimi R9, R31, 8, 20, 23 */
		/* 8222CD34h case    8:*/		cpu::op::rlwimi<0,8,20,23>(regs,&regs.R9,regs.R31);
		/* 8222CD34h case    8:*/		return 0x8222CD38;
		  /* 8222CD38h */ case    9:  		/* and R10, R9, R10 */
		/* 8222CD38h case    9:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8222CD38h case    9:*/		return 0x8222CD3C;
		  /* 8222CD3Ch */ case   10:  		/* b 84 */
		/* 8222CD3Ch case   10:*/		return 0x8222CD90;
		/* 8222CD3Ch case   10:*/		return 0x8222CD40;
	}
	return 0x8222CD40;
} // Block from 8222CD14h-8222CD40h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222CD40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CD40);
		  /* 8222CD40h */ case    0:  		/* cmplwi CR6, R4, 97 */
		/* 8222CD40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 8222CD40h case    0:*/		return 0x8222CD44;
		  /* 8222CD44h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 8222CD44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222CD6C;  }
		/* 8222CD44h case    1:*/		return 0x8222CD48;
		  /* 8222CD48h */ case    2:  		/* bl -821528 */
		/* 8222CD48h case    2:*/		regs.LR = 0x8222CD4C; return 0x82164430;
		/* 8222CD48h case    2:*/		return 0x8222CD4C;
		  /* 8222CD4Ch */ case    3:  		/* addi R11, R25, -24 */
		/* 8222CD4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFE8);
		/* 8222CD4Ch case    3:*/		return 0x8222CD50;
		  /* 8222CD50h */ case    4:  		/* li R9, -16 */
		/* 8222CD50h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFF0);
		/* 8222CD50h case    4:*/		return 0x8222CD54;
		  /* 8222CD54h */ case    5:  		/* add R11, R3, R11 */
		/* 8222CD54h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8222CD54h case    5:*/		return 0x8222CD58;
		  /* 8222CD58h */ case    6:  		/* nor R10, R31, R31 */
		/* 8222CD58h case    6:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R31,regs.R31);
		/* 8222CD58h case    6:*/		return 0x8222CD5C;
		  /* 8222CD5Ch */ case    7:  		/* or R10, R10, R9 */
		/* 8222CD5Ch case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8222CD5Ch case    7:*/		return 0x8222CD60;
		  /* 8222CD60h */ case    8:  		/* lwz R9, <#[R11 + 12]> */
		/* 8222CD60h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222CD60h case    8:*/		return 0x8222CD64;
		  /* 8222CD64h */ case    9:  		/* rlwimi R9, R31, 4, 24, 27 */
		/* 8222CD64h case    9:*/		cpu::op::rlwimi<0,4,24,27>(regs,&regs.R9,regs.R31);
		/* 8222CD64h case    9:*/		return 0x8222CD68;
		  /* 8222CD68h */ case   10:  		/* b -48 */
		/* 8222CD68h case   10:*/		return 0x8222CD38;
		/* 8222CD68h case   10:*/		return 0x8222CD6C;
	}
	return 0x8222CD6C;
} // Block from 8222CD40h-8222CD6Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222CD6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CD6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CD6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CD6C);
		  /* 8222CD6Ch */ case    0:  		/* bl -821564 */
		/* 8222CD6Ch case    0:*/		regs.LR = 0x8222CD70; return 0x82164430;
		/* 8222CD6Ch case    0:*/		return 0x8222CD70;
		  /* 8222CD70h */ case    1:  		/* addi R11, R25, -20 */
		/* 8222CD70h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFEC);
		/* 8222CD70h case    1:*/		return 0x8222CD74;
		  /* 8222CD74h */ case    2:  		/* nor R10, R31, R31 */
		/* 8222CD74h case    2:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R31,regs.R31);
		/* 8222CD74h case    2:*/		return 0x8222CD78;
		  /* 8222CD78h */ case    3:  		/* add R11, R3, R11 */
		/* 8222CD78h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8222CD78h case    3:*/		return 0x8222CD7C;
		  /* 8222CD7Ch */ case    4:  		/* li R9, -3841 */
		/* 8222CD7Ch case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFF0FF);
		/* 8222CD7Ch case    4:*/		return 0x8222CD80;
		  /* 8222CD80h */ case    5:  		/* rlwimi R9, R10, 8, 20, 23 */
		/* 8222CD80h case    5:*/		cpu::op::rlwimi<0,8,20,23>(regs,&regs.R9,regs.R10);
		/* 8222CD80h case    5:*/		return 0x8222CD84;
		  /* 8222CD84h */ case    6:  		/* lwz R10, <#[R11 + 12]> */
		/* 8222CD84h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222CD84h case    6:*/		return 0x8222CD88;
		  /* 8222CD88h */ case    7:  		/* rlwimi R10, R31, 12, 16, 19 */
		/* 8222CD88h case    7:*/		cpu::op::rlwimi<0,12,16,19>(regs,&regs.R10,regs.R31);
		/* 8222CD88h case    7:*/		return 0x8222CD8C;
		  /* 8222CD8Ch */ case    8:  		/* and R10, R10, R9 */
		/* 8222CD8Ch case    8:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8222CD8Ch case    8:*/		return 0x8222CD90;
	}
	return 0x8222CD90;
} // Block from 8222CD6Ch-8222CD90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222CD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CD90);
		  /* 8222CD90h */ case    0:  		/* stw R10, <#[R11 + 12]> */
		/* 8222CD90h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222CD90h case    0:*/		return 0x8222CD94;
		  /* 8222CD94h */ case    1:  		/* rlwinm R10, R31, 1, 0, 30 */
		/* 8222CD94h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R31);
		/* 8222CD94h case    1:*/		return 0x8222CD98;
		  /* 8222CD98h */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222CD98h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222CD98h case    2:*/		return 0x8222CD9C;
		  /* 8222CD9Ch */ case    3:  		/* cntlzw R9, R31 */
		/* 8222CD9Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R31);
		/* 8222CD9Ch case    3:*/		return 0x8222CDA0;
		  /* 8222CDA0h */ case    4:  		/* or R10, R10, R11 */
		/* 8222CDA0h case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8222CDA0h case    4:*/		return 0x8222CDA4;
		  /* 8222CDA4h */ case    5:  		/* rlwimi R10, R11, 0, 31, 26 */
		/* 8222CDA4h case    5:*/		cpu::op::rlwimi<0,0,31,26>(regs,&regs.R10,regs.R11);
		/* 8222CDA4h case    5:*/		return 0x8222CDA8;
		  /* 8222CDA8h */ case    6:  		/* subfic R23, R9, 31 */
		/* 8222CDA8h case    6:*/		cpu::op::subfic<0>(regs,&regs.R23,regs.R9,0x1F);
		/* 8222CDA8h case    6:*/		return 0x8222CDAC;
		  /* 8222CDACh */ case    7:  		/* rlwinm R11, R10, 0, 0, 17 */
		/* 8222CDACh case    7:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R11,regs.R10);
		/* 8222CDACh case    7:*/		return 0x8222CDB0;
		  /* 8222CDB0h */ case    8:  		/* addi R11, R11, 16384 */
		/* 8222CDB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 8222CDB0h case    8:*/		return 0x8222CDB4;
		  /* 8222CDB4h */ case    9:  		/* rlwimi R11, R10, 0, 18, 14 */
		/* 8222CDB4h case    9:*/		cpu::op::rlwimi<0,0,18,14>(regs,&regs.R11,regs.R10);
		/* 8222CDB4h case    9:*/		return 0x8222CDB8;
		  /* 8222CDB8h */ case   10:  		/* stw R11, <#[R25 + 8]> */
		/* 8222CDB8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222CDB8h case   10:*/		return 0x8222CDBC;
	}
	return 0x8222CDBC;
} // Block from 8222CD90h-8222CDBCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222CDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CDBC);
		  /* 8222CDBCh */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8222CDBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8222CDBCh case    0:*/		return 0x8222CDC0;
		  /* 8222CDC0h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 8222CDC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222CE2C;  }
		/* 8222CDC0h case    1:*/		return 0x8222CDC4;
		  /* 8222CDC4h */ case    2:  		/* mr R3, R22 */
		/* 8222CDC4h case    2:*/		regs.R3 = regs.R22;
		/* 8222CDC4h case    2:*/		return 0x8222CDC8;
		  /* 8222CDC8h */ case    3:  		/* lwz R4, <#[R24 + 12]> */
		/* 8222CDC8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x0000000C) );
		/* 8222CDC8h case    3:*/		return 0x8222CDCC;
		  /* 8222CDCCh */ case    4:  		/* bl -574228 */
		/* 8222CDCCh case    4:*/		regs.LR = 0x8222CDD0; return 0x821A0AB8;
		/* 8222CDCCh case    4:*/		return 0x8222CDD0;
		  /* 8222CDD0h */ case    5:  		/* lwz R11, <#[R24 + 12]> */
		/* 8222CDD0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 8222CDD0h case    5:*/		return 0x8222CDD4;
		  /* 8222CDD4h */ case    6:  		/* addi R11, R11, 4 */
		/* 8222CDD4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222CDD4h case    6:*/		return 0x8222CDD8;
		  /* 8222CDD8h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8222CDD8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CDD8h case    7:*/		return 0x8222CDDC;
		  /* 8222CDDCh */ case    8:  		/* b 12 */
		/* 8222CDDCh case    8:*/		return 0x8222CDE8;
		/* 8222CDDCh case    8:*/		return 0x8222CDE0;
		  /* 8222CDE0h */ case    9:  		/* addi R11, R10, 8 */
		/* 8222CDE0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8222CDE0h case    9:*/		return 0x8222CDE4;
		  /* 8222CDE4h */ case   10:  		/* lwz R10, <#[R10 + 8]> */
		/* 8222CDE4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8222CDE4h case   10:*/		return 0x8222CDE8;
	}
	return 0x8222CDE8;
} // Block from 8222CDBCh-8222CDE8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222CDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CDE8);
		  /* 8222CDE8h */ case    0:  		/* cmplw CR6, R10, R24 */
		/* 8222CDE8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R24);
		/* 8222CDE8h case    0:*/		return 0x8222CDEC;
		  /* 8222CDECh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222CDECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222CDE0;  }
		/* 8222CDECh case    1:*/		return 0x8222CDF0;
		  /* 8222CDF0h */ case    2:  		/* lwz R10, <#[R24 + 8]> */
		/* 8222CDF0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000008) );
		/* 8222CDF0h case    2:*/		return 0x8222CDF4;
		  /* 8222CDF4h */ case    3:  		/* rlwinm R9, R23, 5, 22, 26 */
		/* 8222CDF4h case    3:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R9,regs.R23);
		/* 8222CDF4h case    3:*/		return 0x8222CDF8;
		  /* 8222CDF8h */ case    4:  		/* rlwinm R9, R9, 0, 25, 23 */
		/* 8222CDF8h case    4:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R9,regs.R9);
		/* 8222CDF8h case    4:*/		return 0x8222CDFC;
		  /* 8222CDFCh */ case    5:  		/* ori R9, R9, 7296 */
		/* 8222CDFCh case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1C80);
		/* 8222CDFCh case    5:*/		return 0x8222CE00;
		  /* 8222CE00h */ case    6:  		/* stw R10, <#[R11]> */
		/* 8222CE00h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222CE00h case    6:*/		return 0x8222CE04;
		  /* 8222CE04h */ case    7:  		/* lwz R11, <#[R25 + 4]> */
		/* 8222CE04h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 8222CE04h case    7:*/		return 0x8222CE08;
		  /* 8222CE08h */ case    8:  		/* stw R11, <#[R24 + 8]> */
		/* 8222CE08h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8222CE08h case    8:*/		return 0x8222CE0C;
		  /* 8222CE0Ch */ case    9:  		/* stw R24, <#[R25 + 4]> */
		/* 8222CE0Ch case    9:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R25 + 0x00000004) );
		/* 8222CE0Ch case    9:*/		return 0x8222CE10;
		  /* 8222CE10h */ case   10:  		/* lwz R11, <#[R24]> */
		/* 8222CE10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8222CE10h case   10:*/		return 0x8222CE14;
		  /* 8222CE14h */ case   11:  		/* rlwinm R11, R11, 0, 0, 24 */
		/* 8222CE14h case   11:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R11,regs.R11);
		/* 8222CE14h case   11:*/		return 0x8222CE18;
		  /* 8222CE18h */ case   12:  		/* rlwinm R11, R11, 0, 24, 21 */
		/* 8222CE18h case   12:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R11,regs.R11);
		/* 8222CE18h case   12:*/		return 0x8222CE1C;
		  /* 8222CE1Ch */ case   13:  		/* stw R25, <#[R24 + 12]> */
		/* 8222CE1Ch case   13:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R24 + 0x0000000C) );
		/* 8222CE1Ch case   13:*/		return 0x8222CE20;
		  /* 8222CE20h */ case   14:  		/* or R11, R9, R11 */
		/* 8222CE20h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8222CE20h case   14:*/		return 0x8222CE24;
		  /* 8222CE24h */ case   15:  		/* stw R11, <#[R24]> */
		/* 8222CE24h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8222CE24h case   15:*/		return 0x8222CE28;
		  /* 8222CE28h */ case   16:  		/* b 228 */
		/* 8222CE28h case   16:*/		return 0x8222CF0C;
		/* 8222CE28h case   16:*/		return 0x8222CE2C;
	}
	return 0x8222CE2C;
} // Block from 8222CDE8h-8222CE2Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222CE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CE2C);
		  /* 8222CE2Ch */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8222CE2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8222CE2Ch case    0:*/		return 0x8222CE30;
		  /* 8222CE30h */ case    1:  		/* bc 12, CR6_EQ, 220 */
		/* 8222CE30h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222CF0C;  }
		/* 8222CE30h case    1:*/		return 0x8222CE34;
		  /* 8222CE34h */ case    2:  		/* mr R4, R21 */
		/* 8222CE34h case    2:*/		regs.R4 = regs.R21;
		/* 8222CE34h case    2:*/		return 0x8222CE38;
		  /* 8222CE38h */ case    3:  		/* mr R3, R22 */
		/* 8222CE38h case    3:*/		regs.R3 = regs.R22;
		/* 8222CE38h case    3:*/		return 0x8222CE3C;
		  /* 8222CE3Ch */ case    4:  		/* bl -485972 */
		/* 8222CE3Ch case    4:*/		regs.LR = 0x8222CE40; return 0x821B63E8;
		/* 8222CE3Ch case    4:*/		return 0x8222CE40;
		  /* 8222CE40h */ case    5:  		/* mr R4, R21 */
		/* 8222CE40h case    5:*/		regs.R4 = regs.R21;
		/* 8222CE40h case    5:*/		return 0x8222CE44;
		  /* 8222CE44h */ case    6:  		/* mr R3, R22 */
		/* 8222CE44h case    6:*/		regs.R3 = regs.R22;
		/* 8222CE44h case    6:*/		return 0x8222CE48;
		  /* 8222CE48h */ case    7:  		/* bl -484128 */
		/* 8222CE48h case    7:*/		regs.LR = 0x8222CE4C; return 0x821B6B28;
		/* 8222CE48h case    7:*/		return 0x8222CE4C;
		  /* 8222CE4Ch */ case    8:  		/* mr R31, R3 */
		/* 8222CE4Ch case    8:*/		regs.R31 = regs.R3;
		/* 8222CE4Ch case    8:*/		return 0x8222CE50;
		  /* 8222CE50h */ case    9:  		/* mr R3, R22 */
		/* 8222CE50h case    9:*/		regs.R3 = regs.R22;
		/* 8222CE50h case    9:*/		return 0x8222CE54;
		  /* 8222CE54h */ case   10:  		/* mr R4, R31 */
		/* 8222CE54h case   10:*/		regs.R4 = regs.R31;
		/* 8222CE54h case   10:*/		return 0x8222CE58;
		  /* 8222CE58h */ case   11:  		/* bl -486000 */
		/* 8222CE58h case   11:*/		regs.LR = 0x8222CE5C; return 0x821B63E8;
		/* 8222CE58h case   11:*/		return 0x8222CE5C;
		  /* 8222CE5Ch */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222CE5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222CE5Ch case   12:*/		return 0x8222CE60;
		  /* 8222CE60h */ case   13:  		/* oris R11, R11, 256 */
		/* 8222CE60h case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8222CE60h case   13:*/		return 0x8222CE64;
		  /* 8222CE64h */ case   14:  		/* stw R11, <#[R31 + 8]> */
		/* 8222CE64h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222CE64h case   14:*/		return 0x8222CE68;
		  /* 8222CE68h */ case   15:  		/* lwz R11, <#[R21 + 8]> */
		/* 8222CE68h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 8222CE68h case   15:*/		return 0x8222CE6C;
		  /* 8222CE6Ch */ case   16:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8222CE6Ch case   16:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8222CE6Ch case   16:*/		return 0x8222CE70;
		  /* 8222CE70h */ case   17:  		/* bc 12, CR0_EQ, 136 */
		/* 8222CE70h case   17:*/		if ( regs.CR[0].eq ) { return 0x8222CEF8;  }
		/* 8222CE70h case   17:*/		return 0x8222CE74;
		  /* 8222CE74h */ case   18:  		/* lwz R3, <#[R22 + 660]> */
		/* 8222CE74h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R22 + 0x00000294) );
		/* 8222CE74h case   18:*/		return 0x8222CE78;
		  /* 8222CE78h */ case   19:  		/* cmplwi CR6, R3, 0 */
		/* 8222CE78h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8222CE78h case   19:*/		return 0x8222CE7C;
		  /* 8222CE7Ch */ case   20:  		/* bc 12, CR6_EQ, 112 */
		/* 8222CE7Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x8222CEEC;  }
		/* 8222CE7Ch case   20:*/		return 0x8222CE80;
	}
	return 0x8222CE80;
} // Block from 8222CE2Ch-8222CE80h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8222CE80h
// Function '?CanReorderBefore@Compiler@D3DXShader@@QAA_NPAVInstruction@2@0_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CE80);
		  /* 8222CE80h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 8222CE80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222CE80h case    0:*/		return 0x8222CE84;
		  /* 8222CE84h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222CE84h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222CE84h case    1:*/		return 0x8222CE88;
		  /* 8222CE88h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 8222CE88h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222CEB0;  }
		/* 8222CE88h case    2:*/		return 0x8222CE8C;
		  /* 8222CE8Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8222CE8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222CE8Ch case    3:*/		return 0x8222CE90;
		  /* 8222CE90h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222CE90h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222CE90h case    4:*/		return 0x8222CE94;
		  /* 8222CE94h */ case    5:  		/* addic. R11, R11, -4 */
		/* 8222CE94h case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8222CE94h case    5:*/		return 0x8222CE98;
		  /* 8222CE98h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8222CE98h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222CEB0;  }
		/* 8222CE98h case    6:*/		return 0x8222CE9C;
		  /* 8222CE9Ch */ case    7:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222CE9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CE9Ch case    7:*/		return 0x8222CEA0;
		  /* 8222CEA0h */ case    8:  		/* lwz R9, <#[R11 + 12]> */
		/* 8222CEA0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222CEA0h case    8:*/		return 0x8222CEA4;
		  /* 8222CEA4h */ case    9:  		/* addi R10, R10, 1 */
		/* 8222CEA4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222CEA4h case    9:*/		return 0x8222CEA8;
		  /* 8222CEA8h */ case   10:  		/* cmplw CR6, R10, R9 */
		/* 8222CEA8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8222CEA8h case   10:*/		return 0x8222CEAC;
		  /* 8222CEACh */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 8222CEACh case   11:*/		if ( !regs.CR[6].gt ) { return 0x8222CEBC;  }
		/* 8222CEACh case   11:*/		return 0x8222CEB0;
	}
	return 0x8222CEB0;
} // Block from 8222CE80h-8222CEB0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222CEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CEB0);
		  /* 8222CEB0h */ case    0:  		/* li R4, 1 */
		/* 8222CEB0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222CEB0h case    0:*/		return 0x8222CEB4;
		  /* 8222CEB4h */ case    1:  		/* bl -654828 */
		/* 8222CEB4h case    1:*/		regs.LR = 0x8222CEB8; return 0x8218D0C8;
		/* 8222CEB4h case    1:*/		return 0x8222CEB8;
		  /* 8222CEB8h */ case    2:  		/* mr R11, R3 */
		/* 8222CEB8h case    2:*/		regs.R11 = regs.R3;
		/* 8222CEB8h case    2:*/		return 0x8222CEBC;
	}
	return 0x8222CEBC;
} // Block from 8222CEB0h-8222CEBCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222CEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CEBC);
		  /* 8222CEBCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222CEBCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CEBCh case    0:*/		return 0x8222CEC0;
		  /* 8222CEC0h */ case    1:  		/* addi R9, R10, 4 */
		/* 8222CEC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 8222CEC0h case    1:*/		return 0x8222CEC4;
		  /* 8222CEC4h */ case    2:  		/* addi R8, R10, 1 */
		/* 8222CEC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8222CEC4h case    2:*/		return 0x8222CEC8;
		  /* 8222CEC8h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 8222CEC8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 8222CEC8h case    3:*/		return 0x8222CECC;
		  /* 8222CECCh */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 8222CECCh case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8222CECCh case    4:*/		return 0x8222CED0;
		  /* 8222CED0h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 8222CED0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222CED0h case    5:*/		return 0x8222CED4;
		  /* 8222CED4h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222CED4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222CED4h case    6:*/		return 0x8222CED8;
		  /* 8222CED8h */ case    7:  		/* oris R11, R11, 128 */
		/* 8222CED8h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8222CED8h case    7:*/		return 0x8222CEDC;
		  /* 8222CEDCh */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 8222CEDCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222CEDCh case    8:*/		return 0x8222CEE0;
		  /* 8222CEE0h */ case    9:  		/* lwz R11, <#[R21 + 16]> */
		/* 8222CEE0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 8222CEE0h case    9:*/		return 0x8222CEE4;
		  /* 8222CEE4h */ case   10:  		/* sth R11, <#[R31 + 18]> */
		/* 8222CEE4h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 8222CEE4h case   10:*/		return 0x8222CEE8;
		  /* 8222CEE8h */ case   11:  		/* b 16 */
		/* 8222CEE8h case   11:*/		return 0x8222CEF8;
		/* 8222CEE8h case   11:*/		return 0x8222CEEC;
	}
	return 0x8222CEEC;
} // Block from 8222CEBCh-8222CEECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222CEECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CEEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CEEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CEEC);
		  /* 8222CEECh */ case    0:  		/* mr R4, R31 */
		/* 8222CEECh case    0:*/		regs.R4 = regs.R31;
		/* 8222CEECh case    0:*/		return 0x8222CEF0;
		  /* 8222CEF0h */ case    1:  		/* mr R3, R22 */
		/* 8222CEF0h case    1:*/		regs.R3 = regs.R22;
		/* 8222CEF0h case    1:*/		return 0x8222CEF4;
		  /* 8222CEF4h */ case    2:  		/* bl -484524 */
		/* 8222CEF4h case    2:*/		regs.LR = 0x8222CEF8; return 0x821B6A48;
		/* 8222CEF4h case    2:*/		return 0x8222CEF8;
	}
	return 0x8222CEF8;
} // Block from 8222CEECh-8222CEF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222CEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CEF8);
		  /* 8222CEF8h */ case    0:  		/* li R6, 1 */
		/* 8222CEF8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222CEF8h case    0:*/		return 0x8222CEFC;
		  /* 8222CEFCh */ case    1:  		/* li R5, 0 */
		/* 8222CEFCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222CEFCh case    1:*/		return 0x8222CF00;
		  /* 8222CF00h */ case    2:  		/* mr R4, R21 */
		/* 8222CF00h case    2:*/		regs.R4 = regs.R21;
		/* 8222CF00h case    2:*/		return 0x8222CF04;
		  /* 8222CF04h */ case    3:  		/* mr R3, R22 */
		/* 8222CF04h case    3:*/		regs.R3 = regs.R22;
		/* 8222CF04h case    3:*/		return 0x8222CF08;
		  /* 8222CF08h */ case    4:  		/* bl -6976 */
		/* 8222CF08h case    4:*/		regs.LR = 0x8222CF0C; return 0x8222B3C8;
		/* 8222CF08h case    4:*/		return 0x8222CF0C;
	}
	return 0x8222CF0C;
} // Block from 8222CEF8h-8222CF0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222CF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CF0C);
		  /* 8222CF0Ch */ case    0:  		/* lwz R10, <#[R22 + 708]> */
		/* 8222CF0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x000002C4) );
		/* 8222CF0Ch case    0:*/		return 0x8222CF10;
		  /* 8222CF10h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8222CF10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222CF10h case    1:*/		return 0x8222CF14;
		  /* 8222CF14h */ case    2:  		/* bc 12, CR6_EQ, 500 */
		/* 8222CF14h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222D108;  }
		/* 8222CF14h case    2:*/		return 0x8222CF18;
		  /* 8222CF18h */ case    3:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222CF18h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222CF18h case    3:*/		return 0x8222CF1C;
		  /* 8222CF1Ch */ case    4:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8222CF1Ch case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8222CF1Ch case    4:*/		return 0x8222CF20;
		  /* 8222CF20h */ case    5:  		/* bc 12, CR0_EQ, 488 */
		/* 8222CF20h case    5:*/		if ( regs.CR[0].eq ) { return 0x8222D108;  }
		/* 8222CF20h case    5:*/		return 0x8222CF24;
		  /* 8222CF24h */ case    6:  		/* lhz R11, <#[R25 + 18]> */
		/* 8222CF24h case    6:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000012) );
		/* 8222CF24h case    6:*/		return 0x8222CF28;
		  /* 8222CF28h */ case    7:  		/* li R31, 0 */
		/* 8222CF28h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8222CF28h case    7:*/		return 0x8222CF2C;
		  /* 8222CF2Ch */ case    8:  		/* li R28, 0 */
		/* 8222CF2Ch case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8222CF2Ch case    8:*/		return 0x8222CF30;
		  /* 8222CF30h */ case    9:  		/* add R30, R11, R23 */
		/* 8222CF30h case    9:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R23);
		/* 8222CF30h case    9:*/		return 0x8222CF34;
		  /* 8222CF34h */ case   10:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 8222CF34h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 8222CF34h case   10:*/		return 0x8222CF38;
		  /* 8222CF38h */ case   11:  		/* stwx R25, <#[R11 + R10]> */
		/* 8222CF38h case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8222CF38h case   11:*/		return 0x8222CF3C;
		  /* 8222CF3Ch */ case   12:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222CF3Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222CF3Ch case   12:*/		return 0x8222CF40;
		  /* 8222CF40h */ case   13:  		/* rlwinm R27, R11, 31, 28, 31 */
		/* 8222CF40h case   13:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R27,regs.R11);
		/* 8222CF40h case   13:*/		return 0x8222CF44;
		  /* 8222CF44h */ case   14:  		/* cmplwi CR6, R27, 0 */
		/* 8222CF44h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8222CF44h case   14:*/		return 0x8222CF48;
		  /* 8222CF48h */ case   15:  		/* bc 12, CR6_EQ, 36 */
		/* 8222CF48h case   15:*/		if ( regs.CR[6].eq ) { return 0x8222CF6C;  }
		/* 8222CF48h case   15:*/		return 0x8222CF4C;
		  /* 8222CF4Ch */ case   16:  		/* addi R11, R27, -1 */
		/* 8222CF4Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 8222CF4Ch case   16:*/		return 0x8222CF50;
	}
	return 0x8222CF50;
} // Block from 8222CF0Ch-8222CF50h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222CF50h
// Function '?MarkThroughControllingBranches@Compiler@D3DXShader@@QAAXPAVInstruction@2@PAVBlock@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CF50);
		  /* 8222CF50h */ case    0:  		/* lhz R10, <#[R25 + 18]> */
		/* 8222CF50h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000012) );
		/* 8222CF50h case    0:*/		return 0x8222CF54;
		  /* 8222CF54h */ case    1:  		/* andc R11, R27, R11 */
		/* 8222CF54h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 8222CF54h case    1:*/		return 0x8222CF58;
		  /* 8222CF58h */ case    2:  		/* cntlzw R11, R11 */
		/* 8222CF58h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8222CF58h case    2:*/		return 0x8222CF5C;
		  /* 8222CF5Ch */ case    3:  		/* subf R11, R11, R10 */
		/* 8222CF5Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222CF5Ch case    3:*/		return 0x8222CF60;
		  /* 8222CF60h */ case    4:  		/* addi R4, R11, 31 */
		/* 8222CF60h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1F);
		/* 8222CF60h case    4:*/		return 0x8222CF64;
		  /* 8222CF64h */ case    5:  		/* mr R11, R4 */
		/* 8222CF64h case    5:*/		regs.R11 = regs.R4;
		/* 8222CF64h case    5:*/		return 0x8222CF68;
		  /* 8222CF68h */ case    6:  		/* b 12 */
		/* 8222CF68h case    6:*/		return 0x8222CF74;
		/* 8222CF68h case    6:*/		return 0x8222CF6C;
	}
	return 0x8222CF6C;
} // Block from 8222CF50h-8222CF6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222CF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CF6C);
		  /* 8222CF6Ch */ case    0:  		/* li R4, 0 */
		/* 8222CF6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222CF6Ch case    0:*/		return 0x8222CF70;
		  /* 8222CF70h */ case    1:  		/* li R11, 0 */
		/* 8222CF70h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222CF70h case    1:*/		return 0x8222CF74;
	}
	return 0x8222CF74;
} // Block from 8222CF6Ch-8222CF74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222CF74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CF74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CF74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CF74);
		  /* 8222CF74h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8222CF74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222CF74h case    0:*/		return 0x8222CF78;
		  /* 8222CF78h */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 8222CF78h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222CFF0;  }
		/* 8222CF78h case    1:*/		return 0x8222CF7C;
		  /* 8222CF7Ch */ case    2:  		/* cmplw CR6, R30, R4 */
		/* 8222CF7Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8222CF7Ch case    2:*/		return 0x8222CF80;
		  /* 8222CF80h */ case    3:  		/* bc 12, CR6_EQ, 96 */
		/* 8222CF80h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222CFE0;  }
		/* 8222CF80h case    3:*/		return 0x8222CF84;
		  /* 8222CF84h */ case    4:  		/* mr R3, R22 */
		/* 8222CF84h case    4:*/		regs.R3 = regs.R22;
		/* 8222CF84h case    4:*/		return 0x8222CF88;
		  /* 8222CF88h */ case    5:  		/* bl -693800 */
		/* 8222CF88h case    5:*/		regs.LR = 0x8222CF8C; return 0x82183960;
		/* 8222CF88h case    5:*/		return 0x8222CF8C;
		  /* 8222CF8Ch */ case    6:  		/* mr R29, R3 */
		/* 8222CF8Ch case    6:*/		regs.R29 = regs.R3;
		/* 8222CF8Ch case    6:*/		return 0x8222CF90;
		  /* 8222CF90h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 8222CF90h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222CF90h case    7:*/		return 0x8222CF94;
		  /* 8222CF94h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8222CF94h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8222CFA8;  }
		/* 8222CF94h case    8:*/		return 0x8222CF98;
		  /* 8222CF98h */ case    9:  		/* mr R4, R3 */
		/* 8222CF98h case    9:*/		regs.R4 = regs.R3;
		/* 8222CF98h case    9:*/		return 0x8222CF9C;
		  /* 8222CF9Ch */ case   10:  		/* mr R3, R22 */
		/* 8222CF9Ch case   10:*/		regs.R3 = regs.R22;
		/* 8222CF9Ch case   10:*/		return 0x8222CFA0;
		  /* 8222CFA0h */ case   11:  		/* bl -692696 */
		/* 8222CFA0h case   11:*/		regs.LR = 0x8222CFA4; return 0x82183DC8;
		/* 8222CFA0h case   11:*/		return 0x8222CFA4;
		  /* 8222CFA4h */ case   12:  		/* mr R31, R3 */
		/* 8222CFA4h case   12:*/		regs.R31 = regs.R3;
		/* 8222CFA4h case   12:*/		return 0x8222CFA8;
	}
	return 0x8222CFA8;
} // Block from 8222CF74h-8222CFA8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222CFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CFA8);
		  /* 8222CFA8h */ case    0:  		/* mr R4, R29 */
		/* 8222CFA8h case    0:*/		regs.R4 = regs.R29;
		/* 8222CFA8h case    0:*/		return 0x8222CFAC;
		  /* 8222CFACh */ case    1:  		/* mr R3, R22 */
		/* 8222CFACh case    1:*/		regs.R3 = regs.R22;
		/* 8222CFACh case    1:*/		return 0x8222CFB0;
		  /* 8222CFB0h */ case    2:  		/* bl -692824 */
		/* 8222CFB0h case    2:*/		regs.LR = 0x8222CFB4; return 0x82183D58;
		/* 8222CFB0h case    2:*/		return 0x8222CFB4;
		  /* 8222CFB4h */ case    3:  		/* addi R11, R3, 4 */
		/* 8222CFB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 8222CFB4h case    3:*/		return 0x8222CFB8;
		  /* 8222CFB8h */ case    4:  		/* rlwinm R10, R30, 29, 3, 28 */
		/* 8222CFB8h case    4:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R30);
		/* 8222CFB8h case    4:*/		return 0x8222CFBC;
		  /* 8222CFBCh */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222CFBCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222CFBCh case    5:*/		return 0x8222CFC0;
		  /* 8222CFC0h */ case    6:  		/* rldicl R9, R30, 0, 58 */
		/* 8222CFC0h case    6:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R30);
		/* 8222CFC0h case    6:*/		return 0x8222CFC4;
		  /* 8222CFC4h */ case    7:  		/* slw R8, R20, R3 */
		/* 8222CFC4h case    7:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R20,regs.R3);
		/* 8222CFC4h case    7:*/		return 0x8222CFC8;
		  /* 8222CFC8h */ case    8:  		/* lwzx R11, <#[R11 + R31]> */
		/* 8222CFC8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8222CFC8h case    8:*/		return 0x8222CFCC;
		  /* 8222CFCCh */ case    9:  		/* sld R9, R20, R9 */
		/* 8222CFCCh case    9:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 8222CFCCh case    9:*/		return 0x8222CFD0;
		  /* 8222CFD0h */ case   10:  		/* ldx R7, <#[R10 + R11]> */
		/* 8222CFD0h case   10:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222CFD0h case   10:*/		return 0x8222CFD4;
		  /* 8222CFD4h */ case   11:  		/* or R28, R8, R28 */
		/* 8222CFD4h case   11:*/		cpu::op::or<0>(regs,&regs.R28,regs.R8,regs.R28);
		/* 8222CFD4h case   11:*/		return 0x8222CFD8;
		  /* 8222CFD8h */ case   12:  		/* or R9, R9, R7 */
		/* 8222CFD8h case   12:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8222CFD8h case   12:*/		return 0x8222CFDC;
		  /* 8222CFDCh */ case   13:  		/* stdx R9, <#[R10 + R11]> */
		/* 8222CFDCh case   13:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222CFDCh case   13:*/		return 0x8222CFE0;
	}
	return 0x8222CFE0;
} // Block from 8222CFA8h-8222CFE0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8222CFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CFE0);
		  /* 8222CFE0h */ case    0:  		/* addi R11, R27, -1 */
		/* 8222CFE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 8222CFE0h case    0:*/		return 0x8222CFE4;
		  /* 8222CFE4h */ case    1:  		/* andc R11, R27, R11 */
		/* 8222CFE4h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 8222CFE4h case    1:*/		return 0x8222CFE8;
		  /* 8222CFE8h */ case    2:  		/* subf R27, R11, R27 */
		/* 8222CFE8h case    2:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 8222CFE8h case    2:*/		return 0x8222CFEC;
		  /* 8222CFECh */ case    3:  		/* b -168 */
		/* 8222CFECh case    3:*/		return 0x8222CF44;
		/* 8222CFECh case    3:*/		return 0x8222CFF0;
	}
	return 0x8222CFF0;
} // Block from 8222CFE0h-8222CFF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222CFF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222CFF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222CFF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222CFF0);
		  /* 8222CFF0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8222CFF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222CFF0h case    0:*/		return 0x8222CFF4;
		  /* 8222CFF4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8222CFF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222D004;  }
		/* 8222CFF4h case    1:*/		return 0x8222CFF8;
		  /* 8222CFF8h */ case    2:  		/* li R4, 4800 */
		/* 8222CFF8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222CFF8h case    2:*/		return 0x8222CFFC;
		  /* 8222CFFCh */ case    3:  		/* mr R3, R22 */
		/* 8222CFFCh case    3:*/		regs.R3 = regs.R22;
		/* 8222CFFCh case    3:*/		return 0x8222D000;
		  /* 8222D000h */ case    4:  		/* bl -897432 */
		/* 8222D000h case    4:*/		regs.LR = 0x8222D004; return 0x82151E68;
		/* 8222D000h case    4:*/		return 0x8222D004;
	}
	return 0x8222D004;
} // Block from 8222CFF0h-8222D004h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222D004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D004);
		  /* 8222D004h */ case    0:  		/* nor R11, R28, R28 */
		/* 8222D004h case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R28,regs.R28);
		/* 8222D004h case    0:*/		return 0x8222D008;
		  /* 8222D008h */ case    1:  		/* lwz R10, <#[R31 + 192]> */
		/* 8222D008h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000C0) );
		/* 8222D008h case    1:*/		return 0x8222D00C;
		  /* 8222D00Ch */ case    2:  		/* addi R9, R11, -1 */
		/* 8222D00Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8222D00Ch case    2:*/		return 0x8222D010;
		  /* 8222D010h */ case    3:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 8222D010h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 8222D010h case    3:*/		return 0x8222D014;
		  /* 8222D014h */ case    4:  		/* andc R11, R11, R9 */
		/* 8222D014h case    4:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8222D014h case    4:*/		return 0x8222D018;
		  /* 8222D018h */ case    5:  		/* cntlzw R11, R11 */
		/* 8222D018h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8222D018h case    5:*/		return 0x8222D01C;
		  /* 8222D01Ch */ case    6:  		/* subfic R29, R11, 31 */
		/* 8222D01Ch case    6:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R11,0x1F);
		/* 8222D01Ch case    6:*/		return 0x8222D020;
		  /* 8222D020h */ case    7:  		/* cmplw CR6, R29, R10 */
		/* 8222D020h case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8222D020h case    7:*/		return 0x8222D024;
		  /* 8222D024h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8222D024h case    8:*/		if ( regs.CR[6].lt ) { return 0x8222D058;  }
		/* 8222D024h case    8:*/		return 0x8222D028;
		  /* 8222D028h */ case    9:  		/* lwz R11, <#[R22 + 672]> */
		/* 8222D028h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x000002A0) );
		/* 8222D028h case    9:*/		return 0x8222D02C;
		  /* 8222D02Ch */ case   10:  		/* li R5, 0 */
		/* 8222D02Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222D02Ch case   10:*/		return 0x8222D030;
		  /* 8222D030h */ case   11:  		/* mr R3, R22 */
		/* 8222D030h case   11:*/		regs.R3 = regs.R22;
		/* 8222D030h case   11:*/		return 0x8222D034;
		  /* 8222D034h */ case   12:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 8222D034h case   12:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 8222D034h case   12:*/		return 0x8222D038;
		  /* 8222D038h */ case   13:  		/* bl -819200 */
		/* 8222D038h case   13:*/		regs.LR = 0x8222D03C; return 0x82165038;
		/* 8222D038h case   13:*/		return 0x8222D03C;
		  /* 8222D03Ch */ case   14:  		/* lwz R11, <#[R31 + 192]> */
		/* 8222D03Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 8222D03Ch case   14:*/		return 0x8222D040;
		  /* 8222D040h */ case   15:  		/* rlwinm R11, R11, 2, 27, 29 */
		/* 8222D040h case   15:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R11,regs.R11);
		/* 8222D040h case   15:*/		return 0x8222D044;
		  /* 8222D044h */ case   16:  		/* stwx R3, <#[R11 + R31]> */
		/* 8222D044h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8222D044h case   16:*/		return 0x8222D048;
		  /* 8222D048h */ case   17:  		/* lwz R11, <#[R31 + 192]> */
		/* 8222D048h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 8222D048h case   17:*/		return 0x8222D04C;
		  /* 8222D04Ch */ case   18:  		/* addi R10, R11, 1 */
		/* 8222D04Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8222D04Ch case   18:*/		return 0x8222D050;
		  /* 8222D050h */ case   19:  		/* rlwimi R10, R11, 0, 0, 28 */
		/* 8222D050h case   19:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R11);
		/* 8222D050h case   19:*/		return 0x8222D054;
		  /* 8222D054h */ case   20:  		/* stw R10, <#[R31 + 192]> */
		/* 8222D054h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000C0) );
		/* 8222D054h case   20:*/		return 0x8222D058;
	}
	return 0x8222D058;
} // Block from 8222D004h-8222D058h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8222D058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D058);
		  /* 8222D058h */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8222D058h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8222D058h case    0:*/		return 0x8222D05C;
		  /* 8222D05Ch */ case    1:  		/* rlwinm R10, R30, 29, 3, 28 */
		/* 8222D05Ch case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R30);
		/* 8222D05Ch case    1:*/		return 0x8222D060;
		  /* 8222D060h */ case    2:  		/* rldicl R9, R30, 0, 58 */
		/* 8222D060h case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R30);
		/* 8222D060h case    2:*/		return 0x8222D064;
		  /* 8222D064h */ case    3:  		/* mr R6, R29 */
		/* 8222D064h case    3:*/		regs.R6 = regs.R29;
		/* 8222D064h case    3:*/		return 0x8222D068;
		  /* 8222D068h */ case    4:  		/* sld R9, R20, R9 */
		/* 8222D068h case    4:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 8222D068h case    4:*/		return 0x8222D06C;
		  /* 8222D06Ch */ case    5:  		/* lwzx R11, <#[R11 + R31]> */
		/* 8222D06Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8222D06Ch case    5:*/		return 0x8222D070;
		  /* 8222D070h */ case    6:  		/* mr R5, R31 */
		/* 8222D070h case    6:*/		regs.R5 = regs.R31;
		/* 8222D070h case    6:*/		return 0x8222D074;
		  /* 8222D074h */ case    7:  		/* mr R4, R30 */
		/* 8222D074h case    7:*/		regs.R4 = regs.R30;
		/* 8222D074h case    7:*/		return 0x8222D078;
		  /* 8222D078h */ case    8:  		/* mr R3, R22 */
		/* 8222D078h case    8:*/		regs.R3 = regs.R22;
		/* 8222D078h case    8:*/		return 0x8222D07C;
		  /* 8222D07Ch */ case    9:  		/* ldx R8, <#[R10 + R11]> */
		/* 8222D07Ch case    9:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222D07Ch case    9:*/		return 0x8222D080;
		  /* 8222D080h */ case   10:  		/* or R9, R9, R8 */
		/* 8222D080h case   10:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8222D080h case   10:*/		return 0x8222D084;
		  /* 8222D084h */ case   11:  		/* stdx R9, <#[R10 + R11]> */
		/* 8222D084h case   11:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222D084h case   11:*/		return 0x8222D088;
		  /* 8222D088h */ case   12:  		/* bl -693000 */
		/* 8222D088h case   12:*/		regs.LR = 0x8222D08C; return 0x82183D80;
		/* 8222D088h case   12:*/		return 0x8222D08C;
		  /* 8222D08Ch */ case   13:  		/* lwz R11, <#[R25 + 8]> */
		/* 8222D08Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8222D08Ch case   13:*/		return 0x8222D090;
		  /* 8222D090h */ case   14:  		/* rlwinm R9, R11, 31, 28, 31 */
		/* 8222D090h case   14:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R9,regs.R11);
		/* 8222D090h case   14:*/		return 0x8222D094;
		  /* 8222D094h */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 8222D094h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8222D094h case   15:*/		return 0x8222D098;
		  /* 8222D098h */ case   16:  		/* bc 12, CR6_EQ, 36 */
		/* 8222D098h case   16:*/		if ( regs.CR[6].eq ) { return 0x8222D0BC;  }
		/* 8222D098h case   16:*/		return 0x8222D09C;
		  /* 8222D09Ch */ case   17:  		/* addi R11, R9, -1 */
		/* 8222D09Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 8222D09Ch case   17:*/		return 0x8222D0A0;
		  /* 8222D0A0h */ case   18:  		/* lhz R10, <#[R25 + 18]> */
		/* 8222D0A0h case   18:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000012) );
		/* 8222D0A0h case   18:*/		return 0x8222D0A4;
		  /* 8222D0A4h */ case   19:  		/* andc R11, R9, R11 */
		/* 8222D0A4h case   19:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8222D0A4h case   19:*/		return 0x8222D0A8;
		  /* 8222D0A8h */ case   20:  		/* cntlzw R11, R11 */
		/* 8222D0A8h case   20:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8222D0A8h case   20:*/		return 0x8222D0AC;
		  /* 8222D0ACh */ case   21:  		/* subf R11, R11, R10 */
		/* 8222D0ACh case   21:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222D0ACh case   21:*/		return 0x8222D0B0;
		  /* 8222D0B0h */ case   22:  		/* addi R11, R11, 31 */
		/* 8222D0B0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8222D0B0h case   22:*/		return 0x8222D0B4;
		  /* 8222D0B4h */ case   23:  		/* mr R10, R11 */
		/* 8222D0B4h case   23:*/		regs.R10 = regs.R11;
		/* 8222D0B4h case   23:*/		return 0x8222D0B8;
		  /* 8222D0B8h */ case   24:  		/* b 12 */
		/* 8222D0B8h case   24:*/		return 0x8222D0C4;
		/* 8222D0B8h case   24:*/		return 0x8222D0BC;
	}
	return 0x8222D0BC;
} // Block from 8222D058h-8222D0BCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8222D0BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D0BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D0BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D0BC);
		  /* 8222D0BCh */ case    0:  		/* li R11, 0 */
		/* 8222D0BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D0BCh case    0:*/		return 0x8222D0C0;
		  /* 8222D0C0h */ case    1:  		/* li R10, 0 */
		/* 8222D0C0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222D0C0h case    1:*/		return 0x8222D0C4;
	}
	return 0x8222D0C4;
} // Block from 8222D0BCh-8222D0C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D0C4);
		  /* 8222D0C4h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8222D0C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222D0C4h case    0:*/		return 0x8222D0C8;
		  /* 8222D0C8h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 8222D0C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222D108;  }
		/* 8222D0C8h case    1:*/		return 0x8222D0CC;
		  /* 8222D0CCh */ case    2:  		/* cmplw CR6, R30, R11 */
		/* 8222D0CCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8222D0CCh case    2:*/		return 0x8222D0D0;
		  /* 8222D0D0h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 8222D0D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222D0F8;  }
		/* 8222D0D0h case    3:*/		return 0x8222D0D4;
		  /* 8222D0D4h */ case    4:  		/* addi R8, R29, 4 */
		/* 8222D0D4h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x4);
		/* 8222D0D4h case    4:*/		return 0x8222D0D8;
		  /* 8222D0D8h */ case    5:  		/* rlwinm R10, R11, 29, 3, 28 */
		/* 8222D0D8h case    5:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R11);
		/* 8222D0D8h case    5:*/		return 0x8222D0DC;
		  /* 8222D0DCh */ case    6:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8222D0DCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8222D0DCh case    6:*/		return 0x8222D0E0;
		  /* 8222D0E0h */ case    7:  		/* rldicl R11, R11, 0, 58 */
		/* 8222D0E0h case    7:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R11,regs.R11);
		/* 8222D0E0h case    7:*/		return 0x8222D0E4;
		  /* 8222D0E4h */ case    8:  		/* sld R7, R20, R11 */
		/* 8222D0E4h case    8:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R20,regs.R11);
		/* 8222D0E4h case    8:*/		return 0x8222D0E8;
		  /* 8222D0E8h */ case    9:  		/* lwzx R11, <#[R8 + R31]> */
		/* 8222D0E8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 8222D0E8h case    9:*/		return 0x8222D0EC;
		  /* 8222D0ECh */ case   10:  		/* ldx R8, <#[R10 + R11]> */
		/* 8222D0ECh case   10:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222D0ECh case   10:*/		return 0x8222D0F0;
		  /* 8222D0F0h */ case   11:  		/* or R8, R7, R8 */
		/* 8222D0F0h case   11:*/		cpu::op::or<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8222D0F0h case   11:*/		return 0x8222D0F4;
		  /* 8222D0F4h */ case   12:  		/* stdx R8, <#[R10 + R11]> */
		/* 8222D0F4h case   12:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222D0F4h case   12:*/		return 0x8222D0F8;
	}
	return 0x8222D0F8;
} // Block from 8222D0C4h-8222D0F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222D0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D0F8);
		  /* 8222D0F8h */ case    0:  		/* addi R11, R9, -1 */
		/* 8222D0F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 8222D0F8h case    0:*/		return 0x8222D0FC;
		  /* 8222D0FCh */ case    1:  		/* andc R11, R9, R11 */
		/* 8222D0FCh case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8222D0FCh case    1:*/		return 0x8222D100;
		  /* 8222D100h */ case    2:  		/* subf R9, R11, R9 */
		/* 8222D100h case    2:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8222D100h case    2:*/		return 0x8222D104;
		  /* 8222D104h */ case    3:  		/* b -112 */
		/* 8222D104h case    3:*/		return 0x8222D094;
		/* 8222D104h case    3:*/		return 0x8222D108;
	}
	return 0x8222D108;
} // Block from 8222D0F8h-8222D108h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222D108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D108);
		  /* 8222D108h */ case    0:  		/* mr R3, R23 */
		/* 8222D108h case    0:*/		regs.R3 = regs.R23;
		/* 8222D108h case    0:*/		return 0x8222D10C;
		  /* 8222D10Ch */ case    1:  		/* b 8 */
		/* 8222D10Ch case    1:*/		return 0x8222D114;
		/* 8222D10Ch case    1:*/		return 0x8222D110;
	}
	return 0x8222D110;
} // Block from 8222D108h-8222D110h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D110);
		  /* 8222D110h */ case    0:  		/* li R3, 4 */
		/* 8222D110h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4);
		/* 8222D110h case    0:*/		return 0x8222D114;
	}
	return 0x8222D114;
} // Block from 8222D110h-8222D114h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D114);
		  /* 8222D114h */ case    0:  		/* addi R1, R1, 256 */
		/* 8222D114h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8222D114h case    0:*/		return 0x8222D118;
		  /* 8222D118h */ case    1:  		/* lfd FR30, <#[R1 - 120]> */
		/* 8222D118h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 8222D118h case    1:*/		return 0x8222D11C;
		  /* 8222D11Ch */ case    2:  		/* lfd FR31, <#[R1 - 112]> */
		/* 8222D11Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 8222D11Ch case    2:*/		return 0x8222D120;
		  /* 8222D120h */ case    3:  		/* b -1687192 */
		/* 8222D120h case    3:*/		return 0x82091288;
		/* 8222D120h case    3:*/		return 0x8222D124;
		  /* 8222D124h */ case    4:  		/* nop */
		/* 8222D124h case    4:*/		cpu::op::nop();
		/* 8222D124h case    4:*/		return 0x8222D128;
	}
	return 0x8222D128;
} // Block from 8222D114h-8222D128h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222D128h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D128);
		  /* 8222D128h */ case    0:  		/* mfspr R12, LR */
		/* 8222D128h case    0:*/		regs.R12 = regs.LR;
		/* 8222D128h case    0:*/		return 0x8222D12C;
		  /* 8222D12Ch */ case    1:  		/* bl -1687252 */
		/* 8222D12Ch case    1:*/		regs.LR = 0x8222D130; return 0x82091258;
		/* 8222D12Ch case    1:*/		return 0x8222D130;
		  /* 8222D130h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222D130h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222D130h case    2:*/		return 0x8222D134;
		  /* 8222D134h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 8222D134h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8222D134h case    3:*/		return 0x8222D138;
		  /* 8222D138h */ case    4:  		/* mr R29, R3 */
		/* 8222D138h case    4:*/		regs.R29 = regs.R3;
		/* 8222D138h case    4:*/		return 0x8222D13C;
		  /* 8222D13Ch */ case    5:  		/* mr R28, R4 */
		/* 8222D13Ch case    5:*/		regs.R28 = regs.R4;
		/* 8222D13Ch case    5:*/		return 0x8222D140;
		  /* 8222D140h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8222D140h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222D140h case    6:*/		return 0x8222D144;
		  /* 8222D144h */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 8222D144h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222D180;  }
		/* 8222D144h case    7:*/		return 0x8222D148;
		  /* 8222D148h */ case    8:  		/* lwz R10, <#[R11 + 16]> */
		/* 8222D148h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8222D148h case    8:*/		return 0x8222D14C;
		  /* 8222D14Ch */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 8222D14Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222D14Ch case    9:*/		return 0x8222D150;
		  /* 8222D150h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 8222D150h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222D170;  }
		/* 8222D150h case   10:*/		return 0x8222D154;
		  /* 8222D154h */ case   11:  		/* lwz R9, <#[R10 + 8]> */
		/* 8222D154h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8222D154h case   11:*/		return 0x8222D158;
		  /* 8222D158h */ case   12:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 8222D158h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 8222D158h case   12:*/		return 0x8222D15C;
		  /* 8222D15Ch */ case   13:  		/* cmplwi CR6, R9, 14080 */
		/* 8222D15Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 8222D15Ch case   13:*/		return 0x8222D160;
		  /* 8222D160h */ case   14:  		/* bc 4, CR6_EQ, 16 */
		/* 8222D160h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8222D170;  }
		/* 8222D160h case   14:*/		return 0x8222D164;
		  /* 8222D164h */ case   15:  		/* lwz R9, <#[R11]> */
		/* 8222D164h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222D164h case   15:*/		return 0x8222D168;
		  /* 8222D168h */ case   16:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 8222D168h case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 8222D168h case   16:*/		return 0x8222D16C;
		  /* 8222D16Ch */ case   17:  		/* bc 4, CR0_EQ, 12 */
		/* 8222D16Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x8222D178;  }
		/* 8222D16Ch case   17:*/		return 0x8222D170;
	}
	return 0x8222D170;
} // Block from 8222D128h-8222D170h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222D170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D170);
		  /* 8222D170h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222D170h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222D170h case    0:*/		return 0x8222D174;
		  /* 8222D174h */ case    1:  		/* b -52 */
		/* 8222D174h case    1:*/		return 0x8222D140;
		/* 8222D174h case    1:*/		return 0x8222D178;
	}
	return 0x8222D178;
} // Block from 8222D170h-8222D178h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D178);
		  /* 8222D178h */ case    0:  		/* mr R30, R10 */
		/* 8222D178h case    0:*/		regs.R30 = regs.R10;
		/* 8222D178h case    0:*/		return 0x8222D17C;
		  /* 8222D17Ch */ case    1:  		/* b 8 */
		/* 8222D17Ch case    1:*/		return 0x8222D184;
		/* 8222D17Ch case    1:*/		return 0x8222D180;
	}
	return 0x8222D180;
} // Block from 8222D178h-8222D180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D180);
		  /* 8222D180h */ case    0:  		/* li R30, 0 */
		/* 8222D180h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8222D180h case    0:*/		return 0x8222D184;
	}
	return 0x8222D184;
} // Block from 8222D180h-8222D184h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D184);
		  /* 8222D184h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8222D184h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222D184h case    0:*/		return 0x8222D188;
		  /* 8222D188h */ case    1:  		/* bc 12, CR6_EQ, 364 */
		/* 8222D188h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222D2F4;  }
		/* 8222D188h case    1:*/		return 0x8222D18C;
		  /* 8222D18Ch */ case    2:  		/* lwz R6, <#[R30 + 4]> */
		/* 8222D18Ch case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 8222D18Ch case    2:*/		return 0x8222D190;
		  /* 8222D190h */ case    3:  		/* li R3, 0 */
		/* 8222D190h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222D190h case    3:*/		return 0x8222D194;
		  /* 8222D194h */ case    4:  		/* li R4, 1 */
		/* 8222D194h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222D194h case    4:*/		return 0x8222D198;
		  /* 8222D198h */ case    5:  		/* cmplwi CR6, R6, 0 */
		/* 8222D198h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8222D198h case    5:*/		return 0x8222D19C;
		  /* 8222D19Ch */ case    6:  		/* bc 12, CR6_EQ, 96 */
		/* 8222D19Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8222D1FC;  }
		/* 8222D19Ch case    6:*/		return 0x8222D1A0;
		  /* 8222D1A0h */ case    7:  		/* lwz R11, <#[R6 + 16]> */
		/* 8222D1A0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 8222D1A0h case    7:*/		return 0x8222D1A4;
		  /* 8222D1A4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8222D1A4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222D1A4h case    8:*/		return 0x8222D1A8;
		  /* 8222D1A8h */ case    9:  		/* bc 12, CR6_EQ, 76 */
		/* 8222D1A8h case    9:*/		if ( regs.CR[6].eq ) { return 0x8222D1F4;  }
		/* 8222D1A8h case    9:*/		return 0x8222D1AC;
		  /* 8222D1ACh */ case   10:  		/* lwz R7, <#[R6]> */
		/* 8222D1ACh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 8222D1ACh case   10:*/		return 0x8222D1B0;
		  /* 8222D1B0h */ case   11:  		/* rlwinm. R8, R7, 7, 29, 31 */
		/* 8222D1B0h case   11:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R8,regs.R7);
		/* 8222D1B0h case   11:*/		return 0x8222D1B4;
		  /* 8222D1B4h */ case   12:  		/* bc 12, CR0_EQ, 64 */
		/* 8222D1B4h case   12:*/		if ( regs.CR[0].eq ) { return 0x8222D1F4;  }
		/* 8222D1B4h case   12:*/		return 0x8222D1B8;
		  /* 8222D1B8h */ case   13:  		/* li R9, 0 */
		/* 8222D1B8h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8222D1B8h case   13:*/		return 0x8222D1BC;
		  /* 8222D1BCh */ case   14:  		/* li R11, 0 */
		/* 8222D1BCh case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D1BCh case   14:*/		return 0x8222D1C0;
		  /* 8222D1C0h */ case   15:  		/* cmplwi CR6, R8, 0 */
		/* 8222D1C0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8222D1C0h case   15:*/		return 0x8222D1C4;
		  /* 8222D1C4h */ case   16:  		/* bc 12, CR6_EQ, 44 */
		/* 8222D1C4h case   16:*/		if ( regs.CR[6].eq ) { return 0x8222D1F0;  }
		/* 8222D1C4h case   16:*/		return 0x8222D1C8;
		  /* 8222D1C8h */ case   17:  		/* li R10, 0 */
		/* 8222D1C8h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222D1C8h case   17:*/		return 0x8222D1CC;
		  /* 8222D1CCh */ case   18:  		/* rlwinm R31, R7, 27, 24, 31 */
		/* 8222D1CCh case   18:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R31,regs.R7);
		/* 8222D1CCh case   18:*/		return 0x8222D1D0;
		  /* 8222D1D0h */ case   19:  		/* addi R11, R11, 1 */
		/* 8222D1D0h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222D1D0h case   19:*/		return 0x8222D1D4;
		  /* 8222D1D4h */ case   20:  		/* srw R31, R31, R10 */
		/* 8222D1D4h case   20:*/		cpu::op::srw<0>(regs,&regs.R31,regs.R31,regs.R10);
		/* 8222D1D4h case   20:*/		return 0x8222D1D8;
		  /* 8222D1D8h */ case   21:  		/* rlwinm R31, R31, 0, 30, 31 */
		/* 8222D1D8h case   21:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R31,regs.R31);
		/* 8222D1D8h case   21:*/		return 0x8222D1DC;
		  /* 8222D1DCh */ case   22:  		/* addi R10, R10, 2 */
		/* 8222D1DCh case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8222D1DCh case   22:*/		return 0x8222D1E0;
		  /* 8222D1E0h */ case   23:  		/* slw R31, R4, R31 */
		/* 8222D1E0h case   23:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R4,regs.R31);
		/* 8222D1E0h case   23:*/		return 0x8222D1E4;
		  /* 8222D1E4h */ case   24:  		/* or R9, R31, R9 */
		/* 8222D1E4h case   24:*/		cpu::op::or<0>(regs,&regs.R9,regs.R31,regs.R9);
		/* 8222D1E4h case   24:*/		return 0x8222D1E8;
		  /* 8222D1E8h */ case   25:  		/* cmplw CR6, R11, R8 */
		/* 8222D1E8h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8222D1E8h case   25:*/		return 0x8222D1EC;
		  /* 8222D1ECh */ case   26:  		/* bc 12, CR6_LT, -32 */
		/* 8222D1ECh case   26:*/		if ( regs.CR[6].lt ) { return 0x8222D1CC;  }
		/* 8222D1ECh case   26:*/		return 0x8222D1F0;
	}
	return 0x8222D1F0;
} // Block from 8222D184h-8222D1F0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222D1F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D1F0);
		  /* 8222D1F0h */ case    0:  		/* or R3, R9, R3 */
		/* 8222D1F0h case    0:*/		cpu::op::or<0>(regs,&regs.R3,regs.R9,regs.R3);
		/* 8222D1F0h case    0:*/		return 0x8222D1F4;
	}
	return 0x8222D1F4;
} // Block from 8222D1F0h-8222D1F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D1F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D1F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D1F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D1F4);
		  /* 8222D1F4h */ case    0:  		/* lwz R6, <#[R6 + 8]> */
		/* 8222D1F4h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000008) );
		/* 8222D1F4h case    0:*/		return 0x8222D1F8;
		  /* 8222D1F8h */ case    1:  		/* b -96 */
		/* 8222D1F8h case    1:*/		return 0x8222D198;
		/* 8222D1F8h case    1:*/		return 0x8222D1FC;
	}
	return 0x8222D1FC;
} // Block from 8222D1F4h-8222D1FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D1FC);
		  /* 8222D1FCh */ case    0:  		/* lwz R9, <#[R30 + 8]> */
		/* 8222D1FCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D1FCh case    0:*/		return 0x8222D200;
		  /* 8222D200h */ case    1:  		/* li R11, 0 */
		/* 8222D200h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D200h case    1:*/		return 0x8222D204;
		  /* 8222D204h */ case    2:  		/* addi R10, R30, 44 */
		/* 8222D204h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x2C);
		/* 8222D204h case    2:*/		return 0x8222D208;
		  /* 8222D208h */ case    3:  		/* rlwinm R8, R9, 13, 29, 31 */
		/* 8222D208h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R8,regs.R9);
		/* 8222D208h case    3:*/		return 0x8222D20C;
		  /* 8222D20Ch */ case    4:  		/* cmplw CR6, R11, R8 */
		/* 8222D20Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8222D20Ch case    4:*/		return 0x8222D210;
		  /* 8222D210h */ case    5:  		/* bc 4, CR6_LT, 228 */
		/* 8222D210h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8222D2F4;  }
		/* 8222D210h case    5:*/		return 0x8222D214;
		  /* 8222D214h */ case    6:  		/* lwz R9, <#[R10]> */
		/* 8222D214h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222D214h case    6:*/		return 0x8222D218;
		  /* 8222D218h */ case    7:  		/* lwz R7, <#[R9 + 12]> */
		/* 8222D218h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x0000000C) );
		/* 8222D218h case    7:*/		return 0x8222D21C;
		  /* 8222D21Ch */ case    8:  		/* cmplw CR6, R7, R28 */
		/* 8222D21Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R28);
		/* 8222D21Ch case    8:*/		return 0x8222D220;
		  /* 8222D220h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 8222D220h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222D234;  }
		/* 8222D220h case    9:*/		return 0x8222D224;
		  /* 8222D224h */ case   10:  		/* lwz R9, <#[R9]> */
		/* 8222D224h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8222D224h case   10:*/		return 0x8222D228;
	}
	return 0x8222D228;
} // Block from 8222D1FCh-8222D228h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222D228h
// Function '?FindConstantOutput@Compiler@D3DXShader@@AAA?AW4Component@2@PAVInstruction@2@MI_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D228);
		  /* 8222D228h */ case    0:  		/* rlwinm R9, R9, 27, 30, 31 */
		/* 8222D228h case    0:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R9,regs.R9);
		/* 8222D228h case    0:*/		return 0x8222D22C;
		  /* 8222D22Ch */ case    1:  		/* cmpw CR6, R9, R5 */
		/* 8222D22Ch case    1:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R5);
		/* 8222D22Ch case    1:*/		return 0x8222D230;
		  /* 8222D230h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 8222D230h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222D240;  }
		/* 8222D230h case    2:*/		return 0x8222D234;
	}
	return 0x8222D234;
} // Block from 8222D228h-8222D234h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D234);
		  /* 8222D234h */ case    0:  		/* addi R11, R11, 1 */
		/* 8222D234h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222D234h case    0:*/		return 0x8222D238;
		  /* 8222D238h */ case    1:  		/* addi R10, R10, 4 */
		/* 8222D238h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8222D238h case    1:*/		return 0x8222D23C;
		  /* 8222D23Ch */ case    2:  		/* b -48 */
		/* 8222D23Ch case    2:*/		return 0x8222D20C;
		/* 8222D23Ch case    2:*/		return 0x8222D240;
	}
	return 0x8222D240;
} // Block from 8222D234h-8222D240h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D240);
		  /* 8222D240h */ case    0:  		/* slw R11, R4, R11 */
		/* 8222D240h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 8222D240h case    0:*/		return 0x8222D244;
		  /* 8222D244h */ case    1:  		/* and. R11, R11, R3 */
		/* 8222D244h case    1:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8222D244h case    1:*/		return 0x8222D248;
		  /* 8222D248h */ case    2:  		/* bc 4, CR0_EQ, 188 */
		/* 8222D248h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222D304;  }
		/* 8222D248h case    2:*/		return 0x8222D24C;
		  /* 8222D24Ch */ case    3:  		/* mr R4, R30 */
		/* 8222D24Ch case    3:*/		regs.R4 = regs.R30;
		/* 8222D24Ch case    3:*/		return 0x8222D250;
		  /* 8222D250h */ case    4:  		/* lwz R5, <#[R29 + 652]> */
		/* 8222D250h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000028C) );
		/* 8222D250h case    4:*/		return 0x8222D254;
		  /* 8222D254h */ case    5:  		/* mr R3, R29 */
		/* 8222D254h case    5:*/		regs.R3 = regs.R29;
		/* 8222D254h case    5:*/		return 0x8222D258;
		  /* 8222D258h */ case    6:  		/* bl -398632 */
		/* 8222D258h case    6:*/		regs.LR = 0x8222D25C; return 0x821CBD30;
		/* 8222D258h case    6:*/		return 0x8222D25C;
		  /* 8222D25Ch */ case    7:  		/* or. R31, R3, R3 */
		/* 8222D25Ch case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8222D25Ch case    7:*/		return 0x8222D260;
		  /* 8222D260h */ case    8:  		/* bc 12, CR0_EQ, 148 */
		/* 8222D260h case    8:*/		if ( regs.CR[0].eq ) { return 0x8222D2F4;  }
		/* 8222D260h case    8:*/		return 0x8222D264;
		  /* 8222D264h */ case    9:  		/* lwz R11, <#[R30 + 8]> */
		/* 8222D264h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D264h case    9:*/		return 0x8222D268;
		  /* 8222D268h */ case   10:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8222D268h case   10:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8222D268h case   10:*/		return 0x8222D26C;
		  /* 8222D26Ch */ case   11:  		/* bc 12, CR0_EQ, 116 */
		/* 8222D26Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8222D2E0;  }
		/* 8222D26Ch case   11:*/		return 0x8222D270;
		  /* 8222D270h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222D270h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D270h case   12:*/		return 0x8222D274;
		  /* 8222D274h */ case   13:  		/* mr R3, R30 */
		/* 8222D274h case   13:*/		regs.R3 = regs.R30;
		/* 8222D274h case   13:*/		return 0x8222D278;
		  /* 8222D278h */ case   14:  		/* oris R11, R11, 128 */
		/* 8222D278h case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8222D278h case   14:*/		return 0x8222D27C;
		  /* 8222D27Ch */ case   15:  		/* stw R11, <#[R31 + 8]> */
		/* 8222D27Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D27Ch case   15:*/		return 0x8222D280;
		  /* 8222D280h */ case   16:  		/* bl -694680 */
		/* 8222D280h case   16:*/		regs.LR = 0x8222D284; return 0x821838E8;
		/* 8222D280h case   16:*/		return 0x8222D284;
		  /* 8222D284h */ case   17:  		/* sth R3, <#[R31 + 18]> */
		/* 8222D284h case   17:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 8222D284h case   17:*/		return 0x8222D288;
		  /* 8222D288h */ case   18:  		/* lwz R3, <#[R29 + 660]> */
		/* 8222D288h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000294) );
		/* 8222D288h case   18:*/		return 0x8222D28C;
		  /* 8222D28Ch */ case   19:  		/* lwz R11, <#[R3 + 4]> */
		/* 8222D28Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222D28Ch case   19:*/		return 0x8222D290;
		  /* 8222D290h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222D290h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222D290h case   20:*/		return 0x8222D294;
		  /* 8222D294h */ case   21:  		/* bc 4, CR0_EQ, 40 */
		/* 8222D294h case   21:*/		if ( !regs.CR[0].eq ) { return 0x8222D2BC;  }
		/* 8222D294h case   21:*/		return 0x8222D298;
		  /* 8222D298h */ case   22:  		/* lwz R11, <#[R3]> */
		/* 8222D298h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222D298h case   22:*/		return 0x8222D29C;
		  /* 8222D29Ch */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222D29Ch case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222D29Ch case   23:*/		return 0x8222D2A0;
		  /* 8222D2A0h */ case   24:  		/* addic. R11, R11, -4 */
		/* 8222D2A0h case   24:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8222D2A0h case   24:*/		return 0x8222D2A4;
		  /* 8222D2A4h */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 8222D2A4h case   25:*/		if ( regs.CR[0].eq ) { return 0x8222D2BC;  }
		/* 8222D2A4h case   25:*/		return 0x8222D2A8;
		  /* 8222D2A8h */ case   26:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222D2A8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222D2A8h case   26:*/		return 0x8222D2AC;
		  /* 8222D2ACh */ case   27:  		/* lwz R9, <#[R11 + 12]> */
		/* 8222D2ACh case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222D2ACh case   27:*/		return 0x8222D2B0;
		  /* 8222D2B0h */ case   28:  		/* addi R10, R10, 1 */
		/* 8222D2B0h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222D2B0h case   28:*/		return 0x8222D2B4;
		  /* 8222D2B4h */ case   29:  		/* cmplw CR6, R10, R9 */
		/* 8222D2B4h case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8222D2B4h case   29:*/		return 0x8222D2B8;
		  /* 8222D2B8h */ case   30:  		/* bc 4, CR6_GT, 16 */
		/* 8222D2B8h case   30:*/		if ( !regs.CR[6].gt ) { return 0x8222D2C8;  }
		/* 8222D2B8h case   30:*/		return 0x8222D2BC;
	}
	return 0x8222D2BC;
} // Block from 8222D240h-8222D2BCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 8222D2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D2BC);
		  /* 8222D2BCh */ case    0:  		/* li R4, 1 */
		/* 8222D2BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222D2BCh case    0:*/		return 0x8222D2C0;
		  /* 8222D2C0h */ case    1:  		/* bl -655864 */
		/* 8222D2C0h case    1:*/		regs.LR = 0x8222D2C4; return 0x8218D0C8;
		/* 8222D2C0h case    1:*/		return 0x8222D2C4;
		  /* 8222D2C4h */ case    2:  		/* mr R11, R3 */
		/* 8222D2C4h case    2:*/		regs.R11 = regs.R3;
		/* 8222D2C4h case    2:*/		return 0x8222D2C8;
	}
	return 0x8222D2C8;
} // Block from 8222D2BCh-8222D2C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D2C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D2C8);
		  /* 8222D2C8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222D2C8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222D2C8h case    0:*/		return 0x8222D2CC;
		  /* 8222D2CCh */ case    1:  		/* addi R9, R10, 4 */
		/* 8222D2CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 8222D2CCh case    1:*/		return 0x8222D2D0;
		  /* 8222D2D0h */ case    2:  		/* addi R8, R10, 1 */
		/* 8222D2D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8222D2D0h case    2:*/		return 0x8222D2D4;
		  /* 8222D2D4h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 8222D2D4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 8222D2D4h case    3:*/		return 0x8222D2D8;
		  /* 8222D2D8h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 8222D2D8h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8222D2D8h case    4:*/		return 0x8222D2DC;
		  /* 8222D2DCh */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 8222D2DCh case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222D2DCh case    5:*/		return 0x8222D2E0;
	}
	return 0x8222D2E0;
} // Block from 8222D2C8h-8222D2E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222D2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D2E0);
		  /* 8222D2E0h */ case    0:  		/* li R6, 1 */
		/* 8222D2E0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222D2E0h case    0:*/		return 0x8222D2E4;
		  /* 8222D2E4h */ case    1:  		/* lwz R5, <#[R29 + 652]> */
		/* 8222D2E4h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000028C) );
		/* 8222D2E4h case    1:*/		return 0x8222D2E8;
		  /* 8222D2E8h */ case    2:  		/* mr R4, R30 */
		/* 8222D2E8h case    2:*/		regs.R4 = regs.R30;
		/* 8222D2E8h case    2:*/		return 0x8222D2EC;
		  /* 8222D2ECh */ case    3:  		/* mr R3, R29 */
		/* 8222D2ECh case    3:*/		regs.R3 = regs.R29;
		/* 8222D2ECh case    3:*/		return 0x8222D2F0;
		  /* 8222D2F0h */ case    4:  		/* bl -7976 */
		/* 8222D2F0h case    4:*/		regs.LR = 0x8222D2F4; return 0x8222B3C8;
		/* 8222D2F0h case    4:*/		return 0x8222D2F4;
	}
	return 0x8222D2F4;
} // Block from 8222D2E0h-8222D2F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222D2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D2F4);
		  /* 8222D2F4h */ case    0:  		/* mr R4, R28 */
		/* 8222D2F4h case    0:*/		regs.R4 = regs.R28;
		/* 8222D2F4h case    0:*/		return 0x8222D2F8;
		  /* 8222D2F8h */ case    1:  		/* lwz R5, <#[R29 + 660]> */
		/* 8222D2F8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000294) );
		/* 8222D2F8h case    1:*/		return 0x8222D2FC;
		  /* 8222D2FCh */ case    2:  		/* mr R3, R29 */
		/* 8222D2FCh case    2:*/		regs.R3 = regs.R29;
		/* 8222D2FCh case    2:*/		return 0x8222D300;
		  /* 8222D300h */ case    3:  		/* bl -460024 */
		/* 8222D300h case    3:*/		regs.LR = 0x8222D304; return 0x821BCE08;
		/* 8222D300h case    3:*/		return 0x8222D304;
	}
	return 0x8222D304;
} // Block from 8222D2F4h-8222D304h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222D304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D304);
		  /* 8222D304h */ case    0:  		/* addi R1, R1, 128 */
		/* 8222D304h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8222D304h case    0:*/		return 0x8222D308;
		  /* 8222D308h */ case    1:  		/* b -1687648 */
		/* 8222D308h case    1:*/		return 0x820912A8;
		/* 8222D308h case    1:*/		return 0x8222D30C;
		  /* 8222D30Ch */ case    2:  		/* nop */
		/* 8222D30Ch case    2:*/		cpu::op::nop();
		/* 8222D30Ch case    2:*/		return 0x8222D310;
	}
	return 0x8222D310;
} // Block from 8222D304h-8222D310h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D310h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D310);
		  /* 8222D310h */ case    0:  		/* mfspr R12, LR */
		/* 8222D310h case    0:*/		regs.R12 = regs.LR;
		/* 8222D310h case    0:*/		return 0x8222D314;
		  /* 8222D314h */ case    1:  		/* bl -1687768 */
		/* 8222D314h case    1:*/		regs.LR = 0x8222D318; return 0x8209123C;
		/* 8222D314h case    1:*/		return 0x8222D318;
		  /* 8222D318h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8222D318h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8222D318h case    2:*/		return 0x8222D31C;
		  /* 8222D31Ch */ case    3:  		/* addi R25, R4, 4 */
		/* 8222D31Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R4,0x4);
		/* 8222D31Ch case    3:*/		return 0x8222D320;
		  /* 8222D320h */ case    4:  		/* mr R24, R3 */
		/* 8222D320h case    4:*/		regs.R24 = regs.R3;
		/* 8222D320h case    4:*/		return 0x8222D324;
		  /* 8222D324h */ case    5:  		/* mr R22, R4 */
		/* 8222D324h case    5:*/		regs.R22 = regs.R4;
		/* 8222D324h case    5:*/		return 0x8222D328;
		  /* 8222D328h */ case    6:  		/* mr R26, R5 */
		/* 8222D328h case    6:*/		regs.R26 = regs.R5;
		/* 8222D328h case    6:*/		return 0x8222D32C;
		  /* 8222D32Ch */ case    7:  		/* mr R28, R6 */
		/* 8222D32Ch case    7:*/		regs.R28 = regs.R6;
		/* 8222D32Ch case    7:*/		return 0x8222D330;
		  /* 8222D330h */ case    8:  		/* mr R27, R7 */
		/* 8222D330h case    8:*/		regs.R27 = regs.R7;
		/* 8222D330h case    8:*/		return 0x8222D334;
		  /* 8222D334h */ case    9:  		/* mr R23, R8 */
		/* 8222D334h case    9:*/		regs.R23 = regs.R8;
		/* 8222D334h case    9:*/		return 0x8222D338;
		  /* 8222D338h */ case   10:  		/* li R21, 0 */
		/* 8222D338h case   10:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8222D338h case   10:*/		return 0x8222D33C;
		  /* 8222D33Ch */ case   11:  		/* mr R29, R25 */
		/* 8222D33Ch case   11:*/		regs.R29 = regs.R25;
		/* 8222D33Ch case   11:*/		return 0x8222D340;
		  /* 8222D340h */ case   12:  		/* lwz R31, <#[R29]> */
		/* 8222D340h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 8222D340h case   12:*/		return 0x8222D344;
		  /* 8222D344h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 8222D344h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222D344h case   13:*/		return 0x8222D348;
		  /* 8222D348h */ case   14:  		/* bc 12, CR6_EQ, 556 */
		/* 8222D348h case   14:*/		if ( regs.CR[6].eq ) { return 0x8222D574;  }
		/* 8222D348h case   14:*/		return 0x8222D34C;
		  /* 8222D34Ch */ case   15:  		/* lwz R30, <#[R31 + 16]> */
		/* 8222D34Ch case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 8222D34Ch case   15:*/		return 0x8222D350;
		  /* 8222D350h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 8222D350h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222D350h case   16:*/		return 0x8222D354;
		  /* 8222D354h */ case   17:  		/* bc 12, CR6_EQ, 512 */
		/* 8222D354h case   17:*/		if ( regs.CR[6].eq ) { return 0x8222D554;  }
		/* 8222D354h case   17:*/		return 0x8222D358;
		  /* 8222D358h */ case   18:  		/* lwz R10, <#[R31]> */
		/* 8222D358h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222D358h case   18:*/		return 0x8222D35C;
		  /* 8222D35Ch */ case   19:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 8222D35Ch case   19:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 8222D35Ch case   19:*/		return 0x8222D360;
		  /* 8222D360h */ case   20:  		/* bc 4, CR0_EQ, 420 */
		/* 8222D360h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8222D504;  }
		/* 8222D360h case   20:*/		return 0x8222D364;
		  /* 8222D364h */ case   21:  		/* lwz R11, <#[R30 + 28]> */
		/* 8222D364h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8222D364h case   21:*/		return 0x8222D368;
		  /* 8222D368h */ case   22:  		/* lwz R9, <#[R22 + 28]> */
		/* 8222D368h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R22 + 0x0000001C) );
		/* 8222D368h case   22:*/		return 0x8222D36C;
		  /* 8222D36Ch */ case   23:  		/* cmpw CR6, R11, R9 */
		/* 8222D36Ch case   23:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 8222D36Ch case   23:*/		return 0x8222D370;
		  /* 8222D370h */ case   24:  		/* bc 4, CR6_EQ, 484 */
		/* 8222D370h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8222D554;  }
		/* 8222D370h case   24:*/		return 0x8222D374;
		  /* 8222D374h */ case   25:  		/* rlwinm R11, R10, 2, 31, 31 */
		/* 8222D374h case   25:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R11,regs.R10);
		/* 8222D374h case   25:*/		return 0x8222D378;
		  /* 8222D378h */ case   26:  		/* addic R9, R11, -1 */
		/* 8222D378h case   26:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8222D378h case   26:*/		return 0x8222D37C;
		  /* 8222D37Ch */ case   27:  		/* subfe R9, R9, R11 */
		/* 8222D37Ch case   27:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8222D37Ch case   27:*/		return 0x8222D380;
		  /* 8222D380h */ case   28:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 8222D380h case   28:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 8222D380h case   28:*/		return 0x8222D384;
		  /* 8222D384h */ case   29:  		/* bc 12, CR0_EQ, 244 */
		/* 8222D384h case   29:*/		if ( regs.CR[0].eq ) { return 0x8222D478;  }
		/* 8222D384h case   29:*/		return 0x8222D388;
		  /* 8222D388h */ case   30:  		/* rlwinm R11, R10, 19, 20, 31 */
		/* 8222D388h case   30:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R11,regs.R10);
		/* 8222D388h case   30:*/		return 0x8222D38C;
		  /* 8222D38Ch */ case   31:  		/* cmplwi CR6, R11, 1 */
		/* 8222D38Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8222D38Ch case   31:*/		return 0x8222D390;
		  /* 8222D390h */ case   32:  		/* bc 12, CR6_LT, 148 */
		/* 8222D390h case   32:*/		if ( regs.CR[6].lt ) { return 0x8222D424;  }
		/* 8222D390h case   32:*/		return 0x8222D394;
		  /* 8222D394h */ case   33:  		/* bc 12, CR6_EQ, 120 */
		/* 8222D394h case   33:*/		if ( regs.CR[6].eq ) { return 0x8222D40C;  }
		/* 8222D394h case   33:*/		return 0x8222D398;
		  /* 8222D398h */ case   34:  		/* cmplwi CR6, R11, 3 */
		/* 8222D398h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8222D398h case   34:*/		return 0x8222D39C;
		  /* 8222D39Ch */ case   35:  		/* bc 12, CR6_LT, 96 */
		/* 8222D39Ch case   35:*/		if ( regs.CR[6].lt ) { return 0x8222D3FC;  }
		/* 8222D39Ch case   35:*/		return 0x8222D3A0;
		  /* 8222D3A0h */ case   36:  		/* bc 12, CR6_EQ, 76 */
		/* 8222D3A0h case   36:*/		if ( regs.CR[6].eq ) { return 0x8222D3EC;  }
		/* 8222D3A0h case   36:*/		return 0x8222D3A4;
		  /* 8222D3A4h */ case   37:  		/* cmplwi CR6, R11, 5 */
		/* 8222D3A4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 8222D3A4h case   37:*/		return 0x8222D3A8;
		  /* 8222D3A8h */ case   38:  		/* bc 12, CR6_LT, 136 */
		/* 8222D3A8h case   38:*/		if ( regs.CR[6].lt ) { return 0x8222D430;  }
		/* 8222D3A8h case   38:*/		return 0x8222D3AC;
		  /* 8222D3ACh */ case   39:  		/* cmplwi CR6, R11, 6 */
		/* 8222D3ACh case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 8222D3ACh case   39:*/		return 0x8222D3B0;
		  /* 8222D3B0h */ case   40:  		/* bc 12, CR6_EQ, 24 */
		/* 8222D3B0h case   40:*/		if ( regs.CR[6].eq ) { return 0x8222D3C8;  }
		/* 8222D3B0h case   40:*/		return 0x8222D3B4;
		  /* 8222D3B4h */ case   41:  		/* cmplwi CR6, R11, 7 */
		/* 8222D3B4h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 8222D3B4h case   41:*/		return 0x8222D3B8;
		  /* 8222D3B8h */ case   42:  		/* bc 4, CR6_EQ, 432 */
		/* 8222D3B8h case   42:*/		if ( !regs.CR[6].eq ) { return 0x8222D568;  }
		/* 8222D3B8h case   42:*/		return 0x8222D3BC;
		  /* 8222D3BCh */ case   43:  		/* mr R3, R26 */
		/* 8222D3BCh case   43:*/		regs.R3 = regs.R26;
		/* 8222D3BCh case   43:*/		return 0x8222D3C0;
		  /* 8222D3C0h */ case   44:  		/* bl -824080 */
		/* 8222D3C0h case   44:*/		regs.LR = 0x8222D3C4; return 0x821640B0;
		/* 8222D3C0h case   44:*/		return 0x8222D3C4;
		  /* 8222D3C4h */ case   45:  		/* b 156 */
		/* 8222D3C4h case   45:*/		return 0x8222D460;
		/* 8222D3C4h case   45:*/		return 0x8222D3C8;
	}
	return 0x8222D3C8;
} // Block from 8222D310h-8222D3C8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8222D3C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D3C8);
		  /* 8222D3C8h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D3C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D3C8h case    0:*/		return 0x8222D3CC;
		  /* 8222D3CCh */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222D3CCh case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222D3CCh case    1:*/		return 0x8222D3D0;
		  /* 8222D3D0h */ case    2:  		/* cmplwi CR6, R11, 32 */
		/* 8222D3D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 8222D3D0h case    2:*/		return 0x8222D3D4;
		  /* 8222D3D4h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 8222D3D4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8222D3E4;  }
		/* 8222D3D4h case    3:*/		return 0x8222D3D8;
		  /* 8222D3D8h */ case    4:  		/* cmplwi CR6, R11, 82 */
		/* 8222D3D8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 8222D3D8h case    4:*/		return 0x8222D3DC;
		  /* 8222D3DCh */ case    5:  		/* li R11, 1 */
		/* 8222D3DCh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222D3DCh case    5:*/		return 0x8222D3E0;
		  /* 8222D3E0h */ case    6:  		/* bc 4, CR6_GT, 124 */
		/* 8222D3E0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8222D45C;  }
		/* 8222D3E0h case    6:*/		return 0x8222D3E4;
	}
	return 0x8222D3E4;
} // Block from 8222D3C8h-8222D3E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222D3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D3E4);
		  /* 8222D3E4h */ case    0:  		/* li R11, 0 */
		/* 8222D3E4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D3E4h case    0:*/		return 0x8222D3E8;
		  /* 8222D3E8h */ case    1:  		/* b 116 */
		/* 8222D3E8h case    1:*/		return 0x8222D45C;
		/* 8222D3E8h case    1:*/		return 0x8222D3EC;
	}
	return 0x8222D3EC;
} // Block from 8222D3E4h-8222D3ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D3EC);
		  /* 8222D3ECh */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D3ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D3ECh case    0:*/		return 0x8222D3F0;
		  /* 8222D3F0h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222D3F0h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222D3F0h case    1:*/		return 0x8222D3F4;
		  /* 8222D3F4h */ case    2:  		/* addi R11, R11, -13056 */
		/* 8222D3F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFCD00);
		/* 8222D3F4h case    2:*/		return 0x8222D3F8;
		  /* 8222D3F8h */ case    3:  		/* b 32 */
		/* 8222D3F8h case    3:*/		return 0x8222D418;
		/* 8222D3F8h case    3:*/		return 0x8222D3FC;
	}
	return 0x8222D3FC;
} // Block from 8222D3ECh-8222D3FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222D3FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D3FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D3FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D3FC);
		  /* 8222D3FCh */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D3FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D3FCh case    0:*/		return 0x8222D400;
		  /* 8222D400h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222D400h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222D400h case    1:*/		return 0x8222D404;
		  /* 8222D404h */ case    2:  		/* addi R11, R11, -12928 */
		/* 8222D404h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFCD80);
		/* 8222D404h case    2:*/		return 0x8222D408;
		  /* 8222D408h */ case    3:  		/* b 16 */
		/* 8222D408h case    3:*/		return 0x8222D418;
		/* 8222D408h case    3:*/		return 0x8222D40C;
	}
	return 0x8222D40C;
} // Block from 8222D3FCh-8222D40Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222D40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D40C);
		  /* 8222D40Ch */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D40Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D40Ch case    0:*/		return 0x8222D410;
		  /* 8222D410h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222D410h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222D410h case    1:*/		return 0x8222D414;
		  /* 8222D414h */ case    2:  		/* addi R11, R11, -12544 */
		/* 8222D414h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFCF00);
		/* 8222D414h case    2:*/		return 0x8222D418;
	}
	return 0x8222D418;
} // Block from 8222D40Ch-8222D418h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D418);
		  /* 8222D418h */ case    0:  		/* cntlzw R11, R11 */
		/* 8222D418h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8222D418h case    0:*/		return 0x8222D41C;
		  /* 8222D41Ch */ case    1:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8222D41Ch case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8222D41Ch case    1:*/		return 0x8222D420;
		  /* 8222D420h */ case    2:  		/* b 64 */
		/* 8222D420h case    2:*/		return 0x8222D460;
		/* 8222D420h case    2:*/		return 0x8222D424;
	}
	return 0x8222D424;
} // Block from 8222D418h-8222D424h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D424);
		  /* 8222D424h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D424h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D424h case    0:*/		return 0x8222D428;
		  /* 8222D428h */ case    1:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 8222D428h case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 8222D428h case    1:*/		return 0x8222D42C;
		  /* 8222D42Ch */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8222D42Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222D438;  }
		/* 8222D42Ch case    2:*/		return 0x8222D430;
	}
	return 0x8222D430;
} // Block from 8222D424h-8222D430h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D430);
		  /* 8222D430h */ case    0:  		/* li R3, 0 */
		/* 8222D430h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222D430h case    0:*/		return 0x8222D434;
		  /* 8222D434h */ case    1:  		/* b 44 */
		/* 8222D434h case    1:*/		return 0x8222D460;
		/* 8222D434h case    1:*/		return 0x8222D438;
	}
	return 0x8222D438;
} // Block from 8222D430h-8222D438h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D438);
		  /* 8222D438h */ case    0:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222D438h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222D438h case    0:*/		return 0x8222D43C;
		  /* 8222D43Ch */ case    1:  		/* cmplwi CR6, R11, 30 */
		/* 8222D43Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 8222D43Ch case    1:*/		return 0x8222D440;
		  /* 8222D440h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8222D440h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222D458;  }
		/* 8222D440h case    2:*/		return 0x8222D444;
		  /* 8222D444h */ case    3:  		/* cmplwi CR6, R11, 55 */
		/* 8222D444h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000037);
		/* 8222D444h case    3:*/		return 0x8222D448;
		  /* 8222D448h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8222D448h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222D458;  }
		/* 8222D448h case    4:*/		return 0x8222D44C;
		  /* 8222D44Ch */ case    5:  		/* cmplwi CR6, R11, 56 */
		/* 8222D44Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000038);
		/* 8222D44Ch case    5:*/		return 0x8222D450;
		  /* 8222D450h */ case    6:  		/* li R11, 0 */
		/* 8222D450h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D450h case    6:*/		return 0x8222D454;
		  /* 8222D454h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8222D454h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8222D45C;  }
		/* 8222D454h case    7:*/		return 0x8222D458;
	}
	return 0x8222D458;
} // Block from 8222D438h-8222D458h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222D458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D458);
		  /* 8222D458h */ case    0:  		/* li R11, 1 */
		/* 8222D458h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222D458h case    0:*/		return 0x8222D45C;
	}
	return 0x8222D45C;
} // Block from 8222D458h-8222D45Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D45C);
		  /* 8222D45Ch */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8222D45Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8222D45Ch case    0:*/		return 0x8222D460;
	}
	return 0x8222D460;
} // Block from 8222D45Ch-8222D460h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D460);
		  /* 8222D460h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222D460h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222D460h case    0:*/		return 0x8222D464;
		  /* 8222D464h */ case    1:  		/* bc 12, CR0_EQ, 240 */
		/* 8222D464h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222D554;  }
		/* 8222D464h case    1:*/		return 0x8222D468;
		  /* 8222D468h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8222D468h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222D468h case    2:*/		return 0x8222D46C;
		  /* 8222D46Ch */ case    3:  		/* addi R11, R11, 4 */
		/* 8222D46Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222D46Ch case    3:*/		return 0x8222D470;
		  /* 8222D470h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 8222D470h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222D470h case    4:*/		return 0x8222D474;
		  /* 8222D474h */ case    5:  		/* b 108 */
		/* 8222D474h case    5:*/		return 0x8222D4E0;
		/* 8222D474h case    5:*/		return 0x8222D478;
	}
	return 0x8222D478;
} // Block from 8222D460h-8222D478h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222D478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D478);
		  /* 8222D478h */ case    0:  		/* cntlzw R11, R11 */
		/* 8222D478h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8222D478h case    0:*/		return 0x8222D47C;
		  /* 8222D47Ch */ case    1:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 8222D47Ch case    1:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8222D47Ch case    1:*/		return 0x8222D480;
		  /* 8222D480h */ case    2:  		/* bc 12, CR0_EQ, -24 */
		/* 8222D480h case    2:*/		if ( regs.CR[0].eq ) { return 0x8222D468;  }
		/* 8222D480h case    2:*/		return 0x8222D484;
		  /* 8222D484h */ case    3:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D484h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D484h case    3:*/		return 0x8222D488;
		  /* 8222D488h */ case    4:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8222D488h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8222D488h case    4:*/		return 0x8222D48C;
		  /* 8222D48Ch */ case    5:  		/* cmplwi CR6, R10, 1 */
		/* 8222D48Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8222D48Ch case    5:*/		return 0x8222D490;
		  /* 8222D490h */ case    6:  		/* bc 12, CR6_LT, 16 */
		/* 8222D490h case    6:*/		if ( regs.CR[6].lt ) { return 0x8222D4A0;  }
		/* 8222D490h case    6:*/		return 0x8222D494;
		  /* 8222D494h */ case    7:  		/* cmplwi CR6, R10, 102 */
		/* 8222D494h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 8222D494h case    7:*/		return 0x8222D498;
		  /* 8222D498h */ case    8:  		/* li R11, 1 */
		/* 8222D498h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222D498h case    8:*/		return 0x8222D49C;
		  /* 8222D49Ch */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 8222D49Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x8222D4A4;  }
		/* 8222D49Ch case    9:*/		return 0x8222D4A0;
	}
	return 0x8222D4A0;
} // Block from 8222D478h-8222D4A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222D4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D4A0);
		  /* 8222D4A0h */ case    0:  		/* li R11, 0 */
		/* 8222D4A0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D4A0h case    0:*/		return 0x8222D4A4;
	}
	return 0x8222D4A4;
} // Block from 8222D4A0h-8222D4A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D4A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D4A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D4A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D4A4);
		  /* 8222D4A4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222D4A4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222D4A4h case    0:*/		return 0x8222D4A8;
		  /* 8222D4A8h */ case    1:  		/* bc 4, CR0_EQ, -64 */
		/* 8222D4A8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222D468;  }
		/* 8222D4A8h case    1:*/		return 0x8222D4AC;
		  /* 8222D4ACh */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 8222D4ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D4ACh case    2:*/		return 0x8222D4B0;
		  /* 8222D4B0h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222D4B0h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222D4B0h case    3:*/		return 0x8222D4B4;
		  /* 8222D4B4h */ case    4:  		/* cmplwi CR6, R11, 14976 */
		/* 8222D4B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A80);
		/* 8222D4B4h case    4:*/		return 0x8222D4B8;
		  /* 8222D4B8h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8222D4B8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8222D4C4;  }
		/* 8222D4B8h case    5:*/		return 0x8222D4BC;
		  /* 8222D4BCh */ case    6:  		/* cmplwi CR6, R10, 113 */
		/* 8222D4BCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000071);
		/* 8222D4BCh case    6:*/		return 0x8222D4C0;
		  /* 8222D4C0h */ case    7:  		/* bc 12, CR6_EQ, -88 */
		/* 8222D4C0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222D468;  }
		/* 8222D4C0h case    7:*/		return 0x8222D4C4;
	}
	return 0x8222D4C4;
} // Block from 8222D4A4h-8222D4C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222D4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D4C4);
		  /* 8222D4C4h */ case    0:  		/* mr R5, R24 */
		/* 8222D4C4h case    0:*/		regs.R5 = regs.R24;
		/* 8222D4C4h case    0:*/		return 0x8222D4C8;
		  /* 8222D4C8h */ case    1:  		/* mr R4, R31 */
		/* 8222D4C8h case    1:*/		regs.R4 = regs.R31;
		/* 8222D4C8h case    1:*/		return 0x8222D4CC;
		  /* 8222D4CCh */ case    2:  		/* mr R3, R30 */
		/* 8222D4CCh case    2:*/		regs.R3 = regs.R30;
		/* 8222D4CCh case    2:*/		return 0x8222D4D0;
		  /* 8222D4D0h */ case    3:  		/* bl -740288 */
		/* 8222D4D0h case    3:*/		regs.LR = 0x8222D4D4; return 0x82178910;
		/* 8222D4D0h case    3:*/		return 0x8222D4D4;
		  /* 8222D4D4h */ case    4:  		/* b 128 */
		/* 8222D4D4h case    4:*/		return 0x8222D554;
		/* 8222D4D4h case    4:*/		return 0x8222D4D8;
		  /* 8222D4D8h */ case    5:  		/* addi R11, R10, 8 */
		/* 8222D4D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8222D4D8h case    5:*/		return 0x8222D4DC;
		  /* 8222D4DCh */ case    6:  		/* lwz R10, <#[R10 + 8]> */
		/* 8222D4DCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8222D4DCh case    6:*/		return 0x8222D4E0;
	}
	return 0x8222D4E0;
} // Block from 8222D4C4h-8222D4E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222D4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D4E0);
		  /* 8222D4E0h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 8222D4E0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 8222D4E0h case    0:*/		return 0x8222D4E4;
		  /* 8222D4E4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222D4E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222D4D8;  }
		/* 8222D4E4h case    1:*/		return 0x8222D4E8;
		  /* 8222D4E8h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222D4E8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D4E8h case    2:*/		return 0x8222D4EC;
		  /* 8222D4ECh */ case    3:  		/* stw R10, <#[R11]> */
		/* 8222D4ECh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222D4ECh case    3:*/		return 0x8222D4F0;
		  /* 8222D4F0h */ case    4:  		/* lwz R11, <#[R26 + 4]> */
		/* 8222D4F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8222D4F0h case    4:*/		return 0x8222D4F4;
		  /* 8222D4F4h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 8222D4F4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D4F4h case    5:*/		return 0x8222D4F8;
		  /* 8222D4F8h */ case    6:  		/* stw R31, <#[R26 + 4]> */
		/* 8222D4F8h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000004) );
		/* 8222D4F8h case    6:*/		return 0x8222D4FC;
		  /* 8222D4FCh */ case    7:  		/* stw R26, <#[R31 + 12]> */
		/* 8222D4FCh case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222D4FCh case    7:*/		return 0x8222D500;
		  /* 8222D500h */ case    8:  		/* b 40 */
		/* 8222D500h case    8:*/		return 0x8222D528;
		/* 8222D500h case    8:*/		return 0x8222D504;
	}
	return 0x8222D504;
} // Block from 8222D4E0h-8222D504h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222D504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D504);
		  /* 8222D504h */ case    0:  		/* mr R8, R27 */
		/* 8222D504h case    0:*/		regs.R8 = regs.R27;
		/* 8222D504h case    0:*/		return 0x8222D508;
		  /* 8222D508h */ case    1:  		/* mr R7, R28 */
		/* 8222D508h case    1:*/		regs.R7 = regs.R28;
		/* 8222D508h case    1:*/		return 0x8222D50C;
		  /* 8222D50Ch */ case    2:  		/* mr R6, R26 */
		/* 8222D50Ch case    2:*/		regs.R6 = regs.R26;
		/* 8222D50Ch case    2:*/		return 0x8222D510;
		  /* 8222D510h */ case    3:  		/* mr R5, R31 */
		/* 8222D510h case    3:*/		regs.R5 = regs.R31;
		/* 8222D510h case    3:*/		return 0x8222D514;
		  /* 8222D514h */ case    4:  		/* mr R4, R22 */
		/* 8222D514h case    4:*/		regs.R4 = regs.R22;
		/* 8222D514h case    4:*/		return 0x8222D518;
		  /* 8222D518h */ case    5:  		/* mr R3, R24 */
		/* 8222D518h case    5:*/		regs.R3 = regs.R24;
		/* 8222D518h case    5:*/		return 0x8222D51C;
		  /* 8222D51Ch */ case    6:  		/* bl -38260 */
		/* 8222D51Ch case    6:*/		regs.LR = 0x8222D520; return 0x82223FA8;
		/* 8222D51Ch case    6:*/		return 0x8222D520;
		  /* 8222D520h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222D520h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222D520h case    7:*/		return 0x8222D524;
		  /* 8222D524h */ case    8:  		/* bc 12, CR0_EQ, 48 */
		/* 8222D524h case    8:*/		if ( regs.CR[0].eq ) { return 0x8222D554;  }
		/* 8222D524h case    8:*/		return 0x8222D528;
	}
	return 0x8222D528;
} // Block from 8222D504h-8222D528h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222D528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D528);
		  /* 8222D528h */ case    0:  		/* li R21, 1 */
		/* 8222D528h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 8222D528h case    0:*/		return 0x8222D52C;
		  /* 8222D52Ch */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 8222D52Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8222D52Ch case    1:*/		return 0x8222D530;
		  /* 8222D530h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8222D530h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222D548;  }
		/* 8222D530h case    2:*/		return 0x8222D534;
		  /* 8222D534h */ case    3:  		/* mr R5, R23 */
		/* 8222D534h case    3:*/		regs.R5 = regs.R23;
		/* 8222D534h case    3:*/		return 0x8222D538;
		  /* 8222D538h */ case    4:  		/* mr R4, R30 */
		/* 8222D538h case    4:*/		regs.R4 = regs.R30;
		/* 8222D538h case    4:*/		return 0x8222D53C;
		  /* 8222D53Ch */ case    5:  		/* mr R3, R24 */
		/* 8222D53Ch case    5:*/		regs.R3 = regs.R24;
		/* 8222D53Ch case    5:*/		return 0x8222D540;
		  /* 8222D540h */ case    6:  		/* bl -400248 */
		/* 8222D540h case    6:*/		regs.LR = 0x8222D544; return 0x821CB9C8;
		/* 8222D540h case    6:*/		return 0x8222D544;
		  /* 8222D544h */ case    7:  		/* b 16 */
		/* 8222D544h case    7:*/		return 0x8222D554;
		/* 8222D544h case    7:*/		return 0x8222D548;
	}
	return 0x8222D548;
} // Block from 8222D528h-8222D548h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222D548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D548);
		  /* 8222D548h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8222D548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D548h case    0:*/		return 0x8222D54C;
		  /* 8222D54Ch */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 8222D54Ch case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 8222D54Ch case    1:*/		return 0x8222D550;
		  /* 8222D550h */ case    2:  		/* stw R11, <#[R30 + 8]> */
		/* 8222D550h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D550h case    2:*/		return 0x8222D554;
	}
	return 0x8222D554;
} // Block from 8222D548h-8222D554h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D554);
		  /* 8222D554h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8222D554h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8222D554h case    0:*/		return 0x8222D558;
		  /* 8222D558h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8222D558h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222D558h case    1:*/		return 0x8222D55C;
		  /* 8222D55Ch */ case    2:  		/* bc 4, CR6_EQ, -540 */
		/* 8222D55Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222D340;  }
		/* 8222D55Ch case    2:*/		return 0x8222D560;
		  /* 8222D560h */ case    3:  		/* addi R29, R31, 8 */
		/* 8222D560h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 8222D560h case    3:*/		return 0x8222D564;
		  /* 8222D564h */ case    4:  		/* b -548 */
		/* 8222D564h case    4:*/		return 0x8222D340;
		/* 8222D564h case    4:*/		return 0x8222D568;
	}
	return 0x8222D568;
} // Block from 8222D554h-8222D568h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222D568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D568);
		  /* 8222D568h */ case    0:  		/* li R4, 4800 */
		/* 8222D568h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222D568h case    0:*/		return 0x8222D56C;
		  /* 8222D56Ch */ case    1:  		/* mr R3, R24 */
		/* 8222D56Ch case    1:*/		regs.R3 = regs.R24;
		/* 8222D56Ch case    1:*/		return 0x8222D570;
		  /* 8222D570h */ case    2:  		/* bl -898824 */
		/* 8222D570h case    2:*/		regs.LR = 0x8222D574; return 0x82151E68;
		/* 8222D570h case    2:*/		return 0x8222D574;
	}
	return 0x8222D574;
} // Block from 8222D568h-8222D574h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D574);
		  /* 8222D574h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8222D574h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8222D574h case    0:*/		return 0x8222D578;
		  /* 8222D578h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 8222D578h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222D5A8;  }
		/* 8222D578h case    1:*/		return 0x8222D57C;
		  /* 8222D57Ch */ case    2:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 8222D57Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 8222D57Ch case    2:*/		return 0x8222D580;
		  /* 8222D580h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 8222D580h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222D5A8;  }
		/* 8222D580h case    3:*/		return 0x8222D584;
		  /* 8222D584h */ case    4:  		/* mr R3, R26 */
		/* 8222D584h case    4:*/		regs.R3 = regs.R26;
		/* 8222D584h case    4:*/		return 0x8222D588;
		  /* 8222D588h */ case    5:  		/* bl -822280 */
		/* 8222D588h case    5:*/		regs.LR = 0x8222D58C; return 0x82164980;
		/* 8222D588h case    5:*/		return 0x8222D58C;
		  /* 8222D58Ch */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222D58Ch case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222D58Ch case    6:*/		return 0x8222D590;
		  /* 8222D590h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 8222D590h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222D5B4;  }
		/* 8222D590h case    7:*/		return 0x8222D594;
		  /* 8222D594h */ case    8:  		/* li R6, 1 */
		/* 8222D594h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222D594h case    8:*/		return 0x8222D598;
		  /* 8222D598h */ case    9:  		/* li R5, 0 */
		/* 8222D598h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222D598h case    9:*/		return 0x8222D59C;
		  /* 8222D59Ch */ case   10:  		/* mr R4, R26 */
		/* 8222D59Ch case   10:*/		regs.R4 = regs.R26;
		/* 8222D59Ch case   10:*/		return 0x8222D5A0;
		  /* 8222D5A0h */ case   11:  		/* mr R3, R24 */
		/* 8222D5A0h case   11:*/		regs.R3 = regs.R24;
		/* 8222D5A0h case   11:*/		return 0x8222D5A4;
		  /* 8222D5A4h */ case   12:  		/* bl -8668 */
		/* 8222D5A4h case   12:*/		regs.LR = 0x8222D5A8; return 0x8222B3C8;
		/* 8222D5A4h case   12:*/		return 0x8222D5A8;
	}
	return 0x8222D5A8;
} // Block from 8222D574h-8222D5A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222D5A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D5A8);
		  /* 8222D5A8h */ case    0:  		/* mr R3, R21 */
		/* 8222D5A8h case    0:*/		regs.R3 = regs.R21;
		/* 8222D5A8h case    0:*/		return 0x8222D5AC;
		  /* 8222D5ACh */ case    1:  		/* addi R1, R1, 176 */
		/* 8222D5ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8222D5ACh case    1:*/		return 0x8222D5B0;
		  /* 8222D5B0h */ case    2:  		/* b -1688356 */
		/* 8222D5B0h case    2:*/		return 0x8209128C;
		/* 8222D5B0h case    2:*/		return 0x8222D5B4;
	}
	return 0x8222D5B4;
} // Block from 8222D5A8h-8222D5B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D5B4);
		  /* 8222D5B4h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222D5B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222D5B4h case    0:*/		return 0x8222D5B8;
		  /* 8222D5B8h */ case    1:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 8222D5B8h case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 8222D5B8h case    1:*/		return 0x8222D5BC;
		  /* 8222D5BCh */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8222D5BCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222D5C8;  }
		/* 8222D5BCh case    2:*/		return 0x8222D5C0;
		  /* 8222D5C0h */ case    3:  		/* li R11, 0 */
		/* 8222D5C0h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D5C0h case    3:*/		return 0x8222D5C4;
		  /* 8222D5C4h */ case    4:  		/* b 44 */
		/* 8222D5C4h case    4:*/		return 0x8222D5F0;
		/* 8222D5C4h case    4:*/		return 0x8222D5C8;
	}
	return 0x8222D5C8;
} // Block from 8222D5B4h-8222D5C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222D5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D5C8);
		  /* 8222D5C8h */ case    0:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222D5C8h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222D5C8h case    0:*/		return 0x8222D5CC;
		  /* 8222D5CCh */ case    1:  		/* cmplwi CR6, R11, 30 */
		/* 8222D5CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 8222D5CCh case    1:*/		return 0x8222D5D0;
		  /* 8222D5D0h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8222D5D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222D5E8;  }
		/* 8222D5D0h case    2:*/		return 0x8222D5D4;
		  /* 8222D5D4h */ case    3:  		/* cmplwi CR6, R11, 55 */
		/* 8222D5D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000037);
		/* 8222D5D4h case    3:*/		return 0x8222D5D8;
		  /* 8222D5D8h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8222D5D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222D5E8;  }
		/* 8222D5D8h case    4:*/		return 0x8222D5DC;
		  /* 8222D5DCh */ case    5:  		/* cmplwi CR6, R11, 56 */
		/* 8222D5DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000038);
		/* 8222D5DCh case    5:*/		return 0x8222D5E0;
		  /* 8222D5E0h */ case    6:  		/* li R11, 0 */
		/* 8222D5E0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D5E0h case    6:*/		return 0x8222D5E4;
		  /* 8222D5E4h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8222D5E4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8222D5EC;  }
		/* 8222D5E4h case    7:*/		return 0x8222D5E8;
	}
	return 0x8222D5E8;
} // Block from 8222D5C8h-8222D5E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222D5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D5E8);
		  /* 8222D5E8h */ case    0:  		/* li R11, 1 */
		/* 8222D5E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222D5E8h case    0:*/		return 0x8222D5EC;
	}
	return 0x8222D5EC;
} // Block from 8222D5E8h-8222D5ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D5EC);
		  /* 8222D5ECh */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8222D5ECh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222D5ECh case    0:*/		return 0x8222D5F0;
	}
	return 0x8222D5F0;
} // Block from 8222D5ECh-8222D5F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D5F0);
		  /* 8222D5F0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222D5F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222D5F0h case    0:*/		return 0x8222D5F4;
		  /* 8222D5F4h */ case    1:  		/* bc 12, CR0_EQ, 228 */
		/* 8222D5F4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222D6D8;  }
		/* 8222D5F4h case    1:*/		return 0x8222D5F8;
		  /* 8222D5F8h */ case    2:  		/* lwz R30, <#[R26 + 4]> */
		/* 8222D5F8h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000004) );
		/* 8222D5F8h case    2:*/		return 0x8222D5FC;
		  /* 8222D5FCh */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8222D5FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222D5FCh case    3:*/		return 0x8222D600;
		  /* 8222D600h */ case    4:  		/* bc 12, CR6_EQ, 104 */
		/* 8222D600h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222D668;  }
		/* 8222D600h case    4:*/		return 0x8222D604;
		  /* 8222D604h */ case    5:  		/* lwz R10, <#[R30 + 16]> */
		/* 8222D604h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8222D604h case    5:*/		return 0x8222D608;
		  /* 8222D608h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 8222D608h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222D608h case    6:*/		return 0x8222D60C;
		  /* 8222D60Ch */ case    7:  		/* bc 12, CR6_EQ, 84 */
		/* 8222D60Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8222D660;  }
		/* 8222D60Ch case    7:*/		return 0x8222D610;
		  /* 8222D610h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 8222D610h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222D610h case    8:*/		return 0x8222D614;
		  /* 8222D614h */ case    9:  		/* rlwinm. R9, R11, 0, 1, 1 */
		/* 8222D614h case    9:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R11);
		/* 8222D614h case    9:*/		return 0x8222D618;
		  /* 8222D618h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 8222D618h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222D628;  }
		/* 8222D618h case   10:*/		return 0x8222D61C;
		  /* 8222D61Ch */ case   11:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8222D61Ch case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8222D61Ch case   11:*/		return 0x8222D620;
		  /* 8222D620h */ case   12:  		/* li R11, 1 */
		/* 8222D620h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222D620h case   12:*/		return 0x8222D624;
		  /* 8222D624h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 8222D624h case   13:*/		if ( regs.CR[0].eq ) { return 0x8222D62C;  }
		/* 8222D624h case   13:*/		return 0x8222D628;
	}
	return 0x8222D628;
} // Block from 8222D5F0h-8222D628h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8222D628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D628);
		  /* 8222D628h */ case    0:  		/* li R11, 0 */
		/* 8222D628h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D628h case    0:*/		return 0x8222D62C;
	}
	return 0x8222D62C;
} // Block from 8222D628h-8222D62Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D62C);
		  /* 8222D62Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222D62Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222D62Ch case    0:*/		return 0x8222D630;
		  /* 8222D630h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 8222D630h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222D660;  }
		/* 8222D630h case    1:*/		return 0x8222D634;
		  /* 8222D634h */ case    2:  		/* lwz R31, <#[R10 + 4]> */
		/* 8222D634h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 8222D634h case    2:*/		return 0x8222D638;
		  /* 8222D638h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8222D638h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222D638h case    3:*/		return 0x8222D63C;
		  /* 8222D63Ch */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8222D63Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8222D660;  }
		/* 8222D63Ch case    4:*/		return 0x8222D640;
		  /* 8222D640h */ case    5:  		/* lwz R4, <#[R31 + 16]> */
		/* 8222D640h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8222D640h case    5:*/		return 0x8222D644;
		  /* 8222D644h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8222D644h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8222D644h case    6:*/		return 0x8222D648;
		  /* 8222D648h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 8222D648h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222D658;  }
		/* 8222D648h case    7:*/		return 0x8222D64C;
		  /* 8222D64Ch */ case    8:  		/* mr R5, R23 */
		/* 8222D64Ch case    8:*/		regs.R5 = regs.R23;
		/* 8222D64Ch case    8:*/		return 0x8222D650;
		  /* 8222D650h */ case    9:  		/* mr R3, R24 */
		/* 8222D650h case    9:*/		regs.R3 = regs.R24;
		/* 8222D650h case    9:*/		return 0x8222D654;
		  /* 8222D654h */ case   10:  		/* bl -400524 */
		/* 8222D654h case   10:*/		regs.LR = 0x8222D658; return 0x821CB9C8;
		/* 8222D654h case   10:*/		return 0x8222D658;
	}
	return 0x8222D658;
} // Block from 8222D62Ch-8222D658h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222D658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D658);
		  /* 8222D658h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 8222D658h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D658h case    0:*/		return 0x8222D65C;
		  /* 8222D65Ch */ case    1:  		/* b -36 */
		/* 8222D65Ch case    1:*/		return 0x8222D638;
		/* 8222D65Ch case    1:*/		return 0x8222D660;
	}
	return 0x8222D660;
} // Block from 8222D658h-8222D660h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D660);
		  /* 8222D660h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 8222D660h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D660h case    0:*/		return 0x8222D664;
		  /* 8222D664h */ case    1:  		/* b -104 */
		/* 8222D664h case    1:*/		return 0x8222D5FC;
		/* 8222D664h case    1:*/		return 0x8222D668;
	}
	return 0x8222D668;
} // Block from 8222D660h-8222D668h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D668);
		  /* 8222D668h */ case    0:  		/* lwz R30, <#[R25]> */
		/* 8222D668h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 8222D668h case    0:*/		return 0x8222D66C;
		  /* 8222D66Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8222D66Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222D66Ch case    1:*/		return 0x8222D670;
		  /* 8222D670h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 8222D670h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222D6D8;  }
		/* 8222D670h case    2:*/		return 0x8222D674;
		  /* 8222D674h */ case    3:  		/* lwz R10, <#[R30 + 16]> */
		/* 8222D674h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8222D674h case    3:*/		return 0x8222D678;
		  /* 8222D678h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8222D678h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222D678h case    4:*/		return 0x8222D67C;
		  /* 8222D67Ch */ case    5:  		/* bc 12, CR6_EQ, 84 */
		/* 8222D67Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8222D6D0;  }
		/* 8222D67Ch case    5:*/		return 0x8222D680;
		  /* 8222D680h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 8222D680h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222D680h case    6:*/		return 0x8222D684;
		  /* 8222D684h */ case    7:  		/* rlwinm. R9, R11, 0, 1, 1 */
		/* 8222D684h case    7:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R11);
		/* 8222D684h case    7:*/		return 0x8222D688;
		  /* 8222D688h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 8222D688h case    8:*/		if ( regs.CR[0].eq ) { return 0x8222D698;  }
		/* 8222D688h case    8:*/		return 0x8222D68C;
		  /* 8222D68Ch */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8222D68Ch case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8222D68Ch case    9:*/		return 0x8222D690;
		  /* 8222D690h */ case   10:  		/* li R11, 1 */
		/* 8222D690h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222D690h case   10:*/		return 0x8222D694;
		  /* 8222D694h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8222D694h case   11:*/		if ( regs.CR[0].eq ) { return 0x8222D69C;  }
		/* 8222D694h case   11:*/		return 0x8222D698;
	}
	return 0x8222D698;
} // Block from 8222D668h-8222D698h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222D698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D698);
		  /* 8222D698h */ case    0:  		/* li R11, 0 */
		/* 8222D698h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222D698h case    0:*/		return 0x8222D69C;
	}
	return 0x8222D69C;
} // Block from 8222D698h-8222D69Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222D69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D69C);
		  /* 8222D69Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222D69Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222D69Ch case    0:*/		return 0x8222D6A0;
		  /* 8222D6A0h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 8222D6A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222D6D0;  }
		/* 8222D6A0h case    1:*/		return 0x8222D6A4;
		  /* 8222D6A4h */ case    2:  		/* lwz R31, <#[R10 + 4]> */
		/* 8222D6A4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 8222D6A4h case    2:*/		return 0x8222D6A8;
		  /* 8222D6A8h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8222D6A8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222D6A8h case    3:*/		return 0x8222D6AC;
		  /* 8222D6ACh */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8222D6ACh case    4:*/		if ( regs.CR[6].eq ) { return 0x8222D6D0;  }
		/* 8222D6ACh case    4:*/		return 0x8222D6B0;
		  /* 8222D6B0h */ case    5:  		/* lwz R4, <#[R31 + 16]> */
		/* 8222D6B0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8222D6B0h case    5:*/		return 0x8222D6B4;
		  /* 8222D6B4h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8222D6B4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8222D6B4h case    6:*/		return 0x8222D6B8;
		  /* 8222D6B8h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 8222D6B8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222D6C8;  }
		/* 8222D6B8h case    7:*/		return 0x8222D6BC;
		  /* 8222D6BCh */ case    8:  		/* mr R5, R23 */
		/* 8222D6BCh case    8:*/		regs.R5 = regs.R23;
		/* 8222D6BCh case    8:*/		return 0x8222D6C0;
		  /* 8222D6C0h */ case    9:  		/* mr R3, R24 */
		/* 8222D6C0h case    9:*/		regs.R3 = regs.R24;
		/* 8222D6C0h case    9:*/		return 0x8222D6C4;
		  /* 8222D6C4h */ case   10:  		/* bl -400636 */
		/* 8222D6C4h case   10:*/		regs.LR = 0x8222D6C8; return 0x821CB9C8;
		/* 8222D6C4h case   10:*/		return 0x8222D6C8;
	}
	return 0x8222D6C8;
} // Block from 8222D69Ch-8222D6C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222D6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D6C8);
		  /* 8222D6C8h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 8222D6C8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D6C8h case    0:*/		return 0x8222D6CC;
		  /* 8222D6CCh */ case    1:  		/* b -36 */
		/* 8222D6CCh case    1:*/		return 0x8222D6A8;
		/* 8222D6CCh case    1:*/		return 0x8222D6D0;
	}
	return 0x8222D6D0;
} // Block from 8222D6C8h-8222D6D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D6D0);
		  /* 8222D6D0h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 8222D6D0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8222D6D0h case    0:*/		return 0x8222D6D4;
		  /* 8222D6D4h */ case    1:  		/* b -104 */
		/* 8222D6D4h case    1:*/		return 0x8222D66C;
		/* 8222D6D4h case    1:*/		return 0x8222D6D8;
	}
	return 0x8222D6D8;
} // Block from 8222D6D0h-8222D6D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D6D8);
		  /* 8222D6D8h */ case    0:  		/* mr R3, R26 */
		/* 8222D6D8h case    0:*/		regs.R3 = regs.R26;
		/* 8222D6D8h case    0:*/		return 0x8222D6DC;
		  /* 8222D6DCh */ case    1:  		/* bl -824876 */
		/* 8222D6DCh case    1:*/		regs.LR = 0x8222D6E0; return 0x821640B0;
		/* 8222D6DCh case    1:*/		return 0x8222D6E0;
		  /* 8222D6E0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222D6E0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222D6E0h case    2:*/		return 0x8222D6E4;
		  /* 8222D6E4h */ case    3:  		/* bc 12, CR0_EQ, 184 */
		/* 8222D6E4h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222D79C;  }
		/* 8222D6E4h case    3:*/		return 0x8222D6E8;
		  /* 8222D6E8h */ case    4:  		/* lwz R11, <#[R24 + 4]> */
		/* 8222D6E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8222D6E8h case    4:*/		return 0x8222D6EC;
		  /* 8222D6ECh */ case    5:  		/* lwz R29, <#[R26 + 28]> */
		/* 8222D6ECh case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x0000001C) );
		/* 8222D6ECh case    5:*/		return 0x8222D6F0;
		  /* 8222D6F0h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222D6F0h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222D6F0h case    6:*/		return 0x8222D6F4;
		  /* 8222D6F4h */ case    7:  		/* bc 4, CR0_EQ, 168 */
		/* 8222D6F4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8222D79C;  }
		/* 8222D6F4h case    7:*/		return 0x8222D6F8;
		  /* 8222D6F8h */ case    8:  		/* mr R30, R11 */
		/* 8222D6F8h case    8:*/		regs.R30 = regs.R11;
		/* 8222D6F8h case    8:*/		return 0x8222D6FC;
		  /* 8222D6FCh */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8222D6FCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222D6FCh case    9:*/		return 0x8222D700;
		  /* 8222D700h */ case   10:  		/* bc 12, CR0_EQ, 156 */
		/* 8222D700h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222D79C;  }
		/* 8222D700h case   10:*/		return 0x8222D704;
		  /* 8222D704h */ case   11:  		/* lwz R11, <#[R29 + 48]> */
		/* 8222D704h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8222D704h case   11:*/		return 0x8222D708;
		  /* 8222D708h */ case   12:  		/* li R10, 1 */
		/* 8222D708h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222D708h case   12:*/		return 0x8222D70C;
		  /* 8222D70Ch */ case   13:  		/* lwz R9, <#[R30 + 40]> */
		/* 8222D70Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 8222D70Ch case   13:*/		return 0x8222D710;
		  /* 8222D710h */ case   14:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 8222D710h case   14:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 8222D710h case   14:*/		return 0x8222D714;
		  /* 8222D714h */ case   15:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 8222D714h case   15:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 8222D714h case   15:*/		return 0x8222D718;
		  /* 8222D718h */ case   16:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8222D718h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8222D718h case   16:*/		return 0x8222D71C;
		  /* 8222D71Ch */ case   17:  		/* addi R11, R11, 1 */
		/* 8222D71Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222D71Ch case   17:*/		return 0x8222D720;
		  /* 8222D720h */ case   18:  		/* slw R10, R10, R8 */
		/* 8222D720h case   18:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8222D720h case   18:*/		return 0x8222D724;
		  /* 8222D724h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222D724h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222D724h case   19:*/		return 0x8222D728;
		  /* 8222D728h */ case   20:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8222D728h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8222D728h case   20:*/		return 0x8222D72C;
		  /* 8222D72Ch */ case   21:  		/* and. R11, R11, R10 */
		/* 8222D72Ch case   21:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222D72Ch case   21:*/		return 0x8222D730;
		  /* 8222D730h */ case   22:  		/* bc 12, CR0_EQ, 80 */
		/* 8222D730h case   22:*/		if ( regs.CR[0].eq ) { return 0x8222D780;  }
		/* 8222D730h case   22:*/		return 0x8222D734;
		  /* 8222D734h */ case   23:  		/* lwz R31, <#[R30 + 20]> */
		/* 8222D734h case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000014) );
		/* 8222D734h case   23:*/		return 0x8222D738;
		  /* 8222D738h */ case   24:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8222D738h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8222D738h case   24:*/		return 0x8222D73C;
		  /* 8222D73Ch */ case   25:  		/* bc 4, CR0_EQ, 68 */
		/* 8222D73Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x8222D780;  }
		/* 8222D73Ch case   25:*/		return 0x8222D740;
		  /* 8222D740h */ case   26:  		/* cmplwi CR0, R31, 0 */
		/* 8222D740h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8222D740h case   26:*/		return 0x8222D744;
		  /* 8222D744h */ case   27:  		/* bc 12, CR0_EQ, 60 */
		/* 8222D744h case   27:*/		if ( regs.CR[0].eq ) { return 0x8222D780;  }
		/* 8222D744h case   27:*/		return 0x8222D748;
		  /* 8222D748h */ case   28:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222D748h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D748h case   28:*/		return 0x8222D74C;
		  /* 8222D74Ch */ case   29:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222D74Ch case   29:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222D74Ch case   29:*/		return 0x8222D750;
		  /* 8222D750h */ case   30:  		/* cmplwi CR6, R11, 14336 */
		/* 8222D750h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8222D750h case   30:*/		return 0x8222D754;
		  /* 8222D754h */ case   31:  		/* bc 4, CR6_EQ, 20 */
		/* 8222D754h case   31:*/		if ( !regs.CR[6].eq ) { return 0x8222D768;  }
		/* 8222D754h case   31:*/		return 0x8222D758;
		  /* 8222D758h */ case   32:  		/* mr R5, R23 */
		/* 8222D758h case   32:*/		regs.R5 = regs.R23;
		/* 8222D758h case   32:*/		return 0x8222D75C;
		  /* 8222D75Ch */ case   33:  		/* mr R4, R31 */
		/* 8222D75Ch case   33:*/		regs.R4 = regs.R31;
		/* 8222D75Ch case   33:*/		return 0x8222D760;
		  /* 8222D760h */ case   34:  		/* mr R3, R24 */
		/* 8222D760h case   34:*/		regs.R3 = regs.R24;
		/* 8222D760h case   34:*/		return 0x8222D764;
		  /* 8222D764h */ case   35:  		/* bl -400796 */
		/* 8222D764h case   35:*/		regs.LR = 0x8222D768; return 0x821CB9C8;
		/* 8222D764h case   35:*/		return 0x8222D768;
	}
	return 0x8222D768;
} // Block from 8222D6D8h-8222D768h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8222D768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D768);
		  /* 8222D768h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8222D768h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8222D768h case    0:*/		return 0x8222D76C;
		  /* 8222D76Ch */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8222D76Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8222D76Ch case    1:*/		return 0x8222D770;
		  /* 8222D770h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8222D770h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8222D770h case    2:*/		return 0x8222D774;
		  /* 8222D774h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8222D774h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222D780;  }
		/* 8222D774h case    3:*/		return 0x8222D778;
		  /* 8222D778h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8222D778h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222D778h case    4:*/		return 0x8222D77C;
		  /* 8222D77Ch */ case    5:  		/* bc 4, CR6_EQ, -52 */
		/* 8222D77Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8222D748;  }
		/* 8222D77Ch case    5:*/		return 0x8222D780;
	}
	return 0x8222D780;
} // Block from 8222D768h-8222D780h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222D780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D780);
		  /* 8222D780h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8222D780h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8222D780h case    0:*/		return 0x8222D784;
		  /* 8222D784h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222D784h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222D784h case    1:*/		return 0x8222D788;
		  /* 8222D788h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222D788h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222D788h case    2:*/		return 0x8222D78C;
		  /* 8222D78Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8222D78Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222D79C;  }
		/* 8222D78Ch case    3:*/		return 0x8222D790;
		  /* 8222D790h */ case    4:  		/* mr R30, R11 */
		/* 8222D790h case    4:*/		regs.R30 = regs.R11;
		/* 8222D790h case    4:*/		return 0x8222D794;
		  /* 8222D794h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8222D794h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222D794h case    5:*/		return 0x8222D798;
		  /* 8222D798h */ case    6:  		/* bc 4, CR6_EQ, -148 */
		/* 8222D798h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222D704;  }
		/* 8222D798h case    6:*/		return 0x8222D79C;
	}
	return 0x8222D79C;
} // Block from 8222D780h-8222D79Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222D79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D79C);
		  /* 8222D79Ch */ case    0:  		/* mr R5, R23 */
		/* 8222D79Ch case    0:*/		regs.R5 = regs.R23;
		/* 8222D79Ch case    0:*/		return 0x8222D7A0;
		  /* 8222D7A0h */ case    1:  		/* mr R4, R26 */
		/* 8222D7A0h case    1:*/		regs.R4 = regs.R26;
		/* 8222D7A0h case    1:*/		return 0x8222D7A4;
		  /* 8222D7A4h */ case    2:  		/* mr R3, R24 */
		/* 8222D7A4h case    2:*/		regs.R3 = regs.R24;
		/* 8222D7A4h case    2:*/		return 0x8222D7A8;
		  /* 8222D7A8h */ case    3:  		/* bl -400864 */
		/* 8222D7A8h case    3:*/		regs.LR = 0x8222D7AC; return 0x821CB9C8;
		/* 8222D7A8h case    3:*/		return 0x8222D7AC;
		  /* 8222D7ACh */ case    4:  		/* mr R3, R22 */
		/* 8222D7ACh case    4:*/		regs.R3 = regs.R22;
		/* 8222D7ACh case    4:*/		return 0x8222D7B0;
		  /* 8222D7B0h */ case    5:  		/* bl -822832 */
		/* 8222D7B0h case    5:*/		regs.LR = 0x8222D7B4; return 0x82164980;
		/* 8222D7B0h case    5:*/		return 0x8222D7B4;
		  /* 8222D7B4h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222D7B4h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222D7B4h case    6:*/		return 0x8222D7B8;
		  /* 8222D7B8h */ case    7:  		/* bc 12, CR0_EQ, -528 */
		/* 8222D7B8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222D5A8;  }
		/* 8222D7B8h case    7:*/		return 0x8222D7BC;
		  /* 8222D7BCh */ case    8:  		/* li R31, 0 */
		/* 8222D7BCh case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8222D7BCh case    8:*/		return 0x8222D7C0;
		  /* 8222D7C0h */ case    9:  		/* addi R30, R22, 40 */
		/* 8222D7C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R22,0x28);
		/* 8222D7C0h case    9:*/		return 0x8222D7C4;
		  /* 8222D7C4h */ case   10:  		/* lwz R11, <#[R22 + 8]> */
		/* 8222D7C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 8222D7C4h case   10:*/		return 0x8222D7C8;
		  /* 8222D7C8h */ case   11:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8222D7C8h case   11:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8222D7C8h case   11:*/		return 0x8222D7CC;
		  /* 8222D7CCh */ case   12:  		/* cmplw CR6, R31, R11 */
		/* 8222D7CCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8222D7CCh case   12:*/		return 0x8222D7D0;
		  /* 8222D7D0h */ case   13:  		/* bc 4, CR6_LT, -552 */
		/* 8222D7D0h case   13:*/		if ( !regs.CR[6].lt ) { return 0x8222D5A8;  }
		/* 8222D7D0h case   13:*/		return 0x8222D7D4;
		  /* 8222D7D4h */ case   14:  		/* lwzu R11, <#[R30 + 4]> */
		/* 8222D7D4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8222D7D4h case   14:*/		return 0x8222D7D8;
		  /* 8222D7D8h */ case   15:  		/* mr R5, R23 */
		/* 8222D7D8h case   15:*/		regs.R5 = regs.R23;
		/* 8222D7D8h case   15:*/		return 0x8222D7DC;
		  /* 8222D7DCh */ case   16:  		/* mr R3, R24 */
		/* 8222D7DCh case   16:*/		regs.R3 = regs.R24;
		/* 8222D7DCh case   16:*/		return 0x8222D7E0;
		  /* 8222D7E0h */ case   17:  		/* lwz R4, <#[R11 + 12]> */
		/* 8222D7E0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222D7E0h case   17:*/		return 0x8222D7E4;
		  /* 8222D7E4h */ case   18:  		/* bl -400924 */
		/* 8222D7E4h case   18:*/		regs.LR = 0x8222D7E8; return 0x821CB9C8;
		/* 8222D7E4h case   18:*/		return 0x8222D7E8;
		  /* 8222D7E8h */ case   19:  		/* addi R31, R31, 1 */
		/* 8222D7E8h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8222D7E8h case   19:*/		return 0x8222D7EC;
		  /* 8222D7ECh */ case   20:  		/* b -40 */
		/* 8222D7ECh case   20:*/		return 0x8222D7C4;
		/* 8222D7ECh case   20:*/		return 0x8222D7F0;
	}
	return 0x8222D7F0;
} // Block from 8222D79Ch-8222D7F0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8222D7F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D7F0);
		  /* 8222D7F0h */ case    0:  		/* mfspr R12, LR */
		/* 8222D7F0h case    0:*/		regs.R12 = regs.LR;
		/* 8222D7F0h case    0:*/		return 0x8222D7F4;
		  /* 8222D7F4h */ case    1:  		/* bl -1689028 */
		/* 8222D7F4h case    1:*/		regs.LR = 0x8222D7F8; return 0x82091230;
		/* 8222D7F4h case    1:*/		return 0x8222D7F8;
		  /* 8222D7F8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8222D7F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8222D7F8h case    2:*/		return 0x8222D7FC;
		  /* 8222D7FCh */ case    3:  		/* lwz R11, <#[R3 + 112]> */
		/* 8222D7FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000070) );
		/* 8222D7FCh case    3:*/		return 0x8222D800;
		  /* 8222D800h */ case    4:  		/* mr R31, R4 */
		/* 8222D800h case    4:*/		regs.R31 = regs.R4;
		/* 8222D800h case    4:*/		return 0x8222D804;
		  /* 8222D804h */ case    5:  		/* mr R20, R5 */
		/* 8222D804h case    5:*/		regs.R20 = regs.R5;
		/* 8222D804h case    5:*/		return 0x8222D808;
		  /* 8222D808h */ case    6:  		/* addi R29, R11, 1 */
		/* 8222D808h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 8222D808h case    6:*/		return 0x8222D80C;
		  /* 8222D80Ch */ case    7:  		/* li R5, 38 */
		/* 8222D80Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222D80Ch case    7:*/		return 0x8222D810;
		  /* 8222D810h */ case    8:  		/* stw R29, <#[R3 + 112]> */
		/* 8222D810h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000070) );
		/* 8222D810h case    8:*/		return 0x8222D814;
		  /* 8222D814h */ case    9:  		/* li R4, 8 */
		/* 8222D814h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222D814h case    9:*/		return 0x8222D818;
		  /* 8222D818h */ case   10:  		/* stw R29, <#[R31 - 4]> */
		/* 8222D818h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8222D818h case   10:*/		return 0x8222D81C;
		  /* 8222D81Ch */ case   11:  		/* mr R19, R6 */
		/* 8222D81Ch case   11:*/		regs.R19 = regs.R6;
		/* 8222D81Ch case   11:*/		return 0x8222D820;
		  /* 8222D820h */ case   12:  		/* mr R18, R7 */
		/* 8222D820h case   12:*/		regs.R18 = regs.R7;
		/* 8222D820h case   12:*/		return 0x8222D824;
		  /* 8222D824h */ case   13:  		/* mr R21, R8 */
		/* 8222D824h case   13:*/		regs.R21 = regs.R8;
		/* 8222D824h case   13:*/		return 0x8222D828;
		  /* 8222D828h */ case   14:  		/* mr R23, R9 */
		/* 8222D828h case   14:*/		regs.R23 = regs.R9;
		/* 8222D828h case   14:*/		return 0x8222D82C;
		  /* 8222D82Ch */ case   15:  		/* mr R22, R31 */
		/* 8222D82Ch case   15:*/		regs.R22 = regs.R31;
		/* 8222D82Ch case   15:*/		return 0x8222D830;
		  /* 8222D830h */ case   16:  		/* bl -823104 */
		/* 8222D830h case   16:*/		regs.LR = 0x8222D834; return 0x821648F0;
		/* 8222D830h case   16:*/		return 0x8222D834;
		  /* 8222D834h */ case   17:  		/* addi R28, R3, 4 */
		/* 8222D834h case   17:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x4);
		/* 8222D834h case   17:*/		return 0x8222D838;
		  /* 8222D838h */ case   18:  		/* ori R11, R3, 1 */
		/* 8222D838h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8222D838h case   18:*/		return 0x8222D83C;
		  /* 8222D83Ch */ case   19:  		/* ori R10, R28, 1 */
		/* 8222D83Ch case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R28,0x1);
		/* 8222D83Ch case   19:*/		return 0x8222D840;
		  /* 8222D840h */ case   20:  		/* mr R30, R3 */
		/* 8222D840h case   20:*/		regs.R30 = regs.R3;
		/* 8222D840h case   20:*/		return 0x8222D844;
		  /* 8222D844h */ case   21:  		/* stw R11, <#[R3 + 4]> */
		/* 8222D844h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222D844h case   21:*/		return 0x8222D848;
		  /* 8222D848h */ case   22:  		/* li R27, 0 */
		/* 8222D848h case   22:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8222D848h case   22:*/		return 0x8222D84C;
		  /* 8222D84Ch */ case   23:  		/* stw R10, <#[R3]> */
		/* 8222D84Ch case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222D84Ch case   23:*/		return 0x8222D850;
		  /* 8222D850h */ case   24:  		/* li R25, 4 */
		/* 8222D850h case   24:*/		cpu::op::li<0>(regs,&regs.R25,0x4);
		/* 8222D850h case   24:*/		return 0x8222D854;
		  /* 8222D854h */ case   25:  		/* li R26, 0 */
		/* 8222D854h case   25:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8222D854h case   25:*/		return 0x8222D858;
		  /* 8222D858h */ case   26:  		/* cmplw CR6, R31, R23 */
		/* 8222D858h case   26:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 8222D858h case   26:*/		return 0x8222D85C;
		  /* 8222D85Ch */ case   27:  		/* bc 12, CR6_EQ, 364 */
		/* 8222D85Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x8222D9C8;  }
		/* 8222D85Ch case   27:*/		return 0x8222D860;
		  /* 8222D860h */ case   28:  		/* lwz R24, <#[R31]> */
		/* 8222D860h case   28:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x00000000) );
		/* 8222D860h case   28:*/		return 0x8222D864;
		  /* 8222D864h */ case   29:  		/* cmplwi CR6, R24, 0 */
		/* 8222D864h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8222D864h case   29:*/		return 0x8222D868;
		  /* 8222D868h */ case   30:  		/* bc 12, CR6_EQ, 352 */
		/* 8222D868h case   30:*/		if ( regs.CR[6].eq ) { return 0x8222D9C8;  }
		/* 8222D868h case   30:*/		return 0x8222D86C;
		  /* 8222D86Ch */ case   31:  		/* li R10, 0 */
		/* 8222D86Ch case   31:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222D86Ch case   31:*/		return 0x8222D870;
		  /* 8222D870h */ case   32:  		/* mr R9, R21 */
		/* 8222D870h case   32:*/		regs.R9 = regs.R21;
		/* 8222D870h case   32:*/		return 0x8222D874;
		  /* 8222D874h */ case   33:  		/* li R8, 0 */
		/* 8222D874h case   33:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222D874h case   33:*/		return 0x8222D878;
		  /* 8222D878h */ case   34:  		/* addi R7, R1, 88 */
		/* 8222D878h case   34:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8222D878h case   34:*/		return 0x8222D87C;
		  /* 8222D87Ch */ case   35:  		/* addi R6, R1, 80 */
		/* 8222D87Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8222D87Ch case   35:*/		return 0x8222D880;
		  /* 8222D880h */ case   36:  		/* addi R5, R1, 84 */
		/* 8222D880h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8222D880h case   36:*/		return 0x8222D884;
		  /* 8222D884h */ case   37:  		/* li R4, 0 */
		/* 8222D884h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222D884h case   37:*/		return 0x8222D888;
		  /* 8222D888h */ case   38:  		/* mr R3, R24 */
		/* 8222D888h case   38:*/		regs.R3 = regs.R24;
		/* 8222D888h case   38:*/		return 0x8222D88C;
		  /* 8222D88Ch */ case   39:  		/* bl -41916 */
		/* 8222D88Ch case   39:*/		regs.LR = 0x8222D890; return 0x822234D0;
		/* 8222D88Ch case   39:*/		return 0x8222D890;
		  /* 8222D890h */ case   40:  		/* lwz R11, <#[R1 + 88]> */
		/* 8222D890h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222D890h case   40:*/		return 0x8222D894;
		  /* 8222D894h */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 8222D894h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222D894h case   41:*/		return 0x8222D898;
		  /* 8222D898h */ case   42:  		/* lwz R31, <#[R1 + 84]> */
		/* 8222D898h case   42:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8222D898h case   42:*/		return 0x8222D89C;
		  /* 8222D89Ch */ case   43:  		/* bc 4, CR6_EQ, 132 */
		/* 8222D89Ch case   43:*/		if ( !regs.CR[6].eq ) { return 0x8222D920;  }
		/* 8222D89Ch case   43:*/		return 0x8222D8A0;
		  /* 8222D8A0h */ case   44:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222D8A0h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222D8A0h case   44:*/		return 0x8222D8A4;
		  /* 8222D8A4h */ case   45:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8222D8A4h case   45:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8222D8A4h case   45:*/		return 0x8222D8A8;
		  /* 8222D8A8h */ case   46:  		/* cmplwi CR6, R10, 14336 */
		/* 8222D8A8h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8222D8A8h case   46:*/		return 0x8222D8AC;
		  /* 8222D8ACh */ case   47:  		/* bc 4, CR6_EQ, 116 */
		/* 8222D8ACh case   47:*/		if ( !regs.CR[6].eq ) { return 0x8222D920;  }
		/* 8222D8ACh case   47:*/		return 0x8222D8B0;
		  /* 8222D8B0h */ case   48:  		/* cmplw CR6, R31, R23 */
		/* 8222D8B0h case   48:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 8222D8B0h case   48:*/		return 0x8222D8B4;
		  /* 8222D8B4h */ case   49:  		/* bc 12, CR6_EQ, 108 */
		/* 8222D8B4h case   49:*/		if ( regs.CR[6].eq ) { return 0x8222D920;  }
		/* 8222D8B4h case   49:*/		return 0x8222D8B8;
		  /* 8222D8B8h */ case   50:  		/* lwz R11, <#[R31 - 4]> */
		/* 8222D8B8h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8222D8B8h case   50:*/		return 0x8222D8BC;
		  /* 8222D8BCh */ case   51:  		/* cmplw CR6, R11, R29 */
		/* 8222D8BCh case   51:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8222D8BCh case   51:*/		return 0x8222D8C0;
		  /* 8222D8C0h */ case   52:  		/* bc 12, CR6_EQ, 256 */
		/* 8222D8C0h case   52:*/		if ( regs.CR[6].eq ) { return 0x8222D9C0;  }
		/* 8222D8C0h case   52:*/		return 0x8222D8C4;
		  /* 8222D8C4h */ case   53:  		/* stw R29, <#[R31 - 4]> */
		/* 8222D8C4h case   53:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8222D8C4h case   53:*/		return 0x8222D8C8;
		  /* 8222D8C8h */ case   54:  		/* lwz R11, <#[R28]> */
		/* 8222D8C8h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222D8C8h case   54:*/		return 0x8222D8CC;
		  /* 8222D8CCh */ case   55:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222D8CCh case   55:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222D8CCh case   55:*/		return 0x8222D8D0;
		  /* 8222D8D0h */ case   56:  		/* bc 4, CR0_EQ, 40 */
		/* 8222D8D0h case   56:*/		if ( !regs.CR[0].eq ) { return 0x8222D8F8;  }
		/* 8222D8D0h case   56:*/		return 0x8222D8D4;
		  /* 8222D8D4h */ case   57:  		/* lwz R11, <#[R30]> */
		/* 8222D8D4h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222D8D4h case   57:*/		return 0x8222D8D8;
		  /* 8222D8D8h */ case   58:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222D8D8h case   58:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222D8D8h case   58:*/		return 0x8222D8DC;
		  /* 8222D8DCh */ case   59:  		/* addic. R3, R11, -4 */
		/* 8222D8DCh case   59:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222D8DCh case   59:*/		return 0x8222D8E0;
		  /* 8222D8E0h */ case   60:  		/* bc 12, CR0_EQ, 24 */
		/* 8222D8E0h case   60:*/		if ( regs.CR[0].eq ) { return 0x8222D8F8;  }
		/* 8222D8E0h case   60:*/		return 0x8222D8E4;
		  /* 8222D8E4h */ case   61:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222D8E4h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222D8E4h case   61:*/		return 0x8222D8E8;
		  /* 8222D8E8h */ case   62:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222D8E8h case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222D8E8h case   62:*/		return 0x8222D8EC;
		  /* 8222D8ECh */ case   63:  		/* addi R11, R11, 1 */
		/* 8222D8ECh case   63:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222D8ECh case   63:*/		return 0x8222D8F0;
		  /* 8222D8F0h */ case   64:  		/* cmplw CR6, R11, R10 */
		/* 8222D8F0h case   64:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222D8F0h case   64:*/		return 0x8222D8F4;
		  /* 8222D8F4h */ case   65:  		/* bc 4, CR6_GT, 16 */
		/* 8222D8F4h case   65:*/		if ( !regs.CR[6].gt ) { return 0x8222D904;  }
		/* 8222D8F4h case   65:*/		return 0x8222D8F8;
	}
	return 0x8222D8F8;
} // Block from 8222D7F0h-8222D8F8h (66 instructions)

//////////////////////////////////////////////////////
// Block at 8222D8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D8F8);
		  /* 8222D8F8h */ case    0:  		/* li R4, 1 */
		/* 8222D8F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222D8F8h case    0:*/		return 0x8222D8FC;
		  /* 8222D8FCh */ case    1:  		/* mr R3, R30 */
		/* 8222D8FCh case    1:*/		regs.R3 = regs.R30;
		/* 8222D8FCh case    1:*/		return 0x8222D900;
		  /* 8222D900h */ case    2:  		/* bl -657464 */
		/* 8222D900h case    2:*/		regs.LR = 0x8222D904; return 0x8218D0C8;
		/* 8222D900h case    2:*/		return 0x8222D904;
	}
	return 0x8222D904;
} // Block from 8222D8F8h-8222D904h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D904);
		  /* 8222D904h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222D904h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222D904h case    0:*/		return 0x8222D908;
		  /* 8222D908h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222D908h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222D908h case    1:*/		return 0x8222D90C;
		  /* 8222D90Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 8222D90Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222D90Ch case    2:*/		return 0x8222D910;
		  /* 8222D910h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222D910h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222D910h case    3:*/		return 0x8222D914;
		  /* 8222D914h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222D914h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222D914h case    4:*/		return 0x8222D918;
		  /* 8222D918h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222D918h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222D918h case    5:*/		return 0x8222D91C;
		  /* 8222D91Ch */ case    6:  		/* b 164 */
		/* 8222D91Ch case    6:*/		return 0x8222D9C0;
		/* 8222D91Ch case    6:*/		return 0x8222D920;
	}
	return 0x8222D920;
} // Block from 8222D904h-8222D920h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222D920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D920);
		  /* 8222D920h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8222D920h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8222D920h case    0:*/		return 0x8222D924;
		  /* 8222D924h */ case    1:  		/* bc 12, CR6_EQ, 144 */
		/* 8222D924h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222D9B4;  }
		/* 8222D924h case    1:*/		return 0x8222D928;
		  /* 8222D928h */ case    2:  		/* cmplw CR6, R31, R27 */
		/* 8222D928h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 8222D928h case    2:*/		return 0x8222D92C;
		  /* 8222D92Ch */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 8222D92Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8222D944;  }
		/* 8222D92Ch case    3:*/		return 0x8222D930;
		  /* 8222D930h */ case    4:  		/* cmplw CR6, R11, R26 */
		/* 8222D930h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8222D930h case    4:*/		return 0x8222D934;
		  /* 8222D934h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8222D934h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8222D944;  }
		/* 8222D934h case    5:*/		return 0x8222D938;
		  /* 8222D938h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 8222D938h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8222D938h case    6:*/		return 0x8222D93C;
		  /* 8222D93Ch */ case    7:  		/* cmpw CR6, R11, R25 */
		/* 8222D93Ch case    7:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R25);
		/* 8222D93Ch case    7:*/		return 0x8222D940;
		  /* 8222D940h */ case    8:  		/* bc 12, CR6_EQ, 128 */
		/* 8222D940h case    8:*/		if ( regs.CR[6].eq ) { return 0x8222D9C0;  }
		/* 8222D940h case    8:*/		return 0x8222D944;
	}
	return 0x8222D944;
} // Block from 8222D920h-8222D944h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222D944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D944);
		  /* 8222D944h */ case    0:  		/* lwz R31, <#[R22]> */
		/* 8222D944h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x00000000) );
		/* 8222D944h case    0:*/		return 0x8222D948;
		  /* 8222D948h */ case    1:  		/* li R27, 0 */
		/* 8222D948h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8222D948h case    1:*/		return 0x8222D94C;
		  /* 8222D94Ch */ case    2:  		/* li R25, 4 */
		/* 8222D94Ch case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x4);
		/* 8222D94Ch case    2:*/		return 0x8222D950;
		  /* 8222D950h */ case    3:  		/* li R26, 0 */
		/* 8222D950h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8222D950h case    3:*/		return 0x8222D954;
		  /* 8222D954h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8222D954h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222D954h case    4:*/		return 0x8222D958;
		  /* 8222D958h */ case    5:  		/* bc 12, CR6_EQ, 252 */
		/* 8222D958h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222DA54;  }
		/* 8222D958h case    5:*/		return 0x8222D95C;
		  /* 8222D95Ch */ case    6:  		/* li R10, 0 */
		/* 8222D95Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222D95Ch case    6:*/		return 0x8222D960;
		  /* 8222D960h */ case    7:  		/* mr R9, R21 */
		/* 8222D960h case    7:*/		regs.R9 = regs.R21;
		/* 8222D960h case    7:*/		return 0x8222D964;
		  /* 8222D964h */ case    8:  		/* li R8, 0 */
		/* 8222D964h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222D964h case    8:*/		return 0x8222D968;
		  /* 8222D968h */ case    9:  		/* addi R7, R1, 88 */
		/* 8222D968h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8222D968h case    9:*/		return 0x8222D96C;
		  /* 8222D96Ch */ case   10:  		/* addi R6, R1, 84 */
		/* 8222D96Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 8222D96Ch case   10:*/		return 0x8222D970;
		  /* 8222D970h */ case   11:  		/* addi R5, R1, 80 */
		/* 8222D970h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8222D970h case   11:*/		return 0x8222D974;
		  /* 8222D974h */ case   12:  		/* li R4, 0 */
		/* 8222D974h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222D974h case   12:*/		return 0x8222D978;
		  /* 8222D978h */ case   13:  		/* mr R3, R31 */
		/* 8222D978h case   13:*/		regs.R3 = regs.R31;
		/* 8222D978h case   13:*/		return 0x8222D97C;
		  /* 8222D97Ch */ case   14:  		/* bl -42156 */
		/* 8222D97Ch case   14:*/		regs.LR = 0x8222D980; return 0x822234D0;
		/* 8222D97Ch case   14:*/		return 0x8222D980;
		  /* 8222D980h */ case   15:  		/* cmplwi CR6, R27, 0 */
		/* 8222D980h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8222D980h case   15:*/		return 0x8222D984;
		  /* 8222D984h */ case   16:  		/* bc 12, CR6_EQ, 188 */
		/* 8222D984h case   16:*/		if ( regs.CR[6].eq ) { return 0x8222DA40;  }
		/* 8222D984h case   16:*/		return 0x8222D988;
		  /* 8222D988h */ case   17:  		/* lwz R11, <#[R1 + 80]> */
		/* 8222D988h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8222D988h case   17:*/		return 0x8222D98C;
		  /* 8222D98Ch */ case   18:  		/* cmplw CR6, R11, R27 */
		/* 8222D98Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8222D98Ch case   18:*/		return 0x8222D990;
		  /* 8222D990h */ case   19:  		/* bc 4, CR6_EQ, 28 */
		/* 8222D990h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8222D9AC;  }
		/* 8222D990h case   19:*/		return 0x8222D994;
		  /* 8222D994h */ case   20:  		/* lwz R11, <#[R1 + 88]> */
		/* 8222D994h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222D994h case   20:*/		return 0x8222D998;
		  /* 8222D998h */ case   21:  		/* cmplw CR6, R11, R26 */
		/* 8222D998h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8222D998h case   21:*/		return 0x8222D99C;
		  /* 8222D99Ch */ case   22:  		/* bc 4, CR6_EQ, 16 */
		/* 8222D99Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x8222D9AC;  }
		/* 8222D99Ch case   22:*/		return 0x8222D9A0;
		  /* 8222D9A0h */ case   23:  		/* lwz R11, <#[R1 + 84]> */
		/* 8222D9A0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8222D9A0h case   23:*/		return 0x8222D9A4;
		  /* 8222D9A4h */ case   24:  		/* cmpw CR6, R11, R25 */
		/* 8222D9A4h case   24:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R25);
		/* 8222D9A4h case   24:*/		return 0x8222D9A8;
		  /* 8222D9A8h */ case   25:  		/* bc 12, CR6_EQ, 164 */
		/* 8222D9A8h case   25:*/		if ( regs.CR[6].eq ) { return 0x8222DA4C;  }
		/* 8222D9A8h case   25:*/		return 0x8222D9AC;
	}
	return 0x8222D9AC;
} // Block from 8222D944h-8222D9ACh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8222D9ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D9AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D9AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D9AC);
		  /* 8222D9ACh */ case    0:  		/* li R3, 0 */
		/* 8222D9ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222D9ACh case    0:*/		return 0x8222D9B0;
		  /* 8222D9B0h */ case    1:  		/* b 180 */
		/* 8222D9B0h case    1:*/		return 0x8222DA64;
		/* 8222D9B0h case    1:*/		return 0x8222D9B4;
	}
	return 0x8222D9B4;
} // Block from 8222D9ACh-8222D9B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D9B4);
		  /* 8222D9B4h */ case    0:  		/* lwz R25, <#[R1 + 80]> */
		/* 8222D9B4h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 8222D9B4h case    0:*/		return 0x8222D9B8;
		  /* 8222D9B8h */ case    1:  		/* mr R27, R31 */
		/* 8222D9B8h case    1:*/		regs.R27 = regs.R31;
		/* 8222D9B8h case    1:*/		return 0x8222D9BC;
		  /* 8222D9BCh */ case    2:  		/* mr R26, R11 */
		/* 8222D9BCh case    2:*/		regs.R26 = regs.R11;
		/* 8222D9BCh case    2:*/		return 0x8222D9C0;
	}
	return 0x8222D9C0;
} // Block from 8222D9B4h-8222D9C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222D9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D9C0);
		  /* 8222D9C0h */ case    0:  		/* lwz R24, <#[R24 + 4]> */
		/* 8222D9C0h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000004) );
		/* 8222D9C0h case    0:*/		return 0x8222D9C4;
		  /* 8222D9C4h */ case    1:  		/* b -352 */
		/* 8222D9C4h case    1:*/		return 0x8222D864;
		/* 8222D9C4h case    1:*/		return 0x8222D9C8;
	}
	return 0x8222D9C8;
} // Block from 8222D9C0h-8222D9C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222D9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222D9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222D9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222D9C8);
		  /* 8222D9C8h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8222D9C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222D9C8h case    0:*/		return 0x8222D9CC;
		  /* 8222D9CCh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222D9CCh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222D9CCh case    1:*/		return 0x8222D9D0;
		  /* 8222D9D0h */ case    2:  		/* bc 4, CR0_EQ, 132 */
		/* 8222D9D0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222DA54;  }
		/* 8222D9D0h case    2:*/		return 0x8222D9D4;
		  /* 8222D9D4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8222D9D4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222D9D4h case    3:*/		return 0x8222D9D8;
		  /* 8222D9D8h */ case    4:  		/* bc 12, CR0_EQ, 124 */
		/* 8222D9D8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8222DA54;  }
		/* 8222D9D8h case    4:*/		return 0x8222D9DC;
		  /* 8222D9DCh */ case    5:  		/* lwz R11, <#[R30]> */
		/* 8222D9DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222D9DCh case    5:*/		return 0x8222D9E0;
		  /* 8222D9E0h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222D9E0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222D9E0h case    6:*/		return 0x8222D9E4;
		  /* 8222D9E4h */ case    7:  		/* addi R4, R11, -4 */
		/* 8222D9E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222D9E4h case    7:*/		return 0x8222D9E8;
		  /* 8222D9E8h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222D9E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222D9E8h case    8:*/		return 0x8222D9EC;
		  /* 8222D9ECh */ case    9:  		/* addi R10, R11, 3 */
		/* 8222D9ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222D9ECh case    9:*/		return 0x8222D9F0;
		  /* 8222D9F0h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8222D9F0h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222D9F0h case   10:*/		return 0x8222D9F4;
		  /* 8222D9F4h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222D9F4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222D9F4h case   11:*/		return 0x8222D9F8;
		  /* 8222D9F8h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 8222D9F8h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222D9F8h case   12:*/		return 0x8222D9FC;
		  /* 8222D9FCh */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8222D9FCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222D9FCh case   13:*/		return 0x8222DA00;
		  /* 8222DA00h */ case   14:  		/* bc 4, CR0_EQ, -424 */
		/* 8222DA00h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222D858;  }
		/* 8222DA00h case   14:*/		return 0x8222DA04;
		  /* 8222DA04h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222DA04h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222DA04h case   15:*/		return 0x8222DA08;
		  /* 8222DA08h */ case   16:  		/* mr R3, R30 */
		/* 8222DA08h case   16:*/		regs.R3 = regs.R30;
		/* 8222DA08h case   16:*/		return 0x8222DA0C;
		  /* 8222DA0Ch */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222DA0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222DA0Ch case   17:*/		return 0x8222DA10;
		  /* 8222DA10h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8222DA10h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222DA10h case   18:*/		return 0x8222DA14;
		  /* 8222DA14h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222DA14h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222DA14h case   19:*/		return 0x8222DA18;
		  /* 8222DA18h */ case   20:  		/* stw R9, <#[R10]> */
		/* 8222DA18h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222DA18h case   20:*/		return 0x8222DA1C;
		  /* 8222DA1Ch */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222DA1Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222DA1Ch case   21:*/		return 0x8222DA20;
		  /* 8222DA20h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8222DA20h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222DA20h case   22:*/		return 0x8222DA24;
		  /* 8222DA24h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DA24h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DA24h case   23:*/		return 0x8222DA28;
		  /* 8222DA28h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8222DA28h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222DA28h case   24:*/		return 0x8222DA2C;
		  /* 8222DA2Ch */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222DA2Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222DA2Ch case   25:*/		return 0x8222DA30;
		  /* 8222DA30h */ case   26:  		/* addi R11, R11, 4 */
		/* 8222DA30h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222DA30h case   26:*/		return 0x8222DA34;
		  /* 8222DA34h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222DA34h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222DA34h case   27:*/		return 0x8222DA38;
		  /* 8222DA38h */ case   28:  		/* bl -900144 */
		/* 8222DA38h case   28:*/		regs.LR = 0x8222DA3C; return 0x82151E08;
		/* 8222DA38h case   28:*/		return 0x8222DA3C;
		  /* 8222DA3Ch */ case   29:  		/* b -484 */
		/* 8222DA3Ch case   29:*/		return 0x8222D858;
		/* 8222DA3Ch case   29:*/		return 0x8222DA40;
	}
	return 0x8222DA40;
} // Block from 8222D9C8h-8222DA40h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8222DA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DA40);
		  /* 8222DA40h */ case    0:  		/* lwz R27, <#[R1 + 80]> */
		/* 8222DA40h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 8222DA40h case    0:*/		return 0x8222DA44;
		  /* 8222DA44h */ case    1:  		/* lwz R25, <#[R1 + 84]> */
		/* 8222DA44h case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 8222DA44h case    1:*/		return 0x8222DA48;
		  /* 8222DA48h */ case    2:  		/* lwz R26, <#[R1 + 88]> */
		/* 8222DA48h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 8222DA48h case    2:*/		return 0x8222DA4C;
	}
	return 0x8222DA4C;
} // Block from 8222DA40h-8222DA4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222DA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DA4C);
		  /* 8222DA4Ch */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 8222DA4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8222DA4Ch case    0:*/		return 0x8222DA50;
		  /* 8222DA50h */ case    1:  		/* b -252 */
		/* 8222DA50h case    1:*/		return 0x8222D954;
		/* 8222DA50h case    1:*/		return 0x8222DA54;
	}
	return 0x8222DA54;
} // Block from 8222DA4Ch-8222DA54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DA54);
		  /* 8222DA54h */ case    0:  		/* stw R27, <#[R20]> */
		/* 8222DA54h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R20 + 0x00000000) );
		/* 8222DA54h case    0:*/		return 0x8222DA58;
		  /* 8222DA58h */ case    1:  		/* li R3, 1 */
		/* 8222DA58h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222DA58h case    1:*/		return 0x8222DA5C;
		  /* 8222DA5Ch */ case    2:  		/* stw R25, <#[R19]> */
		/* 8222DA5Ch case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R19 + 0x00000000) );
		/* 8222DA5Ch case    2:*/		return 0x8222DA60;
		  /* 8222DA60h */ case    3:  		/* stw R26, <#[R18]> */
		/* 8222DA60h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R18 + 0x00000000) );
		/* 8222DA60h case    3:*/		return 0x8222DA64;
	}
	return 0x8222DA64;
} // Block from 8222DA54h-8222DA64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222DA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DA64);
		  /* 8222DA64h */ case    0:  		/* addi R1, R1, 224 */
		/* 8222DA64h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8222DA64h case    0:*/		return 0x8222DA68;
		  /* 8222DA68h */ case    1:  		/* b -1689576 */
		/* 8222DA68h case    1:*/		return 0x82091280;
		/* 8222DA68h case    1:*/		return 0x8222DA6C;
		  /* 8222DA6Ch */ case    2:  		/* nop */
		/* 8222DA6Ch case    2:*/		cpu::op::nop();
		/* 8222DA6Ch case    2:*/		return 0x8222DA70;
	}
	return 0x8222DA70;
} // Block from 8222DA64h-8222DA70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222DA70h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DA70);
		  /* 8222DA70h */ case    0:  		/* mfspr R12, LR */
		/* 8222DA70h case    0:*/		regs.R12 = regs.LR;
		/* 8222DA70h case    0:*/		return 0x8222DA74;
		  /* 8222DA74h */ case    1:  		/* bl -1689632 */
		/* 8222DA74h case    1:*/		regs.LR = 0x8222DA78; return 0x82091254;
		/* 8222DA74h case    1:*/		return 0x8222DA78;
		  /* 8222DA78h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222DA78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222DA78h case    2:*/		return 0x8222DA7C;
		  /* 8222DA7Ch */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222DA7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222DA7Ch case    3:*/		return 0x8222DA80;
		  /* 8222DA80h */ case    4:  		/* mr R27, R3 */
		/* 8222DA80h case    4:*/		regs.R27 = regs.R3;
		/* 8222DA80h case    4:*/		return 0x8222DA84;
		  /* 8222DA84h */ case    5:  		/* mr R31, R4 */
		/* 8222DA84h case    5:*/		regs.R31 = regs.R4;
		/* 8222DA84h case    5:*/		return 0x8222DA88;
		  /* 8222DA88h */ case    6:  		/* mr R30, R5 */
		/* 8222DA88h case    6:*/		regs.R30 = regs.R5;
		/* 8222DA88h case    6:*/		return 0x8222DA8C;
		  /* 8222DA8Ch */ case    7:  		/* mr R29, R6 */
		/* 8222DA8Ch case    7:*/		regs.R29 = regs.R6;
		/* 8222DA8Ch case    7:*/		return 0x8222DA90;
		  /* 8222DA90h */ case    8:  		/* mr R28, R7 */
		/* 8222DA90h case    8:*/		regs.R28 = regs.R7;
		/* 8222DA90h case    8:*/		return 0x8222DA94;
		  /* 8222DA94h */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222DA94h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222DA94h case    9:*/		return 0x8222DA98;
		  /* 8222DA98h */ case   10:  		/* b 184 */
		/* 8222DA98h case   10:*/		return 0x8222DB50;
		/* 8222DA98h case   10:*/		return 0x8222DA9C;
		  /* 8222DA9Ch */ case   11:  		/* cmplwi CR6, R11, 125 */
		/* 8222DA9Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 8222DA9Ch case   11:*/		return 0x8222DAA0;
		  /* 8222DAA0h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 8222DAA0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8222DAB0;  }
		/* 8222DAA0h case   12:*/		return 0x8222DAA4;
		  /* 8222DAA4h */ case   13:  		/* cmplwi CR6, R11, 124 */
		/* 8222DAA4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 8222DAA4h case   13:*/		return 0x8222DAA8;
		  /* 8222DAA8h */ case   14:  		/* li R10, 0 */
		/* 8222DAA8h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222DAA8h case   14:*/		return 0x8222DAAC;
		  /* 8222DAACh */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 8222DAACh case   15:*/		if ( !regs.CR[6].eq ) { return 0x8222DAB4;  }
		/* 8222DAACh case   15:*/		return 0x8222DAB0;
	}
	return 0x8222DAB0;
} // Block from 8222DA70h-8222DAB0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8222DAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DAB0);
		  /* 8222DAB0h */ case    0:  		/* li R10, 1 */
		/* 8222DAB0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222DAB0h case    0:*/		return 0x8222DAB4;
	}
	return 0x8222DAB4;
} // Block from 8222DAB0h-8222DAB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222DAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DAB4);
		  /* 8222DAB4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222DAB4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222DAB4h case    0:*/		return 0x8222DAB8;
		  /* 8222DAB8h */ case    1:  		/* bc 4, CR0_EQ, 160 */
		/* 8222DAB8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222DB58;  }
		/* 8222DAB8h case    1:*/		return 0x8222DABC;
		  /* 8222DABCh */ case    2:  		/* cmplwi CR6, R11, 113 */
		/* 8222DABCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000071);
		/* 8222DABCh case    2:*/		return 0x8222DAC0;
		  /* 8222DAC0h */ case    3:  		/* bc 12, CR6_EQ, 152 */
		/* 8222DAC0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222DB58;  }
		/* 8222DAC0h case    3:*/		return 0x8222DAC4;
		  /* 8222DAC4h */ case    4:  		/* lwz R11, <#[R30 + 8]> */
		/* 8222DAC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222DAC4h case    4:*/		return 0x8222DAC8;
		  /* 8222DAC8h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222DAC8h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222DAC8h case    5:*/		return 0x8222DACC;
		  /* 8222DACCh */ case    6:  		/* cmplwi CR6, R11, 14336 */
		/* 8222DACCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8222DACCh case    6:*/		return 0x8222DAD0;
		  /* 8222DAD0h */ case    7:  		/* bc 12, CR6_EQ, 136 */
		/* 8222DAD0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222DB58;  }
		/* 8222DAD0h case    7:*/		return 0x8222DAD4;
		  /* 8222DAD4h */ case    8:  		/* lwz R11, <#[R31 + 28]> */
		/* 8222DAD4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8222DAD4h case    8:*/		return 0x8222DAD8;
		  /* 8222DAD8h */ case    9:  		/* lwz R10, <#[R30 + 28]> */
		/* 8222DAD8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 8222DAD8h case    9:*/		return 0x8222DADC;
		  /* 8222DADCh */ case   10:  		/* cmpw CR6, R11, R10 */
		/* 8222DADCh case   10:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8222DADCh case   10:*/		return 0x8222DAE0;
		  /* 8222DAE0h */ case   11:  		/* bc 4, CR6_EQ, 120 */
		/* 8222DAE0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8222DB58;  }
		/* 8222DAE0h case   11:*/		return 0x8222DAE4;
		  /* 8222DAE4h */ case   12:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8222DAE4h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8222DAE4h case   12:*/		return 0x8222DAE8;
		  /* 8222DAE8h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 8222DAE8h case   13:*/		if ( regs.CR[0].eq ) { return 0x8222DAFC;  }
		/* 8222DAE8h case   13:*/		return 0x8222DAEC;
		  /* 8222DAECh */ case   14:  		/* mr R4, R31 */
		/* 8222DAECh case   14:*/		regs.R4 = regs.R31;
		/* 8222DAECh case   14:*/		return 0x8222DAF0;
		  /* 8222DAF0h */ case   15:  		/* mr R3, R30 */
		/* 8222DAF0h case   15:*/		regs.R3 = regs.R30;
		/* 8222DAF0h case   15:*/		return 0x8222DAF4;
		  /* 8222DAF4h */ case   16:  		/* bl -600756 */
		/* 8222DAF4h case   16:*/		regs.LR = 0x8222DAF8; return 0x8219B040;
		/* 8222DAF4h case   16:*/		return 0x8222DAF8;
		  /* 8222DAF8h */ case   17:  		/* b 48 */
		/* 8222DAF8h case   17:*/		return 0x8222DB28;
		/* 8222DAF8h case   17:*/		return 0x8222DAFC;
	}
	return 0x8222DAFC;
} // Block from 8222DAB4h-8222DAFCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222DAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DAFC);
		  /* 8222DAFCh */ case    0:  		/* mr R11, R30 */
		/* 8222DAFCh case    0:*/		regs.R11 = regs.R30;
		/* 8222DAFCh case    0:*/		return 0x8222DB00;
		  /* 8222DB00h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DB00h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DB00h case    1:*/		return 0x8222DB04;
		  /* 8222DB04h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8222DB04h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8222DB04h case    2:*/		return 0x8222DB08;
		  /* 8222DB08h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222DB08h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DB08h case    3:*/		return 0x8222DB0C;
		  /* 8222DB0Ch */ case    4:  		/* bc 4, CR0_EQ, 88 */
		/* 8222DB0Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222DB64;  }
		/* 8222DB0Ch case    4:*/		return 0x8222DB10;
		  /* 8222DB10h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DB10h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DB10h case    5:*/		return 0x8222DB14;
		  /* 8222DB14h */ case    6:  		/* addic. R11, R11, -40 */
		/* 8222DB14h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8222DB14h case    6:*/		return 0x8222DB18;
		  /* 8222DB18h */ case    7:  		/* bc 12, CR0_EQ, 76 */
		/* 8222DB18h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222DB64;  }
		/* 8222DB18h case    7:*/		return 0x8222DB1C;
		  /* 8222DB1Ch */ case    8:  		/* cmplw CR6, R11, R31 */
		/* 8222DB1Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222DB1Ch case    8:*/		return 0x8222DB20;
		  /* 8222DB20h */ case    9:  		/* bc 4, CR6_EQ, -32 */
		/* 8222DB20h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222DB00;  }
		/* 8222DB20h case    9:*/		return 0x8222DB24;
		  /* 8222DB24h */ case   10:  		/* li R3, 1 */
		/* 8222DB24h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222DB24h case   10:*/		return 0x8222DB28;
	}
	return 0x8222DB28;
} // Block from 8222DAFCh-8222DB28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB28);
		  /* 8222DB28h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222DB28h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222DB28h case    0:*/		return 0x8222DB2C;
		  /* 8222DB2Ch */ case    1:  		/* bc 12, CR0_EQ, 64 */
		/* 8222DB2Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8222DB6C;  }
		/* 8222DB2Ch case    1:*/		return 0x8222DB30;
		  /* 8222DB30h */ case    2:  		/* mr R11, R31 */
		/* 8222DB30h case    2:*/		regs.R11 = regs.R31;
		/* 8222DB30h case    2:*/		return 0x8222DB34;
		  /* 8222DB34h */ case    3:  		/* mr R31, R30 */
		/* 8222DB34h case    3:*/		regs.R31 = regs.R30;
		/* 8222DB34h case    3:*/		return 0x8222DB38;
		  /* 8222DB38h */ case    4:  		/* rlwinm R10, R29, 0, 24, 31 */
		/* 8222DB38h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R29);
		/* 8222DB38h case    4:*/		return 0x8222DB3C;
		  /* 8222DB3Ch */ case    5:  		/* mr R30, R11 */
		/* 8222DB3Ch case    5:*/		regs.R30 = regs.R11;
		/* 8222DB3Ch case    5:*/		return 0x8222DB40;
	}
	return 0x8222DB40;
} // Block from 8222DB28h-8222DB40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB40h
// Function '?RevokeConstantOutput@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB40);
		  /* 8222DB40h */ case    0:  		/* cntlzw R11, R10 */
		/* 8222DB40h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R10);
		/* 8222DB40h case    0:*/		return 0x8222DB44;
		  /* 8222DB44h */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222DB44h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222DB44h case    1:*/		return 0x8222DB48;
		  /* 8222DB48h */ case    2:  		/* rlwinm R29, R11, 27, 31, 31 */
		/* 8222DB48h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R11);
		/* 8222DB48h case    2:*/		return 0x8222DB4C;
		  /* 8222DB4Ch */ case    3:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8222DB4Ch case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8222DB4Ch case    3:*/		return 0x8222DB50;
	}
	return 0x8222DB50;
} // Block from 8222DB40h-8222DB50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB50);
		  /* 8222DB50h */ case    0:  		/* cmplwi CR6, R11, 112 */
		/* 8222DB50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000070);
		/* 8222DB50h case    0:*/		return 0x8222DB54;
		  /* 8222DB54h */ case    1:  		/* bc 4, CR6_EQ, -184 */
		/* 8222DB54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222DA9C;  }
		/* 8222DB54h case    1:*/		return 0x8222DB58;
	}
	return 0x8222DB58;
} // Block from 8222DB50h-8222DB58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB58);
		  /* 8222DB58h */ case    0:  		/* li R3, 0 */
		/* 8222DB58h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222DB58h case    0:*/		return 0x8222DB5C;
		  /* 8222DB5Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 8222DB5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8222DB5Ch case    1:*/		return 0x8222DB60;
		  /* 8222DB60h */ case    2:  		/* b -1689788 */
		/* 8222DB60h case    2:*/		return 0x820912A4;
		/* 8222DB60h case    2:*/		return 0x8222DB64;
	}
	return 0x8222DB64;
} // Block from 8222DB58h-8222DB64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB64);
		  /* 8222DB64h */ case    0:  		/* li R3, 0 */
		/* 8222DB64h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222DB64h case    0:*/		return 0x8222DB68;
		  /* 8222DB68h */ case    1:  		/* b -64 */
		/* 8222DB68h case    1:*/		return 0x8222DB28;
		/* 8222DB68h case    1:*/		return 0x8222DB6C;
	}
	return 0x8222DB6C;
} // Block from 8222DB64h-8222DB6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB6C);
		  /* 8222DB6Ch */ case    0:  		/* mr R7, R28 */
		/* 8222DB6Ch case    0:*/		regs.R7 = regs.R28;
		/* 8222DB6Ch case    0:*/		return 0x8222DB70;
		  /* 8222DB70h */ case    1:  		/* mr R6, R29 */
		/* 8222DB70h case    1:*/		regs.R6 = regs.R29;
		/* 8222DB70h case    1:*/		return 0x8222DB74;
		  /* 8222DB74h */ case    2:  		/* mr R5, R30 */
		/* 8222DB74h case    2:*/		regs.R5 = regs.R30;
		/* 8222DB74h case    2:*/		return 0x8222DB78;
		  /* 8222DB78h */ case    3:  		/* mr R4, R31 */
		/* 8222DB78h case    3:*/		regs.R4 = regs.R31;
		/* 8222DB78h case    3:*/		return 0x8222DB7C;
		  /* 8222DB7Ch */ case    4:  		/* mr R3, R27 */
		/* 8222DB7Ch case    4:*/		regs.R3 = regs.R27;
		/* 8222DB7Ch case    4:*/		return 0x8222DB80;
		  /* 8222DB80h */ case    5:  		/* bl -7752 */
		/* 8222DB80h case    5:*/		regs.LR = 0x8222DB84; return 0x8222BD38;
		/* 8222DB80h case    5:*/		return 0x8222DB84;
		  /* 8222DB84h */ case    6:  		/* b -40 */
		/* 8222DB84h case    6:*/		return 0x8222DB5C;
		/* 8222DB84h case    6:*/		return 0x8222DB88;
	}
	return 0x8222DB88;
} // Block from 8222DB6Ch-8222DB88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222DB88h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DB88);
		  /* 8222DB88h */ case    0:  		/* mfspr R12, LR */
		/* 8222DB88h case    0:*/		regs.R12 = regs.LR;
		/* 8222DB88h case    0:*/		return 0x8222DB8C;
		  /* 8222DB8Ch */ case    1:  		/* bl -1689916 */
		/* 8222DB8Ch case    1:*/		regs.LR = 0x8222DB90; return 0x82091250;
		/* 8222DB8Ch case    1:*/		return 0x8222DB90;
		  /* 8222DB90h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8222DB90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8222DB90h case    2:*/		return 0x8222DB94;
		  /* 8222DB94h */ case    3:  		/* mr R27, R3 */
		/* 8222DB94h case    3:*/		regs.R27 = regs.R3;
		/* 8222DB94h case    3:*/		return 0x8222DB98;
		  /* 8222DB98h */ case    4:  		/* mr R31, R4 */
		/* 8222DB98h case    4:*/		regs.R31 = regs.R4;
		/* 8222DB98h case    4:*/		return 0x8222DB9C;
		  /* 8222DB9Ch */ case    5:  		/* mr R30, R5 */
		/* 8222DB9Ch case    5:*/		regs.R30 = regs.R5;
		/* 8222DB9Ch case    5:*/		return 0x8222DBA0;
		  /* 8222DBA0h */ case    6:  		/* mr R29, R6 */
		/* 8222DBA0h case    6:*/		regs.R29 = regs.R6;
		/* 8222DBA0h case    6:*/		return 0x8222DBA4;
		  /* 8222DBA4h */ case    7:  		/* mr R28, R7 */
		/* 8222DBA4h case    7:*/		regs.R28 = regs.R7;
		/* 8222DBA4h case    7:*/		return 0x8222DBA8;
		  /* 8222DBA8h */ case    8:  		/* rlwinm R26, R7, 0, 24, 31 */
		/* 8222DBA8h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R26,regs.R7);
		/* 8222DBA8h case    8:*/		return 0x8222DBAC;
		  /* 8222DBACh */ case    9:  		/* cmplwi CR6, R26, 0 */
		/* 8222DBACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222DBACh case    9:*/		return 0x8222DBB0;
		  /* 8222DBB0h */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 8222DBB0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222DBC4;  }
		/* 8222DBB0h case   10:*/		return 0x8222DBB4;
		  /* 8222DBB4h */ case   11:  		/* mr R4, R31 */
		/* 8222DBB4h case   11:*/		regs.R4 = regs.R31;
		/* 8222DBB4h case   11:*/		return 0x8222DBB8;
		  /* 8222DBB8h */ case   12:  		/* mr R3, R30 */
		/* 8222DBB8h case   12:*/		regs.R3 = regs.R30;
		/* 8222DBB8h case   12:*/		return 0x8222DBBC;
		  /* 8222DBBCh */ case   13:  		/* bl -600956 */
		/* 8222DBBCh case   13:*/		regs.LR = 0x8222DBC0; return 0x8219B040;
		/* 8222DBBCh case   13:*/		return 0x8222DBC0;
		  /* 8222DBC0h */ case   14:  		/* b 48 */
		/* 8222DBC0h case   14:*/		return 0x8222DBF0;
		/* 8222DBC0h case   14:*/		return 0x8222DBC4;
	}
	return 0x8222DBC4;
} // Block from 8222DB88h-8222DBC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8222DBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DBC4);
		  /* 8222DBC4h */ case    0:  		/* mr R11, R30 */
		/* 8222DBC4h case    0:*/		regs.R11 = regs.R30;
		/* 8222DBC4h case    0:*/		return 0x8222DBC8;
		  /* 8222DBC8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DBC8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DBC8h case    1:*/		return 0x8222DBCC;
		  /* 8222DBCCh */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8222DBCCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8222DBCCh case    2:*/		return 0x8222DBD0;
		  /* 8222DBD0h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222DBD0h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DBD0h case    3:*/		return 0x8222DBD4;
		  /* 8222DBD4h */ case    4:  		/* bc 4, CR0_EQ, 64 */
		/* 8222DBD4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222DC14;  }
		/* 8222DBD4h case    4:*/		return 0x8222DBD8;
		  /* 8222DBD8h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DBD8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DBD8h case    5:*/		return 0x8222DBDC;
		  /* 8222DBDCh */ case    6:  		/* addic. R11, R11, -40 */
		/* 8222DBDCh case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8222DBDCh case    6:*/		return 0x8222DBE0;
		  /* 8222DBE0h */ case    7:  		/* bc 12, CR0_EQ, 52 */
		/* 8222DBE0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222DC14;  }
		/* 8222DBE0h case    7:*/		return 0x8222DBE4;
		  /* 8222DBE4h */ case    8:  		/* cmplw CR6, R11, R31 */
		/* 8222DBE4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222DBE4h case    8:*/		return 0x8222DBE8;
		  /* 8222DBE8h */ case    9:  		/* bc 4, CR6_EQ, -32 */
		/* 8222DBE8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222DBC8;  }
		/* 8222DBE8h case    9:*/		return 0x8222DBEC;
		  /* 8222DBECh */ case   10:  		/* li R3, 1 */
		/* 8222DBECh case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222DBECh case   10:*/		return 0x8222DBF0;
	}
	return 0x8222DBF0;
} // Block from 8222DBC4h-8222DBF0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222DBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DBF0);
		  /* 8222DBF0h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222DBF0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222DBF0h case    0:*/		return 0x8222DBF4;
		  /* 8222DBF4h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 8222DBF4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222DC1C;  }
		/* 8222DBF4h case    1:*/		return 0x8222DBF8;
		  /* 8222DBF8h */ case    2:  		/* rlwinm R10, R29, 0, 24, 31 */
		/* 8222DBF8h case    2:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R29);
		/* 8222DBF8h case    2:*/		return 0x8222DBFC;
		  /* 8222DBFCh */ case    3:  		/* mr R11, R31 */
		/* 8222DBFCh case    3:*/		regs.R11 = regs.R31;
		/* 8222DBFCh case    3:*/		return 0x8222DC00;
		  /* 8222DC00h */ case    4:  		/* cntlzw R10, R10 */
		/* 8222DC00h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8222DC00h case    4:*/		return 0x8222DC04;
		  /* 8222DC04h */ case    5:  		/* mr R31, R30 */
		/* 8222DC04h case    5:*/		regs.R31 = regs.R30;
		/* 8222DC04h case    5:*/		return 0x8222DC08;
		  /* 8222DC08h */ case    6:  		/* rlwinm R29, R10, 27, 31, 31 */
		/* 8222DC08h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R10);
		/* 8222DC08h case    6:*/		return 0x8222DC0C;
		  /* 8222DC0Ch */ case    7:  		/* mr R30, R11 */
		/* 8222DC0Ch case    7:*/		regs.R30 = regs.R11;
		/* 8222DC0Ch case    7:*/		return 0x8222DC10;
		  /* 8222DC10h */ case    8:  		/* b -100 */
		/* 8222DC10h case    8:*/		return 0x8222DBAC;
		/* 8222DC10h case    8:*/		return 0x8222DC14;
	}
	return 0x8222DC14;
} // Block from 8222DBF0h-8222DC14h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222DC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DC14);
		  /* 8222DC14h */ case    0:  		/* li R3, 0 */
		/* 8222DC14h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222DC14h case    0:*/		return 0x8222DC18;
		  /* 8222DC18h */ case    1:  		/* b -40 */
		/* 8222DC18h case    1:*/		return 0x8222DBF0;
		/* 8222DC18h case    1:*/		return 0x8222DC1C;
	}
	return 0x8222DC1C;
} // Block from 8222DC14h-8222DC1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DC1C);
		  /* 8222DC1Ch */ case    0:  		/* mr R7, R28 */
		/* 8222DC1Ch case    0:*/		regs.R7 = regs.R28;
		/* 8222DC1Ch case    0:*/		return 0x8222DC20;
		  /* 8222DC20h */ case    1:  		/* mr R6, R29 */
		/* 8222DC20h case    1:*/		regs.R6 = regs.R29;
		/* 8222DC20h case    1:*/		return 0x8222DC24;
		  /* 8222DC24h */ case    2:  		/* mr R5, R30 */
		/* 8222DC24h case    2:*/		regs.R5 = regs.R30;
		/* 8222DC24h case    2:*/		return 0x8222DC28;
		  /* 8222DC28h */ case    3:  		/* mr R4, R31 */
		/* 8222DC28h case    3:*/		regs.R4 = regs.R31;
		/* 8222DC28h case    3:*/		return 0x8222DC2C;
		  /* 8222DC2Ch */ case    4:  		/* mr R3, R27 */
		/* 8222DC2Ch case    4:*/		regs.R3 = regs.R27;
		/* 8222DC2Ch case    4:*/		return 0x8222DC30;
		  /* 8222DC30h */ case    5:  		/* bl -7128 */
		/* 8222DC30h case    5:*/		regs.LR = 0x8222DC34; return 0x8222C058;
		/* 8222DC30h case    5:*/		return 0x8222DC34;
		  /* 8222DC34h */ case    6:  		/* addi R1, R1, 144 */
		/* 8222DC34h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8222DC34h case    6:*/		return 0x8222DC38;
		  /* 8222DC38h */ case    7:  		/* b -1690008 */
		/* 8222DC38h case    7:*/		return 0x820912A0;
		/* 8222DC38h case    7:*/		return 0x8222DC3C;
		  /* 8222DC3Ch */ case    8:  		/* nop */
		/* 8222DC3Ch case    8:*/		cpu::op::nop();
		/* 8222DC3Ch case    8:*/		return 0x8222DC40;
	}
	return 0x8222DC40;
} // Block from 8222DC1Ch-8222DC40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222DC40h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DC40);
		  /* 8222DC40h */ case    0:  		/* mfspr R12, LR */
		/* 8222DC40h case    0:*/		regs.R12 = regs.LR;
		/* 8222DC40h case    0:*/		return 0x8222DC44;
		  /* 8222DC44h */ case    1:  		/* bl -1690092 */
		/* 8222DC44h case    1:*/		regs.LR = 0x8222DC48; return 0x82091258;
		/* 8222DC44h case    1:*/		return 0x8222DC48;
		  /* 8222DC48h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222DC48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222DC48h case    2:*/		return 0x8222DC4C;
		  /* 8222DC4Ch */ case    3:  		/* mr R28, R3 */
		/* 8222DC4Ch case    3:*/		regs.R28 = regs.R3;
		/* 8222DC4Ch case    3:*/		return 0x8222DC50;
		  /* 8222DC50h */ case    4:  		/* mr R3, R4 */
		/* 8222DC50h case    4:*/		regs.R3 = regs.R4;
		/* 8222DC50h case    4:*/		return 0x8222DC54;
		  /* 8222DC54h */ case    5:  		/* mr R31, R4 */
		/* 8222DC54h case    5:*/		regs.R31 = regs.R4;
		/* 8222DC54h case    5:*/		return 0x8222DC58;
		  /* 8222DC58h */ case    6:  		/* mr R30, R5 */
		/* 8222DC58h case    6:*/		regs.R30 = regs.R5;
		/* 8222DC58h case    6:*/		return 0x8222DC5C;
		  /* 8222DC5Ch */ case    7:  		/* mr R29, R6 */
		/* 8222DC5Ch case    7:*/		regs.R29 = regs.R6;
		/* 8222DC5Ch case    7:*/		return 0x8222DC60;
		  /* 8222DC60h */ case    8:  		/* bl -639568 */
		/* 8222DC60h case    8:*/		regs.LR = 0x8222DC64; return 0x82191A10;
		/* 8222DC60h case    8:*/		return 0x8222DC64;
		  /* 8222DC64h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222DC64h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222DC64h case    9:*/		return 0x8222DC68;
		  /* 8222DC68h */ case   10:  		/* bc 12, CR0_EQ, 104 */
		/* 8222DC68h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222DCD0;  }
		/* 8222DC68h case   10:*/		return 0x8222DC6C;
		  /* 8222DC6Ch */ case   11:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 8222DC6Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8222DC6Ch case   11:*/		return 0x8222DC70;
		  /* 8222DC70h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 8222DC70h case   12:*/		if ( regs.CR[0].eq ) { return 0x8222DC84;  }
		/* 8222DC70h case   12:*/		return 0x8222DC74;
		  /* 8222DC74h */ case   13:  		/* mr R4, R31 */
		/* 8222DC74h case   13:*/		regs.R4 = regs.R31;
		/* 8222DC74h case   13:*/		return 0x8222DC78;
		  /* 8222DC78h */ case   14:  		/* mr R3, R30 */
		/* 8222DC78h case   14:*/		regs.R3 = regs.R30;
		/* 8222DC78h case   14:*/		return 0x8222DC7C;
		  /* 8222DC7Ch */ case   15:  		/* bl -601148 */
		/* 8222DC7Ch case   15:*/		regs.LR = 0x8222DC80; return 0x8219B040;
		/* 8222DC7Ch case   15:*/		return 0x8222DC80;
		  /* 8222DC80h */ case   16:  		/* b 48 */
		/* 8222DC80h case   16:*/		return 0x8222DCB0;
		/* 8222DC80h case   16:*/		return 0x8222DC84;
	}
	return 0x8222DC84;
} // Block from 8222DC40h-8222DC84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222DC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DC84);
		  /* 8222DC84h */ case    0:  		/* mr R11, R30 */
		/* 8222DC84h case    0:*/		regs.R11 = regs.R30;
		/* 8222DC84h case    0:*/		return 0x8222DC88;
		  /* 8222DC88h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DC88h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DC88h case    1:*/		return 0x8222DC8C;
		  /* 8222DC8Ch */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8222DC8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8222DC8Ch case    2:*/		return 0x8222DC90;
		  /* 8222DC90h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222DC90h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DC90h case    3:*/		return 0x8222DC94;
		  /* 8222DC94h */ case    4:  		/* bc 4, CR0_EQ, 68 */
		/* 8222DC94h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222DCD8;  }
		/* 8222DC94h case    4:*/		return 0x8222DC98;
		  /* 8222DC98h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DC98h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DC98h case    5:*/		return 0x8222DC9C;
		  /* 8222DC9Ch */ case    6:  		/* addic. R11, R11, -40 */
		/* 8222DC9Ch case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8222DC9Ch case    6:*/		return 0x8222DCA0;
		  /* 8222DCA0h */ case    7:  		/* bc 12, CR0_EQ, 56 */
		/* 8222DCA0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222DCD8;  }
		/* 8222DCA0h case    7:*/		return 0x8222DCA4;
		  /* 8222DCA4h */ case    8:  		/* cmplw CR6, R11, R31 */
		/* 8222DCA4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222DCA4h case    8:*/		return 0x8222DCA8;
		  /* 8222DCA8h */ case    9:  		/* bc 4, CR6_EQ, -32 */
		/* 8222DCA8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222DC88;  }
		/* 8222DCA8h case    9:*/		return 0x8222DCAC;
		  /* 8222DCACh */ case   10:  		/* li R3, 1 */
		/* 8222DCACh case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222DCACh case   10:*/		return 0x8222DCB0;
	}
	return 0x8222DCB0;
} // Block from 8222DC84h-8222DCB0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222DCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DCB0);
		  /* 8222DCB0h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222DCB0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222DCB0h case    0:*/		return 0x8222DCB4;
		  /* 8222DCB4h */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 8222DCB4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222DCD0;  }
		/* 8222DCB4h case    1:*/		return 0x8222DCB8;
		  /* 8222DCB8h */ case    2:  		/* mr R7, R29 */
		/* 8222DCB8h case    2:*/		regs.R7 = regs.R29;
		/* 8222DCB8h case    2:*/		return 0x8222DCBC;
		  /* 8222DCBCh */ case    3:  		/* li R6, 1 */
		/* 8222DCBCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222DCBCh case    3:*/		return 0x8222DCC0;
		  /* 8222DCC0h */ case    4:  		/* mr R5, R30 */
		/* 8222DCC0h case    4:*/		regs.R5 = regs.R30;
		/* 8222DCC0h case    4:*/		return 0x8222DCC4;
		  /* 8222DCC4h */ case    5:  		/* mr R4, R31 */
		/* 8222DCC4h case    5:*/		regs.R4 = regs.R31;
		/* 8222DCC4h case    5:*/		return 0x8222DCC8;
		  /* 8222DCC8h */ case    6:  		/* mr R3, R28 */
		/* 8222DCC8h case    6:*/		regs.R3 = regs.R28;
		/* 8222DCC8h case    6:*/		return 0x8222DCCC;
		  /* 8222DCCCh */ case    7:  		/* bl -324 */
		/* 8222DCCCh case    7:*/		regs.LR = 0x8222DCD0; return 0x8222DB88;
		/* 8222DCCCh case    7:*/		return 0x8222DCD0;
	}
	return 0x8222DCD0;
} // Block from 8222DCB0h-8222DCD0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222DCD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DCD0);
		  /* 8222DCD0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8222DCD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8222DCD0h case    0:*/		return 0x8222DCD4;
		  /* 8222DCD4h */ case    1:  		/* b -1690156 */
		/* 8222DCD4h case    1:*/		return 0x820912A8;
		/* 8222DCD4h case    1:*/		return 0x8222DCD8;
	}
	return 0x8222DCD8;
} // Block from 8222DCD0h-8222DCD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DCD8);
		  /* 8222DCD8h */ case    0:  		/* li R3, 0 */
		/* 8222DCD8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222DCD8h case    0:*/		return 0x8222DCDC;
		  /* 8222DCDCh */ case    1:  		/* b -44 */
		/* 8222DCDCh case    1:*/		return 0x8222DCB0;
		/* 8222DCDCh case    1:*/		return 0x8222DCE0;
	}
	return 0x8222DCE0;
} // Block from 8222DCD8h-8222DCE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DCE0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DCE0);
		  /* 8222DCE0h */ case    0:  		/* mfspr R12, LR */
		/* 8222DCE0h case    0:*/		regs.R12 = regs.LR;
		/* 8222DCE0h case    0:*/		return 0x8222DCE4;
		  /* 8222DCE4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8222DCE4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8222DCE4h case    1:*/		return 0x8222DCE8;
		  /* 8222DCE8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8222DCE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8222DCE8h case    2:*/		return 0x8222DCEC;
		  /* 8222DCECh */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222DCECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222DCECh case    3:*/		return 0x8222DCF0;
		  /* 8222DCF0h */ case    4:  		/* mr R7, R5 */
		/* 8222DCF0h case    4:*/		regs.R7 = regs.R5;
		/* 8222DCF0h case    4:*/		return 0x8222DCF4;
		  /* 8222DCF4h */ case    5:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222DCF4h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222DCF4h case    5:*/		return 0x8222DCF8;
		  /* 8222DCF8h */ case    6:  		/* cmplwi CR6, R11, 112 */
		/* 8222DCF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000070);
		/* 8222DCF8h case    6:*/		return 0x8222DCFC;
		  /* 8222DCFCh */ case    7:  		/* bc 12, CR6_EQ, 80 */
		/* 8222DCFCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8222DD4C;  }
		/* 8222DCFCh case    7:*/		return 0x8222DD00;
		  /* 8222DD00h */ case    8:  		/* cmplwi CR6, R11, 125 */
		/* 8222DD00h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 8222DD00h case    8:*/		return 0x8222DD04;
		  /* 8222DD04h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8222DD04h case    9:*/		if ( regs.CR[6].eq ) { return 0x8222DD14;  }
		/* 8222DD04h case    9:*/		return 0x8222DD08;
		  /* 8222DD08h */ case   10:  		/* cmplwi CR6, R11, 124 */
		/* 8222DD08h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 8222DD08h case   10:*/		return 0x8222DD0C;
		  /* 8222DD0Ch */ case   11:  		/* li R10, 0 */
		/* 8222DD0Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222DD0Ch case   11:*/		return 0x8222DD10;
		  /* 8222DD10h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 8222DD10h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8222DD18;  }
		/* 8222DD10h case   12:*/		return 0x8222DD14;
	}
	return 0x8222DD14;
} // Block from 8222DCE0h-8222DD14h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222DD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DD14);
		  /* 8222DD14h */ case    0:  		/* li R10, 1 */
		/* 8222DD14h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222DD14h case    0:*/		return 0x8222DD18;
	}
	return 0x8222DD18;
} // Block from 8222DD14h-8222DD18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222DD18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DD18);
		  /* 8222DD18h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222DD18h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222DD18h case    0:*/		return 0x8222DD1C;
		  /* 8222DD1Ch */ case    1:  		/* bc 4, CR0_EQ, 48 */
		/* 8222DD1Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222DD4C;  }
		/* 8222DD1Ch case    1:*/		return 0x8222DD20;
		  /* 8222DD20h */ case    2:  		/* cmplwi CR6, R11, 113 */
		/* 8222DD20h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000071);
		/* 8222DD20h case    2:*/		return 0x8222DD24;
		  /* 8222DD24h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 8222DD24h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222DD4C;  }
		/* 8222DD24h case    3:*/		return 0x8222DD28;
	}
	return 0x8222DD28;
} // Block from 8222DD18h-8222DD28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222DD28h
// Function '?SimplifyDependents@Compiler@D3DXShader@@QAA_NPAVInstruction@2@0IIPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DD28);
		  /* 8222DD28h */ case    0:  		/* mr R5, R4 */
		/* 8222DD28h case    0:*/		regs.R5 = regs.R4;
		/* 8222DD28h case    0:*/		return 0x8222DD2C;
		  /* 8222DD2Ch */ case    1:  		/* mr R4, R3 */
		/* 8222DD2Ch case    1:*/		regs.R4 = regs.R3;
		/* 8222DD2Ch case    1:*/		return 0x8222DD30;
		  /* 8222DD30h */ case    2:  		/* li R6, 1 */
		/* 8222DD30h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222DD30h case    2:*/		return 0x8222DD34;
		  /* 8222DD34h */ case    3:  		/* mr R3, R7 */
		/* 8222DD34h case    3:*/		regs.R3 = regs.R7;
		/* 8222DD34h case    3:*/		return 0x8222DD38;
		  /* 8222DD38h */ case    4:  		/* bl -6352 */
		/* 8222DD38h case    4:*/		regs.LR = 0x8222DD3C; return 0x8222C468;
		/* 8222DD38h case    4:*/		return 0x8222DD3C;
		  /* 8222DD3Ch */ case    5:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8222DD3Ch case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222DD3Ch case    5:*/		return 0x8222DD40;
		  /* 8222DD40h */ case    6:  		/* cntlzw R11, R11 */
		/* 8222DD40h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8222DD40h case    6:*/		return 0x8222DD44;
		  /* 8222DD44h */ case    7:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8222DD44h case    7:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8222DD44h case    7:*/		return 0x8222DD48;
		  /* 8222DD48h */ case    8:  		/* b 16 */
		/* 8222DD48h case    8:*/		return 0x8222DD58;
		/* 8222DD48h case    8:*/		return 0x8222DD4C;
	}
	return 0x8222DD4C;
} // Block from 8222DD28h-8222DD4Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222DD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DD4C);
		  /* 8222DD4Ch */ case    0:  		/* li R6, 1 */
		/* 8222DD4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222DD4Ch case    0:*/		return 0x8222DD50;
		  /* 8222DD50h */ case    1:  		/* li R5, 0 */
		/* 8222DD50h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222DD50h case    1:*/		return 0x8222DD54;
		  /* 8222DD54h */ case    2:  		/* bl -8988 */
		/* 8222DD54h case    2:*/		regs.LR = 0x8222DD58; return 0x8222BA38;
		/* 8222DD54h case    2:*/		return 0x8222DD58;
	}
	return 0x8222DD58;
} // Block from 8222DD4Ch-8222DD58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222DD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DD58);
		  /* 8222DD58h */ case    0:  		/* addi R1, R1, 96 */
		/* 8222DD58h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8222DD58h case    0:*/		return 0x8222DD5C;
		  /* 8222DD5Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8222DD5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8222DD5Ch case    1:*/		return 0x8222DD60;
		  /* 8222DD60h */ case    2:  		/* mtspr LR, R12 */
		/* 8222DD60h case    2:*/		regs.LR = regs.R12;
		/* 8222DD60h case    2:*/		return 0x8222DD64;
		  /* 8222DD64h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8222DD64h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222DD64h case    3:*/		return 0x8222DD68;
	}
	return 0x8222DD68;
} // Block from 8222DD58h-8222DD68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222DD68h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DD68);
		  /* 8222DD68h */ case    0:  		/* mfspr R12, LR */
		/* 8222DD68h case    0:*/		regs.R12 = regs.LR;
		/* 8222DD68h case    0:*/		return 0x8222DD6C;
		  /* 8222DD6Ch */ case    1:  		/* bl -1690416 */
		/* 8222DD6Ch case    1:*/		regs.LR = 0x8222DD70; return 0x8209123C;
		/* 8222DD6Ch case    1:*/		return 0x8222DD70;
		  /* 8222DD70h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8222DD70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8222DD70h case    2:*/		return 0x8222DD74;
		  /* 8222DD74h */ case    3:  		/* mr R31, R4 */
		/* 8222DD74h case    3:*/		regs.R31 = regs.R4;
		/* 8222DD74h case    3:*/		return 0x8222DD78;
		  /* 8222DD78h */ case    4:  		/* mr R21, R5 */
		/* 8222DD78h case    4:*/		regs.R21 = regs.R5;
		/* 8222DD78h case    4:*/		return 0x8222DD7C;
		  /* 8222DD7Ch */ case    5:  		/* li R5, 38 */
		/* 8222DD7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222DD7Ch case    5:*/		return 0x8222DD80;
		  /* 8222DD80h */ case    6:  		/* li R4, 8 */
		/* 8222DD80h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222DD80h case    6:*/		return 0x8222DD84;
		  /* 8222DD84h */ case    7:  		/* mr R24, R3 */
		/* 8222DD84h case    7:*/		regs.R24 = regs.R3;
		/* 8222DD84h case    7:*/		return 0x8222DD88;
		  /* 8222DD88h */ case    8:  		/* bl -824472 */
		/* 8222DD88h case    8:*/		regs.LR = 0x8222DD8C; return 0x821648F0;
		/* 8222DD88h case    8:*/		return 0x8222DD8C;
		  /* 8222DD8Ch */ case    9:  		/* addi R23, R3, 4 */
		/* 8222DD8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R3,0x4);
		/* 8222DD8Ch case    9:*/		return 0x8222DD90;
		  /* 8222DD90h */ case   10:  		/* ori R11, R3, 1 */
		/* 8222DD90h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8222DD90h case   10:*/		return 0x8222DD94;
		  /* 8222DD94h */ case   11:  		/* ori R10, R23, 1 */
		/* 8222DD94h case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R23,0x1);
		/* 8222DD94h case   11:*/		return 0x8222DD98;
		  /* 8222DD98h */ case   12:  		/* stw R11, <#[R3 + 4]> */
		/* 8222DD98h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222DD98h case   12:*/		return 0x8222DD9C;
		  /* 8222DD9Ch */ case   13:  		/* mr R25, R3 */
		/* 8222DD9Ch case   13:*/		regs.R25 = regs.R3;
		/* 8222DD9Ch case   13:*/		return 0x8222DDA0;
		  /* 8222DDA0h */ case   14:  		/* stw R10, <#[R3]> */
		/* 8222DDA0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222DDA0h case   14:*/		return 0x8222DDA4;
		  /* 8222DDA4h */ case   15:  		/* li R22, 1 */
		/* 8222DDA4h case   15:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 8222DDA4h case   15:*/		return 0x8222DDA8;
		  /* 8222DDA8h */ case   16:  		/* lwz R26, <#[R31 + 12]> */
		/* 8222DDA8h case   16:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222DDA8h case   16:*/		return 0x8222DDAC;
		  /* 8222DDACh */ case   17:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222DDACh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222DDACh case   17:*/		return 0x8222DDB0;
		  /* 8222DDB0h */ case   18:  		/* oris R11, R11, 1024 */
		/* 8222DDB0h case   18:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222DDB0h case   18:*/		return 0x8222DDB4;
		  /* 8222DDB4h */ case   19:  		/* stw R11, <#[R26 + 8]> */
		/* 8222DDB4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222DDB4h case   19:*/		return 0x8222DDB8;
		  /* 8222DDB8h */ case   20:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222DDB8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222DDB8h case   20:*/		return 0x8222DDBC;
		  /* 8222DDBCh */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222DDBCh case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222DDBCh case   21:*/		return 0x8222DDC0;
		  /* 8222DDC0h */ case   22:  		/* cmplwi CR6, R11, 14336 */
		/* 8222DDC0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8222DDC0h case   22:*/		return 0x8222DDC4;
		  /* 8222DDC4h */ case   23:  		/* bc 4, CR6_EQ, 1024 */
		/* 8222DDC4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8222E1C4;  }
		/* 8222DDC4h case   23:*/		return 0x8222DDC8;
		  /* 8222DDC8h */ case   24:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 8222DDC8h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 8222DDC8h case   24:*/		return 0x8222DDCC;
		  /* 8222DDCCh */ case   25:  		/* bc 12, CR0_EQ, 580 */
		/* 8222DDCCh case   25:*/		if ( regs.CR[0].eq ) { return 0x8222E010;  }
		/* 8222DDCCh case   25:*/		return 0x8222DDD0;
		  /* 8222DDD0h */ case   26:  		/* lwz R11, <#[R26]> */
		/* 8222DDD0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222DDD0h case   26:*/		return 0x8222DDD4;
		  /* 8222DDD4h */ case   27:  		/* cmpwi CR6, R11, 0 */
		/* 8222DDD4h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8222DDD4h case   27:*/		return 0x8222DDD8;
		  /* 8222DDD8h */ case   28:  		/* bc 12, CR6_EQ, 596 */
		/* 8222DDD8h case   28:*/		if ( regs.CR[6].eq ) { return 0x8222E02C;  }
		/* 8222DDD8h case   28:*/		return 0x8222DDDC;
		  /* 8222DDDCh */ case   29:  		/* lwz R7, <#[R26 + 28]> */
		/* 8222DDDCh case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x0000001C) );
		/* 8222DDDCh case   29:*/		return 0x8222DDE0;
		  /* 8222DDE0h */ case   30:  		/* lwz R10, <#[R7 + 48]> */
		/* 8222DDE0h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000030) );
		/* 8222DDE0h case   30:*/		return 0x8222DDE4;
		  /* 8222DDE4h */ case   31:  		/* rlwinm. R10, R10, 11, 31, 31 */
		/* 8222DDE4h case   31:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R10,regs.R10);
		/* 8222DDE4h case   31:*/		return 0x8222DDE8;
		  /* 8222DDE8h */ case   32:  		/* bc 12, CR0_EQ, 552 */
		/* 8222DDE8h case   32:*/		if ( regs.CR[0].eq ) { return 0x8222E010;  }
		/* 8222DDE8h case   32:*/		return 0x8222DDEC;
		  /* 8222DDECh */ case   33:  		/* lwz R11, <#[R11 + 12]> */
		/* 8222DDECh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222DDECh case   33:*/		return 0x8222DDF0;
		  /* 8222DDF0h */ case   34:  		/* lwz R27, <#[R11 + 28]> */
		/* 8222DDF0h case   34:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x0000001C) );
		/* 8222DDF0h case   34:*/		return 0x8222DDF4;
		  /* 8222DDF4h */ case   35:  		/* lwz R11, <#[R27 + 48]> */
		/* 8222DDF4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 8222DDF4h case   35:*/		return 0x8222DDF8;
		  /* 8222DDF8h */ case   36:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 8222DDF8h case   36:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DDF8h case   36:*/		return 0x8222DDFC;
		  /* 8222DDFCh */ case   37:  		/* bc 4, CR0_EQ, 56 */
		/* 8222DDFCh case   37:*/		if ( !regs.CR[0].eq ) { return 0x8222DE34;  }
		/* 8222DDFCh case   37:*/		return 0x8222DE00;
		  /* 8222DE00h */ case   38:  		/* lwz R8, <#[R7 + 40]> */
		/* 8222DE00h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000028) );
		/* 8222DE00h case   38:*/		return 0x8222DE04;
		  /* 8222DE04h */ case   39:  		/* rlwinm R9, R11, 27, 18, 31 */
		/* 8222DE04h case   39:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R9,regs.R11);
		/* 8222DE04h case   39:*/		return 0x8222DE08;
		  /* 8222DE08h */ case   40:  		/* rlwinm R6, R11, 0, 27, 31 */
		/* 8222DE08h case   40:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R11);
		/* 8222DE08h case   40:*/		return 0x8222DE0C;
		  /* 8222DE0Ch */ case   41:  		/* addi R9, R9, 1 */
		/* 8222DE0Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8222DE0Ch case   41:*/		return 0x8222DE10;
		  /* 8222DE10h */ case   42:  		/* slw R6, R22, R6 */
		/* 8222DE10h case   42:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R22,regs.R6);
		/* 8222DE10h case   42:*/		return 0x8222DE14;
		  /* 8222DE14h */ case   43:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8222DE14h case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8222DE14h case   43:*/		return 0x8222DE18;
		  /* 8222DE18h */ case   44:  		/* lwzx R9, <#[R9 + R8]> */
		/* 8222DE18h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8222DE18h case   44:*/		return 0x8222DE1C;
		  /* 8222DE1Ch */ case   45:  		/* and. R9, R6, R9 */
		/* 8222DE1Ch case   45:*/		cpu::op::and<1>(regs,&regs.R9,regs.R6,regs.R9);
		/* 8222DE1Ch case   45:*/		return 0x8222DE20;
		  /* 8222DE20h */ case   46:  		/* bc 4, CR0_EQ, 20 */
		/* 8222DE20h case   46:*/		if ( !regs.CR[0].eq ) { return 0x8222DE34;  }
		/* 8222DE20h case   46:*/		return 0x8222DE24;
		  /* 8222DE24h */ case   47:  		/* lwz R27, <#[R27 + 52]> */
		/* 8222DE24h case   47:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000034) );
		/* 8222DE24h case   47:*/		return 0x8222DE28;
		  /* 8222DE28h */ case   48:  		/* lwz R11, <#[R27 + 48]> */
		/* 8222DE28h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 8222DE28h case   48:*/		return 0x8222DE2C;
		  /* 8222DE2Ch */ case   49:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 8222DE2Ch case   49:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DE2Ch case   49:*/		return 0x8222DE30;
		  /* 8222DE30h */ case   50:  		/* bc 12, CR0_EQ, -44 */
		/* 8222DE30h case   50:*/		if ( regs.CR[0].eq ) { return 0x8222DE04;  }
		/* 8222DE30h case   50:*/		return 0x8222DE34;
	}
	return 0x8222DE34;
} // Block from 8222DD68h-8222DE34h (51 instructions)

//////////////////////////////////////////////////////
// Block at 8222DE34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DE34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DE34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DE34);
		  /* 8222DE34h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8222DE34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8222DE34h case    0:*/		return 0x8222DE38;
		  /* 8222DE38h */ case    1:  		/* bc 12, CR6_EQ, 472 */
		/* 8222DE38h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222E010;  }
		/* 8222DE38h case    1:*/		return 0x8222DE3C;
		  /* 8222DE3Ch */ case    2:  		/* rlwinm R10, R11, 27, 18, 31 */
		/* 8222DE3Ch case    2:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R11);
		/* 8222DE3Ch case    2:*/		return 0x8222DE40;
		  /* 8222DE40h */ case    3:  		/* lwz R9, <#[R7 + 40]> */
		/* 8222DE40h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000028) );
		/* 8222DE40h case    3:*/		return 0x8222DE44;
		  /* 8222DE44h */ case    4:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8222DE44h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8222DE44h case    4:*/		return 0x8222DE48;
		  /* 8222DE48h */ case    5:  		/* addi R10, R10, 1 */
		/* 8222DE48h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222DE48h case    5:*/		return 0x8222DE4C;
		  /* 8222DE4Ch */ case    6:  		/* slw R11, R22, R11 */
		/* 8222DE4Ch case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 8222DE4Ch case    6:*/		return 0x8222DE50;
		  /* 8222DE50h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222DE50h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222DE50h case    7:*/		return 0x8222DE54;
		  /* 8222DE54h */ case    8:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8222DE54h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8222DE54h case    8:*/		return 0x8222DE58;
		  /* 8222DE58h */ case    9:  		/* and. R11, R10, R11 */
		/* 8222DE58h case    9:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8222DE58h case    9:*/		return 0x8222DE5C;
		  /* 8222DE5Ch */ case   10:  		/* bc 4, CR0_EQ, 436 */
		/* 8222DE5Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8222E010;  }
		/* 8222DE5Ch case   10:*/		return 0x8222DE60;
		  /* 8222DE60h */ case   11:  		/* lwz R28, <#[R7 + 8]> */
		/* 8222DE60h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R7 + 0x00000008) );
		/* 8222DE60h case   11:*/		return 0x8222DE64;
		  /* 8222DE64h */ case   12:  		/* cmplwi CR6, R28, 0 */
		/* 8222DE64h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222DE64h case   12:*/		return 0x8222DE68;
		  /* 8222DE68h */ case   13:  		/* bc 12, CR6_EQ, 1944 */
		/* 8222DE68h case   13:*/		if ( regs.CR[6].eq ) { return 0x8222E600;  }
		/* 8222DE68h case   13:*/		return 0x8222DE6C;
		  /* 8222DE6Ch */ case   14:  		/* lwz R29, <#[R28 + 4]> */
		/* 8222DE6Ch case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000004) );
		/* 8222DE6Ch case   14:*/		return 0x8222DE70;
		  /* 8222DE70h */ case   15:  		/* lwz R11, <#[R29 + 12]> */
		/* 8222DE70h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222DE70h case   15:*/		return 0x8222DE74;
		  /* 8222DE74h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8222DE74h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222DE74h case   16:*/		return 0x8222DE78;
		  /* 8222DE78h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 8222DE78h case   17:*/		if ( regs.CR[6].eq ) { return 0x8222DE98;  }
		/* 8222DE78h case   17:*/		return 0x8222DE7C;
		  /* 8222DE7Ch */ case   18:  		/* lwz R10, <#[R11]> */
		/* 8222DE7Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222DE7Ch case   18:*/		return 0x8222DE80;
		  /* 8222DE80h */ case   19:  		/* cmplw CR6, R27, R10 */
		/* 8222DE80h case   19:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 8222DE80h case   19:*/		return 0x8222DE84;
		  /* 8222DE84h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 8222DE84h case   20:*/		if ( regs.CR[6].eq ) { return 0x8222DE90;  }
		/* 8222DE84h case   20:*/		return 0x8222DE88;
		  /* 8222DE88h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222DE88h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222DE88h case   21:*/		return 0x8222DE8C;
		  /* 8222DE8Ch */ case   22:  		/* b -24 */
		/* 8222DE8Ch case   22:*/		return 0x8222DE74;
		/* 8222DE8Ch case   22:*/		return 0x8222DE90;
	}
	return 0x8222DE90;
} // Block from 8222DE34h-8222DE90h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8222DE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DE90);
		  /* 8222DE90h */ case    0:  		/* mr R11, R22 */
		/* 8222DE90h case    0:*/		regs.R11 = regs.R22;
		/* 8222DE90h case    0:*/		return 0x8222DE94;
		  /* 8222DE94h */ case    1:  		/* b 8 */
		/* 8222DE94h case    1:*/		return 0x8222DE9C;
		/* 8222DE94h case    1:*/		return 0x8222DE98;
	}
	return 0x8222DE98;
} // Block from 8222DE90h-8222DE98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222DE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DE98);
		  /* 8222DE98h */ case    0:  		/* li R11, 0 */
		/* 8222DE98h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222DE98h case    0:*/		return 0x8222DE9C;
	}
	return 0x8222DE9C;
} // Block from 8222DE98h-8222DE9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222DE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DE9C);
		  /* 8222DE9Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222DE9Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222DE9Ch case    0:*/		return 0x8222DEA0;
		  /* 8222DEA0h */ case    1:  		/* bc 12, CR0_EQ, 360 */
		/* 8222DEA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E008;  }
		/* 8222DEA0h case    1:*/		return 0x8222DEA4;
		  /* 8222DEA4h */ case    2:  		/* mr R4, R29 */
		/* 8222DEA4h case    2:*/		regs.R4 = regs.R29;
		/* 8222DEA4h case    2:*/		return 0x8222DEA8;
		  /* 8222DEA8h */ case    3:  		/* mr R3, R24 */
		/* 8222DEA8h case    3:*/		regs.R3 = regs.R24;
		/* 8222DEA8h case    3:*/		return 0x8222DEAC;
		  /* 8222DEACh */ case    4:  		/* bl -742972 */
		/* 8222DEACh case    4:*/		regs.LR = 0x8222DEB0; return 0x82178870;
		/* 8222DEACh case    4:*/		return 0x8222DEB0;
		  /* 8222DEB0h */ case    5:  		/* lwz R10, <#[R3 + 8]> */
		/* 8222DEB0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DEB0h case    5:*/		return 0x8222DEB4;
		  /* 8222DEB4h */ case    6:  		/* mr R31, R3 */
		/* 8222DEB4h case    6:*/		regs.R31 = regs.R3;
		/* 8222DEB4h case    6:*/		return 0x8222DEB8;
		  /* 8222DEB8h */ case    7:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8222DEB8h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8222DEB8h case    7:*/		return 0x8222DEBC;
		  /* 8222DEBCh */ case    8:  		/* cmplwi CR6, R11, 86 */
		/* 8222DEBCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8222DEBCh case    8:*/		return 0x8222DEC0;
		  /* 8222DEC0h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8222DEC0h case    9:*/		if ( regs.CR[6].eq ) { return 0x8222DED0;  }
		/* 8222DEC0h case    9:*/		return 0x8222DEC4;
		  /* 8222DEC4h */ case   10:  		/* cmplwi CR6, R11, 87 */
		/* 8222DEC4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8222DEC4h case   10:*/		return 0x8222DEC8;
		  /* 8222DEC8h */ case   11:  		/* li R11, 0 */
		/* 8222DEC8h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222DEC8h case   11:*/		return 0x8222DECC;
		  /* 8222DECCh */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 8222DECCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x8222DED4;  }
		/* 8222DECCh case   12:*/		return 0x8222DED0;
	}
	return 0x8222DED0;
} // Block from 8222DE9Ch-8222DED0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222DED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DED0);
		  /* 8222DED0h */ case    0:  		/* mr R11, R22 */
		/* 8222DED0h case    0:*/		regs.R11 = regs.R22;
		/* 8222DED0h case    0:*/		return 0x8222DED4;
	}
	return 0x8222DED4;
} // Block from 8222DED0h-8222DED4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222DED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DED4);
		  /* 8222DED4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222DED4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222DED4h case    0:*/		return 0x8222DED8;
		  /* 8222DED8h */ case    1:  		/* bc 12, CR0_EQ, 1956 */
		/* 8222DED8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E67C;  }
		/* 8222DED8h case    1:*/		return 0x8222DEDC;
		  /* 8222DEDCh */ case    2:  		/* rlwinm. R11, R10, 6, 31, 31 */
		/* 8222DEDCh case    2:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R10);
		/* 8222DEDCh case    2:*/		return 0x8222DEE0;
		  /* 8222DEE0h */ case    3:  		/* bc 4, CR0_EQ, 96 */
		/* 8222DEE0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222DF40;  }
		/* 8222DEE0h case    3:*/		return 0x8222DEE4;
		  /* 8222DEE4h */ case    4:  		/* oris R11, R10, 1024 */
		/* 8222DEE4h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x400);
		/* 8222DEE4h case    4:*/		return 0x8222DEE8;
		  /* 8222DEE8h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 8222DEE8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222DEE8h case    5:*/		return 0x8222DEEC;
		  /* 8222DEECh */ case    6:  		/* lwz R11, <#[R23]> */
		/* 8222DEECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222DEECh case    6:*/		return 0x8222DEF0;
		  /* 8222DEF0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222DEF0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222DEF0h case    7:*/		return 0x8222DEF4;
		  /* 8222DEF4h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8222DEF4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8222DF1C;  }
		/* 8222DEF4h case    8:*/		return 0x8222DEF8;
		  /* 8222DEF8h */ case    9:  		/* lwz R11, <#[R25]> */
		/* 8222DEF8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222DEF8h case    9:*/		return 0x8222DEFC;
		  /* 8222DEFCh */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DEFCh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DEFCh case   10:*/		return 0x8222DF00;
		  /* 8222DF00h */ case   11:  		/* addic. R3, R11, -4 */
		/* 8222DF00h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222DF00h case   11:*/		return 0x8222DF04;
		  /* 8222DF04h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 8222DF04h case   12:*/		if ( regs.CR[0].eq ) { return 0x8222DF1C;  }
		/* 8222DF04h case   12:*/		return 0x8222DF08;
		  /* 8222DF08h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222DF08h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DF08h case   13:*/		return 0x8222DF0C;
		  /* 8222DF0Ch */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222DF0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222DF0Ch case   14:*/		return 0x8222DF10;
		  /* 8222DF10h */ case   15:  		/* addi R11, R11, 1 */
		/* 8222DF10h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222DF10h case   15:*/		return 0x8222DF14;
		  /* 8222DF14h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8222DF14h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222DF14h case   16:*/		return 0x8222DF18;
		  /* 8222DF18h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 8222DF18h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8222DF28;  }
		/* 8222DF18h case   17:*/		return 0x8222DF1C;
	}
	return 0x8222DF1C;
} // Block from 8222DED4h-8222DF1Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222DF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DF1C);
		  /* 8222DF1Ch */ case    0:  		/* li R4, 1 */
		/* 8222DF1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222DF1Ch case    0:*/		return 0x8222DF20;
		  /* 8222DF20h */ case    1:  		/* mr R3, R25 */
		/* 8222DF20h case    1:*/		regs.R3 = regs.R25;
		/* 8222DF20h case    1:*/		return 0x8222DF24;
		  /* 8222DF24h */ case    2:  		/* bl -659036 */
		/* 8222DF24h case    2:*/		regs.LR = 0x8222DF28; return 0x8218D0C8;
		/* 8222DF24h case    2:*/		return 0x8222DF28;
	}
	return 0x8222DF28;
} // Block from 8222DF1Ch-8222DF28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222DF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DF28);
		  /* 8222DF28h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222DF28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DF28h case    0:*/		return 0x8222DF2C;
		  /* 8222DF2Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 8222DF2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222DF2Ch case    1:*/		return 0x8222DF30;
		  /* 8222DF30h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222DF30h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222DF30h case    2:*/		return 0x8222DF34;
		  /* 8222DF34h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222DF34h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222DF34h case    3:*/		return 0x8222DF38;
		  /* 8222DF38h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222DF38h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DF38h case    4:*/		return 0x8222DF3C;
		  /* 8222DF3Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222DF3Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222DF3Ch case    5:*/		return 0x8222DF40;
	}
	return 0x8222DF40;
} // Block from 8222DF28h-8222DF40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222DF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DF40);
		  /* 8222DF40h */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 8222DF40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8222DF40h case    0:*/		return 0x8222DF44;
		  /* 8222DF44h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222DF44h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DF44h case    1:*/		return 0x8222DF48;
		  /* 8222DF48h */ case    2:  		/* bc 4, CR0_EQ, 192 */
		/* 8222DF48h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E008;  }
		/* 8222DF48h case    2:*/		return 0x8222DF4C;
		  /* 8222DF4Ch */ case    3:  		/* mr R30, R11 */
		/* 8222DF4Ch case    3:*/		regs.R30 = regs.R11;
		/* 8222DF4Ch case    3:*/		return 0x8222DF50;
		  /* 8222DF50h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8222DF50h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222DF50h case    4:*/		return 0x8222DF54;
		  /* 8222DF54h */ case    5:  		/* bc 12, CR0_EQ, 180 */
		/* 8222DF54h case    5:*/		if ( regs.CR[0].eq ) { return 0x8222E008;  }
		/* 8222DF54h case    5:*/		return 0x8222DF58;
		  /* 8222DF58h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 8222DF58h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222DF58h case    6:*/		return 0x8222DF5C;
		  /* 8222DF5Ch */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222DF5Ch case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222DF5Ch case    7:*/		return 0x8222DF60;
		  /* 8222DF60h */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 8222DF60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8222DF60h case    8:*/		return 0x8222DF64;
		  /* 8222DF64h */ case    9:  		/* bc 4, CR6_EQ, 136 */
		/* 8222DF64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222DFEC;  }
		/* 8222DF64h case    9:*/		return 0x8222DF68;
		  /* 8222DF68h */ case   10:  		/* li R7, 1 */
		/* 8222DF68h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8222DF68h case   10:*/		return 0x8222DF6C;
		  /* 8222DF6Ch */ case   11:  		/* li R6, 0 */
		/* 8222DF6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8222DF6Ch case   11:*/		return 0x8222DF70;
		  /* 8222DF70h */ case   12:  		/* mr R5, R29 */
		/* 8222DF70h case   12:*/		regs.R5 = regs.R29;
		/* 8222DF70h case   12:*/		return 0x8222DF74;
		  /* 8222DF74h */ case   13:  		/* mr R4, R30 */
		/* 8222DF74h case   13:*/		regs.R4 = regs.R30;
		/* 8222DF74h case   13:*/		return 0x8222DF78;
		  /* 8222DF78h */ case   14:  		/* mr R3, R24 */
		/* 8222DF78h case   14:*/		regs.R3 = regs.R24;
		/* 8222DF78h case   14:*/		return 0x8222DF7C;
		  /* 8222DF7Ch */ case   15:  		/* bl -285308 */
		/* 8222DF7Ch case   15:*/		regs.LR = 0x8222DF80; return 0x821E8500;
		/* 8222DF7Ch case   15:*/		return 0x8222DF80;
		  /* 8222DF80h */ case   16:  		/* lwz R31, <#[R3 + 12]> */
		/* 8222DF80h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222DF80h case   16:*/		return 0x8222DF84;
		  /* 8222DF84h */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222DF84h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222DF84h case   17:*/		return 0x8222DF88;
		  /* 8222DF88h */ case   18:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222DF88h case   18:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DF88h case   18:*/		return 0x8222DF8C;
		  /* 8222DF8Ch */ case   19:  		/* bc 4, CR0_EQ, 96 */
		/* 8222DF8Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x8222DFEC;  }
		/* 8222DF8Ch case   19:*/		return 0x8222DF90;
		  /* 8222DF90h */ case   20:  		/* oris R11, R11, 1024 */
		/* 8222DF90h case   20:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222DF90h case   20:*/		return 0x8222DF94;
		  /* 8222DF94h */ case   21:  		/* stw R11, <#[R31 + 8]> */
		/* 8222DF94h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222DF94h case   21:*/		return 0x8222DF98;
		  /* 8222DF98h */ case   22:  		/* lwz R11, <#[R23]> */
		/* 8222DF98h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222DF98h case   22:*/		return 0x8222DF9C;
		  /* 8222DF9Ch */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222DF9Ch case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222DF9Ch case   23:*/		return 0x8222DFA0;
		  /* 8222DFA0h */ case   24:  		/* bc 4, CR0_EQ, 40 */
		/* 8222DFA0h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8222DFC8;  }
		/* 8222DFA0h case   24:*/		return 0x8222DFA4;
		  /* 8222DFA4h */ case   25:  		/* lwz R11, <#[R25]> */
		/* 8222DFA4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222DFA4h case   25:*/		return 0x8222DFA8;
		  /* 8222DFA8h */ case   26:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222DFA8h case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222DFA8h case   26:*/		return 0x8222DFAC;
		  /* 8222DFACh */ case   27:  		/* addic. R3, R11, -4 */
		/* 8222DFACh case   27:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222DFACh case   27:*/		return 0x8222DFB0;
		  /* 8222DFB0h */ case   28:  		/* bc 12, CR0_EQ, 24 */
		/* 8222DFB0h case   28:*/		if ( regs.CR[0].eq ) { return 0x8222DFC8;  }
		/* 8222DFB0h case   28:*/		return 0x8222DFB4;
		  /* 8222DFB4h */ case   29:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222DFB4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DFB4h case   29:*/		return 0x8222DFB8;
		  /* 8222DFB8h */ case   30:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222DFB8h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222DFB8h case   30:*/		return 0x8222DFBC;
		  /* 8222DFBCh */ case   31:  		/* addi R11, R11, 1 */
		/* 8222DFBCh case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222DFBCh case   31:*/		return 0x8222DFC0;
		  /* 8222DFC0h */ case   32:  		/* cmplw CR6, R11, R10 */
		/* 8222DFC0h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222DFC0h case   32:*/		return 0x8222DFC4;
		  /* 8222DFC4h */ case   33:  		/* bc 4, CR6_GT, 16 */
		/* 8222DFC4h case   33:*/		if ( !regs.CR[6].gt ) { return 0x8222DFD4;  }
		/* 8222DFC4h case   33:*/		return 0x8222DFC8;
	}
	return 0x8222DFC8;
} // Block from 8222DF40h-8222DFC8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8222DFC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DFC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DFC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DFC8);
		  /* 8222DFC8h */ case    0:  		/* li R4, 1 */
		/* 8222DFC8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222DFC8h case    0:*/		return 0x8222DFCC;
		  /* 8222DFCCh */ case    1:  		/* mr R3, R25 */
		/* 8222DFCCh case    1:*/		regs.R3 = regs.R25;
		/* 8222DFCCh case    1:*/		return 0x8222DFD0;
		  /* 8222DFD0h */ case    2:  		/* bl -659208 */
		/* 8222DFD0h case    2:*/		regs.LR = 0x8222DFD4; return 0x8218D0C8;
		/* 8222DFD0h case    2:*/		return 0x8222DFD4;
	}
	return 0x8222DFD4;
} // Block from 8222DFC8h-8222DFD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222DFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DFD4);
		  /* 8222DFD4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222DFD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DFD4h case    0:*/		return 0x8222DFD8;
		  /* 8222DFD8h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222DFD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222DFD8h case    1:*/		return 0x8222DFDC;
		  /* 8222DFDCh */ case    2:  		/* addi R9, R11, 1 */
		/* 8222DFDCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222DFDCh case    2:*/		return 0x8222DFE0;
		  /* 8222DFE0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222DFE0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222DFE0h case    3:*/		return 0x8222DFE4;
		  /* 8222DFE4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222DFE4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222DFE4h case    4:*/		return 0x8222DFE8;
		  /* 8222DFE8h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222DFE8h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222DFE8h case    5:*/		return 0x8222DFEC;
	}
	return 0x8222DFEC;
} // Block from 8222DFD4h-8222DFECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222DFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222DFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222DFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222DFEC);
		  /* 8222DFECh */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8222DFECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8222DFECh case    0:*/		return 0x8222DFF0;
		  /* 8222DFF0h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8222DFF0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8222DFF0h case    1:*/		return 0x8222DFF4;
		  /* 8222DFF4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222DFF4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222DFF4h case    2:*/		return 0x8222DFF8;
		  /* 8222DFF8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8222DFF8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222E008;  }
		/* 8222DFF8h case    3:*/		return 0x8222DFFC;
		  /* 8222DFFCh */ case    4:  		/* mr R30, R11 */
		/* 8222DFFCh case    4:*/		regs.R30 = regs.R11;
		/* 8222DFFCh case    4:*/		return 0x8222E000;
		  /* 8222E000h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8222E000h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E000h case    5:*/		return 0x8222E004;
		  /* 8222E004h */ case    6:  		/* bc 4, CR6_EQ, -172 */
		/* 8222E004h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222DF58;  }
		/* 8222E004h case    6:*/		return 0x8222E008;
	}
	return 0x8222E008;
} // Block from 8222DFECh-8222E008h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E008);
		  /* 8222E008h */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 8222E008h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 8222E008h case    0:*/		return 0x8222E00C;
		  /* 8222E00Ch */ case    1:  		/* b -424 */
		/* 8222E00Ch case    1:*/		return 0x8222DE64;
		/* 8222E00Ch case    1:*/		return 0x8222E010;
	}
	return 0x8222E010;
} // Block from 8222E008h-8222E010h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E010);
		  /* 8222E010h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 8222E010h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222E010h case    0:*/		return 0x8222E014;
		  /* 8222E014h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222E014h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E014h case    1:*/		return 0x8222E018;
		  /* 8222E018h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8222E018h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222E02C;  }
		/* 8222E018h case    2:*/		return 0x8222E01C;
		  /* 8222E01Ch */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222E01Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E01Ch case    3:*/		return 0x8222E020;
		  /* 8222E020h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8222E020h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E020h case    4:*/		return 0x8222E024;
		  /* 8222E024h */ case    5:  		/* mr R11, R22 */
		/* 8222E024h case    5:*/		regs.R11 = regs.R22;
		/* 8222E024h case    5:*/		return 0x8222E028;
		  /* 8222E028h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8222E028h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222E030;  }
		/* 8222E028h case    6:*/		return 0x8222E02C;
	}
	return 0x8222E02C;
} // Block from 8222E010h-8222E02Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E02C);
		  /* 8222E02Ch */ case    0:  		/* li R11, 0 */
		/* 8222E02Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E02Ch case    0:*/		return 0x8222E030;
	}
	return 0x8222E030;
} // Block from 8222E02Ch-8222E030h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E030);
		  /* 8222E030h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E030h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E030h case    0:*/		return 0x8222E034;
		  /* 8222E034h */ case    1:  		/* bc 12, CR0_EQ, 400 */
		/* 8222E034h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E1C4;  }
		/* 8222E034h case    1:*/		return 0x8222E038;
		  /* 8222E038h */ case    2:  		/* lwz R4, <#[R26 + 28]> */
		/* 8222E038h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000001C) );
		/* 8222E038h case    2:*/		return 0x8222E03C;
		  /* 8222E03Ch */ case    3:  		/* lwz R31, <#[R4 + 8]> */
		/* 8222E03Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000008) );
		/* 8222E03Ch case    3:*/		return 0x8222E040;
		  /* 8222E040h */ case    4:  		/* mr R11, R31 */
		/* 8222E040h case    4:*/		regs.R11 = regs.R31;
		/* 8222E040h case    4:*/		return 0x8222E044;
		  /* 8222E044h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8222E044h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E044h case    5:*/		return 0x8222E048;
		  /* 8222E048h */ case    6:  		/* bc 12, CR6_EQ, 548 */
		/* 8222E048h case    6:*/		if ( regs.CR[6].eq ) { return 0x8222E26C;  }
		/* 8222E048h case    6:*/		return 0x8222E04C;
		  /* 8222E04Ch */ case    7:  		/* lwz R10, <#[R4 + 48]> */
		/* 8222E04Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000030) );
		/* 8222E04Ch case    7:*/		return 0x8222E050;
		  /* 8222E050h */ case    8:  		/* lwz R9, <#[R11 + 4]> */
		/* 8222E050h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E050h case    8:*/		return 0x8222E054;
		  /* 8222E054h */ case    9:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 8222E054h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 8222E054h case    9:*/		return 0x8222E058;
		  /* 8222E058h */ case   10:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 8222E058h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 8222E058h case   10:*/		return 0x8222E05C;
		  /* 8222E05Ch */ case   11:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8222E05Ch case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8222E05Ch case   11:*/		return 0x8222E060;
		  /* 8222E060h */ case   12:  		/* addi R10, R10, 1 */
		/* 8222E060h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222E060h case   12:*/		return 0x8222E064;
		  /* 8222E064h */ case   13:  		/* lwz R9, <#[R9 + 40]> */
		/* 8222E064h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 8222E064h case   13:*/		return 0x8222E068;
		  /* 8222E068h */ case   14:  		/* slw R8, R22, R8 */
		/* 8222E068h case   14:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R8);
		/* 8222E068h case   14:*/		return 0x8222E06C;
		  /* 8222E06Ch */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222E06Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222E06Ch case   15:*/		return 0x8222E070;
		  /* 8222E070h */ case   16:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8222E070h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8222E070h case   16:*/		return 0x8222E074;
		  /* 8222E074h */ case   17:  		/* and. R10, R10, R8 */
		/* 8222E074h case   17:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8222E074h case   17:*/		return 0x8222E078;
		  /* 8222E078h */ case   18:  		/* bc 4, CR0_EQ, 12 */
		/* 8222E078h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8222E084;  }
		/* 8222E078h case   18:*/		return 0x8222E07C;
		  /* 8222E07Ch */ case   19:  		/* lwz R11, <#[R11 + 12]> */
		/* 8222E07Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222E07Ch case   19:*/		return 0x8222E080;
		  /* 8222E080h */ case   20:  		/* b -60 */
		/* 8222E080h case   20:*/		return 0x8222E044;
		/* 8222E080h case   20:*/		return 0x8222E084;
	}
	return 0x8222E084;
} // Block from 8222E030h-8222E084h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8222E084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E084);
		  /* 8222E084h */ case    0:  		/* lwz R11, <#[R24 + 40]> */
		/* 8222E084h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 8222E084h case    0:*/		return 0x8222E088;
		  /* 8222E088h */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 8222E088h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 8222E088h case    1:*/		return 0x8222E08C;
		  /* 8222E08Ch */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 8222E08Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E09C;  }
		/* 8222E08Ch case    2:*/		return 0x8222E090;
		  /* 8222E090h */ case    3:  		/* li R5, 16 */
		/* 8222E090h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 8222E090h case    3:*/		return 0x8222E094;
		  /* 8222E094h */ case    4:  		/* mr R3, R24 */
		/* 8222E094h case    4:*/		regs.R3 = regs.R24;
		/* 8222E094h case    4:*/		return 0x8222E098;
		  /* 8222E098h */ case    5:  		/* bl -388224 */
		/* 8222E098h case    5:*/		regs.LR = 0x8222E09C; return 0x821CF418;
		/* 8222E098h case    5:*/		return 0x8222E09C;
	}
	return 0x8222E09C;
} // Block from 8222E084h-8222E09Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E09C);
		  /* 8222E09Ch */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 8222E09Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8222E09Ch case    0:*/		return 0x8222E0A0;
		  /* 8222E0A0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E0A0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E0A0h case    1:*/		return 0x8222E0A4;
		  /* 8222E0A4h */ case    2:  		/* bc 4, CR0_EQ, 212 */
		/* 8222E0A4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E178;  }
		/* 8222E0A4h case    2:*/		return 0x8222E0A8;
		  /* 8222E0A8h */ case    3:  		/* mr R31, R11 */
		/* 8222E0A8h case    3:*/		regs.R31 = regs.R11;
		/* 8222E0A8h case    3:*/		return 0x8222E0AC;
		  /* 8222E0ACh */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8222E0ACh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222E0ACh case    4:*/		return 0x8222E0B0;
		  /* 8222E0B0h */ case    5:  		/* bc 12, CR0_EQ, 200 */
		/* 8222E0B0h case    5:*/		if ( regs.CR[0].eq ) { return 0x8222E178;  }
		/* 8222E0B0h case    5:*/		return 0x8222E0B4;
		  /* 8222E0B4h */ case    6:  		/* lwz R11, <#[R31 + 48]> */
		/* 8222E0B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8222E0B4h case    6:*/		return 0x8222E0B8;
		  /* 8222E0B8h */ case    7:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 8222E0B8h case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E0B8h case    7:*/		return 0x8222E0BC;
		  /* 8222E0BCh */ case    8:  		/* bc 12, CR0_EQ, 160 */
		/* 8222E0BCh case    8:*/		if ( regs.CR[0].eq ) { return 0x8222E15C;  }
		/* 8222E0BCh case    8:*/		return 0x8222E0C0;
		  /* 8222E0C0h */ case    9:  		/* lwz R11, <#[R31 + 12]> */
		/* 8222E0C0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222E0C0h case    9:*/		return 0x8222E0C4;
		  /* 8222E0C4h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8222E0C4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E0C4h case   10:*/		return 0x8222E0C8;
		  /* 8222E0C8h */ case   11:  		/* bc 12, CR6_EQ, 148 */
		/* 8222E0C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x8222E15C;  }
		/* 8222E0C8h case   11:*/		return 0x8222E0CC;
		  /* 8222E0CCh */ case   12:  		/* lwz R10, <#[R11]> */
		/* 8222E0CCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E0CCh case   12:*/		return 0x8222E0D0;
		  /* 8222E0D0h */ case   13:  		/* lwz R10, <#[R10 + 48]> */
		/* 8222E0D0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 8222E0D0h case   13:*/		return 0x8222E0D4;
		  /* 8222E0D4h */ case   14:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 8222E0D4h case   14:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 8222E0D4h case   14:*/		return 0x8222E0D8;
		  /* 8222E0D8h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 8222E0D8h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8222E0E4;  }
		/* 8222E0D8h case   15:*/		return 0x8222E0DC;
		  /* 8222E0DCh */ case   16:  		/* rlwinm. R10, R10, 13, 31, 31 */
		/* 8222E0DCh case   16:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R10);
		/* 8222E0DCh case   16:*/		return 0x8222E0E0;
		  /* 8222E0E0h */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 8222E0E0h case   17:*/		if ( regs.CR[0].eq ) { return 0x8222E0EC;  }
		/* 8222E0E0h case   17:*/		return 0x8222E0E4;
	}
	return 0x8222E0E4;
} // Block from 8222E09Ch-8222E0E4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222E0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E0E4);
		  /* 8222E0E4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222E0E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222E0E4h case    0:*/		return 0x8222E0E8;
		  /* 8222E0E8h */ case    1:  		/* b -36 */
		/* 8222E0E8h case    1:*/		return 0x8222E0C4;
		/* 8222E0E8h case    1:*/		return 0x8222E0EC;
	}
	return 0x8222E0EC;
} // Block from 8222E0E4h-8222E0ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E0EC);
		  /* 8222E0ECh */ case    0:  		/* mr R4, R31 */
		/* 8222E0ECh case    0:*/		regs.R4 = regs.R31;
		/* 8222E0ECh case    0:*/		return 0x8222E0F0;
		  /* 8222E0F0h */ case    1:  		/* mr R3, R24 */
		/* 8222E0F0h case    1:*/		regs.R3 = regs.R24;
		/* 8222E0F0h case    1:*/		return 0x8222E0F4;
		  /* 8222E0F4h */ case    2:  		/* bl -743556 */
		/* 8222E0F4h case    2:*/		regs.LR = 0x8222E0F8; return 0x82178870;
		/* 8222E0F4h case    2:*/		return 0x8222E0F8;
		  /* 8222E0F8h */ case    3:  		/* or. R4, R3, R3 */
		/* 8222E0F8h case    3:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8222E0F8h case    3:*/		return 0x8222E0FC;
		  /* 8222E0FCh */ case    4:  		/* bc 12, CR0_EQ, 96 */
		/* 8222E0FCh case    4:*/		if ( regs.CR[0].eq ) { return 0x8222E15C;  }
		/* 8222E0FCh case    4:*/		return 0x8222E100;
		  /* 8222E100h */ case    5:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222E100h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222E100h case    5:*/		return 0x8222E104;
		  /* 8222E104h */ case    6:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222E104h case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E104h case    6:*/		return 0x8222E108;
		  /* 8222E108h */ case    7:  		/* bc 4, CR0_EQ, 84 */
		/* 8222E108h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8222E15C;  }
		/* 8222E108h case    7:*/		return 0x8222E10C;
		  /* 8222E10Ch */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222E10Ch case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222E10Ch case    8:*/		return 0x8222E110;
		  /* 8222E110h */ case    9:  		/* cmplwi CR6, R11, 86 */
		/* 8222E110h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8222E110h case    9:*/		return 0x8222E114;
		  /* 8222E114h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 8222E114h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222E144;  }
		/* 8222E114h case   10:*/		return 0x8222E118;
		  /* 8222E118h */ case   11:  		/* cmplwi CR6, R11, 87 */
		/* 8222E118h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8222E118h case   11:*/		return 0x8222E11C;
		  /* 8222E11Ch */ case   12:  		/* bc 12, CR6_EQ, 40 */
		/* 8222E11Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8222E144;  }
		/* 8222E11Ch case   12:*/		return 0x8222E120;
		  /* 8222E120h */ case   13:  		/* cmplwi CR6, R11, 89 */
		/* 8222E120h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8222E120h case   13:*/		return 0x8222E124;
		  /* 8222E124h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 8222E124h case   14:*/		if ( regs.CR[6].eq ) { return 0x8222E144;  }
		/* 8222E124h case   14:*/		return 0x8222E128;
		  /* 8222E128h */ case   15:  		/* cmplwi CR6, R11, 90 */
		/* 8222E128h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8222E128h case   15:*/		return 0x8222E12C;
		  /* 8222E12Ch */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 8222E12Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x8222E144;  }
		/* 8222E12Ch case   16:*/		return 0x8222E130;
		  /* 8222E130h */ case   17:  		/* cmplwi CR6, R11, 84 */
		/* 8222E130h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8222E130h case   17:*/		return 0x8222E134;
		  /* 8222E134h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 8222E134h case   18:*/		if ( regs.CR[6].eq ) { return 0x8222E144;  }
		/* 8222E134h case   18:*/		return 0x8222E138;
		  /* 8222E138h */ case   19:  		/* cmplwi CR6, R11, 85 */
		/* 8222E138h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8222E138h case   19:*/		return 0x8222E13C;
		  /* 8222E13Ch */ case   20:  		/* li R11, 0 */
		/* 8222E13Ch case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E13Ch case   20:*/		return 0x8222E140;
		  /* 8222E140h */ case   21:  		/* bc 4, CR6_EQ, 8 */
		/* 8222E140h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8222E148;  }
		/* 8222E140h case   21:*/		return 0x8222E144;
	}
	return 0x8222E144;
} // Block from 8222E0ECh-8222E144h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8222E144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E144);
		  /* 8222E144h */ case    0:  		/* mr R11, R22 */
		/* 8222E144h case    0:*/		regs.R11 = regs.R22;
		/* 8222E144h case    0:*/		return 0x8222E148;
	}
	return 0x8222E148;
} // Block from 8222E144h-8222E148h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E148);
		  /* 8222E148h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E148h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E148h case    0:*/		return 0x8222E14C;
		  /* 8222E14Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222E14Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E15C;  }
		/* 8222E14Ch case    1:*/		return 0x8222E150;
		  /* 8222E150h */ case    2:  		/* mr R5, R25 */
		/* 8222E150h case    2:*/		regs.R5 = regs.R25;
		/* 8222E150h case    2:*/		return 0x8222E154;
		  /* 8222E154h */ case    3:  		/* mr R3, R24 */
		/* 8222E154h case    3:*/		regs.R3 = regs.R24;
		/* 8222E154h case    3:*/		return 0x8222E158;
		  /* 8222E158h */ case    4:  		/* bl 1816 */
		/* 8222E158h case    4:*/		regs.LR = 0x8222E15C; return 0x8222E870;
		/* 8222E158h case    4:*/		return 0x8222E15C;
	}
	return 0x8222E15C;
} // Block from 8222E148h-8222E15Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222E15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E15C);
		  /* 8222E15Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8222E15Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8222E15Ch case    0:*/		return 0x8222E160;
		  /* 8222E160h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222E160h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E160h case    1:*/		return 0x8222E164;
		  /* 8222E164h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E164h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E164h case    2:*/		return 0x8222E168;
		  /* 8222E168h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8222E168h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222E178;  }
		/* 8222E168h case    3:*/		return 0x8222E16C;
		  /* 8222E16Ch */ case    4:  		/* mr R31, R11 */
		/* 8222E16Ch case    4:*/		regs.R31 = regs.R11;
		/* 8222E16Ch case    4:*/		return 0x8222E170;
		  /* 8222E170h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8222E170h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E170h case    5:*/		return 0x8222E174;
		  /* 8222E174h */ case    6:  		/* bc 4, CR6_EQ, -192 */
		/* 8222E174h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8222E0B4;  }
		/* 8222E174h case    6:*/		return 0x8222E178;
	}
	return 0x8222E178;
} // Block from 8222E15Ch-8222E178h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E178);
		  /* 8222E178h */ case    0:  		/* lwz R11, <#[R24 + 40]> */
		/* 8222E178h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 8222E178h case    0:*/		return 0x8222E17C;
		  /* 8222E17Ch */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 8222E17Ch case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 8222E17Ch case    1:*/		return 0x8222E180;
		  /* 8222E180h */ case    2:  		/* bc 4, CR0_EQ, 68 */
		/* 8222E180h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E1C4;  }
		/* 8222E180h case    2:*/		return 0x8222E184;
		  /* 8222E184h */ case    3:  		/* lwz R11, <#[R24 + 4]> */
		/* 8222E184h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8222E184h case    3:*/		return 0x8222E188;
		  /* 8222E188h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E188h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E188h case    4:*/		return 0x8222E18C;
		  /* 8222E18Ch */ case    5:  		/* bc 4, CR0_EQ, 56 */
		/* 8222E18Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8222E1C4;  }
		/* 8222E18Ch case    5:*/		return 0x8222E190;
		  /* 8222E190h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8222E190h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222E190h case    6:*/		return 0x8222E194;
		  /* 8222E194h */ case    7:  		/* bc 12, CR0_EQ, 48 */
		/* 8222E194h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222E1C4;  }
		/* 8222E194h case    7:*/		return 0x8222E198;
		  /* 8222E198h */ case    8:  		/* lwz R10, <#[R11 + 48]> */
		/* 8222E198h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222E198h case    8:*/		return 0x8222E19C;
		  /* 8222E19Ch */ case    9:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 8222E19Ch case    9:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 8222E19Ch case    9:*/		return 0x8222E1A0;
		  /* 8222E1A0h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 8222E1A0h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222E1AC;  }
		/* 8222E1A0h case   10:*/		return 0x8222E1A4;
		  /* 8222E1A4h */ case   11:  		/* rlwinm R10, R10, 0, 2, 0 */
		/* 8222E1A4h case   11:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R10,regs.R10);
		/* 8222E1A4h case   11:*/		return 0x8222E1A8;
		  /* 8222E1A8h */ case   12:  		/* stw R10, <#[R11 + 48]> */
		/* 8222E1A8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8222E1A8h case   12:*/		return 0x8222E1AC;
	}
	return 0x8222E1AC;
} // Block from 8222E178h-8222E1ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222E1ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E1AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E1AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E1AC);
		  /* 8222E1ACh */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E1ACh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E1ACh case    0:*/		return 0x8222E1B0;
		  /* 8222E1B0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222E1B0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E1B0h case    1:*/		return 0x8222E1B4;
		  /* 8222E1B4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E1B4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E1B4h case    2:*/		return 0x8222E1B8;
		  /* 8222E1B8h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8222E1B8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222E1C4;  }
		/* 8222E1B8h case    3:*/		return 0x8222E1BC;
		  /* 8222E1BCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8222E1BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222E1BCh case    4:*/		return 0x8222E1C0;
		  /* 8222E1C0h */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 8222E1C0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8222E198;  }
		/* 8222E1C0h case    5:*/		return 0x8222E1C4;
	}
	return 0x8222E1C4;
} // Block from 8222E1ACh-8222E1C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E1C4);
		  /* 8222E1C4h */ case    0:  		/* lwz R28, <#[R26]> */
		/* 8222E1C4h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000000) );
		/* 8222E1C4h case    0:*/		return 0x8222E1C8;
		  /* 8222E1C8h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8222E1C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222E1C8h case    1:*/		return 0x8222E1CC;
		  /* 8222E1CCh */ case    2:  		/* bc 12, CR6_EQ, 708 */
		/* 8222E1CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8222E490;  }
		/* 8222E1CCh case    2:*/		return 0x8222E1D0;
		  /* 8222E1D0h */ case    3:  		/* lwz R10, <#[R28]> */
		/* 8222E1D0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8222E1D0h case    3:*/		return 0x8222E1D4;
		  /* 8222E1D4h */ case    4:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 8222E1D4h case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 8222E1D4h case    4:*/		return 0x8222E1D8;
		  /* 8222E1D8h */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 8222E1D8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8222E1E8;  }
		/* 8222E1D8h case    5:*/		return 0x8222E1DC;
		  /* 8222E1DCh */ case    6:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 8222E1DCh case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 8222E1DCh case    6:*/		return 0x8222E1E0;
		  /* 8222E1E0h */ case    7:  		/* li R11, 0 */
		/* 8222E1E0h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E1E0h case    7:*/		return 0x8222E1E4;
		  /* 8222E1E4h */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 8222E1E4h case    8:*/		if ( regs.CR[0].eq ) { return 0x8222E1EC;  }
		/* 8222E1E4h case    8:*/		return 0x8222E1E8;
	}
	return 0x8222E1E8;
} // Block from 8222E1C4h-8222E1E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222E1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E1E8);
		  /* 8222E1E8h */ case    0:  		/* mr R11, R22 */
		/* 8222E1E8h case    0:*/		regs.R11 = regs.R22;
		/* 8222E1E8h case    0:*/		return 0x8222E1EC;
	}
	return 0x8222E1EC;
} // Block from 8222E1E8h-8222E1ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E1EC);
		  /* 8222E1ECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E1ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E1ECh case    0:*/		return 0x8222E1F0;
		  /* 8222E1F0h */ case    1:  		/* bc 12, CR0_EQ, 664 */
		/* 8222E1F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E488;  }
		/* 8222E1F0h case    1:*/		return 0x8222E1F4;
		  /* 8222E1F4h */ case    2:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 8222E1F4h case    2:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 8222E1F4h case    2:*/		return 0x8222E1F8;
		  /* 8222E1F8h */ case    3:  		/* bc 12, CR0_EQ, 548 */
		/* 8222E1F8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222E41C;  }
		/* 8222E1F8h case    3:*/		return 0x8222E1FC;
		  /* 8222E1FCh */ case    4:  		/* rlwinm. R11, R10, 0, 27, 27 */
		/* 8222E1FCh case    4:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R10);
		/* 8222E1FCh case    4:*/		return 0x8222E200;
		  /* 8222E200h */ case    5:  		/* bc 12, CR0_EQ, 540 */
		/* 8222E200h case    5:*/		if ( regs.CR[0].eq ) { return 0x8222E41C;  }
		/* 8222E200h case    5:*/		return 0x8222E204;
		  /* 8222E204h */ case    6:  		/* lwz R29, <#[R26 + 28]> */
		/* 8222E204h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x0000001C) );
		/* 8222E204h case    6:*/		return 0x8222E208;
	}
	return 0x8222E208;
} // Block from 8222E1ECh-8222E208h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E208h
// Function '?FindPHIDef_Isolated@Compiler@D3DXShader@@QAA_NPAVInstruction@2@PAPAV32@PAW4Component@2@PAI00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E208);
		  /* 8222E208h */ case    0:  		/* lwz R29, <#[R29 + 52]> */
		/* 8222E208h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000034) );
		/* 8222E208h case    0:*/		return 0x8222E20C;
		  /* 8222E20Ch */ case    1:  		/* mr R3, R24 */
		/* 8222E20Ch case    1:*/		regs.R3 = regs.R24;
		/* 8222E20Ch case    1:*/		return 0x8222E210;
		  /* 8222E210h */ case    2:  		/* mr R4, R29 */
		/* 8222E210h case    2:*/		regs.R4 = regs.R29;
		/* 8222E210h case    2:*/		return 0x8222E214;
		  /* 8222E214h */ case    3:  		/* bl -743844 */
		/* 8222E214h case    3:*/		regs.LR = 0x8222E218; return 0x82178870;
		/* 8222E214h case    3:*/		return 0x8222E218;
		  /* 8222E218h */ case    4:  		/* or. R30, R3, R3 */
		/* 8222E218h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8222E218h case    4:*/		return 0x8222E21C;
		  /* 8222E21Ch */ case    5:  		/* bc 12, CR0_EQ, -20 */
		/* 8222E21Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8222E208;  }
		/* 8222E21Ch case    5:*/		return 0x8222E220;
		  /* 8222E220h */ case    6:  		/* lwz R31, <#[R30 + 8]> */
		/* 8222E220h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 8222E220h case    6:*/		return 0x8222E224;
		  /* 8222E224h */ case    7:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 8222E224h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 8222E224h case    7:*/		return 0x8222E228;
		  /* 8222E228h */ case    8:  		/* cmplwi CR6, R11, 10752 */
		/* 8222E228h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A00);
		/* 8222E228h case    8:*/		return 0x8222E22C;
		  /* 8222E22Ch */ case    9:  		/* bc 4, CR6_EQ, -36 */
		/* 8222E22Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222E208;  }
		/* 8222E22Ch case    9:*/		return 0x8222E230;
		  /* 8222E230h */ case   10:  		/* rlwinm. R11, R31, 6, 31, 31 */
		/* 8222E230h case   10:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R31);
		/* 8222E230h case   10:*/		return 0x8222E234;
		  /* 8222E234h */ case   11:  		/* bc 4, CR0_EQ, 488 */
		/* 8222E234h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8222E41C;  }
		/* 8222E234h case   11:*/		return 0x8222E238;
		  /* 8222E238h */ case   12:  		/* rlwinm R6, R31, 18, 29, 31 */
		/* 8222E238h case   12:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R31);
		/* 8222E238h case   12:*/		return 0x8222E23C;
		  /* 8222E23Ch */ case   13:  		/* rlwinm R5, R31, 13, 29, 31 */
		/* 8222E23Ch case   13:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R31);
		/* 8222E23Ch case   13:*/		return 0x8222E240;
		  /* 8222E240h */ case   14:  		/* li R4, 84 */
		/* 8222E240h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 8222E240h case   14:*/		return 0x8222E244;
		  /* 8222E244h */ case   15:  		/* mr R3, R24 */
		/* 8222E244h case   15:*/		regs.R3 = regs.R24;
		/* 8222E244h case   15:*/		return 0x8222E248;
		  /* 8222E248h */ case   16:  		/* bl -826904 */
		/* 8222E248h case   16:*/		regs.LR = 0x8222E24C; return 0x82164430;
		/* 8222E248h case   16:*/		return 0x8222E24C;
		  /* 8222E24Ch */ case   17:  		/* addi R11, R30, -16 */
		/* 8222E24Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 8222E24Ch case   17:*/		return 0x8222E250;
		  /* 8222E250h */ case   18:  		/* lwzx R11, <#[R3 + R11]> */
		/* 8222E250h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8222E250h case   18:*/		return 0x8222E254;
		  /* 8222E254h */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E254h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E254h case   19:*/		return 0x8222E258;
		  /* 8222E258h */ case   20:  		/* lwz R11, <#[R11]> */
		/* 8222E258h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E258h case   20:*/		return 0x8222E25C;
		  /* 8222E25Ch */ case   21:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E25Ch case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E25Ch case   21:*/		return 0x8222E260;
		  /* 8222E260h */ case   22:  		/* bc 12, CR0_EQ, 236 */
		/* 8222E260h case   22:*/		if ( regs.CR[0].eq ) { return 0x8222E34C;  }
		/* 8222E260h case   22:*/		return 0x8222E264;
		  /* 8222E264h */ case   23:  		/* li R4, 0 */
		/* 8222E264h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222E264h case   23:*/		return 0x8222E268;
		  /* 8222E268h */ case   24:  		/* b 236 */
		/* 8222E268h case   24:*/		return 0x8222E354;
		/* 8222E268h case   24:*/		return 0x8222E26C;
	}
	return 0x8222E26C;
} // Block from 8222E208h-8222E26Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8222E26Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E26C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E26C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E26C);
		  /* 8222E26Ch */ case    0:  		/* lwz R11, <#[R4 + 48]> */
		/* 8222E26Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 8222E26Ch case    0:*/		return 0x8222E270;
		  /* 8222E270h */ case    1:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 8222E270h case    1:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E270h case    1:*/		return 0x8222E274;
		  /* 8222E274h */ case    2:  		/* bc 12, CR0_EQ, 144 */
		/* 8222E274h case    2:*/		if ( regs.CR[0].eq ) { return 0x8222E304;  }
		/* 8222E274h case    2:*/		return 0x8222E278;
		  /* 8222E278h */ case    3:  		/* mr R30, R31 */
		/* 8222E278h case    3:*/		regs.R30 = regs.R31;
		/* 8222E278h case    3:*/		return 0x8222E27C;
		  /* 8222E27Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8222E27Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222E27Ch case    4:*/		return 0x8222E280;
		  /* 8222E280h */ case    5:  		/* bc 12, CR6_EQ, -188 */
		/* 8222E280h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222E1C4;  }
		/* 8222E280h case    5:*/		return 0x8222E284;
		  /* 8222E284h */ case    6:  		/* mr R3, R24 */
		/* 8222E284h case    6:*/		regs.R3 = regs.R24;
		/* 8222E284h case    6:*/		return 0x8222E288;
		  /* 8222E288h */ case    7:  		/* lwz R4, <#[R30 + 4]> */
		/* 8222E288h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 8222E288h case    7:*/		return 0x8222E28C;
		  /* 8222E28Ch */ case    8:  		/* bl -743964 */
		/* 8222E28Ch case    8:*/		regs.LR = 0x8222E290; return 0x82178870;
		/* 8222E28Ch case    8:*/		return 0x8222E290;
		  /* 8222E290h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E290h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E290h case    9:*/		return 0x8222E294;
		  /* 8222E294h */ case   10:  		/* mr R31, R3 */
		/* 8222E294h case   10:*/		regs.R31 = regs.R3;
		/* 8222E294h case   10:*/		return 0x8222E298;
		  /* 8222E298h */ case   11:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222E298h case   11:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E298h case   11:*/		return 0x8222E29C;
		  /* 8222E29Ch */ case   12:  		/* bc 4, CR0_EQ, 96 */
		/* 8222E29Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x8222E2FC;  }
		/* 8222E29Ch case   12:*/		return 0x8222E2A0;
		  /* 8222E2A0h */ case   13:  		/* oris R11, R11, 1024 */
		/* 8222E2A0h case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222E2A0h case   13:*/		return 0x8222E2A4;
		  /* 8222E2A4h */ case   14:  		/* stw R11, <#[R3 + 8]> */
		/* 8222E2A4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E2A4h case   14:*/		return 0x8222E2A8;
		  /* 8222E2A8h */ case   15:  		/* lwz R11, <#[R23]> */
		/* 8222E2A8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222E2A8h case   15:*/		return 0x8222E2AC;
		  /* 8222E2ACh */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E2ACh case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E2ACh case   16:*/		return 0x8222E2B0;
		  /* 8222E2B0h */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E2B0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8222E2D8;  }
		/* 8222E2B0h case   17:*/		return 0x8222E2B4;
		  /* 8222E2B4h */ case   18:  		/* lwz R11, <#[R25]> */
		/* 8222E2B4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E2B4h case   18:*/		return 0x8222E2B8;
		  /* 8222E2B8h */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E2B8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E2B8h case   19:*/		return 0x8222E2BC;
		  /* 8222E2BCh */ case   20:  		/* addic. R3, R11, -4 */
		/* 8222E2BCh case   20:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E2BCh case   20:*/		return 0x8222E2C0;
		  /* 8222E2C0h */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E2C0h case   21:*/		if ( regs.CR[0].eq ) { return 0x8222E2D8;  }
		/* 8222E2C0h case   21:*/		return 0x8222E2C4;
		  /* 8222E2C4h */ case   22:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E2C4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E2C4h case   22:*/		return 0x8222E2C8;
		  /* 8222E2C8h */ case   23:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E2C8h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E2C8h case   23:*/		return 0x8222E2CC;
		  /* 8222E2CCh */ case   24:  		/* addi R11, R11, 1 */
		/* 8222E2CCh case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E2CCh case   24:*/		return 0x8222E2D0;
		  /* 8222E2D0h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 8222E2D0h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E2D0h case   25:*/		return 0x8222E2D4;
		  /* 8222E2D4h */ case   26:  		/* bc 4, CR6_GT, 16 */
		/* 8222E2D4h case   26:*/		if ( !regs.CR[6].gt ) { return 0x8222E2E4;  }
		/* 8222E2D4h case   26:*/		return 0x8222E2D8;
	}
	return 0x8222E2D8;
} // Block from 8222E26Ch-8222E2D8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222E2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E2D8);
		  /* 8222E2D8h */ case    0:  		/* li R4, 1 */
		/* 8222E2D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E2D8h case    0:*/		return 0x8222E2DC;
		  /* 8222E2DCh */ case    1:  		/* mr R3, R25 */
		/* 8222E2DCh case    1:*/		regs.R3 = regs.R25;
		/* 8222E2DCh case    1:*/		return 0x8222E2E0;
		  /* 8222E2E0h */ case    2:  		/* bl -659992 */
		/* 8222E2E0h case    2:*/		regs.LR = 0x8222E2E4; return 0x8218D0C8;
		/* 8222E2E0h case    2:*/		return 0x8222E2E4;
	}
	return 0x8222E2E4;
} // Block from 8222E2D8h-8222E2E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E2E4);
		  /* 8222E2E4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E2E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E2E4h case    0:*/		return 0x8222E2E8;
		  /* 8222E2E8h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E2E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E2E8h case    1:*/		return 0x8222E2EC;
		  /* 8222E2ECh */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E2ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E2ECh case    2:*/		return 0x8222E2F0;
		  /* 8222E2F0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E2F0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E2F0h case    3:*/		return 0x8222E2F4;
		  /* 8222E2F4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E2F4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E2F4h case    4:*/		return 0x8222E2F8;
		  /* 8222E2F8h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222E2F8h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E2F8h case    5:*/		return 0x8222E2FC;
	}
	return 0x8222E2FC;
} // Block from 8222E2E4h-8222E2FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E2FC);
		  /* 8222E2FCh */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 8222E2FCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222E2FCh case    0:*/		return 0x8222E300;
		  /* 8222E300h */ case    1:  		/* b -132 */
		/* 8222E300h case    1:*/		return 0x8222E27C;
		/* 8222E300h case    1:*/		return 0x8222E304;
	}
	return 0x8222E304;
} // Block from 8222E2FCh-8222E304h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E304);
		  /* 8222E304h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8222E304h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222E304h case    0:*/		return 0x8222E308;
		  /* 8222E308h */ case    1:  		/* bc 12, CR6_EQ, -324 */
		/* 8222E308h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222E1C4;  }
		/* 8222E308h case    1:*/		return 0x8222E30C;
		  /* 8222E30Ch */ case    2:  		/* li R7, 1 */
		/* 8222E30Ch case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8222E30Ch case    2:*/		return 0x8222E310;
		  /* 8222E310h */ case    3:  		/* lwz R5, <#[R31 + 4]> */
		/* 8222E310h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 8222E310h case    3:*/		return 0x8222E314;
		  /* 8222E314h */ case    4:  		/* li R6, 0 */
		/* 8222E314h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8222E314h case    4:*/		return 0x8222E318;
		  /* 8222E318h */ case    5:  		/* mr R4, R26 */
		/* 8222E318h case    5:*/		regs.R4 = regs.R26;
		/* 8222E318h case    5:*/		return 0x8222E31C;
		  /* 8222E31Ch */ case    6:  		/* mr R3, R24 */
		/* 8222E31Ch case    6:*/		regs.R3 = regs.R24;
		/* 8222E31Ch case    6:*/		return 0x8222E320;
		  /* 8222E320h */ case    7:  		/* bl -286240 */
		/* 8222E320h case    7:*/		regs.LR = 0x8222E324; return 0x821E8500;
		/* 8222E320h case    7:*/		return 0x8222E324;
		  /* 8222E324h */ case    8:  		/* or. R11, R3, R3 */
		/* 8222E324h case    8:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 8222E324h case    8:*/		return 0x8222E328;
		  /* 8222E328h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 8222E328h case    9:*/		if ( regs.CR[0].eq ) { return 0x8222E344;  }
		/* 8222E328h case    9:*/		return 0x8222E32C;
		  /* 8222E32Ch */ case   10:  		/* lwz R10, <#[R26 + 28]> */
		/* 8222E32Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000001C) );
		/* 8222E32Ch case   10:*/		return 0x8222E330;
		  /* 8222E330h */ case   11:  		/* mr R6, R25 */
		/* 8222E330h case   11:*/		regs.R6 = regs.R25;
		/* 8222E330h case   11:*/		return 0x8222E334;
		  /* 8222E334h */ case   12:  		/* mr R3, R24 */
		/* 8222E334h case   12:*/		regs.R3 = regs.R24;
		/* 8222E334h case   12:*/		return 0x8222E338;
		  /* 8222E338h */ case   13:  		/* lwz R4, <#[R11 + 12]> */
		/* 8222E338h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222E338h case   13:*/		return 0x8222E33C;
		  /* 8222E33Ch */ case   14:  		/* lwz R5, <#[R10 + 52]> */
		/* 8222E33Ch case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000034) );
		/* 8222E33Ch case   14:*/		return 0x8222E340;
		  /* 8222E340h */ case   15:  		/* bl -7688 */
		/* 8222E340h case   15:*/		regs.LR = 0x8222E344; return 0x8222C538;
		/* 8222E340h case   15:*/		return 0x8222E344;
	}
	return 0x8222E344;
} // Block from 8222E304h-8222E344h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8222E344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E344);
		  /* 8222E344h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 8222E344h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222E344h case    0:*/		return 0x8222E348;
		  /* 8222E348h */ case    1:  		/* b -68 */
		/* 8222E348h case    1:*/		return 0x8222E304;
		/* 8222E348h case    1:*/		return 0x8222E34C;
	}
	return 0x8222E34C;
} // Block from 8222E344h-8222E34Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E34C);
		  /* 8222E34Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E34Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E34Ch case    0:*/		return 0x8222E350;
		  /* 8222E350h */ case    1:  		/* addi R4, R11, -4 */
		/* 8222E350h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222E350h case    1:*/		return 0x8222E354;
	}
	return 0x8222E354;
} // Block from 8222E34Ch-8222E354h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E354);
		  /* 8222E354h */ case    0:  		/* mr R3, R24 */
		/* 8222E354h case    0:*/		regs.R3 = regs.R24;
		/* 8222E354h case    0:*/		return 0x8222E358;
		  /* 8222E358h */ case    1:  		/* bl -744168 */
		/* 8222E358h case    1:*/		regs.LR = 0x8222E35C; return 0x82178870;
		/* 8222E358h case    1:*/		return 0x8222E35C;
		  /* 8222E35Ch */ case    2:  		/* oris R11, R31, 1024 */
		/* 8222E35Ch case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R31,0x400);
		/* 8222E35Ch case    2:*/		return 0x8222E360;
		  /* 8222E360h */ case    3:  		/* mr R31, R3 */
		/* 8222E360h case    3:*/		regs.R31 = regs.R3;
		/* 8222E360h case    3:*/		return 0x8222E364;
		  /* 8222E364h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 8222E364h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8222E364h case    4:*/		return 0x8222E368;
		  /* 8222E368h */ case    5:  		/* lwz R11, <#[R23]> */
		/* 8222E368h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222E368h case    5:*/		return 0x8222E36C;
		  /* 8222E36Ch */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E36Ch case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E36Ch case    6:*/		return 0x8222E370;
		  /* 8222E370h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E370h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8222E398;  }
		/* 8222E370h case    7:*/		return 0x8222E374;
		  /* 8222E374h */ case    8:  		/* lwz R11, <#[R25]> */
		/* 8222E374h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E374h case    8:*/		return 0x8222E378;
		  /* 8222E378h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E378h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E378h case    9:*/		return 0x8222E37C;
		  /* 8222E37Ch */ case   10:  		/* addic. R3, R11, -4 */
		/* 8222E37Ch case   10:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E37Ch case   10:*/		return 0x8222E380;
		  /* 8222E380h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E380h case   11:*/		if ( regs.CR[0].eq ) { return 0x8222E398;  }
		/* 8222E380h case   11:*/		return 0x8222E384;
		  /* 8222E384h */ case   12:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E384h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E384h case   12:*/		return 0x8222E388;
		  /* 8222E388h */ case   13:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E388h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E388h case   13:*/		return 0x8222E38C;
		  /* 8222E38Ch */ case   14:  		/* addi R11, R11, 1 */
		/* 8222E38Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E38Ch case   14:*/		return 0x8222E390;
		  /* 8222E390h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8222E390h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E390h case   15:*/		return 0x8222E394;
		  /* 8222E394h */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 8222E394h case   16:*/		if ( !regs.CR[6].gt ) { return 0x8222E3A4;  }
		/* 8222E394h case   16:*/		return 0x8222E398;
	}
	return 0x8222E398;
} // Block from 8222E354h-8222E398h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222E398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E398);
		  /* 8222E398h */ case    0:  		/* li R4, 1 */
		/* 8222E398h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E398h case    0:*/		return 0x8222E39C;
		  /* 8222E39Ch */ case    1:  		/* mr R3, R25 */
		/* 8222E39Ch case    1:*/		regs.R3 = regs.R25;
		/* 8222E39Ch case    1:*/		return 0x8222E3A0;
		  /* 8222E3A0h */ case    2:  		/* bl -660184 */
		/* 8222E3A0h case    2:*/		regs.LR = 0x8222E3A4; return 0x8218D0C8;
		/* 8222E3A0h case    2:*/		return 0x8222E3A4;
	}
	return 0x8222E3A4;
} // Block from 8222E398h-8222E3A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E3A4);
		  /* 8222E3A4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E3A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E3A4h case    0:*/		return 0x8222E3A8;
		  /* 8222E3A8h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E3A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E3A8h case    1:*/		return 0x8222E3AC;
		  /* 8222E3ACh */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E3ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E3ACh case    2:*/		return 0x8222E3B0;
		  /* 8222E3B0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E3B0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E3B0h case    3:*/		return 0x8222E3B4;
		  /* 8222E3B4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E3B4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E3B4h case    4:*/		return 0x8222E3B8;
		  /* 8222E3B8h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 8222E3B8h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E3B8h case    5:*/		return 0x8222E3BC;
		  /* 8222E3BCh */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222E3BCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E3BCh case    6:*/		return 0x8222E3C0;
		  /* 8222E3C0h */ case    7:  		/* oris R11, R11, 1024 */
		/* 8222E3C0h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222E3C0h case    7:*/		return 0x8222E3C4;
		  /* 8222E3C4h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 8222E3C4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E3C4h case    8:*/		return 0x8222E3C8;
		  /* 8222E3C8h */ case    9:  		/* lwz R11, <#[R23]> */
		/* 8222E3C8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222E3C8h case    9:*/		return 0x8222E3CC;
		  /* 8222E3CCh */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E3CCh case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E3CCh case   10:*/		return 0x8222E3D0;
		  /* 8222E3D0h */ case   11:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E3D0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8222E3F8;  }
		/* 8222E3D0h case   11:*/		return 0x8222E3D4;
		  /* 8222E3D4h */ case   12:  		/* lwz R11, <#[R25]> */
		/* 8222E3D4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E3D4h case   12:*/		return 0x8222E3D8;
		  /* 8222E3D8h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E3D8h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E3D8h case   13:*/		return 0x8222E3DC;
		  /* 8222E3DCh */ case   14:  		/* addic. R3, R11, -4 */
		/* 8222E3DCh case   14:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E3DCh case   14:*/		return 0x8222E3E0;
		  /* 8222E3E0h */ case   15:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E3E0h case   15:*/		if ( regs.CR[0].eq ) { return 0x8222E3F8;  }
		/* 8222E3E0h case   15:*/		return 0x8222E3E4;
		  /* 8222E3E4h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E3E4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E3E4h case   16:*/		return 0x8222E3E8;
		  /* 8222E3E8h */ case   17:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E3E8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E3E8h case   17:*/		return 0x8222E3EC;
		  /* 8222E3ECh */ case   18:  		/* addi R11, R11, 1 */
		/* 8222E3ECh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E3ECh case   18:*/		return 0x8222E3F0;
		  /* 8222E3F0h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8222E3F0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E3F0h case   19:*/		return 0x8222E3F4;
		  /* 8222E3F4h */ case   20:  		/* bc 4, CR6_GT, 16 */
		/* 8222E3F4h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8222E404;  }
		/* 8222E3F4h case   20:*/		return 0x8222E3F8;
	}
	return 0x8222E3F8;
} // Block from 8222E3A4h-8222E3F8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8222E3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E3F8);
		  /* 8222E3F8h */ case    0:  		/* li R4, 1 */
		/* 8222E3F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E3F8h case    0:*/		return 0x8222E3FC;
		  /* 8222E3FCh */ case    1:  		/* mr R3, R25 */
		/* 8222E3FCh case    1:*/		regs.R3 = regs.R25;
		/* 8222E3FCh case    1:*/		return 0x8222E400;
		  /* 8222E400h */ case    2:  		/* bl -660280 */
		/* 8222E400h case    2:*/		regs.LR = 0x8222E404; return 0x8218D0C8;
		/* 8222E400h case    2:*/		return 0x8222E404;
	}
	return 0x8222E404;
} // Block from 8222E3F8h-8222E404h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E404);
		  /* 8222E404h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E404h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E404h case    0:*/		return 0x8222E408;
		  /* 8222E408h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E408h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E408h case    1:*/		return 0x8222E40C;
		  /* 8222E40Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E40Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E40Ch case    2:*/		return 0x8222E410;
		  /* 8222E410h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E410h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E410h case    3:*/		return 0x8222E414;
		  /* 8222E414h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E414h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E414h case    4:*/		return 0x8222E418;
		  /* 8222E418h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222E418h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E418h case    5:*/		return 0x8222E41C;
	}
	return 0x8222E41C;
} // Block from 8222E404h-8222E41Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E41C);
		  /* 8222E41Ch */ case    0:  		/* lwz R31, <#[R28 + 12]> */
		/* 8222E41Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000000C) );
		/* 8222E41Ch case    0:*/		return 0x8222E420;
		  /* 8222E420h */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222E420h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E420h case    1:*/		return 0x8222E424;
		  /* 8222E424h */ case    2:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222E424h case    2:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E424h case    2:*/		return 0x8222E428;
		  /* 8222E428h */ case    3:  		/* bc 4, CR0_EQ, 96 */
		/* 8222E428h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222E488;  }
		/* 8222E428h case    3:*/		return 0x8222E42C;
		  /* 8222E42Ch */ case    4:  		/* oris R11, R11, 1024 */
		/* 8222E42Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222E42Ch case    4:*/		return 0x8222E430;
		  /* 8222E430h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 8222E430h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E430h case    5:*/		return 0x8222E434;
		  /* 8222E434h */ case    6:  		/* lwz R11, <#[R23]> */
		/* 8222E434h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222E434h case    6:*/		return 0x8222E438;
		  /* 8222E438h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E438h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E438h case    7:*/		return 0x8222E43C;
		  /* 8222E43Ch */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E43Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x8222E464;  }
		/* 8222E43Ch case    8:*/		return 0x8222E440;
		  /* 8222E440h */ case    9:  		/* lwz R11, <#[R25]> */
		/* 8222E440h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E440h case    9:*/		return 0x8222E444;
		  /* 8222E444h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E444h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E444h case   10:*/		return 0x8222E448;
		  /* 8222E448h */ case   11:  		/* addic. R3, R11, -4 */
		/* 8222E448h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E448h case   11:*/		return 0x8222E44C;
		  /* 8222E44Ch */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E44Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x8222E464;  }
		/* 8222E44Ch case   12:*/		return 0x8222E450;
		  /* 8222E450h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E450h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E450h case   13:*/		return 0x8222E454;
		  /* 8222E454h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E454h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E454h case   14:*/		return 0x8222E458;
		  /* 8222E458h */ case   15:  		/* addi R11, R11, 1 */
		/* 8222E458h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E458h case   15:*/		return 0x8222E45C;
		  /* 8222E45Ch */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8222E45Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E45Ch case   16:*/		return 0x8222E460;
		  /* 8222E460h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 8222E460h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8222E470;  }
		/* 8222E460h case   17:*/		return 0x8222E464;
	}
	return 0x8222E464;
} // Block from 8222E41Ch-8222E464h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222E464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E464);
		  /* 8222E464h */ case    0:  		/* li R4, 1 */
		/* 8222E464h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E464h case    0:*/		return 0x8222E468;
		  /* 8222E468h */ case    1:  		/* mr R3, R25 */
		/* 8222E468h case    1:*/		regs.R3 = regs.R25;
		/* 8222E468h case    1:*/		return 0x8222E46C;
		  /* 8222E46Ch */ case    2:  		/* bl -660388 */
		/* 8222E46Ch case    2:*/		regs.LR = 0x8222E470; return 0x8218D0C8;
		/* 8222E46Ch case    2:*/		return 0x8222E470;
	}
	return 0x8222E470;
} // Block from 8222E464h-8222E470h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E470);
		  /* 8222E470h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E470h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E470h case    0:*/		return 0x8222E474;
		  /* 8222E474h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E474h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E474h case    1:*/		return 0x8222E478;
		  /* 8222E478h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E478h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E478h case    2:*/		return 0x8222E47C;
		  /* 8222E47Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E47Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E47Ch case    3:*/		return 0x8222E480;
		  /* 8222E480h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E480h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E480h case    4:*/		return 0x8222E484;
		  /* 8222E484h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222E484h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E484h case    5:*/		return 0x8222E488;
	}
	return 0x8222E488;
} // Block from 8222E470h-8222E488h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E488h
// Function '?CanReorderAdjacent@Compiler@D3DXShader@@QAA_NPAVInstruction@2@0_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E488);
		  /* 8222E488h */ case    0:  		/* lwz R28, <#[R28 + 4]> */
		/* 8222E488h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000004) );
		/* 8222E488h case    0:*/		return 0x8222E48C;
		  /* 8222E48Ch */ case    1:  		/* b -708 */
		/* 8222E48Ch case    1:*/		return 0x8222E1C8;
		/* 8222E48Ch case    1:*/		return 0x8222E490;
	}
	return 0x8222E490;
} // Block from 8222E488h-8222E490h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E490);
		  /* 8222E490h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8222E490h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8222E490h case    0:*/		return 0x8222E494;
		  /* 8222E494h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222E494h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222E494h case    1:*/		return 0x8222E498;
		  /* 8222E498h */ case    2:  		/* cmplwi CR6, R11, 21 */
		/* 8222E498h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 8222E498h case    2:*/		return 0x8222E49C;
		  /* 8222E49Ch */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 8222E49Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8222E4AC;  }
		/* 8222E49Ch case    3:*/		return 0x8222E4A0;
		  /* 8222E4A0h */ case    4:  		/* cmplwi CR6, R11, 24 */
		/* 8222E4A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8222E4A0h case    4:*/		return 0x8222E4A4;
		  /* 8222E4A4h */ case    5:  		/* mr R11, R22 */
		/* 8222E4A4h case    5:*/		regs.R11 = regs.R22;
		/* 8222E4A4h case    5:*/		return 0x8222E4A8;
		  /* 8222E4A8h */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 8222E4A8h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8222E4B0;  }
		/* 8222E4A8h case    6:*/		return 0x8222E4AC;
	}
	return 0x8222E4AC;
} // Block from 8222E490h-8222E4ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E4AC);
		  /* 8222E4ACh */ case    0:  		/* li R11, 0 */
		/* 8222E4ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E4ACh case    0:*/		return 0x8222E4B0;
	}
	return 0x8222E4B0;
} // Block from 8222E4ACh-8222E4B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E4B0);
		  /* 8222E4B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E4B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E4B0h case    0:*/		return 0x8222E4B4;
		  /* 8222E4B4h */ case    1:  		/* bc 12, CR0_EQ, 332 */
		/* 8222E4B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E600;  }
		/* 8222E4B4h case    1:*/		return 0x8222E4B8;
		  /* 8222E4B8h */ case    2:  		/* lwz R30, <#[R26 + 4]> */
		/* 8222E4B8h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000004) );
		/* 8222E4B8h case    2:*/		return 0x8222E4BC;
		  /* 8222E4BCh */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8222E4BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222E4BCh case    3:*/		return 0x8222E4C0;
		  /* 8222E4C0h */ case    4:  		/* bc 12, CR6_EQ, 320 */
		/* 8222E4C0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222E600;  }
		/* 8222E4C0h case    4:*/		return 0x8222E4C4;
		  /* 8222E4C4h */ case    5:  		/* lwz R31, <#[R30 + 16]> */
		/* 8222E4C4h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 8222E4C4h case    5:*/		return 0x8222E4C8;
		  /* 8222E4C8h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 8222E4C8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222E4C8h case    6:*/		return 0x8222E4CC;
		  /* 8222E4CCh */ case    7:  		/* bc 12, CR6_EQ, 300 */
		/* 8222E4CCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8222E5F8;  }
		/* 8222E4CCh case    7:*/		return 0x8222E4D0;
		  /* 8222E4D0h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 8222E4D0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222E4D0h case    8:*/		return 0x8222E4D4;
		  /* 8222E4D4h */ case    9:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 8222E4D4h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 8222E4D4h case    9:*/		return 0x8222E4D8;
		  /* 8222E4D8h */ case   10:  		/* bc 12, CR0_EQ, 108 */
		/* 8222E4D8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222E544;  }
		/* 8222E4D8h case   10:*/		return 0x8222E4DC;
		  /* 8222E4DCh */ case   11:  		/* addi R11, R31, 8 */
		/* 8222E4DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8222E4DCh case   11:*/		return 0x8222E4E0;
		  /* 8222E4E0h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 8222E4E0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E4E0h case   12:*/		return 0x8222E4E4;
		  /* 8222E4E4h */ case   13:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 8222E4E4h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 8222E4E4h case   13:*/		return 0x8222E4E8;
		  /* 8222E4E8h */ case   14:  		/* cmplwi CR6, R10, 21 */
		/* 8222E4E8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000015);
		/* 8222E4E8h case   14:*/		return 0x8222E4EC;
		  /* 8222E4ECh */ case   15:  		/* bc 12, CR6_LT, 16 */
		/* 8222E4ECh case   15:*/		if ( regs.CR[6].lt ) { return 0x8222E4FC;  }
		/* 8222E4ECh case   15:*/		return 0x8222E4F0;
		  /* 8222E4F0h */ case   16:  		/* cmplwi CR6, R10, 24 */
		/* 8222E4F0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000018);
		/* 8222E4F0h case   16:*/		return 0x8222E4F4;
		  /* 8222E4F4h */ case   17:  		/* mr R10, R22 */
		/* 8222E4F4h case   17:*/		regs.R10 = regs.R22;
		/* 8222E4F4h case   17:*/		return 0x8222E4F8;
		  /* 8222E4F8h */ case   18:  		/* bc 4, CR6_GT, 8 */
		/* 8222E4F8h case   18:*/		if ( !regs.CR[6].gt ) { return 0x8222E500;  }
		/* 8222E4F8h case   18:*/		return 0x8222E4FC;
	}
	return 0x8222E4FC;
} // Block from 8222E4B0h-8222E4FCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8222E4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E4FC);
		  /* 8222E4FCh */ case    0:  		/* li R10, 0 */
		/* 8222E4FCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222E4FCh case    0:*/		return 0x8222E500;
	}
	return 0x8222E500;
} // Block from 8222E4FCh-8222E500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E500);
		  /* 8222E500h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222E500h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222E500h case    0:*/		return 0x8222E504;
		  /* 8222E504h */ case    1:  		/* bc 4, CR0_EQ, 244 */
		/* 8222E504h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222E5F8;  }
		/* 8222E504h case    1:*/		return 0x8222E508;
		  /* 8222E508h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 8222E508h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E508h case    2:*/		return 0x8222E50C;
		  /* 8222E50Ch */ case    3:  		/* b 20 */
		/* 8222E50Ch case    3:*/		return 0x8222E520;
		/* 8222E50Ch case    3:*/		return 0x8222E510;
		  /* 8222E510h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8222E510h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8222E510h case    4:*/		return 0x8222E514;
		  /* 8222E514h */ case    5:  		/* lwz R31, <#[R11 + 16]> */
		/* 8222E514h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 8222E514h case    5:*/		return 0x8222E518;
		  /* 8222E518h */ case    6:  		/* addi R11, R31, 8 */
		/* 8222E518h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8222E518h case    6:*/		return 0x8222E51C;
		  /* 8222E51Ch */ case    7:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222E51Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E51Ch case    7:*/		return 0x8222E520;
	}
	return 0x8222E520;
} // Block from 8222E500h-8222E520h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222E520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E520);
		  /* 8222E520h */ case    0:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8222E520h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8222E520h case    0:*/		return 0x8222E524;
		  /* 8222E524h */ case    1:  		/* cmplwi CR6, R10, 14336 */
		/* 8222E524h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8222E524h case    1:*/		return 0x8222E528;
		  /* 8222E528h */ case    2:  		/* bc 12, CR6_EQ, -24 */
		/* 8222E528h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222E510;  }
		/* 8222E528h case    2:*/		return 0x8222E52C;
		  /* 8222E52Ch */ case    3:  		/* lwz R10, <#[R11]> */
		/* 8222E52Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E52Ch case    3:*/		return 0x8222E530;
		  /* 8222E530h */ case    4:  		/* rlwinm. R9, R10, 6, 31, 31 */
		/* 8222E530h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R9,regs.R10);
		/* 8222E530h case    4:*/		return 0x8222E534;
		  /* 8222E534h */ case    5:  		/* bc 4, CR0_EQ, 196 */
		/* 8222E534h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8222E5F8;  }
		/* 8222E534h case    5:*/		return 0x8222E538;
		  /* 8222E538h */ case    6:  		/* oris R10, R10, 1024 */
		/* 8222E538h case    6:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x400);
		/* 8222E538h case    6:*/		return 0x8222E53C;
		  /* 8222E53Ch */ case    7:  		/* stw R10, <#[R11]> */
		/* 8222E53Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E53Ch case    7:*/		return 0x8222E540;
		  /* 8222E540h */ case    8:  		/* b 100 */
		/* 8222E540h case    8:*/		return 0x8222E5A4;
		/* 8222E540h case    8:*/		return 0x8222E544;
	}
	return 0x8222E544;
} // Block from 8222E520h-8222E544h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222E544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E544);
		  /* 8222E544h */ case    0:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 8222E544h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E544h case    0:*/		return 0x8222E548;
		  /* 8222E548h */ case    1:  		/* bc 12, CR0_EQ, 176 */
		/* 8222E548h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E5F8;  }
		/* 8222E548h case    1:*/		return 0x8222E54C;
		  /* 8222E54Ch */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222E54Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E54Ch case    2:*/		return 0x8222E550;
		  /* 8222E550h */ case    3:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8222E550h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8222E550h case    3:*/		return 0x8222E554;
		  /* 8222E554h */ case    4:  		/* cmplwi CR6, R11, 86 */
		/* 8222E554h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8222E554h case    4:*/		return 0x8222E558;
		  /* 8222E558h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8222E558h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222E588;  }
		/* 8222E558h case    5:*/		return 0x8222E55C;
		  /* 8222E55Ch */ case    6:  		/* cmplwi CR6, R11, 87 */
		/* 8222E55Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8222E55Ch case    6:*/		return 0x8222E560;
		  /* 8222E560h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 8222E560h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222E588;  }
		/* 8222E560h case    7:*/		return 0x8222E564;
		  /* 8222E564h */ case    8:  		/* cmplwi CR6, R11, 89 */
		/* 8222E564h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8222E564h case    8:*/		return 0x8222E568;
		  /* 8222E568h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8222E568h case    9:*/		if ( regs.CR[6].eq ) { return 0x8222E588;  }
		/* 8222E568h case    9:*/		return 0x8222E56C;
		  /* 8222E56Ch */ case   10:  		/* cmplwi CR6, R11, 90 */
		/* 8222E56Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8222E56Ch case   10:*/		return 0x8222E570;
		  /* 8222E570h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 8222E570h case   11:*/		if ( regs.CR[6].eq ) { return 0x8222E588;  }
		/* 8222E570h case   11:*/		return 0x8222E574;
		  /* 8222E574h */ case   12:  		/* cmplwi CR6, R11, 84 */
		/* 8222E574h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8222E574h case   12:*/		return 0x8222E578;
		  /* 8222E578h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8222E578h case   13:*/		if ( regs.CR[6].eq ) { return 0x8222E588;  }
		/* 8222E578h case   13:*/		return 0x8222E57C;
		  /* 8222E57Ch */ case   14:  		/* cmplwi CR6, R11, 85 */
		/* 8222E57Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8222E57Ch case   14:*/		return 0x8222E580;
		  /* 8222E580h */ case   15:  		/* li R11, 0 */
		/* 8222E580h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E580h case   15:*/		return 0x8222E584;
		  /* 8222E584h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8222E584h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8222E58C;  }
		/* 8222E584h case   16:*/		return 0x8222E588;
	}
	return 0x8222E588;
} // Block from 8222E544h-8222E588h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222E588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E588);
		  /* 8222E588h */ case    0:  		/* mr R11, R22 */
		/* 8222E588h case    0:*/		regs.R11 = regs.R22;
		/* 8222E588h case    0:*/		return 0x8222E58C;
	}
	return 0x8222E58C;
} // Block from 8222E588h-8222E58Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E58Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E58C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E58C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E58C);
		  /* 8222E58Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E58Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E58Ch case    0:*/		return 0x8222E590;
		  /* 8222E590h */ case    1:  		/* bc 12, CR0_EQ, 104 */
		/* 8222E590h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E5F8;  }
		/* 8222E590h case    1:*/		return 0x8222E594;
		  /* 8222E594h */ case    2:  		/* rlwinm. R11, R10, 6, 31, 31 */
		/* 8222E594h case    2:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R10);
		/* 8222E594h case    2:*/		return 0x8222E598;
		  /* 8222E598h */ case    3:  		/* bc 4, CR0_EQ, 96 */
		/* 8222E598h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222E5F8;  }
		/* 8222E598h case    3:*/		return 0x8222E59C;
		  /* 8222E59Ch */ case    4:  		/* oris R11, R10, 1024 */
		/* 8222E59Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x400);
		/* 8222E59Ch case    4:*/		return 0x8222E5A0;
	}
	return 0x8222E5A0;
} // Block from 8222E58Ch-8222E5A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222E5A0h
// Function '?ReorderAdjacent@Compiler@D3DXShader@@QAAXPAVInstruction@2@0_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E5A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E5A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E5A0);
		  /* 8222E5A0h */ case    0:  		/* stw R11, <#[R31 + 8]> */
		/* 8222E5A0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E5A0h case    0:*/		return 0x8222E5A4;
	}
	return 0x8222E5A4;
} // Block from 8222E5A0h-8222E5A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E5A4);
		  /* 8222E5A4h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 8222E5A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222E5A4h case    0:*/		return 0x8222E5A8;
		  /* 8222E5A8h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E5A8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E5A8h case    1:*/		return 0x8222E5AC;
		  /* 8222E5ACh */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E5ACh case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E5D4;  }
		/* 8222E5ACh case    2:*/		return 0x8222E5B0;
		  /* 8222E5B0h */ case    3:  		/* lwz R11, <#[R25]> */
		/* 8222E5B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E5B0h case    3:*/		return 0x8222E5B4;
		  /* 8222E5B4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E5B4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E5B4h case    4:*/		return 0x8222E5B8;
		  /* 8222E5B8h */ case    5:  		/* addic. R3, R11, -4 */
		/* 8222E5B8h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E5B8h case    5:*/		return 0x8222E5BC;
		  /* 8222E5BCh */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E5BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x8222E5D4;  }
		/* 8222E5BCh case    6:*/		return 0x8222E5C0;
		  /* 8222E5C0h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E5C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E5C0h case    7:*/		return 0x8222E5C4;
		  /* 8222E5C4h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E5C4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E5C4h case    8:*/		return 0x8222E5C8;
		  /* 8222E5C8h */ case    9:  		/* addi R11, R11, 1 */
		/* 8222E5C8h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E5C8h case    9:*/		return 0x8222E5CC;
		  /* 8222E5CCh */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8222E5CCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E5CCh case   10:*/		return 0x8222E5D0;
		  /* 8222E5D0h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 8222E5D0h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8222E5E0;  }
		/* 8222E5D0h case   11:*/		return 0x8222E5D4;
	}
	return 0x8222E5D4;
} // Block from 8222E5A4h-8222E5D4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222E5D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E5D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E5D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E5D4);
		  /* 8222E5D4h */ case    0:  		/* li R4, 1 */
		/* 8222E5D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E5D4h case    0:*/		return 0x8222E5D8;
		  /* 8222E5D8h */ case    1:  		/* mr R3, R25 */
		/* 8222E5D8h case    1:*/		regs.R3 = regs.R25;
		/* 8222E5D8h case    1:*/		return 0x8222E5DC;
		  /* 8222E5DCh */ case    2:  		/* bl -660756 */
		/* 8222E5DCh case    2:*/		regs.LR = 0x8222E5E0; return 0x8218D0C8;
		/* 8222E5DCh case    2:*/		return 0x8222E5E0;
	}
	return 0x8222E5E0;
} // Block from 8222E5D4h-8222E5E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E5E0);
		  /* 8222E5E0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E5E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E5E0h case    0:*/		return 0x8222E5E4;
		  /* 8222E5E4h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E5E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E5E4h case    1:*/		return 0x8222E5E8;
		  /* 8222E5E8h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E5E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E5E8h case    2:*/		return 0x8222E5EC;
		  /* 8222E5ECh */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E5ECh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E5ECh case    3:*/		return 0x8222E5F0;
		  /* 8222E5F0h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E5F0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E5F0h case    4:*/		return 0x8222E5F4;
		  /* 8222E5F4h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222E5F4h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E5F4h case    5:*/		return 0x8222E5F8;
	}
	return 0x8222E5F8;
} // Block from 8222E5E0h-8222E5F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E5F8);
		  /* 8222E5F8h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 8222E5F8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8222E5F8h case    0:*/		return 0x8222E5FC;
		  /* 8222E5FCh */ case    1:  		/* b -320 */
		/* 8222E5FCh case    1:*/		return 0x8222E4BC;
		/* 8222E5FCh case    1:*/		return 0x8222E600;
	}
	return 0x8222E600;
} // Block from 8222E5F8h-8222E600h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E600);
		  /* 8222E600h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 8222E600h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222E600h case    0:*/		return 0x8222E604;
		  /* 8222E604h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E604h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E604h case    1:*/		return 0x8222E608;
		  /* 8222E608h */ case    2:  		/* bc 4, CR0_EQ, 128 */
		/* 8222E608h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E688;  }
		/* 8222E608h case    2:*/		return 0x8222E60C;
		  /* 8222E60Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8222E60Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222E60Ch case    3:*/		return 0x8222E610;
		  /* 8222E610h */ case    4:  		/* bc 12, CR0_EQ, 120 */
		/* 8222E610h case    4:*/		if ( regs.CR[0].eq ) { return 0x8222E688;  }
		/* 8222E610h case    4:*/		return 0x8222E614;
		  /* 8222E614h */ case    5:  		/* lwz R11, <#[R25]> */
		/* 8222E614h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E614h case    5:*/		return 0x8222E618;
		  /* 8222E618h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E618h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E618h case    6:*/		return 0x8222E61C;
		  /* 8222E61Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 8222E61Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222E61Ch case    7:*/		return 0x8222E620;
		  /* 8222E620h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222E620h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E620h case    8:*/		return 0x8222E624;
		  /* 8222E624h */ case    9:  		/* addi R10, R11, 3 */
		/* 8222E624h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222E624h case    9:*/		return 0x8222E628;
		  /* 8222E628h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8222E628h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222E628h case   10:*/		return 0x8222E62C;
		  /* 8222E62Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222E62Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222E62Ch case   11:*/		return 0x8222E630;
		  /* 8222E630h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 8222E630h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222E630h case   12:*/		return 0x8222E634;
		  /* 8222E634h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8222E634h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222E634h case   13:*/		return 0x8222E638;
		  /* 8222E638h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 8222E638h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222E674;  }
		/* 8222E638h case   14:*/		return 0x8222E63C;
		  /* 8222E63Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222E63Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222E63Ch case   15:*/		return 0x8222E640;
		  /* 8222E640h */ case   16:  		/* mr R3, R25 */
		/* 8222E640h case   16:*/		regs.R3 = regs.R25;
		/* 8222E640h case   16:*/		return 0x8222E644;
		  /* 8222E644h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222E644h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E644h case   17:*/		return 0x8222E648;
		  /* 8222E648h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8222E648h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E648h case   18:*/		return 0x8222E64C;
		  /* 8222E64Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222E64Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222E64Ch case   19:*/		return 0x8222E650;
		  /* 8222E650h */ case   20:  		/* stw R9, <#[R10]> */
		/* 8222E650h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222E650h case   20:*/		return 0x8222E654;
		  /* 8222E654h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 8222E654h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E654h case   21:*/		return 0x8222E658;
	}
	return 0x8222E658;
} // Block from 8222E600h-8222E658h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8222E658h
// Function '?ReorderBefore@Compiler@D3DXShader@@QAAXPAVInstruction@2@0_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E658);
		  /* 8222E658h */ case    0:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222E658h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222E658h case    0:*/		return 0x8222E65C;
		  /* 8222E65Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222E65Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E65Ch case    1:*/		return 0x8222E660;
		  /* 8222E660h */ case    2:  		/* stw R11, <#[R10]> */
		/* 8222E660h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222E660h case    2:*/		return 0x8222E664;
		  /* 8222E664h */ case    3:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222E664h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222E664h case    3:*/		return 0x8222E668;
		  /* 8222E668h */ case    4:  		/* addi R11, R11, 4 */
		/* 8222E668h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222E668h case    4:*/		return 0x8222E66C;
		  /* 8222E66Ch */ case    5:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222E66Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222E66Ch case    5:*/		return 0x8222E670;
		  /* 8222E670h */ case    6:  		/* bl -903272 */
		/* 8222E670h case    6:*/		regs.LR = 0x8222E674; return 0x82151E08;
		/* 8222E670h case    6:*/		return 0x8222E674;
	}
	return 0x8222E674;
} // Block from 8222E658h-8222E674h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E674);
		  /* 8222E674h */ case    0:  		/* mr R26, R31 */
		/* 8222E674h case    0:*/		regs.R26 = regs.R31;
		/* 8222E674h case    0:*/		return 0x8222E678;
		  /* 8222E678h */ case    1:  		/* b -2240 */
		/* 8222E678h case    1:*/		return 0x8222DDB8;
		/* 8222E678h case    1:*/		return 0x8222E67C;
	}
	return 0x8222E67C;
} // Block from 8222E674h-8222E67Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E67C);
		  /* 8222E67Ch */ case    0:  		/* li R4, 4800 */
		/* 8222E67Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222E67Ch case    0:*/		return 0x8222E680;
		  /* 8222E680h */ case    1:  		/* mr R3, R24 */
		/* 8222E680h case    1:*/		regs.R3 = regs.R24;
		/* 8222E680h case    1:*/		return 0x8222E684;
		  /* 8222E684h */ case    2:  		/* bl -903196 */
		/* 8222E684h case    2:*/		regs.LR = 0x8222E688; return 0x82151E68;
		/* 8222E684h case    2:*/		return 0x8222E688;
	}
	return 0x8222E688;
} // Block from 8222E67Ch-8222E688h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E688);
		  /* 8222E688h */ case    0:  		/* lwz R10, <#[R24 + 976]> */
		/* 8222E688h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x000003D0) );
		/* 8222E688h case    0:*/		return 0x8222E68C;
		  /* 8222E68Ch */ case    1:  		/* addi R11, R24, 972 */
		/* 8222E68Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x3CC);
		/* 8222E68Ch case    1:*/		return 0x8222E690;
		  /* 8222E690h */ case    2:  		/* stw R10, <#[R25]> */
		/* 8222E690h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 8222E690h case    2:*/		return 0x8222E694;
		  /* 8222E694h */ case    3:  		/* stw R25, <#[R24 + 976]> */
		/* 8222E694h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R24 + 0x000003D0) );
		/* 8222E694h case    3:*/		return 0x8222E698;
		  /* 8222E698h */ case    4:  		/* addi R1, R1, 176 */
		/* 8222E698h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8222E698h case    4:*/		return 0x8222E69C;
		  /* 8222E69Ch */ case    5:  		/* b -1692688 */
		/* 8222E69Ch case    5:*/		return 0x8209128C;
		/* 8222E69Ch case    5:*/		return 0x8222E6A0;
	}
	return 0x8222E6A0;
} // Block from 8222E688h-8222E6A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E6A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E6A0);
		  /* 8222E6A0h */ case    0:  		/* mfspr R12, LR */
		/* 8222E6A0h case    0:*/		regs.R12 = regs.LR;
		/* 8222E6A0h case    0:*/		return 0x8222E6A4;
		  /* 8222E6A4h */ case    1:  		/* bl -1692752 */
		/* 8222E6A4h case    1:*/		regs.LR = 0x8222E6A8; return 0x82091254;
		/* 8222E6A4h case    1:*/		return 0x8222E6A8;
		  /* 8222E6A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222E6A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222E6A8h case    2:*/		return 0x8222E6AC;
		  /* 8222E6ACh */ case    3:  		/* mr R31, R4 */
		/* 8222E6ACh case    3:*/		regs.R31 = regs.R4;
		/* 8222E6ACh case    3:*/		return 0x8222E6B0;
		  /* 8222E6B0h */ case    4:  		/* li R5, 38 */
		/* 8222E6B0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8222E6B0h case    4:*/		return 0x8222E6B4;
		  /* 8222E6B4h */ case    5:  		/* li R4, 8 */
		/* 8222E6B4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8222E6B4h case    5:*/		return 0x8222E6B8;
		  /* 8222E6B8h */ case    6:  		/* mr R27, R3 */
		/* 8222E6B8h case    6:*/		regs.R27 = regs.R3;
		/* 8222E6B8h case    6:*/		return 0x8222E6BC;
		  /* 8222E6BCh */ case    7:  		/* bl -826828 */
		/* 8222E6BCh case    7:*/		regs.LR = 0x8222E6C0; return 0x821648F0;
		/* 8222E6BCh case    7:*/		return 0x8222E6C0;
		  /* 8222E6C0h */ case    8:  		/* addi R28, R3, 4 */
		/* 8222E6C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x4);
		/* 8222E6C0h case    8:*/		return 0x8222E6C4;
		  /* 8222E6C4h */ case    9:  		/* ori R11, R3, 1 */
		/* 8222E6C4h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8222E6C4h case    9:*/		return 0x8222E6C8;
		  /* 8222E6C8h */ case   10:  		/* ori R10, R28, 1 */
		/* 8222E6C8h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R28,0x1);
		/* 8222E6C8h case   10:*/		return 0x8222E6CC;
		  /* 8222E6CCh */ case   11:  		/* stw R11, <#[R3 + 4]> */
		/* 8222E6CCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8222E6CCh case   11:*/		return 0x8222E6D0;
		  /* 8222E6D0h */ case   12:  		/* mr R29, R3 */
		/* 8222E6D0h case   12:*/		regs.R29 = regs.R3;
		/* 8222E6D0h case   12:*/		return 0x8222E6D4;
		  /* 8222E6D4h */ case   13:  		/* stw R10, <#[R3]> */
		/* 8222E6D4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222E6D4h case   13:*/		return 0x8222E6D8;
		  /* 8222E6D8h */ case   14:  		/* lwz R31, <#[R31 + 16]> */
		/* 8222E6D8h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 8222E6D8h case   14:*/		return 0x8222E6DC;
		  /* 8222E6DCh */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222E6DCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E6DCh case   15:*/		return 0x8222E6E0;
		  /* 8222E6E0h */ case   16:  		/* oris R11, R11, 1024 */
		/* 8222E6E0h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222E6E0h case   16:*/		return 0x8222E6E4;
		  /* 8222E6E4h */ case   17:  		/* stw R11, <#[R31 + 8]> */
		/* 8222E6E4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E6E4h case   17:*/		return 0x8222E6E8;
		  /* 8222E6E8h */ case   18:  		/* lwz R30, <#[R31]> */
		/* 8222E6E8h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 8222E6E8h case   18:*/		return 0x8222E6EC;
		  /* 8222E6ECh */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 8222E6ECh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222E6ECh case   19:*/		return 0x8222E6F0;
		  /* 8222E6F0h */ case   20:  		/* bc 12, CR6_EQ, 64 */
		/* 8222E6F0h case   20:*/		if ( regs.CR[6].eq ) { return 0x8222E730;  }
		/* 8222E6F0h case   20:*/		return 0x8222E6F4;
		  /* 8222E6F4h */ case   21:  		/* lwz R11, <#[R30]> */
		/* 8222E6F4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222E6F4h case   21:*/		return 0x8222E6F8;
	}
	return 0x8222E6F8;
} // Block from 8222E6A0h-8222E6F8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8222E6F8h
// Function '?DependsOnLocal_Sequenced@Instruction@D3DXShader@@QAA_NPAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E6F8);
		  /* 8222E6F8h */ case    0:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8222E6F8h case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8222E6F8h case    0:*/		return 0x8222E6FC;
		  /* 8222E6FCh */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8222E6FCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222E70C;  }
		/* 8222E6FCh case    1:*/		return 0x8222E700;
		  /* 8222E700h */ case    2:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8222E700h case    2:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8222E700h case    2:*/		return 0x8222E704;
		  /* 8222E704h */ case    3:  		/* li R11, 0 */
		/* 8222E704h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E704h case    3:*/		return 0x8222E708;
		  /* 8222E708h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 8222E708h case    4:*/		if ( regs.CR[0].eq ) { return 0x8222E710;  }
		/* 8222E708h case    4:*/		return 0x8222E70C;
	}
	return 0x8222E70C;
} // Block from 8222E6F8h-8222E70Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222E70Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E70C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E70C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E70C);
		  /* 8222E70Ch */ case    0:  		/* li R11, 1 */
		/* 8222E70Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222E70Ch case    0:*/		return 0x8222E710;
	}
	return 0x8222E710;
} // Block from 8222E70Ch-8222E710h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E710);
		  /* 8222E710h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E710h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E710h case    0:*/		return 0x8222E714;
		  /* 8222E714h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8222E714h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E728;  }
		/* 8222E714h case    1:*/		return 0x8222E718;
		  /* 8222E718h */ case    2:  		/* li R5, 0 */
		/* 8222E718h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222E718h case    2:*/		return 0x8222E71C;
		  /* 8222E71Ch */ case    3:  		/* mr R4, R30 */
		/* 8222E71Ch case    3:*/		regs.R4 = regs.R30;
		/* 8222E71Ch case    3:*/		return 0x8222E720;
		  /* 8222E720h */ case    4:  		/* mr R3, R27 */
		/* 8222E720h case    4:*/		regs.R3 = regs.R27;
		/* 8222E720h case    4:*/		return 0x8222E724;
		  /* 8222E724h */ case    5:  		/* bl -2492 */
		/* 8222E724h case    5:*/		regs.LR = 0x8222E728; return 0x8222DD68;
		/* 8222E724h case    5:*/		return 0x8222E728;
	}
	return 0x8222E728;
} // Block from 8222E710h-8222E728h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E728);
		  /* 8222E728h */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 8222E728h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 8222E728h case    0:*/		return 0x8222E72C;
		  /* 8222E72Ch */ case    1:  		/* b -64 */
		/* 8222E72Ch case    1:*/		return 0x8222E6EC;
		/* 8222E72Ch case    1:*/		return 0x8222E730;
	}
	return 0x8222E730;
} // Block from 8222E728h-8222E730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E730);
		  /* 8222E730h */ case    0:  		/* lwz R30, <#[R31 + 4]> */
		/* 8222E730h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8222E730h case    0:*/		return 0x8222E734;
		  /* 8222E734h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8222E734h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222E734h case    1:*/		return 0x8222E738;
		  /* 8222E738h */ case    2:  		/* bc 12, CR6_EQ, 164 */
		/* 8222E738h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222E7DC;  }
		/* 8222E738h case    2:*/		return 0x8222E73C;
		  /* 8222E73Ch */ case    3:  		/* lwz R31, <#[R30 + 16]> */
		/* 8222E73Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 8222E73Ch case    3:*/		return 0x8222E740;
		  /* 8222E740h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8222E740h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222E740h case    4:*/		return 0x8222E744;
		  /* 8222E744h */ case    5:  		/* bc 12, CR6_EQ, 144 */
		/* 8222E744h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222E7D4;  }
		/* 8222E744h case    5:*/		return 0x8222E748;
		  /* 8222E748h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 8222E748h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222E748h case    6:*/		return 0x8222E74C;
		  /* 8222E74Ch */ case    7:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8222E74Ch case    7:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8222E74Ch case    7:*/		return 0x8222E750;
		  /* 8222E750h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 8222E750h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8222E760;  }
		/* 8222E750h case    8:*/		return 0x8222E754;
		  /* 8222E754h */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8222E754h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8222E754h case    9:*/		return 0x8222E758;
		  /* 8222E758h */ case   10:  		/* li R11, 0 */
		/* 8222E758h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222E758h case   10:*/		return 0x8222E75C;
		  /* 8222E75Ch */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8222E75Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8222E764;  }
		/* 8222E75Ch case   11:*/		return 0x8222E760;
	}
	return 0x8222E760;
} // Block from 8222E730h-8222E760h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222E760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E760);
		  /* 8222E760h */ case    0:  		/* li R11, 1 */
		/* 8222E760h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222E760h case    0:*/		return 0x8222E764;
	}
	return 0x8222E764;
} // Block from 8222E760h-8222E764h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222E764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E764);
		  /* 8222E764h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222E764h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222E764h case    0:*/		return 0x8222E768;
		  /* 8222E768h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 8222E768h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222E7D4;  }
		/* 8222E768h case    1:*/		return 0x8222E76C;
		  /* 8222E76Ch */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222E76Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E76Ch case    2:*/		return 0x8222E770;
		  /* 8222E770h */ case    3:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222E770h case    3:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E770h case    3:*/		return 0x8222E774;
		  /* 8222E774h */ case    4:  		/* bc 4, CR0_EQ, 96 */
		/* 8222E774h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222E7D4;  }
		/* 8222E774h case    4:*/		return 0x8222E778;
		  /* 8222E778h */ case    5:  		/* oris R11, R11, 1024 */
		/* 8222E778h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222E778h case    5:*/		return 0x8222E77C;
		  /* 8222E77Ch */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 8222E77Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E77Ch case    6:*/		return 0x8222E780;
	}
	return 0x8222E780;
} // Block from 8222E764h-8222E780h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E780h
// Function '?MarkThroughDependencies@Compiler@D3DXShader@@QAAXPAVDependency@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E780);
		  /* 8222E780h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8222E780h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222E780h case    0:*/		return 0x8222E784;
		  /* 8222E784h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E784h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E784h case    1:*/		return 0x8222E788;
		  /* 8222E788h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E788h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E7B0;  }
		/* 8222E788h case    2:*/		return 0x8222E78C;
		  /* 8222E78Ch */ case    3:  		/* lwz R11, <#[R29]> */
		/* 8222E78Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8222E78Ch case    3:*/		return 0x8222E790;
		  /* 8222E790h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E790h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E790h case    4:*/		return 0x8222E794;
		  /* 8222E794h */ case    5:  		/* addic. R3, R11, -4 */
		/* 8222E794h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E794h case    5:*/		return 0x8222E798;
		  /* 8222E798h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E798h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222E7B0;  }
		/* 8222E798h case    6:*/		return 0x8222E79C;
		  /* 8222E79Ch */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E79Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E79Ch case    7:*/		return 0x8222E7A0;
		  /* 8222E7A0h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E7A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E7A0h case    8:*/		return 0x8222E7A4;
		  /* 8222E7A4h */ case    9:  		/* addi R11, R11, 1 */
		/* 8222E7A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E7A4h case    9:*/		return 0x8222E7A8;
		  /* 8222E7A8h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8222E7A8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E7A8h case   10:*/		return 0x8222E7AC;
		  /* 8222E7ACh */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 8222E7ACh case   11:*/		if ( !regs.CR[6].gt ) { return 0x8222E7BC;  }
		/* 8222E7ACh case   11:*/		return 0x8222E7B0;
	}
	return 0x8222E7B0;
} // Block from 8222E780h-8222E7B0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222E7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E7B0);
		  /* 8222E7B0h */ case    0:  		/* li R4, 1 */
		/* 8222E7B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E7B0h case    0:*/		return 0x8222E7B4;
		  /* 8222E7B4h */ case    1:  		/* mr R3, R29 */
		/* 8222E7B4h case    1:*/		regs.R3 = regs.R29;
		/* 8222E7B4h case    1:*/		return 0x8222E7B8;
		  /* 8222E7B8h */ case    2:  		/* bl -661232 */
		/* 8222E7B8h case    2:*/		regs.LR = 0x8222E7BC; return 0x8218D0C8;
		/* 8222E7B8h case    2:*/		return 0x8222E7BC;
	}
	return 0x8222E7BC;
} // Block from 8222E7B0h-8222E7BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E7BC);
		  /* 8222E7BCh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E7BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E7BCh case    0:*/		return 0x8222E7C0;
		  /* 8222E7C0h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E7C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E7C0h case    1:*/		return 0x8222E7C4;
		  /* 8222E7C4h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E7C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E7C4h case    2:*/		return 0x8222E7C8;
		  /* 8222E7C8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E7C8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E7C8h case    3:*/		return 0x8222E7CC;
		  /* 8222E7CCh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E7CCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E7CCh case    4:*/		return 0x8222E7D0;
		  /* 8222E7D0h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222E7D0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E7D0h case    5:*/		return 0x8222E7D4;
	}
	return 0x8222E7D4;
} // Block from 8222E7BCh-8222E7D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E7D4);
		  /* 8222E7D4h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 8222E7D4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8222E7D4h case    0:*/		return 0x8222E7D8;
		  /* 8222E7D8h */ case    1:  		/* b -164 */
		/* 8222E7D8h case    1:*/		return 0x8222E734;
		/* 8222E7D8h case    1:*/		return 0x8222E7DC;
	}
	return 0x8222E7DC;
} // Block from 8222E7D4h-8222E7DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E7DC);
		  /* 8222E7DCh */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8222E7DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222E7DCh case    0:*/		return 0x8222E7E0;
		  /* 8222E7E0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E7E0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E7E0h case    1:*/		return 0x8222E7E4;
		  /* 8222E7E4h */ case    2:  		/* bc 4, CR0_EQ, 112 */
		/* 8222E7E4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8222E854;  }
		/* 8222E7E4h case    2:*/		return 0x8222E7E8;
		  /* 8222E7E8h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8222E7E8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8222E7E8h case    3:*/		return 0x8222E7EC;
		  /* 8222E7ECh */ case    4:  		/* bc 12, CR0_EQ, 104 */
		/* 8222E7ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x8222E854;  }
		/* 8222E7ECh case    4:*/		return 0x8222E7F0;
		  /* 8222E7F0h */ case    5:  		/* lwz R11, <#[R29]> */
		/* 8222E7F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8222E7F0h case    5:*/		return 0x8222E7F4;
		  /* 8222E7F4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E7F4h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E7F4h case    6:*/		return 0x8222E7F8;
		  /* 8222E7F8h */ case    7:  		/* addi R4, R11, -4 */
		/* 8222E7F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222E7F8h case    7:*/		return 0x8222E7FC;
		  /* 8222E7FCh */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222E7FCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E7FCh case    8:*/		return 0x8222E800;
		  /* 8222E800h */ case    9:  		/* addi R10, R11, 3 */
		/* 8222E800h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8222E800h case    9:*/		return 0x8222E804;
		  /* 8222E804h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8222E804h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222E804h case   10:*/		return 0x8222E808;
		  /* 8222E808h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8222E808h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8222E808h case   11:*/		return 0x8222E80C;
		  /* 8222E80Ch */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 8222E80Ch case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8222E80Ch case   12:*/		return 0x8222E810;
		  /* 8222E810h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8222E810h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222E810h case   13:*/		return 0x8222E814;
		  /* 8222E814h */ case   14:  		/* bc 4, CR0_EQ, -300 */
		/* 8222E814h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222E6E8;  }
		/* 8222E814h case   14:*/		return 0x8222E818;
		  /* 8222E818h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8222E818h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8222E818h case   15:*/		return 0x8222E81C;
		  /* 8222E81Ch */ case   16:  		/* mr R3, R29 */
		/* 8222E81Ch case   16:*/		regs.R3 = regs.R29;
		/* 8222E81Ch case   16:*/		return 0x8222E820;
		  /* 8222E820h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222E820h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E820h case   17:*/		return 0x8222E824;
		  /* 8222E824h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8222E824h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E824h case   18:*/		return 0x8222E828;
		  /* 8222E828h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8222E828h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8222E828h case   19:*/		return 0x8222E82C;
		  /* 8222E82Ch */ case   20:  		/* stw R9, <#[R10]> */
		/* 8222E82Ch case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222E82Ch case   20:*/		return 0x8222E830;
		  /* 8222E830h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222E830h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222E830h case   21:*/		return 0x8222E834;
		  /* 8222E834h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8222E834h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E834h case   22:*/		return 0x8222E838;
		  /* 8222E838h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E838h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E838h case   23:*/		return 0x8222E83C;
		  /* 8222E83Ch */ case   24:  		/* stw R10, <#[R11]> */
		/* 8222E83Ch case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E83Ch case   24:*/		return 0x8222E840;
		  /* 8222E840h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 8222E840h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222E840h case   25:*/		return 0x8222E844;
		  /* 8222E844h */ case   26:  		/* addi R11, R11, 4 */
		/* 8222E844h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222E844h case   26:*/		return 0x8222E848;
		  /* 8222E848h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8222E848h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8222E848h case   27:*/		return 0x8222E84C;
		  /* 8222E84Ch */ case   28:  		/* bl -903748 */
		/* 8222E84Ch case   28:*/		regs.LR = 0x8222E850; return 0x82151E08;
		/* 8222E84Ch case   28:*/		return 0x8222E850;
		  /* 8222E850h */ case   29:  		/* b -360 */
		/* 8222E850h case   29:*/		return 0x8222E6E8;
		/* 8222E850h case   29:*/		return 0x8222E854;
	}
	return 0x8222E854;
} // Block from 8222E7DCh-8222E854h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8222E854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E854);
		  /* 8222E854h */ case    0:  		/* lwz R10, <#[R27 + 976]> */
		/* 8222E854h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x000003D0) );
		/* 8222E854h case    0:*/		return 0x8222E858;
		  /* 8222E858h */ case    1:  		/* addi R11, R27, 972 */
		/* 8222E858h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x3CC);
		/* 8222E858h case    1:*/		return 0x8222E85C;
		  /* 8222E85Ch */ case    2:  		/* stw R10, <#[R29]> */
		/* 8222E85Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8222E85Ch case    2:*/		return 0x8222E860;
		  /* 8222E860h */ case    3:  		/* stw R29, <#[R27 + 976]> */
		/* 8222E860h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x000003D0) );
		/* 8222E860h case    3:*/		return 0x8222E864;
		  /* 8222E864h */ case    4:  		/* addi R1, R1, 128 */
		/* 8222E864h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8222E864h case    4:*/		return 0x8222E868;
		  /* 8222E868h */ case    5:  		/* b -1693124 */
		/* 8222E868h case    5:*/		return 0x820912A4;
		/* 8222E868h case    5:*/		return 0x8222E86C;
		  /* 8222E86Ch */ case    6:  		/* nop */
		/* 8222E86Ch case    6:*/		cpu::op::nop();
		/* 8222E86Ch case    6:*/		return 0x8222E870;
	}
	return 0x8222E870;
} // Block from 8222E854h-8222E870h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222E870h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E870);
		  /* 8222E870h */ case    0:  		/* mfspr R12, LR */
		/* 8222E870h case    0:*/		regs.R12 = regs.LR;
		/* 8222E870h case    0:*/		return 0x8222E874;
		  /* 8222E874h */ case    1:  		/* bl -1693216 */
		/* 8222E874h case    1:*/		regs.LR = 0x8222E878; return 0x82091254;
		/* 8222E874h case    1:*/		return 0x8222E878;
		  /* 8222E878h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222E878h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222E878h case    2:*/		return 0x8222E87C;
		  /* 8222E87Ch */ case    3:  		/* lwz R30, <#[R4 + 8]> */
		/* 8222E87Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x00000008) );
		/* 8222E87Ch case    3:*/		return 0x8222E880;
		  /* 8222E880h */ case    4:  		/* mr R27, R3 */
		/* 8222E880h case    4:*/		regs.R27 = regs.R3;
		/* 8222E880h case    4:*/		return 0x8222E884;
		  /* 8222E884h */ case    5:  		/* mr R31, R4 */
		/* 8222E884h case    5:*/		regs.R31 = regs.R4;
		/* 8222E884h case    5:*/		return 0x8222E888;
		  /* 8222E888h */ case    6:  		/* rlwinm R11, R30, 25, 25, 31 */
		/* 8222E888h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R30);
		/* 8222E888h case    6:*/		return 0x8222E88C;
		  /* 8222E88Ch */ case    7:  		/* mr R28, R5 */
		/* 8222E88Ch case    7:*/		regs.R28 = regs.R5;
		/* 8222E88Ch case    7:*/		return 0x8222E890;
		  /* 8222E890h */ case    8:  		/* li R29, 0 */
		/* 8222E890h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8222E890h case    8:*/		return 0x8222E894;
		  /* 8222E894h */ case    9:  		/* cmplwi CR6, R11, 84 */
		/* 8222E894h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8222E894h case    9:*/		return 0x8222E898;
		  /* 8222E898h */ case   10:  		/* bc 4, CR6_EQ, 76 */
		/* 8222E898h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8222E8E4;  }
		/* 8222E898h case   10:*/		return 0x8222E89C;
		  /* 8222E89Ch */ case   11:  		/* rlwinm R6, R30, 18, 29, 31 */
		/* 8222E89Ch case   11:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R30);
		/* 8222E89Ch case   11:*/		return 0x8222E8A0;
		  /* 8222E8A0h */ case   12:  		/* rlwinm R5, R30, 13, 29, 31 */
		/* 8222E8A0h case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R30);
		/* 8222E8A0h case   12:*/		return 0x8222E8A4;
		  /* 8222E8A4h */ case   13:  		/* li R4, 84 */
		/* 8222E8A4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 8222E8A4h case   13:*/		return 0x8222E8A8;
		  /* 8222E8A8h */ case   14:  		/* bl -828536 */
		/* 8222E8A8h case   14:*/		regs.LR = 0x8222E8AC; return 0x82164430;
		/* 8222E8A8h case   14:*/		return 0x8222E8AC;
		  /* 8222E8ACh */ case   15:  		/* addi R11, R31, -16 */
		/* 8222E8ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 8222E8ACh case   15:*/		return 0x8222E8B0;
		  /* 8222E8B0h */ case   16:  		/* lwzx R11, <#[R3 + R11]> */
		/* 8222E8B0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8222E8B0h case   16:*/		return 0x8222E8B4;
		  /* 8222E8B4h */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E8B4h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E8B4h case   17:*/		return 0x8222E8B8;
		  /* 8222E8B8h */ case   18:  		/* lwz R11, <#[R11]> */
		/* 8222E8B8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222E8B8h case   18:*/		return 0x8222E8BC;
		  /* 8222E8BCh */ case   19:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8222E8BCh case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E8BCh case   19:*/		return 0x8222E8C0;
		  /* 8222E8C0h */ case   20:  		/* bc 12, CR0_EQ, 12 */
		/* 8222E8C0h case   20:*/		if ( regs.CR[0].eq ) { return 0x8222E8CC;  }
		/* 8222E8C0h case   20:*/		return 0x8222E8C4;
		  /* 8222E8C4h */ case   21:  		/* li R4, 0 */
		/* 8222E8C4h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222E8C4h case   21:*/		return 0x8222E8C8;
		  /* 8222E8C8h */ case   22:  		/* b 12 */
		/* 8222E8C8h case   22:*/		return 0x8222E8D4;
		/* 8222E8C8h case   22:*/		return 0x8222E8CC;
	}
	return 0x8222E8CC;
} // Block from 8222E870h-8222E8CCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 8222E8CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E8CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E8CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E8CC);
		  /* 8222E8CCh */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E8CCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E8CCh case    0:*/		return 0x8222E8D0;
		  /* 8222E8D0h */ case    1:  		/* addi R4, R11, -4 */
		/* 8222E8D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8222E8D0h case    1:*/		return 0x8222E8D4;
	}
	return 0x8222E8D4;
} // Block from 8222E8CCh-8222E8D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E8D4);
		  /* 8222E8D4h */ case    0:  		/* mr R3, R27 */
		/* 8222E8D4h case    0:*/		regs.R3 = regs.R27;
		/* 8222E8D4h case    0:*/		return 0x8222E8D8;
		  /* 8222E8D8h */ case    1:  		/* bl -745576 */
		/* 8222E8D8h case    1:*/		regs.LR = 0x8222E8DC; return 0x82178870;
		/* 8222E8D8h case    1:*/		return 0x8222E8DC;
		  /* 8222E8DCh */ case    2:  		/* mr R29, R3 */
		/* 8222E8DCh case    2:*/		regs.R29 = regs.R3;
		/* 8222E8DCh case    2:*/		return 0x8222E8E0;
		  /* 8222E8E0h */ case    3:  		/* b 40 */
		/* 8222E8E0h case    3:*/		return 0x8222E908;
		/* 8222E8E0h case    3:*/		return 0x8222E8E4;
	}
	return 0x8222E8E4;
} // Block from 8222E8D4h-8222E8E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222E8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E8E4);
		  /* 8222E8E4h */ case    0:  		/* cmplwi CR6, R11, 85 */
		/* 8222E8E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8222E8E4h case    0:*/		return 0x8222E8E8;
		  /* 8222E8E8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8222E8E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222E908;  }
		/* 8222E8E8h case    1:*/		return 0x8222E8EC;
		  /* 8222E8ECh */ case    2:  		/* li R6, 0 */
		/* 8222E8ECh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8222E8ECh case    2:*/		return 0x8222E8F0;
		  /* 8222E8F0h */ case    3:  		/* li R5, 0 */
		/* 8222E8F0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222E8F0h case    3:*/		return 0x8222E8F4;
		  /* 8222E8F4h */ case    4:  		/* li R4, 85 */
		/* 8222E8F4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x55);
		/* 8222E8F4h case    4:*/		return 0x8222E8F8;
		  /* 8222E8F8h */ case    5:  		/* mr R3, R27 */
		/* 8222E8F8h case    5:*/		regs.R3 = regs.R27;
		/* 8222E8F8h case    5:*/		return 0x8222E8FC;
		  /* 8222E8FCh */ case    6:  		/* bl -828620 */
		/* 8222E8FCh case    6:*/		regs.LR = 0x8222E900; return 0x82164430;
		/* 8222E8FCh case    6:*/		return 0x8222E900;
		  /* 8222E900h */ case    7:  		/* addi R11, R31, -20 */
		/* 8222E900h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFEC);
		/* 8222E900h case    7:*/		return 0x8222E904;
		  /* 8222E904h */ case    8:  		/* lwzx R29, <#[R3 + R11]> */
		/* 8222E904h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8222E904h case    8:*/		return 0x8222E908;
	}
	return 0x8222E908;
} // Block from 8222E8E4h-8222E908h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222E908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E908);
		  /* 8222E908h */ case    0:  		/* oris R11, R30, 1024 */
		/* 8222E908h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R30,0x400);
		/* 8222E908h case    0:*/		return 0x8222E90C;
		  /* 8222E90Ch */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8222E90Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222E90Ch case    1:*/		return 0x8222E910;
		  /* 8222E910h */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 8222E910h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222E910h case    2:*/		return 0x8222E914;
		  /* 8222E914h */ case    3:  		/* bc 12, CR6_EQ, 216 */
		/* 8222E914h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222E9EC;  }
		/* 8222E914h case    3:*/		return 0x8222E918;
		  /* 8222E918h */ case    4:  		/* lwz R11, <#[R28 + 4]> */
		/* 8222E918h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8222E918h case    4:*/		return 0x8222E91C;
		  /* 8222E91Ch */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E91Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E91Ch case    5:*/		return 0x8222E920;
		  /* 8222E920h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E920h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8222E948;  }
		/* 8222E920h case    6:*/		return 0x8222E924;
		  /* 8222E924h */ case    7:  		/* lwz R11, <#[R28]> */
		/* 8222E924h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222E924h case    7:*/		return 0x8222E928;
		  /* 8222E928h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E928h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E928h case    8:*/		return 0x8222E92C;
		  /* 8222E92Ch */ case    9:  		/* addic. R3, R11, -4 */
		/* 8222E92Ch case    9:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E92Ch case    9:*/		return 0x8222E930;
		  /* 8222E930h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E930h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222E948;  }
		/* 8222E930h case   10:*/		return 0x8222E934;
		  /* 8222E934h */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E934h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E934h case   11:*/		return 0x8222E938;
		  /* 8222E938h */ case   12:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E938h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E938h case   12:*/		return 0x8222E93C;
		  /* 8222E93Ch */ case   13:  		/* addi R11, R11, 1 */
		/* 8222E93Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E93Ch case   13:*/		return 0x8222E940;
		  /* 8222E940h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 8222E940h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E940h case   14:*/		return 0x8222E944;
		  /* 8222E944h */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8222E944h case   15:*/		if ( !regs.CR[6].gt ) { return 0x8222E954;  }
		/* 8222E944h case   15:*/		return 0x8222E948;
	}
	return 0x8222E948;
} // Block from 8222E908h-8222E948h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8222E948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E948);
		  /* 8222E948h */ case    0:  		/* li R4, 1 */
		/* 8222E948h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E948h case    0:*/		return 0x8222E94C;
		  /* 8222E94Ch */ case    1:  		/* mr R3, R28 */
		/* 8222E94Ch case    1:*/		regs.R3 = regs.R28;
		/* 8222E94Ch case    1:*/		return 0x8222E950;
		  /* 8222E950h */ case    2:  		/* bl -661640 */
		/* 8222E950h case    2:*/		regs.LR = 0x8222E954; return 0x8218D0C8;
		/* 8222E950h case    2:*/		return 0x8222E954;
	}
	return 0x8222E954;
} // Block from 8222E948h-8222E954h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E954);
		  /* 8222E954h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E954h case    0:*/		return 0x8222E958;
		  /* 8222E958h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E958h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E958h case    1:*/		return 0x8222E95C;
		  /* 8222E95Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E95Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E95Ch case    2:*/		return 0x8222E960;
		  /* 8222E960h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E960h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E960h case    3:*/		return 0x8222E964;
		  /* 8222E964h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E964h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E964h case    4:*/		return 0x8222E968;
		  /* 8222E968h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8222E968h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E968h case    5:*/		return 0x8222E96C;
		  /* 8222E96Ch */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 8222E96Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222E96Ch case    6:*/		return 0x8222E970;
		  /* 8222E970h */ case    7:  		/* bc 12, CR6_EQ, 116 */
		/* 8222E970h case    7:*/		if ( regs.CR[6].eq ) { return 0x8222E9E4;  }
		/* 8222E970h case    7:*/		return 0x8222E974;
		  /* 8222E974h */ case    8:  		/* lwz R11, <#[R29 + 8]> */
		/* 8222E974h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222E974h case    8:*/		return 0x8222E978;
		  /* 8222E978h */ case    9:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8222E978h case    9:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8222E978h case    9:*/		return 0x8222E97C;
		  /* 8222E97Ch */ case   10:  		/* bc 4, CR0_EQ, 104 */
		/* 8222E97Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8222E9E4;  }
		/* 8222E97Ch case   10:*/		return 0x8222E980;
		  /* 8222E980h */ case   11:  		/* oris R11, R11, 1024 */
		/* 8222E980h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8222E980h case   11:*/		return 0x8222E984;
		  /* 8222E984h */ case   12:  		/* cmplwi CR6, R28, 0 */
		/* 8222E984h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222E984h case   12:*/		return 0x8222E988;
		  /* 8222E988h */ case   13:  		/* stw R11, <#[R29 + 8]> */
		/* 8222E988h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222E988h case   13:*/		return 0x8222E98C;
		  /* 8222E98Ch */ case   14:  		/* bc 12, CR6_EQ, 132 */
		/* 8222E98Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8222EA10;  }
		/* 8222E98Ch case   14:*/		return 0x8222E990;
		  /* 8222E990h */ case   15:  		/* lwz R11, <#[R28 + 4]> */
		/* 8222E990h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8222E990h case   15:*/		return 0x8222E994;
		  /* 8222E994h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8222E994h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8222E994h case   16:*/		return 0x8222E998;
		  /* 8222E998h */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 8222E998h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8222E9C0;  }
		/* 8222E998h case   17:*/		return 0x8222E99C;
		  /* 8222E99Ch */ case   18:  		/* lwz R11, <#[R28]> */
		/* 8222E99Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222E99Ch case   18:*/		return 0x8222E9A0;
		  /* 8222E9A0h */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8222E9A0h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8222E9A0h case   19:*/		return 0x8222E9A4;
		  /* 8222E9A4h */ case   20:  		/* addic. R3, R11, -4 */
		/* 8222E9A4h case   20:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8222E9A4h case   20:*/		return 0x8222E9A8;
		  /* 8222E9A8h */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 8222E9A8h case   21:*/		if ( regs.CR[0].eq ) { return 0x8222E9C0;  }
		/* 8222E9A8h case   21:*/		return 0x8222E9AC;
		  /* 8222E9ACh */ case   22:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E9ACh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E9ACh case   22:*/		return 0x8222E9B0;
		  /* 8222E9B0h */ case   23:  		/* lwz R10, <#[R3 + 12]> */
		/* 8222E9B0h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222E9B0h case   23:*/		return 0x8222E9B4;
		  /* 8222E9B4h */ case   24:  		/* addi R11, R11, 1 */
		/* 8222E9B4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222E9B4h case   24:*/		return 0x8222E9B8;
		  /* 8222E9B8h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 8222E9B8h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8222E9B8h case   25:*/		return 0x8222E9BC;
		  /* 8222E9BCh */ case   26:  		/* bc 4, CR6_GT, 16 */
		/* 8222E9BCh case   26:*/		if ( !regs.CR[6].gt ) { return 0x8222E9CC;  }
		/* 8222E9BCh case   26:*/		return 0x8222E9C0;
	}
	return 0x8222E9C0;
} // Block from 8222E954h-8222E9C0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222E9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E9C0);
		  /* 8222E9C0h */ case    0:  		/* li R4, 1 */
		/* 8222E9C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8222E9C0h case    0:*/		return 0x8222E9C4;
		  /* 8222E9C4h */ case    1:  		/* mr R3, R28 */
		/* 8222E9C4h case    1:*/		regs.R3 = regs.R28;
		/* 8222E9C4h case    1:*/		return 0x8222E9C8;
		  /* 8222E9C8h */ case    2:  		/* bl -661760 */
		/* 8222E9C8h case    2:*/		regs.LR = 0x8222E9CC; return 0x8218D0C8;
		/* 8222E9C8h case    2:*/		return 0x8222E9CC;
	}
	return 0x8222E9CC;
} // Block from 8222E9C0h-8222E9CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222E9CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E9CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E9CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E9CC);
		  /* 8222E9CCh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222E9CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E9CCh case    0:*/		return 0x8222E9D0;
		  /* 8222E9D0h */ case    1:  		/* addi R10, R11, 4 */
		/* 8222E9D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222E9D0h case    1:*/		return 0x8222E9D4;
		  /* 8222E9D4h */ case    2:  		/* addi R9, R11, 1 */
		/* 8222E9D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8222E9D4h case    2:*/		return 0x8222E9D8;
		  /* 8222E9D8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8222E9D8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8222E9D8h case    3:*/		return 0x8222E9DC;
		  /* 8222E9DCh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8222E9DCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8222E9DCh case    4:*/		return 0x8222E9E0;
		  /* 8222E9E0h */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 8222E9E0h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8222E9E0h case    5:*/		return 0x8222E9E4;
	}
	return 0x8222E9E4;
} // Block from 8222E9CCh-8222E9E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222E9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E9E4);
		  /* 8222E9E4h */ case    0:  		/* addi R1, R1, 128 */
		/* 8222E9E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8222E9E4h case    0:*/		return 0x8222E9E8;
		  /* 8222E9E8h */ case    1:  		/* b -1693508 */
		/* 8222E9E8h case    1:*/		return 0x820912A4;
		/* 8222E9E8h case    1:*/		return 0x8222E9EC;
	}
	return 0x8222E9EC;
} // Block from 8222E9E4h-8222E9ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222E9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222E9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222E9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222E9EC);
		  /* 8222E9ECh */ case    0:  		/* lwz R31, <#[R31]> */
		/* 8222E9ECh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000000) );
		/* 8222E9ECh case    0:*/		return 0x8222E9F0;
		  /* 8222E9F0h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8222E9F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222E9F0h case    1:*/		return 0x8222E9F4;
		  /* 8222E9F4h */ case    2:  		/* bc 12, CR6_EQ, -136 */
		/* 8222E9F4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222E96C;  }
		/* 8222E9F4h case    2:*/		return 0x8222E9F8;
		  /* 8222E9F8h */ case    3:  		/* li R5, 0 */
		/* 8222E9F8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222E9F8h case    3:*/		return 0x8222E9FC;
		  /* 8222E9FCh */ case    4:  		/* mr R4, R31 */
		/* 8222E9FCh case    4:*/		regs.R4 = regs.R31;
		/* 8222E9FCh case    4:*/		return 0x8222EA00;
		  /* 8222EA00h */ case    5:  		/* mr R3, R27 */
		/* 8222EA00h case    5:*/		regs.R3 = regs.R27;
		/* 8222EA00h case    5:*/		return 0x8222EA04;
		  /* 8222EA04h */ case    6:  		/* bl -3228 */
		/* 8222EA04h case    6:*/		regs.LR = 0x8222EA08; return 0x8222DD68;
		/* 8222EA04h case    6:*/		return 0x8222EA08;
		  /* 8222EA08h */ case    7:  		/* lwz R31, <#[R31 + 4]> */
		/* 8222EA08h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8222EA08h case    7:*/		return 0x8222EA0C;
		  /* 8222EA0Ch */ case    8:  		/* b -28 */
		/* 8222EA0Ch case    8:*/		return 0x8222E9F0;
		/* 8222EA0Ch case    8:*/		return 0x8222EA10;
	}
	return 0x8222EA10;
} // Block from 8222E9ECh-8222EA10h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222EA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EA10);
		  /* 8222EA10h */ case    0:  		/* lwz R31, <#[R29]> */
		/* 8222EA10h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 8222EA10h case    0:*/		return 0x8222EA14;
		  /* 8222EA14h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8222EA14h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222EA14h case    1:*/		return 0x8222EA18;
		  /* 8222EA18h */ case    2:  		/* bc 12, CR6_EQ, -52 */
		/* 8222EA18h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222E9E4;  }
		/* 8222EA18h case    2:*/		return 0x8222EA1C;
		  /* 8222EA1Ch */ case    3:  		/* li R5, 0 */
		/* 8222EA1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222EA1Ch case    3:*/		return 0x8222EA20;
		  /* 8222EA20h */ case    4:  		/* mr R4, R31 */
		/* 8222EA20h case    4:*/		regs.R4 = regs.R31;
		/* 8222EA20h case    4:*/		return 0x8222EA24;
		  /* 8222EA24h */ case    5:  		/* mr R3, R27 */
		/* 8222EA24h case    5:*/		regs.R3 = regs.R27;
		/* 8222EA24h case    5:*/		return 0x8222EA28;
		  /* 8222EA28h */ case    6:  		/* bl -3264 */
		/* 8222EA28h case    6:*/		regs.LR = 0x8222EA2C; return 0x8222DD68;
		/* 8222EA28h case    6:*/		return 0x8222EA2C;
		  /* 8222EA2Ch */ case    7:  		/* lwz R31, <#[R31 + 4]> */
		/* 8222EA2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8222EA2Ch case    7:*/		return 0x8222EA30;
		  /* 8222EA30h */ case    8:  		/* b -28 */
		/* 8222EA30h case    8:*/		return 0x8222EA14;
		/* 8222EA30h case    8:*/		return 0x8222EA34;
		  /* 8222EA34h */ case    9:  		/* nop */
		/* 8222EA34h case    9:*/		cpu::op::nop();
		/* 8222EA34h case    9:*/		return 0x8222EA38;
	}
	return 0x8222EA38;
} // Block from 8222EA10h-8222EA38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222EA38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EA38);
		  /* 8222EA38h */ case    0:  		/* mfspr R12, LR */
		/* 8222EA38h case    0:*/		regs.R12 = regs.LR;
		/* 8222EA38h case    0:*/		return 0x8222EA3C;
		  /* 8222EA3Ch */ case    1:  		/* bl -1693716 */
		/* 8222EA3Ch case    1:*/		regs.LR = 0x8222EA40; return 0x82091228;
		/* 8222EA3Ch case    1:*/		return 0x8222EA40;
		  /* 8222EA40h */ case    2:  		/* stfd FR31, <#[R1 - 144]> */
		/* 8222EA40h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 8222EA40h case    2:*/		return 0x8222EA44;
		  /* 8222EA44h */ case    3:  		/* stwu R1, <#[R1 - 272]> */
		/* 8222EA44h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8222EA44h case    3:*/		return 0x8222EA48;
		  /* 8222EA48h */ case    4:  		/* addi R11, R1, 108 */
		/* 8222EA48h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x6C);
		/* 8222EA48h case    4:*/		return 0x8222EA4C;
		  /* 8222EA4Ch */ case    5:  		/* stw R9, <#[R1 + 340]> */
		/* 8222EA4Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000154) );
		/* 8222EA4Ch case    5:*/		return 0x8222EA50;
		  /* 8222EA50h */ case    6:  		/* li R17, 0 */
		/* 8222EA50h case    6:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 8222EA50h case    6:*/		return 0x8222EA54;
		  /* 8222EA54h */ case    7:  		/* mr R16, R3 */
		/* 8222EA54h case    7:*/		regs.R16 = regs.R3;
		/* 8222EA54h case    7:*/		return 0x8222EA58;
		  /* 8222EA58h */ case    8:  		/* stw R17, <#[R1 + 104]> */
		/* 8222EA58h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000068) );
		/* 8222EA58h case    8:*/		return 0x8222EA5C;
		  /* 8222EA5Ch */ case    9:  		/* mr R21, R4 */
		/* 8222EA5Ch case    9:*/		regs.R21 = regs.R4;
		/* 8222EA5Ch case    9:*/		return 0x8222EA60;
		  /* 8222EA60h */ case   10:  		/* mr R23, R5 */
		/* 8222EA60h case   10:*/		regs.R23 = regs.R5;
		/* 8222EA60h case   10:*/		return 0x8222EA64;
		  /* 8222EA64h */ case   11:  		/* mr R24, R7 */
		/* 8222EA64h case   11:*/		regs.R24 = regs.R7;
		/* 8222EA64h case   11:*/		return 0x8222EA68;
		  /* 8222EA68h */ case   12:  		/* stw R17, <#[R11]> */
		/* 8222EA68h case   12:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8222EA68h case   12:*/		return 0x8222EA6C;
		  /* 8222EA6Ch */ case   13:  		/* mr R19, R8 */
		/* 8222EA6Ch case   13:*/		regs.R19 = regs.R8;
		/* 8222EA6Ch case   13:*/		return 0x8222EA70;
		  /* 8222EA70h */ case   14:  		/* mr R22, R9 */
		/* 8222EA70h case   14:*/		regs.R22 = regs.R9;
		/* 8222EA70h case   14:*/		return 0x8222EA74;
		  /* 8222EA74h */ case   15:  		/* cmplwi CR6, R6, 0 */
		/* 8222EA74h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8222EA74h case   15:*/		return 0x8222EA78;
		  /* 8222EA78h */ case   16:  		/* mr R20, R17 */
		/* 8222EA78h case   16:*/		regs.R20 = regs.R17;
		/* 8222EA78h case   16:*/		return 0x8222EA7C;
		  /* 8222EA7Ch */ case   17:  		/* mr R18, R17 */
		/* 8222EA7Ch case   17:*/		regs.R18 = regs.R17;
		/* 8222EA7Ch case   17:*/		return 0x8222EA80;
		  /* 8222EA80h */ case   18:  		/* bc 12, CR6_EQ, 412 */
		/* 8222EA80h case   18:*/		if ( regs.CR[6].eq ) { return 0x8222EC1C;  }
		/* 8222EA80h case   18:*/		return 0x8222EA84;
		  /* 8222EA84h */ case   19:  		/* lwz R11, <#[R5 + 8]> */
		/* 8222EA84h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8222EA84h case   19:*/		return 0x8222EA88;
		  /* 8222EA88h */ case   20:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222EA88h case   20:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222EA88h case   20:*/		return 0x8222EA8C;
		  /* 8222EA8Ch */ case   21:  		/* cmpwi CR6, R11, 55 */
		/* 8222EA8Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000037);
		/* 8222EA8Ch case   21:*/		return 0x8222EA90;
		  /* 8222EA90h */ case   22:  		/* bc 12, CR6_EQ, 504 */
		/* 8222EA90h case   22:*/		if ( regs.CR[6].eq ) { return 0x8222EC88;  }
		/* 8222EA90h case   22:*/		return 0x8222EA94;
		  /* 8222EA94h */ case   23:  		/* cmpwi CR6, R11, 58 */
		/* 8222EA94h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003A);
		/* 8222EA94h case   23:*/		return 0x8222EA98;
		  /* 8222EA98h */ case   24:  		/* bc 4, CR6_GT, 388 */
		/* 8222EA98h case   24:*/		if ( !regs.CR[6].gt ) { return 0x8222EC1C;  }
		/* 8222EA98h case   24:*/		return 0x8222EA9C;
		  /* 8222EA9Ch */ case   25:  		/* cmpwi CR6, R11, 62 */
		/* 8222EA9Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 8222EA9Ch case   25:*/		return 0x8222EAA0;
		  /* 8222EAA0h */ case   26:  		/* bc 4, CR6_GT, 344 */
		/* 8222EAA0h case   26:*/		if ( !regs.CR[6].gt ) { return 0x8222EBF8;  }
		/* 8222EAA0h case   26:*/		return 0x8222EAA4;
		  /* 8222EAA4h */ case   27:  		/* cmpwi CR6, R11, 112 */
		/* 8222EAA4h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000070);
		/* 8222EAA4h case   27:*/		return 0x8222EAA8;
		  /* 8222EAA8h */ case   28:  		/* bc 4, CR6_EQ, 372 */
		/* 8222EAA8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8222EC1C;  }
		/* 8222EAA8h case   28:*/		return 0x8222EAAC;
		  /* 8222EAACh */ case   29:  		/* addi R25, R5, 4 */
		/* 8222EAACh case   29:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R5,0x4);
		/* 8222EAACh case   29:*/		return 0x8222EAB0;
		  /* 8222EAB0h */ case   30:  		/* lwz R26, <#[R25]> */
		/* 8222EAB0h case   30:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 8222EAB0h case   30:*/		return 0x8222EAB4;
		  /* 8222EAB4h */ case   31:  		/* cmplwi CR6, R26, 0 */
		/* 8222EAB4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222EAB4h case   31:*/		return 0x8222EAB8;
		  /* 8222EAB8h */ case   32:  		/* bc 12, CR6_EQ, 356 */
		/* 8222EAB8h case   32:*/		if ( regs.CR[6].eq ) { return 0x8222EC1C;  }
		/* 8222EAB8h case   32:*/		return 0x8222EABC;
		  /* 8222EABCh */ case   33:  		/* lwz R28, <#[R26 + 16]> */
		/* 8222EABCh case   33:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000010) );
		/* 8222EABCh case   33:*/		return 0x8222EAC0;
		  /* 8222EAC0h */ case   34:  		/* cmplwi CR6, R28, 0 */
		/* 8222EAC0h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222EAC0h case   34:*/		return 0x8222EAC4;
		  /* 8222EAC4h */ case   35:  		/* bc 12, CR6_EQ, 288 */
		/* 8222EAC4h case   35:*/		if ( regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EAC4h case   35:*/		return 0x8222EAC8;
		  /* 8222EAC8h */ case   36:  		/* lwz R11, <#[R28 + 8]> */
		/* 8222EAC8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8222EAC8h case   36:*/		return 0x8222EACC;
		  /* 8222EACCh */ case   37:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222EACCh case   37:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222EACCh case   37:*/		return 0x8222EAD0;
		  /* 8222EAD0h */ case   38:  		/* cmplwi CR6, R11, 14336 */
		/* 8222EAD0h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8222EAD0h case   38:*/		return 0x8222EAD4;
		  /* 8222EAD4h */ case   39:  		/* bc 4, CR6_EQ, 272 */
		/* 8222EAD4h case   39:*/		if ( !regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EAD4h case   39:*/		return 0x8222EAD8;
		  /* 8222EAD8h */ case   40:  		/* lwz R11, <#[R26]> */
		/* 8222EAD8h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8222EAD8h case   40:*/		return 0x8222EADC;
		  /* 8222EADCh */ case   41:  		/* rlwinm R27, R22, 0, 30, 31 */
		/* 8222EADCh case   41:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R27,regs.R22);
		/* 8222EADCh case   41:*/		return 0x8222EAE0;
		  /* 8222EAE0h */ case   42:  		/* lfd FR1, <#[R24]> */
		/* 8222EAE0h case   42:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R24 + 0x00000000) );
		/* 8222EAE0h case   42:*/		return 0x8222EAE4;
		  /* 8222EAE4h */ case   43:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 8222EAE4h case   43:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 8222EAE4h case   43:*/		return 0x8222EAE8;
		  /* 8222EAE8h */ case   44:  		/* mr R4, R27 */
		/* 8222EAE8h case   44:*/		regs.R4 = regs.R27;
		/* 8222EAE8h case   44:*/		return 0x8222EAEC;
		  /* 8222EAECh */ case   45:  		/* bl -54900 */
		/* 8222EAECh case   45:*/		regs.LR = 0x8222EAF0; return 0x82221478;
		/* 8222EAECh case   45:*/		return 0x8222EAF0;
		  /* 8222EAF0h */ case   46:  		/* lwz R29, <#[R28]> */
		/* 8222EAF0h case   46:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 8222EAF0h case   46:*/		return 0x8222EAF4;
		  /* 8222EAF4h */ case   47:  		/* fmr FR31, FR1 */
		/* 8222EAF4h case   47:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8222EAF4h case   47:*/		return 0x8222EAF8;
		  /* 8222EAF8h */ case   48:  		/* cmplwi CR6, R29, 0 */
		/* 8222EAF8h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222EAF8h case   48:*/		return 0x8222EAFC;
		  /* 8222EAFCh */ case   49:  		/* bc 12, CR6_EQ, 176 */
		/* 8222EAFCh case   49:*/		if ( regs.CR[6].eq ) { return 0x8222EBAC;  }
		/* 8222EAFCh case   49:*/		return 0x8222EB00;
		  /* 8222EB00h */ case   50:  		/* lwz R11, <#[R29 + 12]> */
		/* 8222EB00h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222EB00h case   50:*/		return 0x8222EB04;
		  /* 8222EB04h */ case   51:  		/* lwz R10, <#[R11 + 8]> */
		/* 8222EB04h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8222EB04h case   51:*/		return 0x8222EB08;
		  /* 8222EB08h */ case   52:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8222EB08h case   52:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8222EB08h case   52:*/		return 0x8222EB0C;
		  /* 8222EB0Ch */ case   53:  		/* cmplwi CR6, R10, 14336 */
		/* 8222EB0Ch case   53:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8222EB0Ch case   53:*/		return 0x8222EB10;
		  /* 8222EB10h */ case   54:  		/* bc 4, CR6_EQ, 212 */
		/* 8222EB10h case   54:*/		if ( !regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EB10h case   54:*/		return 0x8222EB14;
		  /* 8222EB14h */ case   55:  		/* lwz R11, <#[R11]> */
		/* 8222EB14h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222EB14h case   55:*/		return 0x8222EB18;
		  /* 8222EB18h */ case   56:  		/* cmplwi CR6, R11, 0 */
		/* 8222EB18h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222EB18h case   56:*/		return 0x8222EB1C;
		  /* 8222EB1Ch */ case   57:  		/* bc 12, CR6_EQ, 200 */
		/* 8222EB1Ch case   57:*/		if ( regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EB1Ch case   57:*/		return 0x8222EB20;
		  /* 8222EB20h */ case   58:  		/* lwz R10, <#[R11 + 4]> */
		/* 8222EB20h case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8222EB20h case   58:*/		return 0x8222EB24;
		  /* 8222EB24h */ case   59:  		/* cmpwi CR6, R10, 0 */
		/* 8222EB24h case   59:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8222EB24h case   59:*/		return 0x8222EB28;
		  /* 8222EB28h */ case   60:  		/* bc 4, CR6_EQ, 188 */
		/* 8222EB28h case   60:*/		if ( !regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EB28h case   60:*/		return 0x8222EB2C;
		  /* 8222EB2Ch */ case   61:  		/* lwz R31, <#[R11 + 12]> */
		/* 8222EB2Ch case   61:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222EB2Ch case   61:*/		return 0x8222EB30;
		  /* 8222EB30h */ case   62:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222EB30h case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222EB30h case   62:*/		return 0x8222EB34;
		  /* 8222EB34h */ case   63:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8222EB34h case   63:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8222EB34h case   63:*/		return 0x8222EB38;
		  /* 8222EB38h */ case   64:  		/* cmplwi CR6, R10, 16000 */
		/* 8222EB38h case   64:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 8222EB38h case   64:*/		return 0x8222EB3C;
		  /* 8222EB3Ch */ case   65:  		/* bc 4, CR6_EQ, 168 */
		/* 8222EB3Ch case   65:*/		if ( !regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EB3Ch case   65:*/		return 0x8222EB40;
		  /* 8222EB40h */ case   66:  		/* lwz R11, <#[R11]> */
		/* 8222EB40h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222EB40h case   66:*/		return 0x8222EB44;
		  /* 8222EB44h */ case   67:  		/* mr R3, R31 */
		/* 8222EB44h case   67:*/		regs.R3 = regs.R31;
		/* 8222EB44h case   67:*/		return 0x8222EB48;
		  /* 8222EB48h */ case   68:  		/* rlwinm R30, R11, 27, 30, 31 */
		/* 8222EB48h case   68:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R30,regs.R11);
		/* 8222EB48h case   68:*/		return 0x8222EB4C;
		  /* 8222EB4Ch */ case   69:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 8222EB4Ch case   69:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 8222EB4Ch case   69:*/		return 0x8222EB50;
		  /* 8222EB50h */ case   70:  		/* mr R4, R30 */
		/* 8222EB50h case   70:*/		regs.R4 = regs.R30;
		/* 8222EB50h case   70:*/		return 0x8222EB54;
		  /* 8222EB54h */ case   71:  		/* bl -54452 */
		/* 8222EB54h case   71:*/		regs.LR = 0x8222EB58; return 0x822216A0;
		/* 8222EB54h case   71:*/		return 0x8222EB58;
		  /* 8222EB58h */ case   72:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 8222EB58h case   72:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 8222EB58h case   72:*/		return 0x8222EB5C;
		  /* 8222EB5Ch */ case   73:  		/* lwz R10, <#[R29]> */
		/* 8222EB5Ch case   73:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8222EB5Ch case   73:*/		return 0x8222EB60;
		  /* 8222EB60h */ case   74:  		/* rlwinm R5, R10, 0, 27, 31 */
		/* 8222EB60h case   74:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R10);
		/* 8222EB60h case   74:*/		return 0x8222EB64;
		  /* 8222EB64h */ case   75:  		/* lwz R11, <#[R11]> */
		/* 8222EB64h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222EB64h case   75:*/		return 0x8222EB68;
		  /* 8222EB68h */ case   76:  		/* lwz R11, <#[R11 + 148]> */
		/* 8222EB68h case   76:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000094) );
		/* 8222EB68h case   76:*/		return 0x8222EB6C;
		  /* 8222EB6Ch */ case   77:  		/* lwz R11, <#[R11 + 40]> */
		/* 8222EB6Ch case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8222EB6Ch case   77:*/		return 0x8222EB70;
		  /* 8222EB70h */ case   78:  		/* nor R11, R11, R11 */
		/* 8222EB70h case   78:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8222EB70h case   78:*/		return 0x8222EB74;
		  /* 8222EB74h */ case   79:  		/* rlwinm. R11, R11, 18, 31, 31 */
		/* 8222EB74h case   79:*/		cpu::op::rlwinm<1,18,31,31>(regs,&regs.R11,regs.R11);
		/* 8222EB74h case   79:*/		return 0x8222EB78;
		  /* 8222EB78h */ case   80:  		/* bc 4, CR0_EQ, 12 */
		/* 8222EB78h case   80:*/		if ( !regs.CR[0].eq ) { return 0x8222EB84;  }
		/* 8222EB78h case   80:*/		return 0x8222EB7C;
		  /* 8222EB7Ch */ case   81:  		/* mr R4, R17 */
		/* 8222EB7Ch case   81:*/		regs.R4 = regs.R17;
		/* 8222EB7Ch case   81:*/		return 0x8222EB80;
		  /* 8222EB80h */ case   82:  		/* b 24 */
		/* 8222EB80h case   82:*/		return 0x8222EB98;
		/* 8222EB80h case   82:*/		return 0x8222EB84;
	}
	return 0x8222EB84;
} // Block from 8222EA38h-8222EB84h (83 instructions)

//////////////////////////////////////////////////////
// Block at 8222EB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EB84);
		  /* 8222EB84h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8222EB84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8222EB84h case    0:*/		return 0x8222EB88;
		  /* 8222EB88h */ case    1:  		/* rlwinm R10, R30, 1, 0, 30 */
		/* 8222EB88h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R30);
		/* 8222EB88h case    1:*/		return 0x8222EB8C;
		  /* 8222EB8Ch */ case    2:  		/* rlwinm R11, R11, 30, 24, 31 */
		/* 8222EB8Ch case    2:*/		cpu::op::rlwinm<0,30,24,31>(regs,&regs.R11,regs.R11);
		/* 8222EB8Ch case    2:*/		return 0x8222EB90;
		  /* 8222EB90h */ case    3:  		/* srw R11, R11, R10 */
		/* 8222EB90h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222EB90h case    3:*/		return 0x8222EB94;
		  /* 8222EB94h */ case    4:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 8222EB94h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 8222EB94h case    4:*/		return 0x8222EB98;
	}
	return 0x8222EB98;
} // Block from 8222EB84h-8222EB98h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222EB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EB98);
		  /* 8222EB98h */ case    0:  		/* bl -55072 */
		/* 8222EB98h case    0:*/		regs.LR = 0x8222EB9C; return 0x82221478;
		/* 8222EB98h case    0:*/		return 0x8222EB9C;
		  /* 8222EB9Ch */ case    1:  		/* fcmpu CR6, FR31, FR1 */
		/* 8222EB9Ch case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR1);
		/* 8222EB9Ch case    1:*/		return 0x8222EBA0;
		  /* 8222EBA0h */ case    2:  		/* bc 4, CR6_EQ, 68 */
		/* 8222EBA0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222EBE4;  }
		/* 8222EBA0h case    2:*/		return 0x8222EBA4;
		  /* 8222EBA4h */ case    3:  		/* lwz R29, <#[R29 + 4]> */
		/* 8222EBA4h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 8222EBA4h case    3:*/		return 0x8222EBA8;
		  /* 8222EBA8h */ case    4:  		/* b -176 */
		/* 8222EBA8h case    4:*/		return 0x8222EAF8;
		/* 8222EBA8h case    4:*/		return 0x8222EBAC;
	}
	return 0x8222EBAC;
} // Block from 8222EB98h-8222EBACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222EBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EBAC);
		  /* 8222EBACh */ case    0:  		/* mr R4, R21 */
		/* 8222EBACh case    0:*/		regs.R4 = regs.R21;
		/* 8222EBACh case    0:*/		return 0x8222EBB0;
		  /* 8222EBB0h */ case    1:  		/* mr R3, R28 */
		/* 8222EBB0h case    1:*/		regs.R3 = regs.R28;
		/* 8222EBB0h case    1:*/		return 0x8222EBB4;
		  /* 8222EBB4h */ case    2:  		/* bl -45508 */
		/* 8222EBB4h case    2:*/		regs.LR = 0x8222EBB8; return 0x822239F0;
		/* 8222EBB4h case    2:*/		return 0x8222EBB8;
		  /* 8222EBB8h */ case    3:  		/* mr R5, R27 */
		/* 8222EBB8h case    3:*/		regs.R5 = regs.R27;
		/* 8222EBB8h case    3:*/		return 0x8222EBBC;
		  /* 8222EBBCh */ case    4:  		/* mr R3, R21 */
		/* 8222EBBCh case    4:*/		regs.R3 = regs.R21;
		/* 8222EBBCh case    4:*/		return 0x8222EBC0;
		  /* 8222EBC0h */ case    5:  		/* fmr FR1, FR31 */
		/* 8222EBC0h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8222EBC0h case    5:*/		return 0x8222EBC4;
		  /* 8222EBC4h */ case    6:  		/* bl -16420 */
		/* 8222EBC4h case    6:*/		regs.LR = 0x8222EBC8; return 0x8222ABA0;
		/* 8222EBC4h case    6:*/		return 0x8222EBC8;
		  /* 8222EBC8h */ case    7:  		/* mr R4, R3 */
		/* 8222EBC8h case    7:*/		regs.R4 = regs.R3;
		/* 8222EBC8h case    7:*/		return 0x8222EBCC;
		  /* 8222EBCCh */ case    8:  		/* li R5, 0 */
		/* 8222EBCCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222EBCCh case    8:*/		return 0x8222EBD0;
		  /* 8222EBD0h */ case    9:  		/* mr R3, R21 */
		/* 8222EBD0h case    9:*/		regs.R3 = regs.R21;
		/* 8222EBD0h case    9:*/		return 0x8222EBD4;
		  /* 8222EBD4h */ case   10:  		/* bl -748228 */
		/* 8222EBD4h case   10:*/		regs.LR = 0x8222EBD8; return 0x82178110;
		/* 8222EBD4h case   10:*/		return 0x8222EBD8;
		  /* 8222EBD8h */ case   11:  		/* mr R4, R3 */
		/* 8222EBD8h case   11:*/		regs.R4 = regs.R3;
		/* 8222EBD8h case   11:*/		return 0x8222EBDC;
		  /* 8222EBDCh */ case   12:  		/* mr R3, R28 */
		/* 8222EBDCh case   12:*/		regs.R3 = regs.R28;
		/* 8222EBDCh case   12:*/		return 0x8222EBE0;
		  /* 8222EBE0h */ case   13:  		/* bl -748056 */
		/* 8222EBE0h case   13:*/		regs.LR = 0x8222EBE4; return 0x821781C8;
		/* 8222EBE0h case   13:*/		return 0x8222EBE4;
	}
	return 0x8222EBE4;
} // Block from 8222EBACh-8222EBE4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8222EBE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EBE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EBE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EBE4);
		  /* 8222EBE4h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 8222EBE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8222EBE4h case    0:*/		return 0x8222EBE8;
		  /* 8222EBE8h */ case    1:  		/* cmplw CR6, R11, R26 */
		/* 8222EBE8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8222EBE8h case    1:*/		return 0x8222EBEC;
		  /* 8222EBECh */ case    2:  		/* bc 4, CR6_EQ, -316 */
		/* 8222EBECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222EAB0;  }
		/* 8222EBECh case    2:*/		return 0x8222EBF0;
		  /* 8222EBF0h */ case    3:  		/* addi R25, R26, 8 */
		/* 8222EBF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R26,0x8);
		/* 8222EBF0h case    3:*/		return 0x8222EBF4;
		  /* 8222EBF4h */ case    4:  		/* b -324 */
		/* 8222EBF4h case    4:*/		return 0x8222EAB0;
		/* 8222EBF4h case    4:*/		return 0x8222EBF8;
	}
	return 0x8222EBF8;
} // Block from 8222EBE4h-8222EBF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222EBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EBF8);
		  /* 8222EBF8h */ case    0:  		/* lis R11, -32256 */
		/* 8222EBF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8222EBF8h case    0:*/		return 0x8222EBFC;
		  /* 8222EBFCh */ case    1:  		/* lfd FR13, <#[R24]> */
		/* 8222EBFCh case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R24 + 0x00000000) );
		/* 8222EBFCh case    1:*/		return 0x8222EC00;
		  /* 8222EC00h */ case    2:  		/* li R20, 1 */
		/* 8222EC00h case    2:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8222EC00h case    2:*/		return 0x8222EC04;
		  /* 8222EC04h */ case    3:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 8222EC04h case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 8222EC04h case    3:*/		return 0x8222EC08;
		  /* 8222EC08h */ case    4:  		/* li R11, 1 */
		/* 8222EC08h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222EC08h case    4:*/		return 0x8222EC0C;
		  /* 8222EC0Ch */ case    5:  		/* fcmpu CR6, FR13, FR0 */
		/* 8222EC0Ch case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8222EC0Ch case    5:*/		return 0x8222EC10;
		  /* 8222EC10h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 8222EC10h case    6:*/		if ( regs.CR[6].eq ) { return 0x8222EC18;  }
		/* 8222EC10h case    6:*/		return 0x8222EC14;
		  /* 8222EC14h */ case    7:  		/* mr R11, R17 */
		/* 8222EC14h case    7:*/		regs.R11 = regs.R17;
		/* 8222EC14h case    7:*/		return 0x8222EC18;
	}
	return 0x8222EC18;
} // Block from 8222EBF8h-8222EC18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8222EC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EC18);
		  /* 8222EC18h */ case    0:  		/* rlwinm R18, R11, 0, 24, 31 */
		/* 8222EC18h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R18,regs.R11);
		/* 8222EC18h case    0:*/		return 0x8222EC1C;
	}
	return 0x8222EC1C;
} // Block from 8222EC18h-8222EC1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222EC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EC1C);
		  /* 8222EC1Ch */ case    0:  		/* mr R10, R17 */
		/* 8222EC1Ch case    0:*/		regs.R10 = regs.R17;
		/* 8222EC1Ch case    0:*/		return 0x8222EC20;
		  /* 8222EC20h */ case    1:  		/* addi R8, R1, 112 */
		/* 8222EC20h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 8222EC20h case    1:*/		return 0x8222EC24;
		  /* 8222EC24h */ case    2:  		/* mr R9, R24 */
		/* 8222EC24h case    2:*/		regs.R9 = regs.R24;
		/* 8222EC24h case    2:*/		return 0x8222EC28;
		  /* 8222EC28h */ case    3:  		/* addi R11, R10, 1 */
		/* 8222EC28h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x1);
		/* 8222EC28h case    3:*/		return 0x8222EC2C;
		  /* 8222EC2Ch */ case    4:  		/* li R7, 2 */
		/* 8222EC2Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8222EC2Ch case    4:*/		return 0x8222EC30;
		  /* 8222EC30h */ case    5:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8222EC30h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8222EC30h case    5:*/		return 0x8222EC34;
		  /* 8222EC34h */ case    6:  		/* rlwinm R6, R10, 29, 3, 29 */
		/* 8222EC34h case    6:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R6,regs.R10);
		/* 8222EC34h case    6:*/		return 0x8222EC38;
		  /* 8222EC38h */ case    7:  		/* addi R5, R1, 340 */
		/* 8222EC38h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x154);
		/* 8222EC38h case    7:*/		return 0x8222EC3C;
		  /* 8222EC3Ch */ case    8:  		/* slw R11, R7, R11 */
		/* 8222EC3Ch case    8:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8222EC3Ch case    8:*/		return 0x8222EC40;
		  /* 8222EC40h */ case    9:  		/* lwzx R7, <#[R6 + R5]> */
		/* 8222EC40h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 8222EC40h case    9:*/		return 0x8222EC44;
		  /* 8222EC44h */ case   10:  		/* addi R11, R11, -1 */
		/* 8222EC44h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222EC44h case   10:*/		return 0x8222EC48;
		  /* 8222EC48h */ case   11:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 8222EC48h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 8222EC48h case   11:*/		return 0x8222EC4C;
		  /* 8222EC4Ch */ case   12:  		/* li R5, -1 */
		/* 8222EC4Ch case   12:*/		cpu::op::li<0>(regs,&regs.R5,0xFFFFFFFF);
		/* 8222EC4Ch case   12:*/		return 0x8222EC50;
		  /* 8222EC50h */ case   13:  		/* and R11, R11, R7 */
		/* 8222EC50h case   13:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8222EC50h case   13:*/		return 0x8222EC54;
		  /* 8222EC54h */ case   14:  		/* slw R7, R5, R6 */
		/* 8222EC54h case   14:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R5,regs.R6);
		/* 8222EC54h case   14:*/		return 0x8222EC58;
		  /* 8222EC58h */ case   15:  		/* and R11, R11, R7 */
		/* 8222EC58h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8222EC58h case   15:*/		return 0x8222EC5C;
		  /* 8222EC5Ch */ case   16:  		/* srw R11, R11, R6 */
		/* 8222EC5Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8222EC5Ch case   16:*/		return 0x8222EC60;
		  /* 8222EC60h */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 8222EC60h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8222EC60h case   17:*/		return 0x8222EC64;
		  /* 8222EC64h */ case   18:  		/* bc 12, CR6_LT, 388 */
		/* 8222EC64h case   18:*/		if ( regs.CR[6].lt ) { return 0x8222EDE8;  }
		/* 8222EC64h case   18:*/		return 0x8222EC68;
		  /* 8222EC68h */ case   19:  		/* bc 12, CR6_EQ, 360 */
		/* 8222EC68h case   19:*/		if ( regs.CR[6].eq ) { return 0x8222EDD0;  }
		/* 8222EC68h case   19:*/		return 0x8222EC6C;
		  /* 8222EC6Ch */ case   20:  		/* cmplwi CR6, R11, 3 */
		/* 8222EC6Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8222EC6Ch case   20:*/		return 0x8222EC70;
		  /* 8222EC70h */ case   21:  		/* bc 4, CR6_LT, 660 */
		/* 8222EC70h case   21:*/		if ( !regs.CR[6].lt ) { return 0x8222EF04;  }
		/* 8222EC70h case   21:*/		return 0x8222EC74;
		  /* 8222EC74h */ case   22:  		/* lfd FR0, <#[R9]> */
		/* 8222EC74h case   22:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000000) );
		/* 8222EC74h case   22:*/		return 0x8222EC78;
		  /* 8222EC78h */ case   23:  		/* fctidz FR0, FR0 */
		/* 8222EC78h case   23:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8222EC78h case   23:*/		return 0x8222EC7C;
		  /* 8222EC7Ch */ case   24:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8222EC7Ch case   24:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8222EC7Ch case   24:*/		return 0x8222EC80;
		  /* 8222EC80h */ case   25:  		/* lwz R11, <#[R1 + 92]> */
		/* 8222EC80h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222EC80h case   25:*/		return 0x8222EC84;
		  /* 8222EC84h */ case   26:  		/* b 348 */
		/* 8222EC84h case   26:*/		return 0x8222EDE0;
		/* 8222EC84h case   26:*/		return 0x8222EC88;
	}
	return 0x8222EC88;
} // Block from 8222EC1Ch-8222EC88h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222EC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EC88);
		  /* 8222EC88h */ case    0:  		/* lwz R26, <#[R23 + 4]> */
		/* 8222EC88h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R23 + 0x00000004) );
		/* 8222EC88h case    0:*/		return 0x8222EC8C;
		  /* 8222EC8Ch */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 8222EC8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222EC8Ch case    1:*/		return 0x8222EC90;
		  /* 8222EC90h */ case    2:  		/* bc 12, CR6_EQ, 648 */
		/* 8222EC90h case    2:*/		if ( regs.CR[6].eq ) { return 0x8222EF18;  }
		/* 8222EC90h case    2:*/		return 0x8222EC94;
		  /* 8222EC94h */ case    3:  		/* lwz R29, <#[R26 + 16]> */
		/* 8222EC94h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000010) );
		/* 8222EC94h case    3:*/		return 0x8222EC98;
		  /* 8222EC98h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 8222EC98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222EC98h case    4:*/		return 0x8222EC9C;
		  /* 8222EC9Ch */ case    5:  		/* bc 12, CR6_EQ, 300 */
		/* 8222EC9Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8222EDC8;  }
		/* 8222EC9Ch case    5:*/		return 0x8222ECA0;
		  /* 8222ECA0h */ case    6:  		/* lwz R11, <#[R29 + 8]> */
		/* 8222ECA0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222ECA0h case    6:*/		return 0x8222ECA4;
		  /* 8222ECA4h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222ECA4h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222ECA4h case    7:*/		return 0x8222ECA8;
		  /* 8222ECA8h */ case    8:  		/* cmplwi CR6, R11, 15104 */
		/* 8222ECA8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 8222ECA8h case    8:*/		return 0x8222ECAC;
		  /* 8222ECACh */ case    9:  		/* bc 4, CR6_EQ, 284 */
		/* 8222ECACh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8222EDC8;  }
		/* 8222ECACh case    9:*/		return 0x8222ECB0;
		  /* 8222ECB0h */ case   10:  		/* lwz R27, <#[R29 + 44]> */
		/* 8222ECB0h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + 0x0000002C) );
		/* 8222ECB0h case   10:*/		return 0x8222ECB4;
		  /* 8222ECB4h */ case   11:  		/* lwz R31, <#[R27 + 12]> */
		/* 8222ECB4h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x0000000C) );
		/* 8222ECB4h case   11:*/		return 0x8222ECB8;
		  /* 8222ECB8h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222ECB8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222ECB8h case   12:*/		return 0x8222ECBC;
		  /* 8222ECBCh */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222ECBCh case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222ECBCh case   13:*/		return 0x8222ECC0;
		  /* 8222ECC0h */ case   14:  		/* cmplwi CR6, R11, 15872 */
		/* 8222ECC0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 8222ECC0h case   14:*/		return 0x8222ECC4;
		  /* 8222ECC4h */ case   15:  		/* bc 4, CR6_EQ, 260 */
		/* 8222ECC4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8222EDC8;  }
		/* 8222ECC4h case   15:*/		return 0x8222ECC8;
		  /* 8222ECC8h */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222ECC8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222ECC8h case   16:*/		return 0x8222ECCC;
		  /* 8222ECCCh */ case   17:  		/* mr R3, R21 */
		/* 8222ECCCh case   17:*/		regs.R3 = regs.R21;
		/* 8222ECCCh case   17:*/		return 0x8222ECD0;
		  /* 8222ECD0h */ case   18:  		/* lfd FR31, <#[R24]> */
		/* 8222ECD0h case   18:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R24 + 0x00000000) );
		/* 8222ECD0h case   18:*/		return 0x8222ECD4;
		  /* 8222ECD4h */ case   19:  		/* addi R30, R31, -8 */
		/* 8222ECD4h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xFFFFFFF8);
		/* 8222ECD4h case   19:*/		return 0x8222ECD8;
		  /* 8222ECD8h */ case   20:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8222ECD8h case   20:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8222ECD8h case   20:*/		return 0x8222ECDC;
		  /* 8222ECDCh */ case   21:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8222ECDCh case   21:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8222ECDCh case   21:*/		return 0x8222ECE0;
		  /* 8222ECE0h */ case   22:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8222ECE0h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8222ECE0h case   22:*/		return 0x8222ECE4;
		  /* 8222ECE4h */ case   23:  		/* bl -829620 */
		/* 8222ECE4h case   23:*/		regs.LR = 0x8222ECE8; return 0x82164430;
		/* 8222ECE4h case   23:*/		return 0x8222ECE8;
		  /* 8222ECE8h */ case   24:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222ECE8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222ECE8h case   24:*/		return 0x8222ECEC;
		  /* 8222ECECh */ case   25:  		/* lwzx R10, <#[R3 + R30]> */
		/* 8222ECECh case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R30 + 0x00000000) );
		/* 8222ECECh case   25:*/		return 0x8222ECF0;
		  /* 8222ECF0h */ case   26:  		/* mr R3, R21 */
		/* 8222ECF0h case   26:*/		regs.R3 = regs.R21;
		/* 8222ECF0h case   26:*/		return 0x8222ECF4;
		  /* 8222ECF4h */ case   27:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8222ECF4h case   27:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8222ECF4h case   27:*/		return 0x8222ECF8;
		  /* 8222ECF8h */ case   28:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8222ECF8h case   28:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8222ECF8h case   28:*/		return 0x8222ECFC;
		  /* 8222ECFCh */ case   29:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8222ECFCh case   29:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8222ECFCh case   29:*/		return 0x8222ED00;
		  /* 8222ED00h */ case   30:  		/* rlwinm R31, R10, 17, 18, 31 */
		/* 8222ED00h case   30:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R31,regs.R10);
		/* 8222ED00h case   30:*/		return 0x8222ED04;
		  /* 8222ED04h */ case   31:  		/* bl -829652 */
		/* 8222ED04h case   31:*/		regs.LR = 0x8222ED08; return 0x82164430;
		/* 8222ED04h case   31:*/		return 0x8222ED08;
		  /* 8222ED08h */ case   32:  		/* lwzx R10, <#[R3 + R30]> */
		/* 8222ED08h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R30 + 0x00000000) );
		/* 8222ED08h case   32:*/		return 0x8222ED0C;
		  /* 8222ED0Ch */ case   33:  		/* fctidz FR0, FR31 */
		/* 8222ED0Ch case   33:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR31);
		/* 8222ED0Ch case   33:*/		return 0x8222ED10;
		  /* 8222ED10h */ case   34:  		/* stfd FR0, <#[R1 + 96]> */
		/* 8222ED10h case   34:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 8222ED10h case   34:*/		return 0x8222ED14;
		  /* 8222ED14h */ case   35:  		/* lwz R11, <#[R1 + 100]> */
		/* 8222ED14h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8222ED14h case   35:*/		return 0x8222ED18;
		  /* 8222ED18h */ case   36:  		/* li R6, 0 */
		/* 8222ED18h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8222ED18h case   36:*/		return 0x8222ED1C;
		  /* 8222ED1Ch */ case   37:  		/* rlwinm R4, R10, 0, 17, 31 */
		/* 8222ED1Ch case   37:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R4,regs.R10);
		/* 8222ED1Ch case   37:*/		return 0x8222ED20;
		  /* 8222ED20h */ case   38:  		/* add R5, R11, R31 */
		/* 8222ED20h case   38:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R31);
		/* 8222ED20h case   38:*/		return 0x8222ED24;
		  /* 8222ED24h */ case   39:  		/* mr R3, R21 */
		/* 8222ED24h case   39:*/		regs.R3 = regs.R21;
		/* 8222ED24h case   39:*/		return 0x8222ED28;
		  /* 8222ED28h */ case   40:  		/* bl -32776 */
		/* 8222ED28h case   40:*/		regs.LR = 0x8222ED2C; return 0x82226D20;
		/* 8222ED28h case   40:*/		return 0x8222ED2C;
		  /* 8222ED2Ch */ case   41:  		/* or. R30, R3, R3 */
		/* 8222ED2Ch case   41:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8222ED2Ch case   41:*/		return 0x8222ED30;
		  /* 8222ED30h */ case   42:  		/* bc 12, CR0_EQ, 152 */
		/* 8222ED30h case   42:*/		if ( regs.CR[0].eq ) { return 0x8222EDC8;  }
		/* 8222ED30h case   42:*/		return 0x8222ED34;
		  /* 8222ED34h */ case   43:  		/* addi R28, R29, 4 */
		/* 8222ED34h case   43:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x4);
		/* 8222ED34h case   43:*/		return 0x8222ED38;
		  /* 8222ED38h */ case   44:  		/* lwz R31, <#[R28]> */
		/* 8222ED38h case   44:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8222ED38h case   44:*/		return 0x8222ED3C;
		  /* 8222ED3Ch */ case   45:  		/* cmplwi CR6, R31, 0 */
		/* 8222ED3Ch case   45:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222ED3Ch case   45:*/		return 0x8222ED40;
		  /* 8222ED40h */ case   46:  		/* bc 12, CR6_EQ, 136 */
		/* 8222ED40h case   46:*/		if ( regs.CR[6].eq ) { return 0x8222EDC8;  }
		/* 8222ED40h case   46:*/		return 0x8222ED44;
		  /* 8222ED44h */ case   47:  		/* lwz R11, <#[R31 + 16]> */
		/* 8222ED44h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8222ED44h case   47:*/		return 0x8222ED48;
		  /* 8222ED48h */ case   48:  		/* cmplwi CR6, R11, 0 */
		/* 8222ED48h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222ED48h case   48:*/		return 0x8222ED4C;
		  /* 8222ED4Ch */ case   49:  		/* bc 12, CR6_EQ, 104 */
		/* 8222ED4Ch case   49:*/		if ( regs.CR[6].eq ) { return 0x8222EDB4;  }
		/* 8222ED4Ch case   49:*/		return 0x8222ED50;
		  /* 8222ED50h */ case   50:  		/* lwz R11, <#[R31]> */
		/* 8222ED50h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222ED50h case   50:*/		return 0x8222ED54;
		  /* 8222ED54h */ case   51:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8222ED54h case   51:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8222ED54h case   51:*/		return 0x8222ED58;
		  /* 8222ED58h */ case   52:  		/* bc 4, CR0_EQ, 16 */
		/* 8222ED58h case   52:*/		if ( !regs.CR[0].eq ) { return 0x8222ED68;  }
		/* 8222ED58h case   52:*/		return 0x8222ED5C;
		  /* 8222ED5Ch */ case   53:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 8222ED5Ch case   53:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 8222ED5Ch case   53:*/		return 0x8222ED60;
		  /* 8222ED60h */ case   54:  		/* mr R10, R17 */
		/* 8222ED60h case   54:*/		regs.R10 = regs.R17;
		/* 8222ED60h case   54:*/		return 0x8222ED64;
		  /* 8222ED64h */ case   55:  		/* bc 12, CR0_EQ, 8 */
		/* 8222ED64h case   55:*/		if ( regs.CR[0].eq ) { return 0x8222ED6C;  }
		/* 8222ED64h case   55:*/		return 0x8222ED68;
	}
	return 0x8222ED68;
} // Block from 8222EC88h-8222ED68h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8222ED68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222ED68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222ED68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222ED68);
		  /* 8222ED68h */ case    0:  		/* li R10, 1 */
		/* 8222ED68h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222ED68h case    0:*/		return 0x8222ED6C;
	}
	return 0x8222ED6C;
} // Block from 8222ED68h-8222ED6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222ED6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222ED6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222ED6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222ED6C);
		  /* 8222ED6Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222ED6Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222ED6Ch case    0:*/		return 0x8222ED70;
		  /* 8222ED70h */ case    1:  		/* bc 12, CR0_EQ, 68 */
		/* 8222ED70h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222EDB4;  }
		/* 8222ED70h case    1:*/		return 0x8222ED74;
		  /* 8222ED74h */ case    2:  		/* addi R10, R11, -8 */
		/* 8222ED74h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFF8);
		/* 8222ED74h case    2:*/		return 0x8222ED78;
		  /* 8222ED78h */ case    3:  		/* li R8, 0 */
		/* 8222ED78h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222ED78h case    3:*/		return 0x8222ED7C;
		  /* 8222ED7Ch */ case    4:  		/* rlwimi R10, R11, 0, 0, 26 */
		/* 8222ED7Ch case    4:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R11);
		/* 8222ED7Ch case    4:*/		return 0x8222ED80;
		  /* 8222ED80h */ case    5:  		/* mr R6, R30 */
		/* 8222ED80h case    5:*/		regs.R6 = regs.R30;
		/* 8222ED80h case    5:*/		return 0x8222ED84;
		  /* 8222ED84h */ case    6:  		/* stw R10, <#[R31]> */
		/* 8222ED84h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222ED84h case    6:*/		return 0x8222ED88;
		  /* 8222ED88h */ case    7:  		/* mr R5, R31 */
		/* 8222ED88h case    7:*/		regs.R5 = regs.R31;
		/* 8222ED88h case    7:*/		return 0x8222ED8C;
		  /* 8222ED8Ch */ case    8:  		/* lwz R11, <#[R27]> */
		/* 8222ED8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8222ED8Ch case    8:*/		return 0x8222ED90;
		  /* 8222ED90h */ case    9:  		/* rlwinm R7, R11, 27, 24, 31 */
		/* 8222ED90h case    9:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R11);
		/* 8222ED90h case    9:*/		return 0x8222ED94;
		  /* 8222ED94h */ case   10:  		/* mr R4, R29 */
		/* 8222ED94h case   10:*/		regs.R4 = regs.R29;
		/* 8222ED94h case   10:*/		return 0x8222ED98;
		  /* 8222ED98h */ case   11:  		/* mr R3, R21 */
		/* 8222ED98h case   11:*/		regs.R3 = regs.R21;
		/* 8222ED98h case   11:*/		return 0x8222ED9C;
		  /* 8222ED9Ch */ case   12:  		/* bl -44532 */
		/* 8222ED9Ch case   12:*/		regs.LR = 0x8222EDA0; return 0x82223FA8;
		/* 8222ED9Ch case   12:*/		return 0x8222EDA0;
		  /* 8222EDA0h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222EDA0h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222EDA0h case   13:*/		return 0x8222EDA4;
		  /* 8222EDA4h */ case   14:  		/* bc 4, CR0_EQ, 16 */
		/* 8222EDA4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8222EDB4;  }
		/* 8222EDA4h case   14:*/		return 0x8222EDA8;
		  /* 8222EDA8h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 8222EDA8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222EDA8h case   15:*/		return 0x8222EDAC;
		  /* 8222EDACh */ case   16:  		/* ori R11, R11, 8 */
		/* 8222EDACh case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8222EDACh case   16:*/		return 0x8222EDB0;
		  /* 8222EDB0h */ case   17:  		/* stw R11, <#[R31]> */
		/* 8222EDB0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222EDB0h case   17:*/		return 0x8222EDB4;
	}
	return 0x8222EDB4;
} // Block from 8222ED6Ch-8222EDB4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222EDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EDB4);
		  /* 8222EDB4h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8222EDB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222EDB4h case    0:*/		return 0x8222EDB8;
		  /* 8222EDB8h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8222EDB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222EDB8h case    1:*/		return 0x8222EDBC;
		  /* 8222EDBCh */ case    2:  		/* bc 4, CR6_EQ, -132 */
		/* 8222EDBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222ED38;  }
		/* 8222EDBCh case    2:*/		return 0x8222EDC0;
		  /* 8222EDC0h */ case    3:  		/* addi R28, R31, 8 */
		/* 8222EDC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x8);
		/* 8222EDC0h case    3:*/		return 0x8222EDC4;
		  /* 8222EDC4h */ case    4:  		/* b -140 */
		/* 8222EDC4h case    4:*/		return 0x8222ED38;
		/* 8222EDC4h case    4:*/		return 0x8222EDC8;
	}
	return 0x8222EDC8;
} // Block from 8222EDB4h-8222EDC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222EDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EDC8);
		  /* 8222EDC8h */ case    0:  		/* lwz R26, <#[R26 + 8]> */
		/* 8222EDC8h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x00000008) );
		/* 8222EDC8h case    0:*/		return 0x8222EDCC;
		  /* 8222EDCCh */ case    1:  		/* b -320 */
		/* 8222EDCCh case    1:*/		return 0x8222EC8C;
		/* 8222EDCCh case    1:*/		return 0x8222EDD0;
	}
	return 0x8222EDD0;
} // Block from 8222EDC8h-8222EDD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222EDD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EDD0);
		  /* 8222EDD0h */ case    0:  		/* lfd FR0, <#[R9]> */
		/* 8222EDD0h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000000) );
		/* 8222EDD0h case    0:*/		return 0x8222EDD4;
		  /* 8222EDD4h */ case    1:  		/* fctiwz FR0, FR0 */
		/* 8222EDD4h case    1:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 8222EDD4h case    1:*/		return 0x8222EDD8;
		  /* 8222EDD8h */ case    2:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8222EDD8h case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8222EDD8h case    2:*/		return 0x8222EDDC;
		  /* 8222EDDCh */ case    3:  		/* lwz R11, <#[R1 + 92]> */
		/* 8222EDDCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222EDDCh case    3:*/		return 0x8222EDE0;
	}
	return 0x8222EDE0;
} // Block from 8222EDD0h-8222EDE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222EDE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EDE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EDE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EDE0);
		  /* 8222EDE0h */ case    0:  		/* stw R11, <#[R8]> */
		/* 8222EDE0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8222EDE0h case    0:*/		return 0x8222EDE4;
		  /* 8222EDE4h */ case    1:  		/* b 76 */
		/* 8222EDE4h case    1:*/		return 0x8222EE30;
		/* 8222EDE4h case    1:*/		return 0x8222EDE8;
	}
	return 0x8222EDE8;
} // Block from 8222EDE0h-8222EDE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222EDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EDE8);
		  /* 8222EDE8h */ case    0:  		/* lfd FR0, <#[R9]> */
		/* 8222EDE8h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000000) );
		/* 8222EDE8h case    0:*/		return 0x8222EDEC;
		  /* 8222EDECh */ case    1:  		/* frsp FR0, FR0 */
		/* 8222EDECh case    1:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8222EDECh case    1:*/		return 0x8222EDF0;
		  /* 8222EDF0h */ case    2:  		/* stfs FR0, <#[R1 + 96]> */
		/* 8222EDF0h case    2:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 8222EDF0h case    2:*/		return 0x8222EDF4;
		  /* 8222EDF4h */ case    3:  		/* lwz R11, <#[R1 + 96]> */
		/* 8222EDF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8222EDF4h case    3:*/		return 0x8222EDF8;
		  /* 8222EDF8h */ case    4:  		/* stfs FR0, <#[R1 + 88]> */
		/* 8222EDF8h case    4:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8222EDF8h case    4:*/		return 0x8222EDFC;
		  /* 8222EDFCh */ case    5:  		/* rlwinm. R7, R11, 0, 1, 31 */
		/* 8222EDFCh case    5:*/		cpu::op::rlwinm<1,0,1,31>(regs,&regs.R7,regs.R11);
		/* 8222EDFCh case    5:*/		return 0x8222EE00;
		  /* 8222EE00h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 8222EE00h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222EE10;  }
		/* 8222EE00h case    6:*/		return 0x8222EE04;
		  /* 8222EE04h */ case    7:  		/* rlwinm. R11, R11, 0, 1, 8 */
		/* 8222EE04h case    7:*/		cpu::op::rlwinm<1,0,1,8>(regs,&regs.R11,regs.R11);
		/* 8222EE04h case    7:*/		return 0x8222EE08;
		  /* 8222EE08h */ case    8:  		/* mr R11, R17 */
		/* 8222EE08h case    8:*/		regs.R11 = regs.R17;
		/* 8222EE08h case    8:*/		return 0x8222EE0C;
		  /* 8222EE0Ch */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 8222EE0Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8222EE14;  }
		/* 8222EE0Ch case    9:*/		return 0x8222EE10;
	}
	return 0x8222EE10;
} // Block from 8222EDE8h-8222EE10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222EE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EE10);
		  /* 8222EE10h */ case    0:  		/* li R11, 1 */
		/* 8222EE10h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222EE10h case    0:*/		return 0x8222EE14;
	}
	return 0x8222EE14;
} // Block from 8222EE10h-8222EE14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222EE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EE14);
		  /* 8222EE14h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222EE14h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222EE14h case    0:*/		return 0x8222EE18;
		  /* 8222EE18h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 8222EE18h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222EE2C;  }
		/* 8222EE18h case    1:*/		return 0x8222EE1C;
		  /* 8222EE1Ch */ case    2:  		/* lwz R11, <#[R1 + 88]> */
		/* 8222EE1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222EE1Ch case    2:*/		return 0x8222EE20;
		  /* 8222EE20h */ case    3:  		/* rlwinm R11, R11, 0, 0, 0 */
		/* 8222EE20h case    3:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8222EE20h case    3:*/		return 0x8222EE24;
		  /* 8222EE24h */ case    4:  		/* stw R11, <#[R1 + 88]> */
		/* 8222EE24h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222EE24h case    4:*/		return 0x8222EE28;
		  /* 8222EE28h */ case    5:  		/* lfs FR0, <#[R1 + 88]> */
		/* 8222EE28h case    5:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8222EE28h case    5:*/		return 0x8222EE2C;
	}
	return 0x8222EE2C;
} // Block from 8222EE14h-8222EE2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222EE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EE2C);
		  /* 8222EE2Ch */ case    0:  		/* stfs FR0, <#[R8]> */
		/* 8222EE2Ch case    0:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R8 + 0x00000000) );
		/* 8222EE2Ch case    0:*/		return 0x8222EE30;
	}
	return 0x8222EE30;
} // Block from 8222EE2Ch-8222EE30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222EE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EE30);
		  /* 8222EE30h */ case    0:  		/* addi R10, R10, 2 */
		/* 8222EE30h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8222EE30h case    0:*/		return 0x8222EE34;
		  /* 8222EE34h */ case    1:  		/* addi R9, R9, 8 */
		/* 8222EE34h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x8);
		/* 8222EE34h case    1:*/		return 0x8222EE38;
		  /* 8222EE38h */ case    2:  		/* addi R8, R8, 4 */
		/* 8222EE38h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8222EE38h case    2:*/		return 0x8222EE3C;
		  /* 8222EE3Ch */ case    3:  		/* cmplwi CR6, R10, 8 */
		/* 8222EE3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 8222EE3Ch case    3:*/		return 0x8222EE40;
		  /* 8222EE40h */ case    4:  		/* bc 12, CR6_LT, -536 */
		/* 8222EE40h case    4:*/		if ( regs.CR[6].lt ) { return 0x8222EC28;  }
		/* 8222EE40h case    4:*/		return 0x8222EE44;
		  /* 8222EE44h */ case    5:  		/* mr R6, R22 */
		/* 8222EE44h case    5:*/		regs.R6 = regs.R22;
		/* 8222EE44h case    5:*/		return 0x8222EE48;
		  /* 8222EE48h */ case    6:  		/* addi R5, R1, 112 */
		/* 8222EE48h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8222EE48h case    6:*/		return 0x8222EE4C;
		  /* 8222EE4Ch */ case    7:  		/* li R4, 4 */
		/* 8222EE4Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8222EE4Ch case    7:*/		return 0x8222EE50;
		  /* 8222EE50h */ case    8:  		/* mr R3, R21 */
		/* 8222EE50h case    8:*/		regs.R3 = regs.R21;
		/* 8222EE50h case    8:*/		return 0x8222EE54;
		  /* 8222EE54h */ case    9:  		/* bl -32284 */
		/* 8222EE54h case    9:*/		regs.LR = 0x8222EE58; return 0x82227038;
		/* 8222EE54h case    9:*/		return 0x8222EE58;
		  /* 8222EE58h */ case   10:  		/* mr R29, R3 */
		/* 8222EE58h case   10:*/		regs.R29 = regs.R3;
		/* 8222EE58h case   10:*/		return 0x8222EE5C;
		  /* 8222EE5Ch */ case   11:  		/* mr R5, R3 */
		/* 8222EE5Ch case   11:*/		regs.R5 = regs.R3;
		/* 8222EE5Ch case   11:*/		return 0x8222EE60;
		  /* 8222EE60h */ case   12:  		/* stb R17, <#[R1 + 80]> */
		/* 8222EE60h case   12:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000050) );
		/* 8222EE60h case   12:*/		return 0x8222EE64;
		  /* 8222EE64h */ case   13:  		/* addi R9, R1, 80 */
		/* 8222EE64h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8222EE64h case   13:*/		return 0x8222EE68;
		  /* 8222EE68h */ case   14:  		/* mr R8, R19 */
		/* 8222EE68h case   14:*/		regs.R8 = regs.R19;
		/* 8222EE68h case   14:*/		return 0x8222EE6C;
		  /* 8222EE6Ch */ case   15:  		/* li R7, 0 */
		/* 8222EE6Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8222EE6Ch case   15:*/		return 0x8222EE70;
		  /* 8222EE70h */ case   16:  		/* li R6, 228 */
		/* 8222EE70h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 8222EE70h case   16:*/		return 0x8222EE74;
		  /* 8222EE74h */ case   17:  		/* mr R4, R23 */
		/* 8222EE74h case   17:*/		regs.R4 = regs.R23;
		/* 8222EE74h case   17:*/		return 0x8222EE78;
		  /* 8222EE78h */ case   18:  		/* mr R3, R21 */
		/* 8222EE78h case   18:*/		regs.R3 = regs.R21;
		/* 8222EE78h case   18:*/		return 0x8222EE7C;
		  /* 8222EE7Ch */ case   19:  		/* bl -7020 */
		/* 8222EE7Ch case   19:*/		regs.LR = 0x8222EE80; return 0x8222D310;
		/* 8222EE7Ch case   19:*/		return 0x8222EE80;
		  /* 8222EE80h */ case   20:  		/* lwz R30, <#[R1 + 108]> */
		/* 8222EE80h case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8222EE80h case   20:*/		return 0x8222EE84;
		  /* 8222EE84h */ case   21:  		/* rlwinm. R11, R20, 0, 24, 31 */
		/* 8222EE84h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R20);
		/* 8222EE84h case   21:*/		return 0x8222EE88;
		  /* 8222EE88h */ case   22:  		/* stw R30, <#[R1 + 108]> */
		/* 8222EE88h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8222EE88h case   22:*/		return 0x8222EE8C;
		  /* 8222EE8Ch */ case   23:  		/* bc 12, CR0_EQ, 136 */
		/* 8222EE8Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x8222EF14;  }
		/* 8222EE8Ch case   23:*/		return 0x8222EE90;
		  /* 8222EE90h */ case   24:  		/* addi R28, R23, 4 */
		/* 8222EE90h case   24:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R23,0x4);
		/* 8222EE90h case   24:*/		return 0x8222EE94;
		  /* 8222EE94h */ case   25:  		/* lwz R31, <#[R28]> */
		/* 8222EE94h case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8222EE94h case   25:*/		return 0x8222EE98;
		  /* 8222EE98h */ case   26:  		/* cmplwi CR6, R31, 0 */
		/* 8222EE98h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222EE98h case   26:*/		return 0x8222EE9C;
		  /* 8222EE9Ch */ case   27:  		/* bc 12, CR6_EQ, 116 */
		/* 8222EE9Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x8222EF10;  }
		/* 8222EE9Ch case   27:*/		return 0x8222EEA0;
		  /* 8222EEA0h */ case   28:  		/* lwz R4, <#[R31 + 16]> */
		/* 8222EEA0h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8222EEA0h case   28:*/		return 0x8222EEA4;
		  /* 8222EEA4h */ case   29:  		/* cmplwi CR6, R4, 0 */
		/* 8222EEA4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8222EEA4h case   29:*/		return 0x8222EEA8;
		  /* 8222EEA8h */ case   30:  		/* bc 12, CR6_EQ, 72 */
		/* 8222EEA8h case   30:*/		if ( regs.CR[6].eq ) { return 0x8222EEF0;  }
		/* 8222EEA8h case   30:*/		return 0x8222EEAC;
		  /* 8222EEACh */ case   31:  		/* lwz R11, <#[R31]> */
		/* 8222EEACh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222EEACh case   31:*/		return 0x8222EEB0;
		  /* 8222EEB0h */ case   32:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8222EEB0h case   32:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8222EEB0h case   32:*/		return 0x8222EEB4;
		  /* 8222EEB4h */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 8222EEB4h case   33:*/		if ( regs.CR[0].eq ) { return 0x8222EEC4;  }
		/* 8222EEB4h case   33:*/		return 0x8222EEB8;
		  /* 8222EEB8h */ case   34:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8222EEB8h case   34:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8222EEB8h case   34:*/		return 0x8222EEBC;
		  /* 8222EEBCh */ case   35:  		/* li R11, 1 */
		/* 8222EEBCh case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222EEBCh case   35:*/		return 0x8222EEC0;
		  /* 8222EEC0h */ case   36:  		/* bc 12, CR0_EQ, 8 */
		/* 8222EEC0h case   36:*/		if ( regs.CR[0].eq ) { return 0x8222EEC8;  }
		/* 8222EEC0h case   36:*/		return 0x8222EEC4;
	}
	return 0x8222EEC4;
} // Block from 8222EE30h-8222EEC4h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8222EEC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EEC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EEC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EEC4);
		  /* 8222EEC4h */ case    0:  		/* mr R11, R17 */
		/* 8222EEC4h case    0:*/		regs.R11 = regs.R17;
		/* 8222EEC4h case    0:*/		return 0x8222EEC8;
	}
	return 0x8222EEC8;
} // Block from 8222EEC4h-8222EEC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222EEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EEC8);
		  /* 8222EEC8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222EEC8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222EEC8h case    0:*/		return 0x8222EECC;
		  /* 8222EECCh */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 8222EECCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8222EEF0;  }
		/* 8222EECCh case    1:*/		return 0x8222EED0;
		  /* 8222EED0h */ case    2:  		/* mr R6, R18 */
		/* 8222EED0h case    2:*/		regs.R6 = regs.R18;
		/* 8222EED0h case    2:*/		return 0x8222EED4;
		  /* 8222EED4h */ case    3:  		/* mr R5, R31 */
		/* 8222EED4h case    3:*/		regs.R5 = regs.R31;
		/* 8222EED4h case    3:*/		return 0x8222EED8;
		  /* 8222EED8h */ case    4:  		/* mr R3, R21 */
		/* 8222EED8h case    4:*/		regs.R3 = regs.R21;
		/* 8222EED8h case    4:*/		return 0x8222EEDC;
		  /* 8222EEDCh */ case    5:  		/* bl -13932 */
		/* 8222EEDCh case    5:*/		regs.LR = 0x8222EEE0; return 0x8222B870;
		/* 8222EEDCh case    5:*/		return 0x8222EEE0;
		  /* 8222EEE0h */ case    6:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8222EEE0h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222EEE0h case    6:*/		return 0x8222EEE4;
		  /* 8222EEE4h */ case    7:  		/* or R11, R11, R30 */
		/* 8222EEE4h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8222EEE4h case    7:*/		return 0x8222EEE8;
		  /* 8222EEE8h */ case    8:  		/* rlwimi R11, R30, 0, 0, 30 */
		/* 8222EEE8h case    8:*/		cpu::op::rlwimi<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8222EEE8h case    8:*/		return 0x8222EEEC;
		  /* 8222EEECh */ case    9:  		/* mr R30, R11 */
		/* 8222EEECh case    9:*/		regs.R30 = regs.R11;
		/* 8222EEECh case    9:*/		return 0x8222EEF0;
	}
	return 0x8222EEF0;
} // Block from 8222EEC8h-8222EEF0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222EEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EEF0);
		  /* 8222EEF0h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8222EEF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8222EEF0h case    0:*/		return 0x8222EEF4;
		  /* 8222EEF4h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8222EEF4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222EEF4h case    1:*/		return 0x8222EEF8;
		  /* 8222EEF8h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 8222EEF8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222EE94;  }
		/* 8222EEF8h case    2:*/		return 0x8222EEFC;
		  /* 8222EEFCh */ case    3:  		/* addi R28, R31, 8 */
		/* 8222EEFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x8);
		/* 8222EEFCh case    3:*/		return 0x8222EF00;
		  /* 8222EF00h */ case    4:  		/* b -108 */
		/* 8222EF00h case    4:*/		return 0x8222EE94;
		/* 8222EF00h case    4:*/		return 0x8222EF04;
	}
	return 0x8222EF04;
} // Block from 8222EEF0h-8222EF04h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222EF04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EF04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EF04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EF04);
		  /* 8222EF04h */ case    0:  		/* li R4, 4800 */
		/* 8222EF04h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222EF04h case    0:*/		return 0x8222EF08;
		  /* 8222EF08h */ case    1:  		/* mr R3, R21 */
		/* 8222EF08h case    1:*/		regs.R3 = regs.R21;
		/* 8222EF08h case    1:*/		return 0x8222EF0C;
		  /* 8222EF0Ch */ case    2:  		/* bl -905380 */
		/* 8222EF0Ch case    2:*/		regs.LR = 0x8222EF10; return 0x82151E68;
		/* 8222EF0Ch case    2:*/		return 0x8222EF10;
	}
	return 0x8222EF10;
} // Block from 8222EF04h-8222EF10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222EF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EF10);
		  /* 8222EF10h */ case    0:  		/* stw R30, <#[R1 + 108]> */
		/* 8222EF10h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8222EF10h case    0:*/		return 0x8222EF14;
	}
	return 0x8222EF14;
} // Block from 8222EF10h-8222EF14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222EF14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EF14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EF14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EF14);
		  /* 8222EF14h */ case    0:  		/* stw R29, <#[R1 + 104]> */
		/* 8222EF14h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 8222EF14h case    0:*/		return 0x8222EF18;
	}
	return 0x8222EF18;
} // Block from 8222EF14h-8222EF18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222EF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EF18);
		  /* 8222EF18h */ case    0:  		/* ld R11, <#[R1 + 104]> */
		/* 8222EF18h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8222EF18h case    0:*/		return 0x8222EF1C;
		  /* 8222EF1Ch */ case    1:  		/* mr R3, R16 */
		/* 8222EF1Ch case    1:*/		regs.R3 = regs.R16;
		/* 8222EF1Ch case    1:*/		return 0x8222EF20;
		  /* 8222EF20h */ case    2:  		/* std R11, <#[R16]> */
		/* 8222EF20h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8222EF20h case    2:*/		return 0x8222EF24;
		  /* 8222EF24h */ case    3:  		/* addi R1, R1, 272 */
		/* 8222EF24h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8222EF24h case    3:*/		return 0x8222EF28;
		  /* 8222EF28h */ case    4:  		/* lfd FR31, <#[R1 - 144]> */
		/* 8222EF28h case    4:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 8222EF28h case    4:*/		return 0x8222EF2C;
		  /* 8222EF2Ch */ case    5:  		/* b -1694900 */
		/* 8222EF2Ch case    5:*/		return 0x82091278;
		/* 8222EF2Ch case    5:*/		return 0x8222EF30;
	}
	return 0x8222EF30;
} // Block from 8222EF18h-8222EF30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222EF30h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EF30);
		  /* 8222EF30h */ case    0:  		/* mfspr R12, LR */
		/* 8222EF30h case    0:*/		regs.R12 = regs.LR;
		/* 8222EF30h case    0:*/		return 0x8222EF34;
		  /* 8222EF34h */ case    1:  		/* bl -1694960 */
		/* 8222EF34h case    1:*/		regs.LR = 0x8222EF38; return 0x82091244;
		/* 8222EF34h case    1:*/		return 0x8222EF38;
		  /* 8222EF38h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8222EF38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8222EF38h case    2:*/		return 0x8222EF3C;
		  /* 8222EF3Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8222EF3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222EF3Ch case    3:*/		return 0x8222EF40;
		  /* 8222EF40h */ case    4:  		/* mr R27, R3 */
		/* 8222EF40h case    4:*/		regs.R27 = regs.R3;
		/* 8222EF40h case    4:*/		return 0x8222EF44;
		  /* 8222EF44h */ case    5:  		/* lwz R28, <#[R3 + 12]> */
		/* 8222EF44h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222EF44h case    5:*/		return 0x8222EF48;
		  /* 8222EF48h */ case    6:  		/* mr R25, R4 */
		/* 8222EF48h case    6:*/		regs.R25 = regs.R4;
		/* 8222EF48h case    6:*/		return 0x8222EF4C;
		  /* 8222EF4Ch */ case    7:  		/* mr R24, R5 */
		/* 8222EF4Ch case    7:*/		regs.R24 = regs.R5;
		/* 8222EF4Ch case    7:*/		return 0x8222EF50;
		  /* 8222EF50h */ case    8:  		/* mr R23, R6 */
		/* 8222EF50h case    8:*/		regs.R23 = regs.R6;
		/* 8222EF50h case    8:*/		return 0x8222EF54;
		  /* 8222EF54h */ case    9:  		/* mr R26, R7 */
		/* 8222EF54h case    9:*/		regs.R26 = regs.R7;
		/* 8222EF54h case    9:*/		return 0x8222EF58;
		  /* 8222EF58h */ case   10:  		/* rlwinm R29, R11, 27, 24, 31 */
		/* 8222EF58h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R29,regs.R11);
		/* 8222EF58h case   10:*/		return 0x8222EF5C;
		  /* 8222EF5Ch */ case   11:  		/* rlwinm R30, R11, 0, 27, 31 */
		/* 8222EF5Ch case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R11);
		/* 8222EF5Ch case   11:*/		return 0x8222EF60;
		  /* 8222EF60h */ case   12:  		/* lwz R11, <#[R28 + 8]> */
		/* 8222EF60h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8222EF60h case   12:*/		return 0x8222EF64;
		  /* 8222EF64h */ case   13:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222EF64h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222EF64h case   13:*/		return 0x8222EF68;
		  /* 8222EF68h */ case   14:  		/* cmpwi CR6, R11, 3 */
		/* 8222EF68h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8222EF68h case   14:*/		return 0x8222EF6C;
		  /* 8222EF6Ch */ case   15:  		/* bc 12, CR6_EQ, 400 */
		/* 8222EF6Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8222F0FC;  }
		/* 8222EF6Ch case   15:*/		return 0x8222EF70;
		  /* 8222EF70h */ case   16:  		/* cmpwi CR6, R11, 104 */
		/* 8222EF70h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000068);
		/* 8222EF70h case   16:*/		return 0x8222EF74;
		  /* 8222EF74h */ case   17:  		/* bc 12, CR6_EQ, 252 */
		/* 8222EF74h case   17:*/		if ( regs.CR[6].eq ) { return 0x8222F070;  }
		/* 8222EF74h case   17:*/		return 0x8222EF78;
		  /* 8222EF78h */ case   18:  		/* cmpwi CR6, R11, 112 */
		/* 8222EF78h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000070);
		/* 8222EF78h case   18:*/		return 0x8222EF7C;
		  /* 8222EF7Ch */ case   19:  		/* bc 4, CR6_EQ, 364 */
		/* 8222EF7Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x8222F0E8;  }
		/* 8222EF7Ch case   19:*/		return 0x8222EF80;
		  /* 8222EF80h */ case   20:  		/* rlwinm R11, R27, 0, 0, 19 */
		/* 8222EF80h case   20:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R27);
		/* 8222EF80h case   20:*/		return 0x8222EF84;
		  /* 8222EF84h */ case   21:  		/* li R9, 0 */
		/* 8222EF84h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8222EF84h case   21:*/		return 0x8222EF88;
		  /* 8222EF88h */ case   22:  		/* mr R8, R26 */
		/* 8222EF88h case   22:*/		regs.R8 = regs.R26;
		/* 8222EF88h case   22:*/		return 0x8222EF8C;
		  /* 8222EF8Ch */ case   23:  		/* addi R7, R1, 84 */
		/* 8222EF8Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8222EF8Ch case   23:*/		return 0x8222EF90;
		  /* 8222EF90h */ case   24:  		/* addi R6, R1, 88 */
		/* 8222EF90h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 8222EF90h case   24:*/		return 0x8222EF94;
		  /* 8222EF94h */ case   25:  		/* lwz R11, <#[R11]> */
		/* 8222EF94h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222EF94h case   25:*/		return 0x8222EF98;
		  /* 8222EF98h */ case   26:  		/* addi R5, R1, 80 */
		/* 8222EF98h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8222EF98h case   26:*/		return 0x8222EF9C;
		  /* 8222EF9Ch */ case   27:  		/* mr R4, R28 */
		/* 8222EF9Ch case   27:*/		regs.R4 = regs.R28;
		/* 8222EF9Ch case   27:*/		return 0x8222EFA0;
		  /* 8222EFA0h */ case   28:  		/* lwz R3, <#[R11 + 148]> */
		/* 8222EFA0h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 8222EFA0h case   28:*/		return 0x8222EFA4;
		  /* 8222EFA4h */ case   29:  		/* bl -6068 */
		/* 8222EFA4h case   29:*/		regs.LR = 0x8222EFA8; return 0x8222D7F0;
		/* 8222EFA4h case   29:*/		return 0x8222EFA8;
		  /* 8222EFA8h */ case   30:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222EFA8h case   30:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222EFA8h case   30:*/		return 0x8222EFAC;
		  /* 8222EFACh */ case   31:  		/* bc 12, CR0_EQ, 316 */
		/* 8222EFACh case   31:*/		if ( regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222EFACh case   31:*/		return 0x8222EFB0;
		  /* 8222EFB0h */ case   32:  		/* lwz R9, <#[R1 + 80]> */
		/* 8222EFB0h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8222EFB0h case   32:*/		return 0x8222EFB4;
		  /* 8222EFB4h */ case   33:  		/* cmplwi CR6, R9, 0 */
		/* 8222EFB4h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8222EFB4h case   33:*/		return 0x8222EFB8;
		  /* 8222EFB8h */ case   34:  		/* bc 12, CR6_EQ, 304 */
		/* 8222EFB8h case   34:*/		if ( regs.CR[6].eq ) { return 0x8222F0E8;  }
		/* 8222EFB8h case   34:*/		return 0x8222EFBC;
		  /* 8222EFBCh */ case   35:  		/* lwz R10, <#[R1 + 84]> */
		/* 8222EFBCh case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8222EFBCh case   35:*/		return 0x8222EFC0;
		  /* 8222EFC0h */ case   36:  		/* rlwinm. R11, R10, 0, 27, 28 */
		/* 8222EFC0h case   36:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R10);
		/* 8222EFC0h case   36:*/		return 0x8222EFC4;
		  /* 8222EFC4h */ case   37:  		/* bc 12, CR0_EQ, 20 */
		/* 8222EFC4h case   37:*/		if ( regs.CR[0].eq ) { return 0x8222EFD8;  }
		/* 8222EFC4h case   37:*/		return 0x8222EFC8;
		  /* 8222EFC8h */ case   38:  		/* rlwinm. R11, R30, 0, 27, 28 */
		/* 8222EFC8h case   38:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R30);
		/* 8222EFC8h case   38:*/		return 0x8222EFCC;
		  /* 8222EFCCh */ case   39:  		/* bc 12, CR0_EQ, 12 */
		/* 8222EFCCh case   39:*/		if ( regs.CR[0].eq ) { return 0x8222EFD8;  }
		/* 8222EFCCh case   39:*/		return 0x8222EFD0;
		  /* 8222EFD0h */ case   40:  		/* li R11, 0 */
		/* 8222EFD0h case   40:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222EFD0h case   40:*/		return 0x8222EFD4;
		  /* 8222EFD4h */ case   41:  		/* b 44 */
		/* 8222EFD4h case   41:*/		return 0x8222F000;
		/* 8222EFD4h case   41:*/		return 0x8222EFD8;
	}
	return 0x8222EFD8;
} // Block from 8222EF30h-8222EFD8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 8222EFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EFD8);
		  /* 8222EFD8h */ case    0:  		/* rlwinm. R11, R10, 0, 30, 30 */
		/* 8222EFD8h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R10);
		/* 8222EFD8h case    0:*/		return 0x8222EFDC;
		  /* 8222EFDCh */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8222EFDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8222EFE8;  }
		/* 8222EFDCh case    1:*/		return 0x8222EFE0;
		  /* 8222EFE0h */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8222EFE0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8222EFE0h case    2:*/		return 0x8222EFE4;
		  /* 8222EFE4h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 8222EFE4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222EFD0;  }
		/* 8222EFE4h case    3:*/		return 0x8222EFE8;
	}
	return 0x8222EFE8;
} // Block from 8222EFD8h-8222EFE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222EFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EFE8);
		  /* 8222EFE8h */ case    0:  		/* rlwinm. R11, R10, 0, 29, 29 */
		/* 8222EFE8h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R10);
		/* 8222EFE8h case    0:*/		return 0x8222EFEC;
		  /* 8222EFECh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222EFECh case    1:*/		if ( regs.CR[0].eq ) { return 0x8222EFFC;  }
		/* 8222EFECh case    1:*/		return 0x8222EFF0;
		  /* 8222EFF0h */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8222EFF0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8222EFF0h case    2:*/		return 0x8222EFF4;
		  /* 8222EFF4h */ case    3:  		/* li R11, 0 */
		/* 8222EFF4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222EFF4h case    3:*/		return 0x8222EFF8;
		  /* 8222EFF8h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222EFF8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222F000;  }
		/* 8222EFF8h case    4:*/		return 0x8222EFFC;
	}
	return 0x8222EFFC;
} // Block from 8222EFE8h-8222EFFCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222EFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222EFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222EFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222EFFC);
		  /* 8222EFFCh */ case    0:  		/* li R11, 1 */
		/* 8222EFFCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222EFFCh case    0:*/		return 0x8222F000;
	}
	return 0x8222F000;
} // Block from 8222EFFCh-8222F000h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F000);
		  /* 8222F000h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222F000h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222F000h case    0:*/		return 0x8222F004;
		  /* 8222F004h */ case    1:  		/* bc 12, CR0_EQ, 228 */
		/* 8222F004h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222F004h case    1:*/		return 0x8222F008;
		  /* 8222F008h */ case    2:  		/* lwz R11, <#[R1 + 88]> */
		/* 8222F008h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222F008h case    2:*/		return 0x8222F00C;
		  /* 8222F00Ch */ case    3:  		/* rlwinm. R8, R10, 0, 29, 29 */
		/* 8222F00Ch case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R10);
		/* 8222F00Ch case    3:*/		return 0x8222F010;
		  /* 8222F010h */ case    4:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 8222F010h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 8222F010h case    4:*/		return 0x8222F014;
		  /* 8222F014h */ case    5:  		/* mr R28, R9 */
		/* 8222F014h case    5:*/		regs.R28 = regs.R9;
		/* 8222F014h case    5:*/		return 0x8222F018;
		  /* 8222F018h */ case    6:  		/* or R7, R7, R11 */
		/* 8222F018h case    6:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R11);
		/* 8222F018h case    6:*/		return 0x8222F01C;
		  /* 8222F01Ch */ case    7:  		/* mr R9, R30 */
		/* 8222F01Ch case    7:*/		regs.R9 = regs.R30;
		/* 8222F01Ch case    7:*/		return 0x8222F020;
		  /* 8222F020h */ case    8:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8222F020h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8222F020h case    8:*/		return 0x8222F024;
		  /* 8222F024h */ case    9:  		/* or R8, R7, R11 */
		/* 8222F024h case    9:*/		cpu::op::or<0>(regs,&regs.R8,regs.R7,regs.R11);
		/* 8222F024h case    9:*/		return 0x8222F028;
		  /* 8222F028h */ case   10:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8222F028h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8222F028h case   10:*/		return 0x8222F02C;
		  /* 8222F02Ch */ case   11:  		/* or R29, R8, R11 */
		/* 8222F02Ch case   11:*/		cpu::op::or<0>(regs,&regs.R29,regs.R8,regs.R11);
		/* 8222F02Ch case   11:*/		return 0x8222F030;
		  /* 8222F030h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F030h case   12:*/		if ( regs.CR[0].eq ) { return 0x8222F040;  }
		/* 8222F030h case   12:*/		return 0x8222F034;
		  /* 8222F034h */ case   13:  		/* rlwinm. R11, R30, 0, 30, 30 */
		/* 8222F034h case   13:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R30);
		/* 8222F034h case   13:*/		return 0x8222F038;
		  /* 8222F038h */ case   14:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F038h case   14:*/		if ( regs.CR[0].eq ) { return 0x8222F040;  }
		/* 8222F038h case   14:*/		return 0x8222F03C;
		  /* 8222F03Ch */ case   15:  		/* addi R10, R10, -4 */
		/* 8222F03Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8222F03Ch case   15:*/		return 0x8222F040;
	}
	return 0x8222F040;
} // Block from 8222F000h-8222F040h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8222F040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F040);
		  /* 8222F040h */ case    0:  		/* and R11, R10, R30 */
		/* 8222F040h case    0:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R30);
		/* 8222F040h case    0:*/		return 0x8222F044;
		  /* 8222F044h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8222F044h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8222F044h case    1:*/		return 0x8222F048;
		  /* 8222F048h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F048h case    2:*/		if ( regs.CR[0].eq ) { return 0x8222F054;  }
		/* 8222F048h case    2:*/		return 0x8222F04C;
		  /* 8222F04Ch */ case    3:  		/* addi R10, R10, -4 */
		/* 8222F04Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8222F04Ch case    3:*/		return 0x8222F050;
		  /* 8222F050h */ case    4:  		/* addi R9, R30, -4 */
		/* 8222F050h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFFC);
		/* 8222F050h case    4:*/		return 0x8222F054;
	}
	return 0x8222F054;
} // Block from 8222F040h-8222F054h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F054);
		  /* 8222F054h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8222F054h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8222F054h case    0:*/		return 0x8222F058;
		  /* 8222F058h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F058h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F068;  }
		/* 8222F058h case    1:*/		return 0x8222F05C;
		  /* 8222F05Ch */ case    2:  		/* rlwinm. R11, R9, 0, 30, 30 */
		/* 8222F05Ch case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R9);
		/* 8222F05Ch case    2:*/		return 0x8222F060;
		  /* 8222F060h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F060h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222F068;  }
		/* 8222F060h case    3:*/		return 0x8222F064;
		  /* 8222F064h */ case    4:  		/* addi R9, R9, -2 */
		/* 8222F064h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFE);
		/* 8222F064h case    4:*/		return 0x8222F068;
	}
	return 0x8222F068;
} // Block from 8222F054h-8222F068h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F068);
		  /* 8222F068h */ case    0:  		/* or R30, R10, R9 */
		/* 8222F068h case    0:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R9);
		/* 8222F068h case    0:*/		return 0x8222F06C;
		  /* 8222F06Ch */ case    1:  		/* b -268 */
		/* 8222F06Ch case    1:*/		return 0x8222EF60;
		/* 8222F06Ch case    1:*/		return 0x8222F070;
	}
	return 0x8222F070;
} // Block from 8222F068h-8222F070h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F070);
		  /* 8222F070h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8222F070h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222F070h case    0:*/		return 0x8222F074;
		  /* 8222F074h */ case    1:  		/* bc 4, CR6_EQ, 116 */
		/* 8222F074h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222F0E8;  }
		/* 8222F074h case    1:*/		return 0x8222F078;
		  /* 8222F078h */ case    2:  		/* lwz R11, <#[R28 + 44]> */
		/* 8222F078h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 8222F078h case    2:*/		return 0x8222F07C;
		  /* 8222F07Ch */ case    3:  		/* lwz R9, <#[R11]> */
		/* 8222F07Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F07Ch case    3:*/		return 0x8222F080;
		  /* 8222F080h */ case    4:  		/* lwz R8, <#[R11 + 12]> */
		/* 8222F080h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222F080h case    4:*/		return 0x8222F084;
		  /* 8222F084h */ case    5:  		/* rlwinm. R11, R9, 0, 27, 28 */
		/* 8222F084h case    5:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R9);
		/* 8222F084h case    5:*/		return 0x8222F088;
		  /* 8222F088h */ case    6:  		/* bc 4, CR0_EQ, 96 */
		/* 8222F088h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222F088h case    6:*/		return 0x8222F08C;
		  /* 8222F08Ch */ case    7:  		/* lwz R11, <#[R8 + 8]> */
		/* 8222F08Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 8222F08Ch case    7:*/		return 0x8222F090;
		  /* 8222F090h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222F090h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222F090h case    8:*/		return 0x8222F094;
		  /* 8222F094h */ case    9:  		/* cmplwi CR6, R11, 15104 */
		/* 8222F094h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 8222F094h case    9:*/		return 0x8222F098;
		  /* 8222F098h */ case   10:  		/* bc 12, CR6_EQ, 80 */
		/* 8222F098h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222F0E8;  }
		/* 8222F098h case   10:*/		return 0x8222F09C;
		  /* 8222F09Ch */ case   11:  		/* rlwinm. R10, R9, 0, 27, 28 */
		/* 8222F09Ch case   11:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R9);
		/* 8222F09Ch case   11:*/		return 0x8222F0A0;
		  /* 8222F0A0h */ case   12:  		/* rlwinm R11, R9, 0, 27, 31 */
		/* 8222F0A0h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R9);
		/* 8222F0A0h case   12:*/		return 0x8222F0A4;
		  /* 8222F0A4h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 8222F0A4h case   13:*/		if ( regs.CR[0].eq ) { return 0x8222F0B8;  }
		/* 8222F0A4h case   13:*/		return 0x8222F0A8;
		  /* 8222F0A8h */ case   14:  		/* rlwinm. R10, R30, 0, 27, 28 */
		/* 8222F0A8h case   14:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R30);
		/* 8222F0A8h case   14:*/		return 0x8222F0AC;
		  /* 8222F0ACh */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F0ACh case   15:*/		if ( regs.CR[0].eq ) { return 0x8222F0B8;  }
		/* 8222F0ACh case   15:*/		return 0x8222F0B0;
		  /* 8222F0B0h */ case   16:  		/* li R10, 0 */
		/* 8222F0B0h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F0B0h case   16:*/		return 0x8222F0B4;
		  /* 8222F0B4h */ case   17:  		/* b 44 */
		/* 8222F0B4h case   17:*/		return 0x8222F0E0;
		/* 8222F0B4h case   17:*/		return 0x8222F0B8;
	}
	return 0x8222F0B8;
} // Block from 8222F070h-8222F0B8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8222F0B8h
// Function '?MarkThroughDependents@Compiler@D3DXShader@@QAAXPAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F0B8);
		  /* 8222F0B8h */ case    0:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 8222F0B8h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 8222F0B8h case    0:*/		return 0x8222F0BC;
		  /* 8222F0BCh */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F0BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F0C8;  }
		/* 8222F0BCh case    1:*/		return 0x8222F0C0;
		  /* 8222F0C0h */ case    2:  		/* rlwinm. R10, R30, 0, 31, 31 */
		/* 8222F0C0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R30);
		/* 8222F0C0h case    2:*/		return 0x8222F0C4;
		  /* 8222F0C4h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 8222F0C4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222F0B0;  }
		/* 8222F0C4h case    3:*/		return 0x8222F0C8;
	}
	return 0x8222F0C8;
} // Block from 8222F0B8h-8222F0C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222F0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F0C8);
		  /* 8222F0C8h */ case    0:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 8222F0C8h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 8222F0C8h case    0:*/		return 0x8222F0CC;
		  /* 8222F0CCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F0CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F0DC;  }
		/* 8222F0CCh case    1:*/		return 0x8222F0D0;
		  /* 8222F0D0h */ case    2:  		/* rlwinm. R10, R30, 0, 31, 31 */
		/* 8222F0D0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R30);
		/* 8222F0D0h case    2:*/		return 0x8222F0D4;
		  /* 8222F0D4h */ case    3:  		/* li R10, 0 */
		/* 8222F0D4h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F0D4h case    3:*/		return 0x8222F0D8;
		  /* 8222F0D8h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222F0D8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222F0E0;  }
		/* 8222F0D8h case    4:*/		return 0x8222F0DC;
	}
	return 0x8222F0DC;
} // Block from 8222F0C8h-8222F0DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F0DC);
		  /* 8222F0DCh */ case    0:  		/* li R10, 1 */
		/* 8222F0DCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222F0DCh case    0:*/		return 0x8222F0E0;
	}
	return 0x8222F0E0;
} // Block from 8222F0DCh-8222F0E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F0E0);
		  /* 8222F0E0h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222F0E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222F0E0h case    0:*/		return 0x8222F0E4;
		  /* 8222F0E4h */ case    1:  		/* bc 4, CR0_EQ, 192 */
		/* 8222F0E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222F1A4;  }
		/* 8222F0E4h case    1:*/		return 0x8222F0E8;
	}
	return 0x8222F0E8;
} // Block from 8222F0E0h-8222F0E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F0E8);
		  /* 8222F0E8h */ case    0:  		/* stw R28, <#[R25]> */
		/* 8222F0E8h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R25 + 0x00000000) );
		/* 8222F0E8h case    0:*/		return 0x8222F0EC;
		  /* 8222F0ECh */ case    1:  		/* stw R29, <#[R24]> */
		/* 8222F0ECh case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R24 + 0x00000000) );
		/* 8222F0ECh case    1:*/		return 0x8222F0F0;
		  /* 8222F0F0h */ case    2:  		/* stw R30, <#[R23]> */
		/* 8222F0F0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R23 + 0x00000000) );
		/* 8222F0F0h case    2:*/		return 0x8222F0F4;
		  /* 8222F0F4h */ case    3:  		/* addi R1, R1, 176 */
		/* 8222F0F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8222F0F4h case    3:*/		return 0x8222F0F8;
		  /* 8222F0F8h */ case    4:  		/* b -1695332 */
		/* 8222F0F8h case    4:*/		return 0x82091294;
		/* 8222F0F8h case    4:*/		return 0x8222F0FC;
	}
	return 0x8222F0FC;
} // Block from 8222F0E8h-8222F0FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F0FC);
		  /* 8222F0FCh */ case    0:  		/* lwz R31, <#[R28 + 44]> */
		/* 8222F0FCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000002C) );
		/* 8222F0FCh case    0:*/		return 0x8222F100;
		  /* 8222F100h */ case    1:  		/* lwz R4, <#[R28 + 48]> */
		/* 8222F100h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000030) );
		/* 8222F100h case    1:*/		return 0x8222F104;
		  /* 8222F104h */ case    2:  		/* mr R3, R31 */
		/* 8222F104h case    2:*/		regs.R3 = regs.R31;
		/* 8222F104h case    2:*/		return 0x8222F108;
		  /* 8222F108h */ case    3:  		/* bl -831104 */
		/* 8222F108h case    3:*/		regs.LR = 0x8222F10C; return 0x82164288;
		/* 8222F108h case    3:*/		return 0x8222F10C;
		  /* 8222F10Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8222F10Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8222F10Ch case    4:*/		return 0x8222F110;
		  /* 8222F110h */ case    5:  		/* bc 12, CR0_EQ, -40 */
		/* 8222F110h case    5:*/		if ( regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222F110h case    5:*/		return 0x8222F114;
		  /* 8222F114h */ case    6:  		/* lwz R9, <#[R31]> */
		/* 8222F114h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8222F114h case    6:*/		return 0x8222F118;
		  /* 8222F118h */ case    7:  		/* lwz R8, <#[R31 + 12]> */
		/* 8222F118h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222F118h case    7:*/		return 0x8222F11C;
		  /* 8222F11Ch */ case    8:  		/* rlwinm. R11, R9, 0, 27, 28 */
		/* 8222F11Ch case    8:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R9);
		/* 8222F11Ch case    8:*/		return 0x8222F120;
		  /* 8222F120h */ case    9:  		/* bc 4, CR0_EQ, -56 */
		/* 8222F120h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222F120h case    9:*/		return 0x8222F124;
		  /* 8222F124h */ case   10:  		/* lwz R11, <#[R8 + 8]> */
		/* 8222F124h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 8222F124h case   10:*/		return 0x8222F128;
		  /* 8222F128h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222F128h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222F128h case   11:*/		return 0x8222F12C;
		  /* 8222F12Ch */ case   12:  		/* cmplwi CR6, R11, 15104 */
		/* 8222F12Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 8222F12Ch case   12:*/		return 0x8222F130;
		  /* 8222F130h */ case   13:  		/* bc 12, CR6_EQ, -72 */
		/* 8222F130h case   13:*/		if ( regs.CR[6].eq ) { return 0x8222F0E8;  }
		/* 8222F130h case   13:*/		return 0x8222F134;
		  /* 8222F134h */ case   14:  		/* rlwinm. R10, R9, 0, 27, 28 */
		/* 8222F134h case   14:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R9);
		/* 8222F134h case   14:*/		return 0x8222F138;
		  /* 8222F138h */ case   15:  		/* rlwinm R11, R9, 0, 27, 31 */
		/* 8222F138h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R9);
		/* 8222F138h case   15:*/		return 0x8222F13C;
		  /* 8222F13Ch */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 8222F13Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x8222F150;  }
		/* 8222F13Ch case   16:*/		return 0x8222F140;
		  /* 8222F140h */ case   17:  		/* rlwinm. R10, R30, 0, 27, 28 */
		/* 8222F140h case   17:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R30);
		/* 8222F140h case   17:*/		return 0x8222F144;
		  /* 8222F144h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F144h case   18:*/		if ( regs.CR[0].eq ) { return 0x8222F150;  }
		/* 8222F144h case   18:*/		return 0x8222F148;
		  /* 8222F148h */ case   19:  		/* li R10, 0 */
		/* 8222F148h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F148h case   19:*/		return 0x8222F14C;
		  /* 8222F14Ch */ case   20:  		/* b 44 */
		/* 8222F14Ch case   20:*/		return 0x8222F178;
		/* 8222F14Ch case   20:*/		return 0x8222F150;
	}
	return 0x8222F150;
} // Block from 8222F0FCh-8222F150h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8222F150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F150);
		  /* 8222F150h */ case    0:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 8222F150h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 8222F150h case    0:*/		return 0x8222F154;
		  /* 8222F154h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F154h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F160;  }
		/* 8222F154h case    1:*/		return 0x8222F158;
		  /* 8222F158h */ case    2:  		/* rlwinm. R10, R30, 0, 31, 31 */
		/* 8222F158h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R30);
		/* 8222F158h case    2:*/		return 0x8222F15C;
		  /* 8222F15Ch */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 8222F15Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222F148;  }
		/* 8222F15Ch case    3:*/		return 0x8222F160;
	}
	return 0x8222F160;
} // Block from 8222F150h-8222F160h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222F160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F160);
		  /* 8222F160h */ case    0:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 8222F160h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 8222F160h case    0:*/		return 0x8222F164;
		  /* 8222F164h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F164h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F174;  }
		/* 8222F164h case    1:*/		return 0x8222F168;
		  /* 8222F168h */ case    2:  		/* rlwinm. R10, R30, 0, 31, 31 */
		/* 8222F168h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R30);
		/* 8222F168h case    2:*/		return 0x8222F16C;
		  /* 8222F16Ch */ case    3:  		/* li R10, 0 */
		/* 8222F16Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F16Ch case    3:*/		return 0x8222F170;
		  /* 8222F170h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222F170h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222F178;  }
		/* 8222F170h case    4:*/		return 0x8222F174;
	}
	return 0x8222F174;
} // Block from 8222F160h-8222F174h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F174);
		  /* 8222F174h */ case    0:  		/* li R10, 1 */
		/* 8222F174h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222F174h case    0:*/		return 0x8222F178;
	}
	return 0x8222F178;
} // Block from 8222F174h-8222F178h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F178);
		  /* 8222F178h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222F178h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222F178h case    0:*/		return 0x8222F17C;
		  /* 8222F17Ch */ case    1:  		/* bc 12, CR0_EQ, -148 */
		/* 8222F17Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222F17Ch case    1:*/		return 0x8222F180;
		  /* 8222F180h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 8222F180h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222F180h case    2:*/		return 0x8222F184;
		  /* 8222F184h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8222F184h case    3:*/		if ( regs.CR[6].eq ) { return 0x8222F1A4;  }
		/* 8222F184h case    3:*/		return 0x8222F188;
		  /* 8222F188h */ case    4:  		/* lwz R10, <#[R8 + 28]> */
		/* 8222F188h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000001C) );
		/* 8222F188h case    4:*/		return 0x8222F18C;
		  /* 8222F18Ch */ case    5:  		/* lwz R7, <#[R26 + 28]> */
		/* 8222F18Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x0000001C) );
		/* 8222F18Ch case    5:*/		return 0x8222F190;
		  /* 8222F190h */ case    6:  		/* lwz R10, <#[R10 + 76]> */
		/* 8222F190h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 8222F190h case    6:*/		return 0x8222F194;
		  /* 8222F194h */ case    7:  		/* lwz R7, <#[R7 + 76]> */
		/* 8222F194h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000004C) );
		/* 8222F194h case    7:*/		return 0x8222F198;
		  /* 8222F198h */ case    8:  		/* xor R10, R10, R7 */
		/* 8222F198h case    8:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8222F198h case    8:*/		return 0x8222F19C;
		  /* 8222F19Ch */ case    9:  		/* rlwinm. R10, R10, 0, 13, 31 */
		/* 8222F19Ch case    9:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R10,regs.R10);
		/* 8222F19Ch case    9:*/		return 0x8222F1A0;
		  /* 8222F1A0h */ case   10:  		/* bc 4, CR0_EQ, -184 */
		/* 8222F1A0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8222F0E8;  }
		/* 8222F1A0h case   10:*/		return 0x8222F1A4;
	}
	return 0x8222F1A4;
} // Block from 8222F178h-8222F1A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222F1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F1A4);
		  /* 8222F1A4h */ case    0:  		/* rlwinm R10, R9, 27, 24, 31 */
		/* 8222F1A4h case    0:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R9);
		/* 8222F1A4h case    0:*/		return 0x8222F1A8;
		  /* 8222F1A8h */ case    1:  		/* rlwinm R9, R29, 27, 29, 30 */
		/* 8222F1A8h case    1:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R9,regs.R29);
		/* 8222F1A8h case    1:*/		return 0x8222F1AC;
		  /* 8222F1ACh */ case    2:  		/* rlwinm R7, R29, 29, 29, 30 */
		/* 8222F1ACh case    2:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R7,regs.R29);
		/* 8222F1ACh case    2:*/		return 0x8222F1B0;
		  /* 8222F1B0h */ case    3:  		/* srw R9, R10, R9 */
		/* 8222F1B0h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 8222F1B0h case    3:*/		return 0x8222F1B4;
		  /* 8222F1B4h */ case    4:  		/* srw R7, R10, R7 */
		/* 8222F1B4h case    4:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R10,regs.R7);
		/* 8222F1B4h case    4:*/		return 0x8222F1B8;
		  /* 8222F1B8h */ case    5:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 8222F1B8h case    5:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 8222F1B8h case    5:*/		return 0x8222F1BC;
		  /* 8222F1BCh */ case    6:  		/* rlwinm R6, R29, 31, 29, 30 */
		/* 8222F1BCh case    6:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R6,regs.R29);
		/* 8222F1BCh case    6:*/		return 0x8222F1C0;
		  /* 8222F1C0h */ case    7:  		/* rlwinm R9, R29, 1, 29, 30 */
		/* 8222F1C0h case    7:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R9,regs.R29);
		/* 8222F1C0h case    7:*/		return 0x8222F1C4;
		  /* 8222F1C4h */ case    8:  		/* srw R6, R10, R6 */
		/* 8222F1C4h case    8:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R10,regs.R6);
		/* 8222F1C4h case    8:*/		return 0x8222F1C8;
		  /* 8222F1C8h */ case    9:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 8222F1C8h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 8222F1C8h case    9:*/		return 0x8222F1CC;
		  /* 8222F1CCh */ case   10:  		/* srw R29, R10, R9 */
		/* 8222F1CCh case   10:*/		cpu::op::srw<0>(regs,&regs.R29,regs.R10,regs.R9);
		/* 8222F1CCh case   10:*/		return 0x8222F1D0;
		  /* 8222F1D0h */ case   11:  		/* rlwimi R6, R7, 2, 0, 29 */
		/* 8222F1D0h case   11:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R6,regs.R7);
		/* 8222F1D0h case   11:*/		return 0x8222F1D4;
		  /* 8222F1D4h */ case   12:  		/* mr R10, R30 */
		/* 8222F1D4h case   12:*/		regs.R10 = regs.R30;
		/* 8222F1D4h case   12:*/		return 0x8222F1D8;
		  /* 8222F1D8h */ case   13:  		/* mr R28, R8 */
		/* 8222F1D8h case   13:*/		regs.R28 = regs.R8;
		/* 8222F1D8h case   13:*/		return 0x8222F1DC;
		  /* 8222F1DCh */ case   14:  		/* rlwimi R29, R6, 2, 0, 29 */
		/* 8222F1DCh case   14:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R29,regs.R6);
		/* 8222F1DCh case   14:*/		return 0x8222F1E0;
		  /* 8222F1E0h */ case   15:  		/* rlwinm. R9, R11, 0, 29, 29 */
		/* 8222F1E0h case   15:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R11);
		/* 8222F1E0h case   15:*/		return 0x8222F1E4;
		  /* 8222F1E4h */ case   16:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F1E4h case   16:*/		if ( regs.CR[0].eq ) { return 0x8222F1F4;  }
		/* 8222F1E4h case   16:*/		return 0x8222F1E8;
		  /* 8222F1E8h */ case   17:  		/* rlwinm. R9, R30, 0, 30, 30 */
		/* 8222F1E8h case   17:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R30);
		/* 8222F1E8h case   17:*/		return 0x8222F1EC;
		  /* 8222F1ECh */ case   18:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F1ECh case   18:*/		if ( regs.CR[0].eq ) { return 0x8222F1F4;  }
		/* 8222F1ECh case   18:*/		return 0x8222F1F0;
		  /* 8222F1F0h */ case   19:  		/* addi R11, R11, -4 */
		/* 8222F1F0h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8222F1F0h case   19:*/		return 0x8222F1F4;
	}
	return 0x8222F1F4;
} // Block from 8222F1A4h-8222F1F4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8222F1F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F1F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F1F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F1F4);
		  /* 8222F1F4h */ case    0:  		/* and R9, R11, R30 */
		/* 8222F1F4h case    0:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R30);
		/* 8222F1F4h case    0:*/		return 0x8222F1F8;
		  /* 8222F1F8h */ case    1:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 8222F1F8h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 8222F1F8h case    1:*/		return 0x8222F1FC;
		  /* 8222F1FCh */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F1FCh case    2:*/		if ( regs.CR[0].eq ) { return 0x8222F208;  }
		/* 8222F1FCh case    2:*/		return 0x8222F200;
		  /* 8222F200h */ case    3:  		/* addi R11, R11, -4 */
		/* 8222F200h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8222F200h case    3:*/		return 0x8222F204;
		  /* 8222F204h */ case    4:  		/* addi R10, R30, -4 */
		/* 8222F204h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFC);
		/* 8222F204h case    4:*/		return 0x8222F208;
	}
	return 0x8222F208;
} // Block from 8222F1F4h-8222F208h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F208);
		  /* 8222F208h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 8222F208h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 8222F208h case    0:*/		return 0x8222F20C;
		  /* 8222F20Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F20Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F21C;  }
		/* 8222F20Ch case    1:*/		return 0x8222F210;
		  /* 8222F210h */ case    2:  		/* rlwinm. R9, R10, 0, 30, 30 */
		/* 8222F210h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R10);
		/* 8222F210h case    2:*/		return 0x8222F214;
		  /* 8222F214h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F214h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222F21C;  }
		/* 8222F214h case    3:*/		return 0x8222F218;
		  /* 8222F218h */ case    4:  		/* addi R10, R10, -2 */
		/* 8222F218h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 8222F218h case    4:*/		return 0x8222F21C;
	}
	return 0x8222F21C;
} // Block from 8222F208h-8222F21Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F21Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F21C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F21C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F21C);
		  /* 8222F21Ch */ case    0:  		/* or R30, R11, R10 */
		/* 8222F21Ch case    0:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8222F21Ch case    0:*/		return 0x8222F220;
		  /* 8222F220h */ case    1:  		/* b -704 */
		/* 8222F220h case    1:*/		return 0x8222EF60;
		/* 8222F220h case    1:*/		return 0x8222F224;
		  /* 8222F224h */ case    2:  		/* nop */
		/* 8222F224h case    2:*/		cpu::op::nop();
		/* 8222F224h case    2:*/		return 0x8222F228;
	}
	return 0x8222F228;
} // Block from 8222F21Ch-8222F228h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222F228h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F228);
		  /* 8222F228h */ case    0:  		/* mfspr R12, LR */
		/* 8222F228h case    0:*/		regs.R12 = regs.LR;
		/* 8222F228h case    0:*/		return 0x8222F22C;
		  /* 8222F22Ch */ case    1:  		/* bl -1695700 */
		/* 8222F22Ch case    1:*/		regs.LR = 0x8222F230; return 0x82091258;
		/* 8222F22Ch case    1:*/		return 0x8222F230;
		  /* 8222F230h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8222F230h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8222F230h case    2:*/		return 0x8222F234;
		  /* 8222F234h */ case    3:  		/* addi R9, R1, 92 */
		/* 8222F234h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x5C);
		/* 8222F234h case    3:*/		return 0x8222F238;
		  /* 8222F238h */ case    4:  		/* lwz R11, <#[R4 + 8]> */
		/* 8222F238h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222F238h case    4:*/		return 0x8222F23C;
		  /* 8222F23Ch */ case    5:  		/* li R10, 0 */
		/* 8222F23Ch case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F23Ch case    5:*/		return 0x8222F240;
		  /* 8222F240h */ case    6:  		/* mr R30, R3 */
		/* 8222F240h case    6:*/		regs.R30 = regs.R3;
		/* 8222F240h case    6:*/		return 0x8222F244;
		  /* 8222F244h */ case    7:  		/* stw R10, <#[R1 + 88]> */
		/* 8222F244h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8222F244h case    7:*/		return 0x8222F248;
		  /* 8222F248h */ case    8:  		/* mr R31, R4 */
		/* 8222F248h case    8:*/		regs.R31 = regs.R4;
		/* 8222F248h case    8:*/		return 0x8222F24C;
		  /* 8222F24Ch */ case    9:  		/* mr R29, R5 */
		/* 8222F24Ch case    9:*/		regs.R29 = regs.R5;
		/* 8222F24Ch case    9:*/		return 0x8222F250;
		  /* 8222F250h */ case   10:  		/* mr R28, R6 */
		/* 8222F250h case   10:*/		regs.R28 = regs.R6;
		/* 8222F250h case   10:*/		return 0x8222F254;
		  /* 8222F254h */ case   11:  		/* stw R10, <#[R9]> */
		/* 8222F254h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8222F254h case   11:*/		return 0x8222F258;
		  /* 8222F258h */ case   12:  		/* rlwinm. R8, R11, 27, 31, 31 */
		/* 8222F258h case   12:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R8,regs.R11);
		/* 8222F258h case   12:*/		return 0x8222F25C;
		  /* 8222F25Ch */ case   13:  		/* bc 4, CR0_EQ, 136 */
		/* 8222F25Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x8222F2E4;  }
		/* 8222F25Ch case   13:*/		return 0x8222F260;
		  /* 8222F260h */ case   14:  		/* rlwinm. R9, R11, 7, 31, 31 */
		/* 8222F260h case   14:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R9,regs.R11);
		/* 8222F260h case   14:*/		return 0x8222F264;
		  /* 8222F264h */ case   15:  		/* bc 4, CR0_EQ, 128 */
		/* 8222F264h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8222F2E4;  }
		/* 8222F264h case   15:*/		return 0x8222F268;
		  /* 8222F268h */ case   16:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8222F268h case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8222F268h case   16:*/		return 0x8222F26C;
		  /* 8222F26Ch */ case   17:  		/* cmplwi CR6, R11, 83 */
		/* 8222F26Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 8222F26Ch case   17:*/		return 0x8222F270;
		  /* 8222F270h */ case   18:  		/* bc 12, CR6_LT, 16 */
		/* 8222F270h case   18:*/		if ( regs.CR[6].lt ) { return 0x8222F280;  }
		/* 8222F270h case   18:*/		return 0x8222F274;
		  /* 8222F274h */ case   19:  		/* cmplwi CR6, R11, 95 */
		/* 8222F274h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 8222F274h case   19:*/		return 0x8222F278;
		  /* 8222F278h */ case   20:  		/* bc 12, CR6_GT, 8 */
		/* 8222F278h case   20:*/		if ( regs.CR[6].gt ) { return 0x8222F280;  }
		/* 8222F278h case   20:*/		return 0x8222F27C;
		  /* 8222F27Ch */ case   21:  		/* li R10, 1 */
		/* 8222F27Ch case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222F27Ch case   21:*/		return 0x8222F280;
	}
	return 0x8222F280;
} // Block from 8222F228h-8222F280h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8222F280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F280);
		  /* 8222F280h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8222F280h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8222F280h case    0:*/		return 0x8222F284;
		  /* 8222F284h */ case    1:  		/* bc 4, CR0_EQ, 96 */
		/* 8222F284h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8222F2E4;  }
		/* 8222F284h case    1:*/		return 0x8222F288;
	}
	return 0x8222F288;
} // Block from 8222F280h-8222F288h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F288h
// Function '?MarkThroughBranchInstruction@Compiler@D3DXShader@@QAAXPAVInstruction@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F288);
		  /* 8222F288h */ case    0:  		/* cmplwi CR6, R11, 125 */
		/* 8222F288h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 8222F288h case    0:*/		return 0x8222F28C;
		  /* 8222F28Ch */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 8222F28Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8222F2E4;  }
		/* 8222F28Ch case    1:*/		return 0x8222F290;
		  /* 8222F290h */ case    2:  		/* addi R5, R1, 80 */
		/* 8222F290h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8222F290h case    2:*/		return 0x8222F294;
		  /* 8222F294h */ case    3:  		/* addi R4, R1, 96 */
		/* 8222F294h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8222F294h case    3:*/		return 0x8222F298;
		  /* 8222F298h */ case    4:  		/* mr R3, R31 */
		/* 8222F298h case    4:*/		regs.R3 = regs.R31;
		/* 8222F298h case    4:*/		return 0x8222F29C;
		  /* 8222F29Ch */ case    5:  		/* bl -32348 */
		/* 8222F29Ch case    5:*/		regs.LR = 0x8222F2A0; return 0x82227440;
		/* 8222F29Ch case    5:*/		return 0x8222F2A0;
		  /* 8222F2A0h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222F2A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222F2A0h case    6:*/		return 0x8222F2A4;
		  /* 8222F2A4h */ case    7:  		/* li R10, 1 */
		/* 8222F2A4h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222F2A4h case    7:*/		return 0x8222F2A8;
		  /* 8222F2A8h */ case    8:  		/* rlwinm R11, R11, 18, 29, 31 */
		/* 8222F2A8h case    8:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R11);
		/* 8222F2A8h case    8:*/		return 0x8222F2AC;
		  /* 8222F2ACh */ case    9:  		/* mr R6, R3 */
		/* 8222F2ACh case    9:*/		regs.R6 = regs.R3;
		/* 8222F2ACh case    9:*/		return 0x8222F2B0;
		  /* 8222F2B0h */ case   10:  		/* slw R11, R10, R11 */
		/* 8222F2B0h case   10:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8222F2B0h case   10:*/		return 0x8222F2B4;
		  /* 8222F2B4h */ case   11:  		/* addi R11, R11, -1 */
		/* 8222F2B4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222F2B4h case   11:*/		return 0x8222F2B8;
		  /* 8222F2B8h */ case   12:  		/* cmplw CR6, R3, R11 */
		/* 8222F2B8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8222F2B8h case   12:*/		return 0x8222F2BC;
		  /* 8222F2BCh */ case   13:  		/* mr R3, R30 */
		/* 8222F2BCh case   13:*/		regs.R3 = regs.R30;
		/* 8222F2BCh case   13:*/		return 0x8222F2C0;
		  /* 8222F2C0h */ case   14:  		/* bc 4, CR6_EQ, 40 */
		/* 8222F2C0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8222F2E8;  }
		/* 8222F2C0h case   14:*/		return 0x8222F2C4;
		  /* 8222F2C4h */ case   15:  		/* mr R8, R28 */
		/* 8222F2C4h case   15:*/		regs.R8 = regs.R28;
		/* 8222F2C4h case   15:*/		return 0x8222F2C8;
		  /* 8222F2C8h */ case   16:  		/* lwz R9, <#[R1 + 80]> */
		/* 8222F2C8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8222F2C8h case   16:*/		return 0x8222F2CC;
		  /* 8222F2CCh */ case   17:  		/* addi R7, R1, 96 */
		/* 8222F2CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8222F2CCh case   17:*/		return 0x8222F2D0;
		  /* 8222F2D0h */ case   18:  		/* mr R5, R31 */
		/* 8222F2D0h case   18:*/		regs.R5 = regs.R31;
		/* 8222F2D0h case   18:*/		return 0x8222F2D4;
		  /* 8222F2D4h */ case   19:  		/* mr R4, R29 */
		/* 8222F2D4h case   19:*/		regs.R4 = regs.R29;
		/* 8222F2D4h case   19:*/		return 0x8222F2D8;
		  /* 8222F2D8h */ case   20:  		/* bl -2208 */
		/* 8222F2D8h case   20:*/		regs.LR = 0x8222F2DC; return 0x8222EA38;
		/* 8222F2D8h case   20:*/		return 0x8222F2DC;
		  /* 8222F2DCh */ case   21:  		/* mr R3, R30 */
		/* 8222F2DCh case   21:*/		regs.R3 = regs.R30;
		/* 8222F2DCh case   21:*/		return 0x8222F2E0;
		  /* 8222F2E0h */ case   22:  		/* b 16 */
		/* 8222F2E0h case   22:*/		return 0x8222F2F0;
		/* 8222F2E0h case   22:*/		return 0x8222F2E4;
	}
	return 0x8222F2E4;
} // Block from 8222F288h-8222F2E4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8222F2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F2E4);
		  /* 8222F2E4h */ case    0:  		/* mr R3, R30 */
		/* 8222F2E4h case    0:*/		regs.R3 = regs.R30;
		/* 8222F2E4h case    0:*/		return 0x8222F2E8;
	}
	return 0x8222F2E8;
} // Block from 8222F2E4h-8222F2E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F2E8);
		  /* 8222F2E8h */ case    0:  		/* ld R11, <#[R1 + 88]> */
		/* 8222F2E8h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8222F2E8h case    0:*/		return 0x8222F2EC;
		  /* 8222F2ECh */ case    1:  		/* std R11, <#[R30]> */
		/* 8222F2ECh case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222F2ECh case    1:*/		return 0x8222F2F0;
	}
	return 0x8222F2F0;
} // Block from 8222F2E8h-8222F2F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F2F0);
		  /* 8222F2F0h */ case    0:  		/* addi R1, R1, 176 */
		/* 8222F2F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8222F2F0h case    0:*/		return 0x8222F2F4;
		  /* 8222F2F4h */ case    1:  		/* b -1695820 */
		/* 8222F2F4h case    1:*/		return 0x820912A8;
		/* 8222F2F4h case    1:*/		return 0x8222F2F8;
	}
	return 0x8222F2F8;
} // Block from 8222F2F0h-8222F2F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F2F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F2F8);
		  /* 8222F2F8h */ case    0:  		/* mfspr R12, LR */
		/* 8222F2F8h case    0:*/		regs.R12 = regs.LR;
		/* 8222F2F8h case    0:*/		return 0x8222F2FC;
		  /* 8222F2FCh */ case    1:  		/* bl -1695964 */
		/* 8222F2FCh case    1:*/		regs.LR = 0x8222F300; return 0x82091220;
		/* 8222F2FCh case    1:*/		return 0x8222F300;
		  /* 8222F300h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 8222F300h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 8222F300h case    2:*/		return 0x8222F304;
		  /* 8222F304h */ case    3:  		/* lwz R11, <#[R4]> */
		/* 8222F304h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8222F304h case    3:*/		return 0x8222F308;
		  /* 8222F308h */ case    4:  		/* mr R15, R4 */
		/* 8222F308h case    4:*/		regs.R15 = regs.R4;
		/* 8222F308h case    4:*/		return 0x8222F30C;
		  /* 8222F30Ch */ case    5:  		/* mr R14, R5 */
		/* 8222F30Ch case    5:*/		regs.R14 = regs.R5;
		/* 8222F30Ch case    5:*/		return 0x8222F310;
		  /* 8222F310h */ case    6:  		/* stw R3, <#[R1 + 372]> */
		/* 8222F310h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000174) );
		/* 8222F310h case    6:*/		return 0x8222F314;
		  /* 8222F314h */ case    7:  		/* mr R31, R6 */
		/* 8222F314h case    7:*/		regs.R31 = regs.R6;
		/* 8222F314h case    7:*/		return 0x8222F318;
		  /* 8222F318h */ case    8:  		/* stw R6, <#[R1 + 396]> */
		/* 8222F318h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000018C) );
		/* 8222F318h case    8:*/		return 0x8222F31C;
		  /* 8222F31Ch */ case    9:  		/* mr R29, R7 */
		/* 8222F31Ch case    9:*/		regs.R29 = regs.R7;
		/* 8222F31Ch case    9:*/		return 0x8222F320;
		  /* 8222F320h */ case   10:  		/* stw R7, <#[R1 + 404]> */
		/* 8222F320h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000194) );
		/* 8222F320h case   10:*/		return 0x8222F324;
		  /* 8222F324h */ case   11:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 8222F324h case   11:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 8222F324h case   11:*/		return 0x8222F328;
		  /* 8222F328h */ case   12:  		/* li R7, 0 */
		/* 8222F328h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8222F328h case   12:*/		return 0x8222F32C;
		  /* 8222F32Ch */ case   13:  		/* mr R6, R29 */
		/* 8222F32Ch case   13:*/		regs.R6 = regs.R29;
		/* 8222F32Ch case   13:*/		return 0x8222F330;
		  /* 8222F330h */ case   14:  		/* stw R11, <#[R1 + 92]> */
		/* 8222F330h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222F330h case   14:*/		return 0x8222F334;
		  /* 8222F334h */ case   15:  		/* mr R5, R31 */
		/* 8222F334h case   15:*/		regs.R5 = regs.R31;
		/* 8222F334h case   15:*/		return 0x8222F338;
		  /* 8222F338h */ case   16:  		/* mr R4, R14 */
		/* 8222F338h case   16:*/		regs.R4 = regs.R14;
		/* 8222F338h case   16:*/		return 0x8222F33C;
		  /* 8222F33Ch */ case   17:  		/* mr R3, R15 */
		/* 8222F33Ch case   17:*/		regs.R3 = regs.R15;
		/* 8222F33Ch case   17:*/		return 0x8222F340;
		  /* 8222F340h */ case   18:  		/* bl -1040 */
		/* 8222F340h case   18:*/		regs.LR = 0x8222F344; return 0x8222EF30;
		/* 8222F340h case   18:*/		return 0x8222F344;
		  /* 8222F344h */ case   19:  		/* lwz R11, <#[R14]> */
		/* 8222F344h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8222F344h case   19:*/		return 0x8222F348;
		  /* 8222F348h */ case   20:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F348h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F348h case   20:*/		return 0x8222F34C;
		  /* 8222F34Ch */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222F34Ch case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222F34Ch case   21:*/		return 0x8222F350;
		  /* 8222F350h */ case   22:  		/* cmplwi CR6, R11, 14080 */
		/* 8222F350h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 8222F350h case   22:*/		return 0x8222F354;
		  /* 8222F354h */ case   23:  		/* bc 4, CR6_EQ, 1252 */
		/* 8222F354h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8222F838;  }
		/* 8222F354h case   23:*/		return 0x8222F358;
		  /* 8222F358h */ case   24:  		/* li R18, -1 */
		/* 8222F358h case   24:*/		cpu::op::li<0>(regs,&regs.R18,0xFFFFFFFF);
		/* 8222F358h case   24:*/		return 0x8222F35C;
		  /* 8222F35Ch */ case   25:  		/* b 12 */
		/* 8222F35Ch case   25:*/		return 0x8222F368;
		/* 8222F35Ch case   25:*/		return 0x8222F360;
		  /* 8222F360h */ case   26:  		/* lwz R29, <#[R1 + 404]> */
		/* 8222F360h case   26:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000194) );
		/* 8222F360h case   26:*/		return 0x8222F364;
		  /* 8222F364h */ case   27:  		/* lwz R31, <#[R1 + 396]> */
		/* 8222F364h case   27:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000018C) );
		/* 8222F364h case   27:*/		return 0x8222F368;
	}
	return 0x8222F368;
} // Block from 8222F2F8h-8222F368h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8222F368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F368);
		  /* 8222F368h */ case    0:  		/* lwz R17, <#[R31]> */
		/* 8222F368h case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R31 + 0x00000000) );
		/* 8222F368h case    0:*/		return 0x8222F36C;
		  /* 8222F36Ch */ case    1:  		/* li R10, 0 */
		/* 8222F36Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F36Ch case    1:*/		return 0x8222F370;
		  /* 8222F370h */ case    2:  		/* lwz R16, <#[R14]> */
		/* 8222F370h case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R14 + 0x00000000) );
		/* 8222F370h case    2:*/		return 0x8222F374;
		  /* 8222F374h */ case    3:  		/* li R9, 0 */
		/* 8222F374h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8222F374h case    3:*/		return 0x8222F378;
		  /* 8222F378h */ case    4:  		/* rlwinm R11, R17, 0, 30, 31 */
		/* 8222F378h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R17);
		/* 8222F378h case    4:*/		return 0x8222F37C;
		  /* 8222F37Ch */ case    5:  		/* lwz R23, <#[R29]> */
		/* 8222F37Ch case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R29 + 0x00000000) );
		/* 8222F37Ch case    5:*/		return 0x8222F380;
		  /* 8222F380h */ case    6:  		/* li R8, 0 */
		/* 8222F380h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222F380h case    6:*/		return 0x8222F384;
		  /* 8222F384h */ case    7:  		/* addi R11, R11, 11 */
		/* 8222F384h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 8222F384h case    7:*/		return 0x8222F388;
		  /* 8222F388h */ case    8:  		/* addi R7, R1, 88 */
		/* 8222F388h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8222F388h case    8:*/		return 0x8222F38C;
		  /* 8222F38Ch */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222F38Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222F38Ch case    9:*/		return 0x8222F390;
		  /* 8222F390h */ case   10:  		/* addi R6, R1, 108 */
		/* 8222F390h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x6C);
		/* 8222F390h case   10:*/		return 0x8222F394;
		  /* 8222F394h */ case   11:  		/* stw R23, <#[R1 + 100]> */
		/* 8222F394h case   11:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000064) );
		/* 8222F394h case   11:*/		return 0x8222F398;
		  /* 8222F398h */ case   12:  		/* addi R5, R1, 80 */
		/* 8222F398h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8222F398h case   12:*/		return 0x8222F39C;
		  /* 8222F39Ch */ case   13:  		/* li R4, 0 */
		/* 8222F39Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222F39Ch case   13:*/		return 0x8222F3A0;
		  /* 8222F3A0h */ case   14:  		/* lwzx R3, <#[R11 + R16]> */
		/* 8222F3A0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 8222F3A0h case   14:*/		return 0x8222F3A4;
		  /* 8222F3A4h */ case   15:  		/* bl -48852 */
		/* 8222F3A4h case   15:*/		regs.LR = 0x8222F3A8; return 0x822234D0;
		/* 8222F3A4h case   15:*/		return 0x8222F3A8;
		  /* 8222F3A8h */ case   16:  		/* lwz R11, <#[R1 + 92]> */
		/* 8222F3A8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222F3A8h case   16:*/		return 0x8222F3AC;
		  /* 8222F3ACh */ case   17:  		/* li R28, 1 */
		/* 8222F3ACh case   17:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8222F3ACh case   17:*/		return 0x8222F3B0;
		  /* 8222F3B0h */ case   18:  		/* cmplwi CR6, R11, 1 */
		/* 8222F3B0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8222F3B0h case   18:*/		return 0x8222F3B4;
		  /* 8222F3B4h */ case   19:  		/* lwz R11, <#[R1 + 108]> */
		/* 8222F3B4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8222F3B4h case   19:*/		return 0x8222F3B8;
		  /* 8222F3B8h */ case   20:  		/* lwz R22, <#[R1 + 88]> */
		/* 8222F3B8h case   20:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000058) );
		/* 8222F3B8h case   20:*/		return 0x8222F3BC;
		  /* 8222F3BCh */ case   21:  		/* lwz R27, <#[R1 + 80]> */
		/* 8222F3BCh case   21:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 8222F3BCh case   21:*/		return 0x8222F3C0;
		  /* 8222F3C0h */ case   22:  		/* ori R21, R11, 228 */
		/* 8222F3C0h case   22:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R11,0xE4);
		/* 8222F3C0h case   22:*/		return 0x8222F3C4;
		  /* 8222F3C4h */ case   23:  		/* bc 4, CR6_GT, 808 */
		/* 8222F3C4h case   23:*/		if ( !regs.CR[6].gt ) { return 0x8222F6EC;  }
		/* 8222F3C4h case   23:*/		return 0x8222F3C8;
		  /* 8222F3C8h */ case   24:  		/* li R24, 2 */
		/* 8222F3C8h case   24:*/		cpu::op::li<0>(regs,&regs.R24,0x2);
		/* 8222F3C8h case   24:*/		return 0x8222F3CC;
		  /* 8222F3CCh */ case   25:  		/* addi R19, R1, 136 */
		/* 8222F3CCh case   25:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R1,0x88);
		/* 8222F3CCh case   25:*/		return 0x8222F3D0;
		  /* 8222F3D0h */ case   26:  		/* srw R11, R17, R24 */
		/* 8222F3D0h case   26:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R17,regs.R24);
		/* 8222F3D0h case   26:*/		return 0x8222F3D4;
		  /* 8222F3D4h */ case   27:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 8222F3D4h case   27:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 8222F3D4h case   27:*/		return 0x8222F3D8;
		  /* 8222F3D8h */ case   28:  		/* li R10, 0 */
		/* 8222F3D8h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F3D8h case   28:*/		return 0x8222F3DC;
		  /* 8222F3DCh */ case   29:  		/* addi R11, R11, 11 */
		/* 8222F3DCh case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 8222F3DCh case   29:*/		return 0x8222F3E0;
		  /* 8222F3E0h */ case   30:  		/* li R9, 0 */
		/* 8222F3E0h case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8222F3E0h case   30:*/		return 0x8222F3E4;
		  /* 8222F3E4h */ case   31:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222F3E4h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222F3E4h case   31:*/		return 0x8222F3E8;
		  /* 8222F3E8h */ case   32:  		/* li R8, 0 */
		/* 8222F3E8h case   32:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8222F3E8h case   32:*/		return 0x8222F3EC;
		  /* 8222F3ECh */ case   33:  		/* addi R7, R1, 120 */
		/* 8222F3ECh case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x78);
		/* 8222F3ECh case   33:*/		return 0x8222F3F0;
		  /* 8222F3F0h */ case   34:  		/* addi R6, R1, 112 */
		/* 8222F3F0h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 8222F3F0h case   34:*/		return 0x8222F3F4;
		  /* 8222F3F4h */ case   35:  		/* addi R5, R1, 116 */
		/* 8222F3F4h case   35:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 8222F3F4h case   35:*/		return 0x8222F3F8;
		  /* 8222F3F8h */ case   36:  		/* li R4, 0 */
		/* 8222F3F8h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8222F3F8h case   36:*/		return 0x8222F3FC;
		  /* 8222F3FCh */ case   37:  		/* lwzx R3, <#[R11 + R16]> */
		/* 8222F3FCh case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 8222F3FCh case   37:*/		return 0x8222F400;
		  /* 8222F400h */ case   38:  		/* bl -48944 */
		/* 8222F400h case   38:*/		regs.LR = 0x8222F404; return 0x822234D0;
		/* 8222F400h case   38:*/		return 0x8222F404;
		  /* 8222F404h */ case   39:  		/* li R11, 3 */
		/* 8222F404h case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8222F404h case   39:*/		return 0x8222F408;
		  /* 8222F408h */ case   40:  		/* slw R11, R11, R24 */
		/* 8222F408h case   40:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 8222F408h case   40:*/		return 0x8222F40C;
		  /* 8222F40Ch */ case   41:  		/* andc R11, R21, R11 */
		/* 8222F40Ch case   41:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 8222F40Ch case   41:*/		return 0x8222F410;
		  /* 8222F410h */ case   42:  		/* lwz R30, <#[R1 + 112]> */
		/* 8222F410h case   42:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 8222F410h case   42:*/		return 0x8222F414;
		  /* 8222F414h */ case   43:  		/* lwz R25, <#[R1 + 116]> */
		/* 8222F414h case   43:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000074) );
		/* 8222F414h case   43:*/		return 0x8222F418;
		  /* 8222F418h */ case   44:  		/* slw R10, R30, R24 */
		/* 8222F418h case   44:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R30,regs.R24);
		/* 8222F418h case   44:*/		return 0x8222F41C;
		  /* 8222F41Ch */ case   45:  		/* lwz R20, <#[R1 + 120]> */
		/* 8222F41Ch case   45:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000078) );
		/* 8222F41Ch case   45:*/		return 0x8222F420;
		  /* 8222F420h */ case   46:  		/* cmplw CR6, R27, R25 */
		/* 8222F420h case   46:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R25);
		/* 8222F420h case   46:*/		return 0x8222F424;
		  /* 8222F424h */ case   47:  		/* or R21, R11, R10 */
		/* 8222F424h case   47:*/		cpu::op::or<0>(regs,&regs.R21,regs.R11,regs.R10);
		/* 8222F424h case   47:*/		return 0x8222F428;
		  /* 8222F428h */ case   48:  		/* bc 12, CR6_EQ, 280 */
		/* 8222F428h case   48:*/		if ( regs.CR[6].eq ) { return 0x8222F540;  }
		/* 8222F428h case   48:*/		return 0x8222F42C;
		  /* 8222F42Ch */ case   49:  		/* lwz R11, <#[R27 + 8]> */
		/* 8222F42Ch case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8222F42Ch case   49:*/		return 0x8222F430;
		  /* 8222F430h */ case   50:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222F430h case   50:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222F430h case   50:*/		return 0x8222F434;
		  /* 8222F434h */ case   51:  		/* cmplwi CR6, R11, 16000 */
		/* 8222F434h case   51:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 8222F434h case   51:*/		return 0x8222F438;
		  /* 8222F438h */ case   52:  		/* bc 12, CR6_EQ, 256 */
		/* 8222F438h case   52:*/		if ( regs.CR[6].eq ) { return 0x8222F538;  }
		/* 8222F438h case   52:*/		return 0x8222F43C;
		  /* 8222F43Ch */ case   53:  		/* addi R5, R1, 124 */
		/* 8222F43Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 8222F43Ch case   53:*/		return 0x8222F440;
		  /* 8222F440h */ case   54:  		/* addi R4, R1, 128 */
		/* 8222F440h case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 8222F440h case   54:*/		return 0x8222F444;
		  /* 8222F444h */ case   55:  		/* mr R3, R27 */
		/* 8222F444h case   55:*/		regs.R3 = regs.R27;
		/* 8222F444h case   55:*/		return 0x8222F448;
		  /* 8222F448h */ case   56:  		/* bl -32776 */
		/* 8222F448h case   56:*/		regs.LR = 0x8222F44C; return 0x82227440;
		/* 8222F448h case   56:*/		return 0x8222F44C;
		  /* 8222F44Ch */ case   57:  		/* addi R11, R1, 96 */
		/* 8222F44Ch case   57:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8222F44Ch case   57:*/		return 0x8222F450;
	}
	return 0x8222F450;
} // Block from 8222F368h-8222F450h (58 instructions)

//////////////////////////////////////////////////////
// Block at 8222F450h
// Function '?Fold@Compiler@D3DXShader@@QAA?AUFoldResult@2@PAVInstruction@2@IQANPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@V?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$01@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F450);
		  /* 8222F450h */ case    0:  		/* li R31, 0 */
		/* 8222F450h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8222F450h case    0:*/		return 0x8222F454;
		  /* 8222F454h */ case    1:  		/* mr R26, R3 */
		/* 8222F454h case    1:*/		regs.R26 = regs.R3;
		/* 8222F454h case    1:*/		return 0x8222F458;
		  /* 8222F458h */ case    2:  		/* mr R29, R31 */
		/* 8222F458h case    2:*/		regs.R29 = regs.R31;
		/* 8222F458h case    2:*/		return 0x8222F45C;
		  /* 8222F45Ch */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 8222F45Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222F45Ch case    3:*/		return 0x8222F460;
		  /* 8222F460h */ case    4:  		/* stw R31, <#[R11]> */
		/* 8222F460h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F460h case    4:*/		return 0x8222F464;
		  /* 8222F464h */ case    5:  		/* bc 12, CR6_EQ, 168 */
		/* 8222F464h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222F50C;  }
		/* 8222F464h case    5:*/		return 0x8222F468;
		  /* 8222F468h */ case    6:  		/* addi R11, R1, 160 */
		/* 8222F468h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 8222F468h case    6:*/		return 0x8222F46C;
		  /* 8222F46Ch */ case    7:  		/* addi R27, R11, -8 */
		/* 8222F46Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFFFF8);
		/* 8222F46Ch case    7:*/		return 0x8222F470;
		  /* 8222F470h */ case    8:  		/* srw R11, R21, R31 */
		/* 8222F470h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R21,regs.R31);
		/* 8222F470h case    8:*/		return 0x8222F474;
		  /* 8222F474h */ case    9:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 8222F474h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 8222F474h case    9:*/		return 0x8222F478;
		  /* 8222F478h */ case   10:  		/* li R10, 1 */
		/* 8222F478h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8222F478h case   10:*/		return 0x8222F47C;
		  /* 8222F47Ch */ case   11:  		/* slw R10, R10, R11 */
		/* 8222F47Ch case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8222F47Ch case   11:*/		return 0x8222F480;
		  /* 8222F480h */ case   12:  		/* and. R10, R10, R26 */
		/* 8222F480h case   12:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R26);
		/* 8222F480h case   12:*/		return 0x8222F484;
		  /* 8222F484h */ case   13:  		/* bc 12, CR0_EQ, 948 */
		/* 8222F484h case   13:*/		if ( regs.CR[0].eq ) { return 0x8222F838;  }
		/* 8222F484h case   13:*/		return 0x8222F488;
		  /* 8222F488h */ case   14:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 8222F488h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 8222F488h case   14:*/		return 0x8222F48C;
		  /* 8222F48Ch */ case   15:  		/* rlwinm R9, R11, 30, 3, 29 */
		/* 8222F48Ch case   15:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R9,regs.R11);
		/* 8222F48Ch case   15:*/		return 0x8222F490;
		  /* 8222F490h */ case   16:  		/* addi R10, R10, 1 */
		/* 8222F490h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8222F490h case   16:*/		return 0x8222F494;
		  /* 8222F494h */ case   17:  		/* addi R8, R1, 124 */
		/* 8222F494h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x7C);
		/* 8222F494h case   17:*/		return 0x8222F498;
		  /* 8222F498h */ case   18:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8222F498h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8222F498h case   18:*/		return 0x8222F49C;
		  /* 8222F49Ch */ case   19:  		/* li R7, 2 */
		/* 8222F49Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8222F49Ch case   19:*/		return 0x8222F4A0;
		  /* 8222F4A0h */ case   20:  		/* rlwinm R6, R11, 1, 27, 30 */
		/* 8222F4A0h case   20:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R6,regs.R11);
		/* 8222F4A0h case   20:*/		return 0x8222F4A4;
		  /* 8222F4A4h */ case   21:  		/* slw R10, R7, R10 */
		/* 8222F4A4h case   21:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 8222F4A4h case   21:*/		return 0x8222F4A8;
		  /* 8222F4A8h */ case   22:  		/* lwzx R9, <#[R9 + R8]> */
		/* 8222F4A8h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8222F4A8h case   22:*/		return 0x8222F4AC;
		  /* 8222F4ACh */ case   23:  		/* addi R10, R10, -1 */
		/* 8222F4ACh case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8222F4ACh case   23:*/		return 0x8222F4B0;
		  /* 8222F4B0h */ case   24:  		/* slw R8, R18, R6 */
		/* 8222F4B0h case   24:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R18,regs.R6);
		/* 8222F4B0h case   24:*/		return 0x8222F4B4;
		  /* 8222F4B4h */ case   25:  		/* and R10, R10, R9 */
		/* 8222F4B4h case   25:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8222F4B4h case   25:*/		return 0x8222F4B8;
		  /* 8222F4B8h */ case   26:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 8222F4B8h case   26:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 8222F4B8h case   26:*/		return 0x8222F4BC;
		  /* 8222F4BCh */ case   27:  		/* and R10, R10, R8 */
		/* 8222F4BCh case   27:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8222F4BCh case   27:*/		return 0x8222F4C0;
		  /* 8222F4C0h */ case   28:  		/* addi R9, R1, 128 */
		/* 8222F4C0h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 8222F4C0h case   28:*/		return 0x8222F4C4;
		  /* 8222F4C4h */ case   29:  		/* srw R23, R10, R6 */
		/* 8222F4C4h case   29:*/		cpu::op::srw<0>(regs,&regs.R23,regs.R10,regs.R6);
		/* 8222F4C4h case   29:*/		return 0x8222F4C8;
		  /* 8222F4C8h */ case   30:  		/* mr R5, R22 */
		/* 8222F4C8h case   30:*/		regs.R5 = regs.R22;
		/* 8222F4C8h case   30:*/		return 0x8222F4CC;
		  /* 8222F4CCh */ case   31:  		/* lfdx FR1, <#[R11 + R9]> */
		/* 8222F4CCh case   31:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8222F4CCh case   31:*/		return 0x8222F4D0;
		  /* 8222F4D0h */ case   32:  		/* mr R4, R23 */
		/* 8222F4D0h case   32:*/		regs.R4 = regs.R23;
		/* 8222F4D0h case   32:*/		return 0x8222F4D4;
		  /* 8222F4D4h */ case   33:  		/* bl -57436 */
		/* 8222F4D4h case   33:*/		regs.LR = 0x8222F4D8; return 0x82221478;
		/* 8222F4D4h case   33:*/		return 0x8222F4D8;
		  /* 8222F4D8h */ case   34:  		/* rlwinm R10, R31, 29, 3, 29 */
		/* 8222F4D8h case   34:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R31);
		/* 8222F4D8h case   34:*/		return 0x8222F4DC;
		  /* 8222F4DCh */ case   35:  		/* addi R11, R1, 96 */
		/* 8222F4DCh case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8222F4DCh case   35:*/		return 0x8222F4E0;
		  /* 8222F4E0h */ case   36:  		/* stfdu FR1, <#[R27 + 8]> */
		/* 8222F4E0h case   36:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R27 + 0x00000008) );
		regs.R27 = (uint32)(regs.R27 + 0x00000008);
		/* 8222F4E0h case   36:*/		return 0x8222F4E4;
		  /* 8222F4E4h */ case   37:  		/* rlwinm R9, R31, 0, 27, 31 */
		/* 8222F4E4h case   37:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R31);
		/* 8222F4E4h case   37:*/		return 0x8222F4E8;
		  /* 8222F4E8h */ case   38:  		/* addi R29, R29, 1 */
		/* 8222F4E8h case   38:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8222F4E8h case   38:*/		return 0x8222F4EC;
		  /* 8222F4ECh */ case   39:  		/* slw R9, R23, R9 */
		/* 8222F4ECh case   39:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 8222F4ECh case   39:*/		return 0x8222F4F0;
		  /* 8222F4F0h */ case   40:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8222F4F0h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222F4F0h case   40:*/		return 0x8222F4F4;
		  /* 8222F4F4h */ case   41:  		/* addi R31, R31, 2 */
		/* 8222F4F4h case   41:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 8222F4F4h case   41:*/		return 0x8222F4F8;
		  /* 8222F4F8h */ case   42:  		/* cmplw CR6, R29, R28 */
		/* 8222F4F8h case   42:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 8222F4F8h case   42:*/		return 0x8222F4FC;
		  /* 8222F4FCh */ case   43:  		/* or R9, R9, R8 */
		/* 8222F4FCh case   43:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8222F4FCh case   43:*/		return 0x8222F500;
		  /* 8222F500h */ case   44:  		/* stwx R9, <#[R10 + R11]> */
		/* 8222F500h case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222F500h case   44:*/		return 0x8222F504;
		  /* 8222F504h */ case   45:  		/* bc 12, CR6_LT, -148 */
		/* 8222F504h case   45:*/		if ( regs.CR[6].lt ) { return 0x8222F470;  }
		/* 8222F504h case   45:*/		return 0x8222F508;
		  /* 8222F508h */ case   46:  		/* lwz R23, <#[R1 + 100]> */
		/* 8222F508h case   46:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000064) );
		/* 8222F508h case   46:*/		return 0x8222F50C;
	}
	return 0x8222F50C;
} // Block from 8222F450h-8222F50Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 8222F50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F50C);
		  /* 8222F50Ch */ case    0:  		/* addi R5, R1, 160 */
		/* 8222F50Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 8222F50Ch case    0:*/		return 0x8222F510;
		  /* 8222F510h */ case    1:  		/* lwz R6, <#[R1 + 96]> */
		/* 8222F510h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 8222F510h case    1:*/		return 0x8222F514;
		  /* 8222F514h */ case    2:  		/* mr R4, R28 */
		/* 8222F514h case    2:*/		regs.R4 = regs.R28;
		/* 8222F514h case    2:*/		return 0x8222F518;
		  /* 8222F518h */ case    3:  		/* lwz R3, <#[R1 + 372]> */
		/* 8222F518h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000174) );
		/* 8222F518h case    3:*/		return 0x8222F51C;
		  /* 8222F51Ch */ case    4:  		/* bl -33508 */
		/* 8222F51Ch case    4:*/		regs.LR = 0x8222F520; return 0x82227238;
		/* 8222F51Ch case    4:*/		return 0x8222F520;
		  /* 8222F520h */ case    5:  		/* lwz R29, <#[R1 + 404]> */
		/* 8222F520h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000194) );
		/* 8222F520h case    5:*/		return 0x8222F524;
		  /* 8222F524h */ case    6:  		/* lwz R31, <#[R1 + 396]> */
		/* 8222F524h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000018C) );
		/* 8222F524h case    6:*/		return 0x8222F528;
		  /* 8222F528h */ case    7:  		/* mr R27, R3 */
		/* 8222F528h case    7:*/		regs.R27 = regs.R3;
		/* 8222F528h case    7:*/		return 0x8222F52C;
		  /* 8222F52Ch */ case    8:  		/* li R21, 228 */
		/* 8222F52Ch case    8:*/		cpu::op::li<0>(regs,&regs.R21,0xE4);
		/* 8222F52Ch case    8:*/		return 0x8222F530;
		  /* 8222F530h */ case    9:  		/* stw R3, <#[R1 + 80]> */
		/* 8222F530h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8222F530h case    9:*/		return 0x8222F534;
		  /* 8222F534h */ case   10:  		/* li R22, 0 */
		/* 8222F534h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8222F534h case   10:*/		return 0x8222F538;
	}
	return 0x8222F538;
} // Block from 8222F50Ch-8222F538h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222F538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F538);
		  /* 8222F538h */ case    0:  		/* cmplw CR6, R27, R25 */
		/* 8222F538h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R25);
		/* 8222F538h case    0:*/		return 0x8222F53C;
		  /* 8222F53Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8222F53Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222F548;  }
		/* 8222F53Ch case    1:*/		return 0x8222F540;
	}
	return 0x8222F540;
} // Block from 8222F538h-8222F540h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F540);
		  /* 8222F540h */ case    0:  		/* cmplw CR6, R22, R20 */
		/* 8222F540h case    0:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R20);
		/* 8222F540h case    0:*/		return 0x8222F544;
		  /* 8222F544h */ case    1:  		/* bc 12, CR6_EQ, 400 */
		/* 8222F544h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222F6D4;  }
		/* 8222F544h case    1:*/		return 0x8222F548;
	}
	return 0x8222F548;
} // Block from 8222F540h-8222F548h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F548);
		  /* 8222F548h */ case    0:  		/* addi R5, R1, 104 */
		/* 8222F548h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 8222F548h case    0:*/		return 0x8222F54C;
		  /* 8222F54Ch */ case    1:  		/* addi R4, R1, 160 */
		/* 8222F54Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 8222F54Ch case    1:*/		return 0x8222F550;
		  /* 8222F550h */ case    2:  		/* mr R3, R25 */
		/* 8222F550h case    2:*/		regs.R3 = regs.R25;
		/* 8222F550h case    2:*/		return 0x8222F554;
		  /* 8222F554h */ case    3:  		/* bl -33044 */
		/* 8222F554h case    3:*/		regs.LR = 0x8222F558; return 0x82227440;
		/* 8222F554h case    3:*/		return 0x8222F558;
		  /* 8222F558h */ case    4:  		/* li R11, 1 */
		/* 8222F558h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222F558h case    4:*/		return 0x8222F55C;
		  /* 8222F55Ch */ case    5:  		/* slw R11, R11, R30 */
		/* 8222F55Ch case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8222F55Ch case    5:*/		return 0x8222F560;
		  /* 8222F560h */ case    6:  		/* and. R11, R3, R11 */
		/* 8222F560h case    6:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8222F560h case    6:*/		return 0x8222F564;
		  /* 8222F564h */ case    7:  		/* bc 12, CR0_EQ, 724 */
		/* 8222F564h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222F838;  }
		/* 8222F564h case    7:*/		return 0x8222F568;
		  /* 8222F568h */ case    8:  		/* addi R11, R1, 84 */
		/* 8222F568h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x54);
		/* 8222F568h case    8:*/		return 0x8222F56C;
		  /* 8222F56Ch */ case    9:  		/* li R10, 0 */
		/* 8222F56Ch case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222F56Ch case    9:*/		return 0x8222F570;
		  /* 8222F570h */ case   10:  		/* cmplwi CR6, R28, 0 */
		/* 8222F570h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222F570h case   10:*/		return 0x8222F574;
		  /* 8222F574h */ case   11:  		/* stw R10, <#[R11]> */
		/* 8222F574h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F574h case   11:*/		return 0x8222F578;
		  /* 8222F578h */ case   12:  		/* bc 12, CR6_EQ, 148 */
		/* 8222F578h case   12:*/		if ( regs.CR[6].eq ) { return 0x8222F60C;  }
		/* 8222F578h case   12:*/		return 0x8222F57C;
		  /* 8222F57Ch */ case   13:  		/* rlwinm R23, R27, 0, 0, 19 */
		/* 8222F57Ch case   13:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R23,regs.R27);
		/* 8222F57Ch case   13:*/		return 0x8222F580;
		  /* 8222F580h */ case   14:  		/* li R31, 0 */
		/* 8222F580h case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8222F580h case   14:*/		return 0x8222F584;
		  /* 8222F584h */ case   15:  		/* addi R29, R1, 128 */
		/* 8222F584h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x80);
		/* 8222F584h case   15:*/		return 0x8222F588;
		  /* 8222F588h */ case   16:  		/* mr R25, R28 */
		/* 8222F588h case   16:*/		regs.R25 = regs.R28;
		/* 8222F588h case   16:*/		return 0x8222F58C;
		  /* 8222F58Ch */ case   17:  		/* srw R11, R21, R31 */
		/* 8222F58Ch case   17:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R21,regs.R31);
		/* 8222F58Ch case   17:*/		return 0x8222F590;
		  /* 8222F590h */ case   18:  		/* rlwinm R26, R11, 0, 30, 31 */
		/* 8222F590h case   18:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R26,regs.R11);
		/* 8222F590h case   18:*/		return 0x8222F594;
		  /* 8222F594h */ case   19:  		/* mr R5, R22 */
		/* 8222F594h case   19:*/		regs.R5 = regs.R22;
		/* 8222F594h case   19:*/		return 0x8222F598;
		  /* 8222F598h */ case   20:  		/* mr R4, R26 */
		/* 8222F598h case   20:*/		regs.R4 = regs.R26;
		/* 8222F598h case   20:*/		return 0x8222F59C;
		  /* 8222F59Ch */ case   21:  		/* mr R3, R27 */
		/* 8222F59Ch case   21:*/		regs.R3 = regs.R27;
		/* 8222F59Ch case   21:*/		return 0x8222F5A0;
		  /* 8222F5A0h */ case   22:  		/* bl -57088 */
		/* 8222F5A0h case   22:*/		regs.LR = 0x8222F5A4; return 0x822216A0;
		/* 8222F5A0h case   22:*/		return 0x8222F5A4;
		  /* 8222F5A4h */ case   23:  		/* lwz R11, <#[R23]> */
		/* 8222F5A4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8222F5A4h case   23:*/		return 0x8222F5A8;
		  /* 8222F5A8h */ case   24:  		/* stfd FR1, <#[R29]> */
		/* 8222F5A8h case   24:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 8222F5A8h case   24:*/		return 0x8222F5AC;
		  /* 8222F5ACh */ case   25:  		/* lwz R11, <#[R11 + 148]> */
		/* 8222F5ACh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000094) );
		/* 8222F5ACh case   25:*/		return 0x8222F5B0;
		  /* 8222F5B0h */ case   26:  		/* lwz R11, <#[R11 + 40]> */
		/* 8222F5B0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8222F5B0h case   26:*/		return 0x8222F5B4;
		  /* 8222F5B4h */ case   27:  		/* nor R11, R11, R11 */
		/* 8222F5B4h case   27:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8222F5B4h case   27:*/		return 0x8222F5B8;
		  /* 8222F5B8h */ case   28:  		/* rlwinm. R11, R11, 18, 31, 31 */
		/* 8222F5B8h case   28:*/		cpu::op::rlwinm<1,18,31,31>(regs,&regs.R11,regs.R11);
		/* 8222F5B8h case   28:*/		return 0x8222F5BC;
		  /* 8222F5BCh */ case   29:  		/* bc 4, CR0_EQ, 12 */
		/* 8222F5BCh case   29:*/		if ( !regs.CR[0].eq ) { return 0x8222F5C8;  }
		/* 8222F5BCh case   29:*/		return 0x8222F5C0;
		  /* 8222F5C0h */ case   30:  		/* li R9, 0 */
		/* 8222F5C0h case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8222F5C0h case   30:*/		return 0x8222F5C4;
		  /* 8222F5C4h */ case   31:  		/* b 24 */
		/* 8222F5C4h case   31:*/		return 0x8222F5DC;
		/* 8222F5C4h case   31:*/		return 0x8222F5C8;
	}
	return 0x8222F5C8;
} // Block from 8222F548h-8222F5C8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8222F5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F5C8);
		  /* 8222F5C8h */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 8222F5C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8222F5C8h case    0:*/		return 0x8222F5CC;
		  /* 8222F5CCh */ case    1:  		/* rlwinm R10, R26, 1, 0, 30 */
		/* 8222F5CCh case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R26);
		/* 8222F5CCh case    1:*/		return 0x8222F5D0;
		  /* 8222F5D0h */ case    2:  		/* rlwinm R11, R11, 30, 24, 31 */
		/* 8222F5D0h case    2:*/		cpu::op::rlwinm<0,30,24,31>(regs,&regs.R11,regs.R11);
		/* 8222F5D0h case    2:*/		return 0x8222F5D4;
		  /* 8222F5D4h */ case    3:  		/* srw R11, R11, R10 */
		/* 8222F5D4h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222F5D4h case    3:*/		return 0x8222F5D8;
		  /* 8222F5D8h */ case    4:  		/* rlwinm R9, R11, 0, 30, 31 */
		/* 8222F5D8h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R11);
		/* 8222F5D8h case    4:*/		return 0x8222F5DC;
	}
	return 0x8222F5DC;
} // Block from 8222F5C8h-8222F5DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F5DC);
		  /* 8222F5DCh */ case    0:  		/* rlwinm R10, R31, 29, 3, 29 */
		/* 8222F5DCh case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R31);
		/* 8222F5DCh case    0:*/		return 0x8222F5E0;
		  /* 8222F5E0h */ case    1:  		/* addi R11, R1, 84 */
		/* 8222F5E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x54);
		/* 8222F5E0h case    1:*/		return 0x8222F5E4;
		  /* 8222F5E4h */ case    2:  		/* rlwinm R8, R31, 0, 27, 31 */
		/* 8222F5E4h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R31);
		/* 8222F5E4h case    2:*/		return 0x8222F5E8;
		  /* 8222F5E8h */ case    3:  		/* addic. R25, R25, -1 */
		/* 8222F5E8h case    3:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 8222F5E8h case    3:*/		return 0x8222F5EC;
		  /* 8222F5ECh */ case    4:  		/* slw R9, R9, R8 */
		/* 8222F5ECh case    4:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8222F5ECh case    4:*/		return 0x8222F5F0;
		  /* 8222F5F0h */ case    5:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8222F5F0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222F5F0h case    5:*/		return 0x8222F5F4;
		  /* 8222F5F4h */ case    6:  		/* addi R29, R29, 8 */
		/* 8222F5F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 8222F5F4h case    6:*/		return 0x8222F5F8;
		  /* 8222F5F8h */ case    7:  		/* addi R31, R31, 2 */
		/* 8222F5F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 8222F5F8h case    7:*/		return 0x8222F5FC;
		  /* 8222F5FCh */ case    8:  		/* or R9, R9, R8 */
		/* 8222F5FCh case    8:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8222F5FCh case    8:*/		return 0x8222F600;
		  /* 8222F600h */ case    9:  		/* stwx R9, <#[R10 + R11]> */
		/* 8222F600h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222F600h case    9:*/		return 0x8222F604;
		  /* 8222F604h */ case   10:  		/* bc 4, CR0_EQ, -120 */
		/* 8222F604h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8222F58C;  }
		/* 8222F604h case   10:*/		return 0x8222F608;
		  /* 8222F608h */ case   11:  		/* lwz R23, <#[R1 + 100]> */
		/* 8222F608h case   11:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000064) );
		/* 8222F608h case   11:*/		return 0x8222F60C;
	}
	return 0x8222F60C;
} // Block from 8222F5DCh-8222F60Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222F60Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F60C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F60C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F60C);
		  /* 8222F60Ch */ case    0:  		/* rlwinm R31, R30, 1, 0, 30 */
		/* 8222F60Ch case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R31,regs.R30);
		/* 8222F60Ch case    0:*/		return 0x8222F610;
		  /* 8222F610h */ case    1:  		/* addi R9, R1, 104 */
		/* 8222F610h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x68);
		/* 8222F610h case    1:*/		return 0x8222F614;
		  /* 8222F614h */ case    2:  		/* addi R11, R31, 1 */
		/* 8222F614h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 8222F614h case    2:*/		return 0x8222F618;
		  /* 8222F618h */ case    3:  		/* rlwinm R10, R30, 30, 3, 29 */
		/* 8222F618h case    3:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R10,regs.R30);
		/* 8222F618h case    3:*/		return 0x8222F61C;
		  /* 8222F61Ch */ case    4:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8222F61Ch case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8222F61Ch case    4:*/		return 0x8222F620;
		  /* 8222F620h */ case    5:  		/* li R29, 2 */
		/* 8222F620h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x2);
		/* 8222F620h case    5:*/		return 0x8222F624;
		  /* 8222F624h */ case    6:  		/* rlwinm R8, R30, 1, 27, 30 */
		/* 8222F624h case    6:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R8,regs.R30);
		/* 8222F624h case    6:*/		return 0x8222F628;
		  /* 8222F628h */ case    7:  		/* slw R11, R29, R11 */
		/* 8222F628h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 8222F628h case    7:*/		return 0x8222F62C;
		  /* 8222F62Ch */ case    8:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8222F62Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8222F62Ch case    8:*/		return 0x8222F630;
		  /* 8222F630h */ case    9:  		/* addi R11, R11, -1 */
		/* 8222F630h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222F630h case    9:*/		return 0x8222F634;
		  /* 8222F634h */ case   10:  		/* slw R9, R18, R8 */
		/* 8222F634h case   10:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R18,regs.R8);
		/* 8222F634h case   10:*/		return 0x8222F638;
		  /* 8222F638h */ case   11:  		/* and R11, R11, R10 */
		/* 8222F638h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8222F638h case   11:*/		return 0x8222F63C;
		  /* 8222F63Ch */ case   12:  		/* rlwinm R10, R30, 3, 0, 28 */
		/* 8222F63Ch case   12:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R30);
		/* 8222F63Ch case   12:*/		return 0x8222F640;
		  /* 8222F640h */ case   13:  		/* addi R7, R1, 160 */
		/* 8222F640h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 8222F640h case   13:*/		return 0x8222F644;
		  /* 8222F644h */ case   14:  		/* and R11, R11, R9 */
		/* 8222F644h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8222F644h case   14:*/		return 0x8222F648;
		  /* 8222F648h */ case   15:  		/* mr R5, R20 */
		/* 8222F648h case   15:*/		regs.R5 = regs.R20;
		/* 8222F648h case   15:*/		return 0x8222F64C;
		  /* 8222F64Ch */ case   16:  		/* srw R4, R11, R8 */
		/* 8222F64Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R11,regs.R8);
		/* 8222F64Ch case   16:*/		return 0x8222F650;
		  /* 8222F650h */ case   17:  		/* lfdx FR1, <#[R10 + R7]> */
		/* 8222F650h case   17:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8222F650h case   17:*/		return 0x8222F654;
		  /* 8222F654h */ case   18:  		/* bl -57820 */
		/* 8222F654h case   18:*/		regs.LR = 0x8222F658; return 0x82221478;
		/* 8222F654h case   18:*/		return 0x8222F658;
		  /* 8222F658h */ case   19:  		/* addi R11, R31, 1 */
		/* 8222F658h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 8222F658h case   19:*/		return 0x8222F65C;
		  /* 8222F65Ch */ case   20:  		/* stfd FR1, <#[R19]> */
		/* 8222F65Ch case   20:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R19 + 0x00000000) );
		/* 8222F65Ch case   20:*/		return 0x8222F660;
		  /* 8222F660h */ case   21:  		/* addi R9, R1, 104 */
		/* 8222F660h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x68);
		/* 8222F660h case   21:*/		return 0x8222F664;
		  /* 8222F664h */ case   22:  		/* lwz R3, <#[R1 + 372]> */
		/* 8222F664h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000174) );
		/* 8222F664h case   22:*/		return 0x8222F668;
		  /* 8222F668h */ case   23:  		/* rlwinm R10, R30, 30, 3, 29 */
		/* 8222F668h case   23:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R10,regs.R30);
		/* 8222F668h case   23:*/		return 0x8222F66C;
		  /* 8222F66Ch */ case   24:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8222F66Ch case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8222F66Ch case   24:*/		return 0x8222F670;
		  /* 8222F670h */ case   25:  		/* addi R5, R1, 128 */
		/* 8222F670h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8222F670h case   25:*/		return 0x8222F674;
		  /* 8222F674h */ case   26:  		/* slw R11, R29, R11 */
		/* 8222F674h case   26:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 8222F674h case   26:*/		return 0x8222F678;
		  /* 8222F678h */ case   27:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8222F678h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8222F678h case   27:*/		return 0x8222F67C;
		  /* 8222F67Ch */ case   28:  		/* addi R11, R11, -1 */
		/* 8222F67Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222F67Ch case   28:*/		return 0x8222F680;
		  /* 8222F680h */ case   29:  		/* rlwinm R9, R30, 1, 27, 30 */
		/* 8222F680h case   29:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R9,regs.R30);
		/* 8222F680h case   29:*/		return 0x8222F684;
		  /* 8222F684h */ case   30:  		/* and R8, R11, R10 */
		/* 8222F684h case   30:*/		cpu::op::and<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 8222F684h case   30:*/		return 0x8222F688;
		  /* 8222F688h */ case   31:  		/* slw R7, R18, R9 */
		/* 8222F688h case   31:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R18,regs.R9);
		/* 8222F688h case   31:*/		return 0x8222F68C;
		  /* 8222F68Ch */ case   32:  		/* and R8, R8, R7 */
		/* 8222F68Ch case   32:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 8222F68Ch case   32:*/		return 0x8222F690;
		  /* 8222F690h */ case   33:  		/* rlwinm R10, R24, 29, 3, 29 */
		/* 8222F690h case   33:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R24);
		/* 8222F690h case   33:*/		return 0x8222F694;
		  /* 8222F694h */ case   34:  		/* addi R11, R1, 84 */
		/* 8222F694h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x54);
		/* 8222F694h case   34:*/		return 0x8222F698;
		  /* 8222F698h */ case   35:  		/* srw R9, R8, R9 */
		/* 8222F698h case   35:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8222F698h case   35:*/		return 0x8222F69C;
		  /* 8222F69Ch */ case   36:  		/* rlwinm R7, R24, 0, 27, 31 */
		/* 8222F69Ch case   36:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R24);
		/* 8222F69Ch case   36:*/		return 0x8222F6A0;
		  /* 8222F6A0h */ case   37:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8222F6A0h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222F6A0h case   37:*/		return 0x8222F6A4;
		  /* 8222F6A4h */ case   38:  		/* addi R4, R28, 1 */
		/* 8222F6A4h case   38:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x1);
		/* 8222F6A4h case   38:*/		return 0x8222F6A8;
		  /* 8222F6A8h */ case   39:  		/* slw R9, R9, R7 */
		/* 8222F6A8h case   39:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8222F6A8h case   39:*/		return 0x8222F6AC;
		  /* 8222F6ACh */ case   40:  		/* or R9, R9, R8 */
		/* 8222F6ACh case   40:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8222F6ACh case   40:*/		return 0x8222F6B0;
		  /* 8222F6B0h */ case   41:  		/* stwx R9, <#[R10 + R11]> */
		/* 8222F6B0h case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8222F6B0h case   41:*/		return 0x8222F6B4;
		  /* 8222F6B4h */ case   42:  		/* lwz R6, <#[R1 + 84]> */
		/* 8222F6B4h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8222F6B4h case   42:*/		return 0x8222F6B8;
		  /* 8222F6B8h */ case   43:  		/* bl -33920 */
		/* 8222F6B8h case   43:*/		regs.LR = 0x8222F6BC; return 0x82227238;
		/* 8222F6B8h case   43:*/		return 0x8222F6BC;
		  /* 8222F6BCh */ case   44:  		/* lwz R29, <#[R1 + 404]> */
		/* 8222F6BCh case   44:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000194) );
		/* 8222F6BCh case   44:*/		return 0x8222F6C0;
		  /* 8222F6C0h */ case   45:  		/* mr R27, R3 */
		/* 8222F6C0h case   45:*/		regs.R27 = regs.R3;
		/* 8222F6C0h case   45:*/		return 0x8222F6C4;
		  /* 8222F6C4h */ case   46:  		/* lwz R31, <#[R1 + 396]> */
		/* 8222F6C4h case   46:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000018C) );
		/* 8222F6C4h case   46:*/		return 0x8222F6C8;
		  /* 8222F6C8h */ case   47:  		/* li R21, 228 */
		/* 8222F6C8h case   47:*/		cpu::op::li<0>(regs,&regs.R21,0xE4);
		/* 8222F6C8h case   47:*/		return 0x8222F6CC;
		  /* 8222F6CCh */ case   48:  		/* li R22, 0 */
		/* 8222F6CCh case   48:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8222F6CCh case   48:*/		return 0x8222F6D0;
		  /* 8222F6D0h */ case   49:  		/* stw R3, <#[R1 + 80]> */
		/* 8222F6D0h case   49:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8222F6D0h case   49:*/		return 0x8222F6D4;
	}
	return 0x8222F6D4;
} // Block from 8222F60Ch-8222F6D4h (50 instructions)

//////////////////////////////////////////////////////
// Block at 8222F6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F6D4);
		  /* 8222F6D4h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 8222F6D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222F6D4h case    0:*/		return 0x8222F6D8;
		  /* 8222F6D8h */ case    1:  		/* addi R28, R28, 1 */
		/* 8222F6D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8222F6D8h case    1:*/		return 0x8222F6DC;
		  /* 8222F6DCh */ case    2:  		/* addi R19, R19, 8 */
		/* 8222F6DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x8);
		/* 8222F6DCh case    2:*/		return 0x8222F6E0;
		  /* 8222F6E0h */ case    3:  		/* addi R24, R24, 2 */
		/* 8222F6E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x2);
		/* 8222F6E0h case    3:*/		return 0x8222F6E4;
		  /* 8222F6E4h */ case    4:  		/* cmplw CR6, R28, R11 */
		/* 8222F6E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8222F6E4h case    4:*/		return 0x8222F6E8;
		  /* 8222F6E8h */ case    5:  		/* bc 12, CR6_LT, -792 */
		/* 8222F6E8h case    5:*/		if ( regs.CR[6].lt ) { return 0x8222F3D0;  }
		/* 8222F6E8h case    5:*/		return 0x8222F6EC;
	}
	return 0x8222F6EC;
} // Block from 8222F6D4h-8222F6ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222F6ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F6EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F6EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F6EC);
		  /* 8222F6ECh */ case    0:  		/* rlwinm. R11, R22, 0, 27, 28 */
		/* 8222F6ECh case    0:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R22);
		/* 8222F6ECh case    0:*/		return 0x8222F6F0;
		  /* 8222F6F0h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8222F6F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F704;  }
		/* 8222F6F0h case    1:*/		return 0x8222F6F4;
		  /* 8222F6F4h */ case    2:  		/* rlwinm. R11, R23, 0, 27, 28 */
		/* 8222F6F4h case    2:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R23);
		/* 8222F6F4h case    2:*/		return 0x8222F6F8;
		  /* 8222F6F8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F6F8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222F704;  }
		/* 8222F6F8h case    3:*/		return 0x8222F6FC;
		  /* 8222F6FCh */ case    4:  		/* li R11, 0 */
		/* 8222F6FCh case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222F6FCh case    4:*/		return 0x8222F700;
		  /* 8222F700h */ case    5:  		/* b 44 */
		/* 8222F700h case    5:*/		return 0x8222F72C;
		/* 8222F700h case    5:*/		return 0x8222F704;
	}
	return 0x8222F704;
} // Block from 8222F6ECh-8222F704h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222F704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F704);
		  /* 8222F704h */ case    0:  		/* rlwinm. R11, R22, 0, 30, 30 */
		/* 8222F704h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R22);
		/* 8222F704h case    0:*/		return 0x8222F708;
		  /* 8222F708h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F708h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F714;  }
		/* 8222F708h case    1:*/		return 0x8222F70C;
		  /* 8222F70Ch */ case    2:  		/* rlwinm. R11, R23, 0, 31, 31 */
		/* 8222F70Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R23);
		/* 8222F70Ch case    2:*/		return 0x8222F710;
		  /* 8222F710h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 8222F710h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222F6FC;  }
		/* 8222F710h case    3:*/		return 0x8222F714;
	}
	return 0x8222F714;
} // Block from 8222F704h-8222F714h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222F714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F714);
		  /* 8222F714h */ case    0:  		/* rlwinm. R11, R22, 0, 29, 29 */
		/* 8222F714h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R22);
		/* 8222F714h case    0:*/		return 0x8222F718;
		  /* 8222F718h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F718h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F728;  }
		/* 8222F718h case    1:*/		return 0x8222F71C;
		  /* 8222F71Ch */ case    2:  		/* rlwinm. R11, R23, 0, 31, 31 */
		/* 8222F71Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R23);
		/* 8222F71Ch case    2:*/		return 0x8222F720;
		  /* 8222F720h */ case    3:  		/* li R11, 0 */
		/* 8222F720h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222F720h case    3:*/		return 0x8222F724;
		  /* 8222F724h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222F724h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222F72C;  }
		/* 8222F724h case    4:*/		return 0x8222F728;
	}
	return 0x8222F728;
} // Block from 8222F714h-8222F728h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F728);
		  /* 8222F728h */ case    0:  		/* li R11, 1 */
		/* 8222F728h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222F728h case    0:*/		return 0x8222F72C;
	}
	return 0x8222F72C;
} // Block from 8222F728h-8222F72Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F72C);
		  /* 8222F72Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222F72Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222F72Ch case    0:*/		return 0x8222F730;
		  /* 8222F730h */ case    1:  		/* bc 12, CR0_EQ, 264 */
		/* 8222F730h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F838;  }
		/* 8222F730h case    1:*/		return 0x8222F734;
		  /* 8222F734h */ case    2:  		/* rlwinm. R9, R22, 0, 29, 29 */
		/* 8222F734h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R22);
		/* 8222F734h case    2:*/		return 0x8222F738;
		  /* 8222F738h */ case    3:  		/* mr R10, R23 */
		/* 8222F738h case    3:*/		regs.R10 = regs.R23;
		/* 8222F738h case    3:*/		return 0x8222F73C;
		  /* 8222F73Ch */ case    4:  		/* mr R11, R22 */
		/* 8222F73Ch case    4:*/		regs.R11 = regs.R22;
		/* 8222F73Ch case    4:*/		return 0x8222F740;
		  /* 8222F740h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F740h case    5:*/		if ( regs.CR[0].eq ) { return 0x8222F750;  }
		/* 8222F740h case    5:*/		return 0x8222F744;
		  /* 8222F744h */ case    6:  		/* rlwinm. R9, R23, 0, 30, 30 */
		/* 8222F744h case    6:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R23);
		/* 8222F744h case    6:*/		return 0x8222F748;
		  /* 8222F748h */ case    7:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F748h case    7:*/		if ( regs.CR[0].eq ) { return 0x8222F750;  }
		/* 8222F748h case    7:*/		return 0x8222F74C;
		  /* 8222F74Ch */ case    8:  		/* addi R11, R22, -4 */
		/* 8222F74Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFC);
		/* 8222F74Ch case    8:*/		return 0x8222F750;
	}
	return 0x8222F750;
} // Block from 8222F72Ch-8222F750h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222F750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F750);
		  /* 8222F750h */ case    0:  		/* and R9, R11, R23 */
		/* 8222F750h case    0:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R23);
		/* 8222F750h case    0:*/		return 0x8222F754;
		  /* 8222F754h */ case    1:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 8222F754h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 8222F754h case    1:*/		return 0x8222F758;
		  /* 8222F758h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8222F758h case    2:*/		if ( regs.CR[0].eq ) { return 0x8222F764;  }
		/* 8222F758h case    2:*/		return 0x8222F75C;
		  /* 8222F75Ch */ case    3:  		/* addi R11, R11, -4 */
		/* 8222F75Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8222F75Ch case    3:*/		return 0x8222F760;
		  /* 8222F760h */ case    4:  		/* addi R10, R23, -4 */
		/* 8222F760h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0xFFFFFFFC);
		/* 8222F760h case    4:*/		return 0x8222F764;
	}
	return 0x8222F764;
} // Block from 8222F750h-8222F764h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F764);
		  /* 8222F764h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 8222F764h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 8222F764h case    0:*/		return 0x8222F768;
		  /* 8222F768h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F768h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F778;  }
		/* 8222F768h case    1:*/		return 0x8222F76C;
		  /* 8222F76Ch */ case    2:  		/* rlwinm. R9, R10, 0, 30, 30 */
		/* 8222F76Ch case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R10);
		/* 8222F76Ch case    2:*/		return 0x8222F770;
		  /* 8222F770h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F770h case    3:*/		if ( regs.CR[0].eq ) { return 0x8222F778;  }
		/* 8222F770h case    3:*/		return 0x8222F774;
		  /* 8222F774h */ case    4:  		/* addi R10, R10, -2 */
		/* 8222F774h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 8222F774h case    4:*/		return 0x8222F778;
	}
	return 0x8222F778;
} // Block from 8222F764h-8222F778h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F778);
		  /* 8222F778h */ case    0:  		/* or R30, R11, R10 */
		/* 8222F778h case    0:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8222F778h case    0:*/		return 0x8222F77C;
		  /* 8222F77Ch */ case    1:  		/* stw R27, <#[R14]> */
		/* 8222F77Ch case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R14 + 0x00000000) );
		/* 8222F77Ch case    1:*/		return 0x8222F780;
		  /* 8222F780h */ case    2:  		/* stw R21, <#[R31]> */
		/* 8222F780h case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000000) );
		/* 8222F780h case    2:*/		return 0x8222F784;
		  /* 8222F784h */ case    3:  		/* stw R30, <#[R29]> */
		/* 8222F784h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 8222F784h case    3:*/		return 0x8222F788;
		  /* 8222F788h */ case    4:  		/* lwz R11, <#[R15 + 16]> */
		/* 8222F788h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000010) );
		/* 8222F788h case    4:*/		return 0x8222F78C;
		  /* 8222F78Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8222F78Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222F78Ch case    5:*/		return 0x8222F790;
		  /* 8222F790h */ case    6:  		/* stw R30, <#[R1 + 88]> */
		/* 8222F790h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000058) );
		/* 8222F790h case    6:*/		return 0x8222F794;
		  /* 8222F794h */ case    7:  		/* bc 4, CR6_EQ, 64 */
		/* 8222F794h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8222F7D4;  }
		/* 8222F794h case    7:*/		return 0x8222F798;
		  /* 8222F798h */ case    8:  		/* lwz R11, <#[R15 + 12]> */
		/* 8222F798h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x0000000C) );
		/* 8222F798h case    8:*/		return 0x8222F79C;
		  /* 8222F79Ch */ case    9:  		/* addi R10, R11, 4 */
		/* 8222F79Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222F79Ch case    9:*/		return 0x8222F7A0;
		  /* 8222F7A0h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222F7A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222F7A0h case   10:*/		return 0x8222F7A4;
		  /* 8222F7A4h */ case   11:  		/* b 12 */
		/* 8222F7A4h case   11:*/		return 0x8222F7B0;
		/* 8222F7A4h case   11:*/		return 0x8222F7A8;
		  /* 8222F7A8h */ case   12:  		/* addi R10, R11, 8 */
		/* 8222F7A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8222F7A8h case   12:*/		return 0x8222F7AC;
		  /* 8222F7ACh */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F7ACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F7ACh case   13:*/		return 0x8222F7B0;
	}
	return 0x8222F7B0;
} // Block from 8222F778h-8222F7B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8222F7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F7B0);
		  /* 8222F7B0h */ case    0:  		/* cmplw CR6, R11, R15 */
		/* 8222F7B0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 8222F7B0h case    0:*/		return 0x8222F7B4;
		  /* 8222F7B4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222F7B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222F7A8;  }
		/* 8222F7B4h case    1:*/		return 0x8222F7B8;
		  /* 8222F7B8h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F7B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F7B8h case    2:*/		return 0x8222F7BC;
		  /* 8222F7BCh */ case    3:  		/* li R6, 26 */
		/* 8222F7BCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 8222F7BCh case    3:*/		return 0x8222F7C0;
		  /* 8222F7C0h */ case    4:  		/* li R5, 20 */
		/* 8222F7C0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 8222F7C0h case    4:*/		return 0x8222F7C4;
		  /* 8222F7C4h */ case    5:  		/* lwz R3, <#[R1 + 372]> */
		/* 8222F7C4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000174) );
		/* 8222F7C4h case    5:*/		return 0x8222F7C8;
		  /* 8222F7C8h */ case    6:  		/* mr R4, R15 */
		/* 8222F7C8h case    6:*/		regs.R4 = regs.R15;
		/* 8222F7C8h case    6:*/		return 0x8222F7CC;
		  /* 8222F7CCh */ case    7:  		/* stw R11, <#[R10]> */
		/* 8222F7CCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222F7CCh case    7:*/		return 0x8222F7D0;
		  /* 8222F7D0h */ case    8:  		/* bl -830264 */
		/* 8222F7D0h case    8:*/		regs.LR = 0x8222F7D4; return 0x82164C98;
		/* 8222F7D0h case    8:*/		return 0x8222F7D4;
	}
	return 0x8222F7D4;
} // Block from 8222F7B0h-8222F7D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222F7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F7D4);
		  /* 8222F7D4h */ case    0:  		/* mr R4, R27 */
		/* 8222F7D4h case    0:*/		regs.R4 = regs.R27;
		/* 8222F7D4h case    0:*/		return 0x8222F7D8;
		  /* 8222F7D8h */ case    1:  		/* lwz R3, <#[R1 + 372]> */
		/* 8222F7D8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000174) );
		/* 8222F7D8h case    1:*/		return 0x8222F7DC;
		  /* 8222F7DCh */ case    2:  		/* bl -751580 */
		/* 8222F7DCh case    2:*/		regs.LR = 0x8222F7E0; return 0x82178000;
		/* 8222F7DCh case    2:*/		return 0x8222F7E0;
		  /* 8222F7E0h */ case    3:  		/* lwz R10, <#[R3]> */
		/* 8222F7E0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222F7E0h case    3:*/		return 0x8222F7E4;
		  /* 8222F7E4h */ case    4:  		/* lwz R11, <#[R1 + 92]> */
		/* 8222F7E4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222F7E4h case    4:*/		return 0x8222F7E8;
		  /* 8222F7E8h */ case    5:  		/* mr R4, R30 */
		/* 8222F7E8h case    5:*/		regs.R4 = regs.R30;
		/* 8222F7E8h case    5:*/		return 0x8222F7EC;
		  /* 8222F7ECh */ case    6:  		/* mr R31, R3 */
		/* 8222F7ECh case    6:*/		regs.R31 = regs.R3;
		/* 8222F7ECh case    6:*/		return 0x8222F7F0;
		  /* 8222F7F0h */ case    7:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 8222F7F0h case    7:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 8222F7F0h case    7:*/		return 0x8222F7F4;
		  /* 8222F7F4h */ case    8:  		/* stw R10, <#[R3]> */
		/* 8222F7F4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8222F7F4h case    8:*/		return 0x8222F7F8;
		  /* 8222F7F8h */ case    9:  		/* bl -752952 */
		/* 8222F7F8h case    9:*/		regs.LR = 0x8222F7FC; return 0x82177AC0;
		/* 8222F7F8h case    9:*/		return 0x8222F7FC;
		  /* 8222F7FCh */ case   10:  		/* lwz R11, <#[R31]> */
		/* 8222F7FCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222F7FCh case   10:*/		return 0x8222F800;
		  /* 8222F800h */ case   11:  		/* li R7, 0 */
		/* 8222F800h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8222F800h case   11:*/		return 0x8222F804;
		  /* 8222F804h */ case   12:  		/* lwz R6, <#[R1 + 404]> */
		/* 8222F804h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000194) );
		/* 8222F804h case   12:*/		return 0x8222F808;
		  /* 8222F808h */ case   13:  		/* rlwimi R11, R21, 5, 19, 26 */
		/* 8222F808h case   13:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R21);
		/* 8222F808h case   13:*/		return 0x8222F80C;
		  /* 8222F80Ch */ case   14:  		/* lwz R5, <#[R1 + 396]> */
		/* 8222F80Ch case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000018C) );
		/* 8222F80Ch case   14:*/		return 0x8222F810;
		  /* 8222F810h */ case   15:  		/* mr R4, R14 */
		/* 8222F810h case   15:*/		regs.R4 = regs.R14;
		/* 8222F810h case   15:*/		return 0x8222F814;
		  /* 8222F814h */ case   16:  		/* stw R11, <#[R31]> */
		/* 8222F814h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8222F814h case   16:*/		return 0x8222F818;
		  /* 8222F818h */ case   17:  		/* mr R3, R31 */
		/* 8222F818h case   17:*/		regs.R3 = regs.R31;
		/* 8222F818h case   17:*/		return 0x8222F81C;
		  /* 8222F81Ch */ case   18:  		/* mr R15, R31 */
		/* 8222F81Ch case   18:*/		regs.R15 = regs.R31;
		/* 8222F81Ch case   18:*/		return 0x8222F820;
		  /* 8222F820h */ case   19:  		/* bl -2288 */
		/* 8222F820h case   19:*/		regs.LR = 0x8222F824; return 0x8222EF30;
		/* 8222F820h case   19:*/		return 0x8222F824;
		  /* 8222F824h */ case   20:  		/* lwz R11, <#[R14]> */
		/* 8222F824h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8222F824h case   20:*/		return 0x8222F828;
		  /* 8222F828h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F828h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F828h case   21:*/		return 0x8222F82C;
		  /* 8222F82Ch */ case   22:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8222F82Ch case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8222F82Ch case   22:*/		return 0x8222F830;
		  /* 8222F830h */ case   23:  		/* cmplwi CR6, R11, 14080 */
		/* 8222F830h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 8222F830h case   23:*/		return 0x8222F834;
		  /* 8222F834h */ case   24:  		/* bc 12, CR6_EQ, -1236 */
		/* 8222F834h case   24:*/		if ( regs.CR[6].eq ) { return 0x8222F360;  }
		/* 8222F834h case   24:*/		return 0x8222F838;
	}
	return 0x8222F838;
} // Block from 8222F7D4h-8222F838h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8222F838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F838);
		  /* 8222F838h */ case    0:  		/* lwz R11, <#[R15 + 16]> */
		/* 8222F838h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000010) );
		/* 8222F838h case    0:*/		return 0x8222F83C;
		  /* 8222F83Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222F83Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222F83Ch case    1:*/		return 0x8222F840;
		  /* 8222F840h */ case    2:  		/* bc 4, CR6_EQ, 64 */
		/* 8222F840h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222F880;  }
		/* 8222F840h case    2:*/		return 0x8222F844;
		  /* 8222F844h */ case    3:  		/* lwz R11, <#[R15 + 12]> */
		/* 8222F844h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x0000000C) );
		/* 8222F844h case    3:*/		return 0x8222F848;
		  /* 8222F848h */ case    4:  		/* addi R10, R11, 4 */
		/* 8222F848h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8222F848h case    4:*/		return 0x8222F84C;
		  /* 8222F84Ch */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222F84Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222F84Ch case    5:*/		return 0x8222F850;
		  /* 8222F850h */ case    6:  		/* b 12 */
		/* 8222F850h case    6:*/		return 0x8222F85C;
		/* 8222F850h case    6:*/		return 0x8222F854;
		  /* 8222F854h */ case    7:  		/* addi R10, R11, 8 */
		/* 8222F854h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8222F854h case    7:*/		return 0x8222F858;
		  /* 8222F858h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F858h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F858h case    8:*/		return 0x8222F85C;
	}
	return 0x8222F85C;
} // Block from 8222F838h-8222F85Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222F85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F85C);
		  /* 8222F85Ch */ case    0:  		/* cmplw CR6, R11, R15 */
		/* 8222F85Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 8222F85Ch case    0:*/		return 0x8222F860;
		  /* 8222F860h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222F860h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222F854;  }
		/* 8222F860h case    1:*/		return 0x8222F864;
		  /* 8222F864h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F864h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F864h case    2:*/		return 0x8222F868;
		  /* 8222F868h */ case    3:  		/* li R6, 26 */
		/* 8222F868h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 8222F868h case    3:*/		return 0x8222F86C;
		  /* 8222F86Ch */ case    4:  		/* li R5, 20 */
		/* 8222F86Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 8222F86Ch case    4:*/		return 0x8222F870;
		  /* 8222F870h */ case    5:  		/* lwz R3, <#[R1 + 372]> */
		/* 8222F870h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000174) );
		/* 8222F870h case    5:*/		return 0x8222F874;
		  /* 8222F874h */ case    6:  		/* mr R4, R15 */
		/* 8222F874h case    6:*/		regs.R4 = regs.R15;
		/* 8222F874h case    6:*/		return 0x8222F878;
		  /* 8222F878h */ case    7:  		/* stw R11, <#[R10]> */
		/* 8222F878h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222F878h case    7:*/		return 0x8222F87C;
		  /* 8222F87Ch */ case    8:  		/* bl -830436 */
		/* 8222F87Ch case    8:*/		regs.LR = 0x8222F880; return 0x82164C98;
		/* 8222F87Ch case    8:*/		return 0x8222F880;
	}
	return 0x8222F880;
} // Block from 8222F85Ch-8222F880h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222F880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F880);
		  /* 8222F880h */ case    0:  		/* addi R1, R1, 352 */
		/* 8222F880h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 8222F880h case    0:*/		return 0x8222F884;
		  /* 8222F884h */ case    1:  		/* b -1697300 */
		/* 8222F884h case    1:*/		return 0x82091270;
		/* 8222F884h case    1:*/		return 0x8222F888;
		  /* 8222F888h */ case    2:  		/* lwz R9, <#[R3]> */
		/* 8222F888h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8222F888h case    2:*/		return 0x8222F88C;
		  /* 8222F88Ch */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 8222F88Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8222F88Ch case    3:*/		return 0x8222F890;
		  /* 8222F890h */ case    4:  		/* bc 12, CR6_EQ, 72 */
		/* 8222F890h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222F8D8;  }
		/* 8222F890h case    4:*/		return 0x8222F894;
		  /* 8222F894h */ case    5:  		/* lwz R10, <#[R9]> */
		/* 8222F894h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8222F894h case    5:*/		return 0x8222F898;
		  /* 8222F898h */ case    6:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 8222F898h case    6:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 8222F898h case    6:*/		return 0x8222F89C;
		  /* 8222F89Ch */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 8222F89Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8222F8AC;  }
		/* 8222F89Ch case    7:*/		return 0x8222F8A0;
		  /* 8222F8A0h */ case    8:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 8222F8A0h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 8222F8A0h case    8:*/		return 0x8222F8A4;
		  /* 8222F8A4h */ case    9:  		/* li R11, 1 */
		/* 8222F8A4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222F8A4h case    9:*/		return 0x8222F8A8;
		  /* 8222F8A8h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 8222F8A8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8222F8B0;  }
		/* 8222F8A8h case   10:*/		return 0x8222F8AC;
	}
	return 0x8222F8AC;
} // Block from 8222F880h-8222F8ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8AC);
		  /* 8222F8ACh */ case    0:  		/* li R11, 0 */
		/* 8222F8ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222F8ACh case    0:*/		return 0x8222F8B0;
	}
	return 0x8222F8B0;
} // Block from 8222F8ACh-8222F8B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8B0);
		  /* 8222F8B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222F8B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222F8B0h case    0:*/		return 0x8222F8B4;
		  /* 8222F8B4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222F8B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222F8C4;  }
		/* 8222F8B4h case    1:*/		return 0x8222F8B8;
		  /* 8222F8B8h */ case    2:  		/* rlwinm. R11, R10, 0, 7, 18 */
		/* 8222F8B8h case    2:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R11,regs.R10);
		/* 8222F8B8h case    2:*/		return 0x8222F8BC;
		  /* 8222F8BCh */ case    3:  		/* li R11, 1 */
		/* 8222F8BCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222F8BCh case    3:*/		return 0x8222F8C0;
		  /* 8222F8C0h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222F8C0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222F8C8;  }
		/* 8222F8C0h case    4:*/		return 0x8222F8C4;
	}
	return 0x8222F8C4;
} // Block from 8222F8B0h-8222F8C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8C4);
		  /* 8222F8C4h */ case    0:  		/* li R11, 0 */
		/* 8222F8C4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222F8C4h case    0:*/		return 0x8222F8C8;
	}
	return 0x8222F8C8;
} // Block from 8222F8C4h-8222F8C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8C8);
		  /* 8222F8C8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222F8C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222F8C8h case    0:*/		return 0x8222F8CC;
		  /* 8222F8CCh */ case    1:  		/* bclr 4, CR0_EQ */
		/* 8222F8CCh case    1:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 8222F8CCh case    1:*/		return 0x8222F8D0;
	}
	return 0x8222F8D0;
} // Block from 8222F8C8h-8222F8D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8D0);
		  /* 8222F8D0h */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 8222F8D0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8222F8D0h case    0:*/		return 0x8222F8D4;
		  /* 8222F8D4h */ case    1:  		/* b -72 */
		/* 8222F8D4h case    1:*/		return 0x8222F88C;
		/* 8222F8D4h case    1:*/		return 0x8222F8D8;
	}
	return 0x8222F8D8;
} // Block from 8222F8D0h-8222F8D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8D8);
		  /* 8222F8D8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222F8D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222F8D8h case    0:*/		return 0x8222F8DC;
		  /* 8222F8DCh */ case    1:  		/* rlwinm R11, R11, 0, 7, 5 */
		/* 8222F8DCh case    1:*/		cpu::op::rlwinm<0,0,7,5>(regs,&regs.R11,regs.R11);
		/* 8222F8DCh case    1:*/		return 0x8222F8E0;
		  /* 8222F8E0h */ case    2:  		/* stw R11, <#[R3 + 8]> */
		/* 8222F8E0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222F8E0h case    2:*/		return 0x8222F8E4;
		  /* 8222F8E4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8222F8E4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222F8E4h case    3:*/		return 0x8222F8E8;
	}
	return 0x8222F8E8;
} // Block from 8222F8D8h-8222F8E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8E8);
		  /* 8222F8E8h */ case    0:  		/* lwz R11, <#[R4 + 4]> */
		/* 8222F8E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8222F8E8h case    0:*/		return 0x8222F8EC;
		  /* 8222F8ECh */ case    1:  		/* addi R11, R11, 12 */
		/* 8222F8ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8222F8ECh case    1:*/		return 0x8222F8F0;
		  /* 8222F8F0h */ case    2:  		/* b 12 */
		/* 8222F8F0h case    2:*/		return 0x8222F8FC;
		/* 8222F8F0h case    2:*/		return 0x8222F8F4;
		  /* 8222F8F4h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 8222F8F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F8F4h case    3:*/		return 0x8222F8F8;
		  /* 8222F8F8h */ case    4:  		/* addi R11, R11, 8 */
		/* 8222F8F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8222F8F8h case    4:*/		return 0x8222F8FC;
	}
	return 0x8222F8FC;
} // Block from 8222F8E8h-8222F8FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F8FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F8FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F8FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F8FC);
		  /* 8222F8FCh */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8222F8FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F8FCh case    0:*/		return 0x8222F900;
		  /* 8222F900h */ case    1:  		/* cmplw CR6, R10, R4 */
		/* 8222F900h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 8222F900h case    1:*/		return 0x8222F904;
		  /* 8222F904h */ case    2:  		/* bc 4, CR6_EQ, -16 */
		/* 8222F904h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222F8F4;  }
		/* 8222F904h case    2:*/		return 0x8222F908;
		  /* 8222F908h */ case    3:  		/* lwz R10, <#[R4 + 8]> */
		/* 8222F908h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 8222F908h case    3:*/		return 0x8222F90C;
		  /* 8222F90Ch */ case    4:  		/* stw R10, <#[R11]> */
		/* 8222F90Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F90Ch case    4:*/		return 0x8222F910;
		  /* 8222F910h */ case    5:  		/* stw R5, <#[R4 + 4]> */
		/* 8222F910h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R4 + 0x00000004) );
		/* 8222F910h case    5:*/		return 0x8222F914;
		  /* 8222F914h */ case    6:  		/* lwz R11, <#[R5 + 12]> */
		/* 8222F914h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000000C) );
		/* 8222F914h case    6:*/		return 0x8222F918;
		  /* 8222F918h */ case    7:  		/* stw R11, <#[R4 + 8]> */
		/* 8222F918h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8222F918h case    7:*/		return 0x8222F91C;
		  /* 8222F91Ch */ case    8:  		/* stw R4, <#[R5 + 12]> */
		/* 8222F91Ch case    8:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R5 + 0x0000000C) );
		/* 8222F91Ch case    8:*/		return 0x8222F920;
		  /* 8222F920h */ case    9:  		/* bclr 20, CR0_LT */
		/* 8222F920h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222F920h case    9:*/		return 0x8222F924;
	}
	return 0x8222F924;
} // Block from 8222F8FCh-8222F924h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222F924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F924);
		  /* 8222F924h */ case    0:  		/* nop */
		/* 8222F924h case    0:*/		cpu::op::nop();
		/* 8222F924h case    0:*/		return 0x8222F928;
	}
	return 0x8222F928;
} // Block from 8222F924h-8222F928h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F928h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F928);
		  /* 8222F928h */ case    0:  		/* lwz R11, <#[R4]> */
		/* 8222F928h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8222F928h case    0:*/		return 0x8222F92C;
		  /* 8222F92Ch */ case    1:  		/* addi R11, R11, 8 */
		/* 8222F92Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8222F92Ch case    1:*/		return 0x8222F930;
		  /* 8222F930h */ case    2:  		/* b 12 */
		/* 8222F930h case    2:*/		return 0x8222F93C;
		/* 8222F930h case    2:*/		return 0x8222F934;
		  /* 8222F934h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 8222F934h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F934h case    3:*/		return 0x8222F938;
		  /* 8222F938h */ case    4:  		/* addi R11, R11, 12 */
		/* 8222F938h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8222F938h case    4:*/		return 0x8222F93C;
	}
	return 0x8222F93C;
} // Block from 8222F928h-8222F93Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F93C);
		  /* 8222F93Ch */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8222F93Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F93Ch case    0:*/		return 0x8222F940;
		  /* 8222F940h */ case    1:  		/* cmplw CR6, R10, R4 */
		/* 8222F940h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 8222F940h case    1:*/		return 0x8222F944;
		  /* 8222F944h */ case    2:  		/* bc 4, CR6_EQ, -16 */
		/* 8222F944h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222F934;  }
		/* 8222F944h case    2:*/		return 0x8222F948;
	}
	return 0x8222F948;
} // Block from 8222F93Ch-8222F948h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222F948h
// Function '?FindDef_Isolated@Dependency@D3DXShader@@QAAXPAPAVInstruction@2@PAI1PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F948);
		  /* 8222F948h */ case    0:  		/* lwz R10, <#[R4 + 12]> */
		/* 8222F948h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222F948h case    0:*/		return 0x8222F94C;
		  /* 8222F94Ch */ case    1:  		/* stw R10, <#[R11]> */
		/* 8222F94Ch case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F94Ch case    1:*/		return 0x8222F950;
		  /* 8222F950h */ case    2:  		/* stw R5, <#[R4]> */
		/* 8222F950h case    2:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R4 + 0x00000000) );
		/* 8222F950h case    2:*/		return 0x8222F954;
		  /* 8222F954h */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 8222F954h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8222F954h case    3:*/		return 0x8222F958;
		  /* 8222F958h */ case    4:  		/* stw R11, <#[R4 + 12]> */
		/* 8222F958h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8222F958h case    4:*/		return 0x8222F95C;
		  /* 8222F95Ch */ case    5:  		/* stw R4, <#[R5 + 8]> */
		/* 8222F95Ch case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R5 + 0x00000008) );
		/* 8222F95Ch case    5:*/		return 0x8222F960;
		  /* 8222F960h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8222F960h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222F960h case    6:*/		return 0x8222F964;
	}
	return 0x8222F964;
} // Block from 8222F948h-8222F964h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8222F964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F964);
		  /* 8222F964h */ case    0:  		/* nop */
		/* 8222F964h case    0:*/		cpu::op::nop();
		/* 8222F964h case    0:*/		return 0x8222F968;
	}
	return 0x8222F968;
} // Block from 8222F964h-8222F968h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F968h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F968);
		  /* 8222F968h */ case    0:  		/* lwz R11, <#[R3 + 12]> */
		/* 8222F968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222F968h case    0:*/		return 0x8222F96C;
		  /* 8222F96Ch */ case    1:  		/* addi R10, R3, 12 */
		/* 8222F96Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xC);
		/* 8222F96Ch case    1:*/		return 0x8222F970;
		  /* 8222F970h */ case    2:  		/* b 12 */
		/* 8222F970h case    2:*/		return 0x8222F97C;
		/* 8222F970h case    2:*/		return 0x8222F974;
		  /* 8222F974h */ case    3:  		/* addi R10, R11, 8 */
		/* 8222F974h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8222F974h case    3:*/		return 0x8222F978;
		  /* 8222F978h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222F978h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F978h case    4:*/		return 0x8222F97C;
	}
	return 0x8222F97C;
} // Block from 8222F968h-8222F97Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F97C);
		  /* 8222F97Ch */ case    0:  		/* lwz R9, <#[R11]> */
		/* 8222F97Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F97Ch case    0:*/		return 0x8222F980;
		  /* 8222F980h */ case    1:  		/* cmplw CR6, R9, R4 */
		/* 8222F980h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 8222F980h case    1:*/		return 0x8222F984;
		  /* 8222F984h */ case    2:  		/* bc 4, CR6_EQ, -16 */
		/* 8222F984h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222F974;  }
		/* 8222F984h case    2:*/		return 0x8222F988;
		  /* 8222F988h */ case    3:  		/* lwz R9, <#[R11 + 8]> */
		/* 8222F988h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8222F988h case    3:*/		return 0x8222F98C;
		  /* 8222F98Ch */ case    4:  		/* stw R9, <#[R10]> */
		/* 8222F98Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222F98Ch case    4:*/		return 0x8222F990;
		  /* 8222F990h */ case    5:  		/* addi R10, R4, 8 */
		/* 8222F990h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x8);
		/* 8222F990h case    5:*/		return 0x8222F994;
		  /* 8222F994h */ case    6:  		/* lwz R9, <#[R4 + 8]> */
		/* 8222F994h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000008) );
		/* 8222F994h case    6:*/		return 0x8222F998;
		  /* 8222F998h */ case    7:  		/* b 16 */
		/* 8222F998h case    7:*/		return 0x8222F9A8;
		/* 8222F998h case    7:*/		return 0x8222F99C;
		  /* 8222F99Ch */ case    8:  		/* lwz R10, <#[R10]> */
		/* 8222F99Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8222F99Ch case    8:*/		return 0x8222F9A0;
		  /* 8222F9A0h */ case    9:  		/* addi R10, R10, 12 */
		/* 8222F9A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 8222F9A0h case    9:*/		return 0x8222F9A4;
		  /* 8222F9A4h */ case   10:  		/* lwz R9, <#[R10]> */
		/* 8222F9A4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8222F9A4h case   10:*/		return 0x8222F9A8;
	}
	return 0x8222F9A8;
} // Block from 8222F97Ch-8222F9A8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222F9A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F9A8);
		  /* 8222F9A8h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 8222F9A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8222F9A8h case    0:*/		return 0x8222F9AC;
		  /* 8222F9ACh */ case    1:  		/* bc 4, CR6_EQ, -16 */
		/* 8222F9ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222F99C;  }
		/* 8222F9ACh case    1:*/		return 0x8222F9B0;
		  /* 8222F9B0h */ case    2:  		/* lwz R11, <#[R11 + 12]> */
		/* 8222F9B0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8222F9B0h case    2:*/		return 0x8222F9B4;
		  /* 8222F9B4h */ case    3:  		/* stw R11, <#[R10]> */
		/* 8222F9B4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8222F9B4h case    3:*/		return 0x8222F9B8;
		  /* 8222F9B8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8222F9B8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222F9B8h case    4:*/		return 0x8222F9BC;
	}
	return 0x8222F9BC;
} // Block from 8222F9A8h-8222F9BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F9BC);
		  /* 8222F9BCh */ case    0:  		/* nop */
		/* 8222F9BCh case    0:*/		cpu::op::nop();
		/* 8222F9BCh case    0:*/		return 0x8222F9C0;
	}
	return 0x8222F9C0;
} // Block from 8222F9BCh-8222F9C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222F9C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F9C0);
		  /* 8222F9C0h */ case    0:  		/* li R11, 0 */
		/* 8222F9C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222F9C0h case    0:*/		return 0x8222F9C4;
		  /* 8222F9C4h */ case    1:  		/* stw R4, <#[R3 + 4]> */
		/* 8222F9C4h case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8222F9C4h case    1:*/		return 0x8222F9C8;
		  /* 8222F9C8h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8222F9C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8222F9C8h case    2:*/		return 0x8222F9CC;
		  /* 8222F9CCh */ case    3:  		/* stb R11, <#[R3 + 25]> */
		/* 8222F9CCh case    3:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000019) );
		/* 8222F9CCh case    3:*/		return 0x8222F9D0;
		  /* 8222F9D0h */ case    4:  		/* bclr 12, CR6_EQ */
		/* 8222F9D0h case    4:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8222F9D0h case    4:*/		return 0x8222F9D4;
	}
	return 0x8222F9D4;
} // Block from 8222F9C0h-8222F9D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222F9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F9D4);
		  /* 8222F9D4h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 8222F9D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8222F9D4h case    0:*/		return 0x8222F9D8;
		  /* 8222F9D8h */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 8222F9D8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8222F9D8h case    1:*/		return 0x8222F9DC;
		  /* 8222F9DCh */ case    2:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 8222F9DCh case    2:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 8222F9DCh case    2:*/		return 0x8222F9E0;
		  /* 8222F9E0h */ case    3:  		/* bclr 4, CR0_EQ */
		/* 8222F9E0h case    3:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 8222F9E0h case    3:*/		return 0x8222F9E4;
	}
	return 0x8222F9E4;
} // Block from 8222F9D4h-8222F9E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222F9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F9E4);
		  /* 8222F9E4h */ case    0:  		/* lwz R9, <#[R4 + 4]> */
		/* 8222F9E4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000004) );
		/* 8222F9E4h case    0:*/		return 0x8222F9E8;
		  /* 8222F9E8h */ case    1:  		/* lwz R11, <#[R9 + 12]> */
		/* 8222F9E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 8222F9E8h case    1:*/		return 0x8222F9EC;
		  /* 8222F9ECh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8222F9ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222F9ECh case    2:*/		return 0x8222F9F0;
		  /* 8222F9F0h */ case    3:  		/* bclr 12, CR6_EQ */
		/* 8222F9F0h case    3:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8222F9F0h case    3:*/		return 0x8222F9F4;
	}
	return 0x8222F9F4;
} // Block from 8222F9E4h-8222F9F4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222F9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222F9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222F9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222F9F4);
		  /* 8222F9F4h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8222F9F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222F9F4h case    0:*/		return 0x8222F9F8;
		  /* 8222F9F8h */ case    1:  		/* lwz R8, <#[R10 + 48]> */
		/* 8222F9F8h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 8222F9F8h case    1:*/		return 0x8222F9FC;
		  /* 8222F9FCh */ case    2:  		/* rlwinm. R8, R8, 13, 31, 31 */
		/* 8222F9FCh case    2:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R8,regs.R8);
		/* 8222F9FCh case    2:*/		return 0x8222FA00;
		  /* 8222FA00h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8222FA00h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8222FA0C;  }
		/* 8222FA00h case    3:*/		return 0x8222FA04;
		  /* 8222FA04h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 8222FA04h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8222FA04h case    4:*/		return 0x8222FA08;
		  /* 8222FA08h */ case    5:  		/* b -28 */
		/* 8222FA08h case    5:*/		return 0x8222F9EC;
		/* 8222FA08h case    5:*/		return 0x8222FA0C;
	}
	return 0x8222FA0C;
} // Block from 8222F9F4h-8222FA0Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA0C);
		  /* 8222FA0Ch */ case    0:  		/* lwz R11, <#[R10 + 116]> */
		/* 8222FA0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000074) );
		/* 8222FA0Ch case    0:*/		return 0x8222FA10;
		  /* 8222FA10h */ case    1:  		/* addi R11, R11, 16 */
		/* 8222FA10h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8222FA10h case    1:*/		return 0x8222FA14;
		  /* 8222FA14h */ case    2:  		/* lwz R8, <#[R11]> */
		/* 8222FA14h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8222FA14h case    2:*/		return 0x8222FA18;
		  /* 8222FA18h */ case    3:  		/* cmplwi CR6, R8, 0 */
		/* 8222FA18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8222FA18h case    3:*/		return 0x8222FA1C;
		  /* 8222FA1Ch */ case    4:  		/* bclr 12, CR6_EQ */
		/* 8222FA1Ch case    4:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8222FA1Ch case    4:*/		return 0x8222FA20;
	}
	return 0x8222FA20;
} // Block from 8222FA0Ch-8222FA20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA20);
		  /* 8222FA20h */ case    0:  		/* stw R10, <#[R3 + 16]> */
		/* 8222FA20h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8222FA20h case    0:*/		return 0x8222FA24;
		  /* 8222FA24h */ case    1:  		/* stw R9, <#[R3 + 20]> */
		/* 8222FA24h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 8222FA24h case    1:*/		return 0x8222FA28;
		  /* 8222FA28h */ case    2:  		/* stw R11, <#[R3 + 8]> */
		/* 8222FA28h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222FA28h case    2:*/		return 0x8222FA2C;
		  /* 8222FA2Ch */ case    3:  		/* b 44 */
		/* 8222FA2Ch case    3:*/		return 0x8222FA58;
		/* 8222FA2Ch case    3:*/		return 0x8222FA30;
		  /* 8222FA30h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 8222FA30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222FA30h case    4:*/		return 0x8222FA34;
		  /* 8222FA34h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 8222FA34h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222FA34h case    5:*/		return 0x8222FA38;
		  /* 8222FA38h */ case    6:  		/* lwz R10, <#[R10 + 48]> */
		/* 8222FA38h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 8222FA38h case    6:*/		return 0x8222FA3C;
		  /* 8222FA3Ch */ case    7:  		/* rlwinm. R9, R10, 10, 31, 31 */
		/* 8222FA3Ch case    7:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R10);
		/* 8222FA3Ch case    7:*/		return 0x8222FA40;
		  /* 8222FA40h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 8222FA40h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8222FA4C;  }
		/* 8222FA40h case    8:*/		return 0x8222FA44;
		  /* 8222FA44h */ case    9:  		/* rlwinm. R10, R10, 12, 31, 31 */
		/* 8222FA44h case    9:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R10,regs.R10);
		/* 8222FA44h case    9:*/		return 0x8222FA48;
		  /* 8222FA48h */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 8222FA48h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8222FA60;  }
		/* 8222FA48h case   10:*/		return 0x8222FA4C;
	}
	return 0x8222FA4C;
} // Block from 8222FA20h-8222FA4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA4C);
		  /* 8222FA4Ch */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 8222FA4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8222FA4Ch case    0:*/		return 0x8222FA50;
		  /* 8222FA50h */ case    1:  		/* stw R11, <#[R3 + 8]> */
		/* 8222FA50h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8222FA50h case    1:*/		return 0x8222FA54;
		  /* 8222FA54h */ case    2:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8222FA54h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8222FA54h case    2:*/		return 0x8222FA58;
	}
	return 0x8222FA58;
} // Block from 8222FA4Ch-8222FA58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA58);
		  /* 8222FA58h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8222FA58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222FA58h case    0:*/		return 0x8222FA5C;
		  /* 8222FA5Ch */ case    1:  		/* bc 4, CR6_EQ, -44 */
		/* 8222FA5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222FA30;  }
		/* 8222FA5Ch case    1:*/		return 0x8222FA60;
	}
	return 0x8222FA60;
} // Block from 8222FA58h-8222FA60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA60);
		  /* 8222FA60h */ case    0:  		/* lbz R11, <#[R3 + 24]> */
		/* 8222FA60h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8222FA60h case    0:*/		return 0x8222FA64;
		  /* 8222FA64h */ case    1:  		/* stb R11, <#[R3 + 25]> */
		/* 8222FA64h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000019) );
		/* 8222FA64h case    1:*/		return 0x8222FA68;
		  /* 8222FA68h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8222FA68h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222FA68h case    2:*/		return 0x8222FA6C;
	}
	return 0x8222FA6C;
} // Block from 8222FA60h-8222FA6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA6C);
		  /* 8222FA6Ch */ case    0:  		/* nop */
		/* 8222FA6Ch case    0:*/		cpu::op::nop();
		/* 8222FA6Ch case    0:*/		return 0x8222FA70;
	}
	return 0x8222FA70;
} // Block from 8222FA6Ch-8222FA70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FA70h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FA70);
		  /* 8222FA70h */ case    0:  		/* mfspr R12, LR */
		/* 8222FA70h case    0:*/		regs.R12 = regs.LR;
		/* 8222FA70h case    0:*/		return 0x8222FA74;
		  /* 8222FA74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8222FA74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8222FA74h case    1:*/		return 0x8222FA78;
		  /* 8222FA78h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8222FA78h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8222FA78h case    2:*/		return 0x8222FA7C;
		  /* 8222FA7Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8222FA7Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8222FA7Ch case    3:*/		return 0x8222FA80;
		  /* 8222FA80h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8222FA80h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8222FA80h case    4:*/		return 0x8222FA84;
		  /* 8222FA84h */ case    5:  		/* mr R31, R3 */
		/* 8222FA84h case    5:*/		regs.R31 = regs.R3;
		/* 8222FA84h case    5:*/		return 0x8222FA88;
		  /* 8222FA88h */ case    6:  		/* mr R30, R4 */
		/* 8222FA88h case    6:*/		regs.R30 = regs.R4;
		/* 8222FA88h case    6:*/		return 0x8222FA8C;
		  /* 8222FA8Ch */ case    7:  		/* mr R3, R5 */
		/* 8222FA8Ch case    7:*/		regs.R3 = regs.R5;
		/* 8222FA8Ch case    7:*/		return 0x8222FA90;
		  /* 8222FA90h */ case    8:  		/* li R5, 24 */
		/* 8222FA90h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8222FA90h case    8:*/		return 0x8222FA94;
		  /* 8222FA94h */ case    9:  		/* li R4, 20 */
		/* 8222FA94h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8222FA94h case    9:*/		return 0x8222FA98;
		  /* 8222FA98h */ case   10:  		/* bl -798448 */
		/* 8222FA98h case   10:*/		regs.LR = 0x8222FA9C; return 0x8216CBA8;
		/* 8222FA98h case   10:*/		return 0x8222FA9C;
		  /* 8222FA9Ch */ case   11:  		/* stw R30, <#[R3 + 4]> */
		/* 8222FA9Ch case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 8222FA9Ch case   11:*/		return 0x8222FAA0;
		  /* 8222FAA0h */ case   12:  		/* stw R31, <#[R3]> */
		/* 8222FAA0h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 8222FAA0h case   12:*/		return 0x8222FAA4;
		  /* 8222FAA4h */ case   13:  		/* li R11, 1 */
		/* 8222FAA4h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222FAA4h case   13:*/		return 0x8222FAA8;
		  /* 8222FAA8h */ case   14:  		/* lwz R10, <#[R31 + 8]> */
		/* 8222FAA8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8222FAA8h case   14:*/		return 0x8222FAAC;
		  /* 8222FAACh */ case   15:  		/* stw R10, <#[R3 + 12]> */
		/* 8222FAACh case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222FAACh case   15:*/		return 0x8222FAB0;
		  /* 8222FAB0h */ case   16:  		/* stw R3, <#[R31 + 8]> */
		/* 8222FAB0h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8222FAB0h case   16:*/		return 0x8222FAB4;
		  /* 8222FAB4h */ case   17:  		/* lwz R10, <#[R30 + 12]> */
		/* 8222FAB4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222FAB4h case   17:*/		return 0x8222FAB8;
		  /* 8222FAB8h */ case   18:  		/* stw R10, <#[R3 + 8]> */
		/* 8222FAB8h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8222FAB8h case   18:*/		return 0x8222FABC;
		  /* 8222FABCh */ case   19:  		/* stw R3, <#[R30 + 12]> */
		/* 8222FABCh case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8222FABCh case   19:*/		return 0x8222FAC0;
		  /* 8222FAC0h */ case   20:  		/* stw R11, <#[R3 + 16]> */
		/* 8222FAC0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8222FAC0h case   20:*/		return 0x8222FAC4;
		  /* 8222FAC4h */ case   21:  		/* addi R1, R1, 112 */
		/* 8222FAC4h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8222FAC4h case   21:*/		return 0x8222FAC8;
		  /* 8222FAC8h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 8222FAC8h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8222FAC8h case   22:*/		return 0x8222FACC;
		  /* 8222FACCh */ case   23:  		/* mtspr LR, R12 */
		/* 8222FACCh case   23:*/		regs.LR = regs.R12;
		/* 8222FACCh case   23:*/		return 0x8222FAD0;
		  /* 8222FAD0h */ case   24:  		/* ld R30, <#[R1 - 24]> */
		/* 8222FAD0h case   24:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8222FAD0h case   24:*/		return 0x8222FAD4;
		  /* 8222FAD4h */ case   25:  		/* ld R31, <#[R1 - 16]> */
		/* 8222FAD4h case   25:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8222FAD4h case   25:*/		return 0x8222FAD8;
		  /* 8222FAD8h */ case   26:  		/* bclr 20, CR0_LT */
		/* 8222FAD8h case   26:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222FAD8h case   26:*/		return 0x8222FADC;
	}
	return 0x8222FADC;
} // Block from 8222FA70h-8222FADCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222FADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FADC);
		  /* 8222FADCh */ case    0:  		/* nop */
		/* 8222FADCh case    0:*/		cpu::op::nop();
		/* 8222FADCh case    0:*/		return 0x8222FAE0;
	}
	return 0x8222FAE0;
} // Block from 8222FADCh-8222FAE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FAE0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FAE0);
		  /* 8222FAE0h */ case    0:  		/* mfspr R12, LR */
		/* 8222FAE0h case    0:*/		regs.R12 = regs.LR;
		/* 8222FAE0h case    0:*/		return 0x8222FAE4;
		  /* 8222FAE4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8222FAE4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8222FAE4h case    1:*/		return 0x8222FAE8;
		  /* 8222FAE8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8222FAE8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8222FAE8h case    2:*/		return 0x8222FAEC;
		  /* 8222FAECh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8222FAECh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8222FAECh case    3:*/		return 0x8222FAF0;
		  /* 8222FAF0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8222FAF0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8222FAF0h case    4:*/		return 0x8222FAF4;
		  /* 8222FAF4h */ case    5:  		/* mr R31, R3 */
		/* 8222FAF4h case    5:*/		regs.R31 = regs.R3;
		/* 8222FAF4h case    5:*/		return 0x8222FAF8;
		  /* 8222FAF8h */ case    6:  		/* mr R30, R4 */
		/* 8222FAF8h case    6:*/		regs.R30 = regs.R4;
		/* 8222FAF8h case    6:*/		return 0x8222FAFC;
		  /* 8222FAFCh */ case    7:  		/* mr R3, R5 */
		/* 8222FAFCh case    7:*/		regs.R3 = regs.R5;
		/* 8222FAFCh case    7:*/		return 0x8222FB00;
		  /* 8222FB00h */ case    8:  		/* li R5, 24 */
		/* 8222FB00h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8222FB00h case    8:*/		return 0x8222FB04;
		  /* 8222FB04h */ case    9:  		/* li R4, 20 */
		/* 8222FB04h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8222FB04h case    9:*/		return 0x8222FB08;
		  /* 8222FB08h */ case   10:  		/* bl -798560 */
		/* 8222FB08h case   10:*/		regs.LR = 0x8222FB0C; return 0x8216CBA8;
		/* 8222FB08h case   10:*/		return 0x8222FB0C;
		  /* 8222FB0Ch */ case   11:  		/* stw R31, <#[R3 + 4]> */
		/* 8222FB0Ch case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 8222FB0Ch case   11:*/		return 0x8222FB10;
		  /* 8222FB10h */ case   12:  		/* stw R30, <#[R3]> */
		/* 8222FB10h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8222FB10h case   12:*/		return 0x8222FB14;
		  /* 8222FB14h */ case   13:  		/* li R11, 1 */
		/* 8222FB14h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222FB14h case   13:*/		return 0x8222FB18;
		  /* 8222FB18h */ case   14:  		/* lwz R10, <#[R31 + 12]> */
		/* 8222FB18h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222FB18h case   14:*/		return 0x8222FB1C;
		  /* 8222FB1Ch */ case   15:  		/* stw R10, <#[R3 + 8]> */
		/* 8222FB1Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8222FB1Ch case   15:*/		return 0x8222FB20;
		  /* 8222FB20h */ case   16:  		/* stw R3, <#[R31 + 12]> */
		/* 8222FB20h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8222FB20h case   16:*/		return 0x8222FB24;
		  /* 8222FB24h */ case   17:  		/* lwz R10, <#[R30 + 8]> */
		/* 8222FB24h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8222FB24h case   17:*/		return 0x8222FB28;
		  /* 8222FB28h */ case   18:  		/* stw R10, <#[R3 + 12]> */
		/* 8222FB28h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8222FB28h case   18:*/		return 0x8222FB2C;
		  /* 8222FB2Ch */ case   19:  		/* stw R3, <#[R30 + 8]> */
		/* 8222FB2Ch case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8222FB2Ch case   19:*/		return 0x8222FB30;
		  /* 8222FB30h */ case   20:  		/* stw R11, <#[R3 + 16]> */
		/* 8222FB30h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8222FB30h case   20:*/		return 0x8222FB34;
		  /* 8222FB34h */ case   21:  		/* addi R1, R1, 112 */
		/* 8222FB34h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8222FB34h case   21:*/		return 0x8222FB38;
		  /* 8222FB38h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 8222FB38h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8222FB38h case   22:*/		return 0x8222FB3C;
		  /* 8222FB3Ch */ case   23:  		/* mtspr LR, R12 */
		/* 8222FB3Ch case   23:*/		regs.LR = regs.R12;
		/* 8222FB3Ch case   23:*/		return 0x8222FB40;
		  /* 8222FB40h */ case   24:  		/* ld R30, <#[R1 - 24]> */
		/* 8222FB40h case   24:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8222FB40h case   24:*/		return 0x8222FB44;
		  /* 8222FB44h */ case   25:  		/* ld R31, <#[R1 - 16]> */
		/* 8222FB44h case   25:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8222FB44h case   25:*/		return 0x8222FB48;
		  /* 8222FB48h */ case   26:  		/* bclr 20, CR0_LT */
		/* 8222FB48h case   26:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222FB48h case   26:*/		return 0x8222FB4C;
	}
	return 0x8222FB4C;
} // Block from 8222FAE0h-8222FB4Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8222FB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FB4C);
		  /* 8222FB4Ch */ case    0:  		/* nop */
		/* 8222FB4Ch case    0:*/		cpu::op::nop();
		/* 8222FB4Ch case    0:*/		return 0x8222FB50;
	}
	return 0x8222FB50;
} // Block from 8222FB4Ch-8222FB50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FB50h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FB50);
		  /* 8222FB50h */ case    0:  		/* lwz R10, <#[R4 + 40]> */
		/* 8222FB50h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000028) );
		/* 8222FB50h case    0:*/		return 0x8222FB54;
		  /* 8222FB54h */ case    1:  		/* lwz R11, <#[R3 + 48]> */
		/* 8222FB54h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 8222FB54h case    1:*/		return 0x8222FB58;
		  /* 8222FB58h */ case    2:  		/* li R9, 1 */
		/* 8222FB58h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8222FB58h case    2:*/		return 0x8222FB5C;
		  /* 8222FB5Ch */ case    3:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 8222FB5Ch case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 8222FB5Ch case    3:*/		return 0x8222FB60;
		  /* 8222FB60h */ case    4:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 8222FB60h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 8222FB60h case    4:*/		return 0x8222FB64;
		  /* 8222FB64h */ case    5:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8222FB64h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8222FB64h case    5:*/		return 0x8222FB68;
		  /* 8222FB68h */ case    6:  		/* addi R11, R11, 1 */
		/* 8222FB68h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222FB68h case    6:*/		return 0x8222FB6C;
		  /* 8222FB6Ch */ case    7:  		/* slw R9, R9, R8 */
		/* 8222FB6Ch case    7:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8222FB6Ch case    7:*/		return 0x8222FB70;
		  /* 8222FB70h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8222FB70h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8222FB70h case    8:*/		return 0x8222FB74;
		  /* 8222FB74h */ case    9:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8222FB74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8222FB74h case    9:*/		return 0x8222FB78;
		  /* 8222FB78h */ case   10:  		/* and. R11, R9, R11 */
		/* 8222FB78h case   10:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8222FB78h case   10:*/		return 0x8222FB7C;
		  /* 8222FB7Ch */ case   11:  		/* bclr 4, CR0_EQ */
		/* 8222FB7Ch case   11:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 8222FB7Ch case   11:*/		return 0x8222FB80;
	}
	return 0x8222FB80;
} // Block from 8222FB50h-8222FB80h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222FB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FB80);
		  /* 8222FB80h */ case    0:  		/* lwz R3, <#[R3 + 52]> */
		/* 8222FB80h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000034) );
		/* 8222FB80h case    0:*/		return 0x8222FB84;
		  /* 8222FB84h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8222FB84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8222FB84h case    1:*/		return 0x8222FB88;
		  /* 8222FB88h */ case    2:  		/* bc 4, CR6_EQ, -52 */
		/* 8222FB88h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222FB54;  }
		/* 8222FB88h case    2:*/		return 0x8222FB8C;
		  /* 8222FB8Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8222FB8Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222FB8Ch case    3:*/		return 0x8222FB90;
	}
	return 0x8222FB90;
} // Block from 8222FB80h-8222FB90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222FB90h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FB90);
		  /* 8222FB90h */ case    0:  		/* mfspr R12, LR */
		/* 8222FB90h case    0:*/		regs.R12 = regs.LR;
		/* 8222FB90h case    0:*/		return 0x8222FB94;
		  /* 8222FB94h */ case    1:  		/* bl -1698128 */
		/* 8222FB94h case    1:*/		regs.LR = 0x8222FB98; return 0x82091244;
		/* 8222FB94h case    1:*/		return 0x8222FB98;
		  /* 8222FB98h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8222FB98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8222FB98h case    2:*/		return 0x8222FB9C;
		  /* 8222FB9Ch */ case    3:  		/* addi R11, R4, 23 */
		/* 8222FB9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x17);
		/* 8222FB9Ch case    3:*/		return 0x8222FBA0;
		  /* 8222FBA0h */ case    4:  		/* mr R28, R3 */
		/* 8222FBA0h case    4:*/		regs.R28 = regs.R3;
		/* 8222FBA0h case    4:*/		return 0x8222FBA4;
		  /* 8222FBA4h */ case    5:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 8222FBA4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 8222FBA4h case    5:*/		return 0x8222FBA8;
		  /* 8222FBA8h */ case    6:  		/* mr R24, R4 */
		/* 8222FBA8h case    6:*/		regs.R24 = regs.R4;
		/* 8222FBA8h case    6:*/		return 0x8222FBAC;
		  /* 8222FBACh */ case    7:  		/* mr R25, R5 */
		/* 8222FBACh case    7:*/		regs.R25 = regs.R5;
		/* 8222FBACh case    7:*/		return 0x8222FBB0;
		  /* 8222FBB0h */ case    8:  		/* mr R23, R6 */
		/* 8222FBB0h case    8:*/		regs.R23 = regs.R6;
		/* 8222FBB0h case    8:*/		return 0x8222FBB4;
		  /* 8222FBB4h */ case    9:  		/* li R29, 0 */
		/* 8222FBB4h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8222FBB4h case    9:*/		return 0x8222FBB8;
		  /* 8222FBB8h */ case   10:  		/* lwzx R3, <#[R27 + R3]> */
		/* 8222FBB8h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + regs.R3 + 0x00000000) );
		/* 8222FBB8h case   10:*/		return 0x8222FBBC;
		  /* 8222FBBCh */ case   11:  		/* b 32 */
		/* 8222FBBCh case   11:*/		return 0x8222FBDC;
		/* 8222FBBCh case   11:*/		return 0x8222FBC0;
		  /* 8222FBC0h */ case   12:  		/* cmplwi CR6, R3, 0 */
		/* 8222FBC0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8222FBC0h case   12:*/		return 0x8222FBC4;
		  /* 8222FBC4h */ case   13:  		/* bc 12, CR6_EQ, 188 */
		/* 8222FBC4h case   13:*/		if ( regs.CR[6].eq ) { return 0x8222FC80;  }
		/* 8222FBC4h case   13:*/		return 0x8222FBC8;
		  /* 8222FBC8h */ case   14:  		/* mr R4, R24 */
		/* 8222FBC8h case   14:*/		regs.R4 = regs.R24;
		/* 8222FBC8h case   14:*/		return 0x8222FBCC;
		  /* 8222FBCCh */ case   15:  		/* bl -751796 */
		/* 8222FBCCh case   15:*/		regs.LR = 0x8222FBD0; return 0x82178318;
		/* 8222FBCCh case   15:*/		return 0x8222FBD0;
		  /* 8222FBD0h */ case   16:  		/* or. R29, R3, R3 */
		/* 8222FBD0h case   16:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8222FBD0h case   16:*/		return 0x8222FBD4;
		  /* 8222FBD4h */ case   17:  		/* bc 12, CR0_EQ, 184 */
		/* 8222FBD4h case   17:*/		if ( regs.CR[0].eq ) { return 0x8222FC8C;  }
		/* 8222FBD4h case   17:*/		return 0x8222FBD8;
		  /* 8222FBD8h */ case   18:  		/* lwz R3, <#[R29 + 12]> */
		/* 8222FBD8h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222FBD8h case   18:*/		return 0x8222FBDC;
	}
	return 0x8222FBDC;
} // Block from 8222FB90h-8222FBDCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8222FBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FBDC);
		  /* 8222FBDCh */ case    0:  		/* cmplw CR6, R3, R25 */
		/* 8222FBDCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R25);
		/* 8222FBDCh case    0:*/		return 0x8222FBE0;
		  /* 8222FBE0h */ case    1:  		/* bc 4, CR6_EQ, -32 */
		/* 8222FBE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222FBC0;  }
		/* 8222FBE0h case    1:*/		return 0x8222FBE4;
		  /* 8222FBE4h */ case    2:  		/* mr R4, R24 */
		/* 8222FBE4h case    2:*/		regs.R4 = regs.R24;
		/* 8222FBE4h case    2:*/		return 0x8222FBE8;
		  /* 8222FBE8h */ case    3:  		/* mr R3, R25 */
		/* 8222FBE8h case    3:*/		regs.R3 = regs.R25;
		/* 8222FBE8h case    3:*/		return 0x8222FBEC;
		  /* 8222FBECh */ case    4:  		/* bl -751828 */
		/* 8222FBECh case    4:*/		regs.LR = 0x8222FBF0; return 0x82178318;
		/* 8222FBECh case    4:*/		return 0x8222FBF0;
		  /* 8222FBF0h */ case    5:  		/* or. R26, R3, R3 */
		/* 8222FBF0h case    5:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 8222FBF0h case    5:*/		return 0x8222FBF4;
		  /* 8222FBF4h */ case    6:  		/* bc 12, CR0_EQ, 164 */
		/* 8222FBF4h case    6:*/		if ( regs.CR[0].eq ) { return 0x8222FC98;  }
		/* 8222FBF4h case    6:*/		return 0x8222FBF8;
		  /* 8222FBF8h */ case    7:  		/* mr R30, R25 */
		/* 8222FBF8h case    7:*/		regs.R30 = regs.R25;
		/* 8222FBF8h case    7:*/		return 0x8222FBFC;
		  /* 8222FBFCh */ case    8:  		/* lwz R31, <#[R30]> */
		/* 8222FBFCh case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 8222FBFCh case    8:*/		return 0x8222FC00;
		  /* 8222FC00h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 8222FC00h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222FC00h case    9:*/		return 0x8222FC04;
		  /* 8222FC04h */ case   10:  		/* bc 12, CR6_EQ, 148 */
		/* 8222FC04h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222FC98;  }
		/* 8222FC04h case   10:*/		return 0x8222FC08;
		  /* 8222FC08h */ case   11:  		/* cmplw CR6, R31, R26 */
		/* 8222FC08h case   11:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R26);
		/* 8222FC08h case   11:*/		return 0x8222FC0C;
		  /* 8222FC0Ch */ case   12:  		/* bc 12, CR6_EQ, 96 */
		/* 8222FC0Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8222FC6C;  }
		/* 8222FC0Ch case   12:*/		return 0x8222FC10;
		  /* 8222FC10h */ case   13:  		/* lwz R10, <#[R31]> */
		/* 8222FC10h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222FC10h case   13:*/		return 0x8222FC14;
		  /* 8222FC14h */ case   14:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 8222FC14h case   14:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 8222FC14h case   14:*/		return 0x8222FC18;
		  /* 8222FC18h */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 8222FC18h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8222FC28;  }
		/* 8222FC18h case   15:*/		return 0x8222FC1C;
		  /* 8222FC1Ch */ case   16:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 8222FC1Ch case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 8222FC1Ch case   16:*/		return 0x8222FC20;
		  /* 8222FC20h */ case   17:  		/* li R11, 1 */
		/* 8222FC20h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222FC20h case   17:*/		return 0x8222FC24;
		  /* 8222FC24h */ case   18:  		/* bc 12, CR0_EQ, 8 */
		/* 8222FC24h case   18:*/		if ( regs.CR[0].eq ) { return 0x8222FC2C;  }
		/* 8222FC24h case   18:*/		return 0x8222FC28;
	}
	return 0x8222FC28;
} // Block from 8222FBDCh-8222FC28h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC28);
		  /* 8222FC28h */ case    0:  		/* li R11, 0 */
		/* 8222FC28h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222FC28h case    0:*/		return 0x8222FC2C;
	}
	return 0x8222FC2C;
} // Block from 8222FC28h-8222FC2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC2C);
		  /* 8222FC2Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222FC2Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222FC2Ch case    0:*/		return 0x8222FC30;
		  /* 8222FC30h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222FC30h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222FC40;  }
		/* 8222FC30h case    1:*/		return 0x8222FC34;
		  /* 8222FC34h */ case    2:  		/* rlwinm. R11, R10, 0, 7, 18 */
		/* 8222FC34h case    2:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R11,regs.R10);
		/* 8222FC34h case    2:*/		return 0x8222FC38;
		  /* 8222FC38h */ case    3:  		/* li R11, 1 */
		/* 8222FC38h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222FC38h case    3:*/		return 0x8222FC3C;
		  /* 8222FC3Ch */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222FC3Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222FC44;  }
		/* 8222FC3Ch case    4:*/		return 0x8222FC40;
	}
	return 0x8222FC40;
} // Block from 8222FC2Ch-8222FC40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC40h
// Function '?Fold@Instruction@D3DXShader@@QAA?AUFoldResult@2@PAVCompiler@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC40);
		  /* 8222FC40h */ case    0:  		/* li R11, 0 */
		/* 8222FC40h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222FC40h case    0:*/		return 0x8222FC44;
	}
	return 0x8222FC44;
} // Block from 8222FC40h-8222FC44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC44);
		  /* 8222FC44h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222FC44h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222FC44h case    0:*/		return 0x8222FC48;
		  /* 8222FC48h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 8222FC48h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222FC6C;  }
		/* 8222FC48h case    1:*/		return 0x8222FC4C;
		  /* 8222FC4Ch */ case    2:  		/* rlwinm R11, R10, 19, 20, 31 */
		/* 8222FC4Ch case    2:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R11,regs.R10);
		/* 8222FC4Ch case    2:*/		return 0x8222FC50;
		  /* 8222FC50h */ case    3:  		/* addi R11, R11, -1 */
		/* 8222FC50h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222FC50h case    3:*/		return 0x8222FC54;
		  /* 8222FC54h */ case    4:  		/* cmpw CR6, R11, R24 */
		/* 8222FC54h case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R24);
		/* 8222FC54h case    4:*/		return 0x8222FC58;
		  /* 8222FC58h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 8222FC58h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8222FC6C;  }
		/* 8222FC58h case    5:*/		return 0x8222FC5C;
		  /* 8222FC5Ch */ case    6:  		/* mr R5, R23 */
		/* 8222FC5Ch case    6:*/		regs.R5 = regs.R23;
		/* 8222FC5Ch case    6:*/		return 0x8222FC60;
		  /* 8222FC60h */ case    7:  		/* mr R4, R31 */
		/* 8222FC60h case    7:*/		regs.R4 = regs.R31;
		/* 8222FC60h case    7:*/		return 0x8222FC64;
		  /* 8222FC64h */ case    8:  		/* mr R3, R25 */
		/* 8222FC64h case    8:*/		regs.R3 = regs.R25;
		/* 8222FC64h case    8:*/		return 0x8222FC68;
		  /* 8222FC68h */ case    9:  		/* bl -750424 */
		/* 8222FC68h case    9:*/		regs.LR = 0x8222FC6C; return 0x82178910;
		/* 8222FC68h case    9:*/		return 0x8222FC6C;
	}
	return 0x8222FC6C;
} // Block from 8222FC44h-8222FC6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC6C);
		  /* 8222FC6Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8222FC6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222FC6Ch case    0:*/		return 0x8222FC70;
		  /* 8222FC70h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8222FC70h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222FC70h case    1:*/		return 0x8222FC74;
		  /* 8222FC74h */ case    2:  		/* bc 4, CR6_EQ, -120 */
		/* 8222FC74h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222FBFC;  }
		/* 8222FC74h case    2:*/		return 0x8222FC78;
		  /* 8222FC78h */ case    3:  		/* addi R30, R31, 4 */
		/* 8222FC78h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 8222FC78h case    3:*/		return 0x8222FC7C;
		  /* 8222FC7Ch */ case    4:  		/* b -128 */
		/* 8222FC7Ch case    4:*/		return 0x8222FBFC;
		/* 8222FC7Ch case    4:*/		return 0x8222FC80;
	}
	return 0x8222FC80;
} // Block from 8222FC6Ch-8222FC80h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC80);
		  /* 8222FC80h */ case    0:  		/* li R4, 4800 */
		/* 8222FC80h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222FC80h case    0:*/		return 0x8222FC84;
		  /* 8222FC84h */ case    1:  		/* mr R3, R23 */
		/* 8222FC84h case    1:*/		regs.R3 = regs.R23;
		/* 8222FC84h case    1:*/		return 0x8222FC88;
		  /* 8222FC88h */ case    2:  		/* bl -908832 */
		/* 8222FC88h case    2:*/		regs.LR = 0x8222FC8C; return 0x82151E68;
		/* 8222FC88h case    2:*/		return 0x8222FC8C;
	}
	return 0x8222FC8C;
} // Block from 8222FC80h-8222FC8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC8C);
		  /* 8222FC8Ch */ case    0:  		/* li R4, 4800 */
		/* 8222FC8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8222FC8Ch case    0:*/		return 0x8222FC90;
		  /* 8222FC90h */ case    1:  		/* mr R3, R23 */
		/* 8222FC90h case    1:*/		regs.R3 = regs.R23;
		/* 8222FC90h case    1:*/		return 0x8222FC94;
		  /* 8222FC94h */ case    2:  		/* bl -908844 */
		/* 8222FC94h case    2:*/		regs.LR = 0x8222FC98; return 0x82151E68;
		/* 8222FC94h case    2:*/		return 0x8222FC98;
	}
	return 0x8222FC98;
} // Block from 8222FC8Ch-8222FC98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222FC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FC98);
		  /* 8222FC98h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8222FC98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222FC98h case    0:*/		return 0x8222FC9C;
		  /* 8222FC9Ch */ case    1:  		/* bc 12, CR6_EQ, 240 */
		/* 8222FC9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8222FD8C;  }
		/* 8222FC9Ch case    1:*/		return 0x8222FCA0;
		  /* 8222FCA0h */ case    2:  		/* addi R30, R25, 4 */
		/* 8222FCA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x4);
		/* 8222FCA0h case    2:*/		return 0x8222FCA4;
		  /* 8222FCA4h */ case    3:  		/* lwz R31, <#[R30]> */
		/* 8222FCA4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 8222FCA4h case    3:*/		return 0x8222FCA8;
		  /* 8222FCA8h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8222FCA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8222FCA8h case    4:*/		return 0x8222FCAC;
		  /* 8222FCACh */ case    5:  		/* bc 12, CR6_EQ, 132 */
		/* 8222FCACh case    5:*/		if ( regs.CR[6].eq ) { return 0x8222FD30;  }
		/* 8222FCACh case    5:*/		return 0x8222FCB0;
		  /* 8222FCB0h */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8222FCB0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8222FCB0h case    6:*/		return 0x8222FCB4;
		  /* 8222FCB4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8222FCB4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8222FCB4h case    7:*/		return 0x8222FCB8;
		  /* 8222FCB8h */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 8222FCB8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8222FD1C;  }
		/* 8222FCB8h case    8:*/		return 0x8222FCBC;
		  /* 8222FCBCh */ case    9:  		/* cmplw CR6, R31, R29 */
		/* 8222FCBCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8222FCBCh case    9:*/		return 0x8222FCC0;
		  /* 8222FCC0h */ case   10:  		/* bc 12, CR6_EQ, 92 */
		/* 8222FCC0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8222FD1C;  }
		/* 8222FCC0h case   10:*/		return 0x8222FCC4;
		  /* 8222FCC4h */ case   11:  		/* lwz R10, <#[R31]> */
		/* 8222FCC4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8222FCC4h case   11:*/		return 0x8222FCC8;
		  /* 8222FCC8h */ case   12:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 8222FCC8h case   12:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 8222FCC8h case   12:*/		return 0x8222FCCC;
		  /* 8222FCCCh */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 8222FCCCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x8222FCDC;  }
		/* 8222FCCCh case   13:*/		return 0x8222FCD0;
		  /* 8222FCD0h */ case   14:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 8222FCD0h case   14:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 8222FCD0h case   14:*/		return 0x8222FCD4;
		  /* 8222FCD4h */ case   15:  		/* li R11, 1 */
		/* 8222FCD4h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222FCD4h case   15:*/		return 0x8222FCD8;
		  /* 8222FCD8h */ case   16:  		/* bc 12, CR0_EQ, 8 */
		/* 8222FCD8h case   16:*/		if ( regs.CR[0].eq ) { return 0x8222FCE0;  }
		/* 8222FCD8h case   16:*/		return 0x8222FCDC;
	}
	return 0x8222FCDC;
} // Block from 8222FC98h-8222FCDCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222FCDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FCDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FCDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FCDC);
		  /* 8222FCDCh */ case    0:  		/* li R11, 0 */
		/* 8222FCDCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222FCDCh case    0:*/		return 0x8222FCE0;
	}
	return 0x8222FCE0;
} // Block from 8222FCDCh-8222FCE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FCE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FCE0);
		  /* 8222FCE0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222FCE0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222FCE0h case    0:*/		return 0x8222FCE4;
		  /* 8222FCE4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8222FCE4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8222FCF4;  }
		/* 8222FCE4h case    1:*/		return 0x8222FCE8;
		  /* 8222FCE8h */ case    2:  		/* rlwinm. R11, R10, 0, 7, 18 */
		/* 8222FCE8h case    2:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R11,regs.R10);
		/* 8222FCE8h case    2:*/		return 0x8222FCEC;
		  /* 8222FCECh */ case    3:  		/* li R11, 1 */
		/* 8222FCECh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8222FCECh case    3:*/		return 0x8222FCF0;
		  /* 8222FCF0h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8222FCF0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8222FCF8;  }
		/* 8222FCF0h case    4:*/		return 0x8222FCF4;
	}
	return 0x8222FCF4;
} // Block from 8222FCE0h-8222FCF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FCF4);
		  /* 8222FCF4h */ case    0:  		/* li R11, 0 */
		/* 8222FCF4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222FCF4h case    0:*/		return 0x8222FCF8;
	}
	return 0x8222FCF8;
} // Block from 8222FCF4h-8222FCF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FCF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FCF8);
		  /* 8222FCF8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8222FCF8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8222FCF8h case    0:*/		return 0x8222FCFC;
		  /* 8222FCFCh */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8222FCFCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8222FD1C;  }
		/* 8222FCFCh case    1:*/		return 0x8222FD00;
		  /* 8222FD00h */ case    2:  		/* rlwinm R11, R10, 19, 20, 31 */
		/* 8222FD00h case    2:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R11,regs.R10);
		/* 8222FD00h case    2:*/		return 0x8222FD04;
		  /* 8222FD04h */ case    3:  		/* addi R11, R11, -1 */
		/* 8222FD04h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222FD04h case    3:*/		return 0x8222FD08;
		  /* 8222FD08h */ case    4:  		/* cmpw CR6, R11, R24 */
		/* 8222FD08h case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R24);
		/* 8222FD08h case    4:*/		return 0x8222FD0C;
		  /* 8222FD0Ch */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8222FD0Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8222FD1C;  }
		/* 8222FD0Ch case    5:*/		return 0x8222FD10;
	}
	return 0x8222FD10;
} // Block from 8222FCF8h-8222FD10h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD10h
// Function '?ResolveDependencyDef@Compiler@D3DXShader@@QAAXPAVDependency@2@PAPAVInstruction@2@PAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD10);
		  /* 8222FD10h */ case    0:  		/* mr R5, R23 */
		/* 8222FD10h case    0:*/		regs.R5 = regs.R23;
		/* 8222FD10h case    0:*/		return 0x8222FD14;
		  /* 8222FD14h */ case    1:  		/* mr R4, R31 */
		/* 8222FD14h case    1:*/		regs.R4 = regs.R31;
		/* 8222FD14h case    1:*/		return 0x8222FD18;
		  /* 8222FD18h */ case    2:  		/* bl -750600 */
		/* 8222FD18h case    2:*/		regs.LR = 0x8222FD1C; return 0x82178910;
		/* 8222FD18h case    2:*/		return 0x8222FD1C;
	}
	return 0x8222FD1C;
} // Block from 8222FD10h-8222FD1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD1C);
		  /* 8222FD1Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8222FD1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8222FD1Ch case    0:*/		return 0x8222FD20;
		  /* 8222FD20h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8222FD20h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8222FD20h case    1:*/		return 0x8222FD24;
		  /* 8222FD24h */ case    2:  		/* bc 4, CR6_EQ, -128 */
		/* 8222FD24h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222FCA4;  }
		/* 8222FD24h case    2:*/		return 0x8222FD28;
		  /* 8222FD28h */ case    3:  		/* addi R30, R31, 8 */
		/* 8222FD28h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 8222FD28h case    3:*/		return 0x8222FD2C;
		  /* 8222FD2Ch */ case    4:  		/* b -136 */
		/* 8222FD2Ch case    4:*/		return 0x8222FCA4;
		/* 8222FD2Ch case    4:*/		return 0x8222FD30;
	}
	return 0x8222FD30;
} // Block from 8222FD1Ch-8222FD30h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD30);
		  /* 8222FD30h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8222FD30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222FD30h case    0:*/		return 0x8222FD34;
		  /* 8222FD34h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 8222FD34h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222FD78;  }
		/* 8222FD34h case    1:*/		return 0x8222FD38;
		  /* 8222FD38h */ case    2:  		/* lwz R11, <#[R29 + 12]> */
		/* 8222FD38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222FD38h case    2:*/		return 0x8222FD3C;
		  /* 8222FD3Ch */ case    3:  		/* lwz R9, <#[R26 + 12]> */
		/* 8222FD3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000000C) );
		/* 8222FD3Ch case    3:*/		return 0x8222FD40;
		  /* 8222FD40h */ case    4:  		/* addi R11, R11, 4 */
		/* 8222FD40h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8222FD40h case    4:*/		return 0x8222FD44;
		  /* 8222FD44h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 8222FD44h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222FD44h case    5:*/		return 0x8222FD48;
		  /* 8222FD48h */ case    6:  		/* b 12 */
		/* 8222FD48h case    6:*/		return 0x8222FD54;
		/* 8222FD48h case    6:*/		return 0x8222FD4C;
		  /* 8222FD4Ch */ case    7:  		/* addi R11, R10, 8 */
		/* 8222FD4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8222FD4Ch case    7:*/		return 0x8222FD50;
		  /* 8222FD50h */ case    8:  		/* lwz R10, <#[R10 + 8]> */
		/* 8222FD50h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8222FD50h case    8:*/		return 0x8222FD54;
	}
	return 0x8222FD54;
} // Block from 8222FD30h-8222FD54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD54);
		  /* 8222FD54h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 8222FD54h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 8222FD54h case    0:*/		return 0x8222FD58;
		  /* 8222FD58h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8222FD58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222FD4C;  }
		/* 8222FD58h case    1:*/		return 0x8222FD5C;
		  /* 8222FD5Ch */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 8222FD5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8222FD5Ch case    2:*/		return 0x8222FD60;
		  /* 8222FD60h */ case    3:  		/* stw R10, <#[R11]> */
		/* 8222FD60h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222FD60h case    3:*/		return 0x8222FD64;
		  /* 8222FD64h */ case    4:  		/* lwz R11, <#[R9 + 4]> */
		/* 8222FD64h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 8222FD64h case    4:*/		return 0x8222FD68;
		  /* 8222FD68h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 8222FD68h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8222FD68h case    5:*/		return 0x8222FD6C;
		  /* 8222FD6Ch */ case    6:  		/* stw R29, <#[R9 + 4]> */
		/* 8222FD6Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + 0x00000004) );
		/* 8222FD6Ch case    6:*/		return 0x8222FD70;
		  /* 8222FD70h */ case    7:  		/* stw R9, <#[R29 + 12]> */
		/* 8222FD70h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 8222FD70h case    7:*/		return 0x8222FD74;
		  /* 8222FD74h */ case    8:  		/* b 48 */
		/* 8222FD74h case    8:*/		return 0x8222FDA4;
		/* 8222FD74h case    8:*/		return 0x8222FD78;
	}
	return 0x8222FD78;
} // Block from 8222FD54h-8222FD78h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD78);
		  /* 8222FD78h */ case    0:  		/* mr R5, R23 */
		/* 8222FD78h case    0:*/		regs.R5 = regs.R23;
		/* 8222FD78h case    0:*/		return 0x8222FD7C;
		  /* 8222FD7Ch */ case    1:  		/* lwz R3, <#[R29 + 16]> */
		/* 8222FD7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8222FD7Ch case    1:*/		return 0x8222FD80;
		  /* 8222FD80h */ case    2:  		/* mr R4, R29 */
		/* 8222FD80h case    2:*/		regs.R4 = regs.R29;
		/* 8222FD80h case    2:*/		return 0x8222FD84;
		  /* 8222FD84h */ case    3:  		/* bl -750708 */
		/* 8222FD84h case    3:*/		regs.LR = 0x8222FD88; return 0x82178910;
		/* 8222FD84h case    3:*/		return 0x8222FD88;
		  /* 8222FD88h */ case    4:  		/* b 28 */
		/* 8222FD88h case    4:*/		return 0x8222FDA4;
		/* 8222FD88h case    4:*/		return 0x8222FD8C;
	}
	return 0x8222FD8C;
} // Block from 8222FD78h-8222FD8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD8C);
		  /* 8222FD8Ch */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8222FD8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222FD8Ch case    0:*/		return 0x8222FD90;
		  /* 8222FD90h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8222FD90h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222FD9C;  }
		/* 8222FD90h case    1:*/		return 0x8222FD94;
		  /* 8222FD94h */ case    2:  		/* lwz R11, <#[R26 + 12]> */
		/* 8222FD94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 8222FD94h case    2:*/		return 0x8222FD98;
		  /* 8222FD98h */ case    3:  		/* b 8 */
		/* 8222FD98h case    3:*/		return 0x8222FDA0;
		/* 8222FD98h case    3:*/		return 0x8222FD9C;
	}
	return 0x8222FD9C;
} // Block from 8222FD8Ch-8222FD9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8222FD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FD9C);
		  /* 8222FD9Ch */ case    0:  		/* li R11, 0 */
		/* 8222FD9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222FD9Ch case    0:*/		return 0x8222FDA0;
	}
	return 0x8222FDA0;
} // Block from 8222FD9Ch-8222FDA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FDA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FDA0);
		  /* 8222FDA0h */ case    0:  		/* stwx R11, <#[R27 + R28]> */
		/* 8222FDA0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + regs.R28 + 0x00000000) );
		/* 8222FDA0h case    0:*/		return 0x8222FDA4;
	}
	return 0x8222FDA4;
} // Block from 8222FDA0h-8222FDA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8222FDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FDA4);
		  /* 8222FDA4h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8222FDA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8222FDA4h case    0:*/		return 0x8222FDA8;
		  /* 8222FDA8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8222FDA8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8222FDBC;  }
		/* 8222FDA8h case    1:*/		return 0x8222FDAC;
		  /* 8222FDACh */ case    2:  		/* mr R5, R23 */
		/* 8222FDACh case    2:*/		regs.R5 = regs.R23;
		/* 8222FDACh case    2:*/		return 0x8222FDB0;
		  /* 8222FDB0h */ case    3:  		/* mr R4, R26 */
		/* 8222FDB0h case    3:*/		regs.R4 = regs.R26;
		/* 8222FDB0h case    3:*/		return 0x8222FDB4;
		  /* 8222FDB4h */ case    4:  		/* mr R3, R25 */
		/* 8222FDB4h case    4:*/		regs.R3 = regs.R25;
		/* 8222FDB4h case    4:*/		return 0x8222FDB8;
		  /* 8222FDB8h */ case    5:  		/* bl -750760 */
		/* 8222FDB8h case    5:*/		regs.LR = 0x8222FDBC; return 0x82178910;
		/* 8222FDB8h case    5:*/		return 0x8222FDBC;
	}
	return 0x8222FDBC;
} // Block from 8222FDA4h-8222FDBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8222FDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FDBC);
		  /* 8222FDBCh */ case    0:  		/* mr R4, R24 */
		/* 8222FDBCh case    0:*/		regs.R4 = regs.R24;
		/* 8222FDBCh case    0:*/		return 0x8222FDC0;
		  /* 8222FDC0h */ case    1:  		/* mr R3, R25 */
		/* 8222FDC0h case    1:*/		regs.R3 = regs.R25;
		/* 8222FDC0h case    1:*/		return 0x8222FDC4;
		  /* 8222FDC4h */ case    2:  		/* bl -1340 */
		/* 8222FDC4h case    2:*/		regs.LR = 0x8222FDC8; return 0x8222F888;
		/* 8222FDC4h case    2:*/		return 0x8222FDC8;
		  /* 8222FDC8h */ case    3:  		/* addi R1, R1, 160 */
		/* 8222FDC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8222FDC8h case    3:*/		return 0x8222FDCC;
		  /* 8222FDCCh */ case    4:  		/* b -1698616 */
		/* 8222FDCCh case    4:*/		return 0x82091294;
		/* 8222FDCCh case    4:*/		return 0x8222FDD0;
	}
	return 0x8222FDD0;
} // Block from 8222FDBCh-8222FDD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222FDD0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FDD0);
		  /* 8222FDD0h */ case    0:  		/* lwz R11, <#[R3 + 40]> */
		/* 8222FDD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8222FDD0h case    0:*/		return 0x8222FDD4;
		  /* 8222FDD4h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 8222FDD4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8222FDD4h case    1:*/		return 0x8222FDD8;
		  /* 8222FDD8h */ case    2:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 8222FDD8h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 8222FDD8h case    2:*/		return 0x8222FDDC;
		  /* 8222FDDCh */ case    3:  		/* addi R10, R10, 31 */
		/* 8222FDDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8222FDDCh case    3:*/		return 0x8222FDE0;
		  /* 8222FDE0h */ case    4:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 8222FDE0h case    4:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 8222FDE0h case    4:*/		return 0x8222FDE4;
		  /* 8222FDE4h */ case    5:  		/* addi R10, R10, 2 */
		/* 8222FDE4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8222FDE4h case    5:*/		return 0x8222FDE8;
		  /* 8222FDE8h */ case    6:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8222FDE8h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8222FDE8h case    6:*/		return 0x8222FDEC;
		  /* 8222FDECh */ case    7:  		/* add R10, R10, R11 */
		/* 8222FDECh case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8222FDECh case    7:*/		return 0x8222FDF0;
		  /* 8222FDF0h */ case    8:  		/* lwz R11, <#[R4 + 48]> */
		/* 8222FDF0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 8222FDF0h case    8:*/		return 0x8222FDF4;
		  /* 8222FDF4h */ case    9:  		/* li R9, 2 */
		/* 8222FDF4h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8222FDF4h case    9:*/		return 0x8222FDF8;
		  /* 8222FDF8h */ case   10:  		/* li R8, -1 */
		/* 8222FDF8h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 8222FDF8h case   10:*/		return 0x8222FDFC;
		  /* 8222FDFCh */ case   11:  		/* rlwinm R7, R11, 0, 13, 31 */
		/* 8222FDFCh case   11:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R11);
		/* 8222FDFCh case   11:*/		return 0x8222FE00;
		  /* 8222FE00h */ case   12:  		/* rlwinm R11, R7, 1, 0, 30 */
		/* 8222FE00h case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R7);
		/* 8222FE00h case   12:*/		return 0x8222FE04;
		  /* 8222FE04h */ case   13:  		/* rlwinm R6, R7, 30, 3, 29 */
		/* 8222FE04h case   13:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R6,regs.R7);
		/* 8222FE04h case   13:*/		return 0x8222FE08;
		  /* 8222FE08h */ case   14:  		/* addi R11, R11, 1 */
		/* 8222FE08h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8222FE08h case   14:*/		return 0x8222FE0C;
		  /* 8222FE0Ch */ case   15:  		/* rlwinm R7, R7, 1, 27, 30 */
		/* 8222FE0Ch case   15:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R7,regs.R7);
		/* 8222FE0Ch case   15:*/		return 0x8222FE10;
		  /* 8222FE10h */ case   16:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8222FE10h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8222FE10h case   16:*/		return 0x8222FE14;
		  /* 8222FE14h */ case   17:  		/* slw R8, R8, R7 */
		/* 8222FE14h case   17:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 8222FE14h case   17:*/		return 0x8222FE18;
		  /* 8222FE18h */ case   18:  		/* slw R11, R9, R11 */
		/* 8222FE18h case   18:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8222FE18h case   18:*/		return 0x8222FE1C;
		  /* 8222FE1Ch */ case   19:  		/* lwzx R9, <#[R6 + R10]> */
		/* 8222FE1Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 8222FE1Ch case   19:*/		return 0x8222FE20;
		  /* 8222FE20h */ case   20:  		/* addi R11, R11, -1 */
		/* 8222FE20h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8222FE20h case   20:*/		return 0x8222FE24;
		  /* 8222FE24h */ case   21:  		/* and R11, R11, R9 */
		/* 8222FE24h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8222FE24h case   21:*/		return 0x8222FE28;
		  /* 8222FE28h */ case   22:  		/* and R11, R11, R8 */
		/* 8222FE28h case   22:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8222FE28h case   22:*/		return 0x8222FE2C;
		  /* 8222FE2Ch */ case   23:  		/* srw. R11, R11, R7 */
		/* 8222FE2Ch case   23:*/		cpu::op::srw<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8222FE2Ch case   23:*/		return 0x8222FE30;
		  /* 8222FE30h */ case   24:  		/* bc 12, CR0_EQ, 32 */
		/* 8222FE30h case   24:*/		if ( regs.CR[0].eq ) { return 0x8222FE50;  }
		/* 8222FE30h case   24:*/		return 0x8222FE34;
		  /* 8222FE34h */ case   25:  		/* cmplwi CR6, R11, 3 */
		/* 8222FE34h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8222FE34h case   25:*/		return 0x8222FE38;
		  /* 8222FE38h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 8222FE38h case   26:*/		if ( regs.CR[6].eq ) { return 0x8222FE50;  }
		/* 8222FE38h case   26:*/		return 0x8222FE3C;
		  /* 8222FE3Ch */ case   27:  		/* lwz R4, <#[R4 + 64]> */
		/* 8222FE3Ch case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000040) );
		/* 8222FE3Ch case   27:*/		return 0x8222FE40;
		  /* 8222FE40h */ case   28:  		/* cmplwi CR6, R4, 0 */
		/* 8222FE40h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8222FE40h case   28:*/		return 0x8222FE44;
		  /* 8222FE44h */ case   29:  		/* bc 4, CR6_EQ, -84 */
		/* 8222FE44h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8222FDF0;  }
		/* 8222FE44h case   29:*/		return 0x8222FE48;
		  /* 8222FE48h */ case   30:  		/* li R3, 1 */
		/* 8222FE48h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8222FE48h case   30:*/		return 0x8222FE4C;
		  /* 8222FE4Ch */ case   31:  		/* bclr 20, CR0_LT */
		/* 8222FE4Ch case   31:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222FE4Ch case   31:*/		return 0x8222FE50;
	}
	return 0x8222FE50;
} // Block from 8222FDD0h-8222FE50h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8222FE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FE50);
		  /* 8222FE50h */ case    0:  		/* li R3, 0 */
		/* 8222FE50h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222FE50h case    0:*/		return 0x8222FE54;
		  /* 8222FE54h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8222FE54h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8222FE54h case    1:*/		return 0x8222FE58;
	}
	return 0x8222FE58;
} // Block from 8222FE50h-8222FE58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222FE58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FE58);
		  /* 8222FE58h */ case    0:  		/* b -1698584 */
		/* 8222FE58h case    0:*/		return 0x82091340;
		/* 8222FE58h case    0:*/		return 0x8222FE5C;
		  /* 8222FE5Ch */ case    1:  		/* nop */
		/* 8222FE5Ch case    1:*/		cpu::op::nop();
		/* 8222FE5Ch case    1:*/		return 0x8222FE60;
	}
	return 0x8222FE60;
} // Block from 8222FE58h-8222FE60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222FE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FE60);
		  /* 8222FE60h */ case    0:  		/* mfspr R12, LR */
		/* 8222FE60h case    0:*/		regs.R12 = regs.LR;
		/* 8222FE60h case    0:*/		return 0x8222FE64;
		  /* 8222FE64h */ case    1:  		/* bl -1698836 */
		/* 8222FE64h case    1:*/		regs.LR = 0x8222FE68; return 0x82091250;
		/* 8222FE64h case    1:*/		return 0x8222FE68;
		  /* 8222FE68h */ case    2:  		/* stfd FR30, <#[R1 - 72]> */
		/* 8222FE68h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 8222FE68h case    2:*/		return 0x8222FE6C;
		  /* 8222FE6Ch */ case    3:  		/* stfd FR31, <#[R1 - 64]> */
		/* 8222FE6Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8222FE6Ch case    3:*/		return 0x8222FE70;
		  /* 8222FE70h */ case    4:  		/* stwu R1, <#[R1 - 192]> */
		/* 8222FE70h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8222FE70h case    4:*/		return 0x8222FE74;
		  /* 8222FE74h */ case    5:  		/* lis R11, -32256 */
		/* 8222FE74h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8222FE74h case    5:*/		return 0x8222FE78;
		  /* 8222FE78h */ case    6:  		/* mr R26, R4 */
		/* 8222FE78h case    6:*/		regs.R26 = regs.R4;
		/* 8222FE78h case    6:*/		return 0x8222FE7C;
		  /* 8222FE7Ch */ case    7:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 8222FE7Ch case    7:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 8222FE7Ch case    7:*/		return 0x8222FE80;
		  /* 8222FE80h */ case    8:  		/* fcmpu CR6, FR1, FR0 */
		/* 8222FE80h case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 8222FE80h case    8:*/		return 0x8222FE84;
		  /* 8222FE84h */ case    9:  		/* bc 12, CR6_LT, 12 */
		/* 8222FE84h case    9:*/		if ( regs.CR[6].lt ) { return 0x8222FE90;  }
		/* 8222FE84h case    9:*/		return 0x8222FE88;
		  /* 8222FE88h */ case   10:  		/* li R27, 43 */
		/* 8222FE88h case   10:*/		cpu::op::li<0>(regs,&regs.R27,0x2B);
		/* 8222FE88h case   10:*/		return 0x8222FE8C;
		  /* 8222FE8Ch */ case   11:  		/* b 12 */
		/* 8222FE8Ch case   11:*/		return 0x8222FE98;
		/* 8222FE8Ch case   11:*/		return 0x8222FE90;
	}
	return 0x8222FE90;
} // Block from 8222FE60h-8222FE90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222FE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FE90);
		  /* 8222FE90h */ case    0:  		/* li R27, 45 */
		/* 8222FE90h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x2D);
		/* 8222FE90h case    0:*/		return 0x8222FE94;
		  /* 8222FE94h */ case    1:  		/* fneg FR1, FR1 */
		/* 8222FE94h case    1:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR1);
		/* 8222FE94h case    1:*/		return 0x8222FE98;
	}
	return 0x8222FE98;
} // Block from 8222FE90h-8222FE98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8222FE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FE98);
		  /* 8222FE98h */ case    0:  		/* fctiwz FR0, FR1 */
		/* 8222FE98h case    0:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR1);
		/* 8222FE98h case    0:*/		return 0x8222FE9C;
		  /* 8222FE9Ch */ case    1:  		/* stfd FR0, <#[R1 + 80]> */
		/* 8222FE9Ch case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8222FE9Ch case    1:*/		return 0x8222FEA0;
		  /* 8222FEA0h */ case    2:  		/* lwz R28, <#[R1 + 84]> */
		/* 8222FEA0h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 8222FEA0h case    2:*/		return 0x8222FEA4;
		  /* 8222FEA4h */ case    3:  		/* extsw R11, R28 */
		/* 8222FEA4h case    3:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R28);
		/* 8222FEA4h case    3:*/		return 0x8222FEA8;
		  /* 8222FEA8h */ case    4:  		/* std R11, <#[R1 + 80]> */
		/* 8222FEA8h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8222FEA8h case    4:*/		return 0x8222FEAC;
		  /* 8222FEACh */ case    5:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8222FEACh case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8222FEACh case    5:*/		return 0x8222FEB0;
		  /* 8222FEB0h */ case    6:  		/* fcfid FR0, FR0 */
		/* 8222FEB0h case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8222FEB0h case    6:*/		return 0x8222FEB4;
		  /* 8222FEB4h */ case    7:  		/* lis R10, -32256 */
		/* 8222FEB4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8222FEB4h case    7:*/		return 0x8222FEB8;
		  /* 8222FEB8h */ case    8:  		/* frsp FR0, FR0 */
		/* 8222FEB8h case    8:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8222FEB8h case    8:*/		return 0x8222FEBC;
		  /* 8222FEBCh */ case    9:  		/* lis R11, -32253 */
		/* 8222FEBCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8222FEBCh case    9:*/		return 0x8222FEC0;
		  /* 8222FEC0h */ case   10:  		/* lfs FR30, <#[R10 + 2736]> */
		/* 8222FEC0h case   10:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R10 + 0x00000AB0) );
		/* 8222FEC0h case   10:*/		return 0x8222FEC4;
		  /* 8222FEC4h */ case   11:  		/* li R31, 0 */
		/* 8222FEC4h case   11:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8222FEC4h case   11:*/		return 0x8222FEC8;
		  /* 8222FEC8h */ case   12:  		/* addi R29, R11, 26668 */
		/* 8222FEC8h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x682C);
		/* 8222FEC8h case   12:*/		return 0x8222FECC;
		  /* 8222FECCh */ case   13:  		/* fsubs FR31, FR1, FR0 */
		/* 8222FECCh case   13:*/		cpu::op::fsubs<0>(regs,&regs.FR31,regs.FR1,regs.FR0);
		/* 8222FECCh case   13:*/		return 0x8222FED0;
		  /* 8222FED0h */ case   14:  		/* fctiwz FR0, FR31 */
		/* 8222FED0h case   14:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR31);
		/* 8222FED0h case   14:*/		return 0x8222FED4;
		  /* 8222FED4h */ case   15:  		/* stfd FR0, <#[R1 + 80]> */
		/* 8222FED4h case   15:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8222FED4h case   15:*/		return 0x8222FED8;
		  /* 8222FED8h */ case   16:  		/* lwz R30, <#[R1 + 84]> */
		/* 8222FED8h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8222FED8h case   16:*/		return 0x8222FEDC;
		  /* 8222FEDCh */ case   17:  		/* extsw R10, R30 */
		/* 8222FEDCh case   17:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R30);
		/* 8222FEDCh case   17:*/		return 0x8222FEE0;
		  /* 8222FEE0h */ case   18:  		/* addi R11, R1, 96 */
		/* 8222FEE0h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8222FEE0h case   18:*/		return 0x8222FEE4;
		  /* 8222FEE4h */ case   19:  		/* std R10, <#[R1 + 80]> */
		/* 8222FEE4h case   19:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8222FEE4h case   19:*/		return 0x8222FEE8;
		  /* 8222FEE8h */ case   20:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8222FEE8h case   20:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8222FEE8h case   20:*/		return 0x8222FEEC;
		  /* 8222FEECh */ case   21:  		/* fcfid FR0, FR0 */
		/* 8222FEECh case   21:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8222FEECh case   21:*/		return 0x8222FEF0;
		  /* 8222FEF0h */ case   22:  		/* mr R4, R29 */
		/* 8222FEF0h case   22:*/		regs.R4 = regs.R29;
		/* 8222FEF0h case   22:*/		return 0x8222FEF4;
		  /* 8222FEF4h */ case   23:  		/* frsp FR0, FR0 */
		/* 8222FEF4h case   23:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8222FEF4h case   23:*/		return 0x8222FEF8;
		  /* 8222FEF8h */ case   24:  		/* add R3, R31, R11 */
		/* 8222FEF8h case   24:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 8222FEF8h case   24:*/		return 0x8222FEFC;
		  /* 8222FEFCh */ case   25:  		/* fsubs FR0, FR31, FR0 */
		/* 8222FEFCh case   25:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR31,regs.FR0);
		/* 8222FEFCh case   25:*/		return 0x8222FF00;
		  /* 8222FF00h */ case   26:  		/* fmuls FR31, FR0, FR30 */
		/* 8222FF00h case   26:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR0,regs.FR30);
		/* 8222FF00h case   26:*/		return 0x8222FF04;
		  /* 8222FF04h */ case   27:  		/* fctiwz FR0, FR31 */
		/* 8222FF04h case   27:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR31);
		/* 8222FF04h case   27:*/		return 0x8222FF08;
		  /* 8222FF08h */ case   28:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8222FF08h case   28:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8222FF08h case   28:*/		return 0x8222FF0C;
		  /* 8222FF0Ch */ case   29:  		/* lwz R30, <#[R1 + 92]> */
		/* 8222FF0Ch case   29:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8222FF0Ch case   29:*/		return 0x8222FF10;
		  /* 8222FF10h */ case   30:  		/* mr R5, R30 */
		/* 8222FF10h case   30:*/		regs.R5 = regs.R30;
		/* 8222FF10h case   30:*/		return 0x8222FF14;
		  /* 8222FF14h */ case   31:  		/* bl 232876 */
		/* 8222FF14h case   31:*/		regs.LR = 0x8222FF18; return 0x82268CC0;
		/* 8222FF14h case   31:*/		return 0x8222FF18;
		  /* 8222FF18h */ case   32:  		/* addi R31, R31, 1 */
		/* 8222FF18h case   32:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8222FF18h case   32:*/		return 0x8222FF1C;
		  /* 8222FF1Ch */ case   33:  		/* cmpwi CR6, R31, 9 */
		/* 8222FF1Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000009);
		/* 8222FF1Ch case   33:*/		return 0x8222FF20;
		  /* 8222FF20h */ case   34:  		/* bc 12, CR6_LT, -68 */
		/* 8222FF20h case   34:*/		if ( regs.CR[6].lt ) { return 0x8222FEDC;  }
		/* 8222FF20h case   34:*/		return 0x8222FF24;
		  /* 8222FF24h */ case   35:  		/* li R11, 0 */
		/* 8222FF24h case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8222FF24h case   35:*/		return 0x8222FF28;
		  /* 8222FF28h */ case   36:  		/* lis R10, -32252 */
		/* 8222FF28h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8222FF28h case   36:*/		return 0x8222FF2C;
		  /* 8222FF2Ch */ case   37:  		/* stb R11, <#[R1 + 105]> */
		/* 8222FF2Ch case   37:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000069) );
		/* 8222FF2Ch case   37:*/		return 0x8222FF30;
		  /* 8222FF30h */ case   38:  		/* addi R7, R1, 96 */
		/* 8222FF30h case   38:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8222FF30h case   38:*/		return 0x8222FF34;
		  /* 8222FF34h */ case   39:  		/* addi R4, R10, 4312 */
		/* 8222FF34h case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10D8);
		/* 8222FF34h case   39:*/		return 0x8222FF38;
		  /* 8222FF38h */ case   40:  		/* mr R6, R28 */
		/* 8222FF38h case   40:*/		regs.R6 = regs.R28;
		/* 8222FF38h case   40:*/		return 0x8222FF3C;
		  /* 8222FF3Ch */ case   41:  		/* extsb R5, R27 */
		/* 8222FF3Ch case   41:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R27);
		/* 8222FF3Ch case   41:*/		return 0x8222FF40;
		  /* 8222FF40h */ case   42:  		/* mr R3, R26 */
		/* 8222FF40h case   42:*/		regs.R3 = regs.R26;
		/* 8222FF40h case   42:*/		return 0x8222FF44;
		  /* 8222FF44h */ case   43:  		/* bl 232828 */
		/* 8222FF44h case   43:*/		regs.LR = 0x8222FF48; return 0x82268CC0;
		/* 8222FF44h case   43:*/		return 0x8222FF48;
		  /* 8222FF48h */ case   44:  		/* addi R1, R1, 192 */
		/* 8222FF48h case   44:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8222FF48h case   44:*/		return 0x8222FF4C;
		  /* 8222FF4Ch */ case   45:  		/* lfd FR30, <#[R1 - 72]> */
		/* 8222FF4Ch case   45:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 8222FF4Ch case   45:*/		return 0x8222FF50;
		  /* 8222FF50h */ case   46:  		/* lfd FR31, <#[R1 - 64]> */
		/* 8222FF50h case   46:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8222FF50h case   46:*/		return 0x8222FF54;
		  /* 8222FF54h */ case   47:  		/* b -1698996 */
		/* 8222FF54h case   47:*/		return 0x820912A0;
		/* 8222FF54h case   47:*/		return 0x8222FF58;
	}
	return 0x8222FF58;
} // Block from 8222FE98h-8222FF58h (48 instructions)

//////////////////////////////////////////////////////
// Block at 8222FF58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FF58);
		  /* 8222FF58h */ case    0:  		/* mfspr R12, LR */
		/* 8222FF58h case    0:*/		regs.R12 = regs.LR;
		/* 8222FF58h case    0:*/		return 0x8222FF5C;
		  /* 8222FF5Ch */ case    1:  		/* bl -1699076 */
		/* 8222FF5Ch case    1:*/		regs.LR = 0x8222FF60; return 0x82091258;
		/* 8222FF5Ch case    1:*/		return 0x8222FF60;
		  /* 8222FF60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8222FF60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8222FF60h case    2:*/		return 0x8222FF64;
		  /* 8222FF64h */ case    3:  		/* mr R31, R3 */
		/* 8222FF64h case    3:*/		regs.R31 = regs.R3;
		/* 8222FF64h case    3:*/		return 0x8222FF68;
		  /* 8222FF68h */ case    4:  		/* mr R30, R5 */
		/* 8222FF68h case    4:*/		regs.R30 = regs.R5;
		/* 8222FF68h case    4:*/		return 0x8222FF6C;
		  /* 8222FF6Ch */ case    5:  		/* mr R29, R6 */
		/* 8222FF6Ch case    5:*/		regs.R29 = regs.R6;
		/* 8222FF6Ch case    5:*/		return 0x8222FF70;
		  /* 8222FF70h */ case    6:  		/* mr R28, R7 */
		/* 8222FF70h case    6:*/		regs.R28 = regs.R7;
		/* 8222FF70h case    6:*/		return 0x8222FF74;
		  /* 8222FF74h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8222FF74h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8222FF74h case    7:*/		return 0x8222FF78;
		  /* 8222FF78h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8222FF78h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8222FF9C;  }
		/* 8222FF78h case    8:*/		return 0x8222FF7C;
		  /* 8222FF7Ch */ case    9:  		/* lis R11, -32252 */
		/* 8222FF7Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8222FF7Ch case    9:*/		return 0x8222FF80;
		  /* 8222FF80h */ case   10:  		/* lis R10, -32253 */
		/* 8222FF80h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8222FF80h case   10:*/		return 0x8222FF84;
		  /* 8222FF84h */ case   11:  		/* lis R9, -32253 */
		/* 8222FF84h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8222FF84h case   11:*/		return 0x8222FF88;
		  /* 8222FF88h */ case   12:  		/* addi R6, R11, 4336 */
		/* 8222FF88h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 8222FF88h case   12:*/		return 0x8222FF8C;
		  /* 8222FF8Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 8222FF8Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8222FF8Ch case   13:*/		return 0x8222FF90;
		  /* 8222FF90h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8222FF90h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8222FF90h case   14:*/		return 0x8222FF94;
		  /* 8222FF94h */ case   15:  		/* li R7, 733 */
		/* 8222FF94h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x2DD);
		/* 8222FF94h case   15:*/		return 0x8222FF98;
		  /* 8222FF98h */ case   16:  		/* bl -885648 */
		/* 8222FF98h case   16:*/		regs.LR = 0x8222FF9C; return 0x82157C08;
		/* 8222FF98h case   16:*/		return 0x8222FF9C;
	}
	return 0x8222FF9C;
} // Block from 8222FF58h-8222FF9Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8222FF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FF9C);
		  /* 8222FF9Ch */ case    0:  		/* li R4, 127 */
		/* 8222FF9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x7F);
		/* 8222FF9Ch case    0:*/		return 0x8222FFA0;
		  /* 8222FFA0h */ case    1:  		/* mr R3, R31 */
		/* 8222FFA0h case    1:*/		regs.R3 = regs.R31;
		/* 8222FFA0h case    1:*/		return 0x8222FFA4;
		  /* 8222FFA4h */ case    2:  		/* bl -862868 */
		/* 8222FFA4h case    2:*/		regs.LR = 0x8222FFA8; return 0x8215D510;
		/* 8222FFA4h case    2:*/		return 0x8222FFA8;
		  /* 8222FFA8h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 8222FFA8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 8222FFA8h case    3:*/		return 0x8222FFAC;
		  /* 8222FFACh */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 8222FFACh case    4:*/		if ( !regs.CR[6].eq ) { return 0x8223000C;  }
		/* 8222FFACh case    4:*/		return 0x8222FFB0;
		  /* 8222FFB0h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 8222FFB0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8222FFB0h case    5:*/		return 0x8222FFB4;
		  /* 8222FFB4h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 8222FFB4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8222FFCC;  }
		/* 8222FFB4h case    6:*/		return 0x8222FFB8;
		  /* 8222FFB8h */ case    7:  		/* li R6, 1 */
		/* 8222FFB8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8222FFB8h case    7:*/		return 0x8222FFBC;
		  /* 8222FFBCh */ case    8:  		/* li R5, 0 */
		/* 8222FFBCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8222FFBCh case    8:*/		return 0x8222FFC0;
		  /* 8222FFC0h */ case    9:  		/* li R4, 4 */
		/* 8222FFC0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8222FFC0h case    9:*/		return 0x8222FFC4;
		  /* 8222FFC4h */ case   10:  		/* mr R3, R30 */
		/* 8222FFC4h case   10:*/		regs.R3 = regs.R30;
		/* 8222FFC4h case   10:*/		return 0x8222FFC8;
		  /* 8222FFC8h */ case   11:  		/* bl -861224 */
		/* 8222FFC8h case   11:*/		regs.LR = 0x8222FFCC; return 0x8215DBA0;
		/* 8222FFC8h case   11:*/		return 0x8222FFCC;
	}
	return 0x8222FFCC;
} // Block from 8222FF9Ch-8222FFCCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8222FFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222FFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222FFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222FFCC);
		  /* 8222FFCCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8222FFCCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8222FFCCh case    0:*/		return 0x8222FFD0;
		  /* 8222FFD0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8222FFD0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230004;  }
		/* 8222FFD0h case    1:*/		return 0x8222FFD4;
		  /* 8222FFD4h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8222FFD4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8222FFD4h case    2:*/		return 0x8222FFD8;
		  /* 8222FFD8h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 8222FFD8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230004;  }
		/* 8222FFD8h case    3:*/		return 0x8222FFDC;
		  /* 8222FFDCh */ case    4:  		/* lis R11, -32216 */
		/* 8222FFDCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8222FFDCh case    4:*/		return 0x8222FFE0;
		  /* 8222FFE0h */ case    5:  		/* mtspr CTR, R29 */
		/* 8222FFE0h case    5:*/		regs.CTR = regs.R29;
		/* 8222FFE0h case    5:*/		return 0x8222FFE4;
		  /* 8222FFE4h */ case    6:  		/* lis R10, -32252 */
		/* 8222FFE4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8222FFE4h case    6:*/		return 0x8222FFE8;
		  /* 8222FFE8h */ case    7:  		/* addi R11, R11, 11160 */
		/* 8222FFE8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8222FFE8h case    7:*/		return 0x8222FFEC;
		  /* 8222FFECh */ case    8:  		/* addi R4, R10, 4320 */
		/* 8222FFECh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 8222FFECh case    8:*/		return 0x8222FFF0;
		  /* 8222FFF0h */ case    9:  		/* li R7, 1 */
		/* 8222FFF0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8222FFF0h case    9:*/		return 0x8222FFF4;
		  /* 8222FFF4h */ case   10:  		/* li R6, 4 */
		/* 8222FFF4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8222FFF4h case   10:*/		return 0x8222FFF8;
		  /* 8222FFF8h */ case   11:  		/* mr R3, R28 */
		/* 8222FFF8h case   11:*/		regs.R3 = regs.R28;
		/* 8222FFF8h case   11:*/		return 0x8222FFFC;
		  /* 8222FFFCh */ case   12:  		/* lwz R5, <#[R11 + 16]> */
		/* 8222FFFCh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 8222FFFCh case   12:*/		return 0x82230000;
		  /* 82230000h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230000h case   13:*/		if ( 1 ) { regs.LR = 0x82230004; return (uint32)regs.CTR; }
		/* 82230000h case   13:*/		return 0x82230004;
	}
	return 0x82230004;
} // Block from 8222FFCCh-82230004h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230004);
		  /* 82230004h */ case    0:  		/* li R3, 1 */
		/* 82230004h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230004h case    0:*/		return 0x82230008;
		  /* 82230008h */ case    1:  		/* b 92 */
		/* 82230008h case    1:*/		return 0x82230064;
		/* 82230008h case    1:*/		return 0x8223000C;
	}
	return 0x8223000C;
} // Block from 82230004h-8223000Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223000Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223000C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223000C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223000C);
		  /* 8223000Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8223000Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223000Ch case    0:*/		return 0x82230010;
		  /* 82230010h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230010h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230028;  }
		/* 82230010h case    1:*/		return 0x82230014;
		  /* 82230014h */ case    2:  		/* li R6, 0 */
		/* 82230014h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230014h case    2:*/		return 0x82230018;
		  /* 82230018h */ case    3:  		/* li R5, 0 */
		/* 82230018h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230018h case    3:*/		return 0x8223001C;
		  /* 8223001Ch */ case    4:  		/* li R4, 4 */
		/* 8223001Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8223001Ch case    4:*/		return 0x82230020;
		  /* 82230020h */ case    5:  		/* mr R3, R30 */
		/* 82230020h case    5:*/		regs.R3 = regs.R30;
		/* 82230020h case    5:*/		return 0x82230024;
		  /* 82230024h */ case    6:  		/* bl -861316 */
		/* 82230024h case    6:*/		regs.LR = 0x82230028; return 0x8215DBA0;
		/* 82230024h case    6:*/		return 0x82230028;
	}
	return 0x82230028;
} // Block from 8223000Ch-82230028h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230028);
		  /* 82230028h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230028h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230028h case    0:*/		return 0x8223002C;
		  /* 8223002Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8223002Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82230060;  }
		/* 8223002Ch case    1:*/		return 0x82230030;
		  /* 82230030h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230030h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230030h case    2:*/		return 0x82230034;
		  /* 82230034h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230034h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230060;  }
		/* 82230034h case    3:*/		return 0x82230038;
		  /* 82230038h */ case    4:  		/* lis R11, -32216 */
		/* 82230038h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230038h case    4:*/		return 0x8223003C;
		  /* 8223003Ch */ case    5:  		/* mtspr CTR, R29 */
		/* 8223003Ch case    5:*/		regs.CTR = regs.R29;
		/* 8223003Ch case    5:*/		return 0x82230040;
		  /* 82230040h */ case    6:  		/* lis R10, -32252 */
		/* 82230040h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230040h case    6:*/		return 0x82230044;
		  /* 82230044h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230044h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230044h case    7:*/		return 0x82230048;
		  /* 82230048h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230048h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230048h case    8:*/		return 0x8223004C;
		  /* 8223004Ch */ case    9:  		/* li R7, 0 */
		/* 8223004Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8223004Ch case    9:*/		return 0x82230050;
		  /* 82230050h */ case   10:  		/* li R6, 4 */
		/* 82230050h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82230050h case   10:*/		return 0x82230054;
		  /* 82230054h */ case   11:  		/* mr R3, R28 */
		/* 82230054h case   11:*/		regs.R3 = regs.R28;
		/* 82230054h case   11:*/		return 0x82230058;
		  /* 82230058h */ case   12:  		/* lwz R5, <#[R11 + 16]> */
		/* 82230058h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 82230058h case   12:*/		return 0x8223005C;
		  /* 8223005Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8223005Ch case   13:*/		if ( 1 ) { regs.LR = 0x82230060; return (uint32)regs.CTR; }
		/* 8223005Ch case   13:*/		return 0x82230060;
	}
	return 0x82230060;
} // Block from 82230028h-82230060h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230060);
		  /* 82230060h */ case    0:  		/* li R3, 0 */
		/* 82230060h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230060h case    0:*/		return 0x82230064;
	}
	return 0x82230064;
} // Block from 82230060h-82230064h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230064);
		  /* 82230064h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230064h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230064h case    0:*/		return 0x82230068;
		  /* 82230068h */ case    1:  		/* b -1699264 */
		/* 82230068h case    1:*/		return 0x820912A8;
		/* 82230068h case    1:*/		return 0x8223006C;
		  /* 8223006Ch */ case    2:  		/* nop */
		/* 8223006Ch case    2:*/		cpu::op::nop();
		/* 8223006Ch case    2:*/		return 0x82230070;
	}
	return 0x82230070;
} // Block from 82230064h-82230070h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230070);
		  /* 82230070h */ case    0:  		/* mfspr R12, LR */
		/* 82230070h case    0:*/		regs.R12 = regs.LR;
		/* 82230070h case    0:*/		return 0x82230074;
		  /* 82230074h */ case    1:  		/* bl -1699360 */
		/* 82230074h case    1:*/		regs.LR = 0x82230078; return 0x82091254;
		/* 82230074h case    1:*/		return 0x82230078;
		  /* 82230078h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230078h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230078h case    2:*/		return 0x8223007C;
		  /* 8223007Ch */ case    3:  		/* mr R31, R3 */
		/* 8223007Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223007Ch case    3:*/		return 0x82230080;
		  /* 82230080h */ case    4:  		/* mr R30, R5 */
		/* 82230080h case    4:*/		regs.R30 = regs.R5;
		/* 82230080h case    4:*/		return 0x82230084;
		  /* 82230084h */ case    5:  		/* mr R29, R6 */
		/* 82230084h case    5:*/		regs.R29 = regs.R6;
		/* 82230084h case    5:*/		return 0x82230088;
		  /* 82230088h */ case    6:  		/* mr R28, R7 */
		/* 82230088h case    6:*/		regs.R28 = regs.R7;
		/* 82230088h case    6:*/		return 0x8223008C;
		  /* 8223008Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8223008Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223008Ch case    7:*/		return 0x82230090;
		  /* 82230090h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230090h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822300B4;  }
		/* 82230090h case    8:*/		return 0x82230094;
		  /* 82230094h */ case    9:  		/* lis R11, -32252 */
		/* 82230094h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230094h case    9:*/		return 0x82230098;
		  /* 82230098h */ case   10:  		/* lis R10, -32253 */
		/* 82230098h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230098h case   10:*/		return 0x8223009C;
		  /* 8223009Ch */ case   11:  		/* lis R9, -32253 */
		/* 8223009Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223009Ch case   11:*/		return 0x822300A0;
		  /* 822300A0h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822300A0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822300A0h case   12:*/		return 0x822300A4;
		  /* 822300A4h */ case   13:  		/* addi R5, R10, 27792 */
		/* 822300A4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822300A4h case   13:*/		return 0x822300A8;
		  /* 822300A8h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822300A8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822300A8h case   14:*/		return 0x822300AC;
		  /* 822300ACh */ case   15:  		/* li R7, 817 */
		/* 822300ACh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x331);
		/* 822300ACh case   15:*/		return 0x822300B0;
		  /* 822300B0h */ case   16:  		/* bl -885928 */
		/* 822300B0h case   16:*/		regs.LR = 0x822300B4; return 0x82157C08;
		/* 822300B0h case   16:*/		return 0x822300B4;
	}
	return 0x822300B4;
} // Block from 82230070h-822300B4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 822300B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822300B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822300B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822300B4);
		  /* 822300B4h */ case    0:  		/* li R4, 163 */
		/* 822300B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA3);
		/* 822300B4h case    0:*/		return 0x822300B8;
		  /* 822300B8h */ case    1:  		/* mr R3, R31 */
		/* 822300B8h case    1:*/		regs.R3 = regs.R31;
		/* 822300B8h case    1:*/		return 0x822300BC;
		  /* 822300BCh */ case    2:  		/* bl -863148 */
		/* 822300BCh case    2:*/		regs.LR = 0x822300C0; return 0x8215D510;
		/* 822300BCh case    2:*/		return 0x822300C0;
		  /* 822300C0h */ case    3:  		/* mr R27, R3 */
		/* 822300C0h case    3:*/		regs.R27 = regs.R3;
		/* 822300C0h case    3:*/		return 0x822300C4;
		  /* 822300C4h */ case    4:  		/* li R4, 165 */
		/* 822300C4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 822300C4h case    4:*/		return 0x822300C8;
		  /* 822300C8h */ case    5:  		/* mr R3, R31 */
		/* 822300C8h case    5:*/		regs.R3 = regs.R31;
		/* 822300C8h case    5:*/		return 0x822300CC;
		  /* 822300CCh */ case    6:  		/* bl -863164 */
		/* 822300CCh case    6:*/		regs.LR = 0x822300D0; return 0x8215D510;
		/* 822300CCh case    6:*/		return 0x822300D0;
		  /* 822300D0h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 822300D0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822300D0h case    7:*/		return 0x822300D4;
		  /* 822300D4h */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 822300D4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223013C;  }
		/* 822300D4h case    8:*/		return 0x822300D8;
		  /* 822300D8h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 822300D8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822300D8h case    9:*/		return 0x822300DC;
		  /* 822300DCh */ case   10:  		/* bc 4, CR6_EQ, 96 */
		/* 822300DCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x8223013C;  }
		/* 822300DCh case   10:*/		return 0x822300E0;
		  /* 822300E0h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 822300E0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822300E0h case   11:*/		return 0x822300E4;
		  /* 822300E4h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 822300E4h case   12:*/		if ( regs.CR[6].eq ) { return 0x822300FC;  }
		/* 822300E4h case   12:*/		return 0x822300E8;
		  /* 822300E8h */ case   13:  		/* li R6, 1 */
		/* 822300E8h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822300E8h case   13:*/		return 0x822300EC;
		  /* 822300ECh */ case   14:  		/* li R5, 0 */
		/* 822300ECh case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822300ECh case   14:*/		return 0x822300F0;
		  /* 822300F0h */ case   15:  		/* li R4, 5 */
		/* 822300F0h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 822300F0h case   15:*/		return 0x822300F4;
		  /* 822300F4h */ case   16:  		/* mr R3, R30 */
		/* 822300F4h case   16:*/		regs.R3 = regs.R30;
		/* 822300F4h case   16:*/		return 0x822300F8;
		  /* 822300F8h */ case   17:  		/* bl -861528 */
		/* 822300F8h case   17:*/		regs.LR = 0x822300FC; return 0x8215DBA0;
		/* 822300F8h case   17:*/		return 0x822300FC;
	}
	return 0x822300FC;
} // Block from 822300B4h-822300FCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822300FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822300FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822300FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822300FC);
		  /* 822300FCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822300FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822300FCh case    0:*/		return 0x82230100;
		  /* 82230100h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230100h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230134;  }
		/* 82230100h case    1:*/		return 0x82230104;
		  /* 82230104h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230104h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230104h case    2:*/		return 0x82230108;
		  /* 82230108h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230108h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230134;  }
		/* 82230108h case    3:*/		return 0x8223010C;
		  /* 8223010Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223010Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223010Ch case    4:*/		return 0x82230110;
		  /* 82230110h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230110h case    5:*/		regs.CTR = regs.R29;
		/* 82230110h case    5:*/		return 0x82230114;
		  /* 82230114h */ case    6:  		/* lis R10, -32252 */
		/* 82230114h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230114h case    6:*/		return 0x82230118;
		  /* 82230118h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230118h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230118h case    7:*/		return 0x8223011C;
		  /* 8223011Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 8223011Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 8223011Ch case    8:*/		return 0x82230120;
		  /* 82230120h */ case    9:  		/* li R7, 1 */
		/* 82230120h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230120h case    9:*/		return 0x82230124;
		  /* 82230124h */ case   10:  		/* li R6, 7 */
		/* 82230124h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x7);
		/* 82230124h case   10:*/		return 0x82230128;
		  /* 82230128h */ case   11:  		/* mr R3, R28 */
		/* 82230128h case   11:*/		regs.R3 = regs.R28;
		/* 82230128h case   11:*/		return 0x8223012C;
		  /* 8223012Ch */ case   12:  		/* lwz R5, <#[R11 + 28]> */
		/* 8223012Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223012Ch case   12:*/		return 0x82230130;
		  /* 82230130h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230130h case   13:*/		if ( 1 ) { regs.LR = 0x82230134; return (uint32)regs.CTR; }
		/* 82230130h case   13:*/		return 0x82230134;
	}
	return 0x82230134;
} // Block from 822300FCh-82230134h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230134);
		  /* 82230134h */ case    0:  		/* li R3, 1 */
		/* 82230134h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230134h case    0:*/		return 0x82230138;
		  /* 82230138h */ case    1:  		/* b 92 */
		/* 82230138h case    1:*/		return 0x82230194;
		/* 82230138h case    1:*/		return 0x8223013C;
	}
	return 0x8223013C;
} // Block from 82230134h-8223013Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223013Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223013C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223013C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223013C);
		  /* 8223013Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8223013Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223013Ch case    0:*/		return 0x82230140;
		  /* 82230140h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230140h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230158;  }
		/* 82230140h case    1:*/		return 0x82230144;
		  /* 82230144h */ case    2:  		/* li R6, 0 */
		/* 82230144h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230144h case    2:*/		return 0x82230148;
		  /* 82230148h */ case    3:  		/* li R5, 0 */
		/* 82230148h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230148h case    3:*/		return 0x8223014C;
		  /* 8223014Ch */ case    4:  		/* li R4, 5 */
		/* 8223014Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8223014Ch case    4:*/		return 0x82230150;
		  /* 82230150h */ case    5:  		/* mr R3, R30 */
		/* 82230150h case    5:*/		regs.R3 = regs.R30;
		/* 82230150h case    5:*/		return 0x82230154;
		  /* 82230154h */ case    6:  		/* bl -861620 */
		/* 82230154h case    6:*/		regs.LR = 0x82230158; return 0x8215DBA0;
		/* 82230154h case    6:*/		return 0x82230158;
	}
	return 0x82230158;
} // Block from 8223013Ch-82230158h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230158);
		  /* 82230158h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230158h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230158h case    0:*/		return 0x8223015C;
		  /* 8223015Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8223015Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82230190;  }
		/* 8223015Ch case    1:*/		return 0x82230160;
		  /* 82230160h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230160h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230160h case    2:*/		return 0x82230164;
		  /* 82230164h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230164h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230190;  }
		/* 82230164h case    3:*/		return 0x82230168;
		  /* 82230168h */ case    4:  		/* lis R11, -32216 */
		/* 82230168h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230168h case    4:*/		return 0x8223016C;
		  /* 8223016Ch */ case    5:  		/* mtspr CTR, R29 */
		/* 8223016Ch case    5:*/		regs.CTR = regs.R29;
		/* 8223016Ch case    5:*/		return 0x82230170;
		  /* 82230170h */ case    6:  		/* lis R10, -32252 */
		/* 82230170h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230170h case    6:*/		return 0x82230174;
		  /* 82230174h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230174h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230174h case    7:*/		return 0x82230178;
		  /* 82230178h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230178h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230178h case    8:*/		return 0x8223017C;
		  /* 8223017Ch */ case    9:  		/* li R7, 0 */
		/* 8223017Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8223017Ch case    9:*/		return 0x82230180;
		  /* 82230180h */ case   10:  		/* li R6, 7 */
		/* 82230180h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x7);
		/* 82230180h case   10:*/		return 0x82230184;
		  /* 82230184h */ case   11:  		/* mr R3, R28 */
		/* 82230184h case   11:*/		regs.R3 = regs.R28;
		/* 82230184h case   11:*/		return 0x82230188;
		  /* 82230188h */ case   12:  		/* lwz R5, <#[R11 + 28]> */
		/* 82230188h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000001C) );
		/* 82230188h case   12:*/		return 0x8223018C;
		  /* 8223018Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8223018Ch case   13:*/		if ( 1 ) { regs.LR = 0x82230190; return (uint32)regs.CTR; }
		/* 8223018Ch case   13:*/		return 0x82230190;
	}
	return 0x82230190;
} // Block from 82230158h-82230190h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230190);
		  /* 82230190h */ case    0:  		/* li R3, 0 */
		/* 82230190h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230190h case    0:*/		return 0x82230194;
	}
	return 0x82230194;
} // Block from 82230190h-82230194h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230194);
		  /* 82230194h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230194h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230194h case    0:*/		return 0x82230198;
		  /* 82230198h */ case    1:  		/* b -1699572 */
		/* 82230198h case    1:*/		return 0x820912A4;
		/* 82230198h case    1:*/		return 0x8223019C;
		  /* 8223019Ch */ case    2:  		/* nop */
		/* 8223019Ch case    2:*/		cpu::op::nop();
		/* 8223019Ch case    2:*/		return 0x822301A0;
	}
	return 0x822301A0;
} // Block from 82230194h-822301A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822301A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822301A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822301A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822301A0);
		  /* 822301A0h */ case    0:  		/* mfspr R12, LR */
		/* 822301A0h case    0:*/		regs.R12 = regs.LR;
		/* 822301A0h case    0:*/		return 0x822301A4;
		  /* 822301A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 822301A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822301A4h case    1:*/		return 0x822301A8;
		  /* 822301A8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 822301A8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822301A8h case    2:*/		return 0x822301AC;
		  /* 822301ACh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 822301ACh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822301ACh case    3:*/		return 0x822301B0;
		  /* 822301B0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 822301B0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822301B0h case    4:*/		return 0x822301B4;
		  /* 822301B4h */ case    5:  		/* mr R3, R5 */
		/* 822301B4h case    5:*/		regs.R3 = regs.R5;
		/* 822301B4h case    5:*/		return 0x822301B8;
		  /* 822301B8h */ case    6:  		/* mr R31, R6 */
		/* 822301B8h case    6:*/		regs.R31 = regs.R6;
		/* 822301B8h case    6:*/		return 0x822301BC;
		  /* 822301BCh */ case    7:  		/* mr R30, R7 */
		/* 822301BCh case    7:*/		regs.R30 = regs.R7;
		/* 822301BCh case    7:*/		return 0x822301C0;
		  /* 822301C0h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 822301C0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 822301C0h case    8:*/		return 0x822301C4;
		  /* 822301C4h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 822301C4h case    9:*/		if ( regs.CR[6].eq ) { return 0x822301D8;  }
		/* 822301C4h case    9:*/		return 0x822301C8;
		  /* 822301C8h */ case   10:  		/* li R6, 0 */
		/* 822301C8h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822301C8h case   10:*/		return 0x822301CC;
		  /* 822301CCh */ case   11:  		/* li R5, 0 */
		/* 822301CCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822301CCh case   11:*/		return 0x822301D0;
		  /* 822301D0h */ case   12:  		/* li R4, 6 */
		/* 822301D0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 822301D0h case   12:*/		return 0x822301D4;
		  /* 822301D4h */ case   13:  		/* bl -861748 */
		/* 822301D4h case   13:*/		regs.LR = 0x822301D8; return 0x8215DBA0;
		/* 822301D4h case   13:*/		return 0x822301D8;
	}
	return 0x822301D8;
} // Block from 822301A0h-822301D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822301D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822301D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822301D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822301D8);
		  /* 822301D8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 822301D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 822301D8h case    0:*/		return 0x822301DC;
		  /* 822301DCh */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822301DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82230210;  }
		/* 822301DCh case    1:*/		return 0x822301E0;
		  /* 822301E0h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 822301E0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822301E0h case    2:*/		return 0x822301E4;
		  /* 822301E4h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822301E4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230210;  }
		/* 822301E4h case    3:*/		return 0x822301E8;
		  /* 822301E8h */ case    4:  		/* lis R11, -32216 */
		/* 822301E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822301E8h case    4:*/		return 0x822301EC;
		  /* 822301ECh */ case    5:  		/* mtspr CTR, R31 */
		/* 822301ECh case    5:*/		regs.CTR = regs.R31;
		/* 822301ECh case    5:*/		return 0x822301F0;
		  /* 822301F0h */ case    6:  		/* lis R10, -32252 */
		/* 822301F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822301F0h case    6:*/		return 0x822301F4;
		  /* 822301F4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822301F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822301F4h case    7:*/		return 0x822301F8;
		  /* 822301F8h */ case    8:  		/* addi R4, R10, 4320 */
		/* 822301F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 822301F8h case    8:*/		return 0x822301FC;
		  /* 822301FCh */ case    9:  		/* li R7, 0 */
		/* 822301FCh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822301FCh case    9:*/		return 0x82230200;
		  /* 82230200h */ case   10:  		/* li R6, 8 */
		/* 82230200h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 82230200h case   10:*/		return 0x82230204;
		  /* 82230204h */ case   11:  		/* mr R3, R30 */
		/* 82230204h case   11:*/		regs.R3 = regs.R30;
		/* 82230204h case   11:*/		return 0x82230208;
		  /* 82230208h */ case   12:  		/* lwz R5, <#[R11 + 32]> */
		/* 82230208h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000020) );
		/* 82230208h case   12:*/		return 0x8223020C;
		  /* 8223020Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8223020Ch case   13:*/		if ( 1 ) { regs.LR = 0x82230210; return (uint32)regs.CTR; }
		/* 8223020Ch case   13:*/		return 0x82230210;
	}
	return 0x82230210;
} // Block from 822301D8h-82230210h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230210);
		  /* 82230210h */ case    0:  		/* li R3, 0 */
		/* 82230210h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230210h case    0:*/		return 0x82230214;
		  /* 82230214h */ case    1:  		/* addi R1, R1, 112 */
		/* 82230214h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82230214h case    1:*/		return 0x82230218;
		  /* 82230218h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82230218h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82230218h case    2:*/		return 0x8223021C;
		  /* 8223021Ch */ case    3:  		/* mtspr LR, R12 */
		/* 8223021Ch case    3:*/		regs.LR = regs.R12;
		/* 8223021Ch case    3:*/		return 0x82230220;
		  /* 82230220h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 82230220h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82230220h case    4:*/		return 0x82230224;
		  /* 82230224h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82230224h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82230224h case    5:*/		return 0x82230228;
		  /* 82230228h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82230228h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82230228h case    6:*/		return 0x8223022C;
	}
	return 0x8223022C;
} // Block from 82230210h-8223022Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223022Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223022C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223022C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223022C);
		  /* 8223022Ch */ case    0:  		/* nop */
		/* 8223022Ch case    0:*/		cpu::op::nop();
		/* 8223022Ch case    0:*/		return 0x82230230;
	}
	return 0x82230230;
} // Block from 8223022Ch-82230230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230230);
		  /* 82230230h */ case    0:  		/* mfspr R12, LR */
		/* 82230230h case    0:*/		regs.R12 = regs.LR;
		/* 82230230h case    0:*/		return 0x82230234;
		  /* 82230234h */ case    1:  		/* bl -1699800 */
		/* 82230234h case    1:*/		regs.LR = 0x82230238; return 0x8209125C;
		/* 82230234h case    1:*/		return 0x82230238;
		  /* 82230238h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82230238h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82230238h case    2:*/		return 0x8223023C;
		  /* 8223023Ch */ case    3:  		/* mr R31, R4 */
		/* 8223023Ch case    3:*/		regs.R31 = regs.R4;
		/* 8223023Ch case    3:*/		return 0x82230240;
		  /* 82230240h */ case    4:  		/* mr R3, R5 */
		/* 82230240h case    4:*/		regs.R3 = regs.R5;
		/* 82230240h case    4:*/		return 0x82230244;
		  /* 82230244h */ case    5:  		/* mr R30, R6 */
		/* 82230244h case    5:*/		regs.R30 = regs.R6;
		/* 82230244h case    5:*/		return 0x82230248;
		  /* 82230248h */ case    6:  		/* mr R29, R7 */
		/* 82230248h case    6:*/		regs.R29 = regs.R7;
		/* 82230248h case    6:*/		return 0x8223024C;
		  /* 8223024Ch */ case    7:  		/* cmplwi CR6, R5, 0 */
		/* 8223024Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8223024Ch case    7:*/		return 0x82230250;
		  /* 82230250h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 82230250h case    8:*/		if ( regs.CR[6].eq ) { return 0x82230264;  }
		/* 82230250h case    8:*/		return 0x82230254;
		  /* 82230254h */ case    9:  		/* mr R5, R4 */
		/* 82230254h case    9:*/		regs.R5 = regs.R4;
		/* 82230254h case    9:*/		return 0x82230258;
		  /* 82230258h */ case   10:  		/* li R6, 0 */
		/* 82230258h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230258h case   10:*/		return 0x8223025C;
		  /* 8223025Ch */ case   11:  		/* li R4, 7 */
		/* 8223025Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 8223025Ch case   11:*/		return 0x82230260;
		  /* 82230260h */ case   12:  		/* bl -861888 */
		/* 82230260h case   12:*/		regs.LR = 0x82230264; return 0x8215DBA0;
		/* 82230260h case   12:*/		return 0x82230264;
	}
	return 0x82230264;
} // Block from 82230230h-82230264h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82230264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230264);
		  /* 82230264h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230264h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230264h case    0:*/		return 0x82230268;
		  /* 82230268h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82230268h case    1:*/		if ( regs.CR[6].eq ) { return 0x822302A0;  }
		/* 82230268h case    1:*/		return 0x8223026C;
		  /* 8223026Ch */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8223026Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223026Ch case    2:*/		return 0x82230270;
		  /* 82230270h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82230270h case    3:*/		if ( regs.CR[6].eq ) { return 0x822302A0;  }
		/* 82230270h case    3:*/		return 0x82230274;
		  /* 82230274h */ case    4:  		/* lis R11, -32216 */
		/* 82230274h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230274h case    4:*/		return 0x82230278;
		  /* 82230278h */ case    5:  		/* mtspr CTR, R30 */
		/* 82230278h case    5:*/		regs.CTR = regs.R30;
		/* 82230278h case    5:*/		return 0x8223027C;
		  /* 8223027Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223027Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223027Ch case    6:*/		return 0x82230280;
		  /* 82230280h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230280h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230280h case    7:*/		return 0x82230284;
		  /* 82230284h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82230284h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82230284h case    8:*/		return 0x82230288;
		  /* 82230288h */ case    9:  		/* li R8, 0 */
		/* 82230288h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82230288h case    9:*/		return 0x8223028C;
		  /* 8223028Ch */ case   10:  		/* mr R7, R31 */
		/* 8223028Ch case   10:*/		regs.R7 = regs.R31;
		/* 8223028Ch case   10:*/		return 0x82230290;
		  /* 82230290h */ case   11:  		/* li R6, 10 */
		/* 82230290h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 82230290h case   11:*/		return 0x82230294;
		  /* 82230294h */ case   12:  		/* mr R3, R29 */
		/* 82230294h case   12:*/		regs.R3 = regs.R29;
		/* 82230294h case   12:*/		return 0x82230298;
		  /* 82230298h */ case   13:  		/* lwz R5, <#[R11 + 40]> */
		/* 82230298h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000028) );
		/* 82230298h case   13:*/		return 0x8223029C;
		  /* 8223029Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223029Ch case   14:*/		if ( 1 ) { regs.LR = 0x822302A0; return (uint32)regs.CTR; }
		/* 8223029Ch case   14:*/		return 0x822302A0;
	}
	return 0x822302A0;
} // Block from 82230264h-822302A0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822302A0h
// Function '?RevokeSideEffect@Instruction@D3DXShader@@QAAXW4SideEffect@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822302A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822302A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822302A0);
		  /* 822302A0h */ case    0:  		/* li R3, 0 */
		/* 822302A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822302A0h case    0:*/		return 0x822302A4;
		  /* 822302A4h */ case    1:  		/* addi R1, R1, 112 */
		/* 822302A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822302A4h case    1:*/		return 0x822302A8;
		  /* 822302A8h */ case    2:  		/* b -1699836 */
		/* 822302A8h case    2:*/		return 0x820912AC;
		/* 822302A8h case    2:*/		return 0x822302AC;
		  /* 822302ACh */ case    3:  		/* nop */
		/* 822302ACh case    3:*/		cpu::op::nop();
		/* 822302ACh case    3:*/		return 0x822302B0;
	}
	return 0x822302B0;
} // Block from 822302A0h-822302B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822302B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822302B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822302B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822302B0);
		  /* 822302B0h */ case    0:  		/* mfspr R12, LR */
		/* 822302B0h case    0:*/		regs.R12 = regs.LR;
		/* 822302B0h case    0:*/		return 0x822302B4;
		  /* 822302B4h */ case    1:  		/* bl -1699932 */
		/* 822302B4h case    1:*/		regs.LR = 0x822302B8; return 0x82091258;
		/* 822302B4h case    1:*/		return 0x822302B8;
		  /* 822302B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822302B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822302B8h case    2:*/		return 0x822302BC;
		  /* 822302BCh */ case    3:  		/* mr R28, R4 */
		/* 822302BCh case    3:*/		regs.R28 = regs.R4;
		/* 822302BCh case    3:*/		return 0x822302C0;
		  /* 822302C0h */ case    4:  		/* mr R31, R5 */
		/* 822302C0h case    4:*/		regs.R31 = regs.R5;
		/* 822302C0h case    4:*/		return 0x822302C4;
		  /* 822302C4h */ case    5:  		/* mr R30, R6 */
		/* 822302C4h case    5:*/		regs.R30 = regs.R6;
		/* 822302C4h case    5:*/		return 0x822302C8;
		  /* 822302C8h */ case    6:  		/* mr R29, R7 */
		/* 822302C8h case    6:*/		regs.R29 = regs.R7;
		/* 822302C8h case    6:*/		return 0x822302CC;
		  /* 822302CCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822302CCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822302CCh case    7:*/		return 0x822302D0;
		  /* 822302D0h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822302D0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822302F4;  }
		/* 822302D0h case    8:*/		return 0x822302D4;
		  /* 822302D4h */ case    9:  		/* lis R11, -32252 */
		/* 822302D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822302D4h case    9:*/		return 0x822302D8;
		  /* 822302D8h */ case   10:  		/* lis R10, -32253 */
		/* 822302D8h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822302D8h case   10:*/		return 0x822302DC;
		  /* 822302DCh */ case   11:  		/* lis R9, -32253 */
		/* 822302DCh case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822302DCh case   11:*/		return 0x822302E0;
		  /* 822302E0h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822302E0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822302E0h case   12:*/		return 0x822302E4;
		  /* 822302E4h */ case   13:  		/* addi R5, R10, 27792 */
		/* 822302E4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822302E4h case   13:*/		return 0x822302E8;
		  /* 822302E8h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822302E8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822302E8h case   14:*/		return 0x822302EC;
		  /* 822302ECh */ case   15:  		/* li R7, 988 */
		/* 822302ECh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x3DC);
		/* 822302ECh case   15:*/		return 0x822302F0;
		  /* 822302F0h */ case   16:  		/* bl -886504 */
		/* 822302F0h case   16:*/		regs.LR = 0x822302F4; return 0x82157C08;
		/* 822302F0h case   16:*/		return 0x822302F4;
	}
	return 0x822302F4;
} // Block from 822302B0h-822302F4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 822302F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822302F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822302F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822302F4);
		  /* 822302F4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 822302F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 822302F4h case    0:*/		return 0x822302F8;
		  /* 822302F8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822302F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230310;  }
		/* 822302F8h case    1:*/		return 0x822302FC;
		  /* 822302FCh */ case    2:  		/* li R6, 0 */
		/* 822302FCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822302FCh case    2:*/		return 0x82230300;
	}
	return 0x82230300;
} // Block from 822302F4h-82230300h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230300h
// Function '?ChangePredecessor@Block@D3DXShader@@QAAXPAUControlFlowEdge@2@PAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230300);
		  /* 82230300h */ case    0:  		/* li R5, 0 */
		/* 82230300h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230300h case    0:*/		return 0x82230304;
		  /* 82230304h */ case    1:  		/* li R4, 38 */
		/* 82230304h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x26);
		/* 82230304h case    1:*/		return 0x82230308;
		  /* 82230308h */ case    2:  		/* mr R3, R31 */
		/* 82230308h case    2:*/		regs.R3 = regs.R31;
		/* 82230308h case    2:*/		return 0x8223030C;
		  /* 8223030Ch */ case    3:  		/* bl -862060 */
		/* 8223030Ch case    3:*/		regs.LR = 0x82230310; return 0x8215DBA0;
		/* 8223030Ch case    3:*/		return 0x82230310;
	}
	return 0x82230310;
} // Block from 82230300h-82230310h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82230310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230310);
		  /* 82230310h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230310h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230310h case    0:*/		return 0x82230314;
		  /* 82230314h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82230314h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223034C;  }
		/* 82230314h case    1:*/		return 0x82230318;
		  /* 82230318h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82230318h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230318h case    2:*/		return 0x8223031C;
		  /* 8223031Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 8223031Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8223034C;  }
		/* 8223031Ch case    3:*/		return 0x82230320;
		  /* 82230320h */ case    4:  		/* lis R11, -32216 */
		/* 82230320h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230320h case    4:*/		return 0x82230324;
		  /* 82230324h */ case    5:  		/* mtspr CTR, R30 */
		/* 82230324h case    5:*/		regs.CTR = regs.R30;
		/* 82230324h case    5:*/		return 0x82230328;
		  /* 82230328h */ case    6:  		/* lis R10, -32252 */
		/* 82230328h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230328h case    6:*/		return 0x8223032C;
		  /* 8223032Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 8223032Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223032Ch case    7:*/		return 0x82230330;
		  /* 82230330h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82230330h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82230330h case    8:*/		return 0x82230334;
		  /* 82230334h */ case    9:  		/* li R8, 0 */
		/* 82230334h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82230334h case    9:*/		return 0x82230338;
		  /* 82230338h */ case   10:  		/* mr R7, R28 */
		/* 82230338h case   10:*/		regs.R7 = regs.R28;
		/* 82230338h case   10:*/		return 0x8223033C;
		  /* 8223033Ch */ case   11:  		/* li R6, 63 */
		/* 8223033Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3F);
		/* 8223033Ch case   11:*/		return 0x82230340;
	}
	return 0x82230340;
} // Block from 82230310h-82230340h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230340h
// Function '?ChangeSuccessor@Block@D3DXShader@@QAAXPAUControlFlowEdge@2@PAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230340);
		  /* 82230340h */ case    0:  		/* mr R3, R29 */
		/* 82230340h case    0:*/		regs.R3 = regs.R29;
		/* 82230340h case    0:*/		return 0x82230344;
		  /* 82230344h */ case    1:  		/* lwz R5, <#[R11 + 252]> */
		/* 82230344h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000FC) );
		/* 82230344h case    1:*/		return 0x82230348;
		  /* 82230348h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 82230348h case    2:*/		if ( 1 ) { regs.LR = 0x8223034C; return (uint32)regs.CTR; }
		/* 82230348h case    2:*/		return 0x8223034C;
	}
	return 0x8223034C;
} // Block from 82230340h-8223034Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223034Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223034C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223034C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223034C);
		  /* 8223034Ch */ case    0:  		/* li R3, 0 */
		/* 8223034Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223034Ch case    0:*/		return 0x82230350;
		  /* 82230350h */ case    1:  		/* addi R1, R1, 128 */
		/* 82230350h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230350h case    1:*/		return 0x82230354;
		  /* 82230354h */ case    2:  		/* b -1700012 */
		/* 82230354h case    2:*/		return 0x820912A8;
		/* 82230354h case    2:*/		return 0x82230358;
	}
	return 0x82230358;
} // Block from 8223034Ch-82230358h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230358);
		  /* 82230358h */ case    0:  		/* mfspr R12, LR */
		/* 82230358h case    0:*/		regs.R12 = regs.LR;
		/* 82230358h case    0:*/		return 0x8223035C;
		  /* 8223035Ch */ case    1:  		/* bl -1700100 */
		/* 8223035Ch case    1:*/		regs.LR = 0x82230360; return 0x82091258;
		/* 8223035Ch case    1:*/		return 0x82230360;
		  /* 82230360h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230360h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230360h case    2:*/		return 0x82230364;
		  /* 82230364h */ case    3:  		/* mr R30, R5 */
		/* 82230364h case    3:*/		regs.R30 = regs.R5;
		/* 82230364h case    3:*/		return 0x82230368;
		  /* 82230368h */ case    4:  		/* mr R31, R4 */
		/* 82230368h case    4:*/		regs.R31 = regs.R4;
		/* 82230368h case    4:*/		return 0x8223036C;
		  /* 8223036Ch */ case    5:  		/* mr R5, R4 */
		/* 8223036Ch case    5:*/		regs.R5 = regs.R4;
		/* 8223036Ch case    5:*/		return 0x82230370;
		  /* 82230370h */ case    6:  		/* li R4, 27 */
		/* 82230370h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82230370h case    6:*/		return 0x82230374;
		  /* 82230374h */ case    7:  		/* mr R29, R6 */
		/* 82230374h case    7:*/		regs.R29 = regs.R6;
		/* 82230374h case    7:*/		return 0x82230378;
		  /* 82230378h */ case    8:  		/* mr R28, R7 */
		/* 82230378h case    8:*/		regs.R28 = regs.R7;
		/* 82230378h case    8:*/		return 0x8223037C;
		  /* 8223037Ch */ case    9:  		/* bl -863036 */
		/* 8223037Ch case    9:*/		regs.LR = 0x82230380; return 0x8215D840;
		/* 8223037Ch case    9:*/		return 0x82230380;
	}
	return 0x82230380;
} // Block from 82230358h-82230380h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82230380h
// Function '?RemoveSuccessor@Block@D3DXShader@@QAAXPAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230380);
		  /* 82230380h */ case    0:  		/* cmplwi CR6, R3, 1 */
		/* 82230380h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82230380h case    0:*/		return 0x82230384;
		  /* 82230384h */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 82230384h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822303E8;  }
		/* 82230384h case    1:*/		return 0x82230388;
		  /* 82230388h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82230388h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230388h case    2:*/		return 0x8223038C;
		  /* 8223038Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8223038Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x822303A4;  }
		/* 8223038Ch case    3:*/		return 0x82230390;
		  /* 82230390h */ case    4:  		/* li R6, 1 */
		/* 82230390h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230390h case    4:*/		return 0x82230394;
		  /* 82230394h */ case    5:  		/* mr R5, R31 */
		/* 82230394h case    5:*/		regs.R5 = regs.R31;
		/* 82230394h case    5:*/		return 0x82230398;
		  /* 82230398h */ case    6:  		/* li R4, 8 */
		/* 82230398h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82230398h case    6:*/		return 0x8223039C;
		  /* 8223039Ch */ case    7:  		/* mr R3, R30 */
		/* 8223039Ch case    7:*/		regs.R3 = regs.R30;
		/* 8223039Ch case    7:*/		return 0x822303A0;
		  /* 822303A0h */ case    8:  		/* bl -862208 */
		/* 822303A0h case    8:*/		regs.LR = 0x822303A4; return 0x8215DBA0;
		/* 822303A0h case    8:*/		return 0x822303A4;
	}
	return 0x822303A4;
} // Block from 82230380h-822303A4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822303A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822303A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822303A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822303A4);
		  /* 822303A4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822303A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822303A4h case    0:*/		return 0x822303A8;
		  /* 822303A8h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822303A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x822303E0;  }
		/* 822303A8h case    1:*/		return 0x822303AC;
		  /* 822303ACh */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 822303ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822303ACh case    2:*/		return 0x822303B0;
		  /* 822303B0h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822303B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x822303E0;  }
		/* 822303B0h case    3:*/		return 0x822303B4;
		  /* 822303B4h */ case    4:  		/* lis R11, -32216 */
		/* 822303B4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822303B4h case    4:*/		return 0x822303B8;
		  /* 822303B8h */ case    5:  		/* mtspr CTR, R29 */
		/* 822303B8h case    5:*/		regs.CTR = regs.R29;
		/* 822303B8h case    5:*/		return 0x822303BC;
		  /* 822303BCh */ case    6:  		/* lis R10, -32252 */
		/* 822303BCh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822303BCh case    6:*/		return 0x822303C0;
		  /* 822303C0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822303C0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822303C0h case    7:*/		return 0x822303C4;
		  /* 822303C4h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822303C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822303C4h case    8:*/		return 0x822303C8;
		  /* 822303C8h */ case    9:  		/* li R8, 1 */
		/* 822303C8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822303C8h case    9:*/		return 0x822303CC;
		  /* 822303CCh */ case   10:  		/* mr R7, R31 */
		/* 822303CCh case   10:*/		regs.R7 = regs.R31;
		/* 822303CCh case   10:*/		return 0x822303D0;
		  /* 822303D0h */ case   11:  		/* li R6, 14 */
		/* 822303D0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 822303D0h case   11:*/		return 0x822303D4;
		  /* 822303D4h */ case   12:  		/* mr R3, R28 */
		/* 822303D4h case   12:*/		regs.R3 = regs.R28;
		/* 822303D4h case   12:*/		return 0x822303D8;
	}
	return 0x822303D8;
} // Block from 822303A4h-822303D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822303D8h
// Function '?SetNextEdge@DataFlowPredecessorEnumerator@D3DXShader@@AAAXPAUControlFlowEdge@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822303D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822303D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822303D8);
		  /* 822303D8h */ case    0:  		/* lwz R5, <#[R11 + 56]> */
		/* 822303D8h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000038) );
		/* 822303D8h case    0:*/		return 0x822303DC;
		  /* 822303DCh */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 822303DCh case    1:*/		if ( 1 ) { regs.LR = 0x822303E0; return (uint32)regs.CTR; }
		/* 822303DCh case    1:*/		return 0x822303E0;
	}
	return 0x822303E0;
} // Block from 822303D8h-822303E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822303E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822303E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822303E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822303E0);
		  /* 822303E0h */ case    0:  		/* li R3, 1 */
		/* 822303E0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822303E0h case    0:*/		return 0x822303E4;
		  /* 822303E4h */ case    1:  		/* b 96 */
		/* 822303E4h case    1:*/		return 0x82230444;
		/* 822303E4h case    1:*/		return 0x822303E8;
	}
	return 0x822303E8;
} // Block from 822303E0h-822303E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822303E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822303E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822303E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822303E8);
		  /* 822303E8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 822303E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822303E8h case    0:*/		return 0x822303EC;
		  /* 822303ECh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822303ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82230404;  }
		/* 822303ECh case    1:*/		return 0x822303F0;
		  /* 822303F0h */ case    2:  		/* li R6, 0 */
		/* 822303F0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822303F0h case    2:*/		return 0x822303F4;
		  /* 822303F4h */ case    3:  		/* mr R5, R31 */
		/* 822303F4h case    3:*/		regs.R5 = regs.R31;
		/* 822303F4h case    3:*/		return 0x822303F8;
		  /* 822303F8h */ case    4:  		/* li R4, 8 */
		/* 822303F8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 822303F8h case    4:*/		return 0x822303FC;
		  /* 822303FCh */ case    5:  		/* mr R3, R30 */
		/* 822303FCh case    5:*/		regs.R3 = regs.R30;
		/* 822303FCh case    5:*/		return 0x82230400;
		  /* 82230400h */ case    6:  		/* bl -862304 */
		/* 82230400h case    6:*/		regs.LR = 0x82230404; return 0x8215DBA0;
		/* 82230400h case    6:*/		return 0x82230404;
	}
	return 0x82230404;
} // Block from 822303E8h-82230404h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230404);
		  /* 82230404h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230404h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230404h case    0:*/		return 0x82230408;
		  /* 82230408h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82230408h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230440;  }
		/* 82230408h case    1:*/		return 0x8223040C;
		  /* 8223040Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8223040Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223040Ch case    2:*/		return 0x82230410;
		  /* 82230410h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82230410h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230440;  }
		/* 82230410h case    3:*/		return 0x82230414;
		  /* 82230414h */ case    4:  		/* lis R11, -32216 */
		/* 82230414h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230414h case    4:*/		return 0x82230418;
		  /* 82230418h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230418h case    5:*/		regs.CTR = regs.R29;
		/* 82230418h case    5:*/		return 0x8223041C;
		  /* 8223041Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223041Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223041Ch case    6:*/		return 0x82230420;
		  /* 82230420h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230420h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230420h case    7:*/		return 0x82230424;
		  /* 82230424h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82230424h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82230424h case    8:*/		return 0x82230428;
		  /* 82230428h */ case    9:  		/* li R8, 0 */
		/* 82230428h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82230428h case    9:*/		return 0x8223042C;
		  /* 8223042Ch */ case   10:  		/* mr R7, R31 */
		/* 8223042Ch case   10:*/		regs.R7 = regs.R31;
		/* 8223042Ch case   10:*/		return 0x82230430;
		  /* 82230430h */ case   11:  		/* li R6, 14 */
		/* 82230430h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 82230430h case   11:*/		return 0x82230434;
		  /* 82230434h */ case   12:  		/* mr R3, R28 */
		/* 82230434h case   12:*/		regs.R3 = regs.R28;
		/* 82230434h case   12:*/		return 0x82230438;
		  /* 82230438h */ case   13:  		/* lwz R5, <#[R11 + 56]> */
		/* 82230438h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000038) );
		/* 82230438h case   13:*/		return 0x8223043C;
		  /* 8223043Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223043Ch case   14:*/		if ( 1 ) { regs.LR = 0x82230440; return (uint32)regs.CTR; }
		/* 8223043Ch case   14:*/		return 0x82230440;
	}
	return 0x82230440;
} // Block from 82230404h-82230440h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82230440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230440);
		  /* 82230440h */ case    0:  		/* li R3, 0 */
		/* 82230440h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230440h case    0:*/		return 0x82230444;
	}
	return 0x82230444;
} // Block from 82230440h-82230444h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230444);
		  /* 82230444h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230444h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230444h case    0:*/		return 0x82230448;
		  /* 82230448h */ case    1:  		/* b -1700256 */
		/* 82230448h case    1:*/		return 0x820912A8;
		/* 82230448h case    1:*/		return 0x8223044C;
		  /* 8223044Ch */ case    2:  		/* nop */
		/* 8223044Ch case    2:*/		cpu::op::nop();
		/* 8223044Ch case    2:*/		return 0x82230450;
	}
	return 0x82230450;
} // Block from 82230444h-82230450h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230450);
		  /* 82230450h */ case    0:  		/* mfspr R12, LR */
		/* 82230450h case    0:*/		regs.R12 = regs.LR;
		/* 82230450h case    0:*/		return 0x82230454;
		  /* 82230454h */ case    1:  		/* bl -1700352 */
		/* 82230454h case    1:*/		regs.LR = 0x82230458; return 0x82091254;
		/* 82230454h case    1:*/		return 0x82230458;
		  /* 82230458h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230458h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230458h case    2:*/		return 0x8223045C;
		  /* 8223045Ch */ case    3:  		/* mr R31, R3 */
		/* 8223045Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223045Ch case    3:*/		return 0x82230460;
		  /* 82230460h */ case    4:  		/* mr R30, R5 */
		/* 82230460h case    4:*/		regs.R30 = regs.R5;
		/* 82230460h case    4:*/		return 0x82230464;
		  /* 82230464h */ case    5:  		/* mr R29, R6 */
		/* 82230464h case    5:*/		regs.R29 = regs.R6;
		/* 82230464h case    5:*/		return 0x82230468;
		  /* 82230468h */ case    6:  		/* mr R28, R7 */
		/* 82230468h case    6:*/		regs.R28 = regs.R7;
		/* 82230468h case    6:*/		return 0x8223046C;
		  /* 8223046Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8223046Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223046Ch case    7:*/		return 0x82230470;
		  /* 82230470h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230470h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230494;  }
		/* 82230470h case    8:*/		return 0x82230474;
		  /* 82230474h */ case    9:  		/* lis R11, -32252 */
		/* 82230474h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230474h case    9:*/		return 0x82230478;
		  /* 82230478h */ case   10:  		/* lis R10, -32253 */
		/* 82230478h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230478h case   10:*/		return 0x8223047C;
		  /* 8223047Ch */ case   11:  		/* lis R9, -32253 */
		/* 8223047Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223047Ch case   11:*/		return 0x82230480;
		  /* 82230480h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82230480h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82230480h case   12:*/		return 0x82230484;
		  /* 82230484h */ case   13:  		/* addi R5, R10, 27792 */
		/* 82230484h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82230484h case   13:*/		return 0x82230488;
	}
	return 0x82230488;
} // Block from 82230450h-82230488h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230488h
// Function '?AddPredecessor@Block@D3DXShader@@QAAPAUControlFlowEdge@2@PAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230488);
		  /* 82230488h */ case    0:  		/* addi R4, R9, 27460 */
		/* 82230488h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230488h case    0:*/		return 0x8223048C;
		  /* 8223048Ch */ case    1:  		/* li R7, 1097 */
		/* 8223048Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x449);
		/* 8223048Ch case    1:*/		return 0x82230490;
		  /* 82230490h */ case    2:  		/* bl -886920 */
		/* 82230490h case    2:*/		regs.LR = 0x82230494; return 0x82157C08;
		/* 82230490h case    2:*/		return 0x82230494;
	}
	return 0x82230494;
} // Block from 82230488h-82230494h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230494);
		  /* 82230494h */ case    0:  		/* li R4, 163 */
		/* 82230494h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA3);
		/* 82230494h case    0:*/		return 0x82230498;
		  /* 82230498h */ case    1:  		/* mr R3, R31 */
		/* 82230498h case    1:*/		regs.R3 = regs.R31;
		/* 82230498h case    1:*/		return 0x8223049C;
		  /* 8223049Ch */ case    2:  		/* bl -864140 */
		/* 8223049Ch case    2:*/		regs.LR = 0x822304A0; return 0x8215D510;
		/* 8223049Ch case    2:*/		return 0x822304A0;
		  /* 822304A0h */ case    3:  		/* mr R27, R3 */
		/* 822304A0h case    3:*/		regs.R27 = regs.R3;
		/* 822304A0h case    3:*/		return 0x822304A4;
		  /* 822304A4h */ case    4:  		/* li R4, 165 */
		/* 822304A4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 822304A4h case    4:*/		return 0x822304A8;
		  /* 822304A8h */ case    5:  		/* mr R3, R31 */
		/* 822304A8h case    5:*/		regs.R3 = regs.R31;
		/* 822304A8h case    5:*/		return 0x822304AC;
		  /* 822304ACh */ case    6:  		/* bl -864156 */
		/* 822304ACh case    6:*/		regs.LR = 0x822304B0; return 0x8215D510;
		/* 822304ACh case    6:*/		return 0x822304B0;
		  /* 822304B0h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 822304B0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822304B0h case    7:*/		return 0x822304B4;
		  /* 822304B4h */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 822304B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223051C;  }
		/* 822304B4h case    8:*/		return 0x822304B8;
		  /* 822304B8h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 822304B8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822304B8h case    9:*/		return 0x822304BC;
		  /* 822304BCh */ case   10:  		/* bc 12, CR6_EQ, 96 */
		/* 822304BCh case   10:*/		if ( regs.CR[6].eq ) { return 0x8223051C;  }
		/* 822304BCh case   10:*/		return 0x822304C0;
		  /* 822304C0h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 822304C0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822304C0h case   11:*/		return 0x822304C4;
		  /* 822304C4h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 822304C4h case   12:*/		if ( regs.CR[6].eq ) { return 0x822304DC;  }
		/* 822304C4h case   12:*/		return 0x822304C8;
		  /* 822304C8h */ case   13:  		/* li R6, 1 */
		/* 822304C8h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822304C8h case   13:*/		return 0x822304CC;
		  /* 822304CCh */ case   14:  		/* li R5, 0 */
		/* 822304CCh case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822304CCh case   14:*/		return 0x822304D0;
		  /* 822304D0h */ case   15:  		/* li R4, 9 */
		/* 822304D0h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 822304D0h case   15:*/		return 0x822304D4;
		  /* 822304D4h */ case   16:  		/* mr R3, R30 */
		/* 822304D4h case   16:*/		regs.R3 = regs.R30;
		/* 822304D4h case   16:*/		return 0x822304D8;
		  /* 822304D8h */ case   17:  		/* bl -862520 */
		/* 822304D8h case   17:*/		regs.LR = 0x822304DC; return 0x8215DBA0;
		/* 822304D8h case   17:*/		return 0x822304DC;
	}
	return 0x822304DC;
} // Block from 82230494h-822304DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822304DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822304DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822304DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822304DC);
		  /* 822304DCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822304DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822304DCh case    0:*/		return 0x822304E0;
		  /* 822304E0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822304E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230514;  }
		/* 822304E0h case    1:*/		return 0x822304E4;
		  /* 822304E4h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 822304E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822304E4h case    2:*/		return 0x822304E8;
		  /* 822304E8h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822304E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230514;  }
		/* 822304E8h case    3:*/		return 0x822304EC;
		  /* 822304ECh */ case    4:  		/* lis R11, -32216 */
		/* 822304ECh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822304ECh case    4:*/		return 0x822304F0;
		  /* 822304F0h */ case    5:  		/* mtspr CTR, R29 */
		/* 822304F0h case    5:*/		regs.CTR = regs.R29;
		/* 822304F0h case    5:*/		return 0x822304F4;
		  /* 822304F4h */ case    6:  		/* lis R10, -32252 */
		/* 822304F4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822304F4h case    6:*/		return 0x822304F8;
	}
	return 0x822304F8;
} // Block from 822304DCh-822304F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822304F8h
// Function '?AddSuccessor@Block@D3DXShader@@QAAPAUControlFlowEdge@2@PAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822304F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822304F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822304F8);
		  /* 822304F8h */ case    0:  		/* addi R11, R11, 11160 */
		/* 822304F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822304F8h case    0:*/		return 0x822304FC;
		  /* 822304FCh */ case    1:  		/* addi R4, R10, 4320 */
		/* 822304FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 822304FCh case    1:*/		return 0x82230500;
		  /* 82230500h */ case    2:  		/* li R7, 1 */
		/* 82230500h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230500h case    2:*/		return 0x82230504;
		  /* 82230504h */ case    3:  		/* li R6, 15 */
		/* 82230504h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 82230504h case    3:*/		return 0x82230508;
		  /* 82230508h */ case    4:  		/* mr R3, R28 */
		/* 82230508h case    4:*/		regs.R3 = regs.R28;
		/* 82230508h case    4:*/		return 0x8223050C;
		  /* 8223050Ch */ case    5:  		/* lwz R5, <#[R11 + 60]> */
		/* 8223050Ch case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000003C) );
		/* 8223050Ch case    5:*/		return 0x82230510;
		  /* 82230510h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82230510h case    6:*/		if ( 1 ) { regs.LR = 0x82230514; return (uint32)regs.CTR; }
		/* 82230510h case    6:*/		return 0x82230514;
	}
	return 0x82230514;
} // Block from 822304F8h-82230514h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230514);
		  /* 82230514h */ case    0:  		/* li R3, 1 */
		/* 82230514h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230514h case    0:*/		return 0x82230518;
		  /* 82230518h */ case    1:  		/* b 92 */
		/* 82230518h case    1:*/		return 0x82230574;
		/* 82230518h case    1:*/		return 0x8223051C;
	}
	return 0x8223051C;
} // Block from 82230514h-8223051Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223051Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223051C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223051C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223051C);
		  /* 8223051Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8223051Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223051Ch case    0:*/		return 0x82230520;
		  /* 82230520h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230520h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230538;  }
		/* 82230520h case    1:*/		return 0x82230524;
		  /* 82230524h */ case    2:  		/* li R6, 0 */
		/* 82230524h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230524h case    2:*/		return 0x82230528;
		  /* 82230528h */ case    3:  		/* li R5, 0 */
		/* 82230528h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230528h case    3:*/		return 0x8223052C;
		  /* 8223052Ch */ case    4:  		/* li R4, 9 */
		/* 8223052Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 8223052Ch case    4:*/		return 0x82230530;
		  /* 82230530h */ case    5:  		/* mr R3, R30 */
		/* 82230530h case    5:*/		regs.R3 = regs.R30;
		/* 82230530h case    5:*/		return 0x82230534;
		  /* 82230534h */ case    6:  		/* bl -862612 */
		/* 82230534h case    6:*/		regs.LR = 0x82230538; return 0x8215DBA0;
		/* 82230534h case    6:*/		return 0x82230538;
	}
	return 0x82230538;
} // Block from 8223051Ch-82230538h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230538);
		  /* 82230538h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230538h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230538h case    0:*/		return 0x8223053C;
		  /* 8223053Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8223053Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82230570;  }
		/* 8223053Ch case    1:*/		return 0x82230540;
		  /* 82230540h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230540h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230540h case    2:*/		return 0x82230544;
		  /* 82230544h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230544h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230570;  }
		/* 82230544h case    3:*/		return 0x82230548;
		  /* 82230548h */ case    4:  		/* lis R11, -32216 */
		/* 82230548h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230548h case    4:*/		return 0x8223054C;
		  /* 8223054Ch */ case    5:  		/* mtspr CTR, R29 */
		/* 8223054Ch case    5:*/		regs.CTR = regs.R29;
		/* 8223054Ch case    5:*/		return 0x82230550;
		  /* 82230550h */ case    6:  		/* lis R10, -32252 */
		/* 82230550h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230550h case    6:*/		return 0x82230554;
		  /* 82230554h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230554h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230554h case    7:*/		return 0x82230558;
		  /* 82230558h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230558h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230558h case    8:*/		return 0x8223055C;
		  /* 8223055Ch */ case    9:  		/* li R7, 0 */
		/* 8223055Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8223055Ch case    9:*/		return 0x82230560;
		  /* 82230560h */ case   10:  		/* li R6, 15 */
		/* 82230560h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 82230560h case   10:*/		return 0x82230564;
		  /* 82230564h */ case   11:  		/* mr R3, R28 */
		/* 82230564h case   11:*/		regs.R3 = regs.R28;
		/* 82230564h case   11:*/		return 0x82230568;
	}
	return 0x82230568;
} // Block from 82230538h-82230568h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230568h
// Function '?FindCommonDominator@Block@D3DXShader@@QAAPAV12@PAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230568);
		  /* 82230568h */ case    0:  		/* lwz R5, <#[R11 + 60]> */
		/* 82230568h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000003C) );
		/* 82230568h case    0:*/		return 0x8223056C;
		  /* 8223056Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8223056Ch case    1:*/		if ( 1 ) { regs.LR = 0x82230570; return (uint32)regs.CTR; }
		/* 8223056Ch case    1:*/		return 0x82230570;
	}
	return 0x82230570;
} // Block from 82230568h-82230570h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230570);
		  /* 82230570h */ case    0:  		/* li R3, 0 */
		/* 82230570h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230570h case    0:*/		return 0x82230574;
	}
	return 0x82230574;
} // Block from 82230570h-82230574h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230574);
		  /* 82230574h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230574h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230574h case    0:*/		return 0x82230578;
		  /* 82230578h */ case    1:  		/* b -1700564 */
		/* 82230578h case    1:*/		return 0x820912A4;
		/* 82230578h case    1:*/		return 0x8223057C;
		  /* 8223057Ch */ case    2:  		/* nop */
		/* 8223057Ch case    2:*/		cpu::op::nop();
		/* 8223057Ch case    2:*/		return 0x82230580;
	}
	return 0x82230580;
} // Block from 82230574h-82230580h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230580);
		  /* 82230580h */ case    0:  		/* mfspr R12, LR */
		/* 82230580h case    0:*/		regs.R12 = regs.LR;
		/* 82230580h case    0:*/		return 0x82230584;
		  /* 82230584h */ case    1:  		/* bl -1700652 */
		/* 82230584h case    1:*/		regs.LR = 0x82230588; return 0x82091258;
		/* 82230584h case    1:*/		return 0x82230588;
		  /* 82230588h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230588h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230588h case    2:*/		return 0x8223058C;
		  /* 8223058Ch */ case    3:  		/* mr R31, R3 */
		/* 8223058Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223058Ch case    3:*/		return 0x82230590;
		  /* 82230590h */ case    4:  		/* mr R30, R5 */
		/* 82230590h case    4:*/		regs.R30 = regs.R5;
		/* 82230590h case    4:*/		return 0x82230594;
		  /* 82230594h */ case    5:  		/* mr R29, R6 */
		/* 82230594h case    5:*/		regs.R29 = regs.R6;
		/* 82230594h case    5:*/		return 0x82230598;
		  /* 82230598h */ case    6:  		/* mr R28, R7 */
		/* 82230598h case    6:*/		regs.R28 = regs.R7;
		/* 82230598h case    6:*/		return 0x8223059C;
		  /* 8223059Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8223059Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223059Ch case    7:*/		return 0x822305A0;
		  /* 822305A0h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822305A0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822305C4;  }
		/* 822305A0h case    8:*/		return 0x822305A4;
		  /* 822305A4h */ case    9:  		/* lis R11, -32252 */
		/* 822305A4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822305A4h case    9:*/		return 0x822305A8;
	}
	return 0x822305A8;
} // Block from 82230580h-822305A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822305A8h
// Function '?RemoveSideEffect@Block@D3DXShader@@QAAXW4SideEffect@2@PAVInstruction@2@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822305A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822305A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822305A8);
		  /* 822305A8h */ case    0:  		/* lis R10, -32253 */
		/* 822305A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822305A8h case    0:*/		return 0x822305AC;
		  /* 822305ACh */ case    1:  		/* lis R9, -32253 */
		/* 822305ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822305ACh case    1:*/		return 0x822305B0;
		  /* 822305B0h */ case    2:  		/* addi R6, R11, 4336 */
		/* 822305B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822305B0h case    2:*/		return 0x822305B4;
		  /* 822305B4h */ case    3:  		/* addi R5, R10, 27792 */
		/* 822305B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822305B4h case    3:*/		return 0x822305B8;
		  /* 822305B8h */ case    4:  		/* addi R4, R9, 27460 */
		/* 822305B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822305B8h case    4:*/		return 0x822305BC;
		  /* 822305BCh */ case    5:  		/* li R7, 1154 */
		/* 822305BCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x482);
		/* 822305BCh case    5:*/		return 0x822305C0;
		  /* 822305C0h */ case    6:  		/* bl -887224 */
		/* 822305C0h case    6:*/		regs.LR = 0x822305C4; return 0x82157C08;
		/* 822305C0h case    6:*/		return 0x822305C4;
	}
	return 0x822305C4;
} // Block from 822305A8h-822305C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822305C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822305C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822305C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822305C4);
		  /* 822305C4h */ case    0:  		/* li R4, 934 */
		/* 822305C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3A6);
		/* 822305C4h case    0:*/		return 0x822305C8;
		  /* 822305C8h */ case    1:  		/* mr R3, R31 */
		/* 822305C8h case    1:*/		regs.R3 = regs.R31;
		/* 822305C8h case    1:*/		return 0x822305CC;
		  /* 822305CCh */ case    2:  		/* bl -864444 */
		/* 822305CCh case    2:*/		regs.LR = 0x822305D0; return 0x8215D510;
		/* 822305CCh case    2:*/		return 0x822305D0;
		  /* 822305D0h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 822305D0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822305D0h case    3:*/		return 0x822305D4;
		  /* 822305D4h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 822305D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822305D4h case    4:*/		return 0x822305D8;
		  /* 822305D8h */ case    5:  		/* bc 12, CR0_EQ, 92 */
		/* 822305D8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82230634;  }
		/* 822305D8h case    5:*/		return 0x822305DC;
		  /* 822305DCh */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 822305DCh case    6:*/		if ( regs.CR[6].eq ) { return 0x822305F4;  }
		/* 822305DCh case    6:*/		return 0x822305E0;
		  /* 822305E0h */ case    7:  		/* li R6, 1 */
		/* 822305E0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822305E0h case    7:*/		return 0x822305E4;
		  /* 822305E4h */ case    8:  		/* li R5, 0 */
		/* 822305E4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822305E4h case    8:*/		return 0x822305E8;
		  /* 822305E8h */ case    9:  		/* li R4, 10 */
		/* 822305E8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 822305E8h case    9:*/		return 0x822305EC;
		  /* 822305ECh */ case   10:  		/* mr R3, R30 */
		/* 822305ECh case   10:*/		regs.R3 = regs.R30;
		/* 822305ECh case   10:*/		return 0x822305F0;
		  /* 822305F0h */ case   11:  		/* bl -862800 */
		/* 822305F0h case   11:*/		regs.LR = 0x822305F4; return 0x8215DBA0;
		/* 822305F0h case   11:*/		return 0x822305F4;
	}
	return 0x822305F4;
} // Block from 822305C4h-822305F4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822305F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822305F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822305F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822305F4);
		  /* 822305F4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822305F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822305F4h case    0:*/		return 0x822305F8;
		  /* 822305F8h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822305F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223062C;  }
		/* 822305F8h case    1:*/		return 0x822305FC;
		  /* 822305FCh */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 822305FCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822305FCh case    2:*/		return 0x82230600;
		  /* 82230600h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230600h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223062C;  }
		/* 82230600h case    3:*/		return 0x82230604;
		  /* 82230604h */ case    4:  		/* lis R11, -32216 */
		/* 82230604h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230604h case    4:*/		return 0x82230608;
		  /* 82230608h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230608h case    5:*/		regs.CTR = regs.R29;
		/* 82230608h case    5:*/		return 0x8223060C;
		  /* 8223060Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223060Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223060Ch case    6:*/		return 0x82230610;
		  /* 82230610h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230610h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230610h case    7:*/		return 0x82230614;
		  /* 82230614h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230614h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230614h case    8:*/		return 0x82230618;
		  /* 82230618h */ case    9:  		/* li R7, 1 */
		/* 82230618h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230618h case    9:*/		return 0x8223061C;
		  /* 8223061Ch */ case   10:  		/* li R6, 16 */
		/* 8223061Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 8223061Ch case   10:*/		return 0x82230620;
		  /* 82230620h */ case   11:  		/* mr R3, R28 */
		/* 82230620h case   11:*/		regs.R3 = regs.R28;
		/* 82230620h case   11:*/		return 0x82230624;
		  /* 82230624h */ case   12:  		/* lwz R5, <#[R11 + 64]> */
		/* 82230624h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000040) );
		/* 82230624h case   12:*/		return 0x82230628;
		  /* 82230628h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230628h case   13:*/		if ( 1 ) { regs.LR = 0x8223062C; return (uint32)regs.CTR; }
		/* 82230628h case   13:*/		return 0x8223062C;
	}
	return 0x8223062C;
} // Block from 822305F4h-8223062Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223062Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223062C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223062C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223062C);
		  /* 8223062Ch */ case    0:  		/* li R3, 1 */
		/* 8223062Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223062Ch case    0:*/		return 0x82230630;
		  /* 82230630h */ case    1:  		/* b 88 */
		/* 82230630h case    1:*/		return 0x82230688;
		/* 82230630h case    1:*/		return 0x82230634;
	}
	return 0x82230634;
} // Block from 8223062Ch-82230634h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230634);
		  /* 82230634h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 82230634h case    0:*/		if ( regs.CR[6].eq ) { return 0x8223064C;  }
		/* 82230634h case    0:*/		return 0x82230638;
		  /* 82230638h */ case    1:  		/* li R6, 0 */
		/* 82230638h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230638h case    1:*/		return 0x8223063C;
		  /* 8223063Ch */ case    2:  		/* li R5, 0 */
		/* 8223063Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223063Ch case    2:*/		return 0x82230640;
		  /* 82230640h */ case    3:  		/* li R4, 10 */
		/* 82230640h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 82230640h case    3:*/		return 0x82230644;
		  /* 82230644h */ case    4:  		/* mr R3, R30 */
		/* 82230644h case    4:*/		regs.R3 = regs.R30;
		/* 82230644h case    4:*/		return 0x82230648;
		  /* 82230648h */ case    5:  		/* bl -862888 */
		/* 82230648h case    5:*/		regs.LR = 0x8223064C; return 0x8215DBA0;
		/* 82230648h case    5:*/		return 0x8223064C;
	}
	return 0x8223064C;
} // Block from 82230634h-8223064Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223064Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223064C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223064C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223064C);
		  /* 8223064Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223064Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223064Ch case    0:*/		return 0x82230650;
		  /* 82230650h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230650h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230684;  }
		/* 82230650h case    1:*/		return 0x82230654;
		  /* 82230654h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230654h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230654h case    2:*/		return 0x82230658;
		  /* 82230658h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230658h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230684;  }
		/* 82230658h case    3:*/		return 0x8223065C;
		  /* 8223065Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223065Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223065Ch case    4:*/		return 0x82230660;
		  /* 82230660h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230660h case    5:*/		regs.CTR = regs.R29;
		/* 82230660h case    5:*/		return 0x82230664;
		  /* 82230664h */ case    6:  		/* lis R10, -32252 */
		/* 82230664h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230664h case    6:*/		return 0x82230668;
		  /* 82230668h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230668h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230668h case    7:*/		return 0x8223066C;
		  /* 8223066Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 8223066Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 8223066Ch case    8:*/		return 0x82230670;
		  /* 82230670h */ case    9:  		/* li R7, 0 */
		/* 82230670h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230670h case    9:*/		return 0x82230674;
		  /* 82230674h */ case   10:  		/* li R6, 16 */
		/* 82230674h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82230674h case   10:*/		return 0x82230678;
		  /* 82230678h */ case   11:  		/* mr R3, R28 */
		/* 82230678h case   11:*/		regs.R3 = regs.R28;
		/* 82230678h case   11:*/		return 0x8223067C;
		  /* 8223067Ch */ case   12:  		/* lwz R5, <#[R11 + 64]> */
		/* 8223067Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000040) );
		/* 8223067Ch case   12:*/		return 0x82230680;
		  /* 82230680h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230680h case   13:*/		if ( 1 ) { regs.LR = 0x82230684; return (uint32)regs.CTR; }
		/* 82230680h case   13:*/		return 0x82230684;
	}
	return 0x82230684;
} // Block from 8223064Ch-82230684h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230684);
		  /* 82230684h */ case    0:  		/* li R3, 0 */
		/* 82230684h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230684h case    0:*/		return 0x82230688;
	}
	return 0x82230688;
} // Block from 82230684h-82230688h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230688);
		  /* 82230688h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230688h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230688h case    0:*/		return 0x8223068C;
		  /* 8223068Ch */ case    1:  		/* b -1700836 */
		/* 8223068Ch case    1:*/		return 0x820912A8;
		/* 8223068Ch case    1:*/		return 0x82230690;
	}
	return 0x82230690;
} // Block from 82230688h-82230690h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230690);
		  /* 82230690h */ case    0:  		/* mfspr R12, LR */
		/* 82230690h case    0:*/		regs.R12 = regs.LR;
		/* 82230690h case    0:*/		return 0x82230694;
		  /* 82230694h */ case    1:  		/* bl -1700924 */
		/* 82230694h case    1:*/		regs.LR = 0x82230698; return 0x82091258;
		/* 82230694h case    1:*/		return 0x82230698;
		  /* 82230698h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230698h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230698h case    2:*/		return 0x8223069C;
		  /* 8223069Ch */ case    3:  		/* mr R31, R3 */
		/* 8223069Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223069Ch case    3:*/		return 0x822306A0;
		  /* 822306A0h */ case    4:  		/* mr R30, R5 */
		/* 822306A0h case    4:*/		regs.R30 = regs.R5;
		/* 822306A0h case    4:*/		return 0x822306A4;
		  /* 822306A4h */ case    5:  		/* mr R29, R6 */
		/* 822306A4h case    5:*/		regs.R29 = regs.R6;
		/* 822306A4h case    5:*/		return 0x822306A8;
		  /* 822306A8h */ case    6:  		/* mr R28, R7 */
		/* 822306A8h case    6:*/		regs.R28 = regs.R7;
		/* 822306A8h case    6:*/		return 0x822306AC;
		  /* 822306ACh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822306ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822306ACh case    7:*/		return 0x822306B0;
		  /* 822306B0h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822306B0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822306D4;  }
		/* 822306B0h case    8:*/		return 0x822306B4;
		  /* 822306B4h */ case    9:  		/* lis R11, -32252 */
		/* 822306B4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822306B4h case    9:*/		return 0x822306B8;
		  /* 822306B8h */ case   10:  		/* lis R10, -32253 */
		/* 822306B8h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822306B8h case   10:*/		return 0x822306BC;
		  /* 822306BCh */ case   11:  		/* lis R9, -32253 */
		/* 822306BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822306BCh case   11:*/		return 0x822306C0;
		  /* 822306C0h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822306C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822306C0h case   12:*/		return 0x822306C4;
		  /* 822306C4h */ case   13:  		/* addi R5, R10, 27792 */
		/* 822306C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822306C4h case   13:*/		return 0x822306C8;
		  /* 822306C8h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822306C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822306C8h case   14:*/		return 0x822306CC;
		  /* 822306CCh */ case   15:  		/* li R7, 1208 */
		/* 822306CCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x4B8);
		/* 822306CCh case   15:*/		return 0x822306D0;
		  /* 822306D0h */ case   16:  		/* bl -887496 */
		/* 822306D0h case   16:*/		regs.LR = 0x822306D4; return 0x82157C08;
		/* 822306D0h case   16:*/		return 0x822306D4;
	}
	return 0x822306D4;
} // Block from 82230690h-822306D4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 822306D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822306D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822306D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822306D4);
		  /* 822306D4h */ case    0:  		/* li R4, 935 */
		/* 822306D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3A7);
		/* 822306D4h case    0:*/		return 0x822306D8;
		  /* 822306D8h */ case    1:  		/* mr R3, R31 */
		/* 822306D8h case    1:*/		regs.R3 = regs.R31;
		/* 822306D8h case    1:*/		return 0x822306DC;
		  /* 822306DCh */ case    2:  		/* bl -864716 */
		/* 822306DCh case    2:*/		regs.LR = 0x822306E0; return 0x8215D510;
		/* 822306DCh case    2:*/		return 0x822306E0;
		  /* 822306E0h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 822306E0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822306E0h case    3:*/		return 0x822306E4;
		  /* 822306E4h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 822306E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822306E4h case    4:*/		return 0x822306E8;
		  /* 822306E8h */ case    5:  		/* bc 12, CR0_EQ, 92 */
		/* 822306E8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82230744;  }
		/* 822306E8h case    5:*/		return 0x822306EC;
		  /* 822306ECh */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 822306ECh case    6:*/		if ( regs.CR[6].eq ) { return 0x82230704;  }
		/* 822306ECh case    6:*/		return 0x822306F0;
		  /* 822306F0h */ case    7:  		/* li R6, 1 */
		/* 822306F0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822306F0h case    7:*/		return 0x822306F4;
		  /* 822306F4h */ case    8:  		/* li R5, 0 */
		/* 822306F4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822306F4h case    8:*/		return 0x822306F8;
		  /* 822306F8h */ case    9:  		/* li R4, 11 */
		/* 822306F8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 822306F8h case    9:*/		return 0x822306FC;
		  /* 822306FCh */ case   10:  		/* mr R3, R30 */
		/* 822306FCh case   10:*/		regs.R3 = regs.R30;
		/* 822306FCh case   10:*/		return 0x82230700;
		  /* 82230700h */ case   11:  		/* bl -863072 */
		/* 82230700h case   11:*/		regs.LR = 0x82230704; return 0x8215DBA0;
		/* 82230700h case   11:*/		return 0x82230704;
	}
	return 0x82230704;
} // Block from 822306D4h-82230704h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230704);
		  /* 82230704h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230704h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230704h case    0:*/		return 0x82230708;
		  /* 82230708h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230708h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223073C;  }
		/* 82230708h case    1:*/		return 0x8223070C;
		  /* 8223070Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8223070Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223070Ch case    2:*/		return 0x82230710;
		  /* 82230710h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230710h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223073C;  }
		/* 82230710h case    3:*/		return 0x82230714;
		  /* 82230714h */ case    4:  		/* lis R11, -32216 */
		/* 82230714h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230714h case    4:*/		return 0x82230718;
		  /* 82230718h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230718h case    5:*/		regs.CTR = regs.R29;
		/* 82230718h case    5:*/		return 0x8223071C;
		  /* 8223071Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223071Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223071Ch case    6:*/		return 0x82230720;
		  /* 82230720h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230720h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230720h case    7:*/		return 0x82230724;
		  /* 82230724h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230724h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230724h case    8:*/		return 0x82230728;
		  /* 82230728h */ case    9:  		/* li R7, 1 */
		/* 82230728h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230728h case    9:*/		return 0x8223072C;
		  /* 8223072Ch */ case   10:  		/* li R6, 17 */
		/* 8223072Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x11);
		/* 8223072Ch case   10:*/		return 0x82230730;
		  /* 82230730h */ case   11:  		/* mr R3, R28 */
		/* 82230730h case   11:*/		regs.R3 = regs.R28;
		/* 82230730h case   11:*/		return 0x82230734;
		  /* 82230734h */ case   12:  		/* lwz R5, <#[R11 + 68]> */
		/* 82230734h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000044) );
		/* 82230734h case   12:*/		return 0x82230738;
		  /* 82230738h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230738h case   13:*/		if ( 1 ) { regs.LR = 0x8223073C; return (uint32)regs.CTR; }
		/* 82230738h case   13:*/		return 0x8223073C;
	}
	return 0x8223073C;
} // Block from 82230704h-8223073Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223073Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223073C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223073C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223073C);
		  /* 8223073Ch */ case    0:  		/* li R3, 1 */
		/* 8223073Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223073Ch case    0:*/		return 0x82230740;
		  /* 82230740h */ case    1:  		/* b 88 */
		/* 82230740h case    1:*/		return 0x82230798;
		/* 82230740h case    1:*/		return 0x82230744;
	}
	return 0x82230744;
} // Block from 8223073Ch-82230744h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230744);
		  /* 82230744h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 82230744h case    0:*/		if ( regs.CR[6].eq ) { return 0x8223075C;  }
		/* 82230744h case    0:*/		return 0x82230748;
		  /* 82230748h */ case    1:  		/* li R6, 0 */
		/* 82230748h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230748h case    1:*/		return 0x8223074C;
		  /* 8223074Ch */ case    2:  		/* li R5, 0 */
		/* 8223074Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223074Ch case    2:*/		return 0x82230750;
		  /* 82230750h */ case    3:  		/* li R4, 11 */
		/* 82230750h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 82230750h case    3:*/		return 0x82230754;
		  /* 82230754h */ case    4:  		/* mr R3, R30 */
		/* 82230754h case    4:*/		regs.R3 = regs.R30;
		/* 82230754h case    4:*/		return 0x82230758;
		  /* 82230758h */ case    5:  		/* bl -863160 */
		/* 82230758h case    5:*/		regs.LR = 0x8223075C; return 0x8215DBA0;
		/* 82230758h case    5:*/		return 0x8223075C;
	}
	return 0x8223075C;
} // Block from 82230744h-8223075Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223075Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223075C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223075C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223075C);
		  /* 8223075Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223075Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223075Ch case    0:*/		return 0x82230760;
		  /* 82230760h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230760h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230794;  }
		/* 82230760h case    1:*/		return 0x82230764;
		  /* 82230764h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230764h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230764h case    2:*/		return 0x82230768;
		  /* 82230768h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230768h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230794;  }
		/* 82230768h case    3:*/		return 0x8223076C;
		  /* 8223076Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223076Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223076Ch case    4:*/		return 0x82230770;
		  /* 82230770h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230770h case    5:*/		regs.CTR = regs.R29;
		/* 82230770h case    5:*/		return 0x82230774;
		  /* 82230774h */ case    6:  		/* lis R10, -32252 */
		/* 82230774h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230774h case    6:*/		return 0x82230778;
		  /* 82230778h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230778h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230778h case    7:*/		return 0x8223077C;
		  /* 8223077Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 8223077Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 8223077Ch case    8:*/		return 0x82230780;
		  /* 82230780h */ case    9:  		/* li R7, 0 */
		/* 82230780h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230780h case    9:*/		return 0x82230784;
		  /* 82230784h */ case   10:  		/* li R6, 17 */
		/* 82230784h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x11);
		/* 82230784h case   10:*/		return 0x82230788;
		  /* 82230788h */ case   11:  		/* mr R3, R28 */
		/* 82230788h case   11:*/		regs.R3 = regs.R28;
		/* 82230788h case   11:*/		return 0x8223078C;
		  /* 8223078Ch */ case   12:  		/* lwz R5, <#[R11 + 68]> */
		/* 8223078Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000044) );
		/* 8223078Ch case   12:*/		return 0x82230790;
		  /* 82230790h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230790h case   13:*/		if ( 1 ) { regs.LR = 0x82230794; return (uint32)regs.CTR; }
		/* 82230790h case   13:*/		return 0x82230794;
	}
	return 0x82230794;
} // Block from 8223075Ch-82230794h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230794);
		  /* 82230794h */ case    0:  		/* li R3, 0 */
		/* 82230794h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230794h case    0:*/		return 0x82230798;
	}
	return 0x82230798;
} // Block from 82230794h-82230798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230798);
		  /* 82230798h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230798h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230798h case    0:*/		return 0x8223079C;
		  /* 8223079Ch */ case    1:  		/* b -1701108 */
		/* 8223079Ch case    1:*/		return 0x820912A8;
		/* 8223079Ch case    1:*/		return 0x822307A0;
	}
	return 0x822307A0;
} // Block from 82230798h-822307A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822307A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822307A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822307A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822307A0);
		  /* 822307A0h */ case    0:  		/* mfspr R12, LR */
		/* 822307A0h case    0:*/		regs.R12 = regs.LR;
		/* 822307A0h case    0:*/		return 0x822307A4;
		  /* 822307A4h */ case    1:  		/* bl -1701196 */
		/* 822307A4h case    1:*/		regs.LR = 0x822307A8; return 0x82091258;
		/* 822307A4h case    1:*/		return 0x822307A8;
		  /* 822307A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822307A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822307A8h case    2:*/		return 0x822307AC;
		  /* 822307ACh */ case    3:  		/* mr R31, R3 */
		/* 822307ACh case    3:*/		regs.R31 = regs.R3;
		/* 822307ACh case    3:*/		return 0x822307B0;
		  /* 822307B0h */ case    4:  		/* mr R30, R5 */
		/* 822307B0h case    4:*/		regs.R30 = regs.R5;
		/* 822307B0h case    4:*/		return 0x822307B4;
		  /* 822307B4h */ case    5:  		/* mr R29, R6 */
		/* 822307B4h case    5:*/		regs.R29 = regs.R6;
		/* 822307B4h case    5:*/		return 0x822307B8;
		  /* 822307B8h */ case    6:  		/* mr R28, R7 */
		/* 822307B8h case    6:*/		regs.R28 = regs.R7;
		/* 822307B8h case    6:*/		return 0x822307BC;
		  /* 822307BCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822307BCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822307BCh case    7:*/		return 0x822307C0;
		  /* 822307C0h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822307C0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822307E4;  }
		/* 822307C0h case    8:*/		return 0x822307C4;
		  /* 822307C4h */ case    9:  		/* lis R11, -32252 */
		/* 822307C4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822307C4h case    9:*/		return 0x822307C8;
		  /* 822307C8h */ case   10:  		/* lis R10, -32253 */
		/* 822307C8h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822307C8h case   10:*/		return 0x822307CC;
		  /* 822307CCh */ case   11:  		/* lis R9, -32253 */
		/* 822307CCh case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822307CCh case   11:*/		return 0x822307D0;
		  /* 822307D0h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822307D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822307D0h case   12:*/		return 0x822307D4;
		  /* 822307D4h */ case   13:  		/* addi R5, R10, 27792 */
		/* 822307D4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822307D4h case   13:*/		return 0x822307D8;
		  /* 822307D8h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822307D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822307D8h case   14:*/		return 0x822307DC;
		  /* 822307DCh */ case   15:  		/* li R7, 1262 */
		/* 822307DCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x4EE);
		/* 822307DCh case   15:*/		return 0x822307E0;
		  /* 822307E0h */ case   16:  		/* bl -887768 */
		/* 822307E0h case   16:*/		regs.LR = 0x822307E4; return 0x82157C08;
		/* 822307E0h case   16:*/		return 0x822307E4;
	}
	return 0x822307E4;
} // Block from 822307A0h-822307E4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 822307E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822307E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822307E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822307E4);
		  /* 822307E4h */ case    0:  		/* li R4, 170 */
		/* 822307E4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xAA);
		/* 822307E4h case    0:*/		return 0x822307E8;
	}
	return 0x822307E8;
} // Block from 822307E4h-822307E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822307E8h
// Function '?IsLexicallyControlledBy@Block@D3DXShader@@QAA_NPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822307E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822307E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822307E8);
		  /* 822307E8h */ case    0:  		/* mr R3, R31 */
		/* 822307E8h case    0:*/		regs.R3 = regs.R31;
		/* 822307E8h case    0:*/		return 0x822307EC;
		  /* 822307ECh */ case    1:  		/* bl -864988 */
		/* 822307ECh case    1:*/		regs.LR = 0x822307F0; return 0x8215D510;
		/* 822307ECh case    1:*/		return 0x822307F0;
		  /* 822307F0h */ case    2:  		/* cmplwi CR6, R3, 2 */
		/* 822307F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 822307F0h case    2:*/		return 0x822307F4;
		  /* 822307F4h */ case    3:  		/* bc 4, CR6_EQ, 96 */
		/* 822307F4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82230854;  }
		/* 822307F4h case    3:*/		return 0x822307F8;
		  /* 822307F8h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 822307F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822307F8h case    4:*/		return 0x822307FC;
		  /* 822307FCh */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 822307FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82230814;  }
		/* 822307FCh case    5:*/		return 0x82230800;
		  /* 82230800h */ case    6:  		/* li R6, 1 */
		/* 82230800h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230800h case    6:*/		return 0x82230804;
		  /* 82230804h */ case    7:  		/* li R5, 0 */
		/* 82230804h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230804h case    7:*/		return 0x82230808;
		  /* 82230808h */ case    8:  		/* li R4, 12 */
		/* 82230808h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82230808h case    8:*/		return 0x8223080C;
		  /* 8223080Ch */ case    9:  		/* mr R3, R30 */
		/* 8223080Ch case    9:*/		regs.R3 = regs.R30;
		/* 8223080Ch case    9:*/		return 0x82230810;
		  /* 82230810h */ case   10:  		/* bl -863344 */
		/* 82230810h case   10:*/		regs.LR = 0x82230814; return 0x8215DBA0;
		/* 82230810h case   10:*/		return 0x82230814;
	}
	return 0x82230814;
} // Block from 822307E8h-82230814h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82230814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230814);
		  /* 82230814h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230814h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230814h case    0:*/		return 0x82230818;
		  /* 82230818h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230818h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223084C;  }
		/* 82230818h case    1:*/		return 0x8223081C;
		  /* 8223081Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8223081Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223081Ch case    2:*/		return 0x82230820;
		  /* 82230820h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230820h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223084C;  }
		/* 82230820h case    3:*/		return 0x82230824;
		  /* 82230824h */ case    4:  		/* lis R11, -32216 */
		/* 82230824h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230824h case    4:*/		return 0x82230828;
		  /* 82230828h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230828h case    5:*/		regs.CTR = regs.R29;
		/* 82230828h case    5:*/		return 0x8223082C;
		  /* 8223082Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223082Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223082Ch case    6:*/		return 0x82230830;
		  /* 82230830h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230830h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230830h case    7:*/		return 0x82230834;
		  /* 82230834h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230834h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230834h case    8:*/		return 0x82230838;
		  /* 82230838h */ case    9:  		/* li R7, 1 */
		/* 82230838h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230838h case    9:*/		return 0x8223083C;
		  /* 8223083Ch */ case   10:  		/* li R6, 18 */
		/* 8223083Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x12);
		/* 8223083Ch case   10:*/		return 0x82230840;
		  /* 82230840h */ case   11:  		/* mr R3, R28 */
		/* 82230840h case   11:*/		regs.R3 = regs.R28;
		/* 82230840h case   11:*/		return 0x82230844;
		  /* 82230844h */ case   12:  		/* lwz R5, <#[R11 + 72]> */
		/* 82230844h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000048) );
		/* 82230844h case   12:*/		return 0x82230848;
		  /* 82230848h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230848h case   13:*/		if ( 1 ) { regs.LR = 0x8223084C; return (uint32)regs.CTR; }
		/* 82230848h case   13:*/		return 0x8223084C;
	}
	return 0x8223084C;
} // Block from 82230814h-8223084Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223084Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223084C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223084C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223084C);
		  /* 8223084Ch */ case    0:  		/* li R3, 1 */
		/* 8223084Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223084Ch case    0:*/		return 0x82230850;
		  /* 82230850h */ case    1:  		/* b 92 */
		/* 82230850h case    1:*/		return 0x822308AC;
		/* 82230850h case    1:*/		return 0x82230854;
	}
	return 0x82230854;
} // Block from 8223084Ch-82230854h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230854);
		  /* 82230854h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230854h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230854h case    0:*/		return 0x82230858;
		  /* 82230858h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230858h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230870;  }
		/* 82230858h case    1:*/		return 0x8223085C;
		  /* 8223085Ch */ case    2:  		/* li R6, 0 */
		/* 8223085Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223085Ch case    2:*/		return 0x82230860;
		  /* 82230860h */ case    3:  		/* li R5, 0 */
		/* 82230860h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230860h case    3:*/		return 0x82230864;
		  /* 82230864h */ case    4:  		/* li R4, 12 */
		/* 82230864h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82230864h case    4:*/		return 0x82230868;
		  /* 82230868h */ case    5:  		/* mr R3, R30 */
		/* 82230868h case    5:*/		regs.R3 = regs.R30;
		/* 82230868h case    5:*/		return 0x8223086C;
		  /* 8223086Ch */ case    6:  		/* bl -863436 */
		/* 8223086Ch case    6:*/		regs.LR = 0x82230870; return 0x8215DBA0;
		/* 8223086Ch case    6:*/		return 0x82230870;
	}
	return 0x82230870;
} // Block from 82230854h-82230870h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230870h
// Function '?MemsetAndFlush@XGRAPHICS@@YAXPAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230870);
		  /* 82230870h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230870h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230870h case    0:*/		return 0x82230874;
		  /* 82230874h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230874h case    1:*/		if ( regs.CR[6].eq ) { return 0x822308A8;  }
		/* 82230874h case    1:*/		return 0x82230878;
	}
	return 0x82230878;
} // Block from 82230870h-82230878h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230878h
// Function '?FloatToString@XGRAPHICS@@YAXMPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230878);
		  /* 82230878h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82230878h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230878h case    0:*/		return 0x8223087C;
		  /* 8223087Ch */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 8223087Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822308A8;  }
		/* 8223087Ch case    1:*/		return 0x82230880;
		  /* 82230880h */ case    2:  		/* lis R11, -32216 */
		/* 82230880h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230880h case    2:*/		return 0x82230884;
		  /* 82230884h */ case    3:  		/* mtspr CTR, R29 */
		/* 82230884h case    3:*/		regs.CTR = regs.R29;
		/* 82230884h case    3:*/		return 0x82230888;
		  /* 82230888h */ case    4:  		/* lis R10, -32252 */
		/* 82230888h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230888h case    4:*/		return 0x8223088C;
		  /* 8223088Ch */ case    5:  		/* addi R11, R11, 11160 */
		/* 8223088Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223088Ch case    5:*/		return 0x82230890;
		  /* 82230890h */ case    6:  		/* addi R4, R10, 4320 */
		/* 82230890h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230890h case    6:*/		return 0x82230894;
		  /* 82230894h */ case    7:  		/* li R7, 0 */
		/* 82230894h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230894h case    7:*/		return 0x82230898;
		  /* 82230898h */ case    8:  		/* li R6, 18 */
		/* 82230898h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x12);
		/* 82230898h case    8:*/		return 0x8223089C;
		  /* 8223089Ch */ case    9:  		/* mr R3, R28 */
		/* 8223089Ch case    9:*/		regs.R3 = regs.R28;
		/* 8223089Ch case    9:*/		return 0x822308A0;
		  /* 822308A0h */ case   10:  		/* lwz R5, <#[R11 + 72]> */
		/* 822308A0h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000048) );
		/* 822308A0h case   10:*/		return 0x822308A4;
		  /* 822308A4h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 822308A4h case   11:*/		if ( 1 ) { regs.LR = 0x822308A8; return (uint32)regs.CTR; }
		/* 822308A4h case   11:*/		return 0x822308A8;
	}
	return 0x822308A8;
} // Block from 82230878h-822308A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822308A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822308A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822308A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822308A8);
		  /* 822308A8h */ case    0:  		/* li R3, 0 */
		/* 822308A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822308A8h case    0:*/		return 0x822308AC;
	}
	return 0x822308AC;
} // Block from 822308A8h-822308ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822308ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822308AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822308AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822308AC);
		  /* 822308ACh */ case    0:  		/* addi R1, R1, 128 */
		/* 822308ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822308ACh case    0:*/		return 0x822308B0;
		  /* 822308B0h */ case    1:  		/* b -1701384 */
		/* 822308B0h case    1:*/		return 0x820912A8;
		/* 822308B0h case    1:*/		return 0x822308B4;
		  /* 822308B4h */ case    2:  		/* nop */
		/* 822308B4h case    2:*/		cpu::op::nop();
		/* 822308B4h case    2:*/		return 0x822308B8;
	}
	return 0x822308B8;
} // Block from 822308ACh-822308B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822308B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822308B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822308B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822308B8);
		  /* 822308B8h */ case    0:  		/* mfspr R12, LR */
		/* 822308B8h case    0:*/		regs.R12 = regs.LR;
		/* 822308B8h case    0:*/		return 0x822308BC;
		  /* 822308BCh */ case    1:  		/* bl -1701476 */
		/* 822308BCh case    1:*/		regs.LR = 0x822308C0; return 0x82091258;
		/* 822308BCh case    1:*/		return 0x822308C0;
		  /* 822308C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822308C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822308C0h case    2:*/		return 0x822308C4;
		  /* 822308C4h */ case    3:  		/* mr R31, R3 */
		/* 822308C4h case    3:*/		regs.R31 = regs.R3;
		/* 822308C4h case    3:*/		return 0x822308C8;
		  /* 822308C8h */ case    4:  		/* mr R30, R5 */
		/* 822308C8h case    4:*/		regs.R30 = regs.R5;
		/* 822308C8h case    4:*/		return 0x822308CC;
		  /* 822308CCh */ case    5:  		/* mr R29, R6 */
		/* 822308CCh case    5:*/		regs.R29 = regs.R6;
		/* 822308CCh case    5:*/		return 0x822308D0;
		  /* 822308D0h */ case    6:  		/* mr R28, R7 */
		/* 822308D0h case    6:*/		regs.R28 = regs.R7;
		/* 822308D0h case    6:*/		return 0x822308D4;
		  /* 822308D4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822308D4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822308D4h case    7:*/		return 0x822308D8;
		  /* 822308D8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822308D8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822308FC;  }
		/* 822308D8h case    8:*/		return 0x822308DC;
		  /* 822308DCh */ case    9:  		/* lis R11, -32252 */
		/* 822308DCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822308DCh case    9:*/		return 0x822308E0;
		  /* 822308E0h */ case   10:  		/* lis R10, -32253 */
		/* 822308E0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822308E0h case   10:*/		return 0x822308E4;
		  /* 822308E4h */ case   11:  		/* lis R9, -32253 */
		/* 822308E4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822308E4h case   11:*/		return 0x822308E8;
		  /* 822308E8h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822308E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822308E8h case   12:*/		return 0x822308EC;
		  /* 822308ECh */ case   13:  		/* addi R5, R10, 27792 */
		/* 822308ECh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822308ECh case   13:*/		return 0x822308F0;
		  /* 822308F0h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822308F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822308F0h case   14:*/		return 0x822308F4;
		  /* 822308F4h */ case   15:  		/* li R7, 1316 */
		/* 822308F4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x524);
		/* 822308F4h case   15:*/		return 0x822308F8;
		  /* 822308F8h */ case   16:  		/* bl -888048 */
		/* 822308F8h case   16:*/		regs.LR = 0x822308FC; return 0x82157C08;
		/* 822308F8h case   16:*/		return 0x822308FC;
	}
	return 0x822308FC;
} // Block from 822308B8h-822308FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 822308FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822308FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822308FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822308FC);
		  /* 822308FCh */ case    0:  		/* li R4, 170 */
		/* 822308FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xAA);
		/* 822308FCh case    0:*/		return 0x82230900;
		  /* 82230900h */ case    1:  		/* mr R3, R31 */
		/* 82230900h case    1:*/		regs.R3 = regs.R31;
		/* 82230900h case    1:*/		return 0x82230904;
		  /* 82230904h */ case    2:  		/* bl -865268 */
		/* 82230904h case    2:*/		regs.LR = 0x82230908; return 0x8215D510;
		/* 82230904h case    2:*/		return 0x82230908;
		  /* 82230908h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82230908h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82230908h case    3:*/		return 0x8223090C;
		  /* 8223090Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8223090Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223090Ch case    4:*/		return 0x82230910;
		  /* 82230910h */ case    5:  		/* bc 4, CR0_EQ, 92 */
		/* 82230910h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8223096C;  }
		/* 82230910h case    5:*/		return 0x82230914;
		  /* 82230914h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82230914h case    6:*/		if ( regs.CR[6].eq ) { return 0x8223092C;  }
		/* 82230914h case    6:*/		return 0x82230918;
		  /* 82230918h */ case    7:  		/* li R6, 1 */
		/* 82230918h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230918h case    7:*/		return 0x8223091C;
		  /* 8223091Ch */ case    8:  		/* li R5, 0 */
		/* 8223091Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223091Ch case    8:*/		return 0x82230920;
		  /* 82230920h */ case    9:  		/* li R4, 13 */
		/* 82230920h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 82230920h case    9:*/		return 0x82230924;
		  /* 82230924h */ case   10:  		/* mr R3, R30 */
		/* 82230924h case   10:*/		regs.R3 = regs.R30;
		/* 82230924h case   10:*/		return 0x82230928;
		  /* 82230928h */ case   11:  		/* bl -863624 */
		/* 82230928h case   11:*/		regs.LR = 0x8223092C; return 0x8215DBA0;
		/* 82230928h case   11:*/		return 0x8223092C;
	}
	return 0x8223092C;
} // Block from 822308FCh-8223092Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223092Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223092C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223092C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223092C);
		  /* 8223092Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223092Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223092Ch case    0:*/		return 0x82230930;
		  /* 82230930h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230930h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230964;  }
		/* 82230930h case    1:*/		return 0x82230934;
		  /* 82230934h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230934h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230934h case    2:*/		return 0x82230938;
		  /* 82230938h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230938h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230964;  }
		/* 82230938h case    3:*/		return 0x8223093C;
		  /* 8223093Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223093Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223093Ch case    4:*/		return 0x82230940;
		  /* 82230940h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230940h case    5:*/		regs.CTR = regs.R29;
		/* 82230940h case    5:*/		return 0x82230944;
		  /* 82230944h */ case    6:  		/* lis R10, -32252 */
		/* 82230944h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230944h case    6:*/		return 0x82230948;
		  /* 82230948h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230948h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230948h case    7:*/		return 0x8223094C;
		  /* 8223094Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 8223094Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 8223094Ch case    8:*/		return 0x82230950;
		  /* 82230950h */ case    9:  		/* li R7, 1 */
		/* 82230950h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230950h case    9:*/		return 0x82230954;
		  /* 82230954h */ case   10:  		/* li R6, 19 */
		/* 82230954h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x13);
		/* 82230954h case   10:*/		return 0x82230958;
		  /* 82230958h */ case   11:  		/* mr R3, R28 */
		/* 82230958h case   11:*/		regs.R3 = regs.R28;
		/* 82230958h case   11:*/		return 0x8223095C;
		  /* 8223095Ch */ case   12:  		/* lwz R5, <#[R11 + 76]> */
		/* 8223095Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000004C) );
		/* 8223095Ch case   12:*/		return 0x82230960;
		  /* 82230960h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230960h case   13:*/		if ( 1 ) { regs.LR = 0x82230964; return (uint32)regs.CTR; }
		/* 82230960h case   13:*/		return 0x82230964;
	}
	return 0x82230964;
} // Block from 8223092Ch-82230964h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230964);
		  /* 82230964h */ case    0:  		/* li R3, 1 */
		/* 82230964h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230964h case    0:*/		return 0x82230968;
		  /* 82230968h */ case    1:  		/* b 88 */
		/* 82230968h case    1:*/		return 0x822309C0;
		/* 82230968h case    1:*/		return 0x8223096C;
	}
	return 0x8223096C;
} // Block from 82230964h-8223096Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223096Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223096C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223096C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223096C);
		  /* 8223096Ch */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 8223096Ch case    0:*/		if ( regs.CR[6].eq ) { return 0x82230984;  }
		/* 8223096Ch case    0:*/		return 0x82230970;
	}
	return 0x82230970;
} // Block from 8223096Ch-82230970h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230970h
// Function '?CompileWithPointSprites@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230970);
		  /* 82230970h */ case    0:  		/* li R6, 0 */
		/* 82230970h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230970h case    0:*/		return 0x82230974;
		  /* 82230974h */ case    1:  		/* li R5, 0 */
		/* 82230974h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230974h case    1:*/		return 0x82230978;
		  /* 82230978h */ case    2:  		/* li R4, 13 */
		/* 82230978h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 82230978h case    2:*/		return 0x8223097C;
		  /* 8223097Ch */ case    3:  		/* mr R3, R30 */
		/* 8223097Ch case    3:*/		regs.R3 = regs.R30;
		/* 8223097Ch case    3:*/		return 0x82230980;
		  /* 82230980h */ case    4:  		/* bl -863712 */
		/* 82230980h case    4:*/		regs.LR = 0x82230984; return 0x8215DBA0;
		/* 82230980h case    4:*/		return 0x82230984;
	}
	return 0x82230984;
} // Block from 82230970h-82230984h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82230984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230984);
		  /* 82230984h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230984h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230984h case    0:*/		return 0x82230988;
		  /* 82230988h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230988h case    1:*/		if ( regs.CR[6].eq ) { return 0x822309BC;  }
		/* 82230988h case    1:*/		return 0x8223098C;
		  /* 8223098Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8223098Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223098Ch case    2:*/		return 0x82230990;
		  /* 82230990h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230990h case    3:*/		if ( regs.CR[6].eq ) { return 0x822309BC;  }
		/* 82230990h case    3:*/		return 0x82230994;
		  /* 82230994h */ case    4:  		/* lis R11, -32216 */
		/* 82230994h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230994h case    4:*/		return 0x82230998;
		  /* 82230998h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230998h case    5:*/		regs.CTR = regs.R29;
		/* 82230998h case    5:*/		return 0x8223099C;
		  /* 8223099Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223099Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223099Ch case    6:*/		return 0x822309A0;
		  /* 822309A0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822309A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822309A0h case    7:*/		return 0x822309A4;
		  /* 822309A4h */ case    8:  		/* addi R4, R10, 4320 */
		/* 822309A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 822309A4h case    8:*/		return 0x822309A8;
		  /* 822309A8h */ case    9:  		/* li R7, 0 */
		/* 822309A8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822309A8h case    9:*/		return 0x822309AC;
		  /* 822309ACh */ case   10:  		/* li R6, 19 */
		/* 822309ACh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x13);
		/* 822309ACh case   10:*/		return 0x822309B0;
		  /* 822309B0h */ case   11:  		/* mr R3, R28 */
		/* 822309B0h case   11:*/		regs.R3 = regs.R28;
		/* 822309B0h case   11:*/		return 0x822309B4;
		  /* 822309B4h */ case   12:  		/* lwz R5, <#[R11 + 76]> */
		/* 822309B4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000004C) );
		/* 822309B4h case   12:*/		return 0x822309B8;
		  /* 822309B8h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 822309B8h case   13:*/		if ( 1 ) { regs.LR = 0x822309BC; return (uint32)regs.CTR; }
		/* 822309B8h case   13:*/		return 0x822309BC;
	}
	return 0x822309BC;
} // Block from 82230984h-822309BCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 822309BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822309BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822309BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822309BC);
		  /* 822309BCh */ case    0:  		/* li R3, 0 */
		/* 822309BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822309BCh case    0:*/		return 0x822309C0;
	}
	return 0x822309C0;
} // Block from 822309BCh-822309C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822309C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822309C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822309C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822309C0);
		  /* 822309C0h */ case    0:  		/* addi R1, R1, 128 */
		/* 822309C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822309C0h case    0:*/		return 0x822309C4;
		  /* 822309C4h */ case    1:  		/* b -1701660 */
		/* 822309C4h case    1:*/		return 0x820912A8;
		/* 822309C4h case    1:*/		return 0x822309C8;
	}
	return 0x822309C8;
} // Block from 822309C0h-822309C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822309C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822309C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822309C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822309C8);
		  /* 822309C8h */ case    0:  		/* mfspr R12, LR */
		/* 822309C8h case    0:*/		regs.R12 = regs.LR;
		/* 822309C8h case    0:*/		return 0x822309CC;
		  /* 822309CCh */ case    1:  		/* bl -1701748 */
		/* 822309CCh case    1:*/		regs.LR = 0x822309D0; return 0x82091258;
		/* 822309CCh case    1:*/		return 0x822309D0;
		  /* 822309D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822309D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822309D0h case    2:*/		return 0x822309D4;
		  /* 822309D4h */ case    3:  		/* mr R31, R3 */
		/* 822309D4h case    3:*/		regs.R31 = regs.R3;
		/* 822309D4h case    3:*/		return 0x822309D8;
		  /* 822309D8h */ case    4:  		/* mr R30, R5 */
		/* 822309D8h case    4:*/		regs.R30 = regs.R5;
		/* 822309D8h case    4:*/		return 0x822309DC;
		  /* 822309DCh */ case    5:  		/* mr R29, R6 */
		/* 822309DCh case    5:*/		regs.R29 = regs.R6;
		/* 822309DCh case    5:*/		return 0x822309E0;
		  /* 822309E0h */ case    6:  		/* mr R28, R7 */
		/* 822309E0h case    6:*/		regs.R28 = regs.R7;
		/* 822309E0h case    6:*/		return 0x822309E4;
		  /* 822309E4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822309E4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822309E4h case    7:*/		return 0x822309E8;
		  /* 822309E8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822309E8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230A0C;  }
		/* 822309E8h case    8:*/		return 0x822309EC;
		  /* 822309ECh */ case    9:  		/* lis R11, -32252 */
		/* 822309ECh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822309ECh case    9:*/		return 0x822309F0;
		  /* 822309F0h */ case   10:  		/* lis R10, -32253 */
		/* 822309F0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822309F0h case   10:*/		return 0x822309F4;
		  /* 822309F4h */ case   11:  		/* lis R9, -32253 */
		/* 822309F4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822309F4h case   11:*/		return 0x822309F8;
		  /* 822309F8h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822309F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822309F8h case   12:*/		return 0x822309FC;
		  /* 822309FCh */ case   13:  		/* addi R5, R10, 27792 */
		/* 822309FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822309FCh case   13:*/		return 0x82230A00;
		  /* 82230A00h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82230A00h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230A00h case   14:*/		return 0x82230A04;
		  /* 82230A04h */ case   15:  		/* li R7, 1367 */
		/* 82230A04h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x557);
		/* 82230A04h case   15:*/		return 0x82230A08;
		  /* 82230A08h */ case   16:  		/* bl -888320 */
		/* 82230A08h case   16:*/		regs.LR = 0x82230A0C; return 0x82157C08;
		/* 82230A08h case   16:*/		return 0x82230A0C;
	}
	return 0x82230A0C;
} // Block from 822309C8h-82230A0Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82230A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230A0C);
		  /* 82230A0Ch */ case    0:  		/* li R4, 170 */
		/* 82230A0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xAA);
		/* 82230A0Ch case    0:*/		return 0x82230A10;
		  /* 82230A10h */ case    1:  		/* mr R3, R31 */
		/* 82230A10h case    1:*/		regs.R3 = regs.R31;
		/* 82230A10h case    1:*/		return 0x82230A14;
		  /* 82230A14h */ case    2:  		/* bl -865540 */
		/* 82230A14h case    2:*/		regs.LR = 0x82230A18; return 0x8215D510;
		/* 82230A14h case    2:*/		return 0x82230A18;
		  /* 82230A18h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82230A18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82230A18h case    3:*/		return 0x82230A1C;
		  /* 82230A1Ch */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82230A1Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82230A7C;  }
		/* 82230A1Ch case    4:*/		return 0x82230A20;
		  /* 82230A20h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82230A20h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230A20h case    5:*/		return 0x82230A24;
		  /* 82230A24h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82230A24h case    6:*/		if ( regs.CR[6].eq ) { return 0x82230A3C;  }
		/* 82230A24h case    6:*/		return 0x82230A28;
		  /* 82230A28h */ case    7:  		/* li R6, 1 */
		/* 82230A28h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230A28h case    7:*/		return 0x82230A2C;
		  /* 82230A2Ch */ case    8:  		/* li R5, 0 */
		/* 82230A2Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230A2Ch case    8:*/		return 0x82230A30;
		  /* 82230A30h */ case    9:  		/* li R4, 14 */
		/* 82230A30h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 82230A30h case    9:*/		return 0x82230A34;
		  /* 82230A34h */ case   10:  		/* mr R3, R30 */
		/* 82230A34h case   10:*/		regs.R3 = regs.R30;
		/* 82230A34h case   10:*/		return 0x82230A38;
		  /* 82230A38h */ case   11:  		/* bl -863896 */
		/* 82230A38h case   11:*/		regs.LR = 0x82230A3C; return 0x8215DBA0;
		/* 82230A38h case   11:*/		return 0x82230A3C;
	}
	return 0x82230A3C;
} // Block from 82230A0Ch-82230A3Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230A3C);
		  /* 82230A3Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230A3Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230A3Ch case    0:*/		return 0x82230A40;
		  /* 82230A40h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230A40h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230A74;  }
		/* 82230A40h case    1:*/		return 0x82230A44;
		  /* 82230A44h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230A44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230A44h case    2:*/		return 0x82230A48;
		  /* 82230A48h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230A48h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230A74;  }
		/* 82230A48h case    3:*/		return 0x82230A4C;
		  /* 82230A4Ch */ case    4:  		/* lis R11, -32216 */
		/* 82230A4Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230A4Ch case    4:*/		return 0x82230A50;
		  /* 82230A50h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230A50h case    5:*/		regs.CTR = regs.R29;
		/* 82230A50h case    5:*/		return 0x82230A54;
		  /* 82230A54h */ case    6:  		/* lis R10, -32252 */
		/* 82230A54h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230A54h case    6:*/		return 0x82230A58;
		  /* 82230A58h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230A58h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230A58h case    7:*/		return 0x82230A5C;
		  /* 82230A5Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230A5Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230A5Ch case    8:*/		return 0x82230A60;
		  /* 82230A60h */ case    9:  		/* li R7, 1 */
		/* 82230A60h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230A60h case    9:*/		return 0x82230A64;
		  /* 82230A64h */ case   10:  		/* li R6, 20 */
		/* 82230A64h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x14);
		/* 82230A64h case   10:*/		return 0x82230A68;
		  /* 82230A68h */ case   11:  		/* mr R3, R28 */
		/* 82230A68h case   11:*/		regs.R3 = regs.R28;
		/* 82230A68h case   11:*/		return 0x82230A6C;
		  /* 82230A6Ch */ case   12:  		/* lwz R5, <#[R11 + 80]> */
		/* 82230A6Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000050) );
		/* 82230A6Ch case   12:*/		return 0x82230A70;
		  /* 82230A70h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230A70h case   13:*/		if ( 1 ) { regs.LR = 0x82230A74; return (uint32)regs.CTR; }
		/* 82230A70h case   13:*/		return 0x82230A74;
	}
	return 0x82230A74;
} // Block from 82230A3Ch-82230A74h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230A74);
		  /* 82230A74h */ case    0:  		/* li R3, 1 */
		/* 82230A74h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230A74h case    0:*/		return 0x82230A78;
		  /* 82230A78h */ case    1:  		/* b 92 */
		/* 82230A78h case    1:*/		return 0x82230AD4;
		/* 82230A78h case    1:*/		return 0x82230A7C;
	}
	return 0x82230A7C;
} // Block from 82230A74h-82230A7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230A7C);
		  /* 82230A7Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230A7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230A7Ch case    0:*/		return 0x82230A80;
		  /* 82230A80h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230A80h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230A98;  }
		/* 82230A80h case    1:*/		return 0x82230A84;
		  /* 82230A84h */ case    2:  		/* li R6, 0 */
		/* 82230A84h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230A84h case    2:*/		return 0x82230A88;
	}
	return 0x82230A88;
} // Block from 82230A7Ch-82230A88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230A88h
// Function '?CompileWithVertexFog@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230A88);
		  /* 82230A88h */ case    0:  		/* li R5, 0 */
		/* 82230A88h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230A88h case    0:*/		return 0x82230A8C;
		  /* 82230A8Ch */ case    1:  		/* li R4, 14 */
		/* 82230A8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 82230A8Ch case    1:*/		return 0x82230A90;
		  /* 82230A90h */ case    2:  		/* mr R3, R30 */
		/* 82230A90h case    2:*/		regs.R3 = regs.R30;
		/* 82230A90h case    2:*/		return 0x82230A94;
		  /* 82230A94h */ case    3:  		/* bl -863988 */
		/* 82230A94h case    3:*/		regs.LR = 0x82230A98; return 0x8215DBA0;
		/* 82230A94h case    3:*/		return 0x82230A98;
	}
	return 0x82230A98;
} // Block from 82230A88h-82230A98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82230A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230A98);
		  /* 82230A98h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230A98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230A98h case    0:*/		return 0x82230A9C;
		  /* 82230A9Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230A9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82230AD0;  }
		/* 82230A9Ch case    1:*/		return 0x82230AA0;
		  /* 82230AA0h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230AA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230AA0h case    2:*/		return 0x82230AA4;
		  /* 82230AA4h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230AA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230AD0;  }
		/* 82230AA4h case    3:*/		return 0x82230AA8;
		  /* 82230AA8h */ case    4:  		/* lis R11, -32216 */
		/* 82230AA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230AA8h case    4:*/		return 0x82230AAC;
		  /* 82230AACh */ case    5:  		/* mtspr CTR, R29 */
		/* 82230AACh case    5:*/		regs.CTR = regs.R29;
		/* 82230AACh case    5:*/		return 0x82230AB0;
		  /* 82230AB0h */ case    6:  		/* lis R10, -32252 */
		/* 82230AB0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230AB0h case    6:*/		return 0x82230AB4;
		  /* 82230AB4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230AB4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230AB4h case    7:*/		return 0x82230AB8;
		  /* 82230AB8h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230AB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230AB8h case    8:*/		return 0x82230ABC;
		  /* 82230ABCh */ case    9:  		/* li R7, 0 */
		/* 82230ABCh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230ABCh case    9:*/		return 0x82230AC0;
		  /* 82230AC0h */ case   10:  		/* li R6, 20 */
		/* 82230AC0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x14);
		/* 82230AC0h case   10:*/		return 0x82230AC4;
		  /* 82230AC4h */ case   11:  		/* mr R3, R28 */
		/* 82230AC4h case   11:*/		regs.R3 = regs.R28;
		/* 82230AC4h case   11:*/		return 0x82230AC8;
		  /* 82230AC8h */ case   12:  		/* lwz R5, <#[R11 + 80]> */
		/* 82230AC8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000050) );
		/* 82230AC8h case   12:*/		return 0x82230ACC;
		  /* 82230ACCh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230ACCh case   13:*/		if ( 1 ) { regs.LR = 0x82230AD0; return (uint32)regs.CTR; }
		/* 82230ACCh case   13:*/		return 0x82230AD0;
	}
	return 0x82230AD0;
} // Block from 82230A98h-82230AD0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230AD0);
		  /* 82230AD0h */ case    0:  		/* li R3, 0 */
		/* 82230AD0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230AD0h case    0:*/		return 0x82230AD4;
	}
	return 0x82230AD4;
} // Block from 82230AD0h-82230AD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230AD4);
		  /* 82230AD4h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230AD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230AD4h case    0:*/		return 0x82230AD8;
		  /* 82230AD8h */ case    1:  		/* b -1701936 */
		/* 82230AD8h case    1:*/		return 0x820912A8;
		/* 82230AD8h case    1:*/		return 0x82230ADC;
		  /* 82230ADCh */ case    2:  		/* nop */
		/* 82230ADCh case    2:*/		cpu::op::nop();
		/* 82230ADCh case    2:*/		return 0x82230AE0;
	}
	return 0x82230AE0;
} // Block from 82230AD4h-82230AE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230AE0);
		  /* 82230AE0h */ case    0:  		/* mfspr R12, LR */
		/* 82230AE0h case    0:*/		regs.R12 = regs.LR;
		/* 82230AE0h case    0:*/		return 0x82230AE4;
		  /* 82230AE4h */ case    1:  		/* bl -1702028 */
		/* 82230AE4h case    1:*/		regs.LR = 0x82230AE8; return 0x82091258;
		/* 82230AE4h case    1:*/		return 0x82230AE8;
		  /* 82230AE8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230AE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230AE8h case    2:*/		return 0x82230AEC;
		  /* 82230AECh */ case    3:  		/* mr R31, R3 */
		/* 82230AECh case    3:*/		regs.R31 = regs.R3;
		/* 82230AECh case    3:*/		return 0x82230AF0;
		  /* 82230AF0h */ case    4:  		/* mr R30, R5 */
		/* 82230AF0h case    4:*/		regs.R30 = regs.R5;
		/* 82230AF0h case    4:*/		return 0x82230AF4;
		  /* 82230AF4h */ case    5:  		/* mr R29, R6 */
		/* 82230AF4h case    5:*/		regs.R29 = regs.R6;
		/* 82230AF4h case    5:*/		return 0x82230AF8;
		  /* 82230AF8h */ case    6:  		/* mr R28, R7 */
		/* 82230AF8h case    6:*/		regs.R28 = regs.R7;
		/* 82230AF8h case    6:*/		return 0x82230AFC;
		  /* 82230AFCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82230AFCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82230AFCh case    7:*/		return 0x82230B00;
		  /* 82230B00h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230B00h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230B24;  }
		/* 82230B00h case    8:*/		return 0x82230B04;
		  /* 82230B04h */ case    9:  		/* lis R11, -32252 */
		/* 82230B04h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230B04h case    9:*/		return 0x82230B08;
		  /* 82230B08h */ case   10:  		/* lis R10, -32253 */
		/* 82230B08h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230B08h case   10:*/		return 0x82230B0C;
		  /* 82230B0Ch */ case   11:  		/* lis R9, -32253 */
		/* 82230B0Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82230B0Ch case   11:*/		return 0x82230B10;
		  /* 82230B10h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82230B10h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82230B10h case   12:*/		return 0x82230B14;
		  /* 82230B14h */ case   13:  		/* addi R5, R10, 27792 */
		/* 82230B14h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82230B14h case   13:*/		return 0x82230B18;
		  /* 82230B18h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82230B18h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230B18h case   14:*/		return 0x82230B1C;
		  /* 82230B1Ch */ case   15:  		/* li R7, 1421 */
		/* 82230B1Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x58D);
		/* 82230B1Ch case   15:*/		return 0x82230B20;
		  /* 82230B20h */ case   16:  		/* bl -888600 */
		/* 82230B20h case   16:*/		regs.LR = 0x82230B24; return 0x82157C08;
		/* 82230B20h case   16:*/		return 0x82230B24;
	}
	return 0x82230B24;
} // Block from 82230AE0h-82230B24h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82230B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230B24);
		  /* 82230B24h */ case    0:  		/* li R4, 171 */
		/* 82230B24h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xAB);
		/* 82230B24h case    0:*/		return 0x82230B28;
		  /* 82230B28h */ case    1:  		/* mr R3, R31 */
		/* 82230B28h case    1:*/		regs.R3 = regs.R31;
		/* 82230B28h case    1:*/		return 0x82230B2C;
		  /* 82230B2Ch */ case    2:  		/* bl -865820 */
		/* 82230B2Ch case    2:*/		regs.LR = 0x82230B30; return 0x8215D510;
		/* 82230B2Ch case    2:*/		return 0x82230B30;
		  /* 82230B30h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82230B30h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82230B30h case    3:*/		return 0x82230B34;
		  /* 82230B34h */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82230B34h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82230B94;  }
		/* 82230B34h case    4:*/		return 0x82230B38;
		  /* 82230B38h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82230B38h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230B38h case    5:*/		return 0x82230B3C;
		  /* 82230B3Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82230B3Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82230B54;  }
		/* 82230B3Ch case    6:*/		return 0x82230B40;
		  /* 82230B40h */ case    7:  		/* li R6, 1 */
		/* 82230B40h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230B40h case    7:*/		return 0x82230B44;
		  /* 82230B44h */ case    8:  		/* li R5, 0 */
		/* 82230B44h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230B44h case    8:*/		return 0x82230B48;
		  /* 82230B48h */ case    9:  		/* li R4, 40 */
		/* 82230B48h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 82230B48h case    9:*/		return 0x82230B4C;
		  /* 82230B4Ch */ case   10:  		/* mr R3, R30 */
		/* 82230B4Ch case   10:*/		regs.R3 = regs.R30;
		/* 82230B4Ch case   10:*/		return 0x82230B50;
		  /* 82230B50h */ case   11:  		/* bl -864176 */
		/* 82230B50h case   11:*/		regs.LR = 0x82230B54; return 0x8215DBA0;
		/* 82230B50h case   11:*/		return 0x82230B54;
	}
	return 0x82230B54;
} // Block from 82230B24h-82230B54h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230B54);
		  /* 82230B54h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230B54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230B54h case    0:*/		return 0x82230B58;
		  /* 82230B58h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230B58h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230B8C;  }
		/* 82230B58h case    1:*/		return 0x82230B5C;
		  /* 82230B5Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230B5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230B5Ch case    2:*/		return 0x82230B60;
		  /* 82230B60h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230B60h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230B8C;  }
		/* 82230B60h case    3:*/		return 0x82230B64;
		  /* 82230B64h */ case    4:  		/* lis R11, -32216 */
		/* 82230B64h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230B64h case    4:*/		return 0x82230B68;
		  /* 82230B68h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230B68h case    5:*/		regs.CTR = regs.R29;
		/* 82230B68h case    5:*/		return 0x82230B6C;
		  /* 82230B6Ch */ case    6:  		/* lis R10, -32252 */
		/* 82230B6Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230B6Ch case    6:*/		return 0x82230B70;
		  /* 82230B70h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230B70h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230B70h case    7:*/		return 0x82230B74;
		  /* 82230B74h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230B74h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230B74h case    8:*/		return 0x82230B78;
		  /* 82230B78h */ case    9:  		/* li R7, 1 */
		/* 82230B78h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230B78h case    9:*/		return 0x82230B7C;
		  /* 82230B7Ch */ case   10:  		/* li R6, 92 */
		/* 82230B7Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x5C);
		/* 82230B7Ch case   10:*/		return 0x82230B80;
		  /* 82230B80h */ case   11:  		/* mr R3, R28 */
		/* 82230B80h case   11:*/		regs.R3 = regs.R28;
		/* 82230B80h case   11:*/		return 0x82230B84;
		  /* 82230B84h */ case   12:  		/* lwz R5, <#[R11 + 368]> */
		/* 82230B84h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000170) );
		/* 82230B84h case   12:*/		return 0x82230B88;
		  /* 82230B88h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230B88h case   13:*/		if ( 1 ) { regs.LR = 0x82230B8C; return (uint32)regs.CTR; }
		/* 82230B88h case   13:*/		return 0x82230B8C;
	}
	return 0x82230B8C;
} // Block from 82230B54h-82230B8Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230B8C);
		  /* 82230B8Ch */ case    0:  		/* li R3, 1 */
		/* 82230B8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230B8Ch case    0:*/		return 0x82230B90;
		  /* 82230B90h */ case    1:  		/* b 92 */
		/* 82230B90h case    1:*/		return 0x82230BEC;
		/* 82230B90h case    1:*/		return 0x82230B94;
	}
	return 0x82230B94;
} // Block from 82230B8Ch-82230B94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230B94);
		  /* 82230B94h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230B94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230B94h case    0:*/		return 0x82230B98;
		  /* 82230B98h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230B98h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230BB0;  }
		/* 82230B98h case    1:*/		return 0x82230B9C;
		  /* 82230B9Ch */ case    2:  		/* li R6, 0 */
		/* 82230B9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230B9Ch case    2:*/		return 0x82230BA0;
		  /* 82230BA0h */ case    3:  		/* li R5, 0 */
		/* 82230BA0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230BA0h case    3:*/		return 0x82230BA4;
		  /* 82230BA4h */ case    4:  		/* li R4, 40 */
		/* 82230BA4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 82230BA4h case    4:*/		return 0x82230BA8;
		  /* 82230BA8h */ case    5:  		/* mr R3, R30 */
		/* 82230BA8h case    5:*/		regs.R3 = regs.R30;
		/* 82230BA8h case    5:*/		return 0x82230BAC;
		  /* 82230BACh */ case    6:  		/* bl -864268 */
		/* 82230BACh case    6:*/		regs.LR = 0x82230BB0; return 0x8215DBA0;
		/* 82230BACh case    6:*/		return 0x82230BB0;
	}
	return 0x82230BB0;
} // Block from 82230B94h-82230BB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230BB0);
		  /* 82230BB0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230BB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230BB0h case    0:*/		return 0x82230BB4;
		  /* 82230BB4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230BB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230BE8;  }
		/* 82230BB4h case    1:*/		return 0x82230BB8;
	}
	return 0x82230BB8;
} // Block from 82230BB0h-82230BB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230BB8h
// Function '?CompileWithFogBlendInRB@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230BB8);
		  /* 82230BB8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82230BB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230BB8h case    0:*/		return 0x82230BBC;
		  /* 82230BBCh */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 82230BBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82230BE8;  }
		/* 82230BBCh case    1:*/		return 0x82230BC0;
		  /* 82230BC0h */ case    2:  		/* lis R11, -32216 */
		/* 82230BC0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230BC0h case    2:*/		return 0x82230BC4;
		  /* 82230BC4h */ case    3:  		/* mtspr CTR, R29 */
		/* 82230BC4h case    3:*/		regs.CTR = regs.R29;
		/* 82230BC4h case    3:*/		return 0x82230BC8;
		  /* 82230BC8h */ case    4:  		/* lis R10, -32252 */
		/* 82230BC8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230BC8h case    4:*/		return 0x82230BCC;
		  /* 82230BCCh */ case    5:  		/* addi R11, R11, 11160 */
		/* 82230BCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230BCCh case    5:*/		return 0x82230BD0;
		  /* 82230BD0h */ case    6:  		/* addi R4, R10, 4320 */
		/* 82230BD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230BD0h case    6:*/		return 0x82230BD4;
		  /* 82230BD4h */ case    7:  		/* li R7, 0 */
		/* 82230BD4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230BD4h case    7:*/		return 0x82230BD8;
		  /* 82230BD8h */ case    8:  		/* li R6, 92 */
		/* 82230BD8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x5C);
		/* 82230BD8h case    8:*/		return 0x82230BDC;
		  /* 82230BDCh */ case    9:  		/* mr R3, R28 */
		/* 82230BDCh case    9:*/		regs.R3 = regs.R28;
		/* 82230BDCh case    9:*/		return 0x82230BE0;
		  /* 82230BE0h */ case   10:  		/* lwz R5, <#[R11 + 368]> */
		/* 82230BE0h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000170) );
		/* 82230BE0h case   10:*/		return 0x82230BE4;
		  /* 82230BE4h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82230BE4h case   11:*/		if ( 1 ) { regs.LR = 0x82230BE8; return (uint32)regs.CTR; }
		/* 82230BE4h case   11:*/		return 0x82230BE8;
	}
	return 0x82230BE8;
} // Block from 82230BB8h-82230BE8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230BE8);
		  /* 82230BE8h */ case    0:  		/* li R3, 0 */
		/* 82230BE8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230BE8h case    0:*/		return 0x82230BEC;
	}
	return 0x82230BEC;
} // Block from 82230BE8h-82230BECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230BEC);
		  /* 82230BECh */ case    0:  		/* addi R1, R1, 128 */
		/* 82230BECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230BECh case    0:*/		return 0x82230BF0;
		  /* 82230BF0h */ case    1:  		/* b -1702216 */
		/* 82230BF0h case    1:*/		return 0x820912A8;
		/* 82230BF0h case    1:*/		return 0x82230BF4;
		  /* 82230BF4h */ case    2:  		/* nop */
		/* 82230BF4h case    2:*/		cpu::op::nop();
		/* 82230BF4h case    2:*/		return 0x82230BF8;
	}
	return 0x82230BF8;
} // Block from 82230BECh-82230BF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230BF8);
		  /* 82230BF8h */ case    0:  		/* mfspr R12, LR */
		/* 82230BF8h case    0:*/		regs.R12 = regs.LR;
		/* 82230BF8h case    0:*/		return 0x82230BFC;
		  /* 82230BFCh */ case    1:  		/* bl -1702308 */
		/* 82230BFCh case    1:*/		regs.LR = 0x82230C00; return 0x82091258;
		/* 82230BFCh case    1:*/		return 0x82230C00;
		  /* 82230C00h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230C00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230C00h case    2:*/		return 0x82230C04;
		  /* 82230C04h */ case    3:  		/* mr R31, R3 */
		/* 82230C04h case    3:*/		regs.R31 = regs.R3;
		/* 82230C04h case    3:*/		return 0x82230C08;
		  /* 82230C08h */ case    4:  		/* mr R30, R5 */
		/* 82230C08h case    4:*/		regs.R30 = regs.R5;
		/* 82230C08h case    4:*/		return 0x82230C0C;
		  /* 82230C0Ch */ case    5:  		/* mr R29, R6 */
		/* 82230C0Ch case    5:*/		regs.R29 = regs.R6;
		/* 82230C0Ch case    5:*/		return 0x82230C10;
		  /* 82230C10h */ case    6:  		/* mr R28, R7 */
		/* 82230C10h case    6:*/		regs.R28 = regs.R7;
		/* 82230C10h case    6:*/		return 0x82230C14;
		  /* 82230C14h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82230C14h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82230C14h case    7:*/		return 0x82230C18;
		  /* 82230C18h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230C18h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230C3C;  }
		/* 82230C18h case    8:*/		return 0x82230C1C;
		  /* 82230C1Ch */ case    9:  		/* lis R11, -32252 */
		/* 82230C1Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230C1Ch case    9:*/		return 0x82230C20;
		  /* 82230C20h */ case   10:  		/* lis R10, -32253 */
		/* 82230C20h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230C20h case   10:*/		return 0x82230C24;
		  /* 82230C24h */ case   11:  		/* lis R9, -32253 */
		/* 82230C24h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82230C24h case   11:*/		return 0x82230C28;
		  /* 82230C28h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82230C28h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82230C28h case   12:*/		return 0x82230C2C;
		  /* 82230C2Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 82230C2Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82230C2Ch case   13:*/		return 0x82230C30;
		  /* 82230C30h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82230C30h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230C30h case   14:*/		return 0x82230C34;
		  /* 82230C34h */ case   15:  		/* li R7, 1471 */
		/* 82230C34h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x5BF);
		/* 82230C34h case   15:*/		return 0x82230C38;
		  /* 82230C38h */ case   16:  		/* bl -888880 */
		/* 82230C38h case   16:*/		regs.LR = 0x82230C3C; return 0x82157C08;
		/* 82230C38h case   16:*/		return 0x82230C3C;
	}
	return 0x82230C3C;
} // Block from 82230BF8h-82230C3Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82230C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230C3C);
		  /* 82230C3Ch */ case    0:  		/* li R4, 165 */
		/* 82230C3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 82230C3Ch case    0:*/		return 0x82230C40;
		  /* 82230C40h */ case    1:  		/* mr R3, R31 */
		/* 82230C40h case    1:*/		regs.R3 = regs.R31;
		/* 82230C40h case    1:*/		return 0x82230C44;
		  /* 82230C44h */ case    2:  		/* bl -866100 */
		/* 82230C44h case    2:*/		regs.LR = 0x82230C48; return 0x8215D510;
		/* 82230C44h case    2:*/		return 0x82230C48;
	}
	return 0x82230C48;
} // Block from 82230C3Ch-82230C48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230C48h
// Function '?CompileWithBorderColor@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230C48);
		  /* 82230C48h */ case    0:  		/* cmplwi CR6, R3, 3 */
		/* 82230C48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 82230C48h case    0:*/		return 0x82230C4C;
		  /* 82230C4Ch */ case    1:  		/* bc 4, CR6_EQ, 96 */
		/* 82230C4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82230CAC;  }
		/* 82230C4Ch case    1:*/		return 0x82230C50;
		  /* 82230C50h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82230C50h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230C50h case    2:*/		return 0x82230C54;
		  /* 82230C54h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 82230C54h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230C6C;  }
		/* 82230C54h case    3:*/		return 0x82230C58;
		  /* 82230C58h */ case    4:  		/* li R6, 1 */
		/* 82230C58h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230C58h case    4:*/		return 0x82230C5C;
		  /* 82230C5Ch */ case    5:  		/* li R5, 0 */
		/* 82230C5Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230C5Ch case    5:*/		return 0x82230C60;
		  /* 82230C60h */ case    6:  		/* li R4, 15 */
		/* 82230C60h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 82230C60h case    6:*/		return 0x82230C64;
		  /* 82230C64h */ case    7:  		/* mr R3, R30 */
		/* 82230C64h case    7:*/		regs.R3 = regs.R30;
		/* 82230C64h case    7:*/		return 0x82230C68;
		  /* 82230C68h */ case    8:  		/* bl -864456 */
		/* 82230C68h case    8:*/		regs.LR = 0x82230C6C; return 0x8215DBA0;
		/* 82230C68h case    8:*/		return 0x82230C6C;
	}
	return 0x82230C6C;
} // Block from 82230C48h-82230C6Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82230C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230C6C);
		  /* 82230C6Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230C6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230C6Ch case    0:*/		return 0x82230C70;
		  /* 82230C70h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230C70h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230CA4;  }
		/* 82230C70h case    1:*/		return 0x82230C74;
		  /* 82230C74h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230C74h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230C74h case    2:*/		return 0x82230C78;
		  /* 82230C78h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230C78h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230CA4;  }
		/* 82230C78h case    3:*/		return 0x82230C7C;
		  /* 82230C7Ch */ case    4:  		/* lis R11, -32216 */
		/* 82230C7Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230C7Ch case    4:*/		return 0x82230C80;
		  /* 82230C80h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230C80h case    5:*/		regs.CTR = regs.R29;
		/* 82230C80h case    5:*/		return 0x82230C84;
		  /* 82230C84h */ case    6:  		/* lis R10, -32252 */
		/* 82230C84h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230C84h case    6:*/		return 0x82230C88;
		  /* 82230C88h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230C88h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230C88h case    7:*/		return 0x82230C8C;
		  /* 82230C8Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230C8Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230C8Ch case    8:*/		return 0x82230C90;
		  /* 82230C90h */ case    9:  		/* li R7, 1 */
		/* 82230C90h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230C90h case    9:*/		return 0x82230C94;
		  /* 82230C94h */ case   10:  		/* li R6, 21 */
		/* 82230C94h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x15);
		/* 82230C94h case   10:*/		return 0x82230C98;
		  /* 82230C98h */ case   11:  		/* mr R3, R28 */
		/* 82230C98h case   11:*/		regs.R3 = regs.R28;
		/* 82230C98h case   11:*/		return 0x82230C9C;
		  /* 82230C9Ch */ case   12:  		/* lwz R5, <#[R11 + 84]> */
		/* 82230C9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000054) );
		/* 82230C9Ch case   12:*/		return 0x82230CA0;
		  /* 82230CA0h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230CA0h case   13:*/		if ( 1 ) { regs.LR = 0x82230CA4; return (uint32)regs.CTR; }
		/* 82230CA0h case   13:*/		return 0x82230CA4;
	}
	return 0x82230CA4;
} // Block from 82230C6Ch-82230CA4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230CA4);
		  /* 82230CA4h */ case    0:  		/* li R3, 1 */
		/* 82230CA4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230CA4h case    0:*/		return 0x82230CA8;
		  /* 82230CA8h */ case    1:  		/* b 92 */
		/* 82230CA8h case    1:*/		return 0x82230D04;
		/* 82230CA8h case    1:*/		return 0x82230CAC;
	}
	return 0x82230CAC;
} // Block from 82230CA4h-82230CACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230CAC);
		  /* 82230CACh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230CACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230CACh case    0:*/		return 0x82230CB0;
		  /* 82230CB0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230CB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230CC8;  }
		/* 82230CB0h case    1:*/		return 0x82230CB4;
		  /* 82230CB4h */ case    2:  		/* li R6, 0 */
		/* 82230CB4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230CB4h case    2:*/		return 0x82230CB8;
		  /* 82230CB8h */ case    3:  		/* li R5, 0 */
		/* 82230CB8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230CB8h case    3:*/		return 0x82230CBC;
		  /* 82230CBCh */ case    4:  		/* li R4, 15 */
		/* 82230CBCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 82230CBCh case    4:*/		return 0x82230CC0;
		  /* 82230CC0h */ case    5:  		/* mr R3, R30 */
		/* 82230CC0h case    5:*/		regs.R3 = regs.R30;
		/* 82230CC0h case    5:*/		return 0x82230CC4;
		  /* 82230CC4h */ case    6:  		/* bl -864548 */
		/* 82230CC4h case    6:*/		regs.LR = 0x82230CC8; return 0x8215DBA0;
		/* 82230CC4h case    6:*/		return 0x82230CC8;
	}
	return 0x82230CC8;
} // Block from 82230CACh-82230CC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230CC8h
// Function '?CompileWithLodClampEnable@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230CC8);
		  /* 82230CC8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230CC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230CC8h case    0:*/		return 0x82230CCC;
		  /* 82230CCCh */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230CCCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82230D00;  }
		/* 82230CCCh case    1:*/		return 0x82230CD0;
		  /* 82230CD0h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230CD0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230CD0h case    2:*/		return 0x82230CD4;
		  /* 82230CD4h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230CD4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230D00;  }
		/* 82230CD4h case    3:*/		return 0x82230CD8;
		  /* 82230CD8h */ case    4:  		/* lis R11, -32216 */
		/* 82230CD8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230CD8h case    4:*/		return 0x82230CDC;
		  /* 82230CDCh */ case    5:  		/* mtspr CTR, R29 */
		/* 82230CDCh case    5:*/		regs.CTR = regs.R29;
		/* 82230CDCh case    5:*/		return 0x82230CE0;
		  /* 82230CE0h */ case    6:  		/* lis R10, -32252 */
		/* 82230CE0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230CE0h case    6:*/		return 0x82230CE4;
		  /* 82230CE4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230CE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230CE4h case    7:*/		return 0x82230CE8;
		  /* 82230CE8h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230CE8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230CE8h case    8:*/		return 0x82230CEC;
		  /* 82230CECh */ case    9:  		/* li R7, 0 */
		/* 82230CECh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230CECh case    9:*/		return 0x82230CF0;
		  /* 82230CF0h */ case   10:  		/* li R6, 21 */
		/* 82230CF0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x15);
		/* 82230CF0h case   10:*/		return 0x82230CF4;
		  /* 82230CF4h */ case   11:  		/* mr R3, R28 */
		/* 82230CF4h case   11:*/		regs.R3 = regs.R28;
		/* 82230CF4h case   11:*/		return 0x82230CF8;
		  /* 82230CF8h */ case   12:  		/* lwz R5, <#[R11 + 84]> */
		/* 82230CF8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000054) );
		/* 82230CF8h case   12:*/		return 0x82230CFC;
		  /* 82230CFCh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230CFCh case   13:*/		if ( 1 ) { regs.LR = 0x82230D00; return (uint32)regs.CTR; }
		/* 82230CFCh case   13:*/		return 0x82230D00;
	}
	return 0x82230D00;
} // Block from 82230CC8h-82230D00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230D00);
		  /* 82230D00h */ case    0:  		/* li R3, 0 */
		/* 82230D00h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230D00h case    0:*/		return 0x82230D04;
	}
	return 0x82230D04;
} // Block from 82230D00h-82230D04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230D04);
		  /* 82230D04h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230D04h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230D04h case    0:*/		return 0x82230D08;
		  /* 82230D08h */ case    1:  		/* b -1702496 */
		/* 82230D08h case    1:*/		return 0x820912A8;
		/* 82230D08h case    1:*/		return 0x82230D0C;
		  /* 82230D0Ch */ case    2:  		/* nop */
		/* 82230D0Ch case    2:*/		cpu::op::nop();
		/* 82230D0Ch case    2:*/		return 0x82230D10;
	}
	return 0x82230D10;
} // Block from 82230D04h-82230D10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230D10);
		  /* 82230D10h */ case    0:  		/* mfspr R12, LR */
		/* 82230D10h case    0:*/		regs.R12 = regs.LR;
		/* 82230D10h case    0:*/		return 0x82230D14;
		  /* 82230D14h */ case    1:  		/* bl -1702588 */
		/* 82230D14h case    1:*/		regs.LR = 0x82230D18; return 0x82091258;
		/* 82230D14h case    1:*/		return 0x82230D18;
		  /* 82230D18h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230D18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230D18h case    2:*/		return 0x82230D1C;
		  /* 82230D1Ch */ case    3:  		/* mr R31, R3 */
		/* 82230D1Ch case    3:*/		regs.R31 = regs.R3;
		/* 82230D1Ch case    3:*/		return 0x82230D20;
		  /* 82230D20h */ case    4:  		/* mr R30, R5 */
		/* 82230D20h case    4:*/		regs.R30 = regs.R5;
		/* 82230D20h case    4:*/		return 0x82230D24;
		  /* 82230D24h */ case    5:  		/* mr R29, R6 */
		/* 82230D24h case    5:*/		regs.R29 = regs.R6;
		/* 82230D24h case    5:*/		return 0x82230D28;
		  /* 82230D28h */ case    6:  		/* mr R28, R7 */
		/* 82230D28h case    6:*/		regs.R28 = regs.R7;
		/* 82230D28h case    6:*/		return 0x82230D2C;
		  /* 82230D2Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82230D2Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82230D2Ch case    7:*/		return 0x82230D30;
		  /* 82230D30h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230D30h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230D54;  }
		/* 82230D30h case    8:*/		return 0x82230D34;
		  /* 82230D34h */ case    9:  		/* lis R11, -32252 */
		/* 82230D34h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230D34h case    9:*/		return 0x82230D38;
		  /* 82230D38h */ case   10:  		/* lis R10, -32253 */
		/* 82230D38h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230D38h case   10:*/		return 0x82230D3C;
		  /* 82230D3Ch */ case   11:  		/* lis R9, -32253 */
		/* 82230D3Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82230D3Ch case   11:*/		return 0x82230D40;
		  /* 82230D40h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82230D40h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82230D40h case   12:*/		return 0x82230D44;
		  /* 82230D44h */ case   13:  		/* addi R5, R10, 27792 */
		/* 82230D44h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82230D44h case   13:*/		return 0x82230D48;
		  /* 82230D48h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82230D48h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230D48h case   14:*/		return 0x82230D4C;
		  /* 82230D4Ch */ case   15:  		/* li R7, 1521 */
		/* 82230D4Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x5F1);
		/* 82230D4Ch case   15:*/		return 0x82230D50;
		  /* 82230D50h */ case   16:  		/* bl -889160 */
		/* 82230D50h case   16:*/		regs.LR = 0x82230D54; return 0x82157C08;
		/* 82230D50h case   16:*/		return 0x82230D54;
	}
	return 0x82230D54;
} // Block from 82230D10h-82230D54h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82230D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230D54);
		  /* 82230D54h */ case    0:  		/* li R4, 165 */
		/* 82230D54h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 82230D54h case    0:*/		return 0x82230D58;
		  /* 82230D58h */ case    1:  		/* mr R3, R31 */
		/* 82230D58h case    1:*/		regs.R3 = regs.R31;
		/* 82230D58h case    1:*/		return 0x82230D5C;
		  /* 82230D5Ch */ case    2:  		/* bl -866380 */
		/* 82230D5Ch case    2:*/		regs.LR = 0x82230D60; return 0x8215D510;
		/* 82230D5Ch case    2:*/		return 0x82230D60;
		  /* 82230D60h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82230D60h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82230D60h case    3:*/		return 0x82230D64;
		  /* 82230D64h */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82230D64h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82230DC4;  }
		/* 82230D64h case    4:*/		return 0x82230D68;
		  /* 82230D68h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82230D68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230D68h case    5:*/		return 0x82230D6C;
		  /* 82230D6Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82230D6Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82230D84;  }
		/* 82230D6Ch case    6:*/		return 0x82230D70;
	}
	return 0x82230D70;
} // Block from 82230D54h-82230D70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230D70h
// Function '?CompileWithTextureDimensionCube@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230D70);
		  /* 82230D70h */ case    0:  		/* li R6, 1 */
		/* 82230D70h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230D70h case    0:*/		return 0x82230D74;
		  /* 82230D74h */ case    1:  		/* li R5, 0 */
		/* 82230D74h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230D74h case    1:*/		return 0x82230D78;
		  /* 82230D78h */ case    2:  		/* li R4, 16 */
		/* 82230D78h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82230D78h case    2:*/		return 0x82230D7C;
		  /* 82230D7Ch */ case    3:  		/* mr R3, R30 */
		/* 82230D7Ch case    3:*/		regs.R3 = regs.R30;
		/* 82230D7Ch case    3:*/		return 0x82230D80;
		  /* 82230D80h */ case    4:  		/* bl -864736 */
		/* 82230D80h case    4:*/		regs.LR = 0x82230D84; return 0x8215DBA0;
		/* 82230D80h case    4:*/		return 0x82230D84;
	}
	return 0x82230D84;
} // Block from 82230D70h-82230D84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82230D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230D84);
		  /* 82230D84h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230D84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230D84h case    0:*/		return 0x82230D88;
		  /* 82230D88h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230D88h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230DBC;  }
		/* 82230D88h case    1:*/		return 0x82230D8C;
		  /* 82230D8Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230D8Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230D8Ch case    2:*/		return 0x82230D90;
		  /* 82230D90h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230D90h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230DBC;  }
		/* 82230D90h case    3:*/		return 0x82230D94;
		  /* 82230D94h */ case    4:  		/* lis R11, -32216 */
		/* 82230D94h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230D94h case    4:*/		return 0x82230D98;
		  /* 82230D98h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230D98h case    5:*/		regs.CTR = regs.R29;
		/* 82230D98h case    5:*/		return 0x82230D9C;
		  /* 82230D9Ch */ case    6:  		/* lis R10, -32252 */
		/* 82230D9Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230D9Ch case    6:*/		return 0x82230DA0;
		  /* 82230DA0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230DA0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230DA0h case    7:*/		return 0x82230DA4;
		  /* 82230DA4h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230DA4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230DA4h case    8:*/		return 0x82230DA8;
		  /* 82230DA8h */ case    9:  		/* li R7, 1 */
		/* 82230DA8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230DA8h case    9:*/		return 0x82230DAC;
		  /* 82230DACh */ case   10:  		/* li R6, 22 */
		/* 82230DACh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x16);
		/* 82230DACh case   10:*/		return 0x82230DB0;
		  /* 82230DB0h */ case   11:  		/* mr R3, R28 */
		/* 82230DB0h case   11:*/		regs.R3 = regs.R28;
		/* 82230DB0h case   11:*/		return 0x82230DB4;
		  /* 82230DB4h */ case   12:  		/* lwz R5, <#[R11 + 88]> */
		/* 82230DB4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000058) );
		/* 82230DB4h case   12:*/		return 0x82230DB8;
		  /* 82230DB8h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230DB8h case   13:*/		if ( 1 ) { regs.LR = 0x82230DBC; return (uint32)regs.CTR; }
		/* 82230DB8h case   13:*/		return 0x82230DBC;
	}
	return 0x82230DBC;
} // Block from 82230D84h-82230DBCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230DBC);
		  /* 82230DBCh */ case    0:  		/* li R3, 1 */
		/* 82230DBCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230DBCh case    0:*/		return 0x82230DC0;
		  /* 82230DC0h */ case    1:  		/* b 92 */
		/* 82230DC0h case    1:*/		return 0x82230E1C;
		/* 82230DC0h case    1:*/		return 0x82230DC4;
	}
	return 0x82230DC4;
} // Block from 82230DBCh-82230DC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230DC4);
		  /* 82230DC4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230DC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230DC4h case    0:*/		return 0x82230DC8;
		  /* 82230DC8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230DC8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230DE0;  }
		/* 82230DC8h case    1:*/		return 0x82230DCC;
		  /* 82230DCCh */ case    2:  		/* li R6, 0 */
		/* 82230DCCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230DCCh case    2:*/		return 0x82230DD0;
		  /* 82230DD0h */ case    3:  		/* li R5, 0 */
		/* 82230DD0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230DD0h case    3:*/		return 0x82230DD4;
		  /* 82230DD4h */ case    4:  		/* li R4, 16 */
		/* 82230DD4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82230DD4h case    4:*/		return 0x82230DD8;
		  /* 82230DD8h */ case    5:  		/* mr R3, R30 */
		/* 82230DD8h case    5:*/		regs.R3 = regs.R30;
		/* 82230DD8h case    5:*/		return 0x82230DDC;
		  /* 82230DDCh */ case    6:  		/* bl -864828 */
		/* 82230DDCh case    6:*/		regs.LR = 0x82230DE0; return 0x8215DBA0;
		/* 82230DDCh case    6:*/		return 0x82230DE0;
	}
	return 0x82230DE0;
} // Block from 82230DC4h-82230DE0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230DE0);
		  /* 82230DE0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230DE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230DE0h case    0:*/		return 0x82230DE4;
		  /* 82230DE4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230DE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230E18;  }
		/* 82230DE4h case    1:*/		return 0x82230DE8;
		  /* 82230DE8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230DE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230DE8h case    2:*/		return 0x82230DEC;
		  /* 82230DECh */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230DECh case    3:*/		if ( regs.CR[6].eq ) { return 0x82230E18;  }
		/* 82230DECh case    3:*/		return 0x82230DF0;
		  /* 82230DF0h */ case    4:  		/* lis R11, -32216 */
		/* 82230DF0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230DF0h case    4:*/		return 0x82230DF4;
		  /* 82230DF4h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230DF4h case    5:*/		regs.CTR = regs.R29;
		/* 82230DF4h case    5:*/		return 0x82230DF8;
		  /* 82230DF8h */ case    6:  		/* lis R10, -32252 */
		/* 82230DF8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230DF8h case    6:*/		return 0x82230DFC;
		  /* 82230DFCh */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230DFCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230DFCh case    7:*/		return 0x82230E00;
		  /* 82230E00h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230E00h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230E00h case    8:*/		return 0x82230E04;
		  /* 82230E04h */ case    9:  		/* li R7, 0 */
		/* 82230E04h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230E04h case    9:*/		return 0x82230E08;
		  /* 82230E08h */ case   10:  		/* li R6, 22 */
		/* 82230E08h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x16);
		/* 82230E08h case   10:*/		return 0x82230E0C;
		  /* 82230E0Ch */ case   11:  		/* mr R3, R28 */
		/* 82230E0Ch case   11:*/		regs.R3 = regs.R28;
		/* 82230E0Ch case   11:*/		return 0x82230E10;
		  /* 82230E10h */ case   12:  		/* lwz R5, <#[R11 + 88]> */
		/* 82230E10h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000058) );
		/* 82230E10h case   12:*/		return 0x82230E14;
		  /* 82230E14h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230E14h case   13:*/		if ( 1 ) { regs.LR = 0x82230E18; return (uint32)regs.CTR; }
		/* 82230E14h case   13:*/		return 0x82230E18;
	}
	return 0x82230E18;
} // Block from 82230DE0h-82230E18h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230E18);
		  /* 82230E18h */ case    0:  		/* li R3, 0 */
		/* 82230E18h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230E18h case    0:*/		return 0x82230E1C;
	}
	return 0x82230E1C;
} // Block from 82230E18h-82230E1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230E1C);
		  /* 82230E1Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82230E1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230E1Ch case    0:*/		return 0x82230E20;
		  /* 82230E20h */ case    1:  		/* b -1702776 */
		/* 82230E20h case    1:*/		return 0x820912A8;
		/* 82230E20h case    1:*/		return 0x82230E24;
		  /* 82230E24h */ case    2:  		/* nop */
		/* 82230E24h case    2:*/		cpu::op::nop();
		/* 82230E24h case    2:*/		return 0x82230E28;
	}
	return 0x82230E28;
} // Block from 82230E1Ch-82230E28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230E28);
		  /* 82230E28h */ case    0:  		/* mfspr R12, LR */
		/* 82230E28h case    0:*/		regs.R12 = regs.LR;
		/* 82230E28h case    0:*/		return 0x82230E2C;
		  /* 82230E2Ch */ case    1:  		/* bl -1702868 */
		/* 82230E2Ch case    1:*/		regs.LR = 0x82230E30; return 0x82091258;
		/* 82230E2Ch case    1:*/		return 0x82230E30;
		  /* 82230E30h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230E30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230E30h case    2:*/		return 0x82230E34;
		  /* 82230E34h */ case    3:  		/* mr R31, R3 */
		/* 82230E34h case    3:*/		regs.R31 = regs.R3;
		/* 82230E34h case    3:*/		return 0x82230E38;
		  /* 82230E38h */ case    4:  		/* mr R30, R5 */
		/* 82230E38h case    4:*/		regs.R30 = regs.R5;
		/* 82230E38h case    4:*/		return 0x82230E3C;
		  /* 82230E3Ch */ case    5:  		/* mr R29, R6 */
		/* 82230E3Ch case    5:*/		regs.R29 = regs.R6;
		/* 82230E3Ch case    5:*/		return 0x82230E40;
		  /* 82230E40h */ case    6:  		/* mr R28, R7 */
		/* 82230E40h case    6:*/		regs.R28 = regs.R7;
		/* 82230E40h case    6:*/		return 0x82230E44;
		  /* 82230E44h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82230E44h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82230E44h case    7:*/		return 0x82230E48;
		  /* 82230E48h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230E48h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230E6C;  }
		/* 82230E48h case    8:*/		return 0x82230E4C;
		  /* 82230E4Ch */ case    9:  		/* lis R11, -32252 */
		/* 82230E4Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230E4Ch case    9:*/		return 0x82230E50;
		  /* 82230E50h */ case   10:  		/* lis R10, -32253 */
		/* 82230E50h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230E50h case   10:*/		return 0x82230E54;
		  /* 82230E54h */ case   11:  		/* lis R9, -32253 */
		/* 82230E54h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82230E54h case   11:*/		return 0x82230E58;
		  /* 82230E58h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82230E58h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82230E58h case   12:*/		return 0x82230E5C;
		  /* 82230E5Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 82230E5Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82230E5Ch case   13:*/		return 0x82230E60;
		  /* 82230E60h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82230E60h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230E60h case   14:*/		return 0x82230E64;
		  /* 82230E64h */ case   15:  		/* li R7, 1571 */
		/* 82230E64h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x623);
		/* 82230E64h case   15:*/		return 0x82230E68;
	}
	return 0x82230E68;
} // Block from 82230E28h-82230E68h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82230E68h
// Function '?CompileWithPixelFog@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230E68);
		  /* 82230E68h */ case    0:  		/* bl -889440 */
		/* 82230E68h case    0:*/		regs.LR = 0x82230E6C; return 0x82157C08;
		/* 82230E68h case    0:*/		return 0x82230E6C;
	}
	return 0x82230E6C;
} // Block from 82230E68h-82230E6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230E6C);
		  /* 82230E6Ch */ case    0:  		/* li R4, 165 */
		/* 82230E6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 82230E6Ch case    0:*/		return 0x82230E70;
		  /* 82230E70h */ case    1:  		/* mr R3, R31 */
		/* 82230E70h case    1:*/		regs.R3 = regs.R31;
		/* 82230E70h case    1:*/		return 0x82230E74;
		  /* 82230E74h */ case    2:  		/* bl -866660 */
		/* 82230E74h case    2:*/		regs.LR = 0x82230E78; return 0x8215D510;
		/* 82230E74h case    2:*/		return 0x82230E78;
		  /* 82230E78h */ case    3:  		/* cmplwi CR6, R3, 2 */
		/* 82230E78h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 82230E78h case    3:*/		return 0x82230E7C;
		  /* 82230E7Ch */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82230E7Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82230EDC;  }
		/* 82230E7Ch case    4:*/		return 0x82230E80;
		  /* 82230E80h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82230E80h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230E80h case    5:*/		return 0x82230E84;
		  /* 82230E84h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82230E84h case    6:*/		if ( regs.CR[6].eq ) { return 0x82230E9C;  }
		/* 82230E84h case    6:*/		return 0x82230E88;
		  /* 82230E88h */ case    7:  		/* li R6, 1 */
		/* 82230E88h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230E88h case    7:*/		return 0x82230E8C;
		  /* 82230E8Ch */ case    8:  		/* li R5, 0 */
		/* 82230E8Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230E8Ch case    8:*/		return 0x82230E90;
		  /* 82230E90h */ case    9:  		/* li R4, 17 */
		/* 82230E90h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 82230E90h case    9:*/		return 0x82230E94;
		  /* 82230E94h */ case   10:  		/* mr R3, R30 */
		/* 82230E94h case   10:*/		regs.R3 = regs.R30;
		/* 82230E94h case   10:*/		return 0x82230E98;
		  /* 82230E98h */ case   11:  		/* bl -865016 */
		/* 82230E98h case   11:*/		regs.LR = 0x82230E9C; return 0x8215DBA0;
		/* 82230E98h case   11:*/		return 0x82230E9C;
	}
	return 0x82230E9C;
} // Block from 82230E6Ch-82230E9Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82230E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230E9C);
		  /* 82230E9Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230E9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230E9Ch case    0:*/		return 0x82230EA0;
		  /* 82230EA0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230EA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230ED4;  }
		/* 82230EA0h case    1:*/		return 0x82230EA4;
		  /* 82230EA4h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230EA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230EA4h case    2:*/		return 0x82230EA8;
		  /* 82230EA8h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230EA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230ED4;  }
		/* 82230EA8h case    3:*/		return 0x82230EAC;
		  /* 82230EACh */ case    4:  		/* lis R11, -32216 */
		/* 82230EACh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230EACh case    4:*/		return 0x82230EB0;
		  /* 82230EB0h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230EB0h case    5:*/		regs.CTR = regs.R29;
		/* 82230EB0h case    5:*/		return 0x82230EB4;
		  /* 82230EB4h */ case    6:  		/* lis R10, -32252 */
		/* 82230EB4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230EB4h case    6:*/		return 0x82230EB8;
		  /* 82230EB8h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230EB8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230EB8h case    7:*/		return 0x82230EBC;
		  /* 82230EBCh */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230EBCh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230EBCh case    8:*/		return 0x82230EC0;
		  /* 82230EC0h */ case    9:  		/* li R7, 1 */
		/* 82230EC0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230EC0h case    9:*/		return 0x82230EC4;
		  /* 82230EC4h */ case   10:  		/* li R6, 23 */
		/* 82230EC4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x17);
		/* 82230EC4h case   10:*/		return 0x82230EC8;
		  /* 82230EC8h */ case   11:  		/* mr R3, R28 */
		/* 82230EC8h case   11:*/		regs.R3 = regs.R28;
		/* 82230EC8h case   11:*/		return 0x82230ECC;
		  /* 82230ECCh */ case   12:  		/* lwz R5, <#[R11 + 92]> */
		/* 82230ECCh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000005C) );
		/* 82230ECCh case   12:*/		return 0x82230ED0;
		  /* 82230ED0h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230ED0h case   13:*/		if ( 1 ) { regs.LR = 0x82230ED4; return (uint32)regs.CTR; }
		/* 82230ED0h case   13:*/		return 0x82230ED4;
	}
	return 0x82230ED4;
} // Block from 82230E9Ch-82230ED4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230ED4);
		  /* 82230ED4h */ case    0:  		/* li R3, 1 */
		/* 82230ED4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230ED4h case    0:*/		return 0x82230ED8;
		  /* 82230ED8h */ case    1:  		/* b 92 */
		/* 82230ED8h case    1:*/		return 0x82230F34;
		/* 82230ED8h case    1:*/		return 0x82230EDC;
	}
	return 0x82230EDC;
} // Block from 82230ED4h-82230EDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230EDC);
		  /* 82230EDCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230EDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230EDCh case    0:*/		return 0x82230EE0;
		  /* 82230EE0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230EE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230EF8;  }
		/* 82230EE0h case    1:*/		return 0x82230EE4;
		  /* 82230EE4h */ case    2:  		/* li R6, 0 */
		/* 82230EE4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230EE4h case    2:*/		return 0x82230EE8;
		  /* 82230EE8h */ case    3:  		/* li R5, 0 */
		/* 82230EE8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230EE8h case    3:*/		return 0x82230EEC;
		  /* 82230EECh */ case    4:  		/* li R4, 17 */
		/* 82230EECh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 82230EECh case    4:*/		return 0x82230EF0;
		  /* 82230EF0h */ case    5:  		/* mr R3, R30 */
		/* 82230EF0h case    5:*/		regs.R3 = regs.R30;
		/* 82230EF0h case    5:*/		return 0x82230EF4;
		  /* 82230EF4h */ case    6:  		/* bl -865108 */
		/* 82230EF4h case    6:*/		regs.LR = 0x82230EF8; return 0x8215DBA0;
		/* 82230EF4h case    6:*/		return 0x82230EF8;
	}
	return 0x82230EF8;
} // Block from 82230EDCh-82230EF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230EF8);
		  /* 82230EF8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230EF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230EF8h case    0:*/		return 0x82230EFC;
		  /* 82230EFCh */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230EFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82230F30;  }
		/* 82230EFCh case    1:*/		return 0x82230F00;
		  /* 82230F00h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230F00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230F00h case    2:*/		return 0x82230F04;
		  /* 82230F04h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230F04h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230F30;  }
		/* 82230F04h case    3:*/		return 0x82230F08;
		  /* 82230F08h */ case    4:  		/* lis R11, -32216 */
		/* 82230F08h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230F08h case    4:*/		return 0x82230F0C;
		  /* 82230F0Ch */ case    5:  		/* mtspr CTR, R29 */
		/* 82230F0Ch case    5:*/		regs.CTR = regs.R29;
		/* 82230F0Ch case    5:*/		return 0x82230F10;
		  /* 82230F10h */ case    6:  		/* lis R10, -32252 */
		/* 82230F10h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230F10h case    6:*/		return 0x82230F14;
		  /* 82230F14h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230F14h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230F14h case    7:*/		return 0x82230F18;
		  /* 82230F18h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230F18h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230F18h case    8:*/		return 0x82230F1C;
		  /* 82230F1Ch */ case    9:  		/* li R7, 0 */
		/* 82230F1Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82230F1Ch case    9:*/		return 0x82230F20;
		  /* 82230F20h */ case   10:  		/* li R6, 23 */
		/* 82230F20h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x17);
		/* 82230F20h case   10:*/		return 0x82230F24;
		  /* 82230F24h */ case   11:  		/* mr R3, R28 */
		/* 82230F24h case   11:*/		regs.R3 = regs.R28;
		/* 82230F24h case   11:*/		return 0x82230F28;
		  /* 82230F28h */ case   12:  		/* lwz R5, <#[R11 + 92]> */
		/* 82230F28h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000005C) );
		/* 82230F28h case   12:*/		return 0x82230F2C;
		  /* 82230F2Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230F2Ch case   13:*/		if ( 1 ) { regs.LR = 0x82230F30; return (uint32)regs.CTR; }
		/* 82230F2Ch case   13:*/		return 0x82230F30;
	}
	return 0x82230F30;
} // Block from 82230EF8h-82230F30h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230F30);
		  /* 82230F30h */ case    0:  		/* li R3, 0 */
		/* 82230F30h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82230F30h case    0:*/		return 0x82230F34;
	}
	return 0x82230F34;
} // Block from 82230F30h-82230F34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82230F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230F34);
		  /* 82230F34h */ case    0:  		/* addi R1, R1, 128 */
		/* 82230F34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82230F34h case    0:*/		return 0x82230F38;
		  /* 82230F38h */ case    1:  		/* b -1703056 */
		/* 82230F38h case    1:*/		return 0x820912A8;
		/* 82230F38h case    1:*/		return 0x82230F3C;
		  /* 82230F3Ch */ case    2:  		/* nop */
		/* 82230F3Ch case    2:*/		cpu::op::nop();
		/* 82230F3Ch case    2:*/		return 0x82230F40;
	}
	return 0x82230F40;
} // Block from 82230F34h-82230F40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82230F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230F40);
		  /* 82230F40h */ case    0:  		/* mfspr R12, LR */
		/* 82230F40h case    0:*/		regs.R12 = regs.LR;
		/* 82230F40h case    0:*/		return 0x82230F44;
		  /* 82230F44h */ case    1:  		/* bl -1703148 */
		/* 82230F44h case    1:*/		regs.LR = 0x82230F48; return 0x82091258;
		/* 82230F44h case    1:*/		return 0x82230F48;
		  /* 82230F48h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82230F48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82230F48h case    2:*/		return 0x82230F4C;
		  /* 82230F4Ch */ case    3:  		/* mr R31, R3 */
		/* 82230F4Ch case    3:*/		regs.R31 = regs.R3;
		/* 82230F4Ch case    3:*/		return 0x82230F50;
		  /* 82230F50h */ case    4:  		/* mr R30, R5 */
		/* 82230F50h case    4:*/		regs.R30 = regs.R5;
		/* 82230F50h case    4:*/		return 0x82230F54;
		  /* 82230F54h */ case    5:  		/* mr R29, R6 */
		/* 82230F54h case    5:*/		regs.R29 = regs.R6;
		/* 82230F54h case    5:*/		return 0x82230F58;
		  /* 82230F58h */ case    6:  		/* mr R28, R7 */
		/* 82230F58h case    6:*/		regs.R28 = regs.R7;
		/* 82230F58h case    6:*/		return 0x82230F5C;
		  /* 82230F5Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82230F5Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82230F5Ch case    7:*/		return 0x82230F60;
		  /* 82230F60h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82230F60h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82230F84;  }
		/* 82230F60h case    8:*/		return 0x82230F64;
		  /* 82230F64h */ case    9:  		/* lis R11, -32252 */
		/* 82230F64h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82230F64h case    9:*/		return 0x82230F68;
		  /* 82230F68h */ case   10:  		/* lis R10, -32253 */
		/* 82230F68h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82230F68h case   10:*/		return 0x82230F6C;
		  /* 82230F6Ch */ case   11:  		/* lis R9, -32253 */
		/* 82230F6Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82230F6Ch case   11:*/		return 0x82230F70;
		  /* 82230F70h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82230F70h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82230F70h case   12:*/		return 0x82230F74;
		  /* 82230F74h */ case   13:  		/* addi R5, R10, 27792 */
		/* 82230F74h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82230F74h case   13:*/		return 0x82230F78;
		  /* 82230F78h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82230F78h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82230F78h case   14:*/		return 0x82230F7C;
		  /* 82230F7Ch */ case   15:  		/* li R7, 1622 */
		/* 82230F7Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x656);
		/* 82230F7Ch case   15:*/		return 0x82230F80;
		  /* 82230F80h */ case   16:  		/* bl -889720 */
		/* 82230F80h case   16:*/		regs.LR = 0x82230F84; return 0x82157C08;
		/* 82230F80h case   16:*/		return 0x82230F84;
	}
	return 0x82230F84;
} // Block from 82230F40h-82230F84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82230F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230F84);
		  /* 82230F84h */ case    0:  		/* li R4, 615 */
		/* 82230F84h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x267);
		/* 82230F84h case    0:*/		return 0x82230F88;
		  /* 82230F88h */ case    1:  		/* mr R3, R31 */
		/* 82230F88h case    1:*/		regs.R3 = regs.R31;
		/* 82230F88h case    1:*/		return 0x82230F8C;
		  /* 82230F8Ch */ case    2:  		/* bl -866940 */
		/* 82230F8Ch case    2:*/		regs.LR = 0x82230F90; return 0x8215D510;
		/* 82230F8Ch case    2:*/		return 0x82230F90;
		  /* 82230F90h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82230F90h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82230F90h case    3:*/		return 0x82230F94;
		  /* 82230F94h */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82230F94h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82230FF4;  }
		/* 82230F94h case    4:*/		return 0x82230F98;
	}
	return 0x82230F98;
} // Block from 82230F84h-82230F98h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82230F98h
// Function '?CompileWithPointAA@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230F98);
		  /* 82230F98h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230F98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230F98h case    0:*/		return 0x82230F9C;
		  /* 82230F9Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230F9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82230FB4;  }
		/* 82230F9Ch case    1:*/		return 0x82230FA0;
		  /* 82230FA0h */ case    2:  		/* li R6, 1 */
		/* 82230FA0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82230FA0h case    2:*/		return 0x82230FA4;
		  /* 82230FA4h */ case    3:  		/* li R5, 0 */
		/* 82230FA4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82230FA4h case    3:*/		return 0x82230FA8;
		  /* 82230FA8h */ case    4:  		/* li R4, 18 */
		/* 82230FA8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 82230FA8h case    4:*/		return 0x82230FAC;
		  /* 82230FACh */ case    5:  		/* mr R3, R30 */
		/* 82230FACh case    5:*/		regs.R3 = regs.R30;
		/* 82230FACh case    5:*/		return 0x82230FB0;
		  /* 82230FB0h */ case    6:  		/* bl -865296 */
		/* 82230FB0h case    6:*/		regs.LR = 0x82230FB4; return 0x8215DBA0;
		/* 82230FB0h case    6:*/		return 0x82230FB4;
	}
	return 0x82230FB4;
} // Block from 82230F98h-82230FB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82230FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230FB4);
		  /* 82230FB4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82230FB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82230FB4h case    0:*/		return 0x82230FB8;
		  /* 82230FB8h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82230FB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82230FEC;  }
		/* 82230FB8h case    1:*/		return 0x82230FBC;
		  /* 82230FBCh */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82230FBCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82230FBCh case    2:*/		return 0x82230FC0;
		  /* 82230FC0h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82230FC0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82230FEC;  }
		/* 82230FC0h case    3:*/		return 0x82230FC4;
		  /* 82230FC4h */ case    4:  		/* lis R11, -32216 */
		/* 82230FC4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82230FC4h case    4:*/		return 0x82230FC8;
		  /* 82230FC8h */ case    5:  		/* mtspr CTR, R29 */
		/* 82230FC8h case    5:*/		regs.CTR = regs.R29;
		/* 82230FC8h case    5:*/		return 0x82230FCC;
		  /* 82230FCCh */ case    6:  		/* lis R10, -32252 */
		/* 82230FCCh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82230FCCh case    6:*/		return 0x82230FD0;
		  /* 82230FD0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82230FD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82230FD0h case    7:*/		return 0x82230FD4;
		  /* 82230FD4h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82230FD4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82230FD4h case    8:*/		return 0x82230FD8;
		  /* 82230FD8h */ case    9:  		/* li R7, 1 */
		/* 82230FD8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82230FD8h case    9:*/		return 0x82230FDC;
		  /* 82230FDCh */ case   10:  		/* li R6, 32 */
		/* 82230FDCh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 82230FDCh case   10:*/		return 0x82230FE0;
		  /* 82230FE0h */ case   11:  		/* mr R3, R28 */
		/* 82230FE0h case   11:*/		regs.R3 = regs.R28;
		/* 82230FE0h case   11:*/		return 0x82230FE4;
		  /* 82230FE4h */ case   12:  		/* lwz R5, <#[R11 + 128]> */
		/* 82230FE4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000080) );
		/* 82230FE4h case   12:*/		return 0x82230FE8;
		  /* 82230FE8h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82230FE8h case   13:*/		if ( 1 ) { regs.LR = 0x82230FEC; return (uint32)regs.CTR; }
		/* 82230FE8h case   13:*/		return 0x82230FEC;
	}
	return 0x82230FEC;
} // Block from 82230FB4h-82230FECh (14 instructions)

//////////////////////////////////////////////////////
// Block at 82230FECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230FEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230FEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230FEC);
		  /* 82230FECh */ case    0:  		/* li R3, 1 */
		/* 82230FECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82230FECh case    0:*/		return 0x82230FF0;
		  /* 82230FF0h */ case    1:  		/* b 92 */
		/* 82230FF0h case    1:*/		return 0x8223104C;
		/* 82230FF0h case    1:*/		return 0x82230FF4;
	}
	return 0x82230FF4;
} // Block from 82230FECh-82230FF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82230FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82230FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82230FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82230FF4);
		  /* 82230FF4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82230FF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82230FF4h case    0:*/		return 0x82230FF8;
		  /* 82230FF8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82230FF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231010;  }
		/* 82230FF8h case    1:*/		return 0x82230FFC;
		  /* 82230FFCh */ case    2:  		/* li R6, 0 */
		/* 82230FFCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82230FFCh case    2:*/		return 0x82231000;
		  /* 82231000h */ case    3:  		/* li R5, 0 */
		/* 82231000h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231000h case    3:*/		return 0x82231004;
		  /* 82231004h */ case    4:  		/* li R4, 18 */
		/* 82231004h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 82231004h case    4:*/		return 0x82231008;
		  /* 82231008h */ case    5:  		/* mr R3, R30 */
		/* 82231008h case    5:*/		regs.R3 = regs.R30;
		/* 82231008h case    5:*/		return 0x8223100C;
		  /* 8223100Ch */ case    6:  		/* bl -865388 */
		/* 8223100Ch case    6:*/		regs.LR = 0x82231010; return 0x8215DBA0;
		/* 8223100Ch case    6:*/		return 0x82231010;
	}
	return 0x82231010;
} // Block from 82230FF4h-82231010h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231010);
		  /* 82231010h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231010h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231010h case    0:*/		return 0x82231014;
		  /* 82231014h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82231014h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231048;  }
		/* 82231014h case    1:*/		return 0x82231018;
		  /* 82231018h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82231018h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231018h case    2:*/		return 0x8223101C;
		  /* 8223101Ch */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 8223101Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82231048;  }
		/* 8223101Ch case    3:*/		return 0x82231020;
		  /* 82231020h */ case    4:  		/* lis R11, -32216 */
		/* 82231020h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231020h case    4:*/		return 0x82231024;
		  /* 82231024h */ case    5:  		/* mtspr CTR, R29 */
		/* 82231024h case    5:*/		regs.CTR = regs.R29;
		/* 82231024h case    5:*/		return 0x82231028;
		  /* 82231028h */ case    6:  		/* lis R10, -32252 */
		/* 82231028h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231028h case    6:*/		return 0x8223102C;
		  /* 8223102Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 8223102Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223102Ch case    7:*/		return 0x82231030;
		  /* 82231030h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82231030h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82231030h case    8:*/		return 0x82231034;
		  /* 82231034h */ case    9:  		/* li R7, 0 */
		/* 82231034h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82231034h case    9:*/		return 0x82231038;
		  /* 82231038h */ case   10:  		/* li R6, 32 */
		/* 82231038h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 82231038h case   10:*/		return 0x8223103C;
		  /* 8223103Ch */ case   11:  		/* mr R3, R28 */
		/* 8223103Ch case   11:*/		regs.R3 = regs.R28;
		/* 8223103Ch case   11:*/		return 0x82231040;
		  /* 82231040h */ case   12:  		/* lwz R5, <#[R11 + 128]> */
		/* 82231040h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000080) );
		/* 82231040h case   12:*/		return 0x82231044;
		  /* 82231044h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82231044h case   13:*/		if ( 1 ) { regs.LR = 0x82231048; return (uint32)regs.CTR; }
		/* 82231044h case   13:*/		return 0x82231048;
	}
	return 0x82231048;
} // Block from 82231010h-82231048h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82231048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231048);
		  /* 82231048h */ case    0:  		/* li R3, 0 */
		/* 82231048h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231048h case    0:*/		return 0x8223104C;
	}
	return 0x8223104C;
} // Block from 82231048h-8223104Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223104Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223104C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223104C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223104C);
		  /* 8223104Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8223104Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223104Ch case    0:*/		return 0x82231050;
		  /* 82231050h */ case    1:  		/* b -1703336 */
		/* 82231050h case    1:*/		return 0x820912A8;
		/* 82231050h case    1:*/		return 0x82231054;
		  /* 82231054h */ case    2:  		/* nop */
		/* 82231054h case    2:*/		cpu::op::nop();
		/* 82231054h case    2:*/		return 0x82231058;
	}
	return 0x82231058;
} // Block from 8223104Ch-82231058h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82231058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231058);
		  /* 82231058h */ case    0:  		/* mfspr R12, LR */
		/* 82231058h case    0:*/		regs.R12 = regs.LR;
		/* 82231058h case    0:*/		return 0x8223105C;
		  /* 8223105Ch */ case    1:  		/* bl -1703432 */
		/* 8223105Ch case    1:*/		regs.LR = 0x82231060; return 0x82091254;
		/* 8223105Ch case    1:*/		return 0x82231060;
		  /* 82231060h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231060h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231060h case    2:*/		return 0x82231064;
		  /* 82231064h */ case    3:  		/* mr R30, R3 */
		/* 82231064h case    3:*/		regs.R30 = regs.R3;
		/* 82231064h case    3:*/		return 0x82231068;
		  /* 82231068h */ case    4:  		/* mr R31, R4 */
		/* 82231068h case    4:*/		regs.R31 = regs.R4;
		/* 82231068h case    4:*/		return 0x8223106C;
		  /* 8223106Ch */ case    5:  		/* mr R29, R5 */
		/* 8223106Ch case    5:*/		regs.R29 = regs.R5;
		/* 8223106Ch case    5:*/		return 0x82231070;
		  /* 82231070h */ case    6:  		/* mr R28, R6 */
		/* 82231070h case    6:*/		regs.R28 = regs.R6;
		/* 82231070h case    6:*/		return 0x82231074;
		  /* 82231074h */ case    7:  		/* mr R27, R7 */
		/* 82231074h case    7:*/		regs.R27 = regs.R7;
		/* 82231074h case    7:*/		return 0x82231078;
		  /* 82231078h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82231078h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231078h case    8:*/		return 0x8223107C;
		  /* 8223107Ch */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 8223107Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x822310A0;  }
		/* 8223107Ch case    9:*/		return 0x82231080;
		  /* 82231080h */ case   10:  		/* lis R11, -32252 */
		/* 82231080h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231080h case   10:*/		return 0x82231084;
		  /* 82231084h */ case   11:  		/* lis R10, -32253 */
		/* 82231084h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231084h case   11:*/		return 0x82231088;
		  /* 82231088h */ case   12:  		/* lis R9, -32253 */
		/* 82231088h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231088h case   12:*/		return 0x8223108C;
		  /* 8223108Ch */ case   13:  		/* addi R6, R11, 4336 */
		/* 8223108Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 8223108Ch case   13:*/		return 0x82231090;
		  /* 82231090h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82231090h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231090h case   14:*/		return 0x82231094;
		  /* 82231094h */ case   15:  		/* addi R4, R9, 27460 */
		/* 82231094h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231094h case   15:*/		return 0x82231098;
		  /* 82231098h */ case   16:  		/* li R7, 1676 */
		/* 82231098h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x68C);
		/* 82231098h case   16:*/		return 0x8223109C;
		  /* 8223109Ch */ case   17:  		/* bl -890004 */
		/* 8223109Ch case   17:*/		regs.LR = 0x822310A0; return 0x82157C08;
		/* 8223109Ch case   17:*/		return 0x822310A0;
	}
	return 0x822310A0;
} // Block from 82231058h-822310A0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822310A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822310A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822310A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822310A0);
		  /* 822310A0h */ case    0:  		/* mr R5, R31 */
		/* 822310A0h case    0:*/		regs.R5 = regs.R31;
		/* 822310A0h case    0:*/		return 0x822310A4;
		  /* 822310A4h */ case    1:  		/* li R4, 14 */
		/* 822310A4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 822310A4h case    1:*/		return 0x822310A8;
	}
	return 0x822310A8;
} // Block from 822310A0h-822310A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822310A8h
// Function '?CompileWithLineAA@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822310A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822310A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822310A8);
		  /* 822310A8h */ case    0:  		/* mr R3, R30 */
		/* 822310A8h case    0:*/		regs.R3 = regs.R30;
		/* 822310A8h case    0:*/		return 0x822310AC;
		  /* 822310ACh */ case    1:  		/* bl -866412 */
		/* 822310ACh case    1:*/		regs.LR = 0x822310B0; return 0x8215D840;
		/* 822310ACh case    1:*/		return 0x822310B0;
		  /* 822310B0h */ case    2:  		/* cmplwi CR6, R3, 1 */
		/* 822310B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 822310B0h case    2:*/		return 0x822310B4;
		  /* 822310B4h */ case    3:  		/* bc 4, CR6_EQ, 100 */
		/* 822310B4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82231118;  }
		/* 822310B4h case    3:*/		return 0x822310B8;
		  /* 822310B8h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 822310B8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822310B8h case    4:*/		return 0x822310BC;
		  /* 822310BCh */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 822310BCh case    5:*/		if ( regs.CR[6].eq ) { return 0x822310D4;  }
		/* 822310BCh case    5:*/		return 0x822310C0;
		  /* 822310C0h */ case    6:  		/* li R6, 1 */
		/* 822310C0h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822310C0h case    6:*/		return 0x822310C4;
		  /* 822310C4h */ case    7:  		/* mr R5, R31 */
		/* 822310C4h case    7:*/		regs.R5 = regs.R31;
		/* 822310C4h case    7:*/		return 0x822310C8;
		  /* 822310C8h */ case    8:  		/* li R4, 19 */
		/* 822310C8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 822310C8h case    8:*/		return 0x822310CC;
		  /* 822310CCh */ case    9:  		/* mr R3, R29 */
		/* 822310CCh case    9:*/		regs.R3 = regs.R29;
		/* 822310CCh case    9:*/		return 0x822310D0;
		  /* 822310D0h */ case   10:  		/* bl -865584 */
		/* 822310D0h case   10:*/		regs.LR = 0x822310D4; return 0x8215DBA0;
		/* 822310D0h case   10:*/		return 0x822310D4;
	}
	return 0x822310D4;
} // Block from 822310A8h-822310D4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822310D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822310D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822310D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822310D4);
		  /* 822310D4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822310D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822310D4h case    0:*/		return 0x822310D8;
		  /* 822310D8h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822310D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231110;  }
		/* 822310D8h case    1:*/		return 0x822310DC;
		  /* 822310DCh */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 822310DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822310DCh case    2:*/		return 0x822310E0;
		  /* 822310E0h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822310E0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231110;  }
		/* 822310E0h case    3:*/		return 0x822310E4;
		  /* 822310E4h */ case    4:  		/* lis R11, -32216 */
		/* 822310E4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822310E4h case    4:*/		return 0x822310E8;
		  /* 822310E8h */ case    5:  		/* mtspr CTR, R28 */
		/* 822310E8h case    5:*/		regs.CTR = regs.R28;
		/* 822310E8h case    5:*/		return 0x822310EC;
		  /* 822310ECh */ case    6:  		/* lis R10, -32252 */
		/* 822310ECh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822310ECh case    6:*/		return 0x822310F0;
		  /* 822310F0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822310F0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822310F0h case    7:*/		return 0x822310F4;
		  /* 822310F4h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822310F4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822310F4h case    8:*/		return 0x822310F8;
		  /* 822310F8h */ case    9:  		/* li R8, 1 */
		/* 822310F8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822310F8h case    9:*/		return 0x822310FC;
		  /* 822310FCh */ case   10:  		/* mr R7, R31 */
		/* 822310FCh case   10:*/		regs.R7 = regs.R31;
		/* 822310FCh case   10:*/		return 0x82231100;
		  /* 82231100h */ case   11:  		/* li R6, 33 */
		/* 82231100h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x21);
		/* 82231100h case   11:*/		return 0x82231104;
		  /* 82231104h */ case   12:  		/* mr R3, R27 */
		/* 82231104h case   12:*/		regs.R3 = regs.R27;
		/* 82231104h case   12:*/		return 0x82231108;
		  /* 82231108h */ case   13:  		/* lwz R5, <#[R11 + 132]> */
		/* 82231108h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000084) );
		/* 82231108h case   13:*/		return 0x8223110C;
		  /* 8223110Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223110Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231110; return (uint32)regs.CTR; }
		/* 8223110Ch case   14:*/		return 0x82231110;
	}
	return 0x82231110;
} // Block from 822310D4h-82231110h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231110);
		  /* 82231110h */ case    0:  		/* li R3, 1 */
		/* 82231110h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231110h case    0:*/		return 0x82231114;
		  /* 82231114h */ case    1:  		/* b 96 */
		/* 82231114h case    1:*/		return 0x82231174;
		/* 82231114h case    1:*/		return 0x82231118;
	}
	return 0x82231118;
} // Block from 82231110h-82231118h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231118);
		  /* 82231118h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231118h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231118h case    0:*/		return 0x8223111C;
		  /* 8223111Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8223111Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82231134;  }
		/* 8223111Ch case    1:*/		return 0x82231120;
		  /* 82231120h */ case    2:  		/* li R6, 0 */
		/* 82231120h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231120h case    2:*/		return 0x82231124;
		  /* 82231124h */ case    3:  		/* mr R5, R31 */
		/* 82231124h case    3:*/		regs.R5 = regs.R31;
		/* 82231124h case    3:*/		return 0x82231128;
		  /* 82231128h */ case    4:  		/* li R4, 19 */
		/* 82231128h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 82231128h case    4:*/		return 0x8223112C;
		  /* 8223112Ch */ case    5:  		/* mr R3, R29 */
		/* 8223112Ch case    5:*/		regs.R3 = regs.R29;
		/* 8223112Ch case    5:*/		return 0x82231130;
		  /* 82231130h */ case    6:  		/* bl -865680 */
		/* 82231130h case    6:*/		regs.LR = 0x82231134; return 0x8215DBA0;
		/* 82231130h case    6:*/		return 0x82231134;
	}
	return 0x82231134;
} // Block from 82231118h-82231134h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231134);
		  /* 82231134h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231134h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231134h case    0:*/		return 0x82231138;
		  /* 82231138h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231138h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231170;  }
		/* 82231138h case    1:*/		return 0x8223113C;
		  /* 8223113Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8223113Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8223113Ch case    2:*/		return 0x82231140;
		  /* 82231140h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231140h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231170;  }
		/* 82231140h case    3:*/		return 0x82231144;
		  /* 82231144h */ case    4:  		/* lis R11, -32216 */
		/* 82231144h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231144h case    4:*/		return 0x82231148;
		  /* 82231148h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231148h case    5:*/		regs.CTR = regs.R28;
		/* 82231148h case    5:*/		return 0x8223114C;
		  /* 8223114Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223114Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223114Ch case    6:*/		return 0x82231150;
		  /* 82231150h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231150h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231150h case    7:*/		return 0x82231154;
		  /* 82231154h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231154h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231154h case    8:*/		return 0x82231158;
		  /* 82231158h */ case    9:  		/* li R8, 0 */
		/* 82231158h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231158h case    9:*/		return 0x8223115C;
		  /* 8223115Ch */ case   10:  		/* mr R7, R31 */
		/* 8223115Ch case   10:*/		regs.R7 = regs.R31;
		/* 8223115Ch case   10:*/		return 0x82231160;
		  /* 82231160h */ case   11:  		/* li R6, 33 */
		/* 82231160h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x21);
		/* 82231160h case   11:*/		return 0x82231164;
		  /* 82231164h */ case   12:  		/* mr R3, R27 */
		/* 82231164h case   12:*/		regs.R3 = regs.R27;
		/* 82231164h case   12:*/		return 0x82231168;
		  /* 82231168h */ case   13:  		/* lwz R5, <#[R11 + 132]> */
		/* 82231168h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000084) );
		/* 82231168h case   13:*/		return 0x8223116C;
		  /* 8223116Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223116Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231170; return (uint32)regs.CTR; }
		/* 8223116Ch case   14:*/		return 0x82231170;
	}
	return 0x82231170;
} // Block from 82231134h-82231170h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231170);
		  /* 82231170h */ case    0:  		/* li R3, 0 */
		/* 82231170h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231170h case    0:*/		return 0x82231174;
	}
	return 0x82231174;
} // Block from 82231170h-82231174h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231174);
		  /* 82231174h */ case    0:  		/* addi R1, R1, 128 */
		/* 82231174h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231174h case    0:*/		return 0x82231178;
		  /* 82231178h */ case    1:  		/* b -1703636 */
		/* 82231178h case    1:*/		return 0x820912A4;
		/* 82231178h case    1:*/		return 0x8223117C;
		  /* 8223117Ch */ case    2:  		/* nop */
		/* 8223117Ch case    2:*/		cpu::op::nop();
		/* 8223117Ch case    2:*/		return 0x82231180;
	}
	return 0x82231180;
} // Block from 82231174h-82231180h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82231180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231180);
		  /* 82231180h */ case    0:  		/* mfspr R12, LR */
		/* 82231180h case    0:*/		regs.R12 = regs.LR;
		/* 82231180h case    0:*/		return 0x82231184;
		  /* 82231184h */ case    1:  		/* bl -1703728 */
		/* 82231184h case    1:*/		regs.LR = 0x82231188; return 0x82091254;
		/* 82231184h case    1:*/		return 0x82231188;
		  /* 82231188h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231188h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231188h case    2:*/		return 0x8223118C;
		  /* 8223118Ch */ case    3:  		/* mr R30, R3 */
		/* 8223118Ch case    3:*/		regs.R30 = regs.R3;
		/* 8223118Ch case    3:*/		return 0x82231190;
		  /* 82231190h */ case    4:  		/* mr R31, R4 */
		/* 82231190h case    4:*/		regs.R31 = regs.R4;
		/* 82231190h case    4:*/		return 0x82231194;
		  /* 82231194h */ case    5:  		/* mr R29, R5 */
		/* 82231194h case    5:*/		regs.R29 = regs.R5;
		/* 82231194h case    5:*/		return 0x82231198;
		  /* 82231198h */ case    6:  		/* mr R28, R6 */
		/* 82231198h case    6:*/		regs.R28 = regs.R6;
		/* 82231198h case    6:*/		return 0x8223119C;
		  /* 8223119Ch */ case    7:  		/* mr R27, R7 */
		/* 8223119Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223119Ch case    7:*/		return 0x822311A0;
		  /* 822311A0h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822311A0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822311A0h case    8:*/		return 0x822311A4;
		  /* 822311A4h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 822311A4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x822311C8;  }
		/* 822311A4h case    9:*/		return 0x822311A8;
		  /* 822311A8h */ case   10:  		/* lis R11, -32252 */
		/* 822311A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822311A8h case   10:*/		return 0x822311AC;
		  /* 822311ACh */ case   11:  		/* lis R10, -32253 */
		/* 822311ACh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822311ACh case   11:*/		return 0x822311B0;
		  /* 822311B0h */ case   12:  		/* lis R9, -32253 */
		/* 822311B0h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822311B0h case   12:*/		return 0x822311B4;
		  /* 822311B4h */ case   13:  		/* addi R6, R11, 4336 */
		/* 822311B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822311B4h case   13:*/		return 0x822311B8;
	}
	return 0x822311B8;
} // Block from 82231180h-822311B8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822311B8h
// Function '?CompileWithFogIndexOFog@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822311B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822311B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822311B8);
		  /* 822311B8h */ case    0:  		/* addi R5, R10, 27792 */
		/* 822311B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822311B8h case    0:*/		return 0x822311BC;
		  /* 822311BCh */ case    1:  		/* addi R4, R9, 27460 */
		/* 822311BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822311BCh case    1:*/		return 0x822311C0;
		  /* 822311C0h */ case    2:  		/* li R7, 1726 */
		/* 822311C0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x6BE);
		/* 822311C0h case    2:*/		return 0x822311C4;
		  /* 822311C4h */ case    3:  		/* bl -890300 */
		/* 822311C4h case    3:*/		regs.LR = 0x822311C8; return 0x82157C08;
		/* 822311C4h case    3:*/		return 0x822311C8;
	}
	return 0x822311C8;
} // Block from 822311B8h-822311C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822311C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822311C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822311C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822311C8);
		  /* 822311C8h */ case    0:  		/* mr R5, R31 */
		/* 822311C8h case    0:*/		regs.R5 = regs.R31;
		/* 822311C8h case    0:*/		return 0x822311CC;
		  /* 822311CCh */ case    1:  		/* li R4, 14 */
		/* 822311CCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 822311CCh case    1:*/		return 0x822311D0;
		  /* 822311D0h */ case    2:  		/* mr R3, R30 */
		/* 822311D0h case    2:*/		regs.R3 = regs.R30;
		/* 822311D0h case    2:*/		return 0x822311D4;
		  /* 822311D4h */ case    3:  		/* bl -866708 */
		/* 822311D4h case    3:*/		regs.LR = 0x822311D8; return 0x8215D840;
		/* 822311D4h case    3:*/		return 0x822311D8;
		  /* 822311D8h */ case    4:  		/* cmplwi CR6, R3, 2 */
		/* 822311D8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 822311D8h case    4:*/		return 0x822311DC;
		  /* 822311DCh */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 822311DCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82231240;  }
		/* 822311DCh case    5:*/		return 0x822311E0;
		  /* 822311E0h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 822311E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822311E0h case    6:*/		return 0x822311E4;
		  /* 822311E4h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 822311E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x822311FC;  }
		/* 822311E4h case    7:*/		return 0x822311E8;
		  /* 822311E8h */ case    8:  		/* li R6, 1 */
		/* 822311E8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822311E8h case    8:*/		return 0x822311EC;
		  /* 822311ECh */ case    9:  		/* mr R5, R31 */
		/* 822311ECh case    9:*/		regs.R5 = regs.R31;
		/* 822311ECh case    9:*/		return 0x822311F0;
		  /* 822311F0h */ case   10:  		/* li R4, 20 */
		/* 822311F0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 822311F0h case   10:*/		return 0x822311F4;
		  /* 822311F4h */ case   11:  		/* mr R3, R29 */
		/* 822311F4h case   11:*/		regs.R3 = regs.R29;
		/* 822311F4h case   11:*/		return 0x822311F8;
		  /* 822311F8h */ case   12:  		/* bl -865880 */
		/* 822311F8h case   12:*/		regs.LR = 0x822311FC; return 0x8215DBA0;
		/* 822311F8h case   12:*/		return 0x822311FC;
	}
	return 0x822311FC;
} // Block from 822311C8h-822311FCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 822311FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822311FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822311FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822311FC);
		  /* 822311FCh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822311FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822311FCh case    0:*/		return 0x82231200;
		  /* 82231200h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231200h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231238;  }
		/* 82231200h case    1:*/		return 0x82231204;
		  /* 82231204h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231204h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231204h case    2:*/		return 0x82231208;
		  /* 82231208h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231208h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231238;  }
		/* 82231208h case    3:*/		return 0x8223120C;
		  /* 8223120Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223120Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223120Ch case    4:*/		return 0x82231210;
		  /* 82231210h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231210h case    5:*/		regs.CTR = regs.R28;
		/* 82231210h case    5:*/		return 0x82231214;
		  /* 82231214h */ case    6:  		/* lis R10, -32252 */
		/* 82231214h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231214h case    6:*/		return 0x82231218;
		  /* 82231218h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231218h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231218h case    7:*/		return 0x8223121C;
		  /* 8223121Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 8223121Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 8223121Ch case    8:*/		return 0x82231220;
		  /* 82231220h */ case    9:  		/* li R8, 1 */
		/* 82231220h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231220h case    9:*/		return 0x82231224;
		  /* 82231224h */ case   10:  		/* mr R7, R31 */
		/* 82231224h case   10:*/		regs.R7 = regs.R31;
		/* 82231224h case   10:*/		return 0x82231228;
		  /* 82231228h */ case   11:  		/* li R6, 34 */
		/* 82231228h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x22);
		/* 82231228h case   11:*/		return 0x8223122C;
		  /* 8223122Ch */ case   12:  		/* mr R3, R27 */
		/* 8223122Ch case   12:*/		regs.R3 = regs.R27;
		/* 8223122Ch case   12:*/		return 0x82231230;
		  /* 82231230h */ case   13:  		/* lwz R5, <#[R11 + 136]> */
		/* 82231230h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000088) );
		/* 82231230h case   13:*/		return 0x82231234;
		  /* 82231234h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231234h case   14:*/		if ( 1 ) { regs.LR = 0x82231238; return (uint32)regs.CTR; }
		/* 82231234h case   14:*/		return 0x82231238;
	}
	return 0x82231238;
} // Block from 822311FCh-82231238h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231238);
		  /* 82231238h */ case    0:  		/* li R3, 1 */
		/* 82231238h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231238h case    0:*/		return 0x8223123C;
		  /* 8223123Ch */ case    1:  		/* b 96 */
		/* 8223123Ch case    1:*/		return 0x8223129C;
		/* 8223123Ch case    1:*/		return 0x82231240;
	}
	return 0x82231240;
} // Block from 82231238h-82231240h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231240);
		  /* 82231240h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231240h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231240h case    0:*/		return 0x82231244;
		  /* 82231244h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231244h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223125C;  }
		/* 82231244h case    1:*/		return 0x82231248;
		  /* 82231248h */ case    2:  		/* li R6, 0 */
		/* 82231248h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231248h case    2:*/		return 0x8223124C;
		  /* 8223124Ch */ case    3:  		/* mr R5, R31 */
		/* 8223124Ch case    3:*/		regs.R5 = regs.R31;
		/* 8223124Ch case    3:*/		return 0x82231250;
		  /* 82231250h */ case    4:  		/* li R4, 20 */
		/* 82231250h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82231250h case    4:*/		return 0x82231254;
		  /* 82231254h */ case    5:  		/* mr R3, R29 */
		/* 82231254h case    5:*/		regs.R3 = regs.R29;
		/* 82231254h case    5:*/		return 0x82231258;
		  /* 82231258h */ case    6:  		/* bl -865976 */
		/* 82231258h case    6:*/		regs.LR = 0x8223125C; return 0x8215DBA0;
		/* 82231258h case    6:*/		return 0x8223125C;
	}
	return 0x8223125C;
} // Block from 82231240h-8223125Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223125Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223125C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223125C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223125C);
		  /* 8223125Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8223125Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223125Ch case    0:*/		return 0x82231260;
		  /* 82231260h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231260h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231298;  }
		/* 82231260h case    1:*/		return 0x82231264;
		  /* 82231264h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231264h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231264h case    2:*/		return 0x82231268;
		  /* 82231268h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231268h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231298;  }
		/* 82231268h case    3:*/		return 0x8223126C;
		  /* 8223126Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223126Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223126Ch case    4:*/		return 0x82231270;
		  /* 82231270h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231270h case    5:*/		regs.CTR = regs.R28;
		/* 82231270h case    5:*/		return 0x82231274;
		  /* 82231274h */ case    6:  		/* lis R10, -32252 */
		/* 82231274h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231274h case    6:*/		return 0x82231278;
		  /* 82231278h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231278h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231278h case    7:*/		return 0x8223127C;
		  /* 8223127Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 8223127Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 8223127Ch case    8:*/		return 0x82231280;
		  /* 82231280h */ case    9:  		/* li R8, 0 */
		/* 82231280h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231280h case    9:*/		return 0x82231284;
		  /* 82231284h */ case   10:  		/* mr R7, R31 */
		/* 82231284h case   10:*/		regs.R7 = regs.R31;
		/* 82231284h case   10:*/		return 0x82231288;
		  /* 82231288h */ case   11:  		/* li R6, 34 */
		/* 82231288h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x22);
		/* 82231288h case   11:*/		return 0x8223128C;
		  /* 8223128Ch */ case   12:  		/* mr R3, R27 */
		/* 8223128Ch case   12:*/		regs.R3 = regs.R27;
		/* 8223128Ch case   12:*/		return 0x82231290;
		  /* 82231290h */ case   13:  		/* lwz R5, <#[R11 + 136]> */
		/* 82231290h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000088) );
		/* 82231290h case   13:*/		return 0x82231294;
		  /* 82231294h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231294h case   14:*/		if ( 1 ) { regs.LR = 0x82231298; return (uint32)regs.CTR; }
		/* 82231294h case   14:*/		return 0x82231298;
	}
	return 0x82231298;
} // Block from 8223125Ch-82231298h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231298);
		  /* 82231298h */ case    0:  		/* li R3, 0 */
		/* 82231298h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231298h case    0:*/		return 0x8223129C;
	}
	return 0x8223129C;
} // Block from 82231298h-8223129Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223129Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223129C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223129C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223129C);
		  /* 8223129Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8223129Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223129Ch case    0:*/		return 0x822312A0;
		  /* 822312A0h */ case    1:  		/* b -1703932 */
		/* 822312A0h case    1:*/		return 0x820912A4;
		/* 822312A0h case    1:*/		return 0x822312A4;
		  /* 822312A4h */ case    2:  		/* nop */
		/* 822312A4h case    2:*/		cpu::op::nop();
		/* 822312A4h case    2:*/		return 0x822312A8;
	}
	return 0x822312A8;
} // Block from 8223129Ch-822312A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822312A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822312A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822312A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822312A8);
		  /* 822312A8h */ case    0:  		/* mfspr R12, LR */
		/* 822312A8h case    0:*/		regs.R12 = regs.LR;
		/* 822312A8h case    0:*/		return 0x822312AC;
		  /* 822312ACh */ case    1:  		/* bl -1704024 */
		/* 822312ACh case    1:*/		regs.LR = 0x822312B0; return 0x82091254;
		/* 822312ACh case    1:*/		return 0x822312B0;
		  /* 822312B0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822312B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822312B0h case    2:*/		return 0x822312B4;
		  /* 822312B4h */ case    3:  		/* mr R30, R3 */
		/* 822312B4h case    3:*/		regs.R30 = regs.R3;
		/* 822312B4h case    3:*/		return 0x822312B8;
		  /* 822312B8h */ case    4:  		/* mr R31, R4 */
		/* 822312B8h case    4:*/		regs.R31 = regs.R4;
		/* 822312B8h case    4:*/		return 0x822312BC;
		  /* 822312BCh */ case    5:  		/* mr R29, R5 */
		/* 822312BCh case    5:*/		regs.R29 = regs.R5;
		/* 822312BCh case    5:*/		return 0x822312C0;
		  /* 822312C0h */ case    6:  		/* mr R28, R6 */
		/* 822312C0h case    6:*/		regs.R28 = regs.R6;
		/* 822312C0h case    6:*/		return 0x822312C4;
		  /* 822312C4h */ case    7:  		/* mr R27, R7 */
		/* 822312C4h case    7:*/		regs.R27 = regs.R7;
		/* 822312C4h case    7:*/		return 0x822312C8;
		  /* 822312C8h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822312C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822312C8h case    8:*/		return 0x822312CC;
		  /* 822312CCh */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 822312CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x822312F0;  }
		/* 822312CCh case    9:*/		return 0x822312D0;
	}
	return 0x822312D0;
} // Block from 822312A8h-822312D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822312D0h
// Function '?CompileWithFogIndexZ@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822312D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822312D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822312D0);
		  /* 822312D0h */ case    0:  		/* lis R11, -32252 */
		/* 822312D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822312D0h case    0:*/		return 0x822312D4;
		  /* 822312D4h */ case    1:  		/* lis R10, -32253 */
		/* 822312D4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822312D4h case    1:*/		return 0x822312D8;
		  /* 822312D8h */ case    2:  		/* lis R9, -32253 */
		/* 822312D8h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822312D8h case    2:*/		return 0x822312DC;
		  /* 822312DCh */ case    3:  		/* addi R6, R11, 4336 */
		/* 822312DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822312DCh case    3:*/		return 0x822312E0;
		  /* 822312E0h */ case    4:  		/* addi R5, R10, 27792 */
		/* 822312E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822312E0h case    4:*/		return 0x822312E4;
		  /* 822312E4h */ case    5:  		/* addi R4, R9, 27460 */
		/* 822312E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822312E4h case    5:*/		return 0x822312E8;
		  /* 822312E8h */ case    6:  		/* li R7, 1777 */
		/* 822312E8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6F1);
		/* 822312E8h case    6:*/		return 0x822312EC;
		  /* 822312ECh */ case    7:  		/* bl -890596 */
		/* 822312ECh case    7:*/		regs.LR = 0x822312F0; return 0x82157C08;
		/* 822312ECh case    7:*/		return 0x822312F0;
	}
	return 0x822312F0;
} // Block from 822312D0h-822312F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822312F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822312F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822312F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822312F0);
		  /* 822312F0h */ case    0:  		/* mr R5, R31 */
		/* 822312F0h case    0:*/		regs.R5 = regs.R31;
		/* 822312F0h case    0:*/		return 0x822312F4;
		  /* 822312F4h */ case    1:  		/* li R4, 14 */
		/* 822312F4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 822312F4h case    1:*/		return 0x822312F8;
		  /* 822312F8h */ case    2:  		/* mr R3, R30 */
		/* 822312F8h case    2:*/		regs.R3 = regs.R30;
		/* 822312F8h case    2:*/		return 0x822312FC;
		  /* 822312FCh */ case    3:  		/* bl -867004 */
		/* 822312FCh case    3:*/		regs.LR = 0x82231300; return 0x8215D840;
		/* 822312FCh case    3:*/		return 0x82231300;
		  /* 82231300h */ case    4:  		/* cmplwi CR6, R3, 3 */
		/* 82231300h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 82231300h case    4:*/		return 0x82231304;
		  /* 82231304h */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 82231304h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82231368;  }
		/* 82231304h case    5:*/		return 0x82231308;
		  /* 82231308h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82231308h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231308h case    6:*/		return 0x8223130C;
		  /* 8223130Ch */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 8223130Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82231324;  }
		/* 8223130Ch case    7:*/		return 0x82231310;
		  /* 82231310h */ case    8:  		/* li R6, 1 */
		/* 82231310h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231310h case    8:*/		return 0x82231314;
		  /* 82231314h */ case    9:  		/* mr R5, R31 */
		/* 82231314h case    9:*/		regs.R5 = regs.R31;
		/* 82231314h case    9:*/		return 0x82231318;
		  /* 82231318h */ case   10:  		/* li R4, 21 */
		/* 82231318h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 82231318h case   10:*/		return 0x8223131C;
		  /* 8223131Ch */ case   11:  		/* mr R3, R29 */
		/* 8223131Ch case   11:*/		regs.R3 = regs.R29;
		/* 8223131Ch case   11:*/		return 0x82231320;
		  /* 82231320h */ case   12:  		/* bl -866176 */
		/* 82231320h case   12:*/		regs.LR = 0x82231324; return 0x8215DBA0;
		/* 82231320h case   12:*/		return 0x82231324;
	}
	return 0x82231324;
} // Block from 822312F0h-82231324h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231324);
		  /* 82231324h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231324h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231324h case    0:*/		return 0x82231328;
		  /* 82231328h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231328h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231360;  }
		/* 82231328h case    1:*/		return 0x8223132C;
		  /* 8223132Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8223132Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8223132Ch case    2:*/		return 0x82231330;
		  /* 82231330h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231330h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231360;  }
		/* 82231330h case    3:*/		return 0x82231334;
		  /* 82231334h */ case    4:  		/* lis R11, -32216 */
		/* 82231334h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231334h case    4:*/		return 0x82231338;
		  /* 82231338h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231338h case    5:*/		regs.CTR = regs.R28;
		/* 82231338h case    5:*/		return 0x8223133C;
		  /* 8223133Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223133Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223133Ch case    6:*/		return 0x82231340;
		  /* 82231340h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231340h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231340h case    7:*/		return 0x82231344;
		  /* 82231344h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231344h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231344h case    8:*/		return 0x82231348;
		  /* 82231348h */ case    9:  		/* li R8, 1 */
		/* 82231348h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231348h case    9:*/		return 0x8223134C;
		  /* 8223134Ch */ case   10:  		/* mr R7, R31 */
		/* 8223134Ch case   10:*/		regs.R7 = regs.R31;
		/* 8223134Ch case   10:*/		return 0x82231350;
		  /* 82231350h */ case   11:  		/* li R6, 35 */
		/* 82231350h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x23);
		/* 82231350h case   11:*/		return 0x82231354;
		  /* 82231354h */ case   12:  		/* mr R3, R27 */
		/* 82231354h case   12:*/		regs.R3 = regs.R27;
		/* 82231354h case   12:*/		return 0x82231358;
		  /* 82231358h */ case   13:  		/* lwz R5, <#[R11 + 140]> */
		/* 82231358h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000008C) );
		/* 82231358h case   13:*/		return 0x8223135C;
		  /* 8223135Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223135Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231360; return (uint32)regs.CTR; }
		/* 8223135Ch case   14:*/		return 0x82231360;
	}
	return 0x82231360;
} // Block from 82231324h-82231360h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231360);
		  /* 82231360h */ case    0:  		/* li R3, 1 */
		/* 82231360h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231360h case    0:*/		return 0x82231364;
		  /* 82231364h */ case    1:  		/* b 96 */
		/* 82231364h case    1:*/		return 0x822313C4;
		/* 82231364h case    1:*/		return 0x82231368;
	}
	return 0x82231368;
} // Block from 82231360h-82231368h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231368);
		  /* 82231368h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231368h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231368h case    0:*/		return 0x8223136C;
		  /* 8223136Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8223136Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82231384;  }
		/* 8223136Ch case    1:*/		return 0x82231370;
		  /* 82231370h */ case    2:  		/* li R6, 0 */
		/* 82231370h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231370h case    2:*/		return 0x82231374;
		  /* 82231374h */ case    3:  		/* mr R5, R31 */
		/* 82231374h case    3:*/		regs.R5 = regs.R31;
		/* 82231374h case    3:*/		return 0x82231378;
		  /* 82231378h */ case    4:  		/* li R4, 21 */
		/* 82231378h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 82231378h case    4:*/		return 0x8223137C;
		  /* 8223137Ch */ case    5:  		/* mr R3, R29 */
		/* 8223137Ch case    5:*/		regs.R3 = regs.R29;
		/* 8223137Ch case    5:*/		return 0x82231380;
		  /* 82231380h */ case    6:  		/* bl -866272 */
		/* 82231380h case    6:*/		regs.LR = 0x82231384; return 0x8215DBA0;
		/* 82231380h case    6:*/		return 0x82231384;
	}
	return 0x82231384;
} // Block from 82231368h-82231384h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231384);
		  /* 82231384h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231384h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231384h case    0:*/		return 0x82231388;
		  /* 82231388h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231388h case    1:*/		if ( regs.CR[6].eq ) { return 0x822313C0;  }
		/* 82231388h case    1:*/		return 0x8223138C;
		  /* 8223138Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8223138Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8223138Ch case    2:*/		return 0x82231390;
		  /* 82231390h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231390h case    3:*/		if ( regs.CR[6].eq ) { return 0x822313C0;  }
		/* 82231390h case    3:*/		return 0x82231394;
		  /* 82231394h */ case    4:  		/* lis R11, -32216 */
		/* 82231394h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231394h case    4:*/		return 0x82231398;
		  /* 82231398h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231398h case    5:*/		regs.CTR = regs.R28;
		/* 82231398h case    5:*/		return 0x8223139C;
		  /* 8223139Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223139Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223139Ch case    6:*/		return 0x822313A0;
		  /* 822313A0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822313A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822313A0h case    7:*/		return 0x822313A4;
		  /* 822313A4h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822313A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822313A4h case    8:*/		return 0x822313A8;
		  /* 822313A8h */ case    9:  		/* li R8, 0 */
		/* 822313A8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822313A8h case    9:*/		return 0x822313AC;
		  /* 822313ACh */ case   10:  		/* mr R7, R31 */
		/* 822313ACh case   10:*/		regs.R7 = regs.R31;
		/* 822313ACh case   10:*/		return 0x822313B0;
		  /* 822313B0h */ case   11:  		/* li R6, 35 */
		/* 822313B0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x23);
		/* 822313B0h case   11:*/		return 0x822313B4;
		  /* 822313B4h */ case   12:  		/* mr R3, R27 */
		/* 822313B4h case   12:*/		regs.R3 = regs.R27;
		/* 822313B4h case   12:*/		return 0x822313B8;
		  /* 822313B8h */ case   13:  		/* lwz R5, <#[R11 + 140]> */
		/* 822313B8h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000008C) );
		/* 822313B8h case   13:*/		return 0x822313BC;
		  /* 822313BCh */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822313BCh case   14:*/		if ( 1 ) { regs.LR = 0x822313C0; return (uint32)regs.CTR; }
		/* 822313BCh case   14:*/		return 0x822313C0;
	}
	return 0x822313C0;
} // Block from 82231384h-822313C0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822313C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822313C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822313C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822313C0);
		  /* 822313C0h */ case    0:  		/* li R3, 0 */
		/* 822313C0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822313C0h case    0:*/		return 0x822313C4;
	}
	return 0x822313C4;
} // Block from 822313C0h-822313C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822313C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822313C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822313C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822313C4);
		  /* 822313C4h */ case    0:  		/* addi R1, R1, 128 */
		/* 822313C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822313C4h case    0:*/		return 0x822313C8;
		  /* 822313C8h */ case    1:  		/* b -1704228 */
		/* 822313C8h case    1:*/		return 0x820912A4;
		/* 822313C8h case    1:*/		return 0x822313CC;
		  /* 822313CCh */ case    2:  		/* nop */
		/* 822313CCh case    2:*/		cpu::op::nop();
		/* 822313CCh case    2:*/		return 0x822313D0;
	}
	return 0x822313D0;
} // Block from 822313C4h-822313D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822313D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822313D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822313D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822313D0);
		  /* 822313D0h */ case    0:  		/* mfspr R12, LR */
		/* 822313D0h case    0:*/		regs.R12 = regs.LR;
		/* 822313D0h case    0:*/		return 0x822313D4;
		  /* 822313D4h */ case    1:  		/* bl -1704316 */
		/* 822313D4h case    1:*/		regs.LR = 0x822313D8; return 0x82091258;
		/* 822313D4h case    1:*/		return 0x822313D8;
		  /* 822313D8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822313D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822313D8h case    2:*/		return 0x822313DC;
		  /* 822313DCh */ case    3:  		/* mr R31, R3 */
		/* 822313DCh case    3:*/		regs.R31 = regs.R3;
		/* 822313DCh case    3:*/		return 0x822313E0;
	}
	return 0x822313E0;
} // Block from 822313D0h-822313E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822313E0h
// Function '?CompileWithFogIndexW@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822313E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822313E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822313E0);
		  /* 822313E0h */ case    0:  		/* mr R30, R5 */
		/* 822313E0h case    0:*/		regs.R30 = regs.R5;
		/* 822313E0h case    0:*/		return 0x822313E4;
		  /* 822313E4h */ case    1:  		/* mr R29, R6 */
		/* 822313E4h case    1:*/		regs.R29 = regs.R6;
		/* 822313E4h case    1:*/		return 0x822313E8;
		  /* 822313E8h */ case    2:  		/* mr R28, R7 */
		/* 822313E8h case    2:*/		regs.R28 = regs.R7;
		/* 822313E8h case    2:*/		return 0x822313EC;
		  /* 822313ECh */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 822313ECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822313ECh case    3:*/		return 0x822313F0;
		  /* 822313F0h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 822313F0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82231414;  }
		/* 822313F0h case    4:*/		return 0x822313F4;
		  /* 822313F4h */ case    5:  		/* lis R11, -32252 */
		/* 822313F4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822313F4h case    5:*/		return 0x822313F8;
		  /* 822313F8h */ case    6:  		/* lis R10, -32253 */
		/* 822313F8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822313F8h case    6:*/		return 0x822313FC;
		  /* 822313FCh */ case    7:  		/* lis R9, -32253 */
		/* 822313FCh case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822313FCh case    7:*/		return 0x82231400;
		  /* 82231400h */ case    8:  		/* addi R6, R11, 4336 */
		/* 82231400h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231400h case    8:*/		return 0x82231404;
		  /* 82231404h */ case    9:  		/* addi R5, R10, 27792 */
		/* 82231404h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231404h case    9:*/		return 0x82231408;
		  /* 82231408h */ case   10:  		/* addi R4, R9, 27460 */
		/* 82231408h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231408h case   10:*/		return 0x8223140C;
		  /* 8223140Ch */ case   11:  		/* li R7, 1828 */
		/* 8223140Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x724);
		/* 8223140Ch case   11:*/		return 0x82231410;
		  /* 82231410h */ case   12:  		/* bl -890888 */
		/* 82231410h case   12:*/		regs.LR = 0x82231414; return 0x82157C08;
		/* 82231410h case   12:*/		return 0x82231414;
	}
	return 0x82231414;
} // Block from 822313E0h-82231414h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231414);
		  /* 82231414h */ case    0:  		/* li R4, 582 */
		/* 82231414h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x246);
		/* 82231414h case    0:*/		return 0x82231418;
		  /* 82231418h */ case    1:  		/* mr R3, R31 */
		/* 82231418h case    1:*/		regs.R3 = regs.R31;
		/* 82231418h case    1:*/		return 0x8223141C;
		  /* 8223141Ch */ case    2:  		/* bl -868108 */
		/* 8223141Ch case    2:*/		regs.LR = 0x82231420; return 0x8215D510;
		/* 8223141Ch case    2:*/		return 0x82231420;
		  /* 82231420h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82231420h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82231420h case    3:*/		return 0x82231424;
		  /* 82231424h */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82231424h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82231484;  }
		/* 82231424h case    4:*/		return 0x82231428;
		  /* 82231428h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82231428h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82231428h case    5:*/		return 0x8223142C;
		  /* 8223142Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 8223142Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82231444;  }
		/* 8223142Ch case    6:*/		return 0x82231430;
		  /* 82231430h */ case    7:  		/* li R6, 1 */
		/* 82231430h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231430h case    7:*/		return 0x82231434;
		  /* 82231434h */ case    8:  		/* li R5, 0 */
		/* 82231434h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231434h case    8:*/		return 0x82231438;
		  /* 82231438h */ case    9:  		/* li R4, 23 */
		/* 82231438h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 82231438h case    9:*/		return 0x8223143C;
		  /* 8223143Ch */ case   10:  		/* mr R3, R30 */
		/* 8223143Ch case   10:*/		regs.R3 = regs.R30;
		/* 8223143Ch case   10:*/		return 0x82231440;
		  /* 82231440h */ case   11:  		/* bl -866464 */
		/* 82231440h case   11:*/		regs.LR = 0x82231444; return 0x8215DBA0;
		/* 82231440h case   11:*/		return 0x82231444;
	}
	return 0x82231444;
} // Block from 82231414h-82231444h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82231444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231444);
		  /* 82231444h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231444h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231444h case    0:*/		return 0x82231448;
		  /* 82231448h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82231448h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223147C;  }
		/* 82231448h case    1:*/		return 0x8223144C;
		  /* 8223144Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8223144Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223144Ch case    2:*/		return 0x82231450;
		  /* 82231450h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82231450h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223147C;  }
		/* 82231450h case    3:*/		return 0x82231454;
		  /* 82231454h */ case    4:  		/* lis R11, -32216 */
		/* 82231454h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231454h case    4:*/		return 0x82231458;
		  /* 82231458h */ case    5:  		/* mtspr CTR, R29 */
		/* 82231458h case    5:*/		regs.CTR = regs.R29;
		/* 82231458h case    5:*/		return 0x8223145C;
		  /* 8223145Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223145Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223145Ch case    6:*/		return 0x82231460;
		  /* 82231460h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231460h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231460h case    7:*/		return 0x82231464;
		  /* 82231464h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82231464h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82231464h case    8:*/		return 0x82231468;
		  /* 82231468h */ case    9:  		/* li R7, 1 */
		/* 82231468h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82231468h case    9:*/		return 0x8223146C;
		  /* 8223146Ch */ case   10:  		/* li R6, 38 */
		/* 8223146Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x26);
		/* 8223146Ch case   10:*/		return 0x82231470;
		  /* 82231470h */ case   11:  		/* mr R3, R28 */
		/* 82231470h case   11:*/		regs.R3 = regs.R28;
		/* 82231470h case   11:*/		return 0x82231474;
		  /* 82231474h */ case   12:  		/* lwz R5, <#[R11 + 152]> */
		/* 82231474h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000098) );
		/* 82231474h case   12:*/		return 0x82231478;
		  /* 82231478h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82231478h case   13:*/		if ( 1 ) { regs.LR = 0x8223147C; return (uint32)regs.CTR; }
		/* 82231478h case   13:*/		return 0x8223147C;
	}
	return 0x8223147C;
} // Block from 82231444h-8223147Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223147Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223147C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223147C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223147C);
		  /* 8223147Ch */ case    0:  		/* li R3, 1 */
		/* 8223147Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223147Ch case    0:*/		return 0x82231480;
		  /* 82231480h */ case    1:  		/* b 92 */
		/* 82231480h case    1:*/		return 0x822314DC;
		/* 82231480h case    1:*/		return 0x82231484;
	}
	return 0x82231484;
} // Block from 8223147Ch-82231484h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231484);
		  /* 82231484h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82231484h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82231484h case    0:*/		return 0x82231488;
		  /* 82231488h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231488h case    1:*/		if ( regs.CR[6].eq ) { return 0x822314A0;  }
		/* 82231488h case    1:*/		return 0x8223148C;
		  /* 8223148Ch */ case    2:  		/* li R6, 0 */
		/* 8223148Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223148Ch case    2:*/		return 0x82231490;
		  /* 82231490h */ case    3:  		/* li R5, 0 */
		/* 82231490h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231490h case    3:*/		return 0x82231494;
		  /* 82231494h */ case    4:  		/* li R4, 23 */
		/* 82231494h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 82231494h case    4:*/		return 0x82231498;
		  /* 82231498h */ case    5:  		/* mr R3, R30 */
		/* 82231498h case    5:*/		regs.R3 = regs.R30;
		/* 82231498h case    5:*/		return 0x8223149C;
		  /* 8223149Ch */ case    6:  		/* bl -866556 */
		/* 8223149Ch case    6:*/		regs.LR = 0x822314A0; return 0x8215DBA0;
		/* 8223149Ch case    6:*/		return 0x822314A0;
	}
	return 0x822314A0;
} // Block from 82231484h-822314A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822314A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822314A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822314A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822314A0);
		  /* 822314A0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822314A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822314A0h case    0:*/		return 0x822314A4;
		  /* 822314A4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822314A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x822314D8;  }
		/* 822314A4h case    1:*/		return 0x822314A8;
		  /* 822314A8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 822314A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822314A8h case    2:*/		return 0x822314AC;
		  /* 822314ACh */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822314ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x822314D8;  }
		/* 822314ACh case    3:*/		return 0x822314B0;
		  /* 822314B0h */ case    4:  		/* lis R11, -32216 */
		/* 822314B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822314B0h case    4:*/		return 0x822314B4;
		  /* 822314B4h */ case    5:  		/* mtspr CTR, R29 */
		/* 822314B4h case    5:*/		regs.CTR = regs.R29;
		/* 822314B4h case    5:*/		return 0x822314B8;
		  /* 822314B8h */ case    6:  		/* lis R10, -32252 */
		/* 822314B8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822314B8h case    6:*/		return 0x822314BC;
		  /* 822314BCh */ case    7:  		/* addi R11, R11, 11160 */
		/* 822314BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822314BCh case    7:*/		return 0x822314C0;
		  /* 822314C0h */ case    8:  		/* addi R4, R10, 4320 */
		/* 822314C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 822314C0h case    8:*/		return 0x822314C4;
		  /* 822314C4h */ case    9:  		/* li R7, 0 */
		/* 822314C4h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822314C4h case    9:*/		return 0x822314C8;
		  /* 822314C8h */ case   10:  		/* li R6, 38 */
		/* 822314C8h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x26);
		/* 822314C8h case   10:*/		return 0x822314CC;
		  /* 822314CCh */ case   11:  		/* mr R3, R28 */
		/* 822314CCh case   11:*/		regs.R3 = regs.R28;
		/* 822314CCh case   11:*/		return 0x822314D0;
		  /* 822314D0h */ case   12:  		/* lwz R5, <#[R11 + 152]> */
		/* 822314D0h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000098) );
		/* 822314D0h case   12:*/		return 0x822314D4;
		  /* 822314D4h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 822314D4h case   13:*/		if ( 1 ) { regs.LR = 0x822314D8; return (uint32)regs.CTR; }
		/* 822314D4h case   13:*/		return 0x822314D8;
	}
	return 0x822314D8;
} // Block from 822314A0h-822314D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822314D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822314D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822314D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822314D8);
		  /* 822314D8h */ case    0:  		/* li R3, 0 */
		/* 822314D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822314D8h case    0:*/		return 0x822314DC;
	}
	return 0x822314DC;
} // Block from 822314D8h-822314DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822314DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822314DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822314DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822314DC);
		  /* 822314DCh */ case    0:  		/* addi R1, R1, 128 */
		/* 822314DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822314DCh case    0:*/		return 0x822314E0;
		  /* 822314E0h */ case    1:  		/* b -1704504 */
		/* 822314E0h case    1:*/		return 0x820912A8;
		/* 822314E0h case    1:*/		return 0x822314E4;
		  /* 822314E4h */ case    2:  		/* nop */
		/* 822314E4h case    2:*/		cpu::op::nop();
		/* 822314E4h case    2:*/		return 0x822314E8;
	}
	return 0x822314E8;
} // Block from 822314DCh-822314E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822314E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822314E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822314E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822314E8);
		  /* 822314E8h */ case    0:  		/* mfspr R12, LR */
		/* 822314E8h case    0:*/		regs.R12 = regs.LR;
		/* 822314E8h case    0:*/		return 0x822314EC;
		  /* 822314ECh */ case    1:  		/* bl -1704596 */
		/* 822314ECh case    1:*/		regs.LR = 0x822314F0; return 0x82091258;
		/* 822314ECh case    1:*/		return 0x822314F0;
		  /* 822314F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822314F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822314F0h case    2:*/		return 0x822314F4;
		  /* 822314F4h */ case    3:  		/* mr R31, R4 */
		/* 822314F4h case    3:*/		regs.R31 = regs.R4;
		/* 822314F4h case    3:*/		return 0x822314F8;
	}
	return 0x822314F8;
} // Block from 822314E8h-822314F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822314F8h
// Function '?CompileWithTableFogALU@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822314F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822314F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822314F8);
		  /* 822314F8h */ case    0:  		/* mr R30, R5 */
		/* 822314F8h case    0:*/		regs.R30 = regs.R5;
		/* 822314F8h case    0:*/		return 0x822314FC;
		  /* 822314FCh */ case    1:  		/* mr R29, R6 */
		/* 822314FCh case    1:*/		regs.R29 = regs.R6;
		/* 822314FCh case    1:*/		return 0x82231500;
		  /* 82231500h */ case    2:  		/* mr R28, R7 */
		/* 82231500h case    2:*/		regs.R28 = regs.R7;
		/* 82231500h case    2:*/		return 0x82231504;
		  /* 82231504h */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82231504h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231504h case    3:*/		return 0x82231508;
		  /* 82231508h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 82231508h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8223152C;  }
		/* 82231508h case    4:*/		return 0x8223150C;
		  /* 8223150Ch */ case    5:  		/* lis R11, -32252 */
		/* 8223150Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223150Ch case    5:*/		return 0x82231510;
		  /* 82231510h */ case    6:  		/* lis R10, -32253 */
		/* 82231510h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231510h case    6:*/		return 0x82231514;
		  /* 82231514h */ case    7:  		/* lis R9, -32253 */
		/* 82231514h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231514h case    7:*/		return 0x82231518;
		  /* 82231518h */ case    8:  		/* addi R6, R11, 4336 */
		/* 82231518h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231518h case    8:*/		return 0x8223151C;
		  /* 8223151Ch */ case    9:  		/* addi R5, R10, 27792 */
		/* 8223151Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8223151Ch case    9:*/		return 0x82231520;
		  /* 82231520h */ case   10:  		/* addi R4, R9, 27460 */
		/* 82231520h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231520h case   10:*/		return 0x82231524;
		  /* 82231524h */ case   11:  		/* li R7, 1877 */
		/* 82231524h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x755);
		/* 82231524h case   11:*/		return 0x82231528;
		  /* 82231528h */ case   12:  		/* bl -891168 */
		/* 82231528h case   12:*/		regs.LR = 0x8223152C; return 0x82157C08;
		/* 82231528h case   12:*/		return 0x8223152C;
	}
	return 0x8223152C;
} // Block from 822314F8h-8223152Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223152Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223152C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223152C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223152C);
		  /* 8223152Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8223152Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223152Ch case    0:*/		return 0x82231530;
		  /* 82231530h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231530h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231548;  }
		/* 82231530h case    1:*/		return 0x82231534;
		  /* 82231534h */ case    2:  		/* li R6, 0 */
		/* 82231534h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231534h case    2:*/		return 0x82231538;
		  /* 82231538h */ case    3:  		/* mr R5, R31 */
		/* 82231538h case    3:*/		regs.R5 = regs.R31;
		/* 82231538h case    3:*/		return 0x8223153C;
		  /* 8223153Ch */ case    4:  		/* li R4, 24 */
		/* 8223153Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8223153Ch case    4:*/		return 0x82231540;
		  /* 82231540h */ case    5:  		/* mr R3, R30 */
		/* 82231540h case    5:*/		regs.R3 = regs.R30;
		/* 82231540h case    5:*/		return 0x82231544;
		  /* 82231544h */ case    6:  		/* bl -866724 */
		/* 82231544h case    6:*/		regs.LR = 0x82231548; return 0x8215DBA0;
		/* 82231544h case    6:*/		return 0x82231548;
	}
	return 0x82231548;
} // Block from 8223152Ch-82231548h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231548);
		  /* 82231548h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231548h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231548h case    0:*/		return 0x8223154C;
		  /* 8223154Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223154Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82231584;  }
		/* 8223154Ch case    1:*/		return 0x82231550;
		  /* 82231550h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82231550h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231550h case    2:*/		return 0x82231554;
		  /* 82231554h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231554h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231584;  }
		/* 82231554h case    3:*/		return 0x82231558;
		  /* 82231558h */ case    4:  		/* lis R11, -32216 */
		/* 82231558h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231558h case    4:*/		return 0x8223155C;
		  /* 8223155Ch */ case    5:  		/* mtspr CTR, R29 */
		/* 8223155Ch case    5:*/		regs.CTR = regs.R29;
		/* 8223155Ch case    5:*/		return 0x82231560;
		  /* 82231560h */ case    6:  		/* lis R10, -32252 */
		/* 82231560h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231560h case    6:*/		return 0x82231564;
		  /* 82231564h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231564h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231564h case    7:*/		return 0x82231568;
		  /* 82231568h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231568h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231568h case    8:*/		return 0x8223156C;
		  /* 8223156Ch */ case    9:  		/* li R8, 0 */
		/* 8223156Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223156Ch case    9:*/		return 0x82231570;
		  /* 82231570h */ case   10:  		/* mr R7, R31 */
		/* 82231570h case   10:*/		regs.R7 = regs.R31;
		/* 82231570h case   10:*/		return 0x82231574;
		  /* 82231574h */ case   11:  		/* li R6, 39 */
		/* 82231574h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x27);
		/* 82231574h case   11:*/		return 0x82231578;
		  /* 82231578h */ case   12:  		/* mr R3, R28 */
		/* 82231578h case   12:*/		regs.R3 = regs.R28;
		/* 82231578h case   12:*/		return 0x8223157C;
		  /* 8223157Ch */ case   13:  		/* lwz R5, <#[R11 + 156]> */
		/* 8223157Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000009C) );
		/* 8223157Ch case   13:*/		return 0x82231580;
		  /* 82231580h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231580h case   14:*/		if ( 1 ) { regs.LR = 0x82231584; return (uint32)regs.CTR; }
		/* 82231580h case   14:*/		return 0x82231584;
	}
	return 0x82231584;
} // Block from 82231548h-82231584h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231584);
		  /* 82231584h */ case    0:  		/* li R3, 0 */
		/* 82231584h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231584h case    0:*/		return 0x82231588;
		  /* 82231588h */ case    1:  		/* addi R1, R1, 128 */
		/* 82231588h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231588h case    1:*/		return 0x8223158C;
		  /* 8223158Ch */ case    2:  		/* b -1704676 */
		/* 8223158Ch case    2:*/		return 0x820912A8;
		/* 8223158Ch case    2:*/		return 0x82231590;
	}
	return 0x82231590;
} // Block from 82231584h-82231590h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82231590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231590);
		  /* 82231590h */ case    0:  		/* mfspr R12, LR */
		/* 82231590h case    0:*/		regs.R12 = regs.LR;
		/* 82231590h case    0:*/		return 0x82231594;
		  /* 82231594h */ case    1:  		/* bl -1704772 */
		/* 82231594h case    1:*/		regs.LR = 0x82231598; return 0x82091250;
		/* 82231594h case    1:*/		return 0x82231598;
		  /* 82231598h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82231598h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82231598h case    2:*/		return 0x8223159C;
		  /* 8223159Ch */ case    3:  		/* mr R31, R3 */
		/* 8223159Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223159Ch case    3:*/		return 0x822315A0;
		  /* 822315A0h */ case    4:  		/* mr R30, R4 */
		/* 822315A0h case    4:*/		regs.R30 = regs.R4;
		/* 822315A0h case    4:*/		return 0x822315A4;
		  /* 822315A4h */ case    5:  		/* mr R29, R5 */
		/* 822315A4h case    5:*/		regs.R29 = regs.R5;
		/* 822315A4h case    5:*/		return 0x822315A8;
		  /* 822315A8h */ case    6:  		/* mr R27, R6 */
		/* 822315A8h case    6:*/		regs.R27 = regs.R6;
		/* 822315A8h case    6:*/		return 0x822315AC;
		  /* 822315ACh */ case    7:  		/* mr R26, R7 */
		/* 822315ACh case    7:*/		regs.R26 = regs.R7;
		/* 822315ACh case    7:*/		return 0x822315B0;
		  /* 822315B0h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822315B0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822315B0h case    8:*/		return 0x822315B4;
		  /* 822315B4h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 822315B4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x822315D8;  }
		/* 822315B4h case    9:*/		return 0x822315B8;
		  /* 822315B8h */ case   10:  		/* lis R11, -32252 */
		/* 822315B8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822315B8h case   10:*/		return 0x822315BC;
		  /* 822315BCh */ case   11:  		/* lis R10, -32253 */
		/* 822315BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822315BCh case   11:*/		return 0x822315C0;
		  /* 822315C0h */ case   12:  		/* lis R9, -32253 */
		/* 822315C0h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822315C0h case   12:*/		return 0x822315C4;
		  /* 822315C4h */ case   13:  		/* addi R6, R11, 4336 */
		/* 822315C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822315C4h case   13:*/		return 0x822315C8;
		  /* 822315C8h */ case   14:  		/* addi R5, R10, 27792 */
		/* 822315C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822315C8h case   14:*/		return 0x822315CC;
		  /* 822315CCh */ case   15:  		/* addi R4, R9, 27460 */
		/* 822315CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822315CCh case   15:*/		return 0x822315D0;
		  /* 822315D0h */ case   16:  		/* li R7, 1932 */
		/* 822315D0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x78C);
		/* 822315D0h case   16:*/		return 0x822315D4;
		  /* 822315D4h */ case   17:  		/* bl -891340 */
		/* 822315D4h case   17:*/		regs.LR = 0x822315D8; return 0x82157C08;
		/* 822315D4h case   17:*/		return 0x822315D8;
	}
	return 0x822315D8;
} // Block from 82231590h-822315D8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822315D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822315D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822315D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822315D8);
		  /* 822315D8h */ case    0:  		/* mr R5, R30 */
		/* 822315D8h case    0:*/		regs.R5 = regs.R30;
		/* 822315D8h case    0:*/		return 0x822315DC;
		  /* 822315DCh */ case    1:  		/* li R4, 20 */
		/* 822315DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 822315DCh case    1:*/		return 0x822315E0;
		  /* 822315E0h */ case    2:  		/* mr R3, R31 */
		/* 822315E0h case    2:*/		regs.R3 = regs.R31;
		/* 822315E0h case    2:*/		return 0x822315E4;
		  /* 822315E4h */ case    3:  		/* bl -867748 */
		/* 822315E4h case    3:*/		regs.LR = 0x822315E8; return 0x8215D840;
		/* 822315E4h case    3:*/		return 0x822315E8;
		  /* 822315E8h */ case    4:  		/* mr R28, R3 */
		/* 822315E8h case    4:*/		regs.R28 = regs.R3;
		/* 822315E8h case    4:*/		return 0x822315EC;
		  /* 822315ECh */ case    5:  		/* mr R5, R30 */
		/* 822315ECh case    5:*/		regs.R5 = regs.R30;
		/* 822315ECh case    5:*/		return 0x822315F0;
		  /* 822315F0h */ case    6:  		/* li R4, 23 */
		/* 822315F0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 822315F0h case    6:*/		return 0x822315F4;
		  /* 822315F4h */ case    7:  		/* mr R3, R31 */
		/* 822315F4h case    7:*/		regs.R3 = regs.R31;
		/* 822315F4h case    7:*/		return 0x822315F8;
		  /* 822315F8h */ case    8:  		/* bl -867768 */
		/* 822315F8h case    8:*/		regs.LR = 0x822315FC; return 0x8215D840;
		/* 822315F8h case    8:*/		return 0x822315FC;
		  /* 822315FCh */ case    9:  		/* cmplwi CR6, R3, 1 */
		/* 822315FCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 822315FCh case    9:*/		return 0x82231600;
		  /* 82231600h */ case   10:  		/* bc 4, CR6_EQ, 108 */
		/* 82231600h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8223166C;  }
		/* 82231600h case   10:*/		return 0x82231604;
		  /* 82231604h */ case   11:  		/* cmplwi CR6, R28, 1 */
		/* 82231604h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 82231604h case   11:*/		return 0x82231608;
		  /* 82231608h */ case   12:  		/* bc 4, CR6_EQ, 100 */
		/* 82231608h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8223166C;  }
		/* 82231608h case   12:*/		return 0x8223160C;
		  /* 8223160Ch */ case   13:  		/* cmplwi CR6, R29, 0 */
		/* 8223160Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223160Ch case   13:*/		return 0x82231610;
	}
	return 0x82231610;
} // Block from 822315D8h-82231610h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82231610h
// Function '?CompileWithTableFogLinear@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231610);
		  /* 82231610h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 82231610h case    0:*/		if ( regs.CR[6].eq ) { return 0x82231628;  }
		/* 82231610h case    0:*/		return 0x82231614;
		  /* 82231614h */ case    1:  		/* li R6, 1 */
		/* 82231614h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231614h case    1:*/		return 0x82231618;
		  /* 82231618h */ case    2:  		/* mr R5, R30 */
		/* 82231618h case    2:*/		regs.R5 = regs.R30;
		/* 82231618h case    2:*/		return 0x8223161C;
		  /* 8223161Ch */ case    3:  		/* li R4, 25 */
		/* 8223161Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x19);
		/* 8223161Ch case    3:*/		return 0x82231620;
		  /* 82231620h */ case    4:  		/* mr R3, R29 */
		/* 82231620h case    4:*/		regs.R3 = regs.R29;
		/* 82231620h case    4:*/		return 0x82231624;
		  /* 82231624h */ case    5:  		/* bl -866948 */
		/* 82231624h case    5:*/		regs.LR = 0x82231628; return 0x8215DBA0;
		/* 82231624h case    5:*/		return 0x82231628;
	}
	return 0x82231628;
} // Block from 82231610h-82231628h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231628);
		  /* 82231628h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82231628h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231628h case    0:*/		return 0x8223162C;
		  /* 8223162Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223162Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82231664;  }
		/* 8223162Ch case    1:*/		return 0x82231630;
		  /* 82231630h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82231630h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82231630h case    2:*/		return 0x82231634;
		  /* 82231634h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231634h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231664;  }
		/* 82231634h case    3:*/		return 0x82231638;
		  /* 82231638h */ case    4:  		/* lis R11, -32216 */
		/* 82231638h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231638h case    4:*/		return 0x8223163C;
		  /* 8223163Ch */ case    5:  		/* mtspr CTR, R27 */
		/* 8223163Ch case    5:*/		regs.CTR = regs.R27;
		/* 8223163Ch case    5:*/		return 0x82231640;
		  /* 82231640h */ case    6:  		/* lis R10, -32252 */
		/* 82231640h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231640h case    6:*/		return 0x82231644;
		  /* 82231644h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231644h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231644h case    7:*/		return 0x82231648;
		  /* 82231648h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231648h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231648h case    8:*/		return 0x8223164C;
		  /* 8223164Ch */ case    9:  		/* li R8, 1 */
		/* 8223164Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8223164Ch case    9:*/		return 0x82231650;
		  /* 82231650h */ case   10:  		/* mr R7, R30 */
		/* 82231650h case   10:*/		regs.R7 = regs.R30;
		/* 82231650h case   10:*/		return 0x82231654;
		  /* 82231654h */ case   11:  		/* li R6, 44 */
		/* 82231654h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2C);
		/* 82231654h case   11:*/		return 0x82231658;
		  /* 82231658h */ case   12:  		/* mr R3, R26 */
		/* 82231658h case   12:*/		regs.R3 = regs.R26;
		/* 82231658h case   12:*/		return 0x8223165C;
		  /* 8223165Ch */ case   13:  		/* lwz R5, <#[R11 + 176]> */
		/* 8223165Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000B0) );
		/* 8223165Ch case   13:*/		return 0x82231660;
		  /* 82231660h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231660h case   14:*/		if ( 1 ) { regs.LR = 0x82231664; return (uint32)regs.CTR; }
		/* 82231660h case   14:*/		return 0x82231664;
	}
	return 0x82231664;
} // Block from 82231628h-82231664h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231664);
		  /* 82231664h */ case    0:  		/* li R3, 1 */
		/* 82231664h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231664h case    0:*/		return 0x82231668;
		  /* 82231668h */ case    1:  		/* b 96 */
		/* 82231668h case    1:*/		return 0x822316C8;
		/* 82231668h case    1:*/		return 0x8223166C;
	}
	return 0x8223166C;
} // Block from 82231664h-8223166Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223166Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223166C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223166C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223166C);
		  /* 8223166Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223166Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223166Ch case    0:*/		return 0x82231670;
		  /* 82231670h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231670h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231688;  }
		/* 82231670h case    1:*/		return 0x82231674;
		  /* 82231674h */ case    2:  		/* li R6, 0 */
		/* 82231674h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231674h case    2:*/		return 0x82231678;
		  /* 82231678h */ case    3:  		/* mr R5, R30 */
		/* 82231678h case    3:*/		regs.R5 = regs.R30;
		/* 82231678h case    3:*/		return 0x8223167C;
		  /* 8223167Ch */ case    4:  		/* li R4, 25 */
		/* 8223167Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x19);
		/* 8223167Ch case    4:*/		return 0x82231680;
		  /* 82231680h */ case    5:  		/* mr R3, R29 */
		/* 82231680h case    5:*/		regs.R3 = regs.R29;
		/* 82231680h case    5:*/		return 0x82231684;
		  /* 82231684h */ case    6:  		/* bl -867044 */
		/* 82231684h case    6:*/		regs.LR = 0x82231688; return 0x8215DBA0;
		/* 82231684h case    6:*/		return 0x82231688;
	}
	return 0x82231688;
} // Block from 8223166Ch-82231688h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231688);
		  /* 82231688h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82231688h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231688h case    0:*/		return 0x8223168C;
		  /* 8223168Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223168Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822316C4;  }
		/* 8223168Ch case    1:*/		return 0x82231690;
		  /* 82231690h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82231690h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82231690h case    2:*/		return 0x82231694;
		  /* 82231694h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231694h case    3:*/		if ( regs.CR[6].eq ) { return 0x822316C4;  }
		/* 82231694h case    3:*/		return 0x82231698;
		  /* 82231698h */ case    4:  		/* lis R11, -32216 */
		/* 82231698h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231698h case    4:*/		return 0x8223169C;
		  /* 8223169Ch */ case    5:  		/* mtspr CTR, R27 */
		/* 8223169Ch case    5:*/		regs.CTR = regs.R27;
		/* 8223169Ch case    5:*/		return 0x822316A0;
		  /* 822316A0h */ case    6:  		/* lis R10, -32252 */
		/* 822316A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822316A0h case    6:*/		return 0x822316A4;
		  /* 822316A4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822316A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822316A4h case    7:*/		return 0x822316A8;
		  /* 822316A8h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822316A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822316A8h case    8:*/		return 0x822316AC;
		  /* 822316ACh */ case    9:  		/* li R8, 0 */
		/* 822316ACh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822316ACh case    9:*/		return 0x822316B0;
		  /* 822316B0h */ case   10:  		/* mr R7, R30 */
		/* 822316B0h case   10:*/		regs.R7 = regs.R30;
		/* 822316B0h case   10:*/		return 0x822316B4;
		  /* 822316B4h */ case   11:  		/* li R6, 44 */
		/* 822316B4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2C);
		/* 822316B4h case   11:*/		return 0x822316B8;
		  /* 822316B8h */ case   12:  		/* mr R3, R26 */
		/* 822316B8h case   12:*/		regs.R3 = regs.R26;
		/* 822316B8h case   12:*/		return 0x822316BC;
		  /* 822316BCh */ case   13:  		/* lwz R5, <#[R11 + 176]> */
		/* 822316BCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000B0) );
		/* 822316BCh case   13:*/		return 0x822316C0;
		  /* 822316C0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822316C0h case   14:*/		if ( 1 ) { regs.LR = 0x822316C4; return (uint32)regs.CTR; }
		/* 822316C0h case   14:*/		return 0x822316C4;
	}
	return 0x822316C4;
} // Block from 82231688h-822316C4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822316C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822316C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822316C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822316C4);
		  /* 822316C4h */ case    0:  		/* li R3, 0 */
		/* 822316C4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822316C4h case    0:*/		return 0x822316C8;
	}
	return 0x822316C8;
} // Block from 822316C4h-822316C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822316C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822316C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822316C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822316C8);
		  /* 822316C8h */ case    0:  		/* addi R1, R1, 144 */
		/* 822316C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 822316C8h case    0:*/		return 0x822316CC;
		  /* 822316CCh */ case    1:  		/* b -1705004 */
		/* 822316CCh case    1:*/		return 0x820912A0;
		/* 822316CCh case    1:*/		return 0x822316D0;
	}
	return 0x822316D0;
} // Block from 822316C8h-822316D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822316D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822316D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822316D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822316D0);
		  /* 822316D0h */ case    0:  		/* mfspr R12, LR */
		/* 822316D0h case    0:*/		regs.R12 = regs.LR;
		/* 822316D0h case    0:*/		return 0x822316D4;
		  /* 822316D4h */ case    1:  		/* bl -1705092 */
		/* 822316D4h case    1:*/		regs.LR = 0x822316D8; return 0x82091250;
		/* 822316D4h case    1:*/		return 0x822316D8;
		  /* 822316D8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822316D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822316D8h case    2:*/		return 0x822316DC;
		  /* 822316DCh */ case    3:  		/* mr R31, R3 */
		/* 822316DCh case    3:*/		regs.R31 = regs.R3;
		/* 822316DCh case    3:*/		return 0x822316E0;
		  /* 822316E0h */ case    4:  		/* mr R30, R4 */
		/* 822316E0h case    4:*/		regs.R30 = regs.R4;
		/* 822316E0h case    4:*/		return 0x822316E4;
		  /* 822316E4h */ case    5:  		/* mr R29, R5 */
		/* 822316E4h case    5:*/		regs.R29 = regs.R5;
		/* 822316E4h case    5:*/		return 0x822316E8;
		  /* 822316E8h */ case    6:  		/* mr R27, R6 */
		/* 822316E8h case    6:*/		regs.R27 = regs.R6;
		/* 822316E8h case    6:*/		return 0x822316EC;
		  /* 822316ECh */ case    7:  		/* mr R26, R7 */
		/* 822316ECh case    7:*/		regs.R26 = regs.R7;
		/* 822316ECh case    7:*/		return 0x822316F0;
		  /* 822316F0h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822316F0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822316F0h case    8:*/		return 0x822316F4;
		  /* 822316F4h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 822316F4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82231718;  }
		/* 822316F4h case    9:*/		return 0x822316F8;
		  /* 822316F8h */ case   10:  		/* lis R11, -32252 */
		/* 822316F8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822316F8h case   10:*/		return 0x822316FC;
		  /* 822316FCh */ case   11:  		/* lis R10, -32253 */
		/* 822316FCh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822316FCh case   11:*/		return 0x82231700;
		  /* 82231700h */ case   12:  		/* lis R9, -32253 */
		/* 82231700h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231700h case   12:*/		return 0x82231704;
		  /* 82231704h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82231704h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231704h case   13:*/		return 0x82231708;
		  /* 82231708h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82231708h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231708h case   14:*/		return 0x8223170C;
		  /* 8223170Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223170Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223170Ch case   15:*/		return 0x82231710;
		  /* 82231710h */ case   16:  		/* li R7, 1991 */
		/* 82231710h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x7C7);
		/* 82231710h case   16:*/		return 0x82231714;
		  /* 82231714h */ case   17:  		/* bl -891660 */
		/* 82231714h case   17:*/		regs.LR = 0x82231718; return 0x82157C08;
		/* 82231714h case   17:*/		return 0x82231718;
	}
	return 0x82231718;
} // Block from 822316D0h-82231718h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82231718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231718);
		  /* 82231718h */ case    0:  		/* mr R5, R30 */
		/* 82231718h case    0:*/		regs.R5 = regs.R30;
		/* 82231718h case    0:*/		return 0x8223171C;
		  /* 8223171Ch */ case    1:  		/* li R4, 20 */
		/* 8223171Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223171Ch case    1:*/		return 0x82231720;
		  /* 82231720h */ case    2:  		/* mr R3, R31 */
		/* 82231720h case    2:*/		regs.R3 = regs.R31;
		/* 82231720h case    2:*/		return 0x82231724;
		  /* 82231724h */ case    3:  		/* bl -868068 */
		/* 82231724h case    3:*/		regs.LR = 0x82231728; return 0x8215D840;
		/* 82231724h case    3:*/		return 0x82231728;
	}
	return 0x82231728;
} // Block from 82231718h-82231728h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82231728h
// Function '?CompileWithTableFogExp@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231728);
		  /* 82231728h */ case    0:  		/* mr R28, R3 */
		/* 82231728h case    0:*/		regs.R28 = regs.R3;
		/* 82231728h case    0:*/		return 0x8223172C;
		  /* 8223172Ch */ case    1:  		/* mr R5, R30 */
		/* 8223172Ch case    1:*/		regs.R5 = regs.R30;
		/* 8223172Ch case    1:*/		return 0x82231730;
		  /* 82231730h */ case    2:  		/* li R4, 21 */
		/* 82231730h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 82231730h case    2:*/		return 0x82231734;
		  /* 82231734h */ case    3:  		/* mr R3, R31 */
		/* 82231734h case    3:*/		regs.R3 = regs.R31;
		/* 82231734h case    3:*/		return 0x82231738;
		  /* 82231738h */ case    4:  		/* bl -868088 */
		/* 82231738h case    4:*/		regs.LR = 0x8223173C; return 0x8215D840;
		/* 82231738h case    4:*/		return 0x8223173C;
		  /* 8223173Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8223173Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8223173Ch case    5:*/		return 0x82231740;
		  /* 82231740h */ case    6:  		/* bc 4, CR0_EQ, 108 */
		/* 82231740h case    6:*/		if ( !regs.CR[0].eq ) { return 0x822317AC;  }
		/* 82231740h case    6:*/		return 0x82231744;
		  /* 82231744h */ case    7:  		/* cmplwi CR6, R28, 1 */
		/* 82231744h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 82231744h case    7:*/		return 0x82231748;
		  /* 82231748h */ case    8:  		/* bc 4, CR6_EQ, 100 */
		/* 82231748h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822317AC;  }
		/* 82231748h case    8:*/		return 0x8223174C;
		  /* 8223174Ch */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 8223174Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223174Ch case    9:*/		return 0x82231750;
		  /* 82231750h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82231750h case   10:*/		if ( regs.CR[6].eq ) { return 0x82231768;  }
		/* 82231750h case   10:*/		return 0x82231754;
		  /* 82231754h */ case   11:  		/* li R6, 1 */
		/* 82231754h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231754h case   11:*/		return 0x82231758;
		  /* 82231758h */ case   12:  		/* mr R5, R30 */
		/* 82231758h case   12:*/		regs.R5 = regs.R30;
		/* 82231758h case   12:*/		return 0x8223175C;
		  /* 8223175Ch */ case   13:  		/* li R4, 26 */
		/* 8223175Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1A);
		/* 8223175Ch case   13:*/		return 0x82231760;
		  /* 82231760h */ case   14:  		/* mr R3, R29 */
		/* 82231760h case   14:*/		regs.R3 = regs.R29;
		/* 82231760h case   14:*/		return 0x82231764;
		  /* 82231764h */ case   15:  		/* bl -867268 */
		/* 82231764h case   15:*/		regs.LR = 0x82231768; return 0x8215DBA0;
		/* 82231764h case   15:*/		return 0x82231768;
	}
	return 0x82231768;
} // Block from 82231728h-82231768h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82231768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231768);
		  /* 82231768h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82231768h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231768h case    0:*/		return 0x8223176C;
		  /* 8223176Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223176Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822317A4;  }
		/* 8223176Ch case    1:*/		return 0x82231770;
		  /* 82231770h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82231770h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82231770h case    2:*/		return 0x82231774;
		  /* 82231774h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231774h case    3:*/		if ( regs.CR[6].eq ) { return 0x822317A4;  }
		/* 82231774h case    3:*/		return 0x82231778;
		  /* 82231778h */ case    4:  		/* lis R11, -32216 */
		/* 82231778h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231778h case    4:*/		return 0x8223177C;
		  /* 8223177Ch */ case    5:  		/* mtspr CTR, R27 */
		/* 8223177Ch case    5:*/		regs.CTR = regs.R27;
		/* 8223177Ch case    5:*/		return 0x82231780;
		  /* 82231780h */ case    6:  		/* lis R10, -32252 */
		/* 82231780h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231780h case    6:*/		return 0x82231784;
		  /* 82231784h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231784h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231784h case    7:*/		return 0x82231788;
		  /* 82231788h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231788h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231788h case    8:*/		return 0x8223178C;
		  /* 8223178Ch */ case    9:  		/* li R8, 1 */
		/* 8223178Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8223178Ch case    9:*/		return 0x82231790;
		  /* 82231790h */ case   10:  		/* mr R7, R30 */
		/* 82231790h case   10:*/		regs.R7 = regs.R30;
		/* 82231790h case   10:*/		return 0x82231794;
		  /* 82231794h */ case   11:  		/* li R6, 45 */
		/* 82231794h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2D);
		/* 82231794h case   11:*/		return 0x82231798;
		  /* 82231798h */ case   12:  		/* mr R3, R26 */
		/* 82231798h case   12:*/		regs.R3 = regs.R26;
		/* 82231798h case   12:*/		return 0x8223179C;
		  /* 8223179Ch */ case   13:  		/* lwz R5, <#[R11 + 180]> */
		/* 8223179Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000B4) );
		/* 8223179Ch case   13:*/		return 0x822317A0;
		  /* 822317A0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822317A0h case   14:*/		if ( 1 ) { regs.LR = 0x822317A4; return (uint32)regs.CTR; }
		/* 822317A0h case   14:*/		return 0x822317A4;
	}
	return 0x822317A4;
} // Block from 82231768h-822317A4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822317A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822317A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822317A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822317A4);
		  /* 822317A4h */ case    0:  		/* li R3, 1 */
		/* 822317A4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822317A4h case    0:*/		return 0x822317A8;
		  /* 822317A8h */ case    1:  		/* b 96 */
		/* 822317A8h case    1:*/		return 0x82231808;
		/* 822317A8h case    1:*/		return 0x822317AC;
	}
	return 0x822317AC;
} // Block from 822317A4h-822317ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822317ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822317AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822317AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822317AC);
		  /* 822317ACh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822317ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822317ACh case    0:*/		return 0x822317B0;
		  /* 822317B0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822317B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x822317C8;  }
		/* 822317B0h case    1:*/		return 0x822317B4;
		  /* 822317B4h */ case    2:  		/* li R6, 0 */
		/* 822317B4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822317B4h case    2:*/		return 0x822317B8;
		  /* 822317B8h */ case    3:  		/* mr R5, R30 */
		/* 822317B8h case    3:*/		regs.R5 = regs.R30;
		/* 822317B8h case    3:*/		return 0x822317BC;
		  /* 822317BCh */ case    4:  		/* li R4, 26 */
		/* 822317BCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1A);
		/* 822317BCh case    4:*/		return 0x822317C0;
		  /* 822317C0h */ case    5:  		/* mr R3, R29 */
		/* 822317C0h case    5:*/		regs.R3 = regs.R29;
		/* 822317C0h case    5:*/		return 0x822317C4;
		  /* 822317C4h */ case    6:  		/* bl -867364 */
		/* 822317C4h case    6:*/		regs.LR = 0x822317C8; return 0x8215DBA0;
		/* 822317C4h case    6:*/		return 0x822317C8;
	}
	return 0x822317C8;
} // Block from 822317ACh-822317C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822317C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822317C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822317C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822317C8);
		  /* 822317C8h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 822317C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822317C8h case    0:*/		return 0x822317CC;
		  /* 822317CCh */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822317CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82231804;  }
		/* 822317CCh case    1:*/		return 0x822317D0;
		  /* 822317D0h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 822317D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 822317D0h case    2:*/		return 0x822317D4;
		  /* 822317D4h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822317D4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231804;  }
		/* 822317D4h case    3:*/		return 0x822317D8;
		  /* 822317D8h */ case    4:  		/* lis R11, -32216 */
		/* 822317D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822317D8h case    4:*/		return 0x822317DC;
		  /* 822317DCh */ case    5:  		/* mtspr CTR, R27 */
		/* 822317DCh case    5:*/		regs.CTR = regs.R27;
		/* 822317DCh case    5:*/		return 0x822317E0;
		  /* 822317E0h */ case    6:  		/* lis R10, -32252 */
		/* 822317E0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822317E0h case    6:*/		return 0x822317E4;
		  /* 822317E4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822317E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822317E4h case    7:*/		return 0x822317E8;
		  /* 822317E8h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822317E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822317E8h case    8:*/		return 0x822317EC;
		  /* 822317ECh */ case    9:  		/* li R8, 0 */
		/* 822317ECh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822317ECh case    9:*/		return 0x822317F0;
		  /* 822317F0h */ case   10:  		/* mr R7, R30 */
		/* 822317F0h case   10:*/		regs.R7 = regs.R30;
		/* 822317F0h case   10:*/		return 0x822317F4;
		  /* 822317F4h */ case   11:  		/* li R6, 45 */
		/* 822317F4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2D);
		/* 822317F4h case   11:*/		return 0x822317F8;
		  /* 822317F8h */ case   12:  		/* mr R3, R26 */
		/* 822317F8h case   12:*/		regs.R3 = regs.R26;
		/* 822317F8h case   12:*/		return 0x822317FC;
		  /* 822317FCh */ case   13:  		/* lwz R5, <#[R11 + 180]> */
		/* 822317FCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000B4) );
		/* 822317FCh case   13:*/		return 0x82231800;
		  /* 82231800h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231800h case   14:*/		if ( 1 ) { regs.LR = 0x82231804; return (uint32)regs.CTR; }
		/* 82231800h case   14:*/		return 0x82231804;
	}
	return 0x82231804;
} // Block from 822317C8h-82231804h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231804);
		  /* 82231804h */ case    0:  		/* li R3, 0 */
		/* 82231804h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231804h case    0:*/		return 0x82231808;
	}
	return 0x82231808;
} // Block from 82231804h-82231808h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231808);
		  /* 82231808h */ case    0:  		/* addi R1, R1, 144 */
		/* 82231808h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82231808h case    0:*/		return 0x8223180C;
		  /* 8223180Ch */ case    1:  		/* b -1705324 */
		/* 8223180Ch case    1:*/		return 0x820912A0;
		/* 8223180Ch case    1:*/		return 0x82231810;
	}
	return 0x82231810;
} // Block from 82231808h-82231810h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231810);
		  /* 82231810h */ case    0:  		/* mfspr R12, LR */
		/* 82231810h case    0:*/		regs.R12 = regs.LR;
		/* 82231810h case    0:*/		return 0x82231814;
		  /* 82231814h */ case    1:  		/* bl -1705408 */
		/* 82231814h case    1:*/		regs.LR = 0x82231818; return 0x82091254;
		/* 82231814h case    1:*/		return 0x82231818;
		  /* 82231818h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231818h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231818h case    2:*/		return 0x8223181C;
		  /* 8223181Ch */ case    3:  		/* mr R31, R3 */
		/* 8223181Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223181Ch case    3:*/		return 0x82231820;
		  /* 82231820h */ case    4:  		/* mr R30, R4 */
		/* 82231820h case    4:*/		regs.R30 = regs.R4;
		/* 82231820h case    4:*/		return 0x82231824;
		  /* 82231824h */ case    5:  		/* mr R29, R5 */
		/* 82231824h case    5:*/		regs.R29 = regs.R5;
		/* 82231824h case    5:*/		return 0x82231828;
		  /* 82231828h */ case    6:  		/* mr R28, R6 */
		/* 82231828h case    6:*/		regs.R28 = regs.R6;
		/* 82231828h case    6:*/		return 0x8223182C;
		  /* 8223182Ch */ case    7:  		/* mr R27, R7 */
		/* 8223182Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223182Ch case    7:*/		return 0x82231830;
		  /* 82231830h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82231830h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231830h case    8:*/		return 0x82231834;
		  /* 82231834h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82231834h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82231858;  }
		/* 82231834h case    9:*/		return 0x82231838;
		  /* 82231838h */ case   10:  		/* lis R11, -32252 */
		/* 82231838h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231838h case   10:*/		return 0x8223183C;
		  /* 8223183Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223183Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223183Ch case   11:*/		return 0x82231840;
	}
	return 0x82231840;
} // Block from 82231810h-82231840h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82231840h
// Function '?CompileWithTableFogExp2@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231840);
		  /* 82231840h */ case    0:  		/* lis R9, -32253 */
		/* 82231840h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231840h case    0:*/		return 0x82231844;
		  /* 82231844h */ case    1:  		/* addi R6, R11, 4336 */
		/* 82231844h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231844h case    1:*/		return 0x82231848;
		  /* 82231848h */ case    2:  		/* addi R5, R10, 27792 */
		/* 82231848h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231848h case    2:*/		return 0x8223184C;
		  /* 8223184Ch */ case    3:  		/* addi R4, R9, 27460 */
		/* 8223184Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223184Ch case    3:*/		return 0x82231850;
		  /* 82231850h */ case    4:  		/* li R7, 2047 */
		/* 82231850h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x7FF);
		/* 82231850h case    4:*/		return 0x82231854;
		  /* 82231854h */ case    5:  		/* bl -891980 */
		/* 82231854h case    5:*/		regs.LR = 0x82231858; return 0x82157C08;
		/* 82231854h case    5:*/		return 0x82231858;
	}
	return 0x82231858;
} // Block from 82231840h-82231858h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231858);
		  /* 82231858h */ case    0:  		/* mr R5, R30 */
		/* 82231858h case    0:*/		regs.R5 = regs.R30;
		/* 82231858h case    0:*/		return 0x8223185C;
		  /* 8223185Ch */ case    1:  		/* li R4, 23 */
		/* 8223185Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 8223185Ch case    1:*/		return 0x82231860;
		  /* 82231860h */ case    2:  		/* mr R3, R31 */
		/* 82231860h case    2:*/		regs.R3 = regs.R31;
		/* 82231860h case    2:*/		return 0x82231864;
		  /* 82231864h */ case    3:  		/* bl -868388 */
		/* 82231864h case    3:*/		regs.LR = 0x82231868; return 0x8215D840;
		/* 82231864h case    3:*/		return 0x82231868;
		  /* 82231868h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82231868h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82231868h case    4:*/		return 0x8223186C;
		  /* 8223186Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8223186Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223186Ch case    5:*/		return 0x82231870;
		  /* 82231870h */ case    6:  		/* bc 4, CR0_EQ, 96 */
		/* 82231870h case    6:*/		if ( !regs.CR[0].eq ) { return 0x822318D0;  }
		/* 82231870h case    6:*/		return 0x82231874;
		  /* 82231874h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231874h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223188C;  }
		/* 82231874h case    7:*/		return 0x82231878;
		  /* 82231878h */ case    8:  		/* li R6, 1 */
		/* 82231878h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231878h case    8:*/		return 0x8223187C;
		  /* 8223187Ch */ case    9:  		/* li R5, 0 */
		/* 8223187Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223187Ch case    9:*/		return 0x82231880;
		  /* 82231880h */ case   10:  		/* li R4, 27 */
		/* 82231880h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82231880h case   10:*/		return 0x82231884;
		  /* 82231884h */ case   11:  		/* mr R3, R29 */
		/* 82231884h case   11:*/		regs.R3 = regs.R29;
		/* 82231884h case   11:*/		return 0x82231888;
		  /* 82231888h */ case   12:  		/* bl -867560 */
		/* 82231888h case   12:*/		regs.LR = 0x8223188C; return 0x8215DBA0;
		/* 82231888h case   12:*/		return 0x8223188C;
	}
	return 0x8223188C;
} // Block from 82231858h-8223188Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223188Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223188C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223188C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223188C);
		  /* 8223188Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8223188Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223188Ch case    0:*/		return 0x82231890;
		  /* 82231890h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231890h case    1:*/		if ( regs.CR[6].eq ) { return 0x822318C8;  }
		/* 82231890h case    1:*/		return 0x82231894;
		  /* 82231894h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231894h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231894h case    2:*/		return 0x82231898;
		  /* 82231898h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231898h case    3:*/		if ( regs.CR[6].eq ) { return 0x822318C8;  }
		/* 82231898h case    3:*/		return 0x8223189C;
		  /* 8223189Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223189Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223189Ch case    4:*/		return 0x822318A0;
		  /* 822318A0h */ case    5:  		/* mtspr CTR, R28 */
		/* 822318A0h case    5:*/		regs.CTR = regs.R28;
		/* 822318A0h case    5:*/		return 0x822318A4;
		  /* 822318A4h */ case    6:  		/* lis R10, -32252 */
		/* 822318A4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822318A4h case    6:*/		return 0x822318A8;
		  /* 822318A8h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822318A8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822318A8h case    7:*/		return 0x822318AC;
		  /* 822318ACh */ case    8:  		/* addi R4, R10, 4444 */
		/* 822318ACh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822318ACh case    8:*/		return 0x822318B0;
		  /* 822318B0h */ case    9:  		/* li R8, 1 */
		/* 822318B0h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822318B0h case    9:*/		return 0x822318B4;
		  /* 822318B4h */ case   10:  		/* mr R7, R30 */
		/* 822318B4h case   10:*/		regs.R7 = regs.R30;
		/* 822318B4h case   10:*/		return 0x822318B8;
		  /* 822318B8h */ case   11:  		/* li R6, 46 */
		/* 822318B8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2E);
		/* 822318B8h case   11:*/		return 0x822318BC;
		  /* 822318BCh */ case   12:  		/* mr R3, R27 */
		/* 822318BCh case   12:*/		regs.R3 = regs.R27;
		/* 822318BCh case   12:*/		return 0x822318C0;
		  /* 822318C0h */ case   13:  		/* lwz R5, <#[R11 + 184]> */
		/* 822318C0h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000B8) );
		/* 822318C0h case   13:*/		return 0x822318C4;
		  /* 822318C4h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822318C4h case   14:*/		if ( 1 ) { regs.LR = 0x822318C8; return (uint32)regs.CTR; }
		/* 822318C4h case   14:*/		return 0x822318C8;
	}
	return 0x822318C8;
} // Block from 8223188Ch-822318C8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822318C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822318C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822318C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822318C8);
		  /* 822318C8h */ case    0:  		/* li R3, 1 */
		/* 822318C8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822318C8h case    0:*/		return 0x822318CC;
		  /* 822318CCh */ case    1:  		/* b 92 */
		/* 822318CCh case    1:*/		return 0x82231928;
		/* 822318CCh case    1:*/		return 0x822318D0;
	}
	return 0x822318D0;
} // Block from 822318C8h-822318D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822318D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822318D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822318D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822318D0);
		  /* 822318D0h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 822318D0h case    0:*/		if ( regs.CR[6].eq ) { return 0x822318E8;  }
		/* 822318D0h case    0:*/		return 0x822318D4;
		  /* 822318D4h */ case    1:  		/* li R6, 0 */
		/* 822318D4h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822318D4h case    1:*/		return 0x822318D8;
		  /* 822318D8h */ case    2:  		/* li R5, 0 */
		/* 822318D8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822318D8h case    2:*/		return 0x822318DC;
		  /* 822318DCh */ case    3:  		/* li R4, 27 */
		/* 822318DCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 822318DCh case    3:*/		return 0x822318E0;
		  /* 822318E0h */ case    4:  		/* mr R3, R29 */
		/* 822318E0h case    4:*/		regs.R3 = regs.R29;
		/* 822318E0h case    4:*/		return 0x822318E4;
		  /* 822318E4h */ case    5:  		/* bl -867652 */
		/* 822318E4h case    5:*/		regs.LR = 0x822318E8; return 0x8215DBA0;
		/* 822318E4h case    5:*/		return 0x822318E8;
	}
	return 0x822318E8;
} // Block from 822318D0h-822318E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822318E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822318E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822318E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822318E8);
		  /* 822318E8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822318E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822318E8h case    0:*/		return 0x822318EC;
		  /* 822318ECh */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822318ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82231924;  }
		/* 822318ECh case    1:*/		return 0x822318F0;
		  /* 822318F0h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 822318F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822318F0h case    2:*/		return 0x822318F4;
		  /* 822318F4h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822318F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231924;  }
		/* 822318F4h case    3:*/		return 0x822318F8;
		  /* 822318F8h */ case    4:  		/* lis R11, -32216 */
		/* 822318F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822318F8h case    4:*/		return 0x822318FC;
		  /* 822318FCh */ case    5:  		/* mtspr CTR, R28 */
		/* 822318FCh case    5:*/		regs.CTR = regs.R28;
		/* 822318FCh case    5:*/		return 0x82231900;
		  /* 82231900h */ case    6:  		/* lis R10, -32252 */
		/* 82231900h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231900h case    6:*/		return 0x82231904;
		  /* 82231904h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231904h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231904h case    7:*/		return 0x82231908;
		  /* 82231908h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231908h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231908h case    8:*/		return 0x8223190C;
		  /* 8223190Ch */ case    9:  		/* li R8, 0 */
		/* 8223190Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223190Ch case    9:*/		return 0x82231910;
		  /* 82231910h */ case   10:  		/* mr R7, R30 */
		/* 82231910h case   10:*/		regs.R7 = regs.R30;
		/* 82231910h case   10:*/		return 0x82231914;
		  /* 82231914h */ case   11:  		/* li R6, 46 */
		/* 82231914h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2E);
		/* 82231914h case   11:*/		return 0x82231918;
		  /* 82231918h */ case   12:  		/* mr R3, R27 */
		/* 82231918h case   12:*/		regs.R3 = regs.R27;
		/* 82231918h case   12:*/		return 0x8223191C;
		  /* 8223191Ch */ case   13:  		/* lwz R5, <#[R11 + 184]> */
		/* 8223191Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000B8) );
		/* 8223191Ch case   13:*/		return 0x82231920;
		  /* 82231920h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231920h case   14:*/		if ( 1 ) { regs.LR = 0x82231924; return (uint32)regs.CTR; }
		/* 82231920h case   14:*/		return 0x82231924;
	}
	return 0x82231924;
} // Block from 822318E8h-82231924h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231924);
		  /* 82231924h */ case    0:  		/* li R3, 0 */
		/* 82231924h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231924h case    0:*/		return 0x82231928;
	}
	return 0x82231928;
} // Block from 82231924h-82231928h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231928);
		  /* 82231928h */ case    0:  		/* addi R1, R1, 128 */
		/* 82231928h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231928h case    0:*/		return 0x8223192C;
		  /* 8223192Ch */ case    1:  		/* b -1705608 */
		/* 8223192Ch case    1:*/		return 0x820912A4;
		/* 8223192Ch case    1:*/		return 0x82231930;
	}
	return 0x82231930;
} // Block from 82231928h-82231930h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231930);
		  /* 82231930h */ case    0:  		/* mfspr R12, LR */
		/* 82231930h case    0:*/		regs.R12 = regs.LR;
		/* 82231930h case    0:*/		return 0x82231934;
		  /* 82231934h */ case    1:  		/* bl -1705696 */
		/* 82231934h case    1:*/		regs.LR = 0x82231938; return 0x82091254;
		/* 82231934h case    1:*/		return 0x82231938;
		  /* 82231938h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231938h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231938h case    2:*/		return 0x8223193C;
		  /* 8223193Ch */ case    3:  		/* mr R31, R3 */
		/* 8223193Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223193Ch case    3:*/		return 0x82231940;
		  /* 82231940h */ case    4:  		/* mr R30, R4 */
		/* 82231940h case    4:*/		regs.R30 = regs.R4;
		/* 82231940h case    4:*/		return 0x82231944;
		  /* 82231944h */ case    5:  		/* mr R29, R5 */
		/* 82231944h case    5:*/		regs.R29 = regs.R5;
		/* 82231944h case    5:*/		return 0x82231948;
		  /* 82231948h */ case    6:  		/* mr R28, R6 */
		/* 82231948h case    6:*/		regs.R28 = regs.R6;
		/* 82231948h case    6:*/		return 0x8223194C;
		  /* 8223194Ch */ case    7:  		/* mr R27, R7 */
		/* 8223194Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223194Ch case    7:*/		return 0x82231950;
		  /* 82231950h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82231950h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231950h case    8:*/		return 0x82231954;
		  /* 82231954h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82231954h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82231978;  }
		/* 82231954h case    9:*/		return 0x82231958;
	}
	return 0x82231958;
} // Block from 82231930h-82231958h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82231958h
// Function '?CompileWithTwoSidedLighting@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231958);
		  /* 82231958h */ case    0:  		/* lis R11, -32252 */
		/* 82231958h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231958h case    0:*/		return 0x8223195C;
		  /* 8223195Ch */ case    1:  		/* lis R10, -32253 */
		/* 8223195Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223195Ch case    1:*/		return 0x82231960;
		  /* 82231960h */ case    2:  		/* lis R9, -32253 */
		/* 82231960h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231960h case    2:*/		return 0x82231964;
		  /* 82231964h */ case    3:  		/* addi R6, R11, 4336 */
		/* 82231964h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231964h case    3:*/		return 0x82231968;
		  /* 82231968h */ case    4:  		/* addi R5, R10, 27792 */
		/* 82231968h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231968h case    4:*/		return 0x8223196C;
		  /* 8223196Ch */ case    5:  		/* addi R4, R9, 27460 */
		/* 8223196Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223196Ch case    5:*/		return 0x82231970;
		  /* 82231970h */ case    6:  		/* li R7, 2102 */
		/* 82231970h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x836);
		/* 82231970h case    6:*/		return 0x82231974;
		  /* 82231974h */ case    7:  		/* bl -892268 */
		/* 82231974h case    7:*/		regs.LR = 0x82231978; return 0x82157C08;
		/* 82231974h case    7:*/		return 0x82231978;
	}
	return 0x82231978;
} // Block from 82231958h-82231978h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82231978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231978);
		  /* 82231978h */ case    0:  		/* mr R5, R30 */
		/* 82231978h case    0:*/		regs.R5 = regs.R30;
		/* 82231978h case    0:*/		return 0x8223197C;
		  /* 8223197Ch */ case    1:  		/* li R4, 23 */
		/* 8223197Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 8223197Ch case    1:*/		return 0x82231980;
		  /* 82231980h */ case    2:  		/* mr R3, R31 */
		/* 82231980h case    2:*/		regs.R3 = regs.R31;
		/* 82231980h case    2:*/		return 0x82231984;
		  /* 82231984h */ case    3:  		/* bl -868676 */
		/* 82231984h case    3:*/		regs.LR = 0x82231988; return 0x8215D840;
		/* 82231984h case    3:*/		return 0x82231988;
		  /* 82231988h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 82231988h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82231988h case    4:*/		return 0x8223198C;
		  /* 8223198Ch */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 8223198Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822319F0;  }
		/* 8223198Ch case    5:*/		return 0x82231990;
		  /* 82231990h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82231990h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231990h case    6:*/		return 0x82231994;
		  /* 82231994h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231994h case    7:*/		if ( regs.CR[6].eq ) { return 0x822319AC;  }
		/* 82231994h case    7:*/		return 0x82231998;
		  /* 82231998h */ case    8:  		/* li R6, 1 */
		/* 82231998h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231998h case    8:*/		return 0x8223199C;
		  /* 8223199Ch */ case    9:  		/* li R5, 0 */
		/* 8223199Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223199Ch case    9:*/		return 0x822319A0;
		  /* 822319A0h */ case   10:  		/* li R4, 28 */
		/* 822319A0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 822319A0h case   10:*/		return 0x822319A4;
		  /* 822319A4h */ case   11:  		/* mr R3, R29 */
		/* 822319A4h case   11:*/		regs.R3 = regs.R29;
		/* 822319A4h case   11:*/		return 0x822319A8;
		  /* 822319A8h */ case   12:  		/* bl -867848 */
		/* 822319A8h case   12:*/		regs.LR = 0x822319AC; return 0x8215DBA0;
		/* 822319A8h case   12:*/		return 0x822319AC;
	}
	return 0x822319AC;
} // Block from 82231978h-822319ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 822319ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822319AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822319AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822319AC);
		  /* 822319ACh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822319ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822319ACh case    0:*/		return 0x822319B0;
		  /* 822319B0h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822319B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x822319E8;  }
		/* 822319B0h case    1:*/		return 0x822319B4;
		  /* 822319B4h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 822319B4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822319B4h case    2:*/		return 0x822319B8;
		  /* 822319B8h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822319B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x822319E8;  }
		/* 822319B8h case    3:*/		return 0x822319BC;
		  /* 822319BCh */ case    4:  		/* lis R11, -32216 */
		/* 822319BCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822319BCh case    4:*/		return 0x822319C0;
		  /* 822319C0h */ case    5:  		/* mtspr CTR, R28 */
		/* 822319C0h case    5:*/		regs.CTR = regs.R28;
		/* 822319C0h case    5:*/		return 0x822319C4;
		  /* 822319C4h */ case    6:  		/* lis R10, -32252 */
		/* 822319C4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822319C4h case    6:*/		return 0x822319C8;
		  /* 822319C8h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822319C8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822319C8h case    7:*/		return 0x822319CC;
		  /* 822319CCh */ case    8:  		/* addi R4, R10, 4444 */
		/* 822319CCh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822319CCh case    8:*/		return 0x822319D0;
		  /* 822319D0h */ case    9:  		/* li R8, 1 */
		/* 822319D0h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822319D0h case    9:*/		return 0x822319D4;
		  /* 822319D4h */ case   10:  		/* mr R7, R30 */
		/* 822319D4h case   10:*/		regs.R7 = regs.R30;
		/* 822319D4h case   10:*/		return 0x822319D8;
		  /* 822319D8h */ case   11:  		/* li R6, 47 */
		/* 822319D8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2F);
		/* 822319D8h case   11:*/		return 0x822319DC;
		  /* 822319DCh */ case   12:  		/* mr R3, R27 */
		/* 822319DCh case   12:*/		regs.R3 = regs.R27;
		/* 822319DCh case   12:*/		return 0x822319E0;
		  /* 822319E0h */ case   13:  		/* lwz R5, <#[R11 + 188]> */
		/* 822319E0h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000BC) );
		/* 822319E0h case   13:*/		return 0x822319E4;
		  /* 822319E4h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822319E4h case   14:*/		if ( 1 ) { regs.LR = 0x822319E8; return (uint32)regs.CTR; }
		/* 822319E4h case   14:*/		return 0x822319E8;
	}
	return 0x822319E8;
} // Block from 822319ACh-822319E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822319E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822319E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822319E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822319E8);
		  /* 822319E8h */ case    0:  		/* li R3, 1 */
		/* 822319E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822319E8h case    0:*/		return 0x822319EC;
		  /* 822319ECh */ case    1:  		/* b 96 */
		/* 822319ECh case    1:*/		return 0x82231A4C;
		/* 822319ECh case    1:*/		return 0x822319F0;
	}
	return 0x822319F0;
} // Block from 822319E8h-822319F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822319F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822319F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822319F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822319F0);
		  /* 822319F0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822319F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822319F0h case    0:*/		return 0x822319F4;
		  /* 822319F4h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822319F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231A0C;  }
		/* 822319F4h case    1:*/		return 0x822319F8;
		  /* 822319F8h */ case    2:  		/* li R6, 0 */
		/* 822319F8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822319F8h case    2:*/		return 0x822319FC;
		  /* 822319FCh */ case    3:  		/* li R5, 0 */
		/* 822319FCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822319FCh case    3:*/		return 0x82231A00;
		  /* 82231A00h */ case    4:  		/* li R4, 28 */
		/* 82231A00h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 82231A00h case    4:*/		return 0x82231A04;
		  /* 82231A04h */ case    5:  		/* mr R3, R29 */
		/* 82231A04h case    5:*/		regs.R3 = regs.R29;
		/* 82231A04h case    5:*/		return 0x82231A08;
		  /* 82231A08h */ case    6:  		/* bl -867944 */
		/* 82231A08h case    6:*/		regs.LR = 0x82231A0C; return 0x8215DBA0;
		/* 82231A08h case    6:*/		return 0x82231A0C;
	}
	return 0x82231A0C;
} // Block from 822319F0h-82231A0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231A0C);
		  /* 82231A0Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231A0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231A0Ch case    0:*/		return 0x82231A10;
		  /* 82231A10h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231A10h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231A48;  }
		/* 82231A10h case    1:*/		return 0x82231A14;
		  /* 82231A14h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231A14h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231A14h case    2:*/		return 0x82231A18;
		  /* 82231A18h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231A18h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231A48;  }
		/* 82231A18h case    3:*/		return 0x82231A1C;
		  /* 82231A1Ch */ case    4:  		/* lis R11, -32216 */
		/* 82231A1Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231A1Ch case    4:*/		return 0x82231A20;
		  /* 82231A20h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231A20h case    5:*/		regs.CTR = regs.R28;
		/* 82231A20h case    5:*/		return 0x82231A24;
		  /* 82231A24h */ case    6:  		/* lis R10, -32252 */
		/* 82231A24h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231A24h case    6:*/		return 0x82231A28;
		  /* 82231A28h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231A28h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231A28h case    7:*/		return 0x82231A2C;
		  /* 82231A2Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231A2Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231A2Ch case    8:*/		return 0x82231A30;
		  /* 82231A30h */ case    9:  		/* li R8, 0 */
		/* 82231A30h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231A30h case    9:*/		return 0x82231A34;
		  /* 82231A34h */ case   10:  		/* mr R7, R30 */
		/* 82231A34h case   10:*/		regs.R7 = regs.R30;
		/* 82231A34h case   10:*/		return 0x82231A38;
		  /* 82231A38h */ case   11:  		/* li R6, 47 */
		/* 82231A38h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2F);
		/* 82231A38h case   11:*/		return 0x82231A3C;
		  /* 82231A3Ch */ case   12:  		/* mr R3, R27 */
		/* 82231A3Ch case   12:*/		regs.R3 = regs.R27;
		/* 82231A3Ch case   12:*/		return 0x82231A40;
		  /* 82231A40h */ case   13:  		/* lwz R5, <#[R11 + 188]> */
		/* 82231A40h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000BC) );
		/* 82231A40h case   13:*/		return 0x82231A44;
		  /* 82231A44h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231A44h case   14:*/		if ( 1 ) { regs.LR = 0x82231A48; return (uint32)regs.CTR; }
		/* 82231A44h case   14:*/		return 0x82231A48;
	}
	return 0x82231A48;
} // Block from 82231A0Ch-82231A48h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231A48);
		  /* 82231A48h */ case    0:  		/* li R3, 0 */
		/* 82231A48h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231A48h case    0:*/		return 0x82231A4C;
	}
	return 0x82231A4C;
} // Block from 82231A48h-82231A4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231A4C);
		  /* 82231A4Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82231A4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231A4Ch case    0:*/		return 0x82231A50;
		  /* 82231A50h */ case    1:  		/* b -1705900 */
		/* 82231A50h case    1:*/		return 0x820912A4;
		/* 82231A50h case    1:*/		return 0x82231A54;
		  /* 82231A54h */ case    2:  		/* nop */
		/* 82231A54h case    2:*/		cpu::op::nop();
		/* 82231A54h case    2:*/		return 0x82231A58;
	}
	return 0x82231A58;
} // Block from 82231A4Ch-82231A58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82231A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231A58);
		  /* 82231A58h */ case    0:  		/* mfspr R12, LR */
		/* 82231A58h case    0:*/		regs.R12 = regs.LR;
		/* 82231A58h case    0:*/		return 0x82231A5C;
		  /* 82231A5Ch */ case    1:  		/* bl -1705992 */
		/* 82231A5Ch case    1:*/		regs.LR = 0x82231A60; return 0x82091254;
		/* 82231A5Ch case    1:*/		return 0x82231A60;
		  /* 82231A60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231A60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231A60h case    2:*/		return 0x82231A64;
		  /* 82231A64h */ case    3:  		/* mr R31, R3 */
		/* 82231A64h case    3:*/		regs.R31 = regs.R3;
		/* 82231A64h case    3:*/		return 0x82231A68;
		  /* 82231A68h */ case    4:  		/* mr R30, R4 */
		/* 82231A68h case    4:*/		regs.R30 = regs.R4;
		/* 82231A68h case    4:*/		return 0x82231A6C;
		  /* 82231A6Ch */ case    5:  		/* mr R29, R5 */
		/* 82231A6Ch case    5:*/		regs.R29 = regs.R5;
		/* 82231A6Ch case    5:*/		return 0x82231A70;
	}
	return 0x82231A70;
} // Block from 82231A58h-82231A70h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231A70h
// Function '?CompileWithTexProjectedY@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231A70);
		  /* 82231A70h */ case    0:  		/* mr R28, R6 */
		/* 82231A70h case    0:*/		regs.R28 = regs.R6;
		/* 82231A70h case    0:*/		return 0x82231A74;
		  /* 82231A74h */ case    1:  		/* mr R27, R7 */
		/* 82231A74h case    1:*/		regs.R27 = regs.R7;
		/* 82231A74h case    1:*/		return 0x82231A78;
		  /* 82231A78h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82231A78h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231A78h case    2:*/		return 0x82231A7C;
		  /* 82231A7Ch */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 82231A7Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82231AA0;  }
		/* 82231A7Ch case    3:*/		return 0x82231A80;
		  /* 82231A80h */ case    4:  		/* lis R11, -32252 */
		/* 82231A80h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231A80h case    4:*/		return 0x82231A84;
		  /* 82231A84h */ case    5:  		/* lis R10, -32253 */
		/* 82231A84h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231A84h case    5:*/		return 0x82231A88;
		  /* 82231A88h */ case    6:  		/* lis R9, -32253 */
		/* 82231A88h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231A88h case    6:*/		return 0x82231A8C;
		  /* 82231A8Ch */ case    7:  		/* addi R6, R11, 4336 */
		/* 82231A8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231A8Ch case    7:*/		return 0x82231A90;
		  /* 82231A90h */ case    8:  		/* addi R5, R10, 27792 */
		/* 82231A90h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231A90h case    8:*/		return 0x82231A94;
		  /* 82231A94h */ case    9:  		/* addi R4, R9, 27460 */
		/* 82231A94h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231A94h case    9:*/		return 0x82231A98;
		  /* 82231A98h */ case   10:  		/* li R7, 2155 */
		/* 82231A98h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x86B);
		/* 82231A98h case   10:*/		return 0x82231A9C;
		  /* 82231A9Ch */ case   11:  		/* bl -892564 */
		/* 82231A9Ch case   11:*/		regs.LR = 0x82231AA0; return 0x82157C08;
		/* 82231A9Ch case   11:*/		return 0x82231AA0;
	}
	return 0x82231AA0;
} // Block from 82231A70h-82231AA0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82231AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231AA0);
		  /* 82231AA0h */ case    0:  		/* mr R5, R30 */
		/* 82231AA0h case    0:*/		regs.R5 = regs.R30;
		/* 82231AA0h case    0:*/		return 0x82231AA4;
		  /* 82231AA4h */ case    1:  		/* li R4, 22 */
		/* 82231AA4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 82231AA4h case    1:*/		return 0x82231AA8;
		  /* 82231AA8h */ case    2:  		/* mr R3, R31 */
		/* 82231AA8h case    2:*/		regs.R3 = regs.R31;
		/* 82231AA8h case    2:*/		return 0x82231AAC;
		  /* 82231AACh */ case    3:  		/* bl -868972 */
		/* 82231AACh case    3:*/		regs.LR = 0x82231AB0; return 0x8215D840;
		/* 82231AACh case    3:*/		return 0x82231AB0;
		  /* 82231AB0h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 82231AB0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82231AB0h case    4:*/		return 0x82231AB4;
		  /* 82231AB4h */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 82231AB4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82231B18;  }
		/* 82231AB4h case    5:*/		return 0x82231AB8;
		  /* 82231AB8h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82231AB8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231AB8h case    6:*/		return 0x82231ABC;
		  /* 82231ABCh */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231ABCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82231AD4;  }
		/* 82231ABCh case    7:*/		return 0x82231AC0;
		  /* 82231AC0h */ case    8:  		/* li R6, 1 */
		/* 82231AC0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231AC0h case    8:*/		return 0x82231AC4;
		  /* 82231AC4h */ case    9:  		/* li R5, 0 */
		/* 82231AC4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231AC4h case    9:*/		return 0x82231AC8;
		  /* 82231AC8h */ case   10:  		/* li R4, 29 */
		/* 82231AC8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 82231AC8h case   10:*/		return 0x82231ACC;
		  /* 82231ACCh */ case   11:  		/* mr R3, R29 */
		/* 82231ACCh case   11:*/		regs.R3 = regs.R29;
		/* 82231ACCh case   11:*/		return 0x82231AD0;
		  /* 82231AD0h */ case   12:  		/* bl -868144 */
		/* 82231AD0h case   12:*/		regs.LR = 0x82231AD4; return 0x8215DBA0;
		/* 82231AD0h case   12:*/		return 0x82231AD4;
	}
	return 0x82231AD4;
} // Block from 82231AA0h-82231AD4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231AD4);
		  /* 82231AD4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231AD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231AD4h case    0:*/		return 0x82231AD8;
		  /* 82231AD8h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231AD8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231B10;  }
		/* 82231AD8h case    1:*/		return 0x82231ADC;
		  /* 82231ADCh */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231ADCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231ADCh case    2:*/		return 0x82231AE0;
		  /* 82231AE0h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231AE0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231B10;  }
		/* 82231AE0h case    3:*/		return 0x82231AE4;
		  /* 82231AE4h */ case    4:  		/* lis R11, -32216 */
		/* 82231AE4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231AE4h case    4:*/		return 0x82231AE8;
		  /* 82231AE8h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231AE8h case    5:*/		regs.CTR = regs.R28;
		/* 82231AE8h case    5:*/		return 0x82231AEC;
		  /* 82231AECh */ case    6:  		/* lis R10, -32252 */
		/* 82231AECh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231AECh case    6:*/		return 0x82231AF0;
		  /* 82231AF0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231AF0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231AF0h case    7:*/		return 0x82231AF4;
		  /* 82231AF4h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231AF4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231AF4h case    8:*/		return 0x82231AF8;
		  /* 82231AF8h */ case    9:  		/* li R8, 1 */
		/* 82231AF8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231AF8h case    9:*/		return 0x82231AFC;
		  /* 82231AFCh */ case   10:  		/* mr R7, R30 */
		/* 82231AFCh case   10:*/		regs.R7 = regs.R30;
		/* 82231AFCh case   10:*/		return 0x82231B00;
		  /* 82231B00h */ case   11:  		/* li R6, 48 */
		/* 82231B00h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x30);
		/* 82231B00h case   11:*/		return 0x82231B04;
		  /* 82231B04h */ case   12:  		/* mr R3, R27 */
		/* 82231B04h case   12:*/		regs.R3 = regs.R27;
		/* 82231B04h case   12:*/		return 0x82231B08;
		  /* 82231B08h */ case   13:  		/* lwz R5, <#[R11 + 192]> */
		/* 82231B08h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000C0) );
		/* 82231B08h case   13:*/		return 0x82231B0C;
		  /* 82231B0Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231B0Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231B10; return (uint32)regs.CTR; }
		/* 82231B0Ch case   14:*/		return 0x82231B10;
	}
	return 0x82231B10;
} // Block from 82231AD4h-82231B10h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B10);
		  /* 82231B10h */ case    0:  		/* li R3, 1 */
		/* 82231B10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231B10h case    0:*/		return 0x82231B14;
		  /* 82231B14h */ case    1:  		/* b 96 */
		/* 82231B14h case    1:*/		return 0x82231B74;
		/* 82231B14h case    1:*/		return 0x82231B18;
	}
	return 0x82231B18;
} // Block from 82231B10h-82231B18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B18);
		  /* 82231B18h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231B18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231B18h case    0:*/		return 0x82231B1C;
		  /* 82231B1Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231B1Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82231B34;  }
		/* 82231B1Ch case    1:*/		return 0x82231B20;
		  /* 82231B20h */ case    2:  		/* li R6, 0 */
		/* 82231B20h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231B20h case    2:*/		return 0x82231B24;
		  /* 82231B24h */ case    3:  		/* li R5, 0 */
		/* 82231B24h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231B24h case    3:*/		return 0x82231B28;
		  /* 82231B28h */ case    4:  		/* li R4, 29 */
		/* 82231B28h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 82231B28h case    4:*/		return 0x82231B2C;
		  /* 82231B2Ch */ case    5:  		/* mr R3, R29 */
		/* 82231B2Ch case    5:*/		regs.R3 = regs.R29;
		/* 82231B2Ch case    5:*/		return 0x82231B30;
		  /* 82231B30h */ case    6:  		/* bl -868240 */
		/* 82231B30h case    6:*/		regs.LR = 0x82231B34; return 0x8215DBA0;
		/* 82231B30h case    6:*/		return 0x82231B34;
	}
	return 0x82231B34;
} // Block from 82231B18h-82231B34h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B34);
		  /* 82231B34h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231B34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231B34h case    0:*/		return 0x82231B38;
		  /* 82231B38h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231B38h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231B70;  }
		/* 82231B38h case    1:*/		return 0x82231B3C;
		  /* 82231B3Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231B3Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231B3Ch case    2:*/		return 0x82231B40;
		  /* 82231B40h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231B40h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231B70;  }
		/* 82231B40h case    3:*/		return 0x82231B44;
		  /* 82231B44h */ case    4:  		/* lis R11, -32216 */
		/* 82231B44h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231B44h case    4:*/		return 0x82231B48;
		  /* 82231B48h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231B48h case    5:*/		regs.CTR = regs.R28;
		/* 82231B48h case    5:*/		return 0x82231B4C;
		  /* 82231B4Ch */ case    6:  		/* lis R10, -32252 */
		/* 82231B4Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231B4Ch case    6:*/		return 0x82231B50;
		  /* 82231B50h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231B50h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231B50h case    7:*/		return 0x82231B54;
		  /* 82231B54h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231B54h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231B54h case    8:*/		return 0x82231B58;
		  /* 82231B58h */ case    9:  		/* li R8, 0 */
		/* 82231B58h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231B58h case    9:*/		return 0x82231B5C;
		  /* 82231B5Ch */ case   10:  		/* mr R7, R30 */
		/* 82231B5Ch case   10:*/		regs.R7 = regs.R30;
		/* 82231B5Ch case   10:*/		return 0x82231B60;
		  /* 82231B60h */ case   11:  		/* li R6, 48 */
		/* 82231B60h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x30);
		/* 82231B60h case   11:*/		return 0x82231B64;
		  /* 82231B64h */ case   12:  		/* mr R3, R27 */
		/* 82231B64h case   12:*/		regs.R3 = regs.R27;
		/* 82231B64h case   12:*/		return 0x82231B68;
		  /* 82231B68h */ case   13:  		/* lwz R5, <#[R11 + 192]> */
		/* 82231B68h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000C0) );
		/* 82231B68h case   13:*/		return 0x82231B6C;
		  /* 82231B6Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231B6Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231B70; return (uint32)regs.CTR; }
		/* 82231B6Ch case   14:*/		return 0x82231B70;
	}
	return 0x82231B70;
} // Block from 82231B34h-82231B70h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B70);
		  /* 82231B70h */ case    0:  		/* li R3, 0 */
		/* 82231B70h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231B70h case    0:*/		return 0x82231B74;
	}
	return 0x82231B74;
} // Block from 82231B70h-82231B74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B74);
		  /* 82231B74h */ case    0:  		/* addi R1, R1, 128 */
		/* 82231B74h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231B74h case    0:*/		return 0x82231B78;
		  /* 82231B78h */ case    1:  		/* b -1706196 */
		/* 82231B78h case    1:*/		return 0x820912A4;
		/* 82231B78h case    1:*/		return 0x82231B7C;
		  /* 82231B7Ch */ case    2:  		/* nop */
		/* 82231B7Ch case    2:*/		cpu::op::nop();
		/* 82231B7Ch case    2:*/		return 0x82231B80;
	}
	return 0x82231B80;
} // Block from 82231B74h-82231B80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82231B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B80);
		  /* 82231B80h */ case    0:  		/* mfspr R12, LR */
		/* 82231B80h case    0:*/		regs.R12 = regs.LR;
		/* 82231B80h case    0:*/		return 0x82231B84;
		  /* 82231B84h */ case    1:  		/* bl -1706288 */
		/* 82231B84h case    1:*/		regs.LR = 0x82231B88; return 0x82091254;
		/* 82231B84h case    1:*/		return 0x82231B88;
		  /* 82231B88h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231B88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231B88h case    2:*/		return 0x82231B8C;
		  /* 82231B8Ch */ case    3:  		/* mr R31, R3 */
		/* 82231B8Ch case    3:*/		regs.R31 = regs.R3;
		/* 82231B8Ch case    3:*/		return 0x82231B90;
		  /* 82231B90h */ case    4:  		/* mr R30, R4 */
		/* 82231B90h case    4:*/		regs.R30 = regs.R4;
		/* 82231B90h case    4:*/		return 0x82231B94;
		  /* 82231B94h */ case    5:  		/* mr R29, R5 */
		/* 82231B94h case    5:*/		regs.R29 = regs.R5;
		/* 82231B94h case    5:*/		return 0x82231B98;
	}
	return 0x82231B98;
} // Block from 82231B80h-82231B98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231B98h
// Function '?CompileWithTexProjectedZ@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231B98);
		  /* 82231B98h */ case    0:  		/* mr R28, R6 */
		/* 82231B98h case    0:*/		regs.R28 = regs.R6;
		/* 82231B98h case    0:*/		return 0x82231B9C;
		  /* 82231B9Ch */ case    1:  		/* mr R27, R7 */
		/* 82231B9Ch case    1:*/		regs.R27 = regs.R7;
		/* 82231B9Ch case    1:*/		return 0x82231BA0;
		  /* 82231BA0h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82231BA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231BA0h case    2:*/		return 0x82231BA4;
		  /* 82231BA4h */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 82231BA4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82231BC8;  }
		/* 82231BA4h case    3:*/		return 0x82231BA8;
		  /* 82231BA8h */ case    4:  		/* lis R11, -32252 */
		/* 82231BA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231BA8h case    4:*/		return 0x82231BAC;
		  /* 82231BACh */ case    5:  		/* lis R10, -32253 */
		/* 82231BACh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231BACh case    5:*/		return 0x82231BB0;
		  /* 82231BB0h */ case    6:  		/* lis R9, -32253 */
		/* 82231BB0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231BB0h case    6:*/		return 0x82231BB4;
		  /* 82231BB4h */ case    7:  		/* addi R6, R11, 4336 */
		/* 82231BB4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231BB4h case    7:*/		return 0x82231BB8;
		  /* 82231BB8h */ case    8:  		/* addi R5, R10, 27792 */
		/* 82231BB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231BB8h case    8:*/		return 0x82231BBC;
		  /* 82231BBCh */ case    9:  		/* addi R4, R9, 27460 */
		/* 82231BBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231BBCh case    9:*/		return 0x82231BC0;
		  /* 82231BC0h */ case   10:  		/* li R7, 2208 */
		/* 82231BC0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x8A0);
		/* 82231BC0h case   10:*/		return 0x82231BC4;
		  /* 82231BC4h */ case   11:  		/* bl -892860 */
		/* 82231BC4h case   11:*/		regs.LR = 0x82231BC8; return 0x82157C08;
		/* 82231BC4h case   11:*/		return 0x82231BC8;
	}
	return 0x82231BC8;
} // Block from 82231B98h-82231BC8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82231BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231BC8);
		  /* 82231BC8h */ case    0:  		/* mr R5, R30 */
		/* 82231BC8h case    0:*/		regs.R5 = regs.R30;
		/* 82231BC8h case    0:*/		return 0x82231BCC;
		  /* 82231BCCh */ case    1:  		/* li R4, 22 */
		/* 82231BCCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 82231BCCh case    1:*/		return 0x82231BD0;
		  /* 82231BD0h */ case    2:  		/* mr R3, R31 */
		/* 82231BD0h case    2:*/		regs.R3 = regs.R31;
		/* 82231BD0h case    2:*/		return 0x82231BD4;
		  /* 82231BD4h */ case    3:  		/* bl -869268 */
		/* 82231BD4h case    3:*/		regs.LR = 0x82231BD8; return 0x8215D840;
		/* 82231BD4h case    3:*/		return 0x82231BD8;
		  /* 82231BD8h */ case    4:  		/* cmplwi CR6, R3, 2 */
		/* 82231BD8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 82231BD8h case    4:*/		return 0x82231BDC;
		  /* 82231BDCh */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 82231BDCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82231C40;  }
		/* 82231BDCh case    5:*/		return 0x82231BE0;
		  /* 82231BE0h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82231BE0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231BE0h case    6:*/		return 0x82231BE4;
		  /* 82231BE4h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231BE4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82231BFC;  }
		/* 82231BE4h case    7:*/		return 0x82231BE8;
		  /* 82231BE8h */ case    8:  		/* li R6, 1 */
		/* 82231BE8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231BE8h case    8:*/		return 0x82231BEC;
		  /* 82231BECh */ case    9:  		/* li R5, 0 */
		/* 82231BECh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231BECh case    9:*/		return 0x82231BF0;
		  /* 82231BF0h */ case   10:  		/* li R4, 30 */
		/* 82231BF0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 82231BF0h case   10:*/		return 0x82231BF4;
		  /* 82231BF4h */ case   11:  		/* mr R3, R29 */
		/* 82231BF4h case   11:*/		regs.R3 = regs.R29;
		/* 82231BF4h case   11:*/		return 0x82231BF8;
		  /* 82231BF8h */ case   12:  		/* bl -868440 */
		/* 82231BF8h case   12:*/		regs.LR = 0x82231BFC; return 0x8215DBA0;
		/* 82231BF8h case   12:*/		return 0x82231BFC;
	}
	return 0x82231BFC;
} // Block from 82231BC8h-82231BFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231BFC);
		  /* 82231BFCh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231BFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231BFCh case    0:*/		return 0x82231C00;
		  /* 82231C00h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231C00h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231C38;  }
		/* 82231C00h case    1:*/		return 0x82231C04;
		  /* 82231C04h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231C04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231C04h case    2:*/		return 0x82231C08;
		  /* 82231C08h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231C08h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231C38;  }
		/* 82231C08h case    3:*/		return 0x82231C0C;
		  /* 82231C0Ch */ case    4:  		/* lis R11, -32216 */
		/* 82231C0Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231C0Ch case    4:*/		return 0x82231C10;
		  /* 82231C10h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231C10h case    5:*/		regs.CTR = regs.R28;
		/* 82231C10h case    5:*/		return 0x82231C14;
		  /* 82231C14h */ case    6:  		/* lis R10, -32252 */
		/* 82231C14h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231C14h case    6:*/		return 0x82231C18;
		  /* 82231C18h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231C18h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231C18h case    7:*/		return 0x82231C1C;
		  /* 82231C1Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231C1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231C1Ch case    8:*/		return 0x82231C20;
		  /* 82231C20h */ case    9:  		/* li R8, 1 */
		/* 82231C20h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231C20h case    9:*/		return 0x82231C24;
		  /* 82231C24h */ case   10:  		/* mr R7, R30 */
		/* 82231C24h case   10:*/		regs.R7 = regs.R30;
		/* 82231C24h case   10:*/		return 0x82231C28;
		  /* 82231C28h */ case   11:  		/* li R6, 49 */
		/* 82231C28h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x31);
		/* 82231C28h case   11:*/		return 0x82231C2C;
		  /* 82231C2Ch */ case   12:  		/* mr R3, R27 */
		/* 82231C2Ch case   12:*/		regs.R3 = regs.R27;
		/* 82231C2Ch case   12:*/		return 0x82231C30;
		  /* 82231C30h */ case   13:  		/* lwz R5, <#[R11 + 196]> */
		/* 82231C30h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000C4) );
		/* 82231C30h case   13:*/		return 0x82231C34;
		  /* 82231C34h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231C34h case   14:*/		if ( 1 ) { regs.LR = 0x82231C38; return (uint32)regs.CTR; }
		/* 82231C34h case   14:*/		return 0x82231C38;
	}
	return 0x82231C38;
} // Block from 82231BFCh-82231C38h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231C38);
		  /* 82231C38h */ case    0:  		/* li R3, 1 */
		/* 82231C38h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231C38h case    0:*/		return 0x82231C3C;
		  /* 82231C3Ch */ case    1:  		/* b 96 */
		/* 82231C3Ch case    1:*/		return 0x82231C9C;
		/* 82231C3Ch case    1:*/		return 0x82231C40;
	}
	return 0x82231C40;
} // Block from 82231C38h-82231C40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231C40);
		  /* 82231C40h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231C40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231C40h case    0:*/		return 0x82231C44;
		  /* 82231C44h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231C44h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231C5C;  }
		/* 82231C44h case    1:*/		return 0x82231C48;
		  /* 82231C48h */ case    2:  		/* li R6, 0 */
		/* 82231C48h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231C48h case    2:*/		return 0x82231C4C;
		  /* 82231C4Ch */ case    3:  		/* li R5, 0 */
		/* 82231C4Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231C4Ch case    3:*/		return 0x82231C50;
		  /* 82231C50h */ case    4:  		/* li R4, 30 */
		/* 82231C50h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 82231C50h case    4:*/		return 0x82231C54;
		  /* 82231C54h */ case    5:  		/* mr R3, R29 */
		/* 82231C54h case    5:*/		regs.R3 = regs.R29;
		/* 82231C54h case    5:*/		return 0x82231C58;
		  /* 82231C58h */ case    6:  		/* bl -868536 */
		/* 82231C58h case    6:*/		regs.LR = 0x82231C5C; return 0x8215DBA0;
		/* 82231C58h case    6:*/		return 0x82231C5C;
	}
	return 0x82231C5C;
} // Block from 82231C40h-82231C5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231C5C);
		  /* 82231C5Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231C5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231C5Ch case    0:*/		return 0x82231C60;
		  /* 82231C60h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231C60h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231C98;  }
		/* 82231C60h case    1:*/		return 0x82231C64;
		  /* 82231C64h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231C64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231C64h case    2:*/		return 0x82231C68;
		  /* 82231C68h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231C68h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231C98;  }
		/* 82231C68h case    3:*/		return 0x82231C6C;
		  /* 82231C6Ch */ case    4:  		/* lis R11, -32216 */
		/* 82231C6Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231C6Ch case    4:*/		return 0x82231C70;
		  /* 82231C70h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231C70h case    5:*/		regs.CTR = regs.R28;
		/* 82231C70h case    5:*/		return 0x82231C74;
		  /* 82231C74h */ case    6:  		/* lis R10, -32252 */
		/* 82231C74h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231C74h case    6:*/		return 0x82231C78;
		  /* 82231C78h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231C78h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231C78h case    7:*/		return 0x82231C7C;
		  /* 82231C7Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231C7Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231C7Ch case    8:*/		return 0x82231C80;
		  /* 82231C80h */ case    9:  		/* li R8, 0 */
		/* 82231C80h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231C80h case    9:*/		return 0x82231C84;
		  /* 82231C84h */ case   10:  		/* mr R7, R30 */
		/* 82231C84h case   10:*/		regs.R7 = regs.R30;
		/* 82231C84h case   10:*/		return 0x82231C88;
		  /* 82231C88h */ case   11:  		/* li R6, 49 */
		/* 82231C88h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x31);
		/* 82231C88h case   11:*/		return 0x82231C8C;
		  /* 82231C8Ch */ case   12:  		/* mr R3, R27 */
		/* 82231C8Ch case   12:*/		regs.R3 = regs.R27;
		/* 82231C8Ch case   12:*/		return 0x82231C90;
		  /* 82231C90h */ case   13:  		/* lwz R5, <#[R11 + 196]> */
		/* 82231C90h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000C4) );
		/* 82231C90h case   13:*/		return 0x82231C94;
		  /* 82231C94h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231C94h case   14:*/		if ( 1 ) { regs.LR = 0x82231C98; return (uint32)regs.CTR; }
		/* 82231C94h case   14:*/		return 0x82231C98;
	}
	return 0x82231C98;
} // Block from 82231C5Ch-82231C98h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231C98);
		  /* 82231C98h */ case    0:  		/* li R3, 0 */
		/* 82231C98h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231C98h case    0:*/		return 0x82231C9C;
	}
	return 0x82231C9C;
} // Block from 82231C98h-82231C9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231C9C);
		  /* 82231C9Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82231C9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231C9Ch case    0:*/		return 0x82231CA0;
		  /* 82231CA0h */ case    1:  		/* b -1706492 */
		/* 82231CA0h case    1:*/		return 0x820912A4;
		/* 82231CA0h case    1:*/		return 0x82231CA4;
		  /* 82231CA4h */ case    2:  		/* nop */
		/* 82231CA4h case    2:*/		cpu::op::nop();
		/* 82231CA4h case    2:*/		return 0x82231CA8;
	}
	return 0x82231CA8;
} // Block from 82231C9Ch-82231CA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82231CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231CA8);
		  /* 82231CA8h */ case    0:  		/* mfspr R12, LR */
		/* 82231CA8h case    0:*/		regs.R12 = regs.LR;
		/* 82231CA8h case    0:*/		return 0x82231CAC;
		  /* 82231CACh */ case    1:  		/* bl -1706584 */
		/* 82231CACh case    1:*/		regs.LR = 0x82231CB0; return 0x82091254;
		/* 82231CACh case    1:*/		return 0x82231CB0;
		  /* 82231CB0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231CB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231CB0h case    2:*/		return 0x82231CB4;
		  /* 82231CB4h */ case    3:  		/* mr R31, R3 */
		/* 82231CB4h case    3:*/		regs.R31 = regs.R3;
		/* 82231CB4h case    3:*/		return 0x82231CB8;
		  /* 82231CB8h */ case    4:  		/* mr R30, R4 */
		/* 82231CB8h case    4:*/		regs.R30 = regs.R4;
		/* 82231CB8h case    4:*/		return 0x82231CBC;
		  /* 82231CBCh */ case    5:  		/* mr R29, R5 */
		/* 82231CBCh case    5:*/		regs.R29 = regs.R5;
		/* 82231CBCh case    5:*/		return 0x82231CC0;
	}
	return 0x82231CC0;
} // Block from 82231CA8h-82231CC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231CC0h
// Function '?CompileWithTexProjectedW@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231CC0);
		  /* 82231CC0h */ case    0:  		/* mr R28, R6 */
		/* 82231CC0h case    0:*/		regs.R28 = regs.R6;
		/* 82231CC0h case    0:*/		return 0x82231CC4;
		  /* 82231CC4h */ case    1:  		/* mr R27, R7 */
		/* 82231CC4h case    1:*/		regs.R27 = regs.R7;
		/* 82231CC4h case    1:*/		return 0x82231CC8;
		  /* 82231CC8h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82231CC8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231CC8h case    2:*/		return 0x82231CCC;
		  /* 82231CCCh */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 82231CCCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x82231CF0;  }
		/* 82231CCCh case    3:*/		return 0x82231CD0;
		  /* 82231CD0h */ case    4:  		/* lis R11, -32252 */
		/* 82231CD0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231CD0h case    4:*/		return 0x82231CD4;
		  /* 82231CD4h */ case    5:  		/* lis R10, -32253 */
		/* 82231CD4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231CD4h case    5:*/		return 0x82231CD8;
		  /* 82231CD8h */ case    6:  		/* lis R9, -32253 */
		/* 82231CD8h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231CD8h case    6:*/		return 0x82231CDC;
		  /* 82231CDCh */ case    7:  		/* addi R6, R11, 4336 */
		/* 82231CDCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231CDCh case    7:*/		return 0x82231CE0;
		  /* 82231CE0h */ case    8:  		/* addi R5, R10, 27792 */
		/* 82231CE0h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231CE0h case    8:*/		return 0x82231CE4;
		  /* 82231CE4h */ case    9:  		/* addi R4, R9, 27460 */
		/* 82231CE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231CE4h case    9:*/		return 0x82231CE8;
		  /* 82231CE8h */ case   10:  		/* li R7, 2261 */
		/* 82231CE8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x8D5);
		/* 82231CE8h case   10:*/		return 0x82231CEC;
		  /* 82231CECh */ case   11:  		/* bl -893156 */
		/* 82231CECh case   11:*/		regs.LR = 0x82231CF0; return 0x82157C08;
		/* 82231CECh case   11:*/		return 0x82231CF0;
	}
	return 0x82231CF0;
} // Block from 82231CC0h-82231CF0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82231CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231CF0);
		  /* 82231CF0h */ case    0:  		/* mr R5, R30 */
		/* 82231CF0h case    0:*/		regs.R5 = regs.R30;
		/* 82231CF0h case    0:*/		return 0x82231CF4;
		  /* 82231CF4h */ case    1:  		/* li R4, 22 */
		/* 82231CF4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 82231CF4h case    1:*/		return 0x82231CF8;
		  /* 82231CF8h */ case    2:  		/* mr R3, R31 */
		/* 82231CF8h case    2:*/		regs.R3 = regs.R31;
		/* 82231CF8h case    2:*/		return 0x82231CFC;
		  /* 82231CFCh */ case    3:  		/* bl -869564 */
		/* 82231CFCh case    3:*/		regs.LR = 0x82231D00; return 0x8215D840;
		/* 82231CFCh case    3:*/		return 0x82231D00;
		  /* 82231D00h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82231D00h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82231D00h case    4:*/		return 0x82231D04;
		  /* 82231D04h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 82231D04h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231D04h case    5:*/		return 0x82231D08;
		  /* 82231D08h */ case    6:  		/* bc 4, CR0_EQ, 96 */
		/* 82231D08h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82231D68;  }
		/* 82231D08h case    6:*/		return 0x82231D0C;
		  /* 82231D0Ch */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231D0Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82231D24;  }
		/* 82231D0Ch case    7:*/		return 0x82231D10;
		  /* 82231D10h */ case    8:  		/* li R6, 1 */
		/* 82231D10h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231D10h case    8:*/		return 0x82231D14;
		  /* 82231D14h */ case    9:  		/* li R5, 0 */
		/* 82231D14h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231D14h case    9:*/		return 0x82231D18;
		  /* 82231D18h */ case   10:  		/* li R4, 30 */
		/* 82231D18h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 82231D18h case   10:*/		return 0x82231D1C;
		  /* 82231D1Ch */ case   11:  		/* mr R3, R29 */
		/* 82231D1Ch case   11:*/		regs.R3 = regs.R29;
		/* 82231D1Ch case   11:*/		return 0x82231D20;
		  /* 82231D20h */ case   12:  		/* bl -868736 */
		/* 82231D20h case   12:*/		regs.LR = 0x82231D24; return 0x8215DBA0;
		/* 82231D20h case   12:*/		return 0x82231D24;
	}
	return 0x82231D24;
} // Block from 82231CF0h-82231D24h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231D24);
		  /* 82231D24h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231D24h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231D24h case    0:*/		return 0x82231D28;
		  /* 82231D28h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231D28h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231D60;  }
		/* 82231D28h case    1:*/		return 0x82231D2C;
		  /* 82231D2Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231D2Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231D2Ch case    2:*/		return 0x82231D30;
		  /* 82231D30h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231D30h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231D60;  }
		/* 82231D30h case    3:*/		return 0x82231D34;
		  /* 82231D34h */ case    4:  		/* lis R11, -32216 */
		/* 82231D34h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231D34h case    4:*/		return 0x82231D38;
		  /* 82231D38h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231D38h case    5:*/		regs.CTR = regs.R28;
		/* 82231D38h case    5:*/		return 0x82231D3C;
		  /* 82231D3Ch */ case    6:  		/* lis R10, -32252 */
		/* 82231D3Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231D3Ch case    6:*/		return 0x82231D40;
		  /* 82231D40h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231D40h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231D40h case    7:*/		return 0x82231D44;
		  /* 82231D44h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231D44h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231D44h case    8:*/		return 0x82231D48;
		  /* 82231D48h */ case    9:  		/* li R8, 1 */
		/* 82231D48h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231D48h case    9:*/		return 0x82231D4C;
		  /* 82231D4Ch */ case   10:  		/* mr R7, R30 */
		/* 82231D4Ch case   10:*/		regs.R7 = regs.R30;
		/* 82231D4Ch case   10:*/		return 0x82231D50;
		  /* 82231D50h */ case   11:  		/* li R6, 49 */
		/* 82231D50h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x31);
		/* 82231D50h case   11:*/		return 0x82231D54;
		  /* 82231D54h */ case   12:  		/* mr R3, R27 */
		/* 82231D54h case   12:*/		regs.R3 = regs.R27;
		/* 82231D54h case   12:*/		return 0x82231D58;
		  /* 82231D58h */ case   13:  		/* lwz R5, <#[R11 + 196]> */
		/* 82231D58h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000C4) );
		/* 82231D58h case   13:*/		return 0x82231D5C;
		  /* 82231D5Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231D5Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231D60; return (uint32)regs.CTR; }
		/* 82231D5Ch case   14:*/		return 0x82231D60;
	}
	return 0x82231D60;
} // Block from 82231D24h-82231D60h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231D60);
		  /* 82231D60h */ case    0:  		/* li R3, 1 */
		/* 82231D60h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231D60h case    0:*/		return 0x82231D64;
		  /* 82231D64h */ case    1:  		/* b 92 */
		/* 82231D64h case    1:*/		return 0x82231DC0;
		/* 82231D64h case    1:*/		return 0x82231D68;
	}
	return 0x82231D68;
} // Block from 82231D60h-82231D68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231D68);
		  /* 82231D68h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 82231D68h case    0:*/		if ( regs.CR[6].eq ) { return 0x82231D80;  }
		/* 82231D68h case    0:*/		return 0x82231D6C;
		  /* 82231D6Ch */ case    1:  		/* li R6, 0 */
		/* 82231D6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231D6Ch case    1:*/		return 0x82231D70;
		  /* 82231D70h */ case    2:  		/* li R5, 0 */
		/* 82231D70h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231D70h case    2:*/		return 0x82231D74;
		  /* 82231D74h */ case    3:  		/* li R4, 30 */
		/* 82231D74h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 82231D74h case    3:*/		return 0x82231D78;
		  /* 82231D78h */ case    4:  		/* mr R3, R29 */
		/* 82231D78h case    4:*/		regs.R3 = regs.R29;
		/* 82231D78h case    4:*/		return 0x82231D7C;
		  /* 82231D7Ch */ case    5:  		/* bl -868828 */
		/* 82231D7Ch case    5:*/		regs.LR = 0x82231D80; return 0x8215DBA0;
		/* 82231D7Ch case    5:*/		return 0x82231D80;
	}
	return 0x82231D80;
} // Block from 82231D68h-82231D80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231D80);
		  /* 82231D80h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231D80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231D80h case    0:*/		return 0x82231D84;
		  /* 82231D84h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231D84h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231DBC;  }
		/* 82231D84h case    1:*/		return 0x82231D88;
		  /* 82231D88h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231D88h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231D88h case    2:*/		return 0x82231D8C;
		  /* 82231D8Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231D8Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82231DBC;  }
		/* 82231D8Ch case    3:*/		return 0x82231D90;
		  /* 82231D90h */ case    4:  		/* lis R11, -32216 */
		/* 82231D90h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231D90h case    4:*/		return 0x82231D94;
		  /* 82231D94h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231D94h case    5:*/		regs.CTR = regs.R28;
		/* 82231D94h case    5:*/		return 0x82231D98;
		  /* 82231D98h */ case    6:  		/* lis R10, -32252 */
		/* 82231D98h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231D98h case    6:*/		return 0x82231D9C;
		  /* 82231D9Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231D9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231D9Ch case    7:*/		return 0x82231DA0;
		  /* 82231DA0h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231DA0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231DA0h case    8:*/		return 0x82231DA4;
		  /* 82231DA4h */ case    9:  		/* li R8, 0 */
		/* 82231DA4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231DA4h case    9:*/		return 0x82231DA8;
		  /* 82231DA8h */ case   10:  		/* mr R7, R30 */
		/* 82231DA8h case   10:*/		regs.R7 = regs.R30;
		/* 82231DA8h case   10:*/		return 0x82231DAC;
		  /* 82231DACh */ case   11:  		/* li R6, 49 */
		/* 82231DACh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x31);
		/* 82231DACh case   11:*/		return 0x82231DB0;
		  /* 82231DB0h */ case   12:  		/* mr R3, R27 */
		/* 82231DB0h case   12:*/		regs.R3 = regs.R27;
		/* 82231DB0h case   12:*/		return 0x82231DB4;
		  /* 82231DB4h */ case   13:  		/* lwz R5, <#[R11 + 196]> */
		/* 82231DB4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000C4) );
		/* 82231DB4h case   13:*/		return 0x82231DB8;
		  /* 82231DB8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231DB8h case   14:*/		if ( 1 ) { regs.LR = 0x82231DBC; return (uint32)regs.CTR; }
		/* 82231DB8h case   14:*/		return 0x82231DBC;
	}
	return 0x82231DBC;
} // Block from 82231D80h-82231DBCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231DBC);
		  /* 82231DBCh */ case    0:  		/* li R3, 0 */
		/* 82231DBCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231DBCh case    0:*/		return 0x82231DC0;
	}
	return 0x82231DC0;
} // Block from 82231DBCh-82231DC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231DC0);
		  /* 82231DC0h */ case    0:  		/* addi R1, R1, 128 */
		/* 82231DC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231DC0h case    0:*/		return 0x82231DC4;
		  /* 82231DC4h */ case    1:  		/* b -1706784 */
		/* 82231DC4h case    1:*/		return 0x820912A4;
		/* 82231DC4h case    1:*/		return 0x82231DC8;
	}
	return 0x82231DC8;
} // Block from 82231DC0h-82231DC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231DC8);
		  /* 82231DC8h */ case    0:  		/* mfspr R12, LR */
		/* 82231DC8h case    0:*/		regs.R12 = regs.LR;
		/* 82231DC8h case    0:*/		return 0x82231DCC;
		  /* 82231DCCh */ case    1:  		/* bl -1706872 */
		/* 82231DCCh case    1:*/		regs.LR = 0x82231DD0; return 0x82091254;
		/* 82231DCCh case    1:*/		return 0x82231DD0;
		  /* 82231DD0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231DD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231DD0h case    2:*/		return 0x82231DD4;
		  /* 82231DD4h */ case    3:  		/* mr R31, R3 */
		/* 82231DD4h case    3:*/		regs.R31 = regs.R3;
		/* 82231DD4h case    3:*/		return 0x82231DD8;
		  /* 82231DD8h */ case    4:  		/* mr R30, R4 */
		/* 82231DD8h case    4:*/		regs.R30 = regs.R4;
		/* 82231DD8h case    4:*/		return 0x82231DDC;
		  /* 82231DDCh */ case    5:  		/* mr R29, R5 */
		/* 82231DDCh case    5:*/		regs.R29 = regs.R5;
		/* 82231DDCh case    5:*/		return 0x82231DE0;
		  /* 82231DE0h */ case    6:  		/* mr R28, R6 */
		/* 82231DE0h case    6:*/		regs.R28 = regs.R6;
		/* 82231DE0h case    6:*/		return 0x82231DE4;
		  /* 82231DE4h */ case    7:  		/* mr R27, R7 */
		/* 82231DE4h case    7:*/		regs.R27 = regs.R7;
		/* 82231DE4h case    7:*/		return 0x82231DE8;
	}
	return 0x82231DE8;
} // Block from 82231DC8h-82231DE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82231DE8h
// Function '?CompileWithPolyStipple@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231DE8);
		  /* 82231DE8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82231DE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231DE8h case    0:*/		return 0x82231DEC;
		  /* 82231DECh */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 82231DECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82231E10;  }
		/* 82231DECh case    1:*/		return 0x82231DF0;
		  /* 82231DF0h */ case    2:  		/* lis R11, -32252 */
		/* 82231DF0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231DF0h case    2:*/		return 0x82231DF4;
		  /* 82231DF4h */ case    3:  		/* lis R10, -32253 */
		/* 82231DF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231DF4h case    3:*/		return 0x82231DF8;
		  /* 82231DF8h */ case    4:  		/* lis R9, -32253 */
		/* 82231DF8h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231DF8h case    4:*/		return 0x82231DFC;
		  /* 82231DFCh */ case    5:  		/* addi R6, R11, 4336 */
		/* 82231DFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231DFCh case    5:*/		return 0x82231E00;
		  /* 82231E00h */ case    6:  		/* addi R5, R10, 27792 */
		/* 82231E00h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231E00h case    6:*/		return 0x82231E04;
		  /* 82231E04h */ case    7:  		/* addi R4, R9, 27460 */
		/* 82231E04h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231E04h case    7:*/		return 0x82231E08;
		  /* 82231E08h */ case    8:  		/* li R7, 2316 */
		/* 82231E08h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x90C);
		/* 82231E08h case    8:*/		return 0x82231E0C;
		  /* 82231E0Ch */ case    9:  		/* bl -893444 */
		/* 82231E0Ch case    9:*/		regs.LR = 0x82231E10; return 0x82157C08;
		/* 82231E0Ch case    9:*/		return 0x82231E10;
	}
	return 0x82231E10;
} // Block from 82231DE8h-82231E10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82231E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231E10);
		  /* 82231E10h */ case    0:  		/* mr R5, R30 */
		/* 82231E10h case    0:*/		regs.R5 = regs.R30;
		/* 82231E10h case    0:*/		return 0x82231E14;
		  /* 82231E14h */ case    1:  		/* li R4, 37 */
		/* 82231E14h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 82231E14h case    1:*/		return 0x82231E18;
		  /* 82231E18h */ case    2:  		/* mr R3, R31 */
		/* 82231E18h case    2:*/		regs.R3 = regs.R31;
		/* 82231E18h case    2:*/		return 0x82231E1C;
		  /* 82231E1Ch */ case    3:  		/* bl -869852 */
		/* 82231E1Ch case    3:*/		regs.LR = 0x82231E20; return 0x8215D840;
		/* 82231E1Ch case    3:*/		return 0x82231E20;
		  /* 82231E20h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82231E20h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82231E20h case    4:*/		return 0x82231E24;
		  /* 82231E24h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 82231E24h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231E24h case    5:*/		return 0x82231E28;
		  /* 82231E28h */ case    6:  		/* bc 4, CR0_EQ, 96 */
		/* 82231E28h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82231E88;  }
		/* 82231E28h case    6:*/		return 0x82231E2C;
		  /* 82231E2Ch */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231E2Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82231E44;  }
		/* 82231E2Ch case    7:*/		return 0x82231E30;
		  /* 82231E30h */ case    8:  		/* li R6, 1 */
		/* 82231E30h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231E30h case    8:*/		return 0x82231E34;
		  /* 82231E34h */ case    9:  		/* li R5, 0 */
		/* 82231E34h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231E34h case    9:*/		return 0x82231E38;
		  /* 82231E38h */ case   10:  		/* li R4, 34 */
		/* 82231E38h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 82231E38h case   10:*/		return 0x82231E3C;
		  /* 82231E3Ch */ case   11:  		/* mr R3, R29 */
		/* 82231E3Ch case   11:*/		regs.R3 = regs.R29;
		/* 82231E3Ch case   11:*/		return 0x82231E40;
		  /* 82231E40h */ case   12:  		/* bl -869024 */
		/* 82231E40h case   12:*/		regs.LR = 0x82231E44; return 0x8215DBA0;
		/* 82231E40h case   12:*/		return 0x82231E44;
	}
	return 0x82231E44;
} // Block from 82231E10h-82231E44h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231E44);
		  /* 82231E44h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231E44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231E44h case    0:*/		return 0x82231E48;
		  /* 82231E48h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231E48h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231E80;  }
		/* 82231E48h case    1:*/		return 0x82231E4C;
		  /* 82231E4Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231E4Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231E4Ch case    2:*/		return 0x82231E50;
		  /* 82231E50h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231E50h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231E80;  }
		/* 82231E50h case    3:*/		return 0x82231E54;
		  /* 82231E54h */ case    4:  		/* lis R11, -32216 */
		/* 82231E54h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231E54h case    4:*/		return 0x82231E58;
		  /* 82231E58h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231E58h case    5:*/		regs.CTR = regs.R28;
		/* 82231E58h case    5:*/		return 0x82231E5C;
		  /* 82231E5Ch */ case    6:  		/* lis R10, -32252 */
		/* 82231E5Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231E5Ch case    6:*/		return 0x82231E60;
		  /* 82231E60h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231E60h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231E60h case    7:*/		return 0x82231E64;
		  /* 82231E64h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231E64h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231E64h case    8:*/		return 0x82231E68;
		  /* 82231E68h */ case    9:  		/* li R8, 1 */
		/* 82231E68h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231E68h case    9:*/		return 0x82231E6C;
		  /* 82231E6Ch */ case   10:  		/* mr R7, R30 */
		/* 82231E6Ch case   10:*/		regs.R7 = regs.R30;
		/* 82231E6Ch case   10:*/		return 0x82231E70;
		  /* 82231E70h */ case   11:  		/* li R6, 57 */
		/* 82231E70h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x39);
		/* 82231E70h case   11:*/		return 0x82231E74;
		  /* 82231E74h */ case   12:  		/* mr R3, R27 */
		/* 82231E74h case   12:*/		regs.R3 = regs.R27;
		/* 82231E74h case   12:*/		return 0x82231E78;
		  /* 82231E78h */ case   13:  		/* lwz R5, <#[R11 + 228]> */
		/* 82231E78h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000E4) );
		/* 82231E78h case   13:*/		return 0x82231E7C;
		  /* 82231E7Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231E7Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231E80; return (uint32)regs.CTR; }
		/* 82231E7Ch case   14:*/		return 0x82231E80;
	}
	return 0x82231E80;
} // Block from 82231E44h-82231E80h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231E80);
		  /* 82231E80h */ case    0:  		/* li R3, 1 */
		/* 82231E80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231E80h case    0:*/		return 0x82231E84;
		  /* 82231E84h */ case    1:  		/* b 92 */
		/* 82231E84h case    1:*/		return 0x82231EE0;
		/* 82231E84h case    1:*/		return 0x82231E88;
	}
	return 0x82231E88;
} // Block from 82231E80h-82231E88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231E88);
		  /* 82231E88h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 82231E88h case    0:*/		if ( regs.CR[6].eq ) { return 0x82231EA0;  }
		/* 82231E88h case    0:*/		return 0x82231E8C;
		  /* 82231E8Ch */ case    1:  		/* li R6, 0 */
		/* 82231E8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231E8Ch case    1:*/		return 0x82231E90;
		  /* 82231E90h */ case    2:  		/* li R5, 0 */
		/* 82231E90h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231E90h case    2:*/		return 0x82231E94;
		  /* 82231E94h */ case    3:  		/* li R4, 34 */
		/* 82231E94h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 82231E94h case    3:*/		return 0x82231E98;
		  /* 82231E98h */ case    4:  		/* mr R3, R29 */
		/* 82231E98h case    4:*/		regs.R3 = regs.R29;
		/* 82231E98h case    4:*/		return 0x82231E9C;
		  /* 82231E9Ch */ case    5:  		/* bl -869116 */
		/* 82231E9Ch case    5:*/		regs.LR = 0x82231EA0; return 0x8215DBA0;
		/* 82231E9Ch case    5:*/		return 0x82231EA0;
	}
	return 0x82231EA0;
} // Block from 82231E88h-82231EA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231EA0);
		  /* 82231EA0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231EA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231EA0h case    0:*/		return 0x82231EA4;
		  /* 82231EA4h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231EA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231EDC;  }
		/* 82231EA4h case    1:*/		return 0x82231EA8;
		  /* 82231EA8h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231EA8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231EA8h case    2:*/		return 0x82231EAC;
		  /* 82231EACh */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231EACh case    3:*/		if ( regs.CR[6].eq ) { return 0x82231EDC;  }
		/* 82231EACh case    3:*/		return 0x82231EB0;
		  /* 82231EB0h */ case    4:  		/* lis R11, -32216 */
		/* 82231EB0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231EB0h case    4:*/		return 0x82231EB4;
		  /* 82231EB4h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231EB4h case    5:*/		regs.CTR = regs.R28;
		/* 82231EB4h case    5:*/		return 0x82231EB8;
		  /* 82231EB8h */ case    6:  		/* lis R10, -32252 */
		/* 82231EB8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231EB8h case    6:*/		return 0x82231EBC;
		  /* 82231EBCh */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231EBCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231EBCh case    7:*/		return 0x82231EC0;
		  /* 82231EC0h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231EC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231EC0h case    8:*/		return 0x82231EC4;
		  /* 82231EC4h */ case    9:  		/* li R8, 0 */
		/* 82231EC4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231EC4h case    9:*/		return 0x82231EC8;
		  /* 82231EC8h */ case   10:  		/* mr R7, R30 */
		/* 82231EC8h case   10:*/		regs.R7 = regs.R30;
		/* 82231EC8h case   10:*/		return 0x82231ECC;
		  /* 82231ECCh */ case   11:  		/* li R6, 57 */
		/* 82231ECCh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x39);
		/* 82231ECCh case   11:*/		return 0x82231ED0;
		  /* 82231ED0h */ case   12:  		/* mr R3, R27 */
		/* 82231ED0h case   12:*/		regs.R3 = regs.R27;
		/* 82231ED0h case   12:*/		return 0x82231ED4;
		  /* 82231ED4h */ case   13:  		/* lwz R5, <#[R11 + 228]> */
		/* 82231ED4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000E4) );
		/* 82231ED4h case   13:*/		return 0x82231ED8;
		  /* 82231ED8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231ED8h case   14:*/		if ( 1 ) { regs.LR = 0x82231EDC; return (uint32)regs.CTR; }
		/* 82231ED8h case   14:*/		return 0x82231EDC;
	}
	return 0x82231EDC;
} // Block from 82231EA0h-82231EDCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231EDC);
		  /* 82231EDCh */ case    0:  		/* li R3, 0 */
		/* 82231EDCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82231EDCh case    0:*/		return 0x82231EE0;
	}
	return 0x82231EE0;
} // Block from 82231EDCh-82231EE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82231EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231EE0);
		  /* 82231EE0h */ case    0:  		/* addi R1, R1, 128 */
		/* 82231EE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82231EE0h case    0:*/		return 0x82231EE4;
		  /* 82231EE4h */ case    1:  		/* b -1707072 */
		/* 82231EE4h case    1:*/		return 0x820912A4;
		/* 82231EE4h case    1:*/		return 0x82231EE8;
	}
	return 0x82231EE8;
} // Block from 82231EE0h-82231EE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231EE8);
		  /* 82231EE8h */ case    0:  		/* mfspr R12, LR */
		/* 82231EE8h case    0:*/		regs.R12 = regs.LR;
		/* 82231EE8h case    0:*/		return 0x82231EEC;
		  /* 82231EECh */ case    1:  		/* bl -1707160 */
		/* 82231EECh case    1:*/		regs.LR = 0x82231EF0; return 0x82091254;
		/* 82231EECh case    1:*/		return 0x82231EF0;
		  /* 82231EF0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82231EF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82231EF0h case    2:*/		return 0x82231EF4;
		  /* 82231EF4h */ case    3:  		/* mr R31, R3 */
		/* 82231EF4h case    3:*/		regs.R31 = regs.R3;
		/* 82231EF4h case    3:*/		return 0x82231EF8;
		  /* 82231EF8h */ case    4:  		/* mr R30, R4 */
		/* 82231EF8h case    4:*/		regs.R30 = regs.R4;
		/* 82231EF8h case    4:*/		return 0x82231EFC;
		  /* 82231EFCh */ case    5:  		/* mr R29, R5 */
		/* 82231EFCh case    5:*/		regs.R29 = regs.R5;
		/* 82231EFCh case    5:*/		return 0x82231F00;
	}
	return 0x82231F00;
} // Block from 82231EE8h-82231F00h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82231F00h
// Function '?CompileWithYUVConversion@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231F00);
		  /* 82231F00h */ case    0:  		/* mr R28, R6 */
		/* 82231F00h case    0:*/		regs.R28 = regs.R6;
		/* 82231F00h case    0:*/		return 0x82231F04;
		  /* 82231F04h */ case    1:  		/* mr R27, R7 */
		/* 82231F04h case    1:*/		regs.R27 = regs.R7;
		/* 82231F04h case    1:*/		return 0x82231F08;
		  /* 82231F08h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82231F08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82231F08h case    2:*/		return 0x82231F0C;
		  /* 82231F0Ch */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 82231F0Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82231F30;  }
		/* 82231F0Ch case    3:*/		return 0x82231F10;
		  /* 82231F10h */ case    4:  		/* lis R11, -32252 */
		/* 82231F10h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82231F10h case    4:*/		return 0x82231F14;
		  /* 82231F14h */ case    5:  		/* lis R10, -32253 */
		/* 82231F14h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82231F14h case    5:*/		return 0x82231F18;
		  /* 82231F18h */ case    6:  		/* lis R9, -32253 */
		/* 82231F18h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82231F18h case    6:*/		return 0x82231F1C;
		  /* 82231F1Ch */ case    7:  		/* addi R6, R11, 4336 */
		/* 82231F1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82231F1Ch case    7:*/		return 0x82231F20;
		  /* 82231F20h */ case    8:  		/* addi R5, R10, 27792 */
		/* 82231F20h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82231F20h case    8:*/		return 0x82231F24;
		  /* 82231F24h */ case    9:  		/* addi R4, R9, 27460 */
		/* 82231F24h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82231F24h case    9:*/		return 0x82231F28;
		  /* 82231F28h */ case   10:  		/* li R7, 2371 */
		/* 82231F28h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x943);
		/* 82231F28h case   10:*/		return 0x82231F2C;
		  /* 82231F2Ch */ case   11:  		/* bl -893732 */
		/* 82231F2Ch case   11:*/		regs.LR = 0x82231F30; return 0x82157C08;
		/* 82231F2Ch case   11:*/		return 0x82231F30;
	}
	return 0x82231F30;
} // Block from 82231F00h-82231F30h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82231F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231F30);
		  /* 82231F30h */ case    0:  		/* mr R5, R30 */
		/* 82231F30h case    0:*/		regs.R5 = regs.R30;
		/* 82231F30h case    0:*/		return 0x82231F34;
		  /* 82231F34h */ case    1:  		/* li R4, 37 */
		/* 82231F34h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 82231F34h case    1:*/		return 0x82231F38;
		  /* 82231F38h */ case    2:  		/* mr R3, R31 */
		/* 82231F38h case    2:*/		regs.R3 = regs.R31;
		/* 82231F38h case    2:*/		return 0x82231F3C;
		  /* 82231F3Ch */ case    3:  		/* bl -870140 */
		/* 82231F3Ch case    3:*/		regs.LR = 0x82231F40; return 0x8215D840;
		/* 82231F3Ch case    3:*/		return 0x82231F40;
		  /* 82231F40h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 82231F40h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82231F40h case    4:*/		return 0x82231F44;
		  /* 82231F44h */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 82231F44h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82231FA8;  }
		/* 82231F44h case    5:*/		return 0x82231F48;
		  /* 82231F48h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82231F48h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231F48h case    6:*/		return 0x82231F4C;
		  /* 82231F4Ch */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82231F4Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82231F64;  }
		/* 82231F4Ch case    7:*/		return 0x82231F50;
		  /* 82231F50h */ case    8:  		/* li R6, 1 */
		/* 82231F50h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82231F50h case    8:*/		return 0x82231F54;
		  /* 82231F54h */ case    9:  		/* li R5, 0 */
		/* 82231F54h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231F54h case    9:*/		return 0x82231F58;
		  /* 82231F58h */ case   10:  		/* li R4, 35 */
		/* 82231F58h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 82231F58h case   10:*/		return 0x82231F5C;
		  /* 82231F5Ch */ case   11:  		/* mr R3, R29 */
		/* 82231F5Ch case   11:*/		regs.R3 = regs.R29;
		/* 82231F5Ch case   11:*/		return 0x82231F60;
		  /* 82231F60h */ case   12:  		/* bl -869312 */
		/* 82231F60h case   12:*/		regs.LR = 0x82231F64; return 0x8215DBA0;
		/* 82231F60h case   12:*/		return 0x82231F64;
	}
	return 0x82231F64;
} // Block from 82231F30h-82231F64h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82231F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231F64);
		  /* 82231F64h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231F64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231F64h case    0:*/		return 0x82231F68;
		  /* 82231F68h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231F68h case    1:*/		if ( regs.CR[6].eq ) { return 0x82231FA0;  }
		/* 82231F68h case    1:*/		return 0x82231F6C;
		  /* 82231F6Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231F6Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231F6Ch case    2:*/		return 0x82231F70;
		  /* 82231F70h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231F70h case    3:*/		if ( regs.CR[6].eq ) { return 0x82231FA0;  }
		/* 82231F70h case    3:*/		return 0x82231F74;
		  /* 82231F74h */ case    4:  		/* lis R11, -32216 */
		/* 82231F74h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231F74h case    4:*/		return 0x82231F78;
		  /* 82231F78h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231F78h case    5:*/		regs.CTR = regs.R28;
		/* 82231F78h case    5:*/		return 0x82231F7C;
		  /* 82231F7Ch */ case    6:  		/* lis R10, -32252 */
		/* 82231F7Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231F7Ch case    6:*/		return 0x82231F80;
		  /* 82231F80h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231F80h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231F80h case    7:*/		return 0x82231F84;
		  /* 82231F84h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231F84h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231F84h case    8:*/		return 0x82231F88;
		  /* 82231F88h */ case    9:  		/* li R8, 1 */
		/* 82231F88h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82231F88h case    9:*/		return 0x82231F8C;
		  /* 82231F8Ch */ case   10:  		/* mr R7, R30 */
		/* 82231F8Ch case   10:*/		regs.R7 = regs.R30;
		/* 82231F8Ch case   10:*/		return 0x82231F90;
		  /* 82231F90h */ case   11:  		/* li R6, 58 */
		/* 82231F90h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3A);
		/* 82231F90h case   11:*/		return 0x82231F94;
		  /* 82231F94h */ case   12:  		/* mr R3, R27 */
		/* 82231F94h case   12:*/		regs.R3 = regs.R27;
		/* 82231F94h case   12:*/		return 0x82231F98;
		  /* 82231F98h */ case   13:  		/* lwz R5, <#[R11 + 232]> */
		/* 82231F98h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000E8) );
		/* 82231F98h case   13:*/		return 0x82231F9C;
		  /* 82231F9Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231F9Ch case   14:*/		if ( 1 ) { regs.LR = 0x82231FA0; return (uint32)regs.CTR; }
		/* 82231F9Ch case   14:*/		return 0x82231FA0;
	}
	return 0x82231FA0;
} // Block from 82231F64h-82231FA0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82231FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231FA0);
		  /* 82231FA0h */ case    0:  		/* li R3, 1 */
		/* 82231FA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82231FA0h case    0:*/		return 0x82231FA4;
		  /* 82231FA4h */ case    1:  		/* b 96 */
		/* 82231FA4h case    1:*/		return 0x82232004;
		/* 82231FA4h case    1:*/		return 0x82231FA8;
	}
	return 0x82231FA8;
} // Block from 82231FA0h-82231FA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82231FA8h
// Function '?CompileWithPointModeShadowBuffering@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231FA8);
		  /* 82231FA8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82231FA8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82231FA8h case    0:*/		return 0x82231FAC;
		  /* 82231FACh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82231FACh case    1:*/		if ( regs.CR[6].eq ) { return 0x82231FC4;  }
		/* 82231FACh case    1:*/		return 0x82231FB0;
		  /* 82231FB0h */ case    2:  		/* li R6, 0 */
		/* 82231FB0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82231FB0h case    2:*/		return 0x82231FB4;
		  /* 82231FB4h */ case    3:  		/* li R5, 0 */
		/* 82231FB4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82231FB4h case    3:*/		return 0x82231FB8;
		  /* 82231FB8h */ case    4:  		/* li R4, 35 */
		/* 82231FB8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 82231FB8h case    4:*/		return 0x82231FBC;
		  /* 82231FBCh */ case    5:  		/* mr R3, R29 */
		/* 82231FBCh case    5:*/		regs.R3 = regs.R29;
		/* 82231FBCh case    5:*/		return 0x82231FC0;
		  /* 82231FC0h */ case    6:  		/* bl -869408 */
		/* 82231FC0h case    6:*/		regs.LR = 0x82231FC4; return 0x8215DBA0;
		/* 82231FC0h case    6:*/		return 0x82231FC4;
	}
	return 0x82231FC4;
} // Block from 82231FA8h-82231FC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82231FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82231FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82231FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82231FC4);
		  /* 82231FC4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82231FC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82231FC4h case    0:*/		return 0x82231FC8;
		  /* 82231FC8h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82231FC8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232000;  }
		/* 82231FC8h case    1:*/		return 0x82231FCC;
		  /* 82231FCCh */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82231FCCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82231FCCh case    2:*/		return 0x82231FD0;
		  /* 82231FD0h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82231FD0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82232000;  }
		/* 82231FD0h case    3:*/		return 0x82231FD4;
		  /* 82231FD4h */ case    4:  		/* lis R11, -32216 */
		/* 82231FD4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82231FD4h case    4:*/		return 0x82231FD8;
		  /* 82231FD8h */ case    5:  		/* mtspr CTR, R28 */
		/* 82231FD8h case    5:*/		regs.CTR = regs.R28;
		/* 82231FD8h case    5:*/		return 0x82231FDC;
		  /* 82231FDCh */ case    6:  		/* lis R10, -32252 */
		/* 82231FDCh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82231FDCh case    6:*/		return 0x82231FE0;
		  /* 82231FE0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82231FE0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82231FE0h case    7:*/		return 0x82231FE4;
		  /* 82231FE4h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82231FE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82231FE4h case    8:*/		return 0x82231FE8;
		  /* 82231FE8h */ case    9:  		/* li R8, 0 */
		/* 82231FE8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82231FE8h case    9:*/		return 0x82231FEC;
		  /* 82231FECh */ case   10:  		/* mr R7, R30 */
		/* 82231FECh case   10:*/		regs.R7 = regs.R30;
		/* 82231FECh case   10:*/		return 0x82231FF0;
		  /* 82231FF0h */ case   11:  		/* li R6, 58 */
		/* 82231FF0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3A);
		/* 82231FF0h case   11:*/		return 0x82231FF4;
		  /* 82231FF4h */ case   12:  		/* mr R3, R27 */
		/* 82231FF4h case   12:*/		regs.R3 = regs.R27;
		/* 82231FF4h case   12:*/		return 0x82231FF8;
		  /* 82231FF8h */ case   13:  		/* lwz R5, <#[R11 + 232]> */
		/* 82231FF8h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000E8) );
		/* 82231FF8h case   13:*/		return 0x82231FFC;
		  /* 82231FFCh */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82231FFCh case   14:*/		if ( 1 ) { regs.LR = 0x82232000; return (uint32)regs.CTR; }
		/* 82231FFCh case   14:*/		return 0x82232000;
	}
	return 0x82232000;
} // Block from 82231FC4h-82232000h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82232000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232000);
		  /* 82232000h */ case    0:  		/* li R3, 0 */
		/* 82232000h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232000h case    0:*/		return 0x82232004;
	}
	return 0x82232004;
} // Block from 82232000h-82232004h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232004);
		  /* 82232004h */ case    0:  		/* addi R1, R1, 128 */
		/* 82232004h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82232004h case    0:*/		return 0x82232008;
		  /* 82232008h */ case    1:  		/* b -1707364 */
		/* 82232008h case    1:*/		return 0x820912A4;
		/* 82232008h case    1:*/		return 0x8223200C;
		  /* 8223200Ch */ case    2:  		/* nop */
		/* 8223200Ch case    2:*/		cpu::op::nop();
		/* 8223200Ch case    2:*/		return 0x82232010;
	}
	return 0x82232010;
} // Block from 82232004h-82232010h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232010);
		  /* 82232010h */ case    0:  		/* mfspr R12, LR */
		/* 82232010h case    0:*/		regs.R12 = regs.LR;
		/* 82232010h case    0:*/		return 0x82232014;
		  /* 82232014h */ case    1:  		/* bl -1707456 */
		/* 82232014h case    1:*/		regs.LR = 0x82232018; return 0x82091254;
		/* 82232014h case    1:*/		return 0x82232018;
		  /* 82232018h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82232018h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82232018h case    2:*/		return 0x8223201C;
		  /* 8223201Ch */ case    3:  		/* mr R31, R3 */
		/* 8223201Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223201Ch case    3:*/		return 0x82232020;
		  /* 82232020h */ case    4:  		/* mr R30, R4 */
		/* 82232020h case    4:*/		regs.R30 = regs.R4;
		/* 82232020h case    4:*/		return 0x82232024;
		  /* 82232024h */ case    5:  		/* mr R29, R5 */
		/* 82232024h case    5:*/		regs.R29 = regs.R5;
		/* 82232024h case    5:*/		return 0x82232028;
		  /* 82232028h */ case    6:  		/* mr R28, R6 */
		/* 82232028h case    6:*/		regs.R28 = regs.R6;
		/* 82232028h case    6:*/		return 0x8223202C;
		  /* 8223202Ch */ case    7:  		/* mr R27, R7 */
		/* 8223202Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223202Ch case    7:*/		return 0x82232030;
		  /* 82232030h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82232030h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232030h case    8:*/		return 0x82232034;
		  /* 82232034h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82232034h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82232058;  }
		/* 82232034h case    9:*/		return 0x82232038;
		  /* 82232038h */ case   10:  		/* lis R11, -32252 */
		/* 82232038h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232038h case   10:*/		return 0x8223203C;
		  /* 8223203Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223203Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223203Ch case   11:*/		return 0x82232040;
		  /* 82232040h */ case   12:  		/* lis R9, -32253 */
		/* 82232040h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232040h case   12:*/		return 0x82232044;
		  /* 82232044h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82232044h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82232044h case   13:*/		return 0x82232048;
		  /* 82232048h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82232048h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82232048h case   14:*/		return 0x8223204C;
		  /* 8223204Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223204Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223204Ch case   15:*/		return 0x82232050;
		  /* 82232050h */ case   16:  		/* li R7, 2426 */
		/* 82232050h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x97A);
		/* 82232050h case   16:*/		return 0x82232054;
		  /* 82232054h */ case   17:  		/* bl -894028 */
		/* 82232054h case   17:*/		regs.LR = 0x82232058; return 0x82157C08;
		/* 82232054h case   17:*/		return 0x82232058;
	}
	return 0x82232058;
} // Block from 82232010h-82232058h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82232058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232058);
		  /* 82232058h */ case    0:  		/* mr R5, R30 */
		/* 82232058h case    0:*/		regs.R5 = regs.R30;
		/* 82232058h case    0:*/		return 0x8223205C;
		  /* 8223205Ch */ case    1:  		/* li R4, 37 */
		/* 8223205Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 8223205Ch case    1:*/		return 0x82232060;
		  /* 82232060h */ case    2:  		/* mr R3, R31 */
		/* 82232060h case    2:*/		regs.R3 = regs.R31;
		/* 82232060h case    2:*/		return 0x82232064;
		  /* 82232064h */ case    3:  		/* bl -870436 */
		/* 82232064h case    3:*/		regs.LR = 0x82232068; return 0x8215D840;
		/* 82232064h case    3:*/		return 0x82232068;
		  /* 82232068h */ case    4:  		/* cmplwi CR6, R3, 2 */
		/* 82232068h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 82232068h case    4:*/		return 0x8223206C;
		  /* 8223206Ch */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 8223206Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822320D0;  }
		/* 8223206Ch case    5:*/		return 0x82232070;
		  /* 82232070h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82232070h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232070h case    6:*/		return 0x82232074;
		  /* 82232074h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82232074h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223208C;  }
		/* 82232074h case    7:*/		return 0x82232078;
		  /* 82232078h */ case    8:  		/* li R6, 1 */
		/* 82232078h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82232078h case    8:*/		return 0x8223207C;
		  /* 8223207Ch */ case    9:  		/* li R5, 0 */
		/* 8223207Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223207Ch case    9:*/		return 0x82232080;
		  /* 82232080h */ case   10:  		/* li R4, 36 */
		/* 82232080h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 82232080h case   10:*/		return 0x82232084;
		  /* 82232084h */ case   11:  		/* mr R3, R29 */
		/* 82232084h case   11:*/		regs.R3 = regs.R29;
		/* 82232084h case   11:*/		return 0x82232088;
		  /* 82232088h */ case   12:  		/* bl -869608 */
		/* 82232088h case   12:*/		regs.LR = 0x8223208C; return 0x8215DBA0;
		/* 82232088h case   12:*/		return 0x8223208C;
	}
	return 0x8223208C;
} // Block from 82232058h-8223208Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223208Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223208C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223208C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223208C);
		  /* 8223208Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8223208Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223208Ch case    0:*/		return 0x82232090;
		  /* 82232090h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82232090h case    1:*/		if ( regs.CR[6].eq ) { return 0x822320C8;  }
		/* 82232090h case    1:*/		return 0x82232094;
		  /* 82232094h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82232094h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82232094h case    2:*/		return 0x82232098;
		  /* 82232098h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82232098h case    3:*/		if ( regs.CR[6].eq ) { return 0x822320C8;  }
		/* 82232098h case    3:*/		return 0x8223209C;
		  /* 8223209Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223209Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223209Ch case    4:*/		return 0x822320A0;
		  /* 822320A0h */ case    5:  		/* mtspr CTR, R28 */
		/* 822320A0h case    5:*/		regs.CTR = regs.R28;
		/* 822320A0h case    5:*/		return 0x822320A4;
		  /* 822320A4h */ case    6:  		/* lis R10, -32252 */
		/* 822320A4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822320A4h case    6:*/		return 0x822320A8;
		  /* 822320A8h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822320A8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822320A8h case    7:*/		return 0x822320AC;
		  /* 822320ACh */ case    8:  		/* addi R4, R10, 4444 */
		/* 822320ACh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822320ACh case    8:*/		return 0x822320B0;
		  /* 822320B0h */ case    9:  		/* li R8, 1 */
		/* 822320B0h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822320B0h case    9:*/		return 0x822320B4;
		  /* 822320B4h */ case   10:  		/* mr R7, R30 */
		/* 822320B4h case   10:*/		regs.R7 = regs.R30;
		/* 822320B4h case   10:*/		return 0x822320B8;
		  /* 822320B8h */ case   11:  		/* li R6, 59 */
		/* 822320B8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3B);
		/* 822320B8h case   11:*/		return 0x822320BC;
		  /* 822320BCh */ case   12:  		/* mr R3, R27 */
		/* 822320BCh case   12:*/		regs.R3 = regs.R27;
		/* 822320BCh case   12:*/		return 0x822320C0;
		  /* 822320C0h */ case   13:  		/* lwz R5, <#[R11 + 236]> */
		/* 822320C0h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000EC) );
		/* 822320C0h case   13:*/		return 0x822320C4;
		  /* 822320C4h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822320C4h case   14:*/		if ( 1 ) { regs.LR = 0x822320C8; return (uint32)regs.CTR; }
		/* 822320C4h case   14:*/		return 0x822320C8;
	}
	return 0x822320C8;
} // Block from 8223208Ch-822320C8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822320C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822320C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822320C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822320C8);
		  /* 822320C8h */ case    0:  		/* li R3, 1 */
		/* 822320C8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822320C8h case    0:*/		return 0x822320CC;
		  /* 822320CCh */ case    1:  		/* b 96 */
		/* 822320CCh case    1:*/		return 0x8223212C;
		/* 822320CCh case    1:*/		return 0x822320D0;
	}
	return 0x822320D0;
} // Block from 822320C8h-822320D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822320D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822320D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822320D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822320D0);
		  /* 822320D0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822320D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822320D0h case    0:*/		return 0x822320D4;
		  /* 822320D4h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822320D4h case    1:*/		if ( regs.CR[6].eq ) { return 0x822320EC;  }
		/* 822320D4h case    1:*/		return 0x822320D8;
		  /* 822320D8h */ case    2:  		/* li R6, 0 */
		/* 822320D8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822320D8h case    2:*/		return 0x822320DC;
		  /* 822320DCh */ case    3:  		/* li R5, 0 */
		/* 822320DCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822320DCh case    3:*/		return 0x822320E0;
		  /* 822320E0h */ case    4:  		/* li R4, 36 */
		/* 822320E0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 822320E0h case    4:*/		return 0x822320E4;
		  /* 822320E4h */ case    5:  		/* mr R3, R29 */
		/* 822320E4h case    5:*/		regs.R3 = regs.R29;
		/* 822320E4h case    5:*/		return 0x822320E8;
	}
	return 0x822320E8;
} // Block from 822320D0h-822320E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822320E8h
// Function '?CompileWithBilinearModeShadowBuffering@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822320E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822320E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822320E8);
		  /* 822320E8h */ case    0:  		/* bl -869704 */
		/* 822320E8h case    0:*/		regs.LR = 0x822320EC; return 0x8215DBA0;
		/* 822320E8h case    0:*/		return 0x822320EC;
	}
	return 0x822320EC;
} // Block from 822320E8h-822320ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822320ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822320EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822320EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822320EC);
		  /* 822320ECh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822320ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822320ECh case    0:*/		return 0x822320F0;
		  /* 822320F0h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822320F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232128;  }
		/* 822320F0h case    1:*/		return 0x822320F4;
		  /* 822320F4h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 822320F4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822320F4h case    2:*/		return 0x822320F8;
		  /* 822320F8h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822320F8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82232128;  }
		/* 822320F8h case    3:*/		return 0x822320FC;
		  /* 822320FCh */ case    4:  		/* lis R11, -32216 */
		/* 822320FCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822320FCh case    4:*/		return 0x82232100;
		  /* 82232100h */ case    5:  		/* mtspr CTR, R28 */
		/* 82232100h case    5:*/		regs.CTR = regs.R28;
		/* 82232100h case    5:*/		return 0x82232104;
		  /* 82232104h */ case    6:  		/* lis R10, -32252 */
		/* 82232104h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232104h case    6:*/		return 0x82232108;
		  /* 82232108h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82232108h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82232108h case    7:*/		return 0x8223210C;
		  /* 8223210Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 8223210Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 8223210Ch case    8:*/		return 0x82232110;
		  /* 82232110h */ case    9:  		/* li R8, 0 */
		/* 82232110h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82232110h case    9:*/		return 0x82232114;
		  /* 82232114h */ case   10:  		/* mr R7, R30 */
		/* 82232114h case   10:*/		regs.R7 = regs.R30;
		/* 82232114h case   10:*/		return 0x82232118;
		  /* 82232118h */ case   11:  		/* li R6, 59 */
		/* 82232118h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3B);
		/* 82232118h case   11:*/		return 0x8223211C;
		  /* 8223211Ch */ case   12:  		/* mr R3, R27 */
		/* 8223211Ch case   12:*/		regs.R3 = regs.R27;
		/* 8223211Ch case   12:*/		return 0x82232120;
		  /* 82232120h */ case   13:  		/* lwz R5, <#[R11 + 236]> */
		/* 82232120h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000EC) );
		/* 82232120h case   13:*/		return 0x82232124;
		  /* 82232124h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82232124h case   14:*/		if ( 1 ) { regs.LR = 0x82232128; return (uint32)regs.CTR; }
		/* 82232124h case   14:*/		return 0x82232128;
	}
	return 0x82232128;
} // Block from 822320ECh-82232128h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82232128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232128);
		  /* 82232128h */ case    0:  		/* li R3, 0 */
		/* 82232128h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232128h case    0:*/		return 0x8223212C;
	}
	return 0x8223212C;
} // Block from 82232128h-8223212Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223212Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223212C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223212C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223212C);
		  /* 8223212Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8223212Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223212Ch case    0:*/		return 0x82232130;
		  /* 82232130h */ case    1:  		/* b -1707660 */
		/* 82232130h case    1:*/		return 0x820912A4;
		/* 82232130h case    1:*/		return 0x82232134;
		  /* 82232134h */ case    2:  		/* nop */
		/* 82232134h case    2:*/		cpu::op::nop();
		/* 82232134h case    2:*/		return 0x82232138;
	}
	return 0x82232138;
} // Block from 8223212Ch-82232138h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232138);
		  /* 82232138h */ case    0:  		/* mfspr R12, LR */
		/* 82232138h case    0:*/		regs.R12 = regs.LR;
		/* 82232138h case    0:*/		return 0x8223213C;
		  /* 8223213Ch */ case    1:  		/* bl -1707744 */
		/* 8223213Ch case    1:*/		regs.LR = 0x82232140; return 0x8209125C;
		/* 8223213Ch case    1:*/		return 0x82232140;
		  /* 82232140h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82232140h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82232140h case    2:*/		return 0x82232144;
		  /* 82232144h */ case    3:  		/* li R4, 971 */
		/* 82232144h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x3CB);
		/* 82232144h case    3:*/		return 0x82232148;
		  /* 82232148h */ case    4:  		/* mr R31, R5 */
		/* 82232148h case    4:*/		regs.R31 = regs.R5;
		/* 82232148h case    4:*/		return 0x8223214C;
		  /* 8223214Ch */ case    5:  		/* mr R30, R6 */
		/* 8223214Ch case    5:*/		regs.R30 = regs.R6;
		/* 8223214Ch case    5:*/		return 0x82232150;
		  /* 82232150h */ case    6:  		/* mr R29, R7 */
		/* 82232150h case    6:*/		regs.R29 = regs.R7;
		/* 82232150h case    6:*/		return 0x82232154;
		  /* 82232154h */ case    7:  		/* bl -871492 */
		/* 82232154h case    7:*/		regs.LR = 0x82232158; return 0x8215D510;
		/* 82232154h case    7:*/		return 0x82232158;
		  /* 82232158h */ case    8:  		/* cmplwi CR6, R3, 1 */
		/* 82232158h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82232158h case    8:*/		return 0x8223215C;
		  /* 8223215Ch */ case    9:  		/* bc 4, CR6_EQ, 96 */
		/* 8223215Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x822321BC;  }
		/* 8223215Ch case    9:*/		return 0x82232160;
		  /* 82232160h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 82232160h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82232160h case   10:*/		return 0x82232164;
		  /* 82232164h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 82232164h case   11:*/		if ( regs.CR[6].eq ) { return 0x8223217C;  }
		/* 82232164h case   11:*/		return 0x82232168;
		  /* 82232168h */ case   12:  		/* li R6, 1 */
		/* 82232168h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82232168h case   12:*/		return 0x8223216C;
		  /* 8223216Ch */ case   13:  		/* li R5, 0 */
		/* 8223216Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223216Ch case   13:*/		return 0x82232170;
		  /* 82232170h */ case   14:  		/* li R4, 37 */
		/* 82232170h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 82232170h case   14:*/		return 0x82232174;
		  /* 82232174h */ case   15:  		/* mr R3, R31 */
		/* 82232174h case   15:*/		regs.R3 = regs.R31;
		/* 82232174h case   15:*/		return 0x82232178;
		  /* 82232178h */ case   16:  		/* bl -869848 */
		/* 82232178h case   16:*/		regs.LR = 0x8223217C; return 0x8215DBA0;
		/* 82232178h case   16:*/		return 0x8223217C;
	}
	return 0x8223217C;
} // Block from 82232138h-8223217Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223217Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223217C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223217C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223217C);
		  /* 8223217Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8223217Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223217Ch case    0:*/		return 0x82232180;
		  /* 82232180h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82232180h case    1:*/		if ( regs.CR[6].eq ) { return 0x822321B4;  }
		/* 82232180h case    1:*/		return 0x82232184;
		  /* 82232184h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82232184h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232184h case    2:*/		return 0x82232188;
		  /* 82232188h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82232188h case    3:*/		if ( regs.CR[6].eq ) { return 0x822321B4;  }
		/* 82232188h case    3:*/		return 0x8223218C;
		  /* 8223218Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223218Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223218Ch case    4:*/		return 0x82232190;
		  /* 82232190h */ case    5:  		/* mtspr CTR, R30 */
		/* 82232190h case    5:*/		regs.CTR = regs.R30;
		/* 82232190h case    5:*/		return 0x82232194;
		  /* 82232194h */ case    6:  		/* lis R10, -32252 */
		/* 82232194h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232194h case    6:*/		return 0x82232198;
		  /* 82232198h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82232198h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82232198h case    7:*/		return 0x8223219C;
		  /* 8223219Ch */ case    8:  		/* addi R4, R10, 4320 */
		/* 8223219Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 8223219Ch case    8:*/		return 0x822321A0;
		  /* 822321A0h */ case    9:  		/* li R7, 1 */
		/* 822321A0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822321A0h case    9:*/		return 0x822321A4;
		  /* 822321A4h */ case   10:  		/* li R6, 60 */
		/* 822321A4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x3C);
		/* 822321A4h case   10:*/		return 0x822321A8;
		  /* 822321A8h */ case   11:  		/* mr R3, R29 */
		/* 822321A8h case   11:*/		regs.R3 = regs.R29;
		/* 822321A8h case   11:*/		return 0x822321AC;
		  /* 822321ACh */ case   12:  		/* lwz R5, <#[R11 + 240]> */
		/* 822321ACh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000F0) );
		/* 822321ACh case   12:*/		return 0x822321B0;
		  /* 822321B0h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 822321B0h case   13:*/		if ( 1 ) { regs.LR = 0x822321B4; return (uint32)regs.CTR; }
		/* 822321B0h case   13:*/		return 0x822321B4;
	}
	return 0x822321B4;
} // Block from 8223217Ch-822321B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822321B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822321B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822321B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822321B4);
		  /* 822321B4h */ case    0:  		/* li R3, 1 */
		/* 822321B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822321B4h case    0:*/		return 0x822321B8;
		  /* 822321B8h */ case    1:  		/* b 92 */
		/* 822321B8h case    1:*/		return 0x82232214;
		/* 822321B8h case    1:*/		return 0x822321BC;
	}
	return 0x822321BC;
} // Block from 822321B4h-822321BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822321BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822321BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822321BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822321BC);
		  /* 822321BCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 822321BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 822321BCh case    0:*/		return 0x822321C0;
		  /* 822321C0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822321C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x822321D8;  }
		/* 822321C0h case    1:*/		return 0x822321C4;
		  /* 822321C4h */ case    2:  		/* li R6, 0 */
		/* 822321C4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822321C4h case    2:*/		return 0x822321C8;
		  /* 822321C8h */ case    3:  		/* li R5, 0 */
		/* 822321C8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822321C8h case    3:*/		return 0x822321CC;
		  /* 822321CCh */ case    4:  		/* li R4, 37 */
		/* 822321CCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 822321CCh case    4:*/		return 0x822321D0;
		  /* 822321D0h */ case    5:  		/* mr R3, R31 */
		/* 822321D0h case    5:*/		regs.R3 = regs.R31;
		/* 822321D0h case    5:*/		return 0x822321D4;
		  /* 822321D4h */ case    6:  		/* bl -869940 */
		/* 822321D4h case    6:*/		regs.LR = 0x822321D8; return 0x8215DBA0;
		/* 822321D4h case    6:*/		return 0x822321D8;
	}
	return 0x822321D8;
} // Block from 822321BCh-822321D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822321D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822321D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822321D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822321D8);
		  /* 822321D8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 822321D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822321D8h case    0:*/		return 0x822321DC;
		  /* 822321DCh */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822321DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82232210;  }
		/* 822321DCh case    1:*/		return 0x822321E0;
		  /* 822321E0h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 822321E0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822321E0h case    2:*/		return 0x822321E4;
		  /* 822321E4h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822321E4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82232210;  }
		/* 822321E4h case    3:*/		return 0x822321E8;
		  /* 822321E8h */ case    4:  		/* lis R11, -32216 */
		/* 822321E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822321E8h case    4:*/		return 0x822321EC;
		  /* 822321ECh */ case    5:  		/* mtspr CTR, R30 */
		/* 822321ECh case    5:*/		regs.CTR = regs.R30;
		/* 822321ECh case    5:*/		return 0x822321F0;
		  /* 822321F0h */ case    6:  		/* lis R10, -32252 */
		/* 822321F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822321F0h case    6:*/		return 0x822321F4;
		  /* 822321F4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822321F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822321F4h case    7:*/		return 0x822321F8;
		  /* 822321F8h */ case    8:  		/* addi R4, R10, 4320 */
		/* 822321F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 822321F8h case    8:*/		return 0x822321FC;
		  /* 822321FCh */ case    9:  		/* li R7, 0 */
		/* 822321FCh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822321FCh case    9:*/		return 0x82232200;
		  /* 82232200h */ case   10:  		/* li R6, 60 */
		/* 82232200h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x3C);
		/* 82232200h case   10:*/		return 0x82232204;
		  /* 82232204h */ case   11:  		/* mr R3, R29 */
		/* 82232204h case   11:*/		regs.R3 = regs.R29;
		/* 82232204h case   11:*/		return 0x82232208;
		  /* 82232208h */ case   12:  		/* lwz R5, <#[R11 + 240]> */
		/* 82232208h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000F0) );
		/* 82232208h case   12:*/		return 0x8223220C;
		  /* 8223220Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8223220Ch case   13:*/		if ( 1 ) { regs.LR = 0x82232210; return (uint32)regs.CTR; }
		/* 8223220Ch case   13:*/		return 0x82232210;
	}
	return 0x82232210;
} // Block from 822321D8h-82232210h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82232210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232210);
		  /* 82232210h */ case    0:  		/* li R3, 0 */
		/* 82232210h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232210h case    0:*/		return 0x82232214;
	}
	return 0x82232214;
} // Block from 82232210h-82232214h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232214);
		  /* 82232214h */ case    0:  		/* addi R1, R1, 112 */
		/* 82232214h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82232214h case    0:*/		return 0x82232218;
		  /* 82232218h */ case    1:  		/* b -1707884 */
		/* 82232218h case    1:*/		return 0x820912AC;
		/* 82232218h case    1:*/		return 0x8223221C;
		  /* 8223221Ch */ case    2:  		/* nop */
		/* 8223221Ch case    2:*/		cpu::op::nop();
		/* 8223221Ch case    2:*/		return 0x82232220;
	}
	return 0x82232220;
} // Block from 82232214h-82232220h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232220);
		  /* 82232220h */ case    0:  		/* mfspr R12, LR */
		/* 82232220h case    0:*/		regs.R12 = regs.LR;
		/* 82232220h case    0:*/		return 0x82232224;
		  /* 82232224h */ case    1:  		/* bl -1707980 */
		/* 82232224h case    1:*/		regs.LR = 0x82232228; return 0x82091258;
		/* 82232224h case    1:*/		return 0x82232228;
	}
	return 0x82232228;
} // Block from 82232220h-82232228h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82232228h
// Function '?CompileWithShadowGEqualCompareFunc@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232228);
		  /* 82232228h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 82232228h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82232228h case    0:*/		return 0x8223222C;
		  /* 8223222Ch */ case    1:  		/* mr R31, R3 */
		/* 8223222Ch case    1:*/		regs.R31 = regs.R3;
		/* 8223222Ch case    1:*/		return 0x82232230;
		  /* 82232230h */ case    2:  		/* mr R30, R5 */
		/* 82232230h case    2:*/		regs.R30 = regs.R5;
		/* 82232230h case    2:*/		return 0x82232234;
		  /* 82232234h */ case    3:  		/* mr R29, R6 */
		/* 82232234h case    3:*/		regs.R29 = regs.R6;
		/* 82232234h case    3:*/		return 0x82232238;
		  /* 82232238h */ case    4:  		/* mr R28, R7 */
		/* 82232238h case    4:*/		regs.R28 = regs.R7;
		/* 82232238h case    4:*/		return 0x8223223C;
		  /* 8223223Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8223223Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223223Ch case    5:*/		return 0x82232240;
		  /* 82232240h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 82232240h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82232264;  }
		/* 82232240h case    6:*/		return 0x82232244;
		  /* 82232244h */ case    7:  		/* lis R11, -32252 */
		/* 82232244h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232244h case    7:*/		return 0x82232248;
		  /* 82232248h */ case    8:  		/* lis R10, -32253 */
		/* 82232248h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82232248h case    8:*/		return 0x8223224C;
		  /* 8223224Ch */ case    9:  		/* lis R9, -32253 */
		/* 8223224Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223224Ch case    9:*/		return 0x82232250;
		  /* 82232250h */ case   10:  		/* addi R6, R11, 4336 */
		/* 82232250h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82232250h case   10:*/		return 0x82232254;
		  /* 82232254h */ case   11:  		/* addi R5, R10, 27792 */
		/* 82232254h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82232254h case   11:*/		return 0x82232258;
		  /* 82232258h */ case   12:  		/* addi R4, R9, 27460 */
		/* 82232258h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232258h case   12:*/		return 0x8223225C;
		  /* 8223225Ch */ case   13:  		/* li R7, 2527 */
		/* 8223225Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x9DF);
		/* 8223225Ch case   13:*/		return 0x82232260;
		  /* 82232260h */ case   14:  		/* bl -894552 */
		/* 82232260h case   14:*/		regs.LR = 0x82232264; return 0x82157C08;
		/* 82232260h case   14:*/		return 0x82232264;
	}
	return 0x82232264;
} // Block from 82232228h-82232264h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82232264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232264);
		  /* 82232264h */ case    0:  		/* li R4, 926 */
		/* 82232264h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x39E);
		/* 82232264h case    0:*/		return 0x82232268;
		  /* 82232268h */ case    1:  		/* mr R3, R31 */
		/* 82232268h case    1:*/		regs.R3 = regs.R31;
		/* 82232268h case    1:*/		return 0x8223226C;
		  /* 8223226Ch */ case    2:  		/* bl -871772 */
		/* 8223226Ch case    2:*/		regs.LR = 0x82232270; return 0x8215D510;
		/* 8223226Ch case    2:*/		return 0x82232270;
		  /* 82232270h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82232270h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82232270h case    3:*/		return 0x82232274;
		  /* 82232274h */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 82232274h case    4:*/		if ( !regs.CR[6].eq ) { return 0x822322D4;  }
		/* 82232274h case    4:*/		return 0x82232278;
		  /* 82232278h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82232278h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82232278h case    5:*/		return 0x8223227C;
		  /* 8223227Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 8223227Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82232294;  }
		/* 8223227Ch case    6:*/		return 0x82232280;
		  /* 82232280h */ case    7:  		/* li R6, 1 */
		/* 82232280h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82232280h case    7:*/		return 0x82232284;
		  /* 82232284h */ case    8:  		/* li R5, 0 */
		/* 82232284h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82232284h case    8:*/		return 0x82232288;
		  /* 82232288h */ case    9:  		/* li R4, 22 */
		/* 82232288h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 82232288h case    9:*/		return 0x8223228C;
		  /* 8223228Ch */ case   10:  		/* mr R3, R30 */
		/* 8223228Ch case   10:*/		regs.R3 = regs.R30;
		/* 8223228Ch case   10:*/		return 0x82232290;
		  /* 82232290h */ case   11:  		/* bl -870128 */
		/* 82232290h case   11:*/		regs.LR = 0x82232294; return 0x8215DBA0;
		/* 82232290h case   11:*/		return 0x82232294;
	}
	return 0x82232294;
} // Block from 82232264h-82232294h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82232294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232294);
		  /* 82232294h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82232294h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232294h case    0:*/		return 0x82232298;
		  /* 82232298h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82232298h case    1:*/		if ( regs.CR[6].eq ) { return 0x822322CC;  }
		/* 82232298h case    1:*/		return 0x8223229C;
		  /* 8223229Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8223229Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223229Ch case    2:*/		return 0x822322A0;
		  /* 822322A0h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822322A0h case    3:*/		if ( regs.CR[6].eq ) { return 0x822322CC;  }
		/* 822322A0h case    3:*/		return 0x822322A4;
		  /* 822322A4h */ case    4:  		/* lis R11, -32216 */
		/* 822322A4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822322A4h case    4:*/		return 0x822322A8;
		  /* 822322A8h */ case    5:  		/* mtspr CTR, R29 */
		/* 822322A8h case    5:*/		regs.CTR = regs.R29;
		/* 822322A8h case    5:*/		return 0x822322AC;
		  /* 822322ACh */ case    6:  		/* lis R10, -32252 */
		/* 822322ACh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822322ACh case    6:*/		return 0x822322B0;
		  /* 822322B0h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822322B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822322B0h case    7:*/		return 0x822322B4;
		  /* 822322B4h */ case    8:  		/* addi R4, R10, 4320 */
		/* 822322B4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 822322B4h case    8:*/		return 0x822322B8;
		  /* 822322B8h */ case    9:  		/* li R7, 1 */
		/* 822322B8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822322B8h case    9:*/		return 0x822322BC;
		  /* 822322BCh */ case   10:  		/* li R6, 36 */
		/* 822322BCh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x24);
		/* 822322BCh case   10:*/		return 0x822322C0;
		  /* 822322C0h */ case   11:  		/* mr R3, R28 */
		/* 822322C0h case   11:*/		regs.R3 = regs.R28;
		/* 822322C0h case   11:*/		return 0x822322C4;
		  /* 822322C4h */ case   12:  		/* lwz R5, <#[R11 + 144]> */
		/* 822322C4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000090) );
		/* 822322C4h case   12:*/		return 0x822322C8;
		  /* 822322C8h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 822322C8h case   13:*/		if ( 1 ) { regs.LR = 0x822322CC; return (uint32)regs.CTR; }
		/* 822322C8h case   13:*/		return 0x822322CC;
	}
	return 0x822322CC;
} // Block from 82232294h-822322CCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 822322CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822322CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822322CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822322CC);
		  /* 822322CCh */ case    0:  		/* li R3, 1 */
		/* 822322CCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822322CCh case    0:*/		return 0x822322D0;
		  /* 822322D0h */ case    1:  		/* b 92 */
		/* 822322D0h case    1:*/		return 0x8223232C;
		/* 822322D0h case    1:*/		return 0x822322D4;
	}
	return 0x822322D4;
} // Block from 822322CCh-822322D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822322D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822322D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822322D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822322D4);
		  /* 822322D4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 822322D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822322D4h case    0:*/		return 0x822322D8;
		  /* 822322D8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822322D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x822322F0;  }
		/* 822322D8h case    1:*/		return 0x822322DC;
		  /* 822322DCh */ case    2:  		/* li R6, 0 */
		/* 822322DCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822322DCh case    2:*/		return 0x822322E0;
		  /* 822322E0h */ case    3:  		/* li R5, 0 */
		/* 822322E0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822322E0h case    3:*/		return 0x822322E4;
		  /* 822322E4h */ case    4:  		/* li R4, 22 */
		/* 822322E4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 822322E4h case    4:*/		return 0x822322E8;
		  /* 822322E8h */ case    5:  		/* mr R3, R30 */
		/* 822322E8h case    5:*/		regs.R3 = regs.R30;
		/* 822322E8h case    5:*/		return 0x822322EC;
		  /* 822322ECh */ case    6:  		/* bl -870220 */
		/* 822322ECh case    6:*/		regs.LR = 0x822322F0; return 0x8215DBA0;
		/* 822322ECh case    6:*/		return 0x822322F0;
	}
	return 0x822322F0;
} // Block from 822322D4h-822322F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822322F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822322F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822322F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822322F0);
		  /* 822322F0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822322F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822322F0h case    0:*/		return 0x822322F4;
		  /* 822322F4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822322F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232328;  }
		/* 822322F4h case    1:*/		return 0x822322F8;
		  /* 822322F8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 822322F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822322F8h case    2:*/		return 0x822322FC;
		  /* 822322FCh */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822322FCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82232328;  }
		/* 822322FCh case    3:*/		return 0x82232300;
		  /* 82232300h */ case    4:  		/* lis R11, -32216 */
		/* 82232300h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232300h case    4:*/		return 0x82232304;
		  /* 82232304h */ case    5:  		/* mtspr CTR, R29 */
		/* 82232304h case    5:*/		regs.CTR = regs.R29;
		/* 82232304h case    5:*/		return 0x82232308;
		  /* 82232308h */ case    6:  		/* lis R10, -32252 */
		/* 82232308h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232308h case    6:*/		return 0x8223230C;
		  /* 8223230Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 8223230Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223230Ch case    7:*/		return 0x82232310;
		  /* 82232310h */ case    8:  		/* addi R4, R10, 4320 */
		/* 82232310h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82232310h case    8:*/		return 0x82232314;
		  /* 82232314h */ case    9:  		/* li R7, 0 */
		/* 82232314h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82232314h case    9:*/		return 0x82232318;
		  /* 82232318h */ case   10:  		/* li R6, 36 */
		/* 82232318h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x24);
		/* 82232318h case   10:*/		return 0x8223231C;
		  /* 8223231Ch */ case   11:  		/* mr R3, R28 */
		/* 8223231Ch case   11:*/		regs.R3 = regs.R28;
		/* 8223231Ch case   11:*/		return 0x82232320;
		  /* 82232320h */ case   12:  		/* lwz R5, <#[R11 + 144]> */
		/* 82232320h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000090) );
		/* 82232320h case   12:*/		return 0x82232324;
		  /* 82232324h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82232324h case   13:*/		if ( 1 ) { regs.LR = 0x82232328; return (uint32)regs.CTR; }
		/* 82232324h case   13:*/		return 0x82232328;
	}
	return 0x82232328;
} // Block from 822322F0h-82232328h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82232328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232328);
		  /* 82232328h */ case    0:  		/* li R3, 0 */
		/* 82232328h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232328h case    0:*/		return 0x8223232C;
	}
	return 0x8223232C;
} // Block from 82232328h-8223232Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223232Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223232C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223232C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223232C);
		  /* 8223232Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8223232Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223232Ch case    0:*/		return 0x82232330;
		  /* 82232330h */ case    1:  		/* b -1708168 */
		/* 82232330h case    1:*/		return 0x820912A8;
		/* 82232330h case    1:*/		return 0x82232334;
		  /* 82232334h */ case    2:  		/* nop */
		/* 82232334h case    2:*/		cpu::op::nop();
		/* 82232334h case    2:*/		return 0x82232338;
	}
	return 0x82232338;
} // Block from 8223232Ch-82232338h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232338);
		  /* 82232338h */ case    0:  		/* mfspr R12, LR */
		/* 82232338h case    0:*/		regs.R12 = regs.LR;
		/* 82232338h case    0:*/		return 0x8223233C;
		  /* 8223233Ch */ case    1:  		/* bl -1708260 */
		/* 8223233Ch case    1:*/		regs.LR = 0x82232340; return 0x82091258;
		/* 8223233Ch case    1:*/		return 0x82232340;
		  /* 82232340h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82232340h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82232340h case    2:*/		return 0x82232344;
		  /* 82232344h */ case    3:  		/* mr R28, R4 */
		/* 82232344h case    3:*/		regs.R28 = regs.R4;
		/* 82232344h case    3:*/		return 0x82232348;
	}
	return 0x82232348;
} // Block from 82232338h-82232348h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82232348h
// Function '?CompileWithShadowLEqualCompareFunc@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232348);
		  /* 82232348h */ case    0:  		/* mr R31, R5 */
		/* 82232348h case    0:*/		regs.R31 = regs.R5;
		/* 82232348h case    0:*/		return 0x8223234C;
		  /* 8223234Ch */ case    1:  		/* mr R30, R6 */
		/* 8223234Ch case    1:*/		regs.R30 = regs.R6;
		/* 8223234Ch case    1:*/		return 0x82232350;
		  /* 82232350h */ case    2:  		/* mr R29, R7 */
		/* 82232350h case    2:*/		regs.R29 = regs.R7;
		/* 82232350h case    2:*/		return 0x82232354;
		  /* 82232354h */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82232354h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232354h case    3:*/		return 0x82232358;
		  /* 82232358h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 82232358h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8223237C;  }
		/* 82232358h case    4:*/		return 0x8223235C;
		  /* 8223235Ch */ case    5:  		/* lis R11, -32252 */
		/* 8223235Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223235Ch case    5:*/		return 0x82232360;
		  /* 82232360h */ case    6:  		/* lis R10, -32253 */
		/* 82232360h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82232360h case    6:*/		return 0x82232364;
		  /* 82232364h */ case    7:  		/* lis R9, -32253 */
		/* 82232364h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232364h case    7:*/		return 0x82232368;
		  /* 82232368h */ case    8:  		/* addi R6, R11, 4336 */
		/* 82232368h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82232368h case    8:*/		return 0x8223236C;
		  /* 8223236Ch */ case    9:  		/* addi R5, R10, 27792 */
		/* 8223236Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8223236Ch case    9:*/		return 0x82232370;
		  /* 82232370h */ case   10:  		/* addi R4, R9, 27460 */
		/* 82232370h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232370h case   10:*/		return 0x82232374;
		  /* 82232374h */ case   11:  		/* li R7, 2576 */
		/* 82232374h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0xA10);
		/* 82232374h case   11:*/		return 0x82232378;
		  /* 82232378h */ case   12:  		/* bl -894832 */
		/* 82232378h case   12:*/		regs.LR = 0x8223237C; return 0x82157C08;
		/* 82232378h case   12:*/		return 0x8223237C;
	}
	return 0x8223237C;
} // Block from 82232348h-8223237Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223237Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223237C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223237C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223237C);
		  /* 8223237Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8223237Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8223237Ch case    0:*/		return 0x82232380;
		  /* 82232380h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82232380h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232398;  }
		/* 82232380h case    1:*/		return 0x82232384;
		  /* 82232384h */ case    2:  		/* li R6, 0 */
		/* 82232384h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82232384h case    2:*/		return 0x82232388;
		  /* 82232388h */ case    3:  		/* li R5, 0 */
		/* 82232388h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82232388h case    3:*/		return 0x8223238C;
		  /* 8223238Ch */ case    4:  		/* li R4, 32 */
		/* 8223238Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8223238Ch case    4:*/		return 0x82232390;
		  /* 82232390h */ case    5:  		/* mr R3, R31 */
		/* 82232390h case    5:*/		regs.R3 = regs.R31;
		/* 82232390h case    5:*/		return 0x82232394;
		  /* 82232394h */ case    6:  		/* bl -870388 */
		/* 82232394h case    6:*/		regs.LR = 0x82232398; return 0x8215DBA0;
		/* 82232394h case    6:*/		return 0x82232398;
	}
	return 0x82232398;
} // Block from 8223237Ch-82232398h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232398);
		  /* 82232398h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82232398h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82232398h case    0:*/		return 0x8223239C;
		  /* 8223239Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223239Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822323D4;  }
		/* 8223239Ch case    1:*/		return 0x822323A0;
		  /* 822323A0h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 822323A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822323A0h case    2:*/		return 0x822323A4;
		  /* 822323A4h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822323A4h case    3:*/		if ( regs.CR[6].eq ) { return 0x822323D4;  }
		/* 822323A4h case    3:*/		return 0x822323A8;
		  /* 822323A8h */ case    4:  		/* lis R11, -32216 */
		/* 822323A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822323A8h case    4:*/		return 0x822323AC;
		  /* 822323ACh */ case    5:  		/* mtspr CTR, R30 */
		/* 822323ACh case    5:*/		regs.CTR = regs.R30;
		/* 822323ACh case    5:*/		return 0x822323B0;
		  /* 822323B0h */ case    6:  		/* lis R10, -32252 */
		/* 822323B0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822323B0h case    6:*/		return 0x822323B4;
		  /* 822323B4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822323B4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822323B4h case    7:*/		return 0x822323B8;
		  /* 822323B8h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822323B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822323B8h case    8:*/		return 0x822323BC;
		  /* 822323BCh */ case    9:  		/* li R8, 0 */
		/* 822323BCh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822323BCh case    9:*/		return 0x822323C0;
		  /* 822323C0h */ case   10:  		/* mr R7, R28 */
		/* 822323C0h case   10:*/		regs.R7 = regs.R28;
		/* 822323C0h case   10:*/		return 0x822323C4;
		  /* 822323C4h */ case   11:  		/* li R6, 52 */
		/* 822323C4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x34);
		/* 822323C4h case   11:*/		return 0x822323C8;
		  /* 822323C8h */ case   12:  		/* mr R3, R29 */
		/* 822323C8h case   12:*/		regs.R3 = regs.R29;
		/* 822323C8h case   12:*/		return 0x822323CC;
		  /* 822323CCh */ case   13:  		/* lwz R5, <#[R11 + 208]> */
		/* 822323CCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000D0) );
		/* 822323CCh case   13:*/		return 0x822323D0;
		  /* 822323D0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822323D0h case   14:*/		if ( 1 ) { regs.LR = 0x822323D4; return (uint32)regs.CTR; }
		/* 822323D0h case   14:*/		return 0x822323D4;
	}
	return 0x822323D4;
} // Block from 82232398h-822323D4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822323D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822323D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822323D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822323D4);
		  /* 822323D4h */ case    0:  		/* li R3, 0 */
		/* 822323D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822323D4h case    0:*/		return 0x822323D8;
		  /* 822323D8h */ case    1:  		/* addi R1, R1, 128 */
		/* 822323D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822323D8h case    1:*/		return 0x822323DC;
		  /* 822323DCh */ case    2:  		/* b -1708340 */
		/* 822323DCh case    2:*/		return 0x820912A8;
		/* 822323DCh case    2:*/		return 0x822323E0;
	}
	return 0x822323E0;
} // Block from 822323D4h-822323E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822323E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822323E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822323E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822323E0);
		  /* 822323E0h */ case    0:  		/* mfspr R12, LR */
		/* 822323E0h case    0:*/		regs.R12 = regs.LR;
		/* 822323E0h case    0:*/		return 0x822323E4;
		  /* 822323E4h */ case    1:  		/* bl -1708432 */
		/* 822323E4h case    1:*/		regs.LR = 0x822323E8; return 0x82091254;
		/* 822323E4h case    1:*/		return 0x822323E8;
		  /* 822323E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822323E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822323E8h case    2:*/		return 0x822323EC;
		  /* 822323ECh */ case    3:  		/* mr R30, R3 */
		/* 822323ECh case    3:*/		regs.R30 = regs.R3;
		/* 822323ECh case    3:*/		return 0x822323F0;
		  /* 822323F0h */ case    4:  		/* mr R31, R4 */
		/* 822323F0h case    4:*/		regs.R31 = regs.R4;
		/* 822323F0h case    4:*/		return 0x822323F4;
		  /* 822323F4h */ case    5:  		/* mr R29, R5 */
		/* 822323F4h case    5:*/		regs.R29 = regs.R5;
		/* 822323F4h case    5:*/		return 0x822323F8;
		  /* 822323F8h */ case    6:  		/* mr R28, R6 */
		/* 822323F8h case    6:*/		regs.R28 = regs.R6;
		/* 822323F8h case    6:*/		return 0x822323FC;
		  /* 822323FCh */ case    7:  		/* mr R27, R7 */
		/* 822323FCh case    7:*/		regs.R27 = regs.R7;
		/* 822323FCh case    7:*/		return 0x82232400;
		  /* 82232400h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82232400h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232400h case    8:*/		return 0x82232404;
		  /* 82232404h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82232404h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82232428;  }
		/* 82232404h case    9:*/		return 0x82232408;
		  /* 82232408h */ case   10:  		/* lis R11, -32252 */
		/* 82232408h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232408h case   10:*/		return 0x8223240C;
		  /* 8223240Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223240Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223240Ch case   11:*/		return 0x82232410;
		  /* 82232410h */ case   12:  		/* lis R9, -32253 */
		/* 82232410h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232410h case   12:*/		return 0x82232414;
		  /* 82232414h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82232414h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82232414h case   13:*/		return 0x82232418;
		  /* 82232418h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82232418h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82232418h case   14:*/		return 0x8223241C;
		  /* 8223241Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223241Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223241Ch case   15:*/		return 0x82232420;
		  /* 82232420h */ case   16:  		/* li R7, 2631 */
		/* 82232420h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xA47);
		/* 82232420h case   16:*/		return 0x82232424;
		  /* 82232424h */ case   17:  		/* bl -895004 */
		/* 82232424h case   17:*/		regs.LR = 0x82232428; return 0x82157C08;
		/* 82232424h case   17:*/		return 0x82232428;
	}
	return 0x82232428;
} // Block from 822323E0h-82232428h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82232428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232428);
		  /* 82232428h */ case    0:  		/* mr R5, R31 */
		/* 82232428h case    0:*/		regs.R5 = regs.R31;
		/* 82232428h case    0:*/		return 0x8223242C;
		  /* 8223242Ch */ case    1:  		/* li R4, 48 */
		/* 8223242Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 8223242Ch case    1:*/		return 0x82232430;
		  /* 82232430h */ case    2:  		/* mr R3, R30 */
		/* 82232430h case    2:*/		regs.R3 = regs.R30;
		/* 82232430h case    2:*/		return 0x82232434;
		  /* 82232434h */ case    3:  		/* bl -871412 */
		/* 82232434h case    3:*/		regs.LR = 0x82232438; return 0x8215D840;
		/* 82232434h case    3:*/		return 0x82232438;
		  /* 82232438h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 82232438h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82232438h case    4:*/		return 0x8223243C;
		  /* 8223243Ch */ case    5:  		/* bc 12, CR6_GT, 100 */
		/* 8223243Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x822324A0;  }
		/* 8223243Ch case    5:*/		return 0x82232440;
		  /* 82232440h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82232440h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232440h case    6:*/		return 0x82232444;
		  /* 82232444h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82232444h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223245C;  }
		/* 82232444h case    7:*/		return 0x82232448;
		  /* 82232448h */ case    8:  		/* li R6, 0 */
		/* 82232448h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82232448h case    8:*/		return 0x8223244C;
		  /* 8223244Ch */ case    9:  		/* mr R5, R31 */
		/* 8223244Ch case    9:*/		regs.R5 = regs.R31;
		/* 8223244Ch case    9:*/		return 0x82232450;
		  /* 82232450h */ case   10:  		/* li R4, 33 */
		/* 82232450h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 82232450h case   10:*/		return 0x82232454;
		  /* 82232454h */ case   11:  		/* mr R3, R29 */
		/* 82232454h case   11:*/		regs.R3 = regs.R29;
		/* 82232454h case   11:*/		return 0x82232458;
		  /* 82232458h */ case   12:  		/* bl -870584 */
		/* 82232458h case   12:*/		regs.LR = 0x8223245C; return 0x8215DBA0;
		/* 82232458h case   12:*/		return 0x8223245C;
	}
	return 0x8223245C;
} // Block from 82232428h-8223245Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223245Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223245C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223245C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223245C);
		  /* 8223245Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8223245Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223245Ch case    0:*/		return 0x82232460;
		  /* 82232460h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82232460h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232498;  }
		/* 82232460h case    1:*/		return 0x82232464;
		  /* 82232464h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82232464h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82232464h case    2:*/		return 0x82232468;
		  /* 82232468h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82232468h case    3:*/		if ( regs.CR[6].eq ) { return 0x82232498;  }
		/* 82232468h case    3:*/		return 0x8223246C;
		  /* 8223246Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223246Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223246Ch case    4:*/		return 0x82232470;
	}
	return 0x82232470;
} // Block from 8223245Ch-82232470h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82232470h
// Function '?CompileWithShadowUsageLuminance@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232470);
		  /* 82232470h */ case    0:  		/* mtspr CTR, R28 */
		/* 82232470h case    0:*/		regs.CTR = regs.R28;
		/* 82232470h case    0:*/		return 0x82232474;
		  /* 82232474h */ case    1:  		/* lis R10, -32252 */
		/* 82232474h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232474h case    1:*/		return 0x82232478;
		  /* 82232478h */ case    2:  		/* addi R11, R11, 11160 */
		/* 82232478h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82232478h case    2:*/		return 0x8223247C;
		  /* 8223247Ch */ case    3:  		/* addi R4, R10, 4444 */
		/* 8223247Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 8223247Ch case    3:*/		return 0x82232480;
		  /* 82232480h */ case    4:  		/* li R8, 0 */
		/* 82232480h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82232480h case    4:*/		return 0x82232484;
		  /* 82232484h */ case    5:  		/* mr R7, R31 */
		/* 82232484h case    5:*/		regs.R7 = regs.R31;
		/* 82232484h case    5:*/		return 0x82232488;
		  /* 82232488h */ case    6:  		/* li R6, 53 */
		/* 82232488h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x35);
		/* 82232488h case    6:*/		return 0x8223248C;
		  /* 8223248Ch */ case    7:  		/* mr R3, R27 */
		/* 8223248Ch case    7:*/		regs.R3 = regs.R27;
		/* 8223248Ch case    7:*/		return 0x82232490;
		  /* 82232490h */ case    8:  		/* lwz R5, <#[R11 + 212]> */
		/* 82232490h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000D4) );
		/* 82232490h case    8:*/		return 0x82232494;
		  /* 82232494h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82232494h case    9:*/		if ( 1 ) { regs.LR = 0x82232498; return (uint32)regs.CTR; }
		/* 82232494h case    9:*/		return 0x82232498;
	}
	return 0x82232498;
} // Block from 82232470h-82232498h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82232498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232498);
		  /* 82232498h */ case    0:  		/* li R3, 0 */
		/* 82232498h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232498h case    0:*/		return 0x8223249C;
		  /* 8223249Ch */ case    1:  		/* b 96 */
		/* 8223249Ch case    1:*/		return 0x822324FC;
		/* 8223249Ch case    1:*/		return 0x822324A0;
	}
	return 0x822324A0;
} // Block from 82232498h-822324A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822324A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822324A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822324A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822324A0);
		  /* 822324A0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822324A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822324A0h case    0:*/		return 0x822324A4;
		  /* 822324A4h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822324A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x822324BC;  }
		/* 822324A4h case    1:*/		return 0x822324A8;
		  /* 822324A8h */ case    2:  		/* li R6, 1 */
		/* 822324A8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822324A8h case    2:*/		return 0x822324AC;
		  /* 822324ACh */ case    3:  		/* mr R5, R31 */
		/* 822324ACh case    3:*/		regs.R5 = regs.R31;
		/* 822324ACh case    3:*/		return 0x822324B0;
		  /* 822324B0h */ case    4:  		/* li R4, 33 */
		/* 822324B0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 822324B0h case    4:*/		return 0x822324B4;
		  /* 822324B4h */ case    5:  		/* mr R3, R29 */
		/* 822324B4h case    5:*/		regs.R3 = regs.R29;
		/* 822324B4h case    5:*/		return 0x822324B8;
		  /* 822324B8h */ case    6:  		/* bl -870680 */
		/* 822324B8h case    6:*/		regs.LR = 0x822324BC; return 0x8215DBA0;
		/* 822324B8h case    6:*/		return 0x822324BC;
	}
	return 0x822324BC;
} // Block from 822324A0h-822324BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 822324BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822324BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822324BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822324BC);
		  /* 822324BCh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822324BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822324BCh case    0:*/		return 0x822324C0;
		  /* 822324C0h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822324C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x822324F8;  }
		/* 822324C0h case    1:*/		return 0x822324C4;
		  /* 822324C4h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 822324C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822324C4h case    2:*/		return 0x822324C8;
		  /* 822324C8h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822324C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x822324F8;  }
		/* 822324C8h case    3:*/		return 0x822324CC;
		  /* 822324CCh */ case    4:  		/* lis R11, -32216 */
		/* 822324CCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822324CCh case    4:*/		return 0x822324D0;
		  /* 822324D0h */ case    5:  		/* mtspr CTR, R28 */
		/* 822324D0h case    5:*/		regs.CTR = regs.R28;
		/* 822324D0h case    5:*/		return 0x822324D4;
		  /* 822324D4h */ case    6:  		/* lis R10, -32252 */
		/* 822324D4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822324D4h case    6:*/		return 0x822324D8;
		  /* 822324D8h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822324D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822324D8h case    7:*/		return 0x822324DC;
		  /* 822324DCh */ case    8:  		/* addi R4, R10, 4444 */
		/* 822324DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822324DCh case    8:*/		return 0x822324E0;
		  /* 822324E0h */ case    9:  		/* li R8, 1 */
		/* 822324E0h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822324E0h case    9:*/		return 0x822324E4;
		  /* 822324E4h */ case   10:  		/* mr R7, R31 */
		/* 822324E4h case   10:*/		regs.R7 = regs.R31;
		/* 822324E4h case   10:*/		return 0x822324E8;
		  /* 822324E8h */ case   11:  		/* li R6, 53 */
		/* 822324E8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x35);
		/* 822324E8h case   11:*/		return 0x822324EC;
		  /* 822324ECh */ case   12:  		/* mr R3, R27 */
		/* 822324ECh case   12:*/		regs.R3 = regs.R27;
		/* 822324ECh case   12:*/		return 0x822324F0;
		  /* 822324F0h */ case   13:  		/* lwz R5, <#[R11 + 212]> */
		/* 822324F0h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000D4) );
		/* 822324F0h case   13:*/		return 0x822324F4;
		  /* 822324F4h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822324F4h case   14:*/		if ( 1 ) { regs.LR = 0x822324F8; return (uint32)regs.CTR; }
		/* 822324F4h case   14:*/		return 0x822324F8;
	}
	return 0x822324F8;
} // Block from 822324BCh-822324F8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822324F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822324F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822324F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822324F8);
		  /* 822324F8h */ case    0:  		/* li R3, 1 */
		/* 822324F8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822324F8h case    0:*/		return 0x822324FC;
	}
	return 0x822324FC;
} // Block from 822324F8h-822324FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822324FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822324FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822324FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822324FC);
		  /* 822324FCh */ case    0:  		/* addi R1, R1, 128 */
		/* 822324FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822324FCh case    0:*/		return 0x82232500;
		  /* 82232500h */ case    1:  		/* b -1708636 */
		/* 82232500h case    1:*/		return 0x820912A4;
		/* 82232500h case    1:*/		return 0x82232504;
		  /* 82232504h */ case    2:  		/* nop */
		/* 82232504h case    2:*/		cpu::op::nop();
		/* 82232504h case    2:*/		return 0x82232508;
	}
	return 0x82232508;
} // Block from 822324FCh-82232508h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232508);
		  /* 82232508h */ case    0:  		/* mfspr R12, LR */
		/* 82232508h case    0:*/		regs.R12 = regs.LR;
		/* 82232508h case    0:*/		return 0x8223250C;
		  /* 8223250Ch */ case    1:  		/* bl -1708728 */
		/* 8223250Ch case    1:*/		regs.LR = 0x82232510; return 0x82091254;
		/* 8223250Ch case    1:*/		return 0x82232510;
		  /* 82232510h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82232510h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82232510h case    2:*/		return 0x82232514;
		  /* 82232514h */ case    3:  		/* mr R31, R3 */
		/* 82232514h case    3:*/		regs.R31 = regs.R3;
		/* 82232514h case    3:*/		return 0x82232518;
		  /* 82232518h */ case    4:  		/* mr R27, R4 */
		/* 82232518h case    4:*/		regs.R27 = regs.R4;
		/* 82232518h case    4:*/		return 0x8223251C;
		  /* 8223251Ch */ case    5:  		/* mr R30, R5 */
		/* 8223251Ch case    5:*/		regs.R30 = regs.R5;
		/* 8223251Ch case    5:*/		return 0x82232520;
		  /* 82232520h */ case    6:  		/* mr R29, R6 */
		/* 82232520h case    6:*/		regs.R29 = regs.R6;
		/* 82232520h case    6:*/		return 0x82232524;
		  /* 82232524h */ case    7:  		/* mr R28, R7 */
		/* 82232524h case    7:*/		regs.R28 = regs.R7;
		/* 82232524h case    7:*/		return 0x82232528;
		  /* 82232528h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82232528h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232528h case    8:*/		return 0x8223252C;
		  /* 8223252Ch */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 8223252Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x82232550;  }
		/* 8223252Ch case    9:*/		return 0x82232530;
		  /* 82232530h */ case   10:  		/* lis R11, -32252 */
		/* 82232530h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232530h case   10:*/		return 0x82232534;
		  /* 82232534h */ case   11:  		/* lis R10, -32253 */
		/* 82232534h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82232534h case   11:*/		return 0x82232538;
		  /* 82232538h */ case   12:  		/* lis R9, -32253 */
		/* 82232538h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232538h case   12:*/		return 0x8223253C;
		  /* 8223253Ch */ case   13:  		/* addi R6, R11, 4336 */
		/* 8223253Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 8223253Ch case   13:*/		return 0x82232540;
		  /* 82232540h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82232540h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82232540h case   14:*/		return 0x82232544;
		  /* 82232544h */ case   15:  		/* addi R4, R9, 27460 */
		/* 82232544h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232544h case   15:*/		return 0x82232548;
		  /* 82232548h */ case   16:  		/* li R7, 2690 */
		/* 82232548h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xA82);
		/* 82232548h case   16:*/		return 0x8223254C;
		  /* 8223254Ch */ case   17:  		/* bl -895300 */
		/* 8223254Ch case   17:*/		regs.LR = 0x82232550; return 0x82157C08;
		/* 8223254Ch case   17:*/		return 0x82232550;
	}
	return 0x82232550;
} // Block from 82232508h-82232550h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82232550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232550);
		  /* 82232550h */ case    0:  		/* li R4, 157 */
		/* 82232550h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x9D);
		/* 82232550h case    0:*/		return 0x82232554;
		  /* 82232554h */ case    1:  		/* mr R3, R31 */
		/* 82232554h case    1:*/		regs.R3 = regs.R31;
		/* 82232554h case    1:*/		return 0x82232558;
		  /* 82232558h */ case    2:  		/* bl -872520 */
		/* 82232558h case    2:*/		regs.LR = 0x8223255C; return 0x8215D510;
		/* 82232558h case    2:*/		return 0x8223255C;
		  /* 8223255Ch */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 8223255Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 8223255Ch case    3:*/		return 0x82232560;
		  /* 82232560h */ case    4:  		/* bc 4, CR6_EQ, 100 */
		/* 82232560h case    4:*/		if ( !regs.CR[6].eq ) { return 0x822325C4;  }
		/* 82232560h case    4:*/		return 0x82232564;
		  /* 82232564h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82232564h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82232564h case    5:*/		return 0x82232568;
		  /* 82232568h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82232568h case    6:*/		if ( regs.CR[6].eq ) { return 0x82232580;  }
		/* 82232568h case    6:*/		return 0x8223256C;
		  /* 8223256Ch */ case    7:  		/* li R6, 0 */
		/* 8223256Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223256Ch case    7:*/		return 0x82232570;
		  /* 82232570h */ case    8:  		/* li R5, 0 */
		/* 82232570h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82232570h case    8:*/		return 0x82232574;
		  /* 82232574h */ case    9:  		/* li R4, 39 */
		/* 82232574h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x27);
		/* 82232574h case    9:*/		return 0x82232578;
		  /* 82232578h */ case   10:  		/* mr R3, R30 */
		/* 82232578h case   10:*/		regs.R3 = regs.R30;
		/* 82232578h case   10:*/		return 0x8223257C;
		  /* 8223257Ch */ case   11:  		/* bl -870876 */
		/* 8223257Ch case   11:*/		regs.LR = 0x82232580; return 0x8215DBA0;
		/* 8223257Ch case   11:*/		return 0x82232580;
	}
	return 0x82232580;
} // Block from 82232550h-82232580h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82232580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232580);
		  /* 82232580h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82232580h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232580h case    0:*/		return 0x82232584;
		  /* 82232584h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82232584h case    1:*/		if ( regs.CR[6].eq ) { return 0x822325BC;  }
		/* 82232584h case    1:*/		return 0x82232588;
		  /* 82232588h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82232588h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82232588h case    2:*/		return 0x8223258C;
		  /* 8223258Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 8223258Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x822325BC;  }
		/* 8223258Ch case    3:*/		return 0x82232590;
		  /* 82232590h */ case    4:  		/* lis R11, -32216 */
		/* 82232590h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232590h case    4:*/		return 0x82232594;
		  /* 82232594h */ case    5:  		/* mtspr CTR, R29 */
		/* 82232594h case    5:*/		regs.CTR = regs.R29;
		/* 82232594h case    5:*/		return 0x82232598;
	}
	return 0x82232598;
} // Block from 82232580h-82232598h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232598h
// Function '?CompileWithShadowUsageIntensity@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232598);
		  /* 82232598h */ case    0:  		/* lis R10, -32252 */
		/* 82232598h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232598h case    0:*/		return 0x8223259C;
		  /* 8223259Ch */ case    1:  		/* addi R11, R11, 11160 */
		/* 8223259Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223259Ch case    1:*/		return 0x822325A0;
		  /* 822325A0h */ case    2:  		/* addi R4, R10, 4444 */
		/* 822325A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822325A0h case    2:*/		return 0x822325A4;
		  /* 822325A4h */ case    3:  		/* li R8, 0 */
		/* 822325A4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822325A4h case    3:*/		return 0x822325A8;
		  /* 822325A8h */ case    4:  		/* mr R7, R27 */
		/* 822325A8h case    4:*/		regs.R7 = regs.R27;
		/* 822325A8h case    4:*/		return 0x822325AC;
		  /* 822325ACh */ case    5:  		/* li R6, 91 */
		/* 822325ACh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x5B);
		/* 822325ACh case    5:*/		return 0x822325B0;
		  /* 822325B0h */ case    6:  		/* mr R3, R28 */
		/* 822325B0h case    6:*/		regs.R3 = regs.R28;
		/* 822325B0h case    6:*/		return 0x822325B4;
		  /* 822325B4h */ case    7:  		/* lwz R5, <#[R11 + 364]> */
		/* 822325B4h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000016C) );
		/* 822325B4h case    7:*/		return 0x822325B8;
		  /* 822325B8h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 822325B8h case    8:*/		if ( 1 ) { regs.LR = 0x822325BC; return (uint32)regs.CTR; }
		/* 822325B8h case    8:*/		return 0x822325BC;
	}
	return 0x822325BC;
} // Block from 82232598h-822325BCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 822325BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822325BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822325BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822325BC);
		  /* 822325BCh */ case    0:  		/* li R3, 0 */
		/* 822325BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822325BCh case    0:*/		return 0x822325C0;
		  /* 822325C0h */ case    1:  		/* b 96 */
		/* 822325C0h case    1:*/		return 0x82232620;
		/* 822325C0h case    1:*/		return 0x822325C4;
	}
	return 0x822325C4;
} // Block from 822325BCh-822325C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822325C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822325C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822325C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822325C4);
		  /* 822325C4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 822325C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822325C4h case    0:*/		return 0x822325C8;
		  /* 822325C8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822325C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x822325E0;  }
		/* 822325C8h case    1:*/		return 0x822325CC;
		  /* 822325CCh */ case    2:  		/* li R6, 1 */
		/* 822325CCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822325CCh case    2:*/		return 0x822325D0;
		  /* 822325D0h */ case    3:  		/* li R5, 0 */
		/* 822325D0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822325D0h case    3:*/		return 0x822325D4;
		  /* 822325D4h */ case    4:  		/* li R4, 39 */
		/* 822325D4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x27);
		/* 822325D4h case    4:*/		return 0x822325D8;
		  /* 822325D8h */ case    5:  		/* mr R3, R30 */
		/* 822325D8h case    5:*/		regs.R3 = regs.R30;
		/* 822325D8h case    5:*/		return 0x822325DC;
		  /* 822325DCh */ case    6:  		/* bl -870972 */
		/* 822325DCh case    6:*/		regs.LR = 0x822325E0; return 0x8215DBA0;
		/* 822325DCh case    6:*/		return 0x822325E0;
	}
	return 0x822325E0;
} // Block from 822325C4h-822325E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822325E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822325E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822325E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822325E0);
		  /* 822325E0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822325E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822325E0h case    0:*/		return 0x822325E4;
		  /* 822325E4h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 822325E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223261C;  }
		/* 822325E4h case    1:*/		return 0x822325E8;
		  /* 822325E8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 822325E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822325E8h case    2:*/		return 0x822325EC;
		  /* 822325ECh */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 822325ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x8223261C;  }
		/* 822325ECh case    3:*/		return 0x822325F0;
		  /* 822325F0h */ case    4:  		/* lis R11, -32216 */
		/* 822325F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822325F0h case    4:*/		return 0x822325F4;
		  /* 822325F4h */ case    5:  		/* mtspr CTR, R29 */
		/* 822325F4h case    5:*/		regs.CTR = regs.R29;
		/* 822325F4h case    5:*/		return 0x822325F8;
		  /* 822325F8h */ case    6:  		/* lis R10, -32252 */
		/* 822325F8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822325F8h case    6:*/		return 0x822325FC;
		  /* 822325FCh */ case    7:  		/* addi R11, R11, 11160 */
		/* 822325FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822325FCh case    7:*/		return 0x82232600;
		  /* 82232600h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82232600h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82232600h case    8:*/		return 0x82232604;
		  /* 82232604h */ case    9:  		/* li R8, 1 */
		/* 82232604h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82232604h case    9:*/		return 0x82232608;
		  /* 82232608h */ case   10:  		/* mr R7, R27 */
		/* 82232608h case   10:*/		regs.R7 = regs.R27;
		/* 82232608h case   10:*/		return 0x8223260C;
		  /* 8223260Ch */ case   11:  		/* li R6, 91 */
		/* 8223260Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x5B);
		/* 8223260Ch case   11:*/		return 0x82232610;
		  /* 82232610h */ case   12:  		/* mr R3, R28 */
		/* 82232610h case   12:*/		regs.R3 = regs.R28;
		/* 82232610h case   12:*/		return 0x82232614;
		  /* 82232614h */ case   13:  		/* lwz R5, <#[R11 + 364]> */
		/* 82232614h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000016C) );
		/* 82232614h case   13:*/		return 0x82232618;
		  /* 82232618h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82232618h case   14:*/		if ( 1 ) { regs.LR = 0x8223261C; return (uint32)regs.CTR; }
		/* 82232618h case   14:*/		return 0x8223261C;
	}
	return 0x8223261C;
} // Block from 822325E0h-8223261Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223261Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223261C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223261C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223261C);
		  /* 8223261Ch */ case    0:  		/* li R3, 1 */
		/* 8223261Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223261Ch case    0:*/		return 0x82232620;
	}
	return 0x82232620;
} // Block from 8223261Ch-82232620h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232620);
		  /* 82232620h */ case    0:  		/* addi R1, R1, 128 */
		/* 82232620h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82232620h case    0:*/		return 0x82232624;
		  /* 82232624h */ case    1:  		/* b -1708928 */
		/* 82232624h case    1:*/		return 0x820912A4;
		/* 82232624h case    1:*/		return 0x82232628;
	}
	return 0x82232628;
} // Block from 82232620h-82232628h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82232628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232628);
		  /* 82232628h */ case    0:  		/* mfspr R12, LR */
		/* 82232628h case    0:*/		regs.R12 = regs.LR;
		/* 82232628h case    0:*/		return 0x8223262C;
		  /* 8223262Ch */ case    1:  		/* bl -1709012 */
		/* 8223262Ch case    1:*/		regs.LR = 0x82232630; return 0x82091258;
		/* 8223262Ch case    1:*/		return 0x82232630;
		  /* 82232630h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82232630h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82232630h case    2:*/		return 0x82232634;
		  /* 82232634h */ case    3:  		/* mr R28, R4 */
		/* 82232634h case    3:*/		regs.R28 = regs.R4;
		/* 82232634h case    3:*/		return 0x82232638;
		  /* 82232638h */ case    4:  		/* mr R31, R5 */
		/* 82232638h case    4:*/		regs.R31 = regs.R5;
		/* 82232638h case    4:*/		return 0x8223263C;
		  /* 8223263Ch */ case    5:  		/* mr R30, R6 */
		/* 8223263Ch case    5:*/		regs.R30 = regs.R6;
		/* 8223263Ch case    5:*/		return 0x82232640;
		  /* 82232640h */ case    6:  		/* mr R29, R7 */
		/* 82232640h case    6:*/		regs.R29 = regs.R7;
		/* 82232640h case    6:*/		return 0x82232644;
		  /* 82232644h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82232644h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232644h case    7:*/		return 0x82232648;
		  /* 82232648h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82232648h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8223266C;  }
		/* 82232648h case    8:*/		return 0x8223264C;
		  /* 8223264Ch */ case    9:  		/* lis R11, -32252 */
		/* 8223264Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223264Ch case    9:*/		return 0x82232650;
		  /* 82232650h */ case   10:  		/* lis R10, -32253 */
		/* 82232650h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82232650h case   10:*/		return 0x82232654;
		  /* 82232654h */ case   11:  		/* lis R9, -32253 */
		/* 82232654h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232654h case   11:*/		return 0x82232658;
		  /* 82232658h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82232658h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82232658h case   12:*/		return 0x8223265C;
		  /* 8223265Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 8223265Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8223265Ch case   13:*/		return 0x82232660;
		  /* 82232660h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82232660h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232660h case   14:*/		return 0x82232664;
		  /* 82232664h */ case   15:  		/* li R7, 2744 */
		/* 82232664h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xAB8);
		/* 82232664h case   15:*/		return 0x82232668;
		  /* 82232668h */ case   16:  		/* bl -895584 */
		/* 82232668h case   16:*/		regs.LR = 0x8223266C; return 0x82157C08;
		/* 82232668h case   16:*/		return 0x8223266C;
	}
	return 0x8223266C;
} // Block from 82232628h-8223266Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223266Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223266C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223266C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223266C);
		  /* 8223266Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8223266Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8223266Ch case    0:*/		return 0x82232670;
		  /* 82232670h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82232670h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232688;  }
		/* 82232670h case    1:*/		return 0x82232674;
		  /* 82232674h */ case    2:  		/* li R6, 0 */
		/* 82232674h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82232674h case    2:*/		return 0x82232678;
		  /* 82232678h */ case    3:  		/* li R5, 0 */
		/* 82232678h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82232678h case    3:*/		return 0x8223267C;
		  /* 8223267Ch */ case    4:  		/* li R4, 41 */
		/* 8223267Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x29);
		/* 8223267Ch case    4:*/		return 0x82232680;
		  /* 82232680h */ case    5:  		/* mr R3, R31 */
		/* 82232680h case    5:*/		regs.R3 = regs.R31;
		/* 82232680h case    5:*/		return 0x82232684;
		  /* 82232684h */ case    6:  		/* bl -871140 */
		/* 82232684h case    6:*/		regs.LR = 0x82232688; return 0x8215DBA0;
		/* 82232684h case    6:*/		return 0x82232688;
	}
	return 0x82232688;
} // Block from 8223266Ch-82232688h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232688);
		  /* 82232688h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82232688h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82232688h case    0:*/		return 0x8223268C;
		  /* 8223268Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223268Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822326C4;  }
		/* 8223268Ch case    1:*/		return 0x82232690;
		  /* 82232690h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82232690h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232690h case    2:*/		return 0x82232694;
		  /* 82232694h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82232694h case    3:*/		if ( regs.CR[6].eq ) { return 0x822326C4;  }
		/* 82232694h case    3:*/		return 0x82232698;
		  /* 82232698h */ case    4:  		/* lis R11, -32216 */
		/* 82232698h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232698h case    4:*/		return 0x8223269C;
		  /* 8223269Ch */ case    5:  		/* mtspr CTR, R30 */
		/* 8223269Ch case    5:*/		regs.CTR = regs.R30;
		/* 8223269Ch case    5:*/		return 0x822326A0;
		  /* 822326A0h */ case    6:  		/* lis R10, -32252 */
		/* 822326A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822326A0h case    6:*/		return 0x822326A4;
		  /* 822326A4h */ case    7:  		/* addi R11, R11, 11160 */
		/* 822326A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822326A4h case    7:*/		return 0x822326A8;
		  /* 822326A8h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822326A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822326A8h case    8:*/		return 0x822326AC;
		  /* 822326ACh */ case    9:  		/* li R8, 0 */
		/* 822326ACh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822326ACh case    9:*/		return 0x822326B0;
		  /* 822326B0h */ case   10:  		/* mr R7, R28 */
		/* 822326B0h case   10:*/		regs.R7 = regs.R28;
		/* 822326B0h case   10:*/		return 0x822326B4;
		  /* 822326B4h */ case   11:  		/* li R6, 101 */
		/* 822326B4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x65);
		/* 822326B4h case   11:*/		return 0x822326B8;
		  /* 822326B8h */ case   12:  		/* mr R3, R29 */
		/* 822326B8h case   12:*/		regs.R3 = regs.R29;
		/* 822326B8h case   12:*/		return 0x822326BC;
		  /* 822326BCh */ case   13:  		/* lwz R5, <#[R11 + 404]> */
		/* 822326BCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000194) );
		/* 822326BCh case   13:*/		return 0x822326C0;
	}
	return 0x822326C0;
} // Block from 82232688h-822326C0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822326C0h
// Function '?CompileWithShadowUsageAlpha@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822326C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822326C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822326C0);
		  /* 822326C0h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 822326C0h case    0:*/		if ( 1 ) { regs.LR = 0x822326C4; return (uint32)regs.CTR; }
		/* 822326C0h case    0:*/		return 0x822326C4;
	}
	return 0x822326C4;
} // Block from 822326C0h-822326C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822326C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822326C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822326C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822326C4);
		  /* 822326C4h */ case    0:  		/* li R3, 0 */
		/* 822326C4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822326C4h case    0:*/		return 0x822326C8;
		  /* 822326C8h */ case    1:  		/* addi R1, R1, 128 */
		/* 822326C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822326C8h case    1:*/		return 0x822326CC;
		  /* 822326CCh */ case    2:  		/* b -1709092 */
		/* 822326CCh case    2:*/		return 0x820912A8;
		/* 822326CCh case    2:*/		return 0x822326D0;
	}
	return 0x822326D0;
} // Block from 822326C4h-822326D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822326D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822326D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822326D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822326D0);
		  /* 822326D0h */ case    0:  		/* mfspr R12, LR */
		/* 822326D0h case    0:*/		regs.R12 = regs.LR;
		/* 822326D0h case    0:*/		return 0x822326D4;
		  /* 822326D4h */ case    1:  		/* bl -1709184 */
		/* 822326D4h case    1:*/		regs.LR = 0x822326D8; return 0x82091254;
		/* 822326D4h case    1:*/		return 0x822326D8;
		  /* 822326D8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822326D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822326D8h case    2:*/		return 0x822326DC;
		  /* 822326DCh */ case    3:  		/* mr R31, R4 */
		/* 822326DCh case    3:*/		regs.R31 = regs.R4;
		/* 822326DCh case    3:*/		return 0x822326E0;
		  /* 822326E0h */ case    4:  		/* li R4, 567 */
		/* 822326E0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x237);
		/* 822326E0h case    4:*/		return 0x822326E4;
		  /* 822326E4h */ case    5:  		/* mr R28, R3 */
		/* 822326E4h case    5:*/		regs.R28 = regs.R3;
		/* 822326E4h case    5:*/		return 0x822326E8;
		  /* 822326E8h */ case    6:  		/* mr R30, R5 */
		/* 822326E8h case    6:*/		regs.R30 = regs.R5;
		/* 822326E8h case    6:*/		return 0x822326EC;
		  /* 822326ECh */ case    7:  		/* mr R29, R6 */
		/* 822326ECh case    7:*/		regs.R29 = regs.R6;
		/* 822326ECh case    7:*/		return 0x822326F0;
		  /* 822326F0h */ case    8:  		/* bl -872928 */
		/* 822326F0h case    8:*/		regs.LR = 0x822326F4; return 0x8215D510;
		/* 822326F0h case    8:*/		return 0x822326F4;
		  /* 822326F4h */ case    9:  		/* mr R27, R3 */
		/* 822326F4h case    9:*/		regs.R27 = regs.R3;
		/* 822326F4h case    9:*/		return 0x822326F8;
		  /* 822326F8h */ case   10:  		/* li R4, 974 */
		/* 822326F8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x3CE);
		/* 822326F8h case   10:*/		return 0x822326FC;
		  /* 822326FCh */ case   11:  		/* mr R3, R28 */
		/* 822326FCh case   11:*/		regs.R3 = regs.R28;
		/* 822326FCh case   11:*/		return 0x82232700;
		  /* 82232700h */ case   12:  		/* bl -872944 */
		/* 82232700h case   12:*/		regs.LR = 0x82232704; return 0x8215D510;
		/* 82232700h case   12:*/		return 0x82232704;
		  /* 82232704h */ case   13:  		/* cmplwi CR6, R27, 2 */
		/* 82232704h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000002);
		/* 82232704h case   13:*/		return 0x82232708;
		  /* 82232708h */ case   14:  		/* bc 4, CR6_EQ, 72 */
		/* 82232708h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82232750;  }
		/* 82232708h case   14:*/		return 0x8223270C;
		  /* 8223270Ch */ case   15:  		/* cmplwi CR6, R3, 0 */
		/* 8223270Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223270Ch case   15:*/		return 0x82232710;
		  /* 82232710h */ case   16:  		/* bc 4, CR6_EQ, 12 */
		/* 82232710h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8223271C;  }
		/* 82232710h case   16:*/		return 0x82232714;
		  /* 82232714h */ case   17:  		/* li R11, 2 */
		/* 82232714h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82232714h case   17:*/		return 0x82232718;
		  /* 82232718h */ case   18:  		/* b 48 */
		/* 82232718h case   18:*/		return 0x82232748;
		/* 82232718h case   18:*/		return 0x8223271C;
	}
	return 0x8223271C;
} // Block from 822326D0h-8223271Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8223271Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223271C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223271C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223271C);
		  /* 8223271Ch */ case    0:  		/* cmplwi CR6, R3, 1 */
		/* 8223271Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 8223271Ch case    0:*/		return 0x82232720;
		  /* 82232720h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82232720h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223272C;  }
		/* 82232720h case    1:*/		return 0x82232724;
		  /* 82232724h */ case    2:  		/* li R11, 5 */
		/* 82232724h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82232724h case    2:*/		return 0x82232728;
		  /* 82232728h */ case    3:  		/* b 32 */
		/* 82232728h case    3:*/		return 0x82232748;
		/* 82232728h case    3:*/		return 0x8223272C;
	}
	return 0x8223272C;
} // Block from 8223271Ch-8223272Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223272Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223272C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223272C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223272C);
		  /* 8223272Ch */ case    0:  		/* cmplwi CR6, R3, 3 */
		/* 8223272Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 8223272Ch case    0:*/		return 0x82232730;
		  /* 82232730h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82232730h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223273C;  }
		/* 82232730h case    1:*/		return 0x82232734;
		  /* 82232734h */ case    2:  		/* li R11, 8 */
		/* 82232734h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 82232734h case    2:*/		return 0x82232738;
		  /* 82232738h */ case    3:  		/* b 16 */
		/* 82232738h case    3:*/		return 0x82232748;
		/* 82232738h case    3:*/		return 0x8223273C;
	}
	return 0x8223273C;
} // Block from 8223272Ch-8223273Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223273Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223273C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223273C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223273C);
		  /* 8223273Ch */ case    0:  		/* cmplwi CR6, R3, 2 */
		/* 8223273Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 8223273Ch case    0:*/		return 0x82232740;
		  /* 82232740h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82232740h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82232750;  }
		/* 82232740h case    1:*/		return 0x82232744;
		  /* 82232744h */ case    2:  		/* li R11, 11 */
		/* 82232744h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 82232744h case    2:*/		return 0x82232748;
	}
	return 0x82232748;
} // Block from 8223273Ch-82232748h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232748);
		  /* 82232748h */ case    0:  		/* stw R11, <#[R31]> */
		/* 82232748h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82232748h case    0:*/		return 0x8223274C;
		  /* 8223274Ch */ case    1:  		/* b 40 */
		/* 8223274Ch case    1:*/		return 0x82232774;
		/* 8223274Ch case    1:*/		return 0x82232750;
	}
	return 0x82232750;
} // Block from 82232748h-82232750h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82232750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232750);
		  /* 82232750h */ case    0:  		/* lis R11, -32252 */
		/* 82232750h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232750h case    0:*/		return 0x82232754;
		  /* 82232754h */ case    1:  		/* lis R10, -32252 */
		/* 82232754h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232754h case    1:*/		return 0x82232758;
		  /* 82232758h */ case    2:  		/* lis R9, -32253 */
		/* 82232758h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232758h case    2:*/		return 0x8223275C;
		  /* 8223275Ch */ case    3:  		/* addi R6, R11, 4336 */
		/* 8223275Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 8223275Ch case    3:*/		return 0x82232760;
		  /* 82232760h */ case    4:  		/* addi R5, R10, -25364 */
		/* 82232760h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 82232760h case    4:*/		return 0x82232764;
		  /* 82232764h */ case    5:  		/* addi R4, R9, 27460 */
		/* 82232764h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232764h case    5:*/		return 0x82232768;
		  /* 82232768h */ case    6:  		/* li R7, 2816 */
		/* 82232768h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xB00);
		/* 82232768h case    6:*/		return 0x8223276C;
		  /* 8223276Ch */ case    7:  		/* li R3, 0 */
		/* 8223276Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223276Ch case    7:*/		return 0x82232770;
		  /* 82232770h */ case    8:  		/* bl -895848 */
		/* 82232770h case    8:*/		regs.LR = 0x82232774; return 0x82157C08;
		/* 82232770h case    8:*/		return 0x82232774;
	}
	return 0x82232774;
} // Block from 82232750h-82232774h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82232774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232774);
		  /* 82232774h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82232774h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82232774h case    0:*/		return 0x82232778;
		  /* 82232778h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82232778h case    1:*/		if ( regs.CR[6].eq ) { return 0x822327AC;  }
		/* 82232778h case    1:*/		return 0x8223277C;
		  /* 8223277Ch */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8223277Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223277Ch case    2:*/		return 0x82232780;
		  /* 82232780h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82232780h case    3:*/		if ( regs.CR[6].eq ) { return 0x822327AC;  }
		/* 82232780h case    3:*/		return 0x82232784;
		  /* 82232784h */ case    4:  		/* lis R11, -32216 */
		/* 82232784h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232784h case    4:*/		return 0x82232788;
		  /* 82232788h */ case    5:  		/* lwz R7, <#[R31]> */
		/* 82232788h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82232788h case    5:*/		return 0x8223278C;
		  /* 8223278Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223278Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223278Ch case    6:*/		return 0x82232790;
		  /* 82232790h */ case    7:  		/* mtspr CTR, R30 */
		/* 82232790h case    7:*/		regs.CTR = regs.R30;
		/* 82232790h case    7:*/		return 0x82232794;
		  /* 82232794h */ case    8:  		/* addi R11, R11, 11160 */
		/* 82232794h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82232794h case    8:*/		return 0x82232798;
		  /* 82232798h */ case    9:  		/* addi R4, R10, 4320 */
		/* 82232798h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10E0);
		/* 82232798h case    9:*/		return 0x8223279C;
		  /* 8223279Ch */ case   10:  		/* li R6, 61 */
		/* 8223279Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x3D);
		/* 8223279Ch case   10:*/		return 0x822327A0;
		  /* 822327A0h */ case   11:  		/* mr R3, R29 */
		/* 822327A0h case   11:*/		regs.R3 = regs.R29;
		/* 822327A0h case   11:*/		return 0x822327A4;
		  /* 822327A4h */ case   12:  		/* lwz R5, <#[R11 + 244]> */
		/* 822327A4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000F4) );
		/* 822327A4h case   12:*/		return 0x822327A8;
		  /* 822327A8h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 822327A8h case   13:*/		if ( 1 ) { regs.LR = 0x822327AC; return (uint32)regs.CTR; }
		/* 822327A8h case   13:*/		return 0x822327AC;
	}
	return 0x822327AC;
} // Block from 82232774h-822327ACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 822327ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822327AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822327AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822327AC);
		  /* 822327ACh */ case    0:  		/* li R3, 1 */
		/* 822327ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822327ACh case    0:*/		return 0x822327B0;
		  /* 822327B0h */ case    1:  		/* addi R1, R1, 128 */
		/* 822327B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822327B0h case    1:*/		return 0x822327B4;
		  /* 822327B4h */ case    2:  		/* b -1709328 */
		/* 822327B4h case    2:*/		return 0x820912A4;
		/* 822327B4h case    2:*/		return 0x822327B8;
		  /* 822327B8h */ case    3:  		/* rlwinm R11, R4, 4, 0, 27 */
		/* 822327B8h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R4);
		/* 822327B8h case    3:*/		return 0x822327BC;
		  /* 822327BCh */ case    4:  		/* li R3, 1 */
		/* 822327BCh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822327BCh case    4:*/		return 0x822327C0;
		  /* 822327C0h */ case    5:  		/* add R11, R11, R5 */
		/* 822327C0h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 822327C0h case    5:*/		return 0x822327C4;
		  /* 822327C4h */ case    6:  		/* stw R11, <#[R6]> */
		/* 822327C4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 822327C4h case    6:*/		return 0x822327C8;
		  /* 822327C8h */ case    7:  		/* bclr 20, CR0_LT */
		/* 822327C8h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822327C8h case    7:*/		return 0x822327CC;
	}
	return 0x822327CC;
} // Block from 822327ACh-822327CCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 822327CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822327CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822327CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822327CC);
		  /* 822327CCh */ case    0:  		/* nop */
		/* 822327CCh case    0:*/		cpu::op::nop();
		/* 822327CCh case    0:*/		return 0x822327D0;
		  /* 822327D0h */ case    1:  		/* rlwinm R11, R4, 7, 0, 24 */
		/* 822327D0h case    1:*/		cpu::op::rlwinm<0,7,0,24>(regs,&regs.R11,regs.R4);
		/* 822327D0h case    1:*/		return 0x822327D4;
		  /* 822327D4h */ case    2:  		/* li R3, 1 */
		/* 822327D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822327D4h case    2:*/		return 0x822327D8;
		  /* 822327D8h */ case    3:  		/* add R11, R11, R5 */
		/* 822327D8h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 822327D8h case    3:*/		return 0x822327DC;
		  /* 822327DCh */ case    4:  		/* stw R11, <#[R6]> */
		/* 822327DCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 822327DCh case    4:*/		return 0x822327E0;
	}
	return 0x822327E0;
} // Block from 822327CCh-822327E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822327E0h
// Function '?CompileWithColorClampNone@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822327E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822327E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822327E0);
		  /* 822327E0h */ case    0:  		/* bclr 20, CR0_LT */
		/* 822327E0h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822327E0h case    0:*/		return 0x822327E4;
	}
	return 0x822327E4;
} // Block from 822327E0h-822327E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822327E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822327E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822327E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822327E4);
		  /* 822327E4h */ case    0:  		/* nop */
		/* 822327E4h case    0:*/		cpu::op::nop();
		/* 822327E4h case    0:*/		return 0x822327E8;
		  /* 822327E8h */ case    1:  		/* li R11, -1 */
		/* 822327E8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 822327E8h case    1:*/		return 0x822327EC;
		  /* 822327ECh */ case    2:  		/* li R3, 1 */
		/* 822327ECh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822327ECh case    2:*/		return 0x822327F0;
		  /* 822327F0h */ case    3:  		/* stw R11, <#[R4]> */
		/* 822327F0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 822327F0h case    3:*/		return 0x822327F4;
		  /* 822327F4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 822327F4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822327F4h case    4:*/		return 0x822327F8;
	}
	return 0x822327F8;
} // Block from 822327E4h-822327F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822327F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822327F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822327F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822327F8);
		  /* 822327F8h */ case    0:  		/* mfspr R12, LR */
		/* 822327F8h case    0:*/		regs.R12 = regs.LR;
		/* 822327F8h case    0:*/		return 0x822327FC;
		  /* 822327FCh */ case    1:  		/* bl -1709480 */
		/* 822327FCh case    1:*/		regs.LR = 0x82232800; return 0x82091254;
		/* 822327FCh case    1:*/		return 0x82232800;
		  /* 82232800h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82232800h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82232800h case    2:*/		return 0x82232804;
		  /* 82232804h */ case    3:  		/* mr R30, R3 */
		/* 82232804h case    3:*/		regs.R30 = regs.R3;
		/* 82232804h case    3:*/		return 0x82232808;
		  /* 82232808h */ case    4:  		/* mr R29, R4 */
		/* 82232808h case    4:*/		regs.R29 = regs.R4;
		/* 82232808h case    4:*/		return 0x8223280C;
		  /* 8223280Ch */ case    5:  		/* mr R31, R5 */
		/* 8223280Ch case    5:*/		regs.R31 = regs.R5;
		/* 8223280Ch case    5:*/		return 0x82232810;
		  /* 82232810h */ case    6:  		/* mr R28, R6 */
		/* 82232810h case    6:*/		regs.R28 = regs.R6;
		/* 82232810h case    6:*/		return 0x82232814;
		  /* 82232814h */ case    7:  		/* mr R27, R7 */
		/* 82232814h case    7:*/		regs.R27 = regs.R7;
		/* 82232814h case    7:*/		return 0x82232818;
		  /* 82232818h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82232818h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232818h case    8:*/		return 0x8223281C;
		  /* 8223281Ch */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 8223281Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x82232840;  }
		/* 8223281Ch case    9:*/		return 0x82232820;
		  /* 82232820h */ case   10:  		/* lis R11, -32252 */
		/* 82232820h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232820h case   10:*/		return 0x82232824;
		  /* 82232824h */ case   11:  		/* lis R10, -32253 */
		/* 82232824h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82232824h case   11:*/		return 0x82232828;
		  /* 82232828h */ case   12:  		/* lis R9, -32253 */
		/* 82232828h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232828h case   12:*/		return 0x8223282C;
		  /* 8223282Ch */ case   13:  		/* addi R6, R11, 4336 */
		/* 8223282Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 8223282Ch case   13:*/		return 0x82232830;
		  /* 82232830h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82232830h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82232830h case   14:*/		return 0x82232834;
		  /* 82232834h */ case   15:  		/* addi R4, R9, 27460 */
		/* 82232834h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232834h case   15:*/		return 0x82232838;
		  /* 82232838h */ case   16:  		/* li R7, 2877 */
		/* 82232838h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xB3D);
		/* 82232838h case   16:*/		return 0x8223283C;
		  /* 8223283Ch */ case   17:  		/* bl -896052 */
		/* 8223283Ch case   17:*/		regs.LR = 0x82232840; return 0x82157C08;
		/* 8223283Ch case   17:*/		return 0x82232840;
	}
	return 0x82232840;
} // Block from 822327F8h-82232840h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82232840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232840);
		  /* 82232840h */ case    0:  		/* cmplwi CR6, R29, 16 */
		/* 82232840h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000010);
		/* 82232840h case    0:*/		return 0x82232844;
		  /* 82232844h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 82232844h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82232868;  }
		/* 82232844h case    1:*/		return 0x82232848;
		  /* 82232848h */ case    2:  		/* cmpwi CR6, R29, -1 */
		/* 82232848h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 82232848h case    2:*/		return 0x8223284C;
		  /* 8223284Ch */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8223284Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82232868;  }
		/* 8223284Ch case    3:*/		return 0x82232850;
		  /* 82232850h */ case    4:  		/* mr R5, R29 */
		/* 82232850h case    4:*/		regs.R5 = regs.R29;
		/* 82232850h case    4:*/		return 0x82232854;
		  /* 82232854h */ case    5:  		/* li R4, 15 */
		/* 82232854h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 82232854h case    5:*/		return 0x82232858;
		  /* 82232858h */ case    6:  		/* mr R3, R30 */
		/* 82232858h case    6:*/		regs.R3 = regs.R30;
		/* 82232858h case    6:*/		return 0x8223285C;
		  /* 8223285Ch */ case    7:  		/* bl -872476 */
		/* 8223285Ch case    7:*/		regs.LR = 0x82232860; return 0x8215D840;
		/* 8223285Ch case    7:*/		return 0x82232860;
		  /* 82232860h */ case    8:  		/* mr R8, R3 */
		/* 82232860h case    8:*/		regs.R8 = regs.R3;
		/* 82232860h case    8:*/		return 0x82232864;
		  /* 82232864h */ case    9:  		/* b 8 */
		/* 82232864h case    9:*/		return 0x8223286C;
		/* 82232864h case    9:*/		return 0x82232868;
	}
	return 0x82232868;
} // Block from 82232840h-82232868h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82232868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232868);
		  /* 82232868h */ case    0:  		/* li R8, 0 */
		/* 82232868h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82232868h case    0:*/		return 0x8223286C;
	}
	return 0x8223286C;
} // Block from 82232868h-8223286Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223286Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223286C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223286C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223286C);
		  /* 8223286Ch */ case    0:  		/* li R11, 3 */
		/* 8223286Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8223286Ch case    0:*/		return 0x82232870;
		  /* 82232870h */ case    1:  		/* stw R8, <#[R31 + 4]> */
		/* 82232870h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82232870h case    1:*/		return 0x82232874;
		  /* 82232874h */ case    2:  		/* li R10, 7 */
		/* 82232874h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 82232874h case    2:*/		return 0x82232878;
		  /* 82232878h */ case    3:  		/* li R9, 0 */
		/* 82232878h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82232878h case    3:*/		return 0x8223287C;
		  /* 8223287Ch */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 8223287Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223287Ch case    4:*/		return 0x82232880;
		  /* 82232880h */ case    5:  		/* li R7, 1 */
		/* 82232880h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82232880h case    5:*/		return 0x82232884;
		  /* 82232884h */ case    6:  		/* stw R11, <#[R31 + 12]> */
		/* 82232884h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82232884h case    6:*/		return 0x82232888;
		  /* 82232888h */ case    7:  		/* stw R9, <#[R31]> */
		/* 82232888h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82232888h case    7:*/		return 0x8223288C;
		  /* 8223288Ch */ case    8:  		/* cmplwi CR6, R28, 0 */
		/* 8223288Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223288Ch case    8:*/		return 0x82232890;
		  /* 82232890h */ case    9:  		/* stw R11, <#[R31 + 16]> */
		/* 82232890h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82232890h case    9:*/		return 0x82232894;
		  /* 82232894h */ case   10:  		/* stw R10, <#[R31 + 20]> */
		/* 82232894h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82232894h case   10:*/		return 0x82232898;
		  /* 82232898h */ case   11:  		/* stw R10, <#[R31 + 24]> */
		/* 82232898h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82232898h case   11:*/		return 0x8223289C;
		  /* 8223289Ch */ case   12:  		/* stw R11, <#[R31 + 28]> */
		/* 8223289Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223289Ch case   12:*/		return 0x822328A0;
		  /* 822328A0h */ case   13:  		/* stw R11, <#[R31 + 32]> */
		/* 822328A0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 822328A0h case   13:*/		return 0x822328A4;
		  /* 822328A4h */ case   14:  		/* stw R7, <#[R31 + 36]> */
		/* 822328A4h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000024) );
		/* 822328A4h case   14:*/		return 0x822328A8;
		  /* 822328A8h */ case   15:  		/* bc 12, CR6_EQ, 52 */
		/* 822328A8h case   15:*/		if ( regs.CR[6].eq ) { return 0x822328DC;  }
		/* 822328A8h case   15:*/		return 0x822328AC;
		  /* 822328ACh */ case   16:  		/* cmplwi CR6, R27, 0 */
		/* 822328ACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822328ACh case   16:*/		return 0x822328B0;
		  /* 822328B0h */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 822328B0h case   17:*/		if ( regs.CR[6].eq ) { return 0x822328DC;  }
		/* 822328B0h case   17:*/		return 0x822328B4;
		  /* 822328B4h */ case   18:  		/* lis R11, -32216 */
		/* 822328B4h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822328B4h case   18:*/		return 0x822328B8;
		  /* 822328B8h */ case   19:  		/* mtspr CTR, R28 */
		/* 822328B8h case   19:*/		regs.CTR = regs.R28;
		/* 822328B8h case   19:*/		return 0x822328BC;
		  /* 822328BCh */ case   20:  		/* lis R10, -32252 */
		/* 822328BCh case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822328BCh case   20:*/		return 0x822328C0;
		  /* 822328C0h */ case   21:  		/* addi R11, R11, 11160 */
		/* 822328C0h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822328C0h case   21:*/		return 0x822328C4;
		  /* 822328C4h */ case   22:  		/* addi R4, R10, 4444 */
		/* 822328C4h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822328C4h case   22:*/		return 0x822328C8;
		  /* 822328C8h */ case   23:  		/* mr R7, R29 */
		/* 822328C8h case   23:*/		regs.R7 = regs.R29;
		/* 822328C8h case   23:*/		return 0x822328CC;
		  /* 822328CCh */ case   24:  		/* li R6, 31 */
		/* 822328CCh case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x1F);
		/* 822328CCh case   24:*/		return 0x822328D0;
		  /* 822328D0h */ case   25:  		/* mr R3, R27 */
		/* 822328D0h case   25:*/		regs.R3 = regs.R27;
		/* 822328D0h case   25:*/		return 0x822328D4;
		  /* 822328D4h */ case   26:  		/* lwz R5, <#[R11 + 124]> */
		/* 822328D4h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000007C) );
		/* 822328D4h case   26:*/		return 0x822328D8;
		  /* 822328D8h */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 822328D8h case   27:*/		if ( 1 ) { regs.LR = 0x822328DC; return (uint32)regs.CTR; }
		/* 822328D8h case   27:*/		return 0x822328DC;
	}
	return 0x822328DC;
} // Block from 8223286Ch-822328DCh (28 instructions)

//////////////////////////////////////////////////////
// Block at 822328DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822328DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822328DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822328DC);
		  /* 822328DCh */ case    0:  		/* li R3, 1 */
		/* 822328DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822328DCh case    0:*/		return 0x822328E0;
		  /* 822328E0h */ case    1:  		/* addi R1, R1, 128 */
		/* 822328E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822328E0h case    1:*/		return 0x822328E4;
		  /* 822328E4h */ case    2:  		/* b -1709632 */
		/* 822328E4h case    2:*/		return 0x820912A4;
		/* 822328E4h case    2:*/		return 0x822328E8;
	}
	return 0x822328E8;
} // Block from 822328DCh-822328E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822328E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822328E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822328E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822328E8);
		  /* 822328E8h */ case    0:  		/* mfspr R12, LR */
		/* 822328E8h case    0:*/		regs.R12 = regs.LR;
		/* 822328E8h case    0:*/		return 0x822328EC;
		  /* 822328ECh */ case    1:  		/* bl -1709760 */
		/* 822328ECh case    1:*/		regs.LR = 0x822328F0; return 0x8209122C;
		/* 822328ECh case    1:*/		return 0x822328F0;
		  /* 822328F0h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 822328F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 822328F0h case    2:*/		return 0x822328F4;
		  /* 822328F4h */ case    3:  		/* lis R11, -32253 */
		/* 822328F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822328F4h case    3:*/		return 0x822328F8;
		  /* 822328F8h */ case    4:  		/* lis R10, -32252 */
		/* 822328F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822328F8h case    4:*/		return 0x822328FC;
		  /* 822328FCh */ case    5:  		/* mr R30, R3 */
		/* 822328FCh case    5:*/		regs.R30 = regs.R3;
		/* 822328FCh case    5:*/		return 0x82232900;
	}
	return 0x82232900;
} // Block from 822328E8h-82232900h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232900h
// Function '?CompileWithColorClamp01@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232900);
		  /* 82232900h */ case    0:  		/* mr R29, R4 */
		/* 82232900h case    0:*/		regs.R29 = regs.R4;
		/* 82232900h case    0:*/		return 0x82232904;
		  /* 82232904h */ case    1:  		/* mr R31, R5 */
		/* 82232904h case    1:*/		regs.R31 = regs.R5;
		/* 82232904h case    1:*/		return 0x82232908;
		  /* 82232908h */ case    2:  		/* mr R22, R6 */
		/* 82232908h case    2:*/		regs.R22 = regs.R6;
		/* 82232908h case    2:*/		return 0x8223290C;
		  /* 8223290Ch */ case    3:  		/* mr R21, R7 */
		/* 8223290Ch case    3:*/		regs.R21 = regs.R7;
		/* 8223290Ch case    3:*/		return 0x82232910;
		  /* 82232910h */ case    4:  		/* mr R19, R8 */
		/* 82232910h case    4:*/		regs.R19 = regs.R8;
		/* 82232910h case    4:*/		return 0x82232914;
		  /* 82232914h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 82232914h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232914h case    5:*/		return 0x82232918;
		  /* 82232918h */ case    6:  		/* addi R18, R11, 27460 */
		/* 82232918h case    6:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x6B44);
		/* 82232918h case    6:*/		return 0x8223291C;
		  /* 8223291Ch */ case    7:  		/* addi R17, R10, 4336 */
		/* 8223291Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0x10F0);
		/* 8223291Ch case    7:*/		return 0x82232920;
		  /* 82232920h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 82232920h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82232940;  }
		/* 82232920h case    8:*/		return 0x82232924;
		  /* 82232924h */ case    9:  		/* lis R11, -32253 */
		/* 82232924h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82232924h case    9:*/		return 0x82232928;
		  /* 82232928h */ case   10:  		/* mr R6, R17 */
		/* 82232928h case   10:*/		regs.R6 = regs.R17;
		/* 82232928h case   10:*/		return 0x8223292C;
		  /* 8223292Ch */ case   11:  		/* addi R5, R11, 27792 */
		/* 8223292Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 8223292Ch case   11:*/		return 0x82232930;
		  /* 82232930h */ case   12:  		/* mr R4, R18 */
		/* 82232930h case   12:*/		regs.R4 = regs.R18;
		/* 82232930h case   12:*/		return 0x82232934;
		  /* 82232934h */ case   13:  		/* li R7, 2967 */
		/* 82232934h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xB97);
		/* 82232934h case   13:*/		return 0x82232938;
		  /* 82232938h */ case   14:  		/* li R3, 0 */
		/* 82232938h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232938h case   14:*/		return 0x8223293C;
		  /* 8223293Ch */ case   15:  		/* bl -896308 */
		/* 8223293Ch case   15:*/		regs.LR = 0x82232940; return 0x82157C08;
		/* 8223293Ch case   15:*/		return 0x82232940;
	}
	return 0x82232940;
} // Block from 82232900h-82232940h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82232940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232940);
		  /* 82232940h */ case    0:  		/* li R20, 0 */
		/* 82232940h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82232940h case    0:*/		return 0x82232944;
		  /* 82232944h */ case    1:  		/* cmpwi CR6, R29, -1 */
		/* 82232944h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 82232944h case    1:*/		return 0x82232948;
		  /* 82232948h */ case    2:  		/* mr R3, R30 */
		/* 82232948h case    2:*/		regs.R3 = regs.R30;
		/* 82232948h case    2:*/		return 0x8223294C;
		  /* 8223294Ch */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 8223294Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82232980;  }
		/* 8223294Ch case    3:*/		return 0x82232950;
		  /* 82232950h */ case    4:  		/* li R4, 928 */
		/* 82232950h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x3A0);
		/* 82232950h case    4:*/		return 0x82232954;
		  /* 82232954h */ case    5:  		/* li R28, 23 */
		/* 82232954h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x17);
		/* 82232954h case    5:*/		return 0x82232958;
		  /* 82232958h */ case    6:  		/* mr R27, R20 */
		/* 82232958h case    6:*/		regs.R27 = regs.R20;
		/* 82232958h case    6:*/		return 0x8223295C;
		  /* 8223295Ch */ case    7:  		/* mr R23, R20 */
		/* 8223295Ch case    7:*/		regs.R23 = regs.R20;
		/* 8223295Ch case    7:*/		return 0x82232960;
		  /* 82232960h */ case    8:  		/* bl -873552 */
		/* 82232960h case    8:*/		regs.LR = 0x82232964; return 0x8215D510;
		/* 82232960h case    8:*/		return 0x82232964;
		  /* 82232964h */ case    9:  		/* mr R26, R3 */
		/* 82232964h case    9:*/		regs.R26 = regs.R3;
		/* 82232964h case    9:*/		return 0x82232968;
		  /* 82232968h */ case   10:  		/* li R4, 927 */
		/* 82232968h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x39F);
		/* 82232968h case   10:*/		return 0x8223296C;
		  /* 8223296Ch */ case   11:  		/* mr R3, R30 */
		/* 8223296Ch case   11:*/		regs.R3 = regs.R30;
		/* 8223296Ch case   11:*/		return 0x82232970;
		  /* 82232970h */ case   12:  		/* bl -873568 */
		/* 82232970h case   12:*/		regs.LR = 0x82232974; return 0x8215D510;
		/* 82232970h case   12:*/		return 0x82232974;
		  /* 82232974h */ case   13:  		/* mr R25, R3 */
		/* 82232974h case   13:*/		regs.R25 = regs.R3;
		/* 82232974h case   13:*/		return 0x82232978;
		  /* 82232978h */ case   14:  		/* li R24, -1 */
		/* 82232978h case   14:*/		cpu::op::li<0>(regs,&regs.R24,0xFFFFFFFF);
		/* 82232978h case   14:*/		return 0x8223297C;
		  /* 8223297Ch */ case   15:  		/* b 120 */
		/* 8223297Ch case   15:*/		return 0x822329F4;
		/* 8223297Ch case   15:*/		return 0x82232980;
	}
	return 0x82232980;
} // Block from 82232940h-82232980h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82232980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232980);
		  /* 82232980h */ case    0:  		/* mr R5, R29 */
		/* 82232980h case    0:*/		regs.R5 = regs.R29;
		/* 82232980h case    0:*/		return 0x82232984;
		  /* 82232984h */ case    1:  		/* li R4, 43 */
		/* 82232984h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 82232984h case    1:*/		return 0x82232988;
		  /* 82232988h */ case    2:  		/* bl -872776 */
		/* 82232988h case    2:*/		regs.LR = 0x8223298C; return 0x8215D840;
		/* 82232988h case    2:*/		return 0x8223298C;
		  /* 8223298Ch */ case    3:  		/* mr R28, R3 */
		/* 8223298Ch case    3:*/		regs.R28 = regs.R3;
		/* 8223298Ch case    3:*/		return 0x82232990;
		  /* 82232990h */ case    4:  		/* mr R5, R29 */
		/* 82232990h case    4:*/		regs.R5 = regs.R29;
		/* 82232990h case    4:*/		return 0x82232994;
		  /* 82232994h */ case    5:  		/* li R4, 45 */
		/* 82232994h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 82232994h case    5:*/		return 0x82232998;
		  /* 82232998h */ case    6:  		/* mr R3, R30 */
		/* 82232998h case    6:*/		regs.R3 = regs.R30;
		/* 82232998h case    6:*/		return 0x8223299C;
		  /* 8223299Ch */ case    7:  		/* bl -872796 */
		/* 8223299Ch case    7:*/		regs.LR = 0x822329A0; return 0x8215D840;
		/* 8223299Ch case    7:*/		return 0x822329A0;
		  /* 822329A0h */ case    8:  		/* mr R27, R3 */
		/* 822329A0h case    8:*/		regs.R27 = regs.R3;
		/* 822329A0h case    8:*/		return 0x822329A4;
		  /* 822329A4h */ case    9:  		/* mr R5, R29 */
		/* 822329A4h case    9:*/		regs.R5 = regs.R29;
		/* 822329A4h case    9:*/		return 0x822329A8;
		  /* 822329A8h */ case   10:  		/* li R4, 46 */
		/* 822329A8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x2E);
		/* 822329A8h case   10:*/		return 0x822329AC;
		  /* 822329ACh */ case   11:  		/* mr R3, R30 */
		/* 822329ACh case   11:*/		regs.R3 = regs.R30;
		/* 822329ACh case   11:*/		return 0x822329B0;
		  /* 822329B0h */ case   12:  		/* bl -872816 */
		/* 822329B0h case   12:*/		regs.LR = 0x822329B4; return 0x8215D840;
		/* 822329B0h case   12:*/		return 0x822329B4;
		  /* 822329B4h */ case   13:  		/* mr R23, R3 */
		/* 822329B4h case   13:*/		regs.R23 = regs.R3;
		/* 822329B4h case   13:*/		return 0x822329B8;
		  /* 822329B8h */ case   14:  		/* mr R5, R29 */
		/* 822329B8h case   14:*/		regs.R5 = regs.R29;
		/* 822329B8h case   14:*/		return 0x822329BC;
		  /* 822329BCh */ case   15:  		/* li R4, 42 */
		/* 822329BCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x2A);
		/* 822329BCh case   15:*/		return 0x822329C0;
		  /* 822329C0h */ case   16:  		/* mr R3, R30 */
		/* 822329C0h case   16:*/		regs.R3 = regs.R30;
		/* 822329C0h case   16:*/		return 0x822329C4;
		  /* 822329C4h */ case   17:  		/* bl -872836 */
		/* 822329C4h case   17:*/		regs.LR = 0x822329C8; return 0x8215D840;
		/* 822329C4h case   17:*/		return 0x822329C8;
		  /* 822329C8h */ case   18:  		/* mr R26, R3 */
		/* 822329C8h case   18:*/		regs.R26 = regs.R3;
		/* 822329C8h case   18:*/		return 0x822329CC;
		  /* 822329CCh */ case   19:  		/* mr R5, R29 */
		/* 822329CCh case   19:*/		regs.R5 = regs.R29;
		/* 822329CCh case   19:*/		return 0x822329D0;
		  /* 822329D0h */ case   20:  		/* li R4, 41 */
		/* 822329D0h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x29);
		/* 822329D0h case   20:*/		return 0x822329D4;
		  /* 822329D4h */ case   21:  		/* mr R3, R30 */
		/* 822329D4h case   21:*/		regs.R3 = regs.R30;
		/* 822329D4h case   21:*/		return 0x822329D8;
		  /* 822329D8h */ case   22:  		/* bl -872856 */
		/* 822329D8h case   22:*/		regs.LR = 0x822329DC; return 0x8215D840;
		/* 822329D8h case   22:*/		return 0x822329DC;
		  /* 822329DCh */ case   23:  		/* mr R25, R3 */
		/* 822329DCh case   23:*/		regs.R25 = regs.R3;
		/* 822329DCh case   23:*/		return 0x822329E0;
		  /* 822329E0h */ case   24:  		/* mr R5, R29 */
		/* 822329E0h case   24:*/		regs.R5 = regs.R29;
		/* 822329E0h case   24:*/		return 0x822329E4;
		  /* 822329E4h */ case   25:  		/* li R4, 40 */
		/* 822329E4h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 822329E4h case   25:*/		return 0x822329E8;
		  /* 822329E8h */ case   26:  		/* mr R3, R30 */
		/* 822329E8h case   26:*/		regs.R3 = regs.R30;
		/* 822329E8h case   26:*/		return 0x822329EC;
		  /* 822329ECh */ case   27:  		/* bl -872876 */
		/* 822329ECh case   27:*/		regs.LR = 0x822329F0; return 0x8215D840;
		/* 822329ECh case   27:*/		return 0x822329F0;
		  /* 822329F0h */ case   28:  		/* mr R24, R3 */
		/* 822329F0h case   28:*/		regs.R24 = regs.R3;
		/* 822329F0h case   28:*/		return 0x822329F4;
	}
	return 0x822329F4;
} // Block from 82232980h-822329F4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 822329F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822329F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822329F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822329F4);
		  /* 822329F4h */ case    0:  		/* cmplwi CR6, R22, 1 */
		/* 822329F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000001);
		/* 822329F4h case    0:*/		return 0x822329F8;
		  /* 822329F8h */ case    1:  		/* bc 4, CR6_GT, 24 */
		/* 822329F8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82232A10;  }
		/* 822329F8h case    1:*/		return 0x822329FC;
		  /* 822329FCh */ case    2:  		/* li R4, 8 */
		/* 822329FCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 822329FCh case    2:*/		return 0x82232A00;
		  /* 82232A00h */ case    3:  		/* mr R3, R22 */
		/* 82232A00h case    3:*/		regs.R3 = regs.R22;
		/* 82232A00h case    3:*/		return 0x82232A04;
		  /* 82232A04h */ case    4:  		/* bl -166012 */
		/* 82232A04h case    4:*/		regs.LR = 0x82232A08; return 0x8220A188;
		/* 82232A04h case    4:*/		return 0x82232A08;
		  /* 82232A08h */ case    5:  		/* mr R22, R3 */
		/* 82232A08h case    5:*/		regs.R22 = regs.R3;
		/* 82232A08h case    5:*/		return 0x82232A0C;
		  /* 82232A0Ch */ case    6:  		/* b 8 */
		/* 82232A0Ch case    6:*/		return 0x82232A14;
		/* 82232A0Ch case    6:*/		return 0x82232A10;
	}
	return 0x82232A10;
} // Block from 822329F4h-82232A10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A10);
		  /* 82232A10h */ case    0:  		/* li R22, 1 */
		/* 82232A10h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 82232A10h case    0:*/		return 0x82232A14;
	}
	return 0x82232A14;
} // Block from 82232A10h-82232A14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A14);
		  /* 82232A14h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 82232A14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82232A14h case    0:*/		return 0x82232A18;
		  /* 82232A18h */ case    1:  		/* lis R11, -32252 */
		/* 82232A18h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232A18h case    1:*/		return 0x82232A1C;
		  /* 82232A1Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82232A1Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82232A2C;  }
		/* 82232A1Ch case    2:*/		return 0x82232A20;
		  /* 82232A20h */ case    3:  		/* addi R11, R11, 3736 */
		/* 82232A20h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xE98);
		/* 82232A20h case    3:*/		return 0x82232A24;
		  /* 82232A24h */ case    4:  		/* addi R10, R11, -576 */
		/* 82232A24h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFDC0);
		/* 82232A24h case    4:*/		return 0x82232A28;
	}
	return 0x82232A28;
} // Block from 82232A14h-82232A28h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82232A28h
// Function '?CompileWithColorClampNeg11@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A28);
		  /* 82232A28h */ case    0:  		/* b 8 */
		/* 82232A28h case    0:*/		return 0x82232A30;
		/* 82232A28h case    0:*/		return 0x82232A2C;
	}
	return 0x82232A2C;
} // Block from 82232A28h-82232A2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A2C);
		  /* 82232A2Ch */ case    0:  		/* addi R10, R11, 3736 */
		/* 82232A2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xE98);
		/* 82232A2Ch case    0:*/		return 0x82232A30;
	}
	return 0x82232A30;
} // Block from 82232A2Ch-82232A30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A30);
		  /* 82232A30h */ case    0:  		/* mulli R11, R28, 24 */
		/* 82232A30h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R28,0x18);
		/* 82232A30h case    0:*/		return 0x82232A34;
		  /* 82232A34h */ case    1:  		/* add R28, R11, R10 */
		/* 82232A34h case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R10);
		/* 82232A34h case    1:*/		return 0x82232A38;
		  /* 82232A38h */ case    2:  		/* li R11, 1 */
		/* 82232A38h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82232A38h case    2:*/		return 0x82232A3C;
		  /* 82232A3Ch */ case    3:  		/* stw R11, <#[R31]> */
		/* 82232A3Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82232A3Ch case    3:*/		return 0x82232A40;
		  /* 82232A40h */ case    4:  		/* lwz R11, <#[R28 + 16]> */
		/* 82232A40h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82232A40h case    4:*/		return 0x82232A44;
		  /* 82232A44h */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 82232A44h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82232A44h case    5:*/		return 0x82232A48;
		  /* 82232A48h */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 82232A48h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82232A48h case    6:*/		return 0x82232A4C;
		  /* 82232A4Ch */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82232A4Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82232A60;  }
		/* 82232A4Ch case    7:*/		return 0x82232A50;
		  /* 82232A50h */ case    8:  		/* addi R11, R27, -1 */
		/* 82232A50h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 82232A50h case    8:*/		return 0x82232A54;
		  /* 82232A54h */ case    9:  		/* cntlzw R11, R11 */
		/* 82232A54h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82232A54h case    9:*/		return 0x82232A58;
		  /* 82232A58h */ case   10:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82232A58h case   10:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82232A58h case   10:*/		return 0x82232A5C;
		  /* 82232A5Ch */ case   11:  		/* stw R11, <#[R31 + 4]> */
		/* 82232A5Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82232A5Ch case   11:*/		return 0x82232A60;
	}
	return 0x82232A60;
} // Block from 82232A30h-82232A60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82232A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A60);
		  /* 82232A60h */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 82232A60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 82232A60h case    0:*/		return 0x82232A64;
		  /* 82232A64h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 82232A64h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82232A64h case    1:*/		return 0x82232A68;
		  /* 82232A68h */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 82232A68h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82232A68h case    2:*/		return 0x82232A6C;
		  /* 82232A6Ch */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82232A6Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82232A7C;  }
		/* 82232A6Ch case    3:*/		return 0x82232A70;
		  /* 82232A70h */ case    4:  		/* cntlzw R11, R23 */
		/* 82232A70h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R23);
		/* 82232A70h case    4:*/		return 0x82232A74;
		  /* 82232A74h */ case    5:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82232A74h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82232A74h case    5:*/		return 0x82232A78;
		  /* 82232A78h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 82232A78h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82232A78h case    6:*/		return 0x82232A7C;
	}
	return 0x82232A7C;
} // Block from 82232A60h-82232A7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232A7C);
		  /* 82232A7Ch */ case    0:  		/* stw R20, <#[R31 + 12]> */
		/* 82232A7Ch case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x0000000C) );
		/* 82232A7Ch case    0:*/		return 0x82232A80;
		  /* 82232A80h */ case    1:  		/* stw R20, <#[R31 + 16]> */
		/* 82232A80h case    1:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000010) );
		/* 82232A80h case    1:*/		return 0x82232A84;
		  /* 82232A84h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 82232A84h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82232A84h case    2:*/		return 0x82232A88;
		  /* 82232A88h */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 82232A88h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82232A88h case    3:*/		return 0x82232A8C;
		  /* 82232A8Ch */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 82232A8Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82232A8Ch case    4:*/		return 0x82232A90;
		  /* 82232A90h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 82232A90h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82232AB4;  }
		/* 82232A90h case    5:*/		return 0x82232A94;
		  /* 82232A94h */ case    6:  		/* mr R5, R29 */
		/* 82232A94h case    6:*/		regs.R5 = regs.R29;
		/* 82232A94h case    6:*/		return 0x82232A98;
		  /* 82232A98h */ case    7:  		/* li R4, 44 */
		/* 82232A98h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 82232A98h case    7:*/		return 0x82232A9C;
		  /* 82232A9Ch */ case    8:  		/* mr R3, R30 */
		/* 82232A9Ch case    8:*/		regs.R3 = regs.R30;
		/* 82232A9Ch case    8:*/		return 0x82232AA0;
		  /* 82232AA0h */ case    9:  		/* bl -873056 */
		/* 82232AA0h case    9:*/		regs.LR = 0x82232AA4; return 0x8215D840;
		/* 82232AA0h case    9:*/		return 0x82232AA4;
		  /* 82232AA4h */ case   10:  		/* lwz R11, <#[R28 + 20]> */
		/* 82232AA4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 82232AA4h case   10:*/		return 0x82232AA8;
		  /* 82232AA8h */ case   11:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82232AA8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82232AA8h case   11:*/		return 0x82232AAC;
		  /* 82232AACh */ case   12:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82232AACh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82232AACh case   12:*/		return 0x82232AB0;
		  /* 82232AB0h */ case   13:  		/* stw R11, <#[R31 + 20]> */
		/* 82232AB0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82232AB0h case   13:*/		return 0x82232AB4;
	}
	return 0x82232AB4;
} // Block from 82232A7Ch-82232AB4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82232AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232AB4);
		  /* 82232AB4h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82232AB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82232AB4h case    0:*/		return 0x82232AB8;
		  /* 82232AB8h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 82232AB8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82232AB8h case    1:*/		return 0x82232ABC;
		  /* 82232ABCh */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 82232ABCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82232ADC;  }
		/* 82232ABCh case    2:*/		return 0x82232AC0;
		  /* 82232AC0h */ case    3:  		/* lis R11, -32252 */
		/* 82232AC0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232AC0h case    3:*/		return 0x82232AC4;
		  /* 82232AC4h */ case    4:  		/* mr R6, R17 */
		/* 82232AC4h case    4:*/		regs.R6 = regs.R17;
		/* 82232AC4h case    4:*/		return 0x82232AC8;
		  /* 82232AC8h */ case    5:  		/* addi R5, R11, -25364 */
		/* 82232AC8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9CEC);
		/* 82232AC8h case    5:*/		return 0x82232ACC;
		  /* 82232ACCh */ case    6:  		/* mr R4, R18 */
		/* 82232ACCh case    6:*/		regs.R4 = regs.R18;
		/* 82232ACCh case    6:*/		return 0x82232AD0;
		  /* 82232AD0h */ case    7:  		/* li R7, 3048 */
		/* 82232AD0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xBE8);
		/* 82232AD0h case    7:*/		return 0x82232AD4;
		  /* 82232AD4h */ case    8:  		/* li R3, 0 */
		/* 82232AD4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232AD4h case    8:*/		return 0x82232AD8;
		  /* 82232AD8h */ case    9:  		/* bl -896720 */
		/* 82232AD8h case    9:*/		regs.LR = 0x82232ADC; return 0x82157C08;
		/* 82232AD8h case    9:*/		return 0x82232ADC;
	}
	return 0x82232ADC;
} // Block from 82232AB4h-82232ADCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 82232ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232ADC);
		  /* 82232ADCh */ case    0:  		/* stw R26, <#[R31 + 28]> */
		/* 82232ADCh case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000001C) );
		/* 82232ADCh case    0:*/		return 0x82232AE0;
		  /* 82232AE0h */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 82232AE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82232AE0h case    1:*/		return 0x82232AE4;
		  /* 82232AE4h */ case    2:  		/* stw R25, <#[R31 + 32]> */
		/* 82232AE4h case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000020) );
		/* 82232AE4h case    2:*/		return 0x82232AE8;
		  /* 82232AE8h */ case    3:  		/* stw R20, <#[R31 + 24]> */
		/* 82232AE8h case    3:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000018) );
		/* 82232AE8h case    3:*/		return 0x82232AEC;
		  /* 82232AECh */ case    4:  		/* stw R24, <#[R31 + 36]> */
		/* 82232AECh case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000024) );
		/* 82232AECh case    4:*/		return 0x82232AF0;
		  /* 82232AF0h */ case    5:  		/* bc 12, CR6_EQ, 136 */
		/* 82232AF0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82232B78;  }
		/* 82232AF0h case    5:*/		return 0x82232AF4;
		  /* 82232AF4h */ case    6:  		/* cmplwi CR6, R19, 0 */
		/* 82232AF4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82232AF4h case    6:*/		return 0x82232AF8;
		  /* 82232AF8h */ case    7:  		/* bc 12, CR6_EQ, 128 */
		/* 82232AF8h case    7:*/		if ( regs.CR[6].eq ) { return 0x82232B78;  }
		/* 82232AF8h case    7:*/		return 0x82232AFC;
		  /* 82232AFCh */ case    8:  		/* lis R11, -32216 */
		/* 82232AFCh case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232AFCh case    8:*/		return 0x82232B00;
		  /* 82232B00h */ case    9:  		/* lwz R30, <#[R31 + 20]> */
		/* 82232B00h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 82232B00h case    9:*/		return 0x82232B04;
		  /* 82232B04h */ case   10:  		/* lwz R28, <#[R31 + 16]> */
		/* 82232B04h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 82232B04h case   10:*/		return 0x82232B08;
		  /* 82232B08h */ case   11:  		/* lis R10, -32252 */
		/* 82232B08h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232B08h case   11:*/		return 0x82232B0C;
		  /* 82232B0Ch */ case   12:  		/* addi R27, R11, 11160 */
		/* 82232B0Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x2B98);
		/* 82232B0Ch case   12:*/		return 0x82232B10;
		  /* 82232B10h */ case   13:  		/* lwz R11, <#[R31 + 12]> */
		/* 82232B10h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82232B10h case   13:*/		return 0x82232B14;
		  /* 82232B14h */ case   14:  		/* addi R4, R10, 4464 */
		/* 82232B14h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1170);
		/* 82232B14h case   14:*/		return 0x82232B18;
		  /* 82232B18h */ case   15:  		/* lwz R10, <#[R31 + 8]> */
		/* 82232B18h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82232B18h case   15:*/		return 0x82232B1C;
		  /* 82232B1Ch */ case   16:  		/* mr R7, R29 */
		/* 82232B1Ch case   16:*/		regs.R7 = regs.R29;
		/* 82232B1Ch case   16:*/		return 0x82232B20;
		  /* 82232B20h */ case   17:  		/* lwz R9, <#[R31 + 4]> */
		/* 82232B20h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82232B20h case   17:*/		return 0x82232B24;
		  /* 82232B24h */ case   18:  		/* li R6, 30 */
		/* 82232B24h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1E);
		/* 82232B24h case   18:*/		return 0x82232B28;
		  /* 82232B28h */ case   19:  		/* lwz R8, <#[R31]> */
		/* 82232B28h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82232B28h case   19:*/		return 0x82232B2C;
		  /* 82232B2Ch */ case   20:  		/* mr R3, R19 */
		/* 82232B2Ch case   20:*/		regs.R3 = regs.R19;
		/* 82232B2Ch case   20:*/		return 0x82232B30;
		  /* 82232B30h */ case   21:  		/* stw R24, <#[R1 + 132]> */
		/* 82232B30h case   21:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000084) );
		/* 82232B30h case   21:*/		return 0x82232B34;
		  /* 82232B34h */ case   22:  		/* lwz R5, <#[R27 + 120]> */
		/* 82232B34h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000078) );
		/* 82232B34h case   22:*/		return 0x82232B38;
		  /* 82232B38h */ case   23:  		/* mtspr CTR, R21 */
		/* 82232B38h case   23:*/		regs.CTR = regs.R21;
		/* 82232B38h case   23:*/		return 0x82232B3C;
		  /* 82232B3Ch */ case   24:  		/* stw R25, <#[R1 + 124]> */
		/* 82232B3Ch case   24:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000007C) );
		/* 82232B3Ch case   24:*/		return 0x82232B40;
		  /* 82232B40h */ case   25:  		/* stw R26, <#[R1 + 116]> */
		/* 82232B40h case   25:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000074) );
		/* 82232B40h case   25:*/		return 0x82232B44;
		  /* 82232B44h */ case   26:  		/* stw R20, <#[R1 + 108]> */
		/* 82232B44h case   26:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x0000006C) );
		/* 82232B44h case   26:*/		return 0x82232B48;
		  /* 82232B48h */ case   27:  		/* stw R30, <#[R1 + 100]> */
		/* 82232B48h case   27:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82232B48h case   27:*/		return 0x82232B4C;
		  /* 82232B4Ch */ case   28:  		/* stw R28, <#[R1 + 92]> */
		/* 82232B4Ch case   28:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000005C) );
		/* 82232B4Ch case   28:*/		return 0x82232B50;
	}
	return 0x82232B50;
} // Block from 82232ADCh-82232B50h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82232B50h
// Function '?CompileWithHOSMode@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232B50);
		  /* 82232B50h */ case    0:  		/* stw R11, <#[R1 + 84]> */
		/* 82232B50h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82232B50h case    0:*/		return 0x82232B54;
		  /* 82232B54h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 82232B54h case    1:*/		if ( 1 ) { regs.LR = 0x82232B58; return (uint32)regs.CTR; }
		/* 82232B54h case    1:*/		return 0x82232B58;
		  /* 82232B58h */ case    2:  		/* lis R11, -32252 */
		/* 82232B58h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232B58h case    2:*/		return 0x82232B5C;
		  /* 82232B5Ch */ case    3:  		/* lwz R5, <#[R27 + 396]> */
		/* 82232B5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000018C) );
		/* 82232B5Ch case    3:*/		return 0x82232B60;
		  /* 82232B60h */ case    4:  		/* mr R7, R22 */
		/* 82232B60h case    4:*/		regs.R7 = regs.R22;
		/* 82232B60h case    4:*/		return 0x82232B64;
		  /* 82232B64h */ case    5:  		/* mtspr CTR, R21 */
		/* 82232B64h case    5:*/		regs.CTR = regs.R21;
		/* 82232B64h case    5:*/		return 0x82232B68;
		  /* 82232B68h */ case    6:  		/* addi R4, R11, 4320 */
		/* 82232B68h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10E0);
		/* 82232B68h case    6:*/		return 0x82232B6C;
		  /* 82232B6Ch */ case    7:  		/* li R6, 99 */
		/* 82232B6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x63);
		/* 82232B6Ch case    7:*/		return 0x82232B70;
		  /* 82232B70h */ case    8:  		/* mr R3, R19 */
		/* 82232B70h case    8:*/		regs.R3 = regs.R19;
		/* 82232B70h case    8:*/		return 0x82232B74;
		  /* 82232B74h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82232B74h case    9:*/		if ( 1 ) { regs.LR = 0x82232B78; return (uint32)regs.CTR; }
		/* 82232B74h case    9:*/		return 0x82232B78;
	}
	return 0x82232B78;
} // Block from 82232B50h-82232B78h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82232B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232B78);
		  /* 82232B78h */ case    0:  		/* li R3, 1 */
		/* 82232B78h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82232B78h case    0:*/		return 0x82232B7C;
		  /* 82232B7Ch */ case    1:  		/* addi R1, R1, 272 */
		/* 82232B7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 82232B7Ch case    1:*/		return 0x82232B80;
		  /* 82232B80h */ case    2:  		/* b -1710340 */
		/* 82232B80h case    2:*/		return 0x8209127C;
		/* 82232B80h case    2:*/		return 0x82232B84;
		  /* 82232B84h */ case    3:  		/* nop */
		/* 82232B84h case    3:*/		cpu::op::nop();
		/* 82232B84h case    3:*/		return 0x82232B88;
	}
	return 0x82232B88;
} // Block from 82232B78h-82232B88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82232B88h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232B88);
		  /* 82232B88h */ case    0:  		/* mfspr R12, LR */
		/* 82232B88h case    0:*/		regs.R12 = regs.LR;
		/* 82232B88h case    0:*/		return 0x82232B8C;
		  /* 82232B8Ch */ case    1:  		/* bl -1710420 */
		/* 82232B8Ch case    1:*/		regs.LR = 0x82232B90; return 0x82091238;
		/* 82232B8Ch case    1:*/		return 0x82232B90;
		  /* 82232B90h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82232B90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82232B90h case    2:*/		return 0x82232B94;
		  /* 82232B94h */ case    3:  		/* lis R11, -32253 */
		/* 82232B94h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82232B94h case    3:*/		return 0x82232B98;
		  /* 82232B98h */ case    4:  		/* lis R10, -32252 */
		/* 82232B98h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232B98h case    4:*/		return 0x82232B9C;
		  /* 82232B9Ch */ case    5:  		/* mr R31, R3 */
		/* 82232B9Ch case    5:*/		regs.R31 = regs.R3;
		/* 82232B9Ch case    5:*/		return 0x82232BA0;
		  /* 82232BA0h */ case    6:  		/* mr R26, R4 */
		/* 82232BA0h case    6:*/		regs.R26 = regs.R4;
		/* 82232BA0h case    6:*/		return 0x82232BA4;
		  /* 82232BA4h */ case    7:  		/* mr R20, R5 */
		/* 82232BA4h case    7:*/		regs.R20 = regs.R5;
		/* 82232BA4h case    7:*/		return 0x82232BA8;
		  /* 82232BA8h */ case    8:  		/* mr R29, R6 */
		/* 82232BA8h case    8:*/		regs.R29 = regs.R6;
		/* 82232BA8h case    8:*/		return 0x82232BAC;
		  /* 82232BACh */ case    9:  		/* mr R30, R7 */
		/* 82232BACh case    9:*/		regs.R30 = regs.R7;
		/* 82232BACh case    9:*/		return 0x82232BB0;
		  /* 82232BB0h */ case   10:  		/* mr R28, R8 */
		/* 82232BB0h case   10:*/		regs.R28 = regs.R8;
		/* 82232BB0h case   10:*/		return 0x82232BB4;
		  /* 82232BB4h */ case   11:  		/* mr R21, R9 */
		/* 82232BB4h case   11:*/		regs.R21 = regs.R9;
		/* 82232BB4h case   11:*/		return 0x82232BB8;
		  /* 82232BB8h */ case   12:  		/* cmplwi CR6, R3, 0 */
		/* 82232BB8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232BB8h case   12:*/		return 0x82232BBC;
		  /* 82232BBCh */ case   13:  		/* addi R25, R11, 27460 */
		/* 82232BBCh case   13:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 82232BBCh case   13:*/		return 0x82232BC0;
		  /* 82232BC0h */ case   14:  		/* addi R24, R10, 4336 */
		/* 82232BC0h case   14:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x10F0);
		/* 82232BC0h case   14:*/		return 0x82232BC4;
		  /* 82232BC4h */ case   15:  		/* bc 4, CR6_EQ, 32 */
		/* 82232BC4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82232BE4;  }
		/* 82232BC4h case   15:*/		return 0x82232BC8;
		  /* 82232BC8h */ case   16:  		/* lis R11, -32253 */
		/* 82232BC8h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82232BC8h case   16:*/		return 0x82232BCC;
		  /* 82232BCCh */ case   17:  		/* mr R6, R24 */
		/* 82232BCCh case   17:*/		regs.R6 = regs.R24;
		/* 82232BCCh case   17:*/		return 0x82232BD0;
		  /* 82232BD0h */ case   18:  		/* addi R5, R11, 27792 */
		/* 82232BD0h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 82232BD0h case   18:*/		return 0x82232BD4;
		  /* 82232BD4h */ case   19:  		/* mr R4, R25 */
		/* 82232BD4h case   19:*/		regs.R4 = regs.R25;
		/* 82232BD4h case   19:*/		return 0x82232BD8;
		  /* 82232BD8h */ case   20:  		/* li R7, 3110 */
		/* 82232BD8h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0xC26);
		/* 82232BD8h case   20:*/		return 0x82232BDC;
		  /* 82232BDCh */ case   21:  		/* li R3, 0 */
		/* 82232BDCh case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232BDCh case   21:*/		return 0x82232BE0;
		  /* 82232BE0h */ case   22:  		/* bl -896984 */
		/* 82232BE0h case   22:*/		regs.LR = 0x82232BE4; return 0x82157C08;
		/* 82232BE0h case   22:*/		return 0x82232BE4;
	}
	return 0x82232BE4;
} // Block from 82232B88h-82232BE4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82232BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232BE4);
		  /* 82232BE4h */ case    0:  		/* cmpwi CR6, R26, -1 */
		/* 82232BE4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0xFFFFFFFF);
		/* 82232BE4h case    0:*/		return 0x82232BE8;
		  /* 82232BE8h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82232BE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82232BF8;  }
		/* 82232BE8h case    1:*/		return 0x82232BEC;
		  /* 82232BECh */ case    2:  		/* li R27, 23 */
		/* 82232BECh case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x17);
		/* 82232BECh case    2:*/		return 0x82232BF0;
		  /* 82232BF0h */ case    3:  		/* li R23, 1 */
		/* 82232BF0h case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82232BF0h case    3:*/		return 0x82232BF4;
		  /* 82232BF4h */ case    4:  		/* b 44 */
		/* 82232BF4h case    4:*/		return 0x82232C20;
		/* 82232BF4h case    4:*/		return 0x82232BF8;
	}
	return 0x82232BF8;
} // Block from 82232BE4h-82232BF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82232BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232BF8);
		  /* 82232BF8h */ case    0:  		/* mr R5, R26 */
		/* 82232BF8h case    0:*/		regs.R5 = regs.R26;
		/* 82232BF8h case    0:*/		return 0x82232BFC;
		  /* 82232BFCh */ case    1:  		/* li R4, 43 */
		/* 82232BFCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 82232BFCh case    1:*/		return 0x82232C00;
		  /* 82232C00h */ case    2:  		/* mr R3, R31 */
		/* 82232C00h case    2:*/		regs.R3 = regs.R31;
		/* 82232C00h case    2:*/		return 0x82232C04;
		  /* 82232C04h */ case    3:  		/* bl -873412 */
		/* 82232C04h case    3:*/		regs.LR = 0x82232C08; return 0x8215D840;
		/* 82232C04h case    3:*/		return 0x82232C08;
		  /* 82232C08h */ case    4:  		/* mr R27, R3 */
		/* 82232C08h case    4:*/		regs.R27 = regs.R3;
		/* 82232C08h case    4:*/		return 0x82232C0C;
		  /* 82232C0Ch */ case    5:  		/* mr R5, R26 */
		/* 82232C0Ch case    5:*/		regs.R5 = regs.R26;
		/* 82232C0Ch case    5:*/		return 0x82232C10;
		  /* 82232C10h */ case    6:  		/* li R4, 44 */
		/* 82232C10h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 82232C10h case    6:*/		return 0x82232C14;
		  /* 82232C14h */ case    7:  		/* mr R3, R31 */
		/* 82232C14h case    7:*/		regs.R3 = regs.R31;
		/* 82232C14h case    7:*/		return 0x82232C18;
		  /* 82232C18h */ case    8:  		/* bl -873432 */
		/* 82232C18h case    8:*/		regs.LR = 0x82232C1C; return 0x8215D840;
		/* 82232C18h case    8:*/		return 0x82232C1C;
		  /* 82232C1Ch */ case    9:  		/* mr R23, R3 */
		/* 82232C1Ch case    9:*/		regs.R23 = regs.R3;
		/* 82232C1Ch case    9:*/		return 0x82232C20;
	}
	return 0x82232C20;
} // Block from 82232BF8h-82232C20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82232C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232C20);
		  /* 82232C20h */ case    0:  		/* cmplwi CR6, R30, 1 */
		/* 82232C20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82232C20h case    0:*/		return 0x82232C24;
		  /* 82232C24h */ case    1:  		/* bc 4, CR6_GT, 24 */
		/* 82232C24h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82232C3C;  }
		/* 82232C24h case    1:*/		return 0x82232C28;
		  /* 82232C28h */ case    2:  		/* li R4, 8 */
		/* 82232C28h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82232C28h case    2:*/		return 0x82232C2C;
		  /* 82232C2Ch */ case    3:  		/* mr R3, R30 */
		/* 82232C2Ch case    3:*/		regs.R3 = regs.R30;
		/* 82232C2Ch case    3:*/		return 0x82232C30;
		  /* 82232C30h */ case    4:  		/* bl -166568 */
		/* 82232C30h case    4:*/		regs.LR = 0x82232C34; return 0x8220A188;
		/* 82232C30h case    4:*/		return 0x82232C34;
		  /* 82232C34h */ case    5:  		/* mr R22, R3 */
		/* 82232C34h case    5:*/		regs.R22 = regs.R3;
		/* 82232C34h case    5:*/		return 0x82232C38;
	}
	return 0x82232C38;
} // Block from 82232C20h-82232C38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232C38h
// Function '?CompileWithEdgeFlag@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232C38);
		  /* 82232C38h */ case    0:  		/* b 8 */
		/* 82232C38h case    0:*/		return 0x82232C40;
		/* 82232C38h case    0:*/		return 0x82232C3C;
	}
	return 0x82232C3C;
} // Block from 82232C38h-82232C3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232C3C);
		  /* 82232C3Ch */ case    0:  		/* li R22, 1 */
		/* 82232C3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 82232C3Ch case    0:*/		return 0x82232C40;
	}
	return 0x82232C40;
} // Block from 82232C3Ch-82232C40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232C40);
		  /* 82232C40h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 82232C40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82232C40h case    0:*/		return 0x82232C44;
		  /* 82232C44h */ case    1:  		/* lis R11, -32252 */
		/* 82232C44h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232C44h case    1:*/		return 0x82232C48;
		  /* 82232C48h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82232C48h case    2:*/		if ( regs.CR[6].eq ) { return 0x82232C58;  }
		/* 82232C48h case    2:*/		return 0x82232C4C;
		  /* 82232C4Ch */ case    3:  		/* addi R11, R11, 3736 */
		/* 82232C4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xE98);
		/* 82232C4Ch case    3:*/		return 0x82232C50;
		  /* 82232C50h */ case    4:  		/* addi R30, R11, -576 */
		/* 82232C50h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFDC0);
		/* 82232C50h case    4:*/		return 0x82232C54;
		  /* 82232C54h */ case    5:  		/* b 8 */
		/* 82232C54h case    5:*/		return 0x82232C5C;
		/* 82232C54h case    5:*/		return 0x82232C58;
	}
	return 0x82232C58;
} // Block from 82232C40h-82232C58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232C58);
		  /* 82232C58h */ case    0:  		/* addi R30, R11, 3736 */
		/* 82232C58h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xE98);
		/* 82232C58h case    0:*/		return 0x82232C5C;
	}
	return 0x82232C5C;
} // Block from 82232C58h-82232C5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232C5C);
		  /* 82232C5Ch */ case    0:  		/* mulli R11, R27, 24 */
		/* 82232C5Ch case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R27,0x18);
		/* 82232C5Ch case    0:*/		return 0x82232C60;
		  /* 82232C60h */ case    1:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82232C60h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82232C60h case    1:*/		return 0x82232C64;
		  /* 82232C64h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82232C64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82232C64h case    2:*/		return 0x82232C68;
		  /* 82232C68h */ case    3:  		/* stw R11, <#[R29]> */
		/* 82232C68h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82232C68h case    3:*/		return 0x82232C6C;
		  /* 82232C6Ch */ case    4:  		/* bc 4, CR6_EQ, 160 */
		/* 82232C6Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82232D0C;  }
		/* 82232C6Ch case    4:*/		return 0x82232C70;
		  /* 82232C70h */ case    5:  		/* addi R11, R27, -17 */
		/* 82232C70h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFEF);
		/* 82232C70h case    5:*/		return 0x82232C74;
		  /* 82232C74h */ case    6:  		/* lis R10, -32216 */
		/* 82232C74h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 82232C74h case    6:*/		return 0x82232C78;
		  /* 82232C78h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82232C78h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82232C78h case    7:*/		return 0x82232C7C;
		  /* 82232C7Ch */ case    8:  		/* addi R10, R10, 11584 */
		/* 82232C7Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D40);
		/* 82232C7Ch case    8:*/		return 0x82232C80;
		  /* 82232C80h */ case    9:  		/* lwzx R31, <#[R11 + R10]> */
		/* 82232C80h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82232C80h case    9:*/		return 0x82232C84;
		  /* 82232C84h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 82232C84h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82232C84h case   10:*/		return 0x82232C88;
		  /* 82232C88h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 82232C88h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82232CA8;  }
		/* 82232C88h case   11:*/		return 0x82232C8C;
		  /* 82232C8Ch */ case   12:  		/* lis R11, -32252 */
		/* 82232C8Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232C8Ch case   12:*/		return 0x82232C90;
		  /* 82232C90h */ case   13:  		/* mr R6, R24 */
		/* 82232C90h case   13:*/		regs.R6 = regs.R24;
		/* 82232C90h case   13:*/		return 0x82232C94;
		  /* 82232C94h */ case   14:  		/* addi R5, R11, 4596 */
		/* 82232C94h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x11F4);
		/* 82232C94h case   14:*/		return 0x82232C98;
		  /* 82232C98h */ case   15:  		/* mr R4, R25 */
		/* 82232C98h case   15:*/		regs.R4 = regs.R25;
		/* 82232C98h case   15:*/		return 0x82232C9C;
		  /* 82232C9Ch */ case   16:  		/* li R7, 3140 */
		/* 82232C9Ch case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xC44);
		/* 82232C9Ch case   16:*/		return 0x82232CA0;
		  /* 82232CA0h */ case   17:  		/* li R3, 0 */
		/* 82232CA0h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232CA0h case   17:*/		return 0x82232CA4;
		  /* 82232CA4h */ case   18:  		/* bl -897180 */
		/* 82232CA4h case   18:*/		regs.LR = 0x82232CA8; return 0x82157C08;
		/* 82232CA4h case   18:*/		return 0x82232CA8;
	}
	return 0x82232CA8;
} // Block from 82232C5Ch-82232CA8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82232CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232CA8);
		  /* 82232CA8h */ case    0:  		/* rlwinm R11, R23, 2, 0, 29 */
		/* 82232CA8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R23);
		/* 82232CA8h case    0:*/		return 0x82232CAC;
		  /* 82232CACh */ case    1:  		/* lwzx R31, <#[R11 + R31]> */
		/* 82232CACh case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82232CACh case    1:*/		return 0x82232CB0;
		  /* 82232CB0h */ case    2:  		/* cmpwi CR6, R31, 0 */
		/* 82232CB0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82232CB0h case    2:*/		return 0x82232CB4;
		  /* 82232CB4h */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 82232CB4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82232CC0;  }
		/* 82232CB4h case    3:*/		return 0x82232CB8;
		  /* 82232CB8h */ case    4:  		/* cmpwi CR6, R31, 24 */
		/* 82232CB8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000018);
		/* 82232CB8h case    4:*/		return 0x82232CBC;
		  /* 82232CBCh */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 82232CBCh case    5:*/		if ( regs.CR[6].lt ) { return 0x82232CDC;  }
		/* 82232CBCh case    5:*/		return 0x82232CC0;
	}
	return 0x82232CC0;
} // Block from 82232CA8h-82232CC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232CC0);
		  /* 82232CC0h */ case    0:  		/* lis R11, -32252 */
		/* 82232CC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232CC0h case    0:*/		return 0x82232CC4;
		  /* 82232CC4h */ case    1:  		/* mr R6, R24 */
		/* 82232CC4h case    1:*/		regs.R6 = regs.R24;
		/* 82232CC4h case    1:*/		return 0x82232CC8;
		  /* 82232CC8h */ case    2:  		/* addi R5, R11, 4556 */
		/* 82232CC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x11CC);
		/* 82232CC8h case    2:*/		return 0x82232CCC;
		  /* 82232CCCh */ case    3:  		/* mr R4, R25 */
		/* 82232CCCh case    3:*/		regs.R4 = regs.R25;
		/* 82232CCCh case    3:*/		return 0x82232CD0;
		  /* 82232CD0h */ case    4:  		/* li R7, 3142 */
		/* 82232CD0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xC46);
		/* 82232CD0h case    4:*/		return 0x82232CD4;
		  /* 82232CD4h */ case    5:  		/* li R3, 0 */
		/* 82232CD4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232CD4h case    5:*/		return 0x82232CD8;
		  /* 82232CD8h */ case    6:  		/* bl -897232 */
		/* 82232CD8h case    6:*/		regs.LR = 0x82232CDC; return 0x82157C08;
		/* 82232CD8h case    6:*/		return 0x82232CDC;
	}
	return 0x82232CDC;
} // Block from 82232CC0h-82232CDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232CDC);
		  /* 82232CDCh */ case    0:  		/* mulli R11, R31, 24 */
		/* 82232CDCh case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x18);
		/* 82232CDCh case    0:*/		return 0x82232CE0;
		  /* 82232CE0h */ case    1:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82232CE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82232CE0h case    1:*/		return 0x82232CE4;
		  /* 82232CE4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82232CE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82232CE4h case    2:*/		return 0x82232CE8;
		  /* 82232CE8h */ case    3:  		/* stw R11, <#[R29]> */
		/* 82232CE8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82232CE8h case    3:*/		return 0x82232CEC;
		  /* 82232CECh */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 82232CECh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82232D0C;  }
		/* 82232CECh case    4:*/		return 0x82232CF0;
		  /* 82232CF0h */ case    5:  		/* lis R11, -32252 */
		/* 82232CF0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232CF0h case    5:*/		return 0x82232CF4;
		  /* 82232CF4h */ case    6:  		/* mr R6, R24 */
		/* 82232CF4h case    6:*/		regs.R6 = regs.R24;
		/* 82232CF4h case    6:*/		return 0x82232CF8;
		  /* 82232CF8h */ case    7:  		/* addi R5, R11, 4544 */
		/* 82232CF8h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x11C0);
		/* 82232CF8h case    7:*/		return 0x82232CFC;
		  /* 82232CFCh */ case    8:  		/* mr R4, R25 */
		/* 82232CFCh case    8:*/		regs.R4 = regs.R25;
		/* 82232CFCh case    8:*/		return 0x82232D00;
		  /* 82232D00h */ case    9:  		/* li R7, 3144 */
		/* 82232D00h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xC48);
		/* 82232D00h case    9:*/		return 0x82232D04;
		  /* 82232D04h */ case   10:  		/* li R3, 0 */
		/* 82232D04h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232D04h case   10:*/		return 0x82232D08;
		  /* 82232D08h */ case   11:  		/* bl -897280 */
		/* 82232D08h case   11:*/		regs.LR = 0x82232D0C; return 0x82157C08;
		/* 82232D08h case   11:*/		return 0x82232D0C;
	}
	return 0x82232D0C;
} // Block from 82232CDCh-82232D0Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82232D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232D0C);
		  /* 82232D0Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82232D0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82232D0Ch case    0:*/		return 0x82232D10;
		  /* 82232D10h */ case    1:  		/* rlwinm R10, R20, 2, 0, 29 */
		/* 82232D10h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R20);
		/* 82232D10h case    1:*/		return 0x82232D14;
		  /* 82232D14h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82232D14h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82232D14h case    2:*/		return 0x82232D18;
		  /* 82232D18h */ case    3:  		/* add R11, R10, R11 */
		/* 82232D18h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82232D18h case    3:*/		return 0x82232D1C;
		  /* 82232D1Ch */ case    4:  		/* stw R11, <#[R29]> */
		/* 82232D1Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82232D1Ch case    4:*/		return 0x82232D20;
		  /* 82232D20h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 82232D20h case    5:*/		if ( regs.CR[6].eq ) { return 0x82232D7C;  }
		/* 82232D20h case    5:*/		return 0x82232D24;
		  /* 82232D24h */ case    6:  		/* cmplwi CR6, R21, 0 */
		/* 82232D24h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82232D24h case    6:*/		return 0x82232D28;
		  /* 82232D28h */ case    7:  		/* bc 12, CR6_EQ, 84 */
		/* 82232D28h case    7:*/		if ( regs.CR[6].eq ) { return 0x82232D7C;  }
		/* 82232D28h case    7:*/		return 0x82232D2C;
		  /* 82232D2Ch */ case    8:  		/* lis R11, -32216 */
		/* 82232D2Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232D2Ch case    8:*/		return 0x82232D30;
		  /* 82232D30h */ case    9:  		/* mtspr CTR, R28 */
		/* 82232D30h case    9:*/		regs.CTR = regs.R28;
		/* 82232D30h case    9:*/		return 0x82232D34;
		  /* 82232D34h */ case   10:  		/* lis R10, -32252 */
		/* 82232D34h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232D34h case   10:*/		return 0x82232D38;
		  /* 82232D38h */ case   11:  		/* addi R31, R11, 11160 */
		/* 82232D38h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x2B98);
		/* 82232D38h case   11:*/		return 0x82232D3C;
		  /* 82232D3Ch */ case   12:  		/* addi R4, R10, 4520 */
		/* 82232D3Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x11A8);
		/* 82232D3Ch case   12:*/		return 0x82232D40;
		  /* 82232D40h */ case   13:  		/* mr R9, R27 */
		/* 82232D40h case   13:*/		regs.R9 = regs.R27;
		/* 82232D40h case   13:*/		return 0x82232D44;
		  /* 82232D44h */ case   14:  		/* mr R8, R23 */
		/* 82232D44h case   14:*/		regs.R8 = regs.R23;
		/* 82232D44h case   14:*/		return 0x82232D48;
		  /* 82232D48h */ case   15:  		/* mr R7, R26 */
		/* 82232D48h case   15:*/		regs.R7 = regs.R26;
		/* 82232D48h case   15:*/		return 0x82232D4C;
		  /* 82232D4Ch */ case   16:  		/* li R6, 29 */
		/* 82232D4Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1D);
		/* 82232D4Ch case   16:*/		return 0x82232D50;
	}
	return 0x82232D50;
} // Block from 82232D0Ch-82232D50h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82232D50h
// Function '?CompileWithCXVUTextureFormat@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232D50);
		  /* 82232D50h */ case    0:  		/* lwz R5, <#[R31 + 116]> */
		/* 82232D50h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000074) );
		/* 82232D50h case    0:*/		return 0x82232D54;
		  /* 82232D54h */ case    1:  		/* mr R3, R21 */
		/* 82232D54h case    1:*/		regs.R3 = regs.R21;
		/* 82232D54h case    1:*/		return 0x82232D58;
		  /* 82232D58h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 82232D58h case    2:*/		if ( 1 ) { regs.LR = 0x82232D5C; return (uint32)regs.CTR; }
		/* 82232D58h case    2:*/		return 0x82232D5C;
		  /* 82232D5Ch */ case    3:  		/* lis R11, -32252 */
		/* 82232D5Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232D5Ch case    3:*/		return 0x82232D60;
		  /* 82232D60h */ case    4:  		/* mr R7, R22 */
		/* 82232D60h case    4:*/		regs.R7 = regs.R22;
		/* 82232D60h case    4:*/		return 0x82232D64;
		  /* 82232D64h */ case    5:  		/* lwz R5, <#[R31 + 396]> */
		/* 82232D64h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000018C) );
		/* 82232D64h case    5:*/		return 0x82232D68;
		  /* 82232D68h */ case    6:  		/* addi R4, R11, 4320 */
		/* 82232D68h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10E0);
		/* 82232D68h case    6:*/		return 0x82232D6C;
		  /* 82232D6Ch */ case    7:  		/* mtspr CTR, R28 */
		/* 82232D6Ch case    7:*/		regs.CTR = regs.R28;
		/* 82232D6Ch case    7:*/		return 0x82232D70;
		  /* 82232D70h */ case    8:  		/* li R6, 99 */
		/* 82232D70h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x63);
		/* 82232D70h case    8:*/		return 0x82232D74;
		  /* 82232D74h */ case    9:  		/* mr R3, R21 */
		/* 82232D74h case    9:*/		regs.R3 = regs.R21;
		/* 82232D74h case    9:*/		return 0x82232D78;
		  /* 82232D78h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 82232D78h case   10:*/		if ( 1 ) { regs.LR = 0x82232D7C; return (uint32)regs.CTR; }
		/* 82232D78h case   10:*/		return 0x82232D7C;
	}
	return 0x82232D7C;
} // Block from 82232D50h-82232D7Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82232D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232D7C);
		  /* 82232D7Ch */ case    0:  		/* li R3, 1 */
		/* 82232D7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82232D7Ch case    0:*/		return 0x82232D80;
		  /* 82232D80h */ case    1:  		/* addi R1, R1, 192 */
		/* 82232D80h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82232D80h case    1:*/		return 0x82232D84;
		  /* 82232D84h */ case    2:  		/* b -1710844 */
		/* 82232D84h case    2:*/		return 0x82091288;
		/* 82232D84h case    2:*/		return 0x82232D88;
	}
	return 0x82232D88;
} // Block from 82232D7Ch-82232D88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232D88);
		  /* 82232D88h */ case    0:  		/* mfspr R12, LR */
		/* 82232D88h case    0:*/		regs.R12 = regs.LR;
		/* 82232D88h case    0:*/		return 0x82232D8C;
		  /* 82232D8Ch */ case    1:  		/* bl -1710924 */
		/* 82232D8Ch case    1:*/		regs.LR = 0x82232D90; return 0x82091240;
		/* 82232D8Ch case    1:*/		return 0x82232D90;
		  /* 82232D90h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82232D90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82232D90h case    2:*/		return 0x82232D94;
		  /* 82232D94h */ case    3:  		/* lis R11, -32253 */
		/* 82232D94h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82232D94h case    3:*/		return 0x82232D98;
		  /* 82232D98h */ case    4:  		/* lis R10, -32252 */
		/* 82232D98h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232D98h case    4:*/		return 0x82232D9C;
		  /* 82232D9Ch */ case    5:  		/* mr R31, R3 */
		/* 82232D9Ch case    5:*/		regs.R31 = regs.R3;
		/* 82232D9Ch case    5:*/		return 0x82232DA0;
		  /* 82232DA0h */ case    6:  		/* mr R26, R4 */
		/* 82232DA0h case    6:*/		regs.R26 = regs.R4;
		/* 82232DA0h case    6:*/		return 0x82232DA4;
		  /* 82232DA4h */ case    7:  		/* mr R27, R5 */
		/* 82232DA4h case    7:*/		regs.R27 = regs.R5;
		/* 82232DA4h case    7:*/		return 0x82232DA8;
		  /* 82232DA8h */ case    8:  		/* mr R29, R6 */
		/* 82232DA8h case    8:*/		regs.R29 = regs.R6;
		/* 82232DA8h case    8:*/		return 0x82232DAC;
		  /* 82232DACh */ case    9:  		/* mr R23, R7 */
		/* 82232DACh case    9:*/		regs.R23 = regs.R7;
		/* 82232DACh case    9:*/		return 0x82232DB0;
		  /* 82232DB0h */ case   10:  		/* mr R22, R8 */
		/* 82232DB0h case   10:*/		regs.R22 = regs.R8;
		/* 82232DB0h case   10:*/		return 0x82232DB4;
		  /* 82232DB4h */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 82232DB4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232DB4h case   11:*/		return 0x82232DB8;
		  /* 82232DB8h */ case   12:  		/* addi R25, R11, 27460 */
		/* 82232DB8h case   12:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 82232DB8h case   12:*/		return 0x82232DBC;
		  /* 82232DBCh */ case   13:  		/* addi R24, R10, 4336 */
		/* 82232DBCh case   13:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x10F0);
		/* 82232DBCh case   13:*/		return 0x82232DC0;
		  /* 82232DC0h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 82232DC0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82232DE0;  }
		/* 82232DC0h case   14:*/		return 0x82232DC4;
		  /* 82232DC4h */ case   15:  		/* lis R11, -32253 */
		/* 82232DC4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82232DC4h case   15:*/		return 0x82232DC8;
		  /* 82232DC8h */ case   16:  		/* mr R6, R24 */
		/* 82232DC8h case   16:*/		regs.R6 = regs.R24;
		/* 82232DC8h case   16:*/		return 0x82232DCC;
		  /* 82232DCCh */ case   17:  		/* addi R5, R11, 27792 */
		/* 82232DCCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 82232DCCh case   17:*/		return 0x82232DD0;
		  /* 82232DD0h */ case   18:  		/* mr R4, R25 */
		/* 82232DD0h case   18:*/		regs.R4 = regs.R25;
		/* 82232DD0h case   18:*/		return 0x82232DD4;
		  /* 82232DD4h */ case   19:  		/* li R7, 3188 */
		/* 82232DD4h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xC74);
		/* 82232DD4h case   19:*/		return 0x82232DD8;
		  /* 82232DD8h */ case   20:  		/* li R3, 0 */
		/* 82232DD8h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232DD8h case   20:*/		return 0x82232DDC;
		  /* 82232DDCh */ case   21:  		/* bl -897492 */
		/* 82232DDCh case   21:*/		regs.LR = 0x82232DE0; return 0x82157C08;
		/* 82232DDCh case   21:*/		return 0x82232DE0;
	}
	return 0x82232DE0;
} // Block from 82232D88h-82232DE0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82232DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232DE0);
		  /* 82232DE0h */ case    0:  		/* cmpwi CR6, R26, -1 */
		/* 82232DE0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0xFFFFFFFF);
		/* 82232DE0h case    0:*/		return 0x82232DE4;
		  /* 82232DE4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82232DE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82232DF4;  }
		/* 82232DE4h case    1:*/		return 0x82232DE8;
		  /* 82232DE8h */ case    2:  		/* li R30, 23 */
		/* 82232DE8h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x17);
		/* 82232DE8h case    2:*/		return 0x82232DEC;
		  /* 82232DECh */ case    3:  		/* li R28, 1 */
		/* 82232DECh case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82232DECh case    3:*/		return 0x82232DF0;
		  /* 82232DF0h */ case    4:  		/* b 44 */
		/* 82232DF0h case    4:*/		return 0x82232E1C;
		/* 82232DF0h case    4:*/		return 0x82232DF4;
	}
	return 0x82232DF4;
} // Block from 82232DE0h-82232DF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82232DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232DF4);
		  /* 82232DF4h */ case    0:  		/* mr R5, R26 */
		/* 82232DF4h case    0:*/		regs.R5 = regs.R26;
		/* 82232DF4h case    0:*/		return 0x82232DF8;
	}
	return 0x82232DF8;
} // Block from 82232DF4h-82232DF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232DF8h
// Function '?CompileWithVertexStreamFrequencyDivide@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232DF8);
		  /* 82232DF8h */ case    0:  		/* li R4, 43 */
		/* 82232DF8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 82232DF8h case    0:*/		return 0x82232DFC;
		  /* 82232DFCh */ case    1:  		/* mr R3, R31 */
		/* 82232DFCh case    1:*/		regs.R3 = regs.R31;
		/* 82232DFCh case    1:*/		return 0x82232E00;
		  /* 82232E00h */ case    2:  		/* bl -873920 */
		/* 82232E00h case    2:*/		regs.LR = 0x82232E04; return 0x8215D840;
		/* 82232E00h case    2:*/		return 0x82232E04;
		  /* 82232E04h */ case    3:  		/* mr R30, R3 */
		/* 82232E04h case    3:*/		regs.R30 = regs.R3;
		/* 82232E04h case    3:*/		return 0x82232E08;
		  /* 82232E08h */ case    4:  		/* mr R5, R26 */
		/* 82232E08h case    4:*/		regs.R5 = regs.R26;
		/* 82232E08h case    4:*/		return 0x82232E0C;
		  /* 82232E0Ch */ case    5:  		/* li R4, 44 */
		/* 82232E0Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 82232E0Ch case    5:*/		return 0x82232E10;
		  /* 82232E10h */ case    6:  		/* mr R3, R31 */
		/* 82232E10h case    6:*/		regs.R3 = regs.R31;
		/* 82232E10h case    6:*/		return 0x82232E14;
		  /* 82232E14h */ case    7:  		/* bl -873940 */
		/* 82232E14h case    7:*/		regs.LR = 0x82232E18; return 0x8215D840;
		/* 82232E14h case    7:*/		return 0x82232E18;
		  /* 82232E18h */ case    8:  		/* mr R28, R3 */
		/* 82232E18h case    8:*/		regs.R28 = regs.R3;
		/* 82232E18h case    8:*/		return 0x82232E1C;
	}
	return 0x82232E1C;
} // Block from 82232DF8h-82232E1Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82232E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232E1C);
		  /* 82232E1Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82232E1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82232E1Ch case    0:*/		return 0x82232E20;
		  /* 82232E20h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82232E20h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232E34;  }
		/* 82232E20h case    1:*/		return 0x82232E24;
		  /* 82232E24h */ case    2:  		/* li R4, 8 */
		/* 82232E24h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82232E24h case    2:*/		return 0x82232E28;
		  /* 82232E28h */ case    3:  		/* mr R3, R29 */
		/* 82232E28h case    3:*/		regs.R3 = regs.R29;
		/* 82232E28h case    3:*/		return 0x82232E2C;
		  /* 82232E2Ch */ case    4:  		/* bl -167076 */
		/* 82232E2Ch case    4:*/		regs.LR = 0x82232E30; return 0x8220A188;
		/* 82232E2Ch case    4:*/		return 0x82232E30;
		  /* 82232E30h */ case    5:  		/* b 8 */
		/* 82232E30h case    5:*/		return 0x82232E38;
		/* 82232E30h case    5:*/		return 0x82232E34;
	}
	return 0x82232E34;
} // Block from 82232E1Ch-82232E34h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232E34);
		  /* 82232E34h */ case    0:  		/* li R3, 1 */
		/* 82232E34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82232E34h case    0:*/		return 0x82232E38;
	}
	return 0x82232E38;
} // Block from 82232E34h-82232E38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232E38);
		  /* 82232E38h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82232E38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232E38h case    0:*/		return 0x82232E3C;
		  /* 82232E3Ch */ case    1:  		/* lis R11, -32252 */
		/* 82232E3Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232E3Ch case    1:*/		return 0x82232E40;
		  /* 82232E40h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82232E40h case    2:*/		if ( regs.CR[6].eq ) { return 0x82232E50;  }
		/* 82232E40h case    2:*/		return 0x82232E44;
		  /* 82232E44h */ case    3:  		/* addi R11, R11, 3736 */
		/* 82232E44h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xE98);
		/* 82232E44h case    3:*/		return 0x82232E48;
		  /* 82232E48h */ case    4:  		/* addi R29, R11, -576 */
		/* 82232E48h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFDC0);
		/* 82232E48h case    4:*/		return 0x82232E4C;
		  /* 82232E4Ch */ case    5:  		/* b 8 */
		/* 82232E4Ch case    5:*/		return 0x82232E54;
		/* 82232E4Ch case    5:*/		return 0x82232E50;
	}
	return 0x82232E50;
} // Block from 82232E38h-82232E50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232E50);
		  /* 82232E50h */ case    0:  		/* addi R29, R11, 3736 */
		/* 82232E50h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xE98);
		/* 82232E50h case    0:*/		return 0x82232E54;
	}
	return 0x82232E54;
} // Block from 82232E50h-82232E54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82232E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232E54);
		  /* 82232E54h */ case    0:  		/* mulli R11, R30, 24 */
		/* 82232E54h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x18);
		/* 82232E54h case    0:*/		return 0x82232E58;
		  /* 82232E58h */ case    1:  		/* add R11, R11, R29 */
		/* 82232E58h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82232E58h case    1:*/		return 0x82232E5C;
		  /* 82232E5Ch */ case    2:  		/* lhz R10, <#[R11 + 6]> */
		/* 82232E5Ch case    2:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000006) );
		/* 82232E5Ch case    2:*/		return 0x82232E60;
		  /* 82232E60h */ case    3:  		/* stw R10, <#[R27]> */
		/* 82232E60h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 82232E60h case    3:*/		return 0x82232E64;
		  /* 82232E64h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 82232E64h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82232E64h case    4:*/		return 0x82232E68;
		  /* 82232E68h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82232E68h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82232E68h case    5:*/		return 0x82232E6C;
		  /* 82232E6Ch */ case    6:  		/* bc 4, CR6_EQ, 164 */
		/* 82232E6Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82232F10;  }
		/* 82232E6Ch case    6:*/		return 0x82232E70;
		  /* 82232E70h */ case    7:  		/* addi R11, R30, -17 */
		/* 82232E70h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFEF);
		/* 82232E70h case    7:*/		return 0x82232E74;
		  /* 82232E74h */ case    8:  		/* lis R10, -32216 */
		/* 82232E74h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 82232E74h case    8:*/		return 0x82232E78;
		  /* 82232E78h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82232E78h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82232E78h case    9:*/		return 0x82232E7C;
		  /* 82232E7Ch */ case   10:  		/* addi R10, R10, 11584 */
		/* 82232E7Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D40);
		/* 82232E7Ch case   10:*/		return 0x82232E80;
		  /* 82232E80h */ case   11:  		/* lwzx R31, <#[R11 + R10]> */
		/* 82232E80h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82232E80h case   11:*/		return 0x82232E84;
		  /* 82232E84h */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 82232E84h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82232E84h case   12:*/		return 0x82232E88;
		  /* 82232E88h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 82232E88h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82232EA8;  }
		/* 82232E88h case   13:*/		return 0x82232E8C;
		  /* 82232E8Ch */ case   14:  		/* lis R11, -32252 */
		/* 82232E8Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232E8Ch case   14:*/		return 0x82232E90;
		  /* 82232E90h */ case   15:  		/* mr R6, R24 */
		/* 82232E90h case   15:*/		regs.R6 = regs.R24;
		/* 82232E90h case   15:*/		return 0x82232E94;
		  /* 82232E94h */ case   16:  		/* addi R5, R11, 4596 */
		/* 82232E94h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x11F4);
		/* 82232E94h case   16:*/		return 0x82232E98;
		  /* 82232E98h */ case   17:  		/* mr R4, R25 */
		/* 82232E98h case   17:*/		regs.R4 = regs.R25;
		/* 82232E98h case   17:*/		return 0x82232E9C;
		  /* 82232E9Ch */ case   18:  		/* li R7, 3219 */
		/* 82232E9Ch case   18:*/		cpu::op::li<0>(regs,&regs.R7,0xC93);
		/* 82232E9Ch case   18:*/		return 0x82232EA0;
		  /* 82232EA0h */ case   19:  		/* li R3, 0 */
		/* 82232EA0h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232EA0h case   19:*/		return 0x82232EA4;
		  /* 82232EA4h */ case   20:  		/* bl -897692 */
		/* 82232EA4h case   20:*/		regs.LR = 0x82232EA8; return 0x82157C08;
		/* 82232EA4h case   20:*/		return 0x82232EA8;
	}
	return 0x82232EA8;
} // Block from 82232E54h-82232EA8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82232EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232EA8);
		  /* 82232EA8h */ case    0:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 82232EA8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 82232EA8h case    0:*/		return 0x82232EAC;
		  /* 82232EACh */ case    1:  		/* lwzx R31, <#[R11 + R31]> */
		/* 82232EACh case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82232EACh case    1:*/		return 0x82232EB0;
		  /* 82232EB0h */ case    2:  		/* cmpwi CR6, R31, 0 */
		/* 82232EB0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82232EB0h case    2:*/		return 0x82232EB4;
		  /* 82232EB4h */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 82232EB4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82232EC0;  }
		/* 82232EB4h case    3:*/		return 0x82232EB8;
		  /* 82232EB8h */ case    4:  		/* cmpwi CR6, R31, 24 */
		/* 82232EB8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000018);
		/* 82232EB8h case    4:*/		return 0x82232EBC;
		  /* 82232EBCh */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 82232EBCh case    5:*/		if ( regs.CR[6].lt ) { return 0x82232EDC;  }
		/* 82232EBCh case    5:*/		return 0x82232EC0;
	}
	return 0x82232EC0;
} // Block from 82232EA8h-82232EC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82232EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232EC0);
		  /* 82232EC0h */ case    0:  		/* lis R11, -32252 */
		/* 82232EC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232EC0h case    0:*/		return 0x82232EC4;
		  /* 82232EC4h */ case    1:  		/* mr R6, R24 */
		/* 82232EC4h case    1:*/		regs.R6 = regs.R24;
		/* 82232EC4h case    1:*/		return 0x82232EC8;
		  /* 82232EC8h */ case    2:  		/* addi R5, R11, 4556 */
		/* 82232EC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x11CC);
		/* 82232EC8h case    2:*/		return 0x82232ECC;
		  /* 82232ECCh */ case    3:  		/* mr R4, R25 */
		/* 82232ECCh case    3:*/		regs.R4 = regs.R25;
		/* 82232ECCh case    3:*/		return 0x82232ED0;
		  /* 82232ED0h */ case    4:  		/* li R7, 3221 */
		/* 82232ED0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xC95);
		/* 82232ED0h case    4:*/		return 0x82232ED4;
		  /* 82232ED4h */ case    5:  		/* li R3, 0 */
		/* 82232ED4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232ED4h case    5:*/		return 0x82232ED8;
		  /* 82232ED8h */ case    6:  		/* bl -897744 */
		/* 82232ED8h case    6:*/		regs.LR = 0x82232EDC; return 0x82157C08;
		/* 82232ED8h case    6:*/		return 0x82232EDC;
	}
	return 0x82232EDC;
} // Block from 82232EC0h-82232EDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232EDC);
		  /* 82232EDCh */ case    0:  		/* mulli R11, R31, 24 */
		/* 82232EDCh case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x18);
		/* 82232EDCh case    0:*/		return 0x82232EE0;
		  /* 82232EE0h */ case    1:  		/* add R11, R11, R29 */
		/* 82232EE0h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82232EE0h case    1:*/		return 0x82232EE4;
		  /* 82232EE4h */ case    2:  		/* lhz R11, <#[R11 + 6]> */
		/* 82232EE4h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000006) );
		/* 82232EE4h case    2:*/		return 0x82232EE8;
		  /* 82232EE8h */ case    3:  		/* cmpwi CR0, R11, 0 */
		/* 82232EE8h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 82232EE8h case    3:*/		return 0x82232EEC;
		  /* 82232EECh */ case    4:  		/* stw R11, <#[R27]> */
		/* 82232EECh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82232EECh case    4:*/		return 0x82232EF0;
		  /* 82232EF0h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 82232EF0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82232F10;  }
		/* 82232EF0h case    5:*/		return 0x82232EF4;
		  /* 82232EF4h */ case    6:  		/* lis R11, -32252 */
		/* 82232EF4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232EF4h case    6:*/		return 0x82232EF8;
		  /* 82232EF8h */ case    7:  		/* mr R6, R24 */
		/* 82232EF8h case    7:*/		regs.R6 = regs.R24;
		/* 82232EF8h case    7:*/		return 0x82232EFC;
		  /* 82232EFCh */ case    8:  		/* addi R5, R11, 4612 */
		/* 82232EFCh case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1204);
		/* 82232EFCh case    8:*/		return 0x82232F00;
		  /* 82232F00h */ case    9:  		/* mr R4, R25 */
		/* 82232F00h case    9:*/		regs.R4 = regs.R25;
		/* 82232F00h case    9:*/		return 0x82232F04;
		  /* 82232F04h */ case   10:  		/* li R7, 3223 */
		/* 82232F04h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xC97);
		/* 82232F04h case   10:*/		return 0x82232F08;
		  /* 82232F08h */ case   11:  		/* li R3, 0 */
		/* 82232F08h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82232F08h case   11:*/		return 0x82232F0C;
		  /* 82232F0Ch */ case   12:  		/* bl -897796 */
		/* 82232F0Ch case   12:*/		regs.LR = 0x82232F10; return 0x82157C08;
		/* 82232F0Ch case   12:*/		return 0x82232F10;
	}
	return 0x82232F10;
} // Block from 82232EDCh-82232F10h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82232F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232F10);
		  /* 82232F10h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 82232F10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82232F10h case    0:*/		return 0x82232F14;
		  /* 82232F14h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82232F14h case    1:*/		if ( regs.CR[6].eq ) { return 0x82232F4C;  }
		/* 82232F14h case    1:*/		return 0x82232F18;
		  /* 82232F18h */ case    2:  		/* cmplwi CR6, R22, 0 */
		/* 82232F18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82232F18h case    2:*/		return 0x82232F1C;
		  /* 82232F1Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82232F1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82232F4C;  }
		/* 82232F1Ch case    3:*/		return 0x82232F20;
	}
	return 0x82232F20;
} // Block from 82232F10h-82232F20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82232F20h
// Function '?CompileWithTransformedVertices@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232F20);
		  /* 82232F20h */ case    0:  		/* lis R11, -32216 */
		/* 82232F20h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82232F20h case    0:*/		return 0x82232F24;
		  /* 82232F24h */ case    1:  		/* lwz R8, <#[R27]> */
		/* 82232F24h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 82232F24h case    1:*/		return 0x82232F28;
		  /* 82232F28h */ case    2:  		/* lis R10, -32252 */
		/* 82232F28h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82232F28h case    2:*/		return 0x82232F2C;
		  /* 82232F2Ch */ case    3:  		/* mtspr CTR, R23 */
		/* 82232F2Ch case    3:*/		regs.CTR = regs.R23;
		/* 82232F2Ch case    3:*/		return 0x82232F30;
		  /* 82232F30h */ case    4:  		/* addi R11, R11, 11160 */
		/* 82232F30h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82232F30h case    4:*/		return 0x82232F34;
		  /* 82232F34h */ case    5:  		/* addi R4, R10, 4444 */
		/* 82232F34h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82232F34h case    5:*/		return 0x82232F38;
		  /* 82232F38h */ case    6:  		/* mr R7, R26 */
		/* 82232F38h case    6:*/		regs.R7 = regs.R26;
		/* 82232F38h case    6:*/		return 0x82232F3C;
		  /* 82232F3Ch */ case    7:  		/* li R6, 100 */
		/* 82232F3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x64);
		/* 82232F3Ch case    7:*/		return 0x82232F40;
		  /* 82232F40h */ case    8:  		/* mr R3, R22 */
		/* 82232F40h case    8:*/		regs.R3 = regs.R22;
		/* 82232F40h case    8:*/		return 0x82232F44;
		  /* 82232F44h */ case    9:  		/* lwz R5, <#[R11 + 400]> */
		/* 82232F44h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000190) );
		/* 82232F44h case    9:*/		return 0x82232F48;
		  /* 82232F48h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 82232F48h case   10:*/		if ( 1 ) { regs.LR = 0x82232F4C; return (uint32)regs.CTR; }
		/* 82232F48h case   10:*/		return 0x82232F4C;
	}
	return 0x82232F4C;
} // Block from 82232F20h-82232F4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82232F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232F4C);
		  /* 82232F4Ch */ case    0:  		/* li R3, 1 */
		/* 82232F4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82232F4Ch case    0:*/		return 0x82232F50;
		  /* 82232F50h */ case    1:  		/* addi R1, R1, 176 */
		/* 82232F50h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82232F50h case    1:*/		return 0x82232F54;
		  /* 82232F54h */ case    2:  		/* b -1711300 */
		/* 82232F54h case    2:*/		return 0x82091290;
		/* 82232F54h case    2:*/		return 0x82232F58;
	}
	return 0x82232F58;
} // Block from 82232F4Ch-82232F58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82232F58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232F58);
		  /* 82232F58h */ case    0:  		/* mfspr R12, LR */
		/* 82232F58h case    0:*/		regs.R12 = regs.LR;
		/* 82232F58h case    0:*/		return 0x82232F5C;
		  /* 82232F5Ch */ case    1:  		/* bl -1711380 */
		/* 82232F5Ch case    1:*/		regs.LR = 0x82232F60; return 0x82091248;
		/* 82232F5Ch case    1:*/		return 0x82232F60;
		  /* 82232F60h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82232F60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82232F60h case    2:*/		return 0x82232F64;
		  /* 82232F64h */ case    3:  		/* mr R31, R3 */
		/* 82232F64h case    3:*/		regs.R31 = regs.R3;
		/* 82232F64h case    3:*/		return 0x82232F68;
		  /* 82232F68h */ case    4:  		/* mr R27, R4 */
		/* 82232F68h case    4:*/		regs.R27 = regs.R4;
		/* 82232F68h case    4:*/		return 0x82232F6C;
		  /* 82232F6Ch */ case    5:  		/* mr R29, R5 */
		/* 82232F6Ch case    5:*/		regs.R29 = regs.R5;
		/* 82232F6Ch case    5:*/		return 0x82232F70;
		  /* 82232F70h */ case    6:  		/* mr R28, R6 */
		/* 82232F70h case    6:*/		regs.R28 = regs.R6;
		/* 82232F70h case    6:*/		return 0x82232F74;
		  /* 82232F74h */ case    7:  		/* mr R25, R7 */
		/* 82232F74h case    7:*/		regs.R25 = regs.R7;
		/* 82232F74h case    7:*/		return 0x82232F78;
		  /* 82232F78h */ case    8:  		/* mr R24, R8 */
		/* 82232F78h case    8:*/		regs.R24 = regs.R8;
		/* 82232F78h case    8:*/		return 0x82232F7C;
		  /* 82232F7Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 82232F7Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82232F7Ch case    9:*/		return 0x82232F80;
		  /* 82232F80h */ case   10:  		/* bc 4, CR6_EQ, 36 */
		/* 82232F80h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82232FA4;  }
		/* 82232F80h case   10:*/		return 0x82232F84;
		  /* 82232F84h */ case   11:  		/* lis R11, -32252 */
		/* 82232F84h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82232F84h case   11:*/		return 0x82232F88;
		  /* 82232F88h */ case   12:  		/* lis R10, -32253 */
		/* 82232F88h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82232F88h case   12:*/		return 0x82232F8C;
		  /* 82232F8Ch */ case   13:  		/* lis R9, -32253 */
		/* 82232F8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82232F8Ch case   13:*/		return 0x82232F90;
		  /* 82232F90h */ case   14:  		/* addi R6, R11, 4336 */
		/* 82232F90h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82232F90h case   14:*/		return 0x82232F94;
		  /* 82232F94h */ case   15:  		/* addi R5, R10, 27792 */
		/* 82232F94h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82232F94h case   15:*/		return 0x82232F98;
		  /* 82232F98h */ case   16:  		/* addi R4, R9, 27460 */
		/* 82232F98h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82232F98h case   16:*/		return 0x82232F9C;
		  /* 82232F9Ch */ case   17:  		/* li R7, 3264 */
		/* 82232F9Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xCC0);
		/* 82232F9Ch case   17:*/		return 0x82232FA0;
		  /* 82232FA0h */ case   18:  		/* bl -897944 */
		/* 82232FA0h case   18:*/		regs.LR = 0x82232FA4; return 0x82157C08;
		/* 82232FA0h case   18:*/		return 0x82232FA4;
	}
	return 0x82232FA4;
} // Block from 82232F58h-82232FA4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82232FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232FA4);
		  /* 82232FA4h */ case    0:  		/* cmpwi CR6, R27, -1 */
		/* 82232FA4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0xFFFFFFFF);
		/* 82232FA4h case    0:*/		return 0x82232FA8;
		  /* 82232FA8h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82232FA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82232FB8;  }
		/* 82232FA8h case    1:*/		return 0x82232FAC;
		  /* 82232FACh */ case    2:  		/* li R30, 23 */
		/* 82232FACh case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x17);
		/* 82232FACh case    2:*/		return 0x82232FB0;
		  /* 82232FB0h */ case    3:  		/* li R26, 1 */
		/* 82232FB0h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82232FB0h case    3:*/		return 0x82232FB4;
		  /* 82232FB4h */ case    4:  		/* b 44 */
		/* 82232FB4h case    4:*/		return 0x82232FE0;
		/* 82232FB4h case    4:*/		return 0x82232FB8;
	}
	return 0x82232FB8;
} // Block from 82232FA4h-82232FB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82232FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232FB8);
		  /* 82232FB8h */ case    0:  		/* mr R5, R27 */
		/* 82232FB8h case    0:*/		regs.R5 = regs.R27;
		/* 82232FB8h case    0:*/		return 0x82232FBC;
		  /* 82232FBCh */ case    1:  		/* li R4, 43 */
		/* 82232FBCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 82232FBCh case    1:*/		return 0x82232FC0;
		  /* 82232FC0h */ case    2:  		/* mr R3, R31 */
		/* 82232FC0h case    2:*/		regs.R3 = regs.R31;
		/* 82232FC0h case    2:*/		return 0x82232FC4;
		  /* 82232FC4h */ case    3:  		/* bl -874372 */
		/* 82232FC4h case    3:*/		regs.LR = 0x82232FC8; return 0x8215D840;
		/* 82232FC4h case    3:*/		return 0x82232FC8;
		  /* 82232FC8h */ case    4:  		/* mr R30, R3 */
		/* 82232FC8h case    4:*/		regs.R30 = regs.R3;
		/* 82232FC8h case    4:*/		return 0x82232FCC;
		  /* 82232FCCh */ case    5:  		/* mr R5, R27 */
		/* 82232FCCh case    5:*/		regs.R5 = regs.R27;
		/* 82232FCCh case    5:*/		return 0x82232FD0;
		  /* 82232FD0h */ case    6:  		/* li R4, 44 */
		/* 82232FD0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 82232FD0h case    6:*/		return 0x82232FD4;
		  /* 82232FD4h */ case    7:  		/* mr R3, R31 */
		/* 82232FD4h case    7:*/		regs.R3 = regs.R31;
		/* 82232FD4h case    7:*/		return 0x82232FD8;
		  /* 82232FD8h */ case    8:  		/* bl -874392 */
		/* 82232FD8h case    8:*/		regs.LR = 0x82232FDC; return 0x8215D840;
		/* 82232FD8h case    8:*/		return 0x82232FDC;
		  /* 82232FDCh */ case    9:  		/* mr R26, R3 */
		/* 82232FDCh case    9:*/		regs.R26 = regs.R3;
		/* 82232FDCh case    9:*/		return 0x82232FE0;
	}
	return 0x82232FE0;
} // Block from 82232FB8h-82232FE0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82232FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232FE0);
		  /* 82232FE0h */ case    0:  		/* cmplwi CR6, R28, 1 */
		/* 82232FE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 82232FE0h case    0:*/		return 0x82232FE4;
		  /* 82232FE4h */ case    1:  		/* bc 4, CR6_GT, 24 */
		/* 82232FE4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82232FFC;  }
		/* 82232FE4h case    1:*/		return 0x82232FE8;
		  /* 82232FE8h */ case    2:  		/* li R4, 8 */
		/* 82232FE8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82232FE8h case    2:*/		return 0x82232FEC;
		  /* 82232FECh */ case    3:  		/* mr R3, R28 */
		/* 82232FECh case    3:*/		regs.R3 = regs.R28;
		/* 82232FECh case    3:*/		return 0x82232FF0;
		  /* 82232FF0h */ case    4:  		/* bl -167528 */
		/* 82232FF0h case    4:*/		regs.LR = 0x82232FF4; return 0x8220A188;
		/* 82232FF0h case    4:*/		return 0x82232FF4;
		  /* 82232FF4h */ case    5:  		/* mr R31, R3 */
		/* 82232FF4h case    5:*/		regs.R31 = regs.R3;
		/* 82232FF4h case    5:*/		return 0x82232FF8;
		  /* 82232FF8h */ case    6:  		/* b 8 */
		/* 82232FF8h case    6:*/		return 0x82233000;
		/* 82232FF8h case    6:*/		return 0x82232FFC;
	}
	return 0x82232FFC;
} // Block from 82232FE0h-82232FFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82232FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82232FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82232FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82232FFC);
		  /* 82232FFCh */ case    0:  		/* li R31, 1 */
		/* 82232FFCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82232FFCh case    0:*/		return 0x82233000;
	}
	return 0x82233000;
} // Block from 82232FFCh-82233000h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233000);
		  /* 82233000h */ case    0:  		/* lis R11, -32252 */
		/* 82233000h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233000h case    0:*/		return 0x82233004;
		  /* 82233004h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82233004h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82233004h case    1:*/		return 0x82233008;
		  /* 82233008h */ case    2:  		/* addi R11, R11, 3736 */
		/* 82233008h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xE98);
		/* 82233008h case    2:*/		return 0x8223300C;
		  /* 8223300Ch */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 8223300Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82233030;  }
		/* 8223300Ch case    3:*/		return 0x82233010;
		  /* 82233010h */ case    4:  		/* addi R10, R11, -576 */
		/* 82233010h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFDC0);
		/* 82233010h case    4:*/		return 0x82233014;
		  /* 82233014h */ case    5:  		/* mulli R9, R30, 24 */
		/* 82233014h case    5:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R30,0x18);
		/* 82233014h case    5:*/		return 0x82233018;
		  /* 82233018h */ case    6:  		/* addi R10, R10, 4 */
		/* 82233018h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82233018h case    6:*/		return 0x8223301C;
		  /* 8223301Ch */ case    7:  		/* addi R11, R11, -576 */
		/* 8223301Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFDC0);
		/* 8223301Ch case    7:*/		return 0x82233020;
		  /* 82233020h */ case    8:  		/* lhzx R10, <#[R9 + R10]> */
		/* 82233020h case    8:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82233020h case    8:*/		return 0x82233024;
		  /* 82233024h */ case    9:  		/* stw R10, <#[R29]> */
		/* 82233024h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82233024h case    9:*/		return 0x82233028;
		  /* 82233028h */ case   10:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82233028h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82233028h case   10:*/		return 0x8223302C;
		  /* 8223302Ch */ case   11:  		/* b 24 */
		/* 8223302Ch case   11:*/		return 0x82233044;
		/* 8223302Ch case   11:*/		return 0x82233030;
	}
	return 0x82233030;
} // Block from 82233000h-82233030h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82233030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233030);
		  /* 82233030h */ case    0:  		/* mulli R10, R30, 24 */
		/* 82233030h case    0:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R30,0x18);
		/* 82233030h case    0:*/		return 0x82233034;
		  /* 82233034h */ case    1:  		/* addi R9, R11, 4 */
		/* 82233034h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82233034h case    1:*/		return 0x82233038;
		  /* 82233038h */ case    2:  		/* lhzx R9, <#[R10 + R9]> */
		/* 82233038h case    2:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82233038h case    2:*/		return 0x8223303C;
		  /* 8223303Ch */ case    3:  		/* stw R9, <#[R29]> */
		/* 8223303Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 8223303Ch case    3:*/		return 0x82233040;
	}
	return 0x82233040;
} // Block from 82233030h-82233040h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233040h
// Function '?CompileWithShadowBuffering@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233040);
		  /* 82233040h */ case    0:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82233040h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82233040h case    0:*/		return 0x82233044;
	}
	return 0x82233044;
} // Block from 82233040h-82233044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233044);
		  /* 82233044h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82233044h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82233044h case    0:*/		return 0x82233048;
		  /* 82233048h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 82233048h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82233064;  }
		/* 82233048h case    1:*/		return 0x8223304C;
		  /* 8223304Ch */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8223304Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8223304Ch case    2:*/		return 0x82233050;
		  /* 82233050h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82233050h case    3:*/		if ( regs.CR[6].eq ) { return 0x82233060;  }
		/* 82233050h case    3:*/		return 0x82233054;
		  /* 82233054h */ case    4:  		/* li R11, 1 */
		/* 82233054h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82233054h case    4:*/		return 0x82233058;
		  /* 82233058h */ case    5:  		/* stw R11, <#[R29]> */
		/* 82233058h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82233058h case    5:*/		return 0x8223305C;
		  /* 8223305Ch */ case    6:  		/* b 8 */
		/* 8223305Ch case    6:*/		return 0x82233064;
		/* 8223305Ch case    6:*/		return 0x82233060;
	}
	return 0x82233060;
} // Block from 82233044h-82233060h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82233060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233060);
		  /* 82233060h */ case    0:  		/* stw R26, <#[R29]> */
		/* 82233060h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R29 + 0x00000000) );
		/* 82233060h case    0:*/		return 0x82233064;
	}
	return 0x82233064;
} // Block from 82233060h-82233064h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233064);
		  /* 82233064h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82233064h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82233064h case    0:*/		return 0x82233068;
		  /* 82233068h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 82233068h case    1:*/		if ( regs.CR[6].eq ) { return 0x822330C0;  }
		/* 82233068h case    1:*/		return 0x8223306C;
		  /* 8223306Ch */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 8223306Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8223306Ch case    2:*/		return 0x82233070;
		  /* 82233070h */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 82233070h case    3:*/		if ( regs.CR[6].eq ) { return 0x822330C0;  }
		/* 82233070h case    3:*/		return 0x82233074;
		  /* 82233074h */ case    4:  		/* lis R11, -32216 */
		/* 82233074h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233074h case    4:*/		return 0x82233078;
		  /* 82233078h */ case    5:  		/* lwz R8, <#[R29]> */
		/* 82233078h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 82233078h case    5:*/		return 0x8223307C;
		  /* 8223307Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223307Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223307Ch case    6:*/		return 0x82233080;
		  /* 82233080h */ case    7:  		/* mtspr CTR, R25 */
		/* 82233080h case    7:*/		regs.CTR = regs.R25;
		/* 82233080h case    7:*/		return 0x82233084;
		  /* 82233084h */ case    8:  		/* addi R30, R11, 11160 */
		/* 82233084h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x2B98);
		/* 82233084h case    8:*/		return 0x82233088;
		  /* 82233088h */ case    9:  		/* addi R4, R10, 4444 */
		/* 82233088h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82233088h case    9:*/		return 0x8223308C;
		  /* 8223308Ch */ case   10:  		/* mr R7, R27 */
		/* 8223308Ch case   10:*/		regs.R7 = regs.R27;
		/* 8223308Ch case   10:*/		return 0x82233090;
		  /* 82233090h */ case   11:  		/* li R6, 28 */
		/* 82233090h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1C);
		/* 82233090h case   11:*/		return 0x82233094;
		  /* 82233094h */ case   12:  		/* mr R3, R24 */
		/* 82233094h case   12:*/		regs.R3 = regs.R24;
		/* 82233094h case   12:*/		return 0x82233098;
		  /* 82233098h */ case   13:  		/* lwz R5, <#[R30 + 112]> */
		/* 82233098h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000070) );
		/* 82233098h case   13:*/		return 0x8223309C;
		  /* 8223309Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223309Ch case   14:*/		if ( 1 ) { regs.LR = 0x822330A0; return (uint32)regs.CTR; }
		/* 8223309Ch case   14:*/		return 0x822330A0;
		  /* 822330A0h */ case   15:  		/* lis R11, -32252 */
		/* 822330A0h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822330A0h case   15:*/		return 0x822330A4;
		  /* 822330A4h */ case   16:  		/* mr R7, R31 */
		/* 822330A4h case   16:*/		regs.R7 = regs.R31;
		/* 822330A4h case   16:*/		return 0x822330A8;
		  /* 822330A8h */ case   17:  		/* lwz R5, <#[R30 + 396]> */
		/* 822330A8h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000018C) );
		/* 822330A8h case   17:*/		return 0x822330AC;
		  /* 822330ACh */ case   18:  		/* addi R4, R11, 4320 */
		/* 822330ACh case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10E0);
		/* 822330ACh case   18:*/		return 0x822330B0;
		  /* 822330B0h */ case   19:  		/* mtspr CTR, R25 */
		/* 822330B0h case   19:*/		regs.CTR = regs.R25;
		/* 822330B0h case   19:*/		return 0x822330B4;
		  /* 822330B4h */ case   20:  		/* li R6, 99 */
		/* 822330B4h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x63);
		/* 822330B4h case   20:*/		return 0x822330B8;
		  /* 822330B8h */ case   21:  		/* mr R3, R24 */
		/* 822330B8h case   21:*/		regs.R3 = regs.R24;
		/* 822330B8h case   21:*/		return 0x822330BC;
		  /* 822330BCh */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 822330BCh case   22:*/		if ( 1 ) { regs.LR = 0x822330C0; return (uint32)regs.CTR; }
		/* 822330BCh case   22:*/		return 0x822330C0;
	}
	return 0x822330C0;
} // Block from 82233064h-822330C0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822330C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822330C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822330C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822330C0);
		  /* 822330C0h */ case    0:  		/* li R3, 1 */
		/* 822330C0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822330C0h case    0:*/		return 0x822330C4;
		  /* 822330C4h */ case    1:  		/* addi R1, R1, 160 */
		/* 822330C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822330C4h case    1:*/		return 0x822330C8;
		  /* 822330C8h */ case    2:  		/* b -1711664 */
		/* 822330C8h case    2:*/		return 0x82091298;
		/* 822330C8h case    2:*/		return 0x822330CC;
		  /* 822330CCh */ case    3:  		/* nop */
		/* 822330CCh case    3:*/		cpu::op::nop();
		/* 822330CCh case    3:*/		return 0x822330D0;
	}
	return 0x822330D0;
} // Block from 822330C0h-822330D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822330D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822330D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822330D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822330D0);
		  /* 822330D0h */ case    0:  		/* mfspr R12, LR */
		/* 822330D0h case    0:*/		regs.R12 = regs.LR;
		/* 822330D0h case    0:*/		return 0x822330D4;
		  /* 822330D4h */ case    1:  		/* bl -1711760 */
		/* 822330D4h case    1:*/		regs.LR = 0x822330D8; return 0x82091244;
		/* 822330D4h case    1:*/		return 0x822330D8;
		  /* 822330D8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822330D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822330D8h case    2:*/		return 0x822330DC;
		  /* 822330DCh */ case    3:  		/* mr R30, R5 */
		/* 822330DCh case    3:*/		regs.R30 = regs.R5;
		/* 822330DCh case    3:*/		return 0x822330E0;
		  /* 822330E0h */ case    4:  		/* mr R31, R4 */
		/* 822330E0h case    4:*/		regs.R31 = regs.R4;
		/* 822330E0h case    4:*/		return 0x822330E4;
		  /* 822330E4h */ case    5:  		/* mr R5, R4 */
		/* 822330E4h case    5:*/		regs.R5 = regs.R4;
		/* 822330E4h case    5:*/		return 0x822330E8;
	}
	return 0x822330E8;
} // Block from 822330D0h-822330E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822330E8h
// Function '?CompileGetHOSMode@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@PAHP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822330E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822330E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822330E8);
		  /* 822330E8h */ case    0:  		/* li R4, 82 */
		/* 822330E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x52);
		/* 822330E8h case    0:*/		return 0x822330EC;
		  /* 822330ECh */ case    1:  		/* mr R26, R3 */
		/* 822330ECh case    1:*/		regs.R26 = regs.R3;
		/* 822330ECh case    1:*/		return 0x822330F0;
		  /* 822330F0h */ case    2:  		/* mr R29, R6 */
		/* 822330F0h case    2:*/		regs.R29 = regs.R6;
		/* 822330F0h case    2:*/		return 0x822330F4;
		  /* 822330F4h */ case    3:  		/* mr R25, R7 */
		/* 822330F4h case    3:*/		regs.R25 = regs.R7;
		/* 822330F4h case    3:*/		return 0x822330F8;
		  /* 822330F8h */ case    4:  		/* mr R28, R8 */
		/* 822330F8h case    4:*/		regs.R28 = regs.R8;
		/* 822330F8h case    4:*/		return 0x822330FC;
		  /* 822330FCh */ case    5:  		/* mr R27, R9 */
		/* 822330FCh case    5:*/		regs.R27 = regs.R9;
		/* 822330FCh case    5:*/		return 0x82233100;
		  /* 82233100h */ case    6:  		/* bl -874688 */
		/* 82233100h case    6:*/		regs.LR = 0x82233104; return 0x8215D840;
		/* 82233100h case    6:*/		return 0x82233104;
		  /* 82233104h */ case    7:  		/* mr R24, R3 */
		/* 82233104h case    7:*/		regs.R24 = regs.R3;
		/* 82233104h case    7:*/		return 0x82233108;
		  /* 82233108h */ case    8:  		/* mr R5, R31 */
		/* 82233108h case    8:*/		regs.R5 = regs.R31;
		/* 82233108h case    8:*/		return 0x8223310C;
		  /* 8223310Ch */ case    9:  		/* mr R3, R26 */
		/* 8223310Ch case    9:*/		regs.R3 = regs.R26;
		/* 8223310Ch case    9:*/		return 0x82233110;
		  /* 82233110h */ case   10:  		/* li R4, 83 */
		/* 82233110h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x53);
		/* 82233110h case   10:*/		return 0x82233114;
		  /* 82233114h */ case   11:  		/* bl -874708 */
		/* 82233114h case   11:*/		regs.LR = 0x82233118; return 0x8215D840;
		/* 82233114h case   11:*/		return 0x82233118;
		  /* 82233118h */ case   12:  		/* mr R23, R3 */
		/* 82233118h case   12:*/		regs.R23 = regs.R3;
		/* 82233118h case   12:*/		return 0x8223311C;
		  /* 8223311Ch */ case   13:  		/* mr R5, R31 */
		/* 8223311Ch case   13:*/		regs.R5 = regs.R31;
		/* 8223311Ch case   13:*/		return 0x82233120;
		  /* 82233120h */ case   14:  		/* li R4, 84 */
		/* 82233120h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 82233120h case   14:*/		return 0x82233124;
		  /* 82233124h */ case   15:  		/* mr R3, R26 */
		/* 82233124h case   15:*/		regs.R3 = regs.R26;
		/* 82233124h case   15:*/		return 0x82233128;
		  /* 82233128h */ case   16:  		/* bl -874728 */
		/* 82233128h case   16:*/		regs.LR = 0x8223312C; return 0x8215D840;
		/* 82233128h case   16:*/		return 0x8223312C;
		  /* 8223312Ch */ case   17:  		/* stw R24, <#[R30]> */
		/* 8223312Ch case   17:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x00000000) );
		/* 8223312Ch case   17:*/		return 0x82233130;
		  /* 82233130h */ case   18:  		/* stw R23, <#[R29]> */
		/* 82233130h case   18:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R29 + 0x00000000) );
		/* 82233130h case   18:*/		return 0x82233134;
		  /* 82233134h */ case   19:  		/* mr R10, R3 */
		/* 82233134h case   19:*/		regs.R10 = regs.R3;
		/* 82233134h case   19:*/		return 0x82233138;
		  /* 82233138h */ case   20:  		/* cmplwi CR6, R28, 0 */
		/* 82233138h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233138h case   20:*/		return 0x8223313C;
		  /* 8223313Ch */ case   21:  		/* stw R3, <#[R25]> */
		/* 8223313Ch case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 8223313Ch case   21:*/		return 0x82233140;
		  /* 82233140h */ case   22:  		/* bc 12, CR6_EQ, 60 */
		/* 82233140h case   22:*/		if ( regs.CR[6].eq ) { return 0x8223317C;  }
		/* 82233140h case   22:*/		return 0x82233144;
		  /* 82233144h */ case   23:  		/* cmplwi CR6, R27, 0 */
		/* 82233144h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233144h case   23:*/		return 0x82233148;
		  /* 82233148h */ case   24:  		/* bc 12, CR6_EQ, 52 */
		/* 82233148h case   24:*/		if ( regs.CR[6].eq ) { return 0x8223317C;  }
		/* 82233148h case   24:*/		return 0x8223314C;
		  /* 8223314Ch */ case   25:  		/* lis R11, -32216 */
		/* 8223314Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223314Ch case   25:*/		return 0x82233150;
		  /* 82233150h */ case   26:  		/* lwz R9, <#[R29]> */
		/* 82233150h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82233150h case   26:*/		return 0x82233154;
		  /* 82233154h */ case   27:  		/* lis R7, -32252 */
		/* 82233154h case   27:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 82233154h case   27:*/		return 0x82233158;
		  /* 82233158h */ case   28:  		/* lwz R8, <#[R30]> */
		/* 82233158h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82233158h case   28:*/		return 0x8223315C;
		  /* 8223315Ch */ case   29:  		/* addi R11, R11, 11160 */
		/* 8223315Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223315Ch case   29:*/		return 0x82233160;
		  /* 82233160h */ case   30:  		/* mtspr CTR, R28 */
		/* 82233160h case   30:*/		regs.CTR = regs.R28;
		/* 82233160h case   30:*/		return 0x82233164;
		  /* 82233164h */ case   31:  		/* addi R4, R7, 4640 */
		/* 82233164h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R7,0x1220);
		/* 82233164h case   31:*/		return 0x82233168;
		  /* 82233168h */ case   32:  		/* mr R7, R31 */
		/* 82233168h case   32:*/		regs.R7 = regs.R31;
		/* 82233168h case   32:*/		return 0x8223316C;
		  /* 8223316Ch */ case   33:  		/* li R6, 12 */
		/* 8223316Ch case   33:*/		cpu::op::li<0>(regs,&regs.R6,0xC);
		/* 8223316Ch case   33:*/		return 0x82233170;
		  /* 82233170h */ case   34:  		/* mr R3, R27 */
		/* 82233170h case   34:*/		regs.R3 = regs.R27;
		/* 82233170h case   34:*/		return 0x82233174;
		  /* 82233174h */ case   35:  		/* lwz R5, <#[R11 + 48]> */
		/* 82233174h case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000030) );
		/* 82233174h case   35:*/		return 0x82233178;
		  /* 82233178h */ case   36:  		/* bcctrl 20, CR0_LT */
		/* 82233178h case   36:*/		if ( 1 ) { regs.LR = 0x8223317C; return (uint32)regs.CTR; }
		/* 82233178h case   36:*/		return 0x8223317C;
	}
	return 0x8223317C;
} // Block from 822330E8h-8223317Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 8223317Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223317C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223317C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223317C);
		  /* 8223317Ch */ case    0:  		/* li R3, 1 */
		/* 8223317Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223317Ch case    0:*/		return 0x82233180;
		  /* 82233180h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233180h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233180h case    1:*/		return 0x82233184;
		  /* 82233184h */ case    2:  		/* b -1711856 */
		/* 82233184h case    2:*/		return 0x82091294;
		/* 82233184h case    2:*/		return 0x82233188;
	}
	return 0x82233188;
} // Block from 8223317Ch-82233188h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233188);
		  /* 82233188h */ case    0:  		/* mfspr R12, LR */
		/* 82233188h case    0:*/		regs.R12 = regs.LR;
		/* 82233188h case    0:*/		return 0x8223318C;
		  /* 8223318Ch */ case    1:  		/* bl -1711924 */
		/* 8223318Ch case    1:*/		regs.LR = 0x82233190; return 0x82091258;
		/* 8223318Ch case    1:*/		return 0x82233190;
		  /* 82233190h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233190h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233190h case    2:*/		return 0x82233194;
		  /* 82233194h */ case    3:  		/* mr R31, R3 */
		/* 82233194h case    3:*/		regs.R31 = regs.R3;
		/* 82233194h case    3:*/		return 0x82233198;
		  /* 82233198h */ case    4:  		/* mr R29, R5 */
		/* 82233198h case    4:*/		regs.R29 = regs.R5;
		/* 82233198h case    4:*/		return 0x8223319C;
		  /* 8223319Ch */ case    5:  		/* mr R30, R6 */
		/* 8223319Ch case    5:*/		regs.R30 = regs.R6;
		/* 8223319Ch case    5:*/		return 0x822331A0;
		  /* 822331A0h */ case    6:  		/* mr R28, R7 */
		/* 822331A0h case    6:*/		regs.R28 = regs.R7;
		/* 822331A0h case    6:*/		return 0x822331A4;
		  /* 822331A4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822331A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822331A4h case    7:*/		return 0x822331A8;
		  /* 822331A8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822331A8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822331CC;  }
		/* 822331A8h case    8:*/		return 0x822331AC;
		  /* 822331ACh */ case    9:  		/* lis R11, -32252 */
		/* 822331ACh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822331ACh case    9:*/		return 0x822331B0;
		  /* 822331B0h */ case   10:  		/* lis R10, -32253 */
		/* 822331B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822331B0h case   10:*/		return 0x822331B4;
		  /* 822331B4h */ case   11:  		/* lis R9, -32253 */
		/* 822331B4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822331B4h case   11:*/		return 0x822331B8;
		  /* 822331B8h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822331B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822331B8h case   12:*/		return 0x822331BC;
		  /* 822331BCh */ case   13:  		/* addi R5, R10, 27792 */
		/* 822331BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822331BCh case   13:*/		return 0x822331C0;
		  /* 822331C0h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822331C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822331C0h case   14:*/		return 0x822331C4;
		  /* 822331C4h */ case   15:  		/* li R7, 3379 */
		/* 822331C4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xD33);
		/* 822331C4h case   15:*/		return 0x822331C8;
		  /* 822331C8h */ case   16:  		/* bl -898496 */
		/* 822331C8h case   16:*/		regs.LR = 0x822331CC; return 0x82157C08;
		/* 822331C8h case   16:*/		return 0x822331CC;
	}
	return 0x822331CC;
} // Block from 82233188h-822331CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 822331CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822331CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822331CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822331CC);
		  /* 822331CCh */ case    0:  		/* li R4, 130 */
		/* 822331CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x82);
		/* 822331CCh case    0:*/		return 0x822331D0;
	}
	return 0x822331D0;
} // Block from 822331CCh-822331D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822331D0h
// Function '?CompileGetIntegerConstRegister@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@W4_SSM_COMPILEWITH_SHADER_TYPE@1@HPAHP6AXPAXPBDZZ3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822331D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822331D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822331D0);
		  /* 822331D0h */ case    0:  		/* mr R3, R31 */
		/* 822331D0h case    0:*/		regs.R3 = regs.R31;
		/* 822331D0h case    0:*/		return 0x822331D4;
		  /* 822331D4h */ case    1:  		/* bl -149724 */
		/* 822331D4h case    1:*/		regs.LR = 0x822331D8; return 0x8220E8F8;
		/* 822331D4h case    1:*/		return 0x822331D8;
		  /* 822331D8h */ case    2:  		/* stfs FR1, <#[R29]> */
		/* 822331D8h case    2:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 822331D8h case    2:*/		return 0x822331DC;
		  /* 822331DCh */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 822331DCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822331DCh case    3:*/		return 0x822331E0;
		  /* 822331E0h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 822331E0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8223321C;  }
		/* 822331E0h case    4:*/		return 0x822331E4;
		  /* 822331E4h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 822331E4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822331E4h case    5:*/		return 0x822331E8;
	}
	return 0x822331E8;
} // Block from 822331D0h-822331E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822331E8h
// Function '?CompileGetBooleanConstRegister@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@W4_SSM_COMPILEWITH_SHADER_TYPE@1@HPAHP6AXPAXPBDZZ3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822331E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822331E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822331E8);
		  /* 822331E8h */ case    0:  		/* bc 12, CR6_EQ, 52 */
		/* 822331E8h case    0:*/		if ( regs.CR[6].eq ) { return 0x8223321C;  }
		/* 822331E8h case    0:*/		return 0x822331EC;
		  /* 822331ECh */ case    1:  		/* addi R4, R1, 80 */
		/* 822331ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822331ECh case    1:*/		return 0x822331F0;
		  /* 822331F0h */ case    2:  		/* bl -13200 */
		/* 822331F0h case    2:*/		regs.LR = 0x822331F4; return 0x8222FE60;
		/* 822331F0h case    2:*/		return 0x822331F4;
		  /* 822331F4h */ case    3:  		/* lis R11, -32216 */
		/* 822331F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822331F4h case    3:*/		return 0x822331F8;
		  /* 822331F8h */ case    4:  		/* lis R10, -32252 */
		/* 822331F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822331F8h case    4:*/		return 0x822331FC;
		  /* 822331FCh */ case    5:  		/* mtspr CTR, R30 */
		/* 822331FCh case    5:*/		regs.CTR = regs.R30;
		/* 822331FCh case    5:*/		return 0x82233200;
	}
	return 0x82233200;
} // Block from 822331E8h-82233200h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82233200h
// Function '?CompileGetEdgeStream@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@PAHP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233200);
		  /* 82233200h */ case    0:  		/* addi R11, R11, 11160 */
		/* 82233200h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233200h case    0:*/		return 0x82233204;
		  /* 82233204h */ case    1:  		/* addi R4, R10, 4668 */
		/* 82233204h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233204h case    1:*/		return 0x82233208;
		  /* 82233208h */ case    2:  		/* addi R7, R1, 80 */
		/* 82233208h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233208h case    2:*/		return 0x8223320C;
		  /* 8223320Ch */ case    3:  		/* li R6, 103 */
		/* 8223320Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 8223320Ch case    3:*/		return 0x82233210;
	}
	return 0x82233210;
} // Block from 82233200h-82233210h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233210h
// Function '?CompileGetTextureFormatData@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_SSM_TEXTUREFORMAT_DATA@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233210);
		  /* 82233210h */ case    0:  		/* mr R3, R28 */
		/* 82233210h case    0:*/		regs.R3 = regs.R28;
		/* 82233210h case    0:*/		return 0x82233214;
		  /* 82233214h */ case    1:  		/* lwz R5, <#[R11 + 412]> */
		/* 82233214h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000019C) );
		/* 82233214h case    1:*/		return 0x82233218;
		  /* 82233218h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 82233218h case    2:*/		if ( 1 ) { regs.LR = 0x8223321C; return (uint32)regs.CTR; }
		/* 82233218h case    2:*/		return 0x8223321C;
	}
	return 0x8223321C;
} // Block from 82233210h-8223321Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223321Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223321C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223321C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223321C);
		  /* 8223321Ch */ case    0:  		/* li R3, 1 */
		/* 8223321Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223321Ch case    0:*/		return 0x82233220;
		  /* 82233220h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233220h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233220h case    1:*/		return 0x82233224;
		  /* 82233224h */ case    2:  		/* b -1711996 */
		/* 82233224h case    2:*/		return 0x820912A8;
		/* 82233224h case    2:*/		return 0x82233228;
	}
	return 0x82233228;
} // Block from 8223321Ch-82233228h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233228);
		  /* 82233228h */ case    0:  		/* mfspr R12, LR */
		/* 82233228h case    0:*/		regs.R12 = regs.LR;
		/* 82233228h case    0:*/		return 0x8223322C;
		  /* 8223322Ch */ case    1:  		/* bl -1712084 */
		/* 8223322Ch case    1:*/		regs.LR = 0x82233230; return 0x82091258;
		/* 8223322Ch case    1:*/		return 0x82233230;
		  /* 82233230h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233230h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233230h case    2:*/		return 0x82233234;
		  /* 82233234h */ case    3:  		/* mr R31, R3 */
		/* 82233234h case    3:*/		regs.R31 = regs.R3;
		/* 82233234h case    3:*/		return 0x82233238;
		  /* 82233238h */ case    4:  		/* mr R29, R5 */
		/* 82233238h case    4:*/		regs.R29 = regs.R5;
		/* 82233238h case    4:*/		return 0x8223323C;
		  /* 8223323Ch */ case    5:  		/* mr R30, R6 */
		/* 8223323Ch case    5:*/		regs.R30 = regs.R6;
		/* 8223323Ch case    5:*/		return 0x82233240;
		  /* 82233240h */ case    6:  		/* mr R28, R7 */
		/* 82233240h case    6:*/		regs.R28 = regs.R7;
		/* 82233240h case    6:*/		return 0x82233244;
		  /* 82233244h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82233244h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233244h case    7:*/		return 0x82233248;
		  /* 82233248h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82233248h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8223326C;  }
		/* 82233248h case    8:*/		return 0x8223324C;
		  /* 8223324Ch */ case    9:  		/* lis R11, -32252 */
		/* 8223324Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223324Ch case    9:*/		return 0x82233250;
		  /* 82233250h */ case   10:  		/* lis R10, -32253 */
		/* 82233250h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233250h case   10:*/		return 0x82233254;
		  /* 82233254h */ case   11:  		/* lis R9, -32253 */
		/* 82233254h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233254h case   11:*/		return 0x82233258;
		  /* 82233258h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82233258h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233258h case   12:*/		return 0x8223325C;
		  /* 8223325Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 8223325Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8223325Ch case   13:*/		return 0x82233260;
		  /* 82233260h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82233260h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233260h case   14:*/		return 0x82233264;
		  /* 82233264h */ case   15:  		/* li R7, 3411 */
		/* 82233264h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xD53);
		/* 82233264h case   15:*/		return 0x82233268;
		  /* 82233268h */ case   16:  		/* bl -898656 */
		/* 82233268h case   16:*/		regs.LR = 0x8223326C; return 0x82157C08;
		/* 82233268h case   16:*/		return 0x8223326C;
	}
	return 0x8223326C;
} // Block from 82233228h-8223326Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223326Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223326C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223326C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223326C);
		  /* 8223326Ch */ case    0:  		/* li R4, 129 */
		/* 8223326Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x81);
		/* 8223326Ch case    0:*/		return 0x82233270;
		  /* 82233270h */ case    1:  		/* mr R3, R31 */
		/* 82233270h case    1:*/		regs.R3 = regs.R31;
		/* 82233270h case    1:*/		return 0x82233274;
		  /* 82233274h */ case    2:  		/* bl -149884 */
		/* 82233274h case    2:*/		regs.LR = 0x82233278; return 0x8220E8F8;
		/* 82233274h case    2:*/		return 0x82233278;
		  /* 82233278h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233278h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233278h case    3:*/		return 0x8223327C;
		  /* 8223327Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8223327Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223327Ch case    4:*/		return 0x82233280;
		  /* 82233280h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233280h case    5:*/		if ( regs.CR[6].eq ) { return 0x822332BC;  }
		/* 82233280h case    5:*/		return 0x82233284;
		  /* 82233284h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233284h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233284h case    6:*/		return 0x82233288;
		  /* 82233288h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233288h case    7:*/		if ( regs.CR[6].eq ) { return 0x822332BC;  }
		/* 82233288h case    7:*/		return 0x8223328C;
		  /* 8223328Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 8223328Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223328Ch case    8:*/		return 0x82233290;
		  /* 82233290h */ case    9:  		/* bl -13360 */
		/* 82233290h case    9:*/		regs.LR = 0x82233294; return 0x8222FE60;
		/* 82233290h case    9:*/		return 0x82233294;
		  /* 82233294h */ case   10:  		/* lis R11, -32216 */
		/* 82233294h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233294h case   10:*/		return 0x82233298;
		  /* 82233298h */ case   11:  		/* lis R10, -32252 */
		/* 82233298h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233298h case   11:*/		return 0x8223329C;
		  /* 8223329Ch */ case   12:  		/* mtspr CTR, R30 */
		/* 8223329Ch case   12:*/		regs.CTR = regs.R30;
		/* 8223329Ch case   12:*/		return 0x822332A0;
		  /* 822332A0h */ case   13:  		/* addi R11, R11, 11160 */
		/* 822332A0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822332A0h case   13:*/		return 0x822332A4;
		  /* 822332A4h */ case   14:  		/* addi R4, R10, 4668 */
		/* 822332A4h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 822332A4h case   14:*/		return 0x822332A8;
		  /* 822332A8h */ case   15:  		/* addi R7, R1, 80 */
		/* 822332A8h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 822332A8h case   15:*/		return 0x822332AC;
		  /* 822332ACh */ case   16:  		/* li R6, 104 */
		/* 822332ACh case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x68);
		/* 822332ACh case   16:*/		return 0x822332B0;
		  /* 822332B0h */ case   17:  		/* mr R3, R28 */
		/* 822332B0h case   17:*/		regs.R3 = regs.R28;
		/* 822332B0h case   17:*/		return 0x822332B4;
		  /* 822332B4h */ case   18:  		/* lwz R5, <#[R11 + 416]> */
		/* 822332B4h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000001A0) );
		/* 822332B4h case   18:*/		return 0x822332B8;
		  /* 822332B8h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 822332B8h case   19:*/		if ( 1 ) { regs.LR = 0x822332BC; return (uint32)regs.CTR; }
		/* 822332B8h case   19:*/		return 0x822332BC;
	}
	return 0x822332BC;
} // Block from 8223326Ch-822332BCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 822332BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822332BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822332BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822332BC);
		  /* 822332BCh */ case    0:  		/* li R3, 1 */
		/* 822332BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822332BCh case    0:*/		return 0x822332C0;
		  /* 822332C0h */ case    1:  		/* addi R1, R1, 160 */
		/* 822332C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822332C0h case    1:*/		return 0x822332C4;
		  /* 822332C4h */ case    2:  		/* b -1712156 */
		/* 822332C4h case    2:*/		return 0x820912A8;
		/* 822332C4h case    2:*/		return 0x822332C8;
	}
	return 0x822332C8;
} // Block from 822332BCh-822332C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822332C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822332C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822332C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822332C8);
		  /* 822332C8h */ case    0:  		/* lis R11, -32252 */
		/* 822332C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822332C8h case    0:*/		return 0x822332CC;
		  /* 822332CCh */ case    1:  		/* li R3, 1 */
		/* 822332CCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822332CCh case    1:*/		return 0x822332D0;
		  /* 822332D0h */ case    2:  		/* lfs FR0, <#[R11 + 4684]> */
		/* 822332D0h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000124C) );
		/* 822332D0h case    2:*/		return 0x822332D4;
		  /* 822332D4h */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 822332D4h case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 822332D4h case    3:*/		return 0x822332D8;
		  /* 822332D8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 822332D8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822332D8h case    4:*/		return 0x822332DC;
	}
	return 0x822332DC;
} // Block from 822332C8h-822332DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822332DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822332DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822332DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822332DC);
		  /* 822332DCh */ case    0:  		/* nop */
		/* 822332DCh case    0:*/		cpu::op::nop();
		/* 822332DCh case    0:*/		return 0x822332E0;
	}
	return 0x822332E0;
} // Block from 822332DCh-822332E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822332E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822332E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822332E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822332E0);
		  /* 822332E0h */ case    0:  		/* mfspr R12, LR */
		/* 822332E0h case    0:*/		regs.R12 = regs.LR;
		/* 822332E0h case    0:*/		return 0x822332E4;
		  /* 822332E4h */ case    1:  		/* bl -1712272 */
		/* 822332E4h case    1:*/		regs.LR = 0x822332E8; return 0x82091254;
		/* 822332E4h case    1:*/		return 0x822332E8;
		  /* 822332E8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 822332E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 822332E8h case    2:*/		return 0x822332EC;
		  /* 822332ECh */ case    3:  		/* mr R31, R3 */
		/* 822332ECh case    3:*/		regs.R31 = regs.R3;
		/* 822332ECh case    3:*/		return 0x822332F0;
		  /* 822332F0h */ case    4:  		/* mr R30, R5 */
		/* 822332F0h case    4:*/		regs.R30 = regs.R5;
		/* 822332F0h case    4:*/		return 0x822332F4;
		  /* 822332F4h */ case    5:  		/* mr R28, R6 */
		/* 822332F4h case    5:*/		regs.R28 = regs.R6;
		/* 822332F4h case    5:*/		return 0x822332F8;
		  /* 822332F8h */ case    6:  		/* mr R27, R7 */
		/* 822332F8h case    6:*/		regs.R27 = regs.R7;
		/* 822332F8h case    6:*/		return 0x822332FC;
		  /* 822332FCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822332FCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822332FCh case    7:*/		return 0x82233300;
	}
	return 0x82233300;
} // Block from 822332E0h-82233300h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82233300h
// Function '?CompileGetVertexFormatData@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_SSM_VERTEXFORMAT_DATA@1@PAU_SSM_REGISTRY@1@P6AXPAXPBDZZ3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233300);
		  /* 82233300h */ case    0:  		/* bc 4, CR6_EQ, 36 */
		/* 82233300h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82233324;  }
		/* 82233300h case    0:*/		return 0x82233304;
		  /* 82233304h */ case    1:  		/* lis R11, -32252 */
		/* 82233304h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233304h case    1:*/		return 0x82233308;
		  /* 82233308h */ case    2:  		/* lis R10, -32253 */
		/* 82233308h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233308h case    2:*/		return 0x8223330C;
		  /* 8223330Ch */ case    3:  		/* lis R9, -32253 */
		/* 8223330Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223330Ch case    3:*/		return 0x82233310;
		  /* 82233310h */ case    4:  		/* addi R6, R11, 4336 */
		/* 82233310h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233310h case    4:*/		return 0x82233314;
		  /* 82233314h */ case    5:  		/* addi R5, R10, 27792 */
		/* 82233314h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233314h case    5:*/		return 0x82233318;
		  /* 82233318h */ case    6:  		/* addi R4, R9, 27460 */
		/* 82233318h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233318h case    6:*/		return 0x8223331C;
		  /* 8223331Ch */ case    7:  		/* li R7, 3457 */
		/* 8223331Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xD81);
		/* 8223331Ch case    7:*/		return 0x82233320;
		  /* 82233320h */ case    8:  		/* bl -898840 */
		/* 82233320h case    8:*/		regs.LR = 0x82233324; return 0x82157C08;
		/* 82233320h case    8:*/		return 0x82233324;
	}
	return 0x82233324;
} // Block from 82233300h-82233324h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82233324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233324);
		  /* 82233324h */ case    0:  		/* li R4, 580 */
		/* 82233324h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x244);
		/* 82233324h case    0:*/		return 0x82233328;
		  /* 82233328h */ case    1:  		/* mr R3, R31 */
		/* 82233328h case    1:*/		regs.R3 = regs.R31;
		/* 82233328h case    1:*/		return 0x8223332C;
		  /* 8223332Ch */ case    2:  		/* bl -876060 */
		/* 8223332Ch case    2:*/		regs.LR = 0x82233330; return 0x8215D510;
		/* 8223332Ch case    2:*/		return 0x82233330;
		  /* 82233330h */ case    3:  		/* mr R29, R3 */
		/* 82233330h case    3:*/		regs.R29 = regs.R3;
		/* 82233330h case    3:*/		return 0x82233334;
		  /* 82233334h */ case    4:  		/* li R4, 581 */
		/* 82233334h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x245);
		/* 82233334h case    4:*/		return 0x82233338;
		  /* 82233338h */ case    5:  		/* mr R3, R31 */
		/* 82233338h case    5:*/		regs.R3 = regs.R31;
		/* 82233338h case    5:*/		return 0x8223333C;
		  /* 8223333Ch */ case    6:  		/* bl -876076 */
		/* 8223333Ch case    6:*/		regs.LR = 0x82233340; return 0x8215D510;
		/* 8223333Ch case    6:*/		return 0x82233340;
		  /* 82233340h */ case    7:  		/* cmplwi CR6, R3, 1 */
		/* 82233340h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82233340h case    7:*/		return 0x82233344;
		  /* 82233344h */ case    8:  		/* bc 4, CR6_EQ, 44 */
		/* 82233344h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82233370;  }
		/* 82233344h case    8:*/		return 0x82233348;
		  /* 82233348h */ case    9:  		/* addi R11, R29, -1 */
		/* 82233348h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 82233348h case    9:*/		return 0x8223334C;
		  /* 8223334Ch */ case   10:  		/* lis R10, -32252 */
		/* 8223334Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223334Ch case   10:*/		return 0x82233350;
		  /* 82233350h */ case   11:  		/* rldicl R11, R11, 0, 32 */
		/* 82233350h case   11:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 82233350h case   11:*/		return 0x82233354;
		  /* 82233354h */ case   12:  		/* std R11, <#[R1 + 80]> */
		/* 82233354h case   12:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82233354h case   12:*/		return 0x82233358;
		  /* 82233358h */ case   13:  		/* lfd FR0, <#[R1 + 80]> */
		/* 82233358h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82233358h case   13:*/		return 0x8223335C;
		  /* 8223335Ch */ case   14:  		/* fcfid FR0, FR0 */
		/* 8223335Ch case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8223335Ch case   14:*/		return 0x82233360;
		  /* 82233360h */ case   15:  		/* frsp FR13, FR0 */
		/* 82233360h case   15:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR0);
		/* 82233360h case   15:*/		return 0x82233364;
		  /* 82233364h */ case   16:  		/* lfs FR0, <#[R10 + 4688]> */
		/* 82233364h case   16:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00001250) );
		/* 82233364h case   16:*/		return 0x82233368;
		  /* 82233368h */ case   17:  		/* fadds FR0, FR13, FR0 */
		/* 82233368h case   17:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 82233368h case   17:*/		return 0x8223336C;
		  /* 8223336Ch */ case   18:  		/* b 12 */
		/* 8223336Ch case   18:*/		return 0x82233378;
		/* 8223336Ch case   18:*/		return 0x82233370;
	}
	return 0x82233370;
} // Block from 82233324h-82233370h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82233370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233370);
		  /* 82233370h */ case    0:  		/* lis R11, -32252 */
		/* 82233370h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233370h case    0:*/		return 0x82233374;
		  /* 82233374h */ case    1:  		/* lfs FR0, <#[R11 + 4684]> */
		/* 82233374h case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000124C) );
		/* 82233374h case    1:*/		return 0x82233378;
	}
	return 0x82233378;
} // Block from 82233370h-82233378h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82233378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233378);
		  /* 82233378h */ case    0:  		/* stfs FR0, <#[R30]> */
		/* 82233378h case    0:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R30 + 0x00000000) );
		/* 82233378h case    0:*/		return 0x8223337C;
		  /* 8223337Ch */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8223337Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223337Ch case    1:*/		return 0x82233380;
		  /* 82233380h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82233380h case    2:*/		if ( regs.CR[6].eq ) { return 0x822333C0;  }
		/* 82233380h case    2:*/		return 0x82233384;
		  /* 82233384h */ case    3:  		/* cmplwi CR6, R27, 0 */
		/* 82233384h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233384h case    3:*/		return 0x82233388;
		  /* 82233388h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 82233388h case    4:*/		if ( regs.CR[6].eq ) { return 0x822333C0;  }
		/* 82233388h case    4:*/		return 0x8223338C;
		  /* 8223338Ch */ case    5:  		/* addi R4, R1, 96 */
		/* 8223338Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8223338Ch case    5:*/		return 0x82233390;
		  /* 82233390h */ case    6:  		/* fmr FR1, FR0 */
		/* 82233390h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 82233390h case    6:*/		return 0x82233394;
		  /* 82233394h */ case    7:  		/* bl -13620 */
		/* 82233394h case    7:*/		regs.LR = 0x82233398; return 0x8222FE60;
		/* 82233394h case    7:*/		return 0x82233398;
		  /* 82233398h */ case    8:  		/* lis R11, -32216 */
		/* 82233398h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233398h case    8:*/		return 0x8223339C;
		  /* 8223339Ch */ case    9:  		/* lis R10, -32252 */
		/* 8223339Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223339Ch case    9:*/		return 0x822333A0;
		  /* 822333A0h */ case   10:  		/* mtspr CTR, R28 */
		/* 822333A0h case   10:*/		regs.CTR = regs.R28;
		/* 822333A0h case   10:*/		return 0x822333A4;
		  /* 822333A4h */ case   11:  		/* addi R11, R11, 11160 */
		/* 822333A4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822333A4h case   11:*/		return 0x822333A8;
		  /* 822333A8h */ case   12:  		/* addi R4, R10, 4668 */
		/* 822333A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 822333A8h case   12:*/		return 0x822333AC;
		  /* 822333ACh */ case   13:  		/* addi R7, R1, 96 */
		/* 822333ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 822333ACh case   13:*/		return 0x822333B0;
		  /* 822333B0h */ case   14:  		/* li R6, 67 */
		/* 822333B0h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x43);
		/* 822333B0h case   14:*/		return 0x822333B4;
		  /* 822333B4h */ case   15:  		/* mr R3, R27 */
		/* 822333B4h case   15:*/		regs.R3 = regs.R27;
		/* 822333B4h case   15:*/		return 0x822333B8;
		  /* 822333B8h */ case   16:  		/* lwz R5, <#[R11 + 268]> */
		/* 822333B8h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000010C) );
		/* 822333B8h case   16:*/		return 0x822333BC;
		  /* 822333BCh */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 822333BCh case   17:*/		if ( 1 ) { regs.LR = 0x822333C0; return (uint32)regs.CTR; }
		/* 822333BCh case   17:*/		return 0x822333C0;
	}
	return 0x822333C0;
} // Block from 82233378h-822333C0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822333C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822333C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822333C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822333C0);
		  /* 822333C0h */ case    0:  		/* li R3, 1 */
		/* 822333C0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822333C0h case    0:*/		return 0x822333C4;
		  /* 822333C4h */ case    1:  		/* addi R1, R1, 176 */
		/* 822333C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 822333C4h case    1:*/		return 0x822333C8;
		  /* 822333C8h */ case    2:  		/* b -1712420 */
		/* 822333C8h case    2:*/		return 0x820912A4;
		/* 822333C8h case    2:*/		return 0x822333CC;
		  /* 822333CCh */ case    3:  		/* nop */
		/* 822333CCh case    3:*/		cpu::op::nop();
		/* 822333CCh case    3:*/		return 0x822333D0;
	}
	return 0x822333D0;
} // Block from 822333C0h-822333D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822333D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822333D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822333D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822333D0);
		  /* 822333D0h */ case    0:  		/* lis R11, -32252 */
		/* 822333D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822333D0h case    0:*/		return 0x822333D4;
		  /* 822333D4h */ case    1:  		/* li R3, 1 */
		/* 822333D4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822333D4h case    1:*/		return 0x822333D8;
		  /* 822333D8h */ case    2:  		/* lfs FR0, <#[R11 + 4692]> */
		/* 822333D8h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001254) );
		/* 822333D8h case    2:*/		return 0x822333DC;
		  /* 822333DCh */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 822333DCh case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 822333DCh case    3:*/		return 0x822333E0;
		  /* 822333E0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 822333E0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822333E0h case    4:*/		return 0x822333E4;
	}
	return 0x822333E4;
} // Block from 822333D0h-822333E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822333E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822333E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822333E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822333E4);
		  /* 822333E4h */ case    0:  		/* nop */
		/* 822333E4h case    0:*/		cpu::op::nop();
		/* 822333E4h case    0:*/		return 0x822333E8;
	}
	return 0x822333E8;
} // Block from 822333E4h-822333E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822333E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822333E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822333E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822333E8);
		  /* 822333E8h */ case    0:  		/* mfspr R12, LR */
		/* 822333E8h case    0:*/		regs.R12 = regs.LR;
		/* 822333E8h case    0:*/		return 0x822333EC;
		  /* 822333ECh */ case    1:  		/* bl -1712532 */
		/* 822333ECh case    1:*/		regs.LR = 0x822333F0; return 0x82091258;
		/* 822333ECh case    1:*/		return 0x822333F0;
		  /* 822333F0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822333F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822333F0h case    2:*/		return 0x822333F4;
		  /* 822333F4h */ case    3:  		/* mr R31, R3 */
		/* 822333F4h case    3:*/		regs.R31 = regs.R3;
		/* 822333F4h case    3:*/		return 0x822333F8;
		  /* 822333F8h */ case    4:  		/* mr R29, R5 */
		/* 822333F8h case    4:*/		regs.R29 = regs.R5;
		/* 822333F8h case    4:*/		return 0x822333FC;
		  /* 822333FCh */ case    5:  		/* mr R30, R6 */
		/* 822333FCh case    5:*/		regs.R30 = regs.R6;
		/* 822333FCh case    5:*/		return 0x82233400;
		  /* 82233400h */ case    6:  		/* mr R28, R7 */
		/* 82233400h case    6:*/		regs.R28 = regs.R7;
		/* 82233400h case    6:*/		return 0x82233404;
		  /* 82233404h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82233404h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233404h case    7:*/		return 0x82233408;
		  /* 82233408h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82233408h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8223342C;  }
		/* 82233408h case    8:*/		return 0x8223340C;
		  /* 8223340Ch */ case    9:  		/* lis R11, -32252 */
		/* 8223340Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223340Ch case    9:*/		return 0x82233410;
		  /* 82233410h */ case   10:  		/* lis R10, -32253 */
		/* 82233410h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233410h case   10:*/		return 0x82233414;
		  /* 82233414h */ case   11:  		/* lis R9, -32253 */
		/* 82233414h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233414h case   11:*/		return 0x82233418;
		  /* 82233418h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82233418h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233418h case   12:*/		return 0x8223341C;
		  /* 8223341Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 8223341Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8223341Ch case   13:*/		return 0x82233420;
		  /* 82233420h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82233420h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233420h case   14:*/		return 0x82233424;
		  /* 82233424h */ case   15:  		/* li R7, 3516 */
		/* 82233424h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xDBC);
		/* 82233424h case   15:*/		return 0x82233428;
		  /* 82233428h */ case   16:  		/* bl -899104 */
		/* 82233428h case   16:*/		regs.LR = 0x8223342C; return 0x82157C08;
		/* 82233428h case   16:*/		return 0x8223342C;
	}
	return 0x8223342C;
} // Block from 822333E8h-8223342Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223342Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223342C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223342C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223342C);
		  /* 8223342Ch */ case    0:  		/* li R4, 1000 */
		/* 8223342Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3E8);
		/* 8223342Ch case    0:*/		return 0x82233430;
		  /* 82233430h */ case    1:  		/* mr R3, R31 */
		/* 82233430h case    1:*/		regs.R3 = regs.R31;
		/* 82233430h case    1:*/		return 0x82233434;
		  /* 82233434h */ case    2:  		/* bl -150332 */
		/* 82233434h case    2:*/		regs.LR = 0x82233438; return 0x8220E8F8;
		/* 82233434h case    2:*/		return 0x82233438;
		  /* 82233438h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233438h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233438h case    3:*/		return 0x8223343C;
		  /* 8223343Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8223343Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223343Ch case    4:*/		return 0x82233440;
		  /* 82233440h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233440h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223347C;  }
		/* 82233440h case    5:*/		return 0x82233444;
		  /* 82233444h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233444h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233444h case    6:*/		return 0x82233448;
		  /* 82233448h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233448h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223347C;  }
		/* 82233448h case    7:*/		return 0x8223344C;
		  /* 8223344Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 8223344Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223344Ch case    8:*/		return 0x82233450;
		  /* 82233450h */ case    9:  		/* bl -13808 */
		/* 82233450h case    9:*/		regs.LR = 0x82233454; return 0x8222FE60;
		/* 82233450h case    9:*/		return 0x82233454;
		  /* 82233454h */ case   10:  		/* lis R11, -32216 */
		/* 82233454h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233454h case   10:*/		return 0x82233458;
		  /* 82233458h */ case   11:  		/* lis R10, -32252 */
		/* 82233458h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233458h case   11:*/		return 0x8223345C;
		  /* 8223345Ch */ case   12:  		/* mtspr CTR, R30 */
		/* 8223345Ch case   12:*/		regs.CTR = regs.R30;
		/* 8223345Ch case   12:*/		return 0x82233460;
		  /* 82233460h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82233460h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233460h case   13:*/		return 0x82233464;
		  /* 82233464h */ case   14:  		/* addi R4, R10, 4668 */
		/* 82233464h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233464h case   14:*/		return 0x82233468;
		  /* 82233468h */ case   15:  		/* addi R7, R1, 80 */
		/* 82233468h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233468h case   15:*/		return 0x8223346C;
		  /* 8223346Ch */ case   16:  		/* li R6, 9 */
		/* 8223346Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x9);
		/* 8223346Ch case   16:*/		return 0x82233470;
		  /* 82233470h */ case   17:  		/* mr R3, R28 */
		/* 82233470h case   17:*/		regs.R3 = regs.R28;
		/* 82233470h case   17:*/		return 0x82233474;
		  /* 82233474h */ case   18:  		/* lwz R5, <#[R11 + 36]> */
		/* 82233474h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000024) );
		/* 82233474h case   18:*/		return 0x82233478;
		  /* 82233478h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82233478h case   19:*/		if ( 1 ) { regs.LR = 0x8223347C; return (uint32)regs.CTR; }
		/* 82233478h case   19:*/		return 0x8223347C;
	}
	return 0x8223347C;
} // Block from 8223342Ch-8223347Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223347Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223347C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223347C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223347C);
		  /* 8223347Ch */ case    0:  		/* li R3, 1 */
		/* 8223347Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223347Ch case    0:*/		return 0x82233480;
		  /* 82233480h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233480h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233480h case    1:*/		return 0x82233484;
		  /* 82233484h */ case    2:  		/* b -1712604 */
		/* 82233484h case    2:*/		return 0x820912A8;
		/* 82233484h case    2:*/		return 0x82233488;
	}
	return 0x82233488;
} // Block from 8223347Ch-82233488h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233488);
		  /* 82233488h */ case    0:  		/* mfspr R12, LR */
		/* 82233488h case    0:*/		regs.R12 = regs.LR;
		/* 82233488h case    0:*/		return 0x8223348C;
		  /* 8223348Ch */ case    1:  		/* bl -1712692 */
		/* 8223348Ch case    1:*/		regs.LR = 0x82233490; return 0x82091258;
		/* 8223348Ch case    1:*/		return 0x82233490;
		  /* 82233490h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233490h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233490h case    2:*/		return 0x82233494;
		  /* 82233494h */ case    3:  		/* mr R31, R3 */
		/* 82233494h case    3:*/		regs.R31 = regs.R3;
		/* 82233494h case    3:*/		return 0x82233498;
		  /* 82233498h */ case    4:  		/* mr R29, R5 */
		/* 82233498h case    4:*/		regs.R29 = regs.R5;
		/* 82233498h case    4:*/		return 0x8223349C;
		  /* 8223349Ch */ case    5:  		/* mr R30, R6 */
		/* 8223349Ch case    5:*/		regs.R30 = regs.R6;
		/* 8223349Ch case    5:*/		return 0x822334A0;
		  /* 822334A0h */ case    6:  		/* mr R28, R7 */
		/* 822334A0h case    6:*/		regs.R28 = regs.R7;
		/* 822334A0h case    6:*/		return 0x822334A4;
		  /* 822334A4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 822334A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822334A4h case    7:*/		return 0x822334A8;
		  /* 822334A8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 822334A8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822334CC;  }
		/* 822334A8h case    8:*/		return 0x822334AC;
		  /* 822334ACh */ case    9:  		/* lis R11, -32252 */
		/* 822334ACh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822334ACh case    9:*/		return 0x822334B0;
		  /* 822334B0h */ case   10:  		/* lis R10, -32253 */
		/* 822334B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822334B0h case   10:*/		return 0x822334B4;
		  /* 822334B4h */ case   11:  		/* lis R9, -32253 */
		/* 822334B4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822334B4h case   11:*/		return 0x822334B8;
		  /* 822334B8h */ case   12:  		/* addi R6, R11, 4336 */
		/* 822334B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822334B8h case   12:*/		return 0x822334BC;
		  /* 822334BCh */ case   13:  		/* addi R5, R10, 27792 */
		/* 822334BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822334BCh case   13:*/		return 0x822334C0;
		  /* 822334C0h */ case   14:  		/* addi R4, R9, 27460 */
		/* 822334C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822334C0h case   14:*/		return 0x822334C4;
		  /* 822334C4h */ case   15:  		/* li R7, 3546 */
		/* 822334C4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xDDA);
		/* 822334C4h case   15:*/		return 0x822334C8;
		  /* 822334C8h */ case   16:  		/* bl -899264 */
		/* 822334C8h case   16:*/		regs.LR = 0x822334CC; return 0x82157C08;
		/* 822334C8h case   16:*/		return 0x822334CC;
	}
	return 0x822334CC;
} // Block from 82233488h-822334CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 822334CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822334CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822334CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822334CC);
		  /* 822334CCh */ case    0:  		/* li R4, 1001 */
		/* 822334CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3E9);
		/* 822334CCh case    0:*/		return 0x822334D0;
		  /* 822334D0h */ case    1:  		/* mr R3, R31 */
		/* 822334D0h case    1:*/		regs.R3 = regs.R31;
		/* 822334D0h case    1:*/		return 0x822334D4;
		  /* 822334D4h */ case    2:  		/* bl -150492 */
		/* 822334D4h case    2:*/		regs.LR = 0x822334D8; return 0x8220E8F8;
		/* 822334D4h case    2:*/		return 0x822334D8;
		  /* 822334D8h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 822334D8h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 822334D8h case    3:*/		return 0x822334DC;
		  /* 822334DCh */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 822334DCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822334DCh case    4:*/		return 0x822334E0;
		  /* 822334E0h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 822334E0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223351C;  }
		/* 822334E0h case    5:*/		return 0x822334E4;
		  /* 822334E4h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 822334E4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822334E4h case    6:*/		return 0x822334E8;
		  /* 822334E8h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 822334E8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223351C;  }
		/* 822334E8h case    7:*/		return 0x822334EC;
		  /* 822334ECh */ case    8:  		/* addi R4, R1, 80 */
		/* 822334ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822334ECh case    8:*/		return 0x822334F0;
		  /* 822334F0h */ case    9:  		/* bl -13968 */
		/* 822334F0h case    9:*/		regs.LR = 0x822334F4; return 0x8222FE60;
		/* 822334F0h case    9:*/		return 0x822334F4;
		  /* 822334F4h */ case   10:  		/* lis R11, -32216 */
		/* 822334F4h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822334F4h case   10:*/		return 0x822334F8;
		  /* 822334F8h */ case   11:  		/* lis R10, -32252 */
		/* 822334F8h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822334F8h case   11:*/		return 0x822334FC;
		  /* 822334FCh */ case   12:  		/* mtspr CTR, R30 */
		/* 822334FCh case   12:*/		regs.CTR = regs.R30;
		/* 822334FCh case   12:*/		return 0x82233500;
		  /* 82233500h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82233500h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233500h case   13:*/		return 0x82233504;
		  /* 82233504h */ case   14:  		/* addi R4, R10, 4668 */
		/* 82233504h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233504h case   14:*/		return 0x82233508;
		  /* 82233508h */ case   15:  		/* addi R7, R1, 80 */
		/* 82233508h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233508h case   15:*/		return 0x8223350C;
		  /* 8223350Ch */ case   16:  		/* li R6, 69 */
		/* 8223350Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x45);
		/* 8223350Ch case   16:*/		return 0x82233510;
		  /* 82233510h */ case   17:  		/* mr R3, R28 */
		/* 82233510h case   17:*/		regs.R3 = regs.R28;
		/* 82233510h case   17:*/		return 0x82233514;
		  /* 82233514h */ case   18:  		/* lwz R5, <#[R11 + 276]> */
		/* 82233514h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000114) );
		/* 82233514h case   18:*/		return 0x82233518;
		  /* 82233518h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82233518h case   19:*/		if ( 1 ) { regs.LR = 0x8223351C; return (uint32)regs.CTR; }
		/* 82233518h case   19:*/		return 0x8223351C;
	}
	return 0x8223351C;
} // Block from 822334CCh-8223351Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223351Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223351C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223351C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223351C);
		  /* 8223351Ch */ case    0:  		/* li R3, 1 */
		/* 8223351Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223351Ch case    0:*/		return 0x82233520;
		  /* 82233520h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233520h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233520h case    1:*/		return 0x82233524;
		  /* 82233524h */ case    2:  		/* b -1712764 */
		/* 82233524h case    2:*/		return 0x820912A8;
		/* 82233524h case    2:*/		return 0x82233528;
	}
	return 0x82233528;
} // Block from 8223351Ch-82233528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233528);
		  /* 82233528h */ case    0:  		/* mfspr R12, LR */
		/* 82233528h case    0:*/		regs.R12 = regs.LR;
		/* 82233528h case    0:*/		return 0x8223352C;
		  /* 8223352Ch */ case    1:  		/* bl -1712852 */
		/* 8223352Ch case    1:*/		regs.LR = 0x82233530; return 0x82091258;
		/* 8223352Ch case    1:*/		return 0x82233530;
		  /* 82233530h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233530h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233530h case    2:*/		return 0x82233534;
		  /* 82233534h */ case    3:  		/* mr R31, R3 */
		/* 82233534h case    3:*/		regs.R31 = regs.R3;
		/* 82233534h case    3:*/		return 0x82233538;
		  /* 82233538h */ case    4:  		/* mr R29, R5 */
		/* 82233538h case    4:*/		regs.R29 = regs.R5;
		/* 82233538h case    4:*/		return 0x8223353C;
		  /* 8223353Ch */ case    5:  		/* mr R30, R6 */
		/* 8223353Ch case    5:*/		regs.R30 = regs.R6;
		/* 8223353Ch case    5:*/		return 0x82233540;
		  /* 82233540h */ case    6:  		/* mr R28, R7 */
		/* 82233540h case    6:*/		regs.R28 = regs.R7;
		/* 82233540h case    6:*/		return 0x82233544;
		  /* 82233544h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82233544h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233544h case    7:*/		return 0x82233548;
		  /* 82233548h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82233548h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8223356C;  }
		/* 82233548h case    8:*/		return 0x8223354C;
		  /* 8223354Ch */ case    9:  		/* lis R11, -32252 */
		/* 8223354Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223354Ch case    9:*/		return 0x82233550;
		  /* 82233550h */ case   10:  		/* lis R10, -32253 */
		/* 82233550h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233550h case   10:*/		return 0x82233554;
		  /* 82233554h */ case   11:  		/* lis R9, -32253 */
		/* 82233554h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233554h case   11:*/		return 0x82233558;
		  /* 82233558h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82233558h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233558h case   12:*/		return 0x8223355C;
		  /* 8223355Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 8223355Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8223355Ch case   13:*/		return 0x82233560;
		  /* 82233560h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82233560h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233560h case   14:*/		return 0x82233564;
		  /* 82233564h */ case   15:  		/* li R7, 3577 */
		/* 82233564h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xDF9);
		/* 82233564h case   15:*/		return 0x82233568;
		  /* 82233568h */ case   16:  		/* bl -899424 */
		/* 82233568h case   16:*/		regs.LR = 0x8223356C; return 0x82157C08;
		/* 82233568h case   16:*/		return 0x8223356C;
	}
	return 0x8223356C;
} // Block from 82233528h-8223356Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223356Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223356C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223356C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223356C);
		  /* 8223356Ch */ case    0:  		/* li R4, 1002 */
		/* 8223356Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3EA);
		/* 8223356Ch case    0:*/		return 0x82233570;
		  /* 82233570h */ case    1:  		/* mr R3, R31 */
		/* 82233570h case    1:*/		regs.R3 = regs.R31;
		/* 82233570h case    1:*/		return 0x82233574;
		  /* 82233574h */ case    2:  		/* bl -150652 */
		/* 82233574h case    2:*/		regs.LR = 0x82233578; return 0x8220E8F8;
		/* 82233574h case    2:*/		return 0x82233578;
		  /* 82233578h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233578h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233578h case    3:*/		return 0x8223357C;
		  /* 8223357Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8223357Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223357Ch case    4:*/		return 0x82233580;
		  /* 82233580h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233580h case    5:*/		if ( regs.CR[6].eq ) { return 0x822335BC;  }
		/* 82233580h case    5:*/		return 0x82233584;
		  /* 82233584h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233584h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233584h case    6:*/		return 0x82233588;
		  /* 82233588h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233588h case    7:*/		if ( regs.CR[6].eq ) { return 0x822335BC;  }
		/* 82233588h case    7:*/		return 0x8223358C;
		  /* 8223358Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 8223358Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223358Ch case    8:*/		return 0x82233590;
		  /* 82233590h */ case    9:  		/* bl -14128 */
		/* 82233590h case    9:*/		regs.LR = 0x82233594; return 0x8222FE60;
		/* 82233590h case    9:*/		return 0x82233594;
		  /* 82233594h */ case   10:  		/* lis R11, -32216 */
		/* 82233594h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233594h case   10:*/		return 0x82233598;
		  /* 82233598h */ case   11:  		/* lis R10, -32252 */
		/* 82233598h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233598h case   11:*/		return 0x8223359C;
		  /* 8223359Ch */ case   12:  		/* mtspr CTR, R30 */
		/* 8223359Ch case   12:*/		regs.CTR = regs.R30;
		/* 8223359Ch case   12:*/		return 0x822335A0;
	}
	return 0x822335A0;
} // Block from 8223356Ch-822335A0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822335A0h
// Function '?CompileGetVertexFetchMask@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HHPAPADPAU_SSM_REGISTRY@1@P6AXPAXPBDZZ3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822335A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822335A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822335A0);
		  /* 822335A0h */ case    0:  		/* addi R11, R11, 11160 */
		/* 822335A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822335A0h case    0:*/		return 0x822335A4;
		  /* 822335A4h */ case    1:  		/* addi R4, R10, 4668 */
		/* 822335A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 822335A4h case    1:*/		return 0x822335A8;
		  /* 822335A8h */ case    2:  		/* addi R7, R1, 80 */
		/* 822335A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 822335A8h case    2:*/		return 0x822335AC;
		  /* 822335ACh */ case    3:  		/* li R6, 70 */
		/* 822335ACh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x46);
		/* 822335ACh case    3:*/		return 0x822335B0;
		  /* 822335B0h */ case    4:  		/* mr R3, R28 */
		/* 822335B0h case    4:*/		regs.R3 = regs.R28;
		/* 822335B0h case    4:*/		return 0x822335B4;
		  /* 822335B4h */ case    5:  		/* lwz R5, <#[R11 + 280]> */
		/* 822335B4h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000118) );
		/* 822335B4h case    5:*/		return 0x822335B8;
		  /* 822335B8h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 822335B8h case    6:*/		if ( 1 ) { regs.LR = 0x822335BC; return (uint32)regs.CTR; }
		/* 822335B8h case    6:*/		return 0x822335BC;
	}
	return 0x822335BC;
} // Block from 822335A0h-822335BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 822335BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822335BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822335BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822335BC);
		  /* 822335BCh */ case    0:  		/* li R3, 1 */
		/* 822335BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822335BCh case    0:*/		return 0x822335C0;
		  /* 822335C0h */ case    1:  		/* addi R1, R1, 160 */
		/* 822335C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822335C0h case    1:*/		return 0x822335C4;
		  /* 822335C4h */ case    2:  		/* b -1712924 */
		/* 822335C4h case    2:*/		return 0x820912A8;
		/* 822335C4h case    2:*/		return 0x822335C8;
	}
	return 0x822335C8;
} // Block from 822335BCh-822335C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822335C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822335C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822335C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822335C8);
		  /* 822335C8h */ case    0:  		/* lis R11, -32256 */
		/* 822335C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 822335C8h case    0:*/		return 0x822335CC;
		  /* 822335CCh */ case    1:  		/* li R3, 1 */
		/* 822335CCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822335CCh case    1:*/		return 0x822335D0;
		  /* 822335D0h */ case    2:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 822335D0h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 822335D0h case    2:*/		return 0x822335D4;
		  /* 822335D4h */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 822335D4h case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 822335D4h case    3:*/		return 0x822335D8;
		  /* 822335D8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 822335D8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822335D8h case    4:*/		return 0x822335DC;
	}
	return 0x822335DC;
} // Block from 822335C8h-822335DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822335DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822335DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822335DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822335DC);
		  /* 822335DCh */ case    0:  		/* nop */
		/* 822335DCh case    0:*/		cpu::op::nop();
		/* 822335DCh case    0:*/		return 0x822335E0;
	}
	return 0x822335E0;
} // Block from 822335DCh-822335E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822335E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822335E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822335E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822335E0);
		  /* 822335E0h */ case    0:  		/* mfspr R12, LR */
		/* 822335E0h case    0:*/		regs.R12 = regs.LR;
		/* 822335E0h case    0:*/		return 0x822335E4;
		  /* 822335E4h */ case    1:  		/* bl -1713040 */
		/* 822335E4h case    1:*/		regs.LR = 0x822335E8; return 0x82091254;
		/* 822335E4h case    1:*/		return 0x822335E8;
		  /* 822335E8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822335E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822335E8h case    2:*/		return 0x822335EC;
		  /* 822335ECh */ case    3:  		/* mr R31, R3 */
		/* 822335ECh case    3:*/		regs.R31 = regs.R3;
		/* 822335ECh case    3:*/		return 0x822335F0;
		  /* 822335F0h */ case    4:  		/* mr R30, R4 */
		/* 822335F0h case    4:*/		regs.R30 = regs.R4;
		/* 822335F0h case    4:*/		return 0x822335F4;
		  /* 822335F4h */ case    5:  		/* mr R28, R5 */
		/* 822335F4h case    5:*/		regs.R28 = regs.R5;
		/* 822335F4h case    5:*/		return 0x822335F8;
		  /* 822335F8h */ case    6:  		/* mr R29, R6 */
		/* 822335F8h case    6:*/		regs.R29 = regs.R6;
		/* 822335F8h case    6:*/		return 0x822335FC;
		  /* 822335FCh */ case    7:  		/* mr R27, R7 */
		/* 822335FCh case    7:*/		regs.R27 = regs.R7;
		/* 822335FCh case    7:*/		return 0x82233600;
		  /* 82233600h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82233600h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233600h case    8:*/		return 0x82233604;
		  /* 82233604h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82233604h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82233628;  }
		/* 82233604h case    9:*/		return 0x82233608;
		  /* 82233608h */ case   10:  		/* lis R11, -32252 */
		/* 82233608h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233608h case   10:*/		return 0x8223360C;
		  /* 8223360Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223360Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223360Ch case   11:*/		return 0x82233610;
		  /* 82233610h */ case   12:  		/* lis R9, -32253 */
		/* 82233610h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233610h case   12:*/		return 0x82233614;
		  /* 82233614h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82233614h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233614h case   13:*/		return 0x82233618;
		  /* 82233618h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82233618h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233618h case   14:*/		return 0x8223361C;
		  /* 8223361Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223361Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223361Ch case   15:*/		return 0x82233620;
		  /* 82233620h */ case   16:  		/* li R7, 3620 */
		/* 82233620h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xE24);
		/* 82233620h case   16:*/		return 0x82233624;
		  /* 82233624h */ case   17:  		/* bl -899612 */
		/* 82233624h case   17:*/		regs.LR = 0x82233628; return 0x82157C08;
		/* 82233624h case   17:*/		return 0x82233628;
	}
	return 0x82233628;
} // Block from 822335E0h-82233628h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82233628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233628);
		  /* 82233628h */ case    0:  		/* mr R5, R30 */
		/* 82233628h case    0:*/		regs.R5 = regs.R30;
		/* 82233628h case    0:*/		return 0x8223362C;
		  /* 8223362Ch */ case    1:  		/* li R4, 16 */
		/* 8223362Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8223362Ch case    1:*/		return 0x82233630;
		  /* 82233630h */ case    2:  		/* mr R3, R31 */
		/* 82233630h case    2:*/		regs.R3 = regs.R31;
		/* 82233630h case    2:*/		return 0x82233634;
		  /* 82233634h */ case    3:  		/* bl -146796 */
		/* 82233634h case    3:*/		regs.LR = 0x82233638; return 0x8220F8C8;
		/* 82233634h case    3:*/		return 0x82233638;
		  /* 82233638h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 82233638h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82233638h case    4:*/		return 0x8223363C;
		  /* 8223363Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8223363Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223363Ch case    5:*/		return 0x82233640;
		  /* 82233640h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 82233640h case    6:*/		if ( regs.CR[6].eq ) { return 0x82233680;  }
		/* 82233640h case    6:*/		return 0x82233644;
		  /* 82233644h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 82233644h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233644h case    7:*/		return 0x82233648;
		  /* 82233648h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 82233648h case    8:*/		if ( regs.CR[6].eq ) { return 0x82233680;  }
		/* 82233648h case    8:*/		return 0x8223364C;
		  /* 8223364Ch */ case    9:  		/* addi R4, R1, 80 */
		/* 8223364Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223364Ch case    9:*/		return 0x82233650;
		  /* 82233650h */ case   10:  		/* bl -14320 */
		/* 82233650h case   10:*/		regs.LR = 0x82233654; return 0x8222FE60;
		/* 82233650h case   10:*/		return 0x82233654;
		  /* 82233654h */ case   11:  		/* lis R11, -32216 */
		/* 82233654h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233654h case   11:*/		return 0x82233658;
		  /* 82233658h */ case   12:  		/* lis R10, -32252 */
		/* 82233658h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233658h case   12:*/		return 0x8223365C;
		  /* 8223365Ch */ case   13:  		/* mtspr CTR, R29 */
		/* 8223365Ch case   13:*/		regs.CTR = regs.R29;
		/* 8223365Ch case   13:*/		return 0x82233660;
		  /* 82233660h */ case   14:  		/* addi R11, R11, 11160 */
		/* 82233660h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233660h case   14:*/		return 0x82233664;
		  /* 82233664h */ case   15:  		/* addi R4, R10, 4696 */
		/* 82233664h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82233664h case   15:*/		return 0x82233668;
		  /* 82233668h */ case   16:  		/* addi R8, R1, 80 */
		/* 82233668h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82233668h case   16:*/		return 0x8223366C;
		  /* 8223366Ch */ case   17:  		/* mr R7, R30 */
		/* 8223366Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223366Ch case   17:*/		return 0x82233670;
		  /* 82233670h */ case   18:  		/* li R6, 11 */
		/* 82233670h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0xB);
		/* 82233670h case   18:*/		return 0x82233674;
		  /* 82233674h */ case   19:  		/* mr R3, R27 */
		/* 82233674h case   19:*/		regs.R3 = regs.R27;
		/* 82233674h case   19:*/		return 0x82233678;
		  /* 82233678h */ case   20:  		/* lwz R5, <#[R11 + 44]> */
		/* 82233678h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000002C) );
		/* 82233678h case   20:*/		return 0x8223367C;
		  /* 8223367Ch */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8223367Ch case   21:*/		if ( 1 ) { regs.LR = 0x82233680; return (uint32)regs.CTR; }
		/* 8223367Ch case   21:*/		return 0x82233680;
	}
	return 0x82233680;
} // Block from 82233628h-82233680h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82233680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233680);
		  /* 82233680h */ case    0:  		/* li R3, 1 */
		/* 82233680h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233680h case    0:*/		return 0x82233684;
		  /* 82233684h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233684h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233684h case    1:*/		return 0x82233688;
		  /* 82233688h */ case    2:  		/* b -1713124 */
		/* 82233688h case    2:*/		return 0x820912A4;
		/* 82233688h case    2:*/		return 0x8223368C;
		  /* 8223368Ch */ case    3:  		/* nop */
		/* 8223368Ch case    3:*/		cpu::op::nop();
		/* 8223368Ch case    3:*/		return 0x82233690;
	}
	return 0x82233690;
} // Block from 82233680h-82233690h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233690);
		  /* 82233690h */ case    0:  		/* mfspr R12, LR */
		/* 82233690h case    0:*/		regs.R12 = regs.LR;
		/* 82233690h case    0:*/		return 0x82233694;
		  /* 82233694h */ case    1:  		/* bl -1713216 */
		/* 82233694h case    1:*/		regs.LR = 0x82233698; return 0x82091254;
		/* 82233694h case    1:*/		return 0x82233698;
		  /* 82233698h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233698h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233698h case    2:*/		return 0x8223369C;
		  /* 8223369Ch */ case    3:  		/* mr R31, R3 */
		/* 8223369Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223369Ch case    3:*/		return 0x822336A0;
		  /* 822336A0h */ case    4:  		/* mr R30, R4 */
		/* 822336A0h case    4:*/		regs.R30 = regs.R4;
		/* 822336A0h case    4:*/		return 0x822336A4;
		  /* 822336A4h */ case    5:  		/* mr R28, R5 */
		/* 822336A4h case    5:*/		regs.R28 = regs.R5;
		/* 822336A4h case    5:*/		return 0x822336A8;
		  /* 822336A8h */ case    6:  		/* mr R29, R6 */
		/* 822336A8h case    6:*/		regs.R29 = regs.R6;
		/* 822336A8h case    6:*/		return 0x822336AC;
		  /* 822336ACh */ case    7:  		/* mr R27, R7 */
		/* 822336ACh case    7:*/		regs.R27 = regs.R7;
		/* 822336ACh case    7:*/		return 0x822336B0;
		  /* 822336B0h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822336B0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822336B0h case    8:*/		return 0x822336B4;
		  /* 822336B4h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 822336B4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x822336D8;  }
		/* 822336B4h case    9:*/		return 0x822336B8;
		  /* 822336B8h */ case   10:  		/* lis R11, -32252 */
		/* 822336B8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822336B8h case   10:*/		return 0x822336BC;
		  /* 822336BCh */ case   11:  		/* lis R10, -32253 */
		/* 822336BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822336BCh case   11:*/		return 0x822336C0;
		  /* 822336C0h */ case   12:  		/* lis R9, -32253 */
		/* 822336C0h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822336C0h case   12:*/		return 0x822336C4;
		  /* 822336C4h */ case   13:  		/* addi R6, R11, 4336 */
		/* 822336C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822336C4h case   13:*/		return 0x822336C8;
		  /* 822336C8h */ case   14:  		/* addi R5, R10, 27792 */
		/* 822336C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822336C8h case   14:*/		return 0x822336CC;
		  /* 822336CCh */ case   15:  		/* addi R4, R9, 27460 */
		/* 822336CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822336CCh case   15:*/		return 0x822336D0;
		  /* 822336D0h */ case   16:  		/* li R7, 3654 */
		/* 822336D0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xE46);
		/* 822336D0h case   16:*/		return 0x822336D4;
		  /* 822336D4h */ case   17:  		/* bl -899788 */
		/* 822336D4h case   17:*/		regs.LR = 0x822336D8; return 0x82157C08;
		/* 822336D4h case   17:*/		return 0x822336D8;
	}
	return 0x822336D8;
} // Block from 82233690h-822336D8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822336D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822336D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822336D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822336D8);
		  /* 822336D8h */ case    0:  		/* mr R5, R30 */
		/* 822336D8h case    0:*/		regs.R5 = regs.R30;
		/* 822336D8h case    0:*/		return 0x822336DC;
		  /* 822336DCh */ case    1:  		/* li R4, 17 */
		/* 822336DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 822336DCh case    1:*/		return 0x822336E0;
		  /* 822336E0h */ case    2:  		/* mr R3, R31 */
		/* 822336E0h case    2:*/		regs.R3 = regs.R31;
		/* 822336E0h case    2:*/		return 0x822336E4;
		  /* 822336E4h */ case    3:  		/* bl -146972 */
		/* 822336E4h case    3:*/		regs.LR = 0x822336E8; return 0x8220F8C8;
		/* 822336E4h case    3:*/		return 0x822336E8;
		  /* 822336E8h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 822336E8h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 822336E8h case    4:*/		return 0x822336EC;
		  /* 822336ECh */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 822336ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822336ECh case    5:*/		return 0x822336F0;
		  /* 822336F0h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 822336F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82233730;  }
		/* 822336F0h case    6:*/		return 0x822336F4;
		  /* 822336F4h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 822336F4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822336F4h case    7:*/		return 0x822336F8;
		  /* 822336F8h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 822336F8h case    8:*/		if ( regs.CR[6].eq ) { return 0x82233730;  }
		/* 822336F8h case    8:*/		return 0x822336FC;
		  /* 822336FCh */ case    9:  		/* addi R4, R1, 80 */
		/* 822336FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822336FCh case    9:*/		return 0x82233700;
		  /* 82233700h */ case   10:  		/* bl -14496 */
		/* 82233700h case   10:*/		regs.LR = 0x82233704; return 0x8222FE60;
		/* 82233700h case   10:*/		return 0x82233704;
		  /* 82233704h */ case   11:  		/* lis R11, -32216 */
		/* 82233704h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233704h case   11:*/		return 0x82233708;
		  /* 82233708h */ case   12:  		/* lis R10, -32252 */
		/* 82233708h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233708h case   12:*/		return 0x8223370C;
		  /* 8223370Ch */ case   13:  		/* mtspr CTR, R29 */
		/* 8223370Ch case   13:*/		regs.CTR = regs.R29;
		/* 8223370Ch case   13:*/		return 0x82233710;
		  /* 82233710h */ case   14:  		/* addi R11, R11, 11160 */
		/* 82233710h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233710h case   14:*/		return 0x82233714;
		  /* 82233714h */ case   15:  		/* addi R4, R10, 4696 */
		/* 82233714h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82233714h case   15:*/		return 0x82233718;
		  /* 82233718h */ case   16:  		/* addi R8, R1, 80 */
		/* 82233718h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82233718h case   16:*/		return 0x8223371C;
		  /* 8223371Ch */ case   17:  		/* mr R7, R30 */
		/* 8223371Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223371Ch case   17:*/		return 0x82233720;
		  /* 82233720h */ case   18:  		/* li R6, 72 */
		/* 82233720h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x48);
		/* 82233720h case   18:*/		return 0x82233724;
		  /* 82233724h */ case   19:  		/* mr R3, R27 */
		/* 82233724h case   19:*/		regs.R3 = regs.R27;
		/* 82233724h case   19:*/		return 0x82233728;
		  /* 82233728h */ case   20:  		/* lwz R5, <#[R11 + 288]> */
		/* 82233728h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000120) );
		/* 82233728h case   20:*/		return 0x8223372C;
		  /* 8223372Ch */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8223372Ch case   21:*/		if ( 1 ) { regs.LR = 0x82233730; return (uint32)regs.CTR; }
		/* 8223372Ch case   21:*/		return 0x82233730;
	}
	return 0x82233730;
} // Block from 822336D8h-82233730h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82233730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233730);
		  /* 82233730h */ case    0:  		/* li R3, 1 */
		/* 82233730h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233730h case    0:*/		return 0x82233734;
		  /* 82233734h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233734h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233734h case    1:*/		return 0x82233738;
		  /* 82233738h */ case    2:  		/* b -1713300 */
		/* 82233738h case    2:*/		return 0x820912A4;
		/* 82233738h case    2:*/		return 0x8223373C;
		  /* 8223373Ch */ case    3:  		/* nop */
		/* 8223373Ch case    3:*/		cpu::op::nop();
		/* 8223373Ch case    3:*/		return 0x82233740;
	}
	return 0x82233740;
} // Block from 82233730h-82233740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233740);
		  /* 82233740h */ case    0:  		/* mfspr R12, LR */
		/* 82233740h case    0:*/		regs.R12 = regs.LR;
		/* 82233740h case    0:*/		return 0x82233744;
		  /* 82233744h */ case    1:  		/* bl -1713392 */
		/* 82233744h case    1:*/		regs.LR = 0x82233748; return 0x82091254;
		/* 82233744h case    1:*/		return 0x82233748;
		  /* 82233748h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233748h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233748h case    2:*/		return 0x8223374C;
		  /* 8223374Ch */ case    3:  		/* mr R31, R3 */
		/* 8223374Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223374Ch case    3:*/		return 0x82233750;
		  /* 82233750h */ case    4:  		/* mr R30, R4 */
		/* 82233750h case    4:*/		regs.R30 = regs.R4;
		/* 82233750h case    4:*/		return 0x82233754;
		  /* 82233754h */ case    5:  		/* mr R28, R5 */
		/* 82233754h case    5:*/		regs.R28 = regs.R5;
		/* 82233754h case    5:*/		return 0x82233758;
		  /* 82233758h */ case    6:  		/* mr R29, R6 */
		/* 82233758h case    6:*/		regs.R29 = regs.R6;
		/* 82233758h case    6:*/		return 0x8223375C;
		  /* 8223375Ch */ case    7:  		/* mr R27, R7 */
		/* 8223375Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223375Ch case    7:*/		return 0x82233760;
		  /* 82233760h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82233760h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233760h case    8:*/		return 0x82233764;
		  /* 82233764h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82233764h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82233788;  }
		/* 82233764h case    9:*/		return 0x82233768;
		  /* 82233768h */ case   10:  		/* lis R11, -32252 */
		/* 82233768h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233768h case   10:*/		return 0x8223376C;
		  /* 8223376Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223376Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223376Ch case   11:*/		return 0x82233770;
		  /* 82233770h */ case   12:  		/* lis R9, -32253 */
		/* 82233770h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233770h case   12:*/		return 0x82233774;
		  /* 82233774h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82233774h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233774h case   13:*/		return 0x82233778;
		  /* 82233778h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82233778h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233778h case   14:*/		return 0x8223377C;
		  /* 8223377Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223377Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223377Ch case   15:*/		return 0x82233780;
		  /* 82233780h */ case   16:  		/* li R7, 3688 */
		/* 82233780h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xE68);
		/* 82233780h case   16:*/		return 0x82233784;
		  /* 82233784h */ case   17:  		/* bl -899964 */
		/* 82233784h case   17:*/		regs.LR = 0x82233788; return 0x82157C08;
		/* 82233784h case   17:*/		return 0x82233788;
	}
	return 0x82233788;
} // Block from 82233740h-82233788h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82233788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233788);
		  /* 82233788h */ case    0:  		/* mr R5, R30 */
		/* 82233788h case    0:*/		regs.R5 = regs.R30;
		/* 82233788h case    0:*/		return 0x8223378C;
		  /* 8223378Ch */ case    1:  		/* li R4, 18 */
		/* 8223378Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 8223378Ch case    1:*/		return 0x82233790;
		  /* 82233790h */ case    2:  		/* mr R3, R31 */
		/* 82233790h case    2:*/		regs.R3 = regs.R31;
		/* 82233790h case    2:*/		return 0x82233794;
		  /* 82233794h */ case    3:  		/* bl -147148 */
		/* 82233794h case    3:*/		regs.LR = 0x82233798; return 0x8220F8C8;
		/* 82233794h case    3:*/		return 0x82233798;
		  /* 82233798h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 82233798h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82233798h case    4:*/		return 0x8223379C;
		  /* 8223379Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8223379Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223379Ch case    5:*/		return 0x822337A0;
	}
	return 0x822337A0;
} // Block from 82233788h-822337A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822337A0h
// Function '?CompileGetVertexNumDwords@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAHPAU_SSM_REGISTRY@1@P6AXPAXPBDZZ3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822337A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822337A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822337A0);
		  /* 822337A0h */ case    0:  		/* bc 12, CR6_EQ, 64 */
		/* 822337A0h case    0:*/		if ( regs.CR[6].eq ) { return 0x822337E0;  }
		/* 822337A0h case    0:*/		return 0x822337A4;
		  /* 822337A4h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 822337A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822337A4h case    1:*/		return 0x822337A8;
		  /* 822337A8h */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 822337A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x822337E0;  }
		/* 822337A8h case    2:*/		return 0x822337AC;
		  /* 822337ACh */ case    3:  		/* addi R4, R1, 80 */
		/* 822337ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822337ACh case    3:*/		return 0x822337B0;
		  /* 822337B0h */ case    4:  		/* bl -14672 */
		/* 822337B0h case    4:*/		regs.LR = 0x822337B4; return 0x8222FE60;
		/* 822337B0h case    4:*/		return 0x822337B4;
		  /* 822337B4h */ case    5:  		/* lis R11, -32216 */
		/* 822337B4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822337B4h case    5:*/		return 0x822337B8;
		  /* 822337B8h */ case    6:  		/* lis R10, -32252 */
		/* 822337B8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822337B8h case    6:*/		return 0x822337BC;
		  /* 822337BCh */ case    7:  		/* mtspr CTR, R29 */
		/* 822337BCh case    7:*/		regs.CTR = regs.R29;
		/* 822337BCh case    7:*/		return 0x822337C0;
		  /* 822337C0h */ case    8:  		/* addi R11, R11, 11160 */
		/* 822337C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822337C0h case    8:*/		return 0x822337C4;
		  /* 822337C4h */ case    9:  		/* addi R4, R10, 4696 */
		/* 822337C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 822337C4h case    9:*/		return 0x822337C8;
		  /* 822337C8h */ case   10:  		/* addi R8, R1, 80 */
		/* 822337C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 822337C8h case   10:*/		return 0x822337CC;
		  /* 822337CCh */ case   11:  		/* mr R7, R30 */
		/* 822337CCh case   11:*/		regs.R7 = regs.R30;
		/* 822337CCh case   11:*/		return 0x822337D0;
		  /* 822337D0h */ case   12:  		/* li R6, 73 */
		/* 822337D0h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x49);
		/* 822337D0h case   12:*/		return 0x822337D4;
		  /* 822337D4h */ case   13:  		/* mr R3, R27 */
		/* 822337D4h case   13:*/		regs.R3 = regs.R27;
		/* 822337D4h case   13:*/		return 0x822337D8;
		  /* 822337D8h */ case   14:  		/* lwz R5, <#[R11 + 292]> */
		/* 822337D8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000124) );
		/* 822337D8h case   14:*/		return 0x822337DC;
		  /* 822337DCh */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 822337DCh case   15:*/		if ( 1 ) { regs.LR = 0x822337E0; return (uint32)regs.CTR; }
		/* 822337DCh case   15:*/		return 0x822337E0;
	}
	return 0x822337E0;
} // Block from 822337A0h-822337E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822337E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822337E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822337E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822337E0);
		  /* 822337E0h */ case    0:  		/* li R3, 1 */
		/* 822337E0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822337E0h case    0:*/		return 0x822337E4;
		  /* 822337E4h */ case    1:  		/* addi R1, R1, 160 */
		/* 822337E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822337E4h case    1:*/		return 0x822337E8;
		  /* 822337E8h */ case    2:  		/* b -1713476 */
		/* 822337E8h case    2:*/		return 0x820912A4;
		/* 822337E8h case    2:*/		return 0x822337EC;
		  /* 822337ECh */ case    3:  		/* nop */
		/* 822337ECh case    3:*/		cpu::op::nop();
		/* 822337ECh case    3:*/		return 0x822337F0;
	}
	return 0x822337F0;
} // Block from 822337E0h-822337F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822337F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822337F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822337F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822337F0);
		  /* 822337F0h */ case    0:  		/* mfspr R12, LR */
		/* 822337F0h case    0:*/		regs.R12 = regs.LR;
		/* 822337F0h case    0:*/		return 0x822337F4;
		  /* 822337F4h */ case    1:  		/* bl -1713568 */
		/* 822337F4h case    1:*/		regs.LR = 0x822337F8; return 0x82091254;
		/* 822337F4h case    1:*/		return 0x822337F8;
		  /* 822337F8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822337F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822337F8h case    2:*/		return 0x822337FC;
		  /* 822337FCh */ case    3:  		/* mr R31, R3 */
		/* 822337FCh case    3:*/		regs.R31 = regs.R3;
		/* 822337FCh case    3:*/		return 0x82233800;
		  /* 82233800h */ case    4:  		/* mr R30, R4 */
		/* 82233800h case    4:*/		regs.R30 = regs.R4;
		/* 82233800h case    4:*/		return 0x82233804;
		  /* 82233804h */ case    5:  		/* mr R28, R5 */
		/* 82233804h case    5:*/		regs.R28 = regs.R5;
		/* 82233804h case    5:*/		return 0x82233808;
		  /* 82233808h */ case    6:  		/* mr R29, R6 */
		/* 82233808h case    6:*/		regs.R29 = regs.R6;
		/* 82233808h case    6:*/		return 0x8223380C;
		  /* 8223380Ch */ case    7:  		/* mr R27, R7 */
		/* 8223380Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223380Ch case    7:*/		return 0x82233810;
		  /* 82233810h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82233810h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233810h case    8:*/		return 0x82233814;
		  /* 82233814h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82233814h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82233838;  }
		/* 82233814h case    9:*/		return 0x82233818;
		  /* 82233818h */ case   10:  		/* lis R11, -32252 */
		/* 82233818h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233818h case   10:*/		return 0x8223381C;
		  /* 8223381Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223381Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223381Ch case   11:*/		return 0x82233820;
		  /* 82233820h */ case   12:  		/* lis R9, -32253 */
		/* 82233820h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233820h case   12:*/		return 0x82233824;
		  /* 82233824h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82233824h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233824h case   13:*/		return 0x82233828;
		  /* 82233828h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82233828h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233828h case   14:*/		return 0x8223382C;
		  /* 8223382Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223382Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223382Ch case   15:*/		return 0x82233830;
		  /* 82233830h */ case   16:  		/* li R7, 3721 */
		/* 82233830h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xE89);
		/* 82233830h case   16:*/		return 0x82233834;
		  /* 82233834h */ case   17:  		/* bl -900140 */
		/* 82233834h case   17:*/		regs.LR = 0x82233838; return 0x82157C08;
		/* 82233834h case   17:*/		return 0x82233838;
	}
	return 0x82233838;
} // Block from 822337F0h-82233838h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82233838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233838);
		  /* 82233838h */ case    0:  		/* mr R5, R30 */
		/* 82233838h case    0:*/		regs.R5 = regs.R30;
		/* 82233838h case    0:*/		return 0x8223383C;
		  /* 8223383Ch */ case    1:  		/* li R4, 19 */
		/* 8223383Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 8223383Ch case    1:*/		return 0x82233840;
		  /* 82233840h */ case    2:  		/* mr R3, R31 */
		/* 82233840h case    2:*/		regs.R3 = regs.R31;
		/* 82233840h case    2:*/		return 0x82233844;
		  /* 82233844h */ case    3:  		/* bl -147324 */
		/* 82233844h case    3:*/		regs.LR = 0x82233848; return 0x8220F8C8;
		/* 82233844h case    3:*/		return 0x82233848;
		  /* 82233848h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 82233848h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82233848h case    4:*/		return 0x8223384C;
		  /* 8223384Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8223384Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223384Ch case    5:*/		return 0x82233850;
		  /* 82233850h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 82233850h case    6:*/		if ( regs.CR[6].eq ) { return 0x82233890;  }
		/* 82233850h case    6:*/		return 0x82233854;
		  /* 82233854h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 82233854h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233854h case    7:*/		return 0x82233858;
		  /* 82233858h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 82233858h case    8:*/		if ( regs.CR[6].eq ) { return 0x82233890;  }
		/* 82233858h case    8:*/		return 0x8223385C;
		  /* 8223385Ch */ case    9:  		/* addi R4, R1, 80 */
		/* 8223385Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223385Ch case    9:*/		return 0x82233860;
		  /* 82233860h */ case   10:  		/* bl -14848 */
		/* 82233860h case   10:*/		regs.LR = 0x82233864; return 0x8222FE60;
		/* 82233860h case   10:*/		return 0x82233864;
		  /* 82233864h */ case   11:  		/* lis R11, -32216 */
		/* 82233864h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233864h case   11:*/		return 0x82233868;
		  /* 82233868h */ case   12:  		/* lis R10, -32252 */
		/* 82233868h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233868h case   12:*/		return 0x8223386C;
		  /* 8223386Ch */ case   13:  		/* mtspr CTR, R29 */
		/* 8223386Ch case   13:*/		regs.CTR = regs.R29;
		/* 8223386Ch case   13:*/		return 0x82233870;
		  /* 82233870h */ case   14:  		/* addi R11, R11, 11160 */
		/* 82233870h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233870h case   14:*/		return 0x82233874;
		  /* 82233874h */ case   15:  		/* addi R4, R10, 4696 */
		/* 82233874h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82233874h case   15:*/		return 0x82233878;
		  /* 82233878h */ case   16:  		/* addi R8, R1, 80 */
		/* 82233878h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82233878h case   16:*/		return 0x8223387C;
		  /* 8223387Ch */ case   17:  		/* mr R7, R30 */
		/* 8223387Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223387Ch case   17:*/		return 0x82233880;
		  /* 82233880h */ case   18:  		/* li R6, 74 */
		/* 82233880h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x4A);
		/* 82233880h case   18:*/		return 0x82233884;
		  /* 82233884h */ case   19:  		/* mr R3, R27 */
		/* 82233884h case   19:*/		regs.R3 = regs.R27;
		/* 82233884h case   19:*/		return 0x82233888;
		  /* 82233888h */ case   20:  		/* lwz R5, <#[R11 + 296]> */
		/* 82233888h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000128) );
		/* 82233888h case   20:*/		return 0x8223388C;
		  /* 8223388Ch */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8223388Ch case   21:*/		if ( 1 ) { regs.LR = 0x82233890; return (uint32)regs.CTR; }
		/* 8223388Ch case   21:*/		return 0x82233890;
	}
	return 0x82233890;
} // Block from 82233838h-82233890h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82233890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233890);
		  /* 82233890h */ case    0:  		/* li R3, 1 */
		/* 82233890h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233890h case    0:*/		return 0x82233894;
		  /* 82233894h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233894h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233894h case    1:*/		return 0x82233898;
		  /* 82233898h */ case    2:  		/* b -1713652 */
		/* 82233898h case    2:*/		return 0x820912A4;
		/* 82233898h case    2:*/		return 0x8223389C;
		  /* 8223389Ch */ case    3:  		/* nop */
		/* 8223389Ch case    3:*/		cpu::op::nop();
		/* 8223389Ch case    3:*/		return 0x822338A0;
	}
	return 0x822338A0;
} // Block from 82233890h-822338A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822338A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822338A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822338A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822338A0);
		  /* 822338A0h */ case    0:  		/* mfspr R12, LR */
		/* 822338A0h case    0:*/		regs.R12 = regs.LR;
		/* 822338A0h case    0:*/		return 0x822338A4;
		  /* 822338A4h */ case    1:  		/* bl -1713748 */
		/* 822338A4h case    1:*/		regs.LR = 0x822338A8; return 0x82091250;
		/* 822338A4h case    1:*/		return 0x822338A8;
		  /* 822338A8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 822338A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 822338A8h case    2:*/		return 0x822338AC;
		  /* 822338ACh */ case    3:  		/* lis R11, -32253 */
		/* 822338ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822338ACh case    3:*/		return 0x822338B0;
		  /* 822338B0h */ case    4:  		/* lis R10, -32252 */
		/* 822338B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822338B0h case    4:*/		return 0x822338B4;
		  /* 822338B4h */ case    5:  		/* mr R31, R3 */
		/* 822338B4h case    5:*/		regs.R31 = regs.R3;
		/* 822338B4h case    5:*/		return 0x822338B8;
		  /* 822338B8h */ case    6:  		/* mr R30, R5 */
		/* 822338B8h case    6:*/		regs.R30 = regs.R5;
		/* 822338B8h case    6:*/		return 0x822338BC;
		  /* 822338BCh */ case    7:  		/* mr R27, R6 */
		/* 822338BCh case    7:*/		regs.R27 = regs.R6;
		/* 822338BCh case    7:*/		return 0x822338C0;
		  /* 822338C0h */ case    8:  		/* mr R26, R7 */
		/* 822338C0h case    8:*/		regs.R26 = regs.R7;
		/* 822338C0h case    8:*/		return 0x822338C4;
		  /* 822338C4h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 822338C4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822338C4h case    9:*/		return 0x822338C8;
		  /* 822338C8h */ case   10:  		/* addi R29, R11, 27460 */
		/* 822338C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 822338C8h case   10:*/		return 0x822338CC;
		  /* 822338CCh */ case   11:  		/* addi R28, R10, 4336 */
		/* 822338CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x10F0);
		/* 822338CCh case   11:*/		return 0x822338D0;
		  /* 822338D0h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 822338D0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x822338F0;  }
		/* 822338D0h case   12:*/		return 0x822338D4;
		  /* 822338D4h */ case   13:  		/* lis R11, -32253 */
		/* 822338D4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822338D4h case   13:*/		return 0x822338D8;
		  /* 822338D8h */ case   14:  		/* mr R6, R28 */
		/* 822338D8h case   14:*/		regs.R6 = regs.R28;
		/* 822338D8h case   14:*/		return 0x822338DC;
		  /* 822338DCh */ case   15:  		/* addi R5, R11, 27792 */
		/* 822338DCh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 822338DCh case   15:*/		return 0x822338E0;
		  /* 822338E0h */ case   16:  		/* mr R4, R29 */
		/* 822338E0h case   16:*/		regs.R4 = regs.R29;
		/* 822338E0h case   16:*/		return 0x822338E4;
		  /* 822338E4h */ case   17:  		/* li R7, 3754 */
		/* 822338E4h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xEAA);
		/* 822338E4h case   17:*/		return 0x822338E8;
		  /* 822338E8h */ case   18:  		/* li R3, 0 */
		/* 822338E8h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822338E8h case   18:*/		return 0x822338EC;
		  /* 822338ECh */ case   19:  		/* bl -900324 */
		/* 822338ECh case   19:*/		regs.LR = 0x822338F0; return 0x82157C08;
		/* 822338ECh case   19:*/		return 0x822338F0;
	}
	return 0x822338F0;
} // Block from 822338A0h-822338F0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822338F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822338F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822338F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822338F0);
		  /* 822338F0h */ case    0:  		/* li R4, 165 */
		/* 822338F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 822338F0h case    0:*/		return 0x822338F4;
		  /* 822338F4h */ case    1:  		/* mr R3, R31 */
		/* 822338F4h case    1:*/		regs.R3 = regs.R31;
		/* 822338F4h case    1:*/		return 0x822338F8;
		  /* 822338F8h */ case    2:  		/* bl -877544 */
		/* 822338F8h case    2:*/		regs.LR = 0x822338FC; return 0x8215D510;
		/* 822338F8h case    2:*/		return 0x822338FC;
		  /* 822338FCh */ case    3:  		/* cmplwi CR6, R3, 3 */
		/* 822338FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 822338FCh case    3:*/		return 0x82233900;
		  /* 82233900h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 82233900h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82233918;  }
		/* 82233900h case    4:*/		return 0x82233904;
		  /* 82233904h */ case    5:  		/* li R4, 166 */
		/* 82233904h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xA6);
		/* 82233904h case    5:*/		return 0x82233908;
		  /* 82233908h */ case    6:  		/* mr R3, R31 */
		/* 82233908h case    6:*/		regs.R3 = regs.R31;
		/* 82233908h case    6:*/		return 0x8223390C;
		  /* 8223390Ch */ case    7:  		/* bl -151572 */
		/* 8223390Ch case    7:*/		regs.LR = 0x82233910; return 0x8220E8F8;
		/* 8223390Ch case    7:*/		return 0x82233910;
		  /* 82233910h */ case    8:  		/* stfs FR1, <#[R30]> */
		/* 82233910h case    8:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 82233910h case    8:*/		return 0x82233914;
		  /* 82233914h */ case    9:  		/* b 16 */
		/* 82233914h case    9:*/		return 0x82233924;
		/* 82233914h case    9:*/		return 0x82233918;
	}
	return 0x82233918;
} // Block from 822338F0h-82233918h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82233918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233918);
		  /* 82233918h */ case    0:  		/* lis R11, -32256 */
		/* 82233918h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82233918h case    0:*/		return 0x8223391C;
		  /* 8223391Ch */ case    1:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 8223391Ch case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 8223391Ch case    1:*/		return 0x82233920;
		  /* 82233920h */ case    2:  		/* stfs FR0, <#[R30]> */
		/* 82233920h case    2:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R30 + 0x00000000) );
		/* 82233920h case    2:*/		return 0x82233924;
	}
	return 0x82233924;
} // Block from 82233918h-82233924h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233924);
		  /* 82233924h */ case    0:  		/* li R4, 170 */
		/* 82233924h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xAA);
		/* 82233924h case    0:*/		return 0x82233928;
		  /* 82233928h */ case    1:  		/* mr R3, R31 */
		/* 82233928h case    1:*/		regs.R3 = regs.R31;
		/* 82233928h case    1:*/		return 0x8223392C;
		  /* 8223392Ch */ case    2:  		/* bl -877596 */
		/* 8223392Ch case    2:*/		regs.LR = 0x82233930; return 0x8215D510;
		/* 8223392Ch case    2:*/		return 0x82233930;
		  /* 82233930h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82233930h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82233930h case    3:*/		return 0x82233934;
		  /* 82233934h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 82233934h case    4:*/		if ( regs.CR[6].eq ) { return 0x82233954;  }
		/* 82233934h case    4:*/		return 0x82233938;
		  /* 82233938h */ case    5:  		/* lis R11, -32252 */
		/* 82233938h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233938h case    5:*/		return 0x8223393C;
		  /* 8223393Ch */ case    6:  		/* mr R6, R28 */
		/* 8223393Ch case    6:*/		regs.R6 = regs.R28;
		/* 8223393Ch case    6:*/		return 0x82233940;
		  /* 82233940h */ case    7:  		/* addi R5, R11, 4720 */
		/* 82233940h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1270);
		/* 82233940h case    7:*/		return 0x82233944;
		  /* 82233944h */ case    8:  		/* mr R4, R29 */
		/* 82233944h case    8:*/		regs.R4 = regs.R29;
		/* 82233944h case    8:*/		return 0x82233948;
		  /* 82233948h */ case    9:  		/* li R7, 3767 */
		/* 82233948h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xEB7);
		/* 82233948h case    9:*/		return 0x8223394C;
		  /* 8223394Ch */ case   10:  		/* li R3, 0 */
		/* 8223394Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223394Ch case   10:*/		return 0x82233950;
		  /* 82233950h */ case   11:  		/* bl -900424 */
		/* 82233950h case   11:*/		regs.LR = 0x82233954; return 0x82157C08;
		/* 82233950h case   11:*/		return 0x82233954;
	}
	return 0x82233954;
} // Block from 82233924h-82233954h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82233954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233954);
		  /* 82233954h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82233954h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233954h case    0:*/		return 0x82233958;
		  /* 82233958h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 82233958h case    1:*/		if ( regs.CR[6].eq ) { return 0x82233998;  }
		/* 82233958h case    1:*/		return 0x8223395C;
		  /* 8223395Ch */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 8223395Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8223395Ch case    2:*/		return 0x82233960;
		  /* 82233960h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 82233960h case    3:*/		if ( regs.CR[6].eq ) { return 0x82233998;  }
		/* 82233960h case    3:*/		return 0x82233964;
		  /* 82233964h */ case    4:  		/* addi R4, R1, 80 */
		/* 82233964h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233964h case    4:*/		return 0x82233968;
		  /* 82233968h */ case    5:  		/* lfs FR1, <#[R30]> */
		/* 82233968h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 82233968h case    5:*/		return 0x8223396C;
		  /* 8223396Ch */ case    6:  		/* bl -15116 */
		/* 8223396Ch case    6:*/		regs.LR = 0x82233970; return 0x8222FE60;
		/* 8223396Ch case    6:*/		return 0x82233970;
	}
	return 0x82233970;
} // Block from 82233954h-82233970h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82233970h
// Function '?CompileGetVertexNumFetches@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAHPAU_SSM_REGISTRY@1@P6AXPAXPBDZZ3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233970);
		  /* 82233970h */ case    0:  		/* lis R11, -32216 */
		/* 82233970h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233970h case    0:*/		return 0x82233974;
		  /* 82233974h */ case    1:  		/* lis R10, -32252 */
		/* 82233974h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233974h case    1:*/		return 0x82233978;
		  /* 82233978h */ case    2:  		/* mtspr CTR, R27 */
		/* 82233978h case    2:*/		regs.CTR = regs.R27;
		/* 82233978h case    2:*/		return 0x8223397C;
		  /* 8223397Ch */ case    3:  		/* addi R11, R11, 11160 */
		/* 8223397Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223397Ch case    3:*/		return 0x82233980;
		  /* 82233980h */ case    4:  		/* addi R4, R10, 4668 */
		/* 82233980h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233980h case    4:*/		return 0x82233984;
		  /* 82233984h */ case    5:  		/* addi R7, R1, 80 */
		/* 82233984h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233984h case    5:*/		return 0x82233988;
		  /* 82233988h */ case    6:  		/* li R6, 26 */
		/* 82233988h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 82233988h case    6:*/		return 0x8223398C;
		  /* 8223398Ch */ case    7:  		/* mr R3, R26 */
		/* 8223398Ch case    7:*/		regs.R3 = regs.R26;
		/* 8223398Ch case    7:*/		return 0x82233990;
		  /* 82233990h */ case    8:  		/* lwz R5, <#[R11 + 104]> */
		/* 82233990h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000068) );
		/* 82233990h case    8:*/		return 0x82233994;
		  /* 82233994h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82233994h case    9:*/		if ( 1 ) { regs.LR = 0x82233998; return (uint32)regs.CTR; }
		/* 82233994h case    9:*/		return 0x82233998;
	}
	return 0x82233998;
} // Block from 82233970h-82233998h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82233998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233998);
		  /* 82233998h */ case    0:  		/* li R3, 1 */
		/* 82233998h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233998h case    0:*/		return 0x8223399C;
		  /* 8223399Ch */ case    1:  		/* addi R1, R1, 176 */
		/* 8223399Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8223399Ch case    1:*/		return 0x822339A0;
		  /* 822339A0h */ case    2:  		/* b -1713920 */
		/* 822339A0h case    2:*/		return 0x820912A0;
		/* 822339A0h case    2:*/		return 0x822339A4;
		  /* 822339A4h */ case    3:  		/* nop */
		/* 822339A4h case    3:*/		cpu::op::nop();
		/* 822339A4h case    3:*/		return 0x822339A8;
	}
	return 0x822339A8;
} // Block from 82233998h-822339A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822339A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822339A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822339A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822339A8);
		  /* 822339A8h */ case    0:  		/* mfspr R12, LR */
		/* 822339A8h case    0:*/		regs.R12 = regs.LR;
		/* 822339A8h case    0:*/		return 0x822339AC;
		  /* 822339ACh */ case    1:  		/* bl -1714012 */
		/* 822339ACh case    1:*/		regs.LR = 0x822339B0; return 0x82091250;
		/* 822339ACh case    1:*/		return 0x822339B0;
		  /* 822339B0h */ case    2:  		/* stfd FR31, <#[R1 - 64]> */
		/* 822339B0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 822339B0h case    2:*/		return 0x822339B4;
		  /* 822339B4h */ case    3:  		/* stwu R1, <#[R1 - 176]> */
		/* 822339B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 822339B4h case    3:*/		return 0x822339B8;
		  /* 822339B8h */ case    4:  		/* lis R11, -32253 */
		/* 822339B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822339B8h case    4:*/		return 0x822339BC;
		  /* 822339BCh */ case    5:  		/* lis R10, -32252 */
		/* 822339BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822339BCh case    5:*/		return 0x822339C0;
		  /* 822339C0h */ case    6:  		/* mr R31, R3 */
		/* 822339C0h case    6:*/		regs.R31 = regs.R3;
		/* 822339C0h case    6:*/		return 0x822339C4;
		  /* 822339C4h */ case    7:  		/* mr R30, R5 */
		/* 822339C4h case    7:*/		regs.R30 = regs.R5;
		/* 822339C4h case    7:*/		return 0x822339C8;
		  /* 822339C8h */ case    8:  		/* mr R27, R6 */
		/* 822339C8h case    8:*/		regs.R27 = regs.R6;
		/* 822339C8h case    8:*/		return 0x822339CC;
		  /* 822339CCh */ case    9:  		/* mr R26, R7 */
		/* 822339CCh case    9:*/		regs.R26 = regs.R7;
		/* 822339CCh case    9:*/		return 0x822339D0;
		  /* 822339D0h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 822339D0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822339D0h case   10:*/		return 0x822339D4;
		  /* 822339D4h */ case   11:  		/* addi R29, R11, 27460 */
		/* 822339D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 822339D4h case   11:*/		return 0x822339D8;
		  /* 822339D8h */ case   12:  		/* addi R28, R10, 4336 */
		/* 822339D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x10F0);
		/* 822339D8h case   12:*/		return 0x822339DC;
		  /* 822339DCh */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 822339DCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x822339FC;  }
		/* 822339DCh case   13:*/		return 0x822339E0;
		  /* 822339E0h */ case   14:  		/* lis R11, -32253 */
		/* 822339E0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822339E0h case   14:*/		return 0x822339E4;
		  /* 822339E4h */ case   15:  		/* mr R6, R28 */
		/* 822339E4h case   15:*/		regs.R6 = regs.R28;
		/* 822339E4h case   15:*/		return 0x822339E8;
		  /* 822339E8h */ case   16:  		/* addi R5, R11, 27792 */
		/* 822339E8h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 822339E8h case   16:*/		return 0x822339EC;
		  /* 822339ECh */ case   17:  		/* mr R4, R29 */
		/* 822339ECh case   17:*/		regs.R4 = regs.R29;
		/* 822339ECh case   17:*/		return 0x822339F0;
		  /* 822339F0h */ case   18:  		/* li R7, 3800 */
		/* 822339F0h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0xED8);
		/* 822339F0h case   18:*/		return 0x822339F4;
		  /* 822339F4h */ case   19:  		/* li R3, 0 */
		/* 822339F4h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822339F4h case   19:*/		return 0x822339F8;
		  /* 822339F8h */ case   20:  		/* bl -900592 */
		/* 822339F8h case   20:*/		regs.LR = 0x822339FC; return 0x82157C08;
		/* 822339F8h case   20:*/		return 0x822339FC;
	}
	return 0x822339FC;
} // Block from 822339A8h-822339FCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 822339FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822339FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822339FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822339FC);
		  /* 822339FCh */ case    0:  		/* li R4, 165 */
		/* 822339FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 822339FCh case    0:*/		return 0x82233A00;
		  /* 82233A00h */ case    1:  		/* mr R3, R31 */
		/* 82233A00h case    1:*/		regs.R3 = regs.R31;
		/* 82233A00h case    1:*/		return 0x82233A04;
		  /* 82233A04h */ case    2:  		/* bl -877812 */
		/* 82233A04h case    2:*/		regs.LR = 0x82233A08; return 0x8215D510;
		/* 82233A04h case    2:*/		return 0x82233A08;
		  /* 82233A08h */ case    3:  		/* cmplwi CR6, R3, 3 */
		/* 82233A08h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 82233A08h case    3:*/		return 0x82233A0C;
		  /* 82233A0Ch */ case    4:  		/* mr R3, R31 */
		/* 82233A0Ch case    4:*/		regs.R3 = regs.R31;
		/* 82233A0Ch case    4:*/		return 0x82233A10;
		  /* 82233A10h */ case    5:  		/* bc 4, CR6_EQ, 80 */
		/* 82233A10h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82233A60;  }
		/* 82233A10h case    5:*/		return 0x82233A14;
		  /* 82233A14h */ case    6:  		/* li R4, 166 */
		/* 82233A14h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0xA6);
		/* 82233A14h case    6:*/		return 0x82233A18;
		  /* 82233A18h */ case    7:  		/* bl -151840 */
		/* 82233A18h case    7:*/		regs.LR = 0x82233A1C; return 0x8220E8F8;
		/* 82233A18h case    7:*/		return 0x82233A1C;
		  /* 82233A1Ch */ case    8:  		/* li R4, 167 */
		/* 82233A1Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xA7);
		/* 82233A1Ch case    8:*/		return 0x82233A20;
		  /* 82233A20h */ case    9:  		/* mr R3, R31 */
		/* 82233A20h case    9:*/		regs.R3 = regs.R31;
		/* 82233A20h case    9:*/		return 0x82233A24;
		  /* 82233A24h */ case   10:  		/* fmr FR31, FR1 */
		/* 82233A24h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82233A24h case   10:*/		return 0x82233A28;
		  /* 82233A28h */ case   11:  		/* bl -151856 */
		/* 82233A28h case   11:*/		regs.LR = 0x82233A2C; return 0x8220E8F8;
		/* 82233A28h case   11:*/		return 0x82233A2C;
		  /* 82233A2Ch */ case   12:  		/* fsubs FR0, FR1, FR31 */
		/* 82233A2Ch case   12:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR1,regs.FR31);
		/* 82233A2Ch case   12:*/		return 0x82233A30;
		  /* 82233A30h */ case   13:  		/* lis R11, -32256 */
		/* 82233A30h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82233A30h case   13:*/		return 0x82233A34;
		  /* 82233A34h */ case   14:  		/* lfs FR13, <#[R11 + 1816]> */
		/* 82233A34h case   14:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000718) );
		/* 82233A34h case   14:*/		return 0x82233A38;
		  /* 82233A38h */ case   15:  		/* fcmpu CR6, FR0, FR13 */
		/* 82233A38h case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 82233A38h case   15:*/		return 0x82233A3C;
		  /* 82233A3Ch */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 82233A3Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82233A50;  }
		/* 82233A3Ch case   16:*/		return 0x82233A40;
		  /* 82233A40h */ case   17:  		/* lis R11, 32639 */
		/* 82233A40h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F7F);
		/* 82233A40h case   17:*/		return 0x82233A44;
		  /* 82233A44h */ case   18:  		/* ori R11, R11, 65535 */
		/* 82233A44h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 82233A44h case   18:*/		return 0x82233A48;
		  /* 82233A48h */ case   19:  		/* stw R11, <#[R30]> */
		/* 82233A48h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82233A48h case   19:*/		return 0x82233A4C;
		  /* 82233A4Ch */ case   20:  		/* b 56 */
		/* 82233A4Ch case   20:*/		return 0x82233A84;
		/* 82233A4Ch case   20:*/		return 0x82233A50;
	}
	return 0x82233A50;
} // Block from 822339FCh-82233A50h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82233A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233A50);
		  /* 82233A50h */ case    0:  		/* lis R11, -32256 */
		/* 82233A50h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82233A50h case    0:*/		return 0x82233A54;
		  /* 82233A54h */ case    1:  		/* lfs FR13, <#[R11 + 1792]> */
		/* 82233A54h case    1:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000700) );
		/* 82233A54h case    1:*/		return 0x82233A58;
		  /* 82233A58h */ case    2:  		/* fdivs FR0, FR13, FR0 */
		/* 82233A58h case    2:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 82233A58h case    2:*/		return 0x82233A5C;
		  /* 82233A5Ch */ case    3:  		/* b 36 */
		/* 82233A5Ch case    3:*/		return 0x82233A80;
		/* 82233A5Ch case    3:*/		return 0x82233A60;
	}
	return 0x82233A60;
} // Block from 82233A50h-82233A60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233A60);
		  /* 82233A60h */ case    0:  		/* li R4, 168 */
		/* 82233A60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA8);
		/* 82233A60h case    0:*/		return 0x82233A64;
		  /* 82233A64h */ case    1:  		/* bl -151916 */
		/* 82233A64h case    1:*/		regs.LR = 0x82233A68; return 0x8220E8F8;
		/* 82233A64h case    1:*/		return 0x82233A68;
		  /* 82233A68h */ case    2:  		/* lis R11, -32252 */
		/* 82233A68h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233A68h case    2:*/		return 0x82233A6C;
		  /* 82233A6Ch */ case    3:  		/* lis R10, -32256 */
		/* 82233A6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82233A6Ch case    3:*/		return 0x82233A70;
		  /* 82233A70h */ case    4:  		/* lfs FR0, <#[R11 - 7540]> */
		/* 82233A70h case    4:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFE28C) );
		/* 82233A70h case    4:*/		return 0x82233A74;
		  /* 82233A74h */ case    5:  		/* fdivs FR13, FR0, FR1 */
		/* 82233A74h case    5:*/		cpu::op::fdivs<0>(regs,&regs.FR13,regs.FR0,regs.FR1);
		/* 82233A74h case    5:*/		return 0x82233A78;
		  /* 82233A78h */ case    6:  		/* lfs FR0, <#[R10 + 1792]> */
		/* 82233A78h case    6:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000700) );
		/* 82233A78h case    6:*/		return 0x82233A7C;
		  /* 82233A7Ch */ case    7:  		/* fdivs FR0, FR0, FR13 */
		/* 82233A7Ch case    7:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82233A7Ch case    7:*/		return 0x82233A80;
	}
	return 0x82233A80;
} // Block from 82233A60h-82233A80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82233A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233A80);
		  /* 82233A80h */ case    0:  		/* stfs FR0, <#[R30]> */
		/* 82233A80h case    0:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R30 + 0x00000000) );
		/* 82233A80h case    0:*/		return 0x82233A84;
	}
	return 0x82233A84;
} // Block from 82233A80h-82233A84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233A84);
		  /* 82233A84h */ case    0:  		/* li R4, 170 */
		/* 82233A84h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xAA);
		/* 82233A84h case    0:*/		return 0x82233A88;
		  /* 82233A88h */ case    1:  		/* mr R3, R31 */
		/* 82233A88h case    1:*/		regs.R3 = regs.R31;
		/* 82233A88h case    1:*/		return 0x82233A8C;
		  /* 82233A8Ch */ case    2:  		/* bl -877948 */
		/* 82233A8Ch case    2:*/		regs.LR = 0x82233A90; return 0x8215D510;
		/* 82233A8Ch case    2:*/		return 0x82233A90;
		  /* 82233A90h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82233A90h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82233A90h case    3:*/		return 0x82233A94;
		  /* 82233A94h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 82233A94h case    4:*/		if ( regs.CR[6].eq ) { return 0x82233AB4;  }
		/* 82233A94h case    4:*/		return 0x82233A98;
		  /* 82233A98h */ case    5:  		/* lis R11, -32252 */
		/* 82233A98h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233A98h case    5:*/		return 0x82233A9C;
		  /* 82233A9Ch */ case    6:  		/* mr R6, R28 */
		/* 82233A9Ch case    6:*/		regs.R6 = regs.R28;
		/* 82233A9Ch case    6:*/		return 0x82233AA0;
		  /* 82233AA0h */ case    7:  		/* addi R5, R11, 4864 */
		/* 82233AA0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1300);
		/* 82233AA0h case    7:*/		return 0x82233AA4;
		  /* 82233AA4h */ case    8:  		/* mr R4, R29 */
		/* 82233AA4h case    8:*/		regs.R4 = regs.R29;
		/* 82233AA4h case    8:*/		return 0x82233AA8;
		  /* 82233AA8h */ case    9:  		/* li R7, 3827 */
		/* 82233AA8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xEF3);
		/* 82233AA8h case    9:*/		return 0x82233AAC;
		  /* 82233AACh */ case   10:  		/* li R3, 0 */
		/* 82233AACh case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82233AACh case   10:*/		return 0x82233AB0;
		  /* 82233AB0h */ case   11:  		/* bl -900776 */
		/* 82233AB0h case   11:*/		regs.LR = 0x82233AB4; return 0x82157C08;
		/* 82233AB0h case   11:*/		return 0x82233AB4;
	}
	return 0x82233AB4;
} // Block from 82233A84h-82233AB4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82233AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233AB4);
		  /* 82233AB4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82233AB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233AB4h case    0:*/		return 0x82233AB8;
		  /* 82233AB8h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 82233AB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82233AF8;  }
		/* 82233AB8h case    1:*/		return 0x82233ABC;
		  /* 82233ABCh */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82233ABCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82233ABCh case    2:*/		return 0x82233AC0;
		  /* 82233AC0h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 82233AC0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82233AF8;  }
		/* 82233AC0h case    3:*/		return 0x82233AC4;
		  /* 82233AC4h */ case    4:  		/* addi R4, R1, 80 */
		/* 82233AC4h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233AC4h case    4:*/		return 0x82233AC8;
		  /* 82233AC8h */ case    5:  		/* lfs FR1, <#[R30]> */
		/* 82233AC8h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 82233AC8h case    5:*/		return 0x82233ACC;
		  /* 82233ACCh */ case    6:  		/* bl -15468 */
		/* 82233ACCh case    6:*/		regs.LR = 0x82233AD0; return 0x8222FE60;
		/* 82233ACCh case    6:*/		return 0x82233AD0;
		  /* 82233AD0h */ case    7:  		/* lis R11, -32216 */
		/* 82233AD0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233AD0h case    7:*/		return 0x82233AD4;
		  /* 82233AD4h */ case    8:  		/* lis R10, -32252 */
		/* 82233AD4h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233AD4h case    8:*/		return 0x82233AD8;
		  /* 82233AD8h */ case    9:  		/* mtspr CTR, R27 */
		/* 82233AD8h case    9:*/		regs.CTR = regs.R27;
		/* 82233AD8h case    9:*/		return 0x82233ADC;
		  /* 82233ADCh */ case   10:  		/* addi R11, R11, 11160 */
		/* 82233ADCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233ADCh case   10:*/		return 0x82233AE0;
		  /* 82233AE0h */ case   11:  		/* addi R4, R10, 4668 */
		/* 82233AE0h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233AE0h case   11:*/		return 0x82233AE4;
		  /* 82233AE4h */ case   12:  		/* addi R7, R1, 80 */
		/* 82233AE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233AE4h case   12:*/		return 0x82233AE8;
	}
	return 0x82233AE8;
} // Block from 82233AB4h-82233AE8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82233AE8h
// Function '?CompileGetTexClampMode@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAH11P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233AE8);
		  /* 82233AE8h */ case    0:  		/* li R6, 27 */
		/* 82233AE8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1B);
		/* 82233AE8h case    0:*/		return 0x82233AEC;
		  /* 82233AECh */ case    1:  		/* mr R3, R26 */
		/* 82233AECh case    1:*/		regs.R3 = regs.R26;
		/* 82233AECh case    1:*/		return 0x82233AF0;
		  /* 82233AF0h */ case    2:  		/* lwz R5, <#[R11 + 108]> */
		/* 82233AF0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000006C) );
		/* 82233AF0h case    2:*/		return 0x82233AF4;
		  /* 82233AF4h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82233AF4h case    3:*/		if ( 1 ) { regs.LR = 0x82233AF8; return (uint32)regs.CTR; }
		/* 82233AF4h case    3:*/		return 0x82233AF8;
	}
	return 0x82233AF8;
} // Block from 82233AE8h-82233AF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233AF8);
		  /* 82233AF8h */ case    0:  		/* li R3, 1 */
		/* 82233AF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233AF8h case    0:*/		return 0x82233AFC;
		  /* 82233AFCh */ case    1:  		/* addi R1, R1, 176 */
		/* 82233AFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82233AFCh case    1:*/		return 0x82233B00;
		  /* 82233B00h */ case    2:  		/* lfd FR31, <#[R1 - 64]> */
		/* 82233B00h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 82233B00h case    2:*/		return 0x82233B04;
		  /* 82233B04h */ case    3:  		/* b -1714276 */
		/* 82233B04h case    3:*/		return 0x820912A0;
		/* 82233B04h case    3:*/		return 0x82233B08;
	}
	return 0x82233B08;
} // Block from 82233AF8h-82233B08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233B08);
		  /* 82233B08h */ case    0:  		/* mfspr R12, LR */
		/* 82233B08h case    0:*/		regs.R12 = regs.LR;
		/* 82233B08h case    0:*/		return 0x82233B0C;
		  /* 82233B0Ch */ case    1:  		/* bl -1714356 */
		/* 82233B0Ch case    1:*/		regs.LR = 0x82233B10; return 0x82091258;
		/* 82233B0Ch case    1:*/		return 0x82233B10;
		  /* 82233B10h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233B10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233B10h case    2:*/		return 0x82233B14;
		  /* 82233B14h */ case    3:  		/* mr R31, R3 */
		/* 82233B14h case    3:*/		regs.R31 = regs.R3;
		/* 82233B14h case    3:*/		return 0x82233B18;
		  /* 82233B18h */ case    4:  		/* mr R29, R5 */
		/* 82233B18h case    4:*/		regs.R29 = regs.R5;
		/* 82233B18h case    4:*/		return 0x82233B1C;
		  /* 82233B1Ch */ case    5:  		/* mr R30, R6 */
		/* 82233B1Ch case    5:*/		regs.R30 = regs.R6;
		/* 82233B1Ch case    5:*/		return 0x82233B20;
		  /* 82233B20h */ case    6:  		/* mr R28, R7 */
		/* 82233B20h case    6:*/		regs.R28 = regs.R7;
		/* 82233B20h case    6:*/		return 0x82233B24;
		  /* 82233B24h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82233B24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233B24h case    7:*/		return 0x82233B28;
		  /* 82233B28h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82233B28h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82233B4C;  }
		/* 82233B28h case    8:*/		return 0x82233B2C;
		  /* 82233B2Ch */ case    9:  		/* lis R11, -32252 */
		/* 82233B2Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233B2Ch case    9:*/		return 0x82233B30;
		  /* 82233B30h */ case   10:  		/* lis R10, -32253 */
		/* 82233B30h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233B30h case   10:*/		return 0x82233B34;
		  /* 82233B34h */ case   11:  		/* lis R9, -32253 */
		/* 82233B34h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233B34h case   11:*/		return 0x82233B38;
		  /* 82233B38h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82233B38h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233B38h case   12:*/		return 0x82233B3C;
		  /* 82233B3Ch */ case   13:  		/* addi R5, R10, 27792 */
		/* 82233B3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233B3Ch case   13:*/		return 0x82233B40;
		  /* 82233B40h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82233B40h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233B40h case   14:*/		return 0x82233B44;
		  /* 82233B44h */ case   15:  		/* li R7, 3857 */
		/* 82233B44h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xF11);
		/* 82233B44h case   15:*/		return 0x82233B48;
		  /* 82233B48h */ case   16:  		/* bl -900928 */
		/* 82233B48h case   16:*/		regs.LR = 0x82233B4C; return 0x82157C08;
		/* 82233B48h case   16:*/		return 0x82233B4C;
	}
	return 0x82233B4C;
} // Block from 82233B08h-82233B4Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82233B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233B4C);
		  /* 82233B4Ch */ case    0:  		/* li R4, 998 */
		/* 82233B4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3E6);
		/* 82233B4Ch case    0:*/		return 0x82233B50;
		  /* 82233B50h */ case    1:  		/* mr R3, R31 */
		/* 82233B50h case    1:*/		regs.R3 = regs.R31;
		/* 82233B50h case    1:*/		return 0x82233B54;
		  /* 82233B54h */ case    2:  		/* bl -152156 */
		/* 82233B54h case    2:*/		regs.LR = 0x82233B58; return 0x8220E8F8;
		/* 82233B54h case    2:*/		return 0x82233B58;
		  /* 82233B58h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233B58h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233B58h case    3:*/		return 0x82233B5C;
		  /* 82233B5Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82233B5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82233B5Ch case    4:*/		return 0x82233B60;
		  /* 82233B60h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233B60h case    5:*/		if ( regs.CR[6].eq ) { return 0x82233B9C;  }
		/* 82233B60h case    5:*/		return 0x82233B64;
		  /* 82233B64h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233B64h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233B64h case    6:*/		return 0x82233B68;
		  /* 82233B68h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233B68h case    7:*/		if ( regs.CR[6].eq ) { return 0x82233B9C;  }
		/* 82233B68h case    7:*/		return 0x82233B6C;
		  /* 82233B6Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 82233B6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233B6Ch case    8:*/		return 0x82233B70;
		  /* 82233B70h */ case    9:  		/* bl -15632 */
		/* 82233B70h case    9:*/		regs.LR = 0x82233B74; return 0x8222FE60;
		/* 82233B70h case    9:*/		return 0x82233B74;
		  /* 82233B74h */ case   10:  		/* lis R11, -32216 */
		/* 82233B74h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233B74h case   10:*/		return 0x82233B78;
		  /* 82233B78h */ case   11:  		/* lis R10, -32252 */
		/* 82233B78h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233B78h case   11:*/		return 0x82233B7C;
		  /* 82233B7Ch */ case   12:  		/* mtspr CTR, R30 */
		/* 82233B7Ch case   12:*/		regs.CTR = regs.R30;
		/* 82233B7Ch case   12:*/		return 0x82233B80;
		  /* 82233B80h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82233B80h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233B80h case   13:*/		return 0x82233B84;
		  /* 82233B84h */ case   14:  		/* addi R4, R10, 4668 */
		/* 82233B84h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233B84h case   14:*/		return 0x82233B88;
		  /* 82233B88h */ case   15:  		/* addi R7, R1, 80 */
		/* 82233B88h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233B88h case   15:*/		return 0x82233B8C;
		  /* 82233B8Ch */ case   16:  		/* li R6, 93 */
		/* 82233B8Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x5D);
		/* 82233B8Ch case   16:*/		return 0x82233B90;
		  /* 82233B90h */ case   17:  		/* mr R3, R28 */
		/* 82233B90h case   17:*/		regs.R3 = regs.R28;
		/* 82233B90h case   17:*/		return 0x82233B94;
		  /* 82233B94h */ case   18:  		/* lwz R5, <#[R11 + 372]> */
		/* 82233B94h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000174) );
		/* 82233B94h case   18:*/		return 0x82233B98;
		  /* 82233B98h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82233B98h case   19:*/		if ( 1 ) { regs.LR = 0x82233B9C; return (uint32)regs.CTR; }
		/* 82233B98h case   19:*/		return 0x82233B9C;
	}
	return 0x82233B9C;
} // Block from 82233B4Ch-82233B9Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 82233B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233B9C);
		  /* 82233B9Ch */ case    0:  		/* li R3, 1 */
		/* 82233B9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233B9Ch case    0:*/		return 0x82233BA0;
	}
	return 0x82233BA0;
} // Block from 82233B9Ch-82233BA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233BA0h
// Function '?CompileGetPointSizeMax@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233BA0);
		  /* 82233BA0h */ case    0:  		/* addi R1, R1, 160 */
		/* 82233BA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233BA0h case    0:*/		return 0x82233BA4;
		  /* 82233BA4h */ case    1:  		/* b -1714428 */
		/* 82233BA4h case    1:*/		return 0x820912A8;
		/* 82233BA4h case    1:*/		return 0x82233BA8;
	}
	return 0x82233BA8;
} // Block from 82233BA0h-82233BA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82233BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233BA8);
		  /* 82233BA8h */ case    0:  		/* mfspr R12, LR */
		/* 82233BA8h case    0:*/		regs.R12 = regs.LR;
		/* 82233BA8h case    0:*/		return 0x82233BAC;
		  /* 82233BACh */ case    1:  		/* bl -1714516 */
		/* 82233BACh case    1:*/		regs.LR = 0x82233BB0; return 0x82091258;
		/* 82233BACh case    1:*/		return 0x82233BB0;
		  /* 82233BB0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233BB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233BB0h case    2:*/		return 0x82233BB4;
		  /* 82233BB4h */ case    3:  		/* mr R31, R3 */
		/* 82233BB4h case    3:*/		regs.R31 = regs.R3;
		/* 82233BB4h case    3:*/		return 0x82233BB8;
		  /* 82233BB8h */ case    4:  		/* mr R29, R5 */
		/* 82233BB8h case    4:*/		regs.R29 = regs.R5;
		/* 82233BB8h case    4:*/		return 0x82233BBC;
		  /* 82233BBCh */ case    5:  		/* mr R30, R6 */
		/* 82233BBCh case    5:*/		regs.R30 = regs.R6;
		/* 82233BBCh case    5:*/		return 0x82233BC0;
		  /* 82233BC0h */ case    6:  		/* mr R28, R7 */
		/* 82233BC0h case    6:*/		regs.R28 = regs.R7;
		/* 82233BC0h case    6:*/		return 0x82233BC4;
		  /* 82233BC4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82233BC4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233BC4h case    7:*/		return 0x82233BC8;
		  /* 82233BC8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82233BC8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82233BEC;  }
		/* 82233BC8h case    8:*/		return 0x82233BCC;
		  /* 82233BCCh */ case    9:  		/* lis R11, -32252 */
		/* 82233BCCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233BCCh case    9:*/		return 0x82233BD0;
		  /* 82233BD0h */ case   10:  		/* lis R10, -32253 */
		/* 82233BD0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233BD0h case   10:*/		return 0x82233BD4;
		  /* 82233BD4h */ case   11:  		/* lis R9, -32253 */
		/* 82233BD4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233BD4h case   11:*/		return 0x82233BD8;
		  /* 82233BD8h */ case   12:  		/* addi R6, R11, 4336 */
		/* 82233BD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233BD8h case   12:*/		return 0x82233BDC;
		  /* 82233BDCh */ case   13:  		/* addi R5, R10, 27792 */
		/* 82233BDCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233BDCh case   13:*/		return 0x82233BE0;
		  /* 82233BE0h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82233BE0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233BE0h case   14:*/		return 0x82233BE4;
		  /* 82233BE4h */ case   15:  		/* li R7, 3889 */
		/* 82233BE4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xF31);
		/* 82233BE4h case   15:*/		return 0x82233BE8;
		  /* 82233BE8h */ case   16:  		/* bl -901088 */
		/* 82233BE8h case   16:*/		regs.LR = 0x82233BEC; return 0x82157C08;
		/* 82233BE8h case   16:*/		return 0x82233BEC;
	}
	return 0x82233BEC;
} // Block from 82233BA8h-82233BECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82233BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233BEC);
		  /* 82233BECh */ case    0:  		/* li R4, 999 */
		/* 82233BECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3E7);
		/* 82233BECh case    0:*/		return 0x82233BF0;
		  /* 82233BF0h */ case    1:  		/* mr R3, R31 */
		/* 82233BF0h case    1:*/		regs.R3 = regs.R31;
		/* 82233BF0h case    1:*/		return 0x82233BF4;
		  /* 82233BF4h */ case    2:  		/* bl -152316 */
		/* 82233BF4h case    2:*/		regs.LR = 0x82233BF8; return 0x8220E8F8;
		/* 82233BF4h case    2:*/		return 0x82233BF8;
		  /* 82233BF8h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233BF8h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233BF8h case    3:*/		return 0x82233BFC;
		  /* 82233BFCh */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82233BFCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82233BFCh case    4:*/		return 0x82233C00;
		  /* 82233C00h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233C00h case    5:*/		if ( regs.CR[6].eq ) { return 0x82233C3C;  }
		/* 82233C00h case    5:*/		return 0x82233C04;
		  /* 82233C04h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233C04h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233C04h case    6:*/		return 0x82233C08;
		  /* 82233C08h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233C08h case    7:*/		if ( regs.CR[6].eq ) { return 0x82233C3C;  }
		/* 82233C08h case    7:*/		return 0x82233C0C;
		  /* 82233C0Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 82233C0Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233C0Ch case    8:*/		return 0x82233C10;
		  /* 82233C10h */ case    9:  		/* bl -15792 */
		/* 82233C10h case    9:*/		regs.LR = 0x82233C14; return 0x8222FE60;
		/* 82233C10h case    9:*/		return 0x82233C14;
		  /* 82233C14h */ case   10:  		/* lis R11, -32216 */
		/* 82233C14h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233C14h case   10:*/		return 0x82233C18;
		  /* 82233C18h */ case   11:  		/* lis R10, -32252 */
		/* 82233C18h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233C18h case   11:*/		return 0x82233C1C;
		  /* 82233C1Ch */ case   12:  		/* mtspr CTR, R30 */
		/* 82233C1Ch case   12:*/		regs.CTR = regs.R30;
		/* 82233C1Ch case   12:*/		return 0x82233C20;
		  /* 82233C20h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82233C20h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233C20h case   13:*/		return 0x82233C24;
		  /* 82233C24h */ case   14:  		/* addi R4, R10, 4668 */
		/* 82233C24h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233C24h case   14:*/		return 0x82233C28;
		  /* 82233C28h */ case   15:  		/* addi R7, R1, 80 */
		/* 82233C28h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233C28h case   15:*/		return 0x82233C2C;
		  /* 82233C2Ch */ case   16:  		/* li R6, 94 */
		/* 82233C2Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x5E);
		/* 82233C2Ch case   16:*/		return 0x82233C30;
		  /* 82233C30h */ case   17:  		/* mr R3, R28 */
		/* 82233C30h case   17:*/		regs.R3 = regs.R28;
		/* 82233C30h case   17:*/		return 0x82233C34;
		  /* 82233C34h */ case   18:  		/* lwz R5, <#[R11 + 376]> */
		/* 82233C34h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000178) );
		/* 82233C34h case   18:*/		return 0x82233C38;
		  /* 82233C38h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82233C38h case   19:*/		if ( 1 ) { regs.LR = 0x82233C3C; return (uint32)regs.CTR; }
		/* 82233C38h case   19:*/		return 0x82233C3C;
	}
	return 0x82233C3C;
} // Block from 82233BECh-82233C3Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 82233C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C3C);
		  /* 82233C3Ch */ case    0:  		/* li R3, 1 */
		/* 82233C3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233C3Ch case    0:*/		return 0x82233C40;
	}
	return 0x82233C40;
} // Block from 82233C3Ch-82233C40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233C40h
// Function '?CompileGetPointSizeMin@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C40);
		  /* 82233C40h */ case    0:  		/* addi R1, R1, 160 */
		/* 82233C40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233C40h case    0:*/		return 0x82233C44;
		  /* 82233C44h */ case    1:  		/* b -1714588 */
		/* 82233C44h case    1:*/		return 0x820912A8;
		/* 82233C44h case    1:*/		return 0x82233C48;
	}
	return 0x82233C48;
} // Block from 82233C40h-82233C48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82233C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C48);
		  /* 82233C48h */ case    0:  		/* lis R11, -32252 */
		/* 82233C48h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233C48h case    0:*/		return 0x82233C4C;
		  /* 82233C4Ch */ case    1:  		/* li R3, 1 */
		/* 82233C4Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233C4Ch case    1:*/		return 0x82233C50;
		  /* 82233C50h */ case    2:  		/* lfs FR0, <#[R11 - 5496]> */
		/* 82233C50h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA88) );
		/* 82233C50h case    2:*/		return 0x82233C54;
		  /* 82233C54h */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233C54h case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233C54h case    3:*/		return 0x82233C58;
		  /* 82233C58h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233C58h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233C58h case    4:*/		return 0x82233C5C;
	}
	return 0x82233C5C;
} // Block from 82233C48h-82233C5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C5C);
		  /* 82233C5Ch */ case    0:  		/* nop */
		/* 82233C5Ch case    0:*/		cpu::op::nop();
		/* 82233C5Ch case    0:*/		return 0x82233C60;
	}
	return 0x82233C60;
} // Block from 82233C5Ch-82233C60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C60);
		  /* 82233C60h */ case    0:  		/* lis R11, -32252 */
		/* 82233C60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233C60h case    0:*/		return 0x82233C64;
		  /* 82233C64h */ case    1:  		/* li R3, 1 */
		/* 82233C64h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233C64h case    1:*/		return 0x82233C68;
		  /* 82233C68h */ case    2:  		/* lfs FR0, <#[R11 - 5500]> */
		/* 82233C68h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA84) );
		/* 82233C68h case    2:*/		return 0x82233C6C;
		  /* 82233C6Ch */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233C6Ch case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233C6Ch case    3:*/		return 0x82233C70;
		  /* 82233C70h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233C70h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233C70h case    4:*/		return 0x82233C74;
	}
	return 0x82233C74;
} // Block from 82233C60h-82233C74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C74);
		  /* 82233C74h */ case    0:  		/* nop */
		/* 82233C74h case    0:*/		cpu::op::nop();
		/* 82233C74h case    0:*/		return 0x82233C78;
	}
	return 0x82233C78;
} // Block from 82233C74h-82233C78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C78);
		  /* 82233C78h */ case    0:  		/* lis R11, -32252 */
		/* 82233C78h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233C78h case    0:*/		return 0x82233C7C;
		  /* 82233C7Ch */ case    1:  		/* li R3, 1 */
		/* 82233C7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233C7Ch case    1:*/		return 0x82233C80;
		  /* 82233C80h */ case    2:  		/* lfs FR0, <#[R11 - 5504]> */
		/* 82233C80h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA80) );
		/* 82233C80h case    2:*/		return 0x82233C84;
		  /* 82233C84h */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233C84h case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233C84h case    3:*/		return 0x82233C88;
		  /* 82233C88h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233C88h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233C88h case    4:*/		return 0x82233C8C;
	}
	return 0x82233C8C;
} // Block from 82233C78h-82233C8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C8C);
		  /* 82233C8Ch */ case    0:  		/* nop */
		/* 82233C8Ch case    0:*/		cpu::op::nop();
		/* 82233C8Ch case    0:*/		return 0x82233C90;
	}
	return 0x82233C90;
} // Block from 82233C8Ch-82233C90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233C90);
		  /* 82233C90h */ case    0:  		/* lis R11, -32252 */
		/* 82233C90h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233C90h case    0:*/		return 0x82233C94;
		  /* 82233C94h */ case    1:  		/* li R3, 1 */
		/* 82233C94h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233C94h case    1:*/		return 0x82233C98;
		  /* 82233C98h */ case    2:  		/* lfs FR0, <#[R11 - 5508]> */
		/* 82233C98h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA7C) );
		/* 82233C98h case    2:*/		return 0x82233C9C;
		  /* 82233C9Ch */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233C9Ch case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233C9Ch case    3:*/		return 0x82233CA0;
		  /* 82233CA0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233CA0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233CA0h case    4:*/		return 0x82233CA4;
	}
	return 0x82233CA4;
} // Block from 82233C90h-82233CA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CA4);
		  /* 82233CA4h */ case    0:  		/* nop */
		/* 82233CA4h case    0:*/		cpu::op::nop();
		/* 82233CA4h case    0:*/		return 0x82233CA8;
	}
	return 0x82233CA8;
} // Block from 82233CA4h-82233CA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CA8);
		  /* 82233CA8h */ case    0:  		/* lis R11, -32252 */
		/* 82233CA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233CA8h case    0:*/		return 0x82233CAC;
		  /* 82233CACh */ case    1:  		/* li R3, 1 */
		/* 82233CACh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233CACh case    1:*/		return 0x82233CB0;
		  /* 82233CB0h */ case    2:  		/* lfs FR0, <#[R11 - 5512]> */
		/* 82233CB0h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA78) );
		/* 82233CB0h case    2:*/		return 0x82233CB4;
		  /* 82233CB4h */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233CB4h case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233CB4h case    3:*/		return 0x82233CB8;
		  /* 82233CB8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233CB8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233CB8h case    4:*/		return 0x82233CBC;
	}
	return 0x82233CBC;
} // Block from 82233CA8h-82233CBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CBC);
		  /* 82233CBCh */ case    0:  		/* nop */
		/* 82233CBCh case    0:*/		cpu::op::nop();
		/* 82233CBCh case    0:*/		return 0x82233CC0;
	}
	return 0x82233CC0;
} // Block from 82233CBCh-82233CC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CC0);
		  /* 82233CC0h */ case    0:  		/* lis R11, -32252 */
		/* 82233CC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233CC0h case    0:*/		return 0x82233CC4;
		  /* 82233CC4h */ case    1:  		/* li R3, 1 */
		/* 82233CC4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233CC4h case    1:*/		return 0x82233CC8;
		  /* 82233CC8h */ case    2:  		/* lfs FR0, <#[R11 - 5516]> */
		/* 82233CC8h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA74) );
		/* 82233CC8h case    2:*/		return 0x82233CCC;
		  /* 82233CCCh */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233CCCh case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233CCCh case    3:*/		return 0x82233CD0;
		  /* 82233CD0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233CD0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233CD0h case    4:*/		return 0x82233CD4;
	}
	return 0x82233CD4;
} // Block from 82233CC0h-82233CD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233CD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CD4);
		  /* 82233CD4h */ case    0:  		/* nop */
		/* 82233CD4h case    0:*/		cpu::op::nop();
		/* 82233CD4h case    0:*/		return 0x82233CD8;
	}
	return 0x82233CD8;
} // Block from 82233CD4h-82233CD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CD8);
		  /* 82233CD8h */ case    0:  		/* lis R11, -32256 */
		/* 82233CD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82233CD8h case    0:*/		return 0x82233CDC;
		  /* 82233CDCh */ case    1:  		/* li R3, 1 */
		/* 82233CDCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233CDCh case    1:*/		return 0x82233CE0;
	}
	return 0x82233CE0;
} // Block from 82233CD8h-82233CE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82233CE0h
// Function '?CompileGetWincoordOffsetsForPolyStippleX@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CE0);
		  /* 82233CE0h */ case    0:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 82233CE0h case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 82233CE0h case    0:*/		return 0x82233CE4;
		  /* 82233CE4h */ case    1:  		/* stfs FR0, <#[R5]> */
		/* 82233CE4h case    1:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233CE4h case    1:*/		return 0x82233CE8;
		  /* 82233CE8h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82233CE8h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233CE8h case    2:*/		return 0x82233CEC;
	}
	return 0x82233CEC;
} // Block from 82233CE0h-82233CECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CEC);
		  /* 82233CECh */ case    0:  		/* nop */
		/* 82233CECh case    0:*/		cpu::op::nop();
		/* 82233CECh case    0:*/		return 0x82233CF0;
	}
	return 0x82233CF0;
} // Block from 82233CECh-82233CF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CF0);
		  /* 82233CF0h */ case    0:  		/* lis R11, -32252 */
		/* 82233CF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233CF0h case    0:*/		return 0x82233CF4;
		  /* 82233CF4h */ case    1:  		/* li R3, 1 */
		/* 82233CF4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233CF4h case    1:*/		return 0x82233CF8;
	}
	return 0x82233CF8;
} // Block from 82233CF0h-82233CF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82233CF8h
// Function '?CompileGetWincoordOffsetsForPolyStippleY@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233CF8);
		  /* 82233CF8h */ case    0:  		/* lfs FR0, <#[R11 - 5520]> */
		/* 82233CF8h case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA70) );
		/* 82233CF8h case    0:*/		return 0x82233CFC;
		  /* 82233CFCh */ case    1:  		/* stfs FR0, <#[R5]> */
		/* 82233CFCh case    1:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233CFCh case    1:*/		return 0x82233D00;
		  /* 82233D00h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82233D00h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233D00h case    2:*/		return 0x82233D04;
	}
	return 0x82233D04;
} // Block from 82233CF8h-82233D04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233D04);
		  /* 82233D04h */ case    0:  		/* nop */
		/* 82233D04h case    0:*/		cpu::op::nop();
		/* 82233D04h case    0:*/		return 0x82233D08;
	}
	return 0x82233D08;
} // Block from 82233D04h-82233D08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233D08);
		  /* 82233D08h */ case    0:  		/* lis R11, -32252 */
		/* 82233D08h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233D08h case    0:*/		return 0x82233D0C;
		  /* 82233D0Ch */ case    1:  		/* li R3, 1 */
		/* 82233D0Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233D0Ch case    1:*/		return 0x82233D10;
		  /* 82233D10h */ case    2:  		/* lfs FR0, <#[R11 - 5524]> */
		/* 82233D10h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFEA6C) );
		/* 82233D10h case    2:*/		return 0x82233D14;
		  /* 82233D14h */ case    3:  		/* stfs FR0, <#[R5]> */
		/* 82233D14h case    3:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R5 + 0x00000000) );
		/* 82233D14h case    3:*/		return 0x82233D18;
		  /* 82233D18h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82233D18h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82233D18h case    4:*/		return 0x82233D1C;
	}
	return 0x82233D1C;
} // Block from 82233D08h-82233D1Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82233D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233D1C);
		  /* 82233D1Ch */ case    0:  		/* nop */
		/* 82233D1Ch case    0:*/		cpu::op::nop();
		/* 82233D1Ch case    0:*/		return 0x82233D20;
	}
	return 0x82233D20;
} // Block from 82233D1Ch-82233D20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82233D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233D20);
		  /* 82233D20h */ case    0:  		/* mfspr R12, LR */
		/* 82233D20h case    0:*/		regs.R12 = regs.LR;
		/* 82233D20h case    0:*/		return 0x82233D24;
		  /* 82233D24h */ case    1:  		/* bl -1714896 */
		/* 82233D24h case    1:*/		regs.LR = 0x82233D28; return 0x82091254;
		/* 82233D24h case    1:*/		return 0x82233D28;
		  /* 82233D28h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233D28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233D28h case    2:*/		return 0x82233D2C;
		  /* 82233D2Ch */ case    3:  		/* mr R31, R3 */
		/* 82233D2Ch case    3:*/		regs.R31 = regs.R3;
		/* 82233D2Ch case    3:*/		return 0x82233D30;
		  /* 82233D30h */ case    4:  		/* mr R30, R4 */
		/* 82233D30h case    4:*/		regs.R30 = regs.R4;
		/* 82233D30h case    4:*/		return 0x82233D34;
		  /* 82233D34h */ case    5:  		/* mr R28, R5 */
		/* 82233D34h case    5:*/		regs.R28 = regs.R5;
		/* 82233D34h case    5:*/		return 0x82233D38;
		  /* 82233D38h */ case    6:  		/* mr R29, R6 */
		/* 82233D38h case    6:*/		regs.R29 = regs.R6;
		/* 82233D38h case    6:*/		return 0x82233D3C;
		  /* 82233D3Ch */ case    7:  		/* mr R27, R7 */
		/* 82233D3Ch case    7:*/		regs.R27 = regs.R7;
		/* 82233D3Ch case    7:*/		return 0x82233D40;
		  /* 82233D40h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82233D40h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233D40h case    8:*/		return 0x82233D44;
		  /* 82233D44h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82233D44h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82233D68;  }
		/* 82233D44h case    9:*/		return 0x82233D48;
		  /* 82233D48h */ case   10:  		/* lis R11, -32252 */
		/* 82233D48h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233D48h case   10:*/		return 0x82233D4C;
		  /* 82233D4Ch */ case   11:  		/* lis R10, -32253 */
		/* 82233D4Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233D4Ch case   11:*/		return 0x82233D50;
		  /* 82233D50h */ case   12:  		/* lis R9, -32253 */
		/* 82233D50h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233D50h case   12:*/		return 0x82233D54;
		  /* 82233D54h */ case   13:  		/* addi R6, R11, 4336 */
		/* 82233D54h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233D54h case   13:*/		return 0x82233D58;
		  /* 82233D58h */ case   14:  		/* addi R5, R10, 27792 */
		/* 82233D58h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233D58h case   14:*/		return 0x82233D5C;
		  /* 82233D5Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 82233D5Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233D5Ch case   15:*/		return 0x82233D60;
		  /* 82233D60h */ case   16:  		/* li R7, 4098 */
		/* 82233D60h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1002);
		/* 82233D60h case   16:*/		return 0x82233D64;
		  /* 82233D64h */ case   17:  		/* bl -901468 */
		/* 82233D64h case   17:*/		regs.LR = 0x82233D68; return 0x82157C08;
		/* 82233D64h case   17:*/		return 0x82233D68;
	}
	return 0x82233D68;
} // Block from 82233D20h-82233D68h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82233D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233D68);
		  /* 82233D68h */ case    0:  		/* mr R5, R30 */
		/* 82233D68h case    0:*/		regs.R5 = regs.R30;
		/* 82233D68h case    0:*/		return 0x82233D6C;
		  /* 82233D6Ch */ case    1:  		/* li R4, 86 */
		/* 82233D6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x56);
		/* 82233D6Ch case    1:*/		return 0x82233D70;
		  /* 82233D70h */ case    2:  		/* mr R3, R31 */
		/* 82233D70h case    2:*/		regs.R3 = regs.R31;
		/* 82233D70h case    2:*/		return 0x82233D74;
		  /* 82233D74h */ case    3:  		/* bl -148652 */
		/* 82233D74h case    3:*/		regs.LR = 0x82233D78; return 0x8220F8C8;
		/* 82233D74h case    3:*/		return 0x82233D78;
		  /* 82233D78h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 82233D78h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82233D78h case    4:*/		return 0x82233D7C;
		  /* 82233D7Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 82233D7Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82233D7Ch case    5:*/		return 0x82233D80;
		  /* 82233D80h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 82233D80h case    6:*/		if ( regs.CR[6].eq ) { return 0x82233DC0;  }
		/* 82233D80h case    6:*/		return 0x82233D84;
		  /* 82233D84h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 82233D84h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233D84h case    7:*/		return 0x82233D88;
		  /* 82233D88h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 82233D88h case    8:*/		if ( regs.CR[6].eq ) { return 0x82233DC0;  }
		/* 82233D88h case    8:*/		return 0x82233D8C;
		  /* 82233D8Ch */ case    9:  		/* addi R4, R1, 80 */
		/* 82233D8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233D8Ch case    9:*/		return 0x82233D90;
		  /* 82233D90h */ case   10:  		/* bl -16176 */
		/* 82233D90h case   10:*/		regs.LR = 0x82233D94; return 0x8222FE60;
		/* 82233D90h case   10:*/		return 0x82233D94;
		  /* 82233D94h */ case   11:  		/* lis R11, -32216 */
		/* 82233D94h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233D94h case   11:*/		return 0x82233D98;
		  /* 82233D98h */ case   12:  		/* lis R10, -32252 */
		/* 82233D98h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233D98h case   12:*/		return 0x82233D9C;
		  /* 82233D9Ch */ case   13:  		/* mtspr CTR, R29 */
		/* 82233D9Ch case   13:*/		regs.CTR = regs.R29;
		/* 82233D9Ch case   13:*/		return 0x82233DA0;
		  /* 82233DA0h */ case   14:  		/* addi R11, R11, 11160 */
		/* 82233DA0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233DA0h case   14:*/		return 0x82233DA4;
		  /* 82233DA4h */ case   15:  		/* addi R4, R10, 4696 */
		/* 82233DA4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82233DA4h case   15:*/		return 0x82233DA8;
		  /* 82233DA8h */ case   16:  		/* addi R8, R1, 80 */
		/* 82233DA8h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82233DA8h case   16:*/		return 0x82233DAC;
		  /* 82233DACh */ case   17:  		/* mr R7, R30 */
		/* 82233DACh case   17:*/		regs.R7 = regs.R30;
		/* 82233DACh case   17:*/		return 0x82233DB0;
		  /* 82233DB0h */ case   18:  		/* li R6, 51 */
		/* 82233DB0h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x33);
		/* 82233DB0h case   18:*/		return 0x82233DB4;
		  /* 82233DB4h */ case   19:  		/* mr R3, R27 */
		/* 82233DB4h case   19:*/		regs.R3 = regs.R27;
		/* 82233DB4h case   19:*/		return 0x82233DB8;
		  /* 82233DB8h */ case   20:  		/* lwz R5, <#[R11 + 204]> */
		/* 82233DB8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000CC) );
		/* 82233DB8h case   20:*/		return 0x82233DBC;
		  /* 82233DBCh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 82233DBCh case   21:*/		if ( 1 ) { regs.LR = 0x82233DC0; return (uint32)regs.CTR; }
		/* 82233DBCh case   21:*/		return 0x82233DC0;
	}
	return 0x82233DC0;
} // Block from 82233D68h-82233DC0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82233DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233DC0);
		  /* 82233DC0h */ case    0:  		/* li R3, 1 */
		/* 82233DC0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233DC0h case    0:*/		return 0x82233DC4;
		  /* 82233DC4h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233DC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233DC4h case    1:*/		return 0x82233DC8;
		  /* 82233DC8h */ case    2:  		/* b -1714980 */
		/* 82233DC8h case    2:*/		return 0x820912A4;
		/* 82233DC8h case    2:*/		return 0x82233DCC;
		  /* 82233DCCh */ case    3:  		/* nop */
		/* 82233DCCh case    3:*/		cpu::op::nop();
		/* 82233DCCh case    3:*/		return 0x82233DD0;
	}
	return 0x82233DD0;
} // Block from 82233DC0h-82233DD0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233DD0);
		  /* 82233DD0h */ case    0:  		/* mfspr R12, LR */
		/* 82233DD0h case    0:*/		regs.R12 = regs.LR;
		/* 82233DD0h case    0:*/		return 0x82233DD4;
		  /* 82233DD4h */ case    1:  		/* bl -1715072 */
		/* 82233DD4h case    1:*/		regs.LR = 0x82233DD8; return 0x82091254;
		/* 82233DD4h case    1:*/		return 0x82233DD8;
		  /* 82233DD8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82233DD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82233DD8h case    2:*/		return 0x82233DDC;
		  /* 82233DDCh */ case    3:  		/* mr R31, R3 */
		/* 82233DDCh case    3:*/		regs.R31 = regs.R3;
		/* 82233DDCh case    3:*/		return 0x82233DE0;
		  /* 82233DE0h */ case    4:  		/* mr R29, R4 */
		/* 82233DE0h case    4:*/		regs.R29 = regs.R4;
		/* 82233DE0h case    4:*/		return 0x82233DE4;
		  /* 82233DE4h */ case    5:  		/* mr R28, R5 */
		/* 82233DE4h case    5:*/		regs.R28 = regs.R5;
		/* 82233DE4h case    5:*/		return 0x82233DE8;
	}
	return 0x82233DE8;
} // Block from 82233DD0h-82233DE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82233DE8h
// Function '?CompileGetWincoordOffsetsForWincoordX@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233DE8);
		  /* 82233DE8h */ case    0:  		/* mr R30, R6 */
		/* 82233DE8h case    0:*/		regs.R30 = regs.R6;
		/* 82233DE8h case    0:*/		return 0x82233DEC;
		  /* 82233DECh */ case    1:  		/* mr R27, R7 */
		/* 82233DECh case    1:*/		regs.R27 = regs.R7;
		/* 82233DECh case    1:*/		return 0x82233DF0;
		  /* 82233DF0h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82233DF0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233DF0h case    2:*/		return 0x82233DF4;
		  /* 82233DF4h */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 82233DF4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82233E18;  }
		/* 82233DF4h case    3:*/		return 0x82233DF8;
		  /* 82233DF8h */ case    4:  		/* lis R11, -32252 */
		/* 82233DF8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233DF8h case    4:*/		return 0x82233DFC;
		  /* 82233DFCh */ case    5:  		/* lis R10, -32253 */
		/* 82233DFCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233DFCh case    5:*/		return 0x82233E00;
	}
	return 0x82233E00;
} // Block from 82233DE8h-82233E00h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82233E00h
// Function '?CompileGetFogColorR@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233E00);
		  /* 82233E00h */ case    0:  		/* lis R9, -32253 */
		/* 82233E00h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233E00h case    0:*/		return 0x82233E04;
		  /* 82233E04h */ case    1:  		/* addi R6, R11, 4336 */
		/* 82233E04h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233E04h case    1:*/		return 0x82233E08;
		  /* 82233E08h */ case    2:  		/* addi R5, R10, 27792 */
		/* 82233E08h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233E08h case    2:*/		return 0x82233E0C;
		  /* 82233E0Ch */ case    3:  		/* addi R4, R9, 27460 */
		/* 82233E0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233E0Ch case    3:*/		return 0x82233E10;
		  /* 82233E10h */ case    4:  		/* li R7, 4133 */
		/* 82233E10h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1025);
		/* 82233E10h case    4:*/		return 0x82233E14;
		  /* 82233E14h */ case    5:  		/* bl -901644 */
		/* 82233E14h case    5:*/		regs.LR = 0x82233E18; return 0x82157C08;
		/* 82233E14h case    5:*/		return 0x82233E18;
	}
	return 0x82233E18;
} // Block from 82233E00h-82233E18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82233E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233E18);
		  /* 82233E18h */ case    0:  		/* mr R5, R29 */
		/* 82233E18h case    0:*/		regs.R5 = regs.R29;
		/* 82233E18h case    0:*/		return 0x82233E1C;
		  /* 82233E1Ch */ case    1:  		/* li R4, 48 */
		/* 82233E1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 82233E1Ch case    1:*/		return 0x82233E20;
		  /* 82233E20h */ case    2:  		/* mr R3, R31 */
		/* 82233E20h case    2:*/		regs.R3 = regs.R31;
		/* 82233E20h case    2:*/		return 0x82233E24;
		  /* 82233E24h */ case    3:  		/* bl -878052 */
		/* 82233E24h case    3:*/		regs.LR = 0x82233E28; return 0x8215D840;
		/* 82233E24h case    3:*/		return 0x82233E28;
		  /* 82233E28h */ case    4:  		/* rldicl R11, R3, 0, 32 */
		/* 82233E28h case    4:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R3);
		/* 82233E28h case    4:*/		return 0x82233E2C;
		  /* 82233E2Ch */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82233E2Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82233E2Ch case    5:*/		return 0x82233E30;
		  /* 82233E30h */ case    6:  		/* std R11, <#[R1 + 80]> */
		/* 82233E30h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82233E30h case    6:*/		return 0x82233E34;
		  /* 82233E34h */ case    7:  		/* lfd FR0, <#[R1 + 80]> */
		/* 82233E34h case    7:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82233E34h case    7:*/		return 0x82233E38;
		  /* 82233E38h */ case    8:  		/* fcfid FR0, FR0 */
		/* 82233E38h case    8:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82233E38h case    8:*/		return 0x82233E3C;
		  /* 82233E3Ch */ case    9:  		/* frsp FR1, FR0 */
		/* 82233E3Ch case    9:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 82233E3Ch case    9:*/		return 0x82233E40;
		  /* 82233E40h */ case   10:  		/* stfs FR1, <#[R28]> */
		/* 82233E40h case   10:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82233E40h case   10:*/		return 0x82233E44;
		  /* 82233E44h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 82233E44h case   11:*/		if ( regs.CR[6].eq ) { return 0x82233E80;  }
		/* 82233E44h case   11:*/		return 0x82233E48;
		  /* 82233E48h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 82233E48h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82233E48h case   12:*/		return 0x82233E4C;
		  /* 82233E4Ch */ case   13:  		/* bc 12, CR6_EQ, 52 */
		/* 82233E4Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82233E80;  }
		/* 82233E4Ch case   13:*/		return 0x82233E50;
		  /* 82233E50h */ case   14:  		/* addi R4, R1, 96 */
		/* 82233E50h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82233E50h case   14:*/		return 0x82233E54;
		  /* 82233E54h */ case   15:  		/* bl -16372 */
		/* 82233E54h case   15:*/		regs.LR = 0x82233E58; return 0x8222FE60;
		/* 82233E54h case   15:*/		return 0x82233E58;
		  /* 82233E58h */ case   16:  		/* lis R11, -32216 */
		/* 82233E58h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233E58h case   16:*/		return 0x82233E5C;
		  /* 82233E5Ch */ case   17:  		/* lis R10, -32252 */
		/* 82233E5Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233E5Ch case   17:*/		return 0x82233E60;
		  /* 82233E60h */ case   18:  		/* mtspr CTR, R30 */
		/* 82233E60h case   18:*/		regs.CTR = regs.R30;
		/* 82233E60h case   18:*/		return 0x82233E64;
		  /* 82233E64h */ case   19:  		/* addi R11, R11, 11160 */
		/* 82233E64h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233E64h case   19:*/		return 0x82233E68;
		  /* 82233E68h */ case   20:  		/* addi R4, R10, 4668 */
		/* 82233E68h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233E68h case   20:*/		return 0x82233E6C;
		  /* 82233E6Ch */ case   21:  		/* addi R7, R1, 96 */
		/* 82233E6Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82233E6Ch case   21:*/		return 0x82233E70;
		  /* 82233E70h */ case   22:  		/* li R6, 54 */
		/* 82233E70h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x36);
		/* 82233E70h case   22:*/		return 0x82233E74;
		  /* 82233E74h */ case   23:  		/* mr R3, R27 */
		/* 82233E74h case   23:*/		regs.R3 = regs.R27;
		/* 82233E74h case   23:*/		return 0x82233E78;
		  /* 82233E78h */ case   24:  		/* lwz R5, <#[R11 + 216]> */
		/* 82233E78h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000D8) );
		/* 82233E78h case   24:*/		return 0x82233E7C;
		  /* 82233E7Ch */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 82233E7Ch case   25:*/		if ( 1 ) { regs.LR = 0x82233E80; return (uint32)regs.CTR; }
		/* 82233E7Ch case   25:*/		return 0x82233E80;
	}
	return 0x82233E80;
} // Block from 82233E18h-82233E80h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82233E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233E80);
		  /* 82233E80h */ case    0:  		/* li R3, 1 */
		/* 82233E80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233E80h case    0:*/		return 0x82233E84;
		  /* 82233E84h */ case    1:  		/* addi R1, R1, 176 */
		/* 82233E84h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82233E84h case    1:*/		return 0x82233E88;
		  /* 82233E88h */ case    2:  		/* b -1715172 */
		/* 82233E88h case    2:*/		return 0x820912A4;
		/* 82233E88h case    2:*/		return 0x82233E8C;
		  /* 82233E8Ch */ case    3:  		/* nop */
		/* 82233E8Ch case    3:*/		cpu::op::nop();
		/* 82233E8Ch case    3:*/		return 0x82233E90;
	}
	return 0x82233E90;
} // Block from 82233E80h-82233E90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233E90);
		  /* 82233E90h */ case    0:  		/* mfspr R12, LR */
		/* 82233E90h case    0:*/		regs.R12 = regs.LR;
		/* 82233E90h case    0:*/		return 0x82233E94;
		  /* 82233E94h */ case    1:  		/* bl -1715260 */
		/* 82233E94h case    1:*/		regs.LR = 0x82233E98; return 0x82091258;
		/* 82233E94h case    1:*/		return 0x82233E98;
		  /* 82233E98h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233E98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233E98h case    2:*/		return 0x82233E9C;
		  /* 82233E9Ch */ case    3:  		/* mr R31, R3 */
		/* 82233E9Ch case    3:*/		regs.R31 = regs.R3;
		/* 82233E9Ch case    3:*/		return 0x82233EA0;
	}
	return 0x82233EA0;
} // Block from 82233E90h-82233EA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233EA0h
// Function '?CompileGetFogColorG@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233EA0);
		  /* 82233EA0h */ case    0:  		/* mr R29, R5 */
		/* 82233EA0h case    0:*/		regs.R29 = regs.R5;
		/* 82233EA0h case    0:*/		return 0x82233EA4;
		  /* 82233EA4h */ case    1:  		/* mr R30, R6 */
		/* 82233EA4h case    1:*/		regs.R30 = regs.R6;
		/* 82233EA4h case    1:*/		return 0x82233EA8;
		  /* 82233EA8h */ case    2:  		/* mr R28, R7 */
		/* 82233EA8h case    2:*/		regs.R28 = regs.R7;
		/* 82233EA8h case    2:*/		return 0x82233EAC;
		  /* 82233EACh */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82233EACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233EACh case    3:*/		return 0x82233EB0;
		  /* 82233EB0h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 82233EB0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82233ED4;  }
		/* 82233EB0h case    4:*/		return 0x82233EB4;
		  /* 82233EB4h */ case    5:  		/* lis R11, -32252 */
		/* 82233EB4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233EB4h case    5:*/		return 0x82233EB8;
		  /* 82233EB8h */ case    6:  		/* lis R10, -32253 */
		/* 82233EB8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233EB8h case    6:*/		return 0x82233EBC;
		  /* 82233EBCh */ case    7:  		/* lis R9, -32253 */
		/* 82233EBCh case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233EBCh case    7:*/		return 0x82233EC0;
		  /* 82233EC0h */ case    8:  		/* addi R6, R11, 4336 */
		/* 82233EC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233EC0h case    8:*/		return 0x82233EC4;
		  /* 82233EC4h */ case    9:  		/* addi R5, R10, 27792 */
		/* 82233EC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233EC4h case    9:*/		return 0x82233EC8;
		  /* 82233EC8h */ case   10:  		/* addi R4, R9, 27460 */
		/* 82233EC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233EC8h case   10:*/		return 0x82233ECC;
		  /* 82233ECCh */ case   11:  		/* li R7, 4163 */
		/* 82233ECCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x1043);
		/* 82233ECCh case   11:*/		return 0x82233ED0;
		  /* 82233ED0h */ case   12:  		/* bl -901832 */
		/* 82233ED0h case   12:*/		regs.LR = 0x82233ED4; return 0x82157C08;
		/* 82233ED0h case   12:*/		return 0x82233ED4;
	}
	return 0x82233ED4;
} // Block from 82233EA0h-82233ED4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82233ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233ED4);
		  /* 82233ED4h */ case    0:  		/* li R4, 166 */
		/* 82233ED4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA6);
		/* 82233ED4h case    0:*/		return 0x82233ED8;
		  /* 82233ED8h */ case    1:  		/* mr R3, R31 */
		/* 82233ED8h case    1:*/		regs.R3 = regs.R31;
		/* 82233ED8h case    1:*/		return 0x82233EDC;
		  /* 82233EDCh */ case    2:  		/* bl -153060 */
		/* 82233EDCh case    2:*/		regs.LR = 0x82233EE0; return 0x8220E8F8;
		/* 82233EDCh case    2:*/		return 0x82233EE0;
		  /* 82233EE0h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233EE0h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233EE0h case    3:*/		return 0x82233EE4;
		  /* 82233EE4h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82233EE4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82233EE4h case    4:*/		return 0x82233EE8;
		  /* 82233EE8h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233EE8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82233F24;  }
		/* 82233EE8h case    5:*/		return 0x82233EEC;
		  /* 82233EECh */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233EECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233EECh case    6:*/		return 0x82233EF0;
		  /* 82233EF0h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233EF0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82233F24;  }
		/* 82233EF0h case    7:*/		return 0x82233EF4;
		  /* 82233EF4h */ case    8:  		/* addi R4, R1, 80 */
		/* 82233EF4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233EF4h case    8:*/		return 0x82233EF8;
		  /* 82233EF8h */ case    9:  		/* bl -16536 */
		/* 82233EF8h case    9:*/		regs.LR = 0x82233EFC; return 0x8222FE60;
		/* 82233EF8h case    9:*/		return 0x82233EFC;
		  /* 82233EFCh */ case   10:  		/* lis R11, -32216 */
		/* 82233EFCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233EFCh case   10:*/		return 0x82233F00;
		  /* 82233F00h */ case   11:  		/* lis R10, -32252 */
		/* 82233F00h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233F00h case   11:*/		return 0x82233F04;
		  /* 82233F04h */ case   12:  		/* mtspr CTR, R30 */
		/* 82233F04h case   12:*/		regs.CTR = regs.R30;
		/* 82233F04h case   12:*/		return 0x82233F08;
		  /* 82233F08h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82233F08h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233F08h case   13:*/		return 0x82233F0C;
		  /* 82233F0Ch */ case   14:  		/* addi R4, R10, 4668 */
		/* 82233F0Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233F0Ch case   14:*/		return 0x82233F10;
		  /* 82233F10h */ case   15:  		/* addi R7, R1, 80 */
		/* 82233F10h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233F10h case   15:*/		return 0x82233F14;
		  /* 82233F14h */ case   16:  		/* li R6, 24 */
		/* 82233F14h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x18);
		/* 82233F14h case   16:*/		return 0x82233F18;
		  /* 82233F18h */ case   17:  		/* mr R3, R28 */
		/* 82233F18h case   17:*/		regs.R3 = regs.R28;
		/* 82233F18h case   17:*/		return 0x82233F1C;
		  /* 82233F1Ch */ case   18:  		/* lwz R5, <#[R11 + 96]> */
		/* 82233F1Ch case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000060) );
		/* 82233F1Ch case   18:*/		return 0x82233F20;
		  /* 82233F20h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82233F20h case   19:*/		if ( 1 ) { regs.LR = 0x82233F24; return (uint32)regs.CTR; }
		/* 82233F20h case   19:*/		return 0x82233F24;
	}
	return 0x82233F24;
} // Block from 82233ED4h-82233F24h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82233F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233F24);
		  /* 82233F24h */ case    0:  		/* li R3, 1 */
		/* 82233F24h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233F24h case    0:*/		return 0x82233F28;
		  /* 82233F28h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233F28h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233F28h case    1:*/		return 0x82233F2C;
		  /* 82233F2Ch */ case    2:  		/* b -1715332 */
		/* 82233F2Ch case    2:*/		return 0x820912A8;
		/* 82233F2Ch case    2:*/		return 0x82233F30;
	}
	return 0x82233F30;
} // Block from 82233F24h-82233F30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233F30);
		  /* 82233F30h */ case    0:  		/* mfspr R12, LR */
		/* 82233F30h case    0:*/		regs.R12 = regs.LR;
		/* 82233F30h case    0:*/		return 0x82233F34;
		  /* 82233F34h */ case    1:  		/* bl -1715420 */
		/* 82233F34h case    1:*/		regs.LR = 0x82233F38; return 0x82091258;
		/* 82233F34h case    1:*/		return 0x82233F38;
		  /* 82233F38h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233F38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233F38h case    2:*/		return 0x82233F3C;
		  /* 82233F3Ch */ case    3:  		/* mr R31, R3 */
		/* 82233F3Ch case    3:*/		regs.R31 = regs.R3;
		/* 82233F3Ch case    3:*/		return 0x82233F40;
	}
	return 0x82233F40;
} // Block from 82233F30h-82233F40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233F40h
// Function '?CompileGetFogColorB@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233F40);
		  /* 82233F40h */ case    0:  		/* mr R29, R5 */
		/* 82233F40h case    0:*/		regs.R29 = regs.R5;
		/* 82233F40h case    0:*/		return 0x82233F44;
		  /* 82233F44h */ case    1:  		/* mr R30, R6 */
		/* 82233F44h case    1:*/		regs.R30 = regs.R6;
		/* 82233F44h case    1:*/		return 0x82233F48;
		  /* 82233F48h */ case    2:  		/* mr R28, R7 */
		/* 82233F48h case    2:*/		regs.R28 = regs.R7;
		/* 82233F48h case    2:*/		return 0x82233F4C;
		  /* 82233F4Ch */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82233F4Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233F4Ch case    3:*/		return 0x82233F50;
		  /* 82233F50h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 82233F50h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82233F74;  }
		/* 82233F50h case    4:*/		return 0x82233F54;
		  /* 82233F54h */ case    5:  		/* lis R11, -32252 */
		/* 82233F54h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233F54h case    5:*/		return 0x82233F58;
		  /* 82233F58h */ case    6:  		/* lis R10, -32253 */
		/* 82233F58h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233F58h case    6:*/		return 0x82233F5C;
		  /* 82233F5Ch */ case    7:  		/* lis R9, -32253 */
		/* 82233F5Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233F5Ch case    7:*/		return 0x82233F60;
		  /* 82233F60h */ case    8:  		/* addi R6, R11, 4336 */
		/* 82233F60h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82233F60h case    8:*/		return 0x82233F64;
		  /* 82233F64h */ case    9:  		/* addi R5, R10, 27792 */
		/* 82233F64h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82233F64h case    9:*/		return 0x82233F68;
		  /* 82233F68h */ case   10:  		/* addi R4, R9, 27460 */
		/* 82233F68h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82233F68h case   10:*/		return 0x82233F6C;
		  /* 82233F6Ch */ case   11:  		/* li R7, 4195 */
		/* 82233F6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x1063);
		/* 82233F6Ch case   11:*/		return 0x82233F70;
		  /* 82233F70h */ case   12:  		/* bl -901992 */
		/* 82233F70h case   12:*/		regs.LR = 0x82233F74; return 0x82157C08;
		/* 82233F70h case   12:*/		return 0x82233F74;
	}
	return 0x82233F74;
} // Block from 82233F40h-82233F74h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82233F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233F74);
		  /* 82233F74h */ case    0:  		/* li R4, 167 */
		/* 82233F74h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA7);
		/* 82233F74h case    0:*/		return 0x82233F78;
		  /* 82233F78h */ case    1:  		/* mr R3, R31 */
		/* 82233F78h case    1:*/		regs.R3 = regs.R31;
		/* 82233F78h case    1:*/		return 0x82233F7C;
		  /* 82233F7Ch */ case    2:  		/* bl -153220 */
		/* 82233F7Ch case    2:*/		regs.LR = 0x82233F80; return 0x8220E8F8;
		/* 82233F7Ch case    2:*/		return 0x82233F80;
		  /* 82233F80h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82233F80h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82233F80h case    3:*/		return 0x82233F84;
		  /* 82233F84h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82233F84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82233F84h case    4:*/		return 0x82233F88;
		  /* 82233F88h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82233F88h case    5:*/		if ( regs.CR[6].eq ) { return 0x82233FC4;  }
		/* 82233F88h case    5:*/		return 0x82233F8C;
		  /* 82233F8Ch */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82233F8Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82233F8Ch case    6:*/		return 0x82233F90;
		  /* 82233F90h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82233F90h case    7:*/		if ( regs.CR[6].eq ) { return 0x82233FC4;  }
		/* 82233F90h case    7:*/		return 0x82233F94;
		  /* 82233F94h */ case    8:  		/* addi R4, R1, 80 */
		/* 82233F94h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82233F94h case    8:*/		return 0x82233F98;
		  /* 82233F98h */ case    9:  		/* bl -16696 */
		/* 82233F98h case    9:*/		regs.LR = 0x82233F9C; return 0x8222FE60;
		/* 82233F98h case    9:*/		return 0x82233F9C;
		  /* 82233F9Ch */ case   10:  		/* lis R11, -32216 */
		/* 82233F9Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82233F9Ch case   10:*/		return 0x82233FA0;
		  /* 82233FA0h */ case   11:  		/* lis R10, -32252 */
		/* 82233FA0h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82233FA0h case   11:*/		return 0x82233FA4;
		  /* 82233FA4h */ case   12:  		/* mtspr CTR, R30 */
		/* 82233FA4h case   12:*/		regs.CTR = regs.R30;
		/* 82233FA4h case   12:*/		return 0x82233FA8;
		  /* 82233FA8h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82233FA8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82233FA8h case   13:*/		return 0x82233FAC;
		  /* 82233FACh */ case   14:  		/* addi R4, R10, 4668 */
		/* 82233FACh case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 82233FACh case   14:*/		return 0x82233FB0;
		  /* 82233FB0h */ case   15:  		/* addi R7, R1, 80 */
		/* 82233FB0h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82233FB0h case   15:*/		return 0x82233FB4;
		  /* 82233FB4h */ case   16:  		/* li R6, 75 */
		/* 82233FB4h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x4B);
		/* 82233FB4h case   16:*/		return 0x82233FB8;
		  /* 82233FB8h */ case   17:  		/* mr R3, R28 */
		/* 82233FB8h case   17:*/		regs.R3 = regs.R28;
		/* 82233FB8h case   17:*/		return 0x82233FBC;
		  /* 82233FBCh */ case   18:  		/* lwz R5, <#[R11 + 300]> */
		/* 82233FBCh case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000012C) );
		/* 82233FBCh case   18:*/		return 0x82233FC0;
		  /* 82233FC0h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82233FC0h case   19:*/		if ( 1 ) { regs.LR = 0x82233FC4; return (uint32)regs.CTR; }
		/* 82233FC0h case   19:*/		return 0x82233FC4;
	}
	return 0x82233FC4;
} // Block from 82233F74h-82233FC4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82233FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233FC4);
		  /* 82233FC4h */ case    0:  		/* li R3, 1 */
		/* 82233FC4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82233FC4h case    0:*/		return 0x82233FC8;
		  /* 82233FC8h */ case    1:  		/* addi R1, R1, 160 */
		/* 82233FC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82233FC8h case    1:*/		return 0x82233FCC;
		  /* 82233FCCh */ case    2:  		/* b -1715492 */
		/* 82233FCCh case    2:*/		return 0x820912A8;
		/* 82233FCCh case    2:*/		return 0x82233FD0;
	}
	return 0x82233FD0;
} // Block from 82233FC4h-82233FD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82233FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233FD0);
		  /* 82233FD0h */ case    0:  		/* mfspr R12, LR */
		/* 82233FD0h case    0:*/		regs.R12 = regs.LR;
		/* 82233FD0h case    0:*/		return 0x82233FD4;
		  /* 82233FD4h */ case    1:  		/* bl -1715580 */
		/* 82233FD4h case    1:*/		regs.LR = 0x82233FD8; return 0x82091258;
		/* 82233FD4h case    1:*/		return 0x82233FD8;
		  /* 82233FD8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82233FD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82233FD8h case    2:*/		return 0x82233FDC;
		  /* 82233FDCh */ case    3:  		/* mr R31, R3 */
		/* 82233FDCh case    3:*/		regs.R31 = regs.R3;
		/* 82233FDCh case    3:*/		return 0x82233FE0;
	}
	return 0x82233FE0;
} // Block from 82233FD0h-82233FE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82233FE0h
// Function '?CompileGetBorderColorR@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82233FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82233FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82233FE0);
		  /* 82233FE0h */ case    0:  		/* mr R29, R5 */
		/* 82233FE0h case    0:*/		regs.R29 = regs.R5;
		/* 82233FE0h case    0:*/		return 0x82233FE4;
		  /* 82233FE4h */ case    1:  		/* mr R30, R6 */
		/* 82233FE4h case    1:*/		regs.R30 = regs.R6;
		/* 82233FE4h case    1:*/		return 0x82233FE8;
		  /* 82233FE8h */ case    2:  		/* mr R28, R7 */
		/* 82233FE8h case    2:*/		regs.R28 = regs.R7;
		/* 82233FE8h case    2:*/		return 0x82233FEC;
		  /* 82233FECh */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82233FECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82233FECh case    3:*/		return 0x82233FF0;
		  /* 82233FF0h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 82233FF0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82234014;  }
		/* 82233FF0h case    4:*/		return 0x82233FF4;
		  /* 82233FF4h */ case    5:  		/* lis R11, -32252 */
		/* 82233FF4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82233FF4h case    5:*/		return 0x82233FF8;
		  /* 82233FF8h */ case    6:  		/* lis R10, -32253 */
		/* 82233FF8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82233FF8h case    6:*/		return 0x82233FFC;
		  /* 82233FFCh */ case    7:  		/* lis R9, -32253 */
		/* 82233FFCh case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82233FFCh case    7:*/		return 0x82234000;
		  /* 82234000h */ case    8:  		/* addi R6, R11, 4336 */
		/* 82234000h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82234000h case    8:*/		return 0x82234004;
		  /* 82234004h */ case    9:  		/* addi R5, R10, 27792 */
		/* 82234004h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82234004h case    9:*/		return 0x82234008;
		  /* 82234008h */ case   10:  		/* addi R4, R9, 27460 */
		/* 82234008h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82234008h case   10:*/		return 0x8223400C;
		  /* 8223400Ch */ case   11:  		/* li R7, 4225 */
		/* 8223400Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x1081);
		/* 8223400Ch case   11:*/		return 0x82234010;
		  /* 82234010h */ case   12:  		/* bl -902152 */
		/* 82234010h case   12:*/		regs.LR = 0x82234014; return 0x82157C08;
		/* 82234010h case   12:*/		return 0x82234014;
	}
	return 0x82234014;
} // Block from 82233FE0h-82234014h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82234014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234014);
		  /* 82234014h */ case    0:  		/* li R4, 168 */
		/* 82234014h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA8);
		/* 82234014h case    0:*/		return 0x82234018;
		  /* 82234018h */ case    1:  		/* mr R3, R31 */
		/* 82234018h case    1:*/		regs.R3 = regs.R31;
		/* 82234018h case    1:*/		return 0x8223401C;
		  /* 8223401Ch */ case    2:  		/* bl -153380 */
		/* 8223401Ch case    2:*/		regs.LR = 0x82234020; return 0x8220E8F8;
		/* 8223401Ch case    2:*/		return 0x82234020;
		  /* 82234020h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 82234020h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 82234020h case    3:*/		return 0x82234024;
		  /* 82234024h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82234024h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82234024h case    4:*/		return 0x82234028;
		  /* 82234028h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82234028h case    5:*/		if ( regs.CR[6].eq ) { return 0x82234064;  }
		/* 82234028h case    5:*/		return 0x8223402C;
		  /* 8223402Ch */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 8223402Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223402Ch case    6:*/		return 0x82234030;
		  /* 82234030h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82234030h case    7:*/		if ( regs.CR[6].eq ) { return 0x82234064;  }
		/* 82234030h case    7:*/		return 0x82234034;
		  /* 82234034h */ case    8:  		/* addi R4, R1, 80 */
		/* 82234034h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82234034h case    8:*/		return 0x82234038;
		  /* 82234038h */ case    9:  		/* bl -16856 */
		/* 82234038h case    9:*/		regs.LR = 0x8223403C; return 0x8222FE60;
		/* 82234038h case    9:*/		return 0x8223403C;
		  /* 8223403Ch */ case   10:  		/* lis R11, -32216 */
		/* 8223403Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223403Ch case   10:*/		return 0x82234040;
		  /* 82234040h */ case   11:  		/* lis R10, -32252 */
		/* 82234040h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234040h case   11:*/		return 0x82234044;
		  /* 82234044h */ case   12:  		/* mtspr CTR, R30 */
		/* 82234044h case   12:*/		regs.CTR = regs.R30;
		/* 82234044h case   12:*/		return 0x82234048;
		  /* 82234048h */ case   13:  		/* addi R11, R11, 11160 */
		/* 82234048h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234048h case   13:*/		return 0x8223404C;
		  /* 8223404Ch */ case   14:  		/* addi R4, R10, 4668 */
		/* 8223404Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x123C);
		/* 8223404Ch case   14:*/		return 0x82234050;
		  /* 82234050h */ case   15:  		/* addi R7, R1, 80 */
		/* 82234050h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82234050h case   15:*/		return 0x82234054;
		  /* 82234054h */ case   16:  		/* li R6, 25 */
		/* 82234054h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x19);
		/* 82234054h case   16:*/		return 0x82234058;
		  /* 82234058h */ case   17:  		/* mr R3, R28 */
		/* 82234058h case   17:*/		regs.R3 = regs.R28;
		/* 82234058h case   17:*/		return 0x8223405C;
		  /* 8223405Ch */ case   18:  		/* lwz R5, <#[R11 + 100]> */
		/* 8223405Ch case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000064) );
		/* 8223405Ch case   18:*/		return 0x82234060;
		  /* 82234060h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82234060h case   19:*/		if ( 1 ) { regs.LR = 0x82234064; return (uint32)regs.CTR; }
		/* 82234060h case   19:*/		return 0x82234064;
	}
	return 0x82234064;
} // Block from 82234014h-82234064h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82234064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234064);
		  /* 82234064h */ case    0:  		/* li R3, 1 */
		/* 82234064h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234064h case    0:*/		return 0x82234068;
		  /* 82234068h */ case    1:  		/* addi R1, R1, 160 */
		/* 82234068h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82234068h case    1:*/		return 0x8223406C;
		  /* 8223406Ch */ case    2:  		/* b -1715652 */
		/* 8223406Ch case    2:*/		return 0x820912A8;
		/* 8223406Ch case    2:*/		return 0x82234070;
	}
	return 0x82234070;
} // Block from 82234064h-82234070h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82234070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234070);
		  /* 82234070h */ case    0:  		/* mfspr R12, LR */
		/* 82234070h case    0:*/		regs.R12 = regs.LR;
		/* 82234070h case    0:*/		return 0x82234074;
		  /* 82234074h */ case    1:  		/* bl -1715740 */
		/* 82234074h case    1:*/		regs.LR = 0x82234078; return 0x82091258;
		/* 82234074h case    1:*/		return 0x82234078;
		  /* 82234078h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82234078h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82234078h case    2:*/		return 0x8223407C;
		  /* 8223407Ch */ case    3:  		/* mr R28, R4 */
		/* 8223407Ch case    3:*/		regs.R28 = regs.R4;
		/* 8223407Ch case    3:*/		return 0x82234080;
		  /* 82234080h */ case    4:  		/* mr R29, R5 */
		/* 82234080h case    4:*/		regs.R29 = regs.R5;
		/* 82234080h case    4:*/		return 0x82234084;
		  /* 82234084h */ case    5:  		/* mr R31, R6 */
		/* 82234084h case    5:*/		regs.R31 = regs.R6;
		/* 82234084h case    5:*/		return 0x82234088;
		  /* 82234088h */ case    6:  		/* mr R30, R7 */
		/* 82234088h case    6:*/		regs.R30 = regs.R7;
		/* 82234088h case    6:*/		return 0x8223408C;
		  /* 8223408Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8223408Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223408Ch case    7:*/		return 0x82234090;
	}
	return 0x82234090;
} // Block from 82234070h-82234090h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82234090h
// Function '?CompileGetBorderColorG@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234090);
		  /* 82234090h */ case    0:  		/* bc 4, CR6_EQ, 36 */
		/* 82234090h case    0:*/		if ( !regs.CR[6].eq ) { return 0x822340B4;  }
		/* 82234090h case    0:*/		return 0x82234094;
		  /* 82234094h */ case    1:  		/* lis R11, -32252 */
		/* 82234094h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234094h case    1:*/		return 0x82234098;
		  /* 82234098h */ case    2:  		/* lis R10, -32253 */
		/* 82234098h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82234098h case    2:*/		return 0x8223409C;
		  /* 8223409Ch */ case    3:  		/* lis R9, -32253 */
		/* 8223409Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223409Ch case    3:*/		return 0x822340A0;
		  /* 822340A0h */ case    4:  		/* addi R6, R11, 4336 */
		/* 822340A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822340A0h case    4:*/		return 0x822340A4;
		  /* 822340A4h */ case    5:  		/* addi R5, R10, 27792 */
		/* 822340A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822340A4h case    5:*/		return 0x822340A8;
		  /* 822340A8h */ case    6:  		/* addi R4, R9, 27460 */
		/* 822340A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822340A8h case    6:*/		return 0x822340AC;
		  /* 822340ACh */ case    7:  		/* li R7, 4257 */
		/* 822340ACh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x10A1);
		/* 822340ACh case    7:*/		return 0x822340B0;
		  /* 822340B0h */ case    8:  		/* bl -902312 */
		/* 822340B0h case    8:*/		regs.LR = 0x822340B4; return 0x82157C08;
		/* 822340B0h case    8:*/		return 0x822340B4;
	}
	return 0x822340B4;
} // Block from 82234090h-822340B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822340B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822340B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822340B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822340B4);
		  /* 822340B4h */ case    0:  		/* lis R11, -32256 */
		/* 822340B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 822340B4h case    0:*/		return 0x822340B8;
		  /* 822340B8h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 822340B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 822340B8h case    1:*/		return 0x822340BC;
		  /* 822340BCh */ case    2:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 822340BCh case    2:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 822340BCh case    2:*/		return 0x822340C0;
		  /* 822340C0h */ case    3:  		/* stfs FR1, <#[R29]> */
		/* 822340C0h case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 822340C0h case    3:*/		return 0x822340C4;
		  /* 822340C4h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 822340C4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82234104;  }
		/* 822340C4h case    4:*/		return 0x822340C8;
		  /* 822340C8h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 822340C8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822340C8h case    5:*/		return 0x822340CC;
		  /* 822340CCh */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 822340CCh case    6:*/		if ( regs.CR[6].eq ) { return 0x82234104;  }
		/* 822340CCh case    6:*/		return 0x822340D0;
		  /* 822340D0h */ case    7:  		/* addi R4, R1, 80 */
		/* 822340D0h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822340D0h case    7:*/		return 0x822340D4;
		  /* 822340D4h */ case    8:  		/* bl -17012 */
		/* 822340D4h case    8:*/		regs.LR = 0x822340D8; return 0x8222FE60;
		/* 822340D4h case    8:*/		return 0x822340D8;
		  /* 822340D8h */ case    9:  		/* lis R11, -32216 */
		/* 822340D8h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822340D8h case    9:*/		return 0x822340DC;
		  /* 822340DCh */ case   10:  		/* lis R10, -32252 */
		/* 822340DCh case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822340DCh case   10:*/		return 0x822340E0;
		  /* 822340E0h */ case   11:  		/* mtspr CTR, R31 */
		/* 822340E0h case   11:*/		regs.CTR = regs.R31;
		/* 822340E0h case   11:*/		return 0x822340E4;
		  /* 822340E4h */ case   12:  		/* addi R11, R11, 11160 */
		/* 822340E4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822340E4h case   12:*/		return 0x822340E8;
		  /* 822340E8h */ case   13:  		/* addi R4, R10, 4696 */
		/* 822340E8h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 822340E8h case   13:*/		return 0x822340EC;
		  /* 822340ECh */ case   14:  		/* addi R8, R1, 80 */
		/* 822340ECh case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 822340ECh case   14:*/		return 0x822340F0;
		  /* 822340F0h */ case   15:  		/* mr R7, R28 */
		/* 822340F0h case   15:*/		regs.R7 = regs.R28;
		/* 822340F0h case   15:*/		return 0x822340F4;
		  /* 822340F4h */ case   16:  		/* li R6, 64 */
		/* 822340F4h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 822340F4h case   16:*/		return 0x822340F8;
		  /* 822340F8h */ case   17:  		/* mr R3, R30 */
		/* 822340F8h case   17:*/		regs.R3 = regs.R30;
		/* 822340F8h case   17:*/		return 0x822340FC;
		  /* 822340FCh */ case   18:  		/* lwz R5, <#[R11 + 256]> */
		/* 822340FCh case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000100) );
		/* 822340FCh case   18:*/		return 0x82234100;
		  /* 82234100h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82234100h case   19:*/		if ( 1 ) { regs.LR = 0x82234104; return (uint32)regs.CTR; }
		/* 82234100h case   19:*/		return 0x82234104;
	}
	return 0x82234104;
} // Block from 822340B4h-82234104h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82234104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234104);
		  /* 82234104h */ case    0:  		/* li R3, 1 */
		/* 82234104h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234104h case    0:*/		return 0x82234108;
		  /* 82234108h */ case    1:  		/* addi R1, R1, 160 */
		/* 82234108h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82234108h case    1:*/		return 0x8223410C;
		  /* 8223410Ch */ case    2:  		/* b -1715812 */
		/* 8223410Ch case    2:*/		return 0x820912A8;
		/* 8223410Ch case    2:*/		return 0x82234110;
	}
	return 0x82234110;
} // Block from 82234104h-82234110h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82234110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234110);
		  /* 82234110h */ case    0:  		/* mfspr R12, LR */
		/* 82234110h case    0:*/		regs.R12 = regs.LR;
		/* 82234110h case    0:*/		return 0x82234114;
		  /* 82234114h */ case    1:  		/* bl -1715904 */
		/* 82234114h case    1:*/		regs.LR = 0x82234118; return 0x82091254;
		/* 82234114h case    1:*/		return 0x82234118;
		  /* 82234118h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82234118h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82234118h case    2:*/		return 0x8223411C;
		  /* 8223411Ch */ case    3:  		/* mr R31, R3 */
		/* 8223411Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223411Ch case    3:*/		return 0x82234120;
		  /* 82234120h */ case    4:  		/* mr R30, R4 */
		/* 82234120h case    4:*/		regs.R30 = regs.R4;
		/* 82234120h case    4:*/		return 0x82234124;
		  /* 82234124h */ case    5:  		/* mr R28, R5 */
		/* 82234124h case    5:*/		regs.R28 = regs.R5;
		/* 82234124h case    5:*/		return 0x82234128;
		  /* 82234128h */ case    6:  		/* mr R29, R6 */
		/* 82234128h case    6:*/		regs.R29 = regs.R6;
		/* 82234128h case    6:*/		return 0x8223412C;
		  /* 8223412Ch */ case    7:  		/* mr R27, R7 */
		/* 8223412Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223412Ch case    7:*/		return 0x82234130;
		  /* 82234130h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82234130h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234130h case    8:*/		return 0x82234134;
		  /* 82234134h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82234134h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82234158;  }
		/* 82234134h case    9:*/		return 0x82234138;
		  /* 82234138h */ case   10:  		/* lis R11, -32252 */
		/* 82234138h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234138h case   10:*/		return 0x8223413C;
		  /* 8223413Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223413Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223413Ch case   11:*/		return 0x82234140;
	}
	return 0x82234140;
} // Block from 82234110h-82234140h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82234140h
// Function '?CompileGetBorderColorB@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234140);
		  /* 82234140h */ case    0:  		/* lis R9, -32253 */
		/* 82234140h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82234140h case    0:*/		return 0x82234144;
		  /* 82234144h */ case    1:  		/* addi R6, R11, 4336 */
		/* 82234144h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 82234144h case    1:*/		return 0x82234148;
		  /* 82234148h */ case    2:  		/* addi R5, R10, 27792 */
		/* 82234148h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82234148h case    2:*/		return 0x8223414C;
		  /* 8223414Ch */ case    3:  		/* addi R4, R9, 27460 */
		/* 8223414Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223414Ch case    3:*/		return 0x82234150;
		  /* 82234150h */ case    4:  		/* li R7, 4293 */
		/* 82234150h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x10C5);
		/* 82234150h case    4:*/		return 0x82234154;
		  /* 82234154h */ case    5:  		/* bl -902476 */
		/* 82234154h case    5:*/		regs.LR = 0x82234158; return 0x82157C08;
		/* 82234154h case    5:*/		return 0x82234158;
	}
	return 0x82234158;
} // Block from 82234140h-82234158h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234158);
		  /* 82234158h */ case    0:  		/* mr R5, R30 */
		/* 82234158h case    0:*/		regs.R5 = regs.R30;
		/* 82234158h case    0:*/		return 0x8223415C;
		  /* 8223415Ch */ case    1:  		/* li R4, 26 */
		/* 8223415Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1A);
		/* 8223415Ch case    1:*/		return 0x82234160;
		  /* 82234160h */ case    2:  		/* mr R3, R31 */
		/* 82234160h case    2:*/		regs.R3 = regs.R31;
		/* 82234160h case    2:*/		return 0x82234164;
		  /* 82234164h */ case    3:  		/* bl -149660 */
		/* 82234164h case    3:*/		regs.LR = 0x82234168; return 0x8220F8C8;
		/* 82234164h case    3:*/		return 0x82234168;
		  /* 82234168h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 82234168h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82234168h case    4:*/		return 0x8223416C;
		  /* 8223416Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8223416Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223416Ch case    5:*/		return 0x82234170;
		  /* 82234170h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 82234170h case    6:*/		if ( regs.CR[6].eq ) { return 0x822341B0;  }
		/* 82234170h case    6:*/		return 0x82234174;
		  /* 82234174h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 82234174h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234174h case    7:*/		return 0x82234178;
		  /* 82234178h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 82234178h case    8:*/		if ( regs.CR[6].eq ) { return 0x822341B0;  }
		/* 82234178h case    8:*/		return 0x8223417C;
		  /* 8223417Ch */ case    9:  		/* addi R4, R1, 80 */
		/* 8223417Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223417Ch case    9:*/		return 0x82234180;
		  /* 82234180h */ case   10:  		/* bl -17184 */
		/* 82234180h case   10:*/		regs.LR = 0x82234184; return 0x8222FE60;
		/* 82234180h case   10:*/		return 0x82234184;
		  /* 82234184h */ case   11:  		/* lis R11, -32216 */
		/* 82234184h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234184h case   11:*/		return 0x82234188;
		  /* 82234188h */ case   12:  		/* lis R10, -32252 */
		/* 82234188h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234188h case   12:*/		return 0x8223418C;
		  /* 8223418Ch */ case   13:  		/* mtspr CTR, R29 */
		/* 8223418Ch case   13:*/		regs.CTR = regs.R29;
		/* 8223418Ch case   13:*/		return 0x82234190;
		  /* 82234190h */ case   14:  		/* addi R11, R11, 11160 */
		/* 82234190h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234190h case   14:*/		return 0x82234194;
		  /* 82234194h */ case   15:  		/* addi R4, R10, 4696 */
		/* 82234194h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82234194h case   15:*/		return 0x82234198;
		  /* 82234198h */ case   16:  		/* addi R8, R1, 80 */
		/* 82234198h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82234198h case   16:*/		return 0x8223419C;
		  /* 8223419Ch */ case   17:  		/* mr R7, R30 */
		/* 8223419Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223419Ch case   17:*/		return 0x822341A0;
		  /* 822341A0h */ case   18:  		/* li R6, 65 */
		/* 822341A0h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x41);
		/* 822341A0h case   18:*/		return 0x822341A4;
		  /* 822341A4h */ case   19:  		/* mr R3, R27 */
		/* 822341A4h case   19:*/		regs.R3 = regs.R27;
		/* 822341A4h case   19:*/		return 0x822341A8;
		  /* 822341A8h */ case   20:  		/* lwz R5, <#[R11 + 260]> */
		/* 822341A8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000104) );
		/* 822341A8h case   20:*/		return 0x822341AC;
		  /* 822341ACh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 822341ACh case   21:*/		if ( 1 ) { regs.LR = 0x822341B0; return (uint32)regs.CTR; }
		/* 822341ACh case   21:*/		return 0x822341B0;
	}
	return 0x822341B0;
} // Block from 82234158h-822341B0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 822341B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822341B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822341B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822341B0);
		  /* 822341B0h */ case    0:  		/* li R3, 1 */
		/* 822341B0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822341B0h case    0:*/		return 0x822341B4;
		  /* 822341B4h */ case    1:  		/* addi R1, R1, 160 */
		/* 822341B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822341B4h case    1:*/		return 0x822341B8;
		  /* 822341B8h */ case    2:  		/* b -1715988 */
		/* 822341B8h case    2:*/		return 0x820912A4;
		/* 822341B8h case    2:*/		return 0x822341BC;
		  /* 822341BCh */ case    3:  		/* nop */
		/* 822341BCh case    3:*/		cpu::op::nop();
		/* 822341BCh case    3:*/		return 0x822341C0;
	}
	return 0x822341C0;
} // Block from 822341B0h-822341C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822341C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822341C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822341C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822341C0);
		  /* 822341C0h */ case    0:  		/* mfspr R12, LR */
		/* 822341C0h case    0:*/		regs.R12 = regs.LR;
		/* 822341C0h case    0:*/		return 0x822341C4;
		  /* 822341C4h */ case    1:  		/* bl -1716080 */
		/* 822341C4h case    1:*/		regs.LR = 0x822341C8; return 0x82091254;
		/* 822341C4h case    1:*/		return 0x822341C8;
		  /* 822341C8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822341C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822341C8h case    2:*/		return 0x822341CC;
		  /* 822341CCh */ case    3:  		/* mr R31, R3 */
		/* 822341CCh case    3:*/		regs.R31 = regs.R3;
		/* 822341CCh case    3:*/		return 0x822341D0;
		  /* 822341D0h */ case    4:  		/* mr R30, R4 */
		/* 822341D0h case    4:*/		regs.R30 = regs.R4;
		/* 822341D0h case    4:*/		return 0x822341D4;
		  /* 822341D4h */ case    5:  		/* mr R28, R5 */
		/* 822341D4h case    5:*/		regs.R28 = regs.R5;
		/* 822341D4h case    5:*/		return 0x822341D8;
		  /* 822341D8h */ case    6:  		/* mr R29, R6 */
		/* 822341D8h case    6:*/		regs.R29 = regs.R6;
		/* 822341D8h case    6:*/		return 0x822341DC;
		  /* 822341DCh */ case    7:  		/* mr R27, R7 */
		/* 822341DCh case    7:*/		regs.R27 = regs.R7;
		/* 822341DCh case    7:*/		return 0x822341E0;
		  /* 822341E0h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822341E0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822341E0h case    8:*/		return 0x822341E4;
		  /* 822341E4h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 822341E4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82234208;  }
		/* 822341E4h case    9:*/		return 0x822341E8;
		  /* 822341E8h */ case   10:  		/* lis R11, -32252 */
		/* 822341E8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822341E8h case   10:*/		return 0x822341EC;
		  /* 822341ECh */ case   11:  		/* lis R10, -32253 */
		/* 822341ECh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822341ECh case   11:*/		return 0x822341F0;
	}
	return 0x822341F0;
} // Block from 822341C0h-822341F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822341F0h
// Function '?CompileGetBorderColorA@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822341F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822341F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822341F0);
		  /* 822341F0h */ case    0:  		/* lis R9, -32253 */
		/* 822341F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822341F0h case    0:*/		return 0x822341F4;
		  /* 822341F4h */ case    1:  		/* addi R6, R11, 4336 */
		/* 822341F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822341F4h case    1:*/		return 0x822341F8;
		  /* 822341F8h */ case    2:  		/* addi R5, R10, 27792 */
		/* 822341F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822341F8h case    2:*/		return 0x822341FC;
		  /* 822341FCh */ case    3:  		/* addi R4, R9, 27460 */
		/* 822341FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822341FCh case    3:*/		return 0x82234200;
		  /* 82234200h */ case    4:  		/* li R7, 4327 */
		/* 82234200h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x10E7);
		/* 82234200h case    4:*/		return 0x82234204;
		  /* 82234204h */ case    5:  		/* bl -902652 */
		/* 82234204h case    5:*/		regs.LR = 0x82234208; return 0x82157C08;
		/* 82234204h case    5:*/		return 0x82234208;
	}
	return 0x82234208;
} // Block from 822341F0h-82234208h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234208);
		  /* 82234208h */ case    0:  		/* mr R5, R30 */
		/* 82234208h case    0:*/		regs.R5 = regs.R30;
		/* 82234208h case    0:*/		return 0x8223420C;
		  /* 8223420Ch */ case    1:  		/* li R4, 25 */
		/* 8223420Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x19);
		/* 8223420Ch case    1:*/		return 0x82234210;
		  /* 82234210h */ case    2:  		/* mr R3, R31 */
		/* 82234210h case    2:*/		regs.R3 = regs.R31;
		/* 82234210h case    2:*/		return 0x82234214;
		  /* 82234214h */ case    3:  		/* bl -149836 */
		/* 82234214h case    3:*/		regs.LR = 0x82234218; return 0x8220F8C8;
		/* 82234214h case    3:*/		return 0x82234218;
		  /* 82234218h */ case    4:  		/* stfs FR1, <#[R28]> */
		/* 82234218h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 82234218h case    4:*/		return 0x8223421C;
		  /* 8223421Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8223421Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223421Ch case    5:*/		return 0x82234220;
		  /* 82234220h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 82234220h case    6:*/		if ( regs.CR[6].eq ) { return 0x82234260;  }
		/* 82234220h case    6:*/		return 0x82234224;
		  /* 82234224h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 82234224h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234224h case    7:*/		return 0x82234228;
		  /* 82234228h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 82234228h case    8:*/		if ( regs.CR[6].eq ) { return 0x82234260;  }
		/* 82234228h case    8:*/		return 0x8223422C;
		  /* 8223422Ch */ case    9:  		/* addi R4, R1, 80 */
		/* 8223422Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8223422Ch case    9:*/		return 0x82234230;
		  /* 82234230h */ case   10:  		/* bl -17360 */
		/* 82234230h case   10:*/		regs.LR = 0x82234234; return 0x8222FE60;
		/* 82234230h case   10:*/		return 0x82234234;
		  /* 82234234h */ case   11:  		/* lis R11, -32216 */
		/* 82234234h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234234h case   11:*/		return 0x82234238;
		  /* 82234238h */ case   12:  		/* lis R10, -32252 */
		/* 82234238h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234238h case   12:*/		return 0x8223423C;
		  /* 8223423Ch */ case   13:  		/* mtspr CTR, R29 */
		/* 8223423Ch case   13:*/		regs.CTR = regs.R29;
		/* 8223423Ch case   13:*/		return 0x82234240;
		  /* 82234240h */ case   14:  		/* addi R11, R11, 11160 */
		/* 82234240h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234240h case   14:*/		return 0x82234244;
		  /* 82234244h */ case   15:  		/* addi R4, R10, 4696 */
		/* 82234244h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82234244h case   15:*/		return 0x82234248;
		  /* 82234248h */ case   16:  		/* addi R8, R1, 80 */
		/* 82234248h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82234248h case   16:*/		return 0x8223424C;
		  /* 8223424Ch */ case   17:  		/* mr R7, R30 */
		/* 8223424Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223424Ch case   17:*/		return 0x82234250;
		  /* 82234250h */ case   18:  		/* li R6, 66 */
		/* 82234250h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x42);
		/* 82234250h case   18:*/		return 0x82234254;
		  /* 82234254h */ case   19:  		/* mr R3, R27 */
		/* 82234254h case   19:*/		regs.R3 = regs.R27;
		/* 82234254h case   19:*/		return 0x82234258;
		  /* 82234258h */ case   20:  		/* lwz R5, <#[R11 + 264]> */
		/* 82234258h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000108) );
		/* 82234258h case   20:*/		return 0x8223425C;
		  /* 8223425Ch */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8223425Ch case   21:*/		if ( 1 ) { regs.LR = 0x82234260; return (uint32)regs.CTR; }
		/* 8223425Ch case   21:*/		return 0x82234260;
	}
	return 0x82234260;
} // Block from 82234208h-82234260h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82234260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234260);
		  /* 82234260h */ case    0:  		/* li R3, 1 */
		/* 82234260h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234260h case    0:*/		return 0x82234264;
		  /* 82234264h */ case    1:  		/* addi R1, R1, 160 */
		/* 82234264h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82234264h case    1:*/		return 0x82234268;
		  /* 82234268h */ case    2:  		/* b -1716164 */
		/* 82234268h case    2:*/		return 0x820912A4;
		/* 82234268h case    2:*/		return 0x8223426C;
		  /* 8223426Ch */ case    3:  		/* nop */
		/* 8223426Ch case    3:*/		cpu::op::nop();
		/* 8223426Ch case    3:*/		return 0x82234270;
	}
	return 0x82234270;
} // Block from 82234260h-82234270h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82234270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234270);
		  /* 82234270h */ case    0:  		/* mfspr R12, LR */
		/* 82234270h case    0:*/		regs.R12 = regs.LR;
		/* 82234270h case    0:*/		return 0x82234274;
		  /* 82234274h */ case    1:  		/* bl -1716256 */
		/* 82234274h case    1:*/		regs.LR = 0x82234278; return 0x82091254;
		/* 82234274h case    1:*/		return 0x82234278;
		  /* 82234278h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82234278h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82234278h case    2:*/		return 0x8223427C;
		  /* 8223427Ch */ case    3:  		/* mr R31, R3 */
		/* 8223427Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223427Ch case    3:*/		return 0x82234280;
		  /* 82234280h */ case    4:  		/* mr R30, R4 */
		/* 82234280h case    4:*/		regs.R30 = regs.R4;
		/* 82234280h case    4:*/		return 0x82234284;
		  /* 82234284h */ case    5:  		/* mr R29, R5 */
		/* 82234284h case    5:*/		regs.R29 = regs.R5;
		/* 82234284h case    5:*/		return 0x82234288;
		  /* 82234288h */ case    6:  		/* mr R28, R6 */
		/* 82234288h case    6:*/		regs.R28 = regs.R6;
		/* 82234288h case    6:*/		return 0x8223428C;
		  /* 8223428Ch */ case    7:  		/* mr R27, R7 */
		/* 8223428Ch case    7:*/		regs.R27 = regs.R7;
		/* 8223428Ch case    7:*/		return 0x82234290;
		  /* 82234290h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82234290h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234290h case    8:*/		return 0x82234294;
		  /* 82234294h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82234294h case    9:*/		if ( !regs.CR[6].eq ) { return 0x822342B8;  }
		/* 82234294h case    9:*/		return 0x82234298;
		  /* 82234298h */ case   10:  		/* lis R11, -32252 */
		/* 82234298h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234298h case   10:*/		return 0x8223429C;
		  /* 8223429Ch */ case   11:  		/* lis R10, -32253 */
		/* 8223429Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223429Ch case   11:*/		return 0x822342A0;
	}
	return 0x822342A0;
} // Block from 82234270h-822342A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822342A0h
// Function '?CompileGetFogBias@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822342A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822342A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822342A0);
		  /* 822342A0h */ case    0:  		/* lis R9, -32253 */
		/* 822342A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822342A0h case    0:*/		return 0x822342A4;
		  /* 822342A4h */ case    1:  		/* addi R6, R11, 4336 */
		/* 822342A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822342A4h case    1:*/		return 0x822342A8;
		  /* 822342A8h */ case    2:  		/* addi R5, R10, 27792 */
		/* 822342A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822342A8h case    2:*/		return 0x822342AC;
		  /* 822342ACh */ case    3:  		/* addi R4, R9, 27460 */
		/* 822342ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822342ACh case    3:*/		return 0x822342B0;
		  /* 822342B0h */ case    4:  		/* li R7, 4363 */
		/* 822342B0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x110B);
		/* 822342B0h case    4:*/		return 0x822342B4;
		  /* 822342B4h */ case    5:  		/* bl -902828 */
		/* 822342B4h case    5:*/		regs.LR = 0x822342B8; return 0x82157C08;
		/* 822342B4h case    5:*/		return 0x822342B8;
	}
	return 0x822342B8;
} // Block from 822342A0h-822342B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822342B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822342B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822342B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822342B8);
		  /* 822342B8h */ case    0:  		/* mr R5, R30 */
		/* 822342B8h case    0:*/		regs.R5 = regs.R30;
		/* 822342B8h case    0:*/		return 0x822342BC;
		  /* 822342BCh */ case    1:  		/* li R4, 89 */
		/* 822342BCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x59);
		/* 822342BCh case    1:*/		return 0x822342C0;
		  /* 822342C0h */ case    2:  		/* mr R3, R31 */
		/* 822342C0h case    2:*/		regs.R3 = regs.R31;
		/* 822342C0h case    2:*/		return 0x822342C4;
		  /* 822342C4h */ case    3:  		/* bl -879236 */
		/* 822342C4h case    3:*/		regs.LR = 0x822342C8; return 0x8215D840;
		/* 822342C4h case    3:*/		return 0x822342C8;
		  /* 822342C8h */ case    4:  		/* lis R11, 16384 */
		/* 822342C8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x4000);
		/* 822342C8h case    4:*/		return 0x822342CC;
		  /* 822342CCh */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 822342CCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822342CCh case    5:*/		return 0x822342D0;
		  /* 822342D0h */ case    6:  		/* rlwimi R11, R3, 30, 2, 31 */
		/* 822342D0h case    6:*/		cpu::op::rlwimi<0,30,2,31>(regs,&regs.R11,regs.R3);
		/* 822342D0h case    6:*/		return 0x822342D4;
		  /* 822342D4h */ case    7:  		/* stw R11, <#[R29]> */
		/* 822342D4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 822342D4h case    7:*/		return 0x822342D8;
		  /* 822342D8h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 822342D8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223431C;  }
		/* 822342D8h case    8:*/		return 0x822342DC;
		  /* 822342DCh */ case    9:  		/* cmplwi CR6, R27, 0 */
		/* 822342DCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822342DCh case    9:*/		return 0x822342E0;
		  /* 822342E0h */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 822342E0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8223431C;  }
		/* 822342E0h case   10:*/		return 0x822342E4;
		  /* 822342E4h */ case   11:  		/* addi R4, R1, 80 */
		/* 822342E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822342E4h case   11:*/		return 0x822342E8;
		  /* 822342E8h */ case   12:  		/* lfs FR1, <#[R29]> */
		/* 822342E8h case   12:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 822342E8h case   12:*/		return 0x822342EC;
		  /* 822342ECh */ case   13:  		/* bl -17548 */
		/* 822342ECh case   13:*/		regs.LR = 0x822342F0; return 0x8222FE60;
		/* 822342ECh case   13:*/		return 0x822342F0;
		  /* 822342F0h */ case   14:  		/* lis R11, -32216 */
		/* 822342F0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822342F0h case   14:*/		return 0x822342F4;
		  /* 822342F4h */ case   15:  		/* lis R10, -32252 */
		/* 822342F4h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822342F4h case   15:*/		return 0x822342F8;
		  /* 822342F8h */ case   16:  		/* mtspr CTR, R28 */
		/* 822342F8h case   16:*/		regs.CTR = regs.R28;
		/* 822342F8h case   16:*/		return 0x822342FC;
		  /* 822342FCh */ case   17:  		/* addi R11, R11, 11160 */
		/* 822342FCh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822342FCh case   17:*/		return 0x82234300;
		  /* 82234300h */ case   18:  		/* addi R4, R10, 4696 */
		/* 82234300h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82234300h case   18:*/		return 0x82234304;
		  /* 82234304h */ case   19:  		/* addi R8, R1, 80 */
		/* 82234304h case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82234304h case   19:*/		return 0x82234308;
		  /* 82234308h */ case   20:  		/* mr R7, R30 */
		/* 82234308h case   20:*/		regs.R7 = regs.R30;
		/* 82234308h case   20:*/		return 0x8223430C;
		  /* 8223430Ch */ case   21:  		/* li R6, 62 */
		/* 8223430Ch case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x3E);
		/* 8223430Ch case   21:*/		return 0x82234310;
		  /* 82234310h */ case   22:  		/* mr R3, R27 */
		/* 82234310h case   22:*/		regs.R3 = regs.R27;
		/* 82234310h case   22:*/		return 0x82234314;
		  /* 82234314h */ case   23:  		/* lwz R5, <#[R11 + 248]> */
		/* 82234314h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000000F8) );
		/* 82234314h case   23:*/		return 0x82234318;
		  /* 82234318h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82234318h case   24:*/		if ( 1 ) { regs.LR = 0x8223431C; return (uint32)regs.CTR; }
		/* 82234318h case   24:*/		return 0x8223431C;
	}
	return 0x8223431C;
} // Block from 822342B8h-8223431Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8223431Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223431C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223431C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223431C);
		  /* 8223431Ch */ case    0:  		/* li R3, 1 */
		/* 8223431Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223431Ch case    0:*/		return 0x82234320;
		  /* 82234320h */ case    1:  		/* addi R1, R1, 160 */
		/* 82234320h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82234320h case    1:*/		return 0x82234324;
		  /* 82234324h */ case    2:  		/* b -1716352 */
		/* 82234324h case    2:*/		return 0x820912A4;
		/* 82234324h case    2:*/		return 0x82234328;
	}
	return 0x82234328;
} // Block from 8223431Ch-82234328h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82234328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234328);
		  /* 82234328h */ case    0:  		/* mfspr R12, LR */
		/* 82234328h case    0:*/		regs.R12 = regs.LR;
		/* 82234328h case    0:*/		return 0x8223432C;
		  /* 8223432Ch */ case    1:  		/* bl -1716432 */
		/* 8223432Ch case    1:*/		regs.LR = 0x82234330; return 0x8209125C;
		/* 8223432Ch case    1:*/		return 0x82234330;
		  /* 82234330h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82234330h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82234330h case    2:*/		return 0x82234334;
		  /* 82234334h */ case    3:  		/* lis R11, 19200 */
		/* 82234334h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x4B00);
		/* 82234334h case    3:*/		return 0x82234338;
		  /* 82234338h */ case    4:  		/* mr R29, R4 */
		/* 82234338h case    4:*/		regs.R29 = regs.R4;
		/* 82234338h case    4:*/		return 0x8223433C;
		  /* 8223433Ch */ case    5:  		/* mr R31, R6 */
		/* 8223433Ch case    5:*/		regs.R31 = regs.R6;
		/* 8223433Ch case    5:*/		return 0x82234340;
		  /* 82234340h */ case    6:  		/* stw R11, <#[R5]> */
		/* 82234340h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82234340h case    6:*/		return 0x82234344;
		  /* 82234344h */ case    7:  		/* mr R30, R7 */
		/* 82234344h case    7:*/		regs.R30 = regs.R7;
		/* 82234344h case    7:*/		return 0x82234348;
		  /* 82234348h */ case    8:  		/* cmplwi CR6, R6, 0 */
		/* 82234348h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82234348h case    8:*/		return 0x8223434C;
		  /* 8223434Ch */ case    9:  		/* bc 12, CR6_EQ, 68 */
		/* 8223434Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82234390;  }
		/* 8223434Ch case    9:*/		return 0x82234350;
		  /* 82234350h */ case   10:  		/* cmplwi CR6, R7, 0 */
		/* 82234350h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82234350h case   10:*/		return 0x82234354;
		  /* 82234354h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 82234354h case   11:*/		if ( regs.CR[6].eq ) { return 0x82234390;  }
		/* 82234354h case   11:*/		return 0x82234358;
		  /* 82234358h */ case   12:  		/* addi R4, R1, 80 */
		/* 82234358h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82234358h case   12:*/		return 0x8223435C;
		  /* 8223435Ch */ case   13:  		/* lfs FR1, <#[R5]> */
		/* 8223435Ch case   13:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R5 + 0x00000000) );
		/* 8223435Ch case   13:*/		return 0x82234360;
		  /* 82234360h */ case   14:  		/* bl -17664 */
		/* 82234360h case   14:*/		regs.LR = 0x82234364; return 0x8222FE60;
		/* 82234360h case   14:*/		return 0x82234364;
		  /* 82234364h */ case   15:  		/* lis R11, -32216 */
		/* 82234364h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234364h case   15:*/		return 0x82234368;
		  /* 82234368h */ case   16:  		/* lis R10, -32252 */
		/* 82234368h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234368h case   16:*/		return 0x8223436C;
		  /* 8223436Ch */ case   17:  		/* mtspr CTR, R31 */
		/* 8223436Ch case   17:*/		regs.CTR = regs.R31;
		/* 8223436Ch case   17:*/		return 0x82234370;
		  /* 82234370h */ case   18:  		/* addi R11, R11, 11160 */
		/* 82234370h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234370h case   18:*/		return 0x82234374;
		  /* 82234374h */ case   19:  		/* addi R4, R10, 4696 */
		/* 82234374h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82234374h case   19:*/		return 0x82234378;
		  /* 82234378h */ case   20:  		/* addi R8, R1, 80 */
		/* 82234378h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82234378h case   20:*/		return 0x8223437C;
		  /* 8223437Ch */ case   21:  		/* mr R7, R29 */
		/* 8223437Ch case   21:*/		regs.R7 = regs.R29;
		/* 8223437Ch case   21:*/		return 0x82234380;
		  /* 82234380h */ case   22:  		/* li R6, 88 */
		/* 82234380h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x58);
		/* 82234380h case   22:*/		return 0x82234384;
		  /* 82234384h */ case   23:  		/* mr R3, R30 */
		/* 82234384h case   23:*/		regs.R3 = regs.R30;
		/* 82234384h case   23:*/		return 0x82234388;
		  /* 82234388h */ case   24:  		/* lwz R5, <#[R11 + 352]> */
		/* 82234388h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000160) );
		/* 82234388h case   24:*/		return 0x8223438C;
		  /* 8223438Ch */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 8223438Ch case   25:*/		if ( 1 ) { regs.LR = 0x82234390; return (uint32)regs.CTR; }
		/* 8223438Ch case   25:*/		return 0x82234390;
	}
	return 0x82234390;
} // Block from 82234328h-82234390h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82234390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234390);
		  /* 82234390h */ case    0:  		/* li R3, 1 */
		/* 82234390h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234390h case    0:*/		return 0x82234394;
		  /* 82234394h */ case    1:  		/* addi R1, R1, 144 */
		/* 82234394h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82234394h case    1:*/		return 0x82234398;
		  /* 82234398h */ case    2:  		/* b -1716460 */
		/* 82234398h case    2:*/		return 0x820912AC;
		/* 82234398h case    2:*/		return 0x8223439C;
		  /* 8223439Ch */ case    3:  		/* nop */
		/* 8223439Ch case    3:*/		cpu::op::nop();
		/* 8223439Ch case    3:*/		return 0x822343A0;
	}
	return 0x822343A0;
} // Block from 82234390h-822343A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822343A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822343A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822343A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822343A0);
		  /* 822343A0h */ case    0:  		/* mfspr R12, LR */
		/* 822343A0h case    0:*/		regs.R12 = regs.LR;
		/* 822343A0h case    0:*/		return 0x822343A4;
		  /* 822343A4h */ case    1:  		/* bl -1716572 */
		/* 822343A4h case    1:*/		regs.LR = 0x822343A8; return 0x82091248;
		/* 822343A4h case    1:*/		return 0x822343A8;
	}
	return 0x822343A8;
} // Block from 822343A0h-822343A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822343A8h
// Function '?CompileGetFogScale@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822343A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822343A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822343A8);
		  /* 822343A8h */ case    0:  		/* stwu R1, <#[R1 - 192]> */
		/* 822343A8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 822343A8h case    0:*/		return 0x822343AC;
		  /* 822343ACh */ case    1:  		/* lis R11, -32253 */
		/* 822343ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822343ACh case    1:*/		return 0x822343B0;
		  /* 822343B0h */ case    2:  		/* lis R10, -32252 */
		/* 822343B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822343B0h case    2:*/		return 0x822343B4;
		  /* 822343B4h */ case    3:  		/* mr R31, R3 */
		/* 822343B4h case    3:*/		regs.R31 = regs.R3;
		/* 822343B4h case    3:*/		return 0x822343B8;
		  /* 822343B8h */ case    4:  		/* mr R29, R4 */
		/* 822343B8h case    4:*/		regs.R29 = regs.R4;
		/* 822343B8h case    4:*/		return 0x822343BC;
		  /* 822343BCh */ case    5:  		/* mr R26, R5 */
		/* 822343BCh case    5:*/		regs.R26 = regs.R5;
		/* 822343BCh case    5:*/		return 0x822343C0;
		  /* 822343C0h */ case    6:  		/* mr R25, R6 */
		/* 822343C0h case    6:*/		regs.R25 = regs.R6;
		/* 822343C0h case    6:*/		return 0x822343C4;
		  /* 822343C4h */ case    7:  		/* mr R24, R7 */
		/* 822343C4h case    7:*/		regs.R24 = regs.R7;
		/* 822343C4h case    7:*/		return 0x822343C8;
		  /* 822343C8h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 822343C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822343C8h case    8:*/		return 0x822343CC;
		  /* 822343CCh */ case    9:  		/* addi R28, R11, 27460 */
		/* 822343CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 822343CCh case    9:*/		return 0x822343D0;
		  /* 822343D0h */ case   10:  		/* addi R27, R10, 4336 */
		/* 822343D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x10F0);
		/* 822343D0h case   10:*/		return 0x822343D4;
		  /* 822343D4h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 822343D4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x822343F4;  }
		/* 822343D4h case   11:*/		return 0x822343D8;
		  /* 822343D8h */ case   12:  		/* lis R11, -32253 */
		/* 822343D8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822343D8h case   12:*/		return 0x822343DC;
		  /* 822343DCh */ case   13:  		/* mr R6, R27 */
		/* 822343DCh case   13:*/		regs.R6 = regs.R27;
		/* 822343DCh case   13:*/		return 0x822343E0;
		  /* 822343E0h */ case   14:  		/* addi R5, R11, 27792 */
		/* 822343E0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 822343E0h case   14:*/		return 0x822343E4;
		  /* 822343E4h */ case   15:  		/* mr R4, R28 */
		/* 822343E4h case   15:*/		regs.R4 = regs.R28;
		/* 822343E4h case   15:*/		return 0x822343E8;
		  /* 822343E8h */ case   16:  		/* li R7, 4437 */
		/* 822343E8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1155);
		/* 822343E8h case   16:*/		return 0x822343EC;
		  /* 822343ECh */ case   17:  		/* li R3, 0 */
		/* 822343ECh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822343ECh case   17:*/		return 0x822343F0;
		  /* 822343F0h */ case   18:  		/* bl -903144 */
		/* 822343F0h case   18:*/		regs.LR = 0x822343F4; return 0x82157C08;
		/* 822343F0h case   18:*/		return 0x822343F4;
	}
	return 0x822343F4;
} // Block from 822343A8h-822343F4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 822343F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822343F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822343F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822343F4);
		  /* 822343F4h */ case    0:  		/* mr R5, R29 */
		/* 822343F4h case    0:*/		regs.R5 = regs.R29;
		/* 822343F4h case    0:*/		return 0x822343F8;
		  /* 822343F8h */ case    1:  		/* li R4, 91 */
		/* 822343F8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x5B);
		/* 822343F8h case    1:*/		return 0x822343FC;
		  /* 822343FCh */ case    2:  		/* mr R3, R31 */
		/* 822343FCh case    2:*/		regs.R3 = regs.R31;
		/* 822343FCh case    2:*/		return 0x82234400;
		  /* 82234400h */ case    3:  		/* bl -879552 */
		/* 82234400h case    3:*/		regs.LR = 0x82234404; return 0x8215D840;
		/* 82234400h case    3:*/		return 0x82234404;
		  /* 82234404h */ case    4:  		/* mr R30, R3 */
		/* 82234404h case    4:*/		regs.R30 = regs.R3;
		/* 82234404h case    4:*/		return 0x82234408;
		  /* 82234408h */ case    5:  		/* mr R5, R29 */
		/* 82234408h case    5:*/		regs.R5 = regs.R29;
		/* 82234408h case    5:*/		return 0x8223440C;
		  /* 8223440Ch */ case    6:  		/* li R4, 92 */
		/* 8223440Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x5C);
		/* 8223440Ch case    6:*/		return 0x82234410;
		  /* 82234410h */ case    7:  		/* mr R3, R31 */
		/* 82234410h case    7:*/		regs.R3 = regs.R31;
		/* 82234410h case    7:*/		return 0x82234414;
		  /* 82234414h */ case    8:  		/* bl -879572 */
		/* 82234414h case    8:*/		regs.LR = 0x82234418; return 0x8215D840;
		/* 82234414h case    8:*/		return 0x82234418;
		  /* 82234418h */ case    9:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 82234418h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 82234418h case    9:*/		return 0x8223441C;
		  /* 8223441Ch */ case   10:  		/* lis R10, -32216 */
		/* 8223441Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 8223441Ch case   10:*/		return 0x82234420;
		  /* 82234420h */ case   11:  		/* add R9, R11, R3 */
		/* 82234420h case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R3);
		/* 82234420h case   11:*/		return 0x82234424;
		  /* 82234424h */ case   12:  		/* addi R11, R10, 11608 */
		/* 82234424h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x2D58);
		/* 82234424h case   12:*/		return 0x82234428;
		  /* 82234428h */ case   13:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82234428h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82234428h case   13:*/		return 0x8223442C;
		  /* 8223442Ch */ case   14:  		/* cmplwi CR6, R30, 2 */
		/* 8223442Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 8223442Ch case   14:*/		return 0x82234430;
		  /* 82234430h */ case   15:  		/* add R11, R10, R11 */
		/* 82234430h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82234430h case   15:*/		return 0x82234434;
		  /* 82234434h */ case   16:  		/* lwz R31, <#[R11 - 4]> */
		/* 82234434h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82234434h case   16:*/		return 0x82234438;
		  /* 82234438h */ case   17:  		/* bc 12, CR6_EQ, 64 */
		/* 82234438h case   17:*/		if ( regs.CR[6].eq ) { return 0x82234478;  }
		/* 82234438h case   17:*/		return 0x8223443C;
		  /* 8223443Ch */ case   18:  		/* cmplwi CR6, R30, 3 */
		/* 8223443Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 8223443Ch case   18:*/		return 0x82234440;
		  /* 82234440h */ case   19:  		/* bc 12, CR6_EQ, 56 */
		/* 82234440h case   19:*/		if ( regs.CR[6].eq ) { return 0x82234478;  }
		/* 82234440h case   19:*/		return 0x82234444;
		  /* 82234444h */ case   20:  		/* cmplwi CR6, R30, 1 */
		/* 82234444h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82234444h case   20:*/		return 0x82234448;
		  /* 82234448h */ case   21:  		/* bc 12, CR6_EQ, 40 */
		/* 82234448h case   21:*/		if ( regs.CR[6].eq ) { return 0x82234470;  }
		/* 82234448h case   21:*/		return 0x8223444C;
		  /* 8223444Ch */ case   22:  		/* cmplwi CR6, R30, 0 */
		/* 8223444Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223444Ch case   22:*/		return 0x82234450;
		  /* 82234450h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 82234450h case   23:*/		if ( regs.CR[6].eq ) { return 0x82234470;  }
		/* 82234450h case   23:*/		return 0x82234454;
		  /* 82234454h */ case   24:  		/* lis R11, -32252 */
		/* 82234454h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234454h case   24:*/		return 0x82234458;
		  /* 82234458h */ case   25:  		/* mr R6, R27 */
		/* 82234458h case   25:*/		regs.R6 = regs.R27;
		/* 82234458h case   25:*/		return 0x8223445C;
		  /* 8223445Ch */ case   26:  		/* addi R5, R11, -192 */
		/* 8223445Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFF40);
		/* 8223445Ch case   26:*/		return 0x82234460;
		  /* 82234460h */ case   27:  		/* mr R4, R28 */
		/* 82234460h case   27:*/		regs.R4 = regs.R28;
		/* 82234460h case   27:*/		return 0x82234464;
		  /* 82234464h */ case   28:  		/* li R7, 4450 */
		/* 82234464h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x1162);
		/* 82234464h case   28:*/		return 0x82234468;
		  /* 82234468h */ case   29:  		/* li R3, 0 */
		/* 82234468h case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234468h case   29:*/		return 0x8223446C;
		  /* 8223446Ch */ case   30:  		/* bl -903268 */
		/* 8223446Ch case   30:*/		regs.LR = 0x82234470; return 0x82157C08;
		/* 8223446Ch case   30:*/		return 0x82234470;
	}
	return 0x82234470;
} // Block from 822343F4h-82234470h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82234470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234470);
		  /* 82234470h */ case    0:  		/* li R11, 7 */
		/* 82234470h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 82234470h case    0:*/		return 0x82234474;
		  /* 82234474h */ case    1:  		/* b 8 */
		/* 82234474h case    1:*/		return 0x8223447C;
		/* 82234474h case    1:*/		return 0x82234478;
	}
	return 0x82234478;
} // Block from 82234470h-82234478h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234478);
		  /* 82234478h */ case    0:  		/* li R11, 2 */
		/* 82234478h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82234478h case    0:*/		return 0x8223447C;
	}
	return 0x8223447C;
} // Block from 82234478h-8223447Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223447Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223447C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223447C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223447C);
		  /* 8223447Ch */ case    0:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 8223447Ch case    0:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 8223447Ch case    0:*/		return 0x82234480;
		  /* 82234480h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 82234480h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234480h case    1:*/		return 0x82234484;
		  /* 82234484h */ case    2:  		/* oris R11, R11, 75 */
		/* 82234484h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4B);
		/* 82234484h case    2:*/		return 0x82234488;
		  /* 82234488h */ case    3:  		/* or R11, R11, R31 */
		/* 82234488h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 82234488h case    3:*/		return 0x8223448C;
		  /* 8223448Ch */ case    4:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 8223448Ch case    4:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 8223448Ch case    4:*/		return 0x82234490;
		  /* 82234490h */ case    5:  		/* stw R11, <#[R26]> */
		/* 82234490h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82234490h case    5:*/		return 0x82234494;
		  /* 82234494h */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 82234494h case    6:*/		if ( regs.CR[6].eq ) { return 0x822344D8;  }
		/* 82234494h case    6:*/		return 0x82234498;
		  /* 82234498h */ case    7:  		/* cmplwi CR6, R24, 0 */
		/* 82234498h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82234498h case    7:*/		return 0x8223449C;
		  /* 8223449Ch */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 8223449Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x822344D8;  }
		/* 8223449Ch case    8:*/		return 0x822344A0;
		  /* 822344A0h */ case    9:  		/* addi R4, R1, 80 */
		/* 822344A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 822344A0h case    9:*/		return 0x822344A4;
		  /* 822344A4h */ case   10:  		/* lfs FR1, <#[R26]> */
		/* 822344A4h case   10:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R26 + 0x00000000) );
		/* 822344A4h case   10:*/		return 0x822344A8;
		  /* 822344A8h */ case   11:  		/* bl -17992 */
		/* 822344A8h case   11:*/		regs.LR = 0x822344AC; return 0x8222FE60;
		/* 822344A8h case   11:*/		return 0x822344AC;
		  /* 822344ACh */ case   12:  		/* lis R11, -32216 */
		/* 822344ACh case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822344ACh case   12:*/		return 0x822344B0;
		  /* 822344B0h */ case   13:  		/* lis R10, -32252 */
		/* 822344B0h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822344B0h case   13:*/		return 0x822344B4;
		  /* 822344B4h */ case   14:  		/* mtspr CTR, R25 */
		/* 822344B4h case   14:*/		regs.CTR = regs.R25;
		/* 822344B4h case   14:*/		return 0x822344B8;
		  /* 822344B8h */ case   15:  		/* addi R11, R11, 11160 */
		/* 822344B8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 822344B8h case   15:*/		return 0x822344BC;
		  /* 822344BCh */ case   16:  		/* addi R4, R10, 4696 */
		/* 822344BCh case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 822344BCh case   16:*/		return 0x822344C0;
		  /* 822344C0h */ case   17:  		/* addi R8, R1, 80 */
		/* 822344C0h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 822344C0h case   17:*/		return 0x822344C4;
		  /* 822344C4h */ case   18:  		/* mr R7, R29 */
		/* 822344C4h case   18:*/		regs.R7 = regs.R29;
		/* 822344C4h case   18:*/		return 0x822344C8;
		  /* 822344C8h */ case   19:  		/* li R6, 89 */
		/* 822344C8h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x59);
		/* 822344C8h case   19:*/		return 0x822344CC;
		  /* 822344CCh */ case   20:  		/* mr R3, R24 */
		/* 822344CCh case   20:*/		regs.R3 = regs.R24;
		/* 822344CCh case   20:*/		return 0x822344D0;
		  /* 822344D0h */ case   21:  		/* lwz R5, <#[R11 + 356]> */
		/* 822344D0h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000164) );
		/* 822344D0h case   21:*/		return 0x822344D4;
		  /* 822344D4h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 822344D4h case   22:*/		if ( 1 ) { regs.LR = 0x822344D8; return (uint32)regs.CTR; }
		/* 822344D4h case   22:*/		return 0x822344D8;
	}
	return 0x822344D8;
} // Block from 8223447Ch-822344D8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822344D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822344D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822344D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822344D8);
		  /* 822344D8h */ case    0:  		/* li R3, 1 */
		/* 822344D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822344D8h case    0:*/		return 0x822344DC;
		  /* 822344DCh */ case    1:  		/* addi R1, R1, 192 */
		/* 822344DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 822344DCh case    1:*/		return 0x822344E0;
		  /* 822344E0h */ case    2:  		/* b -1716808 */
		/* 822344E0h case    2:*/		return 0x82091298;
		/* 822344E0h case    2:*/		return 0x822344E4;
		  /* 822344E4h */ case    3:  		/* nop */
		/* 822344E4h case    3:*/		cpu::op::nop();
		/* 822344E4h case    3:*/		return 0x822344E8;
	}
	return 0x822344E8;
} // Block from 822344D8h-822344E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822344E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822344E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822344E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822344E8);
		  /* 822344E8h */ case    0:  		/* mfspr R12, LR */
		/* 822344E8h case    0:*/		regs.R12 = regs.LR;
		/* 822344E8h case    0:*/		return 0x822344EC;
		  /* 822344ECh */ case    1:  		/* bl -1716888 */
		/* 822344ECh case    1:*/		regs.LR = 0x822344F0; return 0x82091254;
		/* 822344ECh case    1:*/		return 0x822344F0;
		  /* 822344F0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822344F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822344F0h case    2:*/		return 0x822344F4;
		  /* 822344F4h */ case    3:  		/* mr R31, R3 */
		/* 822344F4h case    3:*/		regs.R31 = regs.R3;
		/* 822344F4h case    3:*/		return 0x822344F8;
		  /* 822344F8h */ case    4:  		/* mr R30, R4 */
		/* 822344F8h case    4:*/		regs.R30 = regs.R4;
		/* 822344F8h case    4:*/		return 0x822344FC;
		  /* 822344FCh */ case    5:  		/* mr R29, R5 */
		/* 822344FCh case    5:*/		regs.R29 = regs.R5;
		/* 822344FCh case    5:*/		return 0x82234500;
		  /* 82234500h */ case    6:  		/* mr R28, R6 */
		/* 82234500h case    6:*/		regs.R28 = regs.R6;
		/* 82234500h case    6:*/		return 0x82234504;
		  /* 82234504h */ case    7:  		/* mr R27, R7 */
		/* 82234504h case    7:*/		regs.R27 = regs.R7;
		/* 82234504h case    7:*/		return 0x82234508;
	}
	return 0x82234508;
} // Block from 822344E8h-82234508h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82234508h
// Function '?CompileGetZScale@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234508);
		  /* 82234508h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82234508h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234508h case    0:*/		return 0x8223450C;
		  /* 8223450Ch */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 8223450Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82234530;  }
		/* 8223450Ch case    1:*/		return 0x82234510;
		  /* 82234510h */ case    2:  		/* lis R11, -32252 */
		/* 82234510h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234510h case    2:*/		return 0x82234514;
		  /* 82234514h */ case    3:  		/* lis R10, -32253 */
		/* 82234514h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82234514h case    3:*/		return 0x82234518;
		  /* 82234518h */ case    4:  		/* lis R9, -32253 */
		/* 82234518h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82234518h case    4:*/		return 0x8223451C;
		  /* 8223451Ch */ case    5:  		/* addi R6, R11, 4336 */
		/* 8223451Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 8223451Ch case    5:*/		return 0x82234520;
		  /* 82234520h */ case    6:  		/* addi R5, R10, 27792 */
		/* 82234520h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 82234520h case    6:*/		return 0x82234524;
		  /* 82234524h */ case    7:  		/* addi R4, R9, 27460 */
		/* 82234524h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82234524h case    7:*/		return 0x82234528;
		  /* 82234528h */ case    8:  		/* li R7, 4490 */
		/* 82234528h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x118A);
		/* 82234528h case    8:*/		return 0x8223452C;
		  /* 8223452Ch */ case    9:  		/* bl -903460 */
		/* 8223452Ch case    9:*/		regs.LR = 0x82234530; return 0x82157C08;
		/* 8223452Ch case    9:*/		return 0x82234530;
	}
	return 0x82234530;
} // Block from 82234508h-82234530h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82234530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234530);
		  /* 82234530h */ case    0:  		/* mr R5, R30 */
		/* 82234530h case    0:*/		regs.R5 = regs.R30;
		/* 82234530h case    0:*/		return 0x82234534;
		  /* 82234534h */ case    1:  		/* li R4, 90 */
		/* 82234534h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x5A);
		/* 82234534h case    1:*/		return 0x82234538;
		  /* 82234538h */ case    2:  		/* mr R3, R31 */
		/* 82234538h case    2:*/		regs.R3 = regs.R31;
		/* 82234538h case    2:*/		return 0x8223453C;
		  /* 8223453Ch */ case    3:  		/* bl -879868 */
		/* 8223453Ch case    3:*/		regs.LR = 0x82234540; return 0x8215D840;
		/* 8223453Ch case    3:*/		return 0x82234540;
		  /* 82234540h */ case    4:  		/* oris R11, R3, 19200 */
		/* 82234540h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R3,0x4B00);
		/* 82234540h case    4:*/		return 0x82234544;
		  /* 82234544h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 82234544h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82234544h case    5:*/		return 0x82234548;
		  /* 82234548h */ case    6:  		/* stw R11, <#[R29]> */
		/* 82234548h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82234548h case    6:*/		return 0x8223454C;
		  /* 8223454Ch */ case    7:  		/* bc 12, CR6_EQ, 68 */
		/* 8223454Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82234590;  }
		/* 8223454Ch case    7:*/		return 0x82234550;
		  /* 82234550h */ case    8:  		/* cmplwi CR6, R27, 0 */
		/* 82234550h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234550h case    8:*/		return 0x82234554;
		  /* 82234554h */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 82234554h case    9:*/		if ( regs.CR[6].eq ) { return 0x82234590;  }
		/* 82234554h case    9:*/		return 0x82234558;
		  /* 82234558h */ case   10:  		/* addi R4, R1, 80 */
		/* 82234558h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82234558h case   10:*/		return 0x8223455C;
		  /* 8223455Ch */ case   11:  		/* lfs FR1, <#[R29]> */
		/* 8223455Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 8223455Ch case   11:*/		return 0x82234560;
		  /* 82234560h */ case   12:  		/* bl -18176 */
		/* 82234560h case   12:*/		regs.LR = 0x82234564; return 0x8222FE60;
		/* 82234560h case   12:*/		return 0x82234564;
		  /* 82234564h */ case   13:  		/* lis R11, -32216 */
		/* 82234564h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234564h case   13:*/		return 0x82234568;
		  /* 82234568h */ case   14:  		/* lis R10, -32252 */
		/* 82234568h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234568h case   14:*/		return 0x8223456C;
		  /* 8223456Ch */ case   15:  		/* mtspr CTR, R28 */
		/* 8223456Ch case   15:*/		regs.CTR = regs.R28;
		/* 8223456Ch case   15:*/		return 0x82234570;
		  /* 82234570h */ case   16:  		/* addi R11, R11, 11160 */
		/* 82234570h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234570h case   16:*/		return 0x82234574;
		  /* 82234574h */ case   17:  		/* addi R4, R10, 4696 */
		/* 82234574h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1258);
		/* 82234574h case   17:*/		return 0x82234578;
		  /* 82234578h */ case   18:  		/* addi R8, R1, 80 */
		/* 82234578h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82234578h case   18:*/		return 0x8223457C;
		  /* 8223457Ch */ case   19:  		/* mr R7, R30 */
		/* 8223457Ch case   19:*/		regs.R7 = regs.R30;
		/* 8223457Ch case   19:*/		return 0x82234580;
		  /* 82234580h */ case   20:  		/* li R6, 90 */
		/* 82234580h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x5A);
		/* 82234580h case   20:*/		return 0x82234584;
		  /* 82234584h */ case   21:  		/* mr R3, R27 */
		/* 82234584h case   21:*/		regs.R3 = regs.R27;
		/* 82234584h case   21:*/		return 0x82234588;
		  /* 82234588h */ case   22:  		/* lwz R5, <#[R11 + 360]> */
		/* 82234588h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000168) );
		/* 82234588h case   22:*/		return 0x8223458C;
		  /* 8223458Ch */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 8223458Ch case   23:*/		if ( 1 ) { regs.LR = 0x82234590; return (uint32)regs.CTR; }
		/* 8223458Ch case   23:*/		return 0x82234590;
	}
	return 0x82234590;
} // Block from 82234530h-82234590h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82234590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234590);
		  /* 82234590h */ case    0:  		/* li R3, 1 */
		/* 82234590h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234590h case    0:*/		return 0x82234594;
		  /* 82234594h */ case    1:  		/* addi R1, R1, 160 */
		/* 82234594h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82234594h case    1:*/		return 0x82234598;
		  /* 82234598h */ case    2:  		/* b -1716980 */
		/* 82234598h case    2:*/		return 0x820912A4;
		/* 82234598h case    2:*/		return 0x8223459C;
		  /* 8223459Ch */ case    3:  		/* nop */
		/* 8223459Ch case    3:*/		cpu::op::nop();
		/* 8223459Ch case    3:*/		return 0x822345A0;
	}
	return 0x822345A0;
} // Block from 82234590h-822345A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822345A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822345A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822345A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822345A0);
		  /* 822345A0h */ case    0:  		/* mfspr R12, LR */
		/* 822345A0h case    0:*/		regs.R12 = regs.LR;
		/* 822345A0h case    0:*/		return 0x822345A4;
		  /* 822345A4h */ case    1:  		/* bl -1717072 */
		/* 822345A4h case    1:*/		regs.LR = 0x822345A8; return 0x82091254;
		/* 822345A4h case    1:*/		return 0x822345A8;
	}
	return 0x822345A8;
} // Block from 822345A0h-822345A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822345A8h
// Function '?CompileGetZOffset@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822345A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822345A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822345A8);
		  /* 822345A8h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 822345A8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822345A8h case    0:*/		return 0x822345AC;
		  /* 822345ACh */ case    1:  		/* mr R31, R3 */
		/* 822345ACh case    1:*/		regs.R31 = regs.R3;
		/* 822345ACh case    1:*/		return 0x822345B0;
		  /* 822345B0h */ case    2:  		/* mr R30, R4 */
		/* 822345B0h case    2:*/		regs.R30 = regs.R4;
		/* 822345B0h case    2:*/		return 0x822345B4;
		  /* 822345B4h */ case    3:  		/* mr R29, R5 */
		/* 822345B4h case    3:*/		regs.R29 = regs.R5;
		/* 822345B4h case    3:*/		return 0x822345B8;
		  /* 822345B8h */ case    4:  		/* mr R28, R6 */
		/* 822345B8h case    4:*/		regs.R28 = regs.R6;
		/* 822345B8h case    4:*/		return 0x822345BC;
		  /* 822345BCh */ case    5:  		/* mr R27, R7 */
		/* 822345BCh case    5:*/		regs.R27 = regs.R7;
		/* 822345BCh case    5:*/		return 0x822345C0;
		  /* 822345C0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 822345C0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822345C0h case    6:*/		return 0x822345C4;
		  /* 822345C4h */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 822345C4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x822345E8;  }
		/* 822345C4h case    7:*/		return 0x822345C8;
		  /* 822345C8h */ case    8:  		/* lis R11, -32252 */
		/* 822345C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822345C8h case    8:*/		return 0x822345CC;
		  /* 822345CCh */ case    9:  		/* lis R10, -32253 */
		/* 822345CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822345CCh case    9:*/		return 0x822345D0;
		  /* 822345D0h */ case   10:  		/* lis R9, -32253 */
		/* 822345D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822345D0h case   10:*/		return 0x822345D4;
		  /* 822345D4h */ case   11:  		/* addi R6, R11, 4336 */
		/* 822345D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F0);
		/* 822345D4h case   11:*/		return 0x822345D8;
		  /* 822345D8h */ case   12:  		/* addi R5, R10, 27792 */
		/* 822345D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 822345D8h case   12:*/		return 0x822345DC;
		  /* 822345DCh */ case   13:  		/* addi R4, R9, 27460 */
		/* 822345DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822345DCh case   13:*/		return 0x822345E0;
		  /* 822345E0h */ case   14:  		/* li R7, 447 */
		/* 822345E0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1BF);
		/* 822345E0h case   14:*/		return 0x822345E4;
		  /* 822345E4h */ case   15:  		/* bl -903644 */
		/* 822345E4h case   15:*/		regs.LR = 0x822345E8; return 0x82157C08;
		/* 822345E4h case   15:*/		return 0x822345E8;
	}
	return 0x822345E8;
} // Block from 822345A8h-822345E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822345E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822345E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822345E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822345E8);
		  /* 822345E8h */ case    0:  		/* mr R5, R30 */
		/* 822345E8h case    0:*/		regs.R5 = regs.R30;
		/* 822345E8h case    0:*/		return 0x822345EC;
		  /* 822345ECh */ case    1:  		/* li R4, 7 */
		/* 822345ECh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 822345ECh case    1:*/		return 0x822345F0;
		  /* 822345F0h */ case    2:  		/* mr R3, R31 */
		/* 822345F0h case    2:*/		regs.R3 = regs.R31;
		/* 822345F0h case    2:*/		return 0x822345F4;
		  /* 822345F4h */ case    3:  		/* bl -880052 */
		/* 822345F4h case    3:*/		regs.LR = 0x822345F8; return 0x8215D840;
		/* 822345F4h case    3:*/		return 0x822345F8;
		  /* 822345F8h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 822345F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 822345F8h case    4:*/		return 0x822345FC;
		  /* 822345FCh */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 822345FCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82234660;  }
		/* 822345FCh case    5:*/		return 0x82234600;
		  /* 82234600h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82234600h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82234600h case    6:*/		return 0x82234604;
		  /* 82234604h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82234604h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223461C;  }
		/* 82234604h case    7:*/		return 0x82234608;
		  /* 82234608h */ case    8:  		/* li R6, 1 */
		/* 82234608h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82234608h case    8:*/		return 0x8223460C;
		  /* 8223460Ch */ case    9:  		/* li R5, 0 */
		/* 8223460Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223460Ch case    9:*/		return 0x82234610;
		  /* 82234610h */ case   10:  		/* li R4, 43 */
		/* 82234610h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 82234610h case   10:*/		return 0x82234614;
		  /* 82234614h */ case   11:  		/* mr R3, R29 */
		/* 82234614h case   11:*/		regs.R3 = regs.R29;
		/* 82234614h case   11:*/		return 0x82234618;
		  /* 82234618h */ case   12:  		/* bl -879224 */
		/* 82234618h case   12:*/		regs.LR = 0x8223461C; return 0x8215DBA0;
		/* 82234618h case   12:*/		return 0x8223461C;
	}
	return 0x8223461C;
} // Block from 822345E8h-8223461Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223461Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223461C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223461C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223461C);
		  /* 8223461Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8223461Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223461Ch case    0:*/		return 0x82234620;
		  /* 82234620h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234620h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234658;  }
		/* 82234620h case    1:*/		return 0x82234624;
		  /* 82234624h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82234624h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234624h case    2:*/		return 0x82234628;
		  /* 82234628h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82234628h case    3:*/		if ( regs.CR[6].eq ) { return 0x82234658;  }
		/* 82234628h case    3:*/		return 0x8223462C;
		  /* 8223462Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223462Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223462Ch case    4:*/		return 0x82234630;
		  /* 82234630h */ case    5:  		/* mtspr CTR, R28 */
		/* 82234630h case    5:*/		regs.CTR = regs.R28;
		/* 82234630h case    5:*/		return 0x82234634;
		  /* 82234634h */ case    6:  		/* lis R10, -32252 */
		/* 82234634h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234634h case    6:*/		return 0x82234638;
		  /* 82234638h */ case    7:  		/* addi R11, R11, 11160 */
		/* 82234638h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234638h case    7:*/		return 0x8223463C;
		  /* 8223463Ch */ case    8:  		/* addi R4, R10, 4444 */
		/* 8223463Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 8223463Ch case    8:*/		return 0x82234640;
		  /* 82234640h */ case    9:  		/* li R8, 1 */
		/* 82234640h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82234640h case    9:*/		return 0x82234644;
		  /* 82234644h */ case   10:  		/* mr R7, R30 */
		/* 82234644h case   10:*/		regs.R7 = regs.R30;
		/* 82234644h case   10:*/		return 0x82234648;
	}
	return 0x82234648;
} // Block from 8223461Ch-82234648h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82234648h
// Function '?CompileGetYUVConstantsC00@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234648);
		  /* 82234648h */ case    0:  		/* li R6, 105 */
		/* 82234648h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x69);
		/* 82234648h case    0:*/		return 0x8223464C;
		  /* 8223464Ch */ case    1:  		/* mr R3, R27 */
		/* 8223464Ch case    1:*/		regs.R3 = regs.R27;
		/* 8223464Ch case    1:*/		return 0x82234650;
		  /* 82234650h */ case    2:  		/* lwz R5, <#[R11 + 420]> */
		/* 82234650h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000001A4) );
		/* 82234650h case    2:*/		return 0x82234654;
		  /* 82234654h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82234654h case    3:*/		if ( 1 ) { regs.LR = 0x82234658; return (uint32)regs.CTR; }
		/* 82234654h case    3:*/		return 0x82234658;
	}
	return 0x82234658;
} // Block from 82234648h-82234658h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82234658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234658);
		  /* 82234658h */ case    0:  		/* li R3, 1 */
		/* 82234658h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234658h case    0:*/		return 0x8223465C;
		  /* 8223465Ch */ case    1:  		/* b 96 */
		/* 8223465Ch case    1:*/		return 0x822346BC;
		/* 8223465Ch case    1:*/		return 0x82234660;
	}
	return 0x82234660;
} // Block from 82234658h-82234660h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234660h
// Function '?CompileGetYUVConstantsC01@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234660);
		  /* 82234660h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82234660h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82234660h case    0:*/		return 0x82234664;
		  /* 82234664h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82234664h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223467C;  }
		/* 82234664h case    1:*/		return 0x82234668;
		  /* 82234668h */ case    2:  		/* li R6, 0 */
		/* 82234668h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82234668h case    2:*/		return 0x8223466C;
		  /* 8223466Ch */ case    3:  		/* li R5, 0 */
		/* 8223466Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223466Ch case    3:*/		return 0x82234670;
		  /* 82234670h */ case    4:  		/* li R4, 4 */
		/* 82234670h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82234670h case    4:*/		return 0x82234674;
		  /* 82234674h */ case    5:  		/* mr R3, R29 */
		/* 82234674h case    5:*/		regs.R3 = regs.R29;
		/* 82234674h case    5:*/		return 0x82234678;
	}
	return 0x82234678;
} // Block from 82234660h-82234678h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234678h
// Function '?CompileGetYUVConstantsC02@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234678);
		  /* 82234678h */ case    0:  		/* bl -879320 */
		/* 82234678h case    0:*/		regs.LR = 0x8223467C; return 0x8215DBA0;
		/* 82234678h case    0:*/		return 0x8223467C;
	}
	return 0x8223467C;
} // Block from 82234678h-8223467Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223467Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223467C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223467C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223467C);
		  /* 8223467Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8223467Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8223467Ch case    0:*/		return 0x82234680;
		  /* 82234680h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234680h case    1:*/		if ( regs.CR[6].eq ) { return 0x822346B8;  }
		/* 82234680h case    1:*/		return 0x82234684;
		  /* 82234684h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82234684h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234684h case    2:*/		return 0x82234688;
		  /* 82234688h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82234688h case    3:*/		if ( regs.CR[6].eq ) { return 0x822346B8;  }
		/* 82234688h case    3:*/		return 0x8223468C;
		  /* 8223468Ch */ case    4:  		/* lis R11, -32216 */
		/* 8223468Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8223468Ch case    4:*/		return 0x82234690;
	}
	return 0x82234690;
} // Block from 8223467Ch-82234690h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82234690h
// Function '?CompileGetYUVConstantsC03@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234690);
		  /* 82234690h */ case    0:  		/* mtspr CTR, R28 */
		/* 82234690h case    0:*/		regs.CTR = regs.R28;
		/* 82234690h case    0:*/		return 0x82234694;
		  /* 82234694h */ case    1:  		/* lis R10, -32252 */
		/* 82234694h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234694h case    1:*/		return 0x82234698;
		  /* 82234698h */ case    2:  		/* addi R11, R11, 11160 */
		/* 82234698h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234698h case    2:*/		return 0x8223469C;
		  /* 8223469Ch */ case    3:  		/* addi R4, R10, 4444 */
		/* 8223469Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 8223469Ch case    3:*/		return 0x822346A0;
		  /* 822346A0h */ case    4:  		/* li R8, 0 */
		/* 822346A0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822346A0h case    4:*/		return 0x822346A4;
		  /* 822346A4h */ case    5:  		/* mr R7, R30 */
		/* 822346A4h case    5:*/		regs.R7 = regs.R30;
		/* 822346A4h case    5:*/		return 0x822346A8;
	}
	return 0x822346A8;
} // Block from 82234690h-822346A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822346A8h
// Function '?CompileGetYUVConstantsC12@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346A8);
		  /* 822346A8h */ case    0:  		/* li R6, 105 */
		/* 822346A8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x69);
		/* 822346A8h case    0:*/		return 0x822346AC;
		  /* 822346ACh */ case    1:  		/* mr R3, R27 */
		/* 822346ACh case    1:*/		regs.R3 = regs.R27;
		/* 822346ACh case    1:*/		return 0x822346B0;
		  /* 822346B0h */ case    2:  		/* lwz R5, <#[R11 + 420]> */
		/* 822346B0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x000001A4) );
		/* 822346B0h case    2:*/		return 0x822346B4;
		  /* 822346B4h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 822346B4h case    3:*/		if ( 1 ) { regs.LR = 0x822346B8; return (uint32)regs.CTR; }
		/* 822346B4h case    3:*/		return 0x822346B8;
	}
	return 0x822346B8;
} // Block from 822346A8h-822346B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822346B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346B8);
		  /* 822346B8h */ case    0:  		/* li R3, 0 */
		/* 822346B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822346B8h case    0:*/		return 0x822346BC;
	}
	return 0x822346BC;
} // Block from 822346B8h-822346BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822346BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346BC);
		  /* 822346BCh */ case    0:  		/* addi R1, R1, 128 */
		/* 822346BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822346BCh case    0:*/		return 0x822346C0;
	}
	return 0x822346C0;
} // Block from 822346BCh-822346C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822346C0h
// Function '?CompileGetYUVConstantsC21@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346C0);
		  /* 822346C0h */ case    0:  		/* b -1717276 */
		/* 822346C0h case    0:*/		return 0x820912A4;
		/* 822346C0h case    0:*/		return 0x822346C4;
		  /* 822346C4h */ case    1:  		/* nop */
		/* 822346C4h case    1:*/		cpu::op::nop();
		/* 822346C4h case    1:*/		return 0x822346C8;
	}
	return 0x822346C8;
} // Block from 822346C0h-822346C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822346C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346C8);
		  /* 822346C8h */ case    0:  		/* mfspr R12, LR */
		/* 822346C8h case    0:*/		regs.R12 = regs.LR;
		/* 822346C8h case    0:*/		return 0x822346CC;
		  /* 822346CCh */ case    1:  		/* bl -1717376 */
		/* 822346CCh case    1:*/		regs.LR = 0x822346D0; return 0x8209124C;
		/* 822346CCh case    1:*/		return 0x822346D0;
		  /* 822346D0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822346D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822346D0h case    2:*/		return 0x822346D4;
		  /* 822346D4h */ case    3:  		/* lis R11, -32253 */
		/* 822346D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822346D4h case    3:*/		return 0x822346D8;
	}
	return 0x822346D8;
} // Block from 822346C8h-822346D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822346D8h
// Function '?CompileGetYUVConstantsC22@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346D8);
		  /* 822346D8h */ case    0:  		/* lis R10, -32252 */
		/* 822346D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822346D8h case    0:*/		return 0x822346DC;
		  /* 822346DCh */ case    1:  		/* mr R28, R3 */
		/* 822346DCh case    1:*/		regs.R28 = regs.R3;
		/* 822346DCh case    1:*/		return 0x822346E0;
		  /* 822346E0h */ case    2:  		/* mr R31, R4 */
		/* 822346E0h case    2:*/		regs.R31 = regs.R4;
		/* 822346E0h case    2:*/		return 0x822346E4;
		  /* 822346E4h */ case    3:  		/* mr R27, R5 */
		/* 822346E4h case    3:*/		regs.R27 = regs.R5;
		/* 822346E4h case    3:*/		return 0x822346E8;
		  /* 822346E8h */ case    4:  		/* mr R26, R6 */
		/* 822346E8h case    4:*/		regs.R26 = regs.R6;
		/* 822346E8h case    4:*/		return 0x822346EC;
		  /* 822346ECh */ case    5:  		/* mr R25, R7 */
		/* 822346ECh case    5:*/		regs.R25 = regs.R7;
		/* 822346ECh case    5:*/		return 0x822346F0;
	}
	return 0x822346F0;
} // Block from 822346D8h-822346F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822346F0h
// Function '?CompileGetYUVConstantsC20@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822346F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822346F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822346F0);
		  /* 822346F0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 822346F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822346F0h case    0:*/		return 0x822346F4;
		  /* 822346F4h */ case    1:  		/* addi R30, R11, 27460 */
		/* 822346F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 822346F4h case    1:*/		return 0x822346F8;
		  /* 822346F8h */ case    2:  		/* addi R29, R10, 4336 */
		/* 822346F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x10F0);
		/* 822346F8h case    2:*/		return 0x822346FC;
		  /* 822346FCh */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 822346FCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223471C;  }
		/* 822346FCh case    3:*/		return 0x82234700;
		  /* 82234700h */ case    4:  		/* lis R11, -32253 */
		/* 82234700h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234700h case    4:*/		return 0x82234704;
		  /* 82234704h */ case    5:  		/* mr R6, R29 */
		/* 82234704h case    5:*/		regs.R6 = regs.R29;
		/* 82234704h case    5:*/		return 0x82234708;
	}
	return 0x82234708;
} // Block from 822346F0h-82234708h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234708h
// Function '?CompileGetYUVConstantsC30@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234708);
		  /* 82234708h */ case    0:  		/* addi R5, R11, 27792 */
		/* 82234708h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 82234708h case    0:*/		return 0x8223470C;
		  /* 8223470Ch */ case    1:  		/* mr R4, R30 */
		/* 8223470Ch case    1:*/		regs.R4 = regs.R30;
		/* 8223470Ch case    1:*/		return 0x82234710;
		  /* 82234710h */ case    2:  		/* li R7, 504 */
		/* 82234710h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1F8);
		/* 82234710h case    2:*/		return 0x82234714;
		  /* 82234714h */ case    3:  		/* li R3, 0 */
		/* 82234714h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234714h case    3:*/		return 0x82234718;
		  /* 82234718h */ case    4:  		/* bl -903952 */
		/* 82234718h case    4:*/		regs.LR = 0x8223471C; return 0x82157C08;
		/* 82234718h case    4:*/		return 0x8223471C;
	}
	return 0x8223471C;
} // Block from 82234708h-8223471Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223471Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223471C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223471C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223471C);
		  /* 8223471Ch */ case    0:  		/* cmpwi CR6, R31, 16 */
		/* 8223471Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000010);
		/* 8223471Ch case    0:*/		return 0x82234720;
	}
	return 0x82234720;
} // Block from 8223471Ch-82234720h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234720h
// Function '?CompileGetYUVConstantsC31@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234720);
		  /* 82234720h */ case    0:  		/* bc 12, CR6_LT, 32 */
		/* 82234720h case    0:*/		if ( regs.CR[6].lt ) { return 0x82234740;  }
		/* 82234720h case    0:*/		return 0x82234724;
		  /* 82234724h */ case    1:  		/* lis R11, -32252 */
		/* 82234724h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234724h case    1:*/		return 0x82234728;
		  /* 82234728h */ case    2:  		/* mr R6, R29 */
		/* 82234728h case    2:*/		regs.R6 = regs.R29;
		/* 82234728h case    2:*/		return 0x8223472C;
		  /* 8223472Ch */ case    3:  		/* addi R5, R11, 5020 */
		/* 8223472Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x139C);
		/* 8223472Ch case    3:*/		return 0x82234730;
		  /* 82234730h */ case    4:  		/* mr R4, R30 */
		/* 82234730h case    4:*/		regs.R4 = regs.R30;
		/* 82234730h case    4:*/		return 0x82234734;
		  /* 82234734h */ case    5:  		/* li R7, 505 */
		/* 82234734h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1F9);
		/* 82234734h case    5:*/		return 0x82234738;
	}
	return 0x82234738;
} // Block from 82234720h-82234738h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234738h
// Function '?CompileGetShadowFailThreshold@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234738);
		  /* 82234738h */ case    0:  		/* li R3, 0 */
		/* 82234738h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234738h case    0:*/		return 0x8223473C;
		  /* 8223473Ch */ case    1:  		/* bl -903988 */
		/* 8223473Ch case    1:*/		regs.LR = 0x82234740; return 0x82157C08;
		/* 8223473Ch case    1:*/		return 0x82234740;
	}
	return 0x82234740;
} // Block from 82234738h-82234740h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234740);
		  /* 82234740h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82234740h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82234740h case    0:*/		return 0x82234744;
		  /* 82234744h */ case    1:  		/* bc 4, CR6_LT, 32 */
		/* 82234744h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82234764;  }
		/* 82234744h case    1:*/		return 0x82234748;
		  /* 82234748h */ case    2:  		/* lis R11, -32252 */
		/* 82234748h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234748h case    2:*/		return 0x8223474C;
		  /* 8223474Ch */ case    3:  		/* mr R6, R29 */
		/* 8223474Ch case    3:*/		regs.R6 = regs.R29;
		/* 8223474Ch case    3:*/		return 0x82234750;
		  /* 82234750h */ case    4:  		/* addi R5, R11, 5008 */
		/* 82234750h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1390);
		/* 82234750h case    4:*/		return 0x82234754;
		  /* 82234754h */ case    5:  		/* mr R4, R30 */
		/* 82234754h case    5:*/		regs.R4 = regs.R30;
		/* 82234754h case    5:*/		return 0x82234758;
		  /* 82234758h */ case    6:  		/* li R7, 506 */
		/* 82234758h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1FA);
		/* 82234758h case    6:*/		return 0x8223475C;
		  /* 8223475Ch */ case    7:  		/* li R3, 0 */
		/* 8223475Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223475Ch case    7:*/		return 0x82234760;
		  /* 82234760h */ case    8:  		/* bl -904024 */
		/* 82234760h case    8:*/		regs.LR = 0x82234764; return 0x82157C08;
		/* 82234760h case    8:*/		return 0x82234764;
	}
	return 0x82234764;
} // Block from 82234740h-82234764h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234764);
		  /* 82234764h */ case    0:  		/* mr R5, R31 */
		/* 82234764h case    0:*/		regs.R5 = regs.R31;
		/* 82234764h case    0:*/		return 0x82234768;
		  /* 82234768h */ case    1:  		/* li R4, 12 */
		/* 82234768h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82234768h case    1:*/		return 0x8223476C;
		  /* 8223476Ch */ case    2:  		/* mr R3, R28 */
		/* 8223476Ch case    2:*/		regs.R3 = regs.R28;
		/* 8223476Ch case    2:*/		return 0x82234770;
		  /* 82234770h */ case    3:  		/* bl -880432 */
		/* 82234770h case    3:*/		regs.LR = 0x82234774; return 0x8215D840;
		/* 82234770h case    3:*/		return 0x82234774;
		  /* 82234774h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 82234774h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82234774h case    4:*/		return 0x82234778;
		  /* 82234778h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 82234778h case    5:*/		if ( regs.CR[6].eq ) { return 0x822347D8;  }
		/* 82234778h case    5:*/		return 0x8223477C;
		  /* 8223477Ch */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 8223477Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8223477Ch case    6:*/		return 0x82234780;
		  /* 82234780h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82234780h case    7:*/		if ( regs.CR[6].eq ) { return 0x82234798;  }
		/* 82234780h case    7:*/		return 0x82234784;
		  /* 82234784h */ case    8:  		/* li R6, 1 */
		/* 82234784h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82234784h case    8:*/		return 0x82234788;
		  /* 82234788h */ case    9:  		/* mr R5, R31 */
		/* 82234788h case    9:*/		regs.R5 = regs.R31;
		/* 82234788h case    9:*/		return 0x8223478C;
		  /* 8223478Ch */ case   10:  		/* li R4, 0 */
		/* 8223478Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223478Ch case   10:*/		return 0x82234790;
		  /* 82234790h */ case   11:  		/* mr R3, R27 */
		/* 82234790h case   11:*/		regs.R3 = regs.R27;
		/* 82234790h case   11:*/		return 0x82234794;
		  /* 82234794h */ case   12:  		/* bl -879604 */
		/* 82234794h case   12:*/		regs.LR = 0x82234798; return 0x8215DBA0;
		/* 82234794h case   12:*/		return 0x82234798;
	}
	return 0x82234798;
} // Block from 82234764h-82234798h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82234798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234798);
		  /* 82234798h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234798h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234798h case    0:*/		return 0x8223479C;
		  /* 8223479Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8223479Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822347D0;  }
		/* 8223479Ch case    1:*/		return 0x822347A0;
		  /* 822347A0h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 822347A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 822347A0h case    2:*/		return 0x822347A4;
		  /* 822347A4h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 822347A4h case    3:*/		if ( regs.CR[6].eq ) { return 0x822347D0;  }
		/* 822347A4h case    3:*/		return 0x822347A8;
		  /* 822347A8h */ case    4:  		/* lis R11, -32216 */
		/* 822347A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822347A8h case    4:*/		return 0x822347AC;
		  /* 822347ACh */ case    5:  		/* mtspr CTR, R26 */
		/* 822347ACh case    5:*/		regs.CTR = regs.R26;
		/* 822347ACh case    5:*/		return 0x822347B0;
		  /* 822347B0h */ case    6:  		/* lis R10, -32252 */
		/* 822347B0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822347B0h case    6:*/		return 0x822347B4;
		  /* 822347B4h */ case    7:  		/* li R8, 1 */
		/* 822347B4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822347B4h case    7:*/		return 0x822347B8;
		  /* 822347B8h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822347B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822347B8h case    8:*/		return 0x822347BC;
		  /* 822347BCh */ case    9:  		/* mr R7, R31 */
		/* 822347BCh case    9:*/		regs.R7 = regs.R31;
		/* 822347BCh case    9:*/		return 0x822347C0;
		  /* 822347C0h */ case   10:  		/* li R6, 0 */
		/* 822347C0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822347C0h case   10:*/		return 0x822347C4;
		  /* 822347C4h */ case   11:  		/* lwz R5, <#[R11 + 11160]> */
		/* 822347C4h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00002B98) );
		/* 822347C4h case   11:*/		return 0x822347C8;
		  /* 822347C8h */ case   12:  		/* mr R3, R25 */
		/* 822347C8h case   12:*/		regs.R3 = regs.R25;
		/* 822347C8h case   12:*/		return 0x822347CC;
		  /* 822347CCh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 822347CCh case   13:*/		if ( 1 ) { regs.LR = 0x822347D0; return (uint32)regs.CTR; }
		/* 822347CCh case   13:*/		return 0x822347D0;
	}
	return 0x822347D0;
} // Block from 82234798h-822347D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822347D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822347D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822347D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822347D0);
		  /* 822347D0h */ case    0:  		/* li R3, 1 */
		/* 822347D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822347D0h case    0:*/		return 0x822347D4;
		  /* 822347D4h */ case    1:  		/* b 92 */
		/* 822347D4h case    1:*/		return 0x82234830;
		/* 822347D4h case    1:*/		return 0x822347D8;
	}
	return 0x822347D8;
} // Block from 822347D0h-822347D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822347D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822347D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822347D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822347D8);
		  /* 822347D8h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 822347D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 822347D8h case    0:*/		return 0x822347DC;
		  /* 822347DCh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 822347DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x822347F4;  }
		/* 822347DCh case    1:*/		return 0x822347E0;
		  /* 822347E0h */ case    2:  		/* li R6, 0 */
		/* 822347E0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822347E0h case    2:*/		return 0x822347E4;
		  /* 822347E4h */ case    3:  		/* mr R5, R31 */
		/* 822347E4h case    3:*/		regs.R5 = regs.R31;
		/* 822347E4h case    3:*/		return 0x822347E8;
	}
	return 0x822347E8;
} // Block from 822347D8h-822347E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822347E8h
// Function '?CompileGetVertexStreamFrequencyDivideInterval@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822347E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822347E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822347E8);
		  /* 822347E8h */ case    0:  		/* li R4, 0 */
		/* 822347E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822347E8h case    0:*/		return 0x822347EC;
		  /* 822347ECh */ case    1:  		/* mr R3, R27 */
		/* 822347ECh case    1:*/		regs.R3 = regs.R27;
		/* 822347ECh case    1:*/		return 0x822347F0;
		  /* 822347F0h */ case    2:  		/* bl -879696 */
		/* 822347F0h case    2:*/		regs.LR = 0x822347F4; return 0x8215DBA0;
		/* 822347F0h case    2:*/		return 0x822347F4;
	}
	return 0x822347F4;
} // Block from 822347E8h-822347F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822347F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822347F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822347F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822347F4);
		  /* 822347F4h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 822347F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 822347F4h case    0:*/		return 0x822347F8;
		  /* 822347F8h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 822347F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223482C;  }
		/* 822347F8h case    1:*/		return 0x822347FC;
		  /* 822347FCh */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 822347FCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 822347FCh case    2:*/		return 0x82234800;
		  /* 82234800h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82234800h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223482C;  }
		/* 82234800h case    3:*/		return 0x82234804;
		  /* 82234804h */ case    4:  		/* lis R11, -32216 */
		/* 82234804h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234804h case    4:*/		return 0x82234808;
		  /* 82234808h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234808h case    5:*/		regs.CTR = regs.R26;
		/* 82234808h case    5:*/		return 0x8223480C;
		  /* 8223480Ch */ case    6:  		/* lis R10, -32252 */
		/* 8223480Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223480Ch case    6:*/		return 0x82234810;
		  /* 82234810h */ case    7:  		/* li R8, 0 */
		/* 82234810h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82234810h case    7:*/		return 0x82234814;
		  /* 82234814h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82234814h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82234814h case    8:*/		return 0x82234818;
		  /* 82234818h */ case    9:  		/* mr R7, R31 */
		/* 82234818h case    9:*/		regs.R7 = regs.R31;
		/* 82234818h case    9:*/		return 0x8223481C;
		  /* 8223481Ch */ case   10:  		/* li R6, 0 */
		/* 8223481Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223481Ch case   10:*/		return 0x82234820;
		  /* 82234820h */ case   11:  		/* lwz R5, <#[R11 + 11160]> */
		/* 82234820h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00002B98) );
		/* 82234820h case   11:*/		return 0x82234824;
		  /* 82234824h */ case   12:  		/* mr R3, R25 */
		/* 82234824h case   12:*/		regs.R3 = regs.R25;
		/* 82234824h case   12:*/		return 0x82234828;
		  /* 82234828h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82234828h case   13:*/		if ( 1 ) { regs.LR = 0x8223482C; return (uint32)regs.CTR; }
		/* 82234828h case   13:*/		return 0x8223482C;
	}
	return 0x8223482C;
} // Block from 822347F4h-8223482Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223482Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223482C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223482C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223482C);
		  /* 8223482Ch */ case    0:  		/* li R3, 0 */
		/* 8223482Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223482Ch case    0:*/		return 0x82234830;
	}
	return 0x82234830;
} // Block from 8223482Ch-82234830h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234830);
		  /* 82234830h */ case    0:  		/* addi R1, R1, 144 */
		/* 82234830h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82234830h case    0:*/		return 0x82234834;
		  /* 82234834h */ case    1:  		/* b -1717656 */
		/* 82234834h case    1:*/		return 0x8209129C;
		/* 82234834h case    1:*/		return 0x82234838;
	}
	return 0x82234838;
} // Block from 82234830h-82234838h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234838);
		  /* 82234838h */ case    0:  		/* mfspr R12, LR */
		/* 82234838h case    0:*/		regs.R12 = regs.LR;
		/* 82234838h case    0:*/		return 0x8223483C;
		  /* 8223483Ch */ case    1:  		/* bl -1717744 */
		/* 8223483Ch case    1:*/		regs.LR = 0x82234840; return 0x8209124C;
		/* 8223483Ch case    1:*/		return 0x82234840;
		  /* 82234840h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82234840h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82234840h case    2:*/		return 0x82234844;
		  /* 82234844h */ case    3:  		/* lis R11, -32253 */
		/* 82234844h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234844h case    3:*/		return 0x82234848;
		  /* 82234848h */ case    4:  		/* lis R10, -32252 */
		/* 82234848h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234848h case    4:*/		return 0x8223484C;
		  /* 8223484Ch */ case    5:  		/* mr R31, R3 */
		/* 8223484Ch case    5:*/		regs.R31 = regs.R3;
		/* 8223484Ch case    5:*/		return 0x82234850;
		  /* 82234850h */ case    6:  		/* mr R30, R4 */
		/* 82234850h case    6:*/		regs.R30 = regs.R4;
		/* 82234850h case    6:*/		return 0x82234854;
		  /* 82234854h */ case    7:  		/* mr R27, R5 */
		/* 82234854h case    7:*/		regs.R27 = regs.R5;
		/* 82234854h case    7:*/		return 0x82234858;
		  /* 82234858h */ case    8:  		/* mr R26, R6 */
		/* 82234858h case    8:*/		regs.R26 = regs.R6;
		/* 82234858h case    8:*/		return 0x8223485C;
		  /* 8223485Ch */ case    9:  		/* mr R25, R7 */
		/* 8223485Ch case    9:*/		regs.R25 = regs.R7;
		/* 8223485Ch case    9:*/		return 0x82234860;
		  /* 82234860h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 82234860h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234860h case   10:*/		return 0x82234864;
		  /* 82234864h */ case   11:  		/* addi R29, R11, 27460 */
		/* 82234864h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 82234864h case   11:*/		return 0x82234868;
		  /* 82234868h */ case   12:  		/* addi R28, R10, 4336 */
		/* 82234868h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x10F0);
		/* 82234868h case   12:*/		return 0x8223486C;
		  /* 8223486Ch */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8223486Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8223488C;  }
		/* 8223486Ch case   13:*/		return 0x82234870;
		  /* 82234870h */ case   14:  		/* lis R11, -32253 */
		/* 82234870h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234870h case   14:*/		return 0x82234874;
		  /* 82234874h */ case   15:  		/* mr R6, R28 */
		/* 82234874h case   15:*/		regs.R6 = regs.R28;
		/* 82234874h case   15:*/		return 0x82234878;
		  /* 82234878h */ case   16:  		/* addi R5, R11, 27792 */
		/* 82234878h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 82234878h case   16:*/		return 0x8223487C;
		  /* 8223487Ch */ case   17:  		/* mr R4, R29 */
		/* 8223487Ch case   17:*/		regs.R4 = regs.R29;
		/* 8223487Ch case   17:*/		return 0x82234880;
		  /* 82234880h */ case   18:  		/* li R7, 561 */
		/* 82234880h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x231);
		/* 82234880h case   18:*/		return 0x82234884;
		  /* 82234884h */ case   19:  		/* li R3, 0 */
		/* 82234884h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234884h case   19:*/		return 0x82234888;
		  /* 82234888h */ case   20:  		/* bl -904320 */
		/* 82234888h case   20:*/		regs.LR = 0x8223488C; return 0x82157C08;
		/* 82234888h case   20:*/		return 0x8223488C;
	}
	return 0x8223488C;
} // Block from 82234838h-8223488Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8223488Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223488C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223488C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223488C);
		  /* 8223488Ch */ case    0:  		/* cmpwi CR6, R30, 16 */
		/* 8223488Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000010);
		/* 8223488Ch case    0:*/		return 0x82234890;
		  /* 82234890h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 82234890h case    1:*/		if ( regs.CR[6].lt ) { return 0x822348B0;  }
		/* 82234890h case    1:*/		return 0x82234894;
		  /* 82234894h */ case    2:  		/* lis R11, -32252 */
		/* 82234894h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234894h case    2:*/		return 0x82234898;
		  /* 82234898h */ case    3:  		/* mr R6, R28 */
		/* 82234898h case    3:*/		regs.R6 = regs.R28;
		/* 82234898h case    3:*/		return 0x8223489C;
		  /* 8223489Ch */ case    4:  		/* addi R5, R11, 5020 */
		/* 8223489Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x139C);
		/* 8223489Ch case    4:*/		return 0x822348A0;
		  /* 822348A0h */ case    5:  		/* mr R4, R29 */
		/* 822348A0h case    5:*/		regs.R4 = regs.R29;
		/* 822348A0h case    5:*/		return 0x822348A4;
		  /* 822348A4h */ case    6:  		/* li R7, 562 */
		/* 822348A4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x232);
		/* 822348A4h case    6:*/		return 0x822348A8;
	}
	return 0x822348A8;
} // Block from 8223488Ch-822348A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822348A8h
// Function '?CompileGetFogStart@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822348A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822348A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822348A8);
		  /* 822348A8h */ case    0:  		/* li R3, 0 */
		/* 822348A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822348A8h case    0:*/		return 0x822348AC;
		  /* 822348ACh */ case    1:  		/* bl -904356 */
		/* 822348ACh case    1:*/		regs.LR = 0x822348B0; return 0x82157C08;
		/* 822348ACh case    1:*/		return 0x822348B0;
	}
	return 0x822348B0;
} // Block from 822348A8h-822348B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822348B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822348B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822348B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822348B0);
		  /* 822348B0h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 822348B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 822348B0h case    0:*/		return 0x822348B4;
		  /* 822348B4h */ case    1:  		/* bc 4, CR6_LT, 32 */
		/* 822348B4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x822348D4;  }
		/* 822348B4h case    1:*/		return 0x822348B8;
		  /* 822348B8h */ case    2:  		/* lis R11, -32252 */
		/* 822348B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822348B8h case    2:*/		return 0x822348BC;
		  /* 822348BCh */ case    3:  		/* mr R6, R28 */
		/* 822348BCh case    3:*/		regs.R6 = regs.R28;
		/* 822348BCh case    3:*/		return 0x822348C0;
		  /* 822348C0h */ case    4:  		/* addi R5, R11, 5008 */
		/* 822348C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1390);
		/* 822348C0h case    4:*/		return 0x822348C4;
		  /* 822348C4h */ case    5:  		/* mr R4, R29 */
		/* 822348C4h case    5:*/		regs.R4 = regs.R29;
		/* 822348C4h case    5:*/		return 0x822348C8;
		  /* 822348C8h */ case    6:  		/* li R7, 563 */
		/* 822348C8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x233);
		/* 822348C8h case    6:*/		return 0x822348CC;
		  /* 822348CCh */ case    7:  		/* li R3, 0 */
		/* 822348CCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822348CCh case    7:*/		return 0x822348D0;
		  /* 822348D0h */ case    8:  		/* bl -904392 */
		/* 822348D0h case    8:*/		regs.LR = 0x822348D4; return 0x82157C08;
		/* 822348D0h case    8:*/		return 0x822348D4;
	}
	return 0x822348D4;
} // Block from 822348B0h-822348D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822348D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822348D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822348D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822348D4);
		  /* 822348D4h */ case    0:  		/* li R4, 135 */
		/* 822348D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x87);
		/* 822348D4h case    0:*/		return 0x822348D8;
		  /* 822348D8h */ case    1:  		/* mr R3, R31 */
		/* 822348D8h case    1:*/		regs.R3 = regs.R31;
		/* 822348D8h case    1:*/		return 0x822348DC;
		  /* 822348DCh */ case    2:  		/* bl -881612 */
		/* 822348DCh case    2:*/		regs.LR = 0x822348E0; return 0x8215D510;
		/* 822348DCh case    2:*/		return 0x822348E0;
		  /* 822348E0h */ case    3:  		/* mr R29, R3 */
		/* 822348E0h case    3:*/		regs.R29 = regs.R3;
		/* 822348E0h case    3:*/		return 0x822348E4;
		  /* 822348E4h */ case    4:  		/* mr R5, R30 */
		/* 822348E4h case    4:*/		regs.R5 = regs.R30;
		/* 822348E4h case    4:*/		return 0x822348E8;
		  /* 822348E8h */ case    5:  		/* li R4, 12 */
		/* 822348E8h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 822348E8h case    5:*/		return 0x822348EC;
		  /* 822348ECh */ case    6:  		/* mr R3, R31 */
		/* 822348ECh case    6:*/		regs.R3 = regs.R31;
		/* 822348ECh case    6:*/		return 0x822348F0;
		  /* 822348F0h */ case    7:  		/* bl -880816 */
		/* 822348F0h case    7:*/		regs.LR = 0x822348F4; return 0x8215D840;
		/* 822348F0h case    7:*/		return 0x822348F4;
		  /* 822348F4h */ case    8:  		/* cmplwi CR6, R3, 1 */
		/* 822348F4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 822348F4h case    8:*/		return 0x822348F8;
		  /* 822348F8h */ case    9:  		/* bc 4, CR6_EQ, 108 */
		/* 822348F8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82234964;  }
		/* 822348F8h case    9:*/		return 0x822348FC;
		  /* 822348FCh */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 822348FCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822348FCh case   10:*/		return 0x82234900;
		  /* 82234900h */ case   11:  		/* bc 4, CR6_EQ, 100 */
		/* 82234900h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82234964;  }
		/* 82234900h case   11:*/		return 0x82234904;
		  /* 82234904h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 82234904h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234904h case   12:*/		return 0x82234908;
		  /* 82234908h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 82234908h case   13:*/		if ( regs.CR[6].eq ) { return 0x82234920;  }
		/* 82234908h case   13:*/		return 0x8223490C;
		  /* 8223490Ch */ case   14:  		/* li R6, 1 */
		/* 8223490Ch case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223490Ch case   14:*/		return 0x82234910;
		  /* 82234910h */ case   15:  		/* mr R5, R30 */
		/* 82234910h case   15:*/		regs.R5 = regs.R30;
		/* 82234910h case   15:*/		return 0x82234914;
		  /* 82234914h */ case   16:  		/* li R4, 1 */
		/* 82234914h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82234914h case   16:*/		return 0x82234918;
		  /* 82234918h */ case   17:  		/* mr R3, R27 */
		/* 82234918h case   17:*/		regs.R3 = regs.R27;
		/* 82234918h case   17:*/		return 0x8223491C;
		  /* 8223491Ch */ case   18:  		/* bl -879996 */
		/* 8223491Ch case   18:*/		regs.LR = 0x82234920; return 0x8215DBA0;
		/* 8223491Ch case   18:*/		return 0x82234920;
	}
	return 0x82234920;
} // Block from 822348D4h-82234920h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82234920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234920);
		  /* 82234920h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234920h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234920h case    0:*/		return 0x82234924;
		  /* 82234924h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234924h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223495C;  }
		/* 82234924h case    1:*/		return 0x82234928;
		  /* 82234928h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82234928h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234928h case    2:*/		return 0x8223492C;
		  /* 8223492Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 8223492Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8223495C;  }
		/* 8223492Ch case    3:*/		return 0x82234930;
		  /* 82234930h */ case    4:  		/* lis R11, -32216 */
		/* 82234930h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234930h case    4:*/		return 0x82234934;
		  /* 82234934h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234934h case    5:*/		regs.CTR = regs.R26;
		/* 82234934h case    5:*/		return 0x82234938;
		  /* 82234938h */ case    6:  		/* lis R10, -32252 */
		/* 82234938h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234938h case    6:*/		return 0x8223493C;
		  /* 8223493Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 8223493Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223493Ch case    7:*/		return 0x82234940;
		  /* 82234940h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82234940h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82234940h case    8:*/		return 0x82234944;
		  /* 82234944h */ case    9:  		/* li R8, 1 */
		/* 82234944h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82234944h case    9:*/		return 0x82234948;
	}
	return 0x82234948;
} // Block from 82234920h-82234948h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82234948h
// Function '?CompileGetFogEnd@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234948);
		  /* 82234948h */ case    0:  		/* mr R7, R30 */
		/* 82234948h case    0:*/		regs.R7 = regs.R30;
		/* 82234948h case    0:*/		return 0x8223494C;
		  /* 8223494Ch */ case    1:  		/* li R6, 1 */
		/* 8223494Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223494Ch case    1:*/		return 0x82234950;
		  /* 82234950h */ case    2:  		/* mr R3, R25 */
		/* 82234950h case    2:*/		regs.R3 = regs.R25;
		/* 82234950h case    2:*/		return 0x82234954;
		  /* 82234954h */ case    3:  		/* lwz R5, <#[R11 + 4]> */
		/* 82234954h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 82234954h case    3:*/		return 0x82234958;
		  /* 82234958h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82234958h case    4:*/		if ( 1 ) { regs.LR = 0x8223495C; return (uint32)regs.CTR; }
		/* 82234958h case    4:*/		return 0x8223495C;
	}
	return 0x8223495C;
} // Block from 82234948h-8223495Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223495Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223495C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223495C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223495C);
		  /* 8223495Ch */ case    0:  		/* li R3, 1 */
		/* 8223495Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223495Ch case    0:*/		return 0x82234960;
		  /* 82234960h */ case    1:  		/* b 96 */
		/* 82234960h case    1:*/		return 0x822349C0;
		/* 82234960h case    1:*/		return 0x82234964;
	}
	return 0x82234964;
} // Block from 8223495Ch-82234964h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234964);
		  /* 82234964h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82234964h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234964h case    0:*/		return 0x82234968;
		  /* 82234968h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82234968h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234980;  }
		/* 82234968h case    1:*/		return 0x8223496C;
		  /* 8223496Ch */ case    2:  		/* li R6, 0 */
		/* 8223496Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223496Ch case    2:*/		return 0x82234970;
		  /* 82234970h */ case    3:  		/* mr R5, R30 */
		/* 82234970h case    3:*/		regs.R5 = regs.R30;
		/* 82234970h case    3:*/		return 0x82234974;
		  /* 82234974h */ case    4:  		/* li R4, 1 */
		/* 82234974h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82234974h case    4:*/		return 0x82234978;
		  /* 82234978h */ case    5:  		/* mr R3, R27 */
		/* 82234978h case    5:*/		regs.R3 = regs.R27;
		/* 82234978h case    5:*/		return 0x8223497C;
		  /* 8223497Ch */ case    6:  		/* bl -880092 */
		/* 8223497Ch case    6:*/		regs.LR = 0x82234980; return 0x8215DBA0;
		/* 8223497Ch case    6:*/		return 0x82234980;
	}
	return 0x82234980;
} // Block from 82234964h-82234980h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82234980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234980);
		  /* 82234980h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234980h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234980h case    0:*/		return 0x82234984;
		  /* 82234984h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234984h case    1:*/		if ( regs.CR[6].eq ) { return 0x822349BC;  }
		/* 82234984h case    1:*/		return 0x82234988;
		  /* 82234988h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82234988h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234988h case    2:*/		return 0x8223498C;
		  /* 8223498Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 8223498Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x822349BC;  }
		/* 8223498Ch case    3:*/		return 0x82234990;
		  /* 82234990h */ case    4:  		/* lis R11, -32216 */
		/* 82234990h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234990h case    4:*/		return 0x82234994;
		  /* 82234994h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234994h case    5:*/		regs.CTR = regs.R26;
		/* 82234994h case    5:*/		return 0x82234998;
		  /* 82234998h */ case    6:  		/* lis R10, -32252 */
		/* 82234998h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234998h case    6:*/		return 0x8223499C;
		  /* 8223499Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 8223499Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 8223499Ch case    7:*/		return 0x822349A0;
		  /* 822349A0h */ case    8:  		/* addi R4, R10, 4444 */
		/* 822349A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 822349A0h case    8:*/		return 0x822349A4;
		  /* 822349A4h */ case    9:  		/* li R8, 0 */
		/* 822349A4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822349A4h case    9:*/		return 0x822349A8;
		  /* 822349A8h */ case   10:  		/* mr R7, R30 */
		/* 822349A8h case   10:*/		regs.R7 = regs.R30;
		/* 822349A8h case   10:*/		return 0x822349AC;
		  /* 822349ACh */ case   11:  		/* li R6, 1 */
		/* 822349ACh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822349ACh case   11:*/		return 0x822349B0;
		  /* 822349B0h */ case   12:  		/* mr R3, R25 */
		/* 822349B0h case   12:*/		regs.R3 = regs.R25;
		/* 822349B0h case   12:*/		return 0x822349B4;
		  /* 822349B4h */ case   13:  		/* lwz R5, <#[R11 + 4]> */
		/* 822349B4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 822349B4h case   13:*/		return 0x822349B8;
		  /* 822349B8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822349B8h case   14:*/		if ( 1 ) { regs.LR = 0x822349BC; return (uint32)regs.CTR; }
		/* 822349B8h case   14:*/		return 0x822349BC;
	}
	return 0x822349BC;
} // Block from 82234980h-822349BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 822349BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822349BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822349BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822349BC);
		  /* 822349BCh */ case    0:  		/* li R3, 0 */
		/* 822349BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822349BCh case    0:*/		return 0x822349C0;
	}
	return 0x822349C0;
} // Block from 822349BCh-822349C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822349C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822349C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822349C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822349C0);
		  /* 822349C0h */ case    0:  		/* addi R1, R1, 144 */
		/* 822349C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 822349C0h case    0:*/		return 0x822349C4;
		  /* 822349C4h */ case    1:  		/* b -1718056 */
		/* 822349C4h case    1:*/		return 0x8209129C;
		/* 822349C4h case    1:*/		return 0x822349C8;
	}
	return 0x822349C8;
} // Block from 822349C0h-822349C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822349C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822349C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822349C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822349C8);
		  /* 822349C8h */ case    0:  		/* mfspr R12, LR */
		/* 822349C8h case    0:*/		regs.R12 = regs.LR;
		/* 822349C8h case    0:*/		return 0x822349CC;
		  /* 822349CCh */ case    1:  		/* bl -1718144 */
		/* 822349CCh case    1:*/		regs.LR = 0x822349D0; return 0x8209124C;
		/* 822349CCh case    1:*/		return 0x822349D0;
		  /* 822349D0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822349D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822349D0h case    2:*/		return 0x822349D4;
		  /* 822349D4h */ case    3:  		/* lis R11, -32253 */
		/* 822349D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822349D4h case    3:*/		return 0x822349D8;
		  /* 822349D8h */ case    4:  		/* lis R10, -32252 */
		/* 822349D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822349D8h case    4:*/		return 0x822349DC;
		  /* 822349DCh */ case    5:  		/* mr R31, R3 */
		/* 822349DCh case    5:*/		regs.R31 = regs.R3;
		/* 822349DCh case    5:*/		return 0x822349E0;
		  /* 822349E0h */ case    6:  		/* mr R30, R4 */
		/* 822349E0h case    6:*/		regs.R30 = regs.R4;
		/* 822349E0h case    6:*/		return 0x822349E4;
		  /* 822349E4h */ case    7:  		/* mr R27, R5 */
		/* 822349E4h case    7:*/		regs.R27 = regs.R5;
		/* 822349E4h case    7:*/		return 0x822349E8;
	}
	return 0x822349E8;
} // Block from 822349C8h-822349E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822349E8h
// Function '?CompileGetFogDensity@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822349E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822349E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822349E8);
		  /* 822349E8h */ case    0:  		/* mr R26, R6 */
		/* 822349E8h case    0:*/		regs.R26 = regs.R6;
		/* 822349E8h case    0:*/		return 0x822349EC;
		  /* 822349ECh */ case    1:  		/* mr R25, R7 */
		/* 822349ECh case    1:*/		regs.R25 = regs.R7;
		/* 822349ECh case    1:*/		return 0x822349F0;
		  /* 822349F0h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 822349F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822349F0h case    2:*/		return 0x822349F4;
		  /* 822349F4h */ case    3:  		/* addi R29, R11, 27460 */
		/* 822349F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 822349F4h case    3:*/		return 0x822349F8;
		  /* 822349F8h */ case    4:  		/* addi R28, R10, 4336 */
		/* 822349F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x10F0);
		/* 822349F8h case    4:*/		return 0x822349FC;
		  /* 822349FCh */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 822349FCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82234A1C;  }
		/* 822349FCh case    5:*/		return 0x82234A00;
		  /* 82234A00h */ case    6:  		/* lis R11, -32253 */
		/* 82234A00h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234A00h case    6:*/		return 0x82234A04;
		  /* 82234A04h */ case    7:  		/* mr R6, R28 */
		/* 82234A04h case    7:*/		regs.R6 = regs.R28;
		/* 82234A04h case    7:*/		return 0x82234A08;
		  /* 82234A08h */ case    8:  		/* addi R5, R11, 27792 */
		/* 82234A08h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 82234A08h case    8:*/		return 0x82234A0C;
		  /* 82234A0Ch */ case    9:  		/* mr R4, R29 */
		/* 82234A0Ch case    9:*/		regs.R4 = regs.R29;
		/* 82234A0Ch case    9:*/		return 0x82234A10;
		  /* 82234A10h */ case   10:  		/* li R7, 619 */
		/* 82234A10h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x26B);
		/* 82234A10h case   10:*/		return 0x82234A14;
		  /* 82234A14h */ case   11:  		/* li R3, 0 */
		/* 82234A14h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234A14h case   11:*/		return 0x82234A18;
		  /* 82234A18h */ case   12:  		/* bl -904720 */
		/* 82234A18h case   12:*/		regs.LR = 0x82234A1C; return 0x82157C08;
		/* 82234A18h case   12:*/		return 0x82234A1C;
	}
	return 0x82234A1C;
} // Block from 822349E8h-82234A1Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82234A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234A1C);
		  /* 82234A1Ch */ case    0:  		/* cmpwi CR6, R30, 16 */
		/* 82234A1Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000010);
		/* 82234A1Ch case    0:*/		return 0x82234A20;
		  /* 82234A20h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 82234A20h case    1:*/		if ( regs.CR[6].lt ) { return 0x82234A40;  }
		/* 82234A20h case    1:*/		return 0x82234A24;
		  /* 82234A24h */ case    2:  		/* lis R11, -32252 */
		/* 82234A24h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234A24h case    2:*/		return 0x82234A28;
		  /* 82234A28h */ case    3:  		/* mr R6, R28 */
		/* 82234A28h case    3:*/		regs.R6 = regs.R28;
		/* 82234A28h case    3:*/		return 0x82234A2C;
		  /* 82234A2Ch */ case    4:  		/* addi R5, R11, 5020 */
		/* 82234A2Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x139C);
		/* 82234A2Ch case    4:*/		return 0x82234A30;
		  /* 82234A30h */ case    5:  		/* mr R4, R29 */
		/* 82234A30h case    5:*/		regs.R4 = regs.R29;
		/* 82234A30h case    5:*/		return 0x82234A34;
		  /* 82234A34h */ case    6:  		/* li R7, 620 */
		/* 82234A34h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x26C);
		/* 82234A34h case    6:*/		return 0x82234A38;
		  /* 82234A38h */ case    7:  		/* li R3, 0 */
		/* 82234A38h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234A38h case    7:*/		return 0x82234A3C;
		  /* 82234A3Ch */ case    8:  		/* bl -904756 */
		/* 82234A3Ch case    8:*/		regs.LR = 0x82234A40; return 0x82157C08;
		/* 82234A3Ch case    8:*/		return 0x82234A40;
	}
	return 0x82234A40;
} // Block from 82234A1Ch-82234A40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234A40);
		  /* 82234A40h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 82234A40h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82234A40h case    0:*/		return 0x82234A44;
		  /* 82234A44h */ case    1:  		/* bc 4, CR6_LT, 32 */
		/* 82234A44h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82234A64;  }
		/* 82234A44h case    1:*/		return 0x82234A48;
		  /* 82234A48h */ case    2:  		/* lis R11, -32252 */
		/* 82234A48h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234A48h case    2:*/		return 0x82234A4C;
		  /* 82234A4Ch */ case    3:  		/* mr R6, R28 */
		/* 82234A4Ch case    3:*/		regs.R6 = regs.R28;
		/* 82234A4Ch case    3:*/		return 0x82234A50;
		  /* 82234A50h */ case    4:  		/* addi R5, R11, 5008 */
		/* 82234A50h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1390);
		/* 82234A50h case    4:*/		return 0x82234A54;
		  /* 82234A54h */ case    5:  		/* mr R4, R29 */
		/* 82234A54h case    5:*/		regs.R4 = regs.R29;
		/* 82234A54h case    5:*/		return 0x82234A58;
		  /* 82234A58h */ case    6:  		/* li R7, 621 */
		/* 82234A58h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x26D);
		/* 82234A58h case    6:*/		return 0x82234A5C;
		  /* 82234A5Ch */ case    7:  		/* li R3, 0 */
		/* 82234A5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234A5Ch case    7:*/		return 0x82234A60;
		  /* 82234A60h */ case    8:  		/* bl -904792 */
		/* 82234A60h case    8:*/		regs.LR = 0x82234A64; return 0x82157C08;
		/* 82234A60h case    8:*/		return 0x82234A64;
	}
	return 0x82234A64;
} // Block from 82234A40h-82234A64h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234A64);
		  /* 82234A64h */ case    0:  		/* li R4, 135 */
		/* 82234A64h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x87);
		/* 82234A64h case    0:*/		return 0x82234A68;
		  /* 82234A68h */ case    1:  		/* mr R3, R31 */
		/* 82234A68h case    1:*/		regs.R3 = regs.R31;
		/* 82234A68h case    1:*/		return 0x82234A6C;
		  /* 82234A6Ch */ case    2:  		/* bl -882012 */
		/* 82234A6Ch case    2:*/		regs.LR = 0x82234A70; return 0x8215D510;
		/* 82234A6Ch case    2:*/		return 0x82234A70;
		  /* 82234A70h */ case    3:  		/* mr R29, R3 */
		/* 82234A70h case    3:*/		regs.R29 = regs.R3;
		/* 82234A70h case    3:*/		return 0x82234A74;
		  /* 82234A74h */ case    4:  		/* mr R5, R30 */
		/* 82234A74h case    4:*/		regs.R5 = regs.R30;
		/* 82234A74h case    4:*/		return 0x82234A78;
		  /* 82234A78h */ case    5:  		/* li R4, 12 */
		/* 82234A78h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82234A78h case    5:*/		return 0x82234A7C;
		  /* 82234A7Ch */ case    6:  		/* mr R3, R31 */
		/* 82234A7Ch case    6:*/		regs.R3 = regs.R31;
		/* 82234A7Ch case    6:*/		return 0x82234A80;
		  /* 82234A80h */ case    7:  		/* bl -881216 */
		/* 82234A80h case    7:*/		regs.LR = 0x82234A84; return 0x8215D840;
		/* 82234A80h case    7:*/		return 0x82234A84;
		  /* 82234A84h */ case    8:  		/* cmplwi CR6, R3, 1 */
		/* 82234A84h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82234A84h case    8:*/		return 0x82234A88;
	}
	return 0x82234A88;
} // Block from 82234A64h-82234A88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234A88h
// Function '?CompileGetLodBias@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234A88);
		  /* 82234A88h */ case    0:  		/* bc 4, CR6_EQ, 108 */
		/* 82234A88h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82234AF4;  }
		/* 82234A88h case    0:*/		return 0x82234A8C;
		  /* 82234A8Ch */ case    1:  		/* cmplwi CR6, R29, 1 */
		/* 82234A8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 82234A8Ch case    1:*/		return 0x82234A90;
		  /* 82234A90h */ case    2:  		/* bc 4, CR6_EQ, 100 */
		/* 82234A90h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82234AF4;  }
		/* 82234A90h case    2:*/		return 0x82234A94;
		  /* 82234A94h */ case    3:  		/* cmplwi CR6, R27, 0 */
		/* 82234A94h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234A94h case    3:*/		return 0x82234A98;
		  /* 82234A98h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82234A98h case    4:*/		if ( regs.CR[6].eq ) { return 0x82234AB0;  }
		/* 82234A98h case    4:*/		return 0x82234A9C;
		  /* 82234A9Ch */ case    5:  		/* li R6, 1 */
		/* 82234A9Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82234A9Ch case    5:*/		return 0x82234AA0;
		  /* 82234AA0h */ case    6:  		/* mr R5, R30 */
		/* 82234AA0h case    6:*/		regs.R5 = regs.R30;
		/* 82234AA0h case    6:*/		return 0x82234AA4;
		  /* 82234AA4h */ case    7:  		/* li R4, 2 */
		/* 82234AA4h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82234AA4h case    7:*/		return 0x82234AA8;
		  /* 82234AA8h */ case    8:  		/* mr R3, R27 */
		/* 82234AA8h case    8:*/		regs.R3 = regs.R27;
		/* 82234AA8h case    8:*/		return 0x82234AAC;
		  /* 82234AACh */ case    9:  		/* bl -880396 */
		/* 82234AACh case    9:*/		regs.LR = 0x82234AB0; return 0x8215DBA0;
		/* 82234AACh case    9:*/		return 0x82234AB0;
	}
	return 0x82234AB0;
} // Block from 82234A88h-82234AB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82234AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234AB0);
		  /* 82234AB0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234AB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234AB0h case    0:*/		return 0x82234AB4;
		  /* 82234AB4h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234AB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234AEC;  }
		/* 82234AB4h case    1:*/		return 0x82234AB8;
		  /* 82234AB8h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82234AB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234AB8h case    2:*/		return 0x82234ABC;
		  /* 82234ABCh */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82234ABCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82234AEC;  }
		/* 82234ABCh case    3:*/		return 0x82234AC0;
		  /* 82234AC0h */ case    4:  		/* lis R11, -32216 */
		/* 82234AC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234AC0h case    4:*/		return 0x82234AC4;
		  /* 82234AC4h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234AC4h case    5:*/		regs.CTR = regs.R26;
		/* 82234AC4h case    5:*/		return 0x82234AC8;
		  /* 82234AC8h */ case    6:  		/* lis R10, -32252 */
		/* 82234AC8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234AC8h case    6:*/		return 0x82234ACC;
		  /* 82234ACCh */ case    7:  		/* addi R11, R11, 11160 */
		/* 82234ACCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234ACCh case    7:*/		return 0x82234AD0;
		  /* 82234AD0h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82234AD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82234AD0h case    8:*/		return 0x82234AD4;
		  /* 82234AD4h */ case    9:  		/* li R8, 1 */
		/* 82234AD4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82234AD4h case    9:*/		return 0x82234AD8;
		  /* 82234AD8h */ case   10:  		/* mr R7, R30 */
		/* 82234AD8h case   10:*/		regs.R7 = regs.R30;
		/* 82234AD8h case   10:*/		return 0x82234ADC;
		  /* 82234ADCh */ case   11:  		/* li R6, 2 */
		/* 82234ADCh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82234ADCh case   11:*/		return 0x82234AE0;
		  /* 82234AE0h */ case   12:  		/* mr R3, R25 */
		/* 82234AE0h case   12:*/		regs.R3 = regs.R25;
		/* 82234AE0h case   12:*/		return 0x82234AE4;
		  /* 82234AE4h */ case   13:  		/* lwz R5, <#[R11 + 8]> */
		/* 82234AE4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 82234AE4h case   13:*/		return 0x82234AE8;
		  /* 82234AE8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82234AE8h case   14:*/		if ( 1 ) { regs.LR = 0x82234AEC; return (uint32)regs.CTR; }
		/* 82234AE8h case   14:*/		return 0x82234AEC;
	}
	return 0x82234AEC;
} // Block from 82234AB0h-82234AECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82234AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234AEC);
		  /* 82234AECh */ case    0:  		/* li R3, 1 */
		/* 82234AECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234AECh case    0:*/		return 0x82234AF0;
		  /* 82234AF0h */ case    1:  		/* b 96 */
		/* 82234AF0h case    1:*/		return 0x82234B50;
		/* 82234AF0h case    1:*/		return 0x82234AF4;
	}
	return 0x82234AF4;
} // Block from 82234AECh-82234AF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234AF4);
		  /* 82234AF4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82234AF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234AF4h case    0:*/		return 0x82234AF8;
		  /* 82234AF8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82234AF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234B10;  }
		/* 82234AF8h case    1:*/		return 0x82234AFC;
		  /* 82234AFCh */ case    2:  		/* li R6, 0 */
		/* 82234AFCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82234AFCh case    2:*/		return 0x82234B00;
		  /* 82234B00h */ case    3:  		/* mr R5, R30 */
		/* 82234B00h case    3:*/		regs.R5 = regs.R30;
		/* 82234B00h case    3:*/		return 0x82234B04;
		  /* 82234B04h */ case    4:  		/* li R4, 2 */
		/* 82234B04h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82234B04h case    4:*/		return 0x82234B08;
		  /* 82234B08h */ case    5:  		/* mr R3, R27 */
		/* 82234B08h case    5:*/		regs.R3 = regs.R27;
		/* 82234B08h case    5:*/		return 0x82234B0C;
		  /* 82234B0Ch */ case    6:  		/* bl -880492 */
		/* 82234B0Ch case    6:*/		regs.LR = 0x82234B10; return 0x8215DBA0;
		/* 82234B0Ch case    6:*/		return 0x82234B10;
	}
	return 0x82234B10;
} // Block from 82234AF4h-82234B10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82234B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234B10);
		  /* 82234B10h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234B10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234B10h case    0:*/		return 0x82234B14;
		  /* 82234B14h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234B14h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234B4C;  }
		/* 82234B14h case    1:*/		return 0x82234B18;
		  /* 82234B18h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82234B18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234B18h case    2:*/		return 0x82234B1C;
		  /* 82234B1Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82234B1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82234B4C;  }
		/* 82234B1Ch case    3:*/		return 0x82234B20;
		  /* 82234B20h */ case    4:  		/* lis R11, -32216 */
		/* 82234B20h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234B20h case    4:*/		return 0x82234B24;
		  /* 82234B24h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234B24h case    5:*/		regs.CTR = regs.R26;
		/* 82234B24h case    5:*/		return 0x82234B28;
	}
	return 0x82234B28;
} // Block from 82234B10h-82234B28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234B28h
// Function '?CompileGetLodClampMax@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234B28);
		  /* 82234B28h */ case    0:  		/* lis R10, -32252 */
		/* 82234B28h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234B28h case    0:*/		return 0x82234B2C;
		  /* 82234B2Ch */ case    1:  		/* addi R11, R11, 11160 */
		/* 82234B2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234B2Ch case    1:*/		return 0x82234B30;
		  /* 82234B30h */ case    2:  		/* addi R4, R10, 4444 */
		/* 82234B30h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82234B30h case    2:*/		return 0x82234B34;
		  /* 82234B34h */ case    3:  		/* li R8, 0 */
		/* 82234B34h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82234B34h case    3:*/		return 0x82234B38;
		  /* 82234B38h */ case    4:  		/* mr R7, R30 */
		/* 82234B38h case    4:*/		regs.R7 = regs.R30;
		/* 82234B38h case    4:*/		return 0x82234B3C;
		  /* 82234B3Ch */ case    5:  		/* li R6, 2 */
		/* 82234B3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82234B3Ch case    5:*/		return 0x82234B40;
		  /* 82234B40h */ case    6:  		/* mr R3, R25 */
		/* 82234B40h case    6:*/		regs.R3 = regs.R25;
		/* 82234B40h case    6:*/		return 0x82234B44;
		  /* 82234B44h */ case    7:  		/* lwz R5, <#[R11 + 8]> */
		/* 82234B44h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 82234B44h case    7:*/		return 0x82234B48;
		  /* 82234B48h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82234B48h case    8:*/		if ( 1 ) { regs.LR = 0x82234B4C; return (uint32)regs.CTR; }
		/* 82234B48h case    8:*/		return 0x82234B4C;
	}
	return 0x82234B4C;
} // Block from 82234B28h-82234B4Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234B4C);
		  /* 82234B4Ch */ case    0:  		/* li R3, 0 */
		/* 82234B4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234B4Ch case    0:*/		return 0x82234B50;
	}
	return 0x82234B50;
} // Block from 82234B4Ch-82234B50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234B50);
		  /* 82234B50h */ case    0:  		/* addi R1, R1, 144 */
		/* 82234B50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82234B50h case    0:*/		return 0x82234B54;
		  /* 82234B54h */ case    1:  		/* b -1718456 */
		/* 82234B54h case    1:*/		return 0x8209129C;
		/* 82234B54h case    1:*/		return 0x82234B58;
	}
	return 0x82234B58;
} // Block from 82234B50h-82234B58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234B58);
		  /* 82234B58h */ case    0:  		/* mfspr R12, LR */
		/* 82234B58h case    0:*/		regs.R12 = regs.LR;
		/* 82234B58h case    0:*/		return 0x82234B5C;
		  /* 82234B5Ch */ case    1:  		/* bl -1718544 */
		/* 82234B5Ch case    1:*/		regs.LR = 0x82234B60; return 0x8209124C;
		/* 82234B5Ch case    1:*/		return 0x82234B60;
		  /* 82234B60h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82234B60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82234B60h case    2:*/		return 0x82234B64;
		  /* 82234B64h */ case    3:  		/* lis R11, -32253 */
		/* 82234B64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234B64h case    3:*/		return 0x82234B68;
		  /* 82234B68h */ case    4:  		/* lis R10, -32252 */
		/* 82234B68h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234B68h case    4:*/		return 0x82234B6C;
		  /* 82234B6Ch */ case    5:  		/* mr R31, R3 */
		/* 82234B6Ch case    5:*/		regs.R31 = regs.R3;
		/* 82234B6Ch case    5:*/		return 0x82234B70;
		  /* 82234B70h */ case    6:  		/* mr R30, R4 */
		/* 82234B70h case    6:*/		regs.R30 = regs.R4;
		/* 82234B70h case    6:*/		return 0x82234B74;
		  /* 82234B74h */ case    7:  		/* mr R27, R5 */
		/* 82234B74h case    7:*/		regs.R27 = regs.R5;
		/* 82234B74h case    7:*/		return 0x82234B78;
		  /* 82234B78h */ case    8:  		/* mr R26, R6 */
		/* 82234B78h case    8:*/		regs.R26 = regs.R6;
		/* 82234B78h case    8:*/		return 0x82234B7C;
		  /* 82234B7Ch */ case    9:  		/* mr R25, R7 */
		/* 82234B7Ch case    9:*/		regs.R25 = regs.R7;
		/* 82234B7Ch case    9:*/		return 0x82234B80;
		  /* 82234B80h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 82234B80h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234B80h case   10:*/		return 0x82234B84;
		  /* 82234B84h */ case   11:  		/* addi R29, R11, 27460 */
		/* 82234B84h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 82234B84h case   11:*/		return 0x82234B88;
		  /* 82234B88h */ case   12:  		/* addi R28, R10, 4336 */
		/* 82234B88h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x10F0);
		/* 82234B88h case   12:*/		return 0x82234B8C;
		  /* 82234B8Ch */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 82234B8Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82234BAC;  }
		/* 82234B8Ch case   13:*/		return 0x82234B90;
		  /* 82234B90h */ case   14:  		/* lis R11, -32253 */
		/* 82234B90h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234B90h case   14:*/		return 0x82234B94;
		  /* 82234B94h */ case   15:  		/* mr R6, R28 */
		/* 82234B94h case   15:*/		regs.R6 = regs.R28;
		/* 82234B94h case   15:*/		return 0x82234B98;
		  /* 82234B98h */ case   16:  		/* addi R5, R11, 27792 */
		/* 82234B98h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 82234B98h case   16:*/		return 0x82234B9C;
		  /* 82234B9Ch */ case   17:  		/* mr R4, R29 */
		/* 82234B9Ch case   17:*/		regs.R4 = regs.R29;
		/* 82234B9Ch case   17:*/		return 0x82234BA0;
		  /* 82234BA0h */ case   18:  		/* li R7, 677 */
		/* 82234BA0h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x2A5);
		/* 82234BA0h case   18:*/		return 0x82234BA4;
		  /* 82234BA4h */ case   19:  		/* li R3, 0 */
		/* 82234BA4h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234BA4h case   19:*/		return 0x82234BA8;
		  /* 82234BA8h */ case   20:  		/* bl -905120 */
		/* 82234BA8h case   20:*/		regs.LR = 0x82234BAC; return 0x82157C08;
		/* 82234BA8h case   20:*/		return 0x82234BAC;
	}
	return 0x82234BAC;
} // Block from 82234B58h-82234BACh (21 instructions)

//////////////////////////////////////////////////////
// Block at 82234BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234BAC);
		  /* 82234BACh */ case    0:  		/* cmpwi CR6, R30, 16 */
		/* 82234BACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000010);
		/* 82234BACh case    0:*/		return 0x82234BB0;
		  /* 82234BB0h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 82234BB0h case    1:*/		if ( regs.CR[6].lt ) { return 0x82234BD0;  }
		/* 82234BB0h case    1:*/		return 0x82234BB4;
		  /* 82234BB4h */ case    2:  		/* lis R11, -32252 */
		/* 82234BB4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234BB4h case    2:*/		return 0x82234BB8;
		  /* 82234BB8h */ case    3:  		/* mr R6, R28 */
		/* 82234BB8h case    3:*/		regs.R6 = regs.R28;
		/* 82234BB8h case    3:*/		return 0x82234BBC;
		  /* 82234BBCh */ case    4:  		/* addi R5, R11, 5020 */
		/* 82234BBCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x139C);
		/* 82234BBCh case    4:*/		return 0x82234BC0;
		  /* 82234BC0h */ case    5:  		/* mr R4, R29 */
		/* 82234BC0h case    5:*/		regs.R4 = regs.R29;
		/* 82234BC0h case    5:*/		return 0x82234BC4;
		  /* 82234BC4h */ case    6:  		/* li R7, 678 */
		/* 82234BC4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2A6);
		/* 82234BC4h case    6:*/		return 0x82234BC8;
		  /* 82234BC8h */ case    7:  		/* li R3, 0 */
		/* 82234BC8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234BC8h case    7:*/		return 0x82234BCC;
		  /* 82234BCCh */ case    8:  		/* bl -905156 */
		/* 82234BCCh case    8:*/		regs.LR = 0x82234BD0; return 0x82157C08;
		/* 82234BCCh case    8:*/		return 0x82234BD0;
	}
	return 0x82234BD0;
} // Block from 82234BACh-82234BD0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234BD0);
		  /* 82234BD0h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 82234BD0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82234BD0h case    0:*/		return 0x82234BD4;
		  /* 82234BD4h */ case    1:  		/* bc 4, CR6_LT, 32 */
		/* 82234BD4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82234BF4;  }
		/* 82234BD4h case    1:*/		return 0x82234BD8;
	}
	return 0x82234BD8;
} // Block from 82234BD0h-82234BD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234BD8h
// Function '?CompileGetLodClampMin@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234BD8);
		  /* 82234BD8h */ case    0:  		/* lis R11, -32252 */
		/* 82234BD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234BD8h case    0:*/		return 0x82234BDC;
		  /* 82234BDCh */ case    1:  		/* mr R6, R28 */
		/* 82234BDCh case    1:*/		regs.R6 = regs.R28;
		/* 82234BDCh case    1:*/		return 0x82234BE0;
		  /* 82234BE0h */ case    2:  		/* addi R5, R11, 5008 */
		/* 82234BE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1390);
		/* 82234BE0h case    2:*/		return 0x82234BE4;
		  /* 82234BE4h */ case    3:  		/* mr R4, R29 */
		/* 82234BE4h case    3:*/		regs.R4 = regs.R29;
		/* 82234BE4h case    3:*/		return 0x82234BE8;
		  /* 82234BE8h */ case    4:  		/* li R7, 679 */
		/* 82234BE8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2A7);
		/* 82234BE8h case    4:*/		return 0x82234BEC;
		  /* 82234BECh */ case    5:  		/* li R3, 0 */
		/* 82234BECh case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234BECh case    5:*/		return 0x82234BF0;
		  /* 82234BF0h */ case    6:  		/* bl -905192 */
		/* 82234BF0h case    6:*/		regs.LR = 0x82234BF4; return 0x82157C08;
		/* 82234BF0h case    6:*/		return 0x82234BF4;
	}
	return 0x82234BF4;
} // Block from 82234BD8h-82234BF4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82234BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234BF4);
		  /* 82234BF4h */ case    0:  		/* li R4, 135 */
		/* 82234BF4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x87);
		/* 82234BF4h case    0:*/		return 0x82234BF8;
		  /* 82234BF8h */ case    1:  		/* mr R3, R31 */
		/* 82234BF8h case    1:*/		regs.R3 = regs.R31;
		/* 82234BF8h case    1:*/		return 0x82234BFC;
		  /* 82234BFCh */ case    2:  		/* bl -882412 */
		/* 82234BFCh case    2:*/		regs.LR = 0x82234C00; return 0x8215D510;
		/* 82234BFCh case    2:*/		return 0x82234C00;
		  /* 82234C00h */ case    3:  		/* mr R29, R3 */
		/* 82234C00h case    3:*/		regs.R29 = regs.R3;
		/* 82234C00h case    3:*/		return 0x82234C04;
		  /* 82234C04h */ case    4:  		/* mr R5, R30 */
		/* 82234C04h case    4:*/		regs.R5 = regs.R30;
		/* 82234C04h case    4:*/		return 0x82234C08;
		  /* 82234C08h */ case    5:  		/* li R4, 12 */
		/* 82234C08h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82234C08h case    5:*/		return 0x82234C0C;
		  /* 82234C0Ch */ case    6:  		/* mr R3, R31 */
		/* 82234C0Ch case    6:*/		regs.R3 = regs.R31;
		/* 82234C0Ch case    6:*/		return 0x82234C10;
		  /* 82234C10h */ case    7:  		/* bl -881616 */
		/* 82234C10h case    7:*/		regs.LR = 0x82234C14; return 0x8215D840;
		/* 82234C10h case    7:*/		return 0x82234C14;
		  /* 82234C14h */ case    8:  		/* cmplwi CR6, R3, 1 */
		/* 82234C14h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82234C14h case    8:*/		return 0x82234C18;
		  /* 82234C18h */ case    9:  		/* bc 4, CR6_EQ, 108 */
		/* 82234C18h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82234C84;  }
		/* 82234C18h case    9:*/		return 0x82234C1C;
		  /* 82234C1Ch */ case   10:  		/* cmplwi CR6, R29, 2 */
		/* 82234C1Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 82234C1Ch case   10:*/		return 0x82234C20;
		  /* 82234C20h */ case   11:  		/* bc 4, CR6_EQ, 100 */
		/* 82234C20h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82234C84;  }
		/* 82234C20h case   11:*/		return 0x82234C24;
		  /* 82234C24h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 82234C24h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234C24h case   12:*/		return 0x82234C28;
		  /* 82234C28h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 82234C28h case   13:*/		if ( regs.CR[6].eq ) { return 0x82234C40;  }
		/* 82234C28h case   13:*/		return 0x82234C2C;
		  /* 82234C2Ch */ case   14:  		/* li R6, 1 */
		/* 82234C2Ch case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82234C2Ch case   14:*/		return 0x82234C30;
		  /* 82234C30h */ case   15:  		/* mr R5, R30 */
		/* 82234C30h case   15:*/		regs.R5 = regs.R30;
		/* 82234C30h case   15:*/		return 0x82234C34;
		  /* 82234C34h */ case   16:  		/* li R4, 3 */
		/* 82234C34h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82234C34h case   16:*/		return 0x82234C38;
		  /* 82234C38h */ case   17:  		/* mr R3, R27 */
		/* 82234C38h case   17:*/		regs.R3 = regs.R27;
		/* 82234C38h case   17:*/		return 0x82234C3C;
		  /* 82234C3Ch */ case   18:  		/* bl -880796 */
		/* 82234C3Ch case   18:*/		regs.LR = 0x82234C40; return 0x8215DBA0;
		/* 82234C3Ch case   18:*/		return 0x82234C40;
	}
	return 0x82234C40;
} // Block from 82234BF4h-82234C40h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82234C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234C40);
		  /* 82234C40h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234C40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234C40h case    0:*/		return 0x82234C44;
		  /* 82234C44h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234C44h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234C7C;  }
		/* 82234C44h case    1:*/		return 0x82234C48;
		  /* 82234C48h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82234C48h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234C48h case    2:*/		return 0x82234C4C;
		  /* 82234C4Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82234C4Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82234C7C;  }
		/* 82234C4Ch case    3:*/		return 0x82234C50;
		  /* 82234C50h */ case    4:  		/* lis R11, -32216 */
		/* 82234C50h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234C50h case    4:*/		return 0x82234C54;
		  /* 82234C54h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234C54h case    5:*/		regs.CTR = regs.R26;
		/* 82234C54h case    5:*/		return 0x82234C58;
		  /* 82234C58h */ case    6:  		/* lis R10, -32252 */
		/* 82234C58h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234C58h case    6:*/		return 0x82234C5C;
		  /* 82234C5Ch */ case    7:  		/* addi R11, R11, 11160 */
		/* 82234C5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234C5Ch case    7:*/		return 0x82234C60;
		  /* 82234C60h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82234C60h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82234C60h case    8:*/		return 0x82234C64;
		  /* 82234C64h */ case    9:  		/* li R8, 1 */
		/* 82234C64h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82234C64h case    9:*/		return 0x82234C68;
		  /* 82234C68h */ case   10:  		/* mr R7, R30 */
		/* 82234C68h case   10:*/		regs.R7 = regs.R30;
		/* 82234C68h case   10:*/		return 0x82234C6C;
		  /* 82234C6Ch */ case   11:  		/* li R6, 3 */
		/* 82234C6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82234C6Ch case   11:*/		return 0x82234C70;
		  /* 82234C70h */ case   12:  		/* mr R3, R25 */
		/* 82234C70h case   12:*/		regs.R3 = regs.R25;
		/* 82234C70h case   12:*/		return 0x82234C74;
		  /* 82234C74h */ case   13:  		/* lwz R5, <#[R11 + 12]> */
		/* 82234C74h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 82234C74h case   13:*/		return 0x82234C78;
		  /* 82234C78h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82234C78h case   14:*/		if ( 1 ) { regs.LR = 0x82234C7C; return (uint32)regs.CTR; }
		/* 82234C78h case   14:*/		return 0x82234C7C;
	}
	return 0x82234C7C;
} // Block from 82234C40h-82234C7Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82234C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234C7C);
		  /* 82234C7Ch */ case    0:  		/* li R3, 1 */
		/* 82234C7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82234C7Ch case    0:*/		return 0x82234C80;
		  /* 82234C80h */ case    1:  		/* b 96 */
		/* 82234C80h case    1:*/		return 0x82234CE0;
		/* 82234C80h case    1:*/		return 0x82234C84;
	}
	return 0x82234C84;
} // Block from 82234C7Ch-82234C84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234C84);
		  /* 82234C84h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82234C84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234C84h case    0:*/		return 0x82234C88;
	}
	return 0x82234C88;
} // Block from 82234C84h-82234C88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234C88h
// Function '?CompileGetMemExportConstant0@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234C88);
		  /* 82234C88h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 82234C88h case    0:*/		if ( regs.CR[6].eq ) { return 0x82234CA0;  }
		/* 82234C88h case    0:*/		return 0x82234C8C;
		  /* 82234C8Ch */ case    1:  		/* li R6, 0 */
		/* 82234C8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82234C8Ch case    1:*/		return 0x82234C90;
		  /* 82234C90h */ case    2:  		/* mr R5, R30 */
		/* 82234C90h case    2:*/		regs.R5 = regs.R30;
		/* 82234C90h case    2:*/		return 0x82234C94;
		  /* 82234C94h */ case    3:  		/* li R4, 3 */
		/* 82234C94h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82234C94h case    3:*/		return 0x82234C98;
		  /* 82234C98h */ case    4:  		/* mr R3, R27 */
		/* 82234C98h case    4:*/		regs.R3 = regs.R27;
		/* 82234C98h case    4:*/		return 0x82234C9C;
		  /* 82234C9Ch */ case    5:  		/* bl -880892 */
		/* 82234C9Ch case    5:*/		regs.LR = 0x82234CA0; return 0x8215DBA0;
		/* 82234C9Ch case    5:*/		return 0x82234CA0;
	}
	return 0x82234CA0;
} // Block from 82234C88h-82234CA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234CA0);
		  /* 82234CA0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82234CA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82234CA0h case    0:*/		return 0x82234CA4;
		  /* 82234CA4h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82234CA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82234CDC;  }
		/* 82234CA4h case    1:*/		return 0x82234CA8;
		  /* 82234CA8h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82234CA8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82234CA8h case    2:*/		return 0x82234CAC;
		  /* 82234CACh */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82234CACh case    3:*/		if ( regs.CR[6].eq ) { return 0x82234CDC;  }
		/* 82234CACh case    3:*/		return 0x82234CB0;
		  /* 82234CB0h */ case    4:  		/* lis R11, -32216 */
		/* 82234CB0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82234CB0h case    4:*/		return 0x82234CB4;
		  /* 82234CB4h */ case    5:  		/* mtspr CTR, R26 */
		/* 82234CB4h case    5:*/		regs.CTR = regs.R26;
		/* 82234CB4h case    5:*/		return 0x82234CB8;
		  /* 82234CB8h */ case    6:  		/* lis R10, -32252 */
		/* 82234CB8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234CB8h case    6:*/		return 0x82234CBC;
		  /* 82234CBCh */ case    7:  		/* addi R11, R11, 11160 */
		/* 82234CBCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2B98);
		/* 82234CBCh case    7:*/		return 0x82234CC0;
		  /* 82234CC0h */ case    8:  		/* addi R4, R10, 4444 */
		/* 82234CC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x115C);
		/* 82234CC0h case    8:*/		return 0x82234CC4;
		  /* 82234CC4h */ case    9:  		/* li R8, 0 */
		/* 82234CC4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82234CC4h case    9:*/		return 0x82234CC8;
		  /* 82234CC8h */ case   10:  		/* mr R7, R30 */
		/* 82234CC8h case   10:*/		regs.R7 = regs.R30;
		/* 82234CC8h case   10:*/		return 0x82234CCC;
		  /* 82234CCCh */ case   11:  		/* li R6, 3 */
		/* 82234CCCh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82234CCCh case   11:*/		return 0x82234CD0;
		  /* 82234CD0h */ case   12:  		/* mr R3, R25 */
		/* 82234CD0h case   12:*/		regs.R3 = regs.R25;
		/* 82234CD0h case   12:*/		return 0x82234CD4;
		  /* 82234CD4h */ case   13:  		/* lwz R5, <#[R11 + 12]> */
		/* 82234CD4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 82234CD4h case   13:*/		return 0x82234CD8;
		  /* 82234CD8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82234CD8h case   14:*/		if ( 1 ) { regs.LR = 0x82234CDC; return (uint32)regs.CTR; }
		/* 82234CD8h case   14:*/		return 0x82234CDC;
	}
	return 0x82234CDC;
} // Block from 82234CA0h-82234CDCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82234CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234CDC);
		  /* 82234CDCh */ case    0:  		/* li R3, 0 */
		/* 82234CDCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234CDCh case    0:*/		return 0x82234CE0;
	}
	return 0x82234CE0;
} // Block from 82234CDCh-82234CE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234CE0);
		  /* 82234CE0h */ case    0:  		/* addi R1, R1, 144 */
		/* 82234CE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82234CE0h case    0:*/		return 0x82234CE4;
		  /* 82234CE4h */ case    1:  		/* b -1718856 */
		/* 82234CE4h case    1:*/		return 0x8209129C;
		/* 82234CE4h case    1:*/		return 0x82234CE8;
	}
	return 0x82234CE8;
} // Block from 82234CE0h-82234CE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234CE8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234CE8);
		  /* 82234CE8h */ case    0:  		/* mfspr R12, LR */
		/* 82234CE8h case    0:*/		regs.R12 = regs.LR;
		/* 82234CE8h case    0:*/		return 0x82234CEC;
		  /* 82234CECh */ case    1:  		/* bl -1718940 */
		/* 82234CECh case    1:*/		regs.LR = 0x82234CF0; return 0x82091250;
		/* 82234CECh case    1:*/		return 0x82234CF0;
		  /* 82234CF0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82234CF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82234CF0h case    2:*/		return 0x82234CF4;
		  /* 82234CF4h */ case    3:  		/* mr R31, R3 */
		/* 82234CF4h case    3:*/		regs.R31 = regs.R3;
		/* 82234CF4h case    3:*/		return 0x82234CF8;
		  /* 82234CF8h */ case    4:  		/* mr R30, R4 */
		/* 82234CF8h case    4:*/		regs.R30 = regs.R4;
		/* 82234CF8h case    4:*/		return 0x82234CFC;
		  /* 82234CFCh */ case    5:  		/* mr R28, R5 */
		/* 82234CFCh case    5:*/		regs.R28 = regs.R5;
		/* 82234CFCh case    5:*/		return 0x82234D00;
		  /* 82234D00h */ case    6:  		/* mr R26, R6 */
		/* 82234D00h case    6:*/		regs.R26 = regs.R6;
		/* 82234D00h case    6:*/		return 0x82234D04;
		  /* 82234D04h */ case    7:  		/* li R27, 0 */
		/* 82234D04h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82234D04h case    7:*/		return 0x82234D08;
		  /* 82234D08h */ case    8:  		/* li R29, 0 */
		/* 82234D08h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82234D08h case    8:*/		return 0x82234D0C;
		  /* 82234D0Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 82234D0Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234D0Ch case    9:*/		return 0x82234D10;
		  /* 82234D10h */ case   10:  		/* bc 4, CR6_EQ, 36 */
		/* 82234D10h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82234D34;  }
		/* 82234D10h case   10:*/		return 0x82234D14;
		  /* 82234D14h */ case   11:  		/* lis R11, -32252 */
		/* 82234D14h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234D14h case   11:*/		return 0x82234D18;
		  /* 82234D18h */ case   12:  		/* lis R10, -32252 */
		/* 82234D18h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234D18h case   12:*/		return 0x82234D1C;
		  /* 82234D1Ch */ case   13:  		/* lis R9, -32253 */
		/* 82234D1Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82234D1Ch case   13:*/		return 0x82234D20;
		  /* 82234D20h */ case   14:  		/* addi R6, R11, 5040 */
		/* 82234D20h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x13B0);
		/* 82234D20h case   14:*/		return 0x82234D24;
		  /* 82234D24h */ case   15:  		/* addi R5, R10, 5032 */
		/* 82234D24h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x13A8);
		/* 82234D24h case   15:*/		return 0x82234D28;
		  /* 82234D28h */ case   16:  		/* addi R4, R9, 27460 */
		/* 82234D28h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82234D28h case   16:*/		return 0x82234D2C;
		  /* 82234D2Ch */ case   17:  		/* li R7, 683 */
		/* 82234D2Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x2AB);
		/* 82234D2Ch case   17:*/		return 0x82234D30;
		  /* 82234D30h */ case   18:  		/* bl -905512 */
		/* 82234D30h case   18:*/		regs.LR = 0x82234D34; return 0x82157C08;
		/* 82234D30h case   18:*/		return 0x82234D34;
	}
	return 0x82234D34;
} // Block from 82234CE8h-82234D34h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82234D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D34);
		  /* 82234D34h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82234D34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82234D34h case    0:*/		return 0x82234D38;
		  /* 82234D38h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82234D38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82234D38h case    1:*/		return 0x82234D3C;
		  /* 82234D3Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82234D3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82234D48;  }
		/* 82234D3Ch case    2:*/		return 0x82234D40;
	}
	return 0x82234D40;
} // Block from 82234D34h-82234D40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82234D40h
// Function '?CompileGetMemExportConstant1@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D40);
		  /* 82234D40h */ case    0:  		/* li R3, 0 */
		/* 82234D40h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234D40h case    0:*/		return 0x82234D44;
		  /* 82234D44h */ case    1:  		/* b 64 */
		/* 82234D44h case    1:*/		return 0x82234D84;
		/* 82234D44h case    1:*/		return 0x82234D48;
	}
	return 0x82234D48;
} // Block from 82234D40h-82234D48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D48);
		  /* 82234D48h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82234D48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82234D48h case    0:*/		return 0x82234D4C;
		  /* 82234D4Ch */ case    1:  		/* bc 12, CR6_EQ, -12 */
		/* 82234D4Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82234D40;  }
		/* 82234D4Ch case    1:*/		return 0x82234D50;
		  /* 82234D50h */ case    2:  		/* mr R8, R30 */
		/* 82234D50h case    2:*/		regs.R8 = regs.R30;
		/* 82234D50h case    2:*/		return 0x82234D54;
		  /* 82234D54h */ case    3:  		/* lwz R10, <#[R8]> */
		/* 82234D54h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82234D54h case    3:*/		return 0x82234D58;
		  /* 82234D58h */ case    4:  		/* lwz R9, <#[R11]> */
		/* 82234D58h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82234D58h case    4:*/		return 0x82234D5C;
		  /* 82234D5Ch */ case    5:  		/* cmplw CR6, R10, R9 */
		/* 82234D5Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82234D5Ch case    5:*/		return 0x82234D60;
		  /* 82234D60h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 82234D60h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82234D8C;  }
		/* 82234D60h case    6:*/		return 0x82234D64;
		  /* 82234D64h */ case    7:  		/* addi R29, R29, 1 */
		/* 82234D64h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82234D64h case    7:*/		return 0x82234D68;
		  /* 82234D68h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 82234D68h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82234D68h case    8:*/		return 0x82234D6C;
		  /* 82234D6Ch */ case    9:  		/* addi R8, R8, 4 */
		/* 82234D6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82234D6Ch case    9:*/		return 0x82234D70;
		  /* 82234D70h */ case   10:  		/* cmplw CR6, R29, R28 */
		/* 82234D70h case   10:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82234D70h case   10:*/		return 0x82234D74;
		  /* 82234D74h */ case   11:  		/* bc 4, CR6_EQ, 40 */
		/* 82234D74h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82234D9C;  }
		/* 82234D74h case   11:*/		return 0x82234D78;
		  /* 82234D78h */ case   12:  		/* li R27, 1 */
		/* 82234D78h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82234D78h case   12:*/		return 0x82234D7C;
		  /* 82234D7Ch */ case   13:  		/* stw R11, <#[R26]> */
		/* 82234D7Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82234D7Ch case   13:*/		return 0x82234D80;
		  /* 82234D80h */ case   14:  		/* mr R3, R27 */
		/* 82234D80h case   14:*/		regs.R3 = regs.R27;
		/* 82234D80h case   14:*/		return 0x82234D84;
	}
	return 0x82234D84;
} // Block from 82234D48h-82234D84h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82234D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D84);
		  /* 82234D84h */ case    0:  		/* addi R1, R1, 144 */
		/* 82234D84h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82234D84h case    0:*/		return 0x82234D88;
		  /* 82234D88h */ case    1:  		/* b -1719016 */
		/* 82234D88h case    1:*/		return 0x820912A0;
		/* 82234D88h case    1:*/		return 0x82234D8C;
	}
	return 0x82234D8C;
} // Block from 82234D84h-82234D8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D8C);
		  /* 82234D8Ch */ case    0:  		/* bc 4, CR6_LT, 12 */
		/* 82234D8Ch case    0:*/		if ( !regs.CR[6].lt ) { return 0x82234D98;  }
		/* 82234D8Ch case    0:*/		return 0x82234D90;
		  /* 82234D90h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82234D90h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82234D90h case    1:*/		return 0x82234D94;
		  /* 82234D94h */ case    2:  		/* b 8 */
		/* 82234D94h case    2:*/		return 0x82234D9C;
		/* 82234D94h case    2:*/		return 0x82234D98;
	}
	return 0x82234D98;
} // Block from 82234D8Ch-82234D98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82234D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D98);
		  /* 82234D98h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 82234D98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82234D98h case    0:*/		return 0x82234D9C;
	}
	return 0x82234D9C;
} // Block from 82234D98h-82234D9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234D9C);
		  /* 82234D9Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82234D9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82234D9Ch case    0:*/		return 0x82234DA0;
		  /* 82234DA0h */ case    1:  		/* bc 4, CR6_EQ, -76 */
		/* 82234DA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82234D54;  }
		/* 82234DA0h case    1:*/		return 0x82234DA4;
		  /* 82234DA4h */ case    2:  		/* b -36 */
		/* 82234DA4h case    2:*/		return 0x82234D80;
		/* 82234DA4h case    2:*/		return 0x82234DA8;
	}
	return 0x82234DA8;
} // Block from 82234D9Ch-82234DA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82234DA8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234DA8);
		  /* 82234DA8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82234DA8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82234DA8h case    0:*/		return 0x82234DAC;
		  /* 82234DACh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82234DACh case    1:*/		if ( regs.CR[6].eq ) { return 0x82234DB8;  }
		/* 82234DACh case    1:*/		return 0x82234DB0;
		  /* 82234DB0h */ case    2:  		/* lwz R3, <#[R3]> */
		/* 82234DB0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 82234DB0h case    2:*/		return 0x82234DB4;
		  /* 82234DB4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82234DB4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82234DB4h case    3:*/		return 0x82234DB8;
	}
	return 0x82234DB8;
} // Block from 82234DA8h-82234DB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82234DB8h
// Function '?CompileGetMemExportConstant2@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234DB8);
		  /* 82234DB8h */ case    0:  		/* li R3, 0 */
		/* 82234DB8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234DB8h case    0:*/		return 0x82234DBC;
		  /* 82234DBCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 82234DBCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82234DBCh case    1:*/		return 0x82234DC0;
	}
	return 0x82234DC0;
} // Block from 82234DB8h-82234DC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234DC0);
		  /* 82234DC0h */ case    0:  		/* mfspr R12, LR */
		/* 82234DC0h case    0:*/		regs.R12 = regs.LR;
		/* 82234DC0h case    0:*/		return 0x82234DC4;
		  /* 82234DC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82234DC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82234DC4h case    1:*/		return 0x82234DC8;
		  /* 82234DC8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82234DC8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82234DC8h case    2:*/		return 0x82234DCC;
		  /* 82234DCCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82234DCCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82234DCCh case    3:*/		return 0x82234DD0;
		  /* 82234DD0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82234DD0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82234DD0h case    4:*/		return 0x82234DD4;
		  /* 82234DD4h */ case    5:  		/* lwz R3, <#[R3 + 16]> */
		/* 82234DD4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 82234DD4h case    5:*/		return 0x82234DD8;
		  /* 82234DD8h */ case    6:  		/* mr R31, R4 */
		/* 82234DD8h case    6:*/		regs.R31 = regs.R4;
		/* 82234DD8h case    6:*/		return 0x82234DDC;
		  /* 82234DDCh */ case    7:  		/* mr R30, R5 */
		/* 82234DDCh case    7:*/		regs.R30 = regs.R5;
		/* 82234DDCh case    7:*/		return 0x82234DE0;
		  /* 82234DE0h */ case    8:  		/* bl -169200 */
		/* 82234DE0h case    8:*/		regs.LR = 0x82234DE4; return 0x8220B8F0;
		/* 82234DE0h case    8:*/		return 0x82234DE4;
		  /* 82234DE4h */ case    9:  		/* li R11, 0 */
		/* 82234DE4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82234DE4h case    9:*/		return 0x82234DE8;
		  /* 82234DE8h */ case   10:  		/* stw R31, <#[R3]> */
		/* 82234DE8h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82234DE8h case   10:*/		return 0x82234DEC;
		  /* 82234DECh */ case   11:  		/* stw R30, <#[R3 + 16]> */
		/* 82234DECh case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000010) );
		/* 82234DECh case   11:*/		return 0x82234DF0;
		  /* 82234DF0h */ case   12:  		/* stw R11, <#[R3 + 12]> */
		/* 82234DF0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82234DF0h case   12:*/		return 0x82234DF4;
		  /* 82234DF4h */ case   13:  		/* stw R11, <#[R3 + 8]> */
		/* 82234DF4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82234DF4h case   13:*/		return 0x82234DF8;
		  /* 82234DF8h */ case   14:  		/* stw R11, <#[R3 + 4]> */
		/* 82234DF8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82234DF8h case   14:*/		return 0x82234DFC;
		  /* 82234DFCh */ case   15:  		/* addi R1, R1, 112 */
		/* 82234DFCh case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82234DFCh case   15:*/		return 0x82234E00;
		  /* 82234E00h */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 82234E00h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82234E00h case   16:*/		return 0x82234E04;
		  /* 82234E04h */ case   17:  		/* mtspr LR, R12 */
		/* 82234E04h case   17:*/		regs.LR = regs.R12;
		/* 82234E04h case   17:*/		return 0x82234E08;
		  /* 82234E08h */ case   18:  		/* ld R30, <#[R1 - 24]> */
		/* 82234E08h case   18:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82234E08h case   18:*/		return 0x82234E0C;
		  /* 82234E0Ch */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 82234E0Ch case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82234E0Ch case   19:*/		return 0x82234E10;
		  /* 82234E10h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82234E10h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82234E10h case   20:*/		return 0x82234E14;
	}
	return 0x82234E14;
} // Block from 82234DC0h-82234E14h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82234E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234E14);
		  /* 82234E14h */ case    0:  		/* nop */
		/* 82234E14h case    0:*/		cpu::op::nop();
		/* 82234E14h case    0:*/		return 0x82234E18;
	}
	return 0x82234E18;
} // Block from 82234E14h-82234E18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82234E18h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234E18);
		  /* 82234E18h */ case    0:  		/* mfspr R12, LR */
		/* 82234E18h case    0:*/		regs.R12 = regs.LR;
		/* 82234E18h case    0:*/		return 0x82234E1C;
		  /* 82234E1Ch */ case    1:  		/* bl -1719248 */
		/* 82234E1Ch case    1:*/		regs.LR = 0x82234E20; return 0x8209124C;
		/* 82234E1Ch case    1:*/		return 0x82234E20;
		  /* 82234E20h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82234E20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82234E20h case    2:*/		return 0x82234E24;
		  /* 82234E24h */ case    3:  		/* lis R11, -32253 */
		/* 82234E24h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82234E24h case    3:*/		return 0x82234E28;
		  /* 82234E28h */ case    4:  		/* lis R10, -32252 */
		/* 82234E28h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82234E28h case    4:*/		return 0x82234E2C;
		  /* 82234E2Ch */ case    5:  		/* mr R29, R3 */
		/* 82234E2Ch case    5:*/		regs.R29 = regs.R3;
		/* 82234E2Ch case    5:*/		return 0x82234E30;
		  /* 82234E30h */ case    6:  		/* mr R30, R4 */
		/* 82234E30h case    6:*/		regs.R30 = regs.R4;
		/* 82234E30h case    6:*/		return 0x82234E34;
		  /* 82234E34h */ case    7:  		/* mr R28, R5 */
		/* 82234E34h case    7:*/		regs.R28 = regs.R5;
		/* 82234E34h case    7:*/		return 0x82234E38;
		  /* 82234E38h */ case    8:  		/* mr R25, R6 */
		/* 82234E38h case    8:*/		regs.R25 = regs.R6;
		/* 82234E38h case    8:*/		return 0x82234E3C;
		  /* 82234E3Ch */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 82234E3Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82234E3Ch case    9:*/		return 0x82234E40;
		  /* 82234E40h */ case   10:  		/* addi R27, R11, 27460 */
		/* 82234E40h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 82234E40h case   10:*/		return 0x82234E44;
		  /* 82234E44h */ case   11:  		/* addi R26, R10, 5040 */
		/* 82234E44h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x13B0);
		/* 82234E44h case   11:*/		return 0x82234E48;
		  /* 82234E48h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 82234E48h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82234E68;  }
		/* 82234E48h case   12:*/		return 0x82234E4C;
		  /* 82234E4Ch */ case   13:  		/* lis R11, -32252 */
		/* 82234E4Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234E4Ch case   13:*/		return 0x82234E50;
		  /* 82234E50h */ case   14:  		/* mr R6, R26 */
		/* 82234E50h case   14:*/		regs.R6 = regs.R26;
		/* 82234E50h case   14:*/		return 0x82234E54;
		  /* 82234E54h */ case   15:  		/* addi R5, R11, -21620 */
		/* 82234E54h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 82234E54h case   15:*/		return 0x82234E58;
		  /* 82234E58h */ case   16:  		/* mr R4, R27 */
		/* 82234E58h case   16:*/		regs.R4 = regs.R27;
		/* 82234E58h case   16:*/		return 0x82234E5C;
		  /* 82234E5Ch */ case   17:  		/* li R7, 66 */
		/* 82234E5Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x42);
		/* 82234E5Ch case   17:*/		return 0x82234E60;
		  /* 82234E60h */ case   18:  		/* li R3, 0 */
		/* 82234E60h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234E60h case   18:*/		return 0x82234E64;
		  /* 82234E64h */ case   19:  		/* bl -905820 */
		/* 82234E64h case   19:*/		regs.LR = 0x82234E68; return 0x82157C08;
		/* 82234E64h case   19:*/		return 0x82234E68;
	}
	return 0x82234E68;
} // Block from 82234E18h-82234E68h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82234E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234E68);
		  /* 82234E68h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82234E68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82234E68h case    0:*/		return 0x82234E6C;
		  /* 82234E6Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82234E6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82234E8C;  }
		/* 82234E6Ch case    1:*/		return 0x82234E70;
		  /* 82234E70h */ case    2:  		/* lis R11, -32252 */
		/* 82234E70h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234E70h case    2:*/		return 0x82234E74;
		  /* 82234E74h */ case    3:  		/* mr R6, R26 */
		/* 82234E74h case    3:*/		regs.R6 = regs.R26;
		/* 82234E74h case    3:*/		return 0x82234E78;
		  /* 82234E78h */ case    4:  		/* addi R5, R11, -21632 */
		/* 82234E78h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 82234E78h case    4:*/		return 0x82234E7C;
		  /* 82234E7Ch */ case    5:  		/* mr R4, R27 */
		/* 82234E7Ch case    5:*/		regs.R4 = regs.R27;
		/* 82234E7Ch case    5:*/		return 0x82234E80;
		  /* 82234E80h */ case    6:  		/* li R7, 67 */
		/* 82234E80h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x43);
		/* 82234E80h case    6:*/		return 0x82234E84;
		  /* 82234E84h */ case    7:  		/* li R3, 0 */
		/* 82234E84h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234E84h case    7:*/		return 0x82234E88;
		  /* 82234E88h */ case    8:  		/* bl -905856 */
		/* 82234E88h case    8:*/		regs.LR = 0x82234E8C; return 0x82157C08;
		/* 82234E88h case    8:*/		return 0x82234E8C;
	}
	return 0x82234E8C;
} // Block from 82234E68h-82234E8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82234E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234E8C);
		  /* 82234E8Ch */ case    0:  		/* li R4, 28 */
		/* 82234E8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 82234E8Ch case    0:*/		return 0x82234E90;
		  /* 82234E90h */ case    1:  		/* mtspr CTR, R30 */
		/* 82234E90h case    1:*/		regs.CTR = regs.R30;
		/* 82234E90h case    1:*/		return 0x82234E94;
		  /* 82234E94h */ case    2:  		/* mr R3, R29 */
		/* 82234E94h case    2:*/		regs.R3 = regs.R29;
		/* 82234E94h case    2:*/		return 0x82234E98;
		  /* 82234E98h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82234E98h case    3:*/		if ( 1 ) { regs.LR = 0x82234E9C; return (uint32)regs.CTR; }
		/* 82234E98h case    3:*/		return 0x82234E9C;
		  /* 82234E9Ch */ case    4:  		/* or. R31, R3, R3 */
		/* 82234E9Ch case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82234E9Ch case    4:*/		return 0x82234EA0;
		  /* 82234EA0h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 82234EA0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82234EC0;  }
		/* 82234EA0h case    5:*/		return 0x82234EA4;
		  /* 82234EA4h */ case    6:  		/* lis R11, -32252 */
		/* 82234EA4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234EA4h case    6:*/		return 0x82234EA8;
		  /* 82234EA8h */ case    7:  		/* mr R6, R26 */
		/* 82234EA8h case    7:*/		regs.R6 = regs.R26;
		/* 82234EA8h case    7:*/		return 0x82234EAC;
		  /* 82234EACh */ case    8:  		/* addi R5, R11, 5156 */
		/* 82234EACh case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1424);
		/* 82234EACh case    8:*/		return 0x82234EB0;
		  /* 82234EB0h */ case    9:  		/* mr R4, R27 */
		/* 82234EB0h case    9:*/		regs.R4 = regs.R27;
		/* 82234EB0h case    9:*/		return 0x82234EB4;
		  /* 82234EB4h */ case   10:  		/* li R7, 70 */
		/* 82234EB4h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x46);
		/* 82234EB4h case   10:*/		return 0x82234EB8;
		  /* 82234EB8h */ case   11:  		/* li R3, 0 */
		/* 82234EB8h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82234EB8h case   11:*/		return 0x82234EBC;
		  /* 82234EBCh */ case   12:  		/* bl -905908 */
		/* 82234EBCh case   12:*/		regs.LR = 0x82234EC0; return 0x82157C08;
		/* 82234EBCh case   12:*/		return 0x82234EC0;
	}
	return 0x82234EC0;
} // Block from 82234E8Ch-82234EC0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82234EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234EC0);
		  /* 82234EC0h */ case    0:  		/* li R11, 0 */
		/* 82234EC0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82234EC0h case    0:*/		return 0x82234EC4;
		  /* 82234EC4h */ case    1:  		/* stw R29, <#[R31 + 4]> */
		/* 82234EC4h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 82234EC4h case    1:*/		return 0x82234EC8;
		  /* 82234EC8h */ case    2:  		/* stw R30, <#[R31 + 8]> */
		/* 82234EC8h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82234EC8h case    2:*/		return 0x82234ECC;
		  /* 82234ECCh */ case    3:  		/* mr R7, R29 */
		/* 82234ECCh case    3:*/		regs.R7 = regs.R29;
		/* 82234ECCh case    3:*/		return 0x82234ED0;
		  /* 82234ED0h */ case    4:  		/* stw R11, <#[R31]> */
		/* 82234ED0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82234ED0h case    4:*/		return 0x82234ED4;
		  /* 82234ED4h */ case    5:  		/* mr R6, R28 */
		/* 82234ED4h case    5:*/		regs.R6 = regs.R28;
		/* 82234ED4h case    5:*/		return 0x82234ED8;
		  /* 82234ED8h */ case    6:  		/* stw R11, <#[R31 + 20]> */
		/* 82234ED8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82234ED8h case    6:*/		return 0x82234EDC;
		  /* 82234EDCh */ case    7:  		/* mr R5, R30 */
		/* 82234EDCh case    7:*/		regs.R5 = regs.R30;
		/* 82234EDCh case    7:*/		return 0x82234EE0;
		  /* 82234EE0h */ case    8:  		/* stw R11, <#[R31 + 24]> */
		/* 82234EE0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82234EE0h case    8:*/		return 0x82234EE4;
		  /* 82234EE4h */ case    9:  		/* li R4, 20 */
		/* 82234EE4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82234EE4h case    9:*/		return 0x82234EE8;
		  /* 82234EE8h */ case   10:  		/* stw R28, <#[R31 + 12]> */
		/* 82234EE8h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 82234EE8h case   10:*/		return 0x82234EEC;
		  /* 82234EECh */ case   11:  		/* mr R3, R25 */
		/* 82234EECh case   11:*/		regs.R3 = regs.R25;
		/* 82234EECh case   11:*/		return 0x82234EF0;
		  /* 82234EF0h */ case   12:  		/* bl -169760 */
		/* 82234EF0h case   12:*/		regs.LR = 0x82234EF4; return 0x8220B7D0;
		/* 82234EF0h case   12:*/		return 0x82234EF4;
		  /* 82234EF4h */ case   13:  		/* stw R3, <#[R31 + 16]> */
		/* 82234EF4h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82234EF4h case   13:*/		return 0x82234EF8;
		  /* 82234EF8h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 82234EF8h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82234EF8h case   14:*/		return 0x82234EFC;
		  /* 82234EFCh */ case   15:  		/* bc 4, CR0_EQ, 28 */
		/* 82234EFCh case   15:*/		if ( !regs.CR[0].eq ) { return 0x82234F18;  }
		/* 82234EFCh case   15:*/		return 0x82234F00;
	}
	return 0x82234F00;
} // Block from 82234EC0h-82234F00h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82234F00h
// Function '?CompileGetMemExportConstant3@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAMP6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234F00);
		  /* 82234F00h */ case    0:  		/* lis R11, -32252 */
		/* 82234F00h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82234F00h case    0:*/		return 0x82234F04;
		  /* 82234F04h */ case    1:  		/* mr R6, R26 */
		/* 82234F04h case    1:*/		regs.R6 = regs.R26;
		/* 82234F04h case    1:*/		return 0x82234F08;
		  /* 82234F08h */ case    2:  		/* addi R5, R11, 5132 */
		/* 82234F08h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x140C);
		/* 82234F08h case    2:*/		return 0x82234F0C;
		  /* 82234F0Ch */ case    3:  		/* mr R4, R27 */
		/* 82234F0Ch case    3:*/		regs.R4 = regs.R27;
		/* 82234F0Ch case    3:*/		return 0x82234F10;
		  /* 82234F10h */ case    4:  		/* li R7, 88 */
		/* 82234F10h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x58);
		/* 82234F10h case    4:*/		return 0x82234F14;
		  /* 82234F14h */ case    5:  		/* bl -905996 */
		/* 82234F14h case    5:*/		regs.LR = 0x82234F18; return 0x82157C08;
		/* 82234F14h case    5:*/		return 0x82234F18;
	}
	return 0x82234F18;
} // Block from 82234F00h-82234F18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82234F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234F18);
		  /* 82234F18h */ case    0:  		/* mr R3, R31 */
		/* 82234F18h case    0:*/		regs.R3 = regs.R31;
		/* 82234F18h case    0:*/		return 0x82234F1C;
		  /* 82234F1Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 82234F1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82234F1Ch case    1:*/		return 0x82234F20;
		  /* 82234F20h */ case    2:  		/* b -1719428 */
		/* 82234F20h case    2:*/		return 0x8209129C;
		/* 82234F20h case    2:*/		return 0x82234F24;
		  /* 82234F24h */ case    3:  		/* nop */
		/* 82234F24h case    3:*/		cpu::op::nop();
		/* 82234F24h case    3:*/		return 0x82234F28;
	}
	return 0x82234F28;
} // Block from 82234F18h-82234F28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82234F28h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234F28);
		  /* 82234F28h */ case    0:  		/* mfspr R12, LR */
		/* 82234F28h case    0:*/		regs.R12 = regs.LR;
		/* 82234F28h case    0:*/		return 0x82234F2C;
		  /* 82234F2Ch */ case    1:  		/* bl -1719524 */
		/* 82234F2Ch case    1:*/		regs.LR = 0x82234F30; return 0x82091248;
		/* 82234F2Ch case    1:*/		return 0x82234F30;
		  /* 82234F30h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82234F30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82234F30h case    2:*/		return 0x82234F34;
		  /* 82234F34h */ case    3:  		/* lwz R24, <#[R3 + 20]> */
		/* 82234F34h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x00000014) );
		/* 82234F34h case    3:*/		return 0x82234F38;
		  /* 82234F38h */ case    4:  		/* mr R31, R3 */
		/* 82234F38h case    4:*/		regs.R31 = regs.R3;
		/* 82234F38h case    4:*/		return 0x82234F3C;
		  /* 82234F3Ch */ case    5:  		/* mr R29, R4 */
		/* 82234F3Ch case    5:*/		regs.R29 = regs.R4;
		/* 82234F3Ch case    5:*/		return 0x82234F40;
		  /* 82234F40h */ case    6:  		/* mr R27, R5 */
		/* 82234F40h case    6:*/		regs.R27 = regs.R5;
		/* 82234F40h case    6:*/		return 0x82234F44;
		  /* 82234F44h */ case    7:  		/* mr R25, R6 */
		/* 82234F44h case    7:*/		regs.R25 = regs.R6;
		/* 82234F44h case    7:*/		return 0x82234F48;
		  /* 82234F48h */ case    8:  		/* li R26, 0 */
		/* 82234F48h case    8:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82234F48h case    8:*/		return 0x82234F4C;
		  /* 82234F4Ch */ case    9:  		/* li R28, 1 */
		/* 82234F4Ch case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82234F4Ch case    9:*/		return 0x82234F50;
		  /* 82234F50h */ case   10:  		/* cmplwi CR6, R5, 0 */
		/* 82234F50h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82234F50h case   10:*/		return 0x82234F54;
		  /* 82234F54h */ case   11:  		/* bc 12, CR6_EQ, 320 */
		/* 82234F54h case   11:*/		if ( regs.CR[6].eq ) { return 0x82235094;  }
		/* 82234F54h case   11:*/		return 0x82234F58;
		  /* 82234F58h */ case   12:  		/* lwz R30, <#[R3]> */
		/* 82234F58h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82234F58h case   12:*/		return 0x82234F5C;
		  /* 82234F5Ch */ case   13:  		/* cmplwi CR6, R30, 0 */
		/* 82234F5Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82234F5Ch case   13:*/		return 0x82234F60;
		  /* 82234F60h */ case   14:  		/* bc 4, CR6_EQ, 36 */
		/* 82234F60h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82234F84;  }
		/* 82234F60h case   14:*/		return 0x82234F64;
		  /* 82234F64h */ case   15:  		/* li R5, 0 */
		/* 82234F64h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82234F64h case   15:*/		return 0x82234F68;
		  /* 82234F68h */ case   16:  		/* lwz R4, <#[R4]> */
		/* 82234F68h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000000) );
		/* 82234F68h case   16:*/		return 0x82234F6C;
		  /* 82234F6Ch */ case   17:  		/* bl -428 */
		/* 82234F6Ch case   17:*/		regs.LR = 0x82234F70; return 0x82234DC0;
		/* 82234F6Ch case   17:*/		return 0x82234F70;
		  /* 82234F70h */ case   18:  		/* lwz R11, <#[R31 + 20]> */
		/* 82234F70h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82234F70h case   18:*/		return 0x82234F74;
		  /* 82234F74h */ case   19:  		/* mr R30, R3 */
		/* 82234F74h case   19:*/		regs.R30 = regs.R3;
		/* 82234F74h case   19:*/		return 0x82234F78;
		  /* 82234F78h */ case   20:  		/* stw R3, <#[R31]> */
		/* 82234F78h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82234F78h case   20:*/		return 0x82234F7C;
		  /* 82234F7Ch */ case   21:  		/* addi R11, R11, 1 */
		/* 82234F7Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82234F7Ch case   21:*/		return 0x82234F80;
		  /* 82234F80h */ case   22:  		/* stw R11, <#[R31 + 20]> */
		/* 82234F80h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82234F80h case   22:*/		return 0x82234F84;
	}
	return 0x82234F84;
} // Block from 82234F28h-82234F84h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82234F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234F84);
		  /* 82234F84h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82234F84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82234F84h case    0:*/		return 0x82234F88;
		  /* 82234F88h */ case    1:  		/* bc 12, CR6_EQ, 196 */
		/* 82234F88h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223504C;  }
		/* 82234F88h case    1:*/		return 0x82234F8C;
		  /* 82234F8Ch */ case    2:  		/* lwz R11, <#[R30]> */
		/* 82234F8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82234F8Ch case    2:*/		return 0x82234F90;
		  /* 82234F90h */ case    3:  		/* lwz R4, <#[R29]> */
		/* 82234F90h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82234F90h case    3:*/		return 0x82234F94;
		  /* 82234F94h */ case    4:  		/* cmplw CR6, R4, R11 */
		/* 82234F94h case    4:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82234F94h case    4:*/		return 0x82234F98;
		  /* 82234F98h */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 82234F98h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82234FE0;  }
		/* 82234F98h case    5:*/		return 0x82234F9C;
		  /* 82234F9Ch */ case    6:  		/* addi R26, R26, 1 */
		/* 82234F9Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82234F9Ch case    6:*/		return 0x82234FA0;
		  /* 82234FA0h */ case    7:  		/* addi R29, R29, 4 */
		/* 82234FA0h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82234FA0h case    7:*/		return 0x82234FA4;
		  /* 82234FA4h */ case    8:  		/* cmplw CR6, R26, R27 */
		/* 82234FA4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R27);
		/* 82234FA4h case    8:*/		return 0x82234FA8;
		  /* 82234FA8h */ case    9:  		/* bc 12, CR6_EQ, 164 */
		/* 82234FA8h case    9:*/		if ( regs.CR[6].eq ) { return 0x8223504C;  }
		/* 82234FA8h case    9:*/		return 0x82234FAC;
		  /* 82234FACh */ case   10:  		/* lwz R11, <#[R30 + 12]> */
		/* 82234FACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82234FACh case   10:*/		return 0x82234FB0;
		  /* 82234FB0h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82234FB0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82234FB0h case   11:*/		return 0x82234FB4;
		  /* 82234FB4h */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 82234FB4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82234FD8;  }
		/* 82234FB4h case   12:*/		return 0x82234FB8;
	}
	return 0x82234FB8;
} // Block from 82234F84h-82234FB8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82234FB8h
// Function '?CompileWithPointSizeClamp@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234FB8);
		  /* 82234FB8h */ case    0:  		/* mr R5, R30 */
		/* 82234FB8h case    0:*/		regs.R5 = regs.R30;
		/* 82234FB8h case    0:*/		return 0x82234FBC;
		  /* 82234FBCh */ case    1:  		/* lwz R4, <#[R29]> */
		/* 82234FBCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82234FBCh case    1:*/		return 0x82234FC0;
		  /* 82234FC0h */ case    2:  		/* mr R3, R31 */
		/* 82234FC0h case    2:*/		regs.R3 = regs.R31;
		/* 82234FC0h case    2:*/		return 0x82234FC4;
		  /* 82234FC4h */ case    3:  		/* bl -516 */
		/* 82234FC4h case    3:*/		regs.LR = 0x82234FC8; return 0x82234DC0;
		/* 82234FC4h case    3:*/		return 0x82234FC8;
		  /* 82234FC8h */ case    4:  		/* stw R3, <#[R30 + 12]> */
		/* 82234FC8h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 82234FC8h case    4:*/		return 0x82234FCC;
		  /* 82234FCCh */ case    5:  		/* lwz R11, <#[R31 + 20]> */
		/* 82234FCCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82234FCCh case    5:*/		return 0x82234FD0;
		  /* 82234FD0h */ case    6:  		/* addi R11, R11, 1 */
		/* 82234FD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82234FD0h case    6:*/		return 0x82234FD4;
		  /* 82234FD4h */ case    7:  		/* stw R11, <#[R31 + 20]> */
		/* 82234FD4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82234FD4h case    7:*/		return 0x82234FD8;
	}
	return 0x82234FD8;
} // Block from 82234FB8h-82234FD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82234FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234FD8);
		  /* 82234FD8h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 82234FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82234FD8h case    0:*/		return 0x82234FDC;
		  /* 82234FDCh */ case    1:  		/* b 100 */
		/* 82234FDCh case    1:*/		return 0x82235040;
		/* 82234FDCh case    1:*/		return 0x82234FE0;
	}
	return 0x82234FE0;
} // Block from 82234FD8h-82234FE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82234FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82234FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82234FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82234FE0);
		  /* 82234FE0h */ case    0:  		/* bc 4, CR6_LT, 52 */
		/* 82234FE0h case    0:*/		if ( !regs.CR[6].lt ) { return 0x82235014;  }
		/* 82234FE0h case    0:*/		return 0x82234FE4;
		  /* 82234FE4h */ case    1:  		/* lwz R11, <#[R30 + 4]> */
		/* 82234FE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82234FE4h case    1:*/		return 0x82234FE8;
		  /* 82234FE8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82234FE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82234FE8h case    2:*/		return 0x82234FEC;
		  /* 82234FECh */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 82234FECh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223500C;  }
		/* 82234FECh case    3:*/		return 0x82234FF0;
		  /* 82234FF0h */ case    4:  		/* mr R5, R30 */
		/* 82234FF0h case    4:*/		regs.R5 = regs.R30;
		/* 82234FF0h case    4:*/		return 0x82234FF4;
		  /* 82234FF4h */ case    5:  		/* mr R3, R31 */
		/* 82234FF4h case    5:*/		regs.R3 = regs.R31;
		/* 82234FF4h case    5:*/		return 0x82234FF8;
		  /* 82234FF8h */ case    6:  		/* bl -568 */
		/* 82234FF8h case    6:*/		regs.LR = 0x82234FFC; return 0x82234DC0;
		/* 82234FF8h case    6:*/		return 0x82234FFC;
		  /* 82234FFCh */ case    7:  		/* stw R3, <#[R30 + 4]> */
		/* 82234FFCh case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 82234FFCh case    7:*/		return 0x82235000;
		  /* 82235000h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235000h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235000h case    8:*/		return 0x82235004;
		  /* 82235004h */ case    9:  		/* addi R11, R11, 1 */
		/* 82235004h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82235004h case    9:*/		return 0x82235008;
		  /* 82235008h */ case   10:  		/* stw R11, <#[R31 + 20]> */
		/* 82235008h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235008h case   10:*/		return 0x8223500C;
	}
	return 0x8223500C;
} // Block from 82234FE0h-8223500Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223500Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223500C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223500C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223500C);
		  /* 8223500Ch */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 8223500Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 8223500Ch case    0:*/		return 0x82235010;
		  /* 82235010h */ case    1:  		/* b 48 */
		/* 82235010h case    1:*/		return 0x82235040;
		/* 82235010h case    1:*/		return 0x82235014;
	}
	return 0x82235014;
} // Block from 8223500Ch-82235014h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235014);
		  /* 82235014h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82235014h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82235014h case    0:*/		return 0x82235018;
		  /* 82235018h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82235018h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235018h case    1:*/		return 0x8223501C;
		  /* 8223501Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8223501Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223503C;  }
		/* 8223501Ch case    2:*/		return 0x82235020;
		  /* 82235020h */ case    3:  		/* mr R5, R30 */
		/* 82235020h case    3:*/		regs.R5 = regs.R30;
		/* 82235020h case    3:*/		return 0x82235024;
		  /* 82235024h */ case    4:  		/* mr R3, R31 */
		/* 82235024h case    4:*/		regs.R3 = regs.R31;
		/* 82235024h case    4:*/		return 0x82235028;
		  /* 82235028h */ case    5:  		/* bl -616 */
		/* 82235028h case    5:*/		regs.LR = 0x8223502C; return 0x82234DC0;
		/* 82235028h case    5:*/		return 0x8223502C;
		  /* 8223502Ch */ case    6:  		/* stw R3, <#[R30 + 8]> */
		/* 8223502Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8223502Ch case    6:*/		return 0x82235030;
		  /* 82235030h */ case    7:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235030h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235030h case    7:*/		return 0x82235034;
		  /* 82235034h */ case    8:  		/* addi R11, R11, 1 */
		/* 82235034h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82235034h case    8:*/		return 0x82235038;
		  /* 82235038h */ case    9:  		/* stw R11, <#[R31 + 20]> */
		/* 82235038h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235038h case    9:*/		return 0x8223503C;
	}
	return 0x8223503C;
} // Block from 82235014h-8223503Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223503Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223503C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223503C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223503C);
		  /* 8223503Ch */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 8223503Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8223503Ch case    0:*/		return 0x82235040;
	}
	return 0x82235040;
} // Block from 8223503Ch-82235040h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235040);
		  /* 82235040h */ case    0:  		/* addi R28, R28, 1 */
		/* 82235040h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82235040h case    0:*/		return 0x82235044;
		  /* 82235044h */ case    1:  		/* cmplw CR6, R26, R27 */
		/* 82235044h case    1:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R27);
		/* 82235044h case    1:*/		return 0x82235048;
		  /* 82235048h */ case    2:  		/* bc 12, CR6_LT, -188 */
		/* 82235048h case    2:*/		if ( regs.CR[6].lt ) { return 0x82234F8C;  }
		/* 82235048h case    2:*/		return 0x8223504C;
	}
	return 0x8223504C;
} // Block from 82235040h-8223504Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223504Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223504C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223504C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223504C);
		  /* 8223504Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223504Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223504Ch case    0:*/		return 0x82235050;
		  /* 82235050h */ case    1:  		/* cmplw CR6, R24, R11 */
		/* 82235050h case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82235050h case    1:*/		return 0x82235054;
		  /* 82235054h */ case    2:  		/* bc 4, CR6_LT, 64 */
		/* 82235054h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82235094;  }
		/* 82235054h case    2:*/		return 0x82235058;
		  /* 82235058h */ case    3:  		/* mr R5, R30 */
		/* 82235058h case    3:*/		regs.R5 = regs.R30;
		/* 82235058h case    3:*/		return 0x8223505C;
		  /* 8223505Ch */ case    4:  		/* mr R4, R25 */
		/* 8223505Ch case    4:*/		regs.R4 = regs.R25;
		/* 8223505Ch case    4:*/		return 0x82235060;
		  /* 82235060h */ case    5:  		/* mr R3, R31 */
		/* 82235060h case    5:*/		regs.R3 = regs.R31;
		/* 82235060h case    5:*/		return 0x82235064;
		  /* 82235064h */ case    6:  		/* bl -676 */
		/* 82235064h case    6:*/		regs.LR = 0x82235068; return 0x82234DC0;
		/* 82235064h case    6:*/		return 0x82235068;
		  /* 82235068h */ case    7:  		/* stw R3, <#[R30 + 12]> */
		/* 82235068h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 82235068h case    7:*/		return 0x8223506C;
		  /* 8223506Ch */ case    8:  		/* addi R11, R28, 1 */
		/* 8223506Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x1);
		/* 8223506Ch case    8:*/		return 0x82235070;
		  /* 82235070h */ case    9:  		/* lwz R10, <#[R31 + 24]> */
		/* 82235070h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82235070h case    9:*/		return 0x82235074;
		  /* 82235074h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 82235074h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82235074h case   10:*/		return 0x82235078;
		  /* 82235078h */ case   11:  		/* lwz R10, <#[R31 + 20]> */
		/* 82235078h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82235078h case   11:*/		return 0x8223507C;
		  /* 8223507Ch */ case   12:  		/* addi R10, R10, 1 */
		/* 8223507Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223507Ch case   12:*/		return 0x82235080;
		  /* 82235080h */ case   13:  		/* stw R10, <#[R31 + 20]> */
		/* 82235080h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82235080h case   13:*/		return 0x82235084;
		  /* 82235084h */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 82235084h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8223508C;  }
		/* 82235084h case   14:*/		return 0x82235088;
		  /* 82235088h */ case   15:  		/* stw R11, <#[R31 + 24]> */
		/* 82235088h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82235088h case   15:*/		return 0x8223508C;
	}
	return 0x8223508C;
} // Block from 8223504Ch-8223508Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8223508Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223508C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223508C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223508C);
		  /* 8223508Ch */ case    0:  		/* lwz R3, <#[R30 + 12]> */
		/* 8223508Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223508Ch case    0:*/		return 0x82235090;
		  /* 82235090h */ case    1:  		/* b 8 */
		/* 82235090h case    1:*/		return 0x82235098;
		/* 82235090h case    1:*/		return 0x82235094;
	}
	return 0x82235094;
} // Block from 8223508Ch-82235094h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235094);
		  /* 82235094h */ case    0:  		/* li R3, 0 */
		/* 82235094h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235094h case    0:*/		return 0x82235098;
	}
	return 0x82235098;
} // Block from 82235094h-82235098h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235098);
		  /* 82235098h */ case    0:  		/* addi R1, R1, 160 */
		/* 82235098h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82235098h case    0:*/		return 0x8223509C;
		  /* 8223509Ch */ case    1:  		/* b -1719812 */
		/* 8223509Ch case    1:*/		return 0x82091298;
		/* 8223509Ch case    1:*/		return 0x822350A0;
	}
	return 0x822350A0;
} // Block from 82235098h-822350A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822350A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822350A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822350A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822350A0);
		  /* 822350A0h */ case    0:  		/* mfspr R12, LR */
		/* 822350A0h case    0:*/		regs.R12 = regs.LR;
		/* 822350A0h case    0:*/		return 0x822350A4;
		  /* 822350A4h */ case    1:  		/* bl -1719896 */
		/* 822350A4h case    1:*/		regs.LR = 0x822350A8; return 0x8209124C;
		/* 822350A4h case    1:*/		return 0x822350A8;
		  /* 822350A8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822350A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822350A8h case    2:*/		return 0x822350AC;
		  /* 822350ACh */ case    3:  		/* lis R10, -32253 */
		/* 822350ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822350ACh case    3:*/		return 0x822350B0;
		  /* 822350B0h */ case    4:  		/* lis R11, -32252 */
		/* 822350B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822350B0h case    4:*/		return 0x822350B4;
		  /* 822350B4h */ case    5:  		/* mr R29, R3 */
		/* 822350B4h case    5:*/		regs.R29 = regs.R3;
		/* 822350B4h case    5:*/		return 0x822350B8;
		  /* 822350B8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 822350B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822350B8h case    6:*/		return 0x822350BC;
		  /* 822350BCh */ case    7:  		/* addi R26, R10, 27460 */
		/* 822350BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x6B44);
		/* 822350BCh case    7:*/		return 0x822350C0;
		  /* 822350C0h */ case    8:  		/* addi R25, R11, 5040 */
		/* 822350C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x13B0);
		/* 822350C0h case    8:*/		return 0x822350C4;
		  /* 822350C4h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 822350C4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x822350E4;  }
		/* 822350C4h case    9:*/		return 0x822350C8;
		  /* 822350C8h */ case   10:  		/* lis R11, -32252 */
		/* 822350C8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822350C8h case   10:*/		return 0x822350CC;
		  /* 822350CCh */ case   11:  		/* mr R6, R25 */
		/* 822350CCh case   11:*/		regs.R6 = regs.R25;
		/* 822350CCh case   11:*/		return 0x822350D0;
		  /* 822350D0h */ case   12:  		/* addi R5, R11, 5032 */
		/* 822350D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x13A8);
		/* 822350D0h case   12:*/		return 0x822350D4;
		  /* 822350D4h */ case   13:  		/* mr R4, R26 */
		/* 822350D4h case   13:*/		regs.R4 = regs.R26;
		/* 822350D4h case   13:*/		return 0x822350D8;
		  /* 822350D8h */ case   14:  		/* li R7, 572 */
		/* 822350D8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x23C);
		/* 822350D8h case   14:*/		return 0x822350DC;
		  /* 822350DCh */ case   15:  		/* li R3, 0 */
		/* 822350DCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822350DCh case   15:*/		return 0x822350E0;
	}
	return 0x822350E0;
} // Block from 822350A0h-822350E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822350E0h
// Function '?CompileWithPointSpriteReplaceModeNone@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822350E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822350E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822350E0);
		  /* 822350E0h */ case    0:  		/* bl -906456 */
		/* 822350E0h case    0:*/		regs.LR = 0x822350E4; return 0x82157C08;
		/* 822350E0h case    0:*/		return 0x822350E4;
	}
	return 0x822350E4;
} // Block from 822350E0h-822350E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822350E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822350E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822350E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822350E4);
		  /* 822350E4h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 822350E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 822350E4h case    0:*/		return 0x822350E8;
		  /* 822350E8h */ case    1:  		/* li R28, 0 */
		/* 822350E8h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 822350E8h case    1:*/		return 0x822350EC;
		  /* 822350ECh */ case    2:  		/* lwz R31, <#[R29]> */
		/* 822350ECh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 822350ECh case    2:*/		return 0x822350F0;
		  /* 822350F0h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 822350F0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822350F0h case    3:*/		return 0x822350F4;
		  /* 822350F4h */ case    4:  		/* bc 12, CR6_LT, 176 */
		/* 822350F4h case    4:*/		if ( regs.CR[6].lt ) { return 0x822351A4;  }
		/* 822350F4h case    4:*/		return 0x822350F8;
		  /* 822350F8h */ case    5:  		/* lis R11, -32252 */
		/* 822350F8h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822350F8h case    5:*/		return 0x822350FC;
		  /* 822350FCh */ case    6:  		/* addi R27, R11, 5168 */
		/* 822350FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x1430);
		/* 822350FCh case    6:*/		return 0x82235100;
		  /* 82235100h */ case    7:  		/* lwz R11, <#[R31 + 4]> */
		/* 82235100h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82235100h case    7:*/		return 0x82235104;
		  /* 82235104h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82235104h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235104h case    8:*/		return 0x82235108;
		  /* 82235108h */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 82235108h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82235124;  }
		/* 82235108h case    9:*/		return 0x8223510C;
		  /* 8223510Ch */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223510Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223510Ch case   10:*/		return 0x82235110;
		  /* 82235110h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82235110h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235110h case   11:*/		return 0x82235114;
		  /* 82235114h */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 82235114h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82235124;  }
		/* 82235114h case   12:*/		return 0x82235118;
		  /* 82235118h */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 82235118h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82235118h case   13:*/		return 0x8223511C;
		  /* 8223511Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8223511Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223511Ch case   14:*/		return 0x82235120;
		  /* 82235120h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 82235120h case   15:*/		if ( regs.CR[6].eq ) { return 0x8223512C;  }
		/* 82235120h case   15:*/		return 0x82235124;
	}
	return 0x82235124;
} // Block from 822350E4h-82235124h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82235124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235124);
		  /* 82235124h */ case    0:  		/* mr R31, R11 */
		/* 82235124h case    0:*/		regs.R31 = regs.R11;
		/* 82235124h case    0:*/		return 0x82235128;
		  /* 82235128h */ case    1:  		/* b -40 */
		/* 82235128h case    1:*/		return 0x82235100;
		/* 82235128h case    1:*/		return 0x8223512C;
	}
	return 0x8223512C;
} // Block from 82235124h-8223512Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223512Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223512C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223512C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223512C);
		  /* 8223512Ch */ case    0:  		/* mr R4, R31 */
		/* 8223512Ch case    0:*/		regs.R4 = regs.R31;
		/* 8223512Ch case    0:*/		return 0x82235130;
		  /* 82235130h */ case    1:  		/* lwz R3, <#[R29 + 16]> */
		/* 82235130h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 82235130h case    1:*/		return 0x82235134;
		  /* 82235134h */ case    2:  		/* bl -169788 */
		/* 82235134h case    2:*/		regs.LR = 0x82235138; return 0x8220B9F8;
		/* 82235134h case    2:*/		return 0x82235138;
		  /* 82235138h */ case    3:  		/* lwz R11, <#[R29 + 20]> */
		/* 82235138h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82235138h case    3:*/		return 0x8223513C;
		  /* 8223513Ch */ case    4:  		/* addic. R11, R11, -1 */
		/* 8223513Ch case    4:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8223513Ch case    4:*/		return 0x82235140;
		  /* 82235140h */ case    5:  		/* stw R11, <#[R29 + 20]> */
		/* 82235140h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82235140h case    5:*/		return 0x82235144;
		  /* 82235144h */ case    6:  		/* bc 12, CR0_EQ, 92 */
		/* 82235144h case    6:*/		if ( regs.CR[0].eq ) { return 0x822351A0;  }
		/* 82235144h case    6:*/		return 0x82235148;
		  /* 82235148h */ case    7:  		/* mr R30, R31 */
		/* 82235148h case    7:*/		regs.R30 = regs.R31;
		/* 82235148h case    7:*/		return 0x8223514C;
		  /* 8223514Ch */ case    8:  		/* lwz R31, <#[R31 + 16]> */
		/* 8223514Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 8223514Ch case    8:*/		return 0x82235150;
		  /* 82235150h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 82235150h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82235150h case    9:*/		return 0x82235154;
		  /* 82235154h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 82235154h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82235170;  }
		/* 82235154h case   10:*/		return 0x82235158;
		  /* 82235158h */ case   11:  		/* mr R6, R25 */
		/* 82235158h case   11:*/		regs.R6 = regs.R25;
		/* 82235158h case   11:*/		return 0x8223515C;
		  /* 8223515Ch */ case   12:  		/* mr R5, R27 */
		/* 8223515Ch case   12:*/		regs.R5 = regs.R27;
		/* 8223515Ch case   12:*/		return 0x82235160;
		  /* 82235160h */ case   13:  		/* mr R4, R26 */
		/* 82235160h case   13:*/		regs.R4 = regs.R26;
		/* 82235160h case   13:*/		return 0x82235164;
		  /* 82235164h */ case   14:  		/* li R7, 616 */
		/* 82235164h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x268);
		/* 82235164h case   14:*/		return 0x82235168;
		  /* 82235168h */ case   15:  		/* li R3, 0 */
		/* 82235168h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235168h case   15:*/		return 0x8223516C;
		  /* 8223516Ch */ case   16:  		/* bl -906596 */
		/* 8223516Ch case   16:*/		regs.LR = 0x82235170; return 0x82157C08;
		/* 8223516Ch case   16:*/		return 0x82235170;
	}
	return 0x82235170;
} // Block from 8223512Ch-82235170h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82235170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235170);
		  /* 82235170h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82235170h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82235170h case    0:*/		return 0x82235174;
		  /* 82235174h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 82235174h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82235174h case    1:*/		return 0x82235178;
		  /* 82235178h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82235178h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82235184;  }
		/* 82235178h case    2:*/		return 0x8223517C;
		  /* 8223517Ch */ case    3:  		/* stw R28, <#[R31 + 4]> */
		/* 8223517Ch case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		/* 8223517Ch case    3:*/		return 0x82235180;
		  /* 82235180h */ case    4:  		/* b -128 */
		/* 82235180h case    4:*/		return 0x82235100;
		/* 82235180h case    4:*/		return 0x82235184;
	}
	return 0x82235184;
} // Block from 82235170h-82235184h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82235184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235184);
		  /* 82235184h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82235184h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82235184h case    0:*/		return 0x82235188;
		  /* 82235188h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 82235188h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82235188h case    1:*/		return 0x8223518C;
		  /* 8223518Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8223518Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82235198;  }
		/* 8223518Ch case    2:*/		return 0x82235190;
		  /* 82235190h */ case    3:  		/* stw R28, <#[R31 + 12]> */
		/* 82235190h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 82235190h case    3:*/		return 0x82235194;
		  /* 82235194h */ case    4:  		/* b -148 */
		/* 82235194h case    4:*/		return 0x82235100;
		/* 82235194h case    4:*/		return 0x82235198;
	}
	return 0x82235198;
} // Block from 82235184h-82235198h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82235198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235198);
		  /* 82235198h */ case    0:  		/* stw R28, <#[R31 + 8]> */
		/* 82235198h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 82235198h case    0:*/		return 0x8223519C;
		  /* 8223519Ch */ case    1:  		/* b -156 */
		/* 8223519Ch case    1:*/		return 0x82235100;
		/* 8223519Ch case    1:*/		return 0x822351A0;
	}
	return 0x822351A0;
} // Block from 82235198h-822351A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822351A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822351A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822351A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822351A0);
		  /* 822351A0h */ case    0:  		/* stw R28, <#[R29]> */
		/* 822351A0h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000000) );
		/* 822351A0h case    0:*/		return 0x822351A4;
	}
	return 0x822351A4;
} // Block from 822351A0h-822351A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822351A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822351A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822351A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822351A4);
		  /* 822351A4h */ case    0:  		/* stw R28, <#[R29 + 24]> */
		/* 822351A4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000018) );
		/* 822351A4h case    0:*/		return 0x822351A8;
		  /* 822351A8h */ case    1:  		/* stw R28, <#[R29 + 20]> */
		/* 822351A8h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000014) );
		/* 822351A8h case    1:*/		return 0x822351AC;
		  /* 822351ACh */ case    2:  		/* addi R1, R1, 144 */
		/* 822351ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 822351ACh case    2:*/		return 0x822351B0;
		  /* 822351B0h */ case    3:  		/* b -1720084 */
		/* 822351B0h case    3:*/		return 0x8209129C;
		/* 822351B0h case    3:*/		return 0x822351B4;
		  /* 822351B4h */ case    4:  		/* nop */
		/* 822351B4h case    4:*/		cpu::op::nop();
		/* 822351B4h case    4:*/		return 0x822351B8;
	}
	return 0x822351B8;
} // Block from 822351A4h-822351B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822351B8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822351B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822351B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822351B8);
		  /* 822351B8h */ case    0:  		/* mfspr R12, LR */
		/* 822351B8h case    0:*/		regs.R12 = regs.LR;
		/* 822351B8h case    0:*/		return 0x822351BC;
		  /* 822351BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 822351BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822351BCh case    1:*/		return 0x822351C0;
		  /* 822351C0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 822351C0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822351C0h case    2:*/		return 0x822351C4;
		  /* 822351C4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 822351C4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 822351C4h case    3:*/		return 0x822351C8;
		  /* 822351C8h */ case    4:  		/* mr R31, R3 */
		/* 822351C8h case    4:*/		regs.R31 = regs.R3;
		/* 822351C8h case    4:*/		return 0x822351CC;
		  /* 822351CCh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 822351CCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822351CCh case    5:*/		return 0x822351D0;
		  /* 822351D0h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 822351D0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x822351F4;  }
		/* 822351D0h case    6:*/		return 0x822351D4;
		  /* 822351D4h */ case    7:  		/* lis R11, -32252 */
		/* 822351D4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822351D4h case    7:*/		return 0x822351D8;
		  /* 822351D8h */ case    8:  		/* lis R10, -32252 */
		/* 822351D8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822351D8h case    8:*/		return 0x822351DC;
		  /* 822351DCh */ case    9:  		/* lis R9, -32253 */
		/* 822351DCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822351DCh case    9:*/		return 0x822351E0;
		  /* 822351E0h */ case   10:  		/* addi R6, R11, 5040 */
		/* 822351E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x13B0);
		/* 822351E0h case   10:*/		return 0x822351E4;
		  /* 822351E4h */ case   11:  		/* addi R5, R10, 5032 */
		/* 822351E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x13A8);
		/* 822351E4h case   11:*/		return 0x822351E8;
		  /* 822351E8h */ case   12:  		/* addi R4, R9, 27460 */
		/* 822351E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822351E8h case   12:*/		return 0x822351EC;
		  /* 822351ECh */ case   13:  		/* li R7, 109 */
		/* 822351ECh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x6D);
		/* 822351ECh case   13:*/		return 0x822351F0;
		  /* 822351F0h */ case   14:  		/* bl -906728 */
		/* 822351F0h case   14:*/		regs.LR = 0x822351F4; return 0x82157C08;
		/* 822351F0h case   14:*/		return 0x822351F4;
	}
	return 0x822351F4;
} // Block from 822351B8h-822351F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822351F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822351F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822351F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822351F4);
		  /* 822351F4h */ case    0:  		/* mr R3, R31 */
		/* 822351F4h case    0:*/		regs.R3 = regs.R31;
		/* 822351F4h case    0:*/		return 0x822351F8;
		  /* 822351F8h */ case    1:  		/* bl -344 */
		/* 822351F8h case    1:*/		regs.LR = 0x822351FC; return 0x822350A0;
		/* 822351F8h case    1:*/		return 0x822351FC;
		  /* 822351FCh */ case    2:  		/* lwz R3, <#[R31 + 16]> */
		/* 822351FCh case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 822351FCh case    2:*/		return 0x82235200;
		  /* 82235200h */ case    3:  		/* bl -170352 */
		/* 82235200h case    3:*/		regs.LR = 0x82235204; return 0x8220B890;
		/* 82235200h case    3:*/		return 0x82235204;
		  /* 82235204h */ case    4:  		/* lwz R11, <#[R31 + 12]> */
		/* 82235204h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82235204h case    4:*/		return 0x82235208;
		  /* 82235208h */ case    5:  		/* mr R4, R31 */
		/* 82235208h case    5:*/		regs.R4 = regs.R31;
		/* 82235208h case    5:*/		return 0x8223520C;
		  /* 8223520Ch */ case    6:  		/* lwz R3, <#[R31 + 4]> */
		/* 8223520Ch case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8223520Ch case    6:*/		return 0x82235210;
		  /* 82235210h */ case    7:  		/* mtspr CTR, R11 */
		/* 82235210h case    7:*/		regs.CTR = regs.R11;
		/* 82235210h case    7:*/		return 0x82235214;
		  /* 82235214h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82235214h case    8:*/		if ( 1 ) { regs.LR = 0x82235218; return (uint32)regs.CTR; }
		/* 82235214h case    8:*/		return 0x82235218;
		  /* 82235218h */ case    9:  		/* addi R1, R1, 96 */
		/* 82235218h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82235218h case    9:*/		return 0x8223521C;
		  /* 8223521Ch */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223521Ch case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223521Ch case   10:*/		return 0x82235220;
		  /* 82235220h */ case   11:  		/* mtspr LR, R12 */
		/* 82235220h case   11:*/		regs.LR = regs.R12;
		/* 82235220h case   11:*/		return 0x82235224;
		  /* 82235224h */ case   12:  		/* ld R31, <#[R1 - 16]> */
		/* 82235224h case   12:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235224h case   12:*/		return 0x82235228;
		  /* 82235228h */ case   13:  		/* bclr 20, CR0_LT */
		/* 82235228h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235228h case   13:*/		return 0x8223522C;
	}
	return 0x8223522C;
} // Block from 822351F4h-8223522Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223522Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223522C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223522C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223522C);
		  /* 8223522Ch */ case    0:  		/* nop */
		/* 8223522Ch case    0:*/		cpu::op::nop();
		/* 8223522Ch case    0:*/		return 0x82235230;
	}
	return 0x82235230;
} // Block from 8223522Ch-82235230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235230h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235230);
		  /* 82235230h */ case    0:  		/* lis R11, -25033 */
		/* 82235230h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9E37);
		/* 82235230h case    0:*/		return 0x82235234;
		  /* 82235234h */ case    1:  		/* mr R9, R5 */
		/* 82235234h case    1:*/		regs.R9 = regs.R5;
		/* 82235234h case    1:*/		return 0x82235238;
		  /* 82235238h */ case    2:  		/* ori R10, R11, 31161 */
		/* 82235238h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x79B9);
		/* 82235238h case    2:*/		return 0x8223523C;
		  /* 8223523Ch */ case    3:  		/* mr R8, R4 */
		/* 8223523Ch case    3:*/		regs.R8 = regs.R4;
		/* 8223523Ch case    3:*/		return 0x82235240;
		  /* 82235240h */ case    4:  		/* cmplwi CR6, R4, 3 */
		/* 82235240h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000003);
		/* 82235240h case    4:*/		return 0x82235244;
		  /* 82235244h */ case    5:  		/* mr R11, R10 */
		/* 82235244h case    5:*/		regs.R11 = regs.R10;
		/* 82235244h case    5:*/		return 0x82235248;
		  /* 82235248h */ case    6:  		/* bc 12, CR6_LT, 196 */
		/* 82235248h case    6:*/		if ( regs.CR[6].lt ) { return 0x8223530C;  }
		/* 82235248h case    6:*/		return 0x8223524C;
		  /* 8223524Ch */ case    7:  		/* li R7, 3 */
		/* 8223524Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8223524Ch case    7:*/		return 0x82235250;
	}
	return 0x82235250;
} // Block from 82235230h-82235250h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82235250h
// Function '?CompileWithPointSpriteReplaceModeZero@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235250);
		  /* 82235250h */ case    0:  		/* divwu R7, R4, R7 */
		/* 82235250h case    0:*/		cpu::op::divwu<0>(regs,&regs.R7,regs.R4,regs.R7);
		/* 82235250h case    0:*/		return 0x82235254;
		  /* 82235254h */ case    1:  		/* mtspr CTR, R7 */
		/* 82235254h case    1:*/		regs.CTR = regs.R7;
		/* 82235254h case    1:*/		return 0x82235258;
		  /* 82235258h */ case    2:  		/* lwz R7, <#[R3 + 8]> */
		/* 82235258h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000008) );
		/* 82235258h case    2:*/		return 0x8223525C;
		  /* 8223525Ch */ case    3:  		/* addi R8, R8, -3 */
		/* 8223525Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFD);
		/* 8223525Ch case    3:*/		return 0x82235260;
		  /* 82235260h */ case    4:  		/* lwz R6, <#[R3 + 4]> */
		/* 82235260h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000004) );
		/* 82235260h case    4:*/		return 0x82235264;
		  /* 82235264h */ case    5:  		/* add R9, R7, R9 */
		/* 82235264h case    5:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82235264h case    5:*/		return 0x82235268;
		  /* 82235268h */ case    6:  		/* lwz R5, <#[R3]> */
		/* 82235268h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000000) );
		/* 82235268h case    6:*/		return 0x8223526C;
		  /* 8223526Ch */ case    7:  		/* add R10, R6, R10 */
		/* 8223526Ch case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 8223526Ch case    7:*/		return 0x82235270;
		  /* 82235270h */ case    8:  		/* subf R7, R9, R5 */
		/* 82235270h case    8:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R9,regs.R5);
		/* 82235270h case    8:*/		return 0x82235274;
		  /* 82235274h */ case    9:  		/* rlwinm R6, R9, 19, 13, 31 */
		/* 82235274h case    9:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R6,regs.R9);
		/* 82235274h case    9:*/		return 0x82235278;
		  /* 82235278h */ case   10:  		/* subf R7, R10, R7 */
		/* 82235278h case   10:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R10,regs.R7);
		/* 82235278h case   10:*/		return 0x8223527C;
		  /* 8223527Ch */ case   11:  		/* subf R10, R9, R10 */
		/* 8223527Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8223527Ch case   11:*/		return 0x82235280;
		  /* 82235280h */ case   12:  		/* add R11, R7, R11 */
		/* 82235280h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 82235280h case   12:*/		return 0x82235284;
		  /* 82235284h */ case   13:  		/* addi R3, R3, 12 */
		/* 82235284h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xC);
		/* 82235284h case   13:*/		return 0x82235288;
		  /* 82235288h */ case   14:  		/* xor R11, R11, R6 */
		/* 82235288h case   14:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82235288h case   14:*/		return 0x8223528C;
		  /* 8223528Ch */ case   15:  		/* subf R10, R11, R10 */
		/* 8223528Ch case   15:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8223528Ch case   15:*/		return 0x82235290;
		  /* 82235290h */ case   16:  		/* rlwinm R7, R11, 8, 0, 23 */
		/* 82235290h case   16:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R7,regs.R11);
		/* 82235290h case   16:*/		return 0x82235294;
		  /* 82235294h */ case   17:  		/* xor R10, R10, R7 */
		/* 82235294h case   17:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82235294h case   17:*/		return 0x82235298;
		  /* 82235298h */ case   18:  		/* subf R9, R10, R9 */
		/* 82235298h case   18:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 82235298h case   18:*/		return 0x8223529C;
		  /* 8223529Ch */ case   19:  		/* rlwinm R7, R10, 19, 13, 31 */
		/* 8223529Ch case   19:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R7,regs.R10);
		/* 8223529Ch case   19:*/		return 0x822352A0;
		  /* 822352A0h */ case   20:  		/* subf R9, R11, R9 */
		/* 822352A0h case   20:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 822352A0h case   20:*/		return 0x822352A4;
		  /* 822352A4h */ case   21:  		/* xor R9, R9, R7 */
		/* 822352A4h case   21:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 822352A4h case   21:*/		return 0x822352A8;
		  /* 822352A8h */ case   22:  		/* subf R11, R9, R11 */
		/* 822352A8h case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 822352A8h case   22:*/		return 0x822352AC;
		  /* 822352ACh */ case   23:  		/* rlwinm R7, R9, 20, 12, 31 */
		/* 822352ACh case   23:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R7,regs.R9);
		/* 822352ACh case   23:*/		return 0x822352B0;
		  /* 822352B0h */ case   24:  		/* subf R11, R10, R11 */
		/* 822352B0h case   24:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 822352B0h case   24:*/		return 0x822352B4;
		  /* 822352B4h */ case   25:  		/* subf R10, R9, R10 */
		/* 822352B4h case   25:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 822352B4h case   25:*/		return 0x822352B8;
		  /* 822352B8h */ case   26:  		/* xor R11, R11, R7 */
		/* 822352B8h case   26:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 822352B8h case   26:*/		return 0x822352BC;
		  /* 822352BCh */ case   27:  		/* subf R10, R11, R10 */
		/* 822352BCh case   27:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 822352BCh case   27:*/		return 0x822352C0;
		  /* 822352C0h */ case   28:  		/* rlwinm R7, R11, 16, 0, 15 */
		/* 822352C0h case   28:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R7,regs.R11);
		/* 822352C0h case   28:*/		return 0x822352C4;
		  /* 822352C4h */ case   29:  		/* xor R10, R10, R7 */
		/* 822352C4h case   29:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 822352C4h case   29:*/		return 0x822352C8;
		  /* 822352C8h */ case   30:  		/* subf R9, R10, R9 */
		/* 822352C8h case   30:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 822352C8h case   30:*/		return 0x822352CC;
		  /* 822352CCh */ case   31:  		/* rlwinm R7, R10, 27, 5, 31 */
		/* 822352CCh case   31:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R7,regs.R10);
		/* 822352CCh case   31:*/		return 0x822352D0;
		  /* 822352D0h */ case   32:  		/* subf R9, R11, R9 */
		/* 822352D0h case   32:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 822352D0h case   32:*/		return 0x822352D4;
		  /* 822352D4h */ case   33:  		/* xor R9, R9, R7 */
		/* 822352D4h case   33:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 822352D4h case   33:*/		return 0x822352D8;
		  /* 822352D8h */ case   34:  		/* subf R11, R9, R11 */
		/* 822352D8h case   34:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 822352D8h case   34:*/		return 0x822352DC;
		  /* 822352DCh */ case   35:  		/* rlwinm R7, R9, 29, 3, 31 */
		/* 822352DCh case   35:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R7,regs.R9);
		/* 822352DCh case   35:*/		return 0x822352E0;
		  /* 822352E0h */ case   36:  		/* subf R11, R10, R11 */
		/* 822352E0h case   36:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 822352E0h case   36:*/		return 0x822352E4;
		  /* 822352E4h */ case   37:  		/* subf R10, R9, R10 */
		/* 822352E4h case   37:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 822352E4h case   37:*/		return 0x822352E8;
		  /* 822352E8h */ case   38:  		/* xor R11, R11, R7 */
		/* 822352E8h case   38:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 822352E8h case   38:*/		return 0x822352EC;
		  /* 822352ECh */ case   39:  		/* rlwinm R7, R11, 10, 0, 21 */
		/* 822352ECh case   39:*/		cpu::op::rlwinm<0,10,0,21>(regs,&regs.R7,regs.R11);
		/* 822352ECh case   39:*/		return 0x822352F0;
		  /* 822352F0h */ case   40:  		/* subf R10, R11, R10 */
		/* 822352F0h case   40:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 822352F0h case   40:*/		return 0x822352F4;
		  /* 822352F4h */ case   41:  		/* xor R10, R10, R7 */
		/* 822352F4h case   41:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 822352F4h case   41:*/		return 0x822352F8;
		  /* 822352F8h */ case   42:  		/* subf R9, R10, R9 */
		/* 822352F8h case   42:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 822352F8h case   42:*/		return 0x822352FC;
		  /* 822352FCh */ case   43:  		/* rlwinm R7, R10, 17, 15, 31 */
		/* 822352FCh case   43:*/		cpu::op::rlwinm<0,17,15,31>(regs,&regs.R7,regs.R10);
		/* 822352FCh case   43:*/		return 0x82235300;
		  /* 82235300h */ case   44:  		/* subf R9, R11, R9 */
		/* 82235300h case   44:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82235300h case   44:*/		return 0x82235304;
		  /* 82235304h */ case   45:  		/* xor R9, R9, R7 */
		/* 82235304h case   45:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 82235304h case   45:*/		return 0x82235308;
		  /* 82235308h */ case   46:  		/* bc 16, CR0_LT, -176 */
		/* 82235308h case   46:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82235258;  }
		/* 82235308h case   46:*/		return 0x8223530C;
	}
	return 0x8223530C;
} // Block from 82235250h-8223530Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 8223530Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223530C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223530C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223530C);
		  /* 8223530Ch */ case    0:  		/* rlwinm R7, R4, 2, 0, 29 */
		/* 8223530Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R4);
		/* 8223530Ch case    0:*/		return 0x82235310;
		  /* 82235310h */ case    1:  		/* cmplwi CR6, R8, 1 */
		/* 82235310h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82235310h case    1:*/		return 0x82235314;
		  /* 82235314h */ case    2:  		/* add R9, R7, R9 */
		/* 82235314h case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82235314h case    2:*/		return 0x82235318;
		  /* 82235318h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 82235318h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223532C;  }
		/* 82235318h case    3:*/		return 0x8223531C;
		  /* 8223531Ch */ case    4:  		/* cmplwi CR6, R8, 2 */
		/* 8223531Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 8223531Ch case    4:*/		return 0x82235320;
		  /* 82235320h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 82235320h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82235334;  }
		/* 82235320h case    5:*/		return 0x82235324;
		  /* 82235324h */ case    6:  		/* lwz R8, <#[R3 + 4]> */
		/* 82235324h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000004) );
		/* 82235324h case    6:*/		return 0x82235328;
		  /* 82235328h */ case    7:  		/* add R10, R8, R10 */
		/* 82235328h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82235328h case    7:*/		return 0x8223532C;
	}
	return 0x8223532C;
} // Block from 8223530Ch-8223532Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223532Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223532C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223532C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223532C);
		  /* 8223532Ch */ case    0:  		/* lwz R8, <#[R3]> */
		/* 8223532Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 8223532Ch case    0:*/		return 0x82235330;
		  /* 82235330h */ case    1:  		/* add R11, R8, R11 */
		/* 82235330h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82235330h case    1:*/		return 0x82235334;
	}
	return 0x82235334;
} // Block from 8223532Ch-82235334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235334);
		  /* 82235334h */ case    0:  		/* subf R11, R9, R11 */
		/* 82235334h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82235334h case    0:*/		return 0x82235338;
		  /* 82235338h */ case    1:  		/* rlwinm R8, R9, 19, 13, 31 */
		/* 82235338h case    1:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R8,regs.R9);
		/* 82235338h case    1:*/		return 0x8223533C;
		  /* 8223533Ch */ case    2:  		/* subf R11, R10, R11 */
		/* 8223533Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223533Ch case    2:*/		return 0x82235340;
		  /* 82235340h */ case    3:  		/* subf R10, R9, R10 */
		/* 82235340h case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82235340h case    3:*/		return 0x82235344;
		  /* 82235344h */ case    4:  		/* xor R11, R11, R8 */
		/* 82235344h case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82235344h case    4:*/		return 0x82235348;
		  /* 82235348h */ case    5:  		/* subf R10, R11, R10 */
		/* 82235348h case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82235348h case    5:*/		return 0x8223534C;
		  /* 8223534Ch */ case    6:  		/* rlwinm R8, R11, 8, 0, 23 */
		/* 8223534Ch case    6:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R8,regs.R11);
		/* 8223534Ch case    6:*/		return 0x82235350;
		  /* 82235350h */ case    7:  		/* xor R10, R10, R8 */
		/* 82235350h case    7:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82235350h case    7:*/		return 0x82235354;
		  /* 82235354h */ case    8:  		/* subf R9, R10, R9 */
		/* 82235354h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 82235354h case    8:*/		return 0x82235358;
		  /* 82235358h */ case    9:  		/* rlwinm R8, R10, 19, 13, 31 */
		/* 82235358h case    9:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R8,regs.R10);
		/* 82235358h case    9:*/		return 0x8223535C;
		  /* 8223535Ch */ case   10:  		/* subf R9, R11, R9 */
		/* 8223535Ch case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8223535Ch case   10:*/		return 0x82235360;
		  /* 82235360h */ case   11:  		/* xor R9, R9, R8 */
		/* 82235360h case   11:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82235360h case   11:*/		return 0x82235364;
		  /* 82235364h */ case   12:  		/* subf R11, R9, R11 */
		/* 82235364h case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82235364h case   12:*/		return 0x82235368;
		  /* 82235368h */ case   13:  		/* rlwinm R8, R9, 20, 12, 31 */
		/* 82235368h case   13:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R8,regs.R9);
		/* 82235368h case   13:*/		return 0x8223536C;
		  /* 8223536Ch */ case   14:  		/* subf R11, R10, R11 */
		/* 8223536Ch case   14:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223536Ch case   14:*/		return 0x82235370;
		  /* 82235370h */ case   15:  		/* subf R10, R9, R10 */
		/* 82235370h case   15:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82235370h case   15:*/		return 0x82235374;
		  /* 82235374h */ case   16:  		/* xor R11, R11, R8 */
		/* 82235374h case   16:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82235374h case   16:*/		return 0x82235378;
		  /* 82235378h */ case   17:  		/* subf R10, R11, R10 */
		/* 82235378h case   17:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82235378h case   17:*/		return 0x8223537C;
		  /* 8223537Ch */ case   18:  		/* rlwinm R8, R11, 16, 0, 15 */
		/* 8223537Ch case   18:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R8,regs.R11);
		/* 8223537Ch case   18:*/		return 0x82235380;
		  /* 82235380h */ case   19:  		/* xor R10, R10, R8 */
		/* 82235380h case   19:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82235380h case   19:*/		return 0x82235384;
		  /* 82235384h */ case   20:  		/* subf R9, R10, R9 */
		/* 82235384h case   20:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 82235384h case   20:*/		return 0x82235388;
		  /* 82235388h */ case   21:  		/* rlwinm R8, R10, 27, 5, 31 */
		/* 82235388h case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R8,regs.R10);
		/* 82235388h case   21:*/		return 0x8223538C;
		  /* 8223538Ch */ case   22:  		/* subf R9, R11, R9 */
		/* 8223538Ch case   22:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8223538Ch case   22:*/		return 0x82235390;
		  /* 82235390h */ case   23:  		/* xor R9, R9, R8 */
		/* 82235390h case   23:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82235390h case   23:*/		return 0x82235394;
		  /* 82235394h */ case   24:  		/* subf R11, R9, R11 */
		/* 82235394h case   24:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82235394h case   24:*/		return 0x82235398;
		  /* 82235398h */ case   25:  		/* rlwinm R8, R9, 29, 3, 31 */
		/* 82235398h case   25:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R8,regs.R9);
		/* 82235398h case   25:*/		return 0x8223539C;
		  /* 8223539Ch */ case   26:  		/* subf R11, R10, R11 */
		/* 8223539Ch case   26:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223539Ch case   26:*/		return 0x822353A0;
		  /* 822353A0h */ case   27:  		/* subf R10, R9, R10 */
		/* 822353A0h case   27:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 822353A0h case   27:*/		return 0x822353A4;
		  /* 822353A4h */ case   28:  		/* xor R11, R11, R8 */
		/* 822353A4h case   28:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 822353A4h case   28:*/		return 0x822353A8;
		  /* 822353A8h */ case   29:  		/* subf R10, R11, R10 */
		/* 822353A8h case   29:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 822353A8h case   29:*/		return 0x822353AC;
		  /* 822353ACh */ case   30:  		/* rlwinm R8, R11, 10, 0, 21 */
		/* 822353ACh case   30:*/		cpu::op::rlwinm<0,10,0,21>(regs,&regs.R8,regs.R11);
		/* 822353ACh case   30:*/		return 0x822353B0;
		  /* 822353B0h */ case   31:  		/* xor R10, R10, R8 */
		/* 822353B0h case   31:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 822353B0h case   31:*/		return 0x822353B4;
		  /* 822353B4h */ case   32:  		/* subf R9, R10, R9 */
		/* 822353B4h case   32:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 822353B4h case   32:*/		return 0x822353B8;
		  /* 822353B8h */ case   33:  		/* rlwinm R10, R10, 17, 15, 31 */
		/* 822353B8h case   33:*/		cpu::op::rlwinm<0,17,15,31>(regs,&regs.R10,regs.R10);
		/* 822353B8h case   33:*/		return 0x822353BC;
		  /* 822353BCh */ case   34:  		/* subf R11, R11, R9 */
		/* 822353BCh case   34:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 822353BCh case   34:*/		return 0x822353C0;
		  /* 822353C0h */ case   35:  		/* xor R3, R11, R10 */
		/* 822353C0h case   35:*/		cpu::op::xor<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 822353C0h case   35:*/		return 0x822353C4;
		  /* 822353C4h */ case   36:  		/* bclr 20, CR0_LT */
		/* 822353C4h case   36:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822353C4h case   36:*/		return 0x822353C8;
	}
	return 0x822353C8;
} // Block from 82235334h-822353C8h (37 instructions)

//////////////////////////////////////////////////////
// Block at 822353C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822353C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822353C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822353C8);
		  /* 822353C8h */ case    0:  		/* mfspr R12, LR */
		/* 822353C8h case    0:*/		regs.R12 = regs.LR;
		/* 822353C8h case    0:*/		return 0x822353CC;
		  /* 822353CCh */ case    1:  		/* bl -1720700 */
		/* 822353CCh case    1:*/		regs.LR = 0x822353D0; return 0x82091250;
		/* 822353CCh case    1:*/		return 0x822353D0;
		  /* 822353D0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822353D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822353D0h case    2:*/		return 0x822353D4;
		  /* 822353D4h */ case    3:  		/* lis R10, -32216 */
		/* 822353D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 822353D4h case    3:*/		return 0x822353D8;
		  /* 822353D8h */ case    4:  		/* lis R11, -32253 */
		/* 822353D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822353D8h case    4:*/		return 0x822353DC;
		  /* 822353DCh */ case    5:  		/* addi R9, R10, 8496 */
		/* 822353DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x2130);
		/* 822353DCh case    5:*/		return 0x822353E0;
	}
	return 0x822353E0;
} // Block from 822353C8h-822353E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822353E0h
// Function '?CompileWithPointSpriteReplaceModeS@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822353E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822353E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822353E0);
		  /* 822353E0h */ case    0:  		/* lis R10, -32252 */
		/* 822353E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822353E0h case    0:*/		return 0x822353E4;
		  /* 822353E4h */ case    1:  		/* mr R30, R3 */
		/* 822353E4h case    1:*/		regs.R30 = regs.R3;
		/* 822353E4h case    1:*/		return 0x822353E8;
		  /* 822353E8h */ case    2:  		/* mr R31, R4 */
		/* 822353E8h case    2:*/		regs.R31 = regs.R4;
		/* 822353E8h case    2:*/		return 0x822353EC;
		  /* 822353ECh */ case    3:  		/* mr R29, R5 */
		/* 822353ECh case    3:*/		regs.R29 = regs.R5;
		/* 822353ECh case    3:*/		return 0x822353F0;
		  /* 822353F0h */ case    4:  		/* lwz R28, <#[R9 + 8]> */
		/* 822353F0h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R9 + 0x00000008) );
		/* 822353F0h case    4:*/		return 0x822353F4;
		  /* 822353F4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 822353F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822353F4h case    5:*/		return 0x822353F8;
		  /* 822353F8h */ case    6:  		/* addi R27, R11, 27460 */
		/* 822353F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 822353F8h case    6:*/		return 0x822353FC;
		  /* 822353FCh */ case    7:  		/* addi R26, R10, 6280 */
		/* 822353FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x1888);
		/* 822353FCh case    7:*/		return 0x82235400;
		  /* 82235400h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 82235400h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82235420;  }
		/* 82235400h case    8:*/		return 0x82235404;
		  /* 82235404h */ case    9:  		/* lis R11, -32252 */
		/* 82235404h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235404h case    9:*/		return 0x82235408;
		  /* 82235408h */ case   10:  		/* mr R6, R26 */
		/* 82235408h case   10:*/		regs.R6 = regs.R26;
		/* 82235408h case   10:*/		return 0x8223540C;
		  /* 8223540Ch */ case   11:  		/* addi R5, R11, -8448 */
		/* 8223540Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8223540Ch case   11:*/		return 0x82235410;
		  /* 82235410h */ case   12:  		/* mr R4, R27 */
		/* 82235410h case   12:*/		regs.R4 = regs.R27;
		/* 82235410h case   12:*/		return 0x82235414;
		  /* 82235414h */ case   13:  		/* li R7, 1690 */
		/* 82235414h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x69A);
		/* 82235414h case   13:*/		return 0x82235418;
		  /* 82235418h */ case   14:  		/* li R3, 0 */
		/* 82235418h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235418h case   14:*/		return 0x8223541C;
		  /* 8223541Ch */ case   15:  		/* bl -907284 */
		/* 8223541Ch case   15:*/		regs.LR = 0x82235420; return 0x82157C08;
		/* 8223541Ch case   15:*/		return 0x82235420;
	}
	return 0x82235420;
} // Block from 822353E0h-82235420h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82235420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235420);
		  /* 82235420h */ case    0:  		/* li R4, 0 */
		/* 82235420h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82235420h case    0:*/		return 0x82235424;
		  /* 82235424h */ case    1:  		/* mr R3, R30 */
		/* 82235424h case    1:*/		regs.R3 = regs.R30;
		/* 82235424h case    1:*/		return 0x82235428;
		  /* 82235428h */ case    2:  		/* bl -88056 */
		/* 82235428h case    2:*/		regs.LR = 0x8223542C; return 0x8221FC30;
		/* 82235428h case    2:*/		return 0x8223542C;
		  /* 8223542Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8223542Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8223542Ch case    3:*/		return 0x82235430;
		  /* 82235430h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 82235430h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8223544C;  }
		/* 82235430h case    4:*/		return 0x82235434;
		  /* 82235434h */ case    5:  		/* lis R11, -32252 */
		/* 82235434h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235434h case    5:*/		return 0x82235438;
		  /* 82235438h */ case    6:  		/* mr R6, R26 */
		/* 82235438h case    6:*/		regs.R6 = regs.R26;
		/* 82235438h case    6:*/		return 0x8223543C;
		  /* 8223543Ch */ case    7:  		/* addi R5, R11, 6384 */
		/* 8223543Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x18F0);
		/* 8223543Ch case    7:*/		return 0x82235440;
		  /* 82235440h */ case    8:  		/* mr R4, R27 */
		/* 82235440h case    8:*/		regs.R4 = regs.R27;
		/* 82235440h case    8:*/		return 0x82235444;
		  /* 82235444h */ case    9:  		/* li R7, 1691 */
		/* 82235444h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x69B);
		/* 82235444h case    9:*/		return 0x82235448;
		  /* 82235448h */ case   10:  		/* bl -907328 */
		/* 82235448h case   10:*/		regs.LR = 0x8223544C; return 0x82157C08;
		/* 82235448h case   10:*/		return 0x8223544C;
	}
	return 0x8223544C;
} // Block from 82235420h-8223544Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223544Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223544C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223544C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223544C);
		  /* 8223544Ch */ case    0:  		/* rlwinm R11, R31, 4, 0, 27 */
		/* 8223544Ch case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R31);
		/* 8223544Ch case    0:*/		return 0x82235450;
		  /* 82235450h */ case    1:  		/* mr R3, R30 */
		/* 82235450h case    1:*/		regs.R3 = regs.R30;
		/* 82235450h case    1:*/		return 0x82235454;
		  /* 82235454h */ case    2:  		/* add R31, R11, R28 */
		/* 82235454h case    2:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R28);
		/* 82235454h case    2:*/		return 0x82235458;
		  /* 82235458h */ case    3:  		/* lwzx R4, <#[R11 + R28]> */
		/* 82235458h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82235458h case    3:*/		return 0x8223545C;
		  /* 8223545Ch */ case    4:  		/* bl -88108 */
		/* 8223545Ch case    4:*/		regs.LR = 0x82235460; return 0x8221FC30;
		/* 8223545Ch case    4:*/		return 0x82235460;
		  /* 82235460h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 82235460h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82235460h case    5:*/		return 0x82235464;
		  /* 82235464h */ case    6:  		/* lwz R10, <#[R31 + 8]> */
		/* 82235464h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82235464h case    6:*/		return 0x82235468;
		  /* 82235468h */ case    7:  		/* addi R11, R11, 2 */
		/* 82235468h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82235468h case    7:*/		return 0x8223546C;
		  /* 8223546Ch */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8223546Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8223546Ch case    8:*/		return 0x82235470;
		  /* 82235470h */ case    9:  		/* add R11, R3, R11 */
		/* 82235470h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82235470h case    9:*/		return 0x82235474;
		  /* 82235474h */ case   10:  		/* mr R3, R30 */
		/* 82235474h case   10:*/		regs.R3 = regs.R30;
		/* 82235474h case   10:*/		return 0x82235478;
		  /* 82235478h */ case   11:  		/* lwz R9, <#[R11]> */
		/* 82235478h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82235478h case   11:*/		return 0x8223547C;
		  /* 8223547Ch */ case   12:  		/* andc R10, R9, R10 */
		/* 8223547Ch case   12:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8223547Ch case   12:*/		return 0x82235480;
		  /* 82235480h */ case   13:  		/* stw R10, <#[R11]> */
		/* 82235480h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82235480h case   13:*/		return 0x82235484;
		  /* 82235484h */ case   14:  		/* lwz R4, <#[R31]> */
		/* 82235484h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82235484h case   14:*/		return 0x82235488;
		  /* 82235488h */ case   15:  		/* bl -88152 */
		/* 82235488h case   15:*/		regs.LR = 0x8223548C; return 0x8221FC30;
		/* 82235488h case   15:*/		return 0x8223548C;
		  /* 8223548Ch */ case   16:  		/* lwz R11, <#[R31 + 4]> */
		/* 8223548Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8223548Ch case   16:*/		return 0x82235490;
		  /* 82235490h */ case   17:  		/* addi R11, R11, 2 */
		/* 82235490h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82235490h case   17:*/		return 0x82235494;
		  /* 82235494h */ case   18:  		/* lwz R10, <#[R31 + 12]> */
		/* 82235494h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82235494h case   18:*/		return 0x82235498;
		  /* 82235498h */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 82235498h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82235498h case   19:*/		return 0x8223549C;
		  /* 8223549Ch */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8223549Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8223549Ch case   20:*/		return 0x822354A0;
		  /* 822354A0h */ case   21:  		/* slw R10, R29, R10 */
		/* 822354A0h case   21:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 822354A0h case   21:*/		return 0x822354A4;
		  /* 822354A4h */ case   22:  		/* add R11, R3, R11 */
		/* 822354A4h case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 822354A4h case   22:*/		return 0x822354A8;
		  /* 822354A8h */ case   23:  		/* and R10, R10, R9 */
		/* 822354A8h case   23:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 822354A8h case   23:*/		return 0x822354AC;
		  /* 822354ACh */ case   24:  		/* lwz R9, <#[R11]> */
		/* 822354ACh case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822354ACh case   24:*/		return 0x822354B0;
		  /* 822354B0h */ case   25:  		/* or R10, R10, R9 */
		/* 822354B0h case   25:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 822354B0h case   25:*/		return 0x822354B4;
		  /* 822354B4h */ case   26:  		/* stw R10, <#[R11]> */
		/* 822354B4h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822354B4h case   26:*/		return 0x822354B8;
		  /* 822354B8h */ case   27:  		/* addi R1, R1, 144 */
		/* 822354B8h case   27:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 822354B8h case   27:*/		return 0x822354BC;
		  /* 822354BCh */ case   28:  		/* b -1720860 */
		/* 822354BCh case   28:*/		return 0x820912A0;
		/* 822354BCh case   28:*/		return 0x822354C0;
	}
	return 0x822354C0;
} // Block from 8223544Ch-822354C0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 822354C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822354C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822354C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822354C0);
		  /* 822354C0h */ case    0:  		/* mfspr R12, LR */
		/* 822354C0h case    0:*/		regs.R12 = regs.LR;
		/* 822354C0h case    0:*/		return 0x822354C4;
		  /* 822354C4h */ case    1:  		/* bl -1720976 */
		/* 822354C4h case    1:*/		regs.LR = 0x822354C8; return 0x82091234;
		/* 822354C4h case    1:*/		return 0x822354C8;
		  /* 822354C8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 822354C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 822354C8h case    2:*/		return 0x822354CC;
		  /* 822354CCh */ case    3:  		/* mr R31, R3 */
		/* 822354CCh case    3:*/		regs.R31 = regs.R3;
		/* 822354CCh case    3:*/		return 0x822354D0;
		  /* 822354D0h */ case    4:  		/* mr R3, R5 */
		/* 822354D0h case    4:*/		regs.R3 = regs.R5;
		/* 822354D0h case    4:*/		return 0x822354D4;
		  /* 822354D4h */ case    5:  		/* mr R28, R4 */
		/* 822354D4h case    5:*/		regs.R28 = regs.R4;
		/* 822354D4h case    5:*/		return 0x822354D8;
		  /* 822354D8h */ case    6:  		/* mr R29, R5 */
		/* 822354D8h case    6:*/		regs.R29 = regs.R5;
		/* 822354D8h case    6:*/		return 0x822354DC;
		  /* 822354DCh */ case    7:  		/* mr R25, R6 */
		/* 822354DCh case    7:*/		regs.R25 = regs.R6;
		/* 822354DCh case    7:*/		return 0x822354E0;
		  /* 822354E0h */ case    8:  		/* mr R21, R7 */
		/* 822354E0h case    8:*/		regs.R21 = regs.R7;
		/* 822354E0h case    8:*/		return 0x822354E4;
		  /* 822354E4h */ case    9:  		/* mr R20, R8 */
		/* 822354E4h case    9:*/		regs.R20 = regs.R8;
		/* 822354E4h case    9:*/		return 0x822354E8;
		  /* 822354E8h */ case   10:  		/* bl 120528 */
		/* 822354E8h case   10:*/		regs.LR = 0x822354EC; return 0x82252BB8;
		/* 822354E8h case   10:*/		return 0x822354EC;
		  /* 822354ECh */ case   11:  		/* lis R11, -32253 */
		/* 822354ECh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822354ECh case   11:*/		return 0x822354F0;
		  /* 822354F0h */ case   12:  		/* lis R10, -32252 */
		/* 822354F0h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822354F0h case   12:*/		return 0x822354F4;
		  /* 822354F4h */ case   13:  		/* or. R19, R3, R3 */
		/* 822354F4h case   13:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 822354F4h case   13:*/		return 0x822354F8;
		  /* 822354F8h */ case   14:  		/* addi R24, R11, 27460 */
		/* 822354F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 822354F8h case   14:*/		return 0x822354FC;
		  /* 822354FCh */ case   15:  		/* addi R23, R10, 6280 */
		/* 822354FCh case   15:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x1888);
		/* 822354FCh case   15:*/		return 0x82235500;
		  /* 82235500h */ case   16:  		/* bc 4, CR0_EQ, 32 */
		/* 82235500h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82235520;  }
		/* 82235500h case   16:*/		return 0x82235504;
		  /* 82235504h */ case   17:  		/* lis R11, -32252 */
		/* 82235504h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235504h case   17:*/		return 0x82235508;
		  /* 82235508h */ case   18:  		/* mr R6, R23 */
		/* 82235508h case   18:*/		regs.R6 = regs.R23;
		/* 82235508h case   18:*/		return 0x8223550C;
		  /* 8223550Ch */ case   19:  		/* addi R5, R11, 6424 */
		/* 8223550Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1918);
		/* 8223550Ch case   19:*/		return 0x82235510;
		  /* 82235510h */ case   20:  		/* mr R4, R24 */
		/* 82235510h case   20:*/		regs.R4 = regs.R24;
		/* 82235510h case   20:*/		return 0x82235514;
		  /* 82235514h */ case   21:  		/* li R7, 1730 */
		/* 82235514h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x6C2);
		/* 82235514h case   21:*/		return 0x82235518;
		  /* 82235518h */ case   22:  		/* li R3, 0 */
		/* 82235518h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235518h case   22:*/		return 0x8223551C;
		  /* 8223551Ch */ case   23:  		/* bl -907540 */
		/* 8223551Ch case   23:*/		regs.LR = 0x82235520; return 0x82157C08;
		/* 8223551Ch case   23:*/		return 0x82235520;
	}
	return 0x82235520;
} // Block from 822354C0h-82235520h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82235520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235520);
		  /* 82235520h */ case    0:  		/* lis R11, -32256 */
		/* 82235520h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82235520h case    0:*/		return 0x82235524;
		  /* 82235524h */ case    1:  		/* lfs FR13, <#[R31]> */
		/* 82235524h case    1:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R31 + 0x00000000) );
		/* 82235524h case    1:*/		return 0x82235528;
		  /* 82235528h */ case    2:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 82235528h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 82235528h case    2:*/		return 0x8223552C;
		  /* 8223552Ch */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8223552Ch case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8223552Ch case    3:*/		return 0x82235530;
		  /* 82235530h */ case    4:  		/* bc 4, CR6_EQ, 48 */
		/* 82235530h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82235560;  }
		/* 82235530h case    4:*/		return 0x82235534;
		  /* 82235534h */ case    5:  		/* lfs FR13, <#[R31 + 4]> */
		/* 82235534h case    5:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R31 + 0x00000004) );
		/* 82235534h case    5:*/		return 0x82235538;
		  /* 82235538h */ case    6:  		/* fcmpu CR6, FR13, FR0 */
		/* 82235538h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82235538h case    6:*/		return 0x8223553C;
		  /* 8223553Ch */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 8223553Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82235560;  }
		/* 8223553Ch case    7:*/		return 0x82235540;
		  /* 82235540h */ case    8:  		/* lfs FR13, <#[R31 + 8]> */
		/* 82235540h case    8:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R31 + 0x00000008) );
		/* 82235540h case    8:*/		return 0x82235544;
		  /* 82235544h */ case    9:  		/* fcmpu CR6, FR13, FR0 */
		/* 82235544h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82235544h case    9:*/		return 0x82235548;
		  /* 82235548h */ case   10:  		/* bc 4, CR6_EQ, 24 */
		/* 82235548h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82235560;  }
		/* 82235548h case   10:*/		return 0x8223554C;
		  /* 8223554Ch */ case   11:  		/* lfs FR13, <#[R31 + 12]> */
		/* 8223554Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223554Ch case   11:*/		return 0x82235550;
		  /* 82235550h */ case   12:  		/* fcmpu CR6, FR13, FR0 */
		/* 82235550h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82235550h case   12:*/		return 0x82235554;
		  /* 82235554h */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 82235554h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82235560;  }
		/* 82235554h case   13:*/		return 0x82235558;
		  /* 82235558h */ case   14:  		/* li R11, 0 */
		/* 82235558h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82235558h case   14:*/		return 0x8223555C;
		  /* 8223555Ch */ case   15:  		/* b 296 */
		/* 8223555Ch case   15:*/		return 0x82235684;
		/* 8223555Ch case   15:*/		return 0x82235560;
	}
	return 0x82235560;
} // Block from 82235520h-82235560h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82235560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235560);
		  /* 82235560h */ case    0:  		/* mr R4, R29 */
		/* 82235560h case    0:*/		regs.R4 = regs.R29;
		/* 82235560h case    0:*/		return 0x82235564;
		  /* 82235564h */ case    1:  		/* addi R3, R1, 96 */
		/* 82235564h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82235564h case    1:*/		return 0x82235568;
		  /* 82235568h */ case    2:  		/* bl 121008 */
		/* 82235568h case    2:*/		regs.LR = 0x8223556C; return 0x82252E18;
		/* 82235568h case    2:*/		return 0x8223556C;
		  /* 8223556Ch */ case    3:  		/* lis R11, -32252 */
		/* 8223556Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223556Ch case    3:*/		return 0x82235570;
	}
	return 0x82235570;
} // Block from 82235560h-82235570h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82235570h
// Function '?CompileWithPointSpriteReplaceModeR@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@PAUCompAState@1@HPAU_CS_COMPILED_SHADER@1@P6AXPAXPBDZZ2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235570);
		  /* 82235570h */ case    0:  		/* or. R30, R3, R3 */
		/* 82235570h case    0:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82235570h case    0:*/		return 0x82235574;
		  /* 82235574h */ case    1:  		/* addi R22, R11, 6404 */
		/* 82235574h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x1904);
		/* 82235574h case    1:*/		return 0x82235578;
		  /* 82235578h */ case    2:  		/* bc 12, CR0_GT, 28 */
		/* 82235578h case    2:*/		if ( regs.CR[0].gt ) { return 0x82235594;  }
		/* 82235578h case    2:*/		return 0x8223557C;
		  /* 8223557Ch */ case    3:  		/* mr R6, R23 */
		/* 8223557Ch case    3:*/		regs.R6 = regs.R23;
		/* 8223557Ch case    3:*/		return 0x82235580;
		  /* 82235580h */ case    4:  		/* mr R5, R22 */
		/* 82235580h case    4:*/		regs.R5 = regs.R22;
		/* 82235580h case    4:*/		return 0x82235584;
		  /* 82235584h */ case    5:  		/* mr R4, R24 */
		/* 82235584h case    5:*/		regs.R4 = regs.R24;
		/* 82235584h case    5:*/		return 0x82235588;
		  /* 82235588h */ case    6:  		/* li R7, 1750 */
		/* 82235588h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6D6);
		/* 82235588h case    6:*/		return 0x8223558C;
		  /* 8223558Ch */ case    7:  		/* li R3, 0 */
		/* 8223558Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223558Ch case    7:*/		return 0x82235590;
		  /* 82235590h */ case    8:  		/* bl -907656 */
		/* 82235590h case    8:*/		regs.LR = 0x82235594; return 0x82157C08;
		/* 82235590h case    8:*/		return 0x82235594;
	}
	return 0x82235594;
} // Block from 82235570h-82235594h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235594);
		  /* 82235594h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 82235594h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82235594h case    0:*/		return 0x82235598;
		  /* 82235598h */ case    1:  		/* bc 4, CR6_GT, 56 */
		/* 82235598h case    1:*/		if ( !regs.CR[6].gt ) { return 0x822355D0;  }
		/* 82235598h case    1:*/		return 0x8223559C;
		  /* 8223559Ch */ case    2:  		/* addi R11, R1, 96 */
		/* 8223559Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8223559Ch case    2:*/		return 0x822355A0;
		  /* 822355A0h */ case    3:  		/* addi R10, R1, 80 */
		/* 822355A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 822355A0h case    3:*/		return 0x822355A4;
		  /* 822355A4h */ case    4:  		/* subf R27, R31, R11 */
		/* 822355A4h case    4:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R31,regs.R11);
		/* 822355A4h case    4:*/		return 0x822355A8;
		  /* 822355A8h */ case    5:  		/* subf R26, R31, R10 */
		/* 822355A8h case    5:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R31,regs.R10);
		/* 822355A8h case    5:*/		return 0x822355AC;
		  /* 822355ACh */ case    6:  		/* mr R6, R25 */
		/* 822355ACh case    6:*/		regs.R6 = regs.R25;
		/* 822355ACh case    6:*/		return 0x822355B0;
		  /* 822355B0h */ case    7:  		/* lwzx R5, <#[R27 + R31]> */
		/* 822355B0h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + regs.R31 + 0x00000000) );
		/* 822355B0h case    7:*/		return 0x822355B4;
		  /* 822355B4h */ case    8:  		/* li R4, 128 */
		/* 822355B4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x80);
		/* 822355B4h case    8:*/		return 0x822355B8;
		  /* 822355B8h */ case    9:  		/* lfs FR1, <#[R31]> */
		/* 822355B8h case    9:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 822355B8h case    9:*/		return 0x822355BC;
		  /* 822355BCh */ case   10:  		/* bl 122084 */
		/* 822355BCh case   10:*/		regs.LR = 0x822355C0; return 0x822532A0;
		/* 822355BCh case   10:*/		return 0x822355C0;
		  /* 822355C0h */ case   11:  		/* stwx R3, <#[R26 + R31]> */
		/* 822355C0h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + regs.R31 + 0x00000000) );
		/* 822355C0h case   11:*/		return 0x822355C4;
		  /* 822355C4h */ case   12:  		/* addic. R30, R30, -1 */
		/* 822355C4h case   12:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 822355C4h case   12:*/		return 0x822355C8;
		  /* 822355C8h */ case   13:  		/* addi R31, R31, 4 */
		/* 822355C8h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 822355C8h case   13:*/		return 0x822355CC;
		  /* 822355CCh */ case   14:  		/* bc 4, CR0_EQ, -32 */
		/* 822355CCh case   14:*/		if ( !regs.CR[0].eq ) { return 0x822355AC;  }
		/* 822355CCh case   14:*/		return 0x822355D0;
	}
	return 0x822355D0;
} // Block from 82235594h-822355D0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822355D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822355D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822355D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822355D0);
		  /* 822355D0h */ case    0:  		/* mr R5, R20 */
		/* 822355D0h case    0:*/		regs.R5 = regs.R20;
		/* 822355D0h case    0:*/		return 0x822355D4;
		  /* 822355D4h */ case    1:  		/* mr R4, R29 */
		/* 822355D4h case    1:*/		regs.R4 = regs.R29;
		/* 822355D4h case    1:*/		return 0x822355D8;
		  /* 822355D8h */ case    2:  		/* addi R3, R1, 80 */
		/* 822355D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 822355D8h case    2:*/		return 0x822355DC;
		  /* 822355DCh */ case    3:  		/* bl 121692 */
		/* 822355DCh case    3:*/		regs.LR = 0x822355E0; return 0x82253138;
		/* 822355DCh case    3:*/		return 0x822355E0;
		  /* 822355E0h */ case    4:  		/* mr R6, R21 */
		/* 822355E0h case    4:*/		regs.R6 = regs.R21;
		/* 822355E0h case    4:*/		return 0x822355E4;
		  /* 822355E4h */ case    5:  		/* mr R5, R29 */
		/* 822355E4h case    5:*/		regs.R5 = regs.R29;
		/* 822355E4h case    5:*/		return 0x822355E8;
		  /* 822355E8h */ case    6:  		/* mr R4, R28 */
		/* 822355E8h case    6:*/		regs.R4 = regs.R28;
		/* 822355E8h case    6:*/		return 0x822355EC;
		  /* 822355ECh */ case    7:  		/* addi R3, R1, 80 */
		/* 822355ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 822355ECh case    7:*/		return 0x822355F0;
		  /* 822355F0h */ case    8:  		/* bl 121616 */
		/* 822355F0h case    8:*/		regs.LR = 0x822355F4; return 0x82253100;
		/* 822355F0h case    8:*/		return 0x822355F4;
		  /* 822355F4h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 822355F4h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822355F4h case    9:*/		return 0x822355F8;
		  /* 822355F8h */ case   10:  		/* bc 12, CR0_GT, 28 */
		/* 822355F8h case   10:*/		if ( regs.CR[0].gt ) { return 0x82235614;  }
		/* 822355F8h case   10:*/		return 0x822355FC;
		  /* 822355FCh */ case   11:  		/* mr R6, R23 */
		/* 822355FCh case   11:*/		regs.R6 = regs.R23;
		/* 822355FCh case   11:*/		return 0x82235600;
		  /* 82235600h */ case   12:  		/* mr R5, R22 */
		/* 82235600h case   12:*/		regs.R5 = regs.R22;
		/* 82235600h case   12:*/		return 0x82235604;
		  /* 82235604h */ case   13:  		/* mr R4, R24 */
		/* 82235604h case   13:*/		regs.R4 = regs.R24;
		/* 82235604h case   13:*/		return 0x82235608;
		  /* 82235608h */ case   14:  		/* li R7, 1763 */
		/* 82235608h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x6E3);
		/* 82235608h case   14:*/		return 0x8223560C;
		  /* 8223560Ch */ case   15:  		/* li R3, 0 */
		/* 8223560Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223560Ch case   15:*/		return 0x82235610;
		  /* 82235610h */ case   16:  		/* bl -907784 */
		/* 82235610h case   16:*/		regs.LR = 0x82235614; return 0x82157C08;
		/* 82235610h case   16:*/		return 0x82235614;
	}
	return 0x82235614;
} // Block from 822355D0h-82235614h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82235614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235614);
		  /* 82235614h */ case    0:  		/* cmplwi CR6, R19, 1 */
		/* 82235614h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000001);
		/* 82235614h case    0:*/		return 0x82235618;
		  /* 82235618h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 82235618h case    1:*/		if ( regs.CR[6].eq ) { return 0x82235664;  }
		/* 82235618h case    1:*/		return 0x8223561C;
		  /* 8223561Ch */ case    2:  		/* cmplwi CR6, R19, 2 */
		/* 8223561Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000002);
		/* 8223561Ch case    2:*/		return 0x82235620;
		  /* 82235620h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82235620h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223564C;  }
		/* 82235620h case    3:*/		return 0x82235624;
		  /* 82235624h */ case    4:  		/* cmplwi CR6, R19, 4 */
		/* 82235624h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000004);
		/* 82235624h case    4:*/		return 0x82235628;
		  /* 82235628h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82235628h case    5:*/		if ( regs.CR[6].eq ) { return 0x82235644;  }
		/* 82235628h case    5:*/		return 0x8223562C;
		  /* 8223562Ch */ case    6:  		/* cmplwi CR6, R19, 8 */
		/* 8223562Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000008);
		/* 8223562Ch case    6:*/		return 0x82235630;
		  /* 82235630h */ case    7:  		/* bc 4, CR6_EQ, 100 */
		/* 82235630h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82235694;  }
		/* 82235630h case    7:*/		return 0x82235634;
		  /* 82235634h */ case    8:  		/* lwz R10, <#[R28 + 4]> */
		/* 82235634h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 82235634h case    8:*/		return 0x82235638;
		  /* 82235638h */ case    9:  		/* lwz R11, <#[R28]> */
		/* 82235638h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82235638h case    9:*/		return 0x8223563C;
		  /* 8223563Ch */ case   10:  		/* stw R10, <#[R28 + 12]> */
		/* 8223563Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 8223563Ch case   10:*/		return 0x82235640;
		  /* 82235640h */ case   11:  		/* b 80 */
		/* 82235640h case   11:*/		return 0x82235690;
		/* 82235640h case   11:*/		return 0x82235644;
	}
	return 0x82235644;
} // Block from 82235614h-82235644h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82235644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235644);
		  /* 82235644h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82235644h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82235644h case    0:*/		return 0x82235648;
		  /* 82235648h */ case    1:  		/* b 64 */
		/* 82235648h case    1:*/		return 0x82235688;
		/* 82235648h case    1:*/		return 0x8223564C;
	}
	return 0x8223564C;
} // Block from 82235644h-8223564Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223564Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223564C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223564C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223564C);
		  /* 8223564Ch */ case    0:  		/* li R11, 0 */
		/* 8223564Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223564Ch case    0:*/		return 0x82235650;
		  /* 82235650h */ case    1:  		/* sth R11, <#[R28]> */
		/* 82235650h case    1:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82235650h case    1:*/		return 0x82235654;
		  /* 82235654h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 82235654h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82235654h case    2:*/		return 0x82235658;
		  /* 82235658h */ case    3:  		/* mr R10, R11 */
		/* 82235658h case    3:*/		regs.R10 = regs.R11;
		/* 82235658h case    3:*/		return 0x8223565C;
		  /* 8223565Ch */ case    4:  		/* rlwinm R10, R10, 16, 0, 15 */
		/* 8223565Ch case    4:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R10);
		/* 8223565Ch case    4:*/		return 0x82235660;
		  /* 82235660h */ case    5:  		/* b 32 */
		/* 82235660h case    5:*/		return 0x82235680;
		/* 82235660h case    5:*/		return 0x82235664;
	}
	return 0x82235664;
} // Block from 8223564Ch-82235664h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82235664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235664);
		  /* 82235664h */ case    0:  		/* lbz R11, <#[R28 + 3]> */
		/* 82235664h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000003) );
		/* 82235664h case    0:*/		return 0x82235668;
		  /* 82235668h */ case    1:  		/* rlwinm R10, R11, 8, 0, 31 */
		/* 82235668h case    1:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R10,regs.R11);
		/* 82235668h case    1:*/		return 0x8223566C;
		  /* 8223566Ch */ case    2:  		/* or R10, R10, R11 */
		/* 8223566Ch case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223566Ch case    2:*/		return 0x82235670;
		  /* 82235670h */ case    3:  		/* stw R11, <#[R28]> */
		/* 82235670h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82235670h case    3:*/		return 0x82235674;
		  /* 82235674h */ case    4:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 82235674h case    4:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 82235674h case    4:*/		return 0x82235678;
		  /* 82235678h */ case    5:  		/* or R10, R10, R11 */
		/* 82235678h case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82235678h case    5:*/		return 0x8223567C;
		  /* 8223567Ch */ case    6:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 8223567Ch case    6:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 8223567Ch case    6:*/		return 0x82235680;
	}
	return 0x82235680;
} // Block from 82235664h-82235680h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82235680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235680);
		  /* 82235680h */ case    0:  		/* or R11, R10, R11 */
		/* 82235680h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82235680h case    0:*/		return 0x82235684;
	}
	return 0x82235684;
} // Block from 82235680h-82235684h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235684);
		  /* 82235684h */ case    0:  		/* stw R11, <#[R28]> */
		/* 82235684h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82235684h case    0:*/		return 0x82235688;
	}
	return 0x82235688;
} // Block from 82235684h-82235688h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235688);
		  /* 82235688h */ case    0:  		/* stw R11, <#[R28 + 12]> */
		/* 82235688h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 82235688h case    0:*/		return 0x8223568C;
		  /* 8223568Ch */ case    1:  		/* stw R11, <#[R28 + 4]> */
		/* 8223568Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8223568Ch case    1:*/		return 0x82235690;
	}
	return 0x82235690;
} // Block from 82235688h-82235690h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235690);
		  /* 82235690h */ case    0:  		/* stw R11, <#[R28 + 8]> */
		/* 82235690h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82235690h case    0:*/		return 0x82235694;
	}
	return 0x82235694;
} // Block from 82235690h-82235694h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235694);
		  /* 82235694h */ case    0:  		/* mr R3, R19 */
		/* 82235694h case    0:*/		regs.R3 = regs.R19;
		/* 82235694h case    0:*/		return 0x82235698;
		  /* 82235698h */ case    1:  		/* addi R1, R1, 224 */
		/* 82235698h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 82235698h case    1:*/		return 0x8223569C;
		  /* 8223569Ch */ case    2:  		/* b -1721368 */
		/* 8223569Ch case    2:*/		return 0x82091284;
		/* 8223569Ch case    2:*/		return 0x822356A0;
	}
	return 0x822356A0;
} // Block from 82235694h-822356A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822356A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822356A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822356A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822356A0);
		  /* 822356A0h */ case    0:  		/* mfspr R12, LR */
		/* 822356A0h case    0:*/		regs.R12 = regs.LR;
		/* 822356A0h case    0:*/		return 0x822356A4;
		  /* 822356A4h */ case    1:  		/* bl -1721436 */
		/* 822356A4h case    1:*/		regs.LR = 0x822356A8; return 0x82091248;
		/* 822356A4h case    1:*/		return 0x822356A8;
		  /* 822356A8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822356A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822356A8h case    2:*/		return 0x822356AC;
		  /* 822356ACh */ case    3:  		/* mr R31, R3 */
		/* 822356ACh case    3:*/		regs.R31 = regs.R3;
		/* 822356ACh case    3:*/		return 0x822356B0;
		  /* 822356B0h */ case    4:  		/* mr R29, R4 */
		/* 822356B0h case    4:*/		regs.R29 = regs.R4;
		/* 822356B0h case    4:*/		return 0x822356B4;
		  /* 822356B4h */ case    5:  		/* mr R25, R5 */
		/* 822356B4h case    5:*/		regs.R25 = regs.R5;
		/* 822356B4h case    5:*/		return 0x822356B8;
		  /* 822356B8h */ case    6:  		/* cmpwi CR6, R4, -1 */
		/* 822356B8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 822356B8h case    6:*/		return 0x822356BC;
		  /* 822356BCh */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 822356BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x822356FC;  }
		/* 822356BCh case    7:*/		return 0x822356C0;
		  /* 822356C0h */ case    8:  		/* mr R5, R4 */
		/* 822356C0h case    8:*/		regs.R5 = regs.R4;
		/* 822356C0h case    8:*/		return 0x822356C4;
		  /* 822356C4h */ case    9:  		/* li R4, 34 */
		/* 822356C4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 822356C4h case    9:*/		return 0x822356C8;
		  /* 822356C8h */ case   10:  		/* bl -884360 */
		/* 822356C8h case   10:*/		regs.LR = 0x822356CC; return 0x8215D840;
		/* 822356C8h case   10:*/		return 0x822356CC;
		  /* 822356CCh */ case   11:  		/* mr R30, R3 */
		/* 822356CCh case   11:*/		regs.R30 = regs.R3;
		/* 822356CCh case   11:*/		return 0x822356D0;
		  /* 822356D0h */ case   12:  		/* mr R5, R29 */
		/* 822356D0h case   12:*/		regs.R5 = regs.R29;
		/* 822356D0h case   12:*/		return 0x822356D4;
		  /* 822356D4h */ case   13:  		/* li R4, 35 */
		/* 822356D4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 822356D4h case   13:*/		return 0x822356D8;
		  /* 822356D8h */ case   14:  		/* mr R3, R31 */
		/* 822356D8h case   14:*/		regs.R3 = regs.R31;
		/* 822356D8h case   14:*/		return 0x822356DC;
		  /* 822356DCh */ case   15:  		/* bl -884380 */
		/* 822356DCh case   15:*/		regs.LR = 0x822356E0; return 0x8215D840;
		/* 822356DCh case   15:*/		return 0x822356E0;
		  /* 822356E0h */ case   16:  		/* mr R28, R3 */
		/* 822356E0h case   16:*/		regs.R28 = regs.R3;
		/* 822356E0h case   16:*/		return 0x822356E4;
		  /* 822356E4h */ case   17:  		/* mr R5, R29 */
		/* 822356E4h case   17:*/		regs.R5 = regs.R29;
		/* 822356E4h case   17:*/		return 0x822356E8;
		  /* 822356E8h */ case   18:  		/* li R4, 36 */
		/* 822356E8h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 822356E8h case   18:*/		return 0x822356EC;
		  /* 822356ECh */ case   19:  		/* mr R3, R31 */
		/* 822356ECh case   19:*/		regs.R3 = regs.R31;
		/* 822356ECh case   19:*/		return 0x822356F0;
		  /* 822356F0h */ case   20:  		/* bl -884400 */
		/* 822356F0h case   20:*/		regs.LR = 0x822356F4; return 0x8215D840;
		/* 822356F0h case   20:*/		return 0x822356F4;
		  /* 822356F4h */ case   21:  		/* mr R24, R3 */
		/* 822356F4h case   21:*/		regs.R24 = regs.R3;
		/* 822356F4h case   21:*/		return 0x822356F8;
		  /* 822356F8h */ case   22:  		/* b 40 */
		/* 822356F8h case   22:*/		return 0x82235720;
		/* 822356F8h case   22:*/		return 0x822356FC;
	}
	return 0x822356FC;
} // Block from 822356A0h-822356FCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 822356FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822356FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822356FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822356FC);
		  /* 822356FCh */ case    0:  		/* li R4, 960 */
		/* 822356FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3C0);
		/* 822356FCh case    0:*/		return 0x82235700;
	}
	return 0x82235700;
} // Block from 822356FCh-82235700h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235700h
// Function '?TST_Search@XGRAPHICS@@YAIPAU_TERNARY_SEARCH_TREE@1@QAIIPAPAU_TERNARY_NODE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235700);
		  /* 82235700h */ case    0:  		/* bl -885232 */
		/* 82235700h case    0:*/		regs.LR = 0x82235704; return 0x8215D510;
		/* 82235700h case    0:*/		return 0x82235704;
		  /* 82235704h */ case    1:  		/* mr R30, R3 */
		/* 82235704h case    1:*/		regs.R30 = regs.R3;
		/* 82235704h case    1:*/		return 0x82235708;
		  /* 82235708h */ case    2:  		/* li R4, 961 */
		/* 82235708h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x3C1);
		/* 82235708h case    2:*/		return 0x8223570C;
		  /* 8223570Ch */ case    3:  		/* mr R3, R31 */
		/* 8223570Ch case    3:*/		regs.R3 = regs.R31;
		/* 8223570Ch case    3:*/		return 0x82235710;
		  /* 82235710h */ case    4:  		/* bl -885248 */
		/* 82235710h case    4:*/		regs.LR = 0x82235714; return 0x8215D510;
		/* 82235710h case    4:*/		return 0x82235714;
		  /* 82235714h */ case    5:  		/* lis R24, 770 */
		/* 82235714h case    5:*/		cpu::op::lis<0>(regs,&regs.R24,0x302);
		/* 82235714h case    5:*/		return 0x82235718;
		  /* 82235718h */ case    6:  		/* mr R28, R3 */
		/* 82235718h case    6:*/		regs.R28 = regs.R3;
		/* 82235718h case    6:*/		return 0x8223571C;
		  /* 8223571Ch */ case    7:  		/* ori R24, R24, 256 */
		/* 8223571Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R24,0x100);
		/* 8223571Ch case    7:*/		return 0x82235720;
	}
	return 0x82235720;
} // Block from 82235700h-82235720h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82235720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235720);
		  /* 82235720h */ case    0:  		/* lis R11, -32253 */
		/* 82235720h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82235720h case    0:*/		return 0x82235724;
		  /* 82235724h */ case    1:  		/* lis R10, -32252 */
		/* 82235724h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235724h case    1:*/		return 0x82235728;
		  /* 82235728h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82235728h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82235728h case    2:*/		return 0x8223572C;
		  /* 8223572Ch */ case    3:  		/* addi R27, R11, 27460 */
		/* 8223572Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8223572Ch case    3:*/		return 0x82235730;
		  /* 82235730h */ case    4:  		/* addi R26, R10, 6280 */
		/* 82235730h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x1888);
		/* 82235730h case    4:*/		return 0x82235734;
		  /* 82235734h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82235734h case    5:*/		if ( regs.CR[6].eq ) { return 0x82235740;  }
		/* 82235734h case    5:*/		return 0x82235738;
		  /* 82235738h */ case    6:  		/* cmplwi CR6, R30, 17 */
		/* 82235738h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000011);
		/* 82235738h case    6:*/		return 0x8223573C;
		  /* 8223573Ch */ case    7:  		/* bc 12, CR6_LT, 32 */
		/* 8223573Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x8223575C;  }
		/* 8223573Ch case    7:*/		return 0x82235740;
	}
	return 0x82235740;
} // Block from 82235720h-82235740h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82235740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235740);
		  /* 82235740h */ case    0:  		/* lis R11, -32252 */
		/* 82235740h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235740h case    0:*/		return 0x82235744;
		  /* 82235744h */ case    1:  		/* mr R6, R26 */
		/* 82235744h case    1:*/		regs.R6 = regs.R26;
		/* 82235744h case    1:*/		return 0x82235748;
		  /* 82235748h */ case    2:  		/* addi R5, R11, 8344 */
		/* 82235748h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2098);
		/* 82235748h case    2:*/		return 0x8223574C;
		  /* 8223574Ch */ case    3:  		/* mr R4, R27 */
		/* 8223574Ch case    3:*/		regs.R4 = regs.R27;
		/* 8223574Ch case    3:*/		return 0x82235750;
		  /* 82235750h */ case    4:  		/* li R7, 321 */
		/* 82235750h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x141);
		/* 82235750h case    4:*/		return 0x82235754;
		  /* 82235754h */ case    5:  		/* li R3, 0 */
		/* 82235754h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235754h case    5:*/		return 0x82235758;
		  /* 82235758h */ case    6:  		/* bl -908112 */
		/* 82235758h case    6:*/		regs.LR = 0x8223575C; return 0x82157C08;
		/* 82235758h case    6:*/		return 0x8223575C;
	}
	return 0x8223575C;
} // Block from 82235740h-8223575Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223575Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223575C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223575C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223575C);
		  /* 8223575Ch */ case    0:  		/* rlwinm R29, R28, 0, 24, 31 */
		/* 8223575Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R29,regs.R28);
		/* 8223575Ch case    0:*/		return 0x82235760;
		  /* 82235760h */ case    1:  		/* lis R11, -32252 */
		/* 82235760h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235760h case    1:*/		return 0x82235764;
		  /* 82235764h */ case    2:  		/* cmplwi CR6, R29, 64 */
		/* 82235764h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000040);
		/* 82235764h case    2:*/		return 0x82235768;
		  /* 82235768h */ case    3:  		/* mulli R30, R30, 12 */
		/* 82235768h case    3:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R30,0xC);
		/* 82235768h case    3:*/		return 0x8223576C;
		  /* 8223576Ch */ case    4:  		/* addi R31, R11, 5184 */
		/* 8223576Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1440);
		/* 8223576Ch case    4:*/		return 0x82235770;
		  /* 82235770h */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 82235770h case    5:*/		if ( !regs.CR[6].eq ) { return 0x822357B8;  }
		/* 82235770h case    5:*/		return 0x82235774;
		  /* 82235774h */ case    6:  		/* addi R11, R31, 4 */
		/* 82235774h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82235774h case    6:*/		return 0x82235778;
		  /* 82235778h */ case    7:  		/* lwzx R11, <#[R30 + R11]> */
		/* 82235778h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82235778h case    7:*/		return 0x8223577C;
		  /* 8223577Ch */ case    8:  		/* cmpwi CR6, R11, -1 */
		/* 8223577Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8223577Ch case    8:*/		return 0x82235780;
		  /* 82235780h */ case    9:  		/* stw R11, <#[R25 + 4]> */
		/* 82235780h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 82235780h case    9:*/		return 0x82235784;
		  /* 82235784h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 82235784h case   10:*/		if ( !regs.CR[6].eq ) { return 0x822357A4;  }
		/* 82235784h case   10:*/		return 0x82235788;
		  /* 82235788h */ case   11:  		/* lis R11, -32252 */
		/* 82235788h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235788h case   11:*/		return 0x8223578C;
		  /* 8223578Ch */ case   12:  		/* mr R6, R26 */
		/* 8223578Ch case   12:*/		regs.R6 = regs.R26;
		/* 8223578Ch case   12:*/		return 0x82235790;
		  /* 82235790h */ case   13:  		/* addi R5, R11, 8316 */
		/* 82235790h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x207C);
		/* 82235790h case   13:*/		return 0x82235794;
		  /* 82235794h */ case   14:  		/* mr R4, R27 */
		/* 82235794h case   14:*/		regs.R4 = regs.R27;
		/* 82235794h case   14:*/		return 0x82235798;
		  /* 82235798h */ case   15:  		/* li R7, 331 */
		/* 82235798h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x14B);
		/* 82235798h case   15:*/		return 0x8223579C;
		  /* 8223579Ch */ case   16:  		/* li R3, 0 */
		/* 8223579Ch case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223579Ch case   16:*/		return 0x822357A0;
		  /* 822357A0h */ case   17:  		/* bl -908184 */
		/* 822357A0h case   17:*/		regs.LR = 0x822357A4; return 0x82157C08;
		/* 822357A0h case   17:*/		return 0x822357A4;
	}
	return 0x822357A4;
} // Block from 8223575Ch-822357A4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822357A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822357A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822357A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822357A4);
		  /* 822357A4h */ case    0:  		/* lwz R11, <#[R25 + 4]> */
		/* 822357A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822357A4h case    0:*/		return 0x822357A8;
		  /* 822357A8h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 822357A8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 822357A8h case    1:*/		return 0x822357AC;
		  /* 822357ACh */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 822357ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x822357D4;  }
		/* 822357ACh case    2:*/		return 0x822357B0;
		  /* 822357B0h */ case    3:  		/* lwzx R11, <#[R30 + R31]> */
		/* 822357B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 822357B0h case    3:*/		return 0x822357B4;
		  /* 822357B4h */ case    4:  		/* b 28 */
		/* 822357B4h case    4:*/		return 0x822357D0;
		/* 822357B4h case    4:*/		return 0x822357B8;
	}
	return 0x822357B8;
} // Block from 822357A4h-822357B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822357B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822357B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822357B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822357B8);
		  /* 822357B8h */ case    0:  		/* lwzx R11, <#[R30 + R31]> */
		/* 822357B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 822357B8h case    0:*/		return 0x822357BC;
		  /* 822357BCh */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 822357BCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 822357BCh case    1:*/		return 0x822357C0;
	}
	return 0x822357C0;
} // Block from 822357B8h-822357C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822357C0h
// Function '?TST_GetDataValue@XGRAPHICS@@YAIPAU_TERNARY_NODE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822357C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822357C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822357C0);
		  /* 822357C0h */ case    0:  		/* stw R11, <#[R25 + 4]> */
		/* 822357C0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822357C0h case    0:*/		return 0x822357C4;
		  /* 822357C4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 822357C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822357D4;  }
		/* 822357C4h case    1:*/		return 0x822357C8;
		  /* 822357C8h */ case    2:  		/* addi R11, R31, 4 */
		/* 822357C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 822357C8h case    2:*/		return 0x822357CC;
		  /* 822357CCh */ case    3:  		/* lwzx R11, <#[R30 + R11]> */
		/* 822357CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 822357CCh case    3:*/		return 0x822357D0;
	}
	return 0x822357D0;
} // Block from 822357C0h-822357D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822357D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822357D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822357D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822357D0);
		  /* 822357D0h */ case    0:  		/* stw R11, <#[R25 + 4]> */
		/* 822357D0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822357D0h case    0:*/		return 0x822357D4;
	}
	return 0x822357D4;
} // Block from 822357D0h-822357D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822357D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822357D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822357D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822357D4);
		  /* 822357D4h */ case    0:  		/* addi R11, R31, 8 */
		/* 822357D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 822357D4h case    0:*/		return 0x822357D8;
	}
	return 0x822357D8;
} // Block from 822357D4h-822357D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822357D8h
// Function '?TST_NodeCreate@XGRAPHICS@@YAPAU_TERNARY_NODE@1@PAU_TERNARY_SEARCH_TREE@1@IPAU21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822357D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822357D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822357D8);
		  /* 822357D8h */ case    0:  		/* lwzx R30, <#[R30 + R11]> */
		/* 822357D8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 822357D8h case    0:*/		return 0x822357DC;
		  /* 822357DCh */ case    1:  		/* cmplwi CR6, R30, 2 */
		/* 822357DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 822357DCh case    1:*/		return 0x822357E0;
		  /* 822357E0h */ case    2:  		/* bc 12, CR6_LT, 44 */
		/* 822357E0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8223580C;  }
		/* 822357E0h case    2:*/		return 0x822357E4;
		  /* 822357E4h */ case    3:  		/* rlwinm R11, R28, 24, 24, 31 */
		/* 822357E4h case    3:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R11,regs.R28);
		/* 822357E4h case    3:*/		return 0x822357E8;
		  /* 822357E8h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 822357E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 822357E8h case    4:*/		return 0x822357EC;
		  /* 822357ECh */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 822357ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x8223580C;  }
		/* 822357ECh case    5:*/		return 0x822357F0;
		  /* 822357F0h */ case    6:  		/* lis R11, -32252 */
		/* 822357F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822357F0h case    6:*/		return 0x822357F4;
		  /* 822357F4h */ case    7:  		/* mr R6, R26 */
		/* 822357F4h case    7:*/		regs.R6 = regs.R26;
		/* 822357F4h case    7:*/		return 0x822357F8;
		  /* 822357F8h */ case    8:  		/* addi R5, R11, 8200 */
		/* 822357F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2008);
		/* 822357F8h case    8:*/		return 0x822357FC;
		  /* 822357FCh */ case    9:  		/* mr R4, R27 */
		/* 822357FCh case    9:*/		regs.R4 = regs.R27;
		/* 822357FCh case    9:*/		return 0x82235800;
		  /* 82235800h */ case   10:  		/* li R7, 369 */
		/* 82235800h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x171);
		/* 82235800h case   10:*/		return 0x82235804;
		  /* 82235804h */ case   11:  		/* li R3, 0 */
		/* 82235804h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235804h case   11:*/		return 0x82235808;
		  /* 82235808h */ case   12:  		/* bl -908288 */
		/* 82235808h case   12:*/		regs.LR = 0x8223580C; return 0x82157C08;
		/* 82235808h case   12:*/		return 0x8223580C;
	}
	return 0x8223580C;
} // Block from 822357D8h-8223580Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223580Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223580C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223580C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223580C);
		  /* 8223580Ch */ case    0:  		/* cmplwi CR6, R30, 3 */
		/* 8223580Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 8223580Ch case    0:*/		return 0x82235810;
		  /* 82235810h */ case    1:  		/* bc 12, CR6_LT, 44 */
		/* 82235810h case    1:*/		if ( regs.CR[6].lt ) { return 0x8223583C;  }
		/* 82235810h case    1:*/		return 0x82235814;
		  /* 82235814h */ case    2:  		/* rlwinm R11, R28, 16, 24, 31 */
		/* 82235814h case    2:*/		cpu::op::rlwinm<0,16,24,31>(regs,&regs.R11,regs.R28);
		/* 82235814h case    2:*/		return 0x82235818;
		  /* 82235818h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 82235818h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82235818h case    3:*/		return 0x8223581C;
		  /* 8223581Ch */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 8223581Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8223583C;  }
		/* 8223581Ch case    4:*/		return 0x82235820;
		  /* 82235820h */ case    5:  		/* lis R11, -32252 */
		/* 82235820h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235820h case    5:*/		return 0x82235824;
		  /* 82235824h */ case    6:  		/* mr R6, R26 */
		/* 82235824h case    6:*/		regs.R6 = regs.R26;
		/* 82235824h case    6:*/		return 0x82235828;
		  /* 82235828h */ case    7:  		/* addi R5, R11, 8080 */
		/* 82235828h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1F90);
		/* 82235828h case    7:*/		return 0x8223582C;
		  /* 8223582Ch */ case    8:  		/* mr R4, R27 */
		/* 8223582Ch case    8:*/		regs.R4 = regs.R27;
		/* 8223582Ch case    8:*/		return 0x82235830;
	}
	return 0x82235830;
} // Block from 8223580Ch-82235830h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235830h
// Function '?TST_Create@XGRAPHICS@@YAPAU_TERNARY_SEARCH_TREE@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235830);
		  /* 82235830h */ case    0:  		/* li R7, 372 */
		/* 82235830h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x174);
		/* 82235830h case    0:*/		return 0x82235834;
		  /* 82235834h */ case    1:  		/* li R3, 0 */
		/* 82235834h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235834h case    1:*/		return 0x82235838;
		  /* 82235838h */ case    2:  		/* bl -908336 */
		/* 82235838h case    2:*/		regs.LR = 0x8223583C; return 0x82157C08;
		/* 82235838h case    2:*/		return 0x8223583C;
	}
	return 0x8223583C;
} // Block from 82235830h-8223583Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223583Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223583C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223583C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223583C);
		  /* 8223583Ch */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 8223583Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 8223583Ch case    0:*/		return 0x82235840;
		  /* 82235840h */ case    1:  		/* bc 12, CR6_LT, 44 */
		/* 82235840h case    1:*/		if ( regs.CR[6].lt ) { return 0x8223586C;  }
		/* 82235840h case    1:*/		return 0x82235844;
		  /* 82235844h */ case    2:  		/* rlwinm R11, R28, 8, 24, 31 */
		/* 82235844h case    2:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R11,regs.R28);
		/* 82235844h case    2:*/		return 0x82235848;
		  /* 82235848h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 82235848h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82235848h case    3:*/		return 0x8223584C;
		  /* 8223584Ch */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 8223584Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8223586C;  }
		/* 8223584Ch case    4:*/		return 0x82235850;
		  /* 82235850h */ case    5:  		/* lis R11, -32252 */
		/* 82235850h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235850h case    5:*/		return 0x82235854;
		  /* 82235854h */ case    6:  		/* mr R6, R26 */
		/* 82235854h case    6:*/		regs.R6 = regs.R26;
		/* 82235854h case    6:*/		return 0x82235858;
		  /* 82235858h */ case    7:  		/* addi R5, R11, 7960 */
		/* 82235858h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1F18);
		/* 82235858h case    7:*/		return 0x8223585C;
		  /* 8223585Ch */ case    8:  		/* mr R4, R27 */
		/* 8223585Ch case    8:*/		regs.R4 = regs.R27;
		/* 8223585Ch case    8:*/		return 0x82235860;
		  /* 82235860h */ case    9:  		/* li R7, 375 */
		/* 82235860h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x177);
		/* 82235860h case    9:*/		return 0x82235864;
		  /* 82235864h */ case   10:  		/* li R3, 0 */
		/* 82235864h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235864h case   10:*/		return 0x82235868;
		  /* 82235868h */ case   11:  		/* bl -908384 */
		/* 82235868h case   11:*/		regs.LR = 0x8223586C; return 0x82157C08;
		/* 82235868h case   11:*/		return 0x8223586C;
	}
	return 0x8223586C;
} // Block from 8223583Ch-8223586Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223586Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223586C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223586C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223586C);
		  /* 8223586Ch */ case    0:  		/* cmplwi CR6, R29, 34 */
		/* 8223586Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000022);
		/* 8223586Ch case    0:*/		return 0x82235870;
		  /* 82235870h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82235870h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82235890;  }
		/* 82235870h case    1:*/		return 0x82235874;
		  /* 82235874h */ case    2:  		/* lis R11, -32252 */
		/* 82235874h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235874h case    2:*/		return 0x82235878;
		  /* 82235878h */ case    3:  		/* mr R6, R26 */
		/* 82235878h case    3:*/		regs.R6 = regs.R26;
		/* 82235878h case    3:*/		return 0x8223587C;
		  /* 8223587Ch */ case    4:  		/* addi R5, R11, 7880 */
		/* 8223587Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1EC8);
		/* 8223587Ch case    4:*/		return 0x82235880;
		  /* 82235880h */ case    5:  		/* mr R4, R27 */
		/* 82235880h case    5:*/		regs.R4 = regs.R27;
		/* 82235880h case    5:*/		return 0x82235884;
		  /* 82235884h */ case    6:  		/* li R7, 383 */
		/* 82235884h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x17F);
		/* 82235884h case    6:*/		return 0x82235888;
		  /* 82235888h */ case    7:  		/* li R3, 0 */
		/* 82235888h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235888h case    7:*/		return 0x8223588C;
		  /* 8223588Ch */ case    8:  		/* bl -908420 */
		/* 8223588Ch case    8:*/		regs.LR = 0x82235890; return 0x82157C08;
		/* 8223588Ch case    8:*/		return 0x82235890;
	}
	return 0x82235890;
} // Block from 8223586Ch-82235890h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235890);
		  /* 82235890h */ case    0:  		/* cmplwi CR6, R29, 35 */
		/* 82235890h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000023);
		/* 82235890h case    0:*/		return 0x82235894;
		  /* 82235894h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82235894h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822358B4;  }
		/* 82235894h case    1:*/		return 0x82235898;
		  /* 82235898h */ case    2:  		/* lis R11, -32252 */
		/* 82235898h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235898h case    2:*/		return 0x8223589C;
		  /* 8223589Ch */ case    3:  		/* mr R6, R26 */
		/* 8223589Ch case    3:*/		regs.R6 = regs.R26;
		/* 8223589Ch case    3:*/		return 0x822358A0;
		  /* 822358A0h */ case    4:  		/* addi R5, R11, 7800 */
		/* 822358A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1E78);
		/* 822358A0h case    4:*/		return 0x822358A4;
		  /* 822358A4h */ case    5:  		/* mr R4, R27 */
		/* 822358A4h case    5:*/		regs.R4 = regs.R27;
		/* 822358A4h case    5:*/		return 0x822358A8;
		  /* 822358A8h */ case    6:  		/* li R7, 385 */
		/* 822358A8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x181);
		/* 822358A8h case    6:*/		return 0x822358AC;
		  /* 822358ACh */ case    7:  		/* li R3, 0 */
		/* 822358ACh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822358ACh case    7:*/		return 0x822358B0;
		  /* 822358B0h */ case    8:  		/* bl -908456 */
		/* 822358B0h case    8:*/		regs.LR = 0x822358B4; return 0x82157C08;
		/* 822358B0h case    8:*/		return 0x822358B4;
	}
	return 0x822358B4;
} // Block from 82235890h-822358B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822358B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822358B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822358B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822358B4);
		  /* 822358B4h */ case    0:  		/* cmplwi CR6, R29, 17 */
		/* 822358B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000011);
		/* 822358B4h case    0:*/		return 0x822358B8;
		  /* 822358B8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822358B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822358D8;  }
		/* 822358B8h case    1:*/		return 0x822358BC;
		  /* 822358BCh */ case    2:  		/* lis R11, -32252 */
		/* 822358BCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822358BCh case    2:*/		return 0x822358C0;
		  /* 822358C0h */ case    3:  		/* mr R6, R26 */
		/* 822358C0h case    3:*/		regs.R6 = regs.R26;
		/* 822358C0h case    3:*/		return 0x822358C4;
		  /* 822358C4h */ case    4:  		/* addi R5, R11, 7720 */
		/* 822358C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1E28);
		/* 822358C4h case    4:*/		return 0x822358C8;
		  /* 822358C8h */ case    5:  		/* mr R4, R27 */
		/* 822358C8h case    5:*/		regs.R4 = regs.R27;
		/* 822358C8h case    5:*/		return 0x822358CC;
		  /* 822358CCh */ case    6:  		/* li R7, 387 */
		/* 822358CCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x183);
		/* 822358CCh case    6:*/		return 0x822358D0;
		  /* 822358D0h */ case    7:  		/* li R3, 0 */
		/* 822358D0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822358D0h case    7:*/		return 0x822358D4;
		  /* 822358D4h */ case    8:  		/* bl -908492 */
		/* 822358D4h case    8:*/		regs.LR = 0x822358D8; return 0x82157C08;
		/* 822358D4h case    8:*/		return 0x822358D8;
	}
	return 0x822358D8;
} // Block from 822358B4h-822358D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822358D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822358D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822358D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822358D8);
		  /* 822358D8h */ case    0:  		/* cmplwi CR6, R29, 2 */
		/* 822358D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 822358D8h case    0:*/		return 0x822358DC;
		  /* 822358DCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822358DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x822358FC;  }
		/* 822358DCh case    1:*/		return 0x822358E0;
		  /* 822358E0h */ case    2:  		/* lis R11, -32252 */
		/* 822358E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822358E0h case    2:*/		return 0x822358E4;
		  /* 822358E4h */ case    3:  		/* mr R6, R26 */
		/* 822358E4h case    3:*/		regs.R6 = regs.R26;
		/* 822358E4h case    3:*/		return 0x822358E8;
		  /* 822358E8h */ case    4:  		/* addi R5, R11, 7632 */
		/* 822358E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1DD0);
		/* 822358E8h case    4:*/		return 0x822358EC;
		  /* 822358ECh */ case    5:  		/* mr R4, R27 */
		/* 822358ECh case    5:*/		regs.R4 = regs.R27;
		/* 822358ECh case    5:*/		return 0x822358F0;
		  /* 822358F0h */ case    6:  		/* li R7, 389 */
		/* 822358F0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x185);
		/* 822358F0h case    6:*/		return 0x822358F4;
		  /* 822358F4h */ case    7:  		/* li R3, 0 */
		/* 822358F4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822358F4h case    7:*/		return 0x822358F8;
		  /* 822358F8h */ case    8:  		/* bl -908528 */
		/* 822358F8h case    8:*/		regs.LR = 0x822358FC; return 0x82157C08;
		/* 822358F8h case    8:*/		return 0x822358FC;
	}
	return 0x822358FC;
} // Block from 822358D8h-822358FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 822358FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822358FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822358FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822358FC);
		  /* 822358FCh */ case    0:  		/* cmplwi CR6, R29, 18 */
		/* 822358FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000012);
		/* 822358FCh case    0:*/		return 0x82235900;
		  /* 82235900h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82235900h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82235920;  }
		/* 82235900h case    1:*/		return 0x82235904;
		  /* 82235904h */ case    2:  		/* lis R11, -32252 */
		/* 82235904h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235904h case    2:*/		return 0x82235908;
		  /* 82235908h */ case    3:  		/* mr R6, R26 */
		/* 82235908h case    3:*/		regs.R6 = regs.R26;
		/* 82235908h case    3:*/		return 0x8223590C;
		  /* 8223590Ch */ case    4:  		/* addi R5, R11, 7544 */
		/* 8223590Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1D78);
		/* 8223590Ch case    4:*/		return 0x82235910;
		  /* 82235910h */ case    5:  		/* mr R4, R27 */
		/* 82235910h case    5:*/		regs.R4 = regs.R27;
		/* 82235910h case    5:*/		return 0x82235914;
		  /* 82235914h */ case    6:  		/* li R7, 391 */
		/* 82235914h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x187);
		/* 82235914h case    6:*/		return 0x82235918;
		  /* 82235918h */ case    7:  		/* li R3, 0 */
		/* 82235918h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235918h case    7:*/		return 0x8223591C;
		  /* 8223591Ch */ case    8:  		/* bl -908564 */
		/* 8223591Ch case    8:*/		regs.LR = 0x82235920; return 0x82157C08;
		/* 8223591Ch case    8:*/		return 0x82235920;
	}
	return 0x82235920;
} // Block from 822358FCh-82235920h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235920);
		  /* 82235920h */ case    0:  		/* li R31, 1 */
		/* 82235920h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82235920h case    0:*/		return 0x82235924;
		  /* 82235924h */ case    1:  		/* cmplwi CR6, R29, 1 */
		/* 82235924h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 82235924h case    1:*/		return 0x82235928;
		  /* 82235928h */ case    2:  		/* bc 12, CR6_LT, 80 */
		/* 82235928h case    2:*/		if ( regs.CR[6].lt ) { return 0x82235978;  }
		/* 82235928h case    2:*/		return 0x8223592C;
		  /* 8223592Ch */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 8223592Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82235970;  }
		/* 8223592Ch case    3:*/		return 0x82235930;
		  /* 82235930h */ case    4:  		/* cmplwi CR6, R29, 3 */
		/* 82235930h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 82235930h case    4:*/		return 0x82235934;
		  /* 82235934h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 82235934h case    5:*/		if ( regs.CR[6].eq ) { return 0x82235968;  }
		/* 82235934h case    5:*/		return 0x82235938;
		  /* 82235938h */ case    6:  		/* cmplwi CR6, R29, 32 */
		/* 82235938h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000020);
		/* 82235938h case    6:*/		return 0x8223593C;
		  /* 8223593Ch */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 8223593Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82235960;  }
		/* 8223593Ch case    7:*/		return 0x82235940;
	}
	return 0x82235940;
} // Block from 82235920h-82235940h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82235940h
// Function '?TST_Insert@XGRAPHICS@@YAPAU_TERNARY_NODE@1@PAU_TERNARY_SEARCH_TREE@1@QAIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235940);
		  /* 82235940h */ case    0:  		/* cmplwi CR6, R29, 33 */
		/* 82235940h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000021);
		/* 82235940h case    0:*/		return 0x82235944;
		  /* 82235944h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82235944h case    1:*/		if ( regs.CR[6].eq ) { return 0x82235958;  }
		/* 82235944h case    1:*/		return 0x82235948;
		  /* 82235948h */ case    2:  		/* cmplwi CR6, R29, 64 */
		/* 82235948h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000040);
		/* 82235948h case    2:*/		return 0x8223594C;
		  /* 8223594Ch */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 8223594Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82235978;  }
		/* 8223594Ch case    3:*/		return 0x82235950;
		  /* 82235950h */ case    4:  		/* li R11, 7 */
		/* 82235950h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 82235950h case    4:*/		return 0x82235954;
		  /* 82235954h */ case    5:  		/* b 40 */
		/* 82235954h case    5:*/		return 0x8223597C;
		/* 82235954h case    5:*/		return 0x82235958;
	}
	return 0x82235958;
} // Block from 82235940h-82235958h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82235958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235958);
		  /* 82235958h */ case    0:  		/* li R11, 3 */
		/* 82235958h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82235958h case    0:*/		return 0x8223595C;
		  /* 8223595Ch */ case    1:  		/* b 32 */
		/* 8223595Ch case    1:*/		return 0x8223597C;
		/* 8223595Ch case    1:*/		return 0x82235960;
	}
	return 0x82235960;
} // Block from 82235958h-82235960h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235960);
		  /* 82235960h */ case    0:  		/* li R11, 2 */
		/* 82235960h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82235960h case    0:*/		return 0x82235964;
		  /* 82235964h */ case    1:  		/* b 24 */
		/* 82235964h case    1:*/		return 0x8223597C;
		/* 82235964h case    1:*/		return 0x82235968;
	}
	return 0x82235968;
} // Block from 82235960h-82235968h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235968);
		  /* 82235968h */ case    0:  		/* li R11, 4 */
		/* 82235968h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82235968h case    0:*/		return 0x8223596C;
		  /* 8223596Ch */ case    1:  		/* b 16 */
		/* 8223596Ch case    1:*/		return 0x8223597C;
		/* 8223596Ch case    1:*/		return 0x82235970;
	}
	return 0x82235970;
} // Block from 82235968h-82235970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235970);
		  /* 82235970h */ case    0:  		/* stw R31, <#[R25 + 8]> */
		/* 82235970h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000008) );
		/* 82235970h case    0:*/		return 0x82235974;
		  /* 82235974h */ case    1:  		/* b 12 */
		/* 82235974h case    1:*/		return 0x82235980;
		/* 82235974h case    1:*/		return 0x82235978;
	}
	return 0x82235978;
} // Block from 82235970h-82235978h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235978);
		  /* 82235978h */ case    0:  		/* li R11, 0 */
		/* 82235978h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82235978h case    0:*/		return 0x8223597C;
	}
	return 0x8223597C;
} // Block from 82235978h-8223597Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223597Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223597C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223597C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223597C);
		  /* 8223597Ch */ case    0:  		/* stw R11, <#[R25 + 8]> */
		/* 8223597Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8223597Ch case    0:*/		return 0x82235980;
	}
	return 0x82235980;
} // Block from 8223597Ch-82235980h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235980);
		  /* 82235980h */ case    0:  		/* rlwinm. R11, R24, 0, 24, 31 */
		/* 82235980h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R24);
		/* 82235980h case    0:*/		return 0x82235984;
		  /* 82235984h */ case    1:  		/* bc 4, CR0_EQ, 176 */
		/* 82235984h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82235A34;  }
		/* 82235984h case    1:*/		return 0x82235988;
		  /* 82235988h */ case    2:  		/* cmplwi CR6, R30, 2 */
		/* 82235988h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 82235988h case    2:*/		return 0x8223598C;
		  /* 8223598Ch */ case    3:  		/* bc 12, CR6_LT, 60 */
		/* 8223598Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x822359C8;  }
		/* 8223598Ch case    3:*/		return 0x82235990;
		  /* 82235990h */ case    4:  		/* rlwinm R11, R24, 24, 24, 31 */
		/* 82235990h case    4:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R11,regs.R24);
		/* 82235990h case    4:*/		return 0x82235994;
		  /* 82235994h */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 82235994h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82235994h case    5:*/		return 0x82235998;
		  /* 82235998h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 82235998h case    6:*/		if ( regs.CR[6].eq ) { return 0x822359C8;  }
		/* 82235998h case    6:*/		return 0x8223599C;
		  /* 8223599Ch */ case    7:  		/* cmplwi CR6, R11, 4 */
		/* 8223599Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8223599Ch case    7:*/		return 0x822359A0;
		  /* 822359A0h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 822359A0h case    8:*/		if ( regs.CR[6].eq ) { return 0x822359C8;  }
		/* 822359A0h case    8:*/		return 0x822359A4;
		  /* 822359A4h */ case    9:  		/* cmplwi CR6, R11, 5 */
		/* 822359A4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 822359A4h case    9:*/		return 0x822359A8;
		  /* 822359A8h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 822359A8h case   10:*/		if ( regs.CR[6].eq ) { return 0x822359C8;  }
		/* 822359A8h case   10:*/		return 0x822359AC;
		  /* 822359ACh */ case   11:  		/* lis R11, -32252 */
		/* 822359ACh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822359ACh case   11:*/		return 0x822359B0;
		  /* 822359B0h */ case   12:  		/* mr R6, R26 */
		/* 822359B0h case   12:*/		regs.R6 = regs.R26;
		/* 822359B0h case   12:*/		return 0x822359B4;
		  /* 822359B4h */ case   13:  		/* addi R5, R11, 7288 */
		/* 822359B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1C78);
		/* 822359B4h case   13:*/		return 0x822359B8;
		  /* 822359B8h */ case   14:  		/* mr R4, R27 */
		/* 822359B8h case   14:*/		regs.R4 = regs.R27;
		/* 822359B8h case   14:*/		return 0x822359BC;
		  /* 822359BCh */ case   15:  		/* li R7, 450 */
		/* 822359BCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1C2);
		/* 822359BCh case   15:*/		return 0x822359C0;
		  /* 822359C0h */ case   16:  		/* li R3, 0 */
		/* 822359C0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822359C0h case   16:*/		return 0x822359C4;
		  /* 822359C4h */ case   17:  		/* bl -908732 */
		/* 822359C4h case   17:*/		regs.LR = 0x822359C8; return 0x82157C08;
		/* 822359C4h case   17:*/		return 0x822359C8;
	}
	return 0x822359C8;
} // Block from 82235980h-822359C8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822359C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822359C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822359C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822359C8);
		  /* 822359C8h */ case    0:  		/* cmplwi CR6, R30, 3 */
		/* 822359C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 822359C8h case    0:*/		return 0x822359CC;
		  /* 822359CCh */ case    1:  		/* bc 12, CR6_LT, 60 */
		/* 822359CCh case    1:*/		if ( regs.CR[6].lt ) { return 0x82235A08;  }
		/* 822359CCh case    1:*/		return 0x822359D0;
		  /* 822359D0h */ case    2:  		/* rlwinm R11, R24, 16, 24, 31 */
		/* 822359D0h case    2:*/		cpu::op::rlwinm<0,16,24,31>(regs,&regs.R11,regs.R24);
		/* 822359D0h case    2:*/		return 0x822359D4;
		  /* 822359D4h */ case    3:  		/* cmplwi CR6, R11, 2 */
		/* 822359D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 822359D4h case    3:*/		return 0x822359D8;
		  /* 822359D8h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 822359D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x82235A08;  }
		/* 822359D8h case    4:*/		return 0x822359DC;
		  /* 822359DCh */ case    5:  		/* cmplwi CR6, R11, 4 */
		/* 822359DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 822359DCh case    5:*/		return 0x822359E0;
		  /* 822359E0h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 822359E0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82235A08;  }
		/* 822359E0h case    6:*/		return 0x822359E4;
		  /* 822359E4h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 822359E4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 822359E4h case    7:*/		return 0x822359E8;
		  /* 822359E8h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 822359E8h case    8:*/		if ( regs.CR[6].eq ) { return 0x82235A08;  }
		/* 822359E8h case    8:*/		return 0x822359EC;
		  /* 822359ECh */ case    9:  		/* lis R11, -32252 */
		/* 822359ECh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822359ECh case    9:*/		return 0x822359F0;
		  /* 822359F0h */ case   10:  		/* mr R6, R26 */
		/* 822359F0h case   10:*/		regs.R6 = regs.R26;
		/* 822359F0h case   10:*/		return 0x822359F4;
		  /* 822359F4h */ case   11:  		/* addi R5, R11, 7032 */
		/* 822359F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1B78);
		/* 822359F4h case   11:*/		return 0x822359F8;
		  /* 822359F8h */ case   12:  		/* mr R4, R27 */
		/* 822359F8h case   12:*/		regs.R4 = regs.R27;
		/* 822359F8h case   12:*/		return 0x822359FC;
		  /* 822359FCh */ case   13:  		/* li R7, 454 */
		/* 822359FCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1C6);
		/* 822359FCh case   13:*/		return 0x82235A00;
		  /* 82235A00h */ case   14:  		/* li R3, 0 */
		/* 82235A00h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235A00h case   14:*/		return 0x82235A04;
		  /* 82235A04h */ case   15:  		/* bl -908796 */
		/* 82235A04h case   15:*/		regs.LR = 0x82235A08; return 0x82157C08;
		/* 82235A04h case   15:*/		return 0x82235A08;
	}
	return 0x82235A08;
} // Block from 822359C8h-82235A08h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82235A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235A08);
		  /* 82235A08h */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 82235A08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 82235A08h case    0:*/		return 0x82235A0C;
		  /* 82235A0Ch */ case    1:  		/* bc 12, CR6_LT, 264 */
		/* 82235A0Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82235B14;  }
		/* 82235A0Ch case    1:*/		return 0x82235A10;
		  /* 82235A10h */ case    2:  		/* rlwinm R11, R24, 8, 24, 31 */
		/* 82235A10h case    2:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R11,regs.R24);
		/* 82235A10h case    2:*/		return 0x82235A14;
		  /* 82235A14h */ case    3:  		/* cmplwi CR6, R11, 3 */
		/* 82235A14h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82235A14h case    3:*/		return 0x82235A18;
		  /* 82235A18h */ case    4:  		/* bc 12, CR6_EQ, 252 */
		/* 82235A18h case    4:*/		if ( regs.CR[6].eq ) { return 0x82235B14;  }
		/* 82235A18h case    4:*/		return 0x82235A1C;
		  /* 82235A1Ch */ case    5:  		/* cmplwi CR6, R11, 4 */
		/* 82235A1Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82235A1Ch case    5:*/		return 0x82235A20;
		  /* 82235A20h */ case    6:  		/* bc 12, CR6_EQ, 244 */
		/* 82235A20h case    6:*/		if ( regs.CR[6].eq ) { return 0x82235B14;  }
		/* 82235A20h case    6:*/		return 0x82235A24;
		  /* 82235A24h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 82235A24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82235A24h case    7:*/		return 0x82235A28;
		  /* 82235A28h */ case    8:  		/* bc 12, CR6_EQ, 236 */
		/* 82235A28h case    8:*/		if ( regs.CR[6].eq ) { return 0x82235B14;  }
		/* 82235A28h case    8:*/		return 0x82235A2C;
		  /* 82235A2Ch */ case    9:  		/* li R7, 458 */
		/* 82235A2Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1CA);
		/* 82235A2Ch case    9:*/		return 0x82235A30;
		  /* 82235A30h */ case   10:  		/* b 204 */
		/* 82235A30h case   10:*/		return 0x82235AFC;
		/* 82235A30h case   10:*/		return 0x82235A34;
	}
	return 0x82235A34;
} // Block from 82235A08h-82235A34h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82235A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235A34);
		  /* 82235A34h */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 82235A34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82235A34h case    0:*/		return 0x82235A38;
		  /* 82235A38h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 82235A38h case    1:*/		if ( regs.CR[6].eq ) { return 0x82235A58;  }
		/* 82235A38h case    1:*/		return 0x82235A3C;
		  /* 82235A3Ch */ case    2:  		/* lis R11, -32252 */
		/* 82235A3Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235A3Ch case    2:*/		return 0x82235A40;
		  /* 82235A40h */ case    3:  		/* mr R6, R26 */
		/* 82235A40h case    3:*/		regs.R6 = regs.R26;
		/* 82235A40h case    3:*/		return 0x82235A44;
		  /* 82235A44h */ case    4:  		/* addi R5, R11, 6952 */
		/* 82235A44h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1B28);
		/* 82235A44h case    4:*/		return 0x82235A48;
		  /* 82235A48h */ case    5:  		/* mr R4, R27 */
		/* 82235A48h case    5:*/		regs.R4 = regs.R27;
		/* 82235A48h case    5:*/		return 0x82235A4C;
		  /* 82235A4Ch */ case    6:  		/* li R7, 466 */
		/* 82235A4Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1D2);
		/* 82235A4Ch case    6:*/		return 0x82235A50;
		  /* 82235A50h */ case    7:  		/* li R3, 0 */
		/* 82235A50h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235A50h case    7:*/		return 0x82235A54;
		  /* 82235A54h */ case    8:  		/* bl -908876 */
		/* 82235A54h case    8:*/		regs.LR = 0x82235A58; return 0x82157C08;
		/* 82235A54h case    8:*/		return 0x82235A58;
	}
	return 0x82235A58;
} // Block from 82235A34h-82235A58h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235A58);
		  /* 82235A58h */ case    0:  		/* cmplwi CR6, R30, 2 */
		/* 82235A58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 82235A58h case    0:*/		return 0x82235A5C;
		  /* 82235A5Ch */ case    1:  		/* bc 12, CR6_LT, 60 */
		/* 82235A5Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82235A98;  }
		/* 82235A5Ch case    1:*/		return 0x82235A60;
		  /* 82235A60h */ case    2:  		/* rlwinm R11, R24, 24, 24, 31 */
		/* 82235A60h case    2:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R11,regs.R24);
		/* 82235A60h case    2:*/		return 0x82235A64;
		  /* 82235A64h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 82235A64h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82235A64h case    3:*/		return 0x82235A68;
		  /* 82235A68h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 82235A68h case    4:*/		if ( regs.CR[6].eq ) { return 0x82235A98;  }
		/* 82235A68h case    4:*/		return 0x82235A6C;
		  /* 82235A6Ch */ case    5:  		/* cmplwi CR6, R11, 4 */
		/* 82235A6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82235A6Ch case    5:*/		return 0x82235A70;
		  /* 82235A70h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 82235A70h case    6:*/		if ( regs.CR[6].eq ) { return 0x82235A98;  }
		/* 82235A70h case    6:*/		return 0x82235A74;
		  /* 82235A74h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 82235A74h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82235A74h case    7:*/		return 0x82235A78;
		  /* 82235A78h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 82235A78h case    8:*/		if ( regs.CR[6].eq ) { return 0x82235A98;  }
		/* 82235A78h case    8:*/		return 0x82235A7C;
		  /* 82235A7Ch */ case    9:  		/* lis R11, -32252 */
		/* 82235A7Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235A7Ch case    9:*/		return 0x82235A80;
		  /* 82235A80h */ case   10:  		/* mr R6, R26 */
		/* 82235A80h case   10:*/		regs.R6 = regs.R26;
		/* 82235A80h case   10:*/		return 0x82235A84;
		  /* 82235A84h */ case   11:  		/* addi R5, R11, 7288 */
		/* 82235A84h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1C78);
		/* 82235A84h case   11:*/		return 0x82235A88;
		  /* 82235A88h */ case   12:  		/* mr R4, R27 */
		/* 82235A88h case   12:*/		regs.R4 = regs.R27;
		/* 82235A88h case   12:*/		return 0x82235A8C;
		  /* 82235A8Ch */ case   13:  		/* li R7, 472 */
		/* 82235A8Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1D8);
		/* 82235A8Ch case   13:*/		return 0x82235A90;
		  /* 82235A90h */ case   14:  		/* li R3, 0 */
		/* 82235A90h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235A90h case   14:*/		return 0x82235A94;
		  /* 82235A94h */ case   15:  		/* bl -908940 */
		/* 82235A94h case   15:*/		regs.LR = 0x82235A98; return 0x82157C08;
		/* 82235A94h case   15:*/		return 0x82235A98;
	}
	return 0x82235A98;
} // Block from 82235A58h-82235A98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82235A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235A98);
		  /* 82235A98h */ case    0:  		/* cmplwi CR6, R30, 3 */
		/* 82235A98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 82235A98h case    0:*/		return 0x82235A9C;
		  /* 82235A9Ch */ case    1:  		/* bc 12, CR6_LT, 56 */
		/* 82235A9Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82235AD4;  }
		/* 82235A9Ch case    1:*/		return 0x82235AA0;
		  /* 82235AA0h */ case    2:  		/* rlwinm. R11, R24, 16, 24, 31 */
		/* 82235AA0h case    2:*/		cpu::op::rlwinm<1,16,24,31>(regs,&regs.R11,regs.R24);
		/* 82235AA0h case    2:*/		return 0x82235AA4;
		  /* 82235AA4h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 82235AA4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82235AD4;  }
		/* 82235AA4h case    3:*/		return 0x82235AA8;
		  /* 82235AA8h */ case    4:  		/* cmplwi CR6, R11, 4 */
		/* 82235AA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82235AA8h case    4:*/		return 0x82235AAC;
		  /* 82235AACh */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 82235AACh case    5:*/		if ( regs.CR[6].eq ) { return 0x82235AD4;  }
		/* 82235AACh case    5:*/		return 0x82235AB0;
		  /* 82235AB0h */ case    6:  		/* cmplwi CR6, R11, 5 */
		/* 82235AB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82235AB0h case    6:*/		return 0x82235AB4;
		  /* 82235AB4h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 82235AB4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82235AD4;  }
		/* 82235AB4h case    7:*/		return 0x82235AB8;
	}
	return 0x82235AB8;
} // Block from 82235A98h-82235AB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82235AB8h
// Function '?TST_Clear@XGRAPHICS@@YAXPAU_TERNARY_SEARCH_TREE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235AB8);
		  /* 82235AB8h */ case    0:  		/* lis R11, -32252 */
		/* 82235AB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235AB8h case    0:*/		return 0x82235ABC;
		  /* 82235ABCh */ case    1:  		/* mr R6, R26 */
		/* 82235ABCh case    1:*/		regs.R6 = regs.R26;
		/* 82235ABCh case    1:*/		return 0x82235AC0;
		  /* 82235AC0h */ case    2:  		/* addi R5, R11, 6696 */
		/* 82235AC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1A28);
		/* 82235AC0h case    2:*/		return 0x82235AC4;
		  /* 82235AC4h */ case    3:  		/* mr R4, R27 */
		/* 82235AC4h case    3:*/		regs.R4 = regs.R27;
		/* 82235AC4h case    3:*/		return 0x82235AC8;
		  /* 82235AC8h */ case    4:  		/* li R7, 476 */
		/* 82235AC8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1DC);
		/* 82235AC8h case    4:*/		return 0x82235ACC;
		  /* 82235ACCh */ case    5:  		/* li R3, 0 */
		/* 82235ACCh case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235ACCh case    5:*/		return 0x82235AD0;
		  /* 82235AD0h */ case    6:  		/* bl -909000 */
		/* 82235AD0h case    6:*/		regs.LR = 0x82235AD4; return 0x82157C08;
		/* 82235AD0h case    6:*/		return 0x82235AD4;
	}
	return 0x82235AD4;
} // Block from 82235AB8h-82235AD4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82235AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235AD4);
		  /* 82235AD4h */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 82235AD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 82235AD4h case    0:*/		return 0x82235AD8;
		  /* 82235AD8h */ case    1:  		/* bc 12, CR6_LT, 60 */
		/* 82235AD8h case    1:*/		if ( regs.CR[6].lt ) { return 0x82235B14;  }
		/* 82235AD8h case    1:*/		return 0x82235ADC;
		  /* 82235ADCh */ case    2:  		/* rlwinm R11, R24, 8, 24, 31 */
		/* 82235ADCh case    2:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R11,regs.R24);
		/* 82235ADCh case    2:*/		return 0x82235AE0;
		  /* 82235AE0h */ case    3:  		/* cmplwi CR6, R11, 3 */
		/* 82235AE0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82235AE0h case    3:*/		return 0x82235AE4;
		  /* 82235AE4h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 82235AE4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82235B14;  }
		/* 82235AE4h case    4:*/		return 0x82235AE8;
		  /* 82235AE8h */ case    5:  		/* cmplwi CR6, R11, 4 */
		/* 82235AE8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82235AE8h case    5:*/		return 0x82235AEC;
		  /* 82235AECh */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 82235AECh case    6:*/		if ( regs.CR[6].eq ) { return 0x82235B14;  }
		/* 82235AECh case    6:*/		return 0x82235AF0;
		  /* 82235AF0h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 82235AF0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82235AF0h case    7:*/		return 0x82235AF4;
		  /* 82235AF4h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 82235AF4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82235B14;  }
		/* 82235AF4h case    8:*/		return 0x82235AF8;
		  /* 82235AF8h */ case    9:  		/* li R7, 480 */
		/* 82235AF8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1E0);
		/* 82235AF8h case    9:*/		return 0x82235AFC;
	}
	return 0x82235AFC;
} // Block from 82235AD4h-82235AFCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 82235AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235AFC);
		  /* 82235AFCh */ case    0:  		/* lis R11, -32252 */
		/* 82235AFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235AFCh case    0:*/		return 0x82235B00;
		  /* 82235B00h */ case    1:  		/* mr R6, R26 */
		/* 82235B00h case    1:*/		regs.R6 = regs.R26;
		/* 82235B00h case    1:*/		return 0x82235B04;
		  /* 82235B04h */ case    2:  		/* addi R5, R11, 6440 */
		/* 82235B04h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1928);
		/* 82235B04h case    2:*/		return 0x82235B08;
		  /* 82235B08h */ case    3:  		/* mr R4, R27 */
		/* 82235B08h case    3:*/		regs.R4 = regs.R27;
		/* 82235B08h case    3:*/		return 0x82235B0C;
		  /* 82235B0Ch */ case    4:  		/* li R3, 0 */
		/* 82235B0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235B0Ch case    4:*/		return 0x82235B10;
		  /* 82235B10h */ case    5:  		/* bl -909064 */
		/* 82235B10h case    5:*/		regs.LR = 0x82235B14; return 0x82157C08;
		/* 82235B10h case    5:*/		return 0x82235B14;
	}
	return 0x82235B14;
} // Block from 82235AFCh-82235B14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82235B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235B14);
		  /* 82235B14h */ case    0:  		/* stw R31, <#[R25]> */
		/* 82235B14h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 82235B14h case    0:*/		return 0x82235B18;
		  /* 82235B18h */ case    1:  		/* addi R1, R1, 160 */
		/* 82235B18h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82235B18h case    1:*/		return 0x82235B1C;
		  /* 82235B1Ch */ case    2:  		/* b -1722500 */
		/* 82235B1Ch case    2:*/		return 0x82091298;
		/* 82235B1Ch case    2:*/		return 0x82235B20;
	}
	return 0x82235B20;
} // Block from 82235B14h-82235B20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82235B20h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235B20);
		  /* 82235B20h */ case    0:  		/* mfspr R12, LR */
		/* 82235B20h case    0:*/		regs.R12 = regs.LR;
		/* 82235B20h case    0:*/		return 0x82235B24;
		  /* 82235B24h */ case    1:  		/* bl -1722576 */
		/* 82235B24h case    1:*/		regs.LR = 0x82235B28; return 0x82091254;
		/* 82235B24h case    1:*/		return 0x82235B28;
		  /* 82235B28h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82235B28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82235B28h case    2:*/		return 0x82235B2C;
		  /* 82235B2Ch */ case    3:  		/* mr R30, R5 */
		/* 82235B2Ch case    3:*/		regs.R30 = regs.R5;
		/* 82235B2Ch case    3:*/		return 0x82235B30;
		  /* 82235B30h */ case    4:  		/* mr R27, R4 */
		/* 82235B30h case    4:*/		regs.R27 = regs.R4;
		/* 82235B30h case    4:*/		return 0x82235B34;
		  /* 82235B34h */ case    5:  		/* mr R5, R4 */
		/* 82235B34h case    5:*/		regs.R5 = regs.R4;
		/* 82235B34h case    5:*/		return 0x82235B38;
		  /* 82235B38h */ case    6:  		/* li R4, 34 */
		/* 82235B38h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 82235B38h case    6:*/		return 0x82235B3C;
		  /* 82235B3Ch */ case    7:  		/* mr R28, R3 */
		/* 82235B3Ch case    7:*/		regs.R28 = regs.R3;
		/* 82235B3Ch case    7:*/		return 0x82235B40;
		  /* 82235B40h */ case    8:  		/* bl -885504 */
		/* 82235B40h case    8:*/		regs.LR = 0x82235B44; return 0x8215D840;
		/* 82235B40h case    8:*/		return 0x82235B44;
		  /* 82235B44h */ case    9:  		/* mr R31, R3 */
		/* 82235B44h case    9:*/		regs.R31 = regs.R3;
		/* 82235B44h case    9:*/		return 0x82235B48;
		  /* 82235B48h */ case   10:  		/* mr R5, R27 */
		/* 82235B48h case   10:*/		regs.R5 = regs.R27;
		/* 82235B48h case   10:*/		return 0x82235B4C;
		  /* 82235B4Ch */ case   11:  		/* mr R3, R28 */
		/* 82235B4Ch case   11:*/		regs.R3 = regs.R28;
		/* 82235B4Ch case   11:*/		return 0x82235B50;
		  /* 82235B50h */ case   12:  		/* li R4, 35 */
		/* 82235B50h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 82235B50h case   12:*/		return 0x82235B54;
		  /* 82235B54h */ case   13:  		/* bl -885524 */
		/* 82235B54h case   13:*/		regs.LR = 0x82235B58; return 0x8215D840;
		/* 82235B54h case   13:*/		return 0x82235B58;
		  /* 82235B58h */ case   14:  		/* mr R29, R3 */
		/* 82235B58h case   14:*/		regs.R29 = regs.R3;
		/* 82235B58h case   14:*/		return 0x82235B5C;
		  /* 82235B5Ch */ case   15:  		/* mr R5, R27 */
		/* 82235B5Ch case   15:*/		regs.R5 = regs.R27;
		/* 82235B5Ch case   15:*/		return 0x82235B60;
		  /* 82235B60h */ case   16:  		/* li R4, 36 */
		/* 82235B60h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 82235B60h case   16:*/		return 0x82235B64;
		  /* 82235B64h */ case   17:  		/* mr R3, R28 */
		/* 82235B64h case   17:*/		regs.R3 = regs.R28;
		/* 82235B64h case   17:*/		return 0x82235B68;
		  /* 82235B68h */ case   18:  		/* bl -885544 */
		/* 82235B68h case   18:*/		regs.LR = 0x82235B6C; return 0x8215D840;
		/* 82235B68h case   18:*/		return 0x82235B6C;
		  /* 82235B6Ch */ case   19:  		/* lis R11, -32253 */
		/* 82235B6Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82235B6Ch case   19:*/		return 0x82235B70;
		  /* 82235B70h */ case   20:  		/* lis R10, -32252 */
		/* 82235B70h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235B70h case   20:*/		return 0x82235B74;
		  /* 82235B74h */ case   21:  		/* cmplwi CR6, R31, 0 */
		/* 82235B74h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82235B74h case   21:*/		return 0x82235B78;
		  /* 82235B78h */ case   22:  		/* addi R28, R11, 27460 */
		/* 82235B78h case   22:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 82235B78h case   22:*/		return 0x82235B7C;
		  /* 82235B7Ch */ case   23:  		/* addi R27, R10, 6280 */
		/* 82235B7Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x1888);
		/* 82235B7Ch case   23:*/		return 0x82235B80;
		  /* 82235B80h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 82235B80h case   24:*/		if ( regs.CR[6].eq ) { return 0x82235B8C;  }
		/* 82235B80h case   24:*/		return 0x82235B84;
		  /* 82235B84h */ case   25:  		/* cmplwi CR6, R31, 17 */
		/* 82235B84h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000011);
		/* 82235B84h case   25:*/		return 0x82235B88;
		  /* 82235B88h */ case   26:  		/* bc 12, CR6_LT, 32 */
		/* 82235B88h case   26:*/		if ( regs.CR[6].lt ) { return 0x82235BA8;  }
		/* 82235B88h case   26:*/		return 0x82235B8C;
	}
	return 0x82235B8C;
} // Block from 82235B20h-82235B8Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 82235B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235B8C);
		  /* 82235B8Ch */ case    0:  		/* lis R11, -32252 */
		/* 82235B8Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235B8Ch case    0:*/		return 0x82235B90;
		  /* 82235B90h */ case    1:  		/* mr R6, R27 */
		/* 82235B90h case    1:*/		regs.R6 = regs.R27;
		/* 82235B90h case    1:*/		return 0x82235B94;
		  /* 82235B94h */ case    2:  		/* addi R5, R11, 8404 */
		/* 82235B94h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x20D4);
		/* 82235B94h case    2:*/		return 0x82235B98;
		  /* 82235B98h */ case    3:  		/* mr R4, R28 */
		/* 82235B98h case    3:*/		regs.R4 = regs.R28;
		/* 82235B98h case    3:*/		return 0x82235B9C;
		  /* 82235B9Ch */ case    4:  		/* li R7, 553 */
		/* 82235B9Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x229);
		/* 82235B9Ch case    4:*/		return 0x82235BA0;
		  /* 82235BA0h */ case    5:  		/* li R3, 0 */
		/* 82235BA0h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235BA0h case    5:*/		return 0x82235BA4;
		  /* 82235BA4h */ case    6:  		/* bl -909212 */
		/* 82235BA4h case    6:*/		regs.LR = 0x82235BA8; return 0x82157C08;
		/* 82235BA4h case    6:*/		return 0x82235BA8;
	}
	return 0x82235BA8;
} // Block from 82235B8Ch-82235BA8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82235BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235BA8);
		  /* 82235BA8h */ case    0:  		/* rlwinm R11, R29, 0, 24, 31 */
		/* 82235BA8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R29);
		/* 82235BA8h case    0:*/		return 0x82235BAC;
		  /* 82235BACh */ case    1:  		/* rlwinm R10, R31, 4, 0, 27 */
		/* 82235BACh case    1:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R31);
		/* 82235BACh case    1:*/		return 0x82235BB0;
		  /* 82235BB0h */ case    2:  		/* cmplwi CR6, R11, 64 */
		/* 82235BB0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82235BB0h case    2:*/		return 0x82235BB4;
		  /* 82235BB4h */ case    3:  		/* bc 4, CR6_EQ, 48 */
		/* 82235BB4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82235BE4;  }
		/* 82235BB4h case    3:*/		return 0x82235BB8;
		  /* 82235BB8h */ case    4:  		/* lis R11, -32252 */
		/* 82235BB8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235BB8h case    4:*/		return 0x82235BBC;
		  /* 82235BBCh */ case    5:  		/* addi R11, R11, 5392 */
		/* 82235BBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1510);
		/* 82235BBCh case    5:*/		return 0x82235BC0;
		  /* 82235BC0h */ case    6:  		/* addi R11, R11, 4 */
		/* 82235BC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82235BC0h case    6:*/		return 0x82235BC4;
		  /* 82235BC4h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82235BC4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82235BC4h case    7:*/		return 0x82235BC8;
		  /* 82235BC8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82235BC8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235BC8h case    8:*/		return 0x82235BCC;
		  /* 82235BCCh */ case    9:  		/* stw R11, <#[R30]> */
		/* 82235BCCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82235BCCh case    9:*/		return 0x82235BD0;
	}
	return 0x82235BD0;
} // Block from 82235BA8h-82235BD0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82235BD0h
// Function '?TST_Destroy@XGRAPHICS@@YAXPAU_TERNARY_SEARCH_TREE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235BD0);
		  /* 82235BD0h */ case    0:  		/* bc 4, CR6_EQ, 124 */
		/* 82235BD0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82235C4C;  }
		/* 82235BD0h case    0:*/		return 0x82235BD4;
		  /* 82235BD4h */ case    1:  		/* lis R11, -32252 */
		/* 82235BD4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235BD4h case    1:*/		return 0x82235BD8;
		  /* 82235BD8h */ case    2:  		/* li R7, 564 */
		/* 82235BD8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x234);
		/* 82235BD8h case    2:*/		return 0x82235BDC;
		  /* 82235BDCh */ case    3:  		/* addi R5, R11, 8388 */
		/* 82235BDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x20C4);
		/* 82235BDCh case    3:*/		return 0x82235BE0;
		  /* 82235BE0h */ case    4:  		/* b 92 */
		/* 82235BE0h case    4:*/		return 0x82235C3C;
		/* 82235BE0h case    4:*/		return 0x82235BE4;
	}
	return 0x82235BE4;
} // Block from 82235BD0h-82235BE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82235BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235BE4);
		  /* 82235BE4h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 82235BE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82235BE4h case    0:*/		return 0x82235BE8;
		  /* 82235BE8h */ case    1:  		/* lis R11, -32252 */
		/* 82235BE8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235BE8h case    1:*/		return 0x82235BEC;
		  /* 82235BECh */ case    2:  		/* addi R11, R11, 5392 */
		/* 82235BECh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1510);
		/* 82235BECh case    2:*/		return 0x82235BF0;
		  /* 82235BF0h */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 82235BF0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82235C18;  }
		/* 82235BF0h case    3:*/		return 0x82235BF4;
		  /* 82235BF4h */ case    4:  		/* addi R11, R11, 8 */
		/* 82235BF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82235BF4h case    4:*/		return 0x82235BF8;
		  /* 82235BF8h */ case    5:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82235BF8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82235BF8h case    5:*/		return 0x82235BFC;
		  /* 82235BFCh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82235BFCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235BFCh case    6:*/		return 0x82235C00;
		  /* 82235C00h */ case    7:  		/* stw R11, <#[R30]> */
		/* 82235C00h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82235C00h case    7:*/		return 0x82235C04;
		  /* 82235C04h */ case    8:  		/* bc 4, CR6_EQ, 72 */
		/* 82235C04h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82235C4C;  }
		/* 82235C04h case    8:*/		return 0x82235C08;
		  /* 82235C08h */ case    9:  		/* lis R11, -32252 */
		/* 82235C08h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235C08h case    9:*/		return 0x82235C0C;
		  /* 82235C0Ch */ case   10:  		/* li R7, 572 */
		/* 82235C0Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x23C);
		/* 82235C0Ch case   10:*/		return 0x82235C10;
		  /* 82235C10h */ case   11:  		/* addi R5, R11, 8388 */
		/* 82235C10h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x20C4);
		/* 82235C10h case   11:*/		return 0x82235C14;
		  /* 82235C14h */ case   12:  		/* b 40 */
		/* 82235C14h case   12:*/		return 0x82235C3C;
		/* 82235C14h case   12:*/		return 0x82235C18;
	}
	return 0x82235C18;
} // Block from 82235BE4h-82235C18h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82235C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235C18);
		  /* 82235C18h */ case    0:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82235C18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82235C18h case    0:*/		return 0x82235C1C;
		  /* 82235C1Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82235C1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235C1Ch case    1:*/		return 0x82235C20;
		  /* 82235C20h */ case    2:  		/* stw R11, <#[R30]> */
		/* 82235C20h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82235C20h case    2:*/		return 0x82235C24;
		  /* 82235C24h */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 82235C24h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82235C4C;  }
		/* 82235C24h case    3:*/		return 0x82235C28;
		  /* 82235C28h */ case    4:  		/* cmplwi CR6, R31, 1 */
		/* 82235C28h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 82235C28h case    4:*/		return 0x82235C2C;
		  /* 82235C2Ch */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82235C2Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82235C4C;  }
		/* 82235C2Ch case    5:*/		return 0x82235C30;
		  /* 82235C30h */ case    6:  		/* lis R11, -32252 */
		/* 82235C30h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235C30h case    6:*/		return 0x82235C34;
		  /* 82235C34h */ case    7:  		/* li R7, 585 */
		/* 82235C34h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x249);
		/* 82235C34h case    7:*/		return 0x82235C38;
		  /* 82235C38h */ case    8:  		/* addi R5, R11, -25364 */
		/* 82235C38h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9CEC);
		/* 82235C38h case    8:*/		return 0x82235C3C;
	}
	return 0x82235C3C;
} // Block from 82235C18h-82235C3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235C3C);
		  /* 82235C3Ch */ case    0:  		/* mr R6, R27 */
		/* 82235C3Ch case    0:*/		regs.R6 = regs.R27;
		/* 82235C3Ch case    0:*/		return 0x82235C40;
		  /* 82235C40h */ case    1:  		/* mr R4, R28 */
		/* 82235C40h case    1:*/		regs.R4 = regs.R28;
		/* 82235C40h case    1:*/		return 0x82235C44;
		  /* 82235C44h */ case    2:  		/* li R3, 0 */
		/* 82235C44h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235C44h case    2:*/		return 0x82235C48;
	}
	return 0x82235C48;
} // Block from 82235C3Ch-82235C48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82235C48h
// Function '?Hash32@XGRAPHICS@@YAIPAIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235C48);
		  /* 82235C48h */ case    0:  		/* bl -909376 */
		/* 82235C48h case    0:*/		regs.LR = 0x82235C4C; return 0x82157C08;
		/* 82235C48h case    0:*/		return 0x82235C4C;
	}
	return 0x82235C4C;
} // Block from 82235C48h-82235C4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235C4C);
		  /* 82235C4Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82235C4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82235C4Ch case    0:*/		return 0x82235C50;
		  /* 82235C50h */ case    1:  		/* b -1722796 */
		/* 82235C50h case    1:*/		return 0x820912A4;
		/* 82235C50h case    1:*/		return 0x82235C54;
		  /* 82235C54h */ case    2:  		/* nop */
		/* 82235C54h case    2:*/		cpu::op::nop();
		/* 82235C54h case    2:*/		return 0x82235C58;
	}
	return 0x82235C58;
} // Block from 82235C4Ch-82235C58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82235C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235C58);
		  /* 82235C58h */ case    0:  		/* mfspr R12, LR */
		/* 82235C58h case    0:*/		regs.R12 = regs.LR;
		/* 82235C58h case    0:*/		return 0x82235C5C;
		  /* 82235C5Ch */ case    1:  		/* bl -1722880 */
		/* 82235C5Ch case    1:*/		regs.LR = 0x82235C60; return 0x8209125C;
		/* 82235C5Ch case    1:*/		return 0x82235C60;
		  /* 82235C60h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82235C60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82235C60h case    2:*/		return 0x82235C64;
		  /* 82235C64h */ case    3:  		/* lwz R11, <#[R4 + 16]> */
		/* 82235C64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 82235C64h case    3:*/		return 0x82235C68;
		  /* 82235C68h */ case    4:  		/* mr R29, R3 */
		/* 82235C68h case    4:*/		regs.R29 = regs.R3;
		/* 82235C68h case    4:*/		return 0x82235C6C;
		  /* 82235C6Ch */ case    5:  		/* mr R31, R4 */
		/* 82235C6Ch case    5:*/		regs.R31 = regs.R4;
		/* 82235C6Ch case    5:*/		return 0x82235C70;
		  /* 82235C70h */ case    6:  		/* mr R30, R5 */
		/* 82235C70h case    6:*/		regs.R30 = regs.R5;
		/* 82235C70h case    6:*/		return 0x82235C74;
		  /* 82235C74h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82235C74h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82235C74h case    7:*/		return 0x82235C78;
		  /* 82235C78h */ case    8:  		/* bc 4, CR6_EQ, 40 */
		/* 82235C78h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82235CA0;  }
		/* 82235C78h case    8:*/		return 0x82235C7C;
		  /* 82235C7Ch */ case    9:  		/* lis R11, -32252 */
		/* 82235C7Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235C7Ch case    9:*/		return 0x82235C80;
		  /* 82235C80h */ case   10:  		/* lis R10, -32252 */
		/* 82235C80h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235C80h case   10:*/		return 0x82235C84;
		  /* 82235C84h */ case   11:  		/* lis R9, -32253 */
		/* 82235C84h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82235C84h case   11:*/		return 0x82235C88;
		  /* 82235C88h */ case   12:  		/* addi R6, R11, 8520 */
		/* 82235C88h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 82235C88h case   12:*/		return 0x82235C8C;
		  /* 82235C8Ch */ case   13:  		/* addi R5, R10, 8492 */
		/* 82235C8Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x212C);
		/* 82235C8Ch case   13:*/		return 0x82235C90;
		  /* 82235C90h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82235C90h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82235C90h case   14:*/		return 0x82235C94;
		  /* 82235C94h */ case   15:  		/* li R7, 244 */
		/* 82235C94h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xF4);
		/* 82235C94h case   15:*/		return 0x82235C98;
		  /* 82235C98h */ case   16:  		/* li R3, 0 */
		/* 82235C98h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235C98h case   16:*/		return 0x82235C9C;
		  /* 82235C9Ch */ case   17:  		/* bl -909460 */
		/* 82235C9Ch case   17:*/		regs.LR = 0x82235CA0; return 0x82157C08;
		/* 82235C9Ch case   17:*/		return 0x82235CA0;
	}
	return 0x82235CA0;
} // Block from 82235C58h-82235CA0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82235CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235CA0);
		  /* 82235CA0h */ case    0:  		/* mr R4, R31 */
		/* 82235CA0h case    0:*/		regs.R4 = regs.R31;
		/* 82235CA0h case    0:*/		return 0x82235CA4;
		  /* 82235CA4h */ case    1:  		/* mr R3, R30 */
		/* 82235CA4h case    1:*/		regs.R3 = regs.R30;
		/* 82235CA4h case    1:*/		return 0x82235CA8;
		  /* 82235CA8h */ case    2:  		/* bl 121664 */
		/* 82235CA8h case    2:*/		regs.LR = 0x82235CAC; return 0x822537E8;
		/* 82235CA8h case    2:*/		return 0x82235CAC;
		  /* 82235CACh */ case    3:  		/* stw R29, <#[R30 + 16]> */
		/* 82235CACh case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000010) );
		/* 82235CACh case    3:*/		return 0x82235CB0;
		  /* 82235CB0h */ case    4:  		/* addi R1, R1, 112 */
		/* 82235CB0h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82235CB0h case    4:*/		return 0x82235CB4;
		  /* 82235CB4h */ case    5:  		/* b -1722888 */
		/* 82235CB4h case    5:*/		return 0x820912AC;
		/* 82235CB4h case    5:*/		return 0x82235CB8;
	}
	return 0x82235CB8;
} // Block from 82235CA0h-82235CB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82235CB8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235CB8);
		  /* 82235CB8h */ case    0:  		/* lbz R3, <#[R3 + 2144]> */
		/* 82235CB8h case    0:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000860) );
		/* 82235CB8h case    0:*/		return 0x82235CBC;
		  /* 82235CBCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 82235CBCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235CBCh case    1:*/		return 0x82235CC0;
	}
	return 0x82235CC0;
} // Block from 82235CB8h-82235CC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235CC0);
		  /* 82235CC0h */ case    0:  		/* mfspr R12, LR */
		/* 82235CC0h case    0:*/		regs.R12 = regs.LR;
		/* 82235CC0h case    0:*/		return 0x82235CC4;
		  /* 82235CC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235CC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235CC4h case    1:*/		return 0x82235CC8;
		  /* 82235CC8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82235CC8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235CC8h case    2:*/		return 0x82235CCC;
		  /* 82235CCCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82235CCCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82235CCCh case    3:*/		return 0x82235CD0;
		  /* 82235CD0h */ case    4:  		/* mr R31, R3 */
		/* 82235CD0h case    4:*/		regs.R31 = regs.R3;
		/* 82235CD0h case    4:*/		return 0x82235CD4;
		  /* 82235CD4h */ case    5:  		/* lwz R3, <#[R3 + 172]> */
		/* 82235CD4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000AC) );
		/* 82235CD4h case    5:*/		return 0x82235CD8;
		  /* 82235CD8h */ case    6:  		/* bl 63976 */
		/* 82235CD8h case    6:*/		regs.LR = 0x82235CDC; return 0x822456C0;
		/* 82235CD8h case    6:*/		return 0x82235CDC;
		  /* 82235CDCh */ case    7:  		/* lwz R10, <#[R31 + 12]> */
		/* 82235CDCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82235CDCh case    7:*/		return 0x82235CE0;
		  /* 82235CE0h */ case    8:  		/* li R11, 1 */
		/* 82235CE0h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82235CE0h case    8:*/		return 0x82235CE4;
		  /* 82235CE4h */ case    9:  		/* stb R11, <#[R10 + 1394]> */
		/* 82235CE4h case    9:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0x00000572) );
		/* 82235CE4h case    9:*/		return 0x82235CE8;
		  /* 82235CE8h */ case   10:  		/* addi R1, R1, 96 */
		/* 82235CE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82235CE8h case   10:*/		return 0x82235CEC;
		  /* 82235CECh */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 82235CECh case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235CECh case   11:*/		return 0x82235CF0;
		  /* 82235CF0h */ case   12:  		/* mtspr LR, R12 */
		/* 82235CF0h case   12:*/		regs.LR = regs.R12;
		/* 82235CF0h case   12:*/		return 0x82235CF4;
		  /* 82235CF4h */ case   13:  		/* ld R31, <#[R1 - 16]> */
		/* 82235CF4h case   13:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235CF4h case   13:*/		return 0x82235CF8;
		  /* 82235CF8h */ case   14:  		/* bclr 20, CR0_LT */
		/* 82235CF8h case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235CF8h case   14:*/		return 0x82235CFC;
	}
	return 0x82235CFC;
} // Block from 82235CC0h-82235CFCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82235CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235CFC);
		  /* 82235CFCh */ case    0:  		/* nop */
		/* 82235CFCh case    0:*/		cpu::op::nop();
		/* 82235CFCh case    0:*/		return 0x82235D00;
	}
	return 0x82235D00;
} // Block from 82235CFCh-82235D00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235D00h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235D00);
		  /* 82235D00h */ case    0:  		/* mfspr R12, LR */
		/* 82235D00h case    0:*/		regs.R12 = regs.LR;
		/* 82235D00h case    0:*/		return 0x82235D04;
		  /* 82235D04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235D04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235D04h case    1:*/		return 0x82235D08;
		  /* 82235D08h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82235D08h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82235D08h case    2:*/		return 0x82235D0C;
		  /* 82235D0Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82235D0Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235D0Ch case    3:*/		return 0x82235D10;
		  /* 82235D10h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82235D10h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82235D10h case    4:*/		return 0x82235D14;
		  /* 82235D14h */ case    5:  		/* addi R31, R3, 184 */
		/* 82235D14h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0xB8);
		/* 82235D14h case    5:*/		return 0x82235D18;
		  /* 82235D18h */ case    6:  		/* mr R30, R4 */
		/* 82235D18h case    6:*/		regs.R30 = regs.R4;
		/* 82235D18h case    6:*/		return 0x82235D1C;
		  /* 82235D1Ch */ case    7:  		/* mr R3, R31 */
		/* 82235D1Ch case    7:*/		regs.R3 = regs.R31;
		/* 82235D1Ch case    7:*/		return 0x82235D20;
		  /* 82235D20h */ case    8:  		/* bl 114688 */
		/* 82235D20h case    8:*/		regs.LR = 0x82235D24; return 0x82251D20;
		/* 82235D20h case    8:*/		return 0x82235D24;
		  /* 82235D24h */ case    9:  		/* mr R4, R30 */
		/* 82235D24h case    9:*/		regs.R4 = regs.R30;
		/* 82235D24h case    9:*/		return 0x82235D28;
		  /* 82235D28h */ case   10:  		/* mr R3, R31 */
		/* 82235D28h case   10:*/		regs.R3 = regs.R31;
		/* 82235D28h case   10:*/		return 0x82235D2C;
		  /* 82235D2Ch */ case   11:  		/* bl 114804 */
		/* 82235D2Ch case   11:*/		regs.LR = 0x82235D30; return 0x82251DA0;
		/* 82235D2Ch case   11:*/		return 0x82235D30;
		  /* 82235D30h */ case   12:  		/* addi R1, R1, 112 */
		/* 82235D30h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82235D30h case   12:*/		return 0x82235D34;
		  /* 82235D34h */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 82235D34h case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235D34h case   13:*/		return 0x82235D38;
		  /* 82235D38h */ case   14:  		/* mtspr LR, R12 */
		/* 82235D38h case   14:*/		regs.LR = regs.R12;
		/* 82235D38h case   14:*/		return 0x82235D3C;
		  /* 82235D3Ch */ case   15:  		/* ld R30, <#[R1 - 24]> */
		/* 82235D3Ch case   15:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82235D3Ch case   15:*/		return 0x82235D40;
		  /* 82235D40h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 82235D40h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235D40h case   16:*/		return 0x82235D44;
		  /* 82235D44h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82235D44h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235D44h case   17:*/		return 0x82235D48;
	}
	return 0x82235D48;
} // Block from 82235D00h-82235D48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82235D48h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235D48);
		  /* 82235D48h */ case    0:  		/* lbz R3, <#[R3 + 2072]> */
		/* 82235D48h case    0:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000818) );
		/* 82235D48h case    0:*/		return 0x82235D4C;
		  /* 82235D4Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 82235D4Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235D4Ch case    1:*/		return 0x82235D50;
	}
	return 0x82235D50;
} // Block from 82235D48h-82235D50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235D50h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235D50);
		  /* 82235D50h */ case    0:  		/* lwz R3, <#[R3 + 2076]> */
		/* 82235D50h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000081C) );
		/* 82235D50h case    0:*/		return 0x82235D54;
		  /* 82235D54h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82235D54h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235D54h case    1:*/		return 0x82235D58;
	}
	return 0x82235D58;
} // Block from 82235D50h-82235D58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235D58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235D58);
		  /* 82235D58h */ case    0:  		/* lbz R3, <#[R3 + 2073]> */
		/* 82235D58h case    0:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000819) );
		/* 82235D58h case    0:*/		return 0x82235D5C;
		  /* 82235D5Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 82235D5Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235D5Ch case    1:*/		return 0x82235D60;
	}
	return 0x82235D60;
} // Block from 82235D58h-82235D60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82235D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235D60);
		  /* 82235D60h */ case    0:  		/* mfspr R12, LR */
		/* 82235D60h case    0:*/		regs.R12 = regs.LR;
		/* 82235D60h case    0:*/		return 0x82235D64;
		  /* 82235D64h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235D64h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235D64h case    1:*/		return 0x82235D68;
		  /* 82235D68h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82235D68h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235D68h case    2:*/		return 0x82235D6C;
		  /* 82235D6Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82235D6Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82235D6Ch case    3:*/		return 0x82235D70;
		  /* 82235D70h */ case    4:  		/* li R10, 0 */
		/* 82235D70h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82235D70h case    4:*/		return 0x82235D74;
		  /* 82235D74h */ case    5:  		/* stw R4, <#[R3 + 12]> */
		/* 82235D74h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 82235D74h case    5:*/		return 0x82235D78;
		  /* 82235D78h */ case    6:  		/* li R9, 2 */
		/* 82235D78h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82235D78h case    6:*/		return 0x82235D7C;
		  /* 82235D7Ch */ case    7:  		/* stw R10, <#[R3 + 4]> */
		/* 82235D7Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82235D7Ch case    7:*/		return 0x82235D80;
		  /* 82235D80h */ case    8:  		/* mr R11, R4 */
		/* 82235D80h case    8:*/		regs.R11 = regs.R4;
		/* 82235D80h case    8:*/		return 0x82235D84;
		  /* 82235D84h */ case    9:  		/* stw R9, <#[R3]> */
		/* 82235D84h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82235D84h case    9:*/		return 0x82235D88;
		  /* 82235D88h */ case   10:  		/* mr R31, R3 */
		/* 82235D88h case   10:*/		regs.R31 = regs.R3;
		/* 82235D88h case   10:*/		return 0x82235D8C;
		  /* 82235D8Ch */ case   11:  		/* li R4, 8 */
		/* 82235D8Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82235D8Ch case   11:*/		return 0x82235D90;
		  /* 82235D90h */ case   12:  		/* mr R3, R11 */
		/* 82235D90h case   12:*/		regs.R3 = regs.R11;
		/* 82235D90h case   12:*/		return 0x82235D94;
		  /* 82235D94h */ case   13:  		/* bl -104668 */
		/* 82235D94h case   13:*/		regs.LR = 0x82235D98; return 0x8221C4B8;
		/* 82235D94h case   13:*/		return 0x82235D98;
		  /* 82235D98h */ case   14:  		/* stw R3, <#[R31 + 8]> */
		/* 82235D98h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82235D98h case   14:*/		return 0x82235D9C;
		  /* 82235D9Ch */ case   15:  		/* mr R3, R31 */
		/* 82235D9Ch case   15:*/		regs.R3 = regs.R31;
		/* 82235D9Ch case   15:*/		return 0x82235DA0;
		  /* 82235DA0h */ case   16:  		/* addi R1, R1, 96 */
		/* 82235DA0h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82235DA0h case   16:*/		return 0x82235DA4;
		  /* 82235DA4h */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 82235DA4h case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235DA4h case   17:*/		return 0x82235DA8;
		  /* 82235DA8h */ case   18:  		/* mtspr LR, R12 */
		/* 82235DA8h case   18:*/		regs.LR = regs.R12;
		/* 82235DA8h case   18:*/		return 0x82235DAC;
		  /* 82235DACh */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 82235DACh case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235DACh case   19:*/		return 0x82235DB0;
		  /* 82235DB0h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82235DB0h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235DB0h case   20:*/		return 0x82235DB4;
	}
	return 0x82235DB4;
} // Block from 82235D60h-82235DB4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82235DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235DB4);
		  /* 82235DB4h */ case    0:  		/* nop */
		/* 82235DB4h case    0:*/		cpu::op::nop();
		/* 82235DB4h case    0:*/		return 0x82235DB8;
	}
	return 0x82235DB8;
} // Block from 82235DB4h-82235DB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235DB8);
		  /* 82235DB8h */ case    0:  		/* mfspr R12, LR */
		/* 82235DB8h case    0:*/		regs.R12 = regs.LR;
		/* 82235DB8h case    0:*/		return 0x82235DBC;
		  /* 82235DBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235DBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235DBCh case    1:*/		return 0x82235DC0;
		  /* 82235DC0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82235DC0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235DC0h case    2:*/		return 0x82235DC4;
		  /* 82235DC4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82235DC4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82235DC4h case    3:*/		return 0x82235DC8;
		  /* 82235DC8h */ case    4:  		/* lwz R11, <#[R3 + 228]> */
		/* 82235DC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000E4) );
		/* 82235DC8h case    4:*/		return 0x82235DCC;
		  /* 82235DCCh */ case    5:  		/* mr R31, R3 */
		/* 82235DCCh case    5:*/		regs.R31 = regs.R3;
		/* 82235DCCh case    5:*/		return 0x82235DD0;
		  /* 82235DD0h */ case    6:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 82235DD0h case    6:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 82235DD0h case    6:*/		return 0x82235DD4;
		  /* 82235DD4h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 82235DD4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82235DFC;  }
		/* 82235DD4h case    7:*/		return 0x82235DD8;
		  /* 82235DD8h */ case    8:  		/* lis R11, -32252 */
		/* 82235DD8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235DD8h case    8:*/		return 0x82235DDC;
		  /* 82235DDCh */ case    9:  		/* lis R10, -32252 */
		/* 82235DDCh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235DDCh case    9:*/		return 0x82235DE0;
	}
	return 0x82235DE0;
} // Block from 82235DB8h-82235DE0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82235DE0h
// Function '?FloatToFixed@XGRAPHICS@@YAHMII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235DE0);
		  /* 82235DE0h */ case    0:  		/* lis R9, -32253 */
		/* 82235DE0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82235DE0h case    0:*/		return 0x82235DE4;
		  /* 82235DE4h */ case    1:  		/* addi R6, R11, 8704 */
		/* 82235DE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2200);
		/* 82235DE4h case    1:*/		return 0x82235DE8;
		  /* 82235DE8h */ case    2:  		/* addi R5, R10, 8676 */
		/* 82235DE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x21E4);
		/* 82235DE8h case    2:*/		return 0x82235DEC;
		  /* 82235DECh */ case    3:  		/* addi R4, R9, 27460 */
		/* 82235DECh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82235DECh case    3:*/		return 0x82235DF0;
		  /* 82235DF0h */ case    4:  		/* li R7, 1902 */
		/* 82235DF0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x76E);
		/* 82235DF0h case    4:*/		return 0x82235DF4;
		  /* 82235DF4h */ case    5:  		/* li R3, 0 */
		/* 82235DF4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235DF4h case    5:*/		return 0x82235DF8;
		  /* 82235DF8h */ case    6:  		/* bl -909808 */
		/* 82235DF8h case    6:*/		regs.LR = 0x82235DFC; return 0x82157C08;
		/* 82235DF8h case    6:*/		return 0x82235DFC;
	}
	return 0x82235DFC;
} // Block from 82235DE0h-82235DFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82235DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235DFC);
		  /* 82235DFCh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235DFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235DFCh case    0:*/		return 0x82235E00;
		  /* 82235E00h */ case    1:  		/* addi R11, R11, 58 */
		/* 82235E00h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3A);
		/* 82235E00h case    1:*/		return 0x82235E04;
		  /* 82235E04h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82235E04h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82235E04h case    2:*/		return 0x82235E08;
		  /* 82235E08h */ case    3:  		/* lwzx R3, <#[R11 + R31]> */
		/* 82235E08h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82235E08h case    3:*/		return 0x82235E0C;
		  /* 82235E0Ch */ case    4:  		/* addi R1, R1, 96 */
		/* 82235E0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82235E0Ch case    4:*/		return 0x82235E10;
		  /* 82235E10h */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 82235E10h case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235E10h case    5:*/		return 0x82235E14;
		  /* 82235E14h */ case    6:  		/* mtspr LR, R12 */
		/* 82235E14h case    6:*/		regs.LR = regs.R12;
		/* 82235E14h case    6:*/		return 0x82235E18;
		  /* 82235E18h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 82235E18h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235E18h case    7:*/		return 0x82235E1C;
		  /* 82235E1Ch */ case    8:  		/* bclr 20, CR0_LT */
		/* 82235E1Ch case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235E1Ch case    8:*/		return 0x82235E20;
	}
	return 0x82235E20;
} // Block from 82235DFCh-82235E20h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82235E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235E20);
		  /* 82235E20h */ case    0:  		/* mfspr R12, LR */
		/* 82235E20h case    0:*/		regs.R12 = regs.LR;
		/* 82235E20h case    0:*/		return 0x82235E24;
		  /* 82235E24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235E24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235E24h case    1:*/		return 0x82235E28;
		  /* 82235E28h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82235E28h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235E28h case    2:*/		return 0x82235E2C;
		  /* 82235E2Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82235E2Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82235E2Ch case    3:*/		return 0x82235E30;
		  /* 82235E30h */ case    4:  		/* lwz R11, <#[R3 + 228]> */
		/* 82235E30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000E4) );
		/* 82235E30h case    4:*/		return 0x82235E34;
		  /* 82235E34h */ case    5:  		/* mr R31, R3 */
		/* 82235E34h case    5:*/		regs.R31 = regs.R3;
		/* 82235E34h case    5:*/		return 0x82235E38;
		  /* 82235E38h */ case    6:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 82235E38h case    6:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 82235E38h case    6:*/		return 0x82235E3C;
		  /* 82235E3Ch */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 82235E3Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x82235E64;  }
		/* 82235E3Ch case    7:*/		return 0x82235E40;
		  /* 82235E40h */ case    8:  		/* lis R11, -32252 */
		/* 82235E40h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235E40h case    8:*/		return 0x82235E44;
		  /* 82235E44h */ case    9:  		/* lis R10, -32252 */
		/* 82235E44h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235E44h case    9:*/		return 0x82235E48;
		  /* 82235E48h */ case   10:  		/* lis R9, -32253 */
		/* 82235E48h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82235E48h case   10:*/		return 0x82235E4C;
		  /* 82235E4Ch */ case   11:  		/* addi R6, R11, 8704 */
		/* 82235E4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2200);
		/* 82235E4Ch case   11:*/		return 0x82235E50;
		  /* 82235E50h */ case   12:  		/* addi R5, R10, 8676 */
		/* 82235E50h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x21E4);
		/* 82235E50h case   12:*/		return 0x82235E54;
		  /* 82235E54h */ case   13:  		/* addi R4, R9, 27460 */
		/* 82235E54h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82235E54h case   13:*/		return 0x82235E58;
		  /* 82235E58h */ case   14:  		/* li R7, 1909 */
		/* 82235E58h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x775);
		/* 82235E58h case   14:*/		return 0x82235E5C;
		  /* 82235E5Ch */ case   15:  		/* li R3, 0 */
		/* 82235E5Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235E5Ch case   15:*/		return 0x82235E60;
		  /* 82235E60h */ case   16:  		/* bl -909912 */
		/* 82235E60h case   16:*/		regs.LR = 0x82235E64; return 0x82157C08;
		/* 82235E60h case   16:*/		return 0x82235E64;
	}
	return 0x82235E64;
} // Block from 82235E20h-82235E64h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82235E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235E64);
		  /* 82235E64h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235E64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235E64h case    0:*/		return 0x82235E68;
		  /* 82235E68h */ case    1:  		/* li R10, 0 */
		/* 82235E68h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82235E68h case    1:*/		return 0x82235E6C;
		  /* 82235E6Ch */ case    2:  		/* addi R11, R11, 58 */
		/* 82235E6Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3A);
		/* 82235E6Ch case    2:*/		return 0x82235E70;
		  /* 82235E70h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82235E70h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82235E70h case    3:*/		return 0x82235E74;
		  /* 82235E74h */ case    4:  		/* stwx R10, <#[R11 + R31]> */
		/* 82235E74h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82235E74h case    4:*/		return 0x82235E78;
		  /* 82235E78h */ case    5:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235E78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235E78h case    5:*/		return 0x82235E7C;
		  /* 82235E7Ch */ case    6:  		/* lwz R10, <#[R31 + 228]> */
		/* 82235E7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000E4) );
		/* 82235E7Ch case    6:*/		return 0x82235E80;
		  /* 82235E80h */ case    7:  		/* rlwinm R10, R10, 0, 23, 21 */
		/* 82235E80h case    7:*/		cpu::op::rlwinm<0,0,23,21>(regs,&regs.R10,regs.R10);
		/* 82235E80h case    7:*/		return 0x82235E84;
		  /* 82235E84h */ case    8:  		/* addi R11, R11, -1 */
		/* 82235E84h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82235E84h case    8:*/		return 0x82235E88;
		  /* 82235E88h */ case    9:  		/* stw R10, <#[R31 + 228]> */
		/* 82235E88h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000E4) );
		/* 82235E88h case    9:*/		return 0x82235E8C;
		  /* 82235E8Ch */ case   10:  		/* stw R11, <#[R31 + 20]> */
		/* 82235E8Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235E8Ch case   10:*/		return 0x82235E90;
	}
	return 0x82235E90;
} // Block from 82235E64h-82235E90h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82235E90h
// Function '?R400SetRenderState@XGRAPHICS@@YAXPAU_CP_COMPILED_PROGRAM@1@W4_E_R400_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235E90);
		  /* 82235E90h */ case    0:  		/* addi R1, R1, 96 */
		/* 82235E90h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82235E90h case    0:*/		return 0x82235E94;
		  /* 82235E94h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82235E94h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235E94h case    1:*/		return 0x82235E98;
		  /* 82235E98h */ case    2:  		/* mtspr LR, R12 */
		/* 82235E98h case    2:*/		regs.LR = regs.R12;
		/* 82235E98h case    2:*/		return 0x82235E9C;
		  /* 82235E9Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82235E9Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235E9Ch case    3:*/		return 0x82235EA0;
		  /* 82235EA0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82235EA0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235EA0h case    4:*/		return 0x82235EA4;
	}
	return 0x82235EA4;
} // Block from 82235E90h-82235EA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82235EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235EA4);
		  /* 82235EA4h */ case    0:  		/* nop */
		/* 82235EA4h case    0:*/		cpu::op::nop();
		/* 82235EA4h case    0:*/		return 0x82235EA8;
	}
	return 0x82235EA8;
} // Block from 82235EA4h-82235EA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235EA8);
		  /* 82235EA8h */ case    0:  		/* mfspr R12, LR */
		/* 82235EA8h case    0:*/		regs.R12 = regs.LR;
		/* 82235EA8h case    0:*/		return 0x82235EAC;
		  /* 82235EACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235EACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235EACh case    1:*/		return 0x82235EB0;
		  /* 82235EB0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82235EB0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82235EB0h case    2:*/		return 0x82235EB4;
		  /* 82235EB4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82235EB4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235EB4h case    3:*/		return 0x82235EB8;
		  /* 82235EB8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82235EB8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82235EB8h case    4:*/		return 0x82235EBC;
		  /* 82235EBCh */ case    5:  		/* mr R31, R3 */
		/* 82235EBCh case    5:*/		regs.R31 = regs.R3;
		/* 82235EBCh case    5:*/		return 0x82235EC0;
		  /* 82235EC0h */ case    6:  		/* mr R30, R4 */
		/* 82235EC0h case    6:*/		regs.R30 = regs.R4;
		/* 82235EC0h case    6:*/		return 0x82235EC4;
		  /* 82235EC4h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 82235EC4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82235EC4h case    7:*/		return 0x82235EC8;
		  /* 82235EC8h */ case    8:  		/* bc 4, CR6_EQ, 40 */
		/* 82235EC8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82235EF0;  }
		/* 82235EC8h case    8:*/		return 0x82235ECC;
		  /* 82235ECCh */ case    9:  		/* lis R11, -32252 */
		/* 82235ECCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235ECCh case    9:*/		return 0x82235ED0;
		  /* 82235ED0h */ case   10:  		/* lis R10, -32252 */
		/* 82235ED0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235ED0h case   10:*/		return 0x82235ED4;
		  /* 82235ED4h */ case   11:  		/* lis R9, -32253 */
		/* 82235ED4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82235ED4h case   11:*/		return 0x82235ED8;
		  /* 82235ED8h */ case   12:  		/* addi R6, R11, 8704 */
		/* 82235ED8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2200);
		/* 82235ED8h case   12:*/		return 0x82235EDC;
		  /* 82235EDCh */ case   13:  		/* addi R5, R10, 8796 */
		/* 82235EDCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x225C);
		/* 82235EDCh case   13:*/		return 0x82235EE0;
		  /* 82235EE0h */ case   14:  		/* addi R4, R9, 27460 */
		/* 82235EE0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82235EE0h case   14:*/		return 0x82235EE4;
		  /* 82235EE4h */ case   15:  		/* li R7, 1919 */
		/* 82235EE4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x77F);
		/* 82235EE4h case   15:*/		return 0x82235EE8;
		  /* 82235EE8h */ case   16:  		/* li R3, 0 */
		/* 82235EE8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235EE8h case   16:*/		return 0x82235EEC;
		  /* 82235EECh */ case   17:  		/* bl -910052 */
		/* 82235EECh case   17:*/		regs.LR = 0x82235EF0; return 0x82157C08;
		/* 82235EECh case   17:*/		return 0x82235EF0;
	}
	return 0x82235EF0;
} // Block from 82235EA8h-82235EF0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82235EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235EF0);
		  /* 82235EF0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235EF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235EF0h case    0:*/		return 0x82235EF4;
		  /* 82235EF4h */ case    1:  		/* lwz R10, <#[R31 + 228]> */
		/* 82235EF4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000E4) );
		/* 82235EF4h case    1:*/		return 0x82235EF8;
		  /* 82235EF8h */ case    2:  		/* addi R11, R11, 1 */
		/* 82235EF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82235EF8h case    2:*/		return 0x82235EFC;
		  /* 82235EFCh */ case    3:  		/* rlwinm. R10, R10, 23, 31, 31 */
		/* 82235EFCh case    3:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R10,regs.R10);
		/* 82235EFCh case    3:*/		return 0x82235F00;
		  /* 82235F00h */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 82235F00h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235F00h case    4:*/		return 0x82235F04;
		  /* 82235F04h */ case    5:  		/* bc 12, CR0_EQ, 40 */
		/* 82235F04h case    5:*/		if ( regs.CR[0].eq ) { return 0x82235F2C;  }
		/* 82235F04h case    5:*/		return 0x82235F08;
		  /* 82235F08h */ case    6:  		/* addi R10, R11, 57 */
		/* 82235F08h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x39);
		/* 82235F08h case    6:*/		return 0x82235F0C;
		  /* 82235F0Ch */ case    7:  		/* addi R11, R11, 58 */
		/* 82235F0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3A);
		/* 82235F0Ch case    7:*/		return 0x82235F10;
		  /* 82235F10h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82235F10h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82235F10h case    8:*/		return 0x82235F14;
		  /* 82235F14h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82235F14h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82235F14h case    9:*/		return 0x82235F18;
		  /* 82235F18h */ case   10:  		/* lwzx R10, <#[R10 + R31]> */
		/* 82235F18h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 82235F18h case   10:*/		return 0x82235F1C;
		  /* 82235F1Ch */ case   11:  		/* stwx R10, <#[R11 + R31]> */
		/* 82235F1Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82235F1Ch case   11:*/		return 0x82235F20;
		  /* 82235F20h */ case   12:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235F20h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235F20h case   12:*/		return 0x82235F24;
		  /* 82235F24h */ case   13:  		/* addi R11, R11, 57 */
		/* 82235F24h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x39);
		/* 82235F24h case   13:*/		return 0x82235F28;
		  /* 82235F28h */ case   14:  		/* b 8 */
		/* 82235F28h case   14:*/		return 0x82235F30;
		/* 82235F28h case   14:*/		return 0x82235F2C;
	}
	return 0x82235F2C;
} // Block from 82235EF0h-82235F2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82235F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235F2C);
		  /* 82235F2Ch */ case    0:  		/* addi R11, R11, 58 */
		/* 82235F2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3A);
		/* 82235F2Ch case    0:*/		return 0x82235F30;
	}
	return 0x82235F30;
} // Block from 82235F2Ch-82235F30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82235F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235F30);
		  /* 82235F30h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82235F30h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82235F30h case    0:*/		return 0x82235F34;
		  /* 82235F34h */ case    1:  		/* stwx R30, <#[R11 + R31]> */
		/* 82235F34h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82235F34h case    1:*/		return 0x82235F38;
		  /* 82235F38h */ case    2:  		/* addi R1, R1, 112 */
		/* 82235F38h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82235F38h case    2:*/		return 0x82235F3C;
		  /* 82235F3Ch */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 82235F3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235F3Ch case    3:*/		return 0x82235F40;
		  /* 82235F40h */ case    4:  		/* mtspr LR, R12 */
		/* 82235F40h case    4:*/		regs.LR = regs.R12;
		/* 82235F40h case    4:*/		return 0x82235F44;
		  /* 82235F44h */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 82235F44h case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82235F44h case    5:*/		return 0x82235F48;
		  /* 82235F48h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82235F48h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82235F48h case    6:*/		return 0x82235F4C;
		  /* 82235F4Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 82235F4Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82235F4Ch case    7:*/		return 0x82235F50;
	}
	return 0x82235F50;
} // Block from 82235F30h-82235F50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82235F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235F50);
		  /* 82235F50h */ case    0:  		/* mfspr R12, LR */
		/* 82235F50h case    0:*/		regs.R12 = regs.LR;
		/* 82235F50h case    0:*/		return 0x82235F54;
		  /* 82235F54h */ case    1:  		/* bl -1723648 */
		/* 82235F54h case    1:*/		regs.LR = 0x82235F58; return 0x82091254;
		/* 82235F54h case    1:*/		return 0x82235F58;
		  /* 82235F58h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82235F58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82235F58h case    2:*/		return 0x82235F5C;
		  /* 82235F5Ch */ case    3:  		/* lwz R9, <#[R3 + 20]> */
		/* 82235F5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82235F5Ch case    3:*/		return 0x82235F60;
		  /* 82235F60h */ case    4:  		/* lis R11, -32253 */
		/* 82235F60h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82235F60h case    4:*/		return 0x82235F64;
		  /* 82235F64h */ case    5:  		/* lis R10, -32252 */
		/* 82235F64h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82235F64h case    5:*/		return 0x82235F68;
		  /* 82235F68h */ case    6:  		/* mr R31, R3 */
		/* 82235F68h case    6:*/		regs.R31 = regs.R3;
		/* 82235F68h case    6:*/		return 0x82235F6C;
		  /* 82235F6Ch */ case    7:  		/* mr R30, R4 */
		/* 82235F6Ch case    7:*/		regs.R30 = regs.R4;
		/* 82235F6Ch case    7:*/		return 0x82235F70;
		  /* 82235F70h */ case    8:  		/* mr R27, R5 */
		/* 82235F70h case    8:*/		regs.R27 = regs.R5;
		/* 82235F70h case    8:*/		return 0x82235F74;
		  /* 82235F74h */ case    9:  		/* addi R29, R11, 27460 */
		/* 82235F74h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 82235F74h case    9:*/		return 0x82235F78;
		  /* 82235F78h */ case   10:  		/* addi R28, R10, 8704 */
		/* 82235F78h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x2200);
		/* 82235F78h case   10:*/		return 0x82235F7C;
		  /* 82235F7Ch */ case   11:  		/* cmpw CR6, R4, R9 */
		/* 82235F7Ch case   11:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R9);
		/* 82235F7Ch case   11:*/		return 0x82235F80;
		  /* 82235F80h */ case   12:  		/* bc 4, CR6_GT, 32 */
		/* 82235F80h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82235FA0;  }
		/* 82235F80h case   12:*/		return 0x82235F84;
		  /* 82235F84h */ case   13:  		/* lis R11, -32252 */
		/* 82235F84h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235F84h case   13:*/		return 0x82235F88;
	}
	return 0x82235F88;
} // Block from 82235F50h-82235F88h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82235F88h
// Function '?r400ConvertColorFloatArrayToHwIntArray@XGRAPHICS@@YAIQAMQAIIIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235F88);
		  /* 82235F88h */ case    0:  		/* mr R6, R28 */
		/* 82235F88h case    0:*/		regs.R6 = regs.R28;
		/* 82235F88h case    0:*/		return 0x82235F8C;
		  /* 82235F8Ch */ case    1:  		/* addi R5, R11, 8880 */
		/* 82235F8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22B0);
		/* 82235F8Ch case    1:*/		return 0x82235F90;
		  /* 82235F90h */ case    2:  		/* mr R4, R29 */
		/* 82235F90h case    2:*/		regs.R4 = regs.R29;
		/* 82235F90h case    2:*/		return 0x82235F94;
		  /* 82235F94h */ case    3:  		/* li R7, 1945 */
		/* 82235F94h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x799);
		/* 82235F94h case    3:*/		return 0x82235F98;
		  /* 82235F98h */ case    4:  		/* li R3, 0 */
		/* 82235F98h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235F98h case    4:*/		return 0x82235F9C;
		  /* 82235F9Ch */ case    5:  		/* bl -910228 */
		/* 82235F9Ch case    5:*/		regs.LR = 0x82235FA0; return 0x82157C08;
		/* 82235F9Ch case    5:*/		return 0x82235FA0;
	}
	return 0x82235FA0;
} // Block from 82235F88h-82235FA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82235FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235FA0);
		  /* 82235FA0h */ case    0:  		/* lwz R11, <#[R31 + 952]> */
		/* 82235FA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000003B8) );
		/* 82235FA0h case    0:*/		return 0x82235FA4;
		  /* 82235FA4h */ case    1:  		/* lbz R11, <#[R11 + 1393]> */
		/* 82235FA4h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000571) );
		/* 82235FA4h case    1:*/		return 0x82235FA8;
		  /* 82235FA8h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 82235FA8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82235FA8h case    2:*/		return 0x82235FAC;
		  /* 82235FACh */ case    3:  		/* bc 12, CR0_EQ, 56 */
		/* 82235FACh case    3:*/		if ( regs.CR[0].eq ) { return 0x82235FE4;  }
		/* 82235FACh case    3:*/		return 0x82235FB0;
		  /* 82235FB0h */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 82235FB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82235FB0h case    4:*/		return 0x82235FB4;
		  /* 82235FB4h */ case    5:  		/* cmpw CR6, R30, R11 */
		/* 82235FB4h case    5:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 82235FB4h case    5:*/		return 0x82235FB8;
		  /* 82235FB8h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 82235FB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82235FE4;  }
		/* 82235FB8h case    6:*/		return 0x82235FBC;
		  /* 82235FBCh */ case    7:  		/* lwz R11, <#[R31 + 228]> */
		/* 82235FBCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 82235FBCh case    7:*/		return 0x82235FC0;
		  /* 82235FC0h */ case    8:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 82235FC0h case    8:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 82235FC0h case    8:*/		return 0x82235FC4;
		  /* 82235FC4h */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 82235FC4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82235FE4;  }
		/* 82235FC4h case    9:*/		return 0x82235FC8;
		  /* 82235FC8h */ case   10:  		/* lis R11, -32252 */
		/* 82235FC8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82235FC8h case   10:*/		return 0x82235FCC;
		  /* 82235FCCh */ case   11:  		/* mr R6, R28 */
		/* 82235FCCh case   11:*/		regs.R6 = regs.R28;
		/* 82235FCCh case   11:*/		return 0x82235FD0;
		  /* 82235FD0h */ case   12:  		/* addi R5, R11, 8808 */
		/* 82235FD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2268);
		/* 82235FD0h case   12:*/		return 0x82235FD4;
		  /* 82235FD4h */ case   13:  		/* mr R4, R29 */
		/* 82235FD4h case   13:*/		regs.R4 = regs.R29;
		/* 82235FD4h case   13:*/		return 0x82235FD8;
		  /* 82235FD8h */ case   14:  		/* li R7, 1948 */
		/* 82235FD8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x79C);
		/* 82235FD8h case   14:*/		return 0x82235FDC;
		  /* 82235FDCh */ case   15:  		/* li R3, 0 */
		/* 82235FDCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82235FDCh case   15:*/		return 0x82235FE0;
		  /* 82235FE0h */ case   16:  		/* bl -910296 */
		/* 82235FE0h case   16:*/		regs.LR = 0x82235FE4; return 0x82157C08;
		/* 82235FE0h case   16:*/		return 0x82235FE4;
	}
	return 0x82235FE4;
} // Block from 82235FA0h-82235FE4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82235FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235FE4);
		  /* 82235FE4h */ case    0:  		/* addi R11, R30, 58 */
		/* 82235FE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3A);
		/* 82235FE4h case    0:*/		return 0x82235FE8;
		  /* 82235FE8h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82235FE8h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82235FE8h case    1:*/		return 0x82235FEC;
		  /* 82235FECh */ case    2:  		/* stwx R27, <#[R11 + R31]> */
		/* 82235FECh case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82235FECh case    2:*/		return 0x82235FF0;
		  /* 82235FF0h */ case    3:  		/* addi R1, R1, 128 */
		/* 82235FF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82235FF0h case    3:*/		return 0x82235FF4;
		  /* 82235FF4h */ case    4:  		/* b -1723728 */
		/* 82235FF4h case    4:*/		return 0x820912A4;
		/* 82235FF4h case    4:*/		return 0x82235FF8;
	}
	return 0x82235FF8;
} // Block from 82235FE4h-82235FF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82235FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82235FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82235FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82235FF8);
		  /* 82235FF8h */ case    0:  		/* mfspr R12, LR */
		/* 82235FF8h case    0:*/		regs.R12 = regs.LR;
		/* 82235FF8h case    0:*/		return 0x82235FFC;
		  /* 82235FFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82235FFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82235FFCh case    1:*/		return 0x82236000;
		  /* 82236000h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82236000h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82236000h case    2:*/		return 0x82236004;
		  /* 82236004h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82236004h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82236004h case    3:*/		return 0x82236008;
		  /* 82236008h */ case    4:  		/* lwz R3, <#[R3 + 2068]> */
		/* 82236008h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000814) );
		/* 82236008h case    4:*/		return 0x8223600C;
		  /* 8223600Ch */ case    5:  		/* mr R31, R4 */
		/* 8223600Ch case    5:*/		regs.R31 = regs.R4;
		/* 8223600Ch case    5:*/		return 0x82236010;
		  /* 82236010h */ case    6:  		/* lwz R4, <#[R3 + 4]> */
		/* 82236010h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 82236010h case    6:*/		return 0x82236014;
		  /* 82236014h */ case    7:  		/* bl 121516 */
		/* 82236014h case    7:*/		regs.LR = 0x82236018; return 0x82253AC0;
		/* 82236014h case    7:*/		return 0x82236018;
		  /* 82236018h */ case    8:  		/* stw R31, <#[R3]> */
		/* 82236018h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82236018h case    8:*/		return 0x8223601C;
		  /* 8223601Ch */ case    9:  		/* addi R1, R1, 96 */
		/* 8223601Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223601Ch case    9:*/		return 0x82236020;
		  /* 82236020h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 82236020h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82236020h case   10:*/		return 0x82236024;
		  /* 82236024h */ case   11:  		/* mtspr LR, R12 */
		/* 82236024h case   11:*/		regs.LR = regs.R12;
		/* 82236024h case   11:*/		return 0x82236028;
		  /* 82236028h */ case   12:  		/* ld R31, <#[R1 - 16]> */
		/* 82236028h case   12:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82236028h case   12:*/		return 0x8223602C;
		  /* 8223602Ch */ case   13:  		/* bclr 20, CR0_LT */
		/* 8223602Ch case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223602Ch case   13:*/		return 0x82236030;
	}
	return 0x82236030;
} // Block from 82235FF8h-82236030h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82236030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236030);
		  /* 82236030h */ case    0:  		/* mfspr R12, LR */
		/* 82236030h case    0:*/		regs.R12 = regs.LR;
		/* 82236030h case    0:*/		return 0x82236034;
		  /* 82236034h */ case    1:  		/* bl -1723868 */
		/* 82236034h case    1:*/		regs.LR = 0x82236038; return 0x82091258;
		/* 82236034h case    1:*/		return 0x82236038;
		  /* 82236038h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82236038h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82236038h case    2:*/		return 0x8223603C;
		  /* 8223603Ch */ case    3:  		/* mr R29, R3 */
		/* 8223603Ch case    3:*/		regs.R29 = regs.R3;
		/* 8223603Ch case    3:*/		return 0x82236040;
		  /* 82236040h */ case    4:  		/* lwz R3, <#[R3 + 2068]> */
		/* 82236040h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000814) );
		/* 82236040h case    4:*/		return 0x82236044;
		  /* 82236044h */ case    5:  		/* mr R28, R4 */
		/* 82236044h case    5:*/		regs.R28 = regs.R4;
		/* 82236044h case    5:*/		return 0x82236048;
		  /* 82236048h */ case    6:  		/* li R31, 0 */
		/* 82236048h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82236048h case    6:*/		return 0x8223604C;
		  /* 8223604Ch */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223604Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223604Ch case    7:*/		return 0x82236050;
		  /* 82236050h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82236050h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82236050h case    8:*/		return 0x82236054;
		  /* 82236054h */ case    9:  		/* bc 4, CR6_GT, 88 */
		/* 82236054h case    9:*/		if ( !regs.CR[6].gt ) { return 0x822360AC;  }
		/* 82236054h case    9:*/		return 0x82236058;
		  /* 82236058h */ case   10:  		/* li R30, 0 */
		/* 82236058h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82236058h case   10:*/		return 0x8223605C;
		  /* 8223605Ch */ case   11:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223605Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223605Ch case   11:*/		return 0x82236060;
		  /* 82236060h */ case   12:  		/* cmplw CR6, R31, R11 */
		/* 82236060h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82236060h case   12:*/		return 0x82236064;
		  /* 82236064h */ case   13:  		/* bc 4, CR6_LT, 16 */
		/* 82236064h case   13:*/		if ( !regs.CR[6].lt ) { return 0x82236074;  }
		/* 82236064h case   13:*/		return 0x82236068;
		  /* 82236068h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 82236068h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82236068h case   14:*/		return 0x8223606C;
		  /* 8223606Ch */ case   15:  		/* add R3, R11, R30 */
		/* 8223606Ch case   15:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R30);
		/* 8223606Ch case   15:*/		return 0x82236070;
		  /* 82236070h */ case   16:  		/* b 12 */
		/* 82236070h case   16:*/		return 0x8223607C;
		/* 82236070h case   16:*/		return 0x82236074;
	}
	return 0x82236074;
} // Block from 82236030h-82236074h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82236074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236074);
		  /* 82236074h */ case    0:  		/* mr R4, R31 */
		/* 82236074h case    0:*/		regs.R4 = regs.R31;
		/* 82236074h case    0:*/		return 0x82236078;
		  /* 82236078h */ case    1:  		/* bl 121416 */
		/* 82236078h case    1:*/		regs.LR = 0x8223607C; return 0x82253AC0;
		/* 82236078h case    1:*/		return 0x8223607C;
	}
	return 0x8223607C;
} // Block from 82236074h-8223607Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223607Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223607C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223607C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223607C);
		  /* 8223607Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 8223607Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223607Ch case    0:*/		return 0x82236080;
		  /* 82236080h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 82236080h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82236080h case    1:*/		return 0x82236084;
		  /* 82236084h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82236084h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82236094;  }
		/* 82236084h case    2:*/		return 0x82236088;
		  /* 82236088h */ case    3:  		/* mr R4, R31 */
		/* 82236088h case    3:*/		regs.R4 = regs.R31;
		/* 82236088h case    3:*/		return 0x8223608C;
		  /* 8223608Ch */ case    4:  		/* lwz R3, <#[R29 + 2068]> */
		/* 8223608Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000814) );
		/* 8223608Ch case    4:*/		return 0x82236090;
		  /* 82236090h */ case    5:  		/* bl 121200 */
		/* 82236090h case    5:*/		regs.LR = 0x82236094; return 0x82253A00;
		/* 82236090h case    5:*/		return 0x82236094;
	}
	return 0x82236094;
} // Block from 8223607Ch-82236094h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82236094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236094);
		  /* 82236094h */ case    0:  		/* lwz R3, <#[R29 + 2068]> */
		/* 82236094h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000814) );
		/* 82236094h case    0:*/		return 0x82236098;
		  /* 82236098h */ case    1:  		/* addi R31, R31, 1 */
		/* 82236098h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82236098h case    1:*/		return 0x8223609C;
		  /* 8223609Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 8223609Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223609Ch case    2:*/		return 0x822360A0;
		  /* 822360A0h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 822360A0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 822360A0h case    3:*/		return 0x822360A4;
		  /* 822360A4h */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 822360A4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 822360A4h case    4:*/		return 0x822360A8;
		  /* 822360A8h */ case    5:  		/* bc 12, CR6_LT, -76 */
		/* 822360A8h case    5:*/		if ( regs.CR[6].lt ) { return 0x8223605C;  }
		/* 822360A8h case    5:*/		return 0x822360AC;
	}
	return 0x822360AC;
} // Block from 82236094h-822360ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 822360ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822360AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822360AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822360AC);
		  /* 822360ACh */ case    0:  		/* addi R1, R1, 128 */
		/* 822360ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822360ACh case    0:*/		return 0x822360B0;
		  /* 822360B0h */ case    1:  		/* b -1723912 */
		/* 822360B0h case    1:*/		return 0x820912A8;
		/* 822360B0h case    1:*/		return 0x822360B4;
		  /* 822360B4h */ case    2:  		/* nop */
		/* 822360B4h case    2:*/		cpu::op::nop();
		/* 822360B4h case    2:*/		return 0x822360B8;
	}
	return 0x822360B8;
} // Block from 822360ACh-822360B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822360B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822360B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822360B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822360B8);
		  /* 822360B8h */ case    0:  		/* mfspr R12, LR */
		/* 822360B8h case    0:*/		regs.R12 = regs.LR;
		/* 822360B8h case    0:*/		return 0x822360BC;
		  /* 822360BCh */ case    1:  		/* bl -1724020 */
		/* 822360BCh case    1:*/		regs.LR = 0x822360C0; return 0x82091248;
		/* 822360BCh case    1:*/		return 0x822360C0;
		  /* 822360C0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822360C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822360C0h case    2:*/		return 0x822360C4;
		  /* 822360C4h */ case    3:  		/* lwz R24, <#[R3 + 136]> */
		/* 822360C4h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x00000088) );
		/* 822360C4h case    3:*/		return 0x822360C8;
		  /* 822360C8h */ case    4:  		/* mr R25, R3 */
		/* 822360C8h case    4:*/		regs.R25 = regs.R3;
		/* 822360C8h case    4:*/		return 0x822360CC;
		  /* 822360CCh */ case    5:  		/* lwz R11, <#[R24 + 8]> */
		/* 822360CCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 822360CCh case    5:*/		return 0x822360D0;
		  /* 822360D0h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 822360D0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822360D0h case    6:*/		return 0x822360D4;
		  /* 822360D4h */ case    7:  		/* bc 12, CR6_EQ, 388 */
		/* 822360D4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82236258;  }
		/* 822360D4h case    7:*/		return 0x822360D8;
		  /* 822360D8h */ case    8:  		/* lis R10, -32253 */
		/* 822360D8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 822360D8h case    8:*/		return 0x822360DC;
		  /* 822360DCh */ case    9:  		/* lis R9, -32252 */
		/* 822360DCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 822360DCh case    9:*/		return 0x822360E0;
		  /* 822360E0h */ case   10:  		/* lis R11, -32252 */
		/* 822360E0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822360E0h case   10:*/		return 0x822360E4;
		  /* 822360E4h */ case   11:  		/* addi R28, R10, 27460 */
		/* 822360E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x6B44);
		/* 822360E4h case   11:*/		return 0x822360E8;
		  /* 822360E8h */ case   12:  		/* addi R27, R9, 8900 */
		/* 822360E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x22C4);
		/* 822360E8h case   12:*/		return 0x822360EC;
		  /* 822360ECh */ case   13:  		/* addi R26, R11, 8520 */
		/* 822360ECh case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x2148);
		/* 822360ECh case   13:*/		return 0x822360F0;
		  /* 822360F0h */ case   14:  		/* lwz R31, <#[R24 + 28]> */
		/* 822360F0h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x0000001C) );
		/* 822360F0h case   14:*/		return 0x822360F4;
		  /* 822360F4h */ case   15:  		/* b 328 */
		/* 822360F4h case   15:*/		return 0x8223623C;
		/* 822360F4h case   15:*/		return 0x822360F8;
		  /* 822360F8h */ case   16:  		/* lwz R11, <#[R31 + 228]> */
		/* 822360F8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 822360F8h case   16:*/		return 0x822360FC;
		  /* 822360FCh */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822360FCh case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822360FCh case   17:*/		return 0x82236100;
		  /* 82236100h */ case   18:  		/* bc 12, CR0_EQ, 312 */
		/* 82236100h case   18:*/		if ( regs.CR[0].eq ) { return 0x82236238;  }
		/* 82236100h case   18:*/		return 0x82236104;
		  /* 82236104h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 82236104h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82236104h case   19:*/		return 0x82236108;
		  /* 82236108h */ case   20:  		/* mr R3, R31 */
		/* 82236108h case   20:*/		regs.R3 = regs.R31;
		/* 82236108h case   20:*/		return 0x8223610C;
		  /* 8223610Ch */ case   21:  		/* li R29, 1 */
		/* 8223610Ch case   21:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8223610Ch case   21:*/		return 0x82236110;
		  /* 82236110h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 82236110h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82236110h case   22:*/		return 0x82236114;
		  /* 82236114h */ case   23:  		/* mtspr CTR, R11 */
		/* 82236114h case   23:*/		regs.CTR = regs.R11;
		/* 82236114h case   23:*/		return 0x82236118;
		  /* 82236118h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82236118h case   24:*/		if ( 1 ) { regs.LR = 0x8223611C; return (uint32)regs.CTR; }
		/* 82236118h case   24:*/		return 0x8223611C;
		  /* 8223611Ch */ case   25:  		/* cmpwi CR6, R3, 1 */
		/* 8223611Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223611Ch case   25:*/		return 0x82236120;
		  /* 82236120h */ case   26:  		/* bc 12, CR6_LT, 144 */
		/* 82236120h case   26:*/		if ( regs.CR[6].lt ) { return 0x822361B0;  }
		/* 82236120h case   26:*/		return 0x82236124;
		  /* 82236124h */ case   27:  		/* addi R30, R31, 84 */
		/* 82236124h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x54);
		/* 82236124h case   27:*/		return 0x82236128;
		  /* 82236128h */ case   28:  		/* lwz R11, <#[R30]> */
		/* 82236128h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82236128h case   28:*/		return 0x8223612C;
		  /* 8223612Ch */ case   29:  		/* cmpwi CR6, R11, 35 */
		/* 8223612Ch case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000023);
		/* 8223612Ch case   29:*/		return 0x82236130;
		  /* 82236130h */ case   30:  		/* bc 12, CR6_EQ, 68 */
		/* 82236130h case   30:*/		if ( regs.CR[6].eq ) { return 0x82236174;  }
		/* 82236130h case   30:*/		return 0x82236134;
		  /* 82236134h */ case   31:  		/* cmpwi CR6, R11, 36 */
		/* 82236134h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000024);
		/* 82236134h case   31:*/		return 0x82236138;
		  /* 82236138h */ case   32:  		/* bc 12, CR6_EQ, 60 */
		/* 82236138h case   32:*/		if ( regs.CR[6].eq ) { return 0x82236174;  }
		/* 82236138h case   32:*/		return 0x8223613C;
		  /* 8223613Ch */ case   33:  		/* cmpwi CR6, R11, 37 */
		/* 8223613Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000025);
		/* 8223613Ch case   33:*/		return 0x82236140;
		  /* 82236140h */ case   34:  		/* bc 12, CR6_EQ, 52 */
		/* 82236140h case   34:*/		if ( regs.CR[6].eq ) { return 0x82236174;  }
		/* 82236140h case   34:*/		return 0x82236144;
		  /* 82236144h */ case   35:  		/* cmpwi CR6, R11, 38 */
		/* 82236144h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000026);
		/* 82236144h case   35:*/		return 0x82236148;
		  /* 82236148h */ case   36:  		/* bc 12, CR6_EQ, 44 */
		/* 82236148h case   36:*/		if ( regs.CR[6].eq ) { return 0x82236174;  }
		/* 82236148h case   36:*/		return 0x8223614C;
		  /* 8223614Ch */ case   37:  		/* lwz R11, <#[R31]> */
		/* 8223614Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223614Ch case   37:*/		return 0x82236150;
		  /* 82236150h */ case   38:  		/* mr R3, R31 */
		/* 82236150h case   38:*/		regs.R3 = regs.R31;
		/* 82236150h case   38:*/		return 0x82236154;
		  /* 82236154h */ case   39:  		/* addi R29, R29, 1 */
		/* 82236154h case   39:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82236154h case   39:*/		return 0x82236158;
		  /* 82236158h */ case   40:  		/* addi R30, R30, 4 */
		/* 82236158h case   40:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82236158h case   40:*/		return 0x8223615C;
		  /* 8223615Ch */ case   41:  		/* lwz R11, <#[R11 + 4]> */
		/* 8223615Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223615Ch case   41:*/		return 0x82236160;
		  /* 82236160h */ case   42:  		/* mtspr CTR, R11 */
		/* 82236160h case   42:*/		regs.CTR = regs.R11;
		/* 82236160h case   42:*/		return 0x82236164;
		  /* 82236164h */ case   43:  		/* bcctrl 20, CR0_LT */
		/* 82236164h case   43:*/		if ( 1 ) { regs.LR = 0x82236168; return (uint32)regs.CTR; }
		/* 82236164h case   43:*/		return 0x82236168;
	}
	return 0x82236168;
} // Block from 822360B8h-82236168h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82236168h
// Function '?CP_GetR400ColorElementFmt@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@IPAU_R400_COLOR_ELEMENT_FMT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236168);
		  /* 82236168h */ case    0:  		/* cmpw CR6, R29, R3 */
		/* 82236168h case    0:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R3);
		/* 82236168h case    0:*/		return 0x8223616C;
		  /* 8223616Ch */ case    1:  		/* bc 4, CR6_GT, -68 */
		/* 8223616Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x82236128;  }
		/* 8223616Ch case    1:*/		return 0x82236170;
		  /* 82236170h */ case    2:  		/* b 64 */
		/* 82236170h case    2:*/		return 0x822361B0;
		/* 82236170h case    2:*/		return 0x82236174;
	}
	return 0x82236174;
} // Block from 82236168h-82236174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236174);
		  /* 82236174h */ case    0:  		/* li R5, 1 */
		/* 82236174h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82236174h case    0:*/		return 0x82236178;
		  /* 82236178h */ case    1:  		/* lwz R3, <#[R25 + 172]> */
		/* 82236178h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x000000AC) );
		/* 82236178h case    1:*/		return 0x8223617C;
		  /* 8223617Ch */ case    2:  		/* li R4, 31 */
		/* 8223617Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 8223617Ch case    2:*/		return 0x82236180;
		  /* 82236180h */ case    3:  		/* bl 60808 */
		/* 82236180h case    3:*/		regs.LR = 0x82236184; return 0x82244F08;
		/* 82236180h case    3:*/		return 0x82236184;
		  /* 82236184h */ case    4:  		/* or. R30, R3, R3 */
		/* 82236184h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82236184h case    4:*/		return 0x82236188;
		  /* 82236188h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 82236188h case    5:*/		if ( !regs.CR[0].eq ) { return 0x822361A4;  }
		/* 82236188h case    5:*/		return 0x8223618C;
		  /* 8223618Ch */ case    6:  		/* mr R6, R26 */
		/* 8223618Ch case    6:*/		regs.R6 = regs.R26;
		/* 8223618Ch case    6:*/		return 0x82236190;
		  /* 82236190h */ case    7:  		/* mr R5, R27 */
		/* 82236190h case    7:*/		regs.R5 = regs.R27;
		/* 82236190h case    7:*/		return 0x82236194;
		  /* 82236194h */ case    8:  		/* mr R4, R28 */
		/* 82236194h case    8:*/		regs.R4 = regs.R28;
		/* 82236194h case    8:*/		return 0x82236198;
		  /* 82236198h */ case    9:  		/* li R7, 306 */
		/* 82236198h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x132);
		/* 82236198h case    9:*/		return 0x8223619C;
		  /* 8223619Ch */ case   10:  		/* li R3, 0 */
		/* 8223619Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223619Ch case   10:*/		return 0x822361A0;
		  /* 822361A0h */ case   11:  		/* bl -910744 */
		/* 822361A0h case   11:*/		regs.LR = 0x822361A4; return 0x82157C08;
		/* 822361A0h case   11:*/		return 0x822361A4;
	}
	return 0x822361A4;
} // Block from 82236174h-822361A4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822361A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822361A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822361A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822361A4);
		  /* 822361A4h */ case    0:  		/* mr R4, R30 */
		/* 822361A4h case    0:*/		regs.R4 = regs.R30;
		/* 822361A4h case    0:*/		return 0x822361A8;
		  /* 822361A8h */ case    1:  		/* mr R3, R31 */
		/* 822361A8h case    1:*/		regs.R3 = regs.R31;
		/* 822361A8h case    1:*/		return 0x822361AC;
		  /* 822361ACh */ case    2:  		/* bl 134332 */
		/* 822361ACh case    2:*/		regs.LR = 0x822361B0; return 0x82256E68;
		/* 822361ACh case    2:*/		return 0x822361B0;
	}
	return 0x822361B0;
} // Block from 822361A4h-822361B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822361B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822361B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822361B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822361B0);
		  /* 822361B0h */ case    0:  		/* lwz R11, <#[R31 + 228]> */
		/* 822361B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 822361B0h case    0:*/		return 0x822361B4;
		  /* 822361B4h */ case    1:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 822361B4h case    1:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 822361B4h case    1:*/		return 0x822361B8;
		  /* 822361B8h */ case    2:  		/* bc 12, CR0_EQ, 56 */
		/* 822361B8h case    2:*/		if ( regs.CR[0].eq ) { return 0x822361F0;  }
		/* 822361B8h case    2:*/		return 0x822361BC;
		  /* 822361BCh */ case    3:  		/* lwz R3, <#[R31 + 80]> */
		/* 822361BCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 822361BCh case    3:*/		return 0x822361C0;
		  /* 822361C0h */ case    4:  		/* lwz R4, <#[R25 + 12]> */
		/* 822361C0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 822361C0h case    4:*/		return 0x822361C4;
		  /* 822361C4h */ case    5:  		/* bl 132972 */
		/* 822361C4h case    5:*/		regs.LR = 0x822361C8; return 0x82256930;
		/* 822361C4h case    5:*/		return 0x822361C8;
		  /* 822361C8h */ case    6:  		/* cmpwi CR6, R3, 8 */
		/* 822361C8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 822361C8h case    6:*/		return 0x822361CC;
		  /* 822361CCh */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 822361CCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x822361F0;  }
		/* 822361CCh case    7:*/		return 0x822361D0;
		  /* 822361D0h */ case    8:  		/* li R5, 2 */
		/* 822361D0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822361D0h case    8:*/		return 0x822361D4;
		  /* 822361D4h */ case    9:  		/* lwz R3, <#[R25 + 172]> */
		/* 822361D4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x000000AC) );
		/* 822361D4h case    9:*/		return 0x822361D8;
		  /* 822361D8h */ case   10:  		/* li R4, 31 */
		/* 822361D8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 822361D8h case   10:*/		return 0x822361DC;
		  /* 822361DCh */ case   11:  		/* bl 60716 */
		/* 822361DCh case   11:*/		regs.LR = 0x822361E0; return 0x82244F08;
		/* 822361DCh case   11:*/		return 0x822361E0;
		  /* 822361E0h */ case   12:  		/* or. R4, R3, R3 */
		/* 822361E0h case   12:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 822361E0h case   12:*/		return 0x822361E4;
		  /* 822361E4h */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 822361E4h case   13:*/		if ( regs.CR[0].eq ) { return 0x822361F0;  }
		/* 822361E4h case   13:*/		return 0x822361E8;
		  /* 822361E8h */ case   14:  		/* mr R3, R31 */
		/* 822361E8h case   14:*/		regs.R3 = regs.R31;
		/* 822361E8h case   14:*/		return 0x822361EC;
		  /* 822361ECh */ case   15:  		/* bl 134268 */
		/* 822361ECh case   15:*/		regs.LR = 0x822361F0; return 0x82256E68;
		/* 822361ECh case   15:*/		return 0x822361F0;
	}
	return 0x822361F0;
} // Block from 822361B0h-822361F0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822361F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822361F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822361F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822361F0);
		  /* 822361F0h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 822361F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 822361F0h case    0:*/		return 0x822361F4;
		  /* 822361F4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 822361F4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822361F4h case    1:*/		return 0x822361F8;
		  /* 822361F8h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 822361F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82236238;  }
		/* 822361F8h case    2:*/		return 0x822361FC;
		  /* 822361FCh */ case    3:  		/* mr R3, R31 */
		/* 822361FCh case    3:*/		regs.R3 = regs.R31;
		/* 822361FCh case    3:*/		return 0x82236200;
		  /* 82236200h */ case    4:  		/* bl 130288 */
		/* 82236200h case    4:*/		regs.LR = 0x82236204; return 0x82255EF0;
		/* 82236200h case    4:*/		return 0x82236204;
		  /* 82236204h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82236204h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82236204h case    5:*/		return 0x82236208;
		  /* 82236208h */ case    6:  		/* bc 12, CR0_EQ, 48 */
		/* 82236208h case    6:*/		if ( regs.CR[0].eq ) { return 0x82236238;  }
		/* 82236208h case    6:*/		return 0x8223620C;
		  /* 8223620Ch */ case    7:  		/* lwz R11, <#[R31 + 80]> */
		/* 8223620Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8223620Ch case    7:*/		return 0x82236210;
		  /* 82236210h */ case    8:  		/* cmpwi CR6, R11, 42 */
		/* 82236210h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002A);
		/* 82236210h case    8:*/		return 0x82236214;
		  /* 82236214h */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 82236214h case    9:*/		if ( regs.CR[6].eq ) { return 0x82236238;  }
		/* 82236214h case    9:*/		return 0x82236218;
		  /* 82236218h */ case   10:  		/* lwz R30, <#[R31 + 28]> */
		/* 82236218h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82236218h case   10:*/		return 0x8223621C;
		  /* 8223621Ch */ case   11:  		/* mr R3, R31 */
		/* 8223621Ch case   11:*/		regs.R3 = regs.R31;
		/* 8223621Ch case   11:*/		return 0x82236220;
		  /* 82236220h */ case   12:  		/* mr R4, R30 */
		/* 82236220h case   12:*/		regs.R4 = regs.R30;
		/* 82236220h case   12:*/		return 0x82236224;
		  /* 82236224h */ case   13:  		/* bl 134212 */
		/* 82236224h case   13:*/		regs.LR = 0x82236228; return 0x82256E68;
		/* 82236224h case   13:*/		return 0x82236228;
		  /* 82236228h */ case   14:  		/* mr R5, R31 */
		/* 82236228h case   14:*/		regs.R5 = regs.R31;
		/* 82236228h case   14:*/		return 0x8223622C;
		  /* 8223622Ch */ case   15:  		/* mr R3, R30 */
		/* 8223622Ch case   15:*/		regs.R3 = regs.R30;
		/* 8223622Ch case   15:*/		return 0x82236230;
		  /* 82236230h */ case   16:  		/* lwz R4, <#[R31 + 20]> */
		/* 82236230h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82236230h case   16:*/		return 0x82236234;
		  /* 82236234h */ case   17:  		/* bl 123524 */
		/* 82236234h case   17:*/		regs.LR = 0x82236238; return 0x822544B8;
		/* 82236234h case   17:*/		return 0x82236238;
	}
	return 0x82236238;
} // Block from 822361F0h-82236238h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82236238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236238);
		  /* 82236238h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 82236238h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 82236238h case    0:*/		return 0x8223623C;
	}
	return 0x8223623C;
} // Block from 82236238h-8223623Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223623Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223623C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223623C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223623C);
		  /* 8223623Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8223623Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223623Ch case    0:*/		return 0x82236240;
		  /* 82236240h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82236240h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82236240h case    1:*/		return 0x82236244;
		  /* 82236244h */ case    2:  		/* bc 4, CR6_EQ, -332 */
		/* 82236244h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822360F8;  }
		/* 82236244h case    2:*/		return 0x82236248;
		  /* 82236248h */ case    3:  		/* lwz R24, <#[R24 + 8]> */
		/* 82236248h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000008) );
		/* 82236248h case    3:*/		return 0x8223624C;
		  /* 8223624Ch */ case    4:  		/* lwz R11, <#[R24 + 8]> */
		/* 8223624Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8223624Ch case    4:*/		return 0x82236250;
		  /* 82236250h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82236250h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82236250h case    5:*/		return 0x82236254;
		  /* 82236254h */ case    6:  		/* bc 4, CR6_EQ, -356 */
		/* 82236254h case    6:*/		if ( !regs.CR[6].eq ) { return 0x822360F0;  }
		/* 82236254h case    6:*/		return 0x82236258;
	}
	return 0x82236258;
} // Block from 8223623Ch-82236258h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82236258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236258);
		  /* 82236258h */ case    0:  		/* addi R1, R1, 160 */
		/* 82236258h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82236258h case    0:*/		return 0x8223625C;
		  /* 8223625Ch */ case    1:  		/* b -1724356 */
		/* 8223625Ch case    1:*/		return 0x82091298;
		/* 8223625Ch case    1:*/		return 0x82236260;
	}
	return 0x82236260;
} // Block from 82236258h-82236260h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236260);
		  /* 82236260h */ case    0:  		/* mfspr R12, LR */
		/* 82236260h case    0:*/		regs.R12 = regs.LR;
		/* 82236260h case    0:*/		return 0x82236264;
		  /* 82236264h */ case    1:  		/* bl -1724424 */
		/* 82236264h case    1:*/		regs.LR = 0x82236268; return 0x8209125C;
		/* 82236264h case    1:*/		return 0x82236268;
		  /* 82236268h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82236268h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82236268h case    2:*/		return 0x8223626C;
		  /* 8223626Ch */ case    3:  		/* mr R29, R4 */
		/* 8223626Ch case    3:*/		regs.R29 = regs.R4;
		/* 8223626Ch case    3:*/		return 0x82236270;
		  /* 82236270h */ case    4:  		/* lwz R4, <#[R3 + 152]> */
		/* 82236270h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000098) );
		/* 82236270h case    4:*/		return 0x82236274;
		  /* 82236274h */ case    5:  		/* mr R31, R3 */
		/* 82236274h case    5:*/		regs.R31 = regs.R3;
		/* 82236274h case    5:*/		return 0x82236278;
		  /* 82236278h */ case    6:  		/* mr R30, R5 */
		/* 82236278h case    6:*/		regs.R30 = regs.R5;
		/* 82236278h case    6:*/		return 0x8223627C;
		  /* 8223627Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8223627Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8223627Ch case    7:*/		return 0x82236280;
		  /* 82236280h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82236280h case    8:*/		if ( regs.CR[6].eq ) { return 0x82236290;  }
		/* 82236280h case    8:*/		return 0x82236284;
		  /* 82236284h */ case    9:  		/* lwz R11, <#[R3 + 12]> */
		/* 82236284h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82236284h case    9:*/		return 0x82236288;
		  /* 82236288h */ case   10:  		/* lwz R3, <#[R11 + 1452]> */
		/* 82236288h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 82236288h case   10:*/		return 0x8223628C;
		  /* 8223628Ch */ case   11:  		/* bl -105548 */
		/* 8223628Ch case   11:*/		regs.LR = 0x82236290; return 0x8221C640;
		/* 8223628Ch case   11:*/		return 0x82236290;
	}
	return 0x82236290;
} // Block from 82236260h-82236290h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82236290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236290);
		  /* 82236290h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82236290h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236290h case    0:*/		return 0x82236294;
		  /* 82236294h */ case    1:  		/* addi R10, R30, 1 */
		/* 82236294h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x1);
		/* 82236294h case    1:*/		return 0x82236298;
		  /* 82236298h */ case    2:  		/* rlwinm R4, R10, 2, 0, 29 */
		/* 82236298h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R10);
		/* 82236298h case    2:*/		return 0x8223629C;
		  /* 8223629Ch */ case    3:  		/* lwz R3, <#[R11 + 1452]> */
		/* 8223629Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223629Ch case    3:*/		return 0x822362A0;
		  /* 822362A0h */ case    4:  		/* bl -105960 */
		/* 822362A0h case    4:*/		regs.LR = 0x822362A4; return 0x8221C4B8;
		/* 822362A0h case    4:*/		return 0x822362A4;
		  /* 822362A4h */ case    5:  		/* addi R10, R30, 1 */
		/* 822362A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x1);
		/* 822362A4h case    5:*/		return 0x822362A8;
		  /* 822362A8h */ case    6:  		/* stw R3, <#[R31 + 152]> */
		/* 822362A8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000098) );
		/* 822362A8h case    6:*/		return 0x822362AC;
		  /* 822362ACh */ case    7:  		/* li R11, 0 */
		/* 822362ACh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822362ACh case    7:*/		return 0x822362B0;
		  /* 822362B0h */ case    8:  		/* mtspr CTR, R10 */
		/* 822362B0h case    8:*/		regs.CTR = regs.R10;
		/* 822362B0h case    8:*/		return 0x822362B4;
		  /* 822362B4h */ case    9:  		/* lwzx R10, <#[R11 + R29]> */
		/* 822362B4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 822362B4h case    9:*/		return 0x822362B8;
		  /* 822362B8h */ case   10:  		/* lwz R9, <#[R31 + 152]> */
		/* 822362B8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000098) );
		/* 822362B8h case   10:*/		return 0x822362BC;
		  /* 822362BCh */ case   11:  		/* stwx R10, <#[R11 + R9]> */
		/* 822362BCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 822362BCh case   11:*/		return 0x822362C0;
		  /* 822362C0h */ case   12:  		/* addi R11, R11, 4 */
		/* 822362C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822362C0h case   12:*/		return 0x822362C4;
		  /* 822362C4h */ case   13:  		/* bc 16, CR0_LT, -16 */
		/* 822362C4h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x822362B4;  }
		/* 822362C4h case   13:*/		return 0x822362C8;
		  /* 822362C8h */ case   14:  		/* addi R1, R1, 112 */
		/* 822362C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822362C8h case   14:*/		return 0x822362CC;
		  /* 822362CCh */ case   15:  		/* b -1724448 */
		/* 822362CCh case   15:*/		return 0x820912AC;
		/* 822362CCh case   15:*/		return 0x822362D0;
	}
	return 0x822362D0;
} // Block from 82236290h-822362D0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822362D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822362D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822362D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822362D0);
		  /* 822362D0h */ case    0:  		/* mfspr R12, LR */
		/* 822362D0h case    0:*/		regs.R12 = regs.LR;
		/* 822362D0h case    0:*/		return 0x822362D4;
		  /* 822362D4h */ case    1:  		/* bl -1724548 */
		/* 822362D4h case    1:*/		regs.LR = 0x822362D8; return 0x82091250;
		/* 822362D4h case    1:*/		return 0x822362D8;
		  /* 822362D8h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 822362D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 822362D8h case    2:*/		return 0x822362DC;
		  /* 822362DCh */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 822362DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 822362DCh case    3:*/		return 0x822362E0;
		  /* 822362E0h */ case    4:  		/* mr R31, R3 */
		/* 822362E0h case    4:*/		regs.R31 = regs.R3;
		/* 822362E0h case    4:*/		return 0x822362E4;
		  /* 822362E4h */ case    5:  		/* li R29, 0 */
		/* 822362E4h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 822362E4h case    5:*/		return 0x822362E8;
		  /* 822362E8h */ case    6:  		/* lwz R11, <#[R11 + 1360]> */
		/* 822362E8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000550) );
		/* 822362E8h case    6:*/		return 0x822362EC;
		  /* 822362ECh */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 822362ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 822362ECh case    7:*/		return 0x822362F0;
		  /* 822362F0h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 822362F0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822362F0h case    8:*/		return 0x822362F4;
		  /* 822362F4h */ case    9:  		/* bc 12, CR6_LT, 96 */
		/* 822362F4h case    9:*/		if ( regs.CR[6].lt ) { return 0x82236354;  }
		/* 822362F4h case    9:*/		return 0x822362F8;
		  /* 822362F8h */ case   10:  		/* addi R11, R1, 80 */
		/* 822362F8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 822362F8h case   10:*/		return 0x822362FC;
		  /* 822362FCh */ case   11:  		/* addi R28, R11, -4 */
		/* 822362FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 822362FCh case   11:*/		return 0x82236300;
		  /* 82236300h */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 82236300h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236300h case   12:*/		return 0x82236304;
		  /* 82236304h */ case   13:  		/* li R4, 20 */
		/* 82236304h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82236304h case   13:*/		return 0x82236308;
		  /* 82236308h */ case   14:  		/* lwz R27, <#[R11 + 1456]> */
		/* 82236308h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x000005B0) );
		/* 82236308h case   14:*/		return 0x8223630C;
		  /* 8223630Ch */ case   15:  		/* mr R3, R27 */
		/* 8223630Ch case   15:*/		regs.R3 = regs.R27;
		/* 8223630Ch case   15:*/		return 0x82236310;
		  /* 82236310h */ case   16:  		/* bl -106072 */
		/* 82236310h case   16:*/		regs.LR = 0x82236314; return 0x8221C4B8;
		/* 82236310h case   16:*/		return 0x82236314;
		  /* 82236314h */ case   17:  		/* addic. R30, R3, 4 */
		/* 82236314h case   17:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R3,0x4);
		/* 82236314h case   17:*/		return 0x82236318;
		  /* 82236318h */ case   18:  		/* stw R27, <#[R3]> */
		/* 82236318h case   18:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000000) );
		/* 82236318h case   18:*/		return 0x8223631C;
		  /* 8223631Ch */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 8223631Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x82236334;  }
		/* 8223631Ch case   19:*/		return 0x82236320;
		  /* 82236320h */ case   20:  		/* lwz R11, <#[R31 + 12]> */
		/* 82236320h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236320h case   20:*/		return 0x82236324;
		  /* 82236324h */ case   21:  		/* mr R3, R30 */
		/* 82236324h case   21:*/		regs.R3 = regs.R30;
		/* 82236324h case   21:*/		return 0x82236328;
		  /* 82236328h */ case   22:  		/* lwz R4, <#[R11 + 1456]> */
		/* 82236328h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 82236328h case   22:*/		return 0x8223632C;
		  /* 8223632Ch */ case   23:  		/* bl -1484 */
		/* 8223632Ch case   23:*/		regs.LR = 0x82236330; return 0x82235D60;
		/* 8223632Ch case   23:*/		return 0x82236330;
		  /* 82236330h */ case   24:  		/* b 8 */
		/* 82236330h case   24:*/		return 0x82236338;
		/* 82236330h case   24:*/		return 0x82236334;
	}
	return 0x82236334;
} // Block from 822362D0h-82236334h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82236334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236334);
		  /* 82236334h */ case    0:  		/* li R30, 0 */
		/* 82236334h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82236334h case    0:*/		return 0x82236338;
	}
	return 0x82236338;
} // Block from 82236334h-82236338h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82236338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236338);
		  /* 82236338h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82236338h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236338h case    0:*/		return 0x8223633C;
		  /* 8223633Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8223633Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223633Ch case    1:*/		return 0x82236340;
		  /* 82236340h */ case    2:  		/* stwu R30, <#[R28 + 4]> */
		/* 82236340h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 82236340h case    2:*/		return 0x82236344;
		  /* 82236344h */ case    3:  		/* lwz R11, <#[R11 + 1360]> */
		/* 82236344h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000550) );
		/* 82236344h case    3:*/		return 0x82236348;
		  /* 82236348h */ case    4:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236348h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236348h case    4:*/		return 0x8223634C;
		  /* 8223634Ch */ case    5:  		/* cmpw CR6, R29, R11 */
		/* 8223634Ch case    5:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R11);
		/* 8223634Ch case    5:*/		return 0x82236350;
		  /* 82236350h */ case    6:  		/* bc 4, CR6_GT, -80 */
		/* 82236350h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82236300;  }
		/* 82236350h case    6:*/		return 0x82236354;
	}
	return 0x82236354;
} // Block from 82236338h-82236354h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82236354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236354);
		  /* 82236354h */ case    0:  		/* lwz R30, <#[R31 + 136]> */
		/* 82236354h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000088) );
		/* 82236354h case    0:*/		return 0x82236358;
		  /* 82236358h */ case    1:  		/* b 36 */
		/* 82236358h case    1:*/		return 0x8223637C;
		/* 82236358h case    1:*/		return 0x8223635C;
		  /* 8223635Ch */ case    2:  		/* lwz R11, <#[R30 + 52]> */
		/* 8223635Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8223635Ch case    2:*/		return 0x82236360;
		  /* 82236360h */ case    3:  		/* addi R10, R1, 80 */
		/* 82236360h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82236360h case    3:*/		return 0x82236364;
		  /* 82236364h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82236364h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82236364h case    4:*/		return 0x82236368;
		  /* 82236368h */ case    5:  		/* lwzx R3, <#[R11 + R10]> */
		/* 82236368h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82236368h case    5:*/		return 0x8223636C;
		  /* 8223636Ch */ case    6:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223636Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223636Ch case    6:*/		return 0x82236370;
		  /* 82236370h */ case    7:  		/* bl 120656 */
		/* 82236370h case    7:*/		regs.LR = 0x82236374; return 0x82253AC0;
		/* 82236370h case    7:*/		return 0x82236374;
		  /* 82236374h */ case    8:  		/* stw R30, <#[R3]> */
		/* 82236374h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82236374h case    8:*/		return 0x82236378;
		  /* 82236378h */ case    9:  		/* lwz R30, <#[R30 + 8]> */
		/* 82236378h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 82236378h case    9:*/		return 0x8223637C;
	}
	return 0x8223637C;
} // Block from 82236354h-8223637Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223637Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223637C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223637C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223637C);
		  /* 8223637Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8223637Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8223637Ch case    0:*/		return 0x82236380;
		  /* 82236380h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82236380h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82236380h case    1:*/		return 0x82236384;
		  /* 82236384h */ case    2:  		/* bc 4, CR6_EQ, -40 */
		/* 82236384h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223635C;  }
		/* 82236384h case    2:*/		return 0x82236388;
		  /* 82236388h */ case    3:  		/* addi R3, R31, 128 */
		/* 82236388h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x80);
		/* 82236388h case    3:*/		return 0x8223638C;
		  /* 8223638Ch */ case    4:  		/* bl 120020 */
		/* 8223638Ch case    4:*/		regs.LR = 0x82236390; return 0x82253860;
		/* 8223638Ch case    4:*/		return 0x82236390;
		  /* 82236390h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 82236390h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236390h case    5:*/		return 0x82236394;
		  /* 82236394h */ case    6:  		/* addi R10, R3, 1 */
		/* 82236394h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x1);
		/* 82236394h case    6:*/		return 0x82236398;
		  /* 82236398h */ case    7:  		/* mr R30, R3 */
		/* 82236398h case    7:*/		regs.R30 = regs.R3;
		/* 82236398h case    7:*/		return 0x8223639C;
		  /* 8223639Ch */ case    8:  		/* rlwinm R4, R10, 2, 0, 29 */
		/* 8223639Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R10);
		/* 8223639Ch case    8:*/		return 0x822363A0;
		  /* 822363A0h */ case    9:  		/* lwz R3, <#[R11 + 1452]> */
		/* 822363A0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 822363A0h case    9:*/		return 0x822363A4;
		  /* 822363A4h */ case   10:  		/* bl -106220 */
		/* 822363A4h case   10:*/		regs.LR = 0x822363A8; return 0x8221C4B8;
		/* 822363A4h case   10:*/		return 0x822363A8;
		  /* 822363A8h */ case   11:  		/* lwz R11, <#[R31 + 12]> */
		/* 822363A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 822363A8h case   11:*/		return 0x822363AC;
		  /* 822363ACh */ case   12:  		/* addi R28, R30, -1 */
		/* 822363ACh case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0xFFFFFFFF);
		/* 822363ACh case   12:*/		return 0x822363B0;
		  /* 822363B0h */ case   13:  		/* stw R3, <#[R31 + 160]> */
		/* 822363B0h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000000A0) );
		/* 822363B0h case   13:*/		return 0x822363B4;
		  /* 822363B4h */ case   14:  		/* li R26, 0 */
		/* 822363B4h case   14:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 822363B4h case   14:*/		return 0x822363B8;
		  /* 822363B8h */ case   15:  		/* lwz R11, <#[R11 + 1360]> */
		/* 822363B8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000550) );
		/* 822363B8h case   15:*/		return 0x822363BC;
		  /* 822363BCh */ case   16:  		/* lwz R11, <#[R11 + 28]> */
		/* 822363BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 822363BCh case   16:*/		return 0x822363C0;
		  /* 822363C0h */ case   17:  		/* cmpwi CR6, R11, 0 */
		/* 822363C0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822363C0h case   17:*/		return 0x822363C4;
		  /* 822363C4h */ case   18:  		/* bc 12, CR6_LT, 96 */
		/* 822363C4h case   18:*/		if ( regs.CR[6].lt ) { return 0x82236424;  }
		/* 822363C4h case   18:*/		return 0x822363C8;
		  /* 822363C8h */ case   19:  		/* addi R29, R1, 80 */
		/* 822363C8h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x50);
		/* 822363C8h case   19:*/		return 0x822363CC;
		  /* 822363CCh */ case   20:  		/* lwz R27, <#[R29]> */
		/* 822363CCh case   20:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + 0x00000000) );
		/* 822363CCh case   20:*/		return 0x822363D0;
		  /* 822363D0h */ case   21:  		/* lwz R11, <#[R27 + 4]> */
		/* 822363D0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 822363D0h case   21:*/		return 0x822363D4;
		  /* 822363D4h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 822363D4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822363D4h case   22:*/		return 0x822363D8;
		  /* 822363D8h */ case   23:  		/* bc 12, CR6_EQ, 48 */
		/* 822363D8h case   23:*/		if ( regs.CR[6].eq ) { return 0x82236408;  }
		/* 822363D8h case   23:*/		return 0x822363DC;
		  /* 822363DCh */ case   24:  		/* rlwinm R30, R28, 2, 0, 29 */
		/* 822363DCh case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R28);
		/* 822363DCh case   24:*/		return 0x822363E0;
		  /* 822363E0h */ case   25:  		/* mr R3, R27 */
		/* 822363E0h case   25:*/		regs.R3 = regs.R27;
		/* 822363E0h case   25:*/		return 0x822363E4;
		  /* 822363E4h */ case   26:  		/* bl 149868 */
		/* 822363E4h case   26:*/		regs.LR = 0x822363E8; return 0x8225AD50;
		/* 822363E4h case   26:*/		return 0x822363E8;
		  /* 822363E8h */ case   27:  		/* lwz R11, <#[R31 + 160]> */
		/* 822363E8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 822363E8h case   27:*/		return 0x822363EC;
		  /* 822363ECh */ case   28:  		/* lwz R10, <#[R29]> */
		/* 822363ECh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 822363ECh case   28:*/		return 0x822363F0;
		  /* 822363F0h */ case   29:  		/* addi R28, R28, -1 */
		/* 822363F0h case   29:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 822363F0h case   29:*/		return 0x822363F4;
		  /* 822363F4h */ case   30:  		/* stwx R3, <#[R30 + R11]> */
		/* 822363F4h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 822363F4h case   30:*/		return 0x822363F8;
		  /* 822363F8h */ case   31:  		/* addi R30, R30, -4 */
		/* 822363F8h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFC);
		/* 822363F8h case   31:*/		return 0x822363FC;
		  /* 822363FCh */ case   32:  		/* lwz R11, <#[R10 + 4]> */
		/* 822363FCh case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 822363FCh case   32:*/		return 0x82236400;
		  /* 82236400h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 82236400h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82236400h case   33:*/		return 0x82236404;
		  /* 82236404h */ case   34:  		/* bc 4, CR6_EQ, -36 */
		/* 82236404h case   34:*/		if ( !regs.CR[6].eq ) { return 0x822363E0;  }
		/* 82236404h case   34:*/		return 0x82236408;
	}
	return 0x82236408;
} // Block from 8223637Ch-82236408h (35 instructions)

