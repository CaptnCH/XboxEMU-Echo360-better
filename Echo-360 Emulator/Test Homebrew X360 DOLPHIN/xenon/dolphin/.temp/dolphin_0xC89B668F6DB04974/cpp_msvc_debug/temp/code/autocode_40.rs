#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82200D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200D68);
		  /* 82200D68h */ case    0:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82200D68h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82200D68h case    0:*/		return 0x82200D6C;
		  /* 82200D6Ch */ case    1:  		/* li R5, 1 */
		/* 82200D6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82200D6Ch case    1:*/		return 0x82200D70;
		  /* 82200D70h */ case    2:  		/* b -12668 */
		/* 82200D70h case    2:*/		return 0x821FDBF4;
		/* 82200D70h case    2:*/		return 0x82200D74;
		  /* 82200D74h */ case    3:  		/* cmplwi CR6, R29, 1 */
		/* 82200D74h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 82200D74h case    3:*/		return 0x82200D78;
		  /* 82200D78h */ case    4:  		/* bc 4, CR6_EQ, 14588 */
		/* 82200D78h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82204674;  }
		/* 82200D78h case    4:*/		return 0x82200D7C;
		  /* 82200D7Ch */ case    5:  		/* lwz R11, <#[R14 + 36]> */
		/* 82200D7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 82200D7Ch case    5:*/		return 0x82200D80;
		  /* 82200D80h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82200D80h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200D80h case    6:*/		return 0x82200D84;
		  /* 82200D84h */ case    7:  		/* bc 12, CR6_EQ, 14624 */
		/* 82200D84h case    7:*/		if ( regs.CR[6].eq ) { return 0x822046A4;  }
		/* 82200D84h case    7:*/		return 0x82200D88;
		  /* 82200D88h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 82200D88h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82200D88h case    8:*/		return 0x82200D8C;
		  /* 82200D8Ch */ case    9:  		/* cmpwi CR6, R10, 1 */
		/* 82200D8Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82200D8Ch case    9:*/		return 0x82200D90;
		  /* 82200D90h */ case   10:  		/* bc 4, CR6_EQ, 14612 */
		/* 82200D90h case   10:*/		if ( !regs.CR[6].eq ) { return 0x822046A4;  }
		/* 82200D90h case   10:*/		return 0x82200D94;
		  /* 82200D94h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 82200D94h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82200D94h case   11:*/		return 0x82200D98;
		  /* 82200D98h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82200D98h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200D98h case   12:*/		return 0x82200D9C;
		  /* 82200D9Ch */ case   13:  		/* bc 12, CR6_EQ, 14588 */
		/* 82200D9Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82204698;  }
		/* 82200D9Ch case   13:*/		return 0x82200DA0;
		  /* 82200DA0h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 82200DA0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82200DA0h case   14:*/		return 0x82200DA4;
		  /* 82200DA4h */ case   15:  		/* cmpwi CR6, R10, 1 */
		/* 82200DA4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82200DA4h case   15:*/		return 0x82200DA8;
		  /* 82200DA8h */ case   16:  		/* bc 4, CR6_EQ, 14576 */
		/* 82200DA8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82204698;  }
		/* 82200DA8h case   16:*/		return 0x82200DAC;
		  /* 82200DACh */ case   17:  		/* lwz R4, <#[R11 + 8]> */
		/* 82200DACh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 82200DACh case   17:*/		return 0x82200DB0;
		  /* 82200DB0h */ case   18:  		/* lwz R11, <#[R4 + 4]> */
		/* 82200DB0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82200DB0h case   18:*/		return 0x82200DB4;
		  /* 82200DB4h */ case   19:  		/* cmpwi CR6, R11, 1 */
		/* 82200DB4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82200DB4h case   19:*/		return 0x82200DB8;
		  /* 82200DB8h */ case   20:  		/* bc 4, CR6_EQ, 48 */
		/* 82200DB8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82200DE8;  }
		/* 82200DB8h case   20:*/		return 0x82200DBC;
		  /* 82200DBCh */ case   21:  		/* lwz R11, <#[R4 + 12]> */
		/* 82200DBCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82200DBCh case   21:*/		return 0x82200DC0;
		  /* 82200DC0h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 82200DC0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200DC0h case   22:*/		return 0x82200DC4;
		  /* 82200DC4h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 82200DC4h case   23:*/		if ( regs.CR[6].eq ) { return 0x82200DD0;  }
		/* 82200DC4h case   23:*/		return 0x82200DC8;
		  /* 82200DC8h */ case   24:  		/* li R3, 0 */
		/* 82200DC8h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82200DC8h case   24:*/		return 0x82200DCC;
		  /* 82200DCCh */ case   25:  		/* b 44 */
		/* 82200DCCh case   25:*/		return 0x82200DF8;
		/* 82200DCCh case   25:*/		return 0x82200DD0;
	}
	return 0x82200DD0;
} // Block from 82200D68h-82200DD0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82200DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200DD0);
		  /* 82200DD0h */ case    0:  		/* addi R6, R1, 108 */
		/* 82200DD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x6C);
		/* 82200DD0h case    0:*/		return 0x82200DD4;
		  /* 82200DD4h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82200DD4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82200DD4h case    1:*/		return 0x82200DD8;
		  /* 82200DD8h */ case    2:  		/* addi R5, R1, 264 */
		/* 82200DD8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x108);
		/* 82200DD8h case    2:*/		return 0x82200DDC;
		  /* 82200DDCh */ case    3:  		/* mr R3, R31 */
		/* 82200DDCh case    3:*/		regs.R3 = regs.R31;
		/* 82200DDCh case    3:*/		return 0x82200DE0;
		  /* 82200DE0h */ case    4:  		/* bl -85640 */
		/* 82200DE0h case    4:*/		regs.LR = 0x82200DE4; return 0x821EBF58;
		/* 82200DE0h case    4:*/		return 0x82200DE4;
		  /* 82200DE4h */ case    5:  		/* b 20 */
		/* 82200DE4h case    5:*/		return 0x82200DF8;
		/* 82200DE4h case    5:*/		return 0x82200DE8;
	}
	return 0x82200DE8;
} // Block from 82200DD0h-82200DE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82200DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200DE8);
		  /* 82200DE8h */ case    0:  		/* addi R6, R1, 108 */
		/* 82200DE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x6C);
		/* 82200DE8h case    0:*/		return 0x82200DEC;
		  /* 82200DECh */ case    1:  		/* addi R5, R1, 264 */
		/* 82200DECh case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x108);
		/* 82200DECh case    1:*/		return 0x82200DF0;
		  /* 82200DF0h */ case    2:  		/* mr R3, R31 */
		/* 82200DF0h case    2:*/		regs.R3 = regs.R31;
		/* 82200DF0h case    2:*/		return 0x82200DF4;
		  /* 82200DF4h */ case    3:  		/* bl -85788 */
		/* 82200DF4h case    3:*/		regs.LR = 0x82200DF8; return 0x821EBED8;
		/* 82200DF4h case    3:*/		return 0x82200DF8;
	}
	return 0x82200DF8;
} // Block from 82200DE8h-82200DF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82200DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200DF8);
		  /* 82200DF8h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82200DF8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82200DF8h case    0:*/		return 0x82200DFC;
		  /* 82200DFCh */ case    1:  		/* bc 12, CR0_EQ, 14468 */
		/* 82200DFCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82204680;  }
		/* 82200DFCh case    1:*/		return 0x82200E00;
		  /* 82200E00h */ case    2:  		/* lwz R11, <#[R1 + 264]> */
		/* 82200E00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 82200E00h case    2:*/		return 0x82200E04;
		  /* 82200E04h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 82200E04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82200E04h case    3:*/		return 0x82200E08;
		  /* 82200E08h */ case    4:  		/* bc 4, CR6_EQ, 14468 */
		/* 82200E08h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220468C;  }
		/* 82200E08h case    4:*/		return 0x82200E0C;
		  /* 82200E0Ch */ case    5:  		/* lwz R11, <#[R1 + 108]> */
		/* 82200E0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 82200E0Ch case    5:*/		return 0x82200E10;
		  /* 82200E10h */ case    6:  		/* addi R3, R1, 1008 */
		/* 82200E10h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3F0);
		/* 82200E10h case    6:*/		return 0x82200E14;
		  /* 82200E14h */ case    7:  		/* lwz R28, <#[R1 + 3500]> */
		/* 82200E14h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82200E14h case    7:*/		return 0x82200E18;
		  /* 82200E18h */ case    8:  		/* rlwinm R5, R11, 1, 0, 30 */
		/* 82200E18h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R11);
		/* 82200E18h case    8:*/		return 0x82200E1C;
		  /* 82200E1Ch */ case    9:  		/* mr R4, R28 */
		/* 82200E1Ch case    9:*/		regs.R4 = regs.R28;
		/* 82200E1Ch case    9:*/		return 0x82200E20;
		  /* 82200E20h */ case   10:  		/* bl -43792 */
		/* 82200E20h case   10:*/		regs.LR = 0x82200E24; return 0x821F6310;
		/* 82200E20h case   10:*/		return 0x82200E24;
		  /* 82200E24h */ case   11:  		/* mr R4, R28 */
		/* 82200E24h case   11:*/		regs.R4 = regs.R28;
		/* 82200E24h case   11:*/		return 0x82200E28;
		  /* 82200E28h */ case   12:  		/* addi R3, R1, 2104 */
		/* 82200E28h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x838);
		/* 82200E28h case   12:*/		return 0x82200E2C;
		  /* 82200E2Ch */ case   13:  		/* lwz R5, <#[R1 + 108]> */
		/* 82200E2Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 82200E2Ch case   13:*/		return 0x82200E30;
		  /* 82200E30h */ case   14:  		/* bl -43808 */
		/* 82200E30h case   14:*/		regs.LR = 0x82200E34; return 0x821F6310;
		/* 82200E30h case   14:*/		return 0x82200E34;
		  /* 82200E34h */ case   15:  		/* lwz R29, <#[R1 + 108]> */
		/* 82200E34h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000006C) );
		/* 82200E34h case   15:*/		return 0x82200E38;
		  /* 82200E38h */ case   16:  		/* cmplwi CR6, R29, 0 */
		/* 82200E38h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82200E38h case   16:*/		return 0x82200E3C;
		  /* 82200E3Ch */ case   17:  		/* bc 12, CR6_EQ, 152 */
		/* 82200E3Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82200ED4;  }
		/* 82200E3Ch case   17:*/		return 0x82200E40;
		  /* 82200E40h */ case   18:  		/* cmplwi CR6, R29, 4 */
		/* 82200E40h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82200E40h case   18:*/		return 0x82200E44;
		  /* 82200E44h */ case   19:  		/* mr R30, R29 */
		/* 82200E44h case   19:*/		regs.R30 = regs.R29;
		/* 82200E44h case   19:*/		return 0x82200E48;
		  /* 82200E48h */ case   20:  		/* bc 12, CR6_LT, 8 */
		/* 82200E48h case   20:*/		if ( regs.CR[6].lt ) { return 0x82200E50;  }
		/* 82200E48h case   20:*/		return 0x82200E4C;
		  /* 82200E4Ch */ case   21:  		/* li R30, 4 */
		/* 82200E4Ch case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82200E4Ch case   21:*/		return 0x82200E50;
	}
	return 0x82200E50;
} // Block from 82200DF8h-82200E50h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82200E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200E50);
		  /* 82200E50h */ case    0:  		/* li R6, 228 */
		/* 82200E50h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82200E50h case    0:*/		return 0x82200E54;
		  /* 82200E54h */ case    1:  		/* mr R5, R30 */
		/* 82200E54h case    1:*/		regs.R5 = regs.R30;
		/* 82200E54h case    1:*/		return 0x82200E58;
		  /* 82200E58h */ case    2:  		/* addi R4, R1, 1008 */
		/* 82200E58h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3F0);
		/* 82200E58h case    2:*/		return 0x82200E5C;
		  /* 82200E5Ch */ case    3:  		/* mr R3, R31 */
		/* 82200E5Ch case    3:*/		regs.R3 = regs.R31;
		/* 82200E5Ch case    3:*/		return 0x82200E60;
		  /* 82200E60h */ case    4:  		/* bl -59160 */
		/* 82200E60h case    4:*/		regs.LR = 0x82200E64; return 0x821F2748;
		/* 82200E60h case    4:*/		return 0x82200E64;
		  /* 82200E64h */ case    5:  		/* mr R27, R3 */
		/* 82200E64h case    5:*/		regs.R27 = regs.R3;
		/* 82200E64h case    5:*/		return 0x82200E68;
		  /* 82200E68h */ case    6:  		/* li R7, 1 */
		/* 82200E68h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82200E68h case    6:*/		return 0x82200E6C;
		  /* 82200E6Ch */ case    7:  		/* li R6, 0 */
		/* 82200E6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82200E6Ch case    7:*/		return 0x82200E70;
		  /* 82200E70h */ case    8:  		/* mr R5, R30 */
		/* 82200E70h case    8:*/		regs.R5 = regs.R30;
		/* 82200E70h case    8:*/		return 0x82200E74;
		  /* 82200E74h */ case    9:  		/* addi R4, R1, 2104 */
		/* 82200E74h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x838);
		/* 82200E74h case    9:*/		return 0x82200E78;
		  /* 82200E78h */ case   10:  		/* mr R3, R31 */
		/* 82200E78h case   10:*/		regs.R3 = regs.R31;
		/* 82200E78h case   10:*/		return 0x82200E7C;
		  /* 82200E7Ch */ case   11:  		/* bl -59740 */
		/* 82200E7Ch case   11:*/		regs.LR = 0x82200E80; return 0x821F2520;
		/* 82200E7Ch case   11:*/		return 0x82200E80;
		  /* 82200E80h */ case   12:  		/* mr R11, R3 */
		/* 82200E80h case   12:*/		regs.R11 = regs.R3;
		/* 82200E80h case   12:*/		return 0x82200E84;
		  /* 82200E84h */ case   13:  		/* mr R3, R31 */
		/* 82200E84h case   13:*/		regs.R3 = regs.R31;
		/* 82200E84h case   13:*/		return 0x82200E88;
		  /* 82200E88h */ case   14:  		/* mr R4, R11 */
		/* 82200E88h case   14:*/		regs.R4 = regs.R11;
		/* 82200E88h case   14:*/		return 0x82200E8C;
		  /* 82200E8Ch */ case   15:  		/* lwz R5, <#[R11 + 12]> */
		/* 82200E8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 82200E8Ch case   15:*/		return 0x82200E90;
		  /* 82200E90h */ case   16:  		/* bl -589216 */
		/* 82200E90h case   16:*/		regs.LR = 0x82200E94; return 0x821710F0;
		/* 82200E90h case   16:*/		return 0x82200E94;
		  /* 82200E94h */ case   17:  		/* li R4, 4 */
		/* 82200E94h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200E94h case   17:*/		return 0x82200E98;
		  /* 82200E98h */ case   18:  		/* mr R26, R3 */
		/* 82200E98h case   18:*/		regs.R26 = regs.R3;
		/* 82200E98h case   18:*/		return 0x82200E9C;
		  /* 82200E9Ch */ case   19:  		/* bl -562140 */
		/* 82200E9Ch case   19:*/		regs.LR = 0x82200EA0; return 0x82177AC0;
		/* 82200E9Ch case   19:*/		return 0x82200EA0;
		  /* 82200EA0h */ case   20:  		/* mr R5, R26 */
		/* 82200EA0h case   20:*/		regs.R5 = regs.R26;
		/* 82200EA0h case   20:*/		return 0x82200EA4;
		  /* 82200EA4h */ case   21:  		/* mr R4, R27 */
		/* 82200EA4h case   21:*/		regs.R4 = regs.R27;
		/* 82200EA4h case   21:*/		return 0x82200EA8;
		  /* 82200EA8h */ case   22:  		/* mr R3, R31 */
		/* 82200EA8h case   22:*/		regs.R3 = regs.R31;
		/* 82200EA8h case   22:*/		return 0x82200EAC;
		  /* 82200EACh */ case   23:  		/* bl -77156 */
		/* 82200EACh case   23:*/		regs.LR = 0x82200EB0; return 0x821EE148;
		/* 82200EACh case   23:*/		return 0x82200EB0;
		  /* 82200EB0h */ case   24:  		/* mr R5, R3 */
		/* 82200EB0h case   24:*/		regs.R5 = regs.R3;
		/* 82200EB0h case   24:*/		return 0x82200EB4;
		  /* 82200EB4h */ case   25:  		/* mr R4, R30 */
		/* 82200EB4h case   25:*/		regs.R4 = regs.R30;
		/* 82200EB4h case   25:*/		return 0x82200EB8;
		  /* 82200EB8h */ case   26:  		/* addi R3, R1, 1008 */
		/* 82200EB8h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3F0);
		/* 82200EB8h case   26:*/		return 0x82200EBC;
		  /* 82200EBCh */ case   27:  		/* bl -61348 */
		/* 82200EBCh case   27:*/		regs.LR = 0x82200EC0; return 0x821F1F18;
		/* 82200EBCh case   27:*/		return 0x82200EC0;
		  /* 82200EC0h */ case   28:  		/* li R4, 0 */
		/* 82200EC0h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82200EC0h case   28:*/		return 0x82200EC4;
		  /* 82200EC4h */ case   29:  		/* addi R3, R1, 1008 */
		/* 82200EC4h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3F0);
		/* 82200EC4h case   29:*/		return 0x82200EC8;
		  /* 82200EC8h */ case   30:  		/* subf R29, R30, R29 */
		/* 82200EC8h case   30:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82200EC8h case   30:*/		return 0x82200ECC;
		  /* 82200ECCh */ case   31:  		/* bl -78036 */
		/* 82200ECCh case   31:*/		regs.LR = 0x82200ED0; return 0x821EDDF8;
		/* 82200ECCh case   31:*/		return 0x82200ED0;
		  /* 82200ED0h */ case   32:  		/* b -152 */
		/* 82200ED0h case   32:*/		return 0x82200E38;
		/* 82200ED0h case   32:*/		return 0x82200ED4;
	}
	return 0x82200ED4;
} // Block from 82200E50h-82200ED4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82200ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200ED4);
		  /* 82200ED4h */ case    0:  		/* lwz R5, <#[R1 + 108]> */
		/* 82200ED4h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 82200ED4h case    0:*/		return 0x82200ED8;
		  /* 82200ED8h */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 82200ED8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82200ED8h case    1:*/		return 0x82200EDC;
		  /* 82200EDCh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82200EDCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82200EF0;  }
		/* 82200EDCh case    2:*/		return 0x82200EE0;
		  /* 82200EE0h */ case    3:  		/* mr R4, R28 */
		/* 82200EE0h case    3:*/		regs.R4 = regs.R28;
		/* 82200EE0h case    3:*/		return 0x82200EE4;
		  /* 82200EE4h */ case    4:  		/* addi R3, R1, 3016 */
		/* 82200EE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBC8);
		/* 82200EE4h case    4:*/		return 0x82200EE8;
		  /* 82200EE8h */ case    5:  		/* bl -63240 */
		/* 82200EE8h case    5:*/		regs.LR = 0x82200EEC; return 0x821F17E0;
		/* 82200EE8h case    5:*/		return 0x82200EEC;
		  /* 82200EECh */ case    6:  		/* lwz R5, <#[R1 + 108]> */
		/* 82200EECh case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 82200EECh case    6:*/		return 0x82200EF0;
	}
	return 0x82200EF0;
} // Block from 82200ED4h-82200EF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82200EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200EF0);
		  /* 82200EF0h */ case    0:  		/* mr R4, R28 */
		/* 82200EF0h case    0:*/		regs.R4 = regs.R28;
		/* 82200EF0h case    0:*/		return 0x82200EF4;
		  /* 82200EF4h */ case    1:  		/* mr R3, R31 */
		/* 82200EF4h case    1:*/		regs.R3 = regs.R31;
		/* 82200EF4h case    1:*/		return 0x82200EF8;
		  /* 82200EF8h */ case    2:  		/* bl -42472 */
		/* 82200EF8h case    2:*/		regs.LR = 0x82200EFC; return 0x821F6910;
		/* 82200EF8h case    2:*/		return 0x82200EFC;
		  /* 82200EFCh */ case    3:  		/* mr R4, R3 */
		/* 82200EFCh case    3:*/		regs.R4 = regs.R3;
		/* 82200EFCh case    3:*/		return 0x82200F00;
		  /* 82200F00h */ case    4:  		/* mr R3, R31 */
		/* 82200F00h case    4:*/		regs.R3 = regs.R31;
		/* 82200F00h case    4:*/		return 0x82200F04;
		  /* 82200F04h */ case    5:  		/* bl -69684 */
		/* 82200F04h case    5:*/		regs.LR = 0x82200F08; return 0x821EFED0;
		/* 82200F04h case    5:*/		return 0x82200F08;
		  /* 82200F08h */ case    6:  		/* mr R4, R3 */
		/* 82200F08h case    6:*/		regs.R4 = regs.R3;
		/* 82200F08h case    6:*/		return 0x82200F0C;
		  /* 82200F0Ch */ case    7:  		/* mr R3, R31 */
		/* 82200F0Ch case    7:*/		regs.R3 = regs.R31;
		/* 82200F0Ch case    7:*/		return 0x82200F10;
		  /* 82200F10h */ case    8:  		/* bl -69848 */
		/* 82200F10h case    8:*/		regs.LR = 0x82200F14; return 0x821EFE38;
		/* 82200F10h case    8:*/		return 0x82200F14;
		  /* 82200F14h */ case    9:  		/* lwz R5, <#[R1 + 108]> */
		/* 82200F14h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 82200F14h case    9:*/		return 0x82200F18;
		  /* 82200F18h */ case   10:  		/* mr R30, R3 */
		/* 82200F18h case   10:*/		regs.R30 = regs.R3;
		/* 82200F18h case   10:*/		return 0x82200F1C;
		  /* 82200F1Ch */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 82200F1Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82200F1Ch case   11:*/		return 0x82200F20;
		  /* 82200F20h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 82200F20h case   12:*/		if ( regs.CR[6].eq ) { return 0x82200F30;  }
		/* 82200F20h case   12:*/		return 0x82200F24;
		  /* 82200F24h */ case   13:  		/* addi R3, R1, 2872 */
		/* 82200F24h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB38);
		/* 82200F24h case   13:*/		return 0x82200F28;
		  /* 82200F28h */ case   14:  		/* mr R4, R28 */
		/* 82200F28h case   14:*/		regs.R4 = regs.R28;
		/* 82200F28h case   14:*/		return 0x82200F2C;
		  /* 82200F2Ch */ case   15:  		/* bl -63308 */
		/* 82200F2Ch case   15:*/		regs.LR = 0x82200F30; return 0x821F17E0;
		/* 82200F2Ch case   15:*/		return 0x82200F30;
	}
	return 0x82200F30;
} // Block from 82200EF0h-82200F30h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82200F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200F30);
		  /* 82200F30h */ case    0:  		/* mr R4, R28 */
		/* 82200F30h case    0:*/		regs.R4 = regs.R28;
		/* 82200F30h case    0:*/		return 0x82200F34;
	}
	return 0x82200F34;
} // Block from 82200F30h-82200F34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82200F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200F34);
		  /* 82200F34h */ case    0:  		/* mr R5, R30 */
		/* 82200F34h case    0:*/		regs.R5 = regs.R30;
		/* 82200F34h case    0:*/		return 0x82200F38;
	}
	return 0x82200F38;
} // Block from 82200F34h-82200F38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82200F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200F38);
		  /* 82200F38h */ case    0:  		/* li R6, 0 */
		/* 82200F38h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82200F38h case    0:*/		return 0x82200F3C;
		  /* 82200F3Ch */ case    1:  		/* mr R3, R31 */
		/* 82200F3Ch case    1:*/		regs.R3 = regs.R31;
		/* 82200F3Ch case    1:*/		return 0x82200F40;
		  /* 82200F40h */ case    2:  		/* bl -34232 */
		/* 82200F40h case    2:*/		regs.LR = 0x82200F44; return 0x821F8988;
		/* 82200F40h case    2:*/		return 0x82200F44;
		  /* 82200F44h */ case    3:  		/* b -19492 */
		/* 82200F44h case    3:*/		return 0x821FC320;
		/* 82200F44h case    3:*/		return 0x82200F48;
		  /* 82200F48h */ case    4:  		/* lwz R11, <#[R14 + 36]> */
		/* 82200F48h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 82200F48h case    4:*/		return 0x82200F4C;
		  /* 82200F4Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82200F4Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200F4Ch case    5:*/		return 0x82200F50;
		  /* 82200F50h */ case    6:  		/* bc 12, CR6_EQ, 14236 */
		/* 82200F50h case    6:*/		if ( regs.CR[6].eq ) { return 0x822046EC;  }
		/* 82200F50h case    6:*/		return 0x82200F54;
		  /* 82200F54h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 82200F54h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82200F54h case    7:*/		return 0x82200F58;
		  /* 82200F58h */ case    8:  		/* cmpwi CR6, R10, 1 */
		/* 82200F58h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82200F58h case    8:*/		return 0x82200F5C;
		  /* 82200F5Ch */ case    9:  		/* bc 4, CR6_EQ, 14224 */
		/* 82200F5Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x822046EC;  }
		/* 82200F5Ch case    9:*/		return 0x82200F60;
		  /* 82200F60h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 82200F60h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82200F60h case   10:*/		return 0x82200F64;
		  /* 82200F64h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82200F64h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200F64h case   11:*/		return 0x82200F68;
		  /* 82200F68h */ case   12:  		/* bc 12, CR6_EQ, 14200 */
		/* 82200F68h case   12:*/		if ( regs.CR[6].eq ) { return 0x822046E0;  }
		/* 82200F68h case   12:*/		return 0x82200F6C;
		  /* 82200F6Ch */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 82200F6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82200F6Ch case   13:*/		return 0x82200F70;
		  /* 82200F70h */ case   14:  		/* cmpwi CR6, R10, 1 */
		/* 82200F70h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82200F70h case   14:*/		return 0x82200F74;
		  /* 82200F74h */ case   15:  		/* bc 4, CR6_EQ, 14188 */
		/* 82200F74h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822046E0;  }
		/* 82200F74h case   15:*/		return 0x82200F78;
		  /* 82200F78h */ case   16:  		/* lwz R10, <#[R11 + 12]> */
		/* 82200F78h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82200F78h case   16:*/		return 0x82200F7C;
		  /* 82200F7Ch */ case   17:  		/* lwz R4, <#[R11 + 8]> */
		/* 82200F7Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 82200F7Ch case   17:*/		return 0x82200F80;
		  /* 82200F80h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 82200F80h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82200F80h case   18:*/		return 0x82200F84;
		  /* 82200F84h */ case   19:  		/* bc 12, CR6_EQ, 14160 */
		/* 82200F84h case   19:*/		if ( regs.CR[6].eq ) { return 0x822046D4;  }
		/* 82200F84h case   19:*/		return 0x82200F88;
		  /* 82200F88h */ case   20:  		/* lwz R11, <#[R10 + 4]> */
		/* 82200F88h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82200F88h case   20:*/		return 0x82200F8C;
		  /* 82200F8Ch */ case   21:  		/* cmpwi CR6, R11, 1 */
		/* 82200F8Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82200F8Ch case   21:*/		return 0x82200F90;
		  /* 82200F90h */ case   22:  		/* bc 4, CR6_EQ, 14148 */
		/* 82200F90h case   22:*/		if ( !regs.CR[6].eq ) { return 0x822046D4;  }
		/* 82200F90h case   22:*/		return 0x82200F94;
		  /* 82200F94h */ case   23:  		/* lwz R11, <#[R4 + 4]> */
		/* 82200F94h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82200F94h case   23:*/		return 0x82200F98;
		  /* 82200F98h */ case   24:  		/* lwz R30, <#[R10 + 8]> */
		/* 82200F98h case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000008) );
		/* 82200F98h case   24:*/		return 0x82200F9C;
		  /* 82200F9Ch */ case   25:  		/* cmpwi CR6, R11, 1 */
		/* 82200F9Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82200F9Ch case   25:*/		return 0x82200FA0;
		  /* 82200FA0h */ case   26:  		/* bc 4, CR6_EQ, 48 */
		/* 82200FA0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82200FD0;  }
		/* 82200FA0h case   26:*/		return 0x82200FA4;
		  /* 82200FA4h */ case   27:  		/* lwz R11, <#[R4 + 12]> */
		/* 82200FA4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82200FA4h case   27:*/		return 0x82200FA8;
		  /* 82200FA8h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 82200FA8h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200FA8h case   28:*/		return 0x82200FAC;
		  /* 82200FACh */ case   29:  		/* bc 12, CR6_EQ, 12 */
		/* 82200FACh case   29:*/		if ( regs.CR[6].eq ) { return 0x82200FB8;  }
		/* 82200FACh case   29:*/		return 0x82200FB0;
		  /* 82200FB0h */ case   30:  		/* li R3, 0 */
		/* 82200FB0h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82200FB0h case   30:*/		return 0x82200FB4;
		  /* 82200FB4h */ case   31:  		/* b 44 */
		/* 82200FB4h case   31:*/		return 0x82200FE0;
		/* 82200FB4h case   31:*/		return 0x82200FB8;
	}
	return 0x82200FB8;
} // Block from 82200F38h-82200FB8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82200FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200FB8);
		  /* 82200FB8h */ case    0:  		/* addi R6, R1, 188 */
		/* 82200FB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xBC);
		/* 82200FB8h case    0:*/		return 0x82200FBC;
		  /* 82200FBCh */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82200FBCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82200FBCh case    1:*/		return 0x82200FC0;
		  /* 82200FC0h */ case    2:  		/* addi R5, R1, 248 */
		/* 82200FC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF8);
		/* 82200FC0h case    2:*/		return 0x82200FC4;
		  /* 82200FC4h */ case    3:  		/* mr R3, R31 */
		/* 82200FC4h case    3:*/		regs.R3 = regs.R31;
		/* 82200FC4h case    3:*/		return 0x82200FC8;
		  /* 82200FC8h */ case    4:  		/* bl -86128 */
		/* 82200FC8h case    4:*/		regs.LR = 0x82200FCC; return 0x821EBF58;
		/* 82200FC8h case    4:*/		return 0x82200FCC;
		  /* 82200FCCh */ case    5:  		/* b 20 */
		/* 82200FCCh case    5:*/		return 0x82200FE0;
		/* 82200FCCh case    5:*/		return 0x82200FD0;
	}
	return 0x82200FD0;
} // Block from 82200FB8h-82200FD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82200FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200FD0);
		  /* 82200FD0h */ case    0:  		/* addi R6, R1, 188 */
		/* 82200FD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xBC);
		/* 82200FD0h case    0:*/		return 0x82200FD4;
		  /* 82200FD4h */ case    1:  		/* addi R5, R1, 248 */
		/* 82200FD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF8);
		/* 82200FD4h case    1:*/		return 0x82200FD8;
		  /* 82200FD8h */ case    2:  		/* mr R3, R31 */
		/* 82200FD8h case    2:*/		regs.R3 = regs.R31;
		/* 82200FD8h case    2:*/		return 0x82200FDC;
		  /* 82200FDCh */ case    3:  		/* bl -86276 */
		/* 82200FDCh case    3:*/		regs.LR = 0x82200FE0; return 0x821EBED8;
		/* 82200FDCh case    3:*/		return 0x82200FE0;
	}
	return 0x82200FE0;
} // Block from 82200FD0h-82200FE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82200FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200FE0);
		  /* 82200FE0h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82200FE0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82200FE0h case    0:*/		return 0x82200FE4;
		  /* 82200FE4h */ case    1:  		/* bc 12, CR0_EQ, 14028 */
		/* 82200FE4h case    1:*/		if ( regs.CR[0].eq ) { return 0x822046B0;  }
		/* 82200FE4h case    1:*/		return 0x82200FE8;
		  /* 82200FE8h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 82200FE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82200FE8h case    2:*/		return 0x82200FEC;
		  /* 82200FECh */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 82200FECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82200FECh case    3:*/		return 0x82200FF0;
		  /* 82200FF0h */ case    4:  		/* bc 4, CR6_EQ, 48 */
		/* 82200FF0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82201020;  }
		/* 82200FF0h case    4:*/		return 0x82200FF4;
		  /* 82200FF4h */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 82200FF4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82200FF4h case    5:*/		return 0x82200FF8;
		  /* 82200FF8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82200FF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200FF8h case    6:*/		return 0x82200FFC;
		  /* 82200FFCh */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82200FFCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82201008;  }
		/* 82200FFCh case    7:*/		return 0x82201000;
		  /* 82201000h */ case    8:  		/* li R3, 0 */
		/* 82201000h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82201000h case    8:*/		return 0x82201004;
		  /* 82201004h */ case    9:  		/* b 48 */
		/* 82201004h case    9:*/		return 0x82201034;
		/* 82201004h case    9:*/		return 0x82201008;
	}
	return 0x82201008;
} // Block from 82200FE0h-82201008h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82201008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201008);
		  /* 82201008h */ case    0:  		/* addi R6, R1, 316 */
		/* 82201008h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x13C);
		/* 82201008h case    0:*/		return 0x8220100C;
		  /* 8220100Ch */ case    1:  		/* lwz R4, <#[R30 + 8]> */
		/* 8220100Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 8220100Ch case    1:*/		return 0x82201010;
		  /* 82201010h */ case    2:  		/* addi R5, R1, 308 */
		/* 82201010h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x134);
		/* 82201010h case    2:*/		return 0x82201014;
		  /* 82201014h */ case    3:  		/* mr R3, R31 */
		/* 82201014h case    3:*/		regs.R3 = regs.R31;
		/* 82201014h case    3:*/		return 0x82201018;
		  /* 82201018h */ case    4:  		/* bl -86208 */
		/* 82201018h case    4:*/		regs.LR = 0x8220101C; return 0x821EBF58;
		/* 82201018h case    4:*/		return 0x8220101C;
		  /* 8220101Ch */ case    5:  		/* b 24 */
		/* 8220101Ch case    5:*/		return 0x82201034;
		/* 8220101Ch case    5:*/		return 0x82201020;
	}
	return 0x82201020;
} // Block from 82201008h-82201020h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82201020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201020);
		  /* 82201020h */ case    0:  		/* addi R6, R1, 316 */
		/* 82201020h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x13C);
		/* 82201020h case    0:*/		return 0x82201024;
		  /* 82201024h */ case    1:  		/* addi R5, R1, 308 */
		/* 82201024h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x134);
		/* 82201024h case    1:*/		return 0x82201028;
		  /* 82201028h */ case    2:  		/* mr R4, R30 */
		/* 82201028h case    2:*/		regs.R4 = regs.R30;
		/* 82201028h case    2:*/		return 0x8220102C;
		  /* 8220102Ch */ case    3:  		/* mr R3, R31 */
		/* 8220102Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220102Ch case    3:*/		return 0x82201030;
		  /* 82201030h */ case    4:  		/* bl -86360 */
		/* 82201030h case    4:*/		regs.LR = 0x82201034; return 0x821EBED8;
		/* 82201030h case    4:*/		return 0x82201034;
	}
	return 0x82201034;
} // Block from 82201020h-82201034h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82201034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201034);
		  /* 82201034h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82201034h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82201034h case    0:*/		return 0x82201038;
		  /* 82201038h */ case    1:  		/* bc 12, CR0_EQ, 13956 */
		/* 82201038h case    1:*/		if ( regs.CR[0].eq ) { return 0x822046BC;  }
		/* 82201038h case    1:*/		return 0x8220103C;
		  /* 8220103Ch */ case    2:  		/* lwz R11, <#[R1 + 248]> */
		/* 8220103Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F8) );
		/* 8220103Ch case    2:*/		return 0x82201040;
		  /* 82201040h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 82201040h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82201040h case    3:*/		return 0x82201044;
		  /* 82201044h */ case    4:  		/* bc 4, CR6_EQ, 13956 */
		/* 82201044h case    4:*/		if ( !regs.CR[6].eq ) { return 0x822046C8;  }
		/* 82201044h case    4:*/		return 0x82201048;
		  /* 82201048h */ case    5:  		/* lwz R11, <#[R1 + 308]> */
		/* 82201048h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000134) );
		/* 82201048h case    5:*/		return 0x8220104C;
		  /* 8220104Ch */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 8220104Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220104Ch case    6:*/		return 0x82201050;
		  /* 82201050h */ case    7:  		/* bc 4, CR6_EQ, 13944 */
		/* 82201050h case    7:*/		if ( !regs.CR[6].eq ) { return 0x822046C8;  }
		/* 82201050h case    7:*/		return 0x82201054;
		  /* 82201054h */ case    8:  		/* lwz R11, <#[R1 + 316]> */
		/* 82201054h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82201054h case    8:*/		return 0x82201058;
		  /* 82201058h */ case    9:  		/* lwz R5, <#[R1 + 188]> */
		/* 82201058h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000BC) );
		/* 82201058h case    9:*/		return 0x8220105C;
		  /* 8220105Ch */ case   10:  		/* cmplw CR6, R5, R11 */
		/* 8220105Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8220105Ch case   10:*/		return 0x82201060;
		  /* 82201060h */ case   11:  		/* bc 4, CR6_EQ, 13928 */
		/* 82201060h case   11:*/		if ( !regs.CR[6].eq ) { return 0x822046C8;  }
		/* 82201060h case   11:*/		return 0x82201064;
		  /* 82201064h */ case   12:  		/* lwz R29, <#[R1 + 3500]> */
		/* 82201064h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201064h case   12:*/		return 0x82201068;
		  /* 82201068h */ case   13:  		/* mr R3, R31 */
		/* 82201068h case   13:*/		regs.R3 = regs.R31;
		/* 82201068h case   13:*/		return 0x8220106C;
		  /* 8220106Ch */ case   14:  		/* mr R4, R29 */
		/* 8220106Ch case   14:*/		regs.R4 = regs.R29;
		/* 8220106Ch case   14:*/		return 0x82201070;
		  /* 82201070h */ case   15:  		/* bl -42752 */
		/* 82201070h case   15:*/		regs.LR = 0x82201074; return 0x821F6970;
		/* 82201070h case   15:*/		return 0x82201074;
		  /* 82201074h */ case   16:  		/* lwz R11, <#[R1 + 188]> */
		/* 82201074h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000BC) );
		/* 82201074h case   16:*/		return 0x82201078;
		  /* 82201078h */ case   17:  		/* mr R30, R3 */
		/* 82201078h case   17:*/		regs.R30 = regs.R3;
		/* 82201078h case   17:*/		return 0x8220107C;
		  /* 8220107Ch */ case   18:  		/* rlwinm. R5, R11, 1, 0, 30 */
		/* 8220107Ch case   18:*/		cpu::op::rlwinm<1,1,0,30>(regs,&regs.R5,regs.R11);
		/* 8220107Ch case   18:*/		return 0x82201080;
		  /* 82201080h */ case   19:  		/* bc 12, CR0_EQ, -1428 */
		/* 82201080h case   19:*/		if ( regs.CR[0].eq ) { return 0x82200AEC;  }
		/* 82201080h case   19:*/		return 0x82201084;
		  /* 82201084h */ case   20:  		/* addi R3, R1, 3096 */
		/* 82201084h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC18);
		/* 82201084h case   20:*/		return 0x82201088;
		  /* 82201088h */ case   21:  		/* b -1444 */
		/* 82201088h case   21:*/		return 0x82200AE4;
		/* 82201088h case   21:*/		return 0x8220108C;
		  /* 8220108Ch */ case   22:  		/* cmplwi CR6, R29, 4 */
		/* 8220108Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 8220108Ch case   22:*/		return 0x82201090;
		  /* 82201090h */ case   23:  		/* bc 4, CR6_EQ, 13928 */
		/* 82201090h case   23:*/		if ( !regs.CR[6].eq ) { return 0x822046F8;  }
		/* 82201090h case   23:*/		return 0x82201094;
		  /* 82201094h */ case   24:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82201094h case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201094h case   24:*/		return 0x82201098;
		  /* 82201098h */ case   25:  		/* li R5, 8 */
		/* 82201098h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82201098h case   25:*/		return 0x8220109C;
		  /* 8220109Ch */ case   26:  		/* addi R3, R1, 1552 */
		/* 8220109Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x610);
		/* 8220109Ch case   26:*/		return 0x822010A0;
		  /* 822010A0h */ case   27:  		/* mr R4, R30 */
		/* 822010A0h case   27:*/		regs.R4 = regs.R30;
		/* 822010A0h case   27:*/		return 0x822010A4;
		  /* 822010A4h */ case   28:  		/* bl -44436 */
		/* 822010A4h case   28:*/		regs.LR = 0x822010A8; return 0x821F6310;
		/* 822010A4h case   28:*/		return 0x822010A8;
		  /* 822010A8h */ case   29:  		/* mr R4, R30 */
		/* 822010A8h case   29:*/		regs.R4 = regs.R30;
		/* 822010A8h case   29:*/		return 0x822010AC;
		  /* 822010ACh */ case   30:  		/* li R5, 4 */
		/* 822010ACh case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822010ACh case   30:*/		return 0x822010B0;
		  /* 822010B0h */ case   31:  		/* addi R3, R1, 2552 */
		/* 822010B0h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9F8);
		/* 822010B0h case   31:*/		return 0x822010B4;
		  /* 822010B4h */ case   32:  		/* bl -44452 */
		/* 822010B4h case   32:*/		regs.LR = 0x822010B8; return 0x821F6310;
		/* 822010B4h case   32:*/		return 0x822010B8;
		  /* 822010B8h */ case   33:  		/* li R7, 1 */
		/* 822010B8h case   33:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822010B8h case   33:*/		return 0x822010BC;
		  /* 822010BCh */ case   34:  		/* li R6, 0 */
		/* 822010BCh case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822010BCh case   34:*/		return 0x822010C0;
		  /* 822010C0h */ case   35:  		/* li R5, 4 */
		/* 822010C0h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822010C0h case   35:*/		return 0x822010C4;
		  /* 822010C4h */ case   36:  		/* addi R4, R1, 2552 */
		/* 822010C4h case   36:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x9F8);
		/* 822010C4h case   36:*/		return 0x822010C8;
		  /* 822010C8h */ case   37:  		/* mr R3, R31 */
		/* 822010C8h case   37:*/		regs.R3 = regs.R31;
		/* 822010C8h case   37:*/		return 0x822010CC;
		  /* 822010CCh */ case   38:  		/* bl -60332 */
		/* 822010CCh case   38:*/		regs.LR = 0x822010D0; return 0x821F2520;
		/* 822010CCh case   38:*/		return 0x822010D0;
		  /* 822010D0h */ case   39:  		/* mr R29, R3 */
		/* 822010D0h case   39:*/		regs.R29 = regs.R3;
		/* 822010D0h case   39:*/		return 0x822010D4;
		  /* 822010D4h */ case   40:  		/* li R6, 228 */
		/* 822010D4h case   40:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822010D4h case   40:*/		return 0x822010D8;
		  /* 822010D8h */ case   41:  		/* li R5, 4 */
		/* 822010D8h case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822010D8h case   41:*/		return 0x822010DC;
		  /* 822010DCh */ case   42:  		/* addi R4, R1, 1552 */
		/* 822010DCh case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x610);
		/* 822010DCh case   42:*/		return 0x822010E0;
		  /* 822010E0h */ case   43:  		/* mr R3, R31 */
		/* 822010E0h case   43:*/		regs.R3 = regs.R31;
		/* 822010E0h case   43:*/		return 0x822010E4;
		  /* 822010E4h */ case   44:  		/* bl -59804 */
		/* 822010E4h case   44:*/		regs.LR = 0x822010E8; return 0x821F2748;
		/* 822010E4h case   44:*/		return 0x822010E8;
		  /* 822010E8h */ case   45:  		/* mr R4, R3 */
		/* 822010E8h case   45:*/		regs.R4 = regs.R3;
		/* 822010E8h case   45:*/		return 0x822010EC;
		  /* 822010ECh */ case   46:  		/* mr R3, R31 */
		/* 822010ECh case   46:*/		regs.R3 = regs.R31;
		/* 822010ECh case   46:*/		return 0x822010F0;
		  /* 822010F0h */ case   47:  		/* mr R5, R29 */
		/* 822010F0h case   47:*/		regs.R5 = regs.R29;
		/* 822010F0h case   47:*/		return 0x822010F4;
		  /* 822010F4h */ case   48:  		/* bl -74084 */
		/* 822010F4h case   48:*/		regs.LR = 0x822010F8; return 0x821EEF90;
		/* 822010F4h case   48:*/		return 0x822010F8;
		  /* 822010F8h */ case   49:  		/* mr R5, R3 */
		/* 822010F8h case   49:*/		regs.R5 = regs.R3;
		/* 822010F8h case   49:*/		return 0x822010FC;
		  /* 822010FCh */ case   50:  		/* li R4, 4 */
		/* 822010FCh case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 822010FCh case   50:*/		return 0x82201100;
		  /* 82201100h */ case   51:  		/* addi R3, R1, 1552 */
		/* 82201100h case   51:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x610);
		/* 82201100h case   51:*/		return 0x82201104;
		  /* 82201104h */ case   52:  		/* bl -61932 */
		/* 82201104h case   52:*/		regs.LR = 0x82201108; return 0x821F1F18;
		/* 82201104h case   52:*/		return 0x82201108;
		  /* 82201108h */ case   53:  		/* li R5, 4 */
		/* 82201108h case   53:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82201108h case   53:*/		return 0x8220110C;
		  /* 8220110Ch */ case   54:  		/* mr R4, R30 */
		/* 8220110Ch case   54:*/		regs.R4 = regs.R30;
		/* 8220110Ch case   54:*/		return 0x82201110;
		  /* 82201110h */ case   55:  		/* addi R3, R1, 2888 */
		/* 82201110h case   55:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB48);
		/* 82201110h case   55:*/		return 0x82201114;
		  /* 82201114h */ case   56:  		/* b -14216 */
		/* 82201114h case   56:*/		return 0x821FD98C;
		/* 82201114h case   56:*/		return 0x82201118;
		  /* 82201118h */ case   57:  		/* lwz R26, <#[R1 + 3500]> */
		/* 82201118h case   57:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201118h case   57:*/		return 0x8220111C;
		  /* 8220111Ch */ case   58:  		/* mulli R5, R29, 3 */
		/* 8220111Ch case   58:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 8220111Ch case   58:*/		return 0x82201120;
		  /* 82201120h */ case   59:  		/* mr R4, R26 */
		/* 82201120h case   59:*/		regs.R4 = regs.R26;
		/* 82201120h case   59:*/		return 0x82201124;
		  /* 82201124h */ case   60:  		/* addi R3, R1, 880 */
		/* 82201124h case   60:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x370);
		/* 82201124h case   60:*/		return 0x82201128;
		  /* 82201128h */ case   61:  		/* bl -44568 */
		/* 82201128h case   61:*/		regs.LR = 0x8220112C; return 0x821F6310;
		/* 82201128h case   61:*/		return 0x8220112C;
		  /* 8220112Ch */ case   62:  		/* rlwinm R28, R29, 1, 0, 30 */
		/* 8220112Ch case   62:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R29);
		/* 8220112Ch case   62:*/		return 0x82201130;
		  /* 82201130h */ case   63:  		/* mr R4, R26 */
		/* 82201130h case   63:*/		regs.R4 = regs.R26;
		/* 82201130h case   63:*/		return 0x82201134;
		  /* 82201134h */ case   64:  		/* mr R5, R28 */
		/* 82201134h case   64:*/		regs.R5 = regs.R28;
		/* 82201134h case   64:*/		return 0x82201138;
		  /* 82201138h */ case   65:  		/* addi R3, R1, 2424 */
		/* 82201138h case   65:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x978);
		/* 82201138h case   65:*/		return 0x8220113C;
		  /* 8220113Ch */ case   66:  		/* bl -44588 */
		/* 8220113Ch case   66:*/		regs.LR = 0x82201140; return 0x821F6310;
		/* 8220113Ch case   66:*/		return 0x82201140;
		  /* 82201140h */ case   67:  		/* mr R5, R29 */
		/* 82201140h case   67:*/		regs.R5 = regs.R29;
		/* 82201140h case   67:*/		return 0x82201144;
		  /* 82201144h */ case   68:  		/* mr R4, R26 */
		/* 82201144h case   68:*/		regs.R4 = regs.R26;
		/* 82201144h case   68:*/		return 0x82201148;
		  /* 82201148h */ case   69:  		/* addi R3, R1, 2136 */
		/* 82201148h case   69:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x858);
		/* 82201148h case   69:*/		return 0x8220114C;
		  /* 8220114Ch */ case   70:  		/* bl -44604 */
		/* 8220114Ch case   70:*/		regs.LR = 0x82201150; return 0x821F6310;
		/* 8220114Ch case   70:*/		return 0x82201150;
		  /* 82201150h */ case   71:  		/* mr R6, R29 */
		/* 82201150h case   71:*/		regs.R6 = regs.R29;
		/* 82201150h case   71:*/		return 0x82201154;
		  /* 82201154h */ case   72:  		/* addi R5, R1, 2136 */
		/* 82201154h case   72:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x858);
		/* 82201154h case   72:*/		return 0x82201158;
		  /* 82201158h */ case   73:  		/* addi R4, R1, 2424 */
		/* 82201158h case   73:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x978);
		/* 82201158h case   73:*/		return 0x8220115C;
		  /* 8220115Ch */ case   74:  		/* mr R3, R31 */
		/* 8220115Ch case   74:*/		regs.R3 = regs.R31;
		/* 8220115Ch case   74:*/		return 0x82201160;
		  /* 82201160h */ case   75:  		/* bl -49128 */
		/* 82201160h case   75:*/		regs.LR = 0x82201164; return 0x821F5178;
		/* 82201160h case   75:*/		return 0x82201164;
		  /* 82201164h */ case   76:  		/* mr R30, R3 */
		/* 82201164h case   76:*/		regs.R30 = regs.R3;
		/* 82201164h case   76:*/		return 0x82201168;
		  /* 82201168h */ case   77:  		/* li R5, 1 */
		/* 82201168h case   77:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82201168h case   77:*/		return 0x8220116C;
		  /* 8220116Ch */ case   78:  		/* fmr FR4, FR31 */
		/* 8220116Ch case   78:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 8220116Ch case   78:*/		return 0x82201170;
		  /* 82201170h */ case   79:  		/* mr R4, R31 */
		/* 82201170h case   79:*/		regs.R4 = regs.R31;
		/* 82201170h case   79:*/		return 0x82201174;
		  /* 82201174h */ case   80:  		/* fmr FR3, FR31 */
		/* 82201174h case   80:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82201174h case   80:*/		return 0x82201178;
		  /* 82201178h */ case   81:  		/* addi R3, R1, 3032 */
		/* 82201178h case   81:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBD8);
		/* 82201178h case   81:*/		return 0x8220117C;
		  /* 8220117Ch */ case   82:  		/* fmr FR2, FR31 */
		/* 8220117Ch case   82:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 8220117Ch case   82:*/		return 0x82201180;
		  /* 82201180h */ case   83:  		/* fmr FR1, FR31 */
		/* 82201180h case   83:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82201180h case   83:*/		return 0x82201184;
		  /* 82201184h */ case   84:  		/* bl 154828 */
		/* 82201184h case   84:*/		regs.LR = 0x82201188; return 0x82226E50;
		/* 82201184h case   84:*/		return 0x82201188;
		  /* 82201188h */ case   85:  		/* mr R11, R3 */
		/* 82201188h case   85:*/		regs.R11 = regs.R3;
		/* 82201188h case   85:*/		return 0x8220118C;
		  /* 8220118Ch */ case   86:  		/* mr R4, R30 */
		/* 8220118Ch case   86:*/		regs.R4 = regs.R30;
		/* 8220118Ch case   86:*/		return 0x82201190;
		  /* 82201190h */ case   87:  		/* mr R3, R31 */
		/* 82201190h case   87:*/		regs.R3 = regs.R31;
		/* 82201190h case   87:*/		return 0x82201194;
		  /* 82201194h */ case   88:  		/* ld R5, <#[R11]> */
		/* 82201194h case   88:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82201194h case   88:*/		return 0x82201198;
		  /* 82201198h */ case   89:  		/* bl -54704 */
		/* 82201198h case   89:*/		regs.LR = 0x8220119C; return 0x821F3BE8;
		/* 82201198h case   89:*/		return 0x8220119C;
		  /* 8220119Ch */ case   90:  		/* mr R27, R3 */
		/* 8220119Ch case   90:*/		regs.R27 = regs.R3;
		/* 8220119Ch case   90:*/		return 0x822011A0;
		  /* 822011A0h */ case   91:  		/* cmplwi CR6, R29, 0 */
		/* 822011A0h case   91:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822011A0h case   91:*/		return 0x822011A4;
		  /* 822011A4h */ case   92:  		/* bc 12, CR6_EQ, 192 */
		/* 822011A4h case   92:*/		if ( regs.CR[6].eq ) { return 0x82201264;  }
		/* 822011A4h case   92:*/		return 0x822011A8;
		  /* 822011A8h */ case   93:  		/* cmplwi CR6, R29, 4 */
		/* 822011A8h case   93:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 822011A8h case   93:*/		return 0x822011AC;
		  /* 822011ACh */ case   94:  		/* mr R30, R29 */
		/* 822011ACh case   94:*/		regs.R30 = regs.R29;
		/* 822011ACh case   94:*/		return 0x822011B0;
		  /* 822011B0h */ case   95:  		/* bc 12, CR6_LT, 8 */
		/* 822011B0h case   95:*/		if ( regs.CR[6].lt ) { return 0x822011B8;  }
		/* 822011B0h case   95:*/		return 0x822011B4;
		  /* 822011B4h */ case   96:  		/* li R30, 4 */
		/* 822011B4h case   96:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822011B4h case   96:*/		return 0x822011B8;
	}
	return 0x822011B8;
} // Block from 82201034h-822011B8h (97 instructions)

//////////////////////////////////////////////////////
// Block at 822011B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822011B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822011B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822011B8);
		  /* 822011B8h */ case    0:  		/* li R6, 228 */
		/* 822011B8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822011B8h case    0:*/		return 0x822011BC;
		  /* 822011BCh */ case    1:  		/* mr R5, R30 */
		/* 822011BCh case    1:*/		regs.R5 = regs.R30;
		/* 822011BCh case    1:*/		return 0x822011C0;
		  /* 822011C0h */ case    2:  		/* addi R4, R1, 880 */
		/* 822011C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x370);
		/* 822011C0h case    2:*/		return 0x822011C4;
		  /* 822011C4h */ case    3:  		/* mr R3, R31 */
		/* 822011C4h case    3:*/		regs.R3 = regs.R31;
		/* 822011C4h case    3:*/		return 0x822011C8;
		  /* 822011C8h */ case    4:  		/* bl -60032 */
		/* 822011C8h case    4:*/		regs.LR = 0x822011CC; return 0x821F2748;
		/* 822011C8h case    4:*/		return 0x822011CC;
		  /* 822011CCh */ case    5:  		/* mr R25, R3 */
		/* 822011CCh case    5:*/		regs.R25 = regs.R3;
		/* 822011CCh case    5:*/		return 0x822011D0;
		  /* 822011D0h */ case    6:  		/* mr R3, R31 */
		/* 822011D0h case    6:*/		regs.R3 = regs.R31;
		/* 822011D0h case    6:*/		return 0x822011D4;
		  /* 822011D4h */ case    7:  		/* mr R4, R25 */
		/* 822011D4h case    7:*/		regs.R4 = regs.R25;
		/* 822011D4h case    7:*/		return 0x822011D8;
		  /* 822011D8h */ case    8:  		/* lwz R5, <#[R25 + 12]> */
		/* 822011D8h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 822011D8h case    8:*/		return 0x822011DC;
		  /* 822011DCh */ case    9:  		/* bl -590060 */
		/* 822011DCh case    9:*/		regs.LR = 0x822011E0; return 0x821710F0;
		/* 822011DCh case    9:*/		return 0x822011E0;
		  /* 822011E0h */ case   10:  		/* li R4, 4 */
		/* 822011E0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 822011E0h case   10:*/		return 0x822011E4;
		  /* 822011E4h */ case   11:  		/* mr R24, R3 */
		/* 822011E4h case   11:*/		regs.R24 = regs.R3;
		/* 822011E4h case   11:*/		return 0x822011E8;
		  /* 822011E8h */ case   12:  		/* bl -562984 */
		/* 822011E8h case   12:*/		regs.LR = 0x822011EC; return 0x82177AC0;
		/* 822011E8h case   12:*/		return 0x822011EC;
		  /* 822011ECh */ case   13:  		/* mr R5, R24 */
		/* 822011ECh case   13:*/		regs.R5 = regs.R24;
		/* 822011ECh case   13:*/		return 0x822011F0;
		  /* 822011F0h */ case   14:  		/* mr R4, R24 */
		/* 822011F0h case   14:*/		regs.R4 = regs.R24;
		/* 822011F0h case   14:*/		return 0x822011F4;
		  /* 822011F4h */ case   15:  		/* mr R3, R31 */
		/* 822011F4h case   15:*/		regs.R3 = regs.R31;
		/* 822011F4h case   15:*/		return 0x822011F8;
		  /* 822011F8h */ case   16:  		/* bl -78000 */
		/* 822011F8h case   16:*/		regs.LR = 0x822011FC; return 0x821EE148;
		/* 822011F8h case   16:*/		return 0x822011FC;
		  /* 822011FCh */ case   17:  		/* mr R24, R3 */
		/* 822011FCh case   17:*/		regs.R24 = regs.R3;
		/* 822011FCh case   17:*/		return 0x82201200;
		  /* 82201200h */ case   18:  		/* mr R4, R27 */
		/* 82201200h case   18:*/		regs.R4 = regs.R27;
		/* 82201200h case   18:*/		return 0x82201204;
		  /* 82201204h */ case   19:  		/* mr R3, R31 */
		/* 82201204h case   19:*/		regs.R3 = regs.R31;
		/* 82201204h case   19:*/		return 0x82201208;
		  /* 82201208h */ case   20:  		/* bl -561672 */
		/* 82201208h case   20:*/		regs.LR = 0x8220120C; return 0x82178000;
		/* 82201208h case   20:*/		return 0x8220120C;
		  /* 8220120Ch */ case   21:  		/* mr R11, R3 */
		/* 8220120Ch case   21:*/		regs.R11 = regs.R3;
		/* 8220120Ch case   21:*/		return 0x82201210;
		  /* 82201210h */ case   22:  		/* mr R4, R24 */
		/* 82201210h case   22:*/		regs.R4 = regs.R24;
		/* 82201210h case   22:*/		return 0x82201214;
		  /* 82201214h */ case   23:  		/* mr R3, R31 */
		/* 82201214h case   23:*/		regs.R3 = regs.R31;
		/* 82201214h case   23:*/		return 0x82201218;
		  /* 82201218h */ case   24:  		/* mr R5, R11 */
		/* 82201218h case   24:*/		regs.R5 = regs.R11;
		/* 82201218h case   24:*/		return 0x8220121C;
		  /* 8220121Ch */ case   25:  		/* lwz R10, <#[R11]> */
		/* 8220121Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220121Ch case   25:*/		return 0x82201220;
		  /* 82201220h */ case   26:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 82201220h case   26:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 82201220h case   26:*/		return 0x82201224;
		  /* 82201224h */ case   27:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 82201224h case   27:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 82201224h case   27:*/		return 0x82201228;
		  /* 82201228h */ case   28:  		/* stw R10, <#[R11]> */
		/* 82201228h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82201228h case   28:*/		return 0x8220122C;
		  /* 8220122Ch */ case   29:  		/* bl -72012 */
		/* 8220122Ch case   29:*/		regs.LR = 0x82201230; return 0x821EF8E0;
		/* 8220122Ch case   29:*/		return 0x82201230;
		  /* 82201230h */ case   30:  		/* mr R5, R3 */
		/* 82201230h case   30:*/		regs.R5 = regs.R3;
		/* 82201230h case   30:*/		return 0x82201234;
		  /* 82201234h */ case   31:  		/* mr R4, R25 */
		/* 82201234h case   31:*/		regs.R4 = regs.R25;
		/* 82201234h case   31:*/		return 0x82201238;
		  /* 82201238h */ case   32:  		/* mr R3, R31 */
		/* 82201238h case   32:*/		regs.R3 = regs.R31;
		/* 82201238h case   32:*/		return 0x8220123C;
		  /* 8220123Ch */ case   33:  		/* bl -70204 */
		/* 8220123Ch case   33:*/		regs.LR = 0x82201240; return 0x821F0000;
		/* 8220123Ch case   33:*/		return 0x82201240;
		  /* 82201240h */ case   34:  		/* mr R5, R3 */
		/* 82201240h case   34:*/		regs.R5 = regs.R3;
		/* 82201240h case   34:*/		return 0x82201244;
		  /* 82201244h */ case   35:  		/* mr R4, R30 */
		/* 82201244h case   35:*/		regs.R4 = regs.R30;
		/* 82201244h case   35:*/		return 0x82201248;
		  /* 82201248h */ case   36:  		/* addi R3, R1, 880 */
		/* 82201248h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x370);
		/* 82201248h case   36:*/		return 0x8220124C;
		  /* 8220124Ch */ case   37:  		/* bl -62260 */
		/* 8220124Ch case   37:*/		regs.LR = 0x82201250; return 0x821F1F18;
		/* 8220124Ch case   37:*/		return 0x82201250;
		  /* 82201250h */ case   38:  		/* mr R4, R30 */
		/* 82201250h case   38:*/		regs.R4 = regs.R30;
		/* 82201250h case   38:*/		return 0x82201254;
		  /* 82201254h */ case   39:  		/* addi R3, R1, 880 */
		/* 82201254h case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x370);
		/* 82201254h case   39:*/		return 0x82201258;
		  /* 82201258h */ case   40:  		/* subf R29, R30, R29 */
		/* 82201258h case   40:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82201258h case   40:*/		return 0x8220125C;
		  /* 8220125Ch */ case   41:  		/* bl -78948 */
		/* 8220125Ch case   41:*/		regs.LR = 0x82201260; return 0x821EDDF8;
		/* 8220125Ch case   41:*/		return 0x82201260;
		  /* 82201260h */ case   42:  		/* b -192 */
		/* 82201260h case   42:*/		return 0x822011A0;
		/* 82201260h case   42:*/		return 0x82201264;
	}
	return 0x82201264;
} // Block from 822011B8h-82201264h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82201264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201264);
		  /* 82201264h */ case    0:  		/* cmplwi CR0, R28, 0 */
		/* 82201264h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 82201264h case    0:*/		return 0x82201268;
		  /* 82201268h */ case    1:  		/* bc 12, CR0_EQ, -20296 */
		/* 82201268h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 82201268h case    1:*/		return 0x8220126C;
		  /* 8220126Ch */ case    2:  		/* mr R5, R28 */
		/* 8220126Ch case    2:*/		regs.R5 = regs.R28;
		/* 8220126Ch case    2:*/		return 0x82201270;
		  /* 82201270h */ case    3:  		/* mr R4, R26 */
		/* 82201270h case    3:*/		regs.R4 = regs.R26;
		/* 82201270h case    3:*/		return 0x82201274;
		  /* 82201274h */ case    4:  		/* addi R3, R1, 2904 */
		/* 82201274h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB58);
		/* 82201274h case    4:*/		return 0x82201278;
		  /* 82201278h */ case    5:  		/* b -14572 */
		/* 82201278h case    5:*/		return 0x821FD98C;
		/* 82201278h case    5:*/		return 0x8220127C;
		  /* 8220127Ch */ case    6:  		/* lwz R25, <#[R1 + 3500]> */
		/* 8220127Ch case    6:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220127Ch case    6:*/		return 0x82201280;
		  /* 82201280h */ case    7:  		/* rlwinm R26, R29, 1, 0, 30 */
		/* 82201280h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R26,regs.R29);
		/* 82201280h case    7:*/		return 0x82201284;
		  /* 82201284h */ case    8:  		/* addi R3, R1, 1136 */
		/* 82201284h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x470);
		/* 82201284h case    8:*/		return 0x82201288;
		  /* 82201288h */ case    9:  		/* mr R4, R25 */
		/* 82201288h case    9:*/		regs.R4 = regs.R25;
		/* 82201288h case    9:*/		return 0x8220128C;
		  /* 8220128Ch */ case   10:  		/* mr R5, R26 */
		/* 8220128Ch case   10:*/		regs.R5 = regs.R26;
		/* 8220128Ch case   10:*/		return 0x82201290;
		  /* 82201290h */ case   11:  		/* bl -44928 */
		/* 82201290h case   11:*/		regs.LR = 0x82201294; return 0x821F6310;
		/* 82201290h case   11:*/		return 0x82201294;
		  /* 82201294h */ case   12:  		/* mr R5, R29 */
		/* 82201294h case   12:*/		regs.R5 = regs.R29;
		/* 82201294h case   12:*/		return 0x82201298;
		  /* 82201298h */ case   13:  		/* mr R4, R25 */
		/* 82201298h case   13:*/		regs.R4 = regs.R25;
		/* 82201298h case   13:*/		return 0x8220129C;
		  /* 8220129Ch */ case   14:  		/* addi R3, R1, 376 */
		/* 8220129Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x178);
		/* 8220129Ch case   14:*/		return 0x822012A0;
		  /* 822012A0h */ case   15:  		/* bl -44944 */
		/* 822012A0h case   15:*/		regs.LR = 0x822012A4; return 0x821F6310;
		/* 822012A0h case   15:*/		return 0x822012A4;
		  /* 822012A4h */ case   16:  		/* mr R30, R29 */
		/* 822012A4h case   16:*/		regs.R30 = regs.R29;
		/* 822012A4h case   16:*/		return 0x822012A8;
		  /* 822012A8h */ case   17:  		/* lwz R28, <#[R1 + 380]> */
		/* 822012A8h case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000017C) );
		/* 822012A8h case   17:*/		return 0x822012AC;
		  /* 822012ACh */ case   18:  		/* lwz R27, <#[R1 + 384]> */
		/* 822012ACh case   18:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000180) );
		/* 822012ACh case   18:*/		return 0x822012B0;
		  /* 822012B0h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 822012B0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822012B0h case   19:*/		return 0x822012B4;
		  /* 822012B4h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 822012B4h case   20:*/		if ( regs.CR[6].eq ) { return 0x822012E8;  }
		/* 822012B4h case   20:*/		return 0x822012B8;
		  /* 822012B8h */ case   21:  		/* addi R3, R1, 376 */
		/* 822012B8h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x178);
		/* 822012B8h case   21:*/		return 0x822012BC;
		  /* 822012BCh */ case   22:  		/* bl -263260 */
		/* 822012BCh case   22:*/		regs.LR = 0x822012C0; return 0x821C0E60;
		/* 822012BCh case   22:*/		return 0x822012C0;
		  /* 822012C0h */ case   23:  		/* mr R4, R3 */
		/* 822012C0h case   23:*/		regs.R4 = regs.R3;
		/* 822012C0h case   23:*/		return 0x822012C4;
		  /* 822012C4h */ case   24:  		/* mr R3, R31 */
		/* 822012C4h case   24:*/		regs.R3 = regs.R31;
		/* 822012C4h case   24:*/		return 0x822012C8;
		  /* 822012C8h */ case   25:  		/* bl -57208 */
		/* 822012C8h case   25:*/		regs.LR = 0x822012CC; return 0x821F3350;
		/* 822012C8h case   25:*/		return 0x822012CC;
		  /* 822012CCh */ case   26:  		/* mr R5, R3 */
		/* 822012CCh case   26:*/		regs.R5 = regs.R3;
		/* 822012CCh case   26:*/		return 0x822012D0;
		  /* 822012D0h */ case   27:  		/* li R6, 0 */
		/* 822012D0h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822012D0h case   27:*/		return 0x822012D4;
		  /* 822012D4h */ case   28:  		/* mr R4, R25 */
		/* 822012D4h case   28:*/		regs.R4 = regs.R25;
		/* 822012D4h case   28:*/		return 0x822012D8;
		  /* 822012D8h */ case   29:  		/* mr R3, R31 */
		/* 822012D8h case   29:*/		regs.R3 = regs.R31;
		/* 822012D8h case   29:*/		return 0x822012DC;
		  /* 822012DCh */ case   30:  		/* bl -35156 */
		/* 822012DCh case   30:*/		regs.LR = 0x822012E0; return 0x821F8988;
		/* 822012DCh case   30:*/		return 0x822012E0;
		  /* 822012E0h */ case   31:  		/* addi R30, R30, -1 */
		/* 822012E0h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 822012E0h case   31:*/		return 0x822012E4;
		  /* 822012E4h */ case   32:  		/* b -52 */
		/* 822012E4h case   32:*/		return 0x822012B0;
		/* 822012E4h case   32:*/		return 0x822012E8;
	}
	return 0x822012E8;
} // Block from 82201264h-822012E8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 822012E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822012E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822012E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822012E8);
		  /* 822012E8h */ case    0:  		/* mr R5, R29 */
		/* 822012E8h case    0:*/		regs.R5 = regs.R29;
		/* 822012E8h case    0:*/		return 0x822012EC;
		  /* 822012ECh */ case    1:  		/* mr R4, R25 */
		/* 822012ECh case    1:*/		regs.R4 = regs.R25;
		/* 822012ECh case    1:*/		return 0x822012F0;
		  /* 822012F0h */ case    2:  		/* addi R3, R1, 2168 */
		/* 822012F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x878);
		/* 822012F0h case    2:*/		return 0x822012F4;
		  /* 822012F4h */ case    3:  		/* bl -45028 */
		/* 822012F4h case    3:*/		regs.LR = 0x822012F8; return 0x821F6310;
		/* 822012F4h case    3:*/		return 0x822012F8;
		  /* 822012F8h */ case    4:  		/* stw R28, <#[R1 + 380]> */
		/* 822012F8h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000017C) );
		/* 822012F8h case    4:*/		return 0x822012FC;
		  /* 822012FCh */ case    5:  		/* stw R27, <#[R1 + 384]> */
		/* 822012FCh case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000180) );
		/* 822012FCh case    5:*/		return 0x82201300;
		  /* 82201300h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82201300h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201300h case    6:*/		return 0x82201304;
		  /* 82201304h */ case    7:  		/* bc 12, CR6_EQ, 260 */
		/* 82201304h case    7:*/		if ( regs.CR[6].eq ) { return 0x82201408;  }
		/* 82201304h case    7:*/		return 0x82201308;
		  /* 82201308h */ case    8:  		/* cmplwi CR6, R29, 4 */
		/* 82201308h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82201308h case    8:*/		return 0x8220130C;
		  /* 8220130Ch */ case    9:  		/* mr R30, R29 */
		/* 8220130Ch case    9:*/		regs.R30 = regs.R29;
		/* 8220130Ch case    9:*/		return 0x82201310;
		  /* 82201310h */ case   10:  		/* bc 12, CR6_LT, 8 */
		/* 82201310h case   10:*/		if ( regs.CR[6].lt ) { return 0x82201318;  }
		/* 82201310h case   10:*/		return 0x82201314;
		  /* 82201314h */ case   11:  		/* li R30, 4 */
		/* 82201314h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82201314h case   11:*/		return 0x82201318;
	}
	return 0x82201318;
} // Block from 822012E8h-82201318h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82201318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201318);
		  /* 82201318h */ case    0:  		/* li R6, 228 */
		/* 82201318h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82201318h case    0:*/		return 0x8220131C;
		  /* 8220131Ch */ case    1:  		/* mr R5, R30 */
		/* 8220131Ch case    1:*/		regs.R5 = regs.R30;
		/* 8220131Ch case    1:*/		return 0x82201320;
		  /* 82201320h */ case    2:  		/* addi R4, R1, 1136 */
		/* 82201320h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x470);
		/* 82201320h case    2:*/		return 0x82201324;
		  /* 82201324h */ case    3:  		/* mr R3, R31 */
		/* 82201324h case    3:*/		regs.R3 = regs.R31;
		/* 82201324h case    3:*/		return 0x82201328;
		  /* 82201328h */ case    4:  		/* bl -60384 */
		/* 82201328h case    4:*/		regs.LR = 0x8220132C; return 0x821F2748;
		/* 82201328h case    4:*/		return 0x8220132C;
		  /* 8220132Ch */ case    5:  		/* mr R28, R3 */
		/* 8220132Ch case    5:*/		regs.R28 = regs.R3;
		/* 8220132Ch case    5:*/		return 0x82201330;
		  /* 82201330h */ case    6:  		/* li R7, 1 */
		/* 82201330h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82201330h case    6:*/		return 0x82201334;
		  /* 82201334h */ case    7:  		/* li R6, 0 */
		/* 82201334h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82201334h case    7:*/		return 0x82201338;
		  /* 82201338h */ case    8:  		/* mr R5, R30 */
		/* 82201338h case    8:*/		regs.R5 = regs.R30;
		/* 82201338h case    8:*/		return 0x8220133C;
		  /* 8220133Ch */ case    9:  		/* addi R4, R1, 376 */
		/* 8220133Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x178);
		/* 8220133Ch case    9:*/		return 0x82201340;
		  /* 82201340h */ case   10:  		/* mr R3, R31 */
		/* 82201340h case   10:*/		regs.R3 = regs.R31;
		/* 82201340h case   10:*/		return 0x82201344;
		  /* 82201344h */ case   11:  		/* bl -60964 */
		/* 82201344h case   11:*/		regs.LR = 0x82201348; return 0x821F2520;
		/* 82201344h case   11:*/		return 0x82201348;
		  /* 82201348h */ case   12:  		/* mr R27, R3 */
		/* 82201348h case   12:*/		regs.R27 = regs.R3;
		/* 82201348h case   12:*/		return 0x8220134C;
		  /* 8220134Ch */ case   13:  		/* li R7, 1 */
		/* 8220134Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8220134Ch case   13:*/		return 0x82201350;
		  /* 82201350h */ case   14:  		/* li R6, 0 */
		/* 82201350h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82201350h case   14:*/		return 0x82201354;
		  /* 82201354h */ case   15:  		/* mr R5, R30 */
		/* 82201354h case   15:*/		regs.R5 = regs.R30;
		/* 82201354h case   15:*/		return 0x82201358;
		  /* 82201358h */ case   16:  		/* addi R4, R1, 2168 */
		/* 82201358h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x878);
		/* 82201358h case   16:*/		return 0x8220135C;
		  /* 8220135Ch */ case   17:  		/* mr R3, R31 */
		/* 8220135Ch case   17:*/		regs.R3 = regs.R31;
		/* 8220135Ch case   17:*/		return 0x82201360;
		  /* 82201360h */ case   18:  		/* bl -60992 */
		/* 82201360h case   18:*/		regs.LR = 0x82201364; return 0x821F2520;
		/* 82201360h case   18:*/		return 0x82201364;
		  /* 82201364h */ case   19:  		/* mr R5, R3 */
		/* 82201364h case   19:*/		regs.R5 = regs.R3;
		/* 82201364h case   19:*/		return 0x82201368;
		  /* 82201368h */ case   20:  		/* mr R4, R28 */
		/* 82201368h case   20:*/		regs.R4 = regs.R28;
		/* 82201368h case   20:*/		return 0x8220136C;
		  /* 8220136Ch */ case   21:  		/* mr R3, R31 */
		/* 8220136Ch case   21:*/		regs.R3 = regs.R31;
		/* 8220136Ch case   21:*/		return 0x82201370;
		  /* 82201370h */ case   22:  		/* bl -78136 */
		/* 82201370h case   22:*/		regs.LR = 0x82201374; return 0x821EE238;
		/* 82201370h case   22:*/		return 0x82201374;
		  /* 82201374h */ case   23:  		/* mr R28, R3 */
		/* 82201374h case   23:*/		regs.R28 = regs.R3;
		/* 82201374h case   23:*/		return 0x82201378;
		  /* 82201378h */ case   24:  		/* li R7, 228 */
		/* 82201378h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82201378h case   24:*/		return 0x8220137C;
		  /* 8220137Ch */ case   25:  		/* li R6, 2 */
		/* 8220137Ch case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8220137Ch case   25:*/		return 0x82201380;
		  /* 82201380h */ case   26:  		/* mr R3, R31 */
		/* 82201380h case   26:*/		regs.R3 = regs.R31;
		/* 82201380h case   26:*/		return 0x82201384;
		  /* 82201384h */ case   27:  		/* mr R4, R28 */
		/* 82201384h case   27:*/		regs.R4 = regs.R28;
		/* 82201384h case   27:*/		return 0x82201388;
		  /* 82201388h */ case   28:  		/* lwz R11, <#[R28 + 8]> */
		/* 82201388h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82201388h case   28:*/		return 0x8220138C;
		  /* 8220138Ch */ case   29:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 8220138Ch case   29:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 8220138Ch case   29:*/		return 0x82201390;
		  /* 82201390h */ case   30:  		/* bl 134832 */
		/* 82201390h case   30:*/		regs.LR = 0x82201394; return 0x82222240;
		/* 82201390h case   30:*/		return 0x82201394;
		  /* 82201394h */ case   31:  		/* mr R4, R3 */
		/* 82201394h case   31:*/		regs.R4 = regs.R3;
		/* 82201394h case   31:*/		return 0x82201398;
		  /* 82201398h */ case   32:  		/* mr R3, R31 */
		/* 82201398h case   32:*/		regs.R3 = regs.R31;
		/* 82201398h case   32:*/		return 0x8220139C;
		  /* 8220139Ch */ case   33:  		/* bl -76500 */
		/* 8220139Ch case   33:*/		regs.LR = 0x822013A0; return 0x821EE8C8;
		/* 8220139Ch case   33:*/		return 0x822013A0;
		  /* 822013A0h */ case   34:  		/* mr R24, R3 */
		/* 822013A0h case   34:*/		regs.R24 = regs.R3;
		/* 822013A0h case   34:*/		return 0x822013A4;
		  /* 822013A4h */ case   35:  		/* li R7, 228 */
		/* 822013A4h case   35:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 822013A4h case   35:*/		return 0x822013A8;
		  /* 822013A8h */ case   36:  		/* li R6, 4 */
		/* 822013A8h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 822013A8h case   36:*/		return 0x822013AC;
		  /* 822013ACh */ case   37:  		/* mr R3, R31 */
		/* 822013ACh case   37:*/		regs.R3 = regs.R31;
		/* 822013ACh case   37:*/		return 0x822013B0;
		  /* 822013B0h */ case   38:  		/* mr R4, R24 */
		/* 822013B0h case   38:*/		regs.R4 = regs.R24;
		/* 822013B0h case   38:*/		return 0x822013B4;
		  /* 822013B4h */ case   39:  		/* lwz R11, <#[R24 + 8]> */
		/* 822013B4h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 822013B4h case   39:*/		return 0x822013B8;
		  /* 822013B8h */ case   40:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 822013B8h case   40:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 822013B8h case   40:*/		return 0x822013BC;
		  /* 822013BCh */ case   41:  		/* bl 134788 */
		/* 822013BCh case   41:*/		regs.LR = 0x822013C0; return 0x82222240;
		/* 822013BCh case   41:*/		return 0x822013C0;
		  /* 822013C0h */ case   42:  		/* mr R6, R3 */
		/* 822013C0h case   42:*/		regs.R6 = regs.R3;
		/* 822013C0h case   42:*/		return 0x822013C4;
		  /* 822013C4h */ case   43:  		/* mr R5, R24 */
		/* 822013C4h case   43:*/		regs.R5 = regs.R24;
		/* 822013C4h case   43:*/		return 0x822013C8;
		  /* 822013C8h */ case   44:  		/* mr R4, R28 */
		/* 822013C8h case   44:*/		regs.R4 = regs.R28;
		/* 822013C8h case   44:*/		return 0x822013CC;
		  /* 822013CCh */ case   45:  		/* mr R3, R31 */
		/* 822013CCh case   45:*/		regs.R3 = regs.R31;
		/* 822013CCh case   45:*/		return 0x822013D0;
		  /* 822013D0h */ case   46:  		/* bl -68872 */
		/* 822013D0h case   46:*/		regs.LR = 0x822013D4; return 0x821F06C8;
		/* 822013D0h case   46:*/		return 0x822013D4;
		  /* 822013D4h */ case   47:  		/* mr R5, R3 */
		/* 822013D4h case   47:*/		regs.R5 = regs.R3;
		/* 822013D4h case   47:*/		return 0x822013D8;
		  /* 822013D8h */ case   48:  		/* mr R4, R27 */
		/* 822013D8h case   48:*/		regs.R4 = regs.R27;
		/* 822013D8h case   48:*/		return 0x822013DC;
		  /* 822013DCh */ case   49:  		/* mr R3, R31 */
		/* 822013DCh case   49:*/		regs.R3 = regs.R31;
		/* 822013DCh case   49:*/		return 0x822013E0;
		  /* 822013E0h */ case   50:  		/* bl -70400 */
		/* 822013E0h case   50:*/		regs.LR = 0x822013E4; return 0x821F00E0;
		/* 822013E0h case   50:*/		return 0x822013E4;
		  /* 822013E4h */ case   51:  		/* mr R5, R3 */
		/* 822013E4h case   51:*/		regs.R5 = regs.R3;
		/* 822013E4h case   51:*/		return 0x822013E8;
		  /* 822013E8h */ case   52:  		/* mr R4, R30 */
		/* 822013E8h case   52:*/		regs.R4 = regs.R30;
		/* 822013E8h case   52:*/		return 0x822013EC;
		  /* 822013ECh */ case   53:  		/* addi R3, R1, 1136 */
		/* 822013ECh case   53:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x470);
		/* 822013ECh case   53:*/		return 0x822013F0;
		  /* 822013F0h */ case   54:  		/* bl -62680 */
		/* 822013F0h case   54:*/		regs.LR = 0x822013F4; return 0x821F1F18;
		/* 822013F0h case   54:*/		return 0x822013F4;
		  /* 822013F4h */ case   55:  		/* mr R4, R30 */
		/* 822013F4h case   55:*/		regs.R4 = regs.R30;
		/* 822013F4h case   55:*/		return 0x822013F8;
		  /* 822013F8h */ case   56:  		/* addi R3, R1, 1136 */
		/* 822013F8h case   56:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x470);
		/* 822013F8h case   56:*/		return 0x822013FC;
		  /* 822013FCh */ case   57:  		/* subf R29, R30, R29 */
		/* 822013FCh case   57:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 822013FCh case   57:*/		return 0x82201400;
		  /* 82201400h */ case   58:  		/* bl -79368 */
		/* 82201400h case   58:*/		regs.LR = 0x82201404; return 0x821EDDF8;
		/* 82201400h case   58:*/		return 0x82201404;
		  /* 82201404h */ case   59:  		/* b -260 */
		/* 82201404h case   59:*/		return 0x82201300;
		/* 82201404h case   59:*/		return 0x82201408;
	}
	return 0x82201408;
} // Block from 82201318h-82201408h (60 instructions)

//////////////////////////////////////////////////////
// Block at 82201408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201408);
		  /* 82201408h */ case    0:  		/* cmplwi CR0, R26, 0 */
		/* 82201408h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R26,0x00000000);
		/* 82201408h case    0:*/		return 0x8220140C;
		  /* 8220140Ch */ case    1:  		/* bc 12, CR0_EQ, -20716 */
		/* 8220140Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 8220140Ch case    1:*/		return 0x82201410;
		  /* 82201410h */ case    2:  		/* mr R5, R26 */
		/* 82201410h case    2:*/		regs.R5 = regs.R26;
		/* 82201410h case    2:*/		return 0x82201414;
		  /* 82201414h */ case    3:  		/* mr R4, R25 */
		/* 82201414h case    3:*/		regs.R4 = regs.R25;
		/* 82201414h case    3:*/		return 0x82201418;
		  /* 82201418h */ case    4:  		/* addi R3, R1, 3160 */
		/* 82201418h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC58);
		/* 82201418h case    4:*/		return 0x8220141C;
		  /* 8220141Ch */ case    5:  		/* b -14992 */
		/* 8220141Ch case    5:*/		return 0x821FD98C;
		/* 8220141Ch case    5:*/		return 0x82201420;
		  /* 82201420h */ case    6:  		/* cmpwi CR6, R10, 5 */
		/* 82201420h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000005);
		/* 82201420h case    6:*/		return 0x82201424;
		  /* 82201424h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82201424h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82201438;  }
		/* 82201424h case    7:*/		return 0x82201428;
		  /* 82201428h */ case    8:  		/* lwz R11, <#[R31 + 608]> */
		/* 82201428h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 82201428h case    8:*/		return 0x8220142C;
		  /* 8220142Ch */ case    9:  		/* addi R11, R11, -1 */
		/* 8220142Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220142Ch case    9:*/		return 0x82201430;
		  /* 82201430h */ case   10:  		/* stw R11, <#[R31 + 608]> */
		/* 82201430h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 82201430h case   10:*/		return 0x82201434;
		  /* 82201434h */ case   11:  		/* b -20756 */
		/* 82201434h case   11:*/		return 0x821FC320;
		/* 82201434h case   11:*/		return 0x82201438;
	}
	return 0x82201438;
} // Block from 82201408h-82201438h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82201438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201438);
		  /* 82201438h */ case    0:  		/* mr R5, R29 */
		/* 82201438h case    0:*/		regs.R5 = regs.R29;
		/* 82201438h case    0:*/		return 0x8220143C;
		  /* 8220143Ch */ case    1:  		/* lwz R4, <#[R1 + 3500]> */
		/* 8220143Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220143Ch case    1:*/		return 0x82201440;
		  /* 82201440h */ case    2:  		/* addi R3, R1, 912 */
		/* 82201440h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x390);
		/* 82201440h case    2:*/		return 0x82201444;
		  /* 82201444h */ case    3:  		/* bl -45364 */
		/* 82201444h case    3:*/		regs.LR = 0x82201448; return 0x821F6310;
		/* 82201444h case    3:*/		return 0x82201448;
		  /* 82201448h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82201448h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201448h case    4:*/		return 0x8220144C;
		  /* 8220144Ch */ case    5:  		/* bc 12, CR6_EQ, -20780 */
		/* 8220144Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 8220144Ch case    5:*/		return 0x82201450;
		  /* 82201450h */ case    6:  		/* cmplwi CR6, R29, 4 */
		/* 82201450h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82201450h case    6:*/		return 0x82201454;
		  /* 82201454h */ case    7:  		/* mr R30, R29 */
		/* 82201454h case    7:*/		regs.R30 = regs.R29;
		/* 82201454h case    7:*/		return 0x82201458;
		  /* 82201458h */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 82201458h case    8:*/		if ( regs.CR[6].lt ) { return 0x82201460;  }
		/* 82201458h case    8:*/		return 0x8220145C;
		  /* 8220145Ch */ case    9:  		/* li R30, 4 */
		/* 8220145Ch case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 8220145Ch case    9:*/		return 0x82201460;
	}
	return 0x82201460;
} // Block from 82201438h-82201460h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82201460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201460);
		  /* 82201460h */ case    0:  		/* li R6, 228 */
		/* 82201460h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82201460h case    0:*/		return 0x82201464;
		  /* 82201464h */ case    1:  		/* mr R5, R30 */
		/* 82201464h case    1:*/		regs.R5 = regs.R30;
		/* 82201464h case    1:*/		return 0x82201468;
		  /* 82201468h */ case    2:  		/* addi R4, R1, 912 */
		/* 82201468h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x390);
		/* 82201468h case    2:*/		return 0x8220146C;
		  /* 8220146Ch */ case    3:  		/* mr R3, R31 */
		/* 8220146Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220146Ch case    3:*/		return 0x82201470;
		  /* 82201470h */ case    4:  		/* bl -60712 */
		/* 82201470h case    4:*/		regs.LR = 0x82201474; return 0x821F2748;
		/* 82201470h case    4:*/		return 0x82201474;
		  /* 82201474h */ case    5:  		/* mr R28, R3 */
		/* 82201474h case    5:*/		regs.R28 = regs.R3;
		/* 82201474h case    5:*/		return 0x82201478;
		  /* 82201478h */ case    6:  		/* mr R3, R31 */
		/* 82201478h case    6:*/		regs.R3 = regs.R31;
		/* 82201478h case    6:*/		return 0x8220147C;
		  /* 8220147Ch */ case    7:  		/* mr R4, R28 */
		/* 8220147Ch case    7:*/		regs.R4 = regs.R28;
		/* 8220147Ch case    7:*/		return 0x82201480;
		  /* 82201480h */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 82201480h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 82201480h case    8:*/		return 0x82201484;
		  /* 82201484h */ case    9:  		/* bl -590740 */
		/* 82201484h case    9:*/		regs.LR = 0x82201488; return 0x821710F0;
		/* 82201484h case    9:*/		return 0x82201488;
		  /* 82201488h */ case   10:  		/* li R4, 4 */
		/* 82201488h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82201488h case   10:*/		return 0x8220148C;
		  /* 8220148Ch */ case   11:  		/* mr R27, R3 */
		/* 8220148Ch case   11:*/		regs.R27 = regs.R3;
		/* 8220148Ch case   11:*/		return 0x82201490;
		  /* 82201490h */ case   12:  		/* bl -563664 */
		/* 82201490h case   12:*/		regs.LR = 0x82201494; return 0x82177AC0;
		/* 82201490h case   12:*/		return 0x82201494;
		  /* 82201494h */ case   13:  		/* mr R4, R28 */
		/* 82201494h case   13:*/		regs.R4 = regs.R28;
		/* 82201494h case   13:*/		return 0x82201498;
		  /* 82201498h */ case   14:  		/* mr R3, R31 */
		/* 82201498h case   14:*/		regs.R3 = regs.R31;
		/* 82201498h case   14:*/		return 0x8220149C;
		  /* 8220149Ch */ case   15:  		/* bl -79660 */
		/* 8220149Ch case   15:*/		regs.LR = 0x822014A0; return 0x821EDD70;
		/* 8220149Ch case   15:*/		return 0x822014A0;
		  /* 822014A0h */ case   16:  		/* mr R4, R3 */
		/* 822014A0h case   16:*/		regs.R4 = regs.R3;
		/* 822014A0h case   16:*/		return 0x822014A4;
		  /* 822014A4h */ case   17:  		/* mr R3, R31 */
		/* 822014A4h case   17:*/		regs.R3 = regs.R31;
		/* 822014A4h case   17:*/		return 0x822014A8;
		  /* 822014A8h */ case   18:  		/* mr R5, R27 */
		/* 822014A8h case   18:*/		regs.R5 = regs.R27;
		/* 822014A8h case   18:*/		return 0x822014AC;
		  /* 822014ACh */ case   19:  		/* bl -72876 */
		/* 822014ACh case   19:*/		regs.LR = 0x822014B0; return 0x821EF800;
		/* 822014ACh case   19:*/		return 0x822014B0;
		  /* 822014B0h */ case   20:  		/* mr R28, R3 */
		/* 822014B0h case   20:*/		regs.R28 = regs.R3;
		/* 822014B0h case   20:*/		return 0x822014B4;
		  /* 822014B4h */ case   21:  		/* mr R3, R31 */
		/* 822014B4h case   21:*/		regs.R3 = regs.R31;
		/* 822014B4h case   21:*/		return 0x822014B8;
		  /* 822014B8h */ case   22:  		/* mr R4, R28 */
		/* 822014B8h case   22:*/		regs.R4 = regs.R28;
		/* 822014B8h case   22:*/		return 0x822014BC;
		  /* 822014BCh */ case   23:  		/* bl -562364 */
		/* 822014BCh case   23:*/		regs.LR = 0x822014C0; return 0x82178000;
		/* 822014BCh case   23:*/		return 0x822014C0;
		  /* 822014C0h */ case   24:  		/* mr R4, R3 */
		/* 822014C0h case   24:*/		regs.R4 = regs.R3;
		/* 822014C0h case   24:*/		return 0x822014C4;
		  /* 822014C4h */ case   25:  		/* mr R3, R31 */
		/* 822014C4h case   25:*/		regs.R3 = regs.R31;
		/* 822014C4h case   25:*/		return 0x822014C8;
		  /* 822014C8h */ case   26:  		/* bl -79704 */
		/* 822014C8h case   26:*/		regs.LR = 0x822014CC; return 0x821EDD70;
		/* 822014C8h case   26:*/		return 0x822014CC;
		  /* 822014CCh */ case   27:  		/* mr R4, R3 */
		/* 822014CCh case   27:*/		regs.R4 = regs.R3;
		/* 822014CCh case   27:*/		return 0x822014D0;
		  /* 822014D0h */ case   28:  		/* mr R5, R28 */
		/* 822014D0h case   28:*/		regs.R5 = regs.R28;
		/* 822014D0h case   28:*/		return 0x822014D4;
		  /* 822014D4h */ case   29:  		/* mr R3, R31 */
		/* 822014D4h case   29:*/		regs.R3 = regs.R31;
		/* 822014D4h case   29:*/		return 0x822014D8;
		  /* 822014D8h */ case   30:  		/* bl -69344 */
		/* 822014D8h case   30:*/		regs.LR = 0x822014DC; return 0x821F05F8;
		/* 822014D8h case   30:*/		return 0x822014DC;
		  /* 822014DCh */ case   31:  		/* mr R5, R3 */
		/* 822014DCh case   31:*/		regs.R5 = regs.R3;
		/* 822014DCh case   31:*/		return 0x822014E0;
		  /* 822014E0h */ case   32:  		/* mr R4, R30 */
		/* 822014E0h case   32:*/		regs.R4 = regs.R30;
		/* 822014E0h case   32:*/		return 0x822014E4;
		  /* 822014E4h */ case   33:  		/* addi R3, R1, 912 */
		/* 822014E4h case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x390);
		/* 822014E4h case   33:*/		return 0x822014E8;
		  /* 822014E8h */ case   34:  		/* bl -62928 */
		/* 822014E8h case   34:*/		regs.LR = 0x822014EC; return 0x821F1F18;
		/* 822014E8h case   34:*/		return 0x822014EC;
		  /* 822014ECh */ case   35:  		/* li R4, 0 */
		/* 822014ECh case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822014ECh case   35:*/		return 0x822014F0;
		  /* 822014F0h */ case   36:  		/* addi R3, R1, 912 */
		/* 822014F0h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x390);
		/* 822014F0h case   36:*/		return 0x822014F4;
		  /* 822014F4h */ case   37:  		/* subf R29, R30, R29 */
		/* 822014F4h case   37:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 822014F4h case   37:*/		return 0x822014F8;
		  /* 822014F8h */ case   38:  		/* bl -79616 */
		/* 822014F8h case   38:*/		regs.LR = 0x822014FC; return 0x821EDDF8;
		/* 822014F8h case   38:*/		return 0x822014FC;
		  /* 822014FCh */ case   39:  		/* b -180 */
		/* 822014FCh case   39:*/		return 0x82201448;
		/* 822014FCh case   39:*/		return 0x82201500;
		  /* 82201500h */ case   40:  		/* cmpwi CR6, R10, 5 */
		/* 82201500h case   40:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000005);
		/* 82201500h case   40:*/		return 0x82201504;
		  /* 82201504h */ case   41:  		/* bc 12, CR6_EQ, -220 */
		/* 82201504h case   41:*/		if ( regs.CR[6].eq ) { return 0x82201428;  }
		/* 82201504h case   41:*/		return 0x82201508;
		  /* 82201508h */ case   42:  		/* mr R5, R29 */
		/* 82201508h case   42:*/		regs.R5 = regs.R29;
		/* 82201508h case   42:*/		return 0x8220150C;
		  /* 8220150Ch */ case   43:  		/* lwz R4, <#[R1 + 3500]> */
		/* 8220150Ch case   43:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220150Ch case   43:*/		return 0x82201510;
		  /* 82201510h */ case   44:  		/* addi R3, R1, 2680 */
		/* 82201510h case   44:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA78);
		/* 82201510h case   44:*/		return 0x82201514;
		  /* 82201514h */ case   45:  		/* bl -45572 */
		/* 82201514h case   45:*/		regs.LR = 0x82201518; return 0x821F6310;
		/* 82201514h case   45:*/		return 0x82201518;
		  /* 82201518h */ case   46:  		/* cmplwi CR6, R29, 0 */
		/* 82201518h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201518h case   46:*/		return 0x8220151C;
		  /* 8220151Ch */ case   47:  		/* bc 12, CR6_EQ, -20988 */
		/* 8220151Ch case   47:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 8220151Ch case   47:*/		return 0x82201520;
		  /* 82201520h */ case   48:  		/* addi R3, R1, 2680 */
		/* 82201520h case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA78);
		/* 82201520h case   48:*/		return 0x82201524;
		  /* 82201524h */ case   49:  		/* bl -263876 */
		/* 82201524h case   49:*/		regs.LR = 0x82201528; return 0x821C0E60;
		/* 82201524h case   49:*/		return 0x82201528;
		  /* 82201528h */ case   50:  		/* mr R30, R3 */
		/* 82201528h case   50:*/		regs.R30 = regs.R3;
		/* 82201528h case   50:*/		return 0x8220152C;
		  /* 8220152Ch */ case   51:  		/* mr R3, R31 */
		/* 8220152Ch case   51:*/		regs.R3 = regs.R31;
		/* 8220152Ch case   51:*/		return 0x82201530;
		  /* 82201530h */ case   52:  		/* mr R4, R30 */
		/* 82201530h case   52:*/		regs.R4 = regs.R30;
		/* 82201530h case   52:*/		return 0x82201534;
		  /* 82201534h */ case   53:  		/* bl -61876 */
		/* 82201534h case   53:*/		regs.LR = 0x82201538; return 0x821F2380;
		/* 82201534h case   53:*/		return 0x82201538;
		  /* 82201538h */ case   54:  		/* mr R4, R3 */
		/* 82201538h case   54:*/		regs.R4 = regs.R3;
		/* 82201538h case   54:*/		return 0x8220153C;
		  /* 8220153Ch */ case   55:  		/* mr R3, R31 */
		/* 8220153Ch case   55:*/		regs.R3 = regs.R31;
		/* 8220153Ch case   55:*/		return 0x82201540;
		  /* 82201540h */ case   56:  		/* bl -79824 */
		/* 82201540h case   56:*/		regs.LR = 0x82201544; return 0x821EDD70;
		/* 82201540h case   56:*/		return 0x82201544;
		  /* 82201544h */ case   57:  		/* mr R4, R3 */
		/* 82201544h case   57:*/		regs.R4 = regs.R3;
		/* 82201544h case   57:*/		return 0x82201548;
		  /* 82201548h */ case   58:  		/* mr R3, R31 */
		/* 82201548h case   58:*/		regs.R3 = regs.R31;
		/* 82201548h case   58:*/		return 0x8220154C;
		  /* 8220154Ch */ case   59:  		/* bl -71444 */
		/* 8220154Ch case   59:*/		regs.LR = 0x82201550; return 0x821EFE38;
		/* 8220154Ch case   59:*/		return 0x82201550;
		  /* 82201550h */ case   60:  		/* mr R11, R3 */
		/* 82201550h case   60:*/		regs.R11 = regs.R3;
		/* 82201550h case   60:*/		return 0x82201554;
		  /* 82201554h */ case   61:  		/* mr R3, R31 */
		/* 82201554h case   61:*/		regs.R3 = regs.R31;
		/* 82201554h case   61:*/		return 0x82201558;
		  /* 82201558h */ case   62:  		/* mr R4, R11 */
		/* 82201558h case   62:*/		regs.R4 = regs.R11;
		/* 82201558h case   62:*/		return 0x8220155C;
		  /* 8220155Ch */ case   63:  		/* lwz R10, <#[R11 + 20]> */
		/* 8220155Ch case   63:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8220155Ch case   63:*/		return 0x82201560;
		  /* 82201560h */ case   64:  		/* ori R10, R10, 1 */
		/* 82201560h case   64:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82201560h case   64:*/		return 0x82201564;
		  /* 82201564h */ case   65:  		/* stw R10, <#[R11 + 20]> */
		/* 82201564h case   65:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82201564h case   65:*/		return 0x82201568;
		  /* 82201568h */ case   66:  		/* bl -562536 */
		/* 82201568h case   66:*/		regs.LR = 0x8220156C; return 0x82178000;
		/* 82201568h case   66:*/		return 0x8220156C;
		  /* 8220156Ch */ case   67:  		/* mr R4, R3 */
		/* 8220156Ch case   67:*/		regs.R4 = regs.R3;
		/* 8220156Ch case   67:*/		return 0x82201570;
		  /* 82201570h */ case   68:  		/* mr R3, R31 */
		/* 82201570h case   68:*/		regs.R3 = regs.R31;
		/* 82201570h case   68:*/		return 0x82201574;
		  /* 82201574h */ case   69:  		/* bl -79876 */
		/* 82201574h case   69:*/		regs.LR = 0x82201578; return 0x821EDD70;
		/* 82201574h case   69:*/		return 0x82201578;
		  /* 82201578h */ case   70:  		/* mr R11, R3 */
		/* 82201578h case   70:*/		regs.R11 = regs.R3;
		/* 82201578h case   70:*/		return 0x8220157C;
		  /* 8220157Ch */ case   71:  		/* li R7, 228 */
		/* 8220157Ch case   71:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 8220157Ch case   71:*/		return 0x82201580;
		  /* 82201580h */ case   72:  		/* li R6, 2 */
		/* 82201580h case   72:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82201580h case   72:*/		return 0x82201584;
		  /* 82201584h */ case   73:  		/* mr R3, R31 */
		/* 82201584h case   73:*/		regs.R3 = regs.R31;
		/* 82201584h case   73:*/		return 0x82201588;
		  /* 82201588h */ case   74:  		/* mr R4, R11 */
		/* 82201588h case   74:*/		regs.R4 = regs.R11;
		/* 82201588h case   74:*/		return 0x8220158C;
		  /* 8220158Ch */ case   75:  		/* lwz R10, <#[R11 + 8]> */
		/* 8220158Ch case   75:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8220158Ch case   75:*/		return 0x82201590;
		  /* 82201590h */ case   76:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82201590h case   76:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82201590h case   76:*/		return 0x82201594;
		  /* 82201594h */ case   77:  		/* bl 134316 */
		/* 82201594h case   77:*/		regs.LR = 0x82201598; return 0x82222240;
		/* 82201594h case   77:*/		return 0x82201598;
		  /* 82201598h */ case   78:  		/* mr R28, R3 */
		/* 82201598h case   78:*/		regs.R28 = regs.R3;
		/* 82201598h case   78:*/		return 0x8220159C;
		  /* 8220159Ch */ case   79:  		/* li R5, 1 */
		/* 8220159Ch case   79:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220159Ch case   79:*/		return 0x822015A0;
		  /* 822015A0h */ case   80:  		/* fmr FR4, FR31 */
		/* 822015A0h case   80:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 822015A0h case   80:*/		return 0x822015A4;
		  /* 822015A4h */ case   81:  		/* mr R4, R31 */
		/* 822015A4h case   81:*/		regs.R4 = regs.R31;
		/* 822015A4h case   81:*/		return 0x822015A8;
		  /* 822015A8h */ case   82:  		/* fmr FR3, FR31 */
		/* 822015A8h case   82:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 822015A8h case   82:*/		return 0x822015AC;
		  /* 822015ACh */ case   83:  		/* addi R3, R1, 2920 */
		/* 822015ACh case   83:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB68);
		/* 822015ACh case   83:*/		return 0x822015B0;
		  /* 822015B0h */ case   84:  		/* fmr FR2, FR31 */
		/* 822015B0h case   84:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 822015B0h case   84:*/		return 0x822015B4;
		  /* 822015B4h */ case   85:  		/* fmr FR1, FR31 */
		/* 822015B4h case   85:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 822015B4h case   85:*/		return 0x822015B8;
		  /* 822015B8h */ case   86:  		/* bl 153752 */
		/* 822015B8h case   86:*/		regs.LR = 0x822015BC; return 0x82226E50;
		/* 822015B8h case   86:*/		return 0x822015BC;
		  /* 822015BCh */ case   87:  		/* mr R11, R3 */
		/* 822015BCh case   87:*/		regs.R11 = regs.R3;
		/* 822015BCh case   87:*/		return 0x822015C0;
		  /* 822015C0h */ case   88:  		/* mr R4, R28 */
		/* 822015C0h case   88:*/		regs.R4 = regs.R28;
		/* 822015C0h case   88:*/		return 0x822015C4;
		  /* 822015C4h */ case   89:  		/* mr R3, R31 */
		/* 822015C4h case   89:*/		regs.R3 = regs.R31;
		/* 822015C4h case   89:*/		return 0x822015C8;
		  /* 822015C8h */ case   90:  		/* ld R5, <#[R11]> */
		/* 822015C8h case   90:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822015C8h case   90:*/		return 0x822015CC;
		  /* 822015CCh */ case   91:  		/* bl -56644 */
		/* 822015CCh case   91:*/		regs.LR = 0x822015D0; return 0x821F3888;
		/* 822015CCh case   91:*/		return 0x822015D0;
		  /* 822015D0h */ case   92:  		/* li R11, 1 */
		/* 822015D0h case   92:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822015D0h case   92:*/		return 0x822015D4;
		  /* 822015D4h */ case   93:  		/* stw R3, <#[R30]> */
		/* 822015D4h case   93:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 822015D4h case   93:*/		return 0x822015D8;
		  /* 822015D8h */ case   94:  		/* lwz R10, <#[R30 + 4]> */
		/* 822015D8h case   94:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822015D8h case   94:*/		return 0x822015DC;
		  /* 822015DCh */ case   95:  		/* addi R29, R29, -1 */
		/* 822015DCh case   95:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 822015DCh case   95:*/		return 0x822015E0;
		  /* 822015E0h */ case   96:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 822015E0h case   96:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 822015E0h case   96:*/		return 0x822015E4;
		  /* 822015E4h */ case   97:  		/* stw R10, <#[R30 + 4]> */
		/* 822015E4h case   97:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822015E4h case   97:*/		return 0x822015E8;
		  /* 822015E8h */ case   98:  		/* b -208 */
		/* 822015E8h case   98:*/		return 0x82201518;
		/* 822015E8h case   98:*/		return 0x822015EC;
		  /* 822015ECh */ case   99:  		/* cmpwi CR6, R10, 5 */
		/* 822015ECh case   99:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000005);
		/* 822015ECh case   99:*/		return 0x822015F0;
		  /* 822015F0h */ case  100:  		/* bc 12, CR6_EQ, -456 */
		/* 822015F0h case  100:*/		if ( regs.CR[6].eq ) { return 0x82201428;  }
		/* 822015F0h case  100:*/		return 0x822015F4;
		  /* 822015F4h */ case  101:  		/* li R5, 4 */
		/* 822015F4h case  101:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822015F4h case  101:*/		return 0x822015F8;
		  /* 822015F8h */ case  102:  		/* fmr FR4, FR31 */
		/* 822015F8h case  102:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 822015F8h case  102:*/		return 0x822015FC;
		  /* 822015FCh */ case  103:  		/* mr R4, R31 */
		/* 822015FCh case  103:*/		regs.R4 = regs.R31;
		/* 822015FCh case  103:*/		return 0x82201600;
		  /* 82201600h */ case  104:  		/* fmr FR3, FR31 */
		/* 82201600h case  104:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82201600h case  104:*/		return 0x82201604;
		  /* 82201604h */ case  105:  		/* addi R3, R1, 576 */
		/* 82201604h case  105:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x240);
		/* 82201604h case  105:*/		return 0x82201608;
		  /* 82201608h */ case  106:  		/* fmr FR2, FR31 */
		/* 82201608h case  106:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82201608h case  106:*/		return 0x8220160C;
		  /* 8220160Ch */ case  107:  		/* fmr FR1, FR31 */
		/* 8220160Ch case  107:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8220160Ch case  107:*/		return 0x82201610;
		  /* 82201610h */ case  108:  		/* bl 153664 */
		/* 82201610h case  108:*/		regs.LR = 0x82201614; return 0x82226E50;
		/* 82201610h case  108:*/		return 0x82201614;
		  /* 82201614h */ case  109:  		/* lwz R11, <#[R1 + 580]> */
		/* 82201614h case  109:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000244) );
		/* 82201614h case  109:*/		return 0x82201618;
		  /* 82201618h */ case  110:  		/* mr R5, R29 */
		/* 82201618h case  110:*/		regs.R5 = regs.R29;
		/* 82201618h case  110:*/		return 0x8220161C;
		  /* 8220161Ch */ case  111:  		/* lwz R4, <#[R1 + 3500]> */
		/* 8220161Ch case  111:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220161Ch case  111:*/		return 0x82201620;
		  /* 82201620h */ case  112:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 82201620h case  112:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 82201620h case  112:*/		return 0x82201624;
		  /* 82201624h */ case  113:  		/* addi R3, R1, 688 */
		/* 82201624h case  113:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2B0);
		/* 82201624h case  113:*/		return 0x82201628;
		  /* 82201628h */ case  114:  		/* oris R11, R11, 2 */
		/* 82201628h case  114:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82201628h case  114:*/		return 0x8220162C;
		  /* 8220162Ch */ case  115:  		/* stw R11, <#[R1 + 580]> */
		/* 8220162Ch case  115:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000244) );
		/* 8220162Ch case  115:*/		return 0x82201630;
		  /* 82201630h */ case  116:  		/* bl -45856 */
		/* 82201630h case  116:*/		regs.LR = 0x82201634; return 0x821F6310;
		/* 82201630h case  116:*/		return 0x82201634;
		  /* 82201634h */ case  117:  		/* cmplwi CR6, R29, 0 */
		/* 82201634h case  117:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201634h case  117:*/		return 0x82201638;
		  /* 82201638h */ case  118:  		/* bc 12, CR6_EQ, -21272 */
		/* 82201638h case  118:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82201638h case  118:*/		return 0x8220163C;
		  /* 8220163Ch */ case  119:  		/* cmplwi CR6, R29, 4 */
		/* 8220163Ch case  119:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 8220163Ch case  119:*/		return 0x82201640;
		  /* 82201640h */ case  120:  		/* mr R30, R29 */
		/* 82201640h case  120:*/		regs.R30 = regs.R29;
		/* 82201640h case  120:*/		return 0x82201644;
		  /* 82201644h */ case  121:  		/* bc 12, CR6_LT, 8 */
		/* 82201644h case  121:*/		if ( regs.CR[6].lt ) { return 0x8220164C;  }
		/* 82201644h case  121:*/		return 0x82201648;
		  /* 82201648h */ case  122:  		/* li R30, 4 */
		/* 82201648h case  122:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82201648h case  122:*/		return 0x8220164C;
	}
	return 0x8220164C;
} // Block from 82201460h-8220164Ch (123 instructions)

//////////////////////////////////////////////////////
// Block at 8220164Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220164C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220164C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220164C);
		  /* 8220164Ch */ case    0:  		/* li R6, 228 */
		/* 8220164Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 8220164Ch case    0:*/		return 0x82201650;
		  /* 82201650h */ case    1:  		/* mr R5, R30 */
		/* 82201650h case    1:*/		regs.R5 = regs.R30;
		/* 82201650h case    1:*/		return 0x82201654;
		  /* 82201654h */ case    2:  		/* addi R4, R1, 688 */
		/* 82201654h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x2B0);
		/* 82201654h case    2:*/		return 0x82201658;
		  /* 82201658h */ case    3:  		/* mr R3, R31 */
		/* 82201658h case    3:*/		regs.R3 = regs.R31;
		/* 82201658h case    3:*/		return 0x8220165C;
		  /* 8220165Ch */ case    4:  		/* bl -61204 */
		/* 8220165Ch case    4:*/		regs.LR = 0x82201660; return 0x821F2748;
		/* 8220165Ch case    4:*/		return 0x82201660;
		  /* 82201660h */ case    5:  		/* mr R28, R3 */
		/* 82201660h case    5:*/		regs.R28 = regs.R3;
		/* 82201660h case    5:*/		return 0x82201664;
		  /* 82201664h */ case    6:  		/* mr R3, R31 */
		/* 82201664h case    6:*/		regs.R3 = regs.R31;
		/* 82201664h case    6:*/		return 0x82201668;
		  /* 82201668h */ case    7:  		/* mr R4, R28 */
		/* 82201668h case    7:*/		regs.R4 = regs.R28;
		/* 82201668h case    7:*/		return 0x8220166C;
		  /* 8220166Ch */ case    8:  		/* bl -80124 */
		/* 8220166Ch case    8:*/		regs.LR = 0x82201670; return 0x821EDD70;
		/* 8220166Ch case    8:*/		return 0x82201670;
		  /* 82201670h */ case    9:  		/* mr R4, R3 */
		/* 82201670h case    9:*/		regs.R4 = regs.R3;
		/* 82201670h case    9:*/		return 0x82201674;
		  /* 82201674h */ case   10:  		/* mr R3, R31 */
		/* 82201674h case   10:*/		regs.R3 = regs.R31;
		/* 82201674h case   10:*/		return 0x82201678;
		  /* 82201678h */ case   11:  		/* mr R5, R28 */
		/* 82201678h case   11:*/		regs.R5 = regs.R28;
		/* 82201678h case   11:*/		return 0x8220167C;
		  /* 8220167Ch */ case   12:  		/* bl -72668 */
		/* 8220167Ch case   12:*/		regs.LR = 0x82201680; return 0x821EFAA0;
		/* 8220167Ch case   12:*/		return 0x82201680;
		  /* 82201680h */ case   13:  		/* mr R28, R3 */
		/* 82201680h case   13:*/		regs.R28 = regs.R3;
		/* 82201680h case   13:*/		return 0x82201684;
		  /* 82201684h */ case   14:  		/* addi R4, R1, 576 */
		/* 82201684h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x240);
		/* 82201684h case   14:*/		return 0x82201688;
		  /* 82201688h */ case   15:  		/* mr R3, R31 */
		/* 82201688h case   15:*/		regs.R3 = regs.R31;
		/* 82201688h case   15:*/		return 0x8220168C;
		  /* 8220168Ch */ case   16:  		/* bl -62220 */
		/* 8220168Ch case   16:*/		regs.LR = 0x82201690; return 0x821F2380;
		/* 8220168Ch case   16:*/		return 0x82201690;
		  /* 82201690h */ case   17:  		/* mr R27, R3 */
		/* 82201690h case   17:*/		regs.R27 = regs.R3;
		/* 82201690h case   17:*/		return 0x82201694;
		  /* 82201694h */ case   18:  		/* mr R4, R28 */
		/* 82201694h case   18:*/		regs.R4 = regs.R28;
		/* 82201694h case   18:*/		return 0x82201698;
		  /* 82201698h */ case   19:  		/* mr R3, R31 */
		/* 82201698h case   19:*/		regs.R3 = regs.R31;
		/* 82201698h case   19:*/		return 0x8220169C;
		  /* 8220169Ch */ case   20:  		/* lwz R11, <#[R27]> */
		/* 8220169Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8220169Ch case   20:*/		return 0x822016A0;
		  /* 822016A0h */ case   21:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 822016A0h case   21:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 822016A0h case   21:*/		return 0x822016A4;
		  /* 822016A4h */ case   22:  		/* stw R11, <#[R27]> */
		/* 822016A4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 822016A4h case   22:*/		return 0x822016A8;
		  /* 822016A8h */ case   23:  		/* bl -562856 */
		/* 822016A8h case   23:*/		regs.LR = 0x822016AC; return 0x82178000;
		/* 822016A8h case   23:*/		return 0x822016AC;
		  /* 822016ACh */ case   24:  		/* mr R4, R3 */
		/* 822016ACh case   24:*/		regs.R4 = regs.R3;
		/* 822016ACh case   24:*/		return 0x822016B0;
		  /* 822016B0h */ case   25:  		/* mr R3, R31 */
		/* 822016B0h case   25:*/		regs.R3 = regs.R31;
		/* 822016B0h case   25:*/		return 0x822016B4;
		  /* 822016B4h */ case   26:  		/* bl -80196 */
		/* 822016B4h case   26:*/		regs.LR = 0x822016B8; return 0x821EDD70;
		/* 822016B4h case   26:*/		return 0x822016B8;
		  /* 822016B8h */ case   27:  		/* mr R4, R3 */
		/* 822016B8h case   27:*/		regs.R4 = regs.R3;
		/* 822016B8h case   27:*/		return 0x822016BC;
		  /* 822016BCh */ case   28:  		/* mr R5, R27 */
		/* 822016BCh case   28:*/		regs.R5 = regs.R27;
		/* 822016BCh case   28:*/		return 0x822016C0;
		  /* 822016C0h */ case   29:  		/* mr R3, R31 */
		/* 822016C0h case   29:*/		regs.R3 = regs.R31;
		/* 822016C0h case   29:*/		return 0x822016C4;
		  /* 822016C4h */ case   30:  		/* bl -72740 */
		/* 822016C4h case   30:*/		regs.LR = 0x822016C8; return 0x821EFAA0;
		/* 822016C4h case   30:*/		return 0x822016C8;
		  /* 822016C8h */ case   31:  		/* mr R5, R3 */
		/* 822016C8h case   31:*/		regs.R5 = regs.R3;
		/* 822016C8h case   31:*/		return 0x822016CC;
		  /* 822016CCh */ case   32:  		/* mr R4, R30 */
		/* 822016CCh case   32:*/		regs.R4 = regs.R30;
		/* 822016CCh case   32:*/		return 0x822016D0;
		  /* 822016D0h */ case   33:  		/* addi R3, R1, 688 */
		/* 822016D0h case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2B0);
		/* 822016D0h case   33:*/		return 0x822016D4;
		  /* 822016D4h */ case   34:  		/* bl -63420 */
		/* 822016D4h case   34:*/		regs.LR = 0x822016D8; return 0x821F1F18;
		/* 822016D4h case   34:*/		return 0x822016D8;
		  /* 822016D8h */ case   35:  		/* li R4, 0 */
		/* 822016D8h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822016D8h case   35:*/		return 0x822016DC;
		  /* 822016DCh */ case   36:  		/* addi R3, R1, 688 */
		/* 822016DCh case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2B0);
		/* 822016DCh case   36:*/		return 0x822016E0;
		  /* 822016E0h */ case   37:  		/* subf R29, R30, R29 */
		/* 822016E0h case   37:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 822016E0h case   37:*/		return 0x822016E4;
		  /* 822016E4h */ case   38:  		/* bl -80108 */
		/* 822016E4h case   38:*/		regs.LR = 0x822016E8; return 0x821EDDF8;
		/* 822016E4h case   38:*/		return 0x822016E8;
		  /* 822016E8h */ case   39:  		/* b -180 */
		/* 822016E8h case   39:*/		return 0x82201634;
		/* 822016E8h case   39:*/		return 0x822016EC;
		  /* 822016ECh */ case   40:  		/* li R28, 48 */
		/* 822016ECh case   40:*/		cpu::op::li<0>(regs,&regs.R28,0x30);
		/* 822016ECh case   40:*/		return 0x822016F0;
		  /* 822016F0h */ case   41:  		/* b 24 */
		/* 822016F0h case   41:*/		return 0x82201708;
		/* 822016F0h case   41:*/		return 0x822016F4;
		  /* 822016F4h */ case   42:  		/* li R28, 46 */
		/* 822016F4h case   42:*/		cpu::op::li<0>(regs,&regs.R28,0x2E);
		/* 822016F4h case   42:*/		return 0x822016F8;
		  /* 822016F8h */ case   43:  		/* b 16 */
		/* 822016F8h case   43:*/		return 0x82201708;
		/* 822016F8h case   43:*/		return 0x822016FC;
		  /* 822016FCh */ case   44:  		/* li R28, 54 */
		/* 822016FCh case   44:*/		cpu::op::li<0>(regs,&regs.R28,0x36);
		/* 822016FCh case   44:*/		return 0x82201700;
		  /* 82201700h */ case   45:  		/* b 8 */
		/* 82201700h case   45:*/		return 0x82201708;
		/* 82201700h case   45:*/		return 0x82201704;
		  /* 82201704h */ case   46:  		/* li R28, 72 */
		/* 82201704h case   46:*/		cpu::op::li<0>(regs,&regs.R28,0x48);
		/* 82201704h case   46:*/		return 0x82201708;
	}
	return 0x82201708;
} // Block from 8220164Ch-82201708h (47 instructions)

//////////////////////////////////////////////////////
// Block at 82201708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201708);
		  /* 82201708h */ case    0:  		/* mr R5, R29 */
		/* 82201708h case    0:*/		regs.R5 = regs.R29;
		/* 82201708h case    0:*/		return 0x8220170C;
		  /* 8220170Ch */ case    1:  		/* lwz R4, <#[R1 + 3500]> */
		/* 8220170Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220170Ch case    1:*/		return 0x82201710;
		  /* 82201710h */ case    2:  		/* addi R3, R1, 2200 */
		/* 82201710h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x898);
		/* 82201710h case    2:*/		return 0x82201714;
		  /* 82201714h */ case    3:  		/* bl -46084 */
		/* 82201714h case    3:*/		regs.LR = 0x82201718; return 0x821F6310;
		/* 82201714h case    3:*/		return 0x82201718;
		  /* 82201718h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82201718h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201718h case    4:*/		return 0x8220171C;
		  /* 8220171Ch */ case    5:  		/* bc 12, CR6_EQ, -21500 */
		/* 8220171Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 8220171Ch case    5:*/		return 0x82201720;
		  /* 82201720h */ case    6:  		/* addi R3, R1, 2200 */
		/* 82201720h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x898);
		/* 82201720h case    6:*/		return 0x82201724;
		  /* 82201724h */ case    7:  		/* bl -264388 */
		/* 82201724h case    7:*/		regs.LR = 0x82201728; return 0x821C0E60;
		/* 82201724h case    7:*/		return 0x82201728;
		  /* 82201728h */ case    8:  		/* lwz R4, <#[R31 + 564]> */
		/* 82201728h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82201728h case    8:*/		return 0x8220172C;
		  /* 8220172Ch */ case    9:  		/* mr R30, R3 */
		/* 8220172Ch case    9:*/		regs.R30 = regs.R3;
		/* 8220172Ch case    9:*/		return 0x82201730;
		  /* 82201730h */ case   10:  		/* addi R5, R4, 24 */
		/* 82201730h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 82201730h case   10:*/		return 0x82201734;
		  /* 82201734h */ case   11:  		/* li R8, 1 */
		/* 82201734h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82201734h case   11:*/		return 0x82201738;
		  /* 82201738h */ case   12:  		/* li R7, 1 */
		/* 82201738h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82201738h case   12:*/		return 0x8220173C;
		  /* 8220173Ch */ case   13:  		/* mr R6, R28 */
		/* 8220173Ch case   13:*/		regs.R6 = regs.R28;
		/* 8220173Ch case   13:*/		return 0x82201740;
		  /* 82201740h */ case   14:  		/* mr R3, R31 */
		/* 82201740h case   14:*/		regs.R3 = regs.R31;
		/* 82201740h case   14:*/		return 0x82201744;
		  /* 82201744h */ case   15:  		/* bl 143956 */
		/* 82201744h case   15:*/		regs.LR = 0x82201748; return 0x82224998;
		/* 82201744h case   15:*/		return 0x82201748;
		  /* 82201748h */ case   16:  		/* mr R27, R3 */
		/* 82201748h case   16:*/		regs.R27 = regs.R3;
		/* 82201748h case   16:*/		return 0x8220174C;
		  /* 8220174Ch */ case   17:  		/* mr R4, R30 */
		/* 8220174Ch case   17:*/		regs.R4 = regs.R30;
		/* 8220174Ch case   17:*/		return 0x82201750;
		  /* 82201750h */ case   18:  		/* mr R3, R31 */
		/* 82201750h case   18:*/		regs.R3 = regs.R31;
		/* 82201750h case   18:*/		return 0x82201754;
		  /* 82201754h */ case   19:  		/* bl -62420 */
		/* 82201754h case   19:*/		regs.LR = 0x82201758; return 0x821F2380;
		/* 82201754h case   19:*/		return 0x82201758;
		  /* 82201758h */ case   20:  		/* mr R5, R3 */
		/* 82201758h case   20:*/		regs.R5 = regs.R3;
		/* 82201758h case   20:*/		return 0x8220175C;
		  /* 8220175Ch */ case   21:  		/* li R4, 0 */
		/* 8220175Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220175Ch case   21:*/		return 0x82201760;
		  /* 82201760h */ case   22:  		/* mr R3, R27 */
		/* 82201760h case   22:*/		regs.R3 = regs.R27;
		/* 82201760h case   22:*/		return 0x82201764;
		  /* 82201764h */ case   23:  		/* bl -594100 */
		/* 82201764h case   23:*/		regs.LR = 0x82201768; return 0x821706B0;
		/* 82201764h case   23:*/		return 0x82201768;
		  /* 82201768h */ case   24:  		/* li R11, 1 */
		/* 82201768h case   24:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82201768h case   24:*/		return 0x8220176C;
		  /* 8220176Ch */ case   25:  		/* stw R27, <#[R30]> */
		/* 8220176Ch case   25:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 8220176Ch case   25:*/		return 0x82201770;
		  /* 82201770h */ case   26:  		/* addi R29, R29, -1 */
		/* 82201770h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82201770h case   26:*/		return 0x82201774;
		  /* 82201774h */ case   27:  		/* lwz R10, <#[R30 + 4]> */
		/* 82201774h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201774h case   27:*/		return 0x82201778;
		  /* 82201778h */ case   28:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 82201778h case   28:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 82201778h case   28:*/		return 0x8220177C;
		  /* 8220177Ch */ case   29:  		/* stw R10, <#[R30 + 4]> */
		/* 8220177Ch case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8220177Ch case   29:*/		return 0x82201780;
		  /* 82201780h */ case   30:  		/* b -104 */
		/* 82201780h case   30:*/		return 0x82201718;
		/* 82201780h case   30:*/		return 0x82201784;
		  /* 82201784h */ case   31:  		/* fmr FR1, FR27 */
		/* 82201784h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 82201784h case   31:*/		return 0x82201788;
		  /* 82201788h */ case   32:  		/* bl -1481136 */
		/* 82201788h case   32:*/		regs.LR = 0x8220178C; return 0x82097DD8;
		/* 82201788h case   32:*/		return 0x8220178C;
		  /* 8220178Ch */ case   33:  		/* frsp FR0, FR1 */
		/* 8220178Ch case   33:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 8220178Ch case   33:*/		return 0x82201790;
		  /* 82201790h */ case   34:  		/* li R5, 1 */
		/* 82201790h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82201790h case   34:*/		return 0x82201794;
		  /* 82201794h */ case   35:  		/* mr R4, R31 */
		/* 82201794h case   35:*/		regs.R4 = regs.R31;
		/* 82201794h case   35:*/		return 0x82201798;
		  /* 82201798h */ case   36:  		/* fmr FR2, FR31 */
		/* 82201798h case   36:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82201798h case   36:*/		return 0x8220179C;
		  /* 8220179Ch */ case   37:  		/* addi R3, R1, 1664 */
		/* 8220179Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x680);
		/* 8220179Ch case   37:*/		return 0x822017A0;
		  /* 822017A0h */ case   38:  		/* fmr FR3, FR31 */
		/* 822017A0h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 822017A0h case   38:*/		return 0x822017A4;
		  /* 822017A4h */ case   39:  		/* fmr FR4, FR31 */
		/* 822017A4h case   39:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 822017A4h case   39:*/		return 0x822017A8;
		  /* 822017A8h */ case   40:  		/* fdivs FR1, FR30, FR0 */
		/* 822017A8h case   40:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR30,regs.FR0);
		/* 822017A8h case   40:*/		return 0x822017AC;
		  /* 822017ACh */ case   41:  		/* bl 153252 */
		/* 822017ACh case   41:*/		regs.LR = 0x822017B0; return 0x82226E50;
		/* 822017ACh case   41:*/		return 0x822017B0;
		  /* 822017B0h */ case   42:  		/* mr R5, R29 */
		/* 822017B0h case   42:*/		regs.R5 = regs.R29;
		/* 822017B0h case   42:*/		return 0x822017B4;
		  /* 822017B4h */ case   43:  		/* lwz R4, <#[R1 + 3500]> */
		/* 822017B4h case   43:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822017B4h case   43:*/		return 0x822017B8;
		  /* 822017B8h */ case   44:  		/* addi R3, R1, 1704 */
		/* 822017B8h case   44:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6A8);
		/* 822017B8h case   44:*/		return 0x822017BC;
		  /* 822017BCh */ case   45:  		/* bl -46252 */
		/* 822017BCh case   45:*/		regs.LR = 0x822017C0; return 0x821F6310;
		/* 822017BCh case   45:*/		return 0x822017C0;
		  /* 822017C0h */ case   46:  		/* cmplwi CR6, R29, 0 */
		/* 822017C0h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822017C0h case   46:*/		return 0x822017C4;
		  /* 822017C4h */ case   47:  		/* bc 12, CR6_EQ, -21668 */
		/* 822017C4h case   47:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822017C4h case   47:*/		return 0x822017C8;
		  /* 822017C8h */ case   48:  		/* addi R3, R1, 1704 */
		/* 822017C8h case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6A8);
		/* 822017C8h case   48:*/		return 0x822017CC;
		  /* 822017CCh */ case   49:  		/* bl -264556 */
		/* 822017CCh case   49:*/		regs.LR = 0x822017D0; return 0x821C0E60;
		/* 822017CCh case   49:*/		return 0x822017D0;
		  /* 822017D0h */ case   50:  		/* mr R30, R3 */
		/* 822017D0h case   50:*/		regs.R30 = regs.R3;
		/* 822017D0h case   50:*/		return 0x822017D4;
		  /* 822017D4h */ case   51:  		/* mr R5, R3 */
		/* 822017D4h case   51:*/		regs.R5 = regs.R3;
		/* 822017D4h case   51:*/		return 0x822017D8;
		  /* 822017D8h */ case   52:  		/* addi R4, R1, 1664 */
		/* 822017D8h case   52:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x680);
		/* 822017D8h case   52:*/		return 0x822017DC;
		  /* 822017DCh */ case   53:  		/* mr R3, R31 */
		/* 822017DCh case   53:*/		regs.R3 = regs.R31;
		/* 822017DCh case   53:*/		return 0x822017E0;
		  /* 822017E0h */ case   54:  		/* bl -55008 */
		/* 822017E0h case   54:*/		regs.LR = 0x822017E4; return 0x821F4100;
		/* 822017E0h case   54:*/		return 0x822017E4;
		  /* 822017E4h */ case   55:  		/* mr R4, R3 */
		/* 822017E4h case   55:*/		regs.R4 = regs.R3;
		/* 822017E4h case   55:*/		return 0x822017E8;
		  /* 822017E8h */ case   56:  		/* mr R3, R31 */
		/* 822017E8h case   56:*/		regs.R3 = regs.R31;
		/* 822017E8h case   56:*/		return 0x822017EC;
		  /* 822017ECh */ case   57:  		/* bl -72420 */
		/* 822017ECh case   57:*/		regs.LR = 0x822017F0; return 0x821EFD08;
		/* 822017ECh case   57:*/		return 0x822017F0;
		  /* 822017F0h */ case   58:  		/* stw R3, <#[R30]> */
		/* 822017F0h case   58:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 822017F0h case   58:*/		return 0x822017F4;
		  /* 822017F4h */ case   59:  		/* li R11, 1 */
		/* 822017F4h case   59:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822017F4h case   59:*/		return 0x822017F8;
		  /* 822017F8h */ case   60:  		/* addi R29, R29, -1 */
		/* 822017F8h case   60:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 822017F8h case   60:*/		return 0x822017FC;
		  /* 822017FCh */ case   61:  		/* lwz R10, <#[R30 + 4]> */
		/* 822017FCh case   61:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822017FCh case   61:*/		return 0x82201800;
		  /* 82201800h */ case   62:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 82201800h case   62:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 82201800h case   62:*/		return 0x82201804;
		  /* 82201804h */ case   63:  		/* stw R10, <#[R30 + 4]> */
		/* 82201804h case   63:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201804h case   63:*/		return 0x82201808;
		  /* 82201808h */ case   64:  		/* b -72 */
		/* 82201808h case   64:*/		return 0x822017C0;
		/* 82201808h case   64:*/		return 0x8220180C;
		  /* 8220180Ch */ case   65:  		/* lwz R27, <#[R1 + 3500]> */
		/* 8220180Ch case   65:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220180Ch case   65:*/		return 0x82201810;
		  /* 82201810h */ case   66:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 82201810h case   66:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 82201810h case   66:*/		return 0x82201814;
		  /* 82201814h */ case   67:  		/* addi R3, R1, 1736 */
		/* 82201814h case   67:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6C8);
		/* 82201814h case   67:*/		return 0x82201818;
		  /* 82201818h */ case   68:  		/* mr R4, R27 */
		/* 82201818h case   68:*/		regs.R4 = regs.R27;
		/* 82201818h case   68:*/		return 0x8220181C;
		  /* 8220181Ch */ case   69:  		/* bl -46348 */
		/* 8220181Ch case   69:*/		regs.LR = 0x82201820; return 0x821F6310;
		/* 8220181Ch case   69:*/		return 0x82201820;
		  /* 82201820h */ case   70:  		/* mr R5, R29 */
		/* 82201820h case   70:*/		regs.R5 = regs.R29;
		/* 82201820h case   70:*/		return 0x82201824;
		  /* 82201824h */ case   71:  		/* mr R4, R27 */
		/* 82201824h case   71:*/		regs.R4 = regs.R27;
		/* 82201824h case   71:*/		return 0x82201828;
		  /* 82201828h */ case   72:  		/* addi R3, R1, 1768 */
		/* 82201828h case   72:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6E8);
		/* 82201828h case   72:*/		return 0x8220182C;
		  /* 8220182Ch */ case   73:  		/* bl -46364 */
		/* 8220182Ch case   73:*/		regs.LR = 0x82201830; return 0x821F6310;
		/* 8220182Ch case   73:*/		return 0x82201830;
		  /* 82201830h */ case   74:  		/* mr R28, R29 */
		/* 82201830h case   74:*/		regs.R28 = regs.R29;
		/* 82201830h case   74:*/		return 0x82201834;
		  /* 82201834h */ case   75:  		/* cmplwi CR6, R28, 0 */
		/* 82201834h case   75:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82201834h case   75:*/		return 0x82201838;
		  /* 82201838h */ case   76:  		/* bc 12, CR6_EQ, 80 */
		/* 82201838h case   76:*/		if ( regs.CR[6].eq ) { return 0x82201888;  }
		/* 82201838h case   76:*/		return 0x8220183C;
		  /* 8220183Ch */ case   77:  		/* addi R3, R1, 1736 */
		/* 8220183Ch case   77:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6C8);
		/* 8220183Ch case   77:*/		return 0x82201840;
		  /* 82201840h */ case   78:  		/* bl -264672 */
		/* 82201840h case   78:*/		regs.LR = 0x82201844; return 0x821C0E60;
		/* 82201840h case   78:*/		return 0x82201844;
		  /* 82201844h */ case   79:  		/* mr R30, R3 */
		/* 82201844h case   79:*/		regs.R30 = regs.R3;
		/* 82201844h case   79:*/		return 0x82201848;
		  /* 82201848h */ case   80:  		/* addi R3, R1, 1768 */
		/* 82201848h case   80:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6E8);
		/* 82201848h case   80:*/		return 0x8220184C;
		  /* 8220184Ch */ case   81:  		/* bl -264684 */
		/* 8220184Ch case   81:*/		regs.LR = 0x82201850; return 0x821C0E60;
		/* 8220184Ch case   81:*/		return 0x82201850;
		  /* 82201850h */ case   82:  		/* mr R4, R3 */
		/* 82201850h case   82:*/		regs.R4 = regs.R3;
		/* 82201850h case   82:*/		return 0x82201854;
		  /* 82201854h */ case   83:  		/* mr R3, R31 */
		/* 82201854h case   83:*/		regs.R3 = regs.R31;
		/* 82201854h case   83:*/		return 0x82201858;
		  /* 82201858h */ case   84:  		/* bl -58936 */
		/* 82201858h case   84:*/		regs.LR = 0x8220185C; return 0x821F3220;
		/* 82201858h case   84:*/		return 0x8220185C;
		  /* 8220185Ch */ case   85:  		/* mr R4, R3 */
		/* 8220185Ch case   85:*/		regs.R4 = regs.R3;
		/* 8220185Ch case   85:*/		return 0x82201860;
		  /* 82201860h */ case   86:  		/* mr R5, R30 */
		/* 82201860h case   86:*/		regs.R5 = regs.R30;
		/* 82201860h case   86:*/		return 0x82201864;
		  /* 82201864h */ case   87:  		/* mr R3, R31 */
		/* 82201864h case   87:*/		regs.R3 = regs.R31;
		/* 82201864h case   87:*/		return 0x82201868;
		  /* 82201868h */ case   88:  		/* bl -55352 */
		/* 82201868h case   88:*/		regs.LR = 0x8220186C; return 0x821F4030;
		/* 82201868h case   88:*/		return 0x8220186C;
		  /* 8220186Ch */ case   89:  		/* stw R3, <#[R30]> */
		/* 8220186Ch case   89:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8220186Ch case   89:*/		return 0x82201870;
		  /* 82201870h */ case   90:  		/* li R11, 1 */
		/* 82201870h case   90:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82201870h case   90:*/		return 0x82201874;
		  /* 82201874h */ case   91:  		/* addi R28, R28, -1 */
		/* 82201874h case   91:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82201874h case   91:*/		return 0x82201878;
		  /* 82201878h */ case   92:  		/* lwz R10, <#[R30 + 4]> */
		/* 82201878h case   92:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201878h case   92:*/		return 0x8220187C;
		  /* 8220187Ch */ case   93:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 8220187Ch case   93:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 8220187Ch case   93:*/		return 0x82201880;
		  /* 82201880h */ case   94:  		/* stw R10, <#[R30 + 4]> */
		/* 82201880h case   94:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201880h case   94:*/		return 0x82201884;
		  /* 82201884h */ case   95:  		/* b -80 */
		/* 82201884h case   95:*/		return 0x82201834;
		/* 82201884h case   95:*/		return 0x82201888;
	}
	return 0x82201888;
} // Block from 82201708h-82201888h (96 instructions)

//////////////////////////////////////////////////////
// Block at 82201888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201888);
		  /* 82201888h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82201888h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201888h case    0:*/		return 0x8220188C;
		  /* 8220188Ch */ case    1:  		/* bc 12, CR6_EQ, -21868 */
		/* 8220188Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 8220188Ch case    1:*/		return 0x82201890;
		  /* 82201890h */ case    2:  		/* mr R5, R29 */
		/* 82201890h case    2:*/		regs.R5 = regs.R29;
		/* 82201890h case    2:*/		return 0x82201894;
		  /* 82201894h */ case    3:  		/* mr R4, R27 */
		/* 82201894h case    3:*/		regs.R4 = regs.R27;
		/* 82201894h case    3:*/		return 0x82201898;
		  /* 82201898h */ case    4:  		/* addi R3, R1, 3048 */
		/* 82201898h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBE8);
		/* 82201898h case    4:*/		return 0x8220189C;
		  /* 8220189Ch */ case    5:  		/* b -16144 */
		/* 8220189Ch case    5:*/		return 0x821FD98C;
		/* 8220189Ch case    5:*/		return 0x822018A0;
		  /* 822018A0h */ case    6:  		/* fmr FR1, FR27 */
		/* 822018A0h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 822018A0h case    6:*/		return 0x822018A4;
		  /* 822018A4h */ case    7:  		/* bl -1481420 */
		/* 822018A4h case    7:*/		regs.LR = 0x822018A8; return 0x82097DD8;
		/* 822018A4h case    7:*/		return 0x822018A8;
		  /* 822018A8h */ case    8:  		/* li R5, 1 */
		/* 822018A8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822018A8h case    8:*/		return 0x822018AC;
		  /* 822018ACh */ case    9:  		/* frsp FR1, FR1 */
		/* 822018ACh case    9:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR1);
		/* 822018ACh case    9:*/		return 0x822018B0;
		  /* 822018B0h */ case   10:  		/* mr R4, R31 */
		/* 822018B0h case   10:*/		regs.R4 = regs.R31;
		/* 822018B0h case   10:*/		return 0x822018B4;
		  /* 822018B4h */ case   11:  		/* fmr FR4, FR31 */
		/* 822018B4h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 822018B4h case   11:*/		return 0x822018B8;
		  /* 822018B8h */ case   12:  		/* addi R3, R1, 2936 */
		/* 822018B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB78);
		/* 822018B8h case   12:*/		return 0x822018BC;
		  /* 822018BCh */ case   13:  		/* fmr FR3, FR31 */
		/* 822018BCh case   13:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 822018BCh case   13:*/		return 0x822018C0;
		  /* 822018C0h */ case   14:  		/* fmr FR2, FR31 */
		/* 822018C0h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 822018C0h case   14:*/		return 0x822018C4;
		  /* 822018C4h */ case   15:  		/* bl 152972 */
		/* 822018C4h case   15:*/		regs.LR = 0x822018C8; return 0x82226E50;
		/* 822018C4h case   15:*/		return 0x822018C8;
		  /* 822018C8h */ case   16:  		/* b 64 */
		/* 822018C8h case   16:*/		return 0x82201908;
		/* 822018C8h case   16:*/		return 0x822018CC;
		  /* 822018CCh */ case   17:  		/* fmr FR1, FR27 */
		/* 822018CCh case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 822018CCh case   17:*/		return 0x822018D0;
		  /* 822018D0h */ case   18:  		/* bl -1481464 */
		/* 822018D0h case   18:*/		regs.LR = 0x822018D4; return 0x82097DD8;
		/* 822018D0h case   18:*/		return 0x822018D4;
		  /* 822018D4h */ case   19:  		/* frsp FR14, FR1 */
		/* 822018D4h case   19:*/		cpu::op::frsp<0>(regs,&regs.FR14,regs.FR1);
		/* 822018D4h case   19:*/		return 0x822018D8;
		  /* 822018D8h */ case   20:  		/* lfd FR1, <#[R1 + 1320]> */
		/* 822018D8h case   20:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000528) );
		/* 822018D8h case   20:*/		return 0x822018DC;
		  /* 822018DCh */ case   21:  		/* bl -1481476 */
		/* 822018DCh case   21:*/		regs.LR = 0x822018E0; return 0x82097DD8;
		/* 822018DCh case   21:*/		return 0x822018E0;
		  /* 822018E0h */ case   22:  		/* frsp FR0, FR1 */
		/* 822018E0h case   22:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 822018E0h case   22:*/		return 0x822018E4;
		  /* 822018E4h */ case   23:  		/* li R5, 1 */
		/* 822018E4h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822018E4h case   23:*/		return 0x822018E8;
		  /* 822018E8h */ case   24:  		/* fmr FR4, FR31 */
		/* 822018E8h case   24:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 822018E8h case   24:*/		return 0x822018EC;
		  /* 822018ECh */ case   25:  		/* mr R4, R31 */
		/* 822018ECh case   25:*/		regs.R4 = regs.R31;
		/* 822018ECh case   25:*/		return 0x822018F0;
		  /* 822018F0h */ case   26:  		/* fmr FR3, FR31 */
		/* 822018F0h case   26:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 822018F0h case   26:*/		return 0x822018F4;
		  /* 822018F4h */ case   27:  		/* addi R3, R1, 3112 */
		/* 822018F4h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC28);
		/* 822018F4h case   27:*/		return 0x822018F8;
		  /* 822018F8h */ case   28:  		/* fmr FR2, FR31 */
		/* 822018F8h case   28:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 822018F8h case   28:*/		return 0x822018FC;
		  /* 822018FCh */ case   29:  		/* fdivs FR1, FR14, FR0 */
		/* 822018FCh case   29:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR14,regs.FR0);
		/* 822018FCh case   29:*/		return 0x82201900;
		  /* 82201900h */ case   30:  		/* bl 152912 */
		/* 82201900h case   30:*/		regs.LR = 0x82201904; return 0x82226E50;
		/* 82201900h case   30:*/		return 0x82201904;
		  /* 82201904h */ case   31:  		/* lfs FR14, <#[R1 + 624]> */
		/* 82201904h case   31:*/		cpu::mem::load32f( regs, &regs.FR14, (uint32)(regs.R1 + 0x00000270) );
		/* 82201904h case   31:*/		return 0x82201908;
	}
	return 0x82201908;
} // Block from 82201888h-82201908h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82201908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201908);
		  /* 82201908h */ case    0:  		/* ld R11, <#[R3]> */
		/* 82201908h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82201908h case    0:*/		return 0x8220190C;
		  /* 8220190Ch */ case    1:  		/* mr R5, R29 */
		/* 8220190Ch case    1:*/		regs.R5 = regs.R29;
		/* 8220190Ch case    1:*/		return 0x82201910;
		  /* 82201910h */ case    2:  		/* addi R3, R1, 1800 */
		/* 82201910h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x708);
		/* 82201910h case    2:*/		return 0x82201914;
		  /* 82201914h */ case    3:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82201914h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201914h case    3:*/		return 0x82201918;
		  /* 82201918h */ case    4:  		/* std R11, <#[R1 + 96]> */
		/* 82201918h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82201918h case    4:*/		return 0x8220191C;
		  /* 8220191Ch */ case    5:  		/* bl -46604 */
		/* 8220191Ch case    5:*/		regs.LR = 0x82201920; return 0x821F6310;
		/* 8220191Ch case    5:*/		return 0x82201920;
		  /* 82201920h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82201920h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201920h case    6:*/		return 0x82201924;
		  /* 82201924h */ case    7:  		/* bc 12, CR6_EQ, -22020 */
		/* 82201924h case    7:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82201924h case    7:*/		return 0x82201928;
		  /* 82201928h */ case    8:  		/* addi R3, R1, 1800 */
		/* 82201928h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x708);
		/* 82201928h case    8:*/		return 0x8220192C;
		  /* 8220192Ch */ case    9:  		/* bl -264908 */
		/* 8220192Ch case    9:*/		regs.LR = 0x82201930; return 0x821C0E60;
		/* 8220192Ch case    9:*/		return 0x82201930;
		  /* 82201930h */ case   10:  		/* mr R30, R3 */
		/* 82201930h case   10:*/		regs.R30 = regs.R3;
		/* 82201930h case   10:*/		return 0x82201934;
		  /* 82201934h */ case   11:  		/* mr R3, R31 */
		/* 82201934h case   11:*/		regs.R3 = regs.R31;
		/* 82201934h case   11:*/		return 0x82201938;
		  /* 82201938h */ case   12:  		/* mr R4, R30 */
		/* 82201938h case   12:*/		regs.R4 = regs.R30;
		/* 82201938h case   12:*/		return 0x8220193C;
		  /* 8220193Ch */ case   13:  		/* bl -59012 */
		/* 8220193Ch case   13:*/		regs.LR = 0x82201940; return 0x821F32B8;
		/* 8220193Ch case   13:*/		return 0x82201940;
		  /* 82201940h */ case   14:  		/* mr R5, R3 */
		/* 82201940h case   14:*/		regs.R5 = regs.R3;
		/* 82201940h case   14:*/		return 0x82201944;
		  /* 82201944h */ case   15:  		/* addi R4, R1, 96 */
		/* 82201944h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82201944h case   15:*/		return 0x82201948;
		  /* 82201948h */ case   16:  		/* mr R3, R31 */
		/* 82201948h case   16:*/		regs.R3 = regs.R31;
		/* 82201948h case   16:*/		return 0x8220194C;
		  /* 8220194Ch */ case   17:  		/* bl -58196 */
		/* 8220194Ch case   17:*/		regs.LR = 0x82201950; return 0x821F35F8;
		/* 8220194Ch case   17:*/		return 0x82201950;
		  /* 82201950h */ case   18:  		/* stw R3, <#[R30]> */
		/* 82201950h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82201950h case   18:*/		return 0x82201954;
		  /* 82201954h */ case   19:  		/* li R11, 1 */
		/* 82201954h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82201954h case   19:*/		return 0x82201958;
		  /* 82201958h */ case   20:  		/* addi R29, R29, -1 */
		/* 82201958h case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82201958h case   20:*/		return 0x8220195C;
		  /* 8220195Ch */ case   21:  		/* lwz R10, <#[R30 + 4]> */
		/* 8220195Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8220195Ch case   21:*/		return 0x82201960;
		  /* 82201960h */ case   22:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 82201960h case   22:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 82201960h case   22:*/		return 0x82201964;
		  /* 82201964h */ case   23:  		/* stw R10, <#[R30 + 4]> */
		/* 82201964h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201964h case   23:*/		return 0x82201968;
		  /* 82201968h */ case   24:  		/* b -72 */
		/* 82201968h case   24:*/		return 0x82201920;
		/* 82201968h case   24:*/		return 0x8220196C;
		  /* 8220196Ch */ case   25:  		/* li R28, 11 */
		/* 8220196Ch case   25:*/		cpu::op::li<0>(regs,&regs.R28,0xB);
		/* 8220196Ch case   25:*/		return 0x82201970;
		  /* 82201970h */ case   26:  		/* b 16 */
		/* 82201970h case   26:*/		return 0x82201980;
		/* 82201970h case   26:*/		return 0x82201974;
		  /* 82201974h */ case   27:  		/* li R28, 9 */
		/* 82201974h case   27:*/		cpu::op::li<0>(regs,&regs.R28,0x9);
		/* 82201974h case   27:*/		return 0x82201978;
		  /* 82201978h */ case   28:  		/* b 8 */
		/* 82201978h case   28:*/		return 0x82201980;
		/* 82201978h case   28:*/		return 0x8220197C;
		  /* 8220197Ch */ case   29:  		/* li R28, 10 */
		/* 8220197Ch case   29:*/		cpu::op::li<0>(regs,&regs.R28,0xA);
		/* 8220197Ch case   29:*/		return 0x82201980;
	}
	return 0x82201980;
} // Block from 82201908h-82201980h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82201980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201980);
		  /* 82201980h */ case    0:  		/* mr R5, R29 */
		/* 82201980h case    0:*/		regs.R5 = regs.R29;
		/* 82201980h case    0:*/		return 0x82201984;
		  /* 82201984h */ case    1:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82201984h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201984h case    1:*/		return 0x82201988;
		  /* 82201988h */ case    2:  		/* addi R3, R1, 704 */
		/* 82201988h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2C0);
		/* 82201988h case    2:*/		return 0x8220198C;
		  /* 8220198Ch */ case    3:  		/* bl -46716 */
		/* 8220198Ch case    3:*/		regs.LR = 0x82201990; return 0x821F6310;
		/* 8220198Ch case    3:*/		return 0x82201990;
		  /* 82201990h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82201990h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201990h case    4:*/		return 0x82201994;
		  /* 82201994h */ case    5:  		/* bc 12, CR6_EQ, -22132 */
		/* 82201994h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82201994h case    5:*/		return 0x82201998;
		  /* 82201998h */ case    6:  		/* cmplwi CR6, R29, 4 */
		/* 82201998h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82201998h case    6:*/		return 0x8220199C;
		  /* 8220199Ch */ case    7:  		/* mr R30, R29 */
		/* 8220199Ch case    7:*/		regs.R30 = regs.R29;
		/* 8220199Ch case    7:*/		return 0x822019A0;
		  /* 822019A0h */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 822019A0h case    8:*/		if ( regs.CR[6].lt ) { return 0x822019A8;  }
		/* 822019A0h case    8:*/		return 0x822019A4;
		  /* 822019A4h */ case    9:  		/* li R30, 4 */
		/* 822019A4h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822019A4h case    9:*/		return 0x822019A8;
	}
	return 0x822019A8;
} // Block from 82201980h-822019A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822019A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822019A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822019A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822019A8);
		  /* 822019A8h */ case    0:  		/* li R6, 228 */
		/* 822019A8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822019A8h case    0:*/		return 0x822019AC;
		  /* 822019ACh */ case    1:  		/* mr R5, R30 */
		/* 822019ACh case    1:*/		regs.R5 = regs.R30;
		/* 822019ACh case    1:*/		return 0x822019B0;
		  /* 822019B0h */ case    2:  		/* addi R4, R1, 704 */
		/* 822019B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x2C0);
		/* 822019B0h case    2:*/		return 0x822019B4;
		  /* 822019B4h */ case    3:  		/* mr R3, R31 */
		/* 822019B4h case    3:*/		regs.R3 = regs.R31;
		/* 822019B4h case    3:*/		return 0x822019B8;
		  /* 822019B8h */ case    4:  		/* bl -62064 */
		/* 822019B8h case    4:*/		regs.LR = 0x822019BC; return 0x821F2748;
		/* 822019B8h case    4:*/		return 0x822019BC;
		  /* 822019BCh */ case    5:  		/* lwz R4, <#[R31 + 564]> */
		/* 822019BCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822019BCh case    5:*/		return 0x822019C0;
		  /* 822019C0h */ case    6:  		/* mr R27, R3 */
		/* 822019C0h case    6:*/		regs.R27 = regs.R3;
		/* 822019C0h case    6:*/		return 0x822019C4;
		  /* 822019C4h */ case    7:  		/* addi R5, R4, 24 */
		/* 822019C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 822019C4h case    7:*/		return 0x822019C8;
		  /* 822019C8h */ case    8:  		/* mr R8, R30 */
		/* 822019C8h case    8:*/		regs.R8 = regs.R30;
		/* 822019C8h case    8:*/		return 0x822019CC;
		  /* 822019CCh */ case    9:  		/* li R7, 1 */
		/* 822019CCh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822019CCh case    9:*/		return 0x822019D0;
		  /* 822019D0h */ case   10:  		/* mr R6, R28 */
		/* 822019D0h case   10:*/		regs.R6 = regs.R28;
		/* 822019D0h case   10:*/		return 0x822019D4;
		  /* 822019D4h */ case   11:  		/* mr R3, R31 */
		/* 822019D4h case   11:*/		regs.R3 = regs.R31;
		/* 822019D4h case   11:*/		return 0x822019D8;
		  /* 822019D8h */ case   12:  		/* bl 143296 */
		/* 822019D8h case   12:*/		regs.LR = 0x822019DC; return 0x82224998;
		/* 822019D8h case   12:*/		return 0x822019DC;
		  /* 822019DCh */ case   13:  		/* mr R5, R27 */
		/* 822019DCh case   13:*/		regs.R5 = regs.R27;
		/* 822019DCh case   13:*/		return 0x822019E0;
		  /* 822019E0h */ case   14:  		/* li R4, 0 */
		/* 822019E0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822019E0h case   14:*/		return 0x822019E4;
		  /* 822019E4h */ case   15:  		/* mr R26, R3 */
		/* 822019E4h case   15:*/		regs.R26 = regs.R3;
		/* 822019E4h case   15:*/		return 0x822019E8;
		  /* 822019E8h */ case   16:  		/* bl -594744 */
		/* 822019E8h case   16:*/		regs.LR = 0x822019EC; return 0x821706B0;
		/* 822019E8h case   16:*/		return 0x822019EC;
		  /* 822019ECh */ case   17:  		/* mr R5, R26 */
		/* 822019ECh case   17:*/		regs.R5 = regs.R26;
		/* 822019ECh case   17:*/		return 0x822019F0;
		  /* 822019F0h */ case   18:  		/* mr R4, R30 */
		/* 822019F0h case   18:*/		regs.R4 = regs.R30;
		/* 822019F0h case   18:*/		return 0x822019F4;
		  /* 822019F4h */ case   19:  		/* addi R3, R1, 704 */
		/* 822019F4h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2C0);
		/* 822019F4h case   19:*/		return 0x822019F8;
		  /* 822019F8h */ case   20:  		/* bl -64224 */
		/* 822019F8h case   20:*/		regs.LR = 0x822019FC; return 0x821F1F18;
		/* 822019F8h case   20:*/		return 0x822019FC;
		  /* 822019FCh */ case   21:  		/* li R4, 0 */
		/* 822019FCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822019FCh case   21:*/		return 0x82201A00;
		  /* 82201A00h */ case   22:  		/* addi R3, R1, 704 */
		/* 82201A00h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2C0);
		/* 82201A00h case   22:*/		return 0x82201A04;
		  /* 82201A04h */ case   23:  		/* subf R29, R30, R29 */
		/* 82201A04h case   23:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82201A04h case   23:*/		return 0x82201A08;
		  /* 82201A08h */ case   24:  		/* bl -80912 */
		/* 82201A08h case   24:*/		regs.LR = 0x82201A0C; return 0x821EDDF8;
		/* 82201A08h case   24:*/		return 0x82201A0C;
		  /* 82201A0Ch */ case   25:  		/* b -124 */
		/* 82201A0Ch case   25:*/		return 0x82201990;
		/* 82201A0Ch case   25:*/		return 0x82201A10;
		  /* 82201A10h */ case   26:  		/* li R27, 3 */
		/* 82201A10h case   26:*/		cpu::op::li<0>(regs,&regs.R27,0x3);
		/* 82201A10h case   26:*/		return 0x82201A14;
		  /* 82201A14h */ case   27:  		/* b 8 */
		/* 82201A14h case   27:*/		return 0x82201A1C;
		/* 82201A14h case   27:*/		return 0x82201A18;
		  /* 82201A18h */ case   28:  		/* li R27, 4 */
		/* 82201A18h case   28:*/		cpu::op::li<0>(regs,&regs.R27,0x4);
		/* 82201A18h case   28:*/		return 0x82201A1C;
	}
	return 0x82201A1C;
} // Block from 822019A8h-82201A1Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 82201A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201A1C);
		  /* 82201A1Ch */ case    0:  		/* lwz R26, <#[R1 + 3500]> */
		/* 82201A1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201A1Ch case    0:*/		return 0x82201A20;
		  /* 82201A20h */ case    1:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 82201A20h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 82201A20h case    1:*/		return 0x82201A24;
		  /* 82201A24h */ case    2:  		/* addi R3, R1, 736 */
		/* 82201A24h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2E0);
		/* 82201A24h case    2:*/		return 0x82201A28;
		  /* 82201A28h */ case    3:  		/* mr R4, R26 */
		/* 82201A28h case    3:*/		regs.R4 = regs.R26;
		/* 82201A28h case    3:*/		return 0x82201A2C;
		  /* 82201A2Ch */ case    4:  		/* bl -46876 */
		/* 82201A2Ch case    4:*/		regs.LR = 0x82201A30; return 0x821F6310;
		/* 82201A2Ch case    4:*/		return 0x82201A30;
		  /* 82201A30h */ case    5:  		/* mr R5, R29 */
		/* 82201A30h case    5:*/		regs.R5 = regs.R29;
		/* 82201A30h case    5:*/		return 0x82201A34;
		  /* 82201A34h */ case    6:  		/* mr R4, R26 */
		/* 82201A34h case    6:*/		regs.R4 = regs.R26;
		/* 82201A34h case    6:*/		return 0x82201A38;
		  /* 82201A38h */ case    7:  		/* addi R3, R1, 1832 */
		/* 82201A38h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x728);
		/* 82201A38h case    7:*/		return 0x82201A3C;
		  /* 82201A3Ch */ case    8:  		/* bl -46892 */
		/* 82201A3Ch case    8:*/		regs.LR = 0x82201A40; return 0x821F6310;
		/* 82201A3Ch case    8:*/		return 0x82201A40;
		  /* 82201A40h */ case    9:  		/* mr R28, R29 */
		/* 82201A40h case    9:*/		regs.R28 = regs.R29;
		/* 82201A40h case    9:*/		return 0x82201A44;
		  /* 82201A44h */ case   10:  		/* cmplwi CR6, R28, 0 */
		/* 82201A44h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82201A44h case   10:*/		return 0x82201A48;
		  /* 82201A48h */ case   11:  		/* bc 12, CR6_EQ, 168 */
		/* 82201A48h case   11:*/		if ( regs.CR[6].eq ) { return 0x82201AF0;  }
		/* 82201A48h case   11:*/		return 0x82201A4C;
		  /* 82201A4Ch */ case   12:  		/* cmplwi CR6, R28, 4 */
		/* 82201A4Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 82201A4Ch case   12:*/		return 0x82201A50;
		  /* 82201A50h */ case   13:  		/* mr R30, R28 */
		/* 82201A50h case   13:*/		regs.R30 = regs.R28;
		/* 82201A50h case   13:*/		return 0x82201A54;
		  /* 82201A54h */ case   14:  		/* bc 12, CR6_LT, 8 */
		/* 82201A54h case   14:*/		if ( regs.CR[6].lt ) { return 0x82201A5C;  }
		/* 82201A54h case   14:*/		return 0x82201A58;
		  /* 82201A58h */ case   15:  		/* li R30, 4 */
		/* 82201A58h case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82201A58h case   15:*/		return 0x82201A5C;
	}
	return 0x82201A5C;
} // Block from 82201A1Ch-82201A5Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82201A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201A5C);
		  /* 82201A5Ch */ case    0:  		/* li R6, 228 */
		/* 82201A5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82201A5Ch case    0:*/		return 0x82201A60;
		  /* 82201A60h */ case    1:  		/* mr R5, R30 */
		/* 82201A60h case    1:*/		regs.R5 = regs.R30;
		/* 82201A60h case    1:*/		return 0x82201A64;
		  /* 82201A64h */ case    2:  		/* addi R4, R1, 736 */
		/* 82201A64h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x2E0);
		/* 82201A64h case    2:*/		return 0x82201A68;
		  /* 82201A68h */ case    3:  		/* mr R3, R31 */
		/* 82201A68h case    3:*/		regs.R3 = regs.R31;
		/* 82201A68h case    3:*/		return 0x82201A6C;
		  /* 82201A6Ch */ case    4:  		/* bl -62244 */
		/* 82201A6Ch case    4:*/		regs.LR = 0x82201A70; return 0x821F2748;
		/* 82201A6Ch case    4:*/		return 0x82201A70;
		  /* 82201A70h */ case    5:  		/* mr R25, R3 */
		/* 82201A70h case    5:*/		regs.R25 = regs.R3;
		/* 82201A70h case    5:*/		return 0x82201A74;
		  /* 82201A74h */ case    6:  		/* li R7, 1 */
		/* 82201A74h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82201A74h case    6:*/		return 0x82201A78;
		  /* 82201A78h */ case    7:  		/* li R6, 0 */
		/* 82201A78h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82201A78h case    7:*/		return 0x82201A7C;
		  /* 82201A7Ch */ case    8:  		/* mr R5, R30 */
		/* 82201A7Ch case    8:*/		regs.R5 = regs.R30;
		/* 82201A7Ch case    8:*/		return 0x82201A80;
		  /* 82201A80h */ case    9:  		/* addi R4, R1, 1832 */
		/* 82201A80h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x728);
		/* 82201A80h case    9:*/		return 0x82201A84;
		  /* 82201A84h */ case   10:  		/* mr R3, R31 */
		/* 82201A84h case   10:*/		regs.R3 = regs.R31;
		/* 82201A84h case   10:*/		return 0x82201A88;
		  /* 82201A88h */ case   11:  		/* bl -62824 */
		/* 82201A88h case   11:*/		regs.LR = 0x82201A8C; return 0x821F2520;
		/* 82201A88h case   11:*/		return 0x82201A8C;
		  /* 82201A8Ch */ case   12:  		/* lwz R4, <#[R31 + 564]> */
		/* 82201A8Ch case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82201A8Ch case   12:*/		return 0x82201A90;
		  /* 82201A90h */ case   13:  		/* mr R24, R3 */
		/* 82201A90h case   13:*/		regs.R24 = regs.R3;
		/* 82201A90h case   13:*/		return 0x82201A94;
		  /* 82201A94h */ case   14:  		/* addi R5, R4, 24 */
		/* 82201A94h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 82201A94h case   14:*/		return 0x82201A98;
		  /* 82201A98h */ case   15:  		/* mr R8, R30 */
		/* 82201A98h case   15:*/		regs.R8 = regs.R30;
		/* 82201A98h case   15:*/		return 0x82201A9C;
		  /* 82201A9Ch */ case   16:  		/* li R7, 2 */
		/* 82201A9Ch case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82201A9Ch case   16:*/		return 0x82201AA0;
		  /* 82201AA0h */ case   17:  		/* mr R6, R27 */
		/* 82201AA0h case   17:*/		regs.R6 = regs.R27;
		/* 82201AA0h case   17:*/		return 0x82201AA4;
		  /* 82201AA4h */ case   18:  		/* mr R3, R31 */
		/* 82201AA4h case   18:*/		regs.R3 = regs.R31;
		/* 82201AA4h case   18:*/		return 0x82201AA8;
		  /* 82201AA8h */ case   19:  		/* bl 143088 */
		/* 82201AA8h case   19:*/		regs.LR = 0x82201AAC; return 0x82224998;
		/* 82201AA8h case   19:*/		return 0x82201AAC;
		  /* 82201AACh */ case   20:  		/* mr R5, R25 */
		/* 82201AACh case   20:*/		regs.R5 = regs.R25;
		/* 82201AACh case   20:*/		return 0x82201AB0;
		  /* 82201AB0h */ case   21:  		/* li R4, 0 */
		/* 82201AB0h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82201AB0h case   21:*/		return 0x82201AB4;
		  /* 82201AB4h */ case   22:  		/* mr R23, R3 */
		/* 82201AB4h case   22:*/		regs.R23 = regs.R3;
		/* 82201AB4h case   22:*/		return 0x82201AB8;
		  /* 82201AB8h */ case   23:  		/* bl -594952 */
		/* 82201AB8h case   23:*/		regs.LR = 0x82201ABC; return 0x821706B0;
		/* 82201AB8h case   23:*/		return 0x82201ABC;
		  /* 82201ABCh */ case   24:  		/* mr R3, R23 */
		/* 82201ABCh case   24:*/		regs.R3 = regs.R23;
		/* 82201ABCh case   24:*/		return 0x82201AC0;
		  /* 82201AC0h */ case   25:  		/* mr R5, R24 */
		/* 82201AC0h case   25:*/		regs.R5 = regs.R24;
		/* 82201AC0h case   25:*/		return 0x82201AC4;
		  /* 82201AC4h */ case   26:  		/* li R4, 1 */
		/* 82201AC4h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82201AC4h case   26:*/		return 0x82201AC8;
		  /* 82201AC8h */ case   27:  		/* bl -594968 */
		/* 82201AC8h case   27:*/		regs.LR = 0x82201ACC; return 0x821706B0;
		/* 82201AC8h case   27:*/		return 0x82201ACC;
		  /* 82201ACCh */ case   28:  		/* mr R5, R23 */
		/* 82201ACCh case   28:*/		regs.R5 = regs.R23;
		/* 82201ACCh case   28:*/		return 0x82201AD0;
		  /* 82201AD0h */ case   29:  		/* mr R4, R30 */
		/* 82201AD0h case   29:*/		regs.R4 = regs.R30;
		/* 82201AD0h case   29:*/		return 0x82201AD4;
		  /* 82201AD4h */ case   30:  		/* addi R3, R1, 736 */
		/* 82201AD4h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2E0);
		/* 82201AD4h case   30:*/		return 0x82201AD8;
		  /* 82201AD8h */ case   31:  		/* bl -64448 */
		/* 82201AD8h case   31:*/		regs.LR = 0x82201ADC; return 0x821F1F18;
		/* 82201AD8h case   31:*/		return 0x82201ADC;
		  /* 82201ADCh */ case   32:  		/* li R4, 0 */
		/* 82201ADCh case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82201ADCh case   32:*/		return 0x82201AE0;
		  /* 82201AE0h */ case   33:  		/* addi R3, R1, 736 */
		/* 82201AE0h case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2E0);
		/* 82201AE0h case   33:*/		return 0x82201AE4;
		  /* 82201AE4h */ case   34:  		/* subf R28, R30, R28 */
		/* 82201AE4h case   34:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R30,regs.R28);
		/* 82201AE4h case   34:*/		return 0x82201AE8;
		  /* 82201AE8h */ case   35:  		/* bl -81136 */
		/* 82201AE8h case   35:*/		regs.LR = 0x82201AEC; return 0x821EDDF8;
		/* 82201AE8h case   35:*/		return 0x82201AEC;
		  /* 82201AECh */ case   36:  		/* b -168 */
		/* 82201AECh case   36:*/		return 0x82201A44;
		/* 82201AECh case   36:*/		return 0x82201AF0;
	}
	return 0x82201AF0;
} // Block from 82201A5Ch-82201AF0h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82201AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201AF0);
		  /* 82201AF0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82201AF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201AF0h case    0:*/		return 0x82201AF4;
		  /* 82201AF4h */ case    1:  		/* bc 12, CR6_EQ, -22484 */
		/* 82201AF4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82201AF4h case    1:*/		return 0x82201AF8;
		  /* 82201AF8h */ case    2:  		/* mr R5, R29 */
		/* 82201AF8h case    2:*/		regs.R5 = regs.R29;
		/* 82201AF8h case    2:*/		return 0x82201AFC;
		  /* 82201AFCh */ case    3:  		/* mr R4, R26 */
		/* 82201AFCh case    3:*/		regs.R4 = regs.R26;
		/* 82201AFCh case    3:*/		return 0x82201B00;
		  /* 82201B00h */ case    4:  		/* addi R3, R1, 2720 */
		/* 82201B00h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAA0);
		/* 82201B00h case    4:*/		return 0x82201B04;
		  /* 82201B04h */ case    5:  		/* b -16760 */
		/* 82201B04h case    5:*/		return 0x821FD98C;
		/* 82201B04h case    5:*/		return 0x82201B08;
		  /* 82201B08h */ case    6:  		/* lwz R27, <#[R1 + 3500]> */
		/* 82201B08h case    6:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201B08h case    6:*/		return 0x82201B0C;
		  /* 82201B0Ch */ case    7:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 82201B0Ch case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 82201B0Ch case    7:*/		return 0x82201B10;
		  /* 82201B10h */ case    8:  		/* addi R3, R1, 1864 */
		/* 82201B10h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x748);
		/* 82201B10h case    8:*/		return 0x82201B14;
		  /* 82201B14h */ case    9:  		/* mr R4, R27 */
		/* 82201B14h case    9:*/		regs.R4 = regs.R27;
		/* 82201B14h case    9:*/		return 0x82201B18;
		  /* 82201B18h */ case   10:  		/* bl -47112 */
		/* 82201B18h case   10:*/		regs.LR = 0x82201B1C; return 0x821F6310;
		/* 82201B18h case   10:*/		return 0x82201B1C;
		  /* 82201B1Ch */ case   11:  		/* mr R5, R29 */
		/* 82201B1Ch case   11:*/		regs.R5 = regs.R29;
		/* 82201B1Ch case   11:*/		return 0x82201B20;
		  /* 82201B20h */ case   12:  		/* mr R4, R27 */
		/* 82201B20h case   12:*/		regs.R4 = regs.R27;
		/* 82201B20h case   12:*/		return 0x82201B24;
		  /* 82201B24h */ case   13:  		/* addi R3, R1, 1896 */
		/* 82201B24h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x768);
		/* 82201B24h case   13:*/		return 0x82201B28;
		  /* 82201B28h */ case   14:  		/* bl -47128 */
		/* 82201B28h case   14:*/		regs.LR = 0x82201B2C; return 0x821F6310;
		/* 82201B28h case   14:*/		return 0x82201B2C;
		  /* 82201B2Ch */ case   15:  		/* mr R28, R29 */
		/* 82201B2Ch case   15:*/		regs.R28 = regs.R29;
		/* 82201B2Ch case   15:*/		return 0x82201B30;
		  /* 82201B30h */ case   16:  		/* cmplwi CR6, R28, 0 */
		/* 82201B30h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82201B30h case   16:*/		return 0x82201B34;
		  /* 82201B34h */ case   17:  		/* bc 12, CR6_EQ, 312 */
		/* 82201B34h case   17:*/		if ( regs.CR[6].eq ) { return 0x82201C6C;  }
		/* 82201B34h case   17:*/		return 0x82201B38;
		  /* 82201B38h */ case   18:  		/* addi R3, R1, 1864 */
		/* 82201B38h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x748);
		/* 82201B38h case   18:*/		return 0x82201B3C;
		  /* 82201B3Ch */ case   19:  		/* bl -265436 */
		/* 82201B3Ch case   19:*/		regs.LR = 0x82201B40; return 0x821C0E60;
		/* 82201B3Ch case   19:*/		return 0x82201B40;
		  /* 82201B40h */ case   20:  		/* mr R30, R3 */
		/* 82201B40h case   20:*/		regs.R30 = regs.R3;
		/* 82201B40h case   20:*/		return 0x82201B44;
		  /* 82201B44h */ case   21:  		/* addi R3, R1, 1896 */
		/* 82201B44h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x768);
		/* 82201B44h case   21:*/		return 0x82201B48;
		  /* 82201B48h */ case   22:  		/* bl -265448 */
		/* 82201B48h case   22:*/		regs.LR = 0x82201B4C; return 0x821C0E60;
		/* 82201B48h case   22:*/		return 0x82201B4C;
		  /* 82201B4Ch */ case   23:  		/* mr R26, R3 */
		/* 82201B4Ch case   23:*/		regs.R26 = regs.R3;
		/* 82201B4Ch case   23:*/		return 0x82201B50;
		  /* 82201B50h */ case   24:  		/* mr R4, R30 */
		/* 82201B50h case   24:*/		regs.R4 = regs.R30;
		/* 82201B50h case   24:*/		return 0x82201B54;
		  /* 82201B54h */ case   25:  		/* mr R3, R31 */
		/* 82201B54h case   25:*/		regs.R3 = regs.R31;
		/* 82201B54h case   25:*/		return 0x82201B58;
		  /* 82201B58h */ case   26:  		/* bl -63448 */
		/* 82201B58h case   26:*/		regs.LR = 0x82201B5C; return 0x821F2380;
		/* 82201B58h case   26:*/		return 0x82201B5C;
		  /* 82201B5Ch */ case   27:  		/* li R4, 4 */
		/* 82201B5Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82201B5Ch case   27:*/		return 0x82201B60;
		  /* 82201B60h */ case   28:  		/* mr R25, R3 */
		/* 82201B60h case   28:*/		regs.R25 = regs.R3;
		/* 82201B60h case   28:*/		return 0x82201B64;
		  /* 82201B64h */ case   29:  		/* bl -565412 */
		/* 82201B64h case   29:*/		regs.LR = 0x82201B68; return 0x82177AC0;
		/* 82201B64h case   29:*/		return 0x82201B68;
		  /* 82201B68h */ case   30:  		/* mr R5, R30 */
		/* 82201B68h case   30:*/		regs.R5 = regs.R30;
		/* 82201B68h case   30:*/		return 0x82201B6C;
		  /* 82201B6Ch */ case   31:  		/* mr R4, R25 */
		/* 82201B6Ch case   31:*/		regs.R4 = regs.R25;
		/* 82201B6Ch case   31:*/		return 0x82201B70;
		  /* 82201B70h */ case   32:  		/* mr R3, R31 */
		/* 82201B70h case   32:*/		regs.R3 = regs.R31;
		/* 82201B70h case   32:*/		return 0x82201B74;
		  /* 82201B74h */ case   33:  		/* bl -56788 */
		/* 82201B74h case   33:*/		regs.LR = 0x82201B78; return 0x821F3DA0;
		/* 82201B74h case   33:*/		return 0x82201B78;
		  /* 82201B78h */ case   34:  		/* mr R25, R3 */
		/* 82201B78h case   34:*/		regs.R25 = regs.R3;
		/* 82201B78h case   34:*/		return 0x82201B7C;
		  /* 82201B7Ch */ case   35:  		/* li R7, 228 */
		/* 82201B7Ch case   35:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82201B7Ch case   35:*/		return 0x82201B80;
		  /* 82201B80h */ case   36:  		/* li R6, 4 */
		/* 82201B80h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82201B80h case   36:*/		return 0x82201B84;
		  /* 82201B84h */ case   37:  		/* mr R3, R31 */
		/* 82201B84h case   37:*/		regs.R3 = regs.R31;
		/* 82201B84h case   37:*/		return 0x82201B88;
		  /* 82201B88h */ case   38:  		/* mr R4, R25 */
		/* 82201B88h case   38:*/		regs.R4 = regs.R25;
		/* 82201B88h case   38:*/		return 0x82201B8C;
		  /* 82201B8Ch */ case   39:  		/* lwz R11, <#[R25 + 8]> */
		/* 82201B8Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82201B8Ch case   39:*/		return 0x82201B90;
		  /* 82201B90h */ case   40:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 82201B90h case   40:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 82201B90h case   40:*/		return 0x82201B94;
		  /* 82201B94h */ case   41:  		/* bl 132780 */
		/* 82201B94h case   41:*/		regs.LR = 0x82201B98; return 0x82222240;
		/* 82201B94h case   41:*/		return 0x82201B98;
		  /* 82201B98h */ case   42:  		/* mr R4, R3 */
		/* 82201B98h case   42:*/		regs.R4 = regs.R3;
		/* 82201B98h case   42:*/		return 0x82201B9C;
		  /* 82201B9Ch */ case   43:  		/* mr R5, R25 */
		/* 82201B9Ch case   43:*/		regs.R5 = regs.R25;
		/* 82201B9Ch case   43:*/		return 0x82201BA0;
		  /* 82201BA0h */ case   44:  		/* mr R3, R31 */
		/* 82201BA0h case   44:*/		regs.R3 = regs.R31;
		/* 82201BA0h case   44:*/		return 0x82201BA4;
		  /* 82201BA4h */ case   45:  		/* bl -71940 */
		/* 82201BA4h case   45:*/		regs.LR = 0x82201BA8; return 0x821F02A0;
		/* 82201BA4h case   45:*/		return 0x82201BA8;
		  /* 82201BA8h */ case   46:  		/* mr R4, R3 */
		/* 82201BA8h case   46:*/		regs.R4 = regs.R3;
		/* 82201BA8h case   46:*/		return 0x82201BAC;
		  /* 82201BACh */ case   47:  		/* mr R5, R25 */
		/* 82201BACh case   47:*/		regs.R5 = regs.R25;
		/* 82201BACh case   47:*/		return 0x82201BB0;
		  /* 82201BB0h */ case   48:  		/* mr R3, R31 */
		/* 82201BB0h case   48:*/		regs.R3 = regs.R31;
		/* 82201BB0h case   48:*/		return 0x82201BB4;
		  /* 82201BB4h */ case   49:  		/* bl -71516 */
		/* 82201BB4h case   49:*/		regs.LR = 0x82201BB8; return 0x821F0458;
		/* 82201BB4h case   49:*/		return 0x82201BB8;
		  /* 82201BB8h */ case   50:  		/* mr R4, R3 */
		/* 82201BB8h case   50:*/		regs.R4 = regs.R3;
		/* 82201BB8h case   50:*/		return 0x82201BBC;
		  /* 82201BBCh */ case   51:  		/* mr R3, R31 */
		/* 82201BBCh case   51:*/		regs.R3 = regs.R31;
		/* 82201BBCh case   51:*/		return 0x82201BC0;
		  /* 82201BC0h */ case   52:  		/* bl -73248 */
		/* 82201BC0h case   52:*/		regs.LR = 0x82201BC4; return 0x821EFDA0;
		/* 82201BC0h case   52:*/		return 0x82201BC4;
		  /* 82201BC4h */ case   53:  		/* mr R25, R3 */
		/* 82201BC4h case   53:*/		regs.R25 = regs.R3;
		/* 82201BC4h case   53:*/		return 0x82201BC8;
		  /* 82201BC8h */ case   54:  		/* li R7, 228 */
		/* 82201BC8h case   54:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82201BC8h case   54:*/		return 0x82201BCC;
		  /* 82201BCCh */ case   55:  		/* li R6, 4 */
		/* 82201BCCh case   55:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82201BCCh case   55:*/		return 0x82201BD0;
		  /* 82201BD0h */ case   56:  		/* mr R3, R31 */
		/* 82201BD0h case   56:*/		regs.R3 = regs.R31;
		/* 82201BD0h case   56:*/		return 0x82201BD4;
		  /* 82201BD4h */ case   57:  		/* mr R4, R25 */
		/* 82201BD4h case   57:*/		regs.R4 = regs.R25;
		/* 82201BD4h case   57:*/		return 0x82201BD8;
		  /* 82201BD8h */ case   58:  		/* lwz R11, <#[R25 + 8]> */
		/* 82201BD8h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82201BD8h case   58:*/		return 0x82201BDC;
		  /* 82201BDCh */ case   59:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 82201BDCh case   59:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 82201BDCh case   59:*/		return 0x82201BE0;
		  /* 82201BE0h */ case   60:  		/* bl 132704 */
		/* 82201BE0h case   60:*/		regs.LR = 0x82201BE4; return 0x82222240;
		/* 82201BE0h case   60:*/		return 0x82201BE4;
		  /* 82201BE4h */ case   61:  		/* mr R4, R3 */
		/* 82201BE4h case   61:*/		regs.R4 = regs.R3;
		/* 82201BE4h case   61:*/		return 0x82201BE8;
		  /* 82201BE8h */ case   62:  		/* mr R3, R31 */
		/* 82201BE8h case   62:*/		regs.R3 = regs.R31;
		/* 82201BE8h case   62:*/		return 0x82201BEC;
		  /* 82201BECh */ case   63:  		/* bl -78628 */
		/* 82201BECh case   63:*/		regs.LR = 0x82201BF0; return 0x821EE8C8;
		/* 82201BECh case   63:*/		return 0x82201BF0;
		  /* 82201BF0h */ case   64:  		/* mr R5, R3 */
		/* 82201BF0h case   64:*/		regs.R5 = regs.R3;
		/* 82201BF0h case   64:*/		return 0x82201BF4;
		  /* 82201BF4h */ case   65:  		/* mr R4, R25 */
		/* 82201BF4h case   65:*/		regs.R4 = regs.R25;
		/* 82201BF4h case   65:*/		return 0x82201BF8;
		  /* 82201BF8h */ case   66:  		/* mr R3, R31 */
		/* 82201BF8h case   66:*/		regs.R3 = regs.R31;
		/* 82201BF8h case   66:*/		return 0x82201BFC;
		  /* 82201BFCh */ case   67:  		/* bl -71588 */
		/* 82201BFCh case   67:*/		regs.LR = 0x82201C00; return 0x821F0458;
		/* 82201BFCh case   67:*/		return 0x82201C00;
		  /* 82201C00h */ case   68:  		/* mr R25, R3 */
		/* 82201C00h case   68:*/		regs.R25 = regs.R3;
		/* 82201C00h case   68:*/		return 0x82201C04;
		  /* 82201C04h */ case   69:  		/* mr R3, R31 */
		/* 82201C04h case   69:*/		regs.R3 = regs.R31;
		/* 82201C04h case   69:*/		return 0x82201C08;
		  /* 82201C08h */ case   70:  		/* mr R4, R25 */
		/* 82201C08h case   70:*/		regs.R4 = regs.R25;
		/* 82201C08h case   70:*/		return 0x82201C0C;
		  /* 82201C0Ch */ case   71:  		/* bl -73476 */
		/* 82201C0Ch case   71:*/		regs.LR = 0x82201C10; return 0x821EFD08;
		/* 82201C0Ch case   71:*/		return 0x82201C10;
		  /* 82201C10h */ case   72:  		/* mr R4, R3 */
		/* 82201C10h case   72:*/		regs.R4 = regs.R3;
		/* 82201C10h case   72:*/		return 0x82201C14;
		  /* 82201C14h */ case   73:  		/* mr R3, R31 */
		/* 82201C14h case   73:*/		regs.R3 = regs.R31;
		/* 82201C14h case   73:*/		return 0x82201C18;
		  /* 82201C18h */ case   74:  		/* bl -73184 */
		/* 82201C18h case   74:*/		regs.LR = 0x82201C1C; return 0x821EFE38;
		/* 82201C18h case   74:*/		return 0x82201C1C;
		  /* 82201C1Ch */ case   75:  		/* mr R5, R3 */
		/* 82201C1Ch case   75:*/		regs.R5 = regs.R3;
		/* 82201C1Ch case   75:*/		return 0x82201C20;
		  /* 82201C20h */ case   76:  		/* mr R4, R30 */
		/* 82201C20h case   76:*/		regs.R4 = regs.R30;
		/* 82201C20h case   76:*/		return 0x82201C24;
		  /* 82201C24h */ case   77:  		/* mr R3, R31 */
		/* 82201C24h case   77:*/		regs.R3 = regs.R31;
		/* 82201C24h case   77:*/		return 0x82201C28;
		  /* 82201C28h */ case   78:  		/* bl -58928 */
		/* 82201C28h case   78:*/		regs.LR = 0x82201C2C; return 0x821F35F8;
		/* 82201C28h case   78:*/		return 0x82201C2C;
		  /* 82201C2Ch */ case   79:  		/* li R11, 1 */
		/* 82201C2Ch case   79:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82201C2Ch case   79:*/		return 0x82201C30;
		  /* 82201C30h */ case   80:  		/* stw R3, <#[R30]> */
		/* 82201C30h case   80:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82201C30h case   80:*/		return 0x82201C34;
		  /* 82201C34h */ case   81:  		/* mr R4, R26 */
		/* 82201C34h case   81:*/		regs.R4 = regs.R26;
		/* 82201C34h case   81:*/		return 0x82201C38;
		  /* 82201C38h */ case   82:  		/* lwz R10, <#[R30 + 4]> */
		/* 82201C38h case   82:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201C38h case   82:*/		return 0x82201C3C;
		  /* 82201C3Ch */ case   83:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 82201C3Ch case   83:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 82201C3Ch case   83:*/		return 0x82201C40;
		  /* 82201C40h */ case   84:  		/* stw R10, <#[R30 + 4]> */
		/* 82201C40h case   84:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82201C40h case   84:*/		return 0x82201C44;
		  /* 82201C44h */ case   85:  		/* mr R3, R31 */
		/* 82201C44h case   85:*/		regs.R3 = regs.R31;
		/* 82201C44h case   85:*/		return 0x82201C48;
		  /* 82201C48h */ case   86:  		/* lwz R11, <#[R1 + 412]> */
		/* 82201C48h case   86:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000019C) );
		/* 82201C48h case   86:*/		return 0x82201C4C;
		  /* 82201C4Ch */ case   87:  		/* stw R25, <#[R1 + 408]> */
		/* 82201C4Ch case   87:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000198) );
		/* 82201C4Ch case   87:*/		return 0x82201C50;
		  /* 82201C50h */ case   88:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 82201C50h case   88:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 82201C50h case   88:*/		return 0x82201C54;
		  /* 82201C54h */ case   89:  		/* ori R11, R11, 1 */
		/* 82201C54h case   89:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82201C54h case   89:*/		return 0x82201C58;
		  /* 82201C58h */ case   90:  		/* stw R11, <#[R1 + 412]> */
		/* 82201C58h case   90:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000019C) );
		/* 82201C58h case   90:*/		return 0x82201C5C;
		  /* 82201C5Ch */ case   91:  		/* ld R5, <#[R1 + 408]> */
		/* 82201C5Ch case   91:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000198) );
		/* 82201C5Ch case   91:*/		return 0x82201C60;
		  /* 82201C60h */ case   92:  		/* bl -45712 */
		/* 82201C60h case   92:*/		regs.LR = 0x82201C64; return 0x821F69D0;
		/* 82201C60h case   92:*/		return 0x82201C64;
		  /* 82201C64h */ case   93:  		/* addi R28, R28, -1 */
		/* 82201C64h case   93:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82201C64h case   93:*/		return 0x82201C68;
		  /* 82201C68h */ case   94:  		/* b -312 */
		/* 82201C68h case   94:*/		return 0x82201B30;
		/* 82201C68h case   94:*/		return 0x82201C6C;
	}
	return 0x82201C6C;
} // Block from 82201AF0h-82201C6Ch (95 instructions)

//////////////////////////////////////////////////////
// Block at 82201C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201C6C);
		  /* 82201C6Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82201C6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201C6Ch case    0:*/		return 0x82201C70;
		  /* 82201C70h */ case    1:  		/* bc 12, CR6_EQ, -22864 */
		/* 82201C70h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82201C70h case    1:*/		return 0x82201C74;
		  /* 82201C74h */ case    2:  		/* mr R5, R29 */
		/* 82201C74h case    2:*/		regs.R5 = regs.R29;
		/* 82201C74h case    2:*/		return 0x82201C78;
		  /* 82201C78h */ case    3:  		/* mr R4, R27 */
		/* 82201C78h case    3:*/		regs.R4 = regs.R27;
		/* 82201C78h case    3:*/		return 0x82201C7C;
		  /* 82201C7Ch */ case    4:  		/* addi R3, R1, 2736 */
		/* 82201C7Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAB0);
		/* 82201C7Ch case    4:*/		return 0x82201C80;
		  /* 82201C80h */ case    5:  		/* b -17140 */
		/* 82201C80h case    5:*/		return 0x821FD98C;
		/* 82201C80h case    5:*/		return 0x82201C84;
		  /* 82201C84h */ case    6:  		/* lwz R28, <#[R1 + 3500]> */
		/* 82201C84h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201C84h case    6:*/		return 0x82201C88;
		  /* 82201C88h */ case    7:  		/* mr R5, R29 */
		/* 82201C88h case    7:*/		regs.R5 = regs.R29;
		/* 82201C88h case    7:*/		return 0x82201C8C;
		  /* 82201C8Ch */ case    8:  		/* addi R3, R1, 768 */
		/* 82201C8Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x300);
		/* 82201C8Ch case    8:*/		return 0x82201C90;
		  /* 82201C90h */ case    9:  		/* mr R4, R28 */
		/* 82201C90h case    9:*/		regs.R4 = regs.R28;
		/* 82201C90h case    9:*/		return 0x82201C94;
		  /* 82201C94h */ case   10:  		/* bl -47492 */
		/* 82201C94h case   10:*/		regs.LR = 0x82201C98; return 0x821F6310;
		/* 82201C94h case   10:*/		return 0x82201C98;
		  /* 82201C98h */ case   11:  		/* cmplwi CR6, R29, 1 */
		/* 82201C98h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 82201C98h case   11:*/		return 0x82201C9C;
		  /* 82201C9Ch */ case   12:  		/* bc 4, CR6_EQ, 10856 */
		/* 82201C9Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82204704;  }
		/* 82201C9Ch case   12:*/		return 0x82201CA0;
		  /* 82201CA0h */ case   13:  		/* lwz R11, <#[R14 + 36]> */
		/* 82201CA0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 82201CA0h case   13:*/		return 0x82201CA4;
		  /* 82201CA4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82201CA4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82201CA4h case   14:*/		return 0x82201CA8;
		  /* 82201CA8h */ case   15:  		/* bc 12, CR6_EQ, 10884 */
		/* 82201CA8h case   15:*/		if ( regs.CR[6].eq ) { return 0x8220472C;  }
		/* 82201CA8h case   15:*/		return 0x82201CAC;
		  /* 82201CACh */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 82201CACh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82201CACh case   16:*/		return 0x82201CB0;
		  /* 82201CB0h */ case   17:  		/* cmpwi CR6, R10, 1 */
		/* 82201CB0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82201CB0h case   17:*/		return 0x82201CB4;
		  /* 82201CB4h */ case   18:  		/* bc 4, CR6_EQ, 10872 */
		/* 82201CB4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8220472C;  }
		/* 82201CB4h case   18:*/		return 0x82201CB8;
		  /* 82201CB8h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 82201CB8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82201CB8h case   19:*/		return 0x82201CBC;
		  /* 82201CBCh */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 82201CBCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82201CBCh case   20:*/		return 0x82201CC0;
		  /* 82201CC0h */ case   21:  		/* bc 12, CR6_EQ, 10848 */
		/* 82201CC0h case   21:*/		if ( regs.CR[6].eq ) { return 0x82204720;  }
		/* 82201CC0h case   21:*/		return 0x82201CC4;
		  /* 82201CC4h */ case   22:  		/* lwz R10, <#[R11 + 4]> */
		/* 82201CC4h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82201CC4h case   22:*/		return 0x82201CC8;
		  /* 82201CC8h */ case   23:  		/* cmpwi CR6, R10, 1 */
		/* 82201CC8h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82201CC8h case   23:*/		return 0x82201CCC;
		  /* 82201CCCh */ case   24:  		/* bc 4, CR6_EQ, 10836 */
		/* 82201CCCh case   24:*/		if ( !regs.CR[6].eq ) { return 0x82204720;  }
		/* 82201CCCh case   24:*/		return 0x82201CD0;
		  /* 82201CD0h */ case   25:  		/* lwz R4, <#[R11 + 8]> */
		/* 82201CD0h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 82201CD0h case   25:*/		return 0x82201CD4;
		  /* 82201CD4h */ case   26:  		/* lwz R11, <#[R4 + 4]> */
		/* 82201CD4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82201CD4h case   26:*/		return 0x82201CD8;
		  /* 82201CD8h */ case   27:  		/* cmpwi CR6, R11, 1 */
		/* 82201CD8h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82201CD8h case   27:*/		return 0x82201CDC;
		  /* 82201CDCh */ case   28:  		/* bc 4, CR6_EQ, 48 */
		/* 82201CDCh case   28:*/		if ( !regs.CR[6].eq ) { return 0x82201D0C;  }
		/* 82201CDCh case   28:*/		return 0x82201CE0;
		  /* 82201CE0h */ case   29:  		/* lwz R11, <#[R4 + 12]> */
		/* 82201CE0h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82201CE0h case   29:*/		return 0x82201CE4;
		  /* 82201CE4h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 82201CE4h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82201CE4h case   30:*/		return 0x82201CE8;
		  /* 82201CE8h */ case   31:  		/* bc 12, CR6_EQ, 12 */
		/* 82201CE8h case   31:*/		if ( regs.CR[6].eq ) { return 0x82201CF4;  }
		/* 82201CE8h case   31:*/		return 0x82201CEC;
		  /* 82201CECh */ case   32:  		/* li R3, 0 */
		/* 82201CECh case   32:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82201CECh case   32:*/		return 0x82201CF0;
		  /* 82201CF0h */ case   33:  		/* b 44 */
		/* 82201CF0h case   33:*/		return 0x82201D1C;
		/* 82201CF0h case   33:*/		return 0x82201CF4;
	}
	return 0x82201CF4;
} // Block from 82201C6Ch-82201CF4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82201CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201CF4);
		  /* 82201CF4h */ case    0:  		/* addi R6, R1, 152 */
		/* 82201CF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x98);
		/* 82201CF4h case    0:*/		return 0x82201CF8;
		  /* 82201CF8h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82201CF8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82201CF8h case    1:*/		return 0x82201CFC;
		  /* 82201CFCh */ case    2:  		/* addi R5, R1, 288 */
		/* 82201CFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 82201CFCh case    2:*/		return 0x82201D00;
		  /* 82201D00h */ case    3:  		/* mr R3, R31 */
		/* 82201D00h case    3:*/		regs.R3 = regs.R31;
		/* 82201D00h case    3:*/		return 0x82201D04;
		  /* 82201D04h */ case    4:  		/* bl -89516 */
		/* 82201D04h case    4:*/		regs.LR = 0x82201D08; return 0x821EBF58;
		/* 82201D04h case    4:*/		return 0x82201D08;
		  /* 82201D08h */ case    5:  		/* b 20 */
		/* 82201D08h case    5:*/		return 0x82201D1C;
		/* 82201D08h case    5:*/		return 0x82201D0C;
	}
	return 0x82201D0C;
} // Block from 82201CF4h-82201D0Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82201D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201D0C);
		  /* 82201D0Ch */ case    0:  		/* addi R6, R1, 152 */
		/* 82201D0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x98);
		/* 82201D0Ch case    0:*/		return 0x82201D10;
		  /* 82201D10h */ case    1:  		/* addi R5, R1, 288 */
		/* 82201D10h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 82201D10h case    1:*/		return 0x82201D14;
		  /* 82201D14h */ case    2:  		/* mr R3, R31 */
		/* 82201D14h case    2:*/		regs.R3 = regs.R31;
		/* 82201D14h case    2:*/		return 0x82201D18;
		  /* 82201D18h */ case    3:  		/* bl -89664 */
		/* 82201D18h case    3:*/		regs.LR = 0x82201D1C; return 0x821EBED8;
		/* 82201D18h case    3:*/		return 0x82201D1C;
	}
	return 0x82201D1C;
} // Block from 82201D0Ch-82201D1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82201D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201D1C);
		  /* 82201D1Ch */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82201D1Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82201D1Ch case    0:*/		return 0x82201D20;
		  /* 82201D20h */ case    1:  		/* mr R3, R31 */
		/* 82201D20h case    1:*/		regs.R3 = regs.R31;
		/* 82201D20h case    1:*/		return 0x82201D24;
		  /* 82201D24h */ case    2:  		/* bc 12, CR0_EQ, 10732 */
		/* 82201D24h case    2:*/		if ( regs.CR[0].eq ) { return 0x82204710;  }
		/* 82201D24h case    2:*/		return 0x82201D28;
		  /* 82201D28h */ case    3:  		/* lwz R11, <#[R1 + 288]> */
		/* 82201D28h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000120) );
		/* 82201D28h case    3:*/		return 0x82201D2C;
		  /* 82201D2Ch */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82201D2Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82201D2Ch case    4:*/		return 0x82201D30;
		  /* 82201D30h */ case    5:  		/* bc 4, CR6_EQ, 10728 */
		/* 82201D30h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204718;  }
		/* 82201D30h case    5:*/		return 0x82201D34;
		  /* 82201D34h */ case    6:  		/* lwz R5, <#[R1 + 152]> */
		/* 82201D34h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000098) );
		/* 82201D34h case    6:*/		return 0x82201D38;
		  /* 82201D38h */ case    7:  		/* cmplwi CR6, R5, 1 */
		/* 82201D38h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 82201D38h case    7:*/		return 0x82201D3C;
		  /* 82201D3Ch */ case    8:  		/* bc 4, CR6_EQ, 60 */
		/* 82201D3Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x82201D78;  }
		/* 82201D3Ch case    8:*/		return 0x82201D40;
		  /* 82201D40h */ case    9:  		/* lwz R10, <#[R1 + 776]> */
		/* 82201D40h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000308) );
		/* 82201D40h case    9:*/		return 0x82201D44;
		  /* 82201D44h */ case   10:  		/* lwz R11, <#[R1 + 772]> */
		/* 82201D44h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000304) );
		/* 82201D44h case   10:*/		return 0x82201D48;
		  /* 82201D48h */ case   11:  		/* addi R10, R10, 2 */
		/* 82201D48h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 82201D48h case   11:*/		return 0x82201D4C;
		  /* 82201D4Ch */ case   12:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82201D4Ch case   12:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82201D4Ch case   12:*/		return 0x82201D50;
		  /* 82201D50h */ case   13:  		/* add R4, R10, R11 */
		/* 82201D50h case   13:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82201D50h case   13:*/		return 0x82201D54;
		  /* 82201D54h */ case   14:  		/* bl -63956 */
		/* 82201D54h case   14:*/		regs.LR = 0x82201D58; return 0x821F2380;
		/* 82201D54h case   14:*/		return 0x82201D58;
		  /* 82201D58h */ case   15:  		/* mr R4, R3 */
		/* 82201D58h case   15:*/		regs.R4 = regs.R3;
		/* 82201D58h case   15:*/		return 0x82201D5C;
		  /* 82201D5Ch */ case   16:  		/* mr R3, R31 */
		/* 82201D5Ch case   16:*/		regs.R3 = regs.R31;
		/* 82201D5Ch case   16:*/		return 0x82201D60;
		  /* 82201D60h */ case   17:  		/* bl -65424 */
		/* 82201D60h case   17:*/		regs.LR = 0x82201D64; return 0x821F1DD0;
		/* 82201D60h case   17:*/		return 0x82201D64;
		  /* 82201D64h */ case   18:  		/* mr R4, R3 */
		/* 82201D64h case   18:*/		regs.R4 = regs.R3;
		/* 82201D64h case   18:*/		return 0x82201D68;
		  /* 82201D68h */ case   19:  		/* li R5, 0 */
		/* 82201D68h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82201D68h case   19:*/		return 0x82201D6C;
		  /* 82201D6Ch */ case   20:  		/* addi R3, R1, 768 */
		/* 82201D6Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x300);
		/* 82201D6Ch case   20:*/		return 0x82201D70;
		  /* 82201D70h */ case   21:  		/* bl -65192 */
		/* 82201D70h case   21:*/		regs.LR = 0x82201D74; return 0x821F1EC8;
		/* 82201D70h case   21:*/		return 0x82201D74;
		  /* 82201D74h */ case   22:  		/* b -23124 */
		/* 82201D74h case   22:*/		return 0x821FC320;
		/* 82201D74h case   22:*/		return 0x82201D78;
	}
	return 0x82201D78;
} // Block from 82201D1Ch-82201D78h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82201D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201D78);
		  /* 82201D78h */ case    0:  		/* mr R4, R28 */
		/* 82201D78h case    0:*/		regs.R4 = regs.R28;
		/* 82201D78h case    0:*/		return 0x82201D7C;
		  /* 82201D7Ch */ case    1:  		/* bl -46188 */
		/* 82201D7Ch case    1:*/		regs.LR = 0x82201D80; return 0x821F6910;
		/* 82201D7Ch case    1:*/		return 0x82201D80;
		  /* 82201D80h */ case    2:  		/* mr R4, R3 */
		/* 82201D80h case    2:*/		regs.R4 = regs.R3;
		/* 82201D80h case    2:*/		return 0x82201D84;
		  /* 82201D84h */ case    3:  		/* mr R3, R31 */
		/* 82201D84h case    3:*/		regs.R3 = regs.R31;
		/* 82201D84h case    3:*/		return 0x82201D88;
		  /* 82201D88h */ case    4:  		/* bl -73400 */
		/* 82201D88h case    4:*/		regs.LR = 0x82201D8C; return 0x821EFED0;
		/* 82201D88h case    4:*/		return 0x82201D8C;
		  /* 82201D8Ch */ case    5:  		/* mr R4, R3 */
		/* 82201D8Ch case    5:*/		regs.R4 = regs.R3;
		/* 82201D8Ch case    5:*/		return 0x82201D90;
		  /* 82201D90h */ case    6:  		/* mr R3, R31 */
		/* 82201D90h case    6:*/		regs.R3 = regs.R31;
		/* 82201D90h case    6:*/		return 0x82201D94;
		  /* 82201D94h */ case    7:  		/* bl -73564 */
		/* 82201D94h case    7:*/		regs.LR = 0x82201D98; return 0x821EFE38;
		/* 82201D94h case    7:*/		return 0x82201D98;
		  /* 82201D98h */ case    8:  		/* lwz R5, <#[R1 + 152]> */
		/* 82201D98h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000098) );
		/* 82201D98h case    8:*/		return 0x82201D9C;
		  /* 82201D9Ch */ case    9:  		/* mr R30, R3 */
		/* 82201D9Ch case    9:*/		regs.R30 = regs.R3;
		/* 82201D9Ch case    9:*/		return 0x82201DA0;
		  /* 82201DA0h */ case   10:  		/* cmplwi CR6, R5, 0 */
		/* 82201DA0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82201DA0h case   10:*/		return 0x82201DA4;
		  /* 82201DA4h */ case   11:  		/* bc 12, CR6_EQ, -3700 */
		/* 82201DA4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82200F30;  }
		/* 82201DA4h case   11:*/		return 0x82201DA8;
		  /* 82201DA8h */ case   12:  		/* addi R3, R1, 2752 */
		/* 82201DA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAC0);
		/* 82201DA8h case   12:*/		return 0x82201DAC;
		  /* 82201DACh */ case   13:  		/* b -3716 */
		/* 82201DACh case   13:*/		return 0x82200F28;
		/* 82201DACh case   13:*/		return 0x82201DB0;
		  /* 82201DB0h */ case   14:  		/* lwz R27, <#[R1 + 3500]> */
		/* 82201DB0h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201DB0h case   14:*/		return 0x82201DB4;
		  /* 82201DB4h */ case   15:  		/* mulli R5, R29, 3 */
		/* 82201DB4h case   15:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 82201DB4h case   15:*/		return 0x82201DB8;
		  /* 82201DB8h */ case   16:  		/* mr R4, R27 */
		/* 82201DB8h case   16:*/		regs.R4 = regs.R27;
		/* 82201DB8h case   16:*/		return 0x82201DBC;
		  /* 82201DBCh */ case   17:  		/* addi R3, R1, 800 */
		/* 82201DBCh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x320);
		/* 82201DBCh case   17:*/		return 0x82201DC0;
		  /* 82201DC0h */ case   18:  		/* bl -47792 */
		/* 82201DC0h case   18:*/		regs.LR = 0x82201DC4; return 0x821F6310;
		/* 82201DC0h case   18:*/		return 0x82201DC4;
		  /* 82201DC4h */ case   19:  		/* rlwinm R28, R29, 1, 0, 30 */
		/* 82201DC4h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R29);
		/* 82201DC4h case   19:*/		return 0x82201DC8;
		  /* 82201DC8h */ case   20:  		/* mr R4, R27 */
		/* 82201DC8h case   20:*/		regs.R4 = regs.R27;
		/* 82201DC8h case   20:*/		return 0x82201DCC;
		  /* 82201DCCh */ case   21:  		/* mr R5, R28 */
		/* 82201DCCh case   21:*/		regs.R5 = regs.R28;
		/* 82201DCCh case   21:*/		return 0x82201DD0;
		  /* 82201DD0h */ case   22:  		/* addi R3, R1, 1928 */
		/* 82201DD0h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x788);
		/* 82201DD0h case   22:*/		return 0x82201DD4;
		  /* 82201DD4h */ case   23:  		/* bl -47812 */
		/* 82201DD4h case   23:*/		regs.LR = 0x82201DD8; return 0x821F6310;
		/* 82201DD4h case   23:*/		return 0x82201DD8;
		  /* 82201DD8h */ case   24:  		/* mr R5, R29 */
		/* 82201DD8h case   24:*/		regs.R5 = regs.R29;
		/* 82201DD8h case   24:*/		return 0x82201DDC;
		  /* 82201DDCh */ case   25:  		/* mr R4, R27 */
		/* 82201DDCh case   25:*/		regs.R4 = regs.R27;
		/* 82201DDCh case   25:*/		return 0x82201DE0;
		  /* 82201DE0h */ case   26:  		/* addi R3, R1, 1960 */
		/* 82201DE0h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7A8);
		/* 82201DE0h case   26:*/		return 0x82201DE4;
		  /* 82201DE4h */ case   27:  		/* bl -47828 */
		/* 82201DE4h case   27:*/		regs.LR = 0x82201DE8; return 0x821F6310;
		/* 82201DE4h case   27:*/		return 0x82201DE8;
		  /* 82201DE8h */ case   28:  		/* cmplwi CR6, R29, 0 */
		/* 82201DE8h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82201DE8h case   28:*/		return 0x82201DEC;
		  /* 82201DECh */ case   29:  		/* bc 12, CR6_EQ, 200 */
		/* 82201DECh case   29:*/		if ( regs.CR[6].eq ) { return 0x82201EB4;  }
		/* 82201DECh case   29:*/		return 0x82201DF0;
		  /* 82201DF0h */ case   30:  		/* cmplwi CR6, R29, 4 */
		/* 82201DF0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82201DF0h case   30:*/		return 0x82201DF4;
		  /* 82201DF4h */ case   31:  		/* mr R30, R29 */
		/* 82201DF4h case   31:*/		regs.R30 = regs.R29;
		/* 82201DF4h case   31:*/		return 0x82201DF8;
		  /* 82201DF8h */ case   32:  		/* bc 12, CR6_LT, 8 */
		/* 82201DF8h case   32:*/		if ( regs.CR[6].lt ) { return 0x82201E00;  }
		/* 82201DF8h case   32:*/		return 0x82201DFC;
		  /* 82201DFCh */ case   33:  		/* li R30, 4 */
		/* 82201DFCh case   33:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82201DFCh case   33:*/		return 0x82201E00;
	}
	return 0x82201E00;
} // Block from 82201D78h-82201E00h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82201E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201E00);
		  /* 82201E00h */ case    0:  		/* li R6, 228 */
		/* 82201E00h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82201E00h case    0:*/		return 0x82201E04;
		  /* 82201E04h */ case    1:  		/* mr R5, R30 */
		/* 82201E04h case    1:*/		regs.R5 = regs.R30;
		/* 82201E04h case    1:*/		return 0x82201E08;
		  /* 82201E08h */ case    2:  		/* addi R4, R1, 800 */
		/* 82201E08h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x320);
		/* 82201E08h case    2:*/		return 0x82201E0C;
		  /* 82201E0Ch */ case    3:  		/* mr R3, R31 */
		/* 82201E0Ch case    3:*/		regs.R3 = regs.R31;
		/* 82201E0Ch case    3:*/		return 0x82201E10;
		  /* 82201E10h */ case    4:  		/* bl -63176 */
		/* 82201E10h case    4:*/		regs.LR = 0x82201E14; return 0x821F2748;
		/* 82201E10h case    4:*/		return 0x82201E14;
		  /* 82201E14h */ case    5:  		/* mr R26, R3 */
		/* 82201E14h case    5:*/		regs.R26 = regs.R3;
		/* 82201E14h case    5:*/		return 0x82201E18;
		  /* 82201E18h */ case    6:  		/* li R7, 1 */
		/* 82201E18h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82201E18h case    6:*/		return 0x82201E1C;
		  /* 82201E1Ch */ case    7:  		/* li R6, 0 */
		/* 82201E1Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82201E1Ch case    7:*/		return 0x82201E20;
		  /* 82201E20h */ case    8:  		/* mr R5, R30 */
		/* 82201E20h case    8:*/		regs.R5 = regs.R30;
		/* 82201E20h case    8:*/		return 0x82201E24;
		  /* 82201E24h */ case    9:  		/* addi R4, R1, 1928 */
		/* 82201E24h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x788);
		/* 82201E24h case    9:*/		return 0x82201E28;
		  /* 82201E28h */ case   10:  		/* mr R3, R31 */
		/* 82201E28h case   10:*/		regs.R3 = regs.R31;
		/* 82201E28h case   10:*/		return 0x82201E2C;
		  /* 82201E2Ch */ case   11:  		/* bl -63756 */
		/* 82201E2Ch case   11:*/		regs.LR = 0x82201E30; return 0x821F2520;
		/* 82201E2Ch case   11:*/		return 0x82201E30;
		  /* 82201E30h */ case   12:  		/* mr R25, R3 */
		/* 82201E30h case   12:*/		regs.R25 = regs.R3;
		/* 82201E30h case   12:*/		return 0x82201E34;
		  /* 82201E34h */ case   13:  		/* li R7, 1 */
		/* 82201E34h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82201E34h case   13:*/		return 0x82201E38;
		  /* 82201E38h */ case   14:  		/* li R6, 0 */
		/* 82201E38h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82201E38h case   14:*/		return 0x82201E3C;
		  /* 82201E3Ch */ case   15:  		/* mr R5, R30 */
		/* 82201E3Ch case   15:*/		regs.R5 = regs.R30;
		/* 82201E3Ch case   15:*/		return 0x82201E40;
		  /* 82201E40h */ case   16:  		/* addi R4, R1, 1960 */
		/* 82201E40h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x7A8);
		/* 82201E40h case   16:*/		return 0x82201E44;
		  /* 82201E44h */ case   17:  		/* mr R3, R31 */
		/* 82201E44h case   17:*/		regs.R3 = regs.R31;
		/* 82201E44h case   17:*/		return 0x82201E48;
		  /* 82201E48h */ case   18:  		/* bl -63784 */
		/* 82201E48h case   18:*/		regs.LR = 0x82201E4C; return 0x821F2520;
		/* 82201E48h case   18:*/		return 0x82201E4C;
		  /* 82201E4Ch */ case   19:  		/* mr R24, R3 */
		/* 82201E4Ch case   19:*/		regs.R24 = regs.R3;
		/* 82201E4Ch case   19:*/		return 0x82201E50;
		  /* 82201E50h */ case   20:  		/* mr R4, R26 */
		/* 82201E50h case   20:*/		regs.R4 = regs.R26;
		/* 82201E50h case   20:*/		return 0x82201E54;
		  /* 82201E54h */ case   21:  		/* li R5, 4 */
		/* 82201E54h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82201E54h case   21:*/		return 0x82201E58;
		  /* 82201E58h */ case   22:  		/* mr R3, R31 */
		/* 82201E58h case   22:*/		regs.R3 = regs.R31;
		/* 82201E58h case   22:*/		return 0x82201E5C;
		  /* 82201E5Ch */ case   23:  		/* bl 149828 */
		/* 82201E5Ch case   23:*/		regs.LR = 0x82201E60; return 0x822267A0;
		/* 82201E5Ch case   23:*/		return 0x82201E60;
		  /* 82201E60h */ case   24:  		/* mr R5, R3 */
		/* 82201E60h case   24:*/		regs.R5 = regs.R3;
		/* 82201E60h case   24:*/		return 0x82201E64;
		  /* 82201E64h */ case   25:  		/* mr R4, R25 */
		/* 82201E64h case   25:*/		regs.R4 = regs.R25;
		/* 82201E64h case   25:*/		return 0x82201E68;
		  /* 82201E68h */ case   26:  		/* mr R3, R31 */
		/* 82201E68h case   26:*/		regs.R3 = regs.R31;
		/* 82201E68h case   26:*/		return 0x82201E6C;
		  /* 82201E6Ch */ case   27:  		/* bl -81188 */
		/* 82201E6Ch case   27:*/		regs.LR = 0x82201E70; return 0x821EE148;
		/* 82201E6Ch case   27:*/		return 0x82201E70;
		  /* 82201E70h */ case   28:  		/* mr R4, R3 */
		/* 82201E70h case   28:*/		regs.R4 = regs.R3;
		/* 82201E70h case   28:*/		return 0x82201E74;
		  /* 82201E74h */ case   29:  		/* mr R5, R24 */
		/* 82201E74h case   29:*/		regs.R5 = regs.R24;
		/* 82201E74h case   29:*/		return 0x82201E78;
		  /* 82201E78h */ case   30:  		/* mr R3, R31 */
		/* 82201E78h case   30:*/		regs.R3 = regs.R31;
		/* 82201E78h case   30:*/		return 0x82201E7C;
		  /* 82201E7Ch */ case   31:  		/* bl -75164 */
		/* 82201E7Ch case   31:*/		regs.LR = 0x82201E80; return 0x821EF8E0;
		/* 82201E7Ch case   31:*/		return 0x82201E80;
		  /* 82201E80h */ case   32:  		/* mr R5, R3 */
		/* 82201E80h case   32:*/		regs.R5 = regs.R3;
		/* 82201E80h case   32:*/		return 0x82201E84;
		  /* 82201E84h */ case   33:  		/* mr R4, R26 */
		/* 82201E84h case   33:*/		regs.R4 = regs.R26;
		/* 82201E84h case   33:*/		return 0x82201E88;
		  /* 82201E88h */ case   34:  		/* mr R3, R31 */
		/* 82201E88h case   34:*/		regs.R3 = regs.R31;
		/* 82201E88h case   34:*/		return 0x82201E8C;
		  /* 82201E8Ch */ case   35:  		/* bl -73356 */
		/* 82201E8Ch case   35:*/		regs.LR = 0x82201E90; return 0x821F0000;
		/* 82201E8Ch case   35:*/		return 0x82201E90;
		  /* 82201E90h */ case   36:  		/* mr R5, R3 */
		/* 82201E90h case   36:*/		regs.R5 = regs.R3;
		/* 82201E90h case   36:*/		return 0x82201E94;
		  /* 82201E94h */ case   37:  		/* mr R4, R30 */
		/* 82201E94h case   37:*/		regs.R4 = regs.R30;
		/* 82201E94h case   37:*/		return 0x82201E98;
		  /* 82201E98h */ case   38:  		/* addi R3, R1, 800 */
		/* 82201E98h case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x320);
		/* 82201E98h case   38:*/		return 0x82201E9C;
		  /* 82201E9Ch */ case   39:  		/* bl -65412 */
		/* 82201E9Ch case   39:*/		regs.LR = 0x82201EA0; return 0x821F1F18;
		/* 82201E9Ch case   39:*/		return 0x82201EA0;
		  /* 82201EA0h */ case   40:  		/* li R4, 0 */
		/* 82201EA0h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82201EA0h case   40:*/		return 0x82201EA4;
		  /* 82201EA4h */ case   41:  		/* addi R3, R1, 800 */
		/* 82201EA4h case   41:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x320);
		/* 82201EA4h case   41:*/		return 0x82201EA8;
		  /* 82201EA8h */ case   42:  		/* subf R29, R30, R29 */
		/* 82201EA8h case   42:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82201EA8h case   42:*/		return 0x82201EAC;
		  /* 82201EACh */ case   43:  		/* bl -82100 */
		/* 82201EACh case   43:*/		regs.LR = 0x82201EB0; return 0x821EDDF8;
		/* 82201EACh case   43:*/		return 0x82201EB0;
		  /* 82201EB0h */ case   44:  		/* b -200 */
		/* 82201EB0h case   44:*/		return 0x82201DE8;
		/* 82201EB0h case   44:*/		return 0x82201EB4;
	}
	return 0x82201EB4;
} // Block from 82201E00h-82201EB4h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82201EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82201EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82201EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82201EB4);
		  /* 82201EB4h */ case    0:  		/* cmplwi CR0, R28, 0 */
		/* 82201EB4h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 82201EB4h case    0:*/		return 0x82201EB8;
		  /* 82201EB8h */ case    1:  		/* bc 12, CR0_EQ, -23448 */
		/* 82201EB8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 82201EB8h case    1:*/		return 0x82201EBC;
		  /* 82201EBCh */ case    2:  		/* mr R5, R28 */
		/* 82201EBCh case    2:*/		regs.R5 = regs.R28;
		/* 82201EBCh case    2:*/		return 0x82201EC0;
		  /* 82201EC0h */ case    3:  		/* mr R4, R27 */
		/* 82201EC0h case    3:*/		regs.R4 = regs.R27;
		/* 82201EC0h case    3:*/		return 0x82201EC4;
		  /* 82201EC4h */ case    4:  		/* addi R3, R1, 2712 */
		/* 82201EC4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA98);
		/* 82201EC4h case    4:*/		return 0x82201EC8;
		  /* 82201EC8h */ case    5:  		/* b -17724 */
		/* 82201EC8h case    5:*/		return 0x821FD98C;
		/* 82201EC8h case    5:*/		return 0x82201ECC;
		  /* 82201ECCh */ case    6:  		/* lwz R11, <#[R14 + 36]> */
		/* 82201ECCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 82201ECCh case    6:*/		return 0x82201ED0;
		  /* 82201ED0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82201ED0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82201ED0h case    7:*/		return 0x82201ED4;
		  /* 82201ED4h */ case    8:  		/* bc 12, CR6_EQ, 10404 */
		/* 82201ED4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82204778;  }
		/* 82201ED4h case    8:*/		return 0x82201ED8;
		  /* 82201ED8h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 82201ED8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82201ED8h case    9:*/		return 0x82201EDC;
		  /* 82201EDCh */ case   10:  		/* cmpwi CR6, R10, 1 */
		/* 82201EDCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82201EDCh case   10:*/		return 0x82201EE0;
		  /* 82201EE0h */ case   11:  		/* bc 4, CR6_EQ, 10392 */
		/* 82201EE0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82204778;  }
		/* 82201EE0h case   11:*/		return 0x82201EE4;
		  /* 82201EE4h */ case   12:  		/* lwz R9, <#[R11 + 8]> */
		/* 82201EE4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82201EE4h case   12:*/		return 0x82201EE8;
		  /* 82201EE8h */ case   13:  		/* cmplwi CR6, R9, 0 */
		/* 82201EE8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82201EE8h case   13:*/		return 0x82201EEC;
		  /* 82201EECh */ case   14:  		/* bc 12, CR6_EQ, 10368 */
		/* 82201EECh case   14:*/		if ( regs.CR[6].eq ) { return 0x8220476C;  }
		/* 82201EECh case   14:*/		return 0x82201EF0;
		  /* 82201EF0h */ case   15:  		/* lwz R11, <#[R9 + 4]> */
		/* 82201EF0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 82201EF0h case   15:*/		return 0x82201EF4;
		  /* 82201EF4h */ case   16:  		/* cmpwi CR6, R11, 1 */
		/* 82201EF4h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82201EF4h case   16:*/		return 0x82201EF8;
		  /* 82201EF8h */ case   17:  		/* bc 4, CR6_EQ, 10356 */
		/* 82201EF8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8220476C;  }
		/* 82201EF8h case   17:*/		return 0x82201EFC;
		  /* 82201EFCh */ case   18:  		/* lwz R11, <#[R9 + 12]> */
		/* 82201EFCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 82201EFCh case   18:*/		return 0x82201F00;
		  /* 82201F00h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82201F00h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82201F00h case   19:*/		return 0x82201F04;
		  /* 82201F04h */ case   20:  		/* bc 12, CR6_EQ, 10332 */
		/* 82201F04h case   20:*/		if ( regs.CR[6].eq ) { return 0x82204760;  }
		/* 82201F04h case   20:*/		return 0x82201F08;
		  /* 82201F08h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 82201F08h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82201F08h case   21:*/		return 0x82201F0C;
		  /* 82201F0Ch */ case   22:  		/* cmpwi CR6, R10, 1 */
		/* 82201F0Ch case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82201F0Ch case   22:*/		return 0x82201F10;
		  /* 82201F10h */ case   23:  		/* bc 4, CR6_EQ, 10320 */
		/* 82201F10h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82204760;  }
		/* 82201F10h case   23:*/		return 0x82201F14;
		  /* 82201F14h */ case   24:  		/* lwz R10, <#[R11 + 12]> */
		/* 82201F14h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82201F14h case   24:*/		return 0x82201F18;
		  /* 82201F18h */ case   25:  		/* cmplwi CR6, R10, 0 */
		/* 82201F18h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82201F18h case   25:*/		return 0x82201F1C;
		  /* 82201F1Ch */ case   26:  		/* bc 12, CR6_EQ, 10296 */
		/* 82201F1Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x82204754;  }
		/* 82201F1Ch case   26:*/		return 0x82201F20;
		  /* 82201F20h */ case   27:  		/* lwz R8, <#[R10 + 4]> */
		/* 82201F20h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 82201F20h case   27:*/		return 0x82201F24;
		  /* 82201F24h */ case   28:  		/* cmpwi CR6, R8, 1 */
		/* 82201F24h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000001);
		/* 82201F24h case   28:*/		return 0x82201F28;
		  /* 82201F28h */ case   29:  		/* bc 4, CR6_EQ, 10284 */
		/* 82201F28h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82204754;  }
		/* 82201F28h case   29:*/		return 0x82201F2C;
		  /* 82201F2Ch */ case   30:  		/* mr R3, R31 */
		/* 82201F2Ch case   30:*/		regs.R3 = regs.R31;
		/* 82201F2Ch case   30:*/		return 0x82201F30;
		  /* 82201F30h */ case   31:  		/* lwz R4, <#[R9 + 8]> */
		/* 82201F30h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000008) );
		/* 82201F30h case   31:*/		return 0x82201F34;
		  /* 82201F34h */ case   32:  		/* lwz R30, <#[R11 + 8]> */
		/* 82201F34h case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 82201F34h case   32:*/		return 0x82201F38;
		  /* 82201F38h */ case   33:  		/* lwz R29, <#[R10 + 8]> */
		/* 82201F38h case   33:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + 0x00000008) );
		/* 82201F38h case   33:*/		return 0x82201F3C;
		  /* 82201F3Ch */ case   34:  		/* bl -84708 */
		/* 82201F3Ch case   34:*/		regs.LR = 0x82201F40; return 0x821ED458;
		/* 82201F3Ch case   34:*/		return 0x82201F40;
		  /* 82201F40h */ case   35:  		/* cmplwi CR6, R3, 1 */
		/* 82201F40h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82201F40h case   35:*/		return 0x82201F44;
		  /* 82201F44h */ case   36:  		/* mr R3, R31 */
		/* 82201F44h case   36:*/		regs.R3 = regs.R31;
		/* 82201F44h case   36:*/		return 0x82201F48;
		  /* 82201F48h */ case   37:  		/* bc 4, CR6_EQ, 10224 */
		/* 82201F48h case   37:*/		if ( !regs.CR[6].eq ) { return 0x82204738;  }
		/* 82201F48h case   37:*/		return 0x82201F4C;
		  /* 82201F4Ch */ case   38:  		/* mr R4, R30 */
		/* 82201F4Ch case   38:*/		regs.R4 = regs.R30;
		/* 82201F4Ch case   38:*/		return 0x82201F50;
		  /* 82201F50h */ case   39:  		/* bl -84728 */
		/* 82201F50h case   39:*/		regs.LR = 0x82201F54; return 0x821ED458;
		/* 82201F50h case   39:*/		return 0x82201F54;
		  /* 82201F54h */ case   40:  		/* cmplwi CR6, R3, 1 */
		/* 82201F54h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82201F54h case   40:*/		return 0x82201F58;
		  /* 82201F58h */ case   41:  		/* mr R3, R31 */
		/* 82201F58h case   41:*/		regs.R3 = regs.R31;
		/* 82201F58h case   41:*/		return 0x82201F5C;
		  /* 82201F5Ch */ case   42:  		/* bc 4, CR6_EQ, 10212 */
		/* 82201F5Ch case   42:*/		if ( !regs.CR[6].eq ) { return 0x82204740;  }
		/* 82201F5Ch case   42:*/		return 0x82201F60;
		  /* 82201F60h */ case   43:  		/* mr R4, R29 */
		/* 82201F60h case   43:*/		regs.R4 = regs.R29;
		/* 82201F60h case   43:*/		return 0x82201F64;
		  /* 82201F64h */ case   44:  		/* bl -84748 */
		/* 82201F64h case   44:*/		regs.LR = 0x82201F68; return 0x821ED458;
		/* 82201F64h case   44:*/		return 0x82201F68;
		  /* 82201F68h */ case   45:  		/* cmplwi CR6, R3, 1 */
		/* 82201F68h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82201F68h case   45:*/		return 0x82201F6C;
		  /* 82201F6Ch */ case   46:  		/* bc 4, CR6_EQ, 10204 */
		/* 82201F6Ch case   46:*/		if ( !regs.CR[6].eq ) { return 0x82204748;  }
		/* 82201F6Ch case   46:*/		return 0x82201F70;
		  /* 82201F70h */ case   47:  		/* lwz R29, <#[R1 + 3500]> */
		/* 82201F70h case   47:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82201F70h case   47:*/		return 0x82201F74;
		  /* 82201F74h */ case   48:  		/* addi R3, R1, 1592 */
		/* 82201F74h case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x638);
		/* 82201F74h case   48:*/		return 0x82201F78;
		  /* 82201F78h */ case   49:  		/* mr R4, R29 */
		/* 82201F78h case   49:*/		regs.R4 = regs.R29;
		/* 82201F78h case   49:*/		return 0x82201F7C;
		  /* 82201F7Ch */ case   50:  		/* bl -55596 */
		/* 82201F7Ch case   50:*/		regs.LR = 0x82201F80; return 0x821F4650;
		/* 82201F7Ch case   50:*/		return 0x82201F80;
		  /* 82201F80h */ case   51:  		/* mr R4, R29 */
		/* 82201F80h case   51:*/		regs.R4 = regs.R29;
		/* 82201F80h case   51:*/		return 0x82201F84;
		  /* 82201F84h */ case   52:  		/* addi R3, R1, 1336 */
		/* 82201F84h case   52:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x538);
		/* 82201F84h case   52:*/		return 0x82201F88;
		  /* 82201F88h */ case   53:  		/* bl -55608 */
		/* 82201F88h case   53:*/		regs.LR = 0x82201F8C; return 0x821F4650;
		/* 82201F88h case   53:*/		return 0x82201F8C;
		  /* 82201F8Ch */ case   54:  		/* mr R4, R29 */
		/* 82201F8Ch case   54:*/		regs.R4 = regs.R29;
		/* 82201F8Ch case   54:*/		return 0x82201F90;
		  /* 82201F90h */ case   55:  		/* addi R3, R1, 1496 */
		/* 82201F90h case   55:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5D8);
		/* 82201F90h case   55:*/		return 0x82201F94;
		  /* 82201F94h */ case   56:  		/* bl -55620 */
		/* 82201F94h case   56:*/		regs.LR = 0x82201F98; return 0x821F4650;
		/* 82201F94h case   56:*/		return 0x82201F98;
		  /* 82201F98h */ case   57:  		/* mr R3, R31 */
		/* 82201F98h case   57:*/		regs.R3 = regs.R31;
		/* 82201F98h case   57:*/		return 0x82201F9C;
		  /* 82201F9Ch */ case   58:  		/* ld R30, <#[R1 + 1496]> */
		/* 82201F9Ch case   58:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0x000005D8) );
		/* 82201F9Ch case   58:*/		return 0x82201FA0;
		  /* 82201FA0h */ case   59:  		/* mr R4, R30 */
		/* 82201FA0h case   59:*/		regs.R4 = regs.R30;
		/* 82201FA0h case   59:*/		return 0x82201FA4;
		  /* 82201FA4h */ case   60:  		/* bl -62348 */
		/* 82201FA4h case   60:*/		regs.LR = 0x82201FA8; return 0x821F2C18;
		/* 82201FA4h case   60:*/		return 0x82201FA8;
		  /* 82201FA8h */ case   61:  		/* mr R5, R3 */
		/* 82201FA8h case   61:*/		regs.R5 = regs.R3;
		/* 82201FA8h case   61:*/		return 0x82201FAC;
		  /* 82201FACh */ case   62:  		/* mr R4, R30 */
		/* 82201FACh case   62:*/		regs.R4 = regs.R30;
		/* 82201FACh case   62:*/		return 0x82201FB0;
		  /* 82201FB0h */ case   63:  		/* mr R3, R31 */
		/* 82201FB0h case   63:*/		regs.R3 = regs.R31;
		/* 82201FB0h case   63:*/		return 0x82201FB4;
		  /* 82201FB4h */ case   64:  		/* bl -61788 */
		/* 82201FB4h case   64:*/		regs.LR = 0x82201FB8; return 0x821F2E58;
		/* 82201FB4h case   64:*/		return 0x82201FB8;
		  /* 82201FB8h */ case   65:  		/* mr R28, R3 */
		/* 82201FB8h case   65:*/		regs.R28 = regs.R3;
		/* 82201FB8h case   65:*/		return 0x82201FBC;
		  /* 82201FBCh */ case   66:  		/* mr R4, R3 */
		/* 82201FBCh case   66:*/		regs.R4 = regs.R3;
		/* 82201FBCh case   66:*/		return 0x82201FC0;
		  /* 82201FC0h */ case   67:  		/* mr R5, R30 */
		/* 82201FC0h case   67:*/		regs.R5 = regs.R30;
		/* 82201FC0h case   67:*/		return 0x82201FC4;
		  /* 82201FC4h */ case   68:  		/* mr R3, R31 */
		/* 82201FC4h case   68:*/		regs.R3 = regs.R31;
		/* 82201FC4h case   68:*/		return 0x82201FC8;
		  /* 82201FC8h */ case   69:  		/* bl -58544 */
		/* 82201FC8h case   69:*/		regs.LR = 0x82201FCC; return 0x821F3B18;
		/* 82201FC8h case   69:*/		return 0x82201FCC;
		  /* 82201FCCh */ case   70:  		/* ld R30, <#[R1 + 1336]> */
		/* 82201FCCh case   70:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0x00000538) );
		/* 82201FCCh case   70:*/		return 0x82201FD0;
		  /* 82201FD0h */ case   71:  		/* mr R27, R3 */
		/* 82201FD0h case   71:*/		regs.R27 = regs.R3;
		/* 82201FD0h case   71:*/		return 0x82201FD4;
		  /* 82201FD4h */ case   72:  		/* mr R4, R30 */
		/* 82201FD4h case   72:*/		regs.R4 = regs.R30;
		/* 82201FD4h case   72:*/		return 0x82201FD8;
		  /* 82201FD8h */ case   73:  		/* mr R3, R31 */
		/* 82201FD8h case   73:*/		regs.R3 = regs.R31;
		/* 82201FD8h case   73:*/		return 0x82201FDC;
		  /* 82201FDCh */ case   74:  		/* bl -62404 */
		/* 82201FDCh case   74:*/		regs.LR = 0x82201FE0; return 0x821F2C18;
		/* 82201FDCh case   74:*/		return 0x82201FE0;
		  /* 82201FE0h */ case   75:  		/* mr R5, R3 */
		/* 82201FE0h case   75:*/		regs.R5 = regs.R3;
		/* 82201FE0h case   75:*/		return 0x82201FE4;
		  /* 82201FE4h */ case   76:  		/* mr R4, R30 */
		/* 82201FE4h case   76:*/		regs.R4 = regs.R30;
		/* 82201FE4h case   76:*/		return 0x82201FE8;
		  /* 82201FE8h */ case   77:  		/* mr R3, R31 */
		/* 82201FE8h case   77:*/		regs.R3 = regs.R31;
		/* 82201FE8h case   77:*/		return 0x82201FEC;
		  /* 82201FECh */ case   78:  		/* bl -61844 */
		/* 82201FECh case   78:*/		regs.LR = 0x82201FF0; return 0x821F2E58;
		/* 82201FECh case   78:*/		return 0x82201FF0;
		  /* 82201FF0h */ case   79:  		/* mr R5, R3 */
		/* 82201FF0h case   79:*/		regs.R5 = regs.R3;
		/* 82201FF0h case   79:*/		return 0x82201FF4;
		  /* 82201FF4h */ case   80:  		/* mr R4, R28 */
		/* 82201FF4h case   80:*/		regs.R4 = regs.R28;
		/* 82201FF4h case   80:*/		return 0x82201FF8;
		  /* 82201FF8h */ case   81:  		/* mr R3, R31 */
		/* 82201FF8h case   81:*/		regs.R3 = regs.R31;
		/* 82201FF8h case   81:*/		return 0x82201FFC;
		  /* 82201FFCh */ case   82:  		/* bl -72404 */
		/* 82201FFCh case   82:*/		regs.LR = 0x82202000; return 0x821F0528;
		/* 82201FFCh case   82:*/		return 0x82202000;
		  /* 82202000h */ case   83:  		/* mr R28, R3 */
		/* 82202000h case   83:*/		regs.R28 = regs.R3;
		/* 82202000h case   83:*/		return 0x82202004;
		  /* 82202004h */ case   84:  		/* mr R4, R30 */
		/* 82202004h case   84:*/		regs.R4 = regs.R30;
		/* 82202004h case   84:*/		return 0x82202008;
		  /* 82202008h */ case   85:  		/* mr R3, R31 */
		/* 82202008h case   85:*/		regs.R3 = regs.R31;
		/* 82202008h case   85:*/		return 0x8220200C;
		  /* 8220200Ch */ case   86:  		/* bl -61652 */
		/* 8220200Ch case   86:*/		regs.LR = 0x82202010; return 0x821F2F38;
		/* 8220200Ch case   86:*/		return 0x82202010;
		  /* 82202010h */ case   87:  		/* mr R4, R3 */
		/* 82202010h case   87:*/		regs.R4 = regs.R3;
		/* 82202010h case   87:*/		return 0x82202014;
		  /* 82202014h */ case   88:  		/* mr R3, R31 */
		/* 82202014h case   88:*/		regs.R3 = regs.R31;
		/* 82202014h case   88:*/		return 0x82202018;
		  /* 82202018h */ case   89:  		/* ld R5, <#[R1 + 1592]> */
		/* 82202018h case   89:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000638) );
		/* 82202018h case   89:*/		return 0x8220201C;
		  /* 8220201Ch */ case   90:  		/* bl -58628 */
		/* 8220201Ch case   90:*/		regs.LR = 0x82202020; return 0x821F3B18;
		/* 8220201Ch case   90:*/		return 0x82202020;
		  /* 82202020h */ case   91:  		/* mr R4, R3 */
		/* 82202020h case   91:*/		regs.R4 = regs.R3;
		/* 82202020h case   91:*/		return 0x82202024;
		  /* 82202024h */ case   92:  		/* mr R3, R31 */
		/* 82202024h case   92:*/		regs.R3 = regs.R31;
		/* 82202024h case   92:*/		return 0x82202028;
		  /* 82202028h */ case   93:  		/* bl -74528 */
		/* 82202028h case   93:*/		regs.LR = 0x8220202C; return 0x821EFD08;
		/* 82202028h case   93:*/		return 0x8220202C;
		  /* 8220202Ch */ case   94:  		/* mr R5, R3 */
		/* 8220202Ch case   94:*/		regs.R5 = regs.R3;
		/* 8220202Ch case   94:*/		return 0x82202030;
		  /* 82202030h */ case   95:  		/* mr R4, R28 */
		/* 82202030h case   95:*/		regs.R4 = regs.R28;
		/* 82202030h case   95:*/		return 0x82202034;
		  /* 82202034h */ case   96:  		/* mr R3, R31 */
		/* 82202034h case   96:*/		regs.R3 = regs.R31;
		/* 82202034h case   96:*/		return 0x82202038;
		  /* 82202038h */ case   97:  		/* bl -72464 */
		/* 82202038h case   97:*/		regs.LR = 0x8220203C; return 0x821F0528;
		/* 82202038h case   97:*/		return 0x8220203C;
		  /* 8220203Ch */ case   98:  		/* mr R30, R3 */
		/* 8220203Ch case   98:*/		regs.R30 = regs.R3;
		/* 8220203Ch case   98:*/		return 0x82202040;
		  /* 82202040h */ case   99:  		/* li R5, 1 */
		/* 82202040h case   99:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82202040h case   99:*/		return 0x82202044;
		  /* 82202044h */ case  100:  		/* fmr FR4, FR31 */
		/* 82202044h case  100:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 82202044h case  100:*/		return 0x82202048;
		  /* 82202048h */ case  101:  		/* mr R4, R31 */
		/* 82202048h case  101:*/		regs.R4 = regs.R31;
		/* 82202048h case  101:*/		return 0x8220204C;
		  /* 8220204Ch */ case  102:  		/* fmr FR3, FR31 */
		/* 8220204Ch case  102:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 8220204Ch case  102:*/		return 0x82202050;
		  /* 82202050h */ case  103:  		/* addi R3, R1, 656 */
		/* 82202050h case  103:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x290);
		/* 82202050h case  103:*/		return 0x82202054;
		  /* 82202054h */ case  104:  		/* fmr FR2, FR31 */
		/* 82202054h case  104:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82202054h case  104:*/		return 0x82202058;
		  /* 82202058h */ case  105:  		/* fmr FR1, FR30 */
		/* 82202058h case  105:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82202058h case  105:*/		return 0x8220205C;
		  /* 8220205Ch */ case  106:  		/* bl 151028 */
		/* 8220205Ch case  106:*/		regs.LR = 0x82202060; return 0x82226E50;
		/* 8220205Ch case  106:*/		return 0x82202060;
		  /* 82202060h */ case  107:  		/* mr R3, R29 */
		/* 82202060h case  107:*/		regs.R3 = regs.R29;
		/* 82202060h case  107:*/		return 0x82202064;
		  /* 82202064h */ case  108:  		/* ld R4, <#[R1 + 656]> */
		/* 82202064h case  108:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000290) );
		/* 82202064h case  108:*/		return 0x82202068;
		  /* 82202068h */ case  109:  		/* bl -45936 */
		/* 82202068h case  109:*/		regs.LR = 0x8220206C; return 0x821F6CF8;
		/* 82202068h case  109:*/		return 0x8220206C;
		  /* 8220206Ch */ case  110:  		/* mr R4, R29 */
		/* 8220206Ch case  110:*/		regs.R4 = regs.R29;
		/* 8220206Ch case  110:*/		return 0x82202070;
		  /* 82202070h */ case  111:  		/* li R6, 0 */
		/* 82202070h case  111:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82202070h case  111:*/		return 0x82202074;
		  /* 82202074h */ case  112:  		/* mr R5, R27 */
		/* 82202074h case  112:*/		regs.R5 = regs.R27;
		/* 82202074h case  112:*/		return 0x82202078;
		  /* 82202078h */ case  113:  		/* mr R3, R31 */
		/* 82202078h case  113:*/		regs.R3 = regs.R31;
		/* 82202078h case  113:*/		return 0x8220207C;
		  /* 8220207Ch */ case  114:  		/* bl -38644 */
		/* 8220207Ch case  114:*/		regs.LR = 0x82202080; return 0x821F8988;
		/* 8220207Ch case  114:*/		return 0x82202080;
		  /* 82202080h */ case  115:  		/* mr R4, R29 */
		/* 82202080h case  115:*/		regs.R4 = regs.R29;
		/* 82202080h case  115:*/		return 0x82202084;
		  /* 82202084h */ case  116:  		/* li R6, 0 */
		/* 82202084h case  116:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82202084h case  116:*/		return 0x82202088;
		  /* 82202088h */ case  117:  		/* mr R5, R30 */
		/* 82202088h case  117:*/		regs.R5 = regs.R30;
		/* 82202088h case  117:*/		return 0x8220208C;
		  /* 8220208Ch */ case  118:  		/* mr R3, R31 */
		/* 8220208Ch case  118:*/		regs.R3 = regs.R31;
		/* 8220208Ch case  118:*/		return 0x82202090;
		  /* 82202090h */ case  119:  		/* bl -38664 */
		/* 82202090h case  119:*/		regs.LR = 0x82202094; return 0x821F8988;
		/* 82202090h case  119:*/		return 0x82202094;
		  /* 82202094h */ case  120:  		/* ld R4, <#[R1 + 656]> */
		/* 82202094h case  120:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000290) );
		/* 82202094h case  120:*/		return 0x82202098;
		  /* 82202098h */ case  121:  		/* mr R3, R29 */
		/* 82202098h case  121:*/		regs.R3 = regs.R29;
		/* 82202098h case  121:*/		return 0x8220209C;
	}
	return 0x8220209C;
} // Block from 82201EB4h-8220209Ch (122 instructions)

//////////////////////////////////////////////////////
// Block at 8220209Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220209C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220209C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220209C);
		  /* 8220209Ch */ case    0:  		/* bl -45988 */
		/* 8220209Ch case    0:*/		regs.LR = 0x822020A0; return 0x821F6CF8;
		/* 8220209Ch case    0:*/		return 0x822020A0;
		  /* 822020A0h */ case    1:  		/* b -23936 */
		/* 822020A0h case    1:*/		return 0x821FC320;
		/* 822020A0h case    1:*/		return 0x822020A4;
		  /* 822020A4h */ case    2:  		/* lwz R24, <#[R1 + 3500]> */
		/* 822020A4h case    2:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822020A4h case    2:*/		return 0x822020A8;
		  /* 822020A8h */ case    3:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 822020A8h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 822020A8h case    3:*/		return 0x822020AC;
		  /* 822020ACh */ case    4:  		/* addi R3, R1, 832 */
		/* 822020ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x340);
		/* 822020ACh case    4:*/		return 0x822020B0;
		  /* 822020B0h */ case    5:  		/* mr R4, R24 */
		/* 822020B0h case    5:*/		regs.R4 = regs.R24;
		/* 822020B0h case    5:*/		return 0x822020B4;
		  /* 822020B4h */ case    6:  		/* bl -48548 */
		/* 822020B4h case    6:*/		regs.LR = 0x822020B8; return 0x821F6310;
		/* 822020B4h case    6:*/		return 0x822020B8;
		  /* 822020B8h */ case    7:  		/* mr R5, R29 */
		/* 822020B8h case    7:*/		regs.R5 = regs.R29;
		/* 822020B8h case    7:*/		return 0x822020BC;
		  /* 822020BCh */ case    8:  		/* mr R4, R24 */
		/* 822020BCh case    8:*/		regs.R4 = regs.R24;
		/* 822020BCh case    8:*/		return 0x822020C0;
		  /* 822020C0h */ case    9:  		/* addi R3, R1, 1992 */
		/* 822020C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7C8);
		/* 822020C0h case    9:*/		return 0x822020C4;
		  /* 822020C4h */ case   10:  		/* bl -48564 */
		/* 822020C4h case   10:*/		regs.LR = 0x822020C8; return 0x821F6310;
		/* 822020C4h case   10:*/		return 0x822020C8;
		  /* 822020C8h */ case   11:  		/* mr R25, R29 */
		/* 822020C8h case   11:*/		regs.R25 = regs.R29;
		/* 822020C8h case   11:*/		return 0x822020CC;
		  /* 822020CCh */ case   12:  		/* cmplwi CR6, R25, 0 */
		/* 822020CCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 822020CCh case   12:*/		return 0x822020D0;
		  /* 822020D0h */ case   13:  		/* bc 12, CR6_EQ, 212 */
		/* 822020D0h case   13:*/		if ( regs.CR[6].eq ) { return 0x822021A4;  }
		/* 822020D0h case   13:*/		return 0x822020D4;
		  /* 822020D4h */ case   14:  		/* cmplwi CR6, R25, 4 */
		/* 822020D4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000004);
		/* 822020D4h case   14:*/		return 0x822020D8;
		  /* 822020D8h */ case   15:  		/* mr R30, R25 */
		/* 822020D8h case   15:*/		regs.R30 = regs.R25;
		/* 822020D8h case   15:*/		return 0x822020DC;
		  /* 822020DCh */ case   16:  		/* bc 12, CR6_LT, 8 */
		/* 822020DCh case   16:*/		if ( regs.CR[6].lt ) { return 0x822020E4;  }
		/* 822020DCh case   16:*/		return 0x822020E0;
		  /* 822020E0h */ case   17:  		/* li R30, 4 */
		/* 822020E0h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822020E0h case   17:*/		return 0x822020E4;
	}
	return 0x822020E4;
} // Block from 8220209Ch-822020E4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822020E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822020E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822020E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822020E4);
		  /* 822020E4h */ case    0:  		/* li R6, 228 */
		/* 822020E4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822020E4h case    0:*/		return 0x822020E8;
		  /* 822020E8h */ case    1:  		/* mr R5, R30 */
		/* 822020E8h case    1:*/		regs.R5 = regs.R30;
		/* 822020E8h case    1:*/		return 0x822020EC;
		  /* 822020ECh */ case    2:  		/* addi R4, R1, 832 */
		/* 822020ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x340);
		/* 822020ECh case    2:*/		return 0x822020F0;
		  /* 822020F0h */ case    3:  		/* mr R3, R31 */
		/* 822020F0h case    3:*/		regs.R3 = regs.R31;
		/* 822020F0h case    3:*/		return 0x822020F4;
		  /* 822020F4h */ case    4:  		/* bl -63916 */
		/* 822020F4h case    4:*/		regs.LR = 0x822020F8; return 0x821F2748;
		/* 822020F4h case    4:*/		return 0x822020F8;
		  /* 822020F8h */ case    5:  		/* mr R26, R3 */
		/* 822020F8h case    5:*/		regs.R26 = regs.R3;
		/* 822020F8h case    5:*/		return 0x822020FC;
		  /* 822020FCh */ case    6:  		/* mr R3, R31 */
		/* 822020FCh case    6:*/		regs.R3 = regs.R31;
		/* 822020FCh case    6:*/		return 0x82202100;
		  /* 82202100h */ case    7:  		/* mr R4, R26 */
		/* 82202100h case    7:*/		regs.R4 = regs.R26;
		/* 82202100h case    7:*/		return 0x82202104;
		  /* 82202104h */ case    8:  		/* bl -79740 */
		/* 82202104h case    8:*/		regs.LR = 0x82202108; return 0x821EE988;
		/* 82202104h case    8:*/		return 0x82202108;
		  /* 82202108h */ case    9:  		/* mr R27, R3 */
		/* 82202108h case    9:*/		regs.R27 = regs.R3;
		/* 82202108h case    9:*/		return 0x8220210C;
		  /* 8220210Ch */ case   10:  		/* li R28, 0 */
		/* 8220210Ch case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8220210Ch case   10:*/		return 0x82202110;
		  /* 82202110h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 82202110h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82202110h case   11:*/		return 0x82202114;
		  /* 82202114h */ case   12:  		/* bc 12, CR6_EQ, 64 */
		/* 82202114h case   12:*/		if ( regs.CR[6].eq ) { return 0x82202154;  }
		/* 82202114h case   12:*/		return 0x82202118;
		  /* 82202118h */ case   13:  		/* lwz R11, <#[R1 + 420]> */
		/* 82202118h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001A4) );
		/* 82202118h case   13:*/		return 0x8220211C;
		  /* 8220211Ch */ case   14:  		/* addi R3, R1, 1992 */
		/* 8220211Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7C8);
		/* 8220211Ch case   14:*/		return 0x82202120;
		  /* 82202120h */ case   15:  		/* stw R27, <#[R1 + 416]> */
		/* 82202120h case   15:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000001A0) );
		/* 82202120h case   15:*/		return 0x82202124;
		  /* 82202124h */ case   16:  		/* rlwimi R11, R28, 2, 16, 29 */
		/* 82202124h case   16:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R11,regs.R28);
		/* 82202124h case   16:*/		return 0x82202128;
		  /* 82202128h */ case   17:  		/* rlwinm R11, R11, 0, 15, 29 */
		/* 82202128h case   17:*/		cpu::op::rlwinm<0,0,15,29>(regs,&regs.R11,regs.R11);
		/* 82202128h case   17:*/		return 0x8220212C;
		  /* 8220212Ch */ case   18:  		/* ori R11, R11, 1 */
		/* 8220212Ch case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220212Ch case   18:*/		return 0x82202130;
		  /* 82202130h */ case   19:  		/* stw R11, <#[R1 + 420]> */
		/* 82202130h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001A4) );
		/* 82202130h case   19:*/		return 0x82202134;
		  /* 82202134h */ case   20:  		/* bl -266964 */
		/* 82202134h case   20:*/		regs.LR = 0x82202138; return 0x821C0E60;
		/* 82202134h case   20:*/		return 0x82202138;
		  /* 82202138h */ case   21:  		/* mr R4, R3 */
		/* 82202138h case   21:*/		regs.R4 = regs.R3;
		/* 82202138h case   21:*/		return 0x8220213C;
		  /* 8220213Ch */ case   22:  		/* ld R5, <#[R1 + 416]> */
		/* 8220213Ch case   22:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000001A0) );
		/* 8220213Ch case   22:*/		return 0x82202140;
		  /* 82202140h */ case   23:  		/* mr R3, R31 */
		/* 82202140h case   23:*/		regs.R3 = regs.R31;
		/* 82202140h case   23:*/		return 0x82202144;
		  /* 82202144h */ case   24:  		/* bl -46964 */
		/* 82202144h case   24:*/		regs.LR = 0x82202148; return 0x821F69D0;
		/* 82202144h case   24:*/		return 0x82202148;
		  /* 82202148h */ case   25:  		/* addi R28, R28, 1 */
		/* 82202148h case   25:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82202148h case   25:*/		return 0x8220214C;
		  /* 8220214Ch */ case   26:  		/* cmplw CR6, R28, R30 */
		/* 8220214Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 8220214Ch case   26:*/		return 0x82202150;
		  /* 82202150h */ case   27:  		/* bc 12, CR6_LT, -56 */
		/* 82202150h case   27:*/		if ( regs.CR[6].lt ) { return 0x82202118;  }
		/* 82202150h case   27:*/		return 0x82202154;
	}
	return 0x82202154;
} // Block from 822020E4h-82202154h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82202154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202154);
		  /* 82202154h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 82202154h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82202154h case    0:*/		return 0x82202158;
		  /* 82202158h */ case    1:  		/* li R7, 228 */
		/* 82202158h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202158h case    1:*/		return 0x8220215C;
		  /* 8220215Ch */ case    2:  		/* li R6, 4 */
		/* 8220215Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8220215Ch case    2:*/		return 0x82202160;
		  /* 82202160h */ case    3:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 82202160h case    3:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 82202160h case    3:*/		return 0x82202164;
		  /* 82202164h */ case    4:  		/* mr R4, R27 */
		/* 82202164h case    4:*/		regs.R4 = regs.R27;
		/* 82202164h case    4:*/		return 0x82202168;
		  /* 82202168h */ case    5:  		/* mr R3, R31 */
		/* 82202168h case    5:*/		regs.R3 = regs.R31;
		/* 82202168h case    5:*/		return 0x8220216C;
		  /* 8220216Ch */ case    6:  		/* bl 131284 */
		/* 8220216Ch case    6:*/		regs.LR = 0x82202170; return 0x82222240;
		/* 8220216Ch case    6:*/		return 0x82202170;
		  /* 82202170h */ case    7:  		/* mr R5, R3 */
		/* 82202170h case    7:*/		regs.R5 = regs.R3;
		/* 82202170h case    7:*/		return 0x82202174;
		  /* 82202174h */ case    8:  		/* mr R4, R26 */
		/* 82202174h case    8:*/		regs.R4 = regs.R26;
		/* 82202174h case    8:*/		return 0x82202178;
		  /* 82202178h */ case    9:  		/* mr R3, R31 */
		/* 82202178h case    9:*/		regs.R3 = regs.R31;
		/* 82202178h case    9:*/		return 0x8220217C;
		  /* 8220217Ch */ case   10:  		/* bl -81972 */
		/* 8220217Ch case   10:*/		regs.LR = 0x82202180; return 0x821EE148;
		/* 8220217Ch case   10:*/		return 0x82202180;
		  /* 82202180h */ case   11:  		/* mr R5, R3 */
		/* 82202180h case   11:*/		regs.R5 = regs.R3;
		/* 82202180h case   11:*/		return 0x82202184;
		  /* 82202184h */ case   12:  		/* mr R4, R30 */
		/* 82202184h case   12:*/		regs.R4 = regs.R30;
		/* 82202184h case   12:*/		return 0x82202188;
		  /* 82202188h */ case   13:  		/* addi R3, R1, 832 */
		/* 82202188h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x340);
		/* 82202188h case   13:*/		return 0x8220218C;
		  /* 8220218Ch */ case   14:  		/* bl -66164 */
		/* 8220218Ch case   14:*/		regs.LR = 0x82202190; return 0x821F1F18;
		/* 8220218Ch case   14:*/		return 0x82202190;
		  /* 82202190h */ case   15:  		/* mr R4, R30 */
		/* 82202190h case   15:*/		regs.R4 = regs.R30;
		/* 82202190h case   15:*/		return 0x82202194;
		  /* 82202194h */ case   16:  		/* addi R3, R1, 832 */
		/* 82202194h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x340);
		/* 82202194h case   16:*/		return 0x82202198;
		  /* 82202198h */ case   17:  		/* subf R25, R30, R25 */
		/* 82202198h case   17:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R30,regs.R25);
		/* 82202198h case   17:*/		return 0x8220219C;
		  /* 8220219Ch */ case   18:  		/* bl -82852 */
		/* 8220219Ch case   18:*/		regs.LR = 0x822021A0; return 0x821EDDF8;
		/* 8220219Ch case   18:*/		return 0x822021A0;
		  /* 822021A0h */ case   19:  		/* b -212 */
		/* 822021A0h case   19:*/		return 0x822020CC;
		/* 822021A0h case   19:*/		return 0x822021A4;
	}
	return 0x822021A4;
} // Block from 82202154h-822021A4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822021A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822021A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822021A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822021A4);
		  /* 822021A4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822021A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822021A4h case    0:*/		return 0x822021A8;
		  /* 822021A8h */ case    1:  		/* bc 12, CR6_EQ, -24200 */
		/* 822021A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822021A8h case    1:*/		return 0x822021AC;
		  /* 822021ACh */ case    2:  		/* mr R5, R29 */
		/* 822021ACh case    2:*/		regs.R5 = regs.R29;
		/* 822021ACh case    2:*/		return 0x822021B0;
		  /* 822021B0h */ case    3:  		/* mr R4, R24 */
		/* 822021B0h case    3:*/		regs.R4 = regs.R24;
		/* 822021B0h case    3:*/		return 0x822021B4;
		  /* 822021B4h */ case    4:  		/* addi R3, R1, 2784 */
		/* 822021B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAE0);
		/* 822021B4h case    4:*/		return 0x822021B8;
		  /* 822021B8h */ case    5:  		/* b -18476 */
		/* 822021B8h case    5:*/		return 0x821FD98C;
		/* 822021B8h case    5:*/		return 0x822021BC;
		  /* 822021BCh */ case    6:  		/* lwz R24, <#[R1 + 3500]> */
		/* 822021BCh case    6:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822021BCh case    6:*/		return 0x822021C0;
		  /* 822021C0h */ case    7:  		/* addi R5, R29, 1 */
		/* 822021C0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x1);
		/* 822021C0h case    7:*/		return 0x822021C4;
		  /* 822021C4h */ case    8:  		/* addi R3, R1, 864 */
		/* 822021C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x360);
		/* 822021C4h case    8:*/		return 0x822021C8;
		  /* 822021C8h */ case    9:  		/* mr R4, R24 */
		/* 822021C8h case    9:*/		regs.R4 = regs.R24;
		/* 822021C8h case    9:*/		return 0x822021CC;
		  /* 822021CCh */ case   10:  		/* bl -48828 */
		/* 822021CCh case   10:*/		regs.LR = 0x822021D0; return 0x821F6310;
		/* 822021CCh case   10:*/		return 0x822021D0;
		  /* 822021D0h */ case   11:  		/* cmpwi CR6, R25, 49 */
		/* 822021D0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000031);
		/* 822021D0h case   11:*/		return 0x822021D4;
		  /* 822021D4h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 822021D4h case   12:*/		if ( regs.CR[6].eq ) { return 0x822021F8;  }
		/* 822021D4h case   12:*/		return 0x822021D8;
		  /* 822021D8h */ case   13:  		/* cmpwi CR6, R25, 52 */
		/* 822021D8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000034);
		/* 822021D8h case   13:*/		return 0x822021DC;
		  /* 822021DCh */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 822021DCh case   14:*/		if ( regs.CR[6].eq ) { return 0x822021F8;  }
		/* 822021DCh case   14:*/		return 0x822021E0;
		  /* 822021E0h */ case   15:  		/* lwz R10, <#[R1 + 872]> */
		/* 822021E0h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000368) );
		/* 822021E0h case   15:*/		return 0x822021E4;
		  /* 822021E4h */ case   16:  		/* lwz R11, <#[R1 + 868]> */
		/* 822021E4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000364) );
		/* 822021E4h case   16:*/		return 0x822021E8;
		  /* 822021E8h */ case   17:  		/* addi R10, R10, 2 */
		/* 822021E8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 822021E8h case   17:*/		return 0x822021EC;
		  /* 822021ECh */ case   18:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 822021ECh case   18:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 822021ECh case   18:*/		return 0x822021F0;
		  /* 822021F0h */ case   19:  		/* add R26, R10, R11 */
		/* 822021F0h case   19:*/		cpu::op::add<0>(regs,&regs.R26,regs.R10,regs.R11);
		/* 822021F0h case   19:*/		return 0x822021F4;
		  /* 822021F4h */ case   20:  		/* b 28 */
		/* 822021F4h case   20:*/		return 0x82202210;
		/* 822021F4h case   20:*/		return 0x822021F8;
	}
	return 0x822021F8;
} // Block from 822021A4h-822021F8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 822021F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822021F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822021F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822021F8);
		  /* 822021F8h */ case    0:  		/* mr R4, R24 */
		/* 822021F8h case    0:*/		regs.R4 = regs.R24;
		/* 822021F8h case    0:*/		return 0x822021FC;
		  /* 822021FCh */ case    1:  		/* addi R3, R1, 2800 */
		/* 822021FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAF0);
		/* 822021FCh case    1:*/		return 0x82202200;
		  /* 82202200h */ case    2:  		/* bl -56240 */
		/* 82202200h case    2:*/		regs.LR = 0x82202204; return 0x821F4650;
		/* 82202200h case    2:*/		return 0x82202204;
		  /* 82202204h */ case    3:  		/* ld R11, <#[R3]> */
		/* 82202204h case    3:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82202204h case    3:*/		return 0x82202208;
		  /* 82202208h */ case    4:  		/* addi R26, R1, 664 */
		/* 82202208h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x298);
		/* 82202208h case    4:*/		return 0x8220220C;
		  /* 8220220Ch */ case    5:  		/* std R11, <#[R1 + 664]> */
		/* 8220220Ch case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000298) );
		/* 8220220Ch case    5:*/		return 0x82202210;
	}
	return 0x82202210;
} // Block from 822021F8h-82202210h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82202210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202210);
		  /* 82202210h */ case    0:  		/* mr R4, R26 */
		/* 82202210h case    0:*/		regs.R4 = regs.R26;
		/* 82202210h case    0:*/		return 0x82202214;
		  /* 82202214h */ case    1:  		/* mr R3, R31 */
		/* 82202214h case    1:*/		regs.R3 = regs.R31;
		/* 82202214h case    1:*/		return 0x82202218;
		  /* 82202218h */ case    2:  		/* bl -65176 */
		/* 82202218h case    2:*/		regs.LR = 0x8220221C; return 0x821F2380;
		/* 82202218h case    2:*/		return 0x8220221C;
		  /* 8220221Ch */ case    3:  		/* li R4, 0 */
		/* 8220221Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220221Ch case    3:*/		return 0x82202220;
		  /* 82202220h */ case    4:  		/* mr R30, R3 */
		/* 82202220h case    4:*/		regs.R30 = regs.R3;
		/* 82202220h case    4:*/		return 0x82202224;
		  /* 82202224h */ case    5:  		/* bl -442420 */
		/* 82202224h case    5:*/		regs.LR = 0x82202228; return 0x821961F0;
		/* 82202224h case    5:*/		return 0x82202228;
		  /* 82202228h */ case    6:  		/* mr R5, R29 */
		/* 82202228h case    6:*/		regs.R5 = regs.R29;
		/* 82202228h case    6:*/		return 0x8220222C;
		  /* 8220222Ch */ case    7:  		/* mr R4, R24 */
		/* 8220222Ch case    7:*/		regs.R4 = regs.R24;
		/* 8220222Ch case    7:*/		return 0x82202230;
		  /* 82202230h */ case    8:  		/* addi R3, R1, 1576 */
		/* 82202230h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x628);
		/* 82202230h case    8:*/		return 0x82202234;
		  /* 82202234h */ case    9:  		/* bl -48932 */
		/* 82202234h case    9:*/		regs.LR = 0x82202238; return 0x821F6310;
		/* 82202234h case    9:*/		return 0x82202238;
		  /* 82202238h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 82202238h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82202238h case   10:*/		return 0x8220223C;
		  /* 8220223Ch */ case   11:  		/* bc 12, CR6_EQ, 140 */
		/* 8220223Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x822022C8;  }
		/* 8220223Ch case   11:*/		return 0x82202240;
		  /* 82202240h */ case   12:  		/* cmplwi CR6, R29, 4 */
		/* 82202240h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82202240h case   12:*/		return 0x82202244;
		  /* 82202244h */ case   13:  		/* mr R28, R29 */
		/* 82202244h case   13:*/		regs.R28 = regs.R29;
		/* 82202244h case   13:*/		return 0x82202248;
		  /* 82202248h */ case   14:  		/* bc 12, CR6_LT, 8 */
		/* 82202248h case   14:*/		if ( regs.CR[6].lt ) { return 0x82202250;  }
		/* 82202248h case   14:*/		return 0x8220224C;
		  /* 8220224Ch */ case   15:  		/* li R28, 4 */
		/* 8220224Ch case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 8220224Ch case   15:*/		return 0x82202250;
	}
	return 0x82202250;
} // Block from 82202210h-82202250h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82202250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202250);
		  /* 82202250h */ case    0:  		/* li R6, 228 */
		/* 82202250h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82202250h case    0:*/		return 0x82202254;
		  /* 82202254h */ case    1:  		/* mr R5, R28 */
		/* 82202254h case    1:*/		regs.R5 = regs.R28;
		/* 82202254h case    1:*/		return 0x82202258;
		  /* 82202258h */ case    2:  		/* addi R4, R1, 1576 */
		/* 82202258h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x628);
		/* 82202258h case    2:*/		return 0x8220225C;
		  /* 8220225Ch */ case    3:  		/* mr R3, R31 */
		/* 8220225Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220225Ch case    3:*/		return 0x82202260;
		  /* 82202260h */ case    4:  		/* bl -64280 */
		/* 82202260h case    4:*/		regs.LR = 0x82202264; return 0x821F2748;
		/* 82202260h case    4:*/		return 0x82202264;
		  /* 82202264h */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 82202264h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82202264h case    5:*/		return 0x82202268;
		  /* 82202268h */ case    6:  		/* mr R27, R3 */
		/* 82202268h case    6:*/		regs.R27 = regs.R3;
		/* 82202268h case    6:*/		return 0x8220226C;
		  /* 8220226Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8220226Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220226Ch case    7:*/		return 0x82202270;
		  /* 82202270h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 82202270h case    8:*/		if ( regs.CR[6].eq ) { return 0x82202288;  }
		/* 82202270h case    8:*/		return 0x82202274;
		  /* 82202274h */ case    9:  		/* mr R4, R30 */
		/* 82202274h case    9:*/		regs.R4 = regs.R30;
		/* 82202274h case    9:*/		return 0x82202278;
		  /* 82202278h */ case   10:  		/* lwz R5, <#[R30 + 12]> */
		/* 82202278h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 82202278h case   10:*/		return 0x8220227C;
		  /* 8220227Ch */ case   11:  		/* mr R3, R31 */
		/* 8220227Ch case   11:*/		regs.R3 = regs.R31;
		/* 8220227Ch case   11:*/		return 0x82202280;
		  /* 82202280h */ case   12:  		/* bl -594320 */
		/* 82202280h case   12:*/		regs.LR = 0x82202284; return 0x821710F0;
		/* 82202280h case   12:*/		return 0x82202284;
		  /* 82202284h */ case   13:  		/* mr R30, R3 */
		/* 82202284h case   13:*/		regs.R30 = regs.R3;
		/* 82202284h case   13:*/		return 0x82202288;
	}
	return 0x82202288;
} // Block from 82202250h-82202288h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82202288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202288);
		  /* 82202288h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82202288h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82202288h case    0:*/		return 0x8220228C;
		  /* 8220228Ch */ case    1:  		/* mr R5, R30 */
		/* 8220228Ch case    1:*/		regs.R5 = regs.R30;
		/* 8220228Ch case    1:*/		return 0x82202290;
		  /* 82202290h */ case    2:  		/* mr R4, R27 */
		/* 82202290h case    2:*/		regs.R4 = regs.R27;
		/* 82202290h case    2:*/		return 0x82202294;
		  /* 82202294h */ case    3:  		/* rlwimi R11, R28, 25, 4, 6 */
		/* 82202294h case    3:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R28);
		/* 82202294h case    3:*/		return 0x82202298;
		  /* 82202298h */ case    4:  		/* mr R3, R31 */
		/* 82202298h case    4:*/		regs.R3 = regs.R31;
		/* 82202298h case    4:*/		return 0x8220229C;
		  /* 8220229Ch */ case    5:  		/* stw R11, <#[R30]> */
		/* 8220229Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220229Ch case    5:*/		return 0x822022A0;
		  /* 822022A0h */ case    6:  		/* bl -82024 */
		/* 822022A0h case    6:*/		regs.LR = 0x822022A4; return 0x821EE238;
		/* 822022A0h case    6:*/		return 0x822022A4;
		  /* 822022A4h */ case    7:  		/* mr R5, R3 */
		/* 822022A4h case    7:*/		regs.R5 = regs.R3;
		/* 822022A4h case    7:*/		return 0x822022A8;
		  /* 822022A8h */ case    8:  		/* mr R4, R28 */
		/* 822022A8h case    8:*/		regs.R4 = regs.R28;
		/* 822022A8h case    8:*/		return 0x822022AC;
		  /* 822022ACh */ case    9:  		/* addi R3, R1, 864 */
		/* 822022ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x360);
		/* 822022ACh case    9:*/		return 0x822022B0;
		  /* 822022B0h */ case   10:  		/* bl -66456 */
		/* 822022B0h case   10:*/		regs.LR = 0x822022B4; return 0x821F1F18;
		/* 822022B0h case   10:*/		return 0x822022B4;
		  /* 822022B4h */ case   11:  		/* mr R4, R28 */
		/* 822022B4h case   11:*/		regs.R4 = regs.R28;
		/* 822022B4h case   11:*/		return 0x822022B8;
		  /* 822022B8h */ case   12:  		/* addi R3, R1, 1576 */
		/* 822022B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x628);
		/* 822022B8h case   12:*/		return 0x822022BC;
		  /* 822022BCh */ case   13:  		/* subf R29, R28, R29 */
		/* 822022BCh case   13:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R28,regs.R29);
		/* 822022BCh case   13:*/		return 0x822022C0;
		  /* 822022C0h */ case   14:  		/* bl -83144 */
		/* 822022C0h case   14:*/		regs.LR = 0x822022C4; return 0x821EDDF8;
		/* 822022C0h case   14:*/		return 0x822022C4;
		  /* 822022C4h */ case   15:  		/* b -140 */
		/* 822022C4h case   15:*/		return 0x82202238;
		/* 822022C4h case   15:*/		return 0x822022C8;
	}
	return 0x822022C8;
} // Block from 82202288h-822022C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822022C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822022C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822022C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822022C8);
		  /* 822022C8h */ case    0:  		/* addi R11, R1, 664 */
		/* 822022C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x298);
		/* 822022C8h case    0:*/		return 0x822022CC;
		  /* 822022CCh */ case    1:  		/* cmplw CR6, R26, R11 */
		/* 822022CCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 822022CCh case    1:*/		return 0x822022D0;
		  /* 822022D0h */ case    2:  		/* bc 12, CR6_EQ, -24496 */
		/* 822022D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822022D0h case    2:*/		return 0x822022D4;
		  /* 822022D4h */ case    3:  		/* mr R4, R24 */
		/* 822022D4h case    3:*/		regs.R4 = regs.R24;
		/* 822022D4h case    3:*/		return 0x822022D8;
		  /* 822022D8h */ case    4:  		/* addi R3, R1, 2816 */
		/* 822022D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB00);
		/* 822022D8h case    4:*/		return 0x822022DC;
		  /* 822022DCh */ case    5:  		/* bl -56460 */
		/* 822022DCh case    5:*/		regs.LR = 0x822022E0; return 0x821F4650;
		/* 822022DCh case    5:*/		return 0x822022E0;
		  /* 822022E0h */ case    6:  		/* b -24512 */
		/* 822022E0h case    6:*/		return 0x821FC320;
		/* 822022E0h case    6:*/		return 0x822022E4;
		  /* 822022E4h */ case    7:  		/* lwz R11, <#[R14 + 36]> */
		/* 822022E4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 822022E4h case    7:*/		return 0x822022E8;
		  /* 822022E8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 822022E8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822022E8h case    8:*/		return 0x822022EC;
		  /* 822022ECh */ case    9:  		/* bc 12, CR6_EQ, 9440 */
		/* 822022ECh case    9:*/		if ( regs.CR[6].eq ) { return 0x822047CC;  }
		/* 822022ECh case    9:*/		return 0x822022F0;
		  /* 822022F0h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 822022F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822022F0h case   10:*/		return 0x822022F4;
		  /* 822022F4h */ case   11:  		/* cmpwi CR6, R10, 1 */
		/* 822022F4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 822022F4h case   11:*/		return 0x822022F8;
		  /* 822022F8h */ case   12:  		/* bc 4, CR6_EQ, 9428 */
		/* 822022F8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x822047CC;  }
		/* 822022F8h case   12:*/		return 0x822022FC;
		  /* 822022FCh */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 822022FCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 822022FCh case   13:*/		return 0x82202300;
		  /* 82202300h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82202300h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82202300h case   14:*/		return 0x82202304;
		  /* 82202304h */ case   15:  		/* bc 12, CR6_EQ, 9404 */
		/* 82202304h case   15:*/		if ( regs.CR[6].eq ) { return 0x822047C0;  }
		/* 82202304h case   15:*/		return 0x82202308;
		  /* 82202308h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 82202308h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82202308h case   16:*/		return 0x8220230C;
		  /* 8220230Ch */ case   17:  		/* cmpwi CR6, R10, 1 */
		/* 8220230Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8220230Ch case   17:*/		return 0x82202310;
		  /* 82202310h */ case   18:  		/* bc 4, CR6_EQ, 9392 */
		/* 82202310h case   18:*/		if ( !regs.CR[6].eq ) { return 0x822047C0;  }
		/* 82202310h case   18:*/		return 0x82202314;
		  /* 82202314h */ case   19:  		/* lwz R10, <#[R11 + 12]> */
		/* 82202314h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82202314h case   19:*/		return 0x82202318;
		  /* 82202318h */ case   20:  		/* lwz R4, <#[R11 + 8]> */
		/* 82202318h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 82202318h case   20:*/		return 0x8220231C;
		  /* 8220231Ch */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 8220231Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220231Ch case   21:*/		return 0x82202320;
		  /* 82202320h */ case   22:  		/* bc 12, CR6_EQ, 9364 */
		/* 82202320h case   22:*/		if ( regs.CR[6].eq ) { return 0x822047B4;  }
		/* 82202320h case   22:*/		return 0x82202324;
		  /* 82202324h */ case   23:  		/* lwz R11, <#[R10 + 4]> */
		/* 82202324h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82202324h case   23:*/		return 0x82202328;
		  /* 82202328h */ case   24:  		/* cmpwi CR6, R11, 1 */
		/* 82202328h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82202328h case   24:*/		return 0x8220232C;
		  /* 8220232Ch */ case   25:  		/* bc 4, CR6_EQ, 9352 */
		/* 8220232Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x822047B4;  }
		/* 8220232Ch case   25:*/		return 0x82202330;
		  /* 82202330h */ case   26:  		/* lwz R11, <#[R4 + 4]> */
		/* 82202330h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82202330h case   26:*/		return 0x82202334;
		  /* 82202334h */ case   27:  		/* lwz R30, <#[R10 + 8]> */
		/* 82202334h case   27:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000008) );
		/* 82202334h case   27:*/		return 0x82202338;
		  /* 82202338h */ case   28:  		/* cmpwi CR6, R11, 1 */
		/* 82202338h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82202338h case   28:*/		return 0x8220233C;
		  /* 8220233Ch */ case   29:  		/* bc 4, CR6_EQ, 48 */
		/* 8220233Ch case   29:*/		if ( !regs.CR[6].eq ) { return 0x8220236C;  }
		/* 8220233Ch case   29:*/		return 0x82202340;
		  /* 82202340h */ case   30:  		/* lwz R11, <#[R4 + 12]> */
		/* 82202340h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82202340h case   30:*/		return 0x82202344;
		  /* 82202344h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 82202344h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82202344h case   31:*/		return 0x82202348;
		  /* 82202348h */ case   32:  		/* bc 12, CR6_EQ, 12 */
		/* 82202348h case   32:*/		if ( regs.CR[6].eq ) { return 0x82202354;  }
		/* 82202348h case   32:*/		return 0x8220234C;
		  /* 8220234Ch */ case   33:  		/* li R3, 0 */
		/* 8220234Ch case   33:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220234Ch case   33:*/		return 0x82202350;
		  /* 82202350h */ case   34:  		/* b 44 */
		/* 82202350h case   34:*/		return 0x8220237C;
		/* 82202350h case   34:*/		return 0x82202354;
	}
	return 0x82202354;
} // Block from 822022C8h-82202354h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82202354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202354);
		  /* 82202354h */ case    0:  		/* addi R6, R1, 120 */
		/* 82202354h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 82202354h case    0:*/		return 0x82202358;
		  /* 82202358h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82202358h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82202358h case    1:*/		return 0x8220235C;
		  /* 8220235Ch */ case    2:  		/* addi R5, R1, 124 */
		/* 8220235Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 8220235Ch case    2:*/		return 0x82202360;
		  /* 82202360h */ case    3:  		/* mr R3, R31 */
		/* 82202360h case    3:*/		regs.R3 = regs.R31;
		/* 82202360h case    3:*/		return 0x82202364;
		  /* 82202364h */ case    4:  		/* bl -91148 */
		/* 82202364h case    4:*/		regs.LR = 0x82202368; return 0x821EBF58;
		/* 82202364h case    4:*/		return 0x82202368;
		  /* 82202368h */ case    5:  		/* b 20 */
		/* 82202368h case    5:*/		return 0x8220237C;
		/* 82202368h case    5:*/		return 0x8220236C;
	}
	return 0x8220236C;
} // Block from 82202354h-8220236Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220236Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220236C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220236C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220236C);
		  /* 8220236Ch */ case    0:  		/* addi R6, R1, 120 */
		/* 8220236Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 8220236Ch case    0:*/		return 0x82202370;
		  /* 82202370h */ case    1:  		/* addi R5, R1, 124 */
		/* 82202370h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 82202370h case    1:*/		return 0x82202374;
		  /* 82202374h */ case    2:  		/* mr R3, R31 */
		/* 82202374h case    2:*/		regs.R3 = regs.R31;
		/* 82202374h case    2:*/		return 0x82202378;
		  /* 82202378h */ case    3:  		/* bl -91296 */
		/* 82202378h case    3:*/		regs.LR = 0x8220237C; return 0x821EBED8;
		/* 82202378h case    3:*/		return 0x8220237C;
	}
	return 0x8220237C;
} // Block from 8220236Ch-8220237Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220237Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220237C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220237C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220237C);
		  /* 8220237Ch */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8220237Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220237Ch case    0:*/		return 0x82202380;
		  /* 82202380h */ case    1:  		/* bc 12, CR0_EQ, 9220 */
		/* 82202380h case    1:*/		if ( regs.CR[0].eq ) { return 0x82204784;  }
		/* 82202380h case    1:*/		return 0x82202384;
		  /* 82202384h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 82202384h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82202384h case    2:*/		return 0x82202388;
		  /* 82202388h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 82202388h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82202388h case    3:*/		return 0x8220238C;
		  /* 8220238Ch */ case    4:  		/* bc 4, CR6_EQ, 48 */
		/* 8220238Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x822023BC;  }
		/* 8220238Ch case    4:*/		return 0x82202390;
		  /* 82202390h */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 82202390h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82202390h case    5:*/		return 0x82202394;
		  /* 82202394h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82202394h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82202394h case    6:*/		return 0x82202398;
		  /* 82202398h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82202398h case    7:*/		if ( regs.CR[6].eq ) { return 0x822023A4;  }
		/* 82202398h case    7:*/		return 0x8220239C;
		  /* 8220239Ch */ case    8:  		/* li R3, 0 */
		/* 8220239Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220239Ch case    8:*/		return 0x822023A0;
		  /* 822023A0h */ case    9:  		/* b 48 */
		/* 822023A0h case    9:*/		return 0x822023D0;
		/* 822023A0h case    9:*/		return 0x822023A4;
	}
	return 0x822023A4;
} // Block from 8220237Ch-822023A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822023A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822023A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822023A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822023A4);
		  /* 822023A4h */ case    0:  		/* addi R6, R1, 112 */
		/* 822023A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 822023A4h case    0:*/		return 0x822023A8;
		  /* 822023A8h */ case    1:  		/* lwz R4, <#[R30 + 8]> */
		/* 822023A8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 822023A8h case    1:*/		return 0x822023AC;
		  /* 822023ACh */ case    2:  		/* addi R5, R1, 116 */
		/* 822023ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 822023ACh case    2:*/		return 0x822023B0;
		  /* 822023B0h */ case    3:  		/* mr R3, R31 */
		/* 822023B0h case    3:*/		regs.R3 = regs.R31;
		/* 822023B0h case    3:*/		return 0x822023B4;
		  /* 822023B4h */ case    4:  		/* bl -91228 */
		/* 822023B4h case    4:*/		regs.LR = 0x822023B8; return 0x821EBF58;
		/* 822023B4h case    4:*/		return 0x822023B8;
		  /* 822023B8h */ case    5:  		/* b 24 */
		/* 822023B8h case    5:*/		return 0x822023D0;
		/* 822023B8h case    5:*/		return 0x822023BC;
	}
	return 0x822023BC;
} // Block from 822023A4h-822023BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 822023BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822023BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822023BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822023BC);
		  /* 822023BCh */ case    0:  		/* addi R6, R1, 112 */
		/* 822023BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 822023BCh case    0:*/		return 0x822023C0;
		  /* 822023C0h */ case    1:  		/* addi R5, R1, 116 */
		/* 822023C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 822023C0h case    1:*/		return 0x822023C4;
		  /* 822023C4h */ case    2:  		/* mr R4, R30 */
		/* 822023C4h case    2:*/		regs.R4 = regs.R30;
		/* 822023C4h case    2:*/		return 0x822023C8;
		  /* 822023C8h */ case    3:  		/* mr R3, R31 */
		/* 822023C8h case    3:*/		regs.R3 = regs.R31;
		/* 822023C8h case    3:*/		return 0x822023CC;
		  /* 822023CCh */ case    4:  		/* bl -91380 */
		/* 822023CCh case    4:*/		regs.LR = 0x822023D0; return 0x821EBED8;
		/* 822023CCh case    4:*/		return 0x822023D0;
	}
	return 0x822023D0;
} // Block from 822023BCh-822023D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822023D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822023D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822023D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822023D0);
		  /* 822023D0h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822023D0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822023D0h case    0:*/		return 0x822023D4;
		  /* 822023D4h */ case    1:  		/* bc 12, CR0_EQ, 9148 */
		/* 822023D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82204790;  }
		/* 822023D4h case    1:*/		return 0x822023D8;
		  /* 822023D8h */ case    2:  		/* cmpwi CR6, R25, 53 */
		/* 822023D8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000035);
		/* 822023D8h case    2:*/		return 0x822023DC;
		  /* 822023DCh */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 822023DCh case    3:*/		if ( regs.CR[6].eq ) { return 0x822023E8;  }
		/* 822023DCh case    3:*/		return 0x822023E0;
		  /* 822023E0h */ case    4:  		/* cmpwi CR6, R25, 50 */
		/* 822023E0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000032);
		/* 822023E0h case    4:*/		return 0x822023E4;
		  /* 822023E4h */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 822023E4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x822023FC;  }
		/* 822023E4h case    5:*/		return 0x822023E8;
	}
	return 0x822023E8;
} // Block from 822023D0h-822023E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822023E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822023E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822023E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822023E8);
		  /* 822023E8h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 822023E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 822023E8h case    0:*/		return 0x822023EC;
		  /* 822023ECh */ case    1:  		/* lwz R9, <#[R1 + 112]> */
		/* 822023ECh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 822023ECh case    1:*/		return 0x822023F0;
		  /* 822023F0h */ case    2:  		/* stw R11, <#[R1 + 112]> */
		/* 822023F0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 822023F0h case    2:*/		return 0x822023F4;
		  /* 822023F4h */ case    3:  		/* stw R9, <#[R1 + 116]> */
		/* 822023F4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 822023F4h case    3:*/		return 0x822023F8;
		  /* 822023F8h */ case    4:  		/* b 12 */
		/* 822023F8h case    4:*/		return 0x82202404;
		/* 822023F8h case    4:*/		return 0x822023FC;
	}
	return 0x822023FC;
} // Block from 822023E8h-822023FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822023FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822023FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822023FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822023FC);
		  /* 822023FCh */ case    0:  		/* lwz R11, <#[R1 + 112]> */
		/* 822023FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 822023FCh case    0:*/		return 0x82202400;
		  /* 82202400h */ case    1:  		/* lwz R9, <#[R1 + 116]> */
		/* 82202400h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 82202400h case    1:*/		return 0x82202404;
	}
	return 0x82202404;
} // Block from 822023FCh-82202404h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82202404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202404);
		  /* 82202404h */ case    0:  		/* lwz R8, <#[R1 + 120]> */
		/* 82202404h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 82202404h case    0:*/		return 0x82202408;
		  /* 82202408h */ case    1:  		/* cmplw CR6, R8, R9 */
		/* 82202408h case    1:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82202408h case    1:*/		return 0x8220240C;
		  /* 8220240Ch */ case    2:  		/* bc 4, CR6_EQ, 9104 */
		/* 8220240Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220479C;  }
		/* 8220240Ch case    2:*/		return 0x82202410;
		  /* 82202410h */ case    3:  		/* lwz R10, <#[R1 + 124]> */
		/* 82202410h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 82202410h case    3:*/		return 0x82202414;
		  /* 82202414h */ case    4:  		/* mullw R7, R11, R10 */
		/* 82202414h case    4:*/		cpu::op::mullw<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 82202414h case    4:*/		return 0x82202418;
		  /* 82202418h */ case    5:  		/* cmplw CR6, R29, R7 */
		/* 82202418h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R7);
		/* 82202418h case    5:*/		return 0x8220241C;
		  /* 8220241Ch */ case    6:  		/* bc 4, CR6_EQ, 9100 */
		/* 8220241Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x822047A8;  }
		/* 8220241Ch case    6:*/		return 0x82202420;
		  /* 82202420h */ case    7:  		/* mullw R30, R10, R8 */
		/* 82202420h case    7:*/		cpu::op::mullw<0>(regs,&regs.R30,regs.R10,regs.R8);
		/* 82202420h case    7:*/		return 0x82202424;
		  /* 82202424h */ case    8:  		/* mullw R26, R9, R11 */
		/* 82202424h case    8:*/		cpu::op::mullw<0>(regs,&regs.R26,regs.R9,regs.R11);
		/* 82202424h case    8:*/		return 0x82202428;
		  /* 82202428h */ case    9:  		/* cmplwi CR6, R30, 1 */
		/* 82202428h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82202428h case    9:*/		return 0x8220242C;
		  /* 8220242Ch */ case   10:  		/* bc 4, CR6_EQ, 64 */
		/* 8220242Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220246C;  }
		/* 8220242Ch case   10:*/		return 0x82202430;
		  /* 82202430h */ case   11:  		/* cmplwi CR6, R26, 1 */
		/* 82202430h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 82202430h case   11:*/		return 0x82202434;
		  /* 82202434h */ case   12:  		/* bc 4, CR6_EQ, 56 */
		/* 82202434h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220246C;  }
		/* 82202434h case   12:*/		return 0x82202438;
		  /* 82202438h */ case   13:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82202438h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202438h case   13:*/		return 0x8220243C;
		  /* 8220243Ch */ case   14:  		/* addi R3, R1, 1520 */
		/* 8220243Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5F0);
		/* 8220243Ch case   14:*/		return 0x82202440;
		  /* 82202440h */ case   15:  		/* mr R4, R30 */
		/* 82202440h case   15:*/		regs.R4 = regs.R30;
		/* 82202440h case   15:*/		return 0x82202444;
		  /* 82202444h */ case   16:  		/* bl -56820 */
		/* 82202444h case   16:*/		regs.LR = 0x82202448; return 0x821F4650;
		/* 82202444h case   16:*/		return 0x82202448;
		  /* 82202448h */ case   17:  		/* mr R4, R30 */
		/* 82202448h case   17:*/		regs.R4 = regs.R30;
		/* 82202448h case   17:*/		return 0x8220244C;
		  /* 8220244Ch */ case   18:  		/* addi R3, R1, 1360 */
		/* 8220244Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x550);
		/* 8220244Ch case   18:*/		return 0x82202450;
		  /* 82202450h */ case   19:  		/* bl -56832 */
		/* 82202450h case   19:*/		regs.LR = 0x82202454; return 0x821F4650;
		/* 82202450h case   19:*/		return 0x82202454;
		  /* 82202454h */ case   20:  		/* addi R5, R1, 1360 */
		/* 82202454h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x550);
		/* 82202454h case   20:*/		return 0x82202458;
		  /* 82202458h */ case   21:  		/* addi R4, R1, 1520 */
		/* 82202458h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5F0);
		/* 82202458h case   21:*/		return 0x8220245C;
		  /* 8220245Ch */ case   22:  		/* mr R3, R31 */
		/* 8220245Ch case   22:*/		regs.R3 = regs.R31;
		/* 8220245Ch case   22:*/		return 0x82202460;
		  /* 82202460h */ case   23:  		/* bl -58208 */
		/* 82202460h case   23:*/		regs.LR = 0x82202464; return 0x821F4100;
		/* 82202460h case   23:*/		return 0x82202464;
		  /* 82202464h */ case   24:  		/* mr R5, R3 */
		/* 82202464h case   24:*/		regs.R5 = regs.R3;
		/* 82202464h case   24:*/		return 0x82202468;
		  /* 82202468h */ case   25:  		/* b -5896 */
		/* 82202468h case   25:*/		return 0x82200D60;
		/* 82202468h case   25:*/		return 0x8220246C;
	}
	return 0x8220246C;
} // Block from 82202404h-8220246Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 8220246Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220246C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220246C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220246C);
		  /* 8220246Ch */ case    0:  		/* lwz R24, <#[R1 + 3500]> */
		/* 8220246Ch case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220246Ch case    0:*/		return 0x82202470;
		  /* 82202470h */ case    1:  		/* add R28, R26, R30 */
		/* 82202470h case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R26,regs.R30);
		/* 82202470h case    1:*/		return 0x82202474;
		  /* 82202474h */ case    2:  		/* addi R3, R1, 1600 */
		/* 82202474h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x640);
		/* 82202474h case    2:*/		return 0x82202478;
		  /* 82202478h */ case    3:  		/* mr R4, R24 */
		/* 82202478h case    3:*/		regs.R4 = regs.R24;
		/* 82202478h case    3:*/		return 0x8220247C;
		  /* 8220247Ch */ case    4:  		/* mr R5, R28 */
		/* 8220247Ch case    4:*/		regs.R5 = regs.R28;
		/* 8220247Ch case    4:*/		return 0x82202480;
		  /* 82202480h */ case    5:  		/* mr R27, R28 */
		/* 82202480h case    5:*/		regs.R27 = regs.R28;
		/* 82202480h case    5:*/		return 0x82202484;
		  /* 82202484h */ case    6:  		/* bl -49524 */
		/* 82202484h case    6:*/		regs.LR = 0x82202488; return 0x821F6310;
		/* 82202484h case    6:*/		return 0x82202488;
		  /* 82202488h */ case    7:  		/* mr R5, R26 */
		/* 82202488h case    7:*/		regs.R5 = regs.R26;
		/* 82202488h case    7:*/		return 0x8220248C;
		  /* 8220248Ch */ case    8:  		/* mr R4, R24 */
		/* 8220248Ch case    8:*/		regs.R4 = regs.R24;
		/* 8220248Ch case    8:*/		return 0x82202490;
		  /* 82202490h */ case    9:  		/* addi R3, R1, 2024 */
		/* 82202490h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7E8);
		/* 82202490h case    9:*/		return 0x82202494;
		  /* 82202494h */ case   10:  		/* bl -49540 */
		/* 82202494h case   10:*/		regs.LR = 0x82202498; return 0x821F6310;
		/* 82202494h case   10:*/		return 0x82202498;
		  /* 82202498h */ case   11:  		/* cmplw CR6, R29, R30 */
		/* 82202498h case   11:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 82202498h case   11:*/		return 0x8220249C;
		  /* 8220249Ch */ case   12:  		/* bc 12, CR6_GT, 40 */
		/* 8220249Ch case   12:*/		if ( regs.CR[6].gt ) { return 0x822024C4;  }
		/* 8220249Ch case   12:*/		return 0x822024A0;
		  /* 822024A0h */ case   13:  		/* mr R6, R30 */
		/* 822024A0h case   13:*/		regs.R6 = regs.R30;
		/* 822024A0h case   13:*/		return 0x822024A4;
		  /* 822024A4h */ case   14:  		/* addi R5, R1, 1600 */
		/* 822024A4h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x640);
		/* 822024A4h case   14:*/		return 0x822024A8;
		  /* 822024A8h */ case   15:  		/* mr R4, R24 */
		/* 822024A8h case   15:*/		regs.R4 = regs.R24;
		/* 822024A8h case   15:*/		return 0x822024AC;
		  /* 822024ACh */ case   16:  		/* mr R3, R31 */
		/* 822024ACh case   16:*/		regs.R3 = regs.R31;
		/* 822024ACh case   16:*/		return 0x822024B0;
		  /* 822024B0h */ case   17:  		/* bl -39656 */
		/* 822024B0h case   17:*/		regs.LR = 0x822024B4; return 0x821F89C8;
		/* 822024B0h case   17:*/		return 0x822024B4;
		  /* 822024B4h */ case   18:  		/* mr R27, R30 */
		/* 822024B4h case   18:*/		regs.R27 = regs.R30;
		/* 822024B4h case   18:*/		return 0x822024B8;
		  /* 822024B8h */ case   19:  		/* mr R26, R28 */
		/* 822024B8h case   19:*/		regs.R26 = regs.R28;
		/* 822024B8h case   19:*/		return 0x822024BC;
		  /* 822024BCh */ case   20:  		/* add R25, R28, R30 */
		/* 822024BCh case   20:*/		cpu::op::add<0>(regs,&regs.R25,regs.R28,regs.R30);
		/* 822024BCh case   20:*/		return 0x822024C0;
		  /* 822024C0h */ case   21:  		/* b 112 */
		/* 822024C0h case   21:*/		return 0x82202530;
		/* 822024C0h case   21:*/		return 0x822024C4;
	}
	return 0x822024C4;
} // Block from 8220246Ch-822024C4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 822024C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822024C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822024C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822024C4);
		  /* 822024C4h */ case    0:  		/* cmplw CR6, R29, R27 */
		/* 822024C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 822024C4h case    0:*/		return 0x822024C8;
		  /* 822024C8h */ case    1:  		/* bc 4, CR6_GT, 60 */
		/* 822024C8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82202504;  }
		/* 822024C8h case    1:*/		return 0x822024CC;
		  /* 822024CCh */ case    2:  		/* subf R28, R27, R29 */
		/* 822024CCh case    2:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R27,regs.R29);
		/* 822024CCh case    2:*/		return 0x822024D0;
		  /* 822024D0h */ case    3:  		/* add R25, R28, R27 */
		/* 822024D0h case    3:*/		cpu::op::add<0>(regs,&regs.R25,regs.R28,regs.R27);
		/* 822024D0h case    3:*/		return 0x822024D4;
		  /* 822024D4h */ case    4:  		/* lwz R11, <#[R1 + 372]> */
		/* 822024D4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000174) );
		/* 822024D4h case    4:*/		return 0x822024D8;
		  /* 822024D8h */ case    5:  		/* mr R3, R24 */
		/* 822024D8h case    5:*/		regs.R3 = regs.R24;
		/* 822024D8h case    5:*/		return 0x822024DC;
		  /* 822024DCh */ case    6:  		/* lwz R10, <#[R1 + 368]> */
		/* 822024DCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000170) );
		/* 822024DCh case    6:*/		return 0x822024E0;
		  /* 822024E0h */ case    7:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 822024E0h case    7:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 822024E0h case    7:*/		return 0x822024E4;
		  /* 822024E4h */ case    8:  		/* ori R10, R10, 1 */
		/* 822024E4h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822024E4h case    8:*/		return 0x822024E8;
		  /* 822024E8h */ case    9:  		/* stw R11, <#[R1 + 372]> */
		/* 822024E8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000174) );
		/* 822024E8h case    9:*/		return 0x822024EC;
		  /* 822024ECh */ case   10:  		/* stw R10, <#[R1 + 368]> */
		/* 822024ECh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000170) );
		/* 822024ECh case   10:*/		return 0x822024F0;
		  /* 822024F0h */ case   11:  		/* ld R4, <#[R1 + 368]> */
		/* 822024F0h case   11:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000170) );
		/* 822024F0h case   11:*/		return 0x822024F4;
		  /* 822024F4h */ case   12:  		/* bl -47100 */
		/* 822024F4h case   12:*/		regs.LR = 0x822024F8; return 0x821F6CF8;
		/* 822024F4h case   12:*/		return 0x822024F8;
		  /* 822024F8h */ case   13:  		/* addic. R28, R28, -1 */
		/* 822024F8h case   13:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 822024F8h case   13:*/		return 0x822024FC;
		  /* 822024FCh */ case   14:  		/* bc 4, CR0_EQ, -40 */
		/* 822024FCh case   14:*/		if ( !regs.CR[0].eq ) { return 0x822024D4;  }
		/* 822024FCh case   14:*/		return 0x82202500;
		  /* 82202500h */ case   15:  		/* b 8 */
		/* 82202500h case   15:*/		return 0x82202508;
		/* 82202500h case   15:*/		return 0x82202504;
	}
	return 0x82202504;
} // Block from 822024C4h-82202504h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82202504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202504);
		  /* 82202504h */ case    0:  		/* rlwinm R25, R27, 1, 0, 30 */
		/* 82202504h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R25,regs.R27);
		/* 82202504h case    0:*/		return 0x82202508;
	}
	return 0x82202508;
} // Block from 82202504h-82202508h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82202508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202508);
		  /* 82202508h */ case    0:  		/* mr R6, R30 */
		/* 82202508h case    0:*/		regs.R6 = regs.R30;
		/* 82202508h case    0:*/		return 0x8220250C;
		  /* 8220250Ch */ case    1:  		/* addi R5, R1, 1600 */
		/* 8220250Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x640);
		/* 8220250Ch case    1:*/		return 0x82202510;
		  /* 82202510h */ case    2:  		/* mr R4, R24 */
		/* 82202510h case    2:*/		regs.R4 = regs.R24;
		/* 82202510h case    2:*/		return 0x82202514;
		  /* 82202514h */ case    3:  		/* mr R3, R31 */
		/* 82202514h case    3:*/		regs.R3 = regs.R31;
		/* 82202514h case    3:*/		return 0x82202518;
		  /* 82202518h */ case    4:  		/* bl -39760 */
		/* 82202518h case    4:*/		regs.LR = 0x8220251C; return 0x821F89C8;
		/* 82202518h case    4:*/		return 0x8220251C;
		  /* 8220251Ch */ case    5:  		/* mr R6, R26 */
		/* 8220251Ch case    5:*/		regs.R6 = regs.R26;
		/* 8220251Ch case    5:*/		return 0x82202520;
		  /* 82202520h */ case    6:  		/* addi R5, R1, 2024 */
		/* 82202520h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7E8);
		/* 82202520h case    6:*/		return 0x82202524;
		  /* 82202524h */ case    7:  		/* mr R4, R24 */
		/* 82202524h case    7:*/		regs.R4 = regs.R24;
		/* 82202524h case    7:*/		return 0x82202528;
		  /* 82202528h */ case    8:  		/* mr R3, R31 */
		/* 82202528h case    8:*/		regs.R3 = regs.R31;
		/* 82202528h case    8:*/		return 0x8220252C;
		  /* 8220252Ch */ case    9:  		/* bl -39780 */
		/* 8220252Ch case    9:*/		regs.LR = 0x82202530; return 0x821F89C8;
		/* 8220252Ch case    9:*/		return 0x82202530;
	}
	return 0x82202530;
} // Block from 82202508h-82202530h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82202530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202530);
		  /* 82202530h */ case    0:  		/* mr R5, R27 */
		/* 82202530h case    0:*/		regs.R5 = regs.R27;
		/* 82202530h case    0:*/		return 0x82202534;
		  /* 82202534h */ case    1:  		/* mr R4, R24 */
		/* 82202534h case    1:*/		regs.R4 = regs.R24;
		/* 82202534h case    1:*/		return 0x82202538;
		  /* 82202538h */ case    2:  		/* addi R3, R1, 2056 */
		/* 82202538h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x808);
		/* 82202538h case    2:*/		return 0x8220253C;
		  /* 8220253Ch */ case    3:  		/* bl -49708 */
		/* 8220253Ch case    3:*/		regs.LR = 0x82202540; return 0x821F6310;
		/* 8220253Ch case    3:*/		return 0x82202540;
		  /* 82202540h */ case    4:  		/* addi R11, R1, 2056 */
		/* 82202540h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x808);
		/* 82202540h case    4:*/		return 0x82202544;
		  /* 82202544h */ case    5:  		/* lwz R10, <#[R1 + 120]> */
		/* 82202544h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 82202544h case    5:*/		return 0x82202548;
		  /* 82202548h */ case    6:  		/* mr R5, R26 */
		/* 82202548h case    6:*/		regs.R5 = regs.R26;
		/* 82202548h case    6:*/		return 0x8220254C;
		  /* 8220254Ch */ case    7:  		/* stw R11, <#[R1 + 672]> */
		/* 8220254Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002A0) );
		/* 8220254Ch case    7:*/		return 0x82202550;
		  /* 82202550h */ case    8:  		/* mr R4, R24 */
		/* 82202550h case    8:*/		regs.R4 = regs.R24;
		/* 82202550h case    8:*/		return 0x82202554;
		  /* 82202554h */ case    9:  		/* addi R3, R1, 2088 */
		/* 82202554h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x828);
		/* 82202554h case    9:*/		return 0x82202558;
		  /* 82202558h */ case   10:  		/* stw R10, <#[R1 + 680]> */
		/* 82202558h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000002A8) );
		/* 82202558h case   10:*/		return 0x8220255C;
		  /* 8220255Ch */ case   11:  		/* lwz R11, <#[R1 + 124]> */
		/* 8220255Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8220255Ch case   11:*/		return 0x82202560;
		  /* 82202560h */ case   12:  		/* stw R11, <#[R1 + 676]> */
		/* 82202560h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002A4) );
		/* 82202560h case   12:*/		return 0x82202564;
		  /* 82202564h */ case   13:  		/* bl -49748 */
		/* 82202564h case   13:*/		regs.LR = 0x82202568; return 0x821F6310;
		/* 82202564h case   13:*/		return 0x82202568;
		  /* 82202568h */ case   14:  		/* addi R11, R1, 2088 */
		/* 82202568h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x828);
		/* 82202568h case   14:*/		return 0x8220256C;
		  /* 8220256Ch */ case   15:  		/* lwz R10, <#[R1 + 112]> */
		/* 8220256Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8220256Ch case   15:*/		return 0x82202570;
		  /* 82202570h */ case   16:  		/* mr R5, R25 */
		/* 82202570h case   16:*/		regs.R5 = regs.R25;
		/* 82202570h case   16:*/		return 0x82202574;
		  /* 82202574h */ case   17:  		/* stw R11, <#[R1 + 896]> */
		/* 82202574h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000380) );
		/* 82202574h case   17:*/		return 0x82202578;
		  /* 82202578h */ case   18:  		/* mr R4, R24 */
		/* 82202578h case   18:*/		regs.R4 = regs.R24;
		/* 82202578h case   18:*/		return 0x8220257C;
		  /* 8220257Ch */ case   19:  		/* addi R3, R1, 2120 */
		/* 8220257Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x848);
		/* 8220257Ch case   19:*/		return 0x82202580;
		  /* 82202580h */ case   20:  		/* stw R10, <#[R1 + 904]> */
		/* 82202580h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000388) );
		/* 82202580h case   20:*/		return 0x82202584;
		  /* 82202584h */ case   21:  		/* lwz R11, <#[R1 + 116]> */
		/* 82202584h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82202584h case   21:*/		return 0x82202588;
		  /* 82202588h */ case   22:  		/* stw R11, <#[R1 + 900]> */
		/* 82202588h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000384) );
		/* 82202588h case   22:*/		return 0x8220258C;
		  /* 8220258Ch */ case   23:  		/* bl -49788 */
		/* 8220258Ch case   23:*/		regs.LR = 0x82202590; return 0x821F6310;
		/* 8220258Ch case   23:*/		return 0x82202590;
		  /* 82202590h */ case   24:  		/* lwz R11, <#[R1 + 124]> */
		/* 82202590h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 82202590h case   24:*/		return 0x82202594;
		  /* 82202594h */ case   25:  		/* li R26, 0 */
		/* 82202594h case   25:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82202594h case   25:*/		return 0x82202598;
		  /* 82202598h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 82202598h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82202598h case   26:*/		return 0x8220259C;
		  /* 8220259Ch */ case   27:  		/* bc 12, CR6_EQ, 192 */
		/* 8220259Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x8220265C;  }
		/* 8220259Ch case   27:*/		return 0x822025A0;
		  /* 822025A0h */ case   28:  		/* lwz R11, <#[R1 + 112]> */
		/* 822025A0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 822025A0h case   28:*/		return 0x822025A4;
		  /* 822025A4h */ case   29:  		/* li R27, 0 */
		/* 822025A4h case   29:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 822025A4h case   29:*/		return 0x822025A8;
		  /* 822025A8h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 822025A8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822025A8h case   30:*/		return 0x822025AC;
		  /* 822025ACh */ case   31:  		/* bc 12, CR6_EQ, 160 */
		/* 822025ACh case   31:*/		if ( regs.CR[6].eq ) { return 0x8220264C;  }
		/* 822025ACh case   31:*/		return 0x822025B0;
		  /* 822025B0h */ case   32:  		/* lwz R11, <#[R1 + 120]> */
		/* 822025B0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 822025B0h case   32:*/		return 0x822025B4;
		  /* 822025B4h */ case   33:  		/* li R30, 0 */
		/* 822025B4h case   33:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 822025B4h case   33:*/		return 0x822025B8;
		  /* 822025B8h */ case   34:  		/* li R28, 0 */
		/* 822025B8h case   34:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 822025B8h case   34:*/		return 0x822025BC;
		  /* 822025BCh */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 822025BCh case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822025BCh case   35:*/		return 0x822025C0;
		  /* 822025C0h */ case   36:  		/* bc 12, CR6_EQ, 108 */
		/* 822025C0h case   36:*/		if ( regs.CR[6].eq ) { return 0x8220262C;  }
		/* 822025C0h case   36:*/		return 0x822025C4;
		  /* 822025C4h */ case   37:  		/* mr R5, R28 */
		/* 822025C4h case   37:*/		regs.R5 = regs.R28;
		/* 822025C4h case   37:*/		return 0x822025C8;
		  /* 822025C8h */ case   38:  		/* mr R4, R26 */
		/* 822025C8h case   38:*/		regs.R4 = regs.R26;
		/* 822025C8h case   38:*/		return 0x822025CC;
		  /* 822025CCh */ case   39:  		/* addi R3, R1, 672 */
		/* 822025CCh case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2A0);
		/* 822025CCh case   39:*/		return 0x822025D0;
		  /* 822025D0h */ case   40:  		/* bl -64488 */
		/* 822025D0h case   40:*/		regs.LR = 0x822025D4; return 0x821F29E8;
		/* 822025D0h case   40:*/		return 0x822025D4;
		  /* 822025D4h */ case   41:  		/* mr R23, R3 */
		/* 822025D4h case   41:*/		regs.R23 = regs.R3;
		/* 822025D4h case   41:*/		return 0x822025D8;
		  /* 822025D8h */ case   42:  		/* mr R5, R27 */
		/* 822025D8h case   42:*/		regs.R5 = regs.R27;
		/* 822025D8h case   42:*/		return 0x822025DC;
		  /* 822025DCh */ case   43:  		/* mr R4, R28 */
		/* 822025DCh case   43:*/		regs.R4 = regs.R28;
		/* 822025DCh case   43:*/		return 0x822025E0;
		  /* 822025E0h */ case   44:  		/* addi R3, R1, 896 */
		/* 822025E0h case   44:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x380);
		/* 822025E0h case   44:*/		return 0x822025E4;
		  /* 822025E4h */ case   45:  		/* bl -64508 */
		/* 822025E4h case   45:*/		regs.LR = 0x822025E8; return 0x821F29E8;
		/* 822025E4h case   45:*/		return 0x822025E8;
		  /* 822025E8h */ case   46:  		/* mr R5, R3 */
		/* 822025E8h case   46:*/		regs.R5 = regs.R3;
		/* 822025E8h case   46:*/		return 0x822025EC;
		  /* 822025ECh */ case   47:  		/* mr R4, R23 */
		/* 822025ECh case   47:*/		regs.R4 = regs.R23;
		/* 822025ECh case   47:*/		return 0x822025F0;
		  /* 822025F0h */ case   48:  		/* mr R3, R31 */
		/* 822025F0h case   48:*/		regs.R3 = regs.R31;
		/* 822025F0h case   48:*/		return 0x822025F4;
		  /* 822025F4h */ case   49:  		/* bl -58612 */
		/* 822025F4h case   49:*/		regs.LR = 0x822025F8; return 0x821F4100;
		/* 822025F4h case   49:*/		return 0x822025F8;
		  /* 822025F8h */ case   50:  		/* mr R5, R3 */
		/* 822025F8h case   50:*/		regs.R5 = regs.R3;
		/* 822025F8h case   50:*/		return 0x822025FC;
		  /* 822025FCh */ case   51:  		/* cmplwi CR6, R30, 0 */
		/* 822025FCh case   51:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822025FCh case   51:*/		return 0x82202600;
		  /* 82202600h */ case   52:  		/* bc 12, CR6_EQ, 24 */
		/* 82202600h case   52:*/		if ( regs.CR[6].eq ) { return 0x82202618;  }
		/* 82202600h case   52:*/		return 0x82202604;
		  /* 82202604h */ case   53:  		/* mr R4, R30 */
		/* 82202604h case   53:*/		regs.R4 = regs.R30;
		/* 82202604h case   53:*/		return 0x82202608;
		  /* 82202608h */ case   54:  		/* mr R3, R31 */
		/* 82202608h case   54:*/		regs.R3 = regs.R31;
		/* 82202608h case   54:*/		return 0x8220260C;
		  /* 8220260Ch */ case   55:  		/* bl -74164 */
		/* 8220260Ch case   55:*/		regs.LR = 0x82202610; return 0x821F0458;
		/* 8220260Ch case   55:*/		return 0x82202610;
		  /* 82202610h */ case   56:  		/* mr R30, R3 */
		/* 82202610h case   56:*/		regs.R30 = regs.R3;
		/* 82202610h case   56:*/		return 0x82202614;
		  /* 82202614h */ case   57:  		/* b 8 */
		/* 82202614h case   57:*/		return 0x8220261C;
		/* 82202614h case   57:*/		return 0x82202618;
	}
	return 0x82202618;
} // Block from 82202530h-82202618h (58 instructions)

//////////////////////////////////////////////////////
// Block at 82202618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202618);
		  /* 82202618h */ case    0:  		/* mr R30, R5 */
		/* 82202618h case    0:*/		regs.R30 = regs.R5;
		/* 82202618h case    0:*/		return 0x8220261C;
	}
	return 0x8220261C;
} // Block from 82202618h-8220261Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220261Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220261C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220261C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220261C);
		  /* 8220261Ch */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 8220261Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8220261Ch case    0:*/		return 0x82202620;
		  /* 82202620h */ case    1:  		/* addi R28, R28, 1 */
		/* 82202620h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82202620h case    1:*/		return 0x82202624;
		  /* 82202624h */ case    2:  		/* cmplw CR6, R28, R11 */
		/* 82202624h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82202624h case    2:*/		return 0x82202628;
		  /* 82202628h */ case    3:  		/* bc 12, CR6_LT, -100 */
		/* 82202628h case    3:*/		if ( regs.CR[6].lt ) { return 0x822025C4;  }
		/* 82202628h case    3:*/		return 0x8220262C;
	}
	return 0x8220262C;
} // Block from 8220261Ch-8220262Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220262Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220262C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220262C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220262C);
		  /* 8220262Ch */ case    0:  		/* li R5, 0 */
		/* 8220262Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220262Ch case    0:*/		return 0x82202630;
		  /* 82202630h */ case    1:  		/* mr R4, R30 */
		/* 82202630h case    1:*/		regs.R4 = regs.R30;
		/* 82202630h case    1:*/		return 0x82202634;
		  /* 82202634h */ case    2:  		/* addi R3, R1, 2120 */
		/* 82202634h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x848);
		/* 82202634h case    2:*/		return 0x82202638;
		  /* 82202638h */ case    3:  		/* bl -67520 */
		/* 82202638h case    3:*/		regs.LR = 0x8220263C; return 0x821F1E78;
		/* 82202638h case    3:*/		return 0x8220263C;
		  /* 8220263Ch */ case    4:  		/* lwz R11, <#[R1 + 112]> */
		/* 8220263Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8220263Ch case    4:*/		return 0x82202640;
		  /* 82202640h */ case    5:  		/* addi R27, R27, 1 */
		/* 82202640h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82202640h case    5:*/		return 0x82202644;
		  /* 82202644h */ case    6:  		/* cmplw CR6, R27, R11 */
		/* 82202644h case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 82202644h case    6:*/		return 0x82202648;
		  /* 82202648h */ case    7:  		/* bc 12, CR6_LT, -152 */
		/* 82202648h case    7:*/		if ( regs.CR[6].lt ) { return 0x822025B0;  }
		/* 82202648h case    7:*/		return 0x8220264C;
	}
	return 0x8220264C;
} // Block from 8220262Ch-8220264Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220264Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220264C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220264C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220264C);
		  /* 8220264Ch */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 8220264Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8220264Ch case    0:*/		return 0x82202650;
		  /* 82202650h */ case    1:  		/* addi R26, R26, 1 */
		/* 82202650h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82202650h case    1:*/		return 0x82202654;
		  /* 82202654h */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 82202654h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82202654h case    2:*/		return 0x82202658;
		  /* 82202658h */ case    3:  		/* bc 12, CR6_LT, -184 */
		/* 82202658h case    3:*/		if ( regs.CR[6].lt ) { return 0x822025A0;  }
		/* 82202658h case    3:*/		return 0x8220265C;
	}
	return 0x8220265C;
} // Block from 8220264Ch-8220265Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220265Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220265C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220265C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220265C);
		  /* 8220265Ch */ case    0:  		/* subf. R5, R29, R25 */
		/* 8220265Ch case    0:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R29,regs.R25);
		/* 8220265Ch case    0:*/		return 0x82202660;
		  /* 82202660h */ case    1:  		/* bc 12, CR0_EQ, -25408 */
		/* 82202660h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 82202660h case    1:*/		return 0x82202664;
		  /* 82202664h */ case    2:  		/* mr R4, R24 */
		/* 82202664h case    2:*/		regs.R4 = regs.R24;
		/* 82202664h case    2:*/		return 0x82202668;
		  /* 82202668h */ case    3:  		/* addi R3, R1, 2832 */
		/* 82202668h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB10);
		/* 82202668h case    3:*/		return 0x8220266C;
		  /* 8220266Ch */ case    4:  		/* b -19680 */
		/* 8220266Ch case    4:*/		return 0x821FD98C;
		/* 8220266Ch case    4:*/		return 0x82202670;
		  /* 82202670h */ case    5:  		/* cmplwi CR6, R29, 1 */
		/* 82202670h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 82202670h case    5:*/		return 0x82202674;
		  /* 82202674h */ case    6:  		/* bc 12, CR6_EQ, 1832 */
		/* 82202674h case    6:*/		if ( regs.CR[6].eq ) { return 0x82202D9C;  }
		/* 82202674h case    6:*/		return 0x82202678;
		  /* 82202678h */ case    7:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82202678h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202678h case    7:*/		return 0x8220267C;
		  /* 8220267Ch */ case    8:  		/* mr R5, R29 */
		/* 8220267Ch case    8:*/		regs.R5 = regs.R29;
		/* 8220267Ch case    8:*/		return 0x82202680;
		  /* 82202680h */ case    9:  		/* mr R3, R31 */
		/* 82202680h case    9:*/		regs.R3 = regs.R31;
		/* 82202680h case    9:*/		return 0x82202684;
		  /* 82202684h */ case   10:  		/* mr R4, R30 */
		/* 82202684h case   10:*/		regs.R4 = regs.R30;
		/* 82202684h case   10:*/		return 0x82202688;
		  /* 82202688h */ case   11:  		/* bl -48504 */
		/* 82202688h case   11:*/		regs.LR = 0x8220268C; return 0x821F6910;
		/* 82202688h case   11:*/		return 0x8220268C;
		  /* 8220268Ch */ case   12:  		/* mr R4, R3 */
		/* 8220268Ch case   12:*/		regs.R4 = regs.R3;
		/* 8220268Ch case   12:*/		return 0x82202690;
		  /* 82202690h */ case   13:  		/* mr R3, R31 */
		/* 82202690h case   13:*/		regs.R3 = regs.R31;
		/* 82202690h case   13:*/		return 0x82202694;
		  /* 82202694h */ case   14:  		/* bl -75716 */
		/* 82202694h case   14:*/		regs.LR = 0x82202698; return 0x821EFED0;
		/* 82202694h case   14:*/		return 0x82202698;
		  /* 82202698h */ case   15:  		/* mr R28, R3 */
		/* 82202698h case   15:*/		regs.R28 = regs.R3;
		/* 82202698h case   15:*/		return 0x8220269C;
		  /* 8220269Ch */ case   16:  		/* mr R5, R29 */
		/* 8220269Ch case   16:*/		regs.R5 = regs.R29;
		/* 8220269Ch case   16:*/		return 0x822026A0;
		  /* 822026A0h */ case   17:  		/* mr R4, R30 */
		/* 822026A0h case   17:*/		regs.R4 = regs.R30;
		/* 822026A0h case   17:*/		return 0x822026A4;
		  /* 822026A4h */ case   18:  		/* addi R3, R1, 928 */
		/* 822026A4h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3A0);
		/* 822026A4h case   18:*/		return 0x822026A8;
		  /* 822026A8h */ case   19:  		/* bl -50072 */
		/* 822026A8h case   19:*/		regs.LR = 0x822026AC; return 0x821F6310;
		/* 822026A8h case   19:*/		return 0x822026AC;
		  /* 822026ACh */ case   20:  		/* cmplwi CR6, R29, 0 */
		/* 822026ACh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822026ACh case   20:*/		return 0x822026B0;
		  /* 822026B0h */ case   21:  		/* bc 12, CR6_EQ, -25488 */
		/* 822026B0h case   21:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822026B0h case   21:*/		return 0x822026B4;
		  /* 822026B4h */ case   22:  		/* cmplwi CR6, R29, 4 */
		/* 822026B4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 822026B4h case   22:*/		return 0x822026B8;
		  /* 822026B8h */ case   23:  		/* mr R30, R29 */
		/* 822026B8h case   23:*/		regs.R30 = regs.R29;
		/* 822026B8h case   23:*/		return 0x822026BC;
		  /* 822026BCh */ case   24:  		/* bc 12, CR6_LT, 8 */
		/* 822026BCh case   24:*/		if ( regs.CR[6].lt ) { return 0x822026C4;  }
		/* 822026BCh case   24:*/		return 0x822026C0;
		  /* 822026C0h */ case   25:  		/* li R30, 4 */
		/* 822026C0h case   25:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822026C0h case   25:*/		return 0x822026C4;
	}
	return 0x822026C4;
} // Block from 8220265Ch-822026C4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 822026C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822026C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822026C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822026C4);
		  /* 822026C4h */ case    0:  		/* li R6, 228 */
		/* 822026C4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822026C4h case    0:*/		return 0x822026C8;
		  /* 822026C8h */ case    1:  		/* mr R5, R30 */
		/* 822026C8h case    1:*/		regs.R5 = regs.R30;
		/* 822026C8h case    1:*/		return 0x822026CC;
		  /* 822026CCh */ case    2:  		/* addi R4, R1, 928 */
		/* 822026CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3A0);
		/* 822026CCh case    2:*/		return 0x822026D0;
		  /* 822026D0h */ case    3:  		/* mr R3, R31 */
		/* 822026D0h case    3:*/		regs.R3 = regs.R31;
		/* 822026D0h case    3:*/		return 0x822026D4;
		  /* 822026D4h */ case    4:  		/* bl -65420 */
		/* 822026D4h case    4:*/		regs.LR = 0x822026D8; return 0x821F2748;
		/* 822026D4h case    4:*/		return 0x822026D8;
		  /* 822026D8h */ case    5:  		/* mr R27, R3 */
		/* 822026D8h case    5:*/		regs.R27 = regs.R3;
		/* 822026D8h case    5:*/		return 0x822026DC;
		  /* 822026DCh */ case    6:  		/* mr R4, R28 */
		/* 822026DCh case    6:*/		regs.R4 = regs.R28;
		/* 822026DCh case    6:*/		return 0x822026E0;
		  /* 822026E0h */ case    7:  		/* mr R3, R31 */
		/* 822026E0h case    7:*/		regs.R3 = regs.R31;
		/* 822026E0h case    7:*/		return 0x822026E4;
		  /* 822026E4h */ case    8:  		/* bl -567012 */
		/* 822026E4h case    8:*/		regs.LR = 0x822026E8; return 0x82178000;
		/* 822026E4h case    8:*/		return 0x822026E8;
		  /* 822026E8h */ case    9:  		/* mr R11, R3 */
		/* 822026E8h case    9:*/		regs.R11 = regs.R3;
		/* 822026E8h case    9:*/		return 0x822026EC;
		  /* 822026ECh */ case   10:  		/* mr R4, R27 */
		/* 822026ECh case   10:*/		regs.R4 = regs.R27;
		/* 822026ECh case   10:*/		return 0x822026F0;
		  /* 822026F0h */ case   11:  		/* mr R3, R31 */
		/* 822026F0h case   11:*/		regs.R3 = regs.R31;
		/* 822026F0h case   11:*/		return 0x822026F4;
		  /* 822026F4h */ case   12:  		/* mr R5, R11 */
		/* 822026F4h case   12:*/		regs.R5 = regs.R11;
		/* 822026F4h case   12:*/		return 0x822026F8;
		  /* 822026F8h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 822026F8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822026F8h case   13:*/		return 0x822026FC;
		  /* 822026FCh */ case   14:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 822026FCh case   14:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 822026FCh case   14:*/		return 0x82202700;
		  /* 82202700h */ case   15:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 82202700h case   15:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 82202700h case   15:*/		return 0x82202704;
		  /* 82202704h */ case   16:  		/* stw R10, <#[R11]> */
		/* 82202704h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82202704h case   16:*/		return 0x82202708;
		  /* 82202708h */ case   17:  		/* bl -83152 */
		/* 82202708h case   17:*/		regs.LR = 0x8220270C; return 0x821EE238;
		/* 82202708h case   17:*/		return 0x8220270C;
		  /* 8220270Ch */ case   18:  		/* mr R5, R3 */
		/* 8220270Ch case   18:*/		regs.R5 = regs.R3;
		/* 8220270Ch case   18:*/		return 0x82202710;
		  /* 82202710h */ case   19:  		/* mr R4, R30 */
		/* 82202710h case   19:*/		regs.R4 = regs.R30;
		/* 82202710h case   19:*/		return 0x82202714;
		  /* 82202714h */ case   20:  		/* addi R3, R1, 928 */
		/* 82202714h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3A0);
		/* 82202714h case   20:*/		return 0x82202718;
		  /* 82202718h */ case   21:  		/* bl -67584 */
		/* 82202718h case   21:*/		regs.LR = 0x8220271C; return 0x821F1F18;
		/* 82202718h case   21:*/		return 0x8220271C;
		  /* 8220271Ch */ case   22:  		/* li R4, 0 */
		/* 8220271Ch case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220271Ch case   22:*/		return 0x82202720;
		  /* 82202720h */ case   23:  		/* addi R3, R1, 928 */
		/* 82202720h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3A0);
		/* 82202720h case   23:*/		return 0x82202724;
		  /* 82202724h */ case   24:  		/* subf R29, R30, R29 */
		/* 82202724h case   24:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82202724h case   24:*/		return 0x82202728;
		  /* 82202728h */ case   25:  		/* bl -84272 */
		/* 82202728h case   25:*/		regs.LR = 0x8220272C; return 0x821EDDF8;
		/* 82202728h case   25:*/		return 0x8220272C;
		  /* 8220272Ch */ case   26:  		/* b -128 */
		/* 8220272Ch case   26:*/		return 0x822026AC;
		/* 8220272Ch case   26:*/		return 0x82202730;
		  /* 82202730h */ case   27:  		/* lwz R25, <#[R1 + 3500]> */
		/* 82202730h case   27:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202730h case   27:*/		return 0x82202734;
		  /* 82202734h */ case   28:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 82202734h case   28:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 82202734h case   28:*/		return 0x82202738;
		  /* 82202738h */ case   29:  		/* addi R3, R1, 2152 */
		/* 82202738h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x868);
		/* 82202738h case   29:*/		return 0x8220273C;
		  /* 8220273Ch */ case   30:  		/* mr R4, R25 */
		/* 8220273Ch case   30:*/		regs.R4 = regs.R25;
		/* 8220273Ch case   30:*/		return 0x82202740;
		  /* 82202740h */ case   31:  		/* bl -50224 */
		/* 82202740h case   31:*/		regs.LR = 0x82202744; return 0x821F6310;
		/* 82202740h case   31:*/		return 0x82202744;
		  /* 82202744h */ case   32:  		/* mr R5, R29 */
		/* 82202744h case   32:*/		regs.R5 = regs.R29;
		/* 82202744h case   32:*/		return 0x82202748;
		  /* 82202748h */ case   33:  		/* mr R4, R25 */
		/* 82202748h case   33:*/		regs.R4 = regs.R25;
		/* 82202748h case   33:*/		return 0x8220274C;
		  /* 8220274Ch */ case   34:  		/* addi R3, R1, 2184 */
		/* 8220274Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x888);
		/* 8220274Ch case   34:*/		return 0x82202750;
		  /* 82202750h */ case   35:  		/* bl -50240 */
		/* 82202750h case   35:*/		regs.LR = 0x82202754; return 0x821F6310;
		/* 82202750h case   35:*/		return 0x82202754;
		  /* 82202754h */ case   36:  		/* mr R27, R29 */
		/* 82202754h case   36:*/		regs.R27 = regs.R29;
		/* 82202754h case   36:*/		return 0x82202758;
		  /* 82202758h */ case   37:  		/* li R26, 1 */
		/* 82202758h case   37:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82202758h case   37:*/		return 0x8220275C;
		  /* 8220275Ch */ case   38:  		/* cmplwi CR6, R27, 0 */
		/* 8220275Ch case   38:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220275Ch case   38:*/		return 0x82202760;
		  /* 82202760h */ case   39:  		/* bc 12, CR6_EQ, 212 */
		/* 82202760h case   39:*/		if ( regs.CR[6].eq ) { return 0x82202834;  }
		/* 82202760h case   39:*/		return 0x82202764;
		  /* 82202764h */ case   40:  		/* addi R3, R1, 2152 */
		/* 82202764h case   40:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x868);
		/* 82202764h case   40:*/		return 0x82202768;
		  /* 82202768h */ case   41:  		/* bl -268552 */
		/* 82202768h case   41:*/		regs.LR = 0x8220276C; return 0x821C0E60;
		/* 82202768h case   41:*/		return 0x8220276C;
		  /* 8220276Ch */ case   42:  		/* mr R30, R3 */
		/* 8220276Ch case   42:*/		regs.R30 = regs.R3;
		/* 8220276Ch case   42:*/		return 0x82202770;
		  /* 82202770h */ case   43:  		/* addi R3, R1, 2184 */
		/* 82202770h case   43:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x888);
		/* 82202770h case   43:*/		return 0x82202774;
		  /* 82202774h */ case   44:  		/* bl -268564 */
		/* 82202774h case   44:*/		regs.LR = 0x82202778; return 0x821C0E60;
		/* 82202774h case   44:*/		return 0x82202778;
		  /* 82202778h */ case   45:  		/* mr R28, R3 */
		/* 82202778h case   45:*/		regs.R28 = regs.R3;
		/* 82202778h case   45:*/		return 0x8220277C;
		  /* 8220277Ch */ case   46:  		/* mr R3, R31 */
		/* 8220277Ch case   46:*/		regs.R3 = regs.R31;
		/* 8220277Ch case   46:*/		return 0x82202780;
		  /* 82202780h */ case   47:  		/* mr R4, R28 */
		/* 82202780h case   47:*/		regs.R4 = regs.R28;
		/* 82202780h case   47:*/		return 0x82202784;
		  /* 82202784h */ case   48:  		/* bl -66820 */
		/* 82202784h case   48:*/		regs.LR = 0x82202788; return 0x821F2280;
		/* 82202784h case   48:*/		return 0x82202788;
		  /* 82202788h */ case   49:  		/* lwz R11, <#[R3 + 8]> */
		/* 82202788h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82202788h case   49:*/		return 0x8220278C;
		  /* 8220278Ch */ case   50:  		/* mr R3, R31 */
		/* 8220278Ch case   50:*/		regs.R3 = regs.R31;
		/* 8220278Ch case   50:*/		return 0x82202790;
		  /* 82202790h */ case   51:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82202790h case   51:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82202790h case   51:*/		return 0x82202794;
		  /* 82202794h */ case   52:  		/* cmplwi CR6, R11, 15872 */
		/* 82202794h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 82202794h case   52:*/		return 0x82202798;
		  /* 82202798h */ case   53:  		/* bc 4, CR6_EQ, 48 */
		/* 82202798h case   53:*/		if ( !regs.CR[6].eq ) { return 0x822027C8;  }
		/* 82202798h case   53:*/		return 0x8220279C;
		  /* 8220279Ch */ case   54:  		/* mr R4, R30 */
		/* 8220279Ch case   54:*/		regs.R4 = regs.R30;
		/* 8220279Ch case   54:*/		return 0x822027A0;
		  /* 822027A0h */ case   55:  		/* bl -62696 */
		/* 822027A0h case   55:*/		regs.LR = 0x822027A4; return 0x821F32B8;
		/* 822027A0h case   55:*/		return 0x822027A4;
		  /* 822027A4h */ case   56:  		/* mr R4, R3 */
		/* 822027A4h case   56:*/		regs.R4 = regs.R3;
		/* 822027A4h case   56:*/		return 0x822027A8;
		  /* 822027A8h */ case   57:  		/* mr R5, R28 */
		/* 822027A8h case   57:*/		regs.R5 = regs.R28;
		/* 822027A8h case   57:*/		return 0x822027AC;
		  /* 822027ACh */ case   58:  		/* mr R3, R31 */
		/* 822027ACh case   58:*/		regs.R3 = regs.R31;
		/* 822027ACh case   58:*/		return 0x822027B0;
		  /* 822027B0h */ case   59:  		/* bl -59264 */
		/* 822027B0h case   59:*/		regs.LR = 0x822027B4; return 0x821F4030;
		/* 822027B0h case   59:*/		return 0x822027B4;
		  /* 822027B4h */ case   60:  		/* mr R4, R3 */
		/* 822027B4h case   60:*/		regs.R4 = regs.R3;
		/* 822027B4h case   60:*/		return 0x822027B8;
		  /* 822027B8h */ case   61:  		/* mr R3, R31 */
		/* 822027B8h case   61:*/		regs.R3 = regs.R31;
		/* 822027B8h case   61:*/		return 0x822027BC;
		  /* 822027BCh */ case   62:  		/* bl -76468 */
		/* 822027BCh case   62:*/		regs.LR = 0x822027C0; return 0x821EFD08;
		/* 822027BCh case   62:*/		return 0x822027C0;
		  /* 822027C0h */ case   63:  		/* stw R3, <#[R30]> */
		/* 822027C0h case   63:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 822027C0h case   63:*/		return 0x822027C4;
		  /* 822027C4h */ case   64:  		/* b 92 */
		/* 822027C4h case   64:*/		return 0x82202820;
		/* 822027C4h case   64:*/		return 0x822027C8;
	}
	return 0x822027C8;
} // Block from 822026C4h-822027C8h (65 instructions)

//////////////////////////////////////////////////////
// Block at 822027C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822027C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822027C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822027C8);
		  /* 822027C8h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 822027C8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822027C8h case    0:*/		return 0x822027CC;
		  /* 822027CCh */ case    1:  		/* li R8, 1 */
		/* 822027CCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822027CCh case    1:*/		return 0x822027D0;
		  /* 822027D0h */ case    2:  		/* li R7, 2 */
		/* 822027D0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 822027D0h case    2:*/		return 0x822027D4;
		  /* 822027D4h */ case    3:  		/* addi R5, R4, 24 */
		/* 822027D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 822027D4h case    3:*/		return 0x822027D8;
		  /* 822027D8h */ case    4:  		/* li R6, 107 */
		/* 822027D8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x6B);
		/* 822027D8h case    4:*/		return 0x822027DC;
		  /* 822027DCh */ case    5:  		/* bl 139708 */
		/* 822027DCh case    5:*/		regs.LR = 0x822027E0; return 0x82224998;
		/* 822027DCh case    5:*/		return 0x822027E0;
		  /* 822027E0h */ case    6:  		/* mr R24, R3 */
		/* 822027E0h case    6:*/		regs.R24 = regs.R3;
		/* 822027E0h case    6:*/		return 0x822027E4;
		  /* 822027E4h */ case    7:  		/* mr R4, R30 */
		/* 822027E4h case    7:*/		regs.R4 = regs.R30;
		/* 822027E4h case    7:*/		return 0x822027E8;
		  /* 822027E8h */ case    8:  		/* mr R3, R31 */
		/* 822027E8h case    8:*/		regs.R3 = regs.R31;
		/* 822027E8h case    8:*/		return 0x822027EC;
		  /* 822027ECh */ case    9:  		/* bl -66668 */
		/* 822027ECh case    9:*/		regs.LR = 0x822027F0; return 0x821F2380;
		/* 822027ECh case    9:*/		return 0x822027F0;
		  /* 822027F0h */ case   10:  		/* mr R5, R3 */
		/* 822027F0h case   10:*/		regs.R5 = regs.R3;
		/* 822027F0h case   10:*/		return 0x822027F4;
		  /* 822027F4h */ case   11:  		/* li R4, 0 */
		/* 822027F4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822027F4h case   11:*/		return 0x822027F8;
		  /* 822027F8h */ case   12:  		/* mr R3, R24 */
		/* 822027F8h case   12:*/		regs.R3 = regs.R24;
		/* 822027F8h case   12:*/		return 0x822027FC;
		  /* 822027FCh */ case   13:  		/* bl -598348 */
		/* 822027FCh case   13:*/		regs.LR = 0x82202800; return 0x821706B0;
		/* 822027FCh case   13:*/		return 0x82202800;
		  /* 82202800h */ case   14:  		/* mr R4, R28 */
		/* 82202800h case   14:*/		regs.R4 = regs.R28;
		/* 82202800h case   14:*/		return 0x82202804;
		  /* 82202804h */ case   15:  		/* mr R3, R31 */
		/* 82202804h case   15:*/		regs.R3 = regs.R31;
		/* 82202804h case   15:*/		return 0x82202808;
		  /* 82202808h */ case   16:  		/* bl -66696 */
		/* 82202808h case   16:*/		regs.LR = 0x8220280C; return 0x821F2380;
		/* 82202808h case   16:*/		return 0x8220280C;
		  /* 8220280Ch */ case   17:  		/* mr R5, R3 */
		/* 8220280Ch case   17:*/		regs.R5 = regs.R3;
		/* 8220280Ch case   17:*/		return 0x82202810;
		  /* 82202810h */ case   18:  		/* li R4, 1 */
		/* 82202810h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82202810h case   18:*/		return 0x82202814;
		  /* 82202814h */ case   19:  		/* mr R3, R24 */
		/* 82202814h case   19:*/		regs.R3 = regs.R24;
		/* 82202814h case   19:*/		return 0x82202818;
		  /* 82202818h */ case   20:  		/* bl -598376 */
		/* 82202818h case   20:*/		regs.LR = 0x8220281C; return 0x821706B0;
		/* 82202818h case   20:*/		return 0x8220281C;
		  /* 8220281Ch */ case   21:  		/* stw R24, <#[R30]> */
		/* 8220281Ch case   21:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x00000000) );
		/* 8220281Ch case   21:*/		return 0x82202820;
	}
	return 0x82202820;
} // Block from 822027C8h-82202820h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82202820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202820);
		  /* 82202820h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82202820h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82202820h case    0:*/		return 0x82202824;
		  /* 82202824h */ case    1:  		/* addi R27, R27, -1 */
		/* 82202824h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 82202824h case    1:*/		return 0x82202828;
		  /* 82202828h */ case    2:  		/* rlwimi R11, R26, 0, 16, 14 */
		/* 82202828h case    2:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R26);
		/* 82202828h case    2:*/		return 0x8220282C;
		  /* 8220282Ch */ case    3:  		/* stw R11, <#[R30 + 4]> */
		/* 8220282Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220282Ch case    3:*/		return 0x82202830;
		  /* 82202830h */ case    4:  		/* b -212 */
		/* 82202830h case    4:*/		return 0x8220275C;
		/* 82202830h case    4:*/		return 0x82202834;
	}
	return 0x82202834;
} // Block from 82202820h-82202834h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82202834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202834);
		  /* 82202834h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82202834h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82202834h case    0:*/		return 0x82202838;
		  /* 82202838h */ case    1:  		/* bc 12, CR6_EQ, -25880 */
		/* 82202838h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82202838h case    1:*/		return 0x8220283C;
		  /* 8220283Ch */ case    2:  		/* mr R5, R29 */
		/* 8220283Ch case    2:*/		regs.R5 = regs.R29;
		/* 8220283Ch case    2:*/		return 0x82202840;
		  /* 82202840h */ case    3:  		/* mr R4, R25 */
		/* 82202840h case    3:*/		regs.R4 = regs.R25;
		/* 82202840h case    3:*/		return 0x82202844;
		  /* 82202844h */ case    4:  		/* addi R3, R1, 2848 */
		/* 82202844h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB20);
		/* 82202844h case    4:*/		return 0x82202848;
		  /* 82202848h */ case    5:  		/* b -20156 */
		/* 82202848h case    5:*/		return 0x821FD98C;
		/* 82202848h case    5:*/		return 0x8220284C;
		  /* 8220284Ch */ case    6:  		/* lwz R26, <#[R1 + 3500]> */
		/* 8220284Ch case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 8220284Ch case    6:*/		return 0x82202850;
		  /* 82202850h */ case    7:  		/* mr R5, R29 */
		/* 82202850h case    7:*/		regs.R5 = regs.R29;
		/* 82202850h case    7:*/		return 0x82202854;
		  /* 82202854h */ case    8:  		/* mr R3, R31 */
		/* 82202854h case    8:*/		regs.R3 = regs.R31;
		/* 82202854h case    8:*/		return 0x82202858;
		  /* 82202858h */ case    9:  		/* mr R4, R26 */
		/* 82202858h case    9:*/		regs.R4 = regs.R26;
		/* 82202858h case    9:*/		return 0x8220285C;
		  /* 8220285Ch */ case   10:  		/* bl -48876 */
		/* 8220285Ch case   10:*/		regs.LR = 0x82202860; return 0x821F6970;
		/* 8220285Ch case   10:*/		return 0x82202860;
		  /* 82202860h */ case   11:  		/* mr R11, R3 */
		/* 82202860h case   11:*/		regs.R11 = regs.R3;
		/* 82202860h case   11:*/		return 0x82202864;
		  /* 82202864h */ case   12:  		/* mr R3, R31 */
		/* 82202864h case   12:*/		regs.R3 = regs.R31;
		/* 82202864h case   12:*/		return 0x82202868;
		  /* 82202868h */ case   13:  		/* mr R5, R11 */
		/* 82202868h case   13:*/		regs.R5 = regs.R11;
		/* 82202868h case   13:*/		return 0x8220286C;
		  /* 8220286Ch */ case   14:  		/* mr R4, R11 */
		/* 8220286Ch case   14:*/		regs.R4 = regs.R11;
		/* 8220286Ch case   14:*/		return 0x82202870;
		  /* 82202870h */ case   15:  		/* bl -74776 */
		/* 82202870h case   15:*/		regs.LR = 0x82202874; return 0x821F0458;
		/* 82202870h case   15:*/		return 0x82202874;
		  /* 82202874h */ case   16:  		/* mr R27, R3 */
		/* 82202874h case   16:*/		regs.R27 = regs.R3;
		/* 82202874h case   16:*/		return 0x82202878;
		  /* 82202878h */ case   17:  		/* mr R4, R26 */
		/* 82202878h case   17:*/		regs.R4 = regs.R26;
		/* 82202878h case   17:*/		return 0x8220287C;
		  /* 8220287Ch */ case   18:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 8220287Ch case   18:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 8220287Ch case   18:*/		return 0x82202880;
		  /* 82202880h */ case   19:  		/* addi R3, R1, 960 */
		/* 82202880h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3C0);
		/* 82202880h case   19:*/		return 0x82202884;
		  /* 82202884h */ case   20:  		/* bl -50548 */
		/* 82202884h case   20:*/		regs.LR = 0x82202888; return 0x821F6310;
		/* 82202884h case   20:*/		return 0x82202888;
		  /* 82202888h */ case   21:  		/* mr R5, R29 */
		/* 82202888h case   21:*/		regs.R5 = regs.R29;
		/* 82202888h case   21:*/		return 0x8220288C;
		  /* 8220288Ch */ case   22:  		/* mr R4, R26 */
		/* 8220288Ch case   22:*/		regs.R4 = regs.R26;
		/* 8220288Ch case   22:*/		return 0x82202890;
		  /* 82202890h */ case   23:  		/* addi R3, R1, 2216 */
		/* 82202890h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8A8);
		/* 82202890h case   23:*/		return 0x82202894;
		  /* 82202894h */ case   24:  		/* bl -50564 */
		/* 82202894h case   24:*/		regs.LR = 0x82202898; return 0x821F6310;
		/* 82202894h case   24:*/		return 0x82202898;
		  /* 82202898h */ case   25:  		/* mr R28, R29 */
		/* 82202898h case   25:*/		regs.R28 = regs.R29;
		/* 82202898h case   25:*/		return 0x8220289C;
		  /* 8220289Ch */ case   26:  		/* cmplwi CR6, R28, 0 */
		/* 8220289Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220289Ch case   26:*/		return 0x822028A0;
		  /* 822028A0h */ case   27:  		/* bc 12, CR6_EQ, 204 */
		/* 822028A0h case   27:*/		if ( regs.CR[6].eq ) { return 0x8220296C;  }
		/* 822028A0h case   27:*/		return 0x822028A4;
		  /* 822028A4h */ case   28:  		/* cmplwi CR6, R28, 4 */
		/* 822028A4h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 822028A4h case   28:*/		return 0x822028A8;
		  /* 822028A8h */ case   29:  		/* mr R30, R28 */
		/* 822028A8h case   29:*/		regs.R30 = regs.R28;
		/* 822028A8h case   29:*/		return 0x822028AC;
		  /* 822028ACh */ case   30:  		/* bc 12, CR6_LT, 8 */
		/* 822028ACh case   30:*/		if ( regs.CR[6].lt ) { return 0x822028B4;  }
		/* 822028ACh case   30:*/		return 0x822028B0;
		  /* 822028B0h */ case   31:  		/* li R30, 4 */
		/* 822028B0h case   31:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822028B0h case   31:*/		return 0x822028B4;
	}
	return 0x822028B4;
} // Block from 82202834h-822028B4h (32 instructions)

//////////////////////////////////////////////////////
// Block at 822028B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822028B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822028B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822028B4);
		  /* 822028B4h */ case    0:  		/* li R6, 228 */
		/* 822028B4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822028B4h case    0:*/		return 0x822028B8;
		  /* 822028B8h */ case    1:  		/* mr R5, R30 */
		/* 822028B8h case    1:*/		regs.R5 = regs.R30;
		/* 822028B8h case    1:*/		return 0x822028BC;
		  /* 822028BCh */ case    2:  		/* addi R4, R1, 960 */
		/* 822028BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3C0);
		/* 822028BCh case    2:*/		return 0x822028C0;
		  /* 822028C0h */ case    3:  		/* mr R3, R31 */
		/* 822028C0h case    3:*/		regs.R3 = regs.R31;
		/* 822028C0h case    3:*/		return 0x822028C4;
		  /* 822028C4h */ case    4:  		/* bl -65916 */
		/* 822028C4h case    4:*/		regs.LR = 0x822028C8; return 0x821F2748;
		/* 822028C4h case    4:*/		return 0x822028C8;
		  /* 822028C8h */ case    5:  		/* mr R25, R3 */
		/* 822028C8h case    5:*/		regs.R25 = regs.R3;
		/* 822028C8h case    5:*/		return 0x822028CC;
		  /* 822028CCh */ case    6:  		/* li R7, 1 */
		/* 822028CCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822028CCh case    6:*/		return 0x822028D0;
		  /* 822028D0h */ case    7:  		/* li R6, 0 */
		/* 822028D0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822028D0h case    7:*/		return 0x822028D4;
		  /* 822028D4h */ case    8:  		/* mr R5, R30 */
		/* 822028D4h case    8:*/		regs.R5 = regs.R30;
		/* 822028D4h case    8:*/		return 0x822028D8;
		  /* 822028D8h */ case    9:  		/* addi R4, R1, 2216 */
		/* 822028D8h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x8A8);
		/* 822028D8h case    9:*/		return 0x822028DC;
		  /* 822028DCh */ case   10:  		/* mr R3, R31 */
		/* 822028DCh case   10:*/		regs.R3 = regs.R31;
		/* 822028DCh case   10:*/		return 0x822028E0;
		  /* 822028E0h */ case   11:  		/* bl -66496 */
		/* 822028E0h case   11:*/		regs.LR = 0x822028E4; return 0x821F2520;
		/* 822028E0h case   11:*/		return 0x822028E4;
		  /* 822028E4h */ case   12:  		/* mr R24, R3 */
		/* 822028E4h case   12:*/		regs.R24 = regs.R3;
		/* 822028E4h case   12:*/		return 0x822028E8;
		  /* 822028E8h */ case   13:  		/* mr R4, R27 */
		/* 822028E8h case   13:*/		regs.R4 = regs.R27;
		/* 822028E8h case   13:*/		return 0x822028EC;
		  /* 822028ECh */ case   14:  		/* mr R3, R31 */
		/* 822028ECh case   14:*/		regs.R3 = regs.R31;
		/* 822028ECh case   14:*/		return 0x822028F0;
		  /* 822028F0h */ case   15:  		/* bl -567536 */
		/* 822028F0h case   15:*/		regs.LR = 0x822028F4; return 0x82178000;
		/* 822028F0h case   15:*/		return 0x822028F4;
		  /* 822028F4h */ case   16:  		/* mr R11, R3 */
		/* 822028F4h case   16:*/		regs.R11 = regs.R3;
		/* 822028F4h case   16:*/		return 0x822028F8;
		  /* 822028F8h */ case   17:  		/* mr R5, R24 */
		/* 822028F8h case   17:*/		regs.R5 = regs.R24;
		/* 822028F8h case   17:*/		return 0x822028FC;
		  /* 822028FCh */ case   18:  		/* mr R3, R31 */
		/* 822028FCh case   18:*/		regs.R3 = regs.R31;
		/* 822028FCh case   18:*/		return 0x82202900;
		  /* 82202900h */ case   19:  		/* mr R4, R11 */
		/* 82202900h case   19:*/		regs.R4 = regs.R11;
		/* 82202900h case   19:*/		return 0x82202904;
		  /* 82202904h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 82202904h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82202904h case   20:*/		return 0x82202908;
		  /* 82202908h */ case   21:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 82202908h case   21:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 82202908h case   21:*/		return 0x8220290C;
		  /* 8220290Ch */ case   22:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 8220290Ch case   22:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 8220290Ch case   22:*/		return 0x82202910;
		  /* 82202910h */ case   23:  		/* stw R10, <#[R11]> */
		/* 82202910h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82202910h case   23:*/		return 0x82202914;
		  /* 82202914h */ case   24:  		/* bl -83676 */
		/* 82202914h case   24:*/		regs.LR = 0x82202918; return 0x821EE238;
		/* 82202914h case   24:*/		return 0x82202918;
		  /* 82202918h */ case   25:  		/* mr R11, R3 */
		/* 82202918h case   25:*/		regs.R11 = regs.R3;
		/* 82202918h case   25:*/		return 0x8220291C;
		  /* 8220291Ch */ case   26:  		/* li R7, 228 */
		/* 8220291Ch case   26:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 8220291Ch case   26:*/		return 0x82202920;
		  /* 82202920h */ case   27:  		/* li R6, 4 */
		/* 82202920h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82202920h case   27:*/		return 0x82202924;
		  /* 82202924h */ case   28:  		/* mr R3, R31 */
		/* 82202924h case   28:*/		regs.R3 = regs.R31;
		/* 82202924h case   28:*/		return 0x82202928;
		  /* 82202928h */ case   29:  		/* mr R4, R11 */
		/* 82202928h case   29:*/		regs.R4 = regs.R11;
		/* 82202928h case   29:*/		return 0x8220292C;
		  /* 8220292Ch */ case   30:  		/* lwz R10, <#[R11 + 8]> */
		/* 8220292Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8220292Ch case   30:*/		return 0x82202930;
		  /* 82202930h */ case   31:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82202930h case   31:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82202930h case   31:*/		return 0x82202934;
		  /* 82202934h */ case   32:  		/* bl 129292 */
		/* 82202934h case   32:*/		regs.LR = 0x82202938; return 0x82222240;
		/* 82202934h case   32:*/		return 0x82202938;
		  /* 82202938h */ case   33:  		/* mr R5, R3 */
		/* 82202938h case   33:*/		regs.R5 = regs.R3;
		/* 82202938h case   33:*/		return 0x8220293C;
		  /* 8220293Ch */ case   34:  		/* mr R4, R25 */
		/* 8220293Ch case   34:*/		regs.R4 = regs.R25;
		/* 8220293Ch case   34:*/		return 0x82202940;
		  /* 82202940h */ case   35:  		/* mr R3, R31 */
		/* 82202940h case   35:*/		regs.R3 = regs.R31;
		/* 82202940h case   35:*/		return 0x82202944;
		  /* 82202944h */ case   36:  		/* bl -83964 */
		/* 82202944h case   36:*/		regs.LR = 0x82202948; return 0x821EE148;
		/* 82202944h case   36:*/		return 0x82202948;
		  /* 82202948h */ case   37:  		/* mr R5, R3 */
		/* 82202948h case   37:*/		regs.R5 = regs.R3;
		/* 82202948h case   37:*/		return 0x8220294C;
		  /* 8220294Ch */ case   38:  		/* mr R4, R30 */
		/* 8220294Ch case   38:*/		regs.R4 = regs.R30;
		/* 8220294Ch case   38:*/		return 0x82202950;
		  /* 82202950h */ case   39:  		/* addi R3, R1, 960 */
		/* 82202950h case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3C0);
		/* 82202950h case   39:*/		return 0x82202954;
		  /* 82202954h */ case   40:  		/* bl -68156 */
		/* 82202954h case   40:*/		regs.LR = 0x82202958; return 0x821F1F18;
		/* 82202954h case   40:*/		return 0x82202958;
		  /* 82202958h */ case   41:  		/* li R4, 0 */
		/* 82202958h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82202958h case   41:*/		return 0x8220295C;
		  /* 8220295Ch */ case   42:  		/* addi R3, R1, 960 */
		/* 8220295Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3C0);
		/* 8220295Ch case   42:*/		return 0x82202960;
		  /* 82202960h */ case   43:  		/* subf R28, R30, R28 */
		/* 82202960h case   43:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R30,regs.R28);
		/* 82202960h case   43:*/		return 0x82202964;
		  /* 82202964h */ case   44:  		/* bl -84844 */
		/* 82202964h case   44:*/		regs.LR = 0x82202968; return 0x821EDDF8;
		/* 82202964h case   44:*/		return 0x82202968;
		  /* 82202968h */ case   45:  		/* b -204 */
		/* 82202968h case   45:*/		return 0x8220289C;
		/* 82202968h case   45:*/		return 0x8220296C;
	}
	return 0x8220296C;
} // Block from 822028B4h-8220296Ch (46 instructions)

//////////////////////////////////////////////////////
// Block at 8220296Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220296C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220296C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220296C);
		  /* 8220296Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8220296Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220296Ch case    0:*/		return 0x82202970;
		  /* 82202970h */ case    1:  		/* bc 12, CR6_EQ, -26192 */
		/* 82202970h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82202970h case    1:*/		return 0x82202974;
		  /* 82202974h */ case    2:  		/* mr R5, R29 */
		/* 82202974h case    2:*/		regs.R5 = regs.R29;
		/* 82202974h case    2:*/		return 0x82202978;
		  /* 82202978h */ case    3:  		/* mr R4, R26 */
		/* 82202978h case    3:*/		regs.R4 = regs.R26;
		/* 82202978h case    3:*/		return 0x8220297C;
		  /* 8220297Ch */ case    4:  		/* addi R3, R1, 2864 */
		/* 8220297Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB30);
		/* 8220297Ch case    4:*/		return 0x82202980;
		  /* 82202980h */ case    5:  		/* b -20468 */
		/* 82202980h case    5:*/		return 0x821FD98C;
		/* 82202980h case    5:*/		return 0x82202984;
		  /* 82202984h */ case    6:  		/* lwz R25, <#[R1 + 3500]> */
		/* 82202984h case    6:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202984h case    6:*/		return 0x82202988;
		  /* 82202988h */ case    7:  		/* addi R3, R1, 280 */
		/* 82202988h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x118);
		/* 82202988h case    7:*/		return 0x8220298C;
		  /* 8220298Ch */ case    8:  		/* mr R4, R25 */
		/* 8220298Ch case    8:*/		regs.R4 = regs.R25;
		/* 8220298Ch case    8:*/		return 0x82202990;
		  /* 82202990h */ case    9:  		/* bl -58176 */
		/* 82202990h case    9:*/		regs.LR = 0x82202994; return 0x821F4650;
		/* 82202990h case    9:*/		return 0x82202994;
		  /* 82202994h */ case   10:  		/* rlwinm R28, R29, 1, 0, 30 */
		/* 82202994h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R29);
		/* 82202994h case   10:*/		return 0x82202998;
		  /* 82202998h */ case   11:  		/* mr R4, R25 */
		/* 82202998h case   11:*/		regs.R4 = regs.R25;
		/* 82202998h case   11:*/		return 0x8220299C;
		  /* 8220299Ch */ case   12:  		/* mr R5, R28 */
		/* 8220299Ch case   12:*/		regs.R5 = regs.R28;
		/* 8220299Ch case   12:*/		return 0x822029A0;
		  /* 822029A0h */ case   13:  		/* addi R3, R1, 2280 */
		/* 822029A0h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8E8);
		/* 822029A0h case   13:*/		return 0x822029A4;
		  /* 822029A4h */ case   14:  		/* bl -50836 */
		/* 822029A4h case   14:*/		regs.LR = 0x822029A8; return 0x821F6310;
		/* 822029A4h case   14:*/		return 0x822029A8;
		  /* 822029A8h */ case   15:  		/* mr R5, R29 */
		/* 822029A8h case   15:*/		regs.R5 = regs.R29;
		/* 822029A8h case   15:*/		return 0x822029AC;
		  /* 822029ACh */ case   16:  		/* mr R4, R25 */
		/* 822029ACh case   16:*/		regs.R4 = regs.R25;
		/* 822029ACh case   16:*/		return 0x822029B0;
		  /* 822029B0h */ case   17:  		/* addi R3, R1, 2248 */
		/* 822029B0h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8C8);
		/* 822029B0h case   17:*/		return 0x822029B4;
		  /* 822029B4h */ case   18:  		/* bl -50852 */
		/* 822029B4h case   18:*/		regs.LR = 0x822029B8; return 0x821F6310;
		/* 822029B4h case   18:*/		return 0x822029B8;
		  /* 822029B8h */ case   19:  		/* mr R6, R29 */
		/* 822029B8h case   19:*/		regs.R6 = regs.R29;
		/* 822029B8h case   19:*/		return 0x822029BC;
		  /* 822029BCh */ case   20:  		/* addi R5, R1, 2248 */
		/* 822029BCh case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x8C8);
		/* 822029BCh case   20:*/		return 0x822029C0;
		  /* 822029C0h */ case   21:  		/* addi R4, R1, 2280 */
		/* 822029C0h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x8E8);
		/* 822029C0h case   21:*/		return 0x822029C4;
		  /* 822029C4h */ case   22:  		/* mr R3, R31 */
		/* 822029C4h case   22:*/		regs.R3 = regs.R31;
		/* 822029C4h case   22:*/		return 0x822029C8;
		  /* 822029C8h */ case   23:  		/* bl -55376 */
		/* 822029C8h case   23:*/		regs.LR = 0x822029CC; return 0x821F5178;
		/* 822029C8h case   23:*/		return 0x822029CC;
		  /* 822029CCh */ case   24:  		/* mr R26, R3 */
		/* 822029CCh case   24:*/		regs.R26 = regs.R3;
		/* 822029CCh case   24:*/		return 0x822029D0;
		  /* 822029D0h */ case   25:  		/* mr R3, R31 */
		/* 822029D0h case   25:*/		regs.R3 = regs.R31;
		/* 822029D0h case   25:*/		return 0x822029D4;
		  /* 822029D4h */ case   26:  		/* mr R5, R26 */
		/* 822029D4h case   26:*/		regs.R5 = regs.R26;
		/* 822029D4h case   26:*/		return 0x822029D8;
		  /* 822029D8h */ case   27:  		/* mr R4, R26 */
		/* 822029D8h case   27:*/		regs.R4 = regs.R26;
		/* 822029D8h case   27:*/		return 0x822029DC;
		  /* 822029DCh */ case   28:  		/* bl -74932 */
		/* 822029DCh case   28:*/		regs.LR = 0x822029E0; return 0x821F0528;
		/* 822029DCh case   28:*/		return 0x822029E0;
		  /* 822029E0h */ case   29:  		/* ld R30, <#[R1 + 280]> */
		/* 822029E0h case   29:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0x00000118) );
		/* 822029E0h case   29:*/		return 0x822029E4;
		  /* 822029E4h */ case   30:  		/* mr R27, R3 */
		/* 822029E4h case   30:*/		regs.R27 = regs.R3;
		/* 822029E4h case   30:*/		return 0x822029E8;
		  /* 822029E8h */ case   31:  		/* mr R5, R30 */
		/* 822029E8h case   31:*/		regs.R5 = regs.R30;
		/* 822029E8h case   31:*/		return 0x822029EC;
		  /* 822029ECh */ case   32:  		/* mr R4, R30 */
		/* 822029ECh case   32:*/		regs.R4 = regs.R30;
		/* 822029ECh case   32:*/		return 0x822029F0;
		  /* 822029F0h */ case   33:  		/* mr R3, R31 */
		/* 822029F0h case   33:*/		regs.R3 = regs.R31;
		/* 822029F0h case   33:*/		return 0x822029F4;
		  /* 822029F4h */ case   34:  		/* bl -60732 */
		/* 822029F4h case   34:*/		regs.LR = 0x822029F8; return 0x821F3CB8;
		/* 822029F4h case   34:*/		return 0x822029F8;
		  /* 822029F8h */ case   35:  		/* lwz R11, <#[R27 + 8]> */
		/* 822029F8h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 822029F8h case   35:*/		return 0x822029FC;
		  /* 822029FCh */ case   36:  		/* mr R24, R3 */
		/* 822029FCh case   36:*/		regs.R24 = regs.R3;
		/* 822029FCh case   36:*/		return 0x82202A00;
		  /* 82202A00h */ case   37:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 82202A00h case   37:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 82202A00h case   37:*/		return 0x82202A04;
		  /* 82202A04h */ case   38:  		/* li R7, 228 */
		/* 82202A04h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202A04h case   38:*/		return 0x82202A08;
		  /* 82202A08h */ case   39:  		/* li R6, 4 */
		/* 82202A08h case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82202A08h case   39:*/		return 0x82202A0C;
		  /* 82202A0Ch */ case   40:  		/* mr R4, R27 */
		/* 82202A0Ch case   40:*/		regs.R4 = regs.R27;
		/* 82202A0Ch case   40:*/		return 0x82202A10;
		  /* 82202A10h */ case   41:  		/* mr R3, R31 */
		/* 82202A10h case   41:*/		regs.R3 = regs.R31;
		/* 82202A10h case   41:*/		return 0x82202A14;
		  /* 82202A14h */ case   42:  		/* bl 129068 */
		/* 82202A14h case   42:*/		regs.LR = 0x82202A18; return 0x82222240;
		/* 82202A14h case   42:*/		return 0x82202A18;
		  /* 82202A18h */ case   43:  		/* mr R27, R3 */
		/* 82202A18h case   43:*/		regs.R27 = regs.R3;
		/* 82202A18h case   43:*/		return 0x82202A1C;
		  /* 82202A1Ch */ case   44:  		/* li R5, 1 */
		/* 82202A1Ch case   44:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82202A1Ch case   44:*/		return 0x82202A20;
		  /* 82202A20h */ case   45:  		/* fmr FR4, FR31 */
		/* 82202A20h case   45:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 82202A20h case   45:*/		return 0x82202A24;
		  /* 82202A24h */ case   46:  		/* mr R4, R31 */
		/* 82202A24h case   46:*/		regs.R4 = regs.R31;
		/* 82202A24h case   46:*/		return 0x82202A28;
		  /* 82202A28h */ case   47:  		/* fmr FR3, FR31 */
		/* 82202A28h case   47:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82202A28h case   47:*/		return 0x82202A2C;
		  /* 82202A2Ch */ case   48:  		/* addi R3, R1, 2880 */
		/* 82202A2Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB40);
		/* 82202A2Ch case   48:*/		return 0x82202A30;
		  /* 82202A30h */ case   49:  		/* fmr FR2, FR31 */
		/* 82202A30h case   49:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82202A30h case   49:*/		return 0x82202A34;
		  /* 82202A34h */ case   50:  		/* fmr FR1, FR30 */
		/* 82202A34h case   50:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82202A34h case   50:*/		return 0x82202A38;
		  /* 82202A38h */ case   51:  		/* bl 148504 */
		/* 82202A38h case   51:*/		regs.LR = 0x82202A3C; return 0x82226E50;
		/* 82202A38h case   51:*/		return 0x82202A3C;
		  /* 82202A3Ch */ case   52:  		/* mr R11, R3 */
		/* 82202A3Ch case   52:*/		regs.R11 = regs.R3;
		/* 82202A3Ch case   52:*/		return 0x82202A40;
		  /* 82202A40h */ case   53:  		/* mr R5, R27 */
		/* 82202A40h case   53:*/		regs.R5 = regs.R27;
		/* 82202A40h case   53:*/		return 0x82202A44;
		  /* 82202A44h */ case   54:  		/* mr R3, R31 */
		/* 82202A44h case   54:*/		regs.R3 = regs.R31;
		/* 82202A44h case   54:*/		return 0x82202A48;
		  /* 82202A48h */ case   55:  		/* ld R4, <#[R11]> */
		/* 82202A48h case   55:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82202A48h case   55:*/		return 0x82202A4C;
		  /* 82202A4Ch */ case   56:  		/* bl -64948 */
		/* 82202A4Ch case   56:*/		regs.LR = 0x82202A50; return 0x821F2C98;
		/* 82202A4Ch case   56:*/		return 0x82202A50;
		  /* 82202A50h */ case   57:  		/* mr R5, R3 */
		/* 82202A50h case   57:*/		regs.R5 = regs.R3;
		/* 82202A50h case   57:*/		return 0x82202A54;
		  /* 82202A54h */ case   58:  		/* mr R4, R24 */
		/* 82202A54h case   58:*/		regs.R4 = regs.R24;
		/* 82202A54h case   58:*/		return 0x82202A58;
		  /* 82202A58h */ case   59:  		/* mr R3, R31 */
		/* 82202A58h case   59:*/		regs.R3 = regs.R31;
		/* 82202A58h case   59:*/		return 0x82202A5C;
		  /* 82202A5Ch */ case   60:  		/* bl -75060 */
		/* 82202A5Ch case   60:*/		regs.LR = 0x82202A60; return 0x821F0528;
		/* 82202A5Ch case   60:*/		return 0x82202A60;
		  /* 82202A60h */ case   61:  		/* mr R11, R3 */
		/* 82202A60h case   61:*/		regs.R11 = regs.R3;
		/* 82202A60h case   61:*/		return 0x82202A64;
		  /* 82202A64h */ case   62:  		/* li R7, 228 */
		/* 82202A64h case   62:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202A64h case   62:*/		return 0x82202A68;
		  /* 82202A68h */ case   63:  		/* li R6, 4 */
		/* 82202A68h case   63:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82202A68h case   63:*/		return 0x82202A6C;
		  /* 82202A6Ch */ case   64:  		/* mr R3, R31 */
		/* 82202A6Ch case   64:*/		regs.R3 = regs.R31;
		/* 82202A6Ch case   64:*/		return 0x82202A70;
		  /* 82202A70h */ case   65:  		/* mr R4, R11 */
		/* 82202A70h case   65:*/		regs.R4 = regs.R11;
		/* 82202A70h case   65:*/		return 0x82202A74;
		  /* 82202A74h */ case   66:  		/* lwz R10, <#[R11 + 8]> */
		/* 82202A74h case   66:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82202A74h case   66:*/		return 0x82202A78;
		  /* 82202A78h */ case   67:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82202A78h case   67:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82202A78h case   67:*/		return 0x82202A7C;
		  /* 82202A7Ch */ case   68:  		/* bl 128964 */
		/* 82202A7Ch case   68:*/		regs.LR = 0x82202A80; return 0x82222240;
		/* 82202A7Ch case   68:*/		return 0x82202A80;
		  /* 82202A80h */ case   69:  		/* mr R27, R3 */
		/* 82202A80h case   69:*/		regs.R27 = regs.R3;
		/* 82202A80h case   69:*/		return 0x82202A84;
		  /* 82202A84h */ case   70:  		/* li R5, 1 */
		/* 82202A84h case   70:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82202A84h case   70:*/		return 0x82202A88;
		  /* 82202A88h */ case   71:  		/* fmr FR4, FR31 */
		/* 82202A88h case   71:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 82202A88h case   71:*/		return 0x82202A8C;
		  /* 82202A8Ch */ case   72:  		/* mr R4, R31 */
		/* 82202A8Ch case   72:*/		regs.R4 = regs.R31;
		/* 82202A8Ch case   72:*/		return 0x82202A90;
		  /* 82202A90h */ case   73:  		/* fmr FR3, FR31 */
		/* 82202A90h case   73:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82202A90h case   73:*/		return 0x82202A94;
		  /* 82202A94h */ case   74:  		/* addi R3, R1, 2896 */
		/* 82202A94h case   74:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB50);
		/* 82202A94h case   74:*/		return 0x82202A98;
		  /* 82202A98h */ case   75:  		/* fmr FR2, FR31 */
		/* 82202A98h case   75:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82202A98h case   75:*/		return 0x82202A9C;
		  /* 82202A9Ch */ case   76:  		/* fmr FR1, FR30 */
		/* 82202A9Ch case   76:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82202A9Ch case   76:*/		return 0x82202AA0;
		  /* 82202AA0h */ case   77:  		/* bl 148400 */
		/* 82202AA0h case   77:*/		regs.LR = 0x82202AA4; return 0x82226E50;
		/* 82202AA0h case   77:*/		return 0x82202AA4;
		  /* 82202AA4h */ case   78:  		/* mr R11, R3 */
		/* 82202AA4h case   78:*/		regs.R11 = regs.R3;
		/* 82202AA4h case   78:*/		return 0x82202AA8;
		  /* 82202AA8h */ case   79:  		/* mr R5, R27 */
		/* 82202AA8h case   79:*/		regs.R5 = regs.R27;
		/* 82202AA8h case   79:*/		return 0x82202AAC;
		  /* 82202AACh */ case   80:  		/* mr R3, R31 */
		/* 82202AACh case   80:*/		regs.R3 = regs.R31;
		/* 82202AACh case   80:*/		return 0x82202AB0;
		  /* 82202AB0h */ case   81:  		/* ld R4, <#[R11]> */
		/* 82202AB0h case   81:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82202AB0h case   81:*/		return 0x82202AB4;
		  /* 82202AB4h */ case   82:  		/* bl -65052 */
		/* 82202AB4h case   82:*/		regs.LR = 0x82202AB8; return 0x821F2C98;
		/* 82202AB4h case   82:*/		return 0x82202AB8;
		  /* 82202AB8h */ case   83:  		/* mr R27, R3 */
		/* 82202AB8h case   83:*/		regs.R27 = regs.R3;
		/* 82202AB8h case   83:*/		return 0x82202ABC;
		  /* 82202ABCh */ case   84:  		/* fmr FR4, FR31 */
		/* 82202ABCh case   84:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 82202ABCh case   84:*/		return 0x82202AC0;
		  /* 82202AC0h */ case   85:  		/* fmr FR3, FR31 */
		/* 82202AC0h case   85:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82202AC0h case   85:*/		return 0x82202AC4;
		  /* 82202AC4h */ case   86:  		/* li R5, 1 */
		/* 82202AC4h case   86:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82202AC4h case   86:*/		return 0x82202AC8;
		  /* 82202AC8h */ case   87:  		/* mr R4, R31 */
		/* 82202AC8h case   87:*/		regs.R4 = regs.R31;
		/* 82202AC8h case   87:*/		return 0x82202ACC;
		  /* 82202ACCh */ case   88:  		/* fmr FR2, FR31 */
		/* 82202ACCh case   88:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82202ACCh case   88:*/		return 0x82202AD0;
		  /* 82202AD0h */ case   89:  		/* addi R3, R1, 2912 */
		/* 82202AD0h case   89:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB60);
		/* 82202AD0h case   89:*/		return 0x82202AD4;
		  /* 82202AD4h */ case   90:  		/* fmr FR1, FR31 */
		/* 82202AD4h case   90:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82202AD4h case   90:*/		return 0x82202AD8;
		  /* 82202AD8h */ case   91:  		/* bl 148344 */
		/* 82202AD8h case   91:*/		regs.LR = 0x82202ADC; return 0x82226E50;
		/* 82202AD8h case   91:*/		return 0x82202ADC;
		  /* 82202ADCh */ case   92:  		/* mr R11, R3 */
		/* 82202ADCh case   92:*/		regs.R11 = regs.R3;
		/* 82202ADCh case   92:*/		return 0x82202AE0;
		  /* 82202AE0h */ case   93:  		/* mr R4, R27 */
		/* 82202AE0h case   93:*/		regs.R4 = regs.R27;
		/* 82202AE0h case   93:*/		return 0x82202AE4;
		  /* 82202AE4h */ case   94:  		/* mr R3, R31 */
		/* 82202AE4h case   94:*/		regs.R3 = regs.R31;
		/* 82202AE4h case   94:*/		return 0x82202AE8;
		  /* 82202AE8h */ case   95:  		/* ld R5, <#[R11]> */
		/* 82202AE8h case   95:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82202AE8h case   95:*/		return 0x82202AEC;
		  /* 82202AECh */ case   96:  		/* bl -61188 */
		/* 82202AECh case   96:*/		regs.LR = 0x82202AF0; return 0x821F3BE8;
		/* 82202AECh case   96:*/		return 0x82202AF0;
		  /* 82202AF0h */ case   97:  		/* mr R24, R3 */
		/* 82202AF0h case   97:*/		regs.R24 = regs.R3;
		/* 82202AF0h case   97:*/		return 0x82202AF4;
		  /* 82202AF4h */ case   98:  		/* mr R5, R3 */
		/* 82202AF4h case   98:*/		regs.R5 = regs.R3;
		/* 82202AF4h case   98:*/		return 0x82202AF8;
		  /* 82202AF8h */ case   99:  		/* mr R4, R27 */
		/* 82202AF8h case   99:*/		regs.R4 = regs.R27;
		/* 82202AF8h case   99:*/		return 0x82202AFC;
		  /* 82202AFCh */ case  100:  		/* mr R3, R31 */
		/* 82202AFCh case  100:*/		regs.R3 = regs.R31;
		/* 82202AFCh case  100:*/		return 0x82202B00;
		  /* 82202B00h */ case  101:  		/* bl -75224 */
		/* 82202B00h case  101:*/		regs.LR = 0x82202B04; return 0x821F0528;
		/* 82202B00h case  101:*/		return 0x82202B04;
		  /* 82202B04h */ case  102:  		/* mr R23, R3 */
		/* 82202B04h case  102:*/		regs.R23 = regs.R3;
		/* 82202B04h case  102:*/		return 0x82202B08;
		  /* 82202B08h */ case  103:  		/* mr R5, R24 */
		/* 82202B08h case  103:*/		regs.R5 = regs.R24;
		/* 82202B08h case  103:*/		return 0x82202B0C;
		  /* 82202B0Ch */ case  104:  		/* mr R4, R30 */
		/* 82202B0Ch case  104:*/		regs.R4 = regs.R30;
		/* 82202B0Ch case  104:*/		return 0x82202B10;
		  /* 82202B10h */ case  105:  		/* mr R3, R31 */
		/* 82202B10h case  105:*/		regs.R3 = regs.R31;
		/* 82202B10h case  105:*/		return 0x82202B14;
		  /* 82202B14h */ case  106:  		/* bl -62956 */
		/* 82202B14h case  106:*/		regs.LR = 0x82202B18; return 0x821F3528;
		/* 82202B14h case  106:*/		return 0x82202B18;
		  /* 82202B18h */ case  107:  		/* mr R27, R3 */
		/* 82202B18h case  107:*/		regs.R27 = regs.R3;
		/* 82202B18h case  107:*/		return 0x82202B1C;
		  /* 82202B1Ch */ case  108:  		/* mr R4, R3 */
		/* 82202B1Ch case  108:*/		regs.R4 = regs.R3;
		/* 82202B1Ch case  108:*/		return 0x82202B20;
		  /* 82202B20h */ case  109:  		/* mr R5, R26 */
		/* 82202B20h case  109:*/		regs.R5 = regs.R26;
		/* 82202B20h case  109:*/		return 0x82202B24;
		  /* 82202B24h */ case  110:  		/* mr R3, R31 */
		/* 82202B24h case  110:*/		regs.R3 = regs.R31;
		/* 82202B24h case  110:*/		return 0x82202B28;
		  /* 82202B28h */ case  111:  		/* bl -75264 */
		/* 82202B28h case  111:*/		regs.LR = 0x82202B2C; return 0x821F0528;
		/* 82202B28h case  111:*/		return 0x82202B2C;
		  /* 82202B2Ch */ case  112:  		/* mr R30, R3 */
		/* 82202B2Ch case  112:*/		regs.R30 = regs.R3;
		/* 82202B2Ch case  112:*/		return 0x82202B30;
		  /* 82202B30h */ case  113:  		/* mr R4, R23 */
		/* 82202B30h case  113:*/		regs.R4 = regs.R23;
		/* 82202B30h case  113:*/		return 0x82202B34;
		  /* 82202B34h */ case  114:  		/* mr R3, R31 */
		/* 82202B34h case  114:*/		regs.R3 = regs.R31;
		/* 82202B34h case  114:*/		return 0x82202B38;
		  /* 82202B38h */ case  115:  		/* bl -76752 */
		/* 82202B38h case  115:*/		regs.LR = 0x82202B3C; return 0x821EFF68;
		/* 82202B38h case  115:*/		return 0x82202B3C;
		  /* 82202B3Ch */ case  116:  		/* mr R5, R3 */
		/* 82202B3Ch case  116:*/		regs.R5 = regs.R3;
		/* 82202B3Ch case  116:*/		return 0x82202B40;
		  /* 82202B40h */ case  117:  		/* mr R4, R30 */
		/* 82202B40h case  117:*/		regs.R4 = regs.R30;
		/* 82202B40h case  117:*/		return 0x82202B44;
		  /* 82202B44h */ case  118:  		/* mr R3, R31 */
		/* 82202B44h case  118:*/		regs.R3 = regs.R31;
		/* 82202B44h case  118:*/		return 0x82202B48;
		  /* 82202B48h */ case  119:  		/* bl -75504 */
		/* 82202B48h case  119:*/		regs.LR = 0x82202B4C; return 0x821F0458;
		/* 82202B48h case  119:*/		return 0x82202B4C;
		  /* 82202B4Ch */ case  120:  		/* mr R26, R3 */
		/* 82202B4Ch case  120:*/		regs.R26 = regs.R3;
		/* 82202B4Ch case  120:*/		return 0x82202B50;
		  /* 82202B50h */ case  121:  		/* mr R4, R25 */
		/* 82202B50h case  121:*/		regs.R4 = regs.R25;
		/* 82202B50h case  121:*/		return 0x82202B54;
		  /* 82202B54h */ case  122:  		/* mr R5, R28 */
		/* 82202B54h case  122:*/		regs.R5 = regs.R28;
		/* 82202B54h case  122:*/		return 0x82202B58;
		  /* 82202B58h */ case  123:  		/* addi R3, R1, 992 */
		/* 82202B58h case  123:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3E0);
		/* 82202B58h case  123:*/		return 0x82202B5C;
		  /* 82202B5Ch */ case  124:  		/* bl -51276 */
		/* 82202B5Ch case  124:*/		regs.LR = 0x82202B60; return 0x821F6310;
		/* 82202B5Ch case  124:*/		return 0x82202B60;
		  /* 82202B60h */ case  125:  		/* mr R5, R29 */
		/* 82202B60h case  125:*/		regs.R5 = regs.R29;
		/* 82202B60h case  125:*/		return 0x82202B64;
		  /* 82202B64h */ case  126:  		/* mr R4, R25 */
		/* 82202B64h case  126:*/		regs.R4 = regs.R25;
		/* 82202B64h case  126:*/		return 0x82202B68;
		  /* 82202B68h */ case  127:  		/* addi R3, R1, 2312 */
		/* 82202B68h case  127:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x908);
		/* 82202B68h case  127:*/		return 0x82202B6C;
		  /* 82202B6Ch */ case  128:  		/* bl -51292 */
		/* 82202B6Ch case  128:*/		regs.LR = 0x82202B70; return 0x821F6310;
		/* 82202B6Ch case  128:*/		return 0x82202B70;
		  /* 82202B70h */ case  129:  		/* mr R28, R29 */
		/* 82202B70h case  129:*/		regs.R28 = regs.R29;
		/* 82202B70h case  129:*/		return 0x82202B74;
		  /* 82202B74h */ case  130:  		/* cmplwi CR6, R28, 0 */
		/* 82202B74h case  130:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82202B74h case  130:*/		return 0x82202B78;
		  /* 82202B78h */ case  131:  		/* bc 12, CR6_EQ, 268 */
		/* 82202B78h case  131:*/		if ( regs.CR[6].eq ) { return 0x82202C84;  }
		/* 82202B78h case  131:*/		return 0x82202B7C;
		  /* 82202B7Ch */ case  132:  		/* cmplwi CR6, R28, 4 */
		/* 82202B7Ch case  132:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 82202B7Ch case  132:*/		return 0x82202B80;
		  /* 82202B80h */ case  133:  		/* mr R30, R28 */
		/* 82202B80h case  133:*/		regs.R30 = regs.R28;
		/* 82202B80h case  133:*/		return 0x82202B84;
		  /* 82202B84h */ case  134:  		/* bc 12, CR6_LT, 8 */
		/* 82202B84h case  134:*/		if ( regs.CR[6].lt ) { return 0x82202B8C;  }
		/* 82202B84h case  134:*/		return 0x82202B88;
		  /* 82202B88h */ case  135:  		/* li R30, 4 */
		/* 82202B88h case  135:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82202B88h case  135:*/		return 0x82202B8C;
	}
	return 0x82202B8C;
} // Block from 8220296Ch-82202B8Ch (136 instructions)

//////////////////////////////////////////////////////
// Block at 82202B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202B8C);
		  /* 82202B8Ch */ case    0:  		/* li R6, 228 */
		/* 82202B8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82202B8Ch case    0:*/		return 0x82202B90;
		  /* 82202B90h */ case    1:  		/* mr R5, R30 */
		/* 82202B90h case    1:*/		regs.R5 = regs.R30;
		/* 82202B90h case    1:*/		return 0x82202B94;
		  /* 82202B94h */ case    2:  		/* addi R4, R1, 992 */
		/* 82202B94h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3E0);
		/* 82202B94h case    2:*/		return 0x82202B98;
		  /* 82202B98h */ case    3:  		/* mr R3, R31 */
		/* 82202B98h case    3:*/		regs.R3 = regs.R31;
		/* 82202B98h case    3:*/		return 0x82202B9C;
		  /* 82202B9Ch */ case    4:  		/* bl -66644 */
		/* 82202B9Ch case    4:*/		regs.LR = 0x82202BA0; return 0x821F2748;
		/* 82202B9Ch case    4:*/		return 0x82202BA0;
		  /* 82202BA0h */ case    5:  		/* mr R24, R3 */
		/* 82202BA0h case    5:*/		regs.R24 = regs.R3;
		/* 82202BA0h case    5:*/		return 0x82202BA4;
		  /* 82202BA4h */ case    6:  		/* li R7, 1 */
		/* 82202BA4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82202BA4h case    6:*/		return 0x82202BA8;
		  /* 82202BA8h */ case    7:  		/* li R6, 0 */
		/* 82202BA8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82202BA8h case    7:*/		return 0x82202BAC;
		  /* 82202BACh */ case    8:  		/* mr R5, R30 */
		/* 82202BACh case    8:*/		regs.R5 = regs.R30;
		/* 82202BACh case    8:*/		return 0x82202BB0;
		  /* 82202BB0h */ case    9:  		/* addi R4, R1, 2312 */
		/* 82202BB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x908);
		/* 82202BB0h case    9:*/		return 0x82202BB4;
		  /* 82202BB4h */ case   10:  		/* mr R3, R31 */
		/* 82202BB4h case   10:*/		regs.R3 = regs.R31;
		/* 82202BB4h case   10:*/		return 0x82202BB8;
		  /* 82202BB8h */ case   11:  		/* bl -67224 */
		/* 82202BB8h case   11:*/		regs.LR = 0x82202BBC; return 0x821F2520;
		/* 82202BB8h case   11:*/		return 0x82202BBC;
		  /* 82202BBCh */ case   12:  		/* mr R23, R3 */
		/* 82202BBCh case   12:*/		regs.R23 = regs.R3;
		/* 82202BBCh case   12:*/		return 0x82202BC0;
		  /* 82202BC0h */ case   13:  		/* mr R4, R27 */
		/* 82202BC0h case   13:*/		regs.R4 = regs.R27;
		/* 82202BC0h case   13:*/		return 0x82202BC4;
		  /* 82202BC4h */ case   14:  		/* mr R3, R31 */
		/* 82202BC4h case   14:*/		regs.R3 = regs.R31;
		/* 82202BC4h case   14:*/		return 0x82202BC8;
		  /* 82202BC8h */ case   15:  		/* bl -568264 */
		/* 82202BC8h case   15:*/		regs.LR = 0x82202BCC; return 0x82178000;
		/* 82202BC8h case   15:*/		return 0x82202BCC;
		  /* 82202BCCh */ case   16:  		/* mr R22, R3 */
		/* 82202BCCh case   16:*/		regs.R22 = regs.R3;
		/* 82202BCCh case   16:*/		return 0x82202BD0;
		  /* 82202BD0h */ case   17:  		/* rlwinm R21, R30, 25, 4, 6 */
		/* 82202BD0h case   17:*/		cpu::op::rlwinm<0,25,4,6>(regs,&regs.R21,regs.R30);
		/* 82202BD0h case   17:*/		return 0x82202BD4;
		  /* 82202BD4h */ case   18:  		/* mr R4, R26 */
		/* 82202BD4h case   18:*/		regs.R4 = regs.R26;
		/* 82202BD4h case   18:*/		return 0x82202BD8;
		  /* 82202BD8h */ case   19:  		/* mr R3, R31 */
		/* 82202BD8h case   19:*/		regs.R3 = regs.R31;
		/* 82202BD8h case   19:*/		return 0x82202BDC;
		  /* 82202BDCh */ case   20:  		/* lwz R11, <#[R22]> */
		/* 82202BDCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82202BDCh case   20:*/		return 0x82202BE0;
		  /* 82202BE0h */ case   21:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 82202BE0h case   21:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 82202BE0h case   21:*/		return 0x82202BE4;
		  /* 82202BE4h */ case   22:  		/* or R11, R11, R21 */
		/* 82202BE4h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 82202BE4h case   22:*/		return 0x82202BE8;
		  /* 82202BE8h */ case   23:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 82202BE8h case   23:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 82202BE8h case   23:*/		return 0x82202BEC;
		  /* 82202BECh */ case   24:  		/* stw R11, <#[R22]> */
		/* 82202BECh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82202BECh case   24:*/		return 0x82202BF0;
		  /* 82202BF0h */ case   25:  		/* bl -568304 */
		/* 82202BF0h case   25:*/		regs.LR = 0x82202BF4; return 0x82178000;
		/* 82202BF0h case   25:*/		return 0x82202BF4;
		  /* 82202BF4h */ case   26:  		/* mr R20, R3 */
		/* 82202BF4h case   26:*/		regs.R20 = regs.R3;
		/* 82202BF4h case   26:*/		return 0x82202BF8;
		  /* 82202BF8h */ case   27:  		/* mr R5, R24 */
		/* 82202BF8h case   27:*/		regs.R5 = regs.R24;
		/* 82202BF8h case   27:*/		return 0x82202BFC;
		  /* 82202BFCh */ case   28:  		/* mr R4, R22 */
		/* 82202BFCh case   28:*/		regs.R4 = regs.R22;
		/* 82202BFCh case   28:*/		return 0x82202C00;
		  /* 82202C00h */ case   29:  		/* mr R3, R31 */
		/* 82202C00h case   29:*/		regs.R3 = regs.R31;
		/* 82202C00h case   29:*/		return 0x82202C04;
		  /* 82202C04h */ case   30:  		/* lwz R11, <#[R20]> */
		/* 82202C04h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82202C04h case   30:*/		return 0x82202C08;
		  /* 82202C08h */ case   31:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 82202C08h case   31:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 82202C08h case   31:*/		return 0x82202C0C;
		  /* 82202C0Ch */ case   32:  		/* or R11, R11, R21 */
		/* 82202C0Ch case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 82202C0Ch case   32:*/		return 0x82202C10;
		  /* 82202C10h */ case   33:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 82202C10h case   33:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 82202C10h case   33:*/		return 0x82202C14;
		  /* 82202C14h */ case   34:  		/* stw R11, <#[R20]> */
		/* 82202C14h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82202C14h case   34:*/		return 0x82202C18;
		  /* 82202C18h */ case   35:  		/* bl -84448 */
		/* 82202C18h case   35:*/		regs.LR = 0x82202C1C; return 0x821EE238;
		/* 82202C18h case   35:*/		return 0x82202C1C;
		  /* 82202C1Ch */ case   36:  		/* mr R24, R3 */
		/* 82202C1Ch case   36:*/		regs.R24 = regs.R3;
		/* 82202C1Ch case   36:*/		return 0x82202C20;
		  /* 82202C20h */ case   37:  		/* mr R5, R23 */
		/* 82202C20h case   37:*/		regs.R5 = regs.R23;
		/* 82202C20h case   37:*/		return 0x82202C24;
		  /* 82202C24h */ case   38:  		/* mr R4, R20 */
		/* 82202C24h case   38:*/		regs.R4 = regs.R20;
		/* 82202C24h case   38:*/		return 0x82202C28;
		  /* 82202C28h */ case   39:  		/* mr R3, R31 */
		/* 82202C28h case   39:*/		regs.R3 = regs.R31;
		/* 82202C28h case   39:*/		return 0x82202C2C;
		  /* 82202C2Ch */ case   40:  		/* bl -84468 */
		/* 82202C2Ch case   40:*/		regs.LR = 0x82202C30; return 0x821EE238;
		/* 82202C2Ch case   40:*/		return 0x82202C30;
		  /* 82202C30h */ case   41:  		/* mr R11, R3 */
		/* 82202C30h case   41:*/		regs.R11 = regs.R3;
		/* 82202C30h case   41:*/		return 0x82202C34;
		  /* 82202C34h */ case   42:  		/* li R7, 228 */
		/* 82202C34h case   42:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202C34h case   42:*/		return 0x82202C38;
		  /* 82202C38h */ case   43:  		/* li R6, 4 */
		/* 82202C38h case   43:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82202C38h case   43:*/		return 0x82202C3C;
		  /* 82202C3Ch */ case   44:  		/* mr R3, R31 */
		/* 82202C3Ch case   44:*/		regs.R3 = regs.R31;
		/* 82202C3Ch case   44:*/		return 0x82202C40;
		  /* 82202C40h */ case   45:  		/* mr R4, R11 */
		/* 82202C40h case   45:*/		regs.R4 = regs.R11;
		/* 82202C40h case   45:*/		return 0x82202C44;
		  /* 82202C44h */ case   46:  		/* lwz R10, <#[R11 + 8]> */
		/* 82202C44h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82202C44h case   46:*/		return 0x82202C48;
		  /* 82202C48h */ case   47:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82202C48h case   47:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82202C48h case   47:*/		return 0x82202C4C;
		  /* 82202C4Ch */ case   48:  		/* bl 128500 */
		/* 82202C4Ch case   48:*/		regs.LR = 0x82202C50; return 0x82222240;
		/* 82202C4Ch case   48:*/		return 0x82202C50;
		  /* 82202C50h */ case   49:  		/* mr R5, R3 */
		/* 82202C50h case   49:*/		regs.R5 = regs.R3;
		/* 82202C50h case   49:*/		return 0x82202C54;
		  /* 82202C54h */ case   50:  		/* mr R4, R24 */
		/* 82202C54h case   50:*/		regs.R4 = regs.R24;
		/* 82202C54h case   50:*/		return 0x82202C58;
		  /* 82202C58h */ case   51:  		/* mr R3, R31 */
		/* 82202C58h case   51:*/		regs.R3 = regs.R31;
		/* 82202C58h case   51:*/		return 0x82202C5C;
		  /* 82202C5Ch */ case   52:  		/* bl -78940 */
		/* 82202C5Ch case   52:*/		regs.LR = 0x82202C60; return 0x821EF800;
		/* 82202C5Ch case   52:*/		return 0x82202C60;
		  /* 82202C60h */ case   53:  		/* mr R5, R3 */
		/* 82202C60h case   53:*/		regs.R5 = regs.R3;
		/* 82202C60h case   53:*/		return 0x82202C64;
		  /* 82202C64h */ case   54:  		/* mr R4, R30 */
		/* 82202C64h case   54:*/		regs.R4 = regs.R30;
		/* 82202C64h case   54:*/		return 0x82202C68;
		  /* 82202C68h */ case   55:  		/* addi R3, R1, 992 */
		/* 82202C68h case   55:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3E0);
		/* 82202C68h case   55:*/		return 0x82202C6C;
		  /* 82202C6Ch */ case   56:  		/* bl -68948 */
		/* 82202C6Ch case   56:*/		regs.LR = 0x82202C70; return 0x821F1F18;
		/* 82202C6Ch case   56:*/		return 0x82202C70;
		  /* 82202C70h */ case   57:  		/* li R4, 0 */
		/* 82202C70h case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82202C70h case   57:*/		return 0x82202C74;
		  /* 82202C74h */ case   58:  		/* addi R3, R1, 992 */
		/* 82202C74h case   58:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3E0);
		/* 82202C74h case   58:*/		return 0x82202C78;
		  /* 82202C78h */ case   59:  		/* subf R28, R30, R28 */
		/* 82202C78h case   59:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R30,regs.R28);
		/* 82202C78h case   59:*/		return 0x82202C7C;
		  /* 82202C7Ch */ case   60:  		/* bl -85636 */
		/* 82202C7Ch case   60:*/		regs.LR = 0x82202C80; return 0x821EDDF8;
		/* 82202C7Ch case   60:*/		return 0x82202C80;
		  /* 82202C80h */ case   61:  		/* b -268 */
		/* 82202C80h case   61:*/		return 0x82202B74;
		/* 82202C80h case   61:*/		return 0x82202C84;
	}
	return 0x82202C84;
} // Block from 82202B8Ch-82202C84h (62 instructions)

//////////////////////////////////////////////////////
// Block at 82202C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202C84);
		  /* 82202C84h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82202C84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82202C84h case    0:*/		return 0x82202C88;
		  /* 82202C88h */ case    1:  		/* bc 12, CR6_EQ, -26984 */
		/* 82202C88h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82202C88h case    1:*/		return 0x82202C8C;
		  /* 82202C8Ch */ case    2:  		/* mr R5, R29 */
		/* 82202C8Ch case    2:*/		regs.R5 = regs.R29;
		/* 82202C8Ch case    2:*/		return 0x82202C90;
		  /* 82202C90h */ case    3:  		/* mr R4, R25 */
		/* 82202C90h case    3:*/		regs.R4 = regs.R25;
		/* 82202C90h case    3:*/		return 0x82202C94;
		  /* 82202C94h */ case    4:  		/* addi R3, R1, 2928 */
		/* 82202C94h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB70);
		/* 82202C94h case    4:*/		return 0x82202C98;
		  /* 82202C98h */ case    5:  		/* b -21260 */
		/* 82202C98h case    5:*/		return 0x821FD98C;
		/* 82202C98h case    5:*/		return 0x82202C9C;
		  /* 82202C9Ch */ case    6:  		/* li R5, 4 */
		/* 82202C9Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82202C9Ch case    6:*/		return 0x82202CA0;
		  /* 82202CA0h */ case    7:  		/* fmr FR4, FR15 */
		/* 82202CA0h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR15);
		/* 82202CA0h case    7:*/		return 0x82202CA4;
		  /* 82202CA4h */ case    8:  		/* mr R4, R31 */
		/* 82202CA4h case    8:*/		regs.R4 = regs.R31;
		/* 82202CA4h case    8:*/		return 0x82202CA8;
		  /* 82202CA8h */ case    9:  		/* fmr FR3, FR15 */
		/* 82202CA8h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR15);
		/* 82202CA8h case    9:*/		return 0x82202CAC;
		  /* 82202CACh */ case   10:  		/* addi R3, R1, 432 */
		/* 82202CACh case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1B0);
		/* 82202CACh case   10:*/		return 0x82202CB0;
		  /* 82202CB0h */ case   11:  		/* fmr FR2, FR15 */
		/* 82202CB0h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR15);
		/* 82202CB0h case   11:*/		return 0x82202CB4;
		  /* 82202CB4h */ case   12:  		/* fmr FR1, FR15 */
		/* 82202CB4h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR15);
		/* 82202CB4h case   12:*/		return 0x82202CB8;
		  /* 82202CB8h */ case   13:  		/* bl 147864 */
		/* 82202CB8h case   13:*/		regs.LR = 0x82202CBC; return 0x82226E50;
		/* 82202CB8h case   13:*/		return 0x82202CBC;
		  /* 82202CBCh */ case   14:  		/* lwz R11, <#[R1 + 436]> */
		/* 82202CBCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001B4) );
		/* 82202CBCh case   14:*/		return 0x82202CC0;
		  /* 82202CC0h */ case   15:  		/* mr R5, R29 */
		/* 82202CC0h case   15:*/		regs.R5 = regs.R29;
		/* 82202CC0h case   15:*/		return 0x82202CC4;
		  /* 82202CC4h */ case   16:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82202CC4h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202CC4h case   16:*/		return 0x82202CC8;
		  /* 82202CC8h */ case   17:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 82202CC8h case   17:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 82202CC8h case   17:*/		return 0x82202CCC;
		  /* 82202CCCh */ case   18:  		/* addi R3, R1, 1024 */
		/* 82202CCCh case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x400);
		/* 82202CCCh case   18:*/		return 0x82202CD0;
		  /* 82202CD0h */ case   19:  		/* oris R11, R11, 2 */
		/* 82202CD0h case   19:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82202CD0h case   19:*/		return 0x82202CD4;
		  /* 82202CD4h */ case   20:  		/* stw R11, <#[R1 + 436]> */
		/* 82202CD4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B4) );
		/* 82202CD4h case   20:*/		return 0x82202CD8;
		  /* 82202CD8h */ case   21:  		/* bl -51656 */
		/* 82202CD8h case   21:*/		regs.LR = 0x82202CDC; return 0x821F6310;
		/* 82202CD8h case   21:*/		return 0x82202CDC;
		  /* 82202CDCh */ case   22:  		/* cmplwi CR6, R29, 0 */
		/* 82202CDCh case   22:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82202CDCh case   22:*/		return 0x82202CE0;
		  /* 82202CE0h */ case   23:  		/* bc 12, CR6_EQ, -27072 */
		/* 82202CE0h case   23:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82202CE0h case   23:*/		return 0x82202CE4;
		  /* 82202CE4h */ case   24:  		/* cmplwi CR6, R29, 4 */
		/* 82202CE4h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82202CE4h case   24:*/		return 0x82202CE8;
		  /* 82202CE8h */ case   25:  		/* mr R30, R29 */
		/* 82202CE8h case   25:*/		regs.R30 = regs.R29;
		/* 82202CE8h case   25:*/		return 0x82202CEC;
		  /* 82202CECh */ case   26:  		/* bc 12, CR6_LT, 8 */
		/* 82202CECh case   26:*/		if ( regs.CR[6].lt ) { return 0x82202CF4;  }
		/* 82202CECh case   26:*/		return 0x82202CF0;
		  /* 82202CF0h */ case   27:  		/* li R30, 4 */
		/* 82202CF0h case   27:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82202CF0h case   27:*/		return 0x82202CF4;
	}
	return 0x82202CF4;
} // Block from 82202C84h-82202CF4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82202CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202CF4);
		  /* 82202CF4h */ case    0:  		/* li R6, 228 */
		/* 82202CF4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82202CF4h case    0:*/		return 0x82202CF8;
		  /* 82202CF8h */ case    1:  		/* mr R5, R30 */
		/* 82202CF8h case    1:*/		regs.R5 = regs.R30;
		/* 82202CF8h case    1:*/		return 0x82202CFC;
		  /* 82202CFCh */ case    2:  		/* addi R4, R1, 1024 */
		/* 82202CFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x400);
		/* 82202CFCh case    2:*/		return 0x82202D00;
		  /* 82202D00h */ case    3:  		/* mr R3, R31 */
		/* 82202D00h case    3:*/		regs.R3 = regs.R31;
		/* 82202D00h case    3:*/		return 0x82202D04;
		  /* 82202D04h */ case    4:  		/* bl -67004 */
		/* 82202D04h case    4:*/		regs.LR = 0x82202D08; return 0x821F2748;
		/* 82202D04h case    4:*/		return 0x82202D08;
		  /* 82202D08h */ case    5:  		/* mr R28, R3 */
		/* 82202D08h case    5:*/		regs.R28 = regs.R3;
		/* 82202D08h case    5:*/		return 0x82202D0C;
		  /* 82202D0Ch */ case    6:  		/* addi R4, R1, 432 */
		/* 82202D0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1B0);
		/* 82202D0Ch case    6:*/		return 0x82202D10;
		  /* 82202D10h */ case    7:  		/* mr R3, R31 */
		/* 82202D10h case    7:*/		regs.R3 = regs.R31;
		/* 82202D10h case    7:*/		return 0x82202D14;
		  /* 82202D14h */ case    8:  		/* bl -67988 */
		/* 82202D14h case    8:*/		regs.LR = 0x82202D18; return 0x821F2380;
		/* 82202D14h case    8:*/		return 0x82202D18;
		  /* 82202D18h */ case    9:  		/* mr R11, R3 */
		/* 82202D18h case    9:*/		regs.R11 = regs.R3;
		/* 82202D18h case    9:*/		return 0x82202D1C;
		  /* 82202D1Ch */ case   10:  		/* mr R4, R28 */
		/* 82202D1Ch case   10:*/		regs.R4 = regs.R28;
		/* 82202D1Ch case   10:*/		return 0x82202D20;
		  /* 82202D20h */ case   11:  		/* mr R3, R31 */
		/* 82202D20h case   11:*/		regs.R3 = regs.R31;
		/* 82202D20h case   11:*/		return 0x82202D24;
		  /* 82202D24h */ case   12:  		/* mr R5, R11 */
		/* 82202D24h case   12:*/		regs.R5 = regs.R11;
		/* 82202D24h case   12:*/		return 0x82202D28;
		  /* 82202D28h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82202D28h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82202D28h case   13:*/		return 0x82202D2C;
		  /* 82202D2Ch */ case   14:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 82202D2Ch case   14:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 82202D2Ch case   14:*/		return 0x82202D30;
		  /* 82202D30h */ case   15:  		/* stw R10, <#[R11]> */
		/* 82202D30h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82202D30h case   15:*/		return 0x82202D34;
		  /* 82202D34h */ case   16:  		/* bl -84972 */
		/* 82202D34h case   16:*/		regs.LR = 0x82202D38; return 0x821EE148;
		/* 82202D34h case   16:*/		return 0x82202D38;
		  /* 82202D38h */ case   17:  		/* mr R28, R3 */
		/* 82202D38h case   17:*/		regs.R28 = regs.R3;
		/* 82202D38h case   17:*/		return 0x82202D3C;
		  /* 82202D3Ch */ case   18:  		/* mr R3, R31 */
		/* 82202D3Ch case   18:*/		regs.R3 = regs.R31;
		/* 82202D3Ch case   18:*/		return 0x82202D40;
		  /* 82202D40h */ case   19:  		/* mr R4, R28 */
		/* 82202D40h case   19:*/		regs.R4 = regs.R28;
		/* 82202D40h case   19:*/		return 0x82202D44;
		  /* 82202D44h */ case   20:  		/* bl -78052 */
		/* 82202D44h case   20:*/		regs.LR = 0x82202D48; return 0x821EFC60;
		/* 82202D44h case   20:*/		return 0x82202D48;
		  /* 82202D48h */ case   21:  		/* mr R11, R3 */
		/* 82202D48h case   21:*/		regs.R11 = regs.R3;
		/* 82202D48h case   21:*/		return 0x82202D4C;
		  /* 82202D4Ch */ case   22:  		/* li R7, 228 */
		/* 82202D4Ch case   22:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202D4Ch case   22:*/		return 0x82202D50;
		  /* 82202D50h */ case   23:  		/* li R6, 4 */
		/* 82202D50h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82202D50h case   23:*/		return 0x82202D54;
		  /* 82202D54h */ case   24:  		/* mr R3, R31 */
		/* 82202D54h case   24:*/		regs.R3 = regs.R31;
		/* 82202D54h case   24:*/		return 0x82202D58;
		  /* 82202D58h */ case   25:  		/* mr R4, R11 */
		/* 82202D58h case   25:*/		regs.R4 = regs.R11;
		/* 82202D58h case   25:*/		return 0x82202D5C;
		  /* 82202D5Ch */ case   26:  		/* lwz R10, <#[R11 + 8]> */
		/* 82202D5Ch case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82202D5Ch case   26:*/		return 0x82202D60;
		  /* 82202D60h */ case   27:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82202D60h case   27:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82202D60h case   27:*/		return 0x82202D64;
		  /* 82202D64h */ case   28:  		/* bl 128220 */
		/* 82202D64h case   28:*/		regs.LR = 0x82202D68; return 0x82222240;
		/* 82202D64h case   28:*/		return 0x82202D68;
		  /* 82202D68h */ case   29:  		/* mr R5, R3 */
		/* 82202D68h case   29:*/		regs.R5 = regs.R3;
		/* 82202D68h case   29:*/		return 0x82202D6C;
		  /* 82202D6Ch */ case   30:  		/* mr R4, R28 */
		/* 82202D6Ch case   30:*/		regs.R4 = regs.R28;
		/* 82202D6Ch case   30:*/		return 0x82202D70;
		  /* 82202D70h */ case   31:  		/* mr R3, R31 */
		/* 82202D70h case   31:*/		regs.R3 = regs.R31;
		/* 82202D70h case   31:*/		return 0x82202D74;
		  /* 82202D74h */ case   32:  		/* bl -79220 */
		/* 82202D74h case   32:*/		regs.LR = 0x82202D78; return 0x821EF800;
		/* 82202D74h case   32:*/		return 0x82202D78;
		  /* 82202D78h */ case   33:  		/* mr R5, R3 */
		/* 82202D78h case   33:*/		regs.R5 = regs.R3;
		/* 82202D78h case   33:*/		return 0x82202D7C;
		  /* 82202D7Ch */ case   34:  		/* mr R4, R30 */
		/* 82202D7Ch case   34:*/		regs.R4 = regs.R30;
		/* 82202D7Ch case   34:*/		return 0x82202D80;
		  /* 82202D80h */ case   35:  		/* addi R3, R1, 1024 */
		/* 82202D80h case   35:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x400);
		/* 82202D80h case   35:*/		return 0x82202D84;
		  /* 82202D84h */ case   36:  		/* bl -69228 */
		/* 82202D84h case   36:*/		regs.LR = 0x82202D88; return 0x821F1F18;
		/* 82202D84h case   36:*/		return 0x82202D88;
		  /* 82202D88h */ case   37:  		/* li R4, 0 */
		/* 82202D88h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82202D88h case   37:*/		return 0x82202D8C;
		  /* 82202D8Ch */ case   38:  		/* addi R3, R1, 1024 */
		/* 82202D8Ch case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x400);
		/* 82202D8Ch case   38:*/		return 0x82202D90;
		  /* 82202D90h */ case   39:  		/* subf R29, R30, R29 */
		/* 82202D90h case   39:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82202D90h case   39:*/		return 0x82202D94;
		  /* 82202D94h */ case   40:  		/* bl -85916 */
		/* 82202D94h case   40:*/		regs.LR = 0x82202D98; return 0x821EDDF8;
		/* 82202D94h case   40:*/		return 0x82202D98;
		  /* 82202D98h */ case   41:  		/* b -188 */
		/* 82202D98h case   41:*/		return 0x82202CDC;
		/* 82202D98h case   41:*/		return 0x82202D9C;
	}
	return 0x82202D9C;
} // Block from 82202CF4h-82202D9Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 82202D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202D9C);
		  /* 82202D9Ch */ case    0:  		/* mr R5, R29 */
		/* 82202D9Ch case    0:*/		regs.R5 = regs.R29;
		/* 82202D9Ch case    0:*/		return 0x82202DA0;
		  /* 82202DA0h */ case    1:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82202DA0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202DA0h case    1:*/		return 0x82202DA4;
		  /* 82202DA4h */ case    2:  		/* addi R3, R1, 1056 */
		/* 82202DA4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x420);
		/* 82202DA4h case    2:*/		return 0x82202DA8;
		  /* 82202DA8h */ case    3:  		/* bl -51864 */
		/* 82202DA8h case    3:*/		regs.LR = 0x82202DAC; return 0x821F6310;
		/* 82202DA8h case    3:*/		return 0x82202DAC;
		  /* 82202DACh */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82202DACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82202DACh case    4:*/		return 0x82202DB0;
		  /* 82202DB0h */ case    5:  		/* bc 12, CR6_EQ, -27280 */
		/* 82202DB0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82202DB0h case    5:*/		return 0x82202DB4;
		  /* 82202DB4h */ case    6:  		/* cmplwi CR6, R29, 4 */
		/* 82202DB4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82202DB4h case    6:*/		return 0x82202DB8;
		  /* 82202DB8h */ case    7:  		/* mr R30, R29 */
		/* 82202DB8h case    7:*/		regs.R30 = regs.R29;
		/* 82202DB8h case    7:*/		return 0x82202DBC;
		  /* 82202DBCh */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 82202DBCh case    8:*/		if ( regs.CR[6].lt ) { return 0x82202DC4;  }
		/* 82202DBCh case    8:*/		return 0x82202DC0;
		  /* 82202DC0h */ case    9:  		/* li R30, 4 */
		/* 82202DC0h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82202DC0h case    9:*/		return 0x82202DC4;
	}
	return 0x82202DC4;
} // Block from 82202D9Ch-82202DC4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82202DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82202DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82202DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82202DC4);
		  /* 82202DC4h */ case    0:  		/* li R6, 228 */
		/* 82202DC4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82202DC4h case    0:*/		return 0x82202DC8;
		  /* 82202DC8h */ case    1:  		/* mr R5, R30 */
		/* 82202DC8h case    1:*/		regs.R5 = regs.R30;
		/* 82202DC8h case    1:*/		return 0x82202DCC;
		  /* 82202DCCh */ case    2:  		/* addi R4, R1, 1056 */
		/* 82202DCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x420);
		/* 82202DCCh case    2:*/		return 0x82202DD0;
		  /* 82202DD0h */ case    3:  		/* mr R3, R31 */
		/* 82202DD0h case    3:*/		regs.R3 = regs.R31;
		/* 82202DD0h case    3:*/		return 0x82202DD4;
		  /* 82202DD4h */ case    4:  		/* bl -67212 */
		/* 82202DD4h case    4:*/		regs.LR = 0x82202DD8; return 0x821F2748;
		/* 82202DD4h case    4:*/		return 0x82202DD8;
		  /* 82202DD8h */ case    5:  		/* mr R28, R3 */
		/* 82202DD8h case    5:*/		regs.R28 = regs.R3;
		/* 82202DD8h case    5:*/		return 0x82202DDC;
		  /* 82202DDCh */ case    6:  		/* mr R3, R31 */
		/* 82202DDCh case    6:*/		regs.R3 = regs.R31;
		/* 82202DDCh case    6:*/		return 0x82202DE0;
		  /* 82202DE0h */ case    7:  		/* mr R4, R28 */
		/* 82202DE0h case    7:*/		regs.R4 = regs.R28;
		/* 82202DE0h case    7:*/		return 0x82202DE4;
		  /* 82202DE4h */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 82202DE4h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 82202DE4h case    8:*/		return 0x82202DE8;
		  /* 82202DE8h */ case    9:  		/* bl -597240 */
		/* 82202DE8h case    9:*/		regs.LR = 0x82202DEC; return 0x821710F0;
		/* 82202DE8h case    9:*/		return 0x82202DEC;
		  /* 82202DECh */ case   10:  		/* li R4, 4 */
		/* 82202DECh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82202DECh case   10:*/		return 0x82202DF0;
		  /* 82202DF0h */ case   11:  		/* mr R27, R3 */
		/* 82202DF0h case   11:*/		regs.R27 = regs.R3;
		/* 82202DF0h case   11:*/		return 0x82202DF4;
		  /* 82202DF4h */ case   12:  		/* bl -570164 */
		/* 82202DF4h case   12:*/		regs.LR = 0x82202DF8; return 0x82177AC0;
		/* 82202DF4h case   12:*/		return 0x82202DF8;
		  /* 82202DF8h */ case   13:  		/* mr R5, R27 */
		/* 82202DF8h case   13:*/		regs.R5 = regs.R27;
		/* 82202DF8h case   13:*/		return 0x82202DFC;
		  /* 82202DFCh */ case   14:  		/* mr R4, R28 */
		/* 82202DFCh case   14:*/		regs.R4 = regs.R28;
		/* 82202DFCh case   14:*/		return 0x82202E00;
		  /* 82202E00h */ case   15:  		/* mr R3, R31 */
		/* 82202E00h case   15:*/		regs.R3 = regs.R31;
		/* 82202E00h case   15:*/		return 0x82202E04;
		  /* 82202E04h */ case   16:  		/* bl -83980 */
		/* 82202E04h case   16:*/		regs.LR = 0x82202E08; return 0x821EE5F8;
		/* 82202E04h case   16:*/		return 0x82202E08;
		  /* 82202E08h */ case   17:  		/* mr R26, R3 */
		/* 82202E08h case   17:*/		regs.R26 = regs.R3;
		/* 82202E08h case   17:*/		return 0x82202E0C;
		  /* 82202E0Ch */ case   18:  		/* mr R5, R28 */
		/* 82202E0Ch case   18:*/		regs.R5 = regs.R28;
		/* 82202E0Ch case   18:*/		return 0x82202E10;
		  /* 82202E10h */ case   19:  		/* mr R4, R27 */
		/* 82202E10h case   19:*/		regs.R4 = regs.R27;
		/* 82202E10h case   19:*/		return 0x82202E14;
		  /* 82202E14h */ case   20:  		/* mr R3, R31 */
		/* 82202E14h case   20:*/		regs.R3 = regs.R31;
		/* 82202E14h case   20:*/		return 0x82202E18;
		  /* 82202E18h */ case   21:  		/* bl -84000 */
		/* 82202E18h case   21:*/		regs.LR = 0x82202E1C; return 0x821EE5F8;
		/* 82202E18h case   21:*/		return 0x82202E1C;
		  /* 82202E1Ch */ case   22:  		/* mr R11, R3 */
		/* 82202E1Ch case   22:*/		regs.R11 = regs.R3;
		/* 82202E1Ch case   22:*/		return 0x82202E20;
		  /* 82202E20h */ case   23:  		/* li R7, 228 */
		/* 82202E20h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202E20h case   23:*/		return 0x82202E24;
		  /* 82202E24h */ case   24:  		/* li R6, 4 */
		/* 82202E24h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82202E24h case   24:*/		return 0x82202E28;
		  /* 82202E28h */ case   25:  		/* mr R3, R31 */
		/* 82202E28h case   25:*/		regs.R3 = regs.R31;
		/* 82202E28h case   25:*/		return 0x82202E2C;
		  /* 82202E2Ch */ case   26:  		/* mr R4, R11 */
		/* 82202E2Ch case   26:*/		regs.R4 = regs.R11;
		/* 82202E2Ch case   26:*/		return 0x82202E30;
		  /* 82202E30h */ case   27:  		/* lwz R10, <#[R11 + 8]> */
		/* 82202E30h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82202E30h case   27:*/		return 0x82202E34;
		  /* 82202E34h */ case   28:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82202E34h case   28:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82202E34h case   28:*/		return 0x82202E38;
		  /* 82202E38h */ case   29:  		/* bl 128008 */
		/* 82202E38h case   29:*/		regs.LR = 0x82202E3C; return 0x82222240;
		/* 82202E38h case   29:*/		return 0x82202E3C;
		  /* 82202E3Ch */ case   30:  		/* mr R5, R3 */
		/* 82202E3Ch case   30:*/		regs.R5 = regs.R3;
		/* 82202E3Ch case   30:*/		return 0x82202E40;
		  /* 82202E40h */ case   31:  		/* mr R4, R26 */
		/* 82202E40h case   31:*/		regs.R4 = regs.R26;
		/* 82202E40h case   31:*/		return 0x82202E44;
		  /* 82202E44h */ case   32:  		/* mr R3, R31 */
		/* 82202E44h case   32:*/		regs.R3 = regs.R31;
		/* 82202E44h case   32:*/		return 0x82202E48;
		  /* 82202E48h */ case   33:  		/* bl -79432 */
		/* 82202E48h case   33:*/		regs.LR = 0x82202E4C; return 0x821EF800;
		/* 82202E48h case   33:*/		return 0x82202E4C;
		  /* 82202E4Ch */ case   34:  		/* mr R5, R3 */
		/* 82202E4Ch case   34:*/		regs.R5 = regs.R3;
		/* 82202E4Ch case   34:*/		return 0x82202E50;
		  /* 82202E50h */ case   35:  		/* mr R4, R30 */
		/* 82202E50h case   35:*/		regs.R4 = regs.R30;
		/* 82202E50h case   35:*/		return 0x82202E54;
		  /* 82202E54h */ case   36:  		/* addi R3, R1, 1056 */
		/* 82202E54h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x420);
		/* 82202E54h case   36:*/		return 0x82202E58;
		  /* 82202E58h */ case   37:  		/* bl -69440 */
		/* 82202E58h case   37:*/		regs.LR = 0x82202E5C; return 0x821F1F18;
		/* 82202E58h case   37:*/		return 0x82202E5C;
		  /* 82202E5Ch */ case   38:  		/* li R4, 0 */
		/* 82202E5Ch case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82202E5Ch case   38:*/		return 0x82202E60;
		  /* 82202E60h */ case   39:  		/* addi R3, R1, 1056 */
		/* 82202E60h case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x420);
		/* 82202E60h case   39:*/		return 0x82202E64;
		  /* 82202E64h */ case   40:  		/* subf R29, R30, R29 */
		/* 82202E64h case   40:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82202E64h case   40:*/		return 0x82202E68;
		  /* 82202E68h */ case   41:  		/* bl -86128 */
		/* 82202E68h case   41:*/		regs.LR = 0x82202E6C; return 0x821EDDF8;
		/* 82202E68h case   41:*/		return 0x82202E6C;
		  /* 82202E6Ch */ case   42:  		/* b -192 */
		/* 82202E6Ch case   42:*/		return 0x82202DAC;
		/* 82202E6Ch case   42:*/		return 0x82202E70;
		  /* 82202E70h */ case   43:  		/* li R5, 1 */
		/* 82202E70h case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82202E70h case   43:*/		return 0x82202E74;
		  /* 82202E74h */ case   44:  		/* lfs FR1, <#[R1 + 456]> */
		/* 82202E74h case   44:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000001C8) );
		/* 82202E74h case   44:*/		return 0x82202E78;
		  /* 82202E78h */ case   45:  		/* mr R4, R31 */
		/* 82202E78h case   45:*/		regs.R4 = regs.R31;
		/* 82202E78h case   45:*/		return 0x82202E7C;
		  /* 82202E7Ch */ case   46:  		/* fmr FR4, FR31 */
		/* 82202E7Ch case   46:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 82202E7Ch case   46:*/		return 0x82202E80;
		  /* 82202E80h */ case   47:  		/* addi R3, R1, 1184 */
		/* 82202E80h case   47:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4A0);
		/* 82202E80h case   47:*/		return 0x82202E84;
		  /* 82202E84h */ case   48:  		/* fmr FR3, FR31 */
		/* 82202E84h case   48:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82202E84h case   48:*/		return 0x82202E88;
		  /* 82202E88h */ case   49:  		/* fmr FR2, FR31 */
		/* 82202E88h case   49:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82202E88h case   49:*/		return 0x82202E8C;
		  /* 82202E8Ch */ case   50:  		/* bl 147396 */
		/* 82202E8Ch case   50:*/		regs.LR = 0x82202E90; return 0x82226E50;
		/* 82202E8Ch case   50:*/		return 0x82202E90;
		  /* 82202E90h */ case   51:  		/* lwz R28, <#[R1 + 3500]> */
		/* 82202E90h case   51:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82202E90h case   51:*/		return 0x82202E94;
		  /* 82202E94h */ case   52:  		/* mulli R5, R29, 3 */
		/* 82202E94h case   52:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 82202E94h case   52:*/		return 0x82202E98;
		  /* 82202E98h */ case   53:  		/* mr R4, R28 */
		/* 82202E98h case   53:*/		regs.R4 = regs.R28;
		/* 82202E98h case   53:*/		return 0x82202E9C;
		  /* 82202E9Ch */ case   54:  		/* addi R3, R1, 2344 */
		/* 82202E9Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x928);
		/* 82202E9Ch case   54:*/		return 0x82202EA0;
		  /* 82202EA0h */ case   55:  		/* bl -52112 */
		/* 82202EA0h case   55:*/		regs.LR = 0x82202EA4; return 0x821F6310;
		/* 82202EA0h case   55:*/		return 0x82202EA4;
		  /* 82202EA4h */ case   56:  		/* rlwinm R30, R29, 1, 0, 30 */
		/* 82202EA4h case   56:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R29);
		/* 82202EA4h case   56:*/		return 0x82202EA8;
		  /* 82202EA8h */ case   57:  		/* mr R4, R28 */
		/* 82202EA8h case   57:*/		regs.R4 = regs.R28;
		/* 82202EA8h case   57:*/		return 0x82202EAC;
		  /* 82202EACh */ case   58:  		/* mr R5, R30 */
		/* 82202EACh case   58:*/		regs.R5 = regs.R30;
		/* 82202EACh case   58:*/		return 0x82202EB0;
		  /* 82202EB0h */ case   59:  		/* addi R3, R1, 2376 */
		/* 82202EB0h case   59:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x948);
		/* 82202EB0h case   59:*/		return 0x82202EB4;
		  /* 82202EB4h */ case   60:  		/* bl -52132 */
		/* 82202EB4h case   60:*/		regs.LR = 0x82202EB8; return 0x821F6310;
		/* 82202EB4h case   60:*/		return 0x82202EB8;
		  /* 82202EB8h */ case   61:  		/* mr R5, R29 */
		/* 82202EB8h case   61:*/		regs.R5 = regs.R29;
		/* 82202EB8h case   61:*/		return 0x82202EBC;
		  /* 82202EBCh */ case   62:  		/* mr R4, R28 */
		/* 82202EBCh case   62:*/		regs.R4 = regs.R28;
		/* 82202EBCh case   62:*/		return 0x82202EC0;
		  /* 82202EC0h */ case   63:  		/* addi R3, R1, 2408 */
		/* 82202EC0h case   63:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x968);
		/* 82202EC0h case   63:*/		return 0x82202EC4;
		  /* 82202EC4h */ case   64:  		/* bl -52148 */
		/* 82202EC4h case   64:*/		regs.LR = 0x82202EC8; return 0x821F6310;
		/* 82202EC4h case   64:*/		return 0x82202EC8;
		  /* 82202EC8h */ case   65:  		/* cmplwi CR6, R29, 0 */
		/* 82202EC8h case   65:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82202EC8h case   65:*/		return 0x82202ECC;
		  /* 82202ECCh */ case   66:  		/* bc 12, CR6_EQ, 340 */
		/* 82202ECCh case   66:*/		if ( regs.CR[6].eq ) { return 0x82203020;  }
		/* 82202ECCh case   66:*/		return 0x82202ED0;
		  /* 82202ED0h */ case   67:  		/* addi R3, R1, 2344 */
		/* 82202ED0h case   67:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x928);
		/* 82202ED0h case   67:*/		return 0x82202ED4;
		  /* 82202ED4h */ case   68:  		/* bl -270452 */
		/* 82202ED4h case   68:*/		regs.LR = 0x82202ED8; return 0x821C0E60;
		/* 82202ED4h case   68:*/		return 0x82202ED8;
		  /* 82202ED8h */ case   69:  		/* mr R27, R3 */
		/* 82202ED8h case   69:*/		regs.R27 = regs.R3;
		/* 82202ED8h case   69:*/		return 0x82202EDC;
		  /* 82202EDCh */ case   70:  		/* addi R3, R1, 2376 */
		/* 82202EDCh case   70:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x948);
		/* 82202EDCh case   70:*/		return 0x82202EE0;
		  /* 82202EE0h */ case   71:  		/* bl -270464 */
		/* 82202EE0h case   71:*/		regs.LR = 0x82202EE4; return 0x821C0E60;
		/* 82202EE0h case   71:*/		return 0x82202EE4;
		  /* 82202EE4h */ case   72:  		/* mr R26, R3 */
		/* 82202EE4h case   72:*/		regs.R26 = regs.R3;
		/* 82202EE4h case   72:*/		return 0x82202EE8;
		  /* 82202EE8h */ case   73:  		/* addi R3, R1, 2408 */
		/* 82202EE8h case   73:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x968);
		/* 82202EE8h case   73:*/		return 0x82202EEC;
		  /* 82202EECh */ case   74:  		/* bl -270476 */
		/* 82202EECh case   74:*/		regs.LR = 0x82202EF0; return 0x821C0E60;
		/* 82202EECh case   74:*/		return 0x82202EF0;
		  /* 82202EF0h */ case   75:  		/* mr R25, R3 */
		/* 82202EF0h case   75:*/		regs.R25 = regs.R3;
		/* 82202EF0h case   75:*/		return 0x82202EF4;
		  /* 82202EF4h */ case   76:  		/* mr R4, R27 */
		/* 82202EF4h case   76:*/		regs.R4 = regs.R27;
		/* 82202EF4h case   76:*/		return 0x82202EF8;
		  /* 82202EF8h */ case   77:  		/* mr R3, R31 */
		/* 82202EF8h case   77:*/		regs.R3 = regs.R31;
		/* 82202EF8h case   77:*/		return 0x82202EFC;
		  /* 82202EFCh */ case   78:  		/* bl -68476 */
		/* 82202EFCh case   78:*/		regs.LR = 0x82202F00; return 0x821F2380;
		/* 82202EFCh case   78:*/		return 0x82202F00;
		  /* 82202F00h */ case   79:  		/* li R4, 4 */
		/* 82202F00h case   79:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82202F00h case   79:*/		return 0x82202F04;
		  /* 82202F04h */ case   80:  		/* mr R24, R3 */
		/* 82202F04h case   80:*/		regs.R24 = regs.R3;
		/* 82202F04h case   80:*/		return 0x82202F08;
		  /* 82202F08h */ case   81:  		/* bl -570440 */
		/* 82202F08h case   81:*/		regs.LR = 0x82202F0C; return 0x82177AC0;
		/* 82202F08h case   81:*/		return 0x82202F0C;
		  /* 82202F0Ch */ case   82:  		/* mr R5, R24 */
		/* 82202F0Ch case   82:*/		regs.R5 = regs.R24;
		/* 82202F0Ch case   82:*/		return 0x82202F10;
		  /* 82202F10h */ case   83:  		/* mr R4, R26 */
		/* 82202F10h case   83:*/		regs.R4 = regs.R26;
		/* 82202F10h case   83:*/		return 0x82202F14;
		  /* 82202F14h */ case   84:  		/* mr R3, R31 */
		/* 82202F14h case   84:*/		regs.R3 = regs.R31;
		/* 82202F14h case   84:*/		return 0x82202F18;
		  /* 82202F18h */ case   85:  		/* bl -65152 */
		/* 82202F18h case   85:*/		regs.LR = 0x82202F1C; return 0x821F3098;
		/* 82202F18h case   85:*/		return 0x82202F1C;
		  /* 82202F1Ch */ case   86:  		/* mr R26, R3 */
		/* 82202F1Ch case   86:*/		regs.R26 = regs.R3;
		/* 82202F1Ch case   86:*/		return 0x82202F20;
		  /* 82202F20h */ case   87:  		/* mr R4, R27 */
		/* 82202F20h case   87:*/		regs.R4 = regs.R27;
		/* 82202F20h case   87:*/		return 0x82202F24;
		  /* 82202F24h */ case   88:  		/* mr R3, R31 */
		/* 82202F24h case   88:*/		regs.R3 = regs.R31;
		/* 82202F24h case   88:*/		return 0x82202F28;
		  /* 82202F28h */ case   89:  		/* bl -68520 */
		/* 82202F28h case   89:*/		regs.LR = 0x82202F2C; return 0x821F2380;
		/* 82202F28h case   89:*/		return 0x82202F2C;
		  /* 82202F2Ch */ case   90:  		/* li R4, 4 */
		/* 82202F2Ch case   90:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82202F2Ch case   90:*/		return 0x82202F30;
		  /* 82202F30h */ case   91:  		/* mr R24, R3 */
		/* 82202F30h case   91:*/		regs.R24 = regs.R3;
		/* 82202F30h case   91:*/		return 0x82202F34;
		  /* 82202F34h */ case   92:  		/* bl -570484 */
		/* 82202F34h case   92:*/		regs.LR = 0x82202F38; return 0x82177AC0;
		/* 82202F34h case   92:*/		return 0x82202F38;
		  /* 82202F38h */ case   93:  		/* mr R5, R24 */
		/* 82202F38h case   93:*/		regs.R5 = regs.R24;
		/* 82202F38h case   93:*/		return 0x82202F3C;
		  /* 82202F3Ch */ case   94:  		/* mr R4, R25 */
		/* 82202F3Ch case   94:*/		regs.R4 = regs.R25;
		/* 82202F3Ch case   94:*/		return 0x82202F40;
		  /* 82202F40h */ case   95:  		/* mr R3, R31 */
		/* 82202F40h case   95:*/		regs.R3 = regs.R31;
		/* 82202F40h case   95:*/		return 0x82202F44;
		  /* 82202F44h */ case   96:  		/* bl -65196 */
		/* 82202F44h case   96:*/		regs.LR = 0x82202F48; return 0x821F3098;
		/* 82202F44h case   96:*/		return 0x82202F48;
		  /* 82202F48h */ case   97:  		/* mr R25, R3 */
		/* 82202F48h case   97:*/		regs.R25 = regs.R3;
		/* 82202F48h case   97:*/		return 0x82202F4C;
		  /* 82202F4Ch */ case   98:  		/* mr R4, R26 */
		/* 82202F4Ch case   98:*/		regs.R4 = regs.R26;
		/* 82202F4Ch case   98:*/		return 0x82202F50;
		  /* 82202F50h */ case   99:  		/* mr R3, R31 */
		/* 82202F50h case   99:*/		regs.R3 = regs.R31;
		/* 82202F50h case   99:*/		return 0x82202F54;
		  /* 82202F54h */ case  100:  		/* bl -78108 */
		/* 82202F54h case  100:*/		regs.LR = 0x82202F58; return 0x821EFE38;
		/* 82202F54h case  100:*/		return 0x82202F58;
		  /* 82202F58h */ case  101:  		/* mr R5, R3 */
		/* 82202F58h case  101:*/		regs.R5 = regs.R3;
		/* 82202F58h case  101:*/		return 0x82202F5C;
		  /* 82202F5Ch */ case  102:  		/* mr R4, R25 */
		/* 82202F5Ch case  102:*/		regs.R4 = regs.R25;
		/* 82202F5Ch case  102:*/		return 0x82202F60;
		  /* 82202F60h */ case  103:  		/* mr R3, R31 */
		/* 82202F60h case  103:*/		regs.R3 = regs.R31;
		/* 82202F60h case  103:*/		return 0x82202F64;
		  /* 82202F64h */ case  104:  		/* bl -76348 */
		/* 82202F64h case  104:*/		regs.LR = 0x82202F68; return 0x821F0528;
		/* 82202F64h case  104:*/		return 0x82202F68;
		  /* 82202F68h */ case  105:  		/* mr R4, R3 */
		/* 82202F68h case  105:*/		regs.R4 = regs.R3;
		/* 82202F68h case  105:*/		return 0x82202F6C;
		  /* 82202F6Ch */ case  106:  		/* li R7, 228 */
		/* 82202F6Ch case  106:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82202F6Ch case  106:*/		return 0x82202F70;
		  /* 82202F70h */ case  107:  		/* li R6, 1 */
		/* 82202F70h case  107:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82202F70h case  107:*/		return 0x82202F74;
		  /* 82202F74h */ case  108:  		/* li R5, 1 */
		/* 82202F74h case  108:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82202F74h case  108:*/		return 0x82202F78;
		  /* 82202F78h */ case  109:  		/* mr R3, R31 */
		/* 82202F78h case  109:*/		regs.R3 = regs.R31;
		/* 82202F78h case  109:*/		return 0x82202F7C;
		  /* 82202F7Ch */ case  110:  		/* bl 127684 */
		/* 82202F7Ch case  110:*/		regs.LR = 0x82202F80; return 0x82222240;
		/* 82202F7Ch case  110:*/		return 0x82202F80;
		  /* 82202F80h */ case  111:  		/* mr R26, R3 */
		/* 82202F80h case  111:*/		regs.R26 = regs.R3;
		/* 82202F80h case  111:*/		return 0x82202F84;
		  /* 82202F84h */ case  112:  		/* mr R3, R31 */
		/* 82202F84h case  112:*/		regs.R3 = regs.R31;
		/* 82202F84h case  112:*/		return 0x82202F88;
		  /* 82202F88h */ case  113:  		/* mr R5, R26 */
		/* 82202F88h case  113:*/		regs.R5 = regs.R26;
		/* 82202F88h case  113:*/		return 0x82202F8C;
		  /* 82202F8Ch */ case  114:  		/* mr R4, R26 */
		/* 82202F8Ch case  114:*/		regs.R4 = regs.R26;
		/* 82202F8Ch case  114:*/		return 0x82202F90;
		  /* 82202F90h */ case  115:  		/* bl -85336 */
		/* 82202F90h case  115:*/		regs.LR = 0x82202F94; return 0x821EE238;
		/* 82202F90h case  115:*/		return 0x82202F94;
		  /* 82202F94h */ case  116:  		/* mr R25, R3 */
		/* 82202F94h case  116:*/		regs.R25 = regs.R3;
		/* 82202F94h case  116:*/		return 0x82202F98;
		  /* 82202F98h */ case  117:  		/* mr R4, R26 */
		/* 82202F98h case  117:*/		regs.R4 = regs.R26;
		/* 82202F98h case  117:*/		return 0x82202F9C;
		  /* 82202F9Ch */ case  118:  		/* lwz R5, <#[R26 + 12]> */
		/* 82202F9Ch case  118:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82202F9Ch case  118:*/		return 0x82202FA0;
		  /* 82202FA0h */ case  119:  		/* mr R3, R31 */
		/* 82202FA0h case  119:*/		regs.R3 = regs.R31;
		/* 82202FA0h case  119:*/		return 0x82202FA4;
		  /* 82202FA4h */ case  120:  		/* bl -597684 */
		/* 82202FA4h case  120:*/		regs.LR = 0x82202FA8; return 0x821710F0;
		/* 82202FA4h case  120:*/		return 0x82202FA8;
		  /* 82202FA8h */ case  121:  		/* li R4, 4 */
		/* 82202FA8h case  121:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82202FA8h case  121:*/		return 0x82202FAC;
		  /* 82202FACh */ case  122:  		/* mr R24, R3 */
		/* 82202FACh case  122:*/		regs.R24 = regs.R3;
		/* 82202FACh case  122:*/		return 0x82202FB0;
		  /* 82202FB0h */ case  123:  		/* bl -570608 */
		/* 82202FB0h case  123:*/		regs.LR = 0x82202FB4; return 0x82177AC0;
		/* 82202FB0h case  123:*/		return 0x82202FB4;
		  /* 82202FB4h */ case  124:  		/* mr R5, R24 */
		/* 82202FB4h case  124:*/		regs.R5 = regs.R24;
		/* 82202FB4h case  124:*/		return 0x82202FB8;
		  /* 82202FB8h */ case  125:  		/* addi R4, R1, 1184 */
		/* 82202FB8h case  125:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x4A0);
		/* 82202FB8h case  125:*/		return 0x82202FBC;
		  /* 82202FBCh */ case  126:  		/* mr R3, R31 */
		/* 82202FBCh case  126:*/		regs.R3 = regs.R31;
		/* 82202FBCh case  126:*/		return 0x82202FC0;
		  /* 82202FC0h */ case  127:  		/* bl -65320 */
		/* 82202FC0h case  127:*/		regs.LR = 0x82202FC4; return 0x821F3098;
		/* 82202FC0h case  127:*/		return 0x82202FC4;
		  /* 82202FC4h */ case  128:  		/* mr R24, R3 */
		/* 82202FC4h case  128:*/		regs.R24 = regs.R3;
		/* 82202FC4h case  128:*/		return 0x82202FC8;
		  /* 82202FC8h */ case  129:  		/* mr R4, R26 */
		/* 82202FC8h case  129:*/		regs.R4 = regs.R26;
		/* 82202FC8h case  129:*/		return 0x82202FCC;
		  /* 82202FCCh */ case  130:  		/* lwz R5, <#[R26 + 12]> */
		/* 82202FCCh case  130:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82202FCCh case  130:*/		return 0x82202FD0;
		  /* 82202FD0h */ case  131:  		/* mr R3, R31 */
		/* 82202FD0h case  131:*/		regs.R3 = regs.R31;
		/* 82202FD0h case  131:*/		return 0x82202FD4;
		  /* 82202FD4h */ case  132:  		/* bl -597732 */
		/* 82202FD4h case  132:*/		regs.LR = 0x82202FD8; return 0x821710F0;
		/* 82202FD4h case  132:*/		return 0x82202FD8;
		  /* 82202FD8h */ case  133:  		/* li R4, 4 */
		/* 82202FD8h case  133:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82202FD8h case  133:*/		return 0x82202FDC;
		  /* 82202FDCh */ case  134:  		/* mr R26, R3 */
		/* 82202FDCh case  134:*/		regs.R26 = regs.R3;
		/* 82202FDCh case  134:*/		return 0x82202FE0;
		  /* 82202FE0h */ case  135:  		/* bl -570656 */
		/* 82202FE0h case  135:*/		regs.LR = 0x82202FE4; return 0x82177AC0;
		/* 82202FE0h case  135:*/		return 0x82202FE4;
		  /* 82202FE4h */ case  136:  		/* mr R5, R26 */
		/* 82202FE4h case  136:*/		regs.R5 = regs.R26;
		/* 82202FE4h case  136:*/		return 0x82202FE8;
		  /* 82202FE8h */ case  137:  		/* mr R4, R24 */
		/* 82202FE8h case  137:*/		regs.R4 = regs.R24;
		/* 82202FE8h case  137:*/		return 0x82202FEC;
		  /* 82202FECh */ case  138:  		/* mr R3, R31 */
		/* 82202FECh case  138:*/		regs.R3 = regs.R31;
		/* 82202FECh case  138:*/		return 0x82202FF0;
		  /* 82202FF0h */ case  139:  		/* bl -79856 */
		/* 82202FF0h case  139:*/		regs.LR = 0x82202FF4; return 0x821EF800;
		/* 82202FF0h case  139:*/		return 0x82202FF4;
		  /* 82202FF4h */ case  140:  		/* mr R4, R3 */
		/* 82202FF4h case  140:*/		regs.R4 = regs.R3;
		/* 82202FF4h case  140:*/		return 0x82202FF8;
		  /* 82202FF8h */ case  141:  		/* mr R5, R25 */
		/* 82202FF8h case  141:*/		regs.R5 = regs.R25;
		/* 82202FF8h case  141:*/		return 0x82202FFC;
		  /* 82202FFCh */ case  142:  		/* mr R3, R31 */
		/* 82202FFCh case  142:*/		regs.R3 = regs.R31;
		/* 82202FFCh case  142:*/		return 0x82203000;
		  /* 82203000h */ case  143:  		/* bl -76504 */
		/* 82203000h case  143:*/		regs.LR = 0x82203004; return 0x821F0528;
		/* 82203000h case  143:*/		return 0x82203004;
		  /* 82203004h */ case  144:  		/* stw R3, <#[R27]> */
		/* 82203004h case  144:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 82203004h case  144:*/		return 0x82203008;
		  /* 82203008h */ case  145:  		/* li R11, 1 */
		/* 82203008h case  145:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82203008h case  145:*/		return 0x8220300C;
		  /* 8220300Ch */ case  146:  		/* addi R29, R29, -1 */
		/* 8220300Ch case  146:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8220300Ch case  146:*/		return 0x82203010;
		  /* 82203010h */ case  147:  		/* lwz R10, <#[R27 + 4]> */
		/* 82203010h case  147:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 82203010h case  147:*/		return 0x82203014;
		  /* 82203014h */ case  148:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 82203014h case  148:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 82203014h case  148:*/		return 0x82203018;
		  /* 82203018h */ case  149:  		/* stw R10, <#[R27 + 4]> */
		/* 82203018h case  149:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 82203018h case  149:*/		return 0x8220301C;
		  /* 8220301Ch */ case  150:  		/* b -340 */
		/* 8220301Ch case  150:*/		return 0x82202EC8;
		/* 8220301Ch case  150:*/		return 0x82203020;
	}
	return 0x82203020;
} // Block from 82202DC4h-82203020h (151 instructions)

//////////////////////////////////////////////////////
// Block at 82203020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203020);
		  /* 82203020h */ case    0:  		/* cmplwi CR0, R30, 0 */
		/* 82203020h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 82203020h case    0:*/		return 0x82203024;
		  /* 82203024h */ case    1:  		/* bc 12, CR0_EQ, -27908 */
		/* 82203024h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 82203024h case    1:*/		return 0x82203028;
		  /* 82203028h */ case    2:  		/* mr R5, R30 */
		/* 82203028h case    2:*/		regs.R5 = regs.R30;
		/* 82203028h case    2:*/		return 0x8220302C;
		  /* 8220302Ch */ case    3:  		/* mr R4, R28 */
		/* 8220302Ch case    3:*/		regs.R4 = regs.R28;
		/* 8220302Ch case    3:*/		return 0x82203030;
		  /* 82203030h */ case    4:  		/* addi R3, R1, 2944 */
		/* 82203030h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB80);
		/* 82203030h case    4:*/		return 0x82203034;
		  /* 82203034h */ case    5:  		/* b -22184 */
		/* 82203034h case    5:*/		return 0x821FD98C;
		/* 82203034h case    5:*/		return 0x82203038;
		  /* 82203038h */ case    6:  		/* lwz R27, <#[R1 + 3500]> */
		/* 82203038h case    6:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203038h case    6:*/		return 0x8220303C;
		  /* 8220303Ch */ case    7:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 8220303Ch case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 8220303Ch case    7:*/		return 0x82203040;
		  /* 82203040h */ case    8:  		/* addi R3, R1, 1088 */
		/* 82203040h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x440);
		/* 82203040h case    8:*/		return 0x82203044;
		  /* 82203044h */ case    9:  		/* mr R4, R27 */
		/* 82203044h case    9:*/		regs.R4 = regs.R27;
		/* 82203044h case    9:*/		return 0x82203048;
		  /* 82203048h */ case   10:  		/* bl -52536 */
		/* 82203048h case   10:*/		regs.LR = 0x8220304C; return 0x821F6310;
		/* 82203048h case   10:*/		return 0x8220304C;
		  /* 8220304Ch */ case   11:  		/* mr R5, R29 */
		/* 8220304Ch case   11:*/		regs.R5 = regs.R29;
		/* 8220304Ch case   11:*/		return 0x82203050;
		  /* 82203050h */ case   12:  		/* mr R4, R27 */
		/* 82203050h case   12:*/		regs.R4 = regs.R27;
		/* 82203050h case   12:*/		return 0x82203054;
		  /* 82203054h */ case   13:  		/* addi R3, R1, 2440 */
		/* 82203054h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x988);
		/* 82203054h case   13:*/		return 0x82203058;
		  /* 82203058h */ case   14:  		/* bl -52552 */
		/* 82203058h case   14:*/		regs.LR = 0x8220305C; return 0x821F6310;
		/* 82203058h case   14:*/		return 0x8220305C;
		  /* 8220305Ch */ case   15:  		/* mr R28, R29 */
		/* 8220305Ch case   15:*/		regs.R28 = regs.R29;
		/* 8220305Ch case   15:*/		return 0x82203060;
		  /* 82203060h */ case   16:  		/* cmplwi CR6, R28, 0 */
		/* 82203060h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82203060h case   16:*/		return 0x82203064;
		  /* 82203064h */ case   17:  		/* bc 12, CR6_EQ, 120 */
		/* 82203064h case   17:*/		if ( regs.CR[6].eq ) { return 0x822030DC;  }
		/* 82203064h case   17:*/		return 0x82203068;
		  /* 82203068h */ case   18:  		/* cmplwi CR6, R28, 4 */
		/* 82203068h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 82203068h case   18:*/		return 0x8220306C;
		  /* 8220306Ch */ case   19:  		/* mr R30, R28 */
		/* 8220306Ch case   19:*/		regs.R30 = regs.R28;
		/* 8220306Ch case   19:*/		return 0x82203070;
		  /* 82203070h */ case   20:  		/* bc 12, CR6_LT, 8 */
		/* 82203070h case   20:*/		if ( regs.CR[6].lt ) { return 0x82203078;  }
		/* 82203070h case   20:*/		return 0x82203074;
		  /* 82203074h */ case   21:  		/* li R30, 4 */
		/* 82203074h case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82203074h case   21:*/		return 0x82203078;
	}
	return 0x82203078;
} // Block from 82203020h-82203078h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82203078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203078);
		  /* 82203078h */ case    0:  		/* li R6, 228 */
		/* 82203078h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82203078h case    0:*/		return 0x8220307C;
		  /* 8220307Ch */ case    1:  		/* mr R5, R30 */
		/* 8220307Ch case    1:*/		regs.R5 = regs.R30;
		/* 8220307Ch case    1:*/		return 0x82203080;
		  /* 82203080h */ case    2:  		/* addi R4, R1, 1088 */
		/* 82203080h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x440);
		/* 82203080h case    2:*/		return 0x82203084;
		  /* 82203084h */ case    3:  		/* mr R3, R31 */
		/* 82203084h case    3:*/		regs.R3 = regs.R31;
		/* 82203084h case    3:*/		return 0x82203088;
		  /* 82203088h */ case    4:  		/* bl -67904 */
		/* 82203088h case    4:*/		regs.LR = 0x8220308C; return 0x821F2748;
		/* 82203088h case    4:*/		return 0x8220308C;
		  /* 8220308Ch */ case    5:  		/* mr R26, R3 */
		/* 8220308Ch case    5:*/		regs.R26 = regs.R3;
		/* 8220308Ch case    5:*/		return 0x82203090;
		  /* 82203090h */ case    6:  		/* li R7, 1 */
		/* 82203090h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82203090h case    6:*/		return 0x82203094;
		  /* 82203094h */ case    7:  		/* li R6, 0 */
		/* 82203094h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82203094h case    7:*/		return 0x82203098;
		  /* 82203098h */ case    8:  		/* mr R5, R30 */
		/* 82203098h case    8:*/		regs.R5 = regs.R30;
		/* 82203098h case    8:*/		return 0x8220309C;
		  /* 8220309Ch */ case    9:  		/* addi R4, R1, 2440 */
		/* 8220309Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x988);
		/* 8220309Ch case    9:*/		return 0x822030A0;
		  /* 822030A0h */ case   10:  		/* mr R3, R31 */
		/* 822030A0h case   10:*/		regs.R3 = regs.R31;
		/* 822030A0h case   10:*/		return 0x822030A4;
		  /* 822030A4h */ case   11:  		/* bl -68484 */
		/* 822030A4h case   11:*/		regs.LR = 0x822030A8; return 0x821F2520;
		/* 822030A4h case   11:*/		return 0x822030A8;
		  /* 822030A8h */ case   12:  		/* mr R4, R3 */
		/* 822030A8h case   12:*/		regs.R4 = regs.R3;
		/* 822030A8h case   12:*/		return 0x822030AC;
		  /* 822030ACh */ case   13:  		/* mr R5, R26 */
		/* 822030ACh case   13:*/		regs.R5 = regs.R26;
		/* 822030ACh case   13:*/		return 0x822030B0;
		  /* 822030B0h */ case   14:  		/* mr R3, R31 */
		/* 822030B0h case   14:*/		regs.R3 = regs.R31;
		/* 822030B0h case   14:*/		return 0x822030B4;
		  /* 822030B4h */ case   15:  		/* bl -84428 */
		/* 822030B4h case   15:*/		regs.LR = 0x822030B8; return 0x821EE6E8;
		/* 822030B4h case   15:*/		return 0x822030B8;
		  /* 822030B8h */ case   16:  		/* mr R5, R3 */
		/* 822030B8h case   16:*/		regs.R5 = regs.R3;
		/* 822030B8h case   16:*/		return 0x822030BC;
		  /* 822030BCh */ case   17:  		/* mr R4, R30 */
		/* 822030BCh case   17:*/		regs.R4 = regs.R30;
		/* 822030BCh case   17:*/		return 0x822030C0;
		  /* 822030C0h */ case   18:  		/* addi R3, R1, 1088 */
		/* 822030C0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x440);
		/* 822030C0h case   18:*/		return 0x822030C4;
		  /* 822030C4h */ case   19:  		/* bl -70060 */
		/* 822030C4h case   19:*/		regs.LR = 0x822030C8; return 0x821F1F18;
		/* 822030C4h case   19:*/		return 0x822030C8;
		  /* 822030C8h */ case   20:  		/* li R4, 0 */
		/* 822030C8h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822030C8h case   20:*/		return 0x822030CC;
		  /* 822030CCh */ case   21:  		/* addi R3, R1, 1088 */
		/* 822030CCh case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x440);
		/* 822030CCh case   21:*/		return 0x822030D0;
		  /* 822030D0h */ case   22:  		/* subf R28, R30, R28 */
		/* 822030D0h case   22:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R30,regs.R28);
		/* 822030D0h case   22:*/		return 0x822030D4;
		  /* 822030D4h */ case   23:  		/* bl -86748 */
		/* 822030D4h case   23:*/		regs.LR = 0x822030D8; return 0x821EDDF8;
		/* 822030D4h case   23:*/		return 0x822030D8;
		  /* 822030D8h */ case   24:  		/* b -120 */
		/* 822030D8h case   24:*/		return 0x82203060;
		/* 822030D8h case   24:*/		return 0x822030DC;
	}
	return 0x822030DC;
} // Block from 82203078h-822030DCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 822030DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822030DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822030DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822030DC);
		  /* 822030DCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 822030DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822030DCh case    0:*/		return 0x822030E0;
		  /* 822030E0h */ case    1:  		/* bc 12, CR6_EQ, -28096 */
		/* 822030E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822030E0h case    1:*/		return 0x822030E4;
		  /* 822030E4h */ case    2:  		/* mr R5, R29 */
		/* 822030E4h case    2:*/		regs.R5 = regs.R29;
		/* 822030E4h case    2:*/		return 0x822030E8;
		  /* 822030E8h */ case    3:  		/* mr R4, R27 */
		/* 822030E8h case    3:*/		regs.R4 = regs.R27;
		/* 822030E8h case    3:*/		return 0x822030EC;
		  /* 822030ECh */ case    4:  		/* addi R3, R1, 2960 */
		/* 822030ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB90);
		/* 822030ECh case    4:*/		return 0x822030F0;
		  /* 822030F0h */ case    5:  		/* b -22372 */
		/* 822030F0h case    5:*/		return 0x821FD98C;
		/* 822030F0h case    5:*/		return 0x822030F4;
		  /* 822030F4h */ case    6:  		/* rlwinm R21, R29, 2, 0, 29 */
		/* 822030F4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R21,regs.R29);
		/* 822030F4h case    6:*/		return 0x822030F8;
		  /* 822030F8h */ case    7:  		/* li R5, 0 */
		/* 822030F8h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822030F8h case    7:*/		return 0x822030FC;
		  /* 822030FCh */ case    8:  		/* mr R4, R21 */
		/* 822030FCh case    8:*/		regs.R4 = regs.R21;
		/* 822030FCh case    8:*/		return 0x82203100;
		  /* 82203100h */ case    9:  		/* mr R3, R31 */
		/* 82203100h case    9:*/		regs.R3 = regs.R31;
		/* 82203100h case    9:*/		return 0x82203104;
		  /* 82203104h */ case   10:  		/* bl -647372 */
		/* 82203104h case   10:*/		regs.LR = 0x82203108; return 0x82165038;
		/* 82203104h case   10:*/		return 0x82203108;
		  /* 82203108h */ case   11:  		/* lwz R20, <#[R1 + 3500]> */
		/* 82203108h case   11:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203108h case   11:*/		return 0x8220310C;
		  /* 8220310Ch */ case   12:  		/* mr R22, R3 */
		/* 8220310Ch case   12:*/		regs.R22 = regs.R3;
		/* 8220310Ch case   12:*/		return 0x82203110;
		  /* 82203110h */ case   13:  		/* mr R4, R20 */
		/* 82203110h case   13:*/		regs.R4 = regs.R20;
		/* 82203110h case   13:*/		return 0x82203114;
		  /* 82203114h */ case   14:  		/* mr R5, R29 */
		/* 82203114h case   14:*/		regs.R5 = regs.R29;
		/* 82203114h case   14:*/		return 0x82203118;
		  /* 82203118h */ case   15:  		/* addi R3, R1, 1624 */
		/* 82203118h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x658);
		/* 82203118h case   15:*/		return 0x8220311C;
		  /* 8220311Ch */ case   16:  		/* bl -52748 */
		/* 8220311Ch case   16:*/		regs.LR = 0x82203120; return 0x821F6310;
		/* 8220311Ch case   16:*/		return 0x82203120;
		  /* 82203120h */ case   17:  		/* mr R4, R20 */
		/* 82203120h case   17:*/		regs.R4 = regs.R20;
		/* 82203120h case   17:*/		return 0x82203124;
		  /* 82203124h */ case   18:  		/* mr R6, R29 */
		/* 82203124h case   18:*/		regs.R6 = regs.R29;
		/* 82203124h case   18:*/		return 0x82203128;
		  /* 82203128h */ case   19:  		/* addi R5, R1, 1624 */
		/* 82203128h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x658);
		/* 82203128h case   19:*/		return 0x8220312C;
		  /* 8220312Ch */ case   20:  		/* mr R3, R31 */
		/* 8220312Ch case   20:*/		regs.R3 = regs.R31;
		/* 8220312Ch case   20:*/		return 0x82203130;
		  /* 82203130h */ case   21:  		/* bl -42856 */
		/* 82203130h case   21:*/		regs.LR = 0x82203134; return 0x821F89C8;
		/* 82203130h case   21:*/		return 0x82203134;
		  /* 82203134h */ case   22:  		/* mr R5, R29 */
		/* 82203134h case   22:*/		regs.R5 = regs.R29;
		/* 82203134h case   22:*/		return 0x82203138;
		  /* 82203138h */ case   23:  		/* mr R4, R20 */
		/* 82203138h case   23:*/		regs.R4 = regs.R20;
		/* 82203138h case   23:*/		return 0x8220313C;
		  /* 8220313Ch */ case   24:  		/* addi R3, R1, 2472 */
		/* 8220313Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9A8);
		/* 8220313Ch case   24:*/		return 0x82203140;
		  /* 82203140h */ case   25:  		/* bl -52784 */
		/* 82203140h case   25:*/		regs.LR = 0x82203144; return 0x821F6310;
		/* 82203140h case   25:*/		return 0x82203144;
		  /* 82203144h */ case   26:  		/* cmplwi CR6, R29, 0 */
		/* 82203144h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82203144h case   26:*/		return 0x82203148;
		  /* 82203148h */ case   27:  		/* bc 12, CR6_EQ, 32 */
		/* 82203148h case   27:*/		if ( regs.CR[6].eq ) { return 0x82203168;  }
		/* 82203148h case   27:*/		return 0x8220314C;
		  /* 8220314Ch */ case   28:  		/* addi R28, R22, -4 */
		/* 8220314Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R22,0xFFFFFFFC);
		/* 8220314Ch case   28:*/		return 0x82203150;
		  /* 82203150h */ case   29:  		/* mr R30, R29 */
		/* 82203150h case   29:*/		regs.R30 = regs.R29;
		/* 82203150h case   29:*/		return 0x82203154;
		  /* 82203154h */ case   30:  		/* addi R3, R1, 2472 */
		/* 82203154h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9A8);
		/* 82203154h case   30:*/		return 0x82203158;
		  /* 82203158h */ case   31:  		/* bl -271096 */
		/* 82203158h case   31:*/		regs.LR = 0x8220315C; return 0x821C0E60;
		/* 82203158h case   31:*/		return 0x8220315C;
		  /* 8220315Ch */ case   32:  		/* addic. R30, R30, -1 */
		/* 8220315Ch case   32:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8220315Ch case   32:*/		return 0x82203160;
		  /* 82203160h */ case   33:  		/* stwu R3, <#[R28 + 4]> */
		/* 82203160h case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 82203160h case   33:*/		return 0x82203164;
		  /* 82203164h */ case   34:  		/* bc 4, CR0_EQ, -16 */
		/* 82203164h case   34:*/		if ( !regs.CR[0].eq ) { return 0x82203154;  }
		/* 82203164h case   34:*/		return 0x82203168;
	}
	return 0x82203168;
} // Block from 822030DCh-82203168h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82203168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203168);
		  /* 82203168h */ case    0:  		/* lwz R25, <#[R14 + 20]> */
		/* 82203168h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R14 + 0x00000014) );
		/* 82203168h case    0:*/		return 0x8220316C;
		  /* 8220316Ch */ case    1:  		/* lwz R24, <#[R14 + 24]> */
		/* 8220316Ch case    1:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R14 + 0x00000018) );
		/* 8220316Ch case    1:*/		return 0x82203170;
		  /* 82203170h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82203170h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82203170h case    2:*/		return 0x82203174;
		  /* 82203174h */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 82203174h case    3:*/		if ( regs.CR[6].eq ) { return 0x822031C4;  }
		/* 82203174h case    3:*/		return 0x82203178;
		  /* 82203178h */ case    4:  		/* mr R26, R22 */
		/* 82203178h case    4:*/		regs.R26 = regs.R22;
		/* 82203178h case    4:*/		return 0x8220317C;
		  /* 8220317Ch */ case    5:  		/* mr R23, R25 */
		/* 8220317Ch case    5:*/		regs.R23 = regs.R25;
		/* 8220317Ch case    5:*/		return 0x82203180;
		  /* 82203180h */ case    6:  		/* cmplwi CR6, R24, 0 */
		/* 82203180h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82203180h case    6:*/		return 0x82203184;
		  /* 82203184h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82203184h case    7:*/		if ( regs.CR[6].eq ) { return 0x822031B8;  }
		/* 82203184h case    7:*/		return 0x82203188;
		  /* 82203188h */ case    8:  		/* rlwinm R28, R25, 2, 0, 29 */
		/* 82203188h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R25);
		/* 82203188h case    8:*/		return 0x8220318C;
		  /* 8220318Ch */ case    9:  		/* mr R30, R24 */
		/* 8220318Ch case    9:*/		regs.R30 = regs.R24;
		/* 8220318Ch case    9:*/		return 0x82203190;
		  /* 82203190h */ case   10:  		/* subf R27, R28, R26 */
		/* 82203190h case   10:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R28,regs.R26);
		/* 82203190h case   10:*/		return 0x82203194;
		  /* 82203194h */ case   11:  		/* addi R3, R1, 1624 */
		/* 82203194h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x658);
		/* 82203194h case   11:*/		return 0x82203198;
		  /* 82203198h */ case   12:  		/* bl -271160 */
		/* 82203198h case   12:*/		regs.LR = 0x8220319C; return 0x821C0E60;
		/* 82203198h case   12:*/		return 0x8220319C;
		  /* 8220319Ch */ case   13:  		/* lwzux R11, <#[R27 + R28]> */
		/* 8220319Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R28 + 0x00000000) );
		regs.R27 = (uint32)(regs.R27 + regs.R28 + 0x00000000);
		/* 8220319Ch case   13:*/		return 0x822031A0;
		  /* 822031A0h */ case   14:  		/* addic. R30, R30, -1 */
		/* 822031A0h case   14:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 822031A0h case   14:*/		return 0x822031A4;
		  /* 822031A4h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 822031A4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822031A4h case   15:*/		return 0x822031A8;
		  /* 822031A8h */ case   16:  		/* stw R10, <#[R3]> */
		/* 822031A8h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 822031A8h case   16:*/		return 0x822031AC;
		  /* 822031ACh */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 822031ACh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 822031ACh case   17:*/		return 0x822031B0;
		  /* 822031B0h */ case   18:  		/* stw R11, <#[R3 + 4]> */
		/* 822031B0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 822031B0h case   18:*/		return 0x822031B4;
		  /* 822031B4h */ case   19:  		/* bc 4, CR0_EQ, -32 */
		/* 822031B4h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82203194;  }
		/* 822031B4h case   19:*/		return 0x822031B8;
	}
	return 0x822031B8;
} // Block from 82203168h-822031B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822031B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822031B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822031B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822031B8);
		  /* 822031B8h */ case    0:  		/* addic. R23, R23, -1 */
		/* 822031B8h case    0:*/		cpu::op::addic<1>(regs,&regs.R23,regs.R23,0xFFFFFFFF);
		/* 822031B8h case    0:*/		return 0x822031BC;
		  /* 822031BCh */ case    1:  		/* addi R26, R26, 4 */
		/* 822031BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 822031BCh case    1:*/		return 0x822031C0;
		  /* 822031C0h */ case    2:  		/* bc 4, CR0_EQ, -64 */
		/* 822031C0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82203180;  }
		/* 822031C0h case    2:*/		return 0x822031C4;
	}
	return 0x822031C4;
} // Block from 822031B8h-822031C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822031C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822031C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822031C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822031C4);
		  /* 822031C4h */ case    0:  		/* li R6, 0 */
		/* 822031C4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822031C4h case    0:*/		return 0x822031C8;
		  /* 822031C8h */ case    1:  		/* mr R5, R21 */
		/* 822031C8h case    1:*/		regs.R5 = regs.R21;
		/* 822031C8h case    1:*/		return 0x822031CC;
		  /* 822031CCh */ case    2:  		/* mr R4, R22 */
		/* 822031CCh case    2:*/		regs.R4 = regs.R22;
		/* 822031CCh case    2:*/		return 0x822031D0;
		  /* 822031D0h */ case    3:  		/* mr R3, R31 */
		/* 822031D0h case    3:*/		regs.R3 = regs.R31;
		/* 822031D0h case    3:*/		return 0x822031D4;
		  /* 822031D4h */ case    4:  		/* bl -615300 */
		/* 822031D4h case    4:*/		regs.LR = 0x822031D8; return 0x8216CE50;
		/* 822031D4h case    4:*/		return 0x822031D8;
		  /* 822031D8h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 822031D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822031D8h case    5:*/		return 0x822031DC;
		  /* 822031DCh */ case    6:  		/* bc 12, CR6_EQ, -28348 */
		/* 822031DCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822031DCh case    6:*/		return 0x822031E0;
		  /* 822031E0h */ case    7:  		/* mr R5, R29 */
		/* 822031E0h case    7:*/		regs.R5 = regs.R29;
		/* 822031E0h case    7:*/		return 0x822031E4;
		  /* 822031E4h */ case    8:  		/* mr R4, R20 */
		/* 822031E4h case    8:*/		regs.R4 = regs.R20;
		/* 822031E4h case    8:*/		return 0x822031E8;
		  /* 822031E8h */ case    9:  		/* addi R3, R1, 2976 */
		/* 822031E8h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBA0);
		/* 822031E8h case    9:*/		return 0x822031EC;
		  /* 822031ECh */ case   10:  		/* b -22624 */
		/* 822031ECh case   10:*/		return 0x821FD98C;
		/* 822031ECh case   10:*/		return 0x822031F0;
		  /* 822031F0h */ case   11:  		/* lwz R11, <#[R31 + 48]> */
		/* 822031F0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 822031F0h case   11:*/		return 0x822031F4;
		  /* 822031F4h */ case   12:  		/* lis R10, -1 */
		/* 822031F4h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 822031F4h case   12:*/		return 0x822031F8;
		  /* 822031F8h */ case   13:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 822031F8h case   13:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 822031F8h case   13:*/		return 0x822031FC;
		  /* 822031FCh */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 822031FCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822031FCh case   14:*/		return 0x82203200;
		  /* 82203200h */ case   15:  		/* bc 4, CR6_EQ, 5592 */
		/* 82203200h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822047D8;  }
		/* 82203200h case   15:*/		return 0x82203204;
		  /* 82203204h */ case   16:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82203204h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203204h case   16:*/		return 0x82203208;
		  /* 82203208h */ case   17:  		/* mr R5, R29 */
		/* 82203208h case   17:*/		regs.R5 = regs.R29;
		/* 82203208h case   17:*/		return 0x8220320C;
		  /* 8220320Ch */ case   18:  		/* addi R3, R1, 1648 */
		/* 8220320Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x670);
		/* 8220320Ch case   18:*/		return 0x82203210;
		  /* 82203210h */ case   19:  		/* mr R4, R30 */
		/* 82203210h case   19:*/		regs.R4 = regs.R30;
		/* 82203210h case   19:*/		return 0x82203214;
		  /* 82203214h */ case   20:  		/* bl -52996 */
		/* 82203214h case   20:*/		regs.LR = 0x82203218; return 0x821F6310;
		/* 82203214h case   20:*/		return 0x82203218;
		  /* 82203218h */ case   21:  		/* mr R5, R29 */
		/* 82203218h case   21:*/		regs.R5 = regs.R29;
		/* 82203218h case   21:*/		return 0x8220321C;
		  /* 8220321Ch */ case   22:  		/* mr R4, R30 */
		/* 8220321Ch case   22:*/		regs.R4 = regs.R30;
		/* 8220321Ch case   22:*/		return 0x82203220;
		  /* 82203220h */ case   23:  		/* addi R3, R1, 2504 */
		/* 82203220h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9C8);
		/* 82203220h case   23:*/		return 0x82203224;
		  /* 82203224h */ case   24:  		/* bl -53012 */
		/* 82203224h case   24:*/		regs.LR = 0x82203228; return 0x821F6310;
		/* 82203224h case   24:*/		return 0x82203228;
		  /* 82203228h */ case   25:  		/* cmplwi CR6, R29, 0 */
		/* 82203228h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82203228h case   25:*/		return 0x8220322C;
		  /* 8220322Ch */ case   26:  		/* bc 12, CR6_EQ, -28428 */
		/* 8220322Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 8220322Ch case   26:*/		return 0x82203230;
		  /* 82203230h */ case   27:  		/* cmplwi CR6, R29, 2 */
		/* 82203230h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 82203230h case   27:*/		return 0x82203234;
		  /* 82203234h */ case   28:  		/* mr R30, R29 */
		/* 82203234h case   28:*/		regs.R30 = regs.R29;
		/* 82203234h case   28:*/		return 0x82203238;
		  /* 82203238h */ case   29:  		/* bc 12, CR6_LT, 8 */
		/* 82203238h case   29:*/		if ( regs.CR[6].lt ) { return 0x82203240;  }
		/* 82203238h case   29:*/		return 0x8220323C;
		  /* 8220323Ch */ case   30:  		/* li R30, 2 */
		/* 8220323Ch case   30:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 8220323Ch case   30:*/		return 0x82203240;
	}
	return 0x82203240;
} // Block from 822031C4h-82203240h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82203240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203240);
		  /* 82203240h */ case    0:  		/* li R6, 228 */
		/* 82203240h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82203240h case    0:*/		return 0x82203244;
		  /* 82203244h */ case    1:  		/* mr R5, R30 */
		/* 82203244h case    1:*/		regs.R5 = regs.R30;
		/* 82203244h case    1:*/		return 0x82203248;
		  /* 82203248h */ case    2:  		/* addi R4, R1, 1648 */
		/* 82203248h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x670);
		/* 82203248h case    2:*/		return 0x8220324C;
		  /* 8220324Ch */ case    3:  		/* mr R3, R31 */
		/* 8220324Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220324Ch case    3:*/		return 0x82203250;
		  /* 82203250h */ case    4:  		/* bl -68360 */
		/* 82203250h case    4:*/		regs.LR = 0x82203254; return 0x821F2748;
		/* 82203250h case    4:*/		return 0x82203254;
		  /* 82203254h */ case    5:  		/* lwz R4, <#[R31 + 564]> */
		/* 82203254h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82203254h case    5:*/		return 0x82203258;
		  /* 82203258h */ case    6:  		/* mr R28, R3 */
		/* 82203258h case    6:*/		regs.R28 = regs.R3;
		/* 82203258h case    6:*/		return 0x8220325C;
		  /* 8220325Ch */ case    7:  		/* addi R5, R4, 16 */
		/* 8220325Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x10);
		/* 8220325Ch case    7:*/		return 0x82203260;
		  /* 82203260h */ case    8:  		/* li R8, 1 */
		/* 82203260h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82203260h case    8:*/		return 0x82203264;
		  /* 82203264h */ case    9:  		/* li R7, 0 */
		/* 82203264h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82203264h case    9:*/		return 0x82203268;
		  /* 82203268h */ case   10:  		/* li R6, 120 */
		/* 82203268h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 82203268h case   10:*/		return 0x8220326C;
		  /* 8220326Ch */ case   11:  		/* mr R3, R31 */
		/* 8220326Ch case   11:*/		regs.R3 = regs.R31;
		/* 8220326Ch case   11:*/		return 0x82203270;
		  /* 82203270h */ case   12:  		/* bl 137000 */
		/* 82203270h case   12:*/		regs.LR = 0x82203274; return 0x82224998;
		/* 82203270h case   12:*/		return 0x82203274;
		  /* 82203274h */ case   13:  		/* mr R27, R3 */
		/* 82203274h case   13:*/		regs.R27 = regs.R3;
		/* 82203274h case   13:*/		return 0x82203278;
		  /* 82203278h */ case   14:  		/* mr R3, R31 */
		/* 82203278h case   14:*/		regs.R3 = regs.R31;
		/* 82203278h case   14:*/		return 0x8220327C;
		  /* 8220327Ch */ case   15:  		/* mr R4, R27 */
		/* 8220327Ch case   15:*/		regs.R4 = regs.R27;
		/* 8220327Ch case   15:*/		return 0x82203280;
		  /* 82203280h */ case   16:  		/* bl -569984 */
		/* 82203280h case   16:*/		regs.LR = 0x82203284; return 0x82178000;
		/* 82203280h case   16:*/		return 0x82203284;
		  /* 82203284h */ case   17:  		/* lwz R11, <#[R27 + 8]> */
		/* 82203284h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82203284h case   17:*/		return 0x82203288;
		  /* 82203288h */ case   18:  		/* li R10, 1 */
		/* 82203288h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82203288h case   18:*/		return 0x8220328C;
		  /* 8220328Ch */ case   19:  		/* lis R8, 0 */
		/* 8220328Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R8,0x0);
		/* 8220328Ch case   19:*/		return 0x82203290;
		  /* 82203290h */ case   20:  		/* rlwimi R11, R10, 1, 27, 30 */
		/* 82203290h case   20:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R11,regs.R10);
		/* 82203290h case   20:*/		return 0x82203294;
		  /* 82203294h */ case   21:  		/* ori R10, R8, 32769 */
		/* 82203294h case   21:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R8,0x8001);
		/* 82203294h case   21:*/		return 0x82203298;
		  /* 82203298h */ case   22:  		/* stw R11, <#[R27 + 8]> */
		/* 82203298h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82203298h case   22:*/		return 0x8220329C;
		  /* 8220329Ch */ case   23:  		/* mr R9, R3 */
		/* 8220329Ch case   23:*/		regs.R9 = regs.R3;
		/* 8220329Ch case   23:*/		return 0x822032A0;
		  /* 822032A0h */ case   24:  		/* lwz R11, <#[R3]> */
		/* 822032A0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822032A0h case   24:*/		return 0x822032A4;
		  /* 822032A4h */ case   25:  		/* rlwimi R11, R10, 30, 7, 18 */
		/* 822032A4h case   25:*/		cpu::op::rlwimi<0,30,7,18>(regs,&regs.R11,regs.R10);
		/* 822032A4h case   25:*/		return 0x822032A8;
		  /* 822032A8h */ case   26:  		/* rlwimi R11, R10, 30, 1, 1 */
		/* 822032A8h case   26:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R11,regs.R10);
		/* 822032A8h case   26:*/		return 0x822032AC;
		  /* 822032ACh */ case   27:  		/* mr R5, R28 */
		/* 822032ACh case   27:*/		regs.R5 = regs.R28;
		/* 822032ACh case   27:*/		return 0x822032B0;
		  /* 822032B0h */ case   28:  		/* stw R11, <#[R9]> */
		/* 822032B0h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 822032B0h case   28:*/		return 0x822032B4;
		  /* 822032B4h */ case   29:  		/* mr R3, R31 */
		/* 822032B4h case   29:*/		regs.R3 = regs.R31;
		/* 822032B4h case   29:*/		return 0x822032B8;
		  /* 822032B8h */ case   30:  		/* mr R4, R9 */
		/* 822032B8h case   30:*/		regs.R4 = regs.R9;
		/* 822032B8h case   30:*/		return 0x822032BC;
		  /* 822032BCh */ case   31:  		/* bl -81124 */
		/* 822032BCh case   31:*/		regs.LR = 0x822032C0; return 0x821EF5D8;
		/* 822032BCh case   31:*/		return 0x822032C0;
		  /* 822032C0h */ case   32:  		/* mr R4, R31 */
		/* 822032C0h case   32:*/		regs.R4 = regs.R31;
		/* 822032C0h case   32:*/		return 0x822032C4;
		  /* 822032C4h */ case   33:  		/* mr R28, R3 */
		/* 822032C4h case   33:*/		regs.R28 = regs.R3;
		/* 822032C4h case   33:*/		return 0x822032C8;
		  /* 822032C8h */ case   34:  		/* bl -570224 */
		/* 822032C8h case   34:*/		regs.LR = 0x822032CC; return 0x82177F58;
		/* 822032C8h case   34:*/		return 0x822032CC;
		  /* 822032CCh */ case   35:  		/* mr R11, R3 */
		/* 822032CCh case   35:*/		regs.R11 = regs.R3;
		/* 822032CCh case   35:*/		return 0x822032D0;
		  /* 822032D0h */ case   36:  		/* li R10, 9 */
		/* 822032D0h case   36:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 822032D0h case   36:*/		return 0x822032D4;
		  /* 822032D4h */ case   37:  		/* mr R4, R28 */
		/* 822032D4h case   37:*/		regs.R4 = regs.R28;
		/* 822032D4h case   37:*/		return 0x822032D8;
		  /* 822032D8h */ case   38:  		/* mr R3, R31 */
		/* 822032D8h case   38:*/		regs.R3 = regs.R31;
		/* 822032D8h case   38:*/		return 0x822032DC;
		  /* 822032DCh */ case   39:  		/* lwz R9, <#[R11]> */
		/* 822032DCh case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822032DCh case   39:*/		return 0x822032E0;
		  /* 822032E0h */ case   40:  		/* rlwimi R9, R10, 1, 27, 31 */
		/* 822032E0h case   40:*/		cpu::op::rlwimi<0,1,27,31>(regs,&regs.R9,regs.R10);
		/* 822032E0h case   40:*/		return 0x822032E4;
		  /* 822032E4h */ case   41:  		/* stw R9, <#[R11]> */
		/* 822032E4h case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822032E4h case   41:*/		return 0x822032E8;
		  /* 822032E8h */ case   42:  		/* lwz R10, <#[R11 + 4]> */
		/* 822032E8h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822032E8h case   42:*/		return 0x822032EC;
		  /* 822032ECh */ case   43:  		/* oris R10, R10, 4096 */
		/* 822032ECh case   43:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 822032ECh case   43:*/		return 0x822032F0;
		  /* 822032F0h */ case   44:  		/* stw R10, <#[R11 + 4]> */
		/* 822032F0h case   44:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822032F0h case   44:*/		return 0x822032F4;
		  /* 822032F4h */ case   45:  		/* lwz R10, <#[R11]> */
		/* 822032F4h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822032F4h case   45:*/		return 0x822032F8;
		  /* 822032F8h */ case   46:  		/* oris R10, R10, 8 */
		/* 822032F8h case   46:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 822032F8h case   46:*/		return 0x822032FC;
		  /* 822032FCh */ case   47:  		/* stw R10, <#[R11]> */
		/* 822032FCh case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822032FCh case   47:*/		return 0x82203300;
		  /* 82203300h */ case   48:  		/* bl -570112 */
		/* 82203300h case   48:*/		regs.LR = 0x82203304; return 0x82178000;
		/* 82203300h case   48:*/		return 0x82203304;
		  /* 82203304h */ case   49:  		/* lwz R11, <#[R3]> */
		/* 82203304h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82203304h case   49:*/		return 0x82203308;
		  /* 82203308h */ case   50:  		/* mr R5, R3 */
		/* 82203308h case   50:*/		regs.R5 = regs.R3;
		/* 82203308h case   50:*/		return 0x8220330C;
		  /* 8220330Ch */ case   51:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 8220330Ch case   51:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 8220330Ch case   51:*/		return 0x82203310;
		  /* 82203310h */ case   52:  		/* cmpwi CR6, R25, 16 */
		/* 82203310h case   52:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000010);
		/* 82203310h case   52:*/		return 0x82203314;
		  /* 82203314h */ case   53:  		/* stw R11, <#[R3]> */
		/* 82203314h case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82203314h case   53:*/		return 0x82203318;
		  /* 82203318h */ case   54:  		/* bc 4, CR6_EQ, 16 */
		/* 82203318h case   54:*/		if ( !regs.CR[6].eq ) { return 0x82203328;  }
		/* 82203318h case   54:*/		return 0x8220331C;
		  /* 8220331Ch */ case   55:  		/* li R10, 29 */
		/* 8220331Ch case   55:*/		cpu::op::li<0>(regs,&regs.R10,0x1D);
		/* 8220331Ch case   55:*/		return 0x82203320;
		  /* 82203320h */ case   56:  		/* rlwimi R11, R10, 8, 19, 26 */
		/* 82203320h case   56:*/		cpu::op::rlwimi<0,8,19,26>(regs,&regs.R11,regs.R10);
		/* 82203320h case   56:*/		return 0x82203324;
		  /* 82203324h */ case   57:  		/* b 12 */
		/* 82203324h case   57:*/		return 0x82203330;
		/* 82203324h case   57:*/		return 0x82203328;
	}
	return 0x82203328;
} // Block from 82203240h-82203328h (58 instructions)

//////////////////////////////////////////////////////
// Block at 82203328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203328);
		  /* 82203328h */ case    0:  		/* li R10, 237 */
		/* 82203328h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xED);
		/* 82203328h case    0:*/		return 0x8220332C;
		  /* 8220332Ch */ case    1:  		/* rlwimi R11, R10, 5, 19, 26 */
		/* 8220332Ch case    1:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R10);
		/* 8220332Ch case    1:*/		return 0x82203330;
	}
	return 0x82203330;
} // Block from 82203328h-82203330h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82203330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203330);
		  /* 82203330h */ case    0:  		/* stw R11, <#[R5]> */
		/* 82203330h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82203330h case    0:*/		return 0x82203334;
		  /* 82203334h */ case    1:  		/* mr R4, R30 */
		/* 82203334h case    1:*/		regs.R4 = regs.R30;
		/* 82203334h case    1:*/		return 0x82203338;
		  /* 82203338h */ case    2:  		/* addi R3, R1, 2504 */
		/* 82203338h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9C8);
		/* 82203338h case    2:*/		return 0x8220333C;
		  /* 8220333Ch */ case    3:  		/* bl -70604 */
		/* 8220333Ch case    3:*/		regs.LR = 0x82203340; return 0x821F1F70;
		/* 8220333Ch case    3:*/		return 0x82203340;
		  /* 82203340h */ case    4:  		/* mr R4, R30 */
		/* 82203340h case    4:*/		regs.R4 = regs.R30;
		/* 82203340h case    4:*/		return 0x82203344;
		  /* 82203344h */ case    5:  		/* addi R3, R1, 1648 */
		/* 82203344h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x670);
		/* 82203344h case    5:*/		return 0x82203348;
		  /* 82203348h */ case    6:  		/* subf R29, R30, R29 */
		/* 82203348h case    6:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82203348h case    6:*/		return 0x8220334C;
		  /* 8220334Ch */ case    7:  		/* bl -87380 */
		/* 8220334Ch case    7:*/		regs.LR = 0x82203350; return 0x821EDDF8;
		/* 8220334Ch case    7:*/		return 0x82203350;
		  /* 82203350h */ case    8:  		/* b -296 */
		/* 82203350h case    8:*/		return 0x82203228;
		/* 82203350h case    8:*/		return 0x82203354;
		  /* 82203354h */ case    9:  		/* lwz R11, <#[R31 + 48]> */
		/* 82203354h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82203354h case    9:*/		return 0x82203358;
		  /* 82203358h */ case   10:  		/* lis R10, -1 */
		/* 82203358h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82203358h case   10:*/		return 0x8220335C;
		  /* 8220335Ch */ case   11:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8220335Ch case   11:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8220335Ch case   11:*/		return 0x82203360;
		  /* 82203360h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 82203360h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82203360h case   12:*/		return 0x82203364;
		  /* 82203364h */ case   13:  		/* bc 4, CR6_EQ, 5256 */
		/* 82203364h case   13:*/		if ( !regs.CR[6].eq ) { return 0x822047EC;  }
		/* 82203364h case   13:*/		return 0x82203368;
		  /* 82203368h */ case   14:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82203368h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203368h case   14:*/		return 0x8220336C;
		  /* 8220336Ch */ case   15:  		/* mr R5, R29 */
		/* 8220336Ch case   15:*/		regs.R5 = regs.R29;
		/* 8220336Ch case   15:*/		return 0x82203370;
		  /* 82203370h */ case   16:  		/* addi R3, R1, 1672 */
		/* 82203370h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x688);
		/* 82203370h case   16:*/		return 0x82203374;
		  /* 82203374h */ case   17:  		/* mr R4, R30 */
		/* 82203374h case   17:*/		regs.R4 = regs.R30;
		/* 82203374h case   17:*/		return 0x82203378;
		  /* 82203378h */ case   18:  		/* bl -53352 */
		/* 82203378h case   18:*/		regs.LR = 0x8220337C; return 0x821F6310;
		/* 82203378h case   18:*/		return 0x8220337C;
		  /* 8220337Ch */ case   19:  		/* mr R5, R29 */
		/* 8220337Ch case   19:*/		regs.R5 = regs.R29;
		/* 8220337Ch case   19:*/		return 0x82203380;
		  /* 82203380h */ case   20:  		/* mr R4, R30 */
		/* 82203380h case   20:*/		regs.R4 = regs.R30;
		/* 82203380h case   20:*/		return 0x82203384;
		  /* 82203384h */ case   21:  		/* addi R3, R1, 2536 */
		/* 82203384h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9E8);
		/* 82203384h case   21:*/		return 0x82203388;
		  /* 82203388h */ case   22:  		/* bl -53368 */
		/* 82203388h case   22:*/		regs.LR = 0x8220338C; return 0x821F6310;
		/* 82203388h case   22:*/		return 0x8220338C;
		  /* 8220338Ch */ case   23:  		/* cmplwi CR6, R29, 0 */
		/* 8220338Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220338Ch case   23:*/		return 0x82203390;
		  /* 82203390h */ case   24:  		/* bc 12, CR6_EQ, -28784 */
		/* 82203390h case   24:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82203390h case   24:*/		return 0x82203394;
		  /* 82203394h */ case   25:  		/* cmplwi CR6, R29, 2 */
		/* 82203394h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 82203394h case   25:*/		return 0x82203398;
		  /* 82203398h */ case   26:  		/* mr R30, R29 */
		/* 82203398h case   26:*/		regs.R30 = regs.R29;
		/* 82203398h case   26:*/		return 0x8220339C;
		  /* 8220339Ch */ case   27:  		/* bc 12, CR6_LT, 8 */
		/* 8220339Ch case   27:*/		if ( regs.CR[6].lt ) { return 0x822033A4;  }
		/* 8220339Ch case   27:*/		return 0x822033A0;
		  /* 822033A0h */ case   28:  		/* li R30, 2 */
		/* 822033A0h case   28:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 822033A0h case   28:*/		return 0x822033A4;
	}
	return 0x822033A4;
} // Block from 82203330h-822033A4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 822033A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822033A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822033A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822033A4);
		  /* 822033A4h */ case    0:  		/* li R6, 228 */
		/* 822033A4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822033A4h case    0:*/		return 0x822033A8;
		  /* 822033A8h */ case    1:  		/* mr R5, R30 */
		/* 822033A8h case    1:*/		regs.R5 = regs.R30;
		/* 822033A8h case    1:*/		return 0x822033AC;
		  /* 822033ACh */ case    2:  		/* addi R4, R1, 1672 */
		/* 822033ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x688);
		/* 822033ACh case    2:*/		return 0x822033B0;
		  /* 822033B0h */ case    3:  		/* mr R3, R31 */
		/* 822033B0h case    3:*/		regs.R3 = regs.R31;
		/* 822033B0h case    3:*/		return 0x822033B4;
		  /* 822033B4h */ case    4:  		/* bl -68716 */
		/* 822033B4h case    4:*/		regs.LR = 0x822033B8; return 0x821F2748;
		/* 822033B4h case    4:*/		return 0x822033B8;
		  /* 822033B8h */ case    5:  		/* lwz R4, <#[R31 + 564]> */
		/* 822033B8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822033B8h case    5:*/		return 0x822033BC;
		  /* 822033BCh */ case    6:  		/* mr R28, R3 */
		/* 822033BCh case    6:*/		regs.R28 = regs.R3;
		/* 822033BCh case    6:*/		return 0x822033C0;
		  /* 822033C0h */ case    7:  		/* addi R5, R4, 16 */
		/* 822033C0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x10);
		/* 822033C0h case    7:*/		return 0x822033C4;
		  /* 822033C4h */ case    8:  		/* li R8, 1 */
		/* 822033C4h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822033C4h case    8:*/		return 0x822033C8;
		  /* 822033C8h */ case    9:  		/* li R7, 0 */
		/* 822033C8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822033C8h case    9:*/		return 0x822033CC;
		  /* 822033CCh */ case   10:  		/* li R6, 120 */
		/* 822033CCh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 822033CCh case   10:*/		return 0x822033D0;
		  /* 822033D0h */ case   11:  		/* mr R3, R31 */
		/* 822033D0h case   11:*/		regs.R3 = regs.R31;
		/* 822033D0h case   11:*/		return 0x822033D4;
		  /* 822033D4h */ case   12:  		/* bl 136644 */
		/* 822033D4h case   12:*/		regs.LR = 0x822033D8; return 0x82224998;
		/* 822033D4h case   12:*/		return 0x822033D8;
		  /* 822033D8h */ case   13:  		/* mr R27, R3 */
		/* 822033D8h case   13:*/		regs.R27 = regs.R3;
		/* 822033D8h case   13:*/		return 0x822033DC;
		  /* 822033DCh */ case   14:  		/* mr R3, R31 */
		/* 822033DCh case   14:*/		regs.R3 = regs.R31;
		/* 822033DCh case   14:*/		return 0x822033E0;
		  /* 822033E0h */ case   15:  		/* mr R4, R27 */
		/* 822033E0h case   15:*/		regs.R4 = regs.R27;
		/* 822033E0h case   15:*/		return 0x822033E4;
		  /* 822033E4h */ case   16:  		/* bl -570340 */
		/* 822033E4h case   16:*/		regs.LR = 0x822033E8; return 0x82178000;
		/* 822033E4h case   16:*/		return 0x822033E8;
		  /* 822033E8h */ case   17:  		/* lwz R11, <#[R27 + 8]> */
		/* 822033E8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 822033E8h case   17:*/		return 0x822033EC;
		  /* 822033ECh */ case   18:  		/* li R10, 1 */
		/* 822033ECh case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 822033ECh case   18:*/		return 0x822033F0;
		  /* 822033F0h */ case   19:  		/* mr R9, R3 */
		/* 822033F0h case   19:*/		regs.R9 = regs.R3;
		/* 822033F0h case   19:*/		return 0x822033F4;
		  /* 822033F4h */ case   20:  		/* rlwimi R11, R10, 1, 27, 30 */
		/* 822033F4h case   20:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R11,regs.R10);
		/* 822033F4h case   20:*/		return 0x822033F8;
		  /* 822033F8h */ case   21:  		/* lis R10, 0 */
		/* 822033F8h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 822033F8h case   21:*/		return 0x822033FC;
		  /* 822033FCh */ case   22:  		/* stw R11, <#[R27 + 8]> */
		/* 822033FCh case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 822033FCh case   22:*/		return 0x82203400;
		  /* 82203400h */ case   23:  		/* mr R5, R28 */
		/* 82203400h case   23:*/		regs.R5 = regs.R28;
		/* 82203400h case   23:*/		return 0x82203404;
		  /* 82203404h */ case   24:  		/* ori R11, R10, 32769 */
		/* 82203404h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x8001);
		/* 82203404h case   24:*/		return 0x82203408;
		  /* 82203408h */ case   25:  		/* lwz R10, <#[R9]> */
		/* 82203408h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 82203408h case   25:*/		return 0x8220340C;
		  /* 8220340Ch */ case   26:  		/* mr R3, R31 */
		/* 8220340Ch case   26:*/		regs.R3 = regs.R31;
		/* 8220340Ch case   26:*/		return 0x82203410;
		  /* 82203410h */ case   27:  		/* rlwimi R10, R11, 30, 7, 18 */
		/* 82203410h case   27:*/		cpu::op::rlwimi<0,30,7,18>(regs,&regs.R10,regs.R11);
		/* 82203410h case   27:*/		return 0x82203414;
		  /* 82203414h */ case   28:  		/* rlwimi R10, R11, 30, 1, 1 */
		/* 82203414h case   28:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R10,regs.R11);
		/* 82203414h case   28:*/		return 0x82203418;
		  /* 82203418h */ case   29:  		/* mr R4, R9 */
		/* 82203418h case   29:*/		regs.R4 = regs.R9;
		/* 82203418h case   29:*/		return 0x8220341C;
		  /* 8220341Ch */ case   30:  		/* stw R10, <#[R9]> */
		/* 8220341Ch case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8220341Ch case   30:*/		return 0x82203420;
		  /* 82203420h */ case   31:  		/* bl -81480 */
		/* 82203420h case   31:*/		regs.LR = 0x82203424; return 0x821EF5D8;
		/* 82203420h case   31:*/		return 0x82203424;
		  /* 82203424h */ case   32:  		/* mr R4, R31 */
		/* 82203424h case   32:*/		regs.R4 = regs.R31;
		/* 82203424h case   32:*/		return 0x82203428;
		  /* 82203428h */ case   33:  		/* mr R28, R3 */
		/* 82203428h case   33:*/		regs.R28 = regs.R3;
		/* 82203428h case   33:*/		return 0x8220342C;
		  /* 8220342Ch */ case   34:  		/* bl -570580 */
		/* 8220342Ch case   34:*/		regs.LR = 0x82203430; return 0x82177F58;
		/* 8220342Ch case   34:*/		return 0x82203430;
		  /* 82203430h */ case   35:  		/* lwz R9, <#[R3]> */
		/* 82203430h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82203430h case   35:*/		return 0x82203434;
		  /* 82203434h */ case   36:  		/* mr R11, R3 */
		/* 82203434h case   36:*/		regs.R11 = regs.R3;
		/* 82203434h case   36:*/		return 0x82203438;
		  /* 82203438h */ case   37:  		/* li R10, 9 */
		/* 82203438h case   37:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 82203438h case   37:*/		return 0x8220343C;
		  /* 8220343Ch */ case   38:  		/* mr R4, R28 */
		/* 8220343Ch case   38:*/		regs.R4 = regs.R28;
		/* 8220343Ch case   38:*/		return 0x82203440;
		  /* 82203440h */ case   39:  		/* rlwimi R9, R10, 1, 27, 31 */
		/* 82203440h case   39:*/		cpu::op::rlwimi<0,1,27,31>(regs,&regs.R9,regs.R10);
		/* 82203440h case   39:*/		return 0x82203444;
		  /* 82203444h */ case   40:  		/* li R7, 2 */
		/* 82203444h case   40:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82203444h case   40:*/		return 0x82203448;
		  /* 82203448h */ case   41:  		/* stw R9, <#[R11]> */
		/* 82203448h case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82203448h case   41:*/		return 0x8220344C;
		  /* 8220344Ch */ case   42:  		/* li R6, 232 */
		/* 8220344Ch case   42:*/		cpu::op::li<0>(regs,&regs.R6,0xE8);
		/* 8220344Ch case   42:*/		return 0x82203450;
		  /* 82203450h */ case   43:  		/* lwz R10, <#[R11 + 4]> */
		/* 82203450h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203450h case   43:*/		return 0x82203454;
		  /* 82203454h */ case   44:  		/* oris R10, R10, 4096 */
		/* 82203454h case   44:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 82203454h case   44:*/		return 0x82203458;
		  /* 82203458h */ case   45:  		/* stw R10, <#[R11 + 4]> */
		/* 82203458h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203458h case   45:*/		return 0x8220345C;
		  /* 8220345Ch */ case   46:  		/* mr R5, R30 */
		/* 8220345Ch case   46:*/		regs.R5 = regs.R30;
		/* 8220345Ch case   46:*/		return 0x82203460;
		  /* 82203460h */ case   47:  		/* lwz R10, <#[R11]> */
		/* 82203460h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82203460h case   47:*/		return 0x82203464;
		  /* 82203464h */ case   48:  		/* oris R10, R10, 8 */
		/* 82203464h case   48:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82203464h case   48:*/		return 0x82203468;
		  /* 82203468h */ case   49:  		/* stw R10, <#[R11]> */
		/* 82203468h case   49:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82203468h case   49:*/		return 0x8220346C;
		  /* 8220346Ch */ case   50:  		/* mr R3, R31 */
		/* 8220346Ch case   50:*/		regs.R3 = regs.R31;
		/* 8220346Ch case   50:*/		return 0x82203470;
		  /* 82203470h */ case   51:  		/* bl -570288 */
		/* 82203470h case   51:*/		regs.LR = 0x82203474; return 0x821780C0;
		/* 82203470h case   51:*/		return 0x82203474;
		  /* 82203474h */ case   52:  		/* mr R27, R3 */
		/* 82203474h case   52:*/		regs.R27 = regs.R3;
		/* 82203474h case   52:*/		return 0x82203478;
		  /* 82203478h */ case   53:  		/* li R7, 2 */
		/* 82203478h case   53:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82203478h case   53:*/		return 0x8220347C;
		  /* 8220347Ch */ case   54:  		/* li R6, 237 */
		/* 8220347Ch case   54:*/		cpu::op::li<0>(regs,&regs.R6,0xED);
		/* 8220347Ch case   54:*/		return 0x82203480;
		  /* 82203480h */ case   55:  		/* mr R5, R30 */
		/* 82203480h case   55:*/		regs.R5 = regs.R30;
		/* 82203480h case   55:*/		return 0x82203484;
		  /* 82203484h */ case   56:  		/* mr R4, R28 */
		/* 82203484h case   56:*/		regs.R4 = regs.R28;
		/* 82203484h case   56:*/		return 0x82203488;
		  /* 82203488h */ case   57:  		/* mr R3, R31 */
		/* 82203488h case   57:*/		regs.R3 = regs.R31;
		/* 82203488h case   57:*/		return 0x8220348C;
		  /* 8220348Ch */ case   58:  		/* bl -570316 */
		/* 8220348Ch case   58:*/		regs.LR = 0x82203490; return 0x821780C0;
		/* 8220348Ch case   58:*/		return 0x82203490;
		  /* 82203490h */ case   59:  		/* mr R5, R3 */
		/* 82203490h case   59:*/		regs.R5 = regs.R3;
		/* 82203490h case   59:*/		return 0x82203494;
		  /* 82203494h */ case   60:  		/* mr R4, R27 */
		/* 82203494h case   60:*/		regs.R4 = regs.R27;
		/* 82203494h case   60:*/		return 0x82203498;
		  /* 82203498h */ case   61:  		/* mr R3, R31 */
		/* 82203498h case   61:*/		regs.R3 = regs.R31;
		/* 82203498h case   61:*/		return 0x8220349C;
		  /* 8220349Ch */ case   62:  		/* bl -86868 */
		/* 8220349Ch case   62:*/		regs.LR = 0x822034A0; return 0x821EE148;
		/* 8220349Ch case   62:*/		return 0x822034A0;
		  /* 822034A0h */ case   63:  		/* mr R5, R3 */
		/* 822034A0h case   63:*/		regs.R5 = regs.R3;
		/* 822034A0h case   63:*/		return 0x822034A4;
		  /* 822034A4h */ case   64:  		/* mr R4, R30 */
		/* 822034A4h case   64:*/		regs.R4 = regs.R30;
		/* 822034A4h case   64:*/		return 0x822034A8;
		  /* 822034A8h */ case   65:  		/* addi R3, R1, 2536 */
		/* 822034A8h case   65:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9E8);
		/* 822034A8h case   65:*/		return 0x822034AC;
		  /* 822034ACh */ case   66:  		/* bl -71060 */
		/* 822034ACh case   66:*/		regs.LR = 0x822034B0; return 0x821F1F18;
		/* 822034ACh case   66:*/		return 0x822034B0;
		  /* 822034B0h */ case   67:  		/* mr R4, R30 */
		/* 822034B0h case   67:*/		regs.R4 = regs.R30;
		/* 822034B0h case   67:*/		return 0x822034B4;
		  /* 822034B4h */ case   68:  		/* addi R3, R1, 1672 */
		/* 822034B4h case   68:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x688);
		/* 822034B4h case   68:*/		return 0x822034B8;
		  /* 822034B8h */ case   69:  		/* subf R29, R30, R29 */
		/* 822034B8h case   69:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 822034B8h case   69:*/		return 0x822034BC;
		  /* 822034BCh */ case   70:  		/* bl -87748 */
		/* 822034BCh case   70:*/		regs.LR = 0x822034C0; return 0x821EDDF8;
		/* 822034BCh case   70:*/		return 0x822034C0;
		  /* 822034C0h */ case   71:  		/* b -308 */
		/* 822034C0h case   71:*/		return 0x8220338C;
		/* 822034C0h case   71:*/		return 0x822034C4;
		  /* 822034C4h */ case   72:  		/* li R28, 12 */
		/* 822034C4h case   72:*/		cpu::op::li<0>(regs,&regs.R28,0xC);
		/* 822034C4h case   72:*/		return 0x822034C8;
		  /* 822034C8h */ case   73:  		/* b 16 */
		/* 822034C8h case   73:*/		return 0x822034D8;
		/* 822034C8h case   73:*/		return 0x822034CC;
		  /* 822034CCh */ case   74:  		/* li R28, 13 */
		/* 822034CCh case   74:*/		cpu::op::li<0>(regs,&regs.R28,0xD);
		/* 822034CCh case   74:*/		return 0x822034D0;
		  /* 822034D0h */ case   75:  		/* b 8 */
		/* 822034D0h case   75:*/		return 0x822034D8;
		/* 822034D0h case   75:*/		return 0x822034D4;
		  /* 822034D4h */ case   76:  		/* li R28, 14 */
		/* 822034D4h case   76:*/		cpu::op::li<0>(regs,&regs.R28,0xE);
		/* 822034D4h case   76:*/		return 0x822034D8;
	}
	return 0x822034D8;
} // Block from 822033A4h-822034D8h (77 instructions)

//////////////////////////////////////////////////////
// Block at 822034D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822034D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822034D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822034D8);
		  /* 822034D8h */ case    0:  		/* mr R5, R29 */
		/* 822034D8h case    0:*/		regs.R5 = regs.R29;
		/* 822034D8h case    0:*/		return 0x822034DC;
		  /* 822034DCh */ case    1:  		/* lwz R4, <#[R1 + 3500]> */
		/* 822034DCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822034DCh case    1:*/		return 0x822034E0;
		  /* 822034E0h */ case    2:  		/* addi R3, R1, 1120 */
		/* 822034E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x460);
		/* 822034E0h case    2:*/		return 0x822034E4;
		  /* 822034E4h */ case    3:  		/* bl -53716 */
		/* 822034E4h case    3:*/		regs.LR = 0x822034E8; return 0x821F6310;
		/* 822034E4h case    3:*/		return 0x822034E8;
		  /* 822034E8h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 822034E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822034E8h case    4:*/		return 0x822034EC;
		  /* 822034ECh */ case    5:  		/* bc 12, CR6_EQ, 2088 */
		/* 822034ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x82203D14;  }
		/* 822034ECh case    5:*/		return 0x822034F0;
		  /* 822034F0h */ case    6:  		/* cmplwi CR6, R29, 4 */
		/* 822034F0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 822034F0h case    6:*/		return 0x822034F4;
		  /* 822034F4h */ case    7:  		/* mr R30, R29 */
		/* 822034F4h case    7:*/		regs.R30 = regs.R29;
		/* 822034F4h case    7:*/		return 0x822034F8;
		  /* 822034F8h */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 822034F8h case    8:*/		if ( regs.CR[6].lt ) { return 0x82203500;  }
		/* 822034F8h case    8:*/		return 0x822034FC;
		  /* 822034FCh */ case    9:  		/* li R30, 4 */
		/* 822034FCh case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822034FCh case    9:*/		return 0x82203500;
	}
	return 0x82203500;
} // Block from 822034D8h-82203500h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82203500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203500);
		  /* 82203500h */ case    0:  		/* li R6, 228 */
		/* 82203500h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82203500h case    0:*/		return 0x82203504;
		  /* 82203504h */ case    1:  		/* mr R5, R30 */
		/* 82203504h case    1:*/		regs.R5 = regs.R30;
		/* 82203504h case    1:*/		return 0x82203508;
		  /* 82203508h */ case    2:  		/* addi R4, R1, 1120 */
		/* 82203508h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x460);
		/* 82203508h case    2:*/		return 0x8220350C;
		  /* 8220350Ch */ case    3:  		/* mr R3, R31 */
		/* 8220350Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220350Ch case    3:*/		return 0x82203510;
		  /* 82203510h */ case    4:  		/* bl -69064 */
		/* 82203510h case    4:*/		regs.LR = 0x82203514; return 0x821F2748;
		/* 82203510h case    4:*/		return 0x82203514;
		  /* 82203514h */ case    5:  		/* lwz R4, <#[R31 + 564]> */
		/* 82203514h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82203514h case    5:*/		return 0x82203518;
		  /* 82203518h */ case    6:  		/* mr R27, R3 */
		/* 82203518h case    6:*/		regs.R27 = regs.R3;
		/* 82203518h case    6:*/		return 0x8220351C;
		  /* 8220351Ch */ case    7:  		/* addi R5, R4, 24 */
		/* 8220351Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 8220351Ch case    7:*/		return 0x82203520;
		  /* 82203520h */ case    8:  		/* mr R8, R30 */
		/* 82203520h case    8:*/		regs.R8 = regs.R30;
		/* 82203520h case    8:*/		return 0x82203524;
		  /* 82203524h */ case    9:  		/* li R7, 1 */
		/* 82203524h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82203524h case    9:*/		return 0x82203528;
		  /* 82203528h */ case   10:  		/* li R6, 103 */
		/* 82203528h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 82203528h case   10:*/		return 0x8220352C;
		  /* 8220352Ch */ case   11:  		/* mr R3, R31 */
		/* 8220352Ch case   11:*/		regs.R3 = regs.R31;
		/* 8220352Ch case   11:*/		return 0x82203530;
		  /* 82203530h */ case   12:  		/* bl 136296 */
		/* 82203530h case   12:*/		regs.LR = 0x82203534; return 0x82224998;
		/* 82203530h case   12:*/		return 0x82203534;
		  /* 82203534h */ case   13:  		/* mr R4, R31 */
		/* 82203534h case   13:*/		regs.R4 = regs.R31;
		/* 82203534h case   13:*/		return 0x82203538;
		  /* 82203538h */ case   14:  		/* mr R26, R3 */
		/* 82203538h case   14:*/		regs.R26 = regs.R3;
		/* 82203538h case   14:*/		return 0x8220353C;
		  /* 8220353Ch */ case   15:  		/* bl -285476 */
		/* 8220353Ch case   15:*/		regs.LR = 0x82203540; return 0x821BDA18;
		/* 8220353Ch case   15:*/		return 0x82203540;
		  /* 82203540h */ case   16:  		/* mr R11, R3 */
		/* 82203540h case   16:*/		regs.R11 = regs.R3;
		/* 82203540h case   16:*/		return 0x82203544;
		  /* 82203544h */ case   17:  		/* mr R3, R26 */
		/* 82203544h case   17:*/		regs.R3 = regs.R26;
		/* 82203544h case   17:*/		return 0x82203548;
		  /* 82203548h */ case   18:  		/* mr R5, R27 */
		/* 82203548h case   18:*/		regs.R5 = regs.R27;
		/* 82203548h case   18:*/		return 0x8220354C;
		  /* 8220354Ch */ case   19:  		/* li R4, 0 */
		/* 8220354Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220354Ch case   19:*/		return 0x82203550;
		  /* 82203550h */ case   20:  		/* stw R28, <#[R11]> */
		/* 82203550h case   20:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82203550h case   20:*/		return 0x82203554;
		  /* 82203554h */ case   21:  		/* bl -601764 */
		/* 82203554h case   21:*/		regs.LR = 0x82203558; return 0x821706B0;
		/* 82203554h case   21:*/		return 0x82203558;
		  /* 82203558h */ case   22:  		/* mr R5, R26 */
		/* 82203558h case   22:*/		regs.R5 = regs.R26;
		/* 82203558h case   22:*/		return 0x8220355C;
		  /* 8220355Ch */ case   23:  		/* mr R4, R30 */
		/* 8220355Ch case   23:*/		regs.R4 = regs.R30;
		/* 8220355Ch case   23:*/		return 0x82203560;
		  /* 82203560h */ case   24:  		/* addi R3, R1, 1120 */
		/* 82203560h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x460);
		/* 82203560h case   24:*/		return 0x82203564;
		  /* 82203564h */ case   25:  		/* bl -71244 */
		/* 82203564h case   25:*/		regs.LR = 0x82203568; return 0x821F1F18;
		/* 82203564h case   25:*/		return 0x82203568;
		  /* 82203568h */ case   26:  		/* li R4, 0 */
		/* 82203568h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82203568h case   26:*/		return 0x8220356C;
		  /* 8220356Ch */ case   27:  		/* addi R3, R1, 1120 */
		/* 8220356Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x460);
		/* 8220356Ch case   27:*/		return 0x82203570;
		  /* 82203570h */ case   28:  		/* subf R29, R30, R29 */
		/* 82203570h case   28:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82203570h case   28:*/		return 0x82203574;
		  /* 82203574h */ case   29:  		/* bl -87932 */
		/* 82203574h case   29:*/		regs.LR = 0x82203578; return 0x821EDDF8;
		/* 82203574h case   29:*/		return 0x82203578;
		  /* 82203578h */ case   30:  		/* b -144 */
		/* 82203578h case   30:*/		return 0x822034E8;
		/* 82203578h case   30:*/		return 0x8220357C;
		  /* 8220357Ch */ case   31:  		/* lwz R11, <#[R14 + 36]> */
		/* 8220357Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 8220357Ch case   31:*/		return 0x82203580;
		  /* 82203580h */ case   32:  		/* lwz R11, <#[R11 + 8]> */
		/* 82203580h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82203580h case   32:*/		return 0x82203584;
		  /* 82203584h */ case   33:  		/* lwz R11, <#[R11 + 8]> */
		/* 82203584h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82203584h case   33:*/		return 0x82203588;
		  /* 82203588h */ case   34:  		/* lwz R25, <#[R11 + 24]> */
		/* 82203588h case   34:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000018) );
		/* 82203588h case   34:*/		return 0x8220358C;
		  /* 8220358Ch */ case   35:  		/* cmpwi CR6, R25, 197 */
		/* 8220358Ch case   35:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000C5);
		/* 8220358Ch case   35:*/		return 0x82203590;
		  /* 82203590h */ case   36:  		/* bc 12, CR6_GT, 44 */
		/* 82203590h case   36:*/		if ( regs.CR[6].gt ) { return 0x822035BC;  }
		/* 82203590h case   36:*/		return 0x82203594;
		  /* 82203594h */ case   37:  		/* cmpwi CR6, R25, 190 */
		/* 82203594h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000BE);
		/* 82203594h case   37:*/		return 0x82203598;
		  /* 82203598h */ case   38:  		/* bc 4, CR6_LT, 68 */
		/* 82203598h case   38:*/		if ( !regs.CR[6].lt ) { return 0x822035DC;  }
		/* 82203598h case   38:*/		return 0x8220359C;
		  /* 8220359Ch */ case   39:  		/* cmpwi CR6, R25, 142 */
		/* 8220359Ch case   39:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x0000008E);
		/* 8220359Ch case   39:*/		return 0x822035A0;
		  /* 822035A0h */ case   40:  		/* bc 12, CR6_LT, 4764 */
		/* 822035A0h case   40:*/		if ( regs.CR[6].lt ) { return 0x8220483C;  }
		/* 822035A0h case   40:*/		return 0x822035A4;
		  /* 822035A4h */ case   41:  		/* cmpwi CR6, R25, 149 */
		/* 822035A4h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000095);
		/* 822035A4h case   41:*/		return 0x822035A8;
		  /* 822035A8h */ case   42:  		/* bc 4, CR6_GT, 52 */
		/* 822035A8h case   42:*/		if ( !regs.CR[6].gt ) { return 0x822035DC;  }
		/* 822035A8h case   42:*/		return 0x822035AC;
		  /* 822035ACh */ case   43:  		/* cmpwi CR6, R25, 165 */
		/* 822035ACh case   43:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000A5);
		/* 822035ACh case   43:*/		return 0x822035B0;
		  /* 822035B0h */ case   44:  		/* bc 4, CR6_GT, 4748 */
		/* 822035B0h case   44:*/		if ( !regs.CR[6].gt ) { return 0x8220483C;  }
		/* 822035B0h case   44:*/		return 0x822035B4;
		  /* 822035B4h */ case   45:  		/* cmpwi CR6, R25, 173 */
		/* 822035B4h case   45:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000AD);
		/* 822035B4h case   45:*/		return 0x822035B8;
		  /* 822035B8h */ case   46:  		/* b 32 */
		/* 822035B8h case   46:*/		return 0x822035D8;
		/* 822035B8h case   46:*/		return 0x822035BC;
	}
	return 0x822035BC;
} // Block from 82203500h-822035BCh (47 instructions)

//////////////////////////////////////////////////////
// Block at 822035BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822035BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822035BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822035BC);
		  /* 822035BCh */ case    0:  		/* cmpwi CR6, R25, 200 */
		/* 822035BCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000C8);
		/* 822035BCh case    0:*/		return 0x822035C0;
		  /* 822035C0h */ case    1:  		/* bc 12, CR6_LT, 4732 */
		/* 822035C0h case    1:*/		if ( regs.CR[6].lt ) { return 0x8220483C;  }
		/* 822035C0h case    1:*/		return 0x822035C4;
		  /* 822035C4h */ case    2:  		/* cmpwi CR6, R25, 203 */
		/* 822035C4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000CB);
		/* 822035C4h case    2:*/		return 0x822035C8;
		  /* 822035C8h */ case    3:  		/* bc 4, CR6_GT, 20 */
		/* 822035C8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x822035DC;  }
		/* 822035C8h case    3:*/		return 0x822035CC;
		  /* 822035CCh */ case    4:  		/* cmpwi CR6, R25, 207 */
		/* 822035CCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000CF);
		/* 822035CCh case    4:*/		return 0x822035D0;
		  /* 822035D0h */ case    5:  		/* bc 4, CR6_GT, 4716 */
		/* 822035D0h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8220483C;  }
		/* 822035D0h case    5:*/		return 0x822035D4;
		  /* 822035D4h */ case    6:  		/* cmpwi CR6, R25, 211 */
		/* 822035D4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x000000D3);
		/* 822035D4h case    6:*/		return 0x822035D8;
	}
	return 0x822035D8;
} // Block from 822035BCh-822035D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822035D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822035D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822035D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822035D8);
		  /* 822035D8h */ case    0:  		/* bc 12, CR6_GT, 4708 */
		/* 822035D8h case    0:*/		if ( regs.CR[6].gt ) { return 0x8220483C;  }
		/* 822035D8h case    0:*/		return 0x822035DC;
	}
	return 0x822035DC;
} // Block from 822035D8h-822035DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822035DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822035DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822035DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822035DC);
		  /* 822035DCh */ case    0:  		/* lwz R9, <#[R1 + 532]> */
		/* 822035DCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000214) );
		/* 822035DCh case    0:*/		return 0x822035E0;
		  /* 822035E0h */ case    1:  		/* li R11, 0 */
		/* 822035E0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822035E0h case    1:*/		return 0x822035E4;
		  /* 822035E4h */ case    2:  		/* mr R10, R9 */
		/* 822035E4h case    2:*/		regs.R10 = regs.R9;
		/* 822035E4h case    2:*/		return 0x822035E8;
		  /* 822035E8h */ case    3:  		/* lbz R8, <#[R10]> */
		/* 822035E8h case    3:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 822035E8h case    3:*/		return 0x822035EC;
		  /* 822035ECh */ case    4:  		/* cmplw CR6, R8, R25 */
		/* 822035ECh case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R25);
		/* 822035ECh case    4:*/		return 0x822035F0;
		  /* 822035F0h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 822035F0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82203604;  }
		/* 822035F0h case    5:*/		return 0x822035F4;
		  /* 822035F4h */ case    6:  		/* addi R11, R11, 1 */
		/* 822035F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822035F4h case    6:*/		return 0x822035F8;
		  /* 822035F8h */ case    7:  		/* addi R10, R10, 4 */
		/* 822035F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822035F8h case    7:*/		return 0x822035FC;
		  /* 822035FCh */ case    8:  		/* cmplwi CR6, R11, 52 */
		/* 822035FCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000034);
		/* 822035FCh case    8:*/		return 0x82203600;
		  /* 82203600h */ case    9:  		/* bc 12, CR6_LT, -24 */
		/* 82203600h case    9:*/		if ( regs.CR[6].lt ) { return 0x822035E8;  }
		/* 82203600h case    9:*/		return 0x82203604;
	}
	return 0x82203604;
} // Block from 822035DCh-82203604h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82203604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203604);
		  /* 82203604h */ case    0:  		/* cmplwi CR6, R11, 52 */
		/* 82203604h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000034);
		/* 82203604h case    0:*/		return 0x82203608;
		  /* 82203608h */ case    1:  		/* mr R3, R31 */
		/* 82203608h case    1:*/		regs.R3 = regs.R31;
		/* 82203608h case    1:*/		return 0x8220360C;
		  /* 8220360Ch */ case    2:  		/* bc 12, CR6_EQ, 4648 */
		/* 8220360Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82204834;  }
		/* 8220360Ch case    2:*/		return 0x82203610;
		  /* 82203610h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82203610h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82203610h case    3:*/		return 0x82203614;
		  /* 82203614h */ case    4:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82203614h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203614h case    4:*/		return 0x82203618;
		  /* 82203618h */ case    5:  		/* mr R5, R14 */
		/* 82203618h case    5:*/		regs.R5 = regs.R14;
		/* 82203618h case    5:*/		return 0x8220361C;
		  /* 8220361Ch */ case    6:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8220361Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8220361Ch case    6:*/		return 0x82203620;
		  /* 82203620h */ case    7:  		/* rlwinm R9, R11, 15, 29, 31 */
		/* 82203620h case    7:*/		cpu::op::rlwinm<0,15,29,31>(regs,&regs.R9,regs.R11);
		/* 82203620h case    7:*/		return 0x82203624;
		  /* 82203624h */ case    8:  		/* rlwinm R8, R11, 12, 31, 31 */
		/* 82203624h case    8:*/		cpu::op::rlwinm<0,12,31,31>(regs,&regs.R8,regs.R11);
		/* 82203624h case    8:*/		return 0x82203628;
		  /* 82203628h */ case    9:  		/* rlwinm R7, R11, 11, 31, 31 */
		/* 82203628h case    9:*/		cpu::op::rlwinm<0,11,31,31>(regs,&regs.R7,regs.R11);
		/* 82203628h case    9:*/		return 0x8220362C;
		  /* 8220362Ch */ case   10:  		/* rlwinm R6, R11, 10, 30, 31 */
		/* 8220362Ch case   10:*/		cpu::op::rlwinm<0,10,30,31>(regs,&regs.R6,regs.R11);
		/* 8220362Ch case   10:*/		return 0x82203630;
		  /* 82203630h */ case   11:  		/* bl -44048 */
		/* 82203630h case   11:*/		regs.LR = 0x82203634; return 0x821F8A20;
		/* 82203630h case   11:*/		return 0x82203634;
		  /* 82203634h */ case   12:  		/* b -29460 */
		/* 82203634h case   12:*/		return 0x821FC320;
		/* 82203634h case   12:*/		return 0x82203638;
		  /* 82203638h */ case   13:  		/* mr R4, R14 */
		/* 82203638h case   13:*/		regs.R4 = regs.R14;
		/* 82203638h case   13:*/		return 0x8220363C;
		  /* 8220363Ch */ case   14:  		/* mr R3, R31 */
		/* 8220363Ch case   14:*/		regs.R3 = regs.R31;
		/* 8220363Ch case   14:*/		return 0x82203640;
		  /* 82203640h */ case   15:  		/* bl -94728 */
		/* 82203640h case   15:*/		regs.LR = 0x82203644; return 0x821EC438;
		/* 82203640h case   15:*/		return 0x82203644;
		  /* 82203644h */ case   16:  		/* lwz R11, <#[R3 + 24]> */
		/* 82203644h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 82203644h case   16:*/		return 0x82203648;
		  /* 82203648h */ case   17:  		/* mr R21, R3 */
		/* 82203648h case   17:*/		regs.R21 = regs.R3;
		/* 82203648h case   17:*/		return 0x8220364C;
		  /* 8220364Ch */ case   18:  		/* rlwinm R11, R11, 0, 17, 31 */
		/* 8220364Ch case   18:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R11,regs.R11);
		/* 8220364Ch case   18:*/		return 0x82203650;
		  /* 82203650h */ case   19:  		/* cmplwi CR6, R11, 1 */
		/* 82203650h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82203650h case   19:*/		return 0x82203654;
		  /* 82203654h */ case   20:  		/* bc 4, CR6_GT, 408 */
		/* 82203654h case   20:*/		if ( !regs.CR[6].gt ) { return 0x822037EC;  }
		/* 82203654h case   20:*/		return 0x82203658;
		  /* 82203658h */ case   21:  		/* lwz R10, <#[R3 + 4]> */
		/* 82203658h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82203658h case   21:*/		return 0x8220365C;
		  /* 8220365Ch */ case   22:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220365Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220365Ch case   22:*/		return 0x82203660;
		  /* 82203660h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 82203660h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203660h case   23:*/		return 0x82203664;
		  /* 82203664h */ case   24:  		/* lwz R24, <#[R10 + 16]> */
		/* 82203664h case   24:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R10 + 0x00000010) );
		/* 82203664h case   24:*/		return 0x82203668;
		  /* 82203668h */ case   25:  		/* bc 12, CR6_EQ, 200 */
		/* 82203668h case   25:*/		if ( regs.CR[6].eq ) { return 0x82203730;  }
		/* 82203668h case   25:*/		return 0x8220366C;
		  /* 8220366Ch */ case   26:  		/* li R26, 0 */
		/* 8220366Ch case   26:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8220366Ch case   26:*/		return 0x82203670;
		  /* 82203670h */ case   27:  		/* li R27, 0 */
		/* 82203670h case   27:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82203670h case   27:*/		return 0x82203674;
		  /* 82203674h */ case   28:  		/* mr R25, R11 */
		/* 82203674h case   28:*/		regs.R25 = regs.R11;
		/* 82203674h case   28:*/		return 0x82203678;
		  /* 82203678h */ case   29:  		/* lwz R11, <#[R31 + 564]> */
		/* 82203678h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82203678h case   29:*/		return 0x8220367C;
		  /* 8220367Ch */ case   30:  		/* lwz R10, <#[R11 + 80]> */
		/* 8220367Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000050) );
		/* 8220367Ch case   30:*/		return 0x82203680;
		  /* 82203680h */ case   31:  		/* cmplwi CR6, R10, 0 */
		/* 82203680h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82203680h case   31:*/		return 0x82203684;
		  /* 82203684h */ case   32:  		/* bc 12, CR6_EQ, 16 */
		/* 82203684h case   32:*/		if ( regs.CR[6].eq ) { return 0x82203694;  }
		/* 82203684h case   32:*/		return 0x82203688;
		  /* 82203688h */ case   33:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82203688h case   33:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82203688h case   33:*/		return 0x8220368C;
		  /* 8220368Ch */ case   34:  		/* lwzx R30, <#[R27 + R11]> */
		/* 8220368Ch case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 8220368Ch case   34:*/		return 0x82203690;
		  /* 82203690h */ case   35:  		/* b 8 */
		/* 82203690h case   35:*/		return 0x82203698;
		/* 82203690h case   35:*/		return 0x82203694;
	}
	return 0x82203694;
} // Block from 82203604h-82203694h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82203694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203694);
		  /* 82203694h */ case    0:  		/* li R30, 0 */
		/* 82203694h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82203694h case    0:*/		return 0x82203698;
	}
	return 0x82203698;
} // Block from 82203694h-82203698h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82203698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203698);
		  /* 82203698h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82203698h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82203698h case    0:*/		return 0x8220369C;
		  /* 8220369Ch */ case    1:  		/* bc 12, CR6_EQ, 132 */
		/* 8220369Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82203720;  }
		/* 8220369Ch case    1:*/		return 0x822036A0;
		  /* 822036A0h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 822036A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 822036A0h case    2:*/		return 0x822036A4;
		  /* 822036A4h */ case    3:  		/* lwzx R11, <#[R11 + R26]> */
		/* 822036A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 822036A4h case    3:*/		return 0x822036A8;
		  /* 822036A8h */ case    4:  		/* rlwinm. R11, R11, 29, 18, 31 */
		/* 822036A8h case    4:*/		cpu::op::rlwinm<1,29,18,31>(regs,&regs.R11,regs.R11);
		/* 822036A8h case    4:*/		return 0x822036AC;
		  /* 822036ACh */ case    5:  		/* bc 12, CR0_EQ, 116 */
		/* 822036ACh case    5:*/		if ( regs.CR[0].eq ) { return 0x82203720;  }
		/* 822036ACh case    5:*/		return 0x822036B0;
		  /* 822036B0h */ case    6:  		/* mr R28, R11 */
		/* 822036B0h case    6:*/		regs.R28 = regs.R11;
		/* 822036B0h case    6:*/		return 0x822036B4;
		  /* 822036B4h */ case    7:  		/* ld R11, <#[R30]> */
		/* 822036B4h case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822036B4h case    7:*/		return 0x822036B8;
		  /* 822036B8h */ case    8:  		/* std R11, <#[R1 + 96]> */
		/* 822036B8h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 822036B8h case    8:*/		return 0x822036BC;
		  /* 822036BCh */ case    9:  		/* lwz R11, <#[R1 + 96]> */
		/* 822036BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 822036BCh case    9:*/		return 0x822036C0;
		  /* 822036C0h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 822036C0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822036C0h case   10:*/		return 0x822036C4;
		  /* 822036C4h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 822036C4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82203714;  }
		/* 822036C4h case   11:*/		return 0x822036C8;
		  /* 822036C8h */ case   12:  		/* lwz R11, <#[R1 + 100]> */
		/* 822036C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 822036C8h case   12:*/		return 0x822036CC;
		  /* 822036CCh */ case   13:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 822036CCh case   13:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 822036CCh case   13:*/		return 0x822036D0;
		  /* 822036D0h */ case   14:  		/* bc 4, CR0_EQ, 68 */
		/* 822036D0h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82203714;  }
		/* 822036D0h case   14:*/		return 0x822036D4;
		  /* 822036D4h */ case   15:  		/* rlwinm R11, R11, 15, 17, 31 */
		/* 822036D4h case   15:*/		cpu::op::rlwinm<0,15,17,31>(regs,&regs.R11,regs.R11);
		/* 822036D4h case   15:*/		return 0x822036D8;
		  /* 822036D8h */ case   16:  		/* cmplw CR6, R11, R24 */
		/* 822036D8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 822036D8h case   16:*/		return 0x822036DC;
		  /* 822036DCh */ case   17:  		/* bc 4, CR6_EQ, 56 */
		/* 822036DCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x82203714;  }
		/* 822036DCh case   17:*/		return 0x822036E0;
		  /* 822036E0h */ case   18:  		/* addi R4, R1, 96 */
		/* 822036E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 822036E0h case   18:*/		return 0x822036E4;
		  /* 822036E4h */ case   19:  		/* mr R3, R31 */
		/* 822036E4h case   19:*/		regs.R3 = regs.R31;
		/* 822036E4h case   19:*/		return 0x822036E8;
		  /* 822036E8h */ case   20:  		/* bl -70504 */
		/* 822036E8h case   20:*/		regs.LR = 0x822036EC; return 0x821F2380;
		/* 822036E8h case   20:*/		return 0x822036EC;
		  /* 822036ECh */ case   21:  		/* mr R11, R3 */
		/* 822036ECh case   21:*/		regs.R11 = regs.R3;
		/* 822036ECh case   21:*/		return 0x822036F0;
		  /* 822036F0h */ case   22:  		/* mr R3, R31 */
		/* 822036F0h case   22:*/		regs.R3 = regs.R31;
		/* 822036F0h case   22:*/		return 0x822036F4;
		  /* 822036F4h */ case   23:  		/* mr R5, R11 */
		/* 822036F4h case   23:*/		regs.R5 = regs.R11;
		/* 822036F4h case   23:*/		return 0x822036F8;
		  /* 822036F8h */ case   24:  		/* mr R4, R11 */
		/* 822036F8h case   24:*/		regs.R4 = regs.R11;
		/* 822036F8h case   24:*/		return 0x822036FC;
		  /* 822036FCh */ case   25:  		/* bl -86996 */
		/* 822036FCh case   25:*/		regs.LR = 0x82203700; return 0x821EE328;
		/* 822036FCh case   25:*/		return 0x82203700;
		  /* 82203700h */ case   26:  		/* stw R3, <#[R30]> */
		/* 82203700h case   26:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82203700h case   26:*/		return 0x82203704;
		  /* 82203704h */ case   27:  		/* lwz R11, <#[R30 + 4]> */
		/* 82203704h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82203704h case   27:*/		return 0x82203708;
		  /* 82203708h */ case   28:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 82203708h case   28:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 82203708h case   28:*/		return 0x8220370C;
		  /* 8220370Ch */ case   29:  		/* ori R11, R11, 1 */
		/* 8220370Ch case   29:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220370Ch case   29:*/		return 0x82203710;
		  /* 82203710h */ case   30:  		/* stw R11, <#[R30 + 4]> */
		/* 82203710h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82203710h case   30:*/		return 0x82203714;
	}
	return 0x82203714;
} // Block from 82203698h-82203714h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82203714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203714);
		  /* 82203714h */ case    0:  		/* addic. R28, R28, -1 */
		/* 82203714h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82203714h case    0:*/		return 0x82203718;
		  /* 82203718h */ case    1:  		/* addi R30, R30, 8 */
		/* 82203718h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 82203718h case    1:*/		return 0x8220371C;
		  /* 8220371Ch */ case    2:  		/* bc 4, CR0_EQ, -104 */
		/* 8220371Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x822036B4;  }
		/* 8220371Ch case    2:*/		return 0x82203720;
	}
	return 0x82203720;
} // Block from 82203714h-82203720h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203720);
		  /* 82203720h */ case    0:  		/* addic. R25, R25, -1 */
		/* 82203720h case    0:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 82203720h case    0:*/		return 0x82203724;
		  /* 82203724h */ case    1:  		/* addi R27, R27, 4 */
		/* 82203724h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82203724h case    1:*/		return 0x82203728;
		  /* 82203728h */ case    2:  		/* addi R26, R26, 40 */
		/* 82203728h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x28);
		/* 82203728h case    2:*/		return 0x8220372C;
		  /* 8220372Ch */ case    3:  		/* bc 4, CR0_EQ, -180 */
		/* 8220372Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82203678;  }
		/* 8220372Ch case    3:*/		return 0x82203730;
	}
	return 0x82203730;
} // Block from 82203720h-82203730h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203730);
		  /* 82203730h */ case    0:  		/* lwz R20, <#[R1 + 3500]> */
		/* 82203730h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203730h case    0:*/		return 0x82203734;
		  /* 82203734h */ case    1:  		/* li R30, 0 */
		/* 82203734h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82203734h case    1:*/		return 0x82203738;
		  /* 82203738h */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 82203738h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 82203738h case    2:*/		return 0x8220373C;
		  /* 8220373Ch */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8220373Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8220373Ch case    3:*/		return 0x82203740;
		  /* 82203740h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 82203740h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8220376C;  }
		/* 82203740h case    4:*/		return 0x82203744;
		  /* 82203744h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 82203744h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82203744h case    5:*/		return 0x82203748;
		  /* 82203748h */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 82203748h case    6:*/		if ( regs.CR[0].eq ) { return 0x8220376C;  }
		/* 82203748h case    6:*/		return 0x8220374C;
		  /* 8220374Ch */ case    7:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 8220374Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 8220374Ch case    7:*/		return 0x82203750;
		  /* 82203750h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 82203750h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82203750h case    8:*/		return 0x82203754;
		  /* 82203754h */ case    9:  		/* add R30, R11, R30 */
		/* 82203754h case    9:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82203754h case    9:*/		return 0x82203758;
		  /* 82203758h */ case   10:  		/* lwz R11, <#[R10 + 4]> */
		/* 82203758h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82203758h case   10:*/		return 0x8220375C;
		  /* 8220375Ch */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8220375Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8220375Ch case   11:*/		return 0x82203760;
		  /* 82203760h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 82203760h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8220376C;  }
		/* 82203760h case   12:*/		return 0x82203764;
		  /* 82203764h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82203764h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203764h case   13:*/		return 0x82203768;
		  /* 82203768h */ case   14:  		/* bc 4, CR6_EQ, -28 */
		/* 82203768h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220374C;  }
		/* 82203768h case   14:*/		return 0x8220376C;
	}
	return 0x8220376C;
} // Block from 82203730h-8220376Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220376Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220376C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220376C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220376C);
		  /* 8220376Ch */ case    0:  		/* mr R5, R30 */
		/* 8220376Ch case    0:*/		regs.R5 = regs.R30;
		/* 8220376Ch case    0:*/		return 0x82203770;
		  /* 82203770h */ case    1:  		/* mr R4, R20 */
		/* 82203770h case    1:*/		regs.R4 = regs.R20;
		/* 82203770h case    1:*/		return 0x82203774;
		  /* 82203774h */ case    2:  		/* addi R3, R1, 2568 */
		/* 82203774h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA08);
		/* 82203774h case    2:*/		return 0x82203778;
		  /* 82203778h */ case    3:  		/* bl -54376 */
		/* 82203778h case    3:*/		regs.LR = 0x8220377C; return 0x821F6310;
		/* 82203778h case    3:*/		return 0x8220377C;
		  /* 8220377Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8220377Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220377Ch case    4:*/		return 0x82203780;
		  /* 82203780h */ case    5:  		/* bc 12, CR6_EQ, 112 */
		/* 82203780h case    5:*/		if ( regs.CR[6].eq ) { return 0x822037F0;  }
		/* 82203780h case    5:*/		return 0x82203784;
		  /* 82203784h */ case    6:  		/* mr R28, R30 */
		/* 82203784h case    6:*/		regs.R28 = regs.R30;
		/* 82203784h case    6:*/		return 0x82203788;
		  /* 82203788h */ case    7:  		/* addi R3, R1, 2568 */
		/* 82203788h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA08);
		/* 82203788h case    7:*/		return 0x8220378C;
		  /* 8220378Ch */ case    8:  		/* bl -272684 */
		/* 8220378Ch case    8:*/		regs.LR = 0x82203790; return 0x821C0E60;
		/* 8220378Ch case    8:*/		return 0x82203790;
		  /* 82203790h */ case    9:  		/* lwz R11, <#[R3 + 4]> */
		/* 82203790h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82203790h case    9:*/		return 0x82203794;
		  /* 82203794h */ case   10:  		/* mr R30, R3 */
		/* 82203794h case   10:*/		regs.R30 = regs.R3;
		/* 82203794h case   10:*/		return 0x82203798;
		  /* 82203798h */ case   11:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 82203798h case   11:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 82203798h case   11:*/		return 0x8220379C;
		  /* 8220379Ch */ case   12:  		/* bc 4, CR0_EQ, 68 */
		/* 8220379Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x822037E0;  }
		/* 8220379Ch case   12:*/		return 0x822037A0;
		  /* 822037A0h */ case   13:  		/* rlwinm R11, R11, 15, 17, 31 */
		/* 822037A0h case   13:*/		cpu::op::rlwinm<0,15,17,31>(regs,&regs.R11,regs.R11);
		/* 822037A0h case   13:*/		return 0x822037A4;
		  /* 822037A4h */ case   14:  		/* cmplw CR6, R11, R24 */
		/* 822037A4h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 822037A4h case   14:*/		return 0x822037A8;
		  /* 822037A8h */ case   15:  		/* bc 4, CR6_EQ, 56 */
		/* 822037A8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822037E0;  }
		/* 822037A8h case   15:*/		return 0x822037AC;
		  /* 822037ACh */ case   16:  		/* mr R4, R3 */
		/* 822037ACh case   16:*/		regs.R4 = regs.R3;
		/* 822037ACh case   16:*/		return 0x822037B0;
		  /* 822037B0h */ case   17:  		/* mr R3, R31 */
		/* 822037B0h case   17:*/		regs.R3 = regs.R31;
		/* 822037B0h case   17:*/		return 0x822037B4;
		  /* 822037B4h */ case   18:  		/* bl -70708 */
		/* 822037B4h case   18:*/		regs.LR = 0x822037B8; return 0x821F2380;
		/* 822037B4h case   18:*/		return 0x822037B8;
		  /* 822037B8h */ case   19:  		/* mr R11, R3 */
		/* 822037B8h case   19:*/		regs.R11 = regs.R3;
		/* 822037B8h case   19:*/		return 0x822037BC;
		  /* 822037BCh */ case   20:  		/* mr R3, R31 */
		/* 822037BCh case   20:*/		regs.R3 = regs.R31;
		/* 822037BCh case   20:*/		return 0x822037C0;
		  /* 822037C0h */ case   21:  		/* mr R5, R11 */
		/* 822037C0h case   21:*/		regs.R5 = regs.R11;
		/* 822037C0h case   21:*/		return 0x822037C4;
		  /* 822037C4h */ case   22:  		/* mr R4, R11 */
		/* 822037C4h case   22:*/		regs.R4 = regs.R11;
		/* 822037C4h case   22:*/		return 0x822037C8;
		  /* 822037C8h */ case   23:  		/* bl -87200 */
		/* 822037C8h case   23:*/		regs.LR = 0x822037CC; return 0x821EE328;
		/* 822037C8h case   23:*/		return 0x822037CC;
		  /* 822037CCh */ case   24:  		/* stw R3, <#[R30]> */
		/* 822037CCh case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 822037CCh case   24:*/		return 0x822037D0;
		  /* 822037D0h */ case   25:  		/* li R11, 1 */
		/* 822037D0h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822037D0h case   25:*/		return 0x822037D4;
		  /* 822037D4h */ case   26:  		/* lwz R10, <#[R30 + 4]> */
		/* 822037D4h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822037D4h case   26:*/		return 0x822037D8;
		  /* 822037D8h */ case   27:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 822037D8h case   27:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 822037D8h case   27:*/		return 0x822037DC;
		  /* 822037DCh */ case   28:  		/* stw R10, <#[R30 + 4]> */
		/* 822037DCh case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822037DCh case   28:*/		return 0x822037E0;
	}
	return 0x822037E0;
} // Block from 8220376Ch-822037E0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 822037E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822037E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822037E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822037E0);
		  /* 822037E0h */ case    0:  		/* addic. R28, R28, -1 */
		/* 822037E0h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 822037E0h case    0:*/		return 0x822037E4;
		  /* 822037E4h */ case    1:  		/* bc 4, CR0_EQ, -92 */
		/* 822037E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82203788;  }
		/* 822037E4h case    1:*/		return 0x822037E8;
		  /* 822037E8h */ case    2:  		/* b 8 */
		/* 822037E8h case    2:*/		return 0x822037F0;
		/* 822037E8h case    2:*/		return 0x822037EC;
	}
	return 0x822037EC;
} // Block from 822037E0h-822037ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822037ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822037EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822037EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822037EC);
		  /* 822037ECh */ case    0:  		/* lwz R20, <#[R1 + 3500]> */
		/* 822037ECh case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822037ECh case    0:*/		return 0x822037F0;
	}
	return 0x822037F0;
} // Block from 822037ECh-822037F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822037F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822037F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822037F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822037F0);
		  /* 822037F0h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 822037F0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822037F0h case    0:*/		return 0x822037F4;
		  /* 822037F4h */ case    1:  		/* li R8, 0 */
		/* 822037F4h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822037F4h case    1:*/		return 0x822037F8;
		  /* 822037F8h */ case    2:  		/* li R7, 0 */
		/* 822037F8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822037F8h case    2:*/		return 0x822037FC;
		  /* 822037FCh */ case    3:  		/* addi R5, R4, 32 */
		/* 822037FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 822037FCh case    3:*/		return 0x82203800;
		  /* 82203800h */ case    4:  		/* li R6, 86 */
		/* 82203800h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x56);
		/* 82203800h case    4:*/		return 0x82203804;
		  /* 82203804h */ case    5:  		/* mr R3, R31 */
		/* 82203804h case    5:*/		regs.R3 = regs.R31;
		/* 82203804h case    5:*/		return 0x82203808;
		  /* 82203808h */ case    6:  		/* bl 135568 */
		/* 82203808h case    6:*/		regs.LR = 0x8220380C; return 0x82224998;
		/* 82203808h case    6:*/		return 0x8220380C;
		  /* 8220380Ch */ case    7:  		/* mr R5, R31 */
		/* 8220380Ch case    7:*/		regs.R5 = regs.R31;
		/* 8220380Ch case    7:*/		return 0x82203810;
		  /* 82203810h */ case    8:  		/* lwz R4, <#[R21 + 12]> */
		/* 82203810h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x0000000C) );
		/* 82203810h case    8:*/		return 0x82203814;
		  /* 82203814h */ case    9:  		/* mr R30, R3 */
		/* 82203814h case    9:*/		regs.R30 = regs.R3;
		/* 82203814h case    9:*/		return 0x82203818;
		  /* 82203818h */ case   10:  		/* bl -602400 */
		/* 82203818h case   10:*/		regs.LR = 0x8220381C; return 0x821706F8;
		/* 82203818h case   10:*/		return 0x8220381C;
		  /* 8220381Ch */ case   11:  		/* mr R5, R31 */
		/* 8220381Ch case   11:*/		regs.R5 = regs.R31;
		/* 8220381Ch case   11:*/		return 0x82203820;
		  /* 82203820h */ case   12:  		/* lwz R4, <#[R21 + 12]> */
		/* 82203820h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x0000000C) );
		/* 82203820h case   12:*/		return 0x82203824;
		  /* 82203824h */ case   13:  		/* lwz R3, <#[R31 + 564]> */
		/* 82203824h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82203824h case   13:*/		return 0x82203828;
		  /* 82203828h */ case   14:  		/* bl 180920 */
		/* 82203828h case   14:*/		regs.LR = 0x8220382C; return 0x8222FAE0;
		/* 82203828h case   14:*/		return 0x8220382C;
		  /* 8220382Ch */ case   15:  		/* lwz R11, <#[R21 + 24]> */
		/* 8220382Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000018) );
		/* 8220382Ch case   15:*/		return 0x82203830;
		  /* 82203830h */ case   16:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82203830h case   16:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82203830h case   16:*/		return 0x82203834;
		  /* 82203834h */ case   17:  		/* bc 4, CR0_EQ, 16 */
		/* 82203834h case   17:*/		if ( !regs.CR[0].eq ) { return 0x82203844;  }
		/* 82203834h case   17:*/		return 0x82203838;
		  /* 82203838h */ case   18:  		/* lwz R11, <#[R31 + 40]> */
		/* 82203838h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82203838h case   18:*/		return 0x8220383C;
		  /* 8220383Ch */ case   19:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 8220383Ch case   19:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 8220383Ch case   19:*/		return 0x82203840;
		  /* 82203840h */ case   20:  		/* bc 12, CR0_EQ, 60 */
		/* 82203840h case   20:*/		if ( regs.CR[0].eq ) { return 0x8220387C;  }
		/* 82203840h case   20:*/		return 0x82203844;
	}
	return 0x82203844;
} // Block from 822037F0h-82203844h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82203844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203844);
		  /* 82203844h */ case    0:  		/* lwz R11, <#[R31 + 52]> */
		/* 82203844h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 82203844h case    0:*/		return 0x82203848;
		  /* 82203848h */ case    1:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 82203848h case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 82203848h case    1:*/		return 0x8220384C;
		  /* 8220384Ch */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 8220384Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82203860;  }
		/* 8220384Ch case    2:*/		return 0x82203850;
		  /* 82203850h */ case    3:  		/* li R4, 3585 */
		/* 82203850h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xE01);
		/* 82203850h case    3:*/		return 0x82203854;
		  /* 82203854h */ case    4:  		/* mr R3, R31 */
		/* 82203854h case    4:*/		regs.R3 = regs.R31;
		/* 82203854h case    4:*/		return 0x82203858;
		  /* 82203858h */ case    5:  		/* bl -727776 */
		/* 82203858h case    5:*/		regs.LR = 0x8220385C; return 0x82151D78;
		/* 82203858h case    5:*/		return 0x8220385C;
		  /* 8220385Ch */ case    6:  		/* b 32 */
		/* 8220385Ch case    6:*/		return 0x8220387C;
		/* 8220385Ch case    6:*/		return 0x82203860;
	}
	return 0x82203860;
} // Block from 82203844h-82203860h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82203860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203860);
		  /* 82203860h */ case    0:  		/* mr R4, R31 */
		/* 82203860h case    0:*/		regs.R4 = regs.R31;
		/* 82203860h case    0:*/		return 0x82203864;
		  /* 82203864h */ case    1:  		/* mr R3, R30 */
		/* 82203864h case    1:*/		regs.R3 = regs.R30;
		/* 82203864h case    1:*/		return 0x82203868;
		  /* 82203868h */ case    2:  		/* bl -651560 */
		/* 82203868h case    2:*/		regs.LR = 0x8220386C; return 0x82164740;
		/* 82203868h case    2:*/		return 0x8220386C;
		  /* 8220386Ch */ case    3:  		/* lwz R10, <#[R3 + 8]> */
		/* 8220386Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8220386Ch case    3:*/		return 0x82203870;
		  /* 82203870h */ case    4:  		/* li R11, 5 */
		/* 82203870h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82203870h case    4:*/		return 0x82203874;
		  /* 82203874h */ case    5:  		/* rlwimi R10, R11, 2, 23, 31 */
		/* 82203874h case    5:*/		cpu::op::rlwimi<0,2,23,31>(regs,&regs.R10,regs.R11);
		/* 82203874h case    5:*/		return 0x82203878;
		  /* 82203878h */ case    6:  		/* stw R10, <#[R3 + 8]> */
		/* 82203878h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82203878h case    6:*/		return 0x8220387C;
	}
	return 0x8220387C;
} // Block from 82203860h-8220387Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220387Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220387C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220387C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220387C);
		  /* 8220387Ch */ case    0:  		/* mr R3, R31 */
		/* 8220387Ch case    0:*/		regs.R3 = regs.R31;
		/* 8220387Ch case    0:*/		return 0x82203880;
		  /* 82203880h */ case    1:  		/* bl -88328 */
		/* 82203880h case    1:*/		regs.LR = 0x82203884; return 0x821EDF78;
		/* 82203880h case    1:*/		return 0x82203884;
		  /* 82203884h */ case    2:  		/* lwz R11, <#[R3 + 48]> */
		/* 82203884h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 82203884h case    2:*/		return 0x82203888;
		  /* 82203888h */ case    3:  		/* mr R4, R3 */
		/* 82203888h case    3:*/		regs.R4 = regs.R3;
		/* 82203888h case    3:*/		return 0x8220388C;
		  /* 8220388Ch */ case    4:  		/* oris R11, R11, 32 */
		/* 8220388Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8220388Ch case    4:*/		return 0x82203890;
		  /* 82203890h */ case    5:  		/* mr R5, R31 */
		/* 82203890h case    5:*/		regs.R5 = regs.R31;
		/* 82203890h case    5:*/		return 0x82203894;
		  /* 82203894h */ case    6:  		/* stw R11, <#[R3 + 48]> */
		/* 82203894h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 82203894h case    6:*/		return 0x82203898;
		  /* 82203898h */ case    7:  		/* mr R24, R3 */
		/* 82203898h case    7:*/		regs.R24 = regs.R3;
		/* 82203898h case    7:*/		return 0x8220389C;
		  /* 8220389Ch */ case    8:  		/* lwz R3, <#[R31 + 564]> */
		/* 8220389Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8220389Ch case    8:*/		return 0x822038A0;
		  /* 822038A0h */ case    9:  		/* bl 180800 */
		/* 822038A0h case    9:*/		regs.LR = 0x822038A4; return 0x8222FAE0;
		/* 822038A0h case    9:*/		return 0x822038A4;
		  /* 822038A4h */ case   10:  		/* mr R7, R31 */
		/* 822038A4h case   10:*/		regs.R7 = regs.R31;
		/* 822038A4h case   10:*/		return 0x822038A8;
		  /* 822038A8h */ case   11:  		/* lwz R5, <#[R31 + 564]> */
		/* 822038A8h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000234) );
		/* 822038A8h case   11:*/		return 0x822038AC;
		  /* 822038ACh */ case   12:  		/* mr R4, R24 */
		/* 822038ACh case   12:*/		regs.R4 = regs.R24;
		/* 822038ACh case   12:*/		return 0x822038B0;
		  /* 822038B0h */ case   13:  		/* lwz R6, <#[R21 + 4]> */
		/* 822038B0h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R21 + 0x00000004) );
		/* 822038B0h case   13:*/		return 0x822038B4;
		  /* 822038B4h */ case   14:  		/* mr R3, R31 */
		/* 822038B4h case   14:*/		regs.R3 = regs.R31;
		/* 822038B4h case   14:*/		return 0x822038B8;
		  /* 822038B8h */ case   15:  		/* bl -74480 */
		/* 822038B8h case   15:*/		regs.LR = 0x822038BC; return 0x821F15C8;
		/* 822038B8h case   15:*/		return 0x822038BC;
		  /* 822038BCh */ case   16:  		/* lwz R11, <#[R14 + 36]> */
		/* 822038BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 822038BCh case   16:*/		return 0x822038C0;
		  /* 822038C0h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 822038C0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822038C0h case   17:*/		return 0x822038C4;
		  /* 822038C4h */ case   18:  		/* bc 12, CR6_EQ, 496 */
		/* 822038C4h case   18:*/		if ( regs.CR[6].eq ) { return 0x82203AB4;  }
		/* 822038C4h case   18:*/		return 0x822038C8;
		  /* 822038C8h */ case   19:  		/* lwz R4, <#[R11 + 8]> */
		/* 822038C8h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 822038C8h case   19:*/		return 0x822038CC;
		  /* 822038CCh */ case   20:  		/* cmplwi CR6, R4, 0 */
		/* 822038CCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 822038CCh case   20:*/		return 0x822038D0;
		  /* 822038D0h */ case   21:  		/* bc 12, CR6_EQ, 484 */
		/* 822038D0h case   21:*/		if ( regs.CR[6].eq ) { return 0x82203AB4;  }
		/* 822038D0h case   21:*/		return 0x822038D4;
		  /* 822038D4h */ case   22:  		/* lwz R11, <#[R4 + 4]> */
		/* 822038D4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 822038D4h case   22:*/		return 0x822038D8;
		  /* 822038D8h */ case   23:  		/* mr R3, R31 */
		/* 822038D8h case   23:*/		regs.R3 = regs.R31;
		/* 822038D8h case   23:*/		return 0x822038DC;
		  /* 822038DCh */ case   24:  		/* cmpwi CR6, R11, 1 */
		/* 822038DCh case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 822038DCh case   24:*/		return 0x822038E0;
		  /* 822038E0h */ case   25:  		/* bc 4, CR6_EQ, 3984 */
		/* 822038E0h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82204870;  }
		/* 822038E0h case   25:*/		return 0x822038E4;
		  /* 822038E4h */ case   26:  		/* bl -91276 */
		/* 822038E4h case   26:*/		regs.LR = 0x822038E8; return 0x821ED458;
		/* 822038E4h case   26:*/		return 0x822038E8;
		  /* 822038E8h */ case   27:  		/* or. R22, R3, R3 */
		/* 822038E8h case   27:*/		cpu::op::or<1>(regs,&regs.R22,regs.R3,regs.R3);
		/* 822038E8h case   27:*/		return 0x822038EC;
		  /* 822038ECh */ case   28:  		/* bc 12, CR0_EQ, 456 */
		/* 822038ECh case   28:*/		if ( regs.CR[0].eq ) { return 0x82203AB4;  }
		/* 822038ECh case   28:*/		return 0x822038F0;
		  /* 822038F0h */ case   29:  		/* mr R5, R22 */
		/* 822038F0h case   29:*/		regs.R5 = regs.R22;
		/* 822038F0h case   29:*/		return 0x822038F4;
		  /* 822038F4h */ case   30:  		/* mr R4, R20 */
		/* 822038F4h case   30:*/		regs.R4 = regs.R20;
		/* 822038F4h case   30:*/		return 0x822038F8;
		  /* 822038F8h */ case   31:  		/* addi R3, R1, 2600 */
		/* 822038F8h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA28);
		/* 822038F8h case   31:*/		return 0x822038FC;
		  /* 822038FCh */ case   32:  		/* bl -54764 */
		/* 822038FCh case   32:*/		regs.LR = 0x82203900; return 0x821F6310;
		/* 822038FCh case   32:*/		return 0x82203900;
		  /* 82203900h */ case   33:  		/* lwz R11, <#[R21 + 4]> */
		/* 82203900h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82203900h case   33:*/		return 0x82203904;
		  /* 82203904h */ case   34:  		/* mr R25, R22 */
		/* 82203904h case   34:*/		regs.R25 = regs.R22;
		/* 82203904h case   34:*/		return 0x82203908;
		  /* 82203908h */ case   35:  		/* lwz R11, <#[R11 + 44]> */
		/* 82203908h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82203908h case   35:*/		return 0x8220390C;
		  /* 8220390Ch */ case   36:  		/* cmplwi CR6, R11, 0 */
		/* 8220390Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220390Ch case   36:*/		return 0x82203910;
		  /* 82203910h */ case   37:  		/* bc 12, CR6_EQ, 4044 */
		/* 82203910h case   37:*/		if ( regs.CR[6].eq ) { return 0x822048DC;  }
		/* 82203910h case   37:*/		return 0x82203914;
		  /* 82203914h */ case   38:  		/* lwz R10, <#[R11 + 4]> */
		/* 82203914h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203914h case   38:*/		return 0x82203918;
		  /* 82203918h */ case   39:  		/* cmpwi CR6, R10, 1 */
		/* 82203918h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82203918h case   39:*/		return 0x8220391C;
		  /* 8220391Ch */ case   40:  		/* bc 4, CR6_EQ, 4032 */
		/* 8220391Ch case   40:*/		if ( !regs.CR[6].eq ) { return 0x822048DC;  }
		/* 8220391Ch case   40:*/		return 0x82203920;
		  /* 82203920h */ case   41:  		/* mr R23, R11 */
		/* 82203920h case   41:*/		regs.R23 = regs.R11;
		/* 82203920h case   41:*/		return 0x82203924;
		  /* 82203924h */ case   42:  		/* lwz R11, <#[R23 + 8]> */
		/* 82203924h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82203924h case   42:*/		return 0x82203928;
		  /* 82203928h */ case   43:  		/* lwz R10, <#[R11 + 4]> */
		/* 82203928h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203928h case   43:*/		return 0x8220392C;
		  /* 8220392Ch */ case   44:  		/* cmpwi CR6, R10, 6 */
		/* 8220392Ch case   44:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 8220392Ch case   44:*/		return 0x82203930;
		  /* 82203930h */ case   45:  		/* bc 4, CR6_EQ, 328 */
		/* 82203930h case   45:*/		if ( !regs.CR[6].eq ) { return 0x82203A78;  }
		/* 82203930h case   45:*/		return 0x82203934;
		  /* 82203934h */ case   46:  		/* lwz R10, <#[R11 + 16]> */
		/* 82203934h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82203934h case   46:*/		return 0x82203938;
		  /* 82203938h */ case   47:  		/* cmpwi CR6, R10, 1 */
		/* 82203938h case   47:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82203938h case   47:*/		return 0x8220393C;
		  /* 8220393Ch */ case   48:  		/* bc 4, CR6_EQ, 3900 */
		/* 8220393Ch case   48:*/		if ( !regs.CR[6].eq ) { return 0x82204878;  }
		/* 8220393Ch case   48:*/		return 0x82203940;
		  /* 82203940h */ case   49:  		/* lwz R28, <#[R11 + 24]> */
		/* 82203940h case   49:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000018) );
		/* 82203940h case   49:*/		return 0x82203944;
		  /* 82203944h */ case   50:  		/* cmplwi CR6, R28, 0 */
		/* 82203944h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82203944h case   50:*/		return 0x82203948;
		  /* 82203948h */ case   51:  		/* bc 12, CR6_EQ, 3964 */
		/* 82203948h case   51:*/		if ( regs.CR[6].eq ) { return 0x822048C4;  }
		/* 82203948h case   51:*/		return 0x8220394C;
		  /* 8220394Ch */ case   52:  		/* lwz R11, <#[R28 + 4]> */
		/* 8220394Ch case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8220394Ch case   52:*/		return 0x82203950;
		  /* 82203950h */ case   53:  		/* cmpwi CR6, R11, 11 */
		/* 82203950h case   53:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 82203950h case   53:*/		return 0x82203954;
		  /* 82203954h */ case   54:  		/* bc 4, CR6_EQ, 3952 */
		/* 82203954h case   54:*/		if ( !regs.CR[6].eq ) { return 0x822048C4;  }
		/* 82203954h case   54:*/		return 0x82203958;
		  /* 82203958h */ case   55:  		/* lwz R10, <#[R21 + 4]> */
		/* 82203958h case   55:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 82203958h case   55:*/		return 0x8220395C;
		  /* 8220395Ch */ case   56:  		/* lwz R11, <#[R28 + 16]> */
		/* 8220395Ch case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 8220395Ch case   56:*/		return 0x82203960;
		  /* 82203960h */ case   57:  		/* lwz R10, <#[R10 + 16]> */
		/* 82203960h case   57:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82203960h case   57:*/		return 0x82203964;
		  /* 82203964h */ case   58:  		/* cmplw CR6, R11, R10 */
		/* 82203964h case   58:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82203964h case   58:*/		return 0x82203968;
		  /* 82203968h */ case   59:  		/* bc 12, CR6_EQ, 272 */
		/* 82203968h case   59:*/		if ( regs.CR[6].eq ) { return 0x82203A78;  }
		/* 82203968h case   59:*/		return 0x8220396C;
		  /* 8220396Ch */ case   60:  		/* lwz R10, <#[R31 + 16]> */
		/* 8220396Ch case   60:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8220396Ch case   60:*/		return 0x82203970;
		  /* 82203970h */ case   61:  		/* cmplw CR6, R11, R10 */
		/* 82203970h case   61:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82203970h case   61:*/		return 0x82203974;
		  /* 82203974h */ case   62:  		/* bc 12, CR6_EQ, 260 */
		/* 82203974h case   62:*/		if ( regs.CR[6].eq ) { return 0x82203A78;  }
		/* 82203974h case   62:*/		return 0x82203978;
		  /* 82203978h */ case   63:  		/* lwz R10, <#[R28 + 20]> */
		/* 82203978h case   63:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 82203978h case   63:*/		return 0x8220397C;
		  /* 8220397Ch */ case   64:  		/* cmplwi CR6, R10, 0 */
		/* 8220397Ch case   64:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220397Ch case   64:*/		return 0x82203980;
		  /* 82203980h */ case   65:  		/* bc 12, CR6_EQ, 248 */
		/* 82203980h case   65:*/		if ( regs.CR[6].eq ) { return 0x82203A78;  }
		/* 82203980h case   65:*/		return 0x82203984;
		  /* 82203984h */ case   66:  		/* lwz R11, <#[R28 + 44]> */
		/* 82203984h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 82203984h case   66:*/		return 0x82203988;
		  /* 82203988h */ case   67:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 82203988h case   67:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 82203988h case   67:*/		return 0x8220398C;
		  /* 8220398Ch */ case   68:  		/* bc 4, CR0_EQ, 3832 */
		/* 8220398Ch case   68:*/		if ( !regs.CR[0].eq ) { return 0x82204884;  }
		/* 8220398Ch case   68:*/		return 0x82203990;
		  /* 82203990h */ case   69:  		/* rlwinm. R9, R11, 0, 29, 29 */
		/* 82203990h case   69:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R11);
		/* 82203990h case   69:*/		return 0x82203994;
		  /* 82203994h */ case   70:  		/* bc 4, CR0_EQ, 3844 */
		/* 82203994h case   70:*/		if ( !regs.CR[0].eq ) { return 0x82204898;  }
		/* 82203994h case   70:*/		return 0x82203998;
		  /* 82203998h */ case   71:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82203998h case   71:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82203998h case   71:*/		return 0x8220399C;
		  /* 8220399Ch */ case   72:  		/* bc 12, CR0_EQ, 220 */
		/* 8220399Ch case   72:*/		if ( regs.CR[0].eq ) { return 0x82203A78;  }
		/* 8220399Ch case   72:*/		return 0x822039A0;
		  /* 822039A0h */ case   73:  		/* li R26, 0 */
		/* 822039A0h case   73:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 822039A0h case   73:*/		return 0x822039A4;
		  /* 822039A4h */ case   74:  		/* cmplwi CR6, R10, 0 */
		/* 822039A4h case   74:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822039A4h case   74:*/		return 0x822039A8;
		  /* 822039A8h */ case   75:  		/* bc 12, CR6_EQ, 176 */
		/* 822039A8h case   75:*/		if ( regs.CR[6].eq ) { return 0x82203A58;  }
		/* 822039A8h case   75:*/		return 0x822039AC;
		  /* 822039ACh */ case   76:  		/* li R27, 0 */
		/* 822039ACh case   76:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 822039ACh case   76:*/		return 0x822039B0;
		  /* 822039B0h */ case   77:  		/* cmplwi CR6, R25, 0 */
		/* 822039B0h case   77:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 822039B0h case   77:*/		return 0x822039B4;
		  /* 822039B4h */ case   78:  		/* bc 12, CR6_EQ, 3832 */
		/* 822039B4h case   78:*/		if ( regs.CR[6].eq ) { return 0x822048AC;  }
		/* 822039B4h case   78:*/		return 0x822039B8;
		  /* 822039B8h */ case   79:  		/* addi R3, R1, 2600 */
		/* 822039B8h case   79:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA28);
		/* 822039B8h case   79:*/		return 0x822039BC;
		  /* 822039BCh */ case   80:  		/* bl -273244 */
		/* 822039BCh case   80:*/		regs.LR = 0x822039C0; return 0x821C0E60;
		/* 822039BCh case   80:*/		return 0x822039C0;
		  /* 822039C0h */ case   81:  		/* mr R30, R3 */
		/* 822039C0h case   81:*/		regs.R30 = regs.R3;
		/* 822039C0h case   81:*/		return 0x822039C4;
		  /* 822039C4h */ case   82:  		/* mr R3, R31 */
		/* 822039C4h case   82:*/		regs.R3 = regs.R31;
		/* 822039C4h case   82:*/		return 0x822039C8;
		  /* 822039C8h */ case   83:  		/* mr R4, R30 */
		/* 822039C8h case   83:*/		regs.R4 = regs.R30;
		/* 822039C8h case   83:*/		return 0x822039CC;
		  /* 822039CCh */ case   84:  		/* bl -71500 */
		/* 822039CCh case   84:*/		regs.LR = 0x822039D0; return 0x821F2280;
		/* 822039CCh case   84:*/		return 0x822039D0;
		  /* 822039D0h */ case   85:  		/* lwz R11, <#[R31 + 564]> */
		/* 822039D0h case   85:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 822039D0h case   85:*/		return 0x822039D4;
		  /* 822039D4h */ case   86:  		/* lwz R10, <#[R3 + 28]> */
		/* 822039D4h case   86:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 822039D4h case   86:*/		return 0x822039D8;
		  /* 822039D8h */ case   87:  		/* cmplw CR6, R10, R11 */
		/* 822039D8h case   87:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 822039D8h case   87:*/		return 0x822039DC;
		  /* 822039DCh */ case   88:  		/* bc 12, CR6_EQ, 40 */
		/* 822039DCh case   88:*/		if ( regs.CR[6].eq ) { return 0x82203A04;  }
		/* 822039DCh case   88:*/		return 0x822039E0;
		  /* 822039E0h */ case   89:  		/* mr R5, R30 */
		/* 822039E0h case   89:*/		regs.R5 = regs.R30;
		/* 822039E0h case   89:*/		return 0x822039E4;
		  /* 822039E4h */ case   90:  		/* mr R4, R30 */
		/* 822039E4h case   90:*/		regs.R4 = regs.R30;
		/* 822039E4h case   90:*/		return 0x822039E8;
		  /* 822039E8h */ case   91:  		/* mr R3, R31 */
		/* 822039E8h case   91:*/		regs.R3 = regs.R31;
		/* 822039E8h case   91:*/		return 0x822039EC;
		  /* 822039ECh */ case   92:  		/* bl -63516 */
		/* 822039ECh case   92:*/		regs.LR = 0x822039F0; return 0x821F41D0;
		/* 822039ECh case   92:*/		return 0x822039F0;
		  /* 822039F0h */ case   93:  		/* stw R3, <#[R30]> */
		/* 822039F0h case   93:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 822039F0h case   93:*/		return 0x822039F4;
		  /* 822039F4h */ case   94:  		/* li R11, 1 */
		/* 822039F4h case   94:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822039F4h case   94:*/		return 0x822039F8;
		  /* 822039F8h */ case   95:  		/* lwz R10, <#[R30 + 4]> */
		/* 822039F8h case   95:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822039F8h case   95:*/		return 0x822039FC;
		  /* 822039FCh */ case   96:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 822039FCh case   96:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 822039FCh case   96:*/		return 0x82203A00;
		  /* 82203A00h */ case   97:  		/* stw R10, <#[R30 + 4]> */
		/* 82203A00h case   97:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82203A00h case   97:*/		return 0x82203A04;
	}
	return 0x82203A04;
} // Block from 8220387Ch-82203A04h (98 instructions)

//////////////////////////////////////////////////////
// Block at 82203A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203A04);
		  /* 82203A04h */ case    0:  		/* lwz R4, <#[R28 + 16]> */
		/* 82203A04h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000010) );
		/* 82203A04h case    0:*/		return 0x82203A08;
		  /* 82203A08h */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 82203A08h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82203A08h case    1:*/		return 0x82203A0C;
		  /* 82203A0Ch */ case    2:  		/* mulli R10, R4, 40 */
		/* 82203A0Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R4,0x28);
		/* 82203A0Ch case    2:*/		return 0x82203A10;
		  /* 82203A10h */ case    3:  		/* add R11, R10, R11 */
		/* 82203A10h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82203A10h case    3:*/		return 0x82203A14;
		  /* 82203A14h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82203A14h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82203A14h case    4:*/		return 0x82203A18;
		  /* 82203A18h */ case    5:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 82203A18h case    5:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 82203A18h case    5:*/		return 0x82203A1C;
		  /* 82203A1Ch */ case    6:  		/* bc 12, CR0_EQ, 3740 */
		/* 82203A1Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x822048B8;  }
		/* 82203A1Ch case    6:*/		return 0x82203A20;
		  /* 82203A20h */ case    7:  		/* mr R5, R31 */
		/* 82203A20h case    7:*/		regs.R5 = regs.R31;
		/* 82203A20h case    7:*/		return 0x82203A24;
		  /* 82203A24h */ case    8:  		/* lwz R3, <#[R31 + 564]> */
		/* 82203A24h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82203A24h case    8:*/		return 0x82203A28;
		  /* 82203A28h */ case    9:  		/* bl -77944 */
		/* 82203A28h case    9:*/		regs.LR = 0x82203A2C; return 0x821F09B0;
		/* 82203A28h case    9:*/		return 0x82203A2C;
		  /* 82203A2Ch */ case   10:  		/* lwz R11, <#[R30]> */
		/* 82203A2Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82203A2Ch case   10:*/		return 0x82203A30;
		  /* 82203A30h */ case   11:  		/* add R10, R3, R27 */
		/* 82203A30h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R3,regs.R27);
		/* 82203A30h case   11:*/		return 0x82203A34;
		  /* 82203A34h */ case   12:  		/* addi R26, R26, 1 */
		/* 82203A34h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82203A34h case   12:*/		return 0x82203A38;
		  /* 82203A38h */ case   13:  		/* addi R25, R25, -1 */
		/* 82203A38h case   13:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 82203A38h case   13:*/		return 0x82203A3C;
		  /* 82203A3Ch */ case   14:  		/* addi R27, R27, 8 */
		/* 82203A3Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x8);
		/* 82203A3Ch case   14:*/		return 0x82203A40;
		  /* 82203A40h */ case   15:  		/* stw R11, <#[R10]> */
		/* 82203A40h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82203A40h case   15:*/		return 0x82203A44;
		  /* 82203A44h */ case   16:  		/* lwz R11, <#[R30 + 4]> */
		/* 82203A44h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82203A44h case   16:*/		return 0x82203A48;
		  /* 82203A48h */ case   17:  		/* stw R11, <#[R10 + 4]> */
		/* 82203A48h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82203A48h case   17:*/		return 0x82203A4C;
		  /* 82203A4Ch */ case   18:  		/* lwz R11, <#[R28 + 20]> */
		/* 82203A4Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 82203A4Ch case   18:*/		return 0x82203A50;
		  /* 82203A50h */ case   19:  		/* cmplw CR6, R26, R11 */
		/* 82203A50h case   19:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82203A50h case   19:*/		return 0x82203A54;
		  /* 82203A54h */ case   20:  		/* bc 12, CR6_LT, -164 */
		/* 82203A54h case   20:*/		if ( regs.CR[6].lt ) { return 0x822039B0;  }
		/* 82203A54h case   20:*/		return 0x82203A58;
	}
	return 0x82203A58;
} // Block from 82203A04h-82203A58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82203A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203A58);
		  /* 82203A58h */ case    0:  		/* lwz R10, <#[R28 + 16]> */
		/* 82203A58h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 82203A58h case    0:*/		return 0x82203A5C;
		  /* 82203A5Ch */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 82203A5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82203A5Ch case    1:*/		return 0x82203A60;
		  /* 82203A60h */ case    2:  		/* mulli R10, R10, 40 */
		/* 82203A60h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 82203A60h case    2:*/		return 0x82203A64;
		  /* 82203A64h */ case    3:  		/* add R11, R10, R11 */
		/* 82203A64h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82203A64h case    3:*/		return 0x82203A68;
		  /* 82203A68h */ case    4:  		/* addi R10, R11, 4 */
		/* 82203A68h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82203A68h case    4:*/		return 0x82203A6C;
		  /* 82203A6Ch */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82203A6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203A6Ch case    5:*/		return 0x82203A70;
		  /* 82203A70h */ case    6:  		/* ori R10, R10, 2 */
		/* 82203A70h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 82203A70h case    6:*/		return 0x82203A74;
		  /* 82203A74h */ case    7:  		/* stw R10, <#[R11 + 4]> */
		/* 82203A74h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203A74h case    7:*/		return 0x82203A78;
	}
	return 0x82203A78;
} // Block from 82203A58h-82203A78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82203A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203A78);
		  /* 82203A78h */ case    0:  		/* lwz R11, <#[R23 + 12]> */
		/* 82203A78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 82203A78h case    0:*/		return 0x82203A7C;
		  /* 82203A7Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82203A7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203A7Ch case    1:*/		return 0x82203A80;
		  /* 82203A80h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82203A80h case    2:*/		if ( regs.CR[6].eq ) { return 0x82203A90;  }
		/* 82203A80h case    2:*/		return 0x82203A84;
		  /* 82203A84h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82203A84h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82203A84h case    3:*/		return 0x82203A88;
		  /* 82203A88h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82203A88h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82203A88h case    4:*/		return 0x82203A8C;
		  /* 82203A8Ch */ case    5:  		/* bc 4, CR6_EQ, 3652 */
		/* 82203A8Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822048D0;  }
		/* 82203A8Ch case    5:*/		return 0x82203A90;
	}
	return 0x82203A90;
} // Block from 82203A78h-82203A90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82203A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203A90);
		  /* 82203A90h */ case    0:  		/* mr R23, R11 */
		/* 82203A90h case    0:*/		regs.R23 = regs.R11;
		/* 82203A90h case    0:*/		return 0x82203A94;
		  /* 82203A94h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82203A94h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203A94h case    1:*/		return 0x82203A98;
		  /* 82203A98h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82203A98h case    2:*/		if ( regs.CR[6].eq ) { return 0x82203AA4;  }
		/* 82203A98h case    2:*/		return 0x82203A9C;
		  /* 82203A9Ch */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 82203A9Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82203A9Ch case    3:*/		return 0x82203AA0;
		  /* 82203AA0h */ case    4:  		/* bc 4, CR6_EQ, -380 */
		/* 82203AA0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82203924;  }
		/* 82203AA0h case    4:*/		return 0x82203AA4;
	}
	return 0x82203AA4;
} // Block from 82203A90h-82203AA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82203AA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203AA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203AA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203AA4);
		  /* 82203AA4h */ case    0:  		/* mr R5, R22 */
		/* 82203AA4h case    0:*/		regs.R5 = regs.R22;
		/* 82203AA4h case    0:*/		return 0x82203AA8;
		  /* 82203AA8h */ case    1:  		/* mr R4, R20 */
		/* 82203AA8h case    1:*/		regs.R4 = regs.R20;
		/* 82203AA8h case    1:*/		return 0x82203AAC;
		  /* 82203AACh */ case    2:  		/* addi R3, R1, 2992 */
		/* 82203AACh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBB0);
		/* 82203AACh case    2:*/		return 0x82203AB0;
		  /* 82203AB0h */ case    3:  		/* bl -74448 */
		/* 82203AB0h case    3:*/		regs.LR = 0x82203AB4; return 0x821F17E0;
		/* 82203AB0h case    3:*/		return 0x82203AB4;
	}
	return 0x82203AB4;
} // Block from 82203AA4h-82203AB4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203AB4);
		  /* 82203AB4h */ case    0:  		/* stw R24, <#[R31 + 564]> */
		/* 82203AB4h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000234) );
		/* 82203AB4h case    0:*/		return 0x82203AB8;
		  /* 82203AB8h */ case    1:  		/* lwz R11, <#[R14 + 16]> */
		/* 82203AB8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000010) );
		/* 82203AB8h case    1:*/		return 0x82203ABC;
		  /* 82203ABCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82203ABCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203ABCh case    2:*/		return 0x82203AC0;
		  /* 82203AC0h */ case    3:  		/* bc 12, CR6_EQ, -30624 */
		/* 82203AC0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82203AC0h case    3:*/		return 0x82203AC4;
		  /* 82203AC4h */ case    4:  		/* lwz R11, <#[R21 + 4]> */
		/* 82203AC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82203AC4h case    4:*/		return 0x82203AC8;
		  /* 82203AC8h */ case    5:  		/* li R9, 0 */
		/* 82203AC8h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82203AC8h case    5:*/		return 0x82203ACC;
		  /* 82203ACCh */ case    6:  		/* mr R8, R29 */
		/* 82203ACCh case    6:*/		regs.R8 = regs.R29;
		/* 82203ACCh case    6:*/		return 0x82203AD0;
		  /* 82203AD0h */ case    7:  		/* li R6, 0 */
		/* 82203AD0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82203AD0h case    7:*/		return 0x82203AD4;
		  /* 82203AD4h */ case    8:  		/* lwz R5, <#[R11 + 16]> */
		/* 82203AD4h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 82203AD4h case    8:*/		return 0x82203AD8;
	}
	return 0x82203AD8;
} // Block from 82203AB4h-82203AD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82203AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203AD8);
		  /* 82203AD8h */ case    0:  		/* mr R3, R31 */
		/* 82203AD8h case    0:*/		regs.R3 = regs.R31;
		/* 82203AD8h case    0:*/		return 0x82203ADC;
		  /* 82203ADCh */ case    1:  		/* mr R4, R20 */
		/* 82203ADCh case    1:*/		regs.R4 = regs.R20;
		/* 82203ADCh case    1:*/		return 0x82203AE0;
		  /* 82203AE0h */ case    2:  		/* li R7, 0 */
		/* 82203AE0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82203AE0h case    2:*/		return 0x82203AE4;
		  /* 82203AE4h */ case    3:  		/* bl -46004 */
		/* 82203AE4h case    3:*/		regs.LR = 0x82203AE8; return 0x821F8730;
		/* 82203AE4h case    3:*/		return 0x82203AE8;
		  /* 82203AE8h */ case    4:  		/* b -30664 */
		/* 82203AE8h case    4:*/		return 0x821FC320;
		/* 82203AE8h case    4:*/		return 0x82203AEC;
		  /* 82203AECh */ case    5:  		/* mr R5, R29 */
		/* 82203AECh case    5:*/		regs.R5 = regs.R29;
		/* 82203AECh case    5:*/		return 0x82203AF0;
		  /* 82203AF0h */ case    6:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82203AF0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203AF0h case    6:*/		return 0x82203AF4;
		  /* 82203AF4h */ case    7:  		/* addi R3, R1, 1152 */
		/* 82203AF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x480);
		/* 82203AF4h case    7:*/		return 0x82203AF8;
		  /* 82203AF8h */ case    8:  		/* bl -55272 */
		/* 82203AF8h case    8:*/		regs.LR = 0x82203AFC; return 0x821F6310;
		/* 82203AF8h case    8:*/		return 0x82203AFC;
		  /* 82203AFCh */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 82203AFCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82203AFCh case    9:*/		return 0x82203B00;
		  /* 82203B00h */ case   10:  		/* bc 12, CR6_EQ, 532 */
		/* 82203B00h case   10:*/		if ( regs.CR[6].eq ) { return 0x82203D14;  }
		/* 82203B00h case   10:*/		return 0x82203B04;
		  /* 82203B04h */ case   11:  		/* cmplwi CR6, R29, 4 */
		/* 82203B04h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82203B04h case   11:*/		return 0x82203B08;
		  /* 82203B08h */ case   12:  		/* mr R30, R29 */
		/* 82203B08h case   12:*/		regs.R30 = regs.R29;
		/* 82203B08h case   12:*/		return 0x82203B0C;
		  /* 82203B0Ch */ case   13:  		/* bc 12, CR6_LT, 8 */
		/* 82203B0Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x82203B14;  }
		/* 82203B0Ch case   13:*/		return 0x82203B10;
		  /* 82203B10h */ case   14:  		/* li R30, 4 */
		/* 82203B10h case   14:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82203B10h case   14:*/		return 0x82203B14;
	}
	return 0x82203B14;
} // Block from 82203AD8h-82203B14h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82203B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203B14);
		  /* 82203B14h */ case    0:  		/* li R6, 228 */
		/* 82203B14h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82203B14h case    0:*/		return 0x82203B18;
		  /* 82203B18h */ case    1:  		/* mr R5, R30 */
		/* 82203B18h case    1:*/		regs.R5 = regs.R30;
		/* 82203B18h case    1:*/		return 0x82203B1C;
		  /* 82203B1Ch */ case    2:  		/* addi R4, R1, 1152 */
		/* 82203B1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x480);
		/* 82203B1Ch case    2:*/		return 0x82203B20;
		  /* 82203B20h */ case    3:  		/* mr R3, R31 */
		/* 82203B20h case    3:*/		regs.R3 = regs.R31;
		/* 82203B20h case    3:*/		return 0x82203B24;
		  /* 82203B24h */ case    4:  		/* bl -70620 */
		/* 82203B24h case    4:*/		regs.LR = 0x82203B28; return 0x821F2748;
		/* 82203B24h case    4:*/		return 0x82203B28;
		  /* 82203B28h */ case    5:  		/* lwz R4, <#[R31 + 564]> */
		/* 82203B28h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82203B28h case    5:*/		return 0x82203B2C;
		  /* 82203B2Ch */ case    6:  		/* mr R28, R3 */
		/* 82203B2Ch case    6:*/		regs.R28 = regs.R3;
		/* 82203B2Ch case    6:*/		return 0x82203B30;
		  /* 82203B30h */ case    7:  		/* addi R5, R4, 24 */
		/* 82203B30h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 82203B30h case    7:*/		return 0x82203B34;
		  /* 82203B34h */ case    8:  		/* mr R8, R30 */
		/* 82203B34h case    8:*/		regs.R8 = regs.R30;
		/* 82203B34h case    8:*/		return 0x82203B38;
		  /* 82203B38h */ case    9:  		/* li R7, 1 */
		/* 82203B38h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82203B38h case    9:*/		return 0x82203B3C;
		  /* 82203B3Ch */ case   10:  		/* li R6, 103 */
		/* 82203B3Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 82203B3Ch case   10:*/		return 0x82203B40;
		  /* 82203B40h */ case   11:  		/* mr R3, R31 */
		/* 82203B40h case   11:*/		regs.R3 = regs.R31;
		/* 82203B40h case   11:*/		return 0x82203B44;
		  /* 82203B44h */ case   12:  		/* bl 134740 */
		/* 82203B44h case   12:*/		regs.LR = 0x82203B48; return 0x82224998;
		/* 82203B44h case   12:*/		return 0x82203B48;
		  /* 82203B48h */ case   13:  		/* mr R4, R31 */
		/* 82203B48h case   13:*/		regs.R4 = regs.R31;
		/* 82203B48h case   13:*/		return 0x82203B4C;
		  /* 82203B4Ch */ case   14:  		/* mr R27, R3 */
		/* 82203B4Ch case   14:*/		regs.R27 = regs.R3;
		/* 82203B4Ch case   14:*/		return 0x82203B50;
		  /* 82203B50h */ case   15:  		/* bl -287032 */
		/* 82203B50h case   15:*/		regs.LR = 0x82203B54; return 0x821BDA18;
		/* 82203B50h case   15:*/		return 0x82203B54;
		  /* 82203B54h */ case   16:  		/* mr R11, R3 */
		/* 82203B54h case   16:*/		regs.R11 = regs.R3;
		/* 82203B54h case   16:*/		return 0x82203B58;
		  /* 82203B58h */ case   17:  		/* li R10, 6 */
		/* 82203B58h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 82203B58h case   17:*/		return 0x82203B5C;
		  /* 82203B5Ch */ case   18:  		/* mr R3, R27 */
		/* 82203B5Ch case   18:*/		regs.R3 = regs.R27;
		/* 82203B5Ch case   18:*/		return 0x82203B60;
		  /* 82203B60h */ case   19:  		/* mr R5, R28 */
		/* 82203B60h case   19:*/		regs.R5 = regs.R28;
		/* 82203B60h case   19:*/		return 0x82203B64;
		  /* 82203B64h */ case   20:  		/* li R4, 0 */
		/* 82203B64h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82203B64h case   20:*/		return 0x82203B68;
		  /* 82203B68h */ case   21:  		/* stw R10, <#[R11]> */
		/* 82203B68h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82203B68h case   21:*/		return 0x82203B6C;
		  /* 82203B6Ch */ case   22:  		/* bl -603324 */
		/* 82203B6Ch case   22:*/		regs.LR = 0x82203B70; return 0x821706B0;
		/* 82203B6Ch case   22:*/		return 0x82203B70;
		  /* 82203B70h */ case   23:  		/* mr R3, R27 */
		/* 82203B70h case   23:*/		regs.R3 = regs.R27;
		/* 82203B70h case   23:*/		return 0x82203B74;
		  /* 82203B74h */ case   24:  		/* li R4, 4 */
		/* 82203B74h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82203B74h case   24:*/		return 0x82203B78;
		  /* 82203B78h */ case   25:  		/* bl -98224 */
		/* 82203B78h case   25:*/		regs.LR = 0x82203B7C; return 0x821EBBC8;
		/* 82203B78h case   25:*/		return 0x82203B7C;
		  /* 82203B7Ch */ case   26:  		/* mr R5, R27 */
		/* 82203B7Ch case   26:*/		regs.R5 = regs.R27;
		/* 82203B7Ch case   26:*/		return 0x82203B80;
		  /* 82203B80h */ case   27:  		/* mr R4, R30 */
		/* 82203B80h case   27:*/		regs.R4 = regs.R30;
		/* 82203B80h case   27:*/		return 0x82203B84;
		  /* 82203B84h */ case   28:  		/* addi R3, R1, 1152 */
		/* 82203B84h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x480);
		/* 82203B84h case   28:*/		return 0x82203B88;
		  /* 82203B88h */ case   29:  		/* bl -72816 */
		/* 82203B88h case   29:*/		regs.LR = 0x82203B8C; return 0x821F1F18;
		/* 82203B88h case   29:*/		return 0x82203B8C;
		  /* 82203B8Ch */ case   30:  		/* li R4, 0 */
		/* 82203B8Ch case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82203B8Ch case   30:*/		return 0x82203B90;
		  /* 82203B90h */ case   31:  		/* addi R3, R1, 1152 */
		/* 82203B90h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x480);
		/* 82203B90h case   31:*/		return 0x82203B94;
		  /* 82203B94h */ case   32:  		/* subf R29, R30, R29 */
		/* 82203B94h case   32:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82203B94h case   32:*/		return 0x82203B98;
		  /* 82203B98h */ case   33:  		/* bl -89504 */
		/* 82203B98h case   33:*/		regs.LR = 0x82203B9C; return 0x821EDDF8;
		/* 82203B98h case   33:*/		return 0x82203B9C;
		  /* 82203B9Ch */ case   34:  		/* b -160 */
		/* 82203B9Ch case   34:*/		return 0x82203AFC;
		/* 82203B9Ch case   34:*/		return 0x82203BA0;
		  /* 82203BA0h */ case   35:  		/* li R27, 7 */
		/* 82203BA0h case   35:*/		cpu::op::li<0>(regs,&regs.R27,0x7);
		/* 82203BA0h case   35:*/		return 0x82203BA4;
		  /* 82203BA4h */ case   36:  		/* b 32 */
		/* 82203BA4h case   36:*/		return 0x82203BC4;
		/* 82203BA4h case   36:*/		return 0x82203BA8;
		  /* 82203BA8h */ case   37:  		/* li R27, 8 */
		/* 82203BA8h case   37:*/		cpu::op::li<0>(regs,&regs.R27,0x8);
		/* 82203BA8h case   37:*/		return 0x82203BAC;
		  /* 82203BACh */ case   38:  		/* b 24 */
		/* 82203BACh case   38:*/		return 0x82203BC4;
		/* 82203BACh case   38:*/		return 0x82203BB0;
		  /* 82203BB0h */ case   39:  		/* li R27, 9 */
		/* 82203BB0h case   39:*/		cpu::op::li<0>(regs,&regs.R27,0x9);
		/* 82203BB0h case   39:*/		return 0x82203BB4;
		  /* 82203BB4h */ case   40:  		/* b 16 */
		/* 82203BB4h case   40:*/		return 0x82203BC4;
		/* 82203BB4h case   40:*/		return 0x82203BB8;
		  /* 82203BB8h */ case   41:  		/* li R27, 11 */
		/* 82203BB8h case   41:*/		cpu::op::li<0>(regs,&regs.R27,0xB);
		/* 82203BB8h case   41:*/		return 0x82203BBC;
		  /* 82203BBCh */ case   42:  		/* b 8 */
		/* 82203BBCh case   42:*/		return 0x82203BC4;
		/* 82203BBCh case   42:*/		return 0x82203BC0;
		  /* 82203BC0h */ case   43:  		/* li R27, 10 */
		/* 82203BC0h case   43:*/		cpu::op::li<0>(regs,&regs.R27,0xA);
		/* 82203BC0h case   43:*/		return 0x82203BC4;
	}
	return 0x82203BC4;
} // Block from 82203B14h-82203BC4h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82203BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203BC4);
		  /* 82203BC4h */ case    0:  		/* lwz R11, <#[R14 + 40]> */
		/* 82203BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 82203BC4h case    0:*/		return 0x82203BC8;
		  /* 82203BC8h */ case    1:  		/* lwz R26, <#[R1 + 3500]> */
		/* 82203BC8h case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203BC8h case    1:*/		return 0x82203BCC;
		  /* 82203BCCh */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 82203BCCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82203BCCh case    2:*/		return 0x82203BD0;
		  /* 82203BD0h */ case    3:  		/* bc 4, CR6_EQ, 60 */
		/* 82203BD0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82203C0C;  }
		/* 82203BD0h case    3:*/		return 0x82203BD4;
		  /* 82203BD4h */ case    4:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 82203BD4h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 82203BD4h case    4:*/		return 0x82203BD8;
		  /* 82203BD8h */ case    5:  		/* addi R3, R1, 2664 */
		/* 82203BD8h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA68);
		/* 82203BD8h case    5:*/		return 0x82203BDC;
		  /* 82203BDCh */ case    6:  		/* mr R4, R26 */
		/* 82203BDCh case    6:*/		regs.R4 = regs.R26;
		/* 82203BDCh case    6:*/		return 0x82203BE0;
		  /* 82203BE0h */ case    7:  		/* bl -55504 */
		/* 82203BE0h case    7:*/		regs.LR = 0x82203BE4; return 0x821F6310;
		/* 82203BE0h case    7:*/		return 0x82203BE4;
		  /* 82203BE4h */ case    8:  		/* mr R5, R29 */
		/* 82203BE4h case    8:*/		regs.R5 = regs.R29;
		/* 82203BE4h case    8:*/		return 0x82203BE8;
		  /* 82203BE8h */ case    9:  		/* mr R4, R26 */
		/* 82203BE8h case    9:*/		regs.R4 = regs.R26;
		/* 82203BE8h case    9:*/		return 0x82203BEC;
		  /* 82203BECh */ case   10:  		/* addi R3, R1, 2632 */
		/* 82203BECh case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA48);
		/* 82203BECh case   10:*/		return 0x82203BF0;
		  /* 82203BF0h */ case   11:  		/* bl -55520 */
		/* 82203BF0h case   11:*/		regs.LR = 0x82203BF4; return 0x821F6310;
		/* 82203BF0h case   11:*/		return 0x82203BF4;
		  /* 82203BF4h */ case   12:  		/* mr R7, R29 */
		/* 82203BF4h case   12:*/		regs.R7 = regs.R29;
		/* 82203BF4h case   12:*/		return 0x82203BF8;
		  /* 82203BF8h */ case   13:  		/* addi R6, R1, 2632 */
		/* 82203BF8h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA48);
		/* 82203BF8h case   13:*/		return 0x82203BFC;
		  /* 82203BFCh */ case   14:  		/* mr R5, R29 */
		/* 82203BFCh case   14:*/		regs.R5 = regs.R29;
		/* 82203BFCh case   14:*/		return 0x82203C00;
		  /* 82203C00h */ case   15:  		/* addi R4, R1, 2664 */
		/* 82203C00h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA68);
		/* 82203C00h case   15:*/		return 0x82203C04;
		  /* 82203C04h */ case   16:  		/* mr R3, R31 */
		/* 82203C04h case   16:*/		regs.R3 = regs.R31;
		/* 82203C04h case   16:*/		return 0x82203C08;
		  /* 82203C08h */ case   17:  		/* bl -60472 */
		/* 82203C08h case   17:*/		regs.LR = 0x82203C0C; return 0x821F4FD0;
		/* 82203C08h case   17:*/		return 0x82203C0C;
	}
	return 0x82203C0C;
} // Block from 82203BC4h-82203C0Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 82203C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203C0C);
		  /* 82203C0Ch */ case    0:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 82203C0Ch case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 82203C0Ch case    0:*/		return 0x82203C10;
		  /* 82203C10h */ case    1:  		/* mr R4, R26 */
		/* 82203C10h case    1:*/		regs.R4 = regs.R26;
		/* 82203C10h case    1:*/		return 0x82203C14;
		  /* 82203C14h */ case    2:  		/* addi R3, R1, 1040 */
		/* 82203C14h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x410);
		/* 82203C14h case    2:*/		return 0x82203C18;
		  /* 82203C18h */ case    3:  		/* bl -55560 */
		/* 82203C18h case    3:*/		regs.LR = 0x82203C1C; return 0x821F6310;
		/* 82203C18h case    3:*/		return 0x82203C1C;
		  /* 82203C1Ch */ case    4:  		/* mr R5, R29 */
		/* 82203C1Ch case    4:*/		regs.R5 = regs.R29;
		/* 82203C1Ch case    4:*/		return 0x82203C20;
		  /* 82203C20h */ case    5:  		/* mr R4, R26 */
		/* 82203C20h case    5:*/		regs.R4 = regs.R26;
		/* 82203C20h case    5:*/		return 0x82203C24;
		  /* 82203C24h */ case    6:  		/* addi R3, R1, 2696 */
		/* 82203C24h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA88);
		/* 82203C24h case    6:*/		return 0x82203C28;
		  /* 82203C28h */ case    7:  		/* bl -55576 */
		/* 82203C28h case    7:*/		regs.LR = 0x82203C2C; return 0x821F6310;
		/* 82203C28h case    7:*/		return 0x82203C2C;
		  /* 82203C2Ch */ case    8:  		/* mr R28, R29 */
		/* 82203C2Ch case    8:*/		regs.R28 = regs.R29;
		/* 82203C2Ch case    8:*/		return 0x82203C30;
		  /* 82203C30h */ case    9:  		/* cmplwi CR6, R28, 0 */
		/* 82203C30h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82203C30h case    9:*/		return 0x82203C34;
		  /* 82203C34h */ case   10:  		/* bc 12, CR6_EQ, 200 */
		/* 82203C34h case   10:*/		if ( regs.CR[6].eq ) { return 0x82203CFC;  }
		/* 82203C34h case   10:*/		return 0x82203C38;
		  /* 82203C38h */ case   11:  		/* cmplwi CR6, R28, 4 */
		/* 82203C38h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 82203C38h case   11:*/		return 0x82203C3C;
		  /* 82203C3Ch */ case   12:  		/* mr R30, R28 */
		/* 82203C3Ch case   12:*/		regs.R30 = regs.R28;
		/* 82203C3Ch case   12:*/		return 0x82203C40;
		  /* 82203C40h */ case   13:  		/* bc 12, CR6_LT, 8 */
		/* 82203C40h case   13:*/		if ( regs.CR[6].lt ) { return 0x82203C48;  }
		/* 82203C40h case   13:*/		return 0x82203C44;
		  /* 82203C44h */ case   14:  		/* li R30, 4 */
		/* 82203C44h case   14:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82203C44h case   14:*/		return 0x82203C48;
	}
	return 0x82203C48;
} // Block from 82203C0Ch-82203C48h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82203C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203C48);
		  /* 82203C48h */ case    0:  		/* li R6, 228 */
		/* 82203C48h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82203C48h case    0:*/		return 0x82203C4C;
		  /* 82203C4Ch */ case    1:  		/* mr R5, R30 */
		/* 82203C4Ch case    1:*/		regs.R5 = regs.R30;
		/* 82203C4Ch case    1:*/		return 0x82203C50;
		  /* 82203C50h */ case    2:  		/* addi R4, R1, 1040 */
		/* 82203C50h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x410);
		/* 82203C50h case    2:*/		return 0x82203C54;
		  /* 82203C54h */ case    3:  		/* mr R3, R31 */
		/* 82203C54h case    3:*/		regs.R3 = regs.R31;
		/* 82203C54h case    3:*/		return 0x82203C58;
		  /* 82203C58h */ case    4:  		/* bl -70928 */
		/* 82203C58h case    4:*/		regs.LR = 0x82203C5C; return 0x821F2748;
		/* 82203C58h case    4:*/		return 0x82203C5C;
		  /* 82203C5Ch */ case    5:  		/* mr R25, R3 */
		/* 82203C5Ch case    5:*/		regs.R25 = regs.R3;
		/* 82203C5Ch case    5:*/		return 0x82203C60;
		  /* 82203C60h */ case    6:  		/* li R7, 1 */
		/* 82203C60h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82203C60h case    6:*/		return 0x82203C64;
		  /* 82203C64h */ case    7:  		/* li R6, 0 */
		/* 82203C64h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82203C64h case    7:*/		return 0x82203C68;
		  /* 82203C68h */ case    8:  		/* mr R5, R30 */
		/* 82203C68h case    8:*/		regs.R5 = regs.R30;
		/* 82203C68h case    8:*/		return 0x82203C6C;
		  /* 82203C6Ch */ case    9:  		/* addi R4, R1, 2696 */
		/* 82203C6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA88);
		/* 82203C6Ch case    9:*/		return 0x82203C70;
		  /* 82203C70h */ case   10:  		/* mr R3, R31 */
		/* 82203C70h case   10:*/		regs.R3 = regs.R31;
		/* 82203C70h case   10:*/		return 0x82203C74;
		  /* 82203C74h */ case   11:  		/* bl -71508 */
		/* 82203C74h case   11:*/		regs.LR = 0x82203C78; return 0x821F2520;
		/* 82203C74h case   11:*/		return 0x82203C78;
		  /* 82203C78h */ case   12:  		/* lwz R4, <#[R31 + 564]> */
		/* 82203C78h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82203C78h case   12:*/		return 0x82203C7C;
		  /* 82203C7Ch */ case   13:  		/* mr R24, R3 */
		/* 82203C7Ch case   13:*/		regs.R24 = regs.R3;
		/* 82203C7Ch case   13:*/		return 0x82203C80;
		  /* 82203C80h */ case   14:  		/* addi R5, R4, 24 */
		/* 82203C80h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 82203C80h case   14:*/		return 0x82203C84;
		  /* 82203C84h */ case   15:  		/* mr R8, R30 */
		/* 82203C84h case   15:*/		regs.R8 = regs.R30;
		/* 82203C84h case   15:*/		return 0x82203C88;
		  /* 82203C88h */ case   16:  		/* li R7, 2 */
		/* 82203C88h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82203C88h case   16:*/		return 0x82203C8C;
		  /* 82203C8Ch */ case   17:  		/* li R6, 103 */
		/* 82203C8Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 82203C8Ch case   17:*/		return 0x82203C90;
		  /* 82203C90h */ case   18:  		/* mr R3, R31 */
		/* 82203C90h case   18:*/		regs.R3 = regs.R31;
		/* 82203C90h case   18:*/		return 0x82203C94;
		  /* 82203C94h */ case   19:  		/* bl 134404 */
		/* 82203C94h case   19:*/		regs.LR = 0x82203C98; return 0x82224998;
		/* 82203C94h case   19:*/		return 0x82203C98;
		  /* 82203C98h */ case   20:  		/* mr R4, R31 */
		/* 82203C98h case   20:*/		regs.R4 = regs.R31;
		/* 82203C98h case   20:*/		return 0x82203C9C;
		  /* 82203C9Ch */ case   21:  		/* mr R23, R3 */
		/* 82203C9Ch case   21:*/		regs.R23 = regs.R3;
		/* 82203C9Ch case   21:*/		return 0x82203CA0;
		  /* 82203CA0h */ case   22:  		/* bl -287368 */
		/* 82203CA0h case   22:*/		regs.LR = 0x82203CA4; return 0x821BDA18;
		/* 82203CA0h case   22:*/		return 0x82203CA4;
		  /* 82203CA4h */ case   23:  		/* mr R11, R3 */
		/* 82203CA4h case   23:*/		regs.R11 = regs.R3;
		/* 82203CA4h case   23:*/		return 0x82203CA8;
		  /* 82203CA8h */ case   24:  		/* mr R3, R23 */
		/* 82203CA8h case   24:*/		regs.R3 = regs.R23;
		/* 82203CA8h case   24:*/		return 0x82203CAC;
		  /* 82203CACh */ case   25:  		/* mr R5, R25 */
		/* 82203CACh case   25:*/		regs.R5 = regs.R25;
		/* 82203CACh case   25:*/		return 0x82203CB0;
		  /* 82203CB0h */ case   26:  		/* li R4, 0 */
		/* 82203CB0h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82203CB0h case   26:*/		return 0x82203CB4;
		  /* 82203CB4h */ case   27:  		/* stw R27, <#[R11]> */
		/* 82203CB4h case   27:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82203CB4h case   27:*/		return 0x82203CB8;
		  /* 82203CB8h */ case   28:  		/* bl -603656 */
		/* 82203CB8h case   28:*/		regs.LR = 0x82203CBC; return 0x821706B0;
		/* 82203CB8h case   28:*/		return 0x82203CBC;
		  /* 82203CBCh */ case   29:  		/* mr R3, R23 */
		/* 82203CBCh case   29:*/		regs.R3 = regs.R23;
		/* 82203CBCh case   29:*/		return 0x82203CC0;
		  /* 82203CC0h */ case   30:  		/* mr R5, R24 */
		/* 82203CC0h case   30:*/		regs.R5 = regs.R24;
		/* 82203CC0h case   30:*/		return 0x82203CC4;
		  /* 82203CC4h */ case   31:  		/* li R4, 1 */
		/* 82203CC4h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82203CC4h case   31:*/		return 0x82203CC8;
		  /* 82203CC8h */ case   32:  		/* bl -603672 */
		/* 82203CC8h case   32:*/		regs.LR = 0x82203CCC; return 0x821706B0;
		/* 82203CC8h case   32:*/		return 0x82203CCC;
		  /* 82203CCCh */ case   33:  		/* mr R3, R23 */
		/* 82203CCCh case   33:*/		regs.R3 = regs.R23;
		/* 82203CCCh case   33:*/		return 0x82203CD0;
		  /* 82203CD0h */ case   34:  		/* li R4, 4 */
		/* 82203CD0h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82203CD0h case   34:*/		return 0x82203CD4;
		  /* 82203CD4h */ case   35:  		/* bl -98572 */
		/* 82203CD4h case   35:*/		regs.LR = 0x82203CD8; return 0x821EBBC8;
		/* 82203CD4h case   35:*/		return 0x82203CD8;
		  /* 82203CD8h */ case   36:  		/* mr R5, R23 */
		/* 82203CD8h case   36:*/		regs.R5 = regs.R23;
		/* 82203CD8h case   36:*/		return 0x82203CDC;
		  /* 82203CDCh */ case   37:  		/* mr R4, R30 */
		/* 82203CDCh case   37:*/		regs.R4 = regs.R30;
		/* 82203CDCh case   37:*/		return 0x82203CE0;
		  /* 82203CE0h */ case   38:  		/* addi R3, R1, 1040 */
		/* 82203CE0h case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x410);
		/* 82203CE0h case   38:*/		return 0x82203CE4;
		  /* 82203CE4h */ case   39:  		/* bl -73164 */
		/* 82203CE4h case   39:*/		regs.LR = 0x82203CE8; return 0x821F1F18;
		/* 82203CE4h case   39:*/		return 0x82203CE8;
		  /* 82203CE8h */ case   40:  		/* li R4, 0 */
		/* 82203CE8h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82203CE8h case   40:*/		return 0x82203CEC;
		  /* 82203CECh */ case   41:  		/* addi R3, R1, 1040 */
		/* 82203CECh case   41:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x410);
		/* 82203CECh case   41:*/		return 0x82203CF0;
		  /* 82203CF0h */ case   42:  		/* subf R28, R30, R28 */
		/* 82203CF0h case   42:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R30,regs.R28);
		/* 82203CF0h case   42:*/		return 0x82203CF4;
		  /* 82203CF4h */ case   43:  		/* bl -89852 */
		/* 82203CF4h case   43:*/		regs.LR = 0x82203CF8; return 0x821EDDF8;
		/* 82203CF4h case   43:*/		return 0x82203CF8;
		  /* 82203CF8h */ case   44:  		/* b -200 */
		/* 82203CF8h case   44:*/		return 0x82203C30;
		/* 82203CF8h case   44:*/		return 0x82203CFC;
	}
	return 0x82203CFC;
} // Block from 82203C48h-82203CFCh (45 instructions)

//////////////////////////////////////////////////////
// Block at 82203CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203CFC);
		  /* 82203CFCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82203CFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82203CFCh case    0:*/		return 0x82203D00;
		  /* 82203D00h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82203D00h case    1:*/		if ( regs.CR[6].eq ) { return 0x82203D14;  }
		/* 82203D00h case    1:*/		return 0x82203D04;
		  /* 82203D04h */ case    2:  		/* mr R5, R29 */
		/* 82203D04h case    2:*/		regs.R5 = regs.R29;
		/* 82203D04h case    2:*/		return 0x82203D08;
		  /* 82203D08h */ case    3:  		/* mr R4, R26 */
		/* 82203D08h case    3:*/		regs.R4 = regs.R26;
		/* 82203D08h case    3:*/		return 0x82203D0C;
		  /* 82203D0Ch */ case    4:  		/* addi R3, R1, 3008 */
		/* 82203D0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBC0);
		/* 82203D0Ch case    4:*/		return 0x82203D10;
		  /* 82203D10h */ case    5:  		/* bl -75056 */
		/* 82203D10h case    5:*/		regs.LR = 0x82203D14; return 0x821F17E0;
		/* 82203D10h case    5:*/		return 0x82203D14;
	}
	return 0x82203D14;
} // Block from 82203CFCh-82203D14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82203D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203D14);
		  /* 82203D14h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 82203D14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82203D14h case    0:*/		return 0x82203D18;
		  /* 82203D18h */ case    1:  		/* ori R11, R11, 512 */
		/* 82203D18h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82203D18h case    1:*/		return 0x82203D1C;
		  /* 82203D1Ch */ case    2:  		/* stw R11, <#[R31 + 44]> */
		/* 82203D1Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82203D1Ch case    2:*/		return 0x82203D20;
		  /* 82203D20h */ case    3:  		/* b -31232 */
		/* 82203D20h case    3:*/		return 0x821FC320;
		/* 82203D20h case    3:*/		return 0x82203D24;
	}
	return 0x82203D24;
} // Block from 82203D14h-82203D24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203D24);
		  /* 82203D24h */ case    0:  		/* mr R3, R31 */
		/* 82203D24h case    0:*/		regs.R3 = regs.R31;
		/* 82203D24h case    0:*/		return 0x82203D28;
		  /* 82203D28h */ case    1:  		/* lwz R4, <#[R14 + 20]> */
		/* 82203D28h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000014) );
		/* 82203D28h case    1:*/		return 0x82203D2C;
		  /* 82203D2Ch */ case    2:  		/* bl -92372 */
		/* 82203D2Ch case    2:*/		regs.LR = 0x82203D30; return 0x821ED458;
		/* 82203D2Ch case    2:*/		return 0x82203D30;
		  /* 82203D30h */ case    3:  		/* or. R5, R3, R3 */
		/* 82203D30h case    3:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 82203D30h case    3:*/		return 0x82203D34;
		  /* 82203D34h */ case    4:  		/* bc 12, CR0_EQ, -31252 */
		/* 82203D34h case    4:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 82203D34h case    4:*/		return 0x82203D38;
		  /* 82203D38h */ case    5:  		/* addi R3, R1, 3024 */
		/* 82203D38h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBD0);
		/* 82203D38h case    5:*/		return 0x82203D3C;
		  /* 82203D3Ch */ case    6:  		/* b -25524 */
		/* 82203D3Ch case    6:*/		return 0x821FD988;
		/* 82203D3Ch case    6:*/		return 0x82203D40;
	}
	return 0x82203D40;
} // Block from 82203D24h-82203D40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82203D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203D40);
		  /* 82203D40h */ case    0:  		/* lwz R11, <#[R14 + 8]> */
		/* 82203D40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 82203D40h case    0:*/		return 0x82203D44;
		  /* 82203D44h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82203D44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203D44h case    1:*/		return 0x82203D48;
		  /* 82203D48h */ case    2:  		/* bc 12, CR6_EQ, 116 */
		/* 82203D48h case    2:*/		if ( regs.CR[6].eq ) { return 0x82203DBC;  }
		/* 82203D48h case    2:*/		return 0x82203D4C;
		  /* 82203D4Ch */ case    3:  		/* rlwinm R4, R11, 0, 0, 31 */
		/* 82203D4Ch case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R11);
		/* 82203D4Ch case    3:*/		return 0x82203D50;
		  /* 82203D50h */ case    4:  		/* lwz R11, <#[R4 + 4]> */
		/* 82203D50h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82203D50h case    4:*/		return 0x82203D54;
		  /* 82203D54h */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 82203D54h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82203D54h case    5:*/		return 0x82203D58;
		  /* 82203D58h */ case    6:  		/* bc 4, CR6_EQ, 48 */
		/* 82203D58h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82203D88;  }
		/* 82203D58h case    6:*/		return 0x82203D5C;
		  /* 82203D5Ch */ case    7:  		/* lwz R11, <#[R4 + 12]> */
		/* 82203D5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82203D5Ch case    7:*/		return 0x82203D60;
		  /* 82203D60h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82203D60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82203D60h case    8:*/		return 0x82203D64;
		  /* 82203D64h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 82203D64h case    9:*/		if ( regs.CR[6].eq ) { return 0x82203D70;  }
		/* 82203D64h case    9:*/		return 0x82203D68;
		  /* 82203D68h */ case   10:  		/* li R3, 0 */
		/* 82203D68h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82203D68h case   10:*/		return 0x82203D6C;
		  /* 82203D6Ch */ case   11:  		/* b 44 */
		/* 82203D6Ch case   11:*/		return 0x82203D98;
		/* 82203D6Ch case   11:*/		return 0x82203D70;
	}
	return 0x82203D70;
} // Block from 82203D40h-82203D70h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82203D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203D70);
		  /* 82203D70h */ case    0:  		/* addi R6, R1, 260 */
		/* 82203D70h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x104);
		/* 82203D70h case    0:*/		return 0x82203D74;
		  /* 82203D74h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82203D74h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82203D74h case    1:*/		return 0x82203D78;
		  /* 82203D78h */ case    2:  		/* addi R5, R1, 312 */
		/* 82203D78h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x138);
		/* 82203D78h case    2:*/		return 0x82203D7C;
		  /* 82203D7Ch */ case    3:  		/* mr R3, R31 */
		/* 82203D7Ch case    3:*/		regs.R3 = regs.R31;
		/* 82203D7Ch case    3:*/		return 0x82203D80;
		  /* 82203D80h */ case    4:  		/* bl -97832 */
		/* 82203D80h case    4:*/		regs.LR = 0x82203D84; return 0x821EBF58;
		/* 82203D80h case    4:*/		return 0x82203D84;
		  /* 82203D84h */ case    5:  		/* b 20 */
		/* 82203D84h case    5:*/		return 0x82203D98;
		/* 82203D84h case    5:*/		return 0x82203D88;
	}
	return 0x82203D88;
} // Block from 82203D70h-82203D88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82203D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203D88);
		  /* 82203D88h */ case    0:  		/* addi R6, R1, 260 */
		/* 82203D88h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x104);
		/* 82203D88h case    0:*/		return 0x82203D8C;
		  /* 82203D8Ch */ case    1:  		/* addi R5, R1, 312 */
		/* 82203D8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x138);
		/* 82203D8Ch case    1:*/		return 0x82203D90;
		  /* 82203D90h */ case    2:  		/* mr R3, R31 */
		/* 82203D90h case    2:*/		regs.R3 = regs.R31;
		/* 82203D90h case    2:*/		return 0x82203D94;
		  /* 82203D94h */ case    3:  		/* bl -97980 */
		/* 82203D94h case    3:*/		regs.LR = 0x82203D98; return 0x821EBED8;
		/* 82203D94h case    3:*/		return 0x82203D98;
	}
	return 0x82203D98;
} // Block from 82203D88h-82203D98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203D98);
		  /* 82203D98h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82203D98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82203D98h case    0:*/		return 0x82203D9C;
		  /* 82203D9Ch */ case    1:  		/* bc 12, CR0_EQ, 2904 */
		/* 82203D9Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x822048F4;  }
		/* 82203D9Ch case    1:*/		return 0x82203DA0;
		  /* 82203DA0h */ case    2:  		/* lwz R11, <#[R1 + 260]> */
		/* 82203DA0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000104) );
		/* 82203DA0h case    2:*/		return 0x82203DA4;
		  /* 82203DA4h */ case    3:  		/* lwz R10, <#[R1 + 312]> */
		/* 82203DA4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000138) );
		/* 82203DA4h case    3:*/		return 0x82203DA8;
		  /* 82203DA8h */ case    4:  		/* mullw. R5, R10, R11 */
		/* 82203DA8h case    4:*/		cpu::op::mullw<1>(regs,&regs.R5,regs.R10,regs.R11);
		/* 82203DA8h case    4:*/		return 0x82203DAC;
		  /* 82203DACh */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82203DACh case    5:*/		if ( regs.CR[0].eq ) { return 0x82203DBC;  }
		/* 82203DACh case    5:*/		return 0x82203DB0;
		  /* 82203DB0h */ case    6:  		/* addi R3, R1, 3040 */
		/* 82203DB0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBE0);
		/* 82203DB0h case    6:*/		return 0x82203DB4;
		  /* 82203DB4h */ case    7:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82203DB4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203DB4h case    7:*/		return 0x82203DB8;
		  /* 82203DB8h */ case    8:  		/* bl -75224 */
		/* 82203DB8h case    8:*/		regs.LR = 0x82203DBC; return 0x821F17E0;
		/* 82203DB8h case    8:*/		return 0x82203DBC;
	}
	return 0x82203DBC;
} // Block from 82203D98h-82203DBCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82203DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203DBC);
		  /* 82203DBCh */ case    0:  		/* lwz R14, <#[R14 + 12]> */
		/* 82203DBCh case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x0000000C) );
		/* 82203DBCh case    0:*/		return 0x82203DC0;
		  /* 82203DC0h */ case    1:  		/* cmplwi CR6, R14, 0 */
		/* 82203DC0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 82203DC0h case    1:*/		return 0x82203DC4;
		  /* 82203DC4h */ case    2:  		/* bc 4, CR6_EQ, -132 */
		/* 82203DC4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82203D40;  }
		/* 82203DC4h case    2:*/		return 0x82203DC8;
		  /* 82203DC8h */ case    3:  		/* b -31400 */
		/* 82203DC8h case    3:*/		return 0x821FC320;
		/* 82203DC8h case    3:*/		return 0x82203DCC;
	}
	return 0x82203DCC;
} // Block from 82203DBCh-82203DCCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203DCC);
		  /* 82203DCCh */ case    0:  		/* cmpwi CR6, R10, 4 */
		/* 82203DCCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 82203DCCh case    0:*/		return 0x82203DD0;
		  /* 82203DD0h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 82203DD0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82203DFC;  }
		/* 82203DD0h case    1:*/		return 0x82203DD4;
		  /* 82203DD4h */ case    2:  		/* mr R3, R31 */
		/* 82203DD4h case    2:*/		regs.R3 = regs.R31;
		/* 82203DD4h case    2:*/		return 0x82203DD8;
		  /* 82203DD8h */ case    3:  		/* bl -62616 */
		/* 82203DD8h case    3:*/		regs.LR = 0x82203DDC; return 0x821F4940;
		/* 82203DD8h case    3:*/		return 0x82203DDC;
		  /* 82203DDCh */ case    4:  		/* mr R30, R3 */
		/* 82203DDCh case    4:*/		regs.R30 = regs.R3;
		/* 82203DDCh case    4:*/		return 0x82203DE0;
		  /* 82203DE0h */ case    5:  		/* mr R3, R31 */
		/* 82203DE0h case    5:*/		regs.R3 = regs.R31;
		/* 82203DE0h case    5:*/		return 0x82203DE4;
		  /* 82203DE4h */ case    6:  		/* bl -89708 */
		/* 82203DE4h case    6:*/		regs.LR = 0x82203DE8; return 0x821EDF78;
		/* 82203DE4h case    6:*/		return 0x82203DE8;
		  /* 82203DE8h */ case    7:  		/* stw R3, <#[R31 + 564]> */
		/* 82203DE8h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82203DE8h case    7:*/		return 0x82203DEC;
		  /* 82203DECh */ case    8:  		/* mr R4, R3 */
		/* 82203DECh case    8:*/		regs.R4 = regs.R3;
		/* 82203DECh case    8:*/		return 0x82203DF0;
		  /* 82203DF0h */ case    9:  		/* mr R5, R31 */
		/* 82203DF0h case    9:*/		regs.R5 = regs.R31;
		/* 82203DF0h case    9:*/		return 0x82203DF4;
		  /* 82203DF4h */ case   10:  		/* mr R3, R30 */
		/* 82203DF4h case   10:*/		regs.R3 = regs.R30;
		/* 82203DF4h case   10:*/		return 0x82203DF8;
		  /* 82203DF8h */ case   11:  		/* bl 179432 */
		/* 82203DF8h case   11:*/		regs.LR = 0x82203DFC; return 0x8222FAE0;
		/* 82203DF8h case   11:*/		return 0x82203DFC;
	}
	return 0x82203DFC;
} // Block from 82203DCCh-82203DFCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 82203DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203DFC);
		  /* 82203DFCh */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 82203DFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 82203DFCh case    0:*/		return 0x82203E00;
		  /* 82203E00h */ case    1:  		/* bc 12, CR6_EQ, -31456 */
		/* 82203E00h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82203E00h case    1:*/		return 0x82203E04;
		  /* 82203E04h */ case    2:  		/* lwz R20, <#[R1 + 3500]> */
		/* 82203E04h case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82203E04h case    2:*/		return 0x82203E08;
		  /* 82203E08h */ case    3:  		/* li R19, 0 */
		/* 82203E08h case    3:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82203E08h case    3:*/		return 0x82203E0C;
		  /* 82203E0Ch */ case    4:  		/* b -35368 */
		/* 82203E0Ch case    4:*/		return 0x821FB3E4;
		/* 82203E0Ch case    4:*/		return 0x82203E10;
	}
	return 0x82203E10;
} // Block from 82203DFCh-82203E10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82203E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E10);
		  /* 82203E10h */ case    0:  		/* li R4, 4801 */
		/* 82203E10h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203E10h case    0:*/		return 0x82203E14;
		  /* 82203E14h */ case    1:  		/* bl -729004 */
		/* 82203E14h case    1:*/		regs.LR = 0x82203E18; return 0x82151E68;
		/* 82203E14h case    1:*/		return 0x82203E18;
	}
	return 0x82203E18;
} // Block from 82203E10h-82203E18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82203E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E18);
		  /* 82203E18h */ case    0:  		/* mr R4, R5 */
		/* 82203E18h case    0:*/		regs.R4 = regs.R5;
		/* 82203E18h case    0:*/		return 0x82203E1C;
		  /* 82203E1Ch */ case    1:  		/* mr R3, R31 */
		/* 82203E1Ch case    1:*/		regs.R3 = regs.R31;
		/* 82203E1Ch case    1:*/		return 0x82203E20;
		  /* 82203E20h */ case    2:  		/* bl -95200 */
		/* 82203E20h case    2:*/		regs.LR = 0x82203E24; return 0x821ECA40;
		/* 82203E20h case    2:*/		return 0x82203E24;
		  /* 82203E24h */ case    3:  		/* mr R5, R3 */
		/* 82203E24h case    3:*/		regs.R5 = regs.R3;
		/* 82203E24h case    3:*/		return 0x82203E28;
		  /* 82203E28h */ case    4:  		/* li R4, 3521 */
		/* 82203E28h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDC1);
		/* 82203E28h case    4:*/		return 0x82203E2C;
		  /* 82203E2Ch */ case    5:  		/* mr R3, R31 */
		/* 82203E2Ch case    5:*/		regs.R3 = regs.R31;
		/* 82203E2Ch case    5:*/		return 0x82203E30;
		  /* 82203E30h */ case    6:  		/* bl -729032 */
		/* 82203E30h case    6:*/		regs.LR = 0x82203E34; return 0x82151E68;
		/* 82203E30h case    6:*/		return 0x82203E34;
	}
	return 0x82203E34;
} // Block from 82203E18h-82203E34h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82203E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E34);
		  /* 82203E34h */ case    0:  		/* li R4, 3020 */
		/* 82203E34h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xBCC);
		/* 82203E34h case    0:*/		return 0x82203E38;
		  /* 82203E38h */ case    1:  		/* mr R3, R31 */
		/* 82203E38h case    1:*/		regs.R3 = regs.R31;
		/* 82203E38h case    1:*/		return 0x82203E3C;
		  /* 82203E3Ch */ case    2:  		/* bl -729044 */
		/* 82203E3Ch case    2:*/		regs.LR = 0x82203E40; return 0x82151E68;
		/* 82203E3Ch case    2:*/		return 0x82203E40;
	}
	return 0x82203E40;
} // Block from 82203E34h-82203E40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E40);
		  /* 82203E40h */ case    0:  		/* lis R11, -32252 */
		/* 82203E40h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82203E40h case    0:*/		return 0x82203E44;
		  /* 82203E44h */ case    1:  		/* li R4, 3500 */
		/* 82203E44h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82203E44h case    1:*/		return 0x82203E48;
		  /* 82203E48h */ case    2:  		/* addi R5, R11, -13080 */
		/* 82203E48h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCCE8);
		/* 82203E48h case    2:*/		return 0x82203E4C;
		  /* 82203E4Ch */ case    3:  		/* mr R3, R31 */
		/* 82203E4Ch case    3:*/		regs.R3 = regs.R31;
		/* 82203E4Ch case    3:*/		return 0x82203E50;
		  /* 82203E50h */ case    4:  		/* bl -729064 */
		/* 82203E50h case    4:*/		regs.LR = 0x82203E54; return 0x82151E68;
		/* 82203E50h case    4:*/		return 0x82203E54;
	}
	return 0x82203E54;
} // Block from 82203E40h-82203E54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82203E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E54);
		  /* 82203E54h */ case    0:  		/* lis R11, -32252 */
		/* 82203E54h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82203E54h case    0:*/		return 0x82203E58;
		  /* 82203E58h */ case    1:  		/* li R4, 3500 */
		/* 82203E58h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82203E58h case    1:*/		return 0x82203E5C;
		  /* 82203E5Ch */ case    2:  		/* addi R5, R11, -13168 */
		/* 82203E5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCC90);
		/* 82203E5Ch case    2:*/		return 0x82203E60;
		  /* 82203E60h */ case    3:  		/* mr R3, R31 */
		/* 82203E60h case    3:*/		regs.R3 = regs.R31;
		/* 82203E60h case    3:*/		return 0x82203E64;
		  /* 82203E64h */ case    4:  		/* bl -729084 */
		/* 82203E64h case    4:*/		regs.LR = 0x82203E68; return 0x82151E68;
		/* 82203E64h case    4:*/		return 0x82203E68;
	}
	return 0x82203E68;
} // Block from 82203E54h-82203E68h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82203E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E68);
		  /* 82203E68h */ case    0:  		/* cmplwi CR6, R11, 15 */
		/* 82203E68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 82203E68h case    0:*/		return 0x82203E6C;
		  /* 82203E6Ch */ case    1:  		/* mr R3, R31 */
		/* 82203E6Ch case    1:*/		regs.R3 = regs.R31;
		/* 82203E6Ch case    1:*/		return 0x82203E70;
		  /* 82203E70h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82203E70h case    2:*/		if ( regs.CR[6].eq ) { return 0x82203E7C;  }
		/* 82203E70h case    2:*/		return 0x82203E74;
		  /* 82203E74h */ case    3:  		/* li R4, 4801 */
		/* 82203E74h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203E74h case    3:*/		return 0x82203E78;
		  /* 82203E78h */ case    4:  		/* bl -729104 */
		/* 82203E78h case    4:*/		regs.LR = 0x82203E7C; return 0x82151E68;
		/* 82203E78h case    4:*/		return 0x82203E7C;
	}
	return 0x82203E7C;
} // Block from 82203E68h-82203E7Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82203E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E7C);
		  /* 82203E7Ch */ case    0:  		/* lis R11, -32252 */
		/* 82203E7Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82203E7Ch case    0:*/		return 0x82203E80;
		  /* 82203E80h */ case    1:  		/* li R4, 3500 */
		/* 82203E80h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82203E80h case    1:*/		return 0x82203E84;
		  /* 82203E84h */ case    2:  		/* addi R5, R11, -13212 */
		/* 82203E84h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCC64);
		/* 82203E84h case    2:*/		return 0x82203E88;
		  /* 82203E88h */ case    3:  		/* bl -729120 */
		/* 82203E88h case    3:*/		regs.LR = 0x82203E8C; return 0x82151E68;
		/* 82203E88h case    3:*/		return 0x82203E8C;
	}
	return 0x82203E8C;
} // Block from 82203E7Ch-82203E8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E8C);
		  /* 82203E8Ch */ case    0:  		/* li R4, 3560 */
		/* 82203E8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDE8);
		/* 82203E8Ch case    0:*/		return 0x82203E90;
		  /* 82203E90h */ case    1:  		/* mr R3, R31 */
		/* 82203E90h case    1:*/		regs.R3 = regs.R31;
		/* 82203E90h case    1:*/		return 0x82203E94;
		  /* 82203E94h */ case    2:  		/* bl -729132 */
		/* 82203E94h case    2:*/		regs.LR = 0x82203E98; return 0x82151E68;
		/* 82203E94h case    2:*/		return 0x82203E98;
	}
	return 0x82203E98;
} // Block from 82203E8Ch-82203E98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203E98);
		  /* 82203E98h */ case    0:  		/* lis R11, -32252 */
		/* 82203E98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82203E98h case    0:*/		return 0x82203E9C;
		  /* 82203E9Ch */ case    1:  		/* li R4, 3500 */
		/* 82203E9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82203E9Ch case    1:*/		return 0x82203EA0;
		  /* 82203EA0h */ case    2:  		/* addi R5, R11, -13272 */
		/* 82203EA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCC28);
		/* 82203EA0h case    2:*/		return 0x82203EA4;
		  /* 82203EA4h */ case    3:  		/* bl -729148 */
		/* 82203EA4h case    3:*/		regs.LR = 0x82203EA8; return 0x82151E68;
		/* 82203EA4h case    3:*/		return 0x82203EA8;
	}
	return 0x82203EA8;
} // Block from 82203E98h-82203EA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82203EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203EA8);
		  /* 82203EA8h */ case    0:  		/* li R4, 3572 */
		/* 82203EA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDF4);
		/* 82203EA8h case    0:*/		return 0x82203EAC;
		  /* 82203EACh */ case    1:  		/* mr R3, R31 */
		/* 82203EACh case    1:*/		regs.R3 = regs.R31;
		/* 82203EACh case    1:*/		return 0x82203EB0;
		  /* 82203EB0h */ case    2:  		/* bl -729160 */
		/* 82203EB0h case    2:*/		regs.LR = 0x82203EB4; return 0x82151E68;
		/* 82203EB0h case    2:*/		return 0x82203EB4;
	}
	return 0x82203EB4;
} // Block from 82203EA8h-82203EB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203EB4);
		  /* 82203EB4h */ case    0:  		/* li R4, 4801 */
		/* 82203EB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203EB4h case    0:*/		return 0x82203EB8;
		  /* 82203EB8h */ case    1:  		/* bl -729168 */
		/* 82203EB8h case    1:*/		regs.LR = 0x82203EBC; return 0x82151E68;
		/* 82203EB8h case    1:*/		return 0x82203EBC;
	}
	return 0x82203EBC;
} // Block from 82203EB4h-82203EBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82203EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203EBC);
		  /* 82203EBCh */ case    0:  		/* lis R10, -32255 */
		/* 82203EBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82203EBCh case    0:*/		return 0x82203EC0;
		  /* 82203EC0h */ case    1:  		/* li R4, 3018 */
		/* 82203EC0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xBCA);
		/* 82203EC0h case    1:*/		return 0x82203EC4;
		  /* 82203EC4h */ case    2:  		/* addi R10, R10, 12500 */
		/* 82203EC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30D4);
		/* 82203EC4h case    2:*/		return 0x82203EC8;
		  /* 82203EC8h */ case    3:  		/* mr R3, R31 */
		/* 82203EC8h case    3:*/		regs.R3 = regs.R31;
		/* 82203EC8h case    3:*/		return 0x82203ECC;
		  /* 82203ECCh */ case    4:  		/* lbzx R11, <#[R11 + R10]> */
		/* 82203ECCh case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82203ECCh case    4:*/		return 0x82203ED0;
		  /* 82203ED0h */ case    5:  		/* extsb R5, R11 */
		/* 82203ED0h case    5:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82203ED0h case    5:*/		return 0x82203ED4;
		  /* 82203ED4h */ case    6:  		/* bl -729196 */
		/* 82203ED4h case    6:*/		regs.LR = 0x82203ED8; return 0x82151E68;
		/* 82203ED4h case    6:*/		return 0x82203ED8;
	}
	return 0x82203ED8;
} // Block from 82203EBCh-82203ED8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82203ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203ED8);
		  /* 82203ED8h */ case    0:  		/* li R4, 3514 */
		/* 82203ED8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203ED8h case    0:*/		return 0x82203EDC;
		  /* 82203EDCh */ case    1:  		/* mr R3, R31 */
		/* 82203EDCh case    1:*/		regs.R3 = regs.R31;
		/* 82203EDCh case    1:*/		return 0x82203EE0;
		  /* 82203EE0h */ case    2:  		/* bl -729208 */
		/* 82203EE0h case    2:*/		regs.LR = 0x82203EE4; return 0x82151E68;
		/* 82203EE0h case    2:*/		return 0x82203EE4;
	}
	return 0x82203EE4;
} // Block from 82203ED8h-82203EE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203EE4);
		  /* 82203EE4h */ case    0:  		/* li R4, 4801 */
		/* 82203EE4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203EE4h case    0:*/		return 0x82203EE8;
		  /* 82203EE8h */ case    1:  		/* mr R3, R31 */
		/* 82203EE8h case    1:*/		regs.R3 = regs.R31;
		/* 82203EE8h case    1:*/		return 0x82203EEC;
		  /* 82203EECh */ case    2:  		/* bl -729220 */
		/* 82203EECh case    2:*/		regs.LR = 0x82203EF0; return 0x82151E68;
		/* 82203EECh case    2:*/		return 0x82203EF0;
	}
	return 0x82203EF0;
} // Block from 82203EE4h-82203EF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203EF0);
		  /* 82203EF0h */ case    0:  		/* li R4, 4801 */
		/* 82203EF0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203EF0h case    0:*/		return 0x82203EF4;
		  /* 82203EF4h */ case    1:  		/* mr R3, R31 */
		/* 82203EF4h case    1:*/		regs.R3 = regs.R31;
		/* 82203EF4h case    1:*/		return 0x82203EF8;
		  /* 82203EF8h */ case    2:  		/* bl -729232 */
		/* 82203EF8h case    2:*/		regs.LR = 0x82203EFC; return 0x82151E68;
		/* 82203EF8h case    2:*/		return 0x82203EFC;
	}
	return 0x82203EFC;
} // Block from 82203EF0h-82203EFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203EFC);
		  /* 82203EFCh */ case    0:  		/* mr R4, R5 */
		/* 82203EFCh case    0:*/		regs.R4 = regs.R5;
		/* 82203EFCh case    0:*/		return 0x82203F00;
		  /* 82203F00h */ case    1:  		/* mr R3, R31 */
		/* 82203F00h case    1:*/		regs.R3 = regs.R31;
		/* 82203F00h case    1:*/		return 0x82203F04;
		  /* 82203F04h */ case    2:  		/* bl -95428 */
		/* 82203F04h case    2:*/		regs.LR = 0x82203F08; return 0x821ECA40;
		/* 82203F04h case    2:*/		return 0x82203F08;
		  /* 82203F08h */ case    3:  		/* mr R5, R3 */
		/* 82203F08h case    3:*/		regs.R5 = regs.R3;
		/* 82203F08h case    3:*/		return 0x82203F0C;
		  /* 82203F0Ch */ case    4:  		/* li R4, 3521 */
		/* 82203F0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDC1);
		/* 82203F0Ch case    4:*/		return 0x82203F10;
		  /* 82203F10h */ case    5:  		/* mr R3, R31 */
		/* 82203F10h case    5:*/		regs.R3 = regs.R31;
		/* 82203F10h case    5:*/		return 0x82203F14;
		  /* 82203F14h */ case    6:  		/* bl -729260 */
		/* 82203F14h case    6:*/		regs.LR = 0x82203F18; return 0x82151E68;
		/* 82203F14h case    6:*/		return 0x82203F18;
	}
	return 0x82203F18;
} // Block from 82203EFCh-82203F18h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82203F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F18);
		  /* 82203F18h */ case    0:  		/* li R4, 3514 */
		/* 82203F18h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203F18h case    0:*/		return 0x82203F1C;
		  /* 82203F1Ch */ case    1:  		/* mr R3, R31 */
		/* 82203F1Ch case    1:*/		regs.R3 = regs.R31;
		/* 82203F1Ch case    1:*/		return 0x82203F20;
		  /* 82203F20h */ case    2:  		/* bl -729272 */
		/* 82203F20h case    2:*/		regs.LR = 0x82203F24; return 0x82151E68;
		/* 82203F20h case    2:*/		return 0x82203F24;
	}
	return 0x82203F24;
} // Block from 82203F18h-82203F24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F24);
		  /* 82203F24h */ case    0:  		/* li R4, 3514 */
		/* 82203F24h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203F24h case    0:*/		return 0x82203F28;
		  /* 82203F28h */ case    1:  		/* mr R3, R31 */
		/* 82203F28h case    1:*/		regs.R3 = regs.R31;
		/* 82203F28h case    1:*/		return 0x82203F2C;
		  /* 82203F2Ch */ case    2:  		/* bl -729284 */
		/* 82203F2Ch case    2:*/		regs.LR = 0x82203F30; return 0x82151E68;
		/* 82203F2Ch case    2:*/		return 0x82203F30;
	}
	return 0x82203F30;
} // Block from 82203F24h-82203F30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F30);
		  /* 82203F30h */ case    0:  		/* li R4, 3514 */
		/* 82203F30h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203F30h case    0:*/		return 0x82203F34;
		  /* 82203F34h */ case    1:  		/* mr R3, R31 */
		/* 82203F34h case    1:*/		regs.R3 = regs.R31;
		/* 82203F34h case    1:*/		return 0x82203F38;
		  /* 82203F38h */ case    2:  		/* bl -729296 */
		/* 82203F38h case    2:*/		regs.LR = 0x82203F3C; return 0x82151E68;
		/* 82203F38h case    2:*/		return 0x82203F3C;
	}
	return 0x82203F3C;
} // Block from 82203F30h-82203F3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F3C);
		  /* 82203F3Ch */ case    0:  		/* li R4, 4801 */
		/* 82203F3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203F3Ch case    0:*/		return 0x82203F40;
		  /* 82203F40h */ case    1:  		/* mr R3, R31 */
		/* 82203F40h case    1:*/		regs.R3 = regs.R31;
		/* 82203F40h case    1:*/		return 0x82203F44;
		  /* 82203F44h */ case    2:  		/* bl -729308 */
		/* 82203F44h case    2:*/		regs.LR = 0x82203F48; return 0x82151E68;
		/* 82203F44h case    2:*/		return 0x82203F48;
	}
	return 0x82203F48;
} // Block from 82203F3Ch-82203F48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F48);
		  /* 82203F48h */ case    0:  		/* li R4, 3514 */
		/* 82203F48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203F48h case    0:*/		return 0x82203F4C;
		  /* 82203F4Ch */ case    1:  		/* mr R3, R31 */
		/* 82203F4Ch case    1:*/		regs.R3 = regs.R31;
		/* 82203F4Ch case    1:*/		return 0x82203F50;
		  /* 82203F50h */ case    2:  		/* bl -729320 */
		/* 82203F50h case    2:*/		regs.LR = 0x82203F54; return 0x82151E68;
		/* 82203F50h case    2:*/		return 0x82203F54;
	}
	return 0x82203F54;
} // Block from 82203F48h-82203F54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F54);
		  /* 82203F54h */ case    0:  		/* li R4, 4801 */
		/* 82203F54h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203F54h case    0:*/		return 0x82203F58;
		  /* 82203F58h */ case    1:  		/* mr R3, R31 */
		/* 82203F58h case    1:*/		regs.R3 = regs.R31;
		/* 82203F58h case    1:*/		return 0x82203F5C;
		  /* 82203F5Ch */ case    2:  		/* bl -729332 */
		/* 82203F5Ch case    2:*/		regs.LR = 0x82203F60; return 0x82151E68;
		/* 82203F5Ch case    2:*/		return 0x82203F60;
	}
	return 0x82203F60;
} // Block from 82203F54h-82203F60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F60);
		  /* 82203F60h */ case    0:  		/* li R4, 3514 */
		/* 82203F60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203F60h case    0:*/		return 0x82203F64;
		  /* 82203F64h */ case    1:  		/* mr R3, R31 */
		/* 82203F64h case    1:*/		regs.R3 = regs.R31;
		/* 82203F64h case    1:*/		return 0x82203F68;
		  /* 82203F68h */ case    2:  		/* bl -729344 */
		/* 82203F68h case    2:*/		regs.LR = 0x82203F6C; return 0x82151E68;
		/* 82203F68h case    2:*/		return 0x82203F6C;
	}
	return 0x82203F6C;
} // Block from 82203F60h-82203F6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F6C);
		  /* 82203F6Ch */ case    0:  		/* li R4, 3514 */
		/* 82203F6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203F6Ch case    0:*/		return 0x82203F70;
		  /* 82203F70h */ case    1:  		/* mr R3, R31 */
		/* 82203F70h case    1:*/		regs.R3 = regs.R31;
		/* 82203F70h case    1:*/		return 0x82203F74;
		  /* 82203F74h */ case    2:  		/* bl -729356 */
		/* 82203F74h case    2:*/		regs.LR = 0x82203F78; return 0x82151E68;
		/* 82203F74h case    2:*/		return 0x82203F78;
	}
	return 0x82203F78;
} // Block from 82203F6Ch-82203F78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F78);
		  /* 82203F78h */ case    0:  		/* li R4, 4801 */
		/* 82203F78h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203F78h case    0:*/		return 0x82203F7C;
		  /* 82203F7Ch */ case    1:  		/* mr R3, R31 */
		/* 82203F7Ch case    1:*/		regs.R3 = regs.R31;
		/* 82203F7Ch case    1:*/		return 0x82203F80;
		  /* 82203F80h */ case    2:  		/* bl -729368 */
		/* 82203F80h case    2:*/		regs.LR = 0x82203F84; return 0x82151E68;
		/* 82203F80h case    2:*/		return 0x82203F84;
	}
	return 0x82203F84;
} // Block from 82203F78h-82203F84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F84);
		  /* 82203F84h */ case    0:  		/* li R4, 4801 */
		/* 82203F84h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203F84h case    0:*/		return 0x82203F88;
		  /* 82203F88h */ case    1:  		/* mr R3, R31 */
		/* 82203F88h case    1:*/		regs.R3 = regs.R31;
		/* 82203F88h case    1:*/		return 0x82203F8C;
		  /* 82203F8Ch */ case    2:  		/* bl -729380 */
		/* 82203F8Ch case    2:*/		regs.LR = 0x82203F90; return 0x82151E68;
		/* 82203F8Ch case    2:*/		return 0x82203F90;
	}
	return 0x82203F90;
} // Block from 82203F84h-82203F90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F90);
		  /* 82203F90h */ case    0:  		/* li R4, 4801 */
		/* 82203F90h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203F90h case    0:*/		return 0x82203F94;
		  /* 82203F94h */ case    1:  		/* mr R3, R31 */
		/* 82203F94h case    1:*/		regs.R3 = regs.R31;
		/* 82203F94h case    1:*/		return 0x82203F98;
		  /* 82203F98h */ case    2:  		/* bl -729392 */
		/* 82203F98h case    2:*/		regs.LR = 0x82203F9C; return 0x82151E68;
		/* 82203F98h case    2:*/		return 0x82203F9C;
	}
	return 0x82203F9C;
} // Block from 82203F90h-82203F9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203F9C);
		  /* 82203F9Ch */ case    0:  		/* li R4, 4801 */
		/* 82203F9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203F9Ch case    0:*/		return 0x82203FA0;
		  /* 82203FA0h */ case    1:  		/* mr R3, R31 */
		/* 82203FA0h case    1:*/		regs.R3 = regs.R31;
		/* 82203FA0h case    1:*/		return 0x82203FA4;
		  /* 82203FA4h */ case    2:  		/* bl -729404 */
		/* 82203FA4h case    2:*/		regs.LR = 0x82203FA8; return 0x82151E68;
		/* 82203FA4h case    2:*/		return 0x82203FA8;
	}
	return 0x82203FA8;
} // Block from 82203F9Ch-82203FA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FA8);
		  /* 82203FA8h */ case    0:  		/* li R4, 4801 */
		/* 82203FA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FA8h case    0:*/		return 0x82203FAC;
		  /* 82203FACh */ case    1:  		/* mr R3, R31 */
		/* 82203FACh case    1:*/		regs.R3 = regs.R31;
		/* 82203FACh case    1:*/		return 0x82203FB0;
		  /* 82203FB0h */ case    2:  		/* bl -729416 */
		/* 82203FB0h case    2:*/		regs.LR = 0x82203FB4; return 0x82151E68;
		/* 82203FB0h case    2:*/		return 0x82203FB4;
	}
	return 0x82203FB4;
} // Block from 82203FA8h-82203FB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FB4);
		  /* 82203FB4h */ case    0:  		/* li R4, 4801 */
		/* 82203FB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FB4h case    0:*/		return 0x82203FB8;
		  /* 82203FB8h */ case    1:  		/* mr R3, R31 */
		/* 82203FB8h case    1:*/		regs.R3 = regs.R31;
		/* 82203FB8h case    1:*/		return 0x82203FBC;
		  /* 82203FBCh */ case    2:  		/* bl -729428 */
		/* 82203FBCh case    2:*/		regs.LR = 0x82203FC0; return 0x82151E68;
		/* 82203FBCh case    2:*/		return 0x82203FC0;
	}
	return 0x82203FC0;
} // Block from 82203FB4h-82203FC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FC0);
		  /* 82203FC0h */ case    0:  		/* li R4, 4801 */
		/* 82203FC0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FC0h case    0:*/		return 0x82203FC4;
		  /* 82203FC4h */ case    1:  		/* mr R3, R31 */
		/* 82203FC4h case    1:*/		regs.R3 = regs.R31;
		/* 82203FC4h case    1:*/		return 0x82203FC8;
		  /* 82203FC8h */ case    2:  		/* bl -729440 */
		/* 82203FC8h case    2:*/		regs.LR = 0x82203FCC; return 0x82151E68;
		/* 82203FC8h case    2:*/		return 0x82203FCC;
	}
	return 0x82203FCC;
} // Block from 82203FC0h-82203FCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FCC);
		  /* 82203FCCh */ case    0:  		/* li R4, 4801 */
		/* 82203FCCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FCCh case    0:*/		return 0x82203FD0;
		  /* 82203FD0h */ case    1:  		/* mr R3, R31 */
		/* 82203FD0h case    1:*/		regs.R3 = regs.R31;
		/* 82203FD0h case    1:*/		return 0x82203FD4;
		  /* 82203FD4h */ case    2:  		/* bl -729452 */
		/* 82203FD4h case    2:*/		regs.LR = 0x82203FD8; return 0x82151E68;
		/* 82203FD4h case    2:*/		return 0x82203FD8;
	}
	return 0x82203FD8;
} // Block from 82203FCCh-82203FD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FD8);
		  /* 82203FD8h */ case    0:  		/* li R4, 3514 */
		/* 82203FD8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82203FD8h case    0:*/		return 0x82203FDC;
		  /* 82203FDCh */ case    1:  		/* mr R3, R31 */
		/* 82203FDCh case    1:*/		regs.R3 = regs.R31;
		/* 82203FDCh case    1:*/		return 0x82203FE0;
		  /* 82203FE0h */ case    2:  		/* bl -729464 */
		/* 82203FE0h case    2:*/		regs.LR = 0x82203FE4; return 0x82151E68;
		/* 82203FE0h case    2:*/		return 0x82203FE4;
	}
	return 0x82203FE4;
} // Block from 82203FD8h-82203FE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FE4);
		  /* 82203FE4h */ case    0:  		/* li R4, 4801 */
		/* 82203FE4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FE4h case    0:*/		return 0x82203FE8;
		  /* 82203FE8h */ case    1:  		/* mr R3, R31 */
		/* 82203FE8h case    1:*/		regs.R3 = regs.R31;
		/* 82203FE8h case    1:*/		return 0x82203FEC;
		  /* 82203FECh */ case    2:  		/* bl -729476 */
		/* 82203FECh case    2:*/		regs.LR = 0x82203FF0; return 0x82151E68;
		/* 82203FECh case    2:*/		return 0x82203FF0;
	}
	return 0x82203FF0;
} // Block from 82203FE4h-82203FF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FF0);
		  /* 82203FF0h */ case    0:  		/* li R4, 4801 */
		/* 82203FF0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FF0h case    0:*/		return 0x82203FF4;
		  /* 82203FF4h */ case    1:  		/* mr R3, R31 */
		/* 82203FF4h case    1:*/		regs.R3 = regs.R31;
		/* 82203FF4h case    1:*/		return 0x82203FF8;
		  /* 82203FF8h */ case    2:  		/* bl -729488 */
		/* 82203FF8h case    2:*/		regs.LR = 0x82203FFC; return 0x82151E68;
		/* 82203FF8h case    2:*/		return 0x82203FFC;
	}
	return 0x82203FFC;
} // Block from 82203FF0h-82203FFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82203FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82203FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82203FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82203FFC);
		  /* 82203FFCh */ case    0:  		/* li R4, 4801 */
		/* 82203FFCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82203FFCh case    0:*/		return 0x82204000;
		  /* 82204000h */ case    1:  		/* mr R3, R31 */
		/* 82204000h case    1:*/		regs.R3 = regs.R31;
		/* 82204000h case    1:*/		return 0x82204004;
		  /* 82204004h */ case    2:  		/* bl -729500 */
		/* 82204004h case    2:*/		regs.LR = 0x82204008; return 0x82151E68;
		/* 82204004h case    2:*/		return 0x82204008;
	}
	return 0x82204008;
} // Block from 82203FFCh-82204008h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204008);
		  /* 82204008h */ case    0:  		/* li R4, 4801 */
		/* 82204008h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204008h case    0:*/		return 0x8220400C;
		  /* 8220400Ch */ case    1:  		/* bl -729508 */
		/* 8220400Ch case    1:*/		regs.LR = 0x82204010; return 0x82151E68;
		/* 8220400Ch case    1:*/		return 0x82204010;
		  /* 82204010h */ case    2:  		/* li R4, 4801 */
		/* 82204010h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204010h case    2:*/		return 0x82204014;
		  /* 82204014h */ case    3:  		/* mr R3, R31 */
		/* 82204014h case    3:*/		regs.R3 = regs.R31;
		/* 82204014h case    3:*/		return 0x82204018;
		  /* 82204018h */ case    4:  		/* bl -729520 */
		/* 82204018h case    4:*/		regs.LR = 0x8220401C; return 0x82151E68;
		/* 82204018h case    4:*/		return 0x8220401C;
	}
	return 0x8220401C;
} // Block from 82204008h-8220401Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220401Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220401C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220401C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220401C);
		  /* 8220401Ch */ case    0:  		/* li R4, 4801 */
		/* 8220401Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220401Ch case    0:*/		return 0x82204020;
		  /* 82204020h */ case    1:  		/* mr R3, R31 */
		/* 82204020h case    1:*/		regs.R3 = regs.R31;
		/* 82204020h case    1:*/		return 0x82204024;
		  /* 82204024h */ case    2:  		/* bl -729532 */
		/* 82204024h case    2:*/		regs.LR = 0x82204028; return 0x82151E68;
		/* 82204024h case    2:*/		return 0x82204028;
	}
	return 0x82204028;
} // Block from 8220401Ch-82204028h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204028);
		  /* 82204028h */ case    0:  		/* li R4, 4801 */
		/* 82204028h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204028h case    0:*/		return 0x8220402C;
		  /* 8220402Ch */ case    1:  		/* mr R3, R31 */
		/* 8220402Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220402Ch case    1:*/		return 0x82204030;
		  /* 82204030h */ case    2:  		/* bl -729544 */
		/* 82204030h case    2:*/		regs.LR = 0x82204034; return 0x82151E68;
		/* 82204030h case    2:*/		return 0x82204034;
	}
	return 0x82204034;
} // Block from 82204028h-82204034h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204034);
		  /* 82204034h */ case    0:  		/* li R4, 4801 */
		/* 82204034h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204034h case    0:*/		return 0x82204038;
		  /* 82204038h */ case    1:  		/* mr R3, R31 */
		/* 82204038h case    1:*/		regs.R3 = regs.R31;
		/* 82204038h case    1:*/		return 0x8220403C;
		  /* 8220403Ch */ case    2:  		/* bl -729556 */
		/* 8220403Ch case    2:*/		regs.LR = 0x82204040; return 0x82151E68;
		/* 8220403Ch case    2:*/		return 0x82204040;
	}
	return 0x82204040;
} // Block from 82204034h-82204040h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204040);
		  /* 82204040h */ case    0:  		/* li R4, 4801 */
		/* 82204040h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204040h case    0:*/		return 0x82204044;
		  /* 82204044h */ case    1:  		/* mr R3, R31 */
		/* 82204044h case    1:*/		regs.R3 = regs.R31;
		/* 82204044h case    1:*/		return 0x82204048;
		  /* 82204048h */ case    2:  		/* bl -729568 */
		/* 82204048h case    2:*/		regs.LR = 0x8220404C; return 0x82151E68;
		/* 82204048h case    2:*/		return 0x8220404C;
	}
	return 0x8220404C;
} // Block from 82204040h-8220404Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220404Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220404C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220404C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220404C);
		  /* 8220404Ch */ case    0:  		/* li R4, 4801 */
		/* 8220404Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220404Ch case    0:*/		return 0x82204050;
		  /* 82204050h */ case    1:  		/* mr R3, R31 */
		/* 82204050h case    1:*/		regs.R3 = regs.R31;
		/* 82204050h case    1:*/		return 0x82204054;
		  /* 82204054h */ case    2:  		/* bl -729580 */
		/* 82204054h case    2:*/		regs.LR = 0x82204058; return 0x82151E68;
		/* 82204054h case    2:*/		return 0x82204058;
	}
	return 0x82204058;
} // Block from 8220404Ch-82204058h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204058);
		  /* 82204058h */ case    0:  		/* li R4, 4801 */
		/* 82204058h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204058h case    0:*/		return 0x8220405C;
		  /* 8220405Ch */ case    1:  		/* mr R3, R31 */
		/* 8220405Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220405Ch case    1:*/		return 0x82204060;
		  /* 82204060h */ case    2:  		/* bl -729592 */
		/* 82204060h case    2:*/		regs.LR = 0x82204064; return 0x82151E68;
		/* 82204060h case    2:*/		return 0x82204064;
	}
	return 0x82204064;
} // Block from 82204058h-82204064h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204064);
		  /* 82204064h */ case    0:  		/* lwz R11, <#[R1 + 3516]> */
		/* 82204064h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000DBC) );
		/* 82204064h case    0:*/		return 0x82204068;
		  /* 82204068h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82204068h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82204068h case    1:*/		return 0x8220406C;
		  /* 8220406Ch */ case    2:  		/* bc 12, CR6_LT, 384 */
		/* 8220406Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x822041EC;  }
		/* 8220406Ch case    2:*/		return 0x82204070;
		  /* 82204070h */ case    3:  		/* bc 12, CR6_EQ, 208 */
		/* 82204070h case    3:*/		if ( regs.CR[6].eq ) { return 0x82204140;  }
		/* 82204070h case    3:*/		return 0x82204074;
		  /* 82204074h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82204074h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82204074h case    4:*/		return 0x82204078;
		  /* 82204078h */ case    5:  		/* bc 12, CR6_LT, 96 */
		/* 82204078h case    5:*/		if ( regs.CR[6].lt ) { return 0x822040D8;  }
		/* 82204078h case    5:*/		return 0x8220407C;
		  /* 8220407Ch */ case    6:  		/* bc 12, CR6_EQ, 368 */
		/* 8220407Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x822041EC;  }
		/* 8220407Ch case    6:*/		return 0x82204080;
		  /* 82204080h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 82204080h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82204080h case    7:*/		return 0x82204084;
		  /* 82204084h */ case    8:  		/* bc 12, CR6_LT, 368 */
		/* 82204084h case    8:*/		if ( regs.CR[6].lt ) { return 0x822041F4;  }
		/* 82204084h case    8:*/		return 0x82204088;
		  /* 82204088h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82204088h case    9:*/		if ( regs.CR[6].eq ) { return 0x82204098;  }
		/* 82204088h case    9:*/		return 0x8220408C;
		  /* 8220408Ch */ case   10:  		/* li R4, 4800 */
		/* 8220408Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8220408Ch case   10:*/		return 0x82204090;
		  /* 82204090h */ case   11:  		/* mr R3, R31 */
		/* 82204090h case   11:*/		regs.R3 = regs.R31;
		/* 82204090h case   11:*/		return 0x82204094;
		  /* 82204094h */ case   12:  		/* bl -729644 */
		/* 82204094h case   12:*/		regs.LR = 0x82204098; return 0x82151E68;
		/* 82204094h case   12:*/		return 0x82204098;
	}
	return 0x82204098;
} // Block from 82204064h-82204098h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82204098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204098);
		  /* 82204098h */ case    0:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82204098h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82204098h case    0:*/		return 0x8220409C;
		  /* 8220409Ch */ case    1:  		/* addi R3, R1, 280 */
		/* 8220409Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x118);
		/* 8220409Ch case    1:*/		return 0x822040A0;
		  /* 822040A0h */ case    2:  		/* mr R4, R30 */
		/* 822040A0h case    2:*/		regs.R4 = regs.R30;
		/* 822040A0h case    2:*/		return 0x822040A4;
		  /* 822040A4h */ case    3:  		/* bl -64084 */
		/* 822040A4h case    3:*/		regs.LR = 0x822040A8; return 0x821F4650;
		/* 822040A4h case    3:*/		return 0x822040A8;
		  /* 822040A8h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 822040A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 822040A8h case    4:*/		return 0x822040AC;
		  /* 822040ACh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 822040ACh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 822040ACh case    5:*/		return 0x822040B0;
		  /* 822040B0h */ case    6:  		/* bc 4, CR0_EQ, 24 */
		/* 822040B0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x822040C8;  }
		/* 822040B0h case    6:*/		return 0x822040B4;
		  /* 822040B4h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 822040B4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822040B4h case    7:*/		return 0x822040B8;
		  /* 822040B8h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 822040B8h case    8:*/		if ( regs.CR[0].eq ) { return 0x822040C8;  }
		/* 822040B8h case    8:*/		return 0x822040BC;
		  /* 822040BCh */ case    9:  		/* li R4, 4800 */
		/* 822040BCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 822040BCh case    9:*/		return 0x822040C0;
		  /* 822040C0h */ case   10:  		/* mr R3, R31 */
		/* 822040C0h case   10:*/		regs.R3 = regs.R31;
		/* 822040C0h case   10:*/		return 0x822040C4;
		  /* 822040C4h */ case   11:  		/* bl -729692 */
		/* 822040C4h case   11:*/		regs.LR = 0x822040C8; return 0x82151E68;
		/* 822040C4h case   11:*/		return 0x822040C8;
	}
	return 0x822040C8;
} // Block from 82204098h-822040C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822040C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822040C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822040C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822040C8);
		  /* 822040C8h */ case    0:  		/* addi R4, R1, 280 */
		/* 822040C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x118);
		/* 822040C8h case    0:*/		return 0x822040CC;
		  /* 822040CCh */ case    1:  		/* mr R3, R31 */
		/* 822040CCh case    1:*/		regs.R3 = regs.R31;
		/* 822040CCh case    1:*/		return 0x822040D0;
		  /* 822040D0h */ case    2:  		/* bl -73040 */
		/* 822040D0h case    2:*/		regs.LR = 0x822040D4; return 0x821F2380;
		/* 822040D0h case    2:*/		return 0x822040D4;
		  /* 822040D4h */ case    3:  		/* b 88 */
		/* 822040D4h case    3:*/		return 0x8220412C;
		/* 822040D4h case    3:*/		return 0x822040D8;
	}
	return 0x822040D8;
} // Block from 822040C8h-822040D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822040D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822040D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822040D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822040D8);
		  /* 822040D8h */ case    0:  		/* lwz R30, <#[R1 + 3500]> */
		/* 822040D8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822040D8h case    0:*/		return 0x822040DC;
		  /* 822040DCh */ case    1:  		/* addi R3, R1, 280 */
		/* 822040DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x118);
		/* 822040DCh case    1:*/		return 0x822040E0;
		  /* 822040E0h */ case    2:  		/* mr R4, R30 */
		/* 822040E0h case    2:*/		regs.R4 = regs.R30;
		/* 822040E0h case    2:*/		return 0x822040E4;
		  /* 822040E4h */ case    3:  		/* bl -64148 */
		/* 822040E4h case    3:*/		regs.LR = 0x822040E8; return 0x821F4650;
		/* 822040E4h case    3:*/		return 0x822040E8;
		  /* 822040E8h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 822040E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 822040E8h case    4:*/		return 0x822040EC;
		  /* 822040ECh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 822040ECh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 822040ECh case    5:*/		return 0x822040F0;
		  /* 822040F0h */ case    6:  		/* bc 4, CR0_EQ, 32 */
		/* 822040F0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82204110;  }
		/* 822040F0h case    6:*/		return 0x822040F4;
		  /* 822040F4h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 822040F4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822040F4h case    7:*/		return 0x822040F8;
		  /* 822040F8h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 822040F8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82204110;  }
		/* 822040F8h case    8:*/		return 0x822040FC;
		  /* 822040FCh */ case    9:  		/* lwz R11, <#[R31 + 40]> */
		/* 822040FCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 822040FCh case    9:*/		return 0x82204100;
		  /* 82204100h */ case   10:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 82204100h case   10:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 82204100h case   10:*/		return 0x82204104;
		  /* 82204104h */ case   11:  		/* bc 12, CR0_EQ, 48 */
		/* 82204104h case   11:*/		if ( regs.CR[0].eq ) { return 0x82204134;  }
		/* 82204104h case   11:*/		return 0x82204108;
		  /* 82204108h */ case   12:  		/* mr R3, R30 */
		/* 82204108h case   12:*/		regs.R3 = regs.R30;
		/* 82204108h case   12:*/		return 0x8220410C;
		  /* 8220410Ch */ case   13:  		/* bl -75836 */
		/* 8220410Ch case   13:*/		regs.LR = 0x82204110; return 0x821F18D0;
		/* 8220410Ch case   13:*/		return 0x82204110;
	}
	return 0x82204110;
} // Block from 822040D8h-82204110h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82204110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204110);
		  /* 82204110h */ case    0:  		/* mr R3, R31 */
		/* 82204110h case    0:*/		regs.R3 = regs.R31;
		/* 82204110h case    0:*/		return 0x82204114;
		  /* 82204114h */ case    1:  		/* ld R4, <#[R1 + 280]> */
		/* 82204114h case    1:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000118) );
		/* 82204114h case    1:*/		return 0x82204118;
		  /* 82204118h */ case    2:  		/* bl -69936 */
		/* 82204118h case    2:*/		regs.LR = 0x8220411C; return 0x821F2FE8;
		/* 82204118h case    2:*/		return 0x8220411C;
		  /* 8220411Ch */ case    3:  		/* mr R4, R3 */
		/* 8220411Ch case    3:*/		regs.R4 = regs.R3;
		/* 8220411Ch case    3:*/		return 0x82204120;
		  /* 82204120h */ case    4:  		/* li R5, 7 */
		/* 82204120h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 82204120h case    4:*/		return 0x82204124;
		  /* 82204124h */ case    5:  		/* mr R3, R31 */
		/* 82204124h case    5:*/		regs.R3 = regs.R31;
		/* 82204124h case    5:*/		return 0x82204128;
		  /* 82204128h */ case    6:  		/* bl -604632 */
		/* 82204128h case    6:*/		regs.LR = 0x8220412C; return 0x82170750;
		/* 82204128h case    6:*/		return 0x8220412C;
	}
	return 0x8220412C;
} // Block from 82204110h-8220412Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220412Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220412C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220412C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220412C);
		  /* 8220412Ch */ case    0:  		/* stw R3, <#[R1 + 156]> */
		/* 8220412Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000009C) );
		/* 8220412Ch case    0:*/		return 0x82204130;
		  /* 82204130h */ case    1:  		/* b 196 */
		/* 82204130h case    1:*/		return 0x822041F4;
		/* 82204130h case    1:*/		return 0x82204134;
	}
	return 0x82204134;
} // Block from 8220412Ch-82204134h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204134);
		  /* 82204134h */ case    0:  		/* li R4, 4800 */
		/* 82204134h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82204134h case    0:*/		return 0x82204138;
		  /* 82204138h */ case    1:  		/* mr R3, R31 */
		/* 82204138h case    1:*/		regs.R3 = regs.R31;
		/* 82204138h case    1:*/		return 0x8220413C;
		  /* 8220413Ch */ case    2:  		/* bl -729812 */
		/* 8220413Ch case    2:*/		regs.LR = 0x82204140; return 0x82151E68;
		/* 8220413Ch case    2:*/		return 0x82204140;
	}
	return 0x82204140;
} // Block from 82204134h-82204140h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204140);
		  /* 82204140h */ case    0:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82204140h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82204140h case    0:*/		return 0x82204144;
		  /* 82204144h */ case    1:  		/* mr R3, R30 */
		/* 82204144h case    1:*/		regs.R3 = regs.R30;
		/* 82204144h case    1:*/		return 0x82204148;
		  /* 82204148h */ case    2:  		/* bl -75896 */
		/* 82204148h case    2:*/		regs.LR = 0x8220414C; return 0x821F18D0;
		/* 82204148h case    2:*/		return 0x8220414C;
		  /* 8220414Ch */ case    3:  		/* lwz R11, <#[R31 + 44]> */
		/* 8220414Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8220414Ch case    3:*/		return 0x82204150;
		  /* 82204150h */ case    4:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 82204150h case    4:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 82204150h case    4:*/		return 0x82204154;
		  /* 82204154h */ case    5:  		/* bc 12, CR0_EQ, 68 */
		/* 82204154h case    5:*/		if ( regs.CR[0].eq ) { return 0x82204198;  }
		/* 82204154h case    5:*/		return 0x82204158;
		  /* 82204158h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 82204158h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82204158h case    6:*/		return 0x8220415C;
		  /* 8220415Ch */ case    7:  		/* lwz R10, <#[R31 + 564]> */
		/* 8220415Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8220415Ch case    7:*/		return 0x82204160;
		  /* 82204160h */ case    8:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 82204160h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 82204160h case    8:*/		return 0x82204164;
		  /* 82204164h */ case    9:  		/* addic R9, R9, -1 */
		/* 82204164h case    9:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82204164h case    9:*/		return 0x82204168;
		  /* 82204168h */ case   10:  		/* subfe R9, R9, R9 */
		/* 82204168h case   10:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82204168h case   10:*/		return 0x8220416C;
		  /* 8220416Ch */ case   11:  		/* and R11, R9, R11 */
		/* 8220416Ch case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220416Ch case   11:*/		return 0x82204170;
		  /* 82204170h */ case   12:  		/* cmplw CR6, R10, R11 */
		/* 82204170h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82204170h case   12:*/		return 0x82204174;
		  /* 82204174h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 82204174h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82204198;  }
		/* 82204174h case   13:*/		return 0x82204178;
		  /* 82204178h */ case   14:  		/* mr R3, R31 */
		/* 82204178h case   14:*/		regs.R3 = regs.R31;
		/* 82204178h case   14:*/		return 0x8220417C;
		  /* 8220417Ch */ case   15:  		/* bl -90628 */
		/* 8220417Ch case   15:*/		regs.LR = 0x82204180; return 0x821EDF78;
		/* 8220417Ch case   15:*/		return 0x82204180;
		  /* 82204180h */ case   16:  		/* mr R29, R3 */
		/* 82204180h case   16:*/		regs.R29 = regs.R3;
		/* 82204180h case   16:*/		return 0x82204184;
		  /* 82204184h */ case   17:  		/* mr R5, R31 */
		/* 82204184h case   17:*/		regs.R5 = regs.R31;
		/* 82204184h case   17:*/		return 0x82204188;
		  /* 82204188h */ case   18:  		/* lwz R3, <#[R31 + 564]> */
		/* 82204188h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82204188h case   18:*/		return 0x8220418C;
		  /* 8220418Ch */ case   19:  		/* mr R4, R29 */
		/* 8220418Ch case   19:*/		regs.R4 = regs.R29;
		/* 8220418Ch case   19:*/		return 0x82204190;
		  /* 82204190h */ case   20:  		/* bl 178512 */
		/* 82204190h case   20:*/		regs.LR = 0x82204194; return 0x8222FAE0;
		/* 82204190h case   20:*/		return 0x82204194;
		  /* 82204194h */ case   21:  		/* stw R29, <#[R31 + 564]> */
		/* 82204194h case   21:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 82204194h case   21:*/		return 0x82204198;
	}
	return 0x82204198;
} // Block from 82204140h-82204198h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82204198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204198);
		  /* 82204198h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 82204198h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82204198h case    0:*/		return 0x8220419C;
		  /* 8220419Ch */ case    1:  		/* li R8, 0 */
		/* 8220419Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8220419Ch case    1:*/		return 0x822041A0;
		  /* 822041A0h */ case    2:  		/* li R7, 0 */
		/* 822041A0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822041A0h case    2:*/		return 0x822041A4;
		  /* 822041A4h */ case    3:  		/* addi R5, R4, 32 */
		/* 822041A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 822041A4h case    3:*/		return 0x822041A8;
		  /* 822041A8h */ case    4:  		/* li R6, 83 */
		/* 822041A8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x53);
		/* 822041A8h case    4:*/		return 0x822041AC;
		  /* 822041ACh */ case    5:  		/* mr R3, R31 */
		/* 822041ACh case    5:*/		regs.R3 = regs.R31;
		/* 822041ACh case    5:*/		return 0x822041B0;
		  /* 822041B0h */ case    6:  		/* bl 133096 */
		/* 822041B0h case    6:*/		regs.LR = 0x822041B4; return 0x82224998;
		/* 822041B0h case    6:*/		return 0x822041B4;
		  /* 822041B4h */ case    7:  		/* lwz R11, <#[R31 + 28]> */
		/* 822041B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 822041B4h case    7:*/		return 0x822041B8;
		  /* 822041B8h */ case    8:  		/* mr R29, R3 */
		/* 822041B8h case    8:*/		regs.R29 = regs.R3;
		/* 822041B8h case    8:*/		return 0x822041BC;
		  /* 822041BCh */ case    9:  		/* mr R7, R3 */
		/* 822041BCh case    9:*/		regs.R7 = regs.R3;
		/* 822041BCh case    9:*/		return 0x822041C0;
		  /* 822041C0h */ case   10:  		/* mr R4, R30 */
		/* 822041C0h case   10:*/		regs.R4 = regs.R30;
		/* 822041C0h case   10:*/		return 0x822041C4;
		  /* 822041C4h */ case   11:  		/* mr R3, R31 */
		/* 822041C4h case   11:*/		regs.R3 = regs.R31;
		/* 822041C4h case   11:*/		return 0x822041C8;
		  /* 822041C8h */ case   12:  		/* lwz R6, <#[R11 + 56]> */
		/* 822041C8h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000038) );
		/* 822041C8h case   12:*/		return 0x822041CC;
		  /* 822041CCh */ case   13:  		/* lwz R5, <#[R11 + 16]> */
		/* 822041CCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 822041CCh case   13:*/		return 0x822041D0;
		  /* 822041D0h */ case   14:  		/* bl -43216 */
		/* 822041D0h case   14:*/		regs.LR = 0x822041D4; return 0x821F9900;
		/* 822041D0h case   14:*/		return 0x822041D4;
		  /* 822041D4h */ case   15:  		/* mr R6, R29 */
		/* 822041D4h case   15:*/		regs.R6 = regs.R29;
		/* 822041D4h case   15:*/		return 0x822041D8;
		  /* 822041D8h */ case   16:  		/* lwz R4, <#[R31 + 28]> */
		/* 822041D8h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822041D8h case   16:*/		return 0x822041DC;
		  /* 822041DCh */ case   17:  		/* mr R5, R30 */
		/* 822041DCh case   17:*/		regs.R5 = regs.R30;
		/* 822041DCh case   17:*/		return 0x822041E0;
		  /* 822041E0h */ case   18:  		/* mr R3, R31 */
		/* 822041E0h case   18:*/		regs.R3 = regs.R31;
		/* 822041E0h case   18:*/		return 0x822041E4;
		  /* 822041E4h */ case   19:  		/* bl -42132 */
		/* 822041E4h case   19:*/		regs.LR = 0x822041E8; return 0x821F9D50;
		/* 822041E4h case   19:*/		return 0x822041E8;
		  /* 822041E8h */ case   20:  		/* b 12 */
		/* 822041E8h case   20:*/		return 0x822041F4;
		/* 822041E8h case   20:*/		return 0x822041EC;
	}
	return 0x822041EC;
} // Block from 82204198h-822041ECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 822041ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822041EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822041EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822041EC);
		  /* 822041ECh */ case    0:  		/* lwz R3, <#[R1 + 3500]> */
		/* 822041ECh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822041ECh case    0:*/		return 0x822041F0;
		  /* 822041F0h */ case    1:  		/* bl -76064 */
		/* 822041F0h case    1:*/		regs.LR = 0x822041F4; return 0x821F18D0;
		/* 822041F0h case    1:*/		return 0x822041F4;
	}
	return 0x822041F4;
} // Block from 822041ECh-822041F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822041F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822041F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822041F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822041F4);
		  /* 822041F4h */ case    0:  		/* li R6, 43 */
		/* 822041F4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2B);
		/* 822041F4h case    0:*/		return 0x822041F8;
		  /* 822041F8h */ case    1:  		/* li R5, 8 */
		/* 822041F8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 822041F8h case    1:*/		return 0x822041FC;
		  /* 822041FCh */ case    2:  		/* mr R4, R26 */
		/* 822041FCh case    2:*/		regs.R4 = regs.R26;
		/* 822041FCh case    2:*/		return 0x82204200;
		  /* 82204200h */ case    3:  		/* mr R3, R31 */
		/* 82204200h case    3:*/		regs.R3 = regs.R31;
		/* 82204200h case    3:*/		return 0x82204204;
		  /* 82204204h */ case    4:  		/* bl -619444 */
		/* 82204204h case    4:*/		regs.LR = 0x82204208; return 0x8216CE50;
		/* 82204204h case    4:*/		return 0x82204208;
		  /* 82204208h */ case    5:  		/* lwz R3, <#[R1 + 156]> */
		/* 82204208h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000009C) );
		/* 82204208h case    5:*/		return 0x8220420C;
		  /* 8220420Ch */ case    6:  		/* addi R1, R1, 3472 */
		/* 8220420Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD90);
		/* 8220420Ch case    6:*/		return 0x82204210;
		  /* 82204210h */ case    7:  		/* addi R12, R1, -152 */
		/* 82204210h case    7:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 82204210h case    7:*/		return 0x82204214;
		  /* 82204214h */ case    8:  		/* bl -1519080 */
		/* 82204214h case    8:*/		regs.LR = 0x82204218; return 0x8209142C;
		/* 82204214h case    8:*/		return 0x82204218;
		  /* 82204218h */ case    9:  		/* b -1519528 */
		/* 82204218h case    9:*/		return 0x82091270;
		/* 82204218h case    9:*/		return 0x8220421C;
	}
	return 0x8220421C;
} // Block from 822041F4h-8220421Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220421Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220421C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220421C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220421C);
		  /* 8220421Ch */ case    0:  		/* li R4, 4800 */
		/* 8220421Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8220421Ch case    0:*/		return 0x82204220;
		  /* 82204220h */ case    1:  		/* mr R3, R31 */
		/* 82204220h case    1:*/		regs.R3 = regs.R31;
		/* 82204220h case    1:*/		return 0x82204224;
		  /* 82204224h */ case    2:  		/* bl -730044 */
		/* 82204224h case    2:*/		regs.LR = 0x82204228; return 0x82151E68;
		/* 82204224h case    2:*/		return 0x82204228;
	}
	return 0x82204228;
} // Block from 8220421Ch-82204228h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204228);
		  /* 82204228h */ case    0:  		/* lis R11, -32255 */
		/* 82204228h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82204228h case    0:*/		return 0x8220422C;
		  /* 8220422Ch */ case    1:  		/* li R4, 3500 */
		/* 8220422Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 8220422Ch case    1:*/		return 0x82204230;
		  /* 82204230h */ case    2:  		/* addi R5, R11, 28524 */
		/* 82204230h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6F6C);
		/* 82204230h case    2:*/		return 0x82204234;
		  /* 82204234h */ case    3:  		/* mr R3, R31 */
		/* 82204234h case    3:*/		regs.R3 = regs.R31;
		/* 82204234h case    3:*/		return 0x82204238;
		  /* 82204238h */ case    4:  		/* bl -730064 */
		/* 82204238h case    4:*/		regs.LR = 0x8220423C; return 0x82151E68;
		/* 82204238h case    4:*/		return 0x8220423C;
	}
	return 0x8220423C;
} // Block from 82204228h-8220423Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220423Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220423C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220423C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220423C);
		  /* 8220423Ch */ case    0:  		/* lis R11, -32252 */
		/* 8220423Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220423Ch case    0:*/		return 0x82204240;
		  /* 82204240h */ case    1:  		/* li R4, 3500 */
		/* 82204240h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82204240h case    1:*/		return 0x82204244;
		  /* 82204244h */ case    2:  		/* addi R5, R11, -13284 */
		/* 82204244h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCC1C);
		/* 82204244h case    2:*/		return 0x82204248;
		  /* 82204248h */ case    3:  		/* mr R3, R31 */
		/* 82204248h case    3:*/		regs.R3 = regs.R31;
		/* 82204248h case    3:*/		return 0x8220424C;
		  /* 8220424Ch */ case    4:  		/* bl -730084 */
		/* 8220424Ch case    4:*/		regs.LR = 0x82204250; return 0x82151E68;
		/* 8220424Ch case    4:*/		return 0x82204250;
	}
	return 0x82204250;
} // Block from 8220423Ch-82204250h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82204250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204250);
		  /* 82204250h */ case    0:  		/* li R4, 4801 */
		/* 82204250h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204250h case    0:*/		return 0x82204254;
		  /* 82204254h */ case    1:  		/* mr R3, R31 */
		/* 82204254h case    1:*/		regs.R3 = regs.R31;
		/* 82204254h case    1:*/		return 0x82204258;
		  /* 82204258h */ case    2:  		/* bl -730096 */
		/* 82204258h case    2:*/		regs.LR = 0x8220425C; return 0x82151E68;
		/* 82204258h case    2:*/		return 0x8220425C;
	}
	return 0x8220425C;
} // Block from 82204250h-8220425Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220425Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220425C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220425C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220425C);
		  /* 8220425Ch */ case    0:  		/* li R4, 4801 */
		/* 8220425Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220425Ch case    0:*/		return 0x82204260;
		  /* 82204260h */ case    1:  		/* mr R3, R31 */
		/* 82204260h case    1:*/		regs.R3 = regs.R31;
		/* 82204260h case    1:*/		return 0x82204264;
		  /* 82204264h */ case    2:  		/* bl -730108 */
		/* 82204264h case    2:*/		regs.LR = 0x82204268; return 0x82151E68;
		/* 82204264h case    2:*/		return 0x82204268;
	}
	return 0x82204268;
} // Block from 8220425Ch-82204268h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204268);
		  /* 82204268h */ case    0:  		/* li R4, 4801 */
		/* 82204268h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204268h case    0:*/		return 0x8220426C;
		  /* 8220426Ch */ case    1:  		/* mr R3, R31 */
		/* 8220426Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220426Ch case    1:*/		return 0x82204270;
		  /* 82204270h */ case    2:  		/* bl -730120 */
		/* 82204270h case    2:*/		regs.LR = 0x82204274; return 0x82151E68;
		/* 82204270h case    2:*/		return 0x82204274;
	}
	return 0x82204274;
} // Block from 82204268h-82204274h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204274);
		  /* 82204274h */ case    0:  		/* li R4, 4801 */
		/* 82204274h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204274h case    0:*/		return 0x82204278;
		  /* 82204278h */ case    1:  		/* mr R3, R31 */
		/* 82204278h case    1:*/		regs.R3 = regs.R31;
		/* 82204278h case    1:*/		return 0x8220427C;
		  /* 8220427Ch */ case    2:  		/* bl -730132 */
		/* 8220427Ch case    2:*/		regs.LR = 0x82204280; return 0x82151E68;
		/* 8220427Ch case    2:*/		return 0x82204280;
	}
	return 0x82204280;
} // Block from 82204274h-82204280h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204280);
		  /* 82204280h */ case    0:  		/* li R4, 4801 */
		/* 82204280h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204280h case    0:*/		return 0x82204284;
		  /* 82204284h */ case    1:  		/* mr R3, R31 */
		/* 82204284h case    1:*/		regs.R3 = regs.R31;
		/* 82204284h case    1:*/		return 0x82204288;
		  /* 82204288h */ case    2:  		/* bl -730144 */
		/* 82204288h case    2:*/		regs.LR = 0x8220428C; return 0x82151E68;
		/* 82204288h case    2:*/		return 0x8220428C;
	}
	return 0x8220428C;
} // Block from 82204280h-8220428Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220428Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220428C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220428C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220428C);
		  /* 8220428Ch */ case    0:  		/* li R4, 4800 */
		/* 8220428Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8220428Ch case    0:*/		return 0x82204290;
		  /* 82204290h */ case    1:  		/* mr R3, R31 */
		/* 82204290h case    1:*/		regs.R3 = regs.R31;
		/* 82204290h case    1:*/		return 0x82204294;
		  /* 82204294h */ case    2:  		/* bl -730156 */
		/* 82204294h case    2:*/		regs.LR = 0x82204298; return 0x82151E68;
		/* 82204294h case    2:*/		return 0x82204298;
	}
	return 0x82204298;
} // Block from 8220428Ch-82204298h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204298);
		  /* 82204298h */ case    0:  		/* li R4, 4801 */
		/* 82204298h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204298h case    0:*/		return 0x8220429C;
		  /* 8220429Ch */ case    1:  		/* mr R3, R31 */
		/* 8220429Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220429Ch case    1:*/		return 0x822042A0;
		  /* 822042A0h */ case    2:  		/* bl -730168 */
		/* 822042A0h case    2:*/		regs.LR = 0x822042A4; return 0x82151E68;
		/* 822042A0h case    2:*/		return 0x822042A4;
	}
	return 0x822042A4;
} // Block from 82204298h-822042A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822042A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042A4);
		  /* 822042A4h */ case    0:  		/* li R4, 4801 */
		/* 822042A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822042A4h case    0:*/		return 0x822042A8;
		  /* 822042A8h */ case    1:  		/* mr R3, R31 */
		/* 822042A8h case    1:*/		regs.R3 = regs.R31;
		/* 822042A8h case    1:*/		return 0x822042AC;
		  /* 822042ACh */ case    2:  		/* bl -730180 */
		/* 822042ACh case    2:*/		regs.LR = 0x822042B0; return 0x82151E68;
		/* 822042ACh case    2:*/		return 0x822042B0;
	}
	return 0x822042B0;
} // Block from 822042A4h-822042B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822042B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042B0);
		  /* 822042B0h */ case    0:  		/* li R4, 4801 */
		/* 822042B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822042B0h case    0:*/		return 0x822042B4;
		  /* 822042B4h */ case    1:  		/* mr R3, R31 */
		/* 822042B4h case    1:*/		regs.R3 = regs.R31;
		/* 822042B4h case    1:*/		return 0x822042B8;
		  /* 822042B8h */ case    2:  		/* bl -730192 */
		/* 822042B8h case    2:*/		regs.LR = 0x822042BC; return 0x82151E68;
		/* 822042B8h case    2:*/		return 0x822042BC;
	}
	return 0x822042BC;
} // Block from 822042B0h-822042BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822042BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042BC);
		  /* 822042BCh */ case    0:  		/* lis R11, -32252 */
		/* 822042BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822042BCh case    0:*/		return 0x822042C0;
		  /* 822042C0h */ case    1:  		/* li R4, 3500 */
		/* 822042C0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 822042C0h case    1:*/		return 0x822042C4;
		  /* 822042C4h */ case    2:  		/* addi R5, R11, -13300 */
		/* 822042C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCC0C);
		/* 822042C4h case    2:*/		return 0x822042C8;
		  /* 822042C8h */ case    3:  		/* mr R3, R31 */
		/* 822042C8h case    3:*/		regs.R3 = regs.R31;
		/* 822042C8h case    3:*/		return 0x822042CC;
		  /* 822042CCh */ case    4:  		/* bl -730212 */
		/* 822042CCh case    4:*/		regs.LR = 0x822042D0; return 0x82151E68;
		/* 822042CCh case    4:*/		return 0x822042D0;
	}
	return 0x822042D0;
} // Block from 822042BCh-822042D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822042D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042D0);
		  /* 822042D0h */ case    0:  		/* li R4, 4801 */
		/* 822042D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822042D0h case    0:*/		return 0x822042D4;
		  /* 822042D4h */ case    1:  		/* mr R3, R31 */
		/* 822042D4h case    1:*/		regs.R3 = regs.R31;
		/* 822042D4h case    1:*/		return 0x822042D8;
		  /* 822042D8h */ case    2:  		/* bl -730224 */
		/* 822042D8h case    2:*/		regs.LR = 0x822042DC; return 0x82151E68;
		/* 822042D8h case    2:*/		return 0x822042DC;
	}
	return 0x822042DC;
} // Block from 822042D0h-822042DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822042DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042DC);
		  /* 822042DCh */ case    0:  		/* li R4, 4801 */
		/* 822042DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822042DCh case    0:*/		return 0x822042E0;
		  /* 822042E0h */ case    1:  		/* mr R3, R31 */
		/* 822042E0h case    1:*/		regs.R3 = regs.R31;
		/* 822042E0h case    1:*/		return 0x822042E4;
		  /* 822042E4h */ case    2:  		/* bl -730236 */
		/* 822042E4h case    2:*/		regs.LR = 0x822042E8; return 0x82151E68;
		/* 822042E4h case    2:*/		return 0x822042E8;
	}
	return 0x822042E8;
} // Block from 822042DCh-822042E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822042E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042E8);
		  /* 822042E8h */ case    0:  		/* li R4, 4801 */
		/* 822042E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822042E8h case    0:*/		return 0x822042EC;
		  /* 822042ECh */ case    1:  		/* mr R3, R31 */
		/* 822042ECh case    1:*/		regs.R3 = regs.R31;
		/* 822042ECh case    1:*/		return 0x822042F0;
		  /* 822042F0h */ case    2:  		/* bl -730248 */
		/* 822042F0h case    2:*/		regs.LR = 0x822042F4; return 0x82151E68;
		/* 822042F0h case    2:*/		return 0x822042F4;
	}
	return 0x822042F4;
} // Block from 822042E8h-822042F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822042F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822042F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822042F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822042F4);
		  /* 822042F4h */ case    0:  		/* li R4, 4801 */
		/* 822042F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822042F4h case    0:*/		return 0x822042F8;
		  /* 822042F8h */ case    1:  		/* mr R3, R31 */
		/* 822042F8h case    1:*/		regs.R3 = regs.R31;
		/* 822042F8h case    1:*/		return 0x822042FC;
		  /* 822042FCh */ case    2:  		/* bl -730260 */
		/* 822042FCh case    2:*/		regs.LR = 0x82204300; return 0x82151E68;
		/* 822042FCh case    2:*/		return 0x82204300;
	}
	return 0x82204300;
} // Block from 822042F4h-82204300h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204300);
		  /* 82204300h */ case    0:  		/* li R4, 4801 */
		/* 82204300h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204300h case    0:*/		return 0x82204304;
		  /* 82204304h */ case    1:  		/* mr R3, R31 */
		/* 82204304h case    1:*/		regs.R3 = regs.R31;
		/* 82204304h case    1:*/		return 0x82204308;
		  /* 82204308h */ case    2:  		/* bl -730272 */
		/* 82204308h case    2:*/		regs.LR = 0x8220430C; return 0x82151E68;
		/* 82204308h case    2:*/		return 0x8220430C;
	}
	return 0x8220430C;
} // Block from 82204300h-8220430Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220430Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220430C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220430C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220430C);
		  /* 8220430Ch */ case    0:  		/* li R4, 4801 */
		/* 8220430Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220430Ch case    0:*/		return 0x82204310;
		  /* 82204310h */ case    1:  		/* mr R3, R31 */
		/* 82204310h case    1:*/		regs.R3 = regs.R31;
		/* 82204310h case    1:*/		return 0x82204314;
		  /* 82204314h */ case    2:  		/* bl -730284 */
		/* 82204314h case    2:*/		regs.LR = 0x82204318; return 0x82151E68;
		/* 82204314h case    2:*/		return 0x82204318;
	}
	return 0x82204318;
} // Block from 8220430Ch-82204318h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204318);
		  /* 82204318h */ case    0:  		/* li R4, 4801 */
		/* 82204318h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204318h case    0:*/		return 0x8220431C;
		  /* 8220431Ch */ case    1:  		/* mr R3, R31 */
		/* 8220431Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220431Ch case    1:*/		return 0x82204320;
		  /* 82204320h */ case    2:  		/* bl -730296 */
		/* 82204320h case    2:*/		regs.LR = 0x82204324; return 0x82151E68;
		/* 82204320h case    2:*/		return 0x82204324;
	}
	return 0x82204324;
} // Block from 82204318h-82204324h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204324);
		  /* 82204324h */ case    0:  		/* li R4, 4800 */
		/* 82204324h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82204324h case    0:*/		return 0x82204328;
		  /* 82204328h */ case    1:  		/* mr R3, R31 */
		/* 82204328h case    1:*/		regs.R3 = regs.R31;
		/* 82204328h case    1:*/		return 0x8220432C;
		  /* 8220432Ch */ case    2:  		/* bl -730308 */
		/* 8220432Ch case    2:*/		regs.LR = 0x82204330; return 0x82151E68;
		/* 8220432Ch case    2:*/		return 0x82204330;
	}
	return 0x82204330;
} // Block from 82204324h-82204330h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204330);
		  /* 82204330h */ case    0:  		/* lis R11, -32252 */
		/* 82204330h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82204330h case    0:*/		return 0x82204334;
		  /* 82204334h */ case    1:  		/* li R4, 3500 */
		/* 82204334h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82204334h case    1:*/		return 0x82204338;
		  /* 82204338h */ case    2:  		/* addi R5, R11, -13340 */
		/* 82204338h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCBE4);
		/* 82204338h case    2:*/		return 0x8220433C;
		  /* 8220433Ch */ case    3:  		/* mr R3, R31 */
		/* 8220433Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220433Ch case    3:*/		return 0x82204340;
		  /* 82204340h */ case    4:  		/* bl -730328 */
		/* 82204340h case    4:*/		regs.LR = 0x82204344; return 0x82151E68;
		/* 82204340h case    4:*/		return 0x82204344;
	}
	return 0x82204344;
} // Block from 82204330h-82204344h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82204344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204344);
		  /* 82204344h */ case    0:  		/* lis R11, -32255 */
		/* 82204344h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82204344h case    0:*/		return 0x82204348;
		  /* 82204348h */ case    1:  		/* li R4, 3018 */
		/* 82204348h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xBCA);
		/* 82204348h case    1:*/		return 0x8220434C;
		  /* 8220434Ch */ case    2:  		/* addi R11, R11, 12500 */
		/* 8220434Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x30D4);
		/* 8220434Ch case    2:*/		return 0x82204350;
		  /* 82204350h */ case    3:  		/* mr R3, R31 */
		/* 82204350h case    3:*/		regs.R3 = regs.R31;
		/* 82204350h case    3:*/		return 0x82204354;
		  /* 82204354h */ case    4:  		/* lbzx R11, <#[R30 + R11]> */
		/* 82204354h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82204354h case    4:*/		return 0x82204358;
		  /* 82204358h */ case    5:  		/* extsb R5, R11 */
		/* 82204358h case    5:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82204358h case    5:*/		return 0x8220435C;
		  /* 8220435Ch */ case    6:  		/* bl -730356 */
		/* 8220435Ch case    6:*/		regs.LR = 0x82204360; return 0x82151E68;
		/* 8220435Ch case    6:*/		return 0x82204360;
	}
	return 0x82204360;
} // Block from 82204344h-82204360h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82204360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204360);
		  /* 82204360h */ case    0:  		/* li R4, 4801 */
		/* 82204360h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204360h case    0:*/		return 0x82204364;
		  /* 82204364h */ case    1:  		/* mr R3, R31 */
		/* 82204364h case    1:*/		regs.R3 = regs.R31;
		/* 82204364h case    1:*/		return 0x82204368;
		  /* 82204368h */ case    2:  		/* bl -730368 */
		/* 82204368h case    2:*/		regs.LR = 0x8220436C; return 0x82151E68;
		/* 82204368h case    2:*/		return 0x8220436C;
	}
	return 0x8220436C;
} // Block from 82204360h-8220436Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220436Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220436C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220436C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220436C);
		  /* 8220436Ch */ case    0:  		/* li R4, 4801 */
		/* 8220436Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220436Ch case    0:*/		return 0x82204370;
		  /* 82204370h */ case    1:  		/* bl -730376 */
		/* 82204370h case    1:*/		regs.LR = 0x82204374; return 0x82151E68;
		/* 82204370h case    1:*/		return 0x82204374;
	}
	return 0x82204374;
} // Block from 8220436Ch-82204374h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204374);
		  /* 82204374h */ case    0:  		/* li R4, 4801 */
		/* 82204374h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204374h case    0:*/		return 0x82204378;
		  /* 82204378h */ case    1:  		/* mr R3, R31 */
		/* 82204378h case    1:*/		regs.R3 = regs.R31;
		/* 82204378h case    1:*/		return 0x8220437C;
		  /* 8220437Ch */ case    2:  		/* bl -730388 */
		/* 8220437Ch case    2:*/		regs.LR = 0x82204380; return 0x82151E68;
		/* 8220437Ch case    2:*/		return 0x82204380;
	}
	return 0x82204380;
} // Block from 82204374h-82204380h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204380);
		  /* 82204380h */ case    0:  		/* li R4, 3637 */
		/* 82204380h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE35);
		/* 82204380h case    0:*/		return 0x82204384;
		  /* 82204384h */ case    1:  		/* mr R3, R31 */
		/* 82204384h case    1:*/		regs.R3 = regs.R31;
		/* 82204384h case    1:*/		return 0x82204388;
		  /* 82204388h */ case    2:  		/* bl -730400 */
		/* 82204388h case    2:*/		regs.LR = 0x8220438C; return 0x82151E68;
		/* 82204388h case    2:*/		return 0x8220438C;
	}
	return 0x8220438C;
} // Block from 82204380h-8220438Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220438Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220438C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220438C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220438C);
		  /* 8220438Ch */ case    0:  		/* li R4, 4801 */
		/* 8220438Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220438Ch case    0:*/		return 0x82204390;
		  /* 82204390h */ case    1:  		/* mr R3, R31 */
		/* 82204390h case    1:*/		regs.R3 = regs.R31;
		/* 82204390h case    1:*/		return 0x82204394;
		  /* 82204394h */ case    2:  		/* bl -730412 */
		/* 82204394h case    2:*/		regs.LR = 0x82204398; return 0x82151E68;
		/* 82204394h case    2:*/		return 0x82204398;
	}
	return 0x82204398;
} // Block from 8220438Ch-82204398h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204398);
		  /* 82204398h */ case    0:  		/* addi R5, R29, 1 */
		/* 82204398h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x1);
		/* 82204398h case    0:*/		return 0x8220439C;
		  /* 8220439Ch */ case    1:  		/* li R4, 3638 */
		/* 8220439Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE36);
		/* 8220439Ch case    1:*/		return 0x822043A0;
		  /* 822043A0h */ case    2:  		/* mr R3, R31 */
		/* 822043A0h case    2:*/		regs.R3 = regs.R31;
		/* 822043A0h case    2:*/		return 0x822043A4;
		  /* 822043A4h */ case    3:  		/* bl -730428 */
		/* 822043A4h case    3:*/		regs.LR = 0x822043A8; return 0x82151E68;
		/* 822043A4h case    3:*/		return 0x822043A8;
	}
	return 0x822043A8;
} // Block from 82204398h-822043A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822043A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043A8);
		  /* 822043A8h */ case    0:  		/* li R4, 4801 */
		/* 822043A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822043A8h case    0:*/		return 0x822043AC;
		  /* 822043ACh */ case    1:  		/* mr R3, R31 */
		/* 822043ACh case    1:*/		regs.R3 = regs.R31;
		/* 822043ACh case    1:*/		return 0x822043B0;
		  /* 822043B0h */ case    2:  		/* bl -730440 */
		/* 822043B0h case    2:*/		regs.LR = 0x822043B4; return 0x82151E68;
		/* 822043B0h case    2:*/		return 0x822043B4;
	}
	return 0x822043B4;
} // Block from 822043A8h-822043B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822043B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043B4);
		  /* 822043B4h */ case    0:  		/* li R4, 4801 */
		/* 822043B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822043B4h case    0:*/		return 0x822043B8;
		  /* 822043B8h */ case    1:  		/* mr R3, R31 */
		/* 822043B8h case    1:*/		regs.R3 = regs.R31;
		/* 822043B8h case    1:*/		return 0x822043BC;
		  /* 822043BCh */ case    2:  		/* bl -730452 */
		/* 822043BCh case    2:*/		regs.LR = 0x822043C0; return 0x82151E68;
		/* 822043BCh case    2:*/		return 0x822043C0;
	}
	return 0x822043C0;
} // Block from 822043B4h-822043C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822043C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043C0);
		  /* 822043C0h */ case    0:  		/* li R4, 4801 */
		/* 822043C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822043C0h case    0:*/		return 0x822043C4;
		  /* 822043C4h */ case    1:  		/* mr R3, R31 */
		/* 822043C4h case    1:*/		regs.R3 = regs.R31;
		/* 822043C4h case    1:*/		return 0x822043C8;
		  /* 822043C8h */ case    2:  		/* bl -730464 */
		/* 822043C8h case    2:*/		regs.LR = 0x822043CC; return 0x82151E68;
		/* 822043C8h case    2:*/		return 0x822043CC;
	}
	return 0x822043CC;
} // Block from 822043C0h-822043CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822043CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043CC);
		  /* 822043CCh */ case    0:  		/* li R4, 3553 */
		/* 822043CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDE1);
		/* 822043CCh case    0:*/		return 0x822043D0;
		  /* 822043D0h */ case    1:  		/* mr R3, R31 */
		/* 822043D0h case    1:*/		regs.R3 = regs.R31;
		/* 822043D0h case    1:*/		return 0x822043D4;
		  /* 822043D4h */ case    2:  		/* bl -730476 */
		/* 822043D4h case    2:*/		regs.LR = 0x822043D8; return 0x82151E68;
		/* 822043D4h case    2:*/		return 0x822043D8;
	}
	return 0x822043D8;
} // Block from 822043CCh-822043D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822043D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043D8);
		  /* 822043D8h */ case    0:  		/* lis R11, -32255 */
		/* 822043D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 822043D8h case    0:*/		return 0x822043DC;
		  /* 822043DCh */ case    1:  		/* li R4, 3546 */
		/* 822043DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDDA);
		/* 822043DCh case    1:*/		return 0x822043E0;
		  /* 822043E0h */ case    2:  		/* addi R5, R11, 12800 */
		/* 822043E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x3200);
		/* 822043E0h case    2:*/		return 0x822043E4;
		  /* 822043E4h */ case    3:  		/* mr R3, R31 */
		/* 822043E4h case    3:*/		regs.R3 = regs.R31;
		/* 822043E4h case    3:*/		return 0x822043E8;
		  /* 822043E8h */ case    4:  		/* bl -730496 */
		/* 822043E8h case    4:*/		regs.LR = 0x822043EC; return 0x82151E68;
		/* 822043E8h case    4:*/		return 0x822043EC;
	}
	return 0x822043EC;
} // Block from 822043D8h-822043ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822043ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043EC);
		  /* 822043ECh */ case    0:  		/* li R4, 3561 */
		/* 822043ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDE9);
		/* 822043ECh case    0:*/		return 0x822043F0;
		  /* 822043F0h */ case    1:  		/* mr R3, R31 */
		/* 822043F0h case    1:*/		regs.R3 = regs.R31;
		/* 822043F0h case    1:*/		return 0x822043F4;
		  /* 822043F4h */ case    2:  		/* bl -730508 */
		/* 822043F4h case    2:*/		regs.LR = 0x822043F8; return 0x82151E68;
		/* 822043F4h case    2:*/		return 0x822043F8;
	}
	return 0x822043F8;
} // Block from 822043ECh-822043F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822043F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822043F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822043F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822043F8);
		  /* 822043F8h */ case    0:  		/* li R4, 4801 */
		/* 822043F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822043F8h case    0:*/		return 0x822043FC;
		  /* 822043FCh */ case    1:  		/* mr R3, R31 */
		/* 822043FCh case    1:*/		regs.R3 = regs.R31;
		/* 822043FCh case    1:*/		return 0x82204400;
		  /* 82204400h */ case    2:  		/* bl -730520 */
		/* 82204400h case    2:*/		regs.LR = 0x82204404; return 0x82151E68;
		/* 82204400h case    2:*/		return 0x82204404;
	}
	return 0x82204404;
} // Block from 822043F8h-82204404h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204404);
		  /* 82204404h */ case    0:  		/* li R4, 4801 */
		/* 82204404h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204404h case    0:*/		return 0x82204408;
		  /* 82204408h */ case    1:  		/* mr R3, R31 */
		/* 82204408h case    1:*/		regs.R3 = regs.R31;
		/* 82204408h case    1:*/		return 0x8220440C;
		  /* 8220440Ch */ case    2:  		/* bl -730532 */
		/* 8220440Ch case    2:*/		regs.LR = 0x82204410; return 0x82151E68;
		/* 8220440Ch case    2:*/		return 0x82204410;
	}
	return 0x82204410;
} // Block from 82204404h-82204410h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204410);
		  /* 82204410h */ case    0:  		/* li R4, 3573 */
		/* 82204410h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDF5);
		/* 82204410h case    0:*/		return 0x82204414;
		  /* 82204414h */ case    1:  		/* mr R3, R31 */
		/* 82204414h case    1:*/		regs.R3 = regs.R31;
		/* 82204414h case    1:*/		return 0x82204418;
		  /* 82204418h */ case    2:  		/* bl -730544 */
		/* 82204418h case    2:*/		regs.LR = 0x8220441C; return 0x82151E68;
		/* 82204418h case    2:*/		return 0x8220441C;
	}
	return 0x8220441C;
} // Block from 82204410h-8220441Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220441Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220441C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220441C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220441C);
		  /* 8220441Ch */ case    0:  		/* li R4, 4801 */
		/* 8220441Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220441Ch case    0:*/		return 0x82204420;
		  /* 82204420h */ case    1:  		/* mr R3, R31 */
		/* 82204420h case    1:*/		regs.R3 = regs.R31;
		/* 82204420h case    1:*/		return 0x82204424;
		  /* 82204424h */ case    2:  		/* bl -730556 */
		/* 82204424h case    2:*/		regs.LR = 0x82204428; return 0x82151E68;
		/* 82204424h case    2:*/		return 0x82204428;
	}
	return 0x82204428;
} // Block from 8220441Ch-82204428h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204428);
		  /* 82204428h */ case    0:  		/* li R4, 4801 */
		/* 82204428h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204428h case    0:*/		return 0x8220442C;
		  /* 8220442Ch */ case    1:  		/* mr R3, R31 */
		/* 8220442Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220442Ch case    1:*/		return 0x82204430;
		  /* 82204430h */ case    2:  		/* bl -730568 */
		/* 82204430h case    2:*/		regs.LR = 0x82204434; return 0x82151E68;
		/* 82204430h case    2:*/		return 0x82204434;
	}
	return 0x82204434;
} // Block from 82204428h-82204434h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204434);
		  /* 82204434h */ case    0:  		/* li R4, 3574 */
		/* 82204434h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDF6);
		/* 82204434h case    0:*/		return 0x82204438;
		  /* 82204438h */ case    1:  		/* mr R3, R31 */
		/* 82204438h case    1:*/		regs.R3 = regs.R31;
		/* 82204438h case    1:*/		return 0x8220443C;
		  /* 8220443Ch */ case    2:  		/* bl -730580 */
		/* 8220443Ch case    2:*/		regs.LR = 0x82204440; return 0x82151E68;
		/* 8220443Ch case    2:*/		return 0x82204440;
	}
	return 0x82204440;
} // Block from 82204434h-82204440h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204440);
		  /* 82204440h */ case    0:  		/* li R4, 3576 */
		/* 82204440h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDF8);
		/* 82204440h case    0:*/		return 0x82204444;
		  /* 82204444h */ case    1:  		/* mr R3, R31 */
		/* 82204444h case    1:*/		regs.R3 = regs.R31;
		/* 82204444h case    1:*/		return 0x82204448;
		  /* 82204448h */ case    2:  		/* bl -730592 */
		/* 82204448h case    2:*/		regs.LR = 0x8220444C; return 0x82151E68;
		/* 82204448h case    2:*/		return 0x8220444C;
	}
	return 0x8220444C;
} // Block from 82204440h-8220444Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220444Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220444C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220444C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220444C);
		  /* 8220444Ch */ case    0:  		/* li R4, 3575 */
		/* 8220444Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDF7);
		/* 8220444Ch case    0:*/		return 0x82204450;
		  /* 82204450h */ case    1:  		/* mr R3, R31 */
		/* 82204450h case    1:*/		regs.R3 = regs.R31;
		/* 82204450h case    1:*/		return 0x82204454;
		  /* 82204454h */ case    2:  		/* bl -730604 */
		/* 82204454h case    2:*/		regs.LR = 0x82204458; return 0x82151E68;
		/* 82204454h case    2:*/		return 0x82204458;
	}
	return 0x82204458;
} // Block from 8220444Ch-82204458h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204458);
		  /* 82204458h */ case    0:  		/* lis R11, -32252 */
		/* 82204458h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82204458h case    0:*/		return 0x8220445C;
		  /* 8220445Ch */ case    1:  		/* li R4, 3500 */
		/* 8220445Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 8220445Ch case    1:*/		return 0x82204460;
		  /* 82204460h */ case    2:  		/* addi R5, R11, -13416 */
		/* 82204460h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCB98);
		/* 82204460h case    2:*/		return 0x82204464;
		  /* 82204464h */ case    3:  		/* bl -730620 */
		/* 82204464h case    3:*/		regs.LR = 0x82204468; return 0x82151E68;
		/* 82204464h case    3:*/		return 0x82204468;
	}
	return 0x82204468;
} // Block from 82204458h-82204468h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82204468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204468);
		  /* 82204468h */ case    0:  		/* li R4, 3597 */
		/* 82204468h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE0D);
		/* 82204468h case    0:*/		return 0x8220446C;
		  /* 8220446Ch */ case    1:  		/* mr R3, R31 */
		/* 8220446Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220446Ch case    1:*/		return 0x82204470;
		  /* 82204470h */ case    2:  		/* bl -730632 */
		/* 82204470h case    2:*/		regs.LR = 0x82204474; return 0x82151E68;
		/* 82204470h case    2:*/		return 0x82204474;
	}
	return 0x82204474;
} // Block from 82204468h-82204474h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204474);
		  /* 82204474h */ case    0:  		/* li R4, 4801 */
		/* 82204474h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204474h case    0:*/		return 0x82204478;
		  /* 82204478h */ case    1:  		/* mr R3, R31 */
		/* 82204478h case    1:*/		regs.R3 = regs.R31;
		/* 82204478h case    1:*/		return 0x8220447C;
		  /* 8220447Ch */ case    2:  		/* bl -730644 */
		/* 8220447Ch case    2:*/		regs.LR = 0x82204480; return 0x82151E68;
		/* 8220447Ch case    2:*/		return 0x82204480;
	}
	return 0x82204480;
} // Block from 82204474h-82204480h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204480);
		  /* 82204480h */ case    0:  		/* li R4, 4801 */
		/* 82204480h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204480h case    0:*/		return 0x82204484;
		  /* 82204484h */ case    1:  		/* mr R3, R31 */
		/* 82204484h case    1:*/		regs.R3 = regs.R31;
		/* 82204484h case    1:*/		return 0x82204488;
		  /* 82204488h */ case    2:  		/* bl -730656 */
		/* 82204488h case    2:*/		regs.LR = 0x8220448C; return 0x82151E68;
		/* 82204488h case    2:*/		return 0x8220448C;
	}
	return 0x8220448C;
} // Block from 82204480h-8220448Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220448Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220448C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220448C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220448C);
		  /* 8220448Ch */ case    0:  		/* li R4, 4801 */
		/* 8220448Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220448Ch case    0:*/		return 0x82204490;
		  /* 82204490h */ case    1:  		/* mr R3, R31 */
		/* 82204490h case    1:*/		regs.R3 = regs.R31;
		/* 82204490h case    1:*/		return 0x82204494;
		  /* 82204494h */ case    2:  		/* bl -730668 */
		/* 82204494h case    2:*/		regs.LR = 0x82204498; return 0x82151E68;
		/* 82204494h case    2:*/		return 0x82204498;
	}
	return 0x82204498;
} // Block from 8220448Ch-82204498h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204498);
		  /* 82204498h */ case    0:  		/* li R4, 3514 */
		/* 82204498h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82204498h case    0:*/		return 0x8220449C;
		  /* 8220449Ch */ case    1:  		/* mr R3, R31 */
		/* 8220449Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220449Ch case    1:*/		return 0x822044A0;
		  /* 822044A0h */ case    2:  		/* bl -730680 */
		/* 822044A0h case    2:*/		regs.LR = 0x822044A4; return 0x82151E68;
		/* 822044A0h case    2:*/		return 0x822044A4;
	}
	return 0x822044A4;
} // Block from 82204498h-822044A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044A4);
		  /* 822044A4h */ case    0:  		/* li R4, 4801 */
		/* 822044A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044A4h case    0:*/		return 0x822044A8;
		  /* 822044A8h */ case    1:  		/* mr R3, R31 */
		/* 822044A8h case    1:*/		regs.R3 = regs.R31;
		/* 822044A8h case    1:*/		return 0x822044AC;
		  /* 822044ACh */ case    2:  		/* bl -730692 */
		/* 822044ACh case    2:*/		regs.LR = 0x822044B0; return 0x82151E68;
		/* 822044ACh case    2:*/		return 0x822044B0;
	}
	return 0x822044B0;
} // Block from 822044A4h-822044B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044B0);
		  /* 822044B0h */ case    0:  		/* li R4, 4801 */
		/* 822044B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044B0h case    0:*/		return 0x822044B4;
		  /* 822044B4h */ case    1:  		/* mr R3, R31 */
		/* 822044B4h case    1:*/		regs.R3 = regs.R31;
		/* 822044B4h case    1:*/		return 0x822044B8;
		  /* 822044B8h */ case    2:  		/* bl -730704 */
		/* 822044B8h case    2:*/		regs.LR = 0x822044BC; return 0x82151E68;
		/* 822044B8h case    2:*/		return 0x822044BC;
	}
	return 0x822044BC;
} // Block from 822044B0h-822044BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044BC);
		  /* 822044BCh */ case    0:  		/* li R4, 4801 */
		/* 822044BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044BCh case    0:*/		return 0x822044C0;
		  /* 822044C0h */ case    1:  		/* mr R3, R31 */
		/* 822044C0h case    1:*/		regs.R3 = regs.R31;
		/* 822044C0h case    1:*/		return 0x822044C4;
		  /* 822044C4h */ case    2:  		/* bl -730716 */
		/* 822044C4h case    2:*/		regs.LR = 0x822044C8; return 0x82151E68;
		/* 822044C4h case    2:*/		return 0x822044C8;
	}
	return 0x822044C8;
} // Block from 822044BCh-822044C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044C8);
		  /* 822044C8h */ case    0:  		/* li R4, 4801 */
		/* 822044C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044C8h case    0:*/		return 0x822044CC;
		  /* 822044CCh */ case    1:  		/* mr R3, R31 */
		/* 822044CCh case    1:*/		regs.R3 = regs.R31;
		/* 822044CCh case    1:*/		return 0x822044D0;
		  /* 822044D0h */ case    2:  		/* bl -730728 */
		/* 822044D0h case    2:*/		regs.LR = 0x822044D4; return 0x82151E68;
		/* 822044D0h case    2:*/		return 0x822044D4;
	}
	return 0x822044D4;
} // Block from 822044C8h-822044D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044D4);
		  /* 822044D4h */ case    0:  		/* li R4, 4801 */
		/* 822044D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044D4h case    0:*/		return 0x822044D8;
		  /* 822044D8h */ case    1:  		/* mr R3, R31 */
		/* 822044D8h case    1:*/		regs.R3 = regs.R31;
		/* 822044D8h case    1:*/		return 0x822044DC;
		  /* 822044DCh */ case    2:  		/* bl -730740 */
		/* 822044DCh case    2:*/		regs.LR = 0x822044E0; return 0x82151E68;
		/* 822044DCh case    2:*/		return 0x822044E0;
	}
	return 0x822044E0;
} // Block from 822044D4h-822044E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044E0);
		  /* 822044E0h */ case    0:  		/* li R4, 4801 */
		/* 822044E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044E0h case    0:*/		return 0x822044E4;
		  /* 822044E4h */ case    1:  		/* mr R3, R31 */
		/* 822044E4h case    1:*/		regs.R3 = regs.R31;
		/* 822044E4h case    1:*/		return 0x822044E8;
		  /* 822044E8h */ case    2:  		/* bl -730752 */
		/* 822044E8h case    2:*/		regs.LR = 0x822044EC; return 0x82151E68;
		/* 822044E8h case    2:*/		return 0x822044EC;
	}
	return 0x822044EC;
} // Block from 822044E0h-822044ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044EC);
		  /* 822044ECh */ case    0:  		/* li R4, 4801 */
		/* 822044ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044ECh case    0:*/		return 0x822044F0;
		  /* 822044F0h */ case    1:  		/* mr R3, R31 */
		/* 822044F0h case    1:*/		regs.R3 = regs.R31;
		/* 822044F0h case    1:*/		return 0x822044F4;
		  /* 822044F4h */ case    2:  		/* bl -730764 */
		/* 822044F4h case    2:*/		regs.LR = 0x822044F8; return 0x82151E68;
		/* 822044F4h case    2:*/		return 0x822044F8;
	}
	return 0x822044F8;
} // Block from 822044ECh-822044F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822044F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822044F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822044F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822044F8);
		  /* 822044F8h */ case    0:  		/* li R4, 4801 */
		/* 822044F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822044F8h case    0:*/		return 0x822044FC;
		  /* 822044FCh */ case    1:  		/* mr R3, R31 */
		/* 822044FCh case    1:*/		regs.R3 = regs.R31;
		/* 822044FCh case    1:*/		return 0x82204500;
		  /* 82204500h */ case    2:  		/* bl -730776 */
		/* 82204500h case    2:*/		regs.LR = 0x82204504; return 0x82151E68;
		/* 82204500h case    2:*/		return 0x82204504;
	}
	return 0x82204504;
} // Block from 822044F8h-82204504h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204504);
		  /* 82204504h */ case    0:  		/* li R4, 4801 */
		/* 82204504h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204504h case    0:*/		return 0x82204508;
		  /* 82204508h */ case    1:  		/* mr R3, R31 */
		/* 82204508h case    1:*/		regs.R3 = regs.R31;
		/* 82204508h case    1:*/		return 0x8220450C;
		  /* 8220450Ch */ case    2:  		/* bl -730788 */
		/* 8220450Ch case    2:*/		regs.LR = 0x82204510; return 0x82151E68;
		/* 8220450Ch case    2:*/		return 0x82204510;
	}
	return 0x82204510;
} // Block from 82204504h-82204510h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204510);
		  /* 82204510h */ case    0:  		/* li R4, 4801 */
		/* 82204510h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204510h case    0:*/		return 0x82204514;
		  /* 82204514h */ case    1:  		/* mr R3, R31 */
		/* 82204514h case    1:*/		regs.R3 = regs.R31;
		/* 82204514h case    1:*/		return 0x82204518;
		  /* 82204518h */ case    2:  		/* bl -730800 */
		/* 82204518h case    2:*/		regs.LR = 0x8220451C; return 0x82151E68;
		/* 82204518h case    2:*/		return 0x8220451C;
	}
	return 0x8220451C;
} // Block from 82204510h-8220451Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220451Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220451C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220451C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220451C);
		  /* 8220451Ch */ case    0:  		/* li R4, 4800 */
		/* 8220451Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8220451Ch case    0:*/		return 0x82204520;
		  /* 82204520h */ case    1:  		/* mr R3, R31 */
		/* 82204520h case    1:*/		regs.R3 = regs.R31;
		/* 82204520h case    1:*/		return 0x82204524;
		  /* 82204524h */ case    2:  		/* bl -730812 */
		/* 82204524h case    2:*/		regs.LR = 0x82204528; return 0x82151E68;
		/* 82204524h case    2:*/		return 0x82204528;
	}
	return 0x82204528;
} // Block from 8220451Ch-82204528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204528);
		  /* 82204528h */ case    0:  		/* li R4, 4801 */
		/* 82204528h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204528h case    0:*/		return 0x8220452C;
		  /* 8220452Ch */ case    1:  		/* mr R3, R31 */
		/* 8220452Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220452Ch case    1:*/		return 0x82204530;
		  /* 82204530h */ case    2:  		/* bl -730824 */
		/* 82204530h case    2:*/		regs.LR = 0x82204534; return 0x82151E68;
		/* 82204530h case    2:*/		return 0x82204534;
	}
	return 0x82204534;
} // Block from 82204528h-82204534h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204534);
		  /* 82204534h */ case    0:  		/* li R4, 3504 */
		/* 82204534h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDB0);
		/* 82204534h case    0:*/		return 0x82204538;
		  /* 82204538h */ case    1:  		/* mr R3, R31 */
		/* 82204538h case    1:*/		regs.R3 = regs.R31;
		/* 82204538h case    1:*/		return 0x8220453C;
		  /* 8220453Ch */ case    2:  		/* bl -730836 */
		/* 8220453Ch case    2:*/		regs.LR = 0x82204540; return 0x82151E68;
		/* 8220453Ch case    2:*/		return 0x82204540;
	}
	return 0x82204540;
} // Block from 82204534h-82204540h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204540);
		  /* 82204540h */ case    0:  		/* li R4, 3514 */
		/* 82204540h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 82204540h case    0:*/		return 0x82204544;
		  /* 82204544h */ case    1:  		/* mr R3, R31 */
		/* 82204544h case    1:*/		regs.R3 = regs.R31;
		/* 82204544h case    1:*/		return 0x82204548;
		  /* 82204548h */ case    2:  		/* bl -730848 */
		/* 82204548h case    2:*/		regs.LR = 0x8220454C; return 0x82151E68;
		/* 82204548h case    2:*/		return 0x8220454C;
	}
	return 0x8220454C;
} // Block from 82204540h-8220454Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220454Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220454C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220454C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220454C);
		  /* 8220454Ch */ case    0:  		/* li R4, 4801 */
		/* 8220454Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220454Ch case    0:*/		return 0x82204550;
		  /* 82204550h */ case    1:  		/* mr R3, R31 */
		/* 82204550h case    1:*/		regs.R3 = regs.R31;
		/* 82204550h case    1:*/		return 0x82204554;
		  /* 82204554h */ case    2:  		/* bl -730860 */
		/* 82204554h case    2:*/		regs.LR = 0x82204558; return 0x82151E68;
		/* 82204554h case    2:*/		return 0x82204558;
	}
	return 0x82204558;
} // Block from 8220454Ch-82204558h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204558);
		  /* 82204558h */ case    0:  		/* li R4, 4801 */
		/* 82204558h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204558h case    0:*/		return 0x8220455C;
		  /* 8220455Ch */ case    1:  		/* mr R3, R31 */
		/* 8220455Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220455Ch case    1:*/		return 0x82204560;
		  /* 82204560h */ case    2:  		/* bl -730872 */
		/* 82204560h case    2:*/		regs.LR = 0x82204564; return 0x82151E68;
		/* 82204560h case    2:*/		return 0x82204564;
	}
	return 0x82204564;
} // Block from 82204558h-82204564h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204564);
		  /* 82204564h */ case    0:  		/* li R4, 4801 */
		/* 82204564h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204564h case    0:*/		return 0x82204568;
		  /* 82204568h */ case    1:  		/* mr R3, R31 */
		/* 82204568h case    1:*/		regs.R3 = regs.R31;
		/* 82204568h case    1:*/		return 0x8220456C;
		  /* 8220456Ch */ case    2:  		/* bl -730884 */
		/* 8220456Ch case    2:*/		regs.LR = 0x82204570; return 0x82151E68;
		/* 8220456Ch case    2:*/		return 0x82204570;
	}
	return 0x82204570;
} // Block from 82204564h-82204570h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204570);
		  /* 82204570h */ case    0:  		/* li R4, 4801 */
		/* 82204570h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204570h case    0:*/		return 0x82204574;
		  /* 82204574h */ case    1:  		/* mr R3, R31 */
		/* 82204574h case    1:*/		regs.R3 = regs.R31;
		/* 82204574h case    1:*/		return 0x82204578;
		  /* 82204578h */ case    2:  		/* bl -730896 */
		/* 82204578h case    2:*/		regs.LR = 0x8220457C; return 0x82151E68;
		/* 82204578h case    2:*/		return 0x8220457C;
	}
	return 0x8220457C;
} // Block from 82204570h-8220457Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220457Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220457C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220457C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220457C);
		  /* 8220457Ch */ case    0:  		/* li R4, 4801 */
		/* 8220457Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220457Ch case    0:*/		return 0x82204580;
		  /* 82204580h */ case    1:  		/* mr R3, R31 */
		/* 82204580h case    1:*/		regs.R3 = regs.R31;
		/* 82204580h case    1:*/		return 0x82204584;
		  /* 82204584h */ case    2:  		/* bl -730908 */
		/* 82204584h case    2:*/		regs.LR = 0x82204588; return 0x82151E68;
		/* 82204584h case    2:*/		return 0x82204588;
	}
	return 0x82204588;
} // Block from 8220457Ch-82204588h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204588);
		  /* 82204588h */ case    0:  		/* li R4, 4801 */
		/* 82204588h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204588h case    0:*/		return 0x8220458C;
		  /* 8220458Ch */ case    1:  		/* mr R3, R31 */
		/* 8220458Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220458Ch case    1:*/		return 0x82204590;
		  /* 82204590h */ case    2:  		/* bl -730920 */
		/* 82204590h case    2:*/		regs.LR = 0x82204594; return 0x82151E68;
		/* 82204590h case    2:*/		return 0x82204594;
	}
	return 0x82204594;
} // Block from 82204588h-82204594h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204594);
		  /* 82204594h */ case    0:  		/* lis R11, -32255 */
		/* 82204594h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82204594h case    0:*/		return 0x82204598;
		  /* 82204598h */ case    1:  		/* li R4, 4532 */
		/* 82204598h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x11B4);
		/* 82204598h case    1:*/		return 0x8220459C;
		  /* 8220459Ch */ case    2:  		/* addi R5, R11, 26496 */
		/* 8220459Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 8220459Ch case    2:*/		return 0x822045A0;
		  /* 822045A0h */ case    3:  		/* mr R3, R31 */
		/* 822045A0h case    3:*/		regs.R3 = regs.R31;
		/* 822045A0h case    3:*/		return 0x822045A4;
		  /* 822045A4h */ case    4:  		/* bl -730940 */
		/* 822045A4h case    4:*/		regs.LR = 0x822045A8; return 0x82151E68;
		/* 822045A4h case    4:*/		return 0x822045A8;
	}
	return 0x822045A8;
} // Block from 82204594h-822045A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822045A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045A8);
		  /* 822045A8h */ case    0:  		/* li R4, 4801 */
		/* 822045A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045A8h case    0:*/		return 0x822045AC;
		  /* 822045ACh */ case    1:  		/* mr R3, R31 */
		/* 822045ACh case    1:*/		regs.R3 = regs.R31;
		/* 822045ACh case    1:*/		return 0x822045B0;
		  /* 822045B0h */ case    2:  		/* bl -730952 */
		/* 822045B0h case    2:*/		regs.LR = 0x822045B4; return 0x82151E68;
		/* 822045B0h case    2:*/		return 0x822045B4;
	}
	return 0x822045B4;
} // Block from 822045A8h-822045B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822045B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045B4);
		  /* 822045B4h */ case    0:  		/* li R4, 4801 */
		/* 822045B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045B4h case    0:*/		return 0x822045B8;
		  /* 822045B8h */ case    1:  		/* mr R3, R31 */
		/* 822045B8h case    1:*/		regs.R3 = regs.R31;
		/* 822045B8h case    1:*/		return 0x822045BC;
		  /* 822045BCh */ case    2:  		/* bl -730964 */
		/* 822045BCh case    2:*/		regs.LR = 0x822045C0; return 0x82151E68;
		/* 822045BCh case    2:*/		return 0x822045C0;
	}
	return 0x822045C0;
} // Block from 822045B4h-822045C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822045C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045C0);
		  /* 822045C0h */ case    0:  		/* li R4, 4801 */
		/* 822045C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045C0h case    0:*/		return 0x822045C4;
		  /* 822045C4h */ case    1:  		/* mr R3, R31 */
		/* 822045C4h case    1:*/		regs.R3 = regs.R31;
		/* 822045C4h case    1:*/		return 0x822045C8;
		  /* 822045C8h */ case    2:  		/* bl -730976 */
		/* 822045C8h case    2:*/		regs.LR = 0x822045CC; return 0x82151E68;
		/* 822045C8h case    2:*/		return 0x822045CC;
	}
	return 0x822045CC;
} // Block from 822045C0h-822045CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822045CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045CC);
		  /* 822045CCh */ case    0:  		/* li R4, 4801 */
		/* 822045CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045CCh case    0:*/		return 0x822045D0;
		  /* 822045D0h */ case    1:  		/* bl -730984 */
		/* 822045D0h case    1:*/		regs.LR = 0x822045D4; return 0x82151E68;
		/* 822045D0h case    1:*/		return 0x822045D4;
	}
	return 0x822045D4;
} // Block from 822045CCh-822045D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822045D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045D4);
		  /* 822045D4h */ case    0:  		/* li R4, 4801 */
		/* 822045D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045D4h case    0:*/		return 0x822045D8;
		  /* 822045D8h */ case    1:  		/* bl -730992 */
		/* 822045D8h case    1:*/		regs.LR = 0x822045DC; return 0x82151E68;
		/* 822045D8h case    1:*/		return 0x822045DC;
	}
	return 0x822045DC;
} // Block from 822045D4h-822045DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822045DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045DC);
		  /* 822045DCh */ case    0:  		/* li R4, 3020 */
		/* 822045DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xBCC);
		/* 822045DCh case    0:*/		return 0x822045E0;
		  /* 822045E0h */ case    1:  		/* bl -731000 */
		/* 822045E0h case    1:*/		regs.LR = 0x822045E4; return 0x82151E68;
		/* 822045E0h case    1:*/		return 0x822045E4;
	}
	return 0x822045E4;
} // Block from 822045DCh-822045E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822045E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045E4);
		  /* 822045E4h */ case    0:  		/* li R4, 4801 */
		/* 822045E4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045E4h case    0:*/		return 0x822045E8;
		  /* 822045E8h */ case    1:  		/* mr R3, R31 */
		/* 822045E8h case    1:*/		regs.R3 = regs.R31;
		/* 822045E8h case    1:*/		return 0x822045EC;
		  /* 822045ECh */ case    2:  		/* bl -731012 */
		/* 822045ECh case    2:*/		regs.LR = 0x822045F0; return 0x82151E68;
		/* 822045ECh case    2:*/		return 0x822045F0;
	}
	return 0x822045F0;
} // Block from 822045E4h-822045F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822045F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045F0);
		  /* 822045F0h */ case    0:  		/* li R4, 3020 */
		/* 822045F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xBCC);
		/* 822045F0h case    0:*/		return 0x822045F4;
		  /* 822045F4h */ case    1:  		/* mr R3, R31 */
		/* 822045F4h case    1:*/		regs.R3 = regs.R31;
		/* 822045F4h case    1:*/		return 0x822045F8;
		  /* 822045F8h */ case    2:  		/* bl -731024 */
		/* 822045F8h case    2:*/		regs.LR = 0x822045FC; return 0x82151E68;
		/* 822045F8h case    2:*/		return 0x822045FC;
	}
	return 0x822045FC;
} // Block from 822045F0h-822045FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822045FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822045FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822045FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822045FC);
		  /* 822045FCh */ case    0:  		/* li R4, 4801 */
		/* 822045FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822045FCh case    0:*/		return 0x82204600;
		  /* 82204600h */ case    1:  		/* mr R3, R31 */
		/* 82204600h case    1:*/		regs.R3 = regs.R31;
		/* 82204600h case    1:*/		return 0x82204604;
		  /* 82204604h */ case    2:  		/* bl -731036 */
		/* 82204604h case    2:*/		regs.LR = 0x82204608; return 0x82151E68;
		/* 82204604h case    2:*/		return 0x82204608;
	}
	return 0x82204608;
} // Block from 822045FCh-82204608h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204608);
		  /* 82204608h */ case    0:  		/* li R4, 4801 */
		/* 82204608h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204608h case    0:*/		return 0x8220460C;
		  /* 8220460Ch */ case    1:  		/* mr R3, R31 */
		/* 8220460Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220460Ch case    1:*/		return 0x82204610;
		  /* 82204610h */ case    2:  		/* bl -731048 */
		/* 82204610h case    2:*/		regs.LR = 0x82204614; return 0x82151E68;
		/* 82204610h case    2:*/		return 0x82204614;
	}
	return 0x82204614;
} // Block from 82204608h-82204614h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204614);
		  /* 82204614h */ case    0:  		/* li R4, 4801 */
		/* 82204614h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204614h case    0:*/		return 0x82204618;
		  /* 82204618h */ case    1:  		/* mr R3, R31 */
		/* 82204618h case    1:*/		regs.R3 = regs.R31;
		/* 82204618h case    1:*/		return 0x8220461C;
		  /* 8220461Ch */ case    2:  		/* bl -731060 */
		/* 8220461Ch case    2:*/		regs.LR = 0x82204620; return 0x82151E68;
		/* 8220461Ch case    2:*/		return 0x82204620;
	}
	return 0x82204620;
} // Block from 82204614h-82204620h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204620);
		  /* 82204620h */ case    0:  		/* li R4, 4801 */
		/* 82204620h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204620h case    0:*/		return 0x82204624;
		  /* 82204624h */ case    1:  		/* mr R3, R31 */
		/* 82204624h case    1:*/		regs.R3 = regs.R31;
		/* 82204624h case    1:*/		return 0x82204628;
		  /* 82204628h */ case    2:  		/* bl -731072 */
		/* 82204628h case    2:*/		regs.LR = 0x8220462C; return 0x82151E68;
		/* 82204628h case    2:*/		return 0x8220462C;
	}
	return 0x8220462C;
} // Block from 82204620h-8220462Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220462Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220462C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220462C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220462C);
		  /* 8220462Ch */ case    0:  		/* li R4, 4801 */
		/* 8220462Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220462Ch case    0:*/		return 0x82204630;
		  /* 82204630h */ case    1:  		/* mr R3, R31 */
		/* 82204630h case    1:*/		regs.R3 = regs.R31;
		/* 82204630h case    1:*/		return 0x82204634;
		  /* 82204634h */ case    2:  		/* bl -731084 */
		/* 82204634h case    2:*/		regs.LR = 0x82204638; return 0x82151E68;
		/* 82204634h case    2:*/		return 0x82204638;
	}
	return 0x82204638;
} // Block from 8220462Ch-82204638h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204638);
		  /* 82204638h */ case    0:  		/* li R4, 4801 */
		/* 82204638h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204638h case    0:*/		return 0x8220463C;
		  /* 8220463Ch */ case    1:  		/* mr R3, R31 */
		/* 8220463Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220463Ch case    1:*/		return 0x82204640;
		  /* 82204640h */ case    2:  		/* bl -731096 */
		/* 82204640h case    2:*/		regs.LR = 0x82204644; return 0x82151E68;
		/* 82204640h case    2:*/		return 0x82204644;
	}
	return 0x82204644;
} // Block from 82204638h-82204644h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204644);
		  /* 82204644h */ case    0:  		/* li R4, 4801 */
		/* 82204644h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204644h case    0:*/		return 0x82204648;
		  /* 82204648h */ case    1:  		/* mr R3, R31 */
		/* 82204648h case    1:*/		regs.R3 = regs.R31;
		/* 82204648h case    1:*/		return 0x8220464C;
		  /* 8220464Ch */ case    2:  		/* bl -731108 */
		/* 8220464Ch case    2:*/		regs.LR = 0x82204650; return 0x82151E68;
		/* 8220464Ch case    2:*/		return 0x82204650;
	}
	return 0x82204650;
} // Block from 82204644h-82204650h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204650);
		  /* 82204650h */ case    0:  		/* li R4, 4801 */
		/* 82204650h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204650h case    0:*/		return 0x82204654;
		  /* 82204654h */ case    1:  		/* mr R3, R31 */
		/* 82204654h case    1:*/		regs.R3 = regs.R31;
		/* 82204654h case    1:*/		return 0x82204658;
		  /* 82204658h */ case    2:  		/* bl -731120 */
		/* 82204658h case    2:*/		regs.LR = 0x8220465C; return 0x82151E68;
		/* 82204658h case    2:*/		return 0x8220465C;
	}
	return 0x8220465C;
} // Block from 82204650h-8220465Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220465Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220465C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220465C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220465C);
		  /* 8220465Ch */ case    0:  		/* li R4, 4801 */
		/* 8220465Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220465Ch case    0:*/		return 0x82204660;
		  /* 82204660h */ case    1:  		/* mr R3, R31 */
		/* 82204660h case    1:*/		regs.R3 = regs.R31;
		/* 82204660h case    1:*/		return 0x82204664;
		  /* 82204664h */ case    2:  		/* bl -731132 */
		/* 82204664h case    2:*/		regs.LR = 0x82204668; return 0x82151E68;
		/* 82204664h case    2:*/		return 0x82204668;
	}
	return 0x82204668;
} // Block from 8220465Ch-82204668h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204668);
		  /* 82204668h */ case    0:  		/* li R4, 4801 */
		/* 82204668h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204668h case    0:*/		return 0x8220466C;
		  /* 8220466Ch */ case    1:  		/* mr R3, R31 */
		/* 8220466Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220466Ch case    1:*/		return 0x82204670;
		  /* 82204670h */ case    2:  		/* bl -731144 */
		/* 82204670h case    2:*/		regs.LR = 0x82204674; return 0x82151E68;
		/* 82204670h case    2:*/		return 0x82204674;
	}
	return 0x82204674;
} // Block from 82204668h-82204674h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204674);
		  /* 82204674h */ case    0:  		/* li R4, 4801 */
		/* 82204674h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204674h case    0:*/		return 0x82204678;
		  /* 82204678h */ case    1:  		/* mr R3, R31 */
		/* 82204678h case    1:*/		regs.R3 = regs.R31;
		/* 82204678h case    1:*/		return 0x8220467C;
		  /* 8220467Ch */ case    2:  		/* bl -731156 */
		/* 8220467Ch case    2:*/		regs.LR = 0x82204680; return 0x82151E68;
		/* 8220467Ch case    2:*/		return 0x82204680;
	}
	return 0x82204680;
} // Block from 82204674h-82204680h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204680);
		  /* 82204680h */ case    0:  		/* li R4, 4801 */
		/* 82204680h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204680h case    0:*/		return 0x82204684;
		  /* 82204684h */ case    1:  		/* mr R3, R31 */
		/* 82204684h case    1:*/		regs.R3 = regs.R31;
		/* 82204684h case    1:*/		return 0x82204688;
		  /* 82204688h */ case    2:  		/* bl -731168 */
		/* 82204688h case    2:*/		regs.LR = 0x8220468C; return 0x82151E68;
		/* 82204688h case    2:*/		return 0x8220468C;
	}
	return 0x8220468C;
} // Block from 82204680h-8220468Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220468Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220468C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220468C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220468C);
		  /* 8220468Ch */ case    0:  		/* li R4, 4801 */
		/* 8220468Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220468Ch case    0:*/		return 0x82204690;
		  /* 82204690h */ case    1:  		/* mr R3, R31 */
		/* 82204690h case    1:*/		regs.R3 = regs.R31;
		/* 82204690h case    1:*/		return 0x82204694;
		  /* 82204694h */ case    2:  		/* bl -731180 */
		/* 82204694h case    2:*/		regs.LR = 0x82204698; return 0x82151E68;
		/* 82204694h case    2:*/		return 0x82204698;
	}
	return 0x82204698;
} // Block from 8220468Ch-82204698h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204698);
		  /* 82204698h */ case    0:  		/* li R4, 4801 */
		/* 82204698h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204698h case    0:*/		return 0x8220469C;
		  /* 8220469Ch */ case    1:  		/* mr R3, R31 */
		/* 8220469Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220469Ch case    1:*/		return 0x822046A0;
		  /* 822046A0h */ case    2:  		/* bl -731192 */
		/* 822046A0h case    2:*/		regs.LR = 0x822046A4; return 0x82151E68;
		/* 822046A0h case    2:*/		return 0x822046A4;
	}
	return 0x822046A4;
} // Block from 82204698h-822046A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046A4);
		  /* 822046A4h */ case    0:  		/* li R4, 4801 */
		/* 822046A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046A4h case    0:*/		return 0x822046A8;
		  /* 822046A8h */ case    1:  		/* mr R3, R31 */
		/* 822046A8h case    1:*/		regs.R3 = regs.R31;
		/* 822046A8h case    1:*/		return 0x822046AC;
		  /* 822046ACh */ case    2:  		/* bl -731204 */
		/* 822046ACh case    2:*/		regs.LR = 0x822046B0; return 0x82151E68;
		/* 822046ACh case    2:*/		return 0x822046B0;
	}
	return 0x822046B0;
} // Block from 822046A4h-822046B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046B0);
		  /* 822046B0h */ case    0:  		/* li R4, 4801 */
		/* 822046B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046B0h case    0:*/		return 0x822046B4;
		  /* 822046B4h */ case    1:  		/* mr R3, R31 */
		/* 822046B4h case    1:*/		regs.R3 = regs.R31;
		/* 822046B4h case    1:*/		return 0x822046B8;
		  /* 822046B8h */ case    2:  		/* bl -731216 */
		/* 822046B8h case    2:*/		regs.LR = 0x822046BC; return 0x82151E68;
		/* 822046B8h case    2:*/		return 0x822046BC;
	}
	return 0x822046BC;
} // Block from 822046B0h-822046BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046BC);
		  /* 822046BCh */ case    0:  		/* li R4, 4801 */
		/* 822046BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046BCh case    0:*/		return 0x822046C0;
		  /* 822046C0h */ case    1:  		/* mr R3, R31 */
		/* 822046C0h case    1:*/		regs.R3 = regs.R31;
		/* 822046C0h case    1:*/		return 0x822046C4;
		  /* 822046C4h */ case    2:  		/* bl -731228 */
		/* 822046C4h case    2:*/		regs.LR = 0x822046C8; return 0x82151E68;
		/* 822046C4h case    2:*/		return 0x822046C8;
	}
	return 0x822046C8;
} // Block from 822046BCh-822046C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046C8);
		  /* 822046C8h */ case    0:  		/* li R4, 4801 */
		/* 822046C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046C8h case    0:*/		return 0x822046CC;
		  /* 822046CCh */ case    1:  		/* mr R3, R31 */
		/* 822046CCh case    1:*/		regs.R3 = regs.R31;
		/* 822046CCh case    1:*/		return 0x822046D0;
		  /* 822046D0h */ case    2:  		/* bl -731240 */
		/* 822046D0h case    2:*/		regs.LR = 0x822046D4; return 0x82151E68;
		/* 822046D0h case    2:*/		return 0x822046D4;
	}
	return 0x822046D4;
} // Block from 822046C8h-822046D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046D4);
		  /* 822046D4h */ case    0:  		/* li R4, 4801 */
		/* 822046D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046D4h case    0:*/		return 0x822046D8;
		  /* 822046D8h */ case    1:  		/* mr R3, R31 */
		/* 822046D8h case    1:*/		regs.R3 = regs.R31;
		/* 822046D8h case    1:*/		return 0x822046DC;
		  /* 822046DCh */ case    2:  		/* bl -731252 */
		/* 822046DCh case    2:*/		regs.LR = 0x822046E0; return 0x82151E68;
		/* 822046DCh case    2:*/		return 0x822046E0;
	}
	return 0x822046E0;
} // Block from 822046D4h-822046E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046E0);
		  /* 822046E0h */ case    0:  		/* li R4, 4801 */
		/* 822046E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046E0h case    0:*/		return 0x822046E4;
		  /* 822046E4h */ case    1:  		/* mr R3, R31 */
		/* 822046E4h case    1:*/		regs.R3 = regs.R31;
		/* 822046E4h case    1:*/		return 0x822046E8;
		  /* 822046E8h */ case    2:  		/* bl -731264 */
		/* 822046E8h case    2:*/		regs.LR = 0x822046EC; return 0x82151E68;
		/* 822046E8h case    2:*/		return 0x822046EC;
	}
	return 0x822046EC;
} // Block from 822046E0h-822046ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046EC);
		  /* 822046ECh */ case    0:  		/* li R4, 4801 */
		/* 822046ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046ECh case    0:*/		return 0x822046F0;
		  /* 822046F0h */ case    1:  		/* mr R3, R31 */
		/* 822046F0h case    1:*/		regs.R3 = regs.R31;
		/* 822046F0h case    1:*/		return 0x822046F4;
		  /* 822046F4h */ case    2:  		/* bl -731276 */
		/* 822046F4h case    2:*/		regs.LR = 0x822046F8; return 0x82151E68;
		/* 822046F4h case    2:*/		return 0x822046F8;
	}
	return 0x822046F8;
} // Block from 822046ECh-822046F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822046F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822046F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822046F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822046F8);
		  /* 822046F8h */ case    0:  		/* li R4, 4801 */
		/* 822046F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822046F8h case    0:*/		return 0x822046FC;
		  /* 822046FCh */ case    1:  		/* mr R3, R31 */
		/* 822046FCh case    1:*/		regs.R3 = regs.R31;
		/* 822046FCh case    1:*/		return 0x82204700;
		  /* 82204700h */ case    2:  		/* bl -731288 */
		/* 82204700h case    2:*/		regs.LR = 0x82204704; return 0x82151E68;
		/* 82204700h case    2:*/		return 0x82204704;
	}
	return 0x82204704;
} // Block from 822046F8h-82204704h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204704);
		  /* 82204704h */ case    0:  		/* li R4, 4801 */
		/* 82204704h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204704h case    0:*/		return 0x82204708;
		  /* 82204708h */ case    1:  		/* mr R3, R31 */
		/* 82204708h case    1:*/		regs.R3 = regs.R31;
		/* 82204708h case    1:*/		return 0x8220470C;
		  /* 8220470Ch */ case    2:  		/* bl -731300 */
		/* 8220470Ch case    2:*/		regs.LR = 0x82204710; return 0x82151E68;
		/* 8220470Ch case    2:*/		return 0x82204710;
	}
	return 0x82204710;
} // Block from 82204704h-82204710h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204710);
		  /* 82204710h */ case    0:  		/* li R4, 4801 */
		/* 82204710h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204710h case    0:*/		return 0x82204714;
		  /* 82204714h */ case    1:  		/* bl -731308 */
		/* 82204714h case    1:*/		regs.LR = 0x82204718; return 0x82151E68;
		/* 82204714h case    1:*/		return 0x82204718;
	}
	return 0x82204718;
} // Block from 82204710h-82204718h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204718);
		  /* 82204718h */ case    0:  		/* li R4, 4801 */
		/* 82204718h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204718h case    0:*/		return 0x8220471C;
		  /* 8220471Ch */ case    1:  		/* bl -731316 */
		/* 8220471Ch case    1:*/		regs.LR = 0x82204720; return 0x82151E68;
		/* 8220471Ch case    1:*/		return 0x82204720;
	}
	return 0x82204720;
} // Block from 82204718h-82204720h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204720);
		  /* 82204720h */ case    0:  		/* li R4, 4801 */
		/* 82204720h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204720h case    0:*/		return 0x82204724;
		  /* 82204724h */ case    1:  		/* mr R3, R31 */
		/* 82204724h case    1:*/		regs.R3 = regs.R31;
		/* 82204724h case    1:*/		return 0x82204728;
		  /* 82204728h */ case    2:  		/* bl -731328 */
		/* 82204728h case    2:*/		regs.LR = 0x8220472C; return 0x82151E68;
		/* 82204728h case    2:*/		return 0x8220472C;
	}
	return 0x8220472C;
} // Block from 82204720h-8220472Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220472Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220472C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220472C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220472C);
		  /* 8220472Ch */ case    0:  		/* li R4, 4801 */
		/* 8220472Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220472Ch case    0:*/		return 0x82204730;
		  /* 82204730h */ case    1:  		/* mr R3, R31 */
		/* 82204730h case    1:*/		regs.R3 = regs.R31;
		/* 82204730h case    1:*/		return 0x82204734;
		  /* 82204734h */ case    2:  		/* bl -731340 */
		/* 82204734h case    2:*/		regs.LR = 0x82204738; return 0x82151E68;
		/* 82204734h case    2:*/		return 0x82204738;
	}
	return 0x82204738;
} // Block from 8220472Ch-82204738h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204738);
		  /* 82204738h */ case    0:  		/* li R4, 4801 */
		/* 82204738h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204738h case    0:*/		return 0x8220473C;
		  /* 8220473Ch */ case    1:  		/* bl -731348 */
		/* 8220473Ch case    1:*/		regs.LR = 0x82204740; return 0x82151E68;
		/* 8220473Ch case    1:*/		return 0x82204740;
	}
	return 0x82204740;
} // Block from 82204738h-82204740h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204740);
		  /* 82204740h */ case    0:  		/* li R4, 4801 */
		/* 82204740h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204740h case    0:*/		return 0x82204744;
		  /* 82204744h */ case    1:  		/* bl -731356 */
		/* 82204744h case    1:*/		regs.LR = 0x82204748; return 0x82151E68;
		/* 82204744h case    1:*/		return 0x82204748;
	}
	return 0x82204748;
} // Block from 82204740h-82204748h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204748);
		  /* 82204748h */ case    0:  		/* li R4, 4801 */
		/* 82204748h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204748h case    0:*/		return 0x8220474C;
		  /* 8220474Ch */ case    1:  		/* mr R3, R31 */
		/* 8220474Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220474Ch case    1:*/		return 0x82204750;
		  /* 82204750h */ case    2:  		/* bl -731368 */
		/* 82204750h case    2:*/		regs.LR = 0x82204754; return 0x82151E68;
		/* 82204750h case    2:*/		return 0x82204754;
	}
	return 0x82204754;
} // Block from 82204748h-82204754h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204754);
		  /* 82204754h */ case    0:  		/* li R4, 4801 */
		/* 82204754h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204754h case    0:*/		return 0x82204758;
		  /* 82204758h */ case    1:  		/* mr R3, R31 */
		/* 82204758h case    1:*/		regs.R3 = regs.R31;
		/* 82204758h case    1:*/		return 0x8220475C;
		  /* 8220475Ch */ case    2:  		/* bl -731380 */
		/* 8220475Ch case    2:*/		regs.LR = 0x82204760; return 0x82151E68;
		/* 8220475Ch case    2:*/		return 0x82204760;
	}
	return 0x82204760;
} // Block from 82204754h-82204760h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204760);
		  /* 82204760h */ case    0:  		/* li R4, 4801 */
		/* 82204760h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204760h case    0:*/		return 0x82204764;
		  /* 82204764h */ case    1:  		/* mr R3, R31 */
		/* 82204764h case    1:*/		regs.R3 = regs.R31;
		/* 82204764h case    1:*/		return 0x82204768;
		  /* 82204768h */ case    2:  		/* bl -731392 */
		/* 82204768h case    2:*/		regs.LR = 0x8220476C; return 0x82151E68;
		/* 82204768h case    2:*/		return 0x8220476C;
	}
	return 0x8220476C;
} // Block from 82204760h-8220476Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220476Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220476C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220476C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220476C);
		  /* 8220476Ch */ case    0:  		/* li R4, 4801 */
		/* 8220476Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220476Ch case    0:*/		return 0x82204770;
		  /* 82204770h */ case    1:  		/* mr R3, R31 */
		/* 82204770h case    1:*/		regs.R3 = regs.R31;
		/* 82204770h case    1:*/		return 0x82204774;
		  /* 82204774h */ case    2:  		/* bl -731404 */
		/* 82204774h case    2:*/		regs.LR = 0x82204778; return 0x82151E68;
		/* 82204774h case    2:*/		return 0x82204778;
	}
	return 0x82204778;
} // Block from 8220476Ch-82204778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204778);
		  /* 82204778h */ case    0:  		/* li R4, 4801 */
		/* 82204778h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204778h case    0:*/		return 0x8220477C;
		  /* 8220477Ch */ case    1:  		/* mr R3, R31 */
		/* 8220477Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220477Ch case    1:*/		return 0x82204780;
		  /* 82204780h */ case    2:  		/* bl -731416 */
		/* 82204780h case    2:*/		regs.LR = 0x82204784; return 0x82151E68;
		/* 82204780h case    2:*/		return 0x82204784;
	}
	return 0x82204784;
} // Block from 82204778h-82204784h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204784);
		  /* 82204784h */ case    0:  		/* li R4, 4801 */
		/* 82204784h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204784h case    0:*/		return 0x82204788;
		  /* 82204788h */ case    1:  		/* mr R3, R31 */
		/* 82204788h case    1:*/		regs.R3 = regs.R31;
		/* 82204788h case    1:*/		return 0x8220478C;
		  /* 8220478Ch */ case    2:  		/* bl -731428 */
		/* 8220478Ch case    2:*/		regs.LR = 0x82204790; return 0x82151E68;
		/* 8220478Ch case    2:*/		return 0x82204790;
	}
	return 0x82204790;
} // Block from 82204784h-82204790h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204790);
		  /* 82204790h */ case    0:  		/* li R4, 4801 */
		/* 82204790h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204790h case    0:*/		return 0x82204794;
		  /* 82204794h */ case    1:  		/* mr R3, R31 */
		/* 82204794h case    1:*/		regs.R3 = regs.R31;
		/* 82204794h case    1:*/		return 0x82204798;
		  /* 82204798h */ case    2:  		/* bl -731440 */
		/* 82204798h case    2:*/		regs.LR = 0x8220479C; return 0x82151E68;
		/* 82204798h case    2:*/		return 0x8220479C;
	}
	return 0x8220479C;
} // Block from 82204790h-8220479Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220479Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220479C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220479C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220479C);
		  /* 8220479Ch */ case    0:  		/* li R4, 4801 */
		/* 8220479Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220479Ch case    0:*/		return 0x822047A0;
		  /* 822047A0h */ case    1:  		/* mr R3, R31 */
		/* 822047A0h case    1:*/		regs.R3 = regs.R31;
		/* 822047A0h case    1:*/		return 0x822047A4;
		  /* 822047A4h */ case    2:  		/* bl -731452 */
		/* 822047A4h case    2:*/		regs.LR = 0x822047A8; return 0x82151E68;
		/* 822047A4h case    2:*/		return 0x822047A8;
	}
	return 0x822047A8;
} // Block from 8220479Ch-822047A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822047A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822047A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822047A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822047A8);
		  /* 822047A8h */ case    0:  		/* li R4, 4801 */
		/* 822047A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822047A8h case    0:*/		return 0x822047AC;
		  /* 822047ACh */ case    1:  		/* mr R3, R31 */
		/* 822047ACh case    1:*/		regs.R3 = regs.R31;
		/* 822047ACh case    1:*/		return 0x822047B0;
		  /* 822047B0h */ case    2:  		/* bl -731464 */
		/* 822047B0h case    2:*/		regs.LR = 0x822047B4; return 0x82151E68;
		/* 822047B0h case    2:*/		return 0x822047B4;
	}
	return 0x822047B4;
} // Block from 822047A8h-822047B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822047B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822047B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822047B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822047B4);
		  /* 822047B4h */ case    0:  		/* li R4, 4801 */
		/* 822047B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822047B4h case    0:*/		return 0x822047B8;
		  /* 822047B8h */ case    1:  		/* mr R3, R31 */
		/* 822047B8h case    1:*/		regs.R3 = regs.R31;
		/* 822047B8h case    1:*/		return 0x822047BC;
		  /* 822047BCh */ case    2:  		/* bl -731476 */
		/* 822047BCh case    2:*/		regs.LR = 0x822047C0; return 0x82151E68;
		/* 822047BCh case    2:*/		return 0x822047C0;
	}
	return 0x822047C0;
} // Block from 822047B4h-822047C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822047C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822047C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822047C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822047C0);
		  /* 822047C0h */ case    0:  		/* li R4, 4801 */
		/* 822047C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822047C0h case    0:*/		return 0x822047C4;
		  /* 822047C4h */ case    1:  		/* mr R3, R31 */
		/* 822047C4h case    1:*/		regs.R3 = regs.R31;
		/* 822047C4h case    1:*/		return 0x822047C8;
		  /* 822047C8h */ case    2:  		/* bl -731488 */
		/* 822047C8h case    2:*/		regs.LR = 0x822047CC; return 0x82151E68;
		/* 822047C8h case    2:*/		return 0x822047CC;
	}
	return 0x822047CC;
} // Block from 822047C0h-822047CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822047CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822047CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822047CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822047CC);
		  /* 822047CCh */ case    0:  		/* li R4, 4801 */
		/* 822047CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822047CCh case    0:*/		return 0x822047D0;
		  /* 822047D0h */ case    1:  		/* mr R3, R31 */
		/* 822047D0h case    1:*/		regs.R3 = regs.R31;
		/* 822047D0h case    1:*/		return 0x822047D4;
		  /* 822047D4h */ case    2:  		/* bl -731500 */
		/* 822047D4h case    2:*/		regs.LR = 0x822047D8; return 0x82151E68;
		/* 822047D4h case    2:*/		return 0x822047D8;
	}
	return 0x822047D8;
} // Block from 822047CCh-822047D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822047D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822047D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822047D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822047D8);
		  /* 822047D8h */ case    0:  		/* lis R11, -32255 */
		/* 822047D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 822047D8h case    0:*/		return 0x822047DC;
		  /* 822047DCh */ case    1:  		/* li R4, 4532 */
		/* 822047DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x11B4);
		/* 822047DCh case    1:*/		return 0x822047E0;
		  /* 822047E0h */ case    2:  		/* addi R5, R11, 26496 */
		/* 822047E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 822047E0h case    2:*/		return 0x822047E4;
		  /* 822047E4h */ case    3:  		/* mr R3, R31 */
		/* 822047E4h case    3:*/		regs.R3 = regs.R31;
		/* 822047E4h case    3:*/		return 0x822047E8;
		  /* 822047E8h */ case    4:  		/* bl -731520 */
		/* 822047E8h case    4:*/		regs.LR = 0x822047EC; return 0x82151E68;
		/* 822047E8h case    4:*/		return 0x822047EC;
	}
	return 0x822047EC;
} // Block from 822047D8h-822047ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822047ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822047EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822047EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822047EC);
		  /* 822047ECh */ case    0:  		/* lis R11, -32255 */
		/* 822047ECh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 822047ECh case    0:*/		return 0x822047F0;
		  /* 822047F0h */ case    1:  		/* li R4, 4532 */
		/* 822047F0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x11B4);
		/* 822047F0h case    1:*/		return 0x822047F4;
		  /* 822047F4h */ case    2:  		/* addi R5, R11, 26496 */
		/* 822047F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 822047F4h case    2:*/		return 0x822047F8;
		  /* 822047F8h */ case    3:  		/* mr R3, R31 */
		/* 822047F8h case    3:*/		regs.R3 = regs.R31;
		/* 822047F8h case    3:*/		return 0x822047FC;
		  /* 822047FCh */ case    4:  		/* bl -731540 */
		/* 822047FCh case    4:*/		regs.LR = 0x82204800; return 0x82151E68;
		/* 822047FCh case    4:*/		return 0x82204800;
	}
	return 0x82204800;
} // Block from 822047ECh-82204800h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82204800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204800);
		  /* 82204800h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82204800h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82204800h case    0:*/		return 0x82204804;
		  /* 82204804h */ case    1:  		/* lis R10, -1 */
		/* 82204804h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82204804h case    1:*/		return 0x82204808;
		  /* 82204808h */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82204808h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82204808h case    2:*/		return 0x8220480C;
		  /* 8220480Ch */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8220480Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8220480Ch case    3:*/		return 0x82204810;
		  /* 82204810h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 82204810h case    4:*/		if ( regs.CR[6].eq ) { return 0x82204820;  }
		/* 82204810h case    4:*/		return 0x82204814;
		  /* 82204814h */ case    5:  		/* lis R11, -32255 */
		/* 82204814h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82204814h case    5:*/		return 0x82204818;
		  /* 82204818h */ case    6:  		/* addi R5, R11, 26496 */
		/* 82204818h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 82204818h case    6:*/		return 0x8220481C;
		  /* 8220481Ch */ case    7:  		/* b 12 */
		/* 8220481Ch case    7:*/		return 0x82204828;
		/* 8220481Ch case    7:*/		return 0x82204820;
	}
	return 0x82204820;
} // Block from 82204800h-82204820h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82204820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204820);
		  /* 82204820h */ case    0:  		/* lis R11, -32255 */
		/* 82204820h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82204820h case    0:*/		return 0x82204824;
		  /* 82204824h */ case    1:  		/* addi R5, R11, 26488 */
		/* 82204824h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6778);
		/* 82204824h case    1:*/		return 0x82204828;
	}
	return 0x82204828;
} // Block from 82204820h-82204828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204828);
		  /* 82204828h */ case    0:  		/* li R4, 4532 */
		/* 82204828h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x11B4);
		/* 82204828h case    0:*/		return 0x8220482C;
		  /* 8220482Ch */ case    1:  		/* mr R3, R31 */
		/* 8220482Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220482Ch case    1:*/		return 0x82204830;
		  /* 82204830h */ case    2:  		/* bl -731592 */
		/* 82204830h case    2:*/		regs.LR = 0x82204834; return 0x82151E68;
		/* 82204830h case    2:*/		return 0x82204834;
	}
	return 0x82204834;
} // Block from 82204828h-82204834h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204834);
		  /* 82204834h */ case    0:  		/* li R4, 4800 */
		/* 82204834h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82204834h case    0:*/		return 0x82204838;
		  /* 82204838h */ case    1:  		/* bl -731600 */
		/* 82204838h case    1:*/		regs.LR = 0x8220483C; return 0x82151E68;
		/* 82204838h case    1:*/		return 0x8220483C;
	}
	return 0x8220483C;
} // Block from 82204834h-8220483Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220483Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220483C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220483C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220483C);
		  /* 8220483Ch */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 8220483Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8220483Ch case    0:*/		return 0x82204840;
		  /* 82204840h */ case    1:  		/* lis R10, -1 */
		/* 82204840h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82204840h case    1:*/		return 0x82204844;
		  /* 82204844h */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82204844h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82204844h case    2:*/		return 0x82204848;
		  /* 82204848h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82204848h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204848h case    3:*/		return 0x8220484C;
		  /* 8220484Ch */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8220484Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8220485C;  }
		/* 8220484Ch case    4:*/		return 0x82204850;
		  /* 82204850h */ case    5:  		/* lis R11, -32255 */
		/* 82204850h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82204850h case    5:*/		return 0x82204854;
		  /* 82204854h */ case    6:  		/* addi R5, R11, 26496 */
		/* 82204854h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 82204854h case    6:*/		return 0x82204858;
		  /* 82204858h */ case    7:  		/* b 12 */
		/* 82204858h case    7:*/		return 0x82204864;
		/* 82204858h case    7:*/		return 0x8220485C;
	}
	return 0x8220485C;
} // Block from 8220483Ch-8220485Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220485Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220485C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220485C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220485C);
		  /* 8220485Ch */ case    0:  		/* lis R11, -32255 */
		/* 8220485Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8220485Ch case    0:*/		return 0x82204860;
		  /* 82204860h */ case    1:  		/* addi R5, R11, 26488 */
		/* 82204860h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6778);
		/* 82204860h case    1:*/		return 0x82204864;
	}
	return 0x82204864;
} // Block from 8220485Ch-82204864h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204864);
		  /* 82204864h */ case    0:  		/* li R4, 4532 */
		/* 82204864h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x11B4);
		/* 82204864h case    0:*/		return 0x82204868;
		  /* 82204868h */ case    1:  		/* mr R3, R31 */
		/* 82204868h case    1:*/		regs.R3 = regs.R31;
		/* 82204868h case    1:*/		return 0x8220486C;
		  /* 8220486Ch */ case    2:  		/* bl -731652 */
		/* 8220486Ch case    2:*/		regs.LR = 0x82204870; return 0x82151E68;
		/* 8220486Ch case    2:*/		return 0x82204870;
	}
	return 0x82204870;
} // Block from 82204864h-82204870h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204870);
		  /* 82204870h */ case    0:  		/* li R4, 4801 */
		/* 82204870h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204870h case    0:*/		return 0x82204874;
		  /* 82204874h */ case    1:  		/* bl -731660 */
		/* 82204874h case    1:*/		regs.LR = 0x82204878; return 0x82151E68;
		/* 82204874h case    1:*/		return 0x82204878;
	}
	return 0x82204878;
} // Block from 82204870h-82204878h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204878);
		  /* 82204878h */ case    0:  		/* li R4, 4801 */
		/* 82204878h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204878h case    0:*/		return 0x8220487C;
		  /* 8220487Ch */ case    1:  		/* mr R3, R31 */
		/* 8220487Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220487Ch case    1:*/		return 0x82204880;
		  /* 82204880h */ case    2:  		/* bl -731672 */
		/* 82204880h case    2:*/		regs.LR = 0x82204884; return 0x82151E68;
		/* 82204880h case    2:*/		return 0x82204884;
	}
	return 0x82204884;
} // Block from 82204878h-82204884h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204884);
		  /* 82204884h */ case    0:  		/* lis R11, -32252 */
		/* 82204884h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82204884h case    0:*/		return 0x82204888;
		  /* 82204888h */ case    1:  		/* li R4, 3500 */
		/* 82204888h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82204888h case    1:*/		return 0x8220488C;
		  /* 8220488Ch */ case    2:  		/* addi R5, R11, -13472 */
		/* 8220488Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCB60);
		/* 8220488Ch case    2:*/		return 0x82204890;
		  /* 82204890h */ case    3:  		/* mr R3, R31 */
		/* 82204890h case    3:*/		regs.R3 = regs.R31;
		/* 82204890h case    3:*/		return 0x82204894;
		  /* 82204894h */ case    4:  		/* bl -731692 */
		/* 82204894h case    4:*/		regs.LR = 0x82204898; return 0x82151E68;
		/* 82204894h case    4:*/		return 0x82204898;
	}
	return 0x82204898;
} // Block from 82204884h-82204898h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82204898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204898);
		  /* 82204898h */ case    0:  		/* lis R11, -32252 */
		/* 82204898h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82204898h case    0:*/		return 0x8220489C;
		  /* 8220489Ch */ case    1:  		/* li R4, 3500 */
		/* 8220489Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 8220489Ch case    1:*/		return 0x822048A0;
		  /* 822048A0h */ case    2:  		/* addi R5, R11, -13448 */
		/* 822048A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCB78);
		/* 822048A0h case    2:*/		return 0x822048A4;
		  /* 822048A4h */ case    3:  		/* mr R3, R31 */
		/* 822048A4h case    3:*/		regs.R3 = regs.R31;
		/* 822048A4h case    3:*/		return 0x822048A8;
		  /* 822048A8h */ case    4:  		/* bl -731712 */
		/* 822048A8h case    4:*/		regs.LR = 0x822048AC; return 0x82151E68;
		/* 822048A8h case    4:*/		return 0x822048AC;
	}
	return 0x822048AC;
} // Block from 82204898h-822048ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822048ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048AC);
		  /* 822048ACh */ case    0:  		/* li R4, 4801 */
		/* 822048ACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822048ACh case    0:*/		return 0x822048B0;
		  /* 822048B0h */ case    1:  		/* mr R3, R31 */
		/* 822048B0h case    1:*/		regs.R3 = regs.R31;
		/* 822048B0h case    1:*/		return 0x822048B4;
		  /* 822048B4h */ case    2:  		/* bl -731724 */
		/* 822048B4h case    2:*/		regs.LR = 0x822048B8; return 0x82151E68;
		/* 822048B4h case    2:*/		return 0x822048B8;
	}
	return 0x822048B8;
} // Block from 822048ACh-822048B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822048B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048B8);
		  /* 822048B8h */ case    0:  		/* li R4, 4800 */
		/* 822048B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 822048B8h case    0:*/		return 0x822048BC;
		  /* 822048BCh */ case    1:  		/* mr R3, R31 */
		/* 822048BCh case    1:*/		regs.R3 = regs.R31;
		/* 822048BCh case    1:*/		return 0x822048C0;
		  /* 822048C0h */ case    2:  		/* bl -731736 */
		/* 822048C0h case    2:*/		regs.LR = 0x822048C4; return 0x82151E68;
		/* 822048C0h case    2:*/		return 0x822048C4;
	}
	return 0x822048C4;
} // Block from 822048B8h-822048C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822048C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048C4);
		  /* 822048C4h */ case    0:  		/* li R4, 4801 */
		/* 822048C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822048C4h case    0:*/		return 0x822048C8;
		  /* 822048C8h */ case    1:  		/* mr R3, R31 */
		/* 822048C8h case    1:*/		regs.R3 = regs.R31;
		/* 822048C8h case    1:*/		return 0x822048CC;
		  /* 822048CCh */ case    2:  		/* bl -731748 */
		/* 822048CCh case    2:*/		regs.LR = 0x822048D0; return 0x82151E68;
		/* 822048CCh case    2:*/		return 0x822048D0;
	}
	return 0x822048D0;
} // Block from 822048C4h-822048D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822048D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048D0);
		  /* 822048D0h */ case    0:  		/* li R4, 4801 */
		/* 822048D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822048D0h case    0:*/		return 0x822048D4;
		  /* 822048D4h */ case    1:  		/* mr R3, R31 */
		/* 822048D4h case    1:*/		regs.R3 = regs.R31;
		/* 822048D4h case    1:*/		return 0x822048D8;
		  /* 822048D8h */ case    2:  		/* bl -731760 */
		/* 822048D8h case    2:*/		regs.LR = 0x822048DC; return 0x82151E68;
		/* 822048D8h case    2:*/		return 0x822048DC;
	}
	return 0x822048DC;
} // Block from 822048D0h-822048DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822048DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048DC);
		  /* 822048DCh */ case    0:  		/* li R4, 4801 */
		/* 822048DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822048DCh case    0:*/		return 0x822048E0;
		  /* 822048E0h */ case    1:  		/* mr R3, R31 */
		/* 822048E0h case    1:*/		regs.R3 = regs.R31;
		/* 822048E0h case    1:*/		return 0x822048E4;
		  /* 822048E4h */ case    2:  		/* bl -731772 */
		/* 822048E4h case    2:*/		regs.LR = 0x822048E8; return 0x82151E68;
		/* 822048E4h case    2:*/		return 0x822048E8;
	}
	return 0x822048E8;
} // Block from 822048DCh-822048E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822048E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048E8);
		  /* 822048E8h */ case    0:  		/* li R4, 4800 */
		/* 822048E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 822048E8h case    0:*/		return 0x822048EC;
		  /* 822048ECh */ case    1:  		/* mr R3, R31 */
		/* 822048ECh case    1:*/		regs.R3 = regs.R31;
		/* 822048ECh case    1:*/		return 0x822048F0;
		  /* 822048F0h */ case    2:  		/* bl -731784 */
		/* 822048F0h case    2:*/		regs.LR = 0x822048F4; return 0x82151E68;
		/* 822048F0h case    2:*/		return 0x822048F4;
	}
	return 0x822048F4;
} // Block from 822048E8h-822048F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822048F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822048F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822048F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822048F4);
		  /* 822048F4h */ case    0:  		/* li R4, 4801 */
		/* 822048F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822048F4h case    0:*/		return 0x822048F8;
		  /* 822048F8h */ case    1:  		/* mr R3, R31 */
		/* 822048F8h case    1:*/		regs.R3 = regs.R31;
		/* 822048F8h case    1:*/		return 0x822048FC;
		  /* 822048FCh */ case    2:  		/* bl -731796 */
		/* 822048FCh case    2:*/		regs.LR = 0x82204900; return 0x82151E68;
		/* 822048FCh case    2:*/		return 0x82204900;
	}
	return 0x82204900;
} // Block from 822048F4h-82204900h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204900);
		  /* 82204900h */ case    0:  		/* mfspr R12, LR */
		/* 82204900h case    0:*/		regs.R12 = regs.LR;
		/* 82204900h case    0:*/		return 0x82204904;
		  /* 82204904h */ case    1:  		/* bl -1521328 */
		/* 82204904h case    1:*/		regs.LR = 0x82204908; return 0x82091254;
		/* 82204904h case    1:*/		return 0x82204908;
		  /* 82204908h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82204908h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82204908h case    2:*/		return 0x8220490C;
		  /* 8220490Ch */ case    3:  		/* lwz R11, <#[R3 + 20]> */
		/* 8220490Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8220490Ch case    3:*/		return 0x82204910;
		  /* 82204910h */ case    4:  		/* li R5, 0 */
		/* 82204910h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82204910h case    4:*/		return 0x82204914;
		  /* 82204914h */ case    5:  		/* mr R31, R3 */
		/* 82204914h case    5:*/		regs.R31 = regs.R3;
		/* 82204914h case    5:*/		return 0x82204918;
		  /* 82204918h */ case    6:  		/* addi R10, R11, 12 */
		/* 82204918h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xC);
		/* 82204918h case    6:*/		return 0x8220491C;
		  /* 8220491Ch */ case    7:  		/* mulli R4, R10, 40 */
		/* 8220491Ch case    7:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R10,0x28);
		/* 8220491Ch case    7:*/		return 0x82204920;
		  /* 82204920h */ case    8:  		/* stw R11, <#[R3 + 600]> */
		/* 82204920h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000258) );
		/* 82204920h case    8:*/		return 0x82204924;
		  /* 82204924h */ case    9:  		/* bl -492284 */
		/* 82204924h case    9:*/		regs.LR = 0x82204928; return 0x8218C628;
		/* 82204924h case    9:*/		return 0x82204928;
		  /* 82204928h */ case   10:  		/* lwz R4, <#[R31 + 12]> */
		/* 82204928h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82204928h case   10:*/		return 0x8220492C;
		  /* 8220492Ch */ case   11:  		/* mr R30, R3 */
		/* 8220492Ch case   11:*/		regs.R30 = regs.R3;
		/* 8220492Ch case   11:*/		return 0x82204930;
		  /* 82204930h */ case   12:  		/* cmplwi CR6, R4, 0 */
		/* 82204930h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82204930h case   12:*/		return 0x82204934;
		  /* 82204934h */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 82204934h case   13:*/		if ( regs.CR[6].eq ) { return 0x8220495C;  }
		/* 82204934h case   13:*/		return 0x82204938;
		  /* 82204938h */ case   14:  		/* lwz R11, <#[R31 + 20]> */
		/* 82204938h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82204938h case   14:*/		return 0x8220493C;
		  /* 8220493Ch */ case   15:  		/* mulli R5, R11, 40 */
		/* 8220493Ch case   15:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 8220493Ch case   15:*/		return 0x82204940;
		  /* 82204940h */ case   16:  		/* bl -1519504 */
		/* 82204940h case   16:*/		regs.LR = 0x82204944; return 0x820919B0;
		/* 82204940h case   16:*/		return 0x82204944;
		  /* 82204944h */ case   17:  		/* lwz R11, <#[R31 + 20]> */
		/* 82204944h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82204944h case   17:*/		return 0x82204948;
		  /* 82204948h */ case   18:  		/* lwz R4, <#[R31 + 12]> */
		/* 82204948h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82204948h case   18:*/		return 0x8220494C;
		  /* 8220494Ch */ case   19:  		/* li R6, 0 */
		/* 8220494Ch case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220494Ch case   19:*/		return 0x82204950;
		  /* 82204950h */ case   20:  		/* mr R3, R31 */
		/* 82204950h case   20:*/		regs.R3 = regs.R31;
		/* 82204950h case   20:*/		return 0x82204954;
		  /* 82204954h */ case   21:  		/* mulli R5, R11, 40 */
		/* 82204954h case   21:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 82204954h case   21:*/		return 0x82204958;
		  /* 82204958h */ case   22:  		/* bl -654528 */
		/* 82204958h case   22:*/		regs.LR = 0x8220495C; return 0x82164C98;
		/* 82204958h case   22:*/		return 0x8220495C;
	}
	return 0x8220495C;
} // Block from 82204900h-8220495Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8220495Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220495C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220495C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220495C);
		  /* 8220495Ch */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 8220495Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8220495Ch case    0:*/		return 0x82204960;
		  /* 82204960h */ case    1:  		/* lis R11, -32217 */
		/* 82204960h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82204960h case    1:*/		return 0x82204964;
		  /* 82204964h */ case    2:  		/* stw R30, <#[R31 + 12]> */
		/* 82204964h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82204964h case    2:*/		return 0x82204968;
		  /* 82204968h */ case    3:  		/* li R29, 0 */
		/* 82204968h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82204968h case    3:*/		return 0x8220496C;
		  /* 8220496Ch */ case    4:  		/* addi R10, R10, 12 */
		/* 8220496Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 8220496Ch case    4:*/		return 0x82204970;
		  /* 82204970h */ case    5:  		/* addi R28, R11, 22080 */
		/* 82204970h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x5640);
		/* 82204970h case    5:*/		return 0x82204974;
		  /* 82204974h */ case    6:  		/* stw R10, <#[R31 + 20]> */
		/* 82204974h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82204974h case    6:*/		return 0x82204978;
		  /* 82204978h */ case    7:  		/* li R27, 1 */
		/* 82204978h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82204978h case    7:*/		return 0x8220497C;
		  /* 8220497Ch */ case    8:  		/* lwz R11, <#[R31 + 600]> */
		/* 8220497Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 8220497Ch case    8:*/		return 0x82204980;
		  /* 82204980h */ case    9:  		/* li R10, 0 */
		/* 82204980h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82204980h case    9:*/		return 0x82204984;
		  /* 82204984h */ case   10:  		/* li R9, 4 */
		/* 82204984h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82204984h case   10:*/		return 0x82204988;
		  /* 82204988h */ case   11:  		/* lwz R4, <#[R28]> */
		/* 82204988h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 82204988h case   11:*/		return 0x8220498C;
		  /* 8220498Ch */ case   12:  		/* add R30, R11, R29 */
		/* 8220498Ch case   12:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R29);
		/* 8220498Ch case   12:*/		return 0x82204990;
		  /* 82204990h */ case   13:  		/* li R8, 1 */
		/* 82204990h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82204990h case   13:*/		return 0x82204994;
		  /* 82204994h */ case   14:  		/* li R7, 12 */
		/* 82204994h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 82204994h case   14:*/		return 0x82204998;
		  /* 82204998h */ case   15:  		/* li R6, 1 */
		/* 82204998h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82204998h case   15:*/		return 0x8220499C;
		  /* 8220499Ch */ case   16:  		/* mr R5, R30 */
		/* 8220499Ch case   16:*/		regs.R5 = regs.R30;
		/* 8220499Ch case   16:*/		return 0x822049A0;
		  /* 822049A0h */ case   17:  		/* mr R3, R31 */
		/* 822049A0h case   17:*/		regs.R3 = regs.R31;
		/* 822049A0h case   17:*/		return 0x822049A4;
		  /* 822049A4h */ case   18:  		/* bl -80460 */
		/* 822049A4h case   18:*/		regs.LR = 0x822049A8; return 0x821F0F58;
		/* 822049A4h case   18:*/		return 0x822049A8;
		  /* 822049A8h */ case   19:  		/* lwz R6, <#[R3 + 24]> */
		/* 822049A8h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000018) );
		/* 822049A8h case   19:*/		return 0x822049AC;
		  /* 822049ACh */ case   20:  		/* mr R5, R3 */
		/* 822049ACh case   20:*/		regs.R5 = regs.R3;
		/* 822049ACh case   20:*/		return 0x822049B0;
		  /* 822049B0h */ case   21:  		/* cmplwi CR6, R6, 0 */
		/* 822049B0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 822049B0h case   21:*/		return 0x822049B4;
		  /* 822049B4h */ case   22:  		/* bc 12, CR6_EQ, 132 */
		/* 822049B4h case   22:*/		if ( regs.CR[6].eq ) { return 0x82204A38;  }
		/* 822049B4h case   22:*/		return 0x822049B8;
		  /* 822049B8h */ case   23:  		/* lwz R11, <#[R6 + 4]> */
		/* 822049B8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 822049B8h case   23:*/		return 0x822049BC;
		  /* 822049BCh */ case   24:  		/* cmpwi CR6, R11, 11 */
		/* 822049BCh case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 822049BCh case   24:*/		return 0x822049C0;
		  /* 822049C0h */ case   25:  		/* bc 4, CR6_EQ, 120 */
		/* 822049C0h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82204A38;  }
		/* 822049C0h case   25:*/		return 0x822049C4;
		  /* 822049C4h */ case   26:  		/* li R8, 0 */
		/* 822049C4h case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822049C4h case   26:*/		return 0x822049C8;
		  /* 822049C8h */ case   27:  		/* li R7, 3 */
		/* 822049C8h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 822049C8h case   27:*/		return 0x822049CC;
		  /* 822049CCh */ case   28:  		/* mr R4, R30 */
		/* 822049CCh case   28:*/		regs.R4 = regs.R30;
		/* 822049CCh case   28:*/		return 0x822049D0;
		  /* 822049D0h */ case   29:  		/* mr R3, R31 */
		/* 822049D0h case   29:*/		regs.R3 = regs.R31;
		/* 822049D0h case   29:*/		return 0x822049D4;
		  /* 822049D4h */ case   30:  		/* bl -41092 */
		/* 822049D4h case   30:*/		regs.LR = 0x822049D8; return 0x821FA950;
		/* 822049D4h case   30:*/		return 0x822049D8;
		  /* 822049D8h */ case   31:  		/* lwz R10, <#[R31 + 12]> */
		/* 822049D8h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 822049D8h case   31:*/		return 0x822049DC;
		  /* 822049DCh */ case   32:  		/* mulli R11, R30, 40 */
		/* 822049DCh case   32:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x28);
		/* 822049DCh case   32:*/		return 0x822049E0;
		  /* 822049E0h */ case   33:  		/* lwzx R9, <#[R10 + R11]> */
		/* 822049E0h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 822049E0h case   33:*/		return 0x822049E4;
		  /* 822049E4h */ case   34:  		/* cmplwi CR6, R29, 5 */
		/* 822049E4h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000005);
		/* 822049E4h case   34:*/		return 0x822049E8;
		  /* 822049E8h */ case   35:  		/* bc 12, CR6_GT, 12 */
		/* 822049E8h case   35:*/		if ( regs.CR[6].gt ) { return 0x822049F4;  }
		/* 822049E8h case   35:*/		return 0x822049EC;
		  /* 822049ECh */ case   36:  		/* rlwimi R9, R27, 2, 29, 31 */
		/* 822049ECh case   36:*/		cpu::op::rlwimi<0,2,29,31>(regs,&regs.R9,regs.R27);
		/* 822049ECh case   36:*/		return 0x822049F0;
		  /* 822049F0h */ case   37:  		/* b 8 */
		/* 822049F0h case   37:*/		return 0x822049F8;
		/* 822049F0h case   37:*/		return 0x822049F4;
	}
	return 0x822049F4;
} // Block from 8220495Ch-822049F4h (38 instructions)

//////////////////////////////////////////////////////
// Block at 822049F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822049F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822049F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822049F4);
		  /* 822049F4h */ case    0:  		/* rlwimi R9, R27, 1, 29, 31 */
		/* 822049F4h case    0:*/		cpu::op::rlwimi<0,1,29,31>(regs,&regs.R9,regs.R27);
		/* 822049F4h case    0:*/		return 0x822049F8;
	}
	return 0x822049F8;
} // Block from 822049F4h-822049F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822049F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822049F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822049F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822049F8);
		  /* 822049F8h */ case    0:  		/* stwx R9, <#[R10 + R11]> */
		/* 822049F8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 822049F8h case    0:*/		return 0x822049FC;
		  /* 822049FCh */ case    1:  		/* addi R29, R29, 1 */
		/* 822049FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 822049FCh case    1:*/		return 0x82204A00;
		  /* 82204A00h */ case    2:  		/* lwz R10, <#[R31 + 12]> */
		/* 82204A00h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82204A00h case    2:*/		return 0x82204A04;
		  /* 82204A04h */ case    3:  		/* add R11, R10, R11 */
		/* 82204A04h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82204A04h case    3:*/		return 0x82204A08;
		  /* 82204A08h */ case    4:  		/* addi R10, R11, 4 */
		/* 82204A08h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204A08h case    4:*/		return 0x82204A0C;
		  /* 82204A0Ch */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204A0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204A0Ch case    5:*/		return 0x82204A10;
		  /* 82204A10h */ case    6:  		/* ori R10, R10, 4 */
		/* 82204A10h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82204A10h case    6:*/		return 0x82204A14;
		  /* 82204A14h */ case    7:  		/* addi R28, R28, 4 */
		/* 82204A14h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82204A14h case    7:*/		return 0x82204A18;
		  /* 82204A18h */ case    8:  		/* stw R10, <#[R11 + 4]> */
		/* 82204A18h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204A18h case    8:*/		return 0x82204A1C;
		  /* 82204A1Ch */ case    9:  		/* cmplwi CR6, R29, 12 */
		/* 82204A1Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000C);
		/* 82204A1Ch case    9:*/		return 0x82204A20;
		  /* 82204A20h */ case   10:  		/* bc 12, CR6_LT, -164 */
		/* 82204A20h case   10:*/		if ( regs.CR[6].lt ) { return 0x8220497C;  }
		/* 82204A20h case   10:*/		return 0x82204A24;
		  /* 82204A24h */ case   11:  		/* lwz R11, <#[R31 + 40]> */
		/* 82204A24h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82204A24h case   11:*/		return 0x82204A28;
		  /* 82204A28h */ case   12:  		/* oris R11, R11, 4 */
		/* 82204A28h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82204A28h case   12:*/		return 0x82204A2C;
		  /* 82204A2Ch */ case   13:  		/* stw R11, <#[R31 + 40]> */
		/* 82204A2Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82204A2Ch case   13:*/		return 0x82204A30;
		  /* 82204A30h */ case   14:  		/* addi R1, R1, 128 */
		/* 82204A30h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82204A30h case   14:*/		return 0x82204A34;
		  /* 82204A34h */ case   15:  		/* b -1521552 */
		/* 82204A34h case   15:*/		return 0x820912A4;
		/* 82204A34h case   15:*/		return 0x82204A38;
	}
	return 0x82204A38;
} // Block from 822049F8h-82204A38h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82204A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204A38);
		  /* 82204A38h */ case    0:  		/* li R4, 4801 */
		/* 82204A38h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204A38h case    0:*/		return 0x82204A3C;
		  /* 82204A3Ch */ case    1:  		/* mr R3, R31 */
		/* 82204A3Ch case    1:*/		regs.R3 = regs.R31;
		/* 82204A3Ch case    1:*/		return 0x82204A40;
		  /* 82204A40h */ case    2:  		/* bl -732120 */
		/* 82204A40h case    2:*/		regs.LR = 0x82204A44; return 0x82151E68;
		/* 82204A40h case    2:*/		return 0x82204A44;
		  /* 82204A44h */ case    3:  		/* nop */
		/* 82204A44h case    3:*/		cpu::op::nop();
		/* 82204A44h case    3:*/		return 0x82204A48;
	}
	return 0x82204A48;
} // Block from 82204A38h-82204A48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82204A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204A48);
		  /* 82204A48h */ case    0:  		/* mfspr R12, LR */
		/* 82204A48h case    0:*/		regs.R12 = regs.LR;
		/* 82204A48h case    0:*/		return 0x82204A4C;
		  /* 82204A4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82204A4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82204A4Ch case    1:*/		return 0x82204A50;
		  /* 82204A50h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82204A50h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82204A50h case    2:*/		return 0x82204A54;
		  /* 82204A54h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82204A54h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82204A54h case    3:*/		return 0x82204A58;
		  /* 82204A58h */ case    4:  		/* lwz R11, <#[R5]> */
		/* 82204A58h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82204A58h case    4:*/		return 0x82204A5C;
		  /* 82204A5Ch */ case    5:  		/* mr R31, R5 */
		/* 82204A5Ch case    5:*/		regs.R31 = regs.R5;
		/* 82204A5Ch case    5:*/		return 0x82204A60;
		  /* 82204A60h */ case    6:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 82204A60h case    6:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 82204A60h case    6:*/		return 0x82204A64;
		  /* 82204A64h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 82204A64h case    7:*/		if ( regs.CR[0].eq ) { return 0x82204A8C;  }
		/* 82204A64h case    7:*/		return 0x82204A68;
		  /* 82204A68h */ case    8:  		/* lwz R11, <#[R5 + 8]> */
		/* 82204A68h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82204A68h case    8:*/		return 0x82204A6C;
		  /* 82204A6Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82204A6Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204A6Ch case    9:*/		return 0x82204A70;
		  /* 82204A70h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 82204A70h case   10:*/		if ( regs.CR[6].eq ) { return 0x82204A8C;  }
		/* 82204A70h case   10:*/		return 0x82204A74;
		  /* 82204A74h */ case   11:  		/* lwz R5, <#[R11 + 20]> */
		/* 82204A74h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000014) );
		/* 82204A74h case   11:*/		return 0x82204A78;
		  /* 82204A78h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 82204A78h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82204A78h case   12:*/		return 0x82204A7C;
		  /* 82204A7Ch */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 82204A7Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82204A8C;  }
		/* 82204A7Ch case   13:*/		return 0x82204A80;
		  /* 82204A80h */ case   14:  		/* li R6, 5 */
		/* 82204A80h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x5);
		/* 82204A80h case   14:*/		return 0x82204A84;
		  /* 82204A84h */ case   15:  		/* bl -38964 */
		/* 82204A84h case   15:*/		regs.LR = 0x82204A88; return 0x821FB250;
		/* 82204A84h case   15:*/		return 0x82204A88;
		  /* 82204A88h */ case   16:  		/* stw R3, <#[R31 + 12]> */
		/* 82204A88h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82204A88h case   16:*/		return 0x82204A8C;
	}
	return 0x82204A8C;
} // Block from 82204A48h-82204A8Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82204A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204A8C);
		  /* 82204A8Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 82204A8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82204A8Ch case    0:*/		return 0x82204A90;
		  /* 82204A90h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82204A90h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82204A90h case    1:*/		return 0x82204A94;
		  /* 82204A94h */ case    2:  		/* mtspr LR, R12 */
		/* 82204A94h case    2:*/		regs.LR = regs.R12;
		/* 82204A94h case    2:*/		return 0x82204A98;
		  /* 82204A98h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82204A98h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82204A98h case    3:*/		return 0x82204A9C;
		  /* 82204A9Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 82204A9Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82204A9Ch case    4:*/		return 0x82204AA0;
	}
	return 0x82204AA0;
} // Block from 82204A8Ch-82204AA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82204AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204AA0);
		  /* 82204AA0h */ case    0:  		/* mfspr R12, LR */
		/* 82204AA0h case    0:*/		regs.R12 = regs.LR;
		/* 82204AA0h case    0:*/		return 0x82204AA4;
		  /* 82204AA4h */ case    1:  		/* bl -1521768 */
		/* 82204AA4h case    1:*/		regs.LR = 0x82204AA8; return 0x8209123C;
		/* 82204AA4h case    1:*/		return 0x82204AA8;
		  /* 82204AA8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82204AA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82204AA8h case    2:*/		return 0x82204AAC;
		  /* 82204AACh */ case    3:  		/* mr R21, R4 */
		/* 82204AACh case    3:*/		regs.R21 = regs.R4;
		/* 82204AACh case    3:*/		return 0x82204AB0;
		  /* 82204AB0h */ case    4:  		/* li R5, 15 */
		/* 82204AB0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 82204AB0h case    4:*/		return 0x82204AB4;
		  /* 82204AB4h */ case    5:  		/* li R4, 8 */
		/* 82204AB4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82204AB4h case    5:*/		return 0x82204AB8;
		  /* 82204AB8h */ case    6:  		/* mr R31, R3 */
		/* 82204AB8h case    6:*/		regs.R31 = regs.R3;
		/* 82204AB8h case    6:*/		return 0x82204ABC;
		  /* 82204ABCh */ case    7:  		/* bl -655820 */
		/* 82204ABCh case    7:*/		regs.LR = 0x82204AC0; return 0x821648F0;
		/* 82204ABCh case    7:*/		return 0x82204AC0;
		  /* 82204AC0h */ case    8:  		/* addi R22, R3, 4 */
		/* 82204AC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R3,0x4);
		/* 82204AC0h case    8:*/		return 0x82204AC4;
		  /* 82204AC4h */ case    9:  		/* ori R11, R3, 1 */
		/* 82204AC4h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 82204AC4h case    9:*/		return 0x82204AC8;
		  /* 82204AC8h */ case   10:  		/* ori R10, R22, 1 */
		/* 82204AC8h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R22,0x1);
		/* 82204AC8h case   10:*/		return 0x82204ACC;
		  /* 82204ACCh */ case   11:  		/* stw R11, <#[R3 + 4]> */
		/* 82204ACCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82204ACCh case   11:*/		return 0x82204AD0;
		  /* 82204AD0h */ case   12:  		/* mr R26, R3 */
		/* 82204AD0h case   12:*/		regs.R26 = regs.R3;
		/* 82204AD0h case   12:*/		return 0x82204AD4;
		  /* 82204AD4h */ case   13:  		/* stw R10, <#[R3]> */
		/* 82204AD4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82204AD4h case   13:*/		return 0x82204AD8;
		  /* 82204AD8h */ case   14:  		/* lwz R11, <#[R31 + 40]> */
		/* 82204AD8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82204AD8h case   14:*/		return 0x82204ADC;
		  /* 82204ADCh */ case   15:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82204ADCh case   15:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82204ADCh case   15:*/		return 0x82204AE0;
		  /* 82204AE0h */ case   16:  		/* bc 12, CR0_EQ, 172 */
		/* 82204AE0h case   16:*/		if ( regs.CR[0].eq ) { return 0x82204B8C;  }
		/* 82204AE0h case   16:*/		return 0x82204AE4;
		  /* 82204AE4h */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 82204AE4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82204AE4h case   17:*/		return 0x82204AE8;
		  /* 82204AE8h */ case   18:  		/* lwz R11, <#[R11 + 40]> */
		/* 82204AE8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82204AE8h case   18:*/		return 0x82204AEC;
		  /* 82204AECh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82204AECh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204AECh case   19:*/		return 0x82204AF0;
		  /* 82204AF0h */ case   20:  		/* bc 12, CR6_EQ, 176 */
		/* 82204AF0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82204BA0;  }
		/* 82204AF0h case   20:*/		return 0x82204AF4;
		  /* 82204AF4h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204AF4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204AF4h case   21:*/		return 0x82204AF8;
		  /* 82204AF8h */ case   22:  		/* cmpwi CR6, R10, 1 */
		/* 82204AF8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82204AF8h case   22:*/		return 0x82204AFC;
		  /* 82204AFCh */ case   23:  		/* bc 4, CR6_EQ, 164 */
		/* 82204AFCh case   23:*/		if ( !regs.CR[6].eq ) { return 0x82204BA0;  }
		/* 82204AFCh case   23:*/		return 0x82204B00;
		  /* 82204B00h */ case   24:  		/* mr R29, R11 */
		/* 82204B00h case   24:*/		regs.R29 = regs.R11;
		/* 82204B00h case   24:*/		return 0x82204B04;
		  /* 82204B04h */ case   25:  		/* lwz R30, <#[R29 + 8]> */
		/* 82204B04h case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000008) );
		/* 82204B04h case   25:*/		return 0x82204B08;
		  /* 82204B08h */ case   26:  		/* lwz R11, <#[R30 + 4]> */
		/* 82204B08h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82204B08h case   26:*/		return 0x82204B0C;
		  /* 82204B0Ch */ case   27:  		/* cmpwi CR6, R11, 12 */
		/* 82204B0Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82204B0Ch case   27:*/		return 0x82204B10;
		  /* 82204B10h */ case   28:  		/* bc 4, CR6_EQ, 88 */
		/* 82204B10h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82204B68;  }
		/* 82204B10h case   28:*/		return 0x82204B14;
		  /* 82204B14h */ case   29:  		/* lwz R11, <#[R22]> */
		/* 82204B14h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204B14h case   29:*/		return 0x82204B18;
		  /* 82204B18h */ case   30:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204B18h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204B18h case   30:*/		return 0x82204B1C;
		  /* 82204B1Ch */ case   31:  		/* bc 4, CR0_EQ, 40 */
		/* 82204B1Ch case   31:*/		if ( !regs.CR[0].eq ) { return 0x82204B44;  }
		/* 82204B1Ch case   31:*/		return 0x82204B20;
		  /* 82204B20h */ case   32:  		/* lwz R11, <#[R26]> */
		/* 82204B20h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204B20h case   32:*/		return 0x82204B24;
		  /* 82204B24h */ case   33:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204B24h case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204B24h case   33:*/		return 0x82204B28;
		  /* 82204B28h */ case   34:  		/* addic. R3, R11, -4 */
		/* 82204B28h case   34:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82204B28h case   34:*/		return 0x82204B2C;
		  /* 82204B2Ch */ case   35:  		/* bc 12, CR0_EQ, 24 */
		/* 82204B2Ch case   35:*/		if ( regs.CR[0].eq ) { return 0x82204B44;  }
		/* 82204B2Ch case   35:*/		return 0x82204B30;
		  /* 82204B30h */ case   36:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204B30h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204B30h case   36:*/		return 0x82204B34;
		  /* 82204B34h */ case   37:  		/* lwz R10, <#[R3 + 12]> */
		/* 82204B34h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82204B34h case   37:*/		return 0x82204B38;
		  /* 82204B38h */ case   38:  		/* addi R11, R11, 1 */
		/* 82204B38h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82204B38h case   38:*/		return 0x82204B3C;
		  /* 82204B3Ch */ case   39:  		/* cmplw CR6, R11, R10 */
		/* 82204B3Ch case   39:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204B3Ch case   39:*/		return 0x82204B40;
		  /* 82204B40h */ case   40:  		/* bc 4, CR6_GT, 16 */
		/* 82204B40h case   40:*/		if ( !regs.CR[6].gt ) { return 0x82204B50;  }
		/* 82204B40h case   40:*/		return 0x82204B44;
	}
	return 0x82204B44;
} // Block from 82204AA0h-82204B44h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82204B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204B44);
		  /* 82204B44h */ case    0:  		/* li R4, 1 */
		/* 82204B44h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82204B44h case    0:*/		return 0x82204B48;
		  /* 82204B48h */ case    1:  		/* mr R3, R26 */
		/* 82204B48h case    1:*/		regs.R3 = regs.R26;
		/* 82204B48h case    1:*/		return 0x82204B4C;
		  /* 82204B4Ch */ case    2:  		/* bl -490116 */
		/* 82204B4Ch case    2:*/		regs.LR = 0x82204B50; return 0x8218D0C8;
		/* 82204B4Ch case    2:*/		return 0x82204B50;
	}
	return 0x82204B50;
} // Block from 82204B44h-82204B50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204B50);
		  /* 82204B50h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204B50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204B50h case    0:*/		return 0x82204B54;
		  /* 82204B54h */ case    1:  		/* addi R10, R11, 4 */
		/* 82204B54h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204B54h case    1:*/		return 0x82204B58;
		  /* 82204B58h */ case    2:  		/* addi R9, R11, 1 */
		/* 82204B58h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82204B58h case    2:*/		return 0x82204B5C;
		  /* 82204B5Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82204B5Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82204B5Ch case    3:*/		return 0x82204B60;
		  /* 82204B60h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82204B60h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82204B60h case    4:*/		return 0x82204B64;
		  /* 82204B64h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82204B64h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82204B64h case    5:*/		return 0x82204B68;
	}
	return 0x82204B68;
} // Block from 82204B50h-82204B68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204B68);
		  /* 82204B68h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 82204B68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82204B68h case    0:*/		return 0x82204B6C;
		  /* 82204B6Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82204B6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204B6Ch case    1:*/		return 0x82204B70;
		  /* 82204B70h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82204B70h case    2:*/		if ( regs.CR[6].eq ) { return 0x82204B80;  }
		/* 82204B70h case    2:*/		return 0x82204B74;
		  /* 82204B74h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204B74h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204B74h case    3:*/		return 0x82204B78;
		  /* 82204B78h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82204B78h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82204B78h case    4:*/		return 0x82204B7C;
		  /* 82204B7Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 82204B7Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204B94;  }
		/* 82204B7Ch case    5:*/		return 0x82204B80;
	}
	return 0x82204B80;
} // Block from 82204B68h-82204B80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204B80);
		  /* 82204B80h */ case    0:  		/* mr R29, R11 */
		/* 82204B80h case    0:*/		regs.R29 = regs.R11;
		/* 82204B80h case    0:*/		return 0x82204B84;
		  /* 82204B84h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82204B84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204B84h case    1:*/		return 0x82204B88;
		  /* 82204B88h */ case    2:  		/* bc 4, CR6_EQ, -132 */
		/* 82204B88h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82204B04;  }
		/* 82204B88h case    2:*/		return 0x82204B8C;
	}
	return 0x82204B8C;
} // Block from 82204B80h-82204B8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204B8C);
		  /* 82204B8Ch */ case    0:  		/* lwz R27, <#[R31 + 568]> */
		/* 82204B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000238) );
		/* 82204B8Ch case    0:*/		return 0x82204B90;
		  /* 82204B90h */ case    1:  		/* b 408 */
		/* 82204B90h case    1:*/		return 0x82204D28;
		/* 82204B90h case    1:*/		return 0x82204B94;
	}
	return 0x82204B94;
} // Block from 82204B8Ch-82204B94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204B94);
		  /* 82204B94h */ case    0:  		/* li R4, 4801 */
		/* 82204B94h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204B94h case    0:*/		return 0x82204B98;
		  /* 82204B98h */ case    1:  		/* mr R3, R31 */
		/* 82204B98h case    1:*/		regs.R3 = regs.R31;
		/* 82204B98h case    1:*/		return 0x82204B9C;
		  /* 82204B9Ch */ case    2:  		/* bl -732468 */
		/* 82204B9Ch case    2:*/		regs.LR = 0x82204BA0; return 0x82151E68;
		/* 82204B9Ch case    2:*/		return 0x82204BA0;
	}
	return 0x82204BA0;
} // Block from 82204B94h-82204BA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204BA0);
		  /* 82204BA0h */ case    0:  		/* li R4, 4801 */
		/* 82204BA0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204BA0h case    0:*/		return 0x82204BA4;
		  /* 82204BA4h */ case    1:  		/* mr R3, R31 */
		/* 82204BA4h case    1:*/		regs.R3 = regs.R31;
		/* 82204BA4h case    1:*/		return 0x82204BA8;
		  /* 82204BA8h */ case    2:  		/* bl -732480 */
		/* 82204BA8h case    2:*/		regs.LR = 0x82204BAC; return 0x82151E68;
		/* 82204BA8h case    2:*/		return 0x82204BAC;
		  /* 82204BACh */ case    3:  		/* lwz R28, <#[R27 + 4]> */
		/* 82204BACh case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000004) );
		/* 82204BACh case    3:*/		return 0x82204BB0;
		  /* 82204BB0h */ case    4:  		/* lwz R11, <#[R28 + 44]> */
		/* 82204BB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 82204BB0h case    4:*/		return 0x82204BB4;
		  /* 82204BB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82204BB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204BB4h case    5:*/		return 0x82204BB8;
		  /* 82204BB8h */ case    6:  		/* bc 12, CR6_EQ, 256 */
		/* 82204BB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82204CB8;  }
		/* 82204BB8h case    6:*/		return 0x82204BBC;
		  /* 82204BBCh */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204BBCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204BBCh case    7:*/		return 0x82204BC0;
		  /* 82204BC0h */ case    8:  		/* cmpwi CR6, R10, 1 */
		/* 82204BC0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82204BC0h case    8:*/		return 0x82204BC4;
		  /* 82204BC4h */ case    9:  		/* bc 12, CR6_EQ, 244 */
		/* 82204BC4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82204CB8;  }
		/* 82204BC4h case    9:*/		return 0x82204BC8;
		  /* 82204BC8h */ case   10:  		/* li R4, 4801 */
		/* 82204BC8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204BC8h case   10:*/		return 0x82204BCC;
		  /* 82204BCCh */ case   11:  		/* mr R3, R31 */
		/* 82204BCCh case   11:*/		regs.R3 = regs.R31;
		/* 82204BCCh case   11:*/		return 0x82204BD0;
		  /* 82204BD0h */ case   12:  		/* bl -732520 */
		/* 82204BD0h case   12:*/		regs.LR = 0x82204BD4; return 0x82151E68;
		/* 82204BD0h case   12:*/		return 0x82204BD4;
		  /* 82204BD4h */ case   13:  		/* lwz R30, <#[R29 + 8]> */
		/* 82204BD4h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000008) );
		/* 82204BD4h case   13:*/		return 0x82204BD8;
		  /* 82204BD8h */ case   14:  		/* lwz R11, <#[R30 + 4]> */
		/* 82204BD8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82204BD8h case   14:*/		return 0x82204BDC;
		  /* 82204BDCh */ case   15:  		/* cmpwi CR6, R11, 6 */
		/* 82204BDCh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82204BDCh case   15:*/		return 0x82204BE0;
		  /* 82204BE0h */ case   16:  		/* bc 4, CR6_EQ, 108 */
		/* 82204BE0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82204C4C;  }
		/* 82204BE0h case   16:*/		return 0x82204BE4;
		  /* 82204BE4h */ case   17:  		/* lwz R11, <#[R30 + 16]> */
		/* 82204BE4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82204BE4h case   17:*/		return 0x82204BE8;
		  /* 82204BE8h */ case   18:  		/* cmpwi CR6, R11, 1 */
		/* 82204BE8h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82204BE8h case   18:*/		return 0x82204BEC;
		  /* 82204BECh */ case   19:  		/* bc 4, CR6_EQ, 528 */
		/* 82204BECh case   19:*/		if ( !regs.CR[6].eq ) { return 0x82204DFC;  }
		/* 82204BECh case   19:*/		return 0x82204BF0;
		  /* 82204BF0h */ case   20:  		/* lwz R11, <#[R30 + 24]> */
		/* 82204BF0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82204BF0h case   20:*/		return 0x82204BF4;
		  /* 82204BF4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82204BF4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204BF4h case   21:*/		return 0x82204BF8;
		  /* 82204BF8h */ case   22:  		/* bc 12, CR6_EQ, 528 */
		/* 82204BF8h case   22:*/		if ( regs.CR[6].eq ) { return 0x82204E08;  }
		/* 82204BF8h case   22:*/		return 0x82204BFC;
		  /* 82204BFCh */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204BFCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204BFCh case   23:*/		return 0x82204C00;
		  /* 82204C00h */ case   24:  		/* cmpwi CR6, R10, 11 */
		/* 82204C00h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 82204C00h case   24:*/		return 0x82204C04;
		  /* 82204C04h */ case   25:  		/* bc 4, CR6_EQ, 516 */
		/* 82204C04h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82204E08;  }
		/* 82204C04h case   25:*/		return 0x82204C08;
		  /* 82204C08h */ case   26:  		/* cmplw CR6, R21, R27 */
		/* 82204C08h case   26:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R27);
		/* 82204C08h case   26:*/		return 0x82204C0C;
		  /* 82204C0Ch */ case   27:  		/* bc 4, CR6_EQ, 28 */
		/* 82204C0Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x82204C28;  }
		/* 82204C0Ch case   27:*/		return 0x82204C10;
		  /* 82204C10h */ case   28:  		/* lwz R10, <#[R31 + 40]> */
		/* 82204C10h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82204C10h case   28:*/		return 0x82204C14;
		  /* 82204C14h */ case   29:  		/* rlwinm. R10, R10, 0, 20, 20 */
		/* 82204C14h case   29:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R10,regs.R10);
		/* 82204C14h case   29:*/		return 0x82204C18;
		  /* 82204C18h */ case   30:  		/* bc 12, CR0_EQ, 136 */
		/* 82204C18h case   30:*/		if ( regs.CR[0].eq ) { return 0x82204CA0;  }
		/* 82204C18h case   30:*/		return 0x82204C1C;
		  /* 82204C1Ch */ case   31:  		/* lwz R10, <#[R11 + 44]> */
		/* 82204C1Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 82204C1Ch case   31:*/		return 0x82204C20;
		  /* 82204C20h */ case   32:  		/* rlwinm. R10, R10, 0, 25, 25 */
		/* 82204C20h case   32:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R10);
		/* 82204C20h case   32:*/		return 0x82204C24;
		  /* 82204C24h */ case   33:  		/* bc 12, CR0_EQ, 124 */
		/* 82204C24h case   33:*/		if ( regs.CR[0].eq ) { return 0x82204CA0;  }
		/* 82204C24h case   33:*/		return 0x82204C28;
	}
	return 0x82204C28;
} // Block from 82204BA0h-82204C28h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82204C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204C28);
		  /* 82204C28h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 82204C28h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82204C28h case    0:*/		return 0x82204C2C;
		  /* 82204C2Ch */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 82204C2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82204C2Ch case    1:*/		return 0x82204C30;
		  /* 82204C30h */ case    2:  		/* mulli R10, R10, 40 */
		/* 82204C30h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 82204C30h case    2:*/		return 0x82204C34;
		  /* 82204C34h */ case    3:  		/* add R11, R10, R11 */
		/* 82204C34h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82204C34h case    3:*/		return 0x82204C38;
		  /* 82204C38h */ case    4:  		/* addi R10, R11, 4 */
		/* 82204C38h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204C38h case    4:*/		return 0x82204C3C;
		  /* 82204C3Ch */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204C3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204C3Ch case    5:*/		return 0x82204C40;
		  /* 82204C40h */ case    6:  		/* ori R10, R10, 4 */
		/* 82204C40h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82204C40h case    6:*/		return 0x82204C44;
		  /* 82204C44h */ case    7:  		/* stw R10, <#[R11 + 4]> */
		/* 82204C44h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204C44h case    7:*/		return 0x82204C48;
		  /* 82204C48h */ case    8:  		/* b 88 */
		/* 82204C48h case    8:*/		return 0x82204CA0;
		/* 82204C48h case    8:*/		return 0x82204C4C;
	}
	return 0x82204C4C;
} // Block from 82204C28h-82204C4Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82204C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204C4C);
		  /* 82204C4Ch */ case    0:  		/* lwz R11, <#[R22]> */
		/* 82204C4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204C4Ch case    0:*/		return 0x82204C50;
		  /* 82204C50h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204C50h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204C50h case    1:*/		return 0x82204C54;
		  /* 82204C54h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 82204C54h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82204C7C;  }
		/* 82204C54h case    2:*/		return 0x82204C58;
		  /* 82204C58h */ case    3:  		/* lwz R11, <#[R26]> */
		/* 82204C58h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204C58h case    3:*/		return 0x82204C5C;
		  /* 82204C5Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204C5Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204C5Ch case    4:*/		return 0x82204C60;
		  /* 82204C60h */ case    5:  		/* addic. R3, R11, -4 */
		/* 82204C60h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82204C60h case    5:*/		return 0x82204C64;
		  /* 82204C64h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82204C64h case    6:*/		if ( regs.CR[0].eq ) { return 0x82204C7C;  }
		/* 82204C64h case    6:*/		return 0x82204C68;
		  /* 82204C68h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204C68h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204C68h case    7:*/		return 0x82204C6C;
		  /* 82204C6Ch */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 82204C6Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82204C6Ch case    8:*/		return 0x82204C70;
		  /* 82204C70h */ case    9:  		/* addi R11, R11, 1 */
		/* 82204C70h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82204C70h case    9:*/		return 0x82204C74;
		  /* 82204C74h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 82204C74h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204C74h case   10:*/		return 0x82204C78;
		  /* 82204C78h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 82204C78h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82204C88;  }
		/* 82204C78h case   11:*/		return 0x82204C7C;
	}
	return 0x82204C7C;
} // Block from 82204C4Ch-82204C7Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82204C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204C7C);
		  /* 82204C7Ch */ case    0:  		/* li R4, 1 */
		/* 82204C7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82204C7Ch case    0:*/		return 0x82204C80;
		  /* 82204C80h */ case    1:  		/* mr R3, R26 */
		/* 82204C80h case    1:*/		regs.R3 = regs.R26;
		/* 82204C80h case    1:*/		return 0x82204C84;
		  /* 82204C84h */ case    2:  		/* bl -490428 */
		/* 82204C84h case    2:*/		regs.LR = 0x82204C88; return 0x8218D0C8;
		/* 82204C84h case    2:*/		return 0x82204C88;
	}
	return 0x82204C88;
} // Block from 82204C7Ch-82204C88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204C88);
		  /* 82204C88h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204C88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204C88h case    0:*/		return 0x82204C8C;
		  /* 82204C8Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 82204C8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204C8Ch case    1:*/		return 0x82204C90;
		  /* 82204C90h */ case    2:  		/* addi R9, R11, 1 */
		/* 82204C90h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82204C90h case    2:*/		return 0x82204C94;
		  /* 82204C94h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82204C94h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82204C94h case    3:*/		return 0x82204C98;
		  /* 82204C98h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82204C98h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82204C98h case    4:*/		return 0x82204C9C;
		  /* 82204C9Ch */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82204C9Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82204C9Ch case    5:*/		return 0x82204CA0;
	}
	return 0x82204CA0;
} // Block from 82204C88h-82204CA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204CA0);
		  /* 82204CA0h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 82204CA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82204CA0h case    0:*/		return 0x82204CA4;
		  /* 82204CA4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82204CA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204CA4h case    1:*/		return 0x82204CA8;
		  /* 82204CA8h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82204CA8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82204CB8;  }
		/* 82204CA8h case    2:*/		return 0x82204CAC;
		  /* 82204CACh */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204CACh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204CACh case    3:*/		return 0x82204CB0;
		  /* 82204CB0h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82204CB0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82204CB0h case    4:*/		return 0x82204CB4;
		  /* 82204CB4h */ case    5:  		/* bc 4, CR6_EQ, 352 */
		/* 82204CB4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204E14;  }
		/* 82204CB4h case    5:*/		return 0x82204CB8;
	}
	return 0x82204CB8;
} // Block from 82204CA0h-82204CB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204CB8);
		  /* 82204CB8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82204CB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82204CB8h case    0:*/		return 0x82204CBC;
		  /* 82204CBCh */ case    1:  		/* mr R29, R11 */
		/* 82204CBCh case    1:*/		regs.R29 = regs.R11;
		/* 82204CBCh case    1:*/		return 0x82204CC0;
		  /* 82204CC0h */ case    2:  		/* bc 4, CR6_EQ, -236 */
		/* 82204CC0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82204BD4;  }
		/* 82204CC0h case    2:*/		return 0x82204CC4;
		  /* 82204CC4h */ case    3:  		/* lwz R30, <#[R28 + 48]> */
		/* 82204CC4h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000030) );
		/* 82204CC4h case    3:*/		return 0x82204CC8;
		  /* 82204CC8h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82204CC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82204CC8h case    4:*/		return 0x82204CCC;
		  /* 82204CCCh */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 82204CCCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82204D24;  }
		/* 82204CCCh case    5:*/		return 0x82204CD0;
		  /* 82204CD0h */ case    6:  		/* lwz R11, <#[R22]> */
		/* 82204CD0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204CD0h case    6:*/		return 0x82204CD4;
		  /* 82204CD4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204CD4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204CD4h case    7:*/		return 0x82204CD8;
		  /* 82204CD8h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82204CD8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82204D00;  }
		/* 82204CD8h case    8:*/		return 0x82204CDC;
		  /* 82204CDCh */ case    9:  		/* lwz R11, <#[R26]> */
		/* 82204CDCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204CDCh case    9:*/		return 0x82204CE0;
		  /* 82204CE0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204CE0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204CE0h case   10:*/		return 0x82204CE4;
		  /* 82204CE4h */ case   11:  		/* addic. R3, R11, -4 */
		/* 82204CE4h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82204CE4h case   11:*/		return 0x82204CE8;
		  /* 82204CE8h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82204CE8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82204D00;  }
		/* 82204CE8h case   12:*/		return 0x82204CEC;
		  /* 82204CECh */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204CECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204CECh case   13:*/		return 0x82204CF0;
		  /* 82204CF0h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 82204CF0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82204CF0h case   14:*/		return 0x82204CF4;
		  /* 82204CF4h */ case   15:  		/* addi R11, R11, 1 */
		/* 82204CF4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82204CF4h case   15:*/		return 0x82204CF8;
		  /* 82204CF8h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 82204CF8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204CF8h case   16:*/		return 0x82204CFC;
		  /* 82204CFCh */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 82204CFCh case   17:*/		if ( !regs.CR[6].gt ) { return 0x82204D0C;  }
		/* 82204CFCh case   17:*/		return 0x82204D00;
	}
	return 0x82204D00;
} // Block from 82204CB8h-82204D00h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82204D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204D00);
		  /* 82204D00h */ case    0:  		/* li R4, 1 */
		/* 82204D00h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82204D00h case    0:*/		return 0x82204D04;
		  /* 82204D04h */ case    1:  		/* mr R3, R26 */
		/* 82204D04h case    1:*/		regs.R3 = regs.R26;
		/* 82204D04h case    1:*/		return 0x82204D08;
		  /* 82204D08h */ case    2:  		/* bl -490560 */
		/* 82204D08h case    2:*/		regs.LR = 0x82204D0C; return 0x8218D0C8;
		/* 82204D08h case    2:*/		return 0x82204D0C;
	}
	return 0x82204D0C;
} // Block from 82204D00h-82204D0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204D0C);
		  /* 82204D0Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204D0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204D0Ch case    0:*/		return 0x82204D10;
		  /* 82204D10h */ case    1:  		/* addi R10, R11, 4 */
		/* 82204D10h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204D10h case    1:*/		return 0x82204D14;
		  /* 82204D14h */ case    2:  		/* addi R9, R11, 1 */
		/* 82204D14h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82204D14h case    2:*/		return 0x82204D18;
		  /* 82204D18h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82204D18h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82204D18h case    3:*/		return 0x82204D1C;
		  /* 82204D1Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82204D1Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82204D1Ch case    4:*/		return 0x82204D20;
		  /* 82204D20h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82204D20h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82204D20h case    5:*/		return 0x82204D24;
	}
	return 0x82204D24;
} // Block from 82204D0Ch-82204D24h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204D24);
		  /* 82204D24h */ case    0:  		/* lwz R27, <#[R27 + 8]> */
		/* 82204D24h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000008) );
		/* 82204D24h case    0:*/		return 0x82204D28;
	}
	return 0x82204D28;
} // Block from 82204D24h-82204D28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82204D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204D28);
		  /* 82204D28h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82204D28h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82204D28h case    0:*/		return 0x82204D2C;
		  /* 82204D2Ch */ case    1:  		/* bc 4, CR6_EQ, -384 */
		/* 82204D2Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82204BAC;  }
		/* 82204D2Ch case    1:*/		return 0x82204D30;
		  /* 82204D30h */ case    2:  		/* li R23, 0 */
		/* 82204D30h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82204D30h case    2:*/		return 0x82204D34;
		  /* 82204D34h */ case    3:  		/* li R24, 1 */
		/* 82204D34h case    3:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82204D34h case    3:*/		return 0x82204D38;
		  /* 82204D38h */ case    4:  		/* mr R27, R23 */
		/* 82204D38h case    4:*/		regs.R27 = regs.R23;
		/* 82204D38h case    4:*/		return 0x82204D3C;
		  /* 82204D3Ch */ case    5:  		/* mr R25, R23 */
		/* 82204D3Ch case    5:*/		regs.R25 = regs.R23;
		/* 82204D3Ch case    5:*/		return 0x82204D40;
		  /* 82204D40h */ case    6:  		/* lwz R11, <#[R22]> */
		/* 82204D40h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204D40h case    6:*/		return 0x82204D44;
		  /* 82204D44h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82204D44h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82204D44h case    7:*/		return 0x82204D48;
		  /* 82204D48h */ case    8:  		/* bc 4, CR0_EQ, 1076 */
		/* 82204D48h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8220517C;  }
		/* 82204D48h case    8:*/		return 0x82204D4C;
		  /* 82204D4Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 82204D4Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82204D4Ch case    9:*/		return 0x82204D50;
		  /* 82204D50h */ case   10:  		/* bc 12, CR0_EQ, 1068 */
		/* 82204D50h case   10:*/		if ( regs.CR[0].eq ) { return 0x8220517C;  }
		/* 82204D50h case   10:*/		return 0x82204D54;
		  /* 82204D54h */ case   11:  		/* lwz R11, <#[R26]> */
		/* 82204D54h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204D54h case   11:*/		return 0x82204D58;
		  /* 82204D58h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204D58h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204D58h case   12:*/		return 0x82204D5C;
		  /* 82204D5Ch */ case   13:  		/* addi R4, R11, -4 */
		/* 82204D5Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82204D5Ch case   13:*/		return 0x82204D60;
		  /* 82204D60h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82204D60h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82204D60h case   14:*/		return 0x82204D64;
		  /* 82204D64h */ case   15:  		/* addi R10, R11, 3 */
		/* 82204D64h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82204D64h case   15:*/		return 0x82204D68;
		  /* 82204D68h */ case   16:  		/* addic. R11, R11, -1 */
		/* 82204D68h case   16:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82204D68h case   16:*/		return 0x82204D6C;
		  /* 82204D6Ch */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82204D6Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82204D6Ch case   17:*/		return 0x82204D70;
		  /* 82204D70h */ case   18:  		/* lwzx R28, <#[R10 + R4]> */
		/* 82204D70h case   18:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82204D70h case   18:*/		return 0x82204D74;
		  /* 82204D74h */ case   19:  		/* stw R11, <#[R4 + 8]> */
		/* 82204D74h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82204D74h case   19:*/		return 0x82204D78;
		  /* 82204D78h */ case   20:  		/* bc 4, CR0_EQ, 60 */
		/* 82204D78h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82204DB4;  }
		/* 82204D78h case   20:*/		return 0x82204D7C;
		  /* 82204D7Ch */ case   21:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82204D7Ch case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82204D7Ch case   21:*/		return 0x82204D80;
		  /* 82204D80h */ case   22:  		/* mr R3, R26 */
		/* 82204D80h case   22:*/		regs.R3 = regs.R26;
		/* 82204D80h case   22:*/		return 0x82204D84;
		  /* 82204D84h */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204D84h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204D84h case   23:*/		return 0x82204D88;
		  /* 82204D88h */ case   24:  		/* lwz R9, <#[R11]> */
		/* 82204D88h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82204D88h case   24:*/		return 0x82204D8C;
		  /* 82204D8Ch */ case   25:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82204D8Ch case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82204D8Ch case   25:*/		return 0x82204D90;
		  /* 82204D90h */ case   26:  		/* stw R9, <#[R10]> */
		/* 82204D90h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82204D90h case   26:*/		return 0x82204D94;
		  /* 82204D94h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 82204D94h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82204D94h case   27:*/		return 0x82204D98;
		  /* 82204D98h */ case   28:  		/* lwz R11, <#[R11]> */
		/* 82204D98h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82204D98h case   28:*/		return 0x82204D9C;
		  /* 82204D9Ch */ case   29:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204D9Ch case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204D9Ch case   29:*/		return 0x82204DA0;
		  /* 82204DA0h */ case   30:  		/* stw R10, <#[R11]> */
		/* 82204DA0h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82204DA0h case   30:*/		return 0x82204DA4;
		  /* 82204DA4h */ case   31:  		/* lwz R11, <#[R4 + 12]> */
		/* 82204DA4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82204DA4h case   31:*/		return 0x82204DA8;
		  /* 82204DA8h */ case   32:  		/* addi R11, R11, 4 */
		/* 82204DA8h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82204DA8h case   32:*/		return 0x82204DAC;
		  /* 82204DACh */ case   33:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82204DACh case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82204DACh case   33:*/		return 0x82204DB0;
		  /* 82204DB0h */ case   34:  		/* bl -733096 */
		/* 82204DB0h case   34:*/		regs.LR = 0x82204DB4; return 0x82151E08;
		/* 82204DB0h case   34:*/		return 0x82204DB4;
	}
	return 0x82204DB4;
} // Block from 82204D28h-82204DB4h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82204DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204DB4);
		  /* 82204DB4h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82204DB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82204DB4h case    0:*/		return 0x82204DB8;
		  /* 82204DB8h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 82204DB8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82204DB8h case    1:*/		return 0x82204DBC;
		  /* 82204DBCh */ case    2:  		/* bc 12, CR6_EQ, 764 */
		/* 82204DBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x822050B8;  }
		/* 82204DBCh case    2:*/		return 0x82204DC0;
		  /* 82204DC0h */ case    3:  		/* cmpwi CR6, R11, 12 */
		/* 82204DC0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82204DC0h case    3:*/		return 0x82204DC4;
		  /* 82204DC4h */ case    4:  		/* bc 12, CR6_EQ, 352 */
		/* 82204DC4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82204F24;  }
		/* 82204DC4h case    4:*/		return 0x82204DC8;
		  /* 82204DC8h */ case    5:  		/* cmpwi CR6, R11, 14 */
		/* 82204DC8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82204DC8h case    5:*/		return 0x82204DCC;
		  /* 82204DCCh */ case    6:  		/* bc 12, CR6_EQ, 144 */
		/* 82204DCCh case    6:*/		if ( regs.CR[6].eq ) { return 0x82204E5C;  }
		/* 82204DCCh case    6:*/		return 0x82204DD0;
		  /* 82204DD0h */ case    7:  		/* cmpwi CR6, R11, 27 */
		/* 82204DD0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 82204DD0h case    7:*/		return 0x82204DD4;
		  /* 82204DD4h */ case    8:  		/* bc 12, CR6_EQ, 76 */
		/* 82204DD4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82204E20;  }
		/* 82204DD4h case    8:*/		return 0x82204DD8;
		  /* 82204DD8h */ case    9:  		/* cmpwi CR6, R11, 29 */
		/* 82204DD8h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 82204DD8h case    9:*/		return 0x82204DDC;
		  /* 82204DDCh */ case   10:  		/* bc 4, CR6_EQ, -156 */
		/* 82204DDCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x82204D40;  }
		/* 82204DDCh case   10:*/		return 0x82204DE0;
		  /* 82204DE0h */ case   11:  		/* lwz R11, <#[R31 + 40]> */
		/* 82204DE0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82204DE0h case   11:*/		return 0x82204DE4;
		  /* 82204DE4h */ case   12:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 82204DE4h case   12:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 82204DE4h case   12:*/		return 0x82204DE8;
		  /* 82204DE8h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 82204DE8h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82204DF4;  }
		/* 82204DE8h case   13:*/		return 0x82204DEC;
		  /* 82204DECh */ case   14:  		/* mr R3, R31 */
		/* 82204DECh case   14:*/		regs.R3 = regs.R31;
		/* 82204DECh case   14:*/		return 0x82204DF0;
		  /* 82204DF0h */ case   15:  		/* bl -1264 */
		/* 82204DF0h case   15:*/		regs.LR = 0x82204DF4; return 0x82204900;
		/* 82204DF0h case   15:*/		return 0x82204DF4;
	}
	return 0x82204DF4;
} // Block from 82204DB4h-82204DF4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82204DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204DF4);
		  /* 82204DF4h */ case    0:  		/* lwz R30, <#[R28 + 16]> */
		/* 82204DF4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000010) );
		/* 82204DF4h case    0:*/		return 0x82204DF8;
		  /* 82204DF8h */ case    1:  		/* b 812 */
		/* 82204DF8h case    1:*/		return 0x82205124;
		/* 82204DF8h case    1:*/		return 0x82204DFC;
	}
	return 0x82204DFC;
} // Block from 82204DF4h-82204DFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204DFC);
		  /* 82204DFCh */ case    0:  		/* li R4, 4801 */
		/* 82204DFCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204DFCh case    0:*/		return 0x82204E00;
		  /* 82204E00h */ case    1:  		/* mr R3, R31 */
		/* 82204E00h case    1:*/		regs.R3 = regs.R31;
		/* 82204E00h case    1:*/		return 0x82204E04;
		  /* 82204E04h */ case    2:  		/* bl -733084 */
		/* 82204E04h case    2:*/		regs.LR = 0x82204E08; return 0x82151E68;
		/* 82204E04h case    2:*/		return 0x82204E08;
	}
	return 0x82204E08;
} // Block from 82204DFCh-82204E08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204E08);
		  /* 82204E08h */ case    0:  		/* li R4, 4801 */
		/* 82204E08h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204E08h case    0:*/		return 0x82204E0C;
		  /* 82204E0Ch */ case    1:  		/* mr R3, R31 */
		/* 82204E0Ch case    1:*/		regs.R3 = regs.R31;
		/* 82204E0Ch case    1:*/		return 0x82204E10;
		  /* 82204E10h */ case    2:  		/* bl -733096 */
		/* 82204E10h case    2:*/		regs.LR = 0x82204E14; return 0x82151E68;
		/* 82204E10h case    2:*/		return 0x82204E14;
	}
	return 0x82204E14;
} // Block from 82204E08h-82204E14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204E14);
		  /* 82204E14h */ case    0:  		/* li R4, 4801 */
		/* 82204E14h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82204E14h case    0:*/		return 0x82204E18;
		  /* 82204E18h */ case    1:  		/* mr R3, R31 */
		/* 82204E18h case    1:*/		regs.R3 = regs.R31;
		/* 82204E18h case    1:*/		return 0x82204E1C;
		  /* 82204E1Ch */ case    2:  		/* bl -733108 */
		/* 82204E1Ch case    2:*/		regs.LR = 0x82204E20; return 0x82151E68;
		/* 82204E1Ch case    2:*/		return 0x82204E20;
	}
	return 0x82204E20;
} // Block from 82204E14h-82204E20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204E20);
		  /* 82204E20h */ case    0:  		/* lwz R11, <#[R28 + 56]> */
		/* 82204E20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000038) );
		/* 82204E20h case    0:*/		return 0x82204E24;
		  /* 82204E24h */ case    1:  		/* cmplwi CR6, R11, 7 */
		/* 82204E24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 82204E24h case    1:*/		return 0x82204E28;
		  /* 82204E28h */ case    2:  		/* bc 12, CR6_EQ, 752 */
		/* 82204E28h case    2:*/		if ( regs.CR[6].eq ) { return 0x82205118;  }
		/* 82204E28h case    2:*/		return 0x82204E2C;
		  /* 82204E2Ch */ case    3:  		/* addi R30, R28, 92 */
		/* 82204E2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x5C);
		/* 82204E2Ch case    3:*/		return 0x82204E30;
		  /* 82204E30h */ case    4:  		/* li R29, 2 */
		/* 82204E30h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x2);
		/* 82204E30h case    4:*/		return 0x82204E34;
		  /* 82204E34h */ case    5:  		/* lwz R4, <#[R30]> */
		/* 82204E34h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82204E34h case    5:*/		return 0x82204E38;
		  /* 82204E38h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 82204E38h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82204E38h case    6:*/		return 0x82204E3C;
		  /* 82204E3Ch */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 82204E3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82204E4C;  }
		/* 82204E3Ch case    7:*/		return 0x82204E40;
		  /* 82204E40h */ case    8:  		/* mr R5, R26 */
		/* 82204E40h case    8:*/		regs.R5 = regs.R26;
		/* 82204E40h case    8:*/		return 0x82204E44;
		  /* 82204E44h */ case    9:  		/* mr R3, R31 */
		/* 82204E44h case    9:*/		regs.R3 = regs.R31;
		/* 82204E44h case    9:*/		return 0x82204E48;
		  /* 82204E48h */ case   10:  		/* bl -52432 */
		/* 82204E48h case   10:*/		regs.LR = 0x82204E4C; return 0x821F8178;
		/* 82204E48h case   10:*/		return 0x82204E4C;
	}
	return 0x82204E4C;
} // Block from 82204E20h-82204E4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82204E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204E4C);
		  /* 82204E4Ch */ case    0:  		/* addic. R29, R29, -1 */
		/* 82204E4Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82204E4Ch case    0:*/		return 0x82204E50;
		  /* 82204E50h */ case    1:  		/* addi R30, R30, 4 */
		/* 82204E50h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82204E50h case    1:*/		return 0x82204E54;
		  /* 82204E54h */ case    2:  		/* bc 4, CR0_EQ, -32 */
		/* 82204E54h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82204E34;  }
		/* 82204E54h case    2:*/		return 0x82204E58;
		  /* 82204E58h */ case    3:  		/* b 704 */
		/* 82204E58h case    3:*/		return 0x82205118;
		/* 82204E58h case    3:*/		return 0x82204E5C;
	}
	return 0x82204E5C;
} // Block from 82204E4Ch-82204E5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82204E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204E5C);
		  /* 82204E5Ch */ case    0:  		/* lwz R11, <#[R28 + 28]> */
		/* 82204E5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 82204E5Ch case    0:*/		return 0x82204E60;
		  /* 82204E60h */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 82204E60h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82204E60h case    1:*/		return 0x82204E64;
		  /* 82204E64h */ case    2:  		/* bc 12, CR6_LT, 68 */
		/* 82204E64h case    2:*/		if ( regs.CR[6].lt ) { return 0x82204EA8;  }
		/* 82204E64h case    2:*/		return 0x82204E68;
		  /* 82204E68h */ case    3:  		/* cmpwi CR6, R11, 3 */
		/* 82204E68h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82204E68h case    3:*/		return 0x82204E6C;
		  /* 82204E6Ch */ case    4:  		/* bc 4, CR6_GT, 164 */
		/* 82204E6Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x82204F10;  }
		/* 82204E6Ch case    4:*/		return 0x82204E70;
		  /* 82204E70h */ case    5:  		/* cmpwi CR6, R11, 25 */
		/* 82204E70h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 82204E70h case    5:*/		return 0x82204E74;
		  /* 82204E74h */ case    6:  		/* bc 4, CR6_GT, 52 */
		/* 82204E74h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82204EA8;  }
		/* 82204E74h case    6:*/		return 0x82204E78;
		  /* 82204E78h */ case    7:  		/* cmpwi CR6, R11, 27 */
		/* 82204E78h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 82204E78h case    7:*/		return 0x82204E7C;
		  /* 82204E7Ch */ case    8:  		/* bc 4, CR6_GT, 148 */
		/* 82204E7Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x82204F10;  }
		/* 82204E7Ch case    8:*/		return 0x82204E80;
		  /* 82204E80h */ case    9:  		/* cmpwi CR6, R11, 32 */
		/* 82204E80h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 82204E80h case    9:*/		return 0x82204E84;
		  /* 82204E84h */ case   10:  		/* bc 4, CR6_EQ, 36 */
		/* 82204E84h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82204EA8;  }
		/* 82204E84h case   10:*/		return 0x82204E88;
		  /* 82204E88h */ case   11:  		/* lwz R11, <#[R28 + 32]> */
		/* 82204E88h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 82204E88h case   11:*/		return 0x82204E8C;
		  /* 82204E8Ch */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 82204E8Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82204E8Ch case   12:*/		return 0x82204E90;
		  /* 82204E90h */ case   13:  		/* lwz R11, <#[R11 + 24]> */
		/* 82204E90h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82204E90h case   13:*/		return 0x82204E94;
		  /* 82204E94h */ case   14:  		/* cmplwi CR6, R11, 14 */
		/* 82204E94h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 82204E94h case   14:*/		return 0x82204E98;
		  /* 82204E98h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 82204E98h case   15:*/		if ( regs.CR[6].eq ) { return 0x82204EA4;  }
		/* 82204E98h case   15:*/		return 0x82204E9C;
		  /* 82204E9Ch */ case   16:  		/* cmplwi CR6, R11, 15 */
		/* 82204E9Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 82204E9Ch case   16:*/		return 0x82204EA0;
		  /* 82204EA0h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 82204EA0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82204EA8;  }
		/* 82204EA0h case   17:*/		return 0x82204EA4;
	}
	return 0x82204EA4;
} // Block from 82204E5Ch-82204EA4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82204EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204EA4);
		  /* 82204EA4h */ case    0:  		/* mr R25, R24 */
		/* 82204EA4h case    0:*/		regs.R25 = regs.R24;
		/* 82204EA4h case    0:*/		return 0x82204EA8;
	}
	return 0x82204EA8;
} // Block from 82204EA4h-82204EA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82204EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204EA8);
		  /* 82204EA8h */ case    0:  		/* lwz R30, <#[R28 + 32]> */
		/* 82204EA8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000020) );
		/* 82204EA8h case    0:*/		return 0x82204EAC;
		  /* 82204EACh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82204EACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82204EACh case    1:*/		return 0x82204EB0;
		  /* 82204EB0h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82204EB0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82204F08;  }
		/* 82204EB0h case    2:*/		return 0x82204EB4;
		  /* 82204EB4h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 82204EB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204EB4h case    3:*/		return 0x82204EB8;
		  /* 82204EB8h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204EB8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204EB8h case    4:*/		return 0x82204EBC;
		  /* 82204EBCh */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82204EBCh case    5:*/		if ( !regs.CR[0].eq ) { return 0x82204EE4;  }
		/* 82204EBCh case    5:*/		return 0x82204EC0;
		  /* 82204EC0h */ case    6:  		/* lwz R11, <#[R26]> */
		/* 82204EC0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204EC0h case    6:*/		return 0x82204EC4;
		  /* 82204EC4h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204EC4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204EC4h case    7:*/		return 0x82204EC8;
		  /* 82204EC8h */ case    8:  		/* addic. R3, R11, -4 */
		/* 82204EC8h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82204EC8h case    8:*/		return 0x82204ECC;
		  /* 82204ECCh */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82204ECCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82204EE4;  }
		/* 82204ECCh case    9:*/		return 0x82204ED0;
		  /* 82204ED0h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204ED0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204ED0h case   10:*/		return 0x82204ED4;
		  /* 82204ED4h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 82204ED4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82204ED4h case   11:*/		return 0x82204ED8;
		  /* 82204ED8h */ case   12:  		/* addi R11, R11, 1 */
		/* 82204ED8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82204ED8h case   12:*/		return 0x82204EDC;
		  /* 82204EDCh */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82204EDCh case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204EDCh case   13:*/		return 0x82204EE0;
		  /* 82204EE0h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 82204EE0h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82204EF0;  }
		/* 82204EE0h case   14:*/		return 0x82204EE4;
	}
	return 0x82204EE4;
} // Block from 82204EA8h-82204EE4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82204EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204EE4);
		  /* 82204EE4h */ case    0:  		/* li R4, 1 */
		/* 82204EE4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82204EE4h case    0:*/		return 0x82204EE8;
		  /* 82204EE8h */ case    1:  		/* mr R3, R26 */
		/* 82204EE8h case    1:*/		regs.R3 = regs.R26;
		/* 82204EE8h case    1:*/		return 0x82204EEC;
		  /* 82204EECh */ case    2:  		/* bl -491044 */
		/* 82204EECh case    2:*/		regs.LR = 0x82204EF0; return 0x8218D0C8;
		/* 82204EECh case    2:*/		return 0x82204EF0;
	}
	return 0x82204EF0;
} // Block from 82204EE4h-82204EF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204EF0);
		  /* 82204EF0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204EF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204EF0h case    0:*/		return 0x82204EF4;
		  /* 82204EF4h */ case    1:  		/* addi R10, R11, 4 */
		/* 82204EF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204EF4h case    1:*/		return 0x82204EF8;
		  /* 82204EF8h */ case    2:  		/* addi R9, R11, 1 */
		/* 82204EF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82204EF8h case    2:*/		return 0x82204EFC;
		  /* 82204EFCh */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82204EFCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82204EFCh case    3:*/		return 0x82204F00;
		  /* 82204F00h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82204F00h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82204F00h case    4:*/		return 0x82204F04;
		  /* 82204F04h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82204F04h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82204F04h case    5:*/		return 0x82204F08;
	}
	return 0x82204F08;
} // Block from 82204EF0h-82204F08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204F08);
		  /* 82204F08h */ case    0:  		/* lwz R30, <#[R28 + 36]> */
		/* 82204F08h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000024) );
		/* 82204F08h case    0:*/		return 0x82204F0C;
		  /* 82204F0Ch */ case    1:  		/* b 528 */
		/* 82204F0Ch case    1:*/		return 0x8220511C;
		/* 82204F0Ch case    1:*/		return 0x82204F10;
	}
	return 0x82204F10;
} // Block from 82204F08h-82204F10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82204F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204F10);
		  /* 82204F10h */ case    0:  		/* mr R5, R26 */
		/* 82204F10h case    0:*/		regs.R5 = regs.R26;
		/* 82204F10h case    0:*/		return 0x82204F14;
		  /* 82204F14h */ case    1:  		/* lwz R4, <#[R28 + 32]> */
		/* 82204F14h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000020) );
		/* 82204F14h case    1:*/		return 0x82204F18;
		  /* 82204F18h */ case    2:  		/* mr R3, R31 */
		/* 82204F18h case    2:*/		regs.R3 = regs.R31;
		/* 82204F18h case    2:*/		return 0x82204F1C;
		  /* 82204F1Ch */ case    3:  		/* bl -52644 */
		/* 82204F1Ch case    3:*/		regs.LR = 0x82204F20; return 0x821F8178;
		/* 82204F1Ch case    3:*/		return 0x82204F20;
		  /* 82204F20h */ case    4:  		/* b -24 */
		/* 82204F20h case    4:*/		return 0x82204F08;
		/* 82204F20h case    4:*/		return 0x82204F24;
	}
	return 0x82204F24;
} // Block from 82204F10h-82204F24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82204F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204F24);
		  /* 82204F24h */ case    0:  		/* lwz R30, <#[R28 + 20]> */
		/* 82204F24h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000014) );
		/* 82204F24h case    0:*/		return 0x82204F28;
		  /* 82204F28h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82204F28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82204F28h case    1:*/		return 0x82204F2C;
		  /* 82204F2Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82204F2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82204F84;  }
		/* 82204F2Ch case    2:*/		return 0x82204F30;
		  /* 82204F30h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 82204F30h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204F30h case    3:*/		return 0x82204F34;
		  /* 82204F34h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204F34h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204F34h case    4:*/		return 0x82204F38;
		  /* 82204F38h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82204F38h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82204F60;  }
		/* 82204F38h case    5:*/		return 0x82204F3C;
		  /* 82204F3Ch */ case    6:  		/* lwz R11, <#[R26]> */
		/* 82204F3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204F3Ch case    6:*/		return 0x82204F40;
		  /* 82204F40h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204F40h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204F40h case    7:*/		return 0x82204F44;
		  /* 82204F44h */ case    8:  		/* addic. R3, R11, -4 */
		/* 82204F44h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82204F44h case    8:*/		return 0x82204F48;
		  /* 82204F48h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82204F48h case    9:*/		if ( regs.CR[0].eq ) { return 0x82204F60;  }
		/* 82204F48h case    9:*/		return 0x82204F4C;
		  /* 82204F4Ch */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204F4Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204F4Ch case   10:*/		return 0x82204F50;
		  /* 82204F50h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 82204F50h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82204F50h case   11:*/		return 0x82204F54;
		  /* 82204F54h */ case   12:  		/* addi R11, R11, 1 */
		/* 82204F54h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82204F54h case   12:*/		return 0x82204F58;
		  /* 82204F58h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82204F58h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204F58h case   13:*/		return 0x82204F5C;
		  /* 82204F5Ch */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 82204F5Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x82204F6C;  }
		/* 82204F5Ch case   14:*/		return 0x82204F60;
	}
	return 0x82204F60;
} // Block from 82204F24h-82204F60h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82204F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204F60);
		  /* 82204F60h */ case    0:  		/* li R4, 1 */
		/* 82204F60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82204F60h case    0:*/		return 0x82204F64;
		  /* 82204F64h */ case    1:  		/* mr R3, R26 */
		/* 82204F64h case    1:*/		regs.R3 = regs.R26;
		/* 82204F64h case    1:*/		return 0x82204F68;
		  /* 82204F68h */ case    2:  		/* bl -491168 */
		/* 82204F68h case    2:*/		regs.LR = 0x82204F6C; return 0x8218D0C8;
		/* 82204F68h case    2:*/		return 0x82204F6C;
	}
	return 0x82204F6C;
} // Block from 82204F60h-82204F6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204F6C);
		  /* 82204F6Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204F6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204F6Ch case    0:*/		return 0x82204F70;
		  /* 82204F70h */ case    1:  		/* addi R10, R11, 4 */
		/* 82204F70h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204F70h case    1:*/		return 0x82204F74;
		  /* 82204F74h */ case    2:  		/* addi R9, R11, 1 */
		/* 82204F74h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82204F74h case    2:*/		return 0x82204F78;
		  /* 82204F78h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82204F78h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82204F78h case    3:*/		return 0x82204F7C;
		  /* 82204F7Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82204F7Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82204F7Ch case    4:*/		return 0x82204F80;
		  /* 82204F80h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82204F80h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82204F80h case    5:*/		return 0x82204F84;
	}
	return 0x82204F84;
} // Block from 82204F6Ch-82204F84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204F84);
		  /* 82204F84h */ case    0:  		/* lwz R30, <#[R28 + 24]> */
		/* 82204F84h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000018) );
		/* 82204F84h case    0:*/		return 0x82204F88;
		  /* 82204F88h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82204F88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82204F88h case    1:*/		return 0x82204F8C;
		  /* 82204F8Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82204F8Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82204FE4;  }
		/* 82204F8Ch case    2:*/		return 0x82204F90;
		  /* 82204F90h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 82204F90h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204F90h case    3:*/		return 0x82204F94;
		  /* 82204F94h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204F94h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204F94h case    4:*/		return 0x82204F98;
		  /* 82204F98h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82204F98h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82204FC0;  }
		/* 82204F98h case    5:*/		return 0x82204F9C;
		  /* 82204F9Ch */ case    6:  		/* lwz R11, <#[R26]> */
		/* 82204F9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204F9Ch case    6:*/		return 0x82204FA0;
		  /* 82204FA0h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82204FA0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82204FA0h case    7:*/		return 0x82204FA4;
		  /* 82204FA4h */ case    8:  		/* addic. R3, R11, -4 */
		/* 82204FA4h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82204FA4h case    8:*/		return 0x82204FA8;
		  /* 82204FA8h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82204FA8h case    9:*/		if ( regs.CR[0].eq ) { return 0x82204FC0;  }
		/* 82204FA8h case    9:*/		return 0x82204FAC;
		  /* 82204FACh */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204FACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204FACh case   10:*/		return 0x82204FB0;
		  /* 82204FB0h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 82204FB0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82204FB0h case   11:*/		return 0x82204FB4;
		  /* 82204FB4h */ case   12:  		/* addi R11, R11, 1 */
		/* 82204FB4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82204FB4h case   12:*/		return 0x82204FB8;
		  /* 82204FB8h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82204FB8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82204FB8h case   13:*/		return 0x82204FBC;
		  /* 82204FBCh */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 82204FBCh case   14:*/		if ( !regs.CR[6].gt ) { return 0x82204FCC;  }
		/* 82204FBCh case   14:*/		return 0x82204FC0;
	}
	return 0x82204FC0;
} // Block from 82204F84h-82204FC0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82204FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204FC0);
		  /* 82204FC0h */ case    0:  		/* li R4, 1 */
		/* 82204FC0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82204FC0h case    0:*/		return 0x82204FC4;
		  /* 82204FC4h */ case    1:  		/* mr R3, R26 */
		/* 82204FC4h case    1:*/		regs.R3 = regs.R26;
		/* 82204FC4h case    1:*/		return 0x82204FC8;
		  /* 82204FC8h */ case    2:  		/* bl -491264 */
		/* 82204FC8h case    2:*/		regs.LR = 0x82204FCC; return 0x8218D0C8;
		/* 82204FC8h case    2:*/		return 0x82204FCC;
	}
	return 0x82204FCC;
} // Block from 82204FC0h-82204FCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82204FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204FCC);
		  /* 82204FCCh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82204FCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82204FCCh case    0:*/		return 0x82204FD0;
		  /* 82204FD0h */ case    1:  		/* addi R10, R11, 4 */
		/* 82204FD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82204FD0h case    1:*/		return 0x82204FD4;
		  /* 82204FD4h */ case    2:  		/* addi R9, R11, 1 */
		/* 82204FD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82204FD4h case    2:*/		return 0x82204FD8;
		  /* 82204FD8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82204FD8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82204FD8h case    3:*/		return 0x82204FDC;
		  /* 82204FDCh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82204FDCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82204FDCh case    4:*/		return 0x82204FE0;
		  /* 82204FE0h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82204FE0h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82204FE0h case    5:*/		return 0x82204FE4;
	}
	return 0x82204FE4;
} // Block from 82204FCCh-82204FE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82204FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82204FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82204FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82204FE4);
		  /* 82204FE4h */ case    0:  		/* lwz R30, <#[R28 + 28]> */
		/* 82204FE4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x0000001C) );
		/* 82204FE4h case    0:*/		return 0x82204FE8;
		  /* 82204FE8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82204FE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82204FE8h case    1:*/		return 0x82204FEC;
		  /* 82204FECh */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82204FECh case    2:*/		if ( regs.CR[6].eq ) { return 0x82205044;  }
		/* 82204FECh case    2:*/		return 0x82204FF0;
		  /* 82204FF0h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 82204FF0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82204FF0h case    3:*/		return 0x82204FF4;
		  /* 82204FF4h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82204FF4h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82204FF4h case    4:*/		return 0x82204FF8;
		  /* 82204FF8h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82204FF8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82205020;  }
		/* 82204FF8h case    5:*/		return 0x82204FFC;
		  /* 82204FFCh */ case    6:  		/* lwz R11, <#[R26]> */
		/* 82204FFCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82204FFCh case    6:*/		return 0x82205000;
		  /* 82205000h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205000h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205000h case    7:*/		return 0x82205004;
		  /* 82205004h */ case    8:  		/* addic. R3, R11, -4 */
		/* 82205004h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82205004h case    8:*/		return 0x82205008;
		  /* 82205008h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82205008h case    9:*/		if ( regs.CR[0].eq ) { return 0x82205020;  }
		/* 82205008h case    9:*/		return 0x8220500C;
		  /* 8220500Ch */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 8220500Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220500Ch case   10:*/		return 0x82205010;
		  /* 82205010h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 82205010h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82205010h case   11:*/		return 0x82205014;
		  /* 82205014h */ case   12:  		/* addi R11, R11, 1 */
		/* 82205014h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205014h case   12:*/		return 0x82205018;
		  /* 82205018h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82205018h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82205018h case   13:*/		return 0x8220501C;
		  /* 8220501Ch */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 8220501Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x8220502C;  }
		/* 8220501Ch case   14:*/		return 0x82205020;
	}
	return 0x82205020;
} // Block from 82204FE4h-82205020h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82205020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205020);
		  /* 82205020h */ case    0:  		/* li R4, 1 */
		/* 82205020h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205020h case    0:*/		return 0x82205024;
		  /* 82205024h */ case    1:  		/* mr R3, R26 */
		/* 82205024h case    1:*/		regs.R3 = regs.R26;
		/* 82205024h case    1:*/		return 0x82205028;
		  /* 82205028h */ case    2:  		/* bl -491360 */
		/* 82205028h case    2:*/		regs.LR = 0x8220502C; return 0x8218D0C8;
		/* 82205028h case    2:*/		return 0x8220502C;
	}
	return 0x8220502C;
} // Block from 82205020h-8220502Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220502Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220502C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220502C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220502C);
		  /* 8220502Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8220502Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220502Ch case    0:*/		return 0x82205030;
		  /* 82205030h */ case    1:  		/* addi R10, R11, 4 */
		/* 82205030h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82205030h case    1:*/		return 0x82205034;
		  /* 82205034h */ case    2:  		/* addi R9, R11, 1 */
		/* 82205034h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82205034h case    2:*/		return 0x82205038;
		  /* 82205038h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82205038h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82205038h case    3:*/		return 0x8220503C;
		  /* 8220503Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8220503Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8220503Ch case    4:*/		return 0x82205040;
		  /* 82205040h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82205040h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82205040h case    5:*/		return 0x82205044;
	}
	return 0x82205044;
} // Block from 8220502Ch-82205044h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82205044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205044);
		  /* 82205044h */ case    0:  		/* lwz R30, <#[R28 + 32]> */
		/* 82205044h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000020) );
		/* 82205044h case    0:*/		return 0x82205048;
		  /* 82205048h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82205048h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82205048h case    1:*/		return 0x8220504C;
		  /* 8220504Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8220504Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x822050A4;  }
		/* 8220504Ch case    2:*/		return 0x82205050;
		  /* 82205050h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 82205050h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82205050h case    3:*/		return 0x82205054;
		  /* 82205054h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205054h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205054h case    4:*/		return 0x82205058;
		  /* 82205058h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82205058h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82205080;  }
		/* 82205058h case    5:*/		return 0x8220505C;
		  /* 8220505Ch */ case    6:  		/* lwz R11, <#[R26]> */
		/* 8220505Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8220505Ch case    6:*/		return 0x82205060;
		  /* 82205060h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205060h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205060h case    7:*/		return 0x82205064;
		  /* 82205064h */ case    8:  		/* addic. R3, R11, -4 */
		/* 82205064h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82205064h case    8:*/		return 0x82205068;
		  /* 82205068h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82205068h case    9:*/		if ( regs.CR[0].eq ) { return 0x82205080;  }
		/* 82205068h case    9:*/		return 0x8220506C;
		  /* 8220506Ch */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 8220506Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220506Ch case   10:*/		return 0x82205070;
		  /* 82205070h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 82205070h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82205070h case   11:*/		return 0x82205074;
		  /* 82205074h */ case   12:  		/* addi R11, R11, 1 */
		/* 82205074h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205074h case   12:*/		return 0x82205078;
		  /* 82205078h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82205078h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82205078h case   13:*/		return 0x8220507C;
		  /* 8220507Ch */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 8220507Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x8220508C;  }
		/* 8220507Ch case   14:*/		return 0x82205080;
	}
	return 0x82205080;
} // Block from 82205044h-82205080h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82205080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205080);
		  /* 82205080h */ case    0:  		/* li R4, 1 */
		/* 82205080h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205080h case    0:*/		return 0x82205084;
		  /* 82205084h */ case    1:  		/* mr R3, R26 */
		/* 82205084h case    1:*/		regs.R3 = regs.R26;
		/* 82205084h case    1:*/		return 0x82205088;
		  /* 82205088h */ case    2:  		/* bl -491456 */
		/* 82205088h case    2:*/		regs.LR = 0x8220508C; return 0x8218D0C8;
		/* 82205088h case    2:*/		return 0x8220508C;
	}
	return 0x8220508C;
} // Block from 82205080h-8220508Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220508Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220508C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220508C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220508C);
		  /* 8220508Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8220508Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220508Ch case    0:*/		return 0x82205090;
		  /* 82205090h */ case    1:  		/* addi R10, R11, 4 */
		/* 82205090h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82205090h case    1:*/		return 0x82205094;
		  /* 82205094h */ case    2:  		/* addi R9, R11, 1 */
		/* 82205094h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82205094h case    2:*/		return 0x82205098;
		  /* 82205098h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82205098h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82205098h case    3:*/		return 0x8220509C;
		  /* 8220509Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8220509Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8220509Ch case    4:*/		return 0x822050A0;
		  /* 822050A0h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 822050A0h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 822050A0h case    5:*/		return 0x822050A4;
	}
	return 0x822050A4;
} // Block from 8220508Ch-822050A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822050A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822050A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822050A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822050A4);
		  /* 822050A4h */ case    0:  		/* lwz R11, <#[R28 + 16]> */
		/* 822050A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 822050A4h case    0:*/		return 0x822050A8;
		  /* 822050A8h */ case    1:  		/* cmpwi CR6, R11, 12 */
		/* 822050A8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 822050A8h case    1:*/		return 0x822050AC;
		  /* 822050ACh */ case    2:  		/* bc 4, CR6_EQ, -876 */
		/* 822050ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82204D40;  }
		/* 822050ACh case    2:*/		return 0x822050B0;
		  /* 822050B0h */ case    3:  		/* addi R27, R27, 1 */
		/* 822050B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 822050B0h case    3:*/		return 0x822050B4;
		  /* 822050B4h */ case    4:  		/* b -884 */
		/* 822050B4h case    4:*/		return 0x82204D40;
		/* 822050B4h case    4:*/		return 0x822050B8;
	}
	return 0x822050B8;
} // Block from 822050A4h-822050B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822050B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822050B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822050B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822050B8);
		  /* 822050B8h */ case    0:  		/* lwz R30, <#[R28 + 8]> */
		/* 822050B8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000008) );
		/* 822050B8h case    0:*/		return 0x822050BC;
		  /* 822050BCh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 822050BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822050BCh case    1:*/		return 0x822050C0;
		  /* 822050C0h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 822050C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82205118;  }
		/* 822050C0h case    2:*/		return 0x822050C4;
		  /* 822050C4h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 822050C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 822050C4h case    3:*/		return 0x822050C8;
		  /* 822050C8h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822050C8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822050C8h case    4:*/		return 0x822050CC;
		  /* 822050CCh */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 822050CCh case    5:*/		if ( !regs.CR[0].eq ) { return 0x822050F4;  }
		/* 822050CCh case    5:*/		return 0x822050D0;
		  /* 822050D0h */ case    6:  		/* lwz R11, <#[R26]> */
		/* 822050D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 822050D0h case    6:*/		return 0x822050D4;
		  /* 822050D4h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822050D4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822050D4h case    7:*/		return 0x822050D8;
		  /* 822050D8h */ case    8:  		/* addic. R3, R11, -4 */
		/* 822050D8h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 822050D8h case    8:*/		return 0x822050DC;
		  /* 822050DCh */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 822050DCh case    9:*/		if ( regs.CR[0].eq ) { return 0x822050F4;  }
		/* 822050DCh case    9:*/		return 0x822050E0;
		  /* 822050E0h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 822050E0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822050E0h case   10:*/		return 0x822050E4;
		  /* 822050E4h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 822050E4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 822050E4h case   11:*/		return 0x822050E8;
		  /* 822050E8h */ case   12:  		/* addi R11, R11, 1 */
		/* 822050E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822050E8h case   12:*/		return 0x822050EC;
		  /* 822050ECh */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 822050ECh case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822050ECh case   13:*/		return 0x822050F0;
		  /* 822050F0h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 822050F0h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82205100;  }
		/* 822050F0h case   14:*/		return 0x822050F4;
	}
	return 0x822050F4;
} // Block from 822050B8h-822050F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822050F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822050F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822050F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822050F4);
		  /* 822050F4h */ case    0:  		/* li R4, 1 */
		/* 822050F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822050F4h case    0:*/		return 0x822050F8;
		  /* 822050F8h */ case    1:  		/* mr R3, R26 */
		/* 822050F8h case    1:*/		regs.R3 = regs.R26;
		/* 822050F8h case    1:*/		return 0x822050FC;
		  /* 822050FCh */ case    2:  		/* bl -491572 */
		/* 822050FCh case    2:*/		regs.LR = 0x82205100; return 0x8218D0C8;
		/* 822050FCh case    2:*/		return 0x82205100;
	}
	return 0x82205100;
} // Block from 822050F4h-82205100h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205100);
		  /* 82205100h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205100h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205100h case    0:*/		return 0x82205104;
		  /* 82205104h */ case    1:  		/* addi R10, R11, 4 */
		/* 82205104h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82205104h case    1:*/		return 0x82205108;
		  /* 82205108h */ case    2:  		/* addi R9, R11, 1 */
		/* 82205108h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82205108h case    2:*/		return 0x8220510C;
		  /* 8220510Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8220510Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8220510Ch case    3:*/		return 0x82205110;
		  /* 82205110h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82205110h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82205110h case    4:*/		return 0x82205114;
		  /* 82205114h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82205114h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82205114h case    5:*/		return 0x82205118;
	}
	return 0x82205118;
} // Block from 82205100h-82205118h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82205118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205118);
		  /* 82205118h */ case    0:  		/* lwz R30, <#[R28 + 12]> */
		/* 82205118h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x0000000C) );
		/* 82205118h case    0:*/		return 0x8220511C;
	}
	return 0x8220511C;
} // Block from 82205118h-8220511Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220511Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220511C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220511C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220511C);
		  /* 8220511Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220511Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220511Ch case    0:*/		return 0x82205120;
		  /* 82205120h */ case    1:  		/* bc 12, CR6_EQ, -992 */
		/* 82205120h case    1:*/		if ( regs.CR[6].eq ) { return 0x82204D40;  }
		/* 82205120h case    1:*/		return 0x82205124;
	}
	return 0x82205124;
} // Block from 8220511Ch-82205124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82205124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205124);
		  /* 82205124h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 82205124h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82205124h case    0:*/		return 0x82205128;
		  /* 82205128h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205128h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205128h case    1:*/		return 0x8220512C;
		  /* 8220512Ch */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 8220512Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82205154;  }
		/* 8220512Ch case    2:*/		return 0x82205130;
		  /* 82205130h */ case    3:  		/* lwz R11, <#[R26]> */
		/* 82205130h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82205130h case    3:*/		return 0x82205134;
		  /* 82205134h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205134h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205134h case    4:*/		return 0x82205138;
		  /* 82205138h */ case    5:  		/* addic. R3, R11, -4 */
		/* 82205138h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82205138h case    5:*/		return 0x8220513C;
		  /* 8220513Ch */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8220513Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82205154;  }
		/* 8220513Ch case    6:*/		return 0x82205140;
		  /* 82205140h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205140h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205140h case    7:*/		return 0x82205144;
		  /* 82205144h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 82205144h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82205144h case    8:*/		return 0x82205148;
		  /* 82205148h */ case    9:  		/* addi R11, R11, 1 */
		/* 82205148h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205148h case    9:*/		return 0x8220514C;
		  /* 8220514Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8220514Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8220514Ch case   10:*/		return 0x82205150;
		  /* 82205150h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 82205150h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82205160;  }
		/* 82205150h case   11:*/		return 0x82205154;
	}
	return 0x82205154;
} // Block from 82205124h-82205154h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82205154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205154);
		  /* 82205154h */ case    0:  		/* li R4, 1 */
		/* 82205154h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205154h case    0:*/		return 0x82205158;
		  /* 82205158h */ case    1:  		/* mr R3, R26 */
		/* 82205158h case    1:*/		regs.R3 = regs.R26;
		/* 82205158h case    1:*/		return 0x8220515C;
		  /* 8220515Ch */ case    2:  		/* bl -491668 */
		/* 8220515Ch case    2:*/		regs.LR = 0x82205160; return 0x8218D0C8;
		/* 8220515Ch case    2:*/		return 0x82205160;
	}
	return 0x82205160;
} // Block from 82205154h-82205160h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205160);
		  /* 82205160h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205160h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205160h case    0:*/		return 0x82205164;
		  /* 82205164h */ case    1:  		/* addi R10, R11, 4 */
		/* 82205164h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82205164h case    1:*/		return 0x82205168;
		  /* 82205168h */ case    2:  		/* addi R9, R11, 1 */
		/* 82205168h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82205168h case    2:*/		return 0x8220516C;
		  /* 8220516Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8220516Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8220516Ch case    3:*/		return 0x82205170;
		  /* 82205170h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82205170h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82205170h case    4:*/		return 0x82205174;
		  /* 82205174h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82205174h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82205174h case    5:*/		return 0x82205178;
		  /* 82205178h */ case    6:  		/* b -1080 */
		/* 82205178h case    6:*/		return 0x82204D40;
		/* 82205178h case    6:*/		return 0x8220517C;
	}
	return 0x8220517C;
} // Block from 82205160h-8220517Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220517Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220517C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220517C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220517C);
		  /* 8220517Ch */ case    0:  		/* lwz R10, <#[R31 + 976]> */
		/* 8220517Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003D0) );
		/* 8220517Ch case    0:*/		return 0x82205180;
		  /* 82205180h */ case    1:  		/* addi R11, R31, 972 */
		/* 82205180h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 82205180h case    1:*/		return 0x82205184;
		  /* 82205184h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 82205184h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82205184h case    2:*/		return 0x82205188;
		  /* 82205188h */ case    3:  		/* stw R10, <#[R26]> */
		/* 82205188h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82205188h case    3:*/		return 0x8220518C;
		  /* 8220518Ch */ case    4:  		/* stw R26, <#[R31 + 976]> */
		/* 8220518Ch case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x000003D0) );
		/* 8220518Ch case    4:*/		return 0x82205190;
		  /* 82205190h */ case    5:  		/* bc 12, CR6_EQ, 100 */
		/* 82205190h case    5:*/		if ( regs.CR[6].eq ) { return 0x822051F4;  }
		/* 82205190h case    5:*/		return 0x82205194;
		  /* 82205194h */ case    6:  		/* lwz R11, <#[R31 + 20]> */
		/* 82205194h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82205194h case    6:*/		return 0x82205198;
		  /* 82205198h */ case    7:  		/* addi R30, R27, 1 */
		/* 82205198h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0x1);
		/* 82205198h case    7:*/		return 0x8220519C;
		  /* 8220519Ch */ case    8:  		/* li R5, 0 */
		/* 8220519Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220519Ch case    8:*/		return 0x822051A0;
		  /* 822051A0h */ case    9:  		/* add R11, R11, R30 */
		/* 822051A0h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 822051A0h case    9:*/		return 0x822051A4;
		  /* 822051A4h */ case   10:  		/* mr R3, R31 */
		/* 822051A4h case   10:*/		regs.R3 = regs.R31;
		/* 822051A4h case   10:*/		return 0x822051A8;
		  /* 822051A8h */ case   11:  		/* mulli R4, R11, 40 */
		/* 822051A8h case   11:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R11,0x28);
		/* 822051A8h case   11:*/		return 0x822051AC;
		  /* 822051ACh */ case   12:  		/* bl -494468 */
		/* 822051ACh case   12:*/		regs.LR = 0x822051B0; return 0x8218C628;
		/* 822051ACh case   12:*/		return 0x822051B0;
		  /* 822051B0h */ case   13:  		/* lwz R11, <#[R31 + 20]> */
		/* 822051B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 822051B0h case   13:*/		return 0x822051B4;
		  /* 822051B4h */ case   14:  		/* lwz R4, <#[R31 + 12]> */
		/* 822051B4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822051B4h case   14:*/		return 0x822051B8;
		  /* 822051B8h */ case   15:  		/* mulli R5, R11, 40 */
		/* 822051B8h case   15:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 822051B8h case   15:*/		return 0x822051BC;
		  /* 822051BCh */ case   16:  		/* mr R29, R3 */
		/* 822051BCh case   16:*/		regs.R29 = regs.R3;
		/* 822051BCh case   16:*/		return 0x822051C0;
		  /* 822051C0h */ case   17:  		/* bl -1521680 */
		/* 822051C0h case   17:*/		regs.LR = 0x822051C4; return 0x820919B0;
		/* 822051C0h case   17:*/		return 0x822051C4;
		  /* 822051C4h */ case   18:  		/* lwz R11, <#[R31 + 20]> */
		/* 822051C4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 822051C4h case   18:*/		return 0x822051C8;
		  /* 822051C8h */ case   19:  		/* li R6, 0 */
		/* 822051C8h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822051C8h case   19:*/		return 0x822051CC;
		  /* 822051CCh */ case   20:  		/* mr R3, R31 */
		/* 822051CCh case   20:*/		regs.R3 = regs.R31;
		/* 822051CCh case   20:*/		return 0x822051D0;
		  /* 822051D0h */ case   21:  		/* lwz R4, <#[R31 + 12]> */
		/* 822051D0h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822051D0h case   21:*/		return 0x822051D4;
		  /* 822051D4h */ case   22:  		/* mulli R5, R11, 40 */
		/* 822051D4h case   22:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 822051D4h case   22:*/		return 0x822051D8;
		  /* 822051D8h */ case   23:  		/* bl -656704 */
		/* 822051D8h case   23:*/		regs.LR = 0x822051DC; return 0x82164C98;
		/* 822051D8h case   23:*/		return 0x822051DC;
		  /* 822051DCh */ case   24:  		/* lwz R11, <#[R31 + 20]> */
		/* 822051DCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 822051DCh case   24:*/		return 0x822051E0;
		  /* 822051E0h */ case   25:  		/* stw R29, <#[R31 + 12]> */
		/* 822051E0h case   25:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 822051E0h case   25:*/		return 0x822051E4;
		  /* 822051E4h */ case   26:  		/* addi R10, R11, 1 */
		/* 822051E4h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 822051E4h case   26:*/		return 0x822051E8;
		  /* 822051E8h */ case   27:  		/* add R11, R11, R30 */
		/* 822051E8h case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 822051E8h case   27:*/		return 0x822051EC;
		  /* 822051ECh */ case   28:  		/* stw R10, <#[R31 + 604]> */
		/* 822051ECh case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000025C) );
		/* 822051ECh case   28:*/		return 0x822051F0;
		  /* 822051F0h */ case   29:  		/* stw R11, <#[R31 + 20]> */
		/* 822051F0h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 822051F0h case   29:*/		return 0x822051F4;
	}
	return 0x822051F4;
} // Block from 8220517Ch-822051F4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 822051F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822051F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822051F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822051F4);
		  /* 822051F4h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 822051F4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 822051F4h case    0:*/		return 0x822051F8;
		  /* 822051F8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 822051F8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82205208;  }
		/* 822051F8h case    1:*/		return 0x822051FC;
		  /* 822051FCh */ case    2:  		/* lwz R10, <#[R31 + 44]> */
		/* 822051FCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 822051FCh case    2:*/		return 0x82205200;
		  /* 82205200h */ case    3:  		/* oris R10, R10, 512 */
		/* 82205200h case    3:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82205200h case    3:*/		return 0x82205204;
		  /* 82205204h */ case    4:  		/* stw R10, <#[R31 + 44]> */
		/* 82205204h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 82205204h case    4:*/		return 0x82205208;
	}
	return 0x82205208;
} // Block from 822051F4h-82205208h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82205208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205208);
		  /* 82205208h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82205208h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205208h case    0:*/		return 0x8220520C;
		  /* 8220520Ch */ case    1:  		/* bc 12, CR6_EQ, 348 */
		/* 8220520Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82205368;  }
		/* 8220520Ch case    1:*/		return 0x82205210;
		  /* 82205210h */ case    2:  		/* lwz R11, <#[R31 + 56]> */
		/* 82205210h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82205210h case    2:*/		return 0x82205214;
		  /* 82205214h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82205214h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205214h case    3:*/		return 0x82205218;
		  /* 82205218h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82205218h case    4:*/		if ( regs.CR[6].eq ) { return 0x8220522C;  }
		/* 82205218h case    4:*/		return 0x8220521C;
		  /* 8220521Ch */ case    5:  		/* lwz R11, <#[R11]> */
		/* 8220521Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8220521Ch case    5:*/		return 0x82205220;
		  /* 82205220h */ case    6:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82205220h case    6:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82205220h case    6:*/		return 0x82205224;
		  /* 82205224h */ case    7:  		/* mr R11, R24 */
		/* 82205224h case    7:*/		regs.R11 = regs.R24;
		/* 82205224h case    7:*/		return 0x82205228;
		  /* 82205228h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 82205228h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82205230;  }
		/* 82205228h case    8:*/		return 0x8220522C;
	}
	return 0x8220522C;
} // Block from 82205208h-8220522Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220522Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220522C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220522C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220522C);
		  /* 8220522Ch */ case    0:  		/* mr R11, R23 */
		/* 8220522Ch case    0:*/		regs.R11 = regs.R23;
		/* 8220522Ch case    0:*/		return 0x82205230;
	}
	return 0x82205230;
} // Block from 8220522Ch-82205230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82205230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205230);
		  /* 82205230h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82205230h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82205230h case    0:*/		return 0x82205234;
		  /* 82205234h */ case    1:  		/* bc 12, CR0_EQ, 308 */
		/* 82205234h case    1:*/		if ( regs.CR[0].eq ) { return 0x82205368;  }
		/* 82205234h case    1:*/		return 0x82205238;
		  /* 82205238h */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 82205238h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82205238h case    2:*/		return 0x8220523C;
		  /* 8220523Ch */ case    3:  		/* li R5, 0 */
		/* 8220523Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220523Ch case    3:*/		return 0x82205240;
		  /* 82205240h */ case    4:  		/* mr R3, R31 */
		/* 82205240h case    4:*/		regs.R3 = regs.R31;
		/* 82205240h case    4:*/		return 0x82205244;
		  /* 82205244h */ case    5:  		/* addi R11, R11, 2 */
		/* 82205244h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82205244h case    5:*/		return 0x82205248;
		  /* 82205248h */ case    6:  		/* mulli R4, R11, 40 */
		/* 82205248h case    6:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R11,0x28);
		/* 82205248h case    6:*/		return 0x8220524C;
		  /* 8220524Ch */ case    7:  		/* bl -494628 */
		/* 8220524Ch case    7:*/		regs.LR = 0x82205250; return 0x8218C628;
		/* 8220524Ch case    7:*/		return 0x82205250;
		  /* 82205250h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 82205250h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82205250h case    8:*/		return 0x82205254;
		  /* 82205254h */ case    9:  		/* lwz R4, <#[R31 + 12]> */
		/* 82205254h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82205254h case    9:*/		return 0x82205258;
		  /* 82205258h */ case   10:  		/* mulli R5, R11, 40 */
		/* 82205258h case   10:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 82205258h case   10:*/		return 0x8220525C;
		  /* 8220525Ch */ case   11:  		/* mr R30, R3 */
		/* 8220525Ch case   11:*/		regs.R30 = regs.R3;
		/* 8220525Ch case   11:*/		return 0x82205260;
		  /* 82205260h */ case   12:  		/* bl -1521840 */
		/* 82205260h case   12:*/		regs.LR = 0x82205264; return 0x820919B0;
		/* 82205260h case   12:*/		return 0x82205264;
		  /* 82205264h */ case   13:  		/* lwz R11, <#[R31 + 20]> */
		/* 82205264h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82205264h case   13:*/		return 0x82205268;
		  /* 82205268h */ case   14:  		/* li R6, 0 */
		/* 82205268h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82205268h case   14:*/		return 0x8220526C;
		  /* 8220526Ch */ case   15:  		/* mr R3, R31 */
		/* 8220526Ch case   15:*/		regs.R3 = regs.R31;
		/* 8220526Ch case   15:*/		return 0x82205270;
		  /* 82205270h */ case   16:  		/* lwz R4, <#[R31 + 12]> */
		/* 82205270h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82205270h case   16:*/		return 0x82205274;
		  /* 82205274h */ case   17:  		/* mulli R5, R11, 40 */
		/* 82205274h case   17:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 82205274h case   17:*/		return 0x82205278;
		  /* 82205278h */ case   18:  		/* bl -656864 */
		/* 82205278h case   18:*/		regs.LR = 0x8220527C; return 0x82164C98;
		/* 82205278h case   18:*/		return 0x8220527C;
		  /* 8220527Ch */ case   19:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220527Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220527Ch case   19:*/		return 0x82205280;
		  /* 82205280h */ case   20:  		/* stw R30, <#[R31 + 12]> */
		/* 82205280h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82205280h case   20:*/		return 0x82205284;
		  /* 82205284h */ case   21:  		/* addi R10, R11, 1 */
		/* 82205284h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82205284h case   21:*/		return 0x82205288;
		  /* 82205288h */ case   22:  		/* addi R11, R11, 2 */
		/* 82205288h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82205288h case   22:*/		return 0x8220528C;
		  /* 8220528Ch */ case   23:  		/* stw R10, <#[R31 + 612]> */
		/* 8220528Ch case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000264) );
		/* 8220528Ch case   23:*/		return 0x82205290;
		  /* 82205290h */ case   24:  		/* lis R10, -32254 */
		/* 82205290h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 82205290h case   24:*/		return 0x82205294;
		  /* 82205294h */ case   25:  		/* stw R11, <#[R31 + 20]> */
		/* 82205294h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82205294h case   25:*/		return 0x82205298;
		  /* 82205298h */ case   26:  		/* li R7, 0 */
		/* 82205298h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82205298h case   26:*/		return 0x8220529C;
		  /* 8220529Ch */ case   27:  		/* addi R8, R10, -12944 */
		/* 8220529Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFCD70);
		/* 8220529Ch case   27:*/		return 0x822052A0;
		  /* 822052A0h */ case   28:  		/* lwz R4, <#[R31 + 612]> */
		/* 822052A0h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000264) );
		/* 822052A0h case   28:*/		return 0x822052A4;
		  /* 822052A4h */ case   29:  		/* li R6, 1 */
		/* 822052A4h case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822052A4h case   29:*/		return 0x822052A8;
		  /* 822052A8h */ case   30:  		/* mr R5, R21 */
		/* 822052A8h case   30:*/		regs.R5 = regs.R21;
		/* 822052A8h case   30:*/		return 0x822052AC;
		  /* 822052ACh */ case   31:  		/* mr R3, R31 */
		/* 822052ACh case   31:*/		regs.R3 = regs.R31;
		/* 822052ACh case   31:*/		return 0x822052B0;
		  /* 822052B0h */ case   32:  		/* bl -99840 */
		/* 822052B0h case   32:*/		regs.LR = 0x822052B4; return 0x821ECCB0;
		/* 822052B0h case   32:*/		return 0x822052B4;
		  /* 822052B4h */ case   33:  		/* lwz R10, <#[R31 + 612]> */
		/* 822052B4h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000264) );
		/* 822052B4h case   33:*/		return 0x822052B8;
		  /* 822052B8h */ case   34:  		/* lwz R9, <#[R31 + 12]> */
		/* 822052B8h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 822052B8h case   34:*/		return 0x822052BC;
		  /* 822052BCh */ case   35:  		/* mulli R10, R10, 40 */
		/* 822052BCh case   35:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 822052BCh case   35:*/		return 0x822052C0;
		  /* 822052C0h */ case   36:  		/* lwzx R8, <#[R10 + R9]> */
		/* 822052C0h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 822052C0h case   36:*/		return 0x822052C4;
		  /* 822052C4h */ case   37:  		/* addi R11, R31, 812 */
		/* 822052C4h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x32C);
		/* 822052C4h case   37:*/		return 0x822052C8;
		  /* 822052C8h */ case   38:  		/* add R31, R10, R9 */
		/* 822052C8h case   38:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R9);
		/* 822052C8h case   38:*/		return 0x822052CC;
		  /* 822052CCh */ case   39:  		/* rlwimi R8, R24, 1, 29, 31 */
		/* 822052CCh case   39:*/		cpu::op::rlwimi<0,1,29,31>(regs,&regs.R8,regs.R24);
		/* 822052CCh case   39:*/		return 0x822052D0;
		  /* 822052D0h */ case   40:  		/* stwx R8, <#[R10 + R9]> */
		/* 822052D0h case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 822052D0h case   40:*/		return 0x822052D4;
		  /* 822052D4h */ case   41:  		/* lwz R10, <#[R31 + 4]> */
		/* 822052D4h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 822052D4h case   41:*/		return 0x822052D8;
		  /* 822052D8h */ case   42:  		/* rlwimi R10, R24, 5, 25, 27 */
		/* 822052D8h case   42:*/		cpu::op::rlwimi<0,5,25,27>(regs,&regs.R10,regs.R24);
		/* 822052D8h case   42:*/		return 0x822052DC;
		  /* 822052DCh */ case   43:  		/* stw R10, <#[R31 + 4]> */
		/* 822052DCh case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 822052DCh case   43:*/		return 0x822052E0;
		  /* 822052E0h */ case   44:  		/* lwz R10, <#[R11 + 144]> */
		/* 822052E0h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000090) );
		/* 822052E0h case   44:*/		return 0x822052E4;
		  /* 822052E4h */ case   45:  		/* lwz R9, <#[R11 + 140]> */
		/* 822052E4h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000008C) );
		/* 822052E4h case   45:*/		return 0x822052E8;
		  /* 822052E8h */ case   46:  		/* subf R9, R10, R9 */
		/* 822052E8h case   46:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 822052E8h case   46:*/		return 0x822052EC;
		  /* 822052ECh */ case   47:  		/* addi R9, R9, 4096 */
		/* 822052ECh case   47:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1000);
		/* 822052ECh case   47:*/		return 0x822052F0;
		  /* 822052F0h */ case   48:  		/* cmplwi CR6, R9, 8 */
		/* 822052F0h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000008);
		/* 822052F0h case   48:*/		return 0x822052F4;
		  /* 822052F4h */ case   49:  		/* bc 12, CR6_LT, 16 */
		/* 822052F4h case   49:*/		if ( regs.CR[6].lt ) { return 0x82205304;  }
		/* 822052F4h case   49:*/		return 0x822052F8;
		  /* 822052F8h */ case   50:  		/* addi R9, R10, 8 */
		/* 822052F8h case   50:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x8);
		/* 822052F8h case   50:*/		return 0x822052FC;
		  /* 822052FCh */ case   51:  		/* stw R9, <#[R11 + 144]> */
		/* 822052FCh case   51:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000090) );
		/* 822052FCh case   51:*/		return 0x82205300;
		  /* 82205300h */ case   52:  		/* b 52 */
		/* 82205300h case   52:*/		return 0x82205334;
		/* 82205300h case   52:*/		return 0x82205304;
	}
	return 0x82205304;
} // Block from 82205230h-82205304h (53 instructions)

//////////////////////////////////////////////////////
// Block at 82205304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205304);
		  /* 82205304h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205304h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205304h case    0:*/		return 0x82205308;
		  /* 82205308h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82205308h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82205308h case    1:*/		return 0x8220530C;
		  /* 8220530Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8220530Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82205324;  }
		/* 8220530Ch case    2:*/		return 0x82205310;
		  /* 82205310h */ case    3:  		/* lwz R9, <#[R10]> */
		/* 82205310h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205310h case    3:*/		return 0x82205314;
		  /* 82205314h */ case    4:  		/* stw R9, <#[R11 + 4]> */
		/* 82205314h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82205314h case    4:*/		return 0x82205318;
	}
	return 0x82205318;
} // Block from 82205304h-82205318h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82205318h
// Function '?PrepareToImportInlineMicrocode@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205318);
		  /* 82205318h */ case    0:  		/* stw R23, <#[R10]> */
		/* 82205318h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 82205318h case    0:*/		return 0x8220531C;
		  /* 8220531Ch */ case    1:  		/* stw R23, <#[R10 + 4]> */
		/* 8220531Ch case    1:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000004) );
		/* 8220531Ch case    1:*/		return 0x82205320;
		  /* 82205320h */ case    2:  		/* b 20 */
		/* 82205320h case    2:*/		return 0x82205334;
		/* 82205320h case    2:*/		return 0x82205324;
	}
	return 0x82205324;
} // Block from 82205318h-82205324h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205324);
		  /* 82205324h */ case    0:  		/* li R4, 8 */
		/* 82205324h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82205324h case    0:*/		return 0x82205328;
		  /* 82205328h */ case    1:  		/* mr R3, R11 */
		/* 82205328h case    1:*/		regs.R3 = regs.R11;
		/* 82205328h case    1:*/		return 0x8220532C;
		  /* 8220532Ch */ case    2:  		/* bl -658748 */
		/* 8220532Ch case    2:*/		regs.LR = 0x82205330; return 0x821645F0;
		/* 8220532Ch case    2:*/		return 0x82205330;
		  /* 82205330h */ case    3:  		/* mr R10, R3 */
		/* 82205330h case    3:*/		regs.R10 = regs.R3;
		/* 82205330h case    3:*/		return 0x82205334;
	}
	return 0x82205334;
} // Block from 82205324h-82205334h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82205334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205334);
		  /* 82205334h */ case    0:  		/* stw R10, <#[R31 + 28]> */
		/* 82205334h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82205334h case    0:*/		return 0x82205338;
		  /* 82205338h */ case    1:  		/* li R11, 3 */
		/* 82205338h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82205338h case    1:*/		return 0x8220533C;
		  /* 8220533Ch */ case    2:  		/* lwz R9, <#[R10]> */
		/* 8220533Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8220533Ch case    2:*/		return 0x82205340;
		  /* 82205340h */ case    3:  		/* rlwimi R9, R24, 0, 28, 31 */
		/* 82205340h case    3:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R9,regs.R24);
		/* 82205340h case    3:*/		return 0x82205344;
		  /* 82205344h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82205344h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205344h case    4:*/		return 0x82205348;
		  /* 82205348h */ case    5:  		/* lwz R10, <#[R31 + 28]> */
		/* 82205348h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82205348h case    5:*/		return 0x8220534C;
		  /* 8220534Ch */ case    6:  		/* lwz R9, <#[R10]> */
		/* 8220534Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8220534Ch case    6:*/		return 0x82205350;
		  /* 82205350h */ case    7:  		/* oris R9, R9, 12 */
		/* 82205350h case    7:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xC);
		/* 82205350h case    7:*/		return 0x82205354;
		  /* 82205354h */ case    8:  		/* stw R9, <#[R10]> */
		/* 82205354h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205354h case    8:*/		return 0x82205358;
		  /* 82205358h */ case    9:  		/* lwz R10, <#[R31 + 28]> */
		/* 82205358h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82205358h case    9:*/		return 0x8220535C;
		  /* 8220535Ch */ case   10:  		/* lwz R9, <#[R10]> */
		/* 8220535Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8220535Ch case   10:*/		return 0x82205360;
		  /* 82205360h */ case   11:  		/* rlwimi R9, R11, 21, 6, 11 */
		/* 82205360h case   11:*/		cpu::op::rlwimi<0,21,6,11>(regs,&regs.R9,regs.R11);
		/* 82205360h case   11:*/		return 0x82205364;
		  /* 82205364h */ case   12:  		/* stw R9, <#[R10]> */
		/* 82205364h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205364h case   12:*/		return 0x82205368;
	}
	return 0x82205368;
} // Block from 82205334h-82205368h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82205368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205368);
		  /* 82205368h */ case    0:  		/* addi R1, R1, 176 */
		/* 82205368h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82205368h case    0:*/		return 0x8220536C;
		  /* 8220536Ch */ case    1:  		/* b -1523936 */
		/* 8220536Ch case    1:*/		return 0x8209128C;
		/* 8220536Ch case    1:*/		return 0x82205370;
	}
	return 0x82205370;
} // Block from 82205368h-82205370h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82205370h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205370);
		  /* 82205370h */ case    0:  		/* mfspr R12, LR */
		/* 82205370h case    0:*/		regs.R12 = regs.LR;
		/* 82205370h case    0:*/		return 0x82205374;
		  /* 82205374h */ case    1:  		/* bl -1524052 */
		/* 82205374h case    1:*/		regs.LR = 0x82205378; return 0x82091220;
		/* 82205374h case    1:*/		return 0x82205378;
		  /* 82205378h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82205378h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82205378h case    2:*/		return 0x8220537C;
		  /* 8220537Ch */ case    3:  		/* stwu R1, <#[R1 - 544]> */
		/* 8220537Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDE0);
		/* 8220537Ch case    3:*/		return 0x82205380;
		  /* 82205380h */ case    4:  		/* addi R11, R3, 100 */
		/* 82205380h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x64);
		/* 82205380h case    4:*/		return 0x82205384;
		  /* 82205384h */ case    5:  		/* stw R4, <#[R3 + 24]> */
		/* 82205384h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000018) );
		/* 82205384h case    5:*/		return 0x82205388;
		  /* 82205388h */ case    6:  		/* li R16, 0 */
		/* 82205388h case    6:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 82205388h case    6:*/		return 0x8220538C;
		  /* 8220538Ch */ case    7:  		/* lwz R26, <#[R4 + 4]> */
		/* 8220538Ch case    7:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R4 + 0x00000004) );
		/* 8220538Ch case    7:*/		return 0x82205390;
		  /* 82205390h */ case    8:  		/* stw R11, <#[R3 + 104]> */
		/* 82205390h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000068) );
		/* 82205390h case    8:*/		return 0x82205394;
		  /* 82205394h */ case    9:  		/* mr R25, R4 */
		/* 82205394h case    9:*/		regs.R25 = regs.R4;
		/* 82205394h case    9:*/		return 0x82205398;
		  /* 82205398h */ case   10:  		/* stw R16, <#[R3 + 100]> */
		/* 82205398h case   10:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R3 + 0x00000064) );
		/* 82205398h case   10:*/		return 0x8220539C;
		  /* 8220539Ch */ case   11:  		/* mr R27, R5 */
		/* 8220539Ch case   11:*/		regs.R27 = regs.R5;
		/* 8220539Ch case   11:*/		return 0x822053A0;
		  /* 822053A0h */ case   12:  		/* stw R26, <#[R3 + 28]> */
		/* 822053A0h case   12:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000001C) );
		/* 822053A0h case   12:*/		return 0x822053A4;
		  /* 822053A4h */ case   13:  		/* li R5, 31 */
		/* 822053A4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x1F);
		/* 822053A4h case   13:*/		return 0x822053A8;
		  /* 822053A8h */ case   14:  		/* stw R4, <#[R1 + 572]> */
		/* 822053A8h case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000023C) );
		/* 822053A8h case   14:*/		return 0x822053AC;
		  /* 822053ACh */ case   15:  		/* li R4, 8 */
		/* 822053ACh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 822053ACh case   15:*/		return 0x822053B0;
		  /* 822053B0h */ case   16:  		/* mr R31, R3 */
		/* 822053B0h case   16:*/		regs.R31 = regs.R3;
		/* 822053B0h case   16:*/		return 0x822053B4;
		  /* 822053B4h */ case   17:  		/* stw R26, <#[R1 + 144]> */
		/* 822053B4h case   17:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000090) );
		/* 822053B4h case   17:*/		return 0x822053B8;
		  /* 822053B8h */ case   18:  		/* bl -658120 */
		/* 822053B8h case   18:*/		regs.LR = 0x822053BC; return 0x821648F0;
		/* 822053B8h case   18:*/		return 0x822053BC;
		  /* 822053BCh */ case   19:  		/* addi R10, R3, 4 */
		/* 822053BCh case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x4);
		/* 822053BCh case   19:*/		return 0x822053C0;
		  /* 822053C0h */ case   20:  		/* ori R9, R3, 1 */
		/* 822053C0h case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R3,0x1);
		/* 822053C0h case   20:*/		return 0x822053C4;
		  /* 822053C4h */ case   21:  		/* stw R3, <#[R31 + 572]> */
		/* 822053C4h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000023C) );
		/* 822053C4h case   21:*/		return 0x822053C8;
		  /* 822053C8h */ case   22:  		/* ori R10, R10, 1 */
		/* 822053C8h case   22:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822053C8h case   22:*/		return 0x822053CC;
		  /* 822053CCh */ case   23:  		/* stw R9, <#[R3 + 4]> */
		/* 822053CCh case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 822053CCh case   23:*/		return 0x822053D0;
		  /* 822053D0h */ case   24:  		/* mr R11, R3 */
		/* 822053D0h case   24:*/		regs.R11 = regs.R3;
		/* 822053D0h case   24:*/		return 0x822053D4;
		  /* 822053D4h */ case   25:  		/* stw R10, <#[R3]> */
		/* 822053D4h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 822053D4h case   25:*/		return 0x822053D8;
		  /* 822053D8h */ case   26:  		/* li R5, 6 */
		/* 822053D8h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 822053D8h case   26:*/		return 0x822053DC;
		  /* 822053DCh */ case   27:  		/* li R4, 8 */
		/* 822053DCh case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 822053DCh case   27:*/		return 0x822053E0;
		  /* 822053E0h */ case   28:  		/* mr R3, R31 */
		/* 822053E0h case   28:*/		regs.R3 = regs.R31;
		/* 822053E0h case   28:*/		return 0x822053E4;
		  /* 822053E4h */ case   29:  		/* bl -658164 */
		/* 822053E4h case   29:*/		regs.LR = 0x822053E8; return 0x821648F0;
		/* 822053E4h case   29:*/		return 0x822053E8;
		  /* 822053E8h */ case   30:  		/* addi R20, R3, 4 */
		/* 822053E8h case   30:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x4);
		/* 822053E8h case   30:*/		return 0x822053EC;
		  /* 822053ECh */ case   31:  		/* ori R11, R3, 1 */
		/* 822053ECh case   31:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 822053ECh case   31:*/		return 0x822053F0;
		  /* 822053F0h */ case   32:  		/* ori R10, R20, 1 */
		/* 822053F0h case   32:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R20,0x1);
		/* 822053F0h case   32:*/		return 0x822053F4;
		  /* 822053F4h */ case   33:  		/* mr R19, R3 */
		/* 822053F4h case   33:*/		regs.R19 = regs.R3;
		/* 822053F4h case   33:*/		return 0x822053F8;
		  /* 822053F8h */ case   34:  		/* stw R11, <#[R3 + 4]> */
		/* 822053F8h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 822053F8h case   34:*/		return 0x822053FC;
		  /* 822053FCh */ case   35:  		/* stw R10, <#[R3]> */
		/* 822053FCh case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 822053FCh case   35:*/		return 0x82205400;
		  /* 82205400h */ case   36:  		/* li R5, 43 */
		/* 82205400h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x2B);
		/* 82205400h case   36:*/		return 0x82205404;
		  /* 82205404h */ case   37:  		/* stw R19, <#[R31 + 592]> */
		/* 82205404h case   37:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000250) );
		/* 82205404h case   37:*/		return 0x82205408;
		  /* 82205408h */ case   38:  		/* li R4, 8 */
		/* 82205408h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82205408h case   38:*/		return 0x8220540C;
		  /* 8220540Ch */ case   39:  		/* mr R3, R31 */
		/* 8220540Ch case   39:*/		regs.R3 = regs.R31;
		/* 8220540Ch case   39:*/		return 0x82205410;
		  /* 82205410h */ case   40:  		/* bl -658208 */
		/* 82205410h case   40:*/		regs.LR = 0x82205414; return 0x821648F0;
		/* 82205410h case   40:*/		return 0x82205414;
		  /* 82205414h */ case   41:  		/* addi R11, R3, 4 */
		/* 82205414h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82205414h case   41:*/		return 0x82205418;
		  /* 82205418h */ case   42:  		/* ori R10, R3, 1 */
		/* 82205418h case   42:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 82205418h case   42:*/		return 0x8220541C;
		  /* 8220541Ch */ case   43:  		/* ori R11, R11, 1 */
		/* 8220541Ch case   43:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220541Ch case   43:*/		return 0x82205420;
		  /* 82205420h */ case   44:  		/* mr R21, R3 */
		/* 82205420h case   44:*/		regs.R21 = regs.R3;
		/* 82205420h case   44:*/		return 0x82205424;
		  /* 82205424h */ case   45:  		/* stw R10, <#[R3 + 4]> */
		/* 82205424h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82205424h case   45:*/		return 0x82205428;
		  /* 82205428h */ case   46:  		/* stw R11, <#[R3]> */
		/* 82205428h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82205428h case   46:*/		return 0x8220542C;
		  /* 8220542Ch */ case   47:  		/* li R5, 55 */
		/* 8220542Ch case   47:*/		cpu::op::li<0>(regs,&regs.R5,0x37);
		/* 8220542Ch case   47:*/		return 0x82205430;
		  /* 82205430h */ case   48:  		/* stw R21, <#[R31 + 588]> */
		/* 82205430h case   48:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x0000024C) );
		/* 82205430h case   48:*/		return 0x82205434;
		  /* 82205434h */ case   49:  		/* li R4, 8 */
		/* 82205434h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82205434h case   49:*/		return 0x82205438;
		  /* 82205438h */ case   50:  		/* mr R3, R31 */
		/* 82205438h case   50:*/		regs.R3 = regs.R31;
		/* 82205438h case   50:*/		return 0x8220543C;
		  /* 8220543Ch */ case   51:  		/* bl -658252 */
		/* 8220543Ch case   51:*/		regs.LR = 0x82205440; return 0x821648F0;
		/* 8220543Ch case   51:*/		return 0x82205440;
		  /* 82205440h */ case   52:  		/* addi R11, R3, 4 */
		/* 82205440h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82205440h case   52:*/		return 0x82205444;
		  /* 82205444h */ case   53:  		/* ori R10, R3, 1 */
		/* 82205444h case   53:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 82205444h case   53:*/		return 0x82205448;
		  /* 82205448h */ case   54:  		/* ori R11, R11, 1 */
		/* 82205448h case   54:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205448h case   54:*/		return 0x8220544C;
		  /* 8220544Ch */ case   55:  		/* stw R10, <#[R3 + 4]> */
		/* 8220544Ch case   55:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 8220544Ch case   55:*/		return 0x82205450;
		  /* 82205450h */ case   56:  		/* mr R18, R3 */
		/* 82205450h case   56:*/		regs.R18 = regs.R3;
		/* 82205450h case   56:*/		return 0x82205454;
		  /* 82205454h */ case   57:  		/* stw R11, <#[R3]> */
		/* 82205454h case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82205454h case   57:*/		return 0x82205458;
		  /* 82205458h */ case   58:  		/* li R5, 3 */
		/* 82205458h case   58:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82205458h case   58:*/		return 0x8220545C;
		  /* 8220545Ch */ case   59:  		/* li R4, 8 */
		/* 8220545Ch case   59:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8220545Ch case   59:*/		return 0x82205460;
	}
	return 0x82205460;
} // Block from 82205370h-82205460h (60 instructions)

//////////////////////////////////////////////////////
// Block at 82205460h
// Function '?PrepareBranchAttributes@Compiler@D3DXShader@@AAAXPAVResultStack@2@PAUCommittedAttributeState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205460);
		  /* 82205460h */ case    0:  		/* mr R3, R31 */
		/* 82205460h case    0:*/		regs.R3 = regs.R31;
		/* 82205460h case    0:*/		return 0x82205464;
		  /* 82205464h */ case    1:  		/* bl -658292 */
		/* 82205464h case    1:*/		regs.LR = 0x82205468; return 0x821648F0;
		/* 82205464h case    1:*/		return 0x82205468;
		  /* 82205468h */ case    2:  		/* addi R11, R3, 4 */
		/* 82205468h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82205468h case    2:*/		return 0x8220546C;
		  /* 8220546Ch */ case    3:  		/* ori R10, R3, 1 */
		/* 8220546Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 8220546Ch case    3:*/		return 0x82205470;
		  /* 82205470h */ case    4:  		/* ori R11, R11, 1 */
		/* 82205470h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205470h case    4:*/		return 0x82205474;
		  /* 82205474h */ case    5:  		/* stw R10, <#[R3 + 4]> */
		/* 82205474h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82205474h case    5:*/		return 0x82205478;
		  /* 82205478h */ case    6:  		/* mr R17, R3 */
		/* 82205478h case    6:*/		regs.R17 = regs.R3;
		/* 82205478h case    6:*/		return 0x8220547C;
		  /* 8220547Ch */ case    7:  		/* stw R11, <#[R3]> */
		/* 8220547Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8220547Ch case    7:*/		return 0x82205480;
		  /* 82205480h */ case    8:  		/* li R5, 42 */
		/* 82205480h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x2A);
		/* 82205480h case    8:*/		return 0x82205484;
		  /* 82205484h */ case    9:  		/* li R4, 8 */
		/* 82205484h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82205484h case    9:*/		return 0x82205488;
		  /* 82205488h */ case   10:  		/* mr R3, R31 */
		/* 82205488h case   10:*/		regs.R3 = regs.R31;
		/* 82205488h case   10:*/		return 0x8220548C;
		  /* 8220548Ch */ case   11:  		/* bl -658332 */
		/* 8220548Ch case   11:*/		regs.LR = 0x82205490; return 0x821648F0;
		/* 8220548Ch case   11:*/		return 0x82205490;
		  /* 82205490h */ case   12:  		/* addi R11, R3, 4 */
		/* 82205490h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82205490h case   12:*/		return 0x82205494;
		  /* 82205494h */ case   13:  		/* ori R10, R3, 1 */
		/* 82205494h case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 82205494h case   13:*/		return 0x82205498;
		  /* 82205498h */ case   14:  		/* stw R3, <#[R31 + 584]> */
		/* 82205498h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 82205498h case   14:*/		return 0x8220549C;
		  /* 8220549Ch */ case   15:  		/* ori R11, R11, 1 */
		/* 8220549Ch case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220549Ch case   15:*/		return 0x822054A0;
		  /* 822054A0h */ case   16:  		/* stw R10, <#[R3 + 4]> */
		/* 822054A0h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 822054A0h case   16:*/		return 0x822054A4;
		  /* 822054A4h */ case   17:  		/* stw R11, <#[R3]> */
		/* 822054A4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822054A4h case   17:*/		return 0x822054A8;
		  /* 822054A8h */ case   18:  		/* lwz R11, <#[R26 + 68]> */
		/* 822054A8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000044) );
		/* 822054A8h case   18:*/		return 0x822054AC;
		  /* 822054ACh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 822054ACh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822054ACh case   19:*/		return 0x822054B0;
		  /* 822054B0h */ case   20:  		/* bc 12, CR6_EQ, 148 */
		/* 822054B0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82205544;  }
		/* 822054B0h case   20:*/		return 0x822054B4;
		  /* 822054B4h */ case   21:  		/* mr R30, R11 */
		/* 822054B4h case   21:*/		regs.R30 = regs.R11;
		/* 822054B4h case   21:*/		return 0x822054B8;
	}
	return 0x822054B8;
} // Block from 82205460h-822054B8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 822054B8h
// Function '?ScanForVariableAssignments@Compiler@D3DXShader@@AAAXPAUFunction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822054B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822054B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822054B8);
		  /* 822054B8h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 822054B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 822054B8h case    0:*/		return 0x822054BC;
		  /* 822054BCh */ case    1:  		/* cmpwi CR6, R11, 19 */
		/* 822054BCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 822054BCh case    1:*/		return 0x822054C0;
		  /* 822054C0h */ case    2:  		/* bc 12, CR6_EQ, 712 */
		/* 822054C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82205788;  }
		/* 822054C0h case    2:*/		return 0x822054C4;
		  /* 822054C4h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 822054C4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 822054C4h case    3:*/		return 0x822054C8;
		  /* 822054C8h */ case    4:  		/* bc 4, CR6_EQ, 736 */
		/* 822054C8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x822057A8;  }
		/* 822054C8h case    4:*/		return 0x822054CC;
		  /* 822054CCh */ case    5:  		/* lwz R5, <#[R30 + 8]> */
		/* 822054CCh case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		/* 822054CCh case    5:*/		return 0x822054D0;
		  /* 822054D0h */ case    6:  		/* cmplwi CR6, R5, 0 */
		/* 822054D0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 822054D0h case    6:*/		return 0x822054D4;
		  /* 822054D4h */ case    7:  		/* bc 12, CR6_EQ, 712 */
		/* 822054D4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8220579C;  }
		/* 822054D4h case    7:*/		return 0x822054D8;
		  /* 822054D8h */ case    8:  		/* lwz R11, <#[R5 + 4]> */
		/* 822054D8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 822054D8h case    8:*/		return 0x822054DC;
		  /* 822054DCh */ case    9:  		/* cmpwi CR6, R11, 19 */
		/* 822054DCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 822054DCh case    9:*/		return 0x822054E0;
		  /* 822054E0h */ case   10:  		/* bc 4, CR6_EQ, 700 */
		/* 822054E0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220579C;  }
		/* 822054E0h case   10:*/		return 0x822054E4;
		  /* 822054E4h */ case   11:  		/* mr R4, R17 */
		/* 822054E4h case   11:*/		regs.R4 = regs.R17;
		/* 822054E4h case   11:*/		return 0x822054E8;
		  /* 822054E8h */ case   12:  		/* mr R3, R31 */
		/* 822054E8h case   12:*/		regs.R3 = regs.R31;
		/* 822054E8h case   12:*/		return 0x822054EC;
		  /* 822054ECh */ case   13:  		/* bl -61732 */
		/* 822054ECh case   13:*/		regs.LR = 0x822054F0; return 0x821F63C8;
		/* 822054ECh case   13:*/		return 0x822054F0;
		  /* 822054F0h */ case   14:  		/* lwz R30, <#[R30 + 12]> */
		/* 822054F0h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 822054F0h case   14:*/		return 0x822054F4;
		  /* 822054F4h */ case   15:  		/* cmplwi CR6, R30, 0 */
		/* 822054F4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822054F4h case   15:*/		return 0x822054F8;
		  /* 822054F8h */ case   16:  		/* bc 4, CR6_EQ, -64 */
		/* 822054F8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x822054B8;  }
		/* 822054F8h case   16:*/		return 0x822054FC;
		  /* 822054FCh */ case   17:  		/* lis R5, 219 */
		/* 822054FCh case   17:*/		cpu::op::lis<0>(regs,&regs.R5,0xDB);
		/* 822054FCh case   17:*/		return 0x82205500;
		  /* 82205500h */ case   18:  		/* addi R10, R1, 224 */
		/* 82205500h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 82205500h case   18:*/		return 0x82205504;
		  /* 82205504h */ case   19:  		/* li R9, 0 */
		/* 82205504h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82205504h case   19:*/		return 0x82205508;
		  /* 82205508h */ case   20:  		/* li R8, 0 */
		/* 82205508h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82205508h case   20:*/		return 0x8220550C;
		  /* 8220550Ch */ case   21:  		/* li R7, 0 */
		/* 8220550Ch case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8220550Ch case   21:*/		return 0x82205510;
		  /* 82205510h */ case   22:  		/* li R6, 2048 */
		/* 82205510h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x800);
		/* 82205510h case   22:*/		return 0x82205514;
		  /* 82205514h */ case   23:  		/* ori R5, R5, 57346 */
		/* 82205514h case   23:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0xE002);
		/* 82205514h case   23:*/		return 0x82205518;
		  /* 82205518h */ case   24:  		/* mr R4, R17 */
		/* 82205518h case   24:*/		regs.R4 = regs.R17;
		/* 82205518h case   24:*/		return 0x8220551C;
		  /* 8220551Ch */ case   25:  		/* mr R3, R31 */
		/* 8220551Ch case   25:*/		regs.R3 = regs.R31;
		/* 8220551Ch case   25:*/		return 0x82205520;
		  /* 82205520h */ case   26:  		/* bl -50168 */
		/* 82205520h case   26:*/		regs.LR = 0x82205524; return 0x821F9128;
		/* 82205520h case   26:*/		return 0x82205524;
		  /* 82205524h */ case   27:  		/* lwz R11, <#[R31 + 576]> */
		/* 82205524h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000240) );
		/* 82205524h case   27:*/		return 0x82205528;
		  /* 82205528h */ case   28:  		/* lwz R11, <#[R11 + 4]> */
		/* 82205528h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82205528h case   28:*/		return 0x8220552C;
		  /* 8220552Ch */ case   29:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8220552Ch case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8220552Ch case   29:*/		return 0x82205530;
		  /* 82205530h */ case   30:  		/* bc 4, CR0_EQ, 20 */
		/* 82205530h case   30:*/		if ( !regs.CR[0].eq ) { return 0x82205544;  }
		/* 82205530h case   30:*/		return 0x82205534;
		  /* 82205534h */ case   31:  		/* cmplwi CR0, R11, 0 */
		/* 82205534h case   31:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82205534h case   31:*/		return 0x82205538;
		  /* 82205538h */ case   32:  		/* bc 12, CR0_EQ, 12 */
		/* 82205538h case   32:*/		if ( regs.CR[0].eq ) { return 0x82205544;  }
		/* 82205538h case   32:*/		return 0x8220553C;
		  /* 8220553Ch */ case   33:  		/* mr R3, R31 */
		/* 8220553Ch case   33:*/		regs.R3 = regs.R31;
		/* 8220553Ch case   33:*/		return 0x82205540;
		  /* 82205540h */ case   34:  		/* bl -56752 */
		/* 82205540h case   34:*/		regs.LR = 0x82205544; return 0x821F7790;
		/* 82205540h case   34:*/		return 0x82205544;
	}
	return 0x82205544;
} // Block from 822054B8h-82205544h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82205544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205544);
		  /* 82205544h */ case    0:  		/* mr R3, R31 */
		/* 82205544h case    0:*/		regs.R3 = regs.R31;
		/* 82205544h case    0:*/		return 0x82205548;
		  /* 82205548h */ case    1:  		/* bl -95696 */
		/* 82205548h case    1:*/		regs.LR = 0x8220554C; return 0x821EDF78;
		/* 82205548h case    1:*/		return 0x8220554C;
		  /* 8220554Ch */ case    2:  		/* stw R3, <#[R31 + 564]> */
		/* 8220554Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8220554Ch case    2:*/		return 0x82205550;
		  /* 82205550h */ case    3:  		/* li R5, 4 */
		/* 82205550h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82205550h case    3:*/		return 0x82205554;
		  /* 82205554h */ case    4:  		/* lwz R6, <#[R25]> */
		/* 82205554h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x00000000) );
		/* 82205554h case    4:*/		return 0x82205558;
		  /* 82205558h */ case    5:  		/* mr R4, R26 */
		/* 82205558h case    5:*/		regs.R4 = regs.R26;
		/* 82205558h case    5:*/		return 0x8220555C;
		  /* 8220555Ch */ case    6:  		/* mr R3, R31 */
		/* 8220555Ch case    6:*/		regs.R3 = regs.R31;
		/* 8220555Ch case    6:*/		return 0x82205560;
		  /* 82205560h */ case    7:  		/* bl -44496 */
		/* 82205560h case    7:*/		regs.LR = 0x82205564; return 0x821FA790;
		/* 82205560h case    7:*/		return 0x82205564;
		  /* 82205564h */ case    8:  		/* mr R7, R18 */
		/* 82205564h case    8:*/		regs.R7 = regs.R18;
		/* 82205564h case    8:*/		return 0x82205568;
		  /* 82205568h */ case    9:  		/* li R6, 1 */
		/* 82205568h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82205568h case    9:*/		return 0x8220556C;
		  /* 8220556Ch */ case   10:  		/* li R5, 3 */
		/* 8220556Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8220556Ch case   10:*/		return 0x82205570;
		  /* 82205570h */ case   11:  		/* mr R4, R25 */
		/* 82205570h case   11:*/		regs.R4 = regs.R25;
		/* 82205570h case   11:*/		return 0x82205574;
		  /* 82205574h */ case   12:  		/* mr R3, R31 */
		/* 82205574h case   12:*/		regs.R3 = regs.R31;
		/* 82205574h case   12:*/		return 0x82205578;
		  /* 82205578h */ case   13:  		/* bl -43352 */
		/* 82205578h case   13:*/		regs.LR = 0x8220557C; return 0x821FAC20;
		/* 82205578h case   13:*/		return 0x8220557C;
		  /* 8220557Ch */ case   14:  		/* lwz R11, <#[R31 + 40]> */
		/* 8220557Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8220557Ch case   14:*/		return 0x82205580;
		  /* 82205580h */ case   15:  		/* li R15, 1 */
		/* 82205580h case   15:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 82205580h case   15:*/		return 0x82205584;
		  /* 82205584h */ case   16:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 82205584h case   16:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 82205584h case   16:*/		return 0x82205588;
		  /* 82205588h */ case   17:  		/* bc 4, CR0_EQ, 76 */
		/* 82205588h case   17:*/		if ( !regs.CR[0].eq ) { return 0x822055D4;  }
		/* 82205588h case   17:*/		return 0x8220558C;
		  /* 8220558Ch */ case   18:  		/* lwz R11, <#[R31 + 44]> */
		/* 8220558Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8220558Ch case   18:*/		return 0x82205590;
		  /* 82205590h */ case   19:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82205590h case   19:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82205590h case   19:*/		return 0x82205594;
		  /* 82205594h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 82205594h case   20:*/		if ( regs.CR[0].eq ) { return 0x822055AC;  }
		/* 82205594h case   20:*/		return 0x82205598;
		  /* 82205598h */ case   21:  		/* lwz R11, <#[R31 + 48]> */
		/* 82205598h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82205598h case   21:*/		return 0x8220559C;
		  /* 8220559Ch */ case   22:  		/* lis R10, -1 */
		/* 8220559Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8220559Ch case   22:*/		return 0x822055A0;
		  /* 822055A0h */ case   23:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 822055A0h case   23:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 822055A0h case   23:*/		return 0x822055A4;
		  /* 822055A4h */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 822055A4h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822055A4h case   24:*/		return 0x822055A8;
		  /* 822055A8h */ case   25:  		/* bc 4, CR6_EQ, 44 */
		/* 822055A8h case   25:*/		if ( !regs.CR[6].eq ) { return 0x822055D4;  }
		/* 822055A8h case   25:*/		return 0x822055AC;
	}
	return 0x822055AC;
} // Block from 82205544h-822055ACh (26 instructions)

//////////////////////////////////////////////////////
// Block at 822055ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822055AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822055AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822055AC);
		  /* 822055ACh */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 822055ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 822055ACh case    0:*/		return 0x822055B0;
		  /* 822055B0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 822055B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822055B0h case    1:*/		return 0x822055B4;
		  /* 822055B4h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 822055B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x822055C8;  }
		/* 822055B4h case    2:*/		return 0x822055B8;
		  /* 822055B8h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 822055B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 822055B8h case    3:*/		return 0x822055BC;
		  /* 822055BCh */ case    4:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 822055BCh case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 822055BCh case    4:*/		return 0x822055C0;
		  /* 822055C0h */ case    5:  		/* mr R11, R15 */
		/* 822055C0h case    5:*/		regs.R11 = regs.R15;
		/* 822055C0h case    5:*/		return 0x822055C4;
		  /* 822055C4h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 822055C4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x822055CC;  }
		/* 822055C4h case    6:*/		return 0x822055C8;
	}
	return 0x822055C8;
} // Block from 822055ACh-822055C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822055C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822055C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822055C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822055C8);
		  /* 822055C8h */ case    0:  		/* mr R11, R16 */
		/* 822055C8h case    0:*/		regs.R11 = regs.R16;
		/* 822055C8h case    0:*/		return 0x822055CC;
	}
	return 0x822055CC;
} // Block from 822055C8h-822055CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822055CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822055CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822055CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822055CC);
		  /* 822055CCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 822055CCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 822055CCh case    0:*/		return 0x822055D0;
		  /* 822055D0h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 822055D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x822055F4;  }
		/* 822055D0h case    1:*/		return 0x822055D4;
	}
	return 0x822055D4;
} // Block from 822055CCh-822055D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822055D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822055D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822055D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822055D4);
		  /* 822055D4h */ case    0:  		/* mr R3, R31 */
		/* 822055D4h case    0:*/		regs.R3 = regs.R31;
		/* 822055D4h case    0:*/		return 0x822055D8;
		  /* 822055D8h */ case    1:  		/* bl -95840 */
		/* 822055D8h case    1:*/		regs.LR = 0x822055DC; return 0x821EDF78;
		/* 822055D8h case    1:*/		return 0x822055DC;
		  /* 822055DCh */ case    2:  		/* mr R30, R3 */
		/* 822055DCh case    2:*/		regs.R30 = regs.R3;
		/* 822055DCh case    2:*/		return 0x822055E0;
		  /* 822055E0h */ case    3:  		/* mr R5, R31 */
		/* 822055E0h case    3:*/		regs.R5 = regs.R31;
		/* 822055E0h case    3:*/		return 0x822055E4;
		  /* 822055E4h */ case    4:  		/* lwz R3, <#[R31 + 564]> */
		/* 822055E4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822055E4h case    4:*/		return 0x822055E8;
		  /* 822055E8h */ case    5:  		/* mr R4, R30 */
		/* 822055E8h case    5:*/		regs.R4 = regs.R30;
		/* 822055E8h case    5:*/		return 0x822055EC;
		  /* 822055ECh */ case    6:  		/* bl 173300 */
		/* 822055ECh case    6:*/		regs.LR = 0x822055F0; return 0x8222FAE0;
		/* 822055ECh case    6:*/		return 0x822055F0;
		  /* 822055F0h */ case    7:  		/* stw R30, <#[R31 + 564]> */
		/* 822055F0h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 822055F0h case    7:*/		return 0x822055F4;
	}
	return 0x822055F4;
} // Block from 822055D4h-822055F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822055F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822055F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822055F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822055F4);
		  /* 822055F4h */ case    0:  		/* lwz R11, <#[R31 + 744]> */
		/* 822055F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002E8) );
		/* 822055F4h case    0:*/		return 0x822055F8;
		  /* 822055F8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 822055F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822055F8h case    1:*/		return 0x822055FC;
		  /* 822055FCh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 822055FCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82205610;  }
		/* 822055FCh case    2:*/		return 0x82205600;
		  /* 82205600h */ case    3:  		/* mr R5, R25 */
		/* 82205600h case    3:*/		regs.R5 = regs.R25;
		/* 82205600h case    3:*/		return 0x82205604;
		  /* 82205604h */ case    4:  		/* lwz R4, <#[R31 + 564]> */
		/* 82205604h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82205604h case    4:*/		return 0x82205608;
		  /* 82205608h */ case    5:  		/* mr R3, R31 */
		/* 82205608h case    5:*/		regs.R3 = regs.R31;
		/* 82205608h case    5:*/		return 0x8220560C;
		  /* 8220560Ch */ case    6:  		/* bl -97804 */
		/* 8220560Ch case    6:*/		regs.LR = 0x82205610; return 0x821ED800;
		/* 8220560Ch case    6:*/		return 0x82205610;
	}
	return 0x82205610;
} // Block from 822055F4h-82205610h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82205610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205610);
		  /* 82205610h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82205610h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82205610h case    0:*/		return 0x82205614;
		  /* 82205614h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82205614h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82205614h case    1:*/		return 0x82205618;
		  /* 82205618h */ case    2:  		/* bc 12, CR0_EQ, 112 */
		/* 82205618h case    2:*/		if ( regs.CR[0].eq ) { return 0x82205688;  }
		/* 82205618h case    2:*/		return 0x8220561C;
		  /* 8220561Ch */ case    3:  		/* lwz R28, <#[R31 + 16]> */
		/* 8220561Ch case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 8220561Ch case    3:*/		return 0x82205620;
		  /* 82205620h */ case    4:  		/* mr R30, R16 */
		/* 82205620h case    4:*/		regs.R30 = regs.R16;
		/* 82205620h case    4:*/		return 0x82205624;
		  /* 82205624h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 82205624h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82205624h case    5:*/		return 0x82205628;
		  /* 82205628h */ case    6:  		/* bc 12, CR6_EQ, 96 */
		/* 82205628h case    6:*/		if ( regs.CR[6].eq ) { return 0x82205688;  }
		/* 82205628h case    6:*/		return 0x8220562C;
		  /* 8220562Ch */ case    7:  		/* mr R29, R16 */
		/* 8220562Ch case    7:*/		regs.R29 = regs.R16;
		/* 8220562Ch case    7:*/		return 0x82205630;
		  /* 82205630h */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 82205630h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82205630h case    8:*/		return 0x82205634;
		  /* 82205634h */ case    9:  		/* add R11, R29, R11 */
		/* 82205634h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 82205634h case    9:*/		return 0x82205638;
		  /* 82205638h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 82205638h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82205638h case   10:*/		return 0x8220563C;
		  /* 8220563Ch */ case   11:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 8220563Ch case   11:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 8220563Ch case   11:*/		return 0x82205640;
		  /* 82205640h */ case   12:  		/* cmplwi CR6, R10, 2 */
		/* 82205640h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 82205640h case   12:*/		return 0x82205644;
		  /* 82205644h */ case   13:  		/* bc 4, CR6_EQ, 52 */
		/* 82205644h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82205678;  }
		/* 82205644h case   13:*/		return 0x82205648;
		  /* 82205648h */ case   14:  		/* lwz R11, <#[R11 + 16]> */
		/* 82205648h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82205648h case   14:*/		return 0x8220564C;
		  /* 8220564Ch */ case   15:  		/* lwz R6, <#[R11 + 52]> */
		/* 8220564Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000034) );
		/* 8220564Ch case   15:*/		return 0x82205650;
		  /* 82205650h */ case   16:  		/* cmplwi CR6, R6, 0 */
		/* 82205650h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82205650h case   16:*/		return 0x82205654;
		  /* 82205654h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 82205654h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82205668;  }
		/* 82205654h case   17:*/		return 0x82205658;
		  /* 82205658h */ case   18:  		/* lwz R10, <#[R11 + 44]> */
		/* 82205658h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 82205658h case   18:*/		return 0x8220565C;
		  /* 8220565Ch */ case   19:  		/* rlwinm. R10, R10, 0, 24, 24 */
		/* 8220565Ch case   19:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R10);
		/* 8220565Ch case   19:*/		return 0x82205660;
		  /* 82205660h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 82205660h case   20:*/		if ( regs.CR[0].eq ) { return 0x82205678;  }
		/* 82205660h case   20:*/		return 0x82205664;
		  /* 82205664h */ case   21:  		/* lwz R6, <#[R11 + 56]> */
		/* 82205664h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000038) );
		/* 82205664h case   21:*/		return 0x82205668;
	}
	return 0x82205668;
} // Block from 82205610h-82205668h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82205668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205668);
		  /* 82205668h */ case    0:  		/* mr R5, R30 */
		/* 82205668h case    0:*/		regs.R5 = regs.R30;
		/* 82205668h case    0:*/		return 0x8220566C;
		  /* 8220566Ch */ case    1:  		/* mr R4, R18 */
		/* 8220566Ch case    1:*/		regs.R4 = regs.R18;
		/* 8220566Ch case    1:*/		return 0x82205670;
		  /* 82205670h */ case    2:  		/* mr R3, R31 */
		/* 82205670h case    2:*/		regs.R3 = regs.R31;
		/* 82205670h case    2:*/		return 0x82205674;
		  /* 82205674h */ case    3:  		/* bl -67612 */
		/* 82205674h case    3:*/		regs.LR = 0x82205678; return 0x821F4E58;
		/* 82205674h case    3:*/		return 0x82205678;
	}
	return 0x82205678;
} // Block from 82205668h-82205678h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82205678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205678);
		  /* 82205678h */ case    0:  		/* addi R30, R30, 1 */
		/* 82205678h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82205678h case    0:*/		return 0x8220567C;
		  /* 8220567Ch */ case    1:  		/* addi R29, R29, 40 */
		/* 8220567Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x28);
		/* 8220567Ch case    1:*/		return 0x82205680;
		  /* 82205680h */ case    2:  		/* cmplw CR6, R30, R28 */
		/* 82205680h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82205680h case    2:*/		return 0x82205684;
		  /* 82205684h */ case    3:  		/* bc 12, CR6_LT, -84 */
		/* 82205684h case    3:*/		if ( regs.CR[6].lt ) { return 0x82205630;  }
		/* 82205684h case    3:*/		return 0x82205688;
	}
	return 0x82205688;
} // Block from 82205678h-82205688h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82205688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205688);
		  /* 82205688h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82205688h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82205688h case    0:*/		return 0x8220568C;
		  /* 8220568Ch */ case    1:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 8220568Ch case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 8220568Ch case    1:*/		return 0x82205690;
		  /* 82205690h */ case    2:  		/* bc 12, CR0_EQ, 156 */
		/* 82205690h case    2:*/		if ( regs.CR[0].eq ) { return 0x8220572C;  }
		/* 82205690h case    2:*/		return 0x82205694;
		  /* 82205694h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 82205694h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82205694h case    3:*/		return 0x82205698;
		  /* 82205698h */ case    4:  		/* lwz R11, <#[R11 + 40]> */
		/* 82205698h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82205698h case    4:*/		return 0x8220569C;
		  /* 8220569Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8220569Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220569Ch case    5:*/		return 0x822056A0;
		  /* 822056A0h */ case    6:  		/* bc 12, CR6_EQ, 312 */
		/* 822056A0h case    6:*/		if ( regs.CR[6].eq ) { return 0x822057D8;  }
		/* 822056A0h case    6:*/		return 0x822056A4;
		  /* 822056A4h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 822056A4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822056A4h case    7:*/		return 0x822056A8;
		  /* 822056A8h */ case    8:  		/* cmpwi CR6, R10, 1 */
		/* 822056A8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 822056A8h case    8:*/		return 0x822056AC;
		  /* 822056ACh */ case    9:  		/* bc 4, CR6_EQ, 300 */
		/* 822056ACh case    9:*/		if ( !regs.CR[6].eq ) { return 0x822057D8;  }
		/* 822056ACh case    9:*/		return 0x822056B0;
		  /* 822056B0h */ case   10:  		/* mr R30, R11 */
		/* 822056B0h case   10:*/		regs.R30 = regs.R11;
		/* 822056B0h case   10:*/		return 0x822056B4;
		  /* 822056B4h */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 822056B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 822056B4h case   11:*/		return 0x822056B8;
		  /* 822056B8h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 822056B8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822056B8h case   12:*/		return 0x822056BC;
		  /* 822056BCh */ case   13:  		/* cmpwi CR6, R10, 12 */
		/* 822056BCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000C);
		/* 822056BCh case   13:*/		return 0x822056C0;
		  /* 822056C0h */ case   14:  		/* bc 4, CR6_EQ, 72 */
		/* 822056C0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82205708;  }
		/* 822056C0h case   14:*/		return 0x822056C4;
		  /* 822056C4h */ case   15:  		/* lwz R10, <#[R11 + 16]> */
		/* 822056C4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 822056C4h case   15:*/		return 0x822056C8;
		  /* 822056C8h */ case   16:  		/* cmpwi CR6, R10, 0 */
		/* 822056C8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 822056C8h case   16:*/		return 0x822056CC;
		  /* 822056CCh */ case   17:  		/* bc 4, CR6_EQ, 232 */
		/* 822056CCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x822057B4;  }
		/* 822056CCh case   17:*/		return 0x822056D0;
		  /* 822056D0h */ case   18:  		/* lwz R10, <#[R11 + 24]> */
		/* 822056D0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 822056D0h case   18:*/		return 0x822056D4;
		  /* 822056D4h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 822056D4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822056D4h case   19:*/		return 0x822056D8;
		  /* 822056D8h */ case   20:  		/* bc 4, CR6_EQ, 232 */
		/* 822056D8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x822057C0;  }
		/* 822056D8h case   20:*/		return 0x822056DC;
		  /* 822056DCh */ case   21:  		/* lwz R10, <#[R11 + 28]> */
		/* 822056DCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 822056DCh case   21:*/		return 0x822056E0;
		  /* 822056E0h */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 822056E0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822056E0h case   22:*/		return 0x822056E4;
		  /* 822056E4h */ case   23:  		/* bc 4, CR6_EQ, 220 */
		/* 822056E4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x822057C0;  }
		/* 822056E4h case   23:*/		return 0x822056E8;
		  /* 822056E8h */ case   24:  		/* lwz R10, <#[R11 + 32]> */
		/* 822056E8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 822056E8h case   24:*/		return 0x822056EC;
		  /* 822056ECh */ case   25:  		/* cmplwi CR6, R10, 0 */
		/* 822056ECh case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822056ECh case   25:*/		return 0x822056F0;
		  /* 822056F0h */ case   26:  		/* bc 4, CR6_EQ, 208 */
		/* 822056F0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x822057C0;  }
		/* 822056F0h case   26:*/		return 0x822056F4;
		  /* 822056F4h */ case   27:  		/* li R6, 0 */
		/* 822056F4h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822056F4h case   27:*/		return 0x822056F8;
		  /* 822056F8h */ case   28:  		/* lwz R5, <#[R11 + 20]> */
		/* 822056F8h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000014) );
		/* 822056F8h case   28:*/		return 0x822056FC;
		  /* 822056FCh */ case   29:  		/* mr R4, R18 */
		/* 822056FCh case   29:*/		regs.R4 = regs.R18;
		/* 822056FCh case   29:*/		return 0x82205700;
		  /* 82205700h */ case   30:  		/* mr R3, R31 */
		/* 82205700h case   30:*/		regs.R3 = regs.R31;
		/* 82205700h case   30:*/		return 0x82205704;
		  /* 82205704h */ case   31:  		/* bl -42164 */
		/* 82205704h case   31:*/		regs.LR = 0x82205708; return 0x821FB250;
		/* 82205704h case   31:*/		return 0x82205708;
	}
	return 0x82205708;
} // Block from 82205688h-82205708h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82205708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205708);
		  /* 82205708h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 82205708h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82205708h case    0:*/		return 0x8220570C;
		  /* 8220570Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220570Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220570Ch case    1:*/		return 0x82205710;
		  /* 82205710h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82205710h case    2:*/		if ( regs.CR[6].eq ) { return 0x82205720;  }
		/* 82205710h case    2:*/		return 0x82205714;
		  /* 82205714h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205714h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205714h case    3:*/		return 0x82205718;
		  /* 82205718h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82205718h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82205718h case    4:*/		return 0x8220571C;
		  /* 8220571Ch */ case    5:  		/* bc 4, CR6_EQ, 176 */
		/* 8220571Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822057CC;  }
		/* 8220571Ch case    5:*/		return 0x82205720;
	}
	return 0x82205720;
} // Block from 82205708h-82205720h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82205720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205720);
		  /* 82205720h */ case    0:  		/* mr R30, R11 */
		/* 82205720h case    0:*/		regs.R30 = regs.R11;
		/* 82205720h case    0:*/		return 0x82205724;
		  /* 82205724h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82205724h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205724h case    1:*/		return 0x82205728;
		  /* 82205728h */ case    2:  		/* bc 4, CR6_EQ, -116 */
		/* 82205728h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822056B4;  }
		/* 82205728h case    2:*/		return 0x8220572C;
	}
	return 0x8220572C;
} // Block from 82205720h-8220572Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220572Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220572C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220572C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220572C);
		  /* 8220572Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220572Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220572Ch case    0:*/		return 0x82205730;
		  /* 82205730h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82205730h case    1:*/		if ( regs.CR[6].eq ) { return 0x82205748;  }
		/* 82205730h case    1:*/		return 0x82205734;
		  /* 82205734h */ case    2:  		/* mr R6, R18 */
		/* 82205734h case    2:*/		regs.R6 = regs.R18;
		/* 82205734h case    2:*/		return 0x82205738;
		  /* 82205738h */ case    3:  		/* mr R5, R27 */
		/* 82205738h case    3:*/		regs.R5 = regs.R27;
		/* 82205738h case    3:*/		return 0x8220573C;
		  /* 8220573Ch */ case    4:  		/* mr R4, R25 */
		/* 8220573Ch case    4:*/		regs.R4 = regs.R25;
		/* 8220573Ch case    4:*/		return 0x82205740;
		  /* 82205740h */ case    5:  		/* mr R3, R31 */
		/* 82205740h case    5:*/		regs.R3 = regs.R31;
		/* 82205740h case    5:*/		return 0x82205744;
		  /* 82205744h */ case    6:  		/* bl -61364 */
		/* 82205744h case    6:*/		regs.LR = 0x82205748; return 0x821F6790;
		/* 82205744h case    6:*/		return 0x82205748;
	}
	return 0x82205748;
} // Block from 8220572Ch-82205748h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82205748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205748);
		  /* 82205748h */ case    0:  		/* lwz R27, <#[R31 + 604]> */
		/* 82205748h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x0000025C) );
		/* 82205748h case    0:*/		return 0x8220574C;
		  /* 8220574Ch */ case    1:  		/* lis R11, -32253 */
		/* 8220574Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220574Ch case    1:*/		return 0x82205750;
		  /* 82205750h */ case    2:  		/* lis R10, -32253 */
		/* 82205750h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82205750h case    2:*/		return 0x82205754;
		  /* 82205754h */ case    3:  		/* addi R11, R11, 11820 */
		/* 82205754h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2E2C);
		/* 82205754h case    3:*/		return 0x82205758;
		  /* 82205758h */ case    4:  		/* addi R10, R10, 7880 */
		/* 82205758h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1EC8);
		/* 82205758h case    4:*/		return 0x8220575C;
		  /* 8220575Ch */ case    5:  		/* mr R14, R25 */
		/* 8220575Ch case    5:*/		regs.R14 = regs.R25;
		/* 8220575Ch case    5:*/		return 0x82205760;
		  /* 82205760h */ case    6:  		/* stw R11, <#[R1 + 168]> */
		/* 82205760h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 82205760h case    6:*/		return 0x82205764;
		  /* 82205764h */ case    7:  		/* stw R27, <#[R1 + 136]> */
		/* 82205764h case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000088) );
		/* 82205764h case    7:*/		return 0x82205768;
		  /* 82205768h */ case    8:  		/* stw R10, <#[R1 + 176]> */
		/* 82205768h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 82205768h case    8:*/		return 0x8220576C;
		  /* 8220576Ch */ case    9:  		/* lwz R23, <#[R26 + 48]> */
		/* 8220576Ch case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R26 + 0x00000030) );
		/* 8220576Ch case    9:*/		return 0x82205770;
		  /* 82205770h */ case   10:  		/* mr R29, R16 */
		/* 82205770h case   10:*/		regs.R29 = regs.R16;
		/* 82205770h case   10:*/		return 0x82205774;
		  /* 82205774h */ case   11:  		/* mr R22, R15 */
		/* 82205774h case   11:*/		regs.R22 = regs.R15;
		/* 82205774h case   11:*/		return 0x82205778;
		  /* 82205778h */ case   12:  		/* stw R16, <#[R1 + 96]> */
		/* 82205778h case   12:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000060) );
		/* 82205778h case   12:*/		return 0x8220577C;
		  /* 8220577Ch */ case   13:  		/* mr R24, R16 */
		/* 8220577Ch case   13:*/		regs.R24 = regs.R16;
		/* 8220577Ch case   13:*/		return 0x82205780;
		  /* 82205780h */ case   14:  		/* stw R16, <#[R1 + 100]> */
		/* 82205780h case   14:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000064) );
		/* 82205780h case   14:*/		return 0x82205784;
		  /* 82205784h */ case   15:  		/* b 1404 */
		/* 82205784h case   15:*/		return 0x82205D00;
		/* 82205784h case   15:*/		return 0x82205788;
	}
	return 0x82205788;
} // Block from 82205748h-82205788h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82205788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205788);
		  /* 82205788h */ case    0:  		/* mr R5, R30 */
		/* 82205788h case    0:*/		regs.R5 = regs.R30;
		/* 82205788h case    0:*/		return 0x8220578C;
		  /* 8220578Ch */ case    1:  		/* mr R4, R17 */
		/* 8220578Ch case    1:*/		regs.R4 = regs.R17;
		/* 8220578Ch case    1:*/		return 0x82205790;
		  /* 82205790h */ case    2:  		/* mr R3, R31 */
		/* 82205790h case    2:*/		regs.R3 = regs.R31;
		/* 82205790h case    2:*/		return 0x82205794;
		  /* 82205794h */ case    3:  		/* bl -62412 */
		/* 82205794h case    3:*/		regs.LR = 0x82205798; return 0x821F63C8;
		/* 82205794h case    3:*/		return 0x82205798;
		  /* 82205798h */ case    4:  		/* b -668 */
		/* 82205798h case    4:*/		return 0x822054FC;
		/* 82205798h case    4:*/		return 0x8220579C;
	}
	return 0x8220579C;
} // Block from 82205788h-8220579Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220579Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220579C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220579C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220579C);
		  /* 8220579Ch */ case    0:  		/* li R4, 4801 */
		/* 8220579Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220579Ch case    0:*/		return 0x822057A0;
		  /* 822057A0h */ case    1:  		/* mr R3, R31 */
		/* 822057A0h case    1:*/		regs.R3 = regs.R31;
		/* 822057A0h case    1:*/		return 0x822057A4;
		  /* 822057A4h */ case    2:  		/* bl -735548 */
		/* 822057A4h case    2:*/		regs.LR = 0x822057A8; return 0x82151E68;
		/* 822057A4h case    2:*/		return 0x822057A8;
	}
	return 0x822057A8;
} // Block from 8220579Ch-822057A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822057A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822057A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822057A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822057A8);
		  /* 822057A8h */ case    0:  		/* li R4, 4801 */
		/* 822057A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822057A8h case    0:*/		return 0x822057AC;
		  /* 822057ACh */ case    1:  		/* mr R3, R31 */
		/* 822057ACh case    1:*/		regs.R3 = regs.R31;
		/* 822057ACh case    1:*/		return 0x822057B0;
		  /* 822057B0h */ case    2:  		/* bl -735560 */
		/* 822057B0h case    2:*/		regs.LR = 0x822057B4; return 0x82151E68;
		/* 822057B0h case    2:*/		return 0x822057B4;
	}
	return 0x822057B4;
} // Block from 822057A8h-822057B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822057B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822057B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822057B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822057B4);
		  /* 822057B4h */ case    0:  		/* li R4, 4801 */
		/* 822057B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822057B4h case    0:*/		return 0x822057B8;
		  /* 822057B8h */ case    1:  		/* mr R3, R31 */
		/* 822057B8h case    1:*/		regs.R3 = regs.R31;
		/* 822057B8h case    1:*/		return 0x822057BC;
		  /* 822057BCh */ case    2:  		/* bl -735572 */
		/* 822057BCh case    2:*/		regs.LR = 0x822057C0; return 0x82151E68;
		/* 822057BCh case    2:*/		return 0x822057C0;
	}
	return 0x822057C0;
} // Block from 822057B4h-822057C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822057C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822057C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822057C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822057C0);
		  /* 822057C0h */ case    0:  		/* li R4, 4801 */
		/* 822057C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822057C0h case    0:*/		return 0x822057C4;
		  /* 822057C4h */ case    1:  		/* mr R3, R31 */
		/* 822057C4h case    1:*/		regs.R3 = regs.R31;
		/* 822057C4h case    1:*/		return 0x822057C8;
		  /* 822057C8h */ case    2:  		/* bl -735584 */
		/* 822057C8h case    2:*/		regs.LR = 0x822057CC; return 0x82151E68;
		/* 822057C8h case    2:*/		return 0x822057CC;
	}
	return 0x822057CC;
} // Block from 822057C0h-822057CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822057CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822057CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822057CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822057CC);
		  /* 822057CCh */ case    0:  		/* li R4, 4801 */
		/* 822057CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822057CCh case    0:*/		return 0x822057D0;
		  /* 822057D0h */ case    1:  		/* mr R3, R31 */
		/* 822057D0h case    1:*/		regs.R3 = regs.R31;
		/* 822057D0h case    1:*/		return 0x822057D4;
		  /* 822057D4h */ case    2:  		/* bl -735596 */
		/* 822057D4h case    2:*/		regs.LR = 0x822057D8; return 0x82151E68;
		/* 822057D4h case    2:*/		return 0x822057D8;
	}
	return 0x822057D8;
} // Block from 822057CCh-822057D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822057D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822057D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822057D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822057D8);
		  /* 822057D8h */ case    0:  		/* li R4, 4801 */
		/* 822057D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822057D8h case    0:*/		return 0x822057DC;
		  /* 822057DCh */ case    1:  		/* mr R3, R31 */
		/* 822057DCh case    1:*/		regs.R3 = regs.R31;
		/* 822057DCh case    1:*/		return 0x822057E0;
		  /* 822057E0h */ case    2:  		/* bl -735608 */
		/* 822057E0h case    2:*/		regs.LR = 0x822057E4; return 0x82151E68;
		/* 822057E0h case    2:*/		return 0x822057E4;
		  /* 822057E4h */ case    3:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 822057E4h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 822057E4h case    3:*/		return 0x822057E8;
		  /* 822057E8h */ case    4:  		/* bc 12, CR0_EQ, 192 */
		/* 822057E8h case    4:*/		if ( regs.CR[0].eq ) { return 0x822058A8;  }
		/* 822057E8h case    4:*/		return 0x822057EC;
		  /* 822057ECh */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 822057ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822057ECh case    5:*/		return 0x822057F0;
		  /* 822057F0h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 822057F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82205808;  }
		/* 822057F0h case    6:*/		return 0x822057F4;
		  /* 822057F4h */ case    7:  		/* mr R5, R31 */
		/* 822057F4h case    7:*/		regs.R5 = regs.R31;
		/* 822057F4h case    7:*/		return 0x822057F8;
		  /* 822057F8h */ case    8:  		/* lwz R3, <#[R31 + 564]> */
		/* 822057F8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822057F8h case    8:*/		return 0x822057FC;
		  /* 822057FCh */ case    9:  		/* mr R4, R29 */
		/* 822057FCh case    9:*/		regs.R4 = regs.R29;
		/* 822057FCh case    9:*/		return 0x82205800;
		  /* 82205800h */ case   10:  		/* bl 172768 */
		/* 82205800h case   10:*/		regs.LR = 0x82205804; return 0x8222FAE0;
		/* 82205800h case   10:*/		return 0x82205804;
		  /* 82205804h */ case   11:  		/* b 164 */
		/* 82205804h case   11:*/		return 0x822058A8;
		/* 82205804h case   11:*/		return 0x82205808;
	}
	return 0x82205808;
} // Block from 822057D8h-82205808h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82205808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205808);
		  /* 82205808h */ case    0:  		/* lwz R11, <#[R31 + 584]> */
		/* 82205808h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000248) );
		/* 82205808h case    0:*/		return 0x8220580C;
		  /* 8220580Ch */ case    1:  		/* lwz R10, <#[R11 + 4]> */
		/* 8220580Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8220580Ch case    1:*/		return 0x82205810;
		  /* 82205810h */ case    2:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 82205810h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 82205810h case    2:*/		return 0x82205814;
		  /* 82205814h */ case    3:  		/* bc 4, CR0_EQ, 108 */
		/* 82205814h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82205880;  }
		/* 82205814h case    3:*/		return 0x82205818;
		  /* 82205818h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 82205818h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82205818h case    4:*/		return 0x8220581C;
		  /* 8220581Ch */ case    5:  		/* bc 12, CR0_EQ, 100 */
		/* 8220581Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82205880;  }
		/* 8220581Ch case    5:*/		return 0x82205820;
		  /* 82205820h */ case    6:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82205820h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82205820h case    6:*/		return 0x82205824;
		  /* 82205824h */ case    7:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82205824h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82205824h case    7:*/		return 0x82205828;
		  /* 82205828h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 82205828h case    8:*/		if ( regs.CR[0].eq ) { return 0x82205834;  }
		/* 82205828h case    8:*/		return 0x8220582C;
		  /* 8220582Ch */ case    9:  		/* mr R11, R16 */
		/* 8220582Ch case    9:*/		regs.R11 = regs.R16;
		/* 8220582Ch case    9:*/		return 0x82205830;
		  /* 82205830h */ case   10:  		/* b 16 */
		/* 82205830h case   10:*/		return 0x82205840;
		/* 82205830h case   10:*/		return 0x82205834;
	}
	return 0x82205834;
} // Block from 82205808h-82205834h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82205834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205834);
		  /* 82205834h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82205834h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82205834h case    0:*/		return 0x82205838;
		  /* 82205838h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205838h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205838h case    1:*/		return 0x8220583C;
		  /* 8220583Ch */ case    2:  		/* addi R11, R11, -4 */
		/* 8220583Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8220583Ch case    2:*/		return 0x82205840;
	}
	return 0x82205840;
} // Block from 82205834h-82205840h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205840);
		  /* 82205840h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205840h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205840h case    0:*/		return 0x82205844;
		  /* 82205844h */ case    1:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 82205844h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 82205844h case    1:*/		return 0x82205848;
		  /* 82205848h */ case    2:  		/* add R11, R10, R11 */
		/* 82205848h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82205848h case    2:*/		return 0x8220584C;
		  /* 8220584Ch */ case    3:  		/* lwz R11, <#[R11 - 16]> */
		/* 8220584Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 8220584Ch case    3:*/		return 0x82205850;
		  /* 82205850h */ case    4:  		/* cmpwi CR6, R11, 2 */
		/* 82205850h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82205850h case    4:*/		return 0x82205854;
		  /* 82205854h */ case    5:  		/* bc 4, CR6_EQ, 10056 */
		/* 82205854h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82207F9C;  }
		/* 82205854h case    5:*/		return 0x82205858;
		  /* 82205858h */ case    6:  		/* lwz R11, <#[R31 + 564]> */
		/* 82205858h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82205858h case    6:*/		return 0x8220585C;
		  /* 8220585Ch */ case    7:  		/* lwz R11, <#[R11 + 12]> */
		/* 8220585Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220585Ch case    7:*/		return 0x82205860;
		  /* 82205860h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82205860h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205860h case    8:*/		return 0x82205864;
		  /* 82205864h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82205864h case    9:*/		if ( regs.CR[6].eq ) { return 0x82205874;  }
		/* 82205864h case    9:*/		return 0x82205868;
		  /* 82205868h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 82205868h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82205868h case   10:*/		return 0x8220586C;
		  /* 8220586Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8220586Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220586Ch case   11:*/		return 0x82205870;
		  /* 82205870h */ case   12:  		/* bc 4, CR6_EQ, 56 */
		/* 82205870h case   12:*/		if ( !regs.CR[6].eq ) { return 0x822058A8;  }
		/* 82205870h case   12:*/		return 0x82205874;
	}
	return 0x82205874;
} // Block from 82205840h-82205874h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82205874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205874);
		  /* 82205874h */ case    0:  		/* li R4, 3624 */
		/* 82205874h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE28);
		/* 82205874h case    0:*/		return 0x82205878;
		  /* 82205878h */ case    1:  		/* mr R3, R31 */
		/* 82205878h case    1:*/		regs.R3 = regs.R31;
		/* 82205878h case    1:*/		return 0x8220587C;
		  /* 8220587Ch */ case    2:  		/* bl -735764 */
		/* 8220587Ch case    2:*/		regs.LR = 0x82205880; return 0x82151E68;
		/* 8220587Ch case    2:*/		return 0x82205880;
	}
	return 0x82205880;
} // Block from 82205874h-82205880h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205880);
		  /* 82205880h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82205880h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82205880h case    0:*/		return 0x82205884;
		  /* 82205884h */ case    1:  		/* mr R3, R31 */
		/* 82205884h case    1:*/		regs.R3 = regs.R31;
		/* 82205884h case    1:*/		return 0x82205888;
		  /* 82205888h */ case    2:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82205888h case    2:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82205888h case    2:*/		return 0x8220588C;
		  /* 8220588Ch */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 8220588Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x822058A0;  }
		/* 8220588Ch case    3:*/		return 0x82205890;
		  /* 82205890h */ case    4:  		/* mr R5, R18 */
		/* 82205890h case    4:*/		regs.R5 = regs.R18;
		/* 82205890h case    4:*/		return 0x82205894;
		  /* 82205894h */ case    5:  		/* mr R4, R14 */
		/* 82205894h case    5:*/		regs.R4 = regs.R14;
		/* 82205894h case    5:*/		return 0x82205898;
		  /* 82205898h */ case    6:  		/* bl -47728 */
		/* 82205898h case    6:*/		regs.LR = 0x8220589C; return 0x821F9E28;
		/* 82205898h case    6:*/		return 0x8220589C;
		  /* 8220589Ch */ case    7:  		/* b 12 */
		/* 8220589Ch case    7:*/		return 0x822058A8;
		/* 8220589Ch case    7:*/		return 0x822058A0;
	}
	return 0x822058A0;
} // Block from 82205880h-822058A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822058A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822058A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822058A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822058A0);
		  /* 822058A0h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 822058A0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822058A0h case    0:*/		return 0x822058A4;
		  /* 822058A4h */ case    1:  		/* bl -97876 */
		/* 822058A4h case    1:*/		regs.LR = 0x822058A8; return 0x821EDA50;
		/* 822058A4h case    1:*/		return 0x822058A8;
	}
	return 0x822058A8;
} // Block from 822058A0h-822058A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822058A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822058A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822058A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822058A8);
		  /* 822058A8h */ case    0:  		/* addi R11, R21, 4 */
		/* 822058A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x4);
		/* 822058A8h case    0:*/		return 0x822058AC;
		  /* 822058ACh */ case    1:  		/* lwz R11, <#[R21 + 4]> */
		/* 822058ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 822058ACh case    1:*/		return 0x822058B0;
		  /* 822058B0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 822058B0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 822058B0h case    2:*/		return 0x822058B4;
		  /* 822058B4h */ case    3:  		/* bc 4, CR0_EQ, 9476 */
		/* 822058B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82207DB8;  }
		/* 822058B4h case    3:*/		return 0x822058B8;
		  /* 822058B8h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 822058B8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822058B8h case    4:*/		return 0x822058BC;
		  /* 822058BCh */ case    5:  		/* bc 12, CR0_EQ, 9468 */
		/* 822058BCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82207DB8;  }
		/* 822058BCh case    5:*/		return 0x822058C0;
		  /* 822058C0h */ case    6:  		/* addi R4, R1, 172 */
		/* 822058C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xAC);
		/* 822058C0h case    6:*/		return 0x822058C4;
		  /* 822058C4h */ case    7:  		/* mr R3, R21 */
		/* 822058C4h case    7:*/		regs.R3 = regs.R21;
		/* 822058C4h case    7:*/		return 0x822058C8;
		  /* 822058C8h */ case    8:  		/* bl -69752 */
		/* 822058C8h case    8:*/		regs.LR = 0x822058CC; return 0x821F4850;
		/* 822058C8h case    8:*/		return 0x822058CC;
		  /* 822058CCh */ case    9:  		/* lwz R11, <#[R1 + 172]> */
		/* 822058CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 822058CCh case    9:*/		return 0x822058D0;
		  /* 822058D0h */ case   10:  		/* mr R23, R3 */
		/* 822058D0h case   10:*/		regs.R23 = regs.R3;
		/* 822058D0h case   10:*/		return 0x822058D4;
		  /* 822058D4h */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 822058D4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822058D4h case   11:*/		return 0x822058D8;
		  /* 822058D8h */ case   12:  		/* bc 12, CR6_EQ, 804 */
		/* 822058D8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82205BFC;  }
		/* 822058D8h case   12:*/		return 0x822058DC;
		  /* 822058DCh */ case   13:  		/* cmpwi CR6, R11, 4 */
		/* 822058DCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 822058DCh case   13:*/		return 0x822058E0;
		  /* 822058E0h */ case   14:  		/* bc 12, CR6_EQ, 780 */
		/* 822058E0h case   14:*/		if ( regs.CR[6].eq ) { return 0x82205BEC;  }
		/* 822058E0h case   14:*/		return 0x822058E4;
		  /* 822058E4h */ case   15:  		/* cmpwi CR6, R11, 8 */
		/* 822058E4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 822058E4h case   15:*/		return 0x822058E8;
		  /* 822058E8h */ case   16:  		/* bc 12, CR6_EQ, 504 */
		/* 822058E8h case   16:*/		if ( regs.CR[6].eq ) { return 0x82205AE0;  }
		/* 822058E8h case   16:*/		return 0x822058EC;
		  /* 822058ECh */ case   17:  		/* cmpwi CR6, R11, 12 */
		/* 822058ECh case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 822058ECh case   17:*/		return 0x822058F0;
		  /* 822058F0h */ case   18:  		/* bc 12, CR6_EQ, 220 */
		/* 822058F0h case   18:*/		if ( regs.CR[6].eq ) { return 0x822059CC;  }
		/* 822058F0h case   18:*/		return 0x822058F4;
		  /* 822058F4h */ case   19:  		/* cmpwi CR6, R11, 16 */
		/* 822058F4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000010);
		/* 822058F4h case   19:*/		return 0x822058F8;
		  /* 822058F8h */ case   20:  		/* bc 4, CR6_EQ, 11316 */
		/* 822058F8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8220852C;  }
		/* 822058F8h case   20:*/		return 0x822058FC;
		  /* 822058FCh */ case   21:  		/* lwz R11, <#[R31 + 580]> */
		/* 822058FCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000244) );
		/* 822058FCh case   21:*/		return 0x82205900;
		  /* 82205900h */ case   22:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205900h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205900h case   22:*/		return 0x82205904;
		  /* 82205904h */ case   23:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82205904h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82205904h case   23:*/		return 0x82205908;
		  /* 82205908h */ case   24:  		/* bc 12, CR0_EQ, 12 */
		/* 82205908h case   24:*/		if ( regs.CR[0].eq ) { return 0x82205914;  }
		/* 82205908h case   24:*/		return 0x8220590C;
		  /* 8220590Ch */ case   25:  		/* mr R11, R16 */
		/* 8220590Ch case   25:*/		regs.R11 = regs.R16;
		/* 8220590Ch case   25:*/		return 0x82205910;
		  /* 82205910h */ case   26:  		/* b 16 */
		/* 82205910h case   26:*/		return 0x82205920;
		/* 82205910h case   26:*/		return 0x82205914;
	}
	return 0x82205914;
} // Block from 822058A8h-82205914h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82205914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205914);
		  /* 82205914h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82205914h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82205914h case    0:*/		return 0x82205918;
		  /* 82205918h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205918h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205918h case    1:*/		return 0x8220591C;
		  /* 8220591Ch */ case    2:  		/* addi R11, R11, -4 */
		/* 8220591Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8220591Ch case    2:*/		return 0x82205920;
	}
	return 0x82205920;
} // Block from 82205914h-82205920h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205920);
		  /* 82205920h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205920h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205920h case    0:*/		return 0x82205924;
		  /* 82205924h */ case    1:  		/* lwz R3, <#[R31 + 576]> */
		/* 82205924h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000240) );
		/* 82205924h case    1:*/		return 0x82205928;
		  /* 82205928h */ case    2:  		/* mulli R10, R10, 12 */
		/* 82205928h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 82205928h case    2:*/		return 0x8220592C;
		  /* 8220592Ch */ case    3:  		/* add R30, R10, R11 */
		/* 8220592Ch case    3:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 8220592Ch case    3:*/		return 0x82205930;
		  /* 82205930h */ case    4:  		/* addi R28, R30, 4 */
		/* 82205930h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 82205930h case    4:*/		return 0x82205934;
		  /* 82205934h */ case    5:  		/* bl -82020 */
		/* 82205934h case    5:*/		regs.LR = 0x82205938; return 0x821F18D0;
		/* 82205934h case    5:*/		return 0x82205938;
		  /* 82205938h */ case    6:  		/* addi R11, R31, 972 */
		/* 82205938h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 82205938h case    6:*/		return 0x8220593C;
		  /* 8220593Ch */ case    7:  		/* lwz R10, <#[R31 + 976]> */
		/* 8220593Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003D0) );
		/* 8220593Ch case    7:*/		return 0x82205940;
		  /* 82205940h */ case    8:  		/* mr R3, R31 */
		/* 82205940h case    8:*/		regs.R3 = regs.R31;
		/* 82205940h case    8:*/		return 0x82205944;
		  /* 82205944h */ case    9:  		/* mr R4, R28 */
		/* 82205944h case    9:*/		regs.R4 = regs.R28;
		/* 82205944h case    9:*/		return 0x82205948;
		  /* 82205948h */ case   10:  		/* lwz R11, <#[R31 + 576]> */
		/* 82205948h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000240) );
		/* 82205948h case   10:*/		return 0x8220594C;
		  /* 8220594Ch */ case   11:  		/* stw R10, <#[R11]> */
		/* 8220594Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220594Ch case   11:*/		return 0x82205950;
		  /* 82205950h */ case   12:  		/* stw R11, <#[R31 + 976]> */
		/* 82205950h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000003D0) );
		/* 82205950h case   12:*/		return 0x82205954;
		  /* 82205954h */ case   13:  		/* lwz R11, <#[R30 + 4]> */
		/* 82205954h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82205954h case   13:*/		return 0x82205958;
		  /* 82205958h */ case   14:  		/* stw R11, <#[R31 + 576]> */
		/* 82205958h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000240) );
		/* 82205958h case   14:*/		return 0x8220595C;
		  /* 8220595Ch */ case   15:  		/* bl -101676 */
		/* 8220595Ch case   15:*/		regs.LR = 0x82205960; return 0x821ECC30;
		/* 8220595Ch case   15:*/		return 0x82205960;
		  /* 82205960h */ case   16:  		/* lwz R3, <#[R31 + 580]> */
		/* 82205960h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000244) );
		/* 82205960h case   16:*/		return 0x82205964;
		  /* 82205964h */ case   17:  		/* lwz R11, <#[R3 + 4]> */
		/* 82205964h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82205964h case   17:*/		return 0x82205968;
		  /* 82205968h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205968h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205968h case   18:*/		return 0x8220596C;
		  /* 8220596Ch */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 8220596Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x82205978;  }
		/* 8220596Ch case   19:*/		return 0x82205970;
		  /* 82205970h */ case   20:  		/* mr R4, R16 */
		/* 82205970h case   20:*/		regs.R4 = regs.R16;
		/* 82205970h case   20:*/		return 0x82205974;
		  /* 82205974h */ case   21:  		/* b 16 */
		/* 82205974h case   21:*/		return 0x82205984;
		/* 82205974h case   21:*/		return 0x82205978;
	}
	return 0x82205978;
} // Block from 82205920h-82205978h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82205978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205978);
		  /* 82205978h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82205978h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82205978h case    0:*/		return 0x8220597C;
		  /* 8220597Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8220597Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8220597Ch case    1:*/		return 0x82205980;
		  /* 82205980h */ case    2:  		/* addi R4, R11, -4 */
		/* 82205980h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82205980h case    2:*/		return 0x82205984;
	}
	return 0x82205984;
} // Block from 82205978h-82205984h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205984);
		  /* 82205984h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82205984h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205984h case    0:*/		return 0x82205988;
		  /* 82205988h */ case    1:  		/* addic. R11, R11, -1 */
		/* 82205988h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82205988h case    1:*/		return 0x8220598C;
		  /* 8220598Ch */ case    2:  		/* stw R11, <#[R4 + 8]> */
		/* 8220598Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8220598Ch case    2:*/		return 0x82205990;
		  /* 82205990h */ case    3:  		/* bc 4, CR0_EQ, 612 */
		/* 82205990h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82205BF4;  }
		/* 82205990h case    3:*/		return 0x82205994;
		  /* 82205994h */ case    4:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82205994h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82205994h case    4:*/		return 0x82205998;
		  /* 82205998h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205998h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205998h case    5:*/		return 0x8220599C;
		  /* 8220599Ch */ case    6:  		/* lwz R9, <#[R11]> */
		/* 8220599Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8220599Ch case    6:*/		return 0x822059A0;
		  /* 822059A0h */ case    7:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 822059A0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 822059A0h case    7:*/		return 0x822059A4;
		  /* 822059A4h */ case    8:  		/* stw R9, <#[R10]> */
		/* 822059A4h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822059A4h case    8:*/		return 0x822059A8;
		  /* 822059A8h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 822059A8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822059A8h case    9:*/		return 0x822059AC;
		  /* 822059ACh */ case   10:  		/* lwz R11, <#[R11]> */
		/* 822059ACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 822059ACh case   10:*/		return 0x822059B0;
		  /* 822059B0h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822059B0h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822059B0h case   11:*/		return 0x822059B4;
		  /* 822059B4h */ case   12:  		/* stw R10, <#[R11]> */
		/* 822059B4h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822059B4h case   12:*/		return 0x822059B8;
		  /* 822059B8h */ case   13:  		/* lwz R11, <#[R4 + 12]> */
		/* 822059B8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 822059B8h case   13:*/		return 0x822059BC;
		  /* 822059BCh */ case   14:  		/* mulli R11, R11, 12 */
		/* 822059BCh case   14:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 822059BCh case   14:*/		return 0x822059C0;
		  /* 822059C0h */ case   15:  		/* addi R5, R11, 16 */
		/* 822059C0h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 822059C0h case   15:*/		return 0x822059C4;
		  /* 822059C4h */ case   16:  		/* bl -736188 */
		/* 822059C4h case   16:*/		regs.LR = 0x822059C8; return 0x82151E08;
		/* 822059C4h case   16:*/		return 0x822059C8;
		  /* 822059C8h */ case   17:  		/* b 556 */
		/* 822059C8h case   17:*/		return 0x82205BF4;
		/* 822059C8h case   17:*/		return 0x822059CC;
	}
	return 0x822059CC;
} // Block from 82205984h-822059CCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822059CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822059CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822059CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822059CC);
		  /* 822059CCh */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 822059CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 822059CCh case    0:*/		return 0x822059D0;
		  /* 822059D0h */ case    1:  		/* cmpwi CR6, R11, 6 */
		/* 822059D0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 822059D0h case    1:*/		return 0x822059D4;
		  /* 822059D4h */ case    2:  		/* bc 12, CR6_EQ, 260 */
		/* 822059D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82205AD8;  }
		/* 822059D4h case    2:*/		return 0x822059D8;
		  /* 822059D8h */ case    3:  		/* lwz R11, <#[R31 + 584]> */
		/* 822059D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000248) );
		/* 822059D8h case    3:*/		return 0x822059DC;
		  /* 822059DCh */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 822059DCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822059DCh case    4:*/		return 0x822059E0;
		  /* 822059E0h */ case    5:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 822059E0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 822059E0h case    5:*/		return 0x822059E4;
		  /* 822059E4h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 822059E4h case    6:*/		if ( regs.CR[0].eq ) { return 0x822059F0;  }
		/* 822059E4h case    6:*/		return 0x822059E8;
		  /* 822059E8h */ case    7:  		/* mr R11, R16 */
		/* 822059E8h case    7:*/		regs.R11 = regs.R16;
		/* 822059E8h case    7:*/		return 0x822059EC;
		  /* 822059ECh */ case    8:  		/* b 16 */
		/* 822059ECh case    8:*/		return 0x822059FC;
		/* 822059ECh case    8:*/		return 0x822059F0;
	}
	return 0x822059F0;
} // Block from 822059CCh-822059F0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822059F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822059F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822059F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822059F0);
		  /* 822059F0h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 822059F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 822059F0h case    0:*/		return 0x822059F4;
		  /* 822059F4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822059F4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822059F4h case    1:*/		return 0x822059F8;
		  /* 822059F8h */ case    2:  		/* addi R11, R11, -4 */
		/* 822059F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 822059F8h case    2:*/		return 0x822059FC;
	}
	return 0x822059FC;
} // Block from 822059F0h-822059FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822059FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822059FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822059FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822059FC);
		  /* 822059FCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 822059FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822059FCh case    0:*/		return 0x82205A00;
		  /* 82205A00h */ case    1:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 82205A00h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 82205A00h case    1:*/		return 0x82205A04;
		  /* 82205A04h */ case    2:  		/* add R10, R10, R11 */
		/* 82205A04h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82205A04h case    2:*/		return 0x82205A08;
		  /* 82205A08h */ case    3:  		/* lwz R11, <#[R10 - 16]> */
		/* 82205A08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFFFFF0) );
		/* 82205A08h case    3:*/		return 0x82205A0C;
		  /* 82205A0Ch */ case    4:  		/* cmpwi CR6, R11, 2 */
		/* 82205A0Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82205A0Ch case    4:*/		return 0x82205A10;
		  /* 82205A10h */ case    5:  		/* bc 4, CR6_EQ, 96 */
		/* 82205A10h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82205A70;  }
		/* 82205A10h case    5:*/		return 0x82205A14;
		  /* 82205A14h */ case    6:  		/* lwz R3, <#[R10 + 12]> */
		/* 82205A14h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x0000000C) );
		/* 82205A14h case    6:*/		return 0x82205A18;
		  /* 82205A18h */ case    7:  		/* lwz R11, <#[R3 + 12]> */
		/* 82205A18h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82205A18h case    7:*/		return 0x82205A1C;
		  /* 82205A1Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82205A1Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205A1Ch case    8:*/		return 0x82205A20;
		  /* 82205A20h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82205A20h case    9:*/		if ( regs.CR[6].eq ) { return 0x82205A30;  }
		/* 82205A20h case    9:*/		return 0x82205A24;
		  /* 82205A24h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 82205A24h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82205A24h case   10:*/		return 0x82205A28;
		  /* 82205A28h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82205A28h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205A28h case   11:*/		return 0x82205A2C;
		  /* 82205A2Ch */ case   12:  		/* bc 4, CR6_EQ, 68 */
		/* 82205A2Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82205A70;  }
		/* 82205A2Ch case   12:*/		return 0x82205A30;
	}
	return 0x82205A30;
} // Block from 822059FCh-82205A30h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82205A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205A30);
		  /* 82205A30h */ case    0:  		/* lwz R11, <#[R3 + 36]> */
		/* 82205A30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000024) );
		/* 82205A30h case    0:*/		return 0x82205A34;
		  /* 82205A34h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205A34h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205A34h case    1:*/		return 0x82205A38;
		  /* 82205A38h */ case    2:  		/* bc 4, CR0_EQ, 44 */
		/* 82205A38h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82205A64;  }
		/* 82205A38h case    2:*/		return 0x82205A3C;
		  /* 82205A3Ch */ case    3:  		/* lwz R11, <#[R3 + 32]> */
		/* 82205A3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 82205A3Ch case    3:*/		return 0x82205A40;
		  /* 82205A40h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205A40h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205A40h case    4:*/		return 0x82205A44;
		  /* 82205A44h */ case    5:  		/* addic. R11, R11, -40 */
		/* 82205A44h case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 82205A44h case    5:*/		return 0x82205A48;
		  /* 82205A48h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82205A48h case    6:*/		if ( regs.CR[0].eq ) { return 0x82205A64;  }
		/* 82205A48h case    6:*/		return 0x82205A4C;
		  /* 82205A4Ch */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 82205A4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82205A4Ch case    7:*/		return 0x82205A50;
		  /* 82205A50h */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82205A50h case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82205A50h case    8:*/		return 0x82205A54;
		  /* 82205A54h */ case    9:  		/* cmplwi CR6, R11, 88 */
		/* 82205A54h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000058);
		/* 82205A54h case    9:*/		return 0x82205A58;
		  /* 82205A58h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82205A58h case   10:*/		if ( regs.CR[6].eq ) { return 0x82205A70;  }
		/* 82205A58h case   10:*/		return 0x82205A5C;
		  /* 82205A5Ch */ case   11:  		/* cmplwi CR6, R11, 83 */
		/* 82205A5Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 82205A5Ch case   11:*/		return 0x82205A60;
		  /* 82205A60h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 82205A60h case   12:*/		if ( regs.CR[6].eq ) { return 0x82205A70;  }
		/* 82205A60h case   12:*/		return 0x82205A64;
	}
	return 0x82205A64;
} // Block from 82205A30h-82205A64h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82205A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205A64);
		  /* 82205A64h */ case    0:  		/* mr R5, R31 */
		/* 82205A64h case    0:*/		regs.R5 = regs.R31;
		/* 82205A64h case    0:*/		return 0x82205A68;
		  /* 82205A68h */ case    1:  		/* lwz R4, <#[R10 + 8]> */
		/* 82205A68h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 82205A68h case    1:*/		return 0x82205A6C;
		  /* 82205A6Ch */ case    2:  		/* bl 172148 */
		/* 82205A6Ch case    2:*/		regs.LR = 0x82205A70; return 0x8222FAE0;
		/* 82205A6Ch case    2:*/		return 0x82205A70;
	}
	return 0x82205A70;
} // Block from 82205A64h-82205A70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205A70);
		  /* 82205A70h */ case    0:  		/* lwz R3, <#[R31 + 584]> */
		/* 82205A70h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 82205A70h case    0:*/		return 0x82205A74;
		  /* 82205A74h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 82205A74h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82205A74h case    1:*/		return 0x82205A78;
		  /* 82205A78h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205A78h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205A78h case    2:*/		return 0x82205A7C;
		  /* 82205A7Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82205A7Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82205A88;  }
		/* 82205A7Ch case    3:*/		return 0x82205A80;
		  /* 82205A80h */ case    4:  		/* mr R4, R16 */
		/* 82205A80h case    4:*/		regs.R4 = regs.R16;
		/* 82205A80h case    4:*/		return 0x82205A84;
		  /* 82205A84h */ case    5:  		/* b 16 */
		/* 82205A84h case    5:*/		return 0x82205A94;
		/* 82205A84h case    5:*/		return 0x82205A88;
	}
	return 0x82205A88;
} // Block from 82205A70h-82205A88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82205A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205A88);
		  /* 82205A88h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82205A88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82205A88h case    0:*/		return 0x82205A8C;
		  /* 82205A8Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205A8Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205A8Ch case    1:*/		return 0x82205A90;
		  /* 82205A90h */ case    2:  		/* addi R4, R11, -4 */
		/* 82205A90h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82205A90h case    2:*/		return 0x82205A94;
	}
	return 0x82205A94;
} // Block from 82205A88h-82205A94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205A94);
		  /* 82205A94h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82205A94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205A94h case    0:*/		return 0x82205A98;
		  /* 82205A98h */ case    1:  		/* addic. R11, R11, -1 */
		/* 82205A98h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82205A98h case    1:*/		return 0x82205A9C;
		  /* 82205A9Ch */ case    2:  		/* stw R11, <#[R4 + 8]> */
		/* 82205A9Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205A9Ch case    2:*/		return 0x82205AA0;
		  /* 82205AA0h */ case    3:  		/* bc 4, CR0_EQ, 56 */
		/* 82205AA0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82205AD8;  }
		/* 82205AA0h case    3:*/		return 0x82205AA4;
		  /* 82205AA4h */ case    4:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82205AA4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82205AA4h case    4:*/		return 0x82205AA8;
		  /* 82205AA8h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205AA8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205AA8h case    5:*/		return 0x82205AAC;
		  /* 82205AACh */ case    6:  		/* lwz R9, <#[R11]> */
		/* 82205AACh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205AACh case    6:*/		return 0x82205AB0;
		  /* 82205AB0h */ case    7:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205AB0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205AB0h case    7:*/		return 0x82205AB4;
		  /* 82205AB4h */ case    8:  		/* stw R9, <#[R10]> */
		/* 82205AB4h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205AB4h case    8:*/		return 0x82205AB8;
		  /* 82205AB8h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205AB8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205AB8h case    9:*/		return 0x82205ABC;
		  /* 82205ABCh */ case   10:  		/* lwz R11, <#[R11]> */
		/* 82205ABCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82205ABCh case   10:*/		return 0x82205AC0;
		  /* 82205AC0h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205AC0h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205AC0h case   11:*/		return 0x82205AC4;
		  /* 82205AC4h */ case   12:  		/* stw R10, <#[R11]> */
		/* 82205AC4h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82205AC4h case   12:*/		return 0x82205AC8;
		  /* 82205AC8h */ case   13:  		/* lwz R11, <#[R4 + 12]> */
		/* 82205AC8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82205AC8h case   13:*/		return 0x82205ACC;
		  /* 82205ACCh */ case   14:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 82205ACCh case   14:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 82205ACCh case   14:*/		return 0x82205AD0;
		  /* 82205AD0h */ case   15:  		/* addi R5, R11, 16 */
		/* 82205AD0h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 82205AD0h case   15:*/		return 0x82205AD4;
		  /* 82205AD4h */ case   16:  		/* bl -736460 */
		/* 82205AD4h case   16:*/		regs.LR = 0x82205AD8; return 0x82151E08;
		/* 82205AD4h case   16:*/		return 0x82205AD8;
	}
	return 0x82205AD8;
} // Block from 82205A94h-82205AD8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82205AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205AD8);
		  /* 82205AD8h */ case    0:  		/* mr R22, R16 */
		/* 82205AD8h case    0:*/		regs.R22 = regs.R16;
		/* 82205AD8h case    0:*/		return 0x82205ADC;
		  /* 82205ADCh */ case    1:  		/* b -760 */
		/* 82205ADCh case    1:*/		return 0x822057E4;
		/* 82205ADCh case    1:*/		return 0x82205AE0;
	}
	return 0x82205AE0;
} // Block from 82205AD8h-82205AE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82205AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205AE0);
		  /* 82205AE0h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82205AE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205AE0h case    0:*/		return 0x82205AE4;
		  /* 82205AE4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205AE4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205AE4h case    1:*/		return 0x82205AE8;
		  /* 82205AE8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82205AE8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82205AF4;  }
		/* 82205AE8h case    2:*/		return 0x82205AEC;
		  /* 82205AECh */ case    3:  		/* mr R4, R16 */
		/* 82205AECh case    3:*/		regs.R4 = regs.R16;
		/* 82205AECh case    3:*/		return 0x82205AF0;
		  /* 82205AF0h */ case    4:  		/* b 16 */
		/* 82205AF0h case    4:*/		return 0x82205B00;
		/* 82205AF0h case    4:*/		return 0x82205AF4;
	}
	return 0x82205AF4;
} // Block from 82205AE0h-82205AF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82205AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205AF4);
		  /* 82205AF4h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 82205AF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205AF4h case    0:*/		return 0x82205AF8;
		  /* 82205AF8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205AF8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205AF8h case    1:*/		return 0x82205AFC;
		  /* 82205AFCh */ case    2:  		/* addi R4, R11, -4 */
		/* 82205AFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82205AFCh case    2:*/		return 0x82205B00;
	}
	return 0x82205B00;
} // Block from 82205AF4h-82205B00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205B00);
		  /* 82205B00h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82205B00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205B00h case    0:*/		return 0x82205B04;
		  /* 82205B04h */ case    1:  		/* addi R10, R11, 3 */
		/* 82205B04h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82205B04h case    1:*/		return 0x82205B08;
		  /* 82205B08h */ case    2:  		/* addic. R11, R11, -1 */
		/* 82205B08h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82205B08h case    2:*/		return 0x82205B0C;
		  /* 82205B0Ch */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82205B0Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82205B0Ch case    3:*/		return 0x82205B10;
		  /* 82205B10h */ case    4:  		/* lwzx R30, <#[R10 + R4]> */
		/* 82205B10h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82205B10h case    4:*/		return 0x82205B14;
		  /* 82205B14h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 82205B14h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205B14h case    5:*/		return 0x82205B18;
		  /* 82205B18h */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 82205B18h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82205B54;  }
		/* 82205B18h case    6:*/		return 0x82205B1C;
		  /* 82205B1Ch */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82205B1Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82205B1Ch case    7:*/		return 0x82205B20;
		  /* 82205B20h */ case    8:  		/* mr R3, R19 */
		/* 82205B20h case    8:*/		regs.R3 = regs.R19;
		/* 82205B20h case    8:*/		return 0x82205B24;
		  /* 82205B24h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205B24h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205B24h case    9:*/		return 0x82205B28;
		  /* 82205B28h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 82205B28h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205B28h case   10:*/		return 0x82205B2C;
		  /* 82205B2Ch */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205B2Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205B2Ch case   11:*/		return 0x82205B30;
		  /* 82205B30h */ case   12:  		/* stw R9, <#[R10]> */
		/* 82205B30h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205B30h case   12:*/		return 0x82205B34;
		  /* 82205B34h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82205B34h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82205B34h case   13:*/		return 0x82205B38;
		  /* 82205B38h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205B38h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205B38h case   14:*/		return 0x82205B3C;
		  /* 82205B3Ch */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 82205B3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82205B3Ch case   15:*/		return 0x82205B40;
		  /* 82205B40h */ case   16:  		/* stw R11, <#[R10]> */
		/* 82205B40h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82205B40h case   16:*/		return 0x82205B44;
		  /* 82205B44h */ case   17:  		/* lwz R11, <#[R4 + 12]> */
		/* 82205B44h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82205B44h case   17:*/		return 0x82205B48;
		  /* 82205B48h */ case   18:  		/* addi R11, R11, 4 */
		/* 82205B48h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82205B48h case   18:*/		return 0x82205B4C;
		  /* 82205B4Ch */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82205B4Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82205B4Ch case   19:*/		return 0x82205B50;
		  /* 82205B50h */ case   20:  		/* bl -736584 */
		/* 82205B50h case   20:*/		regs.LR = 0x82205B54; return 0x82151E08;
		/* 82205B50h case   20:*/		return 0x82205B54;
	}
	return 0x82205B54;
} // Block from 82205B00h-82205B54h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82205B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205B54);
		  /* 82205B54h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82205B54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205B54h case    0:*/		return 0x82205B58;
		  /* 82205B58h */ case    1:  		/* mr R29, R30 */
		/* 82205B58h case    1:*/		regs.R29 = regs.R30;
		/* 82205B58h case    1:*/		return 0x82205B5C;
		  /* 82205B5Ch */ case    2:  		/* stw R30, <#[R1 + 96]> */
		/* 82205B5Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 82205B5Ch case    2:*/		return 0x82205B60;
		  /* 82205B60h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205B60h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205B60h case    3:*/		return 0x82205B64;
		  /* 82205B64h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82205B64h case    4:*/		if ( regs.CR[0].eq ) { return 0x82205B70;  }
		/* 82205B64h case    4:*/		return 0x82205B68;
		  /* 82205B68h */ case    5:  		/* mr R4, R16 */
		/* 82205B68h case    5:*/		regs.R4 = regs.R16;
		/* 82205B68h case    5:*/		return 0x82205B6C;
		  /* 82205B6Ch */ case    6:  		/* b 16 */
		/* 82205B6Ch case    6:*/		return 0x82205B7C;
		/* 82205B6Ch case    6:*/		return 0x82205B70;
	}
	return 0x82205B70;
} // Block from 82205B54h-82205B70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82205B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205B70);
		  /* 82205B70h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 82205B70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205B70h case    0:*/		return 0x82205B74;
		  /* 82205B74h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205B74h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205B74h case    1:*/		return 0x82205B78;
		  /* 82205B78h */ case    2:  		/* addi R4, R11, -4 */
		/* 82205B78h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82205B78h case    2:*/		return 0x82205B7C;
	}
	return 0x82205B7C;
} // Block from 82205B70h-82205B7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205B7C);
		  /* 82205B7Ch */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82205B7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205B7Ch case    0:*/		return 0x82205B80;
		  /* 82205B80h */ case    1:  		/* addi R10, R11, 3 */
		/* 82205B80h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82205B80h case    1:*/		return 0x82205B84;
		  /* 82205B84h */ case    2:  		/* addic. R11, R11, -1 */
		/* 82205B84h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82205B84h case    2:*/		return 0x82205B88;
		  /* 82205B88h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82205B88h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82205B88h case    3:*/		return 0x82205B8C;
		  /* 82205B8Ch */ case    4:  		/* lwzx R30, <#[R10 + R4]> */
		/* 82205B8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82205B8Ch case    4:*/		return 0x82205B90;
		  /* 82205B90h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 82205B90h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205B90h case    5:*/		return 0x82205B94;
		  /* 82205B94h */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 82205B94h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82205BD0;  }
		/* 82205B94h case    6:*/		return 0x82205B98;
		  /* 82205B98h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82205B98h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82205B98h case    7:*/		return 0x82205B9C;
		  /* 82205B9Ch */ case    8:  		/* mr R3, R19 */
		/* 82205B9Ch case    8:*/		regs.R3 = regs.R19;
		/* 82205B9Ch case    8:*/		return 0x82205BA0;
		  /* 82205BA0h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205BA0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205BA0h case    9:*/		return 0x82205BA4;
		  /* 82205BA4h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 82205BA4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205BA4h case   10:*/		return 0x82205BA8;
		  /* 82205BA8h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205BA8h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205BA8h case   11:*/		return 0x82205BAC;
		  /* 82205BACh */ case   12:  		/* stw R9, <#[R10]> */
		/* 82205BACh case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205BACh case   12:*/		return 0x82205BB0;
		  /* 82205BB0h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82205BB0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82205BB0h case   13:*/		return 0x82205BB4;
		  /* 82205BB4h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205BB4h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205BB4h case   14:*/		return 0x82205BB8;
		  /* 82205BB8h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 82205BB8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82205BB8h case   15:*/		return 0x82205BBC;
		  /* 82205BBCh */ case   16:  		/* stw R11, <#[R10]> */
		/* 82205BBCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82205BBCh case   16:*/		return 0x82205BC0;
		  /* 82205BC0h */ case   17:  		/* lwz R11, <#[R4 + 12]> */
		/* 82205BC0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82205BC0h case   17:*/		return 0x82205BC4;
		  /* 82205BC4h */ case   18:  		/* addi R11, R11, 4 */
		/* 82205BC4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82205BC4h case   18:*/		return 0x82205BC8;
		  /* 82205BC8h */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82205BC8h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82205BC8h case   19:*/		return 0x82205BCC;
		  /* 82205BCCh */ case   20:  		/* bl -736708 */
		/* 82205BCCh case   20:*/		regs.LR = 0x82205BD0; return 0x82151E08;
		/* 82205BCCh case   20:*/		return 0x82205BD0;
	}
	return 0x82205BD0;
} // Block from 82205B7Ch-82205BD0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82205BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205BD0);
		  /* 82205BD0h */ case    0:  		/* stw R30, <#[R31 + 564]> */
		/* 82205BD0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 82205BD0h case    0:*/		return 0x82205BD4;
		  /* 82205BD4h */ case    1:  		/* mr R22, R15 */
		/* 82205BD4h case    1:*/		regs.R22 = regs.R15;
		/* 82205BD4h case    1:*/		return 0x82205BD8;
		  /* 82205BD8h */ case    2:  		/* lwz R11, <#[R30 + 76]> */
		/* 82205BD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 82205BD8h case    2:*/		return 0x82205BDC;
		  /* 82205BDCh */ case    3:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 82205BDCh case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 82205BDCh case    3:*/		return 0x82205BE0;
		  /* 82205BE0h */ case    4:  		/* stw R23, <#[R31 + 752]> */
		/* 82205BE0h case    4:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x000002F0) );
		/* 82205BE0h case    4:*/		return 0x82205BE4;
		  /* 82205BE4h */ case    5:  		/* stw R11, <#[R31 + 32]> */
		/* 82205BE4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82205BE4h case    5:*/		return 0x82205BE8;
		  /* 82205BE8h */ case    6:  		/* b -1028 */
		/* 82205BE8h case    6:*/		return 0x822057E4;
		/* 82205BE8h case    6:*/		return 0x82205BEC;
	}
	return 0x82205BEC;
} // Block from 82205BD0h-82205BECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82205BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205BEC);
		  /* 82205BECh */ case    0:  		/* mr R3, R31 */
		/* 82205BECh case    0:*/		regs.R3 = regs.R31;
		/* 82205BECh case    0:*/		return 0x82205BF0;
		  /* 82205BF0h */ case    1:  		/* bl -70320 */
		/* 82205BF0h case    1:*/		regs.LR = 0x82205BF4; return 0x821F4940;
		/* 82205BF0h case    1:*/		return 0x82205BF4;
	}
	return 0x82205BF4;
} // Block from 82205BECh-82205BF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82205BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205BF4);
		  /* 82205BF4h */ case    0:  		/* mr R22, R16 */
		/* 82205BF4h case    0:*/		regs.R22 = regs.R16;
		/* 82205BF4h case    0:*/		return 0x82205BF8;
		  /* 82205BF8h */ case    1:  		/* b 264 */
		/* 82205BF8h case    1:*/		return 0x82205D00;
		/* 82205BF8h case    1:*/		return 0x82205BFC;
	}
	return 0x82205BFC;
} // Block from 82205BF4h-82205BFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82205BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205BFC);
		  /* 82205BFCh */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82205BFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205BFCh case    0:*/		return 0x82205C00;
		  /* 82205C00h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205C00h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205C00h case    1:*/		return 0x82205C04;
		  /* 82205C04h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82205C04h case    2:*/		if ( regs.CR[0].eq ) { return 0x82205C10;  }
		/* 82205C04h case    2:*/		return 0x82205C08;
		  /* 82205C08h */ case    3:  		/* mr R4, R16 */
		/* 82205C08h case    3:*/		regs.R4 = regs.R16;
		/* 82205C08h case    3:*/		return 0x82205C0C;
		  /* 82205C0Ch */ case    4:  		/* b 16 */
		/* 82205C0Ch case    4:*/		return 0x82205C1C;
		/* 82205C0Ch case    4:*/		return 0x82205C10;
	}
	return 0x82205C10;
} // Block from 82205BFCh-82205C10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82205C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205C10);
		  /* 82205C10h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 82205C10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205C10h case    0:*/		return 0x82205C14;
		  /* 82205C14h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205C14h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205C14h case    1:*/		return 0x82205C18;
		  /* 82205C18h */ case    2:  		/* addi R4, R11, -4 */
		/* 82205C18h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82205C18h case    2:*/		return 0x82205C1C;
	}
	return 0x82205C1C;
} // Block from 82205C10h-82205C1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205C1C);
		  /* 82205C1Ch */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82205C1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205C1Ch case    0:*/		return 0x82205C20;
		  /* 82205C20h */ case    1:  		/* addi R10, R11, 3 */
		/* 82205C20h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82205C20h case    1:*/		return 0x82205C24;
		  /* 82205C24h */ case    2:  		/* addic. R11, R11, -1 */
		/* 82205C24h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82205C24h case    2:*/		return 0x82205C28;
		  /* 82205C28h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82205C28h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82205C28h case    3:*/		return 0x82205C2C;
		  /* 82205C2Ch */ case    4:  		/* lwzx R30, <#[R10 + R4]> */
		/* 82205C2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82205C2Ch case    4:*/		return 0x82205C30;
		  /* 82205C30h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 82205C30h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205C30h case    5:*/		return 0x82205C34;
		  /* 82205C34h */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 82205C34h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82205C70;  }
		/* 82205C34h case    6:*/		return 0x82205C38;
		  /* 82205C38h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82205C38h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82205C38h case    7:*/		return 0x82205C3C;
		  /* 82205C3Ch */ case    8:  		/* mr R3, R19 */
		/* 82205C3Ch case    8:*/		regs.R3 = regs.R19;
		/* 82205C3Ch case    8:*/		return 0x82205C40;
		  /* 82205C40h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205C40h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205C40h case    9:*/		return 0x82205C44;
		  /* 82205C44h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 82205C44h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205C44h case   10:*/		return 0x82205C48;
		  /* 82205C48h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205C48h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205C48h case   11:*/		return 0x82205C4C;
		  /* 82205C4Ch */ case   12:  		/* stw R9, <#[R10]> */
		/* 82205C4Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205C4Ch case   12:*/		return 0x82205C50;
		  /* 82205C50h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82205C50h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82205C50h case   13:*/		return 0x82205C54;
		  /* 82205C54h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205C54h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205C54h case   14:*/		return 0x82205C58;
		  /* 82205C58h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 82205C58h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82205C58h case   15:*/		return 0x82205C5C;
		  /* 82205C5Ch */ case   16:  		/* stw R11, <#[R10]> */
		/* 82205C5Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82205C5Ch case   16:*/		return 0x82205C60;
		  /* 82205C60h */ case   17:  		/* lwz R11, <#[R4 + 12]> */
		/* 82205C60h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82205C60h case   17:*/		return 0x82205C64;
		  /* 82205C64h */ case   18:  		/* addi R11, R11, 4 */
		/* 82205C64h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82205C64h case   18:*/		return 0x82205C68;
		  /* 82205C68h */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82205C68h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82205C68h case   19:*/		return 0x82205C6C;
		  /* 82205C6Ch */ case   20:  		/* bl -736868 */
		/* 82205C6Ch case   20:*/		regs.LR = 0x82205C70; return 0x82151E08;
		/* 82205C6Ch case   20:*/		return 0x82205C70;
	}
	return 0x82205C70;
} // Block from 82205C1Ch-82205C70h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82205C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205C70);
		  /* 82205C70h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82205C70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205C70h case    0:*/		return 0x82205C74;
		  /* 82205C74h */ case    1:  		/* mr R29, R30 */
		/* 82205C74h case    1:*/		regs.R29 = regs.R30;
		/* 82205C74h case    1:*/		return 0x82205C78;
		  /* 82205C78h */ case    2:  		/* stw R30, <#[R1 + 96]> */
		/* 82205C78h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 82205C78h case    2:*/		return 0x82205C7C;
		  /* 82205C7Ch */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205C7Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205C7Ch case    3:*/		return 0x82205C80;
		  /* 82205C80h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82205C80h case    4:*/		if ( regs.CR[0].eq ) { return 0x82205C8C;  }
		/* 82205C80h case    4:*/		return 0x82205C84;
		  /* 82205C84h */ case    5:  		/* mr R4, R16 */
		/* 82205C84h case    5:*/		regs.R4 = regs.R16;
		/* 82205C84h case    5:*/		return 0x82205C88;
		  /* 82205C88h */ case    6:  		/* b 16 */
		/* 82205C88h case    6:*/		return 0x82205C98;
		/* 82205C88h case    6:*/		return 0x82205C8C;
	}
	return 0x82205C8C;
} // Block from 82205C70h-82205C8Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82205C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205C8C);
		  /* 82205C8Ch */ case    0:  		/* lwz R11, <#[R19]> */
		/* 82205C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205C8Ch case    0:*/		return 0x82205C90;
		  /* 82205C90h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205C90h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205C90h case    1:*/		return 0x82205C94;
		  /* 82205C94h */ case    2:  		/* addi R4, R11, -4 */
		/* 82205C94h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82205C94h case    2:*/		return 0x82205C98;
	}
	return 0x82205C98;
} // Block from 82205C8Ch-82205C98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205C98);
		  /* 82205C98h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82205C98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205C98h case    0:*/		return 0x82205C9C;
		  /* 82205C9Ch */ case    1:  		/* addi R10, R11, 3 */
		/* 82205C9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82205C9Ch case    1:*/		return 0x82205CA0;
		  /* 82205CA0h */ case    2:  		/* addic. R11, R11, -1 */
		/* 82205CA0h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82205CA0h case    2:*/		return 0x82205CA4;
		  /* 82205CA4h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82205CA4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82205CA4h case    3:*/		return 0x82205CA8;
		  /* 82205CA8h */ case    4:  		/* lwzx R30, <#[R10 + R4]> */
		/* 82205CA8h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82205CA8h case    4:*/		return 0x82205CAC;
		  /* 82205CACh */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 82205CACh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82205CACh case    5:*/		return 0x82205CB0;
		  /* 82205CB0h */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 82205CB0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82205CEC;  }
		/* 82205CB0h case    6:*/		return 0x82205CB4;
		  /* 82205CB4h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82205CB4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82205CB4h case    7:*/		return 0x82205CB8;
		  /* 82205CB8h */ case    8:  		/* mr R3, R19 */
		/* 82205CB8h case    8:*/		regs.R3 = regs.R19;
		/* 82205CB8h case    8:*/		return 0x82205CBC;
		  /* 82205CBCh */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205CBCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205CBCh case    9:*/		return 0x82205CC0;
		  /* 82205CC0h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 82205CC0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205CC0h case   10:*/		return 0x82205CC4;
		  /* 82205CC4h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205CC4h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205CC4h case   11:*/		return 0x82205CC8;
		  /* 82205CC8h */ case   12:  		/* stw R9, <#[R10]> */
		/* 82205CC8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82205CC8h case   12:*/		return 0x82205CCC;
		  /* 82205CCCh */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82205CCCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82205CCCh case   13:*/		return 0x82205CD0;
		  /* 82205CD0h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82205CD0h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82205CD0h case   14:*/		return 0x82205CD4;
		  /* 82205CD4h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 82205CD4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82205CD4h case   15:*/		return 0x82205CD8;
		  /* 82205CD8h */ case   16:  		/* stw R11, <#[R10]> */
		/* 82205CD8h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82205CD8h case   16:*/		return 0x82205CDC;
		  /* 82205CDCh */ case   17:  		/* lwz R11, <#[R4 + 12]> */
		/* 82205CDCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82205CDCh case   17:*/		return 0x82205CE0;
		  /* 82205CE0h */ case   18:  		/* addi R11, R11, 4 */
		/* 82205CE0h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82205CE0h case   18:*/		return 0x82205CE4;
		  /* 82205CE4h */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82205CE4h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82205CE4h case   19:*/		return 0x82205CE8;
		  /* 82205CE8h */ case   20:  		/* bl -736992 */
		/* 82205CE8h case   20:*/		regs.LR = 0x82205CEC; return 0x82151E08;
		/* 82205CE8h case   20:*/		return 0x82205CEC;
	}
	return 0x82205CEC;
} // Block from 82205C98h-82205CECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 82205CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205CEC);
		  /* 82205CECh */ case    0:  		/* stw R30, <#[R31 + 564]> */
		/* 82205CECh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 82205CECh case    0:*/		return 0x82205CF0;
		  /* 82205CF0h */ case    1:  		/* mr R22, R15 */
		/* 82205CF0h case    1:*/		regs.R22 = regs.R15;
		/* 82205CF0h case    1:*/		return 0x82205CF4;
		  /* 82205CF4h */ case    2:  		/* lwz R11, <#[R30 + 76]> */
		/* 82205CF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 82205CF4h case    2:*/		return 0x82205CF8;
		  /* 82205CF8h */ case    3:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 82205CF8h case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 82205CF8h case    3:*/		return 0x82205CFC;
		  /* 82205CFCh */ case    4:  		/* stw R11, <#[R31 + 32]> */
		/* 82205CFCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82205CFCh case    4:*/		return 0x82205D00;
	}
	return 0x82205D00;
} // Block from 82205CECh-82205D00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82205D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205D00);
		  /* 82205D00h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 82205D00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82205D00h case    0:*/		return 0x82205D04;
		  /* 82205D04h */ case    1:  		/* bc 12, CR6_EQ, -1312 */
		/* 82205D04h case    1:*/		if ( regs.CR[6].eq ) { return 0x822057E4;  }
		/* 82205D04h case    1:*/		return 0x82205D08;
		  /* 82205D08h */ case    2:  		/* lwz R11, <#[R23 + 4]> */
		/* 82205D08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 82205D08h case    2:*/		return 0x82205D0C;
		  /* 82205D0Ch */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 82205D0Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82205D0Ch case    3:*/		return 0x82205D10;
		  /* 82205D10h */ case    4:  		/* bc 4, CR6_EQ, 848 */
		/* 82205D10h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82206060;  }
		/* 82205D10h case    4:*/		return 0x82205D14;
		  /* 82205D14h */ case    5:  		/* lwz R11, <#[R23 + 8]> */
		/* 82205D14h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82205D14h case    5:*/		return 0x82205D18;
		  /* 82205D18h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82205D18h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205D18h case    6:*/		return 0x82205D1C;
		  /* 82205D1Ch */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 82205D1Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82205D2C;  }
		/* 82205D1Ch case    7:*/		return 0x82205D20;
		  /* 82205D20h */ case    8:  		/* lwz R23, <#[R23 + 12]> */
		/* 82205D20h case    8:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R23 + 0x0000000C) );
		/* 82205D20h case    8:*/		return 0x82205D24;
		  /* 82205D24h */ case    9:  		/* cmplwi CR6, R23, 0 */
		/* 82205D24h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82205D24h case    9:*/		return 0x82205D28;
		  /* 82205D28h */ case   10:  		/* bc 4, CR6_EQ, -20 */
		/* 82205D28h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82205D14;  }
		/* 82205D28h case   10:*/		return 0x82205D2C;
	}
	return 0x82205D2C;
} // Block from 82205D00h-82205D2Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82205D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205D2C);
		  /* 82205D2Ch */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 82205D2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82205D2Ch case    0:*/		return 0x82205D30;
		  /* 82205D30h */ case    1:  		/* bc 12, CR6_EQ, 8084 */
		/* 82205D30h case    1:*/		if ( regs.CR[6].eq ) { return 0x82207CC4;  }
		/* 82205D30h case    1:*/		return 0x82205D34;
		  /* 82205D34h */ case    2:  		/* lwz R11, <#[R23 + 12]> */
		/* 82205D34h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 82205D34h case    2:*/		return 0x82205D38;
		  /* 82205D38h */ case    3:  		/* lwz R28, <#[R23 + 8]> */
		/* 82205D38h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R23 + 0x00000008) );
		/* 82205D38h case    3:*/		return 0x82205D3C;
		  /* 82205D3Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82205D3Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205D3Ch case    4:*/		return 0x82205D40;
		  /* 82205D40h */ case    5:  		/* bc 12, CR6_EQ, 224 */
		/* 82205D40h case    5:*/		if ( regs.CR[6].eq ) { return 0x82205E20;  }
		/* 82205D40h case    5:*/		return 0x82205D44;
		  /* 82205D44h */ case    6:  		/* cmplwi CR6, R24, 0 */
		/* 82205D44h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82205D44h case    6:*/		return 0x82205D48;
		  /* 82205D48h */ case    7:  		/* bc 12, CR6_EQ, 208 */
		/* 82205D48h case    7:*/		if ( regs.CR[6].eq ) { return 0x82205E18;  }
		/* 82205D48h case    7:*/		return 0x82205D4C;
		  /* 82205D4Ch */ case    8:  		/* mr R3, R31 */
		/* 82205D4Ch case    8:*/		regs.R3 = regs.R31;
		/* 82205D4Ch case    8:*/		return 0x82205D50;
		  /* 82205D50h */ case    9:  		/* bl -97752 */
		/* 82205D50h case    9:*/		regs.LR = 0x82205D54; return 0x821EDF78;
		/* 82205D50h case    9:*/		return 0x82205D54;
		  /* 82205D54h */ case   10:  		/* lwz R11, <#[R20]> */
		/* 82205D54h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205D54h case   10:*/		return 0x82205D58;
		  /* 82205D58h */ case   11:  		/* mr R30, R3 */
		/* 82205D58h case   11:*/		regs.R30 = regs.R3;
		/* 82205D58h case   11:*/		return 0x82205D5C;
		  /* 82205D5Ch */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205D5Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205D5Ch case   12:*/		return 0x82205D60;
		  /* 82205D60h */ case   13:  		/* bc 4, CR0_EQ, 40 */
		/* 82205D60h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82205D88;  }
		/* 82205D60h case   13:*/		return 0x82205D64;
		  /* 82205D64h */ case   14:  		/* lwz R11, <#[R19]> */
		/* 82205D64h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205D64h case   14:*/		return 0x82205D68;
		  /* 82205D68h */ case   15:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205D68h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205D68h case   15:*/		return 0x82205D6C;
		  /* 82205D6Ch */ case   16:  		/* addic. R3, R11, -4 */
		/* 82205D6Ch case   16:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82205D6Ch case   16:*/		return 0x82205D70;
		  /* 82205D70h */ case   17:  		/* bc 12, CR0_EQ, 24 */
		/* 82205D70h case   17:*/		if ( regs.CR[0].eq ) { return 0x82205D88;  }
		/* 82205D70h case   17:*/		return 0x82205D74;
		  /* 82205D74h */ case   18:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205D74h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205D74h case   18:*/		return 0x82205D78;
		  /* 82205D78h */ case   19:  		/* lwz R10, <#[R3 + 12]> */
		/* 82205D78h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82205D78h case   19:*/		return 0x82205D7C;
		  /* 82205D7Ch */ case   20:  		/* addi R11, R11, 1 */
		/* 82205D7Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205D7Ch case   20:*/		return 0x82205D80;
		  /* 82205D80h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 82205D80h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82205D80h case   21:*/		return 0x82205D84;
		  /* 82205D84h */ case   22:  		/* bc 4, CR6_GT, 16 */
		/* 82205D84h case   22:*/		if ( !regs.CR[6].gt ) { return 0x82205D94;  }
		/* 82205D84h case   22:*/		return 0x82205D88;
	}
	return 0x82205D88;
} // Block from 82205D2Ch-82205D88h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82205D88h
// Function '?Import@Compiler@D3DXShader@@AAAXPAUFunction@2@PAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205D88);
		  /* 82205D88h */ case    0:  		/* li R4, 1 */
		/* 82205D88h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205D88h case    0:*/		return 0x82205D8C;
		  /* 82205D8Ch */ case    1:  		/* mr R3, R19 */
		/* 82205D8Ch case    1:*/		regs.R3 = regs.R19;
		/* 82205D8Ch case    1:*/		return 0x82205D90;
		  /* 82205D90h */ case    2:  		/* bl -494792 */
		/* 82205D90h case    2:*/		regs.LR = 0x82205D94; return 0x8218D0C8;
		/* 82205D90h case    2:*/		return 0x82205D94;
	}
	return 0x82205D94;
} // Block from 82205D88h-82205D94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205D94);
		  /* 82205D94h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205D94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205D94h case    0:*/		return 0x82205D98;
		  /* 82205D98h */ case    1:  		/* addi R10, R11, 4 */
		/* 82205D98h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82205D98h case    1:*/		return 0x82205D9C;
		  /* 82205D9Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 82205D9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82205D9Ch case    2:*/		return 0x82205DA0;
		  /* 82205DA0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82205DA0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82205DA0h case    3:*/		return 0x82205DA4;
		  /* 82205DA4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82205DA4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82205DA4h case    4:*/		return 0x82205DA8;
		  /* 82205DA8h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 82205DA8h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82205DA8h case    5:*/		return 0x82205DAC;
		  /* 82205DACh */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82205DACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205DACh case    6:*/		return 0x82205DB0;
		  /* 82205DB0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205DB0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205DB0h case    7:*/		return 0x82205DB4;
		  /* 82205DB4h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82205DB4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82205DDC;  }
		/* 82205DB4h case    8:*/		return 0x82205DB8;
		  /* 82205DB8h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82205DB8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205DB8h case    9:*/		return 0x82205DBC;
		  /* 82205DBCh */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205DBCh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205DBCh case   10:*/		return 0x82205DC0;
		  /* 82205DC0h */ case   11:  		/* addic. R11, R11, -4 */
		/* 82205DC0h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82205DC0h case   11:*/		return 0x82205DC4;
		  /* 82205DC4h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82205DC4h case   12:*/		if ( regs.CR[0].eq ) { return 0x82205DDC;  }
		/* 82205DC4h case   12:*/		return 0x82205DC8;
		  /* 82205DC8h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205DC8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205DC8h case   13:*/		return 0x82205DCC;
		  /* 82205DCCh */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82205DCCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82205DCCh case   14:*/		return 0x82205DD0;
		  /* 82205DD0h */ case   15:  		/* addi R10, R10, 1 */
		/* 82205DD0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82205DD0h case   15:*/		return 0x82205DD4;
		  /* 82205DD4h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82205DD4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82205DD4h case   16:*/		return 0x82205DD8;
		  /* 82205DD8h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 82205DD8h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82205DEC;  }
		/* 82205DD8h case   17:*/		return 0x82205DDC;
	}
	return 0x82205DDC;
} // Block from 82205D94h-82205DDCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 82205DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205DDC);
		  /* 82205DDCh */ case    0:  		/* li R4, 1 */
		/* 82205DDCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205DDCh case    0:*/		return 0x82205DE0;
		  /* 82205DE0h */ case    1:  		/* mr R3, R19 */
		/* 82205DE0h case    1:*/		regs.R3 = regs.R19;
		/* 82205DE0h case    1:*/		return 0x82205DE4;
		  /* 82205DE4h */ case    2:  		/* bl -494876 */
		/* 82205DE4h case    2:*/		regs.LR = 0x82205DE8; return 0x8218D0C8;
		/* 82205DE4h case    2:*/		return 0x82205DE8;
		  /* 82205DE8h */ case    3:  		/* mr R11, R3 */
		/* 82205DE8h case    3:*/		regs.R11 = regs.R3;
		/* 82205DE8h case    3:*/		return 0x82205DEC;
	}
	return 0x82205DEC;
} // Block from 82205DDCh-82205DECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82205DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205DEC);
		  /* 82205DECh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205DECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205DECh case    0:*/		return 0x82205DF0;
		  /* 82205DF0h */ case    1:  		/* mr R4, R24 */
		/* 82205DF0h case    1:*/		regs.R4 = regs.R24;
		/* 82205DF0h case    1:*/		return 0x82205DF4;
		  /* 82205DF4h */ case    2:  		/* mr R3, R21 */
		/* 82205DF4h case    2:*/		regs.R3 = regs.R21;
		/* 82205DF4h case    2:*/		return 0x82205DF8;
		  /* 82205DF8h */ case    3:  		/* addi R9, R10, 4 */
		/* 82205DF8h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82205DF8h case    3:*/		return 0x82205DFC;
		  /* 82205DFCh */ case    4:  		/* addi R8, R10, 1 */
		/* 82205DFCh case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82205DFCh case    4:*/		return 0x82205E00;
		  /* 82205E00h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82205E00h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82205E00h case    5:*/		return 0x82205E04;
		  /* 82205E04h */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 82205E04h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82205E04h case    6:*/		return 0x82205E08;
		  /* 82205E08h */ case    7:  		/* stwx R29, <#[R10 + R11]> */
		/* 82205E08h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82205E08h case    7:*/		return 0x82205E0C;
		  /* 82205E0Ch */ case    8:  		/* bl -59804 */
		/* 82205E0Ch case    8:*/		regs.LR = 0x82205E10; return 0x821F7470;
		/* 82205E0Ch case    8:*/		return 0x82205E10;
		  /* 82205E10h */ case    9:  		/* mr R29, R30 */
		/* 82205E10h case    9:*/		regs.R29 = regs.R30;
		/* 82205E10h case    9:*/		return 0x82205E14;
		  /* 82205E14h */ case   10:  		/* stw R30, <#[R1 + 96]> */
		/* 82205E14h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 82205E14h case   10:*/		return 0x82205E18;
	}
	return 0x82205E18;
} // Block from 82205DECh-82205E18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82205E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205E18);
		  /* 82205E18h */ case    0:  		/* lwz R24, <#[R23 + 12]> */
		/* 82205E18h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000000C) );
		/* 82205E18h case    0:*/		return 0x82205E1C;
		  /* 82205E1Ch */ case    1:  		/* stw R24, <#[R1 + 100]> */
		/* 82205E1Ch case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000064) );
		/* 82205E1Ch case    1:*/		return 0x82205E20;
	}
	return 0x82205E20;
} // Block from 82205E18h-82205E20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82205E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205E20);
		  /* 82205E20h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82205E20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82205E20h case    0:*/		return 0x82205E24;
		  /* 82205E24h */ case    1:  		/* mr R23, R28 */
		/* 82205E24h case    1:*/		regs.R23 = regs.R28;
		/* 82205E24h case    1:*/		return 0x82205E28;
		  /* 82205E28h */ case    2:  		/* cmpwi CR6, R11, 1 */
		/* 82205E28h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82205E28h case    2:*/		return 0x82205E2C;
		  /* 82205E2Ch */ case    3:  		/* bc 4, CR6_EQ, -292 */
		/* 82205E2Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82205D08;  }
		/* 82205E2Ch case    3:*/		return 0x82205E30;
		  /* 82205E30h */ case    4:  		/* lwz R11, <#[R28 + 16]> */
		/* 82205E30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82205E30h case    4:*/		return 0x82205E34;
		  /* 82205E34h */ case    5:  		/* lwz R10, <#[R1 + 176]> */
		/* 82205E34h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 82205E34h case    5:*/		return 0x82205E38;
		  /* 82205E38h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 82205E38h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205E38h case    6:*/		return 0x82205E3C;
		  /* 82205E3Ch */ case    7:  		/* lbz R8, <#[R10]> */
		/* 82205E3Ch case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82205E3Ch case    7:*/		return 0x82205E40;
		  /* 82205E40h */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 82205E40h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82205E40h case    8:*/		return 0x82205E44;
		  /* 82205E44h */ case    9:  		/* subf R9, R8, R9 */
		/* 82205E44h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82205E44h case    9:*/		return 0x82205E48;
		  /* 82205E48h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 82205E48h case   10:*/		if ( regs.CR[0].eq ) { return 0x82205E5C;  }
		/* 82205E48h case   10:*/		return 0x82205E4C;
		  /* 82205E4Ch */ case   11:  		/* addi R11, R11, 1 */
		/* 82205E4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205E4Ch case   11:*/		return 0x82205E50;
		  /* 82205E50h */ case   12:  		/* addi R10, R10, 1 */
		/* 82205E50h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82205E50h case   12:*/		return 0x82205E54;
		  /* 82205E54h */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 82205E54h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82205E54h case   13:*/		return 0x82205E58;
		  /* 82205E58h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 82205E58h case   14:*/		if ( regs.CR[6].eq ) { return 0x82205E38;  }
		/* 82205E58h case   14:*/		return 0x82205E5C;
	}
	return 0x82205E5C;
} // Block from 82205E20h-82205E5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82205E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205E5C);
		  /* 82205E5Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82205E5Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82205E5Ch case    0:*/		return 0x82205E60;
		  /* 82205E60h */ case    1:  		/* bc 12, CR0_EQ, -344 */
		/* 82205E60h case    1:*/		if ( regs.CR[0].eq ) { return 0x82205D08;  }
		/* 82205E60h case    1:*/		return 0x82205E64;
		  /* 82205E64h */ case    2:  		/* lwz R11, <#[R31 + 744]> */
		/* 82205E64h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002E8) );
		/* 82205E64h case    2:*/		return 0x82205E68;
		  /* 82205E68h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82205E68h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82205E68h case    3:*/		return 0x82205E6C;
		  /* 82205E6Ch */ case    4:  		/* bc 12, CR6_EQ, 428 */
		/* 82205E6Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82206018;  }
		/* 82205E6Ch case    4:*/		return 0x82205E70;
		  /* 82205E70h */ case    5:  		/* lwz R11, <#[R31 + 564]> */
		/* 82205E70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82205E70h case    5:*/		return 0x82205E74;
		  /* 82205E74h */ case    6:  		/* mr R3, R31 */
		/* 82205E74h case    6:*/		regs.R3 = regs.R31;
		/* 82205E74h case    6:*/		return 0x82205E78;
		  /* 82205E78h */ case    7:  		/* lwz R11, <#[R11 + 48]> */
		/* 82205E78h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82205E78h case    7:*/		return 0x82205E7C;
		  /* 82205E7Ch */ case    8:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 82205E7Ch case    8:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 82205E7Ch case    8:*/		return 0x82205E80;
		  /* 82205E80h */ case    9:  		/* bc 4, CR0_EQ, 10256 */
		/* 82205E80h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82208690;  }
		/* 82205E80h case    9:*/		return 0x82205E84;
		  /* 82205E84h */ case   10:  		/* lwz R30, <#[R31 + 752]> */
		/* 82205E84h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x000002F0) );
		/* 82205E84h case   10:*/		return 0x82205E88;
		  /* 82205E88h */ case   11:  		/* bl -98064 */
		/* 82205E88h case   11:*/		regs.LR = 0x82205E8C; return 0x821EDF78;
		/* 82205E88h case   11:*/		return 0x82205E8C;
		  /* 82205E8Ch */ case   12:  		/* lwz R11, <#[R31 + 748]> */
		/* 82205E8Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002EC) );
		/* 82205E8Ch case   12:*/		return 0x82205E90;
		  /* 82205E90h */ case   13:  		/* lis R10, 7 */
		/* 82205E90h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0x7);
		/* 82205E90h case   13:*/		return 0x82205E94;
		  /* 82205E94h */ case   14:  		/* mr R28, R3 */
		/* 82205E94h case   14:*/		regs.R28 = regs.R3;
		/* 82205E94h case   14:*/		return 0x82205E98;
		  /* 82205E98h */ case   15:  		/* addi R11, R11, 1 */
		/* 82205E98h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205E98h case   15:*/		return 0x82205E9C;
		  /* 82205E9Ch */ case   16:  		/* ori R10, R10, 65534 */
		/* 82205E9Ch case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFE);
		/* 82205E9Ch case   16:*/		return 0x82205EA0;
		  /* 82205EA0h */ case   17:  		/* stw R11, <#[R31 + 748]> */
		/* 82205EA0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000002EC) );
		/* 82205EA0h case   17:*/		return 0x82205EA4;
		  /* 82205EA4h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 82205EA4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82205EA4h case   18:*/		return 0x82205EA8;
		  /* 82205EA8h */ case   19:  		/* stw R11, <#[R31 + 752]> */
		/* 82205EA8h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000002F0) );
		/* 82205EA8h case   19:*/		return 0x82205EAC;
		  /* 82205EACh */ case   20:  		/* bc 12, CR6_GT, 10220 */
		/* 82205EACh case   20:*/		if ( regs.CR[6].gt ) { return 0x82208698;  }
		/* 82205EACh case   20:*/		return 0x82205EB0;
		  /* 82205EB0h */ case   21:  		/* lwz R3, <#[R31 + 744]> */
		/* 82205EB0h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000002E8) );
		/* 82205EB0h case   21:*/		return 0x82205EB4;
		  /* 82205EB4h */ case   22:  		/* lwz R11, <#[R3 + 4]> */
		/* 82205EB4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82205EB4h case   22:*/		return 0x82205EB8;
		  /* 82205EB8h */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205EB8h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205EB8h case   23:*/		return 0x82205EBC;
		  /* 82205EBCh */ case   24:  		/* bc 4, CR0_EQ, 40 */
		/* 82205EBCh case   24:*/		if ( !regs.CR[0].eq ) { return 0x82205EE4;  }
		/* 82205EBCh case   24:*/		return 0x82205EC0;
		  /* 82205EC0h */ case   25:  		/* lwz R11, <#[R3]> */
		/* 82205EC0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82205EC0h case   25:*/		return 0x82205EC4;
		  /* 82205EC4h */ case   26:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205EC4h case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205EC4h case   26:*/		return 0x82205EC8;
		  /* 82205EC8h */ case   27:  		/* addic. R11, R11, -4 */
		/* 82205EC8h case   27:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82205EC8h case   27:*/		return 0x82205ECC;
		  /* 82205ECCh */ case   28:  		/* bc 12, CR0_EQ, 24 */
		/* 82205ECCh case   28:*/		if ( regs.CR[0].eq ) { return 0x82205EE4;  }
		/* 82205ECCh case   28:*/		return 0x82205ED0;
		  /* 82205ED0h */ case   29:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205ED0h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205ED0h case   29:*/		return 0x82205ED4;
		  /* 82205ED4h */ case   30:  		/* lwz R9, <#[R11 + 12]> */
		/* 82205ED4h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82205ED4h case   30:*/		return 0x82205ED8;
		  /* 82205ED8h */ case   31:  		/* addi R10, R10, 1 */
		/* 82205ED8h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82205ED8h case   31:*/		return 0x82205EDC;
		  /* 82205EDCh */ case   32:  		/* cmplw CR6, R10, R9 */
		/* 82205EDCh case   32:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82205EDCh case   32:*/		return 0x82205EE0;
		  /* 82205EE0h */ case   33:  		/* bc 4, CR6_GT, 16 */
		/* 82205EE0h case   33:*/		if ( !regs.CR[6].gt ) { return 0x82205EF0;  }
		/* 82205EE0h case   33:*/		return 0x82205EE4;
	}
	return 0x82205EE4;
} // Block from 82205E5Ch-82205EE4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82205EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205EE4);
		  /* 82205EE4h */ case    0:  		/* li R4, 1 */
		/* 82205EE4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205EE4h case    0:*/		return 0x82205EE8;
		  /* 82205EE8h */ case    1:  		/* bl -421936 */
		/* 82205EE8h case    1:*/		regs.LR = 0x82205EEC; return 0x8219EEB8;
		/* 82205EE8h case    1:*/		return 0x82205EEC;
		  /* 82205EECh */ case    2:  		/* mr R11, R3 */
		/* 82205EECh case    2:*/		regs.R11 = regs.R3;
		/* 82205EECh case    2:*/		return 0x82205EF0;
	}
	return 0x82205EF0;
} // Block from 82205EE4h-82205EF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205EF0);
		  /* 82205EF0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205EF0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205EF0h case    0:*/		return 0x82205EF4;
		  /* 82205EF4h */ case    1:  		/* mr R9, R30 */
		/* 82205EF4h case    1:*/		regs.R9 = regs.R30;
		/* 82205EF4h case    1:*/		return 0x82205EF8;
		  /* 82205EF8h */ case    2:  		/* mr R3, R31 */
		/* 82205EF8h case    2:*/		regs.R3 = regs.R31;
		/* 82205EF8h case    2:*/		return 0x82205EFC;
		  /* 82205EFCh */ case    3:  		/* addi R8, R10, 2 */
		/* 82205EFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82205EFCh case    3:*/		return 0x82205F00;
		  /* 82205F00h */ case    4:  		/* addi R7, R10, 1 */
		/* 82205F00h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82205F00h case    4:*/		return 0x82205F04;
		  /* 82205F04h */ case    5:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 82205F04h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 82205F04h case    5:*/		return 0x82205F08;
		  /* 82205F08h */ case    6:  		/* stw R7, <#[R11 + 8]> */
		/* 82205F08h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82205F08h case    6:*/		return 0x82205F0C;
		  /* 82205F0Ch */ case    7:  		/* add R11, R10, R11 */
		/* 82205F0Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82205F0Ch case    7:*/		return 0x82205F10;
		  /* 82205F10h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 82205F10h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82205F10h case    8:*/		return 0x82205F14;
		  /* 82205F14h */ case    9:  		/* lwz R8, <#[R11]> */
		/* 82205F14h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82205F14h case    9:*/		return 0x82205F18;
		  /* 82205F18h */ case   10:  		/* rlwimi R9, R8, 0, 0, 12 */
		/* 82205F18h case   10:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R9,regs.R8);
		/* 82205F18h case   10:*/		return 0x82205F1C;
		  /* 82205F1Ch */ case   11:  		/* stw R9, <#[R11]> */
		/* 82205F1Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82205F1Ch case   11:*/		return 0x82205F20;
		  /* 82205F20h */ case   12:  		/* lwz R9, <#[R31 + 752]> */
		/* 82205F20h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002F0) );
		/* 82205F20h case   12:*/		return 0x82205F24;
		  /* 82205F24h */ case   13:  		/* rlwimi R9, R10, 0, 0, 12 */
		/* 82205F24h case   13:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R9,regs.R10);
		/* 82205F24h case   13:*/		return 0x82205F28;
		  /* 82205F28h */ case   14:  		/* stw R9, <#[R11 + 4]> */
		/* 82205F28h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82205F28h case   14:*/		return 0x82205F2C;
		  /* 82205F2Ch */ case   15:  		/* bl -82364 */
		/* 82205F2Ch case   15:*/		regs.LR = 0x82205F30; return 0x821F1D70;
		/* 82205F2Ch case   15:*/		return 0x82205F30;
		  /* 82205F30h */ case   16:  		/* mr R3, R31 */
		/* 82205F30h case   16:*/		regs.R3 = regs.R31;
		/* 82205F30h case   16:*/		return 0x82205F34;
		  /* 82205F34h */ case   17:  		/* bl -98236 */
		/* 82205F34h case   17:*/		regs.LR = 0x82205F38; return 0x821EDF78;
		/* 82205F34h case   17:*/		return 0x82205F38;
		  /* 82205F38h */ case   18:  		/* mr R25, R3 */
		/* 82205F38h case   18:*/		regs.R25 = regs.R3;
		/* 82205F38h case   18:*/		return 0x82205F3C;
		  /* 82205F3Ch */ case   19:  		/* mr R5, R31 */
		/* 82205F3Ch case   19:*/		regs.R5 = regs.R31;
		/* 82205F3Ch case   19:*/		return 0x82205F40;
		  /* 82205F40h */ case   20:  		/* lwz R3, <#[R31 + 564]> */
		/* 82205F40h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82205F40h case   20:*/		return 0x82205F44;
		  /* 82205F44h */ case   21:  		/* mr R4, R25 */
		/* 82205F44h case   21:*/		regs.R4 = regs.R25;
		/* 82205F44h case   21:*/		return 0x82205F48;
		  /* 82205F48h */ case   22:  		/* bl 170904 */
		/* 82205F48h case   22:*/		regs.LR = 0x82205F4C; return 0x8222FAE0;
		/* 82205F48h case   22:*/		return 0x82205F4C;
		  /* 82205F4Ch */ case   23:  		/* stw R25, <#[R31 + 564]> */
		/* 82205F4Ch case   23:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000234) );
		/* 82205F4Ch case   23:*/		return 0x82205F50;
		  /* 82205F50h */ case   24:  		/* lwz R11, <#[R20]> */
		/* 82205F50h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205F50h case   24:*/		return 0x82205F54;
		  /* 82205F54h */ case   25:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205F54h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205F54h case   25:*/		return 0x82205F58;
		  /* 82205F58h */ case   26:  		/* bc 4, CR0_EQ, 40 */
		/* 82205F58h case   26:*/		if ( !regs.CR[0].eq ) { return 0x82205F80;  }
		/* 82205F58h case   26:*/		return 0x82205F5C;
		  /* 82205F5Ch */ case   27:  		/* lwz R11, <#[R19]> */
		/* 82205F5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205F5Ch case   27:*/		return 0x82205F60;
		  /* 82205F60h */ case   28:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205F60h case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205F60h case   28:*/		return 0x82205F64;
		  /* 82205F64h */ case   29:  		/* addic. R3, R11, -4 */
		/* 82205F64h case   29:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82205F64h case   29:*/		return 0x82205F68;
		  /* 82205F68h */ case   30:  		/* bc 12, CR0_EQ, 24 */
		/* 82205F68h case   30:*/		if ( regs.CR[0].eq ) { return 0x82205F80;  }
		/* 82205F68h case   30:*/		return 0x82205F6C;
		  /* 82205F6Ch */ case   31:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205F6Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205F6Ch case   31:*/		return 0x82205F70;
		  /* 82205F70h */ case   32:  		/* lwz R10, <#[R3 + 12]> */
		/* 82205F70h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82205F70h case   32:*/		return 0x82205F74;
		  /* 82205F74h */ case   33:  		/* addi R11, R11, 1 */
		/* 82205F74h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82205F74h case   33:*/		return 0x82205F78;
		  /* 82205F78h */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 82205F78h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82205F78h case   34:*/		return 0x82205F7C;
		  /* 82205F7Ch */ case   35:  		/* bc 4, CR6_GT, 16 */
		/* 82205F7Ch case   35:*/		if ( !regs.CR[6].gt ) { return 0x82205F8C;  }
		/* 82205F7Ch case   35:*/		return 0x82205F80;
	}
	return 0x82205F80;
} // Block from 82205EF0h-82205F80h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82205F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205F80);
		  /* 82205F80h */ case    0:  		/* li R4, 1 */
		/* 82205F80h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205F80h case    0:*/		return 0x82205F84;
		  /* 82205F84h */ case    1:  		/* mr R3, R19 */
		/* 82205F84h case    1:*/		regs.R3 = regs.R19;
		/* 82205F84h case    1:*/		return 0x82205F88;
		  /* 82205F88h */ case    2:  		/* bl -495296 */
		/* 82205F88h case    2:*/		regs.LR = 0x82205F8C; return 0x8218D0C8;
		/* 82205F88h case    2:*/		return 0x82205F8C;
	}
	return 0x82205F8C;
} // Block from 82205F80h-82205F8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82205F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205F8C);
		  /* 82205F8Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82205F8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82205F8Ch case    0:*/		return 0x82205F90;
		  /* 82205F90h */ case    1:  		/* addi R10, R11, 4 */
		/* 82205F90h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82205F90h case    1:*/		return 0x82205F94;
		  /* 82205F94h */ case    2:  		/* addi R9, R11, 1 */
		/* 82205F94h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82205F94h case    2:*/		return 0x82205F98;
		  /* 82205F98h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82205F98h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82205F98h case    3:*/		return 0x82205F9C;
		  /* 82205F9Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82205F9Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82205F9Ch case    4:*/		return 0x82205FA0;
		  /* 82205FA0h */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 82205FA0h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82205FA0h case    5:*/		return 0x82205FA4;
		  /* 82205FA4h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82205FA4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82205FA4h case    6:*/		return 0x82205FA8;
		  /* 82205FA8h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82205FA8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82205FA8h case    7:*/		return 0x82205FAC;
		  /* 82205FACh */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82205FACh case    8:*/		if ( !regs.CR[0].eq ) { return 0x82205FD4;  }
		/* 82205FACh case    8:*/		return 0x82205FB0;
		  /* 82205FB0h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82205FB0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82205FB0h case    9:*/		return 0x82205FB4;
		  /* 82205FB4h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82205FB4h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82205FB4h case   10:*/		return 0x82205FB8;
		  /* 82205FB8h */ case   11:  		/* addic. R11, R11, -4 */
		/* 82205FB8h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82205FB8h case   11:*/		return 0x82205FBC;
		  /* 82205FBCh */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82205FBCh case   12:*/		if ( regs.CR[0].eq ) { return 0x82205FD4;  }
		/* 82205FBCh case   12:*/		return 0x82205FC0;
		  /* 82205FC0h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205FC0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205FC0h case   13:*/		return 0x82205FC4;
		  /* 82205FC4h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82205FC4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82205FC4h case   14:*/		return 0x82205FC8;
		  /* 82205FC8h */ case   15:  		/* addi R10, R10, 1 */
		/* 82205FC8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82205FC8h case   15:*/		return 0x82205FCC;
		  /* 82205FCCh */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82205FCCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82205FCCh case   16:*/		return 0x82205FD0;
		  /* 82205FD0h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 82205FD0h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82205FE4;  }
		/* 82205FD0h case   17:*/		return 0x82205FD4;
	}
	return 0x82205FD4;
} // Block from 82205F8Ch-82205FD4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82205FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205FD4);
		  /* 82205FD4h */ case    0:  		/* li R4, 1 */
		/* 82205FD4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82205FD4h case    0:*/		return 0x82205FD8;
		  /* 82205FD8h */ case    1:  		/* mr R3, R19 */
		/* 82205FD8h case    1:*/		regs.R3 = regs.R19;
		/* 82205FD8h case    1:*/		return 0x82205FDC;
		  /* 82205FDCh */ case    2:  		/* bl -495380 */
		/* 82205FDCh case    2:*/		regs.LR = 0x82205FE0; return 0x8218D0C8;
		/* 82205FDCh case    2:*/		return 0x82205FE0;
		  /* 82205FE0h */ case    3:  		/* mr R11, R3 */
		/* 82205FE0h case    3:*/		regs.R11 = regs.R3;
		/* 82205FE0h case    3:*/		return 0x82205FE4;
	}
	return 0x82205FE4;
} // Block from 82205FD4h-82205FE4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82205FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82205FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82205FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82205FE4);
		  /* 82205FE4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82205FE4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82205FE4h case    0:*/		return 0x82205FE8;
		  /* 82205FE8h */ case    1:  		/* li R5, 8 */
		/* 82205FE8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82205FE8h case    1:*/		return 0x82205FEC;
		  /* 82205FECh */ case    2:  		/* mr R4, R30 */
		/* 82205FECh case    2:*/		regs.R4 = regs.R30;
		/* 82205FECh case    2:*/		return 0x82205FF0;
		  /* 82205FF0h */ case    3:  		/* addi R9, R10, 4 */
		/* 82205FF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82205FF0h case    3:*/		return 0x82205FF4;
		  /* 82205FF4h */ case    4:  		/* addi R8, R10, 1 */
		/* 82205FF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82205FF4h case    4:*/		return 0x82205FF8;
		  /* 82205FF8h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82205FF8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82205FF8h case    5:*/		return 0x82205FFC;
		  /* 82205FFCh */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 82205FFCh case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82205FFCh case    6:*/		return 0x82206000;
		  /* 82206000h */ case    7:  		/* mr R3, R21 */
		/* 82206000h case    7:*/		regs.R3 = regs.R21;
		/* 82206000h case    7:*/		return 0x82206004;
		  /* 82206004h */ case    8:  		/* stwx R29, <#[R10 + R11]> */
		/* 82206004h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82206004h case    8:*/		return 0x82206008;
		  /* 82206008h */ case    9:  		/* bl -59912 */
		/* 82206008h case    9:*/		regs.LR = 0x8220600C; return 0x821F7600;
		/* 82206008h case    9:*/		return 0x8220600C;
		  /* 8220600Ch */ case   10:  		/* lwz R25, <#[R1 + 572]> */
		/* 8220600Ch case   10:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000023C) );
		/* 8220600Ch case   10:*/		return 0x82206010;
		  /* 82206010h */ case   11:  		/* mr R29, R28 */
		/* 82206010h case   11:*/		regs.R29 = regs.R28;
		/* 82206010h case   11:*/		return 0x82206014;
		  /* 82206014h */ case   12:  		/* stw R28, <#[R1 + 96]> */
		/* 82206014h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 82206014h case   12:*/		return 0x82206018;
	}
	return 0x82206018;
} // Block from 82205FE4h-82206018h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82206018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206018);
		  /* 82206018h */ case    0:  		/* addi R11, R17, 4 */
		/* 82206018h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 82206018h case    0:*/		return 0x8220601C;
		  /* 8220601Ch */ case    1:  		/* lwz R11, <#[R17 + 4]> */
		/* 8220601Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 8220601Ch case    1:*/		return 0x82206020;
		  /* 82206020h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82206020h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82206020h case    2:*/		return 0x82206024;
		  /* 82206024h */ case    3:  		/* bc 4, CR0_EQ, -796 */
		/* 82206024h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82205D08;  }
		/* 82206024h case    3:*/		return 0x82206028;
		  /* 82206028h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82206028h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82206028h case    4:*/		return 0x8220602C;
		  /* 8220602Ch */ case    5:  		/* bc 12, CR0_EQ, -804 */
		/* 8220602Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82205D08;  }
		/* 8220602Ch case    5:*/		return 0x82206030;
		  /* 82206030h */ case    6:  		/* addi R10, R1, 304 */
		/* 82206030h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x130);
		/* 82206030h case    6:*/		return 0x82206034;
		  /* 82206034h */ case    7:  		/* addi R9, R1, 96 */
		/* 82206034h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82206034h case    7:*/		return 0x82206038;
		  /* 82206038h */ case    8:  		/* addi R8, R1, 100 */
		/* 82206038h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82206038h case    8:*/		return 0x8220603C;
		  /* 8220603Ch */ case    9:  		/* li R7, 3 */
		/* 8220603Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8220603Ch case    9:*/		return 0x82206040;
		  /* 82206040h */ case   10:  		/* li R6, 0 */
		/* 82206040h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82206040h case   10:*/		return 0x82206044;
		  /* 82206044h */ case   11:  		/* li R5, 6 */
		/* 82206044h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82206044h case   11:*/		return 0x82206048;
		  /* 82206048h */ case   12:  		/* mr R4, R17 */
		/* 82206048h case   12:*/		regs.R4 = regs.R17;
		/* 82206048h case   12:*/		return 0x8220604C;
		  /* 8220604Ch */ case   13:  		/* mr R3, R31 */
		/* 8220604Ch case   13:*/		regs.R3 = regs.R31;
		/* 8220604Ch case   13:*/		return 0x82206050;
		  /* 82206050h */ case   14:  		/* bl -53032 */
		/* 82206050h case   14:*/		regs.LR = 0x82206054; return 0x821F9128;
		/* 82206050h case   14:*/		return 0x82206054;
		  /* 82206054h */ case   15:  		/* lwz R29, <#[R1 + 96]> */
		/* 82206054h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82206054h case   15:*/		return 0x82206058;
		  /* 82206058h */ case   16:  		/* lwz R24, <#[R1 + 100]> */
		/* 82206058h case   16:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000064) );
		/* 82206058h case   16:*/		return 0x8220605C;
		  /* 8220605Ch */ case   17:  		/* b -852 */
		/* 8220605Ch case   17:*/		return 0x82205D08;
		/* 8220605Ch case   17:*/		return 0x82206060;
	}
	return 0x82206060;
} // Block from 82206018h-82206060h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82206060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206060);
		  /* 82206060h */ case    0:  		/* cmpwi CR6, R11, 3 */
		/* 82206060h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82206060h case    0:*/		return 0x82206064;
		  /* 82206064h */ case    1:  		/* bc 12, CR6_EQ, 7264 */
		/* 82206064h case    1:*/		if ( regs.CR[6].eq ) { return 0x82207CC4;  }
		/* 82206064h case    1:*/		return 0x82206068;
		  /* 82206068h */ case    2:  		/* cmpwi CR6, R11, 6 */
		/* 82206068h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82206068h case    2:*/		return 0x8220606C;
		  /* 8220606Ch */ case    3:  		/* bc 12, CR6_EQ, 6988 */
		/* 8220606Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82207BB8;  }
		/* 8220606Ch case    3:*/		return 0x82206070;
		  /* 82206070h */ case    4:  		/* cmpwi CR6, R11, 12 */
		/* 82206070h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82206070h case    4:*/		return 0x82206074;
		  /* 82206074h */ case    5:  		/* bc 12, CR6_EQ, 452 */
		/* 82206074h case    5:*/		if ( regs.CR[6].eq ) { return 0x82206238;  }
		/* 82206074h case    5:*/		return 0x82206078;
		  /* 82206078h */ case    6:  		/* cmpwi CR6, R11, 19 */
		/* 82206078h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82206078h case    6:*/		return 0x8220607C;
		  /* 8220607Ch */ case    7:  		/* bc 12, CR6_EQ, 408 */
		/* 8220607Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82206214;  }
		/* 8220607Ch case    7:*/		return 0x82206080;
		  /* 82206080h */ case    8:  		/* cmpwi CR6, R11, 27 */
		/* 82206080h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 82206080h case    8:*/		return 0x82206084;
		  /* 82206084h */ case    9:  		/* bc 4, CR6_EQ, 9396 */
		/* 82206084h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82208538;  }
		/* 82206084h case    9:*/		return 0x82206088;
		  /* 82206088h */ case   10:  		/* lwz R11, <#[R23 + 56]> */
		/* 82206088h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000038) );
		/* 82206088h case   10:*/		return 0x8220608C;
		  /* 8220608Ch */ case   11:  		/* cmplwi CR6, R11, 5 */
		/* 8220608Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 8220608Ch case   11:*/		return 0x82206090;
		  /* 82206090h */ case   12:  		/* bc 12, CR6_LT, 364 */
		/* 82206090h case   12:*/		if ( regs.CR[6].lt ) { return 0x822061FC;  }
		/* 82206090h case   12:*/		return 0x82206094;
		  /* 82206094h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 82206094h case   13:*/		if ( regs.CR[6].eq ) { return 0x822060AC;  }
		/* 82206094h case   13:*/		return 0x82206098;
		  /* 82206098h */ case   14:  		/* cmplwi CR6, R11, 8 */
		/* 82206098h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 82206098h case   14:*/		return 0x8220609C;
		  /* 8220609Ch */ case   15:  		/* bc 12, CR6_LT, 7208 */
		/* 8220609Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x82207CC4;  }
		/* 8220609Ch case   15:*/		return 0x822060A0;
		  /* 822060A0h */ case   16:  		/* li R4, 4801 */
		/* 822060A0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822060A0h case   16:*/		return 0x822060A4;
		  /* 822060A4h */ case   17:  		/* mr R3, R31 */
		/* 822060A4h case   17:*/		regs.R3 = regs.R31;
		/* 822060A4h case   17:*/		return 0x822060A8;
		  /* 822060A8h */ case   18:  		/* bl -737856 */
		/* 822060A8h case   18:*/		regs.LR = 0x822060AC; return 0x82151E68;
		/* 822060A8h case   18:*/		return 0x822060AC;
	}
	return 0x822060AC;
} // Block from 82206060h-822060ACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 822060ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822060AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822060AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822060AC);
		  /* 822060ACh */ case    0:  		/* lwz R11, <#[R23 + 60]> */
		/* 822060ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000003C) );
		/* 822060ACh case    0:*/		return 0x822060B0;
		  /* 822060B0h */ case    1:  		/* cmplwi CR6, R11, 2 */
		/* 822060B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 822060B0h case    1:*/		return 0x822060B4;
		  /* 822060B4h */ case    2:  		/* bc 12, CR6_LT, 7184 */
		/* 822060B4h case    2:*/		if ( regs.CR[6].lt ) { return 0x82207CC4;  }
		/* 822060B4h case    2:*/		return 0x822060B8;
		  /* 822060B8h */ case    3:  		/* bc 12, CR6_EQ, 300 */
		/* 822060B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x822061E4;  }
		/* 822060B8h case    3:*/		return 0x822060BC;
		  /* 822060BCh */ case    4:  		/* cmplwi CR6, R11, 11 */
		/* 822060BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000B);
		/* 822060BCh case    4:*/		return 0x822060C0;
		  /* 822060C0h */ case    5:  		/* bc 12, CR6_EQ, 132 */
		/* 822060C0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82206144;  }
		/* 822060C0h case    5:*/		return 0x822060C4;
		  /* 822060C4h */ case    6:  		/* cmplwi CR6, R11, 12 */
		/* 822060C4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 822060C4h case    6:*/		return 0x822060C8;
		  /* 822060C8h */ case    7:  		/* bc 12, CR6_EQ, 308 */
		/* 822060C8h case    7:*/		if ( regs.CR[6].eq ) { return 0x822061FC;  }
		/* 822060C8h case    7:*/		return 0x822060CC;
		  /* 822060CCh */ case    8:  		/* cmplwi CR6, R11, 30 */
		/* 822060CCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 822060CCh case    8:*/		return 0x822060D0;
		  /* 822060D0h */ case    9:  		/* mr R3, R31 */
		/* 822060D0h case    9:*/		regs.R3 = regs.R31;
		/* 822060D0h case    9:*/		return 0x822060D4;
		  /* 822060D4h */ case   10:  		/* bc 4, CR6_EQ, 9328 */
		/* 822060D4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82208544;  }
		/* 822060D4h case   10:*/		return 0x822060D8;
		  /* 822060D8h */ case   11:  		/* lwz R11, <#[R31 + 40]> */
		/* 822060D8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 822060D8h case   11:*/		return 0x822060DC;
		  /* 822060DCh */ case   12:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 822060DCh case   12:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 822060DCh case   12:*/		return 0x822060E0;
		  /* 822060E0h */ case   13:  		/* bc 4, CR0_EQ, 9324 */
		/* 822060E0h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8220854C;  }
		/* 822060E0h case   13:*/		return 0x822060E4;
		  /* 822060E4h */ case   14:  		/* bl -98668 */
		/* 822060E4h case   14:*/		regs.LR = 0x822060E8; return 0x821EDF78;
		/* 822060E4h case   14:*/		return 0x822060E8;
		  /* 822060E8h */ case   15:  		/* mr R30, R3 */
		/* 822060E8h case   15:*/		regs.R30 = regs.R3;
		/* 822060E8h case   15:*/		return 0x822060EC;
		  /* 822060ECh */ case   16:  		/* mr R5, R31 */
		/* 822060ECh case   16:*/		regs.R5 = regs.R31;
		/* 822060ECh case   16:*/		return 0x822060F0;
		  /* 822060F0h */ case   17:  		/* lwz R3, <#[R31 + 564]> */
		/* 822060F0h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822060F0h case   17:*/		return 0x822060F4;
		  /* 822060F4h */ case   18:  		/* mr R4, R30 */
		/* 822060F4h case   18:*/		regs.R4 = regs.R30;
		/* 822060F4h case   18:*/		return 0x822060F8;
		  /* 822060F8h */ case   19:  		/* bl 170472 */
		/* 822060F8h case   19:*/		regs.LR = 0x822060FC; return 0x8222FAE0;
		/* 822060F8h case   19:*/		return 0x822060FC;
		  /* 822060FCh */ case   20:  		/* stw R30, <#[R31 + 564]> */
		/* 822060FCh case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 822060FCh case   20:*/		return 0x82206100;
		  /* 82206100h */ case   21:  		/* addi R5, R30, 24 */
		/* 82206100h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0x18);
		/* 82206100h case   21:*/		return 0x82206104;
		  /* 82206104h */ case   22:  		/* li R8, 0 */
		/* 82206104h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82206104h case   22:*/		return 0x82206108;
		  /* 82206108h */ case   23:  		/* li R7, 0 */
		/* 82206108h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82206108h case   23:*/		return 0x8220610C;
		  /* 8220610Ch */ case   24:  		/* li R6, 126 */
		/* 8220610Ch case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x7E);
		/* 8220610Ch case   24:*/		return 0x82206110;
		  /* 82206110h */ case   25:  		/* mr R4, R30 */
		/* 82206110h case   25:*/		regs.R4 = regs.R30;
		/* 82206110h case   25:*/		return 0x82206114;
		  /* 82206114h */ case   26:  		/* mr R3, R31 */
		/* 82206114h case   26:*/		regs.R3 = regs.R31;
		/* 82206114h case   26:*/		return 0x82206118;
		  /* 82206118h */ case   27:  		/* bl 125056 */
		/* 82206118h case   27:*/		regs.LR = 0x8220611C; return 0x82224998;
		/* 82206118h case   27:*/		return 0x8220611C;
		  /* 8220611Ch */ case   28:  		/* lwz R11, <#[R23 + 104]> */
		/* 8220611Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000068) );
		/* 8220611Ch case   28:*/		return 0x82206120;
		  /* 82206120h */ case   29:  		/* mr R10, R3 */
		/* 82206120h case   29:*/		regs.R10 = regs.R3;
		/* 82206120h case   29:*/		return 0x82206124;
		  /* 82206124h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 82206124h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206124h case   30:*/		return 0x82206128;
		  /* 82206128h */ case   31:  		/* bc 12, CR6_EQ, 9260 */
		/* 82206128h case   31:*/		if ( regs.CR[6].eq ) { return 0x82208554;  }
		/* 82206128h case   31:*/		return 0x8220612C;
		  /* 8220612Ch */ case   32:  		/* lwz R9, <#[R11 + 4]> */
		/* 8220612Ch case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8220612Ch case   32:*/		return 0x82206130;
		  /* 82206130h */ case   33:  		/* cmpwi CR6, R9, 28 */
		/* 82206130h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000001C);
		/* 82206130h case   33:*/		return 0x82206134;
		  /* 82206134h */ case   34:  		/* bc 4, CR6_EQ, 9248 */
		/* 82206134h case   34:*/		if ( !regs.CR[6].eq ) { return 0x82208554;  }
		/* 82206134h case   34:*/		return 0x82206138;
		  /* 82206138h */ case   35:  		/* lwz R11, <#[R11 + 24]> */
		/* 82206138h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82206138h case   35:*/		return 0x8220613C;
		  /* 8220613Ch */ case   36:  		/* stw R11, <#[R3 + 16]> */
		/* 8220613Ch case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8220613Ch case   36:*/		return 0x82206140;
		  /* 82206140h */ case   37:  		/* b 128 */
		/* 82206140h case   37:*/		return 0x822061C0;
		/* 82206140h case   37:*/		return 0x82206144;
	}
	return 0x82206144;
} // Block from 822060ACh-82206144h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82206144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206144);
		  /* 82206144h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82206144h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82206144h case    0:*/		return 0x82206148;
		  /* 82206148h */ case    1:  		/* mr R3, R31 */
		/* 82206148h case    1:*/		regs.R3 = regs.R31;
		/* 82206148h case    1:*/		return 0x8220614C;
		  /* 8220614Ch */ case    2:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 8220614Ch case    2:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 8220614Ch case    2:*/		return 0x82206150;
		  /* 82206150h */ case    3:  		/* bc 4, CR0_EQ, 9232 */
		/* 82206150h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82208560;  }
		/* 82206150h case    3:*/		return 0x82206154;
		  /* 82206154h */ case    4:  		/* lwz R11, <#[R23 + 100]> */
		/* 82206154h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000064) );
		/* 82206154h case    4:*/		return 0x82206158;
		  /* 82206158h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82206158h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206158h case    5:*/		return 0x8220615C;
		  /* 8220615Ch */ case    6:  		/* bc 4, CR6_EQ, 9228 */
		/* 8220615Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82208568;  }
		/* 8220615Ch case    6:*/		return 0x82206160;
		  /* 82206160h */ case    7:  		/* li R6, 2 */
		/* 82206160h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82206160h case    7:*/		return 0x82206164;
		  /* 82206164h */ case    8:  		/* lwz R5, <#[R23 + 104]> */
		/* 82206164h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000068) );
		/* 82206164h case    8:*/		return 0x82206168;
		  /* 82206168h */ case    9:  		/* mr R4, R18 */
		/* 82206168h case    9:*/		regs.R4 = regs.R18;
		/* 82206168h case    9:*/		return 0x8220616C;
		  /* 8220616Ch */ case   10:  		/* bl -44828 */
		/* 8220616Ch case   10:*/		regs.LR = 0x82206170; return 0x821FB250;
		/* 8220616Ch case   10:*/		return 0x82206170;
		  /* 82206170h */ case   11:  		/* lwz R4, <#[R31 + 564]> */
		/* 82206170h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82206170h case   11:*/		return 0x82206174;
		  /* 82206174h */ case   12:  		/* mr R6, R3 */
		/* 82206174h case   12:*/		regs.R6 = regs.R3;
		/* 82206174h case   12:*/		return 0x82206178;
		  /* 82206178h */ case   13:  		/* addi R5, R4, 32 */
		/* 82206178h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 82206178h case   13:*/		return 0x8220617C;
		  /* 8220617Ch */ case   14:  		/* mr R3, R31 */
		/* 8220617Ch case   14:*/		regs.R3 = regs.R31;
		/* 8220617Ch case   14:*/		return 0x82206180;
		  /* 82206180h */ case   15:  		/* bl -279648 */
		/* 82206180h case   15:*/		regs.LR = 0x82206184; return 0x821C1D20;
		/* 82206180h case   15:*/		return 0x82206184;
		  /* 82206184h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206184h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206184h case   16:*/		return 0x82206188;
		  /* 82206188h */ case   17:  		/* oris R11, R11, 6 */
		/* 82206188h case   17:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 82206188h case   17:*/		return 0x8220618C;
		  /* 8220618Ch */ case   18:  		/* stw R11, <#[R3 + 8]> */
		/* 8220618Ch case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220618Ch case   18:*/		return 0x82206190;
		  /* 82206190h */ case   19:  		/* lwz R30, <#[R23 + 108]> */
		/* 82206190h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x0000006C) );
		/* 82206190h case   19:*/		return 0x82206194;
		  /* 82206194h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 82206194h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82206194h case   20:*/		return 0x82206198;
		  /* 82206198h */ case   21:  		/* bc 12, CR6_EQ, 9176 */
		/* 82206198h case   21:*/		if ( regs.CR[6].eq ) { return 0x82208570;  }
		/* 82206198h case   21:*/		return 0x8220619C;
		  /* 8220619Ch */ case   22:  		/* lwz R11, <#[R30 + 4]> */
		/* 8220619Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220619Ch case   22:*/		return 0x822061A0;
		  /* 822061A0h */ case   23:  		/* cmpwi CR6, R11, 28 */
		/* 822061A0h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 822061A0h case   23:*/		return 0x822061A4;
		  /* 822061A4h */ case   24:  		/* bc 4, CR6_EQ, 9164 */
		/* 822061A4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82208570;  }
		/* 822061A4h case   24:*/		return 0x822061A8;
		  /* 822061A8h */ case   25:  		/* mr R4, R31 */
		/* 822061A8h case   25:*/		regs.R4 = regs.R31;
		/* 822061A8h case   25:*/		return 0x822061AC;
		  /* 822061ACh */ case   26:  		/* bl -662124 */
		/* 822061ACh case   26:*/		regs.LR = 0x822061B0; return 0x82164740;
		/* 822061ACh case   26:*/		return 0x822061B0;
		  /* 822061B0h */ case   27:  		/* lwz R11, <#[R30 + 24]> */
		/* 822061B0h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 822061B0h case   27:*/		return 0x822061B4;
		  /* 822061B4h */ case   28:  		/* mr R10, R3 */
		/* 822061B4h case   28:*/		regs.R10 = regs.R3;
		/* 822061B4h case   28:*/		return 0x822061B8;
		  /* 822061B8h */ case   29:  		/* ori R11, R11, 2 */
		/* 822061B8h case   29:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 822061B8h case   29:*/		return 0x822061BC;
		  /* 822061BCh */ case   30:  		/* stw R11, <#[R3]> */
		/* 822061BCh case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822061BCh case   30:*/		return 0x822061C0;
	}
	return 0x822061C0;
} // Block from 82206144h-822061C0h (31 instructions)

//////////////////////////////////////////////////////
// Block at 822061C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822061C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822061C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822061C0);
		  /* 822061C0h */ case    0:  		/* mr R3, R31 */
		/* 822061C0h case    0:*/		regs.R3 = regs.R31;
		/* 822061C0h case    0:*/		return 0x822061C4;
		  /* 822061C4h */ case    1:  		/* bl -98892 */
		/* 822061C4h case    1:*/		regs.LR = 0x822061C8; return 0x821EDF78;
		/* 822061C4h case    1:*/		return 0x822061C8;
		  /* 822061C8h */ case    2:  		/* mr R30, R3 */
		/* 822061C8h case    2:*/		regs.R30 = regs.R3;
		/* 822061C8h case    2:*/		return 0x822061CC;
		  /* 822061CCh */ case    3:  		/* mr R5, R31 */
		/* 822061CCh case    3:*/		regs.R5 = regs.R31;
		/* 822061CCh case    3:*/		return 0x822061D0;
		  /* 822061D0h */ case    4:  		/* lwz R3, <#[R31 + 564]> */
		/* 822061D0h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822061D0h case    4:*/		return 0x822061D4;
		  /* 822061D4h */ case    5:  		/* mr R4, R30 */
		/* 822061D4h case    5:*/		regs.R4 = regs.R30;
		/* 822061D4h case    5:*/		return 0x822061D8;
		  /* 822061D8h */ case    6:  		/* bl 170248 */
		/* 822061D8h case    6:*/		regs.LR = 0x822061DC; return 0x8222FAE0;
		/* 822061D8h case    6:*/		return 0x822061DC;
		  /* 822061DCh */ case    7:  		/* stw R30, <#[R31 + 564]> */
		/* 822061DCh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 822061DCh case    7:*/		return 0x822061E0;
		  /* 822061E0h */ case    8:  		/* b 6884 */
		/* 822061E0h case    8:*/		return 0x82207CC4;
		/* 822061E0h case    8:*/		return 0x822061E4;
	}
	return 0x822061E4;
} // Block from 822061C0h-822061E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822061E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822061E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822061E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822061E4);
		  /* 822061E4h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 822061E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 822061E4h case    0:*/		return 0x822061E8;
		  /* 822061E8h */ case    1:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 822061E8h case    1:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 822061E8h case    1:*/		return 0x822061EC;
		  /* 822061ECh */ case    2:  		/* bc 12, CR0_EQ, 6872 */
		/* 822061ECh case    2:*/		if ( regs.CR[0].eq ) { return 0x82207CC4;  }
		/* 822061ECh case    2:*/		return 0x822061F0;
		  /* 822061F0h */ case    3:  		/* li R4, 3636 */
		/* 822061F0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xE34);
		/* 822061F0h case    3:*/		return 0x822061F4;
		  /* 822061F4h */ case    4:  		/* mr R3, R31 */
		/* 822061F4h case    4:*/		regs.R3 = regs.R31;
		/* 822061F4h case    4:*/		return 0x822061F8;
		  /* 822061F8h */ case    5:  		/* bl -738192 */
		/* 822061F8h case    5:*/		regs.LR = 0x822061FC; return 0x82151E68;
		/* 822061F8h case    5:*/		return 0x822061FC;
	}
	return 0x822061FC;
} // Block from 822061E4h-822061FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 822061FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822061FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822061FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822061FC);
		  /* 822061FCh */ case    0:  		/* li R6, 0 */
		/* 822061FCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822061FCh case    0:*/		return 0x82206200;
		  /* 82206200h */ case    1:  		/* mr R5, R23 */
		/* 82206200h case    1:*/		regs.R5 = regs.R23;
		/* 82206200h case    1:*/		return 0x82206204;
		  /* 82206204h */ case    2:  		/* mr R4, R18 */
		/* 82206204h case    2:*/		regs.R4 = regs.R18;
		/* 82206204h case    2:*/		return 0x82206208;
		  /* 82206208h */ case    3:  		/* mr R3, R31 */
		/* 82206208h case    3:*/		regs.R3 = regs.R31;
		/* 82206208h case    3:*/		return 0x8220620C;
		  /* 8220620Ch */ case    4:  		/* bl -44988 */
		/* 8220620Ch case    4:*/		regs.LR = 0x82206210; return 0x821FB250;
		/* 8220620Ch case    4:*/		return 0x82206210;
		  /* 82206210h */ case    5:  		/* b 6836 */
		/* 82206210h case    5:*/		return 0x82207CC4;
		/* 82206210h case    5:*/		return 0x82206214;
	}
	return 0x82206214;
} // Block from 822061FCh-82206214h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82206214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206214);
		  /* 82206214h */ case    0:  		/* mr R5, R23 */
		/* 82206214h case    0:*/		regs.R5 = regs.R23;
		/* 82206214h case    0:*/		return 0x82206218;
		  /* 82206218h */ case    1:  		/* mr R4, R17 */
		/* 82206218h case    1:*/		regs.R4 = regs.R17;
		/* 82206218h case    1:*/		return 0x8220621C;
		  /* 8220621Ch */ case    2:  		/* mr R3, R31 */
		/* 8220621Ch case    2:*/		regs.R3 = regs.R31;
		/* 8220621Ch case    2:*/		return 0x82206220;
		  /* 82206220h */ case    3:  		/* bl -65112 */
		/* 82206220h case    3:*/		regs.LR = 0x82206224; return 0x821F63C8;
		/* 82206220h case    3:*/		return 0x82206224;
		  /* 82206224h */ case    4:  		/* lwz R27, <#[R1 + 136]> */
		/* 82206224h case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000088) );
		/* 82206224h case    4:*/		return 0x82206228;
		  /* 82206228h */ case    5:  		/* mr R23, R24 */
		/* 82206228h case    5:*/		regs.R23 = regs.R24;
		/* 82206228h case    5:*/		return 0x8220622C;
		  /* 8220622Ch */ case    6:  		/* lwz R26, <#[R1 + 144]> */
		/* 8220622Ch case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000090) );
		/* 8220622Ch case    6:*/		return 0x82206230;
		  /* 82206230h */ case    7:  		/* lwz R25, <#[R1 + 572]> */
		/* 82206230h case    7:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000023C) );
		/* 82206230h case    7:*/		return 0x82206234;
		  /* 82206234h */ case    8:  		/* b -2744 */
		/* 82206234h case    8:*/		return 0x8220577C;
		/* 82206234h case    8:*/		return 0x82206238;
	}
	return 0x82206238;
} // Block from 82206214h-82206238h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82206238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206238);
		  /* 82206238h */ case    0:  		/* lwz R4, <#[R23 + 44]> */
		/* 82206238h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x0000002C) );
		/* 82206238h case    0:*/		return 0x8220623C;
		  /* 8220623Ch */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8220623Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220623Ch case    1:*/		return 0x82206240;
		  /* 82206240h */ case    2:  		/* bc 12, CR6_EQ, 96 */
		/* 82206240h case    2:*/		if ( regs.CR[6].eq ) { return 0x822062A0;  }
		/* 82206240h case    2:*/		return 0x82206244;
		  /* 82206244h */ case    3:  		/* mr R5, R31 */
		/* 82206244h case    3:*/		regs.R5 = regs.R31;
		/* 82206244h case    3:*/		return 0x82206248;
		  /* 82206248h */ case    4:  		/* addi R3, R1, 160 */
		/* 82206248h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82206248h case    4:*/		return 0x8220624C;
		  /* 8220624Ch */ case    5:  		/* bl -62676 */
		/* 8220624Ch case    5:*/		regs.LR = 0x82206250; return 0x821F6D78;
		/* 8220624Ch case    5:*/		return 0x82206250;
		  /* 82206250h */ case    6:  		/* b 40 */
		/* 82206250h case    6:*/		return 0x82206278;
		/* 82206250h case    6:*/		return 0x82206254;
		  /* 82206254h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82206254h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82206254h case    7:*/		return 0x82206258;
		  /* 82206258h */ case    8:  		/* bc 12, CR6_EQ, 8996 */
		/* 82206258h case    8:*/		if ( regs.CR[6].eq ) { return 0x8220857C;  }
		/* 82206258h case    8:*/		return 0x8220625C;
		  /* 8220625Ch */ case    9:  		/* lwz R11, <#[R3 + 4]> */
		/* 8220625Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8220625Ch case    9:*/		return 0x82206260;
		  /* 82206260h */ case   10:  		/* cmpwi CR6, R11, 19 */
		/* 82206260h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82206260h case   10:*/		return 0x82206264;
		  /* 82206264h */ case   11:  		/* bc 4, CR6_EQ, 8984 */
		/* 82206264h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220857C;  }
		/* 82206264h case   11:*/		return 0x82206268;
		  /* 82206268h */ case   12:  		/* mr R5, R3 */
		/* 82206268h case   12:*/		regs.R5 = regs.R3;
		/* 82206268h case   12:*/		return 0x8220626C;
		  /* 8220626Ch */ case   13:  		/* mr R4, R17 */
		/* 8220626Ch case   13:*/		regs.R4 = regs.R17;
		/* 8220626Ch case   13:*/		return 0x82206270;
		  /* 82206270h */ case   14:  		/* mr R3, R31 */
		/* 82206270h case   14:*/		regs.R3 = regs.R31;
		/* 82206270h case   14:*/		return 0x82206274;
		  /* 82206274h */ case   15:  		/* bl -65196 */
		/* 82206274h case   15:*/		regs.LR = 0x82206278; return 0x821F63C8;
		/* 82206274h case   15:*/		return 0x82206278;
	}
	return 0x82206278;
} // Block from 82206238h-82206278h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82206278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206278);
		  /* 82206278h */ case    0:  		/* addi R3, R1, 160 */
		/* 82206278h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82206278h case    0:*/		return 0x8220627C;
		  /* 8220627Ch */ case    1:  		/* bl -62532 */
		/* 8220627Ch case    1:*/		regs.LR = 0x82206280; return 0x821F6E38;
		/* 8220627Ch case    1:*/		return 0x82206280;
		  /* 82206280h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82206280h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82206280h case    2:*/		return 0x82206284;
		  /* 82206284h */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 82206284h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82206254;  }
		/* 82206284h case    3:*/		return 0x82206288;
		  /* 82206288h */ case    4:  		/* lwz R11, <#[R1 + 160]> */
		/* 82206288h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82206288h case    4:*/		return 0x8220628C;
		  /* 8220628Ch */ case    5:  		/* lwz R9, <#[R1 + 164]> */
		/* 8220628Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A4) );
		/* 8220628Ch case    5:*/		return 0x82206290;
		  /* 82206290h */ case    6:  		/* addi R10, R11, 972 */
		/* 82206290h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3CC);
		/* 82206290h case    6:*/		return 0x82206294;
		  /* 82206294h */ case    7:  		/* lwz R10, <#[R11 + 976]> */
		/* 82206294h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000003D0) );
		/* 82206294h case    7:*/		return 0x82206298;
		  /* 82206298h */ case    8:  		/* stw R10, <#[R9]> */
		/* 82206298h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 82206298h case    8:*/		return 0x8220629C;
		  /* 8220629Ch */ case    9:  		/* stw R9, <#[R11 + 976]> */
		/* 8220629Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000003D0) );
		/* 8220629Ch case    9:*/		return 0x822062A0;
	}
	return 0x822062A0;
} // Block from 82206278h-822062A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822062A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822062A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822062A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822062A0);
		  /* 822062A0h */ case    0:  		/* lwz R11, <#[R23 + 16]> */
		/* 822062A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 822062A0h case    0:*/		return 0x822062A4;
		  /* 822062A4h */ case    1:  		/* cmplwi CR6, R11, 13 */
		/* 822062A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 822062A4h case    1:*/		return 0x822062A8;
		  /* 822062A8h */ case    2:  		/* bc 12, CR6_GT, 9180 */
		/* 822062A8h case    2:*/		if ( regs.CR[6].gt ) { return 0x82208684;  }
		/* 822062A8h case    2:*/		return 0x822062AC;
		  /* 822062ACh */ case    3:  		/* lis R12, -32252 */
		/* 822062ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 822062ACh case    3:*/		return 0x822062B0;
		  /* 822062B0h */ case    4:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 822062B0h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 822062B0h case    4:*/		return 0x822062B4;
		  /* 822062B4h */ case    5:  		/* addi R12, R12, -13928 */
		/* 822062B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC998);
		/* 822062B4h case    5:*/		return 0x822062B8;
		  /* 822062B8h */ case    6:  		/* lhzx R0, <#[R12 + R0]> */
		/* 822062B8h case    6:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 822062B8h case    6:*/		return 0x822062BC;
		  /* 822062BCh */ case    7:  		/* lis R12, -32224 */
		/* 822062BCh case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8220);
		/* 822062BCh case    7:*/		return 0x822062C0;
		  /* 822062C0h */ case    8:  		/* addi R12, R12, 25300 */
		/* 822062C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x62D4);
		/* 822062C0h case    8:*/		return 0x822062C4;
		  /* 822062C4h */ case    9:  		/* ori R0, R0, 0 */
		/* 822062C4h case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 822062C4h case    9:*/		return 0x822062C8;
		  /* 822062C8h */ case   10:  		/* add R12, R12, R0 */
		/* 822062C8h case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 822062C8h case   10:*/		return 0x822062CC;
		  /* 822062CCh */ case   11:  		/* mtspr CTR, R12 */
		/* 822062CCh case   11:*/		regs.CTR = regs.R12;
		/* 822062CCh case   11:*/		return 0x822062D0;
		  /* 822062D0h */ case   12:  		/* bcctr 20, CR0_LT */
		/* 822062D0h case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 822062D0h case   12:*/		return 0x822062D4;
		  /* 822062D4h */ case   13:  		/* lwz R11, <#[R23 + 24]> */
		/* 822062D4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000018) );
		/* 822062D4h case   13:*/		return 0x822062D8;
		  /* 822062D8h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 822062D8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822062D8h case   14:*/		return 0x822062DC;
		  /* 822062DCh */ case   15:  		/* bc 4, CR6_EQ, 8876 */
		/* 822062DCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x82208588;  }
		/* 822062DCh case   15:*/		return 0x822062E0;
		  /* 822062E0h */ case   16:  		/* lwz R11, <#[R23 + 28]> */
		/* 822062E0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 822062E0h case   16:*/		return 0x822062E4;
		  /* 822062E4h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 822062E4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822062E4h case   17:*/		return 0x822062E8;
		  /* 822062E8h */ case   18:  		/* bc 4, CR6_EQ, 8864 */
		/* 822062E8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82208588;  }
		/* 822062E8h case   18:*/		return 0x822062EC;
		  /* 822062ECh */ case   19:  		/* lwz R11, <#[R23 + 32]> */
		/* 822062ECh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 822062ECh case   19:*/		return 0x822062F0;
		  /* 822062F0h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 822062F0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822062F0h case   20:*/		return 0x822062F4;
		  /* 822062F4h */ case   21:  		/* bc 4, CR6_EQ, 8852 */
		/* 822062F4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82208588;  }
		/* 822062F4h case   21:*/		return 0x822062F8;
		  /* 822062F8h */ case   22:  		/* lwz R11, <#[R23 + 40]> */
		/* 822062F8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000028) );
		/* 822062F8h case   22:*/		return 0x822062FC;
		  /* 822062FCh */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 822062FCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822062FCh case   23:*/		return 0x82206300;
		  /* 82206300h */ case   24:  		/* bc 4, CR6_EQ, 8840 */
		/* 82206300h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82208588;  }
		/* 82206300h case   24:*/		return 0x82206304;
		  /* 82206304h */ case   25:  		/* lwz R11, <#[R23 + 20]> */
		/* 82206304h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 82206304h case   25:*/		return 0x82206308;
		  /* 82206308h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 82206308h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206308h case   26:*/		return 0x8220630C;
		  /* 8220630Ch */ case   27:  		/* bc 12, CR6_EQ, 6584 */
		/* 8220630Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x82207CC4;  }
		/* 8220630Ch case   27:*/		return 0x82206310;
		  /* 82206310h */ case   28:  		/* lwz R11, <#[R11 + 4]> */
		/* 82206310h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82206310h case   28:*/		return 0x82206314;
		  /* 82206314h */ case   29:  		/* cmpwi CR6, R11, 29 */
		/* 82206314h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 82206314h case   29:*/		return 0x82206318;
		  /* 82206318h */ case   30:  		/* bc 4, CR6_EQ, 260 */
		/* 82206318h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8220641C;  }
		/* 82206318h case   30:*/		return 0x8220631C;
		  /* 8220631Ch */ case   31:  		/* mr R3, R31 */
		/* 8220631Ch case   31:*/		regs.R3 = regs.R31;
		/* 8220631Ch case   31:*/		return 0x82206320;
		  /* 82206320h */ case   32:  		/* bl -99240 */
		/* 82206320h case   32:*/		regs.LR = 0x82206324; return 0x821EDF78;
		/* 82206320h case   32:*/		return 0x82206324;
		  /* 82206324h */ case   33:  		/* lwz R11, <#[R3 + 48]> */
		/* 82206324h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 82206324h case   33:*/		return 0x82206328;
		  /* 82206328h */ case   34:  		/* mr R4, R3 */
		/* 82206328h case   34:*/		regs.R4 = regs.R3;
		/* 82206328h case   34:*/		return 0x8220632C;
		  /* 8220632Ch */ case   35:  		/* oris R11, R11, 8192 */
		/* 8220632Ch case   35:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 8220632Ch case   35:*/		return 0x82206330;
		  /* 82206330h */ case   36:  		/* mr R5, R31 */
		/* 82206330h case   36:*/		regs.R5 = regs.R31;
		/* 82206330h case   36:*/		return 0x82206334;
		  /* 82206334h */ case   37:  		/* stw R11, <#[R3 + 48]> */
		/* 82206334h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 82206334h case   37:*/		return 0x82206338;
		  /* 82206338h */ case   38:  		/* mr R28, R3 */
		/* 82206338h case   38:*/		regs.R28 = regs.R3;
		/* 82206338h case   38:*/		return 0x8220633C;
		  /* 8220633Ch */ case   39:  		/* lwz R3, <#[R31 + 564]> */
		/* 8220633Ch case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8220633Ch case   39:*/		return 0x82206340;
		  /* 82206340h */ case   40:  		/* bl 169888 */
		/* 82206340h case   40:*/		regs.LR = 0x82206344; return 0x8222FAE0;
		/* 82206340h case   40:*/		return 0x82206344;
		  /* 82206344h */ case   41:  		/* cmplwi CR6, R24, 0 */
		/* 82206344h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82206344h case   41:*/		return 0x82206348;
		  /* 82206348h */ case   42:  		/* bc 12, CR6_EQ, 208 */
		/* 82206348h case   42:*/		if ( regs.CR[6].eq ) { return 0x82206418;  }
		/* 82206348h case   42:*/		return 0x8220634C;
		  /* 8220634Ch */ case   43:  		/* mr R3, R31 */
		/* 8220634Ch case   43:*/		regs.R3 = regs.R31;
		/* 8220634Ch case   43:*/		return 0x82206350;
		  /* 82206350h */ case   44:  		/* bl -99288 */
		/* 82206350h case   44:*/		regs.LR = 0x82206354; return 0x821EDF78;
		/* 82206350h case   44:*/		return 0x82206354;
		  /* 82206354h */ case   45:  		/* lwz R11, <#[R20]> */
		/* 82206354h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206354h case   45:*/		return 0x82206358;
		  /* 82206358h */ case   46:  		/* mr R30, R3 */
		/* 82206358h case   46:*/		regs.R30 = regs.R3;
		/* 82206358h case   46:*/		return 0x8220635C;
		  /* 8220635Ch */ case   47:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8220635Ch case   47:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8220635Ch case   47:*/		return 0x82206360;
		  /* 82206360h */ case   48:  		/* bc 4, CR0_EQ, 40 */
		/* 82206360h case   48:*/		if ( !regs.CR[0].eq ) { return 0x82206388;  }
		/* 82206360h case   48:*/		return 0x82206364;
		  /* 82206364h */ case   49:  		/* lwz R11, <#[R19]> */
		/* 82206364h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206364h case   49:*/		return 0x82206368;
		  /* 82206368h */ case   50:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206368h case   50:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206368h case   50:*/		return 0x8220636C;
		  /* 8220636Ch */ case   51:  		/* addic. R3, R11, -4 */
		/* 8220636Ch case   51:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8220636Ch case   51:*/		return 0x82206370;
		  /* 82206370h */ case   52:  		/* bc 12, CR0_EQ, 24 */
		/* 82206370h case   52:*/		if ( regs.CR[0].eq ) { return 0x82206388;  }
		/* 82206370h case   52:*/		return 0x82206374;
		  /* 82206374h */ case   53:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206374h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206374h case   53:*/		return 0x82206378;
		  /* 82206378h */ case   54:  		/* lwz R10, <#[R3 + 12]> */
		/* 82206378h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82206378h case   54:*/		return 0x8220637C;
		  /* 8220637Ch */ case   55:  		/* addi R11, R11, 1 */
		/* 8220637Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220637Ch case   55:*/		return 0x82206380;
		  /* 82206380h */ case   56:  		/* cmplw CR6, R11, R10 */
		/* 82206380h case   56:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82206380h case   56:*/		return 0x82206384;
		  /* 82206384h */ case   57:  		/* bc 4, CR6_GT, 16 */
		/* 82206384h case   57:*/		if ( !regs.CR[6].gt ) { return 0x82206394;  }
		/* 82206384h case   57:*/		return 0x82206388;
	}
	return 0x82206388;
} // Block from 822062A0h-82206388h (58 instructions)

//////////////////////////////////////////////////////
// Block at 82206388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206388);
		  /* 82206388h */ case    0:  		/* li R4, 1 */
		/* 82206388h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206388h case    0:*/		return 0x8220638C;
		  /* 8220638Ch */ case    1:  		/* mr R3, R19 */
		/* 8220638Ch case    1:*/		regs.R3 = regs.R19;
		/* 8220638Ch case    1:*/		return 0x82206390;
		  /* 82206390h */ case    2:  		/* bl -496328 */
		/* 82206390h case    2:*/		regs.LR = 0x82206394; return 0x8218D0C8;
		/* 82206390h case    2:*/		return 0x82206394;
	}
	return 0x82206394;
} // Block from 82206388h-82206394h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82206394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206394);
		  /* 82206394h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206394h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206394h case    0:*/		return 0x82206398;
		  /* 82206398h */ case    1:  		/* addi R10, R11, 1 */
		/* 82206398h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82206398h case    1:*/		return 0x8220639C;
		  /* 8220639Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 8220639Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8220639Ch case    2:*/		return 0x822063A0;
		  /* 822063A0h */ case    3:  		/* stw R10, <#[R3 + 8]> */
		/* 822063A0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 822063A0h case    3:*/		return 0x822063A4;
		  /* 822063A4h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 822063A4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 822063A4h case    4:*/		return 0x822063A8;
		  /* 822063A8h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 822063A8h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 822063A8h case    5:*/		return 0x822063AC;
		  /* 822063ACh */ case    6:  		/* lwz R11, <#[R20]> */
		/* 822063ACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822063ACh case    6:*/		return 0x822063B0;
		  /* 822063B0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822063B0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822063B0h case    7:*/		return 0x822063B4;
		  /* 822063B4h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 822063B4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x822063DC;  }
		/* 822063B4h case    8:*/		return 0x822063B8;
		  /* 822063B8h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 822063B8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822063B8h case    9:*/		return 0x822063BC;
		  /* 822063BCh */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822063BCh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822063BCh case   10:*/		return 0x822063C0;
		  /* 822063C0h */ case   11:  		/* addic. R11, R11, -4 */
		/* 822063C0h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 822063C0h case   11:*/		return 0x822063C4;
		  /* 822063C4h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 822063C4h case   12:*/		if ( regs.CR[0].eq ) { return 0x822063DC;  }
		/* 822063C4h case   12:*/		return 0x822063C8;
		  /* 822063C8h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 822063C8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822063C8h case   13:*/		return 0x822063CC;
		  /* 822063CCh */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 822063CCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 822063CCh case   14:*/		return 0x822063D0;
		  /* 822063D0h */ case   15:  		/* addi R10, R10, 1 */
		/* 822063D0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822063D0h case   15:*/		return 0x822063D4;
		  /* 822063D4h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 822063D4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 822063D4h case   16:*/		return 0x822063D8;
		  /* 822063D8h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 822063D8h case   17:*/		if ( !regs.CR[6].gt ) { return 0x822063EC;  }
		/* 822063D8h case   17:*/		return 0x822063DC;
	}
	return 0x822063DC;
} // Block from 82206394h-822063DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822063DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822063DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822063DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822063DC);
		  /* 822063DCh */ case    0:  		/* li R4, 1 */
		/* 822063DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822063DCh case    0:*/		return 0x822063E0;
		  /* 822063E0h */ case    1:  		/* mr R3, R19 */
		/* 822063E0h case    1:*/		regs.R3 = regs.R19;
		/* 822063E0h case    1:*/		return 0x822063E4;
		  /* 822063E4h */ case    2:  		/* bl -496412 */
		/* 822063E4h case    2:*/		regs.LR = 0x822063E8; return 0x8218D0C8;
		/* 822063E4h case    2:*/		return 0x822063E8;
		  /* 822063E8h */ case    3:  		/* mr R11, R3 */
		/* 822063E8h case    3:*/		regs.R11 = regs.R3;
		/* 822063E8h case    3:*/		return 0x822063EC;
	}
	return 0x822063EC;
} // Block from 822063DCh-822063ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822063ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822063EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822063EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822063EC);
		  /* 822063ECh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 822063ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822063ECh case    0:*/		return 0x822063F0;
		  /* 822063F0h */ case    1:  		/* mr R4, R24 */
		/* 822063F0h case    1:*/		regs.R4 = regs.R24;
		/* 822063F0h case    1:*/		return 0x822063F4;
		  /* 822063F4h */ case    2:  		/* mr R3, R21 */
		/* 822063F4h case    2:*/		regs.R3 = regs.R21;
		/* 822063F4h case    2:*/		return 0x822063F8;
		  /* 822063F8h */ case    3:  		/* addi R9, R10, 4 */
		/* 822063F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 822063F8h case    3:*/		return 0x822063FC;
		  /* 822063FCh */ case    4:  		/* addi R8, R10, 1 */
		/* 822063FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 822063FCh case    4:*/		return 0x82206400;
		  /* 82206400h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82206400h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82206400h case    5:*/		return 0x82206404;
		  /* 82206404h */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 82206404h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82206404h case    6:*/		return 0x82206408;
		  /* 82206408h */ case    7:  		/* stwx R29, <#[R10 + R11]> */
		/* 82206408h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82206408h case    7:*/		return 0x8220640C;
		  /* 8220640Ch */ case    8:  		/* bl -61340 */
		/* 8220640Ch case    8:*/		regs.LR = 0x82206410; return 0x821F7470;
		/* 8220640Ch case    8:*/		return 0x82206410;
		  /* 82206410h */ case    9:  		/* stw R30, <#[R1 + 96]> */
		/* 82206410h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 82206410h case    9:*/		return 0x82206414;
		  /* 82206414h */ case   10:  		/* stw R16, <#[R1 + 100]> */
		/* 82206414h case   10:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000064) );
		/* 82206414h case   10:*/		return 0x82206418;
	}
	return 0x82206418;
} // Block from 822063ECh-82206418h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82206418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206418);
		  /* 82206418h */ case    0:  		/* stw R28, <#[R31 + 564]> */
		/* 82206418h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000234) );
		/* 82206418h case    0:*/		return 0x8220641C;
	}
	return 0x8220641C;
} // Block from 82206418h-8220641Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220641Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220641C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220641C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220641C);
		  /* 8220641Ch */ case    0:  		/* addi R10, R1, 352 */
		/* 8220641Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x160);
		/* 8220641Ch case    0:*/		return 0x82206420;
		  /* 82206420h */ case    1:  		/* addi R9, R1, 96 */
		/* 82206420h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82206420h case    1:*/		return 0x82206424;
		  /* 82206424h */ case    2:  		/* addi R8, R1, 100 */
		/* 82206424h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82206424h case    2:*/		return 0x82206428;
		  /* 82206428h */ case    3:  		/* li R7, 3 */
		/* 82206428h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82206428h case    3:*/		return 0x8220642C;
		  /* 8220642Ch */ case    4:  		/* li R6, 0 */
		/* 8220642Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220642Ch case    4:*/		return 0x82206430;
		  /* 82206430h */ case    5:  		/* li R5, 2054 */
		/* 82206430h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x806);
		/* 82206430h case    5:*/		return 0x82206434;
		  /* 82206434h */ case    6:  		/* mr R4, R17 */
		/* 82206434h case    6:*/		regs.R4 = regs.R17;
		/* 82206434h case    6:*/		return 0x82206438;
		  /* 82206438h */ case    7:  		/* mr R3, R31 */
		/* 82206438h case    7:*/		regs.R3 = regs.R31;
		/* 82206438h case    7:*/		return 0x8220643C;
		  /* 8220643Ch */ case    8:  		/* bl -54036 */
		/* 8220643Ch case    8:*/		regs.LR = 0x82206440; return 0x821F9128;
		/* 8220643Ch case    8:*/		return 0x82206440;
		  /* 82206440h */ case    9:  		/* lwz R5, <#[R23 + 20]> */
		/* 82206440h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000014) );
		/* 82206440h case    9:*/		return 0x82206444;
		  /* 82206444h */ case   10:  		/* mr R3, R31 */
		/* 82206444h case   10:*/		regs.R3 = regs.R31;
		/* 82206444h case   10:*/		return 0x82206448;
		  /* 82206448h */ case   11:  		/* lwz R11, <#[R5 + 4]> */
		/* 82206448h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82206448h case   11:*/		return 0x8220644C;
		  /* 8220644Ch */ case   12:  		/* cmpwi CR6, R11, 29 */
		/* 8220644Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8220644Ch case   12:*/		return 0x82206450;
		  /* 82206450h */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 82206450h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82206464;  }
		/* 82206450h case   13:*/		return 0x82206454;
		  /* 82206454h */ case   14:  		/* lwz R4, <#[R5 + 16]> */
		/* 82206454h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000010) );
		/* 82206454h case   14:*/		return 0x82206458;
		  /* 82206458h */ case   15:  		/* bl -102248 */
		/* 82206458h case   15:*/		regs.LR = 0x8220645C; return 0x821ED4F0;
		/* 82206458h case   15:*/		return 0x8220645C;
		  /* 8220645Ch */ case   16:  		/* mr R24, R3 */
		/* 8220645Ch case   16:*/		regs.R24 = regs.R3;
		/* 8220645Ch case   16:*/		return 0x82206460;
		  /* 82206460h */ case   17:  		/* b 6240 */
		/* 82206460h case   17:*/		return 0x82207CC0;
		/* 82206460h case   17:*/		return 0x82206464;
	}
	return 0x82206464;
} // Block from 8220641Ch-82206464h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82206464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206464);
		  /* 82206464h */ case    0:  		/* li R6, 0 */
		/* 82206464h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82206464h case    0:*/		return 0x82206468;
		  /* 82206468h */ case    1:  		/* mr R4, R18 */
		/* 82206468h case    1:*/		regs.R4 = regs.R18;
		/* 82206468h case    1:*/		return 0x8220646C;
		  /* 8220646Ch */ case    2:  		/* bl -45596 */
		/* 8220646Ch case    2:*/		regs.LR = 0x82206470; return 0x821FB250;
		/* 8220646Ch case    2:*/		return 0x82206470;
		  /* 82206470h */ case    3:  		/* b 6220 */
		/* 82206470h case    3:*/		return 0x82207CBC;
		/* 82206470h case    3:*/		return 0x82206474;
		  /* 82206474h */ case    4:  		/* lwz R11, <#[R23 + 28]> */
		/* 82206474h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 82206474h case    4:*/		return 0x82206478;
		  /* 82206478h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82206478h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206478h case    5:*/		return 0x8220647C;
		  /* 8220647Ch */ case    6:  		/* bc 4, CR6_EQ, 8484 */
		/* 8220647Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x822085A0;  }
		/* 8220647Ch case    6:*/		return 0x82206480;
		  /* 82206480h */ case    7:  		/* lwz R11, <#[R23 + 32]> */
		/* 82206480h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 82206480h case    7:*/		return 0x82206484;
		  /* 82206484h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82206484h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206484h case    8:*/		return 0x82206488;
		  /* 82206488h */ case    9:  		/* bc 4, CR6_EQ, 8472 */
		/* 82206488h case    9:*/		if ( !regs.CR[6].eq ) { return 0x822085A0;  }
		/* 82206488h case    9:*/		return 0x8220648C;
		  /* 8220648Ch */ case   10:  		/* addi R10, R1, 320 */
		/* 8220648Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x140);
		/* 8220648Ch case   10:*/		return 0x82206490;
		  /* 82206490h */ case   11:  		/* addi R9, R1, 96 */
		/* 82206490h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82206490h case   11:*/		return 0x82206494;
		  /* 82206494h */ case   12:  		/* addi R8, R1, 100 */
		/* 82206494h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82206494h case   12:*/		return 0x82206498;
		  /* 82206498h */ case   13:  		/* li R7, 3 */
		/* 82206498h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82206498h case   13:*/		return 0x8220649C;
		  /* 8220649Ch */ case   14:  		/* li R6, 0 */
		/* 8220649Ch case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220649Ch case   14:*/		return 0x822064A0;
		  /* 822064A0h */ case   15:  		/* li R5, 2054 */
		/* 822064A0h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x806);
		/* 822064A0h case   15:*/		return 0x822064A4;
		  /* 822064A4h */ case   16:  		/* mr R4, R17 */
		/* 822064A4h case   16:*/		regs.R4 = regs.R17;
		/* 822064A4h case   16:*/		return 0x822064A8;
		  /* 822064A8h */ case   17:  		/* mr R3, R31 */
		/* 822064A8h case   17:*/		regs.R3 = regs.R31;
		/* 822064A8h case   17:*/		return 0x822064AC;
		  /* 822064ACh */ case   18:  		/* bl -54148 */
		/* 822064ACh case   18:*/		regs.LR = 0x822064B0; return 0x821F9128;
		/* 822064ACh case   18:*/		return 0x822064B0;
		  /* 822064B0h */ case   19:  		/* lwz R11, <#[R31 + 40]> */
		/* 822064B0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 822064B0h case   19:*/		return 0x822064B4;
		  /* 822064B4h */ case   20:  		/* lwz R10, <#[R26 + 40]> */
		/* 822064B4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000028) );
		/* 822064B4h case   20:*/		return 0x822064B8;
		  /* 822064B8h */ case   21:  		/* rlwinm R11, R11, 30, 30, 30 */
		/* 822064B8h case   21:*/		cpu::op::rlwinm<0,30,30,30>(regs,&regs.R11,regs.R11);
		/* 822064B8h case   21:*/		return 0x822064BC;
		  /* 822064BCh */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 822064BCh case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822064BCh case   22:*/		return 0x822064C0;
		  /* 822064C0h */ case   23:  		/* ori R30, R11, 1 */
		/* 822064C0h case   23:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0x1);
		/* 822064C0h case   23:*/		return 0x822064C4;
		  /* 822064C4h */ case   24:  		/* lwz R11, <#[R23 + 20]> */
		/* 822064C4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 822064C4h case   24:*/		return 0x822064C8;
		  /* 822064C8h */ case   25:  		/* bc 12, CR6_EQ, 152 */
		/* 822064C8h case   25:*/		if ( regs.CR[6].eq ) { return 0x82206560;  }
		/* 822064C8h case   25:*/		return 0x822064CC;
		  /* 822064CCh */ case   26:  		/* lwz R10, <#[R11 + 4]> */
		/* 822064CCh case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822064CCh case   26:*/		return 0x822064D0;
		  /* 822064D0h */ case   27:  		/* cmpwi CR6, R10, 14 */
		/* 822064D0h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 822064D0h case   27:*/		return 0x822064D4;
		  /* 822064D4h */ case   28:  		/* bc 4, CR6_EQ, 116 */
		/* 822064D4h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82206548;  }
		/* 822064D4h case   28:*/		return 0x822064D8;
		  /* 822064D8h */ case   29:  		/* lwz R10, <#[R11 + 28]> */
		/* 822064D8h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 822064D8h case   29:*/		return 0x822064DC;
		  /* 822064DCh */ case   30:  		/* cmpwi CR6, R10, 27 */
		/* 822064DCh case   30:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001B);
		/* 822064DCh case   30:*/		return 0x822064E0;
		  /* 822064E0h */ case   31:  		/* bc 4, CR6_EQ, 104 */
		/* 822064E0h case   31:*/		if ( !regs.CR[6].eq ) { return 0x82206548;  }
		/* 822064E0h case   31:*/		return 0x822064E4;
		  /* 822064E4h */ case   32:  		/* lwz R11, <#[R11 + 36]> */
		/* 822064E4h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 822064E4h case   32:*/		return 0x822064E8;
		  /* 822064E8h */ case   33:  		/* lwz R10, <#[R11 + 4]> */
		/* 822064E8h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822064E8h case   33:*/		return 0x822064EC;
		  /* 822064ECh */ case   34:  		/* cmpwi CR6, R10, 14 */
		/* 822064ECh case   34:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 822064ECh case   34:*/		return 0x822064F0;
		  /* 822064F0h */ case   35:  		/* bc 4, CR6_EQ, 88 */
		/* 822064F0h case   35:*/		if ( !regs.CR[6].eq ) { return 0x82206548;  }
		/* 822064F0h case   35:*/		return 0x822064F4;
		  /* 822064F4h */ case   36:  		/* lwz R10, <#[R11 + 28]> */
		/* 822064F4h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 822064F4h case   36:*/		return 0x822064F8;
		  /* 822064F8h */ case   37:  		/* cmpwi CR6, R10, 0 */
		/* 822064F8h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 822064F8h case   37:*/		return 0x822064FC;
		  /* 822064FCh */ case   38:  		/* bc 4, CR6_EQ, 76 */
		/* 822064FCh case   38:*/		if ( !regs.CR[6].eq ) { return 0x82206548;  }
		/* 822064FCh case   38:*/		return 0x82206500;
		  /* 82206500h */ case   39:  		/* lwz R11, <#[R11 + 32]> */
		/* 82206500h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82206500h case   39:*/		return 0x82206504;
		  /* 82206504h */ case   40:  		/* lwz R10, <#[R11 + 4]> */
		/* 82206504h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82206504h case   40:*/		return 0x82206508;
		  /* 82206508h */ case   41:  		/* cmpwi CR6, R10, 14 */
		/* 82206508h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 82206508h case   41:*/		return 0x8220650C;
		  /* 8220650Ch */ case   42:  		/* bc 4, CR6_EQ, 60 */
		/* 8220650Ch case   42:*/		if ( !regs.CR[6].eq ) { return 0x82206548;  }
		/* 8220650Ch case   42:*/		return 0x82206510;
		  /* 82206510h */ case   43:  		/* lwz R10, <#[R11 + 28]> */
		/* 82206510h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82206510h case   43:*/		return 0x82206514;
		  /* 82206514h */ case   44:  		/* cmpwi CR6, R10, 1 */
		/* 82206514h case   44:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82206514h case   44:*/		return 0x82206518;
		  /* 82206518h */ case   45:  		/* bc 4, CR6_EQ, 48 */
		/* 82206518h case   45:*/		if ( !regs.CR[6].eq ) { return 0x82206548;  }
		/* 82206518h case   45:*/		return 0x8220651C;
		  /* 8220651Ch */ case   46:  		/* lwz R3, <#[R26 + 40]> */
		/* 8220651Ch case   46:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000028) );
		/* 8220651Ch case   46:*/		return 0x82206520;
		  /* 82206520h */ case   47:  		/* lwz R4, <#[R11 + 16]> */
		/* 82206520h case   47:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 82206520h case   47:*/		return 0x82206524;
		  /* 82206524h */ case   48:  		/* lwz R11, <#[R3]> */
		/* 82206524h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82206524h case   48:*/		return 0x82206528;
		  /* 82206528h */ case   49:  		/* lwz R11, <#[R11]> */
		/* 82206528h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82206528h case   49:*/		return 0x8220652C;
		  /* 8220652Ch */ case   50:  		/* mtspr CTR, R11 */
		/* 8220652Ch case   50:*/		regs.CTR = regs.R11;
		/* 8220652Ch case   50:*/		return 0x82206530;
		  /* 82206530h */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 82206530h case   51:*/		if ( 1 ) { regs.LR = 0x82206534; return (uint32)regs.CTR; }
		/* 82206530h case   51:*/		return 0x82206534;
		  /* 82206534h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 82206534h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82206534h case   52:*/		return 0x82206538;
		  /* 82206538h */ case   53:  		/* bc 4, CR0_EQ, 16 */
		/* 82206538h case   53:*/		if ( !regs.CR[0].eq ) { return 0x82206548;  }
		/* 82206538h case   53:*/		return 0x8220653C;
		  /* 8220653Ch */ case   54:  		/* li R4, 3571 */
		/* 8220653Ch case   54:*/		cpu::op::li<0>(regs,&regs.R4,0xDF3);
		/* 8220653Ch case   54:*/		return 0x82206540;
		  /* 82206540h */ case   55:  		/* mr R3, R31 */
		/* 82206540h case   55:*/		regs.R3 = regs.R31;
		/* 82206540h case   55:*/		return 0x82206544;
		  /* 82206544h */ case   56:  		/* bl -739276 */
		/* 82206544h case   56:*/		regs.LR = 0x82206548; return 0x82151D78;
		/* 82206544h case   56:*/		return 0x82206548;
	}
	return 0x82206548;
} // Block from 82206464h-82206548h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82206548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206548);
		  /* 82206548h */ case    0:  		/* mr R6, R30 */
		/* 82206548h case    0:*/		regs.R6 = regs.R30;
		/* 82206548h case    0:*/		return 0x8220654C;
		  /* 8220654Ch */ case    1:  		/* lwz R5, <#[R23 + 20]> */
		/* 8220654Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000014) );
		/* 8220654Ch case    1:*/		return 0x82206550;
		  /* 82206550h */ case    2:  		/* mr R4, R18 */
		/* 82206550h case    2:*/		regs.R4 = regs.R18;
		/* 82206550h case    2:*/		return 0x82206554;
		  /* 82206554h */ case    3:  		/* mr R3, R31 */
		/* 82206554h case    3:*/		regs.R3 = regs.R31;
		/* 82206554h case    3:*/		return 0x82206558;
		  /* 82206558h */ case    4:  		/* bl -45832 */
		/* 82206558h case    4:*/		regs.LR = 0x8220655C; return 0x821FB250;
		/* 82206558h case    4:*/		return 0x8220655C;
		  /* 8220655Ch */ case    5:  		/* b 12 */
		/* 8220655Ch case    5:*/		return 0x82206568;
		/* 8220655Ch case    5:*/		return 0x82206560;
	}
	return 0x82206560;
} // Block from 82206548h-82206560h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82206560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206560);
		  /* 82206560h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82206560h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206560h case    0:*/		return 0x82206564;
		  /* 82206564h */ case    1:  		/* bc 4, CR6_EQ, 8240 */
		/* 82206564h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82208594;  }
		/* 82206564h case    1:*/		return 0x82206568;
	}
	return 0x82206568;
} // Block from 82206560h-82206568h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82206568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206568);
		  /* 82206568h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82206568h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82206568h case    0:*/		return 0x8220656C;
		  /* 8220656Ch */ case    1:  		/* mr R3, R31 */
		/* 8220656Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220656Ch case    1:*/		return 0x82206570;
		  /* 82206570h */ case    2:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82206570h case    2:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82206570h case    2:*/		return 0x82206574;
		  /* 82206574h */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 82206574h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82206588;  }
		/* 82206574h case    3:*/		return 0x82206578;
		  /* 82206578h */ case    4:  		/* mr R5, R18 */
		/* 82206578h case    4:*/		regs.R5 = regs.R18;
		/* 82206578h case    4:*/		return 0x8220657C;
		  /* 8220657Ch */ case    5:  		/* mr R4, R14 */
		/* 8220657Ch case    5:*/		regs.R4 = regs.R14;
		/* 8220657Ch case    5:*/		return 0x82206580;
		  /* 82206580h */ case    6:  		/* bl -51032 */
		/* 82206580h case    6:*/		regs.LR = 0x82206584; return 0x821F9E28;
		/* 82206580h case    6:*/		return 0x82206584;
		  /* 82206584h */ case    7:  		/* b 12 */
		/* 82206584h case    7:*/		return 0x82206590;
		/* 82206584h case    7:*/		return 0x82206588;
	}
	return 0x82206588;
} // Block from 82206568h-82206588h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82206588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206588);
		  /* 82206588h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 82206588h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82206588h case    0:*/		return 0x8220658C;
		  /* 8220658Ch */ case    1:  		/* bl -101180 */
		/* 8220658Ch case    1:*/		regs.LR = 0x82206590; return 0x821EDA50;
		/* 8220658Ch case    1:*/		return 0x82206590;
	}
	return 0x82206590;
} // Block from 82206588h-82206590h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82206590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206590);
		  /* 82206590h */ case    0:  		/* lwz R24, <#[R1 + 100]> */
		/* 82206590h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000064) );
		/* 82206590h case    0:*/		return 0x82206594;
		  /* 82206594h */ case    1:  		/* lwz R29, <#[R1 + 96]> */
		/* 82206594h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82206594h case    1:*/		return 0x82206598;
		  /* 82206598h */ case    2:  		/* b 5448 */
		/* 82206598h case    2:*/		return 0x82207AE0;
		/* 82206598h case    2:*/		return 0x8220659C;
		  /* 8220659Ch */ case    3:  		/* mr R5, R18 */
		/* 8220659Ch case    3:*/		regs.R5 = regs.R18;
		/* 8220659Ch case    3:*/		return 0x822065A0;
		  /* 822065A0h */ case    4:  		/* mr R4, R25 */
		/* 822065A0h case    4:*/		regs.R4 = regs.R25;
		/* 822065A0h case    4:*/		return 0x822065A4;
		  /* 822065A4h */ case    5:  		/* mr R3, R31 */
		/* 822065A4h case    5:*/		regs.R3 = regs.R31;
		/* 822065A4h case    5:*/		return 0x822065A8;
		  /* 822065A8h */ case    6:  		/* bl -51072 */
		/* 822065A8h case    6:*/		regs.LR = 0x822065AC; return 0x821F9E28;
		/* 822065A8h case    6:*/		return 0x822065AC;
		  /* 822065ACh */ case    7:  		/* cmplwi CR6, R24, 0 */
		/* 822065ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 822065ACh case    7:*/		return 0x822065B0;
		  /* 822065B0h */ case    8:  		/* bc 12, CR6_EQ, 5632 */
		/* 822065B0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82207BB0;  }
		/* 822065B0h case    8:*/		return 0x822065B4;
		  /* 822065B4h */ case    9:  		/* mr R3, R31 */
		/* 822065B4h case    9:*/		regs.R3 = regs.R31;
		/* 822065B4h case    9:*/		return 0x822065B8;
		  /* 822065B8h */ case   10:  		/* bl -99904 */
		/* 822065B8h case   10:*/		regs.LR = 0x822065BC; return 0x821EDF78;
		/* 822065B8h case   10:*/		return 0x822065BC;
		  /* 822065BCh */ case   11:  		/* lwz R11, <#[R20]> */
		/* 822065BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822065BCh case   11:*/		return 0x822065C0;
		  /* 822065C0h */ case   12:  		/* mr R30, R3 */
		/* 822065C0h case   12:*/		regs.R30 = regs.R3;
		/* 822065C0h case   12:*/		return 0x822065C4;
		  /* 822065C4h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822065C4h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822065C4h case   13:*/		return 0x822065C8;
		  /* 822065C8h */ case   14:  		/* bc 4, CR0_EQ, 40 */
		/* 822065C8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x822065F0;  }
		/* 822065C8h case   14:*/		return 0x822065CC;
		  /* 822065CCh */ case   15:  		/* lwz R11, <#[R19]> */
		/* 822065CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822065CCh case   15:*/		return 0x822065D0;
		  /* 822065D0h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822065D0h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822065D0h case   16:*/		return 0x822065D4;
		  /* 822065D4h */ case   17:  		/* addic. R3, R11, -4 */
		/* 822065D4h case   17:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 822065D4h case   17:*/		return 0x822065D8;
		  /* 822065D8h */ case   18:  		/* bc 12, CR0_EQ, 24 */
		/* 822065D8h case   18:*/		if ( regs.CR[0].eq ) { return 0x822065F0;  }
		/* 822065D8h case   18:*/		return 0x822065DC;
		  /* 822065DCh */ case   19:  		/* lwz R11, <#[R3 + 8]> */
		/* 822065DCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822065DCh case   19:*/		return 0x822065E0;
		  /* 822065E0h */ case   20:  		/* lwz R10, <#[R3 + 12]> */
		/* 822065E0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 822065E0h case   20:*/		return 0x822065E4;
		  /* 822065E4h */ case   21:  		/* addi R11, R11, 1 */
		/* 822065E4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822065E4h case   21:*/		return 0x822065E8;
		  /* 822065E8h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 822065E8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822065E8h case   22:*/		return 0x822065EC;
		  /* 822065ECh */ case   23:  		/* bc 4, CR6_GT, 16 */
		/* 822065ECh case   23:*/		if ( !regs.CR[6].gt ) { return 0x822065FC;  }
		/* 822065ECh case   23:*/		return 0x822065F0;
	}
	return 0x822065F0;
} // Block from 82206590h-822065F0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 822065F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822065F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822065F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822065F0);
		  /* 822065F0h */ case    0:  		/* li R4, 1 */
		/* 822065F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822065F0h case    0:*/		return 0x822065F4;
		  /* 822065F4h */ case    1:  		/* mr R3, R19 */
		/* 822065F4h case    1:*/		regs.R3 = regs.R19;
		/* 822065F4h case    1:*/		return 0x822065F8;
		  /* 822065F8h */ case    2:  		/* bl -496944 */
		/* 822065F8h case    2:*/		regs.LR = 0x822065FC; return 0x8218D0C8;
		/* 822065F8h case    2:*/		return 0x822065FC;
	}
	return 0x822065FC;
} // Block from 822065F0h-822065FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822065FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822065FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822065FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822065FC);
		  /* 822065FCh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 822065FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822065FCh case    0:*/		return 0x82206600;
		  /* 82206600h */ case    1:  		/* addi R9, R11, 1 */
		/* 82206600h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82206600h case    1:*/		return 0x82206604;
		  /* 82206604h */ case    2:  		/* addi R10, R11, 4 */
		/* 82206604h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82206604h case    2:*/		return 0x82206608;
		  /* 82206608h */ case    3:  		/* stw R9, <#[R3 + 8]> */
		/* 82206608h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82206608h case    3:*/		return 0x8220660C;
		  /* 8220660Ch */ case    4:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8220660Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8220660Ch case    4:*/		return 0x82206610;
		  /* 82206610h */ case    5:  		/* b 5428 */
		/* 82206610h case    5:*/		return 0x82207B44;
		/* 82206610h case    5:*/		return 0x82206614;
		  /* 82206614h */ case    6:  		/* lwz R11, <#[R23 + 20]> */
		/* 82206614h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 82206614h case    6:*/		return 0x82206618;
		  /* 82206618h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82206618h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206618h case    7:*/		return 0x8220661C;
		  /* 8220661Ch */ case    8:  		/* bc 4, CR6_EQ, 8080 */
		/* 8220661Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x822085AC;  }
		/* 8220661Ch case    8:*/		return 0x82206620;
		  /* 82206620h */ case    9:  		/* lwz R11, <#[R23 + 40]> */
		/* 82206620h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000028) );
		/* 82206620h case    9:*/		return 0x82206624;
		  /* 82206624h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82206624h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206624h case   10:*/		return 0x82206628;
		  /* 82206628h */ case   11:  		/* bc 4, CR6_EQ, 8068 */
		/* 82206628h case   11:*/		if ( !regs.CR[6].eq ) { return 0x822085AC;  }
		/* 82206628h case   11:*/		return 0x8220662C;
		  /* 8220662Ch */ case   12:  		/* addi R10, R1, 288 */
		/* 8220662Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x120);
		/* 8220662Ch case   12:*/		return 0x82206630;
		  /* 82206630h */ case   13:  		/* addi R9, R1, 96 */
		/* 82206630h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82206630h case   13:*/		return 0x82206634;
		  /* 82206634h */ case   14:  		/* addi R8, R1, 100 */
		/* 82206634h case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82206634h case   14:*/		return 0x82206638;
		  /* 82206638h */ case   15:  		/* li R7, 3 */
		/* 82206638h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82206638h case   15:*/		return 0x8220663C;
		  /* 8220663Ch */ case   16:  		/* li R6, 0 */
		/* 8220663Ch case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220663Ch case   16:*/		return 0x82206640;
		  /* 82206640h */ case   17:  		/* li R5, 2558 */
		/* 82206640h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x9FE);
		/* 82206640h case   17:*/		return 0x82206644;
		  /* 82206644h */ case   18:  		/* mr R4, R17 */
		/* 82206644h case   18:*/		regs.R4 = regs.R17;
		/* 82206644h case   18:*/		return 0x82206648;
		  /* 82206648h */ case   19:  		/* mr R3, R31 */
		/* 82206648h case   19:*/		regs.R3 = regs.R31;
		/* 82206648h case   19:*/		return 0x8220664C;
		  /* 8220664Ch */ case   20:  		/* bl -54564 */
		/* 8220664Ch case   20:*/		regs.LR = 0x82206650; return 0x821F9128;
		/* 8220664Ch case   20:*/		return 0x82206650;
		  /* 82206650h */ case   21:  		/* addi R5, R1, 288 */
		/* 82206650h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 82206650h case   21:*/		return 0x82206654;
		  /* 82206654h */ case   22:  		/* mr R4, R18 */
		/* 82206654h case   22:*/		regs.R4 = regs.R18;
		/* 82206654h case   22:*/		return 0x82206658;
		  /* 82206658h */ case   23:  		/* mr R3, R31 */
		/* 82206658h case   23:*/		regs.R3 = regs.R31;
		/* 82206658h case   23:*/		return 0x8220665C;
		  /* 8220665Ch */ case   24:  		/* bl -7188 */
		/* 8220665Ch case   24:*/		regs.LR = 0x82206660; return 0x82204A48;
		/* 8220665Ch case   24:*/		return 0x82206660;
		  /* 82206660h */ case   25:  		/* li R6, 2 */
		/* 82206660h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82206660h case   25:*/		return 0x82206664;
		  /* 82206664h */ case   26:  		/* mr R4, R18 */
		/* 82206664h case   26:*/		regs.R4 = regs.R18;
		/* 82206664h case   26:*/		return 0x82206668;
		  /* 82206668h */ case   27:  		/* lwz R5, <#[R23 + 24]> */
		/* 82206668h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000018) );
		/* 82206668h case   27:*/		return 0x8220666C;
		  /* 8220666Ch */ case   28:  		/* mr R3, R31 */
		/* 8220666Ch case   28:*/		regs.R3 = regs.R31;
		/* 8220666Ch case   28:*/		return 0x82206670;
		  /* 82206670h */ case   29:  		/* bl -46112 */
		/* 82206670h case   29:*/		regs.LR = 0x82206674; return 0x821FB250;
		/* 82206670h case   29:*/		return 0x82206674;
		  /* 82206674h */ case   30:  		/* mr R30, R3 */
		/* 82206674h case   30:*/		regs.R30 = regs.R3;
		/* 82206674h case   30:*/		return 0x82206678;
		  /* 82206678h */ case   31:  		/* mr R3, R31 */
		/* 82206678h case   31:*/		regs.R3 = regs.R31;
		/* 82206678h case   31:*/		return 0x8220667C;
		  /* 8220667Ch */ case   32:  		/* bl -100100 */
		/* 8220667Ch case   32:*/		regs.LR = 0x82206680; return 0x821EDF78;
		/* 8220667Ch case   32:*/		return 0x82206680;
		  /* 82206680h */ case   33:  		/* lwz R11, <#[R23 + 28]> */
		/* 82206680h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 82206680h case   33:*/		return 0x82206684;
		  /* 82206684h */ case   34:  		/* mr R29, R3 */
		/* 82206684h case   34:*/		regs.R29 = regs.R3;
		/* 82206684h case   34:*/		return 0x82206688;
		  /* 82206688h */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 82206688h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206688h case   35:*/		return 0x8220668C;
		  /* 8220668Ch */ case   36:  		/* mr R3, R31 */
		/* 8220668Ch case   36:*/		regs.R3 = regs.R31;
		/* 8220668Ch case   36:*/		return 0x82206690;
		  /* 82206690h */ case   37:  		/* bc 4, CR6_EQ, 324 */
		/* 82206690h case   37:*/		if ( !regs.CR[6].eq ) { return 0x822067D4;  }
		/* 82206690h case   37:*/		return 0x82206694;
		  /* 82206694h */ case   38:  		/* lwz R4, <#[R31 + 564]> */
		/* 82206694h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82206694h case   38:*/		return 0x82206698;
		  /* 82206698h */ case   39:  		/* mr R6, R30 */
		/* 82206698h case   39:*/		regs.R6 = regs.R30;
		/* 82206698h case   39:*/		return 0x8220669C;
		  /* 8220669Ch */ case   40:  		/* addi R5, R4, 32 */
		/* 8220669Ch case   40:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 8220669Ch case   40:*/		return 0x822066A0;
		  /* 822066A0h */ case   41:  		/* bl -280960 */
		/* 822066A0h case   41:*/		regs.LR = 0x822066A4; return 0x821C1D20;
		/* 822066A0h case   41:*/		return 0x822066A4;
		  /* 822066A4h */ case   42:  		/* mr R27, R3 */
		/* 822066A4h case   42:*/		regs.R27 = regs.R3;
		/* 822066A4h case   42:*/		return 0x822066A8;
		  /* 822066A8h */ case   43:  		/* mr R3, R31 */
		/* 822066A8h case   43:*/		regs.R3 = regs.R31;
		/* 822066A8h case   43:*/		return 0x822066AC;
		  /* 822066ACh */ case   44:  		/* lwz R11, <#[R27 + 8]> */
		/* 822066ACh case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 822066ACh case   44:*/		return 0x822066B0;
		  /* 822066B0h */ case   45:  		/* oris R11, R11, 6 */
		/* 822066B0h case   45:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 822066B0h case   45:*/		return 0x822066B4;
		  /* 822066B4h */ case   46:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 822066B4h case   46:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 822066B4h case   46:*/		return 0x822066B8;
		  /* 822066B8h */ case   47:  		/* stw R11, <#[R27 + 8]> */
		/* 822066B8h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 822066B8h case   47:*/		return 0x822066BC;
		  /* 822066BCh */ case   48:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 822066BCh case   48:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 822066BCh case   48:*/		return 0x822066C0;
		  /* 822066C0h */ case   49:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 822066C0h case   49:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 822066C0h case   49:*/		return 0x822066C4;
		  /* 822066C4h */ case   50:  		/* bl -664212 */
		/* 822066C4h case   50:*/		regs.LR = 0x822066C8; return 0x82164430;
		/* 822066C4h case   50:*/		return 0x822066C8;
		  /* 822066C8h */ case   51:  		/* addi R11, R27, -16 */
		/* 822066C8h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF0);
		/* 822066C8h case   51:*/		return 0x822066CC;
		  /* 822066CCh */ case   52:  		/* add R11, R3, R11 */
		/* 822066CCh case   52:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 822066CCh case   52:*/		return 0x822066D0;
		  /* 822066D0h */ case   53:  		/* mr R3, R31 */
		/* 822066D0h case   53:*/		regs.R3 = regs.R31;
		/* 822066D0h case   53:*/		return 0x822066D4;
		  /* 822066D4h */ case   54:  		/* lwz R10, <#[R11 + 12]> */
		/* 822066D4h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 822066D4h case   54:*/		return 0x822066D8;
		  /* 822066D8h */ case   55:  		/* stw R29, <#[R11]> */
		/* 822066D8h case   55:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 822066D8h case   55:*/		return 0x822066DC;
		  /* 822066DCh */ case   56:  		/* ori R10, R10, 4 */
		/* 822066DCh case   56:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822066DCh case   56:*/		return 0x822066E0;
		  /* 822066E0h */ case   57:  		/* stw R10, <#[R11 + 12]> */
		/* 822066E0h case   57:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 822066E0h case   57:*/		return 0x822066E4;
		  /* 822066E4h */ case   58:  		/* bl -100204 */
		/* 822066E4h case   58:*/		regs.LR = 0x822066E8; return 0x821EDF78;
		/* 822066E4h case   58:*/		return 0x822066E8;
		  /* 822066E8h */ case   59:  		/* mr R5, R31 */
		/* 822066E8h case   59:*/		regs.R5 = regs.R31;
		/* 822066E8h case   59:*/		return 0x822066EC;
		  /* 822066ECh */ case   60:  		/* mr R4, R29 */
		/* 822066ECh case   60:*/		regs.R4 = regs.R29;
		/* 822066ECh case   60:*/		return 0x822066F0;
		  /* 822066F0h */ case   61:  		/* mr R30, R3 */
		/* 822066F0h case   61:*/		regs.R30 = regs.R3;
		/* 822066F0h case   61:*/		return 0x822066F4;
		  /* 822066F4h */ case   62:  		/* lwz R3, <#[R31 + 564]> */
		/* 822066F4h case   62:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822066F4h case   62:*/		return 0x822066F8;
		  /* 822066F8h */ case   63:  		/* bl 168936 */
		/* 822066F8h case   63:*/		regs.LR = 0x822066FC; return 0x8222FAE0;
		/* 822066F8h case   63:*/		return 0x822066FC;
		  /* 822066FCh */ case   64:  		/* mr R5, R31 */
		/* 822066FCh case   64:*/		regs.R5 = regs.R31;
		/* 822066FCh case   64:*/		return 0x82206700;
		  /* 82206700h */ case   65:  		/* mr R4, R30 */
		/* 82206700h case   65:*/		regs.R4 = regs.R30;
		/* 82206700h case   65:*/		return 0x82206704;
		  /* 82206704h */ case   66:  		/* lwz R3, <#[R31 + 564]> */
		/* 82206704h case   66:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82206704h case   66:*/		return 0x82206708;
		  /* 82206708h */ case   67:  		/* bl 168920 */
		/* 82206708h case   67:*/		regs.LR = 0x8220670C; return 0x8222FAE0;
		/* 82206708h case   67:*/		return 0x8220670C;
		  /* 8220670Ch */ case   68:  		/* lwz R11, <#[R20]> */
		/* 8220670Ch case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 8220670Ch case   68:*/		return 0x82206710;
		  /* 82206710h */ case   69:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206710h case   69:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206710h case   69:*/		return 0x82206714;
		  /* 82206714h */ case   70:  		/* bc 4, CR0_EQ, 40 */
		/* 82206714h case   70:*/		if ( !regs.CR[0].eq ) { return 0x8220673C;  }
		/* 82206714h case   70:*/		return 0x82206718;
		  /* 82206718h */ case   71:  		/* lwz R11, <#[R19]> */
		/* 82206718h case   71:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206718h case   71:*/		return 0x8220671C;
		  /* 8220671Ch */ case   72:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8220671Ch case   72:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8220671Ch case   72:*/		return 0x82206720;
		  /* 82206720h */ case   73:  		/* addic. R3, R11, -4 */
		/* 82206720h case   73:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82206720h case   73:*/		return 0x82206724;
		  /* 82206724h */ case   74:  		/* bc 12, CR0_EQ, 24 */
		/* 82206724h case   74:*/		if ( regs.CR[0].eq ) { return 0x8220673C;  }
		/* 82206724h case   74:*/		return 0x82206728;
		  /* 82206728h */ case   75:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206728h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206728h case   75:*/		return 0x8220672C;
		  /* 8220672Ch */ case   76:  		/* lwz R10, <#[R3 + 12]> */
		/* 8220672Ch case   76:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8220672Ch case   76:*/		return 0x82206730;
		  /* 82206730h */ case   77:  		/* addi R11, R11, 1 */
		/* 82206730h case   77:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82206730h case   77:*/		return 0x82206734;
		  /* 82206734h */ case   78:  		/* cmplw CR6, R11, R10 */
		/* 82206734h case   78:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82206734h case   78:*/		return 0x82206738;
		  /* 82206738h */ case   79:  		/* bc 4, CR6_GT, 16 */
		/* 82206738h case   79:*/		if ( !regs.CR[6].gt ) { return 0x82206748;  }
		/* 82206738h case   79:*/		return 0x8220673C;
	}
	return 0x8220673C;
} // Block from 822065FCh-8220673Ch (80 instructions)

//////////////////////////////////////////////////////
// Block at 8220673Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220673C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220673C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220673C);
		  /* 8220673Ch */ case    0:  		/* li R4, 1 */
		/* 8220673Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8220673Ch case    0:*/		return 0x82206740;
		  /* 82206740h */ case    1:  		/* mr R3, R19 */
		/* 82206740h case    1:*/		regs.R3 = regs.R19;
		/* 82206740h case    1:*/		return 0x82206744;
		  /* 82206744h */ case    2:  		/* bl -497276 */
		/* 82206744h case    2:*/		regs.LR = 0x82206748; return 0x8218D0C8;
		/* 82206744h case    2:*/		return 0x82206748;
	}
	return 0x82206748;
} // Block from 8220673Ch-82206748h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82206748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206748);
		  /* 82206748h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206748h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206748h case    0:*/		return 0x8220674C;
		  /* 8220674Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 8220674Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8220674Ch case    1:*/		return 0x82206750;
		  /* 82206750h */ case    2:  		/* addi R9, R11, 1 */
		/* 82206750h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82206750h case    2:*/		return 0x82206754;
		  /* 82206754h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82206754h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82206754h case    3:*/		return 0x82206758;
		  /* 82206758h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82206758h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82206758h case    4:*/		return 0x8220675C;
		  /* 8220675Ch */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 8220675Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8220675Ch case    5:*/		return 0x82206760;
		  /* 82206760h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82206760h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206760h case    6:*/		return 0x82206764;
		  /* 82206764h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206764h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206764h case    7:*/		return 0x82206768;
		  /* 82206768h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82206768h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82206790;  }
		/* 82206768h case    8:*/		return 0x8220676C;
		  /* 8220676Ch */ case    9:  		/* lwz R11, <#[R19]> */
		/* 8220676Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8220676Ch case    9:*/		return 0x82206770;
		  /* 82206770h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206770h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206770h case   10:*/		return 0x82206774;
		  /* 82206774h */ case   11:  		/* addic. R11, R11, -4 */
		/* 82206774h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82206774h case   11:*/		return 0x82206778;
		  /* 82206778h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82206778h case   12:*/		if ( regs.CR[0].eq ) { return 0x82206790;  }
		/* 82206778h case   12:*/		return 0x8220677C;
		  /* 8220677Ch */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 8220677Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8220677Ch case   13:*/		return 0x82206780;
		  /* 82206780h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82206780h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82206780h case   14:*/		return 0x82206784;
		  /* 82206784h */ case   15:  		/* addi R10, R10, 1 */
		/* 82206784h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82206784h case   15:*/		return 0x82206788;
		  /* 82206788h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82206788h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82206788h case   16:*/		return 0x8220678C;
		  /* 8220678Ch */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 8220678Ch case   17:*/		if ( !regs.CR[6].gt ) { return 0x822067A0;  }
		/* 8220678Ch case   17:*/		return 0x82206790;
	}
	return 0x82206790;
} // Block from 82206748h-82206790h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82206790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206790);
		  /* 82206790h */ case    0:  		/* li R4, 1 */
		/* 82206790h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206790h case    0:*/		return 0x82206794;
		  /* 82206794h */ case    1:  		/* mr R3, R19 */
		/* 82206794h case    1:*/		regs.R3 = regs.R19;
		/* 82206794h case    1:*/		return 0x82206798;
		  /* 82206798h */ case    2:  		/* bl -497360 */
		/* 82206798h case    2:*/		regs.LR = 0x8220679C; return 0x8218D0C8;
		/* 82206798h case    2:*/		return 0x8220679C;
		  /* 8220679Ch */ case    3:  		/* mr R11, R3 */
		/* 8220679Ch case    3:*/		regs.R11 = regs.R3;
		/* 8220679Ch case    3:*/		return 0x822067A0;
	}
	return 0x822067A0;
} // Block from 82206790h-822067A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822067A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822067A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822067A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822067A0);
		  /* 822067A0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 822067A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822067A0h case    0:*/		return 0x822067A4;
		  /* 822067A4h */ case    1:  		/* mr R3, R21 */
		/* 822067A4h case    1:*/		regs.R3 = regs.R21;
		/* 822067A4h case    1:*/		return 0x822067A8;
		  /* 822067A8h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 822067A8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 822067A8h case    2:*/		return 0x822067AC;
		  /* 822067ACh */ case    3:  		/* addi R8, R10, 4 */
		/* 822067ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 822067ACh case    3:*/		return 0x822067B0;
		  /* 822067B0h */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 822067B0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 822067B0h case    4:*/		return 0x822067B4;
		  /* 822067B4h */ case    5:  		/* addi R7, R10, 1 */
		/* 822067B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 822067B4h case    5:*/		return 0x822067B8;
		  /* 822067B8h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 822067B8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 822067B8h case    6:*/		return 0x822067BC;
		  /* 822067BCh */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 822067BCh case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 822067BCh case    7:*/		return 0x822067C0;
		  /* 822067C0h */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 822067C0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 822067C0h case    8:*/		return 0x822067C4;
		  /* 822067C4h */ case    9:  		/* bl -62292 */
		/* 822067C4h case    9:*/		regs.LR = 0x822067C8; return 0x821F7470;
		/* 822067C4h case    9:*/		return 0x822067C8;
		  /* 822067C8h */ case   10:  		/* stw R30, <#[R31 + 564]> */
		/* 822067C8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 822067C8h case   10:*/		return 0x822067CC;
		  /* 822067CCh */ case   11:  		/* lwz R24, <#[R23 + 32]> */
		/* 822067CCh case   11:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x00000020) );
		/* 822067CCh case   11:*/		return 0x822067D0;
		  /* 822067D0h */ case   12:  		/* b 852 */
		/* 822067D0h case   12:*/		return 0x82206B24;
		/* 822067D0h case   12:*/		return 0x822067D4;
	}
	return 0x822067D4;
} // Block from 822067A0h-822067D4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822067D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822067D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822067D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822067D4);
		  /* 822067D4h */ case    0:  		/* lwz R11, <#[R23 + 32]> */
		/* 822067D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 822067D4h case    0:*/		return 0x822067D8;
		  /* 822067D8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 822067D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822067D8h case    1:*/		return 0x822067DC;
		  /* 822067DCh */ case    2:  		/* bc 4, CR6_EQ, 320 */
		/* 822067DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220691C;  }
		/* 822067DCh case    2:*/		return 0x822067E0;
		  /* 822067E0h */ case    3:  		/* lwz R4, <#[R31 + 564]> */
		/* 822067E0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822067E0h case    3:*/		return 0x822067E4;
		  /* 822067E4h */ case    4:  		/* mr R6, R30 */
		/* 822067E4h case    4:*/		regs.R6 = regs.R30;
		/* 822067E4h case    4:*/		return 0x822067E8;
		  /* 822067E8h */ case    5:  		/* addi R5, R4, 32 */
		/* 822067E8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 822067E8h case    5:*/		return 0x822067EC;
		  /* 822067ECh */ case    6:  		/* bl -281292 */
		/* 822067ECh case    6:*/		regs.LR = 0x822067F0; return 0x821C1D20;
		/* 822067ECh case    6:*/		return 0x822067F0;
		  /* 822067F0h */ case    7:  		/* mr R27, R3 */
		/* 822067F0h case    7:*/		regs.R27 = regs.R3;
		/* 822067F0h case    7:*/		return 0x822067F4;
		  /* 822067F4h */ case    8:  		/* mr R3, R31 */
		/* 822067F4h case    8:*/		regs.R3 = regs.R31;
		/* 822067F4h case    8:*/		return 0x822067F8;
		  /* 822067F8h */ case    9:  		/* lwz R11, <#[R27 + 8]> */
		/* 822067F8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 822067F8h case    9:*/		return 0x822067FC;
		  /* 822067FCh */ case   10:  		/* rlwimi R11, R15, 17, 13, 14 */
		/* 822067FCh case   10:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R11,regs.R15);
		/* 822067FCh case   10:*/		return 0x82206800;
		  /* 82206800h */ case   11:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82206800h case   11:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82206800h case   11:*/		return 0x82206804;
		  /* 82206804h */ case   12:  		/* stw R11, <#[R27 + 8]> */
		/* 82206804h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82206804h case   12:*/		return 0x82206808;
		  /* 82206808h */ case   13:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82206808h case   13:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82206808h case   13:*/		return 0x8220680C;
		  /* 8220680Ch */ case   14:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8220680Ch case   14:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8220680Ch case   14:*/		return 0x82206810;
		  /* 82206810h */ case   15:  		/* bl -664544 */
		/* 82206810h case   15:*/		regs.LR = 0x82206814; return 0x82164430;
		/* 82206810h case   15:*/		return 0x82206814;
		  /* 82206814h */ case   16:  		/* addi R11, R27, -16 */
		/* 82206814h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF0);
		/* 82206814h case   16:*/		return 0x82206818;
		  /* 82206818h */ case   17:  		/* add R11, R3, R11 */
		/* 82206818h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82206818h case   17:*/		return 0x8220681C;
		  /* 8220681Ch */ case   18:  		/* mr R3, R31 */
		/* 8220681Ch case   18:*/		regs.R3 = regs.R31;
		/* 8220681Ch case   18:*/		return 0x82206820;
		  /* 82206820h */ case   19:  		/* lwz R10, <#[R11 + 12]> */
		/* 82206820h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82206820h case   19:*/		return 0x82206824;
		  /* 82206824h */ case   20:  		/* stw R29, <#[R11]> */
		/* 82206824h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 82206824h case   20:*/		return 0x82206828;
		  /* 82206828h */ case   21:  		/* rlwinm R10, R10, 0, 30, 28 */
		/* 82206828h case   21:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R10,regs.R10);
		/* 82206828h case   21:*/		return 0x8220682C;
		  /* 8220682Ch */ case   22:  		/* stw R10, <#[R11 + 12]> */
		/* 8220682Ch case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220682Ch case   22:*/		return 0x82206830;
		  /* 82206830h */ case   23:  		/* bl -100536 */
		/* 82206830h case   23:*/		regs.LR = 0x82206834; return 0x821EDF78;
		/* 82206830h case   23:*/		return 0x82206834;
		  /* 82206834h */ case   24:  		/* mr R5, R31 */
		/* 82206834h case   24:*/		regs.R5 = regs.R31;
		/* 82206834h case   24:*/		return 0x82206838;
		  /* 82206838h */ case   25:  		/* mr R4, R29 */
		/* 82206838h case   25:*/		regs.R4 = regs.R29;
		/* 82206838h case   25:*/		return 0x8220683C;
		  /* 8220683Ch */ case   26:  		/* mr R30, R3 */
		/* 8220683Ch case   26:*/		regs.R30 = regs.R3;
		/* 8220683Ch case   26:*/		return 0x82206840;
		  /* 82206840h */ case   27:  		/* lwz R3, <#[R31 + 564]> */
		/* 82206840h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82206840h case   27:*/		return 0x82206844;
		  /* 82206844h */ case   28:  		/* bl 168604 */
		/* 82206844h case   28:*/		regs.LR = 0x82206848; return 0x8222FAE0;
		/* 82206844h case   28:*/		return 0x82206848;
		  /* 82206848h */ case   29:  		/* mr R5, R31 */
		/* 82206848h case   29:*/		regs.R5 = regs.R31;
		/* 82206848h case   29:*/		return 0x8220684C;
		  /* 8220684Ch */ case   30:  		/* mr R4, R30 */
		/* 8220684Ch case   30:*/		regs.R4 = regs.R30;
		/* 8220684Ch case   30:*/		return 0x82206850;
		  /* 82206850h */ case   31:  		/* lwz R3, <#[R31 + 564]> */
		/* 82206850h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82206850h case   31:*/		return 0x82206854;
		  /* 82206854h */ case   32:  		/* bl 168588 */
		/* 82206854h case   32:*/		regs.LR = 0x82206858; return 0x8222FAE0;
		/* 82206854h case   32:*/		return 0x82206858;
		  /* 82206858h */ case   33:  		/* lwz R11, <#[R20]> */
		/* 82206858h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206858h case   33:*/		return 0x8220685C;
		  /* 8220685Ch */ case   34:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8220685Ch case   34:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8220685Ch case   34:*/		return 0x82206860;
		  /* 82206860h */ case   35:  		/* bc 4, CR0_EQ, 40 */
		/* 82206860h case   35:*/		if ( !regs.CR[0].eq ) { return 0x82206888;  }
		/* 82206860h case   35:*/		return 0x82206864;
		  /* 82206864h */ case   36:  		/* lwz R11, <#[R19]> */
		/* 82206864h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206864h case   36:*/		return 0x82206868;
		  /* 82206868h */ case   37:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206868h case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206868h case   37:*/		return 0x8220686C;
		  /* 8220686Ch */ case   38:  		/* addic. R3, R11, -4 */
		/* 8220686Ch case   38:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8220686Ch case   38:*/		return 0x82206870;
		  /* 82206870h */ case   39:  		/* bc 12, CR0_EQ, 24 */
		/* 82206870h case   39:*/		if ( regs.CR[0].eq ) { return 0x82206888;  }
		/* 82206870h case   39:*/		return 0x82206874;
		  /* 82206874h */ case   40:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206874h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206874h case   40:*/		return 0x82206878;
		  /* 82206878h */ case   41:  		/* lwz R10, <#[R3 + 12]> */
		/* 82206878h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82206878h case   41:*/		return 0x8220687C;
		  /* 8220687Ch */ case   42:  		/* addi R11, R11, 1 */
		/* 8220687Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220687Ch case   42:*/		return 0x82206880;
		  /* 82206880h */ case   43:  		/* cmplw CR6, R11, R10 */
		/* 82206880h case   43:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82206880h case   43:*/		return 0x82206884;
		  /* 82206884h */ case   44:  		/* bc 4, CR6_GT, 16 */
		/* 82206884h case   44:*/		if ( !regs.CR[6].gt ) { return 0x82206894;  }
		/* 82206884h case   44:*/		return 0x82206888;
	}
	return 0x82206888;
} // Block from 822067D4h-82206888h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82206888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206888);
		  /* 82206888h */ case    0:  		/* li R4, 1 */
		/* 82206888h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206888h case    0:*/		return 0x8220688C;
		  /* 8220688Ch */ case    1:  		/* mr R3, R19 */
		/* 8220688Ch case    1:*/		regs.R3 = regs.R19;
		/* 8220688Ch case    1:*/		return 0x82206890;
		  /* 82206890h */ case    2:  		/* bl -497608 */
		/* 82206890h case    2:*/		regs.LR = 0x82206894; return 0x8218D0C8;
		/* 82206890h case    2:*/		return 0x82206894;
	}
	return 0x82206894;
} // Block from 82206888h-82206894h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82206894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206894);
		  /* 82206894h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206894h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206894h case    0:*/		return 0x82206898;
		  /* 82206898h */ case    1:  		/* addi R10, R11, 4 */
		/* 82206898h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82206898h case    1:*/		return 0x8220689C;
		  /* 8220689Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 8220689Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8220689Ch case    2:*/		return 0x822068A0;
		  /* 822068A0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 822068A0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 822068A0h case    3:*/		return 0x822068A4;
		  /* 822068A4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 822068A4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 822068A4h case    4:*/		return 0x822068A8;
		  /* 822068A8h */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 822068A8h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 822068A8h case    5:*/		return 0x822068AC;
		  /* 822068ACh */ case    6:  		/* lwz R11, <#[R20]> */
		/* 822068ACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822068ACh case    6:*/		return 0x822068B0;
		  /* 822068B0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822068B0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822068B0h case    7:*/		return 0x822068B4;
		  /* 822068B4h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 822068B4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x822068DC;  }
		/* 822068B4h case    8:*/		return 0x822068B8;
		  /* 822068B8h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 822068B8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822068B8h case    9:*/		return 0x822068BC;
		  /* 822068BCh */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822068BCh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822068BCh case   10:*/		return 0x822068C0;
		  /* 822068C0h */ case   11:  		/* addic. R11, R11, -4 */
		/* 822068C0h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 822068C0h case   11:*/		return 0x822068C4;
		  /* 822068C4h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 822068C4h case   12:*/		if ( regs.CR[0].eq ) { return 0x822068DC;  }
		/* 822068C4h case   12:*/		return 0x822068C8;
		  /* 822068C8h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 822068C8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822068C8h case   13:*/		return 0x822068CC;
		  /* 822068CCh */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 822068CCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 822068CCh case   14:*/		return 0x822068D0;
		  /* 822068D0h */ case   15:  		/* addi R10, R10, 1 */
		/* 822068D0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822068D0h case   15:*/		return 0x822068D4;
		  /* 822068D4h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 822068D4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 822068D4h case   16:*/		return 0x822068D8;
		  /* 822068D8h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 822068D8h case   17:*/		if ( !regs.CR[6].gt ) { return 0x822068EC;  }
		/* 822068D8h case   17:*/		return 0x822068DC;
	}
	return 0x822068DC;
} // Block from 82206894h-822068DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822068DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822068DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822068DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822068DC);
		  /* 822068DCh */ case    0:  		/* li R4, 1 */
		/* 822068DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822068DCh case    0:*/		return 0x822068E0;
		  /* 822068E0h */ case    1:  		/* mr R3, R19 */
		/* 822068E0h case    1:*/		regs.R3 = regs.R19;
		/* 822068E0h case    1:*/		return 0x822068E4;
		  /* 822068E4h */ case    2:  		/* bl -497692 */
		/* 822068E4h case    2:*/		regs.LR = 0x822068E8; return 0x8218D0C8;
		/* 822068E4h case    2:*/		return 0x822068E8;
		  /* 822068E8h */ case    3:  		/* mr R11, R3 */
		/* 822068E8h case    3:*/		regs.R11 = regs.R3;
		/* 822068E8h case    3:*/		return 0x822068EC;
	}
	return 0x822068EC;
} // Block from 822068DCh-822068ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822068ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822068EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822068EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822068EC);
		  /* 822068ECh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 822068ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822068ECh case    0:*/		return 0x822068F0;
		  /* 822068F0h */ case    1:  		/* mr R3, R21 */
		/* 822068F0h case    1:*/		regs.R3 = regs.R21;
		/* 822068F0h case    1:*/		return 0x822068F4;
		  /* 822068F4h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 822068F4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 822068F4h case    2:*/		return 0x822068F8;
		  /* 822068F8h */ case    3:  		/* addi R8, R10, 4 */
		/* 822068F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 822068F8h case    3:*/		return 0x822068FC;
		  /* 822068FCh */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 822068FCh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 822068FCh case    4:*/		return 0x82206900;
		  /* 82206900h */ case    5:  		/* addi R7, R10, 1 */
		/* 82206900h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82206900h case    5:*/		return 0x82206904;
		  /* 82206904h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82206904h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82206904h case    6:*/		return 0x82206908;
		  /* 82206908h */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 82206908h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82206908h case    7:*/		return 0x8220690C;
		  /* 8220690Ch */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 8220690Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220690Ch case    8:*/		return 0x82206910;
		  /* 82206910h */ case    9:  		/* bl -62624 */
		/* 82206910h case    9:*/		regs.LR = 0x82206914; return 0x821F7470;
		/* 82206910h case    9:*/		return 0x82206914;
		  /* 82206914h */ case   10:  		/* stw R30, <#[R31 + 564]> */
		/* 82206914h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 82206914h case   10:*/		return 0x82206918;
		  /* 82206918h */ case   11:  		/* b 520 */
		/* 82206918h case   11:*/		return 0x82206B20;
		/* 82206918h case   11:*/		return 0x8220691C;
	}
	return 0x8220691C;
} // Block from 822068ECh-8220691Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220691Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220691C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220691C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220691C);
		  /* 8220691Ch */ case    0:  		/* bl -100772 */
		/* 8220691Ch case    0:*/		regs.LR = 0x82206920; return 0x821EDF78;
		/* 8220691Ch case    0:*/		return 0x82206920;
		  /* 82206920h */ case    1:  		/* mr R26, R3 */
		/* 82206920h case    1:*/		regs.R26 = regs.R3;
		/* 82206920h case    1:*/		return 0x82206924;
		  /* 82206924h */ case    2:  		/* mr R3, R31 */
		/* 82206924h case    2:*/		regs.R3 = regs.R31;
		/* 82206924h case    2:*/		return 0x82206928;
		  /* 82206928h */ case    3:  		/* bl -100784 */
		/* 82206928h case    3:*/		regs.LR = 0x8220692C; return 0x821EDF78;
		/* 82206928h case    3:*/		return 0x8220692C;
		  /* 8220692Ch */ case    4:  		/* lwz R4, <#[R31 + 564]> */
		/* 8220692Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8220692Ch case    4:*/		return 0x82206930;
		  /* 82206930h */ case    5:  		/* mr R28, R3 */
		/* 82206930h case    5:*/		regs.R28 = regs.R3;
		/* 82206930h case    5:*/		return 0x82206934;
		  /* 82206934h */ case    6:  		/* addi R5, R4, 32 */
		/* 82206934h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 82206934h case    6:*/		return 0x82206938;
		  /* 82206938h */ case    7:  		/* mr R6, R30 */
		/* 82206938h case    7:*/		regs.R6 = regs.R30;
		/* 82206938h case    7:*/		return 0x8220693C;
		  /* 8220693Ch */ case    8:  		/* mr R3, R31 */
		/* 8220693Ch case    8:*/		regs.R3 = regs.R31;
		/* 8220693Ch case    8:*/		return 0x82206940;
		  /* 82206940h */ case    9:  		/* bl -281632 */
		/* 82206940h case    9:*/		regs.LR = 0x82206944; return 0x821C1D20;
		/* 82206940h case    9:*/		return 0x82206944;
		  /* 82206944h */ case   10:  		/* mr R5, R28 */
		/* 82206944h case   10:*/		regs.R5 = regs.R28;
		/* 82206944h case   10:*/		return 0x82206948;
		  /* 82206948h */ case   11:  		/* mr R7, R31 */
		/* 82206948h case   11:*/		regs.R7 = regs.R31;
		/* 82206948h case   11:*/		return 0x8220694C;
		  /* 8220694Ch */ case   12:  		/* li R6, 0 */
		/* 8220694Ch case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220694Ch case   12:*/		return 0x82206950;
		  /* 82206950h */ case   13:  		/* li R4, 0 */
		/* 82206950h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82206950h case   13:*/		return 0x82206954;
		  /* 82206954h */ case   14:  		/* mr R27, R3 */
		/* 82206954h case   14:*/		regs.R27 = regs.R3;
		/* 82206954h case   14:*/		return 0x82206958;
		  /* 82206958h */ case   15:  		/* bl -105264 */
		/* 82206958h case   15:*/		regs.LR = 0x8220695C; return 0x821ECE28;
		/* 82206958h case   15:*/		return 0x8220695C;
		  /* 8220695Ch */ case   16:  		/* lwz R11, <#[R27 + 8]> */
		/* 8220695Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8220695Ch case   16:*/		return 0x82206960;
		  /* 82206960h */ case   17:  		/* mr R3, R31 */
		/* 82206960h case   17:*/		regs.R3 = regs.R31;
		/* 82206960h case   17:*/		return 0x82206964;
		  /* 82206964h */ case   18:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82206964h case   18:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82206964h case   18:*/		return 0x82206968;
		  /* 82206968h */ case   19:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82206968h case   19:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82206968h case   19:*/		return 0x8220696C;
		  /* 8220696Ch */ case   20:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8220696Ch case   20:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8220696Ch case   20:*/		return 0x82206970;
		  /* 82206970h */ case   21:  		/* bl -664896 */
		/* 82206970h case   21:*/		regs.LR = 0x82206974; return 0x82164430;
		/* 82206970h case   21:*/		return 0x82206974;
		  /* 82206974h */ case   22:  		/* addi R11, R27, -4 */
		/* 82206974h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 82206974h case   22:*/		return 0x82206978;
		  /* 82206978h */ case   23:  		/* mr R5, R31 */
		/* 82206978h case   23:*/		regs.R5 = regs.R31;
		/* 82206978h case   23:*/		return 0x8220697C;
		  /* 8220697Ch */ case   24:  		/* add R11, R3, R11 */
		/* 8220697Ch case   24:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8220697Ch case   24:*/		return 0x82206980;
		  /* 82206980h */ case   25:  		/* mr R4, R28 */
		/* 82206980h case   25:*/		regs.R4 = regs.R28;
		/* 82206980h case   25:*/		return 0x82206984;
		  /* 82206984h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 82206984h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82206984h case   26:*/		return 0x82206988;
		  /* 82206988h */ case   27:  		/* ori R10, R10, 1 */
		/* 82206988h case   27:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82206988h case   27:*/		return 0x8220698C;
		  /* 8220698Ch */ case   28:  		/* stw R10, <#[R11]> */
		/* 8220698Ch case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220698Ch case   28:*/		return 0x82206990;
		  /* 82206990h */ case   29:  		/* lwz R3, <#[R31 + 564]> */
		/* 82206990h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82206990h case   29:*/		return 0x82206994;
		  /* 82206994h */ case   30:  		/* bl 168268 */
		/* 82206994h case   30:*/		regs.LR = 0x82206998; return 0x8222FAE0;
		/* 82206994h case   30:*/		return 0x82206998;
		  /* 82206998h */ case   31:  		/* mr R5, R31 */
		/* 82206998h case   31:*/		regs.R5 = regs.R31;
		/* 82206998h case   31:*/		return 0x8220699C;
		  /* 8220699Ch */ case   32:  		/* mr R4, R26 */
		/* 8220699Ch case   32:*/		regs.R4 = regs.R26;
		/* 8220699Ch case   32:*/		return 0x822069A0;
		  /* 822069A0h */ case   33:  		/* lwz R3, <#[R31 + 564]> */
		/* 822069A0h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822069A0h case   33:*/		return 0x822069A4;
		  /* 822069A4h */ case   34:  		/* bl 168252 */
		/* 822069A4h case   34:*/		regs.LR = 0x822069A8; return 0x8222FAE0;
		/* 822069A4h case   34:*/		return 0x822069A8;
		  /* 822069A8h */ case   35:  		/* lwz R11, <#[R20]> */
		/* 822069A8h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822069A8h case   35:*/		return 0x822069AC;
		  /* 822069ACh */ case   36:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822069ACh case   36:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822069ACh case   36:*/		return 0x822069B0;
		  /* 822069B0h */ case   37:  		/* bc 4, CR0_EQ, 40 */
		/* 822069B0h case   37:*/		if ( !regs.CR[0].eq ) { return 0x822069D8;  }
		/* 822069B0h case   37:*/		return 0x822069B4;
		  /* 822069B4h */ case   38:  		/* lwz R11, <#[R19]> */
		/* 822069B4h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822069B4h case   38:*/		return 0x822069B8;
		  /* 822069B8h */ case   39:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822069B8h case   39:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822069B8h case   39:*/		return 0x822069BC;
		  /* 822069BCh */ case   40:  		/* addic. R3, R11, -4 */
		/* 822069BCh case   40:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 822069BCh case   40:*/		return 0x822069C0;
		  /* 822069C0h */ case   41:  		/* bc 12, CR0_EQ, 24 */
		/* 822069C0h case   41:*/		if ( regs.CR[0].eq ) { return 0x822069D8;  }
		/* 822069C0h case   41:*/		return 0x822069C4;
		  /* 822069C4h */ case   42:  		/* lwz R11, <#[R3 + 8]> */
		/* 822069C4h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822069C4h case   42:*/		return 0x822069C8;
		  /* 822069C8h */ case   43:  		/* lwz R10, <#[R3 + 12]> */
		/* 822069C8h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 822069C8h case   43:*/		return 0x822069CC;
		  /* 822069CCh */ case   44:  		/* addi R11, R11, 1 */
		/* 822069CCh case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822069CCh case   44:*/		return 0x822069D0;
		  /* 822069D0h */ case   45:  		/* cmplw CR6, R11, R10 */
		/* 822069D0h case   45:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822069D0h case   45:*/		return 0x822069D4;
		  /* 822069D4h */ case   46:  		/* bc 4, CR6_GT, 16 */
		/* 822069D4h case   46:*/		if ( !regs.CR[6].gt ) { return 0x822069E4;  }
		/* 822069D4h case   46:*/		return 0x822069D8;
	}
	return 0x822069D8;
} // Block from 8220691Ch-822069D8h (47 instructions)

//////////////////////////////////////////////////////
// Block at 822069D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822069D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822069D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822069D8);
		  /* 822069D8h */ case    0:  		/* li R4, 1 */
		/* 822069D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822069D8h case    0:*/		return 0x822069DC;
		  /* 822069DCh */ case    1:  		/* mr R3, R19 */
		/* 822069DCh case    1:*/		regs.R3 = regs.R19;
		/* 822069DCh case    1:*/		return 0x822069E0;
		  /* 822069E0h */ case    2:  		/* bl -497944 */
		/* 822069E0h case    2:*/		regs.LR = 0x822069E4; return 0x8218D0C8;
		/* 822069E0h case    2:*/		return 0x822069E4;
	}
	return 0x822069E4;
} // Block from 822069D8h-822069E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822069E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822069E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822069E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822069E4);
		  /* 822069E4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 822069E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822069E4h case    0:*/		return 0x822069E8;
		  /* 822069E8h */ case    1:  		/* addi R10, R11, 1 */
		/* 822069E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 822069E8h case    1:*/		return 0x822069EC;
		  /* 822069ECh */ case    2:  		/* addi R11, R11, 4 */
		/* 822069ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822069ECh case    2:*/		return 0x822069F0;
		  /* 822069F0h */ case    3:  		/* stw R10, <#[R3 + 8]> */
		/* 822069F0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 822069F0h case    3:*/		return 0x822069F4;
		  /* 822069F4h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 822069F4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 822069F4h case    4:*/		return 0x822069F8;
		  /* 822069F8h */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 822069F8h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 822069F8h case    5:*/		return 0x822069FC;
		  /* 822069FCh */ case    6:  		/* lwz R11, <#[R20]> */
		/* 822069FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822069FCh case    6:*/		return 0x82206A00;
		  /* 82206A00h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206A00h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206A00h case    7:*/		return 0x82206A04;
		  /* 82206A04h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82206A04h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82206A2C;  }
		/* 82206A04h case    8:*/		return 0x82206A08;
		  /* 82206A08h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82206A08h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206A08h case    9:*/		return 0x82206A0C;
		  /* 82206A0Ch */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206A0Ch case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206A0Ch case   10:*/		return 0x82206A10;
		  /* 82206A10h */ case   11:  		/* addic. R11, R11, -4 */
		/* 82206A10h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82206A10h case   11:*/		return 0x82206A14;
		  /* 82206A14h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82206A14h case   12:*/		if ( regs.CR[0].eq ) { return 0x82206A2C;  }
		/* 82206A14h case   12:*/		return 0x82206A18;
		  /* 82206A18h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206A18h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206A18h case   13:*/		return 0x82206A1C;
		  /* 82206A1Ch */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82206A1Ch case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82206A1Ch case   14:*/		return 0x82206A20;
		  /* 82206A20h */ case   15:  		/* addi R10, R10, 1 */
		/* 82206A20h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82206A20h case   15:*/		return 0x82206A24;
		  /* 82206A24h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82206A24h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82206A24h case   16:*/		return 0x82206A28;
		  /* 82206A28h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 82206A28h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82206A3C;  }
		/* 82206A28h case   17:*/		return 0x82206A2C;
	}
	return 0x82206A2C;
} // Block from 822069E4h-82206A2Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 82206A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206A2C);
		  /* 82206A2Ch */ case    0:  		/* li R4, 1 */
		/* 82206A2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206A2Ch case    0:*/		return 0x82206A30;
		  /* 82206A30h */ case    1:  		/* mr R3, R19 */
		/* 82206A30h case    1:*/		regs.R3 = regs.R19;
		/* 82206A30h case    1:*/		return 0x82206A34;
		  /* 82206A34h */ case    2:  		/* bl -498028 */
		/* 82206A34h case    2:*/		regs.LR = 0x82206A38; return 0x8218D0C8;
		/* 82206A34h case    2:*/		return 0x82206A38;
		  /* 82206A38h */ case    3:  		/* mr R11, R3 */
		/* 82206A38h case    3:*/		regs.R11 = regs.R3;
		/* 82206A38h case    3:*/		return 0x82206A3C;
	}
	return 0x82206A3C;
} // Block from 82206A2Ch-82206A3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82206A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206A3C);
		  /* 82206A3Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206A3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206A3Ch case    0:*/		return 0x82206A40;
		  /* 82206A40h */ case    1:  		/* mr R3, R21 */
		/* 82206A40h case    1:*/		regs.R3 = regs.R21;
		/* 82206A40h case    1:*/		return 0x82206A44;
		  /* 82206A44h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 82206A44h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82206A44h case    2:*/		return 0x82206A48;
		  /* 82206A48h */ case    3:  		/* addi R8, R10, 4 */
		/* 82206A48h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82206A48h case    3:*/		return 0x82206A4C;
		  /* 82206A4Ch */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 82206A4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 82206A4Ch case    4:*/		return 0x82206A50;
		  /* 82206A50h */ case    5:  		/* addi R7, R10, 1 */
		/* 82206A50h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82206A50h case    5:*/		return 0x82206A54;
		  /* 82206A54h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82206A54h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82206A54h case    6:*/		return 0x82206A58;
		  /* 82206A58h */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 82206A58h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82206A58h case    7:*/		return 0x82206A5C;
		  /* 82206A5Ch */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 82206A5Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82206A5Ch case    8:*/		return 0x82206A60;
		  /* 82206A60h */ case    9:  		/* bl -62960 */
		/* 82206A60h case    9:*/		regs.LR = 0x82206A64; return 0x821F7470;
		/* 82206A60h case    9:*/		return 0x82206A64;
		  /* 82206A64h */ case   10:  		/* lwz R11, <#[R20]> */
		/* 82206A64h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206A64h case   10:*/		return 0x82206A68;
		  /* 82206A68h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206A68h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206A68h case   11:*/		return 0x82206A6C;
		  /* 82206A6Ch */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 82206A6Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x82206A94;  }
		/* 82206A6Ch case   12:*/		return 0x82206A70;
		  /* 82206A70h */ case   13:  		/* lwz R11, <#[R19]> */
		/* 82206A70h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206A70h case   13:*/		return 0x82206A74;
		  /* 82206A74h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206A74h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206A74h case   14:*/		return 0x82206A78;
		  /* 82206A78h */ case   15:  		/* addic. R3, R11, -4 */
		/* 82206A78h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82206A78h case   15:*/		return 0x82206A7C;
		  /* 82206A7Ch */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 82206A7Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x82206A94;  }
		/* 82206A7Ch case   16:*/		return 0x82206A80;
		  /* 82206A80h */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206A80h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206A80h case   17:*/		return 0x82206A84;
		  /* 82206A84h */ case   18:  		/* lwz R10, <#[R3 + 12]> */
		/* 82206A84h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82206A84h case   18:*/		return 0x82206A88;
		  /* 82206A88h */ case   19:  		/* addi R11, R11, 1 */
		/* 82206A88h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82206A88h case   19:*/		return 0x82206A8C;
		  /* 82206A8Ch */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 82206A8Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82206A8Ch case   20:*/		return 0x82206A90;
		  /* 82206A90h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 82206A90h case   21:*/		if ( !regs.CR[6].gt ) { return 0x82206AA0;  }
		/* 82206A90h case   21:*/		return 0x82206A94;
	}
	return 0x82206A94;
} // Block from 82206A3Ch-82206A94h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82206A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206A94);
		  /* 82206A94h */ case    0:  		/* li R4, 1 */
		/* 82206A94h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206A94h case    0:*/		return 0x82206A98;
		  /* 82206A98h */ case    1:  		/* mr R3, R19 */
		/* 82206A98h case    1:*/		regs.R3 = regs.R19;
		/* 82206A98h case    1:*/		return 0x82206A9C;
		  /* 82206A9Ch */ case    2:  		/* bl -498132 */
		/* 82206A9Ch case    2:*/		regs.LR = 0x82206AA0; return 0x8218D0C8;
		/* 82206A9Ch case    2:*/		return 0x82206AA0;
	}
	return 0x82206AA0;
} // Block from 82206A94h-82206AA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82206AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206AA0);
		  /* 82206AA0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206AA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206AA0h case    0:*/		return 0x82206AA4;
		  /* 82206AA4h */ case    1:  		/* addi R10, R11, 4 */
		/* 82206AA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82206AA4h case    1:*/		return 0x82206AA8;
		  /* 82206AA8h */ case    2:  		/* addi R9, R11, 1 */
		/* 82206AA8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82206AA8h case    2:*/		return 0x82206AAC;
		  /* 82206AACh */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82206AACh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82206AACh case    3:*/		return 0x82206AB0;
		  /* 82206AB0h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82206AB0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82206AB0h case    4:*/		return 0x82206AB4;
		  /* 82206AB4h */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 82206AB4h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82206AB4h case    5:*/		return 0x82206AB8;
		  /* 82206AB8h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82206AB8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206AB8h case    6:*/		return 0x82206ABC;
		  /* 82206ABCh */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206ABCh case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206ABCh case    7:*/		return 0x82206AC0;
		  /* 82206AC0h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82206AC0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82206AE8;  }
		/* 82206AC0h case    8:*/		return 0x82206AC4;
		  /* 82206AC4h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82206AC4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206AC4h case    9:*/		return 0x82206AC8;
		  /* 82206AC8h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206AC8h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206AC8h case   10:*/		return 0x82206ACC;
		  /* 82206ACCh */ case   11:  		/* addic. R11, R11, -4 */
		/* 82206ACCh case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82206ACCh case   11:*/		return 0x82206AD0;
		  /* 82206AD0h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82206AD0h case   12:*/		if ( regs.CR[0].eq ) { return 0x82206AE8;  }
		/* 82206AD0h case   12:*/		return 0x82206AD4;
		  /* 82206AD4h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206AD4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206AD4h case   13:*/		return 0x82206AD8;
		  /* 82206AD8h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82206AD8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82206AD8h case   14:*/		return 0x82206ADC;
		  /* 82206ADCh */ case   15:  		/* addi R10, R10, 1 */
		/* 82206ADCh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82206ADCh case   15:*/		return 0x82206AE0;
		  /* 82206AE0h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82206AE0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82206AE0h case   16:*/		return 0x82206AE4;
		  /* 82206AE4h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 82206AE4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82206AF8;  }
		/* 82206AE4h case   17:*/		return 0x82206AE8;
	}
	return 0x82206AE8;
} // Block from 82206AA0h-82206AE8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82206AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206AE8);
		  /* 82206AE8h */ case    0:  		/* li R4, 1 */
		/* 82206AE8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206AE8h case    0:*/		return 0x82206AEC;
		  /* 82206AECh */ case    1:  		/* mr R3, R19 */
		/* 82206AECh case    1:*/		regs.R3 = regs.R19;
		/* 82206AECh case    1:*/		return 0x82206AF0;
		  /* 82206AF0h */ case    2:  		/* bl -498216 */
		/* 82206AF0h case    2:*/		regs.LR = 0x82206AF4; return 0x8218D0C8;
		/* 82206AF0h case    2:*/		return 0x82206AF4;
		  /* 82206AF4h */ case    3:  		/* mr R11, R3 */
		/* 82206AF4h case    3:*/		regs.R11 = regs.R3;
		/* 82206AF4h case    3:*/		return 0x82206AF8;
	}
	return 0x82206AF8;
} // Block from 82206AE8h-82206AF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82206AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206AF8);
		  /* 82206AF8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206AF8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206AF8h case    0:*/		return 0x82206AFC;
		  /* 82206AFCh */ case    1:  		/* mr R3, R21 */
		/* 82206AFCh case    1:*/		regs.R3 = regs.R21;
		/* 82206AFCh case    1:*/		return 0x82206B00;
		  /* 82206B00h */ case    2:  		/* addi R9, R10, 4 */
		/* 82206B00h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82206B00h case    2:*/		return 0x82206B04;
		  /* 82206B04h */ case    3:  		/* addi R8, R10, 1 */
		/* 82206B04h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82206B04h case    3:*/		return 0x82206B08;
		  /* 82206B08h */ case    4:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82206B08h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82206B08h case    4:*/		return 0x82206B0C;
		  /* 82206B0Ch */ case    5:  		/* stw R8, <#[R11 + 8]> */
		/* 82206B0Ch case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82206B0Ch case    5:*/		return 0x82206B10;
		  /* 82206B10h */ case    6:  		/* stwx R29, <#[R10 + R11]> */
		/* 82206B10h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82206B10h case    6:*/		return 0x82206B14;
		  /* 82206B14h */ case    7:  		/* lwz R4, <#[R23 + 32]> */
		/* 82206B14h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000020) );
		/* 82206B14h case    7:*/		return 0x82206B18;
		  /* 82206B18h */ case    8:  		/* bl -63144 */
		/* 82206B18h case    8:*/		regs.LR = 0x82206B1C; return 0x821F7470;
		/* 82206B18h case    8:*/		return 0x82206B1C;
		  /* 82206B1Ch */ case    9:  		/* stw R26, <#[R31 + 564]> */
		/* 82206B1Ch case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000234) );
		/* 82206B1Ch case    9:*/		return 0x82206B20;
	}
	return 0x82206B20;
} // Block from 82206AF8h-82206B20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82206B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206B20);
		  /* 82206B20h */ case    0:  		/* lwz R24, <#[R23 + 28]> */
		/* 82206B20h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000001C) );
		/* 82206B20h case    0:*/		return 0x82206B24;
	}
	return 0x82206B24;
} // Block from 82206B20h-82206B24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82206B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206B24);
		  /* 82206B24h */ case    0:  		/* addi R5, R1, 288 */
		/* 82206B24h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 82206B24h case    0:*/		return 0x82206B28;
		  /* 82206B28h */ case    1:  		/* stw R29, <#[R1 + 96]> */
		/* 82206B28h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82206B28h case    1:*/		return 0x82206B2C;
		  /* 82206B2Ch */ case    2:  		/* mr R4, R27 */
		/* 82206B2Ch case    2:*/		regs.R4 = regs.R27;
		/* 82206B2Ch case    2:*/		return 0x82206B30;
		  /* 82206B30h */ case    3:  		/* mr R3, R31 */
		/* 82206B30h case    3:*/		regs.R3 = regs.R31;
		/* 82206B30h case    3:*/		return 0x82206B34;
		  /* 82206B34h */ case    4:  		/* bl -103572 */
		/* 82206B34h case    4:*/		regs.LR = 0x82206B38; return 0x821ED6A0;
		/* 82206B34h case    4:*/		return 0x82206B38;
		  /* 82206B38h */ case    5:  		/* b 4492 */
		/* 82206B38h case    5:*/		return 0x82207CC4;
		/* 82206B38h case    5:*/		return 0x82206B3C;
		  /* 82206B3Ch */ case    6:  		/* lwz R11, <#[R23 + 32]> */
		/* 82206B3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 82206B3Ch case    6:*/		return 0x82206B40;
		  /* 82206B40h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82206B40h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206B40h case    7:*/		return 0x82206B44;
		  /* 82206B44h */ case    8:  		/* bc 4, CR6_EQ, 6864 */
		/* 82206B44h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82208614;  }
		/* 82206B44h case    8:*/		return 0x82206B48;
		  /* 82206B48h */ case    9:  		/* lwz R11, <#[R23 + 40]> */
		/* 82206B48h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000028) );
		/* 82206B48h case    9:*/		return 0x82206B4C;
		  /* 82206B4Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82206B4Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206B4Ch case   10:*/		return 0x82206B50;
		  /* 82206B50h */ case   11:  		/* bc 4, CR6_EQ, 6852 */
		/* 82206B50h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82208614;  }
		/* 82206B50h case   11:*/		return 0x82206B54;
		  /* 82206B54h */ case   12:  		/* addi R11, R27, -1 */
		/* 82206B54h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 82206B54h case   12:*/		return 0x82206B58;
		  /* 82206B58h */ case   13:  		/* mr R3, R31 */
		/* 82206B58h case   13:*/		regs.R3 = regs.R31;
		/* 82206B58h case   13:*/		return 0x82206B5C;
		  /* 82206B5Ch */ case   14:  		/* mr R28, R27 */
		/* 82206B5Ch case   14:*/		regs.R28 = regs.R27;
		/* 82206B5Ch case   14:*/		return 0x82206B60;
		  /* 82206B60h */ case   15:  		/* stw R11, <#[R1 + 136]> */
		/* 82206B60h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82206B60h case   15:*/		return 0x82206B64;
		  /* 82206B64h */ case   16:  		/* bl -101356 */
		/* 82206B64h case   16:*/		regs.LR = 0x82206B68; return 0x821EDF78;
		/* 82206B64h case   16:*/		return 0x82206B68;
		  /* 82206B68h */ case   17:  		/* mr R27, R3 */
		/* 82206B68h case   17:*/		regs.R27 = regs.R3;
		/* 82206B68h case   17:*/		return 0x82206B6C;
		  /* 82206B6Ch */ case   18:  		/* lwz R3, <#[R31 + 584]> */
		/* 82206B6Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 82206B6Ch case   18:*/		return 0x82206B70;
		  /* 82206B70h */ case   19:  		/* bl -65368 */
		/* 82206B70h case   19:*/		regs.LR = 0x82206B74; return 0x821F6C18;
		/* 82206B70h case   19:*/		return 0x82206B74;
		  /* 82206B74h */ case   20:  		/* mr R30, R3 */
		/* 82206B74h case   20:*/		regs.R30 = regs.R3;
		/* 82206B74h case   20:*/		return 0x82206B78;
		  /* 82206B78h */ case   21:  		/* li R11, 2 */
		/* 82206B78h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82206B78h case   21:*/		return 0x82206B7C;
		  /* 82206B7Ch */ case   22:  		/* mr R3, R31 */
		/* 82206B7Ch case   22:*/		regs.R3 = regs.R31;
		/* 82206B7Ch case   22:*/		return 0x82206B80;
		  /* 82206B80h */ case   23:  		/* stw R11, <#[R30]> */
		/* 82206B80h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82206B80h case   23:*/		return 0x82206B84;
		  /* 82206B84h */ case   24:  		/* stw R28, <#[R30 + 20]> */
		/* 82206B84h case   24:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000014) );
		/* 82206B84h case   24:*/		return 0x82206B88;
		  /* 82206B88h */ case   25:  		/* stw R27, <#[R30 + 24]> */
		/* 82206B88h case   25:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000018) );
		/* 82206B88h case   25:*/		return 0x82206B8C;
		  /* 82206B8Ch */ case   26:  		/* bl -101396 */
		/* 82206B8Ch case   26:*/		regs.LR = 0x82206B90; return 0x821EDF78;
		/* 82206B8Ch case   26:*/		return 0x82206B90;
		  /* 82206B90h */ case   27:  		/* stw R3, <#[R30 + 28]> */
		/* 82206B90h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000001C) );
		/* 82206B90h case   27:*/		return 0x82206B94;
		  /* 82206B94h */ case   28:  		/* li R10, 0 */
		/* 82206B94h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82206B94h case   28:*/		return 0x82206B98;
		  /* 82206B98h */ case   29:  		/* stw R16, <#[R1 + 92]> */
		/* 82206B98h case   29:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82206B98h case   29:*/		return 0x82206B9C;
		  /* 82206B9Ch */ case   30:  		/* li R9, 0 */
		/* 82206B9Ch case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82206B9Ch case   30:*/		return 0x82206BA0;
		  /* 82206BA0h */ case   31:  		/* stw R16, <#[R1 + 84]> */
		/* 82206BA0h case   31:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 82206BA0h case   31:*/		return 0x82206BA4;
		  /* 82206BA4h */ case   32:  		/* li R8, 0 */
		/* 82206BA4h case   32:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82206BA4h case   32:*/		return 0x82206BA8;
		  /* 82206BA8h */ case   33:  		/* li R7, 0 */
		/* 82206BA8h case   33:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82206BA8h case   33:*/		return 0x82206BAC;
		  /* 82206BACh */ case   34:  		/* li R6, 0 */
		/* 82206BACh case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82206BACh case   34:*/		return 0x82206BB0;
		  /* 82206BB0h */ case   35:  		/* li R5, 0 */
		/* 82206BB0h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82206BB0h case   35:*/		return 0x82206BB4;
		  /* 82206BB4h */ case   36:  		/* li R4, 0 */
		/* 82206BB4h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82206BB4h case   36:*/		return 0x82206BB8;
		  /* 82206BB8h */ case   37:  		/* li R3, 21 */
		/* 82206BB8h case   37:*/		cpu::op::li<0>(regs,&regs.R3,0x15);
		/* 82206BB8h case   37:*/		return 0x82206BBC;
		  /* 82206BBCh */ case   38:  		/* addi R29, R30, 4 */
		/* 82206BBCh case   38:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x4);
		/* 82206BBCh case   38:*/		return 0x82206BC0;
		  /* 82206BC0h */ case   39:  		/* bl -110840 */
		/* 82206BC0h case   39:*/		regs.LR = 0x82206BC4; return 0x821EBAC8;
		/* 82206BC0h case   39:*/		return 0x82206BC4;
		  /* 82206BC4h */ case   40:  		/* li R11, 11 */
		/* 82206BC4h case   40:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 82206BC4h case   40:*/		return 0x82206BC8;
		  /* 82206BC8h */ case   41:  		/* stw R11, <#[R1 + 84]> */
		/* 82206BC8h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82206BC8h case   41:*/		return 0x82206BCC;
		  /* 82206BCCh */ case   42:  		/* mr R26, R3 */
		/* 82206BCCh case   42:*/		regs.R26 = regs.R3;
		/* 82206BCCh case   42:*/		return 0x82206BD0;
		  /* 82206BD0h */ case   43:  		/* li R10, 8 */
		/* 82206BD0h case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 82206BD0h case   43:*/		return 0x82206BD4;
		  /* 82206BD4h */ case   44:  		/* stw R16, <#[R1 + 92]> */
		/* 82206BD4h case   44:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82206BD4h case   44:*/		return 0x82206BD8;
		  /* 82206BD8h */ case   45:  		/* li R9, 7 */
		/* 82206BD8h case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x7);
		/* 82206BD8h case   45:*/		return 0x82206BDC;
		  /* 82206BDCh */ case   46:  		/* li R8, 6 */
		/* 82206BDCh case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x6);
		/* 82206BDCh case   46:*/		return 0x82206BE0;
		  /* 82206BE0h */ case   47:  		/* li R7, 5 */
		/* 82206BE0h case   47:*/		cpu::op::li<0>(regs,&regs.R7,0x5);
		/* 82206BE0h case   47:*/		return 0x82206BE4;
		  /* 82206BE4h */ case   48:  		/* li R6, 4 */
		/* 82206BE4h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82206BE4h case   48:*/		return 0x82206BE8;
		  /* 82206BE8h */ case   49:  		/* li R5, 3 */
		/* 82206BE8h case   49:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82206BE8h case   49:*/		return 0x82206BEC;
		  /* 82206BECh */ case   50:  		/* li R4, 2 */
		/* 82206BECh case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82206BECh case   50:*/		return 0x82206BF0;
		  /* 82206BF0h */ case   51:  		/* li R3, 1 */
		/* 82206BF0h case   51:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82206BF0h case   51:*/		return 0x82206BF4;
		  /* 82206BF4h */ case   52:  		/* bl -110892 */
		/* 82206BF4h case   52:*/		regs.LR = 0x82206BF8; return 0x821EBAC8;
		/* 82206BF4h case   52:*/		return 0x82206BF8;
		  /* 82206BF8h */ case   53:  		/* mr R5, R3 */
		/* 82206BF8h case   53:*/		regs.R5 = regs.R3;
		/* 82206BF8h case   53:*/		return 0x82206BFC;
		  /* 82206BFCh */ case   54:  		/* mr R10, R29 */
		/* 82206BFCh case   54:*/		regs.R10 = regs.R29;
		/* 82206BFCh case   54:*/		return 0x82206C00;
		  /* 82206C00h */ case   55:  		/* mr R4, R17 */
		/* 82206C00h case   55:*/		regs.R4 = regs.R17;
		/* 82206C00h case   55:*/		return 0x82206C04;
		  /* 82206C04h */ case   56:  		/* mr R3, R31 */
		/* 82206C04h case   56:*/		regs.R3 = regs.R31;
		/* 82206C04h case   56:*/		return 0x82206C08;
		  /* 82206C08h */ case   57:  		/* mr R6, R26 */
		/* 82206C08h case   57:*/		regs.R6 = regs.R26;
		/* 82206C08h case   57:*/		return 0x82206C0C;
		  /* 82206C0Ch */ case   58:  		/* li R7, 3 */
		/* 82206C0Ch case   58:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82206C0Ch case   58:*/		return 0x82206C10;
		  /* 82206C10h */ case   59:  		/* addi R8, R1, 100 */
		/* 82206C10h case   59:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82206C10h case   59:*/		return 0x82206C14;
		  /* 82206C14h */ case   60:  		/* addi R9, R1, 96 */
		/* 82206C14h case   60:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82206C14h case   60:*/		return 0x82206C18;
		  /* 82206C18h */ case   61:  		/* bl -56048 */
		/* 82206C18h case   61:*/		regs.LR = 0x82206C1C; return 0x821F9128;
		/* 82206C18h case   61:*/		return 0x82206C1C;
		  /* 82206C1Ch */ case   62:  		/* mr R5, R29 */
		/* 82206C1Ch case   62:*/		regs.R5 = regs.R29;
		/* 82206C1Ch case   62:*/		return 0x82206C20;
		  /* 82206C20h */ case   63:  		/* mr R4, R18 */
		/* 82206C20h case   63:*/		regs.R4 = regs.R18;
		/* 82206C20h case   63:*/		return 0x82206C24;
		  /* 82206C24h */ case   64:  		/* mr R3, R31 */
		/* 82206C24h case   64:*/		regs.R3 = regs.R31;
		/* 82206C24h case   64:*/		return 0x82206C28;
		  /* 82206C28h */ case   65:  		/* bl -8672 */
		/* 82206C28h case   65:*/		regs.LR = 0x82206C2C; return 0x82204A48;
		/* 82206C28h case   65:*/		return 0x82206C2C;
		  /* 82206C2Ch */ case   66:  		/* lwz R4, <#[R23 + 24]> */
		/* 82206C2Ch case   66:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000018) );
		/* 82206C2Ch case   66:*/		return 0x82206C30;
		  /* 82206C30h */ case   67:  		/* lwz R11, <#[R4 + 4]> */
		/* 82206C30h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82206C30h case   67:*/		return 0x82206C34;
		  /* 82206C34h */ case   68:  		/* cmpwi CR6, R11, 1 */
		/* 82206C34h case   68:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82206C34h case   68:*/		return 0x82206C38;
		  /* 82206C38h */ case   69:  		/* bc 4, CR6_EQ, 48 */
		/* 82206C38h case   69:*/		if ( !regs.CR[6].eq ) { return 0x82206C68;  }
		/* 82206C38h case   69:*/		return 0x82206C3C;
		  /* 82206C3Ch */ case   70:  		/* lwz R11, <#[R4 + 12]> */
		/* 82206C3Ch case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82206C3Ch case   70:*/		return 0x82206C40;
		  /* 82206C40h */ case   71:  		/* cmplwi CR6, R11, 0 */
		/* 82206C40h case   71:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206C40h case   71:*/		return 0x82206C44;
		  /* 82206C44h */ case   72:  		/* bc 12, CR6_EQ, 12 */
		/* 82206C44h case   72:*/		if ( regs.CR[6].eq ) { return 0x82206C50;  }
		/* 82206C44h case   72:*/		return 0x82206C48;
		  /* 82206C48h */ case   73:  		/* mr R3, R16 */
		/* 82206C48h case   73:*/		regs.R3 = regs.R16;
		/* 82206C48h case   73:*/		return 0x82206C4C;
		  /* 82206C4Ch */ case   74:  		/* b 44 */
		/* 82206C4Ch case   74:*/		return 0x82206C78;
		/* 82206C4Ch case   74:*/		return 0x82206C50;
	}
	return 0x82206C50;
} // Block from 82206B24h-82206C50h (75 instructions)

//////////////////////////////////////////////////////
// Block at 82206C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206C50);
		  /* 82206C50h */ case    0:  		/* addi R6, R1, 140 */
		/* 82206C50h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x8C);
		/* 82206C50h case    0:*/		return 0x82206C54;
		  /* 82206C54h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82206C54h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82206C54h case    1:*/		return 0x82206C58;
		  /* 82206C58h */ case    2:  		/* addi R5, R1, 132 */
		/* 82206C58h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x84);
		/* 82206C58h case    2:*/		return 0x82206C5C;
		  /* 82206C5Ch */ case    3:  		/* mr R3, R31 */
		/* 82206C5Ch case    3:*/		regs.R3 = regs.R31;
		/* 82206C5Ch case    3:*/		return 0x82206C60;
		  /* 82206C60h */ case    4:  		/* bl -109832 */
		/* 82206C60h case    4:*/		regs.LR = 0x82206C64; return 0x821EBF58;
		/* 82206C60h case    4:*/		return 0x82206C64;
		  /* 82206C64h */ case    5:  		/* b 20 */
		/* 82206C64h case    5:*/		return 0x82206C78;
		/* 82206C64h case    5:*/		return 0x82206C68;
	}
	return 0x82206C68;
} // Block from 82206C50h-82206C68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82206C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206C68);
		  /* 82206C68h */ case    0:  		/* addi R6, R1, 140 */
		/* 82206C68h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x8C);
		/* 82206C68h case    0:*/		return 0x82206C6C;
		  /* 82206C6Ch */ case    1:  		/* addi R5, R1, 132 */
		/* 82206C6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x84);
		/* 82206C6Ch case    1:*/		return 0x82206C70;
		  /* 82206C70h */ case    2:  		/* mr R3, R31 */
		/* 82206C70h case    2:*/		regs.R3 = regs.R31;
		/* 82206C70h case    2:*/		return 0x82206C74;
		  /* 82206C74h */ case    3:  		/* bl -109980 */
		/* 82206C74h case    3:*/		regs.LR = 0x82206C78; return 0x821EBED8;
		/* 82206C74h case    3:*/		return 0x82206C78;
	}
	return 0x82206C78;
} // Block from 82206C68h-82206C78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82206C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206C78);
		  /* 82206C78h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82206C78h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82206C78h case    0:*/		return 0x82206C7C;
		  /* 82206C7Ch */ case    1:  		/* mr R3, R31 */
		/* 82206C7Ch case    1:*/		regs.R3 = regs.R31;
		/* 82206C7Ch case    1:*/		return 0x82206C80;
		  /* 82206C80h */ case    2:  		/* bc 12, CR0_EQ, 6456 */
		/* 82206C80h case    2:*/		if ( regs.CR[0].eq ) { return 0x822085B8;  }
		/* 82206C80h case    2:*/		return 0x82206C84;
		  /* 82206C84h */ case    3:  		/* lwz R11, <#[R1 + 140]> */
		/* 82206C84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 82206C84h case    3:*/		return 0x82206C88;
		  /* 82206C88h */ case    4:  		/* li R7, 3 */
		/* 82206C88h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82206C88h case    4:*/		return 0x82206C8C;
		  /* 82206C8Ch */ case    5:  		/* lwz R10, <#[R1 + 132]> */
		/* 82206C8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 82206C8Ch case    5:*/		return 0x82206C90;
		  /* 82206C90h */ case    6:  		/* mr R5, R14 */
		/* 82206C90h case    6:*/		regs.R5 = regs.R14;
		/* 82206C90h case    6:*/		return 0x82206C94;
		  /* 82206C94h */ case    7:  		/* mr R4, R28 */
		/* 82206C94h case    7:*/		regs.R4 = regs.R28;
		/* 82206C94h case    7:*/		return 0x82206C98;
		  /* 82206C98h */ case    8:  		/* lwz R8, <#[R1 + 168]> */
		/* 82206C98h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 82206C98h case    8:*/		return 0x82206C9C;
		  /* 82206C9Ch */ case    9:  		/* mullw R29, R10, R11 */
		/* 82206C9Ch case    9:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 82206C9Ch case    9:*/		return 0x82206CA0;
		  /* 82206CA0h */ case   10:  		/* mr R6, R29 */
		/* 82206CA0h case   10:*/		regs.R6 = regs.R29;
		/* 82206CA0h case   10:*/		return 0x82206CA4;
		  /* 82206CA4h */ case   11:  		/* bl -106484 */
		/* 82206CA4h case   11:*/		regs.LR = 0x82206CA8; return 0x821ECCB0;
		/* 82206CA4h case   11:*/		return 0x82206CA8;
		  /* 82206CA8h */ case   12:  		/* lwz R5, <#[R23 + 24]> */
		/* 82206CA8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000018) );
		/* 82206CA8h case   12:*/		return 0x82206CAC;
		  /* 82206CACh */ case   13:  		/* bl -105276 */
		/* 82206CACh case   13:*/		regs.LR = 0x82206CB0; return 0x821ED170;
		/* 82206CACh case   13:*/		return 0x82206CB0;
		  /* 82206CB0h */ case   14:  		/* mr R5, R3 */
		/* 82206CB0h case   14:*/		regs.R5 = regs.R3;
		/* 82206CB0h case   14:*/		return 0x82206CB4;
		  /* 82206CB4h */ case   15:  		/* li R6, 0 */
		/* 82206CB4h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82206CB4h case   15:*/		return 0x82206CB8;
		  /* 82206CB8h */ case   16:  		/* mr R4, R18 */
		/* 82206CB8h case   16:*/		regs.R4 = regs.R18;
		/* 82206CB8h case   16:*/		return 0x82206CBC;
		  /* 82206CBCh */ case   17:  		/* mr R3, R31 */
		/* 82206CBCh case   17:*/		regs.R3 = regs.R31;
		/* 82206CBCh case   17:*/		return 0x82206CC0;
		  /* 82206CC0h */ case   18:  		/* bl -47728 */
		/* 82206CC0h case   18:*/		regs.LR = 0x82206CC4; return 0x821FB250;
		/* 82206CC0h case   18:*/		return 0x82206CC4;
		  /* 82206CC4h */ case   19:  		/* lwz R11, <#[R20]> */
		/* 82206CC4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206CC4h case   19:*/		return 0x82206CC8;
		  /* 82206CC8h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206CC8h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206CC8h case   20:*/		return 0x82206CCC;
		  /* 82206CCCh */ case   21:  		/* bc 4, CR0_EQ, 40 */
		/* 82206CCCh case   21:*/		if ( !regs.CR[0].eq ) { return 0x82206CF4;  }
		/* 82206CCCh case   21:*/		return 0x82206CD0;
		  /* 82206CD0h */ case   22:  		/* lwz R11, <#[R19]> */
		/* 82206CD0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206CD0h case   22:*/		return 0x82206CD4;
		  /* 82206CD4h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206CD4h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206CD4h case   23:*/		return 0x82206CD8;
		  /* 82206CD8h */ case   24:  		/* addic. R3, R11, -4 */
		/* 82206CD8h case   24:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82206CD8h case   24:*/		return 0x82206CDC;
		  /* 82206CDCh */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 82206CDCh case   25:*/		if ( regs.CR[0].eq ) { return 0x82206CF4;  }
		/* 82206CDCh case   25:*/		return 0x82206CE0;
		  /* 82206CE0h */ case   26:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206CE0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206CE0h case   26:*/		return 0x82206CE4;
		  /* 82206CE4h */ case   27:  		/* lwz R10, <#[R3 + 12]> */
		/* 82206CE4h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82206CE4h case   27:*/		return 0x82206CE8;
		  /* 82206CE8h */ case   28:  		/* addi R11, R11, 1 */
		/* 82206CE8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82206CE8h case   28:*/		return 0x82206CEC;
		  /* 82206CECh */ case   29:  		/* cmplw CR6, R11, R10 */
		/* 82206CECh case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82206CECh case   29:*/		return 0x82206CF0;
		  /* 82206CF0h */ case   30:  		/* bc 4, CR6_GT, 16 */
		/* 82206CF0h case   30:*/		if ( !regs.CR[6].gt ) { return 0x82206D00;  }
		/* 82206CF0h case   30:*/		return 0x82206CF4;
	}
	return 0x82206CF4;
} // Block from 82206C78h-82206CF4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82206CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206CF4);
		  /* 82206CF4h */ case    0:  		/* li R4, 1 */
		/* 82206CF4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206CF4h case    0:*/		return 0x82206CF8;
		  /* 82206CF8h */ case    1:  		/* mr R3, R19 */
		/* 82206CF8h case    1:*/		regs.R3 = regs.R19;
		/* 82206CF8h case    1:*/		return 0x82206CFC;
		  /* 82206CFCh */ case    2:  		/* bl -498740 */
		/* 82206CFCh case    2:*/		regs.LR = 0x82206D00; return 0x8218D0C8;
		/* 82206CFCh case    2:*/		return 0x82206D00;
	}
	return 0x82206D00;
} // Block from 82206CF4h-82206D00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82206D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206D00);
		  /* 82206D00h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82206D00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82206D00h case    0:*/		return 0x82206D04;
		  /* 82206D04h */ case    1:  		/* addi R10, R11, 4 */
		/* 82206D04h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82206D04h case    1:*/		return 0x82206D08;
		  /* 82206D08h */ case    2:  		/* addi R9, R11, 1 */
		/* 82206D08h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82206D08h case    2:*/		return 0x82206D0C;
		  /* 82206D0Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82206D0Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82206D0Ch case    3:*/		return 0x82206D10;
		  /* 82206D10h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82206D10h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82206D10h case    4:*/		return 0x82206D14;
		  /* 82206D14h */ case    5:  		/* stwx R27, <#[R11 + R3]> */
		/* 82206D14h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82206D14h case    5:*/		return 0x82206D18;
		  /* 82206D18h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82206D18h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82206D18h case    6:*/		return 0x82206D1C;
		  /* 82206D1Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206D1Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206D1Ch case    7:*/		return 0x82206D20;
		  /* 82206D20h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82206D20h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82206D48;  }
		/* 82206D20h case    8:*/		return 0x82206D24;
		  /* 82206D24h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82206D24h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82206D24h case    9:*/		return 0x82206D28;
		  /* 82206D28h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206D28h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206D28h case   10:*/		return 0x82206D2C;
		  /* 82206D2Ch */ case   11:  		/* addic. R11, R11, -4 */
		/* 82206D2Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82206D2Ch case   11:*/		return 0x82206D30;
		  /* 82206D30h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82206D30h case   12:*/		if ( regs.CR[0].eq ) { return 0x82206D48;  }
		/* 82206D30h case   12:*/		return 0x82206D34;
		  /* 82206D34h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206D34h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206D34h case   13:*/		return 0x82206D38;
		  /* 82206D38h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82206D38h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82206D38h case   14:*/		return 0x82206D3C;
		  /* 82206D3Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 82206D3Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82206D3Ch case   15:*/		return 0x82206D40;
		  /* 82206D40h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82206D40h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82206D40h case   16:*/		return 0x82206D44;
		  /* 82206D44h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 82206D44h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82206D58;  }
		/* 82206D44h case   17:*/		return 0x82206D48;
	}
	return 0x82206D48;
} // Block from 82206D00h-82206D48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82206D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206D48);
		  /* 82206D48h */ case    0:  		/* li R4, 1 */
		/* 82206D48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206D48h case    0:*/		return 0x82206D4C;
		  /* 82206D4Ch */ case    1:  		/* mr R3, R19 */
		/* 82206D4Ch case    1:*/		regs.R3 = regs.R19;
		/* 82206D4Ch case    1:*/		return 0x82206D50;
		  /* 82206D50h */ case    2:  		/* bl -498824 */
		/* 82206D50h case    2:*/		regs.LR = 0x82206D54; return 0x8218D0C8;
		/* 82206D50h case    2:*/		return 0x82206D54;
		  /* 82206D54h */ case    3:  		/* mr R11, R3 */
		/* 82206D54h case    3:*/		regs.R11 = regs.R3;
		/* 82206D54h case    3:*/		return 0x82206D58;
	}
	return 0x82206D58;
} // Block from 82206D48h-82206D58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82206D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206D58);
		  /* 82206D58h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206D58h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206D58h case    0:*/		return 0x82206D5C;
		  /* 82206D5Ch */ case    1:  		/* mr R3, R21 */
		/* 82206D5Ch case    1:*/		regs.R3 = regs.R21;
		/* 82206D5Ch case    1:*/		return 0x82206D60;
		  /* 82206D60h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 82206D60h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82206D60h case    2:*/		return 0x82206D64;
		  /* 82206D64h */ case    3:  		/* addi R8, R10, 4 */
		/* 82206D64h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82206D64h case    3:*/		return 0x82206D68;
		  /* 82206D68h */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 82206D68h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 82206D68h case    4:*/		return 0x82206D6C;
		  /* 82206D6Ch */ case    5:  		/* addi R7, R10, 1 */
		/* 82206D6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82206D6Ch case    5:*/		return 0x82206D70;
		  /* 82206D70h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82206D70h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82206D70h case    6:*/		return 0x82206D74;
		  /* 82206D74h */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 82206D74h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82206D74h case    7:*/		return 0x82206D78;
		  /* 82206D78h */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 82206D78h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82206D78h case    8:*/		return 0x82206D7C;
		  /* 82206D7Ch */ case    9:  		/* bl -63756 */
		/* 82206D7Ch case    9:*/		regs.LR = 0x82206D80; return 0x821F7470;
		/* 82206D7Ch case    9:*/		return 0x82206D80;
		  /* 82206D80h */ case   10:  		/* li R5, 12 */
		/* 82206D80h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82206D80h case   10:*/		return 0x82206D84;
		  /* 82206D84h */ case   11:  		/* mr R4, R23 */
		/* 82206D84h case   11:*/		regs.R4 = regs.R23;
		/* 82206D84h case   11:*/		return 0x82206D88;
		  /* 82206D88h */ case   12:  		/* mr R3, R21 */
		/* 82206D88h case   12:*/		regs.R3 = regs.R21;
		/* 82206D88h case   12:*/		return 0x82206D8C;
		  /* 82206D8Ch */ case   13:  		/* bl -63372 */
		/* 82206D8Ch case   13:*/		regs.LR = 0x82206D90; return 0x821F7600;
		/* 82206D8Ch case   13:*/		return 0x82206D90;
		  /* 82206D90h */ case   14:  		/* li R5, 0 */
		/* 82206D90h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82206D90h case   14:*/		return 0x82206D94;
		  /* 82206D94h */ case   15:  		/* li R4, 8 */
		/* 82206D94h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82206D94h case   15:*/		return 0x82206D98;
		  /* 82206D98h */ case   16:  		/* mr R3, R31 */
		/* 82206D98h case   16:*/		regs.R3 = regs.R31;
		/* 82206D98h case   16:*/		return 0x82206D9C;
		  /* 82206D9Ch */ case   17:  		/* mr R26, R16 */
		/* 82206D9Ch case   17:*/		regs.R26 = regs.R16;
		/* 82206D9Ch case   17:*/		return 0x82206DA0;
		  /* 82206DA0h */ case   18:  		/* lwz R29, <#[R30 + 28]> */
		/* 82206DA0h case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000001C) );
		/* 82206DA0h case   18:*/		return 0x82206DA4;
		  /* 82206DA4h */ case   19:  		/* lwz R24, <#[R23 + 28]> */
		/* 82206DA4h case   19:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000001C) );
		/* 82206DA4h case   19:*/		return 0x82206DA8;
		  /* 82206DA8h */ case   20:  		/* stw R29, <#[R1 + 96]> */
		/* 82206DA8h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82206DA8h case   20:*/		return 0x82206DAC;
		  /* 82206DACh */ case   21:  		/* bl -662900 */
		/* 82206DACh case   21:*/		regs.LR = 0x82206DB0; return 0x82165038;
		/* 82206DACh case   21:*/		return 0x82206DB0;
		  /* 82206DB0h */ case   22:  		/* mr R30, R3 */
		/* 82206DB0h case   22:*/		regs.R30 = regs.R3;
		/* 82206DB0h case   22:*/		return 0x82206DB4;
		  /* 82206DB4h */ case   23:  		/* addi R27, R3, 4 */
		/* 82206DB4h case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 82206DB4h case   23:*/		return 0x82206DB8;
		  /* 82206DB8h */ case   24:  		/* ori R11, R3, 1 */
		/* 82206DB8h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 82206DB8h case   24:*/		return 0x82206DBC;
		  /* 82206DBCh */ case   25:  		/* ori R10, R27, 1 */
		/* 82206DBCh case   25:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 82206DBCh case   25:*/		return 0x82206DC0;
		  /* 82206DC0h */ case   26:  		/* stw R11, <#[R3 + 4]> */
		/* 82206DC0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82206DC0h case   26:*/		return 0x82206DC4;
		  /* 82206DC4h */ case   27:  		/* mr R5, R31 */
		/* 82206DC4h case   27:*/		regs.R5 = regs.R31;
		/* 82206DC4h case   27:*/		return 0x82206DC8;
		  /* 82206DC8h */ case   28:  		/* stw R10, <#[R30]> */
		/* 82206DC8h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82206DC8h case   28:*/		return 0x82206DCC;
		  /* 82206DCCh */ case   29:  		/* addi R3, R1, 112 */
		/* 82206DCCh case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82206DCCh case   29:*/		return 0x82206DD0;
		  /* 82206DD0h */ case   30:  		/* lwz R4, <#[R23 + 28]> */
		/* 82206DD0h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x0000001C) );
		/* 82206DD0h case   30:*/		return 0x82206DD4;
		  /* 82206DD4h */ case   31:  		/* bl -65628 */
		/* 82206DD4h case   31:*/		regs.LR = 0x82206DD8; return 0x821F6D78;
		/* 82206DD4h case   31:*/		return 0x82206DD8;
		  /* 82206DD8h */ case   32:  		/* b 288 */
		/* 82206DD8h case   32:*/		return 0x82206EF8;
		/* 82206DD8h case   32:*/		return 0x82206DDC;
		  /* 82206DDCh */ case   33:  		/* cmplwi CR6, R28, 0 */
		/* 82206DDCh case   33:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82206DDCh case   33:*/		return 0x82206DE0;
		  /* 82206DE0h */ case   34:  		/* bc 12, CR6_EQ, 6184 */
		/* 82206DE0h case   34:*/		if ( regs.CR[6].eq ) { return 0x82208608;  }
		/* 82206DE0h case   34:*/		return 0x82206DE4;
		  /* 82206DE4h */ case   35:  		/* lwz R11, <#[R28 + 4]> */
		/* 82206DE4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82206DE4h case   35:*/		return 0x82206DE8;
		  /* 82206DE8h */ case   36:  		/* cmpwi CR6, R11, 12 */
		/* 82206DE8h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82206DE8h case   36:*/		return 0x82206DEC;
		  /* 82206DECh */ case   37:  		/* bc 4, CR6_EQ, 6172 */
		/* 82206DECh case   37:*/		if ( !regs.CR[6].eq ) { return 0x82208608;  }
		/* 82206DECh case   37:*/		return 0x82206DF0;
		  /* 82206DF0h */ case   38:  		/* lwz R11, <#[R28 + 16]> */
		/* 82206DF0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82206DF0h case   38:*/		return 0x82206DF4;
		  /* 82206DF4h */ case   39:  		/* mr R3, R31 */
		/* 82206DF4h case   39:*/		regs.R3 = regs.R31;
		/* 82206DF4h case   39:*/		return 0x82206DF8;
		  /* 82206DF8h */ case   40:  		/* cmpwi CR6, R11, 13 */
		/* 82206DF8h case   40:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 82206DF8h case   40:*/		return 0x82206DFC;
		  /* 82206DFCh */ case   41:  		/* bc 4, CR6_EQ, 6084 */
		/* 82206DFCh case   41:*/		if ( !regs.CR[6].eq ) { return 0x822085C0;  }
		/* 82206DFCh case   41:*/		return 0x82206E00;
		  /* 82206E00h */ case   42:  		/* mr R4, R28 */
		/* 82206E00h case   42:*/		regs.R4 = regs.R28;
		/* 82206E00h case   42:*/		return 0x82206E04;
		  /* 82206E04h */ case   43:  		/* bl -65012 */
		/* 82206E04h case   43:*/		regs.LR = 0x82206E08; return 0x821F7010;
		/* 82206E04h case   43:*/		return 0x82206E08;
		  /* 82206E08h */ case   44:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82206E08h case   44:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82206E08h case   44:*/		return 0x82206E0C;
		  /* 82206E0Ch */ case   45:  		/* bc 12, CR0_EQ, 20 */
		/* 82206E0Ch case   45:*/		if ( regs.CR[0].eq ) { return 0x82206E20;  }
		/* 82206E0Ch case   45:*/		return 0x82206E10;
		  /* 82206E10h */ case   46:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 82206E10h case   46:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 82206E10h case   46:*/		return 0x82206E14;
		  /* 82206E14h */ case   47:  		/* bc 4, CR0_EQ, 6068 */
		/* 82206E14h case   47:*/		if ( !regs.CR[0].eq ) { return 0x822085C8;  }
		/* 82206E14h case   47:*/		return 0x82206E18;
		  /* 82206E18h */ case   48:  		/* mr R26, R15 */
		/* 82206E18h case   48:*/		regs.R26 = regs.R15;
		/* 82206E18h case   48:*/		return 0x82206E1C;
		  /* 82206E1Ch */ case   49:  		/* b 220 */
		/* 82206E1Ch case   49:*/		return 0x82206EF8;
		/* 82206E1Ch case   49:*/		return 0x82206E20;
	}
	return 0x82206E20;
} // Block from 82206D58h-82206E20h (50 instructions)

//////////////////////////////////////////////////////
// Block at 82206E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206E20);
		  /* 82206E20h */ case    0:  		/* mr R5, R31 */
		/* 82206E20h case    0:*/		regs.R5 = regs.R31;
		/* 82206E20h case    0:*/		return 0x82206E24;
		  /* 82206E24h */ case    1:  		/* lwz R4, <#[R28 + 24]> */
		/* 82206E24h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 82206E24h case    1:*/		return 0x82206E28;
		  /* 82206E28h */ case    2:  		/* addi R3, R1, 152 */
		/* 82206E28h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x98);
		/* 82206E28h case    2:*/		return 0x82206E2C;
		  /* 82206E2Ch */ case    3:  		/* bl -65716 */
		/* 82206E2Ch case    3:*/		regs.LR = 0x82206E30; return 0x821F6D78;
		/* 82206E2Ch case    3:*/		return 0x82206E30;
		  /* 82206E30h */ case    4:  		/* b 164 */
		/* 82206E30h case    4:*/		return 0x82206ED4;
		/* 82206E30h case    4:*/		return 0x82206E34;
		  /* 82206E34h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82206E34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82206E34h case    5:*/		return 0x82206E38;
		  /* 82206E38h */ case    6:  		/* cmpwi CR6, R11, 20 */
		/* 82206E38h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000014);
		/* 82206E38h case    6:*/		return 0x82206E3C;
		  /* 82206E3Ch */ case    7:  		/* bc 4, CR6_EQ, 6040 */
		/* 82206E3Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x822085D4;  }
		/* 82206E3Ch case    7:*/		return 0x82206E40;
		  /* 82206E40h */ case    8:  		/* lwz R11, <#[R3 + 16]> */
		/* 82206E40h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 82206E40h case    8:*/		return 0x82206E44;
		  /* 82206E44h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82206E44h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82206E44h case    9:*/		return 0x82206E48;
		  /* 82206E48h */ case   10:  		/* bc 12, CR6_EQ, 6068 */
		/* 82206E48h case   10:*/		if ( regs.CR[6].eq ) { return 0x822085FC;  }
		/* 82206E48h case   10:*/		return 0x82206E4C;
		  /* 82206E4Ch */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 82206E4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82206E4Ch case   11:*/		return 0x82206E50;
		  /* 82206E50h */ case   12:  		/* cmpwi CR6, R10, 15 */
		/* 82206E50h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000F);
		/* 82206E50h case   12:*/		return 0x82206E54;
		  /* 82206E54h */ case   13:  		/* bc 4, CR6_EQ, 6056 */
		/* 82206E54h case   13:*/		if ( !regs.CR[6].eq ) { return 0x822085FC;  }
		/* 82206E54h case   13:*/		return 0x82206E58;
		  /* 82206E58h */ case   14:  		/* lwz R10, <#[R11 + 16]> */
		/* 82206E58h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82206E58h case   14:*/		return 0x82206E5C;
		  /* 82206E5Ch */ case   15:  		/* cmpwi CR6, R10, 2 */
		/* 82206E5Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 82206E5Ch case   15:*/		return 0x82206E60;
		  /* 82206E60h */ case   16:  		/* bc 4, CR6_EQ, 6016 */
		/* 82206E60h case   16:*/		if ( !regs.CR[6].eq ) { return 0x822085E0;  }
		/* 82206E60h case   16:*/		return 0x82206E64;
		  /* 82206E64h */ case   17:  		/* lwz R28, <#[R11 + 24]> */
		/* 82206E64h case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000018) );
		/* 82206E64h case   17:*/		return 0x82206E68;
		  /* 82206E68h */ case   18:  		/* mr R3, R30 */
		/* 82206E68h case   18:*/		regs.R3 = regs.R30;
		/* 82206E68h case   18:*/		return 0x82206E6C;
		  /* 82206E6Ch */ case   19:  		/* mr R4, R28 */
		/* 82206E6Ch case   19:*/		regs.R4 = regs.R28;
		/* 82206E6Ch case   19:*/		return 0x82206E70;
		  /* 82206E70h */ case   20:  		/* bl -609856 */
		/* 82206E70h case   20:*/		regs.LR = 0x82206E74; return 0x82172030;
		/* 82206E70h case   20:*/		return 0x82206E74;
		  /* 82206E74h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82206E74h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82206E74h case   21:*/		return 0x82206E78;
		  /* 82206E78h */ case   22:  		/* bc 4, CR0_EQ, 6004 */
		/* 82206E78h case   22:*/		if ( !regs.CR[0].eq ) { return 0x822085EC;  }
		/* 82206E78h case   22:*/		return 0x82206E7C;
		  /* 82206E7Ch */ case   23:  		/* lwz R11, <#[R27]> */
		/* 82206E7Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82206E7Ch case   23:*/		return 0x82206E80;
		  /* 82206E80h */ case   24:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82206E80h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82206E80h case   24:*/		return 0x82206E84;
		  /* 82206E84h */ case   25:  		/* bc 4, CR0_EQ, 40 */
		/* 82206E84h case   25:*/		if ( !regs.CR[0].eq ) { return 0x82206EAC;  }
		/* 82206E84h case   25:*/		return 0x82206E88;
		  /* 82206E88h */ case   26:  		/* lwz R11, <#[R30]> */
		/* 82206E88h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82206E88h case   26:*/		return 0x82206E8C;
		  /* 82206E8Ch */ case   27:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82206E8Ch case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82206E8Ch case   27:*/		return 0x82206E90;
		  /* 82206E90h */ case   28:  		/* addic. R11, R11, -4 */
		/* 82206E90h case   28:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82206E90h case   28:*/		return 0x82206E94;
		  /* 82206E94h */ case   29:  		/* bc 12, CR0_EQ, 24 */
		/* 82206E94h case   29:*/		if ( regs.CR[0].eq ) { return 0x82206EAC;  }
		/* 82206E94h case   29:*/		return 0x82206E98;
		  /* 82206E98h */ case   30:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206E98h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206E98h case   30:*/		return 0x82206E9C;
		  /* 82206E9Ch */ case   31:  		/* lwz R9, <#[R11 + 12]> */
		/* 82206E9Ch case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82206E9Ch case   31:*/		return 0x82206EA0;
		  /* 82206EA0h */ case   32:  		/* addi R10, R10, 1 */
		/* 82206EA0h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82206EA0h case   32:*/		return 0x82206EA4;
		  /* 82206EA4h */ case   33:  		/* cmplw CR6, R10, R9 */
		/* 82206EA4h case   33:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82206EA4h case   33:*/		return 0x82206EA8;
		  /* 82206EA8h */ case   34:  		/* bc 4, CR6_GT, 20 */
		/* 82206EA8h case   34:*/		if ( !regs.CR[6].gt ) { return 0x82206EBC;  }
		/* 82206EA8h case   34:*/		return 0x82206EAC;
	}
	return 0x82206EAC;
} // Block from 82206E20h-82206EACh (35 instructions)

//////////////////////////////////////////////////////
// Block at 82206EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206EAC);
		  /* 82206EACh */ case    0:  		/* li R4, 1 */
		/* 82206EACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82206EACh case    0:*/		return 0x82206EB0;
		  /* 82206EB0h */ case    1:  		/* mr R3, R30 */
		/* 82206EB0h case    1:*/		regs.R3 = regs.R30;
		/* 82206EB0h case    1:*/		return 0x82206EB4;
		  /* 82206EB4h */ case    2:  		/* bl -499180 */
		/* 82206EB4h case    2:*/		regs.LR = 0x82206EB8; return 0x8218D0C8;
		/* 82206EB4h case    2:*/		return 0x82206EB8;
		  /* 82206EB8h */ case    3:  		/* mr R11, R3 */
		/* 82206EB8h case    3:*/		regs.R11 = regs.R3;
		/* 82206EB8h case    3:*/		return 0x82206EBC;
	}
	return 0x82206EBC;
} // Block from 82206EACh-82206EBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82206EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206EBC);
		  /* 82206EBCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82206EBCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82206EBCh case    0:*/		return 0x82206EC0;
		  /* 82206EC0h */ case    1:  		/* addi R9, R10, 4 */
		/* 82206EC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82206EC0h case    1:*/		return 0x82206EC4;
		  /* 82206EC4h */ case    2:  		/* addi R8, R10, 1 */
		/* 82206EC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82206EC4h case    2:*/		return 0x82206EC8;
		  /* 82206EC8h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82206EC8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82206EC8h case    3:*/		return 0x82206ECC;
		  /* 82206ECCh */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 82206ECCh case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82206ECCh case    4:*/		return 0x82206ED0;
		  /* 82206ED0h */ case    5:  		/* stwx R28, <#[R10 + R11]> */
		/* 82206ED0h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82206ED0h case    5:*/		return 0x82206ED4;
	}
	return 0x82206ED4;
} // Block from 82206EBCh-82206ED4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82206ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206ED4);
		  /* 82206ED4h */ case    0:  		/* addi R3, R1, 152 */
		/* 82206ED4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x98);
		/* 82206ED4h case    0:*/		return 0x82206ED8;
		  /* 82206ED8h */ case    1:  		/* bl -65696 */
		/* 82206ED8h case    1:*/		regs.LR = 0x82206EDC; return 0x821F6E38;
		/* 82206ED8h case    1:*/		return 0x82206EDC;
		  /* 82206EDCh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82206EDCh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82206EDCh case    2:*/		return 0x82206EE0;
		  /* 82206EE0h */ case    3:  		/* bc 4, CR0_EQ, -172 */
		/* 82206EE0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82206E34;  }
		/* 82206EE0h case    3:*/		return 0x82206EE4;
		  /* 82206EE4h */ case    4:  		/* li R6, 15 */
		/* 82206EE4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 82206EE4h case    4:*/		return 0x82206EE8;
		  /* 82206EE8h */ case    5:  		/* lwz R4, <#[R1 + 156]> */
		/* 82206EE8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 82206EE8h case    5:*/		return 0x82206EEC;
		  /* 82206EECh */ case    6:  		/* li R5, 8 */
		/* 82206EECh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82206EECh case    6:*/		return 0x82206EF0;
		  /* 82206EF0h */ case    7:  		/* lwz R3, <#[R1 + 152]> */
		/* 82206EF0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000098) );
		/* 82206EF0h case    7:*/		return 0x82206EF4;
		  /* 82206EF4h */ case    8:  		/* bl -630948 */
		/* 82206EF4h case    8:*/		regs.LR = 0x82206EF8; return 0x8216CE50;
		/* 82206EF4h case    8:*/		return 0x82206EF8;
	}
	return 0x82206EF8;
} // Block from 82206ED4h-82206EF8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82206EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206EF8);
		  /* 82206EF8h */ case    0:  		/* addi R3, R1, 112 */
		/* 82206EF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82206EF8h case    0:*/		return 0x82206EFC;
		  /* 82206EFCh */ case    1:  		/* bl -65732 */
		/* 82206EFCh case    1:*/		regs.LR = 0x82206F00; return 0x821F6E38;
		/* 82206EFCh case    1:*/		return 0x82206F00;
		  /* 82206F00h */ case    2:  		/* or. R28, R3, R3 */
		/* 82206F00h case    2:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 82206F00h case    2:*/		return 0x82206F04;
		  /* 82206F04h */ case    3:  		/* bc 4, CR0_EQ, -296 */
		/* 82206F04h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82206DDC;  }
		/* 82206F04h case    3:*/		return 0x82206F08;
		  /* 82206F08h */ case    4:  		/* mr R3, R30 */
		/* 82206F08h case    4:*/		regs.R3 = regs.R30;
		/* 82206F08h case    4:*/		return 0x82206F0C;
		  /* 82206F0Ch */ case    5:  		/* bl -87340 */
		/* 82206F0Ch case    5:*/		regs.LR = 0x82206F10; return 0x821F19E0;
		/* 82206F0Ch case    5:*/		return 0x82206F10;
		  /* 82206F10h */ case    6:  		/* li R6, 0 */
		/* 82206F10h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82206F10h case    6:*/		return 0x82206F14;
		  /* 82206F14h */ case    7:  		/* li R5, 8 */
		/* 82206F14h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82206F14h case    7:*/		return 0x82206F18;
		  /* 82206F18h */ case    8:  		/* mr R4, R30 */
		/* 82206F18h case    8:*/		regs.R4 = regs.R30;
		/* 82206F18h case    8:*/		return 0x82206F1C;
		  /* 82206F1Ch */ case    9:  		/* mr R3, R31 */
		/* 82206F1Ch case    9:*/		regs.R3 = regs.R31;
		/* 82206F1Ch case    9:*/		return 0x82206F20;
		  /* 82206F20h */ case   10:  		/* bl -630992 */
		/* 82206F20h case   10:*/		regs.LR = 0x82206F24; return 0x8216CE50;
		/* 82206F20h case   10:*/		return 0x82206F24;
		  /* 82206F24h */ case   11:  		/* li R6, 15 */
		/* 82206F24h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 82206F24h case   11:*/		return 0x82206F28;
		  /* 82206F28h */ case   12:  		/* li R5, 8 */
		/* 82206F28h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82206F28h case   12:*/		return 0x82206F2C;
		  /* 82206F2Ch */ case   13:  		/* lwz R4, <#[R1 + 116]> */
		/* 82206F2Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 82206F2Ch case   13:*/		return 0x82206F30;
		  /* 82206F30h */ case   14:  		/* lwz R3, <#[R1 + 112]> */
		/* 82206F30h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 82206F30h case   14:*/		return 0x82206F34;
		  /* 82206F34h */ case   15:  		/* bl -631012 */
		/* 82206F34h case   15:*/		regs.LR = 0x82206F38; return 0x8216CE50;
		/* 82206F34h case   15:*/		return 0x82206F38;
		  /* 82206F38h */ case   16:  		/* b 3468 */
		/* 82206F38h case   16:*/		return 0x82207CC4;
		/* 82206F38h case   16:*/		return 0x82206F3C;
		  /* 82206F3Ch */ case   17:  		/* mr R4, R23 */
		/* 82206F3Ch case   17:*/		regs.R4 = regs.R23;
		/* 82206F3Ch case   17:*/		return 0x82206F40;
		  /* 82206F40h */ case   18:  		/* mr R3, R31 */
		/* 82206F40h case   18:*/		regs.R3 = regs.R31;
		/* 82206F40h case   18:*/		return 0x82206F44;
		  /* 82206F44h */ case   19:  		/* bl -65332 */
		/* 82206F44h case   19:*/		regs.LR = 0x82206F48; return 0x821F7010;
		/* 82206F44h case   19:*/		return 0x82206F48;
		  /* 82206F48h */ case   20:  		/* mr R28, R3 */
		/* 82206F48h case   20:*/		regs.R28 = regs.R3;
		/* 82206F48h case   20:*/		return 0x82206F4C;
		  /* 82206F4Ch */ case   21:  		/* addi R3, R1, 256 */
		/* 82206F4Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 82206F4Ch case   21:*/		return 0x82206F50;
		  /* 82206F50h */ case   22:  		/* lwz R4, <#[R31 + 584]> */
		/* 82206F50h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000248) );
		/* 82206F50h case   22:*/		return 0x82206F54;
		  /* 82206F54h */ case   23:  		/* bl -422180 */
		/* 82206F54h case   23:*/		regs.LR = 0x82206F58; return 0x8219FE30;
		/* 82206F54h case   23:*/		return 0x82206F58;
		  /* 82206F58h */ case   24:  		/* addi R3, R1, 256 */
		/* 82206F58h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 82206F58h case   24:*/		return 0x82206F5C;
		  /* 82206F5Ch */ case   25:  		/* bl -82828 */
		/* 82206F5Ch case   25:*/		regs.LR = 0x82206F60; return 0x821F2BD0;
		/* 82206F5Ch case   25:*/		return 0x82206F60;
		  /* 82206F60h */ case   26:  		/* addi R3, R1, 256 */
		/* 82206F60h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 82206F60h case   26:*/		return 0x82206F64;
		  /* 82206F64h */ case   27:  		/* bl -87020 */
		/* 82206F64h case   27:*/		regs.LR = 0x82206F68; return 0x821F1B78;
		/* 82206F64h case   27:*/		return 0x82206F68;
		  /* 82206F68h */ case   28:  		/* lwz R11, <#[R3]> */
		/* 82206F68h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82206F68h case   28:*/		return 0x82206F6C;
		  /* 82206F6Ch */ case   29:  		/* mr R30, R3 */
		/* 82206F6Ch case   29:*/		regs.R30 = regs.R3;
		/* 82206F6Ch case   29:*/		return 0x82206F70;
		  /* 82206F70h */ case   30:  		/* cmpwi CR6, R11, 2 */
		/* 82206F70h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82206F70h case   30:*/		return 0x82206F74;
		  /* 82206F74h */ case   31:  		/* bc 4, CR6_EQ, -20 */
		/* 82206F74h case   31:*/		if ( !regs.CR[6].eq ) { return 0x82206F60;  }
		/* 82206F74h case   31:*/		return 0x82206F78;
		  /* 82206F78h */ case   32:  		/* rlwinm. R27, R28, 0, 24, 31 */
		/* 82206F78h case   32:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R27,regs.R28);
		/* 82206F78h case   32:*/		return 0x82206F7C;
		  /* 82206F7Ch */ case   33:  		/* bc 12, CR0_EQ, 12 */
		/* 82206F7Ch case   33:*/		if ( regs.CR[0].eq ) { return 0x82206F88;  }
		/* 82206F7Ch case   33:*/		return 0x82206F80;
		  /* 82206F80h */ case   34:  		/* lwz R28, <#[R3 + 28]> */
		/* 82206F80h case   34:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x0000001C) );
		/* 82206F80h case   34:*/		return 0x82206F84;
		  /* 82206F84h */ case   35:  		/* b 16 */
		/* 82206F84h case   35:*/		return 0x82206F94;
		/* 82206F84h case   35:*/		return 0x82206F88;
	}
	return 0x82206F88;
} // Block from 82206EF8h-82206F88h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82206F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206F88);
		  /* 82206F88h */ case    0:  		/* mr R3, R31 */
		/* 82206F88h case    0:*/		regs.R3 = regs.R31;
		/* 82206F88h case    0:*/		return 0x82206F8C;
		  /* 82206F8Ch */ case    1:  		/* bl -102420 */
		/* 82206F8Ch case    1:*/		regs.LR = 0x82206F90; return 0x821EDF78;
		/* 82206F8Ch case    1:*/		return 0x82206F90;
		  /* 82206F90h */ case    2:  		/* mr R28, R3 */
		/* 82206F90h case    2:*/		regs.R28 = regs.R3;
		/* 82206F90h case    2:*/		return 0x82206F94;
	}
	return 0x82206F94;
} // Block from 82206F88h-82206F94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82206F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82206F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82206F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82206F94);
		  /* 82206F94h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82206F94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82206F94h case    0:*/		return 0x82206F98;
		  /* 82206F98h */ case    1:  		/* bc 4, CR6_EQ, 224 */
		/* 82206F98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82207078;  }
		/* 82206F98h case    1:*/		return 0x82206F9C;
		  /* 82206F9Ch */ case    2:  		/* mr R5, R31 */
		/* 82206F9Ch case    2:*/		regs.R5 = regs.R31;
		/* 82206F9Ch case    2:*/		return 0x82206FA0;
		  /* 82206FA0h */ case    3:  		/* lwz R4, <#[R23 + 24]> */
		/* 82206FA0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000018) );
		/* 82206FA0h case    3:*/		return 0x82206FA4;
		  /* 82206FA4h */ case    4:  		/* addi R3, R1, 104 */
		/* 82206FA4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 82206FA4h case    4:*/		return 0x82206FA8;
		  /* 82206FA8h */ case    5:  		/* bl -66096 */
		/* 82206FA8h case    5:*/		regs.LR = 0x82206FAC; return 0x821F6D78;
		/* 82206FA8h case    5:*/		return 0x82206FAC;
		  /* 82206FACh */ case    6:  		/* b 168 */
		/* 82206FACh case    6:*/		return 0x82207054;
		/* 82206FACh case    6:*/		return 0x82206FB0;
		  /* 82206FB0h */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 82206FB0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82206FB0h case    7:*/		return 0x82206FB4;
		  /* 82206FB4h */ case    8:  		/* cmpwi CR6, R11, 20 */
		/* 82206FB4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000014);
		/* 82206FB4h case    8:*/		return 0x82206FB8;
		  /* 82206FB8h */ case    9:  		/* bc 4, CR6_EQ, 5736 */
		/* 82206FB8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82208620;  }
		/* 82206FB8h case    9:*/		return 0x82206FBC;
		  /* 82206FBCh */ case   10:  		/* lwz R5, <#[R3 + 16]> */
		/* 82206FBCh case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000010) );
		/* 82206FBCh case   10:*/		return 0x82206FC0;
		  /* 82206FC0h */ case   11:  		/* mr R3, R31 */
		/* 82206FC0h case   11:*/		regs.R3 = regs.R31;
		/* 82206FC0h case   11:*/		return 0x82206FC4;
		  /* 82206FC4h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 82206FC4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82206FC4h case   12:*/		return 0x82206FC8;
		  /* 82206FC8h */ case   13:  		/* bc 12, CR6_EQ, 5732 */
		/* 82206FC8h case   13:*/		if ( regs.CR[6].eq ) { return 0x8220862C;  }
		/* 82206FC8h case   13:*/		return 0x82206FCC;
		  /* 82206FCCh */ case   14:  		/* lwz R4, <#[R30 + 20]> */
		/* 82206FCCh case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000014) );
		/* 82206FCCh case   14:*/		return 0x82206FD0;
		  /* 82206FD0h */ case   15:  		/* bl -105840 */
		/* 82206FD0h case   15:*/		regs.LR = 0x82206FD4; return 0x821ED260;
		/* 82206FD0h case   15:*/		return 0x82206FD4;
		  /* 82206FD4h */ case   16:  		/* mr R5, R3 */
		/* 82206FD4h case   16:*/		regs.R5 = regs.R3;
		/* 82206FD4h case   16:*/		return 0x82206FD8;
		  /* 82206FD8h */ case   17:  		/* li R6, 2 */
		/* 82206FD8h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82206FD8h case   17:*/		return 0x82206FDC;
		  /* 82206FDCh */ case   18:  		/* mr R4, R18 */
		/* 82206FDCh case   18:*/		regs.R4 = regs.R18;
		/* 82206FDCh case   18:*/		return 0x82206FE0;
		  /* 82206FE0h */ case   19:  		/* mr R3, R31 */
		/* 82206FE0h case   19:*/		regs.R3 = regs.R31;
		/* 82206FE0h case   19:*/		return 0x82206FE4;
		  /* 82206FE4h */ case   20:  		/* bl -48532 */
		/* 82206FE4h case   20:*/		regs.LR = 0x82206FE8; return 0x821FB250;
		/* 82206FE4h case   20:*/		return 0x82206FE8;
		  /* 82206FE8h */ case   21:  		/* lwz R4, <#[R31 + 564]> */
		/* 82206FE8h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82206FE8h case   21:*/		return 0x82206FEC;
		  /* 82206FECh */ case   22:  		/* mr R6, R3 */
		/* 82206FECh case   22:*/		regs.R6 = regs.R3;
		/* 82206FECh case   22:*/		return 0x82206FF0;
		  /* 82206FF0h */ case   23:  		/* addi R5, R4, 32 */
		/* 82206FF0h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 82206FF0h case   23:*/		return 0x82206FF4;
		  /* 82206FF4h */ case   24:  		/* mr R3, R31 */
		/* 82206FF4h case   24:*/		regs.R3 = regs.R31;
		/* 82206FF4h case   24:*/		return 0x82206FF8;
		  /* 82206FF8h */ case   25:  		/* bl -283352 */
		/* 82206FF8h case   25:*/		regs.LR = 0x82206FFC; return 0x821C1D20;
		/* 82206FF8h case   25:*/		return 0x82206FFC;
		  /* 82206FFCh */ case   26:  		/* mr R7, R31 */
		/* 82206FFCh case   26:*/		regs.R7 = regs.R31;
		/* 82206FFCh case   26:*/		return 0x82207000;
		  /* 82207000h */ case   27:  		/* li R6, 1 */
		/* 82207000h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82207000h case   27:*/		return 0x82207004;
		  /* 82207004h */ case   28:  		/* mr R5, R28 */
		/* 82207004h case   28:*/		regs.R5 = regs.R28;
		/* 82207004h case   28:*/		return 0x82207008;
		  /* 82207008h */ case   29:  		/* li R4, 1 */
		/* 82207008h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82207008h case   29:*/		return 0x8220700C;
		  /* 8220700Ch */ case   30:  		/* mr R27, R3 */
		/* 8220700Ch case   30:*/		regs.R27 = regs.R3;
		/* 8220700Ch case   30:*/		return 0x82207010;
		  /* 82207010h */ case   31:  		/* bl -106984 */
		/* 82207010h case   31:*/		regs.LR = 0x82207014; return 0x821ECE28;
		/* 82207010h case   31:*/		return 0x82207014;
		  /* 82207014h */ case   32:  		/* mr R3, R31 */
		/* 82207014h case   32:*/		regs.R3 = regs.R31;
		/* 82207014h case   32:*/		return 0x82207018;
		  /* 82207018h */ case   33:  		/* bl -102560 */
		/* 82207018h case   33:*/		regs.LR = 0x8220701C; return 0x821EDF78;
		/* 82207018h case   33:*/		return 0x8220701C;
		  /* 8220701Ch */ case   34:  		/* mr R5, R31 */
		/* 8220701Ch case   34:*/		regs.R5 = regs.R31;
		/* 8220701Ch case   34:*/		return 0x82207020;
		  /* 82207020h */ case   35:  		/* mr R4, R28 */
		/* 82207020h case   35:*/		regs.R4 = regs.R28;
		/* 82207020h case   35:*/		return 0x82207024;
		  /* 82207024h */ case   36:  		/* mr R26, R3 */
		/* 82207024h case   36:*/		regs.R26 = regs.R3;
		/* 82207024h case   36:*/		return 0x82207028;
		  /* 82207028h */ case   37:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207028h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207028h case   37:*/		return 0x8220702C;
		  /* 8220702Ch */ case   38:  		/* bl 166580 */
		/* 8220702Ch case   38:*/		regs.LR = 0x82207030; return 0x8222FAE0;
		/* 8220702Ch case   38:*/		return 0x82207030;
		  /* 82207030h */ case   39:  		/* mr R5, R31 */
		/* 82207030h case   39:*/		regs.R5 = regs.R31;
		/* 82207030h case   39:*/		return 0x82207034;
		  /* 82207034h */ case   40:  		/* mr R4, R26 */
		/* 82207034h case   40:*/		regs.R4 = regs.R26;
		/* 82207034h case   40:*/		return 0x82207038;
		  /* 82207038h */ case   41:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207038h case   41:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207038h case   41:*/		return 0x8220703C;
		  /* 8220703Ch */ case   42:  		/* bl 166564 */
		/* 8220703Ch case   42:*/		regs.LR = 0x82207040; return 0x8222FAE0;
		/* 8220703Ch case   42:*/		return 0x82207040;
		  /* 82207040h */ case   43:  		/* addi R5, R30, 4 */
		/* 82207040h case   43:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0x4);
		/* 82207040h case   43:*/		return 0x82207044;
		  /* 82207044h */ case   44:  		/* mr R4, R27 */
		/* 82207044h case   44:*/		regs.R4 = regs.R27;
		/* 82207044h case   44:*/		return 0x82207048;
		  /* 82207048h */ case   45:  		/* mr R3, R31 */
		/* 82207048h case   45:*/		regs.R3 = regs.R31;
		/* 82207048h case   45:*/		return 0x8220704C;
		  /* 8220704Ch */ case   46:  		/* bl -104876 */
		/* 8220704Ch case   46:*/		regs.LR = 0x82207050; return 0x821ED6A0;
		/* 8220704Ch case   46:*/		return 0x82207050;
		  /* 82207050h */ case   47:  		/* stw R26, <#[R31 + 564]> */
		/* 82207050h case   47:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000234) );
		/* 82207050h case   47:*/		return 0x82207054;
	}
	return 0x82207054;
} // Block from 82206F94h-82207054h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82207054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207054);
		  /* 82207054h */ case    0:  		/* addi R3, R1, 104 */
		/* 82207054h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 82207054h case    0:*/		return 0x82207058;
		  /* 82207058h */ case    1:  		/* bl -66080 */
		/* 82207058h case    1:*/		regs.LR = 0x8220705C; return 0x821F6E38;
		/* 82207058h case    1:*/		return 0x8220705C;
		  /* 8220705Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8220705Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220705Ch case    2:*/		return 0x82207060;
		  /* 82207060h */ case    3:  		/* bc 4, CR0_EQ, -176 */
		/* 82207060h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82206FB0;  }
		/* 82207060h case    3:*/		return 0x82207064;
		  /* 82207064h */ case    4:  		/* li R6, 15 */
		/* 82207064h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 82207064h case    4:*/		return 0x82207068;
		  /* 82207068h */ case    5:  		/* lwz R4, <#[R1 + 108]> */
		/* 82207068h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000006C) );
		/* 82207068h case    5:*/		return 0x8220706C;
		  /* 8220706Ch */ case    6:  		/* li R5, 8 */
		/* 8220706Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 8220706Ch case    6:*/		return 0x82207070;
		  /* 82207070h */ case    7:  		/* lwz R3, <#[R1 + 104]> */
		/* 82207070h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000068) );
		/* 82207070h case    7:*/		return 0x82207074;
		  /* 82207074h */ case    8:  		/* bl -631332 */
		/* 82207074h case    8:*/		regs.LR = 0x82207078; return 0x8216CE50;
		/* 82207074h case    8:*/		return 0x82207078;
	}
	return 0x82207078;
} // Block from 82207054h-82207078h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82207078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207078);
		  /* 82207078h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82207078h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207078h case    0:*/		return 0x8220707C;
		  /* 8220707Ch */ case    1:  		/* lwz R30, <#[R31 + 564]> */
		/* 8220707Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 8220707Ch case    1:*/		return 0x82207080;
		  /* 82207080h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82207080h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82207080h case    2:*/		return 0x82207084;
		  /* 82207084h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 82207084h case    3:*/		if ( !regs.CR[0].eq ) { return 0x822070AC;  }
		/* 82207084h case    3:*/		return 0x82207088;
		  /* 82207088h */ case    4:  		/* lwz R11, <#[R19]> */
		/* 82207088h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82207088h case    4:*/		return 0x8220708C;
		  /* 8220708Ch */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8220708Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8220708Ch case    5:*/		return 0x82207090;
		  /* 82207090h */ case    6:  		/* addic. R3, R11, -4 */
		/* 82207090h case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82207090h case    6:*/		return 0x82207094;
		  /* 82207094h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 82207094h case    7:*/		if ( regs.CR[0].eq ) { return 0x822070AC;  }
		/* 82207094h case    7:*/		return 0x82207098;
		  /* 82207098h */ case    8:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207098h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207098h case    8:*/		return 0x8220709C;
		  /* 8220709Ch */ case    9:  		/* lwz R10, <#[R3 + 12]> */
		/* 8220709Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8220709Ch case    9:*/		return 0x822070A0;
		  /* 822070A0h */ case   10:  		/* addi R11, R11, 1 */
		/* 822070A0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822070A0h case   10:*/		return 0x822070A4;
		  /* 822070A4h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 822070A4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822070A4h case   11:*/		return 0x822070A8;
		  /* 822070A8h */ case   12:  		/* bc 4, CR6_GT, 16 */
		/* 822070A8h case   12:*/		if ( !regs.CR[6].gt ) { return 0x822070B8;  }
		/* 822070A8h case   12:*/		return 0x822070AC;
	}
	return 0x822070AC;
} // Block from 82207078h-822070ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 822070ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822070AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822070AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822070AC);
		  /* 822070ACh */ case    0:  		/* li R4, 1 */
		/* 822070ACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822070ACh case    0:*/		return 0x822070B0;
		  /* 822070B0h */ case    1:  		/* mr R3, R19 */
		/* 822070B0h case    1:*/		regs.R3 = regs.R19;
		/* 822070B0h case    1:*/		return 0x822070B4;
		  /* 822070B4h */ case    2:  		/* bl -499692 */
		/* 822070B4h case    2:*/		regs.LR = 0x822070B8; return 0x8218D0C8;
		/* 822070B4h case    2:*/		return 0x822070B8;
	}
	return 0x822070B8;
} // Block from 822070ACh-822070B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822070B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822070B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822070B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822070B8);
		  /* 822070B8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 822070B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822070B8h case    0:*/		return 0x822070BC;
		  /* 822070BCh */ case    1:  		/* addi R10, R11, 4 */
		/* 822070BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 822070BCh case    1:*/		return 0x822070C0;
		  /* 822070C0h */ case    2:  		/* addi R9, R11, 1 */
		/* 822070C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 822070C0h case    2:*/		return 0x822070C4;
		  /* 822070C4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 822070C4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 822070C4h case    3:*/		return 0x822070C8;
		  /* 822070C8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 822070C8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 822070C8h case    4:*/		return 0x822070CC;
		  /* 822070CCh */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 822070CCh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 822070CCh case    5:*/		return 0x822070D0;
		  /* 822070D0h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 822070D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822070D0h case    6:*/		return 0x822070D4;
		  /* 822070D4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822070D4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822070D4h case    7:*/		return 0x822070D8;
		  /* 822070D8h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 822070D8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82207100;  }
		/* 822070D8h case    8:*/		return 0x822070DC;
		  /* 822070DCh */ case    9:  		/* lwz R11, <#[R19]> */
		/* 822070DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822070DCh case    9:*/		return 0x822070E0;
		  /* 822070E0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822070E0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822070E0h case   10:*/		return 0x822070E4;
		  /* 822070E4h */ case   11:  		/* addic. R11, R11, -4 */
		/* 822070E4h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 822070E4h case   11:*/		return 0x822070E8;
		  /* 822070E8h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 822070E8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82207100;  }
		/* 822070E8h case   12:*/		return 0x822070EC;
		  /* 822070ECh */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 822070ECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822070ECh case   13:*/		return 0x822070F0;
		  /* 822070F0h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 822070F0h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 822070F0h case   14:*/		return 0x822070F4;
		  /* 822070F4h */ case   15:  		/* addi R10, R10, 1 */
		/* 822070F4h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822070F4h case   15:*/		return 0x822070F8;
		  /* 822070F8h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 822070F8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 822070F8h case   16:*/		return 0x822070FC;
		  /* 822070FCh */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 822070FCh case   17:*/		if ( !regs.CR[6].gt ) { return 0x82207110;  }
		/* 822070FCh case   17:*/		return 0x82207100;
	}
	return 0x82207100;
} // Block from 822070B8h-82207100h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82207100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207100);
		  /* 82207100h */ case    0:  		/* li R4, 1 */
		/* 82207100h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82207100h case    0:*/		return 0x82207104;
		  /* 82207104h */ case    1:  		/* mr R3, R19 */
		/* 82207104h case    1:*/		regs.R3 = regs.R19;
		/* 82207104h case    1:*/		return 0x82207108;
		  /* 82207108h */ case    2:  		/* bl -499776 */
		/* 82207108h case    2:*/		regs.LR = 0x8220710C; return 0x8218D0C8;
		/* 82207108h case    2:*/		return 0x8220710C;
		  /* 8220710Ch */ case    3:  		/* mr R11, R3 */
		/* 8220710Ch case    3:*/		regs.R11 = regs.R3;
		/* 8220710Ch case    3:*/		return 0x82207110;
	}
	return 0x82207110;
} // Block from 82207100h-82207110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207110);
		  /* 82207110h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82207110h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82207110h case    0:*/		return 0x82207114;
		  /* 82207114h */ case    1:  		/* mr R4, R24 */
		/* 82207114h case    1:*/		regs.R4 = regs.R24;
		/* 82207114h case    1:*/		return 0x82207118;
		  /* 82207118h */ case    2:  		/* mr R3, R21 */
		/* 82207118h case    2:*/		regs.R3 = regs.R21;
		/* 82207118h case    2:*/		return 0x8220711C;
		  /* 8220711Ch */ case    3:  		/* addi R9, R10, 4 */
		/* 8220711Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 8220711Ch case    3:*/		return 0x82207120;
		  /* 82207120h */ case    4:  		/* addi R8, R10, 1 */
		/* 82207120h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82207120h case    4:*/		return 0x82207124;
		  /* 82207124h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82207124h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82207124h case    5:*/		return 0x82207128;
		  /* 82207128h */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 82207128h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82207128h case    6:*/		return 0x8220712C;
		  /* 8220712Ch */ case    7:  		/* stwx R29, <#[R10 + R11]> */
		/* 8220712Ch case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220712Ch case    7:*/		return 0x82207130;
		  /* 82207130h */ case    8:  		/* bl -64704 */
		/* 82207130h case    8:*/		regs.LR = 0x82207134; return 0x821F7470;
		/* 82207130h case    8:*/		return 0x82207134;
		  /* 82207134h */ case    9:  		/* mr R29, R16 */
		/* 82207134h case    9:*/		regs.R29 = regs.R16;
		/* 82207134h case    9:*/		return 0x82207138;
		  /* 82207138h */ case   10:  		/* stw R28, <#[R31 + 564]> */
		/* 82207138h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000234) );
		/* 82207138h case   10:*/		return 0x8220713C;
		  /* 8220713Ch */ case   11:  		/* stw R29, <#[R1 + 96]> */
		/* 8220713Ch case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 8220713Ch case   11:*/		return 0x82207140;
		  /* 82207140h */ case   12:  		/* lwz R24, <#[R23 + 28]> */
		/* 82207140h case   12:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000001C) );
		/* 82207140h case   12:*/		return 0x82207144;
		  /* 82207144h */ case   13:  		/* b 2944 */
		/* 82207144h case   13:*/		return 0x82207CC4;
		/* 82207144h case   13:*/		return 0x82207148;
		  /* 82207148h */ case   14:  		/* lwz R11, <#[R23 + 32]> */
		/* 82207148h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 82207148h case   14:*/		return 0x8220714C;
		  /* 8220714Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8220714Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220714Ch case   15:*/		return 0x82207150;
		  /* 82207150h */ case   16:  		/* bc 4, CR6_EQ, 5348 */
		/* 82207150h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82208634;  }
		/* 82207150h case   16:*/		return 0x82207154;
		  /* 82207154h */ case   17:  		/* stw R16, <#[R1 + 92]> */
		/* 82207154h case   17:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207154h case   17:*/		return 0x82207158;
		  /* 82207158h */ case   18:  		/* li R10, 0 */
		/* 82207158h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82207158h case   18:*/		return 0x8220715C;
		  /* 8220715Ch */ case   19:  		/* stw R16, <#[R1 + 84]> */
		/* 8220715Ch case   19:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 8220715Ch case   19:*/		return 0x82207160;
		  /* 82207160h */ case   20:  		/* li R9, 0 */
		/* 82207160h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82207160h case   20:*/		return 0x82207164;
		  /* 82207164h */ case   21:  		/* li R8, 0 */
		/* 82207164h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207164h case   21:*/		return 0x82207168;
		  /* 82207168h */ case   22:  		/* li R7, 11 */
		/* 82207168h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0xB);
		/* 82207168h case   22:*/		return 0x8220716C;
		  /* 8220716Ch */ case   23:  		/* li R6, 10 */
		/* 8220716Ch case   23:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8220716Ch case   23:*/		return 0x82207170;
		  /* 82207170h */ case   24:  		/* li R5, 9 */
		/* 82207170h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82207170h case   24:*/		return 0x82207174;
		  /* 82207174h */ case   25:  		/* li R4, 2 */
		/* 82207174h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82207174h case   25:*/		return 0x82207178;
		  /* 82207178h */ case   26:  		/* li R3, 1 */
		/* 82207178h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82207178h case   26:*/		return 0x8220717C;
		  /* 8220717Ch */ case   27:  		/* bl -112308 */
		/* 8220717Ch case   27:*/		regs.LR = 0x82207180; return 0x821EBAC8;
		/* 8220717Ch case   27:*/		return 0x82207180;
		  /* 82207180h */ case   28:  		/* mr R5, R3 */
		/* 82207180h case   28:*/		regs.R5 = regs.R3;
		/* 82207180h case   28:*/		return 0x82207184;
		  /* 82207184h */ case   29:  		/* mr R4, R17 */
		/* 82207184h case   29:*/		regs.R4 = regs.R17;
		/* 82207184h case   29:*/		return 0x82207188;
		  /* 82207188h */ case   30:  		/* mr R3, R31 */
		/* 82207188h case   30:*/		regs.R3 = regs.R31;
		/* 82207188h case   30:*/		return 0x8220718C;
		  /* 8220718Ch */ case   31:  		/* li R6, 0 */
		/* 8220718Ch case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220718Ch case   31:*/		return 0x82207190;
		  /* 82207190h */ case   32:  		/* li R7, 3 */
		/* 82207190h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82207190h case   32:*/		return 0x82207194;
		  /* 82207194h */ case   33:  		/* addi R8, R1, 100 */
		/* 82207194h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82207194h case   33:*/		return 0x82207198;
		  /* 82207198h */ case   34:  		/* addi R9, R1, 96 */
		/* 82207198h case   34:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82207198h case   34:*/		return 0x8220719C;
		  /* 8220719Ch */ case   35:  		/* addi R10, R1, 272 */
		/* 8220719Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x110);
		/* 8220719Ch case   35:*/		return 0x822071A0;
		  /* 822071A0h */ case   36:  		/* bl -57464 */
		/* 822071A0h case   36:*/		regs.LR = 0x822071A4; return 0x821F9128;
		/* 822071A0h case   36:*/		return 0x822071A4;
		  /* 822071A4h */ case   37:  		/* mr R3, R31 */
		/* 822071A4h case   37:*/		regs.R3 = regs.R31;
		/* 822071A4h case   37:*/		return 0x822071A8;
		  /* 822071A8h */ case   38:  		/* lwz R24, <#[R23 + 28]> */
		/* 822071A8h case   38:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000001C) );
		/* 822071A8h case   38:*/		return 0x822071AC;
		  /* 822071ACh */ case   39:  		/* lwz R25, <#[R23 + 40]> */
		/* 822071ACh case   39:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R23 + 0x00000028) );
		/* 822071ACh case   39:*/		return 0x822071B0;
		  /* 822071B0h */ case   40:  		/* bl -102968 */
		/* 822071B0h case   40:*/		regs.LR = 0x822071B4; return 0x821EDF78;
		/* 822071B0h case   40:*/		return 0x822071B4;
		  /* 822071B4h */ case   41:  		/* mr R29, R3 */
		/* 822071B4h case   41:*/		regs.R29 = regs.R3;
		/* 822071B4h case   41:*/		return 0x822071B8;
		  /* 822071B8h */ case   42:  		/* mr R3, R31 */
		/* 822071B8h case   42:*/		regs.R3 = regs.R31;
		/* 822071B8h case   42:*/		return 0x822071BC;
		  /* 822071BCh */ case   43:  		/* bl -102980 */
		/* 822071BCh case   43:*/		regs.LR = 0x822071C0; return 0x821EDF78;
		/* 822071BCh case   43:*/		return 0x822071C0;
		  /* 822071C0h */ case   44:  		/* mr R26, R3 */
		/* 822071C0h case   44:*/		regs.R26 = regs.R3;
		/* 822071C0h case   44:*/		return 0x822071C4;
		  /* 822071C4h */ case   45:  		/* mr R3, R31 */
		/* 822071C4h case   45:*/		regs.R3 = regs.R31;
		/* 822071C4h case   45:*/		return 0x822071C8;
		  /* 822071C8h */ case   46:  		/* bl -102992 */
		/* 822071C8h case   46:*/		regs.LR = 0x822071CC; return 0x821EDF78;
		/* 822071C8h case   46:*/		return 0x822071CC;
		  /* 822071CCh */ case   47:  		/* mr R27, R3 */
		/* 822071CCh case   47:*/		regs.R27 = regs.R3;
		/* 822071CCh case   47:*/		return 0x822071D0;
		  /* 822071D0h */ case   48:  		/* mr R3, R31 */
		/* 822071D0h case   48:*/		regs.R3 = regs.R31;
		/* 822071D0h case   48:*/		return 0x822071D4;
		  /* 822071D4h */ case   49:  		/* bl -103004 */
		/* 822071D4h case   49:*/		regs.LR = 0x822071D8; return 0x821EDF78;
		/* 822071D4h case   49:*/		return 0x822071D8;
		  /* 822071D8h */ case   50:  		/* lwz R11, <#[R20]> */
		/* 822071D8h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822071D8h case   50:*/		return 0x822071DC;
		  /* 822071DCh */ case   51:  		/* mr R28, R3 */
		/* 822071DCh case   51:*/		regs.R28 = regs.R3;
		/* 822071DCh case   51:*/		return 0x822071E0;
		  /* 822071E0h */ case   52:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822071E0h case   52:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822071E0h case   52:*/		return 0x822071E4;
		  /* 822071E4h */ case   53:  		/* bc 4, CR0_EQ, 40 */
		/* 822071E4h case   53:*/		if ( !regs.CR[0].eq ) { return 0x8220720C;  }
		/* 822071E4h case   53:*/		return 0x822071E8;
		  /* 822071E8h */ case   54:  		/* lwz R11, <#[R19]> */
		/* 822071E8h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822071E8h case   54:*/		return 0x822071EC;
		  /* 822071ECh */ case   55:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822071ECh case   55:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822071ECh case   55:*/		return 0x822071F0;
		  /* 822071F0h */ case   56:  		/* addic. R3, R11, -4 */
		/* 822071F0h case   56:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 822071F0h case   56:*/		return 0x822071F4;
		  /* 822071F4h */ case   57:  		/* bc 12, CR0_EQ, 24 */
		/* 822071F4h case   57:*/		if ( regs.CR[0].eq ) { return 0x8220720C;  }
		/* 822071F4h case   57:*/		return 0x822071F8;
		  /* 822071F8h */ case   58:  		/* lwz R11, <#[R3 + 8]> */
		/* 822071F8h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822071F8h case   58:*/		return 0x822071FC;
		  /* 822071FCh */ case   59:  		/* lwz R10, <#[R3 + 12]> */
		/* 822071FCh case   59:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 822071FCh case   59:*/		return 0x82207200;
		  /* 82207200h */ case   60:  		/* addi R11, R11, 1 */
		/* 82207200h case   60:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82207200h case   60:*/		return 0x82207204;
		  /* 82207204h */ case   61:  		/* cmplw CR6, R11, R10 */
		/* 82207204h case   61:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82207204h case   61:*/		return 0x82207208;
		  /* 82207208h */ case   62:  		/* bc 4, CR6_GT, 16 */
		/* 82207208h case   62:*/		if ( !regs.CR[6].gt ) { return 0x82207218;  }
		/* 82207208h case   62:*/		return 0x8220720C;
	}
	return 0x8220720C;
} // Block from 82207110h-8220720Ch (63 instructions)

//////////////////////////////////////////////////////
// Block at 8220720Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220720C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220720C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220720C);
		  /* 8220720Ch */ case    0:  		/* li R4, 1 */
		/* 8220720Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8220720Ch case    0:*/		return 0x82207210;
		  /* 82207210h */ case    1:  		/* mr R3, R19 */
		/* 82207210h case    1:*/		regs.R3 = regs.R19;
		/* 82207210h case    1:*/		return 0x82207214;
		  /* 82207214h */ case    2:  		/* bl -500044 */
		/* 82207214h case    2:*/		regs.LR = 0x82207218; return 0x8218D0C8;
		/* 82207214h case    2:*/		return 0x82207218;
	}
	return 0x82207218;
} // Block from 8220720Ch-82207218h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207218);
		  /* 82207218h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207218h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207218h case    0:*/		return 0x8220721C;
		  /* 8220721Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 8220721Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8220721Ch case    1:*/		return 0x82207220;
		  /* 82207220h */ case    2:  		/* addi R9, R11, 1 */
		/* 82207220h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82207220h case    2:*/		return 0x82207224;
		  /* 82207224h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82207224h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82207224h case    3:*/		return 0x82207228;
		  /* 82207228h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82207228h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82207228h case    4:*/		return 0x8220722C;
		  /* 8220722Ch */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 8220722Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8220722Ch case    5:*/		return 0x82207230;
		  /* 82207230h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82207230h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207230h case    6:*/		return 0x82207234;
		  /* 82207234h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82207234h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82207234h case    7:*/		return 0x82207238;
		  /* 82207238h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82207238h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82207260;  }
		/* 82207238h case    8:*/		return 0x8220723C;
		  /* 8220723Ch */ case    9:  		/* lwz R11, <#[R19]> */
		/* 8220723Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8220723Ch case    9:*/		return 0x82207240;
		  /* 82207240h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207240h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207240h case   10:*/		return 0x82207244;
		  /* 82207244h */ case   11:  		/* addic. R11, R11, -4 */
		/* 82207244h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82207244h case   11:*/		return 0x82207248;
		  /* 82207248h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82207248h case   12:*/		if ( regs.CR[0].eq ) { return 0x82207260;  }
		/* 82207248h case   12:*/		return 0x8220724C;
		  /* 8220724Ch */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 8220724Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8220724Ch case   13:*/		return 0x82207250;
		  /* 82207250h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82207250h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82207250h case   14:*/		return 0x82207254;
		  /* 82207254h */ case   15:  		/* addi R10, R10, 1 */
		/* 82207254h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82207254h case   15:*/		return 0x82207258;
		  /* 82207258h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 82207258h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82207258h case   16:*/		return 0x8220725C;
		  /* 8220725Ch */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 8220725Ch case   17:*/		if ( !regs.CR[6].gt ) { return 0x82207270;  }
		/* 8220725Ch case   17:*/		return 0x82207260;
	}
	return 0x82207260;
} // Block from 82207218h-82207260h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82207260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207260);
		  /* 82207260h */ case    0:  		/* li R4, 1 */
		/* 82207260h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82207260h case    0:*/		return 0x82207264;
		  /* 82207264h */ case    1:  		/* mr R3, R19 */
		/* 82207264h case    1:*/		regs.R3 = regs.R19;
		/* 82207264h case    1:*/		return 0x82207268;
		  /* 82207268h */ case    2:  		/* bl -500128 */
		/* 82207268h case    2:*/		regs.LR = 0x8220726C; return 0x8218D0C8;
		/* 82207268h case    2:*/		return 0x8220726C;
		  /* 8220726Ch */ case    3:  		/* mr R11, R3 */
		/* 8220726Ch case    3:*/		regs.R11 = regs.R3;
		/* 8220726Ch case    3:*/		return 0x82207270;
	}
	return 0x82207270;
} // Block from 82207260h-82207270h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207270);
		  /* 82207270h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82207270h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82207270h case    0:*/		return 0x82207274;
		  /* 82207274h */ case    1:  		/* mr R3, R21 */
		/* 82207274h case    1:*/		regs.R3 = regs.R21;
		/* 82207274h case    1:*/		return 0x82207278;
		  /* 82207278h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 82207278h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82207278h case    2:*/		return 0x8220727C;
		  /* 8220727Ch */ case    3:  		/* addi R8, R10, 4 */
		/* 8220727Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8220727Ch case    3:*/		return 0x82207280;
		  /* 82207280h */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 82207280h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 82207280h case    4:*/		return 0x82207284;
		  /* 82207284h */ case    5:  		/* addi R7, R10, 1 */
		/* 82207284h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82207284h case    5:*/		return 0x82207288;
		  /* 82207288h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82207288h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82207288h case    6:*/		return 0x8220728C;
		  /* 8220728Ch */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 8220728Ch case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 8220728Ch case    7:*/		return 0x82207290;
		  /* 82207290h */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 82207290h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82207290h case    8:*/		return 0x82207294;
		  /* 82207294h */ case    9:  		/* bl -65060 */
		/* 82207294h case    9:*/		regs.LR = 0x82207298; return 0x821F7470;
		/* 82207294h case    9:*/		return 0x82207298;
		  /* 82207298h */ case   10:  		/* lwz R3, <#[R31 + 584]> */
		/* 82207298h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 82207298h case   10:*/		return 0x8220729C;
		  /* 8220729Ch */ case   11:  		/* bl -67204 */
		/* 8220729Ch case   11:*/		regs.LR = 0x822072A0; return 0x821F6C18;
		/* 8220729Ch case   11:*/		return 0x822072A0;
		  /* 822072A0h */ case   12:  		/* mr R11, R3 */
		/* 822072A0h case   12:*/		regs.R11 = regs.R3;
		/* 822072A0h case   12:*/		return 0x822072A4;
		  /* 822072A4h */ case   13:  		/* li R5, 12 */
		/* 822072A4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 822072A4h case   13:*/		return 0x822072A8;
		  /* 822072A8h */ case   14:  		/* mr R4, R23 */
		/* 822072A8h case   14:*/		regs.R4 = regs.R23;
		/* 822072A8h case   14:*/		return 0x822072AC;
		  /* 822072ACh */ case   15:  		/* mr R3, R21 */
		/* 822072ACh case   15:*/		regs.R3 = regs.R21;
		/* 822072ACh case   15:*/		return 0x822072B0;
		  /* 822072B0h */ case   16:  		/* stw R15, <#[R11]> */
		/* 822072B0h case   16:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R11 + 0x00000000) );
		/* 822072B0h case   16:*/		return 0x822072B4;
		  /* 822072B4h */ case   17:  		/* stw R29, <#[R11 + 4]> */
		/* 822072B4h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 822072B4h case   17:*/		return 0x822072B8;
		  /* 822072B8h */ case   18:  		/* stw R28, <#[R11 + 8]> */
		/* 822072B8h case   18:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 822072B8h case   18:*/		return 0x822072BC;
		  /* 822072BCh */ case   19:  		/* bl -64700 */
		/* 822072BCh case   19:*/		regs.LR = 0x822072C0; return 0x821F7600;
		/* 822072BCh case   19:*/		return 0x822072C0;
		  /* 822072C0h */ case   20:  		/* lwz R5, <#[R23 + 20]> */
		/* 822072C0h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000014) );
		/* 822072C0h case   20:*/		return 0x822072C4;
		  /* 822072C4h */ case   21:  		/* cmplwi CR6, R5, 0 */
		/* 822072C4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 822072C4h case   21:*/		return 0x822072C8;
		  /* 822072C8h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 822072C8h case   22:*/		if ( regs.CR[6].eq ) { return 0x822072DC;  }
		/* 822072C8h case   22:*/		return 0x822072CC;
		  /* 822072CCh */ case   23:  		/* li R6, 0 */
		/* 822072CCh case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822072CCh case   23:*/		return 0x822072D0;
		  /* 822072D0h */ case   24:  		/* mr R4, R18 */
		/* 822072D0h case   24:*/		regs.R4 = regs.R18;
		/* 822072D0h case   24:*/		return 0x822072D4;
		  /* 822072D4h */ case   25:  		/* mr R3, R31 */
		/* 822072D4h case   25:*/		regs.R3 = regs.R31;
		/* 822072D4h case   25:*/		return 0x822072D8;
		  /* 822072D8h */ case   26:  		/* bl -49288 */
		/* 822072D8h case   26:*/		regs.LR = 0x822072DC; return 0x821FB250;
		/* 822072D8h case   26:*/		return 0x822072DC;
	}
	return 0x822072DC;
} // Block from 82207270h-822072DCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 822072DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822072DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822072DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822072DC);
		  /* 822072DCh */ case    0:  		/* mr R5, R31 */
		/* 822072DCh case    0:*/		regs.R5 = regs.R31;
		/* 822072DCh case    0:*/		return 0x822072E0;
		  /* 822072E0h */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 822072E0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822072E0h case    1:*/		return 0x822072E4;
		  /* 822072E4h */ case    2:  		/* mr R4, R26 */
		/* 822072E4h case    2:*/		regs.R4 = regs.R26;
		/* 822072E4h case    2:*/		return 0x822072E8;
		  /* 822072E8h */ case    3:  		/* bl 165880 */
		/* 822072E8h case    3:*/		regs.LR = 0x822072EC; return 0x8222FAE0;
		/* 822072E8h case    3:*/		return 0x822072EC;
		  /* 822072ECh */ case    4:  		/* stw R26, <#[R31 + 564]> */
		/* 822072ECh case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000234) );
		/* 822072ECh case    4:*/		return 0x822072F0;
		  /* 822072F0h */ case    5:  		/* addi R5, R1, 272 */
		/* 822072F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 822072F0h case    5:*/		return 0x822072F4;
		  /* 822072F4h */ case    6:  		/* mr R4, R18 */
		/* 822072F4h case    6:*/		regs.R4 = regs.R18;
		/* 822072F4h case    6:*/		return 0x822072F8;
		  /* 822072F8h */ case    7:  		/* mr R3, R31 */
		/* 822072F8h case    7:*/		regs.R3 = regs.R31;
		/* 822072F8h case    7:*/		return 0x822072FC;
		  /* 822072FCh */ case    8:  		/* bl -10420 */
		/* 822072FCh case    8:*/		regs.LR = 0x82207300; return 0x82204A48;
		/* 822072FCh case    8:*/		return 0x82207300;
		  /* 82207300h */ case    9:  		/* lwz R5, <#[R23 + 24]> */
		/* 82207300h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000018) );
		/* 82207300h case    9:*/		return 0x82207304;
		  /* 82207304h */ case   10:  		/* cmplwi CR6, R5, 0 */
		/* 82207304h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82207304h case   10:*/		return 0x82207308;
		  /* 82207308h */ case   11:  		/* bc 12, CR6_EQ, 200 */
		/* 82207308h case   11:*/		if ( regs.CR[6].eq ) { return 0x822073D0;  }
		/* 82207308h case   11:*/		return 0x8220730C;
		  /* 8220730Ch */ case   12:  		/* li R6, 2 */
		/* 8220730Ch case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8220730Ch case   12:*/		return 0x82207310;
		  /* 82207310h */ case   13:  		/* mr R4, R18 */
		/* 82207310h case   13:*/		regs.R4 = regs.R18;
		/* 82207310h case   13:*/		return 0x82207314;
		  /* 82207314h */ case   14:  		/* mr R3, R31 */
		/* 82207314h case   14:*/		regs.R3 = regs.R31;
		/* 82207314h case   14:*/		return 0x82207318;
		  /* 82207318h */ case   15:  		/* bl -49352 */
		/* 82207318h case   15:*/		regs.LR = 0x8220731C; return 0x821FB250;
		/* 82207318h case   15:*/		return 0x8220731C;
		  /* 8220731Ch */ case   16:  		/* or. R6, R3, R3 */
		/* 8220731Ch case   16:*/		cpu::op::or<1>(regs,&regs.R6,regs.R3,regs.R3);
		/* 8220731Ch case   16:*/		return 0x82207320;
		  /* 82207320h */ case   17:  		/* bc 12, CR0_EQ, 176 */
		/* 82207320h case   17:*/		if ( regs.CR[0].eq ) { return 0x822073D0;  }
		/* 82207320h case   17:*/		return 0x82207324;
		  /* 82207324h */ case   18:  		/* lwz R4, <#[R31 + 564]> */
		/* 82207324h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82207324h case   18:*/		return 0x82207328;
		  /* 82207328h */ case   19:  		/* mr R3, R31 */
		/* 82207328h case   19:*/		regs.R3 = regs.R31;
		/* 82207328h case   19:*/		return 0x8220732C;
		  /* 8220732Ch */ case   20:  		/* addi R5, R4, 32 */
		/* 8220732Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 8220732Ch case   20:*/		return 0x82207330;
		  /* 82207330h */ case   21:  		/* bl -284176 */
		/* 82207330h case   21:*/		regs.LR = 0x82207334; return 0x821C1D20;
		/* 82207330h case   21:*/		return 0x82207334;
		  /* 82207334h */ case   22:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207334h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207334h case   22:*/		return 0x82207338;
		  /* 82207338h */ case   23:  		/* mr R5, R31 */
		/* 82207338h case   23:*/		regs.R5 = regs.R31;
		/* 82207338h case   23:*/		return 0x8220733C;
		  /* 8220733Ch */ case   24:  		/* rlwimi R11, R15, 17, 13, 14 */
		/* 8220733Ch case   24:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R11,regs.R15);
		/* 8220733Ch case   24:*/		return 0x82207340;
		  /* 82207340h */ case   25:  		/* mr R4, R29 */
		/* 82207340h case   25:*/		regs.R4 = regs.R29;
		/* 82207340h case   25:*/		return 0x82207344;
		  /* 82207344h */ case   26:  		/* stw R11, <#[R3 + 8]> */
		/* 82207344h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207344h case   26:*/		return 0x82207348;
		  /* 82207348h */ case   27:  		/* mr R30, R3 */
		/* 82207348h case   27:*/		regs.R30 = regs.R3;
		/* 82207348h case   27:*/		return 0x8220734C;
		  /* 8220734Ch */ case   28:  		/* bl -617556 */
		/* 8220734Ch case   28:*/		regs.LR = 0x82207350; return 0x821706F8;
		/* 8220734Ch case   28:*/		return 0x82207350;
		  /* 82207350h */ case   29:  		/* mr R5, R31 */
		/* 82207350h case   29:*/		regs.R5 = regs.R31;
		/* 82207350h case   29:*/		return 0x82207354;
		  /* 82207354h */ case   30:  		/* mr R4, R29 */
		/* 82207354h case   30:*/		regs.R4 = regs.R29;
		/* 82207354h case   30:*/		return 0x82207358;
		  /* 82207358h */ case   31:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207358h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207358h case   31:*/		return 0x8220735C;
		  /* 8220735Ch */ case   32:  		/* bl 165764 */
		/* 8220735Ch case   32:*/		regs.LR = 0x82207360; return 0x8222FAE0;
		/* 8220735Ch case   32:*/		return 0x82207360;
		  /* 82207360h */ case   33:  		/* mr R5, R31 */
		/* 82207360h case   33:*/		regs.R5 = regs.R31;
		/* 82207360h case   33:*/		return 0x82207364;
		  /* 82207364h */ case   34:  		/* mr R4, R27 */
		/* 82207364h case   34:*/		regs.R4 = regs.R27;
		/* 82207364h case   34:*/		return 0x82207368;
		  /* 82207368h */ case   35:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207368h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207368h case   35:*/		return 0x8220736C;
		  /* 8220736Ch */ case   36:  		/* bl 165748 */
		/* 8220736Ch case   36:*/		regs.LR = 0x82207370; return 0x8222FAE0;
		/* 8220736Ch case   36:*/		return 0x82207370;
		  /* 82207370h */ case   37:  		/* addi R5, R1, 272 */
		/* 82207370h case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 82207370h case   37:*/		return 0x82207374;
		  /* 82207374h */ case   38:  		/* mr R4, R30 */
		/* 82207374h case   38:*/		regs.R4 = regs.R30;
		/* 82207374h case   38:*/		return 0x82207378;
		  /* 82207378h */ case   39:  		/* mr R3, R31 */
		/* 82207378h case   39:*/		regs.R3 = regs.R31;
		/* 82207378h case   39:*/		return 0x8220737C;
		  /* 8220737Ch */ case   40:  		/* bl -105692 */
		/* 8220737Ch case   40:*/		regs.LR = 0x82207380; return 0x821ED6A0;
		/* 8220737Ch case   40:*/		return 0x82207380;
		  /* 82207380h */ case   41:  		/* lwz R11, <#[R30 + 8]> */
		/* 82207380h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82207380h case   41:*/		return 0x82207384;
		  /* 82207384h */ case   42:  		/* mr R3, R31 */
		/* 82207384h case   42:*/		regs.R3 = regs.R31;
		/* 82207384h case   42:*/		return 0x82207388;
		  /* 82207388h */ case   43:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82207388h case   43:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82207388h case   43:*/		return 0x8220738C;
		  /* 8220738Ch */ case   44:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8220738Ch case   44:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8220738Ch case   44:*/		return 0x82207390;
		  /* 82207390h */ case   45:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82207390h case   45:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82207390h case   45:*/		return 0x82207394;
		  /* 82207394h */ case   46:  		/* bl -667492 */
		/* 82207394h case   46:*/		regs.LR = 0x82207398; return 0x82164430;
		/* 82207394h case   46:*/		return 0x82207398;
		  /* 82207398h */ case   47:  		/* addi R11, R30, -16 */
		/* 82207398h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 82207398h case   47:*/		return 0x8220739C;
		  /* 8220739Ch */ case   48:  		/* add R10, R3, R11 */
		/* 8220739Ch case   48:*/		cpu::op::add<0>(regs,&regs.R10,regs.R3,regs.R11);
		/* 8220739Ch case   48:*/		return 0x822073A0;
		  /* 822073A0h */ case   49:  		/* lwz R11, <#[R10 + 8]> */
		/* 822073A0h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 822073A0h case   49:*/		return 0x822073A4;
		  /* 822073A4h */ case   50:  		/* rlwinm. R9, R11, 0, 30, 31 */
		/* 822073A4h case   50:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R11);
		/* 822073A4h case   50:*/		return 0x822073A8;
		  /* 822073A8h */ case   51:  		/* bc 4, CR0_EQ, 24 */
		/* 822073A8h case   51:*/		if ( !regs.CR[0].eq ) { return 0x822073C0;  }
		/* 822073A8h case   51:*/		return 0x822073AC;
		  /* 822073ACh */ case   52:  		/* rlwinm. R9, R11, 30, 28, 31 */
		/* 822073ACh case   52:*/		cpu::op::rlwinm<1,30,28,31>(regs,&regs.R9,regs.R11);
		/* 822073ACh case   52:*/		return 0x822073B0;
		  /* 822073B0h */ case   53:  		/* bc 4, CR0_EQ, 16 */
		/* 822073B0h case   53:*/		if ( !regs.CR[0].eq ) { return 0x822073C0;  }
		/* 822073B0h case   53:*/		return 0x822073B4;
		  /* 822073B4h */ case   54:  		/* li R9, 29 */
		/* 822073B4h case   54:*/		cpu::op::li<0>(regs,&regs.R9,0x1D);
		/* 822073B4h case   54:*/		return 0x822073B8;
		  /* 822073B8h */ case   55:  		/* rlwimi R11, R9, 3, 23, 31 */
		/* 822073B8h case   55:*/		cpu::op::rlwimi<0,3,23,31>(regs,&regs.R11,regs.R9);
		/* 822073B8h case   55:*/		return 0x822073BC;
		  /* 822073BCh */ case   56:  		/* stw R11, <#[R10 + 8]> */
		/* 822073BCh case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 822073BCh case   56:*/		return 0x822073C0;
	}
	return 0x822073C0;
} // Block from 822072DCh-822073C0h (57 instructions)

//////////////////////////////////////////////////////
// Block at 822073C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822073C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822073C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822073C0);
		  /* 822073C0h */ case    0:  		/* lwz R11, <#[R10 + 12]> */
		/* 822073C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 822073C0h case    0:*/		return 0x822073C4;
		  /* 822073C4h */ case    1:  		/* ori R11, R11, 8 */
		/* 822073C4h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 822073C4h case    1:*/		return 0x822073C8;
		  /* 822073C8h */ case    2:  		/* stw R11, <#[R10 + 12]> */
		/* 822073C8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 822073C8h case    2:*/		return 0x822073CC;
		  /* 822073CCh */ case    3:  		/* b 88 */
		/* 822073CCh case    3:*/		return 0x82207424;
		/* 822073CCh case    3:*/		return 0x822073D0;
	}
	return 0x822073D0;
} // Block from 822073C0h-822073D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822073D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822073D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822073D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822073D0);
		  /* 822073D0h */ case    0:  		/* stw R16, <#[R1 + 84]> */
		/* 822073D0h case    0:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 822073D0h case    0:*/		return 0x822073D4;
		  /* 822073D4h */ case    1:  		/* li R10, 0 */
		/* 822073D4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822073D4h case    1:*/		return 0x822073D8;
		  /* 822073D8h */ case    2:  		/* stw R16, <#[R1 + 92]> */
		/* 822073D8h case    2:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 822073D8h case    2:*/		return 0x822073DC;
		  /* 822073DCh */ case    3:  		/* li R9, 0 */
		/* 822073DCh case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822073DCh case    3:*/		return 0x822073E0;
		  /* 822073E0h */ case    4:  		/* li R8, 0 */
		/* 822073E0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822073E0h case    4:*/		return 0x822073E4;
		  /* 822073E4h */ case    5:  		/* li R7, 0 */
		/* 822073E4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822073E4h case    5:*/		return 0x822073E8;
		  /* 822073E8h */ case    6:  		/* li R6, 0 */
		/* 822073E8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822073E8h case    6:*/		return 0x822073EC;
		  /* 822073ECh */ case    7:  		/* li R5, 0 */
		/* 822073ECh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822073ECh case    7:*/		return 0x822073F0;
		  /* 822073F0h */ case    8:  		/* li R4, 10 */
		/* 822073F0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 822073F0h case    8:*/		return 0x822073F4;
		  /* 822073F4h */ case    9:  		/* li R3, 9 */
		/* 822073F4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x9);
		/* 822073F4h case    9:*/		return 0x822073F8;
		  /* 822073F8h */ case   10:  		/* bl -112944 */
		/* 822073F8h case   10:*/		regs.LR = 0x822073FC; return 0x821EBAC8;
		/* 822073F8h case   10:*/		return 0x822073FC;
		  /* 822073FCh */ case   11:  		/* lwz R11, <#[R1 + 272]> */
		/* 822073FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 822073FCh case   11:*/		return 0x82207400;
		  /* 82207400h */ case   12:  		/* and. R11, R3, R11 */
		/* 82207400h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82207400h case   12:*/		return 0x82207404;
		  /* 82207404h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82207404h case   13:*/		if ( regs.CR[0].eq ) { return 0x82207414;  }
		/* 82207404h case   13:*/		return 0x82207408;
		  /* 82207408h */ case   14:  		/* li R4, 3584 */
		/* 82207408h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0xE00);
		/* 82207408h case   14:*/		return 0x8220740C;
		  /* 8220740Ch */ case   15:  		/* mr R3, R31 */
		/* 8220740Ch case   15:*/		regs.R3 = regs.R31;
		/* 8220740Ch case   15:*/		return 0x82207410;
		  /* 82207410h */ case   16:  		/* bl -743064 */
		/* 82207410h case   16:*/		regs.LR = 0x82207414; return 0x82151D78;
		/* 82207410h case   16:*/		return 0x82207414;
	}
	return 0x82207414;
} // Block from 822073D0h-82207414h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82207414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207414);
		  /* 82207414h */ case    0:  		/* mr R5, R31 */
		/* 82207414h case    0:*/		regs.R5 = regs.R31;
		/* 82207414h case    0:*/		return 0x82207418;
		  /* 82207418h */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207418h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207418h case    1:*/		return 0x8220741C;
		  /* 8220741Ch */ case    2:  		/* mr R4, R27 */
		/* 8220741Ch case    2:*/		regs.R4 = regs.R27;
		/* 8220741Ch case    2:*/		return 0x82207420;
		  /* 82207420h */ case    3:  		/* bl 165568 */
		/* 82207420h case    3:*/		regs.LR = 0x82207424; return 0x8222FAE0;
		/* 82207420h case    3:*/		return 0x82207424;
	}
	return 0x82207424;
} // Block from 82207414h-82207424h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207424);
		  /* 82207424h */ case    0:  		/* stw R28, <#[R31 + 564]> */
		/* 82207424h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000234) );
		/* 82207424h case    0:*/		return 0x82207428;
		  /* 82207428h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 82207428h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82207428h case    1:*/		return 0x8220742C;
		  /* 8220742Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8220742Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82207444;  }
		/* 8220742Ch case    2:*/		return 0x82207430;
		  /* 82207430h */ case    3:  		/* li R6, 0 */
		/* 82207430h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82207430h case    3:*/		return 0x82207434;
		  /* 82207434h */ case    4:  		/* mr R5, R25 */
		/* 82207434h case    4:*/		regs.R5 = regs.R25;
		/* 82207434h case    4:*/		return 0x82207438;
		  /* 82207438h */ case    5:  		/* mr R4, R18 */
		/* 82207438h case    5:*/		regs.R4 = regs.R18;
		/* 82207438h case    5:*/		return 0x8220743C;
		  /* 8220743Ch */ case    6:  		/* mr R3, R31 */
		/* 8220743Ch case    6:*/		regs.R3 = regs.R31;
		/* 8220743Ch case    6:*/		return 0x82207440;
		  /* 82207440h */ case    7:  		/* bl -49648 */
		/* 82207440h case    7:*/		regs.LR = 0x82207444; return 0x821FB250;
		/* 82207440h case    7:*/		return 0x82207444;
	}
	return 0x82207444;
} // Block from 82207424h-82207444h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82207444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207444);
		  /* 82207444h */ case    0:  		/* mr R5, R31 */
		/* 82207444h case    0:*/		regs.R5 = regs.R31;
		/* 82207444h case    0:*/		return 0x82207448;
		  /* 82207448h */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207448h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207448h case    1:*/		return 0x8220744C;
		  /* 8220744Ch */ case    2:  		/* mr R4, R26 */
		/* 8220744Ch case    2:*/		regs.R4 = regs.R26;
		/* 8220744Ch case    2:*/		return 0x82207450;
		  /* 82207450h */ case    3:  		/* bl 165520 */
		/* 82207450h case    3:*/		regs.LR = 0x82207454; return 0x8222FAE0;
		/* 82207450h case    3:*/		return 0x82207454;
		  /* 82207454h */ case    4:  		/* mr R29, R28 */
		/* 82207454h case    4:*/		regs.R29 = regs.R28;
		/* 82207454h case    4:*/		return 0x82207458;
		  /* 82207458h */ case    5:  		/* stw R27, <#[R31 + 564]> */
		/* 82207458h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000234) );
		/* 82207458h case    5:*/		return 0x8220745C;
		  /* 8220745Ch */ case    6:  		/* stw R28, <#[R1 + 96]> */
		/* 8220745Ch case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 8220745Ch case    6:*/		return 0x82207460;
		  /* 82207460h */ case    7:  		/* b 2148 */
		/* 82207460h case    7:*/		return 0x82207CC4;
		/* 82207460h case    7:*/		return 0x82207464;
		  /* 82207464h */ case    8:  		/* lwz R11, <#[R23 + 20]> */
		/* 82207464h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 82207464h case    8:*/		return 0x82207468;
		  /* 82207468h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82207468h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207468h case    9:*/		return 0x8220746C;
		  /* 8220746Ch */ case   10:  		/* bc 4, CR6_EQ, 4564 */
		/* 8220746Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x82208640;  }
		/* 8220746Ch case   10:*/		return 0x82207470;
		  /* 82207470h */ case   11:  		/* lwz R11, <#[R23 + 32]> */
		/* 82207470h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 82207470h case   11:*/		return 0x82207474;
		  /* 82207474h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82207474h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207474h case   12:*/		return 0x82207478;
		  /* 82207478h */ case   13:  		/* bc 4, CR6_EQ, 4552 */
		/* 82207478h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82208640;  }
		/* 82207478h case   13:*/		return 0x8220747C;
		  /* 8220747Ch */ case   14:  		/* lwz R11, <#[R23 + 40]> */
		/* 8220747Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000028) );
		/* 8220747Ch case   14:*/		return 0x82207480;
		  /* 82207480h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82207480h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207480h case   15:*/		return 0x82207484;
		  /* 82207484h */ case   16:  		/* bc 4, CR6_EQ, 4540 */
		/* 82207484h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82208640;  }
		/* 82207484h case   16:*/		return 0x82207488;
		  /* 82207488h */ case   17:  		/* stw R16, <#[R1 + 84]> */
		/* 82207488h case   17:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 82207488h case   17:*/		return 0x8220748C;
		  /* 8220748Ch */ case   18:  		/* li R10, 0 */
		/* 8220748Ch case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8220748Ch case   18:*/		return 0x82207490;
		  /* 82207490h */ case   19:  		/* li R9, 0 */
		/* 82207490h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82207490h case   19:*/		return 0x82207494;
		  /* 82207494h */ case   20:  		/* stw R16, <#[R1 + 92]> */
		/* 82207494h case   20:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207494h case   20:*/		return 0x82207498;
		  /* 82207498h */ case   21:  		/* li R8, 0 */
		/* 82207498h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207498h case   21:*/		return 0x8220749C;
		  /* 8220749Ch */ case   22:  		/* li R7, 11 */
		/* 8220749Ch case   22:*/		cpu::op::li<0>(regs,&regs.R7,0xB);
		/* 8220749Ch case   22:*/		return 0x822074A0;
		  /* 822074A0h */ case   23:  		/* li R6, 10 */
		/* 822074A0h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 822074A0h case   23:*/		return 0x822074A4;
		  /* 822074A4h */ case   24:  		/* li R5, 9 */
		/* 822074A4h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 822074A4h case   24:*/		return 0x822074A8;
		  /* 822074A8h */ case   25:  		/* li R4, 2 */
		/* 822074A8h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 822074A8h case   25:*/		return 0x822074AC;
		  /* 822074ACh */ case   26:  		/* li R3, 1 */
		/* 822074ACh case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822074ACh case   26:*/		return 0x822074B0;
		  /* 822074B0h */ case   27:  		/* bl -113128 */
		/* 822074B0h case   27:*/		regs.LR = 0x822074B4; return 0x821EBAC8;
		/* 822074B0h case   27:*/		return 0x822074B4;
		  /* 822074B4h */ case   28:  		/* mr R5, R3 */
		/* 822074B4h case   28:*/		regs.R5 = regs.R3;
		/* 822074B4h case   28:*/		return 0x822074B8;
		  /* 822074B8h */ case   29:  		/* mr R4, R17 */
		/* 822074B8h case   29:*/		regs.R4 = regs.R17;
		/* 822074B8h case   29:*/		return 0x822074BC;
		  /* 822074BCh */ case   30:  		/* mr R3, R31 */
		/* 822074BCh case   30:*/		regs.R3 = regs.R31;
		/* 822074BCh case   30:*/		return 0x822074C0;
		  /* 822074C0h */ case   31:  		/* li R6, 0 */
		/* 822074C0h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822074C0h case   31:*/		return 0x822074C4;
		  /* 822074C4h */ case   32:  		/* li R7, 3 */
		/* 822074C4h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 822074C4h case   32:*/		return 0x822074C8;
		  /* 822074C8h */ case   33:  		/* addi R8, R1, 100 */
		/* 822074C8h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 822074C8h case   33:*/		return 0x822074CC;
		  /* 822074CCh */ case   34:  		/* addi R9, R1, 96 */
		/* 822074CCh case   34:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 822074CCh case   34:*/		return 0x822074D0;
		  /* 822074D0h */ case   35:  		/* addi R10, R1, 240 */
		/* 822074D0h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 822074D0h case   35:*/		return 0x822074D4;
		  /* 822074D4h */ case   36:  		/* bl -58284 */
		/* 822074D4h case   36:*/		regs.LR = 0x822074D8; return 0x821F9128;
		/* 822074D4h case   36:*/		return 0x822074D8;
		  /* 822074D8h */ case   37:  		/* mr R3, R31 */
		/* 822074D8h case   37:*/		regs.R3 = regs.R31;
		/* 822074D8h case   37:*/		return 0x822074DC;
		  /* 822074DCh */ case   38:  		/* bl -103780 */
		/* 822074DCh case   38:*/		regs.LR = 0x822074E0; return 0x821EDF78;
		/* 822074DCh case   38:*/		return 0x822074E0;
		  /* 822074E0h */ case   39:  		/* mr R28, R3 */
		/* 822074E0h case   39:*/		regs.R28 = regs.R3;
		/* 822074E0h case   39:*/		return 0x822074E4;
		  /* 822074E4h */ case   40:  		/* mr R3, R31 */
		/* 822074E4h case   40:*/		regs.R3 = regs.R31;
		/* 822074E4h case   40:*/		return 0x822074E8;
		  /* 822074E8h */ case   41:  		/* bl -103792 */
		/* 822074E8h case   41:*/		regs.LR = 0x822074EC; return 0x821EDF78;
		/* 822074E8h case   41:*/		return 0x822074EC;
		  /* 822074ECh */ case   42:  		/* mr R29, R3 */
		/* 822074ECh case   42:*/		regs.R29 = regs.R3;
		/* 822074ECh case   42:*/		return 0x822074F0;
		  /* 822074F0h */ case   43:  		/* mr R3, R31 */
		/* 822074F0h case   43:*/		regs.R3 = regs.R31;
		/* 822074F0h case   43:*/		return 0x822074F4;
		  /* 822074F4h */ case   44:  		/* bl -103804 */
		/* 822074F4h case   44:*/		regs.LR = 0x822074F8; return 0x821EDF78;
		/* 822074F4h case   44:*/		return 0x822074F8;
		  /* 822074F8h */ case   45:  		/* mr R5, R31 */
		/* 822074F8h case   45:*/		regs.R5 = regs.R31;
		/* 822074F8h case   45:*/		return 0x822074FC;
		  /* 822074FCh */ case   46:  		/* mr R4, R28 */
		/* 822074FCh case   46:*/		regs.R4 = regs.R28;
		/* 822074FCh case   46:*/		return 0x82207500;
		  /* 82207500h */ case   47:  		/* mr R27, R3 */
		/* 82207500h case   47:*/		regs.R27 = regs.R3;
		/* 82207500h case   47:*/		return 0x82207504;
		  /* 82207504h */ case   48:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207504h case   48:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207504h case   48:*/		return 0x82207508;
		  /* 82207508h */ case   49:  		/* bl 165336 */
		/* 82207508h case   49:*/		regs.LR = 0x8220750C; return 0x8222FAE0;
		/* 82207508h case   49:*/		return 0x8220750C;
		  /* 8220750Ch */ case   50:  		/* stw R28, <#[R31 + 564]> */
		/* 8220750Ch case   50:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000234) );
		/* 8220750Ch case   50:*/		return 0x82207510;
		  /* 82207510h */ case   51:  		/* addi R5, R1, 240 */
		/* 82207510h case   51:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 82207510h case   51:*/		return 0x82207514;
		  /* 82207514h */ case   52:  		/* mr R4, R18 */
		/* 82207514h case   52:*/		regs.R4 = regs.R18;
		/* 82207514h case   52:*/		return 0x82207518;
		  /* 82207518h */ case   53:  		/* mr R3, R31 */
		/* 82207518h case   53:*/		regs.R3 = regs.R31;
		/* 82207518h case   53:*/		return 0x8220751C;
		  /* 8220751Ch */ case   54:  		/* bl -10964 */
		/* 8220751Ch case   54:*/		regs.LR = 0x82207520; return 0x82204A48;
		/* 8220751Ch case   54:*/		return 0x82207520;
		  /* 82207520h */ case   55:  		/* lwz R5, <#[R23 + 24]> */
		/* 82207520h case   55:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000018) );
		/* 82207520h case   55:*/		return 0x82207524;
		  /* 82207524h */ case   56:  		/* cmplwi CR6, R5, 0 */
		/* 82207524h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82207524h case   56:*/		return 0x82207528;
		  /* 82207528h */ case   57:  		/* bc 12, CR6_EQ, 168 */
		/* 82207528h case   57:*/		if ( regs.CR[6].eq ) { return 0x822075D0;  }
		/* 82207528h case   57:*/		return 0x8220752C;
		  /* 8220752Ch */ case   58:  		/* li R6, 2 */
		/* 8220752Ch case   58:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8220752Ch case   58:*/		return 0x82207530;
		  /* 82207530h */ case   59:  		/* mr R4, R18 */
		/* 82207530h case   59:*/		regs.R4 = regs.R18;
		/* 82207530h case   59:*/		return 0x82207534;
		  /* 82207534h */ case   60:  		/* mr R3, R31 */
		/* 82207534h case   60:*/		regs.R3 = regs.R31;
		/* 82207534h case   60:*/		return 0x82207538;
		  /* 82207538h */ case   61:  		/* bl -49896 */
		/* 82207538h case   61:*/		regs.LR = 0x8220753C; return 0x821FB250;
		/* 82207538h case   61:*/		return 0x8220753C;
		  /* 8220753Ch */ case   62:  		/* or. R6, R3, R3 */
		/* 8220753Ch case   62:*/		cpu::op::or<1>(regs,&regs.R6,regs.R3,regs.R3);
		/* 8220753Ch case   62:*/		return 0x82207540;
		  /* 82207540h */ case   63:  		/* bc 12, CR0_EQ, 144 */
		/* 82207540h case   63:*/		if ( regs.CR[0].eq ) { return 0x822075D0;  }
		/* 82207540h case   63:*/		return 0x82207544;
		  /* 82207544h */ case   64:  		/* lwz R4, <#[R31 + 564]> */
		/* 82207544h case   64:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82207544h case   64:*/		return 0x82207548;
		  /* 82207548h */ case   65:  		/* mr R3, R31 */
		/* 82207548h case   65:*/		regs.R3 = regs.R31;
		/* 82207548h case   65:*/		return 0x8220754C;
		  /* 8220754Ch */ case   66:  		/* addi R5, R4, 32 */
		/* 8220754Ch case   66:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 8220754Ch case   66:*/		return 0x82207550;
		  /* 82207550h */ case   67:  		/* bl -284720 */
		/* 82207550h case   67:*/		regs.LR = 0x82207554; return 0x821C1D20;
		/* 82207550h case   67:*/		return 0x82207554;
		  /* 82207554h */ case   68:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207554h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207554h case   68:*/		return 0x82207558;
		  /* 82207558h */ case   69:  		/* mr R5, R31 */
		/* 82207558h case   69:*/		regs.R5 = regs.R31;
		/* 82207558h case   69:*/		return 0x8220755C;
		  /* 8220755Ch */ case   70:  		/* rlwimi R11, R15, 17, 13, 14 */
		/* 8220755Ch case   70:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R11,regs.R15);
		/* 8220755Ch case   70:*/		return 0x82207560;
		  /* 82207560h */ case   71:  		/* mr R4, R29 */
		/* 82207560h case   71:*/		regs.R4 = regs.R29;
		/* 82207560h case   71:*/		return 0x82207564;
		  /* 82207564h */ case   72:  		/* stw R11, <#[R3 + 8]> */
		/* 82207564h case   72:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207564h case   72:*/		return 0x82207568;
		  /* 82207568h */ case   73:  		/* mr R30, R3 */
		/* 82207568h case   73:*/		regs.R30 = regs.R3;
		/* 82207568h case   73:*/		return 0x8220756C;
		  /* 8220756Ch */ case   74:  		/* bl -618100 */
		/* 8220756Ch case   74:*/		regs.LR = 0x82207570; return 0x821706F8;
		/* 8220756Ch case   74:*/		return 0x82207570;
		  /* 82207570h */ case   75:  		/* mr R5, R31 */
		/* 82207570h case   75:*/		regs.R5 = regs.R31;
		/* 82207570h case   75:*/		return 0x82207574;
		  /* 82207574h */ case   76:  		/* mr R4, R29 */
		/* 82207574h case   76:*/		regs.R4 = regs.R29;
		/* 82207574h case   76:*/		return 0x82207578;
		  /* 82207578h */ case   77:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207578h case   77:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207578h case   77:*/		return 0x8220757C;
		  /* 8220757Ch */ case   78:  		/* bl 165220 */
		/* 8220757Ch case   78:*/		regs.LR = 0x82207580; return 0x8222FAE0;
		/* 8220757Ch case   78:*/		return 0x82207580;
		  /* 82207580h */ case   79:  		/* mr R5, R31 */
		/* 82207580h case   79:*/		regs.R5 = regs.R31;
		/* 82207580h case   79:*/		return 0x82207584;
		  /* 82207584h */ case   80:  		/* mr R4, R27 */
		/* 82207584h case   80:*/		regs.R4 = regs.R27;
		/* 82207584h case   80:*/		return 0x82207588;
		  /* 82207588h */ case   81:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207588h case   81:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207588h case   81:*/		return 0x8220758C;
		  /* 8220758Ch */ case   82:  		/* bl 165204 */
		/* 8220758Ch case   82:*/		regs.LR = 0x82207590; return 0x8222FAE0;
		/* 8220758Ch case   82:*/		return 0x82207590;
		  /* 82207590h */ case   83:  		/* addi R5, R1, 240 */
		/* 82207590h case   83:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 82207590h case   83:*/		return 0x82207594;
		  /* 82207594h */ case   84:  		/* mr R4, R30 */
		/* 82207594h case   84:*/		regs.R4 = regs.R30;
		/* 82207594h case   84:*/		return 0x82207598;
		  /* 82207598h */ case   85:  		/* mr R3, R31 */
		/* 82207598h case   85:*/		regs.R3 = regs.R31;
		/* 82207598h case   85:*/		return 0x8220759C;
		  /* 8220759Ch */ case   86:  		/* bl -106236 */
		/* 8220759Ch case   86:*/		regs.LR = 0x822075A0; return 0x821ED6A0;
		/* 8220759Ch case   86:*/		return 0x822075A0;
		  /* 822075A0h */ case   87:  		/* lwz R11, <#[R30 + 8]> */
		/* 822075A0h case   87:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 822075A0h case   87:*/		return 0x822075A4;
		  /* 822075A4h */ case   88:  		/* mr R3, R31 */
		/* 822075A4h case   88:*/		regs.R3 = regs.R31;
		/* 822075A4h case   88:*/		return 0x822075A8;
		  /* 822075A8h */ case   89:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 822075A8h case   89:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 822075A8h case   89:*/		return 0x822075AC;
		  /* 822075ACh */ case   90:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 822075ACh case   90:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 822075ACh case   90:*/		return 0x822075B0;
		  /* 822075B0h */ case   91:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 822075B0h case   91:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 822075B0h case   91:*/		return 0x822075B4;
		  /* 822075B4h */ case   92:  		/* bl -668036 */
		/* 822075B4h case   92:*/		regs.LR = 0x822075B8; return 0x82164430;
		/* 822075B4h case   92:*/		return 0x822075B8;
		  /* 822075B8h */ case   93:  		/* addi R11, R30, -4 */
		/* 822075B8h case   93:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 822075B8h case   93:*/		return 0x822075BC;
		  /* 822075BCh */ case   94:  		/* add R11, R3, R11 */
		/* 822075BCh case   94:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 822075BCh case   94:*/		return 0x822075C0;
		  /* 822075C0h */ case   95:  		/* lwz R10, <#[R11]> */
		/* 822075C0h case   95:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822075C0h case   95:*/		return 0x822075C4;
		  /* 822075C4h */ case   96:  		/* ori R10, R10, 8 */
		/* 822075C4h case   96:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8);
		/* 822075C4h case   96:*/		return 0x822075C8;
		  /* 822075C8h */ case   97:  		/* stw R10, <#[R11]> */
		/* 822075C8h case   97:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822075C8h case   97:*/		return 0x822075CC;
		  /* 822075CCh */ case   98:  		/* b 88 */
		/* 822075CCh case   98:*/		return 0x82207624;
		/* 822075CCh case   98:*/		return 0x822075D0;
	}
	return 0x822075D0;
} // Block from 82207444h-822075D0h (99 instructions)

//////////////////////////////////////////////////////
// Block at 822075D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822075D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822075D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822075D0);
		  /* 822075D0h */ case    0:  		/* stw R16, <#[R1 + 84]> */
		/* 822075D0h case    0:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 822075D0h case    0:*/		return 0x822075D4;
		  /* 822075D4h */ case    1:  		/* li R10, 0 */
		/* 822075D4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822075D4h case    1:*/		return 0x822075D8;
		  /* 822075D8h */ case    2:  		/* li R9, 0 */
		/* 822075D8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822075D8h case    2:*/		return 0x822075DC;
		  /* 822075DCh */ case    3:  		/* stw R16, <#[R1 + 92]> */
		/* 822075DCh case    3:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 822075DCh case    3:*/		return 0x822075E0;
		  /* 822075E0h */ case    4:  		/* li R8, 0 */
		/* 822075E0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822075E0h case    4:*/		return 0x822075E4;
		  /* 822075E4h */ case    5:  		/* li R7, 0 */
		/* 822075E4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822075E4h case    5:*/		return 0x822075E8;
		  /* 822075E8h */ case    6:  		/* li R6, 0 */
		/* 822075E8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822075E8h case    6:*/		return 0x822075EC;
		  /* 822075ECh */ case    7:  		/* li R5, 0 */
		/* 822075ECh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822075ECh case    7:*/		return 0x822075F0;
		  /* 822075F0h */ case    8:  		/* li R4, 10 */
		/* 822075F0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 822075F0h case    8:*/		return 0x822075F4;
		  /* 822075F4h */ case    9:  		/* li R3, 9 */
		/* 822075F4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x9);
		/* 822075F4h case    9:*/		return 0x822075F8;
		  /* 822075F8h */ case   10:  		/* bl -113456 */
		/* 822075F8h case   10:*/		regs.LR = 0x822075FC; return 0x821EBAC8;
		/* 822075F8h case   10:*/		return 0x822075FC;
		  /* 822075FCh */ case   11:  		/* lwz R11, <#[R1 + 240]> */
		/* 822075FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 822075FCh case   11:*/		return 0x82207600;
		  /* 82207600h */ case   12:  		/* and. R11, R3, R11 */
		/* 82207600h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82207600h case   12:*/		return 0x82207604;
		  /* 82207604h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82207604h case   13:*/		if ( regs.CR[0].eq ) { return 0x82207614;  }
		/* 82207604h case   13:*/		return 0x82207608;
		  /* 82207608h */ case   14:  		/* li R4, 3584 */
		/* 82207608h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0xE00);
		/* 82207608h case   14:*/		return 0x8220760C;
		  /* 8220760Ch */ case   15:  		/* mr R3, R31 */
		/* 8220760Ch case   15:*/		regs.R3 = regs.R31;
		/* 8220760Ch case   15:*/		return 0x82207610;
		  /* 82207610h */ case   16:  		/* bl -743576 */
		/* 82207610h case   16:*/		regs.LR = 0x82207614; return 0x82151D78;
		/* 82207610h case   16:*/		return 0x82207614;
	}
	return 0x82207614;
} // Block from 822075D0h-82207614h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82207614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207614);
		  /* 82207614h */ case    0:  		/* mr R5, R31 */
		/* 82207614h case    0:*/		regs.R5 = regs.R31;
		/* 82207614h case    0:*/		return 0x82207618;
		  /* 82207618h */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207618h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207618h case    1:*/		return 0x8220761C;
		  /* 8220761Ch */ case    2:  		/* mr R4, R27 */
		/* 8220761Ch case    2:*/		regs.R4 = regs.R27;
		/* 8220761Ch case    2:*/		return 0x82207620;
		  /* 82207620h */ case    3:  		/* bl 165056 */
		/* 82207620h case    3:*/		regs.LR = 0x82207624; return 0x8222FAE0;
		/* 82207620h case    3:*/		return 0x82207624;
	}
	return 0x82207624;
} // Block from 82207614h-82207624h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207624);
		  /* 82207624h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82207624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207624h case    0:*/		return 0x82207628;
		  /* 82207628h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82207628h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82207628h case    1:*/		return 0x8220762C;
		  /* 8220762Ch */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 8220762Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82207654;  }
		/* 8220762Ch case    2:*/		return 0x82207630;
		  /* 82207630h */ case    3:  		/* lwz R11, <#[R19]> */
		/* 82207630h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82207630h case    3:*/		return 0x82207634;
		  /* 82207634h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207634h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207634h case    4:*/		return 0x82207638;
		  /* 82207638h */ case    5:  		/* addic. R3, R11, -4 */
		/* 82207638h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82207638h case    5:*/		return 0x8220763C;
		  /* 8220763Ch */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8220763Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82207654;  }
		/* 8220763Ch case    6:*/		return 0x82207640;
		  /* 82207640h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207640h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207640h case    7:*/		return 0x82207644;
		  /* 82207644h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 82207644h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82207644h case    8:*/		return 0x82207648;
		  /* 82207648h */ case    9:  		/* addi R11, R11, 1 */
		/* 82207648h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82207648h case    9:*/		return 0x8220764C;
		  /* 8220764Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8220764Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8220764Ch case   10:*/		return 0x82207650;
		  /* 82207650h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 82207650h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82207660;  }
		/* 82207650h case   11:*/		return 0x82207654;
	}
	return 0x82207654;
} // Block from 82207624h-82207654h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82207654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207654);
		  /* 82207654h */ case    0:  		/* li R4, 1 */
		/* 82207654h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82207654h case    0:*/		return 0x82207658;
		  /* 82207658h */ case    1:  		/* mr R3, R19 */
		/* 82207658h case    1:*/		regs.R3 = regs.R19;
		/* 82207658h case    1:*/		return 0x8220765C;
		  /* 8220765Ch */ case    2:  		/* bl -501140 */
		/* 8220765Ch case    2:*/		regs.LR = 0x82207660; return 0x8218D0C8;
		/* 8220765Ch case    2:*/		return 0x82207660;
	}
	return 0x82207660;
} // Block from 82207654h-82207660h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207660);
		  /* 82207660h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207660h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207660h case    0:*/		return 0x82207664;
		  /* 82207664h */ case    1:  		/* addi R10, R11, 4 */
		/* 82207664h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82207664h case    1:*/		return 0x82207668;
		  /* 82207668h */ case    2:  		/* addi R9, R11, 1 */
		/* 82207668h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82207668h case    2:*/		return 0x8220766C;
		  /* 8220766Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8220766Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8220766Ch case    3:*/		return 0x82207670;
		  /* 82207670h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82207670h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82207670h case    4:*/		return 0x82207674;
		  /* 82207674h */ case    5:  		/* stwx R29, <#[R11 + R3]> */
		/* 82207674h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82207674h case    5:*/		return 0x82207678;
		  /* 82207678h */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82207678h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207678h case    6:*/		return 0x8220767C;
		  /* 8220767Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8220767Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8220767Ch case    7:*/		return 0x82207680;
		  /* 82207680h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82207680h case    8:*/		if ( !regs.CR[0].eq ) { return 0x822076A8;  }
		/* 82207680h case    8:*/		return 0x82207684;
		  /* 82207684h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82207684h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82207684h case    9:*/		return 0x82207688;
		  /* 82207688h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207688h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207688h case   10:*/		return 0x8220768C;
		  /* 8220768Ch */ case   11:  		/* addic. R11, R11, -4 */
		/* 8220768Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8220768Ch case   11:*/		return 0x82207690;
		  /* 82207690h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82207690h case   12:*/		if ( regs.CR[0].eq ) { return 0x822076A8;  }
		/* 82207690h case   12:*/		return 0x82207694;
		  /* 82207694h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 82207694h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82207694h case   13:*/		return 0x82207698;
		  /* 82207698h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 82207698h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82207698h case   14:*/		return 0x8220769C;
		  /* 8220769Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 8220769Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8220769Ch case   15:*/		return 0x822076A0;
		  /* 822076A0h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 822076A0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 822076A0h case   16:*/		return 0x822076A4;
		  /* 822076A4h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 822076A4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x822076B8;  }
		/* 822076A4h case   17:*/		return 0x822076A8;
	}
	return 0x822076A8;
} // Block from 82207660h-822076A8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822076A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822076A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822076A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822076A8);
		  /* 822076A8h */ case    0:  		/* li R4, 1 */
		/* 822076A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822076A8h case    0:*/		return 0x822076AC;
		  /* 822076ACh */ case    1:  		/* mr R3, R19 */
		/* 822076ACh case    1:*/		regs.R3 = regs.R19;
		/* 822076ACh case    1:*/		return 0x822076B0;
		  /* 822076B0h */ case    2:  		/* bl -501224 */
		/* 822076B0h case    2:*/		regs.LR = 0x822076B4; return 0x8218D0C8;
		/* 822076B0h case    2:*/		return 0x822076B4;
		  /* 822076B4h */ case    3:  		/* mr R11, R3 */
		/* 822076B4h case    3:*/		regs.R11 = regs.R3;
		/* 822076B4h case    3:*/		return 0x822076B8;
	}
	return 0x822076B8;
} // Block from 822076A8h-822076B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822076B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822076B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822076B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822076B8);
		  /* 822076B8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 822076B8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822076B8h case    0:*/		return 0x822076BC;
		  /* 822076BCh */ case    1:  		/* mr R3, R21 */
		/* 822076BCh case    1:*/		regs.R3 = regs.R21;
		/* 822076BCh case    1:*/		return 0x822076C0;
		  /* 822076C0h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 822076C0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 822076C0h case    2:*/		return 0x822076C4;
		  /* 822076C4h */ case    3:  		/* addi R8, R10, 4 */
		/* 822076C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 822076C4h case    3:*/		return 0x822076C8;
		  /* 822076C8h */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 822076C8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 822076C8h case    4:*/		return 0x822076CC;
		  /* 822076CCh */ case    5:  		/* addi R7, R10, 1 */
		/* 822076CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 822076CCh case    5:*/		return 0x822076D0;
		  /* 822076D0h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 822076D0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 822076D0h case    6:*/		return 0x822076D4;
		  /* 822076D4h */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 822076D4h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 822076D4h case    7:*/		return 0x822076D8;
		  /* 822076D8h */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 822076D8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 822076D8h case    8:*/		return 0x822076DC;
		  /* 822076DCh */ case    9:  		/* bl -66156 */
		/* 822076DCh case    9:*/		regs.LR = 0x822076E0; return 0x821F7470;
		/* 822076DCh case    9:*/		return 0x822076E0;
		  /* 822076E0h */ case   10:  		/* lwz R3, <#[R31 + 584]> */
		/* 822076E0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 822076E0h case   10:*/		return 0x822076E4;
		  /* 822076E4h */ case   11:  		/* bl -68300 */
		/* 822076E4h case   11:*/		regs.LR = 0x822076E8; return 0x821F6C18;
		/* 822076E4h case   11:*/		return 0x822076E8;
		  /* 822076E8h */ case   12:  		/* mr R11, R3 */
		/* 822076E8h case   12:*/		regs.R11 = regs.R3;
		/* 822076E8h case   12:*/		return 0x822076EC;
		  /* 822076ECh */ case   13:  		/* li R5, 12 */
		/* 822076ECh case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 822076ECh case   13:*/		return 0x822076F0;
		  /* 822076F0h */ case   14:  		/* mr R4, R23 */
		/* 822076F0h case   14:*/		regs.R4 = regs.R23;
		/* 822076F0h case   14:*/		return 0x822076F4;
		  /* 822076F4h */ case   15:  		/* mr R3, R21 */
		/* 822076F4h case   15:*/		regs.R3 = regs.R21;
		/* 822076F4h case   15:*/		return 0x822076F8;
		  /* 822076F8h */ case   16:  		/* stw R15, <#[R11]> */
		/* 822076F8h case   16:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R11 + 0x00000000) );
		/* 822076F8h case   16:*/		return 0x822076FC;
		  /* 822076FCh */ case   17:  		/* stw R29, <#[R11 + 4]> */
		/* 822076FCh case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 822076FCh case   17:*/		return 0x82207700;
		  /* 82207700h */ case   18:  		/* stw R28, <#[R11 + 8]> */
		/* 82207700h case   18:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 82207700h case   18:*/		return 0x82207704;
		  /* 82207704h */ case   19:  		/* bl -65796 */
		/* 82207704h case   19:*/		regs.LR = 0x82207708; return 0x821F7600;
		/* 82207704h case   19:*/		return 0x82207708;
		  /* 82207708h */ case   20:  		/* mr R29, R28 */
		/* 82207708h case   20:*/		regs.R29 = regs.R28;
		/* 82207708h case   20:*/		return 0x8220770C;
		  /* 8220770Ch */ case   21:  		/* stw R28, <#[R1 + 96]> */
		/* 8220770Ch case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 8220770Ch case   21:*/		return 0x82207710;
		  /* 82207710h */ case   22:  		/* lwz R24, <#[R23 + 28]> */
		/* 82207710h case   22:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000001C) );
		/* 82207710h case   22:*/		return 0x82207714;
		  /* 82207714h */ case   23:  		/* stw R27, <#[R31 + 564]> */
		/* 82207714h case   23:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000234) );
		/* 82207714h case   23:*/		return 0x82207718;
		  /* 82207718h */ case   24:  		/* b 1452 */
		/* 82207718h case   24:*/		return 0x82207CC4;
		/* 82207718h case   24:*/		return 0x8220771C;
		  /* 8220771Ch */ case   25:  		/* lwz R11, <#[R23 + 20]> */
		/* 8220771Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 8220771Ch case   25:*/		return 0x82207720;
		  /* 82207720h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 82207720h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207720h case   26:*/		return 0x82207724;
		  /* 82207724h */ case   27:  		/* bc 4, CR6_EQ, 3880 */
		/* 82207724h case   27:*/		if ( !regs.CR[6].eq ) { return 0x8220864C;  }
		/* 82207724h case   27:*/		return 0x82207728;
		  /* 82207728h */ case   28:  		/* lwz R11, <#[R23 + 32]> */
		/* 82207728h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 82207728h case   28:*/		return 0x8220772C;
		  /* 8220772Ch */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 8220772Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220772Ch case   29:*/		return 0x82207730;
		  /* 82207730h */ case   30:  		/* bc 4, CR6_EQ, 3868 */
		/* 82207730h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8220864C;  }
		/* 82207730h case   30:*/		return 0x82207734;
		  /* 82207734h */ case   31:  		/* lwz R11, <#[R23 + 40]> */
		/* 82207734h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000028) );
		/* 82207734h case   31:*/		return 0x82207738;
		  /* 82207738h */ case   32:  		/* cmplwi CR6, R11, 0 */
		/* 82207738h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207738h case   32:*/		return 0x8220773C;
		  /* 8220773Ch */ case   33:  		/* bc 4, CR6_EQ, 3856 */
		/* 8220773Ch case   33:*/		if ( !regs.CR[6].eq ) { return 0x8220864C;  }
		/* 8220773Ch case   33:*/		return 0x82207740;
		  /* 82207740h */ case   34:  		/* stw R16, <#[R1 + 84]> */
		/* 82207740h case   34:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 82207740h case   34:*/		return 0x82207744;
		  /* 82207744h */ case   35:  		/* li R10, 0 */
		/* 82207744h case   35:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82207744h case   35:*/		return 0x82207748;
		  /* 82207748h */ case   36:  		/* stw R16, <#[R1 + 92]> */
		/* 82207748h case   36:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207748h case   36:*/		return 0x8220774C;
		  /* 8220774Ch */ case   37:  		/* li R9, 0 */
		/* 8220774Ch case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8220774Ch case   37:*/		return 0x82207750;
		  /* 82207750h */ case   38:  		/* li R8, 0 */
		/* 82207750h case   38:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207750h case   38:*/		return 0x82207754;
		  /* 82207754h */ case   39:  		/* li R7, 0 */
		/* 82207754h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82207754h case   39:*/		return 0x82207758;
		  /* 82207758h */ case   40:  		/* li R6, 10 */
		/* 82207758h case   40:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 82207758h case   40:*/		return 0x8220775C;
		  /* 8220775Ch */ case   41:  		/* li R5, 9 */
		/* 8220775Ch case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8220775Ch case   41:*/		return 0x82207760;
		  /* 82207760h */ case   42:  		/* li R4, 2 */
		/* 82207760h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82207760h case   42:*/		return 0x82207764;
		  /* 82207764h */ case   43:  		/* li R3, 1 */
		/* 82207764h case   43:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82207764h case   43:*/		return 0x82207768;
		  /* 82207768h */ case   44:  		/* bl -113824 */
		/* 82207768h case   44:*/		regs.LR = 0x8220776C; return 0x821EBAC8;
		/* 82207768h case   44:*/		return 0x8220776C;
		  /* 8220776Ch */ case   45:  		/* mr R5, R3 */
		/* 8220776Ch case   45:*/		regs.R5 = regs.R3;
		/* 8220776Ch case   45:*/		return 0x82207770;
		  /* 82207770h */ case   46:  		/* mr R4, R17 */
		/* 82207770h case   46:*/		regs.R4 = regs.R17;
		/* 82207770h case   46:*/		return 0x82207774;
		  /* 82207774h */ case   47:  		/* mr R3, R31 */
		/* 82207774h case   47:*/		regs.R3 = regs.R31;
		/* 82207774h case   47:*/		return 0x82207778;
		  /* 82207778h */ case   48:  		/* li R6, 0 */
		/* 82207778h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82207778h case   48:*/		return 0x8220777C;
		  /* 8220777Ch */ case   49:  		/* li R7, 3 */
		/* 8220777Ch case   49:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8220777Ch case   49:*/		return 0x82207780;
		  /* 82207780h */ case   50:  		/* addi R8, R1, 100 */
		/* 82207780h case   50:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82207780h case   50:*/		return 0x82207784;
		  /* 82207784h */ case   51:  		/* addi R9, R1, 96 */
		/* 82207784h case   51:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82207784h case   51:*/		return 0x82207788;
		  /* 82207788h */ case   52:  		/* addi R10, R1, 224 */
		/* 82207788h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 82207788h case   52:*/		return 0x8220778C;
		  /* 8220778Ch */ case   53:  		/* bl -58980 */
		/* 8220778Ch case   53:*/		regs.LR = 0x82207790; return 0x821F9128;
		/* 8220778Ch case   53:*/		return 0x82207790;
		  /* 82207790h */ case   54:  		/* mr R3, R31 */
		/* 82207790h case   54:*/		regs.R3 = regs.R31;
		/* 82207790h case   54:*/		return 0x82207794;
		  /* 82207794h */ case   55:  		/* bl -104476 */
		/* 82207794h case   55:*/		regs.LR = 0x82207798; return 0x821EDF78;
		/* 82207794h case   55:*/		return 0x82207798;
		  /* 82207798h */ case   56:  		/* mr R28, R3 */
		/* 82207798h case   56:*/		regs.R28 = regs.R3;
		/* 82207798h case   56:*/		return 0x8220779C;
		  /* 8220779Ch */ case   57:  		/* mr R3, R31 */
		/* 8220779Ch case   57:*/		regs.R3 = regs.R31;
		/* 8220779Ch case   57:*/		return 0x822077A0;
		  /* 822077A0h */ case   58:  		/* bl -104488 */
		/* 822077A0h case   58:*/		regs.LR = 0x822077A4; return 0x821EDF78;
		/* 822077A0h case   58:*/		return 0x822077A4;
		  /* 822077A4h */ case   59:  		/* mr R29, R3 */
		/* 822077A4h case   59:*/		regs.R29 = regs.R3;
		/* 822077A4h case   59:*/		return 0x822077A8;
		  /* 822077A8h */ case   60:  		/* mr R3, R31 */
		/* 822077A8h case   60:*/		regs.R3 = regs.R31;
		/* 822077A8h case   60:*/		return 0x822077AC;
		  /* 822077ACh */ case   61:  		/* bl -104500 */
		/* 822077ACh case   61:*/		regs.LR = 0x822077B0; return 0x821EDF78;
		/* 822077ACh case   61:*/		return 0x822077B0;
		  /* 822077B0h */ case   62:  		/* mr R4, R28 */
		/* 822077B0h case   62:*/		regs.R4 = regs.R28;
		/* 822077B0h case   62:*/		return 0x822077B4;
		  /* 822077B4h */ case   63:  		/* mr R5, R31 */
		/* 822077B4h case   63:*/		regs.R5 = regs.R31;
		/* 822077B4h case   63:*/		return 0x822077B8;
		  /* 822077B8h */ case   64:  		/* mr R27, R3 */
		/* 822077B8h case   64:*/		regs.R27 = regs.R3;
		/* 822077B8h case   64:*/		return 0x822077BC;
		  /* 822077BCh */ case   65:  		/* lwz R3, <#[R31 + 564]> */
		/* 822077BCh case   65:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822077BCh case   65:*/		return 0x822077C0;
		  /* 822077C0h */ case   66:  		/* bl 164640 */
		/* 822077C0h case   66:*/		regs.LR = 0x822077C4; return 0x8222FAE0;
		/* 822077C0h case   66:*/		return 0x822077C4;
		  /* 822077C4h */ case   67:  		/* stw R29, <#[R31 + 564]> */
		/* 822077C4h case   67:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 822077C4h case   67:*/		return 0x822077C8;
		  /* 822077C8h */ case   68:  		/* addi R5, R1, 224 */
		/* 822077C8h case   68:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 822077C8h case   68:*/		return 0x822077CC;
		  /* 822077CCh */ case   69:  		/* mr R4, R18 */
		/* 822077CCh case   69:*/		regs.R4 = regs.R18;
		/* 822077CCh case   69:*/		return 0x822077D0;
		  /* 822077D0h */ case   70:  		/* mr R3, R31 */
		/* 822077D0h case   70:*/		regs.R3 = regs.R31;
		/* 822077D0h case   70:*/		return 0x822077D4;
		  /* 822077D4h */ case   71:  		/* bl -11660 */
		/* 822077D4h case   71:*/		regs.LR = 0x822077D8; return 0x82204A48;
		/* 822077D4h case   71:*/		return 0x822077D8;
		  /* 822077D8h */ case   72:  		/* li R6, 2 */
		/* 822077D8h case   72:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 822077D8h case   72:*/		return 0x822077DC;
		  /* 822077DCh */ case   73:  		/* mr R4, R18 */
		/* 822077DCh case   73:*/		regs.R4 = regs.R18;
		/* 822077DCh case   73:*/		return 0x822077E0;
		  /* 822077E0h */ case   74:  		/* lwz R5, <#[R23 + 24]> */
		/* 822077E0h case   74:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000018) );
		/* 822077E0h case   74:*/		return 0x822077E4;
		  /* 822077E4h */ case   75:  		/* mr R3, R31 */
		/* 822077E4h case   75:*/		regs.R3 = regs.R31;
		/* 822077E4h case   75:*/		return 0x822077E8;
		  /* 822077E8h */ case   76:  		/* bl -50584 */
		/* 822077E8h case   76:*/		regs.LR = 0x822077EC; return 0x821FB250;
		/* 822077E8h case   76:*/		return 0x822077EC;
		  /* 822077ECh */ case   77:  		/* lwz R4, <#[R31 + 564]> */
		/* 822077ECh case   77:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 822077ECh case   77:*/		return 0x822077F0;
		  /* 822077F0h */ case   78:  		/* mr R6, R3 */
		/* 822077F0h case   78:*/		regs.R6 = regs.R3;
		/* 822077F0h case   78:*/		return 0x822077F4;
		  /* 822077F4h */ case   79:  		/* addi R5, R4, 32 */
		/* 822077F4h case   79:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 822077F4h case   79:*/		return 0x822077F8;
		  /* 822077F8h */ case   80:  		/* mr R3, R31 */
		/* 822077F8h case   80:*/		regs.R3 = regs.R31;
		/* 822077F8h case   80:*/		return 0x822077FC;
		  /* 822077FCh */ case   81:  		/* bl -285404 */
		/* 822077FCh case   81:*/		regs.LR = 0x82207800; return 0x821C1D20;
		/* 822077FCh case   81:*/		return 0x82207800;
		  /* 82207800h */ case   82:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207800h case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207800h case   82:*/		return 0x82207804;
		  /* 82207804h */ case   83:  		/* mr R4, R28 */
		/* 82207804h case   83:*/		regs.R4 = regs.R28;
		/* 82207804h case   83:*/		return 0x82207808;
		  /* 82207808h */ case   84:  		/* oris R11, R11, 6 */
		/* 82207808h case   84:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 82207808h case   84:*/		return 0x8220780C;
		  /* 8220780Ch */ case   85:  		/* mr R5, R31 */
		/* 8220780Ch case   85:*/		regs.R5 = regs.R31;
		/* 8220780Ch case   85:*/		return 0x82207810;
		  /* 82207810h */ case   86:  		/* stw R11, <#[R3 + 8]> */
		/* 82207810h case   86:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207810h case   86:*/		return 0x82207814;
		  /* 82207814h */ case   87:  		/* mr R30, R3 */
		/* 82207814h case   87:*/		regs.R30 = regs.R3;
		/* 82207814h case   87:*/		return 0x82207818;
		  /* 82207818h */ case   88:  		/* bl -618784 */
		/* 82207818h case   88:*/		regs.LR = 0x8220781C; return 0x821706F8;
		/* 82207818h case   88:*/		return 0x8220781C;
		  /* 8220781Ch */ case   89:  		/* mr R3, R29 */
		/* 8220781Ch case   89:*/		regs.R3 = regs.R29;
		/* 8220781Ch case   89:*/		return 0x82207820;
		  /* 82207820h */ case   90:  		/* mr R5, R31 */
		/* 82207820h case   90:*/		regs.R5 = regs.R31;
		/* 82207820h case   90:*/		return 0x82207824;
		  /* 82207824h */ case   91:  		/* mr R4, R28 */
		/* 82207824h case   91:*/		regs.R4 = regs.R28;
		/* 82207824h case   91:*/		return 0x82207828;
		  /* 82207828h */ case   92:  		/* bl 164536 */
		/* 82207828h case   92:*/		regs.LR = 0x8220782C; return 0x8222FAE0;
		/* 82207828h case   92:*/		return 0x8220782C;
		  /* 8220782Ch */ case   93:  		/* mr R5, R31 */
		/* 8220782Ch case   93:*/		regs.R5 = regs.R31;
		/* 8220782Ch case   93:*/		return 0x82207830;
		  /* 82207830h */ case   94:  		/* mr R4, R27 */
		/* 82207830h case   94:*/		regs.R4 = regs.R27;
		/* 82207830h case   94:*/		return 0x82207834;
		  /* 82207834h */ case   95:  		/* mr R3, R29 */
		/* 82207834h case   95:*/		regs.R3 = regs.R29;
		/* 82207834h case   95:*/		return 0x82207838;
		  /* 82207838h */ case   96:  		/* bl 164520 */
		/* 82207838h case   96:*/		regs.LR = 0x8220783C; return 0x8222FAE0;
		/* 82207838h case   96:*/		return 0x8220783C;
		  /* 8220783Ch */ case   97:  		/* addi R5, R1, 224 */
		/* 8220783Ch case   97:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 8220783Ch case   97:*/		return 0x82207840;
		  /* 82207840h */ case   98:  		/* mr R4, R30 */
		/* 82207840h case   98:*/		regs.R4 = regs.R30;
		/* 82207840h case   98:*/		return 0x82207844;
		  /* 82207844h */ case   99:  		/* mr R3, R31 */
		/* 82207844h case   99:*/		regs.R3 = regs.R31;
		/* 82207844h case   99:*/		return 0x82207848;
		  /* 82207848h */ case  100:  		/* bl -106920 */
		/* 82207848h case  100:*/		regs.LR = 0x8220784C; return 0x821ED6A0;
		/* 82207848h case  100:*/		return 0x8220784C;
		  /* 8220784Ch */ case  101:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220784Ch case  101:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220784Ch case  101:*/		return 0x82207850;
		  /* 82207850h */ case  102:  		/* mr R3, R31 */
		/* 82207850h case  102:*/		regs.R3 = regs.R31;
		/* 82207850h case  102:*/		return 0x82207854;
		  /* 82207854h */ case  103:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82207854h case  103:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82207854h case  103:*/		return 0x82207858;
		  /* 82207858h */ case  104:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82207858h case  104:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82207858h case  104:*/		return 0x8220785C;
		  /* 8220785Ch */ case  105:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8220785Ch case  105:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8220785Ch case  105:*/		return 0x82207860;
		  /* 82207860h */ case  106:  		/* bl -668720 */
		/* 82207860h case  106:*/		regs.LR = 0x82207864; return 0x82164430;
		/* 82207860h case  106:*/		return 0x82207864;
		  /* 82207864h */ case  107:  		/* addi R11, R30, -4 */
		/* 82207864h case  107:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 82207864h case  107:*/		return 0x82207868;
		  /* 82207868h */ case  108:  		/* add R11, R3, R11 */
		/* 82207868h case  108:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82207868h case  108:*/		return 0x8220786C;
		  /* 8220786Ch */ case  109:  		/* lwz R10, <#[R11]> */
		/* 8220786Ch case  109:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220786Ch case  109:*/		return 0x82207870;
		  /* 82207870h */ case  110:  		/* ori R10, R10, 8 */
		/* 82207870h case  110:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82207870h case  110:*/		return 0x82207874;
		  /* 82207874h */ case  111:  		/* stw R10, <#[R11]> */
		/* 82207874h case  111:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82207874h case  111:*/		return 0x82207878;
		  /* 82207878h */ case  112:  		/* lwz R11, <#[R20]> */
		/* 82207878h case  112:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207878h case  112:*/		return 0x8220787C;
		  /* 8220787Ch */ case  113:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8220787Ch case  113:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8220787Ch case  113:*/		return 0x82207880;
		  /* 82207880h */ case  114:  		/* bc 4, CR0_EQ, 40 */
		/* 82207880h case  114:*/		if ( !regs.CR[0].eq ) { return 0x822078A8;  }
		/* 82207880h case  114:*/		return 0x82207884;
		  /* 82207884h */ case  115:  		/* lwz R11, <#[R19]> */
		/* 82207884h case  115:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82207884h case  115:*/		return 0x82207888;
		  /* 82207888h */ case  116:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207888h case  116:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207888h case  116:*/		return 0x8220788C;
		  /* 8220788Ch */ case  117:  		/* addic. R3, R11, -4 */
		/* 8220788Ch case  117:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8220788Ch case  117:*/		return 0x82207890;
		  /* 82207890h */ case  118:  		/* bc 12, CR0_EQ, 24 */
		/* 82207890h case  118:*/		if ( regs.CR[0].eq ) { return 0x822078A8;  }
		/* 82207890h case  118:*/		return 0x82207894;
		  /* 82207894h */ case  119:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207894h case  119:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207894h case  119:*/		return 0x82207898;
		  /* 82207898h */ case  120:  		/* lwz R10, <#[R3 + 12]> */
		/* 82207898h case  120:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82207898h case  120:*/		return 0x8220789C;
		  /* 8220789Ch */ case  121:  		/* addi R11, R11, 1 */
		/* 8220789Ch case  121:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220789Ch case  121:*/		return 0x822078A0;
		  /* 822078A0h */ case  122:  		/* cmplw CR6, R11, R10 */
		/* 822078A0h case  122:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822078A0h case  122:*/		return 0x822078A4;
		  /* 822078A4h */ case  123:  		/* bc 4, CR6_GT, 16 */
		/* 822078A4h case  123:*/		if ( !regs.CR[6].gt ) { return 0x822078B4;  }
		/* 822078A4h case  123:*/		return 0x822078A8;
	}
	return 0x822078A8;
} // Block from 822076B8h-822078A8h (124 instructions)

//////////////////////////////////////////////////////
// Block at 822078A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822078A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822078A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822078A8);
		  /* 822078A8h */ case    0:  		/* li R4, 1 */
		/* 822078A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822078A8h case    0:*/		return 0x822078AC;
		  /* 822078ACh */ case    1:  		/* mr R3, R19 */
		/* 822078ACh case    1:*/		regs.R3 = regs.R19;
		/* 822078ACh case    1:*/		return 0x822078B0;
		  /* 822078B0h */ case    2:  		/* bl -501736 */
		/* 822078B0h case    2:*/		regs.LR = 0x822078B4; return 0x8218D0C8;
		/* 822078B0h case    2:*/		return 0x822078B4;
	}
	return 0x822078B4;
} // Block from 822078A8h-822078B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822078B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822078B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822078B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822078B4);
		  /* 822078B4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 822078B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822078B4h case    0:*/		return 0x822078B8;
		  /* 822078B8h */ case    1:  		/* addi R10, R11, 4 */
		/* 822078B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 822078B8h case    1:*/		return 0x822078BC;
		  /* 822078BCh */ case    2:  		/* addi R9, R11, 1 */
		/* 822078BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 822078BCh case    2:*/		return 0x822078C0;
		  /* 822078C0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 822078C0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 822078C0h case    3:*/		return 0x822078C4;
		  /* 822078C4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 822078C4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 822078C4h case    4:*/		return 0x822078C8;
		  /* 822078C8h */ case    5:  		/* stwx R27, <#[R11 + R3]> */
		/* 822078C8h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 822078C8h case    5:*/		return 0x822078CC;
		  /* 822078CCh */ case    6:  		/* lwz R11, <#[R20]> */
		/* 822078CCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 822078CCh case    6:*/		return 0x822078D0;
		  /* 822078D0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822078D0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822078D0h case    7:*/		return 0x822078D4;
		  /* 822078D4h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 822078D4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x822078FC;  }
		/* 822078D4h case    8:*/		return 0x822078D8;
		  /* 822078D8h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 822078D8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 822078D8h case    9:*/		return 0x822078DC;
		  /* 822078DCh */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822078DCh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822078DCh case   10:*/		return 0x822078E0;
		  /* 822078E0h */ case   11:  		/* addic. R11, R11, -4 */
		/* 822078E0h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 822078E0h case   11:*/		return 0x822078E4;
		  /* 822078E4h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 822078E4h case   12:*/		if ( regs.CR[0].eq ) { return 0x822078FC;  }
		/* 822078E4h case   12:*/		return 0x822078E8;
		  /* 822078E8h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 822078E8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822078E8h case   13:*/		return 0x822078EC;
		  /* 822078ECh */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 822078ECh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 822078ECh case   14:*/		return 0x822078F0;
		  /* 822078F0h */ case   15:  		/* addi R10, R10, 1 */
		/* 822078F0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822078F0h case   15:*/		return 0x822078F4;
		  /* 822078F4h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 822078F4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 822078F4h case   16:*/		return 0x822078F8;
		  /* 822078F8h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 822078F8h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8220790C;  }
		/* 822078F8h case   17:*/		return 0x822078FC;
	}
	return 0x822078FC;
} // Block from 822078B4h-822078FCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822078FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822078FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822078FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822078FC);
		  /* 822078FCh */ case    0:  		/* li R4, 1 */
		/* 822078FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822078FCh case    0:*/		return 0x82207900;
		  /* 82207900h */ case    1:  		/* mr R3, R19 */
		/* 82207900h case    1:*/		regs.R3 = regs.R19;
		/* 82207900h case    1:*/		return 0x82207904;
		  /* 82207904h */ case    2:  		/* bl -501820 */
		/* 82207904h case    2:*/		regs.LR = 0x82207908; return 0x8218D0C8;
		/* 82207904h case    2:*/		return 0x82207908;
		  /* 82207908h */ case    3:  		/* mr R11, R3 */
		/* 82207908h case    3:*/		regs.R11 = regs.R3;
		/* 82207908h case    3:*/		return 0x8220790C;
	}
	return 0x8220790C;
} // Block from 822078FCh-8220790Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220790Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220790C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220790C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220790C);
		  /* 8220790Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 8220790Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8220790Ch case    0:*/		return 0x82207910;
		  /* 82207910h */ case    1:  		/* mr R3, R21 */
		/* 82207910h case    1:*/		regs.R3 = regs.R21;
		/* 82207910h case    1:*/		return 0x82207914;
		  /* 82207914h */ case    2:  		/* lwz R9, <#[R1 + 96]> */
		/* 82207914h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82207914h case    2:*/		return 0x82207918;
		  /* 82207918h */ case    3:  		/* addi R8, R10, 4 */
		/* 82207918h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82207918h case    3:*/		return 0x8220791C;
		  /* 8220791Ch */ case    4:  		/* lwz R4, <#[R1 + 100]> */
		/* 8220791Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 8220791Ch case    4:*/		return 0x82207920;
		  /* 82207920h */ case    5:  		/* addi R7, R10, 1 */
		/* 82207920h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82207920h case    5:*/		return 0x82207924;
		  /* 82207924h */ case    6:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82207924h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82207924h case    6:*/		return 0x82207928;
		  /* 82207928h */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 82207928h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82207928h case    7:*/		return 0x8220792C;
		  /* 8220792Ch */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 8220792Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220792Ch case    8:*/		return 0x82207930;
		  /* 82207930h */ case    9:  		/* bl -66752 */
		/* 82207930h case    9:*/		regs.LR = 0x82207934; return 0x821F7470;
		/* 82207930h case    9:*/		return 0x82207934;
		  /* 82207934h */ case   10:  		/* lwz R3, <#[R31 + 584]> */
		/* 82207934h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 82207934h case   10:*/		return 0x82207938;
		  /* 82207938h */ case   11:  		/* bl -68896 */
		/* 82207938h case   11:*/		regs.LR = 0x8220793C; return 0x821F6C18;
		/* 82207938h case   11:*/		return 0x8220793C;
		  /* 8220793Ch */ case   12:  		/* mr R11, R3 */
		/* 8220793Ch case   12:*/		regs.R11 = regs.R3;
		/* 8220793Ch case   12:*/		return 0x82207940;
		  /* 82207940h */ case   13:  		/* li R5, 12 */
		/* 82207940h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82207940h case   13:*/		return 0x82207944;
		  /* 82207944h */ case   14:  		/* mr R4, R23 */
		/* 82207944h case   14:*/		regs.R4 = regs.R23;
		/* 82207944h case   14:*/		return 0x82207948;
		  /* 82207948h */ case   15:  		/* mr R3, R21 */
		/* 82207948h case   15:*/		regs.R3 = regs.R21;
		/* 82207948h case   15:*/		return 0x8220794C;
		  /* 8220794Ch */ case   16:  		/* stw R15, <#[R11]> */
		/* 8220794Ch case   16:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R11 + 0x00000000) );
		/* 8220794Ch case   16:*/		return 0x82207950;
		  /* 82207950h */ case   17:  		/* stw R27, <#[R11 + 4]> */
		/* 82207950h case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 82207950h case   17:*/		return 0x82207954;
		  /* 82207954h */ case   18:  		/* stw R29, <#[R11 + 8]> */
		/* 82207954h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 82207954h case   18:*/		return 0x82207958;
		  /* 82207958h */ case   19:  		/* bl -66392 */
		/* 82207958h case   19:*/		regs.LR = 0x8220795C; return 0x821F7600;
		/* 82207958h case   19:*/		return 0x8220795C;
		  /* 8220795Ch */ case   20:  		/* b -2084 */
		/* 8220795Ch case   20:*/		return 0x82207138;
		/* 8220795Ch case   20:*/		return 0x82207960;
		  /* 82207960h */ case   21:  		/* addi R3, R1, 184 */
		/* 82207960h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 82207960h case   21:*/		return 0x82207964;
		  /* 82207964h */ case   22:  		/* lwz R4, <#[R31 + 584]> */
		/* 82207964h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000248) );
		/* 82207964h case   22:*/		return 0x82207968;
		  /* 82207968h */ case   23:  		/* bl -424760 */
		/* 82207968h case   23:*/		regs.LR = 0x8220796C; return 0x8219FE30;
		/* 82207968h case   23:*/		return 0x8220796C;
		  /* 8220796Ch */ case   24:  		/* addi R3, R1, 184 */
		/* 8220796Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 8220796Ch case   24:*/		return 0x82207970;
		  /* 82207970h */ case   25:  		/* bl -85408 */
		/* 82207970h case   25:*/		regs.LR = 0x82207974; return 0x821F2BD0;
		/* 82207970h case   25:*/		return 0x82207974;
		  /* 82207974h */ case   26:  		/* addi R3, R1, 184 */
		/* 82207974h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 82207974h case   26:*/		return 0x82207978;
		  /* 82207978h */ case   27:  		/* bl -85480 */
		/* 82207978h case   27:*/		regs.LR = 0x8220797C; return 0x821F2B90;
		/* 82207978h case   27:*/		return 0x8220797C;
		  /* 8220797Ch */ case   28:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8220797Ch case   28:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220797Ch case   28:*/		return 0x82207980;
		  /* 82207980h */ case   29:  		/* bc 4, CR0_EQ, 3288 */
		/* 82207980h case   29:*/		if ( !regs.CR[0].eq ) { return 0x82208658;  }
		/* 82207980h case   29:*/		return 0x82207984;
		  /* 82207984h */ case   30:  		/* addi R3, R1, 184 */
		/* 82207984h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 82207984h case   30:*/		return 0x82207988;
		  /* 82207988h */ case   31:  		/* bl -89616 */
		/* 82207988h case   31:*/		regs.LR = 0x8220798C; return 0x821F1B78;
		/* 82207988h case   31:*/		return 0x8220798C;
		  /* 8220798Ch */ case   32:  		/* lwz R30, <#[R3]> */
		/* 8220798Ch case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8220798Ch case   32:*/		return 0x82207990;
		  /* 82207990h */ case   33:  		/* mr R28, R3 */
		/* 82207990h case   33:*/		regs.R28 = regs.R3;
		/* 82207990h case   33:*/		return 0x82207994;
		  /* 82207994h */ case   34:  		/* cmpwi CR6, R30, 2 */
		/* 82207994h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000002);
		/* 82207994h case   34:*/		return 0x82207998;
		  /* 82207998h */ case   35:  		/* bc 12, CR6_EQ, 36 */
		/* 82207998h case   35:*/		if ( regs.CR[6].eq ) { return 0x822079BC;  }
		/* 82207998h case   35:*/		return 0x8220799C;
		  /* 8220799Ch */ case   36:  		/* cmpwi CR6, R30, 1 */
		/* 8220799Ch case   36:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 8220799Ch case   36:*/		return 0x822079A0;
		  /* 822079A0h */ case   37:  		/* bc 12, CR6_EQ, 20 */
		/* 822079A0h case   37:*/		if ( regs.CR[6].eq ) { return 0x822079B4;  }
		/* 822079A0h case   37:*/		return 0x822079A4;
		  /* 822079A4h */ case   38:  		/* addi R3, R1, 184 */
		/* 822079A4h case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 822079A4h case   38:*/		return 0x822079A8;
		  /* 822079A8h */ case   39:  		/* bl -85528 */
		/* 822079A8h case   39:*/		regs.LR = 0x822079AC; return 0x821F2B90;
		/* 822079A8h case   39:*/		return 0x822079AC;
		  /* 822079ACh */ case   40:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822079ACh case   40:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822079ACh case   40:*/		return 0x822079B0;
		  /* 822079B0h */ case   41:  		/* bc 12, CR0_EQ, -44 */
		/* 822079B0h case   41:*/		if ( regs.CR[0].eq ) { return 0x82207984;  }
		/* 822079B0h case   41:*/		return 0x822079B4;
	}
	return 0x822079B4;
} // Block from 8220790Ch-822079B4h (42 instructions)

//////////////////////////////////////////////////////
// Block at 822079B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822079B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822079B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822079B4);
		  /* 822079B4h */ case    0:  		/* cmpwi CR6, R30, 2 */
		/* 822079B4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000002);
		/* 822079B4h case    0:*/		return 0x822079B8;
		  /* 822079B8h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 822079B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82207A00;  }
		/* 822079B8h case    1:*/		return 0x822079BC;
	}
	return 0x822079BC;
} // Block from 822079B4h-822079BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822079BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822079BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822079BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822079BC);
		  /* 822079BCh */ case    0:  		/* lwz R3, <#[R31 + 564]> */
		/* 822079BCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822079BCh case    0:*/		return 0x822079C0;
		  /* 822079C0h */ case    1:  		/* lwz R11, <#[R3 + 12]> */
		/* 822079C0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 822079C0h case    1:*/		return 0x822079C4;
		  /* 822079C4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 822079C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822079C4h case    2:*/		return 0x822079C8;
		  /* 822079C8h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 822079C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x822079EC;  }
		/* 822079C8h case    3:*/		return 0x822079CC;
		  /* 822079CCh */ case    4:  		/* lwz R10, <#[R11]> */
		/* 822079CCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822079CCh case    4:*/		return 0x822079D0;
		  /* 822079D0h */ case    5:  		/* lwz R9, <#[R28 + 24]> */
		/* 822079D0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000018) );
		/* 822079D0h case    5:*/		return 0x822079D4;
		  /* 822079D4h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 822079D4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 822079D4h case    6:*/		return 0x822079D8;
		  /* 822079D8h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 822079D8h case    7:*/		if ( regs.CR[6].eq ) { return 0x822079E4;  }
		/* 822079D8h case    7:*/		return 0x822079DC;
		  /* 822079DCh */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 822079DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 822079DCh case    8:*/		return 0x822079E0;
		  /* 822079E0h */ case    9:  		/* b -28 */
		/* 822079E0h case    9:*/		return 0x822079C4;
		/* 822079E0h case    9:*/		return 0x822079E4;
	}
	return 0x822079E4;
} // Block from 822079BCh-822079E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822079E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822079E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822079E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822079E4);
		  /* 822079E4h */ case    0:  		/* mr R11, R15 */
		/* 822079E4h case    0:*/		regs.R11 = regs.R15;
		/* 822079E4h case    0:*/		return 0x822079E8;
		  /* 822079E8h */ case    1:  		/* b 8 */
		/* 822079E8h case    1:*/		return 0x822079F0;
		/* 822079E8h case    1:*/		return 0x822079EC;
	}
	return 0x822079EC;
} // Block from 822079E4h-822079ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822079ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822079EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822079EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822079EC);
		  /* 822079ECh */ case    0:  		/* mr R11, R16 */
		/* 822079ECh case    0:*/		regs.R11 = regs.R16;
		/* 822079ECh case    0:*/		return 0x822079F0;
	}
	return 0x822079F0;
} // Block from 822079ECh-822079F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822079F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822079F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822079F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822079F0);
		  /* 822079F0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 822079F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 822079F0h case    0:*/		return 0x822079F4;
		  /* 822079F4h */ case    1:  		/* bc 4, CR0_EQ, -5192 */
		/* 822079F4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x822065AC;  }
		/* 822079F4h case    1:*/		return 0x822079F8;
		  /* 822079F8h */ case    2:  		/* lwz R4, <#[R28 + 24]> */
		/* 822079F8h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 822079F8h case    2:*/		return 0x822079FC;
		  /* 822079FCh */ case    3:  		/* b 68 */
		/* 822079FCh case    3:*/		return 0x82207A40;
		/* 822079FCh case    3:*/		return 0x82207A00;
	}
	return 0x82207A00;
} // Block from 822079F0h-82207A00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207A00);
		  /* 82207A00h */ case    0:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207A00h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207A00h case    0:*/		return 0x82207A04;
		  /* 82207A04h */ case    1:  		/* lwz R11, <#[R3 + 12]> */
		/* 82207A04h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82207A04h case    1:*/		return 0x82207A08;
		  /* 82207A08h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82207A08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207A08h case    2:*/		return 0x82207A0C;
		  /* 82207A0Ch */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 82207A0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82207A30;  }
		/* 82207A0Ch case    3:*/		return 0x82207A10;
		  /* 82207A10h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82207A10h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82207A10h case    4:*/		return 0x82207A14;
		  /* 82207A14h */ case    5:  		/* lwz R9, <#[R28 + 4]> */
		/* 82207A14h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000004) );
		/* 82207A14h case    5:*/		return 0x82207A18;
		  /* 82207A18h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 82207A18h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82207A18h case    6:*/		return 0x82207A1C;
		  /* 82207A1Ch */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82207A1Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82207A28;  }
		/* 82207A1Ch case    7:*/		return 0x82207A20;
		  /* 82207A20h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 82207A20h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82207A20h case    8:*/		return 0x82207A24;
		  /* 82207A24h */ case    9:  		/* b -28 */
		/* 82207A24h case    9:*/		return 0x82207A08;
		/* 82207A24h case    9:*/		return 0x82207A28;
	}
	return 0x82207A28;
} // Block from 82207A00h-82207A28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82207A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207A28);
		  /* 82207A28h */ case    0:  		/* mr R11, R15 */
		/* 82207A28h case    0:*/		regs.R11 = regs.R15;
		/* 82207A28h case    0:*/		return 0x82207A2C;
		  /* 82207A2Ch */ case    1:  		/* b 8 */
		/* 82207A2Ch case    1:*/		return 0x82207A34;
		/* 82207A2Ch case    1:*/		return 0x82207A30;
	}
	return 0x82207A30;
} // Block from 82207A28h-82207A30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82207A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207A30);
		  /* 82207A30h */ case    0:  		/* mr R11, R16 */
		/* 82207A30h case    0:*/		regs.R11 = regs.R16;
		/* 82207A30h case    0:*/		return 0x82207A34;
	}
	return 0x82207A34;
} // Block from 82207A30h-82207A34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207A34);
		  /* 82207A34h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82207A34h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82207A34h case    0:*/		return 0x82207A38;
		  /* 82207A38h */ case    1:  		/* bc 4, CR0_EQ, -5260 */
		/* 82207A38h case    1:*/		if ( !regs.CR[0].eq ) { return 0x822065AC;  }
		/* 82207A38h case    1:*/		return 0x82207A3C;
		  /* 82207A3Ch */ case    2:  		/* lwz R4, <#[R28 + 4]> */
		/* 82207A3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000004) );
		/* 82207A3Ch case    2:*/		return 0x82207A40;
	}
	return 0x82207A40;
} // Block from 82207A34h-82207A40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207A40);
		  /* 82207A40h */ case    0:  		/* mr R5, R31 */
		/* 82207A40h case    0:*/		regs.R5 = regs.R31;
		/* 82207A40h case    0:*/		return 0x82207A44;
		  /* 82207A44h */ case    1:  		/* bl 163996 */
		/* 82207A44h case    1:*/		regs.LR = 0x82207A48; return 0x8222FAE0;
		/* 82207A44h case    1:*/		return 0x82207A48;
		  /* 82207A48h */ case    2:  		/* b -5276 */
		/* 82207A48h case    2:*/		return 0x822065AC;
		/* 82207A48h case    2:*/		return 0x82207A4C;
		  /* 82207A4Ch */ case    3:  		/* addi R3, R1, 200 */
		/* 82207A4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC8);
		/* 82207A4Ch case    3:*/		return 0x82207A50;
		  /* 82207A50h */ case    4:  		/* lwz R4, <#[R31 + 584]> */
		/* 82207A50h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000248) );
		/* 82207A50h case    4:*/		return 0x82207A54;
		  /* 82207A54h */ case    5:  		/* bl -424996 */
		/* 82207A54h case    5:*/		regs.LR = 0x82207A58; return 0x8219FE30;
		/* 82207A54h case    5:*/		return 0x82207A58;
		  /* 82207A58h */ case    6:  		/* addi R3, R1, 200 */
		/* 82207A58h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC8);
		/* 82207A58h case    6:*/		return 0x82207A5C;
		  /* 82207A5Ch */ case    7:  		/* bl -85644 */
		/* 82207A5Ch case    7:*/		regs.LR = 0x82207A60; return 0x821F2BD0;
		/* 82207A5Ch case    7:*/		return 0x82207A60;
		  /* 82207A60h */ case    8:  		/* addi R3, R1, 200 */
		/* 82207A60h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC8);
		/* 82207A60h case    8:*/		return 0x82207A64;
		  /* 82207A64h */ case    9:  		/* bl -85716 */
		/* 82207A64h case    9:*/		regs.LR = 0x82207A68; return 0x821F2B90;
		/* 82207A64h case    9:*/		return 0x82207A68;
		  /* 82207A68h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82207A68h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82207A68h case   10:*/		return 0x82207A6C;
		  /* 82207A6Ch */ case   11:  		/* bc 4, CR0_EQ, 3064 */
		/* 82207A6Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82208664;  }
		/* 82207A6Ch case   11:*/		return 0x82207A70;
		  /* 82207A70h */ case   12:  		/* addi R3, R1, 200 */
		/* 82207A70h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC8);
		/* 82207A70h case   12:*/		return 0x82207A74;
		  /* 82207A74h */ case   13:  		/* bl -89852 */
		/* 82207A74h case   13:*/		regs.LR = 0x82207A78; return 0x821F1B78;
		/* 82207A74h case   13:*/		return 0x82207A78;
		  /* 82207A78h */ case   14:  		/* lwz R11, <#[R3]> */
		/* 82207A78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82207A78h case   14:*/		return 0x82207A7C;
		  /* 82207A7Ch */ case   15:  		/* mr R30, R3 */
		/* 82207A7Ch case   15:*/		regs.R30 = regs.R3;
		/* 82207A7Ch case   15:*/		return 0x82207A80;
		  /* 82207A80h */ case   16:  		/* cmpwi CR6, R11, 1 */
		/* 82207A80h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82207A80h case   16:*/		return 0x82207A84;
		  /* 82207A84h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 82207A84h case   17:*/		if ( regs.CR[6].eq ) { return 0x82207A98;  }
		/* 82207A84h case   17:*/		return 0x82207A88;
		  /* 82207A88h */ case   18:  		/* addi R3, R1, 200 */
		/* 82207A88h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC8);
		/* 82207A88h case   18:*/		return 0x82207A8C;
		  /* 82207A8Ch */ case   19:  		/* bl -85756 */
		/* 82207A8Ch case   19:*/		regs.LR = 0x82207A90; return 0x821F2B90;
		/* 82207A8Ch case   19:*/		return 0x82207A90;
		  /* 82207A90h */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82207A90h case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82207A90h case   20:*/		return 0x82207A94;
		  /* 82207A94h */ case   21:  		/* bc 12, CR0_EQ, -36 */
		/* 82207A94h case   21:*/		if ( regs.CR[0].eq ) { return 0x82207A70;  }
		/* 82207A94h case   21:*/		return 0x82207A98;
	}
	return 0x82207A98;
} // Block from 82207A40h-82207A98h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82207A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207A98);
		  /* 82207A98h */ case    0:  		/* lwz R3, <#[R31 + 564]> */
		/* 82207A98h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82207A98h case    0:*/		return 0x82207A9C;
		  /* 82207A9Ch */ case    1:  		/* lwz R11, <#[R3 + 12]> */
		/* 82207A9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82207A9Ch case    1:*/		return 0x82207AA0;
		  /* 82207AA0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82207AA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207AA0h case    2:*/		return 0x82207AA4;
		  /* 82207AA4h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 82207AA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82207AC8;  }
		/* 82207AA4h case    3:*/		return 0x82207AA8;
		  /* 82207AA8h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82207AA8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82207AA8h case    4:*/		return 0x82207AAC;
		  /* 82207AACh */ case    5:  		/* lwz R9, <#[R30 + 8]> */
		/* 82207AACh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 82207AACh case    5:*/		return 0x82207AB0;
		  /* 82207AB0h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 82207AB0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82207AB0h case    6:*/		return 0x82207AB4;
		  /* 82207AB4h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82207AB4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82207AC0;  }
		/* 82207AB4h case    7:*/		return 0x82207AB8;
		  /* 82207AB8h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 82207AB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82207AB8h case    8:*/		return 0x82207ABC;
		  /* 82207ABCh */ case    9:  		/* b -28 */
		/* 82207ABCh case    9:*/		return 0x82207AA0;
		/* 82207ABCh case    9:*/		return 0x82207AC0;
	}
	return 0x82207AC0;
} // Block from 82207A98h-82207AC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82207AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207AC0);
		  /* 82207AC0h */ case    0:  		/* mr R11, R15 */
		/* 82207AC0h case    0:*/		regs.R11 = regs.R15;
		/* 82207AC0h case    0:*/		return 0x82207AC4;
		  /* 82207AC4h */ case    1:  		/* b 8 */
		/* 82207AC4h case    1:*/		return 0x82207ACC;
		/* 82207AC4h case    1:*/		return 0x82207AC8;
	}
	return 0x82207AC8;
} // Block from 82207AC0h-82207AC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82207AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207AC8);
		  /* 82207AC8h */ case    0:  		/* mr R11, R16 */
		/* 82207AC8h case    0:*/		regs.R11 = regs.R16;
		/* 82207AC8h case    0:*/		return 0x82207ACC;
	}
	return 0x82207ACC;
} // Block from 82207AC8h-82207ACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207ACC);
		  /* 82207ACCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82207ACCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82207ACCh case    0:*/		return 0x82207AD0;
		  /* 82207AD0h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 82207AD0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82207AE0;  }
		/* 82207AD0h case    1:*/		return 0x82207AD4;
		  /* 82207AD4h */ case    2:  		/* mr R5, R31 */
		/* 82207AD4h case    2:*/		regs.R5 = regs.R31;
		/* 82207AD4h case    2:*/		return 0x82207AD8;
		  /* 82207AD8h */ case    3:  		/* lwz R4, <#[R30 + 8]> */
		/* 82207AD8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 82207AD8h case    3:*/		return 0x82207ADC;
		  /* 82207ADCh */ case    4:  		/* bl 163844 */
		/* 82207ADCh case    4:*/		regs.LR = 0x82207AE0; return 0x8222FAE0;
		/* 82207ADCh case    4:*/		return 0x82207AE0;
	}
	return 0x82207AE0;
} // Block from 82207ACCh-82207AE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82207AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207AE0);
		  /* 82207AE0h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82207AE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82207AE0h case    0:*/		return 0x82207AE4;
		  /* 82207AE4h */ case    1:  		/* bc 12, CR6_EQ, 204 */
		/* 82207AE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82207BB0;  }
		/* 82207AE4h case    1:*/		return 0x82207AE8;
		  /* 82207AE8h */ case    2:  		/* mr R3, R31 */
		/* 82207AE8h case    2:*/		regs.R3 = regs.R31;
		/* 82207AE8h case    2:*/		return 0x82207AEC;
		  /* 82207AECh */ case    3:  		/* bl -105332 */
		/* 82207AECh case    3:*/		regs.LR = 0x82207AF0; return 0x821EDF78;
		/* 82207AECh case    3:*/		return 0x82207AF0;
		  /* 82207AF0h */ case    4:  		/* lwz R11, <#[R20]> */
		/* 82207AF0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207AF0h case    4:*/		return 0x82207AF4;
		  /* 82207AF4h */ case    5:  		/* mr R30, R3 */
		/* 82207AF4h case    5:*/		regs.R30 = regs.R3;
		/* 82207AF4h case    5:*/		return 0x82207AF8;
		  /* 82207AF8h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82207AF8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82207AF8h case    6:*/		return 0x82207AFC;
		  /* 82207AFCh */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 82207AFCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x82207B24;  }
		/* 82207AFCh case    7:*/		return 0x82207B00;
		  /* 82207B00h */ case    8:  		/* lwz R11, <#[R19]> */
		/* 82207B00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82207B00h case    8:*/		return 0x82207B04;
		  /* 82207B04h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207B04h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207B04h case    9:*/		return 0x82207B08;
		  /* 82207B08h */ case   10:  		/* addic. R3, R11, -4 */
		/* 82207B08h case   10:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82207B08h case   10:*/		return 0x82207B0C;
		  /* 82207B0Ch */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 82207B0Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x82207B24;  }
		/* 82207B0Ch case   11:*/		return 0x82207B10;
		  /* 82207B10h */ case   12:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207B10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207B10h case   12:*/		return 0x82207B14;
		  /* 82207B14h */ case   13:  		/* lwz R10, <#[R3 + 12]> */
		/* 82207B14h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82207B14h case   13:*/		return 0x82207B18;
		  /* 82207B18h */ case   14:  		/* addi R11, R11, 1 */
		/* 82207B18h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82207B18h case   14:*/		return 0x82207B1C;
		  /* 82207B1Ch */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 82207B1Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82207B1Ch case   15:*/		return 0x82207B20;
		  /* 82207B20h */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 82207B20h case   16:*/		if ( !regs.CR[6].gt ) { return 0x82207B30;  }
		/* 82207B20h case   16:*/		return 0x82207B24;
	}
	return 0x82207B24;
} // Block from 82207AE0h-82207B24h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82207B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207B24);
		  /* 82207B24h */ case    0:  		/* li R4, 1 */
		/* 82207B24h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82207B24h case    0:*/		return 0x82207B28;
		  /* 82207B28h */ case    1:  		/* mr R3, R19 */
		/* 82207B28h case    1:*/		regs.R3 = regs.R19;
		/* 82207B28h case    1:*/		return 0x82207B2C;
		  /* 82207B2Ch */ case    2:  		/* bl -502372 */
		/* 82207B2Ch case    2:*/		regs.LR = 0x82207B30; return 0x8218D0C8;
		/* 82207B2Ch case    2:*/		return 0x82207B30;
	}
	return 0x82207B30;
} // Block from 82207B24h-82207B30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207B30);
		  /* 82207B30h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82207B30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82207B30h case    0:*/		return 0x82207B34;
		  /* 82207B34h */ case    1:  		/* addi R10, R11, 1 */
		/* 82207B34h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82207B34h case    1:*/		return 0x82207B38;
		  /* 82207B38h */ case    2:  		/* addi R11, R11, 4 */
		/* 82207B38h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82207B38h case    2:*/		return 0x82207B3C;
		  /* 82207B3Ch */ case    3:  		/* stw R10, <#[R3 + 8]> */
		/* 82207B3Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82207B3Ch case    3:*/		return 0x82207B40;
		  /* 82207B40h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82207B40h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82207B40h case    4:*/		return 0x82207B44;
	}
	return 0x82207B44;
} // Block from 82207B30h-82207B44h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82207B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207B44);
		  /* 82207B44h */ case    0:  		/* stwx R30, <#[R11 + R3]> */
		/* 82207B44h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82207B44h case    0:*/		return 0x82207B48;
		  /* 82207B48h */ case    1:  		/* lwz R11, <#[R20]> */
		/* 82207B48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82207B48h case    1:*/		return 0x82207B4C;
		  /* 82207B4Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82207B4Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82207B4Ch case    2:*/		return 0x82207B50;
		  /* 82207B50h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 82207B50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82207B78;  }
		/* 82207B50h case    3:*/		return 0x82207B54;
		  /* 82207B54h */ case    4:  		/* lwz R11, <#[R19]> */
		/* 82207B54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82207B54h case    4:*/		return 0x82207B58;
		  /* 82207B58h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207B58h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207B58h case    5:*/		return 0x82207B5C;
		  /* 82207B5Ch */ case    6:  		/* addic. R11, R11, -4 */
		/* 82207B5Ch case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82207B5Ch case    6:*/		return 0x82207B60;
		  /* 82207B60h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 82207B60h case    7:*/		if ( regs.CR[0].eq ) { return 0x82207B78;  }
		/* 82207B60h case    7:*/		return 0x82207B64;
		  /* 82207B64h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 82207B64h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82207B64h case    8:*/		return 0x82207B68;
		  /* 82207B68h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 82207B68h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82207B68h case    9:*/		return 0x82207B6C;
		  /* 82207B6Ch */ case   10:  		/* addi R10, R10, 1 */
		/* 82207B6Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82207B6Ch case   10:*/		return 0x82207B70;
		  /* 82207B70h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 82207B70h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82207B70h case   11:*/		return 0x82207B74;
		  /* 82207B74h */ case   12:  		/* bc 4, CR6_GT, 20 */
		/* 82207B74h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82207B88;  }
		/* 82207B74h case   12:*/		return 0x82207B78;
	}
	return 0x82207B78;
} // Block from 82207B44h-82207B78h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82207B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207B78);
		  /* 82207B78h */ case    0:  		/* li R4, 1 */
		/* 82207B78h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82207B78h case    0:*/		return 0x82207B7C;
		  /* 82207B7Ch */ case    1:  		/* mr R3, R19 */
		/* 82207B7Ch case    1:*/		regs.R3 = regs.R19;
		/* 82207B7Ch case    1:*/		return 0x82207B80;
		  /* 82207B80h */ case    2:  		/* bl -502456 */
		/* 82207B80h case    2:*/		regs.LR = 0x82207B84; return 0x8218D0C8;
		/* 82207B80h case    2:*/		return 0x82207B84;
		  /* 82207B84h */ case    3:  		/* mr R11, R3 */
		/* 82207B84h case    3:*/		regs.R11 = regs.R3;
		/* 82207B84h case    3:*/		return 0x82207B88;
	}
	return 0x82207B88;
} // Block from 82207B78h-82207B88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207B88);
		  /* 82207B88h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82207B88h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82207B88h case    0:*/		return 0x82207B8C;
		  /* 82207B8Ch */ case    1:  		/* mr R4, R24 */
		/* 82207B8Ch case    1:*/		regs.R4 = regs.R24;
		/* 82207B8Ch case    1:*/		return 0x82207B90;
		  /* 82207B90h */ case    2:  		/* mr R3, R21 */
		/* 82207B90h case    2:*/		regs.R3 = regs.R21;
		/* 82207B90h case    2:*/		return 0x82207B94;
		  /* 82207B94h */ case    3:  		/* addi R9, R10, 4 */
		/* 82207B94h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82207B94h case    3:*/		return 0x82207B98;
		  /* 82207B98h */ case    4:  		/* addi R8, R10, 1 */
		/* 82207B98h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82207B98h case    4:*/		return 0x82207B9C;
		  /* 82207B9Ch */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82207B9Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82207B9Ch case    5:*/		return 0x82207BA0;
		  /* 82207BA0h */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 82207BA0h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82207BA0h case    6:*/		return 0x82207BA4;
		  /* 82207BA4h */ case    7:  		/* stwx R29, <#[R10 + R11]> */
		/* 82207BA4h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82207BA4h case    7:*/		return 0x82207BA8;
		  /* 82207BA8h */ case    8:  		/* bl -67384 */
		/* 82207BA8h case    8:*/		regs.LR = 0x82207BAC; return 0x821F7470;
		/* 82207BA8h case    8:*/		return 0x82207BAC;
		  /* 82207BACh */ case    9:  		/* mr R24, R16 */
		/* 82207BACh case    9:*/		regs.R24 = regs.R16;
		/* 82207BACh case    9:*/		return 0x82207BB0;
	}
	return 0x82207BB0;
} // Block from 82207B88h-82207BB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82207BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207BB0);
		  /* 82207BB0h */ case    0:  		/* mr R22, R16 */
		/* 82207BB0h case    0:*/		regs.R22 = regs.R16;
		/* 82207BB0h case    0:*/		return 0x82207BB4;
		  /* 82207BB4h */ case    1:  		/* b 272 */
		/* 82207BB4h case    1:*/		return 0x82207CC4;
		/* 82207BB4h case    1:*/		return 0x82207BB8;
	}
	return 0x82207BB8;
} // Block from 82207BB0h-82207BB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82207BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207BB8);
		  /* 82207BB8h */ case    0:  		/* lwz R11, <#[R23 + 16]> */
		/* 82207BB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 82207BB8h case    0:*/		return 0x82207BBC;
		  /* 82207BBCh */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 82207BBCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82207BBCh case    1:*/		return 0x82207BC0;
		  /* 82207BC0h */ case    2:  		/* bc 4, CR6_EQ, 260 */
		/* 82207BC0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82207CC4;  }
		/* 82207BC0h case    2:*/		return 0x82207BC4;
		  /* 82207BC4h */ case    3:  		/* mr R5, R18 */
		/* 82207BC4h case    3:*/		regs.R5 = regs.R18;
		/* 82207BC4h case    3:*/		return 0x82207BC8;
		  /* 82207BC8h */ case    4:  		/* mr R4, R23 */
		/* 82207BC8h case    4:*/		regs.R4 = regs.R23;
		/* 82207BC8h case    4:*/		return 0x82207BCC;
		  /* 82207BCCh */ case    5:  		/* mr R3, R31 */
		/* 82207BCCh case    5:*/		regs.R3 = regs.R31;
		/* 82207BCCh case    5:*/		return 0x82207BD0;
		  /* 82207BD0h */ case    6:  		/* bl -51880 */
		/* 82207BD0h case    6:*/		regs.LR = 0x82207BD4; return 0x821FB128;
		/* 82207BD0h case    6:*/		return 0x82207BD4;
		  /* 82207BD4h */ case    7:  		/* li R5, 12 */
		/* 82207BD4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82207BD4h case    7:*/		return 0x82207BD8;
		  /* 82207BD8h */ case    8:  		/* mr R4, R23 */
		/* 82207BD8h case    8:*/		regs.R4 = regs.R23;
		/* 82207BD8h case    8:*/		return 0x82207BDC;
		  /* 82207BDCh */ case    9:  		/* mr R3, R21 */
		/* 82207BDCh case    9:*/		regs.R3 = regs.R21;
		/* 82207BDCh case    9:*/		return 0x82207BE0;
		  /* 82207BE0h */ case   10:  		/* bl -67040 */
		/* 82207BE0h case   10:*/		regs.LR = 0x82207BE4; return 0x821F7600;
		/* 82207BE0h case   10:*/		return 0x82207BE4;
		  /* 82207BE4h */ case   11:  		/* addi R11, R17, 4 */
		/* 82207BE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 82207BE4h case   11:*/		return 0x82207BE8;
		  /* 82207BE8h */ case   12:  		/* lwz R11, <#[R17 + 4]> */
		/* 82207BE8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 82207BE8h case   12:*/		return 0x82207BEC;
		  /* 82207BECh */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82207BECh case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82207BECh case   13:*/		return 0x82207BF0;
		  /* 82207BF0h */ case   14:  		/* bc 4, CR0_EQ, 212 */
		/* 82207BF0h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82207CC4;  }
		/* 82207BF0h case   14:*/		return 0x82207BF4;
		  /* 82207BF4h */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 82207BF4h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82207BF4h case   15:*/		return 0x82207BF8;
		  /* 82207BF8h */ case   16:  		/* bc 12, CR0_EQ, 204 */
		/* 82207BF8h case   16:*/		if ( regs.CR[0].eq ) { return 0x82207CC4;  }
		/* 82207BF8h case   16:*/		return 0x82207BFC;
		  /* 82207BFCh */ case   17:  		/* cmplwi CR6, R24, 0 */
		/* 82207BFCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82207BFCh case   17:*/		return 0x82207C00;
		  /* 82207C00h */ case   18:  		/* bc 12, CR6_EQ, 152 */
		/* 82207C00h case   18:*/		if ( regs.CR[6].eq ) { return 0x82207C98;  }
		/* 82207C00h case   18:*/		return 0x82207C04;
		  /* 82207C04h */ case   19:  		/* lwz R10, <#[R24 + 4]> */
		/* 82207C04h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 82207C04h case   19:*/		return 0x82207C08;
		  /* 82207C08h */ case   20:  		/* cmpwi CR6, R10, 12 */
		/* 82207C08h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000C);
		/* 82207C08h case   20:*/		return 0x82207C0C;
		  /* 82207C0Ch */ case   21:  		/* bc 4, CR6_EQ, 48 */
		/* 82207C0Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x82207C3C;  }
		/* 82207C0Ch case   21:*/		return 0x82207C10;
		  /* 82207C10h */ case   22:  		/* lwz R11, <#[R24 + 20]> */
		/* 82207C10h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 82207C10h case   22:*/		return 0x82207C14;
		  /* 82207C14h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 82207C14h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207C14h case   23:*/		return 0x82207C18;
		  /* 82207C18h */ case   24:  		/* bc 12, CR6_EQ, 36 */
		/* 82207C18h case   24:*/		if ( regs.CR[6].eq ) { return 0x82207C3C;  }
		/* 82207C18h case   24:*/		return 0x82207C1C;
		  /* 82207C1Ch */ case   25:  		/* lwz R9, <#[R11 + 4]> */
		/* 82207C1Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82207C1Ch case   25:*/		return 0x82207C20;
		  /* 82207C20h */ case   26:  		/* cmpwi CR6, R9, 14 */
		/* 82207C20h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000E);
		/* 82207C20h case   26:*/		return 0x82207C24;
		  /* 82207C24h */ case   27:  		/* bc 4, CR6_EQ, 24 */
		/* 82207C24h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82207C3C;  }
		/* 82207C24h case   27:*/		return 0x82207C28;
		  /* 82207C28h */ case   28:  		/* lwz R11, <#[R11 + 28]> */
		/* 82207C28h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82207C28h case   28:*/		return 0x82207C2C;
		  /* 82207C2Ch */ case   29:  		/* addi R11, R11, -26 */
		/* 82207C2Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFE6);
		/* 82207C2Ch case   29:*/		return 0x82207C30;
		  /* 82207C30h */ case   30:  		/* cntlzw R11, R11 */
		/* 82207C30h case   30:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82207C30h case   30:*/		return 0x82207C34;
		  /* 82207C34h */ case   31:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82207C34h case   31:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82207C34h case   31:*/		return 0x82207C38;
		  /* 82207C38h */ case   32:  		/* b 8 */
		/* 82207C38h case   32:*/		return 0x82207C40;
		/* 82207C38h case   32:*/		return 0x82207C3C;
	}
	return 0x82207C3C;
} // Block from 82207BB8h-82207C3Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 82207C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207C3C);
		  /* 82207C3Ch */ case    0:  		/* mr R11, R16 */
		/* 82207C3Ch case    0:*/		regs.R11 = regs.R16;
		/* 82207C3Ch case    0:*/		return 0x82207C40;
	}
	return 0x82207C40;
} // Block from 82207C3Ch-82207C40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207C40);
		  /* 82207C40h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82207C40h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82207C40h case    0:*/		return 0x82207C44;
		  /* 82207C44h */ case    1:  		/* bc 4, CR0_EQ, -6688 */
		/* 82207C44h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82206224;  }
		/* 82207C44h case    1:*/		return 0x82207C48;
		  /* 82207C48h */ case    2:  		/* cmpwi CR6, R10, 1 */
		/* 82207C48h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82207C48h case    2:*/		return 0x82207C4C;
		  /* 82207C4Ch */ case    3:  		/* bc 4, CR6_EQ, 76 */
		/* 82207C4Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82207C98;  }
		/* 82207C4Ch case    3:*/		return 0x82207C50;
		  /* 82207C50h */ case    4:  		/* lwz R11, <#[R24 + 8]> */
		/* 82207C50h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 82207C50h case    4:*/		return 0x82207C54;
		  /* 82207C54h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82207C54h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82207C54h case    5:*/		return 0x82207C58;
		  /* 82207C58h */ case    6:  		/* cmpwi CR6, R10, 12 */
		/* 82207C58h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000C);
		/* 82207C58h case    6:*/		return 0x82207C5C;
		  /* 82207C5Ch */ case    7:  		/* bc 4, CR6_EQ, 48 */
		/* 82207C5Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82207C8C;  }
		/* 82207C5Ch case    7:*/		return 0x82207C60;
		  /* 82207C60h */ case    8:  		/* lwz R11, <#[R11 + 20]> */
		/* 82207C60h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82207C60h case    8:*/		return 0x82207C64;
		  /* 82207C64h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82207C64h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207C64h case    9:*/		return 0x82207C68;
		  /* 82207C68h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 82207C68h case   10:*/		if ( regs.CR[6].eq ) { return 0x82207C8C;  }
		/* 82207C68h case   10:*/		return 0x82207C6C;
		  /* 82207C6Ch */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 82207C6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82207C6Ch case   11:*/		return 0x82207C70;
		  /* 82207C70h */ case   12:  		/* cmpwi CR6, R10, 14 */
		/* 82207C70h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 82207C70h case   12:*/		return 0x82207C74;
		  /* 82207C74h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 82207C74h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82207C8C;  }
		/* 82207C74h case   13:*/		return 0x82207C78;
		  /* 82207C78h */ case   14:  		/* lwz R11, <#[R11 + 28]> */
		/* 82207C78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82207C78h case   14:*/		return 0x82207C7C;
		  /* 82207C7Ch */ case   15:  		/* addi R11, R11, -26 */
		/* 82207C7Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFE6);
		/* 82207C7Ch case   15:*/		return 0x82207C80;
		  /* 82207C80h */ case   16:  		/* cntlzw R11, R11 */
		/* 82207C80h case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82207C80h case   16:*/		return 0x82207C84;
		  /* 82207C84h */ case   17:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82207C84h case   17:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82207C84h case   17:*/		return 0x82207C88;
		  /* 82207C88h */ case   18:  		/* b 8 */
		/* 82207C88h case   18:*/		return 0x82207C90;
		/* 82207C88h case   18:*/		return 0x82207C8C;
	}
	return 0x82207C8C;
} // Block from 82207C40h-82207C8Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82207C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207C8C);
		  /* 82207C8Ch */ case    0:  		/* mr R11, R16 */
		/* 82207C8Ch case    0:*/		regs.R11 = regs.R16;
		/* 82207C8Ch case    0:*/		return 0x82207C90;
	}
	return 0x82207C90;
} // Block from 82207C8Ch-82207C90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207C90);
		  /* 82207C90h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82207C90h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82207C90h case    0:*/		return 0x82207C94;
		  /* 82207C94h */ case    1:  		/* bc 4, CR0_EQ, -6768 */
		/* 82207C94h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82206224;  }
		/* 82207C94h case    1:*/		return 0x82207C98;
	}
	return 0x82207C98;
} // Block from 82207C90h-82207C98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82207C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207C98);
		  /* 82207C98h */ case    0:  		/* addi R10, R1, 336 */
		/* 82207C98h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x150);
		/* 82207C98h case    0:*/		return 0x82207C9C;
		  /* 82207C9Ch */ case    1:  		/* addi R9, R1, 96 */
		/* 82207C9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82207C9Ch case    1:*/		return 0x82207CA0;
		  /* 82207CA0h */ case    2:  		/* addi R8, R1, 100 */
		/* 82207CA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82207CA0h case    2:*/		return 0x82207CA4;
		  /* 82207CA4h */ case    3:  		/* li R7, 3 */
		/* 82207CA4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82207CA4h case    3:*/		return 0x82207CA8;
		  /* 82207CA8h */ case    4:  		/* li R6, 0 */
		/* 82207CA8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82207CA8h case    4:*/		return 0x82207CAC;
		  /* 82207CACh */ case    5:  		/* li R5, 0 */
		/* 82207CACh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82207CACh case    5:*/		return 0x82207CB0;
		  /* 82207CB0h */ case    6:  		/* mr R4, R17 */
		/* 82207CB0h case    6:*/		regs.R4 = regs.R17;
		/* 82207CB0h case    6:*/		return 0x82207CB4;
		  /* 82207CB4h */ case    7:  		/* mr R3, R31 */
		/* 82207CB4h case    7:*/		regs.R3 = regs.R31;
		/* 82207CB4h case    7:*/		return 0x82207CB8;
		  /* 82207CB8h */ case    8:  		/* bl -60304 */
		/* 82207CB8h case    8:*/		regs.LR = 0x82207CBC; return 0x821F9128;
		/* 82207CB8h case    8:*/		return 0x82207CBC;
	}
	return 0x82207CBC;
} // Block from 82207C98h-82207CBCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82207CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207CBC);
		  /* 82207CBCh */ case    0:  		/* lwz R24, <#[R1 + 100]> */
		/* 82207CBCh case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000064) );
		/* 82207CBCh case    0:*/		return 0x82207CC0;
	}
	return 0x82207CC0;
} // Block from 82207CBCh-82207CC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207CC0);
		  /* 82207CC0h */ case    0:  		/* lwz R29, <#[R1 + 96]> */
		/* 82207CC0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82207CC0h case    0:*/		return 0x82207CC4;
	}
	return 0x82207CC4;
} // Block from 82207CC0h-82207CC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207CC4);
		  /* 82207CC4h */ case    0:  		/* li R11, 10 */
		/* 82207CC4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 82207CC4h case    0:*/		return 0x82207CC8;
		  /* 82207CC8h */ case    1:  		/* stw R16, <#[R1 + 92]> */
		/* 82207CC8h case    1:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207CC8h case    1:*/		return 0x82207CCC;
		  /* 82207CCCh */ case    2:  		/* li R10, 9 */
		/* 82207CCCh case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 82207CCCh case    2:*/		return 0x82207CD0;
		  /* 82207CD0h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 82207CD0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82207CD0h case    3:*/		return 0x82207CD4;
		  /* 82207CD4h */ case    4:  		/* li R9, 11 */
		/* 82207CD4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xB);
		/* 82207CD4h case    4:*/		return 0x82207CD8;
		  /* 82207CD8h */ case    5:  		/* li R8, 8 */
		/* 82207CD8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x8);
		/* 82207CD8h case    5:*/		return 0x82207CDC;
		  /* 82207CDCh */ case    6:  		/* li R7, 7 */
		/* 82207CDCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x7);
		/* 82207CDCh case    6:*/		return 0x82207CE0;
		  /* 82207CE0h */ case    7:  		/* li R6, 6 */
		/* 82207CE0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x6);
		/* 82207CE0h case    7:*/		return 0x82207CE4;
		  /* 82207CE4h */ case    8:  		/* li R5, 5 */
		/* 82207CE4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82207CE4h case    8:*/		return 0x82207CE8;
		  /* 82207CE8h */ case    9:  		/* li R4, 4 */
		/* 82207CE8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82207CE8h case    9:*/		return 0x82207CEC;
		  /* 82207CECh */ case   10:  		/* li R3, 3 */
		/* 82207CECh case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82207CECh case   10:*/		return 0x82207CF0;
		  /* 82207CF0h */ case   11:  		/* bl -115240 */
		/* 82207CF0h case   11:*/		regs.LR = 0x82207CF4; return 0x821EBAC8;
		/* 82207CF0h case   11:*/		return 0x82207CF4;
		  /* 82207CF4h */ case   12:  		/* lwz R11, <#[R31 + 576]> */
		/* 82207CF4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000240) );
		/* 82207CF4h case   12:*/		return 0x82207CF8;
		  /* 82207CF8h */ case   13:  		/* stw R16, <#[R1 + 128]> */
		/* 82207CF8h case   13:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000080) );
		/* 82207CF8h case   13:*/		return 0x82207CFC;
		  /* 82207CFCh */ case   14:  		/* mr R28, R3 */
		/* 82207CFCh case   14:*/		regs.R28 = regs.R3;
		/* 82207CFCh case   14:*/		return 0x82207D00;
		  /* 82207D00h */ case   15:  		/* lwz R10, <#[R11 + 4]> */
		/* 82207D00h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82207D00h case   15:*/		return 0x82207D04;
		  /* 82207D04h */ case   16:  		/* stw R11, <#[R1 + 120]> */
		/* 82207D04h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 82207D04h case   16:*/		return 0x82207D08;
		  /* 82207D08h */ case   17:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 82207D08h case   17:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 82207D08h case   17:*/		return 0x82207D0C;
		  /* 82207D0Ch */ case   18:  		/* addic R11, R11, -1 */
		/* 82207D0Ch case   18:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82207D0Ch case   18:*/		return 0x82207D10;
		  /* 82207D10h */ case   19:  		/* subfe R11, R11, R11 */
		/* 82207D10h case   19:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82207D10h case   19:*/		return 0x82207D14;
		  /* 82207D14h */ case   20:  		/* and R11, R11, R10 */
		/* 82207D14h case   20:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82207D14h case   20:*/		return 0x82207D18;
		  /* 82207D18h */ case   21:  		/* stw R11, <#[R1 + 124]> */
		/* 82207D18h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 82207D18h case   21:*/		return 0x82207D1C;
		  /* 82207D1Ch */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 82207D1Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207D1Ch case   22:*/		return 0x82207D20;
		  /* 82207D20h */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 82207D20h case   23:*/		if ( regs.CR[6].eq ) { return 0x82207D38;  }
		/* 82207D20h case   23:*/		return 0x82207D24;
		  /* 82207D24h */ case   24:  		/* lwz R10, <#[R11 + 8]> */
		/* 82207D24h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82207D24h case   24:*/		return 0x82207D28;
		  /* 82207D28h */ case   25:  		/* lwz R9, <#[R1 + 128]> */
		/* 82207D28h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 82207D28h case   25:*/		return 0x82207D2C;
		  /* 82207D2Ch */ case   26:  		/* cmplw CR6, R9, R10 */
		/* 82207D2Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82207D2Ch case   26:*/		return 0x82207D30;
		  /* 82207D30h */ case   27:  		/* mr R10, R16 */
		/* 82207D30h case   27:*/		regs.R10 = regs.R16;
		/* 82207D30h case   27:*/		return 0x82207D34;
		  /* 82207D34h */ case   28:  		/* bc 4, CR6_EQ, 8 */
		/* 82207D34h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82207D3C;  }
		/* 82207D34h case   28:*/		return 0x82207D38;
	}
	return 0x82207D38;
} // Block from 82207CC4h-82207D38h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82207D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207D38);
		  /* 82207D38h */ case    0:  		/* mr R10, R15 */
		/* 82207D38h case    0:*/		regs.R10 = regs.R15;
		/* 82207D38h case    0:*/		return 0x82207D3C;
	}
	return 0x82207D3C;
} // Block from 82207D38h-82207D3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82207D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207D3C);
		  /* 82207D3Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82207D3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82207D3Ch case    0:*/		return 0x82207D40;
		  /* 82207D40h */ case    1:  		/* bc 4, CR0_EQ, -6940 */
		/* 82207D40h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82206224;  }
		/* 82207D40h case    1:*/		return 0x82207D44;
		  /* 82207D44h */ case    2:  		/* stw R16, <#[R1 + 84]> */
		/* 82207D44h case    2:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 82207D44h case    2:*/		return 0x82207D48;
		  /* 82207D48h */ case    3:  		/* li R10, 0 */
		/* 82207D48h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82207D48h case    3:*/		return 0x82207D4C;
		  /* 82207D4Ch */ case    4:  		/* lwz R6, <#[R1 + 128]> */
		/* 82207D4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 82207D4Ch case    4:*/		return 0x82207D50;
		  /* 82207D50h */ case    5:  		/* li R9, 0 */
		/* 82207D50h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82207D50h case    5:*/		return 0x82207D54;
		  /* 82207D54h */ case    6:  		/* li R8, 0 */
		/* 82207D54h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207D54h case    6:*/		return 0x82207D58;
		  /* 82207D58h */ case    7:  		/* stw R16, <#[R1 + 92]> */
		/* 82207D58h case    7:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207D58h case    7:*/		return 0x82207D5C;
		  /* 82207D5Ch */ case    8:  		/* addi R5, R6, 2 */
		/* 82207D5Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R6,0x2);
		/* 82207D5Ch case    8:*/		return 0x82207D60;
		  /* 82207D60h */ case    9:  		/* li R7, 0 */
		/* 82207D60h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82207D60h case    9:*/		return 0x82207D64;
		  /* 82207D64h */ case   10:  		/* rlwinm R3, R5, 3, 0, 28 */
		/* 82207D64h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R3,regs.R5);
		/* 82207D64h case   10:*/		return 0x82207D68;
		  /* 82207D68h */ case   11:  		/* li R6, 0 */
		/* 82207D68h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82207D68h case   11:*/		return 0x82207D6C;
		  /* 82207D6Ch */ case   12:  		/* li R5, 0 */
		/* 82207D6Ch case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82207D6Ch case   12:*/		return 0x82207D70;
		  /* 82207D70h */ case   13:  		/* li R4, 0 */
		/* 82207D70h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82207D70h case   13:*/		return 0x82207D74;
		  /* 82207D74h */ case   14:  		/* lwzx R30, <#[R3 + R11]> */
		/* 82207D74h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82207D74h case   14:*/		return 0x82207D78;
		  /* 82207D78h */ case   15:  		/* mr R3, R30 */
		/* 82207D78h case   15:*/		regs.R3 = regs.R30;
		/* 82207D78h case   15:*/		return 0x82207D7C;
		  /* 82207D7Ch */ case   16:  		/* bl -115380 */
		/* 82207D7Ch case   16:*/		regs.LR = 0x82207D80; return 0x821EBAC8;
		/* 82207D7Ch case   16:*/		return 0x82207D80;
		  /* 82207D80h */ case   17:  		/* and. R11, R3, R28 */
		/* 82207D80h case   17:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R28);
		/* 82207D80h case   17:*/		return 0x82207D84;
		  /* 82207D84h */ case   18:  		/* addi R3, R1, 120 */
		/* 82207D84h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x78);
		/* 82207D84h case   18:*/		return 0x82207D88;
		  /* 82207D88h */ case   19:  		/* bc 12, CR0_EQ, 36 */
		/* 82207D88h case   19:*/		if ( regs.CR[0].eq ) { return 0x82207DAC;  }
		/* 82207D88h case   19:*/		return 0x82207D8C;
		  /* 82207D8Ch */ case   20:  		/* bl -86868 */
		/* 82207D8Ch case   20:*/		regs.LR = 0x82207D90; return 0x821F2A38;
		/* 82207D8Ch case   20:*/		return 0x82207D90;
		  /* 82207D90h */ case   21:  		/* lwz R11, <#[R1 + 124]> */
		/* 82207D90h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 82207D90h case   21:*/		return 0x82207D94;
		  /* 82207D94h */ case   22:  		/* cmpwi CR6, R30, 11 */
		/* 82207D94h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x0000000B);
		/* 82207D94h case   22:*/		return 0x82207D98;
		  /* 82207D98h */ case   23:  		/* bc 4, CR6_EQ, -124 */
		/* 82207D98h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82207D1C;  }
		/* 82207D98h case   23:*/		return 0x82207D9C;
		  /* 82207D9Ch */ case   24:  		/* lwz R10, <#[R31 + 40]> */
		/* 82207D9Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82207D9Ch case   24:*/		return 0x82207DA0;
		  /* 82207DA0h */ case   25:  		/* addi R10, R10, -2 */
		/* 82207DA0h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 82207DA0h case   25:*/		return 0x82207DA4;
		  /* 82207DA4h */ case   26:  		/* stw R10, <#[R31 + 40]> */
		/* 82207DA4h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82207DA4h case   26:*/		return 0x82207DA8;
		  /* 82207DA8h */ case   27:  		/* b -140 */
		/* 82207DA8h case   27:*/		return 0x82207D1C;
		/* 82207DA8h case   27:*/		return 0x82207DAC;
	}
	return 0x82207DAC;
} // Block from 82207D3Ch-82207DACh (28 instructions)

//////////////////////////////////////////////////////
// Block at 82207DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207DAC);
		  /* 82207DACh */ case    0:  		/* bl -290636 */
		/* 82207DACh case    0:*/		regs.LR = 0x82207DB0; return 0x821C0E60;
		/* 82207DACh case    0:*/		return 0x82207DB0;
		  /* 82207DB0h */ case    1:  		/* lwz R11, <#[R1 + 124]> */
		/* 82207DB0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 82207DB0h case    1:*/		return 0x82207DB4;
		  /* 82207DB4h */ case    2:  		/* b -152 */
		/* 82207DB4h case    2:*/		return 0x82207D1C;
		/* 82207DB4h case    2:*/		return 0x82207DB8;
	}
	return 0x82207DB8;
} // Block from 82207DACh-82207DB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207DB8);
		  /* 82207DB8h */ case    0:  		/* lwz R3, <#[R31 + 572]> */
		/* 82207DB8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000023C) );
		/* 82207DB8h case    0:*/		return 0x82207DBC;
		  /* 82207DBCh */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 82207DBCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82207DBCh case    1:*/		return 0x82207DC0;
		  /* 82207DC0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82207DC0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82207DC0h case    2:*/		return 0x82207DC4;
		  /* 82207DC4h */ case    3:  		/* bc 4, CR0_EQ, 484 */
		/* 82207DC4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82207FA8;  }
		/* 82207DC4h case    3:*/		return 0x82207DC8;
		  /* 82207DC8h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82207DC8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82207DC8h case    4:*/		return 0x82207DCC;
		  /* 82207DCCh */ case    5:  		/* bc 12, CR0_EQ, 476 */
		/* 82207DCCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82207FA8;  }
		/* 82207DCCh case    5:*/		return 0x82207DD0;
		  /* 82207DD0h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82207DD0h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82207DD0h case    6:*/		return 0x82207DD4;
		  /* 82207DD4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82207DD4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82207DD4h case    7:*/		return 0x82207DD8;
		  /* 82207DD8h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 82207DD8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82207DE4;  }
		/* 82207DD8h case    8:*/		return 0x82207DDC;
		  /* 82207DDCh */ case    9:  		/* mr R4, R16 */
		/* 82207DDCh case    9:*/		regs.R4 = regs.R16;
		/* 82207DDCh case    9:*/		return 0x82207DE0;
		  /* 82207DE0h */ case   10:  		/* b 16 */
		/* 82207DE0h case   10:*/		return 0x82207DF0;
		/* 82207DE0h case   10:*/		return 0x82207DE4;
	}
	return 0x82207DE4;
} // Block from 82207DB8h-82207DE4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82207DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207DE4);
		  /* 82207DE4h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82207DE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82207DE4h case    0:*/		return 0x82207DE8;
		  /* 82207DE8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82207DE8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82207DE8h case    1:*/		return 0x82207DEC;
		  /* 82207DECh */ case    2:  		/* addi R4, R11, -4 */
		/* 82207DECh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82207DECh case    2:*/		return 0x82207DF0;
	}
	return 0x82207DF0;
} // Block from 82207DE4h-82207DF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207DF0);
		  /* 82207DF0h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82207DF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82207DF0h case    0:*/		return 0x82207DF4;
		  /* 82207DF4h */ case    1:  		/* addi R10, R11, 3 */
		/* 82207DF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82207DF4h case    1:*/		return 0x82207DF8;
		  /* 82207DF8h */ case    2:  		/* addic. R11, R11, -1 */
		/* 82207DF8h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82207DF8h case    2:*/		return 0x82207DFC;
		  /* 82207DFCh */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82207DFCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82207DFCh case    3:*/		return 0x82207E00;
		  /* 82207E00h */ case    4:  		/* lwzx R30, <#[R10 + R4]> */
		/* 82207E00h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82207E00h case    4:*/		return 0x82207E04;
		  /* 82207E04h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 82207E04h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82207E04h case    5:*/		return 0x82207E08;
		  /* 82207E08h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 82207E08h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82207E40;  }
		/* 82207E08h case    6:*/		return 0x82207E0C;
		  /* 82207E0Ch */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82207E0Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82207E0Ch case    7:*/		return 0x82207E10;
		  /* 82207E10h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 82207E10h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82207E10h case    8:*/		return 0x82207E14;
		  /* 82207E14h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 82207E14h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82207E14h case    9:*/		return 0x82207E18;
		  /* 82207E18h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82207E18h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82207E18h case   10:*/		return 0x82207E1C;
		  /* 82207E1Ch */ case   11:  		/* stw R9, <#[R10]> */
		/* 82207E1Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82207E1Ch case   11:*/		return 0x82207E20;
		  /* 82207E20h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 82207E20h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82207E20h case   12:*/		return 0x82207E24;
		  /* 82207E24h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 82207E24h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82207E24h case   13:*/		return 0x82207E28;
		  /* 82207E28h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82207E28h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82207E28h case   14:*/		return 0x82207E2C;
		  /* 82207E2Ch */ case   15:  		/* stw R11, <#[R10]> */
		/* 82207E2Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82207E2Ch case   15:*/		return 0x82207E30;
		  /* 82207E30h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 82207E30h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82207E30h case   16:*/		return 0x82207E34;
		  /* 82207E34h */ case   17:  		/* addi R11, R11, 4 */
		/* 82207E34h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82207E34h case   17:*/		return 0x82207E38;
		  /* 82207E38h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82207E38h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82207E38h case   18:*/		return 0x82207E3C;
		  /* 82207E3Ch */ case   19:  		/* bl -745524 */
		/* 82207E3Ch case   19:*/		regs.LR = 0x82207E40; return 0x82151E08;
		/* 82207E3Ch case   19:*/		return 0x82207E40;
	}
	return 0x82207E40;
} // Block from 82207DF0h-82207E40h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82207E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207E40);
		  /* 82207E40h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 82207E40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82207E40h case    0:*/		return 0x82207E44;
		  /* 82207E44h */ case    1:  		/* mr R14, R30 */
		/* 82207E44h case    1:*/		regs.R14 = regs.R30;
		/* 82207E44h case    1:*/		return 0x82207E48;
		  /* 82207E48h */ case    2:  		/* stw R11, <#[R31 + 564]> */
		/* 82207E48h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82207E48h case    2:*/		return 0x82207E4C;
		  /* 82207E4Ch */ case    3:  		/* lwz R26, <#[R30 + 4]> */
		/* 82207E4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x00000004) );
		/* 82207E4Ch case    3:*/		return 0x82207E50;
		  /* 82207E50h */ case    4:  		/* stw R30, <#[R31 + 24]> */
		/* 82207E50h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000018) );
		/* 82207E50h case    4:*/		return 0x82207E54;
		  /* 82207E54h */ case    5:  		/* stw R26, <#[R31 + 28]> */
		/* 82207E54h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000001C) );
		/* 82207E54h case    5:*/		return 0x82207E58;
		  /* 82207E58h */ case    6:  		/* stw R26, <#[R1 + 144]> */
		/* 82207E58h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000090) );
		/* 82207E58h case    6:*/		return 0x82207E5C;
		  /* 82207E5Ch */ case    7:  		/* lwz R11, <#[R26 + 68]> */
		/* 82207E5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000044) );
		/* 82207E5Ch case    7:*/		return 0x82207E60;
		  /* 82207E60h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82207E60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207E60h case    8:*/		return 0x82207E64;
		  /* 82207E64h */ case    9:  		/* bc 12, CR6_EQ, 296 */
		/* 82207E64h case    9:*/		if ( regs.CR[6].eq ) { return 0x82207F8C;  }
		/* 82207E64h case    9:*/		return 0x82207E68;
		  /* 82207E68h */ case   10:  		/* lwz R11, <#[R31 + 40]> */
		/* 82207E68h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82207E68h case   10:*/		return 0x82207E6C;
		  /* 82207E6Ch */ case   11:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82207E6Ch case   11:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82207E6Ch case   11:*/		return 0x82207E70;
		  /* 82207E70h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82207E70h case   12:*/		if ( regs.CR[0].eq ) { return 0x82207E88;  }
		/* 82207E70h case   12:*/		return 0x82207E74;
		  /* 82207E74h */ case   13:  		/* mr R4, R17 */
		/* 82207E74h case   13:*/		regs.R4 = regs.R17;
		/* 82207E74h case   13:*/		return 0x82207E78;
		  /* 82207E78h */ case   14:  		/* mr R3, R31 */
		/* 82207E78h case   14:*/		regs.R3 = regs.R31;
		/* 82207E78h case   14:*/		return 0x82207E7C;
		  /* 82207E7Ch */ case   15:  		/* bl -71740 */
		/* 82207E7Ch case   15:*/		regs.LR = 0x82207E80; return 0x821F6640;
		/* 82207E7Ch case   15:*/		return 0x82207E80;
		  /* 82207E80h */ case   16:  		/* lwz R3, <#[R31 + 580]> */
		/* 82207E80h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000244) );
		/* 82207E80h case   16:*/		return 0x82207E84;
		  /* 82207E84h */ case   17:  		/* bl -91052 */
		/* 82207E84h case   17:*/		regs.LR = 0x82207E88; return 0x821F1AD8;
		/* 82207E84h case   17:*/		return 0x82207E88;
	}
	return 0x82207E88;
} // Block from 82207E40h-82207E88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82207E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207E88);
		  /* 82207E88h */ case    0:  		/* lwz R30, <#[R26 + 68]> */
		/* 82207E88h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000044) );
		/* 82207E88h case    0:*/		return 0x82207E8C;
		  /* 82207E8Ch */ case    1:  		/* b 84 */
		/* 82207E8Ch case    1:*/		return 0x82207EE0;
		/* 82207E8Ch case    1:*/		return 0x82207E90;
		  /* 82207E90h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 82207E90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82207E90h case    2:*/		return 0x82207E94;
		  /* 82207E94h */ case    3:  		/* cmpwi CR6, R11, 19 */
		/* 82207E94h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82207E94h case    3:*/		return 0x82207E98;
		  /* 82207E98h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 82207E98h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82207EB0;  }
		/* 82207E98h case    4:*/		return 0x82207E9C;
		  /* 82207E9Ch */ case    5:  		/* mr R5, R30 */
		/* 82207E9Ch case    5:*/		regs.R5 = regs.R30;
		/* 82207E9Ch case    5:*/		return 0x82207EA0;
		  /* 82207EA0h */ case    6:  		/* mr R4, R17 */
		/* 82207EA0h case    6:*/		regs.R4 = regs.R17;
		/* 82207EA0h case    6:*/		return 0x82207EA4;
		  /* 82207EA4h */ case    7:  		/* mr R3, R31 */
		/* 82207EA4h case    7:*/		regs.R3 = regs.R31;
		/* 82207EA4h case    7:*/		return 0x82207EA8;
		  /* 82207EA8h */ case    8:  		/* bl -72416 */
		/* 82207EA8h case    8:*/		regs.LR = 0x82207EAC; return 0x821F63C8;
		/* 82207EA8h case    8:*/		return 0x82207EAC;
		  /* 82207EACh */ case    9:  		/* b 52 */
		/* 82207EACh case    9:*/		return 0x82207EE0;
		/* 82207EACh case    9:*/		return 0x82207EB0;
	}
	return 0x82207EB0;
} // Block from 82207E88h-82207EB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82207EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207EB0);
		  /* 82207EB0h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 82207EB0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82207EB0h case    0:*/		return 0x82207EB4;
		  /* 82207EB4h */ case    1:  		/* bc 4, CR6_EQ, 1644 */
		/* 82207EB4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82208520;  }
		/* 82207EB4h case    1:*/		return 0x82207EB8;
		  /* 82207EB8h */ case    2:  		/* lwz R5, <#[R30 + 8]> */
		/* 82207EB8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		/* 82207EB8h case    2:*/		return 0x82207EBC;
		  /* 82207EBCh */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 82207EBCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82207EBCh case    3:*/		return 0x82207EC0;
		  /* 82207EC0h */ case    4:  		/* bc 12, CR6_EQ, 1620 */
		/* 82207EC0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82208514;  }
		/* 82207EC0h case    4:*/		return 0x82207EC4;
		  /* 82207EC4h */ case    5:  		/* lwz R11, <#[R5 + 4]> */
		/* 82207EC4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82207EC4h case    5:*/		return 0x82207EC8;
		  /* 82207EC8h */ case    6:  		/* cmpwi CR6, R11, 19 */
		/* 82207EC8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82207EC8h case    6:*/		return 0x82207ECC;
		  /* 82207ECCh */ case    7:  		/* bc 4, CR6_EQ, 1608 */
		/* 82207ECCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x82208514;  }
		/* 82207ECCh case    7:*/		return 0x82207ED0;
		  /* 82207ED0h */ case    8:  		/* mr R4, R17 */
		/* 82207ED0h case    8:*/		regs.R4 = regs.R17;
		/* 82207ED0h case    8:*/		return 0x82207ED4;
		  /* 82207ED4h */ case    9:  		/* mr R3, R31 */
		/* 82207ED4h case    9:*/		regs.R3 = regs.R31;
		/* 82207ED4h case    9:*/		return 0x82207ED8;
		  /* 82207ED8h */ case   10:  		/* bl -72464 */
		/* 82207ED8h case   10:*/		regs.LR = 0x82207EDC; return 0x821F63C8;
		/* 82207ED8h case   10:*/		return 0x82207EDC;
		  /* 82207EDCh */ case   11:  		/* lwz R30, <#[R30 + 12]> */
		/* 82207EDCh case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82207EDCh case   11:*/		return 0x82207EE0;
	}
	return 0x82207EE0;
} // Block from 82207EB0h-82207EE0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82207EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207EE0);
		  /* 82207EE0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82207EE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82207EE0h case    0:*/		return 0x82207EE4;
		  /* 82207EE4h */ case    1:  		/* bc 4, CR6_EQ, -84 */
		/* 82207EE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82207E90;  }
		/* 82207EE4h case    1:*/		return 0x82207EE8;
		  /* 82207EE8h */ case    2:  		/* stw R16, <#[R1 + 84]> */
		/* 82207EE8h case    2:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 82207EE8h case    2:*/		return 0x82207EEC;
		  /* 82207EECh */ case    3:  		/* li R10, 0 */
		/* 82207EECh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82207EECh case    3:*/		return 0x82207EF0;
		  /* 82207EF0h */ case    4:  		/* li R9, 0 */
		/* 82207EF0h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82207EF0h case    4:*/		return 0x82207EF4;
		  /* 82207EF4h */ case    5:  		/* stw R16, <#[R1 + 92]> */
		/* 82207EF4h case    5:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207EF4h case    5:*/		return 0x82207EF8;
		  /* 82207EF8h */ case    6:  		/* li R8, 0 */
		/* 82207EF8h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207EF8h case    6:*/		return 0x82207EFC;
		  /* 82207EFCh */ case    7:  		/* li R7, 0 */
		/* 82207EFCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82207EFCh case    7:*/		return 0x82207F00;
		  /* 82207F00h */ case    8:  		/* li R6, 0 */
		/* 82207F00h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82207F00h case    8:*/		return 0x82207F04;
		  /* 82207F04h */ case    9:  		/* li R5, 0 */
		/* 82207F04h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82207F04h case    9:*/		return 0x82207F08;
		  /* 82207F08h */ case   10:  		/* li R4, 0 */
		/* 82207F08h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82207F08h case   10:*/		return 0x82207F0C;
		  /* 82207F0Ch */ case   11:  		/* li R3, 11 */
		/* 82207F0Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0xB);
		/* 82207F0Ch case   11:*/		return 0x82207F10;
		  /* 82207F10h */ case   12:  		/* bl -115784 */
		/* 82207F10h case   12:*/		regs.LR = 0x82207F14; return 0x821EBAC8;
		/* 82207F10h case   12:*/		return 0x82207F14;
		  /* 82207F14h */ case   13:  		/* oris R30, R3, 219 */
		/* 82207F14h case   13:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R3,0xDB);
		/* 82207F14h case   13:*/		return 0x82207F18;
		  /* 82207F18h */ case   14:  		/* li R10, 0 */
		/* 82207F18h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82207F18h case   14:*/		return 0x82207F1C;
		  /* 82207F1Ch */ case   15:  		/* stw R16, <#[R1 + 84]> */
		/* 82207F1Ch case   15:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 82207F1Ch case   15:*/		return 0x82207F20;
		  /* 82207F20h */ case   16:  		/* li R9, 0 */
		/* 82207F20h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82207F20h case   16:*/		return 0x82207F24;
		  /* 82207F24h */ case   17:  		/* stw R16, <#[R1 + 92]> */
		/* 82207F24h case   17:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 82207F24h case   17:*/		return 0x82207F28;
		  /* 82207F28h */ case   18:  		/* li R8, 0 */
		/* 82207F28h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207F28h case   18:*/		return 0x82207F2C;
		  /* 82207F2Ch */ case   19:  		/* li R7, 0 */
		/* 82207F2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82207F2Ch case   19:*/		return 0x82207F30;
		  /* 82207F30h */ case   20:  		/* li R6, 0 */
		/* 82207F30h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82207F30h case   20:*/		return 0x82207F34;
		  /* 82207F34h */ case   21:  		/* li R5, 0 */
		/* 82207F34h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82207F34h case   21:*/		return 0x82207F38;
		  /* 82207F38h */ case   22:  		/* li R4, 0 */
		/* 82207F38h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82207F38h case   22:*/		return 0x82207F3C;
		  /* 82207F3Ch */ case   23:  		/* li R3, 1 */
		/* 82207F3Ch case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82207F3Ch case   23:*/		return 0x82207F40;
		  /* 82207F40h */ case   24:  		/* ori R30, R30, 57344 */
		/* 82207F40h case   24:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE000);
		/* 82207F40h case   24:*/		return 0x82207F44;
		  /* 82207F44h */ case   25:  		/* bl -115836 */
		/* 82207F44h case   25:*/		regs.LR = 0x82207F48; return 0x821EBAC8;
		/* 82207F44h case   25:*/		return 0x82207F48;
		  /* 82207F48h */ case   26:  		/* mr R5, R3 */
		/* 82207F48h case   26:*/		regs.R5 = regs.R3;
		/* 82207F48h case   26:*/		return 0x82207F4C;
		  /* 82207F4Ch */ case   27:  		/* mr R4, R17 */
		/* 82207F4Ch case   27:*/		regs.R4 = regs.R17;
		/* 82207F4Ch case   27:*/		return 0x82207F50;
		  /* 82207F50h */ case   28:  		/* mr R3, R31 */
		/* 82207F50h case   28:*/		regs.R3 = regs.R31;
		/* 82207F50h case   28:*/		return 0x82207F54;
		  /* 82207F54h */ case   29:  		/* mr R6, R30 */
		/* 82207F54h case   29:*/		regs.R6 = regs.R30;
		/* 82207F54h case   29:*/		return 0x82207F58;
		  /* 82207F58h */ case   30:  		/* li R7, 0 */
		/* 82207F58h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82207F58h case   30:*/		return 0x82207F5C;
		  /* 82207F5Ch */ case   31:  		/* li R8, 0 */
		/* 82207F5Ch case   31:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82207F5Ch case   31:*/		return 0x82207F60;
		  /* 82207F60h */ case   32:  		/* li R9, 0 */
		/* 82207F60h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82207F60h case   32:*/		return 0x82207F64;
		  /* 82207F64h */ case   33:  		/* addi R10, R1, 368 */
		/* 82207F64h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x170);
		/* 82207F64h case   33:*/		return 0x82207F68;
		  /* 82207F68h */ case   34:  		/* bl -60992 */
		/* 82207F68h case   34:*/		regs.LR = 0x82207F6C; return 0x821F9128;
		/* 82207F68h case   34:*/		return 0x82207F6C;
		  /* 82207F6Ch */ case   35:  		/* lwz R11, <#[R31 + 576]> */
		/* 82207F6Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000240) );
		/* 82207F6Ch case   35:*/		return 0x82207F70;
		  /* 82207F70h */ case   36:  		/* lwz R11, <#[R11 + 4]> */
		/* 82207F70h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82207F70h case   36:*/		return 0x82207F74;
		  /* 82207F74h */ case   37:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82207F74h case   37:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82207F74h case   37:*/		return 0x82207F78;
		  /* 82207F78h */ case   38:  		/* bc 4, CR0_EQ, 20 */
		/* 82207F78h case   38:*/		if ( !regs.CR[0].eq ) { return 0x82207F8C;  }
		/* 82207F78h case   38:*/		return 0x82207F7C;
		  /* 82207F7Ch */ case   39:  		/* cmplwi CR0, R11, 0 */
		/* 82207F7Ch case   39:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82207F7Ch case   39:*/		return 0x82207F80;
		  /* 82207F80h */ case   40:  		/* bc 12, CR0_EQ, 12 */
		/* 82207F80h case   40:*/		if ( regs.CR[0].eq ) { return 0x82207F8C;  }
		/* 82207F80h case   40:*/		return 0x82207F84;
		  /* 82207F84h */ case   41:  		/* mr R3, R31 */
		/* 82207F84h case   41:*/		regs.R3 = regs.R31;
		/* 82207F84h case   41:*/		return 0x82207F88;
		  /* 82207F88h */ case   42:  		/* bl -67576 */
		/* 82207F88h case   42:*/		regs.LR = 0x82207F8C; return 0x821F7790;
		/* 82207F88h case   42:*/		return 0x82207F8C;
	}
	return 0x82207F8C;
} // Block from 82207EE0h-82207F8Ch (43 instructions)

//////////////////////////////////////////////////////
// Block at 82207F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207F8C);
		  /* 82207F8Ch */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82207F8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82207F8Ch case    0:*/		return 0x82207F90;
		  /* 82207F90h */ case    1:  		/* ori R11, R11, 8 */
		/* 82207F90h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82207F90h case    1:*/		return 0x82207F94;
		  /* 82207F94h */ case    2:  		/* stw R11, <#[R31 + 40]> */
		/* 82207F94h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82207F94h case    2:*/		return 0x82207F98;
		  /* 82207F98h */ case    3:  		/* b -10284 */
		/* 82207F98h case    3:*/		return 0x8220576C;
		/* 82207F98h case    3:*/		return 0x82207F9C;
	}
	return 0x82207F9C;
} // Block from 82207F8Ch-82207F9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82207F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207F9C);
		  /* 82207F9Ch */ case    0:  		/* li R4, 4800 */
		/* 82207F9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82207F9Ch case    0:*/		return 0x82207FA0;
		  /* 82207FA0h */ case    1:  		/* mr R3, R31 */
		/* 82207FA0h case    1:*/		regs.R3 = regs.R31;
		/* 82207FA0h case    1:*/		return 0x82207FA4;
		  /* 82207FA4h */ case    2:  		/* bl -745788 */
		/* 82207FA4h case    2:*/		regs.LR = 0x82207FA8; return 0x82151E68;
		/* 82207FA4h case    2:*/		return 0x82207FA8;
	}
	return 0x82207FA8;
} // Block from 82207F9Ch-82207FA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82207FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207FA8);
		  /* 82207FA8h */ case    0:  		/* stw R25, <#[R31 + 24]> */
		/* 82207FA8h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000018) );
		/* 82207FA8h case    0:*/		return 0x82207FAC;
		  /* 82207FACh */ case    1:  		/* lwz R11, <#[R31 + 40]> */
		/* 82207FACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82207FACh case    1:*/		return 0x82207FB0;
		  /* 82207FB0h */ case    2:  		/* rlwinm R9, R11, 0, 29, 27 */
		/* 82207FB0h case    2:*/		cpu::op::rlwinm<0,0,29,27>(regs,&regs.R9,regs.R11);
		/* 82207FB0h case    2:*/		return 0x82207FB4;
		  /* 82207FB4h */ case    3:  		/* lwz R11, <#[R31 + 792]> */
		/* 82207FB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000318) );
		/* 82207FB4h case    3:*/		return 0x82207FB8;
		  /* 82207FB8h */ case    4:  		/* stw R9, <#[R31 + 40]> */
		/* 82207FB8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82207FB8h case    4:*/		return 0x82207FBC;
		  /* 82207FBCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82207FBCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207FBCh case    5:*/		return 0x82207FC0;
		  /* 82207FC0h */ case    6:  		/* lwz R10, <#[R25 + 4]> */
		/* 82207FC0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000004) );
		/* 82207FC0h case    6:*/		return 0x82207FC4;
		  /* 82207FC4h */ case    7:  		/* stw R10, <#[R31 + 28]> */
		/* 82207FC4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82207FC4h case    7:*/		return 0x82207FC8;
		  /* 82207FC8h */ case    8:  		/* mr R10, R11 */
		/* 82207FC8h case    8:*/		regs.R10 = regs.R11;
		/* 82207FC8h case    8:*/		return 0x82207FCC;
		  /* 82207FCCh */ case    9:  		/* stw R16, <#[R31 + 32]> */
		/* 82207FCCh case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000020) );
		/* 82207FCCh case    9:*/		return 0x82207FD0;
		  /* 82207FD0h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 82207FD0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82207FD8;  }
		/* 82207FD0h case   10:*/		return 0x82207FD4;
		  /* 82207FD4h */ case   11:  		/* li R10, 32 */
		/* 82207FD4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 82207FD4h case   11:*/		return 0x82207FD8;
	}
	return 0x82207FD8;
} // Block from 82207FA8h-82207FD8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82207FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207FD8);
		  /* 82207FD8h */ case    0:  		/* lwz R6, <#[R31 + 796]> */
		/* 82207FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000031C) );
		/* 82207FD8h case    0:*/		return 0x82207FDC;
		  /* 82207FDCh */ case    1:  		/* cmplw CR6, R6, R10 */
		/* 82207FDCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 82207FDCh case    1:*/		return 0x82207FE0;
		  /* 82207FE0h */ case    2:  		/* bc 4, CR6_GT, 32 */
		/* 82207FE0h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82208000;  }
		/* 82207FE0h case    2:*/		return 0x82207FE4;
		  /* 82207FE4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82207FE4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82207FE4h case    3:*/		return 0x82207FE8;
		  /* 82207FE8h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 82207FE8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82207FF0;  }
		/* 82207FE8h case    4:*/		return 0x82207FEC;
		  /* 82207FECh */ case    5:  		/* li R11, 32 */
		/* 82207FECh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82207FECh case    5:*/		return 0x82207FF0;
	}
	return 0x82207FF0;
} // Block from 82207FD8h-82207FF0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82207FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82207FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82207FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82207FF0);
		  /* 82207FF0h */ case    0:  		/* mr R5, R11 */
		/* 82207FF0h case    0:*/		regs.R5 = regs.R11;
		/* 82207FF0h case    0:*/		return 0x82207FF4;
		  /* 82207FF4h */ case    1:  		/* li R4, 3603 */
		/* 82207FF4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE13);
		/* 82207FF4h case    1:*/		return 0x82207FF8;
		  /* 82207FF8h */ case    2:  		/* mr R3, R31 */
		/* 82207FF8h case    2:*/		regs.R3 = regs.R31;
		/* 82207FF8h case    2:*/		return 0x82207FFC;
		  /* 82207FFCh */ case    3:  		/* bl -745876 */
		/* 82207FFCh case    3:*/		regs.LR = 0x82208000; return 0x82151E68;
		/* 82207FFCh case    3:*/		return 0x82208000;
	}
	return 0x82208000;
} // Block from 82207FF0h-82208000h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82208000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208000);
		  /* 82208000h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 82208000h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82208000h case    0:*/		return 0x82208004;
		  /* 82208004h */ case    1:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 82208004h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 82208004h case    1:*/		return 0x82208008;
		  /* 82208008h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82208008h case    2:*/		if ( regs.CR[0].eq ) { return 0x8220801C;  }
		/* 82208008h case    2:*/		return 0x8220800C;
		  /* 8220800Ch */ case    3:  		/* rlwinm. R10, R9, 0, 16, 16 */
		/* 8220800Ch case    3:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R10,regs.R9);
		/* 8220800Ch case    3:*/		return 0x82208010;
		  /* 82208010h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 82208010h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8220801C;  }
		/* 82208010h case    4:*/		return 0x82208014;
		  /* 82208014h */ case    5:  		/* addi R11, R11, -16 */
		/* 82208014h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF0);
		/* 82208014h case    5:*/		return 0x82208018;
		  /* 82208018h */ case    6:  		/* stw R11, <#[R31 + 44]> */
		/* 82208018h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82208018h case    6:*/		return 0x8220801C;
	}
	return 0x8220801C;
} // Block from 82208000h-8220801Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220801Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220801C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220801C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220801C);
		  /* 8220801Ch */ case    0:  		/* lis R10, -32256 */
		/* 8220801Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8220801Ch case    0:*/		return 0x82208020;
		  /* 82208020h */ case    1:  		/* lwz R11, <#[R31 + 56]> */
		/* 82208020h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82208020h case    1:*/		return 0x82208024;
		  /* 82208024h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82208024h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208024h case    2:*/		return 0x82208028;
		  /* 82208028h */ case    3:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 82208028h case    3:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 82208028h case    3:*/		return 0x8220802C;
		  /* 8220802Ch */ case    4:  		/* bc 12, CR6_EQ, 528 */
		/* 8220802Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8220823C;  }
		/* 8220802Ch case    4:*/		return 0x82208030;
		  /* 82208030h */ case    5:  		/* lwz R11, <#[R11]> */
		/* 82208030h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82208030h case    5:*/		return 0x82208034;
		  /* 82208034h */ case    6:  		/* andi. R11, R11, 1280 */
		/* 82208034h case    6:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x500);
		/* 82208034h case    6:*/		return 0x82208038;
		  /* 82208038h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 82208038h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82208038h case    7:*/		return 0x8220803C;
		  /* 8220803Ch */ case    8:  		/* bc 12, CR0_EQ, 512 */
		/* 8220803Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8220823C;  }
		/* 8220803Ch case    8:*/		return 0x82208040;
		  /* 82208040h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208040h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208040h case    9:*/		return 0x82208044;
		  /* 82208044h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82208044h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82208044h case   10:*/		return 0x82208048;
		  /* 82208048h */ case   11:  		/* bc 4, CR0_EQ, 500 */
		/* 82208048h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8220823C;  }
		/* 82208048h case   11:*/		return 0x8220804C;
		  /* 8220804Ch */ case   12:  		/* mr R27, R11 */
		/* 8220804Ch case   12:*/		regs.R27 = regs.R11;
		/* 8220804Ch case   12:*/		return 0x82208050;
		  /* 82208050h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 82208050h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82208050h case   13:*/		return 0x82208054;
		  /* 82208054h */ case   14:  		/* bc 12, CR0_EQ, 488 */
		/* 82208054h case   14:*/		if ( regs.CR[0].eq ) { return 0x8220823C;  }
		/* 82208054h case   14:*/		return 0x82208058;
		  /* 82208058h */ case   15:  		/* lwz R11, <#[R27 + 68]> */
		/* 82208058h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 82208058h case   15:*/		return 0x8220805C;
		  /* 8220805Ch */ case   16:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8220805Ch case   16:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8220805Ch case   16:*/		return 0x82208060;
		  /* 82208060h */ case   17:  		/* bc 12, CR0_EQ, 448 */
		/* 82208060h case   17:*/		if ( regs.CR[0].eq ) { return 0x82208220;  }
		/* 82208060h case   17:*/		return 0x82208064;
		  /* 82208064h */ case   18:  		/* lwz R11, <#[R27 + 12]> */
		/* 82208064h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82208064h case   18:*/		return 0x82208068;
		  /* 82208068h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82208068h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208068h case   19:*/		return 0x8220806C;
		  /* 8220806Ch */ case   20:  		/* bc 4, CR6_EQ, 12 */
		/* 8220806Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x82208078;  }
		/* 8220806Ch case   20:*/		return 0x82208070;
		  /* 82208070h */ case   21:  		/* mr R11, R16 */
		/* 82208070h case   21:*/		regs.R11 = regs.R16;
		/* 82208070h case   21:*/		return 0x82208074;
		  /* 82208074h */ case   22:  		/* b 8 */
		/* 82208074h case   22:*/		return 0x8220807C;
		/* 82208074h case   22:*/		return 0x82208078;
	}
	return 0x82208078;
} // Block from 8220801Ch-82208078h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82208078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208078);
		  /* 82208078h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82208078h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82208078h case    0:*/		return 0x8220807C;
	}
	return 0x8220807C;
} // Block from 82208078h-8220807Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220807Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220807C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220807C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220807C);
		  /* 8220807Ch */ case    0:  		/* lwz R10, <#[R11 + 36]> */
		/* 8220807Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8220807Ch case    0:*/		return 0x82208080;
		  /* 82208080h */ case    1:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82208080h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82208080h case    1:*/		return 0x82208084;
		  /* 82208084h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82208084h case    2:*/		if ( regs.CR[0].eq ) { return 0x82208090;  }
		/* 82208084h case    2:*/		return 0x82208088;
		  /* 82208088h */ case    3:  		/* mr R28, R16 */
		/* 82208088h case    3:*/		regs.R28 = regs.R16;
		/* 82208088h case    3:*/		return 0x8220808C;
		  /* 8220808Ch */ case    4:  		/* b 16 */
		/* 8220808Ch case    4:*/		return 0x8220809C;
		/* 8220808Ch case    4:*/		return 0x82208090;
	}
	return 0x82208090;
} // Block from 8220807Ch-82208090h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82208090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208090);
		  /* 82208090h */ case    0:  		/* lwz R10, <#[R11 + 32]> */
		/* 82208090h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 82208090h case    0:*/		return 0x82208094;
		  /* 82208094h */ case    1:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82208094h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82208094h case    1:*/		return 0x82208098;
		  /* 82208098h */ case    2:  		/* addi R28, R10, -40 */
		/* 82208098h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFD8);
		/* 82208098h case    2:*/		return 0x8220809C;
	}
	return 0x8220809C;
} // Block from 82208090h-8220809Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220809Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220809C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220809C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220809C);
		  /* 8220809Ch */ case    0:  		/* stw R11, <#[R31 + 564]> */
		/* 8220809Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8220809Ch case    0:*/		return 0x822080A0;
		  /* 822080A0h */ case    1:  		/* li R5, 1 */
		/* 822080A0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822080A0h case    1:*/		return 0x822080A4;
		  /* 822080A4h */ case    2:  		/* mr R4, R31 */
		/* 822080A4h case    2:*/		regs.R4 = regs.R31;
		/* 822080A4h case    2:*/		return 0x822080A8;
		  /* 822080A8h */ case    3:  		/* fmr FR4, FR31 */
		/* 822080A8h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 822080A8h case    3:*/		return 0x822080AC;
		  /* 822080ACh */ case    4:  		/* addi R3, R1, 104 */
		/* 822080ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 822080ACh case    4:*/		return 0x822080B0;
		  /* 822080B0h */ case    5:  		/* fmr FR3, FR31 */
		/* 822080B0h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 822080B0h case    5:*/		return 0x822080B4;
		  /* 822080B4h */ case    6:  		/* fmr FR2, FR31 */
		/* 822080B4h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 822080B4h case    6:*/		return 0x822080B8;
		  /* 822080B8h */ case    7:  		/* fmr FR1, FR31 */
		/* 822080B8h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 822080B8h case    7:*/		return 0x822080BC;
		  /* 822080BCh */ case    8:  		/* bl 126356 */
		/* 822080BCh case    8:*/		regs.LR = 0x822080C0; return 0x82226E50;
		/* 822080BCh case    8:*/		return 0x822080C0;
		  /* 822080C0h */ case    9:  		/* lwz R11, <#[R25 + 4]> */
		/* 822080C0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822080C0h case    9:*/		return 0x822080C4;
		  /* 822080C4h */ case   10:  		/* lwz R11, <#[R11 + 40]> */
		/* 822080C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 822080C4h case   10:*/		return 0x822080C8;
		  /* 822080C8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 822080C8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822080C8h case   11:*/		return 0x822080CC;
		  /* 822080CCh */ case   12:  		/* bc 12, CR6_EQ, 68 */
		/* 822080CCh case   12:*/		if ( regs.CR[6].eq ) { return 0x82208110;  }
		/* 822080CCh case   12:*/		return 0x822080D0;
		  /* 822080D0h */ case   13:  		/* lwz R11, <#[R25 + 4]> */
		/* 822080D0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822080D0h case   13:*/		return 0x822080D4;
		  /* 822080D4h */ case   14:  		/* mr R5, R31 */
		/* 822080D4h case   14:*/		regs.R5 = regs.R31;
		/* 822080D4h case   14:*/		return 0x822080D8;
		  /* 822080D8h */ case   15:  		/* lwz R10, <#[R31 + 12]> */
		/* 822080D8h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 822080D8h case   15:*/		return 0x822080DC;
		  /* 822080DCh */ case   16:  		/* lwz R3, <#[R31 + 564]> */
		/* 822080DCh case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 822080DCh case   16:*/		return 0x822080E0;
		  /* 822080E0h */ case   17:  		/* lwz R4, <#[R11 + 16]> */
		/* 822080E0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 822080E0h case   17:*/		return 0x822080E4;
		  /* 822080E4h */ case   18:  		/* mulli R11, R4, 40 */
		/* 822080E4h case   18:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R4,0x28);
		/* 822080E4h case   18:*/		return 0x822080E8;
		  /* 822080E8h */ case   19:  		/* lwzx R11, <#[R11 + R10]> */
		/* 822080E8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 822080E8h case   19:*/		return 0x822080EC;
		  /* 822080ECh */ case   20:  		/* rlwinm R30, R11, 29, 18, 31 */
		/* 822080ECh case   20:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R30,regs.R11);
		/* 822080ECh case   20:*/		return 0x822080F0;
		  /* 822080F0h */ case   21:  		/* bl -96064 */
		/* 822080F0h case   21:*/		regs.LR = 0x822080F4; return 0x821F09B0;
		/* 822080F0h case   21:*/		return 0x822080F4;
		  /* 822080F4h */ case   22:  		/* cmplwi CR6, R30, 0 */
		/* 822080F4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822080F4h case   22:*/		return 0x822080F8;
		  /* 822080F8h */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 822080F8h case   23:*/		if ( regs.CR[6].eq ) { return 0x82208110;  }
		/* 822080F8h case   23:*/		return 0x822080FC;
		  /* 822080FCh */ case   24:  		/* addi R11, R3, -8 */
		/* 822080FCh case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFF8);
		/* 822080FCh case   24:*/		return 0x82208100;
		  /* 82208100h */ case   25:  		/* mtspr CTR, R30 */
		/* 82208100h case   25:*/		regs.CTR = regs.R30;
		/* 82208100h case   25:*/		return 0x82208104;
		  /* 82208104h */ case   26:  		/* ld R10, <#[R1 + 104]> */
		/* 82208104h case   26:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 82208104h case   26:*/		return 0x82208108;
		  /* 82208108h */ case   27:  		/* stdu R10, <#[R11 + 8]> */
		/* 82208108h case   27:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82208108h case   27:*/		return 0x8220810C;
		  /* 8220810Ch */ case   28:  		/* bc 16, CR0_LT, -8 */
		/* 8220810Ch case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82208104;  }
		/* 8220810Ch case   28:*/		return 0x82208110;
	}
	return 0x82208110;
} // Block from 8220809Ch-82208110h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82208110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208110);
		  /* 82208110h */ case    0:  		/* lwz R11, <#[R25 + 4]> */
		/* 82208110h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 82208110h case    0:*/		return 0x82208114;
		  /* 82208114h */ case    1:  		/* lwz R11, <#[R11 + 44]> */
		/* 82208114h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82208114h case    1:*/		return 0x82208118;
		  /* 82208118h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82208118h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208118h case    2:*/		return 0x8220811C;
		  /* 8220811Ch */ case    3:  		/* bc 12, CR6_EQ, 176 */
		/* 8220811Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x822081CC;  }
		/* 8220811Ch case    3:*/		return 0x82208120;
		  /* 82208120h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208120h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208120h case    4:*/		return 0x82208124;
		  /* 82208124h */ case    5:  		/* cmpwi CR6, R10, 1 */
		/* 82208124h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208124h case    5:*/		return 0x82208128;
		  /* 82208128h */ case    6:  		/* bc 12, CR6_EQ, 164 */
		/* 82208128h case    6:*/		if ( regs.CR[6].eq ) { return 0x822081CC;  }
		/* 82208128h case    6:*/		return 0x8220812C;
		  /* 8220812Ch */ case    7:  		/* li R4, 4801 */
		/* 8220812Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220812Ch case    7:*/		return 0x82208130;
		  /* 82208130h */ case    8:  		/* mr R3, R31 */
		/* 82208130h case    8:*/		regs.R3 = regs.R31;
		/* 82208130h case    8:*/		return 0x82208134;
		  /* 82208134h */ case    9:  		/* bl -746188 */
		/* 82208134h case    9:*/		regs.LR = 0x82208138; return 0x82151E68;
		/* 82208134h case    9:*/		return 0x82208138;
		  /* 82208138h */ case   10:  		/* lwz R11, <#[R29 + 8]> */
		/* 82208138h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82208138h case   10:*/		return 0x8220813C;
		  /* 8220813Ch */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 8220813Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8220813Ch case   11:*/		return 0x82208140;
		  /* 82208140h */ case   12:  		/* cmpwi CR6, R10, 6 */
		/* 82208140h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 82208140h case   12:*/		return 0x82208144;
		  /* 82208144h */ case   13:  		/* bc 4, CR6_EQ, 112 */
		/* 82208144h case   13:*/		if ( !regs.CR[6].eq ) { return 0x822081B4;  }
		/* 82208144h case   13:*/		return 0x82208148;
		  /* 82208148h */ case   14:  		/* lwz R11, <#[R11 + 24]> */
		/* 82208148h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82208148h case   14:*/		return 0x8220814C;
		  /* 8220814Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8220814Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220814Ch case   15:*/		return 0x82208150;
		  /* 82208150h */ case   16:  		/* bc 12, CR6_EQ, 584 */
		/* 82208150h case   16:*/		if ( regs.CR[6].eq ) { return 0x82208398;  }
		/* 82208150h case   16:*/		return 0x82208154;
		  /* 82208154h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208154h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208154h case   17:*/		return 0x82208158;
		  /* 82208158h */ case   18:  		/* cmpwi CR6, R10, 11 */
		/* 82208158h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 82208158h case   18:*/		return 0x8220815C;
		  /* 8220815Ch */ case   19:  		/* bc 4, CR6_EQ, 572 */
		/* 8220815Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x82208398;  }
		/* 8220815Ch case   19:*/		return 0x82208160;
		  /* 82208160h */ case   20:  		/* lwz R10, <#[R11 + 20]> */
		/* 82208160h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82208160h case   20:*/		return 0x82208164;
		  /* 82208164h */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 82208164h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82208164h case   21:*/		return 0x82208168;
		  /* 82208168h */ case   22:  		/* bc 12, CR6_EQ, 76 */
		/* 82208168h case   22:*/		if ( regs.CR[6].eq ) { return 0x822081B4;  }
		/* 82208168h case   22:*/		return 0x8220816C;
		  /* 8220816Ch */ case   23:  		/* lwz R10, <#[R11 + 44]> */
		/* 8220816Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 8220816Ch case   23:*/		return 0x82208170;
		  /* 82208170h */ case   24:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 82208170h case   24:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 82208170h case   24:*/		return 0x82208174;
		  /* 82208174h */ case   25:  		/* bc 12, CR0_EQ, 64 */
		/* 82208174h case   25:*/		if ( regs.CR[0].eq ) { return 0x822081B4;  }
		/* 82208174h case   25:*/		return 0x82208178;
		  /* 82208178h */ case   26:  		/* lwz R4, <#[R11 + 16]> */
		/* 82208178h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 82208178h case   26:*/		return 0x8220817C;
		  /* 8220817Ch */ case   27:  		/* mr R5, R31 */
		/* 8220817Ch case   27:*/		regs.R5 = regs.R31;
		/* 8220817Ch case   27:*/		return 0x82208180;
		  /* 82208180h */ case   28:  		/* lwz R11, <#[R31 + 12]> */
		/* 82208180h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82208180h case   28:*/		return 0x82208184;
		  /* 82208184h */ case   29:  		/* mulli R10, R4, 40 */
		/* 82208184h case   29:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R4,0x28);
		/* 82208184h case   29:*/		return 0x82208188;
		  /* 82208188h */ case   30:  		/* lwz R3, <#[R31 + 564]> */
		/* 82208188h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 82208188h case   30:*/		return 0x8220818C;
		  /* 8220818Ch */ case   31:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8220818Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220818Ch case   31:*/		return 0x82208190;
		  /* 82208190h */ case   32:  		/* rlwinm R30, R11, 29, 18, 31 */
		/* 82208190h case   32:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R30,regs.R11);
		/* 82208190h case   32:*/		return 0x82208194;
		  /* 82208194h */ case   33:  		/* bl -96228 */
		/* 82208194h case   33:*/		regs.LR = 0x82208198; return 0x821F09B0;
		/* 82208194h case   33:*/		return 0x82208198;
		  /* 82208198h */ case   34:  		/* cmplwi CR6, R30, 0 */
		/* 82208198h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82208198h case   34:*/		return 0x8220819C;
		  /* 8220819Ch */ case   35:  		/* bc 12, CR6_EQ, 24 */
		/* 8220819Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x822081B4;  }
		/* 8220819Ch case   35:*/		return 0x822081A0;
		  /* 822081A0h */ case   36:  		/* addi R11, R3, -8 */
		/* 822081A0h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFF8);
		/* 822081A0h case   36:*/		return 0x822081A4;
		  /* 822081A4h */ case   37:  		/* mtspr CTR, R30 */
		/* 822081A4h case   37:*/		regs.CTR = regs.R30;
		/* 822081A4h case   37:*/		return 0x822081A8;
		  /* 822081A8h */ case   38:  		/* ld R10, <#[R1 + 104]> */
		/* 822081A8h case   38:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 822081A8h case   38:*/		return 0x822081AC;
		  /* 822081ACh */ case   39:  		/* stdu R10, <#[R11 + 8]> */
		/* 822081ACh case   39:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 822081ACh case   39:*/		return 0x822081B0;
		  /* 822081B0h */ case   40:  		/* bc 16, CR0_LT, -8 */
		/* 822081B0h case   40:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x822081A8;  }
		/* 822081B0h case   40:*/		return 0x822081B4;
	}
	return 0x822081B4;
} // Block from 82208110h-822081B4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 822081B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822081B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822081B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822081B4);
		  /* 822081B4h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 822081B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 822081B4h case    0:*/		return 0x822081B8;
		  /* 822081B8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 822081B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822081B8h case    1:*/		return 0x822081BC;
		  /* 822081BCh */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 822081BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x822081CC;  }
		/* 822081BCh case    2:*/		return 0x822081C0;
		  /* 822081C0h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 822081C0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822081C0h case    3:*/		return 0x822081C4;
		  /* 822081C4h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 822081C4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 822081C4h case    4:*/		return 0x822081C8;
		  /* 822081C8h */ case    5:  		/* bc 4, CR6_EQ, 476 */
		/* 822081C8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x822083A4;  }
		/* 822081C8h case    5:*/		return 0x822081CC;
	}
	return 0x822081CC;
} // Block from 822081B4h-822081CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 822081CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822081CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822081CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822081CC);
		  /* 822081CCh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 822081CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822081CCh case    0:*/		return 0x822081D0;
		  /* 822081D0h */ case    1:  		/* mr R29, R11 */
		/* 822081D0h case    1:*/		regs.R29 = regs.R11;
		/* 822081D0h case    1:*/		return 0x822081D4;
		  /* 822081D4h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 822081D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208138;  }
		/* 822081D4h case    2:*/		return 0x822081D8;
		  /* 822081D8h */ case    3:  		/* lwz R11, <#[R25 + 4]> */
		/* 822081D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822081D8h case    3:*/		return 0x822081DC;
		  /* 822081DCh */ case    4:  		/* lwz R11, <#[R11 + 40]> */
		/* 822081DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 822081DCh case    4:*/		return 0x822081E0;
		  /* 822081E0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 822081E0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822081E0h case    5:*/		return 0x822081E4;
		  /* 822081E4h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 822081E4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82208204;  }
		/* 822081E4h case    6:*/		return 0x822081E8;
		  /* 822081E8h */ case    7:  		/* lwz R11, <#[R25 + 4]> */
		/* 822081E8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822081E8h case    7:*/		return 0x822081EC;
		  /* 822081ECh */ case    8:  		/* mr R7, R28 */
		/* 822081ECh case    8:*/		regs.R7 = regs.R28;
		/* 822081ECh case    8:*/		return 0x822081F0;
		  /* 822081F0h */ case    9:  		/* mr R4, R18 */
		/* 822081F0h case    9:*/		regs.R4 = regs.R18;
		/* 822081F0h case    9:*/		return 0x822081F4;
		  /* 822081F4h */ case   10:  		/* mr R3, R31 */
		/* 822081F4h case   10:*/		regs.R3 = regs.R31;
		/* 822081F4h case   10:*/		return 0x822081F8;
		  /* 822081F8h */ case   11:  		/* lwz R6, <#[R11 + 56]> */
		/* 822081F8h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000038) );
		/* 822081F8h case   11:*/		return 0x822081FC;
		  /* 822081FCh */ case   12:  		/* lwz R5, <#[R11 + 16]> */
		/* 822081FCh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 822081FCh case   12:*/		return 0x82208200;
		  /* 82208200h */ case   13:  		/* bl -59648 */
		/* 82208200h case   13:*/		regs.LR = 0x82208204; return 0x821F9900;
		/* 82208200h case   13:*/		return 0x82208204;
	}
	return 0x82208204;
} // Block from 822081CCh-82208204h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82208204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208204);
		  /* 82208204h */ case    0:  		/* mr R6, R28 */
		/* 82208204h case    0:*/		regs.R6 = regs.R28;
		/* 82208204h case    0:*/		return 0x82208208;
		  /* 82208208h */ case    1:  		/* lwz R4, <#[R25 + 4]> */
		/* 82208208h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000004) );
		/* 82208208h case    1:*/		return 0x8220820C;
		  /* 8220820Ch */ case    2:  		/* mr R5, R18 */
		/* 8220820Ch case    2:*/		regs.R5 = regs.R18;
		/* 8220820Ch case    2:*/		return 0x82208210;
		  /* 82208210h */ case    3:  		/* mr R3, R31 */
		/* 82208210h case    3:*/		regs.R3 = regs.R31;
		/* 82208210h case    3:*/		return 0x82208214;
		  /* 82208214h */ case    4:  		/* bl -58564 */
		/* 82208214h case    4:*/		regs.LR = 0x82208218; return 0x821F9D50;
		/* 82208214h case    4:*/		return 0x82208218;
		  /* 82208218h */ case    5:  		/* lwz R11, <#[R31 + 564]> */
		/* 82208218h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82208218h case    5:*/		return 0x8220821C;
		  /* 8220821Ch */ case    6:  		/* stw R16, <#[R11 + 80]> */
		/* 8220821Ch case    6:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R11 + 0x00000050) );
		/* 8220821Ch case    6:*/		return 0x82208220;
	}
	return 0x82208220;
} // Block from 82208204h-82208220h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82208220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208220);
		  /* 82208220h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82208220h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82208220h case    0:*/		return 0x82208224;
		  /* 82208224h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82208224h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82208224h case    1:*/		return 0x82208228;
		  /* 82208228h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82208228h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82208228h case    2:*/		return 0x8220822C;
		  /* 8220822Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8220822Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220823C;  }
		/* 8220822Ch case    3:*/		return 0x82208230;
		  /* 82208230h */ case    4:  		/* mr R27, R11 */
		/* 82208230h case    4:*/		regs.R27 = regs.R11;
		/* 82208230h case    4:*/		return 0x82208234;
		  /* 82208234h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82208234h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208234h case    5:*/		return 0x82208238;
		  /* 82208238h */ case    6:  		/* bc 4, CR6_EQ, -480 */
		/* 82208238h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82208058;  }
		/* 82208238h case    6:*/		return 0x8220823C;
	}
	return 0x8220823C;
} // Block from 82208220h-8220823Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220823Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220823C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220823C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220823C);
		  /* 8220823Ch */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 8220823Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8220823Ch case    0:*/		return 0x82208240;
		  /* 82208240h */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 82208240h case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 82208240h case    1:*/		return 0x82208244;
		  /* 82208244h */ case    2:  		/* bc 12, CR0_EQ, 708 */
		/* 82208244h case    2:*/		if ( regs.CR[0].eq ) { return 0x82208508;  }
		/* 82208244h case    2:*/		return 0x82208248;
		  /* 82208248h */ case    3:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208248h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208248h case    3:*/		return 0x8220824C;
		  /* 8220824Ch */ case    4:  		/* li R4, 0 */
		/* 8220824Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220824Ch case    4:*/		return 0x82208250;
		  /* 82208250h */ case    5:  		/* mr R3, R31 */
		/* 82208250h case    5:*/		regs.R3 = regs.R31;
		/* 82208250h case    5:*/		return 0x82208254;
		  /* 82208254h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82208254h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82208254h case    6:*/		return 0x82208258;
		  /* 82208258h */ case    7:  		/* addic R10, R10, -1 */
		/* 82208258h case    7:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82208258h case    7:*/		return 0x8220825C;
		  /* 8220825Ch */ case    8:  		/* subfe R10, R10, R10 */
		/* 8220825Ch case    8:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8220825Ch case    8:*/		return 0x82208260;
		  /* 82208260h */ case    9:  		/* and R30, R10, R11 */
		/* 82208260h case    9:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 82208260h case    9:*/		return 0x82208264;
		  /* 82208264h */ case   10:  		/* stw R30, <#[R31 + 564]> */
		/* 82208264h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 82208264h case   10:*/		return 0x82208268;
		  /* 82208268h */ case   11:  		/* bl -671360 */
		/* 82208268h case   11:*/		regs.LR = 0x8220826C; return 0x821643E8;
		/* 82208268h case   11:*/		return 0x8220826C;
		  /* 8220826Ch */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8220826Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220826Ch case   12:*/		return 0x82208270;
		  /* 82208270h */ case   13:  		/* bc 12, CR0_EQ, 76 */
		/* 82208270h case   13:*/		if ( regs.CR[0].eq ) { return 0x822082BC;  }
		/* 82208270h case   13:*/		return 0x82208274;
		  /* 82208274h */ case   14:  		/* mr R5, R31 */
		/* 82208274h case   14:*/		regs.R5 = regs.R31;
		/* 82208274h case   14:*/		return 0x82208278;
		  /* 82208278h */ case   15:  		/* lwz R4, <#[R31 + 612]> */
		/* 82208278h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000264) );
		/* 82208278h case   15:*/		return 0x8220827C;
		  /* 8220827Ch */ case   16:  		/* mr R3, R30 */
		/* 8220827Ch case   16:*/		regs.R3 = regs.R30;
		/* 8220827Ch case   16:*/		return 0x82208280;
		  /* 82208280h */ case   17:  		/* bl -96464 */
		/* 82208280h case   17:*/		regs.LR = 0x82208284; return 0x821F09B0;
		/* 82208280h case   17:*/		return 0x82208284;
		  /* 82208284h */ case   18:  		/* lis R11, -32256 */
		/* 82208284h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82208284h case   18:*/		return 0x82208288;
		  /* 82208288h */ case   19:  		/* mr R30, R3 */
		/* 82208288h case   19:*/		regs.R30 = regs.R3;
		/* 82208288h case   19:*/		return 0x8220828C;
		  /* 8220828Ch */ case   20:  		/* fmr FR4, FR31 */
		/* 8220828Ch case   20:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 8220828Ch case   20:*/		return 0x82208290;
		  /* 82208290h */ case   21:  		/* li R5, 1 */
		/* 82208290h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82208290h case   21:*/		return 0x82208294;
		  /* 82208294h */ case   22:  		/* fmr FR3, FR31 */
		/* 82208294h case   22:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 82208294h case   22:*/		return 0x82208298;
		  /* 82208298h */ case   23:  		/* mr R4, R31 */
		/* 82208298h case   23:*/		regs.R4 = regs.R31;
		/* 82208298h case   23:*/		return 0x8220829C;
		  /* 8220829Ch */ case   24:  		/* fmr FR2, FR31 */
		/* 8220829Ch case   24:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 8220829Ch case   24:*/		return 0x822082A0;
		  /* 822082A0h */ case   25:  		/* addi R3, R1, 104 */
		/* 822082A0h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 822082A0h case   25:*/		return 0x822082A4;
		  /* 822082A4h */ case   26:  		/* lfs FR1, <#[R11 + 1792]> */
		/* 822082A4h case   26:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000700) );
		/* 822082A4h case   26:*/		return 0x822082A8;
		  /* 822082A8h */ case   27:  		/* bl 125864 */
		/* 822082A8h case   27:*/		regs.LR = 0x822082AC; return 0x82226E50;
		/* 822082A8h case   27:*/		return 0x822082AC;
		  /* 822082ACh */ case   28:  		/* lwz R11, <#[R3]> */
		/* 822082ACh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822082ACh case   28:*/		return 0x822082B0;
		  /* 822082B0h */ case   29:  		/* stw R11, <#[R30]> */
		/* 822082B0h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822082B0h case   29:*/		return 0x822082B4;
		  /* 822082B4h */ case   30:  		/* lwz R11, <#[R3 + 4]> */
		/* 822082B4h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 822082B4h case   30:*/		return 0x822082B8;
		  /* 822082B8h */ case   31:  		/* stw R11, <#[R30 + 4]> */
		/* 822082B8h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 822082B8h case   31:*/		return 0x822082BC;
	}
	return 0x822082BC;
} // Block from 8220823Ch-822082BCh (32 instructions)

//////////////////////////////////////////////////////
// Block at 822082BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822082BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822082BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822082BC);
		  /* 822082BCh */ case    0:  		/* lwz R30, <#[R31 + 4]> */
		/* 822082BCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 822082BCh case    0:*/		return 0x822082C0;
		  /* 822082C0h */ case    1:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 822082C0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 822082C0h case    1:*/		return 0x822082C4;
		  /* 822082C4h */ case    2:  		/* bc 4, CR0_EQ, 580 */
		/* 822082C4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82208508;  }
		/* 822082C4h case    2:*/		return 0x822082C8;
		  /* 822082C8h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 822082C8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 822082C8h case    3:*/		return 0x822082CC;
		  /* 822082CCh */ case    4:  		/* bc 12, CR0_EQ, 572 */
		/* 822082CCh case    4:*/		if ( regs.CR[0].eq ) { return 0x82208508;  }
		/* 822082CCh case    4:*/		return 0x822082D0;
		  /* 822082D0h */ case    5:  		/* lwz R11, <#[R30 + 36]> */
		/* 822082D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 822082D0h case    5:*/		return 0x822082D4;
		  /* 822082D4h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822082D4h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822082D4h case    6:*/		return 0x822082D8;
		  /* 822082D8h */ case    7:  		/* bc 4, CR0_EQ, 348 */
		/* 822082D8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82208434;  }
		/* 822082D8h case    7:*/		return 0x822082DC;
		  /* 822082DCh */ case    8:  		/* lwz R11, <#[R30 + 32]> */
		/* 822082DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 822082DCh case    8:*/		return 0x822082E0;
		  /* 822082E0h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 822082E0h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 822082E0h case    9:*/		return 0x822082E4;
		  /* 822082E4h */ case   10:  		/* addic. R11, R11, -40 */
		/* 822082E4h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 822082E4h case   10:*/		return 0x822082E8;
		  /* 822082E8h */ case   11:  		/* bc 12, CR0_EQ, 332 */
		/* 822082E8h case   11:*/		if ( regs.CR[0].eq ) { return 0x82208434;  }
		/* 822082E8h case   11:*/		return 0x822082EC;
		  /* 822082ECh */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 822082ECh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 822082ECh case   12:*/		return 0x822082F0;
		  /* 822082F0h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 822082F0h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 822082F0h case   13:*/		return 0x822082F4;
		  /* 822082F4h */ case   14:  		/* cmplwi CR6, R11, 10624 */
		/* 822082F4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 822082F4h case   14:*/		return 0x822082F8;
		  /* 822082F8h */ case   15:  		/* bc 4, CR6_EQ, 316 */
		/* 822082F8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82208434;  }
		/* 822082F8h case   15:*/		return 0x822082FC;
		  /* 822082FCh */ case   16:  		/* mr R3, R31 */
		/* 822082FCh case   16:*/		regs.R3 = regs.R31;
		/* 822082FCh case   16:*/		return 0x82208300;
		  /* 82208300h */ case   17:  		/* bl -91536 */
		/* 82208300h case   17:*/		regs.LR = 0x82208304; return 0x821F1D70;
		/* 82208300h case   17:*/		return 0x82208304;
		  /* 82208304h */ case   18:  		/* mr R3, R31 */
		/* 82208304h case   18:*/		regs.R3 = regs.R31;
		/* 82208304h case   18:*/		return 0x82208308;
		  /* 82208308h */ case   19:  		/* bl -107408 */
		/* 82208308h case   19:*/		regs.LR = 0x8220830C; return 0x821EDF78;
		/* 82208308h case   19:*/		return 0x8220830C;
		  /* 8220830Ch */ case   20:  		/* stw R16, <#[R31 + 32]> */
		/* 8220830Ch case   20:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000020) );
		/* 8220830Ch case   20:*/		return 0x82208310;
		  /* 82208310h */ case   21:  		/* addi R26, R30, 8 */
		/* 82208310h case   21:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R30,0x8);
		/* 82208310h case   21:*/		return 0x82208314;
		  /* 82208314h */ case   22:  		/* mr R29, R3 */
		/* 82208314h case   22:*/		regs.R29 = regs.R3;
		/* 82208314h case   22:*/		return 0x82208318;
		  /* 82208318h */ case   23:  		/* lwz R27, <#[R30 + 8]> */
		/* 82208318h case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000008) );
		/* 82208318h case   23:*/		return 0x8220831C;
		  /* 8220831Ch */ case   24:  		/* cmplwi CR6, R27, 0 */
		/* 8220831Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220831Ch case   24:*/		return 0x82208320;
		  /* 82208320h */ case   25:  		/* bc 12, CR6_EQ, 144 */
		/* 82208320h case   25:*/		if ( regs.CR[6].eq ) { return 0x822083B0;  }
		/* 82208320h case   25:*/		return 0x82208324;
		  /* 82208324h */ case   26:  		/* lwz R28, <#[R27 + 4]> */
		/* 82208324h case   26:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000004) );
		/* 82208324h case   26:*/		return 0x82208328;
		  /* 82208328h */ case   27:  		/* mr R5, R29 */
		/* 82208328h case   27:*/		regs.R5 = regs.R29;
		/* 82208328h case   27:*/		return 0x8220832C;
		  /* 8220832Ch */ case   28:  		/* mr R4, R27 */
		/* 8220832Ch case   28:*/		regs.R4 = regs.R27;
		/* 8220832Ch case   28:*/		return 0x82208330;
		  /* 82208330h */ case   29:  		/* mr R3, R28 */
		/* 82208330h case   29:*/		regs.R3 = regs.R28;
		/* 82208330h case   29:*/		return 0x82208334;
		  /* 82208334h */ case   30:  		/* bl 161268 */
		/* 82208334h case   30:*/		regs.LR = 0x82208338; return 0x8222F928;
		/* 82208334h case   30:*/		return 0x82208338;
		  /* 82208338h */ case   31:  		/* lwz R11, <#[R28 + 36]> */
		/* 82208338h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 82208338h case   31:*/		return 0x8220833C;
		  /* 8220833Ch */ case   32:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8220833Ch case   32:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8220833Ch case   32:*/		return 0x82208340;
		  /* 82208340h */ case   33:  		/* bc 4, CR0_EQ, 64 */
		/* 82208340h case   33:*/		if ( !regs.CR[0].eq ) { return 0x82208380;  }
		/* 82208340h case   33:*/		return 0x82208344;
		  /* 82208344h */ case   34:  		/* lwz R11, <#[R28 + 32]> */
		/* 82208344h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 82208344h case   34:*/		return 0x82208348;
		  /* 82208348h */ case   35:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82208348h case   35:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82208348h case   35:*/		return 0x8220834C;
		  /* 8220834Ch */ case   36:  		/* addic. R28, R11, -40 */
		/* 8220834Ch case   36:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 8220834Ch case   36:*/		return 0x82208350;
		  /* 82208350h */ case   37:  		/* bc 12, CR0_EQ, 48 */
		/* 82208350h case   37:*/		if ( regs.CR[0].eq ) { return 0x82208380;  }
		/* 82208350h case   37:*/		return 0x82208354;
		  /* 82208354h */ case   38:  		/* mr R3, R28 */
		/* 82208354h case   38:*/		regs.R3 = regs.R28;
		/* 82208354h case   38:*/		return 0x82208358;
		  /* 82208358h */ case   39:  		/* bl -672096 */
		/* 82208358h case   39:*/		regs.LR = 0x8220835C; return 0x821641F8;
		/* 82208358h case   39:*/		return 0x8220835C;
		  /* 8220835Ch */ case   40:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8220835Ch case   40:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220835Ch case   40:*/		return 0x82208360;
		  /* 82208360h */ case   41:  		/* bc 12, CR0_EQ, 32 */
		/* 82208360h case   41:*/		if ( regs.CR[0].eq ) { return 0x82208380;  }
		/* 82208360h case   41:*/		return 0x82208364;
		  /* 82208364h */ case   42:  		/* mr R4, R31 */
		/* 82208364h case   42:*/		regs.R4 = regs.R31;
		/* 82208364h case   42:*/		return 0x82208368;
		  /* 82208368h */ case   43:  		/* mr R3, R28 */
		/* 82208368h case   43:*/		regs.R3 = regs.R28;
		/* 82208368h case   43:*/		return 0x8220836C;
		  /* 8220836Ch */ case   44:  		/* bl -670764 */
		/* 8220836Ch case   44:*/		regs.LR = 0x82208370; return 0x82164740;
		/* 8220836Ch case   44:*/		return 0x82208370;
		  /* 82208370h */ case   45:  		/* lwz R11, <#[R3]> */
		/* 82208370h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82208370h case   45:*/		return 0x82208374;
		  /* 82208374h */ case   46:  		/* cmplw CR6, R11, R30 */
		/* 82208374h case   46:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82208374h case   46:*/		return 0x82208378;
		  /* 82208378h */ case   47:  		/* bc 4, CR6_EQ, 8 */
		/* 82208378h case   47:*/		if ( !regs.CR[6].eq ) { return 0x82208380;  }
		/* 82208378h case   47:*/		return 0x8220837C;
		  /* 8220837Ch */ case   48:  		/* stw R29, <#[R3]> */
		/* 8220837Ch case   48:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8220837Ch case   48:*/		return 0x82208380;
	}
	return 0x82208380;
} // Block from 822082BCh-82208380h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82208380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208380);
		  /* 82208380h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 82208380h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82208380h case    0:*/		return 0x82208384;
		  /* 82208384h */ case    1:  		/* cmplw CR6, R11, R27 */
		/* 82208384h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82208384h case    1:*/		return 0x82208388;
		  /* 82208388h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82208388h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208390;  }
		/* 82208388h case    2:*/		return 0x8220838C;
		  /* 8220838Ch */ case    3:  		/* addi R26, R27, 12 */
		/* 8220838Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R27,0xC);
		/* 8220838Ch case    3:*/		return 0x82208390;
	}
	return 0x82208390;
} // Block from 82208380h-82208390h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82208390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208390);
		  /* 82208390h */ case    0:  		/* lwz R27, <#[R26]> */
		/* 82208390h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 82208390h case    0:*/		return 0x82208394;
		  /* 82208394h */ case    1:  		/* b -120 */
		/* 82208394h case    1:*/		return 0x8220831C;
		/* 82208394h case    1:*/		return 0x82208398;
	}
	return 0x82208398;
} // Block from 82208390h-82208398h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208398);
		  /* 82208398h */ case    0:  		/* li R4, 4801 */
		/* 82208398h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208398h case    0:*/		return 0x8220839C;
		  /* 8220839Ch */ case    1:  		/* mr R3, R31 */
		/* 8220839Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220839Ch case    1:*/		return 0x822083A0;
		  /* 822083A0h */ case    2:  		/* bl -746808 */
		/* 822083A0h case    2:*/		regs.LR = 0x822083A4; return 0x82151E68;
		/* 822083A0h case    2:*/		return 0x822083A4;
	}
	return 0x822083A4;
} // Block from 82208398h-822083A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822083A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822083A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822083A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822083A4);
		  /* 822083A4h */ case    0:  		/* li R4, 4801 */
		/* 822083A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822083A4h case    0:*/		return 0x822083A8;
		  /* 822083A8h */ case    1:  		/* mr R3, R31 */
		/* 822083A8h case    1:*/		regs.R3 = regs.R31;
		/* 822083A8h case    1:*/		return 0x822083AC;
		  /* 822083ACh */ case    2:  		/* bl -746820 */
		/* 822083ACh case    2:*/		regs.LR = 0x822083B0; return 0x82151E68;
		/* 822083ACh case    2:*/		return 0x822083B0;
	}
	return 0x822083B0;
} // Block from 822083A4h-822083B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822083B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822083B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822083B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822083B0);
		  /* 822083B0h */ case    0:  		/* mr R5, R31 */
		/* 822083B0h case    0:*/		regs.R5 = regs.R31;
		/* 822083B0h case    0:*/		return 0x822083B4;
		  /* 822083B4h */ case    1:  		/* mr R4, R30 */
		/* 822083B4h case    1:*/		regs.R4 = regs.R30;
		/* 822083B4h case    1:*/		return 0x822083B8;
		  /* 822083B8h */ case    2:  		/* mr R3, R29 */
		/* 822083B8h case    2:*/		regs.R3 = regs.R29;
		/* 822083B8h case    2:*/		return 0x822083BC;
		  /* 822083BCh */ case    3:  		/* bl 161572 */
		/* 822083BCh case    3:*/		regs.LR = 0x822083C0; return 0x8222FAE0;
		/* 822083BCh case    3:*/		return 0x822083C0;
		  /* 822083C0h */ case    4:  		/* lwz R10, <#[R30 + 48]> */
		/* 822083C0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 822083C0h case    4:*/		return 0x822083C4;
		  /* 822083C4h */ case    5:  		/* lwz R11, <#[R29 + 48]> */
		/* 822083C4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 822083C4h case    5:*/		return 0x822083C8;
		  /* 822083C8h */ case    6:  		/* li R4, 0 */
		/* 822083C8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822083C8h case    6:*/		return 0x822083CC;
		  /* 822083CCh */ case    7:  		/* mr R3, R31 */
		/* 822083CCh case    7:*/		regs.R3 = regs.R31;
		/* 822083CCh case    7:*/		return 0x822083D0;
		  /* 822083D0h */ case    8:  		/* rlwimi R11, R10, 0, 10, 10 */
		/* 822083D0h case    8:*/		cpu::op::rlwimi<0,0,10,10>(regs,&regs.R11,regs.R10);
		/* 822083D0h case    8:*/		return 0x822083D4;
		  /* 822083D4h */ case    9:  		/* stw R11, <#[R29 + 48]> */
		/* 822083D4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 822083D4h case    9:*/		return 0x822083D8;
		  /* 822083D8h */ case   10:  		/* lwz R11, <#[R30 + 48]> */
		/* 822083D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 822083D8h case   10:*/		return 0x822083DC;
		  /* 822083DCh */ case   11:  		/* rlwinm R11, R11, 0, 11, 9 */
		/* 822083DCh case   11:*/		cpu::op::rlwinm<0,0,11,9>(regs,&regs.R11,regs.R11);
		/* 822083DCh case   11:*/		return 0x822083E0;
		  /* 822083E0h */ case   12:  		/* stw R11, <#[R30 + 48]> */
		/* 822083E0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 822083E0h case   12:*/		return 0x822083E4;
		  /* 822083E4h */ case   13:  		/* bl -671740 */
		/* 822083E4h case   13:*/		regs.LR = 0x822083E8; return 0x821643E8;
		/* 822083E4h case   13:*/		return 0x822083E8;
		  /* 822083E8h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822083E8h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822083E8h case   14:*/		return 0x822083EC;
		  /* 822083ECh */ case   15:  		/* bc 12, CR0_EQ, 260 */
		/* 822083ECh case   15:*/		if ( regs.CR[0].eq ) { return 0x822084F0;  }
		/* 822083ECh case   15:*/		return 0x822083F0;
		  /* 822083F0h */ case   16:  		/* stw R29, <#[R31 + 564]> */
		/* 822083F0h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 822083F0h case   16:*/		return 0x822083F4;
		  /* 822083F4h */ case   17:  		/* li R7, 0 */
		/* 822083F4h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822083F4h case   17:*/		return 0x822083F8;
		  /* 822083F8h */ case   18:  		/* mr R5, R29 */
		/* 822083F8h case   18:*/		regs.R5 = regs.R29;
		/* 822083F8h case   18:*/		return 0x822083FC;
		  /* 822083FCh */ case   19:  		/* lwz R6, <#[R31 + 612]> */
		/* 822083FCh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000264) );
		/* 822083FCh case   19:*/		return 0x82208400;
		  /* 82208400h */ case   20:  		/* mr R4, R31 */
		/* 82208400h case   20:*/		regs.R4 = regs.R31;
		/* 82208400h case   20:*/		return 0x82208404;
		  /* 82208404h */ case   21:  		/* addi R3, R1, 104 */
		/* 82208404h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 82208404h case   21:*/		return 0x82208408;
		  /* 82208408h */ case   22:  		/* bl 120384 */
		/* 82208408h case   22:*/		regs.LR = 0x8220840C; return 0x82225A48;
		/* 82208408h case   22:*/		return 0x8220840C;
		  /* 8220840Ch */ case   23:  		/* lwz R4, <#[R31 + 564]> */
		/* 8220840Ch case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8220840Ch case   23:*/		return 0x82208410;
		  /* 82208410h */ case   24:  		/* li R8, 0 */
		/* 82208410h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82208410h case   24:*/		return 0x82208414;
		  /* 82208414h */ case   25:  		/* addi R5, R4, 32 */
		/* 82208414h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 82208414h case   25:*/		return 0x82208418;
		  /* 82208418h */ case   26:  		/* li R7, 0 */
		/* 82208418h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82208418h case   26:*/		return 0x8220841C;
		  /* 8220841Ch */ case   27:  		/* li R6, 117 */
		/* 8220841Ch case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 8220841Ch case   27:*/		return 0x82208420;
		  /* 82208420h */ case   28:  		/* mr R3, R31 */
		/* 82208420h case   28:*/		regs.R3 = regs.R31;
		/* 82208420h case   28:*/		return 0x82208424;
		  /* 82208424h */ case   29:  		/* bl 116084 */
		/* 82208424h case   29:*/		regs.LR = 0x82208428; return 0x82224998;
		/* 82208424h case   29:*/		return 0x82208428;
		  /* 82208428h */ case   30:  		/* mr R29, R3 */
		/* 82208428h case   30:*/		regs.R29 = regs.R3;
		/* 82208428h case   30:*/		return 0x8220842C;
		  /* 8220842Ch */ case   31:  		/* addi R4, R1, 104 */
		/* 8220842Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 8220842Ch case   31:*/		return 0x82208430;
		  /* 82208430h */ case   32:  		/* b 160 */
		/* 82208430h case   32:*/		return 0x822084D0;
		/* 82208430h case   32:*/		return 0x82208434;
	}
	return 0x82208434;
} // Block from 822083B0h-82208434h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82208434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208434);
		  /* 82208434h */ case    0:  		/* lwz R11, <#[R30 + 68]> */
		/* 82208434h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000044) );
		/* 82208434h case    0:*/		return 0x82208438;
		  /* 82208438h */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82208438h case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82208438h case    1:*/		return 0x8220843C;
		  /* 8220843Ch */ case    2:  		/* bc 12, CR0_EQ, 180 */
		/* 8220843Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x822084F0;  }
		/* 8220843Ch case    2:*/		return 0x82208440;
		  /* 82208440h */ case    3:  		/* li R4, 0 */
		/* 82208440h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82208440h case    3:*/		return 0x82208444;
		  /* 82208444h */ case    4:  		/* mr R3, R31 */
		/* 82208444h case    4:*/		regs.R3 = regs.R31;
		/* 82208444h case    4:*/		return 0x82208448;
		  /* 82208448h */ case    5:  		/* bl -671840 */
		/* 82208448h case    5:*/		regs.LR = 0x8220844C; return 0x821643E8;
		/* 82208448h case    5:*/		return 0x8220844C;
		  /* 8220844Ch */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8220844Ch case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220844Ch case    6:*/		return 0x82208450;
		  /* 82208450h */ case    7:  		/* bc 12, CR0_EQ, 160 */
		/* 82208450h case    7:*/		if ( regs.CR[0].eq ) { return 0x822084F0;  }
		/* 82208450h case    7:*/		return 0x82208454;
		  /* 82208454h */ case    8:  		/* stw R30, <#[R31 + 564]> */
		/* 82208454h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 82208454h case    8:*/		return 0x82208458;
		  /* 82208458h */ case    9:  		/* li R7, 0 */
		/* 82208458h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82208458h case    9:*/		return 0x8220845C;
		  /* 8220845Ch */ case   10:  		/* mr R5, R30 */
		/* 8220845Ch case   10:*/		regs.R5 = regs.R30;
		/* 8220845Ch case   10:*/		return 0x82208460;
		  /* 82208460h */ case   11:  		/* lwz R6, <#[R31 + 612]> */
		/* 82208460h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000264) );
		/* 82208460h case   11:*/		return 0x82208464;
		  /* 82208464h */ case   12:  		/* mr R4, R31 */
		/* 82208464h case   12:*/		regs.R4 = regs.R31;
		/* 82208464h case   12:*/		return 0x82208468;
		  /* 82208468h */ case   13:  		/* addi R3, R1, 112 */
		/* 82208468h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82208468h case   13:*/		return 0x8220846C;
		  /* 8220846Ch */ case   14:  		/* bl 120284 */
		/* 8220846Ch case   14:*/		regs.LR = 0x82208470; return 0x82225A48;
		/* 8220846Ch case   14:*/		return 0x82208470;
		  /* 82208470h */ case   15:  		/* li R8, 0 */
		/* 82208470h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82208470h case   15:*/		return 0x82208474;
		  /* 82208474h */ case   16:  		/* li R7, 0 */
		/* 82208474h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82208474h case   16:*/		return 0x82208478;
		  /* 82208478h */ case   17:  		/* lwz R4, <#[R31 + 564]> */
		/* 82208478h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82208478h case   17:*/		return 0x8220847C;
		  /* 8220847Ch */ case   18:  		/* li R6, 117 */
		/* 8220847Ch case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 8220847Ch case   18:*/		return 0x82208480;
		  /* 82208480h */ case   19:  		/* li R5, 0 */
		/* 82208480h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82208480h case   19:*/		return 0x82208484;
		  /* 82208484h */ case   20:  		/* mr R3, R31 */
		/* 82208484h case   20:*/		regs.R3 = regs.R31;
		/* 82208484h case   20:*/		return 0x82208488;
		  /* 82208488h */ case   21:  		/* bl 115984 */
		/* 82208488h case   21:*/		regs.LR = 0x8220848C; return 0x82224998;
		/* 82208488h case   21:*/		return 0x8220848C;
		  /* 8220848Ch */ case   22:  		/* lwz R11, <#[R31 + 564]> */
		/* 8220848Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8220848Ch case   22:*/		return 0x82208490;
		  /* 82208490h */ case   23:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 82208490h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 82208490h case   23:*/		return 0x82208494;
		  /* 82208494h */ case   24:  		/* addi R11, R11, 32 */
		/* 82208494h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x20);
		/* 82208494h case   24:*/		return 0x82208498;
		  /* 82208498h */ case   25:  		/* addi R10, R10, 36 */
		/* 82208498h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 82208498h case   25:*/		return 0x8220849C;
		  /* 8220849Ch */ case   26:  		/* addi R9, R11, 4 */
		/* 8220849Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8220849Ch case   26:*/		return 0x822084A0;
		  /* 822084A0h */ case   27:  		/* addi R6, R10, -36 */
		/* 822084A0h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 822084A0h case   27:*/		return 0x822084A4;
		  /* 822084A4h */ case   28:  		/* ori R8, R9, 1 */
		/* 822084A4h case   28:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R9,0x1);
		/* 822084A4h case   28:*/		return 0x822084A8;
		  /* 822084A8h */ case   29:  		/* lwz R7, <#[R11 + 4]> */
		/* 822084A8h case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 822084A8h case   29:*/		return 0x822084AC;
		  /* 822084ACh */ case   30:  		/* addi R9, R10, 4 */
		/* 822084ACh case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 822084ACh case   30:*/		return 0x822084B0;
		  /* 822084B0h */ case   31:  		/* mr R29, R3 */
		/* 822084B0h case   31:*/		regs.R29 = regs.R3;
		/* 822084B0h case   31:*/		return 0x822084B4;
		  /* 822084B4h */ case   32:  		/* addi R4, R1, 112 */
		/* 822084B4h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 822084B4h case   32:*/		return 0x822084B8;
		  /* 822084B8h */ case   33:  		/* stw R7, <#[R10 + 4]> */
		/* 822084B8h case   33:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 822084B8h case   33:*/		return 0x822084BC;
		  /* 822084BCh */ case   34:  		/* lwz R7, <#[R11 + 4]> */
		/* 822084BCh case   34:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 822084BCh case   34:*/		return 0x822084C0;
		  /* 822084C0h */ case   35:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 822084C0h case   35:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 822084C0h case   35:*/		return 0x822084C4;
		  /* 822084C4h */ case   36:  		/* stw R9, <#[R7 + 36]> */
		/* 822084C4h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000024) );
		/* 822084C4h case   36:*/		return 0x822084C8;
		  /* 822084C8h */ case   37:  		/* stw R8, <#[R10]> */
		/* 822084C8h case   37:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 822084C8h case   37:*/		return 0x822084CC;
		  /* 822084CCh */ case   38:  		/* stw R6, <#[R11 + 4]> */
		/* 822084CCh case   38:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 822084CCh case   38:*/		return 0x822084D0;
	}
	return 0x822084D0;
} // Block from 82208434h-822084D0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 822084D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822084D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822084D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822084D0);
		  /* 822084D0h */ case    0:  		/* mr R3, R31 */
		/* 822084D0h case    0:*/		regs.R3 = regs.R31;
		/* 822084D0h case    0:*/		return 0x822084D4;
		  /* 822084D4h */ case    1:  		/* bl -90452 */
		/* 822084D4h case    1:*/		regs.LR = 0x822084D8; return 0x821F2380;
		/* 822084D4h case    1:*/		return 0x822084D8;
		  /* 822084D8h */ case    2:  		/* mr R4, R3 */
		/* 822084D8h case    2:*/		regs.R4 = regs.R3;
		/* 822084D8h case    2:*/		return 0x822084DC;
		  /* 822084DCh */ case    3:  		/* mr R3, R29 */
		/* 822084DCh case    3:*/		regs.R3 = regs.R29;
		/* 822084DCh case    3:*/		return 0x822084E0;
		  /* 822084E0h */ case    4:  		/* bl -590616 */
		/* 822084E0h case    4:*/		regs.LR = 0x822084E4; return 0x821781C8;
		/* 822084E0h case    4:*/		return 0x822084E4;
		  /* 822084E4h */ case    5:  		/* lwz R11, <#[R29 + 8]> */
		/* 822084E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 822084E4h case    5:*/		return 0x822084E8;
		  /* 822084E8h */ case    6:  		/* oris R11, R11, 512 */
		/* 822084E8h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 822084E8h case    6:*/		return 0x822084EC;
		  /* 822084ECh */ case    7:  		/* stw R11, <#[R29 + 8]> */
		/* 822084ECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 822084ECh case    7:*/		return 0x822084F0;
	}
	return 0x822084F0;
} // Block from 822084D0h-822084F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822084F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822084F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822084F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822084F0);
		  /* 822084F0h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 822084F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 822084F0h case    0:*/		return 0x822084F4;
		  /* 822084F4h */ case    1:  		/* lwz R30, <#[R11 + 4]> */
		/* 822084F4h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 822084F4h case    1:*/		return 0x822084F8;
		  /* 822084F8h */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 822084F8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 822084F8h case    2:*/		return 0x822084FC;
		  /* 822084FCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 822084FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82208508;  }
		/* 822084FCh case    3:*/		return 0x82208500;
		  /* 82208500h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82208500h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82208500h case    4:*/		return 0x82208504;
		  /* 82208504h */ case    5:  		/* bc 4, CR6_EQ, -564 */
		/* 82208504h case    5:*/		if ( !regs.CR[6].eq ) { return 0x822082D0;  }
		/* 82208504h case    5:*/		return 0x82208508;
	}
	return 0x82208508;
} // Block from 822084F0h-82208508h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82208508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208508);
		  /* 82208508h */ case    0:  		/* addi R1, R1, 544 */
		/* 82208508h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x220);
		/* 82208508h case    0:*/		return 0x8220850C;
		  /* 8220850Ch */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8220850Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8220850Ch case    1:*/		return 0x82208510;
		  /* 82208510h */ case    2:  		/* b -1536672 */
		/* 82208510h case    2:*/		return 0x82091270;
		/* 82208510h case    2:*/		return 0x82208514;
	}
	return 0x82208514;
} // Block from 82208508h-82208514h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208514);
		  /* 82208514h */ case    0:  		/* li R4, 4801 */
		/* 82208514h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208514h case    0:*/		return 0x82208518;
		  /* 82208518h */ case    1:  		/* mr R3, R31 */
		/* 82208518h case    1:*/		regs.R3 = regs.R31;
		/* 82208518h case    1:*/		return 0x8220851C;
		  /* 8220851Ch */ case    2:  		/* bl -747188 */
		/* 8220851Ch case    2:*/		regs.LR = 0x82208520; return 0x82151E68;
		/* 8220851Ch case    2:*/		return 0x82208520;
	}
	return 0x82208520;
} // Block from 82208514h-82208520h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208520);
		  /* 82208520h */ case    0:  		/* li R4, 4801 */
		/* 82208520h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208520h case    0:*/		return 0x82208524;
		  /* 82208524h */ case    1:  		/* mr R3, R31 */
		/* 82208524h case    1:*/		regs.R3 = regs.R31;
		/* 82208524h case    1:*/		return 0x82208528;
		  /* 82208528h */ case    2:  		/* bl -747200 */
		/* 82208528h case    2:*/		regs.LR = 0x8220852C; return 0x82151E68;
		/* 82208528h case    2:*/		return 0x8220852C;
	}
	return 0x8220852C;
} // Block from 82208520h-8220852Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220852Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220852C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220852C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220852C);
		  /* 8220852Ch */ case    0:  		/* li R4, 4800 */
		/* 8220852Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8220852Ch case    0:*/		return 0x82208530;
		  /* 82208530h */ case    1:  		/* mr R3, R31 */
		/* 82208530h case    1:*/		regs.R3 = regs.R31;
		/* 82208530h case    1:*/		return 0x82208534;
		  /* 82208534h */ case    2:  		/* bl -747212 */
		/* 82208534h case    2:*/		regs.LR = 0x82208538; return 0x82151E68;
		/* 82208534h case    2:*/		return 0x82208538;
	}
	return 0x82208538;
} // Block from 8220852Ch-82208538h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208538);
		  /* 82208538h */ case    0:  		/* li R4, 4801 */
		/* 82208538h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208538h case    0:*/		return 0x8220853C;
		  /* 8220853Ch */ case    1:  		/* mr R3, R31 */
		/* 8220853Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220853Ch case    1:*/		return 0x82208540;
		  /* 82208540h */ case    2:  		/* bl -747224 */
		/* 82208540h case    2:*/		regs.LR = 0x82208544; return 0x82151E68;
		/* 82208540h case    2:*/		return 0x82208544;
	}
	return 0x82208544;
} // Block from 82208538h-82208544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208544);
		  /* 82208544h */ case    0:  		/* li R4, 3636 */
		/* 82208544h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE34);
		/* 82208544h case    0:*/		return 0x82208548;
		  /* 82208548h */ case    1:  		/* bl -747232 */
		/* 82208548h case    1:*/		regs.LR = 0x8220854C; return 0x82151E68;
		/* 82208548h case    1:*/		return 0x8220854C;
	}
	return 0x8220854C;
} // Block from 82208544h-8220854Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220854Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220854C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220854C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220854C);
		  /* 8220854Ch */ case    0:  		/* li R4, 3636 */
		/* 8220854Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE34);
		/* 8220854Ch case    0:*/		return 0x82208550;
		  /* 82208550h */ case    1:  		/* bl -747240 */
		/* 82208550h case    1:*/		regs.LR = 0x82208554; return 0x82151E68;
		/* 82208550h case    1:*/		return 0x82208554;
	}
	return 0x82208554;
} // Block from 8220854Ch-82208554h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208554);
		  /* 82208554h */ case    0:  		/* li R4, 4801 */
		/* 82208554h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208554h case    0:*/		return 0x82208558;
		  /* 82208558h */ case    1:  		/* mr R3, R31 */
		/* 82208558h case    1:*/		regs.R3 = regs.R31;
		/* 82208558h case    1:*/		return 0x8220855C;
		  /* 8220855Ch */ case    2:  		/* bl -747252 */
		/* 8220855Ch case    2:*/		regs.LR = 0x82208560; return 0x82151E68;
		/* 8220855Ch case    2:*/		return 0x82208560;
	}
	return 0x82208560;
} // Block from 82208554h-82208560h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208560);
		  /* 82208560h */ case    0:  		/* li R4, 3636 */
		/* 82208560h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE34);
		/* 82208560h case    0:*/		return 0x82208564;
		  /* 82208564h */ case    1:  		/* bl -747260 */
		/* 82208564h case    1:*/		regs.LR = 0x82208568; return 0x82151E68;
		/* 82208564h case    1:*/		return 0x82208568;
	}
	return 0x82208568;
} // Block from 82208560h-82208568h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208568);
		  /* 82208568h */ case    0:  		/* li R4, 3636 */
		/* 82208568h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE34);
		/* 82208568h case    0:*/		return 0x8220856C;
		  /* 8220856Ch */ case    1:  		/* bl -747268 */
		/* 8220856Ch case    1:*/		regs.LR = 0x82208570; return 0x82151E68;
		/* 8220856Ch case    1:*/		return 0x82208570;
	}
	return 0x82208570;
} // Block from 82208568h-82208570h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208570);
		  /* 82208570h */ case    0:  		/* li R4, 4801 */
		/* 82208570h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208570h case    0:*/		return 0x82208574;
		  /* 82208574h */ case    1:  		/* mr R3, R31 */
		/* 82208574h case    1:*/		regs.R3 = regs.R31;
		/* 82208574h case    1:*/		return 0x82208578;
		  /* 82208578h */ case    2:  		/* bl -747280 */
		/* 82208578h case    2:*/		regs.LR = 0x8220857C; return 0x82151E68;
		/* 82208578h case    2:*/		return 0x8220857C;
	}
	return 0x8220857C;
} // Block from 82208570h-8220857Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220857Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220857C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220857C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220857C);
		  /* 8220857Ch */ case    0:  		/* li R4, 4801 */
		/* 8220857Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220857Ch case    0:*/		return 0x82208580;
		  /* 82208580h */ case    1:  		/* mr R3, R31 */
		/* 82208580h case    1:*/		regs.R3 = regs.R31;
		/* 82208580h case    1:*/		return 0x82208584;
		  /* 82208584h */ case    2:  		/* bl -747292 */
		/* 82208584h case    2:*/		regs.LR = 0x82208588; return 0x82151E68;
		/* 82208584h case    2:*/		return 0x82208588;
	}
	return 0x82208588;
} // Block from 8220857Ch-82208588h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208588);
		  /* 82208588h */ case    0:  		/* li R4, 4801 */
		/* 82208588h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208588h case    0:*/		return 0x8220858C;
		  /* 8220858Ch */ case    1:  		/* mr R3, R31 */
		/* 8220858Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220858Ch case    1:*/		return 0x82208590;
		  /* 82208590h */ case    2:  		/* bl -747304 */
		/* 82208590h case    2:*/		regs.LR = 0x82208594; return 0x82151E68;
		/* 82208590h case    2:*/		return 0x82208594;
	}
	return 0x82208594;
} // Block from 82208588h-82208594h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208594);
		  /* 82208594h */ case    0:  		/* li R4, 4801 */
		/* 82208594h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208594h case    0:*/		return 0x82208598;
		  /* 82208598h */ case    1:  		/* mr R3, R31 */
		/* 82208598h case    1:*/		regs.R3 = regs.R31;
		/* 82208598h case    1:*/		return 0x8220859C;
		  /* 8220859Ch */ case    2:  		/* bl -747316 */
		/* 8220859Ch case    2:*/		regs.LR = 0x822085A0; return 0x82151E68;
		/* 8220859Ch case    2:*/		return 0x822085A0;
	}
	return 0x822085A0;
} // Block from 82208594h-822085A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822085A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085A0);
		  /* 822085A0h */ case    0:  		/* li R4, 4801 */
		/* 822085A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085A0h case    0:*/		return 0x822085A4;
		  /* 822085A4h */ case    1:  		/* mr R3, R31 */
		/* 822085A4h case    1:*/		regs.R3 = regs.R31;
		/* 822085A4h case    1:*/		return 0x822085A8;
		  /* 822085A8h */ case    2:  		/* bl -747328 */
		/* 822085A8h case    2:*/		regs.LR = 0x822085AC; return 0x82151E68;
		/* 822085A8h case    2:*/		return 0x822085AC;
	}
	return 0x822085AC;
} // Block from 822085A0h-822085ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822085ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085AC);
		  /* 822085ACh */ case    0:  		/* li R4, 4801 */
		/* 822085ACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085ACh case    0:*/		return 0x822085B0;
		  /* 822085B0h */ case    1:  		/* mr R3, R31 */
		/* 822085B0h case    1:*/		regs.R3 = regs.R31;
		/* 822085B0h case    1:*/		return 0x822085B4;
		  /* 822085B4h */ case    2:  		/* bl -747340 */
		/* 822085B4h case    2:*/		regs.LR = 0x822085B8; return 0x82151E68;
		/* 822085B4h case    2:*/		return 0x822085B8;
	}
	return 0x822085B8;
} // Block from 822085ACh-822085B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822085B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085B8);
		  /* 822085B8h */ case    0:  		/* li R4, 4801 */
		/* 822085B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085B8h case    0:*/		return 0x822085BC;
		  /* 822085BCh */ case    1:  		/* bl -747348 */
		/* 822085BCh case    1:*/		regs.LR = 0x822085C0; return 0x82151E68;
		/* 822085BCh case    1:*/		return 0x822085C0;
	}
	return 0x822085C0;
} // Block from 822085B8h-822085C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822085C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085C0);
		  /* 822085C0h */ case    0:  		/* li R4, 4801 */
		/* 822085C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085C0h case    0:*/		return 0x822085C4;
		  /* 822085C4h */ case    1:  		/* bl -747356 */
		/* 822085C4h case    1:*/		regs.LR = 0x822085C8; return 0x82151E68;
		/* 822085C4h case    1:*/		return 0x822085C8;
	}
	return 0x822085C8;
} // Block from 822085C0h-822085C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822085C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085C8);
		  /* 822085C8h */ case    0:  		/* li R4, 3642 */
		/* 822085C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE3A);
		/* 822085C8h case    0:*/		return 0x822085CC;
		  /* 822085CCh */ case    1:  		/* mr R3, R31 */
		/* 822085CCh case    1:*/		regs.R3 = regs.R31;
		/* 822085CCh case    1:*/		return 0x822085D0;
		  /* 822085D0h */ case    2:  		/* bl -747368 */
		/* 822085D0h case    2:*/		regs.LR = 0x822085D4; return 0x82151E68;
		/* 822085D0h case    2:*/		return 0x822085D4;
	}
	return 0x822085D4;
} // Block from 822085C8h-822085D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822085D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085D4);
		  /* 822085D4h */ case    0:  		/* li R4, 4801 */
		/* 822085D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085D4h case    0:*/		return 0x822085D8;
		  /* 822085D8h */ case    1:  		/* mr R3, R31 */
		/* 822085D8h case    1:*/		regs.R3 = regs.R31;
		/* 822085D8h case    1:*/		return 0x822085DC;
		  /* 822085DCh */ case    2:  		/* bl -747380 */
		/* 822085DCh case    2:*/		regs.LR = 0x822085E0; return 0x82151E68;
		/* 822085DCh case    2:*/		return 0x822085E0;
	}
	return 0x822085E0;
} // Block from 822085D4h-822085E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822085E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085E0);
		  /* 822085E0h */ case    0:  		/* li R4, 4801 */
		/* 822085E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085E0h case    0:*/		return 0x822085E4;
		  /* 822085E4h */ case    1:  		/* mr R3, R31 */
		/* 822085E4h case    1:*/		regs.R3 = regs.R31;
		/* 822085E4h case    1:*/		return 0x822085E8;
		  /* 822085E8h */ case    2:  		/* bl -747392 */
		/* 822085E8h case    2:*/		regs.LR = 0x822085EC; return 0x82151E68;
		/* 822085E8h case    2:*/		return 0x822085EC;
	}
	return 0x822085EC;
} // Block from 822085E0h-822085ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822085ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085EC);
		  /* 822085ECh */ case    0:  		/* mr R5, R28 */
		/* 822085ECh case    0:*/		regs.R5 = regs.R28;
		/* 822085ECh case    0:*/		return 0x822085F0;
		  /* 822085F0h */ case    1:  		/* li R4, 3532 */
		/* 822085F0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDCC);
		/* 822085F0h case    1:*/		return 0x822085F4;
		  /* 822085F4h */ case    2:  		/* mr R3, R31 */
		/* 822085F4h case    2:*/		regs.R3 = regs.R31;
		/* 822085F4h case    2:*/		return 0x822085F8;
		  /* 822085F8h */ case    3:  		/* bl -747408 */
		/* 822085F8h case    3:*/		regs.LR = 0x822085FC; return 0x82151E68;
		/* 822085F8h case    3:*/		return 0x822085FC;
	}
	return 0x822085FC;
} // Block from 822085ECh-822085FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822085FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822085FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822085FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822085FC);
		  /* 822085FCh */ case    0:  		/* li R4, 4801 */
		/* 822085FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822085FCh case    0:*/		return 0x82208600;
		  /* 82208600h */ case    1:  		/* mr R3, R31 */
		/* 82208600h case    1:*/		regs.R3 = regs.R31;
		/* 82208600h case    1:*/		return 0x82208604;
		  /* 82208604h */ case    2:  		/* bl -747420 */
		/* 82208604h case    2:*/		regs.LR = 0x82208608; return 0x82151E68;
		/* 82208604h case    2:*/		return 0x82208608;
	}
	return 0x82208608;
} // Block from 822085FCh-82208608h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208608);
		  /* 82208608h */ case    0:  		/* li R4, 4801 */
		/* 82208608h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208608h case    0:*/		return 0x8220860C;
		  /* 8220860Ch */ case    1:  		/* mr R3, R31 */
		/* 8220860Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220860Ch case    1:*/		return 0x82208610;
		  /* 82208610h */ case    2:  		/* bl -747432 */
		/* 82208610h case    2:*/		regs.LR = 0x82208614; return 0x82151E68;
		/* 82208610h case    2:*/		return 0x82208614;
	}
	return 0x82208614;
} // Block from 82208608h-82208614h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208614);
		  /* 82208614h */ case    0:  		/* li R4, 4801 */
		/* 82208614h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208614h case    0:*/		return 0x82208618;
		  /* 82208618h */ case    1:  		/* mr R3, R31 */
		/* 82208618h case    1:*/		regs.R3 = regs.R31;
		/* 82208618h case    1:*/		return 0x8220861C;
		  /* 8220861Ch */ case    2:  		/* bl -747444 */
		/* 8220861Ch case    2:*/		regs.LR = 0x82208620; return 0x82151E68;
		/* 8220861Ch case    2:*/		return 0x82208620;
	}
	return 0x82208620;
} // Block from 82208614h-82208620h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208620);
		  /* 82208620h */ case    0:  		/* li R4, 4801 */
		/* 82208620h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208620h case    0:*/		return 0x82208624;
		  /* 82208624h */ case    1:  		/* mr R3, R31 */
		/* 82208624h case    1:*/		regs.R3 = regs.R31;
		/* 82208624h case    1:*/		return 0x82208628;
		  /* 82208628h */ case    2:  		/* bl -747456 */
		/* 82208628h case    2:*/		regs.LR = 0x8220862C; return 0x82151E68;
		/* 82208628h case    2:*/		return 0x8220862C;
	}
	return 0x8220862C;
} // Block from 82208620h-8220862Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220862Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220862C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220862C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220862C);
		  /* 8220862Ch */ case    0:  		/* li R4, 4800 */
		/* 8220862Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8220862Ch case    0:*/		return 0x82208630;
		  /* 82208630h */ case    1:  		/* bl -747464 */
		/* 82208630h case    1:*/		regs.LR = 0x82208634; return 0x82151E68;
		/* 82208630h case    1:*/		return 0x82208634;
	}
	return 0x82208634;
} // Block from 8220862Ch-82208634h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208634);
		  /* 82208634h */ case    0:  		/* li R4, 4801 */
		/* 82208634h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208634h case    0:*/		return 0x82208638;
		  /* 82208638h */ case    1:  		/* mr R3, R31 */
		/* 82208638h case    1:*/		regs.R3 = regs.R31;
		/* 82208638h case    1:*/		return 0x8220863C;
		  /* 8220863Ch */ case    2:  		/* bl -747476 */
		/* 8220863Ch case    2:*/		regs.LR = 0x82208640; return 0x82151E68;
		/* 8220863Ch case    2:*/		return 0x82208640;
	}
	return 0x82208640;
} // Block from 82208634h-82208640h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208640);
		  /* 82208640h */ case    0:  		/* li R4, 4801 */
		/* 82208640h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208640h case    0:*/		return 0x82208644;
		  /* 82208644h */ case    1:  		/* mr R3, R31 */
		/* 82208644h case    1:*/		regs.R3 = regs.R31;
		/* 82208644h case    1:*/		return 0x82208648;
		  /* 82208648h */ case    2:  		/* bl -747488 */
		/* 82208648h case    2:*/		regs.LR = 0x8220864C; return 0x82151E68;
		/* 82208648h case    2:*/		return 0x8220864C;
	}
	return 0x8220864C;
} // Block from 82208640h-8220864Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220864Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220864C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220864C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220864C);
		  /* 8220864Ch */ case    0:  		/* li R4, 4801 */
		/* 8220864Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220864Ch case    0:*/		return 0x82208650;
		  /* 82208650h */ case    1:  		/* mr R3, R31 */
		/* 82208650h case    1:*/		regs.R3 = regs.R31;
		/* 82208650h case    1:*/		return 0x82208654;
		  /* 82208654h */ case    2:  		/* bl -747500 */
		/* 82208654h case    2:*/		regs.LR = 0x82208658; return 0x82151E68;
		/* 82208654h case    2:*/		return 0x82208658;
	}
	return 0x82208658;
} // Block from 8220864Ch-82208658h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208658);
		  /* 82208658h */ case    0:  		/* li R4, 3626 */
		/* 82208658h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE2A);
		/* 82208658h case    0:*/		return 0x8220865C;
		  /* 8220865Ch */ case    1:  		/* mr R3, R31 */
		/* 8220865Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220865Ch case    1:*/		return 0x82208660;
		  /* 82208660h */ case    2:  		/* bl -747512 */
		/* 82208660h case    2:*/		regs.LR = 0x82208664; return 0x82151E68;
		/* 82208660h case    2:*/		return 0x82208664;
	}
	return 0x82208664;
} // Block from 82208658h-82208664h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208664);
		  /* 82208664h */ case    0:  		/* li R4, 3625 */
		/* 82208664h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE29);
		/* 82208664h case    0:*/		return 0x82208668;
		  /* 82208668h */ case    1:  		/* mr R3, R31 */
		/* 82208668h case    1:*/		regs.R3 = regs.R31;
		/* 82208668h case    1:*/		return 0x8220866C;
		  /* 8220866Ch */ case    2:  		/* bl -747524 */
		/* 8220866Ch case    2:*/		regs.LR = 0x82208670; return 0x82151E68;
		/* 8220866Ch case    2:*/		return 0x82208670;
		  /* 82208670h */ case    3:  		/* lis R11, -32252 */
		/* 82208670h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82208670h case    3:*/		return 0x82208674;
		  /* 82208674h */ case    4:  		/* li R4, 3500 */
		/* 82208674h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82208674h case    4:*/		return 0x82208678;
		  /* 82208678h */ case    5:  		/* addi R5, R11, -12912 */
		/* 82208678h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCD90);
		/* 82208678h case    5:*/		return 0x8220867C;
		  /* 8220867Ch */ case    6:  		/* mr R3, R31 */
		/* 8220867Ch case    6:*/		regs.R3 = regs.R31;
		/* 8220867Ch case    6:*/		return 0x82208680;
		  /* 82208680h */ case    7:  		/* bl -747544 */
		/* 82208680h case    7:*/		regs.LR = 0x82208684; return 0x82151E68;
		/* 82208680h case    7:*/		return 0x82208684;
	}
	return 0x82208684;
} // Block from 82208664h-82208684h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82208684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208684);
		  /* 82208684h */ case    0:  		/* li R4, 4801 */
		/* 82208684h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208684h case    0:*/		return 0x82208688;
		  /* 82208688h */ case    1:  		/* mr R3, R31 */
		/* 82208688h case    1:*/		regs.R3 = regs.R31;
		/* 82208688h case    1:*/		return 0x8220868C;
		  /* 8220868Ch */ case    2:  		/* bl -747556 */
		/* 8220868Ch case    2:*/		regs.LR = 0x82208690; return 0x82151E68;
		/* 8220868Ch case    2:*/		return 0x82208690;
	}
	return 0x82208690;
} // Block from 82208684h-82208690h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208690);
		  /* 82208690h */ case    0:  		/* li R4, 4801 */
		/* 82208690h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208690h case    0:*/		return 0x82208694;
		  /* 82208694h */ case    1:  		/* bl -747564 */
		/* 82208694h case    1:*/		regs.LR = 0x82208698; return 0x82151E68;
		/* 82208694h case    1:*/		return 0x82208698;
	}
	return 0x82208698;
} // Block from 82208690h-82208698h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208698);
		  /* 82208698h */ case    0:  		/* li R4, 3529 */
		/* 82208698h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDC9);
		/* 82208698h case    0:*/		return 0x8220869C;
		  /* 8220869Ch */ case    1:  		/* mr R3, R31 */
		/* 8220869Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220869Ch case    1:*/		return 0x822086A0;
		  /* 822086A0h */ case    2:  		/* bl -747576 */
		/* 822086A0h case    2:*/		regs.LR = 0x822086A4; return 0x82151E68;
		/* 822086A0h case    2:*/		return 0x822086A4;
		  /* 822086A4h */ case    3:  		/* nop */
		/* 822086A4h case    3:*/		cpu::op::nop();
		/* 822086A4h case    3:*/		return 0x822086A8;
	}
	return 0x822086A8;
} // Block from 82208698h-822086A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822086A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822086A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822086A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822086A8);
		  /* 822086A8h */ case    0:  		/* mfspr R12, LR */
		/* 822086A8h case    0:*/		regs.R12 = regs.LR;
		/* 822086A8h case    0:*/		return 0x822086AC;
		  /* 822086ACh */ case    1:  		/* bl -1537144 */
		/* 822086ACh case    1:*/		regs.LR = 0x822086B0; return 0x82091234;
		/* 822086ACh case    1:*/		return 0x822086B0;
		  /* 822086B0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 822086B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 822086B0h case    2:*/		return 0x822086B4;
		  /* 822086B4h */ case    3:  		/* mr R27, R3 */
		/* 822086B4h case    3:*/		regs.R27 = regs.R3;
		/* 822086B4h case    3:*/		return 0x822086B8;
		  /* 822086B8h */ case    4:  		/* mr R28, R4 */
		/* 822086B8h case    4:*/		regs.R28 = regs.R4;
		/* 822086B8h case    4:*/		return 0x822086BC;
		  /* 822086BCh */ case    5:  		/* mr R21, R5 */
		/* 822086BCh case    5:*/		regs.R21 = regs.R5;
		/* 822086BCh case    5:*/		return 0x822086C0;
		  /* 822086C0h */ case    6:  		/* li R19, 0 */
		/* 822086C0h case    6:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 822086C0h case    6:*/		return 0x822086C4;
		  /* 822086C4h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 822086C4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 822086C4h case    7:*/		return 0x822086C8;
		  /* 822086C8h */ case    8:  		/* bc 12, CR6_EQ, 3088 */
		/* 822086C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x822092D8;  }
		/* 822086C8h case    8:*/		return 0x822086CC;
		  /* 822086CCh */ case    9:  		/* lwz R11, <#[R4 + 4]> */
		/* 822086CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 822086CCh case    9:*/		return 0x822086D0;
		  /* 822086D0h */ case   10:  		/* cmpwi CR6, R11, 4 */
		/* 822086D0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 822086D0h case   10:*/		return 0x822086D4;
		  /* 822086D4h */ case   11:  		/* bc 4, CR6_EQ, 3076 */
		/* 822086D4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x822092D8;  }
		/* 822086D4h case   11:*/		return 0x822086D8;
		  /* 822086D8h */ case   12:  		/* lwz R11, <#[R3 + 12]> */
		/* 822086D8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 822086D8h case   12:*/		return 0x822086DC;
		  /* 822086DCh */ case   13:  		/* stw R4, <#[R3 + 8]> */
		/* 822086DCh case   13:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000008) );
		/* 822086DCh case   13:*/		return 0x822086E0;
		  /* 822086E0h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 822086E0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822086E0h case   14:*/		return 0x822086E4;
		  /* 822086E4h */ case   15:  		/* bc 4, CR6_EQ, 252 */
		/* 822086E4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822087E0;  }
		/* 822086E4h case   15:*/		return 0x822086E8;
		  /* 822086E8h */ case   16:  		/* lwz R31, <#[R4 + 28]> */
		/* 822086E8h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x0000001C) );
		/* 822086E8h case   16:*/		return 0x822086EC;
		  /* 822086ECh */ case   17:  		/* cmplwi CR6, R31, 0 */
		/* 822086ECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 822086ECh case   17:*/		return 0x822086F0;
		  /* 822086F0h */ case   18:  		/* bc 4, CR6_EQ, 156 */
		/* 822086F0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8220878C;  }
		/* 822086F0h case   18:*/		return 0x822086F4;
		  /* 822086F4h */ case   19:  		/* lwz R11, <#[R4 + 40]> */
		/* 822086F4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000028) );
		/* 822086F4h case   19:*/		return 0x822086F8;
		  /* 822086F8h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 822086F8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822086F8h case   20:*/		return 0x822086FC;
		  /* 822086FCh */ case   21:  		/* bc 12, CR6_EQ, 24 */
		/* 822086FCh case   21:*/		if ( regs.CR[6].eq ) { return 0x82208714;  }
		/* 822086FCh case   21:*/		return 0x82208700;
		  /* 82208700h */ case   22:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208700h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208700h case   22:*/		return 0x82208704;
		  /* 82208704h */ case   23:  		/* cmpwi CR6, R10, 1 */
		/* 82208704h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208704h case   23:*/		return 0x82208708;
		  /* 82208708h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 82208708h case   24:*/		if ( regs.CR[6].eq ) { return 0x82208714;  }
		/* 82208708h case   24:*/		return 0x8220870C;
		  /* 8220870Ch */ case   25:  		/* li R4, 4801 */
		/* 8220870Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220870Ch case   25:*/		return 0x82208710;
		  /* 82208710h */ case   26:  		/* bl -747688 */
		/* 82208710h case   26:*/		regs.LR = 0x82208714; return 0x82151E68;
		/* 82208710h case   26:*/		return 0x82208714;
	}
	return 0x82208714;
} // Block from 822086A8h-82208714h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82208714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208714);
		  /* 82208714h */ case    0:  		/* mr R9, R11 */
		/* 82208714h case    0:*/		regs.R9 = regs.R11;
		/* 82208714h case    0:*/		return 0x82208718;
		  /* 82208718h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208718h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208718h case    1:*/		return 0x8220871C;
		  /* 8220871Ch */ case    2:  		/* bc 12, CR6_EQ, 196 */
		/* 8220871Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x822087E0;  }
		/* 8220871Ch case    2:*/		return 0x82208720;
		  /* 82208720h */ case    3:  		/* lwz R11, <#[R9 + 8]> */
		/* 82208720h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82208720h case    3:*/		return 0x82208724;
		  /* 82208724h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208724h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208724h case    4:*/		return 0x82208728;
		  /* 82208728h */ case    5:  		/* cmpwi CR6, R10, 6 */
		/* 82208728h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 82208728h case    5:*/		return 0x8220872C;
		  /* 8220872Ch */ case    6:  		/* bc 4, CR6_EQ, 60 */
		/* 8220872Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82208768;  }
		/* 8220872Ch case    6:*/		return 0x82208730;
		  /* 82208730h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 82208730h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82208730h case    7:*/		return 0x82208734;
		  /* 82208734h */ case    8:  		/* bc 12, CR0_EQ, 108 */
		/* 82208734h case    8:*/		if ( regs.CR[0].eq ) { return 0x822087A0;  }
		/* 82208734h case    8:*/		return 0x82208738;
		  /* 82208738h */ case    9:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82208738h case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82208738h case    9:*/		return 0x8220873C;
		  /* 8220873Ch */ case   10:  		/* cmpwi CR6, R10, 6 */
		/* 8220873Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 8220873Ch case   10:*/		return 0x82208740;
		  /* 82208740h */ case   11:  		/* bc 4, CR6_EQ, 96 */
		/* 82208740h case   11:*/		if ( !regs.CR[6].eq ) { return 0x822087A0;  }
		/* 82208740h case   11:*/		return 0x82208744;
		  /* 82208744h */ case   12:  		/* lwz R10, <#[R11 + 16]> */
		/* 82208744h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82208744h case   12:*/		return 0x82208748;
		  /* 82208748h */ case   13:  		/* cmpwi CR6, R10, 2 */
		/* 82208748h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 82208748h case   13:*/		return 0x8220874C;
		  /* 8220874Ch */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 8220874Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x82208768;  }
		/* 8220874Ch case   14:*/		return 0x82208750;
		  /* 82208750h */ case   15:  		/* lwz R11, <#[R11 + 24]> */
		/* 82208750h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82208750h case   15:*/		return 0x82208754;
		  /* 82208754h */ case   16:  		/* lwz R10, <#[R11 + 16]> */
		/* 82208754h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82208754h case   16:*/		return 0x82208758;
		  /* 82208758h */ case   17:  		/* cmplw CR6, R10, R31 */
		/* 82208758h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82208758h case   17:*/		return 0x8220875C;
		  /* 8220875Ch */ case   18:  		/* bc 4, CR6_GT, 12 */
		/* 8220875Ch case   18:*/		if ( !regs.CR[6].gt ) { return 0x82208768;  }
		/* 8220875Ch case   18:*/		return 0x82208760;
		  /* 82208760h */ case   19:  		/* lwz R11, <#[R11 + 20]> */
		/* 82208760h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82208760h case   19:*/		return 0x82208764;
		  /* 82208764h */ case   20:  		/* add R31, R11, R10 */
		/* 82208764h case   20:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 82208764h case   20:*/		return 0x82208768;
	}
	return 0x82208768;
} // Block from 82208714h-82208768h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82208768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208768);
		  /* 82208768h */ case    0:  		/* lwz R11, <#[R9 + 12]> */
		/* 82208768h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 82208768h case    0:*/		return 0x8220876C;
		  /* 8220876Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220876Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220876Ch case    1:*/		return 0x82208770;
		  /* 82208770h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82208770h case    2:*/		if ( regs.CR[6].eq ) { return 0x82208780;  }
		/* 82208770h case    2:*/		return 0x82208774;
		  /* 82208774h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208774h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208774h case    3:*/		return 0x82208778;
		  /* 82208778h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82208778h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208778h case    4:*/		return 0x8220877C;
		  /* 8220877Ch */ case    5:  		/* bc 4, CR6_EQ, 48 */
		/* 8220877Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822087AC;  }
		/* 8220877Ch case    5:*/		return 0x82208780;
	}
	return 0x82208780;
} // Block from 82208768h-82208780h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82208780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208780);
		  /* 82208780h */ case    0:  		/* mr R9, R11 */
		/* 82208780h case    0:*/		regs.R9 = regs.R11;
		/* 82208780h case    0:*/		return 0x82208784;
		  /* 82208784h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208784h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208784h case    1:*/		return 0x82208788;
		  /* 82208788h */ case    2:  		/* bc 4, CR6_EQ, -104 */
		/* 82208788h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208720;  }
		/* 82208788h case    2:*/		return 0x8220878C;
	}
	return 0x8220878C;
} // Block from 82208780h-8220878Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220878Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220878C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220878C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220878C);
		  /* 8220878Ch */ case    0:  		/* cmplwi CR6, R31, 32767 */
		/* 8220878Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00007FFF);
		/* 8220878Ch case    0:*/		return 0x82208790;
		  /* 82208790h */ case    1:  		/* bc 4, CR6_GT, 40 */
		/* 82208790h case    1:*/		if ( !regs.CR[6].gt ) { return 0x822087B8;  }
		/* 82208790h case    1:*/		return 0x82208794;
		  /* 82208794h */ case    2:  		/* li R4, 3519 */
		/* 82208794h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xDBF);
		/* 82208794h case    2:*/		return 0x82208798;
		  /* 82208798h */ case    3:  		/* mr R3, R27 */
		/* 82208798h case    3:*/		regs.R3 = regs.R27;
		/* 82208798h case    3:*/		return 0x8220879C;
		  /* 8220879Ch */ case    4:  		/* bl -747828 */
		/* 8220879Ch case    4:*/		regs.LR = 0x822087A0; return 0x82151E68;
		/* 8220879Ch case    4:*/		return 0x822087A0;
	}
	return 0x822087A0;
} // Block from 8220878Ch-822087A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822087A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822087A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822087A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822087A0);
		  /* 822087A0h */ case    0:  		/* li R4, 4801 */
		/* 822087A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822087A0h case    0:*/		return 0x822087A4;
		  /* 822087A4h */ case    1:  		/* mr R3, R27 */
		/* 822087A4h case    1:*/		regs.R3 = regs.R27;
		/* 822087A4h case    1:*/		return 0x822087A8;
		  /* 822087A8h */ case    2:  		/* bl -747840 */
		/* 822087A8h case    2:*/		regs.LR = 0x822087AC; return 0x82151E68;
		/* 822087A8h case    2:*/		return 0x822087AC;
	}
	return 0x822087AC;
} // Block from 822087A0h-822087ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822087ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822087AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822087AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822087AC);
		  /* 822087ACh */ case    0:  		/* li R4, 4801 */
		/* 822087ACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822087ACh case    0:*/		return 0x822087B0;
		  /* 822087B0h */ case    1:  		/* mr R3, R27 */
		/* 822087B0h case    1:*/		regs.R3 = regs.R27;
		/* 822087B0h case    1:*/		return 0x822087B4;
		  /* 822087B4h */ case    2:  		/* bl -747852 */
		/* 822087B4h case    2:*/		regs.LR = 0x822087B8; return 0x82151E68;
		/* 822087B4h case    2:*/		return 0x822087B8;
	}
	return 0x822087B8;
} // Block from 822087ACh-822087B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822087B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822087B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822087B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822087B8);
		  /* 822087B8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 822087B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 822087B8h case    0:*/		return 0x822087BC;
		  /* 822087BCh */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 822087BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x822087E0;  }
		/* 822087BCh case    1:*/		return 0x822087C0;
		  /* 822087C0h */ case    2:  		/* addi R11, R31, 1 */
		/* 822087C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 822087C0h case    2:*/		return 0x822087C4;
		  /* 822087C4h */ case    3:  		/* li R5, 0 */
		/* 822087C4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822087C4h case    3:*/		return 0x822087C8;
		  /* 822087C8h */ case    4:  		/* stw R11, <#[R27 + 20]> */
		/* 822087C8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 822087C8h case    4:*/		return 0x822087CC;
		  /* 822087CCh */ case    5:  		/* mulli R4, R11, 40 */
		/* 822087CCh case    5:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R11,0x28);
		/* 822087CCh case    5:*/		return 0x822087D0;
		  /* 822087D0h */ case    6:  		/* mr R3, R27 */
		/* 822087D0h case    6:*/		regs.R3 = regs.R27;
		/* 822087D0h case    6:*/		return 0x822087D4;
		  /* 822087D4h */ case    7:  		/* bl -508332 */
		/* 822087D4h case    7:*/		regs.LR = 0x822087D8; return 0x8218C628;
		/* 822087D4h case    7:*/		return 0x822087D8;
		  /* 822087D8h */ case    8:  		/* stw R3, <#[R27 + 12]> */
		/* 822087D8h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000000C) );
		/* 822087D8h case    8:*/		return 0x822087DC;
		  /* 822087DCh */ case    9:  		/* stw R31, <#[R27 + 16]> */
		/* 822087DCh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000010) );
		/* 822087DCh case    9:*/		return 0x822087E0;
	}
	return 0x822087E0;
} // Block from 822087B8h-822087E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822087E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822087E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822087E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822087E0);
		  /* 822087E0h */ case    0:  		/* lwz R11, <#[R28 + 40]> */
		/* 822087E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 822087E0h case    0:*/		return 0x822087E4;
		  /* 822087E4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 822087E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822087E4h case    1:*/		return 0x822087E8;
		  /* 822087E8h */ case    2:  		/* bc 12, CR6_EQ, 380 */
		/* 822087E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82208964;  }
		/* 822087E8h case    2:*/		return 0x822087EC;
		  /* 822087ECh */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 822087ECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822087ECh case    3:*/		return 0x822087F0;
		  /* 822087F0h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 822087F0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 822087F0h case    4:*/		return 0x822087F4;
		  /* 822087F4h */ case    5:  		/* bc 12, CR6_EQ, 368 */
		/* 822087F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82208964;  }
		/* 822087F4h case    5:*/		return 0x822087F8;
		  /* 822087F8h */ case    6:  		/* li R4, 4801 */
		/* 822087F8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822087F8h case    6:*/		return 0x822087FC;
		  /* 822087FCh */ case    7:  		/* mr R3, R27 */
		/* 822087FCh case    7:*/		regs.R3 = regs.R27;
		/* 822087FCh case    7:*/		return 0x82208800;
		  /* 82208800h */ case    8:  		/* bl -747928 */
		/* 82208800h case    8:*/		regs.LR = 0x82208804; return 0x82151E68;
		/* 82208800h case    8:*/		return 0x82208804;
		  /* 82208804h */ case    9:  		/* lwz R11, <#[R29 + 8]> */
		/* 82208804h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82208804h case    9:*/		return 0x82208808;
		  /* 82208808h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208808h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208808h case   10:*/		return 0x8220880C;
		  /* 8220880Ch */ case   11:  		/* cmpwi CR6, R10, 6 */
		/* 8220880Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 8220880Ch case   11:*/		return 0x82208810;
		  /* 82208810h */ case   12:  		/* bc 4, CR6_EQ, 316 */
		/* 82208810h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220894C;  }
		/* 82208810h case   12:*/		return 0x82208814;
		  /* 82208814h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 82208814h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82208814h case   13:*/		return 0x82208818;
		  /* 82208818h */ case   14:  		/* bc 12, CR0_EQ, 548 */
		/* 82208818h case   14:*/		if ( regs.CR[0].eq ) { return 0x82208A3C;  }
		/* 82208818h case   14:*/		return 0x8220881C;
		  /* 8220881Ch */ case   15:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8220881Ch case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8220881Ch case   15:*/		return 0x82208820;
		  /* 82208820h */ case   16:  		/* cmpwi CR6, R10, 6 */
		/* 82208820h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 82208820h case   16:*/		return 0x82208824;
		  /* 82208824h */ case   17:  		/* bc 4, CR6_EQ, 536 */
		/* 82208824h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82208A3C;  }
		/* 82208824h case   17:*/		return 0x82208828;
		  /* 82208828h */ case   18:  		/* lwz R10, <#[R11 + 16]> */
		/* 82208828h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82208828h case   18:*/		return 0x8220882C;
		  /* 8220882Ch */ case   19:  		/* cmpwi CR6, R10, 2 */
		/* 8220882Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 8220882Ch case   19:*/		return 0x82208830;
		  /* 82208830h */ case   20:  		/* bc 4, CR6_EQ, 284 */
		/* 82208830h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8220894C;  }
		/* 82208830h case   20:*/		return 0x82208834;
		  /* 82208834h */ case   21:  		/* lwz R11, <#[R11 + 24]> */
		/* 82208834h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82208834h case   21:*/		return 0x82208838;
		  /* 82208838h */ case   22:  		/* cmplw CR6, R21, R11 */
		/* 82208838h case   22:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 82208838h case   22:*/		return 0x8220883C;
		  /* 8220883Ch */ case   23:  		/* bc 4, CR6_EQ, 272 */
		/* 8220883Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x8220894C;  }
		/* 8220883Ch case   23:*/		return 0x82208840;
		  /* 82208840h */ case   24:  		/* lwz R31, <#[R11 + 68]> */
		/* 82208840h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000044) );
		/* 82208840h case   24:*/		return 0x82208844;
		  /* 82208844h */ case   25:  		/* b 84 */
		/* 82208844h case   25:*/		return 0x82208898;
		/* 82208844h case   25:*/		return 0x82208848;
		  /* 82208848h */ case   26:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208848h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208848h case   26:*/		return 0x8220884C;
		  /* 8220884Ch */ case   27:  		/* cmpwi CR6, R11, 19 */
		/* 8220884Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 8220884Ch case   27:*/		return 0x82208850;
		  /* 82208850h */ case   28:  		/* bc 4, CR6_EQ, 16 */
		/* 82208850h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82208860;  }
		/* 82208850h case   28:*/		return 0x82208854;
		  /* 82208854h */ case   29:  		/* mr R30, R31 */
		/* 82208854h case   29:*/		regs.R30 = regs.R31;
		/* 82208854h case   29:*/		return 0x82208858;
		  /* 82208858h */ case   30:  		/* li R31, 0 */
		/* 82208858h case   30:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82208858h case   30:*/		return 0x8220885C;
		  /* 8220885Ch */ case   31:  		/* b 40 */
		/* 8220885Ch case   31:*/		return 0x82208884;
		/* 8220885Ch case   31:*/		return 0x82208860;
	}
	return 0x82208860;
} // Block from 822087E0h-82208860h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82208860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208860);
		  /* 82208860h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 82208860h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82208860h case    0:*/		return 0x82208864;
		  /* 82208864h */ case    1:  		/* bc 4, CR6_EQ, 460 */
		/* 82208864h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82208A30;  }
		/* 82208864h case    1:*/		return 0x82208868;
		  /* 82208868h */ case    2:  		/* lwz R30, <#[R31 + 8]> */
		/* 82208868h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82208868h case    2:*/		return 0x8220886C;
		  /* 8220886Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8220886Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220886Ch case    3:*/		return 0x82208870;
		  /* 82208870h */ case    4:  		/* bc 12, CR6_EQ, 436 */
		/* 82208870h case    4:*/		if ( regs.CR[6].eq ) { return 0x82208A24;  }
		/* 82208870h case    4:*/		return 0x82208874;
		  /* 82208874h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 82208874h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82208874h case    5:*/		return 0x82208878;
		  /* 82208878h */ case    6:  		/* cmpwi CR6, R11, 19 */
		/* 82208878h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82208878h case    6:*/		return 0x8220887C;
		  /* 8220887Ch */ case    7:  		/* bc 4, CR6_EQ, 424 */
		/* 8220887Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82208A24;  }
		/* 8220887Ch case    7:*/		return 0x82208880;
		  /* 82208880h */ case    8:  		/* lwz R31, <#[R31 + 12]> */
		/* 82208880h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 82208880h case    8:*/		return 0x82208884;
	}
	return 0x82208884;
} // Block from 82208860h-82208884h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82208884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208884);
		  /* 82208884h */ case    0:  		/* mr R4, R30 */
		/* 82208884h case    0:*/		regs.R4 = regs.R30;
		/* 82208884h case    0:*/		return 0x82208888;
		  /* 82208888h */ case    1:  		/* mr R3, R27 */
		/* 82208888h case    1:*/		regs.R3 = regs.R27;
		/* 82208888h case    1:*/		return 0x8220888C;
		  /* 8220888Ch */ case    2:  		/* bl -113916 */
		/* 8220888Ch case    2:*/		regs.LR = 0x82208890; return 0x821ECB90;
		/* 8220888Ch case    2:*/		return 0x82208890;
		  /* 82208890h */ case    3:  		/* cmpwi CR6, R3, 15 */
		/* 82208890h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000000F);
		/* 82208890h case    3:*/		return 0x82208894;
		  /* 82208894h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 82208894h case    4:*/		if ( regs.CR[6].eq ) { return 0x822088A4;  }
		/* 82208894h case    4:*/		return 0x82208898;
	}
	return 0x82208898;
} // Block from 82208884h-82208898h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82208898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208898);
		  /* 82208898h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82208898h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208898h case    0:*/		return 0x8220889C;
		  /* 8220889Ch */ case    1:  		/* bc 4, CR6_EQ, -84 */
		/* 8220889Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82208848;  }
		/* 8220889Ch case    1:*/		return 0x822088A0;
		  /* 822088A0h */ case    2:  		/* b 172 */
		/* 822088A0h case    2:*/		return 0x8220894C;
		/* 822088A0h case    2:*/		return 0x822088A4;
	}
	return 0x822088A4;
} // Block from 82208898h-822088A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822088A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822088A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822088A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822088A4);
		  /* 822088A4h */ case    0:  		/* addi R5, R27, 800 */
		/* 822088A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R27,0x320);
		/* 822088A4h case    0:*/		return 0x822088A8;
		  /* 822088A8h */ case    1:  		/* lwz R4, <#[R30 + 20]> */
		/* 822088A8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000014) );
		/* 822088A8h case    1:*/		return 0x822088AC;
		  /* 822088ACh */ case    2:  		/* addi R6, R1, 80 */
		/* 822088ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 822088ACh case    2:*/		return 0x822088B0;
		  /* 822088B0h */ case    3:  		/* mr R3, R27 */
		/* 822088B0h case    3:*/		regs.R3 = regs.R27;
		/* 822088B0h case    3:*/		return 0x822088B4;
		  /* 822088B4h */ case    4:  		/* bl -116100 */
		/* 822088B4h case    4:*/		regs.LR = 0x822088B8; return 0x821EC330;
		/* 822088B4h case    4:*/		return 0x822088B8;
		  /* 822088B8h */ case    5:  		/* lwz R6, <#[R27 + 800]> */
		/* 822088B8h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000320) );
		/* 822088B8h case    5:*/		return 0x822088BC;
		  /* 822088BCh */ case    6:  		/* lwz R7, <#[R1 + 80]> */
		/* 822088BCh case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 822088BCh case    6:*/		return 0x822088C0;
		  /* 822088C0h */ case    7:  		/* cmplw CR6, R7, R6 */
		/* 822088C0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 822088C0h case    7:*/		return 0x822088C4;
		  /* 822088C4h */ case    8:  		/* bc 12, CR6_LT, 336 */
		/* 822088C4h case    8:*/		if ( regs.CR[6].lt ) { return 0x82208A14;  }
		/* 822088C4h case    8:*/		return 0x822088C8;
		  /* 822088C8h */ case    9:  		/* cmplwi CR6, R7, 32 */
		/* 822088C8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000020);
		/* 822088C8h case    9:*/		return 0x822088CC;
		  /* 822088CCh */ case   10:  		/* bc 4, CR6_LT, 328 */
		/* 822088CCh case   10:*/		if ( !regs.CR[6].lt ) { return 0x82208A14;  }
		/* 822088CCh case   10:*/		return 0x822088D0;
		  /* 822088D0h */ case   11:  		/* subf R10, R6, R7 */
		/* 822088D0h case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R6,regs.R7);
		/* 822088D0h case   11:*/		return 0x822088D4;
		  /* 822088D4h */ case   12:  		/* lwz R11, <#[R27 + 56]> */
		/* 822088D4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000038) );
		/* 822088D4h case   12:*/		return 0x822088D8;
		  /* 822088D8h */ case   13:  		/* addi R10, R10, 1 */
		/* 822088D8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822088D8h case   13:*/		return 0x822088DC;
		  /* 822088DCh */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 822088DCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822088DCh case   14:*/		return 0x822088E0;
		  /* 822088E0h */ case   15:  		/* stw R10, <#[R27 + 804]> */
		/* 822088E0h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000324) );
		/* 822088E0h case   15:*/		return 0x822088E4;
		  /* 822088E4h */ case   16:  		/* bc 12, CR6_EQ, 104 */
		/* 822088E4h case   16:*/		if ( regs.CR[6].eq ) { return 0x8220894C;  }
		/* 822088E4h case   16:*/		return 0x822088E8;
		  /* 822088E8h */ case   17:  		/* lwz R9, <#[R11 + 36]> */
		/* 822088E8h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000024) );
		/* 822088E8h case   17:*/		return 0x822088EC;
		  /* 822088ECh */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 822088ECh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 822088ECh case   18:*/		return 0x822088F0;
		  /* 822088F0h */ case   19:  		/* bc 4, CR6_EQ, 16 */
		/* 822088F0h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82208900;  }
		/* 822088F0h case   19:*/		return 0x822088F4;
		  /* 822088F4h */ case   20:  		/* lwz R8, <#[R11 + 44]> */
		/* 822088F4h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000002C) );
		/* 822088F4h case   20:*/		return 0x822088F8;
		  /* 822088F8h */ case   21:  		/* cmplwi CR6, R8, 0 */
		/* 822088F8h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 822088F8h case   21:*/		return 0x822088FC;
		  /* 822088FCh */ case   22:  		/* bc 12, CR6_EQ, 80 */
		/* 822088FCh case   22:*/		if ( regs.CR[6].eq ) { return 0x8220894C;  }
		/* 822088FCh case   22:*/		return 0x82208900;
	}
	return 0x82208900;
} // Block from 822088A4h-82208900h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82208900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208900);
		  /* 82208900h */ case    0:  		/* lwz R8, <#[R27 + 48]> */
		/* 82208900h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000030) );
		/* 82208900h case    0:*/		return 0x82208904;
		  /* 82208904h */ case    1:  		/* lis R7, -1 */
		/* 82208904h case    1:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 82208904h case    1:*/		return 0x82208908;
		  /* 82208908h */ case    2:  		/* rlwinm R8, R8, 0, 0, 15 */
		/* 82208908h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R8,regs.R8);
		/* 82208908h case    2:*/		return 0x8220890C;
		  /* 8220890Ch */ case    3:  		/* cmplw CR6, R8, R7 */
		/* 8220890Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 8220890Ch case    3:*/		return 0x82208910;
		  /* 82208910h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 82208910h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82208928;  }
		/* 82208910h case    4:*/		return 0x82208914;
		  /* 82208914h */ case    5:  		/* lwz R11, <#[R11 + 32]> */
		/* 82208914h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82208914h case    5:*/		return 0x82208918;
		  /* 82208918h */ case    6:  		/* cmplw CR6, R6, R11 */
		/* 82208918h case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 82208918h case    6:*/		return 0x8220891C;
		  /* 8220891Ch */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 8220891Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82208940;  }
		/* 8220891Ch case    7:*/		return 0x82208920;
		  /* 82208920h */ case    8:  		/* cmplw CR6, R10, R9 */
		/* 82208920h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82208920h case    8:*/		return 0x82208924;
		  /* 82208924h */ case    9:  		/* b 24 */
		/* 82208924h case    9:*/		return 0x8220893C;
		/* 82208924h case    9:*/		return 0x82208928;
	}
	return 0x82208928;
} // Block from 82208900h-82208928h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82208928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208928);
		  /* 82208928h */ case    0:  		/* lwz R9, <#[R11 + 40]> */
		/* 82208928h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 82208928h case    0:*/		return 0x8220892C;
		  /* 8220892Ch */ case    1:  		/* cmplw CR6, R6, R9 */
		/* 8220892Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 8220892Ch case    1:*/		return 0x82208930;
		  /* 82208930h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82208930h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208940;  }
		/* 82208930h case    2:*/		return 0x82208934;
		  /* 82208934h */ case    3:  		/* lwz R11, <#[R11 + 44]> */
		/* 82208934h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82208934h case    3:*/		return 0x82208938;
		  /* 82208938h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 82208938h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82208938h case    4:*/		return 0x8220893C;
	}
	return 0x8220893C;
} // Block from 82208928h-8220893Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220893Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220893C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220893C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220893C);
		  /* 8220893Ch */ case    0:  		/* bc 12, CR6_EQ, 16 */
		/* 8220893Ch case    0:*/		if ( regs.CR[6].eq ) { return 0x8220894C;  }
		/* 8220893Ch case    0:*/		return 0x82208940;
	}
	return 0x82208940;
} // Block from 8220893Ch-82208940h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82208940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208940);
		  /* 82208940h */ case    0:  		/* li R4, 3582 */
		/* 82208940h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDFE);
		/* 82208940h case    0:*/		return 0x82208944;
		  /* 82208944h */ case    1:  		/* mr R3, R27 */
		/* 82208944h case    1:*/		regs.R3 = regs.R27;
		/* 82208944h case    1:*/		return 0x82208948;
		  /* 82208948h */ case    2:  		/* bl -748496 */
		/* 82208948h case    2:*/		regs.LR = 0x8220894C; return 0x82151D78;
		/* 82208948h case    2:*/		return 0x8220894C;
	}
	return 0x8220894C;
} // Block from 82208940h-8220894Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220894Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220894C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220894C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220894C);
		  /* 8220894Ch */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 8220894Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8220894Ch case    0:*/		return 0x82208950;
		  /* 82208950h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208950h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208950h case    1:*/		return 0x82208954;
		  /* 82208954h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82208954h case    2:*/		if ( regs.CR[6].eq ) { return 0x82208964;  }
		/* 82208954h case    2:*/		return 0x82208958;
		  /* 82208958h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208958h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208958h case    3:*/		return 0x8220895C;
		  /* 8220895Ch */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 8220895Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8220895Ch case    4:*/		return 0x82208960;
		  /* 82208960h */ case    5:  		/* bc 4, CR6_EQ, 232 */
		/* 82208960h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82208A48;  }
		/* 82208960h case    5:*/		return 0x82208964;
	}
	return 0x82208964;
} // Block from 8220894Ch-82208964h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82208964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208964);
		  /* 82208964h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82208964h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208964h case    0:*/		return 0x82208968;
		  /* 82208968h */ case    1:  		/* mr R29, R11 */
		/* 82208968h case    1:*/		regs.R29 = regs.R11;
		/* 82208968h case    1:*/		return 0x8220896C;
		  /* 8220896Ch */ case    2:  		/* bc 4, CR6_EQ, -360 */
		/* 8220896Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208804;  }
		/* 8220896Ch case    2:*/		return 0x82208970;
		  /* 82208970h */ case    3:  		/* li R5, 3 */
		/* 82208970h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82208970h case    3:*/		return 0x82208974;
		  /* 82208974h */ case    4:  		/* li R4, 8 */
		/* 82208974h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82208974h case    4:*/		return 0x82208978;
		  /* 82208978h */ case    5:  		/* mr R3, R27 */
		/* 82208978h case    5:*/		regs.R3 = regs.R27;
		/* 82208978h case    5:*/		return 0x8220897C;
		  /* 8220897Ch */ case    6:  		/* bl -671884 */
		/* 8220897Ch case    6:*/		regs.LR = 0x82208980; return 0x821648F0;
		/* 8220897Ch case    6:*/		return 0x82208980;
		  /* 82208980h */ case    7:  		/* addi R11, R3, 4 */
		/* 82208980h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82208980h case    7:*/		return 0x82208984;
		  /* 82208984h */ case    8:  		/* ori R10, R3, 1 */
		/* 82208984h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 82208984h case    8:*/		return 0x82208988;
		  /* 82208988h */ case    9:  		/* stw R3, <#[R27 + 576]> */
		/* 82208988h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000240) );
		/* 82208988h case    9:*/		return 0x8220898C;
		  /* 8220898Ch */ case   10:  		/* ori R11, R11, 1 */
		/* 8220898Ch case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220898Ch case   10:*/		return 0x82208990;
		  /* 82208990h */ case   11:  		/* stw R10, <#[R3 + 4]> */
		/* 82208990h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82208990h case   11:*/		return 0x82208994;
		  /* 82208994h */ case   12:  		/* li R5, 4 */
		/* 82208994h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82208994h case   12:*/		return 0x82208998;
		  /* 82208998h */ case   13:  		/* stw R11, <#[R3]> */
		/* 82208998h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82208998h case   13:*/		return 0x8220899C;
		  /* 8220899Ch */ case   14:  		/* li R4, 8 */
		/* 8220899Ch case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8220899Ch case   14:*/		return 0x822089A0;
		  /* 822089A0h */ case   15:  		/* mr R3, R27 */
		/* 822089A0h case   15:*/		regs.R3 = regs.R27;
		/* 822089A0h case   15:*/		return 0x822089A4;
		  /* 822089A4h */ case   16:  		/* bl -671924 */
		/* 822089A4h case   16:*/		regs.LR = 0x822089A8; return 0x821648F0;
		/* 822089A4h case   16:*/		return 0x822089A8;
		  /* 822089A8h */ case   17:  		/* addi R11, R3, 4 */
		/* 822089A8h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 822089A8h case   17:*/		return 0x822089AC;
		  /* 822089ACh */ case   18:  		/* ori R10, R3, 1 */
		/* 822089ACh case   18:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 822089ACh case   18:*/		return 0x822089B0;
		  /* 822089B0h */ case   19:  		/* stw R3, <#[R27 + 580]> */
		/* 822089B0h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000244) );
		/* 822089B0h case   19:*/		return 0x822089B4;
		  /* 822089B4h */ case   20:  		/* ori R11, R11, 1 */
		/* 822089B4h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822089B4h case   20:*/		return 0x822089B8;
		  /* 822089B8h */ case   21:  		/* stw R10, <#[R3 + 4]> */
		/* 822089B8h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 822089B8h case   21:*/		return 0x822089BC;
		  /* 822089BCh */ case   22:  		/* li R5, 0 */
		/* 822089BCh case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822089BCh case   22:*/		return 0x822089C0;
		  /* 822089C0h */ case   23:  		/* stw R11, <#[R3]> */
		/* 822089C0h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822089C0h case   23:*/		return 0x822089C4;
		  /* 822089C4h */ case   24:  		/* li R4, 8 */
		/* 822089C4h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 822089C4h case   24:*/		return 0x822089C8;
		  /* 822089C8h */ case   25:  		/* mr R3, R27 */
		/* 822089C8h case   25:*/		regs.R3 = regs.R27;
		/* 822089C8h case   25:*/		return 0x822089CC;
		  /* 822089CCh */ case   26:  		/* li R24, 0 */
		/* 822089CCh case   26:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 822089CCh case   26:*/		return 0x822089D0;
		  /* 822089D0h */ case   27:  		/* li R22, 0 */
		/* 822089D0h case   27:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 822089D0h case   27:*/		return 0x822089D4;
		  /* 822089D4h */ case   28:  		/* bl -671972 */
		/* 822089D4h case   28:*/		regs.LR = 0x822089D8; return 0x821648F0;
		/* 822089D4h case   28:*/		return 0x822089D8;
		  /* 822089D8h */ case   29:  		/* addi R23, R3, 4 */
		/* 822089D8h case   29:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R3,0x4);
		/* 822089D8h case   29:*/		return 0x822089DC;
		  /* 822089DCh */ case   30:  		/* ori R11, R3, 1 */
		/* 822089DCh case   30:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 822089DCh case   30:*/		return 0x822089E0;
		  /* 822089E0h */ case   31:  		/* ori R10, R23, 1 */
		/* 822089E0h case   31:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R23,0x1);
		/* 822089E0h case   31:*/		return 0x822089E4;
		  /* 822089E4h */ case   32:  		/* stw R11, <#[R3 + 4]> */
		/* 822089E4h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 822089E4h case   32:*/		return 0x822089E8;
		  /* 822089E8h */ case   33:  		/* mr R26, R3 */
		/* 822089E8h case   33:*/		regs.R26 = regs.R3;
		/* 822089E8h case   33:*/		return 0x822089EC;
		  /* 822089ECh */ case   34:  		/* stw R10, <#[R3]> */
		/* 822089ECh case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 822089ECh case   34:*/		return 0x822089F0;
		  /* 822089F0h */ case   35:  		/* lwz R11, <#[R28 + 40]> */
		/* 822089F0h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 822089F0h case   35:*/		return 0x822089F4;
		  /* 822089F4h */ case   36:  		/* cmplwi CR6, R11, 0 */
		/* 822089F4h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822089F4h case   36:*/		return 0x822089F8;
		  /* 822089F8h */ case   37:  		/* bc 12, CR6_EQ, 92 */
		/* 822089F8h case   37:*/		if ( regs.CR[6].eq ) { return 0x82208A54;  }
		/* 822089F8h case   37:*/		return 0x822089FC;
		  /* 822089FCh */ case   38:  		/* lwz R10, <#[R11 + 4]> */
		/* 822089FCh case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822089FCh case   38:*/		return 0x82208A00;
		  /* 82208A00h */ case   39:  		/* cmpwi CR6, R10, 1 */
		/* 82208A00h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208A00h case   39:*/		return 0x82208A04;
		  /* 82208A04h */ case   40:  		/* bc 12, CR6_EQ, 80 */
		/* 82208A04h case   40:*/		if ( regs.CR[6].eq ) { return 0x82208A54;  }
		/* 82208A04h case   40:*/		return 0x82208A08;
		  /* 82208A08h */ case   41:  		/* li R4, 4801 */
		/* 82208A08h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208A08h case   41:*/		return 0x82208A0C;
		  /* 82208A0Ch */ case   42:  		/* mr R3, R27 */
		/* 82208A0Ch case   42:*/		regs.R3 = regs.R27;
		/* 82208A0Ch case   42:*/		return 0x82208A10;
		  /* 82208A10h */ case   43:  		/* bl -748456 */
		/* 82208A10h case   43:*/		regs.LR = 0x82208A14; return 0x82151E68;
		/* 82208A10h case   43:*/		return 0x82208A14;
	}
	return 0x82208A14;
} // Block from 82208964h-82208A14h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82208A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208A14);
		  /* 82208A14h */ case    0:  		/* li R5, 31 */
		/* 82208A14h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1F);
		/* 82208A14h case    0:*/		return 0x82208A18;
		  /* 82208A18h */ case    1:  		/* li R4, 3590 */
		/* 82208A18h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE06);
		/* 82208A18h case    1:*/		return 0x82208A1C;
		  /* 82208A1Ch */ case    2:  		/* mr R3, R27 */
		/* 82208A1Ch case    2:*/		regs.R3 = regs.R27;
		/* 82208A1Ch case    2:*/		return 0x82208A20;
		  /* 82208A20h */ case    3:  		/* bl -748472 */
		/* 82208A20h case    3:*/		regs.LR = 0x82208A24; return 0x82151E68;
		/* 82208A20h case    3:*/		return 0x82208A24;
	}
	return 0x82208A24;
} // Block from 82208A14h-82208A24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82208A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208A24);
		  /* 82208A24h */ case    0:  		/* li R4, 4801 */
		/* 82208A24h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208A24h case    0:*/		return 0x82208A28;
		  /* 82208A28h */ case    1:  		/* mr R3, R27 */
		/* 82208A28h case    1:*/		regs.R3 = regs.R27;
		/* 82208A28h case    1:*/		return 0x82208A2C;
		  /* 82208A2Ch */ case    2:  		/* bl -748484 */
		/* 82208A2Ch case    2:*/		regs.LR = 0x82208A30; return 0x82151E68;
		/* 82208A2Ch case    2:*/		return 0x82208A30;
	}
	return 0x82208A30;
} // Block from 82208A24h-82208A30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208A30);
		  /* 82208A30h */ case    0:  		/* li R4, 4801 */
		/* 82208A30h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208A30h case    0:*/		return 0x82208A34;
		  /* 82208A34h */ case    1:  		/* mr R3, R27 */
		/* 82208A34h case    1:*/		regs.R3 = regs.R27;
		/* 82208A34h case    1:*/		return 0x82208A38;
		  /* 82208A38h */ case    2:  		/* bl -748496 */
		/* 82208A38h case    2:*/		regs.LR = 0x82208A3C; return 0x82151E68;
		/* 82208A38h case    2:*/		return 0x82208A3C;
	}
	return 0x82208A3C;
} // Block from 82208A30h-82208A3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208A3C);
		  /* 82208A3Ch */ case    0:  		/* li R4, 4801 */
		/* 82208A3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208A3Ch case    0:*/		return 0x82208A40;
		  /* 82208A40h */ case    1:  		/* mr R3, R27 */
		/* 82208A40h case    1:*/		regs.R3 = regs.R27;
		/* 82208A40h case    1:*/		return 0x82208A44;
		  /* 82208A44h */ case    2:  		/* bl -748508 */
		/* 82208A44h case    2:*/		regs.LR = 0x82208A48; return 0x82151E68;
		/* 82208A44h case    2:*/		return 0x82208A48;
	}
	return 0x82208A48;
} // Block from 82208A3Ch-82208A48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208A48);
		  /* 82208A48h */ case    0:  		/* li R4, 4801 */
		/* 82208A48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82208A48h case    0:*/		return 0x82208A4C;
		  /* 82208A4Ch */ case    1:  		/* mr R3, R27 */
		/* 82208A4Ch case    1:*/		regs.R3 = regs.R27;
		/* 82208A4Ch case    1:*/		return 0x82208A50;
		  /* 82208A50h */ case    2:  		/* bl -748520 */
		/* 82208A50h case    2:*/		regs.LR = 0x82208A54; return 0x82151E68;
		/* 82208A50h case    2:*/		return 0x82208A54;
	}
	return 0x82208A54;
} // Block from 82208A48h-82208A54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208A54);
		  /* 82208A54h */ case    0:  		/* mr R25, R11 */
		/* 82208A54h case    0:*/		regs.R25 = regs.R11;
		/* 82208A54h case    0:*/		return 0x82208A58;
		  /* 82208A58h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208A58h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208A58h case    1:*/		return 0x82208A5C;
		  /* 82208A5Ch */ case    2:  		/* bc 12, CR6_EQ, 1328 */
		/* 82208A5Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82208F8C;  }
		/* 82208A5Ch case    2:*/		return 0x82208A60;
		  /* 82208A60h */ case    3:  		/* lwz R11, <#[R25 + 8]> */
		/* 82208A60h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82208A60h case    3:*/		return 0x82208A64;
		  /* 82208A64h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82208A64h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82208A64h case    4:*/		return 0x82208A68;
		  /* 82208A68h */ case    5:  		/* b 724 */
		/* 82208A68h case    5:*/		return 0x82208D3C;
		/* 82208A68h case    5:*/		return 0x82208A6C;
		  /* 82208A6Ch */ case    6:  		/* lwz R28, <#[R25 + 8]> */
		/* 82208A6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x00000008) );
		/* 82208A6Ch case    6:*/		return 0x82208A70;
		  /* 82208A70h */ case    7:  		/* cmplwi CR6, R28, 0 */
		/* 82208A70h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82208A70h case    7:*/		return 0x82208A74;
		  /* 82208A74h */ case    8:  		/* bc 12, CR6_EQ, 1932 */
		/* 82208A74h case    8:*/		if ( regs.CR[6].eq ) { return 0x82209200;  }
		/* 82208A74h case    8:*/		return 0x82208A78;
		  /* 82208A78h */ case    9:  		/* lwz R11, <#[R28 + 4]> */
		/* 82208A78h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82208A78h case    9:*/		return 0x82208A7C;
		  /* 82208A7Ch */ case   10:  		/* cmpwi CR6, R11, 6 */
		/* 82208A7Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82208A7Ch case   10:*/		return 0x82208A80;
		  /* 82208A80h */ case   11:  		/* bc 4, CR6_EQ, 1920 */
		/* 82208A80h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82209200;  }
		/* 82208A80h case   11:*/		return 0x82208A84;
		  /* 82208A84h */ case   12:  		/* lwz R11, <#[R28 + 16]> */
		/* 82208A84h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82208A84h case   12:*/		return 0x82208A88;
		  /* 82208A88h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 82208A88h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82208A88h case   13:*/		return 0x82208A8C;
		  /* 82208A8Ch */ case   14:  		/* bc 12, CR6_EQ, 1004 */
		/* 82208A8Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x82208E78;  }
		/* 82208A8Ch case   14:*/		return 0x82208A90;
		  /* 82208A90h */ case   15:  		/* cmpwi CR6, R11, 1 */
		/* 82208A90h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82208A90h case   15:*/		return 0x82208A94;
		  /* 82208A94h */ case   16:  		/* bc 12, CR6_EQ, 984 */
		/* 82208A94h case   16:*/		if ( regs.CR[6].eq ) { return 0x82208E6C;  }
		/* 82208A94h case   16:*/		return 0x82208A98;
		  /* 82208A98h */ case   17:  		/* cmpwi CR6, R11, 2 */
		/* 82208A98h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82208A98h case   17:*/		return 0x82208A9C;
		  /* 82208A9Ch */ case   18:  		/* bc 12, CR6_EQ, 704 */
		/* 82208A9Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x82208D5C;  }
		/* 82208A9Ch case   18:*/		return 0x82208AA0;
		  /* 82208AA0h */ case   19:  		/* bc 4, CR6_GT, 1816 */
		/* 82208AA0h case   19:*/		if ( !regs.CR[6].gt ) { return 0x822091B8;  }
		/* 82208AA0h case   19:*/		return 0x82208AA4;
		  /* 82208AA4h */ case   20:  		/* cmpwi CR6, R11, 5 */
		/* 82208AA4h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 82208AA4h case   20:*/		return 0x82208AA8;
		  /* 82208AA8h */ case   21:  		/* bc 4, CR6_GT, 976 */
		/* 82208AA8h case   21:*/		if ( !regs.CR[6].gt ) { return 0x82208E78;  }
		/* 82208AA8h case   21:*/		return 0x82208AAC;
		  /* 82208AACh */ case   22:  		/* cmpwi CR6, R11, 6 */
		/* 82208AACh case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82208AACh case   22:*/		return 0x82208AB0;
		  /* 82208AB0h */ case   23:  		/* bc 4, CR6_GT, 1800 */
		/* 82208AB0h case   23:*/		if ( !regs.CR[6].gt ) { return 0x822091B8;  }
		/* 82208AB0h case   23:*/		return 0x82208AB4;
		  /* 82208AB4h */ case   24:  		/* cmpwi CR6, R11, 8 */
		/* 82208AB4h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 82208AB4h case   24:*/		return 0x82208AB8;
		  /* 82208AB8h */ case   25:  		/* bc 12, CR6_GT, 1792 */
		/* 82208AB8h case   25:*/		if ( regs.CR[6].gt ) { return 0x822091B8;  }
		/* 82208AB8h case   25:*/		return 0x82208ABC;
		  /* 82208ABCh */ case   26:  		/* lwz R29, <#[R28 + 32]> */
		/* 82208ABCh case   26:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000020) );
		/* 82208ABCh case   26:*/		return 0x82208AC0;
		  /* 82208AC0h */ case   27:  		/* cmplwi CR6, R29, 0 */
		/* 82208AC0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82208AC0h case   27:*/		return 0x82208AC4;
		  /* 82208AC4h */ case   28:  		/* bc 12, CR6_EQ, 1768 */
		/* 82208AC4h case   28:*/		if ( regs.CR[6].eq ) { return 0x822091AC;  }
		/* 82208AC4h case   28:*/		return 0x82208AC8;
		  /* 82208AC8h */ case   29:  		/* lwz R11, <#[R29 + 4]> */
		/* 82208AC8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82208AC8h case   29:*/		return 0x82208ACC;
		  /* 82208ACCh */ case   30:  		/* cmpwi CR6, R11, 21 */
		/* 82208ACCh case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000015);
		/* 82208ACCh case   30:*/		return 0x82208AD0;
		  /* 82208AD0h */ case   31:  		/* bc 4, CR6_EQ, 1756 */
		/* 82208AD0h case   31:*/		if ( !regs.CR[6].eq ) { return 0x822091AC;  }
		/* 82208AD0h case   31:*/		return 0x82208AD4;
		  /* 82208AD4h */ case   32:  		/* lwz R31, <#[R29 + 20]> */
		/* 82208AD4h case   32:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000014) );
		/* 82208AD4h case   32:*/		return 0x82208AD8;
		  /* 82208AD8h */ case   33:  		/* cmplwi CR6, R31, 0 */
		/* 82208AD8h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208AD8h case   33:*/		return 0x82208ADC;
		  /* 82208ADCh */ case   34:  		/* bc 12, CR6_EQ, 1608 */
		/* 82208ADCh case   34:*/		if ( regs.CR[6].eq ) { return 0x82209124;  }
		/* 82208ADCh case   34:*/		return 0x82208AE0;
		  /* 82208AE0h */ case   35:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208AE0h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208AE0h case   35:*/		return 0x82208AE4;
		  /* 82208AE4h */ case   36:  		/* cmpwi CR6, R11, 3 */
		/* 82208AE4h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82208AE4h case   36:*/		return 0x82208AE8;
		  /* 82208AE8h */ case   37:  		/* bc 4, CR6_EQ, 1720 */
		/* 82208AE8h case   37:*/		if ( !regs.CR[6].eq ) { return 0x822091A0;  }
		/* 82208AE8h case   37:*/		return 0x82208AEC;
		  /* 82208AECh */ case   38:  		/* lwz R5, <#[R31 + 24]> */
		/* 82208AECh case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 82208AECh case   38:*/		return 0x82208AF0;
		  /* 82208AF0h */ case   39:  		/* mr R7, R24 */
		/* 82208AF0h case   39:*/		regs.R7 = regs.R24;
		/* 82208AF0h case   39:*/		return 0x82208AF4;
		  /* 82208AF4h */ case   40:  		/* cmplwi CR6, R24, 0 */
		/* 82208AF4h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82208AF4h case   40:*/		return 0x82208AF8;
		  /* 82208AF8h */ case   41:  		/* bc 12, CR6_EQ, 72 */
		/* 82208AF8h case   41:*/		if ( regs.CR[6].eq ) { return 0x82208B40;  }
		/* 82208AF8h case   41:*/		return 0x82208AFC;
		  /* 82208AFCh */ case   42:  		/* lwz R9, <#[R7]> */
		/* 82208AFCh case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 82208AFCh case   42:*/		return 0x82208B00;
		  /* 82208B00h */ case   43:  		/* mr R10, R5 */
		/* 82208B00h case   43:*/		regs.R10 = regs.R5;
		/* 82208B00h case   43:*/		return 0x82208B04;
		  /* 82208B04h */ case   44:  		/* lwz R11, <#[R9 + 24]> */
		/* 82208B04h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 82208B04h case   44:*/		return 0x82208B08;
		  /* 82208B08h */ case   45:  		/* lbz R8, <#[R11]> */
		/* 82208B08h case   45:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82208B08h case   45:*/		return 0x82208B0C;
		  /* 82208B0Ch */ case   46:  		/* lbz R6, <#[R10]> */
		/* 82208B0Ch case   46:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82208B0Ch case   46:*/		return 0x82208B10;
		  /* 82208B10h */ case   47:  		/* cmpwi CR0, R8, 0 */
		/* 82208B10h case   47:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 82208B10h case   47:*/		return 0x82208B14;
		  /* 82208B14h */ case   48:  		/* subf R8, R6, R8 */
		/* 82208B14h case   48:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 82208B14h case   48:*/		return 0x82208B18;
		  /* 82208B18h */ case   49:  		/* bc 12, CR0_EQ, 20 */
		/* 82208B18h case   49:*/		if ( regs.CR[0].eq ) { return 0x82208B2C;  }
		/* 82208B18h case   49:*/		return 0x82208B1C;
		  /* 82208B1Ch */ case   50:  		/* addi R11, R11, 1 */
		/* 82208B1Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82208B1Ch case   50:*/		return 0x82208B20;
		  /* 82208B20h */ case   51:  		/* addi R10, R10, 1 */
		/* 82208B20h case   51:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82208B20h case   51:*/		return 0x82208B24;
		  /* 82208B24h */ case   52:  		/* cmpwi CR6, R8, 0 */
		/* 82208B24h case   52:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82208B24h case   52:*/		return 0x82208B28;
		  /* 82208B28h */ case   53:  		/* bc 12, CR6_EQ, -32 */
		/* 82208B28h case   53:*/		if ( regs.CR[6].eq ) { return 0x82208B08;  }
		/* 82208B28h case   53:*/		return 0x82208B2C;
	}
	return 0x82208B2C;
} // Block from 82208A54h-82208B2Ch (54 instructions)

//////////////////////////////////////////////////////
// Block at 82208B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208B2C);
		  /* 82208B2Ch */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 82208B2Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 82208B2Ch case    0:*/		return 0x82208B30;
		  /* 82208B30h */ case    1:  		/* bc 12, CR0_EQ, 1536 */
		/* 82208B30h case    1:*/		if ( regs.CR[0].eq ) { return 0x82209130;  }
		/* 82208B30h case    1:*/		return 0x82208B34;
		  /* 82208B34h */ case    2:  		/* lwz R7, <#[R7 + 4]> */
		/* 82208B34h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 82208B34h case    2:*/		return 0x82208B38;
		  /* 82208B38h */ case    3:  		/* cmplwi CR6, R7, 0 */
		/* 82208B38h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82208B38h case    3:*/		return 0x82208B3C;
		  /* 82208B3Ch */ case    4:  		/* bc 4, CR6_EQ, -64 */
		/* 82208B3Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82208AFC;  }
		/* 82208B3Ch case    4:*/		return 0x82208B40;
	}
	return 0x82208B40;
} // Block from 82208B2Ch-82208B40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82208B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208B40);
		  /* 82208B40h */ case    0:  		/* li R5, 7 */
		/* 82208B40h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 82208B40h case    0:*/		return 0x82208B44;
		  /* 82208B44h */ case    1:  		/* li R4, 8 */
		/* 82208B44h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82208B44h case    1:*/		return 0x82208B48;
		  /* 82208B48h */ case    2:  		/* mr R3, R27 */
		/* 82208B48h case    2:*/		regs.R3 = regs.R27;
		/* 82208B48h case    2:*/		return 0x82208B4C;
		  /* 82208B4Ch */ case    3:  		/* bl -672348 */
		/* 82208B4Ch case    3:*/		regs.LR = 0x82208B50; return 0x821648F0;
		/* 82208B4Ch case    3:*/		return 0x82208B50;
		  /* 82208B50h */ case    4:  		/* stw R24, <#[R3 + 4]> */
		/* 82208B50h case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		/* 82208B50h case    4:*/		return 0x82208B54;
		  /* 82208B54h */ case    5:  		/* stw R31, <#[R3]> */
		/* 82208B54h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82208B54h case    5:*/		return 0x82208B58;
		  /* 82208B58h */ case    6:  		/* li R30, 0 */
		/* 82208B58h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82208B58h case    6:*/		return 0x82208B5C;
		  /* 82208B5Ch */ case    7:  		/* lwz R11, <#[R28 + 16]> */
		/* 82208B5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82208B5Ch case    7:*/		return 0x82208B60;
		  /* 82208B60h */ case    8:  		/* mr R24, R3 */
		/* 82208B60h case    8:*/		regs.R24 = regs.R3;
		/* 82208B60h case    8:*/		return 0x82208B64;
		  /* 82208B64h */ case    9:  		/* lwz R4, <#[R29 + 36]> */
		/* 82208B64h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000024) );
		/* 82208B64h case    9:*/		return 0x82208B68;
		  /* 82208B68h */ case   10:  		/* cmpwi CR6, R11, 7 */
		/* 82208B68h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 82208B68h case   10:*/		return 0x82208B6C;
		  /* 82208B6Ch */ case   11:  		/* mr R5, R27 */
		/* 82208B6Ch case   11:*/		regs.R5 = regs.R27;
		/* 82208B6Ch case   11:*/		return 0x82208B70;
		  /* 82208B70h */ case   12:  		/* bc 4, CR6_EQ, 220 */
		/* 82208B70h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82208C4C;  }
		/* 82208B70h case   12:*/		return 0x82208B74;
		  /* 82208B74h */ case   13:  		/* addi R3, R1, 80 */
		/* 82208B74h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82208B74h case   13:*/		return 0x82208B78;
		  /* 82208B78h */ case   14:  		/* bl -73216 */
		/* 82208B78h case   14:*/		regs.LR = 0x82208B7C; return 0x821F6D78;
		/* 82208B78h case   14:*/		return 0x82208B7C;
		  /* 82208B7Ch */ case   15:  		/* addi R3, R1, 80 */
		/* 82208B7Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82208B7Ch case   15:*/		return 0x82208B80;
		  /* 82208B80h */ case   16:  		/* bl -73032 */
		/* 82208B80h case   16:*/		regs.LR = 0x82208B84; return 0x821F6E38;
		/* 82208B80h case   16:*/		return 0x82208B84;
		  /* 82208B84h */ case   17:  		/* or. R31, R3, R3 */
		/* 82208B84h case   17:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82208B84h case   17:*/		return 0x82208B88;
		  /* 82208B88h */ case   18:  		/* bc 12, CR0_EQ, 180 */
		/* 82208B88h case   18:*/		if ( regs.CR[0].eq ) { return 0x82208C3C;  }
		/* 82208B88h case   18:*/		return 0x82208B8C;
		  /* 82208B8Ch */ case   19:  		/* cmplwi CR6, R31, 0 */
		/* 82208B8Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208B8Ch case   19:*/		return 0x82208B90;
		  /* 82208B90h */ case   20:  		/* bc 12, CR6_EQ, 1496 */
		/* 82208B90h case   20:*/		if ( regs.CR[6].eq ) { return 0x82209168;  }
		/* 82208B90h case   20:*/		return 0x82208B94;
		  /* 82208B94h */ case   21:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208B94h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208B94h case   21:*/		return 0x82208B98;
		  /* 82208B98h */ case   22:  		/* cmpwi CR6, R11, 19 */
		/* 82208B98h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82208B98h case   22:*/		return 0x82208B9C;
		  /* 82208B9Ch */ case   23:  		/* bc 4, CR6_EQ, 1484 */
		/* 82208B9Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x82209168;  }
		/* 82208B9Ch case   23:*/		return 0x82208BA0;
		  /* 82208BA0h */ case   24:  		/* mr R4, R31 */
		/* 82208BA0h case   24:*/		regs.R4 = regs.R31;
		/* 82208BA0h case   24:*/		return 0x82208BA4;
		  /* 82208BA4h */ case   25:  		/* mr R3, R27 */
		/* 82208BA4h case   25:*/		regs.R3 = regs.R27;
		/* 82208BA4h case   25:*/		return 0x82208BA8;
		  /* 82208BA8h */ case   26:  		/* bl -114712 */
		/* 82208BA8h case   26:*/		regs.LR = 0x82208BAC; return 0x821ECB90;
		/* 82208BA8h case   26:*/		return 0x82208BAC;
		  /* 82208BACh */ case   27:  		/* cmpwi CR6, R3, 18 */
		/* 82208BACh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000012);
		/* 82208BACh case   27:*/		return 0x82208BB0;
		  /* 82208BB0h */ case   28:  		/* bc 12, CR6_EQ, 60 */
		/* 82208BB0h case   28:*/		if ( regs.CR[6].eq ) { return 0x82208BEC;  }
		/* 82208BB0h case   28:*/		return 0x82208BB4;
		  /* 82208BB4h */ case   29:  		/* lwz R11, <#[R31 + 16]> */
		/* 82208BB4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82208BB4h case   29:*/		return 0x82208BB8;
		  /* 82208BB8h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 82208BB8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208BB8h case   30:*/		return 0x82208BBC;
		  /* 82208BBCh */ case   31:  		/* bc 12, CR6_EQ, 1424 */
		/* 82208BBCh case   31:*/		if ( regs.CR[6].eq ) { return 0x8220914C;  }
		/* 82208BBCh case   31:*/		return 0x82208BC0;
		  /* 82208BC0h */ case   32:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208BC0h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208BC0h case   32:*/		return 0x82208BC4;
		  /* 82208BC4h */ case   33:  		/* cmpwi CR6, R10, 3 */
		/* 82208BC4h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 82208BC4h case   33:*/		return 0x82208BC8;
		  /* 82208BC8h */ case   34:  		/* bc 4, CR6_EQ, 1412 */
		/* 82208BC8h case   34:*/		if ( !regs.CR[6].eq ) { return 0x8220914C;  }
		/* 82208BC8h case   34:*/		return 0x82208BCC;
		  /* 82208BCCh */ case   35:  		/* lwz R10, <#[R11 + 16]> */
		/* 82208BCCh case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82208BCCh case   35:*/		return 0x82208BD0;
		  /* 82208BD0h */ case   36:  		/* mr R3, R27 */
		/* 82208BD0h case   36:*/		regs.R3 = regs.R27;
		/* 82208BD0h case   36:*/		return 0x82208BD4;
		  /* 82208BD4h */ case   37:  		/* cmpwi CR6, R10, 11 */
		/* 82208BD4h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 82208BD4h case   37:*/		return 0x82208BD8;
		  /* 82208BD8h */ case   38:  		/* bc 4, CR6_EQ, 1388 */
		/* 82208BD8h case   38:*/		if ( !regs.CR[6].eq ) { return 0x82209144;  }
		/* 82208BD8h case   38:*/		return 0x82208BDC;
		  /* 82208BDCh */ case   39:  		/* li R4, 3606 */
		/* 82208BDCh case   39:*/		cpu::op::li<0>(regs,&regs.R4,0xE16);
		/* 82208BDCh case   39:*/		return 0x82208BE0;
		  /* 82208BE0h */ case   40:  		/* lwz R5, <#[R11 + 24]> */
		/* 82208BE0h case   40:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 82208BE0h case   40:*/		return 0x82208BE4;
		  /* 82208BE4h */ case   41:  		/* bl -749164 */
		/* 82208BE4h case   41:*/		regs.LR = 0x82208BE8; return 0x82151D78;
		/* 82208BE4h case   41:*/		return 0x82208BE8;
		  /* 82208BE8h */ case   42:  		/* b 60 */
		/* 82208BE8h case   42:*/		return 0x82208C24;
		/* 82208BE8h case   42:*/		return 0x82208BEC;
	}
	return 0x82208BEC;
} // Block from 82208B40h-82208BECh (43 instructions)

//////////////////////////////////////////////////////
// Block at 82208BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208BEC);
		  /* 82208BECh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82208BECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82208BECh case    0:*/		return 0x82208BF0;
		  /* 82208BF0h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82208BF0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82208C00;  }
		/* 82208BF0h case    1:*/		return 0x82208BF4;
		  /* 82208BF4h */ case    2:  		/* li R4, 3577 */
		/* 82208BF4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xDF9);
		/* 82208BF4h case    2:*/		return 0x82208BF8;
		  /* 82208BF8h */ case    3:  		/* mr R3, R27 */
		/* 82208BF8h case    3:*/		regs.R3 = regs.R27;
		/* 82208BF8h case    3:*/		return 0x82208BFC;
		  /* 82208BFCh */ case    4:  		/* bl -749188 */
		/* 82208BFCh case    4:*/		regs.LR = 0x82208C00; return 0x82151D78;
		/* 82208BFCh case    4:*/		return 0x82208C00;
	}
	return 0x82208C00;
} // Block from 82208BECh-82208C00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82208C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208C00);
		  /* 82208C00h */ case    0:  		/* mr R3, R27 */
		/* 82208C00h case    0:*/		regs.R3 = regs.R27;
		/* 82208C00h case    0:*/		return 0x82208C04;
		  /* 82208C04h */ case    1:  		/* lwz R4, <#[R31 + 20]> */
		/* 82208C04h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82208C04h case    1:*/		return 0x82208C08;
		  /* 82208C08h */ case    2:  		/* bl -117088 */
		/* 82208C08h case    2:*/		regs.LR = 0x82208C0C; return 0x821EC2A8;
		/* 82208C08h case    2:*/		return 0x82208C0C;
		  /* 82208C0Ch */ case    3:  		/* mr R30, R3 */
		/* 82208C0Ch case    3:*/		regs.R30 = regs.R3;
		/* 82208C0Ch case    3:*/		return 0x82208C10;
		  /* 82208C10h */ case    4:  		/* cmplwi CR6, R3, 1 */
		/* 82208C10h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82208C10h case    4:*/		return 0x82208C14;
		  /* 82208C14h */ case    5:  		/* bc 12, CR6_LT, 1348 */
		/* 82208C14h case    5:*/		if ( regs.CR[6].lt ) { return 0x82209158;  }
		/* 82208C14h case    5:*/		return 0x82208C18;
		  /* 82208C18h */ case    6:  		/* lis R11, 1 */
		/* 82208C18h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 82208C18h case    6:*/		return 0x82208C1C;
		  /* 82208C1Ch */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 82208C1Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82208C1Ch case    7:*/		return 0x82208C20;
		  /* 82208C20h */ case    8:  		/* bc 4, CR6_LT, 1336 */
		/* 82208C20h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82209158;  }
		/* 82208C20h case    8:*/		return 0x82208C24;
	}
	return 0x82208C24;
} // Block from 82208C00h-82208C24h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82208C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208C24);
		  /* 82208C24h */ case    0:  		/* addi R3, R1, 80 */
		/* 82208C24h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82208C24h case    0:*/		return 0x82208C28;
		  /* 82208C28h */ case    1:  		/* bl -73200 */
		/* 82208C28h case    1:*/		regs.LR = 0x82208C2C; return 0x821F6E38;
		/* 82208C28h case    1:*/		return 0x82208C2C;
		  /* 82208C2Ch */ case    2:  		/* or. R31, R3, R3 */
		/* 82208C2Ch case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82208C2Ch case    2:*/		return 0x82208C30;
		  /* 82208C30h */ case    3:  		/* bc 4, CR0_EQ, -164 */
		/* 82208C30h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82208B8C;  }
		/* 82208C30h case    3:*/		return 0x82208C34;
		  /* 82208C34h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82208C34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82208C34h case    4:*/		return 0x82208C38;
		  /* 82208C38h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82208C38h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82208C40;  }
		/* 82208C38h case    5:*/		return 0x82208C3C;
	}
	return 0x82208C3C;
} // Block from 82208C24h-82208C3Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82208C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208C3C);
		  /* 82208C3Ch */ case    0:  		/* mr R30, R29 */
		/* 82208C3Ch case    0:*/		regs.R30 = regs.R29;
		/* 82208C3Ch case    0:*/		return 0x82208C40;
	}
	return 0x82208C40;
} // Block from 82208C3Ch-82208C40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82208C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208C40);
		  /* 82208C40h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82208C40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82208C40h case    0:*/		return 0x82208C44;
		  /* 82208C44h */ case    1:  		/* lwz R9, <#[R1 + 84]> */
		/* 82208C44h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82208C44h case    1:*/		return 0x82208C48;
		  /* 82208C48h */ case    2:  		/* b 116 */
		/* 82208C48h case    2:*/		return 0x82208CBC;
		/* 82208C48h case    2:*/		return 0x82208C4C;
	}
	return 0x82208C4C;
} // Block from 82208C40h-82208C4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208C4C);
		  /* 82208C4Ch */ case    0:  		/* addi R3, R1, 88 */
		/* 82208C4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 82208C4Ch case    0:*/		return 0x82208C50;
		  /* 82208C50h */ case    1:  		/* bl -73432 */
		/* 82208C50h case    1:*/		regs.LR = 0x82208C54; return 0x821F6D78;
		/* 82208C50h case    1:*/		return 0x82208C54;
		  /* 82208C54h */ case    2:  		/* b 76 */
		/* 82208C54h case    2:*/		return 0x82208CA0;
		/* 82208C54h case    2:*/		return 0x82208C58;
		  /* 82208C58h */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82208C58h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82208C58h case    3:*/		return 0x82208C5C;
		  /* 82208C5Ch */ case    4:  		/* bc 12, CR6_EQ, 1324 */
		/* 82208C5Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82209188;  }
		/* 82208C5Ch case    4:*/		return 0x82208C60;
		  /* 82208C60h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82208C60h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82208C60h case    5:*/		return 0x82208C64;
		  /* 82208C64h */ case    6:  		/* cmpwi CR6, R11, 19 */
		/* 82208C64h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82208C64h case    6:*/		return 0x82208C68;
		  /* 82208C68h */ case    7:  		/* bc 4, CR6_EQ, 1312 */
		/* 82208C68h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82209188;  }
		/* 82208C68h case    7:*/		return 0x82208C6C;
		  /* 82208C6Ch */ case    8:  		/* lwz R11, <#[R3 + 16]> */
		/* 82208C6Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 82208C6Ch case    8:*/		return 0x82208C70;
		  /* 82208C70h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82208C70h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208C70h case    9:*/		return 0x82208C74;
		  /* 82208C74h */ case   10:  		/* bc 12, CR6_EQ, 1288 */
		/* 82208C74h case   10:*/		if ( regs.CR[6].eq ) { return 0x8220917C;  }
		/* 82208C74h case   10:*/		return 0x82208C78;
		  /* 82208C78h */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208C78h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208C78h case   11:*/		return 0x82208C7C;
		  /* 82208C7Ch */ case   12:  		/* cmpwi CR6, R10, 3 */
		/* 82208C7Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 82208C7Ch case   12:*/		return 0x82208C80;
		  /* 82208C80h */ case   13:  		/* bc 4, CR6_EQ, 1276 */
		/* 82208C80h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220917C;  }
		/* 82208C80h case   13:*/		return 0x82208C84;
		  /* 82208C84h */ case   14:  		/* lwz R10, <#[R11 + 16]> */
		/* 82208C84h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82208C84h case   14:*/		return 0x82208C88;
		  /* 82208C88h */ case   15:  		/* mr R3, R27 */
		/* 82208C88h case   15:*/		regs.R3 = regs.R27;
		/* 82208C88h case   15:*/		return 0x82208C8C;
		  /* 82208C8Ch */ case   16:  		/* cmpwi CR6, R10, 11 */
		/* 82208C8Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 82208C8Ch case   16:*/		return 0x82208C90;
		  /* 82208C90h */ case   17:  		/* bc 4, CR6_EQ, 1252 */
		/* 82208C90h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82209174;  }
		/* 82208C90h case   17:*/		return 0x82208C94;
		  /* 82208C94h */ case   18:  		/* li R4, 3606 */
		/* 82208C94h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0xE16);
		/* 82208C94h case   18:*/		return 0x82208C98;
		  /* 82208C98h */ case   19:  		/* lwz R5, <#[R11 + 24]> */
		/* 82208C98h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 82208C98h case   19:*/		return 0x82208C9C;
		  /* 82208C9Ch */ case   20:  		/* bl -749348 */
		/* 82208C9Ch case   20:*/		regs.LR = 0x82208CA0; return 0x82151D78;
		/* 82208C9Ch case   20:*/		return 0x82208CA0;
	}
	return 0x82208CA0;
} // Block from 82208C4Ch-82208CA0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82208CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208CA0);
		  /* 82208CA0h */ case    0:  		/* addi R3, R1, 88 */
		/* 82208CA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 82208CA0h case    0:*/		return 0x82208CA4;
		  /* 82208CA4h */ case    1:  		/* bl -73324 */
		/* 82208CA4h case    1:*/		regs.LR = 0x82208CA8; return 0x821F6E38;
		/* 82208CA4h case    1:*/		return 0x82208CA8;
		  /* 82208CA8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82208CA8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82208CA8h case    2:*/		return 0x82208CAC;
		  /* 82208CACh */ case    3:  		/* bc 4, CR0_EQ, -84 */
		/* 82208CACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82208C58;  }
		/* 82208CACh case    3:*/		return 0x82208CB0;
		  /* 82208CB0h */ case    4:  		/* lwz R11, <#[R1 + 88]> */
		/* 82208CB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82208CB0h case    4:*/		return 0x82208CB4;
		  /* 82208CB4h */ case    5:  		/* mr R30, R28 */
		/* 82208CB4h case    5:*/		regs.R30 = regs.R28;
		/* 82208CB4h case    5:*/		return 0x82208CB8;
		  /* 82208CB8h */ case    6:  		/* lwz R9, <#[R1 + 92]> */
		/* 82208CB8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 82208CB8h case    6:*/		return 0x82208CBC;
	}
	return 0x82208CBC;
} // Block from 82208CA0h-82208CBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82208CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208CBC);
		  /* 82208CBCh */ case    0:  		/* addi R10, R11, 972 */
		/* 82208CBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3CC);
		/* 82208CBCh case    0:*/		return 0x82208CC0;
		  /* 82208CC0h */ case    1:  		/* lwz R10, <#[R11 + 976]> */
		/* 82208CC0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000003D0) );
		/* 82208CC0h case    1:*/		return 0x82208CC4;
		  /* 82208CC4h */ case    2:  		/* stw R10, <#[R9]> */
		/* 82208CC4h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 82208CC4h case    2:*/		return 0x82208CC8;
		  /* 82208CC8h */ case    3:  		/* stw R9, <#[R11 + 976]> */
		/* 82208CC8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000003D0) );
		/* 82208CC8h case    3:*/		return 0x82208CCC;
		  /* 82208CCCh */ case    4:  		/* lwz R11, <#[R28 + 24]> */
		/* 82208CCCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 82208CCCh case    4:*/		return 0x82208CD0;
		  /* 82208CD0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82208CD0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208CD0h case    5:*/		return 0x82208CD4;
		  /* 82208CD4h */ case    6:  		/* bc 12, CR6_EQ, 420 */
		/* 82208CD4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82208E78;  }
		/* 82208CD4h case    6:*/		return 0x82208CD8;
		  /* 82208CD8h */ case    7:  		/* mr R3, R26 */
		/* 82208CD8h case    7:*/		regs.R3 = regs.R26;
		/* 82208CD8h case    7:*/		return 0x82208CDC;
		  /* 82208CDCh */ case    8:  		/* bl -73812 */
		/* 82208CDCh case    8:*/		regs.LR = 0x82208CE0; return 0x821F6C88;
		/* 82208CDCh case    8:*/		return 0x82208CE0;
		  /* 82208CE0h */ case    9:  		/* lwz R11, <#[R25 + 12]> */
		/* 82208CE0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82208CE0h case    9:*/		return 0x82208CE4;
		  /* 82208CE4h */ case   10:  		/* stw R11, <#[R3]> */
		/* 82208CE4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82208CE4h case   10:*/		return 0x82208CE8;
		  /* 82208CE8h */ case   11:  		/* lwz R11, <#[R27 + 596]> */
		/* 82208CE8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000254) );
		/* 82208CE8h case   11:*/		return 0x82208CEC;
		  /* 82208CECh */ case   12:  		/* stw R11, <#[R3 + 4]> */
		/* 82208CECh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82208CECh case   12:*/		return 0x82208CF0;
		  /* 82208CF0h */ case   13:  		/* lwz R11, <#[R27 + 44]> */
		/* 82208CF0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208CF0h case   13:*/		return 0x82208CF4;
		  /* 82208CF4h */ case   14:  		/* stw R11, <#[R3 + 8]> */
		/* 82208CF4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82208CF4h case   14:*/		return 0x82208CF8;
		  /* 82208CF8h */ case   15:  		/* stw R30, <#[R27 + 596]> */
		/* 82208CF8h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000254) );
		/* 82208CF8h case   15:*/		return 0x82208CFC;
		  /* 82208CFCh */ case   16:  		/* lwz R11, <#[R28 + 16]> */
		/* 82208CFCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82208CFCh case   16:*/		return 0x82208D00;
		  /* 82208D00h */ case   17:  		/* cmpwi CR6, R11, 8 */
		/* 82208D00h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 82208D00h case   17:*/		return 0x82208D04;
		  /* 82208D04h */ case   18:  		/* bc 4, CR6_EQ, 20 */
		/* 82208D04h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82208D18;  }
		/* 82208D04h case   18:*/		return 0x82208D08;
		  /* 82208D08h */ case   19:  		/* lwz R11, <#[R27 + 44]> */
		/* 82208D08h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208D08h case   19:*/		return 0x82208D0C;
		  /* 82208D0Ch */ case   20:  		/* li R22, 1 */
		/* 82208D0Ch case   20:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 82208D0Ch case   20:*/		return 0x82208D10;
		  /* 82208D10h */ case   21:  		/* ori R11, R11, 2048 */
		/* 82208D10h case   21:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 82208D10h case   21:*/		return 0x82208D14;
		  /* 82208D14h */ case   22:  		/* stw R11, <#[R27 + 44]> */
		/* 82208D14h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208D14h case   22:*/		return 0x82208D18;
	}
	return 0x82208D18;
} // Block from 82208CBCh-82208D18h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82208D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208D18);
		  /* 82208D18h */ case    0:  		/* lwz R11, <#[R28 + 24]> */
		/* 82208D18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 82208D18h case    0:*/		return 0x82208D1C;
		  /* 82208D1Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208D1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208D1Ch case    1:*/		return 0x82208D20;
		  /* 82208D20h */ case    2:  		/* bc 12, CR6_EQ, 1140 */
		/* 82208D20h case    2:*/		if ( regs.CR[6].eq ) { return 0x82209194;  }
		/* 82208D20h case    2:*/		return 0x82208D24;
		  /* 82208D24h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208D24h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208D24h case    3:*/		return 0x82208D28;
		  /* 82208D28h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82208D28h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208D28h case    4:*/		return 0x82208D2C;
		  /* 82208D2Ch */ case    5:  		/* bc 4, CR6_EQ, 1128 */
		/* 82208D2Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82209194;  }
		/* 82208D2Ch case    5:*/		return 0x82208D30;
		  /* 82208D30h */ case    6:  		/* lwz R10, <#[R11 + 8]> */
		/* 82208D30h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82208D30h case    6:*/		return 0x82208D34;
		  /* 82208D34h */ case    7:  		/* mr R25, R11 */
		/* 82208D34h case    7:*/		regs.R25 = regs.R11;
		/* 82208D34h case    7:*/		return 0x82208D38;
		  /* 82208D38h */ case    8:  		/* lwz R11, <#[R10 + 4]> */
		/* 82208D38h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82208D38h case    8:*/		return 0x82208D3C;
	}
	return 0x82208D3C;
} // Block from 82208D18h-82208D3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82208D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208D3C);
		  /* 82208D3Ch */ case    0:  		/* cmpwi CR6, R11, 6 */
		/* 82208D3Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82208D3Ch case    0:*/		return 0x82208D40;
		  /* 82208D40h */ case    1:  		/* bc 12, CR6_EQ, -724 */
		/* 82208D40h case    1:*/		if ( regs.CR[6].eq ) { return 0x82208A6C;  }
		/* 82208D40h case    1:*/		return 0x82208D44;
		  /* 82208D44h */ case    2:  		/* cmpwi CR6, R11, 12 */
		/* 82208D44h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82208D44h case    2:*/		return 0x82208D48;
		  /* 82208D48h */ case    3:  		/* bc 4, CR6_EQ, 976 */
		/* 82208D48h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82209118;  }
		/* 82208D48h case    3:*/		return 0x82208D4C;
		  /* 82208D4Ch */ case    4:  		/* lwz R11, <#[R27 + 40]> */
		/* 82208D4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 82208D4Ch case    4:*/		return 0x82208D50;
		  /* 82208D50h */ case    5:  		/* ori R11, R11, 64 */
		/* 82208D50h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82208D50h case    5:*/		return 0x82208D54;
		  /* 82208D54h */ case    6:  		/* stw R11, <#[R27 + 40]> */
		/* 82208D54h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 82208D54h case    6:*/		return 0x82208D58;
		  /* 82208D58h */ case    7:  		/* b 288 */
		/* 82208D58h case    7:*/		return 0x82208E78;
		/* 82208D58h case    7:*/		return 0x82208D5C;
	}
	return 0x82208D5C;
} // Block from 82208D3Ch-82208D5Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82208D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208D5C);
		  /* 82208D5Ch */ case    0:  		/* lwz R31, <#[R28 + 24]> */
		/* 82208D5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000018) );
		/* 82208D5Ch case    0:*/		return 0x82208D60;
		  /* 82208D60h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82208D60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208D60h case    1:*/		return 0x82208D64;
		  /* 82208D64h */ case    2:  		/* bc 12, CR6_EQ, 1144 */
		/* 82208D64h case    2:*/		if ( regs.CR[6].eq ) { return 0x822091DC;  }
		/* 82208D64h case    2:*/		return 0x82208D68;
		  /* 82208D68h */ case    3:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208D68h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208D68h case    3:*/		return 0x82208D6C;
		  /* 82208D6Ch */ case    4:  		/* cmpwi CR6, R11, 10 */
		/* 82208D6Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 82208D6Ch case    4:*/		return 0x82208D70;
		  /* 82208D70h */ case    5:  		/* bc 4, CR6_EQ, 1132 */
		/* 82208D70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x822091DC;  }
		/* 82208D70h case    5:*/		return 0x82208D74;
		  /* 82208D74h */ case    6:  		/* lwz R11, <#[R27 + 568]> */
		/* 82208D74h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000238) );
		/* 82208D74h case    6:*/		return 0x82208D78;
		  /* 82208D78h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82208D78h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208D78h case    7:*/		return 0x82208D7C;
		  /* 82208D7Ch */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82208D7Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82208DA0;  }
		/* 82208D7Ch case    8:*/		return 0x82208D80;
		  /* 82208D80h */ case    9:  		/* lwz R10, <#[R28 + 40]> */
		/* 82208D80h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000028) );
		/* 82208D80h case    9:*/		return 0x82208D84;
		  /* 82208D84h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 82208D84h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82208D84h case   10:*/		return 0x82208D88;
		  /* 82208D88h */ case   11:  		/* lwz R9, <#[R9 + 40]> */
		/* 82208D88h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 82208D88h case   11:*/		return 0x82208D8C;
		  /* 82208D8Ch */ case   12:  		/* cmplw CR6, R9, R10 */
		/* 82208D8Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82208D8Ch case   12:*/		return 0x82208D90;
		  /* 82208D90h */ case   13:  		/* bc 12, CR6_EQ, 112 */
		/* 82208D90h case   13:*/		if ( regs.CR[6].eq ) { return 0x82208E00;  }
		/* 82208D90h case   13:*/		return 0x82208D94;
		  /* 82208D94h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 82208D94h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82208D94h case   14:*/		return 0x82208D98;
		  /* 82208D98h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82208D98h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208D98h case   15:*/		return 0x82208D9C;
		  /* 82208D9Ch */ case   16:  		/* bc 4, CR6_EQ, -24 */
		/* 82208D9Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82208D84;  }
		/* 82208D9Ch case   16:*/		return 0x82208DA0;
	}
	return 0x82208DA0;
} // Block from 82208D5Ch-82208DA0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82208DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208DA0);
		  /* 82208DA0h */ case    0:  		/* li R30, 0 */
		/* 82208DA0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82208DA0h case    0:*/		return 0x82208DA4;
		  /* 82208DA4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82208DA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82208DA4h case    1:*/		return 0x82208DA8;
		  /* 82208DA8h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 82208DA8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208DCC;  }
		/* 82208DA8h case    2:*/		return 0x82208DAC;
		  /* 82208DACh */ case    3:  		/* li R5, 0 */
		/* 82208DACh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82208DACh case    3:*/		return 0x82208DB0;
		  /* 82208DB0h */ case    4:  		/* li R4, 28 */
		/* 82208DB0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 82208DB0h case    4:*/		return 0x82208DB4;
		  /* 82208DB4h */ case    5:  		/* mr R3, R27 */
		/* 82208DB4h case    5:*/		regs.R3 = regs.R27;
		/* 82208DB4h case    5:*/		return 0x82208DB8;
		  /* 82208DB8h */ case    6:  		/* bl -509840 */
		/* 82208DB8h case    6:*/		regs.LR = 0x82208DBC; return 0x8218C628;
		/* 82208DB8h case    6:*/		return 0x82208DBC;
		  /* 82208DBCh */ case    7:  		/* lwz R11, <#[R27 + 568]> */
		/* 82208DBCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000238) );
		/* 82208DBCh case    7:*/		return 0x82208DC0;
		  /* 82208DC0h */ case    8:  		/* mr R30, R3 */
		/* 82208DC0h case    8:*/		regs.R30 = regs.R3;
		/* 82208DC0h case    8:*/		return 0x82208DC4;
		  /* 82208DC4h */ case    9:  		/* stw R11, <#[R3 + 8]> */
		/* 82208DC4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82208DC4h case    9:*/		return 0x82208DC8;
		  /* 82208DC8h */ case   10:  		/* stw R3, <#[R27 + 568]> */
		/* 82208DC8h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000238) );
		/* 82208DC8h case   10:*/		return 0x82208DCC;
	}
	return 0x82208DCC;
} // Block from 82208DA0h-82208DCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82208DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208DCC);
		  /* 82208DCCh */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82208DCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82208DCCh case    0:*/		return 0x82208DD0;
		  /* 82208DD0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208DD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208DD0h case    1:*/		return 0x82208DD4;
		  /* 82208DD4h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82208DD4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82208DE4;  }
		/* 82208DD4h case    2:*/		return 0x82208DD8;
		  /* 82208DD8h */ case    3:  		/* lwz R11, <#[R11 + 48]> */
		/* 82208DD8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82208DD8h case    3:*/		return 0x82208DDC;
		  /* 82208DDCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82208DDCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208DDCh case    4:*/		return 0x82208DE0;
		  /* 82208DE0h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82208DE0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82208DEC;  }
		/* 82208DE0h case    5:*/		return 0x82208DE4;
	}
	return 0x82208DE4;
} // Block from 82208DCCh-82208DE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82208DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208DE4);
		  /* 82208DE4h */ case    0:  		/* stw R28, <#[R30]> */
		/* 82208DE4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000000) );
		/* 82208DE4h case    0:*/		return 0x82208DE8;
		  /* 82208DE8h */ case    1:  		/* stw R31, <#[R30 + 4]> */
		/* 82208DE8h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 82208DE8h case    1:*/		return 0x82208DEC;
	}
	return 0x82208DEC;
} // Block from 82208DE4h-82208DECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208DEC);
		  /* 82208DECh */ case    0:  		/* cmplw CR6, R21, R31 */
		/* 82208DECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R31);
		/* 82208DECh case    0:*/		return 0x82208DF0;
		  /* 82208DF0h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82208DF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82208DF8;  }
		/* 82208DF0h case    1:*/		return 0x82208DF4;
		  /* 82208DF4h */ case    2:  		/* mr R19, R30 */
		/* 82208DF4h case    2:*/		regs.R19 = regs.R30;
		/* 82208DF4h case    2:*/		return 0x82208DF8;
	}
	return 0x82208DF8;
} // Block from 82208DECh-82208DF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208DF8);
		  /* 82208DF8h */ case    0:  		/* lwz R31, <#[R31 + 68]> */
		/* 82208DF8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000044) );
		/* 82208DF8h case    0:*/		return 0x82208DFC;
		  /* 82208DFCh */ case    1:  		/* b 100 */
		/* 82208DFCh case    1:*/		return 0x82208E60;
		/* 82208DFCh case    1:*/		return 0x82208E00;
	}
	return 0x82208E00;
} // Block from 82208DF8h-82208E00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82208E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E00);
		  /* 82208E00h */ case    0:  		/* mr R30, R11 */
		/* 82208E00h case    0:*/		regs.R30 = regs.R11;
		/* 82208E00h case    0:*/		return 0x82208E04;
		  /* 82208E04h */ case    1:  		/* b -96 */
		/* 82208E04h case    1:*/		return 0x82208DA4;
		/* 82208E04h case    1:*/		return 0x82208E08;
		  /* 82208E08h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 82208E08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82208E08h case    2:*/		return 0x82208E0C;
		  /* 82208E0Ch */ case    3:  		/* cmpwi CR6, R11, 19 */
		/* 82208E0Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82208E0Ch case    3:*/		return 0x82208E10;
		  /* 82208E10h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 82208E10h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82208E20;  }
		/* 82208E10h case    4:*/		return 0x82208E14;
		  /* 82208E14h */ case    5:  		/* mr R4, R31 */
		/* 82208E14h case    5:*/		regs.R4 = regs.R31;
		/* 82208E14h case    5:*/		return 0x82208E18;
		  /* 82208E18h */ case    6:  		/* li R31, 0 */
		/* 82208E18h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82208E18h case    6:*/		return 0x82208E1C;
		  /* 82208E1Ch */ case    7:  		/* b 40 */
		/* 82208E1Ch case    7:*/		return 0x82208E44;
		/* 82208E1Ch case    7:*/		return 0x82208E20;
	}
	return 0x82208E20;
} // Block from 82208E00h-82208E20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82208E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E20);
		  /* 82208E20h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 82208E20h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82208E20h case    0:*/		return 0x82208E24;
		  /* 82208E24h */ case    1:  		/* bc 4, CR6_EQ, 940 */
		/* 82208E24h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822091D0;  }
		/* 82208E24h case    1:*/		return 0x82208E28;
		  /* 82208E28h */ case    2:  		/* lwz R4, <#[R31 + 8]> */
		/* 82208E28h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 82208E28h case    2:*/		return 0x82208E2C;
		  /* 82208E2Ch */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 82208E2Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82208E2Ch case    3:*/		return 0x82208E30;
		  /* 82208E30h */ case    4:  		/* bc 12, CR6_EQ, 916 */
		/* 82208E30h case    4:*/		if ( regs.CR[6].eq ) { return 0x822091C4;  }
		/* 82208E30h case    4:*/		return 0x82208E34;
		  /* 82208E34h */ case    5:  		/* lwz R11, <#[R4 + 4]> */
		/* 82208E34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82208E34h case    5:*/		return 0x82208E38;
		  /* 82208E38h */ case    6:  		/* cmpwi CR6, R11, 19 */
		/* 82208E38h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82208E38h case    6:*/		return 0x82208E3C;
		  /* 82208E3Ch */ case    7:  		/* bc 4, CR6_EQ, 904 */
		/* 82208E3Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x822091C4;  }
		/* 82208E3Ch case    7:*/		return 0x82208E40;
		  /* 82208E40h */ case    8:  		/* lwz R31, <#[R31 + 12]> */
		/* 82208E40h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 82208E40h case    8:*/		return 0x82208E44;
	}
	return 0x82208E44;
} // Block from 82208E20h-82208E44h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82208E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E44);
		  /* 82208E44h */ case    0:  		/* mr R3, R27 */
		/* 82208E44h case    0:*/		regs.R3 = regs.R27;
		/* 82208E44h case    0:*/		return 0x82208E48;
		  /* 82208E48h */ case    1:  		/* bl -115384 */
		/* 82208E48h case    1:*/		regs.LR = 0x82208E4C; return 0x821ECB90;
		/* 82208E48h case    1:*/		return 0x82208E4C;
		  /* 82208E4Ch */ case    2:  		/* cmpwi CR6, R3, 11 */
		/* 82208E4Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000000B);
		/* 82208E4Ch case    2:*/		return 0x82208E50;
		  /* 82208E50h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82208E50h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82208E60;  }
		/* 82208E50h case    3:*/		return 0x82208E54;
		  /* 82208E54h */ case    4:  		/* lwz R11, <#[R30 + 24]> */
		/* 82208E54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82208E54h case    4:*/		return 0x82208E58;
		  /* 82208E58h */ case    5:  		/* oris R11, R11, 16384 */
		/* 82208E58h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82208E58h case    5:*/		return 0x82208E5C;
		  /* 82208E5Ch */ case    6:  		/* stw R11, <#[R30 + 24]> */
		/* 82208E5Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82208E5Ch case    6:*/		return 0x82208E60;
	}
	return 0x82208E60;
} // Block from 82208E44h-82208E60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82208E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E60);
		  /* 82208E60h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82208E60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208E60h case    0:*/		return 0x82208E64;
		  /* 82208E64h */ case    1:  		/* bc 4, CR6_EQ, -92 */
		/* 82208E64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82208E08;  }
		/* 82208E64h case    1:*/		return 0x82208E68;
		  /* 82208E68h */ case    2:  		/* b 16 */
		/* 82208E68h case    2:*/		return 0x82208E78;
		/* 82208E68h case    2:*/		return 0x82208E6C;
	}
	return 0x82208E6C;
} // Block from 82208E60h-82208E6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E6C);
		  /* 82208E6Ch */ case    0:  		/* mr R4, R28 */
		/* 82208E6Ch case    0:*/		regs.R4 = regs.R28;
		/* 82208E6Ch case    0:*/		return 0x82208E70;
		  /* 82208E70h */ case    1:  		/* mr R3, R27 */
		/* 82208E70h case    1:*/		regs.R3 = regs.R27;
		/* 82208E70h case    1:*/		return 0x82208E74;
		  /* 82208E74h */ case    2:  		/* bl -58292 */
		/* 82208E74h case    2:*/		regs.LR = 0x82208E78; return 0x821FAAC0;
		/* 82208E74h case    2:*/		return 0x82208E78;
	}
	return 0x82208E78;
} // Block from 82208E6Ch-82208E78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E78);
		  /* 82208E78h */ case    0:  		/* lwz R11, <#[R25 + 12]> */
		/* 82208E78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82208E78h case    0:*/		return 0x82208E7C;
		  /* 82208E7Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208E7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208E7Ch case    1:*/		return 0x82208E80;
		  /* 82208E80h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82208E80h case    2:*/		if ( regs.CR[6].eq ) { return 0x82208E90;  }
		/* 82208E80h case    2:*/		return 0x82208E84;
		  /* 82208E84h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208E84h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208E84h case    3:*/		return 0x82208E88;
		  /* 82208E88h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 82208E88h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208E88h case    4:*/		return 0x82208E8C;
		  /* 82208E8Ch */ case    5:  		/* bc 4, CR6_EQ, 860 */
		/* 82208E8Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822091E8;  }
		/* 82208E8Ch case    5:*/		return 0x82208E90;
	}
	return 0x82208E90;
} // Block from 82208E78h-82208E90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82208E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208E90);
		  /* 82208E90h */ case    0:  		/* mr R25, R11 */
		/* 82208E90h case    0:*/		regs.R25 = regs.R11;
		/* 82208E90h case    0:*/		return 0x82208E94;
		  /* 82208E94h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82208E94h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208E94h case    1:*/		return 0x82208E98;
		  /* 82208E98h */ case    2:  		/* bc 4, CR6_EQ, -1080 */
		/* 82208E98h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82208A60;  }
		/* 82208E98h case    2:*/		return 0x82208E9C;
		  /* 82208E9Ch */ case    3:  		/* lwz R11, <#[R23]> */
		/* 82208E9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82208E9Ch case    3:*/		return 0x82208EA0;
		  /* 82208EA0h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82208EA0h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82208EA0h case    4:*/		return 0x82208EA4;
		  /* 82208EA4h */ case    5:  		/* bc 4, CR0_EQ, 212 */
		/* 82208EA4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82208F78;  }
		/* 82208EA4h case    5:*/		return 0x82208EA8;
		  /* 82208EA8h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 82208EA8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82208EA8h case    6:*/		return 0x82208EAC;
		  /* 82208EACh */ case    7:  		/* bc 12, CR0_EQ, 204 */
		/* 82208EACh case    7:*/		if ( regs.CR[0].eq ) { return 0x82208F78;  }
		/* 82208EACh case    7:*/		return 0x82208EB0;
		  /* 82208EB0h */ case    8:  		/* lwz R11, <#[R26]> */
		/* 82208EB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82208EB0h case    8:*/		return 0x82208EB4;
		  /* 82208EB4h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82208EB4h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82208EB4h case    9:*/		return 0x82208EB8;
		  /* 82208EB8h */ case   10:  		/* addi R11, R11, -4 */
		/* 82208EB8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82208EB8h case   10:*/		return 0x82208EBC;
		  /* 82208EBCh */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 82208EBCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82208EBCh case   11:*/		return 0x82208EC0;
		  /* 82208EC0h */ case   12:  		/* mulli R10, R10, 12 */
		/* 82208EC0h case   12:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 82208EC0h case   12:*/		return 0x82208EC4;
		  /* 82208EC4h */ case   13:  		/* add R11, R10, R11 */
		/* 82208EC4h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82208EC4h case   13:*/		return 0x82208EC8;
		  /* 82208EC8h */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 82208EC8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82208EC8h case   14:*/		return 0x82208ECC;
		  /* 82208ECCh */ case   15:  		/* stw R10, <#[R27 + 596]> */
		/* 82208ECCh case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000254) );
		/* 82208ECCh case   15:*/		return 0x82208ED0;
		  /* 82208ED0h */ case   16:  		/* lwz R31, <#[R11 + 4]> */
		/* 82208ED0h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 82208ED0h case   16:*/		return 0x82208ED4;
		  /* 82208ED4h */ case   17:  		/* cmplwi CR6, R31, 0 */
		/* 82208ED4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208ED4h case   17:*/		return 0x82208ED8;
		  /* 82208ED8h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 82208ED8h case   18:*/		if ( regs.CR[6].eq ) { return 0x82208EE8;  }
		/* 82208ED8h case   18:*/		return 0x82208EDC;
		  /* 82208EDCh */ case   19:  		/* lwz R10, <#[R31 + 4]> */
		/* 82208EDCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82208EDCh case   19:*/		return 0x82208EE0;
		  /* 82208EE0h */ case   20:  		/* cmpwi CR6, R10, 1 */
		/* 82208EE0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82208EE0h case   20:*/		return 0x82208EE4;
		  /* 82208EE4h */ case   21:  		/* bc 4, CR6_EQ, 784 */
		/* 82208EE4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x822091F4;  }
		/* 82208EE4h case   21:*/		return 0x82208EE8;
	}
	return 0x82208EE8;
} // Block from 82208E90h-82208EE8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82208EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208EE8);
		  /* 82208EE8h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 82208EE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82208EE8h case    0:*/		return 0x82208EEC;
		  /* 82208EECh */ case    1:  		/* mr R25, R31 */
		/* 82208EECh case    1:*/		regs.R25 = regs.R31;
		/* 82208EECh case    1:*/		return 0x82208EF0;
		  /* 82208EF0h */ case    2:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82208EF0h case    2:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82208EF0h case    2:*/		return 0x82208EF4;
		  /* 82208EF4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82208EF4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82208F04;  }
		/* 82208EF4h case    3:*/		return 0x82208EF8;
		  /* 82208EF8h */ case    4:  		/* lwz R11, <#[R27 + 44]> */
		/* 82208EF8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208EF8h case    4:*/		return 0x82208EFC;
		  /* 82208EFCh */ case    5:  		/* rlwinm R11, R11, 0, 21, 19 */
		/* 82208EFCh case    5:*/		cpu::op::rlwinm<0,0,21,19>(regs,&regs.R11,regs.R11);
		/* 82208EFCh case    5:*/		return 0x82208F00;
		  /* 82208F00h */ case    6:  		/* stw R11, <#[R27 + 44]> */
		/* 82208F00h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208F00h case    6:*/		return 0x82208F04;
	}
	return 0x82208F04;
} // Block from 82208EE8h-82208F04h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82208F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208F04);
		  /* 82208F04h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 82208F04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82208F04h case    0:*/		return 0x82208F08;
		  /* 82208F08h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82208F08h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82208F08h case    1:*/		return 0x82208F0C;
		  /* 82208F0Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82208F0Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82208F18;  }
		/* 82208F0Ch case    2:*/		return 0x82208F10;
		  /* 82208F10h */ case    3:  		/* li R4, 0 */
		/* 82208F10h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82208F10h case    3:*/		return 0x82208F14;
		  /* 82208F14h */ case    4:  		/* b 16 */
		/* 82208F14h case    4:*/		return 0x82208F24;
		/* 82208F14h case    4:*/		return 0x82208F18;
	}
	return 0x82208F18;
} // Block from 82208F04h-82208F18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82208F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208F18);
		  /* 82208F18h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 82208F18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82208F18h case    0:*/		return 0x82208F1C;
		  /* 82208F1Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82208F1Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82208F1Ch case    1:*/		return 0x82208F20;
		  /* 82208F20h */ case    2:  		/* addi R4, R11, -4 */
		/* 82208F20h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82208F20h case    2:*/		return 0x82208F24;
	}
	return 0x82208F24;
} // Block from 82208F18h-82208F24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208F24);
		  /* 82208F24h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 82208F24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82208F24h case    0:*/		return 0x82208F28;
		  /* 82208F28h */ case    1:  		/* addic. R11, R11, -1 */
		/* 82208F28h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82208F28h case    1:*/		return 0x82208F2C;
		  /* 82208F2Ch */ case    2:  		/* stw R11, <#[R4 + 8]> */
		/* 82208F2Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82208F2Ch case    2:*/		return 0x82208F30;
		  /* 82208F30h */ case    3:  		/* bc 4, CR0_EQ, 60 */
		/* 82208F30h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82208F6C;  }
		/* 82208F30h case    3:*/		return 0x82208F34;
		  /* 82208F34h */ case    4:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82208F34h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82208F34h case    4:*/		return 0x82208F38;
		  /* 82208F38h */ case    5:  		/* mr R3, R26 */
		/* 82208F38h case    5:*/		regs.R3 = regs.R26;
		/* 82208F38h case    5:*/		return 0x82208F3C;
		  /* 82208F3Ch */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 82208F3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82208F3Ch case    6:*/		return 0x82208F40;
		  /* 82208F40h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82208F40h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82208F40h case    7:*/		return 0x82208F44;
		  /* 82208F44h */ case    8:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82208F44h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82208F44h case    8:*/		return 0x82208F48;
		  /* 82208F48h */ case    9:  		/* stw R9, <#[R10]> */
		/* 82208F48h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82208F48h case    9:*/		return 0x82208F4C;
		  /* 82208F4Ch */ case   10:  		/* lwz R10, <#[R11]> */
		/* 82208F4Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82208F4Ch case   10:*/		return 0x82208F50;
		  /* 82208F50h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82208F50h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82208F50h case   11:*/		return 0x82208F54;
		  /* 82208F54h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 82208F54h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82208F54h case   12:*/		return 0x82208F58;
		  /* 82208F58h */ case   13:  		/* stw R11, <#[R10]> */
		/* 82208F58h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82208F58h case   13:*/		return 0x82208F5C;
		  /* 82208F5Ch */ case   14:  		/* lwz R11, <#[R4 + 12]> */
		/* 82208F5Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82208F5Ch case   14:*/		return 0x82208F60;
		  /* 82208F60h */ case   15:  		/* mulli R11, R11, 12 */
		/* 82208F60h case   15:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 82208F60h case   15:*/		return 0x82208F64;
		  /* 82208F64h */ case   16:  		/* addi R5, R11, 16 */
		/* 82208F64h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 82208F64h case   16:*/		return 0x82208F68;
		  /* 82208F68h */ case   17:  		/* bl -749920 */
		/* 82208F68h case   17:*/		regs.LR = 0x82208F6C; return 0x82151E08;
		/* 82208F68h case   17:*/		return 0x82208F6C;
	}
	return 0x82208F6C;
} // Block from 82208F24h-82208F6Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 82208F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208F6C);
		  /* 82208F6Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82208F6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82208F6Ch case    0:*/		return 0x82208F70;
		  /* 82208F70h */ case    1:  		/* bc 12, CR6_EQ, -212 */
		/* 82208F70h case    1:*/		if ( regs.CR[6].eq ) { return 0x82208E9C;  }
		/* 82208F70h case    1:*/		return 0x82208F74;
		  /* 82208F74h */ case    2:  		/* b -1300 */
		/* 82208F74h case    2:*/		return 0x82208A60;
		/* 82208F74h case    2:*/		return 0x82208F78;
	}
	return 0x82208F78;
} // Block from 82208F6Ch-82208F78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82208F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208F78);
		  /* 82208F78h */ case    0:  		/* lwz R11, <#[R27 + 44]> */
		/* 82208F78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208F78h case    0:*/		return 0x82208F7C;
		  /* 82208F7Ch */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 82208F7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82208F7Ch case    1:*/		return 0x82208F80;
		  /* 82208F80h */ case    2:  		/* rlwinm R11, R11, 0, 21, 19 */
		/* 82208F80h case    2:*/		cpu::op::rlwinm<0,0,21,19>(regs,&regs.R11,regs.R11);
		/* 82208F80h case    2:*/		return 0x82208F84;
		  /* 82208F84h */ case    3:  		/* stw R11, <#[R27 + 44]> */
		/* 82208F84h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 82208F84h case    3:*/		return 0x82208F88;
		  /* 82208F88h */ case    4:  		/* bc 4, CR6_EQ, -1320 */
		/* 82208F88h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82208A60;  }
		/* 82208F88h case    4:*/		return 0x82208F8C;
	}
	return 0x82208F8C;
} // Block from 82208F78h-82208F8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82208F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208F8C);
		  /* 82208F8Ch */ case    0:  		/* mr R4, R19 */
		/* 82208F8Ch case    0:*/		regs.R4 = regs.R19;
		/* 82208F8Ch case    0:*/		return 0x82208F90;
		  /* 82208F90h */ case    1:  		/* mr R3, R27 */
		/* 82208F90h case    1:*/		regs.R3 = regs.R27;
		/* 82208F90h case    1:*/		return 0x82208F94;
		  /* 82208F94h */ case    2:  		/* bl -17652 */
		/* 82208F94h case    2:*/		regs.LR = 0x82208F98; return 0x82204AA0;
		/* 82208F94h case    2:*/		return 0x82208F98;
		  /* 82208F98h */ case    3:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 82208F98h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 82208F98h case    3:*/		return 0x82208F9C;
		  /* 82208F9Ch */ case    4:  		/* bc 12, CR0_EQ, 816 */
		/* 82208F9Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x822092CC;  }
		/* 82208F9Ch case    4:*/		return 0x82208FA0;
		  /* 82208FA0h */ case    5:  		/* lwz R11, <#[R27 + 16]> */
		/* 82208FA0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82208FA0h case    5:*/		return 0x82208FA4;
		  /* 82208FA4h */ case    6:  		/* li R21, 0 */
		/* 82208FA4h case    6:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82208FA4h case    6:*/		return 0x82208FA8;
		  /* 82208FA8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82208FA8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82208FA8h case    7:*/		return 0x82208FAC;
		  /* 82208FACh */ case    8:  		/* bc 4, CR6_GT, 800 */
		/* 82208FACh case    8:*/		if ( !regs.CR[6].gt ) { return 0x822092CC;  }
		/* 82208FACh case    8:*/		return 0x82208FB0;
		  /* 82208FB0h */ case    9:  		/* li R20, 0 */
		/* 82208FB0h case    9:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82208FB0h case    9:*/		return 0x82208FB4;
		  /* 82208FB4h */ case   10:  		/* lwz R8, <#[R27 + 12]> */
		/* 82208FB4h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x0000000C) );
		/* 82208FB4h case   10:*/		return 0x82208FB8;
		  /* 82208FB8h */ case   11:  		/* add R22, R20, R8 */
		/* 82208FB8h case   11:*/		cpu::op::add<0>(regs,&regs.R22,regs.R20,regs.R8);
		/* 82208FB8h case   11:*/		return 0x82208FBC;
		  /* 82208FBCh */ case   12:  		/* lwz R11, <#[R22 + 4]> */
		/* 82208FBCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 82208FBCh case   12:*/		return 0x82208FC0;
		  /* 82208FC0h */ case   13:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82208FC0h case   13:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82208FC0h case   13:*/		return 0x82208FC4;
		  /* 82208FC4h */ case   14:  		/* bc 12, CR0_EQ, 756 */
		/* 82208FC4h case   14:*/		if ( regs.CR[0].eq ) { return 0x822092B8;  }
		/* 82208FC4h case   14:*/		return 0x82208FC8;
		  /* 82208FC8h */ case   15:  		/* li R10, 0 */
		/* 82208FC8h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82208FC8h case   15:*/		return 0x82208FCC;
		  /* 82208FCCh */ case   16:  		/* cmplwi CR6, R21, 0 */
		/* 82208FCCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82208FCCh case   16:*/		return 0x82208FD0;
		  /* 82208FD0h */ case   17:  		/* bc 12, CR6_EQ, 52 */
		/* 82208FD0h case   17:*/		if ( regs.CR[6].eq ) { return 0x82209004;  }
		/* 82208FD0h case   17:*/		return 0x82208FD4;
		  /* 82208FD4h */ case   18:  		/* lwz R9, <#[R22 + 36]> */
		/* 82208FD4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R22 + 0x00000024) );
		/* 82208FD4h case   18:*/		return 0x82208FD8;
		  /* 82208FD8h */ case   19:  		/* li R11, 0 */
		/* 82208FD8h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82208FD8h case   19:*/		return 0x82208FDC;
		  /* 82208FDCh */ case   20:  		/* add R7, R11, R8 */
		/* 82208FDCh case   20:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R8);
		/* 82208FDCh case   20:*/		return 0x82208FE0;
		  /* 82208FE0h */ case   21:  		/* lwz R7, <#[R7 + 36]> */
		/* 82208FE0h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000024) );
		/* 82208FE0h case   21:*/		return 0x82208FE4;
		  /* 82208FE4h */ case   22:  		/* cmplw CR6, R7, R9 */
		/* 82208FE4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 82208FE4h case   22:*/		return 0x82208FE8;
		  /* 82208FE8h */ case   23:  		/* bc 12, CR6_EQ, 20 */
		/* 82208FE8h case   23:*/		if ( regs.CR[6].eq ) { return 0x82208FFC;  }
		/* 82208FE8h case   23:*/		return 0x82208FEC;
		  /* 82208FECh */ case   24:  		/* addi R10, R10, 1 */
		/* 82208FECh case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82208FECh case   24:*/		return 0x82208FF0;
		  /* 82208FF0h */ case   25:  		/* addi R11, R11, 40 */
		/* 82208FF0h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28);
		/* 82208FF0h case   25:*/		return 0x82208FF4;
		  /* 82208FF4h */ case   26:  		/* cmplw CR6, R10, R21 */
		/* 82208FF4h case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 82208FF4h case   26:*/		return 0x82208FF8;
		  /* 82208FF8h */ case   27:  		/* bc 12, CR6_LT, -28 */
		/* 82208FF8h case   27:*/		if ( regs.CR[6].lt ) { return 0x82208FDC;  }
		/* 82208FF8h case   27:*/		return 0x82208FFC;
	}
	return 0x82208FFC;
} // Block from 82208F8Ch-82208FFCh (28 instructions)

//////////////////////////////////////////////////////
// Block at 82208FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82208FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82208FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82208FFC);
		  /* 82208FFCh */ case    0:  		/* cmplw CR6, R10, R21 */
		/* 82208FFCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 82208FFCh case    0:*/		return 0x82209000;
		  /* 82209000h */ case    1:  		/* bc 12, CR6_LT, 696 */
		/* 82209000h case    1:*/		if ( regs.CR[6].lt ) { return 0x822092B8;  }
		/* 82209000h case    1:*/		return 0x82209004;
	}
	return 0x82209004;
} // Block from 82208FFCh-82209004h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209004);
		  /* 82209004h */ case    0:  		/* lwz R10, <#[R22 + 28]> */
		/* 82209004h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x0000001C) );
		/* 82209004h case    0:*/		return 0x82209008;
		  /* 82209008h */ case    1:  		/* addi R11, R21, 1 */
		/* 82209008h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x1);
		/* 82209008h case    1:*/		return 0x8220900C;
		  /* 8220900Ch */ case    2:  		/* lwz R9, <#[R27 + 16]> */
		/* 8220900Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 8220900Ch case    2:*/		return 0x82209010;
		  /* 82209010h */ case    3:  		/* li R28, 1 */
		/* 82209010h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82209010h case    3:*/		return 0x82209014;
		  /* 82209014h */ case    4:  		/* mr R23, R11 */
		/* 82209014h case    4:*/		regs.R23 = regs.R11;
		/* 82209014h case    4:*/		return 0x82209018;
		  /* 82209018h */ case    5:  		/* cmplw CR6, R11, R9 */
		/* 82209018h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82209018h case    5:*/		return 0x8220901C;
		  /* 8220901Ch */ case    6:  		/* lwz R11, <#[R10]> */
		/* 8220901Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8220901Ch case    6:*/		return 0x82209020;
		  /* 82209020h */ case    7:  		/* rlwinm R26, R11, 28, 18, 31 */
		/* 82209020h case    7:*/		cpu::op::rlwinm<0,28,18,31>(regs,&regs.R26,regs.R11);
		/* 82209020h case    7:*/		return 0x82209024;
		  /* 82209024h */ case    8:  		/* bc 4, CR6_LT, 660 */
		/* 82209024h case    8:*/		if ( !regs.CR[6].lt ) { return 0x822092B8;  }
		/* 82209024h case    8:*/		return 0x82209028;
		  /* 82209028h */ case    9:  		/* addi R24, R20, 40 */
		/* 82209028h case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R20,0x28);
		/* 82209028h case    9:*/		return 0x8220902C;
		  /* 8220902Ch */ case   10:  		/* lwz R11, <#[R27 + 12]> */
		/* 8220902Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 8220902Ch case   10:*/		return 0x82209030;
		  /* 82209030h */ case   11:  		/* lwz R10, <#[R22 + 36]> */
		/* 82209030h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000024) );
		/* 82209030h case   11:*/		return 0x82209034;
		  /* 82209034h */ case   12:  		/* add R30, R11, R24 */
		/* 82209034h case   12:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R24);
		/* 82209034h case   12:*/		return 0x82209038;
		  /* 82209038h */ case   13:  		/* lwz R11, <#[R30 + 36]> */
		/* 82209038h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 82209038h case   13:*/		return 0x8220903C;
		  /* 8220903Ch */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 8220903Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8220903Ch case   14:*/		return 0x82209040;
		  /* 82209040h */ case   15:  		/* bc 4, CR6_EQ, 612 */
		/* 82209040h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822092A4;  }
		/* 82209040h case   15:*/		return 0x82209044;
		  /* 82209044h */ case   16:  		/* lwz R11, <#[R30]> */
		/* 82209044h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82209044h case   16:*/		return 0x82209048;
		  /* 82209048h */ case   17:  		/* li R5, 0 */
		/* 82209048h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82209048h case   17:*/		return 0x8220904C;
		  /* 8220904Ch */ case   18:  		/* mr R3, R27 */
		/* 8220904Ch case   18:*/		regs.R3 = regs.R27;
		/* 8220904Ch case   18:*/		return 0x82209050;
		  /* 82209050h */ case   19:  		/* rlwinm R31, R11, 29, 18, 31 */
		/* 82209050h case   19:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R31,regs.R11);
		/* 82209050h case   19:*/		return 0x82209054;
		  /* 82209054h */ case   20:  		/* rlwinm R25, R31, 2, 0, 29 */
		/* 82209054h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R31);
		/* 82209054h case   20:*/		return 0x82209058;
		  /* 82209058h */ case   21:  		/* mr R4, R25 */
		/* 82209058h case   21:*/		regs.R4 = regs.R25;
		/* 82209058h case   21:*/		return 0x8220905C;
		  /* 8220905Ch */ case   22:  		/* bl -671780 */
		/* 8220905Ch case   22:*/		regs.LR = 0x82209060; return 0x82165038;
		/* 8220905Ch case   22:*/		return 0x82209060;
		  /* 82209060h */ case   23:  		/* mr R29, R3 */
		/* 82209060h case   23:*/		regs.R29 = regs.R3;
		/* 82209060h case   23:*/		return 0x82209064;
		  /* 82209064h */ case   24:  		/* cmplwi CR6, R31, 0 */
		/* 82209064h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82209064h case   24:*/		return 0x82209068;
		  /* 82209068h */ case   25:  		/* bc 12, CR6_EQ, 36 */
		/* 82209068h case   25:*/		if ( regs.CR[6].eq ) { return 0x8220908C;  }
		/* 82209068h case   25:*/		return 0x8220906C;
		  /* 8220906Ch */ case   26:  		/* mtspr CTR, R31 */
		/* 8220906Ch case   26:*/		regs.CTR = regs.R31;
		/* 8220906Ch case   26:*/		return 0x82209070;
		  /* 82209070h */ case   27:  		/* li R11, 0 */
		/* 82209070h case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82209070h case   27:*/		return 0x82209074;
		  /* 82209074h */ case   28:  		/* addi R10, R3, -4 */
		/* 82209074h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFC);
		/* 82209074h case   28:*/		return 0x82209078;
		  /* 82209078h */ case   29:  		/* lwz R9, <#[R30 + 28]> */
		/* 82209078h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 82209078h case   29:*/		return 0x8220907C;
		  /* 8220907Ch */ case   30:  		/* add R9, R11, R9 */
		/* 8220907Ch case   30:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8220907Ch case   30:*/		return 0x82209080;
		  /* 82209080h */ case   31:  		/* addi R11, R11, 8 */
		/* 82209080h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82209080h case   31:*/		return 0x82209084;
		  /* 82209084h */ case   32:  		/* stwu R9, <#[R10 + 4]> */
		/* 82209084h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82209084h case   32:*/		return 0x82209088;
		  /* 82209088h */ case   33:  		/* bc 16, CR0_LT, -16 */
		/* 82209088h case   33:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82209078;  }
		/* 82209088h case   33:*/		return 0x8220908C;
	}
	return 0x8220908C;
} // Block from 82209004h-8220908Ch (34 instructions)

//////////////////////////////////////////////////////
// Block at 8220908Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220908C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220908C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220908C);
		  /* 8220908Ch */ case    0:  		/* lis R11, -32225 */
		/* 8220908Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF821F);
		/* 8220908Ch case    0:*/		return 0x82209090;
		  /* 82209090h */ case    1:  		/* li R5, 4 */
		/* 82209090h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82209090h case    1:*/		return 0x82209094;
		  /* 82209094h */ case    2:  		/* addi R6, R11, -13184 */
		/* 82209094h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCC80);
		/* 82209094h case    2:*/		return 0x82209098;
		  /* 82209098h */ case    3:  		/* mr R4, R31 */
		/* 82209098h case    3:*/		regs.R4 = regs.R31;
		/* 82209098h case    3:*/		return 0x8220909C;
		  /* 8220909Ch */ case    4:  		/* mr R3, R29 */
		/* 8220909Ch case    4:*/		regs.R3 = regs.R29;
		/* 8220909Ch case    4:*/		return 0x822090A0;
		  /* 822090A0h */ case    5:  		/* bl -1536192 */
		/* 822090A0h case    5:*/		regs.LR = 0x822090A4; return 0x82091FE0;
		/* 822090A0h case    5:*/		return 0x822090A4;
		  /* 822090A4h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 822090A4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822090A4h case    6:*/		return 0x822090A8;
		  /* 822090A8h */ case    7:  		/* li R9, 0 */
		/* 822090A8h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822090A8h case    7:*/		return 0x822090AC;
		  /* 822090ACh */ case    8:  		/* rlwinm. R11, R11, 0, 15, 28 */
		/* 822090ACh case    8:*/		cpu::op::rlwinm<1,0,15,28>(regs,&regs.R11,regs.R11);
		/* 822090ACh case    8:*/		return 0x822090B0;
		  /* 822090B0h */ case    9:  		/* bc 12, CR0_EQ, 468 */
		/* 822090B0h case    9:*/		if ( regs.CR[0].eq ) { return 0x82209284;  }
		/* 822090B0h case    9:*/		return 0x822090B4;
		  /* 822090B4h */ case   10:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 822090B4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 822090B4h case   10:*/		return 0x822090B8;
		  /* 822090B8h */ case   11:  		/* mr R8, R9 */
		/* 822090B8h case   11:*/		regs.R8 = regs.R9;
		/* 822090B8h case   11:*/		return 0x822090BC;
		  /* 822090BCh */ case   12:  		/* add R6, R11, R29 */
		/* 822090BCh case   12:*/		cpu::op::add<0>(regs,&regs.R6,regs.R11,regs.R29);
		/* 822090BCh case   12:*/		return 0x822090C0;
	}
	return 0x822090C0;
} // Block from 8220908Ch-822090C0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822090C0h
// Function '?ImportProgram@Compiler@D3DXShader@@AAAPAUFunction@2@PAVCNode@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822090C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822090C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822090C0);
		  /* 822090C0h */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 822090C0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 822090C0h case    0:*/		return 0x822090C4;
		  /* 822090C4h */ case    1:  		/* lwzx R10, <#[R11 + R29]> */
		/* 822090C4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 822090C4h case    1:*/		return 0x822090C8;
		  /* 822090C8h */ case    2:  		/* bc 4, CR6_LT, 52 */
		/* 822090C8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x822090FC;  }
		/* 822090C8h case    2:*/		return 0x822090CC;
		  /* 822090CCh */ case    3:  		/* lwz R7, <#[R10]> */
		/* 822090CCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 822090CCh case    3:*/		return 0x822090D0;
		  /* 822090D0h */ case    4:  		/* mr R11, R6 */
		/* 822090D0h case    4:*/		regs.R11 = regs.R6;
		/* 822090D0h case    4:*/		return 0x822090D4;
		  /* 822090D4h */ case    5:  		/* rlwinm R7, R7, 28, 18, 31 */
		/* 822090D4h case    5:*/		cpu::op::rlwinm<0,28,18,31>(regs,&regs.R7,regs.R7);
		/* 822090D4h case    5:*/		return 0x822090D8;
		  /* 822090D8h */ case    6:  		/* lwz R5, <#[R11]> */
		/* 822090D8h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822090D8h case    6:*/		return 0x822090DC;
		  /* 822090DCh */ case    7:  		/* lwz R5, <#[R5]> */
		/* 822090DCh case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000000) );
		/* 822090DCh case    7:*/		return 0x822090E0;
		  /* 822090E0h */ case    8:  		/* rlwinm R5, R5, 28, 18, 31 */
		/* 822090E0h case    8:*/		cpu::op::rlwinm<0,28,18,31>(regs,&regs.R5,regs.R5);
		/* 822090E0h case    8:*/		return 0x822090E4;
		  /* 822090E4h */ case    9:  		/* cmplw CR6, R5, R7 */
		/* 822090E4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R7);
		/* 822090E4h case    9:*/		return 0x822090E8;
		  /* 822090E8h */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 822090E8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x822090FC;  }
		/* 822090E8h case   10:*/		return 0x822090EC;
		  /* 822090ECh */ case   11:  		/* addi R8, R8, 1 */
		/* 822090ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 822090ECh case   11:*/		return 0x822090F0;
		  /* 822090F0h */ case   12:  		/* addi R11, R11, 4 */
		/* 822090F0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822090F0h case   12:*/		return 0x822090F4;
		  /* 822090F4h */ case   13:  		/* cmplw CR6, R8, R31 */
		/* 822090F4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R31);
		/* 822090F4h case   13:*/		return 0x822090F8;
		  /* 822090F8h */ case   14:  		/* bc 12, CR6_LT, -32 */
		/* 822090F8h case   14:*/		if ( regs.CR[6].lt ) { return 0x822090D8;  }
		/* 822090F8h case   14:*/		return 0x822090FC;
	}
	return 0x822090FC;
} // Block from 822090C0h-822090FCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 822090FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822090FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822090FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822090FC);
		  /* 822090FCh */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 822090FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 822090FCh case    0:*/		return 0x82209100;
		  /* 82209100h */ case    1:  		/* subf R7, R9, R8 */
		/* 82209100h case    1:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R9,regs.R8);
		/* 82209100h case    1:*/		return 0x82209104;
		  /* 82209104h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82209104h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82209104h case    2:*/		return 0x82209108;
		  /* 82209108h */ case    3:  		/* bc 12, CR0_EQ, 260 */
		/* 82209108h case    3:*/		if ( regs.CR[0].eq ) { return 0x8220920C;  }
		/* 82209108h case    3:*/		return 0x8220910C;
		  /* 8220910Ch */ case    4:  		/* cmplwi CR6, R28, 1 */
		/* 8220910Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 8220910Ch case    4:*/		return 0x82209110;
		  /* 82209110h */ case    5:  		/* bc 12, CR6_EQ, 272 */
		/* 82209110h case    5:*/		if ( regs.CR[6].eq ) { return 0x82209220;  }
		/* 82209110h case    5:*/		return 0x82209114;
		  /* 82209114h */ case    6:  		/* b 260 */
		/* 82209114h case    6:*/		return 0x82209218;
		/* 82209114h case    6:*/		return 0x82209118;
	}
	return 0x82209118;
} // Block from 822090FCh-82209118h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82209118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209118);
		  /* 82209118h */ case    0:  		/* li R4, 4801 */
		/* 82209118h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209118h case    0:*/		return 0x8220911C;
		  /* 8220911Ch */ case    1:  		/* mr R3, R27 */
		/* 8220911Ch case    1:*/		regs.R3 = regs.R27;
		/* 8220911Ch case    1:*/		return 0x82209120;
		  /* 82209120h */ case    2:  		/* bl -750264 */
		/* 82209120h case    2:*/		regs.LR = 0x82209124; return 0x82151E68;
		/* 82209120h case    2:*/		return 0x82209124;
	}
	return 0x82209124;
} // Block from 82209118h-82209124h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209124);
		  /* 82209124h */ case    0:  		/* li R4, 4801 */
		/* 82209124h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209124h case    0:*/		return 0x82209128;
		  /* 82209128h */ case    1:  		/* mr R3, R27 */
		/* 82209128h case    1:*/		regs.R3 = regs.R27;
		/* 82209128h case    1:*/		return 0x8220912C;
		  /* 8220912Ch */ case    2:  		/* bl -750276 */
		/* 8220912Ch case    2:*/		regs.LR = 0x82209130; return 0x82151E68;
		/* 8220912Ch case    2:*/		return 0x82209130;
	}
	return 0x82209130;
} // Block from 82209124h-82209130h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209130);
		  /* 82209130h */ case    0:  		/* li R4, 3610 */
		/* 82209130h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE1A);
		/* 82209130h case    0:*/		return 0x82209134;
		  /* 82209134h */ case    1:  		/* lwz R7, <#[R9 + 40]> */
		/* 82209134h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000028) );
		/* 82209134h case    1:*/		return 0x82209138;
		  /* 82209138h */ case    2:  		/* mr R3, R27 */
		/* 82209138h case    2:*/		regs.R3 = regs.R27;
		/* 82209138h case    2:*/		return 0x8220913C;
		  /* 8220913Ch */ case    3:  		/* lwz R6, <#[R9 + 32]> */
		/* 8220913Ch case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000020) );
		/* 8220913Ch case    3:*/		return 0x82209140;
		  /* 82209140h */ case    4:  		/* bl -750296 */
		/* 82209140h case    4:*/		regs.LR = 0x82209144; return 0x82151E68;
		/* 82209140h case    4:*/		return 0x82209144;
	}
	return 0x82209144;
} // Block from 82209130h-82209144h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82209144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209144);
		  /* 82209144h */ case    0:  		/* li R4, 4801 */
		/* 82209144h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209144h case    0:*/		return 0x82209148;
		  /* 82209148h */ case    1:  		/* bl -750304 */
		/* 82209148h case    1:*/		regs.LR = 0x8220914C; return 0x82151E68;
		/* 82209148h case    1:*/		return 0x8220914C;
	}
	return 0x8220914C;
} // Block from 82209144h-8220914Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220914Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220914C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220914C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220914C);
		  /* 8220914Ch */ case    0:  		/* li R4, 4801 */
		/* 8220914Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220914Ch case    0:*/		return 0x82209150;
		  /* 82209150h */ case    1:  		/* mr R3, R27 */
		/* 82209150h case    1:*/		regs.R3 = regs.R27;
		/* 82209150h case    1:*/		return 0x82209154;
		  /* 82209154h */ case    2:  		/* bl -750316 */
		/* 82209154h case    2:*/		regs.LR = 0x82209158; return 0x82151E68;
		/* 82209154h case    2:*/		return 0x82209158;
	}
	return 0x82209158;
} // Block from 8220914Ch-82209158h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209158);
		  /* 82209158h */ case    0:  		/* mr R5, R30 */
		/* 82209158h case    0:*/		regs.R5 = regs.R30;
		/* 82209158h case    0:*/		return 0x8220915C;
		  /* 8220915Ch */ case    1:  		/* li R4, 3611 */
		/* 8220915Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE1B);
		/* 8220915Ch case    1:*/		return 0x82209160;
		  /* 82209160h */ case    2:  		/* mr R3, R27 */
		/* 82209160h case    2:*/		regs.R3 = regs.R27;
		/* 82209160h case    2:*/		return 0x82209164;
		  /* 82209164h */ case    3:  		/* bl -750332 */
		/* 82209164h case    3:*/		regs.LR = 0x82209168; return 0x82151E68;
		/* 82209164h case    3:*/		return 0x82209168;
	}
	return 0x82209168;
} // Block from 82209158h-82209168h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209168);
		  /* 82209168h */ case    0:  		/* li R4, 4801 */
		/* 82209168h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209168h case    0:*/		return 0x8220916C;
		  /* 8220916Ch */ case    1:  		/* mr R3, R27 */
		/* 8220916Ch case    1:*/		regs.R3 = regs.R27;
		/* 8220916Ch case    1:*/		return 0x82209170;
		  /* 82209170h */ case    2:  		/* bl -750344 */
		/* 82209170h case    2:*/		regs.LR = 0x82209174; return 0x82151E68;
		/* 82209170h case    2:*/		return 0x82209174;
	}
	return 0x82209174;
} // Block from 82209168h-82209174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209174);
		  /* 82209174h */ case    0:  		/* li R4, 4801 */
		/* 82209174h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209174h case    0:*/		return 0x82209178;
		  /* 82209178h */ case    1:  		/* bl -750352 */
		/* 82209178h case    1:*/		regs.LR = 0x8220917C; return 0x82151E68;
		/* 82209178h case    1:*/		return 0x8220917C;
	}
	return 0x8220917C;
} // Block from 82209174h-8220917Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220917Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220917C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220917C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220917C);
		  /* 8220917Ch */ case    0:  		/* li R4, 4801 */
		/* 8220917Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220917Ch case    0:*/		return 0x82209180;
		  /* 82209180h */ case    1:  		/* mr R3, R27 */
		/* 82209180h case    1:*/		regs.R3 = regs.R27;
		/* 82209180h case    1:*/		return 0x82209184;
		  /* 82209184h */ case    2:  		/* bl -750364 */
		/* 82209184h case    2:*/		regs.LR = 0x82209188; return 0x82151E68;
		/* 82209184h case    2:*/		return 0x82209188;
	}
	return 0x82209188;
} // Block from 8220917Ch-82209188h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209188);
		  /* 82209188h */ case    0:  		/* li R4, 4801 */
		/* 82209188h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209188h case    0:*/		return 0x8220918C;
		  /* 8220918Ch */ case    1:  		/* mr R3, R27 */
		/* 8220918Ch case    1:*/		regs.R3 = regs.R27;
		/* 8220918Ch case    1:*/		return 0x82209190;
		  /* 82209190h */ case    2:  		/* bl -750376 */
		/* 82209190h case    2:*/		regs.LR = 0x82209194; return 0x82151E68;
		/* 82209190h case    2:*/		return 0x82209194;
	}
	return 0x82209194;
} // Block from 82209188h-82209194h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209194);
		  /* 82209194h */ case    0:  		/* li R4, 4801 */
		/* 82209194h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209194h case    0:*/		return 0x82209198;
		  /* 82209198h */ case    1:  		/* mr R3, R27 */
		/* 82209198h case    1:*/		regs.R3 = regs.R27;
		/* 82209198h case    1:*/		return 0x8220919C;
		  /* 8220919Ch */ case    2:  		/* bl -750388 */
		/* 8220919Ch case    2:*/		regs.LR = 0x822091A0; return 0x82151E68;
		/* 8220919Ch case    2:*/		return 0x822091A0;
	}
	return 0x822091A0;
} // Block from 82209194h-822091A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091A0);
		  /* 822091A0h */ case    0:  		/* li R4, 4801 */
		/* 822091A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091A0h case    0:*/		return 0x822091A4;
		  /* 822091A4h */ case    1:  		/* mr R3, R27 */
		/* 822091A4h case    1:*/		regs.R3 = regs.R27;
		/* 822091A4h case    1:*/		return 0x822091A8;
		  /* 822091A8h */ case    2:  		/* bl -750400 */
		/* 822091A8h case    2:*/		regs.LR = 0x822091AC; return 0x82151E68;
		/* 822091A8h case    2:*/		return 0x822091AC;
	}
	return 0x822091AC;
} // Block from 822091A0h-822091ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091AC);
		  /* 822091ACh */ case    0:  		/* li R4, 4801 */
		/* 822091ACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091ACh case    0:*/		return 0x822091B0;
		  /* 822091B0h */ case    1:  		/* mr R3, R27 */
		/* 822091B0h case    1:*/		regs.R3 = regs.R27;
		/* 822091B0h case    1:*/		return 0x822091B4;
		  /* 822091B4h */ case    2:  		/* bl -750412 */
		/* 822091B4h case    2:*/		regs.LR = 0x822091B8; return 0x82151E68;
		/* 822091B4h case    2:*/		return 0x822091B8;
	}
	return 0x822091B8;
} // Block from 822091ACh-822091B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091B8);
		  /* 822091B8h */ case    0:  		/* li R4, 4801 */
		/* 822091B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091B8h case    0:*/		return 0x822091BC;
		  /* 822091BCh */ case    1:  		/* mr R3, R27 */
		/* 822091BCh case    1:*/		regs.R3 = regs.R27;
		/* 822091BCh case    1:*/		return 0x822091C0;
		  /* 822091C0h */ case    2:  		/* bl -750424 */
		/* 822091C0h case    2:*/		regs.LR = 0x822091C4; return 0x82151E68;
		/* 822091C0h case    2:*/		return 0x822091C4;
	}
	return 0x822091C4;
} // Block from 822091B8h-822091C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091C4);
		  /* 822091C4h */ case    0:  		/* li R4, 4801 */
		/* 822091C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091C4h case    0:*/		return 0x822091C8;
		  /* 822091C8h */ case    1:  		/* mr R3, R27 */
		/* 822091C8h case    1:*/		regs.R3 = regs.R27;
		/* 822091C8h case    1:*/		return 0x822091CC;
		  /* 822091CCh */ case    2:  		/* bl -750436 */
		/* 822091CCh case    2:*/		regs.LR = 0x822091D0; return 0x82151E68;
		/* 822091CCh case    2:*/		return 0x822091D0;
	}
	return 0x822091D0;
} // Block from 822091C4h-822091D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091D0);
		  /* 822091D0h */ case    0:  		/* li R4, 4801 */
		/* 822091D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091D0h case    0:*/		return 0x822091D4;
		  /* 822091D4h */ case    1:  		/* mr R3, R27 */
		/* 822091D4h case    1:*/		regs.R3 = regs.R27;
		/* 822091D4h case    1:*/		return 0x822091D8;
		  /* 822091D8h */ case    2:  		/* bl -750448 */
		/* 822091D8h case    2:*/		regs.LR = 0x822091DC; return 0x82151E68;
		/* 822091D8h case    2:*/		return 0x822091DC;
	}
	return 0x822091DC;
} // Block from 822091D0h-822091DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091DC);
		  /* 822091DCh */ case    0:  		/* li R4, 4801 */
		/* 822091DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091DCh case    0:*/		return 0x822091E0;
		  /* 822091E0h */ case    1:  		/* mr R3, R27 */
		/* 822091E0h case    1:*/		regs.R3 = regs.R27;
		/* 822091E0h case    1:*/		return 0x822091E4;
		  /* 822091E4h */ case    2:  		/* bl -750460 */
		/* 822091E4h case    2:*/		regs.LR = 0x822091E8; return 0x82151E68;
		/* 822091E4h case    2:*/		return 0x822091E8;
	}
	return 0x822091E8;
} // Block from 822091DCh-822091E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091E8);
		  /* 822091E8h */ case    0:  		/* li R4, 4801 */
		/* 822091E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091E8h case    0:*/		return 0x822091EC;
		  /* 822091ECh */ case    1:  		/* mr R3, R27 */
		/* 822091ECh case    1:*/		regs.R3 = regs.R27;
		/* 822091ECh case    1:*/		return 0x822091F0;
		  /* 822091F0h */ case    2:  		/* bl -750472 */
		/* 822091F0h case    2:*/		regs.LR = 0x822091F4; return 0x82151E68;
		/* 822091F0h case    2:*/		return 0x822091F4;
	}
	return 0x822091F4;
} // Block from 822091E8h-822091F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822091F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822091F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822091F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822091F4);
		  /* 822091F4h */ case    0:  		/* li R4, 4801 */
		/* 822091F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822091F4h case    0:*/		return 0x822091F8;
		  /* 822091F8h */ case    1:  		/* mr R3, R27 */
		/* 822091F8h case    1:*/		regs.R3 = regs.R27;
		/* 822091F8h case    1:*/		return 0x822091FC;
		  /* 822091FCh */ case    2:  		/* bl -750484 */
		/* 822091FCh case    2:*/		regs.LR = 0x82209200; return 0x82151E68;
		/* 822091FCh case    2:*/		return 0x82209200;
	}
	return 0x82209200;
} // Block from 822091F4h-82209200h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209200);
		  /* 82209200h */ case    0:  		/* li R4, 4801 */
		/* 82209200h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209200h case    0:*/		return 0x82209204;
		  /* 82209204h */ case    1:  		/* mr R3, R27 */
		/* 82209204h case    1:*/		regs.R3 = regs.R27;
		/* 82209204h case    1:*/		return 0x82209208;
		  /* 82209208h */ case    2:  		/* bl -750496 */
		/* 82209208h case    2:*/		regs.LR = 0x8220920C; return 0x82151E68;
		/* 82209208h case    2:*/		return 0x8220920C;
	}
	return 0x8220920C;
} // Block from 82209200h-8220920Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220920Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220920C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220920C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220920C);
		  /* 8220920Ch */ case    0:  		/* slw R11, R28, R7 */
		/* 8220920Ch case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R7);
		/* 8220920Ch case    0:*/		return 0x82209210;
		  /* 82209210h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 82209210h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 82209210h case    1:*/		return 0x82209214;
		  /* 82209214h */ case    2:  		/* bc 4, CR6_GT, 12 */
		/* 82209214h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82209220;  }
		/* 82209214h case    2:*/		return 0x82209218;
	}
	return 0x82209218;
} // Block from 8220920Ch-82209218h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209218);
		  /* 82209218h */ case    0:  		/* li R28, 1 */
		/* 82209218h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82209218h case    0:*/		return 0x8220921C;
		  /* 8220921Ch */ case    1:  		/* addi R26, R26, 1 */
		/* 8220921Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8220921Ch case    1:*/		return 0x82209220;
	}
	return 0x82209220;
} // Block from 82209218h-82209220h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209220);
		  /* 82209220h */ case    0:  		/* cmplw CR6, R9, R8 */
		/* 82209220h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82209220h case    0:*/		return 0x82209224;
		  /* 82209224h */ case    1:  		/* bc 4, CR6_LT, 60 */
		/* 82209224h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82209260;  }
		/* 82209224h case    1:*/		return 0x82209228;
		  /* 82209228h */ case    2:  		/* rlwinm R8, R26, 4, 14, 27 */
		/* 82209228h case    2:*/		cpu::op::rlwinm<0,4,14,27>(regs,&regs.R8,regs.R26);
		/* 82209228h case    2:*/		return 0x8220922C;
		  /* 8220922Ch */ case    3:  		/* mtspr CTR, R7 */
		/* 8220922Ch case    3:*/		regs.CTR = regs.R7;
		/* 8220922Ch case    3:*/		return 0x82209230;
		  /* 82209230h */ case    4:  		/* addi R11, R6, -4 */
		/* 82209230h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFC);
		/* 82209230h case    4:*/		return 0x82209234;
		  /* 82209234h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 82209234h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82209234h case    5:*/		return 0x82209238;
		  /* 82209238h */ case    6:  		/* lwz R6, <#[R10]> */
		/* 82209238h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82209238h case    6:*/		return 0x8220923C;
		  /* 8220923Ch */ case    7:  		/* rlwinm R6, R6, 0, 28, 13 */
		/* 8220923Ch case    7:*/		cpu::op::rlwinm<0,0,28,13>(regs,&regs.R6,regs.R6);
		/* 8220923Ch case    7:*/		return 0x82209240;
		  /* 82209240h */ case    8:  		/* or R6, R6, R8 */
		/* 82209240h case    8:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R8);
		/* 82209240h case    8:*/		return 0x82209244;
		  /* 82209244h */ case    9:  		/* stw R6, <#[R10]> */
		/* 82209244h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82209244h case    9:*/		return 0x82209248;
		  /* 82209248h */ case   10:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82209248h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82209248h case   10:*/		return 0x8220924C;
		  /* 8220924Ch */ case   11:  		/* lwz R6, <#[R10]> */
		/* 8220924Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8220924Ch case   11:*/		return 0x82209250;
		  /* 82209250h */ case   12:  		/* rlwimi R6, R28, 0, 28, 31 */
		/* 82209250h case   12:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R6,regs.R28);
		/* 82209250h case   12:*/		return 0x82209254;
		  /* 82209254h */ case   13:  		/* rlwinm R28, R28, 1, 0, 30 */
		/* 82209254h case   13:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R28);
		/* 82209254h case   13:*/		return 0x82209258;
		  /* 82209258h */ case   14:  		/* stw R6, <#[R10]> */
		/* 82209258h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82209258h case   14:*/		return 0x8220925C;
		  /* 8220925Ch */ case   15:  		/* bc 16, CR0_LT, -40 */
		/* 8220925Ch case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82209234;  }
		/* 8220925Ch case   15:*/		return 0x82209260;
	}
	return 0x82209260;
} // Block from 82209220h-82209260h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82209260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209260);
		  /* 82209260h */ case    0:  		/* cmplwi CR6, R28, 15 */
		/* 82209260h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000000F);
		/* 82209260h case    0:*/		return 0x82209264;
		  /* 82209264h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 82209264h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82209270;  }
		/* 82209264h case    1:*/		return 0x82209268;
		  /* 82209268h */ case    2:  		/* addi R26, R26, 1 */
		/* 82209268h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82209268h case    2:*/		return 0x8220926C;
		  /* 8220926Ch */ case    3:  		/* li R28, 1 */
		/* 8220926Ch case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8220926Ch case    3:*/		return 0x82209270;
	}
	return 0x82209270;
} // Block from 82209260h-82209270h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209270);
		  /* 82209270h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82209270h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82209270h case    0:*/		return 0x82209274;
		  /* 82209274h */ case    1:  		/* add R9, R7, R9 */
		/* 82209274h case    1:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82209274h case    1:*/		return 0x82209278;
		  /* 82209278h */ case    2:  		/* rlwinm R11, R11, 29, 18, 31 */
		/* 82209278h case    2:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R11,regs.R11);
		/* 82209278h case    2:*/		return 0x8220927C;
		  /* 8220927Ch */ case    3:  		/* cmplw CR6, R9, R11 */
		/* 8220927Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8220927Ch case    3:*/		return 0x82209280;
		  /* 82209280h */ case    4:  		/* bc 12, CR6_LT, -460 */
		/* 82209280h case    4:*/		if ( regs.CR[6].lt ) { return 0x822090B4;  }
		/* 82209280h case    4:*/		return 0x82209284;
	}
	return 0x82209284;
} // Block from 82209270h-82209284h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82209284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209284);
		  /* 82209284h */ case    0:  		/* li R6, 0 */
		/* 82209284h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82209284h case    0:*/		return 0x82209288;
		  /* 82209288h */ case    1:  		/* mr R5, R25 */
		/* 82209288h case    1:*/		regs.R5 = regs.R25;
		/* 82209288h case    1:*/		return 0x8220928C;
		  /* 8220928Ch */ case    2:  		/* mr R4, R29 */
		/* 8220928Ch case    2:*/		regs.R4 = regs.R29;
		/* 8220928Ch case    2:*/		return 0x82209290;
		  /* 82209290h */ case    3:  		/* mr R3, R27 */
		/* 82209290h case    3:*/		regs.R3 = regs.R27;
		/* 82209290h case    3:*/		return 0x82209294;
		  /* 82209294h */ case    4:  		/* bl -640068 */
		/* 82209294h case    4:*/		regs.LR = 0x82209298; return 0x8216CE50;
		/* 82209294h case    4:*/		return 0x82209298;
		  /* 82209298h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82209298h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82209298h case    5:*/		return 0x8220929C;
		  /* 8220929Ch */ case    6:  		/* oris R11, R11, 16384 */
		/* 8220929Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 8220929Ch case    6:*/		return 0x822092A0;
		  /* 822092A0h */ case    7:  		/* stw R11, <#[R30]> */
		/* 822092A0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822092A0h case    7:*/		return 0x822092A4;
	}
	return 0x822092A4;
} // Block from 82209284h-822092A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822092A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822092A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822092A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822092A4);
		  /* 822092A4h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 822092A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 822092A4h case    0:*/		return 0x822092A8;
		  /* 822092A8h */ case    1:  		/* addi R23, R23, 1 */
		/* 822092A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 822092A8h case    1:*/		return 0x822092AC;
		  /* 822092ACh */ case    2:  		/* addi R24, R24, 40 */
		/* 822092ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x28);
		/* 822092ACh case    2:*/		return 0x822092B0;
		  /* 822092B0h */ case    3:  		/* cmplw CR6, R23, R11 */
		/* 822092B0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 822092B0h case    3:*/		return 0x822092B4;
		  /* 822092B4h */ case    4:  		/* bc 12, CR6_LT, -648 */
		/* 822092B4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8220902C;  }
		/* 822092B4h case    4:*/		return 0x822092B8;
	}
	return 0x822092B8;
} // Block from 822092A4h-822092B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822092B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822092B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822092B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822092B8);
		  /* 822092B8h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 822092B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 822092B8h case    0:*/		return 0x822092BC;
		  /* 822092BCh */ case    1:  		/* addi R21, R21, 1 */
		/* 822092BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 822092BCh case    1:*/		return 0x822092C0;
		  /* 822092C0h */ case    2:  		/* addi R20, R20, 40 */
		/* 822092C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x28);
		/* 822092C0h case    2:*/		return 0x822092C4;
		  /* 822092C4h */ case    3:  		/* cmplw CR6, R21, R11 */
		/* 822092C4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 822092C4h case    3:*/		return 0x822092C8;
		  /* 822092C8h */ case    4:  		/* bc 12, CR6_LT, -788 */
		/* 822092C8h case    4:*/		if ( regs.CR[6].lt ) { return 0x82208FB4;  }
		/* 822092C8h case    4:*/		return 0x822092CC;
	}
	return 0x822092CC;
} // Block from 822092B8h-822092CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822092CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822092CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822092CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822092CC);
		  /* 822092CCh */ case    0:  		/* mr R3, R19 */
		/* 822092CCh case    0:*/		regs.R3 = regs.R19;
		/* 822092CCh case    0:*/		return 0x822092D0;
		  /* 822092D0h */ case    1:  		/* addi R1, R1, 208 */
		/* 822092D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 822092D0h case    1:*/		return 0x822092D4;
		  /* 822092D4h */ case    2:  		/* b -1540176 */
		/* 822092D4h case    2:*/		return 0x82091284;
		/* 822092D4h case    2:*/		return 0x822092D8;
	}
	return 0x822092D8;
} // Block from 822092CCh-822092D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822092D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822092D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822092D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822092D8);
		  /* 822092D8h */ case    0:  		/* li R4, 4801 */
		/* 822092D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822092D8h case    0:*/		return 0x822092DC;
		  /* 822092DCh */ case    1:  		/* mr R3, R27 */
		/* 822092DCh case    1:*/		regs.R3 = regs.R27;
		/* 822092DCh case    1:*/		return 0x822092E0;
		  /* 822092E0h */ case    2:  		/* bl -750712 */
		/* 822092E0h case    2:*/		regs.LR = 0x822092E4; return 0x82151E68;
		/* 822092E0h case    2:*/		return 0x822092E4;
		  /* 822092E4h */ case    3:  		/* nop */
		/* 822092E4h case    3:*/		cpu::op::nop();
		/* 822092E4h case    3:*/		return 0x822092E8;
	}
	return 0x822092E8;
} // Block from 822092D8h-822092E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822092E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822092E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822092E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822092E8);
		  /* 822092E8h */ case    0:  		/* mfspr R12, LR */
		/* 822092E8h case    0:*/		regs.R12 = regs.LR;
		/* 822092E8h case    0:*/		return 0x822092EC;
		  /* 822092ECh */ case    1:  		/* bl -1540292 */
		/* 822092ECh case    1:*/		regs.LR = 0x822092F0; return 0x82091228;
		/* 822092ECh case    1:*/		return 0x822092F0;
		  /* 822092F0h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 822092F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 822092F0h case    2:*/		return 0x822092F4;
		  /* 822092F4h */ case    3:  		/* lwz R11, <#[R5]> */
		/* 822092F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 822092F4h case    3:*/		return 0x822092F8;
		  /* 822092F8h */ case    4:  		/* mr R31, R3 */
		/* 822092F8h case    4:*/		regs.R31 = regs.R3;
		/* 822092F8h case    4:*/		return 0x822092FC;
		  /* 822092FCh */ case    5:  		/* mr R3, R5 */
		/* 822092FCh case    5:*/		regs.R3 = regs.R5;
		/* 822092FCh case    5:*/		return 0x82209300;
		  /* 82209300h */ case    6:  		/* mr R30, R4 */
		/* 82209300h case    6:*/		regs.R30 = regs.R4;
		/* 82209300h case    6:*/		return 0x82209304;
		  /* 82209304h */ case    7:  		/* mr R29, R5 */
		/* 82209304h case    7:*/		regs.R29 = regs.R5;
		/* 82209304h case    7:*/		return 0x82209308;
		  /* 82209308h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 82209308h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82209308h case    8:*/		return 0x8220930C;
		  /* 8220930Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 8220930Ch case    9:*/		regs.CTR = regs.R11;
		/* 8220930Ch case    9:*/		return 0x82209310;
		  /* 82209310h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 82209310h case   10:*/		if ( 1 ) { regs.LR = 0x82209314; return (uint32)regs.CTR; }
		/* 82209310h case   10:*/		return 0x82209314;
		  /* 82209314h */ case   11:  		/* lwz R9, <#[R3]> */
		/* 82209314h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82209314h case   11:*/		return 0x82209318;
		  /* 82209318h */ case   12:  		/* lis R11, 4138 */
		/* 82209318h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0x102A);
		/* 82209318h case   12:*/		return 0x8220931C;
		  /* 8220931Ch */ case   13:  		/* ori R11, R11, 4352 */
		/* 8220931Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1100);
		/* 8220931Ch case   13:*/		return 0x82209320;
		  /* 82209320h */ case   14:  		/* rlwinm R10, R9, 0, 0, 23 */
		/* 82209320h case   14:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R9);
		/* 82209320h case   14:*/		return 0x82209324;
		  /* 82209324h */ case   15:  		/* cmplw CR6, R10, R11 */
		/* 82209324h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82209324h case   15:*/		return 0x82209328;
		  /* 82209328h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 82209328h case   16:*/		if ( regs.CR[6].eq ) { return 0x82209338;  }
		/* 82209328h case   16:*/		return 0x8220932C;
		  /* 8220932Ch */ case   17:  		/* li R4, 4801 */
		/* 8220932Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 8220932Ch case   17:*/		return 0x82209330;
		  /* 82209330h */ case   18:  		/* mr R3, R31 */
		/* 82209330h case   18:*/		regs.R3 = regs.R31;
		/* 82209330h case   18:*/		return 0x82209334;
		  /* 82209334h */ case   19:  		/* bl -750796 */
		/* 82209334h case   19:*/		regs.LR = 0x82209338; return 0x82151E68;
		/* 82209334h case   19:*/		return 0x82209338;
	}
	return 0x82209338;
} // Block from 822092E8h-82209338h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82209338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209338);
		  /* 82209338h */ case    0:  		/* lwz R10, <#[R3 + 24]> */
		/* 82209338h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 82209338h case    0:*/		return 0x8220933C;
		  /* 8220933Ch */ case    1:  		/* li R26, 0 */
		/* 8220933Ch case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8220933Ch case    1:*/		return 0x82209340;
		  /* 82209340h */ case    2:  		/* lwz R11, <#[R3 + 16]> */
		/* 82209340h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 82209340h case    2:*/		return 0x82209344;
		  /* 82209344h */ case    3:  		/* add R20, R10, R3 */
		/* 82209344h case    3:*/		cpu::op::add<0>(regs,&regs.R20,regs.R10,regs.R3);
		/* 82209344h case    3:*/		return 0x82209348;
		  /* 82209348h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82209348h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82209348h case    4:*/		return 0x8220934C;
		  /* 8220934Ch */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8220934Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82209358;  }
		/* 8220934Ch case    5:*/		return 0x82209350;
		  /* 82209350h */ case    6:  		/* add R11, R11, R3 */
		/* 82209350h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82209350h case    6:*/		return 0x82209354;
		  /* 82209354h */ case    7:  		/* addi R26, R11, 4 */
		/* 82209354h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x4);
		/* 82209354h case    7:*/		return 0x82209358;
	}
	return 0x82209358;
} // Block from 82209338h-82209358h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82209358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209358);
		  /* 82209358h */ case    0:  		/* rlwinm R11, R9, 0, 31, 31 */
		/* 82209358h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R9);
		/* 82209358h case    0:*/		return 0x8220935C;
		  /* 8220935Ch */ case    1:  		/* lis R18, -1 */
		/* 8220935Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R18,0xFFFFFFFF);
		/* 8220935Ch case    1:*/		return 0x82209360;
		  /* 82209360h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 82209360h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82209360h case    2:*/		return 0x82209364;
		  /* 82209364h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82209364h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82209374;  }
		/* 82209364h case    3:*/		return 0x82209368;
		  /* 82209368h */ case    4:  		/* lis R11, -2 */
		/* 82209368h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFE);
		/* 82209368h case    4:*/		return 0x8220936C;
		  /* 8220936Ch */ case    5:  		/* stw R11, <#[R31 + 48]> */
		/* 8220936Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8220936Ch case    5:*/		return 0x82209370;
		  /* 82209370h */ case    6:  		/* b 8 */
		/* 82209370h case    6:*/		return 0x82209378;
		/* 82209370h case    6:*/		return 0x82209374;
	}
	return 0x82209374;
} // Block from 82209358h-82209374h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82209374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209374);
		  /* 82209374h */ case    0:  		/* stw R18, <#[R31 + 48]> */
		/* 82209374h case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000030) );
		/* 82209374h case    0:*/		return 0x82209378;
	}
	return 0x82209378;
} // Block from 82209374h-82209378h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82209378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209378);
		  /* 82209378h */ case    0:  		/* lwz R11, <#[R20 + 12]> */
		/* 82209378h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000000C) );
		/* 82209378h case    0:*/		return 0x8220937C;
		  /* 8220937Ch */ case    1:  		/* mr R3, R31 */
		/* 8220937Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220937Ch case    1:*/		return 0x82209380;
		  /* 82209380h */ case    2:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82209380h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82209380h case    2:*/		return 0x82209384;
		  /* 82209384h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 82209384h case    3:*/		if ( regs.CR[0].eq ) { return 0x82209398;  }
		/* 82209384h case    3:*/		return 0x82209388;
		  /* 82209388h */ case    4:  		/* lis R11, -32252 */
		/* 82209388h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209388h case    4:*/		return 0x8220938C;
		  /* 8220938Ch */ case    5:  		/* li R4, 3500 */
		/* 8220938Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 8220938Ch case    5:*/		return 0x82209390;
		  /* 82209390h */ case    6:  		/* addi R5, R11, -12688 */
		/* 82209390h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCE70);
		/* 82209390h case    6:*/		return 0x82209394;
		  /* 82209394h */ case    7:  		/* bl -750892 */
		/* 82209394h case    7:*/		regs.LR = 0x82209398; return 0x82151E68;
		/* 82209394h case    7:*/		return 0x82209398;
	}
	return 0x82209398;
} // Block from 82209378h-82209398h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82209398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209398);
		  /* 82209398h */ case    0:  		/* lwz R11, <#[R20 + 8]> */
		/* 82209398h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 82209398h case    0:*/		return 0x8220939C;
		  /* 8220939Ch */ case    1:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 8220939Ch case    1:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 8220939Ch case    1:*/		return 0x822093A0;
		  /* 822093A0h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 822093A0h case    2:*/		if ( regs.CR[0].eq ) { return 0x822093B4;  }
		/* 822093A0h case    2:*/		return 0x822093A4;
		  /* 822093A4h */ case    3:  		/* lis R11, -32252 */
		/* 822093A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822093A4h case    3:*/		return 0x822093A8;
		  /* 822093A8h */ case    4:  		/* li R4, 3500 */
		/* 822093A8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 822093A8h case    4:*/		return 0x822093AC;
		  /* 822093ACh */ case    5:  		/* addi R5, R11, -12700 */
		/* 822093ACh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCE64);
		/* 822093ACh case    5:*/		return 0x822093B0;
		  /* 822093B0h */ case    6:  		/* bl -750920 */
		/* 822093B0h case    6:*/		regs.LR = 0x822093B4; return 0x82151E68;
		/* 822093B0h case    6:*/		return 0x822093B4;
	}
	return 0x822093B4;
} // Block from 82209398h-822093B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822093B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822093B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822093B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822093B4);
		  /* 822093B4h */ case    0:  		/* li R5, 11 */
		/* 822093B4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xB);
		/* 822093B4h case    0:*/		return 0x822093B8;
		  /* 822093B8h */ case    1:  		/* li R4, 80 */
		/* 822093B8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x50);
		/* 822093B8h case    1:*/		return 0x822093BC;
		  /* 822093BCh */ case    2:  		/* bl -641044 */
		/* 822093BCh case    2:*/		regs.LR = 0x822093C0; return 0x8216CBA8;
		/* 822093BCh case    2:*/		return 0x822093C0;
		  /* 822093C0h */ case    3:  		/* mr R19, R3 */
		/* 822093C0h case    3:*/		regs.R19 = regs.R3;
		/* 822093C0h case    3:*/		return 0x822093C4;
		  /* 822093C4h */ case    4:  		/* addi R3, R1, 128 */
		/* 822093C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 822093C4h case    4:*/		return 0x822093C8;
		  /* 822093C8h */ case    5:  		/* bl -1303872 */
		/* 822093C8h case    5:*/		regs.LR = 0x822093CC; return 0x820CAE88;
		/* 822093C8h case    5:*/		return 0x822093CC;
		  /* 822093CCh */ case    6:  		/* lwz R10, <#[R1 + 128]> */
		/* 822093CCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 822093CCh case    6:*/		return 0x822093D0;
		  /* 822093D0h */ case    7:  		/* li R11, 10 */
		/* 822093D0h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 822093D0h case    7:*/		return 0x822093D4;
		  /* 822093D4h */ case    8:  		/* mr R4, R30 */
		/* 822093D4h case    8:*/		regs.R4 = regs.R30;
		/* 822093D4h case    8:*/		return 0x822093D8;
		  /* 822093D8h */ case    9:  		/* stw R11, <#[R19 + 4]> */
		/* 822093D8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 822093D8h case    9:*/		return 0x822093DC;
		  /* 822093DCh */ case   10:  		/* mr R3, R31 */
		/* 822093DCh case   10:*/		regs.R3 = regs.R31;
		/* 822093DCh case   10:*/		return 0x822093E0;
		  /* 822093E0h */ case   11:  		/* addi R21, R19, 48 */
		/* 822093E0h case   11:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R19,0x30);
		/* 822093E0h case   11:*/		return 0x822093E4;
		  /* 822093E4h */ case   12:  		/* stw R10, <#[R19]> */
		/* 822093E4h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 822093E4h case   12:*/		return 0x822093E8;
		  /* 822093E8h */ case   13:  		/* bl -114424 */
		/* 822093E8h case   13:*/		regs.LR = 0x822093EC; return 0x821ED4F0;
		/* 822093E8h case   13:*/		return 0x822093EC;
		  /* 822093ECh */ case   14:  		/* stw R3, <#[R19 + 48]> */
		/* 822093ECh case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R19 + 0x00000030) );
		/* 822093ECh case   14:*/		return 0x822093F0;
		  /* 822093F0h */ case   15:  		/* li R5, 13 */
		/* 822093F0h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 822093F0h case   15:*/		return 0x822093F4;
		  /* 822093F4h */ case   16:  		/* li R4, 44 */
		/* 822093F4h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 822093F4h case   16:*/		return 0x822093F8;
		  /* 822093F8h */ case   17:  		/* mr R3, R31 */
		/* 822093F8h case   17:*/		regs.R3 = regs.R31;
		/* 822093F8h case   17:*/		return 0x822093FC;
		  /* 822093FCh */ case   18:  		/* bl -641108 */
		/* 822093FCh case   18:*/		regs.LR = 0x82209400; return 0x8216CBA8;
		/* 822093FCh case   18:*/		return 0x82209400;
		  /* 82209400h */ case   19:  		/* stw R3, <#[R31 + 8]> */
		/* 82209400h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82209400h case   19:*/		return 0x82209404;
		  /* 82209404h */ case   20:  		/* addi R3, R1, 80 */
		/* 82209404h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82209404h case   20:*/		return 0x82209408;
		  /* 82209408h */ case   21:  		/* bl -1309336 */
		/* 82209408h case   21:*/		regs.LR = 0x8220940C; return 0x820C9970;
		/* 82209408h case   21:*/		return 0x8220940C;
		  /* 8220940Ch */ case   22:  		/* lis R10, -32252 */
		/* 8220940Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220940Ch case   22:*/		return 0x82209410;
		  /* 82209410h */ case   23:  		/* lwz R9, <#[R1 + 80]> */
		/* 82209410h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82209410h case   23:*/		return 0x82209414;
		  /* 82209414h */ case   24:  		/* li R11, 4 */
		/* 82209414h case   24:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82209414h case   24:*/		return 0x82209418;
		  /* 82209418h */ case   25:  		/* addi R5, R10, -12716 */
		/* 82209418h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFCE54);
		/* 82209418h case   25:*/		return 0x8220941C;
		  /* 8220941Ch */ case   26:  		/* li R30, 727 */
		/* 8220941Ch case   26:*/		cpu::op::li<0>(regs,&regs.R30,0x2D7);
		/* 8220941Ch case   26:*/		return 0x82209420;
		  /* 82209420h */ case   27:  		/* mr R6, R19 */
		/* 82209420h case   27:*/		regs.R6 = regs.R19;
		/* 82209420h case   27:*/		return 0x82209424;
		  /* 82209424h */ case   28:  		/* li R4, 2 */
		/* 82209424h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82209424h case   28:*/		return 0x82209428;
		  /* 82209428h */ case   29:  		/* mr R3, R31 */
		/* 82209428h case   29:*/		regs.R3 = regs.R31;
		/* 82209428h case   29:*/		return 0x8220942C;
		  /* 8220942Ch */ case   30:  		/* lwz R10, <#[R31 + 8]> */
		/* 8220942Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8220942Ch case   30:*/		return 0x82209430;
		  /* 82209430h */ case   31:  		/* stw R9, <#[R10]> */
		/* 82209430h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82209430h case   31:*/		return 0x82209434;
		  /* 82209434h */ case   32:  		/* lwz R10, <#[R31 + 8]> */
		/* 82209434h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82209434h case   32:*/		return 0x82209438;
		  /* 82209438h */ case   33:  		/* stw R11, <#[R10 + 4]> */
		/* 82209438h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82209438h case   33:*/		return 0x8220943C;
		  /* 8220943Ch */ case   34:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220943Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220943Ch case   34:*/		return 0x82209440;
		  /* 82209440h */ case   35:  		/* stw R30, <#[R11 + 28]> */
		/* 82209440h case   35:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000001C) );
		/* 82209440h case   35:*/		return 0x82209444;
		  /* 82209444h */ case   36:  		/* bl -116028 */
		/* 82209444h case   36:*/		regs.LR = 0x82209448; return 0x821ECF08;
		/* 82209444h case   36:*/		return 0x82209448;
		  /* 82209448h */ case   37:  		/* lis R11, -32255 */
		/* 82209448h case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82209448h case   37:*/		return 0x8220944C;
		  /* 8220944Ch */ case   38:  		/* mr R4, R3 */
		/* 8220944Ch case   38:*/		regs.R4 = regs.R3;
		/* 8220944Ch case   38:*/		return 0x82209450;
		  /* 82209450h */ case   39:  		/* addi R6, R11, 9252 */
		/* 82209450h case   39:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82209450h case   39:*/		return 0x82209454;
		  /* 82209454h */ case   40:  		/* mr R3, R31 */
		/* 82209454h case   40:*/		regs.R3 = regs.R31;
		/* 82209454h case   40:*/		return 0x82209458;
		  /* 82209458h */ case   41:  		/* li R5, 0 */
		/* 82209458h case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82209458h case   41:*/		return 0x8220945C;
		  /* 8220945Ch */ case   42:  		/* bl -115948 */
		/* 8220945Ch case   42:*/		regs.LR = 0x82209460; return 0x821ECF70;
		/* 8220945Ch case   42:*/		return 0x82209460;
		  /* 82209460h */ case   43:  		/* lwz R11, <#[R31 + 8]> */
		/* 82209460h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82209460h case   43:*/		return 0x82209464;
		  /* 82209464h */ case   44:  		/* li R5, 0 */
		/* 82209464h case   44:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82209464h case   44:*/		return 0x82209468;
		  /* 82209468h */ case   45:  		/* li R4, 29080 */
		/* 82209468h case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x7198);
		/* 82209468h case   45:*/		return 0x8220946C;
		  /* 8220946Ch */ case   46:  		/* stw R3, <#[R11 + 40]> */
		/* 8220946Ch case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000028) );
		/* 8220946Ch case   46:*/		return 0x82209470;
		  /* 82209470h */ case   47:  		/* mr R3, R31 */
		/* 82209470h case   47:*/		regs.R3 = regs.R31;
		/* 82209470h case   47:*/		return 0x82209474;
		  /* 82209474h */ case   48:  		/* stw R30, <#[R31 + 16]> */
		/* 82209474h case   48:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 82209474h case   48:*/		return 0x82209478;
		  /* 82209478h */ case   49:  		/* stw R30, <#[R31 + 20]> */
		/* 82209478h case   49:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 82209478h case   49:*/		return 0x8220947C;
		  /* 8220947Ch */ case   50:  		/* bl -511572 */
		/* 8220947Ch case   50:*/		regs.LR = 0x82209480; return 0x8218C628;
		/* 8220947Ch case   50:*/		return 0x82209480;
		  /* 82209480h */ case   51:  		/* stw R3, <#[R31 + 12]> */
		/* 82209480h case   51:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82209480h case   51:*/		return 0x82209484;
		  /* 82209484h */ case   52:  		/* lwz R11, <#[R29]> */
		/* 82209484h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82209484h case   52:*/		return 0x82209488;
		  /* 82209488h */ case   53:  		/* mr R3, R29 */
		/* 82209488h case   53:*/		regs.R3 = regs.R29;
		/* 82209488h case   53:*/		return 0x8220948C;
		  /* 8220948Ch */ case   54:  		/* lwz R11, <#[R11 + 12]> */
		/* 8220948Ch case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220948Ch case   54:*/		return 0x82209490;
		  /* 82209490h */ case   55:  		/* mtspr CTR, R11 */
		/* 82209490h case   55:*/		regs.CTR = regs.R11;
		/* 82209490h case   55:*/		return 0x82209494;
		  /* 82209494h */ case   56:  		/* bcctrl 20, CR0_LT */
		/* 82209494h case   56:*/		if ( 1 ) { regs.LR = 0x82209498; return (uint32)regs.CTR; }
		/* 82209494h case   56:*/		return 0x82209498;
		  /* 82209498h */ case   57:  		/* lis R11, -32225 */
		/* 82209498h case   57:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF821F);
		/* 82209498h case   57:*/		return 0x8220949C;
		  /* 8220949Ch */ case   58:  		/* mr R4, R31 */
		/* 8220949Ch case   58:*/		regs.R4 = regs.R31;
		/* 8220949Ch case   58:*/		return 0x822094A0;
		  /* 822094A0h */ case   59:  		/* addi R5, R11, 8320 */
		/* 822094A0h case   59:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2080);
		/* 822094A0h case   59:*/		return 0x822094A4;
		  /* 822094A4h */ case   60:  		/* bl -1699500 */
		/* 822094A4h case   60:*/		regs.LR = 0x822094A8; return 0x8206A5F8;
		/* 822094A4h case   60:*/		return 0x822094A8;
		  /* 822094A8h */ case   61:  		/* cmpwi CR0, R3, 0 */
		/* 822094A8h case   61:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822094A8h case   61:*/		return 0x822094AC;
		  /* 822094ACh */ case   62:  		/* bc 4, CR0_LT, 16 */
		/* 822094ACh case   62:*/		if ( !regs.CR[0].lt ) { return 0x822094BC;  }
		/* 822094ACh case   62:*/		return 0x822094B0;
		  /* 822094B0h */ case   63:  		/* li R4, 4801 */
		/* 822094B0h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822094B0h case   63:*/		return 0x822094B4;
		  /* 822094B4h */ case   64:  		/* mr R3, R31 */
		/* 822094B4h case   64:*/		regs.R3 = regs.R31;
		/* 822094B4h case   64:*/		return 0x822094B8;
		  /* 822094B8h */ case   65:  		/* bl -751184 */
		/* 822094B8h case   65:*/		regs.LR = 0x822094BC; return 0x82151E68;
		/* 822094B8h case   65:*/		return 0x822094BC;
	}
	return 0x822094BC;
} // Block from 822093B4h-822094BCh (66 instructions)

//////////////////////////////////////////////////////
// Block at 822094BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822094BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822094BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822094BC);
		  /* 822094BCh */ case    0:  		/* li R17, 1 */
		/* 822094BCh case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 822094BCh case    0:*/		return 0x822094C0;
		  /* 822094C0h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 822094C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 822094C0h case    1:*/		return 0x822094C4;
		  /* 822094C4h */ case    2:  		/* bc 12, CR6_EQ, 480 */
		/* 822094C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x822096A4;  }
		/* 822094C4h case    2:*/		return 0x822094C8;
		  /* 822094C8h */ case    3:  		/* lwz R24, <#[R26 + 12]> */
		/* 822094C8h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R26 + 0x0000000C) );
		/* 822094C8h case    3:*/		return 0x822094CC;
		  /* 822094CCh */ case    4:  		/* cmplwi CR6, R24, 0 */
		/* 822094CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 822094CCh case    4:*/		return 0x822094D0;
		  /* 822094D0h */ case    5:  		/* bc 12, CR6_EQ, 468 */
		/* 822094D0h case    5:*/		if ( regs.CR[6].eq ) { return 0x822096A4;  }
		/* 822094D0h case    5:*/		return 0x822094D4;
		  /* 822094D4h */ case    6:  		/* lwz R11, <#[R26 + 16]> */
		/* 822094D4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 822094D4h case    6:*/		return 0x822094D8;
		  /* 822094D8h */ case    7:  		/* li R25, 0 */
		/* 822094D8h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 822094D8h case    7:*/		return 0x822094DC;
		  /* 822094DCh */ case    8:  		/* cmplwi CR6, R24, 0 */
		/* 822094DCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 822094DCh case    8:*/		return 0x822094E0;
		  /* 822094E0h */ case    9:  		/* add R11, R11, R26 */
		/* 822094E0h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 822094E0h case    9:*/		return 0x822094E4;
		  /* 822094E4h */ case   10:  		/* bc 12, CR6_EQ, 448 */
		/* 822094E4h case   10:*/		if ( regs.CR[6].eq ) { return 0x822096A4;  }
		/* 822094E4h case   10:*/		return 0x822094E8;
		  /* 822094E8h */ case   11:  		/* addi R29, R11, -14 */
		/* 822094E8h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFF2);
		/* 822094E8h case   11:*/		return 0x822094EC;
		  /* 822094ECh */ case   12:  		/* lis R11, -32253 */
		/* 822094ECh case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822094ECh case   12:*/		return 0x822094F0;
		  /* 822094F0h */ case   13:  		/* li R22, 2 */
		/* 822094F0h case   13:*/		cpu::op::li<0>(regs,&regs.R22,0x2);
		/* 822094F0h case   13:*/		return 0x822094F4;
		  /* 822094F4h */ case   14:  		/* addi R23, R11, 26084 */
		/* 822094F4h case   14:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x65E4);
		/* 822094F4h case   14:*/		return 0x822094F8;
		  /* 822094F8h */ case   15:  		/* lwz R11, <#[R29 + 26]> */
		/* 822094F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001A) );
		/* 822094F8h case   15:*/		return 0x822094FC;
		  /* 822094FCh */ case   16:  		/* lhz R10, <#[R29 + 18]> */
		/* 822094FCh case   16:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000012) );
		/* 822094FCh case   16:*/		return 0x82209500;
		  /* 82209500h */ case   17:  		/* lhz R9, <#[R29 + 20]> */
		/* 82209500h case   17:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000014) );
		/* 82209500h case   17:*/		return 0x82209504;
		  /* 82209504h */ case   18:  		/* add R28, R11, R26 */
		/* 82209504h case   18:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R26);
		/* 82209504h case   18:*/		return 0x82209508;
		  /* 82209508h */ case   19:  		/* cmplwi CR6, R10, 1 */
		/* 82209508h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82209508h case   19:*/		return 0x8220950C;
		  /* 8220950Ch */ case   20:  		/* mr R11, R9 */
		/* 8220950Ch case   20:*/		regs.R11 = regs.R9;
		/* 8220950Ch case   20:*/		return 0x82209510;
		  /* 82209510h */ case   21:  		/* bc 12, CR6_LT, 88 */
		/* 82209510h case   21:*/		if ( regs.CR[6].lt ) { return 0x82209568;  }
		/* 82209510h case   21:*/		return 0x82209514;
		  /* 82209514h */ case   22:  		/* bc 12, CR6_EQ, 48 */
		/* 82209514h case   22:*/		if ( regs.CR[6].eq ) { return 0x82209544;  }
		/* 82209514h case   22:*/		return 0x82209518;
		  /* 82209518h */ case   23:  		/* cmplwi CR6, R10, 3 */
		/* 82209518h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82209518h case   23:*/		return 0x8220951C;
		  /* 8220951Ch */ case   24:  		/* bc 12, CR6_LT, 24 */
		/* 8220951Ch case   24:*/		if ( regs.CR[6].lt ) { return 0x82209534;  }
		/* 8220951Ch case   24:*/		return 0x82209520;
		  /* 82209520h */ case   25:  		/* bc 4, CR6_EQ, 924 */
		/* 82209520h case   25:*/		if ( !regs.CR[6].eq ) { return 0x822098BC;  }
		/* 82209520h case   25:*/		return 0x82209524;
		  /* 82209524h */ case   26:  		/* addi R5, R9, 688 */
		/* 82209524h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0x2B0);
		/* 82209524h case   26:*/		return 0x82209528;
		  /* 82209528h */ case   27:  		/* li R7, 33 */
		/* 82209528h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x21);
		/* 82209528h case   27:*/		return 0x8220952C;
		  /* 8220952Ch */ case   28:  		/* li R27, 115 */
		/* 8220952Ch case   28:*/		cpu::op::li<0>(regs,&regs.R27,0x73);
		/* 8220952Ch case   28:*/		return 0x82209530;
		  /* 82209530h */ case   29:  		/* b 88 */
		/* 82209530h case   29:*/		return 0x82209588;
		/* 82209530h case   29:*/		return 0x82209534;
	}
	return 0x82209534;
} // Block from 822094BCh-82209534h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82209534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209534);
		  /* 82209534h */ case    0:  		/* addi R5, R11, 64 */
		/* 82209534h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82209534h case    0:*/		return 0x82209538;
		  /* 82209538h */ case    1:  		/* li R7, 12 */
		/* 82209538h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 82209538h case    1:*/		return 0x8220953C;
		  /* 8220953Ch */ case    2:  		/* li R27, 99 */
		/* 8220953Ch case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x63);
		/* 8220953Ch case    2:*/		return 0x82209540;
		  /* 82209540h */ case    3:  		/* b 72 */
		/* 82209540h case    3:*/		return 0x82209588;
		/* 82209540h case    3:*/		return 0x82209544;
	}
	return 0x82209544;
} // Block from 82209534h-82209544h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209544);
		  /* 82209544h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 82209544h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82209544h case    0:*/		return 0x82209548;
		  /* 82209548h */ case    1:  		/* rlwinm R10, R10, 0, 0, 15 */
		/* 82209548h case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R10,regs.R10);
		/* 82209548h case    1:*/		return 0x8220954C;
		  /* 8220954Ch */ case    2:  		/* cmplw CR6, R10, R18 */
		/* 8220954Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 8220954Ch case    2:*/		return 0x82209550;
		  /* 82209550h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 82209550h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82209558;  }
		/* 82209550h case    3:*/		return 0x82209554;
		  /* 82209554h */ case    4:  		/* addi R11, R11, 16 */
		/* 82209554h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82209554h case    4:*/		return 0x82209558;
	}
	return 0x82209558;
} // Block from 82209544h-82209558h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82209558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209558);
		  /* 82209558h */ case    0:  		/* addi R5, R11, 320 */
		/* 82209558h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x140);
		/* 82209558h case    0:*/		return 0x8220955C;
		  /* 8220955Ch */ case    1:  		/* li R7, 5 */
		/* 8220955Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x5);
		/* 8220955Ch case    1:*/		return 0x82209560;
		  /* 82209560h */ case    2:  		/* li R27, 105 */
		/* 82209560h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x69);
		/* 82209560h case    2:*/		return 0x82209564;
		  /* 82209564h */ case    3:  		/* b 36 */
		/* 82209564h case    3:*/		return 0x82209588;
		/* 82209564h case    3:*/		return 0x82209568;
	}
	return 0x82209568;
} // Block from 82209558h-82209568h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209568);
		  /* 82209568h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 82209568h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82209568h case    0:*/		return 0x8220956C;
		  /* 8220956Ch */ case    1:  		/* rlwinm R10, R10, 0, 0, 15 */
		/* 8220956Ch case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R10,regs.R10);
		/* 8220956Ch case    1:*/		return 0x82209570;
		  /* 82209570h */ case    2:  		/* cmplw CR6, R10, R18 */
		/* 82209570h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 82209570h case    2:*/		return 0x82209574;
		  /* 82209574h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 82209574h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8220957C;  }
		/* 82209574h case    3:*/		return 0x82209578;
		  /* 82209578h */ case    4:  		/* addi R11, R11, 128 */
		/* 82209578h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x80);
		/* 82209578h case    4:*/		return 0x8220957C;
	}
	return 0x8220957C;
} // Block from 82209568h-8220957Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220957Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220957C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220957C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220957C);
		  /* 8220957Ch */ case    0:  		/* addi R5, R11, 352 */
		/* 8220957Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x160);
		/* 8220957Ch case    0:*/		return 0x82209580;
		  /* 82209580h */ case    1:  		/* li R7, 0 */
		/* 82209580h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82209580h case    1:*/		return 0x82209584;
		  /* 82209584h */ case    2:  		/* li R27, 98 */
		/* 82209584h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x62);
		/* 82209584h case    2:*/		return 0x82209588;
	}
	return 0x82209588;
} // Block from 8220957Ch-82209588h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209588);
		  /* 82209588h */ case    0:  		/* lwz R11, <#[R29 + 14]> */
		/* 82209588h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000E) );
		/* 82209588h case    0:*/		return 0x8220958C;
		  /* 8220958Ch */ case    1:  		/* mr R3, R31 */
		/* 8220958Ch case    1:*/		regs.R3 = regs.R31;
		/* 8220958Ch case    1:*/		return 0x82209590;
		  /* 82209590h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 82209590h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82209590h case    2:*/		return 0x82209594;
		  /* 82209594h */ case    3:  		/* add R4, R11, R26 */
		/* 82209594h case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R26);
		/* 82209594h case    3:*/		return 0x82209598;
		  /* 82209598h */ case    4:  		/* lhz R11, <#[R28 + 8]> */
		/* 82209598h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82209598h case    4:*/		return 0x8220959C;
		  /* 8220959Ch */ case    5:  		/* lhz R8, <#[R28 + 4]> */
		/* 8220959Ch case    5:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000004) );
		/* 8220959Ch case    5:*/		return 0x822095A0;
		  /* 822095A0h */ case    6:  		/* addi R10, R10, 40 */
		/* 822095A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x28);
		/* 822095A0h case    6:*/		return 0x822095A4;
		  /* 822095A4h */ case    7:  		/* lhz R6, <#[R29 + 22]> */
		/* 822095A4h case    7:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000016) );
		/* 822095A4h case    7:*/		return 0x822095A8;
		  /* 822095A8h */ case    8:  		/* mullw R8, R11, R8 */
		/* 822095A8h case    8:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 822095A8h case    8:*/		return 0x822095AC;
		  /* 822095ACh */ case    9:  		/* lhz R9, <#[R28 + 6]> */
		/* 822095ACh case    9:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000006) );
		/* 822095ACh case    9:*/		return 0x822095B0;
		  /* 822095B0h */ case   10:  		/* bl -99928 */
		/* 822095B0h case   10:*/		regs.LR = 0x822095B4; return 0x821F0F58;
		/* 822095B0h case   10:*/		return 0x822095B4;
		  /* 822095B4h */ case   11:  		/* lwz R30, <#[R3 + 24]> */
		/* 822095B4h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000018) );
		/* 822095B4h case   11:*/		return 0x822095B8;
		  /* 822095B8h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 822095B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 822095B8h case   12:*/		return 0x822095BC;
		  /* 822095BCh */ case   13:  		/* bc 12, CR6_EQ, 792 */
		/* 822095BCh case   13:*/		if ( regs.CR[6].eq ) { return 0x822098D4;  }
		/* 822095BCh case   13:*/		return 0x822095C0;
		  /* 822095C0h */ case   14:  		/* lwz R11, <#[R30 + 4]> */
		/* 822095C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 822095C0h case   14:*/		return 0x822095C4;
		  /* 822095C4h */ case   15:  		/* cmpwi CR6, R11, 11 */
		/* 822095C4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 822095C4h case   15:*/		return 0x822095C8;
		  /* 822095C8h */ case   16:  		/* bc 4, CR6_EQ, 780 */
		/* 822095C8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x822098D4;  }
		/* 822095C8h case   16:*/		return 0x822095CC;
		  /* 822095CCh */ case   17:  		/* lwz R11, <#[R29 + 30]> */
		/* 822095CCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001E) );
		/* 822095CCh case   17:*/		return 0x822095D0;
		  /* 822095D0h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 822095D0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822095D0h case   18:*/		return 0x822095D4;
		  /* 822095D4h */ case   19:  		/* bc 12, CR6_EQ, 44 */
		/* 822095D4h case   19:*/		if ( regs.CR[6].eq ) { return 0x82209600;  }
		/* 822095D4h case   19:*/		return 0x822095D8;
		  /* 822095D8h */ case   20:  		/* lwz R16, <#[R30 + 20]> */
		/* 822095D8h case   20:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R30 + 0x00000014) );
		/* 822095D8h case   20:*/		return 0x822095DC;
		  /* 822095DCh */ case   21:  		/* add R4, R11, R26 */
		/* 822095DCh case   21:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R26);
		/* 822095DCh case   21:*/		return 0x822095E0;
		  /* 822095E0h */ case   22:  		/* mr R3, R31 */
		/* 822095E0h case   22:*/		regs.R3 = regs.R31;
		/* 822095E0h case   22:*/		return 0x822095E4;
		  /* 822095E4h */ case   23:  		/* mr R5, R16 */
		/* 822095E4h case   23:*/		regs.R5 = regs.R16;
		/* 822095E4h case   23:*/		return 0x822095E8;
		  /* 822095E8h */ case   24:  		/* bl -116256 */
		/* 822095E8h case   24:*/		regs.LR = 0x822095EC; return 0x821ECFC8;
		/* 822095E8h case   24:*/		return 0x822095EC;
		  /* 822095ECh */ case   25:  		/* mr R4, R3 */
		/* 822095ECh case   25:*/		regs.R4 = regs.R3;
		/* 822095ECh case   25:*/		return 0x822095F0;
		  /* 822095F0h */ case   26:  		/* mr R3, R31 */
		/* 822095F0h case   26:*/		regs.R3 = regs.R31;
		/* 822095F0h case   26:*/		return 0x822095F4;
		  /* 822095F4h */ case   27:  		/* mr R5, R16 */
		/* 822095F4h case   27:*/		regs.R5 = regs.R16;
		/* 822095F4h case   27:*/		return 0x822095F8;
		  /* 822095F8h */ case   28:  		/* bl -116024 */
		/* 822095F8h case   28:*/		regs.LR = 0x822095FC; return 0x821ED0C0;
		/* 822095F8h case   28:*/		return 0x822095FC;
		  /* 822095FCh */ case   29:  		/* stw R3, <#[R30 + 56]> */
		/* 822095FCh case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000038) );
		/* 822095FCh case   29:*/		return 0x82209600;
	}
	return 0x82209600;
} // Block from 82209588h-82209600h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82209600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209600);
		  /* 82209600h */ case    0:  		/* lwz R11, <#[R30 + 48]> */
		/* 82209600h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82209600h case    0:*/		return 0x82209604;
		  /* 82209604h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82209604h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82209604h case    1:*/		return 0x82209608;
		  /* 82209608h */ case    2:  		/* bc 12, CR6_EQ, 704 */
		/* 82209608h case    2:*/		if ( regs.CR[6].eq ) { return 0x822098C8;  }
		/* 82209608h case    2:*/		return 0x8220960C;
		  /* 8220960Ch */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 8220960Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8220960Ch case    3:*/		return 0x82209610;
		  /* 82209610h */ case    4:  		/* cmpwi CR6, R10, 9 */
		/* 82209610h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 82209610h case    4:*/		return 0x82209614;
		  /* 82209614h */ case    5:  		/* bc 4, CR6_EQ, 692 */
		/* 82209614h case    5:*/		if ( !regs.CR[6].eq ) { return 0x822098C8;  }
		/* 82209614h case    5:*/		return 0x82209618;
		  /* 82209618h */ case    6:  		/* lhz R10, <#[R28]> */
		/* 82209618h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82209618h case    6:*/		return 0x8220961C;
		  /* 8220961Ch */ case    7:  		/* cmplwi CR6, R10, 1 */
		/* 8220961Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8220961Ch case    7:*/		return 0x82209620;
		  /* 82209620h */ case    8:  		/* bc 12, CR6_LT, 72 */
		/* 82209620h case    8:*/		if ( regs.CR[6].lt ) { return 0x82209668;  }
		/* 82209620h case    8:*/		return 0x82209624;
		  /* 82209624h */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 82209624h case    9:*/		if ( regs.CR[6].eq ) { return 0x82209660;  }
		/* 82209624h case    9:*/		return 0x82209628;
		  /* 82209628h */ case   10:  		/* cmplwi CR6, R10, 3 */
		/* 82209628h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82209628h case   10:*/		return 0x8220962C;
		  /* 8220962Ch */ case   11:  		/* bc 12, CR6_LT, 44 */
		/* 8220962Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x82209658;  }
		/* 8220962Ch case   11:*/		return 0x82209630;
		  /* 82209630h */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 82209630h case   12:*/		if ( regs.CR[6].eq ) { return 0x82209644;  }
		/* 82209630h case   12:*/		return 0x82209634;
		  /* 82209634h */ case   13:  		/* cmplwi CR6, R10, 5 */
		/* 82209634h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82209634h case   13:*/		return 0x82209638;
		  /* 82209638h */ case   14:  		/* bc 4, CR6_LT, 56 */
		/* 82209638h case   14:*/		if ( !regs.CR[6].lt ) { return 0x82209670;  }
		/* 82209638h case   14:*/		return 0x8220963C;
		  /* 8220963Ch */ case   15:  		/* li R10, 3 */
		/* 8220963Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8220963Ch case   15:*/		return 0x82209640;
		  /* 82209640h */ case   16:  		/* b 44 */
		/* 82209640h case   16:*/		return 0x8220966C;
		/* 82209640h case   16:*/		return 0x82209644;
	}
	return 0x82209644;
} // Block from 82209600h-82209644h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82209644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209644);
		  /* 82209644h */ case    0:  		/* lwz R10, <#[R11 + 36]> */
		/* 82209644h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82209644h case    0:*/		return 0x82209648;
		  /* 82209648h */ case    1:  		/* stw R22, <#[R11 + 16]> */
		/* 82209648h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000010) );
		/* 82209648h case    1:*/		return 0x8220964C;
		  /* 8220964Ch */ case    2:  		/* rlwimi R10, R17, 11, 20, 21 */
		/* 8220964Ch case    2:*/		cpu::op::rlwimi<0,11,20,21>(regs,&regs.R10,regs.R17);
		/* 8220964Ch case    2:*/		return 0x82209650;
		  /* 82209650h */ case    3:  		/* stw R10, <#[R11 + 36]> */
		/* 82209650h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82209650h case    3:*/		return 0x82209654;
		  /* 82209654h */ case    4:  		/* b 28 */
		/* 82209654h case    4:*/		return 0x82209670;
		/* 82209654h case    4:*/		return 0x82209658;
	}
	return 0x82209658;
} // Block from 82209644h-82209658h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82209658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209658);
		  /* 82209658h */ case    0:  		/* stw R22, <#[R11 + 16]> */
		/* 82209658h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000010) );
		/* 82209658h case    0:*/		return 0x8220965C;
		  /* 8220965Ch */ case    1:  		/* b 20 */
		/* 8220965Ch case    1:*/		return 0x82209670;
		/* 8220965Ch case    1:*/		return 0x82209660;
	}
	return 0x82209660;
} // Block from 82209658h-82209660h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209660);
		  /* 82209660h */ case    0:  		/* stw R17, <#[R11 + 16]> */
		/* 82209660h case    0:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000010) );
		/* 82209660h case    0:*/		return 0x82209664;
		  /* 82209664h */ case    1:  		/* b 12 */
		/* 82209664h case    1:*/		return 0x82209670;
		/* 82209664h case    1:*/		return 0x82209668;
	}
	return 0x82209668;
} // Block from 82209660h-82209668h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209668);
		  /* 82209668h */ case    0:  		/* li R10, 0 */
		/* 82209668h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82209668h case    0:*/		return 0x8220966C;
	}
	return 0x8220966C;
} // Block from 82209668h-8220966Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220966Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220966C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220966C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220966C);
		  /* 8220966Ch */ case    0:  		/* stw R10, <#[R11 + 16]> */
		/* 8220966Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8220966Ch case    0:*/		return 0x82209670;
	}
	return 0x82209670;
} // Block from 8220966Ch-82209670h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82209670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209670);
		  /* 82209670h */ case    0:  		/* mr R4, R27 */
		/* 82209670h case    0:*/		regs.R4 = regs.R27;
		/* 82209670h case    0:*/		return 0x82209674;
		  /* 82209674h */ case    1:  		/* lhzu R5, <#[R29 + 20]> */
		/* 82209674h case    1:*/		cpu::mem::load16z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		regs.R29 = (uint32)(regs.R29 + 0x00000014);
		/* 82209674h case    1:*/		return 0x82209678;
		  /* 82209678h */ case    2:  		/* mr R3, R31 */
		/* 82209678h case    2:*/		regs.R3 = regs.R31;
		/* 82209678h case    2:*/		return 0x8220967C;
		  /* 8220967Ch */ case    3:  		/* bl -101444 */
		/* 8220967Ch case    3:*/		regs.LR = 0x82209680; return 0x821F0A38;
		/* 8220967Ch case    3:*/		return 0x82209680;
		  /* 82209680h */ case    4:  		/* mr R4, R3 */
		/* 82209680h case    4:*/		regs.R4 = regs.R3;
		/* 82209680h case    4:*/		return 0x82209684;
		  /* 82209684h */ case    5:  		/* mr R6, R23 */
		/* 82209684h case    5:*/		regs.R6 = regs.R23;
		/* 82209684h case    5:*/		return 0x82209688;
		  /* 82209688h */ case    6:  		/* mr R3, R31 */
		/* 82209688h case    6:*/		regs.R3 = regs.R31;
		/* 82209688h case    6:*/		return 0x8220968C;
		  /* 8220968Ch */ case    7:  		/* li R5, 0 */
		/* 8220968Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220968Ch case    7:*/		return 0x82209690;
		  /* 82209690h */ case    8:  		/* bl -116512 */
		/* 82209690h case    8:*/		regs.LR = 0x82209694; return 0x821ECF70;
		/* 82209690h case    8:*/		return 0x82209694;
		  /* 82209694h */ case    9:  		/* addi R25, R25, 1 */
		/* 82209694h case    9:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82209694h case    9:*/		return 0x82209698;
		  /* 82209698h */ case   10:  		/* stw R3, <#[R30 + 64]> */
		/* 82209698h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000040) );
		/* 82209698h case   10:*/		return 0x8220969C;
		  /* 8220969Ch */ case   11:  		/* cmplw CR6, R25, R24 */
		/* 8220969Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R24);
		/* 8220969Ch case   11:*/		return 0x822096A0;
		  /* 822096A0h */ case   12:  		/* bc 12, CR6_LT, -424 */
		/* 822096A0h case   12:*/		if ( regs.CR[6].lt ) { return 0x822094F8;  }
		/* 822096A0h case   12:*/		return 0x822096A4;
	}
	return 0x822096A4;
} // Block from 82209670h-822096A4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822096A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822096A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822096A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822096A4);
		  /* 822096A4h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 822096A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 822096A4h case    0:*/		return 0x822096A8;
		  /* 822096A8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 822096A8h case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 822096A8h case    1:*/		return 0x822096AC;
		  /* 822096ACh */ case    2:  		/* cmplw CR6, R11, R18 */
		/* 822096ACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 822096ACh case    2:*/		return 0x822096B0;
		  /* 822096B0h */ case    3:  		/* lwz R11, <#[R20 + 8]> */
		/* 822096B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 822096B0h case    3:*/		return 0x822096B4;
		  /* 822096B4h */ case    4:  		/* rlwinm R29, R11, 24, 26, 31 */
		/* 822096B4h case    4:*/		cpu::op::rlwinm<0,24,26,31>(regs,&regs.R29,regs.R11);
		/* 822096B4h case    4:*/		return 0x822096B8;
		  /* 822096B8h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 822096B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x822096C0;  }
		/* 822096B8h case    5:*/		return 0x822096BC;
		  /* 822096BCh */ case    6:  		/* rlwinm R29, R11, 0, 26, 31 */
		/* 822096BCh case    6:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R29,regs.R11);
		/* 822096BCh case    6:*/		return 0x822096C0;
	}
	return 0x822096C0;
} // Block from 822096A4h-822096C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822096C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822096C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822096C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822096C0);
		  /* 822096C0h */ case    0:  		/* li R30, 0 */
		/* 822096C0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 822096C0h case    0:*/		return 0x822096C4;
		  /* 822096C4h */ case    1:  		/* mr R10, R21 */
		/* 822096C4h case    1:*/		regs.R10 = regs.R21;
		/* 822096C4h case    1:*/		return 0x822096C8;
		  /* 822096C8h */ case    2:  		/* li R9, 4 */
		/* 822096C8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 822096C8h case    2:*/		return 0x822096CC;
		  /* 822096CCh */ case    3:  		/* li R8, 1 */
		/* 822096CCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822096CCh case    3:*/		return 0x822096D0;
		  /* 822096D0h */ case    4:  		/* li R7, 12 */
		/* 822096D0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 822096D0h case    4:*/		return 0x822096D4;
		  /* 822096D4h */ case    5:  		/* li R6, 1 */
		/* 822096D4h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822096D4h case    5:*/		return 0x822096D8;
		  /* 822096D8h */ case    6:  		/* mr R5, R30 */
		/* 822096D8h case    6:*/		regs.R5 = regs.R30;
		/* 822096D8h case    6:*/		return 0x822096DC;
		  /* 822096DCh */ case    7:  		/* li R4, 0 */
		/* 822096DCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822096DCh case    7:*/		return 0x822096E0;
		  /* 822096E0h */ case    8:  		/* mr R3, R31 */
		/* 822096E0h case    8:*/		regs.R3 = regs.R31;
		/* 822096E0h case    8:*/		return 0x822096E4;
		  /* 822096E4h */ case    9:  		/* bl -100236 */
		/* 822096E4h case    9:*/		regs.LR = 0x822096E8; return 0x821F0F58;
		/* 822096E4h case    9:*/		return 0x822096E8;
		  /* 822096E8h */ case   10:  		/* addi R30, R30, 1 */
		/* 822096E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 822096E8h case   10:*/		return 0x822096EC;
		  /* 822096ECh */ case   11:  		/* cmplw CR6, R30, R29 */
		/* 822096ECh case   11:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 822096ECh case   11:*/		return 0x822096F0;
		  /* 822096F0h */ case   12:  		/* bc 4, CR6_GT, -44 */
		/* 822096F0h case   12:*/		if ( !regs.CR[6].gt ) { return 0x822096C4;  }
		/* 822096F0h case   12:*/		return 0x822096F4;
		  /* 822096F4h */ case   13:  		/* mr R10, R21 */
		/* 822096F4h case   13:*/		regs.R10 = regs.R21;
		/* 822096F4h case   13:*/		return 0x822096F8;
		  /* 822096F8h */ case   14:  		/* li R9, 1 */
		/* 822096F8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 822096F8h case   14:*/		return 0x822096FC;
		  /* 822096FCh */ case   15:  		/* li R8, 1 */
		/* 822096FCh case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822096FCh case   15:*/		return 0x82209700;
		  /* 82209700h */ case   16:  		/* li R7, 12 */
		/* 82209700h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 82209700h case   16:*/		return 0x82209704;
		  /* 82209704h */ case   17:  		/* li R6, 1 */
		/* 82209704h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82209704h case   17:*/		return 0x82209708;
		  /* 82209708h */ case   18:  		/* li R5, 723 */
		/* 82209708h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x2D3);
		/* 82209708h case   18:*/		return 0x8220970C;
		  /* 8220970Ch */ case   19:  		/* li R4, 0 */
		/* 8220970Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220970Ch case   19:*/		return 0x82209710;
		  /* 82209710h */ case   20:  		/* mr R3, R31 */
		/* 82209710h case   20:*/		regs.R3 = regs.R31;
		/* 82209710h case   20:*/		return 0x82209714;
		  /* 82209714h */ case   21:  		/* bl -100284 */
		/* 82209714h case   21:*/		regs.LR = 0x82209718; return 0x821F0F58;
		/* 82209714h case   21:*/		return 0x82209718;
		  /* 82209718h */ case   22:  		/* lwz R11, <#[R31 + 48]> */
		/* 82209718h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82209718h case   22:*/		return 0x8220971C;
		  /* 8220971Ch */ case   23:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8220971Ch case   23:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8220971Ch case   23:*/		return 0x82209720;
		  /* 82209720h */ case   24:  		/* cmplw CR6, R11, R18 */
		/* 82209720h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 82209720h case   24:*/		return 0x82209724;
		  /* 82209724h */ case   25:  		/* bc 4, CR6_EQ, 88 */
		/* 82209724h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8220977C;  }
		/* 82209724h case   25:*/		return 0x82209728;
		  /* 82209728h */ case   26:  		/* lwz R10, <#[R20 + 20]> */
		/* 82209728h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000014) );
		/* 82209728h case   26:*/		return 0x8220972C;
		  /* 8220972Ch */ case   27:  		/* addi R11, R20, 32 */
		/* 8220972Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0x20);
		/* 8220972Ch case   27:*/		return 0x82209730;
		  /* 82209730h */ case   28:  		/* li R30, 0 */
		/* 82209730h case   28:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82209730h case   28:*/		return 0x82209734;
		  /* 82209734h */ case   29:  		/* rlwinm. R28, R10, 27, 27, 31 */
		/* 82209734h case   29:*/		cpu::op::rlwinm<1,27,27,31>(regs,&regs.R28,regs.R10);
		/* 82209734h case   29:*/		return 0x82209738;
		  /* 82209738h */ case   30:  		/* bc 12, CR0_EQ, 68 */
		/* 82209738h case   30:*/		if ( regs.CR[0].eq ) { return 0x8220977C;  }
		/* 82209738h case   30:*/		return 0x8220973C;
		  /* 8220973Ch */ case   31:  		/* addi R29, R11, -4 */
		/* 8220973Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 8220973Ch case   31:*/		return 0x82209740;
		  /* 82209740h */ case   32:  		/* lis R11, -32252 */
		/* 82209740h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209740h case   32:*/		return 0x82209744;
		  /* 82209744h */ case   33:  		/* addi R26, R19, 44 */
		/* 82209744h case   33:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R19,0x2C);
		/* 82209744h case   33:*/		return 0x82209748;
		  /* 82209748h */ case   34:  		/* addi R27, R11, -12752 */
		/* 82209748h case   34:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFCE30);
		/* 82209748h case   34:*/		return 0x8220974C;
		  /* 8220974Ch */ case   35:  		/* lwzu R11, <#[R29 + 4]> */
		/* 8220974Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8220974Ch case   35:*/		return 0x82209750;
		  /* 82209750h */ case   36:  		/* mr R4, R27 */
		/* 82209750h case   36:*/		regs.R4 = regs.R27;
		/* 82209750h case   36:*/		return 0x82209754;
		  /* 82209754h */ case   37:  		/* mr R9, R21 */
		/* 82209754h case   37:*/		regs.R9 = regs.R21;
		/* 82209754h case   37:*/		return 0x82209758;
		  /* 82209758h */ case   38:  		/* mr R8, R26 */
		/* 82209758h case   38:*/		regs.R8 = regs.R26;
		/* 82209758h case   38:*/		return 0x8220975C;
		  /* 8220975Ch */ case   39:  		/* rlwinm R7, R11, 0, 24, 31 */
		/* 8220975Ch case   39:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R11);
		/* 8220975Ch case   39:*/		return 0x82209760;
		  /* 82209760h */ case   40:  		/* rlwinm R6, R11, 20, 28, 31 */
		/* 82209760h case   40:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R6,regs.R11);
		/* 82209760h case   40:*/		return 0x82209764;
		  /* 82209764h */ case   41:  		/* mr R5, R30 */
		/* 82209764h case   41:*/		regs.R5 = regs.R30;
		/* 82209764h case   41:*/		return 0x82209768;
		  /* 82209768h */ case   42:  		/* mr R3, R31 */
		/* 82209768h case   42:*/		regs.R3 = regs.R31;
		/* 82209768h case   42:*/		return 0x8220976C;
		  /* 8220976Ch */ case   43:  		/* bl -99932 */
		/* 8220976Ch case   43:*/		regs.LR = 0x82209770; return 0x821F1110;
		/* 8220976Ch case   43:*/		return 0x82209770;
		  /* 82209770h */ case   44:  		/* addi R30, R30, 1 */
		/* 82209770h case   44:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82209770h case   44:*/		return 0x82209774;
		  /* 82209774h */ case   45:  		/* cmplw CR6, R30, R28 */
		/* 82209774h case   45:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82209774h case   45:*/		return 0x82209778;
		  /* 82209778h */ case   46:  		/* bc 12, CR6_LT, -44 */
		/* 82209778h case   46:*/		if ( regs.CR[6].lt ) { return 0x8220974C;  }
		/* 82209778h case   46:*/		return 0x8220977C;
	}
	return 0x8220977C;
} // Block from 822096C0h-8220977Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 8220977Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220977C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220977C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220977C);
		  /* 8220977Ch */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 8220977Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8220977Ch case    0:*/		return 0x82209780;
		  /* 82209780h */ case    1:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82209780h case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82209780h case    1:*/		return 0x82209784;
		  /* 82209784h */ case    2:  		/* cmplw CR6, R11, R18 */
		/* 82209784h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 82209784h case    2:*/		return 0x82209788;
		  /* 82209788h */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 82209788h case    3:*/		if ( regs.CR[6].eq ) { return 0x822097E0;  }
		/* 82209788h case    3:*/		return 0x8220978C;
		  /* 8220978Ch */ case    4:  		/* lwz R28, <#[R20 + 24]> */
		/* 8220978Ch case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R20 + 0x00000018) );
		/* 8220978Ch case    4:*/		return 0x82209790;
		  /* 82209790h */ case    5:  		/* addi R11, R20, 36 */
		/* 82209790h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0x24);
		/* 82209790h case    5:*/		return 0x82209794;
		  /* 82209794h */ case    6:  		/* li R30, 0 */
		/* 82209794h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82209794h case    6:*/		return 0x82209798;
		  /* 82209798h */ case    7:  		/* cmplwi CR6, R28, 0 */
		/* 82209798h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82209798h case    7:*/		return 0x8220979C;
		  /* 8220979Ch */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 8220979Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x822097E0;  }
		/* 8220979Ch case    8:*/		return 0x822097A0;
		  /* 822097A0h */ case    9:  		/* addi R29, R11, -4 */
		/* 822097A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 822097A0h case    9:*/		return 0x822097A4;
		  /* 822097A4h */ case   10:  		/* lis R11, -32252 */
		/* 822097A4h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822097A4h case   10:*/		return 0x822097A8;
		  /* 822097A8h */ case   11:  		/* addi R26, R19, 44 */
		/* 822097A8h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R19,0x2C);
		/* 822097A8h case   11:*/		return 0x822097AC;
		  /* 822097ACh */ case   12:  		/* addi R27, R11, -12776 */
		/* 822097ACh case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFCE18);
		/* 822097ACh case   12:*/		return 0x822097B0;
		  /* 822097B0h */ case   13:  		/* lwzu R11, <#[R29 + 4]> */
		/* 822097B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 822097B0h case   13:*/		return 0x822097B4;
		  /* 822097B4h */ case   14:  		/* mr R4, R27 */
		/* 822097B4h case   14:*/		regs.R4 = regs.R27;
		/* 822097B4h case   14:*/		return 0x822097B8;
		  /* 822097B8h */ case   15:  		/* mr R9, R21 */
		/* 822097B8h case   15:*/		regs.R9 = regs.R21;
		/* 822097B8h case   15:*/		return 0x822097BC;
		  /* 822097BCh */ case   16:  		/* mr R8, R26 */
		/* 822097BCh case   16:*/		regs.R8 = regs.R26;
		/* 822097BCh case   16:*/		return 0x822097C0;
		  /* 822097C0h */ case   17:  		/* rlwinm R7, R11, 0, 24, 31 */
		/* 822097C0h case   17:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R11);
		/* 822097C0h case   17:*/		return 0x822097C4;
		  /* 822097C4h */ case   18:  		/* rlwinm R6, R11, 23, 28, 31 */
		/* 822097C4h case   18:*/		cpu::op::rlwinm<0,23,28,31>(regs,&regs.R6,regs.R11);
		/* 822097C4h case   18:*/		return 0x822097C8;
		  /* 822097C8h */ case   19:  		/* mr R5, R30 */
		/* 822097C8h case   19:*/		regs.R5 = regs.R30;
		/* 822097C8h case   19:*/		return 0x822097CC;
		  /* 822097CCh */ case   20:  		/* mr R3, R31 */
		/* 822097CCh case   20:*/		regs.R3 = regs.R31;
		/* 822097CCh case   20:*/		return 0x822097D0;
		  /* 822097D0h */ case   21:  		/* bl -100032 */
		/* 822097D0h case   21:*/		regs.LR = 0x822097D4; return 0x821F1110;
		/* 822097D0h case   21:*/		return 0x822097D4;
		  /* 822097D4h */ case   22:  		/* addi R30, R30, 1 */
		/* 822097D4h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 822097D4h case   22:*/		return 0x822097D8;
		  /* 822097D8h */ case   23:  		/* cmplw CR6, R30, R28 */
		/* 822097D8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 822097D8h case   23:*/		return 0x822097DC;
		  /* 822097DCh */ case   24:  		/* bc 12, CR6_LT, -44 */
		/* 822097DCh case   24:*/		if ( regs.CR[6].lt ) { return 0x822097B0;  }
		/* 822097DCh case   24:*/		return 0x822097E0;
	}
	return 0x822097E0;
} // Block from 8220977Ch-822097E0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 822097E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822097E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822097E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822097E0);
		  /* 822097E0h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 822097E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 822097E0h case    0:*/		return 0x822097E4;
		  /* 822097E4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 822097E4h case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 822097E4h case    1:*/		return 0x822097E8;
		  /* 822097E8h */ case    2:  		/* cmplw CR6, R11, R18 */
		/* 822097E8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 822097E8h case    2:*/		return 0x822097EC;
		  /* 822097ECh */ case    3:  		/* bc 12, CR6_EQ, 108 */
		/* 822097ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x82209858;  }
		/* 822097ECh case    3:*/		return 0x822097F0;
		  /* 822097F0h */ case    4:  		/* lwz R10, <#[R20 + 28]> */
		/* 822097F0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000001C) );
		/* 822097F0h case    4:*/		return 0x822097F4;
		  /* 822097F4h */ case    5:  		/* li R30, 0 */
		/* 822097F4h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 822097F4h case    5:*/		return 0x822097F8;
		  /* 822097F8h */ case    6:  		/* lwz R11, <#[R20 + 24]> */
		/* 822097F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000018) );
		/* 822097F8h case    6:*/		return 0x822097FC;
		  /* 822097FCh */ case    7:  		/* lwz R9, <#[R20 + 20]> */
		/* 822097FCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000014) );
		/* 822097FCh case    7:*/		return 0x82209800;
		  /* 82209800h */ case    8:  		/* add R11, R10, R11 */
		/* 82209800h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82209800h case    8:*/		return 0x82209804;
		  /* 82209804h */ case    9:  		/* rlwinm. R29, R9, 27, 27, 31 */
		/* 82209804h case    9:*/		cpu::op::rlwinm<1,27,27,31>(regs,&regs.R29,regs.R9);
		/* 82209804h case    9:*/		return 0x82209808;
		  /* 82209808h */ case   10:  		/* addi R11, R11, 9 */
		/* 82209808h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x9);
		/* 82209808h case   10:*/		return 0x8220980C;
		  /* 8220980Ch */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220980Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220980Ch case   11:*/		return 0x82209810;
		  /* 82209810h */ case   12:  		/* add R11, R11, R20 */
		/* 82209810h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R20);
		/* 82209810h case   12:*/		return 0x82209814;
		  /* 82209814h */ case   13:  		/* bc 12, CR0_EQ, 68 */
		/* 82209814h case   13:*/		if ( regs.CR[0].eq ) { return 0x82209858;  }
		/* 82209814h case   13:*/		return 0x82209818;
		  /* 82209818h */ case   14:  		/* addi R28, R11, -4 */
		/* 82209818h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 82209818h case   14:*/		return 0x8220981C;
		  /* 8220981Ch */ case   15:  		/* lis R11, -32252 */
		/* 8220981Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220981Ch case   15:*/		return 0x82209820;
		  /* 82209820h */ case   16:  		/* addi R26, R19, 44 */
		/* 82209820h case   16:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R19,0x2C);
		/* 82209820h case   16:*/		return 0x82209824;
		  /* 82209824h */ case   17:  		/* addi R27, R11, -12812 */
		/* 82209824h case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFCDF4);
		/* 82209824h case   17:*/		return 0x82209828;
		  /* 82209828h */ case   18:  		/* lwzu R11, <#[R28 + 4]> */
		/* 82209828h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 82209828h case   18:*/		return 0x8220982C;
		  /* 8220982Ch */ case   19:  		/* mr R4, R27 */
		/* 8220982Ch case   19:*/		regs.R4 = regs.R27;
		/* 8220982Ch case   19:*/		return 0x82209830;
		  /* 82209830h */ case   20:  		/* mr R9, R26 */
		/* 82209830h case   20:*/		regs.R9 = regs.R26;
		/* 82209830h case   20:*/		return 0x82209834;
		  /* 82209834h */ case   21:  		/* rlwinm R8, R11, 0, 28, 31 */
		/* 82209834h case   21:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R11);
		/* 82209834h case   21:*/		return 0x82209838;
		  /* 82209838h */ case   22:  		/* rlwinm R7, R11, 28, 28, 31 */
		/* 82209838h case   22:*/		cpu::op::rlwinm<0,28,28,31>(regs,&regs.R7,regs.R11);
		/* 82209838h case   22:*/		return 0x8220983C;
		  /* 8220983Ch */ case   23:  		/* rlwinm R6, R11, 20, 28, 31 */
		/* 8220983Ch case   23:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R6,regs.R11);
		/* 8220983Ch case   23:*/		return 0x82209840;
		  /* 82209840h */ case   24:  		/* mr R5, R30 */
		/* 82209840h case   24:*/		regs.R5 = regs.R30;
		/* 82209840h case   24:*/		return 0x82209844;
		  /* 82209844h */ case   25:  		/* mr R3, R31 */
		/* 82209844h case   25:*/		regs.R3 = regs.R31;
		/* 82209844h case   25:*/		return 0x82209848;
		  /* 82209848h */ case   26:  		/* bl -99896 */
		/* 82209848h case   26:*/		regs.LR = 0x8220984C; return 0x821F1210;
		/* 82209848h case   26:*/		return 0x8220984C;
		  /* 8220984Ch */ case   27:  		/* addi R30, R30, 1 */
		/* 8220984Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8220984Ch case   27:*/		return 0x82209850;
		  /* 82209850h */ case   28:  		/* cmplw CR6, R30, R29 */
		/* 82209850h case   28:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 82209850h case   28:*/		return 0x82209854;
		  /* 82209854h */ case   29:  		/* bc 12, CR6_LT, -44 */
		/* 82209854h case   29:*/		if ( regs.CR[6].lt ) { return 0x82209828;  }
		/* 82209854h case   29:*/		return 0x82209858;
	}
	return 0x82209858;
} // Block from 822097E0h-82209858h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82209858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209858);
		  /* 82209858h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82209858h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82209858h case    0:*/		return 0x8220985C;
		  /* 8220985Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8220985Ch case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8220985Ch case    1:*/		return 0x82209860;
		  /* 82209860h */ case    2:  		/* cmplw CR6, R11, R18 */
		/* 82209860h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 82209860h case    2:*/		return 0x82209864;
		  /* 82209864h */ case    3:  		/* bc 4, CR6_EQ, 160 */
		/* 82209864h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82209904;  }
		/* 82209864h case    3:*/		return 0x82209868;
		  /* 82209868h */ case    4:  		/* lwz R11, <#[R20 + 28]> */
		/* 82209868h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 82209868h case    4:*/		return 0x8220986C;
		  /* 8220986Ch */ case    5:  		/* rlwinm R30, R11, 0, 28, 31 */
		/* 8220986Ch case    5:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R30,regs.R11);
		/* 8220986Ch case    5:*/		return 0x82209870;
		  /* 82209870h */ case    6:  		/* lis R11, -32252 */
		/* 82209870h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209870h case    6:*/		return 0x82209874;
		  /* 82209874h */ case    7:  		/* addi R29, R11, -12840 */
		/* 82209874h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFCDD8);
		/* 82209874h case    7:*/		return 0x82209878;
		  /* 82209878h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 82209878h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82209878h case    8:*/		return 0x8220987C;
		  /* 8220987Ch */ case    9:  		/* bc 12, CR6_EQ, 100 */
		/* 8220987Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x822098E0;  }
		/* 8220987Ch case    9:*/		return 0x82209880;
		  /* 82209880h */ case   10:  		/* addi R11, R30, -1 */
		/* 82209880h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 82209880h case   10:*/		return 0x82209884;
		  /* 82209884h */ case   11:  		/* mr R4, R29 */
		/* 82209884h case   11:*/		regs.R4 = regs.R29;
		/* 82209884h case   11:*/		return 0x82209888;
		  /* 82209888h */ case   12:  		/* andc R11, R30, R11 */
		/* 82209888h case   12:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 82209888h case   12:*/		return 0x8220988C;
		  /* 8220988Ch */ case   13:  		/* addi R9, R19, 44 */
		/* 8220988Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R19,0x2C);
		/* 8220988Ch case   13:*/		return 0x82209890;
		  /* 82209890h */ case   14:  		/* cntlzw R11, R11 */
		/* 82209890h case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82209890h case   14:*/		return 0x82209894;
		  /* 82209894h */ case   15:  		/* li R7, 10 */
		/* 82209894h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xA);
		/* 82209894h case   15:*/		return 0x82209898;
		  /* 82209898h */ case   16:  		/* subfic R8, R11, 31 */
		/* 82209898h case   16:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R11,0x1F);
		/* 82209898h case   16:*/		return 0x8220989C;
		  /* 8220989Ch */ case   17:  		/* li R6, 15 */
		/* 8220989Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 8220989Ch case   17:*/		return 0x822098A0;
		  /* 822098A0h */ case   18:  		/* mr R3, R31 */
		/* 822098A0h case   18:*/		regs.R3 = regs.R31;
		/* 822098A0h case   18:*/		return 0x822098A4;
		  /* 822098A4h */ case   19:  		/* mr R5, R8 */
		/* 822098A4h case   19:*/		regs.R5 = regs.R8;
		/* 822098A4h case   19:*/		return 0x822098A8;
		  /* 822098A8h */ case   20:  		/* bl -99992 */
		/* 822098A8h case   20:*/		regs.LR = 0x822098AC; return 0x821F1210;
		/* 822098A8h case   20:*/		return 0x822098AC;
		  /* 822098ACh */ case   21:  		/* addi R11, R30, -1 */
		/* 822098ACh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 822098ACh case   21:*/		return 0x822098B0;
		  /* 822098B0h */ case   22:  		/* andc R11, R30, R11 */
		/* 822098B0h case   22:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 822098B0h case   22:*/		return 0x822098B4;
		  /* 822098B4h */ case   23:  		/* subf R30, R11, R30 */
		/* 822098B4h case   23:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 822098B4h case   23:*/		return 0x822098B8;
		  /* 822098B8h */ case   24:  		/* b -64 */
		/* 822098B8h case   24:*/		return 0x82209878;
		/* 822098B8h case   24:*/		return 0x822098BC;
	}
	return 0x822098BC;
} // Block from 82209858h-822098BCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 822098BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822098BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822098BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822098BC);
		  /* 822098BCh */ case    0:  		/* li R4, 4801 */
		/* 822098BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822098BCh case    0:*/		return 0x822098C0;
		  /* 822098C0h */ case    1:  		/* mr R3, R31 */
		/* 822098C0h case    1:*/		regs.R3 = regs.R31;
		/* 822098C0h case    1:*/		return 0x822098C4;
		  /* 822098C4h */ case    2:  		/* bl -752220 */
		/* 822098C4h case    2:*/		regs.LR = 0x822098C8; return 0x82151E68;
		/* 822098C4h case    2:*/		return 0x822098C8;
	}
	return 0x822098C8;
} // Block from 822098BCh-822098C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822098C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822098C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822098C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822098C8);
		  /* 822098C8h */ case    0:  		/* li R4, 4801 */
		/* 822098C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822098C8h case    0:*/		return 0x822098CC;
		  /* 822098CCh */ case    1:  		/* mr R3, R31 */
		/* 822098CCh case    1:*/		regs.R3 = regs.R31;
		/* 822098CCh case    1:*/		return 0x822098D0;
		  /* 822098D0h */ case    2:  		/* bl -752232 */
		/* 822098D0h case    2:*/		regs.LR = 0x822098D4; return 0x82151E68;
		/* 822098D0h case    2:*/		return 0x822098D4;
	}
	return 0x822098D4;
} // Block from 822098C8h-822098D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822098D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822098D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822098D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822098D4);
		  /* 822098D4h */ case    0:  		/* li R4, 4801 */
		/* 822098D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 822098D4h case    0:*/		return 0x822098D8;
		  /* 822098D8h */ case    1:  		/* mr R3, R31 */
		/* 822098D8h case    1:*/		regs.R3 = regs.R31;
		/* 822098D8h case    1:*/		return 0x822098DC;
		  /* 822098DCh */ case    2:  		/* bl -752244 */
		/* 822098DCh case    2:*/		regs.LR = 0x822098E0; return 0x82151E68;
		/* 822098DCh case    2:*/		return 0x822098E0;
	}
	return 0x822098E0;
} // Block from 822098D4h-822098E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822098E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822098E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822098E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822098E0);
		  /* 822098E0h */ case    0:  		/* lwz R11, <#[R20 + 28]> */
		/* 822098E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 822098E0h case    0:*/		return 0x822098E4;
		  /* 822098E4h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 822098E4h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 822098E4h case    1:*/		return 0x822098E8;
		  /* 822098E8h */ case    2:  		/* bc 12, CR0_EQ, 64 */
		/* 822098E8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82209928;  }
		/* 822098E8h case    2:*/		return 0x822098EC;
		  /* 822098ECh */ case    3:  		/* lis R11, -32252 */
		/* 822098ECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822098ECh case    3:*/		return 0x822098F0;
		  /* 822098F0h */ case    4:  		/* li R7, 12 */
		/* 822098F0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 822098F0h case    4:*/		return 0x822098F4;
		  /* 822098F4h */ case    5:  		/* addi R4, R11, -12868 */
		/* 822098F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFCDBC);
		/* 822098F4h case    5:*/		return 0x822098F8;
		  /* 822098F8h */ case    6:  		/* li R6, 1 */
		/* 822098F8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822098F8h case    6:*/		return 0x822098FC;
		  /* 822098FCh */ case    7:  		/* li R5, 61 */
		/* 822098FCh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x3D);
		/* 822098FCh case    7:*/		return 0x82209900;
		  /* 82209900h */ case    8:  		/* b 24 */
		/* 82209900h case    8:*/		return 0x82209918;
		/* 82209900h case    8:*/		return 0x82209904;
	}
	return 0x82209904;
} // Block from 822098E0h-82209904h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82209904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209904);
		  /* 82209904h */ case    0:  		/* lis R11, -32252 */
		/* 82209904h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209904h case    0:*/		return 0x82209908;
		  /* 82209908h */ case    1:  		/* li R7, 0 */
		/* 82209908h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82209908h case    1:*/		return 0x8220990C;
		  /* 8220990Ch */ case    2:  		/* addi R4, R11, -12892 */
		/* 8220990Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFCDA4);
		/* 8220990Ch case    2:*/		return 0x82209910;
		  /* 82209910h */ case    3:  		/* li R6, 15 */
		/* 82209910h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 82209910h case    3:*/		return 0x82209914;
		  /* 82209914h */ case    4:  		/* li R5, 62 */
		/* 82209914h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x3E);
		/* 82209914h case    4:*/		return 0x82209918;
	}
	return 0x82209918;
} // Block from 82209904h-82209918h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82209918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209918);
		  /* 82209918h */ case    0:  		/* addi R9, R19, 44 */
		/* 82209918h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R19,0x2C);
		/* 82209918h case    0:*/		return 0x8220991C;
		  /* 8220991Ch */ case    1:  		/* li R8, 0 */
		/* 8220991Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8220991Ch case    1:*/		return 0x82209920;
		  /* 82209920h */ case    2:  		/* mr R3, R31 */
		/* 82209920h case    2:*/		regs.R3 = regs.R31;
		/* 82209920h case    2:*/		return 0x82209924;
		  /* 82209924h */ case    3:  		/* bl -100116 */
		/* 82209924h case    3:*/		regs.LR = 0x82209928; return 0x821F1210;
		/* 82209924h case    3:*/		return 0x82209928;
	}
	return 0x82209928;
} // Block from 82209918h-82209928h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209928);
		  /* 82209928h */ case    0:  		/* mr R5, R19 */
		/* 82209928h case    0:*/		regs.R5 = regs.R19;
		/* 82209928h case    0:*/		return 0x8220992C;
		  /* 8220992Ch */ case    1:  		/* lwz R4, <#[R31 + 8]> */
		/* 8220992Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8220992Ch case    1:*/		return 0x82209930;
		  /* 82209930h */ case    2:  		/* mr R3, R31 */
		/* 82209930h case    2:*/		regs.R3 = regs.R31;
		/* 82209930h case    2:*/		return 0x82209934;
		  /* 82209934h */ case    3:  		/* bl -4748 */
		/* 82209934h case    3:*/		regs.LR = 0x82209938; return 0x822086A8;
		/* 82209934h case    3:*/		return 0x82209938;
		  /* 82209938h */ case    4:  		/* mr R4, R3 */
		/* 82209938h case    4:*/		regs.R4 = regs.R3;
		/* 82209938h case    4:*/		return 0x8220993C;
		  /* 8220993Ch */ case    5:  		/* li R5, 0 */
		/* 8220993Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220993Ch case    5:*/		return 0x82209940;
		  /* 82209940h */ case    6:  		/* mr R3, R31 */
		/* 82209940h case    6:*/		regs.R3 = regs.R31;
		/* 82209940h case    6:*/		return 0x82209944;
		  /* 82209944h */ case    7:  		/* bl -17876 */
		/* 82209944h case    7:*/		regs.LR = 0x82209948; return 0x82205370;
		/* 82209944h case    7:*/		return 0x82209948;
		  /* 82209948h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 82209948h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82209948h case    8:*/		return 0x8220994C;
		  /* 8220994Ch */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8220994Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8220994Ch case    9:*/		return 0x82209950;
		  /* 82209950h */ case   10:  		/* bc 4, CR0_EQ, 364 */
		/* 82209950h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82209ABC;  }
		/* 82209950h case   10:*/		return 0x82209954;
		  /* 82209954h */ case   11:  		/* mr R28, R11 */
		/* 82209954h case   11:*/		regs.R28 = regs.R11;
		/* 82209954h case   11:*/		return 0x82209958;
		  /* 82209958h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 82209958h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82209958h case   12:*/		return 0x8220995C;
		  /* 8220995Ch */ case   13:  		/* bc 12, CR0_EQ, 352 */
		/* 8220995Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x82209ABC;  }
		/* 8220995Ch case   13:*/		return 0x82209960;
		  /* 82209960h */ case   14:  		/* lwz R11, <#[R28 + 36]> */
		/* 82209960h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 82209960h case   14:*/		return 0x82209964;
		  /* 82209964h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82209964h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82209964h case   15:*/		return 0x82209968;
		  /* 82209968h */ case   16:  		/* bc 4, CR0_EQ, 312 */
		/* 82209968h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82209AA0;  }
		/* 82209968h case   16:*/		return 0x8220996C;
		  /* 8220996Ch */ case   17:  		/* lwz R11, <#[R28 + 32]> */
		/* 8220996Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8220996Ch case   17:*/		return 0x82209970;
		  /* 82209970h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82209970h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82209970h case   18:*/		return 0x82209974;
		  /* 82209974h */ case   19:  		/* addic. R30, R11, -40 */
		/* 82209974h case   19:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 82209974h case   19:*/		return 0x82209978;
		  /* 82209978h */ case   20:  		/* bc 12, CR0_EQ, 296 */
		/* 82209978h case   20:*/		if ( regs.CR[0].eq ) { return 0x82209AA0;  }
		/* 82209978h case   20:*/		return 0x8220997C;
		  /* 8220997Ch */ case   21:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220997Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220997Ch case   21:*/		return 0x82209980;
		  /* 82209980h */ case   22:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82209980h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82209980h case   22:*/		return 0x82209984;
		  /* 82209984h */ case   23:  		/* cmplwi CR6, R11, 86 */
		/* 82209984h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 82209984h case   23:*/		return 0x82209988;
		  /* 82209988h */ case   24:  		/* bc 12, CR6_EQ, 48 */
		/* 82209988h case   24:*/		if ( regs.CR[6].eq ) { return 0x822099B8;  }
		/* 82209988h case   24:*/		return 0x8220998C;
		  /* 8220998Ch */ case   25:  		/* cmplwi CR6, R11, 87 */
		/* 8220998Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8220998Ch case   25:*/		return 0x82209990;
		  /* 82209990h */ case   26:  		/* bc 12, CR6_EQ, 40 */
		/* 82209990h case   26:*/		if ( regs.CR[6].eq ) { return 0x822099B8;  }
		/* 82209990h case   26:*/		return 0x82209994;
		  /* 82209994h */ case   27:  		/* cmplwi CR6, R11, 89 */
		/* 82209994h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 82209994h case   27:*/		return 0x82209998;
		  /* 82209998h */ case   28:  		/* bc 12, CR6_EQ, 32 */
		/* 82209998h case   28:*/		if ( regs.CR[6].eq ) { return 0x822099B8;  }
		/* 82209998h case   28:*/		return 0x8220999C;
		  /* 8220999Ch */ case   29:  		/* cmplwi CR6, R11, 90 */
		/* 8220999Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8220999Ch case   29:*/		return 0x822099A0;
		  /* 822099A0h */ case   30:  		/* bc 12, CR6_EQ, 24 */
		/* 822099A0h case   30:*/		if ( regs.CR[6].eq ) { return 0x822099B8;  }
		/* 822099A0h case   30:*/		return 0x822099A4;
		  /* 822099A4h */ case   31:  		/* cmplwi CR6, R11, 84 */
		/* 822099A4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 822099A4h case   31:*/		return 0x822099A8;
		  /* 822099A8h */ case   32:  		/* bc 12, CR6_EQ, 16 */
		/* 822099A8h case   32:*/		if ( regs.CR[6].eq ) { return 0x822099B8;  }
		/* 822099A8h case   32:*/		return 0x822099AC;
		  /* 822099ACh */ case   33:  		/* cmplwi CR6, R11, 85 */
		/* 822099ACh case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 822099ACh case   33:*/		return 0x822099B0;
		  /* 822099B0h */ case   34:  		/* li R11, 0 */
		/* 822099B0h case   34:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822099B0h case   34:*/		return 0x822099B4;
		  /* 822099B4h */ case   35:  		/* bc 4, CR6_EQ, 8 */
		/* 822099B4h case   35:*/		if ( !regs.CR[6].eq ) { return 0x822099BC;  }
		/* 822099B4h case   35:*/		return 0x822099B8;
	}
	return 0x822099B8;
} // Block from 82209928h-822099B8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 822099B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822099B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822099B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822099B8);
		  /* 822099B8h */ case    0:  		/* mr R11, R17 */
		/* 822099B8h case    0:*/		regs.R11 = regs.R17;
		/* 822099B8h case    0:*/		return 0x822099BC;
	}
	return 0x822099BC;
} // Block from 822099B8h-822099BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822099BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822099BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822099BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822099BC);
		  /* 822099BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 822099BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 822099BCh case    0:*/		return 0x822099C0;
		  /* 822099C0h */ case    1:  		/* bc 12, CR0_EQ, 224 */
		/* 822099C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82209AA0;  }
		/* 822099C0h case    1:*/		return 0x822099C4;
		  /* 822099C4h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 822099C4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 822099C4h case    2:*/		return 0x822099C8;
		  /* 822099C8h */ case    3:  		/* mr R3, R31 */
		/* 822099C8h case    3:*/		regs.R3 = regs.R31;
		/* 822099C8h case    3:*/		return 0x822099CC;
		  /* 822099CCh */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 822099CCh case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 822099CCh case    4:*/		return 0x822099D0;
		  /* 822099D0h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 822099D0h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 822099D0h case    5:*/		return 0x822099D4;
		  /* 822099D4h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 822099D4h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 822099D4h case    6:*/		return 0x822099D8;
		  /* 822099D8h */ case    7:  		/* bl -677288 */
		/* 822099D8h case    7:*/		regs.LR = 0x822099DC; return 0x82164430;
		/* 822099D8h case    7:*/		return 0x822099DC;
		  /* 822099DCh */ case    8:  		/* addi R10, R30, -16 */
		/* 822099DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF0);
		/* 822099DCh case    8:*/		return 0x822099E0;
		  /* 822099E0h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 822099E0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 822099E0h case    9:*/		return 0x822099E4;
		  /* 822099E4h */ case   10:  		/* add R29, R3, R10 */
		/* 822099E4h case   10:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R10);
		/* 822099E4h case   10:*/		return 0x822099E8;
		  /* 822099E8h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 822099E8h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 822099E8h case   11:*/		return 0x822099EC;
		  /* 822099ECh */ case   12:  		/* lwz R10, <#[R29]> */
		/* 822099ECh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 822099ECh case   12:*/		return 0x822099F0;
		  /* 822099F0h */ case   13:  		/* rlwinm R10, R10, 0, 0, 29 */
		/* 822099F0h case   13:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R10,regs.R10);
		/* 822099F0h case   13:*/		return 0x822099F4;
		  /* 822099F4h */ case   14:  		/* bc 4, CR0_EQ, 312 */
		/* 822099F4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82209B2C;  }
		/* 822099F4h case   14:*/		return 0x822099F8;
		  /* 822099F8h */ case   15:  		/* mr R30, R11 */
		/* 822099F8h case   15:*/		regs.R30 = regs.R11;
		/* 822099F8h case   15:*/		return 0x822099FC;
		  /* 822099FCh */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 822099FCh case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822099FCh case   16:*/		return 0x82209A00;
		  /* 82209A00h */ case   17:  		/* bc 12, CR0_EQ, 300 */
		/* 82209A00h case   17:*/		if ( regs.CR[0].eq ) { return 0x82209B2C;  }
		/* 82209A00h case   17:*/		return 0x82209A04;
		  /* 82209A04h */ case   18:  		/* lwz R11, <#[R30 + 28]> */
		/* 82209A04h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 82209A04h case   18:*/		return 0x82209A08;
		  /* 82209A08h */ case   19:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 82209A08h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 82209A08h case   19:*/		return 0x82209A0C;
		  /* 82209A0Ch */ case   20:  		/* bc 4, CR0_EQ, 40 */
		/* 82209A0Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x82209A34;  }
		/* 82209A0Ch case   20:*/		return 0x82209A10;
		  /* 82209A10h */ case   21:  		/* cmplwi CR0, R11, 0 */
		/* 82209A10h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82209A10h case   21:*/		return 0x82209A14;
		  /* 82209A14h */ case   22:  		/* bc 12, CR0_EQ, 32 */
		/* 82209A14h case   22:*/		if ( regs.CR[0].eq ) { return 0x82209A34;  }
		/* 82209A14h case   22:*/		return 0x82209A18;
		  /* 82209A18h */ case   23:  		/* lwz R9, <#[R11 + 8]> */
		/* 82209A18h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82209A18h case   23:*/		return 0x82209A1C;
		  /* 82209A1Ch */ case   24:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 82209A1Ch case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 82209A1Ch case   24:*/		return 0x82209A20;
		  /* 82209A20h */ case   25:  		/* cmplwi CR6, R9, 16128 */
		/* 82209A20h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003F00);
		/* 82209A20h case   25:*/		return 0x82209A24;
		  /* 82209A24h */ case   26:  		/* bc 4, CR6_EQ, 16 */
		/* 82209A24h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82209A34;  }
		/* 82209A24h case   26:*/		return 0x82209A28;
		  /* 82209A28h */ case   27:  		/* lwz R11, <#[R11 + 16]> */
		/* 82209A28h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82209A28h case   27:*/		return 0x82209A2C;
		  /* 82209A2Ch */ case   28:  		/* cmplw CR6, R10, R11 */
		/* 82209A2Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82209A2Ch case   28:*/		return 0x82209A30;
		  /* 82209A30h */ case   29:  		/* bc 12, CR6_EQ, 32 */
		/* 82209A30h case   29:*/		if ( regs.CR[6].eq ) { return 0x82209A50;  }
		/* 82209A30h case   29:*/		return 0x82209A34;
	}
	return 0x82209A34;
} // Block from 822099BCh-82209A34h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82209A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209A34);
		  /* 82209A34h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 82209A34h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 82209A34h case    0:*/		return 0x82209A38;
		  /* 82209A38h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82209A38h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82209A38h case    1:*/		return 0x82209A3C;
		  /* 82209A3Ch */ case    2:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 82209A3Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 82209A3Ch case    2:*/		return 0x82209A40;
		  /* 82209A40h */ case    3:  		/* bc 4, CR0_EQ, 236 */
		/* 82209A40h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82209B2C;  }
		/* 82209A40h case    3:*/		return 0x82209A44;
		  /* 82209A44h */ case    4:  		/* mr R30, R11 */
		/* 82209A44h case    4:*/		regs.R30 = regs.R11;
		/* 82209A44h case    4:*/		return 0x82209A48;
		  /* 82209A48h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82209A48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82209A48h case    5:*/		return 0x82209A4C;
		  /* 82209A4Ch */ case    6:  		/* bc 4, CR6_EQ, -72 */
		/* 82209A4Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82209A04;  }
		/* 82209A4Ch case    6:*/		return 0x82209A50;
	}
	return 0x82209A50;
} // Block from 82209A34h-82209A50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82209A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209A50);
		  /* 82209A50h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82209A50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82209A50h case    0:*/		return 0x82209A54;
		  /* 82209A54h */ case    1:  		/* bc 12, CR6_EQ, 216 */
		/* 82209A54h case    1:*/		if ( regs.CR[6].eq ) { return 0x82209B2C;  }
		/* 82209A54h case    1:*/		return 0x82209A58;
		  /* 82209A58h */ case    2:  		/* lwz R11, <#[R28 + 12]> */
		/* 82209A58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 82209A58h case    2:*/		return 0x82209A5C;
		  /* 82209A5Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82209A5Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82209A5Ch case    3:*/		return 0x82209A60;
		  /* 82209A60h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 82209A60h case    4:*/		if ( regs.CR[6].eq ) { return 0x82209A80;  }
		/* 82209A60h case    4:*/		return 0x82209A64;
		  /* 82209A64h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82209A64h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82209A64h case    5:*/		return 0x82209A68;
		  /* 82209A68h */ case    6:  		/* cmplw CR6, R30, R10 */
		/* 82209A68h case    6:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 82209A68h case    6:*/		return 0x82209A6C;
		  /* 82209A6Ch */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82209A6Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82209A78;  }
		/* 82209A6Ch case    7:*/		return 0x82209A70;
		  /* 82209A70h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 82209A70h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82209A70h case    8:*/		return 0x82209A74;
		  /* 82209A74h */ case    9:  		/* b -24 */
		/* 82209A74h case    9:*/		return 0x82209A5C;
		/* 82209A74h case    9:*/		return 0x82209A78;
	}
	return 0x82209A78;
} // Block from 82209A50h-82209A78h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82209A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209A78);
		  /* 82209A78h */ case    0:  		/* mr R11, R17 */
		/* 82209A78h case    0:*/		regs.R11 = regs.R17;
		/* 82209A78h case    0:*/		return 0x82209A7C;
		  /* 82209A7Ch */ case    1:  		/* b 8 */
		/* 82209A7Ch case    1:*/		return 0x82209A84;
		/* 82209A7Ch case    1:*/		return 0x82209A80;
	}
	return 0x82209A80;
} // Block from 82209A78h-82209A80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209A80);
		  /* 82209A80h */ case    0:  		/* li R11, 0 */
		/* 82209A80h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82209A80h case    0:*/		return 0x82209A84;
	}
	return 0x82209A84;
} // Block from 82209A80h-82209A84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82209A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209A84);
		  /* 82209A84h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82209A84h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82209A84h case    0:*/		return 0x82209A88;
		  /* 82209A88h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82209A88h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82209A9C;  }
		/* 82209A88h case    1:*/		return 0x82209A8C;
		  /* 82209A8Ch */ case    2:  		/* mr R5, R31 */
		/* 82209A8Ch case    2:*/		regs.R5 = regs.R31;
		/* 82209A8Ch case    2:*/		return 0x82209A90;
		  /* 82209A90h */ case    3:  		/* mr R4, R30 */
		/* 82209A90h case    3:*/		regs.R4 = regs.R30;
		/* 82209A90h case    3:*/		return 0x82209A94;
		  /* 82209A94h */ case    4:  		/* mr R3, R28 */
		/* 82209A94h case    4:*/		regs.R3 = regs.R28;
		/* 82209A94h case    4:*/		return 0x82209A98;
		  /* 82209A98h */ case    5:  		/* bl 155720 */
		/* 82209A98h case    5:*/		regs.LR = 0x82209A9C; return 0x8222FAE0;
		/* 82209A98h case    5:*/		return 0x82209A9C;
	}
	return 0x82209A9C;
} // Block from 82209A84h-82209A9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82209A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209A9C);
		  /* 82209A9Ch */ case    0:  		/* stw R30, <#[R29]> */
		/* 82209A9Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82209A9Ch case    0:*/		return 0x82209AA0;
	}
	return 0x82209AA0;
} // Block from 82209A9Ch-82209AA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82209AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209AA0);
		  /* 82209AA0h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82209AA0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82209AA0h case    0:*/		return 0x82209AA4;
		  /* 82209AA4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82209AA4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82209AA4h case    1:*/		return 0x82209AA8;
		  /* 82209AA8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82209AA8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82209AA8h case    2:*/		return 0x82209AAC;
		  /* 82209AACh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82209AACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82209ABC;  }
		/* 82209AACh case    3:*/		return 0x82209AB0;
		  /* 82209AB0h */ case    4:  		/* mr R28, R11 */
		/* 82209AB0h case    4:*/		regs.R28 = regs.R11;
		/* 82209AB0h case    4:*/		return 0x82209AB4;
		  /* 82209AB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82209AB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82209AB4h case    5:*/		return 0x82209AB8;
		  /* 82209AB8h */ case    6:  		/* bc 4, CR6_EQ, -344 */
		/* 82209AB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82209960;  }
		/* 82209AB8h case    6:*/		return 0x82209ABC;
	}
	return 0x82209ABC;
} // Block from 82209AA0h-82209ABCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82209ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209ABC);
		  /* 82209ABCh */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82209ABCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82209ABCh case    0:*/		return 0x82209AC0;
		  /* 82209AC0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82209AC0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82209AC0h case    1:*/		return 0x82209AC4;
		  /* 82209AC4h */ case    2:  		/* bc 4, CR0_EQ, 96 */
		/* 82209AC4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82209B24;  }
		/* 82209AC4h case    2:*/		return 0x82209AC8;
		  /* 82209AC8h */ case    3:  		/* mr R30, R11 */
		/* 82209AC8h case    3:*/		regs.R30 = regs.R11;
		/* 82209AC8h case    3:*/		return 0x82209ACC;
		  /* 82209ACCh */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82209ACCh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82209ACCh case    4:*/		return 0x82209AD0;
		  /* 82209AD0h */ case    5:  		/* bc 12, CR0_EQ, 84 */
		/* 82209AD0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82209B24;  }
		/* 82209AD0h case    5:*/		return 0x82209AD4;
		  /* 82209AD4h */ case    6:  		/* lwz R4, <#[R30 + 28]> */
		/* 82209AD4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 82209AD4h case    6:*/		return 0x82209AD8;
		  /* 82209AD8h */ case    7:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 82209AD8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 82209AD8h case    7:*/		return 0x82209ADC;
		  /* 82209ADCh */ case    8:  		/* bc 4, CR0_EQ, 44 */
		/* 82209ADCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x82209B08;  }
		/* 82209ADCh case    8:*/		return 0x82209AE0;
		  /* 82209AE0h */ case    9:  		/* cmplwi CR0, R4, 0 */
		/* 82209AE0h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 82209AE0h case    9:*/		return 0x82209AE4;
		  /* 82209AE4h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 82209AE4h case   10:*/		if ( regs.CR[0].eq ) { return 0x82209B08;  }
		/* 82209AE4h case   10:*/		return 0x82209AE8;
		  /* 82209AE8h */ case   11:  		/* lwz R11, <#[R4 + 8]> */
		/* 82209AE8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82209AE8h case   11:*/		return 0x82209AEC;
		  /* 82209AECh */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82209AECh case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82209AECh case   12:*/		return 0x82209AF0;
		  /* 82209AF0h */ case   13:  		/* cmplwi CR6, R11, 16128 */
		/* 82209AF0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003F00);
		/* 82209AF0h case   13:*/		return 0x82209AF4;
		  /* 82209AF4h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 82209AF4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82209B08;  }
		/* 82209AF4h case   14:*/		return 0x82209AF8;
		  /* 82209AF8h */ case   15:  		/* li R6, 1 */
		/* 82209AF8h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82209AF8h case   15:*/		return 0x82209AFC;
		  /* 82209AFCh */ case   16:  		/* li R5, 0 */
		/* 82209AFCh case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82209AFCh case   16:*/		return 0x82209B00;
		  /* 82209B00h */ case   17:  		/* mr R3, R31 */
		/* 82209B00h case   17:*/		regs.R3 = regs.R31;
		/* 82209B00h case   17:*/		return 0x82209B04;
		  /* 82209B04h */ case   18:  		/* bl 137412 */
		/* 82209B04h case   18:*/		regs.LR = 0x82209B08; return 0x8222B3C8;
		/* 82209B04h case   18:*/		return 0x82209B08;
	}
	return 0x82209B08;
} // Block from 82209ABCh-82209B08h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82209B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209B08);
		  /* 82209B08h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 82209B08h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 82209B08h case    0:*/		return 0x82209B0C;
		  /* 82209B0Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82209B0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82209B0Ch case    1:*/		return 0x82209B10;
		  /* 82209B10h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82209B10h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82209B10h case    2:*/		return 0x82209B14;
		  /* 82209B14h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82209B14h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82209B24;  }
		/* 82209B14h case    3:*/		return 0x82209B18;
		  /* 82209B18h */ case    4:  		/* mr R30, R11 */
		/* 82209B18h case    4:*/		regs.R30 = regs.R11;
		/* 82209B18h case    4:*/		return 0x82209B1C;
		  /* 82209B1Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82209B1Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82209B1Ch case    5:*/		return 0x82209B20;
		  /* 82209B20h */ case    6:  		/* bc 4, CR6_EQ, -76 */
		/* 82209B20h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82209AD4;  }
		/* 82209B20h case    6:*/		return 0x82209B24;
	}
	return 0x82209B24;
} // Block from 82209B08h-82209B24h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82209B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209B24);
		  /* 82209B24h */ case    0:  		/* addi R1, R1, 352 */
		/* 82209B24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 82209B24h case    0:*/		return 0x82209B28;
		  /* 82209B28h */ case    1:  		/* b -1542320 */
		/* 82209B28h case    1:*/		return 0x82091278;
		/* 82209B28h case    1:*/		return 0x82209B2C;
	}
	return 0x82209B2C;
} // Block from 82209B24h-82209B2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209B2C);
		  /* 82209B2Ch */ case    0:  		/* li R4, 4801 */
		/* 82209B2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 82209B2Ch case    0:*/		return 0x82209B30;
		  /* 82209B30h */ case    1:  		/* mr R3, R31 */
		/* 82209B30h case    1:*/		regs.R3 = regs.R31;
		/* 82209B30h case    1:*/		return 0x82209B34;
		  /* 82209B34h */ case    2:  		/* bl -752844 */
		/* 82209B34h case    2:*/		regs.LR = 0x82209B38; return 0x82151E68;
		/* 82209B34h case    2:*/		return 0x82209B38;
	}
	return 0x82209B38;
} // Block from 82209B2Ch-82209B38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209B38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209B38);
		  /* 82209B38h */ case    0:  		/* mfspr R12, LR */
		/* 82209B38h case    0:*/		regs.R12 = regs.LR;
		/* 82209B38h case    0:*/		return 0x82209B3C;
		  /* 82209B3Ch */ case    1:  		/* bl -1542384 */
		/* 82209B3Ch case    1:*/		regs.LR = 0x82209B40; return 0x8209124C;
		/* 82209B3Ch case    1:*/		return 0x82209B40;
		  /* 82209B40h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82209B40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82209B40h case    2:*/		return 0x82209B44;
		  /* 82209B44h */ case    3:  		/* lis R11, -32253 */
		/* 82209B44h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82209B44h case    3:*/		return 0x82209B48;
		  /* 82209B48h */ case    4:  		/* lis R10, -32252 */
		/* 82209B48h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82209B48h case    4:*/		return 0x82209B4C;
		  /* 82209B4Ch */ case    5:  		/* mr R28, R3 */
		/* 82209B4Ch case    5:*/		regs.R28 = regs.R3;
		/* 82209B4Ch case    5:*/		return 0x82209B50;
		  /* 82209B50h */ case    6:  		/* mr R31, R4 */
		/* 82209B50h case    6:*/		regs.R31 = regs.R4;
		/* 82209B50h case    6:*/		return 0x82209B54;
		  /* 82209B54h */ case    7:  		/* mr R27, R5 */
		/* 82209B54h case    7:*/		regs.R27 = regs.R5;
		/* 82209B54h case    7:*/		return 0x82209B58;
		  /* 82209B58h */ case    8:  		/* mr R26, R6 */
		/* 82209B58h case    8:*/		regs.R26 = regs.R6;
		/* 82209B58h case    8:*/		return 0x82209B5C;
		  /* 82209B5Ch */ case    9:  		/* mr R25, R7 */
		/* 82209B5Ch case    9:*/		regs.R25 = regs.R7;
		/* 82209B5Ch case    9:*/		return 0x82209B60;
		  /* 82209B60h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 82209B60h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82209B60h case   10:*/		return 0x82209B64;
		  /* 82209B64h */ case   11:  		/* addi R30, R11, 27460 */
		/* 82209B64h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 82209B64h case   11:*/		return 0x82209B68;
		  /* 82209B68h */ case   12:  		/* addi R29, R10, -12608 */
		/* 82209B68h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFCEC0);
		/* 82209B68h case   12:*/		return 0x82209B6C;
		  /* 82209B6Ch */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 82209B6Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82209B8C;  }
		/* 82209B6Ch case   13:*/		return 0x82209B70;
		  /* 82209B70h */ case   14:  		/* lis R11, -32252 */
		/* 82209B70h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209B70h case   14:*/		return 0x82209B74;
		  /* 82209B74h */ case   15:  		/* mr R6, R29 */
		/* 82209B74h case   15:*/		regs.R6 = regs.R29;
		/* 82209B74h case   15:*/		return 0x82209B78;
		  /* 82209B78h */ case   16:  		/* addi R5, R11, -21620 */
		/* 82209B78h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 82209B78h case   16:*/		return 0x82209B7C;
		  /* 82209B7Ch */ case   17:  		/* mr R4, R30 */
		/* 82209B7Ch case   17:*/		regs.R4 = regs.R30;
		/* 82209B7Ch case   17:*/		return 0x82209B80;
		  /* 82209B80h */ case   18:  		/* li R7, 75 */
		/* 82209B80h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x4B);
		/* 82209B80h case   18:*/		return 0x82209B84;
		  /* 82209B84h */ case   19:  		/* li R3, 0 */
		/* 82209B84h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209B84h case   19:*/		return 0x82209B88;
		  /* 82209B88h */ case   20:  		/* bl -728960 */
		/* 82209B88h case   20:*/		regs.LR = 0x82209B8C; return 0x82157C08;
		/* 82209B88h case   20:*/		return 0x82209B8C;
	}
	return 0x82209B8C;
} // Block from 82209B38h-82209B8Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82209B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209B8C);
		  /* 82209B8Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82209B8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82209B8Ch case    0:*/		return 0x82209B90;
		  /* 82209B90h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82209B90h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82209BB0;  }
		/* 82209B90h case    1:*/		return 0x82209B94;
		  /* 82209B94h */ case    2:  		/* lis R11, -32252 */
		/* 82209B94h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209B94h case    2:*/		return 0x82209B98;
		  /* 82209B98h */ case    3:  		/* mr R6, R29 */
		/* 82209B98h case    3:*/		regs.R6 = regs.R29;
		/* 82209B98h case    3:*/		return 0x82209B9C;
		  /* 82209B9Ch */ case    4:  		/* addi R5, R11, -21632 */
		/* 82209B9Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 82209B9Ch case    4:*/		return 0x82209BA0;
		  /* 82209BA0h */ case    5:  		/* mr R4, R30 */
		/* 82209BA0h case    5:*/		regs.R4 = regs.R30;
		/* 82209BA0h case    5:*/		return 0x82209BA4;
		  /* 82209BA4h */ case    6:  		/* li R7, 76 */
		/* 82209BA4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4C);
		/* 82209BA4h case    6:*/		return 0x82209BA8;
		  /* 82209BA8h */ case    7:  		/* li R3, 0 */
		/* 82209BA8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209BA8h case    7:*/		return 0x82209BAC;
		  /* 82209BACh */ case    8:  		/* bl -728996 */
		/* 82209BACh case    8:*/		regs.LR = 0x82209BB0; return 0x82157C08;
		/* 82209BACh case    8:*/		return 0x82209BB0;
	}
	return 0x82209BB0;
} // Block from 82209B8Ch-82209BB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82209BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209BB0);
		  /* 82209BB0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82209BB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82209BB0h case    0:*/		return 0x82209BB4;
		  /* 82209BB4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82209BB4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82209BD4;  }
		/* 82209BB4h case    1:*/		return 0x82209BB8;
		  /* 82209BB8h */ case    2:  		/* lis R11, -32252 */
		/* 82209BB8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209BB8h case    2:*/		return 0x82209BBC;
		  /* 82209BBCh */ case    3:  		/* mr R6, R29 */
		/* 82209BBCh case    3:*/		regs.R6 = regs.R29;
		/* 82209BBCh case    3:*/		return 0x82209BC0;
		  /* 82209BC0h */ case    4:  		/* addi R5, R11, -12620 */
		/* 82209BC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCEB4);
		/* 82209BC0h case    4:*/		return 0x82209BC4;
		  /* 82209BC4h */ case    5:  		/* mr R4, R30 */
		/* 82209BC4h case    5:*/		regs.R4 = regs.R30;
		/* 82209BC4h case    5:*/		return 0x82209BC8;
		  /* 82209BC8h */ case    6:  		/* li R7, 77 */
		/* 82209BC8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4D);
		/* 82209BC8h case    6:*/		return 0x82209BCC;
		  /* 82209BCCh */ case    7:  		/* li R3, 0 */
		/* 82209BCCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209BCCh case    7:*/		return 0x82209BD0;
		  /* 82209BD0h */ case    8:  		/* bl -729032 */
		/* 82209BD0h case    8:*/		regs.LR = 0x82209BD4; return 0x82157C08;
		/* 82209BD0h case    8:*/		return 0x82209BD4;
	}
	return 0x82209BD4;
} // Block from 82209BB0h-82209BD4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82209BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209BD4);
		  /* 82209BD4h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82209BD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82209BD4h case    0:*/		return 0x82209BD8;
		  /* 82209BD8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82209BD8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82209BF8;  }
		/* 82209BD8h case    1:*/		return 0x82209BDC;
		  /* 82209BDCh */ case    2:  		/* lis R11, -32252 */
		/* 82209BDCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209BDCh case    2:*/		return 0x82209BE0;
		  /* 82209BE0h */ case    3:  		/* mr R6, R29 */
		/* 82209BE0h case    3:*/		regs.R6 = regs.R29;
		/* 82209BE0h case    3:*/		return 0x82209BE4;
		  /* 82209BE4h */ case    4:  		/* addi R5, R11, -21104 */
		/* 82209BE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 82209BE4h case    4:*/		return 0x82209BE8;
		  /* 82209BE8h */ case    5:  		/* mr R4, R30 */
		/* 82209BE8h case    5:*/		regs.R4 = regs.R30;
		/* 82209BE8h case    5:*/		return 0x82209BEC;
		  /* 82209BECh */ case    6:  		/* li R7, 78 */
		/* 82209BECh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4E);
		/* 82209BECh case    6:*/		return 0x82209BF0;
		  /* 82209BF0h */ case    7:  		/* li R3, 0 */
		/* 82209BF0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209BF0h case    7:*/		return 0x82209BF4;
		  /* 82209BF4h */ case    8:  		/* bl -729068 */
		/* 82209BF4h case    8:*/		regs.LR = 0x82209BF8; return 0x82157C08;
		/* 82209BF4h case    8:*/		return 0x82209BF8;
	}
	return 0x82209BF8;
} // Block from 82209BD4h-82209BF8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82209BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209BF8);
		  /* 82209BF8h */ case    0:  		/* li R4, 20 */
		/* 82209BF8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82209BF8h case    0:*/		return 0x82209BFC;
		  /* 82209BFCh */ case    1:  		/* mtspr CTR, R31 */
		/* 82209BFCh case    1:*/		regs.CTR = regs.R31;
		/* 82209BFCh case    1:*/		return 0x82209C00;
		  /* 82209C00h */ case    2:  		/* mr R3, R28 */
		/* 82209C00h case    2:*/		regs.R3 = regs.R28;
		/* 82209C00h case    2:*/		return 0x82209C04;
		  /* 82209C04h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82209C04h case    3:*/		if ( 1 ) { regs.LR = 0x82209C08; return (uint32)regs.CTR; }
		/* 82209C04h case    3:*/		return 0x82209C08;
		  /* 82209C08h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82209C08h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82209C08h case    4:*/		return 0x82209C0C;
		  /* 82209C0Ch */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 82209C0Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x82209C30;  }
		/* 82209C0Ch case    5:*/		return 0x82209C10;
		  /* 82209C10h */ case    6:  		/* lis R11, -32252 */
		/* 82209C10h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209C10h case    6:*/		return 0x82209C14;
		  /* 82209C14h */ case    7:  		/* mr R6, R29 */
		/* 82209C14h case    7:*/		regs.R6 = regs.R29;
		/* 82209C14h case    7:*/		return 0x82209C18;
		  /* 82209C18h */ case    8:  		/* addi R5, R11, -12668 */
		/* 82209C18h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCE84);
		/* 82209C18h case    8:*/		return 0x82209C1C;
		  /* 82209C1Ch */ case    9:  		/* mr R4, R30 */
		/* 82209C1Ch case    9:*/		regs.R4 = regs.R30;
		/* 82209C1Ch case    9:*/		return 0x82209C20;
		  /* 82209C20h */ case   10:  		/* li R7, 84 */
		/* 82209C20h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x54);
		/* 82209C20h case   10:*/		return 0x82209C24;
		  /* 82209C24h */ case   11:  		/* bl -729116 */
		/* 82209C24h case   11:*/		regs.LR = 0x82209C28; return 0x82157C08;
		/* 82209C24h case   11:*/		return 0x82209C28;
		  /* 82209C28h */ case   12:  		/* li R3, 0 */
		/* 82209C28h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209C28h case   12:*/		return 0x82209C2C;
		  /* 82209C2Ch */ case   13:  		/* b 24 */
		/* 82209C2Ch case   13:*/		return 0x82209C44;
		/* 82209C2Ch case   13:*/		return 0x82209C30;
	}
	return 0x82209C30;
} // Block from 82209BF8h-82209C30h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82209C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209C30);
		  /* 82209C30h */ case    0:  		/* stw R28, <#[R3]> */
		/* 82209C30h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 82209C30h case    0:*/		return 0x82209C34;
		  /* 82209C34h */ case    1:  		/* stw R31, <#[R3 + 4]> */
		/* 82209C34h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 82209C34h case    1:*/		return 0x82209C38;
		  /* 82209C38h */ case    2:  		/* stw R27, <#[R3 + 8]> */
		/* 82209C38h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000008) );
		/* 82209C38h case    2:*/		return 0x82209C3C;
		  /* 82209C3Ch */ case    3:  		/* stw R26, <#[R3 + 12]> */
		/* 82209C3Ch case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000000C) );
		/* 82209C3Ch case    3:*/		return 0x82209C40;
		  /* 82209C40h */ case    4:  		/* stw R25, <#[R3 + 16]> */
		/* 82209C40h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000010) );
		/* 82209C40h case    4:*/		return 0x82209C44;
	}
	return 0x82209C44;
} // Block from 82209C30h-82209C44h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82209C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209C44);
		  /* 82209C44h */ case    0:  		/* addi R1, R1, 144 */
		/* 82209C44h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82209C44h case    0:*/		return 0x82209C48;
		  /* 82209C48h */ case    1:  		/* b -1542572 */
		/* 82209C48h case    1:*/		return 0x8209129C;
		/* 82209C48h case    1:*/		return 0x82209C4C;
		  /* 82209C4Ch */ case    2:  		/* nop */
		/* 82209C4Ch case    2:*/		cpu::op::nop();
		/* 82209C4Ch case    2:*/		return 0x82209C50;
	}
	return 0x82209C50;
} // Block from 82209C44h-82209C50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209C50);
		  /* 82209C50h */ case    0:  		/* mfspr R12, LR */
		/* 82209C50h case    0:*/		regs.R12 = regs.LR;
		/* 82209C50h case    0:*/		return 0x82209C54;
		  /* 82209C54h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82209C54h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82209C54h case    1:*/		return 0x82209C58;
		  /* 82209C58h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82209C58h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82209C58h case    2:*/		return 0x82209C5C;
		  /* 82209C5Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82209C5Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82209C5Ch case    3:*/		return 0x82209C60;
		  /* 82209C60h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82209C60h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82209C60h case    4:*/		return 0x82209C64;
		  /* 82209C64h */ case    5:  		/* lwz R11, <#[R3 + 76]> */
		/* 82209C64h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 82209C64h case    5:*/		return 0x82209C68;
		  /* 82209C68h */ case    6:  		/* mr R30, R3 */
		/* 82209C68h case    6:*/		regs.R30 = regs.R3;
		/* 82209C68h case    6:*/		return 0x82209C6C;
		  /* 82209C6Ch */ case    7:  		/* mr R31, R4 */
		/* 82209C6Ch case    7:*/		regs.R31 = regs.R4;
		/* 82209C6Ch case    7:*/		return 0x82209C70;
		  /* 82209C70h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 82209C70h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82209C70h case    8:*/		return 0x82209C74;
		  /* 82209C74h */ case    9:  		/* bc 12, CR6_LT, 40 */
		/* 82209C74h case    9:*/		if ( regs.CR[6].lt ) { return 0x82209C9C;  }
		/* 82209C74h case    9:*/		return 0x82209C78;
		  /* 82209C78h */ case   10:  		/* lis R11, -32252 */
		/* 82209C78h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209C78h case   10:*/		return 0x82209C7C;
		  /* 82209C7Ch */ case   11:  		/* lis R10, -32252 */
		/* 82209C7Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82209C7Ch case   11:*/		return 0x82209C80;
		  /* 82209C80h */ case   12:  		/* lis R9, -32253 */
		/* 82209C80h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82209C80h case   12:*/		return 0x82209C84;
		  /* 82209C84h */ case   13:  		/* addi R6, R11, -12448 */
		/* 82209C84h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF60);
		/* 82209C84h case   13:*/		return 0x82209C88;
		  /* 82209C88h */ case   14:  		/* addi R5, R10, -12500 */
		/* 82209C88h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFCF2C);
		/* 82209C88h case   14:*/		return 0x82209C8C;
		  /* 82209C8Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 82209C8Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82209C8Ch case   15:*/		return 0x82209C90;
		  /* 82209C90h */ case   16:  		/* li R7, 191 */
		/* 82209C90h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xBF);
		/* 82209C90h case   16:*/		return 0x82209C94;
		  /* 82209C94h */ case   17:  		/* li R3, 0 */
		/* 82209C94h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209C94h case   17:*/		return 0x82209C98;
		  /* 82209C98h */ case   18:  		/* bl -729232 */
		/* 82209C98h case   18:*/		regs.LR = 0x82209C9C; return 0x82157C08;
		/* 82209C98h case   18:*/		return 0x82209C9C;
	}
	return 0x82209C9C;
} // Block from 82209C50h-82209C9Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82209C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209C9C);
		  /* 82209C9Ch */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 82209C9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82209C9Ch case    0:*/		return 0x82209CA0;
		  /* 82209CA0h */ case    1:  		/* rlwinm R10, R31, 29, 3, 29 */
		/* 82209CA0h case    1:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R31);
		/* 82209CA0h case    1:*/		return 0x82209CA4;
		  /* 82209CA4h */ case    2:  		/* rlwinm R9, R31, 0, 27, 31 */
		/* 82209CA4h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R31);
		/* 82209CA4h case    2:*/		return 0x82209CA8;
		  /* 82209CA8h */ case    3:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82209CA8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82209CA8h case    3:*/		return 0x82209CAC;
		  /* 82209CACh */ case    4:  		/* srw R11, R11, R9 */
		/* 82209CACh case    4:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82209CACh case    4:*/		return 0x82209CB0;
		  /* 82209CB0h */ case    5:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 82209CB0h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 82209CB0h case    5:*/		return 0x82209CB4;
		  /* 82209CB4h */ case    6:  		/* addi R1, R1, 112 */
		/* 82209CB4h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82209CB4h case    6:*/		return 0x82209CB8;
		  /* 82209CB8h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 82209CB8h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82209CB8h case    7:*/		return 0x82209CBC;
		  /* 82209CBCh */ case    8:  		/* mtspr LR, R12 */
		/* 82209CBCh case    8:*/		regs.LR = regs.R12;
		/* 82209CBCh case    8:*/		return 0x82209CC0;
		  /* 82209CC0h */ case    9:  		/* ld R30, <#[R1 - 24]> */
		/* 82209CC0h case    9:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82209CC0h case    9:*/		return 0x82209CC4;
		  /* 82209CC4h */ case   10:  		/* ld R31, <#[R1 - 16]> */
		/* 82209CC4h case   10:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82209CC4h case   10:*/		return 0x82209CC8;
		  /* 82209CC8h */ case   11:  		/* bclr 20, CR0_LT */
		/* 82209CC8h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82209CC8h case   11:*/		return 0x82209CCC;
	}
	return 0x82209CCC;
} // Block from 82209C9Ch-82209CCCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 82209CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209CCC);
		  /* 82209CCCh */ case    0:  		/* nop */
		/* 82209CCCh case    0:*/		cpu::op::nop();
		/* 82209CCCh case    0:*/		return 0x82209CD0;
	}
	return 0x82209CD0;
} // Block from 82209CCCh-82209CD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82209CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209CD0);
		  /* 82209CD0h */ case    0:  		/* mfspr R12, LR */
		/* 82209CD0h case    0:*/		regs.R12 = regs.LR;
		/* 82209CD0h case    0:*/		return 0x82209CD4;
		  /* 82209CD4h */ case    1:  		/* bl -1542776 */
		/* 82209CD4h case    1:*/		regs.LR = 0x82209CD8; return 0x8209125C;
		/* 82209CD4h case    1:*/		return 0x82209CD8;
		  /* 82209CD8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82209CD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82209CD8h case    2:*/		return 0x82209CDC;
		  /* 82209CDCh */ case    3:  		/* mr R30, R4 */
		/* 82209CDCh case    3:*/		regs.R30 = regs.R4;
		/* 82209CDCh case    3:*/		return 0x82209CE0;
		  /* 82209CE0h */ case    4:  		/* mr R5, R4 */
		/* 82209CE0h case    4:*/		regs.R5 = regs.R4;
		/* 82209CE0h case    4:*/		return 0x82209CE4;
		  /* 82209CE4h */ case    5:  		/* li R4, 79 */
		/* 82209CE4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 82209CE4h case    5:*/		return 0x82209CE8;
		  /* 82209CE8h */ case    6:  		/* mr R31, R3 */
		/* 82209CE8h case    6:*/		regs.R31 = regs.R3;
		/* 82209CE8h case    6:*/		return 0x82209CEC;
		  /* 82209CECh */ case    7:  		/* bl -705708 */
		/* 82209CECh case    7:*/		regs.LR = 0x82209CF0; return 0x8215D840;
		/* 82209CECh case    7:*/		return 0x82209CF0;
		  /* 82209CF0h */ case    8:  		/* mr R29, R3 */
		/* 82209CF0h case    8:*/		regs.R29 = regs.R3;
		/* 82209CF0h case    8:*/		return 0x82209CF4;
		  /* 82209CF4h */ case    9:  		/* mr R5, R30 */
		/* 82209CF4h case    9:*/		regs.R5 = regs.R30;
		/* 82209CF4h case    9:*/		return 0x82209CF8;
		  /* 82209CF8h */ case   10:  		/* li R4, 27 */
		/* 82209CF8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82209CF8h case   10:*/		return 0x82209CFC;
		  /* 82209CFCh */ case   11:  		/* mr R3, R31 */
		/* 82209CFCh case   11:*/		regs.R3 = regs.R31;
		/* 82209CFCh case   11:*/		return 0x82209D00;
	}
	return 0x82209D00;
} // Block from 82209CD0h-82209D00h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82209D00h
// Function '?ImportASM@Compiler@D3DXShader@@AAAXPAVCNode@2@PAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209D00);
		  /* 82209D00h */ case    0:  		/* bl -705728 */
		/* 82209D00h case    0:*/		regs.LR = 0x82209D04; return 0x8215D840;
		/* 82209D00h case    0:*/		return 0x82209D04;
		  /* 82209D04h */ case    1:  		/* cmplwi CR6, R29, 3 */
		/* 82209D04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 82209D04h case    1:*/		return 0x82209D08;
		  /* 82209D08h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 82209D08h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82209D1C;  }
		/* 82209D08h case    2:*/		return 0x82209D0C;
		  /* 82209D0Ch */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 82209D0Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82209D0Ch case    3:*/		return 0x82209D10;
		  /* 82209D10h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82209D10h case    4:*/		if ( regs.CR[6].eq ) { return 0x82209D38;  }
		/* 82209D10h case    4:*/		return 0x82209D14;
		  /* 82209D14h */ case    5:  		/* li R6, 1 */
		/* 82209D14h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82209D14h case    5:*/		return 0x82209D18;
		  /* 82209D18h */ case    6:  		/* b 16 */
		/* 82209D18h case    6:*/		return 0x82209D28;
		/* 82209D18h case    6:*/		return 0x82209D1C;
	}
	return 0x82209D1C;
} // Block from 82209D00h-82209D1Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82209D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209D1C);
		  /* 82209D1Ch */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82209D1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82209D1Ch case    0:*/		return 0x82209D20;
		  /* 82209D20h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82209D20h case    1:*/		if ( regs.CR[6].eq ) { return 0x82209D38;  }
		/* 82209D20h case    1:*/		return 0x82209D24;
		  /* 82209D24h */ case    2:  		/* li R6, 0 */
		/* 82209D24h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82209D24h case    2:*/		return 0x82209D28;
	}
	return 0x82209D28;
} // Block from 82209D1Ch-82209D28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209D28);
		  /* 82209D28h */ case    0:  		/* mr R5, R30 */
		/* 82209D28h case    0:*/		regs.R5 = regs.R30;
		/* 82209D28h case    0:*/		return 0x82209D2C;
		  /* 82209D2Ch */ case    1:  		/* li R4, 27 */
		/* 82209D2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82209D2Ch case    1:*/		return 0x82209D30;
		  /* 82209D30h */ case    2:  		/* mr R3, R31 */
		/* 82209D30h case    2:*/		regs.R3 = regs.R31;
		/* 82209D30h case    2:*/		return 0x82209D34;
		  /* 82209D34h */ case    3:  		/* bl -774508 */
		/* 82209D34h case    3:*/		regs.LR = 0x82209D38; return 0x8214CBC8;
		/* 82209D34h case    3:*/		return 0x82209D38;
	}
	return 0x82209D38;
} // Block from 82209D28h-82209D38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209D38);
		  /* 82209D38h */ case    0:  		/* addi R1, R1, 112 */
		/* 82209D38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82209D38h case    0:*/		return 0x82209D3C;
		  /* 82209D3Ch */ case    1:  		/* b -1542800 */
		/* 82209D3Ch case    1:*/		return 0x820912AC;
		/* 82209D3Ch case    1:*/		return 0x82209D40;
	}
	return 0x82209D40;
} // Block from 82209D38h-82209D40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209D40);
		  /* 82209D40h */ case    0:  		/* mfspr R12, LR */
		/* 82209D40h case    0:*/		regs.R12 = regs.LR;
		/* 82209D40h case    0:*/		return 0x82209D44;
		  /* 82209D44h */ case    1:  		/* bl -1542888 */
		/* 82209D44h case    1:*/		regs.LR = 0x82209D48; return 0x8209125C;
		/* 82209D44h case    1:*/		return 0x82209D48;
		  /* 82209D48h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82209D48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82209D48h case    2:*/		return 0x82209D4C;
		  /* 82209D4Ch */ case    3:  		/* mr R30, R4 */
		/* 82209D4Ch case    3:*/		regs.R30 = regs.R4;
		/* 82209D4Ch case    3:*/		return 0x82209D50;
		  /* 82209D50h */ case    4:  		/* mr R5, R4 */
		/* 82209D50h case    4:*/		regs.R5 = regs.R4;
		/* 82209D50h case    4:*/		return 0x82209D54;
		  /* 82209D54h */ case    5:  		/* li R4, 71 */
		/* 82209D54h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x47);
		/* 82209D54h case    5:*/		return 0x82209D58;
		  /* 82209D58h */ case    6:  		/* mr R31, R3 */
		/* 82209D58h case    6:*/		regs.R31 = regs.R3;
		/* 82209D58h case    6:*/		return 0x82209D5C;
		  /* 82209D5Ch */ case    7:  		/* bl -705820 */
		/* 82209D5Ch case    7:*/		regs.LR = 0x82209D60; return 0x8215D840;
		/* 82209D5Ch case    7:*/		return 0x82209D60;
		  /* 82209D60h */ case    8:  		/* mr R29, R3 */
		/* 82209D60h case    8:*/		regs.R29 = regs.R3;
		/* 82209D60h case    8:*/		return 0x82209D64;
		  /* 82209D64h */ case    9:  		/* mr R5, R30 */
		/* 82209D64h case    9:*/		regs.R5 = regs.R30;
		/* 82209D64h case    9:*/		return 0x82209D68;
		  /* 82209D68h */ case   10:  		/* li R4, 28 */
		/* 82209D68h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 82209D68h case   10:*/		return 0x82209D6C;
		  /* 82209D6Ch */ case   11:  		/* mr R3, R31 */
		/* 82209D6Ch case   11:*/		regs.R3 = regs.R31;
		/* 82209D6Ch case   11:*/		return 0x82209D70;
		  /* 82209D70h */ case   12:  		/* bl -705840 */
		/* 82209D70h case   12:*/		regs.LR = 0x82209D74; return 0x8215D840;
		/* 82209D70h case   12:*/		return 0x82209D74;
		  /* 82209D74h */ case   13:  		/* cmplwi CR6, R29, 23 */
		/* 82209D74h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000017);
		/* 82209D74h case   13:*/		return 0x82209D78;
		  /* 82209D78h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 82209D78h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82209D8C;  }
		/* 82209D78h case   14:*/		return 0x82209D7C;
		  /* 82209D7Ch */ case   15:  		/* cmplwi CR6, R3, 1 */
		/* 82209D7Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82209D7Ch case   15:*/		return 0x82209D80;
		  /* 82209D80h */ case   16:  		/* bc 12, CR6_EQ, 88 */
		/* 82209D80h case   16:*/		if ( regs.CR[6].eq ) { return 0x82209DD8;  }
		/* 82209D80h case   16:*/		return 0x82209D84;
		  /* 82209D84h */ case   17:  		/* li R6, 1 */
		/* 82209D84h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82209D84h case   17:*/		return 0x82209D88;
		  /* 82209D88h */ case   18:  		/* b 64 */
		/* 82209D88h case   18:*/		return 0x82209DC8;
		/* 82209D88h case   18:*/		return 0x82209D8C;
	}
	return 0x82209D8C;
} // Block from 82209D40h-82209D8Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82209D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209D8C);
		  /* 82209D8Ch */ case    0:  		/* cmplwi CR6, R29, 24 */
		/* 82209D8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000018);
		/* 82209D8Ch case    0:*/		return 0x82209D90;
		  /* 82209D90h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82209D90h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82209DA4;  }
		/* 82209D90h case    1:*/		return 0x82209D94;
		  /* 82209D94h */ case    2:  		/* cmplwi CR6, R3, 2 */
		/* 82209D94h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 82209D94h case    2:*/		return 0x82209D98;
		  /* 82209D98h */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 82209D98h case    3:*/		if ( regs.CR[6].eq ) { return 0x82209DD8;  }
		/* 82209D98h case    3:*/		return 0x82209D9C;
		  /* 82209D9Ch */ case    4:  		/* li R6, 2 */
		/* 82209D9Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82209D9Ch case    4:*/		return 0x82209DA0;
		  /* 82209DA0h */ case    5:  		/* b 40 */
		/* 82209DA0h case    5:*/		return 0x82209DC8;
		/* 82209DA0h case    5:*/		return 0x82209DA4;
	}
	return 0x82209DA4;
} // Block from 82209D8Ch-82209DA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82209DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209DA4);
		  /* 82209DA4h */ case    0:  		/* cmplwi CR6, R29, 22 */
		/* 82209DA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000016);
		/* 82209DA4h case    0:*/		return 0x82209DA8;
		  /* 82209DA8h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82209DA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82209DBC;  }
		/* 82209DA8h case    1:*/		return 0x82209DAC;
		  /* 82209DACh */ case    2:  		/* cmplwi CR6, R3, 3 */
		/* 82209DACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 82209DACh case    2:*/		return 0x82209DB0;
		  /* 82209DB0h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 82209DB0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82209DD8;  }
		/* 82209DB0h case    3:*/		return 0x82209DB4;
		  /* 82209DB4h */ case    4:  		/* li R6, 3 */
		/* 82209DB4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82209DB4h case    4:*/		return 0x82209DB8;
		  /* 82209DB8h */ case    5:  		/* b 16 */
		/* 82209DB8h case    5:*/		return 0x82209DC8;
		/* 82209DB8h case    5:*/		return 0x82209DBC;
	}
	return 0x82209DBC;
} // Block from 82209DA4h-82209DBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82209DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209DBC);
		  /* 82209DBCh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82209DBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82209DBCh case    0:*/		return 0x82209DC0;
		  /* 82209DC0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82209DC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82209DD8;  }
		/* 82209DC0h case    1:*/		return 0x82209DC4;
		  /* 82209DC4h */ case    2:  		/* li R6, 0 */
		/* 82209DC4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82209DC4h case    2:*/		return 0x82209DC8;
	}
	return 0x82209DC8;
} // Block from 82209DBCh-82209DC8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209DC8);
		  /* 82209DC8h */ case    0:  		/* mr R5, R30 */
		/* 82209DC8h case    0:*/		regs.R5 = regs.R30;
		/* 82209DC8h case    0:*/		return 0x82209DCC;
		  /* 82209DCCh */ case    1:  		/* li R4, 28 */
		/* 82209DCCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 82209DCCh case    1:*/		return 0x82209DD0;
		  /* 82209DD0h */ case    2:  		/* mr R3, R31 */
		/* 82209DD0h case    2:*/		regs.R3 = regs.R31;
		/* 82209DD0h case    2:*/		return 0x82209DD4;
		  /* 82209DD4h */ case    3:  		/* bl -774668 */
		/* 82209DD4h case    3:*/		regs.LR = 0x82209DD8; return 0x8214CBC8;
		/* 82209DD4h case    3:*/		return 0x82209DD8;
	}
	return 0x82209DD8;
} // Block from 82209DC8h-82209DD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209DD8);
		  /* 82209DD8h */ case    0:  		/* addi R1, R1, 112 */
		/* 82209DD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82209DD8h case    0:*/		return 0x82209DDC;
		  /* 82209DDCh */ case    1:  		/* b -1542960 */
		/* 82209DDCh case    1:*/		return 0x820912AC;
		/* 82209DDCh case    1:*/		return 0x82209DE0;
	}
	return 0x82209DE0;
} // Block from 82209DD8h-82209DE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209DE0);
		  /* 82209DE0h */ case    0:  		/* mfspr R12, LR */
		/* 82209DE0h case    0:*/		regs.R12 = regs.LR;
		/* 82209DE0h case    0:*/		return 0x82209DE4;
		  /* 82209DE4h */ case    1:  		/* bl -1543048 */
		/* 82209DE4h case    1:*/		regs.LR = 0x82209DE8; return 0x8209125C;
		/* 82209DE4h case    1:*/		return 0x82209DE8;
		  /* 82209DE8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82209DE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82209DE8h case    2:*/		return 0x82209DEC;
		  /* 82209DECh */ case    3:  		/* mr R30, R4 */
		/* 82209DECh case    3:*/		regs.R30 = regs.R4;
		/* 82209DECh case    3:*/		return 0x82209DF0;
		  /* 82209DF0h */ case    4:  		/* mr R5, R4 */
		/* 82209DF0h case    4:*/		regs.R5 = regs.R4;
		/* 82209DF0h case    4:*/		return 0x82209DF4;
		  /* 82209DF4h */ case    5:  		/* li R4, 82 */
		/* 82209DF4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x52);
		/* 82209DF4h case    5:*/		return 0x82209DF8;
		  /* 82209DF8h */ case    6:  		/* mr R31, R3 */
		/* 82209DF8h case    6:*/		regs.R31 = regs.R3;
		/* 82209DF8h case    6:*/		return 0x82209DFC;
		  /* 82209DFCh */ case    7:  		/* bl -705980 */
		/* 82209DFCh case    7:*/		regs.LR = 0x82209E00; return 0x8215D840;
		/* 82209DFCh case    7:*/		return 0x82209E00;
		  /* 82209E00h */ case    8:  		/* mr R29, R3 */
		/* 82209E00h case    8:*/		regs.R29 = regs.R3;
		/* 82209E00h case    8:*/		return 0x82209E04;
		  /* 82209E04h */ case    9:  		/* mr R5, R30 */
		/* 82209E04h case    9:*/		regs.R5 = regs.R30;
		/* 82209E04h case    9:*/		return 0x82209E08;
		  /* 82209E08h */ case   10:  		/* li R4, 29 */
		/* 82209E08h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 82209E08h case   10:*/		return 0x82209E0C;
		  /* 82209E0Ch */ case   11:  		/* mr R3, R31 */
		/* 82209E0Ch case   11:*/		regs.R3 = regs.R31;
		/* 82209E0Ch case   11:*/		return 0x82209E10;
		  /* 82209E10h */ case   12:  		/* bl -706000 */
		/* 82209E10h case   12:*/		regs.LR = 0x82209E14; return 0x8215D840;
		/* 82209E10h case   12:*/		return 0x82209E14;
		  /* 82209E14h */ case   13:  		/* cmplwi CR6, R29, 6 */
		/* 82209E14h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 82209E14h case   13:*/		return 0x82209E18;
		  /* 82209E18h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 82209E18h case   14:*/		if ( regs.CR[6].eq ) { return 0x82209E44;  }
		/* 82209E18h case   14:*/		return 0x82209E1C;
		  /* 82209E1Ch */ case   15:  		/* cmplwi CR6, R29, 4 */
		/* 82209E1Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82209E1Ch case   15:*/		return 0x82209E20;
		  /* 82209E20h */ case   16:  		/* bc 12, CR6_EQ, 36 */
		/* 82209E20h case   16:*/		if ( regs.CR[6].eq ) { return 0x82209E44;  }
		/* 82209E20h case   16:*/		return 0x82209E24;
		  /* 82209E24h */ case   17:  		/* cmplwi CR6, R29, 5 */
		/* 82209E24h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000005);
		/* 82209E24h case   17:*/		return 0x82209E28;
		  /* 82209E28h */ case   18:  		/* bc 12, CR6_EQ, 28 */
		/* 82209E28h case   18:*/		if ( regs.CR[6].eq ) { return 0x82209E44;  }
		/* 82209E28h case   18:*/		return 0x82209E2C;
		  /* 82209E2Ch */ case   19:  		/* cmplwi CR6, R29, 7 */
		/* 82209E2Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 82209E2Ch case   19:*/		return 0x82209E30;
		  /* 82209E30h */ case   20:  		/* bc 12, CR6_EQ, 20 */
		/* 82209E30h case   20:*/		if ( regs.CR[6].eq ) { return 0x82209E44;  }
		/* 82209E30h case   20:*/		return 0x82209E34;
		  /* 82209E34h */ case   21:  		/* cmplwi CR6, R3, 0 */
		/* 82209E34h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82209E34h case   21:*/		return 0x82209E38;
		  /* 82209E38h */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 82209E38h case   22:*/		if ( regs.CR[6].eq ) { return 0x82209E60;  }
		/* 82209E38h case   22:*/		return 0x82209E3C;
		  /* 82209E3Ch */ case   23:  		/* li R6, 0 */
		/* 82209E3Ch case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82209E3Ch case   23:*/		return 0x82209E40;
		  /* 82209E40h */ case   24:  		/* b 16 */
		/* 82209E40h case   24:*/		return 0x82209E50;
		/* 82209E40h case   24:*/		return 0x82209E44;
	}
	return 0x82209E44;
} // Block from 82209DE0h-82209E44h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82209E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209E44);
		  /* 82209E44h */ case    0:  		/* cmplw CR6, R3, R29 */
		/* 82209E44h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82209E44h case    0:*/		return 0x82209E48;
		  /* 82209E48h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82209E48h case    1:*/		if ( regs.CR[6].eq ) { return 0x82209E60;  }
		/* 82209E48h case    1:*/		return 0x82209E4C;
		  /* 82209E4Ch */ case    2:  		/* mr R6, R29 */
		/* 82209E4Ch case    2:*/		regs.R6 = regs.R29;
		/* 82209E4Ch case    2:*/		return 0x82209E50;
	}
	return 0x82209E50;
} // Block from 82209E44h-82209E50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209E50);
		  /* 82209E50h */ case    0:  		/* mr R5, R30 */
		/* 82209E50h case    0:*/		regs.R5 = regs.R30;
		/* 82209E50h case    0:*/		return 0x82209E54;
		  /* 82209E54h */ case    1:  		/* li R4, 29 */
		/* 82209E54h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 82209E54h case    1:*/		return 0x82209E58;
		  /* 82209E58h */ case    2:  		/* mr R3, R31 */
		/* 82209E58h case    2:*/		regs.R3 = regs.R31;
		/* 82209E58h case    2:*/		return 0x82209E5C;
		  /* 82209E5Ch */ case    3:  		/* bl -774804 */
		/* 82209E5Ch case    3:*/		regs.LR = 0x82209E60; return 0x8214CBC8;
		/* 82209E5Ch case    3:*/		return 0x82209E60;
	}
	return 0x82209E60;
} // Block from 82209E50h-82209E60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209E60);
		  /* 82209E60h */ case    0:  		/* mr R5, R30 */
		/* 82209E60h case    0:*/		regs.R5 = regs.R30;
		/* 82209E60h case    0:*/		return 0x82209E64;
		  /* 82209E64h */ case    1:  		/* li R4, 83 */
		/* 82209E64h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x53);
		/* 82209E64h case    1:*/		return 0x82209E68;
		  /* 82209E68h */ case    2:  		/* mr R3, R31 */
		/* 82209E68h case    2:*/		regs.R3 = regs.R31;
		/* 82209E68h case    2:*/		return 0x82209E6C;
		  /* 82209E6Ch */ case    3:  		/* bl -706092 */
		/* 82209E6Ch case    3:*/		regs.LR = 0x82209E70; return 0x8215D840;
		/* 82209E6Ch case    3:*/		return 0x82209E70;
		  /* 82209E70h */ case    4:  		/* mr R29, R3 */
		/* 82209E70h case    4:*/		regs.R29 = regs.R3;
		/* 82209E70h case    4:*/		return 0x82209E74;
		  /* 82209E74h */ case    5:  		/* mr R5, R30 */
		/* 82209E74h case    5:*/		regs.R5 = regs.R30;
		/* 82209E74h case    5:*/		return 0x82209E78;
		  /* 82209E78h */ case    6:  		/* li R4, 30 */
		/* 82209E78h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 82209E78h case    6:*/		return 0x82209E7C;
		  /* 82209E7Ch */ case    7:  		/* mr R3, R31 */
		/* 82209E7Ch case    7:*/		regs.R3 = regs.R31;
		/* 82209E7Ch case    7:*/		return 0x82209E80;
		  /* 82209E80h */ case    8:  		/* bl -706112 */
		/* 82209E80h case    8:*/		regs.LR = 0x82209E84; return 0x8215D840;
		/* 82209E80h case    8:*/		return 0x82209E84;
		  /* 82209E84h */ case    9:  		/* cmplwi CR6, R29, 6 */
		/* 82209E84h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 82209E84h case    9:*/		return 0x82209E88;
		  /* 82209E88h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 82209E88h case   10:*/		if ( regs.CR[6].eq ) { return 0x82209EB4;  }
		/* 82209E88h case   10:*/		return 0x82209E8C;
		  /* 82209E8Ch */ case   11:  		/* cmplwi CR6, R29, 4 */
		/* 82209E8Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82209E8Ch case   11:*/		return 0x82209E90;
		  /* 82209E90h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 82209E90h case   12:*/		if ( regs.CR[6].eq ) { return 0x82209EB4;  }
		/* 82209E90h case   12:*/		return 0x82209E94;
		  /* 82209E94h */ case   13:  		/* cmplwi CR6, R29, 5 */
		/* 82209E94h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000005);
		/* 82209E94h case   13:*/		return 0x82209E98;
		  /* 82209E98h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 82209E98h case   14:*/		if ( regs.CR[6].eq ) { return 0x82209EB4;  }
		/* 82209E98h case   14:*/		return 0x82209E9C;
		  /* 82209E9Ch */ case   15:  		/* cmplwi CR6, R29, 7 */
		/* 82209E9Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 82209E9Ch case   15:*/		return 0x82209EA0;
		  /* 82209EA0h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82209EA0h case   16:*/		if ( regs.CR[6].eq ) { return 0x82209EB4;  }
		/* 82209EA0h case   16:*/		return 0x82209EA4;
		  /* 82209EA4h */ case   17:  		/* cmplwi CR6, R3, 0 */
		/* 82209EA4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82209EA4h case   17:*/		return 0x82209EA8;
		  /* 82209EA8h */ case   18:  		/* bc 12, CR6_EQ, 40 */
		/* 82209EA8h case   18:*/		if ( regs.CR[6].eq ) { return 0x82209ED0;  }
		/* 82209EA8h case   18:*/		return 0x82209EAC;
		  /* 82209EACh */ case   19:  		/* li R6, 0 */
		/* 82209EACh case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82209EACh case   19:*/		return 0x82209EB0;
		  /* 82209EB0h */ case   20:  		/* b 16 */
		/* 82209EB0h case   20:*/		return 0x82209EC0;
		/* 82209EB0h case   20:*/		return 0x82209EB4;
	}
	return 0x82209EB4;
} // Block from 82209E60h-82209EB4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82209EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209EB4);
		  /* 82209EB4h */ case    0:  		/* cmplw CR6, R3, R29 */
		/* 82209EB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82209EB4h case    0:*/		return 0x82209EB8;
		  /* 82209EB8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82209EB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82209ED0;  }
		/* 82209EB8h case    1:*/		return 0x82209EBC;
		  /* 82209EBCh */ case    2:  		/* mr R6, R29 */
		/* 82209EBCh case    2:*/		regs.R6 = regs.R29;
		/* 82209EBCh case    2:*/		return 0x82209EC0;
	}
	return 0x82209EC0;
} // Block from 82209EB4h-82209EC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209EC0);
		  /* 82209EC0h */ case    0:  		/* mr R5, R30 */
		/* 82209EC0h case    0:*/		regs.R5 = regs.R30;
		/* 82209EC0h case    0:*/		return 0x82209EC4;
		  /* 82209EC4h */ case    1:  		/* li R4, 30 */
		/* 82209EC4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 82209EC4h case    1:*/		return 0x82209EC8;
		  /* 82209EC8h */ case    2:  		/* mr R3, R31 */
		/* 82209EC8h case    2:*/		regs.R3 = regs.R31;
		/* 82209EC8h case    2:*/		return 0x82209ECC;
		  /* 82209ECCh */ case    3:  		/* bl -774916 */
		/* 82209ECCh case    3:*/		regs.LR = 0x82209ED0; return 0x8214CBC8;
		/* 82209ECCh case    3:*/		return 0x82209ED0;
	}
	return 0x82209ED0;
} // Block from 82209EC0h-82209ED0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209ED0);
		  /* 82209ED0h */ case    0:  		/* mr R5, R30 */
		/* 82209ED0h case    0:*/		regs.R5 = regs.R30;
		/* 82209ED0h case    0:*/		return 0x82209ED4;
		  /* 82209ED4h */ case    1:  		/* li R4, 84 */
		/* 82209ED4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 82209ED4h case    1:*/		return 0x82209ED8;
		  /* 82209ED8h */ case    2:  		/* mr R3, R31 */
		/* 82209ED8h case    2:*/		regs.R3 = regs.R31;
		/* 82209ED8h case    2:*/		return 0x82209EDC;
		  /* 82209EDCh */ case    3:  		/* bl -706204 */
		/* 82209EDCh case    3:*/		regs.LR = 0x82209EE0; return 0x8215D840;
		/* 82209EDCh case    3:*/		return 0x82209EE0;
		  /* 82209EE0h */ case    4:  		/* mr R29, R3 */
		/* 82209EE0h case    4:*/		regs.R29 = regs.R3;
		/* 82209EE0h case    4:*/		return 0x82209EE4;
		  /* 82209EE4h */ case    5:  		/* mr R5, R30 */
		/* 82209EE4h case    5:*/		regs.R5 = regs.R30;
		/* 82209EE4h case    5:*/		return 0x82209EE8;
		  /* 82209EE8h */ case    6:  		/* li R4, 31 */
		/* 82209EE8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 82209EE8h case    6:*/		return 0x82209EEC;
		  /* 82209EECh */ case    7:  		/* mr R3, R31 */
		/* 82209EECh case    7:*/		regs.R3 = regs.R31;
		/* 82209EECh case    7:*/		return 0x82209EF0;
		  /* 82209EF0h */ case    8:  		/* bl -706224 */
		/* 82209EF0h case    8:*/		regs.LR = 0x82209EF4; return 0x8215D840;
		/* 82209EF0h case    8:*/		return 0x82209EF4;
		  /* 82209EF4h */ case    9:  		/* cmplwi CR6, R29, 6 */
		/* 82209EF4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 82209EF4h case    9:*/		return 0x82209EF8;
		  /* 82209EF8h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 82209EF8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82209F24;  }
		/* 82209EF8h case   10:*/		return 0x82209EFC;
		  /* 82209EFCh */ case   11:  		/* cmplwi CR6, R29, 4 */
		/* 82209EFCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82209EFCh case   11:*/		return 0x82209F00;
		  /* 82209F00h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 82209F00h case   12:*/		if ( regs.CR[6].eq ) { return 0x82209F24;  }
		/* 82209F00h case   12:*/		return 0x82209F04;
		  /* 82209F04h */ case   13:  		/* cmplwi CR6, R29, 5 */
		/* 82209F04h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000005);
		/* 82209F04h case   13:*/		return 0x82209F08;
		  /* 82209F08h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 82209F08h case   14:*/		if ( regs.CR[6].eq ) { return 0x82209F24;  }
		/* 82209F08h case   14:*/		return 0x82209F0C;
		  /* 82209F0Ch */ case   15:  		/* cmplwi CR6, R29, 7 */
		/* 82209F0Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 82209F0Ch case   15:*/		return 0x82209F10;
		  /* 82209F10h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82209F10h case   16:*/		if ( regs.CR[6].eq ) { return 0x82209F24;  }
		/* 82209F10h case   16:*/		return 0x82209F14;
		  /* 82209F14h */ case   17:  		/* cmplwi CR6, R3, 0 */
		/* 82209F14h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82209F14h case   17:*/		return 0x82209F18;
		  /* 82209F18h */ case   18:  		/* bc 12, CR6_EQ, 40 */
		/* 82209F18h case   18:*/		if ( regs.CR[6].eq ) { return 0x82209F40;  }
		/* 82209F18h case   18:*/		return 0x82209F1C;
		  /* 82209F1Ch */ case   19:  		/* li R6, 0 */
		/* 82209F1Ch case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82209F1Ch case   19:*/		return 0x82209F20;
		  /* 82209F20h */ case   20:  		/* b 16 */
		/* 82209F20h case   20:*/		return 0x82209F30;
		/* 82209F20h case   20:*/		return 0x82209F24;
	}
	return 0x82209F24;
} // Block from 82209ED0h-82209F24h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82209F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209F24);
		  /* 82209F24h */ case    0:  		/* cmplw CR6, R3, R29 */
		/* 82209F24h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82209F24h case    0:*/		return 0x82209F28;
		  /* 82209F28h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82209F28h case    1:*/		if ( regs.CR[6].eq ) { return 0x82209F40;  }
		/* 82209F28h case    1:*/		return 0x82209F2C;
		  /* 82209F2Ch */ case    2:  		/* mr R6, R29 */
		/* 82209F2Ch case    2:*/		regs.R6 = regs.R29;
		/* 82209F2Ch case    2:*/		return 0x82209F30;
	}
	return 0x82209F30;
} // Block from 82209F24h-82209F30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82209F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209F30);
		  /* 82209F30h */ case    0:  		/* mr R5, R30 */
		/* 82209F30h case    0:*/		regs.R5 = regs.R30;
		/* 82209F30h case    0:*/		return 0x82209F34;
		  /* 82209F34h */ case    1:  		/* li R4, 31 */
		/* 82209F34h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 82209F34h case    1:*/		return 0x82209F38;
		  /* 82209F38h */ case    2:  		/* mr R3, R31 */
		/* 82209F38h case    2:*/		regs.R3 = regs.R31;
		/* 82209F38h case    2:*/		return 0x82209F3C;
		  /* 82209F3Ch */ case    3:  		/* bl -775028 */
		/* 82209F3Ch case    3:*/		regs.LR = 0x82209F40; return 0x8214CBC8;
		/* 82209F3Ch case    3:*/		return 0x82209F40;
	}
	return 0x82209F40;
} // Block from 82209F30h-82209F40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82209F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209F40);
		  /* 82209F40h */ case    0:  		/* addi R1, R1, 112 */
		/* 82209F40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82209F40h case    0:*/		return 0x82209F44;
		  /* 82209F44h */ case    1:  		/* b -1543320 */
		/* 82209F44h case    1:*/		return 0x820912AC;
		/* 82209F44h case    1:*/		return 0x82209F48;
	}
	return 0x82209F48;
} // Block from 82209F40h-82209F48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82209F48h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209F48);
		  /* 82209F48h */ case    0:  		/* mfspr R12, LR */
		/* 82209F48h case    0:*/		regs.R12 = regs.LR;
		/* 82209F48h case    0:*/		return 0x82209F4C;
		  /* 82209F4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82209F4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82209F4Ch case    1:*/		return 0x82209F50;
		  /* 82209F50h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82209F50h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82209F50h case    2:*/		return 0x82209F54;
		  /* 82209F54h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82209F54h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82209F54h case    3:*/		return 0x82209F58;
		  /* 82209F58h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82209F58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82209F58h case    4:*/		return 0x82209F5C;
		  /* 82209F5Ch */ case    5:  		/* mr R30, R4 */
		/* 82209F5Ch case    5:*/		regs.R30 = regs.R4;
		/* 82209F5Ch case    5:*/		return 0x82209F60;
		  /* 82209F60h */ case    6:  		/* li R31, 0 */
		/* 82209F60h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82209F60h case    6:*/		return 0x82209F64;
		  /* 82209F64h */ case    7:  		/* addi R4, R31, 96 */
		/* 82209F64h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x60);
		/* 82209F64h case    7:*/		return 0x82209F68;
		  /* 82209F68h */ case    8:  		/* mr R3, R30 */
		/* 82209F68h case    8:*/		regs.R3 = regs.R30;
		/* 82209F68h case    8:*/		return 0x82209F6C;
		  /* 82209F6Ch */ case    9:  		/* bl -796 */
		/* 82209F6Ch case    9:*/		regs.LR = 0x82209F70; return 0x82209C50;
		/* 82209F6Ch case    9:*/		return 0x82209F70;
		  /* 82209F70h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82209F70h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82209F70h case   10:*/		return 0x82209F74;
		  /* 82209F74h */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 82209F74h case   11:*/		if ( regs.CR[0].eq ) { return 0x82209F9C;  }
		/* 82209F74h case   11:*/		return 0x82209F78;
		  /* 82209F78h */ case   12:  		/* mr R4, R31 */
		/* 82209F78h case   12:*/		regs.R4 = regs.R31;
		/* 82209F78h case   12:*/		return 0x82209F7C;
		  /* 82209F7Ch */ case   13:  		/* mr R3, R30 */
		/* 82209F7Ch case   13:*/		regs.R3 = regs.R30;
		/* 82209F7Ch case   13:*/		return 0x82209F80;
		  /* 82209F80h */ case   14:  		/* bl -688 */
		/* 82209F80h case   14:*/		regs.LR = 0x82209F84; return 0x82209CD0;
		/* 82209F80h case   14:*/		return 0x82209F84;
		  /* 82209F84h */ case   15:  		/* mr R4, R31 */
		/* 82209F84h case   15:*/		regs.R4 = regs.R31;
		/* 82209F84h case   15:*/		return 0x82209F88;
		  /* 82209F88h */ case   16:  		/* mr R3, R30 */
		/* 82209F88h case   16:*/		regs.R3 = regs.R30;
		/* 82209F88h case   16:*/		return 0x82209F8C;
		  /* 82209F8Ch */ case   17:  		/* bl -588 */
		/* 82209F8Ch case   17:*/		regs.LR = 0x82209F90; return 0x82209D40;
		/* 82209F8Ch case   17:*/		return 0x82209F90;
		  /* 82209F90h */ case   18:  		/* mr R4, R31 */
		/* 82209F90h case   18:*/		regs.R4 = regs.R31;
		/* 82209F90h case   18:*/		return 0x82209F94;
		  /* 82209F94h */ case   19:  		/* mr R3, R30 */
		/* 82209F94h case   19:*/		regs.R3 = regs.R30;
		/* 82209F94h case   19:*/		return 0x82209F98;
		  /* 82209F98h */ case   20:  		/* bl -440 */
		/* 82209F98h case   20:*/		regs.LR = 0x82209F9C; return 0x82209DE0;
		/* 82209F98h case   20:*/		return 0x82209F9C;
	}
	return 0x82209F9C;
} // Block from 82209F48h-82209F9Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82209F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209F9C);
		  /* 82209F9Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 82209F9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82209F9Ch case    0:*/		return 0x82209FA0;
		  /* 82209FA0h */ case    1:  		/* addi R11, R31, 96 */
		/* 82209FA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x60);
		/* 82209FA0h case    1:*/		return 0x82209FA4;
		  /* 82209FA4h */ case    2:  		/* cmplwi CR6, R11, 116 */
		/* 82209FA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000074);
		/* 82209FA4h case    2:*/		return 0x82209FA8;
		  /* 82209FA8h */ case    3:  		/* bc 4, CR6_GT, -68 */
		/* 82209FA8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82209F64;  }
		/* 82209FA8h case    3:*/		return 0x82209FAC;
		  /* 82209FACh */ case    4:  		/* li R3, 0 */
		/* 82209FACh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82209FACh case    4:*/		return 0x82209FB0;
		  /* 82209FB0h */ case    5:  		/* addi R1, R1, 112 */
		/* 82209FB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82209FB0h case    5:*/		return 0x82209FB4;
		  /* 82209FB4h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82209FB4h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82209FB4h case    6:*/		return 0x82209FB8;
		  /* 82209FB8h */ case    7:  		/* mtspr LR, R12 */
		/* 82209FB8h case    7:*/		regs.LR = regs.R12;
		/* 82209FB8h case    7:*/		return 0x82209FBC;
		  /* 82209FBCh */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 82209FBCh case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82209FBCh case    8:*/		return 0x82209FC0;
		  /* 82209FC0h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 82209FC0h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82209FC0h case    9:*/		return 0x82209FC4;
		  /* 82209FC4h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82209FC4h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82209FC4h case   10:*/		return 0x82209FC8;
	}
	return 0x82209FC8;
} // Block from 82209F9Ch-82209FC8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82209FC8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82209FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82209FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82209FC8);
		  /* 82209FC8h */ case    0:  		/* mfspr R12, LR */
		/* 82209FC8h case    0:*/		regs.R12 = regs.LR;
		/* 82209FC8h case    0:*/		return 0x82209FCC;
		  /* 82209FCCh */ case    1:  		/* bl -1543556 */
		/* 82209FCCh case    1:*/		regs.LR = 0x82209FD0; return 0x82091248;
		/* 82209FCCh case    1:*/		return 0x82209FD0;
		  /* 82209FD0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82209FD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82209FD0h case    2:*/		return 0x82209FD4;
		  /* 82209FD4h */ case    3:  		/* lis R11, -32253 */
		/* 82209FD4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82209FD4h case    3:*/		return 0x82209FD8;
		  /* 82209FD8h */ case    4:  		/* lis R10, -32252 */
		/* 82209FD8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82209FD8h case    4:*/		return 0x82209FDC;
		  /* 82209FDCh */ case    5:  		/* mr R28, R3 */
		/* 82209FDCh case    5:*/		regs.R28 = regs.R3;
		/* 82209FDCh case    5:*/		return 0x82209FE0;
		  /* 82209FE0h */ case    6:  		/* mr R31, R4 */
		/* 82209FE0h case    6:*/		regs.R31 = regs.R4;
		/* 82209FE0h case    6:*/		return 0x82209FE4;
		  /* 82209FE4h */ case    7:  		/* mr R25, R5 */
		/* 82209FE4h case    7:*/		regs.R25 = regs.R5;
		/* 82209FE4h case    7:*/		return 0x82209FE8;
		  /* 82209FE8h */ case    8:  		/* mr R24, R6 */
		/* 82209FE8h case    8:*/		regs.R24 = regs.R6;
		/* 82209FE8h case    8:*/		return 0x82209FEC;
		  /* 82209FECh */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 82209FECh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82209FECh case    9:*/		return 0x82209FF0;
		  /* 82209FF0h */ case   10:  		/* addi R30, R11, 27460 */
		/* 82209FF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 82209FF0h case   10:*/		return 0x82209FF4;
		  /* 82209FF4h */ case   11:  		/* addi R29, R10, -12064 */
		/* 82209FF4h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD0E0);
		/* 82209FF4h case   11:*/		return 0x82209FF8;
		  /* 82209FF8h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 82209FF8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220A018;  }
		/* 82209FF8h case   12:*/		return 0x82209FFC;
		  /* 82209FFCh */ case   13:  		/* lis R11, -32252 */
		/* 82209FFCh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82209FFCh case   13:*/		return 0x8220A000;
		  /* 8220A000h */ case   14:  		/* mr R6, R29 */
		/* 8220A000h case   14:*/		regs.R6 = regs.R29;
		/* 8220A000h case   14:*/		return 0x8220A004;
		  /* 8220A004h */ case   15:  		/* addi R5, R11, -21620 */
		/* 8220A004h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220A004h case   15:*/		return 0x8220A008;
		  /* 8220A008h */ case   16:  		/* mr R4, R30 */
		/* 8220A008h case   16:*/		regs.R4 = regs.R30;
		/* 8220A008h case   16:*/		return 0x8220A00C;
		  /* 8220A00Ch */ case   17:  		/* li R7, 105 */
		/* 8220A00Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x69);
		/* 8220A00Ch case   17:*/		return 0x8220A010;
		  /* 8220A010h */ case   18:  		/* li R3, 0 */
		/* 8220A010h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A010h case   18:*/		return 0x8220A014;
		  /* 8220A014h */ case   19:  		/* bl -730124 */
		/* 8220A014h case   19:*/		regs.LR = 0x8220A018; return 0x82157C08;
		/* 8220A014h case   19:*/		return 0x8220A018;
	}
	return 0x8220A018;
} // Block from 82209FC8h-8220A018h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220A018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A018);
		  /* 8220A018h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8220A018h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220A018h case    0:*/		return 0x8220A01C;
		  /* 8220A01Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A01Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220A03C;  }
		/* 8220A01Ch case    1:*/		return 0x8220A020;
		  /* 8220A020h */ case    2:  		/* lis R11, -32252 */
		/* 8220A020h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A020h case    2:*/		return 0x8220A024;
		  /* 8220A024h */ case    3:  		/* mr R6, R29 */
		/* 8220A024h case    3:*/		regs.R6 = regs.R29;
		/* 8220A024h case    3:*/		return 0x8220A028;
		  /* 8220A028h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220A028h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220A028h case    4:*/		return 0x8220A02C;
		  /* 8220A02Ch */ case    5:  		/* mr R4, R30 */
		/* 8220A02Ch case    5:*/		regs.R4 = regs.R30;
		/* 8220A02Ch case    5:*/		return 0x8220A030;
		  /* 8220A030h */ case    6:  		/* li R7, 106 */
		/* 8220A030h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6A);
		/* 8220A030h case    6:*/		return 0x8220A034;
		  /* 8220A034h */ case    7:  		/* li R3, 0 */
		/* 8220A034h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A034h case    7:*/		return 0x8220A038;
		  /* 8220A038h */ case    8:  		/* bl -730160 */
		/* 8220A038h case    8:*/		regs.LR = 0x8220A03C; return 0x82157C08;
		/* 8220A038h case    8:*/		return 0x8220A03C;
	}
	return 0x8220A03C;
} // Block from 8220A018h-8220A03Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A03C);
		  /* 8220A03Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8220A03Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8220A03Ch case    0:*/		return 0x8220A040;
		  /* 8220A040h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A040h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220A060;  }
		/* 8220A040h case    1:*/		return 0x8220A044;
		  /* 8220A044h */ case    2:  		/* lis R11, -32252 */
		/* 8220A044h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A044h case    2:*/		return 0x8220A048;
		  /* 8220A048h */ case    3:  		/* mr R6, R29 */
		/* 8220A048h case    3:*/		regs.R6 = regs.R29;
		/* 8220A048h case    3:*/		return 0x8220A04C;
		  /* 8220A04Ch */ case    4:  		/* addi R5, R11, -12080 */
		/* 8220A04Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD0D0);
		/* 8220A04Ch case    4:*/		return 0x8220A050;
		  /* 8220A050h */ case    5:  		/* mr R4, R30 */
		/* 8220A050h case    5:*/		regs.R4 = regs.R30;
		/* 8220A050h case    5:*/		return 0x8220A054;
		  /* 8220A054h */ case    6:  		/* li R7, 107 */
		/* 8220A054h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6B);
		/* 8220A054h case    6:*/		return 0x8220A058;
		  /* 8220A058h */ case    7:  		/* li R3, 0 */
		/* 8220A058h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A058h case    7:*/		return 0x8220A05C;
		  /* 8220A05Ch */ case    8:  		/* bl -730196 */
		/* 8220A05Ch case    8:*/		regs.LR = 0x8220A060; return 0x82157C08;
		/* 8220A05Ch case    8:*/		return 0x8220A060;
	}
	return 0x8220A060;
} // Block from 8220A03Ch-8220A060h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A060);
		  /* 8220A060h */ case    0:  		/* li R4, 56 */
		/* 8220A060h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x38);
		/* 8220A060h case    0:*/		return 0x8220A064;
		  /* 8220A064h */ case    1:  		/* mtspr CTR, R31 */
		/* 8220A064h case    1:*/		regs.CTR = regs.R31;
		/* 8220A064h case    1:*/		return 0x8220A068;
		  /* 8220A068h */ case    2:  		/* mr R3, R28 */
		/* 8220A068h case    2:*/		regs.R3 = regs.R28;
		/* 8220A068h case    2:*/		return 0x8220A06C;
		  /* 8220A06Ch */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220A06Ch case    3:*/		if ( 1 ) { regs.LR = 0x8220A070; return (uint32)regs.CTR; }
		/* 8220A06Ch case    3:*/		return 0x8220A070;
		  /* 8220A070h */ case    4:  		/* or. R27, R3, R3 */
		/* 8220A070h case    4:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 8220A070h case    4:*/		return 0x8220A074;
		  /* 8220A074h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8220A074h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220A098;  }
		/* 8220A074h case    5:*/		return 0x8220A078;
		  /* 8220A078h */ case    6:  		/* lis R11, -32252 */
		/* 8220A078h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A078h case    6:*/		return 0x8220A07C;
		  /* 8220A07Ch */ case    7:  		/* mr R6, R29 */
		/* 8220A07Ch case    7:*/		regs.R6 = regs.R29;
		/* 8220A07Ch case    7:*/		return 0x8220A080;
		  /* 8220A080h */ case    8:  		/* addi R5, R11, -12084 */
		/* 8220A080h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD0CC);
		/* 8220A080h case    8:*/		return 0x8220A084;
		  /* 8220A084h */ case    9:  		/* mr R4, R30 */
		/* 8220A084h case    9:*/		regs.R4 = regs.R30;
		/* 8220A084h case    9:*/		return 0x8220A088;
		  /* 8220A088h */ case   10:  		/* li R7, 113 */
		/* 8220A088h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x71);
		/* 8220A088h case   10:*/		return 0x8220A08C;
		  /* 8220A08Ch */ case   11:  		/* li R3, 0 */
		/* 8220A08Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A08Ch case   11:*/		return 0x8220A090;
		  /* 8220A090h */ case   12:  		/* bl -730248 */
		/* 8220A090h case   12:*/		regs.LR = 0x8220A094; return 0x82157C08;
		/* 8220A090h case   12:*/		return 0x8220A094;
		  /* 8220A094h */ case   13:  		/* b 124 */
		/* 8220A094h case   13:*/		return 0x8220A110;
		/* 8220A094h case   13:*/		return 0x8220A098;
	}
	return 0x8220A098;
} // Block from 8220A060h-8220A098h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220A098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A098);
		  /* 8220A098h */ case    0:  		/* lis R11, -32217 */
		/* 8220A098h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8220A098h case    0:*/		return 0x8220A09C;
		  /* 8220A09Ch */ case    1:  		/* stw R28, <#[R27]> */
		/* 8220A09Ch case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 8220A09Ch case    1:*/		return 0x8220A0A0;
		  /* 8220A0A0h */ case    2:  		/* addi R26, R27, 8 */
		/* 8220A0A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R27,0x8);
		/* 8220A0A0h case    2:*/		return 0x8220A0A4;
		  /* 8220A0A4h */ case    3:  		/* stw R25, <#[R27 + 4]> */
		/* 8220A0A4h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R27 + 0x00000004) );
		/* 8220A0A4h case    3:*/		return 0x8220A0A8;
		  /* 8220A0A8h */ case    4:  		/* addi R11, R11, 22584 */
		/* 8220A0A8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5838);
		/* 8220A0A8h case    4:*/		return 0x8220A0AC;
		  /* 8220A0ACh */ case    5:  		/* mr R31, R26 */
		/* 8220A0ACh case    5:*/		regs.R31 = regs.R26;
		/* 8220A0ACh case    5:*/		return 0x8220A0B0;
		  /* 8220A0B0h */ case    6:  		/* addi R30, R11, -4 */
		/* 8220A0B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 8220A0B0h case    6:*/		return 0x8220A0B4;
		  /* 8220A0B4h */ case    7:  		/* li R29, 12 */
		/* 8220A0B4h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0xC);
		/* 8220A0B4h case    7:*/		return 0x8220A0B8;
		  /* 8220A0B8h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 8220A0B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220A0B8h case    8:*/		return 0x8220A0BC;
		  /* 8220A0BCh */ case    9:  		/* mr R5, R31 */
		/* 8220A0BCh case    9:*/		regs.R5 = regs.R31;
		/* 8220A0BCh case    9:*/		return 0x8220A0C0;
		  /* 8220A0C0h */ case   10:  		/* mr R3, R28 */
		/* 8220A0C0h case   10:*/		regs.R3 = regs.R28;
		/* 8220A0C0h case   10:*/		return 0x8220A0C4;
		  /* 8220A0C4h */ case   11:  		/* mtspr CTR, R24 */
		/* 8220A0C4h case   11:*/		regs.CTR = regs.R24;
		/* 8220A0C4h case   11:*/		return 0x8220A0C8;
		  /* 8220A0C8h */ case   12:  		/* stw R11, <#[R31]> */
		/* 8220A0C8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220A0C8h case   12:*/		return 0x8220A0CC;
		  /* 8220A0CCh */ case   13:  		/* lwzu R4, <#[R30 + 8]> */
		/* 8220A0CCh case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		regs.R30 = (uint32)(regs.R30 + 0x00000008);
		/* 8220A0CCh case   13:*/		return 0x8220A0D0;
		  /* 8220A0D0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8220A0D0h case   14:*/		if ( 1 ) { regs.LR = 0x8220A0D4; return (uint32)regs.CTR; }
		/* 8220A0D0h case   14:*/		return 0x8220A0D4;
		  /* 8220A0D4h */ case   15:  		/* addic. R29, R29, -1 */
		/* 8220A0D4h case   15:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8220A0D4h case   15:*/		return 0x8220A0D8;
		  /* 8220A0D8h */ case   16:  		/* addi R31, R31, 4 */
		/* 8220A0D8h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220A0D8h case   16:*/		return 0x8220A0DC;
		  /* 8220A0DCh */ case   17:  		/* bc 4, CR0_EQ, -36 */
		/* 8220A0DCh case   17:*/		if ( !regs.CR[0].eq ) { return 0x8220A0B8;  }
		/* 8220A0DCh case   17:*/		return 0x8220A0E0;
		  /* 8220A0E0h */ case   18:  		/* li R31, 0 */
		/* 8220A0E0h case   18:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220A0E0h case   18:*/		return 0x8220A0E4;
		  /* 8220A0E4h */ case   19:  		/* mtspr CTR, R24 */
		/* 8220A0E4h case   19:*/		regs.CTR = regs.R24;
		/* 8220A0E4h case   19:*/		return 0x8220A0E8;
		  /* 8220A0E8h */ case   20:  		/* lis R11, -32252 */
		/* 8220A0E8h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A0E8h case   20:*/		return 0x8220A0EC;
		  /* 8220A0ECh */ case   21:  		/* stw R31, <#[R1 + 80]> */
		/* 8220A0ECh case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 8220A0ECh case   21:*/		return 0x8220A0F0;
		  /* 8220A0F0h */ case   22:  		/* addi R5, R1, 80 */
		/* 8220A0F0h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8220A0F0h case   22:*/		return 0x8220A0F4;
		  /* 8220A0F4h */ case   23:  		/* addi R4, R11, -12116 */
		/* 8220A0F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD0AC);
		/* 8220A0F4h case   23:*/		return 0x8220A0F8;
		  /* 8220A0F8h */ case   24:  		/* mr R3, R28 */
		/* 8220A0F8h case   24:*/		regs.R3 = regs.R28;
		/* 8220A0F8h case   24:*/		return 0x8220A0FC;
		  /* 8220A0FCh */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 8220A0FCh case   25:*/		if ( 1 ) { regs.LR = 0x8220A100; return (uint32)regs.CTR; }
		/* 8220A0FCh case   25:*/		return 0x8220A100;
		  /* 8220A100h */ case   26:  		/* lwz R11, <#[R1 + 80]> */
		/* 8220A100h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8220A100h case   26:*/		return 0x8220A104;
		  /* 8220A104h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 8220A104h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220A104h case   27:*/		return 0x8220A108;
		  /* 8220A108h */ case   28:  		/* bc 4, CR6_EQ, 8 */
		/* 8220A108h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8220A110;  }
		/* 8220A108h case   28:*/		return 0x8220A10C;
		  /* 8220A10Ch */ case   29:  		/* stw R31, <#[R26]> */
		/* 8220A10Ch case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8220A10Ch case   29:*/		return 0x8220A110;
	}
	return 0x8220A110;
} // Block from 8220A098h-8220A110h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8220A110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A110);
		  /* 8220A110h */ case    0:  		/* mr R3, R27 */
		/* 8220A110h case    0:*/		regs.R3 = regs.R27;
		/* 8220A110h case    0:*/		return 0x8220A114;
		  /* 8220A114h */ case    1:  		/* addi R1, R1, 160 */
		/* 8220A114h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220A114h case    1:*/		return 0x8220A118;
		  /* 8220A118h */ case    2:  		/* b -1543808 */
		/* 8220A118h case    2:*/		return 0x82091298;
		/* 8220A118h case    2:*/		return 0x8220A11C;
		  /* 8220A11Ch */ case    3:  		/* nop */
		/* 8220A11Ch case    3:*/		cpu::op::nop();
		/* 8220A11Ch case    3:*/		return 0x8220A120;
	}
	return 0x8220A120;
} // Block from 8220A110h-8220A120h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220A120h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A120);
		  /* 8220A120h */ case    0:  		/* mfspr R12, LR */
		/* 8220A120h case    0:*/		regs.R12 = regs.LR;
		/* 8220A120h case    0:*/		return 0x8220A124;
		  /* 8220A124h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220A124h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220A124h case    1:*/		return 0x8220A128;
		  /* 8220A128h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8220A128h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220A128h case    2:*/		return 0x8220A12C;
		  /* 8220A12Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220A12Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220A12Ch case    3:*/		return 0x8220A130;
		  /* 8220A130h */ case    4:  		/* mr R31, R3 */
		/* 8220A130h case    4:*/		regs.R31 = regs.R3;
		/* 8220A130h case    4:*/		return 0x8220A134;
		  /* 8220A134h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8220A134h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220A134h case    5:*/		return 0x8220A138;
		  /* 8220A138h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8220A138h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8220A15C;  }
		/* 8220A138h case    6:*/		return 0x8220A13C;
		  /* 8220A13Ch */ case    7:  		/* lis R11, -32252 */
		/* 8220A13Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A13Ch case    7:*/		return 0x8220A140;
		  /* 8220A140h */ case    8:  		/* lis R10, -32252 */
		/* 8220A140h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220A140h case    8:*/		return 0x8220A144;
		  /* 8220A144h */ case    9:  		/* lis R9, -32253 */
		/* 8220A144h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220A144h case    9:*/		return 0x8220A148;
		  /* 8220A148h */ case   10:  		/* addi R6, R11, -12064 */
		/* 8220A148h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD0E0);
		/* 8220A148h case   10:*/		return 0x8220A14C;
		  /* 8220A14Ch */ case   11:  		/* addi R5, R10, -11964 */
		/* 8220A14Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFD144);
		/* 8220A14Ch case   11:*/		return 0x8220A150;
		  /* 8220A150h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8220A150h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220A150h case   12:*/		return 0x8220A154;
		  /* 8220A154h */ case   13:  		/* li R7, 174 */
		/* 8220A154h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xAE);
		/* 8220A154h case   13:*/		return 0x8220A158;
		  /* 8220A158h */ case   14:  		/* bl -730448 */
		/* 8220A158h case   14:*/		regs.LR = 0x8220A15C; return 0x82157C08;
		/* 8220A158h case   14:*/		return 0x8220A15C;
	}
	return 0x8220A15C;
} // Block from 8220A120h-8220A15Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220A15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A15C);
		  /* 8220A15Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220A15Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220A15Ch case    0:*/		return 0x8220A160;
		  /* 8220A160h */ case    1:  		/* mr R4, R31 */
		/* 8220A160h case    1:*/		regs.R4 = regs.R31;
		/* 8220A160h case    1:*/		return 0x8220A164;
		  /* 8220A164h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8220A164h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220A164h case    2:*/		return 0x8220A168;
		  /* 8220A168h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220A168h case    3:*/		regs.CTR = regs.R11;
		/* 8220A168h case    3:*/		return 0x8220A16C;
		  /* 8220A16Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220A16Ch case    4:*/		if ( 1 ) { regs.LR = 0x8220A170; return (uint32)regs.CTR; }
		/* 8220A16Ch case    4:*/		return 0x8220A170;
		  /* 8220A170h */ case    5:  		/* addi R1, R1, 96 */
		/* 8220A170h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220A170h case    5:*/		return 0x8220A174;
		  /* 8220A174h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220A174h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220A174h case    6:*/		return 0x8220A178;
		  /* 8220A178h */ case    7:  		/* mtspr LR, R12 */
		/* 8220A178h case    7:*/		regs.LR = regs.R12;
		/* 8220A178h case    7:*/		return 0x8220A17C;
		  /* 8220A17Ch */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 8220A17Ch case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220A17Ch case    8:*/		return 0x8220A180;
		  /* 8220A180h */ case    9:  		/* bclr 20, CR0_LT */
		/* 8220A180h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220A180h case    9:*/		return 0x8220A184;
	}
	return 0x8220A184;
} // Block from 8220A15Ch-8220A184h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220A184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A184);
		  /* 8220A184h */ case    0:  		/* nop */
		/* 8220A184h case    0:*/		cpu::op::nop();
		/* 8220A184h case    0:*/		return 0x8220A188;
	}
	return 0x8220A188;
} // Block from 8220A184h-8220A188h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220A188h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A188);
		  /* 8220A188h */ case    0:  		/* mfspr R12, LR */
		/* 8220A188h case    0:*/		regs.R12 = regs.LR;
		/* 8220A188h case    0:*/		return 0x8220A18C;
		  /* 8220A18Ch */ case    1:  		/* bl -1543988 */
		/* 8220A18Ch case    1:*/		regs.LR = 0x8220A190; return 0x82091258;
		/* 8220A18Ch case    1:*/		return 0x8220A190;
		  /* 8220A190h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220A190h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220A190h case    2:*/		return 0x8220A194;
		  /* 8220A194h */ case    3:  		/* lis R11, -32253 */
		/* 8220A194h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220A194h case    3:*/		return 0x8220A198;
		  /* 8220A198h */ case    4:  		/* lis R10, -32252 */
		/* 8220A198h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220A198h case    4:*/		return 0x8220A19C;
		  /* 8220A19Ch */ case    5:  		/* mr R31, R3 */
		/* 8220A19Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220A19Ch case    5:*/		return 0x8220A1A0;
		  /* 8220A1A0h */ case    6:  		/* mr R28, R4 */
		/* 8220A1A0h case    6:*/		regs.R28 = regs.R4;
		/* 8220A1A0h case    6:*/		return 0x8220A1A4;
		  /* 8220A1A4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220A1A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220A1A4h case    7:*/		return 0x8220A1A8;
		  /* 8220A1A8h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8220A1A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220A1A8h case    8:*/		return 0x8220A1AC;
		  /* 8220A1ACh */ case    9:  		/* addi R29, R10, -12064 */
		/* 8220A1ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD0E0);
		/* 8220A1ACh case    9:*/		return 0x8220A1B0;
		  /* 8220A1B0h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A1B0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220A1D0;  }
		/* 8220A1B0h case   10:*/		return 0x8220A1B4;
		  /* 8220A1B4h */ case   11:  		/* lis R11, -32252 */
		/* 8220A1B4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A1B4h case   11:*/		return 0x8220A1B8;
		  /* 8220A1B8h */ case   12:  		/* mr R6, R29 */
		/* 8220A1B8h case   12:*/		regs.R6 = regs.R29;
		/* 8220A1B8h case   12:*/		return 0x8220A1BC;
		  /* 8220A1BCh */ case   13:  		/* addi R5, R11, -11964 */
		/* 8220A1BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD144);
		/* 8220A1BCh case   13:*/		return 0x8220A1C0;
		  /* 8220A1C0h */ case   14:  		/* mr R4, R30 */
		/* 8220A1C0h case   14:*/		regs.R4 = regs.R30;
		/* 8220A1C0h case   14:*/		return 0x8220A1C4;
		  /* 8220A1C4h */ case   15:  		/* li R7, 182 */
		/* 8220A1C4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xB6);
		/* 8220A1C4h case   15:*/		return 0x8220A1C8;
		  /* 8220A1C8h */ case   16:  		/* li R3, 0 */
		/* 8220A1C8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A1C8h case   16:*/		return 0x8220A1CC;
		  /* 8220A1CCh */ case   17:  		/* bl -730564 */
		/* 8220A1CCh case   17:*/		regs.LR = 0x8220A1D0; return 0x82157C08;
		/* 8220A1CCh case   17:*/		return 0x8220A1D0;
	}
	return 0x8220A1D0;
} // Block from 8220A188h-8220A1D0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220A1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A1D0);
		  /* 8220A1D0h */ case    0:  		/* cmpwi CR6, R28, 12 */
		/* 8220A1D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000000C);
		/* 8220A1D0h case    0:*/		return 0x8220A1D4;
		  /* 8220A1D4h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 8220A1D4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8220A1F4;  }
		/* 8220A1D4h case    1:*/		return 0x8220A1D8;
		  /* 8220A1D8h */ case    2:  		/* lis R11, -32252 */
		/* 8220A1D8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A1D8h case    2:*/		return 0x8220A1DC;
		  /* 8220A1DCh */ case    3:  		/* mr R6, R29 */
		/* 8220A1DCh case    3:*/		regs.R6 = regs.R29;
		/* 8220A1DCh case    3:*/		return 0x8220A1E0;
		  /* 8220A1E0h */ case    4:  		/* addi R5, R11, -11960 */
		/* 8220A1E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD148);
		/* 8220A1E0h case    4:*/		return 0x8220A1E4;
		  /* 8220A1E4h */ case    5:  		/* mr R4, R30 */
		/* 8220A1E4h case    5:*/		regs.R4 = regs.R30;
		/* 8220A1E4h case    5:*/		return 0x8220A1E8;
		  /* 8220A1E8h */ case    6:  		/* li R7, 183 */
		/* 8220A1E8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xB7);
		/* 8220A1E8h case    6:*/		return 0x8220A1EC;
		  /* 8220A1ECh */ case    7:  		/* li R3, 0 */
		/* 8220A1ECh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A1ECh case    7:*/		return 0x8220A1F0;
		  /* 8220A1F0h */ case    8:  		/* bl -730600 */
		/* 8220A1F0h case    8:*/		regs.LR = 0x8220A1F4; return 0x82157C08;
		/* 8220A1F0h case    8:*/		return 0x8220A1F4;
	}
	return 0x8220A1F4;
} // Block from 8220A1D0h-8220A1F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A1F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A1F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A1F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A1F4);
		  /* 8220A1F4h */ case    0:  		/* addi R11, R28, 2 */
		/* 8220A1F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x2);
		/* 8220A1F4h case    0:*/		return 0x8220A1F8;
		  /* 8220A1F8h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220A1F8h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220A1F8h case    1:*/		return 0x8220A1FC;
		  /* 8220A1FCh */ case    2:  		/* lwzx R3, <#[R11 + R31]> */
		/* 8220A1FCh case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8220A1FCh case    2:*/		return 0x8220A200;
		  /* 8220A200h */ case    3:  		/* addi R1, R1, 128 */
		/* 8220A200h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220A200h case    3:*/		return 0x8220A204;
		  /* 8220A204h */ case    4:  		/* b -1544028 */
		/* 8220A204h case    4:*/		return 0x820912A8;
		/* 8220A204h case    4:*/		return 0x8220A208;
		  /* 8220A208h */ case    5:  		/* li R11, 0 */
		/* 8220A208h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220A208h case    5:*/		return 0x8220A20C;
		  /* 8220A20Ch */ case    6:  		/* cmplwi CR6, R3, 7 */
		/* 8220A20Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000007);
		/* 8220A20Ch case    6:*/		return 0x8220A210;
		  /* 8220A210h */ case    7:  		/* bc 12, CR6_GT, 100 */
		/* 8220A210h case    7:*/		if ( regs.CR[6].gt ) { return 0x8220A274;  }
		/* 8220A210h case    7:*/		return 0x8220A214;
		  /* 8220A214h */ case    8:  		/* mtspr CTR, R3 */
		/* 8220A214h case    8:*/		regs.CTR = regs.R3;
		/* 8220A214h case    8:*/		return 0x8220A218;
		  /* 8220A218h */ case    9:  		/* cmpwi CR6, R3, 0 */
		/* 8220A218h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8220A218h case    9:*/		return 0x8220A21C;
		  /* 8220A21Ch */ case   10:  		/* bc 2, CR6_EQ, 36 */
		/* 8220A21Ch case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x8220A240;  }
		/* 8220A21Ch case   10:*/		return 0x8220A220;
		  /* 8220A220h */ case   11:  		/* bc 2, CR6_EQ, 40 */
		/* 8220A220h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x8220A248;  }
		/* 8220A220h case   11:*/		return 0x8220A224;
		  /* 8220A224h */ case   12:  		/* bc 2, CR6_EQ, 44 */
		/* 8220A224h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x8220A250;  }
		/* 8220A224h case   12:*/		return 0x8220A228;
		  /* 8220A228h */ case   13:  		/* bc 2, CR6_EQ, 48 */
		/* 8220A228h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x8220A258;  }
		/* 8220A228h case   13:*/		return 0x8220A22C;
		  /* 8220A22Ch */ case   14:  		/* bc 2, CR6_EQ, 52 */
		/* 8220A22Ch case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x8220A260;  }
		/* 8220A22Ch case   14:*/		return 0x8220A230;
		  /* 8220A230h */ case   15:  		/* bc 2, CR6_EQ, 56 */
		/* 8220A230h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x8220A268;  }
		/* 8220A230h case   15:*/		return 0x8220A234;
		  /* 8220A234h */ case   16:  		/* bc 4, CR6_EQ, 60 */
		/* 8220A234h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8220A270;  }
		/* 8220A234h case   16:*/		return 0x8220A238;
		  /* 8220A238h */ case   17:  		/* li R11, 16 */
		/* 8220A238h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8220A238h case   17:*/		return 0x8220A23C;
		  /* 8220A23Ch */ case   18:  		/* b 56 */
		/* 8220A23Ch case   18:*/		return 0x8220A274;
		/* 8220A23Ch case   18:*/		return 0x8220A240;
	}
	return 0x8220A240;
} // Block from 8220A1F4h-8220A240h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220A240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A240);
		  /* 8220A240h */ case    0:  		/* li R11, 32 */
		/* 8220A240h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8220A240h case    0:*/		return 0x8220A244;
		  /* 8220A244h */ case    1:  		/* b 48 */
		/* 8220A244h case    1:*/		return 0x8220A274;
		/* 8220A244h case    1:*/		return 0x8220A248;
	}
	return 0x8220A248;
} // Block from 8220A240h-8220A248h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A248);
		  /* 8220A248h */ case    0:  		/* li R11, 64 */
		/* 8220A248h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 8220A248h case    0:*/		return 0x8220A24C;
		  /* 8220A24Ch */ case    1:  		/* b 40 */
		/* 8220A24Ch case    1:*/		return 0x8220A274;
		/* 8220A24Ch case    1:*/		return 0x8220A250;
	}
	return 0x8220A250;
} // Block from 8220A248h-8220A250h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A250);
		  /* 8220A250h */ case    0:  		/* li R11, 128 */
		/* 8220A250h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x80);
		/* 8220A250h case    0:*/		return 0x8220A254;
		  /* 8220A254h */ case    1:  		/* b 32 */
		/* 8220A254h case    1:*/		return 0x8220A274;
		/* 8220A254h case    1:*/		return 0x8220A258;
	}
	return 0x8220A258;
} // Block from 8220A250h-8220A258h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A258);
		  /* 8220A258h */ case    0:  		/* li R11, 256 */
		/* 8220A258h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x100);
		/* 8220A258h case    0:*/		return 0x8220A25C;
		  /* 8220A25Ch */ case    1:  		/* b 24 */
		/* 8220A25Ch case    1:*/		return 0x8220A274;
		/* 8220A25Ch case    1:*/		return 0x8220A260;
	}
	return 0x8220A260;
} // Block from 8220A258h-8220A260h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A260);
		  /* 8220A260h */ case    0:  		/* li R11, 512 */
		/* 8220A260h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x200);
		/* 8220A260h case    0:*/		return 0x8220A264;
		  /* 8220A264h */ case    1:  		/* b 16 */
		/* 8220A264h case    1:*/		return 0x8220A274;
		/* 8220A264h case    1:*/		return 0x8220A268;
	}
	return 0x8220A268;
} // Block from 8220A260h-8220A268h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A268);
		  /* 8220A268h */ case    0:  		/* li R11, 1024 */
		/* 8220A268h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x400);
		/* 8220A268h case    0:*/		return 0x8220A26C;
		  /* 8220A26Ch */ case    1:  		/* b 8 */
		/* 8220A26Ch case    1:*/		return 0x8220A274;
		/* 8220A26Ch case    1:*/		return 0x8220A270;
	}
	return 0x8220A270;
} // Block from 8220A268h-8220A270h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A270);
		  /* 8220A270h */ case    0:  		/* li R11, 2048 */
		/* 8220A270h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x800);
		/* 8220A270h case    0:*/		return 0x8220A274;
	}
	return 0x8220A274;
} // Block from 8220A270h-8220A274h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220A274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A274);
		  /* 8220A274h */ case    0:  		/* mr R3, R11 */
		/* 8220A274h case    0:*/		regs.R3 = regs.R11;
		/* 8220A274h case    0:*/		return 0x8220A278;
		  /* 8220A278h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8220A278h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220A278h case    1:*/		return 0x8220A27C;
	}
	return 0x8220A27C;
} // Block from 8220A274h-8220A27Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220A27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A27C);
		  /* 8220A27Ch */ case    0:  		/* nop */
		/* 8220A27Ch case    0:*/		cpu::op::nop();
		/* 8220A27Ch case    0:*/		return 0x8220A280;
	}
	return 0x8220A280;
} // Block from 8220A27Ch-8220A280h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220A280h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A280);
		  /* 8220A280h */ case    0:  		/* mfspr R12, LR */
		/* 8220A280h case    0:*/		regs.R12 = regs.LR;
		/* 8220A280h case    0:*/		return 0x8220A284;
		  /* 8220A284h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220A284h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220A284h case    1:*/		return 0x8220A288;
		  /* 8220A288h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8220A288h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220A288h case    2:*/		return 0x8220A28C;
		  /* 8220A28Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220A28Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220A28Ch case    3:*/		return 0x8220A290;
		  /* 8220A290h */ case    4:  		/* li R5, 0 */
		/* 8220A290h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A290h case    4:*/		return 0x8220A294;
		  /* 8220A294h */ case    5:  		/* li R4, 0 */
		/* 8220A294h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220A294h case    5:*/		return 0x8220A298;
		  /* 8220A298h */ case    6:  		/* mr R31, R3 */
		/* 8220A298h case    6:*/		regs.R31 = regs.R3;
		/* 8220A298h case    6:*/		return 0x8220A29C;
		  /* 8220A29Ch */ case    7:  		/* bl -776132 */
		/* 8220A29Ch case    7:*/		regs.LR = 0x8220A2A0; return 0x8214CAD8;
		/* 8220A29Ch case    7:*/		return 0x8220A2A0;
		  /* 8220A2A0h */ case    8:  		/* mr R3, R31 */
		/* 8220A2A0h case    8:*/		regs.R3 = regs.R31;
		/* 8220A2A0h case    8:*/		return 0x8220A2A4;
		  /* 8220A2A4h */ case    9:  		/* li R5, 0 */
		/* 8220A2A4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A2A4h case    9:*/		return 0x8220A2A8;
		  /* 8220A2A8h */ case   10:  		/* li R4, 1 */
		/* 8220A2A8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8220A2A8h case   10:*/		return 0x8220A2AC;
		  /* 8220A2ACh */ case   11:  		/* bl -776148 */
		/* 8220A2ACh case   11:*/		regs.LR = 0x8220A2B0; return 0x8214CAD8;
		/* 8220A2ACh case   11:*/		return 0x8220A2B0;
		  /* 8220A2B0h */ case   12:  		/* mr R3, R31 */
		/* 8220A2B0h case   12:*/		regs.R3 = regs.R31;
		/* 8220A2B0h case   12:*/		return 0x8220A2B4;
		  /* 8220A2B4h */ case   13:  		/* li R5, 0 */
		/* 8220A2B4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A2B4h case   13:*/		return 0x8220A2B8;
		  /* 8220A2B8h */ case   14:  		/* li R4, 88 */
		/* 8220A2B8h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 8220A2B8h case   14:*/		return 0x8220A2BC;
		  /* 8220A2BCh */ case   15:  		/* bl -776164 */
		/* 8220A2BCh case   15:*/		regs.LR = 0x8220A2C0; return 0x8214CAD8;
		/* 8220A2BCh case   15:*/		return 0x8220A2C0;
		  /* 8220A2C0h */ case   16:  		/* mr R3, R31 */
		/* 8220A2C0h case   16:*/		regs.R3 = regs.R31;
		/* 8220A2C0h case   16:*/		return 0x8220A2C4;
		  /* 8220A2C4h */ case   17:  		/* li R5, 0 */
		/* 8220A2C4h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A2C4h case   17:*/		return 0x8220A2C8;
		  /* 8220A2C8h */ case   18:  		/* li R4, 89 */
		/* 8220A2C8h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x59);
		/* 8220A2C8h case   18:*/		return 0x8220A2CC;
		  /* 8220A2CCh */ case   19:  		/* bl -776180 */
		/* 8220A2CCh case   19:*/		regs.LR = 0x8220A2D0; return 0x8214CAD8;
		/* 8220A2CCh case   19:*/		return 0x8220A2D0;
		  /* 8220A2D0h */ case   20:  		/* mr R3, R31 */
		/* 8220A2D0h case   20:*/		regs.R3 = regs.R31;
		/* 8220A2D0h case   20:*/		return 0x8220A2D4;
		  /* 8220A2D4h */ case   21:  		/* li R5, 8192 */
		/* 8220A2D4h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 8220A2D4h case   21:*/		return 0x8220A2D8;
		  /* 8220A2D8h */ case   22:  		/* li R4, 90 */
		/* 8220A2D8h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x5A);
		/* 8220A2D8h case   22:*/		return 0x8220A2DC;
		  /* 8220A2DCh */ case   23:  		/* bl -776196 */
		/* 8220A2DCh case   23:*/		regs.LR = 0x8220A2E0; return 0x8214CAD8;
		/* 8220A2DCh case   23:*/		return 0x8220A2E0;
		  /* 8220A2E0h */ case   24:  		/* mr R3, R31 */
		/* 8220A2E0h case   24:*/		regs.R3 = regs.R31;
		/* 8220A2E0h case   24:*/		return 0x8220A2E4;
		  /* 8220A2E4h */ case   25:  		/* li R5, 8192 */
		/* 8220A2E4h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 8220A2E4h case   25:*/		return 0x8220A2E8;
		  /* 8220A2E8h */ case   26:  		/* li R4, 91 */
		/* 8220A2E8h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x5B);
		/* 8220A2E8h case   26:*/		return 0x8220A2EC;
		  /* 8220A2ECh */ case   27:  		/* bl -776212 */
		/* 8220A2ECh case   27:*/		regs.LR = 0x8220A2F0; return 0x8214CAD8;
		/* 8220A2ECh case   27:*/		return 0x8220A2F0;
		  /* 8220A2F0h */ case   28:  		/* mr R3, R31 */
		/* 8220A2F0h case   28:*/		regs.R3 = regs.R31;
		/* 8220A2F0h case   28:*/		return 0x8220A2F4;
		  /* 8220A2F4h */ case   29:  		/* li R5, 0 */
		/* 8220A2F4h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A2F4h case   29:*/		return 0x8220A2F8;
		  /* 8220A2F8h */ case   30:  		/* li R4, 1003 */
		/* 8220A2F8h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x3EB);
		/* 8220A2F8h case   30:*/		return 0x8220A2FC;
		  /* 8220A2FCh */ case   31:  		/* bl -776228 */
		/* 8220A2FCh case   31:*/		regs.LR = 0x8220A300; return 0x8214CAD8;
		/* 8220A2FCh case   31:*/		return 0x8220A300;
		  /* 8220A300h */ case   32:  		/* lis R5, 255 */
		/* 8220A300h case   32:*/		cpu::op::lis<0>(regs,&regs.R5,0xFF);
		/* 8220A300h case   32:*/		return 0x8220A304;
		  /* 8220A304h */ case   33:  		/* mr R3, R31 */
		/* 8220A304h case   33:*/		regs.R3 = regs.R31;
		/* 8220A304h case   33:*/		return 0x8220A308;
		  /* 8220A308h */ case   34:  		/* ori R5, R5, 65535 */
		/* 8220A308h case   34:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0xFFFF);
		/* 8220A308h case   34:*/		return 0x8220A30C;
		  /* 8220A30Ch */ case   35:  		/* li R4, 1004 */
		/* 8220A30Ch case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x3EC);
		/* 8220A30Ch case   35:*/		return 0x8220A310;
		  /* 8220A310h */ case   36:  		/* bl -776248 */
		/* 8220A310h case   36:*/		regs.LR = 0x8220A314; return 0x8214CAD8;
		/* 8220A310h case   36:*/		return 0x8220A314;
		  /* 8220A314h */ case   37:  		/* mr R3, R31 */
		/* 8220A314h case   37:*/		regs.R3 = regs.R31;
		/* 8220A314h case   37:*/		return 0x8220A318;
		  /* 8220A318h */ case   38:  		/* li R6, 1 */
		/* 8220A318h case   38:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8220A318h case   38:*/		return 0x8220A31C;
		  /* 8220A31Ch */ case   39:  		/* li R5, 0 */
		/* 8220A31Ch case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A31Ch case   39:*/		return 0x8220A320;
		  /* 8220A320h */ case   40:  		/* li R4, 50 */
		/* 8220A320h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x32);
		/* 8220A320h case   40:*/		return 0x8220A324;
		  /* 8220A324h */ case   41:  		/* bl -776028 */
		/* 8220A324h case   41:*/		regs.LR = 0x8220A328; return 0x8214CBC8;
		/* 8220A324h case   41:*/		return 0x8220A328;
		  /* 8220A328h */ case   42:  		/* mr R3, R31 */
		/* 8220A328h case   42:*/		regs.R3 = regs.R31;
		/* 8220A328h case   42:*/		return 0x8220A32C;
		  /* 8220A32Ch */ case   43:  		/* li R6, 1 */
		/* 8220A32Ch case   43:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8220A32Ch case   43:*/		return 0x8220A330;
		  /* 8220A330h */ case   44:  		/* li R5, 0 */
		/* 8220A330h case   44:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A330h case   44:*/		return 0x8220A334;
		  /* 8220A334h */ case   45:  		/* li R4, 51 */
		/* 8220A334h case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x33);
		/* 8220A334h case   45:*/		return 0x8220A338;
		  /* 8220A338h */ case   46:  		/* bl -776048 */
		/* 8220A338h case   46:*/		regs.LR = 0x8220A33C; return 0x8214CBC8;
		/* 8220A338h case   46:*/		return 0x8220A33C;
		  /* 8220A33Ch */ case   47:  		/* mr R3, R31 */
		/* 8220A33Ch case   47:*/		regs.R3 = regs.R31;
		/* 8220A33Ch case   47:*/		return 0x8220A340;
		  /* 8220A340h */ case   48:  		/* li R6, 1 */
		/* 8220A340h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8220A340h case   48:*/		return 0x8220A344;
		  /* 8220A344h */ case   49:  		/* li R5, 0 */
		/* 8220A344h case   49:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A344h case   49:*/		return 0x8220A348;
		  /* 8220A348h */ case   50:  		/* li R4, 52 */
		/* 8220A348h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 8220A348h case   50:*/		return 0x8220A34C;
		  /* 8220A34Ch */ case   51:  		/* bl -776068 */
		/* 8220A34Ch case   51:*/		regs.LR = 0x8220A350; return 0x8214CBC8;
		/* 8220A34Ch case   51:*/		return 0x8220A350;
		  /* 8220A350h */ case   52:  		/* mr R3, R31 */
		/* 8220A350h case   52:*/		regs.R3 = regs.R31;
		/* 8220A350h case   52:*/		return 0x8220A354;
		  /* 8220A354h */ case   53:  		/* li R6, 1 */
		/* 8220A354h case   53:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8220A354h case   53:*/		return 0x8220A358;
		  /* 8220A358h */ case   54:  		/* li R5, 0 */
		/* 8220A358h case   54:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A358h case   54:*/		return 0x8220A35C;
		  /* 8220A35Ch */ case   55:  		/* li R4, 53 */
		/* 8220A35Ch case   55:*/		cpu::op::li<0>(regs,&regs.R4,0x35);
		/* 8220A35Ch case   55:*/		return 0x8220A360;
		  /* 8220A360h */ case   56:  		/* bl -776088 */
		/* 8220A360h case   56:*/		regs.LR = 0x8220A364; return 0x8214CBC8;
		/* 8220A360h case   56:*/		return 0x8220A364;
		  /* 8220A364h */ case   57:  		/* mr R3, R31 */
		/* 8220A364h case   57:*/		regs.R3 = regs.R31;
		/* 8220A364h case   57:*/		return 0x8220A368;
		  /* 8220A368h */ case   58:  		/* li R5, 0 */
		/* 8220A368h case   58:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A368h case   58:*/		return 0x8220A36C;
		  /* 8220A36Ch */ case   59:  		/* li R4, 35 */
		/* 8220A36Ch case   59:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 8220A36Ch case   59:*/		return 0x8220A370;
		  /* 8220A370h */ case   60:  		/* bl -776344 */
		/* 8220A370h case   60:*/		regs.LR = 0x8220A374; return 0x8214CAD8;
		/* 8220A370h case   60:*/		return 0x8220A374;
		  /* 8220A374h */ case   61:  		/* mr R3, R31 */
		/* 8220A374h case   61:*/		regs.R3 = regs.R31;
		/* 8220A374h case   61:*/		return 0x8220A378;
		  /* 8220A378h */ case   62:  		/* li R5, 0 */
		/* 8220A378h case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A378h case   62:*/		return 0x8220A37C;
		  /* 8220A37Ch */ case   63:  		/* li R4, 70 */
		/* 8220A37Ch case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x46);
		/* 8220A37Ch case   63:*/		return 0x8220A380;
		  /* 8220A380h */ case   64:  		/* bl -776360 */
		/* 8220A380h case   64:*/		regs.LR = 0x8220A384; return 0x8214CAD8;
		/* 8220A380h case   64:*/		return 0x8220A384;
		  /* 8220A384h */ case   65:  		/* mr R3, R31 */
		/* 8220A384h case   65:*/		regs.R3 = regs.R31;
		/* 8220A384h case   65:*/		return 0x8220A388;
		  /* 8220A388h */ case   66:  		/* li R5, 7 */
		/* 8220A388h case   66:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 8220A388h case   66:*/		return 0x8220A38C;
		  /* 8220A38Ch */ case   67:  		/* li R4, 37 */
		/* 8220A38Ch case   67:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 8220A38Ch case   67:*/		return 0x8220A390;
		  /* 8220A390h */ case   68:  		/* bl -776376 */
		/* 8220A390h case   68:*/		regs.LR = 0x8220A394; return 0x8214CAD8;
		/* 8220A390h case   68:*/		return 0x8220A394;
		  /* 8220A394h */ case   69:  		/* mr R3, R31 */
		/* 8220A394h case   69:*/		regs.R3 = regs.R31;
		/* 8220A394h case   69:*/		return 0x8220A398;
		  /* 8220A398h */ case   70:  		/* li R5, 0 */
		/* 8220A398h case   70:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A398h case   70:*/		return 0x8220A39C;
		  /* 8220A39Ch */ case   71:  		/* li R4, 36 */
		/* 8220A39Ch case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 8220A39Ch case   71:*/		return 0x8220A3A0;
		  /* 8220A3A0h */ case   72:  		/* bl -776392 */
		/* 8220A3A0h case   72:*/		regs.LR = 0x8220A3A4; return 0x8214CAD8;
		/* 8220A3A0h case   72:*/		return 0x8220A3A4;
		  /* 8220A3A4h */ case   73:  		/* mr R3, R31 */
		/* 8220A3A4h case   73:*/		regs.R3 = regs.R31;
		/* 8220A3A4h case   73:*/		return 0x8220A3A8;
		  /* 8220A3A8h */ case   74:  		/* li R5, 0 */
		/* 8220A3A8h case   74:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A3A8h case   74:*/		return 0x8220A3AC;
		  /* 8220A3ACh */ case   75:  		/* li R4, 75 */
		/* 8220A3ACh case   75:*/		cpu::op::li<0>(regs,&regs.R4,0x4B);
		/* 8220A3ACh case   75:*/		return 0x8220A3B0;
		  /* 8220A3B0h */ case   76:  		/* bl -776408 */
		/* 8220A3B0h case   76:*/		regs.LR = 0x8220A3B4; return 0x8214CAD8;
		/* 8220A3B0h case   76:*/		return 0x8220A3B4;
		  /* 8220A3B4h */ case   77:  		/* mr R3, R31 */
		/* 8220A3B4h case   77:*/		regs.R3 = regs.R31;
		/* 8220A3B4h case   77:*/		return 0x8220A3B8;
		  /* 8220A3B8h */ case   78:  		/* li R5, 204 */
		/* 8220A3B8h case   78:*/		cpu::op::li<0>(regs,&regs.R5,0xCC);
		/* 8220A3B8h case   78:*/		return 0x8220A3BC;
		  /* 8220A3BCh */ case   79:  		/* li R4, 34 */
		/* 8220A3BCh case   79:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 8220A3BCh case   79:*/		return 0x8220A3C0;
		  /* 8220A3C0h */ case   80:  		/* bl -776424 */
		/* 8220A3C0h case   80:*/		regs.LR = 0x8220A3C4; return 0x8214CAD8;
		/* 8220A3C0h case   80:*/		return 0x8220A3C4;
		  /* 8220A3C4h */ case   81:  		/* li R5, 0 */
		/* 8220A3C4h case   81:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A3C4h case   81:*/		return 0x8220A3C8;
		  /* 8220A3C8h */ case   82:  		/* li R4, 2 */
		/* 8220A3C8h case   82:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8220A3C8h case   82:*/		return 0x8220A3CC;
		  /* 8220A3CCh */ case   83:  		/* mr R3, R31 */
		/* 8220A3CCh case   83:*/		regs.R3 = regs.R31;
		/* 8220A3CCh case   83:*/		return 0x8220A3D0;
		  /* 8220A3D0h */ case   84:  		/* bl -776440 */
		/* 8220A3D0h case   84:*/		regs.LR = 0x8220A3D4; return 0x8214CAD8;
		/* 8220A3D0h case   84:*/		return 0x8220A3D4;
		  /* 8220A3D4h */ case   85:  		/* li R5, 1 */
		/* 8220A3D4h case   85:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220A3D4h case   85:*/		return 0x8220A3D8;
		  /* 8220A3D8h */ case   86:  		/* mr R3, R31 */
		/* 8220A3D8h case   86:*/		regs.R3 = regs.R31;
		/* 8220A3D8h case   86:*/		return 0x8220A3DC;
		  /* 8220A3DCh */ case   87:  		/* li R4, 3 */
		/* 8220A3DCh case   87:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8220A3DCh case   87:*/		return 0x8220A3E0;
		  /* 8220A3E0h */ case   88:  		/* bl -776456 */
		/* 8220A3E0h case   88:*/		regs.LR = 0x8220A3E4; return 0x8214CAD8;
		/* 8220A3E0h case   88:*/		return 0x8220A3E4;
		  /* 8220A3E4h */ case   89:  		/* mr R3, R31 */
		/* 8220A3E4h case   89:*/		regs.R3 = regs.R31;
		/* 8220A3E4h case   89:*/		return 0x8220A3E8;
		  /* 8220A3E8h */ case   90:  		/* li R5, 0 */
		/* 8220A3E8h case   90:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A3E8h case   90:*/		return 0x8220A3EC;
		  /* 8220A3ECh */ case   91:  		/* li R4, 5 */
		/* 8220A3ECh case   91:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8220A3ECh case   91:*/		return 0x8220A3F0;
		  /* 8220A3F0h */ case   92:  		/* bl -776472 */
		/* 8220A3F0h case   92:*/		regs.LR = 0x8220A3F4; return 0x8214CAD8;
		/* 8220A3F0h case   92:*/		return 0x8220A3F4;
		  /* 8220A3F4h */ case   93:  		/* mr R3, R31 */
		/* 8220A3F4h case   93:*/		regs.R3 = regs.R31;
		/* 8220A3F4h case   93:*/		return 0x8220A3F8;
		  /* 8220A3F8h */ case   94:  		/* li R5, 0 */
		/* 8220A3F8h case   94:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A3F8h case   94:*/		return 0x8220A3FC;
		  /* 8220A3FCh */ case   95:  		/* li R4, 4 */
		/* 8220A3FCh case   95:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8220A3FCh case   95:*/		return 0x8220A400;
		  /* 8220A400h */ case   96:  		/* bl -776488 */
		/* 8220A400h case   96:*/		regs.LR = 0x8220A404; return 0x8214CAD8;
		/* 8220A400h case   96:*/		return 0x8220A404;
		  /* 8220A404h */ case   97:  		/* mr R3, R31 */
		/* 8220A404h case   97:*/		regs.R3 = regs.R31;
		/* 8220A404h case   97:*/		return 0x8220A408;
		  /* 8220A408h */ case   98:  		/* li R5, 1 */
		/* 8220A408h case   98:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220A408h case   98:*/		return 0x8220A40C;
		  /* 8220A40Ch */ case   99:  		/* li R4, 6 */
		/* 8220A40Ch case   99:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 8220A40Ch case   99:*/		return 0x8220A410;
		  /* 8220A410h */ case  100:  		/* bl -776504 */
		/* 8220A410h case  100:*/		regs.LR = 0x8220A414; return 0x8214CAD8;
		/* 8220A410h case  100:*/		return 0x8220A414;
		  /* 8220A414h */ case  101:  		/* mr R3, R31 */
		/* 8220A414h case  101:*/		regs.R3 = regs.R31;
		/* 8220A414h case  101:*/		return 0x8220A418;
		  /* 8220A418h */ case  102:  		/* li R5, 0 */
		/* 8220A418h case  102:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A418h case  102:*/		return 0x8220A41C;
		  /* 8220A41Ch */ case  103:  		/* li R4, 8 */
		/* 8220A41Ch case  103:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8220A41Ch case  103:*/		return 0x8220A420;
		  /* 8220A420h */ case  104:  		/* bl -776520 */
		/* 8220A420h case  104:*/		regs.LR = 0x8220A424; return 0x8214CAD8;
		/* 8220A420h case  104:*/		return 0x8220A424;
		  /* 8220A424h */ case  105:  		/* mr R3, R31 */
		/* 8220A424h case  105:*/		regs.R3 = regs.R31;
		/* 8220A424h case  105:*/		return 0x8220A428;
		  /* 8220A428h */ case  106:  		/* li R5, 0 */
		/* 8220A428h case  106:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A428h case  106:*/		return 0x8220A42C;
		  /* 8220A42Ch */ case  107:  		/* li R4, 7 */
		/* 8220A42Ch case  107:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 8220A42Ch case  107:*/		return 0x8220A430;
		  /* 8220A430h */ case  108:  		/* bl -776536 */
		/* 8220A430h case  108:*/		regs.LR = 0x8220A434; return 0x8214CAD8;
		/* 8220A430h case  108:*/		return 0x8220A434;
		  /* 8220A434h */ case  109:  		/* mr R3, R31 */
		/* 8220A434h case  109:*/		regs.R3 = regs.R31;
		/* 8220A434h case  109:*/		return 0x8220A438;
		  /* 8220A438h */ case  110:  		/* li R5, 1 */
		/* 8220A438h case  110:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220A438h case  110:*/		return 0x8220A43C;
		  /* 8220A43Ch */ case  111:  		/* li R4, 95 */
		/* 8220A43Ch case  111:*/		cpu::op::li<0>(regs,&regs.R4,0x5F);
		/* 8220A43Ch case  111:*/		return 0x8220A440;
		  /* 8220A440h */ case  112:  		/* bl -776552 */
		/* 8220A440h case  112:*/		regs.LR = 0x8220A444; return 0x8214CAD8;
		/* 8220A440h case  112:*/		return 0x8220A444;
		  /* 8220A444h */ case  113:  		/* mr R3, R31 */
		/* 8220A444h case  113:*/		regs.R3 = regs.R31;
		/* 8220A444h case  113:*/		return 0x8220A448;
		  /* 8220A448h */ case  114:  		/* li R5, 7 */
		/* 8220A448h case  114:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 8220A448h case  114:*/		return 0x8220A44C;
		  /* 8220A44Ch */ case  115:  		/* li R4, 28 */
		/* 8220A44Ch case  115:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8220A44Ch case  115:*/		return 0x8220A450;
		  /* 8220A450h */ case  116:  		/* bl -776568 */
		/* 8220A450h case  116:*/		regs.LR = 0x8220A454; return 0x8214CAD8;
		/* 8220A450h case  116:*/		return 0x8220A454;
		  /* 8220A454h */ case  117:  		/* mr R3, R31 */
		/* 8220A454h case  117:*/		regs.R3 = regs.R31;
		/* 8220A454h case  117:*/		return 0x8220A458;
		  /* 8220A458h */ case  118:  		/* li R5, 0 */
		/* 8220A458h case  118:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220A458h case  118:*/		return 0x8220A45C;
		  /* 8220A45Ch */ case  119:  		/* li R4, 163 */
		/* 8220A45Ch case  119:*/		cpu::op::li<0>(regs,&regs.R4,0xA3);
		/* 8220A45Ch case  119:*/		return 0x8220A460;
		  /* 8220A460h */ case  120:  		/* bl -776584 */
		/* 8220A460h case  120:*/		regs.LR = 0x8220A464; return 0x8214CAD8;
		/* 8220A460h case  120:*/		return 0x8220A464;
		  /* 8220A464h */ case  121:  		/* mr R3, R31 */
		/* 8220A464h case  121:*/		regs.R3 = regs.R31;
		/* 8220A464h case  121:*/		return 0x8220A468;
		  /* 8220A468h */ case  122:  		/* li R5, 1 */
		/* 8220A468h case  122:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220A468h case  122:*/		return 0x8220A46C;
		  /* 8220A46Ch */ case  123:  		/* li R4, 27 */
		/* 8220A46Ch case  123:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 8220A46Ch case  123:*/		return 0x8220A470;
		  /* 8220A470h */ case  124:  		/* bl -776600 */
		/* 8220A470h case  124:*/		regs.LR = 0x8220A474; return 0x8214CAD8;
		/* 8220A470h case  124:*/		return 0x8220A474;
		  /* 8220A474h */ case  125:  		/* li R5, 1 */
		/* 8220A474h case  125:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220A474h case  125:*/		return 0x8220A478;
		  /* 8220A478h */ case  126:  		/* li R4, 669 */
		/* 8220A478h case  126:*/		cpu::op::li<0>(regs,&regs.R4,0x29D);
		/* 8220A478h case  126:*/		return 0x8220A47C;
		  /* 8220A47Ch */ case  127:  		/* mr R3, R31 */
		/* 8220A47Ch case  127:*/		regs.R3 = regs.R31;
		/* 8220A47Ch case  127:*/		return 0x8220A480;
		  /* 8220A480h */ case  128:  		/* bl -776616 */
		/* 8220A480h case  128:*/		regs.LR = 0x8220A484; return 0x8214CAD8;
		/* 8220A480h case  128:*/		return 0x8220A484;
		  /* 8220A484h */ case  129:  		/* addi R1, R1, 96 */
		/* 8220A484h case  129:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220A484h case  129:*/		return 0x8220A488;
		  /* 8220A488h */ case  130:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220A488h case  130:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220A488h case  130:*/		return 0x8220A48C;
		  /* 8220A48Ch */ case  131:  		/* mtspr LR, R12 */
		/* 8220A48Ch case  131:*/		regs.LR = regs.R12;
		/* 8220A48Ch case  131:*/		return 0x8220A490;
		  /* 8220A490h */ case  132:  		/* ld R31, <#[R1 - 16]> */
		/* 8220A490h case  132:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220A490h case  132:*/		return 0x8220A494;
		  /* 8220A494h */ case  133:  		/* bclr 20, CR0_LT */
		/* 8220A494h case  133:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220A494h case  133:*/		return 0x8220A498;
	}
	return 0x8220A498;
} // Block from 8220A280h-8220A498h (134 instructions)

//////////////////////////////////////////////////////
// Block at 8220A498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A498);
		  /* 8220A498h */ case    0:  		/* mfspr R12, LR */
		/* 8220A498h case    0:*/		regs.R12 = regs.LR;
		/* 8220A498h case    0:*/		return 0x8220A49C;
		  /* 8220A49Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220A49Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220A49Ch case    1:*/		return 0x8220A4A0;
		  /* 8220A4A0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8220A4A0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8220A4A0h case    2:*/		return 0x8220A4A4;
		  /* 8220A4A4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8220A4A4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220A4A4h case    3:*/		return 0x8220A4A8;
		  /* 8220A4A8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220A4A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220A4A8h case    4:*/		return 0x8220A4AC;
		  /* 8220A4ACh */ case    5:  		/* lwz R11, <#[R3 + 184]> */
		/* 8220A4ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000B8) );
		/* 8220A4ACh case    5:*/		return 0x8220A4B0;
		  /* 8220A4B0h */ case    6:  		/* mr R30, R4 */
		/* 8220A4B0h case    6:*/		regs.R30 = regs.R4;
		/* 8220A4B0h case    6:*/		return 0x8220A4B4;
		  /* 8220A4B4h */ case    7:  		/* lwz R3, <#[R3 + 180]> */
		/* 8220A4B4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000B4) );
		/* 8220A4B4h case    7:*/		return 0x8220A4B8;
		  /* 8220A4B8h */ case    8:  		/* mtspr CTR, R11 */
		/* 8220A4B8h case    8:*/		regs.CTR = regs.R11;
		/* 8220A4B8h case    8:*/		return 0x8220A4BC;
		  /* 8220A4BCh */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8220A4BCh case    9:*/		if ( 1 ) { regs.LR = 0x8220A4C0; return (uint32)regs.CTR; }
		/* 8220A4BCh case    9:*/		return 0x8220A4C0;
		  /* 8220A4C0h */ case   10:  		/* or. R31, R3, R3 */
		/* 8220A4C0h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220A4C0h case   10:*/		return 0x8220A4C4;
		  /* 8220A4C4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 8220A4C4h case   11:*/		if ( regs.CR[0].eq ) { return 0x8220A4D8;  }
		/* 8220A4C4h case   11:*/		return 0x8220A4C8;
		  /* 8220A4C8h */ case   12:  		/* mr R5, R30 */
		/* 8220A4C8h case   12:*/		regs.R5 = regs.R30;
		/* 8220A4C8h case   12:*/		return 0x8220A4CC;
		  /* 8220A4CCh */ case   13:  		/* li R4, 0 */
		/* 8220A4CCh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220A4CCh case   13:*/		return 0x8220A4D0;
		  /* 8220A4D0h */ case   14:  		/* mr R3, R31 */
		/* 8220A4D0h case   14:*/		regs.R3 = regs.R31;
		/* 8220A4D0h case   14:*/		return 0x8220A4D4;
		  /* 8220A4D4h */ case   15:  		/* bl -1544596 */
		/* 8220A4D4h case   15:*/		regs.LR = 0x8220A4D8; return 0x82091340;
		/* 8220A4D4h case   15:*/		return 0x8220A4D8;
	}
	return 0x8220A4D8;
} // Block from 8220A498h-8220A4D8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8220A4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A4D8);
		  /* 8220A4D8h */ case    0:  		/* mr R3, R31 */
		/* 8220A4D8h case    0:*/		regs.R3 = regs.R31;
		/* 8220A4D8h case    0:*/		return 0x8220A4DC;
		  /* 8220A4DCh */ case    1:  		/* addi R1, R1, 112 */
		/* 8220A4DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220A4DCh case    1:*/		return 0x8220A4E0;
		  /* 8220A4E0h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220A4E0h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220A4E0h case    2:*/		return 0x8220A4E4;
		  /* 8220A4E4h */ case    3:  		/* mtspr LR, R12 */
		/* 8220A4E4h case    3:*/		regs.LR = regs.R12;
		/* 8220A4E4h case    3:*/		return 0x8220A4E8;
		  /* 8220A4E8h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8220A4E8h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8220A4E8h case    4:*/		return 0x8220A4EC;
		  /* 8220A4ECh */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8220A4ECh case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220A4ECh case    5:*/		return 0x8220A4F0;
		  /* 8220A4F0h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8220A4F0h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220A4F0h case    6:*/		return 0x8220A4F4;
	}
	return 0x8220A4F4;
} // Block from 8220A4D8h-8220A4F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220A4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A4F4);
		  /* 8220A4F4h */ case    0:  		/* nop */
		/* 8220A4F4h case    0:*/		cpu::op::nop();
		/* 8220A4F4h case    0:*/		return 0x8220A4F8;
	}
	return 0x8220A4F8;
} // Block from 8220A4F4h-8220A4F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220A4F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A4F8);
		  /* 8220A4F8h */ case    0:  		/* mfspr R12, LR */
		/* 8220A4F8h case    0:*/		regs.R12 = regs.LR;
		/* 8220A4F8h case    0:*/		return 0x8220A4FC;
		  /* 8220A4FCh */ case    1:  		/* bl -1544864 */
		/* 8220A4FCh case    1:*/		regs.LR = 0x8220A500; return 0x8209125C;
		/* 8220A4FCh case    1:*/		return 0x8220A500;
		  /* 8220A500h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220A500h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220A500h case    2:*/		return 0x8220A504;
		  /* 8220A504h */ case    3:  		/* mr R31, R3 */
		/* 8220A504h case    3:*/		regs.R31 = regs.R3;
		/* 8220A504h case    3:*/		return 0x8220A508;
		  /* 8220A508h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8220A508h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220A508h case    4:*/		return 0x8220A50C;
		  /* 8220A50Ch */ case    5:  		/* bc 12, CR6_EQ, 304 */
		/* 8220A50Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8220A63C;  }
		/* 8220A50Ch case    5:*/		return 0x8220A510;
		  /* 8220A510h */ case    6:  		/* lwz R3, <#[R3 + 276]> */
		/* 8220A510h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000114) );
		/* 8220A510h case    6:*/		return 0x8220A514;
		  /* 8220A514h */ case    7:  		/* bl 87556 */
		/* 8220A514h case    7:*/		regs.LR = 0x8220A518; return 0x8221FB18;
		/* 8220A514h case    7:*/		return 0x8220A518;
		  /* 8220A518h */ case    8:  		/* lwz R4, <#[R31 + 272]> */
		/* 8220A518h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000110) );
		/* 8220A518h case    8:*/		return 0x8220A51C;
		  /* 8220A51Ch */ case    9:  		/* lwz R3, <#[R31 + 268]> */
		/* 8220A51Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000010C) );
		/* 8220A51Ch case    9:*/		return 0x8220A520;
		  /* 8220A520h */ case   10:  		/* bl 4520 */
		/* 8220A520h case   10:*/		regs.LR = 0x8220A524; return 0x8220B6C8;
		/* 8220A520h case   10:*/		return 0x8220A524;
		  /* 8220A524h */ case   11:  		/* mr R4, R31 */
		/* 8220A524h case   11:*/		regs.R4 = regs.R31;
		/* 8220A524h case   11:*/		return 0x8220A528;
		  /* 8220A528h */ case   12:  		/* lwz R3, <#[R31 + 268]> */
		/* 8220A528h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000010C) );
		/* 8220A528h case   12:*/		return 0x8220A52C;
		  /* 8220A52Ch */ case   13:  		/* bl 4628 */
		/* 8220A52Ch case   13:*/		regs.LR = 0x8220A530; return 0x8220B740;
		/* 8220A52Ch case   13:*/		return 0x8220A530;
		  /* 8220A530h */ case   14:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A530h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A530h case   14:*/		return 0x8220A534;
		  /* 8220A534h */ case   15:  		/* lwz R4, <#[R31 + 8]> */
		/* 8220A534h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8220A534h case   15:*/		return 0x8220A538;
		  /* 8220A538h */ case   16:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A538h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A538h case   16:*/		return 0x8220A53C;
		  /* 8220A53Ch */ case   17:  		/* mtspr CTR, R11 */
		/* 8220A53Ch case   17:*/		regs.CTR = regs.R11;
		/* 8220A53Ch case   17:*/		return 0x8220A540;
		  /* 8220A540h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8220A540h case   18:*/		if ( 1 ) { regs.LR = 0x8220A544; return (uint32)regs.CTR; }
		/* 8220A540h case   18:*/		return 0x8220A544;
		  /* 8220A544h */ case   19:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A544h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A544h case   19:*/		return 0x8220A548;
		  /* 8220A548h */ case   20:  		/* lwz R4, <#[R31 + 12]> */
		/* 8220A548h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220A548h case   20:*/		return 0x8220A54C;
		  /* 8220A54Ch */ case   21:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A54Ch case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A54Ch case   21:*/		return 0x8220A550;
	}
	return 0x8220A550;
} // Block from 8220A4F8h-8220A550h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220A550h
// Function '?SP_Create@XGRAPHICS@@YAPAU_SP_STATE_PREPROCESSOR@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SC_STATE_CACHE@1@PAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A550);
		  /* 8220A550h */ case    0:  		/* mtspr CTR, R11 */
		/* 8220A550h case    0:*/		regs.CTR = regs.R11;
		/* 8220A550h case    0:*/		return 0x8220A554;
		  /* 8220A554h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8220A554h case    1:*/		if ( 1 ) { regs.LR = 0x8220A558; return (uint32)regs.CTR; }
		/* 8220A554h case    1:*/		return 0x8220A558;
		  /* 8220A558h */ case    2:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A558h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A558h case    2:*/		return 0x8220A55C;
		  /* 8220A55Ch */ case    3:  		/* lwz R4, <#[R31 + 20]> */
		/* 8220A55Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8220A55Ch case    3:*/		return 0x8220A560;
		  /* 8220A560h */ case    4:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A560h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A560h case    4:*/		return 0x8220A564;
		  /* 8220A564h */ case    5:  		/* mtspr CTR, R11 */
		/* 8220A564h case    5:*/		regs.CTR = regs.R11;
		/* 8220A564h case    5:*/		return 0x8220A568;
		  /* 8220A568h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8220A568h case    6:*/		if ( 1 ) { regs.LR = 0x8220A56C; return (uint32)regs.CTR; }
		/* 8220A568h case    6:*/		return 0x8220A56C;
		  /* 8220A56Ch */ case    7:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A56Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A56Ch case    7:*/		return 0x8220A570;
		  /* 8220A570h */ case    8:  		/* lwz R4, <#[R31 + 24]> */
		/* 8220A570h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 8220A570h case    8:*/		return 0x8220A574;
		  /* 8220A574h */ case    9:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A574h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A574h case    9:*/		return 0x8220A578;
		  /* 8220A578h */ case   10:  		/* mtspr CTR, R11 */
		/* 8220A578h case   10:*/		regs.CTR = regs.R11;
		/* 8220A578h case   10:*/		return 0x8220A57C;
		  /* 8220A57Ch */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8220A57Ch case   11:*/		if ( 1 ) { regs.LR = 0x8220A580; return (uint32)regs.CTR; }
		/* 8220A57Ch case   11:*/		return 0x8220A580;
		  /* 8220A580h */ case   12:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A580h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A580h case   12:*/		return 0x8220A584;
		  /* 8220A584h */ case   13:  		/* lwz R4, <#[R31 + 28]> */
		/* 8220A584h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220A584h case   13:*/		return 0x8220A588;
		  /* 8220A588h */ case   14:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A588h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A588h case   14:*/		return 0x8220A58C;
		  /* 8220A58Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 8220A58Ch case   15:*/		regs.CTR = regs.R11;
		/* 8220A58Ch case   15:*/		return 0x8220A590;
		  /* 8220A590h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8220A590h case   16:*/		if ( 1 ) { regs.LR = 0x8220A594; return (uint32)regs.CTR; }
		/* 8220A590h case   16:*/		return 0x8220A594;
		  /* 8220A594h */ case   17:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A594h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A594h case   17:*/		return 0x8220A598;
		  /* 8220A598h */ case   18:  		/* lwz R4, <#[R31 + 32]> */
		/* 8220A598h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 8220A598h case   18:*/		return 0x8220A59C;
		  /* 8220A59Ch */ case   19:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A59Ch case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A59Ch case   19:*/		return 0x8220A5A0;
		  /* 8220A5A0h */ case   20:  		/* mtspr CTR, R11 */
		/* 8220A5A0h case   20:*/		regs.CTR = regs.R11;
		/* 8220A5A0h case   20:*/		return 0x8220A5A4;
		  /* 8220A5A4h */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8220A5A4h case   21:*/		if ( 1 ) { regs.LR = 0x8220A5A8; return (uint32)regs.CTR; }
		/* 8220A5A4h case   21:*/		return 0x8220A5A8;
		  /* 8220A5A8h */ case   22:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A5A8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A5A8h case   22:*/		return 0x8220A5AC;
		  /* 8220A5ACh */ case   23:  		/* lwz R4, <#[R31 + 36]> */
		/* 8220A5ACh case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000024) );
		/* 8220A5ACh case   23:*/		return 0x8220A5B0;
		  /* 8220A5B0h */ case   24:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A5B0h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A5B0h case   24:*/		return 0x8220A5B4;
		  /* 8220A5B4h */ case   25:  		/* mtspr CTR, R11 */
		/* 8220A5B4h case   25:*/		regs.CTR = regs.R11;
		/* 8220A5B4h case   25:*/		return 0x8220A5B8;
		  /* 8220A5B8h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 8220A5B8h case   26:*/		if ( 1 ) { regs.LR = 0x8220A5BC; return (uint32)regs.CTR; }
		/* 8220A5B8h case   26:*/		return 0x8220A5BC;
		  /* 8220A5BCh */ case   27:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A5BCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A5BCh case   27:*/		return 0x8220A5C0;
		  /* 8220A5C0h */ case   28:  		/* lwz R4, <#[R31 + 40]> */
		/* 8220A5C0h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 8220A5C0h case   28:*/		return 0x8220A5C4;
		  /* 8220A5C4h */ case   29:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A5C4h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A5C4h case   29:*/		return 0x8220A5C8;
		  /* 8220A5C8h */ case   30:  		/* mtspr CTR, R11 */
		/* 8220A5C8h case   30:*/		regs.CTR = regs.R11;
		/* 8220A5C8h case   30:*/		return 0x8220A5CC;
		  /* 8220A5CCh */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 8220A5CCh case   31:*/		if ( 1 ) { regs.LR = 0x8220A5D0; return (uint32)regs.CTR; }
		/* 8220A5CCh case   31:*/		return 0x8220A5D0;
		  /* 8220A5D0h */ case   32:  		/* addi R29, R31, 40 */
		/* 8220A5D0h case   32:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x28);
		/* 8220A5D0h case   32:*/		return 0x8220A5D4;
		  /* 8220A5D4h */ case   33:  		/* li R30, 6 */
		/* 8220A5D4h case   33:*/		cpu::op::li<0>(regs,&regs.R30,0x6);
		/* 8220A5D4h case   33:*/		return 0x8220A5D8;
		  /* 8220A5D8h */ case   34:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A5D8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A5D8h case   34:*/		return 0x8220A5DC;
		  /* 8220A5DCh */ case   35:  		/* lwzu R4, <#[R29 + 4]> */
		/* 8220A5DCh case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8220A5DCh case   35:*/		return 0x8220A5E0;
		  /* 8220A5E0h */ case   36:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A5E0h case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A5E0h case   36:*/		return 0x8220A5E4;
		  /* 8220A5E4h */ case   37:  		/* mtspr CTR, R11 */
		/* 8220A5E4h case   37:*/		regs.CTR = regs.R11;
		/* 8220A5E4h case   37:*/		return 0x8220A5E8;
		  /* 8220A5E8h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8220A5E8h case   38:*/		if ( 1 ) { regs.LR = 0x8220A5EC; return (uint32)regs.CTR; }
		/* 8220A5E8h case   38:*/		return 0x8220A5EC;
		  /* 8220A5ECh */ case   39:  		/* addic. R30, R30, -1 */
		/* 8220A5ECh case   39:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8220A5ECh case   39:*/		return 0x8220A5F0;
		  /* 8220A5F0h */ case   40:  		/* bc 4, CR0_EQ, -24 */
		/* 8220A5F0h case   40:*/		if ( !regs.CR[0].eq ) { return 0x8220A5D8;  }
		/* 8220A5F0h case   40:*/		return 0x8220A5F4;
		  /* 8220A5F4h */ case   41:  		/* addi R30, R31, 296 */
		/* 8220A5F4h case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x128);
		/* 8220A5F4h case   41:*/		return 0x8220A5F8;
		  /* 8220A5F8h */ case   42:  		/* li R29, 5 */
		/* 8220A5F8h case   42:*/		cpu::op::li<0>(regs,&regs.R29,0x5);
		/* 8220A5F8h case   42:*/		return 0x8220A5FC;
		  /* 8220A5FCh */ case   43:  		/* lwz R11, <#[R30 + 16]> */
		/* 8220A5FCh case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8220A5FCh case   43:*/		return 0x8220A600;
		  /* 8220A600h */ case   44:  		/* cmplwi CR6, R11, 0 */
		/* 8220A600h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220A600h case   44:*/		return 0x8220A604;
		  /* 8220A604h */ case   45:  		/* bc 12, CR6_EQ, 24 */
		/* 8220A604h case   45:*/		if ( regs.CR[6].eq ) { return 0x8220A61C;  }
		/* 8220A604h case   45:*/		return 0x8220A608;
		  /* 8220A608h */ case   46:  		/* lwz R11, <#[R31 + 196]> */
		/* 8220A608h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C4) );
		/* 8220A608h case   46:*/		return 0x8220A60C;
		  /* 8220A60Ch */ case   47:  		/* mr R4, R30 */
		/* 8220A60Ch case   47:*/		regs.R4 = regs.R30;
		/* 8220A60Ch case   47:*/		return 0x8220A610;
		  /* 8220A610h */ case   48:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A610h case   48:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A610h case   48:*/		return 0x8220A614;
		  /* 8220A614h */ case   49:  		/* mtspr CTR, R11 */
		/* 8220A614h case   49:*/		regs.CTR = regs.R11;
		/* 8220A614h case   49:*/		return 0x8220A618;
		  /* 8220A618h */ case   50:  		/* bcctrl 20, CR0_LT */
		/* 8220A618h case   50:*/		if ( 1 ) { regs.LR = 0x8220A61C; return (uint32)regs.CTR; }
		/* 8220A618h case   50:*/		return 0x8220A61C;
	}
	return 0x8220A61C;
} // Block from 8220A550h-8220A61Ch (51 instructions)

//////////////////////////////////////////////////////
// Block at 8220A61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A61C);
		  /* 8220A61Ch */ case    0:  		/* addic. R29, R29, -1 */
		/* 8220A61Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8220A61Ch case    0:*/		return 0x8220A620;
		  /* 8220A620h */ case    1:  		/* addi R30, R30, 32 */
		/* 8220A620h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x20);
		/* 8220A620h case    1:*/		return 0x8220A624;
		  /* 8220A624h */ case    2:  		/* bc 4, CR0_EQ, -40 */
		/* 8220A624h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8220A5FC;  }
		/* 8220A624h case    2:*/		return 0x8220A628;
		  /* 8220A628h */ case    3:  		/* lwz R11, <#[R31 + 188]> */
		/* 8220A628h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000BC) );
		/* 8220A628h case    3:*/		return 0x8220A62C;
		  /* 8220A62Ch */ case    4:  		/* mr R4, R31 */
		/* 8220A62Ch case    4:*/		regs.R4 = regs.R31;
		/* 8220A62Ch case    4:*/		return 0x8220A630;
		  /* 8220A630h */ case    5:  		/* lwz R3, <#[R31 + 180]> */
		/* 8220A630h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 8220A630h case    5:*/		return 0x8220A634;
		  /* 8220A634h */ case    6:  		/* mtspr CTR, R11 */
		/* 8220A634h case    6:*/		regs.CTR = regs.R11;
		/* 8220A634h case    6:*/		return 0x8220A638;
		  /* 8220A638h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8220A638h case    7:*/		if ( 1 ) { regs.LR = 0x8220A63C; return (uint32)regs.CTR; }
		/* 8220A638h case    7:*/		return 0x8220A63C;
	}
	return 0x8220A63C;
} // Block from 8220A61Ch-8220A63Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220A63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A63C);
		  /* 8220A63Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8220A63Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220A63Ch case    0:*/		return 0x8220A640;
		  /* 8220A640h */ case    1:  		/* b -1545108 */
		/* 8220A640h case    1:*/		return 0x820912AC;
		/* 8220A640h case    1:*/		return 0x8220A644;
		  /* 8220A644h */ case    2:  		/* nop */
		/* 8220A644h case    2:*/		cpu::op::nop();
		/* 8220A644h case    2:*/		return 0x8220A648;
	}
	return 0x8220A648;
} // Block from 8220A63Ch-8220A648h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220A648h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A648);
		  /* 8220A648h */ case    0:  		/* mfspr R12, LR */
		/* 8220A648h case    0:*/		regs.R12 = regs.LR;
		/* 8220A648h case    0:*/		return 0x8220A64C;
		  /* 8220A64Ch */ case    1:  		/* bl -1545228 */
		/* 8220A64Ch case    1:*/		regs.LR = 0x8220A650; return 0x82091240;
		/* 8220A64Ch case    1:*/		return 0x8220A650;
		  /* 8220A650h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8220A650h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8220A650h case    2:*/		return 0x8220A654;
		  /* 8220A654h */ case    3:  		/* mr R28, R3 */
		/* 8220A654h case    3:*/		regs.R28 = regs.R3;
		/* 8220A654h case    3:*/		return 0x8220A658;
		  /* 8220A658h */ case    4:  		/* mr R24, R4 */
		/* 8220A658h case    4:*/		regs.R24 = regs.R4;
		/* 8220A658h case    4:*/		return 0x8220A65C;
		  /* 8220A65Ch */ case    5:  		/* bl -700500 */
		/* 8220A65Ch case    5:*/		regs.LR = 0x8220A660; return 0x8215F608;
		/* 8220A65Ch case    5:*/		return 0x8220A660;
		  /* 8220A660h */ case    6:  		/* mr R23, R3 */
		/* 8220A660h case    6:*/		regs.R23 = regs.R3;
		/* 8220A660h case    6:*/		return 0x8220A664;
		  /* 8220A664h */ case    7:  		/* bl 77148 */
		/* 8220A664h case    7:*/		regs.LR = 0x8220A668; return 0x8221D3C0;
		/* 8220A664h case    7:*/		return 0x8220A668;
	}
	return 0x8220A668;
} // Block from 8220A648h-8220A668h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220A668h
// Function '?SP_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SP_STATE_PREPROCESSOR@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A668);
		  /* 8220A668h */ case    0:  		/* mr R25, R3 */
		/* 8220A668h case    0:*/		regs.R25 = regs.R3;
		/* 8220A668h case    0:*/		return 0x8220A66C;
		  /* 8220A66Ch */ case    1:  		/* mr R3, R28 */
		/* 8220A66Ch case    1:*/		regs.R3 = regs.R28;
		/* 8220A66Ch case    1:*/		return 0x8220A670;
		  /* 8220A670h */ case    2:  		/* bl 77136 */
		/* 8220A670h case    2:*/		regs.LR = 0x8220A674; return 0x8221D3C0;
		/* 8220A670h case    2:*/		return 0x8220A674;
		  /* 8220A674h */ case    3:  		/* lis R11, -32253 */
		/* 8220A674h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220A674h case    3:*/		return 0x8220A678;
		  /* 8220A678h */ case    4:  		/* lis R10, -32252 */
		/* 8220A678h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220A678h case    4:*/		return 0x8220A67C;
		  /* 8220A67Ch */ case    5:  		/* mr R27, R3 */
		/* 8220A67Ch case    5:*/		regs.R27 = regs.R3;
		/* 8220A67Ch case    5:*/		return 0x8220A680;
		  /* 8220A680h */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 8220A680h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220A680h case    6:*/		return 0x8220A684;
		  /* 8220A684h */ case    7:  		/* addi R31, R11, 27460 */
		/* 8220A684h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8220A684h case    7:*/		return 0x8220A688;
		  /* 8220A688h */ case    8:  		/* addi R26, R10, -11928 */
		/* 8220A688h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFD168);
		/* 8220A688h case    8:*/		return 0x8220A68C;
		  /* 8220A68Ch */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A68Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220A6AC;  }
		/* 8220A68Ch case    9:*/		return 0x8220A690;
		  /* 8220A690h */ case   10:  		/* lis R11, -32252 */
		/* 8220A690h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A690h case   10:*/		return 0x8220A694;
		  /* 8220A694h */ case   11:  		/* mr R6, R26 */
		/* 8220A694h case   11:*/		regs.R6 = regs.R26;
		/* 8220A694h case   11:*/		return 0x8220A698;
		  /* 8220A698h */ case   12:  		/* addi R5, R11, -11784 */
		/* 8220A698h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1F8);
		/* 8220A698h case   12:*/		return 0x8220A69C;
		  /* 8220A69Ch */ case   13:  		/* mr R4, R31 */
		/* 8220A69Ch case   13:*/		regs.R4 = regs.R31;
		/* 8220A69Ch case   13:*/		return 0x8220A6A0;
	}
	return 0x8220A6A0;
} // Block from 8220A668h-8220A6A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220A6A0h
// Function '?AS_GetStateBlkDtBit@XGRAPHICS@@YAIPAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A6A0);
		  /* 8220A6A0h */ case    0:  		/* li R7, 84 */
		/* 8220A6A0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x54);
		/* 8220A6A0h case    0:*/		return 0x8220A6A4;
		  /* 8220A6A4h */ case    1:  		/* li R3, 0 */
		/* 8220A6A4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A6A4h case    1:*/		return 0x8220A6A8;
		  /* 8220A6A8h */ case    2:  		/* bl -731808 */
		/* 8220A6A8h case    2:*/		regs.LR = 0x8220A6AC; return 0x82157C08;
		/* 8220A6A8h case    2:*/		return 0x8220A6AC;
	}
	return 0x8220A6AC;
} // Block from 8220A6A0h-8220A6ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220A6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A6AC);
		  /* 8220A6ACh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220A6ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220A6ACh case    0:*/		return 0x8220A6B0;
		  /* 8220A6B0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A6B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220A6D0;  }
		/* 8220A6B0h case    1:*/		return 0x8220A6B4;
		  /* 8220A6B4h */ case    2:  		/* lis R11, -32252 */
		/* 8220A6B4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A6B4h case    2:*/		return 0x8220A6B8;
		  /* 8220A6B8h */ case    3:  		/* mr R6, R26 */
		/* 8220A6B8h case    3:*/		regs.R6 = regs.R26;
		/* 8220A6B8h case    3:*/		return 0x8220A6BC;
		  /* 8220A6BCh */ case    4:  		/* addi R5, R11, -11796 */
		/* 8220A6BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1EC);
		/* 8220A6BCh case    4:*/		return 0x8220A6C0;
		  /* 8220A6C0h */ case    5:  		/* mr R4, R31 */
		/* 8220A6C0h case    5:*/		regs.R4 = regs.R31;
		/* 8220A6C0h case    5:*/		return 0x8220A6C4;
		  /* 8220A6C4h */ case    6:  		/* li R7, 85 */
		/* 8220A6C4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x55);
		/* 8220A6C4h case    6:*/		return 0x8220A6C8;
		  /* 8220A6C8h */ case    7:  		/* li R3, 0 */
		/* 8220A6C8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A6C8h case    7:*/		return 0x8220A6CC;
		  /* 8220A6CCh */ case    8:  		/* bl -731844 */
		/* 8220A6CCh case    8:*/		regs.LR = 0x8220A6D0; return 0x82157C08;
		/* 8220A6CCh case    8:*/		return 0x8220A6D0;
	}
	return 0x8220A6D0;
} // Block from 8220A6ACh-8220A6D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A6D0);
		  /* 8220A6D0h */ case    0:  		/* mr R3, R28 */
		/* 8220A6D0h case    0:*/		regs.R3 = regs.R28;
		/* 8220A6D0h case    0:*/		return 0x8220A6D4;
		  /* 8220A6D4h */ case    1:  		/* bl -700620 */
		/* 8220A6D4h case    1:*/		regs.LR = 0x8220A6D8; return 0x8215F608;
		/* 8220A6D4h case    1:*/		return 0x8220A6D8;
		  /* 8220A6D8h */ case    2:  		/* bl -703232 */
		/* 8220A6D8h case    2:*/		regs.LR = 0x8220A6DC; return 0x8215EBD8;
		/* 8220A6D8h case    2:*/		return 0x8220A6DC;
		  /* 8220A6DCh */ case    3:  		/* mr R29, R3 */
		/* 8220A6DCh case    3:*/		regs.R29 = regs.R3;
		/* 8220A6DCh case    3:*/		return 0x8220A6E0;
		  /* 8220A6E0h */ case    4:  		/* mr R3, R28 */
		/* 8220A6E0h case    4:*/		regs.R3 = regs.R28;
		/* 8220A6E0h case    4:*/		return 0x8220A6E4;
		  /* 8220A6E4h */ case    5:  		/* bl -700636 */
		/* 8220A6E4h case    5:*/		regs.LR = 0x8220A6E8; return 0x8215F608;
		/* 8220A6E4h case    5:*/		return 0x8220A6E8;
		  /* 8220A6E8h */ case    6:  		/* bl -703240 */
		/* 8220A6E8h case    6:*/		regs.LR = 0x8220A6EC; return 0x8215EBE0;
		/* 8220A6E8h case    6:*/		return 0x8220A6EC;
		  /* 8220A6ECh */ case    7:  		/* mr R30, R3 */
		/* 8220A6ECh case    7:*/		regs.R30 = regs.R3;
		/* 8220A6ECh case    7:*/		return 0x8220A6F0;
		  /* 8220A6F0h */ case    8:  		/* mr R3, R28 */
		/* 8220A6F0h case    8:*/		regs.R3 = regs.R28;
		/* 8220A6F0h case    8:*/		return 0x8220A6F4;
		  /* 8220A6F4h */ case    9:  		/* bl -700652 */
		/* 8220A6F4h case    9:*/		regs.LR = 0x8220A6F8; return 0x8215F608;
		/* 8220A6F4h case    9:*/		return 0x8220A6F8;
		  /* 8220A6F8h */ case   10:  		/* bl -703232 */
		/* 8220A6F8h case   10:*/		regs.LR = 0x8220A6FC; return 0x8215EBF8;
		/* 8220A6F8h case   10:*/		return 0x8220A6FC;
		  /* 8220A6FCh */ case   11:  		/* mr R22, R3 */
		/* 8220A6FCh case   11:*/		regs.R22 = regs.R3;
		/* 8220A6FCh case   11:*/		return 0x8220A700;
		  /* 8220A700h */ case   12:  		/* cmplwi CR6, R29, 0 */
		/* 8220A700h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220A700h case   12:*/		return 0x8220A704;
		  /* 8220A704h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A704h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220A724;  }
		/* 8220A704h case   13:*/		return 0x8220A708;
		  /* 8220A708h */ case   14:  		/* lis R11, -32252 */
		/* 8220A708h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A708h case   14:*/		return 0x8220A70C;
		  /* 8220A70Ch */ case   15:  		/* mr R6, R26 */
		/* 8220A70Ch case   15:*/		regs.R6 = regs.R26;
		/* 8220A70Ch case   15:*/		return 0x8220A710;
		  /* 8220A710h */ case   16:  		/* addi R5, R11, -11808 */
		/* 8220A710h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1E0);
		/* 8220A710h case   16:*/		return 0x8220A714;
		  /* 8220A714h */ case   17:  		/* mr R4, R31 */
		/* 8220A714h case   17:*/		regs.R4 = regs.R31;
		/* 8220A714h case   17:*/		return 0x8220A718;
		  /* 8220A718h */ case   18:  		/* li R7, 90 */
		/* 8220A718h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x5A);
		/* 8220A718h case   18:*/		return 0x8220A71C;
		  /* 8220A71Ch */ case   19:  		/* li R3, 0 */
		/* 8220A71Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A71Ch case   19:*/		return 0x8220A720;
	}
	return 0x8220A720;
} // Block from 8220A6D0h-8220A720h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220A720h
// Function '?PreprocessTexType@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A720);
		  /* 8220A720h */ case    0:  		/* bl -731928 */
		/* 8220A720h case    0:*/		regs.LR = 0x8220A724; return 0x82157C08;
		/* 8220A720h case    0:*/		return 0x8220A724;
	}
	return 0x8220A724;
} // Block from 8220A720h-8220A724h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220A724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A724);
		  /* 8220A724h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220A724h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220A724h case    0:*/		return 0x8220A728;
		  /* 8220A728h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A728h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220A748;  }
		/* 8220A728h case    1:*/		return 0x8220A72C;
		  /* 8220A72Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220A72Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A72Ch case    2:*/		return 0x8220A730;
		  /* 8220A730h */ case    3:  		/* mr R6, R26 */
		/* 8220A730h case    3:*/		regs.R6 = regs.R26;
		/* 8220A730h case    3:*/		return 0x8220A734;
		  /* 8220A734h */ case    4:  		/* addi R5, R11, -11824 */
		/* 8220A734h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1D0);
		/* 8220A734h case    4:*/		return 0x8220A738;
		  /* 8220A738h */ case    5:  		/* mr R4, R31 */
		/* 8220A738h case    5:*/		regs.R4 = regs.R31;
		/* 8220A738h case    5:*/		return 0x8220A73C;
		  /* 8220A73Ch */ case    6:  		/* li R7, 91 */
		/* 8220A73Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5B);
		/* 8220A73Ch case    6:*/		return 0x8220A740;
		  /* 8220A740h */ case    7:  		/* li R3, 0 */
		/* 8220A740h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A740h case    7:*/		return 0x8220A744;
		  /* 8220A744h */ case    8:  		/* bl -731964 */
		/* 8220A744h case    8:*/		regs.LR = 0x8220A748; return 0x82157C08;
		/* 8220A744h case    8:*/		return 0x8220A748;
	}
	return 0x8220A748;
} // Block from 8220A724h-8220A748h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A748);
		  /* 8220A748h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8220A748h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8220A748h case    0:*/		return 0x8220A74C;
		  /* 8220A74Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220A74Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220A76C;  }
		/* 8220A74Ch case    1:*/		return 0x8220A750;
		  /* 8220A750h */ case    2:  		/* lis R11, -32252 */
		/* 8220A750h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220A750h case    2:*/		return 0x8220A754;
		  /* 8220A754h */ case    3:  		/* mr R6, R26 */
		/* 8220A754h case    3:*/		regs.R6 = regs.R26;
		/* 8220A754h case    3:*/		return 0x8220A758;
		  /* 8220A758h */ case    4:  		/* addi R5, R11, -12620 */
		/* 8220A758h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCEB4);
		/* 8220A758h case    4:*/		return 0x8220A75C;
		  /* 8220A75Ch */ case    5:  		/* mr R4, R31 */
		/* 8220A75Ch case    5:*/		regs.R4 = regs.R31;
		/* 8220A75Ch case    5:*/		return 0x8220A760;
		  /* 8220A760h */ case    6:  		/* li R7, 92 */
		/* 8220A760h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5C);
		/* 8220A760h case    6:*/		return 0x8220A764;
		  /* 8220A764h */ case    7:  		/* li R3, 0 */
		/* 8220A764h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220A764h case    7:*/		return 0x8220A768;
		  /* 8220A768h */ case    8:  		/* bl -732000 */
		/* 8220A768h case    8:*/		regs.LR = 0x8220A76C; return 0x82157C08;
		/* 8220A768h case    8:*/		return 0x8220A76C;
	}
	return 0x8220A76C;
} // Block from 8220A748h-8220A76Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A76C);
		  /* 8220A76Ch */ case    0:  		/* lwz R11, <#[R25 + 20]> */
		/* 8220A76Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 8220A76Ch case    0:*/		return 0x8220A770;
		  /* 8220A770h */ case    1:  		/* li R4, 444 */
		/* 8220A770h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1BC);
		/* 8220A770h case    1:*/		return 0x8220A774;
		  /* 8220A774h */ case    2:  		/* lwz R3, <#[R25 + 16]> */
		/* 8220A774h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000010) );
		/* 8220A774h case    2:*/		return 0x8220A778;
		  /* 8220A778h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220A778h case    3:*/		regs.CTR = regs.R11;
		/* 8220A778h case    3:*/		return 0x8220A77C;
		  /* 8220A77Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220A77Ch case    4:*/		if ( 1 ) { regs.LR = 0x8220A780; return (uint32)regs.CTR; }
		/* 8220A77Ch case    4:*/		return 0x8220A780;
		  /* 8220A780h */ case    5:  		/* or. R31, R3, R3 */
		/* 8220A780h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220A780h case    5:*/		return 0x8220A784;
		  /* 8220A784h */ case    6:  		/* bc 12, CR0_EQ, 896 */
		/* 8220A784h case    6:*/		if ( regs.CR[0].eq ) { return 0x8220AB04;  }
		/* 8220A784h case    6:*/		return 0x8220A788;
		  /* 8220A788h */ case    7:  		/* stw R28, <#[R31]> */
		/* 8220A788h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8220A788h case    7:*/		return 0x8220A78C;
		  /* 8220A78Ch */ case    8:  		/* addi R3, R31, 164 */
		/* 8220A78Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xA4);
		/* 8220A78Ch case    8:*/		return 0x8220A790;
	}
	return 0x8220A790;
} // Block from 8220A76Ch-8220A790h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220A790h
// Function '?PreprocessTexFormat@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A790);
		  /* 8220A790h */ case    0:  		/* stw R24, <#[R31 + 4]> */
		/* 8220A790h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000004) );
		/* 8220A790h case    0:*/		return 0x8220A794;
		  /* 8220A794h */ case    1:  		/* li R5, 72 */
		/* 8220A794h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x48);
		/* 8220A794h case    1:*/		return 0x8220A798;
		  /* 8220A798h */ case    2:  		/* mr R4, R25 */
		/* 8220A798h case    2:*/		regs.R4 = regs.R25;
		/* 8220A798h case    2:*/		return 0x8220A79C;
		  /* 8220A79Ch */ case    3:  		/* bl -1543660 */
		/* 8220A79Ch case    3:*/		regs.LR = 0x8220A7A0; return 0x820919B0;
		/* 8220A79Ch case    3:*/		return 0x8220A7A0;
		  /* 8220A7A0h */ case    4:  		/* addi R3, R31, 236 */
		/* 8220A7A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xEC);
		/* 8220A7A0h case    4:*/		return 0x8220A7A4;
		  /* 8220A7A4h */ case    5:  		/* li R5, 32 */
		/* 8220A7A4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8220A7A4h case    5:*/		return 0x8220A7A8;
		  /* 8220A7A8h */ case    6:  		/* mr R4, R27 */
		/* 8220A7A8h case    6:*/		regs.R4 = regs.R27;
		/* 8220A7A8h case    6:*/		return 0x8220A7AC;
		  /* 8220A7ACh */ case    7:  		/* bl -1543676 */
		/* 8220A7ACh case    7:*/		regs.LR = 0x8220A7B0; return 0x820919B0;
		/* 8220A7ACh case    7:*/		return 0x8220A7B0;
		  /* 8220A7B0h */ case    8:  		/* addi R3, R31, 68 */
		/* 8220A7B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x44);
		/* 8220A7B0h case    8:*/		return 0x8220A7B4;
		  /* 8220A7B4h */ case    9:  		/* li R5, 24 */
		/* 8220A7B4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8220A7B4h case    9:*/		return 0x8220A7B8;
		  /* 8220A7B8h */ case   10:  		/* mr R4, R29 */
		/* 8220A7B8h case   10:*/		regs.R4 = regs.R29;
		/* 8220A7B8h case   10:*/		return 0x8220A7BC;
		  /* 8220A7BCh */ case   11:  		/* bl -1543692 */
		/* 8220A7BCh case   11:*/		regs.LR = 0x8220A7C0; return 0x820919B0;
		/* 8220A7BCh case   11:*/		return 0x8220A7C0;
		  /* 8220A7C0h */ case   12:  		/* addi R3, R31, 92 */
		/* 8220A7C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x5C);
		/* 8220A7C0h case   12:*/		return 0x8220A7C4;
		  /* 8220A7C4h */ case   13:  		/* li R5, 72 */
		/* 8220A7C4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x48);
		/* 8220A7C4h case   13:*/		return 0x8220A7C8;
		  /* 8220A7C8h */ case   14:  		/* mr R4, R30 */
		/* 8220A7C8h case   14:*/		regs.R4 = regs.R30;
		/* 8220A7C8h case   14:*/		return 0x8220A7CC;
		  /* 8220A7CCh */ case   15:  		/* bl -1543708 */
		/* 8220A7CCh case   15:*/		regs.LR = 0x8220A7D0; return 0x820919B0;
		/* 8220A7CCh case   15:*/		return 0x8220A7D0;
		  /* 8220A7D0h */ case   16:  		/* lwz R11, <#[R29]> */
		/* 8220A7D0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8220A7D0h case   16:*/		return 0x8220A7D4;
		  /* 8220A7D4h */ case   17:  		/* mr R3, R31 */
		/* 8220A7D4h case   17:*/		regs.R3 = regs.R31;
		/* 8220A7D4h case   17:*/		return 0x8220A7D8;
		  /* 8220A7D8h */ case   18:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8220A7D8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8220A7D8h case   18:*/		return 0x8220A7DC;
		  /* 8220A7DCh */ case   19:  		/* bl -836 */
		/* 8220A7DCh case   19:*/		regs.LR = 0x8220A7E0; return 0x8220A498;
		/* 8220A7DCh case   19:*/		return 0x8220A7E0;
		  /* 8220A7E0h */ case   20:  		/* stw R3, <#[R31 + 8]> */
		/* 8220A7E0h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8220A7E0h case   20:*/		return 0x8220A7E4;
		  /* 8220A7E4h */ case   21:  		/* lwz R11, <#[R29 + 8]> */
		/* 8220A7E4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8220A7E4h case   21:*/		return 0x8220A7E8;
		  /* 8220A7E8h */ case   22:  		/* addi R11, R11, 31 */
		/* 8220A7E8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A7E8h case   22:*/		return 0x8220A7EC;
		  /* 8220A7ECh */ case   23:  		/* mr R3, R31 */
		/* 8220A7ECh case   23:*/		regs.R3 = regs.R31;
		/* 8220A7ECh case   23:*/		return 0x8220A7F0;
		  /* 8220A7F0h */ case   24:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A7F0h case   24:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A7F0h case   24:*/		return 0x8220A7F4;
		  /* 8220A7F4h */ case   25:  		/* bl -860 */
		/* 8220A7F4h case   25:*/		regs.LR = 0x8220A7F8; return 0x8220A498;
		/* 8220A7F4h case   25:*/		return 0x8220A7F8;
		  /* 8220A7F8h */ case   26:  		/* stw R3, <#[R31 + 12]> */
		/* 8220A7F8h case   26:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220A7F8h case   26:*/		return 0x8220A7FC;
		  /* 8220A7FCh */ case   27:  		/* lwz R11, <#[R30]> */
		/* 8220A7FCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220A7FCh case   27:*/		return 0x8220A800;
		  /* 8220A800h */ case   28:  		/* rlwinm R4, R11, 4, 0, 27 */
		/* 8220A800h case   28:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R4,regs.R11);
		/* 8220A800h case   28:*/		return 0x8220A804;
		  /* 8220A804h */ case   29:  		/* mr R3, R31 */
		/* 8220A804h case   29:*/		regs.R3 = regs.R31;
		/* 8220A804h case   29:*/		return 0x8220A808;
		  /* 8220A808h */ case   30:  		/* bl -880 */
		/* 8220A808h case   30:*/		regs.LR = 0x8220A80C; return 0x8220A498;
		/* 8220A808h case   30:*/		return 0x8220A80C;
		  /* 8220A80Ch */ case   31:  		/* stw R3, <#[R31 + 20]> */
		/* 8220A80Ch case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220A80Ch case   31:*/		return 0x8220A810;
		  /* 8220A810h */ case   32:  		/* lwz R11, <#[R30 + 12]> */
		/* 8220A810h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8220A810h case   32:*/		return 0x8220A814;
		  /* 8220A814h */ case   33:  		/* rlwinm R4, R11, 4, 0, 27 */
		/* 8220A814h case   33:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R4,regs.R11);
		/* 8220A814h case   33:*/		return 0x8220A818;
		  /* 8220A818h */ case   34:  		/* mr R3, R31 */
		/* 8220A818h case   34:*/		regs.R3 = regs.R31;
		/* 8220A818h case   34:*/		return 0x8220A81C;
		  /* 8220A81Ch */ case   35:  		/* bl -900 */
		/* 8220A81Ch case   35:*/		regs.LR = 0x8220A820; return 0x8220A498;
		/* 8220A81Ch case   35:*/		return 0x8220A820;
		  /* 8220A820h */ case   36:  		/* stw R3, <#[R31 + 24]> */
		/* 8220A820h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220A820h case   36:*/		return 0x8220A824;
		  /* 8220A824h */ case   37:  		/* lwz R11, <#[R30 + 48]> */
		/* 8220A824h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8220A824h case   37:*/		return 0x8220A828;
		  /* 8220A828h */ case   38:  		/* addi R11, R11, 31 */
		/* 8220A828h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A828h case   38:*/		return 0x8220A82C;
		  /* 8220A82Ch */ case   39:  		/* mr R3, R31 */
		/* 8220A82Ch case   39:*/		regs.R3 = regs.R31;
		/* 8220A82Ch case   39:*/		return 0x8220A830;
	}
	return 0x8220A830;
} // Block from 8220A790h-8220A830h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8220A830h
// Function '?PreprocessTexClamp@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A830);
		  /* 8220A830h */ case    0:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A830h case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A830h case    0:*/		return 0x8220A834;
		  /* 8220A834h */ case    1:  		/* bl -924 */
		/* 8220A834h case    1:*/		regs.LR = 0x8220A838; return 0x8220A498;
		/* 8220A834h case    1:*/		return 0x8220A838;
		  /* 8220A838h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 8220A838h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8220A838h case    2:*/		return 0x8220A83C;
		  /* 8220A83Ch */ case    3:  		/* lwz R11, <#[R30 + 60]> */
		/* 8220A83Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 8220A83Ch case    3:*/		return 0x8220A840;
		  /* 8220A840h */ case    4:  		/* addi R11, R11, 31 */
		/* 8220A840h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A840h case    4:*/		return 0x8220A844;
		  /* 8220A844h */ case    5:  		/* mr R3, R31 */
		/* 8220A844h case    5:*/		regs.R3 = regs.R31;
		/* 8220A844h case    5:*/		return 0x8220A848;
		  /* 8220A848h */ case    6:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A848h case    6:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A848h case    6:*/		return 0x8220A84C;
		  /* 8220A84Ch */ case    7:  		/* bl -948 */
		/* 8220A84Ch case    7:*/		regs.LR = 0x8220A850; return 0x8220A498;
		/* 8220A84Ch case    7:*/		return 0x8220A850;
		  /* 8220A850h */ case    8:  		/* stw R3, <#[R31 + 56]> */
		/* 8220A850h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 8220A850h case    8:*/		return 0x8220A854;
		  /* 8220A854h */ case    9:  		/* lwz R11, <#[R30 + 4]> */
		/* 8220A854h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220A854h case    9:*/		return 0x8220A858;
		  /* 8220A858h */ case   10:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8220A858h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8220A858h case   10:*/		return 0x8220A85C;
		  /* 8220A85Ch */ case   11:  		/* mr R3, R31 */
		/* 8220A85Ch case   11:*/		regs.R3 = regs.R31;
		/* 8220A85Ch case   11:*/		return 0x8220A860;
		  /* 8220A860h */ case   12:  		/* bl -968 */
		/* 8220A860h case   12:*/		regs.LR = 0x8220A864; return 0x8220A498;
		/* 8220A860h case   12:*/		return 0x8220A864;
		  /* 8220A864h */ case   13:  		/* stw R3, <#[R31 + 28]> */
		/* 8220A864h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220A864h case   13:*/		return 0x8220A868;
		  /* 8220A868h */ case   14:  		/* lwz R11, <#[R30 + 16]> */
		/* 8220A868h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8220A868h case   14:*/		return 0x8220A86C;
		  /* 8220A86Ch */ case   15:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8220A86Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8220A86Ch case   15:*/		return 0x8220A870;
		  /* 8220A870h */ case   16:  		/* mr R3, R31 */
		/* 8220A870h case   16:*/		regs.R3 = regs.R31;
		/* 8220A870h case   16:*/		return 0x8220A874;
		  /* 8220A874h */ case   17:  		/* bl -988 */
		/* 8220A874h case   17:*/		regs.LR = 0x8220A878; return 0x8220A498;
		/* 8220A874h case   17:*/		return 0x8220A878;
		  /* 8220A878h */ case   18:  		/* stw R3, <#[R31 + 32]> */
		/* 8220A878h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8220A878h case   18:*/		return 0x8220A87C;
		  /* 8220A87Ch */ case   19:  		/* lwz R11, <#[R30 + 52]> */
		/* 8220A87Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8220A87Ch case   19:*/		return 0x8220A880;
		  /* 8220A880h */ case   20:  		/* addi R11, R11, 31 */
		/* 8220A880h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A880h case   20:*/		return 0x8220A884;
		  /* 8220A884h */ case   21:  		/* mr R3, R31 */
		/* 8220A884h case   21:*/		regs.R3 = regs.R31;
		/* 8220A884h case   21:*/		return 0x8220A888;
		  /* 8220A888h */ case   22:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A888h case   22:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A888h case   22:*/		return 0x8220A88C;
		  /* 8220A88Ch */ case   23:  		/* bl -1012 */
		/* 8220A88Ch case   23:*/		regs.LR = 0x8220A890; return 0x8220A498;
		/* 8220A88Ch case   23:*/		return 0x8220A890;
		  /* 8220A890h */ case   24:  		/* stw R3, <#[R31 + 48]> */
		/* 8220A890h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8220A890h case   24:*/		return 0x8220A894;
		  /* 8220A894h */ case   25:  		/* lwz R11, <#[R30 + 64]> */
		/* 8220A894h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000040) );
		/* 8220A894h case   25:*/		return 0x8220A898;
		  /* 8220A898h */ case   26:  		/* addi R11, R11, 31 */
		/* 8220A898h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A898h case   26:*/		return 0x8220A89C;
		  /* 8220A89Ch */ case   27:  		/* mr R3, R31 */
		/* 8220A89Ch case   27:*/		regs.R3 = regs.R31;
		/* 8220A89Ch case   27:*/		return 0x8220A8A0;
		  /* 8220A8A0h */ case   28:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A8A0h case   28:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A8A0h case   28:*/		return 0x8220A8A4;
		  /* 8220A8A4h */ case   29:  		/* bl -1036 */
		/* 8220A8A4h case   29:*/		regs.LR = 0x8220A8A8; return 0x8220A498;
		/* 8220A8A4h case   29:*/		return 0x8220A8A8;
		  /* 8220A8A8h */ case   30:  		/* stw R3, <#[R31 + 60]> */
		/* 8220A8A8h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 8220A8A8h case   30:*/		return 0x8220A8AC;
		  /* 8220A8ACh */ case   31:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220A8ACh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220A8ACh case   31:*/		return 0x8220A8B0;
		  /* 8220A8B0h */ case   32:  		/* addi R11, R11, 31 */
		/* 8220A8B0h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A8B0h case   32:*/		return 0x8220A8B4;
		  /* 8220A8B4h */ case   33:  		/* mr R3, R31 */
		/* 8220A8B4h case   33:*/		regs.R3 = regs.R31;
		/* 8220A8B4h case   33:*/		return 0x8220A8B8;
		  /* 8220A8B8h */ case   34:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A8B8h case   34:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A8B8h case   34:*/		return 0x8220A8BC;
		  /* 8220A8BCh */ case   35:  		/* bl -1060 */
		/* 8220A8BCh case   35:*/		regs.LR = 0x8220A8C0; return 0x8220A498;
		/* 8220A8BCh case   35:*/		return 0x8220A8C0;
		  /* 8220A8C0h */ case   36:  		/* stw R3, <#[R31 + 36]> */
		/* 8220A8C0h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 8220A8C0h case   36:*/		return 0x8220A8C4;
		  /* 8220A8C4h */ case   37:  		/* lwz R11, <#[R30 + 20]> */
		/* 8220A8C4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8220A8C4h case   37:*/		return 0x8220A8C8;
		  /* 8220A8C8h */ case   38:  		/* addi R11, R11, 31 */
		/* 8220A8C8h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A8C8h case   38:*/		return 0x8220A8CC;
		  /* 8220A8CCh */ case   39:  		/* mr R3, R31 */
		/* 8220A8CCh case   39:*/		regs.R3 = regs.R31;
		/* 8220A8CCh case   39:*/		return 0x8220A8D0;
		  /* 8220A8D0h */ case   40:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A8D0h case   40:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A8D0h case   40:*/		return 0x8220A8D4;
		  /* 8220A8D4h */ case   41:  		/* bl -1084 */
		/* 8220A8D4h case   41:*/		regs.LR = 0x8220A8D8; return 0x8220A498;
		/* 8220A8D4h case   41:*/		return 0x8220A8D8;
		  /* 8220A8D8h */ case   42:  		/* stw R3, <#[R31 + 40]> */
		/* 8220A8D8h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 8220A8D8h case   42:*/		return 0x8220A8DC;
		  /* 8220A8DCh */ case   43:  		/* lwz R11, <#[R30 + 56]> */
		/* 8220A8DCh case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 8220A8DCh case   43:*/		return 0x8220A8E0;
		  /* 8220A8E0h */ case   44:  		/* addi R11, R11, 31 */
		/* 8220A8E0h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A8E0h case   44:*/		return 0x8220A8E4;
		  /* 8220A8E4h */ case   45:  		/* mr R3, R31 */
		/* 8220A8E4h case   45:*/		regs.R3 = regs.R31;
		/* 8220A8E4h case   45:*/		return 0x8220A8E8;
		  /* 8220A8E8h */ case   46:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A8E8h case   46:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A8E8h case   46:*/		return 0x8220A8EC;
		  /* 8220A8ECh */ case   47:  		/* bl -1108 */
		/* 8220A8ECh case   47:*/		regs.LR = 0x8220A8F0; return 0x8220A498;
		/* 8220A8ECh case   47:*/		return 0x8220A8F0;
		  /* 8220A8F0h */ case   48:  		/* stw R3, <#[R31 + 52]> */
		/* 8220A8F0h case   48:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8220A8F0h case   48:*/		return 0x8220A8F4;
		  /* 8220A8F4h */ case   49:  		/* lwz R11, <#[R30 + 68]> */
		/* 8220A8F4h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000044) );
		/* 8220A8F4h case   49:*/		return 0x8220A8F8;
		  /* 8220A8F8h */ case   50:  		/* addi R11, R11, 31 */
		/* 8220A8F8h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A8F8h case   50:*/		return 0x8220A8FC;
		  /* 8220A8FCh */ case   51:  		/* mr R3, R31 */
		/* 8220A8FCh case   51:*/		regs.R3 = regs.R31;
		/* 8220A8FCh case   51:*/		return 0x8220A900;
		  /* 8220A900h */ case   52:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 8220A900h case   52:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 8220A900h case   52:*/		return 0x8220A904;
		  /* 8220A904h */ case   53:  		/* bl -1132 */
		/* 8220A904h case   53:*/		regs.LR = 0x8220A908; return 0x8220A498;
		/* 8220A904h case   53:*/		return 0x8220A908;
		  /* 8220A908h */ case   54:  		/* lwz R10, <#[R31 + 8]> */
		/* 8220A908h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8220A908h case   54:*/		return 0x8220A90C;
		  /* 8220A90Ch */ case   55:  		/* mr R11, R3 */
		/* 8220A90Ch case   55:*/		regs.R11 = regs.R3;
		/* 8220A90Ch case   55:*/		return 0x8220A910;
		  /* 8220A910h */ case   56:  		/* stw R3, <#[R31 + 64]> */
		/* 8220A910h case   56:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000040) );
		/* 8220A910h case   56:*/		return 0x8220A914;
		  /* 8220A914h */ case   57:  		/* cmplwi CR6, R10, 0 */
		/* 8220A914h case   57:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A914h case   57:*/		return 0x8220A918;
		  /* 8220A918h */ case   58:  		/* bc 12, CR6_EQ, 484 */
		/* 8220A918h case   58:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A918h case   58:*/		return 0x8220A91C;
		  /* 8220A91Ch */ case   59:  		/* lwz R3, <#[R31 + 12]> */
		/* 8220A91Ch case   59:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220A91Ch case   59:*/		return 0x8220A920;
		  /* 8220A920h */ case   60:  		/* cmplwi CR6, R3, 0 */
		/* 8220A920h case   60:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220A920h case   60:*/		return 0x8220A924;
		  /* 8220A924h */ case   61:  		/* bc 12, CR6_EQ, 472 */
		/* 8220A924h case   61:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A924h case   61:*/		return 0x8220A928;
		  /* 8220A928h */ case   62:  		/* lwz R10, <#[R31 + 20]> */
		/* 8220A928h case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8220A928h case   62:*/		return 0x8220A92C;
		  /* 8220A92Ch */ case   63:  		/* cmplwi CR6, R10, 0 */
		/* 8220A92Ch case   63:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A92Ch case   63:*/		return 0x8220A930;
		  /* 8220A930h */ case   64:  		/* bc 12, CR6_EQ, 460 */
		/* 8220A930h case   64:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A930h case   64:*/		return 0x8220A934;
		  /* 8220A934h */ case   65:  		/* lwz R10, <#[R31 + 24]> */
		/* 8220A934h case   65:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8220A934h case   65:*/		return 0x8220A938;
		  /* 8220A938h */ case   66:  		/* cmplwi CR6, R10, 0 */
		/* 8220A938h case   66:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A938h case   66:*/		return 0x8220A93C;
		  /* 8220A93Ch */ case   67:  		/* bc 12, CR6_EQ, 448 */
		/* 8220A93Ch case   67:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A93Ch case   67:*/		return 0x8220A940;
		  /* 8220A940h */ case   68:  		/* lwz R10, <#[R31 + 28]> */
		/* 8220A940h case   68:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220A940h case   68:*/		return 0x8220A944;
		  /* 8220A944h */ case   69:  		/* cmplwi CR6, R10, 0 */
		/* 8220A944h case   69:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A944h case   69:*/		return 0x8220A948;
		  /* 8220A948h */ case   70:  		/* bc 12, CR6_EQ, 436 */
		/* 8220A948h case   70:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A948h case   70:*/		return 0x8220A94C;
		  /* 8220A94Ch */ case   71:  		/* lwz R10, <#[R31 + 32]> */
		/* 8220A94Ch case   71:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8220A94Ch case   71:*/		return 0x8220A950;
		  /* 8220A950h */ case   72:  		/* cmplwi CR6, R10, 0 */
		/* 8220A950h case   72:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A950h case   72:*/		return 0x8220A954;
		  /* 8220A954h */ case   73:  		/* bc 12, CR6_EQ, 424 */
		/* 8220A954h case   73:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A954h case   73:*/		return 0x8220A958;
		  /* 8220A958h */ case   74:  		/* lwz R10, <#[R31 + 36]> */
		/* 8220A958h case   74:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 8220A958h case   74:*/		return 0x8220A95C;
		  /* 8220A95Ch */ case   75:  		/* cmplwi CR6, R10, 0 */
		/* 8220A95Ch case   75:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A95Ch case   75:*/		return 0x8220A960;
		  /* 8220A960h */ case   76:  		/* bc 12, CR6_EQ, 412 */
		/* 8220A960h case   76:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A960h case   76:*/		return 0x8220A964;
		  /* 8220A964h */ case   77:  		/* lwz R10, <#[R31 + 40]> */
		/* 8220A964h case   77:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8220A964h case   77:*/		return 0x8220A968;
		  /* 8220A968h */ case   78:  		/* cmplwi CR6, R10, 0 */
		/* 8220A968h case   78:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A968h case   78:*/		return 0x8220A96C;
		  /* 8220A96Ch */ case   79:  		/* bc 12, CR6_EQ, 400 */
		/* 8220A96Ch case   79:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A96Ch case   79:*/		return 0x8220A970;
		  /* 8220A970h */ case   80:  		/* lwz R10, <#[R31 + 44]> */
		/* 8220A970h case   80:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 8220A970h case   80:*/		return 0x8220A974;
		  /* 8220A974h */ case   81:  		/* cmplwi CR6, R10, 0 */
		/* 8220A974h case   81:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A974h case   81:*/		return 0x8220A978;
		  /* 8220A978h */ case   82:  		/* bc 12, CR6_EQ, 388 */
		/* 8220A978h case   82:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A978h case   82:*/		return 0x8220A97C;
		  /* 8220A97Ch */ case   83:  		/* lwz R10, <#[R31 + 56]> */
		/* 8220A97Ch case   83:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8220A97Ch case   83:*/		return 0x8220A980;
		  /* 8220A980h */ case   84:  		/* cmplwi CR6, R10, 0 */
		/* 8220A980h case   84:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A980h case   84:*/		return 0x8220A984;
		  /* 8220A984h */ case   85:  		/* bc 12, CR6_EQ, 376 */
		/* 8220A984h case   85:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A984h case   85:*/		return 0x8220A988;
		  /* 8220A988h */ case   86:  		/* lwz R10, <#[R31 + 48]> */
		/* 8220A988h case   86:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 8220A988h case   86:*/		return 0x8220A98C;
		  /* 8220A98Ch */ case   87:  		/* cmplwi CR6, R10, 0 */
		/* 8220A98Ch case   87:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A98Ch case   87:*/		return 0x8220A990;
		  /* 8220A990h */ case   88:  		/* bc 12, CR6_EQ, 364 */
		/* 8220A990h case   88:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A990h case   88:*/		return 0x8220A994;
		  /* 8220A994h */ case   89:  		/* lwz R10, <#[R31 + 60]> */
		/* 8220A994h case   89:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000003C) );
		/* 8220A994h case   89:*/		return 0x8220A998;
	}
	return 0x8220A998;
} // Block from 8220A830h-8220A998h (90 instructions)

//////////////////////////////////////////////////////
// Block at 8220A998h
// Function '?SP_ProcessOnly@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SP_STATE_PREPROCESSOR@1@PAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220A998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220A998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220A998);
		  /* 8220A998h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8220A998h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A998h case    0:*/		return 0x8220A99C;
		  /* 8220A99Ch */ case    1:  		/* bc 12, CR6_EQ, 352 */
		/* 8220A99Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A99Ch case    1:*/		return 0x8220A9A0;
		  /* 8220A9A0h */ case    2:  		/* lwz R10, <#[R31 + 52]> */
		/* 8220A9A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 8220A9A0h case    2:*/		return 0x8220A9A4;
		  /* 8220A9A4h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8220A9A4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8220A9A4h case    3:*/		return 0x8220A9A8;
		  /* 8220A9A8h */ case    4:  		/* bc 12, CR6_EQ, 340 */
		/* 8220A9A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A9A8h case    4:*/		return 0x8220A9AC;
		  /* 8220A9ACh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8220A9ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220A9ACh case    5:*/		return 0x8220A9B0;
		  /* 8220A9B0h */ case    6:  		/* bc 12, CR6_EQ, 332 */
		/* 8220A9B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8220AAFC;  }
		/* 8220A9B0h case    6:*/		return 0x8220A9B4;
		  /* 8220A9B4h */ case    7:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220A9B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220A9B4h case    7:*/		return 0x8220A9B8;
		  /* 8220A9B8h */ case    8:  		/* li R4, 255 */
		/* 8220A9B8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8220A9B8h case    8:*/		return 0x8220A9BC;
		  /* 8220A9BCh */ case    9:  		/* ori R11, R11, 3 */
		/* 8220A9BCh case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8220A9BCh case    9:*/		return 0x8220A9C0;
		  /* 8220A9C0h */ case   10:  		/* stw R11, <#[R31 + 16]> */
		/* 8220A9C0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220A9C0h case   10:*/		return 0x8220A9C4;
		  /* 8220A9C4h */ case   11:  		/* lwz R11, <#[R29 + 8]> */
		/* 8220A9C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8220A9C4h case   11:*/		return 0x8220A9C8;
		  /* 8220A9C8h */ case   12:  		/* addi R11, R11, 31 */
		/* 8220A9C8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8220A9C8h case   12:*/		return 0x8220A9CC;
		  /* 8220A9CCh */ case   13:  		/* rlwinm R5, R11, 29, 3, 29 */
		/* 8220A9CCh case   13:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R5,regs.R11);
		/* 8220A9CCh case   13:*/		return 0x8220A9D0;
		  /* 8220A9D0h */ case   14:  		/* bl -1545872 */
		/* 8220A9D0h case   14:*/		regs.LR = 0x8220A9D4; return 0x82091340;
		/* 8220A9D0h case   14:*/		return 0x8220A9D4;
		  /* 8220A9D4h */ case   15:  		/* stw R22, <#[R31 + 268]> */
		/* 8220A9D4h case   15:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000010C) );
		/* 8220A9D4h case   15:*/		return 0x8220A9D8;
		  /* 8220A9D8h */ case   16:  		/* mr R3, R22 */
		/* 8220A9D8h case   16:*/		regs.R3 = regs.R22;
		/* 8220A9D8h case   16:*/		return 0x8220A9DC;
		  /* 8220A9DCh */ case   17:  		/* bl 3236 */
		/* 8220A9DCh case   17:*/		regs.LR = 0x8220A9E0; return 0x8220B680;
		/* 8220A9DCh case   17:*/		return 0x8220A9E0;
		  /* 8220A9E0h */ case   18:  		/* stw R3, <#[R31 + 272]> */
		/* 8220A9E0h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000110) );
		/* 8220A9E0h case   18:*/		return 0x8220A9E4;
		  /* 8220A9E4h */ case   19:  		/* mr R3, R25 */
		/* 8220A9E4h case   19:*/		regs.R3 = regs.R25;
		/* 8220A9E4h case   19:*/		return 0x8220A9E8;
		  /* 8220A9E8h */ case   20:  		/* bl 86104 */
		/* 8220A9E8h case   20:*/		regs.LR = 0x8220A9EC; return 0x8221FA40;
		/* 8220A9E8h case   20:*/		return 0x8220A9EC;
		  /* 8220A9ECh */ case   21:  		/* stw R3, <#[R31 + 276]> */
		/* 8220A9ECh case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000114) );
		/* 8220A9ECh case   21:*/		return 0x8220A9F0;
		  /* 8220A9F0h */ case   22:  		/* mr R3, R23 */
		/* 8220A9F0h case   22:*/		regs.R3 = regs.R23;
		/* 8220A9F0h case   22:*/		return 0x8220A9F4;
		  /* 8220A9F4h */ case   23:  		/* bl -703940 */
		/* 8220A9F4h case   23:*/		regs.LR = 0x8220A9F8; return 0x8215EC30;
		/* 8220A9F4h case   23:*/		return 0x8220A9F8;
		  /* 8220A9F8h */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 8220A9F8h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220A9F8h case   24:*/		return 0x8220A9FC;
		  /* 8220A9FCh */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 8220A9FCh case   25:*/		if ( regs.CR[0].eq ) { return 0x8220AA14;  }
		/* 8220A9FCh case   25:*/		return 0x8220AA00;
		  /* 8220AA00h */ case   26:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220AA00h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220AA00h case   26:*/		return 0x8220AA04;
		  /* 8220AA04h */ case   27:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 8220AA04h case   27:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 8220AA04h case   27:*/		return 0x8220AA08;
		  /* 8220AA08h */ case   28:  		/* bc 12, CR0_EQ, 12 */
		/* 8220AA08h case   28:*/		if ( regs.CR[0].eq ) { return 0x8220AA14;  }
		/* 8220AA08h case   28:*/		return 0x8220AA0C;
		  /* 8220AA0Ch */ case   29:  		/* rlwinm R11, R11, 0, 28, 26 */
		/* 8220AA0Ch case   29:*/		cpu::op::rlwinm<0,0,28,26>(regs,&regs.R11,regs.R11);
		/* 8220AA0Ch case   29:*/		return 0x8220AA10;
		  /* 8220AA10h */ case   30:  		/* stw R11, <#[R31 + 4]> */
		/* 8220AA10h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220AA10h case   30:*/		return 0x8220AA14;
	}
	return 0x8220AA14;
} // Block from 8220A998h-8220AA14h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8220AA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AA14);
		  /* 8220AA14h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220AA14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220AA14h case    0:*/		return 0x8220AA18;
	}
	return 0x8220AA18;
} // Block from 8220AA14h-8220AA18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220AA18h
// Function '?SSMReg_Create@XGRAPHICS@@YAPAU_SSM_REGISTRY@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZP6AI0PADPAI@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AA18);
		  /* 8220AA18h */ case    0:  		/* mr R3, R23 */
		/* 8220AA18h case    0:*/		regs.R3 = regs.R23;
		/* 8220AA18h case    0:*/		return 0x8220AA1C;
		  /* 8220AA1Ch */ case    1:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 8220AA1Ch case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 8220AA1Ch case    1:*/		return 0x8220AA20;
		  /* 8220AA20h */ case    2:  		/* bc 12, CR0_EQ, 164 */
		/* 8220AA20h case    2:*/		if ( regs.CR[0].eq ) { return 0x8220AAC4;  }
		/* 8220AA20h case    2:*/		return 0x8220AA24;
		  /* 8220AA24h */ case    3:  		/* bl -703996 */
		/* 8220AA24h case    3:*/		regs.LR = 0x8220AA28; return 0x8215EC28;
		/* 8220AA24h case    3:*/		return 0x8220AA28;
		  /* 8220AA28h */ case    4:  		/* addi R30, R31, 296 */
		/* 8220AA28h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x128);
		/* 8220AA28h case    4:*/		return 0x8220AA2C;
		  /* 8220AA2Ch */ case    5:  		/* addi R29, R3, -12 */
		/* 8220AA2Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0xFFFFFFF4);
		/* 8220AA2Ch case    5:*/		return 0x8220AA30;
		  /* 8220AA30h */ case    6:  		/* li R27, 5 */
		/* 8220AA30h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x5);
		/* 8220AA30h case    6:*/		return 0x8220AA34;
		  /* 8220AA34h */ case    7:  		/* lwz R28, <#[R29 + 24]> */
		/* 8220AA34h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000018) );
		/* 8220AA34h case    7:*/		return 0x8220AA38;
		  /* 8220AA38h */ case    8:  		/* mr R6, R30 */
		/* 8220AA38h case    8:*/		regs.R6 = regs.R30;
		/* 8220AA38h case    8:*/		return 0x8220AA3C;
		  /* 8220AA3Ch */ case    9:  		/* lwz R11, <#[R29 + 28]> */
		/* 8220AA3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 8220AA3Ch case    9:*/		return 0x8220AA40;
		  /* 8220AA40h */ case   10:  		/* li R5, 1 */
		/* 8220AA40h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220AA40h case   10:*/		return 0x8220AA44;
		  /* 8220AA44h */ case   11:  		/* lwz R10, <#[R25 + 28]> */
		/* 8220AA44h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000001C) );
		/* 8220AA44h case   11:*/		return 0x8220AA48;
		  /* 8220AA48h */ case   12:  		/* add R26, R11, R28 */
		/* 8220AA48h case   12:*/		cpu::op::add<0>(regs,&regs.R26,regs.R11,regs.R28);
		/* 8220AA48h case   12:*/		return 0x8220AA4C;
		  /* 8220AA4Ch */ case   13:  		/* lwz R3, <#[R25 + 16]> */
		/* 8220AA4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000010) );
		/* 8220AA4Ch case   13:*/		return 0x8220AA50;
		  /* 8220AA50h */ case   14:  		/* mr R4, R26 */
		/* 8220AA50h case   14:*/		regs.R4 = regs.R26;
		/* 8220AA50h case   14:*/		return 0x8220AA54;
		  /* 8220AA54h */ case   15:  		/* mtspr CTR, R10 */
		/* 8220AA54h case   15:*/		regs.CTR = regs.R10;
		/* 8220AA54h case   15:*/		return 0x8220AA58;
		  /* 8220AA58h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8220AA58h case   16:*/		if ( 1 ) { regs.LR = 0x8220AA5C; return (uint32)regs.CTR; }
		/* 8220AA58h case   16:*/		return 0x8220AA5C;
		  /* 8220AA5Ch */ case   17:  		/* mr R5, R26 */
		/* 8220AA5Ch case   17:*/		regs.R5 = regs.R26;
		/* 8220AA5Ch case   17:*/		return 0x8220AA60;
		  /* 8220AA60h */ case   18:  		/* lwz R3, <#[R30]> */
		/* 8220AA60h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8220AA60h case   18:*/		return 0x8220AA64;
		  /* 8220AA64h */ case   19:  		/* li R4, 0 */
		/* 8220AA64h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220AA64h case   19:*/		return 0x8220AA68;
		  /* 8220AA68h */ case   20:  		/* bl 152560 */
		/* 8220AA68h case   20:*/		regs.LR = 0x8220AA6C; return 0x8222FE58;
		/* 8220AA68h case   20:*/		return 0x8220AA6C;
		  /* 8220AA6Ch */ case   21:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220AA6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220AA6Ch case   21:*/		return 0x8220AA70;
		  /* 8220AA70h */ case   22:  		/* lwz R10, <#[R30]> */
		/* 8220AA70h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8220AA70h case   22:*/		return 0x8220AA74;
		  /* 8220AA74h */ case   23:  		/* addi R9, R28, -1 */
		/* 8220AA74h case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0xFFFFFFFF);
		/* 8220AA74h case   23:*/		return 0x8220AA78;
		  /* 8220AA78h */ case   24:  		/* add R11, R28, R11 */
		/* 8220AA78h case   24:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 8220AA78h case   24:*/		return 0x8220AA7C;
		  /* 8220AA7Ch */ case   25:  		/* add R10, R28, R10 */
		/* 8220AA7Ch case   25:*/		cpu::op::add<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 8220AA7Ch case   25:*/		return 0x8220AA80;
		  /* 8220AA80h */ case   26:  		/* addi R11, R11, -1 */
		/* 8220AA80h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220AA80h case   26:*/		return 0x8220AA84;
		  /* 8220AA84h */ case   27:  		/* nor R9, R9, R9 */
		/* 8220AA84h case   27:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8220AA84h case   27:*/		return 0x8220AA88;
		  /* 8220AA88h */ case   28:  		/* addi R10, R10, -1 */
		/* 8220AA88h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8220AA88h case   28:*/		return 0x8220AA8C;
		  /* 8220AA8Ch */ case   29:  		/* and R11, R11, R9 */
		/* 8220AA8Ch case   29:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8220AA8Ch case   29:*/		return 0x8220AA90;
		  /* 8220AA90h */ case   30:  		/* and R10, R10, R9 */
		/* 8220AA90h case   30:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8220AA90h case   30:*/		return 0x8220AA94;
		  /* 8220AA94h */ case   31:  		/* stw R11, <#[R30 + 12]> */
		/* 8220AA94h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8220AA94h case   31:*/		return 0x8220AA98;
		  /* 8220AA98h */ case   32:  		/* addic. R27, R27, -1 */
		/* 8220AA98h case   32:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 8220AA98h case   32:*/		return 0x8220AA9C;
		  /* 8220AA9Ch */ case   33:  		/* stw R10, <#[R30 + 4]> */
		/* 8220AA9Ch case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8220AA9Ch case   33:*/		return 0x8220AAA0;
		  /* 8220AAA0h */ case   34:  		/* lwz R11, <#[R29 + 12]> */
		/* 8220AAA0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8220AAA0h case   34:*/		return 0x8220AAA4;
		  /* 8220AAA4h */ case   35:  		/* stw R11, <#[R30 - 12]> */
		/* 8220AAA4h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF4) );
		/* 8220AAA4h case   35:*/		return 0x8220AAA8;
		  /* 8220AAA8h */ case   36:  		/* lwz R11, <#[R29 + 16]> */
		/* 8220AAA8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8220AAA8h case   36:*/		return 0x8220AAAC;
		  /* 8220AAACh */ case   37:  		/* stw R11, <#[R30 - 8]> */
		/* 8220AAACh case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 8220AAACh case   37:*/		return 0x8220AAB0;
		  /* 8220AAB0h */ case   38:  		/* lwzu R11, <#[R29 + 20]> */
		/* 8220AAB0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		regs.R29 = (uint32)(regs.R29 + 0x00000014);
		/* 8220AAB0h case   38:*/		return 0x8220AAB4;
		  /* 8220AAB4h */ case   39:  		/* stw R11, <#[R30 - 4]> */
		/* 8220AAB4h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 8220AAB4h case   39:*/		return 0x8220AAB8;
		  /* 8220AAB8h */ case   40:  		/* addi R30, R30, 32 */
		/* 8220AAB8h case   40:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x20);
		/* 8220AAB8h case   40:*/		return 0x8220AABC;
		  /* 8220AABCh */ case   41:  		/* bc 4, CR0_EQ, -136 */
		/* 8220AABCh case   41:*/		if ( !regs.CR[0].eq ) { return 0x8220AA34;  }
		/* 8220AABCh case   41:*/		return 0x8220AAC0;
		  /* 8220AAC0h */ case   42:  		/* b 52 */
		/* 8220AAC0h case   42:*/		return 0x8220AAF4;
		/* 8220AAC0h case   42:*/		return 0x8220AAC4;
	}
	return 0x8220AAC4;
} // Block from 8220AA18h-8220AAC4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8220AAC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AAC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AAC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AAC4);
		  /* 8220AAC4h */ case    0:  		/* bl -704156 */
		/* 8220AAC4h case    0:*/		regs.LR = 0x8220AAC8; return 0x8215EC28;
		/* 8220AAC4h case    0:*/		return 0x8220AAC8;
		  /* 8220AAC8h */ case    1:  		/* li R9, 5 */
		/* 8220AAC8h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 8220AAC8h case    1:*/		return 0x8220AACC;
		  /* 8220AACCh */ case    2:  		/* addi R10, R31, 260 */
		/* 8220AACCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x104);
		/* 8220AACCh case    2:*/		return 0x8220AAD0;
		  /* 8220AAD0h */ case    3:  		/* addi R11, R3, -12 */
		/* 8220AAD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFF4);
		/* 8220AAD0h case    3:*/		return 0x8220AAD4;
		  /* 8220AAD4h */ case    4:  		/* mtspr CTR, R9 */
		/* 8220AAD4h case    4:*/		regs.CTR = regs.R9;
		/* 8220AAD4h case    4:*/		return 0x8220AAD8;
		  /* 8220AAD8h */ case    5:  		/* lwz R9, <#[R11 + 12]> */
		/* 8220AAD8h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220AAD8h case    5:*/		return 0x8220AADC;
		  /* 8220AADCh */ case    6:  		/* stw R9, <#[R10 + 24]> */
		/* 8220AADCh case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000018) );
		/* 8220AADCh case    6:*/		return 0x8220AAE0;
		  /* 8220AAE0h */ case    7:  		/* lwz R9, <#[R11 + 16]> */
		/* 8220AAE0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8220AAE0h case    7:*/		return 0x8220AAE4;
		  /* 8220AAE4h */ case    8:  		/* stw R9, <#[R10 + 28]> */
		/* 8220AAE4h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x0000001C) );
		/* 8220AAE4h case    8:*/		return 0x8220AAE8;
		  /* 8220AAE8h */ case    9:  		/* lwzu R9, <#[R11 + 20]> */
		/* 8220AAE8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		regs.R11 = (uint32)(regs.R11 + 0x00000014);
		/* 8220AAE8h case    9:*/		return 0x8220AAEC;
		  /* 8220AAECh */ case   10:  		/* stwu R9, <#[R10 + 32]> */
		/* 8220AAECh case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000020) );
		regs.R10 = (uint32)(regs.R10 + 0x00000020);
		/* 8220AAECh case   10:*/		return 0x8220AAF0;
		  /* 8220AAF0h */ case   11:  		/* bc 16, CR0_LT, -24 */
		/* 8220AAF0h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220AAD8;  }
		/* 8220AAF0h case   11:*/		return 0x8220AAF4;
	}
	return 0x8220AAF4;
} // Block from 8220AAC4h-8220AAF4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220AAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AAF4);
		  /* 8220AAF4h */ case    0:  		/* mr R3, R31 */
		/* 8220AAF4h case    0:*/		regs.R3 = regs.R31;
		/* 8220AAF4h case    0:*/		return 0x8220AAF8;
		  /* 8220AAF8h */ case    1:  		/* b 16 */
		/* 8220AAF8h case    1:*/		return 0x8220AB08;
		/* 8220AAF8h case    1:*/		return 0x8220AAFC;
	}
	return 0x8220AAFC;
} // Block from 8220AAF4h-8220AAFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220AAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AAFC);
		  /* 8220AAFCh */ case    0:  		/* mr R3, R31 */
		/* 8220AAFCh case    0:*/		regs.R3 = regs.R31;
		/* 8220AAFCh case    0:*/		return 0x8220AB00;
		  /* 8220AB00h */ case    1:  		/* bl -1544 */
		/* 8220AB00h case    1:*/		regs.LR = 0x8220AB04; return 0x8220A4F8;
		/* 8220AB00h case    1:*/		return 0x8220AB04;
	}
	return 0x8220AB04;
} // Block from 8220AAFCh-8220AB04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB04);
		  /* 8220AB04h */ case    0:  		/* li R3, 0 */
		/* 8220AB04h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AB04h case    0:*/		return 0x8220AB08;
	}
	return 0x8220AB08;
} // Block from 8220AB04h-8220AB08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB08);
		  /* 8220AB08h */ case    0:  		/* addi R1, R1, 176 */
		/* 8220AB08h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8220AB08h case    0:*/		return 0x8220AB0C;
		  /* 8220AB0Ch */ case    1:  		/* b -1546364 */
		/* 8220AB0Ch case    1:*/		return 0x82091290;
		/* 8220AB0Ch case    1:*/		return 0x8220AB10;
		  /* 8220AB10h */ case    2:  		/* li R3, 13 */
		/* 8220AB10h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xD);
		/* 8220AB10h case    2:*/		return 0x8220AB14;
		  /* 8220AB14h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8220AB14h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220AB14h case    3:*/		return 0x8220AB18;
	}
	return 0x8220AB18;
} // Block from 8220AB08h-8220AB18h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB18);
		  /* 8220AB18h */ case    0:  		/* li R3, 16 */
		/* 8220AB18h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8220AB18h case    0:*/		return 0x8220AB1C;
		  /* 8220AB1Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8220AB1Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220AB1Ch case    1:*/		return 0x8220AB20;
	}
	return 0x8220AB20;
} // Block from 8220AB18h-8220AB20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB20);
		  /* 8220AB20h */ case    0:  		/* li R9, 6 */
		/* 8220AB20h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 8220AB20h case    0:*/		return 0x8220AB24;
		  /* 8220AB24h */ case    1:  		/* li R11, 16 */
		/* 8220AB24h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8220AB24h case    1:*/		return 0x8220AB28;
		  /* 8220AB28h */ case    2:  		/* mr R10, R3 */
		/* 8220AB28h case    2:*/		regs.R10 = regs.R3;
		/* 8220AB28h case    2:*/		return 0x8220AB2C;
		  /* 8220AB2Ch */ case    3:  		/* mtspr CTR, R9 */
		/* 8220AB2Ch case    3:*/		regs.CTR = regs.R9;
		/* 8220AB2Ch case    3:*/		return 0x8220AB30;
		  /* 8220AB30h */ case    4:  		/* lwzu R9, <#[R10 + 4]> */
		/* 8220AB30h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8220AB30h case    4:*/		return 0x8220AB34;
		  /* 8220AB34h */ case    5:  		/* lwz R9, <#[R9 + 32]> */
		/* 8220AB34h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000020) );
		/* 8220AB34h case    5:*/		return 0x8220AB38;
		  /* 8220AB38h */ case    6:  		/* lwz R9, <#[R9]> */
		/* 8220AB38h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8220AB38h case    6:*/		return 0x8220AB3C;
		  /* 8220AB3Ch */ case    7:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 8220AB3Ch case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 8220AB3Ch case    7:*/		return 0x8220AB40;
		  /* 8220AB40h */ case    8:  		/* add R11, R9, R11 */
		/* 8220AB40h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220AB40h case    8:*/		return 0x8220AB44;
		  /* 8220AB44h */ case    9:  		/* bc 16, CR0_LT, -20 */
		/* 8220AB44h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220AB30;  }
		/* 8220AB44h case    9:*/		return 0x8220AB48;
		  /* 8220AB48h */ case   10:  		/* lwz R10, <#[R3 + 32]> */
		/* 8220AB48h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000020) );
		/* 8220AB48h case   10:*/		return 0x8220AB4C;
		  /* 8220AB4Ch */ case   11:  		/* lwz R9, <#[R3 + 28]> */
		/* 8220AB4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220AB4Ch case   11:*/		return 0x8220AB50;
		  /* 8220AB50h */ case   12:  		/* lwz R10, <#[R10 + 32]> */
		/* 8220AB50h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000020) );
		/* 8220AB50h case   12:*/		return 0x8220AB54;
		  /* 8220AB54h */ case   13:  		/* lwz R8, <#[R9 + 32]> */
		/* 8220AB54h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000020) );
		/* 8220AB54h case   13:*/		return 0x8220AB58;
		  /* 8220AB58h */ case   14:  		/* lwz R9, <#[R10]> */
		/* 8220AB58h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8220AB58h case   14:*/		return 0x8220AB5C;
		  /* 8220AB5Ch */ case   15:  		/* lwz R10, <#[R8]> */
		/* 8220AB5Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8220AB5Ch case   15:*/		return 0x8220AB60;
		  /* 8220AB60h */ case   16:  		/* add R11, R9, R11 */
		/* 8220AB60h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220AB60h case   16:*/		return 0x8220AB64;
		  /* 8220AB64h */ case   17:  		/* addi R11, R11, 3 */
		/* 8220AB64h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8220AB64h case   17:*/		return 0x8220AB68;
		  /* 8220AB68h */ case   18:  		/* add R11, R10, R11 */
		/* 8220AB68h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220AB68h case   18:*/		return 0x8220AB6C;
		  /* 8220AB6Ch */ case   19:  		/* addi R3, R11, 3 */
		/* 8220AB6Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x3);
		/* 8220AB6Ch case   19:*/		return 0x8220AB70;
	}
	return 0x8220AB70;
} // Block from 8220AB20h-8220AB70h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB70h
// Function '?SSMReg_Destroy@XGRAPHICS@@YAIPAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB70);
		  /* 8220AB70h */ case    0:  		/* bclr 20, CR0_LT */
		/* 8220AB70h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220AB70h case    0:*/		return 0x8220AB74;
	}
	return 0x8220AB74;
} // Block from 8220AB70h-8220AB74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB74);
		  /* 8220AB74h */ case    0:  		/* nop */
		/* 8220AB74h case    0:*/		cpu::op::nop();
		/* 8220AB74h case    0:*/		return 0x8220AB78;
	}
	return 0x8220AB78;
} // Block from 8220AB74h-8220AB78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220AB78h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AB78);
		  /* 8220AB78h */ case    0:  		/* mfspr R12, LR */
		/* 8220AB78h case    0:*/		regs.R12 = regs.LR;
		/* 8220AB78h case    0:*/		return 0x8220AB7C;
		  /* 8220AB7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220AB7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220AB7Ch case    1:*/		return 0x8220AB80;
		  /* 8220AB80h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220AB80h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220AB80h case    2:*/		return 0x8220AB84;
		  /* 8220AB84h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 8220AB84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220AB84h case    3:*/		return 0x8220AB88;
		  /* 8220AB88h */ case    4:  		/* mr R4, R3 */
		/* 8220AB88h case    4:*/		regs.R4 = regs.R3;
		/* 8220AB88h case    4:*/		return 0x8220AB8C;
		  /* 8220AB8Ch */ case    5:  		/* lwz R3, <#[R3]> */
		/* 8220AB8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220AB8Ch case    5:*/		return 0x8220AB90;
		  /* 8220AB90h */ case    6:  		/* mtspr CTR, R11 */
		/* 8220AB90h case    6:*/		regs.CTR = regs.R11;
		/* 8220AB90h case    6:*/		return 0x8220AB94;
		  /* 8220AB94h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8220AB94h case    7:*/		if ( 1 ) { regs.LR = 0x8220AB98; return (uint32)regs.CTR; }
		/* 8220AB94h case    7:*/		return 0x8220AB98;
		  /* 8220AB98h */ case    8:  		/* li R3, 0 */
		/* 8220AB98h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AB98h case    8:*/		return 0x8220AB9C;
		  /* 8220AB9Ch */ case    9:  		/* addi R1, R1, 96 */
		/* 8220AB9Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220AB9Ch case    9:*/		return 0x8220ABA0;
		  /* 8220ABA0h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220ABA0h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220ABA0h case   10:*/		return 0x8220ABA4;
		  /* 8220ABA4h */ case   11:  		/* mtspr LR, R12 */
		/* 8220ABA4h case   11:*/		regs.LR = regs.R12;
		/* 8220ABA4h case   11:*/		return 0x8220ABA8;
		  /* 8220ABA8h */ case   12:  		/* bclr 20, CR0_LT */
		/* 8220ABA8h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220ABA8h case   12:*/		return 0x8220ABAC;
	}
	return 0x8220ABAC;
} // Block from 8220AB78h-8220ABACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220ABACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ABAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ABAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ABAC);
		  /* 8220ABACh */ case    0:  		/* nop */
		/* 8220ABACh case    0:*/		cpu::op::nop();
		/* 8220ABACh case    0:*/		return 0x8220ABB0;
	}
	return 0x8220ABB0;
} // Block from 8220ABACh-8220ABB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220ABB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ABB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ABB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ABB0);
		  /* 8220ABB0h */ case    0:  		/* mfspr R12, LR */
		/* 8220ABB0h case    0:*/		regs.R12 = regs.LR;
		/* 8220ABB0h case    0:*/		return 0x8220ABB4;
		  /* 8220ABB4h */ case    1:  		/* bl -1546592 */
		/* 8220ABB4h case    1:*/		regs.LR = 0x8220ABB8; return 0x82091254;
		/* 8220ABB4h case    1:*/		return 0x8220ABB8;
		  /* 8220ABB8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220ABB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220ABB8h case    2:*/		return 0x8220ABBC;
		  /* 8220ABBCh */ case    3:  		/* lis R11, -32253 */
		/* 8220ABBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220ABBCh case    3:*/		return 0x8220ABC0;
		  /* 8220ABC0h */ case    4:  		/* lis R10, -32252 */
		/* 8220ABC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220ABC0h case    4:*/		return 0x8220ABC4;
		  /* 8220ABC4h */ case    5:  		/* mr R31, R4 */
		/* 8220ABC4h case    5:*/		regs.R31 = regs.R4;
		/* 8220ABC4h case    5:*/		return 0x8220ABC8;
		  /* 8220ABC8h */ case    6:  		/* mr R30, R5 */
		/* 8220ABC8h case    6:*/		regs.R30 = regs.R5;
		/* 8220ABC8h case    6:*/		return 0x8220ABCC;
		  /* 8220ABCCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220ABCCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220ABCCh case    7:*/		return 0x8220ABD0;
		  /* 8220ABD0h */ case    8:  		/* addi R28, R11, 27460 */
		/* 8220ABD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220ABD0h case    8:*/		return 0x8220ABD4;
		  /* 8220ABD4h */ case    9:  		/* addi R27, R10, -10856 */
		/* 8220ABD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFD598);
		/* 8220ABD4h case    9:*/		return 0x8220ABD8;
	}
	return 0x8220ABD8;
} // Block from 8220ABB0h-8220ABD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220ABD8h
// Function '?SSMReg_GetSetting@XGRAPHICS@@YAIPAU_SSM_REGISTRY@1@W4_E_SSM_SETTING@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ABD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ABD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ABD8);
		  /* 8220ABD8h */ case    0:  		/* bc 4, CR6_EQ, 32 */
		/* 8220ABD8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8220ABF8;  }
		/* 8220ABD8h case    0:*/		return 0x8220ABDC;
		  /* 8220ABDCh */ case    1:  		/* lis R11, -32252 */
		/* 8220ABDCh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220ABDCh case    1:*/		return 0x8220ABE0;
		  /* 8220ABE0h */ case    2:  		/* mr R6, R27 */
		/* 8220ABE0h case    2:*/		regs.R6 = regs.R27;
		/* 8220ABE0h case    2:*/		return 0x8220ABE4;
		  /* 8220ABE4h */ case    3:  		/* addi R5, R11, -10720 */
		/* 8220ABE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD620);
		/* 8220ABE4h case    3:*/		return 0x8220ABE8;
		  /* 8220ABE8h */ case    4:  		/* mr R4, R28 */
		/* 8220ABE8h case    4:*/		regs.R4 = regs.R28;
		/* 8220ABE8h case    4:*/		return 0x8220ABEC;
		  /* 8220ABECh */ case    5:  		/* li R7, 1337 */
		/* 8220ABECh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x539);
		/* 8220ABECh case    5:*/		return 0x8220ABF0;
		  /* 8220ABF0h */ case    6:  		/* li R3, 0 */
		/* 8220ABF0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ABF0h case    6:*/		return 0x8220ABF4;
		  /* 8220ABF4h */ case    7:  		/* bl -733164 */
		/* 8220ABF4h case    7:*/		regs.LR = 0x8220ABF8; return 0x82157C08;
		/* 8220ABF4h case    7:*/		return 0x8220ABF8;
	}
	return 0x8220ABF8;
} // Block from 8220ABD8h-8220ABF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220ABF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ABF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ABF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ABF8);
		  /* 8220ABF8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220ABF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220ABF8h case    0:*/		return 0x8220ABFC;
		  /* 8220ABFCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220ABFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220AC1C;  }
		/* 8220ABFCh case    1:*/		return 0x8220AC00;
		  /* 8220AC00h */ case    2:  		/* lis R11, -32252 */
		/* 8220AC00h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AC00h case    2:*/		return 0x8220AC04;
		  /* 8220AC04h */ case    3:  		/* mr R6, R27 */
		/* 8220AC04h case    3:*/		regs.R6 = regs.R27;
		/* 8220AC04h case    3:*/		return 0x8220AC08;
		  /* 8220AC08h */ case    4:  		/* addi R5, R11, -10732 */
		/* 8220AC08h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD614);
		/* 8220AC08h case    4:*/		return 0x8220AC0C;
		  /* 8220AC0Ch */ case    5:  		/* mr R4, R28 */
		/* 8220AC0Ch case    5:*/		regs.R4 = regs.R28;
		/* 8220AC0Ch case    5:*/		return 0x8220AC10;
		  /* 8220AC10h */ case    6:  		/* li R7, 1338 */
		/* 8220AC10h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x53A);
		/* 8220AC10h case    6:*/		return 0x8220AC14;
		  /* 8220AC14h */ case    7:  		/* li R3, 0 */
		/* 8220AC14h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AC14h case    7:*/		return 0x8220AC18;
		  /* 8220AC18h */ case    8:  		/* bl -733200 */
		/* 8220AC18h case    8:*/		regs.LR = 0x8220AC1C; return 0x82157C08;
		/* 8220AC18h case    8:*/		return 0x8220AC1C;
	}
	return 0x8220AC1C;
} // Block from 8220ABF8h-8220AC1Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AC1C);
		  /* 8220AC1Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220AC1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220AC1Ch case    0:*/		return 0x8220AC20;
		  /* 8220AC20h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220AC20h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220AC40;  }
		/* 8220AC20h case    1:*/		return 0x8220AC24;
		  /* 8220AC24h */ case    2:  		/* lis R11, -32252 */
		/* 8220AC24h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AC24h case    2:*/		return 0x8220AC28;
		  /* 8220AC28h */ case    3:  		/* mr R6, R27 */
		/* 8220AC28h case    3:*/		regs.R6 = regs.R27;
		/* 8220AC28h case    3:*/		return 0x8220AC2C;
		  /* 8220AC2Ch */ case    4:  		/* addi R5, R11, -10748 */
		/* 8220AC2Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD604);
		/* 8220AC2Ch case    4:*/		return 0x8220AC30;
		  /* 8220AC30h */ case    5:  		/* mr R4, R28 */
		/* 8220AC30h case    5:*/		regs.R4 = regs.R28;
		/* 8220AC30h case    5:*/		return 0x8220AC34;
		  /* 8220AC34h */ case    6:  		/* li R7, 1339 */
		/* 8220AC34h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x53B);
		/* 8220AC34h case    6:*/		return 0x8220AC38;
		  /* 8220AC38h */ case    7:  		/* li R3, 0 */
		/* 8220AC38h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AC38h case    7:*/		return 0x8220AC3C;
		  /* 8220AC3Ch */ case    8:  		/* bl -733236 */
		/* 8220AC3Ch case    8:*/		regs.LR = 0x8220AC40; return 0x82157C08;
		/* 8220AC3Ch case    8:*/		return 0x8220AC40;
	}
	return 0x8220AC40;
} // Block from 8220AC1Ch-8220AC40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AC40);
		  /* 8220AC40h */ case    0:  		/* addic. R30, R30, 236 */
		/* 8220AC40h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xEC);
		/* 8220AC40h case    0:*/		return 0x8220AC44;
		  /* 8220AC44h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 8220AC44h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8220AC64;  }
		/* 8220AC44h case    1:*/		return 0x8220AC48;
		  /* 8220AC48h */ case    2:  		/* lis R11, -32252 */
		/* 8220AC48h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AC48h case    2:*/		return 0x8220AC4C;
		  /* 8220AC4Ch */ case    3:  		/* mr R6, R27 */
		/* 8220AC4Ch case    3:*/		regs.R6 = regs.R27;
		/* 8220AC4Ch case    3:*/		return 0x8220AC50;
		  /* 8220AC50h */ case    4:  		/* addi R5, R11, -11796 */
		/* 8220AC50h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1EC);
		/* 8220AC50h case    4:*/		return 0x8220AC54;
		  /* 8220AC54h */ case    5:  		/* mr R4, R28 */
		/* 8220AC54h case    5:*/		regs.R4 = regs.R28;
		/* 8220AC54h case    5:*/		return 0x8220AC58;
	}
	return 0x8220AC58;
} // Block from 8220AC40h-8220AC58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220AC58h
// Function '?ImmedFlagFromRSBlockNum@XGRAPHICS@@YIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AC58);
		  /* 8220AC58h */ case    0:  		/* li R7, 1342 */
		/* 8220AC58h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x53E);
		/* 8220AC58h case    0:*/		return 0x8220AC5C;
		  /* 8220AC5Ch */ case    1:  		/* li R3, 0 */
		/* 8220AC5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AC5Ch case    1:*/		return 0x8220AC60;
		  /* 8220AC60h */ case    2:  		/* bl -733272 */
		/* 8220AC60h case    2:*/		regs.LR = 0x8220AC64; return 0x82157C08;
		/* 8220AC60h case    2:*/		return 0x8220AC64;
	}
	return 0x8220AC64;
} // Block from 8220AC58h-8220AC64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220AC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AC64);
		  /* 8220AC64h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220AC64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220AC64h case    0:*/		return 0x8220AC68;
		  /* 8220AC68h */ case    1:  		/* li R4, 13 */
		/* 8220AC68h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8220AC68h case    1:*/		return 0x8220AC6C;
		  /* 8220AC6Ch */ case    2:  		/* lwz R3, <#[R30 + 4]> */
		/* 8220AC6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8220AC6Ch case    2:*/		return 0x8220AC70;
		  /* 8220AC70h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220AC70h case    3:*/		regs.CTR = regs.R11;
		/* 8220AC70h case    3:*/		return 0x8220AC74;
		  /* 8220AC74h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220AC74h case    4:*/		if ( 1 ) { regs.LR = 0x8220AC78; return (uint32)regs.CTR; }
		/* 8220AC74h case    4:*/		return 0x8220AC78;
		  /* 8220AC78h */ case    5:  		/* lis R11, -16373 */
		/* 8220AC78h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC00B);
		/* 8220AC78h case    5:*/		return 0x8220AC7C;
		  /* 8220AC7Ch */ case    6:  		/* mr R8, R3 */
		/* 8220AC7Ch case    6:*/		regs.R8 = regs.R3;
		/* 8220AC7Ch case    6:*/		return 0x8220AC80;
		  /* 8220AC80h */ case    7:  		/* ori R11, R11, 9472 */
		/* 8220AC80h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2500);
		/* 8220AC80h case    7:*/		return 0x8220AC84;
		  /* 8220AC84h */ case    8:  		/* li R10, 16 */
		/* 8220AC84h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8220AC84h case    8:*/		return 0x8220AC88;
		  /* 8220AC88h */ case    9:  		/* stw R11, <#[R3]> */
		/* 8220AC88h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8220AC88h case    9:*/		return 0x8220AC8C;
		  /* 8220AC8Ch */ case   10:  		/* li R11, 5 */
		/* 8220AC8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8220AC8Ch case   10:*/		return 0x8220AC90;
		  /* 8220AC90h */ case   11:  		/* lwz R7, <#[R31 + 4]> */
		/* 8220AC90h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 8220AC90h case   11:*/		return 0x8220AC94;
		  /* 8220AC94h */ case   12:  		/* addi R9, R31, 4 */
		/* 8220AC94h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x4);
		/* 8220AC94h case   12:*/		return 0x8220AC98;
		  /* 8220AC98h */ case   13:  		/* mtspr CTR, R11 */
		/* 8220AC98h case   13:*/		regs.CTR = regs.R11;
		/* 8220AC98h case   13:*/		return 0x8220AC9C;
		  /* 8220AC9Ch */ case   14:  		/* lwz R11, <#[R7 + 32]> */
		/* 8220AC9Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000020) );
		/* 8220AC9Ch case   14:*/		return 0x8220ACA0;
		  /* 8220ACA0h */ case   15:  		/* lwz R7, <#[R7 + 16]> */
		/* 8220ACA0h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 8220ACA0h case   15:*/		return 0x8220ACA4;
		  /* 8220ACA4h */ case   16:  		/* lwz R11, <#[R11 + 4]> */
		/* 8220ACA4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8220ACA4h case   16:*/		return 0x8220ACA8;
		  /* 8220ACA8h */ case   17:  		/* or R11, R11, R7 */
		/* 8220ACA8h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8220ACA8h case   17:*/		return 0x8220ACAC;
		  /* 8220ACACh */ case   18:  		/* stwu R11, <#[R3 + 4]> */
		/* 8220ACACh case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8220ACACh case   18:*/		return 0x8220ACB0;
		  /* 8220ACB0h */ case   19:  		/* stwu R10, <#[R3 + 4]> */
		/* 8220ACB0h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8220ACB0h case   19:*/		return 0x8220ACB4;
		  /* 8220ACB4h */ case   20:  		/* stwu R10, <#[R3 + 4]> */
		/* 8220ACB4h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8220ACB4h case   20:*/		return 0x8220ACB8;
		  /* 8220ACB8h */ case   21:  		/* addi R11, R3, 4 */
		/* 8220ACB8h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 8220ACB8h case   21:*/		return 0x8220ACBC;
		  /* 8220ACBCh */ case   22:  		/* lwzu R10, <#[R9 + 4]> */
		/* 8220ACBCh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8220ACBCh case   22:*/		return 0x8220ACC0;
		  /* 8220ACC0h */ case   23:  		/* lwz R7, <#[R10 + 32]> */
		/* 8220ACC0h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000020) );
		/* 8220ACC0h case   23:*/		return 0x8220ACC4;
		  /* 8220ACC4h */ case   24:  		/* lwz R10, <#[R10 + 16]> */
		/* 8220ACC4h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8220ACC4h case   24:*/		return 0x8220ACC8;
		  /* 8220ACC8h */ case   25:  		/* lwz R7, <#[R7 + 4]> */
		/* 8220ACC8h case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 8220ACC8h case   25:*/		return 0x8220ACCC;
		  /* 8220ACCCh */ case   26:  		/* or R10, R7, R10 */
		/* 8220ACCCh case   26:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 8220ACCCh case   26:*/		return 0x8220ACD0;
	}
	return 0x8220ACD0;
} // Block from 8220AC64h-8220ACD0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8220ACD0h
// Function '?AS_InitValues@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ACD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ACD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ACD0);
		  /* 8220ACD0h */ case    0:  		/* stw R10, <#[R11]> */
		/* 8220ACD0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220ACD0h case    0:*/		return 0x8220ACD4;
		  /* 8220ACD4h */ case    1:  		/* addi R11, R11, 4 */
		/* 8220ACD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8220ACD4h case    1:*/		return 0x8220ACD8;
		  /* 8220ACD8h */ case    2:  		/* bc 16, CR0_LT, -28 */
		/* 8220ACD8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220ACBC;  }
		/* 8220ACD8h case    2:*/		return 0x8220ACDC;
		  /* 8220ACDCh */ case    3:  		/* lwz R10, <#[R31 + 32]> */
		/* 8220ACDCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8220ACDCh case    3:*/		return 0x8220ACE0;
		  /* 8220ACE0h */ case    4:  		/* lwz R9, <#[R10 + 16]> */
		/* 8220ACE0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 8220ACE0h case    4:*/		return 0x8220ACE4;
		  /* 8220ACE4h */ case    5:  		/* lwz R10, <#[R10 + 32]> */
		/* 8220ACE4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000020) );
		/* 8220ACE4h case    5:*/		return 0x8220ACE8;
		  /* 8220ACE8h */ case    6:  		/* stw R9, <#[R11]> */
		/* 8220ACE8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8220ACE8h case    6:*/		return 0x8220ACEC;
		  /* 8220ACECh */ case    7:  		/* lwz R10, <#[R10 + 4]> */
		/* 8220ACECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8220ACECh case    7:*/		return 0x8220ACF0;
		  /* 8220ACF0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 8220ACF0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220ACF0h case    8:*/		return 0x8220ACF4;
		  /* 8220ACF4h */ case    9:  		/* lwz R10, <#[R31 + 28]> */
		/* 8220ACF4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220ACF4h case    9:*/		return 0x8220ACF8;
		  /* 8220ACF8h */ case   10:  		/* lwz R9, <#[R10 + 32]> */
		/* 8220ACF8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000020) );
		/* 8220ACF8h case   10:*/		return 0x8220ACFC;
		  /* 8220ACFCh */ case   11:  		/* lwz R10, <#[R10 + 16]> */
		/* 8220ACFCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8220ACFCh case   11:*/		return 0x8220AD00;
		  /* 8220AD00h */ case   12:  		/* stwu R10, <#[R11 + 4]> */
		/* 8220AD00h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220AD00h case   12:*/		return 0x8220AD04;
		  /* 8220AD04h */ case   13:  		/* lwz R10, <#[R9 + 4]> */
		/* 8220AD04h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8220AD04h case   13:*/		return 0x8220AD08;
		  /* 8220AD08h */ case   14:  		/* stwu R10, <#[R11 + 4]> */
		/* 8220AD08h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220AD08h case   14:*/		return 0x8220AD0C;
		  /* 8220AD0Ch */ case   15:  		/* subf R11, R8, R11 */
		/* 8220AD0Ch case   15:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8220AD0Ch case   15:*/		return 0x8220AD10;
		  /* 8220AD10h */ case   16:  		/* addi R11, R11, 4 */
		/* 8220AD10h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8220AD10h case   16:*/		return 0x8220AD14;
		  /* 8220AD14h */ case   17:  		/* srawi R29, R11, 2 */
		/* 8220AD14h case   17:*/		cpu::op::srawi<0,2>(regs,&regs.R29,regs.R11);
		/* 8220AD14h case   17:*/		return 0x8220AD18;
		  /* 8220AD18h */ case   18:  		/* cmplwi CR6, R29, 13 */
		/* 8220AD18h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000D);
		/* 8220AD18h case   18:*/		return 0x8220AD1C;
		  /* 8220AD1Ch */ case   19:  		/* bc 4, CR6_GT, 32 */
		/* 8220AD1Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x8220AD3C;  }
		/* 8220AD1Ch case   19:*/		return 0x8220AD20;
		  /* 8220AD20h */ case   20:  		/* lis R11, -32252 */
		/* 8220AD20h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AD20h case   20:*/		return 0x8220AD24;
		  /* 8220AD24h */ case   21:  		/* mr R6, R27 */
		/* 8220AD24h case   21:*/		regs.R6 = regs.R27;
		/* 8220AD24h case   21:*/		return 0x8220AD28;
		  /* 8220AD28h */ case   22:  		/* addi R5, R11, -10704 */
		/* 8220AD28h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD630);
		/* 8220AD28h case   22:*/		return 0x8220AD2C;
		  /* 8220AD2Ch */ case   23:  		/* mr R4, R28 */
		/* 8220AD2Ch case   23:*/		regs.R4 = regs.R28;
		/* 8220AD2Ch case   23:*/		return 0x8220AD30;
		  /* 8220AD30h */ case   24:  		/* li R7, 1394 */
		/* 8220AD30h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x572);
		/* 8220AD30h case   24:*/		return 0x8220AD34;
		  /* 8220AD34h */ case   25:  		/* li R3, 0 */
		/* 8220AD34h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AD34h case   25:*/		return 0x8220AD38;
		  /* 8220AD38h */ case   26:  		/* bl -733488 */
		/* 8220AD38h case   26:*/		regs.LR = 0x8220AD3C; return 0x82157C08;
		/* 8220AD38h case   26:*/		return 0x8220AD3C;
	}
	return 0x8220AD3C;
} // Block from 8220ACD0h-8220AD3Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8220AD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AD3C);
		  /* 8220AD3Ch */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8220AD3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8220AD3Ch case    0:*/		return 0x8220AD40;
		  /* 8220AD40h */ case    1:  		/* addi R5, R1, 80 */
		/* 8220AD40h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8220AD40h case    1:*/		return 0x8220AD44;
		  /* 8220AD44h */ case    2:  		/* mr R4, R29 */
		/* 8220AD44h case    2:*/		regs.R4 = regs.R29;
		/* 8220AD44h case    2:*/		return 0x8220AD48;
		  /* 8220AD48h */ case    3:  		/* lwz R3, <#[R30 + 4]> */
		/* 8220AD48h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8220AD48h case    3:*/		return 0x8220AD4C;
		  /* 8220AD4Ch */ case    4:  		/* mtspr CTR, R11 */
		/* 8220AD4Ch case    4:*/		regs.CTR = regs.R11;
		/* 8220AD4Ch case    4:*/		return 0x8220AD50;
		  /* 8220AD50h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8220AD50h case    5:*/		if ( 1 ) { regs.LR = 0x8220AD54; return (uint32)regs.CTR; }
		/* 8220AD50h case    5:*/		return 0x8220AD54;
		  /* 8220AD54h */ case    6:  		/* addi R4, R1, 80 */
		/* 8220AD54h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8220AD54h case    6:*/		return 0x8220AD58;
		  /* 8220AD58h */ case    7:  		/* mr R3, R31 */
		/* 8220AD58h case    7:*/		regs.R3 = regs.R31;
		/* 8220AD58h case    7:*/		return 0x8220AD5C;
		  /* 8220AD5Ch */ case    8:  		/* bl 13172 */
		/* 8220AD5Ch case    8:*/		regs.LR = 0x8220AD60; return 0x8220E0D0;
		/* 8220AD5Ch case    8:*/		return 0x8220AD60;
		  /* 8220AD60h */ case    9:  		/* li R3, 0 */
		/* 8220AD60h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AD60h case    9:*/		return 0x8220AD64;
		  /* 8220AD64h */ case   10:  		/* addi R1, R1, 144 */
		/* 8220AD64h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220AD64h case   10:*/		return 0x8220AD68;
		  /* 8220AD68h */ case   11:  		/* b -1546948 */
		/* 8220AD68h case   11:*/		return 0x820912A4;
		/* 8220AD68h case   11:*/		return 0x8220AD6C;
		  /* 8220AD6Ch */ case   12:  		/* nop */
		/* 8220AD6Ch case   12:*/		cpu::op::nop();
		/* 8220AD6Ch case   12:*/		return 0x8220AD70;
	}
	return 0x8220AD70;
} // Block from 8220AD3Ch-8220AD70h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220AD70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AD70);
		  /* 8220AD70h */ case    0:  		/* mfspr R12, LR */
		/* 8220AD70h case    0:*/		regs.R12 = regs.LR;
		/* 8220AD70h case    0:*/		return 0x8220AD74;
		  /* 8220AD74h */ case    1:  		/* bl -1547040 */
		/* 8220AD74h case    1:*/		regs.LR = 0x8220AD78; return 0x82091254;
		/* 8220AD74h case    1:*/		return 0x8220AD78;
		  /* 8220AD78h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220AD78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220AD78h case    2:*/		return 0x8220AD7C;
		  /* 8220AD7Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220AD7Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220AD7Ch case    3:*/		return 0x8220AD80;
		  /* 8220AD80h */ case    4:  		/* lis R10, -32252 */
		/* 8220AD80h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220AD80h case    4:*/		return 0x8220AD84;
		  /* 8220AD84h */ case    5:  		/* mr R31, R4 */
		/* 8220AD84h case    5:*/		regs.R31 = regs.R4;
		/* 8220AD84h case    5:*/		return 0x8220AD88;
		  /* 8220AD88h */ case    6:  		/* mr R30, R5 */
		/* 8220AD88h case    6:*/		regs.R30 = regs.R5;
		/* 8220AD88h case    6:*/		return 0x8220AD8C;
		  /* 8220AD8Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220AD8Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220AD8Ch case    7:*/		return 0x8220AD90;
		  /* 8220AD90h */ case    8:  		/* addi R28, R11, 27460 */
		/* 8220AD90h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220AD90h case    8:*/		return 0x8220AD94;
		  /* 8220AD94h */ case    9:  		/* addi R27, R10, -10856 */
		/* 8220AD94h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFD598);
		/* 8220AD94h case    9:*/		return 0x8220AD98;
		  /* 8220AD98h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220AD98h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220ADB8;  }
		/* 8220AD98h case   10:*/		return 0x8220AD9C;
		  /* 8220AD9Ch */ case   11:  		/* lis R11, -32252 */
		/* 8220AD9Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AD9Ch case   11:*/		return 0x8220ADA0;
		  /* 8220ADA0h */ case   12:  		/* mr R6, R27 */
		/* 8220ADA0h case   12:*/		regs.R6 = regs.R27;
		/* 8220ADA0h case   12:*/		return 0x8220ADA4;
		  /* 8220ADA4h */ case   13:  		/* addi R5, R11, -10720 */
		/* 8220ADA4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD620);
		/* 8220ADA4h case   13:*/		return 0x8220ADA8;
		  /* 8220ADA8h */ case   14:  		/* mr R4, R28 */
		/* 8220ADA8h case   14:*/		regs.R4 = regs.R28;
		/* 8220ADA8h case   14:*/		return 0x8220ADAC;
		  /* 8220ADACh */ case   15:  		/* li R7, 1450 */
		/* 8220ADACh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x5AA);
		/* 8220ADACh case   15:*/		return 0x8220ADB0;
		  /* 8220ADB0h */ case   16:  		/* li R3, 0 */
		/* 8220ADB0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ADB0h case   16:*/		return 0x8220ADB4;
		  /* 8220ADB4h */ case   17:  		/* bl -733612 */
		/* 8220ADB4h case   17:*/		regs.LR = 0x8220ADB8; return 0x82157C08;
		/* 8220ADB4h case   17:*/		return 0x8220ADB8;
	}
	return 0x8220ADB8;
} // Block from 8220AD70h-8220ADB8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220ADB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ADB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ADB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ADB8);
		  /* 8220ADB8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220ADB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220ADB8h case    0:*/		return 0x8220ADBC;
		  /* 8220ADBCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220ADBCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220ADDC;  }
		/* 8220ADBCh case    1:*/		return 0x8220ADC0;
		  /* 8220ADC0h */ case    2:  		/* lis R11, -32252 */
		/* 8220ADC0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220ADC0h case    2:*/		return 0x8220ADC4;
		  /* 8220ADC4h */ case    3:  		/* mr R6, R27 */
		/* 8220ADC4h case    3:*/		regs.R6 = regs.R27;
		/* 8220ADC4h case    3:*/		return 0x8220ADC8;
		  /* 8220ADC8h */ case    4:  		/* addi R5, R11, -10732 */
		/* 8220ADC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD614);
		/* 8220ADC8h case    4:*/		return 0x8220ADCC;
		  /* 8220ADCCh */ case    5:  		/* mr R4, R28 */
		/* 8220ADCCh case    5:*/		regs.R4 = regs.R28;
		/* 8220ADCCh case    5:*/		return 0x8220ADD0;
		  /* 8220ADD0h */ case    6:  		/* li R7, 1451 */
		/* 8220ADD0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5AB);
		/* 8220ADD0h case    6:*/		return 0x8220ADD4;
		  /* 8220ADD4h */ case    7:  		/* li R3, 0 */
		/* 8220ADD4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ADD4h case    7:*/		return 0x8220ADD8;
		  /* 8220ADD8h */ case    8:  		/* bl -733648 */
		/* 8220ADD8h case    8:*/		regs.LR = 0x8220ADDC; return 0x82157C08;
		/* 8220ADD8h case    8:*/		return 0x8220ADDC;
	}
	return 0x8220ADDC;
} // Block from 8220ADB8h-8220ADDCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220ADDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ADDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ADDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ADDC);
		  /* 8220ADDCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220ADDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220ADDCh case    0:*/		return 0x8220ADE0;
		  /* 8220ADE0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220ADE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220AE00;  }
		/* 8220ADE0h case    1:*/		return 0x8220ADE4;
		  /* 8220ADE4h */ case    2:  		/* lis R11, -32252 */
		/* 8220ADE4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220ADE4h case    2:*/		return 0x8220ADE8;
		  /* 8220ADE8h */ case    3:  		/* mr R6, R27 */
		/* 8220ADE8h case    3:*/		regs.R6 = regs.R27;
		/* 8220ADE8h case    3:*/		return 0x8220ADEC;
		  /* 8220ADECh */ case    4:  		/* addi R5, R11, -10748 */
		/* 8220ADECh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD604);
		/* 8220ADECh case    4:*/		return 0x8220ADF0;
		  /* 8220ADF0h */ case    5:  		/* mr R4, R28 */
		/* 8220ADF0h case    5:*/		regs.R4 = regs.R28;
		/* 8220ADF0h case    5:*/		return 0x8220ADF4;
		  /* 8220ADF4h */ case    6:  		/* li R7, 1452 */
		/* 8220ADF4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5AC);
		/* 8220ADF4h case    6:*/		return 0x8220ADF8;
		  /* 8220ADF8h */ case    7:  		/* li R3, 0 */
		/* 8220ADF8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ADF8h case    7:*/		return 0x8220ADFC;
		  /* 8220ADFCh */ case    8:  		/* bl -733684 */
		/* 8220ADFCh case    8:*/		regs.LR = 0x8220AE00; return 0x82157C08;
		/* 8220ADFCh case    8:*/		return 0x8220AE00;
	}
	return 0x8220AE00;
} // Block from 8220ADDCh-8220AE00h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AE00);
		  /* 8220AE00h */ case    0:  		/* addic. R29, R30, 236 */
		/* 8220AE00h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R30,0xEC);
		/* 8220AE00h case    0:*/		return 0x8220AE04;
		  /* 8220AE04h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 8220AE04h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8220AE24;  }
		/* 8220AE04h case    1:*/		return 0x8220AE08;
		  /* 8220AE08h */ case    2:  		/* lis R11, -32252 */
		/* 8220AE08h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AE08h case    2:*/		return 0x8220AE0C;
		  /* 8220AE0Ch */ case    3:  		/* mr R6, R27 */
		/* 8220AE0Ch case    3:*/		regs.R6 = regs.R27;
		/* 8220AE0Ch case    3:*/		return 0x8220AE10;
		  /* 8220AE10h */ case    4:  		/* addi R5, R11, -11796 */
		/* 8220AE10h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1EC);
		/* 8220AE10h case    4:*/		return 0x8220AE14;
		  /* 8220AE14h */ case    5:  		/* mr R4, R28 */
		/* 8220AE14h case    5:*/		regs.R4 = regs.R28;
		/* 8220AE14h case    5:*/		return 0x8220AE18;
		  /* 8220AE18h */ case    6:  		/* li R7, 1455 */
		/* 8220AE18h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5AF);
		/* 8220AE18h case    6:*/		return 0x8220AE1C;
		  /* 8220AE1Ch */ case    7:  		/* li R3, 0 */
		/* 8220AE1Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AE1Ch case    7:*/		return 0x8220AE20;
		  /* 8220AE20h */ case    8:  		/* bl -733720 */
		/* 8220AE20h case    8:*/		regs.LR = 0x8220AE24; return 0x82157C08;
		/* 8220AE20h case    8:*/		return 0x8220AE24;
	}
	return 0x8220AE24;
} // Block from 8220AE00h-8220AE24h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AE24);
		  /* 8220AE24h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8220AE24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8220AE24h case    0:*/		return 0x8220AE28;
		  /* 8220AE28h */ case    1:  		/* li R4, 16 */
		/* 8220AE28h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8220AE28h case    1:*/		return 0x8220AE2C;
		  /* 8220AE2Ch */ case    2:  		/* lwz R3, <#[R29 + 4]> */
		/* 8220AE2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 8220AE2Ch case    2:*/		return 0x8220AE30;
		  /* 8220AE30h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220AE30h case    3:*/		regs.CTR = regs.R11;
		/* 8220AE30h case    3:*/		return 0x8220AE34;
		  /* 8220AE34h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220AE34h case    4:*/		if ( 1 ) { regs.LR = 0x8220AE38; return (uint32)regs.CTR; }
		/* 8220AE34h case    4:*/		return 0x8220AE38;
		  /* 8220AE38h */ case    5:  		/* lis R11, -16373 */
		/* 8220AE38h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC00B);
		/* 8220AE38h case    5:*/		return 0x8220AE3C;
		  /* 8220AE3Ch */ case    6:  		/* mr R8, R3 */
		/* 8220AE3Ch case    6:*/		regs.R8 = regs.R3;
		/* 8220AE3Ch case    6:*/		return 0x8220AE40;
		  /* 8220AE40h */ case    7:  		/* ori R11, R11, 9472 */
		/* 8220AE40h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2500);
		/* 8220AE40h case    7:*/		return 0x8220AE44;
		  /* 8220AE44h */ case    8:  		/* li R10, 16 */
		/* 8220AE44h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8220AE44h case    8:*/		return 0x8220AE48;
		  /* 8220AE48h */ case    9:  		/* stw R11, <#[R3]> */
		/* 8220AE48h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8220AE48h case    9:*/		return 0x8220AE4C;
		  /* 8220AE4Ch */ case   10:  		/* li R11, 5 */
		/* 8220AE4Ch case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8220AE4Ch case   10:*/		return 0x8220AE50;
		  /* 8220AE50h */ case   11:  		/* lwz R7, <#[R31 + 4]> */
		/* 8220AE50h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 8220AE50h case   11:*/		return 0x8220AE54;
		  /* 8220AE54h */ case   12:  		/* addi R9, R31, 4 */
		/* 8220AE54h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x4);
		/* 8220AE54h case   12:*/		return 0x8220AE58;
		  /* 8220AE58h */ case   13:  		/* mtspr CTR, R11 */
		/* 8220AE58h case   13:*/		regs.CTR = regs.R11;
		/* 8220AE58h case   13:*/		return 0x8220AE5C;
		  /* 8220AE5Ch */ case   14:  		/* lwz R11, <#[R7 + 32]> */
		/* 8220AE5Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000020) );
		/* 8220AE5Ch case   14:*/		return 0x8220AE60;
		  /* 8220AE60h */ case   15:  		/* lwz R7, <#[R7 + 16]> */
		/* 8220AE60h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 8220AE60h case   15:*/		return 0x8220AE64;
		  /* 8220AE64h */ case   16:  		/* lwz R11, <#[R11 + 4]> */
		/* 8220AE64h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8220AE64h case   16:*/		return 0x8220AE68;
		  /* 8220AE68h */ case   17:  		/* or R11, R11, R7 */
		/* 8220AE68h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8220AE68h case   17:*/		return 0x8220AE6C;
		  /* 8220AE6Ch */ case   18:  		/* stwu R11, <#[R3 + 4]> */
		/* 8220AE6Ch case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8220AE6Ch case   18:*/		return 0x8220AE70;
		  /* 8220AE70h */ case   19:  		/* stwu R10, <#[R3 + 4]> */
		/* 8220AE70h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8220AE70h case   19:*/		return 0x8220AE74;
		  /* 8220AE74h */ case   20:  		/* stwu R10, <#[R3 + 4]> */
		/* 8220AE74h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8220AE74h case   20:*/		return 0x8220AE78;
		  /* 8220AE78h */ case   21:  		/* addi R11, R3, 4 */
		/* 8220AE78h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 8220AE78h case   21:*/		return 0x8220AE7C;
		  /* 8220AE7Ch */ case   22:  		/* lwzu R7, <#[R9 + 4]> */
		/* 8220AE7Ch case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8220AE7Ch case   22:*/		return 0x8220AE80;
		  /* 8220AE80h */ case   23:  		/* lwz R6, <#[R7 + 32]> */
		/* 8220AE80h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x00000020) );
		/* 8220AE80h case   23:*/		return 0x8220AE84;
		  /* 8220AE84h */ case   24:  		/* lwz R7, <#[R7 + 16]> */
		/* 8220AE84h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 8220AE84h case   24:*/		return 0x8220AE88;
		  /* 8220AE88h */ case   25:  		/* lwz R6, <#[R6 + 4]> */
		/* 8220AE88h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 8220AE88h case   25:*/		return 0x8220AE8C;
		  /* 8220AE8Ch */ case   26:  		/* or R7, R6, R7 */
		/* 8220AE8Ch case   26:*/		cpu::op::or<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 8220AE8Ch case   26:*/		return 0x8220AE90;
		  /* 8220AE90h */ case   27:  		/* stw R7, <#[R11]> */
		/* 8220AE90h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8220AE90h case   27:*/		return 0x8220AE94;
		  /* 8220AE94h */ case   28:  		/* addi R11, R11, 4 */
		/* 8220AE94h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8220AE94h case   28:*/		return 0x8220AE98;
		  /* 8220AE98h */ case   29:  		/* bc 16, CR0_LT, -28 */
		/* 8220AE98h case   29:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220AE7C;  }
		/* 8220AE98h case   29:*/		return 0x8220AE9C;
		  /* 8220AE9Ch */ case   30:  		/* stw R10, <#[R11]> */
		/* 8220AE9Ch case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220AE9Ch case   30:*/		return 0x8220AEA0;
		  /* 8220AEA0h */ case   31:  		/* lis R9, -16383 */
		/* 8220AEA0h case   31:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC001);
		/* 8220AEA0h case   31:*/		return 0x8220AEA4;
		  /* 8220AEA4h */ case   32:  		/* stwu R10, <#[R11 + 4]> */
		/* 8220AEA4h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220AEA4h case   32:*/		return 0x8220AEA8;
		  /* 8220AEA8h */ case   33:  		/* lwz R10, <#[R31 + 28]> */
		/* 8220AEA8h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220AEA8h case   33:*/		return 0x8220AEAC;
		  /* 8220AEACh */ case   34:  		/* ori R9, R9, 9984 */
		/* 8220AEACh case   34:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2700);
		/* 8220AEACh case   34:*/		return 0x8220AEB0;
		  /* 8220AEB0h */ case   35:  		/* lwz R7, <#[R10 + 32]> */
		/* 8220AEB0h case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000020) );
		/* 8220AEB0h case   35:*/		return 0x8220AEB4;
		  /* 8220AEB4h */ case   36:  		/* stwu R9, <#[R11 + 4]> */
		/* 8220AEB4h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220AEB4h case   36:*/		return 0x8220AEB8;
		  /* 8220AEB8h */ case   37:  		/* lwz R10, <#[R10 + 16]> */
		/* 8220AEB8h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8220AEB8h case   37:*/		return 0x8220AEBC;
		  /* 8220AEBCh */ case   38:  		/* ori R10, R10, 2 */
		/* 8220AEBCh case   38:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8220AEBCh case   38:*/		return 0x8220AEC0;
		  /* 8220AEC0h */ case   39:  		/* stwu R10, <#[R11 + 4]> */
		/* 8220AEC0h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220AEC0h case   39:*/		return 0x8220AEC4;
		  /* 8220AEC4h */ case   40:  		/* lwz R10, <#[R7 + 4]> */
		/* 8220AEC4h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 8220AEC4h case   40:*/		return 0x8220AEC8;
		  /* 8220AEC8h */ case   41:  		/* stwu R10, <#[R11 + 4]> */
		/* 8220AEC8h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220AEC8h case   41:*/		return 0x8220AECC;
		  /* 8220AECCh */ case   42:  		/* subf R11, R8, R11 */
		/* 8220AECCh case   42:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8220AECCh case   42:*/		return 0x8220AED0;
		  /* 8220AED0h */ case   43:  		/* addi R11, R11, 4 */
		/* 8220AED0h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8220AED0h case   43:*/		return 0x8220AED4;
		  /* 8220AED4h */ case   44:  		/* srawi R30, R11, 2 */
		/* 8220AED4h case   44:*/		cpu::op::srawi<0,2>(regs,&regs.R30,regs.R11);
		/* 8220AED4h case   44:*/		return 0x8220AED8;
		  /* 8220AED8h */ case   45:  		/* cmplwi CR6, R30, 16 */
		/* 8220AED8h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000010);
		/* 8220AED8h case   45:*/		return 0x8220AEDC;
		  /* 8220AEDCh */ case   46:  		/* bc 4, CR6_GT, 32 */
		/* 8220AEDCh case   46:*/		if ( !regs.CR[6].gt ) { return 0x8220AEFC;  }
		/* 8220AEDCh case   46:*/		return 0x8220AEE0;
		  /* 8220AEE0h */ case   47:  		/* lis R11, -32252 */
		/* 8220AEE0h case   47:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AEE0h case   47:*/		return 0x8220AEE4;
		  /* 8220AEE4h */ case   48:  		/* mr R6, R27 */
		/* 8220AEE4h case   48:*/		regs.R6 = regs.R27;
		/* 8220AEE4h case   48:*/		return 0x8220AEE8;
	}
	return 0x8220AEE8;
} // Block from 8220AE24h-8220AEE8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 8220AEE8h
// Function '?AS_AllocMemory@XGRAPHICS@@YAPAXPAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AEE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AEE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AEE8);
		  /* 8220AEE8h */ case    0:  		/* addi R5, R11, -10704 */
		/* 8220AEE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD630);
		/* 8220AEE8h case    0:*/		return 0x8220AEEC;
		  /* 8220AEECh */ case    1:  		/* mr R4, R28 */
		/* 8220AEECh case    1:*/		regs.R4 = regs.R28;
		/* 8220AEECh case    1:*/		return 0x8220AEF0;
		  /* 8220AEF0h */ case    2:  		/* li R7, 1504 */
		/* 8220AEF0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x5E0);
		/* 8220AEF0h case    2:*/		return 0x8220AEF4;
		  /* 8220AEF4h */ case    3:  		/* li R3, 0 */
		/* 8220AEF4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AEF4h case    3:*/		return 0x8220AEF8;
		  /* 8220AEF8h */ case    4:  		/* bl -733936 */
		/* 8220AEF8h case    4:*/		regs.LR = 0x8220AEFC; return 0x82157C08;
		/* 8220AEF8h case    4:*/		return 0x8220AEFC;
	}
	return 0x8220AEFC;
} // Block from 8220AEE8h-8220AEFCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220AEFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AEFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AEFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AEFC);
		  /* 8220AEFCh */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 8220AEFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8220AEFCh case    0:*/		return 0x8220AF00;
		  /* 8220AF00h */ case    1:  		/* addi R5, R1, 80 */
		/* 8220AF00h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8220AF00h case    1:*/		return 0x8220AF04;
		  /* 8220AF04h */ case    2:  		/* mr R4, R30 */
		/* 8220AF04h case    2:*/		regs.R4 = regs.R30;
		/* 8220AF04h case    2:*/		return 0x8220AF08;
		  /* 8220AF08h */ case    3:  		/* lwz R3, <#[R29 + 4]> */
		/* 8220AF08h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 8220AF08h case    3:*/		return 0x8220AF0C;
		  /* 8220AF0Ch */ case    4:  		/* mtspr CTR, R11 */
		/* 8220AF0Ch case    4:*/		regs.CTR = regs.R11;
		/* 8220AF0Ch case    4:*/		return 0x8220AF10;
		  /* 8220AF10h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8220AF10h case    5:*/		if ( 1 ) { regs.LR = 0x8220AF14; return (uint32)regs.CTR; }
		/* 8220AF10h case    5:*/		return 0x8220AF14;
		  /* 8220AF14h */ case    6:  		/* addi R4, R1, 80 */
		/* 8220AF14h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8220AF14h case    6:*/		return 0x8220AF18;
		  /* 8220AF18h */ case    7:  		/* mr R3, R31 */
		/* 8220AF18h case    7:*/		regs.R3 = regs.R31;
		/* 8220AF18h case    7:*/		return 0x8220AF1C;
		  /* 8220AF1Ch */ case    8:  		/* bl 12724 */
		/* 8220AF1Ch case    8:*/		regs.LR = 0x8220AF20; return 0x8220E0D0;
		/* 8220AF1Ch case    8:*/		return 0x8220AF20;
		  /* 8220AF20h */ case    9:  		/* li R3, 0 */
		/* 8220AF20h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AF20h case    9:*/		return 0x8220AF24;
		  /* 8220AF24h */ case   10:  		/* addi R1, R1, 144 */
		/* 8220AF24h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220AF24h case   10:*/		return 0x8220AF28;
		  /* 8220AF28h */ case   11:  		/* b -1547396 */
		/* 8220AF28h case   11:*/		return 0x820912A4;
		/* 8220AF28h case   11:*/		return 0x8220AF2C;
		  /* 8220AF2Ch */ case   12:  		/* nop */
		/* 8220AF2Ch case   12:*/		cpu::op::nop();
		/* 8220AF2Ch case   12:*/		return 0x8220AF30;
	}
	return 0x8220AF30;
} // Block from 8220AEFCh-8220AF30h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220AF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AF30);
		  /* 8220AF30h */ case    0:  		/* mfspr R12, LR */
		/* 8220AF30h case    0:*/		regs.R12 = regs.LR;
		/* 8220AF30h case    0:*/		return 0x8220AF34;
		  /* 8220AF34h */ case    1:  		/* bl -1547540 */
		/* 8220AF34h case    1:*/		regs.LR = 0x8220AF38; return 0x82091220;
		/* 8220AF34h case    1:*/		return 0x8220AF38;
		  /* 8220AF38h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8220AF38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8220AF38h case    2:*/		return 0x8220AF3C;
		  /* 8220AF3Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220AF3Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220AF3Ch case    3:*/		return 0x8220AF40;
		  /* 8220AF40h */ case    4:  		/* lis R10, -32252 */
		/* 8220AF40h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220AF40h case    4:*/		return 0x8220AF44;
		  /* 8220AF44h */ case    5:  		/* mr R18, R3 */
		/* 8220AF44h case    5:*/		regs.R18 = regs.R3;
		/* 8220AF44h case    5:*/		return 0x8220AF48;
	}
	return 0x8220AF48;
} // Block from 8220AF30h-8220AF48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220AF48h
// Function '?AS_Delete@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AF48);
		  /* 8220AF48h */ case    0:  		/* mr R21, R4 */
		/* 8220AF48h case    0:*/		regs.R21 = regs.R4;
		/* 8220AF48h case    0:*/		return 0x8220AF4C;
		  /* 8220AF4Ch */ case    1:  		/* mr R31, R5 */
		/* 8220AF4Ch case    1:*/		regs.R31 = regs.R5;
		/* 8220AF4Ch case    1:*/		return 0x8220AF50;
		  /* 8220AF50h */ case    2:  		/* mr R30, R6 */
		/* 8220AF50h case    2:*/		regs.R30 = regs.R6;
		/* 8220AF50h case    2:*/		return 0x8220AF54;
		  /* 8220AF54h */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 8220AF54h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220AF54h case    3:*/		return 0x8220AF58;
		  /* 8220AF58h */ case    4:  		/* addi R15, R11, 27460 */
		/* 8220AF58h case    4:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R11,0x6B44);
		/* 8220AF58h case    4:*/		return 0x8220AF5C;
		  /* 8220AF5Ch */ case    5:  		/* addi R14, R10, -10856 */
		/* 8220AF5Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R10,0xFFFFD598);
		/* 8220AF5Ch case    5:*/		return 0x8220AF60;
		  /* 8220AF60h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 8220AF60h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8220AF80;  }
		/* 8220AF60h case    6:*/		return 0x8220AF64;
		  /* 8220AF64h */ case    7:  		/* lis R11, -32252 */
		/* 8220AF64h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AF64h case    7:*/		return 0x8220AF68;
		  /* 8220AF68h */ case    8:  		/* mr R6, R14 */
		/* 8220AF68h case    8:*/		regs.R6 = regs.R14;
		/* 8220AF68h case    8:*/		return 0x8220AF6C;
		  /* 8220AF6Ch */ case    9:  		/* addi R5, R11, -10720 */
		/* 8220AF6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD620);
		/* 8220AF6Ch case    9:*/		return 0x8220AF70;
		  /* 8220AF70h */ case   10:  		/* mr R4, R15 */
		/* 8220AF70h case   10:*/		regs.R4 = regs.R15;
		/* 8220AF70h case   10:*/		return 0x8220AF74;
		  /* 8220AF74h */ case   11:  		/* li R7, 1562 */
		/* 8220AF74h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x61A);
		/* 8220AF74h case   11:*/		return 0x8220AF78;
		  /* 8220AF78h */ case   12:  		/* li R3, 0 */
		/* 8220AF78h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AF78h case   12:*/		return 0x8220AF7C;
		  /* 8220AF7Ch */ case   13:  		/* bl -734068 */
		/* 8220AF7Ch case   13:*/		regs.LR = 0x8220AF80; return 0x82157C08;
		/* 8220AF7Ch case   13:*/		return 0x8220AF80;
	}
	return 0x8220AF80;
} // Block from 8220AF48h-8220AF80h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220AF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AF80);
		  /* 8220AF80h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8220AF80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8220AF80h case    0:*/		return 0x8220AF84;
		  /* 8220AF84h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220AF84h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220AFA4;  }
		/* 8220AF84h case    1:*/		return 0x8220AF88;
		  /* 8220AF88h */ case    2:  		/* lis R11, -32252 */
		/* 8220AF88h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AF88h case    2:*/		return 0x8220AF8C;
		  /* 8220AF8Ch */ case    3:  		/* mr R6, R14 */
		/* 8220AF8Ch case    3:*/		regs.R6 = regs.R14;
		/* 8220AF8Ch case    3:*/		return 0x8220AF90;
		  /* 8220AF90h */ case    4:  		/* addi R5, R11, -10732 */
		/* 8220AF90h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD614);
		/* 8220AF90h case    4:*/		return 0x8220AF94;
		  /* 8220AF94h */ case    5:  		/* mr R4, R15 */
		/* 8220AF94h case    5:*/		regs.R4 = regs.R15;
		/* 8220AF94h case    5:*/		return 0x8220AF98;
		  /* 8220AF98h */ case    6:  		/* li R7, 1563 */
		/* 8220AF98h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x61B);
		/* 8220AF98h case    6:*/		return 0x8220AF9C;
		  /* 8220AF9Ch */ case    7:  		/* li R3, 0 */
		/* 8220AF9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AF9Ch case    7:*/		return 0x8220AFA0;
		  /* 8220AFA0h */ case    8:  		/* bl -734104 */
		/* 8220AFA0h case    8:*/		regs.LR = 0x8220AFA4; return 0x82157C08;
		/* 8220AFA0h case    8:*/		return 0x8220AFA4;
	}
	return 0x8220AFA4;
} // Block from 8220AF80h-8220AFA4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AFA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AFA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AFA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AFA4);
		  /* 8220AFA4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220AFA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220AFA4h case    0:*/		return 0x8220AFA8;
		  /* 8220AFA8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220AFA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220AFC8;  }
		/* 8220AFA8h case    1:*/		return 0x8220AFAC;
		  /* 8220AFACh */ case    2:  		/* lis R11, -32252 */
		/* 8220AFACh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AFACh case    2:*/		return 0x8220AFB0;
		  /* 8220AFB0h */ case    3:  		/* mr R6, R14 */
		/* 8220AFB0h case    3:*/		regs.R6 = regs.R14;
		/* 8220AFB0h case    3:*/		return 0x8220AFB4;
		  /* 8220AFB4h */ case    4:  		/* addi R5, R11, -10748 */
		/* 8220AFB4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD604);
		/* 8220AFB4h case    4:*/		return 0x8220AFB8;
		  /* 8220AFB8h */ case    5:  		/* mr R4, R15 */
		/* 8220AFB8h case    5:*/		regs.R4 = regs.R15;
		/* 8220AFB8h case    5:*/		return 0x8220AFBC;
		  /* 8220AFBCh */ case    6:  		/* li R7, 1564 */
		/* 8220AFBCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x61C);
		/* 8220AFBCh case    6:*/		return 0x8220AFC0;
		  /* 8220AFC0h */ case    7:  		/* li R3, 0 */
		/* 8220AFC0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AFC0h case    7:*/		return 0x8220AFC4;
		  /* 8220AFC4h */ case    8:  		/* bl -734140 */
		/* 8220AFC4h case    8:*/		regs.LR = 0x8220AFC8; return 0x82157C08;
		/* 8220AFC4h case    8:*/		return 0x8220AFC8;
	}
	return 0x8220AFC8;
} // Block from 8220AFA4h-8220AFC8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AFC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AFC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AFC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AFC8);
		  /* 8220AFC8h */ case    0:  		/* addic. R17, R31, 236 */
		/* 8220AFC8h case    0:*/		cpu::op::addic<1>(regs,&regs.R17,regs.R31,0xEC);
		/* 8220AFC8h case    0:*/		return 0x8220AFCC;
		  /* 8220AFCCh */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 8220AFCCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8220AFEC;  }
		/* 8220AFCCh case    1:*/		return 0x8220AFD0;
		  /* 8220AFD0h */ case    2:  		/* lis R11, -32252 */
		/* 8220AFD0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220AFD0h case    2:*/		return 0x8220AFD4;
		  /* 8220AFD4h */ case    3:  		/* mr R6, R14 */
		/* 8220AFD4h case    3:*/		regs.R6 = regs.R14;
		/* 8220AFD4h case    3:*/		return 0x8220AFD8;
		  /* 8220AFD8h */ case    4:  		/* addi R5, R11, -11796 */
		/* 8220AFD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1EC);
		/* 8220AFD8h case    4:*/		return 0x8220AFDC;
		  /* 8220AFDCh */ case    5:  		/* mr R4, R15 */
		/* 8220AFDCh case    5:*/		regs.R4 = regs.R15;
		/* 8220AFDCh case    5:*/		return 0x8220AFE0;
		  /* 8220AFE0h */ case    6:  		/* li R7, 1567 */
		/* 8220AFE0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x61F);
		/* 8220AFE0h case    6:*/		return 0x8220AFE4;
		  /* 8220AFE4h */ case    7:  		/* li R3, 0 */
		/* 8220AFE4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220AFE4h case    7:*/		return 0x8220AFE8;
		  /* 8220AFE8h */ case    8:  		/* bl -734176 */
		/* 8220AFE8h case    8:*/		regs.LR = 0x8220AFEC; return 0x82157C08;
		/* 8220AFE8h case    8:*/		return 0x8220AFEC;
	}
	return 0x8220AFEC;
} // Block from 8220AFC8h-8220AFECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220AFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220AFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220AFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220AFEC);
		  /* 8220AFECh */ case    0:  		/* li R4, 0 */
		/* 8220AFECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220AFECh case    0:*/		return 0x8220AFF0;
		  /* 8220AFF0h */ case    1:  		/* lwz R3, <#[R18 + 12]> */
		/* 8220AFF0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x0000000C) );
		/* 8220AFF0h case    1:*/		return 0x8220AFF4;
		  /* 8220AFF4h */ case    2:  		/* bl -3692 */
		/* 8220AFF4h case    2:*/		regs.LR = 0x8220AFF8; return 0x8220A188;
		/* 8220AFF4h case    2:*/		return 0x8220AFF8;
		  /* 8220AFF8h */ case    3:  		/* mr R22, R3 */
		/* 8220AFF8h case    3:*/		regs.R22 = regs.R3;
		/* 8220AFF8h case    3:*/		return 0x8220AFFC;
		  /* 8220AFFCh */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8220AFFCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220AFFCh case    4:*/		return 0x8220B000;
		  /* 8220B000h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 8220B000h case    5:*/		if ( regs.CR[6].eq ) { return 0x8220B008;  }
		/* 8220B000h case    5:*/		return 0x8220B004;
		  /* 8220B004h */ case    6:  		/* li R22, 4092 */
		/* 8220B004h case    6:*/		cpu::op::li<0>(regs,&regs.R22,0xFFC);
		/* 8220B004h case    6:*/		return 0x8220B008;
	}
	return 0x8220B008;
} // Block from 8220AFECh-8220B008h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220B008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B008);
		  /* 8220B008h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8220B008h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B008h case    0:*/		return 0x8220B00C;
		  /* 8220B00Ch */ case    1:  		/* bl -702980 */
		/* 8220B00Ch case    1:*/		regs.LR = 0x8220B010; return 0x8215F608;
		/* 8220B00Ch case    1:*/		return 0x8220B010;
		  /* 8220B010h */ case    2:  		/* bl -705504 */
		/* 8220B010h case    2:*/		regs.LR = 0x8220B014; return 0x8215EC30;
		/* 8220B010h case    2:*/		return 0x8220B014;
		  /* 8220B014h */ case    3:  		/* mr R20, R3 */
		/* 8220B014h case    3:*/		regs.R20 = regs.R3;
		/* 8220B014h case    3:*/		return 0x8220B018;
		  /* 8220B018h */ case    4:  		/* mr R3, R21 */
		/* 8220B018h case    4:*/		regs.R3 = regs.R21;
		/* 8220B018h case    4:*/		return 0x8220B01C;
		  /* 8220B01Ch */ case    5:  		/* bl -1276 */
		/* 8220B01Ch case    5:*/		regs.LR = 0x8220B020; return 0x8220AB20;
		/* 8220B01Ch case    5:*/		return 0x8220B020;
		  /* 8220B020h */ case    6:  		/* lwz R11, <#[R18 + 4]> */
		/* 8220B020h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8220B020h case    6:*/		return 0x8220B024;
		  /* 8220B024h */ case    7:  		/* mr R23, R3 */
		/* 8220B024h case    7:*/		regs.R23 = regs.R3;
		/* 8220B024h case    7:*/		return 0x8220B028;
		  /* 8220B028h */ case    8:  		/* lwz R3, <#[R18]> */
		/* 8220B028h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000000) );
		/* 8220B028h case    8:*/		return 0x8220B02C;
		  /* 8220B02Ch */ case    9:  		/* rlwinm R4, R23, 2, 0, 29 */
		/* 8220B02Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R23);
		/* 8220B02Ch case    9:*/		return 0x8220B030;
		  /* 8220B030h */ case   10:  		/* mtspr CTR, R11 */
		/* 8220B030h case   10:*/		regs.CTR = regs.R11;
		/* 8220B030h case   10:*/		return 0x8220B034;
		  /* 8220B034h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8220B034h case   11:*/		if ( 1 ) { regs.LR = 0x8220B038; return (uint32)regs.CTR; }
		/* 8220B034h case   11:*/		return 0x8220B038;
		  /* 8220B038h */ case   12:  		/* lwz R11, <#[R17 + 8]> */
		/* 8220B038h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 8220B038h case   12:*/		return 0x8220B03C;
		  /* 8220B03Ch */ case   13:  		/* mr R30, R3 */
		/* 8220B03Ch case   13:*/		regs.R30 = regs.R3;
		/* 8220B03Ch case   13:*/		return 0x8220B040;
		  /* 8220B040h */ case   14:  		/* mr R4, R23 */
		/* 8220B040h case   14:*/		regs.R4 = regs.R23;
		/* 8220B040h case   14:*/		return 0x8220B044;
		  /* 8220B044h */ case   15:  		/* lwz R3, <#[R17 + 4]> */
		/* 8220B044h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R17 + 0x00000004) );
		/* 8220B044h case   15:*/		return 0x8220B048;
		  /* 8220B048h */ case   16:  		/* mr R19, R30 */
		/* 8220B048h case   16:*/		regs.R19 = regs.R30;
		/* 8220B048h case   16:*/		return 0x8220B04C;
		  /* 8220B04Ch */ case   17:  		/* mtspr CTR, R11 */
		/* 8220B04Ch case   17:*/		regs.CTR = regs.R11;
		/* 8220B04Ch case   17:*/		return 0x8220B050;
		  /* 8220B050h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8220B050h case   18:*/		if ( 1 ) { regs.LR = 0x8220B054; return (uint32)regs.CTR; }
		/* 8220B050h case   18:*/		return 0x8220B054;
		  /* 8220B054h */ case   19:  		/* lis R11, -16373 */
		/* 8220B054h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC00B);
		/* 8220B054h case   19:*/		return 0x8220B058;
		  /* 8220B058h */ case   20:  		/* li R25, 0 */
		/* 8220B058h case   20:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8220B058h case   20:*/		return 0x8220B05C;
		  /* 8220B05Ch */ case   21:  		/* ori R11, R11, 9472 */
		/* 8220B05Ch case   21:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2500);
		/* 8220B05Ch case   21:*/		return 0x8220B060;
		  /* 8220B060h */ case   22:  		/* mr R16, R3 */
		/* 8220B060h case   22:*/		regs.R16 = regs.R3;
		/* 8220B060h case   22:*/		return 0x8220B064;
		  /* 8220B064h */ case   23:  		/* stw R11, <#[R3]> */
		/* 8220B064h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8220B064h case   23:*/		return 0x8220B068;
		  /* 8220B068h */ case   24:  		/* lis R11, -32252 */
		/* 8220B068h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B068h case   24:*/		return 0x8220B06C;
		  /* 8220B06Ch */ case   25:  		/* mr R27, R25 */
		/* 8220B06Ch case   25:*/		regs.R27 = regs.R25;
		/* 8220B06Ch case   25:*/		return 0x8220B070;
		  /* 8220B070h */ case   26:  		/* addi R31, R3, 4 */
		/* 8220B070h case   26:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x4);
		/* 8220B070h case   26:*/		return 0x8220B074;
		  /* 8220B074h */ case   27:  		/* li R26, 16 */
		/* 8220B074h case   27:*/		cpu::op::li<0>(regs,&regs.R26,0x10);
		/* 8220B074h case   27:*/		return 0x8220B078;
		  /* 8220B078h */ case   28:  		/* addi R24, R11, -11768 */
		/* 8220B078h case   28:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFD208);
		/* 8220B078h case   28:*/		return 0x8220B07C;
		  /* 8220B07Ch */ case   29:  		/* addi R11, R27, 1 */
		/* 8220B07Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x1);
		/* 8220B07Ch case   29:*/		return 0x8220B080;
		  /* 8220B080h */ case   30:  		/* mr R3, R27 */
		/* 8220B080h case   30:*/		regs.R3 = regs.R27;
		/* 8220B080h case   30:*/		return 0x8220B084;
		  /* 8220B084h */ case   31:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 8220B084h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 8220B084h case   31:*/		return 0x8220B088;
		  /* 8220B088h */ case   32:  		/* lwzx R11, <#[R28 + R21]> */
		/* 8220B088h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R21 + 0x00000000) );
		/* 8220B088h case   32:*/		return 0x8220B08C;
		  /* 8220B08Ch */ case   33:  		/* lwz R29, <#[R11 + 32]> */
		/* 8220B08Ch case   33:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000020) );
		/* 8220B08Ch case   33:*/		return 0x8220B090;
		  /* 8220B090h */ case   34:  		/* bl -3720 */
		/* 8220B090h case   34:*/		regs.LR = 0x8220B094; return 0x8220A208;
		/* 8220B090h case   34:*/		return 0x8220B094;
		  /* 8220B094h */ case   35:  		/* and. R11, R3, R22 */
		/* 8220B094h case   35:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R22);
		/* 8220B094h case   35:*/		return 0x8220B098;
	}
	return 0x8220B098;
} // Block from 8220B008h-8220B098h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8220B098h
// Function '?AS_Initialize@XGRAPHICS@@YAPAU_ABSTRACT_STATE@1@PAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B098);
		  /* 8220B098h */ case    0:  		/* bc 12, CR0_EQ, 92 */
		/* 8220B098h case    0:*/		if ( regs.CR[0].eq ) { return 0x8220B0F4;  }
		/* 8220B098h case    0:*/		return 0x8220B09C;
		  /* 8220B09Ch */ case    1:  		/* lwz R11, <#[R29]> */
		/* 8220B09Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8220B09Ch case    1:*/		return 0x8220B0A0;
		  /* 8220B0A0h */ case    2:  		/* addi R10, R29, 8 */
		/* 8220B0A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x8);
		/* 8220B0A0h case    2:*/		return 0x8220B0A4;
		  /* 8220B0A4h */ case    3:  		/* mr R8, R25 */
		/* 8220B0A4h case    3:*/		regs.R8 = regs.R25;
		/* 8220B0A4h case    3:*/		return 0x8220B0A8;
		  /* 8220B0A8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8220B0A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220B0A8h case    4:*/		return 0x8220B0AC;
		  /* 8220B0ACh */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 8220B0ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x8220B0EC;  }
		/* 8220B0ACh case    5:*/		return 0x8220B0B0;
		  /* 8220B0B0h */ case    6:  		/* mulli R7, R27, 38 */
		/* 8220B0B0h case    6:*/		cpu::op::mulli<0>(regs,&regs.R7,regs.R27,0x26);
		/* 8220B0B0h case    6:*/		return 0x8220B0B4;
		  /* 8220B0B4h */ case    7:  		/* mtspr CTR, R11 */
		/* 8220B0B4h case    7:*/		regs.CTR = regs.R11;
		/* 8220B0B4h case    7:*/		return 0x8220B0B8;
		  /* 8220B0B8h */ case    8:  		/* add R11, R7, R8 */
		/* 8220B0B8h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R7,regs.R8);
		/* 8220B0B8h case    8:*/		return 0x8220B0BC;
		  /* 8220B0BCh */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220B0BCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220B0BCh case    9:*/		return 0x8220B0C0;
		  /* 8220B0C0h */ case   10:  		/* lwzx R11, <#[R11 + R24]> */
		/* 8220B0C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 8220B0C0h case   10:*/		return 0x8220B0C4;
		  /* 8220B0C4h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8220B0C4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220B0C4h case   11:*/		return 0x8220B0C8;
		  /* 8220B0C8h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 8220B0C8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8220B0E0;  }
		/* 8220B0C8h case   12:*/		return 0x8220B0CC;
		  /* 8220B0CCh */ case   13:  		/* lwz R6, <#[R10]> */
		/* 8220B0CCh case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8220B0CCh case   13:*/		return 0x8220B0D0;
		  /* 8220B0D0h */ case   14:  		/* addi R9, R30, 4 */
		/* 8220B0D0h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x4);
		/* 8220B0D0h case   14:*/		return 0x8220B0D4;
		  /* 8220B0D4h */ case   15:  		/* stw R11, <#[R30]> */
		/* 8220B0D4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220B0D4h case   15:*/		return 0x8220B0D8;
		  /* 8220B0D8h */ case   16:  		/* stw R6, <#[R30 + 4]> */
		/* 8220B0D8h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 8220B0D8h case   16:*/		return 0x8220B0DC;
		  /* 8220B0DCh */ case   17:  		/* addi R30, R9, 4 */
		/* 8220B0DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R9,0x4);
		/* 8220B0DCh case   17:*/		return 0x8220B0E0;
	}
	return 0x8220B0E0;
} // Block from 8220B098h-8220B0E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220B0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B0E0);
		  /* 8220B0E0h */ case    0:  		/* addi R8, R8, 1 */
		/* 8220B0E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8220B0E0h case    0:*/		return 0x8220B0E4;
		  /* 8220B0E4h */ case    1:  		/* addi R10, R10, 4 */
		/* 8220B0E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8220B0E4h case    1:*/		return 0x8220B0E8;
		  /* 8220B0E8h */ case    2:  		/* bc 16, CR0_LT, -48 */
		/* 8220B0E8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220B0B8;  }
		/* 8220B0E8h case    2:*/		return 0x8220B0EC;
	}
	return 0x8220B0EC;
} // Block from 8220B0E0h-8220B0ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220B0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B0EC);
		  /* 8220B0ECh */ case    0:  		/* stw R26, <#[R31]> */
		/* 8220B0ECh case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B0ECh case    0:*/		return 0x8220B0F0;
		  /* 8220B0F0h */ case    1:  		/* b 24 */
		/* 8220B0F0h case    1:*/		return 0x8220B108;
		/* 8220B0F0h case    1:*/		return 0x8220B0F4;
	}
	return 0x8220B0F4;
} // Block from 8220B0ECh-8220B0F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220B0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B0F4);
		  /* 8220B0F4h */ case    0:  		/* lwzx R11, <#[R28 + R21]> */
		/* 8220B0F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R21 + 0x00000000) );
		/* 8220B0F4h case    0:*/		return 0x8220B0F8;
		  /* 8220B0F8h */ case    1:  		/* lwz R10, <#[R29 + 4]> */
		/* 8220B0F8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 8220B0F8h case    1:*/		return 0x8220B0FC;
		  /* 8220B0FCh */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 8220B0FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8220B0FCh case    2:*/		return 0x8220B100;
		  /* 8220B100h */ case    3:  		/* or R11, R10, R11 */
		/* 8220B100h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220B100h case    3:*/		return 0x8220B104;
		  /* 8220B104h */ case    4:  		/* stw R11, <#[R31]> */
		/* 8220B104h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B104h case    4:*/		return 0x8220B108;
	}
	return 0x8220B108;
} // Block from 8220B0F4h-8220B108h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220B108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B108);
		  /* 8220B108h */ case    0:  		/* addi R31, R31, 4 */
		/* 8220B108h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220B108h case    0:*/		return 0x8220B10C;
		  /* 8220B10Ch */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 8220B10Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220B10Ch case    1:*/		return 0x8220B110;
		  /* 8220B110h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8220B110h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220B120;  }
		/* 8220B110h case    2:*/		return 0x8220B114;
		  /* 8220B114h */ case    3:  		/* stw R26, <#[R31]> */
		/* 8220B114h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B114h case    3:*/		return 0x8220B118;
		  /* 8220B118h */ case    4:  		/* stwu R26, <#[R31 + 4]> */
		/* 8220B118h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B118h case    4:*/		return 0x8220B11C;
		  /* 8220B11Ch */ case    5:  		/* addi R31, R31, 4 */
		/* 8220B11Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220B11Ch case    5:*/		return 0x8220B120;
	}
	return 0x8220B120;
} // Block from 8220B108h-8220B120h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220B120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B120);
		  /* 8220B120h */ case    0:  		/* addi R27, R27, 1 */
		/* 8220B120h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8220B120h case    0:*/		return 0x8220B124;
		  /* 8220B124h */ case    1:  		/* cmplwi CR6, R27, 6 */
		/* 8220B124h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000006);
		/* 8220B124h case    1:*/		return 0x8220B128;
		  /* 8220B128h */ case    2:  		/* bc 12, CR6_LT, -172 */
		/* 8220B128h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220B07C;  }
		/* 8220B128h case    2:*/		return 0x8220B12C;
		  /* 8220B12Ch */ case    3:  		/* lwz R10, <#[R21 + 32]> */
		/* 8220B12Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000020) );
		/* 8220B12Ch case    3:*/		return 0x8220B130;
		  /* 8220B130h */ case    4:  		/* rlwinm. R11, R22, 0, 29, 29 */
		/* 8220B130h case    4:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R22);
		/* 8220B130h case    4:*/		return 0x8220B134;
		  /* 8220B134h */ case    5:  		/* lwz R11, <#[R10 + 32]> */
		/* 8220B134h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 8220B134h case    5:*/		return 0x8220B138;
		  /* 8220B138h */ case    6:  		/* bc 12, CR0_EQ, 84 */
		/* 8220B138h case    6:*/		if ( regs.CR[0].eq ) { return 0x8220B18C;  }
		/* 8220B138h case    6:*/		return 0x8220B13C;
		  /* 8220B13Ch */ case    7:  		/* lwz R29, <#[R11]> */
		/* 8220B13Ch case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8220B13Ch case    7:*/		return 0x8220B140;
		  /* 8220B140h */ case    8:  		/* lis R9, -16384 */
		/* 8220B140h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 8220B140h case    8:*/		return 0x8220B144;
		  /* 8220B144h */ case    9:  		/* addi R10, R30, 8 */
		/* 8220B144h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x8);
		/* 8220B144h case    9:*/		return 0x8220B148;
		  /* 8220B148h */ case   10:  		/* ori R9, R9, 11008 */
		/* 8220B148h case   10:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2B00);
		/* 8220B148h case   10:*/		return 0x8220B14C;
		  /* 8220B14Ch */ case   11:  		/* addi R8, R29, 1 */
		/* 8220B14Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x1);
		/* 8220B14Ch case   11:*/		return 0x8220B150;
		  /* 8220B150h */ case   12:  		/* addi R28, R10, 4 */
		/* 8220B150h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x4);
		/* 8220B150h case   12:*/		return 0x8220B154;
		  /* 8220B154h */ case   13:  		/* rlwimi R9, R8, 16, 2, 15 */
		/* 8220B154h case   13:*/		cpu::op::rlwimi<0,16,2,15>(regs,&regs.R9,regs.R8);
		/* 8220B154h case   13:*/		return 0x8220B158;
		  /* 8220B158h */ case   14:  		/* addi R4, R11, 8 */
		/* 8220B158h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x8);
		/* 8220B158h case   14:*/		return 0x8220B15C;
		  /* 8220B15Ch */ case   15:  		/* stw R9, <#[R30]> */
		/* 8220B15Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8220B15Ch case   15:*/		return 0x8220B160;
		  /* 8220B160h */ case   16:  		/* mr R3, R28 */
		/* 8220B160h case   16:*/		regs.R3 = regs.R28;
		/* 8220B160h case   16:*/		return 0x8220B164;
		  /* 8220B164h */ case   17:  		/* stw R25, <#[R30 + 4]> */
		/* 8220B164h case   17:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000004) );
		/* 8220B164h case   17:*/		return 0x8220B168;
		  /* 8220B168h */ case   18:  		/* stw R29, <#[R30 + 8]> */
		/* 8220B168h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 8220B168h case   18:*/		return 0x8220B16C;
		  /* 8220B16Ch */ case   19:  		/* lwz R11, <#[R11]> */
		/* 8220B16Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8220B16Ch case   19:*/		return 0x8220B170;
		  /* 8220B170h */ case   20:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8220B170h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8220B170h case   20:*/		return 0x8220B174;
		  /* 8220B174h */ case   21:  		/* bl -1546180 */
		/* 8220B174h case   21:*/		regs.LR = 0x8220B178; return 0x820919B0;
		/* 8220B174h case   21:*/		return 0x8220B178;
		  /* 8220B178h */ case   22:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8220B178h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8220B178h case   22:*/		return 0x8220B17C;
		  /* 8220B17Ch */ case   23:  		/* stw R26, <#[R31]> */
		/* 8220B17Ch case   23:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B17Ch case   23:*/		return 0x8220B180;
		  /* 8220B180h */ case   24:  		/* stwu R25, <#[R31 + 4]> */
		/* 8220B180h case   24:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B180h case   24:*/		return 0x8220B184;
		  /* 8220B184h */ case   25:  		/* add R30, R11, R28 */
		/* 8220B184h case   25:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R28);
		/* 8220B184h case   25:*/		return 0x8220B188;
		  /* 8220B188h */ case   26:  		/* b 36 */
		/* 8220B188h case   26:*/		return 0x8220B1AC;
		/* 8220B188h case   26:*/		return 0x8220B18C;
	}
	return 0x8220B18C;
} // Block from 8220B120h-8220B18Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8220B18Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B18C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B18C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B18C);
		  /* 8220B18Ch */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 8220B18Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8220B18Ch case    0:*/		return 0x8220B190;
		  /* 8220B190h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8220B190h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220B19C;  }
		/* 8220B190h case    1:*/		return 0x8220B194;
		  /* 8220B194h */ case    2:  		/* stw R26, <#[R31]> */
		/* 8220B194h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B194h case    2:*/		return 0x8220B198;
		  /* 8220B198h */ case    3:  		/* b 20 */
		/* 8220B198h case    3:*/		return 0x8220B1AC;
		/* 8220B198h case    3:*/		return 0x8220B19C;
	}
	return 0x8220B19C;
} // Block from 8220B18Ch-8220B19Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220B19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B19C);
		  /* 8220B19Ch */ case    0:  		/* lwz R10, <#[R10 + 16]> */
		/* 8220B19Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8220B19Ch case    0:*/		return 0x8220B1A0;
		  /* 8220B1A0h */ case    1:  		/* stw R10, <#[R31]> */
		/* 8220B1A0h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B1A0h case    1:*/		return 0x8220B1A4;
		  /* 8220B1A4h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 8220B1A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8220B1A4h case    2:*/		return 0x8220B1A8;
		  /* 8220B1A8h */ case    3:  		/* stwu R11, <#[R31 + 4]> */
		/* 8220B1A8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B1A8h case    3:*/		return 0x8220B1AC;
	}
	return 0x8220B1AC;
} // Block from 8220B19Ch-8220B1ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220B1ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B1AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B1AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B1AC);
		  /* 8220B1ACh */ case    0:  		/* lwz R10, <#[R21 + 28]> */
		/* 8220B1ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000001C) );
		/* 8220B1ACh case    0:*/		return 0x8220B1B0;
		  /* 8220B1B0h */ case    1:  		/* rlwinm. R11, R22, 0, 28, 28 */
		/* 8220B1B0h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R22);
		/* 8220B1B0h case    1:*/		return 0x8220B1B4;
		  /* 8220B1B4h */ case    2:  		/* lwz R11, <#[R10 + 32]> */
		/* 8220B1B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 8220B1B4h case    2:*/		return 0x8220B1B8;
		  /* 8220B1B8h */ case    3:  		/* addi R31, R31, 4 */
		/* 8220B1B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220B1B8h case    3:*/		return 0x8220B1BC;
		  /* 8220B1BCh */ case    4:  		/* bc 12, CR0_EQ, 88 */
		/* 8220B1BCh case    4:*/		if ( regs.CR[0].eq ) { return 0x8220B214;  }
		/* 8220B1BCh case    4:*/		return 0x8220B1C0;
		  /* 8220B1C0h */ case    5:  		/* lwz R29, <#[R11]> */
		/* 8220B1C0h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8220B1C0h case    5:*/		return 0x8220B1C4;
		  /* 8220B1C4h */ case    6:  		/* lis R10, -16384 */
		/* 8220B1C4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8220B1C4h case    6:*/		return 0x8220B1C8;
		  /* 8220B1C8h */ case    7:  		/* li R9, 1 */
		/* 8220B1C8h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8220B1C8h case    7:*/		return 0x8220B1CC;
		  /* 8220B1CCh */ case    8:  		/* ori R8, R10, 11008 */
		/* 8220B1CCh case    8:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2B00);
		/* 8220B1CCh case    8:*/		return 0x8220B1D0;
		  /* 8220B1D0h */ case    9:  		/* addi R7, R29, 1 */
		/* 8220B1D0h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R29,0x1);
		/* 8220B1D0h case    9:*/		return 0x8220B1D4;
		  /* 8220B1D4h */ case   10:  		/* addi R10, R30, 8 */
		/* 8220B1D4h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x8);
		/* 8220B1D4h case   10:*/		return 0x8220B1D8;
		  /* 8220B1D8h */ case   11:  		/* rlwimi R8, R7, 16, 2, 15 */
		/* 8220B1D8h case   11:*/		cpu::op::rlwimi<0,16,2,15>(regs,&regs.R8,regs.R7);
		/* 8220B1D8h case   11:*/		return 0x8220B1DC;
		  /* 8220B1DCh */ case   12:  		/* addi R28, R10, 4 */
		/* 8220B1DCh case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x4);
		/* 8220B1DCh case   12:*/		return 0x8220B1E0;
		  /* 8220B1E0h */ case   13:  		/* stw R8, <#[R30]> */
		/* 8220B1E0h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 8220B1E0h case   13:*/		return 0x8220B1E4;
		  /* 8220B1E4h */ case   14:  		/* addi R4, R11, 8 */
		/* 8220B1E4h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x8);
		/* 8220B1E4h case   14:*/		return 0x8220B1E8;
		  /* 8220B1E8h */ case   15:  		/* stw R9, <#[R30 + 4]> */
		/* 8220B1E8h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8220B1E8h case   15:*/		return 0x8220B1EC;
		  /* 8220B1ECh */ case   16:  		/* mr R3, R28 */
		/* 8220B1ECh case   16:*/		regs.R3 = regs.R28;
		/* 8220B1ECh case   16:*/		return 0x8220B1F0;
		  /* 8220B1F0h */ case   17:  		/* stw R29, <#[R30 + 8]> */
		/* 8220B1F0h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 8220B1F0h case   17:*/		return 0x8220B1F4;
		  /* 8220B1F4h */ case   18:  		/* lwz R11, <#[R11]> */
		/* 8220B1F4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8220B1F4h case   18:*/		return 0x8220B1F8;
		  /* 8220B1F8h */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8220B1F8h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8220B1F8h case   19:*/		return 0x8220B1FC;
		  /* 8220B1FCh */ case   20:  		/* bl -1546316 */
		/* 8220B1FCh case   20:*/		regs.LR = 0x8220B200; return 0x820919B0;
		/* 8220B1FCh case   20:*/		return 0x8220B200;
		  /* 8220B200h */ case   21:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8220B200h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8220B200h case   21:*/		return 0x8220B204;
		  /* 8220B204h */ case   22:  		/* stw R26, <#[R31]> */
		/* 8220B204h case   22:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B204h case   22:*/		return 0x8220B208;
		  /* 8220B208h */ case   23:  		/* stwu R25, <#[R31 + 4]> */
		/* 8220B208h case   23:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B208h case   23:*/		return 0x8220B20C;
		  /* 8220B20Ch */ case   24:  		/* add R30, R11, R28 */
		/* 8220B20Ch case   24:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R28);
		/* 8220B20Ch case   24:*/		return 0x8220B210;
		  /* 8220B210h */ case   25:  		/* b 60 */
		/* 8220B210h case   25:*/		return 0x8220B24C;
		/* 8220B210h case   25:*/		return 0x8220B214;
	}
	return 0x8220B214;
} // Block from 8220B1ACh-8220B214h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8220B214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B214);
		  /* 8220B214h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 8220B214h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8220B214h case    0:*/		return 0x8220B218;
		  /* 8220B218h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8220B218h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220B23C;  }
		/* 8220B218h case    1:*/		return 0x8220B21C;
		  /* 8220B21Ch */ case    2:  		/* lis R9, -16383 */
		/* 8220B21Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC001);
		/* 8220B21Ch case    2:*/		return 0x8220B220;
		  /* 8220B220h */ case    3:  		/* stw R26, <#[R31]> */
		/* 8220B220h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B220h case    3:*/		return 0x8220B224;
		  /* 8220B224h */ case    4:  		/* ori R9, R9, 9984 */
		/* 8220B224h case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2700);
		/* 8220B224h case    4:*/		return 0x8220B228;
		  /* 8220B228h */ case    5:  		/* stwu R9, <#[R31 + 4]> */
		/* 8220B228h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B228h case    5:*/		return 0x8220B22C;
		  /* 8220B22Ch */ case    6:  		/* lwz R10, <#[R10 + 16]> */
		/* 8220B22Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8220B22Ch case    6:*/		return 0x8220B230;
		  /* 8220B230h */ case    7:  		/* ori R10, R10, 2 */
		/* 8220B230h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8220B230h case    7:*/		return 0x8220B234;
		  /* 8220B234h */ case    8:  		/* stwu R10, <#[R31 + 4]> */
		/* 8220B234h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B234h case    8:*/		return 0x8220B238;
		  /* 8220B238h */ case    9:  		/* b 12 */
		/* 8220B238h case    9:*/		return 0x8220B244;
		/* 8220B238h case    9:*/		return 0x8220B23C;
	}
	return 0x8220B23C;
} // Block from 8220B214h-8220B23Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220B23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B23C);
		  /* 8220B23Ch */ case    0:  		/* lwz R10, <#[R10 + 16]> */
		/* 8220B23Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8220B23Ch case    0:*/		return 0x8220B240;
		  /* 8220B240h */ case    1:  		/* stw R10, <#[R31]> */
		/* 8220B240h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B240h case    1:*/		return 0x8220B244;
	}
	return 0x8220B244;
} // Block from 8220B23Ch-8220B244h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220B244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B244);
		  /* 8220B244h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 8220B244h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8220B244h case    0:*/		return 0x8220B248;
		  /* 8220B248h */ case    1:  		/* stwu R11, <#[R31 + 4]> */
		/* 8220B248h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8220B248h case    1:*/		return 0x8220B24C;
	}
	return 0x8220B24C;
} // Block from 8220B244h-8220B24Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220B24Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B24C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B24C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B24C);
		  /* 8220B24Ch */ case    0:  		/* subf R11, R19, R30 */
		/* 8220B24Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R19,regs.R30);
		/* 8220B24Ch case    0:*/		return 0x8220B250;
		  /* 8220B250h */ case    1:  		/* addi R31, R31, 4 */
		/* 8220B250h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220B250h case    1:*/		return 0x8220B254;
		  /* 8220B254h */ case    2:  		/* srawi R30, R11, 2 */
		/* 8220B254h case    2:*/		cpu::op::srawi<0,2>(regs,&regs.R30,regs.R11);
		/* 8220B254h case    2:*/		return 0x8220B258;
		  /* 8220B258h */ case    3:  		/* mr R4, R19 */
		/* 8220B258h case    3:*/		regs.R4 = regs.R19;
		/* 8220B258h case    3:*/		return 0x8220B25C;
		  /* 8220B25Ch */ case    4:  		/* mr R3, R31 */
		/* 8220B25Ch case    4:*/		regs.R3 = regs.R31;
		/* 8220B25Ch case    4:*/		return 0x8220B260;
		  /* 8220B260h */ case    5:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 8220B260h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 8220B260h case    5:*/		return 0x8220B264;
		  /* 8220B264h */ case    6:  		/* bl -1546420 */
		/* 8220B264h case    6:*/		regs.LR = 0x8220B268; return 0x820919B0;
		/* 8220B264h case    6:*/		return 0x8220B268;
		  /* 8220B268h */ case    7:  		/* subf R11, R16, R31 */
		/* 8220B268h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R16,regs.R31);
		/* 8220B268h case    7:*/		return 0x8220B26C;
		  /* 8220B26Ch */ case    8:  		/* srawi R11, R11, 2 */
		/* 8220B26Ch case    8:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 8220B26Ch case    8:*/		return 0x8220B270;
		  /* 8220B270h */ case    9:  		/* add R31, R11, R30 */
		/* 8220B270h case    9:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R30);
		/* 8220B270h case    9:*/		return 0x8220B274;
		  /* 8220B274h */ case   10:  		/* cmplw CR6, R23, R31 */
		/* 8220B274h case   10:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R31);
		/* 8220B274h case   10:*/		return 0x8220B278;
		  /* 8220B278h */ case   11:  		/* bc 4, CR6_LT, 32 */
		/* 8220B278h case   11:*/		if ( !regs.CR[6].lt ) { return 0x8220B298;  }
		/* 8220B278h case   11:*/		return 0x8220B27C;
		  /* 8220B27Ch */ case   12:  		/* lis R11, -32252 */
		/* 8220B27Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B27Ch case   12:*/		return 0x8220B280;
		  /* 8220B280h */ case   13:  		/* mr R6, R14 */
		/* 8220B280h case   13:*/		regs.R6 = regs.R14;
		/* 8220B280h case   13:*/		return 0x8220B284;
		  /* 8220B284h */ case   14:  		/* addi R5, R11, -10668 */
		/* 8220B284h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD654);
		/* 8220B284h case   14:*/		return 0x8220B288;
		  /* 8220B288h */ case   15:  		/* mr R4, R15 */
		/* 8220B288h case   15:*/		regs.R4 = regs.R15;
		/* 8220B288h case   15:*/		return 0x8220B28C;
		  /* 8220B28Ch */ case   16:  		/* li R7, 1702 */
		/* 8220B28Ch case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x6A6);
		/* 8220B28Ch case   16:*/		return 0x8220B290;
		  /* 8220B290h */ case   17:  		/* li R3, 0 */
		/* 8220B290h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B290h case   17:*/		return 0x8220B294;
		  /* 8220B294h */ case   18:  		/* bl -734860 */
		/* 8220B294h case   18:*/		regs.LR = 0x8220B298; return 0x82157C08;
		/* 8220B294h case   18:*/		return 0x8220B298;
	}
	return 0x8220B298;
} // Block from 8220B24Ch-8220B298h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220B298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B298);
		  /* 8220B298h */ case    0:  		/* lwz R11, <#[R17 + 20]> */
		/* 8220B298h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000014) );
		/* 8220B298h case    0:*/		return 0x8220B29C;
		  /* 8220B29Ch */ case    1:  		/* addi R5, R1, 80 */
		/* 8220B29Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8220B29Ch case    1:*/		return 0x8220B2A0;
		  /* 8220B2A0h */ case    2:  		/* mr R4, R31 */
		/* 8220B2A0h case    2:*/		regs.R4 = regs.R31;
		/* 8220B2A0h case    2:*/		return 0x8220B2A4;
		  /* 8220B2A4h */ case    3:  		/* lwz R3, <#[R17 + 4]> */
		/* 8220B2A4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R17 + 0x00000004) );
		/* 8220B2A4h case    3:*/		return 0x8220B2A8;
		  /* 8220B2A8h */ case    4:  		/* mtspr CTR, R11 */
		/* 8220B2A8h case    4:*/		regs.CTR = regs.R11;
		/* 8220B2A8h case    4:*/		return 0x8220B2AC;
		  /* 8220B2ACh */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8220B2ACh case    5:*/		if ( 1 ) { regs.LR = 0x8220B2B0; return (uint32)regs.CTR; }
		/* 8220B2ACh case    5:*/		return 0x8220B2B0;
		  /* 8220B2B0h */ case    6:  		/* addi R4, R1, 80 */
		/* 8220B2B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8220B2B0h case    6:*/		return 0x8220B2B4;
		  /* 8220B2B4h */ case    7:  		/* mr R3, R21 */
		/* 8220B2B4h case    7:*/		regs.R3 = regs.R21;
		/* 8220B2B4h case    7:*/		return 0x8220B2B8;
		  /* 8220B2B8h */ case    8:  		/* bl 11800 */
		/* 8220B2B8h case    8:*/		regs.LR = 0x8220B2BC; return 0x8220E0D0;
		/* 8220B2B8h case    8:*/		return 0x8220B2BC;
		  /* 8220B2BCh */ case    9:  		/* lwz R11, <#[R18 + 8]> */
		/* 8220B2BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 8220B2BCh case    9:*/		return 0x8220B2C0;
		  /* 8220B2C0h */ case   10:  		/* mr R4, R19 */
		/* 8220B2C0h case   10:*/		regs.R4 = regs.R19;
		/* 8220B2C0h case   10:*/		return 0x8220B2C4;
		  /* 8220B2C4h */ case   11:  		/* lwz R3, <#[R18]> */
		/* 8220B2C4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000000) );
		/* 8220B2C4h case   11:*/		return 0x8220B2C8;
		  /* 8220B2C8h */ case   12:  		/* mtspr CTR, R11 */
		/* 8220B2C8h case   12:*/		regs.CTR = regs.R11;
		/* 8220B2C8h case   12:*/		return 0x8220B2CC;
		  /* 8220B2CCh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8220B2CCh case   13:*/		if ( 1 ) { regs.LR = 0x8220B2D0; return (uint32)regs.CTR; }
		/* 8220B2CCh case   13:*/		return 0x8220B2D0;
		  /* 8220B2D0h */ case   14:  		/* li R3, 0 */
		/* 8220B2D0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B2D0h case   14:*/		return 0x8220B2D4;
		  /* 8220B2D4h */ case   15:  		/* addi R1, R1, 240 */
		/* 8220B2D4h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8220B2D4h case   15:*/		return 0x8220B2D8;
		  /* 8220B2D8h */ case   16:  		/* b -1548392 */
		/* 8220B2D8h case   16:*/		return 0x82091270;
		/* 8220B2D8h case   16:*/		return 0x8220B2DC;
		  /* 8220B2DCh */ case   17:  		/* nop */
		/* 8220B2DCh case   17:*/		cpu::op::nop();
		/* 8220B2DCh case   17:*/		return 0x8220B2E0;
	}
	return 0x8220B2E0;
} // Block from 8220B298h-8220B2E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220B2E0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B2E0);
		  /* 8220B2E0h */ case    0:  		/* mfspr R12, LR */
		/* 8220B2E0h case    0:*/		regs.R12 = regs.LR;
		/* 8220B2E0h case    0:*/		return 0x8220B2E4;
		  /* 8220B2E4h */ case    1:  		/* bl -1548448 */
		/* 8220B2E4h case    1:*/		regs.LR = 0x8220B2E8; return 0x82091244;
		/* 8220B2E4h case    1:*/		return 0x8220B2E8;
		  /* 8220B2E8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220B2E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220B2E8h case    2:*/		return 0x8220B2EC;
		  /* 8220B2ECh */ case    3:  		/* lis R11, -32253 */
		/* 8220B2ECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220B2ECh case    3:*/		return 0x8220B2F0;
		  /* 8220B2F0h */ case    4:  		/* lis R10, -32252 */
		/* 8220B2F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220B2F0h case    4:*/		return 0x8220B2F4;
		  /* 8220B2F4h */ case    5:  		/* mr R29, R3 */
		/* 8220B2F4h case    5:*/		regs.R29 = regs.R3;
		/* 8220B2F4h case    5:*/		return 0x8220B2F8;
		  /* 8220B2F8h */ case    6:  		/* mr R30, R4 */
		/* 8220B2F8h case    6:*/		regs.R30 = regs.R4;
		/* 8220B2F8h case    6:*/		return 0x8220B2FC;
		  /* 8220B2FCh */ case    7:  		/* mr R25, R5 */
		/* 8220B2FCh case    7:*/		regs.R25 = regs.R5;
		/* 8220B2FCh case    7:*/		return 0x8220B300;
		  /* 8220B300h */ case    8:  		/* mr R28, R6 */
		/* 8220B300h case    8:*/		regs.R28 = regs.R6;
		/* 8220B300h case    8:*/		return 0x8220B304;
		  /* 8220B304h */ case    9:  		/* mr R24, R7 */
		/* 8220B304h case    9:*/		regs.R24 = regs.R7;
		/* 8220B304h case    9:*/		return 0x8220B308;
		  /* 8220B308h */ case   10:  		/* mr R23, R9 */
		/* 8220B308h case   10:*/		regs.R23 = regs.R9;
		/* 8220B308h case   10:*/		return 0x8220B30C;
		  /* 8220B30Ch */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 8220B30Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220B30Ch case   11:*/		return 0x8220B310;
		  /* 8220B310h */ case   12:  		/* addi R27, R11, 27460 */
		/* 8220B310h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8220B310h case   12:*/		return 0x8220B314;
		  /* 8220B314h */ case   13:  		/* addi R26, R10, -10856 */
		/* 8220B314h case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFD598);
		/* 8220B314h case   13:*/		return 0x8220B318;
		  /* 8220B318h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B318h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220B338;  }
		/* 8220B318h case   14:*/		return 0x8220B31C;
		  /* 8220B31Ch */ case   15:  		/* lis R11, -32252 */
		/* 8220B31Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B31Ch case   15:*/		return 0x8220B320;
		  /* 8220B320h */ case   16:  		/* mr R6, R26 */
		/* 8220B320h case   16:*/		regs.R6 = regs.R26;
		/* 8220B320h case   16:*/		return 0x8220B324;
		  /* 8220B324h */ case   17:  		/* addi R5, R11, -21620 */
		/* 8220B324h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220B324h case   17:*/		return 0x8220B328;
		  /* 8220B328h */ case   18:  		/* mr R4, R27 */
		/* 8220B328h case   18:*/		regs.R4 = regs.R27;
		/* 8220B328h case   18:*/		return 0x8220B32C;
		  /* 8220B32Ch */ case   19:  		/* li R7, 1153 */
		/* 8220B32Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x481);
		/* 8220B32Ch case   19:*/		return 0x8220B330;
		  /* 8220B330h */ case   20:  		/* li R3, 0 */
		/* 8220B330h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B330h case   20:*/		return 0x8220B334;
		  /* 8220B334h */ case   21:  		/* bl -735020 */
		/* 8220B334h case   21:*/		regs.LR = 0x8220B338; return 0x82157C08;
		/* 8220B334h case   21:*/		return 0x8220B338;
	}
	return 0x8220B338;
} // Block from 8220B2E0h-8220B338h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220B338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B338);
		  /* 8220B338h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8220B338h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220B338h case    0:*/		return 0x8220B33C;
		  /* 8220B33Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B33Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B35C;  }
		/* 8220B33Ch case    1:*/		return 0x8220B340;
		  /* 8220B340h */ case    2:  		/* lis R11, -32252 */
		/* 8220B340h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B340h case    2:*/		return 0x8220B344;
		  /* 8220B344h */ case    3:  		/* mr R6, R26 */
		/* 8220B344h case    3:*/		regs.R6 = regs.R26;
		/* 8220B344h case    3:*/		return 0x8220B348;
		  /* 8220B348h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220B348h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220B348h case    4:*/		return 0x8220B34C;
		  /* 8220B34Ch */ case    5:  		/* mr R4, R27 */
		/* 8220B34Ch case    5:*/		regs.R4 = regs.R27;
		/* 8220B34Ch case    5:*/		return 0x8220B350;
		  /* 8220B350h */ case    6:  		/* li R7, 1153 */
		/* 8220B350h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x481);
		/* 8220B350h case    6:*/		return 0x8220B354;
		  /* 8220B354h */ case    7:  		/* li R3, 0 */
		/* 8220B354h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B354h case    7:*/		return 0x8220B358;
		  /* 8220B358h */ case    8:  		/* bl -735056 */
		/* 8220B358h case    8:*/		regs.LR = 0x8220B35C; return 0x82157C08;
		/* 8220B358h case    8:*/		return 0x8220B35C;
	}
	return 0x8220B35C;
} // Block from 8220B338h-8220B35Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B35C);
		  /* 8220B35Ch */ case    0:  		/* li R4, 28 */
		/* 8220B35Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8220B35Ch case    0:*/		return 0x8220B360;
		  /* 8220B360h */ case    1:  		/* mtspr CTR, R30 */
		/* 8220B360h case    1:*/		regs.CTR = regs.R30;
		/* 8220B360h case    1:*/		return 0x8220B364;
		  /* 8220B364h */ case    2:  		/* mr R3, R29 */
		/* 8220B364h case    2:*/		regs.R3 = regs.R29;
		/* 8220B364h case    2:*/		return 0x8220B368;
		  /* 8220B368h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220B368h case    3:*/		if ( 1 ) { regs.LR = 0x8220B36C; return (uint32)regs.CTR; }
		/* 8220B368h case    3:*/		return 0x8220B36C;
		  /* 8220B36Ch */ case    4:  		/* or. R31, R3, R3 */
		/* 8220B36Ch case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220B36Ch case    4:*/		return 0x8220B370;
		  /* 8220B370h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8220B370h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220B390;  }
		/* 8220B370h case    5:*/		return 0x8220B374;
		  /* 8220B374h */ case    6:  		/* lis R11, -32252 */
		/* 8220B374h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B374h case    6:*/		return 0x8220B378;
		  /* 8220B378h */ case    7:  		/* mr R6, R26 */
		/* 8220B378h case    7:*/		regs.R6 = regs.R26;
		/* 8220B378h case    7:*/		return 0x8220B37C;
		  /* 8220B37Ch */ case    8:  		/* addi R5, R11, -10636 */
		/* 8220B37Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD674);
		/* 8220B37Ch case    8:*/		return 0x8220B380;
		  /* 8220B380h */ case    9:  		/* mr R4, R27 */
		/* 8220B380h case    9:*/		regs.R4 = regs.R27;
		/* 8220B380h case    9:*/		return 0x8220B384;
		  /* 8220B384h */ case   10:  		/* li R7, 1159 */
		/* 8220B384h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x487);
		/* 8220B384h case   10:*/		return 0x8220B388;
		  /* 8220B388h */ case   11:  		/* li R3, 0 */
		/* 8220B388h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B388h case   11:*/		return 0x8220B38C;
		  /* 8220B38Ch */ case   12:  		/* bl -735108 */
		/* 8220B38Ch case   12:*/		regs.LR = 0x8220B390; return 0x82157C08;
		/* 8220B38Ch case   12:*/		return 0x8220B390;
	}
	return 0x8220B390;
} // Block from 8220B35Ch-8220B390h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220B390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B390);
		  /* 8220B390h */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 8220B390h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220B390h case    0:*/		return 0x8220B394;
		  /* 8220B394h */ case    1:  		/* li R4, 0 */
		/* 8220B394h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220B394h case    1:*/		return 0x8220B398;
		  /* 8220B398h */ case    2:  		/* stw R25, <#[R31 + 8]> */
		/* 8220B398h case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B398h case    2:*/		return 0x8220B39C;
		  /* 8220B39Ch */ case    3:  		/* mr R3, R28 */
		/* 8220B39Ch case    3:*/		regs.R3 = regs.R28;
		/* 8220B39Ch case    3:*/		return 0x8220B3A0;
		  /* 8220B3A0h */ case    4:  		/* stw R28, <#[R31 + 12]> */
		/* 8220B3A0h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220B3A0h case    4:*/		return 0x8220B3A4;
		  /* 8220B3A4h */ case    5:  		/* stw R29, <#[R31]> */
		/* 8220B3A4h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B3A4h case    5:*/		return 0x8220B3A8;
		  /* 8220B3A8h */ case    6:  		/* stw R24, <#[R31 + 16]> */
		/* 8220B3A8h case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000010) );
		/* 8220B3A8h case    6:*/		return 0x8220B3AC;
		  /* 8220B3ACh */ case    7:  		/* bl -4644 */
		/* 8220B3ACh case    7:*/		regs.LR = 0x8220B3B0; return 0x8220A188;
		/* 8220B3ACh case    7:*/		return 0x8220B3B0;
		  /* 8220B3B0h */ case    8:  		/* rlwinm. R11, R3, 0, 20, 29 */
		/* 8220B3B0h case    8:*/		cpu::op::rlwinm<1,0,20,29>(regs,&regs.R11,regs.R3);
		/* 8220B3B0h case    8:*/		return 0x8220B3B4;
		  /* 8220B3B4h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 8220B3B4h case    9:*/		if ( regs.CR[0].eq ) { return 0x8220B3CC;  }
		/* 8220B3B4h case    9:*/		return 0x8220B3B8;
		  /* 8220B3B8h */ case   10:  		/* lis R11, -32223 */
		/* 8220B3B8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8221);
		/* 8220B3B8h case   10:*/		return 0x8220B3BC;
		  /* 8220B3BCh */ case   11:  		/* lis R10, -32223 */
		/* 8220B3BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8221);
		/* 8220B3BCh case   11:*/		return 0x8220B3C0;
		  /* 8220B3C0h */ case   12:  		/* addi R11, R11, -21728 */
		/* 8220B3C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFAB20);
		/* 8220B3C0h case   12:*/		return 0x8220B3C4;
		  /* 8220B3C4h */ case   13:  		/* addi R10, R10, -20688 */
		/* 8220B3C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFAF30);
		/* 8220B3C4h case   13:*/		return 0x8220B3C8;
		  /* 8220B3C8h */ case   14:  		/* b 48 */
		/* 8220B3C8h case   14:*/		return 0x8220B3F8;
		/* 8220B3C8h case   14:*/		return 0x8220B3CC;
	}
	return 0x8220B3CC;
} // Block from 8220B390h-8220B3CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220B3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B3CC);
		  /* 8220B3CCh */ case    0:  		/* cmplwi CR6, R23, 1 */
		/* 8220B3CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000001);
		/* 8220B3CCh case    0:*/		return 0x8220B3D0;
		  /* 8220B3D0h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8220B3D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B3E8;  }
		/* 8220B3D0h case    1:*/		return 0x8220B3D4;
		  /* 8220B3D4h */ case    2:  		/* lis R11, -32223 */
		/* 8220B3D4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8221);
		/* 8220B3D4h case    2:*/		return 0x8220B3D8;
		  /* 8220B3D8h */ case    3:  		/* lis R10, -32223 */
		/* 8220B3D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8221);
		/* 8220B3D8h case    3:*/		return 0x8220B3DC;
		  /* 8220B3DCh */ case    4:  		/* addi R11, R11, -21736 */
		/* 8220B3DCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFAB18);
		/* 8220B3DCh case    4:*/		return 0x8220B3E0;
		  /* 8220B3E0h */ case    5:  		/* addi R10, R10, -21136 */
		/* 8220B3E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFAD70);
		/* 8220B3E0h case    5:*/		return 0x8220B3E4;
		  /* 8220B3E4h */ case    6:  		/* b 20 */
		/* 8220B3E4h case    6:*/		return 0x8220B3F8;
		/* 8220B3E4h case    6:*/		return 0x8220B3E8;
	}
	return 0x8220B3E8;
} // Block from 8220B3CCh-8220B3E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220B3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B3E8);
		  /* 8220B3E8h */ case    0:  		/* lis R11, -32223 */
		/* 8220B3E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8221);
		/* 8220B3E8h case    0:*/		return 0x8220B3EC;
		  /* 8220B3ECh */ case    1:  		/* lis R10, -32223 */
		/* 8220B3ECh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8221);
		/* 8220B3ECh case    1:*/		return 0x8220B3F0;
		  /* 8220B3F0h */ case    2:  		/* addi R11, R11, -21744 */
		/* 8220B3F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFAB10);
		/* 8220B3F0h case    2:*/		return 0x8220B3F4;
		  /* 8220B3F4h */ case    3:  		/* addi R10, R10, -21584 */
		/* 8220B3F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFABB0);
		/* 8220B3F4h case    3:*/		return 0x8220B3F8;
	}
	return 0x8220B3F8;
} // Block from 8220B3E8h-8220B3F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220B3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B3F8);
		  /* 8220B3F8h */ case    0:  		/* stw R11, <#[R31 + 24]> */
		/* 8220B3F8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B3F8h case    0:*/		return 0x8220B3FC;
		  /* 8220B3FCh */ case    1:  		/* mr R3, R31 */
		/* 8220B3FCh case    1:*/		regs.R3 = regs.R31;
		/* 8220B3FCh case    1:*/		return 0x8220B400;
		  /* 8220B400h */ case    2:  		/* stw R10, <#[R31 + 20]> */
		/* 8220B400h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8220B400h case    2:*/		return 0x8220B404;
		  /* 8220B404h */ case    3:  		/* addi R1, R1, 160 */
		/* 8220B404h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220B404h case    3:*/		return 0x8220B408;
		  /* 8220B408h */ case    4:  		/* b -1548660 */
		/* 8220B408h case    4:*/		return 0x82091294;
		/* 8220B408h case    4:*/		return 0x8220B40C;
		  /* 8220B40Ch */ case    5:  		/* nop */
		/* 8220B40Ch case    5:*/		cpu::op::nop();
		/* 8220B40Ch case    5:*/		return 0x8220B410;
	}
	return 0x8220B410;
} // Block from 8220B3F8h-8220B410h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220B410h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B410);
		  /* 8220B410h */ case    0:  		/* mfspr R12, LR */
		/* 8220B410h case    0:*/		regs.R12 = regs.LR;
		/* 8220B410h case    0:*/		return 0x8220B414;
		  /* 8220B414h */ case    1:  		/* bl -1548756 */
		/* 8220B414h case    1:*/		regs.LR = 0x8220B418; return 0x82091240;
		/* 8220B414h case    1:*/		return 0x8220B418;
		  /* 8220B418h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8220B418h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8220B418h case    2:*/		return 0x8220B41C;
		  /* 8220B41Ch */ case    3:  		/* mr R22, R10 */
		/* 8220B41Ch case    3:*/		regs.R22 = regs.R10;
		/* 8220B41Ch case    3:*/		return 0x8220B420;
		  /* 8220B420h */ case    4:  		/* lis R11, -32253 */
		/* 8220B420h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220B420h case    4:*/		return 0x8220B424;
		  /* 8220B424h */ case    5:  		/* lis R10, -32252 */
		/* 8220B424h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220B424h case    5:*/		return 0x8220B428;
		  /* 8220B428h */ case    6:  		/* mr R27, R3 */
		/* 8220B428h case    6:*/		regs.R27 = regs.R3;
		/* 8220B428h case    6:*/		return 0x8220B42C;
		  /* 8220B42Ch */ case    7:  		/* mr R30, R4 */
		/* 8220B42Ch case    7:*/		regs.R30 = regs.R4;
		/* 8220B42Ch case    7:*/		return 0x8220B430;
		  /* 8220B430h */ case    8:  		/* mr R26, R5 */
		/* 8220B430h case    8:*/		regs.R26 = regs.R5;
		/* 8220B430h case    8:*/		return 0x8220B434;
		  /* 8220B434h */ case    9:  		/* mr R25, R6 */
		/* 8220B434h case    9:*/		regs.R25 = regs.R6;
		/* 8220B434h case    9:*/		return 0x8220B438;
		  /* 8220B438h */ case   10:  		/* mr R24, R7 */
		/* 8220B438h case   10:*/		regs.R24 = regs.R7;
		/* 8220B438h case   10:*/		return 0x8220B43C;
		  /* 8220B43Ch */ case   11:  		/* mr R23, R8 */
		/* 8220B43Ch case   11:*/		regs.R23 = regs.R8;
		/* 8220B43Ch case   11:*/		return 0x8220B440;
		  /* 8220B440h */ case   12:  		/* mr R31, R9 */
		/* 8220B440h case   12:*/		regs.R31 = regs.R9;
		/* 8220B440h case   12:*/		return 0x8220B444;
		  /* 8220B444h */ case   13:  		/* cmplwi CR6, R4, 0 */
		/* 8220B444h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220B444h case   13:*/		return 0x8220B448;
		  /* 8220B448h */ case   14:  		/* addi R29, R11, 27460 */
		/* 8220B448h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220B448h case   14:*/		return 0x8220B44C;
		  /* 8220B44Ch */ case   15:  		/* addi R28, R10, -10576 */
		/* 8220B44Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFD6B0);
		/* 8220B44Ch case   15:*/		return 0x8220B450;
		  /* 8220B450h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B450h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8220B470;  }
		/* 8220B450h case   16:*/		return 0x8220B454;
		  /* 8220B454h */ case   17:  		/* lis R11, -32252 */
		/* 8220B454h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B454h case   17:*/		return 0x8220B458;
		  /* 8220B458h */ case   18:  		/* mr R6, R28 */
		/* 8220B458h case   18:*/		regs.R6 = regs.R28;
		/* 8220B458h case   18:*/		return 0x8220B45C;
		  /* 8220B45Ch */ case   19:  		/* addi R5, R11, -21620 */
		/* 8220B45Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220B45Ch case   19:*/		return 0x8220B460;
		  /* 8220B460h */ case   20:  		/* mr R4, R29 */
		/* 8220B460h case   20:*/		regs.R4 = regs.R29;
		/* 8220B460h case   20:*/		return 0x8220B464;
		  /* 8220B464h */ case   21:  		/* li R7, 127 */
		/* 8220B464h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x7F);
		/* 8220B464h case   21:*/		return 0x8220B468;
		  /* 8220B468h */ case   22:  		/* li R3, 0 */
		/* 8220B468h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B468h case   22:*/		return 0x8220B46C;
		  /* 8220B46Ch */ case   23:  		/* bl -735332 */
		/* 8220B46Ch case   23:*/		regs.LR = 0x8220B470; return 0x82157C08;
		/* 8220B46Ch case   23:*/		return 0x8220B470;
	}
	return 0x8220B470;
} // Block from 8220B410h-8220B470h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8220B470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B470);
		  /* 8220B470h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220B470h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220B470h case    0:*/		return 0x8220B474;
		  /* 8220B474h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B474h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B494;  }
		/* 8220B474h case    1:*/		return 0x8220B478;
		  /* 8220B478h */ case    2:  		/* lis R11, -32252 */
		/* 8220B478h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B478h case    2:*/		return 0x8220B47C;
		  /* 8220B47Ch */ case    3:  		/* mr R6, R28 */
		/* 8220B47Ch case    3:*/		regs.R6 = regs.R28;
		/* 8220B47Ch case    3:*/		return 0x8220B480;
		  /* 8220B480h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220B480h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220B480h case    4:*/		return 0x8220B484;
		  /* 8220B484h */ case    5:  		/* mr R4, R29 */
		/* 8220B484h case    5:*/		regs.R4 = regs.R29;
		/* 8220B484h case    5:*/		return 0x8220B488;
		  /* 8220B488h */ case    6:  		/* li R7, 128 */
		/* 8220B488h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x80);
		/* 8220B488h case    6:*/		return 0x8220B48C;
		  /* 8220B48Ch */ case    7:  		/* li R3, 0 */
		/* 8220B48Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B48Ch case    7:*/		return 0x8220B490;
		  /* 8220B490h */ case    8:  		/* bl -735368 */
		/* 8220B490h case    8:*/		regs.LR = 0x8220B494; return 0x82157C08;
		/* 8220B490h case    8:*/		return 0x8220B494;
	}
	return 0x8220B494;
} // Block from 8220B470h-8220B494h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B494);
		  /* 8220B494h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8220B494h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8220B494h case    0:*/		return 0x8220B498;
		  /* 8220B498h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B498h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B4B8;  }
		/* 8220B498h case    1:*/		return 0x8220B49C;
		  /* 8220B49Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220B49Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B49Ch case    2:*/		return 0x8220B4A0;
		  /* 8220B4A0h */ case    3:  		/* mr R6, R28 */
		/* 8220B4A0h case    3:*/		regs.R6 = regs.R28;
		/* 8220B4A0h case    3:*/		return 0x8220B4A4;
		  /* 8220B4A4h */ case    4:  		/* addi R5, R11, -10584 */
		/* 8220B4A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220B4A4h case    4:*/		return 0x8220B4A8;
		  /* 8220B4A8h */ case    5:  		/* mr R4, R29 */
		/* 8220B4A8h case    5:*/		regs.R4 = regs.R29;
		/* 8220B4A8h case    5:*/		return 0x8220B4AC;
		  /* 8220B4ACh */ case    6:  		/* li R7, 129 */
		/* 8220B4ACh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x81);
		/* 8220B4ACh case    6:*/		return 0x8220B4B0;
		  /* 8220B4B0h */ case    7:  		/* li R3, 0 */
		/* 8220B4B0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B4B0h case    7:*/		return 0x8220B4B4;
		  /* 8220B4B4h */ case    8:  		/* bl -735404 */
		/* 8220B4B4h case    8:*/		regs.LR = 0x8220B4B8; return 0x82157C08;
		/* 8220B4B4h case    8:*/		return 0x8220B4B8;
	}
	return 0x8220B4B8;
} // Block from 8220B494h-8220B4B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B4B8);
		  /* 8220B4B8h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8220B4B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220B4B8h case    0:*/		return 0x8220B4BC;
		  /* 8220B4BCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B4BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B4DC;  }
		/* 8220B4BCh case    1:*/		return 0x8220B4C0;
		  /* 8220B4C0h */ case    2:  		/* lis R11, -32252 */
		/* 8220B4C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B4C0h case    2:*/		return 0x8220B4C4;
		  /* 8220B4C4h */ case    3:  		/* mr R6, R28 */
		/* 8220B4C4h case    3:*/		regs.R6 = regs.R28;
		/* 8220B4C4h case    3:*/		return 0x8220B4C8;
		  /* 8220B4C8h */ case    4:  		/* addi R5, R11, -10596 */
		/* 8220B4C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD69C);
		/* 8220B4C8h case    4:*/		return 0x8220B4CC;
		  /* 8220B4CCh */ case    5:  		/* mr R4, R29 */
		/* 8220B4CCh case    5:*/		regs.R4 = regs.R29;
		/* 8220B4CCh case    5:*/		return 0x8220B4D0;
		  /* 8220B4D0h */ case    6:  		/* li R7, 135 */
		/* 8220B4D0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x87);
		/* 8220B4D0h case    6:*/		return 0x8220B4D4;
		  /* 8220B4D4h */ case    7:  		/* li R3, 0 */
		/* 8220B4D4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B4D4h case    7:*/		return 0x8220B4D8;
		  /* 8220B4D8h */ case    8:  		/* bl -735440 */
		/* 8220B4D8h case    8:*/		regs.LR = 0x8220B4DC; return 0x82157C08;
		/* 8220B4D8h case    8:*/		return 0x8220B4DC;
	}
	return 0x8220B4DC;
} // Block from 8220B4B8h-8220B4DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B4DC);
		  /* 8220B4DCh */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8220B4DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8220B4DCh case    0:*/		return 0x8220B4E0;
		  /* 8220B4E0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B4E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B500;  }
		/* 8220B4E0h case    1:*/		return 0x8220B4E4;
		  /* 8220B4E4h */ case    2:  		/* lis R11, -32252 */
		/* 8220B4E4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B4E4h case    2:*/		return 0x8220B4E8;
		  /* 8220B4E8h */ case    3:  		/* mr R6, R28 */
		/* 8220B4E8h case    3:*/		regs.R6 = regs.R28;
		/* 8220B4E8h case    3:*/		return 0x8220B4EC;
		  /* 8220B4ECh */ case    4:  		/* addi R5, R11, -18052 */
		/* 8220B4ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB97C);
		/* 8220B4ECh case    4:*/		return 0x8220B4F0;
		  /* 8220B4F0h */ case    5:  		/* mr R4, R29 */
		/* 8220B4F0h case    5:*/		regs.R4 = regs.R29;
		/* 8220B4F0h case    5:*/		return 0x8220B4F4;
		  /* 8220B4F4h */ case    6:  		/* li R7, 136 */
		/* 8220B4F4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x88);
		/* 8220B4F4h case    6:*/		return 0x8220B4F8;
		  /* 8220B4F8h */ case    7:  		/* li R3, 0 */
		/* 8220B4F8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B4F8h case    7:*/		return 0x8220B4FC;
		  /* 8220B4FCh */ case    8:  		/* bl -735476 */
		/* 8220B4FCh case    8:*/		regs.LR = 0x8220B500; return 0x82157C08;
		/* 8220B4FCh case    8:*/		return 0x8220B500;
	}
	return 0x8220B500;
} // Block from 8220B4DCh-8220B500h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B500);
		  /* 8220B500h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8220B500h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8220B500h case    0:*/		return 0x8220B504;
		  /* 8220B504h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B504h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B524;  }
		/* 8220B504h case    1:*/		return 0x8220B508;
		  /* 8220B508h */ case    2:  		/* lis R11, -32252 */
		/* 8220B508h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B508h case    2:*/		return 0x8220B50C;
		  /* 8220B50Ch */ case    3:  		/* mr R6, R28 */
		/* 8220B50Ch case    3:*/		regs.R6 = regs.R28;
		/* 8220B50Ch case    3:*/		return 0x8220B510;
		  /* 8220B510h */ case    4:  		/* addi R5, R11, -10720 */
		/* 8220B510h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD620);
		/* 8220B510h case    4:*/		return 0x8220B514;
		  /* 8220B514h */ case    5:  		/* mr R4, R29 */
		/* 8220B514h case    5:*/		regs.R4 = regs.R29;
		/* 8220B514h case    5:*/		return 0x8220B518;
		  /* 8220B518h */ case    6:  		/* li R7, 137 */
		/* 8220B518h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x89);
		/* 8220B518h case    6:*/		return 0x8220B51C;
		  /* 8220B51Ch */ case    7:  		/* li R3, 0 */
		/* 8220B51Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B51Ch case    7:*/		return 0x8220B520;
		  /* 8220B520h */ case    8:  		/* bl -735512 */
		/* 8220B520h case    8:*/		regs.LR = 0x8220B524; return 0x82157C08;
		/* 8220B520h case    8:*/		return 0x8220B524;
	}
	return 0x8220B524;
} // Block from 8220B500h-8220B524h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B524);
		  /* 8220B524h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220B524h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220B524h case    0:*/		return 0x8220B528;
		  /* 8220B528h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B528h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B548;  }
		/* 8220B528h case    1:*/		return 0x8220B52C;
		  /* 8220B52Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220B52Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B52Ch case    2:*/		return 0x8220B530;
		  /* 8220B530h */ case    3:  		/* mr R6, R28 */
		/* 8220B530h case    3:*/		regs.R6 = regs.R28;
		/* 8220B530h case    3:*/		return 0x8220B534;
		  /* 8220B534h */ case    4:  		/* addi R5, R11, -10604 */
		/* 8220B534h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD694);
		/* 8220B534h case    4:*/		return 0x8220B538;
		  /* 8220B538h */ case    5:  		/* mr R4, R29 */
		/* 8220B538h case    5:*/		regs.R4 = regs.R29;
		/* 8220B538h case    5:*/		return 0x8220B53C;
		  /* 8220B53Ch */ case    6:  		/* li R7, 138 */
		/* 8220B53Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x8A);
		/* 8220B53Ch case    6:*/		return 0x8220B540;
		  /* 8220B540h */ case    7:  		/* li R3, 0 */
		/* 8220B540h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B540h case    7:*/		return 0x8220B544;
		  /* 8220B544h */ case    8:  		/* bl -735548 */
		/* 8220B544h case    8:*/		regs.LR = 0x8220B548; return 0x82157C08;
		/* 8220B544h case    8:*/		return 0x8220B548;
	}
	return 0x8220B548;
} // Block from 8220B524h-8220B548h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B548);
		  /* 8220B548h */ case    0:  		/* li R4, 28 */
		/* 8220B548h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8220B548h case    0:*/		return 0x8220B54C;
		  /* 8220B54Ch */ case    1:  		/* mtspr CTR, R30 */
		/* 8220B54Ch case    1:*/		regs.CTR = regs.R30;
		/* 8220B54Ch case    1:*/		return 0x8220B550;
		  /* 8220B550h */ case    2:  		/* mr R3, R27 */
		/* 8220B550h case    2:*/		regs.R3 = regs.R27;
		/* 8220B550h case    2:*/		return 0x8220B554;
		  /* 8220B554h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220B554h case    3:*/		if ( 1 ) { regs.LR = 0x8220B558; return (uint32)regs.CTR; }
		/* 8220B554h case    3:*/		return 0x8220B558;
		  /* 8220B558h */ case    4:  		/* or. R31, R3, R3 */
		/* 8220B558h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220B558h case    4:*/		return 0x8220B55C;
		  /* 8220B55Ch */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8220B55Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220B57C;  }
		/* 8220B55Ch case    5:*/		return 0x8220B560;
	}
	return 0x8220B560;
} // Block from 8220B548h-8220B560h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220B560h
// Function '?GetMaxStateSizeInd@XGRAPHICS@@YAIPAU_PS_PROGRAM_KEY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B560);
		  /* 8220B560h */ case    0:  		/* lis R11, -32252 */
		/* 8220B560h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B560h case    0:*/		return 0x8220B564;
		  /* 8220B564h */ case    1:  		/* mr R6, R28 */
		/* 8220B564h case    1:*/		regs.R6 = regs.R28;
		/* 8220B564h case    1:*/		return 0x8220B568;
	}
	return 0x8220B568;
} // Block from 8220B560h-8220B568h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220B568h
// Function '?GetMaxStateSizeIndRts@XGRAPHICS@@YAIPAU_PS_PROGRAM_KEY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B568);
		  /* 8220B568h */ case    0:  		/* addi R5, R11, -10620 */
		/* 8220B568h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD684);
		/* 8220B568h case    0:*/		return 0x8220B56C;
		  /* 8220B56Ch */ case    1:  		/* mr R4, R29 */
		/* 8220B56Ch case    1:*/		regs.R4 = regs.R29;
		/* 8220B56Ch case    1:*/		return 0x8220B570;
	}
	return 0x8220B570;
} // Block from 8220B568h-8220B570h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220B570h
// Function '?GetMaxStateSizeImm@XGRAPHICS@@YAIPAU_PS_PROGRAM_KEY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B570);
		  /* 8220B570h */ case    0:  		/* li R7, 145 */
		/* 8220B570h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x91);
		/* 8220B570h case    0:*/		return 0x8220B574;
		  /* 8220B574h */ case    1:  		/* li R3, 0 */
		/* 8220B574h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B574h case    1:*/		return 0x8220B578;
		  /* 8220B578h */ case    2:  		/* bl -735600 */
		/* 8220B578h case    2:*/		regs.LR = 0x8220B57C; return 0x82157C08;
		/* 8220B578h case    2:*/		return 0x8220B57C;
	}
	return 0x8220B57C;
} // Block from 8220B570h-8220B57Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220B57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B57C);
		  /* 8220B57Ch */ case    0:  		/* stw R27, <#[R31]> */
		/* 8220B57Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B57Ch case    0:*/		return 0x8220B580;
		  /* 8220B580h */ case    1:  		/* li R7, 100 */
		/* 8220B580h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 8220B580h case    1:*/		return 0x8220B584;
		  /* 8220B584h */ case    2:  		/* stw R30, <#[R31 + 4]> */
		/* 8220B584h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220B584h case    2:*/		return 0x8220B588;
		  /* 8220B588h */ case    3:  		/* mr R6, R22 */
		/* 8220B588h case    3:*/		regs.R6 = regs.R22;
		/* 8220B588h case    3:*/		return 0x8220B58C;
		  /* 8220B58Ch */ case    4:  		/* stw R26, <#[R31 + 8]> */
		/* 8220B58Ch case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B58Ch case    4:*/		return 0x8220B590;
		  /* 8220B590h */ case    5:  		/* mr R5, R26 */
		/* 8220B590h case    5:*/		regs.R5 = regs.R26;
		/* 8220B590h case    5:*/		return 0x8220B594;
		  /* 8220B594h */ case    6:  		/* stw R25, <#[R31 + 12]> */
		/* 8220B594h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220B594h case    6:*/		return 0x8220B598;
		  /* 8220B598h */ case    7:  		/* mr R4, R30 */
		/* 8220B598h case    7:*/		regs.R4 = regs.R30;
		/* 8220B598h case    7:*/		return 0x8220B59C;
		  /* 8220B59Ch */ case    8:  		/* stw R24, <#[R31 + 16]> */
		/* 8220B59Ch case    8:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000010) );
		/* 8220B59Ch case    8:*/		return 0x8220B5A0;
		  /* 8220B5A0h */ case    9:  		/* mr R3, R27 */
		/* 8220B5A0h case    9:*/		regs.R3 = regs.R27;
		/* 8220B5A0h case    9:*/		return 0x8220B5A4;
		  /* 8220B5A4h */ case   10:  		/* stw R23, <#[R31 + 20]> */
		/* 8220B5A4h case   10:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000014) );
		/* 8220B5A4h case   10:*/		return 0x8220B5A8;
		  /* 8220B5A8h */ case   11:  		/* bl 14304 */
		/* 8220B5A8h case   11:*/		regs.LR = 0x8220B5AC; return 0x8220ED88;
		/* 8220B5A8h case   11:*/		return 0x8220B5AC;
		  /* 8220B5ACh */ case   12:  		/* stw R3, <#[R31 + 24]> */
		/* 8220B5ACh case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B5ACh case   12:*/		return 0x8220B5B0;
		  /* 8220B5B0h */ case   13:  		/* mr R3, R31 */
		/* 8220B5B0h case   13:*/		regs.R3 = regs.R31;
		/* 8220B5B0h case   13:*/		return 0x8220B5B4;
		  /* 8220B5B4h */ case   14:  		/* addi R1, R1, 176 */
		/* 8220B5B4h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8220B5B4h case   14:*/		return 0x8220B5B8;
		  /* 8220B5B8h */ case   15:  		/* b -1549096 */
		/* 8220B5B8h case   15:*/		return 0x82091290;
		/* 8220B5B8h case   15:*/		return 0x8220B5BC;
		  /* 8220B5BCh */ case   16:  		/* nop */
		/* 8220B5BCh case   16:*/		cpu::op::nop();
		/* 8220B5BCh case   16:*/		return 0x8220B5C0;
	}
	return 0x8220B5C0;
} // Block from 8220B57Ch-8220B5C0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220B5C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B5C0);
		  /* 8220B5C0h */ case    0:  		/* mfspr R12, LR */
		/* 8220B5C0h case    0:*/		regs.R12 = regs.LR;
		/* 8220B5C0h case    0:*/		return 0x8220B5C4;
		  /* 8220B5C4h */ case    1:  		/* bl -1549168 */
		/* 8220B5C4h case    1:*/		regs.LR = 0x8220B5C8; return 0x82091254;
		/* 8220B5C4h case    1:*/		return 0x8220B5C8;
	}
	return 0x8220B5C8;
} // Block from 8220B5C0h-8220B5C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220B5C8h
// Function '?ProcCmdBufStateInd@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PP_STATE_POSTPROCESSOR@1@PAU_PS_PROGRAM_KEY@1@PAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B5C8);
		  /* 8220B5C8h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220B5C8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220B5C8h case    0:*/		return 0x8220B5CC;
		  /* 8220B5CCh */ case    1:  		/* lis R10, -32253 */
		/* 8220B5CCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220B5CCh case    1:*/		return 0x8220B5D0;
		  /* 8220B5D0h */ case    2:  		/* lis R11, -32252 */
		/* 8220B5D0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B5D0h case    2:*/		return 0x8220B5D4;
		  /* 8220B5D4h */ case    3:  		/* mr R31, R3 */
		/* 8220B5D4h case    3:*/		regs.R31 = regs.R3;
		/* 8220B5D4h case    3:*/		return 0x8220B5D8;
		  /* 8220B5D8h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8220B5D8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220B5D8h case    4:*/		return 0x8220B5DC;
		  /* 8220B5DCh */ case    5:  		/* addi R29, R10, 27460 */
		/* 8220B5DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x6B44);
		/* 8220B5DCh case    5:*/		return 0x8220B5E0;
		  /* 8220B5E0h */ case    6:  		/* addi R28, R11, -10576 */
		/* 8220B5E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFD6B0);
		/* 8220B5E0h case    6:*/		return 0x8220B5E4;
		  /* 8220B5E4h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B5E4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8220B604;  }
		/* 8220B5E4h case    7:*/		return 0x8220B5E8;
		  /* 8220B5E8h */ case    8:  		/* lis R11, -32252 */
		/* 8220B5E8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B5E8h case    8:*/		return 0x8220B5EC;
		  /* 8220B5ECh */ case    9:  		/* mr R6, R28 */
		/* 8220B5ECh case    9:*/		regs.R6 = regs.R28;
		/* 8220B5ECh case    9:*/		return 0x8220B5F0;
		  /* 8220B5F0h */ case   10:  		/* addi R5, R11, -12620 */
		/* 8220B5F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCEB4);
		/* 8220B5F0h case   10:*/		return 0x8220B5F4;
		  /* 8220B5F4h */ case   11:  		/* mr R4, R29 */
		/* 8220B5F4h case   11:*/		regs.R4 = regs.R29;
		/* 8220B5F4h case   11:*/		return 0x8220B5F8;
		  /* 8220B5F8h */ case   12:  		/* li R7, 191 */
		/* 8220B5F8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0xBF);
		/* 8220B5F8h case   12:*/		return 0x8220B5FC;
		  /* 8220B5FCh */ case   13:  		/* li R3, 0 */
		/* 8220B5FCh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B5FCh case   13:*/		return 0x8220B600;
		  /* 8220B600h */ case   14:  		/* bl -735736 */
		/* 8220B600h case   14:*/		regs.LR = 0x8220B604; return 0x82157C08;
		/* 8220B600h case   14:*/		return 0x8220B604;
	}
	return 0x8220B604;
} // Block from 8220B5C8h-8220B604h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220B604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B604);
		  /* 8220B604h */ case    0:  		/* lwz R3, <#[R31 + 24]> */
		/* 8220B604h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B604h case    0:*/		return 0x8220B608;
		  /* 8220B608h */ case    1:  		/* bl 15264 */
		/* 8220B608h case    1:*/		regs.LR = 0x8220B60C; return 0x8220F1A8;
		/* 8220B608h case    1:*/		return 0x8220B60C;
		  /* 8220B60Ch */ case    2:  		/* or. R30, R3, R3 */
		/* 8220B60Ch case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220B60Ch case    2:*/		return 0x8220B610;
		  /* 8220B610h */ case    3:  		/* bc 12, CR0_EQ, 72 */
		/* 8220B610h case    3:*/		if ( regs.CR[0].eq ) { return 0x8220B658;  }
		/* 8220B610h case    3:*/		return 0x8220B614;
		  /* 8220B614h */ case    4:  		/* lis R11, -32252 */
		/* 8220B614h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B614h case    4:*/		return 0x8220B618;
		  /* 8220B618h */ case    5:  		/* addi R27, R11, -10472 */
		/* 8220B618h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFD718);
		/* 8220B618h case    5:*/		return 0x8220B61C;
		  /* 8220B61Ch */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 8220B61Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220B61Ch case    6:*/		return 0x8220B620;
		  /* 8220B620h */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8220B620h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8220B63C;  }
		/* 8220B620h case    7:*/		return 0x8220B624;
		  /* 8220B624h */ case    8:  		/* mr R6, R28 */
		/* 8220B624h case    8:*/		regs.R6 = regs.R28;
		/* 8220B624h case    8:*/		return 0x8220B628;
		  /* 8220B628h */ case    9:  		/* mr R5, R27 */
		/* 8220B628h case    9:*/		regs.R5 = regs.R27;
		/* 8220B628h case    9:*/		return 0x8220B62C;
		  /* 8220B62Ch */ case   10:  		/* mr R4, R29 */
		/* 8220B62Ch case   10:*/		regs.R4 = regs.R29;
		/* 8220B62Ch case   10:*/		return 0x8220B630;
		  /* 8220B630h */ case   11:  		/* li R7, 196 */
		/* 8220B630h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0xC4);
		/* 8220B630h case   11:*/		return 0x8220B634;
		  /* 8220B634h */ case   12:  		/* li R3, 0 */
		/* 8220B634h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B634h case   12:*/		return 0x8220B638;
		  /* 8220B638h */ case   13:  		/* bl -735792 */
		/* 8220B638h case   13:*/		regs.LR = 0x8220B63C; return 0x82157C08;
		/* 8220B638h case   13:*/		return 0x8220B63C;
	}
	return 0x8220B63C;
} // Block from 8220B604h-8220B63Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220B63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B63C);
		  /* 8220B63Ch */ case    0:  		/* mr R4, R30 */
		/* 8220B63Ch case    0:*/		regs.R4 = regs.R30;
		/* 8220B63Ch case    0:*/		return 0x8220B640;
		  /* 8220B640h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220B640h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220B640h case    1:*/		return 0x8220B644;
		  /* 8220B644h */ case    2:  		/* bl 10348 */
		/* 8220B644h case    2:*/		regs.LR = 0x8220B648; return 0x8220DEB0;
		/* 8220B644h case    2:*/		return 0x8220B648;
		  /* 8220B648h */ case    3:  		/* lwz R3, <#[R31 + 24]> */
		/* 8220B648h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B648h case    3:*/		return 0x8220B64C;
		  /* 8220B64Ch */ case    4:  		/* bl 15196 */
		/* 8220B64Ch case    4:*/		regs.LR = 0x8220B650; return 0x8220F1A8;
		/* 8220B64Ch case    4:*/		return 0x8220B650;
		  /* 8220B650h */ case    5:  		/* or. R30, R3, R3 */
		/* 8220B650h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220B650h case    5:*/		return 0x8220B654;
		  /* 8220B654h */ case    6:  		/* bc 4, CR0_EQ, -56 */
		/* 8220B654h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8220B61C;  }
		/* 8220B654h case    6:*/		return 0x8220B658;
	}
	return 0x8220B658;
} // Block from 8220B63Ch-8220B658h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220B658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B658);
		  /* 8220B658h */ case    0:  		/* lwz R3, <#[R31 + 24]> */
		/* 8220B658h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B658h case    0:*/		return 0x8220B65C;
		  /* 8220B65Ch */ case    1:  		/* bl 14396 */
		/* 8220B65Ch case    1:*/		regs.LR = 0x8220B660; return 0x8220EE98;
		/* 8220B65Ch case    1:*/		return 0x8220B660;
		  /* 8220B660h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220B660h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B660h case    2:*/		return 0x8220B664;
		  /* 8220B664h */ case    3:  		/* mr R4, R31 */
		/* 8220B664h case    3:*/		regs.R4 = regs.R31;
		/* 8220B664h case    3:*/		return 0x8220B668;
		  /* 8220B668h */ case    4:  		/* lwz R3, <#[R31]> */
		/* 8220B668h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B668h case    4:*/		return 0x8220B66C;
		  /* 8220B66Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8220B66Ch case    5:*/		regs.CTR = regs.R11;
		/* 8220B66Ch case    5:*/		return 0x8220B670;
		  /* 8220B670h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8220B670h case    6:*/		if ( 1 ) { regs.LR = 0x8220B674; return (uint32)regs.CTR; }
		/* 8220B670h case    6:*/		return 0x8220B674;
		  /* 8220B674h */ case    7:  		/* li R3, 0 */
		/* 8220B674h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B674h case    7:*/		return 0x8220B678;
		  /* 8220B678h */ case    8:  		/* addi R1, R1, 128 */
		/* 8220B678h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220B678h case    8:*/		return 0x8220B67C;
		  /* 8220B67Ch */ case    9:  		/* b -1549272 */
		/* 8220B67Ch case    9:*/		return 0x820912A4;
		/* 8220B67Ch case    9:*/		return 0x8220B680;
	}
	return 0x8220B680;
} // Block from 8220B658h-8220B680h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220B680h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B680);
		  /* 8220B680h */ case    0:  		/* mfspr R12, LR */
		/* 8220B680h case    0:*/		regs.R12 = regs.LR;
		/* 8220B680h case    0:*/		return 0x8220B684;
		  /* 8220B684h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220B684h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220B684h case    1:*/		return 0x8220B688;
		  /* 8220B688h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220B688h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220B688h case    2:*/		return 0x8220B68C;
		  /* 8220B68Ch */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 8220B68Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220B68Ch case    3:*/		return 0x8220B690;
		  /* 8220B690h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 8220B690h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220B6B4;  }
		/* 8220B690h case    4:*/		return 0x8220B694;
		  /* 8220B694h */ case    5:  		/* lis R11, -32252 */
		/* 8220B694h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B694h case    5:*/		return 0x8220B698;
		  /* 8220B698h */ case    6:  		/* lis R10, -32252 */
		/* 8220B698h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220B698h case    6:*/		return 0x8220B69C;
		  /* 8220B69Ch */ case    7:  		/* lis R9, -32253 */
		/* 8220B69Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220B69Ch case    7:*/		return 0x8220B6A0;
		  /* 8220B6A0h */ case    8:  		/* addi R6, R11, -10576 */
		/* 8220B6A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD6B0);
		/* 8220B6A0h case    8:*/		return 0x8220B6A4;
		  /* 8220B6A4h */ case    9:  		/* addi R5, R10, -12620 */
		/* 8220B6A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFCEB4);
		/* 8220B6A4h case    9:*/		return 0x8220B6A8;
		  /* 8220B6A8h */ case   10:  		/* addi R4, R9, 27460 */
		/* 8220B6A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220B6A8h case   10:*/		return 0x8220B6AC;
		  /* 8220B6ACh */ case   11:  		/* li R7, 412 */
		/* 8220B6ACh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x19C);
		/* 8220B6ACh case   11:*/		return 0x8220B6B0;
		  /* 8220B6B0h */ case   12:  		/* bl -735912 */
		/* 8220B6B0h case   12:*/		regs.LR = 0x8220B6B4; return 0x82157C08;
		/* 8220B6B0h case   12:*/		return 0x8220B6B4;
	}
	return 0x8220B6B4;
} // Block from 8220B680h-8220B6B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220B6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B6B4);
		  /* 8220B6B4h */ case    0:  		/* li R3, 0 */
		/* 8220B6B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B6B4h case    0:*/		return 0x8220B6B8;
		  /* 8220B6B8h */ case    1:  		/* addi R1, R1, 96 */
		/* 8220B6B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220B6B8h case    1:*/		return 0x8220B6BC;
		  /* 8220B6BCh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220B6BCh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220B6BCh case    2:*/		return 0x8220B6C0;
		  /* 8220B6C0h */ case    3:  		/* mtspr LR, R12 */
		/* 8220B6C0h case    3:*/		regs.LR = regs.R12;
		/* 8220B6C0h case    3:*/		return 0x8220B6C4;
		  /* 8220B6C4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8220B6C4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220B6C4h case    4:*/		return 0x8220B6C8;
	}
	return 0x8220B6C8;
} // Block from 8220B6B4h-8220B6C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220B6C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B6C8);
		  /* 8220B6C8h */ case    0:  		/* mfspr R12, LR */
		/* 8220B6C8h case    0:*/		regs.R12 = regs.LR;
		/* 8220B6C8h case    0:*/		return 0x8220B6CC;
		  /* 8220B6CCh */ case    1:  		/* bl -1549424 */
		/* 8220B6CCh case    1:*/		regs.LR = 0x8220B6D0; return 0x8209125C;
		/* 8220B6CCh case    1:*/		return 0x8220B6D0;
		  /* 8220B6D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220B6D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220B6D0h case    2:*/		return 0x8220B6D4;
		  /* 8220B6D4h */ case    3:  		/* lis R11, -32253 */
		/* 8220B6D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220B6D4h case    3:*/		return 0x8220B6D8;
		  /* 8220B6D8h */ case    4:  		/* lis R10, -32252 */
		/* 8220B6D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220B6D8h case    4:*/		return 0x8220B6DC;
		  /* 8220B6DCh */ case    5:  		/* mr R29, R4 */
		/* 8220B6DCh case    5:*/		regs.R29 = regs.R4;
		/* 8220B6DCh case    5:*/		return 0x8220B6E0;
		  /* 8220B6E0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220B6E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220B6E0h case    6:*/		return 0x8220B6E4;
		  /* 8220B6E4h */ case    7:  		/* addi R31, R11, 27460 */
		/* 8220B6E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8220B6E4h case    7:*/		return 0x8220B6E8;
		  /* 8220B6E8h */ case    8:  		/* addi R30, R10, -10576 */
		/* 8220B6E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFD6B0);
		/* 8220B6E8h case    8:*/		return 0x8220B6EC;
		  /* 8220B6ECh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B6ECh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220B70C;  }
		/* 8220B6ECh case    9:*/		return 0x8220B6F0;
		  /* 8220B6F0h */ case   10:  		/* lis R11, -32252 */
		/* 8220B6F0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B6F0h case   10:*/		return 0x8220B6F4;
		  /* 8220B6F4h */ case   11:  		/* mr R6, R30 */
		/* 8220B6F4h case   11:*/		regs.R6 = regs.R30;
		/* 8220B6F4h case   11:*/		return 0x8220B6F8;
		  /* 8220B6F8h */ case   12:  		/* addi R5, R11, -12620 */
		/* 8220B6F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCEB4);
		/* 8220B6F8h case   12:*/		return 0x8220B6FC;
		  /* 8220B6FCh */ case   13:  		/* mr R4, R31 */
		/* 8220B6FCh case   13:*/		regs.R4 = regs.R31;
		/* 8220B6FCh case   13:*/		return 0x8220B700;
		  /* 8220B700h */ case   14:  		/* li R7, 447 */
		/* 8220B700h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1BF);
		/* 8220B700h case   14:*/		return 0x8220B704;
		  /* 8220B704h */ case   15:  		/* li R3, 0 */
		/* 8220B704h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B704h case   15:*/		return 0x8220B708;
		  /* 8220B708h */ case   16:  		/* bl -736000 */
		/* 8220B708h case   16:*/		regs.LR = 0x8220B70C; return 0x82157C08;
		/* 8220B708h case   16:*/		return 0x8220B70C;
	}
	return 0x8220B70C;
} // Block from 8220B6C8h-8220B70Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220B70Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B70C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B70C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B70C);
		  /* 8220B70Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8220B70Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220B70Ch case    0:*/		return 0x8220B710;
		  /* 8220B710h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220B710h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220B730;  }
		/* 8220B710h case    1:*/		return 0x8220B714;
		  /* 8220B714h */ case    2:  		/* lis R11, -32252 */
		/* 8220B714h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B714h case    2:*/		return 0x8220B718;
		  /* 8220B718h */ case    3:  		/* mr R6, R30 */
		/* 8220B718h case    3:*/		regs.R6 = regs.R30;
		/* 8220B718h case    3:*/		return 0x8220B71C;
		  /* 8220B71Ch */ case    4:  		/* addi R5, R11, -10460 */
		/* 8220B71Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD724);
		/* 8220B71Ch case    4:*/		return 0x8220B720;
		  /* 8220B720h */ case    5:  		/* mr R4, R31 */
		/* 8220B720h case    5:*/		regs.R4 = regs.R31;
		/* 8220B720h case    5:*/		return 0x8220B724;
		  /* 8220B724h */ case    6:  		/* li R7, 448 */
		/* 8220B724h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1C0);
		/* 8220B724h case    6:*/		return 0x8220B728;
		  /* 8220B728h */ case    7:  		/* li R3, 0 */
		/* 8220B728h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B728h case    7:*/		return 0x8220B72C;
		  /* 8220B72Ch */ case    8:  		/* bl -736036 */
		/* 8220B72Ch case    8:*/		regs.LR = 0x8220B730; return 0x82157C08;
		/* 8220B72Ch case    8:*/		return 0x8220B730;
	}
	return 0x8220B730;
} // Block from 8220B70Ch-8220B730h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B730);
		  /* 8220B730h */ case    0:  		/* li R3, 0 */
		/* 8220B730h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B730h case    0:*/		return 0x8220B734;
		  /* 8220B734h */ case    1:  		/* addi R1, R1, 112 */
		/* 8220B734h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220B734h case    1:*/		return 0x8220B738;
		  /* 8220B738h */ case    2:  		/* b -1549452 */
		/* 8220B738h case    2:*/		return 0x820912AC;
		/* 8220B738h case    2:*/		return 0x8220B73C;
		  /* 8220B73Ch */ case    3:  		/* nop */
		/* 8220B73Ch case    3:*/		cpu::op::nop();
		/* 8220B73Ch case    3:*/		return 0x8220B740;
	}
	return 0x8220B740;
} // Block from 8220B730h-8220B740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220B740h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B740);
		  /* 8220B740h */ case    0:  		/* mfspr R12, LR */
		/* 8220B740h case    0:*/		regs.R12 = regs.LR;
		/* 8220B740h case    0:*/		return 0x8220B744;
		  /* 8220B744h */ case    1:  		/* bl -1549548 */
		/* 8220B744h case    1:*/		regs.LR = 0x8220B748; return 0x82091258;
		/* 8220B744h case    1:*/		return 0x8220B748;
		  /* 8220B748h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220B748h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220B748h case    2:*/		return 0x8220B74C;
		  /* 8220B74Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220B74Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220B74Ch case    3:*/		return 0x8220B750;
		  /* 8220B750h */ case    4:  		/* lis R10, -32252 */
		/* 8220B750h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220B750h case    4:*/		return 0x8220B754;
		  /* 8220B754h */ case    5:  		/* mr R29, R3 */
		/* 8220B754h case    5:*/		regs.R29 = regs.R3;
		/* 8220B754h case    5:*/		return 0x8220B758;
		  /* 8220B758h */ case    6:  		/* mr R28, R4 */
		/* 8220B758h case    6:*/		regs.R28 = regs.R4;
		/* 8220B758h case    6:*/		return 0x8220B75C;
		  /* 8220B75Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220B75Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220B75Ch case    7:*/		return 0x8220B760;
		  /* 8220B760h */ case    8:  		/* addi R31, R11, 27460 */
		/* 8220B760h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8220B760h case    8:*/		return 0x8220B764;
		  /* 8220B764h */ case    9:  		/* addi R30, R10, -10576 */
		/* 8220B764h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFD6B0);
		/* 8220B764h case    9:*/		return 0x8220B768;
		  /* 8220B768h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B768h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220B788;  }
		/* 8220B768h case   10:*/		return 0x8220B76C;
		  /* 8220B76Ch */ case   11:  		/* lis R11, -32252 */
		/* 8220B76Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B76Ch case   11:*/		return 0x8220B770;
		  /* 8220B770h */ case   12:  		/* mr R6, R30 */
		/* 8220B770h case   12:*/		regs.R6 = regs.R30;
		/* 8220B770h case   12:*/		return 0x8220B774;
		  /* 8220B774h */ case   13:  		/* addi R5, R11, -12620 */
		/* 8220B774h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCEB4);
		/* 8220B774h case   13:*/		return 0x8220B778;
		  /* 8220B778h */ case   14:  		/* mr R4, R31 */
		/* 8220B778h case   14:*/		regs.R4 = regs.R31;
		/* 8220B778h case   14:*/		return 0x8220B77C;
		  /* 8220B77Ch */ case   15:  		/* li R7, 482 */
		/* 8220B77Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1E2);
		/* 8220B77Ch case   15:*/		return 0x8220B780;
		  /* 8220B780h */ case   16:  		/* li R3, 0 */
		/* 8220B780h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B780h case   16:*/		return 0x8220B784;
		  /* 8220B784h */ case   17:  		/* bl -736124 */
		/* 8220B784h case   17:*/		regs.LR = 0x8220B788; return 0x82157C08;
		/* 8220B784h case   17:*/		return 0x8220B788;
	}
	return 0x8220B788;
} // Block from 8220B740h-8220B788h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220B788h
// Function '?ProcCmdBufStateIndRts@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PP_STATE_POSTPROCESSOR@1@PAU_PS_PROGRAM_KEY@1@PAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B788);
		  /* 8220B788h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220B788h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220B788h case    0:*/		return 0x8220B78C;
		  /* 8220B78Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220B78Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B7AC;  }
		/* 8220B78Ch case    1:*/		return 0x8220B790;
		  /* 8220B790h */ case    2:  		/* lis R11, -32252 */
		/* 8220B790h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B790h case    2:*/		return 0x8220B794;
		  /* 8220B794h */ case    3:  		/* mr R6, R30 */
		/* 8220B794h case    3:*/		regs.R6 = regs.R30;
		/* 8220B794h case    3:*/		return 0x8220B798;
		  /* 8220B798h */ case    4:  		/* addi R5, R11, -22012 */
		/* 8220B798h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8220B798h case    4:*/		return 0x8220B79C;
		  /* 8220B79Ch */ case    5:  		/* mr R4, R31 */
		/* 8220B79Ch case    5:*/		regs.R4 = regs.R31;
		/* 8220B79Ch case    5:*/		return 0x8220B7A0;
		  /* 8220B7A0h */ case    6:  		/* li R7, 483 */
		/* 8220B7A0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1E3);
		/* 8220B7A0h case    6:*/		return 0x8220B7A4;
		  /* 8220B7A4h */ case    7:  		/* li R3, 0 */
		/* 8220B7A4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B7A4h case    7:*/		return 0x8220B7A8;
		  /* 8220B7A8h */ case    8:  		/* bl -736160 */
		/* 8220B7A8h case    8:*/		regs.LR = 0x8220B7AC; return 0x82157C08;
		/* 8220B7A8h case    8:*/		return 0x8220B7AC;
	}
	return 0x8220B7AC;
} // Block from 8220B788h-8220B7ACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B7AC);
		  /* 8220B7ACh */ case    0:  		/* lwz R4, <#[R28 + 280]> */
		/* 8220B7ACh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000118) );
		/* 8220B7ACh case    0:*/		return 0x8220B7B0;
		  /* 8220B7B0h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8220B7B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220B7B0h case    1:*/		return 0x8220B7B4;
		  /* 8220B7B4h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8220B7B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220B7C0;  }
		/* 8220B7B4h case    2:*/		return 0x8220B7B8;
		  /* 8220B7B8h */ case    3:  		/* lwz R3, <#[R29 + 16]> */
		/* 8220B7B8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8220B7B8h case    3:*/		return 0x8220B7BC;
		  /* 8220B7BCh */ case    4:  		/* bl 9972 */
		/* 8220B7BCh case    4:*/		regs.LR = 0x8220B7C0; return 0x8220DEB0;
		/* 8220B7BCh case    4:*/		return 0x8220B7C0;
	}
	return 0x8220B7C0;
} // Block from 8220B7ACh-8220B7C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220B7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B7C0);
		  /* 8220B7C0h */ case    0:  		/* li R3, 0 */
		/* 8220B7C0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B7C0h case    0:*/		return 0x8220B7C4;
		  /* 8220B7C4h */ case    1:  		/* addi R1, R1, 128 */
		/* 8220B7C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220B7C4h case    1:*/		return 0x8220B7C8;
		  /* 8220B7C8h */ case    2:  		/* b -1549600 */
		/* 8220B7C8h case    2:*/		return 0x820912A8;
		/* 8220B7C8h case    2:*/		return 0x8220B7CC;
		  /* 8220B7CCh */ case    3:  		/* nop */
		/* 8220B7CCh case    3:*/		cpu::op::nop();
		/* 8220B7CCh case    3:*/		return 0x8220B7D0;
	}
	return 0x8220B7D0;
} // Block from 8220B7C0h-8220B7D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220B7D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B7D0);
		  /* 8220B7D0h */ case    0:  		/* mfspr R12, LR */
		/* 8220B7D0h case    0:*/		regs.R12 = regs.LR;
		/* 8220B7D0h case    0:*/		return 0x8220B7D4;
		  /* 8220B7D4h */ case    1:  		/* bl -1549700 */
		/* 8220B7D4h case    1:*/		regs.LR = 0x8220B7D8; return 0x82091250;
		/* 8220B7D4h case    1:*/		return 0x8220B7D8;
		  /* 8220B7D8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220B7D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220B7D8h case    2:*/		return 0x8220B7DC;
		  /* 8220B7DCh */ case    3:  		/* addi R11, R4, 7 */
		/* 8220B7DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x7);
		/* 8220B7DCh case    3:*/		return 0x8220B7E0;
		  /* 8220B7E0h */ case    4:  		/* mtspr CTR, R5 */
		/* 8220B7E0h case    4:*/		regs.CTR = regs.R5;
		/* 8220B7E0h case    4:*/		return 0x8220B7E4;
		  /* 8220B7E4h */ case    5:  		/* mr R29, R3 */
		/* 8220B7E4h case    5:*/		regs.R29 = regs.R3;
		/* 8220B7E4h case    5:*/		return 0x8220B7E8;
		  /* 8220B7E8h */ case    6:  		/* li R4, 32 */
		/* 8220B7E8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8220B7E8h case    6:*/		return 0x8220B7EC;
		  /* 8220B7ECh */ case    7:  		/* mr R3, R7 */
		/* 8220B7ECh case    7:*/		regs.R3 = regs.R7;
		/* 8220B7ECh case    7:*/		return 0x8220B7F0;
		  /* 8220B7F0h */ case    8:  		/* mr R28, R5 */
		/* 8220B7F0h case    8:*/		regs.R28 = regs.R5;
		/* 8220B7F0h case    8:*/		return 0x8220B7F4;
		  /* 8220B7F4h */ case    9:  		/* mr R26, R6 */
		/* 8220B7F4h case    9:*/		regs.R26 = regs.R6;
		/* 8220B7F4h case    9:*/		return 0x8220B7F8;
		  /* 8220B7F8h */ case   10:  		/* mr R30, R7 */
		/* 8220B7F8h case   10:*/		regs.R30 = regs.R7;
		/* 8220B7F8h case   10:*/		return 0x8220B7FC;
		  /* 8220B7FCh */ case   11:  		/* rlwinm R27, R11, 0, 0, 28 */
		/* 8220B7FCh case   11:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R27,regs.R11);
		/* 8220B7FCh case   11:*/		return 0x8220B800;
		  /* 8220B800h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8220B800h case   12:*/		if ( 1 ) { regs.LR = 0x8220B804; return (uint32)regs.CTR; }
		/* 8220B800h case   12:*/		return 0x8220B804;
		  /* 8220B804h */ case   13:  		/* or. R31, R3, R3 */
		/* 8220B804h case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220B804h case   13:*/		return 0x8220B808;
		  /* 8220B808h */ case   14:  		/* bc 12, CR0_EQ, 124 */
		/* 8220B808h case   14:*/		if ( regs.CR[0].eq ) { return 0x8220B884;  }
		/* 8220B808h case   14:*/		return 0x8220B80C;
		  /* 8220B80Ch */ case   15:  		/* stw R28, <#[R31]> */
		/* 8220B80Ch case   15:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B80Ch case   15:*/		return 0x8220B810;
		  /* 8220B810h */ case   16:  		/* addi R11, R29, 1 */
		/* 8220B810h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1);
		/* 8220B810h case   16:*/		return 0x8220B814;
		  /* 8220B814h */ case   17:  		/* stw R26, <#[R31 + 4]> */
		/* 8220B814h case   17:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000004) );
		/* 8220B814h case   17:*/		return 0x8220B818;
		  /* 8220B818h */ case   18:  		/* mr R3, R30 */
		/* 8220B818h case   18:*/		regs.R3 = regs.R30;
		/* 8220B818h case   18:*/		return 0x8220B81C;
		  /* 8220B81Ch */ case   19:  		/* stw R30, <#[R31 + 8]> */
		/* 8220B81Ch case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B81Ch case   19:*/		return 0x8220B820;
		  /* 8220B820h */ case   20:  		/* mullw R4, R11, R27 */
		/* 8220B820h case   20:*/		cpu::op::mullw<0>(regs,&regs.R4,regs.R11,regs.R27);
		/* 8220B820h case   20:*/		return 0x8220B824;
		  /* 8220B824h */ case   21:  		/* stw R27, <#[R31 + 16]> */
		/* 8220B824h case   21:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000010) );
		/* 8220B824h case   21:*/		return 0x8220B828;
		  /* 8220B828h */ case   22:  		/* mtspr CTR, R28 */
		/* 8220B828h case   22:*/		regs.CTR = regs.R28;
		/* 8220B828h case   22:*/		return 0x8220B82C;
		  /* 8220B82Ch */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 8220B82Ch case   23:*/		if ( 1 ) { regs.LR = 0x8220B830; return (uint32)regs.CTR; }
		/* 8220B82Ch case   23:*/		return 0x8220B830;
		  /* 8220B830h */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 8220B830h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220B830h case   24:*/		return 0x8220B834;
		  /* 8220B834h */ case   25:  		/* bc 12, CR0_EQ, 60 */
		/* 8220B834h case   25:*/		if ( regs.CR[0].eq ) { return 0x8220B870;  }
		/* 8220B834h case   25:*/		return 0x8220B838;
		  /* 8220B838h */ case   26:  		/* li R10, 0 */
		/* 8220B838h case   26:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8220B838h case   26:*/		return 0x8220B83C;
		  /* 8220B83Ch */ case   27:  		/* stw R3, <#[R31 + 12]> */
		/* 8220B83Ch case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220B83Ch case   27:*/		return 0x8220B840;
		  /* 8220B840h */ case   28:  		/* mr R11, R3 */
		/* 8220B840h case   28:*/		regs.R11 = regs.R3;
		/* 8220B840h case   28:*/		return 0x8220B844;
		  /* 8220B844h */ case   29:  		/* stw R29, <#[R31 + 20]> */
		/* 8220B844h case   29:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8220B844h case   29:*/		return 0x8220B848;
		  /* 8220B848h */ case   30:  		/* cmpwi CR6, R29, 0 */
		/* 8220B848h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8220B848h case   30:*/		return 0x8220B84C;
		  /* 8220B84Ch */ case   31:  		/* stw R29, <#[R31 + 24]> */
		/* 8220B84Ch case   31:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B84Ch case   31:*/		return 0x8220B850;
		  /* 8220B850h */ case   32:  		/* stw R10, <#[R31 + 28]> */
		/* 8220B850h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220B850h case   32:*/		return 0x8220B854;
		  /* 8220B854h */ case   33:  		/* bc 4, CR6_GT, 48 */
		/* 8220B854h case   33:*/		if ( !regs.CR[6].gt ) { return 0x8220B884;  }
		/* 8220B854h case   33:*/		return 0x8220B858;
		  /* 8220B858h */ case   34:  		/* mtspr CTR, R29 */
		/* 8220B858h case   34:*/		regs.CTR = regs.R29;
		/* 8220B858h case   34:*/		return 0x8220B85C;
		  /* 8220B85Ch */ case   35:  		/* add R11, R11, R27 */
		/* 8220B85Ch case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8220B85Ch case   35:*/		return 0x8220B860;
		  /* 8220B860h */ case   36:  		/* stw R11, <#[R3]> */
		/* 8220B860h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8220B860h case   36:*/		return 0x8220B864;
		  /* 8220B864h */ case   37:  		/* mr R3, R11 */
		/* 8220B864h case   37:*/		regs.R3 = regs.R11;
		/* 8220B864h case   37:*/		return 0x8220B868;
		  /* 8220B868h */ case   38:  		/* bc 16, CR0_LT, -12 */
		/* 8220B868h case   38:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220B85C;  }
		/* 8220B868h case   38:*/		return 0x8220B86C;
		  /* 8220B86Ch */ case   39:  		/* b 24 */
		/* 8220B86Ch case   39:*/		return 0x8220B884;
		/* 8220B86Ch case   39:*/		return 0x8220B870;
	}
	return 0x8220B870;
} // Block from 8220B7D0h-8220B870h (40 instructions)

