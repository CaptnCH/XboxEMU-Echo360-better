#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82180B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180B58);
		  /* 82180B58h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 82180B58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 82180B58h case    0:*/		return 0x82180B5C;
		  /* 82180B5Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82180B5Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82180B5Ch case    1:*/		return 0x82180B60;
		  /* 82180B60h */ case    2:  		/* bc 4, CR6_EQ, 3396 */
		/* 82180B60h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821818A4;  }
		/* 82180B60h case    2:*/		return 0x82180B64;
		  /* 82180B64h */ case    3:  		/* addi R6, R31, 4 */
		/* 82180B64h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x4);
		/* 82180B64h case    3:*/		return 0x82180B68;
		  /* 82180B68h */ case    4:  		/* lwz R11, <#[R6]> */
		/* 82180B68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82180B68h case    4:*/		return 0x82180B6C;
		  /* 82180B6Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82180B6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180B6Ch case    5:*/		return 0x82180B70;
		  /* 82180B70h */ case    6:  		/* bc 12, CR6_EQ, 260 */
		/* 82180B70h case    6:*/		if ( regs.CR[6].eq ) { return 0x82180C74;  }
		/* 82180B70h case    6:*/		return 0x82180B74;
		  /* 82180B74h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 82180B74h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82180B74h case    7:*/		return 0x82180B78;
		  /* 82180B78h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82180B78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82180B78h case    8:*/		return 0x82180B7C;
		  /* 82180B7Ch */ case    9:  		/* bc 12, CR6_EQ, 228 */
		/* 82180B7Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82180C60;  }
		/* 82180B7Ch case    9:*/		return 0x82180B80;
		  /* 82180B80h */ case   10:  		/* lwz R9, <#[R11 + 12]> */
		/* 82180B80h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82180B80h case   10:*/		return 0x82180B84;
		  /* 82180B84h */ case   11:  		/* lwz R10, <#[R7 + 12]> */
		/* 82180B84h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x0000000C) );
		/* 82180B84h case   11:*/		return 0x82180B88;
		  /* 82180B88h */ case   12:  		/* addi R9, R9, 4 */
		/* 82180B88h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82180B88h case   12:*/		return 0x82180B8C;
		  /* 82180B8Ch */ case   13:  		/* lwz R8, <#[R9]> */
		/* 82180B8Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82180B8Ch case   13:*/		return 0x82180B90;
		  /* 82180B90h */ case   14:  		/* b 12 */
		/* 82180B90h case   14:*/		return 0x82180B9C;
		/* 82180B90h case   14:*/		return 0x82180B94;
		  /* 82180B94h */ case   15:  		/* addi R9, R8, 8 */
		/* 82180B94h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x8);
		/* 82180B94h case   15:*/		return 0x82180B98;
		  /* 82180B98h */ case   16:  		/* lwz R8, <#[R8 + 8]> */
		/* 82180B98h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82180B98h case   16:*/		return 0x82180B9C;
	}
	return 0x82180B9C;
} // Block from 82180B58h-82180B9Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82180B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180B9C);
		  /* 82180B9Ch */ case    0:  		/* cmplw CR6, R8, R11 */
		/* 82180B9Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 82180B9Ch case    0:*/		return 0x82180BA0;
		  /* 82180BA0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82180BA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82180B94;  }
		/* 82180BA0h case    1:*/		return 0x82180BA4;
		  /* 82180BA4h */ case    2:  		/* lwz R8, <#[R11 + 8]> */
		/* 82180BA4h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82180BA4h case    2:*/		return 0x82180BA8;
		  /* 82180BA8h */ case    3:  		/* stw R8, <#[R9]> */
		/* 82180BA8h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82180BA8h case    3:*/		return 0x82180BAC;
		  /* 82180BACh */ case    4:  		/* lwz R9, <#[R10 + 4]> */
		/* 82180BACh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82180BACh case    4:*/		return 0x82180BB0;
		  /* 82180BB0h */ case    5:  		/* stw R9, <#[R11 + 8]> */
		/* 82180BB0h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82180BB0h case    5:*/		return 0x82180BB4;
		  /* 82180BB4h */ case    6:  		/* stw R11, <#[R10 + 4]> */
		/* 82180BB4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82180BB4h case    6:*/		return 0x82180BB8;
		  /* 82180BB8h */ case    7:  		/* stw R10, <#[R11 + 12]> */
		/* 82180BB8h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82180BB8h case    7:*/		return 0x82180BBC;
		  /* 82180BBCh */ case    8:  		/* lwz R9, <#[R11]> */
		/* 82180BBCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82180BBCh case    8:*/		return 0x82180BC0;
		  /* 82180BC0h */ case    9:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82180BC0h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82180BC0h case    9:*/		return 0x82180BC4;
		  /* 82180BC4h */ case   10:  		/* lwz R10, <#[R7]> */
		/* 82180BC4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 82180BC4h case   10:*/		return 0x82180BC8;
		  /* 82180BC8h */ case   11:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 82180BC8h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 82180BC8h case   11:*/		return 0x82180BCC;
		  /* 82180BCCh */ case   12:  		/* rlwinm. R8, R10, 0, 29, 29 */
		/* 82180BCCh case   12:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R10);
		/* 82180BCCh case   12:*/		return 0x82180BD0;
		  /* 82180BD0h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82180BD0h case   13:*/		if ( regs.CR[0].eq ) { return 0x82180BE0;  }
		/* 82180BD0h case   13:*/		return 0x82180BD4;
		  /* 82180BD4h */ case   14:  		/* rlwinm. R8, R9, 0, 30, 30 */
		/* 82180BD4h case   14:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R9);
		/* 82180BD4h case   14:*/		return 0x82180BD8;
		  /* 82180BD8h */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 82180BD8h case   15:*/		if ( regs.CR[0].eq ) { return 0x82180BE0;  }
		/* 82180BD8h case   15:*/		return 0x82180BDC;
		  /* 82180BDCh */ case   16:  		/* addi R10, R10, -4 */
		/* 82180BDCh case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82180BDCh case   16:*/		return 0x82180BE0;
	}
	return 0x82180BE0;
} // Block from 82180B9Ch-82180BE0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82180BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180BE0);
		  /* 82180BE0h */ case    0:  		/* and R8, R9, R10 */
		/* 82180BE0h case    0:*/		cpu::op::and<0>(regs,&regs.R8,regs.R9,regs.R10);
		/* 82180BE0h case    0:*/		return 0x82180BE4;
		  /* 82180BE4h */ case    1:  		/* rlwinm. R8, R8, 0, 29, 29 */
		/* 82180BE4h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R8);
		/* 82180BE4h case    1:*/		return 0x82180BE8;
		  /* 82180BE8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82180BE8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82180BF4;  }
		/* 82180BE8h case    2:*/		return 0x82180BEC;
		  /* 82180BECh */ case    3:  		/* addi R10, R10, -4 */
		/* 82180BECh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82180BECh case    3:*/		return 0x82180BF0;
		  /* 82180BF0h */ case    4:  		/* addi R9, R9, -4 */
		/* 82180BF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 82180BF0h case    4:*/		return 0x82180BF4;
	}
	return 0x82180BF4;
} // Block from 82180BE0h-82180BF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180BF4);
		  /* 82180BF4h */ case    0:  		/* rlwinm. R8, R10, 0, 31, 31 */
		/* 82180BF4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R10);
		/* 82180BF4h case    0:*/		return 0x82180BF8;
		  /* 82180BF8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82180BF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82180C08;  }
		/* 82180BF8h case    1:*/		return 0x82180BFC;
		  /* 82180BFCh */ case    2:  		/* rlwinm. R8, R9, 0, 30, 30 */
		/* 82180BFCh case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R9);
		/* 82180BFCh case    2:*/		return 0x82180C00;
		  /* 82180C00h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 82180C00h case    3:*/		if ( regs.CR[0].eq ) { return 0x82180C08;  }
		/* 82180C00h case    3:*/		return 0x82180C04;
		  /* 82180C04h */ case    4:  		/* addi R9, R9, -2 */
		/* 82180C04h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFE);
		/* 82180C04h case    4:*/		return 0x82180C08;
	}
	return 0x82180C08;
} // Block from 82180BF4h-82180C08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180C08);
		  /* 82180C08h */ case    0:  		/* lwz R8, <#[R11]> */
		/* 82180C08h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82180C08h case    0:*/		return 0x82180C0C;
		  /* 82180C0Ch */ case    1:  		/* or R10, R9, R10 */
		/* 82180C0Ch case    1:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82180C0Ch case    1:*/		return 0x82180C10;
		  /* 82180C10h */ case    2:  		/* rlwimi R10, R8, 0, 0, 26 */
		/* 82180C10h case    2:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R8);
		/* 82180C10h case    2:*/		return 0x82180C14;
		  /* 82180C14h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82180C14h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82180C14h case    3:*/		return 0x82180C18;
		  /* 82180C18h */ case    4:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 82180C18h case    4:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 82180C18h case    4:*/		return 0x82180C1C;
		  /* 82180C1Ch */ case    5:  		/* rlwinm R8, R10, 24, 29, 30 */
		/* 82180C1Ch case    5:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R10);
		/* 82180C1Ch case    5:*/		return 0x82180C20;
		  /* 82180C20h */ case    6:  		/* rlwinm R5, R10, 26, 29, 30 */
		/* 82180C20h case    6:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R5,regs.R10);
		/* 82180C20h case    6:*/		return 0x82180C24;
		  /* 82180C24h */ case    7:  		/* rlwinm R4, R10, 28, 29, 30 */
		/* 82180C24h case    7:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R4,regs.R10);
		/* 82180C24h case    7:*/		return 0x82180C28;
		  /* 82180C28h */ case    8:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 82180C28h case    8:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 82180C28h case    8:*/		return 0x82180C2C;
		  /* 82180C2Ch */ case    9:  		/* lwz R3, <#[R7]> */
		/* 82180C2Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R7 + 0x00000000) );
		/* 82180C2Ch case    9:*/		return 0x82180C30;
		  /* 82180C30h */ case   10:  		/* rlwinm R3, R3, 27, 24, 31 */
		/* 82180C30h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R3,regs.R3);
		/* 82180C30h case   10:*/		return 0x82180C34;
		  /* 82180C34h */ case   11:  		/* srw R9, R3, R9 */
		/* 82180C34h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R3,regs.R9);
		/* 82180C34h case   11:*/		return 0x82180C38;
		  /* 82180C38h */ case   12:  		/* srw R8, R3, R8 */
		/* 82180C38h case   12:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R3,regs.R8);
		/* 82180C38h case   12:*/		return 0x82180C3C;
		  /* 82180C3Ch */ case   13:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 82180C3Ch case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 82180C3Ch case   13:*/		return 0x82180C40;
		  /* 82180C40h */ case   14:  		/* srw R9, R3, R5 */
		/* 82180C40h case   14:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R3,regs.R5);
		/* 82180C40h case   14:*/		return 0x82180C44;
		  /* 82180C44h */ case   15:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 82180C44h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 82180C44h case   15:*/		return 0x82180C48;
		  /* 82180C48h */ case   16:  		/* srw R5, R3, R4 */
		/* 82180C48h case   16:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R3,regs.R4);
		/* 82180C48h case   16:*/		return 0x82180C4C;
		  /* 82180C4Ch */ case   17:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 82180C4Ch case   17:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 82180C4Ch case   17:*/		return 0x82180C50;
		  /* 82180C50h */ case   18:  		/* rlwimi R5, R9, 2, 0, 29 */
		/* 82180C50h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 82180C50h case   18:*/		return 0x82180C54;
		  /* 82180C54h */ case   19:  		/* rlwinm R9, R5, 5, 0, 26 */
		/* 82180C54h case   19:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R5);
		/* 82180C54h case   19:*/		return 0x82180C58;
		  /* 82180C58h */ case   20:  		/* or R10, R9, R10 */
		/* 82180C58h case   20:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82180C58h case   20:*/		return 0x82180C5C;
		  /* 82180C5Ch */ case   21:  		/* stw R10, <#[R11]> */
		/* 82180C5Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82180C5Ch case   21:*/		return 0x82180C60;
	}
	return 0x82180C60;
} // Block from 82180C08h-82180C60h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82180C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180C60);
		  /* 82180C60h */ case    0:  		/* lwz R10, <#[R6]> */
		/* 82180C60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 82180C60h case    0:*/		return 0x82180C64;
		  /* 82180C64h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82180C64h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82180C64h case    1:*/		return 0x82180C68;
		  /* 82180C68h */ case    2:  		/* bc 4, CR6_EQ, -256 */
		/* 82180C68h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82180B68;  }
		/* 82180C68h case    2:*/		return 0x82180C6C;
		  /* 82180C6Ch */ case    3:  		/* addi R6, R11, 8 */
		/* 82180C6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x8);
		/* 82180C6Ch case    3:*/		return 0x82180C70;
		  /* 82180C70h */ case    4:  		/* b -264 */
		/* 82180C70h case    4:*/		return 0x82180B68;
		/* 82180C70h case    4:*/		return 0x82180C74;
	}
	return 0x82180C74;
} // Block from 82180C60h-82180C74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180C74);
		  /* 82180C74h */ case    0:  		/* mr R3, R31 */
		/* 82180C74h case    0:*/		regs.R3 = regs.R31;
		/* 82180C74h case    0:*/		return 0x82180C78;
		  /* 82180C78h */ case    1:  		/* bl -115448 */
		/* 82180C78h case    1:*/		regs.LR = 0x82180C7C; return 0x82164980;
		/* 82180C78h case    1:*/		return 0x82180C7C;
		  /* 82180C7Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82180C7Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82180C7Ch case    2:*/		return 0x82180C80;
		  /* 82180C80h */ case    3:  		/* mr R3, R18 */
		/* 82180C80h case    3:*/		regs.R3 = regs.R18;
		/* 82180C80h case    3:*/		return 0x82180C84;
		  /* 82180C84h */ case    4:  		/* bc 12, CR0_EQ, 3116 */
		/* 82180C84h case    4:*/		if ( regs.CR[0].eq ) { return 0x821818B0;  }
		/* 82180C84h case    4:*/		return 0x82180C88;
		  /* 82180C88h */ case    5:  		/* li R6, 1 */
		/* 82180C88h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82180C88h case    5:*/		return 0x82180C8C;
		  /* 82180C8Ch */ case    6:  		/* li R5, 0 */
		/* 82180C8Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82180C8Ch case    6:*/		return 0x82180C90;
		  /* 82180C90h */ case    7:  		/* mr R4, R31 */
		/* 82180C90h case    7:*/		regs.R4 = regs.R31;
		/* 82180C90h case    7:*/		return 0x82180C94;
		  /* 82180C94h */ case    8:  		/* bl 698164 */
		/* 82180C94h case    8:*/		regs.LR = 0x82180C98; return 0x8222B3C8;
		/* 82180C94h case    8:*/		return 0x82180C98;
	}
	return 0x82180C98;
} // Block from 82180C74h-82180C98h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82180C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180C98);
		  /* 82180C98h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82180C98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82180C98h case    0:*/		return 0x82180C9C;
		  /* 82180C9Ch */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82180C9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82180CD8;  }
		/* 82180C9Ch case    1:*/		return 0x82180CA0;
		  /* 82180CA0h */ case    2:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82180CA0h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82180CA0h case    2:*/		return 0x82180CA4;
		  /* 82180CA4h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 82180CA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82180CA4h case    3:*/		return 0x82180CA8;
		  /* 82180CA8h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82180CA8h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180CA8h case    4:*/		return 0x82180CAC;
		  /* 82180CACh */ case    5:  		/* addic R10, R10, -1 */
		/* 82180CACh case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82180CACh case    5:*/		return 0x82180CB0;
		  /* 82180CB0h */ case    6:  		/* subfe R10, R10, R10 */
		/* 82180CB0h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82180CB0h case    6:*/		return 0x82180CB4;
		  /* 82180CB4h */ case    7:  		/* and R10, R10, R11 */
		/* 82180CB4h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82180CB4h case    7:*/		return 0x82180CB8;
		  /* 82180CB8h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 82180CB8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 82180CB8h case    8:*/		return 0x82180CBC;
		  /* 82180CBCh */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 82180CBCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x82180CCC;  }
		/* 82180CBCh case    9:*/		return 0x82180CC0;
		  /* 82180CC0h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82180CC0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82180CC0h case   10:*/		return 0x82180CC4;
		  /* 82180CC4h */ case   11:  		/* mr R29, R31 */
		/* 82180CC4h case   11:*/		regs.R29 = regs.R31;
		/* 82180CC4h case   11:*/		return 0x82180CC8;
		  /* 82180CC8h */ case   12:  		/* lwz R11, <#[R11 + 40]> */
		/* 82180CC8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82180CC8h case   12:*/		return 0x82180CCC;
	}
	return 0x82180CCC;
} // Block from 82180C98h-82180CCCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82180CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180CCC);
		  /* 82180CCCh */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180CCCh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180CCCh case    0:*/		return 0x82180CD0;
		  /* 82180CD0h */ case    1:  		/* bc 4, CR0_EQ, 56 */
		/* 82180CD0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82180D08;  }
		/* 82180CD0h case    1:*/		return 0x82180CD4;
		  /* 82180CD4h */ case    2:  		/* b 40 */
		/* 82180CD4h case    2:*/		return 0x82180CFC;
		/* 82180CD4h case    2:*/		return 0x82180CD8;
	}
	return 0x82180CD8;
} // Block from 82180CCCh-82180CD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82180CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180CD8);
		  /* 82180CD8h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82180CD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82180CD8h case    0:*/		return 0x82180CDC;
		  /* 82180CDCh */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82180CDCh case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180CDCh case    1:*/		return 0x82180CE0;
		  /* 82180CE0h */ case    2:  		/* addic R9, R10, -1 */
		/* 82180CE0h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 82180CE0h case    2:*/		return 0x82180CE4;
		  /* 82180CE4h */ case    3:  		/* subfe R9, R9, R9 */
		/* 82180CE4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82180CE4h case    3:*/		return 0x82180CE8;
		  /* 82180CE8h */ case    4:  		/* and R9, R9, R11 */
		/* 82180CE8h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82180CE8h case    4:*/		return 0x82180CEC;
		  /* 82180CECh */ case    5:  		/* cmplw CR6, R31, R9 */
		/* 82180CECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 82180CECh case    5:*/		return 0x82180CF0;
		  /* 82180CF0h */ case    6:  		/* bc 12, CR6_EQ, -48 */
		/* 82180CF0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82180CC0;  }
		/* 82180CF0h case    6:*/		return 0x82180CF4;
		  /* 82180CF4h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82180CF4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82180CF4h case    7:*/		return 0x82180CF8;
		  /* 82180CF8h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 82180CF8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82180D08;  }
		/* 82180CF8h case    8:*/		return 0x82180CFC;
	}
	return 0x82180CFC;
} // Block from 82180CD8h-82180CFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82180CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180CFC);
		  /* 82180CFCh */ case    0:  		/* mr R31, R11 */
		/* 82180CFCh case    0:*/		regs.R31 = regs.R11;
		/* 82180CFCh case    0:*/		return 0x82180D00;
		  /* 82180D00h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82180D00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180D00h case    1:*/		return 0x82180D04;
		  /* 82180D04h */ case    2:  		/* bc 4, CR6_EQ, -524 */
		/* 82180D04h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82180AF8;  }
		/* 82180D04h case    2:*/		return 0x82180D08;
	}
	return 0x82180D08;
} // Block from 82180CFCh-82180D08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82180D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180D08);
		  /* 82180D08h */ case    0:  		/* lwz R11, <#[R30 + 76]> */
		/* 82180D08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 82180D08h case    0:*/		return 0x82180D0C;
		  /* 82180D0Ch */ case    1:  		/* subfic R25, R25, 3 */
		/* 82180D0Ch case    1:*/		cpu::op::subfic<0>(regs,&regs.R25,regs.R25,0x3);
		/* 82180D0Ch case    1:*/		return 0x82180D10;
		  /* 82180D10h */ case    2:  		/* lwz R10, <#[R30 + 48]> */
		/* 82180D10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 82180D10h case    2:*/		return 0x82180D14;
		  /* 82180D14h */ case    3:  		/* oris R11, R11, 192 */
		/* 82180D14h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC0);
		/* 82180D14h case    3:*/		return 0x82180D18;
		  /* 82180D18h */ case    4:  		/* stw R19, <#[R30 + 112]> */
		/* 82180D18h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000070) );
		/* 82180D18h case    4:*/		return 0x82180D1C;
		  /* 82180D1Ch */ case    5:  		/* oris R10, R10, 2176 */
		/* 82180D1Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x880);
		/* 82180D1Ch case    5:*/		return 0x82180D20;
		  /* 82180D20h */ case    6:  		/* stw R11, <#[R30 + 76]> */
		/* 82180D20h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 82180D20h case    6:*/		return 0x82180D24;
		  /* 82180D24h */ case    7:  		/* stw R10, <#[R30 + 48]> */
		/* 82180D24h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 82180D24h case    7:*/		return 0x82180D28;
	}
	return 0x82180D28;
} // Block from 82180D08h-82180D28h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82180D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180D28);
		  /* 82180D28h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82180D28h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82180D28h case    0:*/		return 0x82180D2C;
		  /* 82180D2Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180D2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180D2Ch case    1:*/		return 0x82180D30;
		  /* 82180D30h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180D30h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180D30h case    2:*/		return 0x82180D34;
		  /* 82180D34h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82180D34h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82180D44;  }
		/* 82180D34h case    3:*/		return 0x82180D38;
		  /* 82180D38h */ case    4:  		/* mr R27, R11 */
		/* 82180D38h case    4:*/		regs.R27 = regs.R11;
		/* 82180D38h case    4:*/		return 0x82180D3C;
		  /* 82180D3Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82180D3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180D3Ch case    5:*/		return 0x82180D40;
		  /* 82180D40h */ case    6:  		/* bc 4, CR6_EQ, -788 */
		/* 82180D40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82180A2C;  }
		/* 82180D40h case    6:*/		return 0x82180D44;
	}
	return 0x82180D44;
} // Block from 82180D28h-82180D44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82180D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180D44);
		  /* 82180D44h */ case    0:  		/* cmplwi CR6, R26, 1 */
		/* 82180D44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 82180D44h case    0:*/		return 0x82180D48;
		  /* 82180D48h */ case    1:  		/* bc 4, CR6_GT, 16 */
		/* 82180D48h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82180D58;  }
		/* 82180D48h case    1:*/		return 0x82180D4C;
		  /* 82180D4Ch */ case    2:  		/* lwz R11, <#[R18 + 44]> */
		/* 82180D4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000002C) );
		/* 82180D4Ch case    2:*/		return 0x82180D50;
		  /* 82180D50h */ case    3:  		/* ori R11, R11, 32768 */
		/* 82180D50h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82180D50h case    3:*/		return 0x82180D54;
		  /* 82180D54h */ case    4:  		/* stw R11, <#[R18 + 44]> */
		/* 82180D54h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x0000002C) );
		/* 82180D54h case    4:*/		return 0x82180D58;
	}
	return 0x82180D58;
} // Block from 82180D44h-82180D58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180D58);
		  /* 82180D58h */ case    0:  		/* lwz R11, <#[R18 + 40]> */
		/* 82180D58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000028) );
		/* 82180D58h case    0:*/		return 0x82180D5C;
		  /* 82180D5Ch */ case    1:  		/* ori R11, R11, 256 */
		/* 82180D5Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82180D5Ch case    1:*/		return 0x82180D60;
		  /* 82180D60h */ case    2:  		/* stw R11, <#[R18 + 40]> */
		/* 82180D60h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000028) );
		/* 82180D60h case    2:*/		return 0x82180D64;
		  /* 82180D64h */ case    3:  		/* b 2792 */
		/* 82180D64h case    3:*/		return 0x8218184C;
		/* 82180D64h case    3:*/		return 0x82180D68;
	}
	return 0x82180D68;
} // Block from 82180D58h-82180D68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82180D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180D68);
		  /* 82180D68h */ case    0:  		/* lwz R11, <#[R19 + 48]> */
		/* 82180D68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82180D68h case    0:*/		return 0x82180D6C;
		  /* 82180D6Ch */ case    1:  		/* mr R4, R19 */
		/* 82180D6Ch case    1:*/		regs.R4 = regs.R19;
		/* 82180D6Ch case    1:*/		return 0x82180D70;
		  /* 82180D70h */ case    2:  		/* mr R3, R18 */
		/* 82180D70h case    2:*/		regs.R3 = regs.R18;
		/* 82180D70h case    2:*/		return 0x82180D74;
		  /* 82180D74h */ case    3:  		/* rlwinm R11, R11, 0, 5, 3 */
		/* 82180D74h case    3:*/		cpu::op::rlwinm<0,0,5,3>(regs,&regs.R11,regs.R11);
		/* 82180D74h case    3:*/		return 0x82180D78;
		  /* 82180D78h */ case    4:  		/* stw R11, <#[R19 + 48]> */
		/* 82180D78h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82180D78h case    4:*/		return 0x82180D7C;
		  /* 82180D7Ch */ case    5:  		/* bl -31908 */
		/* 82180D7Ch case    5:*/		regs.LR = 0x82180D80; return 0x821790D8;
		/* 82180D7Ch case    5:*/		return 0x82180D80;
		  /* 82180D80h */ case    6:  		/* lwz R11, <#[R19 + 68]> */
		/* 82180D80h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000044) );
		/* 82180D80h case    6:*/		return 0x82180D84;
		  /* 82180D84h */ case    7:  		/* mr R26, R3 */
		/* 82180D84h case    7:*/		regs.R26 = regs.R3;
		/* 82180D84h case    7:*/		return 0x82180D88;
		  /* 82180D88h */ case    8:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82180D88h case    8:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82180D88h case    8:*/		return 0x82180D8C;
		  /* 82180D8Ch */ case    9:  		/* mr R25, R21 */
		/* 82180D8Ch case    9:*/		regs.R25 = regs.R21;
		/* 82180D8Ch case    9:*/		return 0x82180D90;
		  /* 82180D90h */ case   10:  		/* bc 12, CR0_EQ, 52 */
		/* 82180D90h case   10:*/		if ( regs.CR[0].eq ) { return 0x82180DC4;  }
		/* 82180D90h case   10:*/		return 0x82180D94;
		  /* 82180D94h */ case   11:  		/* rlwinm R11, R19, 0, 0, 30 */
		/* 82180D94h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R19);
		/* 82180D94h case   11:*/		return 0x82180D98;
		  /* 82180D98h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180D98h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180D98h case   12:*/		return 0x82180D9C;
		  /* 82180D9Ch */ case   13:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82180D9Ch case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180D9Ch case   13:*/		return 0x82180DA0;
		  /* 82180DA0h */ case   14:  		/* addic R10, R10, -1 */
		/* 82180DA0h case   14:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82180DA0h case   14:*/		return 0x82180DA4;
		  /* 82180DA4h */ case   15:  		/* subfe R10, R10, R10 */
		/* 82180DA4h case   15:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82180DA4h case   15:*/		return 0x82180DA8;
		  /* 82180DA8h */ case   16:  		/* and R11, R10, R11 */
		/* 82180DA8h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180DA8h case   16:*/		return 0x82180DAC;
		  /* 82180DACh */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82180DACh case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82180DACh case   17:*/		return 0x82180DB0;
		  /* 82180DB0h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180DB0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180DB0h case   18:*/		return 0x82180DB4;
		  /* 82180DB4h */ case   19:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82180DB4h case   19:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180DB4h case   19:*/		return 0x82180DB8;
		  /* 82180DB8h */ case   20:  		/* addic R10, R10, -1 */
		/* 82180DB8h case   20:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82180DB8h case   20:*/		return 0x82180DBC;
		  /* 82180DBCh */ case   21:  		/* subfe R10, R10, R10 */
		/* 82180DBCh case   21:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82180DBCh case   21:*/		return 0x82180DC0;
		  /* 82180DC0h */ case   22:  		/* and R25, R10, R11 */
		/* 82180DC0h case   22:*/		cpu::op::and<0>(regs,&regs.R25,regs.R10,regs.R11);
		/* 82180DC0h case   22:*/		return 0x82180DC4;
	}
	return 0x82180DC4;
} // Block from 82180D68h-82180DC4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82180DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180DC4);
		  /* 82180DC4h */ case    0:  		/* rlwinm R27, R19, 0, 0, 30 */
		/* 82180DC4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R27,regs.R19);
		/* 82180DC4h case    0:*/		return 0x82180DC8;
		  /* 82180DC8h */ case    1:  		/* lwz R11, <#[R27 + 4]> */
		/* 82180DC8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82180DC8h case    1:*/		return 0x82180DCC;
		  /* 82180DCCh */ case    2:  		/* b 156 */
		/* 82180DCCh case    2:*/		return 0x82180E68;
		/* 82180DCCh case    2:*/		return 0x82180DD0;
		  /* 82180DD0h */ case    3:  		/* lwz R9, <#[R28 + 40]> */
		/* 82180DD0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000028) );
		/* 82180DD0h case    3:*/		return 0x82180DD4;
		  /* 82180DD4h */ case    4:  		/* lwz R11, <#[R19 + 48]> */
		/* 82180DD4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82180DD4h case    4:*/		return 0x82180DD8;
		  /* 82180DD8h */ case    5:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 82180DD8h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 82180DD8h case    5:*/		return 0x82180DDC;
		  /* 82180DDCh */ case    6:  		/* lwz R8, <#[R9]> */
		/* 82180DDCh case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82180DDCh case    6:*/		return 0x82180DE0;
		  /* 82180DE0h */ case    7:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 82180DE0h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 82180DE0h case    7:*/		return 0x82180DE4;
		  /* 82180DE4h */ case    8:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 82180DE4h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 82180DE4h case    8:*/		return 0x82180DE8;
		  /* 82180DE8h */ case    9:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 82180DE8h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 82180DE8h case    9:*/		return 0x82180DEC;
		  /* 82180DECh */ case   10:  		/* addi R11, R11, 1 */
		/* 82180DECh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180DECh case   10:*/		return 0x82180DF0;
		  /* 82180DF0h */ case   11:  		/* addi R10, R10, 31 */
		/* 82180DF0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 82180DF0h case   11:*/		return 0x82180DF4;
		  /* 82180DF4h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82180DF4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82180DF4h case   12:*/		return 0x82180DF8;
		  /* 82180DF8h */ case   13:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 82180DF8h case   13:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 82180DF8h case   13:*/		return 0x82180DFC;
		  /* 82180DFCh */ case   14:  		/* slw R8, R24, R7 */
		/* 82180DFCh case   14:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R7);
		/* 82180DFCh case   14:*/		return 0x82180E00;
		  /* 82180E00h */ case   15:  		/* add R11, R10, R11 */
		/* 82180E00h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180E00h case   15:*/		return 0x82180E04;
		  /* 82180E04h */ case   16:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82180E04h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82180E04h case   16:*/		return 0x82180E08;
		  /* 82180E08h */ case   17:  		/* and. R11, R11, R8 */
		/* 82180E08h case   17:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82180E08h case   17:*/		return 0x82180E0C;
		  /* 82180E0Ch */ case   18:  		/* bc 12, CR0_EQ, 84 */
		/* 82180E0Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x82180E60;  }
		/* 82180E0Ch case   18:*/		return 0x82180E10;
		  /* 82180E10h */ case   19:  		/* mr R4, R19 */
		/* 82180E10h case   19:*/		regs.R4 = regs.R19;
		/* 82180E10h case   19:*/		return 0x82180E14;
		  /* 82180E14h */ case   20:  		/* mr R3, R28 */
		/* 82180E14h case   20:*/		regs.R3 = regs.R28;
		/* 82180E14h case   20:*/		return 0x82180E18;
		  /* 82180E18h */ case   21:  		/* bl 716728 */
		/* 82180E18h case   21:*/		regs.LR = 0x82180E1C; return 0x8222FDD0;
		/* 82180E18h case   21:*/		return 0x82180E1C;
		  /* 82180E1Ch */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82180E1Ch case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82180E1Ch case   22:*/		return 0x82180E20;
		  /* 82180E20h */ case   23:  		/* bc 12, CR0_EQ, 2712 */
		/* 82180E20h case   23:*/		if ( regs.CR[0].eq ) { return 0x821818B8;  }
		/* 82180E20h case   23:*/		return 0x82180E24;
		  /* 82180E24h */ case   24:  		/* lwz R11, <#[R28 + 36]> */
		/* 82180E24h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 82180E24h case   24:*/		return 0x82180E28;
		  /* 82180E28h */ case   25:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180E28h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180E28h case   25:*/		return 0x82180E2C;
		  /* 82180E2Ch */ case   26:  		/* bc 4, CR0_EQ, 52 */
		/* 82180E2Ch case   26:*/		if ( !regs.CR[0].eq ) { return 0x82180E60;  }
		/* 82180E2Ch case   26:*/		return 0x82180E30;
		  /* 82180E30h */ case   27:  		/* cmplwi CR0, R11, 0 */
		/* 82180E30h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82180E30h case   27:*/		return 0x82180E34;
		  /* 82180E34h */ case   28:  		/* bc 12, CR0_EQ, 44 */
		/* 82180E34h case   28:*/		if ( regs.CR[0].eq ) { return 0x82180E60;  }
		/* 82180E34h case   28:*/		return 0x82180E38;
		  /* 82180E38h */ case   29:  		/* lwz R10, <#[R11 + 8]> */
		/* 82180E38h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82180E38h case   29:*/		return 0x82180E3C;
		  /* 82180E3Ch */ case   30:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 82180E3Ch case   30:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 82180E3Ch case   30:*/		return 0x82180E40;
		  /* 82180E40h */ case   31:  		/* cmplwi CR6, R10, 8192 */
		/* 82180E40h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002000);
		/* 82180E40h case   31:*/		return 0x82180E44;
		  /* 82180E44h */ case   32:  		/* bc 12, CR6_EQ, 60 */
		/* 82180E44h case   32:*/		if ( regs.CR[6].eq ) { return 0x82180E80;  }
		/* 82180E44h case   32:*/		return 0x82180E48;
		  /* 82180E48h */ case   33:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82180E48h case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82180E48h case   33:*/		return 0x82180E4C;
		  /* 82180E4Ch */ case   34:  		/* lwz R11, <#[R11 + 40]> */
		/* 82180E4Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82180E4Ch case   34:*/		return 0x82180E50;
		  /* 82180E50h */ case   35:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180E50h case   35:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180E50h case   35:*/		return 0x82180E54;
		  /* 82180E54h */ case   36:  		/* bc 4, CR0_EQ, 12 */
		/* 82180E54h case   36:*/		if ( !regs.CR[0].eq ) { return 0x82180E60;  }
		/* 82180E54h case   36:*/		return 0x82180E58;
		  /* 82180E58h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 82180E58h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180E58h case   37:*/		return 0x82180E5C;
		  /* 82180E5Ch */ case   38:  		/* bc 4, CR6_EQ, -36 */
		/* 82180E5Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x82180E38;  }
		/* 82180E5Ch case   38:*/		return 0x82180E60;
	}
	return 0x82180E60;
} // Block from 82180DC4h-82180E60h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82180E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180E60);
		  /* 82180E60h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82180E60h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82180E60h case    0:*/		return 0x82180E64;
		  /* 82180E64h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180E64h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180E64h case    1:*/		return 0x82180E68;
	}
	return 0x82180E68;
} // Block from 82180E60h-82180E68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180E68);
		  /* 82180E68h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180E68h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180E68h case    0:*/		return 0x82180E6C;
		  /* 82180E6Ch */ case    1:  		/* bc 4, CR0_EQ, 644 */
		/* 82180E6Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821810F0;  }
		/* 82180E6Ch case    1:*/		return 0x82180E70;
		  /* 82180E70h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82180E70h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180E70h case    2:*/		return 0x82180E74;
		  /* 82180E74h */ case    3:  		/* mr R28, R11 */
		/* 82180E74h case    3:*/		regs.R28 = regs.R11;
		/* 82180E74h case    3:*/		return 0x82180E78;
		  /* 82180E78h */ case    4:  		/* bc 4, CR6_EQ, -168 */
		/* 82180E78h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82180DD0;  }
		/* 82180E78h case    4:*/		return 0x82180E7C;
		  /* 82180E7Ch */ case    5:  		/* b 628 */
		/* 82180E7Ch case    5:*/		return 0x821810F0;
		/* 82180E7Ch case    5:*/		return 0x82180E80;
	}
	return 0x82180E80;
} // Block from 82180E68h-82180E80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82180E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180E80);
		  /* 82180E80h */ case    0:  		/* li R10, 0 */
		/* 82180E80h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82180E80h case    0:*/		return 0x82180E84;
		  /* 82180E84h */ case    1:  		/* lwz R3, <#[R11 + 44]> */
		/* 82180E84h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 82180E84h case    1:*/		return 0x82180E88;
		  /* 82180E88h */ case    2:  		/* li R9, 0 */
		/* 82180E88h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82180E88h case    2:*/		return 0x82180E8C;
		  /* 82180E8Ch */ case    3:  		/* li R8, 0 */
		/* 82180E8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82180E8Ch case    3:*/		return 0x82180E90;
		  /* 82180E90h */ case    4:  		/* addi R7, R1, 128 */
		/* 82180E90h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 82180E90h case    4:*/		return 0x82180E94;
		  /* 82180E94h */ case    5:  		/* addi R6, R1, 132 */
		/* 82180E94h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 82180E94h case    5:*/		return 0x82180E98;
		  /* 82180E98h */ case    6:  		/* addi R5, R1, 120 */
		/* 82180E98h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 82180E98h case    6:*/		return 0x82180E9C;
		  /* 82180E9Ch */ case    7:  		/* li R4, 0 */
		/* 82180E9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82180E9Ch case    7:*/		return 0x82180EA0;
		  /* 82180EA0h */ case    8:  		/* bl 665136 */
		/* 82180EA0h case    8:*/		regs.LR = 0x82180EA4; return 0x822234D0;
		/* 82180EA0h case    8:*/		return 0x82180EA4;
		  /* 82180EA4h */ case    9:  		/* lwz R3, <#[R1 + 120]> */
		/* 82180EA4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 82180EA4h case    9:*/		return 0x82180EA8;
		  /* 82180EA8h */ case   10:  		/* bl -118120 */
		/* 82180EA8h case   10:*/		regs.LR = 0x82180EAC; return 0x82164140;
		/* 82180EA8h case   10:*/		return 0x82180EAC;
		  /* 82180EACh */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82180EACh case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82180EACh case   11:*/		return 0x82180EB0;
		  /* 82180EB0h */ case   12:  		/* bc 12, CR0_EQ, 2588 */
		/* 82180EB0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821818CC;  }
		/* 82180EB0h case   12:*/		return 0x82180EB4;
		  /* 82180EB4h */ case   13:  		/* lwz R11, <#[R27 + 4]> */
		/* 82180EB4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82180EB4h case   13:*/		return 0x82180EB8;
		  /* 82180EB8h */ case   14:  		/* lwz R29, <#[R20]> */
		/* 82180EB8h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R20 + 0x00000000) );
		/* 82180EB8h case   14:*/		return 0x82180EBC;
		  /* 82180EBCh */ case   15:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82180EBCh case   15:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180EBCh case   15:*/		return 0x82180EC0;
		  /* 82180EC0h */ case   16:  		/* addic R10, R10, -1 */
		/* 82180EC0h case   16:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82180EC0h case   16:*/		return 0x82180EC4;
		  /* 82180EC4h */ case   17:  		/* subfe R10, R10, R10 */
		/* 82180EC4h case   17:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82180EC4h case   17:*/		return 0x82180EC8;
		  /* 82180EC8h */ case   18:  		/* and R11, R10, R11 */
		/* 82180EC8h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180EC8h case   18:*/		return 0x82180ECC;
		  /* 82180ECCh */ case   19:  		/* cmplw CR6, R29, R11 */
		/* 82180ECCh case   19:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82180ECCh case   19:*/		return 0x82180ED0;
		  /* 82180ED0h */ case   20:  		/* bc 4, CR6_EQ, 44 */
		/* 82180ED0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82180EFC;  }
		/* 82180ED0h case   20:*/		return 0x82180ED4;
		  /* 82180ED4h */ case   21:  		/* lwz R10, <#[R19 + 12]> */
		/* 82180ED4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000000C) );
		/* 82180ED4h case   21:*/		return 0x82180ED8;
		  /* 82180ED8h */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 82180ED8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82180ED8h case   22:*/		return 0x82180EDC;
		  /* 82180EDCh */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 82180EDCh case   23:*/		if ( regs.CR[6].eq ) { return 0x82180EF4;  }
		/* 82180EDCh case   23:*/		return 0x82180EE0;
		  /* 82180EE0h */ case   24:  		/* lwz R11, <#[R10]> */
		/* 82180EE0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82180EE0h case   24:*/		return 0x82180EE4;
		  /* 82180EE4h */ case   25:  		/* cmplw CR6, R11, R29 */
		/* 82180EE4h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82180EE4h case   25:*/		return 0x82180EE8;
		  /* 82180EE8h */ case   26:  		/* bc 4, CR6_EQ, 16 */
		/* 82180EE8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82180EF8;  }
		/* 82180EE8h case   26:*/		return 0x82180EEC;
		  /* 82180EECh */ case   27:  		/* lwz R10, <#[R10 + 8]> */
		/* 82180EECh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82180EECh case   27:*/		return 0x82180EF0;
		  /* 82180EF0h */ case   28:  		/* b -24 */
		/* 82180EF0h case   28:*/		return 0x82180ED8;
		/* 82180EF0h case   28:*/		return 0x82180EF4;
	}
	return 0x82180EF4;
} // Block from 82180E80h-82180EF4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82180EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180EF4);
		  /* 82180EF4h */ case    0:  		/* mr R11, R21 */
		/* 82180EF4h case    0:*/		regs.R11 = regs.R21;
		/* 82180EF4h case    0:*/		return 0x82180EF8;
	}
	return 0x82180EF8;
} // Block from 82180EF4h-82180EF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82180EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180EF8);
		  /* 82180EF8h */ case    0:  		/* mr R29, R11 */
		/* 82180EF8h case    0:*/		regs.R29 = regs.R11;
		/* 82180EF8h case    0:*/		return 0x82180EFC;
	}
	return 0x82180EFC;
} // Block from 82180EF8h-82180EFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82180EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180EFC);
		  /* 82180EFCh */ case    0:  		/* mr R5, R18 */
		/* 82180EFCh case    0:*/		regs.R5 = regs.R18;
		/* 82180EFCh case    0:*/		return 0x82180F00;
		  /* 82180F00h */ case    1:  		/* mr R4, R29 */
		/* 82180F00h case    1:*/		regs.R4 = regs.R29;
		/* 82180F00h case    1:*/		return 0x82180F04;
		  /* 82180F04h */ case    2:  		/* mr R3, R19 */
		/* 82180F04h case    2:*/		regs.R3 = regs.R19;
		/* 82180F04h case    2:*/		return 0x82180F08;
		  /* 82180F08h */ case    3:  		/* bl 715360 */
		/* 82180F08h case    3:*/		regs.LR = 0x82180F0C; return 0x8222F968;
		/* 82180F08h case    3:*/		return 0x82180F0C;
		  /* 82180F0Ch */ case    4:  		/* lwz R11, <#[R19 + 12]> */
		/* 82180F0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000000C) );
		/* 82180F0Ch case    4:*/		return 0x82180F10;
		  /* 82180F10h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82180F10h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180F10h case    5:*/		return 0x82180F14;
		  /* 82180F14h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 82180F14h case    6:*/		if ( regs.CR[6].eq ) { return 0x82180F34;  }
		/* 82180F14h case    6:*/		return 0x82180F18;
		  /* 82180F18h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 82180F18h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82180F18h case    7:*/		return 0x82180F1C;
		  /* 82180F1Ch */ case    8:  		/* cmplw CR6, R28, R10 */
		/* 82180F1Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 82180F1Ch case    8:*/		return 0x82180F20;
		  /* 82180F20h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 82180F20h case    9:*/		if ( regs.CR[6].eq ) { return 0x82180F2C;  }
		/* 82180F20h case    9:*/		return 0x82180F24;
		  /* 82180F24h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 82180F24h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82180F24h case   10:*/		return 0x82180F28;
		  /* 82180F28h */ case   11:  		/* b -24 */
		/* 82180F28h case   11:*/		return 0x82180F10;
		/* 82180F28h case   11:*/		return 0x82180F2C;
	}
	return 0x82180F2C;
} // Block from 82180EFCh-82180F2Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82180F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180F2C);
		  /* 82180F2Ch */ case    0:  		/* mr R11, R24 */
		/* 82180F2Ch case    0:*/		regs.R11 = regs.R24;
		/* 82180F2Ch case    0:*/		return 0x82180F30;
		  /* 82180F30h */ case    1:  		/* b 8 */
		/* 82180F30h case    1:*/		return 0x82180F38;
		/* 82180F30h case    1:*/		return 0x82180F34;
	}
	return 0x82180F34;
} // Block from 82180F2Ch-82180F34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180F34);
		  /* 82180F34h */ case    0:  		/* mr R11, R21 */
		/* 82180F34h case    0:*/		regs.R11 = regs.R21;
		/* 82180F34h case    0:*/		return 0x82180F38;
	}
	return 0x82180F38;
} // Block from 82180F34h-82180F38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82180F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180F38);
		  /* 82180F38h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82180F38h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82180F38h case    0:*/		return 0x82180F3C;
		  /* 82180F3Ch */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82180F3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82180F50;  }
		/* 82180F3Ch case    1:*/		return 0x82180F40;
		  /* 82180F40h */ case    2:  		/* mr R5, R18 */
		/* 82180F40h case    2:*/		regs.R5 = regs.R18;
		/* 82180F40h case    2:*/		return 0x82180F44;
		  /* 82180F44h */ case    3:  		/* mr R4, R28 */
		/* 82180F44h case    3:*/		regs.R4 = regs.R28;
		/* 82180F44h case    3:*/		return 0x82180F48;
		  /* 82180F48h */ case    4:  		/* mr R3, R19 */
		/* 82180F48h case    4:*/		regs.R3 = regs.R19;
		/* 82180F48h case    4:*/		return 0x82180F4C;
		  /* 82180F4Ch */ case    5:  		/* bl 715668 */
		/* 82180F4Ch case    5:*/		regs.LR = 0x82180F50; return 0x8222FAE0;
		/* 82180F4Ch case    5:*/		return 0x82180F50;
	}
	return 0x82180F50;
} // Block from 82180F38h-82180F50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82180F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180F50);
		  /* 82180F50h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82180F50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82180F50h case    0:*/		return 0x82180F54;
		  /* 82180F54h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 82180F54h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82180F54h case    1:*/		return 0x82180F58;
		  /* 82180F58h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82180F58h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82180F60;  }
		/* 82180F58h case    2:*/		return 0x82180F5C;
		  /* 82180F5Ch */ case    3:  		/* stw R28, <#[R20]> */
		/* 82180F5Ch case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R20 + 0x00000000) );
		/* 82180F5Ch case    3:*/		return 0x82180F60;
	}
	return 0x82180F60;
} // Block from 82180F50h-82180F60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82180F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180F60);
		  /* 82180F60h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82180F60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82180F60h case    0:*/		return 0x82180F64;
		  /* 82180F64h */ case    1:  		/* b 368 */
		/* 82180F64h case    1:*/		return 0x821810D4;
		/* 82180F64h case    1:*/		return 0x82180F68;
		  /* 82180F68h */ case    2:  		/* cmplw CR6, R30, R28 */
		/* 82180F68h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82180F68h case    2:*/		return 0x82180F6C;
		  /* 82180F6Ch */ case    3:  		/* bc 12, CR6_EQ, 380 */
		/* 82180F6Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821810E8;  }
		/* 82180F6Ch case    3:*/		return 0x82180F70;
		  /* 82180F70h */ case    4:  		/* lwz R9, <#[R30 + 40]> */
		/* 82180F70h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 82180F70h case    4:*/		return 0x82180F74;
		  /* 82180F74h */ case    5:  		/* lwz R11, <#[R19 + 48]> */
		/* 82180F74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82180F74h case    5:*/		return 0x82180F78;
		  /* 82180F78h */ case    6:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 82180F78h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 82180F78h case    6:*/		return 0x82180F7C;
		  /* 82180F7Ch */ case    7:  		/* lwz R8, <#[R9]> */
		/* 82180F7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82180F7Ch case    7:*/		return 0x82180F80;
		  /* 82180F80h */ case    8:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 82180F80h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 82180F80h case    8:*/		return 0x82180F84;
		  /* 82180F84h */ case    9:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 82180F84h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 82180F84h case    9:*/		return 0x82180F88;
		  /* 82180F88h */ case   10:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 82180F88h case   10:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 82180F88h case   10:*/		return 0x82180F8C;
		  /* 82180F8Ch */ case   11:  		/* addi R11, R11, 1 */
		/* 82180F8Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180F8Ch case   11:*/		return 0x82180F90;
		  /* 82180F90h */ case   12:  		/* addi R10, R10, 31 */
		/* 82180F90h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 82180F90h case   12:*/		return 0x82180F94;
		  /* 82180F94h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82180F94h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82180F94h case   13:*/		return 0x82180F98;
		  /* 82180F98h */ case   14:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 82180F98h case   14:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 82180F98h case   14:*/		return 0x82180F9C;
		  /* 82180F9Ch */ case   15:  		/* slw R8, R24, R7 */
		/* 82180F9Ch case   15:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R7);
		/* 82180F9Ch case   15:*/		return 0x82180FA0;
		  /* 82180FA0h */ case   16:  		/* add R11, R10, R11 */
		/* 82180FA0h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180FA0h case   16:*/		return 0x82180FA4;
		  /* 82180FA4h */ case   17:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82180FA4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82180FA4h case   17:*/		return 0x82180FA8;
		  /* 82180FA8h */ case   18:  		/* and. R11, R11, R8 */
		/* 82180FA8h case   18:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82180FA8h case   18:*/		return 0x82180FAC;
		  /* 82180FACh */ case   19:  		/* bc 12, CR0_EQ, 288 */
		/* 82180FACh case   19:*/		if ( regs.CR[0].eq ) { return 0x821810CC;  }
		/* 82180FACh case   19:*/		return 0x82180FB0;
		  /* 82180FB0h */ case   20:  		/* lwz R11, <#[R30 + 12]> */
		/* 82180FB0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82180FB0h case   20:*/		return 0x82180FB4;
		  /* 82180FB4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82180FB4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180FB4h case   21:*/		return 0x82180FB8;
		  /* 82180FB8h */ case   22:  		/* bc 12, CR6_EQ, 32 */
		/* 82180FB8h case   22:*/		if ( regs.CR[6].eq ) { return 0x82180FD8;  }
		/* 82180FB8h case   22:*/		return 0x82180FBC;
		  /* 82180FBCh */ case   23:  		/* lwz R10, <#[R11]> */
		/* 82180FBCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82180FBCh case   23:*/		return 0x82180FC0;
		  /* 82180FC0h */ case   24:  		/* cmplw CR6, R29, R10 */
		/* 82180FC0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 82180FC0h case   24:*/		return 0x82180FC4;
		  /* 82180FC4h */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 82180FC4h case   25:*/		if ( regs.CR[6].eq ) { return 0x82180FD0;  }
		/* 82180FC4h case   25:*/		return 0x82180FC8;
		  /* 82180FC8h */ case   26:  		/* lwz R11, <#[R11 + 8]> */
		/* 82180FC8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82180FC8h case   26:*/		return 0x82180FCC;
		  /* 82180FCCh */ case   27:  		/* b -24 */
		/* 82180FCCh case   27:*/		return 0x82180FB4;
		/* 82180FCCh case   27:*/		return 0x82180FD0;
	}
	return 0x82180FD0;
} // Block from 82180F60h-82180FD0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82180FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180FD0);
		  /* 82180FD0h */ case    0:  		/* mr R11, R24 */
		/* 82180FD0h case    0:*/		regs.R11 = regs.R24;
		/* 82180FD0h case    0:*/		return 0x82180FD4;
		  /* 82180FD4h */ case    1:  		/* b 8 */
		/* 82180FD4h case    1:*/		return 0x82180FDC;
		/* 82180FD4h case    1:*/		return 0x82180FD8;
	}
	return 0x82180FD8;
} // Block from 82180FD0h-82180FD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180FD8);
		  /* 82180FD8h */ case    0:  		/* mr R11, R21 */
		/* 82180FD8h case    0:*/		regs.R11 = regs.R21;
		/* 82180FD8h case    0:*/		return 0x82180FDC;
	}
	return 0x82180FDC;
} // Block from 82180FD8h-82180FDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82180FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180FDC);
		  /* 82180FDCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82180FDCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82180FDCh case    0:*/		return 0x82180FE0;
		  /* 82180FE0h */ case    1:  		/* bc 12, CR0_EQ, 236 */
		/* 82180FE0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821810CC;  }
		/* 82180FE0h case    1:*/		return 0x82180FE4;
		  /* 82180FE4h */ case    2:  		/* mr R5, R18 */
		/* 82180FE4h case    2:*/		regs.R5 = regs.R18;
		/* 82180FE4h case    2:*/		return 0x82180FE8;
		  /* 82180FE8h */ case    3:  		/* mr R4, R29 */
		/* 82180FE8h case    3:*/		regs.R4 = regs.R29;
		/* 82180FE8h case    3:*/		return 0x82180FEC;
		  /* 82180FECh */ case    4:  		/* mr R3, R30 */
		/* 82180FECh case    4:*/		regs.R3 = regs.R30;
		/* 82180FECh case    4:*/		return 0x82180FF0;
		  /* 82180FF0h */ case    5:  		/* bl 715128 */
		/* 82180FF0h case    5:*/		regs.LR = 0x82180FF4; return 0x8222F968;
		/* 82180FF0h case    5:*/		return 0x82180FF4;
		  /* 82180FF4h */ case    6:  		/* lwz R11, <#[R30 + 12]> */
		/* 82180FF4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82180FF4h case    6:*/		return 0x82180FF8;
		  /* 82180FF8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82180FF8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180FF8h case    7:*/		return 0x82180FFC;
		  /* 82180FFCh */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 82180FFCh case    8:*/		if ( regs.CR[6].eq ) { return 0x8218101C;  }
		/* 82180FFCh case    8:*/		return 0x82181000;
		  /* 82181000h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 82181000h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82181000h case    9:*/		return 0x82181004;
		  /* 82181004h */ case   10:  		/* cmplw CR6, R28, R10 */
		/* 82181004h case   10:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 82181004h case   10:*/		return 0x82181008;
		  /* 82181008h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 82181008h case   11:*/		if ( regs.CR[6].eq ) { return 0x82181014;  }
		/* 82181008h case   11:*/		return 0x8218100C;
		  /* 8218100Ch */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 8218100Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8218100Ch case   12:*/		return 0x82181010;
		  /* 82181010h */ case   13:  		/* b -24 */
		/* 82181010h case   13:*/		return 0x82180FF8;
		/* 82181010h case   13:*/		return 0x82181014;
	}
	return 0x82181014;
} // Block from 82180FDCh-82181014h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82181014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181014);
		  /* 82181014h */ case    0:  		/* mr R11, R24 */
		/* 82181014h case    0:*/		regs.R11 = regs.R24;
		/* 82181014h case    0:*/		return 0x82181018;
		  /* 82181018h */ case    1:  		/* b 8 */
		/* 82181018h case    1:*/		return 0x82181020;
		/* 82181018h case    1:*/		return 0x8218101C;
	}
	return 0x8218101C;
} // Block from 82181014h-8218101Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218101Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218101C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218101C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218101C);
		  /* 8218101Ch */ case    0:  		/* mr R11, R21 */
		/* 8218101Ch case    0:*/		regs.R11 = regs.R21;
		/* 8218101Ch case    0:*/		return 0x82181020;
	}
	return 0x82181020;
} // Block from 8218101Ch-82181020h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181020);
		  /* 82181020h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82181020h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82181020h case    0:*/		return 0x82181024;
		  /* 82181024h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82181024h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82181038;  }
		/* 82181024h case    1:*/		return 0x82181028;
		  /* 82181028h */ case    2:  		/* mr R5, R18 */
		/* 82181028h case    2:*/		regs.R5 = regs.R18;
		/* 82181028h case    2:*/		return 0x8218102C;
		  /* 8218102Ch */ case    3:  		/* mr R4, R28 */
		/* 8218102Ch case    3:*/		regs.R4 = regs.R28;
		/* 8218102Ch case    3:*/		return 0x82181030;
		  /* 82181030h */ case    4:  		/* mr R3, R30 */
		/* 82181030h case    4:*/		regs.R3 = regs.R30;
		/* 82181030h case    4:*/		return 0x82181034;
		  /* 82181034h */ case    5:  		/* bl 715436 */
		/* 82181034h case    5:*/		regs.LR = 0x82181038; return 0x8222FAE0;
		/* 82181034h case    5:*/		return 0x82181038;
	}
	return 0x82181038;
} // Block from 82181020h-82181038h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82181038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181038);
		  /* 82181038h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 82181038h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 82181038h case    0:*/		return 0x8218103C;
		  /* 8218103Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8218103Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8218103Ch case    1:*/		return 0x82181040;
		  /* 82181040h */ case    2:  		/* bc 4, CR0_EQ, 140 */
		/* 82181040h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821810CC;  }
		/* 82181040h case    2:*/		return 0x82181044;
		  /* 82181044h */ case    3:  		/* lwz R11, <#[R30 + 32]> */
		/* 82181044h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82181044h case    3:*/		return 0x82181048;
		  /* 82181048h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82181048h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82181048h case    4:*/		return 0x8218104C;
		  /* 8218104Ch */ case    5:  		/* addic. R31, R11, -40 */
		/* 8218104Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 8218104Ch case    5:*/		return 0x82181050;
		  /* 82181050h */ case    6:  		/* bc 12, CR0_EQ, 124 */
		/* 82181050h case    6:*/		if ( regs.CR[0].eq ) { return 0x821810CC;  }
		/* 82181050h case    6:*/		return 0x82181054;
		  /* 82181054h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181054h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181054h case    7:*/		return 0x82181058;
		  /* 82181058h */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82181058h case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82181058h case    8:*/		return 0x8218105C;
		  /* 8218105Ch */ case    9:  		/* cmplwi CR6, R11, 86 */
		/* 8218105Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8218105Ch case    9:*/		return 0x82181060;
		  /* 82181060h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 82181060h case   10:*/		if ( regs.CR[6].eq ) { return 0x82181090;  }
		/* 82181060h case   10:*/		return 0x82181064;
		  /* 82181064h */ case   11:  		/* cmplwi CR6, R11, 87 */
		/* 82181064h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 82181064h case   11:*/		return 0x82181068;
		  /* 82181068h */ case   12:  		/* bc 12, CR6_EQ, 40 */
		/* 82181068h case   12:*/		if ( regs.CR[6].eq ) { return 0x82181090;  }
		/* 82181068h case   12:*/		return 0x8218106C;
		  /* 8218106Ch */ case   13:  		/* cmplwi CR6, R11, 89 */
		/* 8218106Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8218106Ch case   13:*/		return 0x82181070;
		  /* 82181070h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 82181070h case   14:*/		if ( regs.CR[6].eq ) { return 0x82181090;  }
		/* 82181070h case   14:*/		return 0x82181074;
		  /* 82181074h */ case   15:  		/* cmplwi CR6, R11, 90 */
		/* 82181074h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 82181074h case   15:*/		return 0x82181078;
		  /* 82181078h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 82181078h case   16:*/		if ( regs.CR[6].eq ) { return 0x82181090;  }
		/* 82181078h case   16:*/		return 0x8218107C;
		  /* 8218107Ch */ case   17:  		/* cmplwi CR6, R11, 84 */
		/* 8218107Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8218107Ch case   17:*/		return 0x82181080;
		  /* 82181080h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 82181080h case   18:*/		if ( regs.CR[6].eq ) { return 0x82181090;  }
		/* 82181080h case   18:*/		return 0x82181084;
		  /* 82181084h */ case   19:  		/* cmplwi CR6, R11, 85 */
		/* 82181084h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 82181084h case   19:*/		return 0x82181088;
		  /* 82181088h */ case   20:  		/* mr R11, R21 */
		/* 82181088h case   20:*/		regs.R11 = regs.R21;
		/* 82181088h case   20:*/		return 0x8218108C;
		  /* 8218108Ch */ case   21:  		/* bc 4, CR6_EQ, 8 */
		/* 8218108Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x82181094;  }
		/* 8218108Ch case   21:*/		return 0x82181090;
	}
	return 0x82181090;
} // Block from 82181038h-82181090h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82181090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181090);
		  /* 82181090h */ case    0:  		/* mr R11, R24 */
		/* 82181090h case    0:*/		regs.R11 = regs.R24;
		/* 82181090h case    0:*/		return 0x82181094;
	}
	return 0x82181094;
} // Block from 82181090h-82181094h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181094);
		  /* 82181094h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82181094h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82181094h case    0:*/		return 0x82181098;
		  /* 82181098h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 82181098h case    1:*/		if ( regs.CR[0].eq ) { return 0x821810CC;  }
		/* 82181098h case    1:*/		return 0x8218109C;
		  /* 8218109Ch */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8218109Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218109Ch case    2:*/		return 0x821810A0;
		  /* 821810A0h */ case    3:  		/* mr R3, R18 */
		/* 821810A0h case    3:*/		regs.R3 = regs.R18;
		/* 821810A0h case    3:*/		return 0x821810A4;
		  /* 821810A4h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821810A4h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821810A4h case    4:*/		return 0x821810A8;
		  /* 821810A8h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821810A8h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821810A8h case    5:*/		return 0x821810AC;
		  /* 821810ACh */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821810ACh case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821810ACh case    6:*/		return 0x821810B0;
		  /* 821810B0h */ case    7:  		/* bl -117888 */
		/* 821810B0h case    7:*/		regs.LR = 0x821810B4; return 0x82164430;
		/* 821810B0h case    7:*/		return 0x821810B4;
		  /* 821810B4h */ case    8:  		/* addi R11, R31, -16 */
		/* 821810B4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821810B4h case    8:*/		return 0x821810B8;
		  /* 821810B8h */ case    9:  		/* add R11, R3, R11 */
		/* 821810B8h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821810B8h case    9:*/		return 0x821810BC;
		  /* 821810BCh */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821810BCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821810BCh case   10:*/		return 0x821810C0;
		  /* 821810C0h */ case   11:  		/* cmplw CR6, R29, R10 */
		/* 821810C0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 821810C0h case   11:*/		return 0x821810C4;
		  /* 821810C4h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821810C4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821810CC;  }
		/* 821810C4h case   12:*/		return 0x821810C8;
		  /* 821810C8h */ case   13:  		/* stw R28, <#[R11]> */
		/* 821810C8h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821810C8h case   13:*/		return 0x821810CC;
	}
	return 0x821810CC;
} // Block from 82181094h-821810CCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821810CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821810CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821810CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821810CC);
		  /* 821810CCh */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821810CCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821810CCh case    0:*/		return 0x821810D0;
		  /* 821810D0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821810D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821810D0h case    1:*/		return 0x821810D4;
	}
	return 0x821810D4;
} // Block from 821810CCh-821810D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821810D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821810D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821810D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821810D4);
		  /* 821810D4h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821810D4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821810D4h case    0:*/		return 0x821810D8;
		  /* 821810D8h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821810D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821810E8;  }
		/* 821810D8h case    1:*/		return 0x821810DC;
		  /* 821810DCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821810DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821810DCh case    2:*/		return 0x821810E0;
		  /* 821810E0h */ case    3:  		/* mr R30, R11 */
		/* 821810E0h case    3:*/		regs.R30 = regs.R11;
		/* 821810E0h case    3:*/		return 0x821810E4;
		  /* 821810E4h */ case    4:  		/* bc 4, CR6_EQ, -380 */
		/* 821810E4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82180F68;  }
		/* 821810E4h case    4:*/		return 0x821810E8;
	}
	return 0x821810E8;
} // Block from 821810D4h-821810E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821810E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821810E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821810E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821810E8);
		  /* 821810E8h */ case    0:  		/* mr R3, R18 */
		/* 821810E8h case    0:*/		regs.R3 = regs.R18;
		/* 821810E8h case    0:*/		return 0x821810EC;
		  /* 821810ECh */ case    1:  		/* bl 434740 */
		/* 821810ECh case    1:*/		regs.LR = 0x821810F0; return 0x821EB320;
		/* 821810ECh case    1:*/		return 0x821810F0;
	}
	return 0x821810F0;
} // Block from 821810E8h-821810F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821810F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821810F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821810F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821810F0);
		  /* 821810F0h */ case    0:  		/* lwz R31, <#[R27 + 4]> */
		/* 821810F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000004) );
		/* 821810F0h case    0:*/		return 0x821810F4;
		  /* 821810F4h */ case    1:  		/* mr R28, R19 */
		/* 821810F4h case    1:*/		regs.R28 = regs.R19;
		/* 821810F4h case    1:*/		return 0x821810F8;
		  /* 821810F8h */ case    2:  		/* mr R30, R21 */
		/* 821810F8h case    2:*/		regs.R30 = regs.R21;
		/* 821810F8h case    2:*/		return 0x821810FC;
		  /* 821810FCh */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821810FCh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821810FCh case    3:*/		return 0x82181100;
		  /* 82181100h */ case    4:  		/* mr R27, R24 */
		/* 82181100h case    4:*/		regs.R27 = regs.R24;
		/* 82181100h case    4:*/		return 0x82181104;
		  /* 82181104h */ case    5:  		/* bc 4, CR0_EQ, 2004 */
		/* 82181104h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821818D8;  }
		/* 82181104h case    5:*/		return 0x82181108;
		  /* 82181108h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 82181108h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82181108h case    6:*/		return 0x8218110C;
		  /* 8218110Ch */ case    7:  		/* bc 12, CR6_EQ, 1996 */
		/* 8218110Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821818D8;  }
		/* 8218110Ch case    7:*/		return 0x82181110;
		  /* 82181110h */ case    8:  		/* lwz R11, <#[R19 + 48]> */
		/* 82181110h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82181110h case    8:*/		return 0x82181114;
		  /* 82181114h */ case    9:  		/* lwz R9, <#[R31 + 40]> */
		/* 82181114h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82181114h case    9:*/		return 0x82181118;
		  /* 82181118h */ case   10:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 82181118h case   10:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 82181118h case   10:*/		return 0x8218111C;
		  /* 8218111Ch */ case   11:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8218111Ch case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8218111Ch case   11:*/		return 0x82181120;
		  /* 82181120h */ case   12:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 82181120h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 82181120h case   12:*/		return 0x82181124;
		  /* 82181124h */ case   13:  		/* lwz R8, <#[R9]> */
		/* 82181124h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82181124h case   13:*/		return 0x82181128;
		  /* 82181128h */ case   14:  		/* addi R7, R11, 1 */
		/* 82181128h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1);
		/* 82181128h case   14:*/		return 0x8218112C;
		  /* 8218112Ch */ case   15:  		/* slw R6, R24, R10 */
		/* 8218112Ch case   15:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R24,regs.R10);
		/* 8218112Ch case   15:*/		return 0x82181130;
		  /* 82181130h */ case   16:  		/* rlwinm R11, R8, 0, 13, 31 */
		/* 82181130h case   16:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R8);
		/* 82181130h case   16:*/		return 0x82181134;
		  /* 82181134h */ case   17:  		/* rlwinm R10, R7, 2, 0, 29 */
		/* 82181134h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 82181134h case   17:*/		return 0x82181138;
		  /* 82181138h */ case   18:  		/* addi R11, R11, 31 */
		/* 82181138h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82181138h case   18:*/		return 0x8218113C;
		  /* 8218113Ch */ case   19:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 8218113Ch case   19:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 8218113Ch case   19:*/		return 0x82181140;
		  /* 82181140h */ case   20:  		/* add R11, R11, R10 */
		/* 82181140h case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82181140h case   20:*/		return 0x82181144;
		  /* 82181144h */ case   21:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82181144h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82181144h case   21:*/		return 0x82181148;
		  /* 82181148h */ case   22:  		/* and. R11, R11, R6 */
		/* 82181148h case   22:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82181148h case   22:*/		return 0x8218114C;
		  /* 8218114Ch */ case   23:  		/* bc 12, CR0_EQ, 248 */
		/* 8218114Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x82181244;  }
		/* 8218114Ch case   23:*/		return 0x82181150;
		  /* 82181150h */ case   24:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 82181150h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 82181150h case   24:*/		return 0x82181154;
		  /* 82181154h */ case   25:  		/* bc 12, CR0_EQ, 60 */
		/* 82181154h case   25:*/		if ( regs.CR[0].eq ) { return 0x82181190;  }
		/* 82181154h case   25:*/		return 0x82181158;
		  /* 82181158h */ case   26:  		/* lwz R9, <#[R31 + 48]> */
		/* 82181158h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 82181158h case   26:*/		return 0x8218115C;
		  /* 8218115Ch */ case   27:  		/* subf R11, R31, R25 */
		/* 8218115Ch case   27:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R25);
		/* 8218115Ch case   27:*/		return 0x82181160;
		  /* 82181160h */ case   28:  		/* lwz R10, <#[R31 + 76]> */
		/* 82181160h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 82181160h case   28:*/		return 0x82181164;
		  /* 82181164h */ case   29:  		/* subfic R11, R11, 0 */
		/* 82181164h case   29:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82181164h case   29:*/		return 0x82181168;
		  /* 82181168h */ case   30:  		/* stw R21, <#[R31 + 112]> */
		/* 82181168h case   30:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000070) );
		/* 82181168h case   30:*/		return 0x8218116C;
		  /* 8218116Ch */ case   31:  		/* rlwinm R9, R9, 0, 9, 7 */
		/* 8218116Ch case   31:*/		cpu::op::rlwinm<0,0,9,7>(regs,&regs.R9,regs.R9);
		/* 8218116Ch case   31:*/		return 0x82181170;
		  /* 82181170h */ case   32:  		/* stw R21, <#[R31 + 108]> */
		/* 82181170h case   32:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x0000006C) );
		/* 82181170h case   32:*/		return 0x82181174;
		  /* 82181174h */ case   33:  		/* rlwinm R10, R10, 0, 10, 5 */
		/* 82181174h case   33:*/		cpu::op::rlwinm<0,0,10,5>(regs,&regs.R10,regs.R10);
		/* 82181174h case   33:*/		return 0x82181178;
		  /* 82181178h */ case   34:  		/* stw R21, <#[R31 + 72]> */
		/* 82181178h case   34:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000048) );
		/* 82181178h case   34:*/		return 0x8218117C;
		  /* 8218117Ch */ case   35:  		/* rlwinm R9, R9, 0, 6, 3 */
		/* 8218117Ch case   35:*/		cpu::op::rlwinm<0,0,6,3>(regs,&regs.R9,regs.R9);
		/* 8218117Ch case   35:*/		return 0x82181180;
		  /* 82181180h */ case   36:  		/* subfe R11, R11, R11 */
		/* 82181180h case   36:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82181180h case   36:*/		return 0x82181184;
		  /* 82181184h */ case   37:  		/* stw R10, <#[R31 + 76]> */
		/* 82181184h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 82181184h case   37:*/		return 0x82181188;
		  /* 82181188h */ case   38:  		/* stw R9, <#[R31 + 48]> */
		/* 82181188h case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 82181188h case   38:*/		return 0x8218118C;
		  /* 8218118Ch */ case   39:  		/* and R27, R11, R27 */
		/* 8218118Ch case   39:*/		cpu::op::and<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 8218118Ch case   39:*/		return 0x82181190;
	}
	return 0x82181190;
} // Block from 821810F0h-82181190h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82181190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181190);
		  /* 82181190h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82181190h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82181190h case    0:*/		return 0x82181194;
		  /* 82181194h */ case    1:  		/* rlwinm R10, R28, 0, 0, 30 */
		/* 82181194h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R28);
		/* 82181194h case    1:*/		return 0x82181198;
		  /* 82181198h */ case    2:  		/* addi R9, R11, 4 */
		/* 82181198h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82181198h case    2:*/		return 0x8218119C;
		  /* 8218119Ch */ case    3:  		/* addi R8, R10, 4 */
		/* 8218119Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8218119Ch case    3:*/		return 0x821811A0;
		  /* 821811A0h */ case    4:  		/* mr R28, R31 */
		/* 821811A0h case    4:*/		regs.R28 = regs.R31;
		/* 821811A0h case    4:*/		return 0x821811A4;
		  /* 821811A4h */ case    5:  		/* lwz R7, <#[R11 + 4]> */
		/* 821811A4h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821811A4h case    5:*/		return 0x821811A8;
		  /* 821811A8h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821811A8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821811A8h case    6:*/		return 0x821811AC;
		  /* 821811ACh */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821811ACh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821811ACh case    7:*/		return 0x821811B0;
		  /* 821811B0h */ case    8:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821811B0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821811B0h case    8:*/		return 0x821811B4;
		  /* 821811B4h */ case    9:  		/* stw R6, <#[R7]> */
		/* 821811B4h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821811B4h case    9:*/		return 0x821811B8;
		  /* 821811B8h */ case   10:  		/* lwz R7, <#[R11]> */
		/* 821811B8h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821811B8h case   10:*/		return 0x821811BC;
		  /* 821811BCh */ case   11:  		/* lwz R6, <#[R11 + 4]> */
		/* 821811BCh case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821811BCh case   11:*/		return 0x821811C0;
		  /* 821811C0h */ case   12:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821811C0h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821811C0h case   12:*/		return 0x821811C4;
		  /* 821811C4h */ case   13:  		/* stw R6, <#[R7]> */
		/* 821811C4h case   13:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821811C4h case   13:*/		return 0x821811C8;
		  /* 821811C8h */ case   14:  		/* lwz R7, <#[R10 + 4]> */
		/* 821811C8h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821811C8h case   14:*/		return 0x821811CC;
		  /* 821811CCh */ case   15:  		/* stw R7, <#[R11 + 4]> */
		/* 821811CCh case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821811CCh case   15:*/		return 0x821811D0;
		  /* 821811D0h */ case   16:  		/* lwz R7, <#[R10 + 4]> */
		/* 821811D0h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821811D0h case   16:*/		return 0x821811D4;
		  /* 821811D4h */ case   17:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821811D4h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821811D4h case   17:*/		return 0x821811D8;
		  /* 821811D8h */ case   18:  		/* stw R9, <#[R7]> */
		/* 821811D8h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821811D8h case   18:*/		return 0x821811DC;
		  /* 821811DCh */ case   19:  		/* stw R8, <#[R11]> */
		/* 821811DCh case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821811DCh case   19:*/		return 0x821811E0;
		  /* 821811E0h */ case   20:  		/* stw R11, <#[R10 + 4]> */
		/* 821811E0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821811E0h case   20:*/		return 0x821811E4;
		  /* 821811E4h */ case   21:  		/* bc 4, CR6_EQ, 96 */
		/* 821811E4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82181244;  }
		/* 821811E4h case   21:*/		return 0x821811E8;
		  /* 821811E8h */ case   22:  		/* lwz R29, <#[R31 + 12]> */
		/* 821811E8h case   22:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821811E8h case   22:*/		return 0x821811EC;
		  /* 821811ECh */ case   23:  		/* cmplwi CR6, R29, 0 */
		/* 821811ECh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821811ECh case   23:*/		return 0x821811F0;
		  /* 821811F0h */ case   24:  		/* bc 12, CR6_EQ, 80 */
		/* 821811F0h case   24:*/		if ( regs.CR[6].eq ) { return 0x82181240;  }
		/* 821811F0h case   24:*/		return 0x821811F4;
		  /* 821811F4h */ case   25:  		/* lwz R30, <#[R29]> */
		/* 821811F4h case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821811F4h case   25:*/		return 0x821811F8;
		  /* 821811F8h */ case   26:  		/* mr R4, R19 */
		/* 821811F8h case   26:*/		regs.R4 = regs.R19;
		/* 821811F8h case   26:*/		return 0x821811FC;
		  /* 821811FCh */ case   27:  		/* mr R3, R30 */
		/* 821811FCh case   27:*/		regs.R3 = regs.R30;
		/* 821811FCh case   27:*/		return 0x82181200;
		  /* 82181200h */ case   28:  		/* bl 715728 */
		/* 82181200h case   28:*/		regs.LR = 0x82181204; return 0x8222FDD0;
		/* 82181200h case   28:*/		return 0x82181204;
		  /* 82181204h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82181204h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82181204h case   29:*/		return 0x82181208;
		  /* 82181208h */ case   30:  		/* bc 4, CR0_EQ, 48 */
		/* 82181208h case   30:*/		if ( !regs.CR[0].eq ) { return 0x82181238;  }
		/* 82181208h case   30:*/		return 0x8218120C;
		  /* 8218120Ch */ case   31:  		/* lwz R11, <#[R30 + 48]> */
		/* 8218120Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8218120Ch case   31:*/		return 0x82181210;
		  /* 82181210h */ case   32:  		/* lwz R10, <#[R31 + 40]> */
		/* 82181210h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82181210h case   32:*/		return 0x82181214;
		  /* 82181214h */ case   33:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 82181214h case   33:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 82181214h case   33:*/		return 0x82181218;
		  /* 82181218h */ case   34:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 82181218h case   34:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 82181218h case   34:*/		return 0x8218121C;
		  /* 8218121Ch */ case   35:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8218121Ch case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8218121Ch case   35:*/		return 0x82181220;
		  /* 82181220h */ case   36:  		/* addi R11, R11, 1 */
		/* 82181220h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82181220h case   36:*/		return 0x82181224;
		  /* 82181224h */ case   37:  		/* slw R9, R24, R9 */
		/* 82181224h case   37:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 82181224h case   37:*/		return 0x82181228;
		  /* 82181228h */ case   38:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82181228h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82181228h case   38:*/		return 0x8218122C;
		  /* 8218122Ch */ case   39:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8218122Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218122Ch case   39:*/		return 0x82181230;
		  /* 82181230h */ case   40:  		/* and. R11, R9, R11 */
		/* 82181230h case   40:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82181230h case   40:*/		return 0x82181234;
		  /* 82181234h */ case   41:  		/* bc 12, CR0_EQ, 16 */
		/* 82181234h case   41:*/		if ( regs.CR[0].eq ) { return 0x82181244;  }
		/* 82181234h case   41:*/		return 0x82181238;
	}
	return 0x82181238;
} // Block from 82181190h-82181238h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82181238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181238);
		  /* 82181238h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 82181238h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 82181238h case    0:*/		return 0x8218123C;
		  /* 8218123Ch */ case    1:  		/* b -80 */
		/* 8218123Ch case    1:*/		return 0x821811EC;
		/* 8218123Ch case    1:*/		return 0x82181240;
	}
	return 0x82181240;
} // Block from 82181238h-82181240h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181240);
		  /* 82181240h */ case    0:  		/* mr R30, R21 */
		/* 82181240h case    0:*/		regs.R30 = regs.R21;
		/* 82181240h case    0:*/		return 0x82181244;
	}
	return 0x82181244;
} // Block from 82181240h-82181244h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181244);
		  /* 82181244h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82181244h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82181244h case    0:*/		return 0x82181248;
		  /* 82181248h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 82181248h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 82181248h case    1:*/		return 0x8218124C;
		  /* 8218124Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8218124Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8218124Ch case    2:*/		return 0x82181250;
		  /* 82181250h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82181250h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218125C;  }
		/* 82181250h case    3:*/		return 0x82181254;
		  /* 82181254h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82181254h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82181254h case    4:*/		return 0x82181258;
		  /* 82181258h */ case    5:  		/* bc 4, CR6_EQ, -328 */
		/* 82181258h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82181110;  }
		/* 82181258h case    5:*/		return 0x8218125C;
	}
	return 0x8218125C;
} // Block from 82181244h-8218125Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218125Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218125C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218125C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218125C);
		  /* 8218125Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8218125Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8218125Ch case    0:*/		return 0x82181260;
		  /* 82181260h */ case    1:  		/* bc 12, CR6_EQ, 1656 */
		/* 82181260h case    1:*/		if ( regs.CR[6].eq ) { return 0x821818D8;  }
		/* 82181260h case    1:*/		return 0x82181264;
		  /* 82181264h */ case    2:  		/* mr R8, R26 */
		/* 82181264h case    2:*/		regs.R8 = regs.R26;
		/* 82181264h case    2:*/		return 0x82181268;
		  /* 82181268h */ case    3:  		/* li R7, 64 */
		/* 82181268h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 82181268h case    3:*/		return 0x8218126C;
		  /* 8218126Ch */ case    4:  		/* mr R6, R28 */
		/* 8218126Ch case    4:*/		regs.R6 = regs.R28;
		/* 8218126Ch case    4:*/		return 0x82181270;
		  /* 82181270h */ case    5:  		/* mr R5, R30 */
		/* 82181270h case    5:*/		regs.R5 = regs.R30;
		/* 82181270h case    5:*/		return 0x82181274;
		  /* 82181274h */ case    6:  		/* mr R4, R19 */
		/* 82181274h case    6:*/		regs.R4 = regs.R19;
		/* 82181274h case    6:*/		return 0x82181278;
		  /* 82181278h */ case    7:  		/* mr R3, R18 */
		/* 82181278h case    7:*/		regs.R3 = regs.R18;
		/* 82181278h case    7:*/		return 0x8218127C;
		  /* 8218127Ch */ case    8:  		/* bl -23508 */
		/* 8218127Ch case    8:*/		regs.LR = 0x82181280; return 0x8217B6A8;
		/* 8218127Ch case    8:*/		return 0x82181280;
		  /* 82181280h */ case    9:  		/* lwz R11, <#[R26 + 28]> */
		/* 82181280h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 82181280h case    9:*/		return 0x82181284;
		  /* 82181284h */ case   10:  		/* lwz R10, <#[R3 + 40]> */
		/* 82181284h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 82181284h case   10:*/		return 0x82181288;
		  /* 82181288h */ case   11:  		/* lwz R11, <#[R11 + 48]> */
		/* 82181288h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82181288h case   11:*/		return 0x8218128C;
		  /* 8218128Ch */ case   12:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8218128Ch case   12:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8218128Ch case   12:*/		return 0x82181290;
		  /* 82181290h */ case   13:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 82181290h case   13:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 82181290h case   13:*/		return 0x82181294;
		  /* 82181294h */ case   14:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82181294h case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82181294h case   14:*/		return 0x82181298;
		  /* 82181298h */ case   15:  		/* addi R11, R11, 1 */
		/* 82181298h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82181298h case   15:*/		return 0x8218129C;
		  /* 8218129Ch */ case   16:  		/* slw R9, R24, R9 */
		/* 8218129Ch case   16:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 8218129Ch case   16:*/		return 0x821812A0;
		  /* 821812A0h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821812A0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821812A0h case   17:*/		return 0x821812A4;
		  /* 821812A4h */ case   18:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821812A4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821812A4h case   18:*/		return 0x821812A8;
		  /* 821812A8h */ case   19:  		/* and. R11, R11, R9 */
		/* 821812A8h case   19:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821812A8h case   19:*/		return 0x821812AC;
		  /* 821812ACh */ case   20:  		/* bc 4, CR0_EQ, 1440 */
		/* 821812ACh case   20:*/		if ( !regs.CR[0].eq ) { return 0x8218184C;  }
		/* 821812ACh case   20:*/		return 0x821812B0;
		  /* 821812B0h */ case   21:  		/* li R4, 4800 */
		/* 821812B0h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821812B0h case   21:*/		return 0x821812B4;
		  /* 821812B4h */ case   22:  		/* mr R3, R18 */
		/* 821812B4h case   22:*/		regs.R3 = regs.R18;
		/* 821812B4h case   22:*/		return 0x821812B8;
		  /* 821812B8h */ case   23:  		/* bl -193616 */
		/* 821812B8h case   23:*/		regs.LR = 0x821812BC; return 0x82151E68;
		/* 821812B8h case   23:*/		return 0x821812BC;
	}
	return 0x821812BC;
} // Block from 8218125Ch-821812BCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821812BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821812BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821812BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821812BC);
		  /* 821812BCh */ case    0:  		/* li R6, 0 */
		/* 821812BCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821812BCh case    0:*/		return 0x821812C0;
		  /* 821812C0h */ case    1:  		/* li R5, 0 */
		/* 821812C0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821812C0h case    1:*/		return 0x821812C4;
		  /* 821812C4h */ case    2:  		/* li R4, 84 */
		/* 821812C4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 821812C4h case    2:*/		return 0x821812C8;
		  /* 821812C8h */ case    3:  		/* bl -118424 */
		/* 821812C8h case    3:*/		regs.LR = 0x821812CC; return 0x82164430;
		/* 821812C8h case    3:*/		return 0x821812CC;
		  /* 821812CCh */ case    4:  		/* addi R10, R23, -20 */
		/* 821812CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0xFFFFFFEC);
		/* 821812CCh case    4:*/		return 0x821812D0;
		  /* 821812D0h */ case    5:  		/* lwz R11, <#[R18 + 616]> */
		/* 821812D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000268) );
		/* 821812D0h case    5:*/		return 0x821812D4;
		  /* 821812D4h */ case    6:  		/* lwzx R10, <#[R3 + R10]> */
		/* 821812D4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821812D4h case    6:*/		return 0x821812D8;
		  /* 821812D8h */ case    7:  		/* rlwinm R10, R10, 27, 27, 31 */
		/* 821812D8h case    7:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R10,regs.R10);
		/* 821812D8h case    7:*/		return 0x821812DC;
		  /* 821812DCh */ case    8:  		/* mulli R10, R10, 68 */
		/* 821812DCh case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821812DCh case    8:*/		return 0x821812E0;
		  /* 821812E0h */ case    9:  		/* add R29, R10, R11 */
		/* 821812E0h case    9:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821812E0h case    9:*/		return 0x821812E4;
		  /* 821812E4h */ case   10:  		/* lwz R11, <#[R29 + 16]> */
		/* 821812E4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821812E4h case   10:*/		return 0x821812E8;
		  /* 821812E8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821812E8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821812E8h case   11:*/		return 0x821812EC;
		  /* 821812ECh */ case   12:  		/* bc 12, CR6_EQ, 60 */
		/* 821812ECh case   12:*/		if ( regs.CR[6].eq ) { return 0x82181328;  }
		/* 821812ECh case   12:*/		return 0x821812F0;
		  /* 821812F0h */ case   13:  		/* b 44 */
		/* 821812F0h case   13:*/		return 0x8218131C;
		/* 821812F0h case   13:*/		return 0x821812F4;
		  /* 821812F4h */ case   14:  		/* lwz R11, <#[R29 + 16]> */
		/* 821812F4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821812F4h case   14:*/		return 0x821812F8;
		  /* 821812F8h */ case   15:  		/* b 16 */
		/* 821812F8h case   15:*/		return 0x82181308;
		/* 821812F8h case   15:*/		return 0x821812FC;
		  /* 821812FCh */ case   16:  		/* lwz R10, <#[R11 + 48]> */
		/* 821812FCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821812FCh case   16:*/		return 0x82181300;
		  /* 82181300h */ case   17:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82181300h case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82181300h case   17:*/		return 0x82181304;
		  /* 82181304h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 82181304h case   18:*/		if ( regs.CR[0].eq ) { return 0x82181314;  }
		/* 82181304h case   18:*/		return 0x82181308;
	}
	return 0x82181308;
} // Block from 821812BCh-82181308h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82181308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181308);
		  /* 82181308h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 82181308h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 82181308h case    0:*/		return 0x8218130C;
		  /* 8218130Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8218130Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218130Ch case    1:*/		return 0x82181310;
		  /* 82181310h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 82181310h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821812FC;  }
		/* 82181310h case    2:*/		return 0x82181314;
	}
	return 0x82181314;
} // Block from 82181308h-82181314h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181314);
		  /* 82181314h */ case    0:  		/* stw R11, <#[R29 + 16]> */
		/* 82181314h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82181314h case    0:*/		return 0x82181318;
		  /* 82181318h */ case    1:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82181318h case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82181318h case    1:*/		return 0x8218131C;
	}
	return 0x8218131C;
} // Block from 82181314h-8218131Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218131Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218131C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218131C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218131C);
		  /* 8218131Ch */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 8218131Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8218131Ch case    0:*/		return 0x82181320;
		  /* 82181320h */ case    1:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 82181320h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 82181320h case    1:*/		return 0x82181324;
		  /* 82181324h */ case    2:  		/* bc 4, CR0_EQ, -48 */
		/* 82181324h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821812F4;  }
		/* 82181324h case    2:*/		return 0x82181328;
	}
	return 0x82181328;
} // Block from 8218131Ch-82181328h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181328);
		  /* 82181328h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 82181328h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82181328h case    0:*/		return 0x8218132C;
		  /* 8218132Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8218132Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218132Ch case    1:*/		return 0x82181330;
		  /* 82181330h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 82181330h case    2:*/		if ( regs.CR[6].eq ) { return 0x82181394;  }
		/* 82181330h case    2:*/		return 0x82181334;
		  /* 82181334h */ case    3:  		/* b 44 */
		/* 82181334h case    3:*/		return 0x82181360;
		/* 82181334h case    3:*/		return 0x82181338;
		  /* 82181338h */ case    4:  		/* lwz R11, <#[R29 + 12]> */
		/* 82181338h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82181338h case    4:*/		return 0x8218133C;
		  /* 8218133Ch */ case    5:  		/* b 16 */
		/* 8218133Ch case    5:*/		return 0x8218134C;
		/* 8218133Ch case    5:*/		return 0x82181340;
		  /* 82181340h */ case    6:  		/* lwz R10, <#[R11 + 48]> */
		/* 82181340h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82181340h case    6:*/		return 0x82181344;
		  /* 82181344h */ case    7:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82181344h case    7:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82181344h case    7:*/		return 0x82181348;
		  /* 82181348h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 82181348h case    8:*/		if ( regs.CR[0].eq ) { return 0x82181358;  }
		/* 82181348h case    8:*/		return 0x8218134C;
	}
	return 0x8218134C;
} // Block from 82181328h-8218134Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8218134Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218134C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218134C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218134C);
		  /* 8218134Ch */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 8218134Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8218134Ch case    0:*/		return 0x82181350;
		  /* 82181350h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82181350h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181350h case    1:*/		return 0x82181354;
		  /* 82181354h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 82181354h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82181340;  }
		/* 82181354h case    2:*/		return 0x82181358;
	}
	return 0x82181358;
} // Block from 8218134Ch-82181358h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181358);
		  /* 82181358h */ case    0:  		/* stw R11, <#[R29 + 12]> */
		/* 82181358h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82181358h case    0:*/		return 0x8218135C;
		  /* 8218135Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8218135Ch case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8218135Ch case    1:*/		return 0x82181360;
	}
	return 0x82181360;
} // Block from 82181358h-82181360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181360);
		  /* 82181360h */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 82181360h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82181360h case    0:*/		return 0x82181364;
		  /* 82181364h */ case    1:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 82181364h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 82181364h case    1:*/		return 0x82181368;
		  /* 82181368h */ case    2:  		/* bc 4, CR0_EQ, -48 */
		/* 82181368h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82181338;  }
		/* 82181368h case    2:*/		return 0x8218136C;
		  /* 8218136Ch */ case    3:  		/* b 40 */
		/* 8218136Ch case    3:*/		return 0x82181394;
		/* 8218136Ch case    3:*/		return 0x82181370;
		  /* 82181370h */ case    4:  		/* lwz R11, <#[R29 + 8]> */
		/* 82181370h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82181370h case    4:*/		return 0x82181374;
		  /* 82181374h */ case    5:  		/* b 16 */
		/* 82181374h case    5:*/		return 0x82181384;
		/* 82181374h case    5:*/		return 0x82181378;
		  /* 82181378h */ case    6:  		/* lwz R10, <#[R11 + 48]> */
		/* 82181378h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82181378h case    6:*/		return 0x8218137C;
		  /* 8218137Ch */ case    7:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8218137Ch case    7:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8218137Ch case    7:*/		return 0x82181380;
		  /* 82181380h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 82181380h case    8:*/		if ( regs.CR[0].eq ) { return 0x82181390;  }
		/* 82181380h case    8:*/		return 0x82181384;
	}
	return 0x82181384;
} // Block from 82181360h-82181384h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82181384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181384);
		  /* 82181384h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 82181384h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 82181384h case    0:*/		return 0x82181388;
		  /* 82181388h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82181388h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181388h case    1:*/		return 0x8218138C;
		  /* 8218138Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8218138Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82181378;  }
		/* 8218138Ch case    2:*/		return 0x82181390;
	}
	return 0x82181390;
} // Block from 82181384h-82181390h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181390);
		  /* 82181390h */ case    0:  		/* stw R11, <#[R29 + 8]> */
		/* 82181390h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82181390h case    0:*/		return 0x82181394;
	}
	return 0x82181394;
} // Block from 82181390h-82181394h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181394);
		  /* 82181394h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 82181394h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82181394h case    0:*/		return 0x82181398;
		  /* 82181398h */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 82181398h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82181398h case    1:*/		return 0x8218139C;
		  /* 8218139Ch */ case    2:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8218139Ch case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8218139Ch case    2:*/		return 0x821813A0;
		  /* 821813A0h */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 821813A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181370;  }
		/* 821813A0h case    3:*/		return 0x821813A4;
		  /* 821813A4h */ case    4:  		/* lwz R10, <#[R29 + 8]> */
		/* 821813A4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821813A4h case    4:*/		return 0x821813A8;
		  /* 821813A8h */ case    5:  		/* lwz R11, <#[R10 + 36]> */
		/* 821813A8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000024) );
		/* 821813A8h case    5:*/		return 0x821813AC;
		  /* 821813ACh */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821813ACh case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821813ACh case    6:*/		return 0x821813B0;
		  /* 821813B0h */ case    7:  		/* bc 4, CR0_EQ, 1332 */
		/* 821813B0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821818E4;  }
		/* 821813B0h case    7:*/		return 0x821813B4;
		  /* 821813B4h */ case    8:  		/* lwz R11, <#[R10 + 32]> */
		/* 821813B4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 821813B4h case    8:*/		return 0x821813B8;
		  /* 821813B8h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821813B8h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821813B8h case    9:*/		return 0x821813BC;
		  /* 821813BCh */ case   10:  		/* addic. R31, R11, -40 */
		/* 821813BCh case   10:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821813BCh case   10:*/		return 0x821813C0;
		  /* 821813C0h */ case   11:  		/* bc 12, CR0_EQ, 1316 */
		/* 821813C0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821818E4;  }
		/* 821813C0h case   11:*/		return 0x821813C4;
		  /* 821813C4h */ case   12:  		/* lwz R9, <#[R31 + 8]> */
		/* 821813C4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821813C4h case   12:*/		return 0x821813C8;
		  /* 821813C8h */ case   13:  		/* rlwinm R11, R9, 0, 18, 24 */
		/* 821813C8h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R9);
		/* 821813C8h case   13:*/		return 0x821813CC;
		  /* 821813CCh */ case   14:  		/* cmplwi CR6, R11, 10880 */
		/* 821813CCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821813CCh case   14:*/		return 0x821813D0;
		  /* 821813D0h */ case   15:  		/* bc 4, CR6_EQ, 1300 */
		/* 821813D0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821818E4;  }
		/* 821813D0h case   15:*/		return 0x821813D4;
		  /* 821813D4h */ case   16:  		/* lwz R11, <#[R19 + 76]> */
		/* 821813D4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000004C) );
		/* 821813D4h case   16:*/		return 0x821813D8;
		  /* 821813D8h */ case   17:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821813D8h case   17:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821813D8h case   17:*/		return 0x821813DC;
		  /* 821813DCh */ case   18:  		/* bc 12, CR0_EQ, 588 */
		/* 821813DCh case   18:*/		if ( regs.CR[0].eq ) { return 0x82181628;  }
		/* 821813DCh case   18:*/		return 0x821813E0;
		  /* 821813E0h */ case   19:  		/* lwz R11, <#[R29 + 12]> */
		/* 821813E0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821813E0h case   19:*/		return 0x821813E4;
		  /* 821813E4h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821813E4h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821813E4h case   20:*/		return 0x821813E8;
		  /* 821813E8h */ case   21:  		/* bc 12, CR6_EQ, 1288 */
		/* 821813E8h case   21:*/		if ( regs.CR[6].eq ) { return 0x821818F0;  }
		/* 821813E8h case   21:*/		return 0x821813EC;
		  /* 821813ECh */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 821813ECh case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821813ECh case   22:*/		return 0x821813F0;
		  /* 821813F0h */ case   23:  		/* bc 4, CR6_EQ, 1280 */
		/* 821813F0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821818F0;  }
		/* 821813F0h case   23:*/		return 0x821813F4;
		  /* 821813F4h */ case   24:  		/* rlwinm. R11, R9, 15, 31, 31 */
		/* 821813F4h case   24:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R9);
		/* 821813F4h case   24:*/		return 0x821813F8;
		  /* 821813F8h */ case   25:  		/* bc 4, CR0_EQ, 240 */
		/* 821813F8h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821814E8;  }
		/* 821813F8h case   25:*/		return 0x821813FC;
		  /* 821813FCh */ case   26:  		/* lwz R11, <#[R29 + 36]> */
		/* 821813FCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821813FCh case   26:*/		return 0x82181400;
		  /* 82181400h */ case   27:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82181400h case   27:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82181400h case   27:*/		return 0x82181404;
		  /* 82181404h */ case   28:  		/* bc 4, CR0_EQ, 228 */
		/* 82181404h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821814E8;  }
		/* 82181404h case   28:*/		return 0x82181408;
		  /* 82181408h */ case   29:  		/* li R8, 1 */
		/* 82181408h case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82181408h case   29:*/		return 0x8218140C;
		  /* 8218140Ch */ case   30:  		/* lwz R4, <#[R31 + 28]> */
		/* 8218140Ch case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8218140Ch case   30:*/		return 0x82181410;
		  /* 82181410h */ case   31:  		/* li R7, 0 */
		/* 82181410h case   31:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82181410h case   31:*/		return 0x82181414;
		  /* 82181414h */ case   32:  		/* li R6, 120 */
		/* 82181414h case   32:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 82181414h case   32:*/		return 0x82181418;
		  /* 82181418h */ case   33:  		/* li R5, 0 */
		/* 82181418h case   33:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82181418h case   33:*/		return 0x8218141C;
		  /* 8218141Ch */ case   34:  		/* mr R3, R18 */
		/* 8218141Ch case   34:*/		regs.R3 = regs.R18;
		/* 8218141Ch case   34:*/		return 0x82181420;
		  /* 82181420h */ case   35:  		/* bl 669048 */
		/* 82181420h case   35:*/		regs.LR = 0x82181424; return 0x82224998;
		/* 82181420h case   35:*/		return 0x82181424;
		  /* 82181424h */ case   36:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82181424h case   36:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82181424h case   36:*/		return 0x82181428;
		  /* 82181428h */ case   37:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 82181428h case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 82181428h case   37:*/		return 0x8218142C;
		  /* 8218142Ch */ case   38:  		/* lwz R9, <#[R3 + 8]> */
		/* 8218142Ch case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8218142Ch case   38:*/		return 0x82181430;
		  /* 82181430h */ case   39:  		/* addi R11, R11, 36 */
		/* 82181430h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82181430h case   39:*/		return 0x82181434;
		  /* 82181434h */ case   40:  		/* addi R10, R10, 36 */
		/* 82181434h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 82181434h case   40:*/		return 0x82181438;
		  /* 82181438h */ case   41:  		/* ori R6, R9, 64 */
		/* 82181438h case   41:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x40);
		/* 82181438h case   41:*/		return 0x8218143C;
		  /* 8218143Ch */ case   42:  		/* addi R7, R10, -36 */
		/* 8218143Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 8218143Ch case   42:*/		return 0x82181440;
		  /* 82181440h */ case   43:  		/* stw R6, <#[R3 + 8]> */
		/* 82181440h case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 82181440h case   43:*/		return 0x82181444;
		  /* 82181444h */ case   44:  		/* addi R8, R11, -36 */
		/* 82181444h case   44:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 82181444h case   44:*/		return 0x82181448;
		  /* 82181448h */ case   45:  		/* lwz R6, <#[R11]> */
		/* 82181448h case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82181448h case   45:*/		return 0x8218144C;
		  /* 8218144Ch */ case   46:  		/* addi R9, R10, 4 */
		/* 8218144Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 8218144Ch case   46:*/		return 0x82181450;
		  /* 82181450h */ case   47:  		/* stw R6, <#[R10]> */
		/* 82181450h case   47:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82181450h case   47:*/		return 0x82181454;
		  /* 82181454h */ case   48:  		/* mr R30, R3 */
		/* 82181454h case   48:*/		regs.R30 = regs.R3;
		/* 82181454h case   48:*/		return 0x82181458;
		  /* 82181458h */ case   49:  		/* lwz R6, <#[R11]> */
		/* 82181458h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82181458h case   49:*/		return 0x8218145C;
		  /* 8218145Ch */ case   50:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8218145Ch case   50:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8218145Ch case   50:*/		return 0x82181460;
		  /* 82181460h */ case   51:  		/* stw R7, <#[R6]> */
		/* 82181460h case   51:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 82181460h case   51:*/		return 0x82181464;
		  /* 82181464h */ case   52:  		/* mr R4, R3 */
		/* 82181464h case   52:*/		regs.R4 = regs.R3;
		/* 82181464h case   52:*/		return 0x82181468;
		  /* 82181468h */ case   53:  		/* stw R8, <#[R10 + 4]> */
		/* 82181468h case   53:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 82181468h case   53:*/		return 0x8218146C;
		  /* 8218146Ch */ case   54:  		/* li R5, 7 */
		/* 8218146Ch case   54:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 8218146Ch case   54:*/		return 0x82181470;
		  /* 82181470h */ case   55:  		/* stw R9, <#[R11]> */
		/* 82181470h case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82181470h case   55:*/		return 0x82181474;
		  /* 82181474h */ case   56:  		/* mr R3, R18 */
		/* 82181474h case   56:*/		regs.R3 = regs.R18;
		/* 82181474h case   56:*/		return 0x82181478;
		  /* 82181478h */ case   57:  		/* bl -68904 */
		/* 82181478h case   57:*/		regs.LR = 0x8218147C; return 0x82170750;
		/* 82181478h case   57:*/		return 0x8218147C;
		  /* 8218147Ch */ case   58:  		/* mr R4, R3 */
		/* 8218147Ch case   58:*/		regs.R4 = regs.R3;
		/* 8218147Ch case   58:*/		return 0x82181480;
		  /* 82181480h */ case   59:  		/* mr R3, R31 */
		/* 82181480h case   59:*/		regs.R3 = regs.R31;
		/* 82181480h case   59:*/		return 0x82181484;
		  /* 82181484h */ case   60:  		/* bl -37564 */
		/* 82181484h case   60:*/		regs.LR = 0x82181488; return 0x821781C8;
		/* 82181484h case   60:*/		return 0x82181488;
		  /* 82181488h */ case   61:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181488h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181488h case   61:*/		return 0x8218148C;
		  /* 8218148Ch */ case   62:  		/* li R5, 0 */
		/* 8218148Ch case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218148Ch case   62:*/		return 0x82181490;
		  /* 82181490h */ case   63:  		/* oris R11, R11, 2 */
		/* 82181490h case   63:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82181490h case   63:*/		return 0x82181494;
		  /* 82181494h */ case   64:  		/* mr R4, R30 */
		/* 82181494h case   64:*/		regs.R4 = regs.R30;
		/* 82181494h case   64:*/		return 0x82181498;
		  /* 82181498h */ case   65:  		/* stw R11, <#[R31 + 8]> */
		/* 82181498h case   65:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181498h case   65:*/		return 0x8218149C;
		  /* 8218149Ch */ case   66:  		/* mr R3, R18 */
		/* 8218149Ch case   66:*/		regs.R3 = regs.R18;
		/* 8218149Ch case   66:*/		return 0x821814A0;
		  /* 821814A0h */ case   67:  		/* lwz R10, <#[R19 + 76]> */
		/* 821814A0h case   67:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000004C) );
		/* 821814A0h case   67:*/		return 0x821814A4;
		  /* 821814A4h */ case   68:  		/* rlwinm R10, R10, 9, 24, 31 */
		/* 821814A4h case   68:*/		cpu::op::rlwinm<0,9,24,31>(regs,&regs.R10,regs.R10);
		/* 821814A4h case   68:*/		return 0x821814A8;
		  /* 821814A8h */ case   69:  		/* rlwimi R11, R10, 18, 13, 13 */
		/* 821814A8h case   69:*/		cpu::op::rlwimi<0,18,13,13>(regs,&regs.R11,regs.R10);
		/* 821814A8h case   69:*/		return 0x821814AC;
		  /* 821814ACh */ case   70:  		/* stw R11, <#[R31 + 8]> */
		/* 821814ACh case   70:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821814ACh case   70:*/		return 0x821814B0;
		  /* 821814B0h */ case   71:  		/* bl -37792 */
		/* 821814B0h case   71:*/		regs.LR = 0x821814B4; return 0x82178110;
		/* 821814B0h case   71:*/		return 0x821814B4;
		  /* 821814B4h */ case   72:  		/* mr R29, R3 */
		/* 821814B4h case   72:*/		regs.R29 = regs.R3;
		/* 821814B4h case   72:*/		return 0x821814B8;
		  /* 821814B8h */ case   73:  		/* mr R3, R31 */
		/* 821814B8h case   73:*/		regs.R3 = regs.R31;
		/* 821814B8h case   73:*/		return 0x821814BC;
		  /* 821814BCh */ case   74:  		/* mr R4, R29 */
		/* 821814BCh case   74:*/		regs.R4 = regs.R29;
		/* 821814BCh case   74:*/		return 0x821814C0;
		  /* 821814C0h */ case   75:  		/* bl -37624 */
		/* 821814C0h case   75:*/		regs.LR = 0x821814C4; return 0x821781C8;
		/* 821814C0h case   75:*/		return 0x821814C4;
		  /* 821814C4h */ case   76:  		/* lwz R10, <#[R29]> */
		/* 821814C4h case   76:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821814C4h case   76:*/		return 0x821814C8;
		  /* 821814C8h */ case   77:  		/* mr R11, R24 */
		/* 821814C8h case   77:*/		regs.R11 = regs.R24;
		/* 821814C8h case   77:*/		return 0x821814CC;
		  /* 821814CCh */ case   78:  		/* rlwimi R10, R11, 30, 7, 18 */
		/* 821814CCh case   78:*/		cpu::op::rlwimi<0,30,7,18>(regs,&regs.R10,regs.R11);
		/* 821814CCh case   78:*/		return 0x821814D0;
		  /* 821814D0h */ case   79:  		/* rlwimi R10, R24, 30, 1, 1 */
		/* 821814D0h case   79:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R10,regs.R24);
		/* 821814D0h case   79:*/		return 0x821814D4;
		  /* 821814D4h */ case   80:  		/* stw R10, <#[R29]> */
		/* 821814D4h case   80:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821814D4h case   80:*/		return 0x821814D8;
		  /* 821814D8h */ case   81:  		/* lwz R11, <#[R30 + 8]> */
		/* 821814D8h case   81:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821814D8h case   81:*/		return 0x821814DC;
		  /* 821814DCh */ case   82:  		/* rlwimi R11, R24, 1, 27, 30 */
		/* 821814DCh case   82:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R11,regs.R24);
		/* 821814DCh case   82:*/		return 0x821814E0;
		  /* 821814E0h */ case   83:  		/* stw R11, <#[R30 + 8]> */
		/* 821814E0h case   83:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821814E0h case   83:*/		return 0x821814E4;
		  /* 821814E4h */ case   84:  		/* b 872 */
		/* 821814E4h case   84:*/		return 0x8218184C;
		/* 821814E4h case   84:*/		return 0x821814E8;
	}
	return 0x821814E8;
} // Block from 82181394h-821814E8h (85 instructions)

//////////////////////////////////////////////////////
// Block at 821814E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821814E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821814E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821814E8);
		  /* 821814E8h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821814E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821814E8h case    0:*/		return 0x821814EC;
		  /* 821814ECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821814ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821814ECh case    1:*/		return 0x821814F0;
		  /* 821814F0h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821814F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82181500;  }
		/* 821814F0h case    2:*/		return 0x821814F4;
		  /* 821814F4h */ case    3:  		/* mr R4, R29 */
		/* 821814F4h case    3:*/		regs.R4 = regs.R29;
		/* 821814F4h case    3:*/		return 0x821814F8;
		  /* 821814F8h */ case    4:  		/* mr R3, R18 */
		/* 821814F8h case    4:*/		regs.R3 = regs.R18;
		/* 821814F8h case    4:*/		return 0x821814FC;
		  /* 821814FCh */ case    5:  		/* bl 285388 */
		/* 821814FCh case    5:*/		regs.LR = 0x82181500; return 0x821C6FC8;
		/* 821814FCh case    5:*/		return 0x82181500;
	}
	return 0x82181500;
} // Block from 821814E8h-82181500h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82181500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181500);
		  /* 82181500h */ case    0:  		/* mr R4, R19 */
		/* 82181500h case    0:*/		regs.R4 = regs.R19;
		/* 82181500h case    0:*/		return 0x82181504;
		  /* 82181504h */ case    1:  		/* mr R3, R18 */
		/* 82181504h case    1:*/		regs.R3 = regs.R18;
		/* 82181504h case    1:*/		return 0x82181508;
		  /* 82181508h */ case    2:  		/* bl -34120 */
		/* 82181508h case    2:*/		regs.LR = 0x8218150C; return 0x82178FC0;
		/* 82181508h case    2:*/		return 0x8218150C;
		  /* 8218150Ch */ case    3:  		/* mr R30, R3 */
		/* 8218150Ch case    3:*/		regs.R30 = regs.R3;
		/* 8218150Ch case    3:*/		return 0x82181510;
		  /* 82181510h */ case    4:  		/* mr R8, R3 */
		/* 82181510h case    4:*/		regs.R8 = regs.R3;
		/* 82181510h case    4:*/		return 0x82181514;
		  /* 82181514h */ case    5:  		/* lwz R6, <#[R29 + 8]> */
		/* 82181514h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000008) );
		/* 82181514h case    5:*/		return 0x82181518;
		  /* 82181518h */ case    6:  		/* li R7, 66 */
		/* 82181518h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x42);
		/* 82181518h case    6:*/		return 0x8218151C;
		  /* 8218151Ch */ case    7:  		/* lwz R5, <#[R29 + 20]> */
		/* 8218151Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		/* 8218151Ch case    7:*/		return 0x82181520;
		  /* 82181520h */ case    8:  		/* mr R4, R19 */
		/* 82181520h case    8:*/		regs.R4 = regs.R19;
		/* 82181520h case    8:*/		return 0x82181524;
		  /* 82181524h */ case    9:  		/* mr R3, R18 */
		/* 82181524h case    9:*/		regs.R3 = regs.R18;
		/* 82181524h case    9:*/		return 0x82181528;
		  /* 82181528h */ case   10:  		/* bl -24192 */
		/* 82181528h case   10:*/		regs.LR = 0x8218152C; return 0x8217B6A8;
		/* 82181528h case   10:*/		return 0x8218152C;
		  /* 8218152Ch */ case   11:  		/* mr R4, R19 */
		/* 8218152Ch case   11:*/		regs.R4 = regs.R19;
		/* 8218152Ch case   11:*/		return 0x82181530;
		  /* 82181530h */ case   12:  		/* mr R3, R18 */
		/* 82181530h case   12:*/		regs.R3 = regs.R18;
		/* 82181530h case   12:*/		return 0x82181534;
		  /* 82181534h */ case   13:  		/* bl 668940 */
		/* 82181534h case   13:*/		regs.LR = 0x82181538; return 0x82224A40;
		/* 82181534h case   13:*/		return 0x82181538;
		  /* 82181538h */ case   14:  		/* mr R28, R3 */
		/* 82181538h case   14:*/		regs.R28 = regs.R3;
		/* 82181538h case   14:*/		return 0x8218153C;
		  /* 8218153Ch */ case   15:  		/* li R5, 0 */
		/* 8218153Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218153Ch case   15:*/		return 0x82181540;
		  /* 82181540h */ case   16:  		/* mr R4, R30 */
		/* 82181540h case   16:*/		regs.R4 = regs.R30;
		/* 82181540h case   16:*/		return 0x82181544;
		  /* 82181544h */ case   17:  		/* mr R3, R18 */
		/* 82181544h case   17:*/		regs.R3 = regs.R18;
		/* 82181544h case   17:*/		return 0x82181548;
		  /* 82181548h */ case   18:  		/* bl -37944 */
		/* 82181548h case   18:*/		regs.LR = 0x8218154C; return 0x82178110;
		/* 82181548h case   18:*/		return 0x8218154C;
		  /* 8218154Ch */ case   19:  		/* mr R4, R3 */
		/* 8218154Ch case   19:*/		regs.R4 = regs.R3;
		/* 8218154Ch case   19:*/		return 0x82181550;
		  /* 82181550h */ case   20:  		/* mr R3, R28 */
		/* 82181550h case   20:*/		regs.R3 = regs.R28;
		/* 82181550h case   20:*/		return 0x82181554;
		  /* 82181554h */ case   21:  		/* bl -37772 */
		/* 82181554h case   21:*/		regs.LR = 0x82181558; return 0x821781C8;
		/* 82181554h case   21:*/		return 0x82181558;
		  /* 82181558h */ case   22:  		/* mr R4, R28 */
		/* 82181558h case   22:*/		regs.R4 = regs.R28;
		/* 82181558h case   22:*/		return 0x8218155C;
		  /* 8218155Ch */ case   23:  		/* mr R3, R18 */
		/* 8218155Ch case   23:*/		regs.R3 = regs.R18;
		/* 8218155Ch case   23:*/		return 0x82181560;
		  /* 82181560h */ case   24:  		/* bl -38240 */
		/* 82181560h case   24:*/		regs.LR = 0x82181564; return 0x82178000;
		/* 82181560h case   24:*/		return 0x82181564;
		  /* 82181564h */ case   25:  		/* mr R5, R3 */
		/* 82181564h case   25:*/		regs.R5 = regs.R3;
		/* 82181564h case   25:*/		return 0x82181568;
		  /* 82181568h */ case   26:  		/* mr R4, R19 */
		/* 82181568h case   26:*/		regs.R4 = regs.R19;
		/* 82181568h case   26:*/		return 0x8218156C;
		  /* 8218156Ch */ case   27:  		/* mr R3, R18 */
		/* 8218156Ch case   27:*/		regs.R3 = regs.R18;
		/* 8218156Ch case   27:*/		return 0x82181570;
		  /* 82181570h */ case   28:  		/* bl -29328 */
		/* 82181570h case   28:*/		regs.LR = 0x82181574; return 0x8217A2E0;
		/* 82181570h case   28:*/		return 0x82181574;
		  /* 82181574h */ case   29:  		/* lwz R11, <#[R3 + 8]> */
		/* 82181574h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82181574h case   29:*/		return 0x82181578;
		  /* 82181578h */ case   30:  		/* mr R30, R3 */
		/* 82181578h case   30:*/		regs.R30 = regs.R3;
		/* 82181578h case   30:*/		return 0x8218157C;
		  /* 8218157Ch */ case   31:  		/* oris R11, R11, 32768 */
		/* 8218157Ch case   31:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 8218157Ch case   31:*/		return 0x82181580;
		  /* 82181580h */ case   32:  		/* stw R11, <#[R3 + 8]> */
		/* 82181580h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82181580h case   32:*/		return 0x82181584;
		  /* 82181584h */ case   33:  		/* lwz R5, <#[R19 + 96]> */
		/* 82181584h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x00000060) );
		/* 82181584h case   33:*/		return 0x82181588;
		  /* 82181588h */ case   34:  		/* cmplwi CR6, R5, 0 */
		/* 82181588h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82181588h case   34:*/		return 0x8218158C;
		  /* 8218158Ch */ case   35:  		/* bc 12, CR6_EQ, 16 */
		/* 8218158Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x8218159C;  }
		/* 8218158Ch case   35:*/		return 0x82181590;
		  /* 82181590h */ case   36:  		/* mr R6, R18 */
		/* 82181590h case   36:*/		regs.R6 = regs.R18;
		/* 82181590h case   36:*/		return 0x82181594;
		  /* 82181594h */ case   37:  		/* li R4, 1 */
		/* 82181594h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82181594h case   37:*/		return 0x82181598;
		  /* 82181598h */ case   38:  		/* bl -35872 */
		/* 82181598h case   38:*/		regs.LR = 0x8218159C; return 0x82178978;
		/* 82181598h case   38:*/		return 0x8218159C;
	}
	return 0x8218159C;
} // Block from 82181500h-8218159Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 8218159Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218159C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218159C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218159C);
		  /* 8218159Ch */ case    0:  		/* stw R30, <#[R19 + 96]> */
		/* 8218159Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R19 + 0x00000060) );
		/* 8218159Ch case    0:*/		return 0x821815A0;
		  /* 821815A0h */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 821815A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821815A0h case    1:*/		return 0x821815A4;
		  /* 821815A4h */ case    2:  		/* oris R11, R11, 512 */
		/* 821815A4h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821815A4h case    2:*/		return 0x821815A8;
		  /* 821815A8h */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 821815A8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821815A8h case    3:*/		return 0x821815AC;
		  /* 821815ACh */ case    4:  		/* lwz R11, <#[R18 + 4]> */
		/* 821815ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 821815ACh case    4:*/		return 0x821815B0;
		  /* 821815B0h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821815B0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821815B0h case    5:*/		return 0x821815B4;
		  /* 821815B4h */ case    6:  		/* bc 4, CR0_EQ, 84 */
		/* 821815B4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82181608;  }
		/* 821815B4h case    6:*/		return 0x821815B8;
		  /* 821815B8h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821815B8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821815B8h case    7:*/		return 0x821815BC;
		  /* 821815BCh */ case    8:  		/* bc 12, CR0_EQ, 76 */
		/* 821815BCh case    8:*/		if ( regs.CR[0].eq ) { return 0x82181608;  }
		/* 821815BCh case    8:*/		return 0x821815C0;
		  /* 821815C0h */ case    9:  		/* lwz R10, <#[R18 + 616]> */
		/* 821815C0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000268) );
		/* 821815C0h case    9:*/		return 0x821815C4;
		  /* 821815C4h */ case   10:  		/* subf R10, R10, R29 */
		/* 821815C4h case   10:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821815C4h case   10:*/		return 0x821815C8;
		  /* 821815C8h */ case   11:  		/* divw R9, R10, R17 */
		/* 821815C8h case   11:*/		cpu::op::divw<0>(regs,&regs.R9,regs.R10,regs.R17);
		/* 821815C8h case   11:*/		return 0x821815CC;
		  /* 821815CCh */ case   12:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821815CCh case   12:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821815CCh case   12:*/		return 0x821815D0;
		  /* 821815D0h */ case   13:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821815D0h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821815D0h case   13:*/		return 0x821815D4;
		  /* 821815D4h */ case   14:  		/* addi R10, R10, 21 */
		/* 821815D4h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821815D4h case   14:*/		return 0x821815D8;
		  /* 821815D8h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821815D8h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821815D8h case   15:*/		return 0x821815DC;
		  /* 821815DCh */ case   16:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821815DCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821815DCh case   16:*/		return 0x821815E0;
		  /* 821815E0h */ case   17:  		/* srw R10, R10, R9 */
		/* 821815E0h case   17:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821815E0h case   17:*/		return 0x821815E4;
		  /* 821815E4h */ case   18:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821815E4h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821815E4h case   18:*/		return 0x821815E8;
		  /* 821815E8h */ case   19:  		/* bc 12, CR0_EQ, 8 */
		/* 821815E8h case   19:*/		if ( regs.CR[0].eq ) { return 0x821815F0;  }
		/* 821815E8h case   19:*/		return 0x821815EC;
		  /* 821815ECh */ case   20:  		/* stw R19, <#[R11 + 112]> */
		/* 821815ECh case   20:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000070) );
		/* 821815ECh case   20:*/		return 0x821815F0;
	}
	return 0x821815F0;
} // Block from 8218159Ch-821815F0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821815F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821815F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821815F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821815F0);
		  /* 821815F0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821815F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821815F0h case    0:*/		return 0x821815F4;
		  /* 821815F4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821815F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821815F4h case    1:*/		return 0x821815F8;
		  /* 821815F8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821815F8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821815F8h case    2:*/		return 0x821815FC;
		  /* 821815FCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821815FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181608;  }
		/* 821815FCh case    3:*/		return 0x82181600;
		  /* 82181600h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82181600h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181600h case    4:*/		return 0x82181604;
		  /* 82181604h */ case    5:  		/* bc 4, CR6_EQ, -68 */
		/* 82181604h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821815C0;  }
		/* 82181604h case    5:*/		return 0x82181608;
	}
	return 0x82181608;
} // Block from 821815F0h-82181608h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82181608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181608);
		  /* 82181608h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181608h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181608h case    0:*/		return 0x8218160C;
		  /* 8218160Ch */ case    1:  		/* rlwinm. R11, R11, 15, 31, 31 */
		/* 8218160Ch case    1:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R11);
		/* 8218160Ch case    1:*/		return 0x82181610;
		  /* 82181610h */ case    2:  		/* bc 12, CR0_EQ, 572 */
		/* 82181610h case    2:*/		if ( regs.CR[0].eq ) { return 0x8218184C;  }
		/* 82181610h case    2:*/		return 0x82181614;
		  /* 82181614h */ case    3:  		/* mr R5, R30 */
		/* 82181614h case    3:*/		regs.R5 = regs.R30;
		/* 82181614h case    3:*/		return 0x82181618;
		  /* 82181618h */ case    4:  		/* mr R4, R31 */
		/* 82181618h case    4:*/		regs.R4 = regs.R31;
		/* 82181618h case    4:*/		return 0x8218161C;
		  /* 8218161Ch */ case    5:  		/* mr R3, R18 */
		/* 8218161Ch case    5:*/		regs.R3 = regs.R18;
		/* 8218161Ch case    5:*/		return 0x82181620;
		  /* 82181620h */ case    6:  		/* bl -24208 */
		/* 82181620h case    6:*/		regs.LR = 0x82181624; return 0x8217B790;
		/* 82181620h case    6:*/		return 0x82181624;
		  /* 82181624h */ case    7:  		/* b 552 */
		/* 82181624h case    7:*/		return 0x8218184C;
		/* 82181624h case    7:*/		return 0x82181628;
	}
	return 0x82181628;
} // Block from 82181608h-82181628h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82181628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181628);
		  /* 82181628h */ case    0:  		/* lwz R11, <#[R29 + 36]> */
		/* 82181628h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 82181628h case    0:*/		return 0x8218162C;
		  /* 8218162Ch */ case    1:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 8218162Ch case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 8218162Ch case    1:*/		return 0x82181630;
		  /* 82181630h */ case    2:  		/* bc 12, CR0_EQ, 540 */
		/* 82181630h case    2:*/		if ( regs.CR[0].eq ) { return 0x8218184C;  }
		/* 82181630h case    2:*/		return 0x82181634;
		  /* 82181634h */ case    3:  		/* lwz R11, <#[R29 + 12]> */
		/* 82181634h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82181634h case    3:*/		return 0x82181638;
		  /* 82181638h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82181638h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181638h case    4:*/		return 0x8218163C;
		  /* 8218163Ch */ case    5:  		/* bc 12, CR6_EQ, 704 */
		/* 8218163Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821818FC;  }
		/* 8218163Ch case    5:*/		return 0x82181640;
		  /* 82181640h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82181640h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82181640h case    6:*/		return 0x82181644;
		  /* 82181644h */ case    7:  		/* bc 4, CR6_EQ, 696 */
		/* 82181644h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821818FC;  }
		/* 82181644h case    7:*/		return 0x82181648;
		  /* 82181648h */ case    8:  		/* rlwinm. R11, R9, 15, 31, 31 */
		/* 82181648h case    8:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R9);
		/* 82181648h case    8:*/		return 0x8218164C;
		  /* 8218164Ch */ case    9:  		/* bc 4, CR0_EQ, 208 */
		/* 8218164Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x8218171C;  }
		/* 8218164Ch case    9:*/		return 0x82181650;
		  /* 82181650h */ case   10:  		/* li R8, 1 */
		/* 82181650h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82181650h case   10:*/		return 0x82181654;
		  /* 82181654h */ case   11:  		/* lwz R4, <#[R31 + 28]> */
		/* 82181654h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82181654h case   11:*/		return 0x82181658;
		  /* 82181658h */ case   12:  		/* li R7, 0 */
		/* 82181658h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82181658h case   12:*/		return 0x8218165C;
		  /* 8218165Ch */ case   13:  		/* li R6, 120 */
		/* 8218165Ch case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 8218165Ch case   13:*/		return 0x82181660;
		  /* 82181660h */ case   14:  		/* li R5, 0 */
		/* 82181660h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82181660h case   14:*/		return 0x82181664;
		  /* 82181664h */ case   15:  		/* mr R3, R18 */
		/* 82181664h case   15:*/		regs.R3 = regs.R18;
		/* 82181664h case   15:*/		return 0x82181668;
		  /* 82181668h */ case   16:  		/* bl 668464 */
		/* 82181668h case   16:*/		regs.LR = 0x8218166C; return 0x82224998;
		/* 82181668h case   16:*/		return 0x8218166C;
		  /* 8218166Ch */ case   17:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8218166Ch case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8218166Ch case   17:*/		return 0x82181670;
		  /* 82181670h */ case   18:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 82181670h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 82181670h case   18:*/		return 0x82181674;
		  /* 82181674h */ case   19:  		/* lwz R9, <#[R3 + 8]> */
		/* 82181674h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82181674h case   19:*/		return 0x82181678;
		  /* 82181678h */ case   20:  		/* addi R11, R11, 36 */
		/* 82181678h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82181678h case   20:*/		return 0x8218167C;
		  /* 8218167Ch */ case   21:  		/* addi R10, R10, 36 */
		/* 8218167Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 8218167Ch case   21:*/		return 0x82181680;
		  /* 82181680h */ case   22:  		/* ori R6, R9, 64 */
		/* 82181680h case   22:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x40);
		/* 82181680h case   22:*/		return 0x82181684;
		  /* 82181684h */ case   23:  		/* addi R7, R10, -36 */
		/* 82181684h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 82181684h case   23:*/		return 0x82181688;
		  /* 82181688h */ case   24:  		/* stw R6, <#[R3 + 8]> */
		/* 82181688h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 82181688h case   24:*/		return 0x8218168C;
		  /* 8218168Ch */ case   25:  		/* addi R8, R11, -36 */
		/* 8218168Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 8218168Ch case   25:*/		return 0x82181690;
		  /* 82181690h */ case   26:  		/* lwz R6, <#[R11]> */
		/* 82181690h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82181690h case   26:*/		return 0x82181694;
		  /* 82181694h */ case   27:  		/* addi R9, R10, 4 */
		/* 82181694h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82181694h case   27:*/		return 0x82181698;
		  /* 82181698h */ case   28:  		/* stw R6, <#[R10]> */
		/* 82181698h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82181698h case   28:*/		return 0x8218169C;
		  /* 8218169Ch */ case   29:  		/* mr R30, R3 */
		/* 8218169Ch case   29:*/		regs.R30 = regs.R3;
		/* 8218169Ch case   29:*/		return 0x821816A0;
		  /* 821816A0h */ case   30:  		/* lwz R6, <#[R11]> */
		/* 821816A0h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821816A0h case   30:*/		return 0x821816A4;
		  /* 821816A4h */ case   31:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821816A4h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821816A4h case   31:*/		return 0x821816A8;
		  /* 821816A8h */ case   32:  		/* stw R7, <#[R6]> */
		/* 821816A8h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821816A8h case   32:*/		return 0x821816AC;
		  /* 821816ACh */ case   33:  		/* mr R4, R3 */
		/* 821816ACh case   33:*/		regs.R4 = regs.R3;
		/* 821816ACh case   33:*/		return 0x821816B0;
		  /* 821816B0h */ case   34:  		/* stw R8, <#[R10 + 4]> */
		/* 821816B0h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821816B0h case   34:*/		return 0x821816B4;
		  /* 821816B4h */ case   35:  		/* li R5, 7 */
		/* 821816B4h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821816B4h case   35:*/		return 0x821816B8;
		  /* 821816B8h */ case   36:  		/* stw R9, <#[R11]> */
		/* 821816B8h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821816B8h case   36:*/		return 0x821816BC;
		  /* 821816BCh */ case   37:  		/* mr R3, R18 */
		/* 821816BCh case   37:*/		regs.R3 = regs.R18;
		/* 821816BCh case   37:*/		return 0x821816C0;
		  /* 821816C0h */ case   38:  		/* bl -69488 */
		/* 821816C0h case   38:*/		regs.LR = 0x821816C4; return 0x82170750;
		/* 821816C0h case   38:*/		return 0x821816C4;
		  /* 821816C4h */ case   39:  		/* mr R4, R3 */
		/* 821816C4h case   39:*/		regs.R4 = regs.R3;
		/* 821816C4h case   39:*/		return 0x821816C8;
		  /* 821816C8h */ case   40:  		/* mr R3, R31 */
		/* 821816C8h case   40:*/		regs.R3 = regs.R31;
		/* 821816C8h case   40:*/		return 0x821816CC;
		  /* 821816CCh */ case   41:  		/* bl -38148 */
		/* 821816CCh case   41:*/		regs.LR = 0x821816D0; return 0x821781C8;
		/* 821816CCh case   41:*/		return 0x821816D0;
		  /* 821816D0h */ case   42:  		/* lwz R11, <#[R31 + 8]> */
		/* 821816D0h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821816D0h case   42:*/		return 0x821816D4;
		  /* 821816D4h */ case   43:  		/* li R5, 0 */
		/* 821816D4h case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821816D4h case   43:*/		return 0x821816D8;
		  /* 821816D8h */ case   44:  		/* oris R11, R11, 6 */
		/* 821816D8h case   44:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821816D8h case   44:*/		return 0x821816DC;
		  /* 821816DCh */ case   45:  		/* mr R4, R30 */
		/* 821816DCh case   45:*/		regs.R4 = regs.R30;
		/* 821816DCh case   45:*/		return 0x821816E0;
		  /* 821816E0h */ case   46:  		/* stw R11, <#[R31 + 8]> */
		/* 821816E0h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821816E0h case   46:*/		return 0x821816E4;
		  /* 821816E4h */ case   47:  		/* mr R3, R18 */
		/* 821816E4h case   47:*/		regs.R3 = regs.R18;
		/* 821816E4h case   47:*/		return 0x821816E8;
		  /* 821816E8h */ case   48:  		/* bl -38360 */
		/* 821816E8h case   48:*/		regs.LR = 0x821816EC; return 0x82178110;
		/* 821816E8h case   48:*/		return 0x821816EC;
		  /* 821816ECh */ case   49:  		/* mr R28, R3 */
		/* 821816ECh case   49:*/		regs.R28 = regs.R3;
		/* 821816ECh case   49:*/		return 0x821816F0;
		  /* 821816F0h */ case   50:  		/* mr R3, R31 */
		/* 821816F0h case   50:*/		regs.R3 = regs.R31;
		/* 821816F0h case   50:*/		return 0x821816F4;
		  /* 821816F4h */ case   51:  		/* mr R4, R28 */
		/* 821816F4h case   51:*/		regs.R4 = regs.R28;
		/* 821816F4h case   51:*/		return 0x821816F8;
		  /* 821816F8h */ case   52:  		/* bl -38192 */
		/* 821816F8h case   52:*/		regs.LR = 0x821816FC; return 0x821781C8;
		/* 821816F8h case   52:*/		return 0x821816FC;
		  /* 821816FCh */ case   53:  		/* lwz R10, <#[R28]> */
		/* 821816FCh case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821816FCh case   53:*/		return 0x82181700;
		  /* 82181700h */ case   54:  		/* mr R11, R24 */
		/* 82181700h case   54:*/		regs.R11 = regs.R24;
		/* 82181700h case   54:*/		return 0x82181704;
		  /* 82181704h */ case   55:  		/* rlwimi R10, R11, 30, 7, 18 */
		/* 82181704h case   55:*/		cpu::op::rlwimi<0,30,7,18>(regs,&regs.R10,regs.R11);
		/* 82181704h case   55:*/		return 0x82181708;
		  /* 82181708h */ case   56:  		/* rlwimi R10, R24, 30, 1, 1 */
		/* 82181708h case   56:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R10,regs.R24);
		/* 82181708h case   56:*/		return 0x8218170C;
		  /* 8218170Ch */ case   57:  		/* stw R10, <#[R28]> */
		/* 8218170Ch case   57:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8218170Ch case   57:*/		return 0x82181710;
		  /* 82181710h */ case   58:  		/* lwz R11, <#[R30 + 8]> */
		/* 82181710h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181710h case   58:*/		return 0x82181714;
		  /* 82181714h */ case   59:  		/* rlwimi R11, R24, 1, 27, 30 */
		/* 82181714h case   59:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R11,regs.R24);
		/* 82181714h case   59:*/		return 0x82181718;
		  /* 82181718h */ case   60:  		/* stw R11, <#[R30 + 8]> */
		/* 82181718h case   60:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181718h case   60:*/		return 0x8218171C;
	}
	return 0x8218171C;
} // Block from 82181628h-8218171Ch (61 instructions)

//////////////////////////////////////////////////////
// Block at 8218171Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218171C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218171C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218171C);
		  /* 8218171Ch */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 8218171Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8218171Ch case    0:*/		return 0x82181720;
		  /* 82181720h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181720h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181720h case    1:*/		return 0x82181724;
		  /* 82181724h */ case    2:  		/* bc 4, CR0_EQ, 108 */
		/* 82181724h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82181790;  }
		/* 82181724h case    2:*/		return 0x82181728;
		  /* 82181728h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 82181728h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82181728h case    3:*/		return 0x8218172C;
		  /* 8218172Ch */ case    4:  		/* bc 12, CR0_EQ, 100 */
		/* 8218172Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82181790;  }
		/* 8218172Ch case    4:*/		return 0x82181730;
		  /* 82181730h */ case    5:  		/* lwz R10, <#[R18 + 616]> */
		/* 82181730h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000268) );
		/* 82181730h case    5:*/		return 0x82181734;
		  /* 82181734h */ case    6:  		/* subf R10, R10, R29 */
		/* 82181734h case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 82181734h case    6:*/		return 0x82181738;
		  /* 82181738h */ case    7:  		/* divw R9, R10, R17 */
		/* 82181738h case    7:*/		cpu::op::divw<0>(regs,&regs.R9,regs.R10,regs.R17);
		/* 82181738h case    7:*/		return 0x8218173C;
		  /* 8218173Ch */ case    8:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 8218173Ch case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 8218173Ch case    8:*/		return 0x82181740;
		  /* 82181740h */ case    9:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82181740h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82181740h case    9:*/		return 0x82181744;
		  /* 82181744h */ case   10:  		/* addi R10, R10, 21 */
		/* 82181744h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 82181744h case   10:*/		return 0x82181748;
		  /* 82181748h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82181748h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82181748h case   11:*/		return 0x8218174C;
		  /* 8218174Ch */ case   12:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8218174Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218174Ch case   12:*/		return 0x82181750;
		  /* 82181750h */ case   13:  		/* srw R10, R10, R9 */
		/* 82181750h case   13:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82181750h case   13:*/		return 0x82181754;
		  /* 82181754h */ case   14:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82181754h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82181754h case   14:*/		return 0x82181758;
		  /* 82181758h */ case   15:  		/* bc 12, CR0_EQ, 32 */
		/* 82181758h case   15:*/		if ( regs.CR[0].eq ) { return 0x82181778;  }
		/* 82181758h case   15:*/		return 0x8218175C;
		  /* 8218175Ch */ case   16:  		/* lwz R10, <#[R11 + 48]> */
		/* 8218175Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8218175Ch case   16:*/		return 0x82181760;
		  /* 82181760h */ case   17:  		/* lwz R9, <#[R11 + 76]> */
		/* 82181760h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 82181760h case   17:*/		return 0x82181764;
		  /* 82181764h */ case   18:  		/* oris R10, R10, 128 */
		/* 82181764h case   18:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82181764h case   18:*/		return 0x82181768;
		  /* 82181768h */ case   19:  		/* stw R19, <#[R11 + 112]> */
		/* 82181768h case   19:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000070) );
		/* 82181768h case   19:*/		return 0x8218176C;
		  /* 8218176Ch */ case   20:  		/* oris R9, R9, 192 */
		/* 8218176Ch case   20:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xC0);
		/* 8218176Ch case   20:*/		return 0x82181770;
		  /* 82181770h */ case   21:  		/* stw R10, <#[R11 + 48]> */
		/* 82181770h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82181770h case   21:*/		return 0x82181774;
		  /* 82181774h */ case   22:  		/* stw R9, <#[R11 + 76]> */
		/* 82181774h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 82181774h case   22:*/		return 0x82181778;
	}
	return 0x82181778;
} // Block from 8218171Ch-82181778h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82181778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181778);
		  /* 82181778h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82181778h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82181778h case    0:*/		return 0x8218177C;
		  /* 8218177Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8218177Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8218177Ch case    1:*/		return 0x82181780;
		  /* 82181780h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181780h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181780h case    2:*/		return 0x82181784;
		  /* 82181784h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82181784h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181790;  }
		/* 82181784h case    3:*/		return 0x82181788;
		  /* 82181788h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82181788h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181788h case    4:*/		return 0x8218178C;
		  /* 8218178Ch */ case    5:  		/* bc 4, CR6_EQ, -92 */
		/* 8218178Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82181730;  }
		/* 8218178Ch case    5:*/		return 0x82181790;
	}
	return 0x82181790;
} // Block from 82181778h-82181790h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82181790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181790);
		  /* 82181790h */ case    0:  		/* li R4, 1 */
		/* 82181790h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82181790h case    0:*/		return 0x82181794;
		  /* 82181794h */ case    1:  		/* fmr FR4, FR31 */
		/* 82181794h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 82181794h case    1:*/		return 0x82181798;
		  /* 82181798h */ case    2:  		/* mr R3, R18 */
		/* 82181798h case    2:*/		regs.R3 = regs.R18;
		/* 82181798h case    2:*/		return 0x8218179C;
		  /* 8218179Ch */ case    3:  		/* fmr FR3, FR31 */
		/* 8218179Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 8218179Ch case    3:*/		return 0x821817A0;
		  /* 821817A0h */ case    4:  		/* fmr FR2, FR31 */
		/* 821817A0h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821817A0h case    4:*/		return 0x821817A4;
		  /* 821817A4h */ case    5:  		/* fmr FR1, FR31 */
		/* 821817A4h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821817A4h case    5:*/		return 0x821817A8;
		  /* 821817A8h */ case    6:  		/* bl 693168 */
		/* 821817A8h case    6:*/		regs.LR = 0x821817AC; return 0x8222AB58;
		/* 821817A8h case    6:*/		return 0x821817AC;
		  /* 821817ACh */ case    7:  		/* mr R28, R3 */
		/* 821817ACh case    7:*/		regs.R28 = regs.R3;
		/* 821817ACh case    7:*/		return 0x821817B0;
		  /* 821817B0h */ case    8:  		/* mr R4, R3 */
		/* 821817B0h case    8:*/		regs.R4 = regs.R3;
		/* 821817B0h case    8:*/		return 0x821817B4;
		  /* 821817B4h */ case    9:  		/* li R5, 0 */
		/* 821817B4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821817B4h case    9:*/		return 0x821817B8;
		  /* 821817B8h */ case   10:  		/* mr R3, R18 */
		/* 821817B8h case   10:*/		regs.R3 = regs.R18;
		/* 821817B8h case   10:*/		return 0x821817BC;
		  /* 821817BCh */ case   11:  		/* bl -38572 */
		/* 821817BCh case   11:*/		regs.LR = 0x821817C0; return 0x82178110;
		/* 821817BCh case   11:*/		return 0x821817C0;
		  /* 821817C0h */ case   12:  		/* mr R5, R3 */
		/* 821817C0h case   12:*/		regs.R5 = regs.R3;
		/* 821817C0h case   12:*/		return 0x821817C4;
		  /* 821817C4h */ case   13:  		/* mr R4, R19 */
		/* 821817C4h case   13:*/		regs.R4 = regs.R19;
		/* 821817C4h case   13:*/		return 0x821817C8;
		  /* 821817C8h */ case   14:  		/* mr R3, R18 */
		/* 821817C8h case   14:*/		regs.R3 = regs.R18;
		/* 821817C8h case   14:*/		return 0x821817CC;
		  /* 821817CCh */ case   15:  		/* bl -29932 */
		/* 821817CCh case   15:*/		regs.LR = 0x821817D0; return 0x8217A2E0;
		/* 821817CCh case   15:*/		return 0x821817D0;
		  /* 821817D0h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 821817D0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821817D0h case   16:*/		return 0x821817D4;
		  /* 821817D4h */ case   17:  		/* mr R30, R3 */
		/* 821817D4h case   17:*/		regs.R30 = regs.R3;
		/* 821817D4h case   17:*/		return 0x821817D8;
		  /* 821817D8h */ case   18:  		/* oris R11, R11, 32768 */
		/* 821817D8h case   18:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821817D8h case   18:*/		return 0x821817DC;
		  /* 821817DCh */ case   19:  		/* stw R11, <#[R3 + 8]> */
		/* 821817DCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821817DCh case   19:*/		return 0x821817E0;
		  /* 821817E0h */ case   20:  		/* lwz R5, <#[R19 + 96]> */
		/* 821817E0h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x00000060) );
		/* 821817E0h case   20:*/		return 0x821817E4;
		  /* 821817E4h */ case   21:  		/* cmplwi CR6, R5, 0 */
		/* 821817E4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821817E4h case   21:*/		return 0x821817E8;
		  /* 821817E8h */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 821817E8h case   22:*/		if ( regs.CR[6].eq ) { return 0x821817F8;  }
		/* 821817E8h case   22:*/		return 0x821817EC;
		  /* 821817ECh */ case   23:  		/* mr R6, R18 */
		/* 821817ECh case   23:*/		regs.R6 = regs.R18;
		/* 821817ECh case   23:*/		return 0x821817F0;
		  /* 821817F0h */ case   24:  		/* li R4, 1 */
		/* 821817F0h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821817F0h case   24:*/		return 0x821817F4;
		  /* 821817F4h */ case   25:  		/* bl -36476 */
		/* 821817F4h case   25:*/		regs.LR = 0x821817F8; return 0x82178978;
		/* 821817F4h case   25:*/		return 0x821817F8;
	}
	return 0x821817F8;
} // Block from 82181790h-821817F8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821817F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821817F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821817F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821817F8);
		  /* 821817F8h */ case    0:  		/* stw R30, <#[R19 + 96]> */
		/* 821817F8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R19 + 0x00000060) );
		/* 821817F8h case    0:*/		return 0x821817FC;
		  /* 821817FCh */ case    1:  		/* mr R5, R30 */
		/* 821817FCh case    1:*/		regs.R5 = regs.R30;
		/* 821817FCh case    1:*/		return 0x82181800;
		  /* 82181800h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 82181800h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181800h case    2:*/		return 0x82181804;
		  /* 82181804h */ case    3:  		/* oris R11, R11, 512 */
		/* 82181804h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82181804h case    3:*/		return 0x82181808;
		  /* 82181808h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 82181808h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181808h case    4:*/		return 0x8218180C;
		  /* 8218180Ch */ case    5:  		/* mr R4, R31 */
		/* 8218180Ch case    5:*/		regs.R4 = regs.R31;
		/* 8218180Ch case    5:*/		return 0x82181810;
		  /* 82181810h */ case    6:  		/* mr R3, R18 */
		/* 82181810h case    6:*/		regs.R3 = regs.R18;
		/* 82181810h case    6:*/		return 0x82181814;
		  /* 82181814h */ case    7:  		/* bl -24708 */
		/* 82181814h case    7:*/		regs.LR = 0x82181818; return 0x8217B790;
		/* 82181814h case    7:*/		return 0x82181818;
		  /* 82181818h */ case    8:  		/* lwz R11, <#[R29 + 20]> */
		/* 82181818h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82181818h case    8:*/		return 0x8218181C;
		  /* 8218181Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8218181Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218181Ch case    9:*/		return 0x82181820;
		  /* 82181820h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 82181820h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82181830;  }
		/* 82181820h case   10:*/		return 0x82181824;
		  /* 82181824h */ case   11:  		/* mr R4, R29 */
		/* 82181824h case   11:*/		regs.R4 = regs.R29;
		/* 82181824h case   11:*/		return 0x82181828;
		  /* 82181828h */ case   12:  		/* mr R3, R18 */
		/* 82181828h case   12:*/		regs.R3 = regs.R18;
		/* 82181828h case   12:*/		return 0x8218182C;
		  /* 8218182Ch */ case   13:  		/* bl 284572 */
		/* 8218182Ch case   13:*/		regs.LR = 0x82181830; return 0x821C6FC8;
		/* 8218182Ch case   13:*/		return 0x82181830;
	}
	return 0x82181830;
} // Block from 821817F8h-82181830h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82181830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181830);
		  /* 82181830h */ case    0:  		/* mr R8, R28 */
		/* 82181830h case    0:*/		regs.R8 = regs.R28;
		/* 82181830h case    0:*/		return 0x82181834;
		  /* 82181834h */ case    1:  		/* lwz R6, <#[R29 + 8]> */
		/* 82181834h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000008) );
		/* 82181834h case    1:*/		return 0x82181838;
		  /* 82181838h */ case    2:  		/* li R7, 66 */
		/* 82181838h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x42);
		/* 82181838h case    2:*/		return 0x8218183C;
		  /* 8218183Ch */ case    3:  		/* lwz R5, <#[R29 + 20]> */
		/* 8218183Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		/* 8218183Ch case    3:*/		return 0x82181840;
		  /* 82181840h */ case    4:  		/* mr R4, R19 */
		/* 82181840h case    4:*/		regs.R4 = regs.R19;
		/* 82181840h case    4:*/		return 0x82181844;
		  /* 82181844h */ case    5:  		/* mr R3, R18 */
		/* 82181844h case    5:*/		regs.R3 = regs.R18;
		/* 82181844h case    5:*/		return 0x82181848;
		  /* 82181848h */ case    6:  		/* bl -24992 */
		/* 82181848h case    6:*/		regs.LR = 0x8218184C; return 0x8217B6A8;
		/* 82181848h case    6:*/		return 0x8218184C;
	}
	return 0x8218184C;
} // Block from 82181830h-8218184Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218184Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218184C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218184C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218184C);
		  /* 8218184Ch */ case    0:  		/* rlwinm R11, R19, 0, 0, 30 */
		/* 8218184Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R19);
		/* 8218184Ch case    0:*/		return 0x82181850;
		  /* 82181850h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82181850h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82181850h case    1:*/		return 0x82181854;
		  /* 82181854h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181854h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181854h case    2:*/		return 0x82181858;
		  /* 82181858h */ case    3:  		/* bc 4, CR0_EQ, 176 */
		/* 82181858h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181908;  }
		/* 82181858h case    3:*/		return 0x8218185C;
		  /* 8218185Ch */ case    4:  		/* mr R19, R11 */
		/* 8218185Ch case    4:*/		regs.R19 = regs.R11;
		/* 8218185Ch case    4:*/		return 0x82181860;
		  /* 82181860h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82181860h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181860h case    5:*/		return 0x82181864;
		  /* 82181864h */ case    6:  		/* bc 12, CR6_EQ, 164 */
		/* 82181864h case    6:*/		if ( regs.CR[6].eq ) { return 0x82181908;  }
		/* 82181864h case    6:*/		return 0x82181868;
		  /* 82181868h */ case    7:  		/* li R24, 1 */
		/* 82181868h case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82181868h case    7:*/		return 0x8218186C;
		  /* 8218186Ch */ case    8:  		/* b -6504 */
		/* 8218186Ch case    8:*/		return 0x8217FF04;
		/* 8218186Ch case    8:*/		return 0x82181870;
	}
	return 0x82181870;
} // Block from 8218184Ch-82181870h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82181870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181870);
		  /* 82181870h */ case    0:  		/* li R4, 4800 */
		/* 82181870h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82181870h case    0:*/		return 0x82181874;
		  /* 82181874h */ case    1:  		/* mr R3, R18 */
		/* 82181874h case    1:*/		regs.R3 = regs.R18;
		/* 82181874h case    1:*/		return 0x82181878;
		  /* 82181878h */ case    2:  		/* bl -195088 */
		/* 82181878h case    2:*/		regs.LR = 0x8218187C; return 0x82151E68;
		/* 82181878h case    2:*/		return 0x8218187C;
	}
	return 0x8218187C;
} // Block from 82181870h-8218187Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218187Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218187C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218187C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218187C);
		  /* 8218187Ch */ case    0:  		/* li R4, 3535 */
		/* 8218187Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 8218187Ch case    0:*/		return 0x82181880;
		  /* 82181880h */ case    1:  		/* mr R3, R18 */
		/* 82181880h case    1:*/		regs.R3 = regs.R18;
		/* 82181880h case    1:*/		return 0x82181884;
		  /* 82181884h */ case    2:  		/* bl -195100 */
		/* 82181884h case    2:*/		regs.LR = 0x82181888; return 0x82151E68;
		/* 82181884h case    2:*/		return 0x82181888;
	}
	return 0x82181888;
} // Block from 8218187Ch-82181888h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181888);
		  /* 82181888h */ case    0:  		/* li R4, 4800 */
		/* 82181888h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82181888h case    0:*/		return 0x8218188C;
		  /* 8218188Ch */ case    1:  		/* mr R3, R18 */
		/* 8218188Ch case    1:*/		regs.R3 = regs.R18;
		/* 8218188Ch case    1:*/		return 0x82181890;
		  /* 82181890h */ case    2:  		/* bl -195112 */
		/* 82181890h case    2:*/		regs.LR = 0x82181894; return 0x82151E68;
		/* 82181890h case    2:*/		return 0x82181894;
	}
	return 0x82181894;
} // Block from 82181888h-82181894h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181894);
		  /* 82181894h */ case    0:  		/* li R4, 4800 */
		/* 82181894h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82181894h case    0:*/		return 0x82181898;
		  /* 82181898h */ case    1:  		/* bl -195120 */
		/* 82181898h case    1:*/		regs.LR = 0x8218189C; return 0x82151E68;
		/* 82181898h case    1:*/		return 0x8218189C;
	}
	return 0x8218189C;
} // Block from 82181894h-8218189Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218189Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218189C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218189C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218189C);
		  /* 8218189Ch */ case    0:  		/* li R4, 3535 */
		/* 8218189Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 8218189Ch case    0:*/		return 0x821818A0;
		  /* 821818A0h */ case    1:  		/* bl -195128 */
		/* 821818A0h case    1:*/		regs.LR = 0x821818A4; return 0x82151E68;
		/* 821818A0h case    1:*/		return 0x821818A4;
	}
	return 0x821818A4;
} // Block from 8218189Ch-821818A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821818A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818A4);
		  /* 821818A4h */ case    0:  		/* li R4, 4800 */
		/* 821818A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821818A4h case    0:*/		return 0x821818A8;
		  /* 821818A8h */ case    1:  		/* mr R3, R18 */
		/* 821818A8h case    1:*/		regs.R3 = regs.R18;
		/* 821818A8h case    1:*/		return 0x821818AC;
		  /* 821818ACh */ case    2:  		/* bl -195140 */
		/* 821818ACh case    2:*/		regs.LR = 0x821818B0; return 0x82151E68;
		/* 821818ACh case    2:*/		return 0x821818B0;
	}
	return 0x821818B0;
} // Block from 821818A4h-821818B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821818B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818B0);
		  /* 821818B0h */ case    0:  		/* li R4, 4800 */
		/* 821818B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821818B0h case    0:*/		return 0x821818B4;
		  /* 821818B4h */ case    1:  		/* bl -195148 */
		/* 821818B4h case    1:*/		regs.LR = 0x821818B8; return 0x82151E68;
		/* 821818B4h case    1:*/		return 0x821818B8;
	}
	return 0x821818B8;
} // Block from 821818B0h-821818B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821818B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818B8);
		  /* 821818B8h */ case    0:  		/* lis R11, -32252 */
		/* 821818B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821818B8h case    0:*/		return 0x821818BC;
		  /* 821818BCh */ case    1:  		/* li R4, 3500 */
		/* 821818BCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821818BCh case    1:*/		return 0x821818C0;
		  /* 821818C0h */ case    2:  		/* addi R5, R11, -17052 */
		/* 821818C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFBD64);
		/* 821818C0h case    2:*/		return 0x821818C4;
		  /* 821818C4h */ case    3:  		/* mr R3, R18 */
		/* 821818C4h case    3:*/		regs.R3 = regs.R18;
		/* 821818C4h case    3:*/		return 0x821818C8;
		  /* 821818C8h */ case    4:  		/* bl -195168 */
		/* 821818C8h case    4:*/		regs.LR = 0x821818CC; return 0x82151E68;
		/* 821818C8h case    4:*/		return 0x821818CC;
	}
	return 0x821818CC;
} // Block from 821818B8h-821818CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821818CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818CC);
		  /* 821818CCh */ case    0:  		/* li R4, 4800 */
		/* 821818CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821818CCh case    0:*/		return 0x821818D0;
		  /* 821818D0h */ case    1:  		/* mr R3, R18 */
		/* 821818D0h case    1:*/		regs.R3 = regs.R18;
		/* 821818D0h case    1:*/		return 0x821818D4;
		  /* 821818D4h */ case    2:  		/* bl -195180 */
		/* 821818D4h case    2:*/		regs.LR = 0x821818D8; return 0x82151E68;
		/* 821818D4h case    2:*/		return 0x821818D8;
	}
	return 0x821818D8;
} // Block from 821818CCh-821818D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821818D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818D8);
		  /* 821818D8h */ case    0:  		/* li R4, 4800 */
		/* 821818D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821818D8h case    0:*/		return 0x821818DC;
		  /* 821818DCh */ case    1:  		/* mr R3, R18 */
		/* 821818DCh case    1:*/		regs.R3 = regs.R18;
		/* 821818DCh case    1:*/		return 0x821818E0;
		  /* 821818E0h */ case    2:  		/* bl -195192 */
		/* 821818E0h case    2:*/		regs.LR = 0x821818E4; return 0x82151E68;
		/* 821818E0h case    2:*/		return 0x821818E4;
	}
	return 0x821818E4;
} // Block from 821818D8h-821818E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821818E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818E4);
		  /* 821818E4h */ case    0:  		/* li R4, 4800 */
		/* 821818E4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821818E4h case    0:*/		return 0x821818E8;
		  /* 821818E8h */ case    1:  		/* mr R3, R18 */
		/* 821818E8h case    1:*/		regs.R3 = regs.R18;
		/* 821818E8h case    1:*/		return 0x821818EC;
		  /* 821818ECh */ case    2:  		/* bl -195204 */
		/* 821818ECh case    2:*/		regs.LR = 0x821818F0; return 0x82151E68;
		/* 821818ECh case    2:*/		return 0x821818F0;
	}
	return 0x821818F0;
} // Block from 821818E4h-821818F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821818F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818F0);
		  /* 821818F0h */ case    0:  		/* li R4, 3535 */
		/* 821818F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 821818F0h case    0:*/		return 0x821818F4;
		  /* 821818F4h */ case    1:  		/* mr R3, R18 */
		/* 821818F4h case    1:*/		regs.R3 = regs.R18;
		/* 821818F4h case    1:*/		return 0x821818F8;
		  /* 821818F8h */ case    2:  		/* bl -195216 */
		/* 821818F8h case    2:*/		regs.LR = 0x821818FC; return 0x82151E68;
		/* 821818F8h case    2:*/		return 0x821818FC;
	}
	return 0x821818FC;
} // Block from 821818F0h-821818FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821818FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821818FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821818FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821818FC);
		  /* 821818FCh */ case    0:  		/* li R4, 3535 */
		/* 821818FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 821818FCh case    0:*/		return 0x82181900;
		  /* 82181900h */ case    1:  		/* mr R3, R18 */
		/* 82181900h case    1:*/		regs.R3 = regs.R18;
		/* 82181900h case    1:*/		return 0x82181904;
		  /* 82181904h */ case    2:  		/* bl -195228 */
		/* 82181904h case    2:*/		regs.LR = 0x82181908; return 0x82151E68;
		/* 82181904h case    2:*/		return 0x82181908;
	}
	return 0x82181908;
} // Block from 821818FCh-82181908h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181908);
		  /* 82181908h */ case    0:  		/* li R24, 1 */
		/* 82181908h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82181908h case    0:*/		return 0x8218190C;
	}
	return 0x8218190C;
} // Block from 82181908h-8218190Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218190Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218190C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218190C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218190C);
		  /* 8218190Ch */ case    0:  		/* lwz R11, <#[R18 + 44]> */
		/* 8218190Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000002C) );
		/* 8218190Ch case    0:*/		return 0x82181910;
		  /* 82181910h */ case    1:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 82181910h case    1:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 82181910h case    1:*/		return 0x82181914;
		  /* 82181914h */ case    2:  		/* bc 12, CR0_EQ, 944 */
		/* 82181914h case    2:*/		if ( regs.CR[0].eq ) { return 0x82181CC4;  }
		/* 82181914h case    2:*/		return 0x82181918;
		  /* 82181918h */ case    3:  		/* lwz R11, <#[R18 + 4]> */
		/* 82181918h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 82181918h case    3:*/		return 0x8218191C;
		  /* 8218191Ch */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218191Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218191Ch case    4:*/		return 0x82181920;
		  /* 82181920h */ case    5:  		/* bc 4, CR0_EQ, 564 */
		/* 82181920h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82181B54;  }
		/* 82181920h case    5:*/		return 0x82181924;
		  /* 82181924h */ case    6:  		/* mr R28, R11 */
		/* 82181924h case    6:*/		regs.R28 = regs.R11;
		/* 82181924h case    6:*/		return 0x82181928;
		  /* 82181928h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 82181928h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82181928h case    7:*/		return 0x8218192C;
		  /* 8218192Ch */ case    8:  		/* bc 12, CR0_EQ, 552 */
		/* 8218192Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82181B54;  }
		/* 8218192Ch case    8:*/		return 0x82181930;
		  /* 82181930h */ case    9:  		/* lwz R29, <#[R28 + 96]> */
		/* 82181930h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000060) );
		/* 82181930h case    9:*/		return 0x82181934;
		  /* 82181934h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 82181934h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82181934h case   10:*/		return 0x82181938;
		  /* 82181938h */ case   11:  		/* bc 12, CR6_EQ, 512 */
		/* 82181938h case   11:*/		if ( regs.CR[6].eq ) { return 0x82181B38;  }
		/* 82181938h case   11:*/		return 0x8218193C;
		  /* 8218193Ch */ case   12:  		/* lwz R11, <#[R29 + 8]> */
		/* 8218193Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8218193Ch case   12:*/		return 0x82181940;
		  /* 82181940h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82181940h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82181940h case   13:*/		return 0x82181944;
		  /* 82181944h */ case   14:  		/* cmplwi CR6, R11, 8448 */
		/* 82181944h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002100);
		/* 82181944h case   14:*/		return 0x82181948;
		  /* 82181948h */ case   15:  		/* bc 4, CR6_EQ, 496 */
		/* 82181948h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82181B38;  }
		/* 82181948h case   15:*/		return 0x8218194C;
		  /* 8218194Ch */ case   16:  		/* lwz R30, <#[R28 + 8]> */
		/* 8218194Ch case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000008) );
		/* 8218194Ch case   16:*/		return 0x82181950;
		  /* 82181950h */ case   17:  		/* cmplwi CR6, R30, 0 */
		/* 82181950h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82181950h case   17:*/		return 0x82181954;
		  /* 82181954h */ case   18:  		/* bc 12, CR6_EQ, 484 */
		/* 82181954h case   18:*/		if ( regs.CR[6].eq ) { return 0x82181B38;  }
		/* 82181954h case   18:*/		return 0x82181958;
		  /* 82181958h */ case   19:  		/* lwz R11, <#[R30 + 4]> */
		/* 82181958h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82181958h case   19:*/		return 0x8218195C;
		  /* 8218195Ch */ case   20:  		/* b 84 */
		/* 8218195Ch case   20:*/		return 0x821819B0;
		/* 8218195Ch case   20:*/		return 0x82181960;
		  /* 82181960h */ case   21:  		/* lwz R10, <#[R4 + 8]> */
		/* 82181960h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 82181960h case   21:*/		return 0x82181964;
		  /* 82181964h */ case   22:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 82181964h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 82181964h case   22:*/		return 0x82181968;
		  /* 82181968h */ case   23:  		/* cmplwi CR6, R10, 65 */
		/* 82181968h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000041);
		/* 82181968h case   23:*/		return 0x8218196C;
		  /* 8218196Ch */ case   24:  		/* bc 12, CR6_EQ, 88 */
		/* 8218196Ch case   24:*/		if ( regs.CR[6].eq ) { return 0x821819C4;  }
		/* 8218196Ch case   24:*/		return 0x82181970;
		  /* 82181970h */ case   25:  		/* cmplwi CR6, R10, 64 */
		/* 82181970h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 82181970h case   25:*/		return 0x82181974;
		  /* 82181974h */ case   26:  		/* bc 4, CR6_EQ, 76 */
		/* 82181974h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821819C0;  }
		/* 82181974h case   26:*/		return 0x82181978;
		  /* 82181978h */ case   27:  		/* lwz R10, <#[R11 + 8]> */
		/* 82181978h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82181978h case   27:*/		return 0x8218197C;
		  /* 8218197Ch */ case   28:  		/* cmplwi CR6, R10, 0 */
		/* 8218197Ch case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8218197Ch case   28:*/		return 0x82181980;
		  /* 82181980h */ case   29:  		/* bc 12, CR6_EQ, 20 */
		/* 82181980h case   29:*/		if ( regs.CR[6].eq ) { return 0x82181994;  }
		/* 82181980h case   29:*/		return 0x82181984;
		  /* 82181984h */ case   30:  		/* lwz R11, <#[R10 + 12]> */
		/* 82181984h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82181984h case   30:*/		return 0x82181988;
		  /* 82181988h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 82181988h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181988h case   31:*/		return 0x8218198C;
		  /* 8218198Ch */ case   32:  		/* mr R11, R24 */
		/* 8218198Ch case   32:*/		regs.R11 = regs.R24;
		/* 8218198Ch case   32:*/		return 0x82181990;
		  /* 82181990h */ case   33:  		/* bc 4, CR6_EQ, 8 */
		/* 82181990h case   33:*/		if ( !regs.CR[6].eq ) { return 0x82181998;  }
		/* 82181990h case   33:*/		return 0x82181994;
	}
	return 0x82181994;
} // Block from 8218190Ch-82181994h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82181994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181994);
		  /* 82181994h */ case    0:  		/* li R11, 0 */
		/* 82181994h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82181994h case    0:*/		return 0x82181998;
	}
	return 0x82181998;
} // Block from 82181994h-82181998h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181998);
		  /* 82181998h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82181998h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82181998h case    0:*/		return 0x8218199C;
		  /* 8218199Ch */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 8218199Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821819C0;  }
		/* 8218199Ch case    1:*/		return 0x821819A0;
		  /* 821819A0h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821819A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821819A0h case    2:*/		return 0x821819A4;
		  /* 821819A4h */ case    3:  		/* li R11, 0 */
		/* 821819A4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821819A4h case    3:*/		return 0x821819A8;
		  /* 821819A8h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 821819A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821819B0;  }
		/* 821819A8h case    4:*/		return 0x821819AC;
		  /* 821819ACh */ case    5:  		/* lwz R11, <#[R10 + 4]> */
		/* 821819ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821819ACh case    5:*/		return 0x821819B0;
	}
	return 0x821819B0;
} // Block from 82181998h-821819B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821819B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821819B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821819B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821819B0);
		  /* 821819B0h */ case    0:  		/* lwz R4, <#[R11 + 96]> */
		/* 821819B0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000060) );
		/* 821819B0h case    0:*/		return 0x821819B4;
		  /* 821819B4h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821819B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821819B4h case    1:*/		return 0x821819B8;
		  /* 821819B8h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821819B8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82181960;  }
		/* 821819B8h case    2:*/		return 0x821819BC;
		  /* 821819BCh */ case    3:  		/* b 168 */
		/* 821819BCh case    3:*/		return 0x82181A64;
		/* 821819BCh case    3:*/		return 0x821819C0;
	}
	return 0x821819C0;
} // Block from 821819B0h-821819C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821819C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821819C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821819C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821819C0);
		  /* 821819C0h */ case    0:  		/* li R4, 0 */
		/* 821819C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821819C0h case    0:*/		return 0x821819C4;
	}
	return 0x821819C4;
} // Block from 821819C0h-821819C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821819C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821819C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821819C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821819C4);
		  /* 821819C4h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821819C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821819C4h case    0:*/		return 0x821819C8;
		  /* 821819C8h */ case    1:  		/* bc 12, CR6_EQ, 156 */
		/* 821819C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82181A64;  }
		/* 821819C8h case    1:*/		return 0x821819CC;
		  /* 821819CCh */ case    2:  		/* mr R3, R18 */
		/* 821819CCh case    2:*/		regs.R3 = regs.R18;
		/* 821819CCh case    2:*/		return 0x821819D0;
		  /* 821819D0h */ case    3:  		/* bl -40320 */
		/* 821819D0h case    3:*/		regs.LR = 0x821819D4; return 0x82177C50;
		/* 821819D0h case    3:*/		return 0x821819D4;
		  /* 821819D4h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 821819D4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821819D4h case    4:*/		return 0x821819D8;
		  /* 821819D8h */ case    5:  		/* mr R31, R3 */
		/* 821819D8h case    5:*/		regs.R31 = regs.R3;
		/* 821819D8h case    5:*/		return 0x821819DC;
		  /* 821819DCh */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821819DCh case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821819DCh case    6:*/		return 0x821819E0;
		  /* 821819E0h */ case    7:  		/* cmplwi CR6, R11, 66 */
		/* 821819E0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000042);
		/* 821819E0h case    7:*/		return 0x821819E4;
		  /* 821819E4h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 821819E4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821819F0;  }
		/* 821819E4h case    8:*/		return 0x821819E8;
		  /* 821819E8h */ case    9:  		/* cmplwi CR6, R11, 109 */
		/* 821819E8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 821819E8h case    9:*/		return 0x821819EC;
		  /* 821819ECh */ case   10:  		/* bc 4, CR6_EQ, 444 */
		/* 821819ECh case   10:*/		if ( !regs.CR[6].eq ) { return 0x82181BA8;  }
		/* 821819ECh case   10:*/		return 0x821819F0;
	}
	return 0x821819F0;
} // Block from 821819C4h-821819F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821819F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821819F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821819F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821819F0);
		  /* 821819F0h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821819F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821819F0h case    0:*/		return 0x821819F4;
		  /* 821819F4h */ case    1:  		/* b 88 */
		/* 821819F4h case    1:*/		return 0x82181A4C;
		/* 821819F4h case    1:*/		return 0x821819F8;
		  /* 821819F8h */ case    2:  		/* lwz R11, <#[R10 + 96]> */
		/* 821819F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000060) );
		/* 821819F8h case    2:*/		return 0x821819FC;
		  /* 821819FCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821819FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821819FCh case    3:*/		return 0x82181A00;
		  /* 82181A00h */ case    4:  		/* bc 12, CR6_EQ, 72 */
		/* 82181A00h case    4:*/		if ( regs.CR[6].eq ) { return 0x82181A48;  }
		/* 82181A00h case    4:*/		return 0x82181A04;
		  /* 82181A04h */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 82181A04h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82181A04h case    5:*/		return 0x82181A08;
		  /* 82181A08h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82181A08h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82181A08h case    6:*/		return 0x82181A0C;
		  /* 82181A0Ch */ case    7:  		/* cmplwi CR6, R11, 8448 */
		/* 82181A0Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002100);
		/* 82181A0Ch case    7:*/		return 0x82181A10;
		  /* 82181A10h */ case    8:  		/* bc 4, CR6_EQ, 56 */
		/* 82181A10h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82181A48;  }
		/* 82181A10h case    8:*/		return 0x82181A14;
		  /* 82181A14h */ case    9:  		/* lwz R11, <#[R10 + 8]> */
		/* 82181A14h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82181A14h case    9:*/		return 0x82181A18;
		  /* 82181A18h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82181A18h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181A18h case   10:*/		return 0x82181A1C;
		  /* 82181A1Ch */ case   11:  		/* bc 12, CR6_EQ, 44 */
		/* 82181A1Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82181A48;  }
		/* 82181A1Ch case   11:*/		return 0x82181A20;
		  /* 82181A20h */ case   12:  		/* lwz R9, <#[R11 + 4]> */
		/* 82181A20h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82181A20h case   12:*/		return 0x82181A24;
		  /* 82181A24h */ case   13:  		/* lwz R4, <#[R9 + 96]> */
		/* 82181A24h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000060) );
		/* 82181A24h case   13:*/		return 0x82181A28;
		  /* 82181A28h */ case   14:  		/* cmplwi CR6, R4, 0 */
		/* 82181A28h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82181A28h case   14:*/		return 0x82181A2C;
		  /* 82181A2Ch */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 82181A2Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82181A40;  }
		/* 82181A2Ch case   15:*/		return 0x82181A30;
		  /* 82181A30h */ case   16:  		/* lwz R9, <#[R4 + 8]> */
		/* 82181A30h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000008) );
		/* 82181A30h case   16:*/		return 0x82181A34;
		  /* 82181A34h */ case   17:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 82181A34h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 82181A34h case   17:*/		return 0x82181A38;
		  /* 82181A38h */ case   18:  		/* cmplwi CR6, R9, 8320 */
		/* 82181A38h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00002080);
		/* 82181A38h case   18:*/		return 0x82181A3C;
		  /* 82181A3Ch */ case   19:  		/* bc 12, CR6_EQ, 48 */
		/* 82181A3Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82181A6C;  }
		/* 82181A3Ch case   19:*/		return 0x82181A40;
	}
	return 0x82181A40;
} // Block from 821819F0h-82181A40h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82181A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181A40);
		  /* 82181A40h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 82181A40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181A40h case    0:*/		return 0x82181A44;
		  /* 82181A44h */ case    1:  		/* b -44 */
		/* 82181A44h case    1:*/		return 0x82181A18;
		/* 82181A44h case    1:*/		return 0x82181A48;
	}
	return 0x82181A48;
} // Block from 82181A40h-82181A48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181A48);
		  /* 82181A48h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 82181A48h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 82181A48h case    0:*/		return 0x82181A4C;
	}
	return 0x82181A4C;
} // Block from 82181A48h-82181A4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181A4C);
		  /* 82181A4Ch */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 82181A4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82181A4Ch case    0:*/		return 0x82181A50;
		  /* 82181A50h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181A50h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181A50h case    1:*/		return 0x82181A54;
		  /* 82181A54h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82181A54h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82181A64;  }
		/* 82181A54h case    2:*/		return 0x82181A58;
		  /* 82181A58h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82181A58h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181A58h case    3:*/		return 0x82181A5C;
		  /* 82181A5Ch */ case    4:  		/* mr R10, R11 */
		/* 82181A5Ch case    4:*/		regs.R10 = regs.R11;
		/* 82181A5Ch case    4:*/		return 0x82181A60;
		  /* 82181A60h */ case    5:  		/* bc 4, CR6_EQ, -104 */
		/* 82181A60h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821819F8;  }
		/* 82181A60h case    5:*/		return 0x82181A64;
	}
	return 0x82181A64;
} // Block from 82181A4Ch-82181A64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82181A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181A64);
		  /* 82181A64h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 82181A64h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82181A64h case    0:*/		return 0x82181A68;
		  /* 82181A68h */ case    1:  		/* b -280 */
		/* 82181A68h case    1:*/		return 0x82181950;
		/* 82181A68h case    1:*/		return 0x82181A6C;
	}
	return 0x82181A6C;
} // Block from 82181A64h-82181A6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181A6C);
		  /* 82181A6Ch */ case    0:  		/* mr R3, R18 */
		/* 82181A6Ch case    0:*/		regs.R3 = regs.R18;
		/* 82181A6Ch case    0:*/		return 0x82181A70;
		  /* 82181A70h */ case    1:  		/* bl -40480 */
		/* 82181A70h case    1:*/		regs.LR = 0x82181A74; return 0x82177C50;
		/* 82181A70h case    1:*/		return 0x82181A74;
		  /* 82181A74h */ case    2:  		/* lwz R11, <#[R3 + 8]> */
		/* 82181A74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82181A74h case    2:*/		return 0x82181A78;
		  /* 82181A78h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82181A78h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82181A78h case    3:*/		return 0x82181A7C;
		  /* 82181A7Ch */ case    4:  		/* cmplwi CR6, R11, 66 */
		/* 82181A7Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000042);
		/* 82181A7Ch case    4:*/		return 0x82181A80;
		  /* 82181A80h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82181A80h case    5:*/		if ( regs.CR[6].eq ) { return 0x82181A8C;  }
		/* 82181A80h case    5:*/		return 0x82181A84;
		  /* 82181A84h */ case    6:  		/* cmplwi CR6, R11, 109 */
		/* 82181A84h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 82181A84h case    6:*/		return 0x82181A88;
		  /* 82181A88h */ case    7:  		/* bc 4, CR6_EQ, 300 */
		/* 82181A88h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82181BB4;  }
		/* 82181A88h case    7:*/		return 0x82181A8C;
	}
	return 0x82181A8C;
} // Block from 82181A6Ch-82181A8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82181A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181A8C);
		  /* 82181A8Ch */ case    0:  		/* lwz R11, <#[R3 + 28]> */
		/* 82181A8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 82181A8Ch case    0:*/		return 0x82181A90;
		  /* 82181A90h */ case    1:  		/* lwz R10, <#[R31 + 28]> */
		/* 82181A90h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82181A90h case    1:*/		return 0x82181A94;
		  /* 82181A94h */ case    2:  		/* lwz R11, <#[R11 + 48]> */
		/* 82181A94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82181A94h case    2:*/		return 0x82181A98;
		  /* 82181A98h */ case    3:  		/* lwz R10, <#[R10 + 40]> */
		/* 82181A98h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 82181A98h case    3:*/		return 0x82181A9C;
		  /* 82181A9Ch */ case    4:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 82181A9Ch case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 82181A9Ch case    4:*/		return 0x82181AA0;
		  /* 82181AA0h */ case    5:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 82181AA0h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 82181AA0h case    5:*/		return 0x82181AA4;
		  /* 82181AA4h */ case    6:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82181AA4h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82181AA4h case    6:*/		return 0x82181AA8;
		  /* 82181AA8h */ case    7:  		/* addi R11, R11, 1 */
		/* 82181AA8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82181AA8h case    7:*/		return 0x82181AAC;
		  /* 82181AACh */ case    8:  		/* slw R9, R24, R9 */
		/* 82181AACh case    8:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 82181AACh case    8:*/		return 0x82181AB0;
		  /* 82181AB0h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82181AB0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82181AB0h case    9:*/		return 0x82181AB4;
		  /* 82181AB4h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82181AB4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82181AB4h case   10:*/		return 0x82181AB8;
		  /* 82181AB8h */ case   11:  		/* and. R11, R11, R9 */
		/* 82181AB8h case   11:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82181AB8h case   11:*/		return 0x82181ABC;
		  /* 82181ABCh */ case   12:  		/* bc 12, CR0_EQ, 260 */
		/* 82181ABCh case   12:*/		if ( regs.CR[0].eq ) { return 0x82181BC0;  }
		/* 82181ABCh case   12:*/		return 0x82181AC0;
		  /* 82181AC0h */ case   13:  		/* lwz R11, <#[R31 + 44]> */
		/* 82181AC0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82181AC0h case   13:*/		return 0x82181AC4;
		  /* 82181AC4h */ case   14:  		/* lwz R10, <#[R11 + 12]> */
		/* 82181AC4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181AC4h case   14:*/		return 0x82181AC8;
		  /* 82181AC8h */ case   15:  		/* addi R10, R10, 4 */
		/* 82181AC8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82181AC8h case   15:*/		return 0x82181ACC;
		  /* 82181ACCh */ case   16:  		/* lwz R9, <#[R10]> */
		/* 82181ACCh case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82181ACCh case   16:*/		return 0x82181AD0;
		  /* 82181AD0h */ case   17:  		/* b 12 */
		/* 82181AD0h case   17:*/		return 0x82181ADC;
		/* 82181AD0h case   17:*/		return 0x82181AD4;
		  /* 82181AD4h */ case   18:  		/* addi R10, R9, 8 */
		/* 82181AD4h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 82181AD4h case   18:*/		return 0x82181AD8;
		  /* 82181AD8h */ case   19:  		/* lwz R9, <#[R9 + 8]> */
		/* 82181AD8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82181AD8h case   19:*/		return 0x82181ADC;
	}
	return 0x82181ADC;
} // Block from 82181A8Ch-82181ADCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 82181ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181ADC);
		  /* 82181ADCh */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 82181ADCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82181ADCh case    0:*/		return 0x82181AE0;
		  /* 82181AE0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82181AE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82181AD4;  }
		/* 82181AE0h case    1:*/		return 0x82181AE4;
		  /* 82181AE4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 82181AE4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82181AE4h case    2:*/		return 0x82181AE8;
		  /* 82181AE8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 82181AE8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82181AE8h case    3:*/		return 0x82181AEC;
		  /* 82181AECh */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 82181AECh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82181AECh case    4:*/		return 0x82181AF0;
		  /* 82181AF0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 82181AF0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82181AF0h case    5:*/		return 0x82181AF4;
		  /* 82181AF4h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 82181AF4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82181AF4h case    6:*/		return 0x82181AF8;
		  /* 82181AF8h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 82181AF8h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181AF8h case    7:*/		return 0x82181AFC;
		  /* 82181AFCh */ case    8:  		/* lwz R11, <#[R29 + 44]> */
		/* 82181AFCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 82181AFCh case    8:*/		return 0x82181B00;
		  /* 82181B00h */ case    9:  		/* lwz R10, <#[R11 + 12]> */
		/* 82181B00h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181B00h case    9:*/		return 0x82181B04;
		  /* 82181B04h */ case   10:  		/* addi R10, R10, 4 */
		/* 82181B04h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82181B04h case   10:*/		return 0x82181B08;
		  /* 82181B08h */ case   11:  		/* lwz R9, <#[R10]> */
		/* 82181B08h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82181B08h case   11:*/		return 0x82181B0C;
		  /* 82181B0Ch */ case   12:  		/* b 12 */
		/* 82181B0Ch case   12:*/		return 0x82181B18;
		/* 82181B0Ch case   12:*/		return 0x82181B10;
		  /* 82181B10h */ case   13:  		/* addi R10, R9, 8 */
		/* 82181B10h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 82181B10h case   13:*/		return 0x82181B14;
		  /* 82181B14h */ case   14:  		/* lwz R9, <#[R9 + 8]> */
		/* 82181B14h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82181B14h case   14:*/		return 0x82181B18;
	}
	return 0x82181B18;
} // Block from 82181ADCh-82181B18h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82181B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181B18);
		  /* 82181B18h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 82181B18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82181B18h case    0:*/		return 0x82181B1C;
		  /* 82181B1Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82181B1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82181B10;  }
		/* 82181B1Ch case    1:*/		return 0x82181B20;
		  /* 82181B20h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 82181B20h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82181B20h case    2:*/		return 0x82181B24;
		  /* 82181B24h */ case    3:  		/* stw R9, <#[R10]> */
		/* 82181B24h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82181B24h case    3:*/		return 0x82181B28;
		  /* 82181B28h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 82181B28h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82181B28h case    4:*/		return 0x82181B2C;
		  /* 82181B2Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 82181B2Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82181B2Ch case    5:*/		return 0x82181B30;
		  /* 82181B30h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 82181B30h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82181B30h case    6:*/		return 0x82181B34;
		  /* 82181B34h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 82181B34h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181B34h case    7:*/		return 0x82181B38;
	}
	return 0x82181B38;
} // Block from 82181B18h-82181B38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82181B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181B38);
		  /* 82181B38h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82181B38h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82181B38h case    0:*/		return 0x82181B3C;
		  /* 82181B3Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82181B3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82181B3Ch case    1:*/		return 0x82181B40;
		  /* 82181B40h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181B40h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181B40h case    2:*/		return 0x82181B44;
		  /* 82181B44h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82181B44h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181B54;  }
		/* 82181B44h case    3:*/		return 0x82181B48;
		  /* 82181B48h */ case    4:  		/* mr R28, R11 */
		/* 82181B48h case    4:*/		regs.R28 = regs.R11;
		/* 82181B48h case    4:*/		return 0x82181B4C;
		  /* 82181B4Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82181B4Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181B4Ch case    5:*/		return 0x82181B50;
		  /* 82181B50h */ case    6:  		/* bc 4, CR6_EQ, -544 */
		/* 82181B50h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82181930;  }
		/* 82181B50h case    6:*/		return 0x82181B54;
	}
	return 0x82181B54;
} // Block from 82181B38h-82181B54h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82181B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181B54);
		  /* 82181B54h */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 82181B54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 82181B54h case    0:*/		return 0x82181B58;
		  /* 82181B58h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181B58h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181B58h case    1:*/		return 0x82181B5C;
		  /* 82181B5Ch */ case    2:  		/* bc 4, CR0_EQ, 360 */
		/* 82181B5Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82181CC4;  }
		/* 82181B5Ch case    2:*/		return 0x82181B60;
		  /* 82181B60h */ case    3:  		/* mr R30, R11 */
		/* 82181B60h case    3:*/		regs.R30 = regs.R11;
		/* 82181B60h case    3:*/		return 0x82181B64;
		  /* 82181B64h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82181B64h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82181B64h case    4:*/		return 0x82181B68;
		  /* 82181B68h */ case    5:  		/* bc 12, CR0_EQ, 348 */
		/* 82181B68h case    5:*/		if ( regs.CR[0].eq ) { return 0x82181CC4;  }
		/* 82181B68h case    5:*/		return 0x82181B6C;
		  /* 82181B6Ch */ case    6:  		/* lwz R28, <#[R30 + 96]> */
		/* 82181B6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000060) );
		/* 82181B6Ch case    6:*/		return 0x82181B70;
		  /* 82181B70h */ case    7:  		/* cmplwi CR6, R28, 0 */
		/* 82181B70h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82181B70h case    7:*/		return 0x82181B74;
		  /* 82181B74h */ case    8:  		/* bc 12, CR6_EQ, 308 */
		/* 82181B74h case    8:*/		if ( regs.CR[6].eq ) { return 0x82181CA8;  }
		/* 82181B74h case    8:*/		return 0x82181B78;
		  /* 82181B78h */ case    9:  		/* lwz R11, <#[R28 + 8]> */
		/* 82181B78h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82181B78h case    9:*/		return 0x82181B7C;
		  /* 82181B7Ch */ case   10:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 82181B7Ch case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 82181B7Ch case   10:*/		return 0x82181B80;
		  /* 82181B80h */ case   11:  		/* cmplwi CR6, R10, 8320 */
		/* 82181B80h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002080);
		/* 82181B80h case   11:*/		return 0x82181B84;
		  /* 82181B84h */ case   12:  		/* bc 4, CR6_EQ, 292 */
		/* 82181B84h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82181CA8;  }
		/* 82181B84h case   12:*/		return 0x82181B88;
		  /* 82181B88h */ case   13:  		/* rlwinm. R11, R11, 15, 31, 31 */
		/* 82181B88h case   13:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R11);
		/* 82181B88h case   13:*/		return 0x82181B8C;
		  /* 82181B8Ch */ case   14:  		/* bc 12, CR0_EQ, 284 */
		/* 82181B8Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x82181CA8;  }
		/* 82181B8Ch case   14:*/		return 0x82181B90;
		  /* 82181B90h */ case   15:  		/* mr R4, R28 */
		/* 82181B90h case   15:*/		regs.R4 = regs.R28;
		/* 82181B90h case   15:*/		return 0x82181B94;
		  /* 82181B94h */ case   16:  		/* mr R3, R18 */
		/* 82181B94h case   16:*/		regs.R3 = regs.R18;
		/* 82181B94h case   16:*/		return 0x82181B98;
		  /* 82181B98h */ case   17:  		/* bl -40776 */
		/* 82181B98h case   17:*/		regs.LR = 0x82181B9C; return 0x82177C50;
		/* 82181B98h case   17:*/		return 0x82181B9C;
		  /* 82181B9Ch */ case   18:  		/* lwz R29, <#[R30 + 52]> */
		/* 82181B9Ch case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000034) );
		/* 82181B9Ch case   18:*/		return 0x82181BA0;
		  /* 82181BA0h */ case   19:  		/* mr R27, R3 */
		/* 82181BA0h case   19:*/		regs.R27 = regs.R3;
		/* 82181BA0h case   19:*/		return 0x82181BA4;
		  /* 82181BA4h */ case   20:  		/* b 252 */
		/* 82181BA4h case   20:*/		return 0x82181CA0;
		/* 82181BA4h case   20:*/		return 0x82181BA8;
	}
	return 0x82181BA8;
} // Block from 82181B54h-82181BA8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82181BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181BA8);
		  /* 82181BA8h */ case    0:  		/* li R4, 4800 */
		/* 82181BA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82181BA8h case    0:*/		return 0x82181BAC;
		  /* 82181BACh */ case    1:  		/* mr R3, R18 */
		/* 82181BACh case    1:*/		regs.R3 = regs.R18;
		/* 82181BACh case    1:*/		return 0x82181BB0;
		  /* 82181BB0h */ case    2:  		/* bl -195912 */
		/* 82181BB0h case    2:*/		regs.LR = 0x82181BB4; return 0x82151E68;
		/* 82181BB0h case    2:*/		return 0x82181BB4;
	}
	return 0x82181BB4;
} // Block from 82181BA8h-82181BB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181BB4);
		  /* 82181BB4h */ case    0:  		/* li R4, 4800 */
		/* 82181BB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82181BB4h case    0:*/		return 0x82181BB8;
		  /* 82181BB8h */ case    1:  		/* mr R3, R18 */
		/* 82181BB8h case    1:*/		regs.R3 = regs.R18;
		/* 82181BB8h case    1:*/		return 0x82181BBC;
		  /* 82181BBCh */ case    2:  		/* bl -195924 */
		/* 82181BBCh case    2:*/		regs.LR = 0x82181BC0; return 0x82151E68;
		/* 82181BBCh case    2:*/		return 0x82181BC0;
	}
	return 0x82181BC0;
} // Block from 82181BB4h-82181BC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181BC0);
		  /* 82181BC0h */ case    0:  		/* li R4, 4800 */
		/* 82181BC0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82181BC0h case    0:*/		return 0x82181BC4;
		  /* 82181BC4h */ case    1:  		/* mr R3, R18 */
		/* 82181BC4h case    1:*/		regs.R3 = regs.R18;
		/* 82181BC4h case    1:*/		return 0x82181BC8;
		  /* 82181BC8h */ case    2:  		/* bl -195936 */
		/* 82181BC8h case    2:*/		regs.LR = 0x82181BCC; return 0x82151E68;
		/* 82181BC8h case    2:*/		return 0x82181BCC;
		  /* 82181BCCh */ case    3:  		/* mr R4, R29 */
		/* 82181BCCh case    3:*/		regs.R4 = regs.R29;
		/* 82181BCCh case    3:*/		return 0x82181BD0;
		  /* 82181BD0h */ case    4:  		/* mr R3, R18 */
		/* 82181BD0h case    4:*/		regs.R3 = regs.R18;
		/* 82181BD0h case    4:*/		return 0x82181BD4;
		  /* 82181BD4h */ case    5:  		/* bl -37732 */
		/* 82181BD4h case    5:*/		regs.LR = 0x82181BD8; return 0x82178870;
		/* 82181BD4h case    5:*/		return 0x82181BD8;
		  /* 82181BD8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82181BD8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82181BD8h case    6:*/		return 0x82181BDC;
		  /* 82181BDCh */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82181BDCh case    7:*/		if ( regs.CR[0].eq ) { return 0x82181BF8;  }
		/* 82181BDCh case    7:*/		return 0x82181BE0;
		  /* 82181BE0h */ case    8:  		/* lwz R11, <#[R3 + 8]> */
		/* 82181BE0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82181BE0h case    8:*/		return 0x82181BE4;
		  /* 82181BE4h */ case    9:  		/* rlwinm. R11, R11, 15, 31, 31 */
		/* 82181BE4h case    9:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R11);
		/* 82181BE4h case    9:*/		return 0x82181BE8;
		  /* 82181BE8h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 82181BE8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82181BF8;  }
		/* 82181BE8h case   10:*/		return 0x82181BEC;
		  /* 82181BECh */ case   11:  		/* bl -85940 */
		/* 82181BECh case   11:*/		regs.LR = 0x82181BF0; return 0x8216CC38;
		/* 82181BECh case   11:*/		return 0x82181BF0;
		  /* 82181BF0h */ case   12:  		/* lwz R31, <#[R3 + 12]> */
		/* 82181BF0h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 82181BF0h case   12:*/		return 0x82181BF4;
		  /* 82181BF4h */ case   13:  		/* b 8 */
		/* 82181BF4h case   13:*/		return 0x82181BFC;
		/* 82181BF4h case   13:*/		return 0x82181BF8;
	}
	return 0x82181BF8;
} // Block from 82181BC0h-82181BF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82181BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181BF8);
		  /* 82181BF8h */ case    0:  		/* lwz R31, <#[R29 + 96]> */
		/* 82181BF8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000060) );
		/* 82181BF8h case    0:*/		return 0x82181BFC;
	}
	return 0x82181BFC;
} // Block from 82181BF8h-82181BFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181BFC);
		  /* 82181BFCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82181BFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82181BFCh case    0:*/		return 0x82181C00;
		  /* 82181C00h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 82181C00h case    1:*/		if ( regs.CR[6].eq ) { return 0x82181C40;  }
		/* 82181C00h case    1:*/		return 0x82181C04;
		  /* 82181C04h */ case    2:  		/* mr R3, R31 */
		/* 82181C04h case    2:*/		regs.R3 = regs.R31;
		/* 82181C04h case    2:*/		return 0x82181C08;
		  /* 82181C08h */ case    3:  		/* bl -121544 */
		/* 82181C08h case    3:*/		regs.LR = 0x82181C0C; return 0x82164140;
		/* 82181C08h case    3:*/		return 0x82181C0C;
		  /* 82181C0Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82181C0Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82181C0Ch case    4:*/		return 0x82181C10;
		  /* 82181C10h */ case    5:  		/* bc 12, CR0_EQ, 48 */
		/* 82181C10h case    5:*/		if ( regs.CR[0].eq ) { return 0x82181C40;  }
		/* 82181C10h case    5:*/		return 0x82181C14;
		  /* 82181C14h */ case    6:  		/* cmplw CR6, R31, R27 */
		/* 82181C14h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 82181C14h case    6:*/		return 0x82181C18;
		  /* 82181C18h */ case    7:  		/* bc 12, CR6_EQ, 144 */
		/* 82181C18h case    7:*/		if ( regs.CR[6].eq ) { return 0x82181CA8;  }
		/* 82181C18h case    7:*/		return 0x82181C1C;
		  /* 82181C1Ch */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181C1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181C1Ch case    8:*/		return 0x82181C20;
		  /* 82181C20h */ case    9:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82181C20h case    9:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82181C20h case    9:*/		return 0x82181C24;
		  /* 82181C24h */ case   10:  		/* bc 12, CR0_EQ, 28 */
		/* 82181C24h case   10:*/		if ( regs.CR[0].eq ) { return 0x82181C40;  }
		/* 82181C24h case   10:*/		return 0x82181C28;
		  /* 82181C28h */ case   11:  		/* mr R6, R31 */
		/* 82181C28h case   11:*/		regs.R6 = regs.R31;
		/* 82181C28h case   11:*/		return 0x82181C2C;
		  /* 82181C2Ch */ case   12:  		/* mr R5, R28 */
		/* 82181C2Ch case   12:*/		regs.R5 = regs.R28;
		/* 82181C2Ch case   12:*/		return 0x82181C30;
		  /* 82181C30h */ case   13:  		/* mr R4, R30 */
		/* 82181C30h case   13:*/		regs.R4 = regs.R30;
		/* 82181C30h case   13:*/		return 0x82181C34;
		  /* 82181C34h */ case   14:  		/* mr R3, R18 */
		/* 82181C34h case   14:*/		regs.R3 = regs.R18;
		/* 82181C34h case   14:*/		return 0x82181C38;
		  /* 82181C38h */ case   15:  		/* bl -25496 */
		/* 82181C38h case   15:*/		regs.LR = 0x82181C3C; return 0x8217B8A0;
		/* 82181C38h case   15:*/		return 0x82181C3C;
		  /* 82181C3Ch */ case   16:  		/* mr R30, R3 */
		/* 82181C3Ch case   16:*/		regs.R30 = regs.R3;
		/* 82181C3Ch case   16:*/		return 0x82181C40;
	}
	return 0x82181C40;
} // Block from 82181BFCh-82181C40h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82181C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181C40);
		  /* 82181C40h */ case    0:  		/* lwz R31, <#[R29 + 28]> */
		/* 82181C40h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000001C) );
		/* 82181C40h case    0:*/		return 0x82181C44;
		  /* 82181C44h */ case    1:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82181C44h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82181C44h case    1:*/		return 0x82181C48;
		  /* 82181C48h */ case    2:  		/* bc 4, CR0_EQ, 84 */
		/* 82181C48h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82181C9C;  }
		/* 82181C48h case    2:*/		return 0x82181C4C;
		  /* 82181C4Ch */ case    3:  		/* cmplwi CR0, R31, 0 */
		/* 82181C4Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82181C4Ch case    3:*/		return 0x82181C50;
		  /* 82181C50h */ case    4:  		/* bc 12, CR0_EQ, 76 */
		/* 82181C50h case    4:*/		if ( regs.CR[0].eq ) { return 0x82181C9C;  }
		/* 82181C50h case    4:*/		return 0x82181C54;
		  /* 82181C54h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181C54h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181C54h case    5:*/		return 0x82181C58;
		  /* 82181C58h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82181C58h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82181C58h case    6:*/		return 0x82181C5C;
		  /* 82181C5Ch */ case    7:  		/* cmplwi CR6, R11, 13952 */
		/* 82181C5Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003680);
		/* 82181C5Ch case    7:*/		return 0x82181C60;
		  /* 82181C60h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82181C60h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82181C84;  }
		/* 82181C60h case    8:*/		return 0x82181C64;
		  /* 82181C64h */ case    9:  		/* cmplw CR6, R31, R27 */
		/* 82181C64h case    9:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 82181C64h case    9:*/		return 0x82181C68;
		  /* 82181C68h */ case   10:  		/* bc 12, CR6_EQ, 64 */
		/* 82181C68h case   10:*/		if ( regs.CR[6].eq ) { return 0x82181CA8;  }
		/* 82181C68h case   10:*/		return 0x82181C6C;
		  /* 82181C6Ch */ case   11:  		/* mr R6, R31 */
		/* 82181C6Ch case   11:*/		regs.R6 = regs.R31;
		/* 82181C6Ch case   11:*/		return 0x82181C70;
		  /* 82181C70h */ case   12:  		/* mr R5, R28 */
		/* 82181C70h case   12:*/		regs.R5 = regs.R28;
		/* 82181C70h case   12:*/		return 0x82181C74;
		  /* 82181C74h */ case   13:  		/* mr R4, R30 */
		/* 82181C74h case   13:*/		regs.R4 = regs.R30;
		/* 82181C74h case   13:*/		return 0x82181C78;
		  /* 82181C78h */ case   14:  		/* mr R3, R18 */
		/* 82181C78h case   14:*/		regs.R3 = regs.R18;
		/* 82181C78h case   14:*/		return 0x82181C7C;
		  /* 82181C7Ch */ case   15:  		/* bl -25564 */
		/* 82181C7Ch case   15:*/		regs.LR = 0x82181C80; return 0x8217B8A0;
		/* 82181C7Ch case   15:*/		return 0x82181C80;
		  /* 82181C80h */ case   16:  		/* mr R30, R3 */
		/* 82181C80h case   16:*/		regs.R30 = regs.R3;
		/* 82181C80h case   16:*/		return 0x82181C84;
	}
	return 0x82181C84;
} // Block from 82181C40h-82181C84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82181C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181C84);
		  /* 82181C84h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82181C84h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82181C84h case    0:*/		return 0x82181C88;
		  /* 82181C88h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 82181C88h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 82181C88h case    1:*/		return 0x82181C8C;
		  /* 82181C8Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82181C8Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82181C8Ch case    2:*/		return 0x82181C90;
		  /* 82181C90h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82181C90h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181C9C;  }
		/* 82181C90h case    3:*/		return 0x82181C94;
		  /* 82181C94h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82181C94h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82181C94h case    4:*/		return 0x82181C98;
		  /* 82181C98h */ case    5:  		/* bc 4, CR6_EQ, -68 */
		/* 82181C98h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82181C54;  }
		/* 82181C98h case    5:*/		return 0x82181C9C;
	}
	return 0x82181C9C;
} // Block from 82181C84h-82181C9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82181C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181C9C);
		  /* 82181C9Ch */ case    0:  		/* lwz R29, <#[R29 + 52]> */
		/* 82181C9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000034) );
		/* 82181C9Ch case    0:*/		return 0x82181CA0;
	}
	return 0x82181CA0;
} // Block from 82181C9Ch-82181CA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181CA0);
		  /* 82181CA0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82181CA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82181CA0h case    0:*/		return 0x82181CA4;
		  /* 82181CA4h */ case    1:  		/* bc 4, CR6_EQ, -216 */
		/* 82181CA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82181BCC;  }
		/* 82181CA4h case    1:*/		return 0x82181CA8;
	}
	return 0x82181CA8;
} // Block from 82181CA0h-82181CA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181CA8);
		  /* 82181CA8h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 82181CA8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 82181CA8h case    0:*/		return 0x82181CAC;
		  /* 82181CACh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82181CACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82181CACh case    1:*/		return 0x82181CB0;
		  /* 82181CB0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82181CB0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82181CB0h case    2:*/		return 0x82181CB4;
		  /* 82181CB4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82181CB4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82181CC4;  }
		/* 82181CB4h case    3:*/		return 0x82181CB8;
		  /* 82181CB8h */ case    4:  		/* mr R30, R11 */
		/* 82181CB8h case    4:*/		regs.R30 = regs.R11;
		/* 82181CB8h case    4:*/		return 0x82181CBC;
		  /* 82181CBCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82181CBCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181CBCh case    5:*/		return 0x82181CC0;
		  /* 82181CC0h */ case    6:  		/* bc 4, CR6_EQ, -340 */
		/* 82181CC0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82181B6C;  }
		/* 82181CC0h case    6:*/		return 0x82181CC4;
	}
	return 0x82181CC4;
} // Block from 82181CA8h-82181CC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82181CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181CC4);
		  /* 82181CC4h */ case    0:  		/* li R4, 1 */
		/* 82181CC4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82181CC4h case    0:*/		return 0x82181CC8;
		  /* 82181CC8h */ case    1:  		/* mr R3, R18 */
		/* 82181CC8h case    1:*/		regs.R3 = regs.R18;
		/* 82181CC8h case    1:*/		return 0x82181CCC;
		  /* 82181CCCh */ case    2:  		/* bl 359340 */
		/* 82181CCCh case    2:*/		regs.LR = 0x82181CD0; return 0x821D9878;
		/* 82181CCCh case    2:*/		return 0x82181CD0;
	}
	return 0x82181CD0;
} // Block from 82181CC4h-82181CD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82181CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181CD0);
		  /* 82181CD0h */ case    0:  		/* addi R1, R1, 304 */
		/* 82181CD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 82181CD0h case    0:*/		return 0x82181CD4;
		  /* 82181CD4h */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82181CD4h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82181CD4h case    1:*/		return 0x82181CD8;
		  /* 82181CD8h */ case    2:  		/* b -985704 */
		/* 82181CD8h case    2:*/		return 0x82091270;
		/* 82181CD8h case    2:*/		return 0x82181CDC;
		  /* 82181CDCh */ case    3:  		/* nop */
		/* 82181CDCh case    3:*/		cpu::op::nop();
		/* 82181CDCh case    3:*/		return 0x82181CE0;
	}
	return 0x82181CE0;
} // Block from 82181CD0h-82181CE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82181CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181CE0);
		  /* 82181CE0h */ case    0:  		/* mfspr R12, LR */
		/* 82181CE0h case    0:*/		regs.R12 = regs.LR;
		/* 82181CE0h case    0:*/		return 0x82181CE4;
		  /* 82181CE4h */ case    1:  		/* bl -985796 */
		/* 82181CE4h case    1:*/		regs.LR = 0x82181CE8; return 0x82091220;
		/* 82181CE4h case    1:*/		return 0x82181CE8;
		  /* 82181CE8h */ case    2:  		/* stwu R1, <#[R1 - 432]> */
		/* 82181CE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 82181CE8h case    2:*/		return 0x82181CEC;
		  /* 82181CECh */ case    3:  		/* lwz R11, <#[R4 + 36]> */
		/* 82181CECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 82181CECh case    3:*/		return 0x82181CF0;
		  /* 82181CF0h */ case    4:  		/* li R24, 0 */
		/* 82181CF0h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82181CF0h case    4:*/		return 0x82181CF4;
		  /* 82181CF4h */ case    5:  		/* stw R4, <#[R1 + 460]> */
		/* 82181CF4h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000001CC) );
		/* 82181CF4h case    5:*/		return 0x82181CF8;
		  /* 82181CF8h */ case    6:  		/* mr R14, R3 */
		/* 82181CF8h case    6:*/		regs.R14 = regs.R3;
		/* 82181CF8h case    6:*/		return 0x82181CFC;
		  /* 82181CFCh */ case    7:  		/* mr R25, R4 */
		/* 82181CFCh case    7:*/		regs.R25 = regs.R4;
		/* 82181CFCh case    7:*/		return 0x82181D00;
		  /* 82181D00h */ case    8:  		/* stb R24, <#[R1 + 109]> */
		/* 82181D00h case    8:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x0000006D) );
		/* 82181D00h case    8:*/		return 0x82181D04;
		  /* 82181D04h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82181D04h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82181D04h case    9:*/		return 0x82181D08;
		  /* 82181D08h */ case   10:  		/* stb R24, <#[R1 + 108]> */
		/* 82181D08h case   10:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x0000006C) );
		/* 82181D08h case   10:*/		return 0x82181D0C;
		  /* 82181D0Ch */ case   11:  		/* bc 4, CR0_EQ, 6724 */
		/* 82181D0Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82183750;  }
		/* 82181D0Ch case   11:*/		return 0x82181D10;
		  /* 82181D10h */ case   12:  		/* lwz R11, <#[R4 + 32]> */
		/* 82181D10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000020) );
		/* 82181D10h case   12:*/		return 0x82181D14;
		  /* 82181D14h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82181D14h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82181D14h case   13:*/		return 0x82181D18;
		  /* 82181D18h */ case   14:  		/* addic. R26, R11, -40 */
		/* 82181D18h case   14:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 82181D18h case   14:*/		return 0x82181D1C;
		  /* 82181D1Ch */ case   15:  		/* stw R26, <#[R1 + 124]> */
		/* 82181D1Ch case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000007C) );
		/* 82181D1Ch case   15:*/		return 0x82181D20;
		  /* 82181D20h */ case   16:  		/* bc 12, CR0_EQ, 6704 */
		/* 82181D20h case   16:*/		if ( regs.CR[0].eq ) { return 0x82183750;  }
		/* 82181D20h case   16:*/		return 0x82181D24;
		  /* 82181D24h */ case   17:  		/* lwz R10, <#[R26 + 8]> */
		/* 82181D24h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 82181D24h case   17:*/		return 0x82181D28;
		  /* 82181D28h */ case   18:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 82181D28h case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 82181D28h case   18:*/		return 0x82181D2C;
		  /* 82181D2Ch */ case   19:  		/* cmplwi CR6, R11, 86 */
		/* 82181D2Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 82181D2Ch case   19:*/		return 0x82181D30;
		  /* 82181D30h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 82181D30h case   20:*/		if ( regs.CR[6].eq ) { return 0x82181D60;  }
		/* 82181D30h case   20:*/		return 0x82181D34;
		  /* 82181D34h */ case   21:  		/* cmplwi CR6, R11, 87 */
		/* 82181D34h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 82181D34h case   21:*/		return 0x82181D38;
		  /* 82181D38h */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 82181D38h case   22:*/		if ( regs.CR[6].eq ) { return 0x82181D60;  }
		/* 82181D38h case   22:*/		return 0x82181D3C;
		  /* 82181D3Ch */ case   23:  		/* cmplwi CR6, R11, 89 */
		/* 82181D3Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 82181D3Ch case   23:*/		return 0x82181D40;
		  /* 82181D40h */ case   24:  		/* bc 12, CR6_EQ, 32 */
		/* 82181D40h case   24:*/		if ( regs.CR[6].eq ) { return 0x82181D60;  }
		/* 82181D40h case   24:*/		return 0x82181D44;
		  /* 82181D44h */ case   25:  		/* cmplwi CR6, R11, 90 */
		/* 82181D44h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 82181D44h case   25:*/		return 0x82181D48;
		  /* 82181D48h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 82181D48h case   26:*/		if ( regs.CR[6].eq ) { return 0x82181D60;  }
		/* 82181D48h case   26:*/		return 0x82181D4C;
		  /* 82181D4Ch */ case   27:  		/* cmplwi CR6, R11, 84 */
		/* 82181D4Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 82181D4Ch case   27:*/		return 0x82181D50;
		  /* 82181D50h */ case   28:  		/* bc 12, CR6_EQ, 16 */
		/* 82181D50h case   28:*/		if ( regs.CR[6].eq ) { return 0x82181D60;  }
		/* 82181D50h case   28:*/		return 0x82181D54;
		  /* 82181D54h */ case   29:  		/* cmplwi CR6, R11, 85 */
		/* 82181D54h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 82181D54h case   29:*/		return 0x82181D58;
		  /* 82181D58h */ case   30:  		/* mr R11, R24 */
		/* 82181D58h case   30:*/		regs.R11 = regs.R24;
		/* 82181D58h case   30:*/		return 0x82181D5C;
		  /* 82181D5Ch */ case   31:  		/* bc 4, CR6_EQ, 8 */
		/* 82181D5Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x82181D64;  }
		/* 82181D5Ch case   31:*/		return 0x82181D60;
	}
	return 0x82181D60;
} // Block from 82181CE0h-82181D60h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82181D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181D60);
		  /* 82181D60h */ case    0:  		/* li R11, 1 */
		/* 82181D60h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82181D60h case    0:*/		return 0x82181D64;
	}
	return 0x82181D64;
} // Block from 82181D60h-82181D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181D64);
		  /* 82181D64h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82181D64h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82181D64h case    0:*/		return 0x82181D68;
		  /* 82181D68h */ case    1:  		/* bc 12, CR0_EQ, 6632 */
		/* 82181D68h case    1:*/		if ( regs.CR[0].eq ) { return 0x82183750;  }
		/* 82181D68h case    1:*/		return 0x82181D6C;
		  /* 82181D6Ch */ case    2:  		/* rlwinm. R11, R10, 15, 31, 31 */
		/* 82181D6Ch case    2:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R10);
		/* 82181D6Ch case    2:*/		return 0x82181D70;
		  /* 82181D70h */ case    3:  		/* bc 12, CR0_EQ, 6624 */
		/* 82181D70h case    3:*/		if ( regs.CR[0].eq ) { return 0x82183750;  }
		/* 82181D70h case    3:*/		return 0x82181D74;
		  /* 82181D74h */ case    4:  		/* li R30, 1 */
		/* 82181D74h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 82181D74h case    4:*/		return 0x82181D78;
		  /* 82181D78h */ case    5:  		/* mr R3, R26 */
		/* 82181D78h case    5:*/		regs.R3 = regs.R26;
		/* 82181D78h case    5:*/		return 0x82181D7C;
		  /* 82181D7Ch */ case    6:  		/* stw R30, <#[R1 + 172]> */
		/* 82181D7Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000AC) );
		/* 82181D7Ch case    6:*/		return 0x82181D80;
		  /* 82181D80h */ case    7:  		/* bl -86344 */
		/* 82181D80h case    7:*/		regs.LR = 0x82181D84; return 0x8216CC38;
		/* 82181D80h case    7:*/		return 0x82181D84;
		  /* 82181D84h */ case    8:  		/* lwz R27, <#[R3 + 12]> */
		/* 82181D84h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000000C) );
		/* 82181D84h case    8:*/		return 0x82181D88;
		  /* 82181D88h */ case    9:  		/* mr R31, R24 */
		/* 82181D88h case    9:*/		regs.R31 = regs.R24;
		/* 82181D88h case    9:*/		return 0x82181D8C;
		  /* 82181D8Ch */ case   10:  		/* lwz R10, <#[R27 + 8]> */
		/* 82181D8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 82181D8Ch case   10:*/		return 0x82181D90;
		  /* 82181D90h */ case   11:  		/* stw R27, <#[R1 + 140]> */
		/* 82181D90h case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x0000008C) );
		/* 82181D90h case   11:*/		return 0x82181D94;
		  /* 82181D94h */ case   12:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 82181D94h case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 82181D94h case   12:*/		return 0x82181D98;
		  /* 82181D98h */ case   13:  		/* cmplwi CR6, R11, 21 */
		/* 82181D98h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 82181D98h case   13:*/		return 0x82181D9C;
		  /* 82181D9Ch */ case   14:  		/* bc 12, CR6_LT, 16 */
		/* 82181D9Ch case   14:*/		if ( regs.CR[6].lt ) { return 0x82181DAC;  }
		/* 82181D9Ch case   14:*/		return 0x82181DA0;
		  /* 82181DA0h */ case   15:  		/* cmplwi CR6, R11, 24 */
		/* 82181DA0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 82181DA0h case   15:*/		return 0x82181DA4;
		  /* 82181DA4h */ case   16:  		/* li R11, 1 */
		/* 82181DA4h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82181DA4h case   16:*/		return 0x82181DA8;
		  /* 82181DA8h */ case   17:  		/* bc 4, CR6_GT, 8 */
		/* 82181DA8h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82181DB0;  }
		/* 82181DA8h case   17:*/		return 0x82181DAC;
	}
	return 0x82181DAC;
} // Block from 82181D64h-82181DACh (18 instructions)

//////////////////////////////////////////////////////
// Block at 82181DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181DAC);
		  /* 82181DACh */ case    0:  		/* mr R11, R24 */
		/* 82181DACh case    0:*/		regs.R11 = regs.R24;
		/* 82181DACh case    0:*/		return 0x82181DB0;
	}
	return 0x82181DB0;
} // Block from 82181DACh-82181DB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181DB0);
		  /* 82181DB0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82181DB0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82181DB0h case    0:*/		return 0x82181DB4;
		  /* 82181DB4h */ case    1:  		/* bc 12, CR0_EQ, 112 */
		/* 82181DB4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82181E24;  }
		/* 82181DB4h case    1:*/		return 0x82181DB8;
		  /* 82181DB8h */ case    2:  		/* lwz R31, <#[R27 + 48]> */
		/* 82181DB8h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000030) );
		/* 82181DB8h case    2:*/		return 0x82181DBC;
		  /* 82181DBCh */ case    3:  		/* lwz R9, <#[R27 + 4]> */
		/* 82181DBCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000004) );
		/* 82181DBCh case    3:*/		return 0x82181DC0;
		  /* 82181DC0h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 82181DC0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82181DC0h case    4:*/		return 0x82181DC4;
		  /* 82181DC4h */ case    5:  		/* bc 12, CR6_EQ, 112 */
		/* 82181DC4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82181E34;  }
		/* 82181DC4h case    5:*/		return 0x82181DC8;
		  /* 82181DC8h */ case    6:  		/* lwz R11, <#[R9 + 16]> */
		/* 82181DC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 82181DC8h case    6:*/		return 0x82181DCC;
		  /* 82181DCCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82181DCCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181DCCh case    7:*/		return 0x82181DD0;
		  /* 82181DD0h */ case    8:  		/* bc 12, CR6_EQ, 76 */
		/* 82181DD0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82181E1C;  }
		/* 82181DD0h case    8:*/		return 0x82181DD4;
		  /* 82181DD4h */ case    9:  		/* lwz R10, <#[R9]> */
		/* 82181DD4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 82181DD4h case    9:*/		return 0x82181DD8;
		  /* 82181DD8h */ case   10:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 82181DD8h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 82181DD8h case   10:*/		return 0x82181DDC;
		  /* 82181DDCh */ case   11:  		/* bc 12, CR0_EQ, 64 */
		/* 82181DDCh case   11:*/		if ( regs.CR[0].eq ) { return 0x82181E1C;  }
		/* 82181DDCh case   11:*/		return 0x82181DE0;
		  /* 82181DE0h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 82181DE0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82181DE0h case   12:*/		return 0x82181DE4;
		  /* 82181DE4h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 82181DE4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82181DE4h case   13:*/		return 0x82181DE8;
		  /* 82181DE8h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 82181DE8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82181E1C;  }
		/* 82181DE8h case   14:*/		return 0x82181DEC;
		  /* 82181DECh */ case   15:  		/* lwz R11, <#[R10 + 16]> */
		/* 82181DECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82181DECh case   15:*/		return 0x82181DF0;
		  /* 82181DF0h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82181DF0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82181DF0h case   16:*/		return 0x82181DF4;
		  /* 82181DF4h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 82181DF4h case   17:*/		if ( regs.CR[6].eq ) { return 0x82181E14;  }
		/* 82181DF4h case   17:*/		return 0x82181DF8;
		  /* 82181DF8h */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 82181DF8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82181DF8h case   18:*/		return 0x82181DFC;
		  /* 82181DFCh */ case   19:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82181DFCh case   19:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82181DFCh case   19:*/		return 0x82181E00;
		  /* 82181E00h */ case   20:  		/* cmplwi CR6, R11, 64 */
		/* 82181E00h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82181E00h case   20:*/		return 0x82181E04;
		  /* 82181E04h */ case   21:  		/* bc 12, CR6_EQ, 12 */
		/* 82181E04h case   21:*/		if ( regs.CR[6].eq ) { return 0x82181E10;  }
		/* 82181E04h case   21:*/		return 0x82181E08;
		  /* 82181E08h */ case   22:  		/* cmplwi CR6, R11, 63 */
		/* 82181E08h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003F);
		/* 82181E08h case   22:*/		return 0x82181E0C;
		  /* 82181E0Ch */ case   23:  		/* bc 4, CR6_EQ, 8 */
		/* 82181E0Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x82181E14;  }
		/* 82181E0Ch case   23:*/		return 0x82181E10;
	}
	return 0x82181E10;
} // Block from 82181DB0h-82181E10h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82181E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181E10);
		  /* 82181E10h */ case    0:  		/* addi R30, R30, 1 */
		/* 82181E10h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82181E10h case    0:*/		return 0x82181E14;
	}
	return 0x82181E14;
} // Block from 82181E10h-82181E14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181E14);
		  /* 82181E14h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 82181E14h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82181E14h case    0:*/		return 0x82181E18;
		  /* 82181E18h */ case    1:  		/* b -52 */
		/* 82181E18h case    1:*/		return 0x82181DE4;
		/* 82181E18h case    1:*/		return 0x82181E1C;
	}
	return 0x82181E1C;
} // Block from 82181E14h-82181E1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181E1C);
		  /* 82181E1Ch */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 82181E1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82181E1Ch case    0:*/		return 0x82181E20;
		  /* 82181E20h */ case    1:  		/* b -96 */
		/* 82181E20h case    1:*/		return 0x82181DC0;
		/* 82181E20h case    1:*/		return 0x82181E24;
	}
	return 0x82181E24;
} // Block from 82181E1Ch-82181E24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82181E24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181E24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181E24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181E24);
		  /* 82181E24h */ case    0:  		/* rlwinm. R11, R10, 0, 10, 12 */
		/* 82181E24h case    0:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R10);
		/* 82181E24h case    0:*/		return 0x82181E28;
		  /* 82181E28h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82181E28h case    1:*/		if ( regs.CR[0].eq ) { return 0x82181E38;  }
		/* 82181E28h case    1:*/		return 0x82181E2C;
		  /* 82181E2Ch */ case    2:  		/* lwz R31, <#[R27 + 44]> */
		/* 82181E2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x0000002C) );
		/* 82181E2Ch case    2:*/		return 0x82181E30;
		  /* 82181E30h */ case    3:  		/* b 8 */
		/* 82181E30h case    3:*/		return 0x82181E38;
		/* 82181E30h case    3:*/		return 0x82181E34;
	}
	return 0x82181E34;
} // Block from 82181E24h-82181E34h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82181E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181E34);
		  /* 82181E34h */ case    0:  		/* stw R30, <#[R1 + 172]> */
		/* 82181E34h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000AC) );
		/* 82181E34h case    0:*/		return 0x82181E38;
	}
	return 0x82181E38;
} // Block from 82181E34h-82181E38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82181E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181E38);
		  /* 82181E38h */ case    0:  		/* addi R11, R1, 120 */
		/* 82181E38h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 82181E38h case    0:*/		return 0x82181E3C;
		  /* 82181E3Ch */ case    1:  		/* stw R24, <#[R1 + 132]> */
		/* 82181E3Ch case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000084) );
		/* 82181E3Ch case    1:*/		return 0x82181E40;
		  /* 82181E40h */ case    2:  		/* addi R10, R1, 156 */
		/* 82181E40h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 82181E40h case    2:*/		return 0x82181E44;
		  /* 82181E44h */ case    3:  		/* stw R24, <#[R1 + 116]> */
		/* 82181E44h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000074) );
		/* 82181E44h case    3:*/		return 0x82181E48;
		  /* 82181E48h */ case    4:  		/* addi R9, R1, 100 */
		/* 82181E48h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 82181E48h case    4:*/		return 0x82181E4C;
		  /* 82181E4Ch */ case    5:  		/* stw R11, <#[R1 + 84]> */
		/* 82181E4Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82181E4Ch case    5:*/		return 0x82181E50;
		  /* 82181E50h */ case    6:  		/* addi R8, R1, 112 */
		/* 82181E50h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 82181E50h case    6:*/		return 0x82181E54;
		  /* 82181E54h */ case    7:  		/* stw R24, <#[R1 + 144]> */
		/* 82181E54h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000090) );
		/* 82181E54h case    7:*/		return 0x82181E58;
		  /* 82181E58h */ case    8:  		/* addi R7, R1, 98 */
		/* 82181E58h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x62);
		/* 82181E58h case    8:*/		return 0x82181E5C;
		  /* 82181E5Ch */ case    9:  		/* addi R6, R1, 160 */
		/* 82181E5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 82181E5Ch case    9:*/		return 0x82181E60;
		  /* 82181E60h */ case   10:  		/* mr R5, R26 */
		/* 82181E60h case   10:*/		regs.R5 = regs.R26;
		/* 82181E60h case   10:*/		return 0x82181E64;
		  /* 82181E64h */ case   11:  		/* mr R4, R25 */
		/* 82181E64h case   11:*/		regs.R4 = regs.R25;
		/* 82181E64h case   11:*/		return 0x82181E68;
		  /* 82181E68h */ case   12:  		/* mr R3, R14 */
		/* 82181E68h case   12:*/		regs.R3 = regs.R14;
		/* 82181E68h case   12:*/		return 0x82181E6C;
		  /* 82181E6Ch */ case   13:  		/* bl -23084 */
		/* 82181E6Ch case   13:*/		regs.LR = 0x82181E70; return 0x8217C440;
		/* 82181E6Ch case   13:*/		return 0x82181E70;
		  /* 82181E70h */ case   14:  		/* lwz R29, <#[R1 + 100]> */
		/* 82181E70h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 82181E70h case   14:*/		return 0x82181E74;
		  /* 82181E74h */ case   15:  		/* lwz R28, <#[R1 + 160]> */
		/* 82181E74h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A0) );
		/* 82181E74h case   15:*/		return 0x82181E78;
		  /* 82181E78h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82181E78h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82181E78h case   16:*/		return 0x82181E7C;
		  /* 82181E7Ch */ case   17:  		/* bc 4, CR0_EQ, 212 */
		/* 82181E7Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x82181F50;  }
		/* 82181E7Ch case   17:*/		return 0x82181E80;
		  /* 82181E80h */ case   18:  		/* cmpwi CR6, R28, 3 */
		/* 82181E80h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000003);
		/* 82181E80h case   18:*/		return 0x82181E84;
		  /* 82181E84h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 82181E84h case   19:*/		if ( regs.CR[6].eq ) { return 0x82181EA8;  }
		/* 82181E84h case   19:*/		return 0x82181E88;
		  /* 82181E88h */ case   20:  		/* cmpwi CR6, R28, 4 */
		/* 82181E88h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 82181E88h case   20:*/		return 0x82181E8C;
		  /* 82181E8Ch */ case   21:  		/* bc 4, CR6_EQ, 6312 */
		/* 82181E8Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x82183734;  }
		/* 82181E8Ch case   21:*/		return 0x82181E90;
		  /* 82181E90h */ case   22:  		/* lwz R11, <#[R1 + 160]> */
		/* 82181E90h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82181E90h case   22:*/		return 0x82181E94;
		  /* 82181E94h */ case   23:  		/* lwz R27, <#[R1 + 140]> */
		/* 82181E94h case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000008C) );
		/* 82181E94h case   23:*/		return 0x82181E98;
		  /* 82181E98h */ case   24:  		/* lwz R26, <#[R1 + 124]> */
		/* 82181E98h case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000007C) );
		/* 82181E98h case   24:*/		return 0x82181E9C;
		  /* 82181E9Ch */ case   25:  		/* cmpwi CR6, R11, 3 */
		/* 82181E9Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82181E9Ch case   25:*/		return 0x82181EA0;
		  /* 82181EA0h */ case   26:  		/* bc 4, CR6_EQ, 5844 */
		/* 82181EA0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82183574;  }
		/* 82181EA0h case   26:*/		return 0x82181EA4;
		  /* 82181EA4h */ case   27:  		/* lwz R29, <#[R1 + 100]> */
		/* 82181EA4h case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 82181EA4h case   27:*/		return 0x82181EA8;
	}
	return 0x82181EA8;
} // Block from 82181E38h-82181EA8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82181EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181EA8);
		  /* 82181EA8h */ case    0:  		/* addi R8, R1, 96 */
		/* 82181EA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 82181EA8h case    0:*/		return 0x82181EAC;
		  /* 82181EACh */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 82181EACh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 82181EACh case    1:*/		return 0x82181EB0;
		  /* 82181EB0h */ case    2:  		/* mr R7, R27 */
		/* 82181EB0h case    2:*/		regs.R7 = regs.R27;
		/* 82181EB0h case    2:*/		return 0x82181EB4;
		  /* 82181EB4h */ case    3:  		/* mr R6, R26 */
		/* 82181EB4h case    3:*/		regs.R6 = regs.R26;
		/* 82181EB4h case    3:*/		return 0x82181EB8;
		  /* 82181EB8h */ case    4:  		/* mr R4, R29 */
		/* 82181EB8h case    4:*/		regs.R4 = regs.R29;
		/* 82181EB8h case    4:*/		return 0x82181EBC;
		  /* 82181EBCh */ case    5:  		/* mr R3, R14 */
		/* 82181EBCh case    5:*/		regs.R3 = regs.R14;
		/* 82181EBCh case    5:*/		return 0x82181EC0;
		  /* 82181EC0h */ case    6:  		/* bl -35200 */
		/* 82181EC0h case    6:*/		regs.LR = 0x82181EC4; return 0x82179540;
		/* 82181EC0h case    6:*/		return 0x82181EC4;
		  /* 82181EC4h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82181EC4h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82181EC4h case    7:*/		return 0x82181EC8;
		  /* 82181EC8h */ case    8:  		/* bc 12, CR0_EQ, 5964 */
		/* 82181EC8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82183614;  }
		/* 82181EC8h case    8:*/		return 0x82181ECC;
		  /* 82181ECCh */ case    9:  		/* lbz R31, <#[R1 + 98]> */
		/* 82181ECCh case    9:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000062) );
		/* 82181ECCh case    9:*/		return 0x82181ED0;
		  /* 82181ED0h */ case   10:  		/* lwz R30, <#[R1 + 124]> */
		/* 82181ED0h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000007C) );
		/* 82181ED0h case   10:*/		return 0x82181ED4;
		  /* 82181ED4h */ case   11:  		/* cmplwi CR0, R31, 0 */
		/* 82181ED4h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82181ED4h case   11:*/		return 0x82181ED8;
		  /* 82181ED8h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 82181ED8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82181EEC;  }
		/* 82181ED8h case   12:*/		return 0x82181EDC;
		  /* 82181EDCh */ case   13:  		/* mr R3, R14 */
		/* 82181EDCh case   13:*/		regs.R3 = regs.R14;
		/* 82181EDCh case   13:*/		return 0x82181EE0;
		  /* 82181EE0h */ case   14:  		/* mr R4, R30 */
		/* 82181EE0h case   14:*/		regs.R4 = regs.R30;
		/* 82181EE0h case   14:*/		return 0x82181EE4;
		  /* 82181EE4h */ case   15:  		/* bl -38108 */
		/* 82181EE4h case   15:*/		regs.LR = 0x82181EE8; return 0x82178A08;
		/* 82181EE4h case   15:*/		return 0x82181EE8;
		  /* 82181EE8h */ case   16:  		/* li R31, 0 */
		/* 82181EE8h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82181EE8h case   16:*/		return 0x82181EEC;
	}
	return 0x82181EEC;
} // Block from 82181EA8h-82181EECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82181EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181EEC);
		  /* 82181EECh */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82181EECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181EECh case    0:*/		return 0x82181EF0;
		  /* 82181EF0h */ case    1:  		/* mr R3, R14 */
		/* 82181EF0h case    1:*/		regs.R3 = regs.R14;
		/* 82181EF0h case    1:*/		return 0x82181EF4;
		  /* 82181EF4h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82181EF4h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82181EF4h case    2:*/		return 0x82181EF8;
		  /* 82181EF8h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82181EF8h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82181EF8h case    3:*/		return 0x82181EFC;
		  /* 82181EFCh */ case    4:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82181EFCh case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82181EFCh case    4:*/		return 0x82181F00;
		  /* 82181F00h */ case    5:  		/* bl -121552 */
		/* 82181F00h case    5:*/		regs.LR = 0x82181F04; return 0x82164430;
		/* 82181F00h case    5:*/		return 0x82181F04;
		  /* 82181F04h */ case    6:  		/* addi R11, R30, -16 */
		/* 82181F04h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 82181F04h case    6:*/		return 0x82181F08;
		  /* 82181F08h */ case    7:  		/* lwz R6, <#[R1 + 112]> */
		/* 82181F08h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 82181F08h case    7:*/		return 0x82181F0C;
		  /* 82181F0Ch */ case    8:  		/* add R11, R3, R11 */
		/* 82181F0Ch case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82181F0Ch case    8:*/		return 0x82181F10;
		  /* 82181F10h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 82181F10h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82181F10h case    9:*/		return 0x82181F14;
		  /* 82181F14h */ case   10:  		/* cmplw CR6, R10, R6 */
		/* 82181F14h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 82181F14h case   10:*/		return 0x82181F18;
		  /* 82181F18h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82181F18h case   11:*/		if ( regs.CR[6].eq ) { return 0x82181F2C;  }
		/* 82181F18h case   11:*/		return 0x82181F1C;
		  /* 82181F1Ch */ case   12:  		/* lwz R10, <#[R11 + 12]> */
		/* 82181F1Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181F1Ch case   12:*/		return 0x82181F20;
		  /* 82181F20h */ case   13:  		/* nor R9, R10, R10 */
		/* 82181F20h case   13:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R10,regs.R10);
		/* 82181F20h case   13:*/		return 0x82181F24;
		  /* 82181F24h */ case   14:  		/* rlwimi R9, R10, 0, 31, 29 */
		/* 82181F24h case   14:*/		cpu::op::rlwimi<0,0,31,29>(regs,&regs.R9,regs.R10);
		/* 82181F24h case   14:*/		return 0x82181F28;
		  /* 82181F28h */ case   15:  		/* stw R9, <#[R11 + 12]> */
		/* 82181F28h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82181F28h case   15:*/		return 0x82181F2C;
	}
	return 0x82181F2C;
} // Block from 82181EECh-82181F2Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82181F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181F2C);
		  /* 82181F2Ch */ case    0:  		/* rlwinm R10, R31, 0, 24, 31 */
		/* 82181F2Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R31);
		/* 82181F2Ch case    0:*/		return 0x82181F30;
		  /* 82181F30h */ case    1:  		/* stw R6, <#[R11]> */
		/* 82181F30h case    1:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82181F30h case    1:*/		return 0x82181F34;
		  /* 82181F34h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 82181F34h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181F34h case    2:*/		return 0x82181F38;
		  /* 82181F38h */ case    3:  		/* li R7, 1 */
		/* 82181F38h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82181F38h case    3:*/		return 0x82181F3C;
		  /* 82181F3Ch */ case    4:  		/* rlwimi R11, R10, 18, 13, 13 */
		/* 82181F3Ch case    4:*/		cpu::op::rlwimi<0,18,13,13>(regs,&regs.R11,regs.R10);
		/* 82181F3Ch case    4:*/		return 0x82181F40;
		  /* 82181F40h */ case    5:  		/* lwz R29, <#[R1 + 460]> */
		/* 82181F40h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000001CC) );
		/* 82181F40h case    5:*/		return 0x82181F44;
		  /* 82181F44h */ case    6:  		/* lbz R8, <#[R1 + 96]> */
		/* 82181F44h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 82181F44h case    6:*/		return 0x82181F48;
		  /* 82181F48h */ case    7:  		/* stw R11, <#[R30 + 8]> */
		/* 82181F48h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82181F48h case    7:*/		return 0x82181F4C;
		  /* 82181F4Ch */ case    8:  		/* b 5804 */
		/* 82181F4Ch case    8:*/		return 0x821835F8;
		/* 82181F4Ch case    8:*/		return 0x82181F50;
	}
	return 0x82181F50;
} // Block from 82181F2Ch-82181F50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82181F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181F50);
		  /* 82181F50h */ case    0:  		/* mr R4, R14 */
		/* 82181F50h case    0:*/		regs.R4 = regs.R14;
		/* 82181F50h case    0:*/		return 0x82181F54;
		  /* 82181F54h */ case    1:  		/* mr R3, R26 */
		/* 82181F54h case    1:*/		regs.R3 = regs.R26;
		/* 82181F54h case    1:*/		return 0x82181F58;
		  /* 82181F58h */ case    2:  		/* bl -120784 */
		/* 82181F58h case    2:*/		regs.LR = 0x82181F5C; return 0x82164788;
		/* 82181F58h case    2:*/		return 0x82181F5C;
		  /* 82181F5Ch */ case    3:  		/* cmpwi CR6, R3, 1 */
		/* 82181F5Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82181F5Ch case    3:*/		return 0x82181F60;
		  /* 82181F60h */ case    4:  		/* bc 12, CR6_EQ, -208 */
		/* 82181F60h case    4:*/		if ( regs.CR[6].eq ) { return 0x82181E90;  }
		/* 82181F60h case    4:*/		return 0x82181F64;
		  /* 82181F64h */ case    5:  		/* cmpwi CR6, R3, 2 */
		/* 82181F64h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82181F64h case    5:*/		return 0x82181F68;
		  /* 82181F68h */ case    6:  		/* bc 4, CR6_GT, 28 */
		/* 82181F68h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82181F84;  }
		/* 82181F68h case    6:*/		return 0x82181F6C;
		  /* 82181F6Ch */ case    7:  		/* cmpwi CR6, R3, 4 */
		/* 82181F6Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82181F6Ch case    7:*/		return 0x82181F70;
		  /* 82181F70h */ case    8:  		/* bc 4, CR6_GT, -224 */
		/* 82181F70h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82181E90;  }
		/* 82181F70h case    8:*/		return 0x82181F74;
		  /* 82181F74h */ case    9:  		/* cmpwi CR6, R3, 7 */
		/* 82181F74h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 82181F74h case    9:*/		return 0x82181F78;
		  /* 82181F78h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 82181F78h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82181F84;  }
		/* 82181F78h case   10:*/		return 0x82181F7C;
		  /* 82181F7Ch */ case   11:  		/* cmpwi CR6, R3, 9 */
		/* 82181F7Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 82181F7Ch case   11:*/		return 0x82181F80;
		  /* 82181F80h */ case   12:  		/* bc 4, CR6_GT, -240 */
		/* 82181F80h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82181E90;  }
		/* 82181F80h case   12:*/		return 0x82181F84;
	}
	return 0x82181F84;
} // Block from 82181F50h-82181F84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82181F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181F84);
		  /* 82181F84h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82181F84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82181F84h case    0:*/		return 0x82181F88;
		  /* 82181F88h */ case    1:  		/* bc 12, CR6_EQ, 92 */
		/* 82181F88h case    1:*/		if ( regs.CR[6].eq ) { return 0x82181FE4;  }
		/* 82181F88h case    1:*/		return 0x82181F8C;
		  /* 82181F8Ch */ case    2:  		/* lwz R31, <#[R31 + 12]> */
		/* 82181F8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 82181F8Ch case    2:*/		return 0x82181F90;
		  /* 82181F90h */ case    3:  		/* cmpwi CR6, R3, 2 */
		/* 82181F90h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82181F90h case    3:*/		return 0x82181F94;
		  /* 82181F94h */ case    4:  		/* bc 12, CR6_EQ, 80 */
		/* 82181F94h case    4:*/		if ( regs.CR[6].eq ) { return 0x82181FE4;  }
		/* 82181F94h case    4:*/		return 0x82181F98;
		  /* 82181F98h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181F98h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181F98h case    5:*/		return 0x82181F9C;
		  /* 82181F9Ch */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82181F9Ch case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82181F9Ch case    6:*/		return 0x82181FA0;
		  /* 82181FA0h */ case    7:  		/* cmplwi CR6, R11, 15872 */
		/* 82181FA0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 82181FA0h case    7:*/		return 0x82181FA4;
		  /* 82181FA4h */ case    8:  		/* bc 4, CR6_EQ, 64 */
		/* 82181FA4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82181FE4;  }
		/* 82181FA4h case    8:*/		return 0x82181FA8;
		  /* 82181FA8h */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 82181FA8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82181FA8h case    9:*/		return 0x82181FAC;
		  /* 82181FACh */ case   10:  		/* mr R3, R14 */
		/* 82181FACh case   10:*/		regs.R3 = regs.R14;
		/* 82181FACh case   10:*/		return 0x82181FB0;
		  /* 82181FB0h */ case   11:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82181FB0h case   11:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82181FB0h case   11:*/		return 0x82181FB4;
		  /* 82181FB4h */ case   12:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82181FB4h case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82181FB4h case   12:*/		return 0x82181FB8;
		  /* 82181FB8h */ case   13:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82181FB8h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82181FB8h case   13:*/		return 0x82181FBC;
		  /* 82181FBCh */ case   14:  		/* bl -121740 */
		/* 82181FBCh case   14:*/		regs.LR = 0x82181FC0; return 0x82164430;
		/* 82181FBCh case   14:*/		return 0x82181FC0;
		  /* 82181FC0h */ case   15:  		/* addi R10, R31, -8 */
		/* 82181FC0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFF8);
		/* 82181FC0h case   15:*/		return 0x82181FC4;
		  /* 82181FC4h */ case   16:  		/* lwz R11, <#[R14 + 12]> */
		/* 82181FC4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000000C) );
		/* 82181FC4h case   16:*/		return 0x82181FC8;
		  /* 82181FC8h */ case   17:  		/* lwzx R10, <#[R3 + R10]> */
		/* 82181FC8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 82181FC8h case   17:*/		return 0x82181FCC;
		  /* 82181FCCh */ case   18:  		/* rlwinm R10, R10, 0, 17, 31 */
		/* 82181FCCh case   18:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R10);
		/* 82181FCCh case   18:*/		return 0x82181FD0;
		  /* 82181FD0h */ case   19:  		/* mulli R10, R10, 40 */
		/* 82181FD0h case   19:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 82181FD0h case   19:*/		return 0x82181FD4;
		  /* 82181FD4h */ case   20:  		/* add R11, R10, R11 */
		/* 82181FD4h case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82181FD4h case   20:*/		return 0x82181FD8;
		  /* 82181FD8h */ case   21:  		/* lwz R11, <#[R11 + 4]> */
		/* 82181FD8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82181FD8h case   21:*/		return 0x82181FDC;
		  /* 82181FDCh */ case   22:  		/* rlwinm. R11, R11, 0, 25, 27 */
		/* 82181FDCh case   22:*/		cpu::op::rlwinm<1,0,25,27>(regs,&regs.R11,regs.R11);
		/* 82181FDCh case   22:*/		return 0x82181FE0;
		  /* 82181FE0h */ case   23:  		/* bc 12, CR0_EQ, -336 */
		/* 82181FE0h case   23:*/		if ( regs.CR[0].eq ) { return 0x82181E90;  }
		/* 82181FE0h case   23:*/		return 0x82181FE4;
	}
	return 0x82181FE4;
} // Block from 82181F84h-82181FE4h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82181FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82181FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82181FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82181FE4);
		  /* 82181FE4h */ case    0:  		/* mr R4, R29 */
		/* 82181FE4h case    0:*/		regs.R4 = regs.R29;
		/* 82181FE4h case    0:*/		return 0x82181FE8;
		  /* 82181FE8h */ case    1:  		/* mr R3, R14 */
		/* 82181FE8h case    1:*/		regs.R3 = regs.R14;
		/* 82181FE8h case    1:*/		return 0x82181FEC;
		  /* 82181FECh */ case    2:  		/* bl -33844 */
		/* 82181FECh case    2:*/		regs.LR = 0x82181FF0; return 0x82179BB8;
		/* 82181FECh case    2:*/		return 0x82181FF0;
		  /* 82181FF0h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82181FF0h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82181FF0h case    3:*/		return 0x82181FF4;
		  /* 82181FF4h */ case    4:  		/* bc 12, CR0_EQ, -356 */
		/* 82181FF4h case    4:*/		if ( regs.CR[0].eq ) { return 0x82181E90;  }
		/* 82181FF4h case    4:*/		return 0x82181FF8;
		  /* 82181FF8h */ case    5:  		/* lwz R31, <#[R1 + 112]> */
		/* 82181FF8h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 82181FF8h case    5:*/		return 0x82181FFC;
		  /* 82181FFCh */ case    6:  		/* cmpwi CR6, R28, 4 */
		/* 82181FFCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 82181FFCh case    6:*/		return 0x82182000;
		  /* 82182000h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 82182000h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82182018;  }
		/* 82182000h case    7:*/		return 0x82182004;
		  /* 82182004h */ case    8:  		/* mr R4, R31 */
		/* 82182004h case    8:*/		regs.R4 = regs.R31;
		/* 82182004h case    8:*/		return 0x82182008;
		  /* 82182008h */ case    9:  		/* mr R3, R14 */
		/* 82182008h case    9:*/		regs.R3 = regs.R14;
		/* 82182008h case    9:*/		return 0x8218200C;
		  /* 8218200Ch */ case   10:  		/* bl -33876 */
		/* 8218200Ch case   10:*/		regs.LR = 0x82182010; return 0x82179BB8;
		/* 8218200Ch case   10:*/		return 0x82182010;
		  /* 82182010h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182010h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182010h case   11:*/		return 0x82182014;
		  /* 82182014h */ case   12:  		/* bc 12, CR0_EQ, 5476 */
		/* 82182014h case   12:*/		if ( regs.CR[0].eq ) { return 0x82183578;  }
		/* 82182014h case   12:*/		return 0x82182018;
	}
	return 0x82182018;
} // Block from 82181FE4h-82182018h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82182018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182018);
		  /* 82182018h */ case    0:  		/* stw R24, <#[R1 + 104]> */
		/* 82182018h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000068) );
		/* 82182018h case    0:*/		return 0x8218201C;
		  /* 8218201Ch */ case    1:  		/* addi R7, R1, 104 */
		/* 8218201Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 8218201Ch case    1:*/		return 0x82182020;
		  /* 82182020h */ case    2:  		/* lwz R30, <#[R1 + 120]> */
		/* 82182020h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000078) );
		/* 82182020h case    2:*/		return 0x82182024;
		  /* 82182024h */ case    3:  		/* li R6, 1 */
		/* 82182024h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82182024h case    3:*/		return 0x82182028;
		  /* 82182028h */ case    4:  		/* mr R4, R25 */
		/* 82182028h case    4:*/		regs.R4 = regs.R25;
		/* 82182028h case    4:*/		return 0x8218202C;
		  /* 8218202Ch */ case    5:  		/* mr R5, R30 */
		/* 8218202Ch case    5:*/		regs.R5 = regs.R30;
		/* 8218202Ch case    5:*/		return 0x82182030;
		  /* 82182030h */ case    6:  		/* mr R3, R14 */
		/* 82182030h case    6:*/		regs.R3 = regs.R14;
		/* 82182030h case    6:*/		return 0x82182034;
		  /* 82182034h */ case    7:  		/* bl -17724 */
		/* 82182034h case    7:*/		regs.LR = 0x82182038; return 0x8217DAF8;
		/* 82182034h case    7:*/		return 0x82182038;
		  /* 82182038h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182038h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182038h case    8:*/		return 0x8218203C;
		  /* 8218203Ch */ case    9:  		/* bc 12, CR0_EQ, -428 */
		/* 8218203Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82181E90;  }
		/* 8218203Ch case    9:*/		return 0x82182040;
		  /* 82182040h */ case   10:  		/* addi R7, R1, 104 */
		/* 82182040h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 82182040h case   10:*/		return 0x82182044;
		  /* 82182044h */ case   11:  		/* li R6, 0 */
		/* 82182044h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82182044h case   11:*/		return 0x82182048;
		  /* 82182048h */ case   12:  		/* mr R5, R29 */
		/* 82182048h case   12:*/		regs.R5 = regs.R29;
		/* 82182048h case   12:*/		return 0x8218204C;
		  /* 8218204Ch */ case   13:  		/* mr R4, R25 */
		/* 8218204Ch case   13:*/		regs.R4 = regs.R25;
		/* 8218204Ch case   13:*/		return 0x82182050;
		  /* 82182050h */ case   14:  		/* mr R3, R14 */
		/* 82182050h case   14:*/		regs.R3 = regs.R14;
		/* 82182050h case   14:*/		return 0x82182054;
		  /* 82182054h */ case   15:  		/* bl -17756 */
		/* 82182054h case   15:*/		regs.LR = 0x82182058; return 0x8217DAF8;
		/* 82182054h case   15:*/		return 0x82182058;
		  /* 82182058h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182058h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182058h case   16:*/		return 0x8218205C;
		  /* 8218205Ch */ case   17:  		/* bc 12, CR0_EQ, -460 */
		/* 8218205Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x82181E90;  }
		/* 8218205Ch case   17:*/		return 0x82182060;
		  /* 82182060h */ case   18:  		/* addi R7, R1, 104 */
		/* 82182060h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 82182060h case   18:*/		return 0x82182064;
		  /* 82182064h */ case   19:  		/* li R6, 1 */
		/* 82182064h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82182064h case   19:*/		return 0x82182068;
		  /* 82182068h */ case   20:  		/* mr R5, R30 */
		/* 82182068h case   20:*/		regs.R5 = regs.R30;
		/* 82182068h case   20:*/		return 0x8218206C;
		  /* 8218206Ch */ case   21:  		/* mr R4, R29 */
		/* 8218206Ch case   21:*/		regs.R4 = regs.R29;
		/* 8218206Ch case   21:*/		return 0x82182070;
		  /* 82182070h */ case   22:  		/* mr R3, R14 */
		/* 82182070h case   22:*/		regs.R3 = regs.R14;
		/* 82182070h case   22:*/		return 0x82182074;
		  /* 82182074h */ case   23:  		/* bl -17788 */
		/* 82182074h case   23:*/		regs.LR = 0x82182078; return 0x8217DAF8;
		/* 82182074h case   23:*/		return 0x82182078;
		  /* 82182078h */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182078h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182078h case   24:*/		return 0x8218207C;
		  /* 8218207Ch */ case   25:  		/* bc 12, CR0_EQ, -492 */
		/* 8218207Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x82181E90;  }
		/* 8218207Ch case   25:*/		return 0x82182080;
		  /* 82182080h */ case   26:  		/* cmpwi CR6, R28, 4 */
		/* 82182080h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 82182080h case   26:*/		return 0x82182084;
		  /* 82182084h */ case   27:  		/* bc 4, CR6_EQ, 100 */
		/* 82182084h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821820E8;  }
		/* 82182084h case   27:*/		return 0x82182088;
		  /* 82182088h */ case   28:  		/* addi R7, R1, 104 */
		/* 82182088h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 82182088h case   28:*/		return 0x8218208C;
		  /* 8218208Ch */ case   29:  		/* li R6, 0 */
		/* 8218208Ch case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218208Ch case   29:*/		return 0x82182090;
		  /* 82182090h */ case   30:  		/* mr R5, R31 */
		/* 82182090h case   30:*/		regs.R5 = regs.R31;
		/* 82182090h case   30:*/		return 0x82182094;
		  /* 82182094h */ case   31:  		/* mr R4, R25 */
		/* 82182094h case   31:*/		regs.R4 = regs.R25;
		/* 82182094h case   31:*/		return 0x82182098;
		  /* 82182098h */ case   32:  		/* mr R3, R14 */
		/* 82182098h case   32:*/		regs.R3 = regs.R14;
		/* 82182098h case   32:*/		return 0x8218209C;
		  /* 8218209Ch */ case   33:  		/* bl -17828 */
		/* 8218209Ch case   33:*/		regs.LR = 0x821820A0; return 0x8217DAF8;
		/* 8218209Ch case   33:*/		return 0x821820A0;
		  /* 821820A0h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821820A0h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821820A0h case   34:*/		return 0x821820A4;
		  /* 821820A4h */ case   35:  		/* bc 12, CR0_EQ, 5332 */
		/* 821820A4h case   35:*/		if ( regs.CR[0].eq ) { return 0x82183578;  }
		/* 821820A4h case   35:*/		return 0x821820A8;
		  /* 821820A8h */ case   36:  		/* addi R7, R1, 104 */
		/* 821820A8h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 821820A8h case   36:*/		return 0x821820AC;
		  /* 821820ACh */ case   37:  		/* li R6, 1 */
		/* 821820ACh case   37:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821820ACh case   37:*/		return 0x821820B0;
		  /* 821820B0h */ case   38:  		/* mr R5, R30 */
		/* 821820B0h case   38:*/		regs.R5 = regs.R30;
		/* 821820B0h case   38:*/		return 0x821820B4;
		  /* 821820B4h */ case   39:  		/* mr R4, R31 */
		/* 821820B4h case   39:*/		regs.R4 = regs.R31;
		/* 821820B4h case   39:*/		return 0x821820B8;
		  /* 821820B8h */ case   40:  		/* mr R3, R14 */
		/* 821820B8h case   40:*/		regs.R3 = regs.R14;
		/* 821820B8h case   40:*/		return 0x821820BC;
		  /* 821820BCh */ case   41:  		/* bl -17860 */
		/* 821820BCh case   41:*/		regs.LR = 0x821820C0; return 0x8217DAF8;
		/* 821820BCh case   41:*/		return 0x821820C0;
		  /* 821820C0h */ case   42:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821820C0h case   42:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821820C0h case   42:*/		return 0x821820C4;
		  /* 821820C4h */ case   43:  		/* bc 12, CR0_EQ, 5300 */
		/* 821820C4h case   43:*/		if ( regs.CR[0].eq ) { return 0x82183578;  }
		/* 821820C4h case   43:*/		return 0x821820C8;
		  /* 821820C8h */ case   44:  		/* addi R7, R1, 104 */
		/* 821820C8h case   44:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 821820C8h case   44:*/		return 0x821820CC;
		  /* 821820CCh */ case   45:  		/* li R6, 0 */
		/* 821820CCh case   45:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821820CCh case   45:*/		return 0x821820D0;
		  /* 821820D0h */ case   46:  		/* mr R5, R29 */
		/* 821820D0h case   46:*/		regs.R5 = regs.R29;
		/* 821820D0h case   46:*/		return 0x821820D4;
		  /* 821820D4h */ case   47:  		/* mr R4, R31 */
		/* 821820D4h case   47:*/		regs.R4 = regs.R31;
		/* 821820D4h case   47:*/		return 0x821820D8;
		  /* 821820D8h */ case   48:  		/* mr R3, R14 */
		/* 821820D8h case   48:*/		regs.R3 = regs.R14;
		/* 821820D8h case   48:*/		return 0x821820DC;
		  /* 821820DCh */ case   49:  		/* bl -17892 */
		/* 821820DCh case   49:*/		regs.LR = 0x821820E0; return 0x8217DAF8;
		/* 821820DCh case   49:*/		return 0x821820E0;
		  /* 821820E0h */ case   50:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821820E0h case   50:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821820E0h case   50:*/		return 0x821820E4;
		  /* 821820E4h */ case   51:  		/* bc 12, CR0_EQ, 5268 */
		/* 821820E4h case   51:*/		if ( regs.CR[0].eq ) { return 0x82183578;  }
		/* 821820E4h case   51:*/		return 0x821820E8;
	}
	return 0x821820E8;
} // Block from 82182018h-821820E8h (52 instructions)

//////////////////////////////////////////////////////
// Block at 821820E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821820E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821820E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821820E8);
		  /* 821820E8h */ case    0:  		/* mr R10, R24 */
		/* 821820E8h case    0:*/		regs.R10 = regs.R24;
		/* 821820E8h case    0:*/		return 0x821820EC;
		  /* 821820ECh */ case    1:  		/* stw R24, <#[R1 + 168]> */
		/* 821820ECh case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000A8) );
		/* 821820ECh case    1:*/		return 0x821820F0;
		  /* 821820F0h */ case    2:  		/* mr R9, R24 */
		/* 821820F0h case    2:*/		regs.R9 = regs.R24;
		/* 821820F0h case    2:*/		return 0x821820F4;
		  /* 821820F4h */ case    3:  		/* stw R24, <#[R1 + 164]> */
		/* 821820F4h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000A4) );
		/* 821820F4h case    3:*/		return 0x821820F8;
		  /* 821820F8h */ case    4:  		/* cmpwi CR6, R28, 4 */
		/* 821820F8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 821820F8h case    4:*/		return 0x821820FC;
		  /* 821820FCh */ case    5:  		/* bc 4, CR6_EQ, 56 */
		/* 821820FCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82182134;  }
		/* 821820FCh case    5:*/		return 0x82182100;
		  /* 82182100h */ case    6:  		/* lwz R11, <#[R31 + 28]> */
		/* 82182100h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82182100h case    6:*/		return 0x82182104;
		  /* 82182104h */ case    7:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 82182104h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 82182104h case    7:*/		return 0x82182108;
		  /* 82182108h */ case    8:  		/* bc 4, CR0_EQ, 44 */
		/* 82182108h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82182134;  }
		/* 82182108h case    8:*/		return 0x8218210C;
		  /* 8218210Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8218210Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218210Ch case    9:*/		return 0x82182110;
		  /* 82182110h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 82182110h case   10:*/		if ( regs.CR[0].eq ) { return 0x82182134;  }
		/* 82182110h case   10:*/		return 0x82182114;
		  /* 82182114h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182114h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182114h case   11:*/		return 0x82182118;
		  /* 82182118h */ case   12:  		/* addi R10, R10, 1 */
		/* 82182118h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82182118h case   12:*/		return 0x8218211C;
		  /* 8218211Ch */ case   13:  		/* stw R10, <#[R1 + 168]> */
		/* 8218211Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 8218211Ch case   13:*/		return 0x82182120;
		  /* 82182120h */ case   14:  		/* lwz R11, <#[R11 + 40]> */
		/* 82182120h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82182120h case   14:*/		return 0x82182124;
		  /* 82182124h */ case   15:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 82182124h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 82182124h case   15:*/		return 0x82182128;
		  /* 82182128h */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 82182128h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82182134;  }
		/* 82182128h case   16:*/		return 0x8218212C;
		  /* 8218212Ch */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 8218212Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218212Ch case   17:*/		return 0x82182130;
		  /* 82182130h */ case   18:  		/* bc 4, CR6_EQ, -28 */
		/* 82182130h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82182114;  }
		/* 82182130h case   18:*/		return 0x82182134;
	}
	return 0x82182134;
} // Block from 821820E8h-82182134h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82182134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182134);
		  /* 82182134h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 82182134h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82182134h case    0:*/		return 0x82182138;
		  /* 82182138h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182138h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182138h case    1:*/		return 0x8218213C;
		  /* 8218213Ch */ case    2:  		/* bc 4, CR0_EQ, 44 */
		/* 8218213Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82182168;  }
		/* 8218213Ch case    2:*/		return 0x82182140;
		  /* 82182140h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 82182140h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82182140h case    3:*/		return 0x82182144;
		  /* 82182144h */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 82182144h case    4:*/		if ( regs.CR[0].eq ) { return 0x82182168;  }
		/* 82182144h case    4:*/		return 0x82182148;
		  /* 82182148h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182148h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182148h case    5:*/		return 0x8218214C;
		  /* 8218214Ch */ case    6:  		/* addi R9, R9, 1 */
		/* 8218214Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8218214Ch case    6:*/		return 0x82182150;
		  /* 82182150h */ case    7:  		/* stw R9, <#[R1 + 164]> */
		/* 82182150h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000A4) );
		/* 82182150h case    7:*/		return 0x82182154;
		  /* 82182154h */ case    8:  		/* lwz R11, <#[R11 + 40]> */
		/* 82182154h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82182154h case    8:*/		return 0x82182158;
		  /* 82182158h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182158h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182158h case    9:*/		return 0x8218215C;
		  /* 8218215Ch */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 8218215Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x82182168;  }
		/* 8218215Ch case   10:*/		return 0x82182160;
		  /* 82182160h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82182160h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182160h case   11:*/		return 0x82182164;
		  /* 82182164h */ case   12:  		/* bc 4, CR6_EQ, -28 */
		/* 82182164h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82182148;  }
		/* 82182164h case   12:*/		return 0x82182168;
	}
	return 0x82182168;
} // Block from 82182134h-82182168h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82182168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182168);
		  /* 82182168h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 82182168h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82182168h case    0:*/		return 0x8218216C;
		  /* 8218216Ch */ case    1:  		/* addi R31, R30, 16 */
		/* 8218216Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x10);
		/* 8218216Ch case    1:*/		return 0x82182170;
		  /* 82182170h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182170h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182170h case    2:*/		return 0x82182174;
		  /* 82182174h */ case    3:  		/* bc 4, CR0_EQ, 48 */
		/* 82182174h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821821A4;  }
		/* 82182174h case    3:*/		return 0x82182178;
		  /* 82182178h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82182178h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82182178h case    4:*/		return 0x8218217C;
		  /* 8218217Ch */ case    5:  		/* bc 12, CR0_EQ, 40 */
		/* 8218217Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821821A4;  }
		/* 8218217Ch case    5:*/		return 0x82182180;
		  /* 82182180h */ case    6:  		/* lwz R10, <#[R11 + 8]> */
		/* 82182180h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182180h case    6:*/		return 0x82182184;
		  /* 82182184h */ case    7:  		/* rlwinm R9, R11, 0, 0, 30 */
		/* 82182184h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R11);
		/* 82182184h case    7:*/		return 0x82182188;
		  /* 82182188h */ case    8:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 82182188h case    8:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 82182188h case    8:*/		return 0x8218218C;
		  /* 8218218Ch */ case    9:  		/* stw R10, <#[R11 + 8]> */
		/* 8218218Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8218218Ch case    9:*/		return 0x82182190;
		  /* 82182190h */ case   10:  		/* lwz R11, <#[R9 + 40]> */
		/* 82182190h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000028) );
		/* 82182190h case   10:*/		return 0x82182194;
		  /* 82182194h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182194h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182194h case   11:*/		return 0x82182198;
		  /* 82182198h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 82182198h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821821A4;  }
		/* 82182198h case   12:*/		return 0x8218219C;
		  /* 8218219Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8218219Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218219Ch case   13:*/		return 0x821821A0;
		  /* 821821A0h */ case   14:  		/* bc 4, CR6_EQ, -32 */
		/* 821821A0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82182180;  }
		/* 821821A0h case   14:*/		return 0x821821A4;
	}
	return 0x821821A4;
} // Block from 82182168h-821821A4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821821A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821821A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821821A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821821A4);
		  /* 821821A4h */ case    0:  		/* li R5, 8 */
		/* 821821A4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821821A4h case    0:*/		return 0x821821A8;
		  /* 821821A8h */ case    1:  		/* li R4, 8 */
		/* 821821A8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821821A8h case    1:*/		return 0x821821AC;
		  /* 821821ACh */ case    2:  		/* mr R3, R14 */
		/* 821821ACh case    2:*/		regs.R3 = regs.R14;
		/* 821821ACh case    2:*/		return 0x821821B0;
		  /* 821821B0h */ case    3:  		/* bl -121024 */
		/* 821821B0h case    3:*/		regs.LR = 0x821821B4; return 0x821648F0;
		/* 821821B0h case    3:*/		return 0x821821B4;
		  /* 821821B4h */ case    4:  		/* addi R11, R3, 4 */
		/* 821821B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821821B4h case    4:*/		return 0x821821B8;
		  /* 821821B8h */ case    5:  		/* ori R10, R3, 1 */
		/* 821821B8h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821821B8h case    5:*/		return 0x821821BC;
		  /* 821821BCh */ case    6:  		/* stw R24, <#[R1 + 136]> */
		/* 821821BCh case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000088) );
		/* 821821BCh case    6:*/		return 0x821821C0;
		  /* 821821C0h */ case    7:  		/* ori R11, R11, 1 */
		/* 821821C0h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821821C0h case    7:*/		return 0x821821C4;
		  /* 821821C4h */ case    8:  		/* stw R3, <#[R1 + 132]> */
		/* 821821C4h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 821821C4h case    8:*/		return 0x821821C8;
		  /* 821821C8h */ case    9:  		/* stw R10, <#[R3 + 4]> */
		/* 821821C8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821821C8h case    9:*/		return 0x821821CC;
		  /* 821821CCh */ case   10:  		/* stw R11, <#[R3]> */
		/* 821821CCh case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821821CCh case   10:*/		return 0x821821D0;
		  /* 821821D0h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 821821D0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821821D0h case   11:*/		return 0x821821D4;
		  /* 821821D4h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821821D4h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821821D4h case   12:*/		return 0x821821D8;
		  /* 821821D8h */ case   13:  		/* bc 4, CR0_EQ, 3376 */
		/* 821821D8h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82182F08;  }
		/* 821821D8h case   13:*/		return 0x821821DC;
		  /* 821821DCh */ case   14:  		/* stw R11, <#[R1 + 128]> */
		/* 821821DCh case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821821DCh case   14:*/		return 0x821821E0;
		  /* 821821E0h */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 821821E0h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821821E0h case   15:*/		return 0x821821E4;
		  /* 821821E4h */ case   16:  		/* bc 12, CR0_EQ, 3364 */
		/* 821821E4h case   16:*/		if ( regs.CR[0].eq ) { return 0x82182F08;  }
		/* 821821E4h case   16:*/		return 0x821821E8;
		  /* 821821E8h */ case   17:  		/* lwz R11, <#[R1 + 128]> */
		/* 821821E8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821821E8h case   17:*/		return 0x821821EC;
		  /* 821821ECh */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 821821ECh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821821ECh case   18:*/		return 0x821821F0;
		  /* 821821F0h */ case   19:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821821F0h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821821F0h case   19:*/		return 0x821821F4;
		  /* 821821F4h */ case   20:  		/* cmplwi CR6, R10, 14336 */
		/* 821821F4h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 821821F4h case   20:*/		return 0x821821F8;
		  /* 821821F8h */ case   21:  		/* bc 4, CR6_EQ, 3312 */
		/* 821821F8h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82182EE8;  }
		/* 821821F8h case   21:*/		return 0x821821FC;
		  /* 821821FCh */ case   22:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821821FCh case   22:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821821FCh case   22:*/		return 0x82182200;
		  /* 82182200h */ case   23:  		/* bc 4, CR0_EQ, 3304 */
		/* 82182200h case   23:*/		if ( !regs.CR[0].eq ) { return 0x82182EE8;  }
		/* 82182200h case   23:*/		return 0x82182204;
		  /* 82182204h */ case   24:  		/* li R7, 0 */
		/* 82182204h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82182204h case   24:*/		return 0x82182208;
		  /* 82182208h */ case   25:  		/* lwz R5, <#[R1 + 156]> */
		/* 82182208h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000009C) );
		/* 82182208h case   25:*/		return 0x8218220C;
		  /* 8218220Ch */ case   26:  		/* li R6, 0 */
		/* 8218220Ch case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218220Ch case   26:*/		return 0x82182210;
		  /* 82182210h */ case   27:  		/* lwz R4, <#[R1 + 128]> */
		/* 82182210h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 82182210h case   27:*/		return 0x82182214;
		  /* 82182214h */ case   28:  		/* mr R3, R14 */
		/* 82182214h case   28:*/		regs.R3 = regs.R14;
		/* 82182214h case   28:*/		return 0x82182218;
		  /* 82182218h */ case   29:  		/* bl 418536 */
		/* 82182218h case   29:*/		regs.LR = 0x8218221C; return 0x821E8500;
		/* 82182218h case   29:*/		return 0x8218221C;
		  /* 8218221Ch */ case   30:  		/* or. R31, R3, R3 */
		/* 8218221Ch case   30:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8218221Ch case   30:*/		return 0x82182220;
		  /* 82182220h */ case   31:  		/* bc 12, CR0_EQ, 3272 */
		/* 82182220h case   31:*/		if ( regs.CR[0].eq ) { return 0x82182EE8;  }
		/* 82182220h case   31:*/		return 0x82182224;
		  /* 82182224h */ case   32:  		/* li R7, 0 */
		/* 82182224h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82182224h case   32:*/		return 0x82182228;
		  /* 82182228h */ case   33:  		/* lwz R5, <#[R1 + 100]> */
		/* 82182228h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 82182228h case   33:*/		return 0x8218222C;
		  /* 8218222Ch */ case   34:  		/* li R6, 0 */
		/* 8218222Ch case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218222Ch case   34:*/		return 0x82182230;
		  /* 82182230h */ case   35:  		/* lwz R4, <#[R1 + 128]> */
		/* 82182230h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 82182230h case   35:*/		return 0x82182234;
		  /* 82182234h */ case   36:  		/* mr R3, R14 */
		/* 82182234h case   36:*/		regs.R3 = regs.R14;
		/* 82182234h case   36:*/		return 0x82182238;
		  /* 82182238h */ case   37:  		/* bl 418504 */
		/* 82182238h case   37:*/		regs.LR = 0x8218223C; return 0x821E8500;
		/* 82182238h case   37:*/		return 0x8218223C;
		  /* 8218223Ch */ case   38:  		/* cmplwi CR0, R3, 0 */
		/* 8218223Ch case   38:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8218223Ch case   38:*/		return 0x82182240;
		  /* 82182240h */ case   39:  		/* bc 12, CR0_EQ, 3240 */
		/* 82182240h case   39:*/		if ( regs.CR[0].eq ) { return 0x82182EE8;  }
		/* 82182240h case   39:*/		return 0x82182244;
		  /* 82182244h */ case   40:  		/* lwz R11, <#[R31 + 12]> */
		/* 82182244h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82182244h case   40:*/		return 0x82182248;
		  /* 82182248h */ case   41:  		/* lwz R8, <#[R3 + 12]> */
		/* 82182248h case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000000C) );
		/* 82182248h case   41:*/		return 0x8218224C;
		  /* 8218224Ch */ case   42:  		/* lwz R16, <#[R1 + 156]> */
		/* 8218224Ch case   42:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x0000009C) );
		/* 8218224Ch case   42:*/		return 0x82182250;
		  /* 82182250h */ case   43:  		/* lwz R9, <#[R1 + 100]> */
		/* 82182250h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 82182250h case   43:*/		return 0x82182254;
		  /* 82182254h */ case   44:  		/* lwz R10, <#[R11 + 28]> */
		/* 82182254h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82182254h case   44:*/		return 0x82182258;
		  /* 82182258h */ case   45:  		/* lwz R7, <#[R8 + 28]> */
		/* 82182258h case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x0000001C) );
		/* 82182258h case   45:*/		return 0x8218225C;
		  /* 8218225Ch */ case   46:  		/* subf R10, R10, R16 */
		/* 8218225Ch case   46:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R16);
		/* 8218225Ch case   46:*/		return 0x82182260;
		  /* 82182260h */ case   47:  		/* subf R7, R7, R9 */
		/* 82182260h case   47:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 82182260h case   47:*/		return 0x82182264;
		  /* 82182264h */ case   48:  		/* addic R10, R10, -1 */
		/* 82182264h case   48:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82182264h case   48:*/		return 0x82182268;
		  /* 82182268h */ case   49:  		/* subfe R10, R10, R10 */
		/* 82182268h case   49:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82182268h case   49:*/		return 0x8218226C;
		  /* 8218226Ch */ case   50:  		/* addic R7, R7, -1 */
		/* 8218226Ch case   50:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 8218226Ch case   50:*/		return 0x82182270;
		  /* 82182270h */ case   51:  		/* and R10, R10, R11 */
		/* 82182270h case   51:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82182270h case   51:*/		return 0x82182274;
		  /* 82182274h */ case   52:  		/* subfe R11, R7, R7 */
		/* 82182274h case   52:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R7,regs.R7);
		/* 82182274h case   52:*/		return 0x82182278;
		  /* 82182278h */ case   53:  		/* cmplwi CR6, R10, 0 */
		/* 82182278h case   53:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82182278h case   53:*/		return 0x8218227C;
		  /* 8218227Ch */ case   54:  		/* and R11, R11, R8 */
		/* 8218227Ch case   54:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8218227Ch case   54:*/		return 0x82182280;
		  /* 82182280h */ case   55:  		/* bc 4, CR6_EQ, 20 */
		/* 82182280h case   55:*/		if ( !regs.CR[6].eq ) { return 0x82182294;  }
		/* 82182280h case   55:*/		return 0x82182284;
		  /* 82182284h */ case   56:  		/* cmplwi CR6, R11, 0 */
		/* 82182284h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182284h case   56:*/		return 0x82182288;
		  /* 82182288h */ case   57:  		/* bc 12, CR6_EQ, 3168 */
		/* 82182288h case   57:*/		if ( regs.CR[6].eq ) { return 0x82182EE8;  }
		/* 82182288h case   57:*/		return 0x8218228C;
		  /* 8218228Ch */ case   58:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8218228Ch case   58:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8218228Ch case   58:*/		return 0x82182290;
		  /* 82182290h */ case   59:  		/* rlwinm R16, R16, 0, 0, 31 */
		/* 82182290h case   59:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R16,regs.R16);
		/* 82182290h case   59:*/		return 0x82182294;
	}
	return 0x82182294;
} // Block from 821821A4h-82182294h (60 instructions)

//////////////////////////////////////////////////////
// Block at 82182294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182294);
		  /* 82182294h */ case    0:  		/* li R22, 0 */
		/* 82182294h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82182294h case    0:*/		return 0x82182298;
		  /* 82182298h */ case    1:  		/* stw R11, <#[R1 + 152]> */
		/* 82182298h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82182298h case    1:*/		return 0x8218229C;
		  /* 8218229Ch */ case    2:  		/* mr R8, R11 */
		/* 8218229Ch case    2:*/		regs.R8 = regs.R11;
		/* 8218229Ch case    2:*/		return 0x821822A0;
		  /* 821822A0h */ case    3:  		/* mr R18, R9 */
		/* 821822A0h case    3:*/		regs.R18 = regs.R9;
		/* 821822A0h case    3:*/		return 0x821822A4;
		  /* 821822A4h */ case    4:  		/* stb R22, <#[R1 + 97]> */
		/* 821822A4h case    4:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R1 + 0x00000061) );
		/* 821822A4h case    4:*/		return 0x821822A8;
		  /* 821822A8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821822A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821822A8h case    5:*/		return 0x821822AC;
		  /* 821822ACh */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821822ACh case    6:*/		if ( regs.CR[6].eq ) { return 0x821822D0;  }
		/* 821822ACh case    6:*/		return 0x821822B0;
		  /* 821822B0h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821822B0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821822B0h case    7:*/		return 0x821822B4;
		  /* 821822B4h */ case    8:  		/* bc 12, CR6_EQ, 52 */
		/* 821822B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821822E8;  }
		/* 821822B4h case    8:*/		return 0x821822B8;
		  /* 821822B8h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 821822B8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821822B8h case    9:*/		return 0x821822BC;
		  /* 821822BCh */ case   10:  		/* lwz R7, <#[R10 + 8]> */
		/* 821822BCh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821822BCh case   10:*/		return 0x821822C0;
		  /* 821822C0h */ case   11:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821822C0h case   11:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821822C0h case   11:*/		return 0x821822C4;
		  /* 821822C4h */ case   12:  		/* rlwinm R7, R7, 0, 15, 17 */
		/* 821822C4h case   12:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R7,regs.R7);
		/* 821822C4h case   12:*/		return 0x821822C8;
		  /* 821822C8h */ case   13:  		/* cmplw CR6, R7, R11 */
		/* 821822C8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 821822C8h case   13:*/		return 0x821822CC;
		  /* 821822CCh */ case   14:  		/* bc 4, CR6_GT, 28 */
		/* 821822CCh case   14:*/		if ( !regs.CR[6].gt ) { return 0x821822E8;  }
		/* 821822CCh case   14:*/		return 0x821822D0;
	}
	return 0x821822D0;
} // Block from 82182294h-821822D0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821822D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821822D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821822D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821822D0);
		  /* 821822D0h */ case    0:  		/* li R11, 1 */
		/* 821822D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821822D0h case    0:*/		return 0x821822D4;
		  /* 821822D4h */ case    1:  		/* stw R10, <#[R1 + 152]> */
		/* 821822D4h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 821822D4h case    1:*/		return 0x821822D8;
		  /* 821822D8h */ case    2:  		/* mr R18, R16 */
		/* 821822D8h case    2:*/		regs.R18 = regs.R16;
		/* 821822D8h case    2:*/		return 0x821822DC;
		  /* 821822DCh */ case    3:  		/* mr R8, R10 */
		/* 821822DCh case    3:*/		regs.R8 = regs.R10;
		/* 821822DCh case    3:*/		return 0x821822E0;
		  /* 821822E0h */ case    4:  		/* stb R11, <#[R1 + 97]> */
		/* 821822E0h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000061) );
		/* 821822E0h case    4:*/		return 0x821822E4;
		  /* 821822E4h */ case    5:  		/* mr R16, R9 */
		/* 821822E4h case    5:*/		regs.R16 = regs.R9;
		/* 821822E4h case    5:*/		return 0x821822E8;
	}
	return 0x821822E8;
} // Block from 821822D0h-821822E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821822E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821822E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821822E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821822E8);
		  /* 821822E8h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 821822E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821822E8h case    0:*/		return 0x821822EC;
		  /* 821822ECh */ case    1:  		/* mr R15, R22 */
		/* 821822ECh case    1:*/		regs.R15 = regs.R22;
		/* 821822ECh case    1:*/		return 0x821822F0;
		  /* 821822F0h */ case    2:  		/* stw R22, <#[R1 + 148]> */
		/* 821822F0h case    2:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000094) );
		/* 821822F0h case    2:*/		return 0x821822F4;
		  /* 821822F4h */ case    3:  		/* stb R22, <#[R1 + 96]> */
		/* 821822F4h case    3:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R1 + 0x00000060) );
		/* 821822F4h case    3:*/		return 0x821822F8;
		  /* 821822F8h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 821822F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821822F8h case    4:*/		return 0x821822FC;
		  /* 821822FCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821822FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821822FCh case    5:*/		return 0x82182300;
		  /* 82182300h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 82182300h case    6:*/		if ( regs.CR[6].eq ) { return 0x8218233C;  }
		/* 82182300h case    6:*/		return 0x82182304;
		  /* 82182304h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 82182304h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82182304h case    7:*/		return 0x82182308;
		  /* 82182308h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82182308h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82182308h case    8:*/		return 0x8218230C;
		  /* 8218230Ch */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8218230Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8218232C;  }
		/* 8218230Ch case    9:*/		return 0x82182310;
		  /* 82182310h */ case   10:  		/* lwz R9, <#[R10 + 8]> */
		/* 82182310h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82182310h case   10:*/		return 0x82182314;
		  /* 82182314h */ case   11:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 82182314h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 82182314h case   11:*/		return 0x82182318;
		  /* 82182318h */ case   12:  		/* cmplwi CR6, R9, 14080 */
		/* 82182318h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 82182318h case   12:*/		return 0x8218231C;
		  /* 8218231Ch */ case   13:  		/* bc 4, CR6_EQ, 16 */
		/* 8218231Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8218232C;  }
		/* 8218231Ch case   13:*/		return 0x82182320;
		  /* 82182320h */ case   14:  		/* lwz R9, <#[R11]> */
		/* 82182320h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82182320h case   14:*/		return 0x82182324;
		  /* 82182324h */ case   15:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 82182324h case   15:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 82182324h case   15:*/		return 0x82182328;
		  /* 82182328h */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 82182328h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82182334;  }
		/* 82182328h case   16:*/		return 0x8218232C;
	}
	return 0x8218232C;
} // Block from 821822E8h-8218232Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8218232Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218232C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218232C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218232C);
		  /* 8218232Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8218232Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8218232Ch case    0:*/		return 0x82182330;
		  /* 82182330h */ case    1:  		/* b -52 */
		/* 82182330h case    1:*/		return 0x821822FC;
		/* 82182330h case    1:*/		return 0x82182334;
	}
	return 0x82182334;
} // Block from 8218232Ch-82182334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82182334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182334);
		  /* 82182334h */ case    0:  		/* mr R17, R10 */
		/* 82182334h case    0:*/		regs.R17 = regs.R10;
		/* 82182334h case    0:*/		return 0x82182338;
		  /* 82182338h */ case    1:  		/* b 8 */
		/* 82182338h case    1:*/		return 0x82182340;
		/* 82182338h case    1:*/		return 0x8218233C;
	}
	return 0x8218233C;
} // Block from 82182334h-8218233Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218233Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218233C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218233C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218233C);
		  /* 8218233Ch */ case    0:  		/* mr R17, R22 */
		/* 8218233Ch case    0:*/		regs.R17 = regs.R22;
		/* 8218233Ch case    0:*/		return 0x82182340;
	}
	return 0x82182340;
} // Block from 8218233Ch-82182340h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82182340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182340);
		  /* 82182340h */ case    0:  		/* lwz R11, <#[R1 + 104]> */
		/* 82182340h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82182340h case    0:*/		return 0x82182344;
		  /* 82182344h */ case    1:  		/* addi R20, R8, 4 */
		/* 82182344h case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R8,0x4);
		/* 82182344h case    1:*/		return 0x82182348;
		  /* 82182348h */ case    2:  		/* lwz R10, <#[R1 + 116]> */
		/* 82182348h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 82182348h case    2:*/		return 0x8218234C;
		  /* 8218234Ch */ case    3:  		/* mr R21, R22 */
		/* 8218234Ch case    3:*/		regs.R21 = regs.R22;
		/* 8218234Ch case    3:*/		return 0x82182350;
		  /* 82182350h */ case    4:  		/* lwz R29, <#[R1 + 120]> */
		/* 82182350h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000078) );
		/* 82182350h case    4:*/		return 0x82182354;
		  /* 82182354h */ case    5:  		/* stw R11, <#[R1 + 232]> */
		/* 82182354h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 82182354h case    5:*/		return 0x82182358;
		  /* 82182358h */ case    6:  		/* stw R10, <#[R1 + 228]> */
		/* 82182358h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000E4) );
		/* 82182358h case    6:*/		return 0x8218235C;
		  /* 8218235Ch */ case    7:  		/* lwz R19, <#[R20]> */
		/* 8218235Ch case    7:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R20 + 0x00000000) );
		/* 8218235Ch case    7:*/		return 0x82182360;
		  /* 82182360h */ case    8:  		/* cmplwi CR6, R19, 0 */
		/* 82182360h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82182360h case    8:*/		return 0x82182364;
		  /* 82182364h */ case    9:  		/* bc 12, CR6_EQ, 1004 */
		/* 82182364h case    9:*/		if ( regs.CR[6].eq ) { return 0x82182750;  }
		/* 82182364h case    9:*/		return 0x82182368;
		  /* 82182368h */ case   10:  		/* lwz R24, <#[R19 + 16]> */
		/* 82182368h case   10:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R19 + 0x00000010) );
		/* 82182368h case   10:*/		return 0x8218236C;
		  /* 8218236Ch */ case   11:  		/* cmplwi CR6, R24, 0 */
		/* 8218236Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8218236Ch case   11:*/		return 0x82182370;
		  /* 82182370h */ case   12:  		/* bc 12, CR6_EQ, 972 */
		/* 82182370h case   12:*/		if ( regs.CR[6].eq ) { return 0x8218273C;  }
		/* 82182370h case   12:*/		return 0x82182374;
		  /* 82182374h */ case   13:  		/* lwz R11, <#[R24 + 28]> */
		/* 82182374h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 82182374h case   13:*/		return 0x82182378;
		  /* 82182378h */ case   14:  		/* cmplw CR6, R11, R29 */
		/* 82182378h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82182378h case   14:*/		return 0x8218237C;
		  /* 8218237Ch */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 8218237Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8218238C;  }
		/* 8218237Ch case   15:*/		return 0x82182380;
		  /* 82182380h */ case   16:  		/* li R11, 1 */
		/* 82182380h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82182380h case   16:*/		return 0x82182384;
		  /* 82182384h */ case   17:  		/* stb R11, <#[R1 + 96]> */
		/* 82182384h case   17:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82182384h case   17:*/		return 0x82182388;
		  /* 82182388h */ case   18:  		/* b 948 */
		/* 82182388h case   18:*/		return 0x8218273C;
		/* 82182388h case   18:*/		return 0x8218238C;
	}
	return 0x8218238C;
} // Block from 82182340h-8218238Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8218238Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218238C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218238C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218238C);
		  /* 8218238Ch */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 8218238Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8218238Ch case    0:*/		return 0x82182390;
		  /* 82182390h */ case    1:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 82182390h case    1:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 82182390h case    1:*/		return 0x82182394;
		  /* 82182394h */ case    2:  		/* bc 4, CR0_EQ, 936 */
		/* 82182394h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8218273C;  }
		/* 82182394h case    2:*/		return 0x82182398;
		  /* 82182398h */ case    3:  		/* lwz R11, <#[R24]> */
		/* 82182398h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82182398h case    3:*/		return 0x8218239C;
		  /* 8218239Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8218239Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218239Ch case    4:*/		return 0x821823A0;
		  /* 821823A0h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821823A0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821823B4;  }
		/* 821823A0h case    5:*/		return 0x821823A4;
		  /* 821823A4h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821823A4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821823A4h case    6:*/		return 0x821823A8;
		  /* 821823A8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821823A8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821823A8h case    7:*/		return 0x821823AC;
		  /* 821823ACh */ case    8:  		/* li R11, 1 */
		/* 821823ACh case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821823ACh case    8:*/		return 0x821823B0;
		  /* 821823B0h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821823B0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821823B8;  }
		/* 821823B0h case    9:*/		return 0x821823B4;
	}
	return 0x821823B4;
} // Block from 8218238Ch-821823B4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821823B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821823B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821823B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821823B4);
		  /* 821823B4h */ case    0:  		/* li R11, 0 */
		/* 821823B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821823B4h case    0:*/		return 0x821823B8;
	}
	return 0x821823B8;
} // Block from 821823B4h-821823B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821823B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821823B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821823B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821823B8);
		  /* 821823B8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821823B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821823B8h case    0:*/		return 0x821823BC;
		  /* 821823BCh */ case    1:  		/* bc 12, CR0_EQ, 896 */
		/* 821823BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8218273C;  }
		/* 821823BCh case    1:*/		return 0x821823C0;
		  /* 821823C0h */ case    2:  		/* li R30, 0 */
		/* 821823C0h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821823C0h case    2:*/		return 0x821823C4;
		  /* 821823C4h */ case    3:  		/* cmplwi CR6, R15, 0 */
		/* 821823C4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821823C4h case    3:*/		return 0x821823C8;
		  /* 821823C8h */ case    4:  		/* bc 12, CR6_EQ, 68 */
		/* 821823C8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8218240C;  }
		/* 821823C8h case    4:*/		return 0x821823CC;
		  /* 821823CCh */ case    5:  		/* addi R31, R1, 240 */
		/* 821823CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xF0);
		/* 821823CCh case    5:*/		return 0x821823D0;
		  /* 821823D0h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 821823D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821823D0h case    6:*/		return 0x821823D4;
		  /* 821823D4h */ case    7:  		/* mr R3, R14 */
		/* 821823D4h case    7:*/		regs.R3 = regs.R14;
		/* 821823D4h case    7:*/		return 0x821823D8;
		  /* 821823D8h */ case    8:  		/* lhz R4, <#[R24 + 18]> */
		/* 821823D8h case    8:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000012) );
		/* 821823D8h case    8:*/		return 0x821823DC;
		  /* 821823DCh */ case    9:  		/* lhz R28, <#[R11 + 18]> */
		/* 821823DCh case    9:*/		cpu::mem::load16z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000012) );
		/* 821823DCh case    9:*/		return 0x821823E0;
		  /* 821823E0h */ case   10:  		/* bl 5504 */
		/* 821823E0h case   10:*/		regs.LR = 0x821823E4; return 0x82183960;
		/* 821823E0h case   10:*/		return 0x821823E4;
		  /* 821823E4h */ case   11:  		/* mr R27, R3 */
		/* 821823E4h case   11:*/		regs.R27 = regs.R3;
		/* 821823E4h case   11:*/		return 0x821823E8;
		  /* 821823E8h */ case   12:  		/* mr R4, R28 */
		/* 821823E8h case   12:*/		regs.R4 = regs.R28;
		/* 821823E8h case   12:*/		return 0x821823EC;
		  /* 821823ECh */ case   13:  		/* mr R3, R14 */
		/* 821823ECh case   13:*/		regs.R3 = regs.R14;
		/* 821823ECh case   13:*/		return 0x821823F0;
		  /* 821823F0h */ case   14:  		/* bl 5488 */
		/* 821823F0h case   14:*/		regs.LR = 0x821823F4; return 0x82183960;
		/* 821823F0h case   14:*/		return 0x821823F4;
		  /* 821823F4h */ case   15:  		/* cmplw CR6, R3, R27 */
		/* 821823F4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 821823F4h case   15:*/		return 0x821823F8;
		  /* 821823F8h */ case   16:  		/* bc 12, CR6_EQ, -1384 */
		/* 821823F8h case   16:*/		if ( regs.CR[6].eq ) { return 0x82181E90;  }
		/* 821823F8h case   16:*/		return 0x821823FC;
		  /* 821823FCh */ case   17:  		/* addi R30, R30, 1 */
		/* 821823FCh case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821823FCh case   17:*/		return 0x82182400;
		  /* 82182400h */ case   18:  		/* addi R31, R31, 4 */
		/* 82182400h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82182400h case   18:*/		return 0x82182404;
		  /* 82182404h */ case   19:  		/* cmplw CR6, R30, R15 */
		/* 82182404h case   19:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R15);
		/* 82182404h case   19:*/		return 0x82182408;
		  /* 82182408h */ case   20:  		/* bc 12, CR6_LT, -56 */
		/* 82182408h case   20:*/		if ( regs.CR[6].lt ) { return 0x821823D0;  }
		/* 82182408h case   20:*/		return 0x8218240C;
	}
	return 0x8218240C;
} // Block from 821823B8h-8218240Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8218240Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218240C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218240C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218240C);
		  /* 8218240Ch */ case    0:  		/* li R7, 0 */
		/* 8218240Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8218240Ch case    0:*/		return 0x82182410;
		  /* 82182410h */ case    1:  		/* li R6, 0 */
		/* 82182410h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82182410h case    1:*/		return 0x82182414;
		  /* 82182414h */ case    2:  		/* mr R5, R18 */
		/* 82182414h case    2:*/		regs.R5 = regs.R18;
		/* 82182414h case    2:*/		return 0x82182418;
		  /* 82182418h */ case    3:  		/* mr R4, R24 */
		/* 82182418h case    3:*/		regs.R4 = regs.R24;
		/* 82182418h case    3:*/		return 0x8218241C;
		  /* 8218241Ch */ case    4:  		/* mr R3, R14 */
		/* 8218241Ch case    4:*/		regs.R3 = regs.R14;
		/* 8218241Ch case    4:*/		return 0x82182420;
		  /* 82182420h */ case    5:  		/* bl 418016 */
		/* 82182420h case    5:*/		regs.LR = 0x82182424; return 0x821E8500;
		/* 82182420h case    5:*/		return 0x82182424;
		  /* 82182424h */ case    6:  		/* mr R23, R3 */
		/* 82182424h case    6:*/		regs.R23 = regs.R3;
		/* 82182424h case    6:*/		return 0x82182428;
		  /* 82182428h */ case    7:  		/* li R7, 0 */
		/* 82182428h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82182428h case    7:*/		return 0x8218242C;
		  /* 8218242Ch */ case    8:  		/* li R6, 0 */
		/* 8218242Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218242Ch case    8:*/		return 0x82182430;
		  /* 82182430h */ case    9:  		/* mr R5, R16 */
		/* 82182430h case    9:*/		regs.R5 = regs.R16;
		/* 82182430h case    9:*/		return 0x82182434;
		  /* 82182434h */ case   10:  		/* mr R4, R24 */
		/* 82182434h case   10:*/		regs.R4 = regs.R24;
		/* 82182434h case   10:*/		return 0x82182438;
		  /* 82182438h */ case   11:  		/* mr R3, R14 */
		/* 82182438h case   11:*/		regs.R3 = regs.R14;
		/* 82182438h case   11:*/		return 0x8218243C;
		  /* 8218243Ch */ case   12:  		/* bl 417988 */
		/* 8218243Ch case   12:*/		regs.LR = 0x82182440; return 0x821E8500;
		/* 8218243Ch case   12:*/		return 0x82182440;
		  /* 82182440h */ case   13:  		/* or. R31, R3, R3 */
		/* 82182440h case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82182440h case   13:*/		return 0x82182444;
		  /* 82182444h */ case   14:  		/* bc 12, CR0_EQ, 760 */
		/* 82182444h case   14:*/		if ( regs.CR[0].eq ) { return 0x8218273C;  }
		/* 82182444h case   14:*/		return 0x82182448;
		  /* 82182448h */ case   15:  		/* lwz R11, <#[R24 + 4]> */
		/* 82182448h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 82182448h case   15:*/		return 0x8218244C;
		  /* 8218244Ch */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8218244Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218244Ch case   16:*/		return 0x82182450;
		  /* 82182450h */ case   17:  		/* bc 12, CR6_EQ, 60 */
		/* 82182450h case   17:*/		if ( regs.CR[6].eq ) { return 0x8218248C;  }
		/* 82182450h case   17:*/		return 0x82182454;
		  /* 82182454h */ case   18:  		/* lwz R10, <#[R11 + 16]> */
		/* 82182454h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82182454h case   18:*/		return 0x82182458;
		  /* 82182458h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 82182458h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82182458h case   19:*/		return 0x8218245C;
		  /* 8218245Ch */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 8218245Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x8218247C;  }
		/* 8218245Ch case   20:*/		return 0x82182460;
		  /* 82182460h */ case   21:  		/* lwz R9, <#[R10 + 8]> */
		/* 82182460h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82182460h case   21:*/		return 0x82182464;
		  /* 82182464h */ case   22:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 82182464h case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 82182464h case   22:*/		return 0x82182468;
		  /* 82182468h */ case   23:  		/* cmplwi CR6, R9, 14080 */
		/* 82182468h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 82182468h case   23:*/		return 0x8218246C;
		  /* 8218246Ch */ case   24:  		/* bc 4, CR6_EQ, 16 */
		/* 8218246Ch case   24:*/		if ( !regs.CR[6].eq ) { return 0x8218247C;  }
		/* 8218246Ch case   24:*/		return 0x82182470;
		  /* 82182470h */ case   25:  		/* lwz R9, <#[R11]> */
		/* 82182470h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82182470h case   25:*/		return 0x82182474;
		  /* 82182474h */ case   26:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 82182474h case   26:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 82182474h case   26:*/		return 0x82182478;
		  /* 82182478h */ case   27:  		/* bc 4, CR0_EQ, 12 */
		/* 82182478h case   27:*/		if ( !regs.CR[0].eq ) { return 0x82182484;  }
		/* 82182478h case   27:*/		return 0x8218247C;
	}
	return 0x8218247C;
} // Block from 8218240Ch-8218247Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8218247Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218247C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218247C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218247C);
		  /* 8218247Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8218247Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8218247Ch case    0:*/		return 0x82182480;
		  /* 82182480h */ case    1:  		/* b -52 */
		/* 82182480h case    1:*/		return 0x8218244C;
		/* 82182480h case    1:*/		return 0x82182484;
	}
	return 0x82182484;
} // Block from 8218247Ch-82182484h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82182484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182484);
		  /* 82182484h */ case    0:  		/* mr R11, R10 */
		/* 82182484h case    0:*/		regs.R11 = regs.R10;
		/* 82182484h case    0:*/		return 0x82182488;
		  /* 82182488h */ case    1:  		/* b 8 */
		/* 82182488h case    1:*/		return 0x82182490;
		/* 82182488h case    1:*/		return 0x8218248C;
	}
	return 0x8218248C;
} // Block from 82182484h-8218248Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218248Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218248C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218248C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218248C);
		  /* 8218248Ch */ case    0:  		/* li R11, 0 */
		/* 8218248Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218248Ch case    0:*/		return 0x82182490;
	}
	return 0x82182490;
} // Block from 8218248Ch-82182490h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82182490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182490);
		  /* 82182490h */ case    0:  		/* cmplw CR6, R11, R17 */
		/* 82182490h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 82182490h case    0:*/		return 0x82182494;
		  /* 82182494h */ case    1:  		/* bc 4, CR6_EQ, 680 */
		/* 82182494h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218273C;  }
		/* 82182494h case    1:*/		return 0x82182498;
		  /* 82182498h */ case    2:  		/* cmplwi CR6, R22, 8 */
		/* 82182498h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000008);
		/* 82182498h case    2:*/		return 0x8218249C;
		  /* 8218249Ch */ case    3:  		/* bc 12, CR6_EQ, 2716 */
		/* 8218249Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82182F38;  }
		/* 8218249Ch case    3:*/		return 0x821824A0;
		  /* 821824A0h */ case    4:  		/* lwz R26, <#[R31 + 12]> */
		/* 821824A0h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 821824A0h case    4:*/		return 0x821824A4;
		  /* 821824A4h */ case    5:  		/* lwz R30, <#[R26 + 28]> */
		/* 821824A4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x0000001C) );
		/* 821824A4h case    5:*/		return 0x821824A8;
		  /* 821824A8h */ case    6:  		/* cmplw CR6, R30, R16 */
		/* 821824A8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R16);
		/* 821824A8h case    6:*/		return 0x821824AC;
		  /* 821824ACh */ case    7:  		/* bc 12, CR6_EQ, 580 */
		/* 821824ACh case    7:*/		if ( regs.CR[6].eq ) { return 0x821826F0;  }
		/* 821824ACh case    7:*/		return 0x821824B0;
		  /* 821824B0h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821824B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821824B0h case    8:*/		return 0x821824B4;
		  /* 821824B4h */ case    9:  		/* li R8, 1 */
		/* 821824B4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821824B4h case    9:*/		return 0x821824B8;
		  /* 821824B8h */ case   10:  		/* mr R5, R26 */
		/* 821824B8h case   10:*/		regs.R5 = regs.R26;
		/* 821824B8h case   10:*/		return 0x821824BC;
		  /* 821824BCh */ case   11:  		/* rlwinm R25, R11, 27, 30, 31 */
		/* 821824BCh case   11:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R25,regs.R11);
		/* 821824BCh case   11:*/		return 0x821824C0;
		  /* 821824C0h */ case   12:  		/* rlwinm R7, R11, 0, 31, 31 */
		/* 821824C0h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R11);
		/* 821824C0h case   12:*/		return 0x821824C4;
		  /* 821824C4h */ case   13:  		/* mr R6, R25 */
		/* 821824C4h case   13:*/		regs.R6 = regs.R25;
		/* 821824C4h case   13:*/		return 0x821824C8;
		  /* 821824C8h */ case   14:  		/* mr R4, R16 */
		/* 821824C8h case   14:*/		regs.R4 = regs.R16;
		/* 821824C8h case   14:*/		return 0x821824CC;
		  /* 821824CCh */ case   15:  		/* mr R3, R14 */
		/* 821824CCh case   15:*/		regs.R3 = regs.R14;
		/* 821824CCh case   15:*/		return 0x821824D0;
		  /* 821824D0h */ case   16:  		/* bl 213952 */
		/* 821824D0h case   16:*/		regs.LR = 0x821824D4; return 0x821B6890;
		/* 821824D0h case   16:*/		return 0x821824D4;
		  /* 821824D4h */ case   17:  		/* lwz R11, <#[R30 + 48]> */
		/* 821824D4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821824D4h case   17:*/		return 0x821824D8;
		  /* 821824D8h */ case   18:  		/* lwz R10, <#[R29 + 40]> */
		/* 821824D8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000028) );
		/* 821824D8h case   18:*/		return 0x821824DC;
		  /* 821824DCh */ case   19:  		/* li R9, 1 */
		/* 821824DCh case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821824DCh case   19:*/		return 0x821824E0;
		  /* 821824E0h */ case   20:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821824E0h case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821824E0h case   20:*/		return 0x821824E4;
		  /* 821824E4h */ case   21:  		/* mr R27, R3 */
		/* 821824E4h case   21:*/		regs.R27 = regs.R3;
		/* 821824E4h case   21:*/		return 0x821824E8;
		  /* 821824E8h */ case   22:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821824E8h case   22:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821824E8h case   22:*/		return 0x821824EC;
		  /* 821824ECh */ case   23:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821824ECh case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821824ECh case   23:*/		return 0x821824F0;
		  /* 821824F0h */ case   24:  		/* addi R11, R11, 1 */
		/* 821824F0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821824F0h case   24:*/		return 0x821824F4;
		  /* 821824F4h */ case   25:  		/* slw R9, R9, R8 */
		/* 821824F4h case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821824F4h case   25:*/		return 0x821824F8;
		  /* 821824F8h */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821824F8h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821824F8h case   26:*/		return 0x821824FC;
		  /* 821824FCh */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821824FCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821824FCh case   27:*/		return 0x82182500;
		  /* 82182500h */ case   28:  		/* and. R11, R11, R9 */
		/* 82182500h case   28:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82182500h case   28:*/		return 0x82182504;
		  /* 82182504h */ case   29:  		/* bc 12, CR0_EQ, 180 */
		/* 82182504h case   29:*/		if ( regs.CR[0].eq ) { return 0x821825B8;  }
		/* 82182504h case   29:*/		return 0x82182508;
		  /* 82182508h */ case   30:  		/* mr R4, R3 */
		/* 82182508h case   30:*/		regs.R4 = regs.R3;
		/* 82182508h case   30:*/		return 0x8218250C;
		  /* 8218250Ch */ case   31:  		/* li R5, 0 */
		/* 8218250Ch case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218250Ch case   31:*/		return 0x82182510;
		  /* 82182510h */ case   32:  		/* mr R3, R14 */
		/* 82182510h case   32:*/		regs.R3 = regs.R14;
		/* 82182510h case   32:*/		return 0x82182514;
		  /* 82182514h */ case   33:  		/* bl -41988 */
		/* 82182514h case   33:*/		regs.LR = 0x82182518; return 0x82178110;
		/* 82182514h case   33:*/		return 0x82182518;
		  /* 82182518h */ case   34:  		/* mr R4, R3 */
		/* 82182518h case   34:*/		regs.R4 = regs.R3;
		/* 82182518h case   34:*/		return 0x8218251C;
		  /* 8218251Ch */ case   35:  		/* mr R3, R24 */
		/* 8218251Ch case   35:*/		regs.R3 = regs.R24;
		/* 8218251Ch case   35:*/		return 0x82182520;
		  /* 82182520h */ case   36:  		/* bl -41816 */
		/* 82182520h case   36:*/		regs.LR = 0x82182524; return 0x821781C8;
		/* 82182520h case   36:*/		return 0x82182524;
		  /* 82182524h */ case   37:  		/* lwz R10, <#[R1 + 144]> */
		/* 82182524h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 82182524h case   37:*/		return 0x82182528;
		  /* 82182528h */ case   38:  		/* mr R31, R3 */
		/* 82182528h case   38:*/		regs.R31 = regs.R3;
		/* 82182528h case   38:*/		return 0x8218252C;
		  /* 8218252Ch */ case   39:  		/* cmplwi CR6, R10, 0 */
		/* 8218252Ch case   39:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8218252Ch case   39:*/		return 0x82182530;
		  /* 82182530h */ case   40:  		/* bc 4, CR6_EQ, 48 */
		/* 82182530h case   40:*/		if ( !regs.CR[6].eq ) { return 0x82182560;  }
		/* 82182530h case   40:*/		return 0x82182534;
		  /* 82182534h */ case   41:  		/* li R5, 27 */
		/* 82182534h case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x1B);
		/* 82182534h case   41:*/		return 0x82182538;
		  /* 82182538h */ case   42:  		/* li R4, 8 */
		/* 82182538h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82182538h case   42:*/		return 0x8218253C;
		  /* 8218253Ch */ case   43:  		/* mr R3, R14 */
		/* 8218253Ch case   43:*/		regs.R3 = regs.R14;
		/* 8218253Ch case   43:*/		return 0x82182540;
		  /* 82182540h */ case   44:  		/* bl -121936 */
		/* 82182540h case   44:*/		regs.LR = 0x82182544; return 0x821648F0;
		/* 82182540h case   44:*/		return 0x82182544;
		  /* 82182544h */ case   45:  		/* addi R11, R3, 4 */
		/* 82182544h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82182544h case   45:*/		return 0x82182548;
		  /* 82182548h */ case   46:  		/* ori R9, R3, 1 */
		/* 82182548h case   46:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R3,0x1);
		/* 82182548h case   46:*/		return 0x8218254C;
		  /* 8218254Ch */ case   47:  		/* stw R3, <#[R1 + 144]> */
		/* 8218254Ch case   47:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 8218254Ch case   47:*/		return 0x82182550;
		  /* 82182550h */ case   48:  		/* ori R11, R11, 1 */
		/* 82182550h case   48:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82182550h case   48:*/		return 0x82182554;
		  /* 82182554h */ case   49:  		/* mr R10, R3 */
		/* 82182554h case   49:*/		regs.R10 = regs.R3;
		/* 82182554h case   49:*/		return 0x82182558;
		  /* 82182558h */ case   50:  		/* stw R9, <#[R3 + 4]> */
		/* 82182558h case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 82182558h case   50:*/		return 0x8218255C;
		  /* 8218255Ch */ case   51:  		/* stw R11, <#[R3]> */
		/* 8218255Ch case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8218255Ch case   51:*/		return 0x82182560;
	}
	return 0x82182560;
} // Block from 82182490h-82182560h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82182560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182560);
		  /* 82182560h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 82182560h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82182560h case    0:*/		return 0x82182564;
		  /* 82182564h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82182564h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82182564h case    1:*/		return 0x82182568;
		  /* 82182568h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 82182568h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82182590;  }
		/* 82182568h case    2:*/		return 0x8218256C;
		  /* 8218256Ch */ case    3:  		/* lwz R11, <#[R10]> */
		/* 8218256Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8218256Ch case    3:*/		return 0x82182570;
		  /* 82182570h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182570h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182570h case    4:*/		return 0x82182574;
		  /* 82182574h */ case    5:  		/* addic. R3, R11, -4 */
		/* 82182574h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82182574h case    5:*/		return 0x82182578;
	}
	return 0x82182578;
} // Block from 82182560h-82182578h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82182578h
// Function '?ReducePredication@Compiler@D3DXShader@@AAA_NPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182578);
		  /* 82182578h */ case    0:  		/* bc 12, CR0_EQ, 24 */
		/* 82182578h case    0:*/		if ( regs.CR[0].eq ) { return 0x82182590;  }
		/* 82182578h case    0:*/		return 0x8218257C;
		  /* 8218257Ch */ case    1:  		/* lwz R11, <#[R3 + 8]> */
		/* 8218257Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8218257Ch case    1:*/		return 0x82182580;
		  /* 82182580h */ case    2:  		/* lwz R9, <#[R3 + 12]> */
		/* 82182580h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000000C) );
		/* 82182580h case    2:*/		return 0x82182584;
		  /* 82182584h */ case    3:  		/* addi R11, R11, 1 */
		/* 82182584h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82182584h case    3:*/		return 0x82182588;
		  /* 82182588h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 82182588h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82182588h case    4:*/		return 0x8218258C;
		  /* 8218258Ch */ case    5:  		/* bc 4, CR6_GT, 16 */
		/* 8218258Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x8218259C;  }
		/* 8218258Ch case    5:*/		return 0x82182590;
	}
	return 0x82182590;
} // Block from 82182578h-82182590h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82182590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182590);
		  /* 82182590h */ case    0:  		/* li R4, 1 */
		/* 82182590h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82182590h case    0:*/		return 0x82182594;
		  /* 82182594h */ case    1:  		/* mr R3, R10 */
		/* 82182594h case    1:*/		regs.R3 = regs.R10;
		/* 82182594h case    1:*/		return 0x82182598;
		  /* 82182598h */ case    2:  		/* bl 43824 */
		/* 82182598h case    2:*/		regs.LR = 0x8218259C; return 0x8218D0C8;
		/* 82182598h case    2:*/		return 0x8218259C;
	}
	return 0x8218259C;
} // Block from 82182590h-8218259Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218259Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218259C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218259C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218259C);
		  /* 8218259Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8218259Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8218259Ch case    0:*/		return 0x821825A0;
		  /* 821825A0h */ case    1:  		/* addi R10, R11, 4 */
		/* 821825A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821825A0h case    1:*/		return 0x821825A4;
		  /* 821825A4h */ case    2:  		/* addi R9, R11, 1 */
		/* 821825A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821825A4h case    2:*/		return 0x821825A8;
		  /* 821825A8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821825A8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821825A8h case    3:*/		return 0x821825AC;
		  /* 821825ACh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821825ACh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821825ACh case    4:*/		return 0x821825B0;
		  /* 821825B0h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821825B0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821825B0h case    5:*/		return 0x821825B4;
		  /* 821825B4h */ case    6:  		/* b 188 */
		/* 821825B4h case    6:*/		return 0x82182670;
		/* 821825B4h case    6:*/		return 0x821825B8;
	}
	return 0x821825B8;
} // Block from 8218259Ch-821825B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821825B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821825B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821825B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821825B8);
		  /* 821825B8h */ case    0:  		/* lwz R28, <#[R29 + 8]> */
		/* 821825B8h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000008) );
		/* 821825B8h case    0:*/		return 0x821825BC;
		  /* 821825BCh */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821825BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821825BCh case    1:*/		return 0x821825C0;
		  /* 821825C0h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 821825C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218262C;  }
		/* 821825C0h case    2:*/		return 0x821825C4;
		  /* 821825C4h */ case    3:  		/* lwz R29, <#[R28 + 4]> */
		/* 821825C4h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000004) );
		/* 821825C4h case    3:*/		return 0x821825C8;
		  /* 821825C8h */ case    4:  		/* cmplw CR6, R29, R30 */
		/* 821825C8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 821825C8h case    4:*/		return 0x821825CC;
		  /* 821825CCh */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821825CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821825F0;  }
		/* 821825CCh case    5:*/		return 0x821825D0;
		  /* 821825D0h */ case    6:  		/* li R7, 1 */
		/* 821825D0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821825D0h case    6:*/		return 0x821825D4;
		  /* 821825D4h */ case    7:  		/* li R6, 0 */
		/* 821825D4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821825D4h case    7:*/		return 0x821825D8;
		  /* 821825D8h */ case    8:  		/* mr R5, R29 */
		/* 821825D8h case    8:*/		regs.R5 = regs.R29;
		/* 821825D8h case    8:*/		return 0x821825DC;
		  /* 821825DCh */ case    9:  		/* mr R4, R24 */
		/* 821825DCh case    9:*/		regs.R4 = regs.R24;
		/* 821825DCh case    9:*/		return 0x821825E0;
		  /* 821825E0h */ case   10:  		/* mr R3, R14 */
		/* 821825E0h case   10:*/		regs.R3 = regs.R14;
		/* 821825E0h case   10:*/		return 0x821825E4;
		  /* 821825E4h */ case   11:  		/* bl 417564 */
		/* 821825E4h case   11:*/		regs.LR = 0x821825E8; return 0x821E8500;
		/* 821825E4h case   11:*/		return 0x821825E8;
		  /* 821825E8h */ case   12:  		/* cmplw CR6, R31, R3 */
		/* 821825E8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821825E8h case   12:*/		return 0x821825EC;
		  /* 821825ECh */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 821825ECh case   13:*/		if ( regs.CR[6].eq ) { return 0x821825F8;  }
		/* 821825ECh case   13:*/		return 0x821825F0;
	}
	return 0x821825F0;
} // Block from 821825B8h-821825F0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821825F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821825F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821825F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821825F0);
		  /* 821825F0h */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 821825F0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 821825F0h case    0:*/		return 0x821825F4;
		  /* 821825F4h */ case    1:  		/* b -56 */
		/* 821825F4h case    1:*/		return 0x821825BC;
		/* 821825F4h case    1:*/		return 0x821825F8;
	}
	return 0x821825F8;
} // Block from 821825F0h-821825F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821825F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821825F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821825F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821825F8);
		  /* 821825F8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821825F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821825F8h case    0:*/		return 0x821825FC;
		  /* 821825FCh */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 821825FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8218262C;  }
		/* 821825FCh case    1:*/		return 0x82182600;
		  /* 82182600h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82182600h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82182600h case    2:*/		return 0x82182604;
		  /* 82182604h */ case    3:  		/* li R5, 0 */
		/* 82182604h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82182604h case    3:*/		return 0x82182608;
		  /* 82182608h */ case    4:  		/* mr R4, R27 */
		/* 82182608h case    4:*/		regs.R4 = regs.R27;
		/* 82182608h case    4:*/		return 0x8218260C;
		  /* 8218260Ch */ case    5:  		/* rlwinm R6, R11, 0, 27, 30 */
		/* 8218260Ch case    5:*/		cpu::op::rlwinm<0,0,27,30>(regs,&regs.R6,regs.R11);
		/* 8218260Ch case    5:*/		return 0x82182610;
		  /* 82182610h */ case    6:  		/* mr R3, R14 */
		/* 82182610h case    6:*/		regs.R3 = regs.R14;
		/* 82182610h case    6:*/		return 0x82182614;
		  /* 82182614h */ case    7:  		/* bl -42156 */
		/* 82182614h case    7:*/		regs.LR = 0x82182618; return 0x82178168;
		/* 82182614h case    7:*/		return 0x82182618;
		  /* 82182618h */ case    8:  		/* mr R4, R3 */
		/* 82182618h case    8:*/		regs.R4 = regs.R3;
		/* 82182618h case    8:*/		return 0x8218261C;
		  /* 8218261Ch */ case    9:  		/* mr R3, R24 */
		/* 8218261Ch case    9:*/		regs.R3 = regs.R24;
		/* 8218261Ch case    9:*/		return 0x82182620;
		  /* 82182620h */ case   10:  		/* bl -42072 */
		/* 82182620h case   10:*/		regs.LR = 0x82182624; return 0x821781C8;
		/* 82182620h case   10:*/		return 0x82182624;
		  /* 82182624h */ case   11:  		/* mr R31, R3 */
		/* 82182624h case   11:*/		regs.R31 = regs.R3;
		/* 82182624h case   11:*/		return 0x82182628;
		  /* 82182628h */ case   12:  		/* b 72 */
		/* 82182628h case   12:*/		return 0x82182670;
		/* 82182628h case   12:*/		return 0x8218262C;
	}
	return 0x8218262C;
} // Block from 821825F8h-8218262Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8218262Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218262C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218262C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218262C);
		  /* 8218262Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8218262Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8218262Ch case    0:*/		return 0x82182630;
		  /* 82182630h */ case    1:  		/* addi R11, R11, 4 */
		/* 82182630h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82182630h case    1:*/		return 0x82182634;
		  /* 82182634h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82182634h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82182634h case    2:*/		return 0x82182638;
		  /* 82182638h */ case    3:  		/* b 12 */
		/* 82182638h case    3:*/		return 0x82182644;
		/* 82182638h case    3:*/		return 0x8218263C;
		  /* 8218263Ch */ case    4:  		/* addi R11, R10, 8 */
		/* 8218263Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8218263Ch case    4:*/		return 0x82182640;
		  /* 82182640h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 82182640h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82182640h case    5:*/		return 0x82182644;
	}
	return 0x82182644;
} // Block from 8218262Ch-82182644h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82182644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182644);
		  /* 82182644h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 82182644h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82182644h case    0:*/		return 0x82182648;
		  /* 82182648h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82182648h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218263C;  }
		/* 82182648h case    1:*/		return 0x8218264C;
		  /* 8218264Ch */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 8218264Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8218264Ch case    2:*/		return 0x82182650;
		  /* 82182650h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82182650h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82182650h case    3:*/		return 0x82182654;
		  /* 82182654h */ case    4:  		/* lwz R11, <#[R27 + 4]> */
		/* 82182654h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82182654h case    4:*/		return 0x82182658;
		  /* 82182658h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 82182658h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182658h case    5:*/		return 0x8218265C;
		  /* 8218265Ch */ case    6:  		/* stw R31, <#[R27 + 4]> */
		/* 8218265Ch case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000004) );
		/* 8218265Ch case    6:*/		return 0x82182660;
		  /* 82182660h */ case    7:  		/* stw R27, <#[R31 + 12]> */
		/* 82182660h case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 82182660h case    7:*/		return 0x82182664;
		  /* 82182664h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 82182664h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82182664h case    8:*/		return 0x82182668;
		  /* 82182668h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182668h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182668h case    9:*/		return 0x8218266C;
		  /* 8218266Ch */ case   10:  		/* stw R11, <#[R31]> */
		/* 8218266Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8218266Ch case   10:*/		return 0x82182670;
	}
	return 0x82182670;
} // Block from 82182644h-82182670h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82182670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182670);
		  /* 82182670h */ case    0:  		/* lwz R11, <#[R26 + 16]> */
		/* 82182670h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82182670h case    0:*/		return 0x82182674;
		  /* 82182674h */ case    1:  		/* rlwinm. R10, R11, 0, 13, 15 */
		/* 82182674h case    1:*/		cpu::op::rlwinm<1,0,13,15>(regs,&regs.R10,regs.R11);
		/* 82182674h case    1:*/		return 0x82182678;
		  /* 82182678h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82182678h case    2:*/		if ( regs.CR[0].eq ) { return 0x82182688;  }
		/* 82182678h case    2:*/		return 0x8218267C;
		  /* 8218267Ch */ case    3:  		/* add R11, R11, R25 */
		/* 8218267Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 8218267Ch case    3:*/		return 0x82182680;
		  /* 82182680h */ case    4:  		/* sth R11, <#[R27 + 18]> */
		/* 82182680h case    4:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R27 + 0x00000012) );
		/* 82182680h case    4:*/		return 0x82182684;
		  /* 82182684h */ case    5:  		/* b 16 */
		/* 82182684h case    5:*/		return 0x82182694;
		/* 82182684h case    5:*/		return 0x82182688;
	}
	return 0x82182688;
} // Block from 82182670h-82182688h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82182688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182688);
		  /* 82182688h */ case    0:  		/* mr R3, R26 */
		/* 82182688h case    0:*/		regs.R3 = regs.R26;
		/* 82182688h case    0:*/		return 0x8218268C;
		  /* 8218268Ch */ case    1:  		/* bl 4700 */
		/* 8218268Ch case    1:*/		regs.LR = 0x82182690; return 0x821838E8;
		/* 8218268Ch case    1:*/		return 0x82182690;
		  /* 82182690h */ case    2:  		/* sth R3, <#[R27 + 18]> */
		/* 82182690h case    2:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R27 + 0x00000012) );
		/* 82182690h case    2:*/		return 0x82182694;
	}
	return 0x82182694;
} // Block from 82182688h-82182694h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82182694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182694);
		  /* 82182694h */ case    0:  		/* lwz R3, <#[R14 + 660]> */
		/* 82182694h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 82182694h case    0:*/		return 0x82182698;
		  /* 82182698h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 82182698h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82182698h case    1:*/		return 0x8218269C;
		  /* 8218269Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8218269Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8218269Ch case    2:*/		return 0x821826A0;
		  /* 821826A0h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 821826A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821826C8;  }
		/* 821826A0h case    3:*/		return 0x821826A4;
		  /* 821826A4h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821826A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821826A4h case    4:*/		return 0x821826A8;
		  /* 821826A8h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821826A8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821826A8h case    5:*/		return 0x821826AC;
		  /* 821826ACh */ case    6:  		/* addic. R11, R11, -4 */
		/* 821826ACh case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821826ACh case    6:*/		return 0x821826B0;
		  /* 821826B0h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 821826B0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821826C8;  }
		/* 821826B0h case    7:*/		return 0x821826B4;
		  /* 821826B4h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821826B4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821826B4h case    8:*/		return 0x821826B8;
		  /* 821826B8h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 821826B8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821826B8h case    9:*/		return 0x821826BC;
		  /* 821826BCh */ case   10:  		/* addi R10, R10, 1 */
		/* 821826BCh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821826BCh case   10:*/		return 0x821826C0;
		  /* 821826C0h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 821826C0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821826C0h case   11:*/		return 0x821826C4;
		  /* 821826C4h */ case   12:  		/* bc 4, CR6_GT, 16 */
		/* 821826C4h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821826D4;  }
		/* 821826C4h case   12:*/		return 0x821826C8;
	}
	return 0x821826C8;
} // Block from 82182694h-821826C8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821826C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821826C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821826C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821826C8);
		  /* 821826C8h */ case    0:  		/* li R4, 1 */
		/* 821826C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821826C8h case    0:*/		return 0x821826CC;
		  /* 821826CCh */ case    1:  		/* bl 43516 */
		/* 821826CCh case    1:*/		regs.LR = 0x821826D0; return 0x8218D0C8;
		/* 821826CCh case    1:*/		return 0x821826D0;
		  /* 821826D0h */ case    2:  		/* mr R11, R3 */
		/* 821826D0h case    2:*/		regs.R11 = regs.R3;
		/* 821826D0h case    2:*/		return 0x821826D4;
	}
	return 0x821826D4;
} // Block from 821826C8h-821826D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821826D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821826D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821826D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821826D4);
		  /* 821826D4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821826D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821826D4h case    0:*/		return 0x821826D8;
		  /* 821826D8h */ case    1:  		/* lwz R29, <#[R1 + 120]> */
		/* 821826D8h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000078) );
		/* 821826D8h case    1:*/		return 0x821826DC;
		  /* 821826DCh */ case    2:  		/* addi R9, R10, 4 */
		/* 821826DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821826DCh case    2:*/		return 0x821826E0;
		  /* 821826E0h */ case    3:  		/* addi R8, R10, 1 */
		/* 821826E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821826E0h case    3:*/		return 0x821826E4;
		  /* 821826E4h */ case    4:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821826E4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821826E4h case    4:*/		return 0x821826E8;
		  /* 821826E8h */ case    5:  		/* stw R8, <#[R11 + 8]> */
		/* 821826E8h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821826E8h case    5:*/		return 0x821826EC;
		  /* 821826ECh */ case    6:  		/* stwx R27, <#[R10 + R11]> */
		/* 821826ECh case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821826ECh case    6:*/		return 0x821826F0;
	}
	return 0x821826F0;
} // Block from 821826D4h-821826F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821826F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821826F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821826F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821826F0);
		  /* 821826F0h */ case    0:  		/* addi R8, R1, 176 */
		/* 821826F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 821826F0h case    0:*/		return 0x821826F4;
		  /* 821826F4h */ case    1:  		/* lwz R11, <#[R23]> */
		/* 821826F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821826F4h case    1:*/		return 0x821826F8;
		  /* 821826F8h */ case    2:  		/* li R10, 3 */
		/* 821826F8h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821826F8h case    2:*/		return 0x821826FC;
		  /* 821826FCh */ case    3:  		/* lwz R9, <#[R1 + 148]> */
		/* 821826FCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000094) );
		/* 821826FCh case    3:*/		return 0x82182700;
		  /* 82182700h */ case    4:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 82182700h case    4:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 82182700h case    4:*/		return 0x82182704;
		  /* 82182704h */ case    5:  		/* lwz R7, <#[R24 + 8]> */
		/* 82182704h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R24 + 0x00000008) );
		/* 82182704h case    5:*/		return 0x82182708;
		  /* 82182708h */ case    6:  		/* slw R10, R10, R22 */
		/* 82182708h case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R22);
		/* 82182708h case    6:*/		return 0x8218270C;
		  /* 8218270Ch */ case    7:  		/* stwx R31, <#[R21 + R8]> */
		/* 8218270Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R21 + regs.R8 + 0x00000000) );
		/* 8218270Ch case    7:*/		return 0x82182710;
		  /* 82182710h */ case    8:  		/* addi R8, R1, 240 */
		/* 82182710h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xF0);
		/* 82182710h case    8:*/		return 0x82182714;
		  /* 82182714h */ case    9:  		/* slw R11, R11, R22 */
		/* 82182714h case    9:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R22);
		/* 82182714h case    9:*/		return 0x82182718;
		  /* 82182718h */ case   10:  		/* andc R10, R9, R10 */
		/* 82182718h case   10:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82182718h case   10:*/		return 0x8218271C;
		  /* 8218271Ch */ case   11:  		/* stwx R24, <#[R21 + R8]> */
		/* 8218271Ch case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R21 + regs.R8 + 0x00000000) );
		/* 8218271Ch case   11:*/		return 0x82182720;
		  /* 82182720h */ case   12:  		/* oris R9, R7, 1024 */
		/* 82182720h case   12:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R7,0x400);
		/* 82182720h case   12:*/		return 0x82182724;
		  /* 82182724h */ case   13:  		/* or R11, R10, R11 */
		/* 82182724h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82182724h case   13:*/		return 0x82182728;
		  /* 82182728h */ case   14:  		/* addi R15, R15, 1 */
		/* 82182728h case   14:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0x1);
		/* 82182728h case   14:*/		return 0x8218272C;
		  /* 8218272Ch */ case   15:  		/* stw R9, <#[R24 + 8]> */
		/* 8218272Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R24 + 0x00000008) );
		/* 8218272Ch case   15:*/		return 0x82182730;
		  /* 82182730h */ case   16:  		/* stw R11, <#[R1 + 148]> */
		/* 82182730h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82182730h case   16:*/		return 0x82182734;
		  /* 82182734h */ case   17:  		/* addi R22, R22, 2 */
		/* 82182734h case   17:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x2);
		/* 82182734h case   17:*/		return 0x82182738;
		  /* 82182738h */ case   18:  		/* addi R21, R21, 4 */
		/* 82182738h case   18:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 82182738h case   18:*/		return 0x8218273C;
	}
	return 0x8218273C;
} // Block from 821826F0h-8218273Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8218273Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218273C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218273C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218273C);
		  /* 8218273Ch */ case    0:  		/* lwz R11, <#[R20]> */
		/* 8218273Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 8218273Ch case    0:*/		return 0x82182740;
		  /* 82182740h */ case    1:  		/* cmplw CR6, R11, R19 */
		/* 82182740h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 82182740h case    1:*/		return 0x82182744;
		  /* 82182744h */ case    2:  		/* bc 4, CR6_EQ, -1000 */
		/* 82182744h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8218235C;  }
		/* 82182744h case    2:*/		return 0x82182748;
		  /* 82182748h */ case    3:  		/* addi R20, R19, 8 */
		/* 82182748h case    3:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R19,0x8);
		/* 82182748h case    3:*/		return 0x8218274C;
		  /* 8218274Ch */ case    4:  		/* b -1008 */
		/* 8218274Ch case    4:*/		return 0x8218235C;
		/* 8218274Ch case    4:*/		return 0x82182750;
	}
	return 0x82182750;
} // Block from 8218273Ch-82182750h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82182750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182750);
		  /* 82182750h */ case    0:  		/* li R20, 0 */
		/* 82182750h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82182750h case    0:*/		return 0x82182754;
		  /* 82182754h */ case    1:  		/* cmplwi CR6, R15, 0 */
		/* 82182754h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82182754h case    1:*/		return 0x82182758;
		  /* 82182758h */ case    2:  		/* bc 12, CR6_EQ, 1188 */
		/* 82182758h case    2:*/		if ( regs.CR[6].eq ) { return 0x82182BFC;  }
		/* 82182758h case    2:*/		return 0x8218275C;
		  /* 8218275Ch */ case    3:  		/* addi R21, R1, 176 */
		/* 8218275Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R1,0xB0);
		/* 8218275Ch case    3:*/		return 0x82182760;
		  /* 82182760h */ case    4:  		/* lwz R11, <#[R21]> */
		/* 82182760h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 82182760h case    4:*/		return 0x82182764;
		  /* 82182764h */ case    5:  		/* lwz R22, <#[R11 + 12]> */
		/* 82182764h case    5:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x0000000C) );
		/* 82182764h case    5:*/		return 0x82182768;
		  /* 82182768h */ case    6:  		/* lwz R11, <#[R22 + 8]> */
		/* 82182768h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 82182768h case    6:*/		return 0x8218276C;
		  /* 8218276Ch */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8218276Ch case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8218276Ch case    7:*/		return 0x82182770;
		  /* 82182770h */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 82182770h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 82182770h case    8:*/		return 0x82182774;
		  /* 82182774h */ case    9:  		/* bc 4, CR6_EQ, 1144 */
		/* 82182774h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82182BEC;  }
		/* 82182774h case    9:*/		return 0x82182778;
		  /* 82182778h */ case   10:  		/* lwz R11, <#[R22 + 4]> */
		/* 82182778h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 82182778h case   10:*/		return 0x8218277C;
		  /* 8218277Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8218277Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218277Ch case   11:*/		return 0x82182780;
		  /* 82182780h */ case   12:  		/* bc 12, CR6_EQ, 52 */
		/* 82182780h case   12:*/		if ( regs.CR[6].eq ) { return 0x821827B4;  }
		/* 82182780h case   12:*/		return 0x82182784;
		  /* 82182784h */ case   13:  		/* lwz R31, <#[R11 + 16]> */
		/* 82182784h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 82182784h case   13:*/		return 0x82182788;
		  /* 82182788h */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 82182788h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82182788h case   14:*/		return 0x8218278C;
		  /* 8218278Ch */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 8218278Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821827AC;  }
		/* 8218278Ch case   15:*/		return 0x82182790;
		  /* 82182790h */ case   16:  		/* lwz R10, <#[R31 + 8]> */
		/* 82182790h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82182790h case   16:*/		return 0x82182794;
		  /* 82182794h */ case   17:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 82182794h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 82182794h case   17:*/		return 0x82182798;
		  /* 82182798h */ case   18:  		/* cmplwi CR6, R10, 14080 */
		/* 82182798h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 82182798h case   18:*/		return 0x8218279C;
		  /* 8218279Ch */ case   19:  		/* bc 4, CR6_EQ, 16 */
		/* 8218279Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821827AC;  }
		/* 8218279Ch case   19:*/		return 0x821827A0;
		  /* 821827A0h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821827A0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821827A0h case   20:*/		return 0x821827A4;
		  /* 821827A4h */ case   21:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821827A4h case   21:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821827A4h case   21:*/		return 0x821827A8;
		  /* 821827A8h */ case   22:  		/* bc 4, CR0_EQ, 16 */
		/* 821827A8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821827B8;  }
		/* 821827A8h case   22:*/		return 0x821827AC;
	}
	return 0x821827AC;
} // Block from 82182750h-821827ACh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821827ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821827AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821827AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821827AC);
		  /* 821827ACh */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821827ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821827ACh case    0:*/		return 0x821827B0;
		  /* 821827B0h */ case    1:  		/* b -52 */
		/* 821827B0h case    1:*/		return 0x8218277C;
		/* 821827B0h case    1:*/		return 0x821827B4;
	}
	return 0x821827B4;
} // Block from 821827ACh-821827B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821827B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821827B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821827B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821827B4);
		  /* 821827B4h */ case    0:  		/* li R31, 0 */
		/* 821827B4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821827B4h case    0:*/		return 0x821827B8;
	}
	return 0x821827B8;
} // Block from 821827B4h-821827B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821827B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821827B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821827B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821827B8);
		  /* 821827B8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821827B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821827B8h case    0:*/		return 0x821827BC;
		  /* 821827BCh */ case    1:  		/* bc 4, CR6_EQ, 980 */
		/* 821827BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82182B90;  }
		/* 821827BCh case    1:*/		return 0x821827C0;
		  /* 821827C0h */ case    2:  		/* mr R4, R22 */
		/* 821827C0h case    2:*/		regs.R4 = regs.R22;
		/* 821827C0h case    2:*/		return 0x821827C4;
		  /* 821827C4h */ case    3:  		/* lwz R8, <#[R1 + 120]> */
		/* 821827C4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 821827C4h case    3:*/		return 0x821827C8;
		  /* 821827C8h */ case    4:  		/* mr R3, R14 */
		/* 821827C8h case    4:*/		regs.R3 = regs.R14;
		/* 821827C8h case    4:*/		return 0x821827CC;
		  /* 821827CCh */ case    5:  		/* lwz R7, <#[R1 + 100]> */
		/* 821827CCh case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000064) );
		/* 821827CCh case    5:*/		return 0x821827D0;
		  /* 821827D0h */ case    6:  		/* lwz R6, <#[R1 + 112]> */
		/* 821827D0h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 821827D0h case    6:*/		return 0x821827D4;
		  /* 821827D4h */ case    7:  		/* li R29, 0 */
		/* 821827D4h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821827D4h case    7:*/		return 0x821827D8;
		  /* 821827D8h */ case    8:  		/* lwz R5, <#[R1 + 460]> */
		/* 821827D8h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001CC) );
		/* 821827D8h case    8:*/		return 0x821827DC;
		  /* 821827DCh */ case    9:  		/* bl -26100 */
		/* 821827DCh case    9:*/		regs.LR = 0x821827E0; return 0x8217C1E8;
		/* 821827DCh case    9:*/		return 0x821827E0;
		  /* 821827E0h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821827E0h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821827E0h case   10:*/		return 0x821827E4;
		  /* 821827E4h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 821827E4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821827EC;  }
		/* 821827E4h case   11:*/		return 0x821827E8;
		  /* 821827E8h */ case   12:  		/* li R29, 1 */
		/* 821827E8h case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821827E8h case   12:*/		return 0x821827EC;
	}
	return 0x821827EC;
} // Block from 821827B8h-821827ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821827ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821827EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821827EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821827EC);
		  /* 821827ECh */ case    0:  		/* mr R4, R22 */
		/* 821827ECh case    0:*/		regs.R4 = regs.R22;
		/* 821827ECh case    0:*/		return 0x821827F0;
		  /* 821827F0h */ case    1:  		/* mr R3, R14 */
		/* 821827F0h case    1:*/		regs.R3 = regs.R14;
		/* 821827F0h case    1:*/		return 0x821827F4;
		  /* 821827F4h */ case    2:  		/* bl 6116 */
		/* 821827F4h case    2:*/		regs.LR = 0x821827F8; return 0x82183FD8;
		/* 821827F4h case    2:*/		return 0x821827F8;
		  /* 821827F8h */ case    3:  		/* lwz R11, <#[R16 + 20]> */
		/* 821827F8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000014) );
		/* 821827F8h case    3:*/		return 0x821827FC;
		  /* 821827FCh */ case    4:  		/* addi R24, R16, 16 */
		/* 821827FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R16,0x10);
		/* 821827FCh case    4:*/		return 0x82182800;
		  /* 82182800h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182800h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182800h case    5:*/		return 0x82182804;
		  /* 82182804h */ case    6:  		/* mr R23, R3 */
		/* 82182804h case    6:*/		regs.R23 = regs.R3;
		/* 82182804h case    6:*/		return 0x82182808;
		  /* 82182808h */ case    7:  		/* li R25, 1 */
		/* 82182808h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82182808h case    7:*/		return 0x8218280C;
		  /* 8218280Ch */ case    8:  		/* bc 4, CR0_EQ, 136 */
		/* 8218280Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x82182894;  }
		/* 8218280Ch case    8:*/		return 0x82182810;
		  /* 82182810h */ case    9:  		/* mr R31, R11 */
		/* 82182810h case    9:*/		regs.R31 = regs.R11;
		/* 82182810h case    9:*/		return 0x82182814;
		  /* 82182814h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 82182814h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82182814h case   10:*/		return 0x82182818;
		  /* 82182818h */ case   11:  		/* bc 12, CR0_EQ, 124 */
		/* 82182818h case   11:*/		if ( regs.CR[0].eq ) { return 0x82182894;  }
		/* 82182818h case   11:*/		return 0x8218281C;
		  /* 8218281Ch */ case   12:  		/* cmplw CR6, R31, R22 */
		/* 8218281Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 8218281Ch case   12:*/		return 0x82182820;
		  /* 82182820h */ case   13:  		/* bc 12, CR6_EQ, 84 */
		/* 82182820h case   13:*/		if ( regs.CR[6].eq ) { return 0x82182874;  }
		/* 82182820h case   13:*/		return 0x82182824;
		  /* 82182824h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 82182824h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182824h case   14:*/		return 0x82182828;
		  /* 82182828h */ case   15:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82182828h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82182828h case   15:*/		return 0x8218282C;
		  /* 8218282Ch */ case   16:  		/* cmplwi CR6, R11, 14336 */
		/* 8218282Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8218282Ch case   16:*/		return 0x82182830;
		  /* 82182830h */ case   17:  		/* bc 4, CR6_EQ, -2464 */
		/* 82182830h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82181E90;  }
		/* 82182830h case   17:*/		return 0x82182834;
		  /* 82182834h */ case   18:  		/* mr R4, R31 */
		/* 82182834h case   18:*/		regs.R4 = regs.R31;
		/* 82182834h case   18:*/		return 0x82182838;
		  /* 82182838h */ case   19:  		/* mr R3, R14 */
		/* 82182838h case   19:*/		regs.R3 = regs.R14;
		/* 82182838h case   19:*/		return 0x8218283C;
		  /* 8218283Ch */ case   20:  		/* bl 6044 */
		/* 8218283Ch case   20:*/		regs.LR = 0x82182840; return 0x82183FD8;
		/* 8218283Ch case   20:*/		return 0x82182840;
		  /* 82182840h */ case   21:  		/* cmplw CR6, R3, R23 */
		/* 82182840h case   21:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R23);
		/* 82182840h case   21:*/		return 0x82182844;
		  /* 82182844h */ case   22:  		/* bc 4, CR6_EQ, 48 */
		/* 82182844h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82182874;  }
		/* 82182844h case   22:*/		return 0x82182848;
		  /* 82182848h */ case   23:  		/* mr R4, R31 */
		/* 82182848h case   23:*/		regs.R4 = regs.R31;
		/* 82182848h case   23:*/		return 0x8218284C;
		  /* 8218284Ch */ case   24:  		/* lwz R8, <#[R1 + 120]> */
		/* 8218284Ch case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 8218284Ch case   24:*/		return 0x82182850;
		  /* 82182850h */ case   25:  		/* mr R3, R14 */
		/* 82182850h case   25:*/		regs.R3 = regs.R14;
		/* 82182850h case   25:*/		return 0x82182854;
		  /* 82182854h */ case   26:  		/* lwz R7, <#[R1 + 100]> */
		/* 82182854h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000064) );
		/* 82182854h case   26:*/		return 0x82182858;
		  /* 82182858h */ case   27:  		/* lwz R6, <#[R1 + 112]> */
		/* 82182858h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 82182858h case   27:*/		return 0x8218285C;
		  /* 8218285Ch */ case   28:  		/* lwz R5, <#[R1 + 460]> */
		/* 8218285Ch case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001CC) );
		/* 8218285Ch case   28:*/		return 0x82182860;
		  /* 82182860h */ case   29:  		/* bl -26232 */
		/* 82182860h case   29:*/		regs.LR = 0x82182864; return 0x8217C1E8;
		/* 82182860h case   29:*/		return 0x82182864;
		  /* 82182864h */ case   30:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182864h case   30:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182864h case   30:*/		return 0x82182868;
		  /* 82182868h */ case   31:  		/* bc 12, CR0_EQ, 8 */
		/* 82182868h case   31:*/		if ( regs.CR[0].eq ) { return 0x82182870;  }
		/* 82182868h case   31:*/		return 0x8218286C;
		  /* 8218286Ch */ case   32:  		/* li R29, 1 */
		/* 8218286Ch case   32:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8218286Ch case   32:*/		return 0x82182870;
	}
	return 0x82182870;
} // Block from 821827ECh-82182870h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82182870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182870);
		  /* 82182870h */ case    0:  		/* addi R25, R25, 1 */
		/* 82182870h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82182870h case    0:*/		return 0x82182874;
	}
	return 0x82182874;
} // Block from 82182870h-82182874h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82182874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182874);
		  /* 82182874h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82182874h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82182874h case    0:*/		return 0x82182878;
		  /* 82182878h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 82182878h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 82182878h case    1:*/		return 0x8218287C;
		  /* 8218287Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8218287Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8218287Ch case    2:*/		return 0x82182880;
		  /* 82182880h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82182880h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218288C;  }
		/* 82182880h case    3:*/		return 0x82182884;
		  /* 82182884h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82182884h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82182884h case    4:*/		return 0x82182888;
		  /* 82182888h */ case    5:  		/* bc 4, CR6_EQ, -108 */
		/* 82182888h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8218281C;  }
		/* 82182888h case    5:*/		return 0x8218288C;
	}
	return 0x8218288C;
} // Block from 82182874h-8218288Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218288Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218288C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218288C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218288C);
		  /* 8218288Ch */ case    0:  		/* cmplwi CR6, R25, 4 */
		/* 8218288Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000004);
		/* 8218288Ch case    0:*/		return 0x82182890;
		  /* 82182890h */ case    1:  		/* bc 12, CR6_GT, -2560 */
		/* 82182890h case    1:*/		if ( regs.CR[6].gt ) { return 0x82181E90;  }
		/* 82182890h case    1:*/		return 0x82182894;
	}
	return 0x82182894;
} // Block from 8218288Ch-82182894h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82182894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182894);
		  /* 82182894h */ case    0:  		/* lwz R31, <#[R24 + 4]> */
		/* 82182894h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000004) );
		/* 82182894h case    0:*/		return 0x82182898;
		  /* 82182898h */ case    1:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82182898h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82182898h case    1:*/		return 0x8218289C;
		  /* 8218289Ch */ case    2:  		/* bc 4, CR0_EQ, 84 */
		/* 8218289Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821828F0;  }
		/* 8218289Ch case    2:*/		return 0x821828A0;
		  /* 821828A0h */ case    3:  		/* cmplwi CR0, R31, 0 */
		/* 821828A0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821828A0h case    3:*/		return 0x821828A4;
		  /* 821828A4h */ case    4:  		/* bc 12, CR0_EQ, 76 */
		/* 821828A4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821828F0;  }
		/* 821828A4h case    4:*/		return 0x821828A8;
		  /* 821828A8h */ case    5:  		/* addi R11, R1, 256 */
		/* 821828A8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x100);
		/* 821828A8h case    5:*/		return 0x821828AC;
		  /* 821828ACh */ case    6:  		/* addi R30, R11, -4 */
		/* 821828ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 821828ACh case    6:*/		return 0x821828B0;
		  /* 821828B0h */ case    7:  		/* mr R4, R31 */
		/* 821828B0h case    7:*/		regs.R4 = regs.R31;
		/* 821828B0h case    7:*/		return 0x821828B4;
		  /* 821828B4h */ case    8:  		/* mr R3, R14 */
		/* 821828B4h case    8:*/		regs.R3 = regs.R14;
		/* 821828B4h case    8:*/		return 0x821828B8;
		  /* 821828B8h */ case    9:  		/* bl 5920 */
		/* 821828B8h case    9:*/		regs.LR = 0x821828BC; return 0x82183FD8;
		/* 821828B8h case    9:*/		return 0x821828BC;
		  /* 821828BCh */ case   10:  		/* cmplw CR6, R3, R23 */
		/* 821828BCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R23);
		/* 821828BCh case   10:*/		return 0x821828C0;
		  /* 821828C0h */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 821828C0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821828D8;  }
		/* 821828C0h case   11:*/		return 0x821828C4;
		  /* 821828C4h */ case   12:  		/* li R5, 0 */
		/* 821828C4h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821828C4h case   12:*/		return 0x821828C8;
		  /* 821828C8h */ case   13:  		/* mr R4, R31 */
		/* 821828C8h case   13:*/		regs.R4 = regs.R31;
		/* 821828C8h case   13:*/		return 0x821828CC;
		  /* 821828CCh */ case   14:  		/* mr R3, R14 */
		/* 821828CCh case   14:*/		regs.R3 = regs.R14;
		/* 821828CCh case   14:*/		return 0x821828D0;
		  /* 821828D0h */ case   15:  		/* bl -42944 */
		/* 821828D0h case   15:*/		regs.LR = 0x821828D4; return 0x82178110;
		/* 821828D0h case   15:*/		return 0x821828D4;
		  /* 821828D4h */ case   16:  		/* stwu R3, <#[R30 + 4]> */
		/* 821828D4h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821828D4h case   16:*/		return 0x821828D8;
	}
	return 0x821828D8;
} // Block from 82182894h-821828D8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821828D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821828D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821828D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821828D8);
		  /* 821828D8h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821828D8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821828D8h case    0:*/		return 0x821828DC;
		  /* 821828DCh */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821828DCh case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821828DCh case    1:*/		return 0x821828E0;
		  /* 821828E0h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821828E0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821828E0h case    2:*/		return 0x821828E4;
		  /* 821828E4h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821828E4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821828F0;  }
		/* 821828E4h case    3:*/		return 0x821828E8;
		  /* 821828E8h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821828E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821828E8h case    4:*/		return 0x821828EC;
		  /* 821828ECh */ case    5:  		/* bc 4, CR6_EQ, -60 */
		/* 821828ECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821828B0;  }
		/* 821828ECh case    5:*/		return 0x821828F0;
	}
	return 0x821828F0;
} // Block from 821828D8h-821828F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821828F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821828F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821828F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821828F0);
		  /* 821828F0h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821828F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821828F0h case    0:*/		return 0x821828F4;
		  /* 821828F4h */ case    1:  		/* li R27, 0 */
		/* 821828F4h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821828F4h case    1:*/		return 0x821828F8;
		  /* 821828F8h */ case    2:  		/* bc 12, CR0_EQ, 304 */
		/* 821828F8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82182A28;  }
		/* 821828F8h case    2:*/		return 0x821828FC;
		  /* 821828FCh */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 821828FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821828FCh case    3:*/		return 0x82182900;
		  /* 82182900h */ case    4:  		/* bc 12, CR6_EQ, 284 */
		/* 82182900h case    4:*/		if ( regs.CR[6].eq ) { return 0x82182A1C;  }
		/* 82182900h case    4:*/		return 0x82182904;
		  /* 82182904h */ case    5:  		/* addi R11, R16, 24 */
		/* 82182904h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0x18);
		/* 82182904h case    5:*/		return 0x82182908;
		  /* 82182908h */ case    6:  		/* addi R10, R1, 256 */
		/* 82182908h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x100);
		/* 82182908h case    6:*/		return 0x8218290C;
		  /* 8218290Ch */ case    7:  		/* addi R29, R11, 4 */
		/* 8218290Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4);
		/* 8218290Ch case    7:*/		return 0x82182910;
		  /* 82182910h */ case    8:  		/* addi R28, R10, -4 */
		/* 82182910h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFFC);
		/* 82182910h case    8:*/		return 0x82182914;
		  /* 82182914h */ case    9:  		/* mr R26, R25 */
		/* 82182914h case    9:*/		regs.R26 = regs.R25;
		/* 82182914h case    9:*/		return 0x82182918;
		  /* 82182918h */ case   10:  		/* lwz R30, <#[R28 + 4]> */
		/* 82182918h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000004) );
		/* 82182918h case   10:*/		return 0x8218291C;
		  /* 8218291Ch */ case   11:  		/* li R5, 0 */
		/* 8218291Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218291Ch case   11:*/		return 0x82182920;
		  /* 82182920h */ case   12:  		/* mr R4, R16 */
		/* 82182920h case   12:*/		regs.R4 = regs.R16;
		/* 82182920h case   12:*/		return 0x82182924;
		  /* 82182924h */ case   13:  		/* mr R7, R30 */
		/* 82182924h case   13:*/		regs.R7 = regs.R30;
		/* 82182924h case   13:*/		return 0x82182928;
		  /* 82182928h */ case   14:  		/* mr R6, R30 */
		/* 82182928h case   14:*/		regs.R6 = regs.R30;
		/* 82182928h case   14:*/		return 0x8218292C;
		  /* 8218292Ch */ case   15:  		/* mr R3, R14 */
		/* 8218292Ch case   15:*/		regs.R3 = regs.R14;
		/* 8218292Ch case   15:*/		return 0x82182930;
		  /* 82182930h */ case   16:  		/* bl -35576 */
		/* 82182930h case   16:*/		regs.LR = 0x82182934; return 0x82179E38;
		/* 82182930h case   16:*/		return 0x82182934;
		  /* 82182934h */ case   17:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 82182934h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 82182934h case   17:*/		return 0x82182938;
		  /* 82182938h */ case   18:  		/* lwz R9, <#[R29]> */
		/* 82182938h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82182938h case   18:*/		return 0x8218293C;
		  /* 8218293Ch */ case   19:  		/* ori R8, R29, 1 */
		/* 8218293Ch case   19:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R29,0x1);
		/* 8218293Ch case   19:*/		return 0x82182940;
		  /* 82182940h */ case   20:  		/* addi R11, R11, 36 */
		/* 82182940h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82182940h case   20:*/		return 0x82182944;
		  /* 82182944h */ case   21:  		/* mr R31, R3 */
		/* 82182944h case   21:*/		regs.R31 = regs.R3;
		/* 82182944h case   21:*/		return 0x82182948;
		  /* 82182948h */ case   22:  		/* addi R10, R11, 4 */
		/* 82182948h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82182948h case   22:*/		return 0x8218294C;
		  /* 8218294Ch */ case   23:  		/* addi R7, R11, -36 */
		/* 8218294Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8218294Ch case   23:*/		return 0x82182950;
		  /* 82182950h */ case   24:  		/* cmplwi CR6, R27, 0 */
		/* 82182950h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82182950h case   24:*/		return 0x82182954;
		  /* 82182954h */ case   25:  		/* stw R9, <#[R11 + 4]> */
		/* 82182954h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82182954h case   25:*/		return 0x82182958;
		  /* 82182958h */ case   26:  		/* lwz R9, <#[R29]> */
		/* 82182958h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82182958h case   26:*/		return 0x8218295C;
		  /* 8218295Ch */ case   27:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8218295Ch case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8218295Ch case   27:*/		return 0x82182960;
		  /* 82182960h */ case   28:  		/* stw R10, <#[R9 + 36]> */
		/* 82182960h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000024) );
		/* 82182960h case   28:*/		return 0x82182964;
		  /* 82182964h */ case   29:  		/* stw R8, <#[R11]> */
		/* 82182964h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82182964h case   29:*/		return 0x82182968;
		  /* 82182968h */ case   30:  		/* stw R7, <#[R29]> */
		/* 82182968h case   30:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R29 + 0x00000000) );
		/* 82182968h case   30:*/		return 0x8218296C;
		  /* 8218296Ch */ case   31:  		/* bc 4, CR6_EQ, 8 */
		/* 8218296Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x82182974;  }
		/* 8218296Ch case   31:*/		return 0x82182970;
		  /* 82182970h */ case   32:  		/* mr R27, R3 */
		/* 82182970h case   32:*/		regs.R27 = regs.R3;
		/* 82182970h case   32:*/		return 0x82182974;
	}
	return 0x82182974;
} // Block from 821828F0h-82182974h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82182974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182974);
		  /* 82182974h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82182974h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182974h case    0:*/		return 0x82182978;
		  /* 82182978h */ case    1:  		/* lwz R30, <#[R30 + 12]> */
		/* 82182978h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82182978h case    1:*/		return 0x8218297C;
		  /* 8218297Ch */ case    2:  		/* oris R11, R11, 128 */
		/* 8218297Ch case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8218297Ch case    2:*/		return 0x82182980;
		  /* 82182980h */ case    3:  		/* mr R3, R30 */
		/* 82182980h case    3:*/		regs.R3 = regs.R30;
		/* 82182980h case    3:*/		return 0x82182984;
		  /* 82182984h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 82182984h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182984h case    4:*/		return 0x82182988;
		  /* 82182988h */ case    5:  		/* bl 3936 */
		/* 82182988h case    5:*/		regs.LR = 0x8218298C; return 0x821838E8;
		/* 82182988h case    5:*/		return 0x8218298C;
		  /* 8218298Ch */ case    6:  		/* sth R3, <#[R31 + 18]> */
		/* 8218298Ch case    6:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 8218298Ch case    6:*/		return 0x82182990;
		  /* 82182990h */ case    7:  		/* lwz R3, <#[R14 + 660]> */
		/* 82182990h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 82182990h case    7:*/		return 0x82182994;
		  /* 82182994h */ case    8:  		/* lwz R11, <#[R3 + 4]> */
		/* 82182994h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82182994h case    8:*/		return 0x82182998;
		  /* 82182998h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82182998h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82182998h case    9:*/		return 0x8218299C;
		  /* 8218299Ch */ case   10:  		/* bc 4, CR0_EQ, 40 */
		/* 8218299Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x821829C4;  }
		/* 8218299Ch case   10:*/		return 0x821829A0;
		  /* 821829A0h */ case   11:  		/* lwz R11, <#[R3]> */
		/* 821829A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821829A0h case   11:*/		return 0x821829A4;
		  /* 821829A4h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821829A4h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821829A4h case   12:*/		return 0x821829A8;
		  /* 821829A8h */ case   13:  		/* addic. R11, R11, -4 */
		/* 821829A8h case   13:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821829A8h case   13:*/		return 0x821829AC;
		  /* 821829ACh */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 821829ACh case   14:*/		if ( regs.CR[0].eq ) { return 0x821829C4;  }
		/* 821829ACh case   14:*/		return 0x821829B0;
		  /* 821829B0h */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 821829B0h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821829B0h case   15:*/		return 0x821829B4;
		  /* 821829B4h */ case   16:  		/* lwz R9, <#[R11 + 12]> */
		/* 821829B4h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821829B4h case   16:*/		return 0x821829B8;
		  /* 821829B8h */ case   17:  		/* addi R10, R10, 1 */
		/* 821829B8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821829B8h case   17:*/		return 0x821829BC;
		  /* 821829BCh */ case   18:  		/* cmplw CR6, R10, R9 */
		/* 821829BCh case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821829BCh case   18:*/		return 0x821829C0;
		  /* 821829C0h */ case   19:  		/* bc 4, CR6_GT, 16 */
		/* 821829C0h case   19:*/		if ( !regs.CR[6].gt ) { return 0x821829D0;  }
		/* 821829C0h case   19:*/		return 0x821829C4;
	}
	return 0x821829C4;
} // Block from 82182974h-821829C4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821829C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821829C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821829C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821829C4);
		  /* 821829C4h */ case    0:  		/* li R4, 1 */
		/* 821829C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821829C4h case    0:*/		return 0x821829C8;
		  /* 821829C8h */ case    1:  		/* bl 42752 */
		/* 821829C8h case    1:*/		regs.LR = 0x821829CC; return 0x8218D0C8;
		/* 821829C8h case    1:*/		return 0x821829CC;
		  /* 821829CCh */ case    2:  		/* mr R11, R3 */
		/* 821829CCh case    2:*/		regs.R11 = regs.R3;
		/* 821829CCh case    2:*/		return 0x821829D0;
	}
	return 0x821829D0;
} // Block from 821829C4h-821829D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821829D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821829D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821829D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821829D0);
		  /* 821829D0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821829D0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821829D0h case    0:*/		return 0x821829D4;
		  /* 821829D4h */ case    1:  		/* cmplw CR6, R30, R22 */
		/* 821829D4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R22);
		/* 821829D4h case    1:*/		return 0x821829D8;
		  /* 821829D8h */ case    2:  		/* addi R9, R10, 4 */
		/* 821829D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821829D8h case    2:*/		return 0x821829DC;
		  /* 821829DCh */ case    3:  		/* addi R8, R10, 1 */
		/* 821829DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821829DCh case    3:*/		return 0x821829E0;
		  /* 821829E0h */ case    4:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821829E0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821829E0h case    4:*/		return 0x821829E4;
		  /* 821829E4h */ case    5:  		/* stw R8, <#[R11 + 8]> */
		/* 821829E4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821829E4h case    5:*/		return 0x821829E8;
		  /* 821829E8h */ case    6:  		/* stwx R31, <#[R10 + R11]> */
		/* 821829E8h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821829E8h case    6:*/		return 0x821829EC;
		  /* 821829ECh */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821829ECh case    7:*/		if ( !regs.CR[6].eq ) { return 0x821829F4;  }
		/* 821829ECh case    7:*/		return 0x821829F0;
		  /* 821829F0h */ case    8:  		/* mr R22, R31 */
		/* 821829F0h case    8:*/		regs.R22 = regs.R31;
		/* 821829F0h case    8:*/		return 0x821829F4;
	}
	return 0x821829F4;
} // Block from 821829D0h-821829F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821829F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821829F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821829F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821829F4);
		  /* 821829F4h */ case    0:  		/* li R5, 0 */
		/* 821829F4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821829F4h case    0:*/		return 0x821829F8;
		  /* 821829F8h */ case    1:  		/* mr R4, R31 */
		/* 821829F8h case    1:*/		regs.R4 = regs.R31;
		/* 821829F8h case    1:*/		return 0x821829FC;
		  /* 821829FCh */ case    2:  		/* mr R3, R14 */
		/* 821829FCh case    2:*/		regs.R3 = regs.R14;
		/* 821829FCh case    2:*/		return 0x82182A00;
		  /* 82182A00h */ case    3:  		/* bl -43248 */
		/* 82182A00h case    3:*/		regs.LR = 0x82182A04; return 0x82178110;
		/* 82182A00h case    3:*/		return 0x82182A04;
		  /* 82182A04h */ case    4:  		/* lwz R11, <#[R1 + 116]> */
		/* 82182A04h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82182A04h case    4:*/		return 0x82182A08;
		  /* 82182A08h */ case    5:  		/* addic. R26, R26, -1 */
		/* 82182A08h case    5:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 82182A08h case    5:*/		return 0x82182A0C;
		  /* 82182A0Ch */ case    6:  		/* stw R31, <#[R1 + 116]> */
		/* 82182A0Ch case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 82182A0Ch case    6:*/		return 0x82182A10;
		  /* 82182A10h */ case    7:  		/* stwu R3, <#[R28 + 4]> */
		/* 82182A10h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 82182A10h case    7:*/		return 0x82182A14;
		  /* 82182A14h */ case    8:  		/* stw R11, <#[R31 + 32]> */
		/* 82182A14h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82182A14h case    8:*/		return 0x82182A18;
		  /* 82182A18h */ case    9:  		/* bc 4, CR0_EQ, -256 */
		/* 82182A18h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82182918;  }
		/* 82182A18h case    9:*/		return 0x82182A1C;
	}
	return 0x82182A1C;
} // Block from 821829F4h-82182A1Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82182A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182A1C);
		  /* 82182A1Ch */ case    0:  		/* lwz R11, <#[R1 + 104]> */
		/* 82182A1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82182A1Ch case    0:*/		return 0x82182A20;
		  /* 82182A20h */ case    1:  		/* addi R11, R11, 1 */
		/* 82182A20h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82182A20h case    1:*/		return 0x82182A24;
		  /* 82182A24h */ case    2:  		/* stw R11, <#[R1 + 104]> */
		/* 82182A24h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82182A24h case    2:*/		return 0x82182A28;
	}
	return 0x82182A28;
} // Block from 82182A1Ch-82182A28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82182A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182A28);
		  /* 82182A28h */ case    0:  		/* mr R6, R25 */
		/* 82182A28h case    0:*/		regs.R6 = regs.R25;
		/* 82182A28h case    0:*/		return 0x82182A2C;
		  /* 82182A2Ch */ case    1:  		/* li R5, 0 */
		/* 82182A2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82182A2Ch case    1:*/		return 0x82182A30;
		  /* 82182A30h */ case    2:  		/* mr R4, R16 */
		/* 82182A30h case    2:*/		regs.R4 = regs.R16;
		/* 82182A30h case    2:*/		return 0x82182A34;
		  /* 82182A34h */ case    3:  		/* mr R3, R14 */
		/* 82182A34h case    3:*/		regs.R3 = regs.R14;
		/* 82182A34h case    3:*/		return 0x82182A38;
		  /* 82182A38h */ case    4:  		/* bl 663752 */
		/* 82182A38h case    4:*/		regs.LR = 0x82182A3C; return 0x82224B00;
		/* 82182A38h case    4:*/		return 0x82182A3C;
		  /* 82182A3Ch */ case    5:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 82182A3Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 82182A3Ch case    5:*/		return 0x82182A40;
		  /* 82182A40h */ case    6:  		/* mr R31, R3 */
		/* 82182A40h case    6:*/		regs.R31 = regs.R3;
		/* 82182A40h case    6:*/		return 0x82182A44;
		  /* 82182A44h */ case    7:  		/* addi R10, R10, 36 */
		/* 82182A44h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 82182A44h case    7:*/		return 0x82182A48;
		  /* 82182A48h */ case    8:  		/* cmplwi CR6, R27, 0 */
		/* 82182A48h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82182A48h case    8:*/		return 0x82182A4C;
		  /* 82182A4Ch */ case    9:  		/* addi R7, R10, -36 */
		/* 82182A4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 82182A4Ch case    9:*/		return 0x82182A50;
		  /* 82182A50h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 82182A50h case   10:*/		if ( regs.CR[6].eq ) { return 0x82182A84;  }
		/* 82182A50h case   10:*/		return 0x82182A54;
		  /* 82182A54h */ case   11:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82182A54h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82182A54h case   11:*/		return 0x82182A58;
		  /* 82182A58h */ case   12:  		/* addi R8, R10, 4 */
		/* 82182A58h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82182A58h case   12:*/		return 0x82182A5C;
		  /* 82182A5Ch */ case   13:  		/* addi R11, R11, 36 */
		/* 82182A5Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82182A5Ch case   13:*/		return 0x82182A60;
		  /* 82182A60h */ case   14:  		/* addi R9, R11, 4 */
		/* 82182A60h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82182A60h case   14:*/		return 0x82182A64;
		  /* 82182A64h */ case   15:  		/* lwz R6, <#[R11 + 4]> */
		/* 82182A64h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82182A64h case   15:*/		return 0x82182A68;
		  /* 82182A68h */ case   16:  		/* stw R6, <#[R10 + 4]> */
		/* 82182A68h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82182A68h case   16:*/		return 0x82182A6C;
		  /* 82182A6Ch */ case   17:  		/* lwz R6, <#[R11 + 4]> */
		/* 82182A6Ch case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82182A6Ch case   17:*/		return 0x82182A70;
		  /* 82182A70h */ case   18:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 82182A70h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 82182A70h case   18:*/		return 0x82182A74;
		  /* 82182A74h */ case   19:  		/* stw R8, <#[R6 + 36]> */
		/* 82182A74h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000024) );
		/* 82182A74h case   19:*/		return 0x82182A78;
		  /* 82182A78h */ case   20:  		/* stw R9, <#[R10]> */
		/* 82182A78h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82182A78h case   20:*/		return 0x82182A7C;
		  /* 82182A7Ch */ case   21:  		/* stw R7, <#[R11 + 4]> */
		/* 82182A7Ch case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82182A7Ch case   21:*/		return 0x82182A80;
		  /* 82182A80h */ case   22:  		/* b 48 */
		/* 82182A80h case   22:*/		return 0x82182AB0;
		/* 82182A80h case   22:*/		return 0x82182A84;
	}
	return 0x82182A84;
} // Block from 82182A28h-82182A84h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82182A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182A84);
		  /* 82182A84h */ case    0:  		/* addi R11, R16, 24 */
		/* 82182A84h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0x18);
		/* 82182A84h case    0:*/		return 0x82182A88;
		  /* 82182A88h */ case    1:  		/* addi R9, R10, 4 */
		/* 82182A88h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82182A88h case    1:*/		return 0x82182A8C;
		  /* 82182A8Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 82182A8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82182A8Ch case    2:*/		return 0x82182A90;
		  /* 82182A90h */ case    3:  		/* ori R8, R11, 1 */
		/* 82182A90h case    3:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x1);
		/* 82182A90h case    3:*/		return 0x82182A94;
		  /* 82182A94h */ case    4:  		/* lwz R6, <#[R11]> */
		/* 82182A94h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82182A94h case    4:*/		return 0x82182A98;
		  /* 82182A98h */ case    5:  		/* stw R6, <#[R10 + 4]> */
		/* 82182A98h case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82182A98h case    5:*/		return 0x82182A9C;
		  /* 82182A9Ch */ case    6:  		/* lwz R6, <#[R11]> */
		/* 82182A9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82182A9Ch case    6:*/		return 0x82182AA0;
		  /* 82182AA0h */ case    7:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 82182AA0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 82182AA0h case    7:*/		return 0x82182AA4;
		  /* 82182AA4h */ case    8:  		/* stw R9, <#[R6 + 36]> */
		/* 82182AA4h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000024) );
		/* 82182AA4h case    8:*/		return 0x82182AA8;
		  /* 82182AA8h */ case    9:  		/* stw R8, <#[R10]> */
		/* 82182AA8h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82182AA8h case    9:*/		return 0x82182AAC;
		  /* 82182AACh */ case   10:  		/* stw R7, <#[R11]> */
		/* 82182AACh case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82182AACh case   10:*/		return 0x82182AB0;
	}
	return 0x82182AB0;
} // Block from 82182A84h-82182AB0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82182AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182AB0);
		  /* 82182AB0h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 82182AB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 82182AB0h case    0:*/		return 0x82182AB4;
		  /* 82182AB4h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182AB4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182AB4h case    1:*/		return 0x82182AB8;
		  /* 82182AB8h */ case    2:  		/* bc 4, CR0_EQ, 92 */
		/* 82182AB8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82182B14;  }
		/* 82182AB8h case    2:*/		return 0x82182ABC;
		  /* 82182ABCh */ case    3:  		/* mr R28, R11 */
		/* 82182ABCh case    3:*/		regs.R28 = regs.R11;
		/* 82182ABCh case    3:*/		return 0x82182AC0;
		  /* 82182AC0h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82182AC0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82182AC0h case    4:*/		return 0x82182AC4;
		  /* 82182AC4h */ case    5:  		/* bc 12, CR0_EQ, 80 */
		/* 82182AC4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82182B14;  }
		/* 82182AC4h case    5:*/		return 0x82182AC8;
		  /* 82182AC8h */ case    6:  		/* addi R11, R1, 256 */
		/* 82182AC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x100);
		/* 82182AC8h case    6:*/		return 0x82182ACC;
		  /* 82182ACCh */ case    7:  		/* addi R29, R31, 40 */
		/* 82182ACCh case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x28);
		/* 82182ACCh case    7:*/		return 0x82182AD0;
		  /* 82182AD0h */ case    8:  		/* addi R30, R11, -4 */
		/* 82182AD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 82182AD0h case    8:*/		return 0x82182AD4;
		  /* 82182AD4h */ case    9:  		/* mr R4, R28 */
		/* 82182AD4h case    9:*/		regs.R4 = regs.R28;
		/* 82182AD4h case    9:*/		return 0x82182AD8;
		  /* 82182AD8h */ case   10:  		/* mr R3, R14 */
		/* 82182AD8h case   10:*/		regs.R3 = regs.R14;
		/* 82182AD8h case   10:*/		return 0x82182ADC;
		  /* 82182ADCh */ case   11:  		/* bl 5372 */
		/* 82182ADCh case   11:*/		regs.LR = 0x82182AE0; return 0x82183FD8;
		/* 82182ADCh case   11:*/		return 0x82182AE0;
		  /* 82182AE0h */ case   12:  		/* cmplw CR6, R3, R23 */
		/* 82182AE0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R23);
		/* 82182AE0h case   12:*/		return 0x82182AE4;
		  /* 82182AE4h */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 82182AE4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82182AF8;  }
		/* 82182AE4h case   13:*/		return 0x82182AE8;
		  /* 82182AE8h */ case   14:  		/* mr R3, R31 */
		/* 82182AE8h case   14:*/		regs.R3 = regs.R31;
		/* 82182AE8h case   14:*/		return 0x82182AEC;
		  /* 82182AECh */ case   15:  		/* lwzu R4, <#[R30 + 4]> */
		/* 82182AECh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82182AECh case   15:*/		return 0x82182AF0;
		  /* 82182AF0h */ case   16:  		/* bl -43304 */
		/* 82182AF0h case   16:*/		regs.LR = 0x82182AF4; return 0x821781C8;
		/* 82182AF0h case   16:*/		return 0x82182AF4;
		  /* 82182AF4h */ case   17:  		/* stwu R3, <#[R29 + 4]> */
		/* 82182AF4h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 82182AF4h case   17:*/		return 0x82182AF8;
	}
	return 0x82182AF8;
} // Block from 82182AB0h-82182AF8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82182AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182AF8);
		  /* 82182AF8h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82182AF8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82182AF8h case    0:*/		return 0x82182AFC;
		  /* 82182AFCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82182AFCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82182AFCh case    1:*/		return 0x82182B00;
		  /* 82182B00h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182B00h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182B00h case    2:*/		return 0x82182B04;
		  /* 82182B04h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82182B04h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82182B14;  }
		/* 82182B04h case    3:*/		return 0x82182B08;
		  /* 82182B08h */ case    4:  		/* mr R28, R11 */
		/* 82182B08h case    4:*/		regs.R28 = regs.R11;
		/* 82182B08h case    4:*/		return 0x82182B0C;
		  /* 82182B0Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82182B0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182B0Ch case    5:*/		return 0x82182B10;
		  /* 82182B10h */ case    6:  		/* bc 4, CR6_EQ, -60 */
		/* 82182B10h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82182AD4;  }
		/* 82182B10h case    6:*/		return 0x82182B14;
	}
	return 0x82182B14;
} // Block from 82182AF8h-82182B14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82182B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182B14);
		  /* 82182B14h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82182B14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182B14h case    0:*/		return 0x82182B18;
		  /* 82182B18h */ case    1:  		/* mr R3, R22 */
		/* 82182B18h case    1:*/		regs.R3 = regs.R22;
		/* 82182B18h case    1:*/		return 0x82182B1C;
		  /* 82182B1Ch */ case    2:  		/* oris R11, R11, 128 */
		/* 82182B1Ch case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 82182B1Ch case    2:*/		return 0x82182B20;
		  /* 82182B20h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 82182B20h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182B20h case    3:*/		return 0x82182B24;
		  /* 82182B24h */ case    4:  		/* bl 3524 */
		/* 82182B24h case    4:*/		regs.LR = 0x82182B28; return 0x821838E8;
		/* 82182B24h case    4:*/		return 0x82182B28;
		  /* 82182B28h */ case    5:  		/* sth R3, <#[R31 + 18]> */
		/* 82182B28h case    5:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 82182B28h case    5:*/		return 0x82182B2C;
		  /* 82182B2Ch */ case    6:  		/* lwz R3, <#[R14 + 660]> */
		/* 82182B2Ch case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 82182B2Ch case    6:*/		return 0x82182B30;
		  /* 82182B30h */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 82182B30h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82182B30h case    7:*/		return 0x82182B34;
		  /* 82182B34h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82182B34h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82182B34h case    8:*/		return 0x82182B38;
		  /* 82182B38h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 82182B38h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82182B60;  }
		/* 82182B38h case    9:*/		return 0x82182B3C;
		  /* 82182B3Ch */ case   10:  		/* lwz R11, <#[R3]> */
		/* 82182B3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82182B3Ch case   10:*/		return 0x82182B40;
		  /* 82182B40h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182B40h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182B40h case   11:*/		return 0x82182B44;
		  /* 82182B44h */ case   12:  		/* addic. R11, R11, -4 */
		/* 82182B44h case   12:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82182B44h case   12:*/		return 0x82182B48;
		  /* 82182B48h */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 82182B48h case   13:*/		if ( regs.CR[0].eq ) { return 0x82182B60;  }
		/* 82182B48h case   13:*/		return 0x82182B4C;
		  /* 82182B4Ch */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 82182B4Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182B4Ch case   14:*/		return 0x82182B50;
		  /* 82182B50h */ case   15:  		/* lwz R9, <#[R11 + 12]> */
		/* 82182B50h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82182B50h case   15:*/		return 0x82182B54;
		  /* 82182B54h */ case   16:  		/* addi R10, R10, 1 */
		/* 82182B54h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82182B54h case   16:*/		return 0x82182B58;
		  /* 82182B58h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 82182B58h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82182B58h case   17:*/		return 0x82182B5C;
		  /* 82182B5Ch */ case   18:  		/* bc 4, CR6_GT, 16 */
		/* 82182B5Ch case   18:*/		if ( !regs.CR[6].gt ) { return 0x82182B6C;  }
		/* 82182B5Ch case   18:*/		return 0x82182B60;
	}
	return 0x82182B60;
} // Block from 82182B14h-82182B60h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82182B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182B60);
		  /* 82182B60h */ case    0:  		/* li R4, 1 */
		/* 82182B60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82182B60h case    0:*/		return 0x82182B64;
		  /* 82182B64h */ case    1:  		/* bl 42340 */
		/* 82182B64h case    1:*/		regs.LR = 0x82182B68; return 0x8218D0C8;
		/* 82182B64h case    1:*/		return 0x82182B68;
		  /* 82182B68h */ case    2:  		/* mr R11, R3 */
		/* 82182B68h case    2:*/		regs.R11 = regs.R3;
		/* 82182B68h case    2:*/		return 0x82182B6C;
	}
	return 0x82182B6C;
} // Block from 82182B60h-82182B6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82182B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182B6C);
		  /* 82182B6Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82182B6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182B6Ch case    0:*/		return 0x82182B70;
		  /* 82182B70h */ case    1:  		/* lwz R9, <#[R1 + 116]> */
		/* 82182B70h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 82182B70h case    1:*/		return 0x82182B74;
		  /* 82182B74h */ case    2:  		/* addi R8, R10, 4 */
		/* 82182B74h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82182B74h case    2:*/		return 0x82182B78;
		  /* 82182B78h */ case    3:  		/* stw R31, <#[R1 + 116]> */
		/* 82182B78h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 82182B78h case    3:*/		return 0x82182B7C;
		  /* 82182B7Ch */ case    4:  		/* addi R7, R10, 1 */
		/* 82182B7Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82182B7Ch case    4:*/		return 0x82182B80;
		  /* 82182B80h */ case    5:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82182B80h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82182B80h case    5:*/		return 0x82182B84;
		  /* 82182B84h */ case    6:  		/* stw R7, <#[R11 + 8]> */
		/* 82182B84h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82182B84h case    6:*/		return 0x82182B88;
		  /* 82182B88h */ case    7:  		/* stwx R31, <#[R10 + R11]> */
		/* 82182B88h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82182B88h case    7:*/		return 0x82182B8C;
		  /* 82182B8Ch */ case    8:  		/* stw R9, <#[R31 + 32]> */
		/* 82182B8Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82182B8Ch case    8:*/		return 0x82182B90;
	}
	return 0x82182B90;
} // Block from 82182B6Ch-82182B90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82182B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182B90);
		  /* 82182B90h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 82182B90h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82182B90h case    0:*/		return 0x82182B94;
		  /* 82182B94h */ case    1:  		/* li R5, 0 */
		/* 82182B94h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82182B94h case    1:*/		return 0x82182B98;
		  /* 82182B98h */ case    2:  		/* addi R11, R31, 44 */
		/* 82182B98h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x2C);
		/* 82182B98h case    2:*/		return 0x82182B9C;
		  /* 82182B9Ch */ case    3:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 82182B9Ch case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 82182B9Ch case    3:*/		return 0x82182BA0;
		  /* 82182BA0h */ case    4:  		/* cmplw CR6, R5, R10 */
		/* 82182BA0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 82182BA0h case    4:*/		return 0x82182BA4;
		  /* 82182BA4h */ case    5:  		/* bc 4, CR6_LT, 48 */
		/* 82182BA4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82182BD4;  }
		/* 82182BA4h case    5:*/		return 0x82182BA8;
		  /* 82182BA8h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 82182BA8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82182BA8h case    6:*/		return 0x82182BAC;
		  /* 82182BACh */ case    7:  		/* lwz R9, <#[R9 + 12]> */
		/* 82182BACh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 82182BACh case    7:*/		return 0x82182BB0;
		  /* 82182BB0h */ case    8:  		/* cmplw CR6, R9, R22 */
		/* 82182BB0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 82182BB0h case    8:*/		return 0x82182BB4;
		  /* 82182BB4h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82182BB4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82182BC4;  }
		/* 82182BB4h case    9:*/		return 0x82182BB8;
		  /* 82182BB8h */ case   10:  		/* addi R5, R5, 1 */
		/* 82182BB8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 82182BB8h case   10:*/		return 0x82182BBC;
		  /* 82182BBCh */ case   11:  		/* addi R11, R11, 4 */
		/* 82182BBCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82182BBCh case   11:*/		return 0x82182BC0;
		  /* 82182BC0h */ case   12:  		/* b -32 */
		/* 82182BC0h case   12:*/		return 0x82182BA0;
		/* 82182BC0h case   12:*/		return 0x82182BC4;
	}
	return 0x82182BC4;
} // Block from 82182B90h-82182BC4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82182BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182BC4);
		  /* 82182BC4h */ case    0:  		/* mr R4, R31 */
		/* 82182BC4h case    0:*/		regs.R4 = regs.R31;
		/* 82182BC4h case    0:*/		return 0x82182BC8;
		  /* 82182BC8h */ case    1:  		/* mr R3, R14 */
		/* 82182BC8h case    1:*/		regs.R3 = regs.R14;
		/* 82182BC8h case    1:*/		return 0x82182BCC;
		  /* 82182BCCh */ case    2:  		/* bl -43708 */
		/* 82182BCCh case    2:*/		regs.LR = 0x82182BD0; return 0x82178110;
		/* 82182BCCh case    2:*/		return 0x82182BD0;
		  /* 82182BD0h */ case    3:  		/* stw R3, <#[R21]> */
		/* 82182BD0h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R21 + 0x00000000) );
		/* 82182BD0h case    3:*/		return 0x82182BD4;
	}
	return 0x82182BD4;
} // Block from 82182BC4h-82182BD4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82182BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182BD4);
		  /* 82182BD4h */ case    0:  		/* mr R4, R31 */
		/* 82182BD4h case    0:*/		regs.R4 = regs.R31;
		/* 82182BD4h case    0:*/		return 0x82182BD8;
		  /* 82182BD8h */ case    1:  		/* mr R3, R14 */
		/* 82182BD8h case    1:*/		regs.R3 = regs.R14;
		/* 82182BD8h case    1:*/		return 0x82182BDC;
		  /* 82182BDCh */ case    2:  		/* bl 210956 */
		/* 82182BDCh case    2:*/		regs.LR = 0x82182BE0; return 0x821B63E8;
		/* 82182BDCh case    2:*/		return 0x82182BE0;
		  /* 82182BE0h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 82182BE0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182BE0h case    3:*/		return 0x82182BE4;
		  /* 82182BE4h */ case    4:  		/* oris R11, R11, 256 */
		/* 82182BE4h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82182BE4h case    4:*/		return 0x82182BE8;
		  /* 82182BE8h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 82182BE8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82182BE8h case    5:*/		return 0x82182BEC;
	}
	return 0x82182BEC;
} // Block from 82182BD4h-82182BECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82182BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182BEC);
		  /* 82182BECh */ case    0:  		/* addi R20, R20, 1 */
		/* 82182BECh case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 82182BECh case    0:*/		return 0x82182BF0;
		  /* 82182BF0h */ case    1:  		/* addi R21, R21, 4 */
		/* 82182BF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 82182BF0h case    1:*/		return 0x82182BF4;
		  /* 82182BF4h */ case    2:  		/* cmplw CR6, R20, R15 */
		/* 82182BF4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R15);
		/* 82182BF4h case    2:*/		return 0x82182BF8;
		  /* 82182BF8h */ case    3:  		/* bc 12, CR6_LT, -1176 */
		/* 82182BF8h case    3:*/		if ( regs.CR[6].lt ) { return 0x82182760;  }
		/* 82182BF8h case    3:*/		return 0x82182BFC;
	}
	return 0x82182BFC;
} // Block from 82182BECh-82182BFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82182BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182BFC);
		  /* 82182BFCh */ case    0:  		/* li R21, 0 */
		/* 82182BFCh case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82182BFCh case    0:*/		return 0x82182C00;
		  /* 82182C00h */ case    1:  		/* lwz R23, <#[R1 + 152]> */
		/* 82182C00h case    1:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000098) );
		/* 82182C00h case    1:*/		return 0x82182C04;
		  /* 82182C04h */ case    2:  		/* cmplwi CR6, R15, 0 */
		/* 82182C04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82182C04h case    2:*/		return 0x82182C08;
		  /* 82182C08h */ case    3:  		/* mr R29, R21 */
		/* 82182C08h case    3:*/		regs.R29 = regs.R21;
		/* 82182C08h case    3:*/		return 0x82182C0C;
		  /* 82182C0Ch */ case    4:  		/* mr R27, R21 */
		/* 82182C0Ch case    4:*/		regs.R27 = regs.R21;
		/* 82182C0Ch case    4:*/		return 0x82182C10;
		  /* 82182C10h */ case    5:  		/* mr R28, R21 */
		/* 82182C10h case    5:*/		regs.R28 = regs.R21;
		/* 82182C10h case    5:*/		return 0x82182C14;
		  /* 82182C14h */ case    6:  		/* bc 12, CR6_EQ, 584 */
		/* 82182C14h case    6:*/		if ( regs.CR[6].eq ) { return 0x82182E5C;  }
		/* 82182C14h case    6:*/		return 0x82182C18;
		  /* 82182C18h */ case    7:  		/* lwz R22, <#[R1 + 132]> */
		/* 82182C18h case    7:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000084) );
		/* 82182C18h case    7:*/		return 0x82182C1C;
		  /* 82182C1Ch */ case    8:  		/* addi R26, R1, 176 */
		/* 82182C1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xB0);
		/* 82182C1Ch case    8:*/		return 0x82182C20;
		  /* 82182C20h */ case    9:  		/* li R24, 3 */
		/* 82182C20h case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x3);
		/* 82182C20h case    9:*/		return 0x82182C24;
		  /* 82182C24h */ case   10:  		/* li R25, 1 */
		/* 82182C24h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82182C24h case   10:*/		return 0x82182C28;
		  /* 82182C28h */ case   11:  		/* lwz R10, <#[R26]> */
		/* 82182C28h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82182C28h case   11:*/		return 0x82182C2C;
		  /* 82182C2Ch */ case   12:  		/* mr R11, R21 */
		/* 82182C2Ch case   12:*/		regs.R11 = regs.R21;
		/* 82182C2Ch case   12:*/		return 0x82182C30;
		  /* 82182C30h */ case   13:  		/* cmplwi CR6, R28, 0 */
		/* 82182C30h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82182C30h case   13:*/		return 0x82182C34;
		  /* 82182C34h */ case   14:  		/* lwz R30, <#[R10 + 12]> */
		/* 82182C34h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x0000000C) );
		/* 82182C34h case   14:*/		return 0x82182C38;
		  /* 82182C38h */ case   15:  		/* bc 12, CR6_EQ, 40 */
		/* 82182C38h case   15:*/		if ( regs.CR[6].eq ) { return 0x82182C60;  }
		/* 82182C38h case   15:*/		return 0x82182C3C;
		  /* 82182C3Ch */ case   16:  		/* addi R10, R1, 176 */
		/* 82182C3Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82182C3Ch case   16:*/		return 0x82182C40;
		  /* 82182C40h */ case   17:  		/* lwz R9, <#[R10]> */
		/* 82182C40h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82182C40h case   17:*/		return 0x82182C44;
		  /* 82182C44h */ case   18:  		/* lwz R9, <#[R9 + 12]> */
		/* 82182C44h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 82182C44h case   18:*/		return 0x82182C48;
		  /* 82182C48h */ case   19:  		/* cmplw CR6, R9, R30 */
		/* 82182C48h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 82182C48h case   19:*/		return 0x82182C4C;
		  /* 82182C4Ch */ case   20:  		/* bc 12, CR6_EQ, 20 */
		/* 82182C4Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x82182C60;  }
		/* 82182C4Ch case   20:*/		return 0x82182C50;
		  /* 82182C50h */ case   21:  		/* addi R11, R11, 1 */
		/* 82182C50h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82182C50h case   21:*/		return 0x82182C54;
		  /* 82182C54h */ case   22:  		/* addi R10, R10, 4 */
		/* 82182C54h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82182C54h case   22:*/		return 0x82182C58;
		  /* 82182C58h */ case   23:  		/* cmplw CR6, R11, R28 */
		/* 82182C58h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82182C58h case   23:*/		return 0x82182C5C;
		  /* 82182C5Ch */ case   24:  		/* bc 12, CR6_LT, -28 */
		/* 82182C5Ch case   24:*/		if ( regs.CR[6].lt ) { return 0x82182C40;  }
		/* 82182C5Ch case   24:*/		return 0x82182C60;
	}
	return 0x82182C60;
} // Block from 82182BFCh-82182C60h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82182C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182C60);
		  /* 82182C60h */ case    0:  		/* cmplw CR6, R11, R28 */
		/* 82182C60h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82182C60h case    0:*/		return 0x82182C64;
		  /* 82182C64h */ case    1:  		/* bc 4, CR6_EQ, 488 */
		/* 82182C64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82182E4C;  }
		/* 82182C64h case    1:*/		return 0x82182C68;
		  /* 82182C68h */ case    2:  		/* lbz R11, <#[R1 + 97]> */
		/* 82182C68h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000061) );
		/* 82182C68h case    2:*/		return 0x82182C6C;
		  /* 82182C6Ch */ case    3:  		/* mtspr CTR, R15 */
		/* 82182C6Ch case    3:*/		regs.CTR = regs.R15;
		/* 82182C6Ch case    3:*/		return 0x82182C70;
		  /* 82182C70h */ case    4:  		/* lwz R10, <#[R1 + 208]> */
		/* 82182C70h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000D0) );
		/* 82182C70h case    4:*/		return 0x82182C74;
		  /* 82182C74h */ case    5:  		/* mr R31, R21 */
		/* 82182C74h case    5:*/		regs.R31 = regs.R21;
		/* 82182C74h case    5:*/		return 0x82182C78;
		  /* 82182C78h */ case    6:  		/* stw R30, <#[R1 + 196]> */
		/* 82182C78h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000C4) );
		/* 82182C78h case    6:*/		return 0x82182C7C;
		  /* 82182C7Ch */ case    7:  		/* mr R9, R21 */
		/* 82182C7Ch case    7:*/		regs.R9 = regs.R21;
		/* 82182C7Ch case    7:*/		return 0x82182C80;
		  /* 82182C80h */ case    8:  		/* rlwimi R10, R11, 3, 28, 28 */
		/* 82182C80h case    8:*/		cpu::op::rlwimi<0,3,28,28>(regs,&regs.R10,regs.R11);
		/* 82182C80h case    8:*/		return 0x82182C84;
		  /* 82182C84h */ case    9:  		/* stw R23, <#[R1 + 192]> */
		/* 82182C84h case    9:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x000000C0) );
		/* 82182C84h case    9:*/		return 0x82182C88;
		  /* 82182C88h */ case   10:  		/* stw R21, <#[R1 + 200]> */
		/* 82182C88h case   10:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000C8) );
		/* 82182C88h case   10:*/		return 0x82182C8C;
		  /* 82182C8Ch */ case   11:  		/* mr R11, R10 */
		/* 82182C8Ch case   11:*/		regs.R11 = regs.R10;
		/* 82182C8Ch case   11:*/		return 0x82182C90;
		  /* 82182C90h */ case   12:  		/* stw R21, <#[R1 + 204]> */
		/* 82182C90h case   12:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000CC) );
		/* 82182C90h case   12:*/		return 0x82182C94;
		  /* 82182C94h */ case   13:  		/* mr R10, R21 */
		/* 82182C94h case   13:*/		regs.R10 = regs.R21;
		/* 82182C94h case   13:*/		return 0x82182C98;
		  /* 82182C98h */ case   14:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 82182C98h case   14:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 82182C98h case   14:*/		return 0x82182C9C;
		  /* 82182C9Ch */ case   15:  		/* stw R11, <#[R1 + 208]> */
		/* 82182C9Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 82182C9Ch case   15:*/		return 0x82182CA0;
		  /* 82182CA0h */ case   16:  		/* addi R8, R1, 176 */
		/* 82182CA0h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 82182CA0h case   16:*/		return 0x82182CA4;
		  /* 82182CA4h */ case   17:  		/* lwz R7, <#[R1 + 196]> */
		/* 82182CA4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C4) );
		/* 82182CA4h case   17:*/		return 0x82182CA8;
		  /* 82182CA8h */ case   18:  		/* lwzx R8, <#[R10 + R8]> */
		/* 82182CA8h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82182CA8h case   18:*/		return 0x82182CAC;
		  /* 82182CACh */ case   19:  		/* lwz R6, <#[R8 + 12]> */
		/* 82182CACh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x0000000C) );
		/* 82182CACh case   19:*/		return 0x82182CB0;
		  /* 82182CB0h */ case   20:  		/* cmplw CR6, R6, R7 */
		/* 82182CB0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 82182CB0h case   20:*/		return 0x82182CB4;
		  /* 82182CB4h */ case   21:  		/* bc 4, CR6_EQ, 136 */
		/* 82182CB4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82182D3C;  }
		/* 82182CB4h case   21:*/		return 0x82182CB8;
		  /* 82182CB8h */ case   22:  		/* lwz R7, <#[R1 + 148]> */
		/* 82182CB8h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 82182CB8h case   22:*/		return 0x82182CBC;
		  /* 82182CBCh */ case   23:  		/* rlwinm R6, R11, 1, 28, 30 */
		/* 82182CBCh case   23:*/		cpu::op::rlwinm<0,1,28,30>(regs,&regs.R6,regs.R11);
		/* 82182CBCh case   23:*/		return 0x82182CC0;
		  /* 82182CC0h */ case   24:  		/* lwz R4, <#[R1 + 200]> */
		/* 82182CC0h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C8) );
		/* 82182CC0h case   24:*/		return 0x82182CC4;
		  /* 82182CC4h */ case   25:  		/* rlwinm R5, R11, 1, 28, 30 */
		/* 82182CC4h case   25:*/		cpu::op::rlwinm<0,1,28,30>(regs,&regs.R5,regs.R11);
		/* 82182CC4h case   25:*/		return 0x82182CC8;
		  /* 82182CC8h */ case   26:  		/* srw R7, R7, R9 */
		/* 82182CC8h case   26:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 82182CC8h case   26:*/		return 0x82182CCC;
		  /* 82182CCCh */ case   27:  		/* lwz R8, <#[R8]> */
		/* 82182CCCh case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 82182CCCh case   27:*/		return 0x82182CD0;
		  /* 82182CD0h */ case   28:  		/* slw R20, R24, R6 */
		/* 82182CD0h case   28:*/		cpu::op::slw<0>(regs,&regs.R20,regs.R24,regs.R6);
		/* 82182CD0h case   28:*/		return 0x82182CD4;
		  /* 82182CD4h */ case   29:  		/* lwz R3, <#[R1 + 204]> */
		/* 82182CD4h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000CC) );
		/* 82182CD4h case   29:*/		return 0x82182CD8;
		  /* 82182CD8h */ case   30:  		/* rlwinm R7, R7, 0, 30, 31 */
		/* 82182CD8h case   30:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R7);
		/* 82182CD8h case   30:*/		return 0x82182CDC;
		  /* 82182CDCh */ case   31:  		/* andc R4, R4, R20 */
		/* 82182CDCh case   31:*/		cpu::op::andc<0>(regs,&regs.R4,regs.R4,regs.R20);
		/* 82182CDCh case   31:*/		return 0x82182CE0;
		  /* 82182CE0h */ case   32:  		/* slw R6, R7, R6 */
		/* 82182CE0h case   32:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R7,regs.R6);
		/* 82182CE0h case   32:*/		return 0x82182CE4;
		  /* 82182CE4h */ case   33:  		/* addi R18, R1, 240 */
		/* 82182CE4h case   33:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R1,0xF0);
		/* 82182CE4h case   33:*/		return 0x82182CE8;
		  /* 82182CE8h */ case   34:  		/* rlwinm R8, R8, 27, 30, 31 */
		/* 82182CE8h case   34:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R8,regs.R8);
		/* 82182CE8h case   34:*/		return 0x82182CEC;
		  /* 82182CECh */ case   35:  		/* slw R19, R24, R5 */
		/* 82182CECh case   35:*/		cpu::op::slw<0>(regs,&regs.R19,regs.R24,regs.R5);
		/* 82182CECh case   35:*/		return 0x82182CF0;
		  /* 82182CF0h */ case   36:  		/* or R6, R4, R6 */
		/* 82182CF0h case   36:*/		cpu::op::or<0>(regs,&regs.R6,regs.R4,regs.R6);
		/* 82182CF0h case   36:*/		return 0x82182CF4;
		  /* 82182CF4h */ case   37:  		/* lwzx R20, <#[R10 + R18]> */
		/* 82182CF4h case   37:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R10 + regs.R18 + 0x00000000) );
		/* 82182CF4h case   37:*/		return 0x82182CF8;
		  /* 82182CF8h */ case   38:  		/* slw R5, R8, R5 */
		/* 82182CF8h case   38:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R8,regs.R5);
		/* 82182CF8h case   38:*/		return 0x82182CFC;
		  /* 82182CFCh */ case   39:  		/* stw R6, <#[R1 + 200]> */
		/* 82182CFCh case   39:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000C8) );
		/* 82182CFCh case   39:*/		return 0x82182D00;
		  /* 82182D00h */ case   40:  		/* andc R3, R3, R19 */
		/* 82182D00h case   40:*/		cpu::op::andc<0>(regs,&regs.R3,regs.R3,regs.R19);
		/* 82182D00h case   40:*/		return 0x82182D04;
		  /* 82182D04h */ case   41:  		/* rlwinm R11, R11, 2, 27, 29 */
		/* 82182D04h case   41:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R11,regs.R11);
		/* 82182D04h case   41:*/		return 0x82182D08;
		  /* 82182D08h */ case   42:  		/* addi R6, R1, 212 */
		/* 82182D08h case   42:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD4);
		/* 82182D08h case   42:*/		return 0x82182D0C;
		  /* 82182D0Ch */ case   43:  		/* or R5, R3, R5 */
		/* 82182D0Ch case   43:*/		cpu::op::or<0>(regs,&regs.R5,regs.R3,regs.R5);
		/* 82182D0Ch case   43:*/		return 0x82182D10;
		  /* 82182D10h */ case   44:  		/* slw R8, R25, R8 */
		/* 82182D10h case   44:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R25,regs.R8);
		/* 82182D10h case   44:*/		return 0x82182D14;
		  /* 82182D14h */ case   45:  		/* stw R5, <#[R1 + 204]> */
		/* 82182D14h case   45:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000000CC) );
		/* 82182D14h case   45:*/		return 0x82182D18;
		  /* 82182D18h */ case   46:  		/* or R31, R8, R31 */
		/* 82182D18h case   46:*/		cpu::op::or<0>(regs,&regs.R31,regs.R8,regs.R31);
		/* 82182D18h case   46:*/		return 0x82182D1C;
		  /* 82182D1Ch */ case   47:  		/* stwx R20, <#[R11 + R6]> */
		/* 82182D1Ch case   47:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82182D1Ch case   47:*/		return 0x82182D20;
		  /* 82182D20h */ case   48:  		/* slw R7, R25, R7 */
		/* 82182D20h case   48:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R25,regs.R7);
		/* 82182D20h case   48:*/		return 0x82182D24;
		  /* 82182D24h */ case   49:  		/* or R29, R7, R29 */
		/* 82182D24h case   49:*/		cpu::op::or<0>(regs,&regs.R29,regs.R7,regs.R29);
		/* 82182D24h case   49:*/		return 0x82182D28;
		  /* 82182D28h */ case   50:  		/* lwz R11, <#[R1 + 208]> */
		/* 82182D28h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 82182D28h case   50:*/		return 0x82182D2C;
		  /* 82182D2Ch */ case   51:  		/* addi R8, R11, 1 */
		/* 82182D2Ch case   51:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 82182D2Ch case   51:*/		return 0x82182D30;
		  /* 82182D30h */ case   52:  		/* rlwimi R8, R11, 0, 0, 28 */
		/* 82182D30h case   52:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R8,regs.R11);
		/* 82182D30h case   52:*/		return 0x82182D34;
		  /* 82182D34h */ case   53:  		/* mr R11, R8 */
		/* 82182D34h case   53:*/		regs.R11 = regs.R8;
		/* 82182D34h case   53:*/		return 0x82182D38;
		  /* 82182D38h */ case   54:  		/* stw R8, <#[R1 + 208]> */
		/* 82182D38h case   54:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000D0) );
		/* 82182D38h case   54:*/		return 0x82182D3C;
	}
	return 0x82182D3C;
} // Block from 82182C60h-82182D3Ch (55 instructions)

//////////////////////////////////////////////////////
// Block at 82182D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182D3C);
		  /* 82182D3Ch */ case    0:  		/* addi R9, R9, 2 */
		/* 82182D3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82182D3Ch case    0:*/		return 0x82182D40;
		  /* 82182D40h */ case    1:  		/* addi R10, R10, 4 */
		/* 82182D40h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82182D40h case    1:*/		return 0x82182D44;
		  /* 82182D44h */ case    2:  		/* bc 16, CR0_LT, -164 */
		/* 82182D44h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82182CA0;  }
		/* 82182D44h case    2:*/		return 0x82182D48;
		  /* 82182D48h */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82182D48h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82182D48h case    3:*/		return 0x82182D4C;
		  /* 82182D4Ch */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82182D4Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82182D4Ch case    4:*/		return 0x82182D50;
		  /* 82182D50h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 82182D50h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82182D74;  }
		/* 82182D50h case    5:*/		return 0x82182D54;
		  /* 82182D54h */ case    6:  		/* addi R5, R1, 200 */
		/* 82182D54h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC8);
		/* 82182D54h case    6:*/		return 0x82182D58;
		  /* 82182D58h */ case    7:  		/* addi R4, R1, 192 */
		/* 82182D58h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82182D58h case    7:*/		return 0x82182D5C;
		  /* 82182D5Ch */ case    8:  		/* mr R3, R14 */
		/* 82182D5Ch case    8:*/		regs.R3 = regs.R14;
		/* 82182D5Ch case    8:*/		return 0x82182D60;
		  /* 82182D60h */ case    9:  		/* bl -45544 */
		/* 82182D60h case    9:*/		regs.LR = 0x82182D64; return 0x82177B78;
		/* 82182D60h case    9:*/		return 0x82182D64;
		  /* 82182D64h */ case   10:  		/* addi R5, R1, 204 */
		/* 82182D64h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xCC);
		/* 82182D64h case   10:*/		return 0x82182D68;
		  /* 82182D68h */ case   11:  		/* addi R4, R1, 196 */
		/* 82182D68h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC4);
		/* 82182D68h case   11:*/		return 0x82182D6C;
		  /* 82182D6Ch */ case   12:  		/* mr R3, R14 */
		/* 82182D6Ch case   12:*/		regs.R3 = regs.R14;
		/* 82182D6Ch case   12:*/		return 0x82182D70;
		  /* 82182D70h */ case   13:  		/* bl -45560 */
		/* 82182D70h case   13:*/		regs.LR = 0x82182D74; return 0x82177B78;
		/* 82182D70h case   13:*/		return 0x82182D74;
	}
	return 0x82182D74;
} // Block from 82182D3Ch-82182D74h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82182D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182D74);
		  /* 82182D74h */ case    0:  		/* lwz R10, <#[R22 + 4]> */
		/* 82182D74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000004) );
		/* 82182D74h case    0:*/		return 0x82182D78;
		  /* 82182D78h */ case    1:  		/* addi R11, R22, 4 */
		/* 82182D78h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0x4);
		/* 82182D78h case    1:*/		return 0x82182D7C;
		  /* 82182D7Ch */ case    2:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82182D7Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82182D7Ch case    2:*/		return 0x82182D80;
		  /* 82182D80h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 82182D80h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82182DA8;  }
		/* 82182D80h case    3:*/		return 0x82182D84;
		  /* 82182D84h */ case    4:  		/* lwz R11, <#[R22]> */
		/* 82182D84h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82182D84h case    4:*/		return 0x82182D88;
		  /* 82182D88h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182D88h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182D88h case    5:*/		return 0x82182D8C;
		  /* 82182D8Ch */ case    6:  		/* addic. R11, R11, -4 */
		/* 82182D8Ch case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82182D8Ch case    6:*/		return 0x82182D90;
		  /* 82182D90h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 82182D90h case    7:*/		if ( regs.CR[0].eq ) { return 0x82182DA8;  }
		/* 82182D90h case    7:*/		return 0x82182D94;
		  /* 82182D94h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 82182D94h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182D94h case    8:*/		return 0x82182D98;
		  /* 82182D98h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 82182D98h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82182D98h case    9:*/		return 0x82182D9C;
		  /* 82182D9Ch */ case   10:  		/* addi R10, R10, 1 */
		/* 82182D9Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82182D9Ch case   10:*/		return 0x82182DA0;
		  /* 82182DA0h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 82182DA0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82182DA0h case   11:*/		return 0x82182DA4;
		  /* 82182DA4h */ case   12:  		/* bc 4, CR6_GT, 20 */
		/* 82182DA4h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82182DB8;  }
		/* 82182DA4h case   12:*/		return 0x82182DA8;
	}
	return 0x82182DA8;
} // Block from 82182D74h-82182DA8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82182DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182DA8);
		  /* 82182DA8h */ case    0:  		/* li R4, 1 */
		/* 82182DA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82182DA8h case    0:*/		return 0x82182DAC;
		  /* 82182DACh */ case    1:  		/* mr R3, R22 */
		/* 82182DACh case    1:*/		regs.R3 = regs.R22;
		/* 82182DACh case    1:*/		return 0x82182DB0;
		  /* 82182DB0h */ case    2:  		/* bl -25944 */
		/* 82182DB0h case    2:*/		regs.LR = 0x82182DB4; return 0x8217C858;
		/* 82182DB0h case    2:*/		return 0x82182DB4;
		  /* 82182DB4h */ case    3:  		/* mr R11, R3 */
		/* 82182DB4h case    3:*/		regs.R11 = regs.R3;
		/* 82182DB4h case    3:*/		return 0x82182DB8;
	}
	return 0x82182DB8;
} // Block from 82182DA8h-82182DB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82182DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182DB8);
		  /* 82182DB8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82182DB8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182DB8h case    0:*/		return 0x82182DBC;
		  /* 82182DBCh */ case    1:  		/* addi R4, R1, 192 */
		/* 82182DBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82182DBCh case    1:*/		return 0x82182DC0;
		  /* 82182DC0h */ case    2:  		/* li R5, 36 */
		/* 82182DC0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x24);
		/* 82182DC0h case    2:*/		return 0x82182DC4;
		  /* 82182DC4h */ case    3:  		/* mulli R9, R10, 36 */
		/* 82182DC4h case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0x24);
		/* 82182DC4h case    3:*/		return 0x82182DC8;
		  /* 82182DC8h */ case    4:  		/* add R9, R9, R11 */
		/* 82182DC8h case    4:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82182DC8h case    4:*/		return 0x82182DCC;
		  /* 82182DCCh */ case    5:  		/* addi R10, R10, 1 */
		/* 82182DCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82182DCCh case    5:*/		return 0x82182DD0;
		  /* 82182DD0h */ case    6:  		/* addi R3, R9, 16 */
		/* 82182DD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R9,0x10);
		/* 82182DD0h case    6:*/		return 0x82182DD4;
		  /* 82182DD4h */ case    7:  		/* stw R10, <#[R11 + 8]> */
		/* 82182DD4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182DD4h case    7:*/		return 0x82182DD8;
		  /* 82182DD8h */ case    8:  		/* bl -988200 */
		/* 82182DD8h case    8:*/		regs.LR = 0x82182DDC; return 0x820919B0;
		/* 82182DD8h case    8:*/		return 0x82182DDC;
		  /* 82182DDCh */ case    9:  		/* lwz R11, <#[R30 + 8]> */
		/* 82182DDCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82182DDCh case    9:*/		return 0x82182DE0;
		  /* 82182DE0h */ case   10:  		/* addi R27, R27, 1 */
		/* 82182DE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82182DE0h case   10:*/		return 0x82182DE4;
		  /* 82182DE4h */ case   11:  		/* rlwinm R10, R11, 31, 28, 31 */
		/* 82182DE4h case   11:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R10,regs.R11);
		/* 82182DE4h case   11:*/		return 0x82182DE8;
		  /* 82182DE8h */ case   12:  		/* cmplw CR6, R31, R10 */
		/* 82182DE8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 82182DE8h case   12:*/		return 0x82182DEC;
		  /* 82182DECh */ case   13:  		/* bc 4, CR6_EQ, 96 */
		/* 82182DECh case   13:*/		if ( !regs.CR[6].eq ) { return 0x82182E4C;  }
		/* 82182DECh case   13:*/		return 0x82182DF0;
		  /* 82182DF0h */ case   14:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82182DF0h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82182DF0h case   14:*/		return 0x82182DF4;
		  /* 82182DF4h */ case   15:  		/* cmplwi CR6, R11, 384 */
		/* 82182DF4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 82182DF4h case   15:*/		return 0x82182DF8;
		  /* 82182DF8h */ case   16:  		/* bc 4, CR6_EQ, 84 */
		/* 82182DF8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82182E4C;  }
		/* 82182DF8h case   16:*/		return 0x82182DFC;
		  /* 82182DFCh */ case   17:  		/* lwz R4, <#[R30 + 48]> */
		/* 82182DFCh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000030) );
		/* 82182DFCh case   17:*/		return 0x82182E00;
		  /* 82182E00h */ case   18:  		/* lwz R3, <#[R30 + 44]> */
		/* 82182E00h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 82182E00h case   18:*/		return 0x82182E04;
		  /* 82182E04h */ case   19:  		/* bl -125820 */
		/* 82182E04h case   19:*/		regs.LR = 0x82182E08; return 0x82164288;
		/* 82182E04h case   19:*/		return 0x82182E08;
		  /* 82182E08h */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182E08h case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182E08h case   20:*/		return 0x82182E0C;
		  /* 82182E0Ch */ case   21:  		/* bc 12, CR0_EQ, 64 */
		/* 82182E0Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x82182E4C;  }
		/* 82182E0Ch case   21:*/		return 0x82182E10;
		  /* 82182E10h */ case   22:  		/* lwz R10, <#[R30 + 4]> */
		/* 82182E10h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82182E10h case   22:*/		return 0x82182E14;
		  /* 82182E14h */ case   23:  		/* cmplwi CR6, R10, 0 */
		/* 82182E14h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82182E14h case   23:*/		return 0x82182E18;
		  /* 82182E18h */ case   24:  		/* bc 12, CR6_EQ, 40 */
		/* 82182E18h case   24:*/		if ( regs.CR[6].eq ) { return 0x82182E40;  }
		/* 82182E18h case   24:*/		return 0x82182E1C;
		  /* 82182E1Ch */ case   25:  		/* lwz R11, <#[R10 + 16]> */
		/* 82182E1Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82182E1Ch case   25:*/		return 0x82182E20;
		  /* 82182E20h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 82182E20h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182E20h case   26:*/		return 0x82182E24;
		  /* 82182E24h */ case   27:  		/* bc 12, CR6_EQ, 20 */
		/* 82182E24h case   27:*/		if ( regs.CR[6].eq ) { return 0x82182E38;  }
		/* 82182E24h case   27:*/		return 0x82182E28;
		  /* 82182E28h */ case   28:  		/* lwz R11, <#[R11 + 28]> */
		/* 82182E28h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82182E28h case   28:*/		return 0x82182E2C;
		  /* 82182E2Ch */ case   29:  		/* lwz R9, <#[R1 + 120]> */
		/* 82182E2Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 82182E2Ch case   29:*/		return 0x82182E30;
		  /* 82182E30h */ case   30:  		/* cmplw CR6, R11, R9 */
		/* 82182E30h case   30:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82182E30h case   30:*/		return 0x82182E34;
		  /* 82182E34h */ case   31:  		/* bc 4, CR6_EQ, 24 */
		/* 82182E34h case   31:*/		if ( !regs.CR[6].eq ) { return 0x82182E4C;  }
		/* 82182E34h case   31:*/		return 0x82182E38;
	}
	return 0x82182E38;
} // Block from 82182DB8h-82182E38h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82182E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182E38);
		  /* 82182E38h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 82182E38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82182E38h case    0:*/		return 0x82182E3C;
		  /* 82182E3Ch */ case    1:  		/* b -40 */
		/* 82182E3Ch case    1:*/		return 0x82182E14;
		/* 82182E3Ch case    1:*/		return 0x82182E40;
	}
	return 0x82182E40;
} // Block from 82182E38h-82182E40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82182E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182E40);
		  /* 82182E40h */ case    0:  		/* lwz R11, <#[R1 + 136]> */
		/* 82182E40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82182E40h case    0:*/		return 0x82182E44;
		  /* 82182E44h */ case    1:  		/* addi R11, R11, 1 */
		/* 82182E44h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82182E44h case    1:*/		return 0x82182E48;
		  /* 82182E48h */ case    2:  		/* stw R11, <#[R1 + 136]> */
		/* 82182E48h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82182E48h case    2:*/		return 0x82182E4C;
	}
	return 0x82182E4C;
} // Block from 82182E40h-82182E4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82182E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182E4C);
		  /* 82182E4Ch */ case    0:  		/* addi R28, R28, 1 */
		/* 82182E4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82182E4Ch case    0:*/		return 0x82182E50;
		  /* 82182E50h */ case    1:  		/* addi R26, R26, 4 */
		/* 82182E50h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82182E50h case    1:*/		return 0x82182E54;
		  /* 82182E54h */ case    2:  		/* cmplw CR6, R28, R15 */
		/* 82182E54h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R15);
		/* 82182E54h case    2:*/		return 0x82182E58;
		  /* 82182E58h */ case    3:  		/* bc 12, CR6_LT, -560 */
		/* 82182E58h case    3:*/		if ( regs.CR[6].lt ) { return 0x82182C28;  }
		/* 82182E58h case    3:*/		return 0x82182E5C;
	}
	return 0x82182E5C;
} // Block from 82182E4Ch-82182E5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82182E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182E5C);
		  /* 82182E5Ch */ case    0:  		/* lbz R11, <#[R1 + 96]> */
		/* 82182E5Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82182E5Ch case    0:*/		return 0x82182E60;
		  /* 82182E60h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 82182E60h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82182E60h case    1:*/		return 0x82182E64;
		  /* 82182E64h */ case    2:  		/* bc 4, CR0_EQ, 64 */
		/* 82182E64h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82182EA4;  }
		/* 82182E64h case    2:*/		return 0x82182E68;
		  /* 82182E68h */ case    3:  		/* lwz R11, <#[R23 + 8]> */
		/* 82182E68h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82182E68h case    3:*/		return 0x82182E6C;
		  /* 82182E6Ch */ case    4:  		/* rlwinm R10, R11, 31, 28, 31 */
		/* 82182E6Ch case    4:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R10,regs.R11);
		/* 82182E6Ch case    4:*/		return 0x82182E70;
		  /* 82182E70h */ case    5:  		/* cmplw CR6, R29, R10 */
		/* 82182E70h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 82182E70h case    5:*/		return 0x82182E74;
		  /* 82182E74h */ case    6:  		/* bc 4, CR6_EQ, 48 */
		/* 82182E74h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82182EA4;  }
		/* 82182E74h case    6:*/		return 0x82182E78;
		  /* 82182E78h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82182E78h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82182E78h case    7:*/		return 0x82182E7C;
		  /* 82182E7Ch */ case    8:  		/* cmplwi CR6, R11, 384 */
		/* 82182E7Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 82182E7Ch case    8:*/		return 0x82182E80;
		  /* 82182E80h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82182E80h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82182EA4;  }
		/* 82182E80h case    9:*/		return 0x82182E84;
		  /* 82182E84h */ case   10:  		/* lwz R4, <#[R23 + 48]> */
		/* 82182E84h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000030) );
		/* 82182E84h case   10:*/		return 0x82182E88;
		  /* 82182E88h */ case   11:  		/* lwz R3, <#[R23 + 44]> */
		/* 82182E88h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x0000002C) );
		/* 82182E88h case   11:*/		return 0x82182E8C;
		  /* 82182E8Ch */ case   12:  		/* bl -125956 */
		/* 82182E8Ch case   12:*/		regs.LR = 0x82182E90; return 0x82164288;
		/* 82182E8Ch case   12:*/		return 0x82182E90;
		  /* 82182E90h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82182E90h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82182E90h case   13:*/		return 0x82182E94;
		  /* 82182E94h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 82182E94h case   14:*/		if ( regs.CR[0].eq ) { return 0x82182EA4;  }
		/* 82182E94h case   14:*/		return 0x82182E98;
		  /* 82182E98h */ case   15:  		/* lwz R11, <#[R1 + 136]> */
		/* 82182E98h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82182E98h case   15:*/		return 0x82182E9C;
		  /* 82182E9Ch */ case   16:  		/* addi R11, R11, 1 */
		/* 82182E9Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82182E9Ch case   16:*/		return 0x82182EA0;
		  /* 82182EA0h */ case   17:  		/* stw R11, <#[R1 + 136]> */
		/* 82182EA0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82182EA0h case   17:*/		return 0x82182EA4;
	}
	return 0x82182EA4;
} // Block from 82182E5Ch-82182EA4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82182EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182EA4);
		  /* 82182EA4h */ case    0:  		/* cmplw CR6, R27, R15 */
		/* 82182EA4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R15);
		/* 82182EA4h case    0:*/		return 0x82182EA8;
		  /* 82182EA8h */ case    1:  		/* bc 4, CR6_EQ, 64 */
		/* 82182EA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82182EE8;  }
		/* 82182EA8h case    1:*/		return 0x82182EAC;
		  /* 82182EACh */ case    2:  		/* lwz R11, <#[R1 + 232]> */
		/* 82182EACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 82182EACh case    2:*/		return 0x82182EB0;
		  /* 82182EB0h */ case    3:  		/* lwz R31, <#[R1 + 116]> */
		/* 82182EB0h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 82182EB0h case    3:*/		return 0x82182EB4;
		  /* 82182EB4h */ case    4:  		/* lwz R30, <#[R1 + 228]> */
		/* 82182EB4h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000E4) );
		/* 82182EB4h case    4:*/		return 0x82182EB8;
		  /* 82182EB8h */ case    5:  		/* cmplw CR6, R31, R30 */
		/* 82182EB8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82182EB8h case    5:*/		return 0x82182EBC;
		  /* 82182EBCh */ case    6:  		/* stw R11, <#[R1 + 104]> */
		/* 82182EBCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82182EBCh case    6:*/		return 0x82182EC0;
		  /* 82182EC0h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 82182EC0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82182EE8;  }
		/* 82182EC0h case    7:*/		return 0x82182EC4;
		  /* 82182EC4h */ case    8:  		/* mr R4, R31 */
		/* 82182EC4h case    8:*/		regs.R4 = regs.R31;
		/* 82182EC4h case    8:*/		return 0x82182EC8;
		  /* 82182EC8h */ case    9:  		/* lwz R31, <#[R31 + 32]> */
		/* 82182EC8h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000020) );
		/* 82182EC8h case    9:*/		return 0x82182ECC;
		  /* 82182ECCh */ case   10:  		/* li R6, 1 */
		/* 82182ECCh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82182ECCh case   10:*/		return 0x82182ED0;
		  /* 82182ED0h */ case   11:  		/* li R5, 0 */
		/* 82182ED0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82182ED0h case   11:*/		return 0x82182ED4;
		  /* 82182ED4h */ case   12:  		/* mr R3, R14 */
		/* 82182ED4h case   12:*/		regs.R3 = regs.R14;
		/* 82182ED4h case   12:*/		return 0x82182ED8;
		  /* 82182ED8h */ case   13:  		/* bl 689392 */
		/* 82182ED8h case   13:*/		regs.LR = 0x82182EDC; return 0x8222B3C8;
		/* 82182ED8h case   13:*/		return 0x82182EDC;
		  /* 82182EDCh */ case   14:  		/* cmplw CR6, R31, R30 */
		/* 82182EDCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82182EDCh case   14:*/		return 0x82182EE0;
		  /* 82182EE0h */ case   15:  		/* bc 4, CR6_EQ, -28 */
		/* 82182EE0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82182EC4;  }
		/* 82182EE0h case   15:*/		return 0x82182EE4;
		  /* 82182EE4h */ case   16:  		/* stw R31, <#[R1 + 116]> */
		/* 82182EE4h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 82182EE4h case   16:*/		return 0x82182EE8;
	}
	return 0x82182EE8;
} // Block from 82182EA4h-82182EE8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82182EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182EE8);
		  /* 82182EE8h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 82182EE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 82182EE8h case    0:*/		return 0x82182EEC;
		  /* 82182EECh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82182EECh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82182EECh case    1:*/		return 0x82182EF0;
		  /* 82182EF0h */ case    2:  		/* lwz R11, <#[R11 + 40]> */
		/* 82182EF0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82182EF0h case    2:*/		return 0x82182EF4;
		  /* 82182EF4h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82182EF4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82182EF4h case    3:*/		return 0x82182EF8;
		  /* 82182EF8h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 82182EF8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82182F08;  }
		/* 82182EF8h case    4:*/		return 0x82182EFC;
		  /* 82182EFCh */ case    5:  		/* stw R11, <#[R1 + 128]> */
		/* 82182EFCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 82182EFCh case    5:*/		return 0x82182F00;
		  /* 82182F00h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82182F00h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182F00h case    6:*/		return 0x82182F04;
		  /* 82182F04h */ case    7:  		/* bc 4, CR6_EQ, -3356 */
		/* 82182F04h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821821E8;  }
		/* 82182F04h case    7:*/		return 0x82182F08;
	}
	return 0x82182F08;
} // Block from 82182EE8h-82182F08h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82182F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182F08);
		  /* 82182F08h */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 82182F08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82182F08h case    0:*/		return 0x82182F0C;
		  /* 82182F0Ch */ case    1:  		/* li R9, 0 */
		/* 82182F0Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82182F0Ch case    1:*/		return 0x82182F10;
		  /* 82182F10h */ case    2:  		/* stw R9, <#[R1 + 184]> */
		/* 82182F10h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B8) );
		/* 82182F10h case    2:*/		return 0x82182F14;
		  /* 82182F14h */ case    3:  		/* addi R10, R11, 4 */
		/* 82182F14h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82182F14h case    3:*/		return 0x82182F18;
		  /* 82182F18h */ case    4:  		/* lwz R9, <#[R11 + 4]> */
		/* 82182F18h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82182F18h case    4:*/		return 0x82182F1C;
		  /* 82182F1Ch */ case    5:  		/* stw R11, <#[R1 + 176]> */
		/* 82182F1Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82182F1Ch case    5:*/		return 0x82182F20;
		  /* 82182F20h */ case    6:  		/* rlwinm R11, R9, 0, 31, 31 */
		/* 82182F20h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R9);
		/* 82182F20h case    6:*/		return 0x82182F24;
		  /* 82182F24h */ case    7:  		/* addic R11, R11, -1 */
		/* 82182F24h case    7:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82182F24h case    7:*/		return 0x82182F28;
		  /* 82182F28h */ case    8:  		/* subfe R11, R11, R11 */
		/* 82182F28h case    8:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82182F28h case    8:*/		return 0x82182F2C;
		  /* 82182F2Ch */ case    9:  		/* and R11, R11, R9 */
		/* 82182F2Ch case    9:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82182F2Ch case    9:*/		return 0x82182F30;
		  /* 82182F30h */ case   10:  		/* stw R11, <#[R1 + 180]> */
		/* 82182F30h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82182F30h case   10:*/		return 0x82182F34;
		  /* 82182F34h */ case   11:  		/* b 20 */
		/* 82182F34h case   11:*/		return 0x82182F48;
		/* 82182F34h case   11:*/		return 0x82182F38;
	}
	return 0x82182F38;
} // Block from 82182F08h-82182F38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82182F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182F38);
		  /* 82182F38h */ case    0:  		/* li R4, 4800 */
		/* 82182F38h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82182F38h case    0:*/		return 0x82182F3C;
		  /* 82182F3Ch */ case    1:  		/* mr R3, R14 */
		/* 82182F3Ch case    1:*/		regs.R3 = regs.R14;
		/* 82182F3Ch case    1:*/		return 0x82182F40;
		  /* 82182F40h */ case    2:  		/* bl -200920 */
		/* 82182F40h case    2:*/		regs.LR = 0x82182F44; return 0x82151E68;
		/* 82182F40h case    2:*/		return 0x82182F44;
		  /* 82182F44h */ case    3:  		/* lwz R11, <#[R1 + 180]> */
		/* 82182F44h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82182F44h case    3:*/		return 0x82182F48;
	}
	return 0x82182F48;
} // Block from 82182F38h-82182F48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82182F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182F48);
		  /* 82182F48h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82182F48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182F48h case    0:*/		return 0x82182F4C;
		  /* 82182F4Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82182F4Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82182F64;  }
		/* 82182F4Ch case    1:*/		return 0x82182F50;
		  /* 82182F50h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 82182F50h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82182F50h case    2:*/		return 0x82182F54;
		  /* 82182F54h */ case    3:  		/* lwz R10, <#[R1 + 184]> */
		/* 82182F54h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 82182F54h case    3:*/		return 0x82182F58;
		  /* 82182F58h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 82182F58h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82182F58h case    4:*/		return 0x82182F5C;
		  /* 82182F5Ch */ case    5:  		/* li R11, 0 */
		/* 82182F5Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82182F5Ch case    5:*/		return 0x82182F60;
		  /* 82182F60h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 82182F60h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82182F68;  }
		/* 82182F60h case    6:*/		return 0x82182F64;
	}
	return 0x82182F64;
} // Block from 82182F48h-82182F64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82182F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182F64);
		  /* 82182F64h */ case    0:  		/* li R11, 1 */
		/* 82182F64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82182F64h case    0:*/		return 0x82182F68;
	}
	return 0x82182F68;
} // Block from 82182F64h-82182F68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82182F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182F68);
		  /* 82182F68h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82182F68h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82182F68h case    0:*/		return 0x82182F6C;
		  /* 82182F6Ch */ case    1:  		/* bc 4, CR0_EQ, 188 */
		/* 82182F6Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82183028;  }
		/* 82182F6Ch case    1:*/		return 0x82182F70;
		  /* 82182F70h */ case    2:  		/* addi R3, R1, 176 */
		/* 82182F70h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 82182F70h case    2:*/		return 0x82182F74;
		  /* 82182F74h */ case    3:  		/* bl -37332 */
		/* 82182F74h case    3:*/		regs.LR = 0x82182F78; return 0x82179DA0;
		/* 82182F74h case    3:*/		return 0x82182F78;
		  /* 82182F78h */ case    4:  		/* lwz R11, <#[R3 + 20]> */
		/* 82182F78h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82182F78h case    4:*/		return 0x82182F7C;
		  /* 82182F7Ch */ case    5:  		/* addi R9, R3, 20 */
		/* 82182F7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0x14);
		/* 82182F7Ch case    5:*/		return 0x82182F80;
		  /* 82182F80h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 82182F80h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82182F80h case    6:*/		return 0x82182F84;
		  /* 82182F84h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82182F84h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82182F84h case    7:*/		return 0x82182F88;
		  /* 82182F88h */ case    8:  		/* bc 12, CR6_EQ, 52 */
		/* 82182F88h case    8:*/		if ( regs.CR[6].eq ) { return 0x82182FBC;  }
		/* 82182F88h case    8:*/		return 0x82182F8C;
		  /* 82182F8Ch */ case    9:  		/* lwz R11, <#[R10 + 16]> */
		/* 82182F8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82182F8Ch case    9:*/		return 0x82182F90;
		  /* 82182F90h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82182F90h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182F90h case   10:*/		return 0x82182F94;
		  /* 82182F94h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 82182F94h case   11:*/		if ( regs.CR[6].eq ) { return 0x82182FB4;  }
		/* 82182F94h case   11:*/		return 0x82182F98;
		  /* 82182F98h */ case   12:  		/* lwz R8, <#[R11 + 8]> */
		/* 82182F98h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82182F98h case   12:*/		return 0x82182F9C;
		  /* 82182F9Ch */ case   13:  		/* rlwinm R8, R8, 0, 18, 24 */
		/* 82182F9Ch case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R8,regs.R8);
		/* 82182F9Ch case   13:*/		return 0x82182FA0;
		  /* 82182FA0h */ case   14:  		/* cmplwi CR6, R8, 14080 */
		/* 82182FA0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00003700);
		/* 82182FA0h case   14:*/		return 0x82182FA4;
		  /* 82182FA4h */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 82182FA4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82182FB4;  }
		/* 82182FA4h case   15:*/		return 0x82182FA8;
		  /* 82182FA8h */ case   16:  		/* lwz R8, <#[R10]> */
		/* 82182FA8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82182FA8h case   16:*/		return 0x82182FAC;
		  /* 82182FACh */ case   17:  		/* rlwinm. R8, R8, 0, 4, 6 */
		/* 82182FACh case   17:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R8);
		/* 82182FACh case   17:*/		return 0x82182FB0;
		  /* 82182FB0h */ case   18:  		/* bc 4, CR0_EQ, 16 */
		/* 82182FB0h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82182FC0;  }
		/* 82182FB0h case   18:*/		return 0x82182FB4;
	}
	return 0x82182FB4;
} // Block from 82182F68h-82182FB4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82182FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182FB4);
		  /* 82182FB4h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 82182FB4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82182FB4h case    0:*/		return 0x82182FB8;
		  /* 82182FB8h */ case    1:  		/* b -52 */
		/* 82182FB8h case    1:*/		return 0x82182F84;
		/* 82182FB8h case    1:*/		return 0x82182FBC;
	}
	return 0x82182FBC;
} // Block from 82182FB4h-82182FBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82182FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182FBC);
		  /* 82182FBCh */ case    0:  		/* li R11, 0 */
		/* 82182FBCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82182FBCh case    0:*/		return 0x82182FC0;
	}
	return 0x82182FC0;
} // Block from 82182FBCh-82182FC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82182FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82182FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82182FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82182FC0);
		  /* 82182FC0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82182FC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82182FC0h case    0:*/		return 0x82182FC4;
		  /* 82182FC4h */ case    1:  		/* bc 12, CR6_EQ, -128 */
		/* 82182FC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82182F44;  }
		/* 82182FC4h case    1:*/		return 0x82182FC8;
		  /* 82182FC8h */ case    2:  		/* lwz R10, <#[R3 + 16]> */
		/* 82182FC8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82182FC8h case    2:*/		return 0x82182FCC;
		  /* 82182FCCh */ case    3:  		/* li R7, 0 */
		/* 82182FCCh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82182FCCh case    3:*/		return 0x82182FD0;
		  /* 82182FD0h */ case    4:  		/* rlwinm. R5, R10, 0, 29, 31 */
		/* 82182FD0h case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R5,regs.R10);
		/* 82182FD0h case    4:*/		return 0x82182FD4;
		  /* 82182FD4h */ case    5:  		/* bc 12, CR0_EQ, -144 */
		/* 82182FD4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82182F44;  }
		/* 82182FD4h case    5:*/		return 0x82182FD8;
		  /* 82182FD8h */ case    6:  		/* lwz R10, <#[R11 + 8]> */
		/* 82182FD8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82182FD8h case    6:*/		return 0x82182FDC;
		  /* 82182FDCh */ case    7:  		/* addi R8, R11, 44 */
		/* 82182FDCh case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x2C);
		/* 82182FDCh case    7:*/		return 0x82182FE0;
		  /* 82182FE0h */ case    8:  		/* rlwinm R6, R10, 13, 29, 31 */
		/* 82182FE0h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R6,regs.R10);
		/* 82182FE0h case    8:*/		return 0x82182FE4;
		  /* 82182FE4h */ case    9:  		/* li R11, 0 */
		/* 82182FE4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82182FE4h case    9:*/		return 0x82182FE8;
		  /* 82182FE8h */ case   10:  		/* mr R10, R8 */
		/* 82182FE8h case   10:*/		regs.R10 = regs.R8;
		/* 82182FE8h case   10:*/		return 0x82182FEC;
		  /* 82182FECh */ case   11:  		/* cmplw CR6, R11, R6 */
		/* 82182FECh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 82182FECh case   11:*/		return 0x82182FF0;
		  /* 82182FF0h */ case   12:  		/* bc 4, CR6_LT, -4448 */
		/* 82182FF0h case   12:*/		if ( !regs.CR[6].lt ) { return 0x82181E90;  }
		/* 82182FF0h case   12:*/		return 0x82182FF4;
		  /* 82182FF4h */ case   13:  		/* lwz R4, <#[R10]> */
		/* 82182FF4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 82182FF4h case   13:*/		return 0x82182FF8;
		  /* 82182FF8h */ case   14:  		/* lwz R3, <#[R9]> */
		/* 82182FF8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x00000000) );
		/* 82182FF8h case   14:*/		return 0x82182FFC;
		  /* 82182FFCh */ case   15:  		/* lwz R4, <#[R4 + 12]> */
		/* 82182FFCh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000000C) );
		/* 82182FFCh case   15:*/		return 0x82183000;
		  /* 82183000h */ case   16:  		/* cmplw CR6, R4, R3 */
		/* 82183000h case   16:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 82183000h case   16:*/		return 0x82183004;
		  /* 82183004h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 82183004h case   17:*/		if ( regs.CR[6].eq ) { return 0x82183014;  }
		/* 82183004h case   17:*/		return 0x82183008;
		  /* 82183008h */ case   18:  		/* addi R11, R11, 1 */
		/* 82183008h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82183008h case   18:*/		return 0x8218300C;
		  /* 8218300Ch */ case   19:  		/* addi R10, R10, 4 */
		/* 8218300Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8218300Ch case   19:*/		return 0x82183010;
		  /* 82183010h */ case   20:  		/* b -36 */
		/* 82183010h case   20:*/		return 0x82182FEC;
		/* 82183010h case   20:*/		return 0x82183014;
	}
	return 0x82183014;
} // Block from 82182FC0h-82183014h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82183014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183014);
		  /* 82183014h */ case    0:  		/* addi R7, R7, 1 */
		/* 82183014h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82183014h case    0:*/		return 0x82183018;
		  /* 82183018h */ case    1:  		/* addi R9, R9, 4 */
		/* 82183018h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82183018h case    1:*/		return 0x8218301C;
		  /* 8218301Ch */ case    2:  		/* cmplw CR6, R7, R5 */
		/* 8218301Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 8218301Ch case    2:*/		return 0x82183020;
		  /* 82183020h */ case    3:  		/* bc 12, CR6_LT, -60 */
		/* 82183020h case    3:*/		if ( regs.CR[6].lt ) { return 0x82182FE4;  }
		/* 82183020h case    3:*/		return 0x82183024;
		  /* 82183024h */ case    4:  		/* b -224 */
		/* 82183024h case    4:*/		return 0x82182F44;
		/* 82183024h case    4:*/		return 0x82183028;
	}
	return 0x82183028;
} // Block from 82183014h-82183028h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183028);
		  /* 82183028h */ case    0:  		/* mr R4, R14 */
		/* 82183028h case    0:*/		regs.R4 = regs.R14;
		/* 82183028h case    0:*/		return 0x8218302C;
		  /* 8218302Ch */ case    1:  		/* lwz R3, <#[R1 + 124]> */
		/* 8218302Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 8218302Ch case    1:*/		return 0x82183030;
		  /* 82183030h */ case    2:  		/* bl -125096 */
		/* 82183030h case    2:*/		regs.LR = 0x82183034; return 0x82164788;
		/* 82183030h case    2:*/		return 0x82183034;
		  /* 82183034h */ case    3:  		/* cmpwi CR6, R3, 2 */
		/* 82183034h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82183034h case    3:*/		return 0x82183038;
		  /* 82183038h */ case    4:  		/* bc 12, CR6_EQ, 132 */
		/* 82183038h case    4:*/		if ( regs.CR[6].eq ) { return 0x821830BC;  }
		/* 82183038h case    4:*/		return 0x8218303C;
		  /* 8218303Ch */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 8218303Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 8218303Ch case    5:*/		return 0x82183040;
		  /* 82183040h */ case    6:  		/* addi R11, R11, 4 */
		/* 82183040h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82183040h case    6:*/		return 0x82183044;
		  /* 82183044h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 82183044h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82183044h case    7:*/		return 0x82183048;
		  /* 82183048h */ case    8:  		/* li R11, 0 */
		/* 82183048h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82183048h case    8:*/		return 0x8218304C;
		  /* 8218304Ch */ case    9:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 8218304Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 8218304Ch case    9:*/		return 0x82183050;
		  /* 82183050h */ case   10:  		/* bc 4, CR0_EQ, 44 */
		/* 82183050h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8218307C;  }
		/* 82183050h case   10:*/		return 0x82183054;
		  /* 82183054h */ case   11:  		/* cmplwi CR0, R10, 0 */
		/* 82183054h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82183054h case   11:*/		return 0x82183058;
		  /* 82183058h */ case   12:  		/* bc 12, CR0_EQ, 36 */
		/* 82183058h case   12:*/		if ( regs.CR[0].eq ) { return 0x8218307C;  }
		/* 82183058h case   12:*/		return 0x8218305C;
		  /* 8218305Ch */ case   13:  		/* rlwinm R9, R10, 0, 0, 30 */
		/* 8218305Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R10);
		/* 8218305Ch case   13:*/		return 0x82183060;
		  /* 82183060h */ case   14:  		/* lwz R10, <#[R10 + 8]> */
		/* 82183060h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82183060h case   14:*/		return 0x82183064;
		  /* 82183064h */ case   15:  		/* add R11, R10, R11 */
		/* 82183064h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82183064h case   15:*/		return 0x82183068;
		  /* 82183068h */ case   16:  		/* lwz R10, <#[R9 + 4]> */
		/* 82183068h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 82183068h case   16:*/		return 0x8218306C;
		  /* 8218306Ch */ case   17:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 8218306Ch case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 8218306Ch case   17:*/		return 0x82183070;
		  /* 82183070h */ case   18:  		/* bc 4, CR0_EQ, 12 */
		/* 82183070h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8218307C;  }
		/* 82183070h case   18:*/		return 0x82183074;
		  /* 82183074h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 82183074h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82183074h case   19:*/		return 0x82183078;
		  /* 82183078h */ case   20:  		/* bc 4, CR6_EQ, -28 */
		/* 82183078h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8218305C;  }
		/* 82183078h case   20:*/		return 0x8218307C;
	}
	return 0x8218307C;
} // Block from 82183028h-8218307Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8218307Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218307C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218307C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218307C);
		  /* 8218307Ch */ case    0:  		/* lwz R9, <#[R1 + 136]> */
		/* 8218307Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 8218307Ch case    0:*/		return 0x82183080;
		  /* 82183080h */ case    1:  		/* lwz R10, <#[R1 + 460]> */
		/* 82183080h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001CC) );
		/* 82183080h case    1:*/		return 0x82183084;
		  /* 82183084h */ case    2:  		/* lwz R8, <#[R1 + 172]> */
		/* 82183084h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000AC) );
		/* 82183084h case    2:*/		return 0x82183088;
		  /* 82183088h */ case    3:  		/* subf R11, R9, R11 */
		/* 82183088h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82183088h case    3:*/		return 0x8218308C;
		  /* 8218308Ch */ case    4:  		/* lwz R9, <#[R1 + 104]> */
		/* 8218308Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 8218308Ch case    4:*/		return 0x82183090;
		  /* 82183090h */ case    5:  		/* subf R11, R8, R11 */
		/* 82183090h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82183090h case    5:*/		return 0x82183094;
		  /* 82183094h */ case    6:  		/* lwz R10, <#[R10 + 48]> */
		/* 82183094h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 82183094h case    6:*/		return 0x82183098;
		  /* 82183098h */ case    7:  		/* add R11, R11, R9 */
		/* 82183098h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82183098h case    7:*/		return 0x8218309C;
		  /* 8218309Ch */ case    8:  		/* rlwinm. R10, R10, 6, 31, 31 */
		/* 8218309Ch case    8:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R10);
		/* 8218309Ch case    8:*/		return 0x821830A0;
		  /* 821830A0h */ case    9:  		/* bc 4, CR0_EQ, 20 */
		/* 821830A0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821830B4;  }
		/* 821830A0h case    9:*/		return 0x821830A4;
		  /* 821830A4h */ case   10:  		/* lwz R10, <#[R1 + 164]> */
		/* 821830A4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 821830A4h case   10:*/		return 0x821830A8;
		  /* 821830A8h */ case   11:  		/* lwz R9, <#[R1 + 168]> */
		/* 821830A8h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A8) );
		/* 821830A8h case   11:*/		return 0x821830AC;
		  /* 821830ACh */ case   12:  		/* add R11, R11, R10 */
		/* 821830ACh case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821830ACh case   12:*/		return 0x821830B0;
		  /* 821830B0h */ case   13:  		/* add R11, R11, R9 */
		/* 821830B0h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821830B0h case   13:*/		return 0x821830B4;
	}
	return 0x821830B4;
} // Block from 8218307Ch-821830B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821830B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821830B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821830B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821830B4);
		  /* 821830B4h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 821830B4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821830B4h case    0:*/		return 0x821830B8;
		  /* 821830B8h */ case    1:  		/* bc 12, CR6_GT, -4648 */
		/* 821830B8h case    1:*/		if ( regs.CR[6].gt ) { return 0x82181E90;  }
		/* 821830B8h case    1:*/		return 0x821830BC;
	}
	return 0x821830BC;
} // Block from 821830B4h-821830BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821830BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821830BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821830BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821830BC);
		  /* 821830BCh */ case    0:  		/* lwz R31, <#[R1 + 120]> */
		/* 821830BCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000078) );
		/* 821830BCh case    0:*/		return 0x821830C0;
		  /* 821830C0h */ case    1:  		/* li R8, 0 */
		/* 821830C0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821830C0h case    1:*/		return 0x821830C4;
		  /* 821830C4h */ case    2:  		/* lwz R24, <#[R1 + 460]> */
		/* 821830C4h case    2:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000001CC) );
		/* 821830C4h case    2:*/		return 0x821830C8;
		  /* 821830C8h */ case    3:  		/* li R6, 0 */
		/* 821830C8h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821830C8h case    3:*/		return 0x821830CC;
		  /* 821830CCh */ case    4:  		/* mr R7, R31 */
		/* 821830CCh case    4:*/		regs.R7 = regs.R31;
		/* 821830CCh case    4:*/		return 0x821830D0;
		  /* 821830D0h */ case    5:  		/* mr R5, R31 */
		/* 821830D0h case    5:*/		regs.R5 = regs.R31;
		/* 821830D0h case    5:*/		return 0x821830D4;
		  /* 821830D4h */ case    6:  		/* mr R4, R24 */
		/* 821830D4h case    6:*/		regs.R4 = regs.R24;
		/* 821830D4h case    6:*/		return 0x821830D8;
		  /* 821830D8h */ case    7:  		/* mr R3, R14 */
		/* 821830D8h case    7:*/		regs.R3 = regs.R14;
		/* 821830D8h case    7:*/		return 0x821830DC;
		  /* 821830DCh */ case    8:  		/* bl 418604 */
		/* 821830DCh case    8:*/		regs.LR = 0x821830E0; return 0x821E9408;
		/* 821830DCh case    8:*/		return 0x821830E0;
		  /* 821830E0h */ case    9:  		/* mr R30, R3 */
		/* 821830E0h case    9:*/		regs.R30 = regs.R3;
		/* 821830E0h case    9:*/		return 0x821830E4;
		  /* 821830E4h */ case   10:  		/* cmplw CR6, R3, R31 */
		/* 821830E4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 821830E4h case   10:*/		return 0x821830E8;
		  /* 821830E8h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821830E8h case   11:*/		if ( regs.CR[6].eq ) { return 0x82183100;  }
		/* 821830E8h case   11:*/		return 0x821830EC;
		  /* 821830ECh */ case   12:  		/* lwz R11, <#[R1 + 112]> */
		/* 821830ECh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 821830ECh case   12:*/		return 0x821830F0;
		  /* 821830F0h */ case   13:  		/* cmplw CR6, R11, R31 */
		/* 821830F0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821830F0h case   13:*/		return 0x821830F4;
		  /* 821830F4h */ case   14:  		/* bc 4, CR6_EQ, -4708 */
		/* 821830F4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82181E90;  }
		/* 821830F4h case   14:*/		return 0x821830F8;
		  /* 821830F8h */ case   15:  		/* stw R3, <#[R1 + 112]> */
		/* 821830F8h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 821830F8h case   15:*/		return 0x821830FC;
		  /* 821830FCh */ case   16:  		/* b -4716 */
		/* 821830FCh case   16:*/		return 0x82181E90;
		/* 821830FCh case   16:*/		return 0x82183100;
	}
	return 0x82183100;
} // Block from 821830BCh-82183100h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82183100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183100);
		  /* 82183100h */ case    0:  		/* lwz R3, <#[R1 + 144]> */
		/* 82183100h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 82183100h case    0:*/		return 0x82183104;
		  /* 82183104h */ case    1:  		/* li R11, 0 */
		/* 82183104h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82183104h case    1:*/		return 0x82183108;
		  /* 82183108h */ case    2:  		/* stw R11, <#[R1 + 116]> */
		/* 82183108h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82183108h case    2:*/		return 0x8218310C;
		  /* 8218310Ch */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 8218310Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8218310Ch case    3:*/		return 0x82183110;
		  /* 82183110h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 82183110h case    4:*/		if ( regs.CR[6].eq ) { return 0x82183118;  }
		/* 82183110h case    4:*/		return 0x82183114;
		  /* 82183114h */ case    5:  		/* bl 452812 */
		/* 82183114h case    5:*/		regs.LR = 0x82183118; return 0x821F19E0;
		/* 82183114h case    5:*/		return 0x82183118;
	}
	return 0x82183118;
} // Block from 82183100h-82183118h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183118);
		  /* 82183118h */ case    0:  		/* lwz R29, <#[R1 + 140]> */
		/* 82183118h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000008C) );
		/* 82183118h case    0:*/		return 0x8218311C;
		  /* 8218311Ch */ case    1:  		/* mr R7, R30 */
		/* 8218311Ch case    1:*/		regs.R7 = regs.R30;
		/* 8218311Ch case    1:*/		return 0x82183120;
		  /* 82183120h */ case    2:  		/* mr R3, R14 */
		/* 82183120h case    2:*/		regs.R3 = regs.R14;
		/* 82183120h case    2:*/		return 0x82183124;
		  /* 82183124h */ case    3:  		/* lbz R6, <#[R1 + 98]> */
		/* 82183124h case    3:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000062) );
		/* 82183124h case    3:*/		return 0x82183128;
		  /* 82183128h */ case    4:  		/* mr R5, R29 */
		/* 82183128h case    4:*/		regs.R5 = regs.R29;
		/* 82183128h case    4:*/		return 0x8218312C;
		  /* 8218312Ch */ case    5:  		/* lwz R4, <#[R1 + 132]> */
		/* 8218312Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 8218312Ch case    5:*/		return 0x82183130;
		  /* 82183130h */ case    6:  		/* lwz R8, <#[R14 + 660]> */
		/* 82183130h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R14 + 0x00000294) );
		/* 82183130h case    6:*/		return 0x82183134;
		  /* 82183134h */ case    7:  		/* bl -19268 */
		/* 82183134h case    7:*/		regs.LR = 0x82183138; return 0x8217E5F0;
		/* 82183134h case    7:*/		return 0x82183138;
		  /* 82183138h */ case    8:  		/* li R6, 1 */
		/* 82183138h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82183138h case    8:*/		return 0x8218313C;
		  /* 8218313Ch */ case    9:  		/* li R5, 0 */
		/* 8218313Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218313Ch case    9:*/		return 0x82183140;
		  /* 82183140h */ case   10:  		/* lwz R4, <#[R1 + 124]> */
		/* 82183140h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82183140h case   10:*/		return 0x82183144;
		  /* 82183144h */ case   11:  		/* mr R3, R14 */
		/* 82183144h case   11:*/		regs.R3 = regs.R14;
		/* 82183144h case   11:*/		return 0x82183148;
		  /* 82183148h */ case   12:  		/* bl 688768 */
		/* 82183148h case   12:*/		regs.LR = 0x8218314C; return 0x8222B3C8;
		/* 82183148h case   12:*/		return 0x8218314C;
		  /* 8218314Ch */ case   13:  		/* lwz R11, <#[R29 + 8]> */
		/* 8218314Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8218314Ch case   13:*/		return 0x82183150;
		  /* 82183150h */ case   14:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82183150h case   14:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82183150h case   14:*/		return 0x82183154;
		  /* 82183154h */ case   15:  		/* cmplwi CR6, R11, 21 */
		/* 82183154h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 82183154h case   15:*/		return 0x82183158;
		  /* 82183158h */ case   16:  		/* bc 12, CR6_LT, 16 */
		/* 82183158h case   16:*/		if ( regs.CR[6].lt ) { return 0x82183168;  }
		/* 82183158h case   16:*/		return 0x8218315C;
		  /* 8218315Ch */ case   17:  		/* cmplwi CR6, R11, 24 */
		/* 8218315Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8218315Ch case   17:*/		return 0x82183160;
		  /* 82183160h */ case   18:  		/* li R11, 1 */
		/* 82183160h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82183160h case   18:*/		return 0x82183164;
		  /* 82183164h */ case   19:  		/* bc 4, CR6_GT, 8 */
		/* 82183164h case   19:*/		if ( !regs.CR[6].gt ) { return 0x8218316C;  }
		/* 82183164h case   19:*/		return 0x82183168;
	}
	return 0x82183168;
} // Block from 82183118h-82183168h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82183168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183168);
		  /* 82183168h */ case    0:  		/* li R11, 0 */
		/* 82183168h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82183168h case    0:*/		return 0x8218316C;
	}
	return 0x8218316C;
} // Block from 82183168h-8218316Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218316Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218316C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218316C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218316C);
		  /* 8218316Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218316Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218316Ch case    0:*/		return 0x82183170;
		  /* 82183170h */ case    1:  		/* bc 12, CR0_EQ, 164 */
		/* 82183170h case    1:*/		if ( regs.CR[0].eq ) { return 0x82183214;  }
		/* 82183170h case    1:*/		return 0x82183174;
		  /* 82183174h */ case    2:  		/* lwz R10, <#[R29 + 4]> */
		/* 82183174h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 82183174h case    2:*/		return 0x82183178;
		  /* 82183178h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 82183178h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82183178h case    3:*/		return 0x8218317C;
		  /* 8218317Ch */ case    4:  		/* bc 12, CR6_EQ, 164 */
		/* 8218317Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82183220;  }
		/* 8218317Ch case    4:*/		return 0x82183180;
		  /* 82183180h */ case    5:  		/* lwz R11, <#[R10 + 16]> */
		/* 82183180h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82183180h case    5:*/		return 0x82183184;
		  /* 82183184h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82183184h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82183184h case    6:*/		return 0x82183188;
		  /* 82183188h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 82183188h case    7:*/		if ( regs.CR[6].eq ) { return 0x821831BC;  }
		/* 82183188h case    7:*/		return 0x8218318C;
		  /* 8218318Ch */ case    8:  		/* lwz R9, <#[R10]> */
		/* 8218318Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8218318Ch case    8:*/		return 0x82183190;
		  /* 82183190h */ case    9:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 82183190h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 82183190h case    9:*/		return 0x82183194;
		  /* 82183194h */ case   10:  		/* bc 12, CR0_EQ, 40 */
		/* 82183194h case   10:*/		if ( regs.CR[0].eq ) { return 0x821831BC;  }
		/* 82183194h case   10:*/		return 0x82183198;
		  /* 82183198h */ case   11:  		/* addi R11, R11, 4 */
		/* 82183198h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82183198h case   11:*/		return 0x8218319C;
		  /* 8218319Ch */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8218319Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218319Ch case   12:*/		return 0x821831A0;
		  /* 821831A0h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821831A0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821831A0h case   13:*/		return 0x821831A4;
		  /* 821831A4h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 821831A4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821831BC;  }
		/* 821831A4h case   14:*/		return 0x821831A8;
		  /* 821831A8h */ case   15:  		/* lwz R31, <#[R11 + 16]> */
		/* 821831A8h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821831A8h case   15:*/		return 0x821831AC;
		  /* 821831ACh */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 821831ACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821831ACh case   16:*/		return 0x821831B0;
		  /* 821831B0h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 821831B0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821831C4;  }
		/* 821831B0h case   17:*/		return 0x821831B4;
		  /* 821831B4h */ case   18:  		/* addi R11, R11, 8 */
		/* 821831B4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821831B4h case   18:*/		return 0x821831B8;
		  /* 821831B8h */ case   19:  		/* b -28 */
		/* 821831B8h case   19:*/		return 0x8218319C;
		/* 821831B8h case   19:*/		return 0x821831BC;
	}
	return 0x821831BC;
} // Block from 8218316Ch-821831BCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821831BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821831BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821831BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821831BC);
		  /* 821831BCh */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821831BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821831BCh case    0:*/		return 0x821831C0;
		  /* 821831C0h */ case    1:  		/* b -72 */
		/* 821831C0h case    1:*/		return 0x82183178;
		/* 821831C0h case    1:*/		return 0x821831C4;
	}
	return 0x821831C4;
} // Block from 821831BCh-821831C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821831C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821831C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821831C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821831C4);
		  /* 821831C4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821831C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821831C4h case    0:*/		return 0x821831C8;
		  /* 821831C8h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821831C8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821831C8h case    1:*/		return 0x821831CC;
		  /* 821831CCh */ case    2:  		/* cmplwi CR6, R11, 64 */
		/* 821831CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 821831CCh case    2:*/		return 0x821831D0;
		  /* 821831D0h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821831D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821831DC;  }
		/* 821831D0h case    3:*/		return 0x821831D4;
		  /* 821831D4h */ case    4:  		/* cmplwi CR6, R11, 63 */
		/* 821831D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003F);
		/* 821831D4h case    4:*/		return 0x821831D8;
		  /* 821831D8h */ case    5:  		/* bc 4, CR6_EQ, 40 */
		/* 821831D8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82183200;  }
		/* 821831D8h case    5:*/		return 0x821831DC;
	}
	return 0x821831DC;
} // Block from 821831C4h-821831DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821831DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821831DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821831DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821831DC);
		  /* 821831DCh */ case    0:  		/* mr R6, R14 */
		/* 821831DCh case    0:*/		regs.R6 = regs.R14;
		/* 821831DCh case    0:*/		return 0x821831E0;
		  /* 821831E0h */ case    1:  		/* lwz R3, <#[R31 + 28]> */
		/* 821831E0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 821831E0h case    1:*/		return 0x821831E4;
		  /* 821831E4h */ case    2:  		/* mr R5, R31 */
		/* 821831E4h case    2:*/		regs.R5 = regs.R31;
		/* 821831E4h case    2:*/		return 0x821831E8;
		  /* 821831E8h */ case    3:  		/* li R4, 1 */
		/* 821831E8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821831E8h case    3:*/		return 0x821831EC;
		  /* 821831ECh */ case    4:  		/* bl 706980 */
		/* 821831ECh case    4:*/		regs.LR = 0x821831F0; return 0x8222FB90;
		/* 821831ECh case    4:*/		return 0x821831F0;
		  /* 821831F0h */ case    5:  		/* mr R4, R31 */
		/* 821831F0h case    5:*/		regs.R4 = regs.R31;
		/* 821831F0h case    5:*/		return 0x821831F4;
		  /* 821831F4h */ case    6:  		/* mr R3, R14 */
		/* 821831F4h case    6:*/		regs.R3 = regs.R14;
		/* 821831F4h case    6:*/		return 0x821831F8;
		  /* 821831F8h */ case    7:  		/* bl 689240 */
		/* 821831F8h case    7:*/		regs.LR = 0x821831FC; return 0x8222B650;
		/* 821831F8h case    7:*/		return 0x821831FC;
		  /* 821831FCh */ case    8:  		/* b -136 */
		/* 821831FCh case    8:*/		return 0x82183174;
		/* 821831FCh case    8:*/		return 0x82183200;
	}
	return 0x82183200;
} // Block from 821831DCh-82183200h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82183200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183200);
		  /* 82183200h */ case    0:  		/* lis R11, -32252 */
		/* 82183200h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82183200h case    0:*/		return 0x82183204;
		  /* 82183204h */ case    1:  		/* li R4, 3500 */
		/* 82183204h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 82183204h case    1:*/		return 0x82183208;
		  /* 82183208h */ case    2:  		/* addi R5, R11, -17012 */
		/* 82183208h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFBD8C);
		/* 82183208h case    2:*/		return 0x8218320C;
		  /* 8218320Ch */ case    3:  		/* mr R3, R14 */
		/* 8218320Ch case    3:*/		regs.R3 = regs.R14;
		/* 8218320Ch case    3:*/		return 0x82183210;
		  /* 82183210h */ case    4:  		/* bl -201640 */
		/* 82183210h case    4:*/		regs.LR = 0x82183214; return 0x82151E68;
		/* 82183210h case    4:*/		return 0x82183214;
	}
	return 0x82183214;
} // Block from 82183200h-82183214h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183214);
		  /* 82183214h */ case    0:  		/* mr R4, R29 */
		/* 82183214h case    0:*/		regs.R4 = regs.R29;
		/* 82183214h case    0:*/		return 0x82183218;
		  /* 82183218h */ case    1:  		/* mr R3, R14 */
		/* 82183218h case    1:*/		regs.R3 = regs.R14;
		/* 82183218h case    1:*/		return 0x8218321C;
		  /* 8218321Ch */ case    2:  		/* bl 689204 */
		/* 8218321Ch case    2:*/		regs.LR = 0x82183220; return 0x8222B650;
		/* 8218321Ch case    2:*/		return 0x82183220;
	}
	return 0x82183220;
} // Block from 82183214h-82183220h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183220);
		  /* 82183220h */ case    0:  		/* lwz R11, <#[R24 + 48]> */
		/* 82183220h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 82183220h case    0:*/		return 0x82183224;
		  /* 82183224h */ case    1:  		/* mr R5, R14 */
		/* 82183224h case    1:*/		regs.R5 = regs.R14;
		/* 82183224h case    1:*/		return 0x82183228;
		  /* 82183228h */ case    2:  		/* lwz R10, <#[R1 + 160]> */
		/* 82183228h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 82183228h case    2:*/		return 0x8218322C;
		  /* 8218322Ch */ case    3:  		/* mr R3, R24 */
		/* 8218322Ch case    3:*/		regs.R3 = regs.R24;
		/* 8218322Ch case    3:*/		return 0x82183230;
		  /* 82183230h */ case    4:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 82183230h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 82183230h case    4:*/		return 0x82183234;
		  /* 82183234h */ case    5:  		/* cmpwi CR6, R10, 4 */
		/* 82183234h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 82183234h case    5:*/		return 0x82183238;
		  /* 82183238h */ case    6:  		/* stw R11, <#[R24 + 48]> */
		/* 82183238h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 82183238h case    6:*/		return 0x8218323C;
		  /* 8218323Ch */ case    7:  		/* bc 4, CR6_EQ, 72 */
		/* 8218323Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82183284;  }
		/* 8218323Ch case    7:*/		return 0x82183240;
		  /* 82183240h */ case    8:  		/* lwz R29, <#[R1 + 100]> */
		/* 82183240h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 82183240h case    8:*/		return 0x82183244;
		  /* 82183244h */ case    9:  		/* mr R4, R29 */
		/* 82183244h case    9:*/		regs.R4 = regs.R29;
		/* 82183244h case    9:*/		return 0x82183248;
		  /* 82183248h */ case   10:  		/* bl 706336 */
		/* 82183248h case   10:*/		regs.LR = 0x8218324C; return 0x8222F968;
		/* 82183248h case   10:*/		return 0x8218324C;
		  /* 8218324Ch */ case   11:  		/* lwz R31, <#[R1 + 112]> */
		/* 8218324Ch case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 8218324Ch case   11:*/		return 0x82183250;
		  /* 82183250h */ case   12:  		/* mr R5, R14 */
		/* 82183250h case   12:*/		regs.R5 = regs.R14;
		/* 82183250h case   12:*/		return 0x82183254;
		  /* 82183254h */ case   13:  		/* mr R3, R31 */
		/* 82183254h case   13:*/		regs.R3 = regs.R31;
		/* 82183254h case   13:*/		return 0x82183258;
		  /* 82183258h */ case   14:  		/* mr R4, R30 */
		/* 82183258h case   14:*/		regs.R4 = regs.R30;
		/* 82183258h case   14:*/		return 0x8218325C;
		  /* 8218325Ch */ case   15:  		/* bl 706316 */
		/* 8218325Ch case   15:*/		regs.LR = 0x82183260; return 0x8222F968;
		/* 8218325Ch case   15:*/		return 0x82183260;
		  /* 82183260h */ case   16:  		/* mr R5, R14 */
		/* 82183260h case   16:*/		regs.R5 = regs.R14;
		/* 82183260h case   16:*/		return 0x82183264;
		  /* 82183264h */ case   17:  		/* mr R4, R29 */
		/* 82183264h case   17:*/		regs.R4 = regs.R29;
		/* 82183264h case   17:*/		return 0x82183268;
		  /* 82183268h */ case   18:  		/* mr R3, R31 */
		/* 82183268h case   18:*/		regs.R3 = regs.R31;
		/* 82183268h case   18:*/		return 0x8218326C;
		  /* 8218326Ch */ case   19:  		/* bl 706676 */
		/* 8218326Ch case   19:*/		regs.LR = 0x82183270; return 0x8222FAE0;
		/* 8218326Ch case   19:*/		return 0x82183270;
		  /* 82183270h */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 82183270h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82183270h case   20:*/		return 0x82183274;
		  /* 82183274h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82183274h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82183274h case   21:*/		return 0x82183278;
		  /* 82183278h */ case   22:  		/* bc 4, CR6_EQ, 60 */
		/* 82183278h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821832B4;  }
		/* 82183278h case   22:*/		return 0x8218327C;
		  /* 8218327Ch */ case   23:  		/* li R5, 0 */
		/* 8218327Ch case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218327Ch case   23:*/		return 0x82183280;
		  /* 82183280h */ case   24:  		/* b 60 */
		/* 82183280h case   24:*/		return 0x821832BC;
		/* 82183280h case   24:*/		return 0x82183284;
	}
	return 0x82183284;
} // Block from 82183220h-82183284h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82183284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183284);
		  /* 82183284h */ case    0:  		/* mr R4, R30 */
		/* 82183284h case    0:*/		regs.R4 = regs.R30;
		/* 82183284h case    0:*/		return 0x82183288;
		  /* 82183288h */ case    1:  		/* bl 706272 */
		/* 82183288h case    1:*/		regs.LR = 0x8218328C; return 0x8222F968;
		/* 82183288h case    1:*/		return 0x8218328C;
		  /* 8218328Ch */ case    2:  		/* lwz R29, <#[R1 + 100]> */
		/* 8218328Ch case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 8218328Ch case    2:*/		return 0x82183290;
		  /* 82183290h */ case    3:  		/* mr R5, R29 */
		/* 82183290h case    3:*/		regs.R5 = regs.R29;
		/* 82183290h case    3:*/		return 0x82183294;
		  /* 82183294h */ case    4:  		/* mr R4, R24 */
		/* 82183294h case    4:*/		regs.R4 = regs.R24;
		/* 82183294h case    4:*/		return 0x82183298;
		  /* 82183298h */ case    5:  		/* mr R3, R14 */
		/* 82183298h case    5:*/		regs.R3 = regs.R14;
		/* 82183298h case    5:*/		return 0x8218329C;
		  /* 8218329Ch */ case    6:  		/* bl -28676 */
		/* 8218329Ch case    6:*/		regs.LR = 0x821832A0; return 0x8217C298;
		/* 8218329Ch case    6:*/		return 0x821832A0;
		  /* 821832A0h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821832A0h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821832A0h case    7:*/		return 0x821832A4;
		  /* 821832A4h */ case    8:  		/* mr R3, R14 */
		/* 821832A4h case    8:*/		regs.R3 = regs.R14;
		/* 821832A4h case    8:*/		return 0x821832A8;
		  /* 821832A8h */ case    9:  		/* bc 4, CR0_EQ, 96 */
		/* 821832A8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82183308;  }
		/* 821832A8h case    9:*/		return 0x821832AC;
		  /* 821832ACh */ case   10:  		/* li R4, 4800 */
		/* 821832ACh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821832ACh case   10:*/		return 0x821832B0;
		  /* 821832B0h */ case   11:  		/* bl -201800 */
		/* 821832B0h case   11:*/		regs.LR = 0x821832B4; return 0x82151E68;
		/* 821832B0h case   11:*/		return 0x821832B4;
	}
	return 0x821832B4;
} // Block from 82183284h-821832B4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821832B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821832B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821832B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821832B4);
		  /* 821832B4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821832B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821832B4h case    0:*/		return 0x821832B8;
		  /* 821832B8h */ case    1:  		/* lwz R5, <#[R11 + 4]> */
		/* 821832B8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 821832B8h case    1:*/		return 0x821832BC;
	}
	return 0x821832BC;
} // Block from 821832B4h-821832BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821832BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821832BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821832BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821832BC);
		  /* 821832BCh */ case    0:  		/* cmplw CR6, R24, R5 */
		/* 821832BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R5);
		/* 821832BCh case    0:*/		return 0x821832C0;
		  /* 821832C0h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821832C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821832E4;  }
		/* 821832C0h case    1:*/		return 0x821832C4;
		  /* 821832C4h */ case    2:  		/* mr R4, R24 */
		/* 821832C4h case    2:*/		regs.R4 = regs.R24;
		/* 821832C4h case    2:*/		return 0x821832C8;
		  /* 821832C8h */ case    3:  		/* mr R3, R14 */
		/* 821832C8h case    3:*/		regs.R3 = regs.R14;
		/* 821832C8h case    3:*/		return 0x821832CC;
		  /* 821832CCh */ case    4:  		/* bl -28724 */
		/* 821832CCh case    4:*/		regs.LR = 0x821832D0; return 0x8217C298;
		/* 821832CCh case    4:*/		return 0x821832D0;
		  /* 821832D0h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821832D0h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821832D0h case    5:*/		return 0x821832D4;
		  /* 821832D4h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821832D4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821832E4;  }
		/* 821832D4h case    6:*/		return 0x821832D8;
		  /* 821832D8h */ case    7:  		/* li R4, 4800 */
		/* 821832D8h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821832D8h case    7:*/		return 0x821832DC;
		  /* 821832DCh */ case    8:  		/* mr R3, R14 */
		/* 821832DCh case    8:*/		regs.R3 = regs.R14;
		/* 821832DCh case    8:*/		return 0x821832E0;
		  /* 821832E0h */ case    9:  		/* bl -201848 */
		/* 821832E0h case    9:*/		regs.LR = 0x821832E4; return 0x82151E68;
		/* 821832E0h case    9:*/		return 0x821832E4;
	}
	return 0x821832E4;
} // Block from 821832BCh-821832E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821832E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821832E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821832E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821832E4);
		  /* 821832E4h */ case    0:  		/* mr R5, R31 */
		/* 821832E4h case    0:*/		regs.R5 = regs.R31;
		/* 821832E4h case    0:*/		return 0x821832E8;
		  /* 821832E8h */ case    1:  		/* mr R4, R24 */
		/* 821832E8h case    1:*/		regs.R4 = regs.R24;
		/* 821832E8h case    1:*/		return 0x821832EC;
		  /* 821832ECh */ case    2:  		/* mr R3, R14 */
		/* 821832ECh case    2:*/		regs.R3 = regs.R14;
		/* 821832ECh case    2:*/		return 0x821832F0;
		  /* 821832F0h */ case    3:  		/* bl -28760 */
		/* 821832F0h case    3:*/		regs.LR = 0x821832F4; return 0x8217C298;
		/* 821832F0h case    3:*/		return 0x821832F4;
		  /* 821832F4h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821832F4h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821832F4h case    4:*/		return 0x821832F8;
		  /* 821832F8h */ case    5:  		/* bc 4, CR0_EQ, -104 */
		/* 821832F8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82183290;  }
		/* 821832F8h case    5:*/		return 0x821832FC;
		  /* 821832FCh */ case    6:  		/* li R4, 4800 */
		/* 821832FCh case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821832FCh case    6:*/		return 0x82183300;
		  /* 82183300h */ case    7:  		/* mr R3, R14 */
		/* 82183300h case    7:*/		regs.R3 = regs.R14;
		/* 82183300h case    7:*/		return 0x82183304;
		  /* 82183304h */ case    8:  		/* bl -201884 */
		/* 82183304h case    8:*/		regs.LR = 0x82183308; return 0x82151E68;
		/* 82183304h case    8:*/		return 0x82183308;
	}
	return 0x82183308;
} // Block from 821832E4h-82183308h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82183308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183308);
		  /* 82183308h */ case    0:  		/* mr R5, R30 */
		/* 82183308h case    0:*/		regs.R5 = regs.R30;
		/* 82183308h case    0:*/		return 0x8218330C;
		  /* 8218330Ch */ case    1:  		/* mr R4, R24 */
		/* 8218330Ch case    1:*/		regs.R4 = regs.R24;
		/* 8218330Ch case    1:*/		return 0x82183310;
		  /* 82183310h */ case    2:  		/* bl -28792 */
		/* 82183310h case    2:*/		regs.LR = 0x82183314; return 0x8217C298;
		/* 82183310h case    2:*/		return 0x82183314;
		  /* 82183314h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82183314h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82183314h case    3:*/		return 0x82183318;
		  /* 82183318h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 82183318h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82183328;  }
		/* 82183318h case    4:*/		return 0x8218331C;
		  /* 8218331Ch */ case    5:  		/* li R4, 4800 */
		/* 8218331Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218331Ch case    5:*/		return 0x82183320;
		  /* 82183320h */ case    6:  		/* mr R3, R14 */
		/* 82183320h case    6:*/		regs.R3 = regs.R14;
		/* 82183320h case    6:*/		return 0x82183324;
		  /* 82183324h */ case    7:  		/* bl -201916 */
		/* 82183324h case    7:*/		regs.LR = 0x82183328; return 0x82151E68;
		/* 82183324h case    7:*/		return 0x82183328;
	}
	return 0x82183328;
} // Block from 82183308h-82183328h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183328);
		  /* 82183328h */ case    0:  		/* lwz R10, <#[R24 + 12]> */
		/* 82183328h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000000C) );
		/* 82183328h case    0:*/		return 0x8218332C;
		  /* 8218332Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8218332Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8218332Ch case    1:*/		return 0x82183330;
		  /* 82183330h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82183330h case    2:*/		if ( regs.CR[6].eq ) { return 0x82183344;  }
		/* 82183330h case    2:*/		return 0x82183334;
		  /* 82183334h */ case    3:  		/* lwz R11, <#[R10 + 8]> */
		/* 82183334h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82183334h case    3:*/		return 0x82183338;
		  /* 82183338h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82183338h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82183338h case    4:*/		return 0x8218333C;
		  /* 8218333Ch */ case    5:  		/* li R11, 1 */
		/* 8218333Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218333Ch case    5:*/		return 0x82183340;
		  /* 82183340h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 82183340h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82183348;  }
		/* 82183340h case    6:*/		return 0x82183344;
	}
	return 0x82183344;
} // Block from 82183328h-82183344h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82183344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183344);
		  /* 82183344h */ case    0:  		/* li R11, 0 */
		/* 82183344h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82183344h case    0:*/		return 0x82183348;
	}
	return 0x82183348;
} // Block from 82183344h-82183348h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183348);
		  /* 82183348h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82183348h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82183348h case    0:*/		return 0x8218334C;
		  /* 8218334Ch */ case    1:  		/* bc 4, CR0_EQ, 76 */
		/* 8218334Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82183398;  }
		/* 8218334Ch case    1:*/		return 0x82183350;
		  /* 82183350h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82183350h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82183350h case    2:*/		return 0x82183354;
		  /* 82183354h */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 82183354h case    3:*/		if ( regs.CR[6].eq ) { return 0x82183398;  }
		/* 82183354h case    3:*/		return 0x82183358;
		  /* 82183358h */ case    4:  		/* lwz R5, <#[R10]> */
		/* 82183358h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 82183358h case    4:*/		return 0x8218335C;
		  /* 8218335Ch */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 8218335Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8218335Ch case    5:*/		return 0x82183360;
		  /* 82183360h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 82183360h case    6:*/		if ( regs.CR[6].eq ) { return 0x82183398;  }
		/* 82183360h case    6:*/		return 0x82183364;
		  /* 82183364h */ case    7:  		/* lwz R11, <#[R5 + 8]> */
		/* 82183364h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82183364h case    7:*/		return 0x82183368;
		  /* 82183368h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82183368h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82183368h case    8:*/		return 0x8218336C;
		  /* 8218336Ch */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 8218336Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82183380;  }
		/* 8218336Ch case    9:*/		return 0x82183370;
		  /* 82183370h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 82183370h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82183370h case   10:*/		return 0x82183374;
		  /* 82183374h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82183374h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82183374h case   11:*/		return 0x82183378;
		  /* 82183378h */ case   12:  		/* li R11, 1 */
		/* 82183378h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82183378h case   12:*/		return 0x8218337C;
		  /* 8218337Ch */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 8218337Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82183384;  }
		/* 8218337Ch case   13:*/		return 0x82183380;
	}
	return 0x82183380;
} // Block from 82183348h-82183380h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82183380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183380);
		  /* 82183380h */ case    0:  		/* li R11, 0 */
		/* 82183380h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82183380h case    0:*/		return 0x82183384;
	}
	return 0x82183384;
} // Block from 82183380h-82183384h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183384);
		  /* 82183384h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82183384h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82183384h case    0:*/		return 0x82183388;
		  /* 82183388h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 82183388h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82183398;  }
		/* 82183388h case    1:*/		return 0x8218338C;
		  /* 8218338Ch */ case    2:  		/* mr R4, R24 */
		/* 8218338Ch case    2:*/		regs.R4 = regs.R24;
		/* 8218338Ch case    2:*/		return 0x82183390;
		  /* 82183390h */ case    3:  		/* mr R3, R14 */
		/* 82183390h case    3:*/		regs.R3 = regs.R14;
		/* 82183390h case    3:*/		return 0x82183394;
		  /* 82183394h */ case    4:  		/* bl -28924 */
		/* 82183394h case    4:*/		regs.LR = 0x82183398; return 0x8217C298;
		/* 82183394h case    4:*/		return 0x82183398;
	}
	return 0x82183398;
} // Block from 82183384h-82183398h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183398);
		  /* 82183398h */ case    0:  		/* lwz R11, <#[R24 + 28]> */
		/* 82183398h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 82183398h case    0:*/		return 0x8218339C;
		  /* 8218339Ch */ case    1:  		/* li R23, 1 */
		/* 8218339Ch case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 8218339Ch case    1:*/		return 0x821833A0;
		  /* 821833A0h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821833A0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821833A0h case    2:*/		return 0x821833A4;
		  /* 821833A4h */ case    3:  		/* stb R23, <#[R1 + 109]> */
		/* 821833A4h case    3:*/		cpu::mem::store8( regs, regs.R23, (uint32)(regs.R1 + 0x0000006D) );
		/* 821833A4h case    3:*/		return 0x821833A8;
		  /* 821833A8h */ case    4:  		/* bc 4, CR0_EQ, 100 */
		/* 821833A8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8218340C;  }
		/* 821833A8h case    4:*/		return 0x821833AC;
		  /* 821833ACh */ case    5:  		/* lwz R11, <#[R24 + 24]> */
		/* 821833ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000018) );
		/* 821833ACh case    5:*/		return 0x821833B0;
		  /* 821833B0h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821833B0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821833B0h case    6:*/		return 0x821833B4;
		  /* 821833B4h */ case    7:  		/* addic. R28, R11, -40 */
		/* 821833B4h case    7:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 821833B4h case    7:*/		return 0x821833B8;
		  /* 821833B8h */ case    8:  		/* bc 12, CR0_EQ, 84 */
		/* 821833B8h case    8:*/		if ( regs.CR[0].eq ) { return 0x8218340C;  }
		/* 821833B8h case    8:*/		return 0x821833BC;
		  /* 821833BCh */ case    9:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821833BCh case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821833BCh case    9:*/		return 0x821833C0;
		  /* 821833C0h */ case   10:  		/* lwz R11, <#[R11 + 36]> */
		/* 821833C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821833C0h case   10:*/		return 0x821833C4;
		  /* 821833C4h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821833C4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821833C4h case   11:*/		return 0x821833C8;
		  /* 821833C8h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 821833C8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821833D4;  }
		/* 821833C8h case   12:*/		return 0x821833CC;
		  /* 821833CCh */ case   13:  		/* li R25, 0 */
		/* 821833CCh case   13:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821833CCh case   13:*/		return 0x821833D0;
		  /* 821833D0h */ case   14:  		/* b 12 */
		/* 821833D0h case   14:*/		return 0x821833DC;
		/* 821833D0h case   14:*/		return 0x821833D4;
	}
	return 0x821833D4;
} // Block from 82183398h-821833D4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821833D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821833D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821833D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821833D4);
		  /* 821833D4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821833D4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821833D4h case    0:*/		return 0x821833D8;
		  /* 821833D8h */ case    1:  		/* addi R25, R11, -40 */
		/* 821833D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFD8);
		/* 821833D8h case    1:*/		return 0x821833DC;
	}
	return 0x821833DC;
} // Block from 821833D4h-821833DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821833DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821833DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821833DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821833DC);
		  /* 821833DCh */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821833DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821833DCh case    0:*/		return 0x821833E0;
		  /* 821833E0h */ case    1:  		/* rlwinm. R10, R11, 8, 31, 31 */
		/* 821833E0h case    1:*/		cpu::op::rlwinm<1,8,31,31>(regs,&regs.R10,regs.R11);
		/* 821833E0h case    1:*/		return 0x821833E4;
		  /* 821833E4h */ case    2:  		/* bc 4, CR0_EQ, 48 */
		/* 821833E4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82183414;  }
		/* 821833E4h case    2:*/		return 0x821833E8;
		  /* 821833E8h */ case    3:  		/* oris R11, R11, 256 */
		/* 821833E8h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821833E8h case    3:*/		return 0x821833EC;
		  /* 821833ECh */ case    4:  		/* stw R11, <#[R28 + 8]> */
		/* 821833ECh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821833ECh case    4:*/		return 0x821833F0;
		  /* 821833F0h */ case    5:  		/* mr R4, R28 */
		/* 821833F0h case    5:*/		regs.R4 = regs.R28;
		/* 821833F0h case    5:*/		return 0x821833F4;
		  /* 821833F4h */ case    6:  		/* lwz R5, <#[R14 + 660]> */
		/* 821833F4h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000294) );
		/* 821833F4h case    6:*/		return 0x821833F8;
		  /* 821833F8h */ case    7:  		/* mr R3, R14 */
		/* 821833F8h case    7:*/		regs.R3 = regs.R14;
		/* 821833F8h case    7:*/		return 0x821833FC;
		  /* 821833FCh */ case    8:  		/* bl 236044 */
		/* 821833FCh case    8:*/		regs.LR = 0x82183400; return 0x821BCE08;
		/* 821833FCh case    8:*/		return 0x82183400;
		  /* 82183400h */ case    9:  		/* mr R28, R25 */
		/* 82183400h case    9:*/		regs.R28 = regs.R25;
		/* 82183400h case    9:*/		return 0x82183404;
		  /* 82183404h */ case   10:  		/* cmplwi CR6, R25, 0 */
		/* 82183404h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82183404h case   10:*/		return 0x82183408;
		  /* 82183408h */ case   11:  		/* bc 4, CR6_EQ, -76 */
		/* 82183408h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821833BC;  }
		/* 82183408h case   11:*/		return 0x8218340C;
	}
	return 0x8218340C;
} // Block from 821833DCh-8218340Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8218340Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218340C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218340C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218340C);
		  /* 8218340Ch */ case    0:  		/* stb R23, <#[R1 + 108]> */
		/* 8218340Ch case    0:*/		cpu::mem::store8( regs, regs.R23, (uint32)(regs.R1 + 0x0000006C) );
		/* 8218340Ch case    0:*/		return 0x82183410;
		  /* 82183410h */ case    1:  		/* b 516 */
		/* 82183410h case    1:*/		return 0x82183614;
		/* 82183410h case    1:*/		return 0x82183414;
	}
	return 0x82183414;
} // Block from 8218340Ch-82183414h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183414);
		  /* 82183414h */ case    0:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82183414h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82183414h case    0:*/		return 0x82183418;
		  /* 82183418h */ case    1:  		/* cmplwi CR6, R11, 14080 */
		/* 82183418h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 82183418h case    1:*/		return 0x8218341C;
		  /* 8218341Ch */ case    2:  		/* bc 4, CR6_EQ, -28 */
		/* 8218341Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82183400;  }
		/* 8218341Ch case    2:*/		return 0x82183420;
		  /* 82183420h */ case    3:  		/* li R26, 0 */
		/* 82183420h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82183420h case    3:*/		return 0x82183424;
		  /* 82183424h */ case    4:  		/* addi R27, R28, 44 */
		/* 82183424h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x2C);
		/* 82183424h case    4:*/		return 0x82183428;
		  /* 82183428h */ case    5:  		/* lwz R11, <#[R28 + 8]> */
		/* 82183428h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82183428h case    5:*/		return 0x8218342C;
		  /* 8218342Ch */ case    6:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8218342Ch case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8218342Ch case    6:*/		return 0x82183430;
		  /* 82183430h */ case    7:  		/* cmplw CR6, R26, R11 */
		/* 82183430h case    7:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82183430h case    7:*/		return 0x82183434;
		  /* 82183434h */ case    8:  		/* bc 4, CR6_LT, -68 */
		/* 82183434h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821833F0;  }
		/* 82183434h case    8:*/		return 0x82183438;
		  /* 82183438h */ case    9:  		/* lwz R31, <#[R27]> */
		/* 82183438h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 82183438h case    9:*/		return 0x8218343C;
		  /* 8218343Ch */ case   10:  		/* mr R3, R14 */
		/* 8218343Ch case   10:*/		regs.R3 = regs.R14;
		/* 8218343Ch case   10:*/		return 0x82183440;
		  /* 82183440h */ case   11:  		/* lwz R30, <#[R31 + 12]> */
		/* 82183440h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82183440h case   11:*/		return 0x82183444;
		  /* 82183444h */ case   12:  		/* mr R4, R30 */
		/* 82183444h case   12:*/		regs.R4 = regs.R30;
		/* 82183444h case   12:*/		return 0x82183448;
		  /* 82183448h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 82183448h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82183448h case   13:*/		return 0x8218344C;
		  /* 8218344Ch */ case   14:  		/* oris R11, R11, 256 */
		/* 8218344Ch case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8218344Ch case   14:*/		return 0x82183450;
		  /* 82183450h */ case   15:  		/* stw R11, <#[R30 + 8]> */
		/* 82183450h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82183450h case   15:*/		return 0x82183454;
		  /* 82183454h */ case   16:  		/* lwz R5, <#[R14 + 660]> */
		/* 82183454h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000294) );
		/* 82183454h case   16:*/		return 0x82183458;
		  /* 82183458h */ case   17:  		/* bl 235952 */
		/* 82183458h case   17:*/		regs.LR = 0x8218345C; return 0x821BCE08;
		/* 82183458h case   17:*/		return 0x8218345C;
		  /* 8218345Ch */ case   18:  		/* lwz R11, <#[R30 + 4]> */
		/* 8218345Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8218345Ch case   18:*/		return 0x82183460;
		  /* 82183460h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82183460h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82183460h case   19:*/		return 0x82183464;
		  /* 82183464h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 82183464h case   20:*/		if ( regs.CR[6].eq ) { return 0x82183494;  }
		/* 82183464h case   20:*/		return 0x82183468;
		  /* 82183468h */ case   21:  		/* lwz R10, <#[R11 + 16]> */
		/* 82183468h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82183468h case   21:*/		return 0x8218346C;
		  /* 8218346Ch */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 8218346Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8218346Ch case   22:*/		return 0x82183470;
		  /* 82183470h */ case   23:  		/* bc 12, CR6_EQ, 28 */
		/* 82183470h case   23:*/		if ( regs.CR[6].eq ) { return 0x8218348C;  }
		/* 82183470h case   23:*/		return 0x82183474;
		  /* 82183474h */ case   24:  		/* lwz R9, <#[R10 + 8]> */
		/* 82183474h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82183474h case   24:*/		return 0x82183478;
		  /* 82183478h */ case   25:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 82183478h case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 82183478h case   25:*/		return 0x8218347C;
		  /* 8218347Ch */ case   26:  		/* cmplwi CR6, R9, 14080 */
		/* 8218347Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 8218347Ch case   26:*/		return 0x82183480;
		  /* 82183480h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 82183480h case   27:*/		if ( !regs.CR[6].eq ) { return 0x8218348C;  }
		/* 82183480h case   27:*/		return 0x82183484;
		  /* 82183484h */ case   28:  		/* cmplw CR6, R10, R28 */
		/* 82183484h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 82183484h case   28:*/		return 0x82183488;
		  /* 82183488h */ case   29:  		/* bc 4, CR6_EQ, 28 */
		/* 82183488h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821834A4;  }
		/* 82183488h case   29:*/		return 0x8218348C;
	}
	return 0x8218348C;
} // Block from 82183414h-8218348Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 8218348Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218348C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218348C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218348C);
		  /* 8218348Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8218348Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8218348Ch case    0:*/		return 0x82183490;
		  /* 82183490h */ case    1:  		/* b -48 */
		/* 82183490h case    1:*/		return 0x82183460;
		/* 82183490h case    1:*/		return 0x82183494;
	}
	return 0x82183494;
} // Block from 8218348Ch-82183494h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183494);
		  /* 82183494h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82183494h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82183494h case    0:*/		return 0x82183498;
		  /* 82183498h */ case    1:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 82183498h case    1:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 82183498h case    1:*/		return 0x8218349C;
		  /* 8218349Ch */ case    2:  		/* cmplwi CR6, R11, 16384 */
		/* 8218349Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 8218349Ch case    2:*/		return 0x821834A0;
		  /* 821834A0h */ case    3:  		/* bc 4, CR6_GT, 200 */
		/* 821834A0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82183568;  }
		/* 821834A0h case    3:*/		return 0x821834A4;
	}
	return 0x821834A4;
} // Block from 82183494h-821834A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821834A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821834A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821834A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821834A4);
		  /* 821834A4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821834A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821834A4h case    0:*/		return 0x821834A8;
		  /* 821834A8h */ case    1:  		/* rlwinm R5, R28, 0, 0, 29 */
		/* 821834A8h case    1:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R28);
		/* 821834A8h case    1:*/		return 0x821834AC;
		  /* 821834ACh */ case    2:  		/* mr R6, R31 */
		/* 821834ACh case    2:*/		regs.R6 = regs.R31;
		/* 821834ACh case    2:*/		return 0x821834B0;
		  /* 821834B0h */ case    3:  		/* mr R4, R24 */
		/* 821834B0h case    3:*/		regs.R4 = regs.R24;
		/* 821834B0h case    3:*/		return 0x821834B4;
		  /* 821834B4h */ case    4:  		/* mr R3, R14 */
		/* 821834B4h case    4:*/		regs.R3 = regs.R14;
		/* 821834B4h case    4:*/		return 0x821834B8;
		  /* 821834B8h */ case    5:  		/* rlwinm R29, R11, 27, 30, 31 */
		/* 821834B8h case    5:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R29,regs.R11);
		/* 821834B8h case    5:*/		return 0x821834BC;
		  /* 821834BCh */ case    6:  		/* bl 681916 */
		/* 821834BCh case    6:*/		regs.LR = 0x821834C0; return 0x82229C78;
		/* 821834BCh case    6:*/		return 0x821834C0;
		  /* 821834C0h */ case    7:  		/* lwz R31, <#[R31 + 12]> */
		/* 821834C0h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821834C0h case    7:*/		return 0x821834C4;
		  /* 821834C4h */ case    8:  		/* mr R3, R31 */
		/* 821834C4h case    8:*/		regs.R3 = regs.R31;
		/* 821834C4h case    8:*/		return 0x821834C8;
		  /* 821834C8h */ case    9:  		/* bl -45392 */
		/* 821834C8h case    9:*/		regs.LR = 0x821834CC; return 0x82178378;
		/* 821834C8h case    9:*/		return 0x821834CC;
		  /* 821834CCh */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821834CCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821834CCh case   10:*/		return 0x821834D0;
		  /* 821834D0h */ case   11:  		/* oris R11, R11, 256 */
		/* 821834D0h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821834D0h case   11:*/		return 0x821834D4;
		  /* 821834D4h */ case   12:  		/* stw R11, <#[R31 + 8]> */
		/* 821834D4h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821834D4h case   12:*/		return 0x821834D8;
		  /* 821834D8h */ case   13:  		/* lwz R10, <#[R30 + 8]> */
		/* 821834D8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821834D8h case   13:*/		return 0x821834DC;
		  /* 821834DCh */ case   14:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821834DCh case   14:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821834DCh case   14:*/		return 0x821834E0;
		  /* 821834E0h */ case   15:  		/* bc 12, CR0_EQ, 136 */
		/* 821834E0h case   15:*/		if ( regs.CR[0].eq ) { return 0x82183568;  }
		/* 821834E0h case   15:*/		return 0x821834E4;
		  /* 821834E4h */ case   16:  		/* oris R11, R11, 128 */
		/* 821834E4h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821834E4h case   16:*/		return 0x821834E8;
		  /* 821834E8h */ case   17:  		/* stw R11, <#[R31 + 8]> */
		/* 821834E8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821834E8h case   17:*/		return 0x821834EC;
		  /* 821834ECh */ case   18:  		/* lwz R11, <#[R30 + 16]> */
		/* 821834ECh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821834ECh case   18:*/		return 0x821834F0;
		  /* 821834F0h */ case   19:  		/* rlwinm. R10, R11, 0, 13, 15 */
		/* 821834F0h case   19:*/		cpu::op::rlwinm<1,0,13,15>(regs,&regs.R10,regs.R11);
		/* 821834F0h case   19:*/		return 0x821834F4;
		  /* 821834F4h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 821834F4h case   20:*/		if ( regs.CR[0].eq ) { return 0x82183504;  }
		/* 821834F4h case   20:*/		return 0x821834F8;
		  /* 821834F8h */ case   21:  		/* add R11, R29, R11 */
		/* 821834F8h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821834F8h case   21:*/		return 0x821834FC;
		  /* 821834FCh */ case   22:  		/* sth R11, <#[R31 + 18]> */
		/* 821834FCh case   22:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 821834FCh case   22:*/		return 0x82183500;
		  /* 82183500h */ case   23:  		/* b 16 */
		/* 82183500h case   23:*/		return 0x82183510;
		/* 82183500h case   23:*/		return 0x82183504;
	}
	return 0x82183504;
} // Block from 821834A4h-82183504h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82183504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183504);
		  /* 82183504h */ case    0:  		/* mr R3, R30 */
		/* 82183504h case    0:*/		regs.R3 = regs.R30;
		/* 82183504h case    0:*/		return 0x82183508;
		  /* 82183508h */ case    1:  		/* bl 992 */
		/* 82183508h case    1:*/		regs.LR = 0x8218350C; return 0x821838E8;
		/* 82183508h case    1:*/		return 0x8218350C;
		  /* 8218350Ch */ case    2:  		/* sth R3, <#[R31 + 18]> */
		/* 8218350Ch case    2:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 8218350Ch case    2:*/		return 0x82183510;
	}
	return 0x82183510;
} // Block from 82183504h-82183510h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183510);
		  /* 82183510h */ case    0:  		/* lwz R3, <#[R14 + 660]> */
		/* 82183510h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 82183510h case    0:*/		return 0x82183514;
		  /* 82183514h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 82183514h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82183514h case    1:*/		return 0x82183518;
		  /* 82183518h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82183518h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82183518h case    2:*/		return 0x8218351C;
		  /* 8218351Ch */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 8218351Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82183544;  }
		/* 8218351Ch case    3:*/		return 0x82183520;
		  /* 82183520h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 82183520h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82183520h case    4:*/		return 0x82183524;
		  /* 82183524h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82183524h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82183524h case    5:*/		return 0x82183528;
		  /* 82183528h */ case    6:  		/* addic. R11, R11, -4 */
		/* 82183528h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82183528h case    6:*/		return 0x8218352C;
		  /* 8218352Ch */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 8218352Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82183544;  }
		/* 8218352Ch case    7:*/		return 0x82183530;
		  /* 82183530h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 82183530h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82183530h case    8:*/		return 0x82183534;
		  /* 82183534h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 82183534h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82183534h case    9:*/		return 0x82183538;
		  /* 82183538h */ case   10:  		/* addi R10, R10, 1 */
		/* 82183538h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82183538h case   10:*/		return 0x8218353C;
		  /* 8218353Ch */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 8218353Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8218353Ch case   11:*/		return 0x82183540;
		  /* 82183540h */ case   12:  		/* bc 4, CR6_GT, 16 */
		/* 82183540h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82183550;  }
		/* 82183540h case   12:*/		return 0x82183544;
	}
	return 0x82183544;
} // Block from 82183510h-82183544h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82183544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183544);
		  /* 82183544h */ case    0:  		/* li R4, 1 */
		/* 82183544h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82183544h case    0:*/		return 0x82183548;
		  /* 82183548h */ case    1:  		/* bl 39808 */
		/* 82183548h case    1:*/		regs.LR = 0x8218354C; return 0x8218D0C8;
		/* 82183548h case    1:*/		return 0x8218354C;
		  /* 8218354Ch */ case    2:  		/* mr R11, R3 */
		/* 8218354Ch case    2:*/		regs.R11 = regs.R3;
		/* 8218354Ch case    2:*/		return 0x82183550;
	}
	return 0x82183550;
} // Block from 82183544h-82183550h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183550);
		  /* 82183550h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82183550h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82183550h case    0:*/		return 0x82183554;
		  /* 82183554h */ case    1:  		/* addi R9, R10, 4 */
		/* 82183554h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 82183554h case    1:*/		return 0x82183558;
		  /* 82183558h */ case    2:  		/* addi R8, R10, 1 */
		/* 82183558h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82183558h case    2:*/		return 0x8218355C;
		  /* 8218355Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 8218355Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 8218355Ch case    3:*/		return 0x82183560;
		  /* 82183560h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 82183560h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82183560h case    4:*/		return 0x82183564;
		  /* 82183564h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 82183564h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82183564h case    5:*/		return 0x82183568;
	}
	return 0x82183568;
} // Block from 82183550h-82183568h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183568);
		  /* 82183568h */ case    0:  		/* addi R26, R26, 1 */
		/* 82183568h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82183568h case    0:*/		return 0x8218356C;
		  /* 8218356Ch */ case    1:  		/* addi R27, R27, 4 */
		/* 8218356Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8218356Ch case    1:*/		return 0x82183570;
		  /* 82183570h */ case    2:  		/* b -328 */
		/* 82183570h case    2:*/		return 0x82183428;
		/* 82183570h case    2:*/		return 0x82183574;
	}
	return 0x82183574;
} // Block from 82183568h-82183574h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183574);
		  /* 82183574h */ case    0:  		/* lwz R31, <#[R1 + 112]> */
		/* 82183574h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 82183574h case    0:*/		return 0x82183578;
	}
	return 0x82183578;
} // Block from 82183574h-82183578h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183578);
		  /* 82183578h */ case    0:  		/* addi R8, R1, 96 */
		/* 82183578h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 82183578h case    0:*/		return 0x8218357C;
		  /* 8218357Ch */ case    1:  		/* mr R7, R27 */
		/* 8218357Ch case    1:*/		regs.R7 = regs.R27;
		/* 8218357Ch case    1:*/		return 0x82183580;
		  /* 82183580h */ case    2:  		/* mr R6, R26 */
		/* 82183580h case    2:*/		regs.R6 = regs.R26;
		/* 82183580h case    2:*/		return 0x82183584;
		  /* 82183584h */ case    3:  		/* li R5, 0 */
		/* 82183584h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82183584h case    3:*/		return 0x82183588;
		  /* 82183588h */ case    4:  		/* mr R4, R31 */
		/* 82183588h case    4:*/		regs.R4 = regs.R31;
		/* 82183588h case    4:*/		return 0x8218358C;
		  /* 8218358Ch */ case    5:  		/* mr R3, R14 */
		/* 8218358Ch case    5:*/		regs.R3 = regs.R14;
		/* 8218358Ch case    5:*/		return 0x82183590;
		  /* 82183590h */ case    6:  		/* bl -41040 */
		/* 82183590h case    6:*/		regs.LR = 0x82183594; return 0x82179540;
		/* 82183590h case    6:*/		return 0x82183594;
		  /* 82183594h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82183594h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82183594h case    7:*/		return 0x82183598;
		  /* 82183598h */ case    8:  		/* bc 12, CR0_EQ, 124 */
		/* 82183598h case    8:*/		if ( regs.CR[0].eq ) { return 0x82183614;  }
		/* 82183598h case    8:*/		return 0x8218359C;
		  /* 8218359Ch */ case    9:  		/* addi R8, R1, 97 */
		/* 8218359Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x61);
		/* 8218359Ch case    9:*/		return 0x821835A0;
		  /* 821835A0h */ case   10:  		/* lwz R7, <#[R1 + 140]> */
		/* 821835A0h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000008C) );
		/* 821835A0h case   10:*/		return 0x821835A4;
		  /* 821835A4h */ case   11:  		/* li R5, 0 */
		/* 821835A4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821835A4h case   11:*/		return 0x821835A8;
		  /* 821835A8h */ case   12:  		/* lwz R6, <#[R1 + 124]> */
		/* 821835A8h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000007C) );
		/* 821835A8h case   12:*/		return 0x821835AC;
		  /* 821835ACh */ case   13:  		/* mr R3, R14 */
		/* 821835ACh case   13:*/		regs.R3 = regs.R14;
		/* 821835ACh case   13:*/		return 0x821835B0;
		  /* 821835B0h */ case   14:  		/* lwz R4, <#[R1 + 100]> */
		/* 821835B0h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 821835B0h case   14:*/		return 0x821835B4;
		  /* 821835B4h */ case   15:  		/* bl -41076 */
		/* 821835B4h case   15:*/		regs.LR = 0x821835B8; return 0x82179540;
		/* 821835B4h case   15:*/		return 0x821835B8;
		  /* 821835B8h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821835B8h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821835B8h case   16:*/		return 0x821835BC;
		  /* 821835BCh */ case   17:  		/* bc 12, CR0_EQ, 88 */
		/* 821835BCh case   17:*/		if ( regs.CR[0].eq ) { return 0x82183614;  }
		/* 821835BCh case   17:*/		return 0x821835C0;
		  /* 821835C0h */ case   18:  		/* lwz R29, <#[R1 + 460]> */
		/* 821835C0h case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000001CC) );
		/* 821835C0h case   18:*/		return 0x821835C4;
		  /* 821835C4h */ case   19:  		/* li R6, 0 */
		/* 821835C4h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821835C4h case   19:*/		return 0x821835C8;
		  /* 821835C8h */ case   20:  		/* lbz R31, <#[R1 + 98]> */
		/* 821835C8h case   20:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000062) );
		/* 821835C8h case   20:*/		return 0x821835CC;
		  /* 821835CCh */ case   21:  		/* mr R3, R14 */
		/* 821835CCh case   21:*/		regs.R3 = regs.R14;
		/* 821835CCh case   21:*/		return 0x821835D0;
		  /* 821835D0h */ case   22:  		/* mr R4, R29 */
		/* 821835D0h case   22:*/		regs.R4 = regs.R29;
		/* 821835D0h case   22:*/		return 0x821835D4;
		  /* 821835D4h */ case   23:  		/* lbz R8, <#[R1 + 96]> */
		/* 821835D4h case   23:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 821835D4h case   23:*/		return 0x821835D8;
		  /* 821835D8h */ case   24:  		/* mr R7, R31 */
		/* 821835D8h case   24:*/		regs.R7 = regs.R31;
		/* 821835D8h case   24:*/		return 0x821835DC;
		  /* 821835DCh */ case   25:  		/* lwz R5, <#[R1 + 112]> */
		/* 821835DCh case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821835DCh case   25:*/		return 0x821835E0;
		  /* 821835E0h */ case   26:  		/* bl -40200 */
		/* 821835E0h case   26:*/		regs.LR = 0x821835E4; return 0x821798D8;
		/* 821835E0h case   26:*/		return 0x821835E4;
		  /* 821835E4h */ case   27:  		/* mr R11, R31 */
		/* 821835E4h case   27:*/		regs.R11 = regs.R31;
		/* 821835E4h case   27:*/		return 0x821835E8;
		  /* 821835E8h */ case   28:  		/* lbz R8, <#[R1 + 97]> */
		/* 821835E8h case   28:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000061) );
		/* 821835E8h case   28:*/		return 0x821835EC;
		  /* 821835ECh */ case   29:  		/* li R6, 0 */
		/* 821835ECh case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821835ECh case   29:*/		return 0x821835F0;
		  /* 821835F0h */ case   30:  		/* cntlzw R11, R11 */
		/* 821835F0h case   30:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821835F0h case   30:*/		return 0x821835F4;
		  /* 821835F4h */ case   31:  		/* rlwinm R7, R11, 27, 31, 31 */
		/* 821835F4h case   31:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R7,regs.R11);
		/* 821835F4h case   31:*/		return 0x821835F8;
	}
	return 0x821835F8;
} // Block from 82183578h-821835F8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821835F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821835F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821835F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821835F8);
		  /* 821835F8h */ case    0:  		/* mr R4, R29 */
		/* 821835F8h case    0:*/		regs.R4 = regs.R29;
		/* 821835F8h case    0:*/		return 0x821835FC;
		  /* 821835FCh */ case    1:  		/* lwz R5, <#[R1 + 100]> */
		/* 821835FCh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 821835FCh case    1:*/		return 0x82183600;
		  /* 82183600h */ case    2:  		/* mr R3, R14 */
		/* 82183600h case    2:*/		regs.R3 = regs.R14;
		/* 82183600h case    2:*/		return 0x82183604;
		  /* 82183604h */ case    3:  		/* bl -40236 */
		/* 82183604h case    3:*/		regs.LR = 0x82183608; return 0x821798D8;
		/* 82183604h case    3:*/		return 0x82183608;
		  /* 82183608h */ case    4:  		/* lwz R11, <#[R29 + 48]> */
		/* 82183608h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 82183608h case    4:*/		return 0x8218360C;
		  /* 8218360Ch */ case    5:  		/* oris R11, R11, 3072 */
		/* 8218360Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC00);
		/* 8218360Ch case    5:*/		return 0x82183610;
		  /* 82183610h */ case    6:  		/* stw R11, <#[R29 + 48]> */
		/* 82183610h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 82183610h case    6:*/		return 0x82183614;
	}
	return 0x82183614;
} // Block from 821835F8h-82183614h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82183614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183614);
		  /* 82183614h */ case    0:  		/* lwz R31, <#[R1 + 132]> */
		/* 82183614h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000084) );
		/* 82183614h case    0:*/		return 0x82183618;
		  /* 82183618h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82183618h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82183618h case    1:*/		return 0x8218361C;
		  /* 8218361Ch */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8218361Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82183638;  }
		/* 8218361Ch case    2:*/		return 0x82183620;
		  /* 82183620h */ case    3:  		/* mr R3, R31 */
		/* 82183620h case    3:*/		regs.R3 = regs.R31;
		/* 82183620h case    3:*/		return 0x82183624;
		  /* 82183624h */ case    4:  		/* bl -28268 */
		/* 82183624h case    4:*/		regs.LR = 0x82183628; return 0x8217C7B8;
		/* 82183624h case    4:*/		return 0x82183628;
		  /* 82183628h */ case    5:  		/* lwz R10, <#[R14 + 976]> */
		/* 82183628h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x000003D0) );
		/* 82183628h case    5:*/		return 0x8218362C;
		  /* 8218362Ch */ case    6:  		/* addi R11, R14, 972 */
		/* 8218362Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0x3CC);
		/* 8218362Ch case    6:*/		return 0x82183630;
		  /* 82183630h */ case    7:  		/* stw R10, <#[R31]> */
		/* 82183630h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82183630h case    7:*/		return 0x82183634;
		  /* 82183634h */ case    8:  		/* stw R31, <#[R14 + 976]> */
		/* 82183634h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R14 + 0x000003D0) );
		/* 82183634h case    8:*/		return 0x82183638;
	}
	return 0x82183638;
} // Block from 82183614h-82183638h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82183638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183638);
		  /* 82183638h */ case    0:  		/* lwz R31, <#[R1 + 116]> */
		/* 82183638h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 82183638h case    0:*/		return 0x8218363C;
		  /* 8218363Ch */ case    1:  		/* b 28 */
		/* 8218363Ch case    1:*/		return 0x82183658;
		/* 8218363Ch case    1:*/		return 0x82183640;
		  /* 82183640h */ case    2:  		/* mr R4, R31 */
		/* 82183640h case    2:*/		regs.R4 = regs.R31;
		/* 82183640h case    2:*/		return 0x82183644;
		  /* 82183644h */ case    3:  		/* lwz R31, <#[R31 + 32]> */
		/* 82183644h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000020) );
		/* 82183644h case    3:*/		return 0x82183648;
		  /* 82183648h */ case    4:  		/* li R6, 1 */
		/* 82183648h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82183648h case    4:*/		return 0x8218364C;
		  /* 8218364Ch */ case    5:  		/* li R5, 0 */
		/* 8218364Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218364Ch case    5:*/		return 0x82183650;
		  /* 82183650h */ case    6:  		/* mr R3, R14 */
		/* 82183650h case    6:*/		regs.R3 = regs.R14;
		/* 82183650h case    6:*/		return 0x82183654;
		  /* 82183654h */ case    7:  		/* bl 687476 */
		/* 82183654h case    7:*/		regs.LR = 0x82183658; return 0x8222B3C8;
		/* 82183654h case    7:*/		return 0x82183658;
	}
	return 0x82183658;
} // Block from 82183638h-82183658h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183658);
		  /* 82183658h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82183658h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82183658h case    0:*/		return 0x8218365C;
		  /* 8218365Ch */ case    1:  		/* bc 4, CR6_EQ, -28 */
		/* 8218365Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82183640;  }
		/* 8218365Ch case    1:*/		return 0x82183660;
		  /* 82183660h */ case    2:  		/* lwz R29, <#[R1 + 144]> */
		/* 82183660h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 82183660h case    2:*/		return 0x82183664;
		  /* 82183664h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 82183664h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82183664h case    3:*/		return 0x82183668;
		  /* 82183668h */ case    4:  		/* bc 12, CR6_EQ, 204 */
		/* 82183668h case    4:*/		if ( regs.CR[6].eq ) { return 0x82183734;  }
		/* 82183668h case    4:*/		return 0x8218366C;
		  /* 8218366Ch */ case    5:  		/* lwz R11, <#[R29 + 4]> */
		/* 8218366Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8218366Ch case    5:*/		return 0x82183670;
		  /* 82183670h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82183670h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82183670h case    6:*/		return 0x82183674;
		  /* 82183674h */ case    7:  		/* bc 4, CR0_EQ, 168 */
		/* 82183674h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8218371C;  }
		/* 82183674h case    7:*/		return 0x82183678;
		  /* 82183678h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 82183678h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82183678h case    8:*/		return 0x8218367C;
		  /* 8218367Ch */ case    9:  		/* bc 12, CR0_EQ, 160 */
		/* 8218367Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8218371C;  }
		/* 8218367Ch case    9:*/		return 0x82183680;
		  /* 82183680h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 82183680h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82183680h case   10:*/		return 0x82183684;
		  /* 82183684h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82183684h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82183684h case   11:*/		return 0x82183688;
		  /* 82183688h */ case   12:  		/* addi R4, R11, -4 */
		/* 82183688h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82183688h case   12:*/		return 0x8218368C;
		  /* 8218368Ch */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 8218368Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8218368Ch case   13:*/		return 0x82183690;
		  /* 82183690h */ case   14:  		/* addi R10, R11, 3 */
		/* 82183690h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82183690h case   14:*/		return 0x82183694;
		  /* 82183694h */ case   15:  		/* addic. R11, R11, -1 */
		/* 82183694h case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82183694h case   15:*/		return 0x82183698;
		  /* 82183698h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82183698h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82183698h case   16:*/		return 0x8218369C;
		  /* 8218369Ch */ case   17:  		/* lwzx R31, <#[R10 + R4]> */
		/* 8218369Ch case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8218369Ch case   17:*/		return 0x821836A0;
		  /* 821836A0h */ case   18:  		/* stw R11, <#[R4 + 8]> */
		/* 821836A0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821836A0h case   18:*/		return 0x821836A4;
		  /* 821836A4h */ case   19:  		/* bc 4, CR0_EQ, 60 */
		/* 821836A4h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821836E0;  }
		/* 821836A4h case   19:*/		return 0x821836A8;
		  /* 821836A8h */ case   20:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821836A8h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821836A8h case   20:*/		return 0x821836AC;
		  /* 821836ACh */ case   21:  		/* mr R3, R29 */
		/* 821836ACh case   21:*/		regs.R3 = regs.R29;
		/* 821836ACh case   21:*/		return 0x821836B0;
		  /* 821836B0h */ case   22:  		/* lwz R10, <#[R11 + 4]> */
		/* 821836B0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821836B0h case   22:*/		return 0x821836B4;
		  /* 821836B4h */ case   23:  		/* lwz R9, <#[R11]> */
		/* 821836B4h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821836B4h case   23:*/		return 0x821836B8;
		  /* 821836B8h */ case   24:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821836B8h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821836B8h case   24:*/		return 0x821836BC;
		  /* 821836BCh */ case   25:  		/* stw R9, <#[R10]> */
		/* 821836BCh case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821836BCh case   25:*/		return 0x821836C0;
		  /* 821836C0h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 821836C0h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821836C0h case   26:*/		return 0x821836C4;
		  /* 821836C4h */ case   27:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821836C4h case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821836C4h case   27:*/		return 0x821836C8;
		  /* 821836C8h */ case   28:  		/* lwz R11, <#[R11 + 4]> */
		/* 821836C8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821836C8h case   28:*/		return 0x821836CC;
		  /* 821836CCh */ case   29:  		/* stw R11, <#[R10]> */
		/* 821836CCh case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821836CCh case   29:*/		return 0x821836D0;
		  /* 821836D0h */ case   30:  		/* lwz R11, <#[R4 + 12]> */
		/* 821836D0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821836D0h case   30:*/		return 0x821836D4;
		  /* 821836D4h */ case   31:  		/* addi R11, R11, 4 */
		/* 821836D4h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821836D4h case   31:*/		return 0x821836D8;
		  /* 821836D8h */ case   32:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821836D8h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821836D8h case   32:*/		return 0x821836DC;
		  /* 821836DCh */ case   33:  		/* bl -202964 */
		/* 821836DCh case   33:*/		regs.LR = 0x821836E0; return 0x82151E08;
		/* 821836DCh case   33:*/		return 0x821836E0;
	}
	return 0x821836E0;
} // Block from 82183658h-821836E0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821836E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821836E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821836E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821836E0);
		  /* 821836E0h */ case    0:  		/* mr R5, R14 */
		/* 821836E0h case    0:*/		regs.R5 = regs.R14;
		/* 821836E0h case    0:*/		return 0x821836E4;
		  /* 821836E4h */ case    1:  		/* lwz R30, <#[R31 + 12]> */
		/* 821836E4h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821836E4h case    1:*/		return 0x821836E8;
		  /* 821836E8h */ case    2:  		/* mr R4, R31 */
		/* 821836E8h case    2:*/		regs.R4 = regs.R31;
		/* 821836E8h case    2:*/		return 0x821836EC;
		  /* 821836ECh */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 821836ECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 821836ECh case    3:*/		return 0x821836F0;
		  /* 821836F0h */ case    4:  		/* bl -44512 */
		/* 821836F0h case    4:*/		regs.LR = 0x821836F4; return 0x82178910;
		/* 821836F0h case    4:*/		return 0x821836F4;
		  /* 821836F4h */ case    5:  		/* mr R3, R30 */
		/* 821836F4h case    5:*/		regs.R3 = regs.R30;
		/* 821836F4h case    5:*/		return 0x821836F8;
		  /* 821836F8h */ case    6:  		/* bl -126328 */
		/* 821836F8h case    6:*/		regs.LR = 0x821836FC; return 0x82164980;
		/* 821836F8h case    6:*/		return 0x821836FC;
		  /* 821836FCh */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821836FCh case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821836FCh case    7:*/		return 0x82183700;
		  /* 82183700h */ case    8:  		/* bc 12, CR0_EQ, -148 */
		/* 82183700h case    8:*/		if ( regs.CR[0].eq ) { return 0x8218366C;  }
		/* 82183700h case    8:*/		return 0x82183704;
		  /* 82183704h */ case    9:  		/* li R6, 1 */
		/* 82183704h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82183704h case    9:*/		return 0x82183708;
		  /* 82183708h */ case   10:  		/* li R5, 0 */
		/* 82183708h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82183708h case   10:*/		return 0x8218370C;
		  /* 8218370Ch */ case   11:  		/* mr R4, R30 */
		/* 8218370Ch case   11:*/		regs.R4 = regs.R30;
		/* 8218370Ch case   11:*/		return 0x82183710;
		  /* 82183710h */ case   12:  		/* mr R3, R14 */
		/* 82183710h case   12:*/		regs.R3 = regs.R14;
		/* 82183710h case   12:*/		return 0x82183714;
		  /* 82183714h */ case   13:  		/* bl 687284 */
		/* 82183714h case   13:*/		regs.LR = 0x82183718; return 0x8222B3C8;
		/* 82183714h case   13:*/		return 0x82183718;
		  /* 82183718h */ case   14:  		/* b -172 */
		/* 82183718h case   14:*/		return 0x8218366C;
		/* 82183718h case   14:*/		return 0x8218371C;
	}
	return 0x8218371C;
} // Block from 821836E0h-8218371Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8218371Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218371C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218371C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218371C);
		  /* 8218371Ch */ case    0:  		/* mr R3, R29 */
		/* 8218371Ch case    0:*/		regs.R3 = regs.R29;
		/* 8218371Ch case    0:*/		return 0x82183720;
		  /* 82183720h */ case    1:  		/* bl 451264 */
		/* 82183720h case    1:*/		regs.LR = 0x82183724; return 0x821F19E0;
		/* 82183720h case    1:*/		return 0x82183724;
		  /* 82183724h */ case    2:  		/* lwz R10, <#[R14 + 976]> */
		/* 82183724h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x000003D0) );
		/* 82183724h case    2:*/		return 0x82183728;
		  /* 82183728h */ case    3:  		/* addi R11, R14, 972 */
		/* 82183728h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0x3CC);
		/* 82183728h case    3:*/		return 0x8218372C;
		  /* 8218372Ch */ case    4:  		/* stw R10, <#[R29]> */
		/* 8218372Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8218372Ch case    4:*/		return 0x82183730;
		  /* 82183730h */ case    5:  		/* stw R29, <#[R14 + 976]> */
		/* 82183730h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R14 + 0x000003D0) );
		/* 82183730h case    5:*/		return 0x82183734;
	}
	return 0x82183734;
} // Block from 8218371Ch-82183734h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183734);
		  /* 82183734h */ case    0:  		/* lbz R11, <#[R1 + 109]> */
		/* 82183734h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006D) );
		/* 82183734h case    0:*/		return 0x82183738;
		  /* 82183738h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 82183738h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82183738h case    1:*/		return 0x8218373C;
		  /* 8218373Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8218373Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82183748;  }
		/* 8218373Ch case    2:*/		return 0x82183740;
		  /* 82183740h */ case    3:  		/* mr R3, R14 */
		/* 82183740h case    3:*/		regs.R3 = regs.R14;
		/* 82183740h case    3:*/		return 0x82183744;
		  /* 82183744h */ case    4:  		/* bl 424924 */
		/* 82183744h case    4:*/		regs.LR = 0x82183748; return 0x821EB320;
		/* 82183744h case    4:*/		return 0x82183748;
	}
	return 0x82183748;
} // Block from 82183734h-82183748h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183748);
		  /* 82183748h */ case    0:  		/* lbz R3, <#[R1 + 108]> */
		/* 82183748h case    0:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000006C) );
		/* 82183748h case    0:*/		return 0x8218374C;
		  /* 8218374Ch */ case    1:  		/* b 8 */
		/* 8218374Ch case    1:*/		return 0x82183754;
		/* 8218374Ch case    1:*/		return 0x82183750;
	}
	return 0x82183750;
} // Block from 82183748h-82183750h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183750);
		  /* 82183750h */ case    0:  		/* li R3, 0 */
		/* 82183750h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82183750h case    0:*/		return 0x82183754;
	}
	return 0x82183754;
} // Block from 82183750h-82183754h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183754);
		  /* 82183754h */ case    0:  		/* addi R1, R1, 432 */
		/* 82183754h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 82183754h case    0:*/		return 0x82183758;
		  /* 82183758h */ case    1:  		/* b -992488 */
		/* 82183758h case    1:*/		return 0x82091270;
		/* 82183758h case    1:*/		return 0x8218375C;
		  /* 8218375Ch */ case    2:  		/* nop */
		/* 8218375Ch case    2:*/		cpu::op::nop();
		/* 8218375Ch case    2:*/		return 0x82183760;
	}
	return 0x82183760;
} // Block from 82183754h-82183760h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183760);
		  /* 82183760h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 82183760h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82183760h case    0:*/		return 0x82183764;
		  /* 82183764h */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 82183764h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82183764h case    1:*/		return 0x82183768;
		  /* 82183768h */ case    2:  		/* lis R11, -28311 */
		/* 82183768h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 82183768h case    2:*/		return 0x8218376C;
		  /* 8218376Ch */ case    3:  		/* lis R10, 0 */
		/* 8218376Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 8218376Ch case    3:*/		return 0x82183770;
		  /* 82183770h */ case    4:  		/* ori R11, R11, 5192 */
		/* 82183770h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 82183770h case    4:*/		return 0x82183774;
		  /* 82183774h */ case    5:  		/* ori R10, R10, 36262 */
		/* 82183774h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 82183774h case    5:*/		return 0x82183778;
		  /* 82183778h */ case    6:  		/* rlwinm R9, R3, 4, 28, 31 */
		/* 82183778h case    6:*/		cpu::op::rlwinm<0,4,28,31>(regs,&regs.R9,regs.R3);
		/* 82183778h case    6:*/		return 0x8218377C;
		  /* 8218377Ch */ case    7:  		/* rldimi R11, R10, 32, 0 */
		/* 8218377Ch case    7:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 8218377Ch case    7:*/		return 0x82183780;
		  /* 82183780h */ case    8:  		/* rlwinm R10, R3, 8, 28, 31 */
		/* 82183780h case    8:*/		cpu::op::rlwinm<0,8,28,31>(regs,&regs.R10,regs.R3);
		/* 82183780h case    8:*/		return 0x82183784;
		  /* 82183784h */ case    9:  		/* srd R7, R11, R9 */
		/* 82183784h case    9:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R11,regs.R9);
		/* 82183784h case    9:*/		return 0x82183788;
		  /* 82183788h */ case   10:  		/* srd R6, R11, R10 */
		/* 82183788h case   10:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 82183788h case   10:*/		return 0x8218378C;
		  /* 8218378Ch */ case   11:  		/* rlwinm R8, R3, 12, 28, 31 */
		/* 8218378Ch case   11:*/		cpu::op::rlwinm<0,12,28,31>(regs,&regs.R8,regs.R3);
		/* 8218378Ch case   11:*/		return 0x82183790;
		  /* 82183790h */ case   12:  		/* srd R7, R7, R9 */
		/* 82183790h case   12:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 82183790h case   12:*/		return 0x82183794;
		  /* 82183794h */ case   13:  		/* srd R6, R6, R10 */
		/* 82183794h case   13:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R6,regs.R10);
		/* 82183794h case   13:*/		return 0x82183798;
		  /* 82183798h */ case   14:  		/* srd R5, R11, R8 */
		/* 82183798h case   14:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R11,regs.R8);
		/* 82183798h case   14:*/		return 0x8218379C;
		  /* 8218379Ch */ case   15:  		/* rlwinm R4, R3, 16, 28, 31 */
		/* 8218379Ch case   15:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R4,regs.R3);
		/* 8218379Ch case   15:*/		return 0x821837A0;
		  /* 821837A0h */ case   16:  		/* srd R9, R7, R9 */
		/* 821837A0h case   16:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821837A0h case   16:*/		return 0x821837A4;
		  /* 821837A4h */ case   17:  		/* srd R10, R6, R10 */
		/* 821837A4h case   17:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821837A4h case   17:*/		return 0x821837A8;
		  /* 821837A8h */ case   18:  		/* srd R7, R5, R8 */
		/* 821837A8h case   18:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R5,regs.R8);
		/* 821837A8h case   18:*/		return 0x821837AC;
		  /* 821837ACh */ case   19:  		/* srd R6, R11, R4 */
		/* 821837ACh case   19:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R11,regs.R4);
		/* 821837ACh case   19:*/		return 0x821837B0;
		  /* 821837B0h */ case   20:  		/* rlwinm R9, R9, 0, 29, 31 */
		/* 821837B0h case   20:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R9);
		/* 821837B0h case   20:*/		return 0x821837B4;
		  /* 821837B4h */ case   21:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 821837B4h case   21:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821837B4h case   21:*/		return 0x821837B8;
		  /* 821837B8h */ case   22:  		/* rlwinm R5, R3, 20, 28, 31 */
		/* 821837B8h case   22:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R5,regs.R3);
		/* 821837B8h case   22:*/		return 0x821837BC;
		  /* 821837BCh */ case   23:  		/* srd R8, R7, R8 */
		/* 821837BCh case   23:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821837BCh case   23:*/		return 0x821837C0;
		  /* 821837C0h */ case   24:  		/* srd R6, R6, R4 */
		/* 821837C0h case   24:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R6,regs.R4);
		/* 821837C0h case   24:*/		return 0x821837C4;
		  /* 821837C4h */ case   25:  		/* add R9, R9, R10 */
		/* 821837C4h case   25:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821837C4h case   25:*/		return 0x821837C8;
		  /* 821837C8h */ case   26:  		/* srd R7, R11, R5 */
		/* 821837C8h case   26:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R11,regs.R5);
		/* 821837C8h case   26:*/		return 0x821837CC;
		  /* 821837CCh */ case   27:  		/* rlwinm R10, R8, 0, 29, 31 */
		/* 821837CCh case   27:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R8);
		/* 821837CCh case   27:*/		return 0x821837D0;
		  /* 821837D0h */ case   28:  		/* rlwinm R31, R3, 24, 28, 31 */
		/* 821837D0h case   28:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R31,regs.R3);
		/* 821837D0h case   28:*/		return 0x821837D4;
		  /* 821837D4h */ case   29:  		/* srd R8, R6, R4 */
		/* 821837D4h case   29:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R6,regs.R4);
		/* 821837D4h case   29:*/		return 0x821837D8;
		  /* 821837D8h */ case   30:  		/* srd R7, R7, R5 */
		/* 821837D8h case   30:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 821837D8h case   30:*/		return 0x821837DC;
		  /* 821837DCh */ case   31:  		/* add R9, R9, R10 */
		/* 821837DCh case   31:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821837DCh case   31:*/		return 0x821837E0;
		  /* 821837E0h */ case   32:  		/* srd R6, R11, R31 */
		/* 821837E0h case   32:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R11,regs.R31);
		/* 821837E0h case   32:*/		return 0x821837E4;
		  /* 821837E4h */ case   33:  		/* rlwinm R4, R3, 28, 28, 31 */
		/* 821837E4h case   33:*/		cpu::op::rlwinm<0,28,28,31>(regs,&regs.R4,regs.R3);
		/* 821837E4h case   33:*/		return 0x821837E8;
		  /* 821837E8h */ case   34:  		/* rlwinm R10, R8, 0, 29, 31 */
		/* 821837E8h case   34:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R8);
		/* 821837E8h case   34:*/		return 0x821837EC;
		  /* 821837ECh */ case   35:  		/* srd R8, R7, R5 */
		/* 821837ECh case   35:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R7,regs.R5);
		/* 821837ECh case   35:*/		return 0x821837F0;
		  /* 821837F0h */ case   36:  		/* srd R7, R6, R31 */
		/* 821837F0h case   36:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R6,regs.R31);
		/* 821837F0h case   36:*/		return 0x821837F4;
		  /* 821837F4h */ case   37:  		/* srd R6, R11, R4 */
		/* 821837F4h case   37:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R11,regs.R4);
		/* 821837F4h case   37:*/		return 0x821837F8;
		  /* 821837F8h */ case   38:  		/* mr R5, R11 */
		/* 821837F8h case   38:*/		regs.R5 = regs.R11;
		/* 821837F8h case   38:*/		return 0x821837FC;
		  /* 821837FCh */ case   39:  		/* add R10, R9, R10 */
		/* 821837FCh case   39:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821837FCh case   39:*/		return 0x82183800;
		  /* 82183800h */ case   40:  		/* rlwinm R30, R3, 0, 28, 31 */
		/* 82183800h case   40:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R30,regs.R3);
		/* 82183800h case   40:*/		return 0x82183804;
		  /* 82183804h */ case   41:  		/* rlwinm R11, R8, 0, 29, 31 */
		/* 82183804h case   41:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R8);
		/* 82183804h case   41:*/		return 0x82183808;
		  /* 82183808h */ case   42:  		/* srd R9, R7, R31 */
		/* 82183808h case   42:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R7,regs.R31);
		/* 82183808h case   42:*/		return 0x8218380C;
		  /* 8218380Ch */ case   43:  		/* srd R8, R6, R4 */
		/* 8218380Ch case   43:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R6,regs.R4);
		/* 8218380Ch case   43:*/		return 0x82183810;
		  /* 82183810h */ case   44:  		/* add R10, R10, R11 */
		/* 82183810h case   44:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82183810h case   44:*/		return 0x82183814;
		  /* 82183814h */ case   45:  		/* srd R7, R5, R30 */
		/* 82183814h case   45:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R5,regs.R30);
		/* 82183814h case   45:*/		return 0x82183818;
		  /* 82183818h */ case   46:  		/* rlwinm R11, R9, 0, 29, 31 */
		/* 82183818h case   46:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R9);
		/* 82183818h case   46:*/		return 0x8218381C;
		  /* 8218381Ch */ case   47:  		/* srd R9, R8, R4 */
		/* 8218381Ch case   47:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R8,regs.R4);
		/* 8218381Ch case   47:*/		return 0x82183820;
		  /* 82183820h */ case   48:  		/* srd R8, R7, R30 */
		/* 82183820h case   48:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R7,regs.R30);
		/* 82183820h case   48:*/		return 0x82183824;
		  /* 82183824h */ case   49:  		/* add R10, R10, R11 */
		/* 82183824h case   49:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82183824h case   49:*/		return 0x82183828;
		  /* 82183828h */ case   50:  		/* rlwinm R11, R9, 0, 29, 31 */
		/* 82183828h case   50:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R9);
		/* 82183828h case   50:*/		return 0x8218382C;
		  /* 8218382Ch */ case   51:  		/* srd R9, R8, R30 */
		/* 8218382Ch case   51:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R8,regs.R30);
		/* 8218382Ch case   51:*/		return 0x82183830;
		  /* 82183830h */ case   52:  		/* add R11, R10, R11 */
		/* 82183830h case   52:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82183830h case   52:*/		return 0x82183834;
		  /* 82183834h */ case   53:  		/* rlwinm R10, R9, 0, 29, 31 */
		/* 82183834h case   53:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R9);
		/* 82183834h case   53:*/		return 0x82183838;
		  /* 82183838h */ case   54:  		/* rlwinm R9, R3, 8, 24, 31 */
		/* 82183838h case   54:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R9,regs.R3);
		/* 82183838h case   54:*/		return 0x8218383C;
		  /* 8218383Ch */ case   55:  		/* rlwinm R9, R3, 16, 24, 31 */
		/* 8218383Ch case   55:*/		cpu::op::rlwinm<0,16,24,31>(regs,&regs.R9,regs.R3);
		/* 8218383Ch case   55:*/		return 0x82183840;
		  /* 82183840h */ case   56:  		/* rlwinm R9, R3, 24, 24, 31 */
		/* 82183840h case   56:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R9,regs.R3);
		/* 82183840h case   56:*/		return 0x82183844;
		  /* 82183844h */ case   57:  		/* rlwinm R9, R3, 0, 24, 31 */
		/* 82183844h case   57:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R3);
		/* 82183844h case   57:*/		return 0x82183848;
		  /* 82183848h */ case   58:  		/* add R3, R11, R10 */
		/* 82183848h case   58:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82183848h case   58:*/		return 0x8218384C;
		  /* 8218384Ch */ case   59:  		/* ld R30, <#[R1 - 16]> */
		/* 8218384Ch case   59:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8218384Ch case   59:*/		return 0x82183850;
		  /* 82183850h */ case   60:  		/* ld R31, <#[R1 - 8]> */
		/* 82183850h case   60:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82183850h case   60:*/		return 0x82183854;
		  /* 82183854h */ case   61:  		/* bclr 20, CR0_LT */
		/* 82183854h case   61:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183854h case   61:*/		return 0x82183858;
	}
	return 0x82183858;
} // Block from 82183760h-82183858h (62 instructions)

//////////////////////////////////////////////////////
// Block at 82183858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183858);
		  /* 82183858h */ case    0:  		/* lwz R11, <#[R3 + 108]> */
		/* 82183858h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 82183858h case    0:*/		return 0x8218385C;
		  /* 8218385Ch */ case    1:  		/* lwz R10, <#[R11 + 48]> */
		/* 8218385Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8218385Ch case    1:*/		return 0x82183860;
		  /* 82183860h */ case    2:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 82183860h case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 82183860h case    2:*/		return 0x82183864;
		  /* 82183864h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 82183864h case    3:*/		if ( regs.CR[0].eq ) { return 0x82183894;  }
		/* 82183864h case    3:*/		return 0x82183868;
		  /* 82183868h */ case    4:  		/* b 16 */
		/* 82183868h case    4:*/		return 0x82183878;
		/* 82183868h case    4:*/		return 0x8218386C;
		  /* 8218386Ch */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 8218386Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8218386Ch case    5:*/		return 0x82183870;
		  /* 82183870h */ case    6:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82183870h case    6:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82183870h case    6:*/		return 0x82183874;
		  /* 82183874h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 82183874h case    7:*/		if ( regs.CR[0].eq ) { return 0x82183884;  }
		/* 82183874h case    7:*/		return 0x82183878;
	}
	return 0x82183878;
} // Block from 82183858h-82183878h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183878);
		  /* 82183878h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 82183878h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 82183878h case    0:*/		return 0x8218387C;
		  /* 8218387Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8218387Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218387Ch case    1:*/		return 0x82183880;
		  /* 82183880h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 82183880h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8218386C;  }
		/* 82183880h case    2:*/		return 0x82183884;
	}
	return 0x82183884;
} // Block from 82183878h-82183884h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183884);
		  /* 82183884h */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 82183884h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82183884h case    0:*/		return 0x82183888;
		  /* 82183888h */ case    1:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 82183888h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 82183888h case    1:*/		return 0x8218388C;
		  /* 8218388Ch */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 8218388Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82183878;  }
		/* 8218388Ch case    2:*/		return 0x82183890;
		  /* 82183890h */ case    3:  		/* stw R11, <#[R3 + 108]> */
		/* 82183890h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 82183890h case    3:*/		return 0x82183894;
	}
	return 0x82183894;
} // Block from 82183884h-82183894h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82183894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183894);
		  /* 82183894h */ case    0:  		/* lwz R3, <#[R3 + 108]> */
		/* 82183894h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000006C) );
		/* 82183894h case    0:*/		return 0x82183898;
		  /* 82183898h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82183898h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183898h case    1:*/		return 0x8218389C;
	}
	return 0x8218389C;
} // Block from 82183894h-8218389Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218389Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218389C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218389C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218389C);
		  /* 8218389Ch */ case    0:  		/* nop */
		/* 8218389Ch case    0:*/		cpu::op::nop();
		/* 8218389Ch case    0:*/		return 0x821838A0;
		  /* 821838A0h */ case    1:  		/* mr R11, R3 */
		/* 821838A0h case    1:*/		regs.R11 = regs.R3;
		/* 821838A0h case    1:*/		return 0x821838A4;
		  /* 821838A4h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 821838A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821838A4h case    2:*/		return 0x821838A8;
		  /* 821838A8h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 821838A8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821838CC;  }
		/* 821838A8h case    3:*/		return 0x821838AC;
		  /* 821838ACh */ case    4:  		/* lwz R10, <#[R11 + 48]> */
		/* 821838ACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821838ACh case    4:*/		return 0x821838B0;
		  /* 821838B0h */ case    5:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821838B0h case    5:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821838B0h case    5:*/		return 0x821838B4;
		  /* 821838B4h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821838B4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821838C4;  }
		/* 821838B4h case    6:*/		return 0x821838B8;
		  /* 821838B8h */ case    7:  		/* lwz R11, <#[R11 + 52]> */
		/* 821838B8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821838B8h case    7:*/		return 0x821838BC;
		  /* 821838BCh */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821838BCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821838BCh case    8:*/		return 0x821838C0;
		  /* 821838C0h */ case    9:  		/* bc 4, CR6_EQ, -20 */
		/* 821838C0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821838AC;  }
		/* 821838C0h case    9:*/		return 0x821838C4;
	}
	return 0x821838C4;
} // Block from 8218389Ch-821838C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821838C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821838C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821838C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821838C4);
		  /* 821838C4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821838C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821838C4h case    0:*/		return 0x821838C8;
		  /* 821838C8h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821838C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821838E0;  }
		/* 821838C8h case    1:*/		return 0x821838CC;
	}
	return 0x821838CC;
} // Block from 821838C4h-821838CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821838CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821838CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821838CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821838CC);
		  /* 821838CCh */ case    0:  		/* rlwinm R11, R3, 0, 0, 19 */
		/* 821838CCh case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R3);
		/* 821838CCh case    0:*/		return 0x821838D0;
		  /* 821838D0h */ case    1:  		/* li R4, 4800 */
		/* 821838D0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821838D0h case    1:*/		return 0x821838D4;
		  /* 821838D4h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821838D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821838D4h case    2:*/		return 0x821838D8;
		  /* 821838D8h */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 821838D8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821838D8h case    3:*/		return 0x821838DC;
		  /* 821838DCh */ case    4:  		/* b -203380 */
		/* 821838DCh case    4:*/		return 0x82151E68;
		/* 821838DCh case    4:*/		return 0x821838E0;
	}
	return 0x821838E0;
} // Block from 821838CCh-821838E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821838E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821838E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821838E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821838E0);
		  /* 821838E0h */ case    0:  		/* mr R3, R11 */
		/* 821838E0h case    0:*/		regs.R3 = regs.R11;
		/* 821838E0h case    0:*/		return 0x821838E4;
		  /* 821838E4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821838E4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821838E4h case    1:*/		return 0x821838E8;
	}
	return 0x821838E8;
} // Block from 821838E0h-821838E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821838E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821838E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821838E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821838E8);
		  /* 821838E8h */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 821838E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821838E8h case    0:*/		return 0x821838EC;
		  /* 821838ECh */ case    1:  		/* rlwinm. R9, R11, 0, 13, 15 */
		/* 821838ECh case    1:*/		cpu::op::rlwinm<1,0,13,15>(regs,&regs.R9,regs.R11);
		/* 821838ECh case    1:*/		return 0x821838F0;
		  /* 821838F0h */ case    2:  		/* rlwinm R10, R11, 0, 16, 31 */
		/* 821838F0h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R11);
		/* 821838F0h case    2:*/		return 0x821838F4;
		  /* 821838F4h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 821838F4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82183914;  }
		/* 821838F4h case    3:*/		return 0x821838F8;
		  /* 821838F8h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 821838F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821838F8h case    4:*/		return 0x821838FC;
		  /* 821838FCh */ case    5:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821838FCh case    5:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821838FCh case    5:*/		return 0x82183900;
		  /* 82183900h */ case    6:  		/* addi R9, R11, -1 */
		/* 82183900h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82183900h case    6:*/		return 0x82183904;
		  /* 82183904h */ case    7:  		/* andc R11, R11, R9 */
		/* 82183904h case    7:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82183904h case    7:*/		return 0x82183908;
		  /* 82183908h */ case    8:  		/* cntlzw R11, R11 */
		/* 82183908h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82183908h case    8:*/		return 0x8218390C;
		  /* 8218390Ch */ case    9:  		/* subf R11, R11, R10 */
		/* 8218390Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8218390Ch case    9:*/		return 0x82183910;
		  /* 82183910h */ case   10:  		/* addi R10, R11, 31 */
		/* 82183910h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1F);
		/* 82183910h case   10:*/		return 0x82183914;
	}
	return 0x82183914;
} // Block from 821838E8h-82183914h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82183914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183914);
		  /* 82183914h */ case    0:  		/* mr R3, R10 */
		/* 82183914h case    0:*/		regs.R3 = regs.R10;
		/* 82183914h case    0:*/		return 0x82183918;
		  /* 82183918h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82183918h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183918h case    1:*/		return 0x8218391C;
	}
	return 0x8218391C;
} // Block from 82183914h-8218391Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218391Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218391C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218391C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218391C);
		  /* 8218391Ch */ case    0:  		/* nop */
		/* 8218391Ch case    0:*/		cpu::op::nop();
		/* 8218391Ch case    0:*/		return 0x82183920;
		  /* 82183920h */ case    1:  		/* lwz R11, <#[R4 + 16]> */
		/* 82183920h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 82183920h case    1:*/		return 0x82183924;
		  /* 82183924h */ case    2:  		/* rlwinm. R10, R11, 0, 13, 15 */
		/* 82183924h case    2:*/		cpu::op::rlwinm<1,0,13,15>(regs,&regs.R10,regs.R11);
		/* 82183924h case    2:*/		return 0x82183928;
		  /* 82183928h */ case    3:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 82183928h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 82183928h case    3:*/		return 0x8218392C;
		  /* 8218392Ch */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 8218392Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8218394C;  }
		/* 8218392Ch case    4:*/		return 0x82183930;
		  /* 82183930h */ case    5:  		/* lwz R10, <#[R4 + 8]> */
		/* 82183930h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 82183930h case    5:*/		return 0x82183934;
		  /* 82183934h */ case    6:  		/* rlwinm R10, R10, 31, 28, 31 */
		/* 82183934h case    6:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R10,regs.R10);
		/* 82183934h case    6:*/		return 0x82183938;
		  /* 82183938h */ case    7:  		/* addi R9, R10, -1 */
		/* 82183938h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 82183938h case    7:*/		return 0x8218393C;
		  /* 8218393Ch */ case    8:  		/* andc R10, R10, R9 */
		/* 8218393Ch case    8:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8218393Ch case    8:*/		return 0x82183940;
		  /* 82183940h */ case    9:  		/* cntlzw R10, R10 */
		/* 82183940h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 82183940h case    9:*/		return 0x82183944;
		  /* 82183944h */ case   10:  		/* subf R11, R10, R11 */
		/* 82183944h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82183944h case   10:*/		return 0x82183948;
		  /* 82183948h */ case   11:  		/* addi R11, R11, 31 */
		/* 82183948h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82183948h case   11:*/		return 0x8218394C;
	}
	return 0x8218394C;
} // Block from 8218391Ch-8218394Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8218394Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218394C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218394C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218394C);
		  /* 8218394Ch */ case    0:  		/* lwz R10, <#[R3 + 708]> */
		/* 8218394Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002C4) );
		/* 8218394Ch case    0:*/		return 0x82183950;
		  /* 82183950h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82183950h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82183950h case    1:*/		return 0x82183954;
		  /* 82183954h */ case    2:  		/* lwzx R3, <#[R10 + R11]> */
		/* 82183954h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82183954h case    2:*/		return 0x82183958;
		  /* 82183958h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82183958h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183958h case    3:*/		return 0x8218395C;
	}
	return 0x8218395C;
} // Block from 8218394Ch-8218395Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218395Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218395C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218395C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218395C);
		  /* 8218395Ch */ case    0:  		/* nop */
		/* 8218395Ch case    0:*/		cpu::op::nop();
		/* 8218395Ch case    0:*/		return 0x82183960;
	}
	return 0x82183960;
} // Block from 8218395Ch-82183960h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183960h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183960);
		  /* 82183960h */ case    0:  		/* lwz R10, <#[R3 + 680]> */
		/* 82183960h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A8) );
		/* 82183960h case    0:*/		return 0x82183964;
		  /* 82183964h */ case    1:  		/* rlwinm R8, R4, 2, 0, 29 */
		/* 82183964h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R4);
		/* 82183964h case    1:*/		return 0x82183968;
		  /* 82183968h */ case    2:  		/* lwzx R11, <#[R10 + R8]> */
		/* 82183968h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82183968h case    2:*/		return 0x8218396C;
		  /* 8218396Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8218396Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218396Ch case    3:*/		return 0x82183970;
		  /* 82183970h */ case    4:  		/* bc 12, CR6_EQ, 96 */
		/* 82183970h case    4:*/		if ( regs.CR[6].eq ) { return 0x821839D0;  }
		/* 82183970h case    4:*/		return 0x82183974;
		  /* 82183974h */ case    5:  		/* cmplwi CR6, R11, 65535 */
		/* 82183974h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000FFFF);
		/* 82183974h case    5:*/		return 0x82183978;
		  /* 82183978h */ case    6:  		/* bc 4, CR6_LT, 88 */
		/* 82183978h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821839D0;  }
		/* 82183978h case    6:*/		return 0x8218397C;
		  /* 8218397Ch */ case    7:  		/* mr R9, R11 */
		/* 8218397Ch case    7:*/		regs.R9 = regs.R11;
		/* 8218397Ch case    7:*/		return 0x82183980;
		  /* 82183980h */ case    8:  		/* cmplw CR6, R11, R4 */
		/* 82183980h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 82183980h case    8:*/		return 0x82183984;
		  /* 82183984h */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 82183984h case    9:*/		if ( regs.CR[6].eq ) { return 0x821839C0;  }
		/* 82183984h case    9:*/		return 0x82183988;
		  /* 82183988h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82183988h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82183988h case   10:*/		return 0x8218398C;
		  /* 8218398Ch */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8218398Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218398Ch case   11:*/		return 0x82183990;
		  /* 82183990h */ case   12:  		/* b 40 */
		/* 82183990h case   12:*/		return 0x821839B8;
		/* 82183990h case   12:*/		return 0x82183994;
		  /* 82183994h */ case   13:  		/* cmplwi CR6, R11, 65535 */
		/* 82183994h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000FFFF);
		/* 82183994h case   13:*/		return 0x82183998;
		  /* 82183998h */ case   14:  		/* bc 4, CR6_LT, 40 */
		/* 82183998h case   14:*/		if ( !regs.CR[6].lt ) { return 0x821839C0;  }
		/* 82183998h case   14:*/		return 0x8218399C;
		  /* 8218399Ch */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 8218399Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8218399Ch case   15:*/		return 0x821839A0;
		  /* 821839A0h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 821839A0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821839C8;  }
		/* 821839A0h case   16:*/		return 0x821839A4;
		  /* 821839A4h */ case   17:  		/* stwx R11, <#[R10 + R8]> */
		/* 821839A4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821839A4h case   17:*/		return 0x821839A8;
		  /* 821839A8h */ case   18:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 821839A8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 821839A8h case   18:*/		return 0x821839AC;
		  /* 821839ACh */ case   19:  		/* lwz R10, <#[R3 + 680]> */
		/* 821839ACh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A8) );
		/* 821839ACh case   19:*/		return 0x821839B0;
		  /* 821839B0h */ case   20:  		/* mr R9, R11 */
		/* 821839B0h case   20:*/		regs.R9 = regs.R11;
		/* 821839B0h case   20:*/		return 0x821839B4;
		  /* 821839B4h */ case   21:  		/* lwzx R11, <#[R7 + R10]> */
		/* 821839B4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 821839B4h case   21:*/		return 0x821839B8;
	}
	return 0x821839B8;
} // Block from 82183960h-821839B8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821839B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821839B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821839B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821839B8);
		  /* 821839B8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821839B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821839B8h case    0:*/		return 0x821839BC;
		  /* 821839BCh */ case    1:  		/* bc 4, CR6_EQ, -40 */
		/* 821839BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82183994;  }
		/* 821839BCh case    1:*/		return 0x821839C0;
	}
	return 0x821839C0;
} // Block from 821839B8h-821839C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821839C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821839C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821839C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821839C0);
		  /* 821839C0h */ case    0:  		/* mr R3, R9 */
		/* 821839C0h case    0:*/		regs.R3 = regs.R9;
		/* 821839C0h case    0:*/		return 0x821839C4;
		  /* 821839C4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821839C4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821839C4h case    1:*/		return 0x821839C8;
	}
	return 0x821839C8;
} // Block from 821839C0h-821839C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821839C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821839C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821839C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821839C8);
		  /* 821839C8h */ case    0:  		/* li R4, 4800 */
		/* 821839C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821839C8h case    0:*/		return 0x821839CC;
		  /* 821839CCh */ case    1:  		/* b -203620 */
		/* 821839CCh case    1:*/		return 0x82151E68;
		/* 821839CCh case    1:*/		return 0x821839D0;
	}
	return 0x821839D0;
} // Block from 821839C8h-821839D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821839D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821839D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821839D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821839D0);
		  /* 821839D0h */ case    0:  		/* mr R3, R4 */
		/* 821839D0h case    0:*/		regs.R3 = regs.R4;
		/* 821839D0h case    0:*/		return 0x821839D4;
		  /* 821839D4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821839D4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821839D4h case    1:*/		return 0x821839D8;
	}
	return 0x821839D8;
} // Block from 821839D0h-821839D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821839D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821839D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821839D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821839D8);
		  /* 821839D8h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821839D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821839D8h case    0:*/		return 0x821839DC;
		  /* 821839DCh */ case    1:  		/* lwz R10, <#[R4]> */
		/* 821839DCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 821839DCh case    1:*/		return 0x821839E0;
		  /* 821839E0h */ case    2:  		/* subf R3, R10, R11 */
		/* 821839E0h case    2:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821839E0h case    2:*/		return 0x821839E4;
		  /* 821839E4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821839E4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821839E4h case    3:*/		return 0x821839E8;
	}
	return 0x821839E8;
} // Block from 821839D8h-821839E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821839E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821839E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821839E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821839E8);
		  /* 821839E8h */ case    0:  		/* lwz R8, <#[R3]> */
		/* 821839E8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821839E8h case    0:*/		return 0x821839EC;
		  /* 821839ECh */ case    1:  		/* lwz R7, <#[R4]> */
		/* 821839ECh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000000) );
		/* 821839ECh case    1:*/		return 0x821839F0;
		  /* 821839F0h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 821839F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821839F0h case    2:*/		return 0x821839F4;
		  /* 821839F4h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821839F4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82183A00;  }
		/* 821839F4h case    3:*/		return 0x821839F8;
		  /* 821839F8h */ case    4:  		/* li R3, 1 */
		/* 821839F8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821839F8h case    4:*/		return 0x821839FC;
		  /* 821839FCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 821839FCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821839FCh case    5:*/		return 0x82183A00;
	}
	return 0x82183A00;
} // Block from 821839E8h-82183A00h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A00);
		  /* 82183A00h */ case    0:  		/* cmplwi CR6, R7, 0 */
		/* 82183A00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82183A00h case    0:*/		return 0x82183A04;
		  /* 82183A04h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82183A04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82183A10;  }
		/* 82183A04h case    1:*/		return 0x82183A08;
		  /* 82183A08h */ case    2:  		/* li R3, -1 */
		/* 82183A08h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82183A08h case    2:*/		return 0x82183A0C;
		  /* 82183A0Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 82183A0Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183A0Ch case    3:*/		return 0x82183A10;
	}
	return 0x82183A10;
} // Block from 82183A00h-82183A10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82183A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A10);
		  /* 82183A10h */ case    0:  		/* lwz R11, <#[R7 + 28]> */
		/* 82183A10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000001C) );
		/* 82183A10h case    0:*/		return 0x82183A14;
		  /* 82183A14h */ case    1:  		/* lwz R10, <#[R8 + 28]> */
		/* 82183A14h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000001C) );
		/* 82183A14h case    1:*/		return 0x82183A18;
		  /* 82183A18h */ case    2:  		/* lwz R11, <#[R11 + 68]> */
		/* 82183A18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000044) );
		/* 82183A18h case    2:*/		return 0x82183A1C;
		  /* 82183A1Ch */ case    3:  		/* lwz R10, <#[R10 + 68]> */
		/* 82183A1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000044) );
		/* 82183A1Ch case    3:*/		return 0x82183A20;
		  /* 82183A20h */ case    4:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 82183A20h case    4:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 82183A20h case    4:*/		return 0x82183A24;
		  /* 82183A24h */ case    5:  		/* rlwinm R10, R10, 0, 4, 31 */
		/* 82183A24h case    5:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R10,regs.R10);
		/* 82183A24h case    5:*/		return 0x82183A28;
		  /* 82183A28h */ case    6:  		/* subf. R3, R10, R11 */
		/* 82183A28h case    6:*/		cpu::op::subf<1>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82183A28h case    6:*/		return 0x82183A2C;
		  /* 82183A2Ch */ case    7:  		/* bclr 4, CR0_EQ */
		/* 82183A2Ch case    7:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82183A2Ch case    7:*/		return 0x82183A30;
	}
	return 0x82183A30;
} // Block from 82183A10h-82183A30h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A30);
		  /* 82183A30h */ case    0:  		/* lwz R11, <#[R8 + 8]> */
		/* 82183A30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 82183A30h case    0:*/		return 0x82183A34;
		  /* 82183A34h */ case    1:  		/* li R9, 0 */
		/* 82183A34h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82183A34h case    1:*/		return 0x82183A38;
		  /* 82183A38h */ case    2:  		/* li R10, 0 */
		/* 82183A38h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82183A38h case    2:*/		return 0x82183A3C;
		  /* 82183A3Ch */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82183A3Ch case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82183A3Ch case    3:*/		return 0x82183A40;
		  /* 82183A40h */ case    4:  		/* cmpwi CR6, R11, 110 */
		/* 82183A40h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006E);
		/* 82183A40h case    4:*/		return 0x82183A44;
		  /* 82183A44h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 82183A44h case    5:*/		if ( regs.CR[6].eq ) { return 0x82183A58;  }
		/* 82183A44h case    5:*/		return 0x82183A48;
		  /* 82183A48h */ case    6:  		/* cmpwi CR6, R11, 112 */
		/* 82183A48h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000070);
		/* 82183A48h case    6:*/		return 0x82183A4C;
		  /* 82183A4Ch */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 82183A4Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82183A5C;  }
		/* 82183A4Ch case    7:*/		return 0x82183A50;
		  /* 82183A50h */ case    8:  		/* li R9, 2 */
		/* 82183A50h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82183A50h case    8:*/		return 0x82183A54;
		  /* 82183A54h */ case    9:  		/* b 8 */
		/* 82183A54h case    9:*/		return 0x82183A5C;
		/* 82183A54h case    9:*/		return 0x82183A58;
	}
	return 0x82183A58;
} // Block from 82183A30h-82183A58h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82183A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A58);
		  /* 82183A58h */ case    0:  		/* li R9, 1 */
		/* 82183A58h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82183A58h case    0:*/		return 0x82183A5C;
	}
	return 0x82183A5C;
} // Block from 82183A58h-82183A5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A5C);
		  /* 82183A5Ch */ case    0:  		/* lwz R11, <#[R7 + 8]> */
		/* 82183A5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 82183A5Ch case    0:*/		return 0x82183A60;
		  /* 82183A60h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82183A60h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82183A60h case    1:*/		return 0x82183A64;
		  /* 82183A64h */ case    2:  		/* cmpwi CR6, R11, 110 */
		/* 82183A64h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006E);
		/* 82183A64h case    2:*/		return 0x82183A68;
		  /* 82183A68h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 82183A68h case    3:*/		if ( regs.CR[6].eq ) { return 0x82183A7C;  }
		/* 82183A68h case    3:*/		return 0x82183A6C;
		  /* 82183A6Ch */ case    4:  		/* cmpwi CR6, R11, 112 */
		/* 82183A6Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000070);
		/* 82183A6Ch case    4:*/		return 0x82183A70;
		  /* 82183A70h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82183A70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82183A80;  }
		/* 82183A70h case    5:*/		return 0x82183A74;
		  /* 82183A74h */ case    6:  		/* li R10, 2 */
		/* 82183A74h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82183A74h case    6:*/		return 0x82183A78;
		  /* 82183A78h */ case    7:  		/* b 8 */
		/* 82183A78h case    7:*/		return 0x82183A80;
		/* 82183A78h case    7:*/		return 0x82183A7C;
	}
	return 0x82183A7C;
} // Block from 82183A5Ch-82183A7Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A7C);
		  /* 82183A7Ch */ case    0:  		/* li R10, 1 */
		/* 82183A7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82183A7Ch case    0:*/		return 0x82183A80;
	}
	return 0x82183A80;
} // Block from 82183A7Ch-82183A80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A80);
		  /* 82183A80h */ case    0:  		/* subf. R3, R10, R9 */
		/* 82183A80h case    0:*/		cpu::op::subf<1>(regs,&regs.R3,regs.R10,regs.R9);
		/* 82183A80h case    0:*/		return 0x82183A84;
		  /* 82183A84h */ case    1:  		/* bclr 4, CR0_EQ */
		/* 82183A84h case    1:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82183A84h case    1:*/		return 0x82183A88;
	}
	return 0x82183A88;
} // Block from 82183A80h-82183A88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183A88);
		  /* 82183A88h */ case    0:  		/* lwz R11, <#[R7 + 16]> */
		/* 82183A88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000010) );
		/* 82183A88h case    0:*/		return 0x82183A8C;
		  /* 82183A8Ch */ case    1:  		/* lwz R10, <#[R8 + 16]> */
		/* 82183A8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 82183A8Ch case    1:*/		return 0x82183A90;
		  /* 82183A90h */ case    2:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 82183A90h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 82183A90h case    2:*/		return 0x82183A94;
		  /* 82183A94h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 82183A94h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 82183A94h case    3:*/		return 0x82183A98;
		  /* 82183A98h */ case    4:  		/* subf R3, R11, R10 */
		/* 82183A98h case    4:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82183A98h case    4:*/		return 0x82183A9C;
		  /* 82183A9Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 82183A9Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183A9Ch case    5:*/		return 0x82183AA0;
	}
	return 0x82183AA0;
} // Block from 82183A88h-82183AA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183AA0);
		  /* 82183AA0h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82183AA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82183AA0h case    0:*/		return 0x82183AA4;
		  /* 82183AA4h */ case    1:  		/* lwz R10, <#[R4]> */
		/* 82183AA4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82183AA4h case    1:*/		return 0x82183AA8;
		  /* 82183AA8h */ case    2:  		/* lwz R9, <#[R11 + 192]> */
		/* 82183AA8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x000000C0) );
		/* 82183AA8h case    2:*/		return 0x82183AAC;
		  /* 82183AACh */ case    3:  		/* lwz R8, <#[R10 + 192]> */
		/* 82183AACh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x000000C0) );
		/* 82183AACh case    3:*/		return 0x82183AB0;
		  /* 82183AB0h */ case    4:  		/* rlwinm R7, R9, 3, 31, 31 */
		/* 82183AB0h case    4:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R7,regs.R9);
		/* 82183AB0h case    4:*/		return 0x82183AB4;
		  /* 82183AB4h */ case    5:  		/* rlwinm R6, R8, 3, 31, 31 */
		/* 82183AB4h case    5:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R6,regs.R8);
		/* 82183AB4h case    5:*/		return 0x82183AB8;
		  /* 82183AB8h */ case    6:  		/* subf. R3, R7, R6 */
		/* 82183AB8h case    6:*/		cpu::op::subf<1>(regs,&regs.R3,regs.R7,regs.R6);
		/* 82183AB8h case    6:*/		return 0x82183ABC;
		  /* 82183ABCh */ case    7:  		/* bclr 4, CR0_EQ */
		/* 82183ABCh case    7:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82183ABCh case    7:*/		return 0x82183AC0;
	}
	return 0x82183AC0;
} // Block from 82183AA0h-82183AC0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183AC0);
		  /* 82183AC0h */ case    0:  		/* lwz R10, <#[R10 + 196]> */
		/* 82183AC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x000000C4) );
		/* 82183AC0h case    0:*/		return 0x82183AC4;
		  /* 82183AC4h */ case    1:  		/* lwz R11, <#[R11 + 196]> */
		/* 82183AC4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C4) );
		/* 82183AC4h case    1:*/		return 0x82183AC8;
		  /* 82183AC8h */ case    2:  		/* subf R11, R11, R10 */
		/* 82183AC8h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82183AC8h case    2:*/		return 0x82183ACC;
		  /* 82183ACCh */ case    3:  		/* cmpdi CR6, R11, 0 */
		/* 82183ACCh case    3:*/		cpu::op::cmpdi<6>(regs,regs.R11,0x00000000);
		/* 82183ACCh case    3:*/		return 0x82183AD0;
		  /* 82183AD0h */ case    4:  		/* bc 4, CR6_LT, 12 */
		/* 82183AD0h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82183ADC;  }
		/* 82183AD0h case    4:*/		return 0x82183AD4;
		  /* 82183AD4h */ case    5:  		/* li R3, -1 */
		/* 82183AD4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82183AD4h case    5:*/		return 0x82183AD8;
		  /* 82183AD8h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82183AD8h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183AD8h case    6:*/		return 0x82183ADC;
	}
	return 0x82183ADC;
} // Block from 82183AC0h-82183ADCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82183ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183ADC);
		  /* 82183ADCh */ case    0:  		/* bc 4, CR6_GT, 12 */
		/* 82183ADCh case    0:*/		if ( !regs.CR[6].gt ) { return 0x82183AE8;  }
		/* 82183ADCh case    0:*/		return 0x82183AE0;
		  /* 82183AE0h */ case    1:  		/* li R3, 1 */
		/* 82183AE0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82183AE0h case    1:*/		return 0x82183AE4;
		  /* 82183AE4h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82183AE4h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183AE4h case    2:*/		return 0x82183AE8;
	}
	return 0x82183AE8;
} // Block from 82183ADCh-82183AE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183AE8);
		  /* 82183AE8h */ case    0:  		/* rlwinm R11, R9, 29, 21, 31 */
		/* 82183AE8h case    0:*/		cpu::op::rlwinm<0,29,21,31>(regs,&regs.R11,regs.R9);
		/* 82183AE8h case    0:*/		return 0x82183AEC;
		  /* 82183AECh */ case    1:  		/* rlwinm R10, R8, 29, 21, 31 */
		/* 82183AECh case    1:*/		cpu::op::rlwinm<0,29,21,31>(regs,&regs.R10,regs.R8);
		/* 82183AECh case    1:*/		return 0x82183AF0;
		  /* 82183AF0h */ case    2:  		/* subf R3, R11, R10 */
		/* 82183AF0h case    2:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82183AF0h case    2:*/		return 0x82183AF4;
		  /* 82183AF4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82183AF4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183AF4h case    3:*/		return 0x82183AF8;
	}
	return 0x82183AF8;
} // Block from 82183AE8h-82183AF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82183AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183AF8);
		  /* 82183AF8h */ case    0:  		/* mfspr R12, LR */
		/* 82183AF8h case    0:*/		regs.R12 = regs.LR;
		/* 82183AF8h case    0:*/		return 0x82183AFC;
		  /* 82183AFCh */ case    1:  		/* bl -993460 */
		/* 82183AFCh case    1:*/		regs.LR = 0x82183B00; return 0x82091248;
		/* 82183AFCh case    1:*/		return 0x82183B00;
		  /* 82183B00h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82183B00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82183B00h case    2:*/		return 0x82183B04;
		  /* 82183B04h */ case    3:  		/* lwz R10, <#[R4 + 28]> */
		/* 82183B04h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82183B04h case    3:*/		return 0x82183B08;
		  /* 82183B08h */ case    4:  		/* li R11, 0 */
		/* 82183B08h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82183B08h case    4:*/		return 0x82183B0C;
		  /* 82183B0Ch */ case    5:  		/* mr R28, R3 */
		/* 82183B0Ch case    5:*/		regs.R28 = regs.R3;
		/* 82183B0Ch case    5:*/		return 0x82183B10;
		  /* 82183B10h */ case    6:  		/* stw R11, <#[R1 + 88]> */
		/* 82183B10h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82183B10h case    6:*/		return 0x82183B14;
		  /* 82183B14h */ case    7:  		/* addi R3, R1, 80 */
		/* 82183B14h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82183B14h case    7:*/		return 0x82183B18;
		  /* 82183B18h */ case    8:  		/* stw R11, <#[R1 + 96]> */
		/* 82183B18h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82183B18h case    8:*/		return 0x82183B1C;
		  /* 82183B1Ch */ case    9:  		/* mr R31, R4 */
		/* 82183B1Ch case    9:*/		regs.R31 = regs.R4;
		/* 82183B1Ch case    9:*/		return 0x82183B20;
		  /* 82183B20h */ case   10:  		/* stw R11, <#[R1 + 100]> */
		/* 82183B20h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82183B20h case   10:*/		return 0x82183B24;
		  /* 82183B24h */ case   11:  		/* mr R27, R5 */
		/* 82183B24h case   11:*/		regs.R27 = regs.R5;
		/* 82183B24h case   11:*/		return 0x82183B28;
		  /* 82183B28h */ case   12:  		/* stb R11, <#[R1 + 104]> */
		/* 82183B28h case   12:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82183B28h case   12:*/		return 0x82183B2C;
		  /* 82183B2Ch */ case   13:  		/* mr R25, R6 */
		/* 82183B2Ch case   13:*/		regs.R25 = regs.R6;
		/* 82183B2Ch case   13:*/		return 0x82183B30;
		  /* 82183B30h */ case   14:  		/* stw R10, <#[R1 + 80]> */
		/* 82183B30h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82183B30h case   14:*/		return 0x82183B34;
		  /* 82183B34h */ case   15:  		/* mr R26, R7 */
		/* 82183B34h case   15:*/		regs.R26 = regs.R7;
		/* 82183B34h case   15:*/		return 0x82183B38;
		  /* 82183B38h */ case   16:  		/* lwz R4, <#[R10 + 8]> */
		/* 82183B38h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 82183B38h case   16:*/		return 0x82183B3C;
		  /* 82183B3Ch */ case   17:  		/* mr R24, R8 */
		/* 82183B3Ch case   17:*/		regs.R24 = regs.R8;
		/* 82183B3Ch case   17:*/		return 0x82183B40;
		  /* 82183B40h */ case   18:  		/* mr R29, R11 */
		/* 82183B40h case   18:*/		regs.R29 = regs.R11;
		/* 82183B40h case   18:*/		return 0x82183B44;
		  /* 82183B44h */ case   19:  		/* mr R30, R11 */
		/* 82183B44h case   19:*/		regs.R30 = regs.R11;
		/* 82183B44h case   19:*/		return 0x82183B48;
		  /* 82183B48h */ case   20:  		/* bl 704120 */
		/* 82183B48h case   20:*/		regs.LR = 0x82183B4C; return 0x8222F9C0;
		/* 82183B48h case   20:*/		return 0x82183B4C;
		  /* 82183B4Ch */ case   21:  		/* b 112 */
		/* 82183B4Ch case   21:*/		return 0x82183BBC;
		/* 82183B4Ch case   21:*/		return 0x82183B50;
		  /* 82183B50h */ case   22:  		/* mr R5, R3 */
		/* 82183B50h case   22:*/		regs.R5 = regs.R3;
		/* 82183B50h case   22:*/		return 0x82183B54;
		  /* 82183B54h */ case   23:  		/* li R7, 1 */
		/* 82183B54h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82183B54h case   23:*/		return 0x82183B58;
		  /* 82183B58h */ case   24:  		/* li R6, 0 */
		/* 82183B58h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82183B58h case   24:*/		return 0x82183B5C;
		  /* 82183B5Ch */ case   25:  		/* mr R4, R31 */
		/* 82183B5Ch case   25:*/		regs.R4 = regs.R31;
		/* 82183B5Ch case   25:*/		return 0x82183B60;
		  /* 82183B60h */ case   26:  		/* mr R3, R28 */
		/* 82183B60h case   26:*/		regs.R3 = regs.R28;
		/* 82183B60h case   26:*/		return 0x82183B64;
		  /* 82183B64h */ case   27:  		/* bl 412060 */
		/* 82183B64h case   27:*/		regs.LR = 0x82183B68; return 0x821E8500;
		/* 82183B64h case   27:*/		return 0x82183B68;
		  /* 82183B68h */ case   28:  		/* lwz R10, <#[R1 + 100]> */
		/* 82183B68h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 82183B68h case   28:*/		return 0x82183B6C;
		  /* 82183B6Ch */ case   29:  		/* lwz R8, <#[R1 + 96]> */
		/* 82183B6Ch case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 82183B6Ch case   29:*/		return 0x82183B70;
		  /* 82183B70h */ case   30:  		/* cmplw CR6, R27, R3 */
		/* 82183B70h case   30:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R3);
		/* 82183B70h case   30:*/		return 0x82183B74;
		  /* 82183B74h */ case   31:  		/* lwz R9, <#[R1 + 92]> */
		/* 82183B74h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 82183B74h case   31:*/		return 0x82183B78;
		  /* 82183B78h */ case   32:  		/* bc 4, CR6_EQ, 32 */
		/* 82183B78h case   32:*/		if ( !regs.CR[6].eq ) { return 0x82183B98;  }
		/* 82183B78h case   32:*/		return 0x82183B7C;
		  /* 82183B7Ch */ case   33:  		/* cmplwi CR6, R8, 0 */
		/* 82183B7Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82183B7Ch case   33:*/		return 0x82183B80;
		  /* 82183B80h */ case   34:  		/* bc 4, CR6_EQ, 12 */
		/* 82183B80h case   34:*/		if ( !regs.CR[6].eq ) { return 0x82183B8C;  }
		/* 82183B80h case   34:*/		return 0x82183B84;
		  /* 82183B84h */ case   35:  		/* lwz R11, <#[R9 + 16]> */
		/* 82183B84h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 82183B84h case   35:*/		return 0x82183B88;
		  /* 82183B88h */ case   36:  		/* b 12 */
		/* 82183B88h case   36:*/		return 0x82183B94;
		/* 82183B88h case   36:*/		return 0x82183B8C;
	}
	return 0x82183B8C;
} // Block from 82183AF8h-82183B8Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 82183B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183B8C);
		  /* 82183B8Ch */ case    0:  		/* lwz R11, <#[R10 + 68]> */
		/* 82183B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000044) );
		/* 82183B8Ch case    0:*/		return 0x82183B90;
		  /* 82183B90h */ case    1:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 82183B90h case    1:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 82183B90h case    1:*/		return 0x82183B94;
	}
	return 0x82183B94;
} // Block from 82183B8Ch-82183B94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183B94);
		  /* 82183B94h */ case    0:  		/* add R29, R11, R29 */
		/* 82183B94h case    0:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 82183B94h case    0:*/		return 0x82183B98;
	}
	return 0x82183B98;
} // Block from 82183B94h-82183B98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183B98);
		  /* 82183B98h */ case    0:  		/* cmplw CR6, R25, R3 */
		/* 82183B98h case    0:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R3);
		/* 82183B98h case    0:*/		return 0x82183B9C;
		  /* 82183B9Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82183B9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82183BBC;  }
		/* 82183B9Ch case    1:*/		return 0x82183BA0;
		  /* 82183BA0h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 82183BA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82183BA0h case    2:*/		return 0x82183BA4;
		  /* 82183BA4h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82183BA4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82183BB0;  }
		/* 82183BA4h case    3:*/		return 0x82183BA8;
		  /* 82183BA8h */ case    4:  		/* lwz R11, <#[R9 + 16]> */
		/* 82183BA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 82183BA8h case    4:*/		return 0x82183BAC;
		  /* 82183BACh */ case    5:  		/* b 12 */
		/* 82183BACh case    5:*/		return 0x82183BB8;
		/* 82183BACh case    5:*/		return 0x82183BB0;
	}
	return 0x82183BB0;
} // Block from 82183B98h-82183BB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183BB0);
		  /* 82183BB0h */ case    0:  		/* lwz R11, <#[R10 + 68]> */
		/* 82183BB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000044) );
		/* 82183BB0h case    0:*/		return 0x82183BB4;
		  /* 82183BB4h */ case    1:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 82183BB4h case    1:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 82183BB4h case    1:*/		return 0x82183BB8;
	}
	return 0x82183BB8;
} // Block from 82183BB0h-82183BB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183BB8);
		  /* 82183BB8h */ case    0:  		/* add R30, R11, R30 */
		/* 82183BB8h case    0:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82183BB8h case    0:*/		return 0x82183BBC;
	}
	return 0x82183BBC;
} // Block from 82183BB8h-82183BBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82183BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183BBC);
		  /* 82183BBCh */ case    0:  		/* addi R3, R1, 80 */
		/* 82183BBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82183BBCh case    0:*/		return 0x82183BC0;
		  /* 82183BC0h */ case    1:  		/* bl -94400 */
		/* 82183BC0h case    1:*/		regs.LR = 0x82183BC4; return 0x8216CB00;
		/* 82183BC0h case    1:*/		return 0x82183BC4;
		  /* 82183BC4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82183BC4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82183BC4h case    2:*/		return 0x82183BC8;
		  /* 82183BC8h */ case    3:  		/* bc 4, CR0_EQ, -120 */
		/* 82183BC8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82183B50;  }
		/* 82183BC8h case    3:*/		return 0x82183BCC;
		  /* 82183BCCh */ case    4:  		/* lwz R10, <#[R26]> */
		/* 82183BCCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82183BCCh case    4:*/		return 0x82183BD0;
		  /* 82183BD0h */ case    5:  		/* lis R11, 4095 */
		/* 82183BD0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFF);
		/* 82183BD0h case    5:*/		return 0x82183BD4;
		  /* 82183BD4h */ case    6:  		/* ori R11, R11, 65535 */
		/* 82183BD4h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 82183BD4h case    6:*/		return 0x82183BD8;
		  /* 82183BD8h */ case    7:  		/* add R10, R10, R30 */
		/* 82183BD8h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 82183BD8h case    7:*/		return 0x82183BDC;
		  /* 82183BDCh */ case    8:  		/* cmplw CR6, R10, R11 */
		/* 82183BDCh case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82183BDCh case    8:*/		return 0x82183BE0;
		  /* 82183BE0h */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 82183BE0h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82183BE8;  }
		/* 82183BE0h case    9:*/		return 0x82183BE4;
		  /* 82183BE4h */ case   10:  		/* mr R10, R11 */
		/* 82183BE4h case   10:*/		regs.R10 = regs.R11;
		/* 82183BE4h case   10:*/		return 0x82183BE8;
	}
	return 0x82183BE8;
} // Block from 82183BBCh-82183BE8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82183BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183BE8);
		  /* 82183BE8h */ case    0:  		/* stw R10, <#[R26]> */
		/* 82183BE8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82183BE8h case    0:*/		return 0x82183BEC;
		  /* 82183BECh */ case    1:  		/* lwz R10, <#[R24]> */
		/* 82183BECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 82183BECh case    1:*/		return 0x82183BF0;
		  /* 82183BF0h */ case    2:  		/* add R10, R10, R29 */
		/* 82183BF0h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 82183BF0h case    2:*/		return 0x82183BF4;
		  /* 82183BF4h */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 82183BF4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82183BF4h case    3:*/		return 0x82183BF8;
		  /* 82183BF8h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 82183BF8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82183C00;  }
		/* 82183BF8h case    4:*/		return 0x82183BFC;
		  /* 82183BFCh */ case    5:  		/* mr R10, R11 */
		/* 82183BFCh case    5:*/		regs.R10 = regs.R11;
		/* 82183BFCh case    5:*/		return 0x82183C00;
	}
	return 0x82183C00;
} // Block from 82183BE8h-82183C00h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82183C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183C00);
		  /* 82183C00h */ case    0:  		/* stw R10, <#[R24]> */
		/* 82183C00h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 82183C00h case    0:*/		return 0x82183C04;
		  /* 82183C04h */ case    1:  		/* addi R1, R1, 192 */
		/* 82183C04h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82183C04h case    1:*/		return 0x82183C08;
		  /* 82183C08h */ case    2:  		/* b -993648 */
		/* 82183C08h case    2:*/		return 0x82091298;
		/* 82183C08h case    2:*/		return 0x82183C0C;
		  /* 82183C0Ch */ case    3:  		/* nop */
		/* 82183C0Ch case    3:*/		cpu::op::nop();
		/* 82183C0Ch case    3:*/		return 0x82183C10;
	}
	return 0x82183C10;
} // Block from 82183C00h-82183C10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82183C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183C10);
		  /* 82183C10h */ case    0:  		/* mfspr R12, LR */
		/* 82183C10h case    0:*/		regs.R12 = regs.LR;
		/* 82183C10h case    0:*/		return 0x82183C14;
		  /* 82183C14h */ case    1:  		/* bl -993728 */
		/* 82183C14h case    1:*/		regs.LR = 0x82183C18; return 0x82091254;
		/* 82183C14h case    1:*/		return 0x82183C18;
		  /* 82183C18h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82183C18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82183C18h case    2:*/		return 0x82183C1C;
		  /* 82183C1Ch */ case    3:  		/* li R29, 0 */
		/* 82183C1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82183C1Ch case    3:*/		return 0x82183C20;
		  /* 82183C20h */ case    4:  		/* addi R28, R3, -8 */
		/* 82183C20h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0xFFFFFFF8);
		/* 82183C20h case    4:*/		return 0x82183C24;
		  /* 82183C24h */ case    5:  		/* li R31, 4 */
		/* 82183C24h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x4);
		/* 82183C24h case    5:*/		return 0x82183C28;
		  /* 82183C28h */ case    6:  		/* ldu R30, <#[R28 + 8]> */
		/* 82183C28h case    6:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R28 + 0x00000008) );
		regs.R28 = (uint32)(regs.R28 + 0x00000008);
		/* 82183C28h case    6:*/		return 0x82183C2C;
		  /* 82183C2Ch */ case    7:  		/* rldicl R3, R30, 32, 32 */
		/* 82183C2Ch case    7:*/		cpu::op::rldicl<0,32,32>(regs,&regs.R3,regs.R30);
		/* 82183C2Ch case    7:*/		return 0x82183C30;
		  /* 82183C30h */ case    8:  		/* bl -1232 */
		/* 82183C30h case    8:*/		regs.LR = 0x82183C34; return 0x82183760;
		/* 82183C30h case    8:*/		return 0x82183C34;
		  /* 82183C34h */ case    9:  		/* mr R27, R3 */
		/* 82183C34h case    9:*/		regs.R27 = regs.R3;
		/* 82183C34h case    9:*/		return 0x82183C38;
		  /* 82183C38h */ case   10:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82183C38h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82183C38h case   10:*/		return 0x82183C3C;
		  /* 82183C3Ch */ case   11:  		/* bl -1244 */
		/* 82183C3Ch case   11:*/		regs.LR = 0x82183C40; return 0x82183760;
		/* 82183C3Ch case   11:*/		return 0x82183C40;
		  /* 82183C40h */ case   12:  		/* add R11, R27, R3 */
		/* 82183C40h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R3);
		/* 82183C40h case   12:*/		return 0x82183C44;
		  /* 82183C44h */ case   13:  		/* addic. R31, R31, -1 */
		/* 82183C44h case   13:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 82183C44h case   13:*/		return 0x82183C48;
		  /* 82183C48h */ case   14:  		/* add R29, R11, R29 */
		/* 82183C48h case   14:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 82183C48h case   14:*/		return 0x82183C4C;
		  /* 82183C4Ch */ case   15:  		/* bc 4, CR0_EQ, -36 */
		/* 82183C4Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x82183C28;  }
		/* 82183C4Ch case   15:*/		return 0x82183C50;
		  /* 82183C50h */ case   16:  		/* mr R3, R29 */
		/* 82183C50h case   16:*/		regs.R3 = regs.R29;
		/* 82183C50h case   16:*/		return 0x82183C54;
		  /* 82183C54h */ case   17:  		/* addi R1, R1, 128 */
		/* 82183C54h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82183C54h case   17:*/		return 0x82183C58;
		  /* 82183C58h */ case   18:  		/* b -993716 */
		/* 82183C58h case   18:*/		return 0x820912A4;
		/* 82183C58h case   18:*/		return 0x82183C5C;
		  /* 82183C5Ch */ case   19:  		/* nop */
		/* 82183C5Ch case   19:*/		cpu::op::nop();
		/* 82183C5Ch case   19:*/		return 0x82183C60;
		  /* 82183C60h */ case   20:  		/* rlwinm R11, R5, 3, 0, 28 */
		/* 82183C60h case   20:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R5);
		/* 82183C60h case   20:*/		return 0x82183C64;
		  /* 82183C64h */ case   21:  		/* add R11, R11, R3 */
		/* 82183C64h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82183C64h case   21:*/		return 0x82183C68;
		  /* 82183C68h */ case   22:  		/* cmplw CR6, R3, R11 */
		/* 82183C68h case   22:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82183C68h case   22:*/		return 0x82183C6C;
		  /* 82183C6Ch */ case   23:  		/* bc 4, CR6_LT, 40 */
		/* 82183C6Ch case   23:*/		if ( !regs.CR[6].lt ) { return 0x82183C94;  }
		/* 82183C6Ch case   23:*/		return 0x82183C70;
		  /* 82183C70h */ case   24:  		/* subf R10, R3, R4 */
		/* 82183C70h case   24:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R3,regs.R4);
		/* 82183C70h case   24:*/		return 0x82183C74;
		  /* 82183C74h */ case   25:  		/* ldx R9, <#[R10 + R3]> */
		/* 82183C74h case   25:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82183C74h case   25:*/		return 0x82183C78;
		  /* 82183C78h */ case   26:  		/* ld R8, <#[R3]> */
		/* 82183C78h case   26:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 82183C78h case   26:*/		return 0x82183C7C;
		  /* 82183C7Ch */ case   27:  		/* and R9, R9, R8 */
		/* 82183C7Ch case   27:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82183C7Ch case   27:*/		return 0x82183C80;
		  /* 82183C80h */ case   28:  		/* cmpldi CR6, R9, 0 */
		/* 82183C80h case   28:*/		cpu::op::cmpldi<6>(regs,regs.R9,0x00000000);
		/* 82183C80h case   28:*/		return 0x82183C84;
		  /* 82183C84h */ case   29:  		/* bc 4, CR6_EQ, 24 */
		/* 82183C84h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82183C9C;  }
		/* 82183C84h case   29:*/		return 0x82183C88;
		  /* 82183C88h */ case   30:  		/* addi R3, R3, 8 */
		/* 82183C88h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x8);
		/* 82183C88h case   30:*/		return 0x82183C8C;
		  /* 82183C8Ch */ case   31:  		/* cmplw CR6, R3, R11 */
		/* 82183C8Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82183C8Ch case   31:*/		return 0x82183C90;
		  /* 82183C90h */ case   32:  		/* bc 12, CR6_LT, -28 */
		/* 82183C90h case   32:*/		if ( regs.CR[6].lt ) { return 0x82183C74;  }
		/* 82183C90h case   32:*/		return 0x82183C94;
	}
	return 0x82183C94;
} // Block from 82183C10h-82183C94h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82183C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183C94);
		  /* 82183C94h */ case    0:  		/* li R3, 0 */
		/* 82183C94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82183C94h case    0:*/		return 0x82183C98;
		  /* 82183C98h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82183C98h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183C98h case    1:*/		return 0x82183C9C;
	}
	return 0x82183C9C;
} // Block from 82183C94h-82183C9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183C9C);
		  /* 82183C9Ch */ case    0:  		/* li R3, 1 */
		/* 82183C9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82183C9Ch case    0:*/		return 0x82183CA0;
		  /* 82183CA0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82183CA0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183CA0h case    1:*/		return 0x82183CA4;
	}
	return 0x82183CA4;
} // Block from 82183C9Ch-82183CA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82183CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183CA4);
		  /* 82183CA4h */ case    0:  		/* nop */
		/* 82183CA4h case    0:*/		cpu::op::nop();
		/* 82183CA4h case    0:*/		return 0x82183CA8;
		  /* 82183CA8h */ case    1:  		/* rlwinm R11, R5, 3, 0, 28 */
		/* 82183CA8h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R5);
		/* 82183CA8h case    1:*/		return 0x82183CAC;
		  /* 82183CACh */ case    2:  		/* add R11, R11, R3 */
		/* 82183CACh case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82183CACh case    2:*/		return 0x82183CB0;
		  /* 82183CB0h */ case    3:  		/* cmplw CR6, R3, R11 */
		/* 82183CB0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82183CB0h case    3:*/		return 0x82183CB4;
		  /* 82183CB4h */ case    4:  		/* bclr 4, CR6_LT */
		/* 82183CB4h case    4:*/		if ( !regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 82183CB4h case    4:*/		return 0x82183CB8;
	}
	return 0x82183CB8;
} // Block from 82183CA4h-82183CB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183CB8);
		  /* 82183CB8h */ case    0:  		/* subf R11, R3, R11 */
		/* 82183CB8h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82183CB8h case    0:*/		return 0x82183CBC;
		  /* 82183CBCh */ case    1:  		/* subf R10, R3, R4 */
		/* 82183CBCh case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R3,regs.R4);
		/* 82183CBCh case    1:*/		return 0x82183CC0;
		  /* 82183CC0h */ case    2:  		/* addi R11, R11, -1 */
		/* 82183CC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82183CC0h case    2:*/		return 0x82183CC4;
		  /* 82183CC4h */ case    3:  		/* rlwinm R11, R11, 29, 3, 31 */
		/* 82183CC4h case    3:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R11,regs.R11);
		/* 82183CC4h case    3:*/		return 0x82183CC8;
		  /* 82183CC8h */ case    4:  		/* addi R11, R11, 1 */
		/* 82183CC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82183CC8h case    4:*/		return 0x82183CCC;
		  /* 82183CCCh */ case    5:  		/* mtspr CTR, R11 */
		/* 82183CCCh case    5:*/		regs.CTR = regs.R11;
		/* 82183CCCh case    5:*/		return 0x82183CD0;
		  /* 82183CD0h */ case    6:  		/* ldx R11, <#[R10 + R3]> */
		/* 82183CD0h case    6:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82183CD0h case    6:*/		return 0x82183CD4;
		  /* 82183CD4h */ case    7:  		/* ld R9, <#[R3]> */
		/* 82183CD4h case    7:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82183CD4h case    7:*/		return 0x82183CD8;
		  /* 82183CD8h */ case    8:  		/* or R11, R11, R9 */
		/* 82183CD8h case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82183CD8h case    8:*/		return 0x82183CDC;
		  /* 82183CDCh */ case    9:  		/* std R11, <#[R3]> */
		/* 82183CDCh case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82183CDCh case    9:*/		return 0x82183CE0;
		  /* 82183CE0h */ case   10:  		/* addi R3, R3, 8 */
		/* 82183CE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x8);
		/* 82183CE0h case   10:*/		return 0x82183CE4;
		  /* 82183CE4h */ case   11:  		/* bc 16, CR0_LT, -20 */
		/* 82183CE4h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82183CD0;  }
		/* 82183CE4h case   11:*/		return 0x82183CE8;
		  /* 82183CE8h */ case   12:  		/* bclr 20, CR0_LT */
		/* 82183CE8h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183CE8h case   12:*/		return 0x82183CEC;
	}
	return 0x82183CEC;
} // Block from 82183CB8h-82183CECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82183CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183CEC);
		  /* 82183CECh */ case    0:  		/* nop */
		/* 82183CECh case    0:*/		cpu::op::nop();
		/* 82183CECh case    0:*/		return 0x82183CF0;
		  /* 82183CF0h */ case    1:  		/* rlwinm R11, R5, 3, 0, 28 */
		/* 82183CF0h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R5);
		/* 82183CF0h case    1:*/		return 0x82183CF4;
		  /* 82183CF4h */ case    2:  		/* add R11, R11, R3 */
		/* 82183CF4h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82183CF4h case    2:*/		return 0x82183CF8;
		  /* 82183CF8h */ case    3:  		/* cmplw CR6, R3, R11 */
		/* 82183CF8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82183CF8h case    3:*/		return 0x82183CFC;
		  /* 82183CFCh */ case    4:  		/* bclr 4, CR6_LT */
		/* 82183CFCh case    4:*/		if ( !regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 82183CFCh case    4:*/		return 0x82183D00;
	}
	return 0x82183D00;
} // Block from 82183CECh-82183D00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183D00);
		  /* 82183D00h */ case    0:  		/* subf R11, R3, R11 */
		/* 82183D00h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82183D00h case    0:*/		return 0x82183D04;
		  /* 82183D04h */ case    1:  		/* subf R10, R3, R4 */
		/* 82183D04h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R3,regs.R4);
		/* 82183D04h case    1:*/		return 0x82183D08;
		  /* 82183D08h */ case    2:  		/* addi R11, R11, -1 */
		/* 82183D08h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82183D08h case    2:*/		return 0x82183D0C;
		  /* 82183D0Ch */ case    3:  		/* rlwinm R11, R11, 29, 3, 31 */
		/* 82183D0Ch case    3:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R11,regs.R11);
		/* 82183D0Ch case    3:*/		return 0x82183D10;
		  /* 82183D10h */ case    4:  		/* addi R11, R11, 1 */
		/* 82183D10h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82183D10h case    4:*/		return 0x82183D14;
		  /* 82183D14h */ case    5:  		/* mtspr CTR, R11 */
		/* 82183D14h case    5:*/		regs.CTR = regs.R11;
		/* 82183D14h case    5:*/		return 0x82183D18;
		  /* 82183D18h */ case    6:  		/* ldx R11, <#[R10 + R3]> */
		/* 82183D18h case    6:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82183D18h case    6:*/		return 0x82183D1C;
		  /* 82183D1Ch */ case    7:  		/* ld R9, <#[R3]> */
		/* 82183D1Ch case    7:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82183D1Ch case    7:*/		return 0x82183D20;
		  /* 82183D20h */ case    8:  		/* andc R11, R9, R11 */
		/* 82183D20h case    8:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82183D20h case    8:*/		return 0x82183D24;
		  /* 82183D24h */ case    9:  		/* std R11, <#[R3]> */
		/* 82183D24h case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82183D24h case    9:*/		return 0x82183D28;
		  /* 82183D28h */ case   10:  		/* addi R3, R3, 8 */
		/* 82183D28h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x8);
		/* 82183D28h case   10:*/		return 0x82183D2C;
		  /* 82183D2Ch */ case   11:  		/* bc 16, CR0_LT, -20 */
		/* 82183D2Ch case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82183D18;  }
		/* 82183D2Ch case   11:*/		return 0x82183D30;
		  /* 82183D30h */ case   12:  		/* bclr 20, CR0_LT */
		/* 82183D30h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183D30h case   12:*/		return 0x82183D34;
	}
	return 0x82183D34;
} // Block from 82183D00h-82183D34h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82183D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183D34);
		  /* 82183D34h */ case    0:  		/* nop */
		/* 82183D34h case    0:*/		cpu::op::nop();
		/* 82183D34h case    0:*/		return 0x82183D38;
		  /* 82183D38h */ case    1:  		/* rlwinm R11, R5, 29, 3, 28 */
		/* 82183D38h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R5);
		/* 82183D38h case    1:*/		return 0x82183D3C;
		  /* 82183D3Ch */ case    2:  		/* li R9, 1 */
		/* 82183D3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82183D3Ch case    2:*/		return 0x82183D40;
		  /* 82183D40h */ case    3:  		/* rldicl R10, R5, 0, 58 */
		/* 82183D40h case    3:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R5);
		/* 82183D40h case    3:*/		return 0x82183D44;
		  /* 82183D44h */ case    4:  		/* sld R10, R9, R10 */
		/* 82183D44h case    4:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82183D44h case    4:*/		return 0x82183D48;
		  /* 82183D48h */ case    5:  		/* ldx R9, <#[R11 + R4]> */
		/* 82183D48h case    5:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82183D48h case    5:*/		return 0x82183D4C;
		  /* 82183D4Ch */ case    6:  		/* or R10, R10, R9 */
		/* 82183D4Ch case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82183D4Ch case    6:*/		return 0x82183D50;
		  /* 82183D50h */ case    7:  		/* stdx R10, <#[R11 + R4]> */
		/* 82183D50h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82183D50h case    7:*/		return 0x82183D54;
		  /* 82183D54h */ case    8:  		/* bclr 20, CR0_LT */
		/* 82183D54h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183D54h case    8:*/		return 0x82183D58;
	}
	return 0x82183D58;
} // Block from 82183D34h-82183D58h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82183D58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183D58);
		  /* 82183D58h */ case    0:  		/* lwz R11, <#[R3 + 692]> */
		/* 82183D58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002B4) );
		/* 82183D58h case    0:*/		return 0x82183D5C;
		  /* 82183D5Ch */ case    1:  		/* rlwinm R10, R4, 1, 0, 30 */
		/* 82183D5Ch case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R4);
		/* 82183D5Ch case    1:*/		return 0x82183D60;
		  /* 82183D60h */ case    2:  		/* rlwinm R9, R4, 1, 0, 25 */
		/* 82183D60h case    2:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R9,regs.R4);
		/* 82183D60h case    2:*/		return 0x82183D64;
		  /* 82183D64h */ case    3:  		/* rlwinm R8, R4, 30, 3, 28 */
		/* 82183D64h case    3:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R8,regs.R4);
		/* 82183D64h case    3:*/		return 0x82183D68;
		  /* 82183D68h */ case    4:  		/* subf R10, R9, R10 */
		/* 82183D68h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82183D68h case    4:*/		return 0x82183D6C;
		  /* 82183D6Ch */ case    5:  		/* rldicl R10, R10, 0, 32 */
		/* 82183D6Ch case    5:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 82183D6Ch case    5:*/		return 0x82183D70;
		  /* 82183D70h */ case    6:  		/* ldx R11, <#[R8 + R11]> */
		/* 82183D70h case    6:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82183D70h case    6:*/		return 0x82183D74;
		  /* 82183D74h */ case    7:  		/* srd R11, R11, R10 */
		/* 82183D74h case    7:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82183D74h case    7:*/		return 0x82183D78;
		  /* 82183D78h */ case    8:  		/* rlwinm R3, R11, 0, 30, 31 */
		/* 82183D78h case    8:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R3,regs.R11);
		/* 82183D78h case    8:*/		return 0x82183D7C;
		  /* 82183D7Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 82183D7Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183D7Ch case    9:*/		return 0x82183D80;
	}
	return 0x82183D80;
} // Block from 82183D58h-82183D80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82183D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183D80);
		  /* 82183D80h */ case    0:  		/* rlwinm R8, R4, 1, 0, 25 */
		/* 82183D80h case    0:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R8,regs.R4);
		/* 82183D80h case    0:*/		return 0x82183D84;
		  /* 82183D84h */ case    1:  		/* lwz R11, <#[R3 + 692]> */
		/* 82183D84h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002B4) );
		/* 82183D84h case    1:*/		return 0x82183D88;
		  /* 82183D88h */ case    2:  		/* rlwinm R9, R4, 1, 0, 30 */
		/* 82183D88h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R4);
		/* 82183D88h case    2:*/		return 0x82183D8C;
		  /* 82183D8Ch */ case    3:  		/* rlwinm R10, R4, 30, 3, 28 */
		/* 82183D8Ch case    3:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R10,regs.R4);
		/* 82183D8Ch case    3:*/		return 0x82183D90;
		  /* 82183D90h */ case    4:  		/* subf R9, R8, R9 */
		/* 82183D90h case    4:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82183D90h case    4:*/		return 0x82183D94;
		  /* 82183D94h */ case    5:  		/* li R8, 3 */
		/* 82183D94h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 82183D94h case    5:*/		return 0x82183D98;
		  /* 82183D98h */ case    6:  		/* rldicl R9, R9, 0, 32 */
		/* 82183D98h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 82183D98h case    6:*/		return 0x82183D9C;
		  /* 82183D9Ch */ case    7:  		/* rldicl R7, R6, 0, 62 */
		/* 82183D9Ch case    7:*/		cpu::op::rldicl<0,0,62>(regs,&regs.R7,regs.R6);
		/* 82183D9Ch case    7:*/		return 0x82183DA0;
		  /* 82183DA0h */ case    8:  		/* ldx R6, <#[R10 + R11]> */
		/* 82183DA0h case    8:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82183DA0h case    8:*/		return 0x82183DA4;
		  /* 82183DA4h */ case    9:  		/* sld R8, R8, R9 */
		/* 82183DA4h case    9:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 82183DA4h case    9:*/		return 0x82183DA8;
		  /* 82183DA8h */ case   10:  		/* sld R9, R7, R9 */
		/* 82183DA8h case   10:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82183DA8h case   10:*/		return 0x82183DAC;
		  /* 82183DACh */ case   11:  		/* andc R8, R6, R8 */
		/* 82183DACh case   11:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 82183DACh case   11:*/		return 0x82183DB0;
		  /* 82183DB0h */ case   12:  		/* rlwinm R7, R4, 2, 0, 29 */
		/* 82183DB0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R4);
		/* 82183DB0h case   12:*/		return 0x82183DB4;
		  /* 82183DB4h */ case   13:  		/* or R9, R9, R8 */
		/* 82183DB4h case   13:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82183DB4h case   13:*/		return 0x82183DB8;
		  /* 82183DB8h */ case   14:  		/* stdx R9, <#[R10 + R11]> */
		/* 82183DB8h case   14:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82183DB8h case   14:*/		return 0x82183DBC;
		  /* 82183DBCh */ case   15:  		/* lwz R11, <#[R3 + 688]> */
		/* 82183DBCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002B0) );
		/* 82183DBCh case   15:*/		return 0x82183DC0;
		  /* 82183DC0h */ case   16:  		/* stwx R5, <#[R11 + R7]> */
		/* 82183DC0h case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82183DC0h case   16:*/		return 0x82183DC4;
		  /* 82183DC4h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82183DC4h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183DC4h case   17:*/		return 0x82183DC8;
	}
	return 0x82183DC8;
} // Block from 82183D80h-82183DC8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82183DC8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183DC8);
		  /* 82183DC8h */ case    0:  		/* lwz R11, <#[R3 + 688]> */
		/* 82183DC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002B0) );
		/* 82183DC8h case    0:*/		return 0x82183DCC;
		  /* 82183DCCh */ case    1:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 82183DCCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 82183DCCh case    1:*/		return 0x82183DD0;
		  /* 82183DD0h */ case    2:  		/* lwzx R3, <#[R11 + R10]> */
		/* 82183DD0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82183DD0h case    2:*/		return 0x82183DD4;
		  /* 82183DD4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82183DD4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183DD4h case    3:*/		return 0x82183DD8;
	}
	return 0x82183DD8;
} // Block from 82183DC8h-82183DD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82183DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183DD8);
		  /* 82183DD8h */ case    0:  		/* mfspr R12, LR */
		/* 82183DD8h case    0:*/		regs.R12 = regs.LR;
		/* 82183DD8h case    0:*/		return 0x82183DDC;
		  /* 82183DDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82183DDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82183DDCh case    1:*/		return 0x82183DE0;
		  /* 82183DE0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82183DE0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82183DE0h case    2:*/		return 0x82183DE4;
		  /* 82183DE4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82183DE4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82183DE4h case    3:*/		return 0x82183DE8;
		  /* 82183DE8h */ case    4:  		/* lwz R11, <#[R4 + 8]> */
		/* 82183DE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82183DE8h case    4:*/		return 0x82183DEC;
		  /* 82183DECh */ case    5:  		/* mr R31, R3 */
		/* 82183DECh case    5:*/		regs.R31 = regs.R3;
		/* 82183DECh case    5:*/		return 0x82183DF0;
		  /* 82183DF0h */ case    6:  		/* lhz R10, <#[R4 + 18]> */
		/* 82183DF0h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000012) );
		/* 82183DF0h case    6:*/		return 0x82183DF4;
		  /* 82183DF4h */ case    7:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 82183DF4h case    7:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 82183DF4h case    7:*/		return 0x82183DF8;
		  /* 82183DF8h */ case    8:  		/* addi R9, R11, -1 */
		/* 82183DF8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82183DF8h case    8:*/		return 0x82183DFC;
		  /* 82183DFCh */ case    9:  		/* andc R11, R11, R9 */
		/* 82183DFCh case    9:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82183DFCh case    9:*/		return 0x82183E00;
		  /* 82183E00h */ case   10:  		/* cntlzw R11, R11 */
		/* 82183E00h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82183E00h case   10:*/		return 0x82183E04;
		  /* 82183E04h */ case   11:  		/* subf R11, R11, R10 */
		/* 82183E04h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82183E04h case   11:*/		return 0x82183E08;
		  /* 82183E08h */ case   12:  		/* addi R4, R11, 31 */
		/* 82183E08h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1F);
		/* 82183E08h case   12:*/		return 0x82183E0C;
		  /* 82183E0Ch */ case   13:  		/* bl -1196 */
		/* 82183E0Ch case   13:*/		regs.LR = 0x82183E10; return 0x82183960;
		/* 82183E0Ch case   13:*/		return 0x82183E10;
		  /* 82183E10h */ case   14:  		/* lwz R11, <#[R31 + 688]> */
		/* 82183E10h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B0) );
		/* 82183E10h case   14:*/		return 0x82183E14;
		  /* 82183E14h */ case   15:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82183E14h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82183E14h case   15:*/		return 0x82183E18;
		  /* 82183E18h */ case   16:  		/* lwzx R3, <#[R11 + R10]> */
		/* 82183E18h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82183E18h case   16:*/		return 0x82183E1C;
		  /* 82183E1Ch */ case   17:  		/* addi R1, R1, 96 */
		/* 82183E1Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82183E1Ch case   17:*/		return 0x82183E20;
		  /* 82183E20h */ case   18:  		/* lwz R12, <#[R1 - 8]> */
		/* 82183E20h case   18:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82183E20h case   18:*/		return 0x82183E24;
		  /* 82183E24h */ case   19:  		/* mtspr LR, R12 */
		/* 82183E24h case   19:*/		regs.LR = regs.R12;
		/* 82183E24h case   19:*/		return 0x82183E28;
		  /* 82183E28h */ case   20:  		/* ld R31, <#[R1 - 16]> */
		/* 82183E28h case   20:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82183E28h case   20:*/		return 0x82183E2C;
		  /* 82183E2Ch */ case   21:  		/* bclr 20, CR0_LT */
		/* 82183E2Ch case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82183E2Ch case   21:*/		return 0x82183E30;
	}
	return 0x82183E30;
} // Block from 82183DD8h-82183E30h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82183E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183E30);
		  /* 82183E30h */ case    0:  		/* mfspr R12, LR */
		/* 82183E30h case    0:*/		regs.R12 = regs.LR;
		/* 82183E30h case    0:*/		return 0x82183E34;
		  /* 82183E34h */ case    1:  		/* bl -994264 */
		/* 82183E34h case    1:*/		regs.LR = 0x82183E38; return 0x8209125C;
		/* 82183E34h case    1:*/		return 0x82183E38;
		  /* 82183E38h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82183E38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82183E38h case    2:*/		return 0x82183E3C;
		  /* 82183E3Ch */ case    3:  		/* lhz R31, <#[R4 + 18]> */
		/* 82183E3Ch case    3:*/		cpu::mem::load16z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000012) );
		/* 82183E3Ch case    3:*/		return 0x82183E40;
		  /* 82183E40h */ case    4:  		/* mr R29, R3 */
		/* 82183E40h case    4:*/		regs.R29 = regs.R3;
		/* 82183E40h case    4:*/		return 0x82183E44;
		  /* 82183E44h */ case    5:  		/* mr R30, R4 */
		/* 82183E44h case    5:*/		regs.R30 = regs.R4;
		/* 82183E44h case    5:*/		return 0x82183E48;
		  /* 82183E48h */ case    6:  		/* b 36 */
		/* 82183E48h case    6:*/		return 0x82183E6C;
		/* 82183E48h case    6:*/		return 0x82183E4C;
		  /* 82183E4Ch */ case    7:  		/* mr R4, R31 */
		/* 82183E4Ch case    7:*/		regs.R4 = regs.R31;
		/* 82183E4Ch case    7:*/		return 0x82183E50;
		  /* 82183E50h */ case    8:  		/* bl -1264 */
		/* 82183E50h case    8:*/		regs.LR = 0x82183E54; return 0x82183960;
		/* 82183E50h case    8:*/		return 0x82183E54;
		  /* 82183E54h */ case    9:  		/* lwz R11, <#[R29 + 688]> */
		/* 82183E54h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000002B0) );
		/* 82183E54h case    9:*/		return 0x82183E58;
		  /* 82183E58h */ case   10:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82183E58h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82183E58h case   10:*/		return 0x82183E5C;
		  /* 82183E5Ch */ case   11:  		/* lwzx R5, <#[R10 + R11]> */
		/* 82183E5Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82183E5Ch case   11:*/		return 0x82183E60;
		  /* 82183E60h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 82183E60h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82183E60h case   12:*/		return 0x82183E64;
		  /* 82183E64h */ case   13:  		/* bc 4, CR6_EQ, 44 */
		/* 82183E64h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82183E90;  }
		/* 82183E64h case   13:*/		return 0x82183E68;
		  /* 82183E68h */ case   14:  		/* addi R31, R31, 1 */
		/* 82183E68h case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82183E68h case   14:*/		return 0x82183E6C;
	}
	return 0x82183E6C;
} // Block from 82183E30h-82183E6Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82183E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183E6C);
		  /* 82183E6Ch */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 82183E6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82183E6Ch case    0:*/		return 0x82183E70;
		  /* 82183E70h */ case    1:  		/* mr R3, R29 */
		/* 82183E70h case    1:*/		regs.R3 = regs.R29;
		/* 82183E70h case    1:*/		return 0x82183E74;
		  /* 82183E74h */ case    2:  		/* rlwinm R10, R11, 16, 29, 31 */
		/* 82183E74h case    2:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R11);
		/* 82183E74h case    2:*/		return 0x82183E78;
		  /* 82183E78h */ case    3:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 82183E78h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 82183E78h case    3:*/		return 0x82183E7C;
		  /* 82183E7Ch */ case    4:  		/* add R11, R10, R11 */
		/* 82183E7Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82183E7Ch case    4:*/		return 0x82183E80;
		  /* 82183E80h */ case    5:  		/* cmplw CR6, R31, R11 */
		/* 82183E80h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82183E80h case    5:*/		return 0x82183E84;
		  /* 82183E84h */ case    6:  		/* bc 12, CR6_LT, -56 */
		/* 82183E84h case    6:*/		if ( regs.CR[6].lt ) { return 0x82183E4C;  }
		/* 82183E84h case    6:*/		return 0x82183E88;
		  /* 82183E88h */ case    7:  		/* li R4, 4800 */
		/* 82183E88h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82183E88h case    7:*/		return 0x82183E8C;
		  /* 82183E8Ch */ case    8:  		/* bl -204836 */
		/* 82183E8Ch case    8:*/		regs.LR = 0x82183E90; return 0x82151E68;
		/* 82183E8Ch case    8:*/		return 0x82183E90;
	}
	return 0x82183E90;
} // Block from 82183E6Ch-82183E90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82183E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183E90);
		  /* 82183E90h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82183E90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82183E90h case    0:*/		return 0x82183E94;
		  /* 82183E94h */ case    1:  		/* lis R3, 0 */
		/* 82183E94h case    1:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 82183E94h case    1:*/		return 0x82183E98;
		  /* 82183E98h */ case    2:  		/* ori R3, R3, 65535 */
		/* 82183E98h case    2:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xFFFF);
		/* 82183E98h case    2:*/		return 0x82183E9C;
		  /* 82183E9Ch */ case    3:  		/* rlwinm R6, R11, 31, 28, 31 */
		/* 82183E9Ch case    3:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R6,regs.R11);
		/* 82183E9Ch case    3:*/		return 0x82183EA0;
		  /* 82183EA0h */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 82183EA0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82183EA0h case    4:*/		return 0x82183EA4;
		  /* 82183EA4h */ case    5:  		/* bc 12, CR6_EQ, 276 */
		/* 82183EA4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82183FB8;  }
		/* 82183EA4h case    5:*/		return 0x82183EA8;
		  /* 82183EA8h */ case    6:  		/* addi R11, R6, -1 */
		/* 82183EA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFF);
		/* 82183EA8h case    6:*/		return 0x82183EAC;
		  /* 82183EACh */ case    7:  		/* lwz R10, <#[R5 + 192]> */
		/* 82183EACh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x000000C0) );
		/* 82183EACh case    7:*/		return 0x82183EB0;
		  /* 82183EB0h */ case    8:  		/* li R8, 0 */
		/* 82183EB0h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82183EB0h case    8:*/		return 0x82183EB4;
		  /* 82183EB4h */ case    9:  		/* andc R9, R6, R11 */
		/* 82183EB4h case    9:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R6,regs.R11);
		/* 82183EB4h case    9:*/		return 0x82183EB8;
		  /* 82183EB8h */ case   10:  		/* rlwinm. R11, R10, 0, 29, 31 */
		/* 82183EB8h case   10:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R10);
		/* 82183EB8h case   10:*/		return 0x82183EBC;
		  /* 82183EBCh */ case   11:  		/* cntlzw R9, R9 */
		/* 82183EBCh case   11:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82183EBCh case   11:*/		return 0x82183EC0;
		  /* 82183EC0h */ case   12:  		/* subfic R7, R9, 31 */
		/* 82183EC0h case   12:*/		cpu::op::subfic<0>(regs,&regs.R7,regs.R9,0x1F);
		/* 82183EC0h case   12:*/		return 0x82183EC4;
		  /* 82183EC4h */ case   13:  		/* bc 12, CR0_EQ, 44 */
		/* 82183EC4h case   13:*/		if ( regs.CR[0].eq ) { return 0x82183EF0;  }
		/* 82183EC4h case   13:*/		return 0x82183EC8;
		  /* 82183EC8h */ case   14:  		/* li R9, 0 */
		/* 82183EC8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82183EC8h case   14:*/		return 0x82183ECC;
		  /* 82183ECCh */ case   15:  		/* rlwinm R4, R10, 18, 24, 31 */
		/* 82183ECCh case   15:*/		cpu::op::rlwinm<0,18,24,31>(regs,&regs.R4,regs.R10);
		/* 82183ECCh case   15:*/		return 0x82183ED0;
		  /* 82183ED0h */ case   16:  		/* srw R4, R4, R9 */
		/* 82183ED0h case   16:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R4,regs.R9);
		/* 82183ED0h case   16:*/		return 0x82183ED4;
		  /* 82183ED4h */ case   17:  		/* rlwinm R4, R4, 0, 30, 31 */
		/* 82183ED4h case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R4);
		/* 82183ED4h case   17:*/		return 0x82183ED8;
		  /* 82183ED8h */ case   18:  		/* cmplw CR6, R7, R4 */
		/* 82183ED8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 82183ED8h case   18:*/		return 0x82183EDC;
		  /* 82183EDCh */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 82183EDCh case   19:*/		if ( regs.CR[6].eq ) { return 0x82183EF0;  }
		/* 82183EDCh case   19:*/		return 0x82183EE0;
		  /* 82183EE0h */ case   20:  		/* addi R8, R8, 1 */
		/* 82183EE0h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82183EE0h case   20:*/		return 0x82183EE4;
		  /* 82183EE4h */ case   21:  		/* addi R9, R9, 2 */
		/* 82183EE4h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82183EE4h case   21:*/		return 0x82183EE8;
		  /* 82183EE8h */ case   22:  		/* cmplw CR6, R8, R11 */
		/* 82183EE8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 82183EE8h case   22:*/		return 0x82183EEC;
		  /* 82183EECh */ case   23:  		/* bc 12, CR6_LT, -32 */
		/* 82183EECh case   23:*/		if ( regs.CR[6].lt ) { return 0x82183ECC;  }
		/* 82183EECh case   23:*/		return 0x82183EF0;
	}
	return 0x82183EF0;
} // Block from 82183E90h-82183EF0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82183EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183EF0);
		  /* 82183EF0h */ case    0:  		/* cmplw CR6, R8, R11 */
		/* 82183EF0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 82183EF0h case    0:*/		return 0x82183EF4;
		  /* 82183EF4h */ case    1:  		/* bc 4, CR6_LT, 172 */
		/* 82183EF4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82183FA0;  }
		/* 82183EF4h case    1:*/		return 0x82183EF8;
		  /* 82183EF8h */ case    2:  		/* lwz R10, <#[R30 + 16]> */
		/* 82183EF8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82183EF8h case    2:*/		return 0x82183EFC;
		  /* 82183EFCh */ case    3:  		/* mr R7, R10 */
		/* 82183EFCh case    3:*/		regs.R7 = regs.R10;
		/* 82183EFCh case    3:*/		return 0x82183F00;
		  /* 82183F00h */ case    4:  		/* rlwinm R11, R10, 16, 29, 31 */
		/* 82183F00h case    4:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R11,regs.R10);
		/* 82183F00h case    4:*/		return 0x82183F04;
		  /* 82183F04h */ case    5:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 82183F04h case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 82183F04h case    5:*/		return 0x82183F08;
		  /* 82183F08h */ case    6:  		/* rlwinm R9, R7, 0, 16, 31 */
		/* 82183F08h case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R7);
		/* 82183F08h case    6:*/		return 0x82183F0C;
		  /* 82183F0Ch */ case    7:  		/* add R10, R11, R10 */
		/* 82183F0Ch case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82183F0Ch case    7:*/		return 0x82183F10;
		  /* 82183F10h */ case    8:  		/* mr R11, R9 */
		/* 82183F10h case    8:*/		regs.R11 = regs.R9;
		/* 82183F10h case    8:*/		return 0x82183F14;
		  /* 82183F14h */ case    9:  		/* cmplw CR6, R9, R10 */
		/* 82183F14h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82183F14h case    9:*/		return 0x82183F18;
		  /* 82183F18h */ case   10:  		/* bc 4, CR6_LT, 96 */
		/* 82183F18h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82183F78;  }
		/* 82183F18h case   10:*/		return 0x82183F1C;
		  /* 82183F1Ch */ case   11:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82183F1Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82183F1Ch case   11:*/		return 0x82183F20;
		  /* 82183F20h */ case   12:  		/* lwzx R8, <#[R10 + R5]> */
		/* 82183F20h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 82183F20h case   12:*/		return 0x82183F24;
		  /* 82183F24h */ case   13:  		/* rlwinm R10, R11, 29, 3, 28 */
		/* 82183F24h case   13:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R11);
		/* 82183F24h case   13:*/		return 0x82183F28;
		  /* 82183F28h */ case   14:  		/* rldicl R4, R11, 0, 58 */
		/* 82183F28h case   14:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R4,regs.R11);
		/* 82183F28h case   14:*/		return 0x82183F2C;
		  /* 82183F2Ch */ case   15:  		/* li R31, 1 */
		/* 82183F2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82183F2Ch case   15:*/		return 0x82183F30;
		  /* 82183F30h */ case   16:  		/* sld R4, R31, R4 */
		/* 82183F30h case   16:*/		cpu::op::sld<0>(regs,&regs.R4,regs.R31,regs.R4);
		/* 82183F30h case   16:*/		return 0x82183F34;
		  /* 82183F34h */ case   17:  		/* ldx R10, <#[R10 + R8]> */
		/* 82183F34h case   17:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82183F34h case   17:*/		return 0x82183F38;
		  /* 82183F38h */ case   18:  		/* and R10, R4, R10 */
		/* 82183F38h case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 82183F38h case   18:*/		return 0x82183F3C;
		  /* 82183F3Ch */ case   19:  		/* cmpldi CR6, R10, 0 */
		/* 82183F3Ch case   19:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82183F3Ch case   19:*/		return 0x82183F40;
		  /* 82183F40h */ case   20:  		/* li R10, 1 */
		/* 82183F40h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82183F40h case   20:*/		return 0x82183F44;
		  /* 82183F44h */ case   21:  		/* bc 4, CR6_EQ, 8 */
		/* 82183F44h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82183F4C;  }
		/* 82183F44h case   21:*/		return 0x82183F48;
		  /* 82183F48h */ case   22:  		/* li R10, 0 */
		/* 82183F48h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82183F48h case   22:*/		return 0x82183F4C;
	}
	return 0x82183F4C;
} // Block from 82183EF0h-82183F4Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82183F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183F4C);
		  /* 82183F4Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82183F4Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82183F4Ch case    0:*/		return 0x82183F50;
		  /* 82183F50h */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 82183F50h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82183F6C;  }
		/* 82183F50h case    1:*/		return 0x82183F54;
		  /* 82183F54h */ case    2:  		/* rlwinm R10, R7, 16, 29, 31 */
		/* 82183F54h case    2:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R7);
		/* 82183F54h case    2:*/		return 0x82183F58;
		  /* 82183F58h */ case    3:  		/* addi R11, R11, 1 */
		/* 82183F58h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82183F58h case    3:*/		return 0x82183F5C;
		  /* 82183F5Ch */ case    4:  		/* add R10, R10, R9 */
		/* 82183F5Ch case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82183F5Ch case    4:*/		return 0x82183F60;
		  /* 82183F60h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82183F60h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82183F60h case    5:*/		return 0x82183F64;
		  /* 82183F64h */ case    6:  		/* bc 12, CR6_LT, -64 */
		/* 82183F64h case    6:*/		if ( regs.CR[6].lt ) { return 0x82183F24;  }
		/* 82183F64h case    6:*/		return 0x82183F68;
		  /* 82183F68h */ case    7:  		/* b 16 */
		/* 82183F68h case    7:*/		return 0x82183F78;
		/* 82183F68h case    7:*/		return 0x82183F6C;
	}
	return 0x82183F6C;
} // Block from 82183F4Ch-82183F6Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183F6C);
		  /* 82183F6Ch */ case    0:  		/* cmplw CR6, R11, R3 */
		/* 82183F6Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 82183F6Ch case    0:*/		return 0x82183F70;
		  /* 82183F70h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 82183F70h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82183F78;  }
		/* 82183F70h case    1:*/		return 0x82183F74;
		  /* 82183F74h */ case    2:  		/* mr R3, R11 */
		/* 82183F74h case    2:*/		regs.R3 = regs.R11;
		/* 82183F74h case    2:*/		return 0x82183F78;
	}
	return 0x82183F78;
} // Block from 82183F6Ch-82183F78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183F78);
		  /* 82183F78h */ case    0:  		/* lwz R9, <#[R30 + 16]> */
		/* 82183F78h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82183F78h case    0:*/		return 0x82183F7C;
		  /* 82183F7Ch */ case    1:  		/* rlwinm R10, R9, 16, 29, 31 */
		/* 82183F7Ch case    1:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R9);
		/* 82183F7Ch case    1:*/		return 0x82183F80;
		  /* 82183F80h */ case    2:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 82183F80h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 82183F80h case    2:*/		return 0x82183F84;
		  /* 82183F84h */ case    3:  		/* add R10, R10, R9 */
		/* 82183F84h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82183F84h case    3:*/		return 0x82183F88;
		  /* 82183F88h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82183F88h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82183F88h case    4:*/		return 0x82183F8C;
		  /* 82183F8Ch */ case    5:  		/* bc 4, CR6_LT, 32 */
		/* 82183F8Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x82183FAC;  }
		/* 82183F8Ch case    5:*/		return 0x82183F90;
		  /* 82183F90h */ case    6:  		/* addi R11, R6, -1 */
		/* 82183F90h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFF);
		/* 82183F90h case    6:*/		return 0x82183F94;
		  /* 82183F94h */ case    7:  		/* andc R11, R6, R11 */
		/* 82183F94h case    7:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 82183F94h case    7:*/		return 0x82183F98;
		  /* 82183F98h */ case    8:  		/* subf R6, R11, R6 */
		/* 82183F98h case    8:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 82183F98h case    8:*/		return 0x82183F9C;
		  /* 82183F9Ch */ case    9:  		/* b -252 */
		/* 82183F9Ch case    9:*/		return 0x82183EA0;
		/* 82183F9Ch case    9:*/		return 0x82183FA0;
	}
	return 0x82183FA0;
} // Block from 82183F78h-82183FA0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82183FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183FA0);
		  /* 82183FA0h */ case    0:  		/* li R4, 4800 */
		/* 82183FA0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82183FA0h case    0:*/		return 0x82183FA4;
		  /* 82183FA4h */ case    1:  		/* mr R3, R29 */
		/* 82183FA4h case    1:*/		regs.R3 = regs.R29;
		/* 82183FA4h case    1:*/		return 0x82183FA8;
		  /* 82183FA8h */ case    2:  		/* bl -205120 */
		/* 82183FA8h case    2:*/		regs.LR = 0x82183FAC; return 0x82151E68;
		/* 82183FA8h case    2:*/		return 0x82183FAC;
	}
	return 0x82183FAC;
} // Block from 82183FA0h-82183FACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183FAC);
		  /* 82183FACh */ case    0:  		/* li R4, 4800 */
		/* 82183FACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82183FACh case    0:*/		return 0x82183FB0;
		  /* 82183FB0h */ case    1:  		/* mr R3, R29 */
		/* 82183FB0h case    1:*/		regs.R3 = regs.R29;
		/* 82183FB0h case    1:*/		return 0x82183FB4;
		  /* 82183FB4h */ case    2:  		/* bl -205132 */
		/* 82183FB4h case    2:*/		regs.LR = 0x82183FB8; return 0x82151E68;
		/* 82183FB4h case    2:*/		return 0x82183FB8;
	}
	return 0x82183FB8;
} // Block from 82183FACh-82183FB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183FB8);
		  /* 82183FB8h */ case    0:  		/* cmplwi CR6, R3, 65535 */
		/* 82183FB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000FFFF);
		/* 82183FB8h case    0:*/		return 0x82183FBC;
		  /* 82183FBCh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82183FBCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82183FCC;  }
		/* 82183FBCh case    1:*/		return 0x82183FC0;
		  /* 82183FC0h */ case    2:  		/* li R4, 4800 */
		/* 82183FC0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82183FC0h case    2:*/		return 0x82183FC4;
		  /* 82183FC4h */ case    3:  		/* mr R3, R29 */
		/* 82183FC4h case    3:*/		regs.R3 = regs.R29;
		/* 82183FC4h case    3:*/		return 0x82183FC8;
		  /* 82183FC8h */ case    4:  		/* bl -205152 */
		/* 82183FC8h case    4:*/		regs.LR = 0x82183FCC; return 0x82151E68;
		/* 82183FC8h case    4:*/		return 0x82183FCC;
	}
	return 0x82183FCC;
} // Block from 82183FB8h-82183FCCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82183FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183FCC);
		  /* 82183FCCh */ case    0:  		/* addi R1, R1, 112 */
		/* 82183FCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82183FCCh case    0:*/		return 0x82183FD0;
		  /* 82183FD0h */ case    1:  		/* b -994596 */
		/* 82183FD0h case    1:*/		return 0x820912AC;
		/* 82183FD0h case    1:*/		return 0x82183FD4;
		  /* 82183FD4h */ case    2:  		/* nop */
		/* 82183FD4h case    2:*/		cpu::op::nop();
		/* 82183FD4h case    2:*/		return 0x82183FD8;
	}
	return 0x82183FD8;
} // Block from 82183FCCh-82183FD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82183FD8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183FD8);
		  /* 82183FD8h */ case    0:  		/* mfspr R12, LR */
		/* 82183FD8h case    0:*/		regs.R12 = regs.LR;
		/* 82183FD8h case    0:*/		return 0x82183FDC;
		  /* 82183FDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82183FDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82183FDCh case    1:*/		return 0x82183FE0;
		  /* 82183FE0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82183FE0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82183FE0h case    2:*/		return 0x82183FE4;
		  /* 82183FE4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82183FE4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82183FE4h case    3:*/		return 0x82183FE8;
		  /* 82183FE8h */ case    4:  		/* lwz R11, <#[R4 + 16]> */
		/* 82183FE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 82183FE8h case    4:*/		return 0x82183FEC;
		  /* 82183FECh */ case    5:  		/* mr R31, R3 */
		/* 82183FECh case    5:*/		regs.R31 = regs.R3;
		/* 82183FECh case    5:*/		return 0x82183FF0;
		  /* 82183FF0h */ case    6:  		/* rlwinm. R10, R11, 0, 13, 15 */
		/* 82183FF0h case    6:*/		cpu::op::rlwinm<1,0,13,15>(regs,&regs.R10,regs.R11);
		/* 82183FF0h case    6:*/		return 0x82183FF4;
		  /* 82183FF4h */ case    7:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 82183FF4h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 82183FF4h case    7:*/		return 0x82183FF8;
	}
	return 0x82183FF8;
} // Block from 82183FD8h-82183FF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82183FF8h
// Function '?CountBits@D3DXShader@@YAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82183FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82183FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82183FF8);
		  /* 82183FF8h */ case    0:  		/* bc 12, CR0_EQ, 32 */
		/* 82183FF8h case    0:*/		if ( regs.CR[0].eq ) { return 0x82184018;  }
		/* 82183FF8h case    0:*/		return 0x82183FFC;
		  /* 82183FFCh */ case    1:  		/* lwz R10, <#[R4 + 8]> */
		/* 82183FFCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 82183FFCh case    1:*/		return 0x82184000;
		  /* 82184000h */ case    2:  		/* rlwinm R10, R10, 31, 28, 31 */
		/* 82184000h case    2:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R10,regs.R10);
		/* 82184000h case    2:*/		return 0x82184004;
		  /* 82184004h */ case    3:  		/* addi R9, R10, -1 */
		/* 82184004h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 82184004h case    3:*/		return 0x82184008;
		  /* 82184008h */ case    4:  		/* andc R10, R10, R9 */
		/* 82184008h case    4:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82184008h case    4:*/		return 0x8218400C;
		  /* 8218400Ch */ case    5:  		/* cntlzw R10, R10 */
		/* 8218400Ch case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8218400Ch case    5:*/		return 0x82184010;
		  /* 82184010h */ case    6:  		/* subf R11, R10, R11 */
		/* 82184010h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82184010h case    6:*/		return 0x82184014;
		  /* 82184014h */ case    7:  		/* addi R11, R11, 31 */
		/* 82184014h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82184014h case    7:*/		return 0x82184018;
	}
	return 0x82184018;
} // Block from 82183FF8h-82184018h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82184018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184018);
		  /* 82184018h */ case    0:  		/* mr R4, R11 */
		/* 82184018h case    0:*/		regs.R4 = regs.R11;
		/* 82184018h case    0:*/		return 0x8218401C;
		  /* 8218401Ch */ case    1:  		/* mr R3, R31 */
		/* 8218401Ch case    1:*/		regs.R3 = regs.R31;
		/* 8218401Ch case    1:*/		return 0x82184020;
		  /* 82184020h */ case    2:  		/* bl -1728 */
		/* 82184020h case    2:*/		regs.LR = 0x82184024; return 0x82183960;
		/* 82184020h case    2:*/		return 0x82184024;
		  /* 82184024h */ case    3:  		/* lwz R11, <#[R31 + 688]> */
		/* 82184024h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B0) );
		/* 82184024h case    3:*/		return 0x82184028;
		  /* 82184028h */ case    4:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82184028h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82184028h case    4:*/		return 0x8218402C;
		  /* 8218402Ch */ case    5:  		/* lwzx R3, <#[R11 + R10]> */
		/* 8218402Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218402Ch case    5:*/		return 0x82184030;
		  /* 82184030h */ case    6:  		/* addi R1, R1, 96 */
		/* 82184030h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82184030h case    6:*/		return 0x82184034;
		  /* 82184034h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 82184034h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82184034h case    7:*/		return 0x82184038;
		  /* 82184038h */ case    8:  		/* mtspr LR, R12 */
		/* 82184038h case    8:*/		regs.LR = regs.R12;
		/* 82184038h case    8:*/		return 0x8218403C;
		  /* 8218403Ch */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 8218403Ch case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8218403Ch case    9:*/		return 0x82184040;
		  /* 82184040h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82184040h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82184040h case   10:*/		return 0x82184044;
	}
	return 0x82184044;
} // Block from 82184018h-82184044h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82184044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184044);
		  /* 82184044h */ case    0:  		/* nop */
		/* 82184044h case    0:*/		cpu::op::nop();
		/* 82184044h case    0:*/		return 0x82184048;
	}
	return 0x82184048;
} // Block from 82184044h-82184048h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82184048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184048);
		  /* 82184048h */ case    0:  		/* mfspr R12, LR */
		/* 82184048h case    0:*/		regs.R12 = regs.LR;
		/* 82184048h case    0:*/		return 0x8218404C;
		  /* 8218404Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8218404Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8218404Ch case    1:*/		return 0x82184050;
		  /* 82184050h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82184050h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82184050h case    2:*/		return 0x82184054;
		  /* 82184054h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82184054h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82184054h case    3:*/		return 0x82184058;
		  /* 82184058h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82184058h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82184058h case    4:*/		return 0x8218405C;
		  /* 8218405Ch */ case    5:  		/* lwz R31, <#[R4 + 44]> */
		/* 8218405Ch case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x0000002C) );
		/* 8218405Ch case    5:*/		return 0x82184060;
		  /* 82184060h */ case    6:  		/* rlwinm R5, R4, 0, 0, 29 */
		/* 82184060h case    6:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R4);
		/* 82184060h case    6:*/		return 0x82184064;
		  /* 82184064h */ case    7:  		/* lwz R4, <#[R4 + 28]> */
		/* 82184064h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000001C) );
		/* 82184064h case    7:*/		return 0x82184068;
		  /* 82184068h */ case    8:  		/* mr R6, R31 */
		/* 82184068h case    8:*/		regs.R6 = regs.R31;
		/* 82184068h case    8:*/		return 0x8218406C;
		  /* 8218406Ch */ case    9:  		/* bl 678924 */
		/* 8218406Ch case    9:*/		regs.LR = 0x82184070; return 0x82229C78;
		/* 8218406Ch case    9:*/		return 0x82184070;
		  /* 82184070h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 82184070h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82184070h case   10:*/		return 0x82184074;
		  /* 82184074h */ case   11:  		/* rlwinm R5, R11, 27, 24, 31 */
		/* 82184074h case   11:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R11);
		/* 82184074h case   11:*/		return 0x82184078;
		  /* 82184078h */ case   12:  		/* rlwinm R4, R11, 7, 29, 31 */
		/* 82184078h case   12:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R4,regs.R11);
		/* 82184078h case   12:*/		return 0x8218407C;
		  /* 8218407Ch */ case   13:  		/* lwz R30, <#[R31 + 12]> */
		/* 8218407Ch case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8218407Ch case   13:*/		return 0x82184080;
		  /* 82184080h */ case   14:  		/* mr R3, R30 */
		/* 82184080h case   14:*/		regs.R3 = regs.R30;
		/* 82184080h case   14:*/		return 0x82184084;
		  /* 82184084h */ case   15:  		/* bl 645724 */
		/* 82184084h case   15:*/		regs.LR = 0x82184088; return 0x82221AE0;
		/* 82184084h case   15:*/		return 0x82184088;
		  /* 82184088h */ case   16:  		/* lwz R9, <#[R31]> */
		/* 82184088h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82184088h case   16:*/		return 0x8218408C;
		  /* 8218408Ch */ case   17:  		/* li R11, 57 */
		/* 8218408Ch case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x39);
		/* 8218408Ch case   17:*/		return 0x82184090;
		  /* 82184090h */ case   18:  		/* lis R10, 0 */
		/* 82184090h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 82184090h case   18:*/		return 0x82184094;
		  /* 82184094h */ case   19:  		/* rlwimi R9, R11, 7, 19, 26 */
		/* 82184094h case   19:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R9,regs.R11);
		/* 82184094h case   19:*/		return 0x82184098;
		  /* 82184098h */ case   20:  		/* ori R10, R10, 32783 */
		/* 82184098h case   20:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x800F);
		/* 82184098h case   20:*/		return 0x8218409C;
		  /* 8218409Ch */ case   21:  		/* stw R9, <#[R31]> */
		/* 8218409Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8218409Ch case   21:*/		return 0x821840A0;
		  /* 821840A0h */ case   22:  		/* mr R3, R30 */
		/* 821840A0h case   22:*/		regs.R3 = regs.R30;
		/* 821840A0h case   22:*/		return 0x821840A4;
		  /* 821840A4h */ case   23:  		/* lwz R11, <#[R30 + 8]> */
		/* 821840A4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821840A4h case   23:*/		return 0x821840A8;
		  /* 821840A8h */ case   24:  		/* rlwimi R11, R10, 1, 27, 30 */
		/* 821840A8h case   24:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R11,regs.R10);
		/* 821840A8h case   24:*/		return 0x821840AC;
		  /* 821840ACh */ case   25:  		/* rlwimi R11, R10, 1, 15, 17 */
		/* 821840ACh case   25:*/		cpu::op::rlwimi<0,1,15,17>(regs,&regs.R11,regs.R10);
		/* 821840ACh case   25:*/		return 0x821840B0;
		  /* 821840B0h */ case   26:  		/* stw R11, <#[R30 + 8]> */
		/* 821840B0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821840B0h case   26:*/		return 0x821840B4;
		  /* 821840B4h */ case   27:  		/* bl -48444 */
		/* 821840B4h case   27:*/		regs.LR = 0x821840B8; return 0x82178378;
		/* 821840B4h case   27:*/		return 0x821840B8;
		  /* 821840B8h */ case   28:  		/* mr R3, R30 */
		/* 821840B8h case   28:*/		regs.R3 = regs.R30;
		/* 821840B8h case   28:*/		return 0x821840BC;
		  /* 821840BCh */ case   29:  		/* addi R1, R1, 112 */
		/* 821840BCh case   29:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821840BCh case   29:*/		return 0x821840C0;
		  /* 821840C0h */ case   30:  		/* lwz R12, <#[R1 - 8]> */
		/* 821840C0h case   30:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821840C0h case   30:*/		return 0x821840C4;
		  /* 821840C4h */ case   31:  		/* mtspr LR, R12 */
		/* 821840C4h case   31:*/		regs.LR = regs.R12;
		/* 821840C4h case   31:*/		return 0x821840C8;
		  /* 821840C8h */ case   32:  		/* ld R30, <#[R1 - 24]> */
		/* 821840C8h case   32:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821840C8h case   32:*/		return 0x821840CC;
		  /* 821840CCh */ case   33:  		/* ld R31, <#[R1 - 16]> */
		/* 821840CCh case   33:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821840CCh case   33:*/		return 0x821840D0;
		  /* 821840D0h */ case   34:  		/* bclr 20, CR0_LT */
		/* 821840D0h case   34:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821840D0h case   34:*/		return 0x821840D4;
	}
	return 0x821840D4;
} // Block from 82184048h-821840D4h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821840D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821840D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821840D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821840D4);
		  /* 821840D4h */ case    0:  		/* nop */
		/* 821840D4h case    0:*/		cpu::op::nop();
		/* 821840D4h case    0:*/		return 0x821840D8;
	}
	return 0x821840D8;
} // Block from 821840D4h-821840D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821840D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821840D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821840D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821840D8);
		  /* 821840D8h */ case    0:  		/* mfspr R12, LR */
		/* 821840D8h case    0:*/		regs.R12 = regs.LR;
		/* 821840D8h case    0:*/		return 0x821840DC;
		  /* 821840DCh */ case    1:  		/* bl -994972 */
		/* 821840DCh case    1:*/		regs.LR = 0x821840E0; return 0x82091240;
		/* 821840DCh case    1:*/		return 0x821840E0;
		  /* 821840E0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821840E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821840E0h case    2:*/		return 0x821840E4;
		  /* 821840E4h */ case    3:  		/* lwz R11, <#[R4 + 16]> */
		/* 821840E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821840E4h case    3:*/		return 0x821840E8;
		  /* 821840E8h */ case    4:  		/* mr R29, R3 */
		/* 821840E8h case    4:*/		regs.R29 = regs.R3;
		/* 821840E8h case    4:*/		return 0x821840EC;
		  /* 821840ECh */ case    5:  		/* lwz R10, <#[R4 + 8]> */
		/* 821840ECh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821840ECh case    5:*/		return 0x821840F0;
	}
	return 0x821840F0;
} // Block from 821840D8h-821840F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821840F0h
// Function '?GetConditionRegisterControllingBlock@Block@D3DXShader@@QAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821840F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821840F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821840F0);
		  /* 821840F0h */ case    0:  		/* mr R30, R4 */
		/* 821840F0h case    0:*/		regs.R30 = regs.R4;
		/* 821840F0h case    0:*/		return 0x821840F4;
		  /* 821840F4h */ case    1:  		/* rlwinm R31, R11, 0, 16, 31 */
		/* 821840F4h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R31,regs.R11);
		/* 821840F4h case    1:*/		return 0x821840F8;
		  /* 821840F8h */ case    2:  		/* rlwinm R28, R11, 16, 29, 31 */
		/* 821840F8h case    2:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R28,regs.R11);
		/* 821840F8h case    2:*/		return 0x821840FC;
		  /* 821840FCh */ case    3:  		/* rlwinm R22, R10, 31, 28, 31 */
		/* 821840FCh case    3:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R22,regs.R10);
		/* 821840FCh case    3:*/		return 0x82184100;
		  /* 82184100h */ case    4:  		/* bl -808 */
		/* 82184100h case    4:*/		regs.LR = 0x82184104; return 0x82183DD8;
		/* 82184100h case    4:*/		return 0x82184104;
		  /* 82184104h */ case    5:  		/* add R25, R28, R31 */
		/* 82184104h case    5:*/		cpu::op::add<0>(regs,&regs.R25,regs.R28,regs.R31);
		/* 82184104h case    5:*/		return 0x82184108;
		  /* 82184108h */ case    6:  		/* mr R24, R3 */
		/* 82184108h case    6:*/		regs.R24 = regs.R3;
		/* 82184108h case    6:*/		return 0x8218410C;
		  /* 8218410Ch */ case    7:  		/* li R26, 0 */
		/* 8218410Ch case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8218410Ch case    7:*/		return 0x82184110;
		  /* 82184110h */ case    8:  		/* li R28, 0 */
		/* 82184110h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82184110h case    8:*/		return 0x82184114;
		  /* 82184114h */ case    9:  		/* li R23, 1 */
		/* 82184114h case    9:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82184114h case    9:*/		return 0x82184118;
		  /* 82184118h */ case   10:  		/* cmplw CR6, R31, R25 */
		/* 82184118h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 82184118h case   10:*/		return 0x8218411C;
		  /* 8218411Ch */ case   11:  		/* bc 4, CR6_LT, 132 */
		/* 8218411Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x821841A0;  }
		/* 8218411Ch case   11:*/		return 0x82184120;
		  /* 82184120h */ case   12:  		/* li R27, 0 */
		/* 82184120h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82184120h case   12:*/		return 0x82184124;
		  /* 82184124h */ case   13:  		/* and. R11, R23, R22 */
		/* 82184124h case   13:*/		cpu::op::and<1>(regs,&regs.R11,regs.R23,regs.R22);
		/* 82184124h case   13:*/		return 0x82184128;
		  /* 82184128h */ case   14:  		/* bc 12, CR0_EQ, 104 */
		/* 82184128h case   14:*/		if ( regs.CR[0].eq ) { return 0x82184190;  }
		/* 82184128h case   14:*/		return 0x8218412C;
		  /* 8218412Ch */ case   15:  		/* mr R4, R31 */
		/* 8218412Ch case   15:*/		regs.R4 = regs.R31;
		/* 8218412Ch case   15:*/		return 0x82184130;
		  /* 82184130h */ case   16:  		/* mr R3, R29 */
		/* 82184130h case   16:*/		regs.R3 = regs.R29;
		/* 82184130h case   16:*/		return 0x82184134;
		  /* 82184134h */ case   17:  		/* bl -2004 */
		/* 82184134h case   17:*/		regs.LR = 0x82184138; return 0x82183960;
		/* 82184134h case   17:*/		return 0x82184138;
	}
	return 0x82184138;
} // Block from 821840F0h-82184138h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82184138h
// Function '?GetSubEntryPoint@Block@D3DXShader@@QAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184138);
		  /* 82184138h */ case    0:  		/* lwz R11, <#[R29 + 692]> */
		/* 82184138h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000002B4) );
		/* 82184138h case    0:*/		return 0x8218413C;
		  /* 8218413Ch */ case    1:  		/* rlwinm R7, R3, 1, 0, 25 */
		/* 8218413Ch case    1:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R7,regs.R3);
		/* 8218413Ch case    1:*/		return 0x82184140;
		  /* 82184140h */ case    2:  		/* lwz R8, <#[R24 + 192]> */
		/* 82184140h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R24 + 0x000000C0) );
		/* 82184140h case    2:*/		return 0x82184144;
		  /* 82184144h */ case    3:  		/* rlwinm R9, R3, 1, 0, 30 */
		/* 82184144h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R3);
		/* 82184144h case    3:*/		return 0x82184148;
		  /* 82184148h */ case    4:  		/* rlwinm R6, R3, 30, 3, 28 */
		/* 82184148h case    4:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R6,regs.R3);
		/* 82184148h case    4:*/		return 0x8218414C;
		  /* 8218414Ch */ case    5:  		/* subf R9, R7, R9 */
		/* 8218414Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8218414Ch case    5:*/		return 0x82184150;
		  /* 82184150h */ case    6:  		/* rlwinm R8, R8, 18, 24, 31 */
		/* 82184150h case    6:*/		cpu::op::rlwinm<0,18,24,31>(regs,&regs.R8,regs.R8);
		/* 82184150h case    6:*/		return 0x82184154;
		  /* 82184154h */ case    7:  		/* rldicl R9, R9, 0, 32 */
		/* 82184154h case    7:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 82184154h case    7:*/		return 0x82184158;
		  /* 82184158h */ case    8:  		/* li R10, 3 */
		/* 82184158h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82184158h case    8:*/		return 0x8218415C;
		  /* 8218415Ch */ case    9:  		/* ldx R11, <#[R6 + R11]> */
		/* 8218415Ch case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8218415Ch case    9:*/		return 0x82184160;
		  /* 82184160h */ case   10:  		/* li R7, 1 */
		/* 82184160h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82184160h case   10:*/		return 0x82184164;
		  /* 82184164h */ case   11:  		/* slw R10, R10, R27 */
		/* 82184164h case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 82184164h case   11:*/		return 0x82184168;
		  /* 82184168h */ case   12:  		/* srd R11, R11, R9 */
		/* 82184168h case   12:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82184168h case   12:*/		return 0x8218416C;
		  /* 8218416Ch */ case   13:  		/* rlwinm R11, R11, 1, 29, 30 */
		/* 8218416Ch case   13:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R11,regs.R11);
		/* 8218416Ch case   13:*/		return 0x82184170;
		  /* 82184170h */ case   14:  		/* andc R10, R26, R10 */
		/* 82184170h case   14:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R26,regs.R10);
		/* 82184170h case   14:*/		return 0x82184174;
		  /* 82184174h */ case   15:  		/* srw R11, R8, R11 */
		/* 82184174h case   15:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82184174h case   15:*/		return 0x82184178;
		  /* 82184178h */ case   16:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82184178h case   16:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82184178h case   16:*/		return 0x8218417C;
		  /* 8218417Ch */ case   17:  		/* slw R9, R11, R27 */
		/* 8218417Ch case   17:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R27);
		/* 8218417Ch case   17:*/		return 0x82184180;
	}
	return 0x82184180;
} // Block from 82184138h-82184180h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82184180h
// Function '?GetFirstDefIndex_ForVectorizing@Instruction@D3DXShader@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184180);
		  /* 82184180h */ case    0:  		/* slw R11, R7, R11 */
		/* 82184180h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 82184180h case    0:*/		return 0x82184184;
		  /* 82184184h */ case    1:  		/* or R28, R11, R28 */
		/* 82184184h case    1:*/		cpu::op::or<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 82184184h case    1:*/		return 0x82184188;
		  /* 82184188h */ case    2:  		/* or R26, R10, R9 */
		/* 82184188h case    2:*/		cpu::op::or<0>(regs,&regs.R26,regs.R10,regs.R9);
		/* 82184188h case    2:*/		return 0x8218418C;
		  /* 8218418Ch */ case    3:  		/* addi R27, R27, 2 */
		/* 8218418Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 8218418Ch case    3:*/		return 0x82184190;
	}
	return 0x82184190;
} // Block from 82184180h-82184190h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184190);
		  /* 82184190h */ case    0:  		/* addi R31, R31, 1 */
		/* 82184190h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82184190h case    0:*/		return 0x82184194;
		  /* 82184194h */ case    1:  		/* rlwinm R23, R23, 1, 0, 30 */
		/* 82184194h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R23,regs.R23);
		/* 82184194h case    1:*/		return 0x82184198;
		  /* 82184198h */ case    2:  		/* cmplw CR6, R31, R25 */
		/* 82184198h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 82184198h case    2:*/		return 0x8218419C;
		  /* 8218419Ch */ case    3:  		/* bc 12, CR6_LT, -120 */
		/* 8218419Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82184124;  }
		/* 8218419Ch case    3:*/		return 0x821841A0;
	}
	return 0x821841A0;
} // Block from 82184190h-821841A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821841A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821841A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821841A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821841A0);
		  /* 821841A0h */ case    0:  		/* lwz R11, <#[R24 + 192]> */
		/* 821841A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000000C0) );
		/* 821841A0h case    0:*/		return 0x821841A4;
		  /* 821841A4h */ case    1:  		/* mr R5, R26 */
		/* 821841A4h case    1:*/		regs.R5 = regs.R26;
		/* 821841A4h case    1:*/		return 0x821841A8;
		  /* 821841A8h */ case    2:  		/* mr R3, R30 */
		/* 821841A8h case    2:*/		regs.R3 = regs.R30;
		/* 821841A8h case    2:*/		return 0x821841AC;
		  /* 821841ACh */ case    3:  		/* rlwimi R28, R11, 14, 22, 27 */
		/* 821841ACh case    3:*/		cpu::op::rlwimi<0,14,22,27>(regs,&regs.R28,regs.R11);
		/* 821841ACh case    3:*/		return 0x821841B0;
		  /* 821841B0h */ case    4:  		/* rlwinm R4, R28, 0, 22, 31 */
		/* 821841B0h case    4:*/		cpu::op::rlwinm<0,0,22,31>(regs,&regs.R4,regs.R28);
		/* 821841B0h case    4:*/		return 0x821841B4;
		  /* 821841B4h */ case    5:  		/* bl 648052 */
		/* 821841B4h case    5:*/		regs.LR = 0x821841B8; return 0x82222528;
		/* 821841B4h case    5:*/		return 0x821841B8;
	}
	return 0x821841B8;
} // Block from 821841A0h-821841B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821841B8h
// Function '?GetOrigInstrForDef@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821841B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821841B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821841B8);
		  /* 821841B8h */ case    0:  		/* addi R1, R1, 176 */
		/* 821841B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821841B8h case    0:*/		return 0x821841BC;
		  /* 821841BCh */ case    1:  		/* b -995116 */
		/* 821841BCh case    1:*/		return 0x82091290;
		/* 821841BCh case    1:*/		return 0x821841C0;
		  /* 821841C0h */ case    2:  		/* lwz R10, <#[R3 + 672]> */
		/* 821841C0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A0) );
		/* 821841C0h case    2:*/		return 0x821841C4;
		  /* 821841C4h */ case    3:  		/* rlwinm R9, R5, 29, 3, 28 */
		/* 821841C4h case    3:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R9,regs.R5);
		/* 821841C4h case    3:*/		return 0x821841C8;
		  /* 821841C8h */ case    4:  		/* lwz R11, <#[R3 + 684]> */
		/* 821841C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002AC) );
		/* 821841C8h case    4:*/		return 0x821841CC;
		  /* 821841CCh */ case    5:  		/* li R8, 1 */
		/* 821841CCh case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821841CCh case    5:*/		return 0x821841D0;
		  /* 821841D0h */ case    6:  		/* mullw R10, R4, R10 */
		/* 821841D0h case    6:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 821841D0h case    6:*/		return 0x821841D4;
		  /* 821841D4h */ case    7:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821841D4h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821841D4h case    7:*/		return 0x821841D8;
		  /* 821841D8h */ case    8:  		/* rldicl R7, R5, 0, 58 */
		/* 821841D8h case    8:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R7,regs.R5);
		/* 821841D8h case    8:*/		return 0x821841DC;
		  /* 821841DCh */ case    9:  		/* add R11, R10, R11 */
		/* 821841DCh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821841DCh case    9:*/		return 0x821841E0;
		  /* 821841E0h */ case   10:  		/* sld R7, R8, R7 */
		/* 821841E0h case   10:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R8,regs.R7);
		/* 821841E0h case   10:*/		return 0x821841E4;
		  /* 821841E4h */ case   11:  		/* ldx R6, <#[R9 + R11]> */
		/* 821841E4h case   11:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821841E4h case   11:*/		return 0x821841E8;
		  /* 821841E8h */ case   12:  		/* rlwinm R10, R4, 29, 3, 28 */
		/* 821841E8h case   12:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R4);
		/* 821841E8h case   12:*/		return 0x821841EC;
		  /* 821841ECh */ case   13:  		/* rldicl R4, R4, 0, 58 */
		/* 821841ECh case   13:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R4,regs.R4);
		/* 821841ECh case   13:*/		return 0x821841F0;
		  /* 821841F0h */ case   14:  		/* or R7, R7, R6 */
		/* 821841F0h case   14:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821841F0h case   14:*/		return 0x821841F4;
		  /* 821841F4h */ case   15:  		/* stdx R7, <#[R9 + R11]> */
		/* 821841F4h case   15:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821841F4h case   15:*/		return 0x821841F8;
	}
	return 0x821841F8;
} // Block from 821841B8h-821841F8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821841F8h
// Function '?MapDefIndex@Compiler@D3DXShader@@AAAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821841F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821841F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821841F8);
		  /* 821841F8h */ case    0:  		/* sld R8, R8, R4 */
		/* 821841F8h case    0:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 821841F8h case    0:*/		return 0x821841FC;
		  /* 821841FCh */ case    1:  		/* lwz R11, <#[R3 + 672]> */
		/* 821841FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002A0) );
		/* 821841FCh case    1:*/		return 0x82184200;
		  /* 82184200h */ case    2:  		/* lwz R9, <#[R3 + 684]> */
		/* 82184200h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x000002AC) );
		/* 82184200h case    2:*/		return 0x82184204;
		  /* 82184204h */ case    3:  		/* mullw R11, R5, R11 */
		/* 82184204h case    3:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 82184204h case    3:*/		return 0x82184208;
		  /* 82184208h */ case    4:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82184208h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82184208h case    4:*/		return 0x8218420C;
		  /* 8218420Ch */ case    5:  		/* add R11, R11, R9 */
		/* 8218420Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8218420Ch case    5:*/		return 0x82184210;
		  /* 82184210h */ case    6:  		/* ldx R9, <#[R10 + R11]> */
		/* 82184210h case    6:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184210h case    6:*/		return 0x82184214;
		  /* 82184214h */ case    7:  		/* or R9, R8, R9 */
		/* 82184214h case    7:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82184214h case    7:*/		return 0x82184218;
		  /* 82184218h */ case    8:  		/* stdx R9, <#[R10 + R11]> */
		/* 82184218h case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184218h case    8:*/		return 0x8218421C;
		  /* 8218421Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 8218421Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218421Ch case    9:*/		return 0x82184220;
	}
	return 0x82184220;
} // Block from 821841F8h-82184220h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82184220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184220);
		  /* 82184220h */ case    0:  		/* mfspr R12, LR */
		/* 82184220h case    0:*/		regs.R12 = regs.LR;
		/* 82184220h case    0:*/		return 0x82184224;
		  /* 82184224h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82184224h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82184224h case    1:*/		return 0x82184228;
		  /* 82184228h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82184228h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82184228h case    2:*/		return 0x8218422C;
		  /* 8218422Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8218422Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8218422Ch case    3:*/		return 0x82184230;
		  /* 82184230h */ case    4:  		/* mr R31, R3 */
		/* 82184230h case    4:*/		regs.R31 = regs.R3;
		/* 82184230h case    4:*/		return 0x82184234;
		  /* 82184234h */ case    5:  		/* addi R3, R3, 8 */
		/* 82184234h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x8);
		/* 82184234h case    5:*/		return 0x82184238;
		  /* 82184238h */ case    6:  		/* bl -1576 */
		/* 82184238h case    6:*/		regs.LR = 0x8218423C; return 0x82183C10;
		/* 82184238h case    6:*/		return 0x8218423C;
		  /* 8218423Ch */ case    7:  		/* lwz R11, <#[R31]> */
		/* 8218423Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8218423Ch case    7:*/		return 0x82184240;
		  /* 82184240h */ case    8:  		/* lwz R11, <#[R11 + 792]> */
		/* 82184240h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000318) );
		/* 82184240h case    8:*/		return 0x82184244;
		  /* 82184244h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82184244h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184244h case    9:*/		return 0x82184248;
		  /* 82184248h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 82184248h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82184250;  }
		/* 82184248h case   10:*/		return 0x8218424C;
		  /* 8218424Ch */ case   11:  		/* li R11, 32 */
		/* 8218424Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8218424Ch case   11:*/		return 0x82184250;
	}
	return 0x82184250;
} // Block from 82184220h-82184250h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82184250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184250);
		  /* 82184250h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82184250h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82184250h case    0:*/		return 0x82184254;
		  /* 82184254h */ case    1:  		/* add R11, R11, R3 */
		/* 82184254h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82184254h case    1:*/		return 0x82184258;
		  /* 82184258h */ case    2:  		/* addi R3, R11, -256 */
		/* 82184258h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFF00);
		/* 82184258h case    2:*/		return 0x8218425C;
		  /* 8218425Ch */ case    3:  		/* addi R1, R1, 96 */
		/* 8218425Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8218425Ch case    3:*/		return 0x82184260;
		  /* 82184260h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 82184260h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82184260h case    4:*/		return 0x82184264;
		  /* 82184264h */ case    5:  		/* mtspr LR, R12 */
		/* 82184264h case    5:*/		regs.LR = regs.R12;
		/* 82184264h case    5:*/		return 0x82184268;
		  /* 82184268h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82184268h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82184268h case    6:*/		return 0x8218426C;
		  /* 8218426Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 8218426Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218426Ch case    7:*/		return 0x82184270;
	}
	return 0x82184270;
} // Block from 82184250h-82184270h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82184270h
// Function '?CompareDefIndices@D3DXShader@@YAHPBX0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184270);
		  /* 82184270h */ case    0:  		/* mfspr R12, LR */
		/* 82184270h case    0:*/		regs.R12 = regs.LR;
		/* 82184270h case    0:*/		return 0x82184274;
		  /* 82184274h */ case    1:  		/* bl -995368 */
		/* 82184274h case    1:*/		regs.LR = 0x82184278; return 0x8209124C;
		/* 82184274h case    1:*/		return 0x82184278;
		  /* 82184278h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82184278h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82184278h case    2:*/		return 0x8218427C;
		  /* 8218427Ch */ case    3:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 8218427Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 8218427Ch case    3:*/		return 0x82184280;
	}
	return 0x82184280;
} // Block from 82184270h-82184280h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184280h
// Function '?CompareDefs@D3DXShader@@YAHPBX0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184280);
		  /* 82184280h */ case    0:  		/* lwz R10, <#[R3 + 672]> */
		/* 82184280h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A0) );
		/* 82184280h case    0:*/		return 0x82184284;
		  /* 82184284h */ case    1:  		/* rlwinm R25, R7, 2, 0, 29 */
		/* 82184284h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R7);
		/* 82184284h case    1:*/		return 0x82184288;
		  /* 82184288h */ case    2:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82184288h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82184288h case    2:*/		return 0x8218428C;
		  /* 8218428Ch */ case    3:  		/* mr R30, R3 */
		/* 8218428Ch case    3:*/		regs.R30 = regs.R3;
		/* 8218428Ch case    3:*/		return 0x82184290;
		  /* 82184290h */ case    4:  		/* mr R28, R4 */
		/* 82184290h case    4:*/		regs.R28 = regs.R4;
		/* 82184290h case    4:*/		return 0x82184294;
		  /* 82184294h */ case    5:  		/* lwzx R11, <#[R11 + R4]> */
		/* 82184294h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82184294h case    5:*/		return 0x82184298;
		  /* 82184298h */ case    6:  		/* mr R29, R5 */
		/* 82184298h case    6:*/		regs.R29 = regs.R5;
		/* 82184298h case    6:*/		return 0x8218429C;
		  /* 8218429Ch */ case    7:  		/* lwzx R9, <#[R25 + R6]> */
		/* 8218429Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + regs.R6 + 0x00000000) );
		/* 8218429Ch case    7:*/		return 0x821842A0;
		  /* 821842A0h */ case    8:  		/* mr R26, R6 */
		/* 821842A0h case    8:*/		regs.R26 = regs.R6;
		/* 821842A0h case    8:*/		return 0x821842A4;
		  /* 821842A4h */ case    9:  		/* add R10, R10, R11 */
		/* 821842A4h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821842A4h case    9:*/		return 0x821842A8;
		  /* 821842A8h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821842A8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821842A8h case   10:*/		return 0x821842AC;
		  /* 821842ACh */ case   11:  		/* bc 4, CR6_LT, 52 */
		/* 821842ACh case   11:*/		if ( !regs.CR[6].lt ) { return 0x821842E0;  }
		/* 821842ACh case   11:*/		return 0x821842B0;
		  /* 821842B0h */ case   12:  		/* subf R10, R11, R10 */
		/* 821842B0h case   12:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821842B0h case   12:*/		return 0x821842B4;
		  /* 821842B4h */ case   13:  		/* addi R11, R11, -8 */
		/* 821842B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 821842B4h case   13:*/		return 0x821842B8;
		  /* 821842B8h */ case   14:  		/* addi R10, R10, -1 */
		/* 821842B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821842B8h case   14:*/		return 0x821842BC;
		  /* 821842BCh */ case   15:  		/* addi R9, R9, -8 */
		/* 821842BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF8);
		/* 821842BCh case   15:*/		return 0x821842C0;
		  /* 821842C0h */ case   16:  		/* rlwinm R10, R10, 29, 3, 31 */
		/* 821842C0h case   16:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R10);
		/* 821842C0h case   16:*/		return 0x821842C4;
		  /* 821842C4h */ case   17:  		/* addi R10, R10, 1 */
		/* 821842C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821842C4h case   17:*/		return 0x821842C8;
		  /* 821842C8h */ case   18:  		/* mtspr CTR, R10 */
		/* 821842C8h case   18:*/		regs.CTR = regs.R10;
		/* 821842C8h case   18:*/		return 0x821842CC;
		  /* 821842CCh */ case   19:  		/* ld R6, <#[R11 + 8]> */
		/* 821842CCh case   19:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821842CCh case   19:*/		return 0x821842D0;
		  /* 821842D0h */ case   20:  		/* ldu R10, <#[R9 + 8]> */
		/* 821842D0h case   20:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 821842D0h case   20:*/		return 0x821842D4;
		  /* 821842D4h */ case   21:  		/* or R10, R10, R6 */
		/* 821842D4h case   21:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 821842D4h case   21:*/		return 0x821842D8;
		  /* 821842D8h */ case   22:  		/* stdu R10, <#[R11 + 8]> */
		/* 821842D8h case   22:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 821842D8h case   22:*/		return 0x821842DC;
		  /* 821842DCh */ case   23:  		/* bc 16, CR0_LT, -16 */
		/* 821842DCh case   23:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821842CC;  }
		/* 821842DCh case   23:*/		return 0x821842E0;
	}
	return 0x821842E0;
} // Block from 82184280h-821842E0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821842E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821842E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821842E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821842E0);
		  /* 821842E0h */ case    0:  		/* addi R11, R29, 4 */
		/* 821842E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 821842E0h case    0:*/		return 0x821842E4;
		  /* 821842E4h */ case    1:  		/* lwz R10, <#[R30 + 672]> */
		/* 821842E4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A0) );
		/* 821842E4h case    1:*/		return 0x821842E8;
		  /* 821842E8h */ case    2:  		/* addi R9, R7, 4 */
		/* 821842E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x4);
		/* 821842E8h case    2:*/		return 0x821842EC;
		  /* 821842ECh */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821842ECh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821842ECh case    3:*/		return 0x821842F0;
		  /* 821842F0h */ case    4:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821842F0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821842F0h case    4:*/		return 0x821842F4;
		  /* 821842F4h */ case    5:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821842F4h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821842F4h case    5:*/		return 0x821842F8;
		  /* 821842F8h */ case    6:  		/* lwzx R11, <#[R11 + R28]> */
		/* 821842F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821842F8h case    6:*/		return 0x821842FC;
		  /* 821842FCh */ case    7:  		/* lwzx R9, <#[R9 + R26]> */
		/* 821842FCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R26 + 0x00000000) );
		/* 821842FCh case    7:*/		return 0x82184300;
		  /* 82184300h */ case    8:  		/* add R10, R10, R11 */
		/* 82184300h case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82184300h case    8:*/		return 0x82184304;
		  /* 82184304h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 82184304h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82184304h case    9:*/		return 0x82184308;
		  /* 82184308h */ case   10:  		/* bc 4, CR6_LT, 52 */
		/* 82184308h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8218433C;  }
		/* 82184308h case   10:*/		return 0x8218430C;
		  /* 8218430Ch */ case   11:  		/* subf R10, R11, R10 */
		/* 8218430Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8218430Ch case   11:*/		return 0x82184310;
		  /* 82184310h */ case   12:  		/* addi R11, R11, -8 */
		/* 82184310h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 82184310h case   12:*/		return 0x82184314;
		  /* 82184314h */ case   13:  		/* addi R10, R10, -1 */
		/* 82184314h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82184314h case   13:*/		return 0x82184318;
		  /* 82184318h */ case   14:  		/* addi R9, R9, -8 */
		/* 82184318h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF8);
		/* 82184318h case   14:*/		return 0x8218431C;
		  /* 8218431Ch */ case   15:  		/* rlwinm R10, R10, 29, 3, 31 */
		/* 8218431Ch case   15:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R10);
		/* 8218431Ch case   15:*/		return 0x82184320;
		  /* 82184320h */ case   16:  		/* addi R10, R10, 1 */
		/* 82184320h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82184320h case   16:*/		return 0x82184324;
		  /* 82184324h */ case   17:  		/* mtspr CTR, R10 */
		/* 82184324h case   17:*/		regs.CTR = regs.R10;
		/* 82184324h case   17:*/		return 0x82184328;
		  /* 82184328h */ case   18:  		/* ld R6, <#[R11 + 8]> */
		/* 82184328h case   18:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 82184328h case   18:*/		return 0x8218432C;
		  /* 8218432Ch */ case   19:  		/* ldu R10, <#[R9 + 8]> */
		/* 8218432Ch case   19:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 8218432Ch case   19:*/		return 0x82184330;
		  /* 82184330h */ case   20:  		/* or R10, R6, R10 */
		/* 82184330h case   20:*/		cpu::op::or<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 82184330h case   20:*/		return 0x82184334;
		  /* 82184334h */ case   21:  		/* stdu R10, <#[R11 + 8]> */
		/* 82184334h case   21:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82184334h case   21:*/		return 0x82184338;
	}
	return 0x82184338;
} // Block from 821842E0h-82184338h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82184338h
// Function '?CompareGroups@D3DXShader@@YAHPBX0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184338);
		  /* 82184338h */ case    0:  		/* bc 16, CR0_LT, -16 */
		/* 82184338h case    0:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82184328;  }
		/* 82184338h case    0:*/		return 0x8218433C;
	}
	return 0x8218433C;
} // Block from 82184338h-8218433Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218433Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218433C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218433C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218433C);
		  /* 8218433Ch */ case    0:  		/* lwz R11, <#[R26 + 192]> */
		/* 8218433Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000000C0) );
		/* 8218433Ch case    0:*/		return 0x82184340;
		  /* 82184340h */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82184340h case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82184340h case    1:*/		return 0x82184344;
		  /* 82184344h */ case    2:  		/* bc 12, CR0_EQ, 84 */
		/* 82184344h case    2:*/		if ( regs.CR[0].eq ) { return 0x82184398;  }
		/* 82184344h case    2:*/		return 0x82184348;
		  /* 82184348h */ case    3:  		/* addi R10, R29, 1 */
		/* 82184348h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x1);
		/* 82184348h case    3:*/		return 0x8218434C;
		  /* 8218434Ch */ case    4:  		/* li R11, 4 */
		/* 8218434Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8218434Ch case    4:*/		return 0x82184350;
		  /* 82184350h */ case    5:  		/* mulli R10, R10, 40 */
		/* 82184350h case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 82184350h case    5:*/		return 0x82184354;
		  /* 82184354h */ case    6:  		/* mtspr CTR, R11 */
		/* 82184354h case    6:*/		regs.CTR = regs.R11;
		/* 82184354h case    6:*/		return 0x82184358;
		  /* 82184358h */ case    7:  		/* add R10, R10, R28 */
		/* 82184358h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 82184358h case    7:*/		return 0x8218435C;
		  /* 8218435Ch */ case    8:  		/* addi R9, R7, 1 */
		/* 8218435Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x1);
		/* 8218435Ch case    8:*/		return 0x82184360;
		  /* 82184360h */ case    9:  		/* li R11, 0 */
		/* 82184360h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184360h case    9:*/		return 0x82184364;
		  /* 82184364h */ case   10:  		/* mulli R9, R9, 5 */
		/* 82184364h case   10:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x5);
		/* 82184364h case   10:*/		return 0x82184368;
		  /* 82184368h */ case   11:  		/* addi R10, R10, -8 */
		/* 82184368h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFF8);
		/* 82184368h case   11:*/		return 0x8218436C;
		  /* 8218436Ch */ case   12:  		/* add R7, R9, R11 */
		/* 8218436Ch case   12:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R11);
		/* 8218436Ch case   12:*/		return 0x82184370;
		  /* 82184370h */ case   13:  		/* ld R6, <#[R10 + 8]> */
		/* 82184370h case   13:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R10 + 0x00000008) );
		/* 82184370h case   13:*/		return 0x82184374;
		  /* 82184374h */ case   14:  		/* addi R11, R11, 1 */
		/* 82184374h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82184374h case   14:*/		return 0x82184378;
		  /* 82184378h */ case   15:  		/* rlwinm R7, R7, 3, 0, 28 */
		/* 82184378h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R7);
		/* 82184378h case   15:*/		return 0x8218437C;
		  /* 8218437Ch */ case   16:  		/* ldx R7, <#[R7 + R26]> */
		/* 8218437Ch case   16:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R26 + 0x00000000) );
		/* 8218437Ch case   16:*/		return 0x82184380;
		  /* 82184380h */ case   17:  		/* or R7, R7, R6 */
		/* 82184380h case   17:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82184380h case   17:*/		return 0x82184384;
		  /* 82184384h */ case   18:  		/* stdu R7, <#[R10 + 8]> */
		/* 82184384h case   18:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82184384h case   18:*/		return 0x82184388;
		  /* 82184388h */ case   19:  		/* bc 16, CR0_LT, -28 */
		/* 82184388h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218436C;  }
		/* 82184388h case   19:*/		return 0x8218438C;
		  /* 8218438Ch */ case   20:  		/* lwz R11, <#[R28 + 192]> */
		/* 8218438Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000C0) );
		/* 8218438Ch case   20:*/		return 0x82184390;
	}
	return 0x82184390;
} // Block from 8218433Ch-82184390h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82184390h
// Function '?AddPHICopyCost@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAVDependency@2@1PAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184390);
		  /* 82184390h */ case    0:  		/* oris R11, R11, 16384 */
		/* 82184390h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82184390h case    0:*/		return 0x82184394;
		  /* 82184394h */ case    1:  		/* stw R11, <#[R28 + 192]> */
		/* 82184394h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x000000C0) );
		/* 82184394h case    1:*/		return 0x82184398;
	}
	return 0x82184398;
} // Block from 82184390h-82184398h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184398);
		  /* 82184398h */ case    0:  		/* rlwinm. R11, R8, 0, 24, 31 */
		/* 82184398h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R8);
		/* 82184398h case    0:*/		return 0x8218439C;
		  /* 8218439Ch */ case    1:  		/* bc 4, CR0_EQ, 176 */
		/* 8218439Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218444C;  }
		/* 8218439Ch case    1:*/		return 0x821843A0;
		  /* 821843A0h */ case    2:  		/* li R4, 0 */
		/* 821843A0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821843A0h case    2:*/		return 0x821843A4;
		  /* 821843A4h */ case    3:  		/* lwz R5, <#[R30 + 672]> */
		/* 821843A4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 821843A4h case    3:*/		return 0x821843A8;
		  /* 821843A8h */ case    4:  		/* lwzx R3, <#[R25 + R26]> */
		/* 821843A8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + regs.R26 + 0x00000000) );
		/* 821843A8h case    4:*/		return 0x821843AC;
		  /* 821843ACh */ case    5:  		/* bl -87124 */
		/* 821843ACh case    5:*/		regs.LR = 0x821843B0; return 0x8216EF58;
		/* 821843ACh case    5:*/		return 0x821843B0;
		  /* 821843B0h */ case    6:  		/* lwz R11, <#[R30 + 668]> */
		/* 821843B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821843B0h case    6:*/		return 0x821843B4;
		  /* 821843B4h */ case    7:  		/* mr R31, R3 */
		/* 821843B4h case    7:*/		regs.R31 = regs.R3;
		/* 821843B4h case    7:*/		return 0x821843B8;
		  /* 821843B8h */ case    8:  		/* addi R11, R11, -1 */
		/* 821843B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821843B8h case    8:*/		return 0x821843BC;
		  /* 821843BCh */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 821843BCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821843BCh case    9:*/		return 0x821843C0;
		  /* 821843C0h */ case   10:  		/* bc 12, CR6_GT, 140 */
		/* 821843C0h case   10:*/		if ( regs.CR[6].gt ) { return 0x8218444C;  }
		/* 821843C0h case   10:*/		return 0x821843C4;
		  /* 821843C4h */ case   11:  		/* extsw R27, R29 */
		/* 821843C4h case   11:*/		cpu::op::extsw<0>(regs,&regs.R27,regs.R29);
		/* 821843C4h case   11:*/		return 0x821843C8;
		  /* 821843C8h */ case   12:  		/* mr R4, R31 */
		/* 821843C8h case   12:*/		regs.R4 = regs.R31;
		/* 821843C8h case   12:*/		return 0x821843CC;
		  /* 821843CCh */ case   13:  		/* mr R3, R30 */
		/* 821843CCh case   13:*/		regs.R3 = regs.R30;
		/* 821843CCh case   13:*/		return 0x821843D0;
		  /* 821843D0h */ case   14:  		/* bl -2672 */
		/* 821843D0h case   14:*/		regs.LR = 0x821843D4; return 0x82183960;
		/* 821843D0h case   14:*/		return 0x821843D4;
		  /* 821843D4h */ case   15:  		/* rlwinm R7, R3, 1, 0, 25 */
		/* 821843D4h case   15:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R7,regs.R3);
		/* 821843D4h case   15:*/		return 0x821843D8;
		  /* 821843D8h */ case   16:  		/* rlwinm R8, R3, 1, 0, 30 */
		/* 821843D8h case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R3);
		/* 821843D8h case   16:*/		return 0x821843DC;
		  /* 821843DCh */ case   17:  		/* lwz R11, <#[R30 + 692]> */
		/* 821843DCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B4) );
		/* 821843DCh case   17:*/		return 0x821843E0;
		  /* 821843E0h */ case   18:  		/* rlwinm R10, R3, 30, 3, 28 */
		/* 821843E0h case   18:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R10,regs.R3);
		/* 821843E0h case   18:*/		return 0x821843E4;
		  /* 821843E4h */ case   19:  		/* subf R8, R7, R8 */
		/* 821843E4h case   19:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821843E4h case   19:*/		return 0x821843E8;
		  /* 821843E8h */ case   20:  		/* li R9, 3 */
		/* 821843E8h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821843E8h case   20:*/		return 0x821843EC;
		  /* 821843ECh */ case   21:  		/* rldicl R8, R8, 0, 32 */
		/* 821843ECh case   21:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R8);
		/* 821843ECh case   21:*/		return 0x821843F0;
		  /* 821843F0h */ case   22:  		/* rldicl R7, R27, 0, 62 */
		/* 821843F0h case   22:*/		cpu::op::rldicl<0,0,62>(regs,&regs.R7,regs.R27);
		/* 821843F0h case   22:*/		return 0x821843F4;
		  /* 821843F4h */ case   23:  		/* ldx R5, <#[R10 + R11]> */
		/* 821843F4h case   23:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821843F4h case   23:*/		return 0x821843F8;
		  /* 821843F8h */ case   24:  		/* sld R9, R9, R8 */
		/* 821843F8h case   24:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821843F8h case   24:*/		return 0x821843FC;
		  /* 821843FCh */ case   25:  		/* sld R8, R7, R8 */
		/* 821843FCh case   25:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821843FCh case   25:*/		return 0x82184400;
		  /* 82184400h */ case   26:  		/* andc R9, R5, R9 */
		/* 82184400h case   26:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 82184400h case   26:*/		return 0x82184404;
		  /* 82184404h */ case   27:  		/* rlwinm R6, R3, 2, 0, 29 */
		/* 82184404h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R3);
		/* 82184404h case   27:*/		return 0x82184408;
		  /* 82184408h */ case   28:  		/* or R9, R9, R8 */
		/* 82184408h case   28:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82184408h case   28:*/		return 0x8218440C;
		  /* 8218440Ch */ case   29:  		/* stdx R9, <#[R10 + R11]> */
		/* 8218440Ch case   29:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218440Ch case   29:*/		return 0x82184410;
		  /* 82184410h */ case   30:  		/* lwz R11, <#[R30 + 688]> */
		/* 82184410h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82184410h case   30:*/		return 0x82184414;
		  /* 82184414h */ case   31:  		/* stwx R28, <#[R6 + R11]> */
		/* 82184414h case   31:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82184414h case   31:*/		return 0x82184418;
		  /* 82184418h */ case   32:  		/* lwz R11, <#[R30 + 668]> */
		/* 82184418h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82184418h case   32:*/		return 0x8218441C;
		  /* 8218441Ch */ case   33:  		/* addi R29, R11, -1 */
		/* 8218441Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFF);
		/* 8218441Ch case   33:*/		return 0x82184420;
		  /* 82184420h */ case   34:  		/* cmplw CR6, R31, R29 */
		/* 82184420h case   34:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 82184420h case   34:*/		return 0x82184424;
		  /* 82184424h */ case   35:  		/* bc 4, CR6_EQ, 12 */
		/* 82184424h case   35:*/		if ( !regs.CR[6].eq ) { return 0x82184430;  }
		/* 82184424h case   35:*/		return 0x82184428;
		  /* 82184428h */ case   36:  		/* li R31, -1 */
		/* 82184428h case   36:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 82184428h case   36:*/		return 0x8218442C;
		  /* 8218442Ch */ case   37:  		/* b 24 */
		/* 8218442Ch case   37:*/		return 0x82184444;
		/* 8218442Ch case   37:*/		return 0x82184430;
	}
	return 0x82184430;
} // Block from 82184398h-82184430h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82184430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184430);
		  /* 82184430h */ case    0:  		/* addi R4, R31, 1 */
		/* 82184430h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1);
		/* 82184430h case    0:*/		return 0x82184434;
		  /* 82184434h */ case    1:  		/* lwz R5, <#[R30 + 672]> */
		/* 82184434h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 82184434h case    1:*/		return 0x82184438;
		  /* 82184438h */ case    2:  		/* lwzx R3, <#[R25 + R26]> */
		/* 82184438h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + regs.R26 + 0x00000000) );
		/* 82184438h case    2:*/		return 0x8218443C;
		  /* 8218443Ch */ case    3:  		/* bl -87268 */
		/* 8218443Ch case    3:*/		regs.LR = 0x82184440; return 0x8216EF58;
		/* 8218443Ch case    3:*/		return 0x82184440;
		  /* 82184440h */ case    4:  		/* mr R31, R3 */
		/* 82184440h case    4:*/		regs.R31 = regs.R3;
		/* 82184440h case    4:*/		return 0x82184444;
	}
	return 0x82184444;
} // Block from 82184430h-82184444h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82184444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184444);
		  /* 82184444h */ case    0:  		/* cmplw CR6, R31, R29 */
		/* 82184444h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 82184444h case    0:*/		return 0x82184448;
		  /* 82184448h */ case    1:  		/* bc 4, CR6_GT, -128 */
		/* 82184448h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821843C8;  }
		/* 82184448h case    1:*/		return 0x8218444C;
	}
	return 0x8218444C;
} // Block from 82184444h-8218444Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218444Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218444C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218444C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218444C);
		  /* 8218444Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8218444Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8218444Ch case    0:*/		return 0x82184450;
		  /* 82184450h */ case    1:  		/* b -995764 */
		/* 82184450h case    1:*/		return 0x8209129C;
		/* 82184450h case    1:*/		return 0x82184454;
		  /* 82184454h */ case    2:  		/* nop */
		/* 82184454h case    2:*/		cpu::op::nop();
		/* 82184454h case    2:*/		return 0x82184458;
	}
	return 0x82184458;
} // Block from 8218444Ch-82184458h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82184458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184458);
		  /* 82184458h */ case    0:  		/* mfspr R12, LR */
		/* 82184458h case    0:*/		regs.R12 = regs.LR;
		/* 82184458h case    0:*/		return 0x8218445C;
		  /* 8218445Ch */ case    1:  		/* bl -995840 */
		/* 8218445Ch case    1:*/		regs.LR = 0x82184460; return 0x8209125C;
		/* 8218445Ch case    1:*/		return 0x82184460;
		  /* 82184460h */ case    2:  		/* lwz R9, <#[R3 + 672]> */
		/* 82184460h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x000002A0) );
		/* 82184460h case    2:*/		return 0x82184464;
		  /* 82184464h */ case    3:  		/* rlwinm R8, R5, 29, 3, 28 */
		/* 82184464h case    3:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R8,regs.R5);
		/* 82184464h case    3:*/		return 0x82184468;
		  /* 82184468h */ case    4:  		/* lwz R11, <#[R3 + 684]> */
		/* 82184468h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002AC) );
		/* 82184468h case    4:*/		return 0x8218446C;
		  /* 8218446Ch */ case    5:  		/* li R29, 1 */
		/* 8218446Ch case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8218446Ch case    5:*/		return 0x82184470;
		  /* 82184470h */ case    6:  		/* mullw R10, R9, R4 */
		/* 82184470h case    6:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R9,regs.R4);
		/* 82184470h case    6:*/		return 0x82184474;
		  /* 82184474h */ case    7:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82184474h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82184474h case    7:*/		return 0x82184478;
		  /* 82184478h */ case    8:  		/* rldicl R7, R5, 0, 58 */
		/* 82184478h case    8:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R7,regs.R5);
		/* 82184478h case    8:*/		return 0x8218447C;
		  /* 8218447Ch */ case    9:  		/* add R30, R10, R11 */
		/* 8218447Ch case    9:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 8218447Ch case    9:*/		return 0x82184480;
		  /* 82184480h */ case   10:  		/* mullw R10, R9, R5 */
		/* 82184480h case   10:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R9,regs.R5);
		/* 82184480h case   10:*/		return 0x82184484;
		  /* 82184484h */ case   11:  		/* ldx R8, <#[R8 + R30]> */
		/* 82184484h case   11:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 82184484h case   11:*/		return 0x82184488;
		  /* 82184488h */ case   12:  		/* sld R7, R29, R7 */
		/* 82184488h case   12:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R29,regs.R7);
		/* 82184488h case   12:*/		return 0x8218448C;
		  /* 8218448Ch */ case   13:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 8218448Ch case   13:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 8218448Ch case   13:*/		return 0x82184490;
		  /* 82184490h */ case   14:  		/* and R9, R7, R8 */
		/* 82184490h case   14:*/		cpu::op::and<0>(regs,&regs.R9,regs.R7,regs.R8);
		/* 82184490h case   14:*/		return 0x82184494;
		  /* 82184494h */ case   15:  		/* add R31, R10, R11 */
		/* 82184494h case   15:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 82184494h case   15:*/		return 0x82184498;
		  /* 82184498h */ case   16:  		/* cmpldi CR6, R9, 0 */
		/* 82184498h case   16:*/		cpu::op::cmpldi<6>(regs,regs.R9,0x00000000);
		/* 82184498h case   16:*/		return 0x8218449C;
		  /* 8218449Ch */ case   17:  		/* mr R11, R29 */
		/* 8218449Ch case   17:*/		regs.R11 = regs.R29;
		/* 8218449Ch case   17:*/		return 0x821844A0;
		  /* 821844A0h */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 821844A0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821844A8;  }
		/* 821844A0h case   18:*/		return 0x821844A4;
		  /* 821844A4h */ case   19:  		/* li R11, 0 */
		/* 821844A4h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821844A4h case   19:*/		return 0x821844A8;
	}
	return 0x821844A8;
} // Block from 82184458h-821844A8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821844A8h
// Function '?CountSetBits@?$FixedSizeBitSet@_K$03@D3DXShader@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821844A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821844A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821844A8);
		  /* 821844A8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821844A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821844A8h case    0:*/		return 0x821844AC;
		  /* 821844ACh */ case    1:  		/* bc 4, CR0_EQ, 340 */
		/* 821844ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82184600;  }
		/* 821844ACh case    1:*/		return 0x821844B0;
		  /* 821844B0h */ case    2:  		/* rlwinm R11, R4, 29, 3, 28 */
		/* 821844B0h case    2:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R4);
		/* 821844B0h case    2:*/		return 0x821844B4;
		  /* 821844B4h */ case    3:  		/* rldicl R10, R4, 0, 58 */
		/* 821844B4h case    3:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R4);
		/* 821844B4h case    3:*/		return 0x821844B8;
		  /* 821844B8h */ case    4:  		/* sld R10, R29, R10 */
		/* 821844B8h case    4:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 821844B8h case    4:*/		return 0x821844BC;
		  /* 821844BCh */ case    5:  		/* ldx R11, <#[R11 + R31]> */
		/* 821844BCh case    5:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821844BCh case    5:*/		return 0x821844C0;
		  /* 821844C0h */ case    6:  		/* and R11, R10, R11 */
		/* 821844C0h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821844C0h case    6:*/		return 0x821844C4;
		  /* 821844C4h */ case    7:  		/* cmpldi CR6, R11, 0 */
		/* 821844C4h case    7:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 821844C4h case    7:*/		return 0x821844C8;
		  /* 821844C8h */ case    8:  		/* mr R11, R29 */
		/* 821844C8h case    8:*/		regs.R11 = regs.R29;
		/* 821844C8h case    8:*/		return 0x821844CC;
		  /* 821844CCh */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821844CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x821844D4;  }
		/* 821844CCh case    9:*/		return 0x821844D0;
		  /* 821844D0h */ case   10:  		/* li R11, 0 */
		/* 821844D0h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821844D0h case   10:*/		return 0x821844D4;
	}
	return 0x821844D4;
} // Block from 821844A8h-821844D4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821844D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821844D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821844D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821844D4);
		  /* 821844D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821844D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821844D4h case    0:*/		return 0x821844D8;
		  /* 821844D8h */ case    1:  		/* bc 4, CR0_EQ, 296 */
		/* 821844D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82184600;  }
		/* 821844D8h case    1:*/		return 0x821844DC;
		  /* 821844DCh */ case    2:  		/* lwz R10, <#[R3 + 676]> */
		/* 821844DCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A4) );
		/* 821844DCh case    2:*/		return 0x821844E0;
		  /* 821844E0h */ case    3:  		/* li R11, 0 */
		/* 821844E0h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821844E0h case    3:*/		return 0x821844E4;
		  /* 821844E4h */ case    4:  		/* mulli R9, R4, 5 */
		/* 821844E4h case    4:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R4,0x5);
		/* 821844E4h case    4:*/		return 0x821844E8;
		  /* 821844E8h */ case    5:  		/* mulli R8, R5, 5 */
		/* 821844E8h case    5:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R5,0x5);
		/* 821844E8h case    5:*/		return 0x821844EC;
		  /* 821844ECh */ case    6:  		/* add R6, R8, R11 */
		/* 821844ECh case    6:*/		cpu::op::add<0>(regs,&regs.R6,regs.R8,regs.R11);
		/* 821844ECh case    6:*/		return 0x821844F0;
		  /* 821844F0h */ case    7:  		/* add R7, R9, R11 */
		/* 821844F0h case    7:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R11);
		/* 821844F0h case    7:*/		return 0x821844F4;
		  /* 821844F4h */ case    8:  		/* addi R6, R6, 1 */
		/* 821844F4h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821844F4h case    8:*/		return 0x821844F8;
	}
	return 0x821844F8;
} // Block from 821844D4h-821844F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821844F8h
// Function '??$AnyCommonBitsSetInArrays@_K@D3DXShader@@YA_NPA_K0K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821844F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821844F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821844F8);
		  /* 821844F8h */ case    0:  		/* addi R7, R7, 1 */
		/* 821844F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821844F8h case    0:*/		return 0x821844FC;
		  /* 821844FCh */ case    1:  		/* rlwinm R6, R6, 3, 0, 28 */
		/* 821844FCh case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R6,regs.R6);
		/* 821844FCh case    1:*/		return 0x82184500;
		  /* 82184500h */ case    2:  		/* rlwinm R7, R7, 3, 0, 28 */
		/* 82184500h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R7);
		/* 82184500h case    2:*/		return 0x82184504;
		  /* 82184504h */ case    3:  		/* ldx R6, <#[R6 + R10]> */
		/* 82184504h case    3:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82184504h case    3:*/		return 0x82184508;
		  /* 82184508h */ case    4:  		/* ldx R7, <#[R7 + R10]> */
		/* 82184508h case    4:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82184508h case    4:*/		return 0x8218450C;
		  /* 8218450Ch */ case    5:  		/* nor R7, R6, R7 */
		/* 8218450Ch case    5:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 8218450Ch case    5:*/		return 0x82184510;
		  /* 82184510h */ case    6:  		/* cmpldi CR6, R7, 0 */
		/* 82184510h case    6:*/		cpu::op::cmpldi<6>(regs,regs.R7,0x00000000);
		/* 82184510h case    6:*/		return 0x82184514;
		  /* 82184514h */ case    7:  		/* bc 4, CR6_EQ, 212 */
		/* 82184514h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821845E8;  }
		/* 82184514h case    7:*/		return 0x82184518;
		  /* 82184518h */ case    8:  		/* addi R11, R11, 1 */
		/* 82184518h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82184518h case    8:*/		return 0x8218451C;
		  /* 8218451Ch */ case    9:  		/* cmpwi CR6, R11, 4 */
		/* 8218451Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8218451Ch case    9:*/		return 0x82184520;
		  /* 82184520h */ case   10:  		/* bc 12, CR6_LT, -52 */
		/* 82184520h case   10:*/		if ( regs.CR[6].lt ) { return 0x821844EC;  }
		/* 82184520h case   10:*/		return 0x82184524;
		  /* 82184524h */ case   11:  		/* li R11, 0 */
		/* 82184524h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184524h case   11:*/		return 0x82184528;
		  /* 82184528h */ case   12:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82184528h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82184528h case   12:*/		return 0x8218452C;
		  /* 8218452Ch */ case   13:  		/* bc 12, CR0_EQ, 212 */
		/* 8218452Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x82184600;  }
		/* 8218452Ch case   13:*/		return 0x82184530;
		  /* 82184530h */ case   14:  		/* lwz R10, <#[R3 + 680]> */
		/* 82184530h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A8) );
		/* 82184530h case   14:*/		return 0x82184534;
		  /* 82184534h */ case   15:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 82184534h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 82184534h case   15:*/		return 0x82184538;
		  /* 82184538h */ case   16:  		/* rlwinm R9, R5, 2, 0, 29 */
		/* 82184538h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R5);
		/* 82184538h case   16:*/		return 0x8218453C;
		  /* 8218453Ch */ case   17:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8218453Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218453Ch case   17:*/		return 0x82184540;
	}
	return 0x82184540;
} // Block from 821844F8h-82184540h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82184540h
// Function '??$OrBitArray@_K@D3DXShader@@YAXPA_K0K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184540);
		  /* 82184540h */ case    0:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82184540h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82184540h case    0:*/		return 0x82184544;
		  /* 82184544h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82184544h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184544h case    1:*/		return 0x82184548;
		  /* 82184548h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82184548h case    2:*/		if ( regs.CR[6].eq ) { return 0x82184590;  }
		/* 82184548h case    2:*/		return 0x8218454C;
		  /* 8218454Ch */ case    3:  		/* lwz R10, <#[R3 + 672]> */
		/* 8218454Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A0) );
		/* 8218454Ch case    3:*/		return 0x82184550;
		  /* 82184550h */ case    4:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82184550h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82184550h case    4:*/		return 0x82184554;
		  /* 82184554h */ case    5:  		/* add R10, R10, R11 */
		/* 82184554h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82184554h case    5:*/		return 0x82184558;
		  /* 82184558h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82184558h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82184558h case    6:*/		return 0x8218455C;
		  /* 8218455Ch */ case    7:  		/* bc 4, CR6_LT, 40 */
		/* 8218455Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x82184584;  }
		/* 8218455Ch case    7:*/		return 0x82184560;
		  /* 82184560h */ case    8:  		/* subf R8, R11, R31 */
		/* 82184560h case    8:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R11,regs.R31);
		/* 82184560h case    8:*/		return 0x82184564;
		  /* 82184564h */ case    9:  		/* ldx R7, <#[R8 + R11]> */
		/* 82184564h case    9:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82184564h case    9:*/		return 0x82184568;
		  /* 82184568h */ case   10:  		/* ld R6, <#[R11]> */
		/* 82184568h case   10:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82184568h case   10:*/		return 0x8218456C;
		  /* 8218456Ch */ case   11:  		/* and R7, R7, R6 */
		/* 8218456Ch case   11:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 8218456Ch case   11:*/		return 0x82184570;
		  /* 82184570h */ case   12:  		/* cmpldi CR6, R7, 0 */
		/* 82184570h case   12:*/		cpu::op::cmpldi<6>(regs,regs.R7,0x00000000);
		/* 82184570h case   12:*/		return 0x82184574;
		  /* 82184574h */ case   13:  		/* bc 4, CR6_EQ, 124 */
		/* 82184574h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821845F0;  }
		/* 82184574h case   13:*/		return 0x82184578;
		  /* 82184578h */ case   14:  		/* addi R11, R11, 8 */
		/* 82184578h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82184578h case   14:*/		return 0x8218457C;
		  /* 8218457Ch */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8218457Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8218457Ch case   15:*/		return 0x82184580;
		  /* 82184580h */ case   16:  		/* bc 12, CR6_LT, -28 */
		/* 82184580h case   16:*/		if ( regs.CR[6].lt ) { return 0x82184564;  }
		/* 82184580h case   16:*/		return 0x82184584;
	}
	return 0x82184584;
} // Block from 82184540h-82184584h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82184584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184584);
		  /* 82184584h */ case    0:  		/* li R11, 0 */
		/* 82184584h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184584h case    0:*/		return 0x82184588;
	}
	return 0x82184588;
} // Block from 82184584h-82184588h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82184588h
// Function '??$AndInverseBitArray@_K@D3DXShader@@YAXPA_K0K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184588);
		  /* 82184588h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82184588h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82184588h case    0:*/		return 0x8218458C;
		  /* 8218458Ch */ case    1:  		/* bc 4, CR0_EQ, 116 */
		/* 8218458Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82184600;  }
		/* 8218458Ch case    1:*/		return 0x82184590;
	}
	return 0x82184590;
} // Block from 82184588h-82184590h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184590);
		  /* 82184590h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82184590h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82184590h case    0:*/		return 0x82184594;
		  /* 82184594h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 82184594h case    1:*/		if ( regs.CR[6].eq ) { return 0x821845E0;  }
		/* 82184594h case    1:*/		return 0x82184598;
		  /* 82184598h */ case    2:  		/* lwz R10, <#[R3 + 672]> */
		/* 82184598h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A0) );
		/* 82184598h case    2:*/		return 0x8218459C;
		  /* 8218459Ch */ case    3:  		/* mr R11, R9 */
		/* 8218459Ch case    3:*/		regs.R11 = regs.R9;
		/* 8218459Ch case    3:*/		return 0x821845A0;
		  /* 821845A0h */ case    4:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821845A0h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821845A0h case    4:*/		return 0x821845A4;
		  /* 821845A4h */ case    5:  		/* add R10, R10, R9 */
		/* 821845A4h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821845A4h case    5:*/		return 0x821845A8;
		  /* 821845A8h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 821845A8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821845A8h case    6:*/		return 0x821845AC;
		  /* 821845ACh */ case    7:  		/* bc 4, CR6_LT, 40 */
		/* 821845ACh case    7:*/		if ( !regs.CR[6].lt ) { return 0x821845D4;  }
		/* 821845ACh case    7:*/		return 0x821845B0;
		  /* 821845B0h */ case    8:  		/* subf R9, R9, R30 */
		/* 821845B0h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R30);
		/* 821845B0h case    8:*/		return 0x821845B4;
		  /* 821845B4h */ case    9:  		/* ldx R8, <#[R9 + R11]> */
		/* 821845B4h case    9:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821845B4h case    9:*/		return 0x821845B8;
		  /* 821845B8h */ case   10:  		/* ld R7, <#[R11]> */
		/* 821845B8h case   10:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821845B8h case   10:*/		return 0x821845BC;
		  /* 821845BCh */ case   11:  		/* and R8, R8, R7 */
		/* 821845BCh case   11:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821845BCh case   11:*/		return 0x821845C0;
		  /* 821845C0h */ case   12:  		/* cmpldi CR6, R8, 0 */
		/* 821845C0h case   12:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 821845C0h case   12:*/		return 0x821845C4;
		  /* 821845C4h */ case   13:  		/* bc 4, CR6_EQ, 52 */
		/* 821845C4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821845F8;  }
		/* 821845C4h case   13:*/		return 0x821845C8;
		  /* 821845C8h */ case   14:  		/* addi R11, R11, 8 */
		/* 821845C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821845C8h case   14:*/		return 0x821845CC;
		  /* 821845CCh */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 821845CCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821845CCh case   15:*/		return 0x821845D0;
	}
	return 0x821845D0;
} // Block from 82184590h-821845D0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821845D0h
// Function '?SetDefBit@Compiler@D3DXShader@@AAAXPA_KI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821845D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821845D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821845D0);
		  /* 821845D0h */ case    0:  		/* bc 12, CR6_LT, -28 */
		/* 821845D0h case    0:*/		if ( regs.CR[6].lt ) { return 0x821845B4;  }
		/* 821845D0h case    0:*/		return 0x821845D4;
	}
	return 0x821845D4;
} // Block from 821845D0h-821845D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821845D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821845D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821845D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821845D4);
		  /* 821845D4h */ case    0:  		/* li R11, 0 */
		/* 821845D4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821845D4h case    0:*/		return 0x821845D8;
		  /* 821845D8h */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821845D8h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821845D8h case    1:*/		return 0x821845DC;
		  /* 821845DCh */ case    2:  		/* bc 4, CR0_EQ, 36 */
		/* 821845DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82184600;  }
		/* 821845DCh case    2:*/		return 0x821845E0;
	}
	return 0x821845E0;
} // Block from 821845D4h-821845E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821845E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821845E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821845E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821845E0);
		  /* 821845E0h */ case    0:  		/* li R3, 0 */
		/* 821845E0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821845E0h case    0:*/		return 0x821845E4;
		  /* 821845E4h */ case    1:  		/* b 32 */
		/* 821845E4h case    1:*/		return 0x82184604;
		/* 821845E4h case    1:*/		return 0x821845E8;
	}
	return 0x821845E8;
} // Block from 821845E0h-821845E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821845E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821845E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821845E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821845E8);
		  /* 821845E8h */ case    0:  		/* mr R11, R29 */
		/* 821845E8h case    0:*/		regs.R11 = regs.R29;
		/* 821845E8h case    0:*/		return 0x821845EC;
		  /* 821845ECh */ case    1:  		/* b -196 */
		/* 821845ECh case    1:*/		return 0x82184528;
		/* 821845ECh case    1:*/		return 0x821845F0;
	}
	return 0x821845F0;
} // Block from 821845E8h-821845F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821845F0h
// Function '?GetDefComponent@Compiler@D3DXShader@@AAA?AW4Component@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821845F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821845F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821845F0);
		  /* 821845F0h */ case    0:  		/* mr R11, R29 */
		/* 821845F0h case    0:*/		regs.R11 = regs.R29;
		/* 821845F0h case    0:*/		return 0x821845F4;
		  /* 821845F4h */ case    1:  		/* b -108 */
		/* 821845F4h case    1:*/		return 0x82184588;
		/* 821845F4h case    1:*/		return 0x821845F8;
	}
	return 0x821845F8;
} // Block from 821845F0h-821845F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821845F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821845F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821845F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821845F8);
		  /* 821845F8h */ case    0:  		/* mr R11, R29 */
		/* 821845F8h case    0:*/		regs.R11 = regs.R29;
		/* 821845F8h case    0:*/		return 0x821845FC;
		  /* 821845FCh */ case    1:  		/* b -36 */
		/* 821845FCh case    1:*/		return 0x821845D8;
		/* 821845FCh case    1:*/		return 0x82184600;
	}
	return 0x82184600;
} // Block from 821845F8h-82184600h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184600);
		  /* 82184600h */ case    0:  		/* li R3, 1 */
		/* 82184600h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82184600h case    0:*/		return 0x82184604;
	}
	return 0x82184604;
} // Block from 82184600h-82184604h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82184604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184604);
		  /* 82184604h */ case    0:  		/* b -996184 */
		/* 82184604h case    0:*/		return 0x820912AC;
		/* 82184604h case    0:*/		return 0x82184608;
	}
	return 0x82184608;
} // Block from 82184604h-82184608h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82184608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184608);
		  /* 82184608h */ case    0:  		/* mfspr R12, LR */
		/* 82184608h case    0:*/		regs.R12 = regs.LR;
		/* 82184608h case    0:*/		return 0x8218460C;
		  /* 8218460Ch */ case    1:  		/* bl -996276 */
		/* 8218460Ch case    1:*/		regs.LR = 0x82184610; return 0x82091258;
		/* 8218460Ch case    1:*/		return 0x82184610;
		  /* 82184610h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82184610h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82184610h case    2:*/		return 0x82184614;
		  /* 82184614h */ case    3:  		/* mr R31, R3 */
		/* 82184614h case    3:*/		regs.R31 = regs.R3;
		/* 82184614h case    3:*/		return 0x82184618;
	}
	return 0x82184618;
} // Block from 82184608h-82184618h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184618h
// Function '?AssignDefGroup@Compiler@D3DXShader@@AAAXIPAURegGroupInfo@2@W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184618);
		  /* 82184618h */ case    0:  		/* mr R30, R4 */
		/* 82184618h case    0:*/		regs.R30 = regs.R4;
		/* 82184618h case    0:*/		return 0x8218461C;
		  /* 8218461Ch */ case    1:  		/* mr R29, R4 */
		/* 8218461Ch case    1:*/		regs.R29 = regs.R4;
		/* 8218461Ch case    1:*/		return 0x82184620;
		  /* 82184620h */ case    2:  		/* li R28, 4 */
		/* 82184620h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 82184620h case    2:*/		return 0x82184624;
		  /* 82184624h */ case    3:  		/* lwz R4, <#[R29]> */
		/* 82184624h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82184624h case    3:*/		return 0x82184628;
		  /* 82184628h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 82184628h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82184628h case    4:*/		return 0x8218462C;
		  /* 8218462Ch */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8218462Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82184644;  }
		/* 8218462Ch case    5:*/		return 0x82184630;
		  /* 82184630h */ case    6:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184630h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184630h case    6:*/		return 0x82184634;
		  /* 82184634h */ case    7:  		/* li R6, 0 */
		/* 82184634h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82184634h case    7:*/		return 0x82184638;
		  /* 82184638h */ case    8:  		/* mr R3, R31 */
		/* 82184638h case    8:*/		regs.R3 = regs.R31;
		/* 82184638h case    8:*/		return 0x8218463C;
		  /* 8218463Ch */ case    9:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 8218463Ch case    9:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 8218463Ch case    9:*/		return 0x82184640;
		  /* 82184640h */ case   10:  		/* bl -96240 */
		/* 82184640h case   10:*/		regs.LR = 0x82184644; return 0x8216CE50;
		/* 82184640h case   10:*/		return 0x82184644;
	}
	return 0x82184644;
} // Block from 82184618h-82184644h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82184644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184644);
		  /* 82184644h */ case    0:  		/* addic. R28, R28, -1 */
		/* 82184644h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82184644h case    0:*/		return 0x82184648;
		  /* 82184648h */ case    1:  		/* addi R29, R29, 4 */
		/* 82184648h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82184648h case    1:*/		return 0x8218464C;
		  /* 8218464Ch */ case    2:  		/* bc 4, CR0_EQ, -40 */
		/* 8218464Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82184624;  }
		/* 8218464Ch case    2:*/		return 0x82184650;
		  /* 82184650h */ case    3:  		/* lwz R11, <#[R30 + 192]> */
		/* 82184650h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C0) );
		/* 82184650h case    3:*/		return 0x82184654;
		  /* 82184654h */ case    4:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 82184654h case    4:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 82184654h case    4:*/		return 0x82184658;
		  /* 82184658h */ case    5:  		/* stw R11, <#[R30 + 192]> */
		/* 82184658h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000C0) );
		/* 82184658h case    5:*/		return 0x8218465C;
		  /* 8218465Ch */ case    6:  		/* lwz R11, <#[R31 + 704]> */
		/* 8218465Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C0) );
		/* 8218465Ch case    6:*/		return 0x82184660;
	}
	return 0x82184660;
} // Block from 82184644h-82184660h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82184660h
// Function '?GetDefGroup@Compiler@D3DXShader@@AAAPAURegGroupInfo@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184660);
		  /* 82184660h */ case    0:  		/* stw R11, <#[R30]> */
		/* 82184660h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82184660h case    0:*/		return 0x82184664;
		  /* 82184664h */ case    1:  		/* lwz R11, <#[R31 + 700]> */
		/* 82184664h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 82184664h case    1:*/		return 0x82184668;
		  /* 82184668h */ case    2:  		/* addi R11, R11, -1 */
		/* 82184668h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82184668h case    2:*/		return 0x8218466C;
		  /* 8218466Ch */ case    3:  		/* stw R30, <#[R31 + 704]> */
		/* 8218466Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000002C0) );
		/* 8218466Ch case    3:*/		return 0x82184670;
	}
	return 0x82184670;
} // Block from 82184660h-82184670h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184670h
// Function '?GetDefGroupForInstr@Compiler@D3DXShader@@AAAPAURegGroupInfo@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184670);
		  /* 82184670h */ case    0:  		/* stw R11, <#[R31 + 700]> */
		/* 82184670h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 82184670h case    0:*/		return 0x82184674;
		  /* 82184674h */ case    1:  		/* addi R1, R1, 128 */
		/* 82184674h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82184674h case    1:*/		return 0x82184678;
		  /* 82184678h */ case    2:  		/* b -996304 */
		/* 82184678h case    2:*/		return 0x820912A8;
		/* 82184678h case    2:*/		return 0x8218467C;
		  /* 8218467Ch */ case    3:  		/* nop */
		/* 8218467Ch case    3:*/		cpu::op::nop();
		/* 8218467Ch case    3:*/		return 0x82184680;
	}
	return 0x82184680;
} // Block from 82184670h-82184680h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184680);
		  /* 82184680h */ case    0:  		/* mfspr R12, LR */
		/* 82184680h case    0:*/		regs.R12 = regs.LR;
		/* 82184680h case    0:*/		return 0x82184684;
		  /* 82184684h */ case    1:  		/* bl -996392 */
		/* 82184684h case    1:*/		regs.LR = 0x82184688; return 0x8209125C;
		/* 82184684h case    1:*/		return 0x82184688;
		  /* 82184688h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82184688h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82184688h case    2:*/		return 0x8218468C;
		  /* 8218468Ch */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 8218468Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8218468Ch case    3:*/		return 0x82184690;
		  /* 82184690h */ case    4:  		/* mr R30, R3 */
		/* 82184690h case    4:*/		regs.R30 = regs.R3;
		/* 82184690h case    4:*/		return 0x82184694;
		  /* 82184694h */ case    5:  		/* mr R29, R5 */
		/* 82184694h case    5:*/		regs.R29 = regs.R5;
		/* 82184694h case    5:*/		return 0x82184698;
		  /* 82184698h */ case    6:  		/* rlwinm R11, R11, 0, 27, 30 */
		/* 82184698h case    6:*/		cpu::op::rlwinm<0,0,27,30>(regs,&regs.R11,regs.R11);
		/* 82184698h case    6:*/		return 0x8218469C;
		  /* 8218469Ch */ case    7:  		/* cmplwi CR6, R11, 30 */
		/* 8218469Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 8218469Ch case    7:*/		return 0x821846A0;
		  /* 821846A0h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821846A0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821846AC;  }
		/* 821846A0h case    8:*/		return 0x821846A4;
		  /* 821846A4h */ case    9:  		/* li R3, 0 */
		/* 821846A4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821846A4h case    9:*/		return 0x821846A8;
		  /* 821846A8h */ case   10:  		/* b 304 */
		/* 821846A8h case   10:*/		return 0x821847D8;
		/* 821846A8h case   10:*/		return 0x821846AC;
	}
	return 0x821846AC;
} // Block from 82184680h-821846ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821846ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821846AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821846AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821846AC);
		  /* 821846ACh */ case    0:  		/* lwz R11, <#[R4 + 4]> */
		/* 821846ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821846ACh case    0:*/		return 0x821846B0;
		  /* 821846B0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821846B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821846B0h case    1:*/		return 0x821846B4;
		  /* 821846B4h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821846B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821846E8;  }
		/* 821846B4h case    2:*/		return 0x821846B8;
		  /* 821846B8h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821846B8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821846B8h case    3:*/		return 0x821846BC;
		  /* 821846BCh */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821846BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821846BCh case    4:*/		return 0x821846C0;
		  /* 821846C0h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821846C0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821846E0;  }
		/* 821846C0h case    5:*/		return 0x821846C4;
		  /* 821846C4h */ case    6:  		/* lwz R9, <#[R10 + 8]> */
		/* 821846C4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821846C4h case    6:*/		return 0x821846C8;
	}
	return 0x821846C8;
} // Block from 821846ACh-821846C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821846C8h
// Function '?GetFirstDefIndex_ForFinalScheduling@Compiler@D3DXShader@@AAAIPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821846C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821846C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821846C8);
		  /* 821846C8h */ case    0:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821846C8h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821846C8h case    0:*/		return 0x821846CC;
		  /* 821846CCh */ case    1:  		/* cmplwi CR6, R9, 14080 */
		/* 821846CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821846CCh case    1:*/		return 0x821846D0;
		  /* 821846D0h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821846D0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821846E0;  }
		/* 821846D0h case    2:*/		return 0x821846D4;
		  /* 821846D4h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 821846D4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821846D4h case    3:*/		return 0x821846D8;
		  /* 821846D8h */ case    4:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821846D8h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821846D8h case    4:*/		return 0x821846DC;
		  /* 821846DCh */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 821846DCh case    5:*/		if ( !regs.CR[0].eq ) { return 0x821846EC;  }
		/* 821846DCh case    5:*/		return 0x821846E0;
	}
	return 0x821846E0;
} // Block from 821846C8h-821846E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821846E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821846E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821846E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821846E0);
		  /* 821846E0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821846E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821846E0h case    0:*/		return 0x821846E4;
		  /* 821846E4h */ case    1:  		/* b -52 */
		/* 821846E4h case    1:*/		return 0x821846B0;
		/* 821846E4h case    1:*/		return 0x821846E8;
	}
	return 0x821846E8;
} // Block from 821846E0h-821846E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821846E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821846E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821846E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821846E8);
		  /* 821846E8h */ case    0:  		/* li R10, 0 */
		/* 821846E8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821846E8h case    0:*/		return 0x821846EC;
	}
	return 0x821846EC;
} // Block from 821846E8h-821846ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821846ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821846EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821846EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821846EC);
		  /* 821846ECh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821846ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821846ECh case    0:*/		return 0x821846F0;
		  /* 821846F0h */ case    1:  		/* bc 4, CR6_EQ, -76 */
		/* 821846F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821846A4;  }
		/* 821846F0h case    1:*/		return 0x821846F4;
		  /* 821846F4h */ case    2:  		/* lwz R11, <#[R30 + 680]> */
		/* 821846F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A8) );
		/* 821846F4h case    2:*/		return 0x821846F8;
		  /* 821846F8h */ case    3:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 821846F8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 821846F8h case    3:*/		return 0x821846FC;
		  /* 821846FCh */ case    4:  		/* lwz R8, <#[R4 + 28]> */
		/* 821846FCh case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x0000001C) );
		/* 821846FCh case    4:*/		return 0x82184700;
		  /* 82184700h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82184700h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184700h case    5:*/		return 0x82184704;
		  /* 82184704h */ case    6:  		/* lwz R9, <#[R8 + 80]> */
		/* 82184704h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000050) );
		/* 82184704h case    6:*/		return 0x82184708;
		  /* 82184708h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82184708h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184708h case    7:*/		return 0x8218470C;
		  /* 8218470Ch */ case    8:  		/* bc 12, CR6_EQ, 80 */
		/* 8218470Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8218475C;  }
		/* 8218470Ch case    8:*/		return 0x82184710;
		  /* 82184710h */ case    9:  		/* lwz R10, <#[R30 + 672]> */
		/* 82184710h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A0) );
		/* 82184710h case    9:*/		return 0x82184714;
		  /* 82184714h */ case   10:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82184714h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82184714h case   10:*/		return 0x82184718;
		  /* 82184718h */ case   11:  		/* add R10, R10, R11 */
		/* 82184718h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82184718h case   11:*/		return 0x8218471C;
		  /* 8218471Ch */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 8218471Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8218471Ch case   12:*/		return 0x82184720;
		  /* 82184720h */ case   13:  		/* bc 4, CR6_LT, 40 */
		/* 82184720h case   13:*/		if ( !regs.CR[6].lt ) { return 0x82184748;  }
		/* 82184720h case   13:*/		return 0x82184724;
		  /* 82184724h */ case   14:  		/* subf R9, R11, R9 */
		/* 82184724h case   14:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82184724h case   14:*/		return 0x82184728;
		  /* 82184728h */ case   15:  		/* ldx R7, <#[R9 + R11]> */
		/* 82184728h case   15:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82184728h case   15:*/		return 0x8218472C;
		  /* 8218472Ch */ case   16:  		/* ld R6, <#[R11]> */
		/* 8218472Ch case   16:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8218472Ch case   16:*/		return 0x82184730;
		  /* 82184730h */ case   17:  		/* and R7, R7, R6 */
		/* 82184730h case   17:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82184730h case   17:*/		return 0x82184734;
		  /* 82184734h */ case   18:  		/* cmpldi CR6, R7, 0 */
		/* 82184734h case   18:*/		cpu::op::cmpldi<6>(regs,regs.R7,0x00000000);
		/* 82184734h case   18:*/		return 0x82184738;
		  /* 82184738h */ case   19:  		/* bc 4, CR6_EQ, 28 */
		/* 82184738h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82184754;  }
		/* 82184738h case   19:*/		return 0x8218473C;
		  /* 8218473Ch */ case   20:  		/* addi R11, R11, 8 */
		/* 8218473Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8218473Ch case   20:*/		return 0x82184740;
		  /* 82184740h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 82184740h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82184740h case   21:*/		return 0x82184744;
		  /* 82184744h */ case   22:  		/* bc 12, CR6_LT, -28 */
		/* 82184744h case   22:*/		if ( regs.CR[6].lt ) { return 0x82184728;  }
		/* 82184744h case   22:*/		return 0x82184748;
	}
	return 0x82184748;
} // Block from 821846ECh-82184748h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82184748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184748);
		  /* 82184748h */ case    0:  		/* li R11, 0 */
		/* 82184748h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184748h case    0:*/		return 0x8218474C;
		  /* 8218474Ch */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218474Ch case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218474Ch case    1:*/		return 0x82184750;
		  /* 82184750h */ case    2:  		/* b 52 */
		/* 82184750h case    2:*/		return 0x82184784;
		/* 82184750h case    2:*/		return 0x82184754;
	}
	return 0x82184754;
} // Block from 82184748h-82184754h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82184754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184754);
		  /* 82184754h */ case    0:  		/* li R11, 1 */
		/* 82184754h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82184754h case    0:*/		return 0x82184758;
		  /* 82184758h */ case    1:  		/* b -12 */
		/* 82184758h case    1:*/		return 0x8218474C;
		/* 82184758h case    1:*/		return 0x8218475C;
	}
	return 0x8218475C;
} // Block from 82184754h-8218475Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218475Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218475C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218475C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218475C);
		  /* 8218475Ch */ case    0:  		/* rlwinm R10, R29, 29, 3, 28 */
		/* 8218475Ch case    0:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R29);
		/* 8218475Ch case    0:*/		return 0x82184760;
		  /* 82184760h */ case    1:  		/* li R11, 1 */
		/* 82184760h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82184760h case    1:*/		return 0x82184764;
		  /* 82184764h */ case    2:  		/* rldicl R7, R29, 0, 58 */
		/* 82184764h case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R7,regs.R29);
		/* 82184764h case    2:*/		return 0x82184768;
		  /* 82184768h */ case    3:  		/* sld R7, R11, R7 */
		/* 82184768h case    3:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 82184768h case    3:*/		return 0x8218476C;
		  /* 8218476Ch */ case    4:  		/* ldx R10, <#[R10 + R9]> */
		/* 8218476Ch case    4:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8218476Ch case    4:*/		return 0x82184770;
		  /* 82184770h */ case    5:  		/* and R10, R7, R10 */
		/* 82184770h case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 82184770h case    5:*/		return 0x82184774;
		  /* 82184774h */ case    6:  		/* cmpldi CR6, R10, 0 */
		/* 82184774h case    6:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82184774h case    6:*/		return 0x82184778;
		  /* 82184778h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 82184778h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82184780;  }
		/* 82184778h case    7:*/		return 0x8218477C;
		  /* 8218477Ch */ case    8:  		/* li R11, 0 */
		/* 8218477Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218477Ch case    8:*/		return 0x82184780;
	}
	return 0x82184780;
} // Block from 8218475Ch-82184780h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82184780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184780);
		  /* 82184780h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82184780h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82184780h case    0:*/		return 0x82184784;
	}
	return 0x82184784;
} // Block from 82184780h-82184784h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82184784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184784);
		  /* 82184784h */ case    0:  		/* bc 4, CR0_EQ, -224 */
		/* 82184784h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821846A4;  }
		/* 82184784h case    0:*/		return 0x82184788;
		  /* 82184788h */ case    1:  		/* lwz R31, <#[R8 + 20]> */
		/* 82184788h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R8 + 0x00000014) );
		/* 82184788h case    1:*/		return 0x8218478C;
		  /* 8218478Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8218478Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8218478Ch case    2:*/		return 0x82184790;
		  /* 82184790h */ case    3:  		/* bc 4, CR0_EQ, 68 */
		/* 82184790h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821847D4;  }
		/* 82184790h case    3:*/		return 0x82184794;
		  /* 82184794h */ case    4:  		/* cmplwi CR0, R31, 0 */
		/* 82184794h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82184794h case    4:*/		return 0x82184798;
		  /* 82184798h */ case    5:  		/* bc 12, CR0_EQ, 60 */
		/* 82184798h case    5:*/		if ( regs.CR[0].eq ) { return 0x821847D4;  }
		/* 82184798h case    5:*/		return 0x8218479C;
		  /* 8218479Ch */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 8218479Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218479Ch case    6:*/		return 0x821847A0;
		  /* 821847A0h */ case    7:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821847A0h case    7:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821847A0h case    7:*/		return 0x821847A4;
		  /* 821847A4h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 821847A4h case    8:*/		if ( regs.CR[0].eq ) { return 0x821847BC;  }
		/* 821847A4h case    8:*/		return 0x821847A8;
		  /* 821847A8h */ case    9:  		/* mr R3, R30 */
		/* 821847A8h case    9:*/		regs.R3 = regs.R30;
		/* 821847A8h case    9:*/		return 0x821847AC;
		  /* 821847ACh */ case   10:  		/* lhz R4, <#[R31 + 18]> */
		/* 821847ACh case   10:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000012) );
		/* 821847ACh case   10:*/		return 0x821847B0;
		  /* 821847B0h */ case   11:  		/* bl -3664 */
		/* 821847B0h case   11:*/		regs.LR = 0x821847B4; return 0x82183960;
		/* 821847B0h case   11:*/		return 0x821847B4;
		  /* 821847B4h */ case   12:  		/* cmplw CR6, R29, R3 */
		/* 821847B4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R3);
		/* 821847B4h case   12:*/		return 0x821847B8;
		  /* 821847B8h */ case   13:  		/* bc 12, CR6_EQ, -276 */
		/* 821847B8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821846A4;  }
		/* 821847B8h case   13:*/		return 0x821847BC;
	}
	return 0x821847BC;
} // Block from 82184784h-821847BCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821847BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821847BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821847BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821847BC);
		  /* 821847BCh */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821847BCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821847BCh case    0:*/		return 0x821847C0;
		  /* 821847C0h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821847C0h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821847C0h case    1:*/		return 0x821847C4;
		  /* 821847C4h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821847C4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821847C4h case    2:*/		return 0x821847C8;
		  /* 821847C8h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821847C8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821847D4;  }
		/* 821847C8h case    3:*/		return 0x821847CC;
		  /* 821847CCh */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821847CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821847CCh case    4:*/		return 0x821847D0;
		  /* 821847D0h */ case    5:  		/* bc 4, CR6_EQ, -52 */
		/* 821847D0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8218479C;  }
		/* 821847D0h case    5:*/		return 0x821847D4;
	}
	return 0x821847D4;
} // Block from 821847BCh-821847D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821847D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821847D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821847D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821847D4);
		  /* 821847D4h */ case    0:  		/* li R3, 1 */
		/* 821847D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821847D4h case    0:*/		return 0x821847D8;
	}
	return 0x821847D8;
} // Block from 821847D4h-821847D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821847D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821847D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821847D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821847D8);
		  /* 821847D8h */ case    0:  		/* addi R1, R1, 112 */
		/* 821847D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821847D8h case    0:*/		return 0x821847DC;
		  /* 821847DCh */ case    1:  		/* b -996656 */
		/* 821847DCh case    1:*/		return 0x820912AC;
		/* 821847DCh case    1:*/		return 0x821847E0;
	}
	return 0x821847E0;
} // Block from 821847D8h-821847E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821847E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821847E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821847E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821847E0);
		  /* 821847E0h */ case    0:  		/* mfspr R12, LR */
		/* 821847E0h case    0:*/		regs.R12 = regs.LR;
		/* 821847E0h case    0:*/		return 0x821847E4;
		  /* 821847E4h */ case    1:  		/* bl -996756 */
		/* 821847E4h case    1:*/		regs.LR = 0x821847E8; return 0x82091250;
		/* 821847E4h case    1:*/		return 0x821847E8;
		  /* 821847E8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821847E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821847E8h case    2:*/		return 0x821847EC;
		  /* 821847ECh */ case    3:  		/* lwz R11, <#[R4 + 192]> */
		/* 821847ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000C0) );
		/* 821847ECh case    3:*/		return 0x821847F0;
		  /* 821847F0h */ case    4:  		/* mr R30, R3 */
		/* 821847F0h case    4:*/		regs.R30 = regs.R3;
		/* 821847F0h case    4:*/		return 0x821847F4;
		  /* 821847F4h */ case    5:  		/* mr R31, R4 */
		/* 821847F4h case    5:*/		regs.R31 = regs.R4;
		/* 821847F4h case    5:*/		return 0x821847F8;
		  /* 821847F8h */ case    6:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 821847F8h case    6:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 821847F8h case    6:*/		return 0x821847FC;
		  /* 821847FCh */ case    7:  		/* mr R27, R5 */
		/* 821847FCh case    7:*/		regs.R27 = regs.R5;
		/* 821847FCh case    7:*/		return 0x82184800;
		  /* 82184800h */ case    8:  		/* mr R29, R6 */
		/* 82184800h case    8:*/		regs.R29 = regs.R6;
		/* 82184800h case    8:*/		return 0x82184804;
		  /* 82184804h */ case    9:  		/* mr R28, R7 */
		/* 82184804h case    9:*/		regs.R28 = regs.R7;
		/* 82184804h case    9:*/		return 0x82184808;
		  /* 82184808h */ case   10:  		/* mr R26, R8 */
		/* 82184808h case   10:*/		regs.R26 = regs.R8;
		/* 82184808h case   10:*/		return 0x8218480C;
		  /* 8218480Ch */ case   11:  		/* cmplw CR6, R7, R10 */
		/* 8218480Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 8218480Ch case   11:*/		return 0x82184810;
		  /* 82184810h */ case   12:  		/* bc 4, CR6_EQ, 88 */
		/* 82184810h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82184868;  }
		/* 82184810h case   12:*/		return 0x82184814;
		  /* 82184814h */ case   13:  		/* addi R10, R11, 1 */
		/* 82184814h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82184814h case   13:*/		return 0x82184818;
		  /* 82184818h */ case   14:  		/* rlwinm. R9, R8, 0, 24, 31 */
		/* 82184818h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R8);
		/* 82184818h case   14:*/		return 0x8218481C;
		  /* 8218481Ch */ case   15:  		/* rlwimi R10, R11, 0, 0, 28 */
		/* 8218481Ch case   15:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R11);
		/* 8218481Ch case   15:*/		return 0x82184820;
		  /* 82184820h */ case   16:  		/* stw R10, <#[R4 + 192]> */
		/* 82184820h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x000000C0) );
		/* 82184820h case   16:*/		return 0x82184824;
		  /* 82184824h */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 82184824h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8218484C;  }
		/* 82184824h case   17:*/		return 0x82184828;
		  /* 82184828h */ case   18:  		/* lwz R10, <#[R3 + 680]> */
		/* 82184828h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000002A8) );
		/* 82184828h case   18:*/		return 0x8218482C;
		  /* 8218482Ch */ case   19:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 8218482Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 8218482Ch case   19:*/		return 0x82184830;
		  /* 82184830h */ case   20:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82184830h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184830h case   20:*/		return 0x82184834;
		  /* 82184834h */ case   21:  		/* cmplwi CR6, R9, 0 */
		/* 82184834h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82184834h case   21:*/		return 0x82184838;
		  /* 82184838h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 82184838h case   22:*/		if ( regs.CR[6].eq ) { return 0x8218484C;  }
		/* 82184838h case   22:*/		return 0x8218483C;
		  /* 8218483Ch */ case   23:  		/* rlwinm R10, R7, 2, 0, 29 */
		/* 8218483Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 8218483Ch case   23:*/		return 0x82184840;
		  /* 82184840h */ case   24:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 82184840h case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 82184840h case   24:*/		return 0x82184844;
		  /* 82184844h */ case   25:  		/* stwx R11, <#[R10 + R4]> */
		/* 82184844h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82184844h case   25:*/		return 0x82184848;
		  /* 82184848h */ case   26:  		/* b 32 */
		/* 82184848h case   26:*/		return 0x82184868;
		/* 82184848h case   26:*/		return 0x8218484C;
	}
	return 0x8218484C;
} // Block from 821847E0h-8218484Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8218484Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218484C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218484C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218484C);
		  /* 8218484Ch */ case    0:  		/* lwz R11, <#[R30 + 672]> */
		/* 8218484Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218484Ch case    0:*/		return 0x82184850;
		  /* 82184850h */ case    1:  		/* li R5, 0 */
		/* 82184850h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82184850h case    1:*/		return 0x82184854;
		  /* 82184854h */ case    2:  		/* mr R3, R30 */
		/* 82184854h case    2:*/		regs.R3 = regs.R30;
		/* 82184854h case    2:*/		return 0x82184858;
		  /* 82184858h */ case    3:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82184858h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82184858h case    3:*/		return 0x8218485C;
		  /* 8218485Ch */ case    4:  		/* bl -129060 */
		/* 8218485Ch case    4:*/		regs.LR = 0x82184860; return 0x82165038;
		/* 8218485Ch case    4:*/		return 0x82184860;
		  /* 82184860h */ case    5:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 82184860h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 82184860h case    5:*/		return 0x82184864;
		  /* 82184864h */ case    6:  		/* stwx R3, <#[R11 + R31]> */
		/* 82184864h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82184864h case    6:*/		return 0x82184868;
	}
	return 0x82184868;
} // Block from 8218484Ch-82184868h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82184868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184868);
		  /* 82184868h */ case    0:  		/* rlwinm. R6, R26, 0, 24, 31 */
		/* 82184868h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R6,regs.R26);
		/* 82184868h case    0:*/		return 0x8218486C;
		  /* 8218486Ch */ case    1:  		/* li R7, 1 */
		/* 8218486Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8218486Ch case    1:*/		return 0x82184870;
	}
	return 0x82184870;
} // Block from 82184868h-82184870h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184870h
// Function '?GetDefGroupForInstr_ForVectorizing@Compiler@D3DXShader@@AAAPAURegGroupInfo@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184870);
		  /* 82184870h */ case    0:  		/* bc 4, CR0_EQ, 112 */
		/* 82184870h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821848E0;  }
		/* 82184870h case    0:*/		return 0x82184874;
		  /* 82184874h */ case    1:  		/* lwz R9, <#[R30 + 680]> */
		/* 82184874h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000002A8) );
		/* 82184874h case    1:*/		return 0x82184878;
		  /* 82184878h */ case    2:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 82184878h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 82184878h case    2:*/		return 0x8218487C;
		  /* 8218487Ch */ case    3:  		/* lwzx R11, <#[R9 + R10]> */
		/* 8218487Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8218487Ch case    3:*/		return 0x82184880;
		  /* 82184880h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82184880h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184880h case    4:*/		return 0x82184884;
		  /* 82184884h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 82184884h case    5:*/		if ( regs.CR[6].eq ) { return 0x821848E0;  }
		/* 82184884h case    5:*/		return 0x82184888;
		  /* 82184888h */ case    6:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 82184888h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 82184888h case    6:*/		return 0x8218488C;
		  /* 8218488Ch */ case    7:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218488Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218488Ch case    7:*/		return 0x82184890;
		  /* 82184890h */ case    8:  		/* lwzx R8, <#[R9 + R10]> */
		/* 82184890h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82184890h case    8:*/		return 0x82184894;
		  /* 82184894h */ case    9:  		/* add R10, R11, R31 */
		/* 82184894h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 82184894h case    9:*/		return 0x82184898;
		  /* 82184898h */ case   10:  		/* rlwinm R9, R5, 3, 0, 28 */
		/* 82184898h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R5);
		/* 82184898h case   10:*/		return 0x8218489C;
		  /* 8218489Ch */ case   11:  		/* lwzx R11, <#[R11 + R31]> */
		/* 8218489Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8218489Ch case   11:*/		return 0x821848A0;
		  /* 821848A0h */ case   12:  		/* add R9, R9, R11 */
		/* 821848A0h case   12:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821848A0h case   12:*/		return 0x821848A4;
		  /* 821848A4h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 821848A4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821848A4h case   13:*/		return 0x821848A8;
		  /* 821848A8h */ case   14:  		/* bc 4, CR6_LT, 92 */
		/* 821848A8h case   14:*/		if ( !regs.CR[6].lt ) { return 0x82184904;  }
		/* 821848A8h case   14:*/		return 0x821848AC;
		  /* 821848ACh */ case   15:  		/* subf R9, R11, R9 */
		/* 821848ACh case   15:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821848ACh case   15:*/		return 0x821848B0;
		  /* 821848B0h */ case   16:  		/* addi R11, R11, -8 */
		/* 821848B0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 821848B0h case   16:*/		return 0x821848B4;
		  /* 821848B4h */ case   17:  		/* addi R9, R9, -1 */
		/* 821848B4h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821848B4h case   17:*/		return 0x821848B8;
		  /* 821848B8h */ case   18:  		/* addi R8, R8, -8 */
		/* 821848B8h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFF8);
		/* 821848B8h case   18:*/		return 0x821848BC;
		  /* 821848BCh */ case   19:  		/* rlwinm R9, R9, 29, 3, 31 */
		/* 821848BCh case   19:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R9,regs.R9);
		/* 821848BCh case   19:*/		return 0x821848C0;
		  /* 821848C0h */ case   20:  		/* addi R9, R9, 1 */
		/* 821848C0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821848C0h case   20:*/		return 0x821848C4;
		  /* 821848C4h */ case   21:  		/* mtspr CTR, R9 */
		/* 821848C4h case   21:*/		regs.CTR = regs.R9;
		/* 821848C4h case   21:*/		return 0x821848C8;
		  /* 821848C8h */ case   22:  		/* ld R5, <#[R11 + 8]> */
		/* 821848C8h case   22:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 821848C8h case   22:*/		return 0x821848CC;
		  /* 821848CCh */ case   23:  		/* ldu R9, <#[R8 + 8]> */
		/* 821848CCh case   23:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + 0x00000008) );
		regs.R8 = (uint32)(regs.R8 + 0x00000008);
		/* 821848CCh case   23:*/		return 0x821848D0;
		  /* 821848D0h */ case   24:  		/* or R9, R5, R9 */
		/* 821848D0h case   24:*/		cpu::op::or<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 821848D0h case   24:*/		return 0x821848D4;
		  /* 821848D4h */ case   25:  		/* stdu R9, <#[R11 + 8]> */
		/* 821848D4h case   25:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 821848D4h case   25:*/		return 0x821848D8;
		  /* 821848D8h */ case   26:  		/* bc 16, CR0_LT, -16 */
		/* 821848D8h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821848C8;  }
		/* 821848D8h case   26:*/		return 0x821848DC;
		  /* 821848DCh */ case   27:  		/* b 40 */
		/* 821848DCh case   27:*/		return 0x82184904;
		/* 821848DCh case   27:*/		return 0x821848E0;
	}
	return 0x821848E0;
} // Block from 82184870h-821848E0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821848E0h
// Function '?InsertIsolatedVariableCopy@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821848E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821848E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821848E0);
		  /* 821848E0h */ case    0:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 821848E0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 821848E0h case    0:*/		return 0x821848E4;
		  /* 821848E4h */ case    1:  		/* rlwinm R9, R27, 29, 3, 28 */
		/* 821848E4h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R9,regs.R27);
		/* 821848E4h case    1:*/		return 0x821848E8;
		  /* 821848E8h */ case    2:  		/* add R10, R11, R31 */
		/* 821848E8h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 821848E8h case    2:*/		return 0x821848EC;
		  /* 821848ECh */ case    3:  		/* rldicl R8, R27, 0, 58 */
		/* 821848ECh case    3:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R8,regs.R27);
		/* 821848ECh case    3:*/		return 0x821848F0;
		  /* 821848F0h */ case    4:  		/* lwzx R11, <#[R11 + R31]> */
		/* 821848F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821848F0h case    4:*/		return 0x821848F4;
		  /* 821848F4h */ case    5:  		/* sld R8, R7, R8 */
		/* 821848F4h case    5:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821848F4h case    5:*/		return 0x821848F8;
		  /* 821848F8h */ case    6:  		/* ldx R5, <#[R9 + R11]> */
		/* 821848F8h case    6:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821848F8h case    6:*/		return 0x821848FC;
		  /* 821848FCh */ case    7:  		/* or R8, R8, R5 */
		/* 821848FCh case    7:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 821848FCh case    7:*/		return 0x82184900;
		  /* 82184900h */ case    8:  		/* stdx R8, <#[R9 + R11]> */
		/* 82184900h case    8:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82184900h case    8:*/		return 0x82184904;
	}
	return 0x82184904;
} // Block from 821848E0h-82184904h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82184904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184904);
		  /* 82184904h */ case    0:  		/* lwz R11, <#[R10]> */
		/* 82184904h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82184904h case    0:*/		return 0x82184908;
		  /* 82184908h */ case    1:  		/* rlwinm R10, R29, 29, 3, 28 */
		/* 82184908h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R29);
		/* 82184908h case    1:*/		return 0x8218490C;
		  /* 8218490Ch */ case    2:  		/* rldicl R9, R29, 0, 58 */
		/* 8218490Ch case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R29);
		/* 8218490Ch case    2:*/		return 0x82184910;
		  /* 82184910h */ case    3:  		/* addi R8, R28, 4 */
		/* 82184910h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R28,0x4);
		/* 82184910h case    3:*/		return 0x82184914;
		  /* 82184914h */ case    4:  		/* sld R9, R7, R9 */
		/* 82184914h case    4:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82184914h case    4:*/		return 0x82184918;
		  /* 82184918h */ case    5:  		/* ldx R5, <#[R10 + R11]> */
		/* 82184918h case    5:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184918h case    5:*/		return 0x8218491C;
		  /* 8218491Ch */ case    6:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8218491Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8218491Ch case    6:*/		return 0x82184920;
		  /* 82184920h */ case    7:  		/* or R9, R9, R5 */
		/* 82184920h case    7:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 82184920h case    7:*/		return 0x82184924;
		  /* 82184924h */ case    8:  		/* stdx R9, <#[R10 + R11]> */
		/* 82184924h case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184924h case    8:*/		return 0x82184928;
		  /* 82184928h */ case    9:  		/* lwzx R11, <#[R8 + R31]> */
		/* 82184928h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 82184928h case    9:*/		return 0x8218492C;
		  /* 8218492Ch */ case   10:  		/* lwz R8, <#[R30 + 684]> */
		/* 8218492Ch case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218492Ch case   10:*/		return 0x82184930;
		  /* 82184930h */ case   11:  		/* lwz R10, <#[R30 + 672]> */
		/* 82184930h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A0) );
		/* 82184930h case   11:*/		return 0x82184934;
		  /* 82184934h */ case   12:  		/* mullw R9, R10, R29 */
		/* 82184934h case   12:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R10,regs.R29);
		/* 82184934h case   12:*/		return 0x82184938;
		  /* 82184938h */ case   13:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82184938h case   13:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82184938h case   13:*/		return 0x8218493C;
		  /* 8218493Ch */ case   14:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 8218493Ch case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 8218493Ch case   14:*/		return 0x82184940;
		  /* 82184940h */ case   15:  		/* add R10, R10, R11 */
		/* 82184940h case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82184940h case   15:*/		return 0x82184944;
		  /* 82184944h */ case   16:  		/* add R9, R9, R8 */
		/* 82184944h case   16:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82184944h case   16:*/		return 0x82184948;
		  /* 82184948h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 82184948h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82184948h case   17:*/		return 0x8218494C;
		  /* 8218494Ch */ case   18:  		/* bc 4, CR6_LT, 52 */
		/* 8218494Ch case   18:*/		if ( !regs.CR[6].lt ) { return 0x82184980;  }
		/* 8218494Ch case   18:*/		return 0x82184950;
		  /* 82184950h */ case   19:  		/* subf R10, R11, R10 */
		/* 82184950h case   19:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82184950h case   19:*/		return 0x82184954;
		  /* 82184954h */ case   20:  		/* addi R11, R11, -8 */
		/* 82184954h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 82184954h case   20:*/		return 0x82184958;
		  /* 82184958h */ case   21:  		/* addi R10, R10, -1 */
		/* 82184958h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82184958h case   21:*/		return 0x8218495C;
		  /* 8218495Ch */ case   22:  		/* addi R9, R9, -8 */
		/* 8218495Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF8);
		/* 8218495Ch case   22:*/		return 0x82184960;
		  /* 82184960h */ case   23:  		/* rlwinm R10, R10, 29, 3, 31 */
		/* 82184960h case   23:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R10);
		/* 82184960h case   23:*/		return 0x82184964;
		  /* 82184964h */ case   24:  		/* addi R10, R10, 1 */
		/* 82184964h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82184964h case   24:*/		return 0x82184968;
		  /* 82184968h */ case   25:  		/* mtspr CTR, R10 */
		/* 82184968h case   25:*/		regs.CTR = regs.R10;
		/* 82184968h case   25:*/		return 0x8218496C;
		  /* 8218496Ch */ case   26:  		/* ld R8, <#[R11 + 8]> */
		/* 8218496Ch case   26:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8218496Ch case   26:*/		return 0x82184970;
	}
	return 0x82184970;
} // Block from 82184904h-82184970h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82184970h
// Function '?AssignGroupRegToInstr@Compiler@D3DXShader@@AAAXPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184970);
		  /* 82184970h */ case    0:  		/* ldu R10, <#[R9 + 8]> */
		/* 82184970h case    0:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82184970h case    0:*/		return 0x82184974;
		  /* 82184974h */ case    1:  		/* or R10, R8, R10 */
		/* 82184974h case    1:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82184974h case    1:*/		return 0x82184978;
		  /* 82184978h */ case    2:  		/* stdu R10, <#[R11 + 8]> */
		/* 82184978h case    2:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82184978h case    2:*/		return 0x8218497C;
		  /* 8218497Ch */ case    3:  		/* bc 16, CR0_LT, -16 */
		/* 8218497Ch case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218496C;  }
		/* 8218497Ch case    3:*/		return 0x82184980;
	}
	return 0x82184980;
} // Block from 82184970h-82184980h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184980);
		  /* 82184980h */ case    0:  		/* lwz R9, <#[R30 + 676]> */
		/* 82184980h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000002A4) );
		/* 82184980h case    0:*/		return 0x82184984;
		  /* 82184984h */ case    1:  		/* li R11, 0 */
		/* 82184984h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184984h case    1:*/		return 0x82184988;
		  /* 82184988h */ case    2:  		/* mulli R10, R29, 5 */
		/* 82184988h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x5);
		/* 82184988h case    2:*/		return 0x8218498C;
		  /* 8218498Ch */ case    3:  		/* add R8, R10, R11 */
		/* 8218498Ch case    3:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 8218498Ch case    3:*/		return 0x82184990;
		  /* 82184990h */ case    4:  		/* addi R8, R8, 1 */
		/* 82184990h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82184990h case    4:*/		return 0x82184994;
		  /* 82184994h */ case    5:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 82184994h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 82184994h case    5:*/		return 0x82184998;
		  /* 82184998h */ case    6:  		/* ldx R8, <#[R8 + R9]> */
		/* 82184998h case    6:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82184998h case    6:*/		return 0x8218499C;
		  /* 8218499Ch */ case    7:  		/* cmpldi CR6, R8, 0 */
		/* 8218499Ch case    7:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 8218499Ch case    7:*/		return 0x821849A0;
		  /* 821849A0h */ case    8:  		/* bc 4, CR6_EQ, 180 */
		/* 821849A0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82184A54;  }
		/* 821849A0h case    8:*/		return 0x821849A4;
		  /* 821849A4h */ case    9:  		/* addi R11, R11, 1 */
		/* 821849A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821849A4h case    9:*/		return 0x821849A8;
		  /* 821849A8h */ case   10:  		/* cmplwi CR6, R11, 4 */
		/* 821849A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821849A8h case   10:*/		return 0x821849AC;
		  /* 821849ACh */ case   11:  		/* bc 12, CR6_LT, -32 */
		/* 821849ACh case   11:*/		if ( regs.CR[6].lt ) { return 0x8218498C;  }
		/* 821849ACh case   11:*/		return 0x821849B0;
		  /* 821849B0h */ case   12:  		/* li R11, 0 */
		/* 821849B0h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821849B0h case   12:*/		return 0x821849B4;
		  /* 821849B4h */ case   13:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821849B4h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821849B4h case   13:*/		return 0x821849B8;
		  /* 821849B8h */ case   14:  		/* bc 12, CR0_EQ, 72 */
		/* 821849B8h case   14:*/		if ( regs.CR[0].eq ) { return 0x82184A00;  }
		/* 821849B8h case   14:*/		return 0x821849BC;
		  /* 821849BCh */ case   15:  		/* lwz R11, <#[R31 + 192]> */
		/* 821849BCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 821849BCh case   15:*/		return 0x821849C0;
		  /* 821849C0h */ case   16:  		/* addi R9, R28, 1 */
		/* 821849C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x1);
		/* 821849C0h case   16:*/		return 0x821849C4;
		  /* 821849C4h */ case   17:  		/* mulli R10, R29, 40 */
		/* 821849C4h case   17:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x28);
		/* 821849C4h case   17:*/		return 0x821849C8;
		  /* 821849C8h */ case   18:  		/* oris R11, R11, 16384 */
		/* 821849C8h case   18:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 821849C8h case   18:*/		return 0x821849CC;
		  /* 821849CCh */ case   19:  		/* mulli R9, R9, 40 */
		/* 821849CCh case   19:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x28);
		/* 821849CCh case   19:*/		return 0x821849D0;
		  /* 821849D0h */ case   20:  		/* stw R11, <#[R31 + 192]> */
		/* 821849D0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 821849D0h case   20:*/		return 0x821849D4;
		  /* 821849D4h */ case   21:  		/* lwz R8, <#[R30 + 676]> */
		/* 821849D4h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000002A4) );
		/* 821849D4h case   21:*/		return 0x821849D8;
		  /* 821849D8h */ case   22:  		/* li R11, 4 */
		/* 821849D8h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821849D8h case   22:*/		return 0x821849DC;
		  /* 821849DCh */ case   23:  		/* add R9, R9, R31 */
		/* 821849DCh case   23:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821849DCh case   23:*/		return 0x821849E0;
		  /* 821849E0h */ case   24:  		/* add R10, R10, R8 */
		/* 821849E0h case   24:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821849E0h case   24:*/		return 0x821849E4;
		  /* 821849E4h */ case   25:  		/* mtspr CTR, R11 */
		/* 821849E4h case   25:*/		regs.CTR = regs.R11;
		/* 821849E4h case   25:*/		return 0x821849E8;
		  /* 821849E8h */ case   26:  		/* addi R9, R9, -8 */
		/* 821849E8h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF8);
		/* 821849E8h case   26:*/		return 0x821849EC;
		  /* 821849ECh */ case   27:  		/* ldu R11, <#[R10 + 8]> */
		/* 821849ECh case   27:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 821849ECh case   27:*/		return 0x821849F0;
		  /* 821849F0h */ case   28:  		/* ld R8, <#[R9 + 8]> */
		/* 821849F0h case   28:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R9 + 0x00000008) );
		/* 821849F0h case   28:*/		return 0x821849F4;
		  /* 821849F4h */ case   29:  		/* or R11, R11, R8 */
		/* 821849F4h case   29:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821849F4h case   29:*/		return 0x821849F8;
		  /* 821849F8h */ case   30:  		/* stdu R11, <#[R9 + 8]> */
		/* 821849F8h case   30:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 821849F8h case   30:*/		return 0x821849FC;
		  /* 821849FCh */ case   31:  		/* bc 16, CR0_LT, -16 */
		/* 821849FCh case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821849EC;  }
		/* 821849FCh case   31:*/		return 0x82184A00;
	}
	return 0x82184A00;
} // Block from 82184980h-82184A00h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82184A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184A00);
		  /* 82184A00h */ case    0:  		/* cmplwi CR6, R6, 0 */
		/* 82184A00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82184A00h case    0:*/		return 0x82184A04;
		  /* 82184A04h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 82184A04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82184A4C;  }
		/* 82184A04h case    1:*/		return 0x82184A08;
		  /* 82184A08h */ case    2:  		/* rlwinm R8, R29, 1, 0, 25 */
		/* 82184A08h case    2:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R8,regs.R29);
		/* 82184A08h case    2:*/		return 0x82184A0C;
		  /* 82184A0Ch */ case    3:  		/* lwz R10, <#[R30 + 692]> */
		/* 82184A0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002B4) );
		/* 82184A0Ch case    3:*/		return 0x82184A10;
		  /* 82184A10h */ case    4:  		/* rlwinm R9, R29, 1, 0, 30 */
		/* 82184A10h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R29);
		/* 82184A10h case    4:*/		return 0x82184A14;
		  /* 82184A14h */ case    5:  		/* rlwinm R11, R29, 30, 3, 28 */
		/* 82184A14h case    5:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R11,regs.R29);
		/* 82184A14h case    5:*/		return 0x82184A18;
		  /* 82184A18h */ case    6:  		/* subf R9, R8, R9 */
		/* 82184A18h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82184A18h case    6:*/		return 0x82184A1C;
		  /* 82184A1Ch */ case    7:  		/* li R8, 3 */
		/* 82184A1Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 82184A1Ch case    7:*/		return 0x82184A20;
		  /* 82184A20h */ case    8:  		/* rldicl R9, R9, 0, 32 */
		/* 82184A20h case    8:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 82184A20h case    8:*/		return 0x82184A24;
		  /* 82184A24h */ case    9:  		/* rldicl R7, R28, 0, 62 */
		/* 82184A24h case    9:*/		cpu::op::rldicl<0,0,62>(regs,&regs.R7,regs.R28);
		/* 82184A24h case    9:*/		return 0x82184A28;
		  /* 82184A28h */ case   10:  		/* ldx R6, <#[R11 + R10]> */
		/* 82184A28h case   10:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184A28h case   10:*/		return 0x82184A2C;
		  /* 82184A2Ch */ case   11:  		/* sld R8, R8, R9 */
		/* 82184A2Ch case   11:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 82184A2Ch case   11:*/		return 0x82184A30;
		  /* 82184A30h */ case   12:  		/* sld R9, R7, R9 */
		/* 82184A30h case   12:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82184A30h case   12:*/		return 0x82184A34;
		  /* 82184A34h */ case   13:  		/* andc R8, R6, R8 */
		/* 82184A34h case   13:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 82184A34h case   13:*/		return 0x82184A38;
		  /* 82184A38h */ case   14:  		/* rlwinm R7, R29, 2, 0, 29 */
		/* 82184A38h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R29);
		/* 82184A38h case   14:*/		return 0x82184A3C;
		  /* 82184A3Ch */ case   15:  		/* or R9, R9, R8 */
		/* 82184A3Ch case   15:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82184A3Ch case   15:*/		return 0x82184A40;
		  /* 82184A40h */ case   16:  		/* stdx R9, <#[R11 + R10]> */
		/* 82184A40h case   16:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184A40h case   16:*/		return 0x82184A44;
		  /* 82184A44h */ case   17:  		/* lwz R11, <#[R30 + 688]> */
		/* 82184A44h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82184A44h case   17:*/		return 0x82184A48;
		  /* 82184A48h */ case   18:  		/* stwx R31, <#[R11 + R7]> */
		/* 82184A48h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82184A48h case   18:*/		return 0x82184A4C;
	}
	return 0x82184A4C;
} // Block from 82184A00h-82184A4Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82184A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184A4C);
		  /* 82184A4Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 82184A4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82184A4Ch case    0:*/		return 0x82184A50;
		  /* 82184A50h */ case    1:  		/* b -997296 */
		/* 82184A50h case    1:*/		return 0x820912A0;
		/* 82184A50h case    1:*/		return 0x82184A54;
	}
	return 0x82184A54;
} // Block from 82184A4Ch-82184A54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184A54);
		  /* 82184A54h */ case    0:  		/* mr R11, R7 */
		/* 82184A54h case    0:*/		regs.R11 = regs.R7;
		/* 82184A54h case    0:*/		return 0x82184A58;
	}
	return 0x82184A58;
} // Block from 82184A54h-82184A58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82184A58h
// Function '?MarkDefIntf@Compiler@D3DXShader@@AAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184A58);
		  /* 82184A58h */ case    0:  		/* b -164 */
		/* 82184A58h case    0:*/		return 0x821849B4;
		/* 82184A58h case    0:*/		return 0x82184A5C;
		  /* 82184A5Ch */ case    1:  		/* nop */
		/* 82184A5Ch case    1:*/		cpu::op::nop();
		/* 82184A5Ch case    1:*/		return 0x82184A60;
	}
	return 0x82184A60;
} // Block from 82184A58h-82184A60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184A60);
		  /* 82184A60h */ case    0:  		/* mfspr R12, LR */
		/* 82184A60h case    0:*/		regs.R12 = regs.LR;
		/* 82184A60h case    0:*/		return 0x82184A64;
		  /* 82184A64h */ case    1:  		/* bl -997396 */
		/* 82184A64h case    1:*/		regs.LR = 0x82184A68; return 0x82091250;
		/* 82184A64h case    1:*/		return 0x82184A68;
		  /* 82184A68h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82184A68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82184A68h case    2:*/		return 0x82184A6C;
		  /* 82184A6Ch */ case    3:  		/* lwz R11, <#[R3 + 676]> */
		/* 82184A6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002A4) );
		/* 82184A6Ch case    3:*/		return 0x82184A70;
		  /* 82184A70h */ case    4:  		/* mulli R10, R5, 40 */
		/* 82184A70h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R5,0x28);
		/* 82184A70h case    4:*/		return 0x82184A74;
		  /* 82184A74h */ case    5:  		/* add R10, R10, R11 */
		/* 82184A74h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82184A74h case    5:*/		return 0x82184A78;
		  /* 82184A78h */ case    6:  		/* li R9, 4 */
		/* 82184A78h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82184A78h case    6:*/		return 0x82184A7C;
		  /* 82184A7Ch */ case    7:  		/* mulli R8, R4, 40 */
		/* 82184A7Ch case    7:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R4,0x28);
		/* 82184A7Ch case    7:*/		return 0x82184A80;
		  /* 82184A80h */ case    8:  		/* mtspr CTR, R9 */
		/* 82184A80h case    8:*/		regs.CTR = regs.R9;
		/* 82184A80h case    8:*/		return 0x82184A84;
		  /* 82184A84h */ case    9:  		/* addi R10, R10, 8 */
		/* 82184A84h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82184A84h case    9:*/		return 0x82184A88;
		  /* 82184A88h */ case   10:  		/* mr R31, R3 */
		/* 82184A88h case   10:*/		regs.R31 = regs.R3;
		/* 82184A88h case   10:*/		return 0x82184A8C;
		  /* 82184A8Ch */ case   11:  		/* mr R29, R4 */
		/* 82184A8Ch case   11:*/		regs.R29 = regs.R4;
		/* 82184A8Ch case   11:*/		return 0x82184A90;
		  /* 82184A90h */ case   12:  		/* mr R27, R5 */
		/* 82184A90h case   12:*/		regs.R27 = regs.R5;
		/* 82184A90h case   12:*/		return 0x82184A94;
		  /* 82184A94h */ case   13:  		/* add R11, R8, R11 */
		/* 82184A94h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82184A94h case   13:*/		return 0x82184A98;
		  /* 82184A98h */ case   14:  		/* addi R10, R10, -8 */
		/* 82184A98h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFF8);
		/* 82184A98h case   14:*/		return 0x82184A9C;
		  /* 82184A9Ch */ case   15:  		/* ldu R9, <#[R11 + 8]> */
		/* 82184A9Ch case   15:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82184A9Ch case   15:*/		return 0x82184AA0;
		  /* 82184AA0h */ case   16:  		/* ld R8, <#[R10 + 8]> */
		/* 82184AA0h case   16:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 82184AA0h case   16:*/		return 0x82184AA4;
		  /* 82184AA4h */ case   17:  		/* or R9, R9, R8 */
		/* 82184AA4h case   17:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82184AA4h case   17:*/		return 0x82184AA8;
		  /* 82184AA8h */ case   18:  		/* stdu R9, <#[R10 + 8]> */
		/* 82184AA8h case   18:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82184AA8h case   18:*/		return 0x82184AAC;
		  /* 82184AACh */ case   19:  		/* bc 16, CR0_LT, -16 */
		/* 82184AACh case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82184A9C;  }
		/* 82184AACh case   19:*/		return 0x82184AB0;
		  /* 82184AB0h */ case   20:  		/* lwz R11, <#[R31 + 684]> */
		/* 82184AB0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002AC) );
		/* 82184AB0h case   20:*/		return 0x82184AB4;
		  /* 82184AB4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82184AB4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184AB4h case   21:*/		return 0x82184AB8;
	}
	return 0x82184AB8;
} // Block from 82184A60h-82184AB8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82184AB8h
// Function '?CountComponentsInUse@GeneralRegisterSet@D3DXShader@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184AB8);
		  /* 82184AB8h */ case    0:  		/* bc 12, CR6_EQ, 100 */
		/* 82184AB8h case    0:*/		if ( regs.CR[6].eq ) { return 0x82184B1C;  }
		/* 82184AB8h case    0:*/		return 0x82184ABC;
		  /* 82184ABCh */ case    1:  		/* lwz R9, <#[R31 + 672]> */
		/* 82184ABCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184ABCh case    1:*/		return 0x82184AC0;
		  /* 82184AC0h */ case    2:  		/* rlwinm R10, R11, 0, 0, 31 */
		/* 82184AC0h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R11);
		/* 82184AC0h case    2:*/		return 0x82184AC4;
		  /* 82184AC4h */ case    3:  		/* mullw R11, R9, R27 */
		/* 82184AC4h case    3:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R27);
		/* 82184AC4h case    3:*/		return 0x82184AC8;
		  /* 82184AC8h */ case    4:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82184AC8h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82184AC8h case    4:*/		return 0x82184ACC;
		  /* 82184ACCh */ case    5:  		/* mullw R8, R9, R29 */
		/* 82184ACCh case    5:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R9,regs.R29);
		/* 82184ACCh case    5:*/		return 0x82184AD0;
		  /* 82184AD0h */ case    6:  		/* add R11, R11, R10 */
		/* 82184AD0h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82184AD0h case    6:*/		return 0x82184AD4;
		  /* 82184AD4h */ case    7:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82184AD4h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82184AD4h case    7:*/		return 0x82184AD8;
		  /* 82184AD8h */ case    8:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 82184AD8h case    8:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 82184AD8h case    8:*/		return 0x82184ADC;
		  /* 82184ADCh */ case    9:  		/* add R9, R9, R11 */
		/* 82184ADCh case    9:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82184ADCh case    9:*/		return 0x82184AE0;
		  /* 82184AE0h */ case   10:  		/* add R10, R8, R10 */
		/* 82184AE0h case   10:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82184AE0h case   10:*/		return 0x82184AE4;
		  /* 82184AE4h */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 82184AE4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82184AE4h case   11:*/		return 0x82184AE8;
		  /* 82184AE8h */ case   12:  		/* bc 4, CR6_LT, 52 */
		/* 82184AE8h case   12:*/		if ( !regs.CR[6].lt ) { return 0x82184B1C;  }
		/* 82184AE8h case   12:*/		return 0x82184AEC;
		  /* 82184AECh */ case   13:  		/* subf R9, R11, R9 */
		/* 82184AECh case   13:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82184AECh case   13:*/		return 0x82184AF0;
		  /* 82184AF0h */ case   14:  		/* addi R11, R11, -8 */
		/* 82184AF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 82184AF0h case   14:*/		return 0x82184AF4;
		  /* 82184AF4h */ case   15:  		/* addi R8, R9, -1 */
		/* 82184AF4h case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0xFFFFFFFF);
		/* 82184AF4h case   15:*/		return 0x82184AF8;
		  /* 82184AF8h */ case   16:  		/* addi R9, R10, -8 */
		/* 82184AF8h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFF8);
		/* 82184AF8h case   16:*/		return 0x82184AFC;
		  /* 82184AFCh */ case   17:  		/* rlwinm R10, R8, 29, 3, 31 */
		/* 82184AFCh case   17:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R8);
		/* 82184AFCh case   17:*/		return 0x82184B00;
		  /* 82184B00h */ case   18:  		/* addi R10, R10, 1 */
		/* 82184B00h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82184B00h case   18:*/		return 0x82184B04;
		  /* 82184B04h */ case   19:  		/* mtspr CTR, R10 */
		/* 82184B04h case   19:*/		regs.CTR = regs.R10;
		/* 82184B04h case   19:*/		return 0x82184B08;
	}
	return 0x82184B08;
} // Block from 82184AB8h-82184B08h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82184B08h
// Function '?MergeGroupComponents@Compiler@D3DXShader@@AAAXPAURegGroupInfo@2@W4Component@2@01_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184B08);
		  /* 82184B08h */ case    0:  		/* ld R8, <#[R11 + 8]> */
		/* 82184B08h case    0:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82184B08h case    0:*/		return 0x82184B0C;
		  /* 82184B0Ch */ case    1:  		/* ldu R10, <#[R9 + 8]> */
		/* 82184B0Ch case    1:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82184B0Ch case    1:*/		return 0x82184B10;
		  /* 82184B10h */ case    2:  		/* or R10, R8, R10 */
		/* 82184B10h case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82184B10h case    2:*/		return 0x82184B14;
		  /* 82184B14h */ case    3:  		/* stdu R10, <#[R11 + 8]> */
		/* 82184B14h case    3:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82184B14h case    3:*/		return 0x82184B18;
		  /* 82184B18h */ case    4:  		/* bc 16, CR0_LT, -16 */
		/* 82184B18h case    4:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82184B08;  }
		/* 82184B18h case    4:*/		return 0x82184B1C;
	}
	return 0x82184B1C;
} // Block from 82184B08h-82184B1Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82184B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184B1C);
		  /* 82184B1Ch */ case    0:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184B1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184B1Ch case    0:*/		return 0x82184B20;
		  /* 82184B20h */ case    1:  		/* rlwinm R30, R27, 2, 0, 29 */
		/* 82184B20h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R27);
		/* 82184B20h case    1:*/		return 0x82184B24;
		  /* 82184B24h */ case    2:  		/* li R26, 1 */
		/* 82184B24h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82184B24h case    2:*/		return 0x82184B28;
		  /* 82184B28h */ case    3:  		/* lwzx R10, <#[R11 + R30]> */
		/* 82184B28h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184B28h case    3:*/		return 0x82184B2C;
		  /* 82184B2Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82184B2Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82184B2Ch case    4:*/		return 0x82184B30;
		  /* 82184B30h */ case    5:  		/* bc 4, CR6_EQ, 108 */
		/* 82184B30h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82184B9C;  }
		/* 82184B30h case    5:*/		return 0x82184B34;
		  /* 82184B34h */ case    6:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 82184B34h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 82184B34h case    6:*/		return 0x82184B38;
		  /* 82184B38h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82184B38h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184B38h case    7:*/		return 0x82184B3C;
		  /* 82184B3Ch */ case    8:  		/* cmplwi CR6, R11, 65535 */
		/* 82184B3Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000FFFF);
		/* 82184B3Ch case    8:*/		return 0x82184B40;
		  /* 82184B40h */ case    9:  		/* bc 4, CR6_GT, 32 */
		/* 82184B40h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82184B60;  }
		/* 82184B40h case    9:*/		return 0x82184B44;
		  /* 82184B44h */ case   10:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184B44h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184B44h case   10:*/		return 0x82184B48;
		  /* 82184B48h */ case   11:  		/* li R9, 0 */
		/* 82184B48h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82184B48h case   11:*/		return 0x82184B4C;
		  /* 82184B4Ch */ case   12:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82184B4Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184B4Ch case   12:*/		return 0x82184B50;
		  /* 82184B50h */ case   13:  		/* stwx R8, <#[R11 + R30]> */
		/* 82184B50h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184B50h case   13:*/		return 0x82184B54;
		  /* 82184B54h */ case   14:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184B54h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184B54h case   14:*/		return 0x82184B58;
		  /* 82184B58h */ case   15:  		/* stwx R9, <#[R11 + R10]> */
		/* 82184B58h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184B58h case   15:*/		return 0x82184B5C;
		  /* 82184B5Ch */ case   16:  		/* b 32 */
		/* 82184B5Ch case   16:*/		return 0x82184B7C;
		/* 82184B5Ch case   16:*/		return 0x82184B60;
	}
	return 0x82184B60;
} // Block from 82184B1Ch-82184B60h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82184B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184B60);
		  /* 82184B60h */ case    0:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184B60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184B60h case    0:*/		return 0x82184B64;
		  /* 82184B64h */ case    1:  		/* li R5, 0 */
		/* 82184B64h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82184B64h case    1:*/		return 0x82184B68;
		  /* 82184B68h */ case    2:  		/* mr R3, R31 */
		/* 82184B68h case    2:*/		regs.R3 = regs.R31;
		/* 82184B68h case    2:*/		return 0x82184B6C;
		  /* 82184B6Ch */ case    3:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82184B6Ch case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82184B6Ch case    3:*/		return 0x82184B70;
		  /* 82184B70h */ case    4:  		/* bl -129848 */
		/* 82184B70h case    4:*/		regs.LR = 0x82184B74; return 0x82165038;
		/* 82184B70h case    4:*/		return 0x82184B74;
		  /* 82184B74h */ case    5:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184B74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184B74h case    5:*/		return 0x82184B78;
		  /* 82184B78h */ case    6:  		/* stwx R3, <#[R11 + R30]> */
		/* 82184B78h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184B78h case    6:*/		return 0x82184B7C;
	}
	return 0x82184B7C;
} // Block from 82184B60h-82184B7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82184B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184B7C);
		  /* 82184B7Ch */ case    0:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184B7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184B7Ch case    0:*/		return 0x82184B80;
		  /* 82184B80h */ case    1:  		/* rlwinm R10, R27, 29, 3, 28 */
		/* 82184B80h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R27);
		/* 82184B80h case    1:*/		return 0x82184B84;
		  /* 82184B84h */ case    2:  		/* rldicl R9, R27, 0, 58 */
		/* 82184B84h case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R27);
		/* 82184B84h case    2:*/		return 0x82184B88;
		  /* 82184B88h */ case    3:  		/* sld R9, R26, R9 */
		/* 82184B88h case    3:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 82184B88h case    3:*/		return 0x82184B8C;
		  /* 82184B8Ch */ case    4:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82184B8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184B8Ch case    4:*/		return 0x82184B90;
		  /* 82184B90h */ case    5:  		/* ldx R8, <#[R10 + R11]> */
		/* 82184B90h case    5:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184B90h case    5:*/		return 0x82184B94;
		  /* 82184B94h */ case    6:  		/* or R9, R9, R8 */
		/* 82184B94h case    6:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82184B94h case    6:*/		return 0x82184B98;
		  /* 82184B98h */ case    7:  		/* stdx R9, <#[R10 + R11]> */
		/* 82184B98h case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184B98h case    7:*/		return 0x82184B9C;
	}
	return 0x82184B9C;
} // Block from 82184B7Ch-82184B9Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82184B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184B9C);
		  /* 82184B9Ch */ case    0:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184B9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184B9Ch case    0:*/		return 0x82184BA0;
		  /* 82184BA0h */ case    1:  		/* rlwinm R28, R29, 2, 0, 29 */
		/* 82184BA0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R29);
		/* 82184BA0h case    1:*/		return 0x82184BA4;
		  /* 82184BA4h */ case    2:  		/* lwzx R10, <#[R28 + R11]> */
		/* 82184BA4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 82184BA4h case    2:*/		return 0x82184BA8;
		  /* 82184BA8h */ case    3:  		/* cmplwi CR6, R10, 65535 */
		/* 82184BA8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFF);
		/* 82184BA8h case    3:*/		return 0x82184BAC;
		  /* 82184BACh */ case    4:  		/* bc 4, CR6_GT, 116 */
		/* 82184BACh case    4:*/		if ( !regs.CR[6].gt ) { return 0x82184C20;  }
		/* 82184BACh case    4:*/		return 0x82184BB0;
		  /* 82184BB0h */ case    5:  		/* rlwinm R9, R11, 0, 0, 31 */
		/* 82184BB0h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R11);
		/* 82184BB0h case    5:*/		return 0x82184BB4;
		  /* 82184BB4h */ case    6:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184BB4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184BB4h case    6:*/		return 0x82184BB8;
		  /* 82184BB8h */ case    7:  		/* rlwinm R10, R11, 3, 0, 28 */
		/* 82184BB8h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R11);
		/* 82184BB8h case    7:*/		return 0x82184BBC;
		  /* 82184BBCh */ case    8:  		/* lwzx R11, <#[R9 + R30]> */
		/* 82184BBCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82184BBCh case    8:*/		return 0x82184BC0;
		  /* 82184BC0h */ case    9:  		/* lwzx R9, <#[R9 + R28]> */
		/* 82184BC0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R28 + 0x00000000) );
		/* 82184BC0h case    9:*/		return 0x82184BC4;
		  /* 82184BC4h */ case   10:  		/* add R10, R10, R11 */
		/* 82184BC4h case   10:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82184BC4h case   10:*/		return 0x82184BC8;
		  /* 82184BC8h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 82184BC8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82184BC8h case   11:*/		return 0x82184BCC;
		  /* 82184BCCh */ case   12:  		/* bc 4, CR6_LT, 52 */
		/* 82184BCCh case   12:*/		if ( !regs.CR[6].lt ) { return 0x82184C00;  }
		/* 82184BCCh case   12:*/		return 0x82184BD0;
		  /* 82184BD0h */ case   13:  		/* subf R10, R11, R10 */
		/* 82184BD0h case   13:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82184BD0h case   13:*/		return 0x82184BD4;
		  /* 82184BD4h */ case   14:  		/* addi R11, R11, -8 */
		/* 82184BD4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 82184BD4h case   14:*/		return 0x82184BD8;
		  /* 82184BD8h */ case   15:  		/* addi R10, R10, -1 */
		/* 82184BD8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82184BD8h case   15:*/		return 0x82184BDC;
		  /* 82184BDCh */ case   16:  		/* addi R9, R9, -8 */
		/* 82184BDCh case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF8);
		/* 82184BDCh case   16:*/		return 0x82184BE0;
		  /* 82184BE0h */ case   17:  		/* rlwinm R10, R10, 29, 3, 31 */
		/* 82184BE0h case   17:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R10);
		/* 82184BE0h case   17:*/		return 0x82184BE4;
		  /* 82184BE4h */ case   18:  		/* addi R10, R10, 1 */
		/* 82184BE4h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82184BE4h case   18:*/		return 0x82184BE8;
		  /* 82184BE8h */ case   19:  		/* mtspr CTR, R10 */
		/* 82184BE8h case   19:*/		regs.CTR = regs.R10;
		/* 82184BE8h case   19:*/		return 0x82184BEC;
		  /* 82184BECh */ case   20:  		/* ld R8, <#[R11 + 8]> */
		/* 82184BECh case   20:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82184BECh case   20:*/		return 0x82184BF0;
		  /* 82184BF0h */ case   21:  		/* ldu R10, <#[R9 + 8]> */
		/* 82184BF0h case   21:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82184BF0h case   21:*/		return 0x82184BF4;
		  /* 82184BF4h */ case   22:  		/* or R10, R8, R10 */
		/* 82184BF4h case   22:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82184BF4h case   22:*/		return 0x82184BF8;
		  /* 82184BF8h */ case   23:  		/* stdu R10, <#[R11 + 8]> */
		/* 82184BF8h case   23:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82184BF8h case   23:*/		return 0x82184BFC;
		  /* 82184BFCh */ case   24:  		/* bc 16, CR0_LT, -16 */
		/* 82184BFCh case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82184BEC;  }
		/* 82184BFCh case   24:*/		return 0x82184C00;
	}
	return 0x82184C00;
} // Block from 82184B9Ch-82184C00h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82184C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184C00);
		  /* 82184C00h */ case    0:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184C00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184C00h case    0:*/		return 0x82184C04;
		  /* 82184C04h */ case    1:  		/* li R6, 0 */
		/* 82184C04h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82184C04h case    1:*/		return 0x82184C08;
		  /* 82184C08h */ case    2:  		/* lwz R10, <#[R31 + 672]> */
		/* 82184C08h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184C08h case    2:*/		return 0x82184C0C;
		  /* 82184C0Ch */ case    3:  		/* mr R3, R31 */
		/* 82184C0Ch case    3:*/		regs.R3 = regs.R31;
		/* 82184C0Ch case    3:*/		return 0x82184C10;
		  /* 82184C10h */ case    4:  		/* rlwinm R5, R10, 3, 0, 28 */
		/* 82184C10h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R10);
		/* 82184C10h case    4:*/		return 0x82184C14;
		  /* 82184C14h */ case    5:  		/* lwzx R4, <#[R11 + R28]> */
		/* 82184C14h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82184C14h case    5:*/		return 0x82184C18;
		  /* 82184C18h */ case    6:  		/* bl -97736 */
		/* 82184C18h case    6:*/		regs.LR = 0x82184C1C; return 0x8216CE50;
		/* 82184C18h case    6:*/		return 0x82184C1C;
		  /* 82184C1Ch */ case    7:  		/* b 32 */
		/* 82184C1Ch case    7:*/		return 0x82184C3C;
		/* 82184C1Ch case    7:*/		return 0x82184C20;
	}
	return 0x82184C20;
} // Block from 82184C00h-82184C20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82184C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184C20);
		  /* 82184C20h */ case    0:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82184C20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184C20h case    0:*/		return 0x82184C24;
		  /* 82184C24h */ case    1:  		/* rlwinm R10, R29, 29, 3, 28 */
		/* 82184C24h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R29);
		/* 82184C24h case    1:*/		return 0x82184C28;
		  /* 82184C28h */ case    2:  		/* rldicl R9, R29, 0, 58 */
		/* 82184C28h case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R29);
		/* 82184C28h case    2:*/		return 0x82184C2C;
		  /* 82184C2Ch */ case    3:  		/* sld R9, R26, R9 */
		/* 82184C2Ch case    3:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 82184C2Ch case    3:*/		return 0x82184C30;
		  /* 82184C30h */ case    4:  		/* ldx R8, <#[R10 + R11]> */
		/* 82184C30h case    4:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184C30h case    4:*/		return 0x82184C34;
		  /* 82184C34h */ case    5:  		/* or R9, R9, R8 */
		/* 82184C34h case    5:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82184C34h case    5:*/		return 0x82184C38;
		  /* 82184C38h */ case    6:  		/* stdx R9, <#[R10 + R11]> */
		/* 82184C38h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82184C38h case    6:*/		return 0x82184C3C;
	}
	return 0x82184C3C;
} // Block from 82184C20h-82184C3Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82184C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184C3C);
		  /* 82184C3Ch */ case    0:  		/* lwz R11, <#[R31 + 680]> */
		/* 82184C3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184C3Ch case    0:*/		return 0x82184C40;
		  /* 82184C40h */ case    1:  		/* stwx R27, <#[R11 + R28]> */
		/* 82184C40h case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82184C40h case    1:*/		return 0x82184C44;
		  /* 82184C44h */ case    2:  		/* addi R1, R1, 144 */
		/* 82184C44h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82184C44h case    2:*/		return 0x82184C48;
		  /* 82184C48h */ case    3:  		/* b -997800 */
		/* 82184C48h case    3:*/		return 0x820912A0;
		/* 82184C48h case    3:*/		return 0x82184C4C;
		  /* 82184C4Ch */ case    4:  		/* nop */
		/* 82184C4Ch case    4:*/		cpu::op::nop();
		/* 82184C4Ch case    4:*/		return 0x82184C50;
	}
	return 0x82184C50;
} // Block from 82184C3Ch-82184C50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82184C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184C50);
		  /* 82184C50h */ case    0:  		/* mfspr R12, LR */
		/* 82184C50h case    0:*/		regs.R12 = regs.LR;
		/* 82184C50h case    0:*/		return 0x82184C54;
		  /* 82184C54h */ case    1:  		/* bl -997908 */
		/* 82184C54h case    1:*/		regs.LR = 0x82184C58; return 0x82091240;
		/* 82184C54h case    1:*/		return 0x82184C58;
		  /* 82184C58h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82184C58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82184C58h case    2:*/		return 0x82184C5C;
		  /* 82184C5Ch */ case    3:  		/* lwz R11, <#[R3 + 668]> */
		/* 82184C5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000029C) );
		/* 82184C5Ch case    3:*/		return 0x82184C60;
		  /* 82184C60h */ case    4:  		/* mr R30, R4 */
		/* 82184C60h case    4:*/		regs.R30 = regs.R4;
		/* 82184C60h case    4:*/		return 0x82184C64;
		  /* 82184C64h */ case    5:  		/* mr R29, R5 */
		/* 82184C64h case    5:*/		regs.R29 = regs.R5;
		/* 82184C64h case    5:*/		return 0x82184C68;
		  /* 82184C68h */ case    6:  		/* li R5, 0 */
		/* 82184C68h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82184C68h case    6:*/		return 0x82184C6C;
		  /* 82184C6Ch */ case    7:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 82184C6Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 82184C6Ch case    7:*/		return 0x82184C70;
		  /* 82184C70h */ case    8:  		/* mr R31, R3 */
		/* 82184C70h case    8:*/		regs.R31 = regs.R3;
		/* 82184C70h case    8:*/		return 0x82184C74;
		  /* 82184C74h */ case    9:  		/* bl -130108 */
		/* 82184C74h case    9:*/		regs.LR = 0x82184C78; return 0x82165038;
		/* 82184C74h case    9:*/		return 0x82184C78;
		  /* 82184C78h */ case   10:  		/* lwz R10, <#[R31 + 668]> */
		/* 82184C78h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184C78h case   10:*/		return 0x82184C7C;
		  /* 82184C7Ch */ case   11:  		/* mr R22, R3 */
		/* 82184C7Ch case   11:*/		regs.R22 = regs.R3;
		/* 82184C7Ch case   11:*/		return 0x82184C80;
		  /* 82184C80h */ case   12:  		/* li R11, 0 */
		/* 82184C80h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184C80h case   12:*/		return 0x82184C84;
		  /* 82184C84h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 82184C84h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82184C84h case   13:*/		return 0x82184C88;
		  /* 82184C88h */ case   14:  		/* bc 4, CR6_GT, 28 */
		/* 82184C88h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82184CA4;  }
		/* 82184C88h case   14:*/		return 0x82184C8C;
		  /* 82184C8Ch */ case   15:  		/* addi R10, R3, -4 */
		/* 82184C8Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFC);
		/* 82184C8Ch case   15:*/		return 0x82184C90;
		  /* 82184C90h */ case   16:  		/* stwu R11, <#[R10 + 4]> */
		/* 82184C90h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82184C90h case   16:*/		return 0x82184C94;
		  /* 82184C94h */ case   17:  		/* addi R11, R11, 1 */
		/* 82184C94h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82184C94h case   17:*/		return 0x82184C98;
		  /* 82184C98h */ case   18:  		/* lwz R9, <#[R31 + 668]> */
		/* 82184C98h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184C98h case   18:*/		return 0x82184C9C;
		  /* 82184C9Ch */ case   19:  		/* cmplw CR6, R11, R9 */
		/* 82184C9Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82184C9Ch case   19:*/		return 0x82184CA0;
		  /* 82184CA0h */ case   20:  		/* bc 12, CR6_LT, -16 */
		/* 82184CA0h case   20:*/		if ( regs.CR[6].lt ) { return 0x82184C90;  }
		/* 82184CA0h case   20:*/		return 0x82184CA4;
	}
	return 0x82184CA4;
} // Block from 82184C50h-82184CA4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82184CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184CA4);
		  /* 82184CA4h */ case    0:  		/* lhz R10, <#[R30 + 18]> */
		/* 82184CA4h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000012) );
		/* 82184CA4h case    0:*/		return 0x82184CA8;
		  /* 82184CA8h */ case    1:  		/* mr R11, R29 */
		/* 82184CA8h case    1:*/		regs.R11 = regs.R29;
		/* 82184CA8h case    1:*/		return 0x82184CAC;
		  /* 82184CACh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82184CACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184CACh case    2:*/		return 0x82184CB0;
		  /* 82184CB0h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 82184CB0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82184CE8;  }
		/* 82184CB0h case    3:*/		return 0x82184CB4;
		  /* 82184CB4h */ case    4:  		/* addi R9, R11, -1 */
		/* 82184CB4h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82184CB4h case    4:*/		return 0x82184CB8;
		  /* 82184CB8h */ case    5:  		/* lhz R8, <#[R30 + 18]> */
		/* 82184CB8h case    5:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000012) );
		/* 82184CB8h case    5:*/		return 0x82184CBC;
		  /* 82184CBCh */ case    6:  		/* addi R7, R11, -1 */
		/* 82184CBCh case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 82184CBCh case    6:*/		return 0x82184CC0;
		  /* 82184CC0h */ case    7:  		/* andc R9, R11, R9 */
		/* 82184CC0h case    7:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82184CC0h case    7:*/		return 0x82184CC4;
		  /* 82184CC4h */ case    8:  		/* andc R7, R11, R7 */
		/* 82184CC4h case    8:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 82184CC4h case    8:*/		return 0x82184CC8;
		  /* 82184CC8h */ case    9:  		/* cntlzw R9, R9 */
		/* 82184CC8h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82184CC8h case    9:*/		return 0x82184CCC;
		  /* 82184CCCh */ case   10:  		/* subf R11, R7, R11 */
		/* 82184CCCh case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 82184CCCh case   10:*/		return 0x82184CD0;
		  /* 82184CD0h */ case   11:  		/* subfic R9, R9, 31 */
		/* 82184CD0h case   11:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x1F);
		/* 82184CD0h case   11:*/		return 0x82184CD4;
		  /* 82184CD4h */ case   12:  		/* add R9, R8, R9 */
		/* 82184CD4h case   12:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82184CD4h case   12:*/		return 0x82184CD8;
		  /* 82184CD8h */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82184CD8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82184CD8h case   13:*/		return 0x82184CDC;
		  /* 82184CDCh */ case   14:  		/* stwx R10, <#[R9 + R22]> */
		/* 82184CDCh case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R22 + 0x00000000) );
		/* 82184CDCh case   14:*/		return 0x82184CE0;
		  /* 82184CE0h */ case   15:  		/* addi R10, R10, 1 */
		/* 82184CE0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82184CE0h case   15:*/		return 0x82184CE4;
		  /* 82184CE4h */ case   16:  		/* b -56 */
		/* 82184CE4h case   16:*/		return 0x82184CAC;
		/* 82184CE4h case   16:*/		return 0x82184CE8;
	}
	return 0x82184CE8;
} // Block from 82184CA4h-82184CE8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82184CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184CE8);
		  /* 82184CE8h */ case    0:  		/* lhz R10, <#[R30 + 18]> */
		/* 82184CE8h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000012) );
		/* 82184CE8h case    0:*/		return 0x82184CEC;
		  /* 82184CECh */ case    1:  		/* mr R11, R29 */
		/* 82184CECh case    1:*/		regs.R11 = regs.R29;
		/* 82184CECh case    1:*/		return 0x82184CF0;
	}
	return 0x82184CF0;
} // Block from 82184CE8h-82184CF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184CF0h
// Function '?HaveComponentInterference@Compiler@D3DXShader@@AAA_NII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184CF0);
		  /* 82184CF0h */ case    0:  		/* rlwinm R9, R10, 2, 0, 31 */
		/* 82184CF0h case    0:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R9,regs.R10);
		/* 82184CF0h case    0:*/		return 0x82184CF4;
		  /* 82184CF4h */ case    1:  		/* rlwinm R10, R10, 1, 0, 31 */
		/* 82184CF4h case    1:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R10,regs.R10);
		/* 82184CF4h case    1:*/		return 0x82184CF8;
		  /* 82184CF8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82184CF8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184CF8h case    2:*/		return 0x82184CFC;
		  /* 82184CFCh */ case    3:  		/* bc 12, CR6_EQ, 168 */
		/* 82184CFCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82184DA4;  }
		/* 82184CFCh case    3:*/		return 0x82184D00;
		  /* 82184D00h */ case    4:  		/* addi R8, R11, -1 */
		/* 82184D00h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 82184D00h case    4:*/		return 0x82184D04;
		  /* 82184D04h */ case    5:  		/* lhz R6, <#[R30 + 18]> */
		/* 82184D04h case    5:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000012) );
		/* 82184D04h case    5:*/		return 0x82184D08;
		  /* 82184D08h */ case    6:  		/* lwz R5, <#[R31 + 688]> */
		/* 82184D08h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002B0) );
		/* 82184D08h case    6:*/		return 0x82184D0C;
		  /* 82184D0Ch */ case    7:  		/* rlwinm R7, R10, 29, 3, 28 */
		/* 82184D0Ch case    7:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R7,regs.R10);
		/* 82184D0Ch case    7:*/		return 0x82184D10;
		  /* 82184D10h */ case    8:  		/* andc R8, R11, R8 */
		/* 82184D10h case    8:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 82184D10h case    8:*/		return 0x82184D14;
		  /* 82184D14h */ case    9:  		/* rlwinm R4, R10, 0, 0, 25 */
		/* 82184D14h case    9:*/		cpu::op::rlwinm<0,0,0,25>(regs,&regs.R4,regs.R10);
		/* 82184D14h case    9:*/		return 0x82184D18;
		  /* 82184D18h */ case   10:  		/* cntlzw R8, R8 */
		/* 82184D18h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 82184D18h case   10:*/		return 0x82184D1C;
		  /* 82184D1Ch */ case   11:  		/* subf R4, R4, R10 */
		/* 82184D1Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R4,regs.R10);
		/* 82184D1Ch case   11:*/		return 0x82184D20;
		  /* 82184D20h */ case   12:  		/* subfic R8, R8, 31 */
		/* 82184D20h case   12:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R8,0x1F);
		/* 82184D20h case   12:*/		return 0x82184D24;
		  /* 82184D24h */ case   13:  		/* rldicl R4, R4, 0, 32 */
		/* 82184D24h case   13:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R4,regs.R4);
		/* 82184D24h case   13:*/		return 0x82184D28;
		  /* 82184D28h */ case   14:  		/* add R8, R6, R8 */
		/* 82184D28h case   14:*/		cpu::op::add<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 82184D28h case   14:*/		return 0x82184D2C;
		  /* 82184D2Ch */ case   15:  		/* li R6, 3 */
		/* 82184D2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82184D2Ch case   15:*/		return 0x82184D30;
		  /* 82184D30h */ case   16:  		/* rlwinm R3, R8, 2, 0, 29 */
		/* 82184D30h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R8);
		/* 82184D30h case   16:*/		return 0x82184D34;
		  /* 82184D34h */ case   17:  		/* rlwinm R29, R8, 1, 0, 30 */
		/* 82184D34h case   17:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R29,regs.R8);
		/* 82184D34h case   17:*/		return 0x82184D38;
		  /* 82184D38h */ case   18:  		/* rlwinm R28, R8, 1, 0, 25 */
		/* 82184D38h case   18:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R28,regs.R8);
		/* 82184D38h case   18:*/		return 0x82184D3C;
		  /* 82184D3Ch */ case   19:  		/* rlwinm R27, R8, 30, 3, 28 */
		/* 82184D3Ch case   19:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R27,regs.R8);
		/* 82184D3Ch case   19:*/		return 0x82184D40;
		  /* 82184D40h */ case   20:  		/* subf R8, R28, R29 */
		/* 82184D40h case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R28,regs.R29);
		/* 82184D40h case   20:*/		return 0x82184D44;
		  /* 82184D44h */ case   21:  		/* lwzx R29, <#[R5 + R3]> */
		/* 82184D44h case   21:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R5 + regs.R3 + 0x00000000) );
		/* 82184D44h case   21:*/		return 0x82184D48;
		  /* 82184D48h */ case   22:  		/* sld R6, R6, R4 */
		/* 82184D48h case   22:*/		cpu::op::sld<0>(regs,&regs.R6,regs.R6,regs.R4);
		/* 82184D48h case   22:*/		return 0x82184D4C;
		  /* 82184D4Ch */ case   23:  		/* stwx R29, <#[R9 + R5]> */
		/* 82184D4Ch case   23:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 82184D4Ch case   23:*/		return 0x82184D50;
		  /* 82184D50h */ case   24:  		/* rldicl R5, R8, 0, 32 */
		/* 82184D50h case   24:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R5,regs.R8);
		/* 82184D50h case   24:*/		return 0x82184D54;
		  /* 82184D54h */ case   25:  		/* lwz R8, <#[R31 + 680]> */
		/* 82184D54h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184D54h case   25:*/		return 0x82184D58;
		  /* 82184D58h */ case   26:  		/* addi R29, R11, -1 */
		/* 82184D58h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFF);
		/* 82184D58h case   26:*/		return 0x82184D5C;
		  /* 82184D5Ch */ case   27:  		/* lwzx R3, <#[R8 + R3]> */
		/* 82184D5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82184D5Ch case   27:*/		return 0x82184D60;
		  /* 82184D60h */ case   28:  		/* addi R10, R10, 2 */
		/* 82184D60h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 82184D60h case   28:*/		return 0x82184D64;
		  /* 82184D64h */ case   29:  		/* stwx R3, <#[R9 + R8]> */
		/* 82184D64h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82184D64h case   29:*/		return 0x82184D68;
		  /* 82184D68h */ case   30:  		/* andc R3, R11, R29 */
		/* 82184D68h case   30:*/		cpu::op::andc<0>(regs,&regs.R3,regs.R11,regs.R29);
		/* 82184D68h case   30:*/		return 0x82184D6C;
		  /* 82184D6Ch */ case   31:  		/* lwz R8, <#[R31 + 692]> */
		/* 82184D6Ch case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000002B4) );
		/* 82184D6Ch case   31:*/		return 0x82184D70;
		  /* 82184D70h */ case   32:  		/* subf R11, R3, R11 */
		/* 82184D70h case   32:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82184D70h case   32:*/		return 0x82184D74;
		  /* 82184D74h */ case   33:  		/* ldx R3, <#[R7 + R8]> */
		/* 82184D74h case   33:*/		cpu::mem::load64( regs, &regs.R3, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82184D74h case   33:*/		return 0x82184D78;
		  /* 82184D78h */ case   34:  		/* ldx R29, <#[R27 + R8]> */
		/* 82184D78h case   34:*/		cpu::mem::load64( regs, &regs.R29, (uint32)(regs.R27 + regs.R8 + 0x00000000) );
		/* 82184D78h case   34:*/		return 0x82184D7C;
		  /* 82184D7Ch */ case   35:  		/* srd R5, R29, R5 */
		/* 82184D7Ch case   35:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R29,regs.R5);
		/* 82184D7Ch case   35:*/		return 0x82184D80;
		  /* 82184D80h */ case   36:  		/* rldicl R5, R5, 0, 62 */
		/* 82184D80h case   36:*/		cpu::op::rldicl<0,0,62>(regs,&regs.R5,regs.R5);
		/* 82184D80h case   36:*/		return 0x82184D84;
		  /* 82184D84h */ case   37:  		/* andc R6, R3, R6 */
		/* 82184D84h case   37:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R3,regs.R6);
		/* 82184D84h case   37:*/		return 0x82184D88;
		  /* 82184D88h */ case   38:  		/* sld R5, R5, R4 */
		/* 82184D88h case   38:*/		cpu::op::sld<0>(regs,&regs.R5,regs.R5,regs.R4);
		/* 82184D88h case   38:*/		return 0x82184D8C;
		  /* 82184D8Ch */ case   39:  		/* or R6, R5, R6 */
		/* 82184D8Ch case   39:*/		cpu::op::or<0>(regs,&regs.R6,regs.R5,regs.R6);
		/* 82184D8Ch case   39:*/		return 0x82184D90;
		  /* 82184D90h */ case   40:  		/* stdx R6, <#[R7 + R8]> */
		/* 82184D90h case   40:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82184D90h case   40:*/		return 0x82184D94;
		  /* 82184D94h */ case   41:  		/* lwz R8, <#[R31 + 708]> */
		/* 82184D94h case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000002C4) );
		/* 82184D94h case   41:*/		return 0x82184D98;
		  /* 82184D98h */ case   42:  		/* stwx R30, <#[R8 + R9]> */
		/* 82184D98h case   42:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82184D98h case   42:*/		return 0x82184D9C;
		  /* 82184D9Ch */ case   43:  		/* addi R9, R9, 4 */
		/* 82184D9Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82184D9Ch case   43:*/		return 0x82184DA0;
		  /* 82184DA0h */ case   44:  		/* b -168 */
		/* 82184DA0h case   44:*/		return 0x82184CF8;
		/* 82184DA0h case   44:*/		return 0x82184DA4;
	}
	return 0x82184DA4;
} // Block from 82184CF0h-82184DA4h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82184DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184DA4);
		  /* 82184DA4h */ case    0:  		/* lwz R11, <#[R31 + 668]> */
		/* 82184DA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184DA4h case    0:*/		return 0x82184DA8;
		  /* 82184DA8h */ case    1:  		/* li R8, 0 */
		/* 82184DA8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82184DA8h case    1:*/		return 0x82184DAC;
		  /* 82184DACh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82184DACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82184DACh case    2:*/		return 0x82184DB0;
		  /* 82184DB0h */ case    3:  		/* bc 4, CR6_GT, 64 */
		/* 82184DB0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82184DF0;  }
		/* 82184DB0h case    3:*/		return 0x82184DB4;
		  /* 82184DB4h */ case    4:  		/* li R11, 0 */
		/* 82184DB4h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82184DB4h case    4:*/		return 0x82184DB8;
		  /* 82184DB8h */ case    5:  		/* lwz R10, <#[R31 + 680]> */
		/* 82184DB8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002A8) );
		/* 82184DB8h case    5:*/		return 0x82184DBC;
		  /* 82184DBCh */ case    6:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82184DBCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184DBCh case    6:*/		return 0x82184DC0;
		  /* 82184DC0h */ case    7:  		/* cmplwi CR6, R9, 65535 */
		/* 82184DC0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000FFFF);
		/* 82184DC0h case    7:*/		return 0x82184DC4;
		  /* 82184DC4h */ case    8:  		/* bc 12, CR6_LT, 12 */
		/* 82184DC4h case    8:*/		if ( regs.CR[6].lt ) { return 0x82184DD0;  }
		/* 82184DC4h case    8:*/		return 0x82184DC8;
		  /* 82184DC8h */ case    9:  		/* li R9, 0 */
		/* 82184DC8h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82184DC8h case    9:*/		return 0x82184DCC;
		  /* 82184DCCh */ case   10:  		/* b 12 */
		/* 82184DCCh case   10:*/		return 0x82184DD8;
		/* 82184DCCh case   10:*/		return 0x82184DD0;
	}
	return 0x82184DD0;
} // Block from 82184DA4h-82184DD0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82184DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184DD0);
		  /* 82184DD0h */ case    0:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82184DD0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82184DD0h case    0:*/		return 0x82184DD4;
		  /* 82184DD4h */ case    1:  		/* lwzx R9, <#[R9 + R22]> */
		/* 82184DD4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R22 + 0x00000000) );
		/* 82184DD4h case    1:*/		return 0x82184DD8;
	}
	return 0x82184DD8;
} // Block from 82184DD0h-82184DD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184DD8);
		  /* 82184DD8h */ case    0:  		/* addi R8, R8, 1 */
		/* 82184DD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82184DD8h case    0:*/		return 0x82184DDC;
		  /* 82184DDCh */ case    1:  		/* stwx R9, <#[R11 + R10]> */
		/* 82184DDCh case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82184DDCh case    1:*/		return 0x82184DE0;
		  /* 82184DE0h */ case    2:  		/* lwz R10, <#[R31 + 668]> */
		/* 82184DE0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184DE0h case    2:*/		return 0x82184DE4;
		  /* 82184DE4h */ case    3:  		/* addi R11, R11, 4 */
		/* 82184DE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82184DE4h case    3:*/		return 0x82184DE8;
		  /* 82184DE8h */ case    4:  		/* cmplw CR6, R8, R10 */
		/* 82184DE8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 82184DE8h case    4:*/		return 0x82184DEC;
		  /* 82184DECh */ case    5:  		/* bc 12, CR6_LT, -52 */
		/* 82184DECh case    5:*/		if ( regs.CR[6].lt ) { return 0x82184DB8;  }
		/* 82184DECh case    5:*/		return 0x82184DF0;
	}
	return 0x82184DF0;
} // Block from 82184DD8h-82184DF0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82184DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184DF0);
		  /* 82184DF0h */ case    0:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184DF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184DF0h case    0:*/		return 0x82184DF4;
		  /* 82184DF4h */ case    1:  		/* li R5, 0 */
		/* 82184DF4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82184DF4h case    1:*/		return 0x82184DF8;
		  /* 82184DF8h */ case    2:  		/* mr R3, R31 */
		/* 82184DF8h case    2:*/		regs.R3 = regs.R31;
		/* 82184DF8h case    2:*/		return 0x82184DFC;
		  /* 82184DFCh */ case    3:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82184DFCh case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82184DFCh case    3:*/		return 0x82184E00;
		  /* 82184E00h */ case    4:  		/* bl -130504 */
		/* 82184E00h case    4:*/		regs.LR = 0x82184E04; return 0x82165038;
		/* 82184E00h case    4:*/		return 0x82184E04;
		  /* 82184E04h */ case    5:  		/* lwz R24, <#[R31 + 696]> */
		/* 82184E04h case    5:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x000002B8) );
		/* 82184E04h case    5:*/		return 0x82184E08;
		  /* 82184E08h */ case    6:  		/* mr R27, R3 */
		/* 82184E08h case    6:*/		regs.R27 = regs.R3;
		/* 82184E08h case    6:*/		return 0x82184E0C;
		  /* 82184E0Ch */ case    7:  		/* cmplwi CR6, R24, 0 */
		/* 82184E0Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82184E0Ch case    7:*/		return 0x82184E10;
		  /* 82184E10h */ case    8:  		/* bc 12, CR6_EQ, 384 */
		/* 82184E10h case    8:*/		if ( regs.CR[6].eq ) { return 0x82184F90;  }
		/* 82184E10h case    8:*/		return 0x82184E14;
		  /* 82184E14h */ case    9:  		/* li R26, 1 */
		/* 82184E14h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82184E14h case    9:*/		return 0x82184E18;
		  /* 82184E18h */ case   10:  		/* li R23, -1 */
		/* 82184E18h case   10:*/		cpu::op::li<0>(regs,&regs.R23,0xFFFFFFFF);
		/* 82184E18h case   10:*/		return 0x82184E1C;
		  /* 82184E1Ch */ case   11:  		/* lwz R11, <#[R24 + 192]> */
		/* 82184E1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000000C0) );
		/* 82184E1Ch case   11:*/		return 0x82184E20;
		  /* 82184E20h */ case   12:  		/* li R25, 0 */
		/* 82184E20h case   12:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82184E20h case   12:*/		return 0x82184E24;
		  /* 82184E24h */ case   13:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 82184E24h case   13:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82184E24h case   13:*/		return 0x82184E28;
		  /* 82184E28h */ case   14:  		/* bc 12, CR0_EQ, 348 */
		/* 82184E28h case   14:*/		if ( regs.CR[0].eq ) { return 0x82184F84;  }
		/* 82184E28h case   14:*/		return 0x82184E2C;
		  /* 82184E2Ch */ case   15:  		/* addi R29, R24, 12 */
		/* 82184E2Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R24,0xC);
		/* 82184E2Ch case   15:*/		return 0x82184E30;
		  /* 82184E30h */ case   16:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184E30h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184E30h case   16:*/		return 0x82184E34;
		  /* 82184E34h */ case   17:  		/* li R4, 0 */
		/* 82184E34h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82184E34h case   17:*/		return 0x82184E38;
		  /* 82184E38h */ case   18:  		/* mr R3, R27 */
		/* 82184E38h case   18:*/		regs.R3 = regs.R27;
		/* 82184E38h case   18:*/		return 0x82184E3C;
		  /* 82184E3Ch */ case   19:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 82184E3Ch case   19:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 82184E3Ch case   19:*/		return 0x82184E40;
		  /* 82184E40h */ case   20:  		/* bl -998144 */
		/* 82184E40h case   20:*/		regs.LR = 0x82184E44; return 0x82091340;
		/* 82184E40h case   20:*/		return 0x82184E44;
		  /* 82184E44h */ case   21:  		/* li R4, 0 */
		/* 82184E44h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82184E44h case   21:*/		return 0x82184E48;
		  /* 82184E48h */ case   22:  		/* lwz R5, <#[R31 + 672]> */
		/* 82184E48h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184E48h case   22:*/		return 0x82184E4C;
		  /* 82184E4Ch */ case   23:  		/* lwz R3, <#[R29 - 12]> */
		/* 82184E4Ch case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0xFFFFFFF4) );
		/* 82184E4Ch case   23:*/		return 0x82184E50;
		  /* 82184E50h */ case   24:  		/* bl -89848 */
		/* 82184E50h case   24:*/		regs.LR = 0x82184E54; return 0x8216EF58;
		/* 82184E50h case   24:*/		return 0x82184E54;
		  /* 82184E54h */ case   25:  		/* lwz R11, <#[R31 + 668]> */
		/* 82184E54h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184E54h case   25:*/		return 0x82184E58;
		  /* 82184E58h */ case   26:  		/* addi R11, R11, -1 */
		/* 82184E58h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82184E58h case   26:*/		return 0x82184E5C;
		  /* 82184E5Ch */ case   27:  		/* cmplw CR6, R3, R11 */
		/* 82184E5Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82184E5Ch case   27:*/		return 0x82184E60;
		  /* 82184E60h */ case   28:  		/* bc 12, CR6_GT, 96 */
		/* 82184E60h case   28:*/		if ( regs.CR[6].gt ) { return 0x82184EC0;  }
		/* 82184E60h case   28:*/		return 0x82184E64;
		  /* 82184E64h */ case   29:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 82184E64h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 82184E64h case   29:*/		return 0x82184E68;
		  /* 82184E68h */ case   30:  		/* lis R12, -1024 */
		/* 82184E68h case   30:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFC00);
		/* 82184E68h case   30:*/		return 0x82184E6C;
		  /* 82184E6Ch */ case   31:  		/* ori R12, R12, 0 */
		/* 82184E6Ch case   31:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82184E6Ch case   31:*/		return 0x82184E70;
		  /* 82184E70h */ case   32:  		/* lwzx R10, <#[R11 + R22]> */
		/* 82184E70h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 82184E70h case   32:*/		return 0x82184E74;
		  /* 82184E74h */ case   33:  		/* rldicr R12, R12, 6, 63 */
		/* 82184E74h case   33:*/		cpu::op::rldicr<0,6,63>(regs,&regs.R12,regs.R12);
		/* 82184E74h case   33:*/		return 0x82184E78;
		  /* 82184E78h */ case   34:  		/* rlwinm R11, R10, 29, 3, 28 */
		/* 82184E78h case   34:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R10);
		/* 82184E78h case   34:*/		return 0x82184E7C;
		  /* 82184E7Ch */ case   35:  		/* and R10, R10, R12 */
		/* 82184E7Ch case   35:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82184E7Ch case   35:*/		return 0x82184E80;
		  /* 82184E80h */ case   36:  		/* sld R10, R26, R10 */
		/* 82184E80h case   36:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R26,regs.R10);
		/* 82184E80h case   36:*/		return 0x82184E84;
		  /* 82184E84h */ case   37:  		/* ldx R9, <#[R11 + R27]> */
		/* 82184E84h case   37:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82184E84h case   37:*/		return 0x82184E88;
		  /* 82184E88h */ case   38:  		/* or R10, R10, R9 */
		/* 82184E88h case   38:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82184E88h case   38:*/		return 0x82184E8C;
		  /* 82184E8Ch */ case   39:  		/* stdx R10, <#[R11 + R27]> */
		/* 82184E8Ch case   39:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82184E8Ch case   39:*/		return 0x82184E90;
		  /* 82184E90h */ case   40:  		/* lwz R11, <#[R31 + 668]> */
		/* 82184E90h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184E90h case   40:*/		return 0x82184E94;
		  /* 82184E94h */ case   41:  		/* addi R30, R11, -1 */
		/* 82184E94h case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFF);
		/* 82184E94h case   41:*/		return 0x82184E98;
		  /* 82184E98h */ case   42:  		/* cmplw CR6, R3, R30 */
		/* 82184E98h case   42:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 82184E98h case   42:*/		return 0x82184E9C;
		  /* 82184E9Ch */ case   43:  		/* bc 4, CR6_EQ, 12 */
		/* 82184E9Ch case   43:*/		if ( !regs.CR[6].eq ) { return 0x82184EA8;  }
		/* 82184E9Ch case   43:*/		return 0x82184EA0;
	}
	return 0x82184EA0;
} // Block from 82184DF0h-82184EA0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82184EA0h
// Function '?FreeGroup@Compiler@D3DXShader@@AAAXPAURegGroupInfo@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184EA0);
		  /* 82184EA0h */ case    0:  		/* mr R3, R23 */
		/* 82184EA0h case    0:*/		regs.R3 = regs.R23;
		/* 82184EA0h case    0:*/		return 0x82184EA4;
		  /* 82184EA4h */ case    1:  		/* b 20 */
		/* 82184EA4h case    1:*/		return 0x82184EB8;
		/* 82184EA4h case    1:*/		return 0x82184EA8;
	}
	return 0x82184EA8;
} // Block from 82184EA0h-82184EA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184EA8);
		  /* 82184EA8h */ case    0:  		/* addi R4, R3, 1 */
		/* 82184EA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 82184EA8h case    0:*/		return 0x82184EAC;
		  /* 82184EACh */ case    1:  		/* lwz R3, <#[R29 - 12]> */
		/* 82184EACh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0xFFFFFFF4) );
		/* 82184EACh case    1:*/		return 0x82184EB0;
		  /* 82184EB0h */ case    2:  		/* lwz R5, <#[R31 + 672]> */
		/* 82184EB0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184EB0h case    2:*/		return 0x82184EB4;
		  /* 82184EB4h */ case    3:  		/* bl -89948 */
		/* 82184EB4h case    3:*/		regs.LR = 0x82184EB8; return 0x8216EF58;
		/* 82184EB4h case    3:*/		return 0x82184EB8;
	}
	return 0x82184EB8;
} // Block from 82184EA8h-82184EB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184EB8);
		  /* 82184EB8h */ case    0:  		/* cmplw CR6, R3, R30 */
		/* 82184EB8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 82184EB8h case    0:*/		return 0x82184EBC;
		  /* 82184EBCh */ case    1:  		/* bc 4, CR6_GT, -88 */
		/* 82184EBCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x82184E64;  }
		/* 82184EBCh case    1:*/		return 0x82184EC0;
	}
	return 0x82184EC0;
} // Block from 82184EB8h-82184EC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184EC0);
		  /* 82184EC0h */ case    0:  		/* lwz R30, <#[R29 - 12]> */
		/* 82184EC0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0xFFFFFFF4) );
		/* 82184EC0h case    0:*/		return 0x82184EC4;
		  /* 82184EC4h */ case    1:  		/* li R4, 0 */
		/* 82184EC4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82184EC4h case    1:*/		return 0x82184EC8;
		  /* 82184EC8h */ case    2:  		/* stw R27, <#[R29 - 12]> */
		/* 82184EC8h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0xFFFFFFF4) );
		/* 82184EC8h case    2:*/		return 0x82184ECC;
		  /* 82184ECCh */ case    3:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184ECCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184ECCh case    3:*/		return 0x82184ED0;
		  /* 82184ED0h */ case    4:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 82184ED0h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 82184ED0h case    4:*/		return 0x82184ED4;
		  /* 82184ED4h */ case    5:  		/* mr R3, R30 */
		/* 82184ED4h case    5:*/		regs.R3 = regs.R30;
		/* 82184ED4h case    5:*/		return 0x82184ED8;
		  /* 82184ED8h */ case    6:  		/* mr R27, R30 */
		/* 82184ED8h case    6:*/		regs.R27 = regs.R30;
		/* 82184ED8h case    6:*/		return 0x82184EDC;
		  /* 82184EDCh */ case    7:  		/* bl -998300 */
		/* 82184EDCh case    7:*/		regs.LR = 0x82184EE0; return 0x82091340;
		/* 82184EDCh case    7:*/		return 0x82184EE0;
		  /* 82184EE0h */ case    8:  		/* li R4, 0 */
		/* 82184EE0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82184EE0h case    8:*/		return 0x82184EE4;
		  /* 82184EE4h */ case    9:  		/* lwz R5, <#[R31 + 672]> */
		/* 82184EE4h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184EE4h case    9:*/		return 0x82184EE8;
		  /* 82184EE8h */ case   10:  		/* lwz R3, <#[R29 + 4]> */
		/* 82184EE8h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 82184EE8h case   10:*/		return 0x82184EEC;
		  /* 82184EECh */ case   11:  		/* bl -90004 */
		/* 82184EECh case   11:*/		regs.LR = 0x82184EF0; return 0x8216EF58;
		/* 82184EECh case   11:*/		return 0x82184EF0;
		  /* 82184EF0h */ case   12:  		/* lwz R11, <#[R31 + 668]> */
		/* 82184EF0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184EF0h case   12:*/		return 0x82184EF4;
		  /* 82184EF4h */ case   13:  		/* addi R11, R11, -1 */
		/* 82184EF4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82184EF4h case   13:*/		return 0x82184EF8;
		  /* 82184EF8h */ case   14:  		/* cmplw CR6, R3, R11 */
		/* 82184EF8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82184EF8h case   14:*/		return 0x82184EFC;
		  /* 82184EFCh */ case   15:  		/* bc 12, CR6_GT, 96 */
		/* 82184EFCh case   15:*/		if ( regs.CR[6].gt ) { return 0x82184F5C;  }
		/* 82184EFCh case   15:*/		return 0x82184F00;
		  /* 82184F00h */ case   16:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 82184F00h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 82184F00h case   16:*/		return 0x82184F04;
		  /* 82184F04h */ case   17:  		/* lis R12, -1024 */
		/* 82184F04h case   17:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFC00);
		/* 82184F04h case   17:*/		return 0x82184F08;
		  /* 82184F08h */ case   18:  		/* ori R12, R12, 0 */
		/* 82184F08h case   18:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82184F08h case   18:*/		return 0x82184F0C;
		  /* 82184F0Ch */ case   19:  		/* lwzx R10, <#[R11 + R22]> */
		/* 82184F0Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 82184F0Ch case   19:*/		return 0x82184F10;
		  /* 82184F10h */ case   20:  		/* rldicr R12, R12, 6, 63 */
		/* 82184F10h case   20:*/		cpu::op::rldicr<0,6,63>(regs,&regs.R12,regs.R12);
		/* 82184F10h case   20:*/		return 0x82184F14;
		  /* 82184F14h */ case   21:  		/* rlwinm R11, R10, 29, 3, 28 */
		/* 82184F14h case   21:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R10);
		/* 82184F14h case   21:*/		return 0x82184F18;
	}
	return 0x82184F18;
} // Block from 82184EC0h-82184F18h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82184F18h
// Function '?CanAddRedundantScalarOutput@Compiler@D3DXShader@@AAA_NPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184F18);
		  /* 82184F18h */ case    0:  		/* and R10, R10, R12 */
		/* 82184F18h case    0:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82184F18h case    0:*/		return 0x82184F1C;
		  /* 82184F1Ch */ case    1:  		/* sld R10, R26, R10 */
		/* 82184F1Ch case    1:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R26,regs.R10);
		/* 82184F1Ch case    1:*/		return 0x82184F20;
		  /* 82184F20h */ case    2:  		/* ldx R9, <#[R11 + R30]> */
		/* 82184F20h case    2:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184F20h case    2:*/		return 0x82184F24;
		  /* 82184F24h */ case    3:  		/* or R10, R10, R9 */
		/* 82184F24h case    3:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82184F24h case    3:*/		return 0x82184F28;
		  /* 82184F28h */ case    4:  		/* stdx R10, <#[R11 + R30]> */
		/* 82184F28h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82184F28h case    4:*/		return 0x82184F2C;
		  /* 82184F2Ch */ case    5:  		/* lwz R11, <#[R31 + 668]> */
		/* 82184F2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82184F2Ch case    5:*/		return 0x82184F30;
		  /* 82184F30h */ case    6:  		/* addi R28, R11, -1 */
		/* 82184F30h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFF);
		/* 82184F30h case    6:*/		return 0x82184F34;
		  /* 82184F34h */ case    7:  		/* cmplw CR6, R3, R28 */
		/* 82184F34h case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 82184F34h case    7:*/		return 0x82184F38;
		  /* 82184F38h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 82184F38h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82184F44;  }
		/* 82184F38h case    8:*/		return 0x82184F3C;
		  /* 82184F3Ch */ case    9:  		/* mr R3, R23 */
		/* 82184F3Ch case    9:*/		regs.R3 = regs.R23;
		/* 82184F3Ch case    9:*/		return 0x82184F40;
		  /* 82184F40h */ case   10:  		/* b 20 */
		/* 82184F40h case   10:*/		return 0x82184F54;
		/* 82184F40h case   10:*/		return 0x82184F44;
	}
	return 0x82184F44;
} // Block from 82184F18h-82184F44h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82184F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184F44);
		  /* 82184F44h */ case    0:  		/* addi R4, R3, 1 */
		/* 82184F44h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 82184F44h case    0:*/		return 0x82184F48;
		  /* 82184F48h */ case    1:  		/* lwz R3, <#[R29 + 4]> */
		/* 82184F48h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 82184F48h case    1:*/		return 0x82184F4C;
		  /* 82184F4Ch */ case    2:  		/* lwz R5, <#[R31 + 672]> */
		/* 82184F4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184F4Ch case    2:*/		return 0x82184F50;
		  /* 82184F50h */ case    3:  		/* bl -90104 */
		/* 82184F50h case    3:*/		regs.LR = 0x82184F54; return 0x8216EF58;
		/* 82184F50h case    3:*/		return 0x82184F54;
	}
	return 0x82184F54;
} // Block from 82184F44h-82184F54h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82184F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184F54);
		  /* 82184F54h */ case    0:  		/* cmplw CR6, R3, R28 */
		/* 82184F54h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 82184F54h case    0:*/		return 0x82184F58;
		  /* 82184F58h */ case    1:  		/* bc 4, CR6_GT, -88 */
		/* 82184F58h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82184F00;  }
		/* 82184F58h case    1:*/		return 0x82184F5C;
	}
	return 0x82184F5C;
} // Block from 82184F54h-82184F5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82184F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184F5C);
		  /* 82184F5Ch */ case    0:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184F5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184F5Ch case    0:*/		return 0x82184F60;
		  /* 82184F60h */ case    1:  		/* mr R4, R30 */
		/* 82184F60h case    1:*/		regs.R4 = regs.R30;
		/* 82184F60h case    1:*/		return 0x82184F64;
		  /* 82184F64h */ case    2:  		/* lwzu R3, <#[R29 + 4]> */
		/* 82184F64h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 82184F64h case    2:*/		return 0x82184F68;
		  /* 82184F68h */ case    3:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 82184F68h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 82184F68h case    3:*/		return 0x82184F6C;
		  /* 82184F6Ch */ case    4:  		/* bl -996796 */
		/* 82184F6Ch case    4:*/		regs.LR = 0x82184F70; return 0x820919B0;
		/* 82184F6Ch case    4:*/		return 0x82184F70;
		  /* 82184F70h */ case    5:  		/* lwz R11, <#[R24 + 192]> */
		/* 82184F70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000000C0) );
		/* 82184F70h case    5:*/		return 0x82184F74;
		  /* 82184F74h */ case    6:  		/* addi R25, R25, 1 */
		/* 82184F74h case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82184F74h case    6:*/		return 0x82184F78;
		  /* 82184F78h */ case    7:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82184F78h case    7:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82184F78h case    7:*/		return 0x82184F7C;
		  /* 82184F7Ch */ case    8:  		/* cmplw CR6, R25, R11 */
		/* 82184F7Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 82184F7Ch case    8:*/		return 0x82184F80;
		  /* 82184F80h */ case    9:  		/* bc 12, CR6_LT, -336 */
		/* 82184F80h case    9:*/		if ( regs.CR[6].lt ) { return 0x82184E30;  }
		/* 82184F80h case    9:*/		return 0x82184F84;
	}
	return 0x82184F84;
} // Block from 82184F5Ch-82184F84h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82184F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184F84);
		  /* 82184F84h */ case    0:  		/* lwz R24, <#[R24 + 200]> */
		/* 82184F84h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x000000C8) );
		/* 82184F84h case    0:*/		return 0x82184F88;
		  /* 82184F88h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 82184F88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82184F88h case    1:*/		return 0x82184F8C;
		  /* 82184F8Ch */ case    2:  		/* bc 4, CR6_EQ, -368 */
		/* 82184F8Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82184E1C;  }
		/* 82184F8Ch case    2:*/		return 0x82184F90;
	}
	return 0x82184F90;
} // Block from 82184F84h-82184F90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82184F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184F90);
		  /* 82184F90h */ case    0:  		/* lwz R11, <#[R31 + 672]> */
		/* 82184F90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82184F90h case    0:*/		return 0x82184F94;
		  /* 82184F94h */ case    1:  		/* li R6, 0 */
		/* 82184F94h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82184F94h case    1:*/		return 0x82184F98;
		  /* 82184F98h */ case    2:  		/* mr R4, R27 */
		/* 82184F98h case    2:*/		regs.R4 = regs.R27;
		/* 82184F98h case    2:*/		return 0x82184F9C;
		  /* 82184F9Ch */ case    3:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 82184F9Ch case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 82184F9Ch case    3:*/		return 0x82184FA0;
		  /* 82184FA0h */ case    4:  		/* mr R3, R31 */
		/* 82184FA0h case    4:*/		regs.R3 = regs.R31;
		/* 82184FA0h case    4:*/		return 0x82184FA4;
		  /* 82184FA4h */ case    5:  		/* bl -98644 */
		/* 82184FA4h case    5:*/		regs.LR = 0x82184FA8; return 0x8216CE50;
		/* 82184FA4h case    5:*/		return 0x82184FA8;
		  /* 82184FA8h */ case    6:  		/* addi R1, R1, 176 */
		/* 82184FA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82184FA8h case    6:*/		return 0x82184FAC;
		  /* 82184FACh */ case    7:  		/* b -998684 */
		/* 82184FACh case    7:*/		return 0x82091290;
		/* 82184FACh case    7:*/		return 0x82184FB0;
	}
	return 0x82184FB0;
} // Block from 82184F90h-82184FB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82184FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82184FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82184FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82184FB0);
		  /* 82184FB0h */ case    0:  		/* mfspr R12, LR */
		/* 82184FB0h case    0:*/		regs.R12 = regs.LR;
		/* 82184FB0h case    0:*/		return 0x82184FB4;
		  /* 82184FB4h */ case    1:  		/* bl -998760 */
		/* 82184FB4h case    1:*/		regs.LR = 0x82184FB8; return 0x8209124C;
		/* 82184FB4h case    1:*/		return 0x82184FB8;
		  /* 82184FB8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82184FB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82184FB8h case    2:*/		return 0x82184FBC;
		  /* 82184FBCh */ case    3:  		/* lwz R11, <#[R3 + 672]> */
		/* 82184FBCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002A0) );
		/* 82184FBCh case    3:*/		return 0x82184FC0;
		  /* 82184FC0h */ case    4:  		/* mr R31, R3 */
		/* 82184FC0h case    4:*/		regs.R31 = regs.R3;
		/* 82184FC0h case    4:*/		return 0x82184FC4;
		  /* 82184FC4h */ case    5:  		/* lwz R29, <#[R3 + 704]> */
		/* 82184FC4h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x000002C0) );
		/* 82184FC4h case    5:*/		return 0x82184FC8;
		  /* 82184FC8h */ case    6:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 82184FC8h case    6:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 82184FC8h case    6:*/		return 0x82184FCC;
		  /* 82184FCCh */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 82184FCCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82184FCCh case    7:*/		return 0x82184FD0;
		  /* 82184FD0h */ case    8:  		/* addi R30, R11, 208 */
		/* 82184FD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xD0);
		/* 82184FD0h case    8:*/		return 0x82184FD4;
		  /* 82184FD4h */ case    9:  		/* bc 12, CR6_EQ, 48 */
		/* 82184FD4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82185004;  }
		/* 82184FD4h case    9:*/		return 0x82184FD8;
		  /* 82184FD8h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 82184FD8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82184FD8h case   10:*/		return 0x82184FDC;
		  /* 82184FDCh */ case   11:  		/* li R5, 200 */
		/* 82184FDCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xC8);
		/* 82184FDCh case   11:*/		return 0x82184FE0;
		  /* 82184FE0h */ case   12:  		/* li R4, 0 */
		/* 82184FE0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82184FE0h case   12:*/		return 0x82184FE4;
		  /* 82184FE4h */ case   13:  		/* mr R3, R29 */
		/* 82184FE4h case   13:*/		regs.R3 = regs.R29;
		/* 82184FE4h case   13:*/		return 0x82184FE8;
		  /* 82184FE8h */ case   14:  		/* stw R11, <#[R31 + 704]> */
		/* 82184FE8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000002C0) );
		/* 82184FE8h case   14:*/		return 0x82184FEC;
		  /* 82184FECh */ case   15:  		/* bl -998572 */
		/* 82184FECh case   15:*/		regs.LR = 0x82184FF0; return 0x82091340;
		/* 82184FECh case   15:*/		return 0x82184FF0;
		  /* 82184FF0h */ case   16:  		/* addi R5, R30, -208 */
		/* 82184FF0h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFF30);
		/* 82184FF0h case   16:*/		return 0x82184FF4;
		  /* 82184FF4h */ case   17:  		/* li R4, 0 */
		/* 82184FF4h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82184FF4h case   17:*/		return 0x82184FF8;
		  /* 82184FF8h */ case   18:  		/* addi R3, R29, 208 */
		/* 82184FF8h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0xD0);
		/* 82184FF8h case   18:*/		return 0x82184FFC;
		  /* 82184FFCh */ case   19:  		/* bl -998588 */
		/* 82184FFCh case   19:*/		regs.LR = 0x82185000; return 0x82091340;
		/* 82184FFCh case   19:*/		return 0x82185000;
		  /* 82185000h */ case   20:  		/* b 36 */
		/* 82185000h case   20:*/		return 0x82185024;
		/* 82185000h case   20:*/		return 0x82185004;
	}
	return 0x82185004;
} // Block from 82184FB0h-82185004h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82185004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185004);
		  /* 82185004h */ case    0:  		/* li R5, 52 */
		/* 82185004h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x34);
		/* 82185004h case    0:*/		return 0x82185008;
		  /* 82185008h */ case    1:  		/* mr R4, R30 */
		/* 82185008h case    1:*/		regs.R4 = regs.R30;
		/* 82185008h case    1:*/		return 0x8218500C;
		  /* 8218500Ch */ case    2:  		/* mr R3, R31 */
		/* 8218500Ch case    2:*/		regs.R3 = regs.R31;
		/* 8218500Ch case    2:*/		return 0x82185010;
		  /* 82185010h */ case    3:  		/* bl -131032 */
		/* 82185010h case    3:*/		regs.LR = 0x82185014; return 0x82165038;
		/* 82185010h case    3:*/		return 0x82185014;
		  /* 82185014h */ case    4:  		/* lwz R11, <#[R31 + 696]> */
		/* 82185014h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 82185014h case    4:*/		return 0x82185018;
		  /* 82185018h */ case    5:  		/* mr R29, R3 */
		/* 82185018h case    5:*/		regs.R29 = regs.R3;
		/* 82185018h case    5:*/		return 0x8218501C;
		  /* 8218501Ch */ case    6:  		/* stw R11, <#[R3 + 200]> */
		/* 8218501Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000C8) );
		/* 8218501Ch case    6:*/		return 0x82185020;
		  /* 82185020h */ case    7:  		/* stw R3, <#[R31 + 696]> */
		/* 82185020h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000002B8) );
		/* 82185020h case    7:*/		return 0x82185024;
	}
	return 0x82185024;
} // Block from 82185004h-82185024h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82185024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185024);
		  /* 82185024h */ case    0:  		/* lwz R11, <#[R31 + 700]> */
		/* 82185024h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 82185024h case    0:*/		return 0x82185028;
		  /* 82185028h */ case    1:  		/* addi R27, R29, 208 */
		/* 82185028h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R29,0xD0);
		/* 82185028h case    1:*/		return 0x8218502C;
		  /* 8218502Ch */ case    2:  		/* addi R30, R29, 32 */
		/* 8218502Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 8218502Ch case    2:*/		return 0x82185030;
		  /* 82185030h */ case    3:  		/* addi R11, R11, 1 */
		/* 82185030h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82185030h case    3:*/		return 0x82185034;
		  /* 82185034h */ case    4:  		/* addi R26, R29, 16 */
		/* 82185034h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R29,0x10);
		/* 82185034h case    4:*/		return 0x82185038;
		  /* 82185038h */ case    5:  		/* stw R11, <#[R31 + 700]> */
		/* 82185038h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 82185038h case    5:*/		return 0x8218503C;
		  /* 8218503Ch */ case    6:  		/* li R25, 4 */
		/* 8218503Ch case    6:*/		cpu::op::li<0>(regs,&regs.R25,0x4);
		/* 8218503Ch case    6:*/		return 0x82185040;
		  /* 82185040h */ case    7:  		/* li R28, 0 */
		/* 82185040h case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82185040h case    7:*/		return 0x82185044;
		  /* 82185044h */ case    8:  		/* stw R27, <#[R26]> */
		/* 82185044h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 82185044h case    8:*/		return 0x82185048;
		  /* 82185048h */ case    9:  		/* lwz R11, <#[R31 + 672]> */
		/* 82185048h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185048h case    9:*/		return 0x8218504C;
		  /* 8218504Ch */ case   10:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 8218504Ch case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 8218504Ch case   10:*/		return 0x82185050;
		  /* 82185050h */ case   11:  		/* stw R31, <#[R30]> */
		/* 82185050h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 82185050h case   11:*/		return 0x82185054;
		  /* 82185054h */ case   12:  		/* add R27, R11, R27 */
		/* 82185054h case   12:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 82185054h case   12:*/		return 0x82185058;
		  /* 82185058h */ case   13:  		/* std R28, <#[R30 + 8]> */
		/* 82185058h case   13:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R30 + 0x00000008) );
		/* 82185058h case   13:*/		return 0x8218505C;
		  /* 8218505Ch */ case   14:  		/* std R28, <#[R30 + 16]> */
		/* 8218505Ch case   14:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R30 + 0x00000010) );
		/* 8218505Ch case   14:*/		return 0x82185060;
		  /* 82185060h */ case   15:  		/* std R28, <#[R30 + 24]> */
		/* 82185060h case   15:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R30 + 0x00000018) );
		/* 82185060h case   15:*/		return 0x82185064;
		  /* 82185064h */ case   16:  		/* std R28, <#[R30 + 32]> */
		/* 82185064h case   16:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R30 + 0x00000020) );
		/* 82185064h case   16:*/		return 0x82185068;
		  /* 82185068h */ case   17:  		/* lwz R11, <#[R31 + 792]> */
		/* 82185068h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000318) );
		/* 82185068h case   17:*/		return 0x8218506C;
		  /* 8218506Ch */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8218506Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218506Ch case   18:*/		return 0x82185070;
		  /* 82185070h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 82185070h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82185078;  }
		/* 82185070h case   19:*/		return 0x82185074;
		  /* 82185074h */ case   20:  		/* li R11, 32 */
		/* 82185074h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82185074h case   20:*/		return 0x82185078;
	}
	return 0x82185078;
} // Block from 82185024h-82185078h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82185078h
// Function '?AddToGroupComponent@Compiler@D3DXShader@@AAAXPAURegGroupInfo@2@IIW4Component@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185078);
		  /* 82185078h */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82185078h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82185078h case    0:*/		return 0x8218507C;
		  /* 8218507Ch */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 8218507Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x82185090;  }
		/* 8218507Ch case    1:*/		return 0x82185080;
		  /* 82185080h */ case    2:  		/* subfic R5, R11, 64 */
		/* 82185080h case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82185080h case    2:*/		return 0x82185084;
		  /* 82185084h */ case    3:  		/* mr R4, R11 */
		/* 82185084h case    3:*/		regs.R4 = regs.R11;
		/* 82185084h case    3:*/		return 0x82185088;
		  /* 82185088h */ case    4:  		/* mr R3, R30 */
		/* 82185088h case    4:*/		regs.R3 = regs.R30;
		/* 82185088h case    4:*/		return 0x8218508C;
		  /* 8218508Ch */ case    5:  		/* bl -89012 */
		/* 8218508Ch case    5:*/		regs.LR = 0x82185090; return 0x8216F4D8;
		/* 8218508Ch case    5:*/		return 0x82185090;
	}
	return 0x82185090;
} // Block from 82185078h-82185090h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82185090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185090);
		  /* 82185090h */ case    0:  		/* addic. R25, R25, -1 */
		/* 82185090h case    0:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 82185090h case    0:*/		return 0x82185094;
		  /* 82185094h */ case    1:  		/* addi R26, R26, 4 */
		/* 82185094h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82185094h case    1:*/		return 0x82185098;
		  /* 82185098h */ case    2:  		/* addi R30, R30, 40 */
		/* 82185098h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x28);
		/* 82185098h case    2:*/		return 0x8218509C;
		  /* 8218509Ch */ case    3:  		/* bc 4, CR0_EQ, -88 */
		/* 8218509Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82185044;  }
		/* 8218509Ch case    3:*/		return 0x821850A0;
		  /* 821850A0h */ case    4:  		/* mr R3, R29 */
		/* 821850A0h case    4:*/		regs.R3 = regs.R29;
		/* 821850A0h case    4:*/		return 0x821850A4;
		  /* 821850A4h */ case    5:  		/* addi R1, R1, 144 */
		/* 821850A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821850A4h case    5:*/		return 0x821850A8;
		  /* 821850A8h */ case    6:  		/* b -998924 */
		/* 821850A8h case    6:*/		return 0x8209129C;
		/* 821850A8h case    6:*/		return 0x821850AC;
		  /* 821850ACh */ case    7:  		/* nop */
		/* 821850ACh case    7:*/		cpu::op::nop();
		/* 821850ACh case    7:*/		return 0x821850B0;
	}
	return 0x821850B0;
} // Block from 82185090h-821850B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821850B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821850B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821850B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821850B0);
		  /* 821850B0h */ case    0:  		/* mfspr R12, LR */
		/* 821850B0h case    0:*/		regs.R12 = regs.LR;
		/* 821850B0h case    0:*/		return 0x821850B4;
		  /* 821850B4h */ case    1:  		/* bl -999052 */
		/* 821850B4h case    1:*/		regs.LR = 0x821850B8; return 0x82091228;
		/* 821850B4h case    1:*/		return 0x821850B8;
		  /* 821850B8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821850B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821850B8h case    2:*/		return 0x821850BC;
		  /* 821850BCh */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821850BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821850BCh case    3:*/		return 0x821850C0;
		  /* 821850C0h */ case    4:  		/* mr R31, R3 */
		/* 821850C0h case    4:*/		regs.R31 = regs.R3;
		/* 821850C0h case    4:*/		return 0x821850C4;
		  /* 821850C4h */ case    5:  		/* mr R21, R4 */
		/* 821850C4h case    5:*/		regs.R21 = regs.R4;
		/* 821850C4h case    5:*/		return 0x821850C8;
		  /* 821850C8h */ case    6:  		/* mr R17, R5 */
		/* 821850C8h case    6:*/		regs.R17 = regs.R5;
		/* 821850C8h case    6:*/		return 0x821850CC;
		  /* 821850CCh */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821850CCh case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821850CCh case    7:*/		return 0x821850D0;
		  /* 821850D0h */ case    8:  		/* bc 4, CR0_EQ, 1188 */
		/* 821850D0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82185574;  }
		/* 821850D0h case    8:*/		return 0x821850D4;
		  /* 821850D4h */ case    9:  		/* mr R19, R11 */
		/* 821850D4h case    9:*/		regs.R19 = regs.R11;
		/* 821850D4h case    9:*/		return 0x821850D8;
		  /* 821850D8h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821850D8h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821850D8h case   10:*/		return 0x821850DC;
		  /* 821850DCh */ case   11:  		/* bc 12, CR0_EQ, 1176 */
		/* 821850DCh case   11:*/		if ( regs.CR[0].eq ) { return 0x82185574;  }
		/* 821850DCh case   11:*/		return 0x821850E0;
		  /* 821850E0h */ case   12:  		/* rlwinm R16, R6, 0, 24, 31 */
		/* 821850E0h case   12:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R16,regs.R6);
		/* 821850E0h case   12:*/		return 0x821850E4;
		  /* 821850E4h */ case   13:  		/* li R22, 1 */
		/* 821850E4h case   13:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821850E4h case   13:*/		return 0x821850E8;
		  /* 821850E8h */ case   14:  		/* li R18, -1 */
		/* 821850E8h case   14:*/		cpu::op::li<0>(regs,&regs.R18,0xFFFFFFFF);
		/* 821850E8h case   14:*/		return 0x821850EC;
		  /* 821850ECh */ case   15:  		/* cmplwi CR6, R16, 0 */
		/* 821850ECh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821850ECh case   15:*/		return 0x821850F0;
		  /* 821850F0h */ case   16:  		/* bc 4, CR6_EQ, 12 */
		/* 821850F0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821850FC;  }
		/* 821850F0h case   16:*/		return 0x821850F4;
		  /* 821850F4h */ case   17:  		/* lwz R11, <#[R19 + 88]> */
		/* 821850F4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000058) );
		/* 821850F4h case   17:*/		return 0x821850F8;
		  /* 821850F8h */ case   18:  		/* stw R11, <#[R19 + 84]> */
		/* 821850F8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000054) );
		/* 821850F8h case   18:*/		return 0x821850FC;
	}
	return 0x821850FC;
} // Block from 821850B0h-821850FCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821850FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821850FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821850FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821850FC);
		  /* 821850FCh */ case    0:  		/* mr R5, R17 */
		/* 821850FCh case    0:*/		regs.R5 = regs.R17;
		/* 821850FCh case    0:*/		return 0x82185100;
		  /* 82185100h */ case    1:  		/* lwz R4, <#[R19 + 88]> */
		/* 82185100h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x00000058) );
		/* 82185100h case    1:*/		return 0x82185104;
		  /* 82185104h */ case    2:  		/* mr R3, R21 */
		/* 82185104h case    2:*/		regs.R3 = regs.R21;
		/* 82185104h case    2:*/		return 0x82185108;
		  /* 82185108h */ case    3:  		/* bl -997208 */
		/* 82185108h case    3:*/		regs.LR = 0x8218510C; return 0x820919B0;
		/* 82185108h case    3:*/		return 0x8218510C;
		  /* 8218510Ch */ case    4:  		/* li R4, 0 */
		/* 8218510Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218510Ch case    4:*/		return 0x82185110;
		  /* 82185110h */ case    5:  		/* mr R3, R21 */
		/* 82185110h case    5:*/		regs.R3 = regs.R21;
		/* 82185110h case    5:*/		return 0x82185114;
		  /* 82185114h */ case    6:  		/* lwz R5, <#[R31 + 672]> */
		/* 82185114h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185114h case    6:*/		return 0x82185118;
		  /* 82185118h */ case    7:  		/* bl -90560 */
		/* 82185118h case    7:*/		regs.LR = 0x8218511C; return 0x8216EF58;
		/* 82185118h case    7:*/		return 0x8218511C;
		  /* 8218511Ch */ case    8:  		/* lwz R11, <#[R31 + 668]> */
		/* 8218511Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 8218511Ch case    8:*/		return 0x82185120;
		  /* 82185120h */ case    9:  		/* addi R11, R11, -1 */
		/* 82185120h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82185120h case    9:*/		return 0x82185124;
		  /* 82185124h */ case   10:  		/* cmplw CR6, R3, R11 */
		/* 82185124h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82185124h case   10:*/		return 0x82185128;
		  /* 82185128h */ case   11:  		/* bc 12, CR6_GT, 180 */
		/* 82185128h case   11:*/		if ( regs.CR[6].gt ) { return 0x821851DC;  }
		/* 82185128h case   11:*/		return 0x8218512C;
		  /* 8218512Ch */ case   12:  		/* lwz R9, <#[R31 + 672]> */
		/* 8218512Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002A0) );
		/* 8218512Ch case   12:*/		return 0x82185130;
		  /* 82185130h */ case   13:  		/* lwz R11, <#[R31 + 684]> */
		/* 82185130h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002AC) );
		/* 82185130h case   13:*/		return 0x82185134;
		  /* 82185134h */ case   14:  		/* mullw R10, R9, R3 */
		/* 82185134h case   14:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R9,regs.R3);
		/* 82185134h case   14:*/		return 0x82185138;
		  /* 82185138h */ case   15:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82185138h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82185138h case   15:*/		return 0x8218513C;
		  /* 8218513Ch */ case   16:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 8218513Ch case   16:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 8218513Ch case   16:*/		return 0x82185140;
		  /* 82185140h */ case   17:  		/* add R11, R10, R11 */
		/* 82185140h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82185140h case   17:*/		return 0x82185144;
		  /* 82185144h */ case   18:  		/* add R10, R9, R11 */
		/* 82185144h case   18:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 82185144h case   18:*/		return 0x82185148;
		  /* 82185148h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 82185148h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82185148h case   19:*/		return 0x8218514C;
		  /* 8218514Ch */ case   20:  		/* bc 4, CR6_LT, 52 */
		/* 8218514Ch case   20:*/		if ( !regs.CR[6].lt ) { return 0x82185180;  }
		/* 8218514Ch case   20:*/		return 0x82185150;
		  /* 82185150h */ case   21:  		/* subf R10, R11, R10 */
		/* 82185150h case   21:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82185150h case   21:*/		return 0x82185154;
		  /* 82185154h */ case   22:  		/* addi R11, R11, -8 */
		/* 82185154h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 82185154h case   22:*/		return 0x82185158;
		  /* 82185158h */ case   23:  		/* addi R10, R10, -1 */
		/* 82185158h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82185158h case   23:*/		return 0x8218515C;
		  /* 8218515Ch */ case   24:  		/* addi R9, R21, -8 */
		/* 8218515Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R21,0xFFFFFFF8);
		/* 8218515Ch case   24:*/		return 0x82185160;
		  /* 82185160h */ case   25:  		/* rlwinm R10, R10, 29, 3, 31 */
		/* 82185160h case   25:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R10);
		/* 82185160h case   25:*/		return 0x82185164;
		  /* 82185164h */ case   26:  		/* addi R10, R10, 1 */
		/* 82185164h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82185164h case   26:*/		return 0x82185168;
		  /* 82185168h */ case   27:  		/* mtspr CTR, R10 */
		/* 82185168h case   27:*/		regs.CTR = regs.R10;
		/* 82185168h case   27:*/		return 0x8218516C;
		  /* 8218516Ch */ case   28:  		/* ld R8, <#[R11 + 8]> */
		/* 8218516Ch case   28:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8218516Ch case   28:*/		return 0x82185170;
		  /* 82185170h */ case   29:  		/* ldu R10, <#[R9 + 8]> */
		/* 82185170h case   29:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82185170h case   29:*/		return 0x82185174;
		  /* 82185174h */ case   30:  		/* or R10, R8, R10 */
		/* 82185174h case   30:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82185174h case   30:*/		return 0x82185178;
		  /* 82185178h */ case   31:  		/* stdu R10, <#[R11 + 8]> */
		/* 82185178h case   31:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82185178h case   31:*/		return 0x8218517C;
		  /* 8218517Ch */ case   32:  		/* bc 16, CR0_LT, -16 */
		/* 8218517Ch case   32:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218516C;  }
		/* 8218517Ch case   32:*/		return 0x82185180;
	}
	return 0x82185180;
} // Block from 821850FCh-82185180h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82185180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185180);
		  /* 82185180h */ case    0:  		/* lwz R9, <#[R31 + 672]> */
		/* 82185180h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185180h case    0:*/		return 0x82185184;
		  /* 82185184h */ case    1:  		/* rlwinm R10, R3, 29, 3, 28 */
		/* 82185184h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R3);
		/* 82185184h case    1:*/		return 0x82185188;
		  /* 82185188h */ case    2:  		/* lwz R11, <#[R31 + 684]> */
		/* 82185188h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002AC) );
		/* 82185188h case    2:*/		return 0x8218518C;
		  /* 8218518Ch */ case    3:  		/* rldicl R8, R3, 0, 58 */
		/* 8218518Ch case    3:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R8,regs.R3);
		/* 8218518Ch case    3:*/		return 0x82185190;
		  /* 82185190h */ case    4:  		/* mullw R9, R9, R3 */
		/* 82185190h case    4:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 82185190h case    4:*/		return 0x82185194;
		  /* 82185194h */ case    5:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82185194h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82185194h case    5:*/		return 0x82185198;
		  /* 82185198h */ case    6:  		/* sld R8, R22, R8 */
		/* 82185198h case    6:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R22,regs.R8);
		/* 82185198h case    6:*/		return 0x8218519C;
		  /* 8218519Ch */ case    7:  		/* add R11, R9, R11 */
		/* 8218519Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8218519Ch case    7:*/		return 0x821851A0;
		  /* 821851A0h */ case    8:  		/* ldx R9, <#[R10 + R11]> */
		/* 821851A0h case    8:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821851A0h case    8:*/		return 0x821851A4;
		  /* 821851A4h */ case    9:  		/* subf R9, R8, R9 */
		/* 821851A4h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821851A4h case    9:*/		return 0x821851A8;
		  /* 821851A8h */ case   10:  		/* stdx R9, <#[R10 + R11]> */
		/* 821851A8h case   10:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821851A8h case   10:*/		return 0x821851AC;
		  /* 821851ACh */ case   11:  		/* lwz R11, <#[R31 + 668]> */
		/* 821851ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 821851ACh case   11:*/		return 0x821851B0;
		  /* 821851B0h */ case   12:  		/* addi R30, R11, -1 */
		/* 821851B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFF);
		/* 821851B0h case   12:*/		return 0x821851B4;
		  /* 821851B4h */ case   13:  		/* cmplw CR6, R3, R30 */
		/* 821851B4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821851B4h case   13:*/		return 0x821851B8;
		  /* 821851B8h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 821851B8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821851C4;  }
		/* 821851B8h case   14:*/		return 0x821851BC;
		  /* 821851BCh */ case   15:  		/* mr R3, R18 */
		/* 821851BCh case   15:*/		regs.R3 = regs.R18;
		/* 821851BCh case   15:*/		return 0x821851C0;
		  /* 821851C0h */ case   16:  		/* b 20 */
		/* 821851C0h case   16:*/		return 0x821851D4;
		/* 821851C0h case   16:*/		return 0x821851C4;
	}
	return 0x821851C4;
} // Block from 82185180h-821851C4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821851C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821851C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821851C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821851C4);
		  /* 821851C4h */ case    0:  		/* addi R4, R3, 1 */
		/* 821851C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 821851C4h case    0:*/		return 0x821851C8;
		  /* 821851C8h */ case    1:  		/* lwz R5, <#[R31 + 672]> */
		/* 821851C8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 821851C8h case    1:*/		return 0x821851CC;
		  /* 821851CCh */ case    2:  		/* mr R3, R21 */
		/* 821851CCh case    2:*/		regs.R3 = regs.R21;
		/* 821851CCh case    2:*/		return 0x821851D0;
		  /* 821851D0h */ case    3:  		/* bl -90744 */
		/* 821851D0h case    3:*/		regs.LR = 0x821851D4; return 0x8216EF58;
		/* 821851D0h case    3:*/		return 0x821851D4;
	}
	return 0x821851D4;
} // Block from 821851C4h-821851D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821851D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821851D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821851D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821851D4);
		  /* 821851D4h */ case    0:  		/* cmplw CR6, R3, R30 */
		/* 821851D4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821851D4h case    0:*/		return 0x821851D8;
		  /* 821851D8h */ case    1:  		/* bc 4, CR6_GT, -172 */
		/* 821851D8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8218512C;  }
		/* 821851D8h case    1:*/		return 0x821851DC;
	}
	return 0x821851DC;
} // Block from 821851D4h-821851DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821851DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821851DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821851DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821851DC);
		  /* 821851DCh */ case    0:  		/* lwz R11, <#[R19 + 28]> */
		/* 821851DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000001C) );
		/* 821851DCh case    0:*/		return 0x821851E0;
		  /* 821851E0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821851E0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821851E0h case    1:*/		return 0x821851E4;
		  /* 821851E4h */ case    2:  		/* bc 4, CR0_EQ, 884 */
		/* 821851E4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82185558;  }
		/* 821851E4h case    2:*/		return 0x821851E8;
		  /* 821851E8h */ case    3:  		/* lwz R11, <#[R19 + 24]> */
		/* 821851E8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000018) );
		/* 821851E8h case    3:*/		return 0x821851EC;
		  /* 821851ECh */ case    4:  		/* b 864 */
		/* 821851ECh case    4:*/		return 0x8218554C;
		/* 821851ECh case    4:*/		return 0x821851F0;
		  /* 821851F0h */ case    5:  		/* lwz R11, <#[R20 + 8]> */
		/* 821851F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821851F0h case    5:*/		return 0x821851F4;
		  /* 821851F4h */ case    6:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821851F4h case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821851F4h case    6:*/		return 0x821851F8;
		  /* 821851F8h */ case    7:  		/* bc 12, CR0_EQ, 448 */
		/* 821851F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821853B8;  }
		/* 821851F8h case    7:*/		return 0x821851FC;
		  /* 821851FCh */ case    8:  		/* rlwinm R25, R11, 31, 28, 31 */
		/* 821851FCh case    8:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R25,regs.R11);
		/* 821851FCh case    8:*/		return 0x82185200;
		  /* 82185200h */ case    9:  		/* cmplwi CR6, R25, 0 */
		/* 82185200h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82185200h case    9:*/		return 0x82185204;
		  /* 82185204h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 82185204h case   10:*/		if ( regs.CR[6].eq ) { return 0x82185228;  }
		/* 82185204h case   10:*/		return 0x82185208;
		  /* 82185208h */ case   11:  		/* addi R11, R25, -1 */
		/* 82185208h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 82185208h case   11:*/		return 0x8218520C;
		  /* 8218520Ch */ case   12:  		/* lhz R10, <#[R20 + 18]> */
		/* 8218520Ch case   12:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000012) );
		/* 8218520Ch case   12:*/		return 0x82185210;
		  /* 82185210h */ case   13:  		/* andc R11, R25, R11 */
		/* 82185210h case   13:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 82185210h case   13:*/		return 0x82185214;
		  /* 82185214h */ case   14:  		/* cntlzw R11, R11 */
		/* 82185214h case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82185214h case   14:*/		return 0x82185218;
		  /* 82185218h */ case   15:  		/* subf R11, R11, R10 */
		/* 82185218h case   15:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82185218h case   15:*/		return 0x8218521C;
		  /* 8218521Ch */ case   16:  		/* addi R26, R11, 31 */
		/* 8218521Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1F);
		/* 8218521Ch case   16:*/		return 0x82185220;
		  /* 82185220h */ case   17:  		/* mr R11, R26 */
		/* 82185220h case   17:*/		regs.R11 = regs.R26;
		/* 82185220h case   17:*/		return 0x82185224;
		  /* 82185224h */ case   18:  		/* b 12 */
		/* 82185224h case   18:*/		return 0x82185230;
		/* 82185224h case   18:*/		return 0x82185228;
	}
	return 0x82185228;
} // Block from 821851DCh-82185228h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82185228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185228);
		  /* 82185228h */ case    0:  		/* li R26, 0 */
		/* 82185228h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82185228h case    0:*/		return 0x8218522C;
		  /* 8218522Ch */ case    1:  		/* li R11, 0 */
		/* 8218522Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218522Ch case    1:*/		return 0x82185230;
	}
	return 0x82185230;
} // Block from 82185228h-82185230h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82185230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185230);
		  /* 82185230h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82185230h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82185230h case    0:*/		return 0x82185234;
		  /* 82185234h */ case    1:  		/* bc 12, CR6_EQ, 388 */
		/* 82185234h case    1:*/		if ( regs.CR[6].eq ) { return 0x821853B8;  }
		/* 82185234h case    1:*/		return 0x82185238;
		  /* 82185238h */ case    2:  		/* mr R4, R26 */
		/* 82185238h case    2:*/		regs.R4 = regs.R26;
		/* 82185238h case    2:*/		return 0x8218523C;
		  /* 8218523Ch */ case    3:  		/* mr R3, R31 */
		/* 8218523Ch case    3:*/		regs.R3 = regs.R31;
		/* 8218523Ch case    3:*/		return 0x82185240;
		  /* 82185240h */ case    4:  		/* bl -6368 */
		/* 82185240h case    4:*/		regs.LR = 0x82185244; return 0x82183960;
		/* 82185240h case    4:*/		return 0x82185244;
		  /* 82185244h */ case    5:  		/* rlwinm R30, R3, 29, 3, 28 */
		/* 82185244h case    5:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R30,regs.R3);
		/* 82185244h case    5:*/		return 0x82185248;
		  /* 82185248h */ case    6:  		/* rldicl R11, R3, 0, 58 */
		/* 82185248h case    6:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R11,regs.R3);
		/* 82185248h case    6:*/		return 0x8218524C;
		  /* 8218524Ch */ case    7:  		/* mr R29, R3 */
		/* 8218524Ch case    7:*/		regs.R29 = regs.R3;
		/* 8218524Ch case    7:*/		return 0x82185250;
		  /* 82185250h */ case    8:  		/* sld R27, R22, R11 */
		/* 82185250h case    8:*/		cpu::op::sld<0>(regs,&regs.R27,regs.R22,regs.R11);
		/* 82185250h case    8:*/		return 0x82185254;
		  /* 82185254h */ case    9:  		/* ldx R11, <#[R30 + R21]> */
		/* 82185254h case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + regs.R21 + 0x00000000) );
		/* 82185254h case    9:*/		return 0x82185258;
		  /* 82185258h */ case   10:  		/* andc R11, R11, R27 */
		/* 82185258h case   10:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82185258h case   10:*/		return 0x8218525C;
		  /* 8218525Ch */ case   11:  		/* stdx R11, <#[R30 + R21]> */
		/* 8218525Ch case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + regs.R21 + 0x00000000) );
		/* 8218525Ch case   11:*/		return 0x82185260;
		  /* 82185260h */ case   12:  		/* lwz R11, <#[R20 + 8]> */
		/* 82185260h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 82185260h case   12:*/		return 0x82185264;
		  /* 82185264h */ case   13:  		/* rlwinm R28, R11, 31, 28, 31 */
		/* 82185264h case   13:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R28,regs.R11);
		/* 82185264h case   13:*/		return 0x82185268;
		  /* 82185268h */ case   14:  		/* cmplwi CR6, R28, 0 */
		/* 82185268h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82185268h case   14:*/		return 0x8218526C;
		  /* 8218526Ch */ case   15:  		/* bc 12, CR6_EQ, 36 */
		/* 8218526Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82185290;  }
		/* 8218526Ch case   15:*/		return 0x82185270;
		  /* 82185270h */ case   16:  		/* addi R11, R28, -1 */
		/* 82185270h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFF);
		/* 82185270h case   16:*/		return 0x82185274;
		  /* 82185274h */ case   17:  		/* lhz R10, <#[R20 + 18]> */
		/* 82185274h case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000012) );
		/* 82185274h case   17:*/		return 0x82185278;
		  /* 82185278h */ case   18:  		/* andc R11, R28, R11 */
		/* 82185278h case   18:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82185278h case   18:*/		return 0x8218527C;
		  /* 8218527Ch */ case   19:  		/* cntlzw R11, R11 */
		/* 8218527Ch case   19:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8218527Ch case   19:*/		return 0x82185280;
		  /* 82185280h */ case   20:  		/* subf R11, R11, R10 */
		/* 82185280h case   20:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82185280h case   20:*/		return 0x82185284;
		  /* 82185284h */ case   21:  		/* addi R4, R11, 31 */
		/* 82185284h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1F);
		/* 82185284h case   21:*/		return 0x82185288;
		  /* 82185288h */ case   22:  		/* mr R11, R4 */
		/* 82185288h case   22:*/		regs.R11 = regs.R4;
		/* 82185288h case   22:*/		return 0x8218528C;
		  /* 8218528Ch */ case   23:  		/* b 12 */
		/* 8218528Ch case   23:*/		return 0x82185298;
		/* 8218528Ch case   23:*/		return 0x82185290;
	}
	return 0x82185290;
} // Block from 82185230h-82185290h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82185290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185290);
		  /* 82185290h */ case    0:  		/* li R4, 0 */
		/* 82185290h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82185290h case    0:*/		return 0x82185294;
		  /* 82185294h */ case    1:  		/* li R11, 0 */
		/* 82185294h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82185294h case    1:*/		return 0x82185298;
	}
	return 0x82185298;
} // Block from 82185290h-82185298h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82185298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185298);
		  /* 82185298h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82185298h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82185298h case    0:*/		return 0x8218529C;
		  /* 8218529Ch */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 8218529Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8218530C;  }
		/* 8218529Ch case    1:*/		return 0x821852A0;
		  /* 821852A0h */ case    2:  		/* cmplw CR6, R4, R26 */
		/* 821852A0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R26);
		/* 821852A0h case    2:*/		return 0x821852A4;
		  /* 821852A4h */ case    3:  		/* bc 4, CR6_GT, 88 */
		/* 821852A4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821852FC;  }
		/* 821852A4h case    3:*/		return 0x821852A8;
		  /* 821852A8h */ case    4:  		/* mr R3, R31 */
		/* 821852A8h case    4:*/		regs.R3 = regs.R31;
		/* 821852A8h case    4:*/		return 0x821852AC;
		  /* 821852ACh */ case    5:  		/* bl -6476 */
		/* 821852ACh case    5:*/		regs.LR = 0x821852B0; return 0x82183960;
		/* 821852ACh case    5:*/		return 0x821852B0;
		  /* 821852B0h */ case    6:  		/* lwz R10, <#[R31 + 672]> */
		/* 821852B0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002A0) );
		/* 821852B0h case    6:*/		return 0x821852B4;
		  /* 821852B4h */ case    7:  		/* lwz R11, <#[R31 + 684]> */
		/* 821852B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002AC) );
		/* 821852B4h case    7:*/		return 0x821852B8;
		  /* 821852B8h */ case    8:  		/* mullw R10, R10, R29 */
		/* 821852B8h case    8:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821852B8h case    8:*/		return 0x821852BC;
		  /* 821852BCh */ case    9:  		/* rlwinm R9, R10, 3, 0, 28 */
		/* 821852BCh case    9:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R10);
		/* 821852BCh case    9:*/		return 0x821852C0;
		  /* 821852C0h */ case   10:  		/* rlwinm R10, R3, 29, 3, 28 */
		/* 821852C0h case   10:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R3);
		/* 821852C0h case   10:*/		return 0x821852C4;
		  /* 821852C4h */ case   11:  		/* add R11, R9, R11 */
		/* 821852C4h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821852C4h case   11:*/		return 0x821852C8;
		  /* 821852C8h */ case   12:  		/* rldicl R9, R3, 0, 58 */
		/* 821852C8h case   12:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R3);
		/* 821852C8h case   12:*/		return 0x821852CC;
		  /* 821852CCh */ case   13:  		/* sld R9, R22, R9 */
		/* 821852CCh case   13:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 821852CCh case   13:*/		return 0x821852D0;
		  /* 821852D0h */ case   14:  		/* ldx R8, <#[R10 + R11]> */
		/* 821852D0h case   14:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821852D0h case   14:*/		return 0x821852D4;
		  /* 821852D4h */ case   15:  		/* or R9, R9, R8 */
		/* 821852D4h case   15:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821852D4h case   15:*/		return 0x821852D8;
		  /* 821852D8h */ case   16:  		/* stdx R9, <#[R10 + R11]> */
		/* 821852D8h case   16:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821852D8h case   16:*/		return 0x821852DC;
		  /* 821852DCh */ case   17:  		/* lwz R10, <#[R31 + 684]> */
		/* 821852DCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002AC) );
		/* 821852DCh case   17:*/		return 0x821852E0;
		  /* 821852E0h */ case   18:  		/* lwz R11, <#[R31 + 672]> */
		/* 821852E0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 821852E0h case   18:*/		return 0x821852E4;
		  /* 821852E4h */ case   19:  		/* mullw R11, R11, R3 */
		/* 821852E4h case   19:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821852E4h case   19:*/		return 0x821852E8;
		  /* 821852E8h */ case   20:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821852E8h case   20:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821852E8h case   20:*/		return 0x821852EC;
		  /* 821852ECh */ case   21:  		/* add R11, R11, R10 */
		/* 821852ECh case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821852ECh case   21:*/		return 0x821852F0;
		  /* 821852F0h */ case   22:  		/* ldx R10, <#[R30 + R11]> */
		/* 821852F0h case   22:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821852F0h case   22:*/		return 0x821852F4;
		  /* 821852F4h */ case   23:  		/* or R10, R27, R10 */
		/* 821852F4h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821852F4h case   23:*/		return 0x821852F8;
	}
	return 0x821852F8;
} // Block from 82185298h-821852F8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821852F8h
// Function '?StoreDefMapping@Compiler@D3DXShader@@AAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821852F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821852F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821852F8);
		  /* 821852F8h */ case    0:  		/* stdx R10, <#[R30 + R11]> */
		/* 821852F8h case    0:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821852F8h case    0:*/		return 0x821852FC;
	}
	return 0x821852FC;
} // Block from 821852F8h-821852FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821852FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821852FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821852FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821852FC);
		  /* 821852FCh */ case    0:  		/* addi R11, R28, -1 */
		/* 821852FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFF);
		/* 821852FCh case    0:*/		return 0x82185300;
		  /* 82185300h */ case    1:  		/* andc R11, R28, R11 */
		/* 82185300h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82185300h case    1:*/		return 0x82185304;
		  /* 82185304h */ case    2:  		/* subf R28, R11, R28 */
		/* 82185304h case    2:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 82185304h case    2:*/		return 0x82185308;
		  /* 82185308h */ case    3:  		/* b -160 */
		/* 82185308h case    3:*/		return 0x82185268;
		/* 82185308h case    3:*/		return 0x8218530C;
	}
	return 0x8218530C;
} // Block from 821852FCh-8218530Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218530Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218530C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218530C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218530C);
		  /* 8218530Ch */ case    0:  		/* li R4, 0 */
		/* 8218530Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218530Ch case    0:*/		return 0x82185310;
		  /* 82185310h */ case    1:  		/* lwz R5, <#[R31 + 672]> */
		/* 82185310h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185310h case    1:*/		return 0x82185314;
		  /* 82185314h */ case    2:  		/* mr R3, R21 */
		/* 82185314h case    2:*/		regs.R3 = regs.R21;
		/* 82185314h case    2:*/		return 0x82185318;
		  /* 82185318h */ case    3:  		/* bl -91072 */
		/* 82185318h case    3:*/		regs.LR = 0x8218531C; return 0x8216EF58;
		/* 82185318h case    3:*/		return 0x8218531C;
		  /* 8218531Ch */ case    4:  		/* lwz R11, <#[R31 + 668]> */
		/* 8218531Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 8218531Ch case    4:*/		return 0x82185320;
		  /* 82185320h */ case    5:  		/* addi R11, R11, -1 */
		/* 82185320h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82185320h case    5:*/		return 0x82185324;
		  /* 82185324h */ case    6:  		/* cmplw CR6, R3, R11 */
		/* 82185324h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82185324h case    6:*/		return 0x82185328;
		  /* 82185328h */ case    7:  		/* bc 12, CR6_GT, 128 */
		/* 82185328h case    7:*/		if ( regs.CR[6].gt ) { return 0x821853A8;  }
		/* 82185328h case    7:*/		return 0x8218532C;
		  /* 8218532Ch */ case    8:  		/* lwz R11, <#[R31 + 672]> */
		/* 8218532Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 8218532Ch case    8:*/		return 0x82185330;
		  /* 82185330h */ case    9:  		/* rlwinm R10, R3, 29, 3, 28 */
		/* 82185330h case    9:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R3);
		/* 82185330h case    9:*/		return 0x82185334;
		  /* 82185334h */ case   10:  		/* lwz R9, <#[R31 + 684]> */
		/* 82185334h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002AC) );
		/* 82185334h case   10:*/		return 0x82185338;
		  /* 82185338h */ case   11:  		/* rldicl R8, R3, 0, 58 */
		/* 82185338h case   11:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R8,regs.R3);
		/* 82185338h case   11:*/		return 0x8218533C;
		  /* 8218533Ch */ case   12:  		/* mullw R11, R11, R29 */
		/* 8218533Ch case   12:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8218533Ch case   12:*/		return 0x82185340;
		  /* 82185340h */ case   13:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82185340h case   13:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82185340h case   13:*/		return 0x82185344;
		  /* 82185344h */ case   14:  		/* sld R8, R22, R8 */
		/* 82185344h case   14:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R22,regs.R8);
		/* 82185344h case   14:*/		return 0x82185348;
		  /* 82185348h */ case   15:  		/* add R11, R11, R9 */
		/* 82185348h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82185348h case   15:*/		return 0x8218534C;
		  /* 8218534Ch */ case   16:  		/* ldx R9, <#[R10 + R11]> */
		/* 8218534Ch case   16:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218534Ch case   16:*/		return 0x82185350;
		  /* 82185350h */ case   17:  		/* or R9, R8, R9 */
		/* 82185350h case   17:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82185350h case   17:*/		return 0x82185354;
		  /* 82185354h */ case   18:  		/* stdx R9, <#[R10 + R11]> */
		/* 82185354h case   18:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82185354h case   18:*/		return 0x82185358;
		  /* 82185358h */ case   19:  		/* lwz R10, <#[R31 + 684]> */
		/* 82185358h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002AC) );
		/* 82185358h case   19:*/		return 0x8218535C;
		  /* 8218535Ch */ case   20:  		/* lwz R11, <#[R31 + 672]> */
		/* 8218535Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 8218535Ch case   20:*/		return 0x82185360;
		  /* 82185360h */ case   21:  		/* mullw R11, R11, R3 */
		/* 82185360h case   21:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82185360h case   21:*/		return 0x82185364;
		  /* 82185364h */ case   22:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82185364h case   22:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82185364h case   22:*/		return 0x82185368;
		  /* 82185368h */ case   23:  		/* add R11, R11, R10 */
		/* 82185368h case   23:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82185368h case   23:*/		return 0x8218536C;
		  /* 8218536Ch */ case   24:  		/* ldx R10, <#[R30 + R11]> */
		/* 8218536Ch case   24:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8218536Ch case   24:*/		return 0x82185370;
		  /* 82185370h */ case   25:  		/* or R10, R27, R10 */
		/* 82185370h case   25:*/		cpu::op::or<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 82185370h case   25:*/		return 0x82185374;
		  /* 82185374h */ case   26:  		/* stdx R10, <#[R30 + R11]> */
		/* 82185374h case   26:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82185374h case   26:*/		return 0x82185378;
		  /* 82185378h */ case   27:  		/* lwz R11, <#[R31 + 668]> */
		/* 82185378h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82185378h case   27:*/		return 0x8218537C;
		  /* 8218537Ch */ case   28:  		/* addi R28, R11, -1 */
		/* 8218537Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFF);
		/* 8218537Ch case   28:*/		return 0x82185380;
		  /* 82185380h */ case   29:  		/* cmplw CR6, R3, R28 */
		/* 82185380h case   29:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 82185380h case   29:*/		return 0x82185384;
		  /* 82185384h */ case   30:  		/* bc 4, CR6_EQ, 12 */
		/* 82185384h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82185390;  }
		/* 82185384h case   30:*/		return 0x82185388;
		  /* 82185388h */ case   31:  		/* mr R3, R18 */
		/* 82185388h case   31:*/		regs.R3 = regs.R18;
		/* 82185388h case   31:*/		return 0x8218538C;
		  /* 8218538Ch */ case   32:  		/* b 20 */
		/* 8218538Ch case   32:*/		return 0x821853A0;
		/* 8218538Ch case   32:*/		return 0x82185390;
	}
	return 0x82185390;
} // Block from 8218530Ch-82185390h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82185390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185390);
		  /* 82185390h */ case    0:  		/* addi R4, R3, 1 */
		/* 82185390h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 82185390h case    0:*/		return 0x82185394;
		  /* 82185394h */ case    1:  		/* lwz R5, <#[R31 + 672]> */
		/* 82185394h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185394h case    1:*/		return 0x82185398;
		  /* 82185398h */ case    2:  		/* mr R3, R21 */
		/* 82185398h case    2:*/		regs.R3 = regs.R21;
		/* 82185398h case    2:*/		return 0x8218539C;
		  /* 8218539Ch */ case    3:  		/* bl -91204 */
		/* 8218539Ch case    3:*/		regs.LR = 0x821853A0; return 0x8216EF58;
		/* 8218539Ch case    3:*/		return 0x821853A0;
	}
	return 0x821853A0;
} // Block from 82185390h-821853A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821853A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821853A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821853A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821853A0);
		  /* 821853A0h */ case    0:  		/* cmplw CR6, R3, R28 */
		/* 821853A0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 821853A0h case    0:*/		return 0x821853A4;
		  /* 821853A4h */ case    1:  		/* bc 4, CR6_GT, -120 */
		/* 821853A4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8218532C;  }
		/* 821853A4h case    1:*/		return 0x821853A8;
	}
	return 0x821853A8;
} // Block from 821853A0h-821853A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821853A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821853A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821853A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821853A8);
		  /* 821853A8h */ case    0:  		/* addi R11, R25, -1 */
		/* 821853A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821853A8h case    0:*/		return 0x821853AC;
		  /* 821853ACh */ case    1:  		/* andc R11, R25, R11 */
		/* 821853ACh case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821853ACh case    1:*/		return 0x821853B0;
		  /* 821853B0h */ case    2:  		/* subf R25, R11, R25 */
		/* 821853B0h case    2:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 821853B0h case    2:*/		return 0x821853B4;
		  /* 821853B4h */ case    3:  		/* b -436 */
		/* 821853B4h case    3:*/		return 0x82185200;
		/* 821853B4h case    3:*/		return 0x821853B8;
	}
	return 0x821853B8;
} // Block from 821853A8h-821853B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821853B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821853B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821853B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821853B8);
		  /* 821853B8h */ case    0:  		/* lwz R23, <#[R20]> */
		/* 821853B8h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R20 + 0x00000000) );
		/* 821853B8h case    0:*/		return 0x821853BC;
		  /* 821853BCh */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 821853BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821853BCh case    1:*/		return 0x821853C0;
		  /* 821853C0h */ case    2:  		/* bc 12, CR6_EQ, 380 */
		/* 821853C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218553C;  }
		/* 821853C0h case    2:*/		return 0x821853C4;
		  /* 821853C4h */ case    3:  		/* lwz R11, <#[R23]> */
		/* 821853C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821853C4h case    3:*/		return 0x821853C8;
		  /* 821853C8h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821853C8h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821853C8h case    4:*/		return 0x821853CC;
		  /* 821853CCh */ case    5:  		/* bc 12, CR0_EQ, 360 */
		/* 821853CCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82185534;  }
		/* 821853CCh case    5:*/		return 0x821853D0;
		  /* 821853D0h */ case    6:  		/* lwz R11, <#[R23 + 12]> */
		/* 821853D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821853D0h case    6:*/		return 0x821853D4;
		  /* 821853D4h */ case    7:  		/* lwz R10, <#[R11 + 8]> */
		/* 821853D4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821853D4h case    7:*/		return 0x821853D8;
		  /* 821853D8h */ case    8:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821853D8h case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821853D8h case    8:*/		return 0x821853DC;
		  /* 821853DCh */ case    9:  		/* bc 12, CR0_EQ, 344 */
		/* 821853DCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82185534;  }
		/* 821853DCh case    9:*/		return 0x821853E0;
		  /* 821853E0h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821853E0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821853E0h case   10:*/		return 0x821853E4;
		  /* 821853E4h */ case   11:  		/* rlwinm R11, R10, 0, 16, 31 */
		/* 821853E4h case   11:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R10);
		/* 821853E4h case   11:*/		return 0x821853E8;
		  /* 821853E8h */ case   12:  		/* rlwinm R10, R10, 16, 29, 31 */
		/* 821853E8h case   12:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R10);
		/* 821853E8h case   12:*/		return 0x821853EC;
		  /* 821853ECh */ case   13:  		/* mr R30, R11 */
		/* 821853ECh case   13:*/		regs.R30 = regs.R11;
		/* 821853ECh case   13:*/		return 0x821853F0;
		  /* 821853F0h */ case   14:  		/* add R29, R10, R11 */
		/* 821853F0h case   14:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821853F0h case   14:*/		return 0x821853F4;
		  /* 821853F4h */ case   15:  		/* cmplw CR6, R11, R29 */
		/* 821853F4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821853F4h case   15:*/		return 0x821853F8;
		  /* 821853F8h */ case   16:  		/* bc 4, CR6_LT, 40 */
		/* 821853F8h case   16:*/		if ( !regs.CR[6].lt ) { return 0x82185420;  }
		/* 821853F8h case   16:*/		return 0x821853FC;
		  /* 821853FCh */ case   17:  		/* addi R11, R1, 80 */
		/* 821853FCh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821853FCh case   17:*/		return 0x82185400;
		  /* 82185400h */ case   18:  		/* addi R28, R11, -4 */
		/* 82185400h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 82185400h case   18:*/		return 0x82185404;
		  /* 82185404h */ case   19:  		/* mr R4, R30 */
		/* 82185404h case   19:*/		regs.R4 = regs.R30;
		/* 82185404h case   19:*/		return 0x82185408;
		  /* 82185408h */ case   20:  		/* mr R3, R31 */
		/* 82185408h case   20:*/		regs.R3 = regs.R31;
		/* 82185408h case   20:*/		return 0x8218540C;
		  /* 8218540Ch */ case   21:  		/* bl -6828 */
		/* 8218540Ch case   21:*/		regs.LR = 0x82185410; return 0x82183960;
		/* 8218540Ch case   21:*/		return 0x82185410;
		  /* 82185410h */ case   22:  		/* addi R30, R30, 1 */
		/* 82185410h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82185410h case   22:*/		return 0x82185414;
		  /* 82185414h */ case   23:  		/* stwu R3, <#[R28 + 4]> */
		/* 82185414h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 82185414h case   23:*/		return 0x82185418;
		  /* 82185418h */ case   24:  		/* cmplw CR6, R30, R29 */
		/* 82185418h case   24:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 82185418h case   24:*/		return 0x8218541C;
		  /* 8218541Ch */ case   25:  		/* bc 12, CR6_LT, -24 */
		/* 8218541Ch case   25:*/		if ( regs.CR[6].lt ) { return 0x82185404;  }
		/* 8218541Ch case   25:*/		return 0x82185420;
	}
	return 0x82185420;
} // Block from 821853B8h-82185420h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82185420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185420);
		  /* 82185420h */ case    0:  		/* lwz R10, <#[R23]> */
		/* 82185420h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 82185420h case    0:*/		return 0x82185424;
		  /* 82185424h */ case    1:  		/* rlwinm. R11, R10, 7, 29, 31 */
		/* 82185424h case    1:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R11,regs.R10);
		/* 82185424h case    1:*/		return 0x82185428;
		  /* 82185428h */ case    2:  		/* rlwinm R25, R10, 27, 24, 31 */
		/* 82185428h case    2:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R25,regs.R10);
		/* 82185428h case    2:*/		return 0x8218542C;
		  /* 8218542Ch */ case    3:  		/* bc 12, CR0_EQ, 264 */
		/* 8218542Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82185534;  }
		/* 8218542Ch case    3:*/		return 0x82185430;
		  /* 82185430h */ case    4:  		/* li R26, 0 */
		/* 82185430h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82185430h case    4:*/		return 0x82185434;
		  /* 82185434h */ case    5:  		/* mr R24, R11 */
		/* 82185434h case    5:*/		regs.R24 = regs.R11;
		/* 82185434h case    5:*/		return 0x82185438;
		  /* 82185438h */ case    6:  		/* srw R11, R25, R26 */
		/* 82185438h case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R25,regs.R26);
		/* 82185438h case    6:*/		return 0x8218543C;
		  /* 8218543Ch */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 8218543Ch case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 8218543Ch case    7:*/		return 0x82185440;
		  /* 82185440h */ case    8:  		/* addi R10, R1, 80 */
		/* 82185440h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82185440h case    8:*/		return 0x82185444;
		  /* 82185444h */ case    9:  		/* lis R12, -1024 */
		/* 82185444h case    9:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFC00);
		/* 82185444h case    9:*/		return 0x82185448;
		  /* 82185448h */ case   10:  		/* ori R12, R12, 0 */
		/* 82185448h case   10:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82185448h case   10:*/		return 0x8218544C;
		  /* 8218544Ch */ case   11:  		/* lwzx R28, <#[R11 + R10]> */
		/* 8218544Ch case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218544Ch case   11:*/		return 0x82185450;
		  /* 82185450h */ case   12:  		/* rldicr R12, R12, 6, 63 */
		/* 82185450h case   12:*/		cpu::op::rldicr<0,6,63>(regs,&regs.R12,regs.R12);
		/* 82185450h case   12:*/		return 0x82185454;
		  /* 82185454h */ case   13:  		/* rlwinm R30, R28, 29, 3, 28 */
		/* 82185454h case   13:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R30,regs.R28);
		/* 82185454h case   13:*/		return 0x82185458;
		  /* 82185458h */ case   14:  		/* and R11, R28, R12 */
		/* 82185458h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R28,regs.R12);
		/* 82185458h case   14:*/		return 0x8218545C;
		  /* 8218545Ch */ case   15:  		/* sld R27, R22, R11 */
		/* 8218545Ch case   15:*/		cpu::op::sld<0>(regs,&regs.R27,regs.R22,regs.R11);
		/* 8218545Ch case   15:*/		return 0x82185460;
		  /* 82185460h */ case   16:  		/* ldx R11, <#[R30 + R21]> */
		/* 82185460h case   16:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + regs.R21 + 0x00000000) );
		/* 82185460h case   16:*/		return 0x82185464;
		  /* 82185464h */ case   17:  		/* and R11, R11, R27 */
		/* 82185464h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82185464h case   17:*/		return 0x82185468;
		  /* 82185468h */ case   18:  		/* cmpldi CR6, R11, 0 */
		/* 82185468h case   18:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82185468h case   18:*/		return 0x8218546C;
		  /* 8218546Ch */ case   19:  		/* mr R11, R22 */
		/* 8218546Ch case   19:*/		regs.R11 = regs.R22;
		/* 8218546Ch case   19:*/		return 0x82185470;
		  /* 82185470h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 82185470h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82185478;  }
		/* 82185470h case   20:*/		return 0x82185474;
		  /* 82185474h */ case   21:  		/* li R11, 0 */
		/* 82185474h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82185474h case   21:*/		return 0x82185478;
	}
	return 0x82185478;
} // Block from 82185420h-82185478h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82185478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185478);
		  /* 82185478h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82185478h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82185478h case    0:*/		return 0x8218547C;
		  /* 8218547Ch */ case    1:  		/* bc 4, CR0_EQ, 172 */
		/* 8218547Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82185528;  }
		/* 8218547Ch case    1:*/		return 0x82185480;
		  /* 82185480h */ case    2:  		/* li R4, 0 */
		/* 82185480h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82185480h case    2:*/		return 0x82185484;
		  /* 82185484h */ case    3:  		/* lwz R5, <#[R31 + 672]> */
		/* 82185484h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185484h case    3:*/		return 0x82185488;
		  /* 82185488h */ case    4:  		/* mr R3, R21 */
		/* 82185488h case    4:*/		regs.R3 = regs.R21;
		/* 82185488h case    4:*/		return 0x8218548C;
		  /* 8218548Ch */ case    5:  		/* bl -91444 */
		/* 8218548Ch case    5:*/		regs.LR = 0x82185490; return 0x8216EF58;
		/* 8218548Ch case    5:*/		return 0x82185490;
		  /* 82185490h */ case    6:  		/* lwz R11, <#[R31 + 668]> */
		/* 82185490h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 82185490h case    6:*/		return 0x82185494;
		  /* 82185494h */ case    7:  		/* addi R11, R11, -1 */
		/* 82185494h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82185494h case    7:*/		return 0x82185498;
		  /* 82185498h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 82185498h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82185498h case    8:*/		return 0x8218549C;
		  /* 8218549Ch */ case    9:  		/* bc 12, CR6_GT, 128 */
		/* 8218549Ch case    9:*/		if ( regs.CR[6].gt ) { return 0x8218551C;  }
		/* 8218549Ch case    9:*/		return 0x821854A0;
		  /* 821854A0h */ case   10:  		/* lwz R11, <#[R31 + 672]> */
		/* 821854A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 821854A0h case   10:*/		return 0x821854A4;
		  /* 821854A4h */ case   11:  		/* rlwinm R10, R3, 29, 3, 28 */
		/* 821854A4h case   11:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R3);
		/* 821854A4h case   11:*/		return 0x821854A8;
		  /* 821854A8h */ case   12:  		/* lwz R9, <#[R31 + 684]> */
		/* 821854A8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002AC) );
		/* 821854A8h case   12:*/		return 0x821854AC;
		  /* 821854ACh */ case   13:  		/* rldicl R8, R3, 0, 58 */
		/* 821854ACh case   13:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R8,regs.R3);
		/* 821854ACh case   13:*/		return 0x821854B0;
		  /* 821854B0h */ case   14:  		/* mullw R11, R11, R28 */
		/* 821854B0h case   14:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821854B0h case   14:*/		return 0x821854B4;
		  /* 821854B4h */ case   15:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821854B4h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821854B4h case   15:*/		return 0x821854B8;
		  /* 821854B8h */ case   16:  		/* sld R8, R22, R8 */
		/* 821854B8h case   16:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R22,regs.R8);
		/* 821854B8h case   16:*/		return 0x821854BC;
		  /* 821854BCh */ case   17:  		/* add R11, R11, R9 */
		/* 821854BCh case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821854BCh case   17:*/		return 0x821854C0;
		  /* 821854C0h */ case   18:  		/* ldx R9, <#[R10 + R11]> */
		/* 821854C0h case   18:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821854C0h case   18:*/		return 0x821854C4;
		  /* 821854C4h */ case   19:  		/* or R9, R8, R9 */
		/* 821854C4h case   19:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821854C4h case   19:*/		return 0x821854C8;
		  /* 821854C8h */ case   20:  		/* stdx R9, <#[R10 + R11]> */
		/* 821854C8h case   20:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821854C8h case   20:*/		return 0x821854CC;
		  /* 821854CCh */ case   21:  		/* lwz R10, <#[R31 + 684]> */
		/* 821854CCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002AC) );
		/* 821854CCh case   21:*/		return 0x821854D0;
		  /* 821854D0h */ case   22:  		/* lwz R11, <#[R31 + 672]> */
		/* 821854D0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002A0) );
		/* 821854D0h case   22:*/		return 0x821854D4;
		  /* 821854D4h */ case   23:  		/* mullw R11, R11, R3 */
		/* 821854D4h case   23:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821854D4h case   23:*/		return 0x821854D8;
		  /* 821854D8h */ case   24:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821854D8h case   24:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821854D8h case   24:*/		return 0x821854DC;
		  /* 821854DCh */ case   25:  		/* add R11, R11, R10 */
		/* 821854DCh case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821854DCh case   25:*/		return 0x821854E0;
		  /* 821854E0h */ case   26:  		/* ldx R10, <#[R11 + R30]> */
		/* 821854E0h case   26:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821854E0h case   26:*/		return 0x821854E4;
		  /* 821854E4h */ case   27:  		/* or R10, R10, R27 */
		/* 821854E4h case   27:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 821854E4h case   27:*/		return 0x821854E8;
	}
	return 0x821854E8;
} // Block from 82185478h-821854E8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821854E8h
// Function '?UpdateDefGroupStateAfterRemovingInstructionOutput@Compiler@D3DXShader@@AAAXPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821854E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821854E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821854E8);
		  /* 821854E8h */ case    0:  		/* stdx R10, <#[R11 + R30]> */
		/* 821854E8h case    0:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821854E8h case    0:*/		return 0x821854EC;
		  /* 821854ECh */ case    1:  		/* lwz R11, <#[R31 + 668]> */
		/* 821854ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000029C) );
		/* 821854ECh case    1:*/		return 0x821854F0;
		  /* 821854F0h */ case    2:  		/* addi R29, R11, -1 */
		/* 821854F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFF);
		/* 821854F0h case    2:*/		return 0x821854F4;
		  /* 821854F4h */ case    3:  		/* cmplw CR6, R3, R29 */
		/* 821854F4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 821854F4h case    3:*/		return 0x821854F8;
		  /* 821854F8h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821854F8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82185504;  }
		/* 821854F8h case    4:*/		return 0x821854FC;
		  /* 821854FCh */ case    5:  		/* mr R3, R18 */
		/* 821854FCh case    5:*/		regs.R3 = regs.R18;
		/* 821854FCh case    5:*/		return 0x82185500;
		  /* 82185500h */ case    6:  		/* b 20 */
		/* 82185500h case    6:*/		return 0x82185514;
		/* 82185500h case    6:*/		return 0x82185504;
	}
	return 0x82185504;
} // Block from 821854E8h-82185504h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82185504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185504);
		  /* 82185504h */ case    0:  		/* addi R4, R3, 1 */
		/* 82185504h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 82185504h case    0:*/		return 0x82185508;
		  /* 82185508h */ case    1:  		/* lwz R5, <#[R31 + 672]> */
		/* 82185508h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185508h case    1:*/		return 0x8218550C;
		  /* 8218550Ch */ case    2:  		/* mr R3, R21 */
		/* 8218550Ch case    2:*/		regs.R3 = regs.R21;
		/* 8218550Ch case    2:*/		return 0x82185510;
		  /* 82185510h */ case    3:  		/* bl -91576 */
		/* 82185510h case    3:*/		regs.LR = 0x82185514; return 0x8216EF58;
		/* 82185510h case    3:*/		return 0x82185514;
	}
	return 0x82185514;
} // Block from 82185504h-82185514h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82185514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185514);
		  /* 82185514h */ case    0:  		/* cmplw CR6, R3, R29 */
		/* 82185514h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82185514h case    0:*/		return 0x82185518;
		  /* 82185518h */ case    1:  		/* bc 4, CR6_GT, -120 */
		/* 82185518h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821854A0;  }
		/* 82185518h case    1:*/		return 0x8218551C;
	}
	return 0x8218551C;
} // Block from 82185514h-8218551Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218551Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218551C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218551C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218551C);
		  /* 8218551Ch */ case    0:  		/* ldx R11, <#[R30 + R21]> */
		/* 8218551Ch case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + regs.R21 + 0x00000000) );
		/* 8218551Ch case    0:*/		return 0x82185520;
		  /* 82185520h */ case    1:  		/* or R11, R11, R27 */
		/* 82185520h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82185520h case    1:*/		return 0x82185524;
		  /* 82185524h */ case    2:  		/* stdx R11, <#[R30 + R21]> */
		/* 82185524h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + regs.R21 + 0x00000000) );
		/* 82185524h case    2:*/		return 0x82185528;
	}
	return 0x82185528;
} // Block from 8218551Ch-82185528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82185528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185528);
		  /* 82185528h */ case    0:  		/* addic. R24, R24, -1 */
		/* 82185528h case    0:*/		cpu::op::addic<1>(regs,&regs.R24,regs.R24,0xFFFFFFFF);
		/* 82185528h case    0:*/		return 0x8218552C;
		  /* 8218552Ch */ case    1:  		/* addi R26, R26, 2 */
		/* 8218552Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x2);
		/* 8218552Ch case    1:*/		return 0x82185530;
		  /* 82185530h */ case    2:  		/* bc 4, CR0_EQ, -248 */
		/* 82185530h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82185438;  }
		/* 82185530h case    2:*/		return 0x82185534;
	}
	return 0x82185534;
} // Block from 82185528h-82185534h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82185534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185534);
		  /* 82185534h */ case    0:  		/* lwz R23, <#[R23 + 4]> */
		/* 82185534h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R23 + 0x00000004) );
		/* 82185534h case    0:*/		return 0x82185538;
		  /* 82185538h */ case    1:  		/* b -380 */
		/* 82185538h case    1:*/		return 0x821853BC;
		/* 82185538h case    1:*/		return 0x8218553C;
	}
	return 0x8218553C;
} // Block from 82185534h-8218553Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218553Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218553C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218553C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218553C);
		  /* 8218553Ch */ case    0:  		/* rlwinm R11, R20, 0, 0, 30 */
		/* 8218553Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R20);
		/* 8218553Ch case    0:*/		return 0x82185540;
		  /* 82185540h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 82185540h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82185540h case    1:*/		return 0x82185544;
		  /* 82185544h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82185544h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82185544h case    2:*/		return 0x82185548;
		  /* 82185548h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82185548h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82185558;  }
		/* 82185548h case    3:*/		return 0x8218554C;
	}
	return 0x8218554C;
} // Block from 8218553Ch-8218554Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218554Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218554C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218554C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218554C);
		  /* 8218554Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8218554Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8218554Ch case    0:*/		return 0x82185550;
		  /* 82185550h */ case    1:  		/* addic. R20, R11, -40 */
		/* 82185550h case    1:*/		cpu::op::addic<1>(regs,&regs.R20,regs.R11,0xFFFFFFD8);
		/* 82185550h case    1:*/		return 0x82185554;
		  /* 82185554h */ case    2:  		/* bc 4, CR0_EQ, -868 */
		/* 82185554h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821851F0;  }
		/* 82185554h case    2:*/		return 0x82185558;
	}
	return 0x82185558;
} // Block from 8218554Ch-82185558h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82185558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185558);
		  /* 82185558h */ case    0:  		/* rlwinm R11, R19, 0, 0, 30 */
		/* 82185558h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R19);
		/* 82185558h case    0:*/		return 0x8218555C;
		  /* 8218555Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8218555Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8218555Ch case    1:*/		return 0x82185560;
		  /* 82185560h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82185560h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82185560h case    2:*/		return 0x82185564;
		  /* 82185564h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82185564h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82185574;  }
		/* 82185564h case    3:*/		return 0x82185568;
		  /* 82185568h */ case    4:  		/* mr R19, R11 */
		/* 82185568h case    4:*/		regs.R19 = regs.R11;
		/* 82185568h case    4:*/		return 0x8218556C;
		  /* 8218556Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218556Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218556Ch case    5:*/		return 0x82185570;
		  /* 82185570h */ case    6:  		/* bc 4, CR6_EQ, -1156 */
		/* 82185570h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821850EC;  }
		/* 82185570h case    6:*/		return 0x82185574;
	}
	return 0x82185574;
} // Block from 82185558h-82185574h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82185574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185574);
		  /* 82185574h */ case    0:  		/* addi R1, R1, 240 */
		/* 82185574h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82185574h case    0:*/		return 0x82185578;
		  /* 82185578h */ case    1:  		/* b -1000192 */
		/* 82185578h case    1:*/		return 0x82091278;
		/* 82185578h case    1:*/		return 0x8218557C;
		  /* 8218557Ch */ case    2:  		/* nop */
		/* 8218557Ch case    2:*/		cpu::op::nop();
		/* 8218557Ch case    2:*/		return 0x82185580;
	}
	return 0x82185580;
} // Block from 82185574h-82185580h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82185580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185580);
		  /* 82185580h */ case    0:  		/* mfspr R12, LR */
		/* 82185580h case    0:*/		regs.R12 = regs.LR;
		/* 82185580h case    0:*/		return 0x82185584;
		  /* 82185584h */ case    1:  		/* bl -1000244 */
		/* 82185584h case    1:*/		regs.LR = 0x82185588; return 0x82091250;
		/* 82185584h case    1:*/		return 0x82185588;
		  /* 82185588h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82185588h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82185588h case    2:*/		return 0x8218558C;
		  /* 8218558Ch */ case    3:  		/* lwz R11, <#[R4 + 192]> */
		/* 8218558Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000C0) );
		/* 8218558Ch case    3:*/		return 0x82185590;
		  /* 82185590h */ case    4:  		/* mr R29, R3 */
		/* 82185590h case    4:*/		regs.R29 = regs.R3;
		/* 82185590h case    4:*/		return 0x82185594;
		  /* 82185594h */ case    5:  		/* mr R31, R4 */
		/* 82185594h case    5:*/		regs.R31 = regs.R4;
		/* 82185594h case    5:*/		return 0x82185598;
		  /* 82185598h */ case    6:  		/* mr R28, R5 */
		/* 82185598h case    6:*/		regs.R28 = regs.R5;
		/* 82185598h case    6:*/		return 0x8218559C;
		  /* 8218559Ch */ case    7:  		/* mr R27, R6 */
		/* 8218559Ch case    7:*/		regs.R27 = regs.R6;
		/* 8218559Ch case    7:*/		return 0x821855A0;
		  /* 821855A0h */ case    8:  		/* mr R26, R7 */
		/* 821855A0h case    8:*/		regs.R26 = regs.R7;
		/* 821855A0h case    8:*/		return 0x821855A4;
		  /* 821855A4h */ case    9:  		/* li R30, 0 */
		/* 821855A4h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821855A4h case    9:*/		return 0x821855A8;
		  /* 821855A8h */ case   10:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821855A8h case   10:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821855A8h case   10:*/		return 0x821855AC;
		  /* 821855ACh */ case   11:  		/* bc 12, CR0_EQ, 56 */
		/* 821855ACh case   11:*/		if ( regs.CR[0].eq ) { return 0x821855E4;  }
		/* 821855ACh case   11:*/		return 0x821855B0;
		  /* 821855B0h */ case   12:  		/* mr R7, R30 */
		/* 821855B0h case   12:*/		regs.R7 = regs.R30;
		/* 821855B0h case   12:*/		return 0x821855B4;
		  /* 821855B4h */ case   13:  		/* mr R6, R27 */
		/* 821855B4h case   13:*/		regs.R6 = regs.R27;
		/* 821855B4h case   13:*/		return 0x821855B8;
		  /* 821855B8h */ case   14:  		/* mr R5, R28 */
		/* 821855B8h case   14:*/		regs.R5 = regs.R28;
		/* 821855B8h case   14:*/		return 0x821855BC;
		  /* 821855BCh */ case   15:  		/* mr R4, R31 */
		/* 821855BCh case   15:*/		regs.R4 = regs.R31;
		/* 821855BCh case   15:*/		return 0x821855C0;
		  /* 821855C0h */ case   16:  		/* mr R3, R29 */
		/* 821855C0h case   16:*/		regs.R3 = regs.R29;
		/* 821855C0h case   16:*/		return 0x821855C4;
		  /* 821855C4h */ case   17:  		/* bl 1796 */
		/* 821855C4h case   17:*/		regs.LR = 0x821855C8; return 0x82185CC8;
		/* 821855C4h case   17:*/		return 0x821855C8;
		  /* 821855C8h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821855C8h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821855C8h case   18:*/		return 0x821855CC;
		  /* 821855CCh */ case   19:  		/* bc 4, CR0_EQ, 24 */
		/* 821855CCh case   19:*/		if ( !regs.CR[0].eq ) { return 0x821855E4;  }
		/* 821855CCh case   19:*/		return 0x821855D0;
		  /* 821855D0h */ case   20:  		/* lwz R11, <#[R31 + 192]> */
		/* 821855D0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 821855D0h case   20:*/		return 0x821855D4;
		  /* 821855D4h */ case   21:  		/* addi R30, R30, 1 */
		/* 821855D4h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821855D4h case   21:*/		return 0x821855D8;
		  /* 821855D8h */ case   22:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821855D8h case   22:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821855D8h case   22:*/		return 0x821855DC;
		  /* 821855DCh */ case   23:  		/* cmplw CR6, R30, R11 */
		/* 821855DCh case   23:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821855DCh case   23:*/		return 0x821855E0;
		  /* 821855E0h */ case   24:  		/* bc 12, CR6_LT, -48 */
		/* 821855E0h case   24:*/		if ( regs.CR[6].lt ) { return 0x821855B0;  }
		/* 821855E0h case   24:*/		return 0x821855E4;
	}
	return 0x821855E4;
} // Block from 82185580h-821855E4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821855E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821855E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821855E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821855E4);
		  /* 821855E4h */ case    0:  		/* mr R8, R26 */
		/* 821855E4h case    0:*/		regs.R8 = regs.R26;
		/* 821855E4h case    0:*/		return 0x821855E8;
		  /* 821855E8h */ case    1:  		/* mr R7, R30 */
		/* 821855E8h case    1:*/		regs.R7 = regs.R30;
		/* 821855E8h case    1:*/		return 0x821855EC;
		  /* 821855ECh */ case    2:  		/* mr R6, R27 */
		/* 821855ECh case    2:*/		regs.R6 = regs.R27;
		/* 821855ECh case    2:*/		return 0x821855F0;
		  /* 821855F0h */ case    3:  		/* mr R5, R28 */
		/* 821855F0h case    3:*/		regs.R5 = regs.R28;
		/* 821855F0h case    3:*/		return 0x821855F4;
		  /* 821855F4h */ case    4:  		/* mr R4, R31 */
		/* 821855F4h case    4:*/		regs.R4 = regs.R31;
		/* 821855F4h case    4:*/		return 0x821855F8;
		  /* 821855F8h */ case    5:  		/* mr R3, R29 */
		/* 821855F8h case    5:*/		regs.R3 = regs.R29;
		/* 821855F8h case    5:*/		return 0x821855FC;
		  /* 821855FCh */ case    6:  		/* bl -3612 */
		/* 821855FCh case    6:*/		regs.LR = 0x82185600; return 0x821847E0;
		/* 821855FCh case    6:*/		return 0x82185600;
		  /* 82185600h */ case    7:  		/* addi R1, R1, 144 */
		/* 82185600h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82185600h case    7:*/		return 0x82185604;
		  /* 82185604h */ case    8:  		/* b -1000292 */
		/* 82185604h case    8:*/		return 0x820912A0;
		/* 82185604h case    8:*/		return 0x82185608;
	}
	return 0x82185608;
} // Block from 821855E4h-82185608h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82185608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185608);
		  /* 82185608h */ case    0:  		/* mfspr R12, LR */
		/* 82185608h case    0:*/		regs.R12 = regs.LR;
		/* 82185608h case    0:*/		return 0x8218560C;
		  /* 8218560Ch */ case    1:  		/* bl -1000428 */
		/* 8218560Ch case    1:*/		regs.LR = 0x82185610; return 0x82091220;
		/* 8218560Ch case    1:*/		return 0x82185610;
		  /* 82185610h */ case    2:  		/* addi R11, R1, -156 */
		/* 82185610h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xFFFFFF64);
		/* 82185610h case    2:*/		return 0x82185614;
		  /* 82185614h */ case    3:  		/* stw R6, <#[R1 + 44]> */
		/* 82185614h case    3:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000002C) );
		/* 82185614h case    3:*/		return 0x82185618;
		  /* 82185618h */ case    4:  		/* addi R9, R1, -160 */
		/* 82185618h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF60);
		/* 82185618h case    4:*/		return 0x8218561C;
		  /* 8218561Ch */ case    5:  		/* li R18, 0 */
		/* 8218561Ch case    5:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8218561Ch case    5:*/		return 0x82185620;
		  /* 82185620h */ case    6:  		/* rlwinm R17, R10, 0, 28, 31 */
		/* 82185620h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R17,regs.R10);
		/* 82185620h case    6:*/		return 0x82185624;
		  /* 82185624h */ case    7:  		/* stw R18, <#[R3]> */
		/* 82185624h case    7:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R3 + 0x00000000) );
		/* 82185624h case    7:*/		return 0x82185628;
		  /* 82185628h */ case    8:  		/* li R23, 2 */
		/* 82185628h case    8:*/		cpu::op::li<0>(regs,&regs.R23,0x2);
		/* 82185628h case    8:*/		return 0x8218562C;
		  /* 8218562Ch */ case    9:  		/* stw R18, <#[R11]> */
		/* 8218562Ch case    9:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000000) );
		/* 8218562Ch case    9:*/		return 0x82185630;
		  /* 82185630h */ case   10:  		/* stw R18, <#[R9]> */
		/* 82185630h case   10:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R9 + 0x00000000) );
		/* 82185630h case   10:*/		return 0x82185634;
		  /* 82185634h */ case   11:  		/* li R21, -1 */
		/* 82185634h case   11:*/		cpu::op::li<0>(regs,&regs.R21,0xFFFFFFFF);
		/* 82185634h case   11:*/		return 0x82185638;
		  /* 82185638h */ case   12:  		/* mr R26, R18 */
		/* 82185638h case   12:*/		regs.R26 = regs.R18;
		/* 82185638h case   12:*/		return 0x8218563C;
		  /* 8218563Ch */ case   13:  		/* mr R29, R17 */
		/* 8218563Ch case   13:*/		regs.R29 = regs.R17;
		/* 8218563Ch case   13:*/		return 0x82185640;
		  /* 82185640h */ case   14:  		/* cmplwi CR6, R7, 0 */
		/* 82185640h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82185640h case   14:*/		return 0x82185644;
		  /* 82185644h */ case   15:  		/* bc 12, CR6_EQ, 488 */
		/* 82185644h case   15:*/		if ( regs.CR[6].eq ) { return 0x8218582C;  }
		/* 82185644h case   15:*/		return 0x82185648;
		  /* 82185648h */ case   16:  		/* lis R11, -28311 */
		/* 82185648h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 82185648h case   16:*/		return 0x8218564C;
		  /* 8218564Ch */ case   17:  		/* lwz R22, <#[R4 + 192]> */
		/* 8218564Ch case   17:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R4 + 0x000000C0) );
		/* 8218564Ch case   17:*/		return 0x82185650;
		  /* 82185650h */ case   18:  		/* lis R9, 0 */
		/* 82185650h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 82185650h case   18:*/		return 0x82185654;
		  /* 82185654h */ case   19:  		/* ori R11, R11, 5192 */
		/* 82185654h case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 82185654h case   19:*/		return 0x82185658;
		  /* 82185658h */ case   20:  		/* ori R9, R9, 36262 */
		/* 82185658h case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 82185658h case   20:*/		return 0x8218565C;
		  /* 8218565Ch */ case   21:  		/* rldicl R6, R17, 0, 32 */
		/* 8218565Ch case   21:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R6,regs.R17);
		/* 8218565Ch case   21:*/		return 0x82185660;
		  /* 82185660h */ case   22:  		/* rldimi R11, R9, 32, 0 */
		/* 82185660h case   22:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R9);
		/* 82185660h case   22:*/		return 0x82185664;
		  /* 82185664h */ case   23:  		/* mr R28, R18 */
		/* 82185664h case   23:*/		regs.R28 = regs.R18;
		/* 82185664h case   23:*/		return 0x82185668;
		  /* 82185668h */ case   24:  		/* srd R11, R11, R6 */
		/* 82185668h case   24:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82185668h case   24:*/		return 0x8218566C;
		  /* 8218566Ch */ case   25:  		/* srd R11, R11, R6 */
		/* 8218566Ch case   25:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8218566Ch case   25:*/		return 0x82185670;
		  /* 82185670h */ case   26:  		/* srd R11, R11, R6 */
		/* 82185670h case   26:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82185670h case   26:*/		return 0x82185674;
		  /* 82185674h */ case   27:  		/* rlwinm R19, R22, 2, 31, 31 */
		/* 82185674h case   27:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R19,regs.R22);
		/* 82185674h case   27:*/		return 0x82185678;
		  /* 82185678h */ case   28:  		/* rlwinm R20, R11, 0, 29, 31 */
		/* 82185678h case   28:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R20,regs.R11);
		/* 82185678h case   28:*/		return 0x8218567C;
		  /* 8218567Ch */ case   29:  		/* mr R27, R18 */
		/* 8218567Ch case   29:*/		regs.R27 = regs.R18;
		/* 8218567Ch case   29:*/		return 0x82185680;
		  /* 82185680h */ case   30:  		/* li R24, -1 */
		/* 82185680h case   30:*/		cpu::op::li<0>(regs,&regs.R24,0xFFFFFFFF);
		/* 82185680h case   30:*/		return 0x82185684;
		  /* 82185684h */ case   31:  		/* mr R25, R20 */
		/* 82185684h case   31:*/		regs.R25 = regs.R20;
		/* 82185684h case   31:*/		return 0x82185688;
		  /* 82185688h */ case   32:  		/* cmplwi CR6, R19, 0 */
		/* 82185688h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82185688h case   32:*/		return 0x8218568C;
		  /* 8218568Ch */ case   33:  		/* bc 12, CR6_EQ, 368 */
		/* 8218568Ch case   33:*/		if ( regs.CR[6].eq ) { return 0x821857FC;  }
		/* 8218568Ch case   33:*/		return 0x82185690;
		  /* 82185690h */ case   34:  		/* rlwinm R11, R22, 0, 29, 31 */
		/* 82185690h case   34:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R22);
		/* 82185690h case   34:*/		return 0x82185694;
		  /* 82185694h */ case   35:  		/* mr R9, R18 */
		/* 82185694h case   35:*/		regs.R9 = regs.R18;
		/* 82185694h case   35:*/		return 0x82185698;
		  /* 82185698h */ case   36:  		/* cmplw CR6, R26, R11 */
		/* 82185698h case   36:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82185698h case   36:*/		return 0x8218569C;
		  /* 8218569Ch */ case   37:  		/* bc 4, CR6_LT, 72 */
		/* 8218569Ch case   37:*/		if ( !regs.CR[6].lt ) { return 0x821856E4;  }
		/* 8218569Ch case   37:*/		return 0x821856A0;
		  /* 821856A0h */ case   38:  		/* rlwinm R9, R10, 24, 8, 31 */
		/* 821856A0h case   38:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R9,regs.R10);
		/* 821856A0h case   38:*/		return 0x821856A4;
		  /* 821856A4h */ case   39:  		/* rlwinm R11, R10, 30, 2, 29 */
		/* 821856A4h case   39:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R10);
		/* 821856A4h case   39:*/		return 0x821856A8;
		  /* 821856A8h */ case   40:  		/* add R9, R9, R27 */
		/* 821856A8h case   40:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R27);
		/* 821856A8h case   40:*/		return 0x821856AC;
		  /* 821856ACh */ case   41:  		/* addi R6, R11, 3 */
		/* 821856ACh case   41:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3);
		/* 821856ACh case   41:*/		return 0x821856B0;
		  /* 821856B0h */ case   42:  		/* addi R9, R9, 5 */
		/* 821856B0h case   42:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x5);
		/* 821856B0h case   42:*/		return 0x821856B4;
		  /* 821856B4h */ case   43:  		/* rldicl R6, R6, 0, 58 */
		/* 821856B4h case   43:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R6,regs.R6);
		/* 821856B4h case   43:*/		return 0x821856B8;
		  /* 821856B8h */ case   44:  		/* rlwinm R31, R9, 3, 0, 28 */
		/* 821856B8h case   44:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R31,regs.R9);
		/* 821856B8h case   44:*/		return 0x821856BC;
		  /* 821856BCh */ case   45:  		/* sld R9, R23, R6 */
		/* 821856BCh case   45:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R23,regs.R6);
		/* 821856BCh case   45:*/		return 0x821856C0;
		  /* 821856C0h */ case   46:  		/* ldx R6, <#[R31 + R4]> */
		/* 821856C0h case   46:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R31 + regs.R4 + 0x00000000) );
		/* 821856C0h case   46:*/		return 0x821856C4;
		  /* 821856C4h */ case   47:  		/* rldicl R11, R11, 0, 58 */
		/* 821856C4h case   47:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R11,regs.R11);
		/* 821856C4h case   47:*/		return 0x821856C8;
		  /* 821856C8h */ case   48:  		/* addi R9, R9, -1 */
		/* 821856C8h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821856C8h case   48:*/		return 0x821856CC;
		  /* 821856CCh */ case   49:  		/* sld R31, R24, R11 */
		/* 821856CCh case   49:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R24,regs.R11);
		/* 821856CCh case   49:*/		return 0x821856D0;
		  /* 821856D0h */ case   50:  		/* and R9, R9, R6 */
		/* 821856D0h case   50:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821856D0h case   50:*/		return 0x821856D4;
		  /* 821856D4h */ case   51:  		/* and R9, R9, R31 */
		/* 821856D4h case   51:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821856D4h case   51:*/		return 0x821856D8;
		  /* 821856D8h */ case   52:  		/* srd R11, R9, R11 */
		/* 821856D8h case   52:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821856D8h case   52:*/		return 0x821856DC;
		  /* 821856DCh */ case   53:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821856DCh case   53:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821856DCh case   53:*/		return 0x821856E0;
		  /* 821856E0h */ case   54:  		/* and R9, R11, R29 */
		/* 821856E0h case   54:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R29);
		/* 821856E0h case   54:*/		return 0x821856E4;
	}
	return 0x821856E4;
} // Block from 82185608h-821856E4h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821856E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821856E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821856E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821856E4);
		  /* 821856E4h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 821856E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821856E4h case    0:*/		return 0x821856E8;
		  /* 821856E8h */ case    1:  		/* bc 12, CR6_EQ, 196 */
		/* 821856E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821857AC;  }
		/* 821856E8h case    1:*/		return 0x821856EC;
		  /* 821856ECh */ case    2:  		/* lwz R6, <#[R5 + 192]> */
		/* 821856ECh case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + 0x000000C0) );
		/* 821856ECh case    2:*/		return 0x821856F0;
		  /* 821856F0h */ case    3:  		/* mr R11, R18 */
		/* 821856F0h case    3:*/		regs.R11 = regs.R18;
		/* 821856F0h case    3:*/		return 0x821856F4;
		  /* 821856F4h */ case    4:  		/* rlwinm. R30, R6, 0, 29, 31 */
		/* 821856F4h case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R30,regs.R6);
		/* 821856F4h case    4:*/		return 0x821856F8;
		  /* 821856F8h */ case    5:  		/* bc 12, CR0_EQ, 96 */
		/* 821856F8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82185758;  }
		/* 821856F8h case    5:*/		return 0x821856FC;
		  /* 821856FCh */ case    6:  		/* mr R6, R18 */
		/* 821856FCh case    6:*/		regs.R6 = regs.R18;
		/* 821856FCh case    6:*/		return 0x82185700;
		  /* 82185700h */ case    7:  		/* li R31, 1 */
		/* 82185700h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82185700h case    7:*/		return 0x82185704;
		  /* 82185704h */ case    8:  		/* slw R31, R31, R11 */
		/* 82185704h case    8:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R31,regs.R11);
		/* 82185704h case    8:*/		return 0x82185708;
		  /* 82185708h */ case    9:  		/* and. R31, R31, R8 */
		/* 82185708h case    9:*/		cpu::op::and<1>(regs,&regs.R31,regs.R31,regs.R8);
		/* 82185708h case    9:*/		return 0x8218570C;
		  /* 8218570Ch */ case   10:  		/* bc 4, CR0_EQ, 60 */
		/* 8218570Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x82185748;  }
		/* 8218570Ch case   10:*/		return 0x82185710;
		  /* 82185710h */ case   11:  		/* addi R31, R6, 3 */
		/* 82185710h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R6,0x3);
		/* 82185710h case   11:*/		return 0x82185714;
		  /* 82185714h */ case   12:  		/* addi R15, R1, 44 */
		/* 82185714h case   12:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R1,0x2C);
		/* 82185714h case   12:*/		return 0x82185718;
		  /* 82185718h */ case   13:  		/* rlwinm R16, R6, 29, 3, 29 */
		/* 82185718h case   13:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R16,regs.R6);
		/* 82185718h case   13:*/		return 0x8218571C;
		  /* 8218571Ch */ case   14:  		/* rlwinm R31, R31, 0, 27, 31 */
		/* 8218571Ch case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R31);
		/* 8218571Ch case   14:*/		return 0x82185720;
		  /* 82185720h */ case   15:  		/* slw R31, R23, R31 */
		/* 82185720h case   15:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R23,regs.R31);
		/* 82185720h case   15:*/		return 0x82185724;
		  /* 82185724h */ case   16:  		/* lwzx R16, <#[R16 + R15]> */
		/* 82185724h case   16:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R16 + regs.R15 + 0x00000000) );
		/* 82185724h case   16:*/		return 0x82185728;
		  /* 82185728h */ case   17:  		/* addi R31, R31, -1 */
		/* 82185728h case   17:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 82185728h case   17:*/		return 0x8218572C;
		  /* 8218572Ch */ case   18:  		/* rlwinm R15, R6, 0, 27, 31 */
		/* 8218572Ch case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R15,regs.R6);
		/* 8218572Ch case   18:*/		return 0x82185730;
		  /* 82185730h */ case   19:  		/* and R31, R31, R16 */
		/* 82185730h case   19:*/		cpu::op::and<0>(regs,&regs.R31,regs.R31,regs.R16);
		/* 82185730h case   19:*/		return 0x82185734;
		  /* 82185734h */ case   20:  		/* slw R14, R21, R15 */
		/* 82185734h case   20:*/		cpu::op::slw<0>(regs,&regs.R14,regs.R21,regs.R15);
		/* 82185734h case   20:*/		return 0x82185738;
		  /* 82185738h */ case   21:  		/* and R31, R31, R14 */
		/* 82185738h case   21:*/		cpu::op::and<0>(regs,&regs.R31,regs.R31,regs.R14);
		/* 82185738h case   21:*/		return 0x8218573C;
		  /* 8218573Ch */ case   22:  		/* srw R31, R31, R15 */
		/* 8218573Ch case   22:*/		cpu::op::srw<0>(regs,&regs.R31,regs.R31,regs.R15);
		/* 8218573Ch case   22:*/		return 0x82185740;
		  /* 82185740h */ case   23:  		/* cmplw CR6, R26, R31 */
		/* 82185740h case   23:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R31);
		/* 82185740h case   23:*/		return 0x82185744;
		  /* 82185744h */ case   24:  		/* bc 12, CR6_EQ, 20 */
		/* 82185744h case   24:*/		if ( regs.CR[6].eq ) { return 0x82185758;  }
		/* 82185744h case   24:*/		return 0x82185748;
	}
	return 0x82185748;
} // Block from 821856E4h-82185748h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82185748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185748);
		  /* 82185748h */ case    0:  		/* addi R11, R11, 1 */
		/* 82185748h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82185748h case    0:*/		return 0x8218574C;
		  /* 8218574Ch */ case    1:  		/* addi R6, R6, 4 */
		/* 8218574Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 8218574Ch case    1:*/		return 0x82185750;
		  /* 82185750h */ case    2:  		/* cmplw CR6, R11, R30 */
		/* 82185750h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82185750h case    2:*/		return 0x82185754;
		  /* 82185754h */ case    3:  		/* bc 12, CR6_LT, -84 */
		/* 82185754h case    3:*/		if ( regs.CR[6].lt ) { return 0x82185700;  }
		/* 82185754h case    3:*/		return 0x82185758;
	}
	return 0x82185758;
} // Block from 82185748h-82185758h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82185758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185758);
		  /* 82185758h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 82185758h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82185758h case    0:*/		return 0x8218575C;
		  /* 8218575Ch */ case    1:  		/* bc 4, CR6_LT, 80 */
		/* 8218575Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x821857AC;  }
		/* 8218575Ch case    1:*/		return 0x82185760;
		  /* 82185760h */ case    2:  		/* addi R6, R11, 1 */
		/* 82185760h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1);
		/* 82185760h case    2:*/		return 0x82185764;
		  /* 82185764h */ case    3:  		/* rlwinm R11, R10, 30, 2, 29 */
		/* 82185764h case    3:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R10);
		/* 82185764h case    3:*/		return 0x82185768;
		  /* 82185768h */ case    4:  		/* mulli R6, R6, 5 */
		/* 82185768h case    4:*/		cpu::op::mulli<0>(regs,&regs.R6,regs.R6,0x5);
		/* 82185768h case    4:*/		return 0x8218576C;
		  /* 8218576Ch */ case    5:  		/* rlwinm R31, R10, 24, 8, 31 */
		/* 8218576Ch case    5:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R31,regs.R10);
		/* 8218576Ch case    5:*/		return 0x82185770;
		  /* 82185770h */ case    6:  		/* addi R30, R11, 3 */
		/* 82185770h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x3);
		/* 82185770h case    6:*/		return 0x82185774;
		  /* 82185774h */ case    7:  		/* add R6, R31, R6 */
		/* 82185774h case    7:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R6);
		/* 82185774h case    7:*/		return 0x82185778;
		  /* 82185778h */ case    8:  		/* rldicl R31, R30, 0, 58 */
		/* 82185778h case    8:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R31,regs.R30);
		/* 82185778h case    8:*/		return 0x8218577C;
		  /* 8218577Ch */ case    9:  		/* rlwinm R6, R6, 3, 0, 28 */
		/* 8218577Ch case    9:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R6,regs.R6);
		/* 8218577Ch case    9:*/		return 0x82185780;
		  /* 82185780h */ case   10:  		/* rldicl R30, R11, 0, 58 */
		/* 82185780h case   10:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R30,regs.R11);
		/* 82185780h case   10:*/		return 0x82185784;
		  /* 82185784h */ case   11:  		/* sld R11, R23, R31 */
		/* 82185784h case   11:*/		cpu::op::sld<0>(regs,&regs.R11,regs.R23,regs.R31);
		/* 82185784h case   11:*/		return 0x82185788;
		  /* 82185788h */ case   12:  		/* ldx R6, <#[R6 + R5]> */
		/* 82185788h case   12:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 82185788h case   12:*/		return 0x8218578C;
		  /* 8218578Ch */ case   13:  		/* addi R11, R11, -1 */
		/* 8218578Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218578Ch case   13:*/		return 0x82185790;
		  /* 82185790h */ case   14:  		/* sld R31, R24, R30 */
		/* 82185790h case   14:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R24,regs.R30);
		/* 82185790h case   14:*/		return 0x82185794;
		  /* 82185794h */ case   15:  		/* and R11, R6, R11 */
		/* 82185794h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 82185794h case   15:*/		return 0x82185798;
		  /* 82185798h */ case   16:  		/* and R11, R11, R31 */
		/* 82185798h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 82185798h case   16:*/		return 0x8218579C;
		  /* 8218579Ch */ case   17:  		/* srd R11, R11, R30 */
		/* 8218579Ch case   17:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8218579Ch case   17:*/		return 0x821857A0;
		  /* 821857A0h */ case   18:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821857A0h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821857A0h case   18:*/		return 0x821857A4;
		  /* 821857A4h */ case   19:  		/* and R11, R11, R29 */
		/* 821857A4h case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821857A4h case   19:*/		return 0x821857A8;
		  /* 821857A8h */ case   20:  		/* or R9, R11, R9 */
		/* 821857A8h case   20:*/		cpu::op::or<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821857A8h case   20:*/		return 0x821857AC;
	}
	return 0x821857AC;
} // Block from 82185758h-821857ACh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821857ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821857AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821857AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821857AC);
		  /* 821857ACh */ case    0:  		/* lis R11, -28311 */
		/* 821857ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821857ACh case    0:*/		return 0x821857B0;
		  /* 821857B0h */ case    1:  		/* lis R6, 0 */
		/* 821857B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R6,0x0);
		/* 821857B0h case    1:*/		return 0x821857B4;
		  /* 821857B4h */ case    2:  		/* ori R11, R11, 5192 */
		/* 821857B4h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821857B4h case    2:*/		return 0x821857B8;
		  /* 821857B8h */ case    3:  		/* ori R6, R6, 36262 */
		/* 821857B8h case    3:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x8DA6);
		/* 821857B8h case    3:*/		return 0x821857BC;
		  /* 821857BCh */ case    4:  		/* rldicl R31, R9, 0, 32 */
		/* 821857BCh case    4:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R31,regs.R9);
		/* 821857BCh case    4:*/		return 0x821857C0;
		  /* 821857C0h */ case    5:  		/* rldimi R11, R6, 32, 0 */
		/* 821857C0h case    5:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R6);
		/* 821857C0h case    5:*/		return 0x821857C4;
		  /* 821857C4h */ case    6:  		/* rlwinm R6, R28, 29, 3, 29 */
		/* 821857C4h case    6:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R6,regs.R28);
		/* 821857C4h case    6:*/		return 0x821857C8;
		  /* 821857C8h */ case    7:  		/* mr R30, R11 */
		/* 821857C8h case    7:*/		regs.R30 = regs.R11;
		/* 821857C8h case    7:*/		return 0x821857CC;
		  /* 821857CCh */ case    8:  		/* addi R11, R1, -156 */
		/* 821857CCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xFFFFFF64);
		/* 821857CCh case    8:*/		return 0x821857D0;
		  /* 821857D0h */ case    9:  		/* srd R30, R30, R31 */
		/* 821857D0h case    9:*/		cpu::op::srd<0>(regs,&regs.R30,regs.R30,regs.R31);
		/* 821857D0h case    9:*/		return 0x821857D4;
		  /* 821857D4h */ case   10:  		/* srd R30, R30, R31 */
		/* 821857D4h case   10:*/		cpu::op::srd<0>(regs,&regs.R30,regs.R30,regs.R31);
		/* 821857D4h case   10:*/		return 0x821857D8;
		  /* 821857D8h */ case   11:  		/* lwzx R16, <#[R6 + R11]> */
		/* 821857D8h case   11:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 821857D8h case   11:*/		return 0x821857DC;
		  /* 821857DCh */ case   12:  		/* rlwinm R15, R28, 0, 27, 31 */
		/* 821857DCh case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R15,regs.R28);
		/* 821857DCh case   12:*/		return 0x821857E0;
		  /* 821857E0h */ case   13:  		/* srd R31, R30, R31 */
		/* 821857E0h case   13:*/		cpu::op::srd<0>(regs,&regs.R31,regs.R30,regs.R31);
		/* 821857E0h case   13:*/		return 0x821857E4;
		  /* 821857E4h */ case   14:  		/* slw R9, R9, R15 */
		/* 821857E4h case   14:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R15);
		/* 821857E4h case   14:*/		return 0x821857E8;
		  /* 821857E8h */ case   15:  		/* rlwinm R31, R31, 0, 29, 31 */
		/* 821857E8h case   15:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R31,regs.R31);
		/* 821857E8h case   15:*/		return 0x821857EC;
		  /* 821857ECh */ case   16:  		/* or R9, R9, R16 */
		/* 821857ECh case   16:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R16);
		/* 821857ECh case   16:*/		return 0x821857F0;
		  /* 821857F0h */ case   17:  		/* subf. R25, R31, R25 */
		/* 821857F0h case   17:*/		cpu::op::subf<1>(regs,&regs.R25,regs.R31,regs.R25);
		/* 821857F0h case   17:*/		return 0x821857F4;
		  /* 821857F4h */ case   18:  		/* stwx R9, <#[R6 + R11]> */
		/* 821857F4h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 821857F4h case   18:*/		return 0x821857F8;
		  /* 821857F8h */ case   19:  		/* bc 12, CR0_EQ, 444 */
		/* 821857F8h case   19:*/		if ( regs.CR[0].eq ) { return 0x821859B4;  }
		/* 821857F8h case   19:*/		return 0x821857FC;
	}
	return 0x821857FC;
} // Block from 821857ACh-821857FCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821857FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821857FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821857FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821857FC);
		  /* 821857FCh */ case    0:  		/* rlwinm R11, R28, 29, 3, 29 */
		/* 821857FCh case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R28);
		/* 821857FCh case    0:*/		return 0x82185800;
		  /* 82185800h */ case    1:  		/* addi R9, R1, -160 */
		/* 82185800h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF60);
		/* 82185800h case    1:*/		return 0x82185804;
		  /* 82185804h */ case    2:  		/* rlwinm R6, R28, 0, 27, 31 */
		/* 82185804h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R28);
		/* 82185804h case    2:*/		return 0x82185808;
		  /* 82185808h */ case    3:  		/* addi R26, R26, 1 */
		/* 82185808h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82185808h case    3:*/		return 0x8218580C;
		  /* 8218580Ch */ case    4:  		/* slw R6, R25, R6 */
		/* 8218580Ch case    4:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R25,regs.R6);
		/* 8218580Ch case    4:*/		return 0x82185810;
		  /* 82185810h */ case    5:  		/* lwzx R31, <#[R11 + R9]> */
		/* 82185810h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82185810h case    5:*/		return 0x82185814;
		  /* 82185814h */ case    6:  		/* addi R27, R27, 5 */
		/* 82185814h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x5);
		/* 82185814h case    6:*/		return 0x82185818;
		  /* 82185818h */ case    7:  		/* addi R28, R28, 4 */
		/* 82185818h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82185818h case    7:*/		return 0x8218581C;
		  /* 8218581Ch */ case    8:  		/* or R6, R6, R31 */
		/* 8218581Ch case    8:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R31);
		/* 8218581Ch case    8:*/		return 0x82185820;
		  /* 82185820h */ case    9:  		/* cmplw CR6, R26, R7 */
		/* 82185820h case    9:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R7);
		/* 82185820h case    9:*/		return 0x82185824;
		  /* 82185824h */ case   10:  		/* stwx R6, <#[R11 + R9]> */
		/* 82185824h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82185824h case   10:*/		return 0x82185828;
		  /* 82185828h */ case   11:  		/* bc 12, CR6_LT, -420 */
		/* 82185828h case   11:*/		if ( regs.CR[6].lt ) { return 0x82185684;  }
		/* 82185828h case   11:*/		return 0x8218582C;
	}
	return 0x8218582C;
} // Block from 821857FCh-8218582Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8218582Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218582C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218582C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218582C);
		  /* 8218582Ch */ case    0:  		/* mr R28, R18 */
		/* 8218582Ch case    0:*/		regs.R28 = regs.R18;
		/* 8218582Ch case    0:*/		return 0x82185830;
		  /* 82185830h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 82185830h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82185830h case    1:*/		return 0x82185834;
		  /* 82185834h */ case    2:  		/* bc 12, CR6_EQ, 352 */
		/* 82185834h case    2:*/		if ( regs.CR[6].eq ) { return 0x82185994;  }
		/* 82185834h case    2:*/		return 0x82185838;
		  /* 82185838h */ case    3:  		/* mr R10, R18 */
		/* 82185838h case    3:*/		regs.R10 = regs.R18;
		/* 82185838h case    3:*/		return 0x8218583C;
		  /* 8218583Ch */ case    4:  		/* li R6, 4 */
		/* 8218583Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8218583Ch case    4:*/		return 0x82185840;
		  /* 82185840h */ case    5:  		/* mr R8, R18 */
		/* 82185840h case    5:*/		regs.R8 = regs.R18;
		/* 82185840h case    5:*/		return 0x82185844;
		  /* 82185844h */ case    6:  		/* mr R11, R18 */
		/* 82185844h case    6:*/		regs.R11 = regs.R18;
		/* 82185844h case    6:*/		return 0x82185848;
	}
	return 0x82185848;
} // Block from 8218582Ch-82185848h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82185848h
// Function '?CreateGroup@Compiler@D3DXShader@@AAAPAURegGroupInfo@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185848);
		  /* 82185848h */ case    0:  		/* addi R9, R11, 3 */
		/* 82185848h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3);
		/* 82185848h case    0:*/		return 0x8218584C;
		  /* 8218584Ch */ case    1:  		/* addi R4, R1, -160 */
		/* 8218584Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xFFFFFF60);
		/* 8218584Ch case    1:*/		return 0x82185850;
		  /* 82185850h */ case    2:  		/* rlwinm R5, R11, 29, 3, 29 */
		/* 82185850h case    2:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R5,regs.R11);
		/* 82185850h case    2:*/		return 0x82185854;
		  /* 82185854h */ case    3:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82185854h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82185854h case    3:*/		return 0x82185858;
		  /* 82185858h */ case    4:  		/* slw R9, R23, R9 */
		/* 82185858h case    4:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 82185858h case    4:*/		return 0x8218585C;
		  /* 8218585Ch */ case    5:  		/* lwzx R5, <#[R5 + R4]> */
		/* 8218585Ch case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 8218585Ch case    5:*/		return 0x82185860;
		  /* 82185860h */ case    6:  		/* addi R9, R9, -1 */
		/* 82185860h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82185860h case    6:*/		return 0x82185864;
		  /* 82185864h */ case    7:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 82185864h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 82185864h case    7:*/		return 0x82185868;
		  /* 82185868h */ case    8:  		/* and R9, R9, R5 */
		/* 82185868h case    8:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 82185868h case    8:*/		return 0x8218586C;
		  /* 8218586Ch */ case    9:  		/* slw R31, R21, R4 */
		/* 8218586Ch case    9:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R21,regs.R4);
		/* 8218586Ch case    9:*/		return 0x82185870;
		  /* 82185870h */ case   10:  		/* and R9, R9, R31 */
		/* 82185870h case   10:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 82185870h case   10:*/		return 0x82185874;
		  /* 82185874h */ case   11:  		/* srw. R9, R9, R4 */
		/* 82185874h case   11:*/		cpu::op::srw<1>(regs,&regs.R9,regs.R9,regs.R4);
		/* 82185874h case   11:*/		return 0x82185878;
		  /* 82185878h */ case   12:  		/* bc 12, CR0_EQ, 316 */
		/* 82185878h case   12:*/		if ( regs.CR[0].eq ) { return 0x821859B4;  }
		/* 82185878h case   12:*/		return 0x8218587C;
		  /* 8218587Ch */ case   13:  		/* cmplw CR6, R9, R6 */
		/* 8218587Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 8218587Ch case   13:*/		return 0x82185880;
		  /* 82185880h */ case   14:  		/* bc 4, CR6_LT, 12 */
		/* 82185880h case   14:*/		if ( !regs.CR[6].lt ) { return 0x8218588C;  }
		/* 82185880h case   14:*/		return 0x82185884;
		  /* 82185884h */ case   15:  		/* mr R6, R9 */
		/* 82185884h case   15:*/		regs.R6 = regs.R9;
		/* 82185884h case   15:*/		return 0x82185888;
		  /* 82185888h */ case   16:  		/* mr R10, R8 */
		/* 82185888h case   16:*/		regs.R10 = regs.R8;
		/* 82185888h case   16:*/		return 0x8218588C;
	}
	return 0x8218588C;
} // Block from 82185848h-8218588Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8218588Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218588C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218588C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218588C);
		  /* 8218588Ch */ case    0:  		/* addi R8, R8, 1 */
		/* 8218588Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8218588Ch case    0:*/		return 0x82185890;
		  /* 82185890h */ case    1:  		/* addi R11, R11, 4 */
		/* 82185890h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82185890h case    1:*/		return 0x82185894;
		  /* 82185894h */ case    2:  		/* cmplw CR6, R8, R7 */
		/* 82185894h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 82185894h case    2:*/		return 0x82185898;
		  /* 82185898h */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 82185898h case    3:*/		if ( regs.CR[6].lt ) { return 0x82185848;  }
		/* 82185898h case    3:*/		return 0x8218589C;
		  /* 8218589Ch */ case    4:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8218589Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8218589Ch case    4:*/		return 0x821858A0;
		  /* 821858A0h */ case    5:  		/* mtspr CTR, R7 */
		/* 821858A0h case    5:*/		regs.CTR = regs.R7;
		/* 821858A0h case    5:*/		return 0x821858A4;
		  /* 821858A4h */ case    6:  		/* rlwinm R4, R10, 31, 3, 29 */
		/* 821858A4h case    6:*/		cpu::op::rlwinm<0,31,3,29>(regs,&regs.R4,regs.R10);
		/* 821858A4h case    6:*/		return 0x821858A8;
		  /* 821858A8h */ case    7:  		/* addi R11, R11, 3 */
		/* 821858A8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 821858A8h case    7:*/		return 0x821858AC;
		  /* 821858ACh */ case    8:  		/* addi R9, R1, -156 */
		/* 821858ACh case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF64);
		/* 821858ACh case    8:*/		return 0x821858B0;
		  /* 821858B0h */ case    9:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821858B0h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821858B0h case    9:*/		return 0x821858B4;
		  /* 821858B4h */ case   10:  		/* rlwinm R5, R10, 2, 27, 29 */
		/* 821858B4h case   10:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R5,regs.R10);
		/* 821858B4h case   10:*/		return 0x821858B8;
		  /* 821858B8h */ case   11:  		/* slw R11, R23, R11 */
		/* 821858B8h case   11:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821858B8h case   11:*/		return 0x821858BC;
		  /* 821858BCh */ case   12:  		/* lwzx R9, <#[R4 + R9]> */
		/* 821858BCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + regs.R9 + 0x00000000) );
		/* 821858BCh case   12:*/		return 0x821858C0;
		  /* 821858C0h */ case   13:  		/* addi R11, R11, -1 */
		/* 821858C0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821858C0h case   13:*/		return 0x821858C4;
		  /* 821858C4h */ case   14:  		/* slw R8, R21, R5 */
		/* 821858C4h case   14:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R21,regs.R5);
		/* 821858C4h case   14:*/		return 0x821858C8;
		  /* 821858C8h */ case   15:  		/* and R11, R11, R9 */
		/* 821858C8h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821858C8h case   15:*/		return 0x821858CC;
		  /* 821858CCh */ case   16:  		/* mr R6, R18 */
		/* 821858CCh case   16:*/		regs.R6 = regs.R18;
		/* 821858CCh case   16:*/		return 0x821858D0;
		  /* 821858D0h */ case   17:  		/* and R11, R11, R8 */
		/* 821858D0h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821858D0h case   17:*/		return 0x821858D4;
		  /* 821858D4h */ case   18:  		/* srw R11, R11, R5 */
		/* 821858D4h case   18:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821858D4h case   18:*/		return 0x821858D8;
		  /* 821858D8h */ case   19:  		/* andc R11, R29, R11 */
		/* 821858D8h case   19:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821858D8h case   19:*/		return 0x821858DC;
		  /* 821858DCh */ case   20:  		/* addi R9, R11, -1 */
		/* 821858DCh case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821858DCh case   20:*/		return 0x821858E0;
		  /* 821858E0h */ case   21:  		/* andc R11, R11, R9 */
		/* 821858E0h case   21:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821858E0h case   21:*/		return 0x821858E4;
		  /* 821858E4h */ case   22:  		/* subf R29, R11, R29 */
		/* 821858E4h case   22:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821858E4h case   22:*/		return 0x821858E8;
		  /* 821858E8h */ case   23:  		/* addi R9, R6, 3 */
		/* 821858E8h case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0x3);
		/* 821858E8h case   23:*/		return 0x821858EC;
		  /* 821858ECh */ case   24:  		/* rlwinm R8, R6, 0, 27, 31 */
		/* 821858ECh case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R6);
		/* 821858ECh case   24:*/		return 0x821858F0;
		  /* 821858F0h */ case   25:  		/* rlwinm R30, R9, 0, 27, 31 */
		/* 821858F0h case   25:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R9);
		/* 821858F0h case   25:*/		return 0x821858F4;
		  /* 821858F4h */ case   26:  		/* rlwinm R9, R6, 29, 3, 29 */
		/* 821858F4h case   26:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R6);
		/* 821858F4h case   26:*/		return 0x821858F8;
		  /* 821858F8h */ case   27:  		/* slw R30, R23, R30 */
		/* 821858F8h case   27:*/		cpu::op::slw<0>(regs,&regs.R30,regs.R23,regs.R30);
		/* 821858F8h case   27:*/		return 0x821858FC;
		  /* 821858FCh */ case   28:  		/* addi R31, R1, -156 */
		/* 821858FCh case   28:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF64);
		/* 821858FCh case   28:*/		return 0x82185900;
		  /* 82185900h */ case   29:  		/* addi R30, R30, -1 */
		/* 82185900h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82185900h case   29:*/		return 0x82185904;
		  /* 82185904h */ case   30:  		/* slw R26, R21, R8 */
		/* 82185904h case   30:*/		cpu::op::slw<0>(regs,&regs.R26,regs.R21,regs.R8);
		/* 82185904h case   30:*/		return 0x82185908;
		  /* 82185908h */ case   31:  		/* lwzx R27, <#[R9 + R31]> */
		/* 82185908h case   31:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 82185908h case   31:*/		return 0x8218590C;
		  /* 8218590Ch */ case   32:  		/* and R30, R30, R26 */
		/* 8218590Ch case   32:*/		cpu::op::and<0>(regs,&regs.R30,regs.R30,regs.R26);
		/* 8218590Ch case   32:*/		return 0x82185910;
		  /* 82185910h */ case   33:  		/* and R30, R30, R27 */
		/* 82185910h case   33:*/		cpu::op::and<0>(regs,&regs.R30,regs.R30,regs.R27);
		/* 82185910h case   33:*/		return 0x82185914;
		  /* 82185914h */ case   34:  		/* srw R30, R30, R8 */
		/* 82185914h case   34:*/		cpu::op::srw<0>(regs,&regs.R30,regs.R30,regs.R8);
		/* 82185914h case   34:*/		return 0x82185918;
		  /* 82185918h */ case   35:  		/* and. R30, R30, R11 */
		/* 82185918h case   35:*/		cpu::op::and<1>(regs,&regs.R30,regs.R30,regs.R11);
		/* 82185918h case   35:*/		return 0x8218591C;
		  /* 8218591Ch */ case   36:  		/* bc 4, CR0_EQ, 44 */
		/* 8218591Ch case   36:*/		if ( !regs.CR[0].eq ) { return 0x82185948;  }
		/* 8218591Ch case   36:*/		return 0x82185920;
		  /* 82185920h */ case   37:  		/* addi R30, R1, -160 */
		/* 82185920h case   37:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xFFFFFF60);
		/* 82185920h case   37:*/		return 0x82185924;
		  /* 82185924h */ case   38:  		/* li R26, 1 */
		/* 82185924h case   38:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82185924h case   38:*/		return 0x82185928;
		  /* 82185928h */ case   39:  		/* slw R25, R11, R8 */
		/* 82185928h case   39:*/		cpu::op::slw<0>(regs,&regs.R25,regs.R11,regs.R8);
		/* 82185928h case   39:*/		return 0x8218592C;
		  /* 8218592Ch */ case   40:  		/* lwzx R24, <#[R9 + R30]> */
		/* 8218592Ch case   40:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 8218592Ch case   40:*/		return 0x82185930;
		  /* 82185930h */ case   41:  		/* rlwinm R27, R27, 0, 0, 31 */
		/* 82185930h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R27,regs.R27);
		/* 82185930h case   41:*/		return 0x82185934;
		  /* 82185934h */ case   42:  		/* slw R8, R26, R8 */
		/* 82185934h case   42:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R26,regs.R8);
		/* 82185934h case   42:*/		return 0x82185938;
		  /* 82185938h */ case   43:  		/* subf R8, R8, R24 */
		/* 82185938h case   43:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R24);
		/* 82185938h case   43:*/		return 0x8218593C;
		  /* 8218593Ch */ case   44:  		/* or R27, R25, R27 */
		/* 8218593Ch case   44:*/		cpu::op::or<0>(regs,&regs.R27,regs.R25,regs.R27);
		/* 8218593Ch case   44:*/		return 0x82185940;
		  /* 82185940h */ case   45:  		/* stwx R8, <#[R9 + R30]> */
		/* 82185940h case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82185940h case   45:*/		return 0x82185944;
		  /* 82185944h */ case   46:  		/* stwx R27, <#[R9 + R31]> */
		/* 82185944h case   46:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 82185944h case   46:*/		return 0x82185948;
	}
	return 0x82185948;
} // Block from 8218588Ch-82185948h (47 instructions)

//////////////////////////////////////////////////////
// Block at 82185948h
// Function '?BuildInterferenceFromLiveness@Compiler@D3DXShader@@AAAXPA_KK_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185948);
		  /* 82185948h */ case    0:  		/* addi R6, R6, 4 */
		/* 82185948h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82185948h case    0:*/		return 0x8218594C;
		  /* 8218594Ch */ case    1:  		/* bc 16, CR0_LT, -100 */
		/* 8218594Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821858E8;  }
		/* 8218594Ch case    1:*/		return 0x82185950;
		  /* 82185950h */ case    2:  		/* cntlzw R11, R11 */
		/* 82185950h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82185950h case    2:*/		return 0x82185954;
		  /* 82185954h */ case    3:  		/* rlwinm R8, R10, 30, 3, 29 */
		/* 82185954h case    3:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R8,regs.R10);
		/* 82185954h case    3:*/		return 0x82185958;
		  /* 82185958h */ case    4:  		/* addi R9, R1, -160 */
		/* 82185958h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF60);
		/* 82185958h case    4:*/		return 0x8218595C;
		  /* 8218595Ch */ case    5:  		/* rlwinm R10, R10, 1, 27, 30 */
		/* 8218595Ch case    5:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R10,regs.R10);
		/* 8218595Ch case    5:*/		return 0x82185960;
		  /* 82185960h */ case    6:  		/* subfic R11, R11, 31 */
		/* 82185960h case    6:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82185960h case    6:*/		return 0x82185964;
		  /* 82185964h */ case    7:  		/* li R6, 8 */
		/* 82185964h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 82185964h case    7:*/		return 0x82185968;
		  /* 82185968h */ case    8:  		/* slw R11, R11, R10 */
		/* 82185968h case    8:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82185968h case    8:*/		return 0x8218596C;
		  /* 8218596Ch */ case    9:  		/* lwzx R31, <#[R8 + R3]> */
		/* 8218596Ch case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8218596Ch case    9:*/		return 0x82185970;
		  /* 82185970h */ case   10:  		/* lwzx R30, <#[R4 + R9]> */
		/* 82185970h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + regs.R9 + 0x00000000) );
		/* 82185970h case   10:*/		return 0x82185974;
		  /* 82185974h */ case   11:  		/* slw R10, R6, R5 */
		/* 82185974h case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R6,regs.R5);
		/* 82185974h case   11:*/		return 0x82185978;
		  /* 82185978h */ case   12:  		/* or R11, R11, R31 */
		/* 82185978h case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 82185978h case   12:*/		return 0x8218597C;
		  /* 8218597Ch */ case   13:  		/* or R10, R10, R30 */
		/* 8218597Ch case   13:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 8218597Ch case   13:*/		return 0x82185980;
		  /* 82185980h */ case   14:  		/* addi R28, R28, 1 */
		/* 82185980h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82185980h case   14:*/		return 0x82185984;
		  /* 82185984h */ case   15:  		/* stwx R11, <#[R8 + R3]> */
		/* 82185984h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82185984h case   15:*/		return 0x82185988;
		  /* 82185988h */ case   16:  		/* stwx R10, <#[R4 + R9]> */
		/* 82185988h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + regs.R9 + 0x00000000) );
		/* 82185988h case   16:*/		return 0x8218598C;
		  /* 8218598Ch */ case   17:  		/* cmplw CR6, R28, R7 */
		/* 8218598Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R7);
		/* 8218598Ch case   17:*/		return 0x82185990;
		  /* 82185990h */ case   18:  		/* bc 12, CR6_LT, -344 */
		/* 82185990h case   18:*/		if ( regs.CR[6].lt ) { return 0x82185838;  }
		/* 82185990h case   18:*/		return 0x82185994;
	}
	return 0x82185994;
} // Block from 82185948h-82185994h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82185994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185994);
		  /* 82185994h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82185994h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82185994h case    0:*/		return 0x82185998;
		  /* 82185998h */ case    1:  		/* subf R10, R29, R17 */
		/* 82185998h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R29,regs.R17);
		/* 82185998h case    1:*/		return 0x8218599C;
		  /* 8218599Ch */ case    2:  		/* ori R11, R11, 256 */
		/* 8218599Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8218599Ch case    2:*/		return 0x821859A0;
		  /* 821859A0h */ case    3:  		/* rlwinm R10, R10, 10, 0, 21 */
		/* 821859A0h case    3:*/		cpu::op::rlwinm<0,10,0,21>(regs,&regs.R10,regs.R10);
		/* 821859A0h case    3:*/		return 0x821859A4;
		  /* 821859A4h */ case    4:  		/* stw R11, <#[R3]> */
		/* 821859A4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821859A4h case    4:*/		return 0x821859A8;
		  /* 821859A8h */ case    5:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821859A8h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821859A8h case    5:*/		return 0x821859AC;
		  /* 821859ACh */ case    6:  		/* or R11, R10, R11 */
		/* 821859ACh case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821859ACh case    6:*/		return 0x821859B0;
		  /* 821859B0h */ case    7:  		/* stw R11, <#[R3]> */
		/* 821859B0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821859B0h case    7:*/		return 0x821859B4;
	}
	return 0x821859B4;
} // Block from 82185994h-821859B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821859B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821859B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821859B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821859B4);
		  /* 821859B4h */ case    0:  		/* b -1001284 */
		/* 821859B4h case    0:*/		return 0x82091270;
		/* 821859B4h case    0:*/		return 0x821859B8;
	}
	return 0x821859B8;
} // Block from 821859B4h-821859B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821859B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821859B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821859B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821859B8);
		  /* 821859B8h */ case    0:  		/* mfspr R12, LR */
		/* 821859B8h case    0:*/		regs.R12 = regs.LR;
		/* 821859B8h case    0:*/		return 0x821859BC;
		  /* 821859BCh */ case    1:  		/* bl -1001344 */
		/* 821859BCh case    1:*/		regs.LR = 0x821859C0; return 0x8209123C;
		/* 821859BCh case    1:*/		return 0x821859C0;
		  /* 821859C0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821859C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821859C0h case    2:*/		return 0x821859C4;
		  /* 821859C4h */ case    3:  		/* lwz R11, <#[R4 + 192]> */
		/* 821859C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000C0) );
		/* 821859C4h case    3:*/		return 0x821859C8;
		  /* 821859C8h */ case    4:  		/* mr R30, R4 */
		/* 821859C8h case    4:*/		regs.R30 = regs.R4;
		/* 821859C8h case    4:*/		return 0x821859CC;
		  /* 821859CCh */ case    5:  		/* mr R25, R5 */
		/* 821859CCh case    5:*/		regs.R25 = regs.R5;
		/* 821859CCh case    5:*/		return 0x821859D0;
		  /* 821859D0h */ case    6:  		/* mr R23, R6 */
		/* 821859D0h case    6:*/		regs.R23 = regs.R6;
		/* 821859D0h case    6:*/		return 0x821859D4;
		  /* 821859D4h */ case    7:  		/* mr R26, R7 */
		/* 821859D4h case    7:*/		regs.R26 = regs.R7;
		/* 821859D4h case    7:*/		return 0x821859D8;
		  /* 821859D8h */ case    8:  		/* mr R22, R8 */
		/* 821859D8h case    8:*/		regs.R22 = regs.R8;
		/* 821859D8h case    8:*/		return 0x821859DC;
		  /* 821859DCh */ case    9:  		/* mr R21, R9 */
		/* 821859DCh case    9:*/		regs.R21 = regs.R9;
		/* 821859DCh case    9:*/		return 0x821859E0;
		  /* 821859E0h */ case   10:  		/* mr R27, R10 */
		/* 821859E0h case   10:*/		regs.R27 = regs.R10;
		/* 821859E0h case   10:*/		return 0x821859E4;
		  /* 821859E4h */ case   11:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821859E4h case   11:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821859E4h case   11:*/		return 0x821859E8;
		  /* 821859E8h */ case   12:  		/* li R24, 0 */
		/* 821859E8h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821859E8h case   12:*/		return 0x821859EC;
		  /* 821859ECh */ case   13:  		/* bc 4, CR0_EQ, 24 */
		/* 821859ECh case   13:*/		if ( !regs.CR[0].eq ) { return 0x82185A04;  }
		/* 821859ECh case   13:*/		return 0x821859F0;
		  /* 821859F0h */ case   14:  		/* std R24, <#[R10 + 8]> */
		/* 821859F0h case   14:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 821859F0h case   14:*/		return 0x821859F4;
		  /* 821859F4h */ case   15:  		/* std R24, <#[R10 + 16]> */
		/* 821859F4h case   15:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000010) );
		/* 821859F4h case   15:*/		return 0x821859F8;
		  /* 821859F8h */ case   16:  		/* std R24, <#[R10 + 24]> */
		/* 821859F8h case   16:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000018) );
		/* 821859F8h case   16:*/		return 0x821859FC;
		  /* 821859FCh */ case   17:  		/* std R24, <#[R10 + 32]> */
		/* 821859FCh case   17:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000020) );
		/* 821859FCh case   17:*/		return 0x82185A00;
		  /* 82185A00h */ case   18:  		/* b 240 */
		/* 82185A00h case   18:*/		return 0x82185AF0;
		/* 82185A00h case   18:*/		return 0x82185A04;
	}
	return 0x82185A04;
} // Block from 821859B8h-82185A04h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82185A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185A04);
		  /* 82185A04h */ case    0:  		/* ld R10, <#[R30 + 40]> */
		/* 82185A04h case    0:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 82185A04h case    0:*/		return 0x82185A08;
		  /* 82185A08h */ case    1:  		/* addi R11, R27, 8 */
		/* 82185A08h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 82185A08h case    1:*/		return 0x82185A0C;
		  /* 82185A0Ch */ case    2:  		/* addi R9, R30, 40 */
		/* 82185A0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x28);
		/* 82185A0Ch case    2:*/		return 0x82185A10;
		  /* 82185A10h */ case    3:  		/* li R7, 1 */
		/* 82185A10h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82185A10h case    3:*/		return 0x82185A14;
		  /* 82185A14h */ case    4:  		/* std R10, <#[R27 + 8]> */
		/* 82185A14h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 82185A14h case    4:*/		return 0x82185A18;
		  /* 82185A18h */ case    5:  		/* ld R10, <#[R30 + 48]> */
		/* 82185A18h case    5:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 82185A18h case    5:*/		return 0x82185A1C;
		  /* 82185A1Ch */ case    6:  		/* std R10, <#[R27 + 16]> */
		/* 82185A1Ch case    6:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 82185A1Ch case    6:*/		return 0x82185A20;
		  /* 82185A20h */ case    7:  		/* ld R10, <#[R30 + 56]> */
		/* 82185A20h case    7:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 82185A20h case    7:*/		return 0x82185A24;
		  /* 82185A24h */ case    8:  		/* std R10, <#[R27 + 24]> */
		/* 82185A24h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 82185A24h case    8:*/		return 0x82185A28;
		  /* 82185A28h */ case    9:  		/* ld R10, <#[R30 + 64]> */
		/* 82185A28h case    9:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00000040) );
		/* 82185A28h case    9:*/		return 0x82185A2C;
		  /* 82185A2Ch */ case   10:  		/* std R10, <#[R27 + 32]> */
		/* 82185A2Ch case   10:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R27 + 0x00000020) );
		/* 82185A2Ch case   10:*/		return 0x82185A30;
		  /* 82185A30h */ case   11:  		/* lwz R10, <#[R30 + 192]> */
		/* 82185A30h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000000C0) );
		/* 82185A30h case   11:*/		return 0x82185A34;
		  /* 82185A34h */ case   12:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82185A34h case   12:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82185A34h case   12:*/		return 0x82185A38;
		  /* 82185A38h */ case   13:  		/* cmplwi CR6, R10, 1 */
		/* 82185A38h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82185A38h case   13:*/		return 0x82185A3C;
		  /* 82185A3Ch */ case   14:  		/* bc 4, CR6_GT, 80 */
		/* 82185A3Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x82185A8C;  }
		/* 82185A3Ch case   14:*/		return 0x82185A40;
		  /* 82185A40h */ case   15:  		/* li R6, 10 */
		/* 82185A40h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 82185A40h case   15:*/		return 0x82185A44;
		  /* 82185A44h */ case   16:  		/* li R8, 4 */
		/* 82185A44h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82185A44h case   16:*/		return 0x82185A48;
		  /* 82185A48h */ case   17:  		/* mr R10, R24 */
		/* 82185A48h case   17:*/		regs.R10 = regs.R24;
		/* 82185A48h case   17:*/		return 0x82185A4C;
		  /* 82185A4Ch */ case   18:  		/* addi R9, R11, -8 */
		/* 82185A4Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFF8);
		/* 82185A4Ch case   18:*/		return 0x82185A50;
		  /* 82185A50h */ case   19:  		/* mtspr CTR, R8 */
		/* 82185A50h case   19:*/		regs.CTR = regs.R8;
		/* 82185A50h case   19:*/		return 0x82185A54;
		  /* 82185A54h */ case   20:  		/* add R8, R6, R10 */
		/* 82185A54h case   20:*/		cpu::op::add<0>(regs,&regs.R8,regs.R6,regs.R10);
		/* 82185A54h case   20:*/		return 0x82185A58;
		  /* 82185A58h */ case   21:  		/* ld R5, <#[R9 + 8]> */
		/* 82185A58h case   21:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R9 + 0x00000008) );
		/* 82185A58h case   21:*/		return 0x82185A5C;
		  /* 82185A5Ch */ case   22:  		/* addi R10, R10, 1 */
		/* 82185A5Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82185A5Ch case   22:*/		return 0x82185A60;
		  /* 82185A60h */ case   23:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 82185A60h case   23:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 82185A60h case   23:*/		return 0x82185A64;
		  /* 82185A64h */ case   24:  		/* ldx R8, <#[R8 + R30]> */
		/* 82185A64h case   24:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 82185A64h case   24:*/		return 0x82185A68;
		  /* 82185A68h */ case   25:  		/* and R8, R8, R5 */
		/* 82185A68h case   25:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 82185A68h case   25:*/		return 0x82185A6C;
		  /* 82185A6Ch */ case   26:  		/* stdu R8, <#[R9 + 8]> */
		/* 82185A6Ch case   26:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82185A6Ch case   26:*/		return 0x82185A70;
		  /* 82185A70h */ case   27:  		/* bc 16, CR0_LT, -28 */
		/* 82185A70h case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82185A54;  }
		/* 82185A70h case   27:*/		return 0x82185A74;
		  /* 82185A74h */ case   28:  		/* lwz R10, <#[R30 + 192]> */
		/* 82185A74h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000000C0) );
		/* 82185A74h case   28:*/		return 0x82185A78;
		  /* 82185A78h */ case   29:  		/* addi R7, R7, 1 */
		/* 82185A78h case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82185A78h case   29:*/		return 0x82185A7C;
		  /* 82185A7Ch */ case   30:  		/* addi R6, R6, 5 */
		/* 82185A7Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x5);
		/* 82185A7Ch case   30:*/		return 0x82185A80;
		  /* 82185A80h */ case   31:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82185A80h case   31:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82185A80h case   31:*/		return 0x82185A84;
		  /* 82185A84h */ case   32:  		/* cmplw CR6, R7, R10 */
		/* 82185A84h case   32:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 82185A84h case   32:*/		return 0x82185A88;
		  /* 82185A88h */ case   33:  		/* bc 12, CR6_LT, -68 */
		/* 82185A88h case   33:*/		if ( regs.CR[6].lt ) { return 0x82185A44;  }
		/* 82185A88h case   33:*/		return 0x82185A8C;
	}
	return 0x82185A8C;
} // Block from 82185A04h-82185A8Ch (34 instructions)

//////////////////////////////////////////////////////
// Block at 82185A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185A8C);
		  /* 82185A8Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82185A8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82185A8Ch case    0:*/		return 0x82185A90;
		  /* 82185A90h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 82185A90h case    1:*/		if ( regs.CR[6].eq ) { return 0x82185AF0;  }
		/* 82185A90h case    1:*/		return 0x82185A94;
		  /* 82185A94h */ case    2:  		/* lwz R10, <#[R25 + 192]> */
		/* 82185A94h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x000000C0) );
		/* 82185A94h case    2:*/		return 0x82185A98;
		  /* 82185A98h */ case    3:  		/* mr R6, R24 */
		/* 82185A98h case    3:*/		regs.R6 = regs.R24;
		/* 82185A98h case    3:*/		return 0x82185A9C;
		  /* 82185A9Ch */ case    4:  		/* rlwinm. R10, R10, 0, 29, 31 */
		/* 82185A9Ch case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82185A9Ch case    4:*/		return 0x82185AA0;
		  /* 82185AA0h */ case    5:  		/* bc 12, CR0_EQ, 80 */
		/* 82185AA0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82185AF0;  }
		/* 82185AA0h case    5:*/		return 0x82185AA4;
		  /* 82185AA4h */ case    6:  		/* li R7, 5 */
		/* 82185AA4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5);
		/* 82185AA4h case    6:*/		return 0x82185AA8;
		  /* 82185AA8h */ case    7:  		/* li R8, 4 */
		/* 82185AA8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82185AA8h case    7:*/		return 0x82185AAC;
		  /* 82185AACh */ case    8:  		/* mr R10, R24 */
		/* 82185AACh case    8:*/		regs.R10 = regs.R24;
		/* 82185AACh case    8:*/		return 0x82185AB0;
		  /* 82185AB0h */ case    9:  		/* addi R9, R11, -8 */
		/* 82185AB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFF8);
		/* 82185AB0h case    9:*/		return 0x82185AB4;
		  /* 82185AB4h */ case   10:  		/* mtspr CTR, R8 */
		/* 82185AB4h case   10:*/		regs.CTR = regs.R8;
		/* 82185AB4h case   10:*/		return 0x82185AB8;
		  /* 82185AB8h */ case   11:  		/* add R8, R7, R10 */
		/* 82185AB8h case   11:*/		cpu::op::add<0>(regs,&regs.R8,regs.R7,regs.R10);
		/* 82185AB8h case   11:*/		return 0x82185ABC;
		  /* 82185ABCh */ case   12:  		/* ld R5, <#[R9 + 8]> */
		/* 82185ABCh case   12:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R9 + 0x00000008) );
		/* 82185ABCh case   12:*/		return 0x82185AC0;
		  /* 82185AC0h */ case   13:  		/* addi R10, R10, 1 */
		/* 82185AC0h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82185AC0h case   13:*/		return 0x82185AC4;
		  /* 82185AC4h */ case   14:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 82185AC4h case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 82185AC4h case   14:*/		return 0x82185AC8;
		  /* 82185AC8h */ case   15:  		/* ldx R8, <#[R8 + R25]> */
		/* 82185AC8h case   15:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R25 + 0x00000000) );
		/* 82185AC8h case   15:*/		return 0x82185ACC;
		  /* 82185ACCh */ case   16:  		/* and R8, R8, R5 */
		/* 82185ACCh case   16:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 82185ACCh case   16:*/		return 0x82185AD0;
		  /* 82185AD0h */ case   17:  		/* stdu R8, <#[R9 + 8]> */
		/* 82185AD0h case   17:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82185AD0h case   17:*/		return 0x82185AD4;
		  /* 82185AD4h */ case   18:  		/* bc 16, CR0_LT, -28 */
		/* 82185AD4h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82185AB8;  }
		/* 82185AD4h case   18:*/		return 0x82185AD8;
		  /* 82185AD8h */ case   19:  		/* lwz R10, <#[R25 + 192]> */
		/* 82185AD8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x000000C0) );
		/* 82185AD8h case   19:*/		return 0x82185ADC;
		  /* 82185ADCh */ case   20:  		/* addi R6, R6, 1 */
		/* 82185ADCh case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82185ADCh case   20:*/		return 0x82185AE0;
		  /* 82185AE0h */ case   21:  		/* addi R7, R7, 5 */
		/* 82185AE0h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x5);
		/* 82185AE0h case   21:*/		return 0x82185AE4;
		  /* 82185AE4h */ case   22:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82185AE4h case   22:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82185AE4h case   22:*/		return 0x82185AE8;
		  /* 82185AE8h */ case   23:  		/* cmplw CR6, R6, R10 */
		/* 82185AE8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 82185AE8h case   23:*/		return 0x82185AEC;
		  /* 82185AECh */ case   24:  		/* bc 12, CR6_LT, -68 */
		/* 82185AECh case   24:*/		if ( regs.CR[6].lt ) { return 0x82185AA8;  }
		/* 82185AECh case   24:*/		return 0x82185AF0;
	}
	return 0x82185AF0;
} // Block from 82185A8Ch-82185AF0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82185AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185AF0);
		  /* 82185AF0h */ case    0:  		/* li R4, 0 */
		/* 82185AF0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82185AF0h case    0:*/		return 0x82185AF4;
		  /* 82185AF4h */ case    1:  		/* mr R28, R24 */
		/* 82185AF4h case    1:*/		regs.R28 = regs.R24;
		/* 82185AF4h case    1:*/		return 0x82185AF8;
		  /* 82185AF8h */ case    2:  		/* mr R29, R24 */
		/* 82185AF8h case    2:*/		regs.R29 = regs.R24;
		/* 82185AF8h case    2:*/		return 0x82185AFC;
		  /* 82185AFCh */ case    3:  		/* b 112 */
		/* 82185AFCh case    3:*/		return 0x82185B6C;
		/* 82185AFCh case    3:*/		return 0x82185B00;
		  /* 82185B00h */ case    4:  		/* mr R10, R31 */
		/* 82185B00h case    4:*/		regs.R10 = regs.R31;
		/* 82185B00h case    4:*/		return 0x82185B04;
		  /* 82185B04h */ case    5:  		/* mr R9, R21 */
		/* 82185B04h case    5:*/		regs.R9 = regs.R21;
		/* 82185B04h case    5:*/		return 0x82185B08;
		  /* 82185B08h */ case    6:  		/* mr R8, R22 */
		/* 82185B08h case    6:*/		regs.R8 = regs.R22;
		/* 82185B08h case    6:*/		return 0x82185B0C;
		  /* 82185B0Ch */ case    7:  		/* mr R7, R26 */
		/* 82185B0Ch case    7:*/		regs.R7 = regs.R26;
		/* 82185B0Ch case    7:*/		return 0x82185B10;
		  /* 82185B10h */ case    8:  		/* mr R6, R23 */
		/* 82185B10h case    8:*/		regs.R6 = regs.R23;
		/* 82185B10h case    8:*/		return 0x82185B14;
		  /* 82185B14h */ case    9:  		/* mr R5, R25 */
		/* 82185B14h case    9:*/		regs.R5 = regs.R25;
		/* 82185B14h case    9:*/		return 0x82185B18;
		  /* 82185B18h */ case   10:  		/* mr R4, R30 */
		/* 82185B18h case   10:*/		regs.R4 = regs.R30;
		/* 82185B18h case   10:*/		return 0x82185B1C;
		  /* 82185B1Ch */ case   11:  		/* addi R3, R1, 80 */
		/* 82185B1Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82185B1Ch case   11:*/		return 0x82185B20;
		  /* 82185B20h */ case   12:  		/* bl -1304 */
		/* 82185B20h case   12:*/		regs.LR = 0x82185B24; return 0x82185608;
		/* 82185B20h case   12:*/		return 0x82185B24;
		  /* 82185B24h */ case   13:  		/* lwz R11, <#[R1 + 80]> */
		/* 82185B24h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82185B24h case   13:*/		return 0x82185B28;
		  /* 82185B28h */ case   14:  		/* rlwinm. R10, R11, 0, 22, 23 */
		/* 82185B28h case   14:*/		cpu::op::rlwinm<1,0,22,23>(regs,&regs.R10,regs.R11);
		/* 82185B28h case   14:*/		return 0x82185B2C;
		  /* 82185B2Ch */ case   15:  		/* bc 4, CR0_EQ, 96 */
		/* 82185B2Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x82185B8C;  }
		/* 82185B2Ch case   15:*/		return 0x82185B30;
		  /* 82185B30h */ case   16:  		/* lwz R11, <#[R30 + 192]> */
		/* 82185B30h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C0) );
		/* 82185B30h case   16:*/		return 0x82185B34;
		  /* 82185B34h */ case   17:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82185B34h case   17:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82185B34h case   17:*/		return 0x82185B38;
		  /* 82185B38h */ case   18:  		/* bc 12, CR0_EQ, 44 */
		/* 82185B38h case   18:*/		if ( regs.CR[0].eq ) { return 0x82185B64;  }
		/* 82185B38h case   18:*/		return 0x82185B3C;
		  /* 82185B3Ch */ case   19:  		/* li R11, 1 */
		/* 82185B3Ch case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82185B3Ch case   19:*/		return 0x82185B40;
		  /* 82185B40h */ case   20:  		/* mr R3, R27 */
		/* 82185B40h case   20:*/		regs.R3 = regs.R27;
		/* 82185B40h case   20:*/		return 0x82185B44;
		  /* 82185B44h */ case   21:  		/* slw R4, R11, R29 */
		/* 82185B44h case   21:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R11,regs.R29);
		/* 82185B44h case   21:*/		return 0x82185B48;
		  /* 82185B48h */ case   22:  		/* rlwimi R4, R28, 4, 0, 27 */
		/* 82185B48h case   22:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R4,regs.R28);
		/* 82185B48h case   22:*/		return 0x82185B4C;
		  /* 82185B4Ch */ case   23:  		/* bl -91308 */
		/* 82185B4Ch case   23:*/		regs.LR = 0x82185B50; return 0x8216F6A0;
		/* 82185B4Ch case   23:*/		return 0x82185B50;
		  /* 82185B50h */ case   24:  		/* addi R29, R29, 1 */
		/* 82185B50h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82185B50h case   24:*/		return 0x82185B54;
		  /* 82185B54h */ case   25:  		/* add R11, R29, R26 */
		/* 82185B54h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R26);
		/* 82185B54h case   25:*/		return 0x82185B58;
		  /* 82185B58h */ case   26:  		/* cmplwi CR6, R11, 4 */
		/* 82185B58h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82185B58h case   26:*/		return 0x82185B5C;
		  /* 82185B5Ch */ case   27:  		/* bc 4, CR6_GT, 12 */
		/* 82185B5Ch case   27:*/		if ( !regs.CR[6].gt ) { return 0x82185B68;  }
		/* 82185B5Ch case   27:*/		return 0x82185B60;
		  /* 82185B60h */ case   28:  		/* mr R29, R24 */
		/* 82185B60h case   28:*/		regs.R29 = regs.R24;
		/* 82185B60h case   28:*/		return 0x82185B64;
	}
	return 0x82185B64;
} // Block from 82185AF0h-82185B64h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82185B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185B64);
		  /* 82185B64h */ case    0:  		/* addi R28, R28, 1 */
		/* 82185B64h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82185B64h case    0:*/		return 0x82185B68;
	}
	return 0x82185B68;
} // Block from 82185B64h-82185B68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82185B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185B68);
		  /* 82185B68h */ case    0:  		/* mr R4, R28 */
		/* 82185B68h case    0:*/		regs.R4 = regs.R28;
		/* 82185B68h case    0:*/		return 0x82185B6C;
	}
	return 0x82185B6C;
} // Block from 82185B68h-82185B6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82185B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185B6C);
		  /* 82185B6Ch */ case    0:  		/* li R6, 4 */
		/* 82185B6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82185B6Ch case    0:*/		return 0x82185B70;
		  /* 82185B70h */ case    1:  		/* mr R5, R26 */
		/* 82185B70h case    1:*/		regs.R5 = regs.R26;
		/* 82185B70h case    1:*/		return 0x82185B74;
		  /* 82185B74h */ case    2:  		/* mr R3, R27 */
		/* 82185B74h case    2:*/		regs.R3 = regs.R27;
		/* 82185B74h case    2:*/		return 0x82185B78;
		  /* 82185B78h */ case    3:  		/* bl -62128 */
		/* 82185B78h case    3:*/		regs.LR = 0x82185B7C; return 0x821768C8;
		/* 82185B78h case    3:*/		return 0x82185B7C;
		  /* 82185B7Ch */ case    4:  		/* mr R31, R3 */
		/* 82185B7Ch case    4:*/		regs.R31 = regs.R3;
		/* 82185B7Ch case    4:*/		return 0x82185B80;
		  /* 82185B80h */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 82185B80h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82185B80h case    5:*/		return 0x82185B84;
		  /* 82185B84h */ case    6:  		/* bc 4, CR6_EQ, -132 */
		/* 82185B84h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82185B00;  }
		/* 82185B84h case    6:*/		return 0x82185B88;
		  /* 82185B88h */ case    7:  		/* b 20 */
		/* 82185B88h case    7:*/		return 0x82185B9C;
		/* 82185B88h case    7:*/		return 0x82185B8C;
	}
	return 0x82185B8C;
} // Block from 82185B6Ch-82185B8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82185B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185B8C);
		  /* 82185B8Ch */ case    0:  		/* lwz R10, <#[R1 + 276]> */
		/* 82185B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 82185B8Ch case    0:*/		return 0x82185B90;
		  /* 82185B90h */ case    1:  		/* mr R3, R31 */
		/* 82185B90h case    1:*/		regs.R3 = regs.R31;
		/* 82185B90h case    1:*/		return 0x82185B94;
		  /* 82185B94h */ case    2:  		/* rlwimi R3, R11, 22, 28, 31 */
		/* 82185B94h case    2:*/		cpu::op::rlwimi<0,22,28,31>(regs,&regs.R3,regs.R11);
		/* 82185B94h case    2:*/		return 0x82185B98;
		  /* 82185B98h */ case    3:  		/* stw R11, <#[R10]> */
		/* 82185B98h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82185B98h case    3:*/		return 0x82185B9C;
	}
	return 0x82185B9C;
} // Block from 82185B8Ch-82185B9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82185B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185B9C);
		  /* 82185B9Ch */ case    0:  		/* addi R1, R1, 192 */
		/* 82185B9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82185B9Ch case    0:*/		return 0x82185BA0;
		  /* 82185BA0h */ case    1:  		/* b -1001748 */
		/* 82185BA0h case    1:*/		return 0x8209128C;
		/* 82185BA0h case    1:*/		return 0x82185BA4;
		  /* 82185BA4h */ case    2:  		/* nop */
		/* 82185BA4h case    2:*/		cpu::op::nop();
		/* 82185BA4h case    2:*/		return 0x82185BA8;
	}
	return 0x82185BA8;
} // Block from 82185B9Ch-82185BA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82185BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185BA8);
		  /* 82185BA8h */ case    0:  		/* mfspr R12, LR */
		/* 82185BA8h case    0:*/		regs.R12 = regs.LR;
		/* 82185BA8h case    0:*/		return 0x82185BAC;
		  /* 82185BACh */ case    1:  		/* bl -1001828 */
		/* 82185BACh case    1:*/		regs.LR = 0x82185BB0; return 0x82091248;
		/* 82185BACh case    1:*/		return 0x82185BB0;
		  /* 82185BB0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82185BB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82185BB0h case    2:*/		return 0x82185BB4;
		  /* 82185BB4h */ case    3:  		/* lwz R11, <#[R3 + 792]> */
		/* 82185BB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000318) );
		/* 82185BB4h case    3:*/		return 0x82185BB8;
		  /* 82185BB8h */ case    4:  		/* mr R28, R3 */
		/* 82185BB8h case    4:*/		regs.R28 = regs.R3;
		/* 82185BB8h case    4:*/		return 0x82185BBC;
		  /* 82185BBCh */ case    5:  		/* mr R29, R5 */
		/* 82185BBCh case    5:*/		regs.R29 = regs.R5;
		/* 82185BBCh case    5:*/		return 0x82185BC0;
		  /* 82185BC0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82185BC0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82185BC0h case    6:*/		return 0x82185BC4;
		  /* 82185BC4h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 82185BC4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82185BCC;  }
		/* 82185BC4h case    7:*/		return 0x82185BC8;
		  /* 82185BC8h */ case    8:  		/* li R11, 32 */
		/* 82185BC8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82185BC8h case    8:*/		return 0x82185BCC;
	}
	return 0x82185BCC;
} // Block from 82185BA8h-82185BCCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82185BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185BCC);
		  /* 82185BCCh */ case    0:  		/* cmplw CR6, R29, R11 */
		/* 82185BCCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82185BCCh case    0:*/		return 0x82185BD0;
		  /* 82185BD0h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 82185BD0h case    1:*/		if ( regs.CR[6].lt ) { return 0x82185BE0;  }
		/* 82185BD0h case    1:*/		return 0x82185BD4;
		  /* 82185BD4h */ case    2:  		/* li R4, 3564 */
		/* 82185BD4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xDEC);
		/* 82185BD4h case    2:*/		return 0x82185BD8;
		  /* 82185BD8h */ case    3:  		/* mr R3, R28 */
		/* 82185BD8h case    3:*/		regs.R3 = regs.R28;
		/* 82185BD8h case    3:*/		return 0x82185BDC;
		  /* 82185BDCh */ case    4:  		/* bl -212340 */
		/* 82185BDCh case    4:*/		regs.LR = 0x82185BE0; return 0x82151E68;
		/* 82185BDCh case    4:*/		return 0x82185BE0;
	}
	return 0x82185BE0;
} // Block from 82185BCCh-82185BE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82185BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185BE0);
		  /* 82185BE0h */ case    0:  		/* lwz R11, <#[R4 + 16]> */
		/* 82185BE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 82185BE0h case    0:*/		return 0x82185BE4;
		  /* 82185BE4h */ case    1:  		/* lwz R10, <#[R4 + 8]> */
		/* 82185BE4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 82185BE4h case    1:*/		return 0x82185BE8;
		  /* 82185BE8h */ case    2:  		/* oris R9, R11, 16 */
		/* 82185BE8h case    2:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R11,0x10);
		/* 82185BE8h case    2:*/		return 0x82185BEC;
		  /* 82185BECh */ case    3:  		/* rlwinm R30, R10, 31, 28, 31 */
		/* 82185BECh case    3:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R30,regs.R10);
		/* 82185BECh case    3:*/		return 0x82185BF0;
		  /* 82185BF0h */ case    4:  		/* rlwinm R11, R9, 0, 16, 31 */
		/* 82185BF0h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R9);
		/* 82185BF0h case    4:*/		return 0x82185BF4;
		  /* 82185BF4h */ case    5:  		/* stw R9, <#[R4 + 16]> */
		/* 82185BF4h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 82185BF4h case    5:*/		return 0x82185BF8;
		  /* 82185BF8h */ case    6:  		/* rlwinm R10, R9, 16, 29, 31 */
		/* 82185BF8h case    6:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R9);
		/* 82185BF8h case    6:*/		return 0x82185BFC;
		  /* 82185BFCh */ case    7:  		/* add R10, R11, R10 */
		/* 82185BFCh case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82185BFCh case    7:*/		return 0x82185C00;
		  /* 82185C00h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82185C00h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82185C00h case    8:*/		return 0x82185C04;
		  /* 82185C04h */ case    9:  		/* bc 4, CR6_LT, 188 */
		/* 82185C04h case    9:*/		if ( !regs.CR[6].lt ) { return 0x82185CC0;  }
		/* 82185C04h case    9:*/		return 0x82185C08;
		  /* 82185C08h */ case   10:  		/* subfic R26, R29, 63 */
		/* 82185C08h case   10:*/		cpu::op::subfic<0>(regs,&regs.R26,regs.R29,0x3F);
		/* 82185C08h case   10:*/		return 0x82185C0C;
		  /* 82185C0Ch */ case   11:  		/* addi R25, R29, 1 */
		/* 82185C0Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R29,0x1);
		/* 82185C0Ch case   11:*/		return 0x82185C10;
		  /* 82185C10h */ case   12:  		/* mulli R31, R11, 40 */
		/* 82185C10h case   12:*/		cpu::op::mulli<0>(regs,&regs.R31,regs.R11,0x28);
		/* 82185C10h case   12:*/		return 0x82185C14;
		  /* 82185C14h */ case   13:  		/* subf R24, R11, R10 */
		/* 82185C14h case   13:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R11,regs.R10);
		/* 82185C14h case   13:*/		return 0x82185C18;
		  /* 82185C18h */ case   14:  		/* addi R10, R30, -1 */
		/* 82185C18h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 82185C18h case   14:*/		return 0x82185C1C;
		  /* 82185C1Ch */ case   15:  		/* lwz R11, <#[R28 + 676]> */
		/* 82185C1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000002A4) );
		/* 82185C1Ch case   15:*/		return 0x82185C20;
		  /* 82185C20h */ case   16:  		/* mr R5, R26 */
		/* 82185C20h case   16:*/		regs.R5 = regs.R26;
		/* 82185C20h case   16:*/		return 0x82185C24;
		  /* 82185C24h */ case   17:  		/* andc R10, R30, R10 */
		/* 82185C24h case   17:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 82185C24h case   17:*/		return 0x82185C28;
		  /* 82185C28h */ case   18:  		/* mr R4, R25 */
		/* 82185C28h case   18:*/		regs.R4 = regs.R25;
		/* 82185C28h case   18:*/		return 0x82185C2C;
		  /* 82185C2Ch */ case   19:  		/* cntlzw R9, R10 */
		/* 82185C2Ch case   19:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R10);
		/* 82185C2Ch case   19:*/		return 0x82185C30;
		  /* 82185C30h */ case   20:  		/* add R3, R11, R31 */
		/* 82185C30h case   20:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R31);
		/* 82185C30h case   20:*/		return 0x82185C34;
		  /* 82185C34h */ case   21:  		/* subfic R27, R9, 31 */
		/* 82185C34h case   21:*/		cpu::op::subfic<0>(regs,&regs.R27,regs.R9,0x1F);
		/* 82185C34h case   21:*/		return 0x82185C38;
		  /* 82185C38h */ case   22:  		/* subf R30, R10, R30 */
		/* 82185C38h case   22:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R10,regs.R30);
		/* 82185C38h case   22:*/		return 0x82185C3C;
		  /* 82185C3Ch */ case   23:  		/* bl 30964 */
		/* 82185C3Ch case   23:*/		regs.LR = 0x82185C40; return 0x8218D530;
		/* 82185C3Ch case   23:*/		return 0x82185C40;
		  /* 82185C40h */ case   24:  		/* cmplwi CR6, R29, 0 */
		/* 82185C40h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82185C40h case   24:*/		return 0x82185C44;
		  /* 82185C44h */ case   25:  		/* bc 12, CR6_EQ, 24 */
		/* 82185C44h case   25:*/		if ( regs.CR[6].eq ) { return 0x82185C5C;  }
		/* 82185C44h case   25:*/		return 0x82185C48;
		  /* 82185C48h */ case   26:  		/* lwz R11, <#[R28 + 676]> */
		/* 82185C48h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000002A4) );
		/* 82185C48h case   26:*/		return 0x82185C4C;
		  /* 82185C4Ch */ case   27:  		/* mr R5, R29 */
		/* 82185C4Ch case   27:*/		regs.R5 = regs.R29;
		/* 82185C4Ch case   27:*/		return 0x82185C50;
		  /* 82185C50h */ case   28:  		/* li R4, 0 */
		/* 82185C50h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82185C50h case   28:*/		return 0x82185C54;
		  /* 82185C54h */ case   29:  		/* add R3, R11, R31 */
		/* 82185C54h case   29:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R31);
		/* 82185C54h case   29:*/		return 0x82185C58;
		  /* 82185C58h */ case   30:  		/* bl 30936 */
		/* 82185C58h case   30:*/		regs.LR = 0x82185C5C; return 0x8218D530;
		/* 82185C58h case   30:*/		return 0x82185C5C;
	}
	return 0x82185C5C;
} // Block from 82185BE0h-82185C5Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 82185C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185C5C);
		  /* 82185C5Ch */ case    0:  		/* li R7, 0 */
		/* 82185C5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82185C5Ch case    0:*/		return 0x82185C60;
		  /* 82185C60h */ case    1:  		/* li R9, 0 */
		/* 82185C60h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82185C60h case    1:*/		return 0x82185C64;
		  /* 82185C64h */ case    2:  		/* cmplw CR6, R7, R27 */
		/* 82185C64h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R27);
		/* 82185C64h case    2:*/		return 0x82185C68;
		  /* 82185C68h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 82185C68h case    3:*/		if ( regs.CR[6].eq ) { return 0x82185CA4;  }
		/* 82185C68h case    3:*/		return 0x82185C6C;
		  /* 82185C6Ch */ case    4:  		/* lwz R10, <#[R28 + 676]> */
		/* 82185C6Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000002A4) );
		/* 82185C6Ch case    4:*/		return 0x82185C70;
		  /* 82185C70h */ case    5:  		/* lis R8, 4369 */
		/* 82185C70h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0x1111);
		/* 82185C70h case    5:*/		return 0x82185C74;
		  /* 82185C74h */ case    6:  		/* li R11, 4 */
		/* 82185C74h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82185C74h case    6:*/		return 0x82185C78;
		  /* 82185C78h */ case    7:  		/* ori R8, R8, 4369 */
		/* 82185C78h case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1111);
		/* 82185C78h case    7:*/		return 0x82185C7C;
		  /* 82185C7Ch */ case    8:  		/* add R10, R10, R31 */
		/* 82185C7Ch case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 82185C7Ch case    8:*/		return 0x82185C80;
		  /* 82185C80h */ case    9:  		/* rldimi R8, R8, 32, 0 */
		/* 82185C80h case    9:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R8,regs.R8);
		/* 82185C80h case    9:*/		return 0x82185C84;
		  /* 82185C84h */ case   10:  		/* addi R10, R10, 8 */
		/* 82185C84h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82185C84h case   10:*/		return 0x82185C88;
		  /* 82185C88h */ case   11:  		/* mtspr CTR, R11 */
		/* 82185C88h case   11:*/		regs.CTR = regs.R11;
		/* 82185C88h case   11:*/		return 0x82185C8C;
		  /* 82185C8Ch */ case   12:  		/* sld R8, R8, R9 */
		/* 82185C8Ch case   12:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 82185C8Ch case   12:*/		return 0x82185C90;
		  /* 82185C90h */ case   13:  		/* addi R11, R10, -8 */
		/* 82185C90h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFF8);
		/* 82185C90h case   13:*/		return 0x82185C94;
		  /* 82185C94h */ case   14:  		/* ld R10, <#[R11 + 8]> */
		/* 82185C94h case   14:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82185C94h case   14:*/		return 0x82185C98;
		  /* 82185C98h */ case   15:  		/* or R10, R10, R8 */
		/* 82185C98h case   15:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82185C98h case   15:*/		return 0x82185C9C;
		  /* 82185C9Ch */ case   16:  		/* stdu R10, <#[R11 + 8]> */
		/* 82185C9Ch case   16:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82185C9Ch case   16:*/		return 0x82185CA0;
		  /* 82185CA0h */ case   17:  		/* bc 16, CR0_LT, -12 */
		/* 82185CA0h case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82185C94;  }
		/* 82185CA0h case   17:*/		return 0x82185CA4;
	}
	return 0x82185CA4;
} // Block from 82185C5Ch-82185CA4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82185CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185CA4);
		  /* 82185CA4h */ case    0:  		/* addi R7, R7, 1 */
		/* 82185CA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82185CA4h case    0:*/		return 0x82185CA8;
		  /* 82185CA8h */ case    1:  		/* addi R9, R9, 1 */
		/* 82185CA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82185CA8h case    1:*/		return 0x82185CAC;
		  /* 82185CACh */ case    2:  		/* cmplwi CR6, R7, 4 */
		/* 82185CACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000004);
		/* 82185CACh case    2:*/		return 0x82185CB0;
		  /* 82185CB0h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 82185CB0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82185C64;  }
		/* 82185CB0h case    3:*/		return 0x82185CB4;
		  /* 82185CB4h */ case    4:  		/* addic. R24, R24, -1 */
		/* 82185CB4h case    4:*/		cpu::op::addic<1>(regs,&regs.R24,regs.R24,0xFFFFFFFF);
		/* 82185CB4h case    4:*/		return 0x82185CB8;
		  /* 82185CB8h */ case    5:  		/* addi R31, R31, 40 */
		/* 82185CB8h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x28);
		/* 82185CB8h case    5:*/		return 0x82185CBC;
		  /* 82185CBCh */ case    6:  		/* bc 4, CR0_EQ, -164 */
		/* 82185CBCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x82185C18;  }
		/* 82185CBCh case    6:*/		return 0x82185CC0;
	}
	return 0x82185CC0;
} // Block from 82185CA4h-82185CC0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82185CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185CC0);
		  /* 82185CC0h */ case    0:  		/* addi R1, R1, 160 */
		/* 82185CC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82185CC0h case    0:*/		return 0x82185CC4;
		  /* 82185CC4h */ case    1:  		/* b -1002028 */
		/* 82185CC4h case    1:*/		return 0x82091298;
		/* 82185CC4h case    1:*/		return 0x82185CC8;
	}
	return 0x82185CC8;
} // Block from 82185CC0h-82185CC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82185CC8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185CC8);
		  /* 82185CC8h */ case    0:  		/* mfspr R12, LR */
		/* 82185CC8h case    0:*/		regs.R12 = regs.LR;
		/* 82185CC8h case    0:*/		return 0x82185CCC;
		  /* 82185CCCh */ case    1:  		/* bl -1002112 */
		/* 82185CCCh case    1:*/		regs.LR = 0x82185CD0; return 0x8209124C;
		/* 82185CCCh case    1:*/		return 0x82185CD0;
		  /* 82185CD0h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 82185CD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 82185CD0h case    2:*/		return 0x82185CD4;
		  /* 82185CD4h */ case    3:  		/* addi R11, R7, 4 */
		/* 82185CD4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x4);
		/* 82185CD4h case    3:*/		return 0x82185CD8;
		  /* 82185CD8h */ case    4:  		/* rlwinm R10, R5, 29, 3, 28 */
		/* 82185CD8h case    4:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R5);
		/* 82185CD8h case    4:*/		return 0x82185CDC;
		  /* 82185CDCh */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82185CDCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82185CDCh case    5:*/		return 0x82185CE0;
		  /* 82185CE0h */ case    6:  		/* rldicl R9, R5, 0, 58 */
		/* 82185CE0h case    6:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R5);
		/* 82185CE0h case    6:*/		return 0x82185CE4;
		  /* 82185CE4h */ case    7:  		/* li R8, 1 */
		/* 82185CE4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82185CE4h case    7:*/		return 0x82185CE8;
		  /* 82185CE8h */ case    8:  		/* mr R31, R3 */
		/* 82185CE8h case    8:*/		regs.R31 = regs.R3;
		/* 82185CE8h case    8:*/		return 0x82185CEC;
		  /* 82185CECh */ case    9:  		/* sld R9, R8, R9 */
		/* 82185CECh case    9:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82185CECh case    9:*/		return 0x82185CF0;
		  /* 82185CF0h */ case   10:  		/* lwzx R11, <#[R11 + R4]> */
		/* 82185CF0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82185CF0h case   10:*/		return 0x82185CF4;
		  /* 82185CF4h */ case   11:  		/* mr R30, R4 */
		/* 82185CF4h case   11:*/		regs.R30 = regs.R4;
		/* 82185CF4h case   11:*/		return 0x82185CF8;
		  /* 82185CF8h */ case   12:  		/* mr R26, R5 */
		/* 82185CF8h case   12:*/		regs.R26 = regs.R5;
		/* 82185CF8h case   12:*/		return 0x82185CFC;
		  /* 82185CFCh */ case   13:  		/* mr R29, R6 */
		/* 82185CFCh case   13:*/		regs.R29 = regs.R6;
		/* 82185CFCh case   13:*/		return 0x82185D00;
		  /* 82185D00h */ case   14:  		/* mr R28, R7 */
		/* 82185D00h case   14:*/		regs.R28 = regs.R7;
		/* 82185D00h case   14:*/		return 0x82185D04;
		  /* 82185D04h */ case   15:  		/* li R27, 0 */
		/* 82185D04h case   15:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82185D04h case   15:*/		return 0x82185D08;
		  /* 82185D08h */ case   16:  		/* ldx R11, <#[R11 + R10]> */
		/* 82185D08h case   16:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82185D08h case   16:*/		return 0x82185D0C;
		  /* 82185D0Ch */ case   17:  		/* and R11, R11, R9 */
		/* 82185D0Ch case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82185D0Ch case   17:*/		return 0x82185D10;
		  /* 82185D10h */ case   18:  		/* cmpldi CR6, R11, 0 */
		/* 82185D10h case   18:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82185D10h case   18:*/		return 0x82185D14;
		  /* 82185D14h */ case   19:  		/* li R11, 1 */
		/* 82185D14h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82185D14h case   19:*/		return 0x82185D18;
		  /* 82185D18h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 82185D18h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82185D20;  }
		/* 82185D18h case   20:*/		return 0x82185D1C;
		  /* 82185D1Ch */ case   21:  		/* mr R11, R27 */
		/* 82185D1Ch case   21:*/		regs.R11 = regs.R27;
		/* 82185D1Ch case   21:*/		return 0x82185D20;
	}
	return 0x82185D20;
} // Block from 82185CC8h-82185D20h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82185D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185D20);
		  /* 82185D20h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82185D20h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82185D20h case    0:*/		return 0x82185D24;
		  /* 82185D24h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82185D24h case    1:*/		if ( regs.CR[0].eq ) { return 0x82185D30;  }
		/* 82185D24h case    1:*/		return 0x82185D28;
		  /* 82185D28h */ case    2:  		/* li R3, 0 */
		/* 82185D28h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82185D28h case    2:*/		return 0x82185D2C;
		  /* 82185D2Ch */ case    3:  		/* b 360 */
		/* 82185D2Ch case    3:*/		return 0x82185E94;
		/* 82185D2Ch case    3:*/		return 0x82185D30;
	}
	return 0x82185D30;
} // Block from 82185D20h-82185D30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82185D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185D30);
		  /* 82185D30h */ case    0:  		/* rlwinm R10, R28, 2, 0, 29 */
		/* 82185D30h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R28);
		/* 82185D30h case    0:*/		return 0x82185D34;
		  /* 82185D34h */ case    1:  		/* lwz R9, <#[R31 + 672]> */
		/* 82185D34h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002A0) );
		/* 82185D34h case    1:*/		return 0x82185D38;
		  /* 82185D38h */ case    2:  		/* lwz R11, <#[R31 + 684]> */
		/* 82185D38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002AC) );
		/* 82185D38h case    2:*/		return 0x82185D3C;
		  /* 82185D3Ch */ case    3:  		/* mullw R7, R9, R29 */
		/* 82185D3Ch case    3:*/		cpu::op::mullw<0>(regs,&regs.R7,regs.R9,regs.R29);
		/* 82185D3Ch case    3:*/		return 0x82185D40;
		  /* 82185D40h */ case    4:  		/* lwzx R8, <#[R10 + R30]> */
		/* 82185D40h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82185D40h case    4:*/		return 0x82185D44;
		  /* 82185D44h */ case    5:  		/* rlwinm R10, R7, 3, 0, 28 */
		/* 82185D44h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R7);
		/* 82185D44h case    5:*/		return 0x82185D48;
		  /* 82185D48h */ case    6:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82185D48h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82185D48h case    6:*/		return 0x82185D4C;
		  /* 82185D4Ch */ case    7:  		/* add R11, R10, R11 */
		/* 82185D4Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82185D4Ch case    7:*/		return 0x82185D50;
		  /* 82185D50h */ case    8:  		/* add R10, R9, R11 */
		/* 82185D50h case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 82185D50h case    8:*/		return 0x82185D54;
		  /* 82185D54h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 82185D54h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82185D54h case    9:*/		return 0x82185D58;
		  /* 82185D58h */ case   10:  		/* bc 4, CR6_LT, 40 */
		/* 82185D58h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82185D80;  }
		/* 82185D58h case   10:*/		return 0x82185D5C;
		  /* 82185D5Ch */ case   11:  		/* subf R9, R11, R8 */
		/* 82185D5Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R8);
		/* 82185D5Ch case   11:*/		return 0x82185D60;
		  /* 82185D60h */ case   12:  		/* ldx R8, <#[R9 + R11]> */
		/* 82185D60h case   12:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82185D60h case   12:*/		return 0x82185D64;
		  /* 82185D64h */ case   13:  		/* ld R7, <#[R11]> */
		/* 82185D64h case   13:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82185D64h case   13:*/		return 0x82185D68;
		  /* 82185D68h */ case   14:  		/* and R8, R8, R7 */
		/* 82185D68h case   14:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 82185D68h case   14:*/		return 0x82185D6C;
		  /* 82185D6Ch */ case   15:  		/* cmpldi CR6, R8, 0 */
		/* 82185D6Ch case   15:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 82185D6Ch case   15:*/		return 0x82185D70;
		  /* 82185D70h */ case   16:  		/* bc 4, CR6_EQ, 300 */
		/* 82185D70h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82185E9C;  }
		/* 82185D70h case   16:*/		return 0x82185D74;
		  /* 82185D74h */ case   17:  		/* addi R11, R11, 8 */
		/* 82185D74h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82185D74h case   17:*/		return 0x82185D78;
		  /* 82185D78h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 82185D78h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82185D78h case   18:*/		return 0x82185D7C;
		  /* 82185D7Ch */ case   19:  		/* bc 12, CR6_LT, -28 */
		/* 82185D7Ch case   19:*/		if ( regs.CR[6].lt ) { return 0x82185D60;  }
		/* 82185D7Ch case   19:*/		return 0x82185D80;
	}
	return 0x82185D80;
} // Block from 82185D30h-82185D80h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82185D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185D80);
		  /* 82185D80h */ case    0:  		/* mr R11, R27 */
		/* 82185D80h case    0:*/		regs.R11 = regs.R27;
		/* 82185D80h case    0:*/		return 0x82185D84;
		  /* 82185D84h */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82185D84h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82185D84h case    1:*/		return 0x82185D88;
		  /* 82185D88h */ case    2:  		/* bc 4, CR0_EQ, -96 */
		/* 82185D88h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82185D28;  }
		/* 82185D88h case    2:*/		return 0x82185D8C;
		  /* 82185D8Ch */ case    3:  		/* lwz R11, <#[R30 + 192]> */
		/* 82185D8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C0) );
		/* 82185D8Ch case    3:*/		return 0x82185D90;
		  /* 82185D90h */ case    4:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82185D90h case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82185D90h case    4:*/		return 0x82185D94;
		  /* 82185D94h */ case    5:  		/* bc 12, CR0_EQ, 252 */
		/* 82185D94h case    5:*/		if ( regs.CR[0].eq ) { return 0x82185E90;  }
		/* 82185D94h case    5:*/		return 0x82185D98;
		  /* 82185D98h */ case    6:  		/* lwz R10, <#[R31 + 676]> */
		/* 82185D98h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002A4) );
		/* 82185D98h case    6:*/		return 0x82185D9C;
		  /* 82185D9Ch */ case    7:  		/* mr R11, R27 */
		/* 82185D9Ch case    7:*/		regs.R11 = regs.R27;
		/* 82185D9Ch case    7:*/		return 0x82185DA0;
		  /* 82185DA0h */ case    8:  		/* mulli R9, R29, 5 */
		/* 82185DA0h case    8:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R29,0x5);
		/* 82185DA0h case    8:*/		return 0x82185DA4;
		  /* 82185DA4h */ case    9:  		/* add R8, R9, R11 */
		/* 82185DA4h case    9:*/		cpu::op::add<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 82185DA4h case    9:*/		return 0x82185DA8;
		  /* 82185DA8h */ case   10:  		/* addi R8, R8, 1 */
		/* 82185DA8h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82185DA8h case   10:*/		return 0x82185DAC;
		  /* 82185DACh */ case   11:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 82185DACh case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 82185DACh case   11:*/		return 0x82185DB0;
		  /* 82185DB0h */ case   12:  		/* ldx R8, <#[R8 + R10]> */
		/* 82185DB0h case   12:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82185DB0h case   12:*/		return 0x82185DB4;
		  /* 82185DB4h */ case   13:  		/* cmpldi CR6, R8, 0 */
		/* 82185DB4h case   13:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 82185DB4h case   13:*/		return 0x82185DB8;
		  /* 82185DB8h */ case   14:  		/* bc 4, CR6_EQ, 236 */
		/* 82185DB8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82185EA4;  }
		/* 82185DB8h case   14:*/		return 0x82185DBC;
		  /* 82185DBCh */ case   15:  		/* addi R11, R11, 1 */
		/* 82185DBCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82185DBCh case   15:*/		return 0x82185DC0;
		  /* 82185DC0h */ case   16:  		/* cmplwi CR6, R11, 4 */
		/* 82185DC0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82185DC0h case   16:*/		return 0x82185DC4;
		  /* 82185DC4h */ case   17:  		/* bc 12, CR6_LT, -32 */
		/* 82185DC4h case   17:*/		if ( regs.CR[6].lt ) { return 0x82185DA4;  }
		/* 82185DC4h case   17:*/		return 0x82185DC8;
		  /* 82185DC8h */ case   18:  		/* mr R11, R27 */
		/* 82185DC8h case   18:*/		regs.R11 = regs.R27;
		/* 82185DC8h case   18:*/		return 0x82185DCC;
		  /* 82185DCCh */ case   19:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82185DCCh case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82185DCCh case   19:*/		return 0x82185DD0;
		  /* 82185DD0h */ case   20:  		/* bc 12, CR0_EQ, 192 */
		/* 82185DD0h case   20:*/		if ( regs.CR[0].eq ) { return 0x82185E90;  }
		/* 82185DD0h case   20:*/		return 0x82185DD4;
		  /* 82185DD4h */ case   21:  		/* addi R10, R1, 120 */
		/* 82185DD4h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x78);
		/* 82185DD4h case   21:*/		return 0x82185DD8;
		  /* 82185DD8h */ case   22:  		/* stw R31, <#[R1 + 112]> */
		/* 82185DD8h case   22:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 82185DD8h case   22:*/		return 0x82185DDC;
		  /* 82185DDCh */ case   23:  		/* lwz R11, <#[R31 + 792]> */
		/* 82185DDCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000318) );
		/* 82185DDCh case   23:*/		return 0x82185DE0;
		  /* 82185DE0h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 82185DE0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82185DE0h case   24:*/		return 0x82185DE4;
		  /* 82185DE4h */ case   25:  		/* std R27, <#[R10]> */
		/* 82185DE4h case   25:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000000) );
		/* 82185DE4h case   25:*/		return 0x82185DE8;
		  /* 82185DE8h */ case   26:  		/* std R27, <#[R10 + 8]> */
		/* 82185DE8h case   26:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000008) );
		/* 82185DE8h case   26:*/		return 0x82185DEC;
		  /* 82185DECh */ case   27:  		/* std R27, <#[R10 + 16]> */
		/* 82185DECh case   27:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000010) );
		/* 82185DECh case   27:*/		return 0x82185DF0;
		  /* 82185DF0h */ case   28:  		/* std R27, <#[R10 + 24]> */
		/* 82185DF0h case   28:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000018) );
		/* 82185DF0h case   28:*/		return 0x82185DF4;
		  /* 82185DF4h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 82185DF4h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82185DFC;  }
		/* 82185DF4h case   29:*/		return 0x82185DF8;
		  /* 82185DF8h */ case   30:  		/* li R11, 32 */
		/* 82185DF8h case   30:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82185DF8h case   30:*/		return 0x82185DFC;
	}
	return 0x82185DFC;
} // Block from 82185D80h-82185DFCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 82185DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185DFC);
		  /* 82185DFCh */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82185DFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82185DFCh case    0:*/		return 0x82185E00;
		  /* 82185E00h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82185E00h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82185E14;  }
		/* 82185E00h case    1:*/		return 0x82185E04;
		  /* 82185E04h */ case    2:  		/* subfic R5, R11, 64 */
		/* 82185E04h case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82185E04h case    2:*/		return 0x82185E08;
		  /* 82185E08h */ case    3:  		/* mr R4, R11 */
		/* 82185E08h case    3:*/		regs.R4 = regs.R11;
		/* 82185E08h case    3:*/		return 0x82185E0C;
		  /* 82185E0Ch */ case    4:  		/* addi R3, R1, 112 */
		/* 82185E0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82185E0Ch case    4:*/		return 0x82185E10;
		  /* 82185E10h */ case    5:  		/* bl -92472 */
		/* 82185E10h case    5:*/		regs.LR = 0x82185E14; return 0x8216F4D8;
		/* 82185E10h case    5:*/		return 0x82185E14;
	}
	return 0x82185E14;
} // Block from 82185DFCh-82185E14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82185E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185E14);
		  /* 82185E14h */ case    0:  		/* mr R3, R31 */
		/* 82185E14h case    0:*/		regs.R3 = regs.R31;
		/* 82185E14h case    0:*/		return 0x82185E18;
	}
	return 0x82185E18;
} // Block from 82185E14h-82185E18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82185E18h
// Function '?EnsureContiguousRegistersInUse@?$RegisterSet@V?$FixedSizeBitSet@_K$03@D3DXShader@@$1?PrintTempRegister@2@YAXPAVCompiler@2@I@Z$0EA@$03$1?ReportOutOfTempRegistersError@2@YAX0@Z@D3DXShader@@QAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185E18);
		  /* 82185E18h */ case    0:  		/* bl -3688 */
		/* 82185E18h case    0:*/		regs.LR = 0x82185E1C; return 0x82184FB0;
		/* 82185E18h case    0:*/		return 0x82185E1C;
		  /* 82185E1Ch */ case    1:  		/* mr R25, R3 */
		/* 82185E1Ch case    1:*/		regs.R25 = regs.R3;
		/* 82185E1Ch case    1:*/		return 0x82185E20;
		  /* 82185E20h */ case    2:  		/* mr R4, R3 */
		/* 82185E20h case    2:*/		regs.R4 = regs.R3;
		/* 82185E20h case    2:*/		return 0x82185E24;
		  /* 82185E24h */ case    3:  		/* li R7, 1 */
		/* 82185E24h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82185E24h case    3:*/		return 0x82185E28;
		  /* 82185E28h */ case    4:  		/* mr R6, R29 */
		/* 82185E28h case    4:*/		regs.R6 = regs.R29;
		/* 82185E28h case    4:*/		return 0x82185E2C;
		  /* 82185E2Ch */ case    5:  		/* mr R5, R26 */
		/* 82185E2Ch case    5:*/		regs.R5 = regs.R26;
		/* 82185E2Ch case    5:*/		return 0x82185E30;
		  /* 82185E30h */ case    6:  		/* mr R3, R31 */
		/* 82185E30h case    6:*/		regs.R3 = regs.R31;
		/* 82185E30h case    6:*/		return 0x82185E34;
		  /* 82185E34h */ case    7:  		/* bl -2228 */
		/* 82185E34h case    7:*/		regs.LR = 0x82185E38; return 0x82185580;
		/* 82185E34h case    7:*/		return 0x82185E38;
		  /* 82185E38h */ case    8:  		/* addi R11, R1, 96 */
		/* 82185E38h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82185E38h case    8:*/		return 0x82185E3C;
		  /* 82185E3Ch */ case    9:  		/* addi R9, R1, 96 */
		/* 82185E3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82185E3Ch case    9:*/		return 0x82185E40;
		  /* 82185E40h */ case   10:  		/* mr R5, R25 */
		/* 82185E40h case   10:*/		regs.R5 = regs.R25;
		/* 82185E40h case   10:*/		return 0x82185E44;
		  /* 82185E44h */ case   11:  		/* stw R9, <#[R1 + 84]> */
		/* 82185E44h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82185E44h case   11:*/		return 0x82185E48;
		  /* 82185E48h */ case   12:  		/* addi R10, R1, 112 */
		/* 82185E48h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 82185E48h case   12:*/		return 0x82185E4C;
		  /* 82185E4Ch */ case   13:  		/* li R9, 0 */
		/* 82185E4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82185E4Ch case   13:*/		return 0x82185E50;
		  /* 82185E50h */ case   14:  		/* stw R27, <#[R11]> */
		/* 82185E50h case   14:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82185E50h case   14:*/		return 0x82185E54;
		  /* 82185E54h */ case   15:  		/* li R8, 0 */
		/* 82185E54h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82185E54h case   15:*/		return 0x82185E58;
		  /* 82185E58h */ case   16:  		/* mr R4, R30 */
		/* 82185E58h case   16:*/		regs.R4 = regs.R30;
		/* 82185E58h case   16:*/		return 0x82185E5C;
		  /* 82185E5Ch */ case   17:  		/* mr R3, R31 */
		/* 82185E5Ch case   17:*/		regs.R3 = regs.R31;
		/* 82185E5Ch case   17:*/		return 0x82185E60;
		  /* 82185E60h */ case   18:  		/* lwz R11, <#[R30 + 192]> */
		/* 82185E60h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C0) );
		/* 82185E60h case   18:*/		return 0x82185E64;
		  /* 82185E64h */ case   19:  		/* rlwinm R7, R11, 0, 29, 31 */
		/* 82185E64h case   19:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R7,regs.R11);
		/* 82185E64h case   19:*/		return 0x82185E68;
		  /* 82185E68h */ case   20:  		/* lwz R11, <#[R1 + 96]> */
		/* 82185E68h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82185E68h case   20:*/		return 0x82185E6C;
		  /* 82185E6Ch */ case   21:  		/* or R6, R11, R28 */
		/* 82185E6Ch case   21:*/		cpu::op::or<0>(regs,&regs.R6,regs.R11,regs.R28);
		/* 82185E6Ch case   21:*/		return 0x82185E70;
		  /* 82185E70h */ case   22:  		/* bl -1208 */
		/* 82185E70h case   22:*/		regs.LR = 0x82185E74; return 0x821859B8;
		/* 82185E70h case   22:*/		return 0x82185E74;
		  /* 82185E74h */ case   23:  		/* mr R30, R3 */
		/* 82185E74h case   23:*/		regs.R30 = regs.R3;
		/* 82185E74h case   23:*/		return 0x82185E78;
		  /* 82185E78h */ case   24:  		/* mr R4, R25 */
		/* 82185E78h case   24:*/		regs.R4 = regs.R25;
		/* 82185E78h case   24:*/		return 0x82185E7C;
		  /* 82185E7Ch */ case   25:  		/* mr R3, R31 */
		/* 82185E7Ch case   25:*/		regs.R3 = regs.R31;
		/* 82185E7Ch case   25:*/		return 0x82185E80;
		  /* 82185E80h */ case   26:  		/* bl -6264 */
		/* 82185E80h case   26:*/		regs.LR = 0x82185E84; return 0x82184608;
		/* 82185E80h case   26:*/		return 0x82185E84;
		  /* 82185E84h */ case   27:  		/* cmpwi CR6, R30, -1 */
		/* 82185E84h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R30,0xFFFFFFFF);
		/* 82185E84h case   27:*/		return 0x82185E88;
		  /* 82185E88h */ case   28:  		/* li R3, 0 */
		/* 82185E88h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82185E88h case   28:*/		return 0x82185E8C;
		  /* 82185E8Ch */ case   29:  		/* bc 12, CR6_EQ, 8 */
		/* 82185E8Ch case   29:*/		if ( regs.CR[6].eq ) { return 0x82185E94;  }
		/* 82185E8Ch case   29:*/		return 0x82185E90;
	}
	return 0x82185E90;
} // Block from 82185E18h-82185E90h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82185E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185E90);
		  /* 82185E90h */ case    0:  		/* li R3, 1 */
		/* 82185E90h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82185E90h case    0:*/		return 0x82185E94;
	}
	return 0x82185E94;
} // Block from 82185E90h-82185E94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82185E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185E94);
		  /* 82185E94h */ case    0:  		/* addi R1, R1, 224 */
		/* 82185E94h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 82185E94h case    0:*/		return 0x82185E98;
		  /* 82185E98h */ case    1:  		/* b -1002492 */
		/* 82185E98h case    1:*/		return 0x8209129C;
		/* 82185E98h case    1:*/		return 0x82185E9C;
	}
	return 0x82185E9C;
} // Block from 82185E94h-82185E9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82185E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185E9C);
		  /* 82185E9Ch */ case    0:  		/* li R11, 1 */
		/* 82185E9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82185E9Ch case    0:*/		return 0x82185EA0;
		  /* 82185EA0h */ case    1:  		/* b -284 */
		/* 82185EA0h case    1:*/		return 0x82185D84;
		/* 82185EA0h case    1:*/		return 0x82185EA4;
	}
	return 0x82185EA4;
} // Block from 82185E9Ch-82185EA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82185EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185EA4);
		  /* 82185EA4h */ case    0:  		/* li R11, 1 */
		/* 82185EA4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82185EA4h case    0:*/		return 0x82185EA8;
		  /* 82185EA8h */ case    1:  		/* b -220 */
		/* 82185EA8h case    1:*/		return 0x82185DCC;
		/* 82185EA8h case    1:*/		return 0x82185EAC;
		  /* 82185EACh */ case    2:  		/* nop */
		/* 82185EACh case    2:*/		cpu::op::nop();
		/* 82185EACh case    2:*/		return 0x82185EB0;
	}
	return 0x82185EB0;
} // Block from 82185EA4h-82185EB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82185EB0h
// Function '?AddToGroup@Compiler@D3DXShader@@AAAXPAURegGroupInfo@2@II_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185EB0);
		  /* 82185EB0h */ case    0:  		/* mfspr R12, LR */
		/* 82185EB0h case    0:*/		regs.R12 = regs.LR;
		/* 82185EB0h case    0:*/		return 0x82185EB4;
		  /* 82185EB4h */ case    1:  		/* bl -1002596 */
		/* 82185EB4h case    1:*/		regs.LR = 0x82185EB8; return 0x82091250;
		/* 82185EB4h case    1:*/		return 0x82185EB8;
		  /* 82185EB8h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82185EB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82185EB8h case    2:*/		return 0x82185EBC;
		  /* 82185EBCh */ case    3:  		/* lwz R10, <#[R4 + 192]> */
		/* 82185EBCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x000000C0) );
		/* 82185EBCh case    3:*/		return 0x82185EC0;
		  /* 82185EC0h */ case    4:  		/* li R27, 0 */
		/* 82185EC0h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82185EC0h case    4:*/		return 0x82185EC4;
		  /* 82185EC4h */ case    5:  		/* mr R31, R3 */
		/* 82185EC4h case    5:*/		regs.R31 = regs.R3;
		/* 82185EC4h case    5:*/		return 0x82185EC8;
		  /* 82185EC8h */ case    6:  		/* mr R29, R4 */
		/* 82185EC8h case    6:*/		regs.R29 = regs.R4;
		/* 82185EC8h case    6:*/		return 0x82185ECC;
		  /* 82185ECCh */ case    7:  		/* mr R26, R5 */
		/* 82185ECCh case    7:*/		regs.R26 = regs.R5;
		/* 82185ECCh case    7:*/		return 0x82185ED0;
		  /* 82185ED0h */ case    8:  		/* mr R28, R6 */
		/* 82185ED0h case    8:*/		regs.R28 = regs.R6;
		/* 82185ED0h case    8:*/		return 0x82185ED4;
		  /* 82185ED4h */ case    9:  		/* rlwinm. R11, R10, 0, 29, 31 */
		/* 82185ED4h case    9:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R10);
		/* 82185ED4h case    9:*/		return 0x82185ED8;
		  /* 82185ED8h */ case   10:  		/* mr R30, R27 */
		/* 82185ED8h case   10:*/		regs.R30 = regs.R27;
		/* 82185ED8h case   10:*/		return 0x82185EDC;
		  /* 82185EDCh */ case   11:  		/* bc 12, CR0_EQ, 56 */
		/* 82185EDCh case   11:*/		if ( regs.CR[0].eq ) { return 0x82185F14;  }
		/* 82185EDCh case   11:*/		return 0x82185EE0;
		  /* 82185EE0h */ case   12:  		/* mr R7, R30 */
		/* 82185EE0h case   12:*/		regs.R7 = regs.R30;
		/* 82185EE0h case   12:*/		return 0x82185EE4;
		  /* 82185EE4h */ case   13:  		/* mr R6, R28 */
		/* 82185EE4h case   13:*/		regs.R6 = regs.R28;
		/* 82185EE4h case   13:*/		return 0x82185EE8;
		  /* 82185EE8h */ case   14:  		/* mr R5, R26 */
		/* 82185EE8h case   14:*/		regs.R5 = regs.R26;
		/* 82185EE8h case   14:*/		return 0x82185EEC;
		  /* 82185EECh */ case   15:  		/* mr R4, R29 */
		/* 82185EECh case   15:*/		regs.R4 = regs.R29;
		/* 82185EECh case   15:*/		return 0x82185EF0;
		  /* 82185EF0h */ case   16:  		/* mr R3, R31 */
		/* 82185EF0h case   16:*/		regs.R3 = regs.R31;
		/* 82185EF0h case   16:*/		return 0x82185EF4;
		  /* 82185EF4h */ case   17:  		/* bl -556 */
		/* 82185EF4h case   17:*/		regs.LR = 0x82185EF8; return 0x82185CC8;
		/* 82185EF4h case   17:*/		return 0x82185EF8;
		  /* 82185EF8h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82185EF8h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82185EF8h case   18:*/		return 0x82185EFC;
		  /* 82185EFCh */ case   19:  		/* bc 4, CR0_EQ, 300 */
		/* 82185EFCh case   19:*/		if ( !regs.CR[0].eq ) { return 0x82186028;  }
		/* 82185EFCh case   19:*/		return 0x82185F00;
		  /* 82185F00h */ case   20:  		/* lwz R10, <#[R29 + 192]> */
		/* 82185F00h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x000000C0) );
		/* 82185F00h case   20:*/		return 0x82185F04;
		  /* 82185F04h */ case   21:  		/* addi R30, R30, 1 */
		/* 82185F04h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82185F04h case   21:*/		return 0x82185F08;
		  /* 82185F08h */ case   22:  		/* rlwinm R11, R10, 0, 29, 31 */
		/* 82185F08h case   22:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R10);
		/* 82185F08h case   22:*/		return 0x82185F0C;
		  /* 82185F0Ch */ case   23:  		/* cmplw CR6, R30, R11 */
		/* 82185F0Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82185F0Ch case   23:*/		return 0x82185F10;
		  /* 82185F10h */ case   24:  		/* bc 12, CR6_LT, -48 */
		/* 82185F10h case   24:*/		if ( regs.CR[6].lt ) { return 0x82185EE0;  }
		/* 82185F10h case   24:*/		return 0x82185F14;
	}
	return 0x82185F14;
} // Block from 82185EB0h-82185F14h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82185F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185F14);
		  /* 82185F14h */ case    0:  		/* cmplwi CR6, R11, 4 */
		/* 82185F14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82185F14h case    0:*/		return 0x82185F18;
		  /* 82185F18h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82185F18h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82185F24;  }
		/* 82185F18h case    1:*/		return 0x82185F1C;
		  /* 82185F1Ch */ case    2:  		/* li R3, 0 */
		/* 82185F1Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82185F1Ch case    2:*/		return 0x82185F20;
		  /* 82185F20h */ case    3:  		/* b 268 */
		/* 82185F20h case    3:*/		return 0x8218602C;
		/* 82185F20h case    3:*/		return 0x82185F24;
	}
	return 0x82185F24;
} // Block from 82185F14h-82185F24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82185F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185F24);
		  /* 82185F24h */ case    0:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 82185F24h case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 82185F24h case    0:*/		return 0x82185F28;
		  /* 82185F28h */ case    1:  		/* bc 12, CR0_EQ, 256 */
		/* 82185F28h case    1:*/		if ( regs.CR[0].eq ) { return 0x82186028;  }
		/* 82185F28h case    1:*/		return 0x82185F2C;
		  /* 82185F2Ch */ case    2:  		/* lwz R10, <#[R31 + 676]> */
		/* 82185F2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000002A4) );
		/* 82185F2Ch case    2:*/		return 0x82185F30;
		  /* 82185F30h */ case    3:  		/* mr R11, R27 */
		/* 82185F30h case    3:*/		regs.R11 = regs.R27;
		/* 82185F30h case    3:*/		return 0x82185F34;
		  /* 82185F34h */ case    4:  		/* mulli R9, R28, 5 */
		/* 82185F34h case    4:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R28,0x5);
		/* 82185F34h case    4:*/		return 0x82185F38;
	}
	return 0x82185F38;
} // Block from 82185F24h-82185F38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82185F38h
// Function '?AssignRegToGroup@D3DXShader@@YA?AV?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$01@1@PAURegGroupInfo@1@0V?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$03@1@IIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185F38);
		  /* 82185F38h */ case    0:  		/* add R8, R9, R11 */
		/* 82185F38h case    0:*/		cpu::op::add<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 82185F38h case    0:*/		return 0x82185F3C;
		  /* 82185F3Ch */ case    1:  		/* addi R8, R8, 1 */
		/* 82185F3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82185F3Ch case    1:*/		return 0x82185F40;
		  /* 82185F40h */ case    2:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 82185F40h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 82185F40h case    2:*/		return 0x82185F44;
		  /* 82185F44h */ case    3:  		/* ldx R8, <#[R8 + R10]> */
		/* 82185F44h case    3:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82185F44h case    3:*/		return 0x82185F48;
		  /* 82185F48h */ case    4:  		/* cmpldi CR6, R8, 0 */
		/* 82185F48h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 82185F48h case    4:*/		return 0x82185F4C;
		  /* 82185F4Ch */ case    5:  		/* bc 4, CR6_EQ, 232 */
		/* 82185F4Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82186034;  }
		/* 82185F4Ch case    5:*/		return 0x82185F50;
		  /* 82185F50h */ case    6:  		/* addi R11, R11, 1 */
		/* 82185F50h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82185F50h case    6:*/		return 0x82185F54;
		  /* 82185F54h */ case    7:  		/* cmplwi CR6, R11, 4 */
		/* 82185F54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82185F54h case    7:*/		return 0x82185F58;
		  /* 82185F58h */ case    8:  		/* bc 12, CR6_LT, -32 */
		/* 82185F58h case    8:*/		if ( regs.CR[6].lt ) { return 0x82185F38;  }
		/* 82185F58h case    8:*/		return 0x82185F5C;
		  /* 82185F5Ch */ case    9:  		/* mr R11, R27 */
		/* 82185F5Ch case    9:*/		regs.R11 = regs.R27;
		/* 82185F5Ch case    9:*/		return 0x82185F60;
		  /* 82185F60h */ case   10:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82185F60h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82185F60h case   10:*/		return 0x82185F64;
		  /* 82185F64h */ case   11:  		/* bc 12, CR0_EQ, 196 */
		/* 82185F64h case   11:*/		if ( regs.CR[0].eq ) { return 0x82186028;  }
		/* 82185F64h case   11:*/		return 0x82185F68;
		  /* 82185F68h */ case   12:  		/* addi R10, R1, 120 */
		/* 82185F68h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x78);
		/* 82185F68h case   12:*/		return 0x82185F6C;
		  /* 82185F6Ch */ case   13:  		/* stw R31, <#[R1 + 112]> */
		/* 82185F6Ch case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 82185F6Ch case   13:*/		return 0x82185F70;
		  /* 82185F70h */ case   14:  		/* lwz R11, <#[R31 + 792]> */
		/* 82185F70h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000318) );
		/* 82185F70h case   14:*/		return 0x82185F74;
		  /* 82185F74h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82185F74h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82185F74h case   15:*/		return 0x82185F78;
		  /* 82185F78h */ case   16:  		/* std R27, <#[R10]> */
		/* 82185F78h case   16:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000000) );
		/* 82185F78h case   16:*/		return 0x82185F7C;
		  /* 82185F7Ch */ case   17:  		/* std R27, <#[R10 + 8]> */
		/* 82185F7Ch case   17:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000008) );
		/* 82185F7Ch case   17:*/		return 0x82185F80;
		  /* 82185F80h */ case   18:  		/* std R27, <#[R10 + 16]> */
		/* 82185F80h case   18:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000010) );
		/* 82185F80h case   18:*/		return 0x82185F84;
		  /* 82185F84h */ case   19:  		/* std R27, <#[R10 + 24]> */
		/* 82185F84h case   19:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R10 + 0x00000018) );
		/* 82185F84h case   19:*/		return 0x82185F88;
		  /* 82185F88h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 82185F88h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82185F90;  }
		/* 82185F88h case   20:*/		return 0x82185F8C;
		  /* 82185F8Ch */ case   21:  		/* li R11, 32 */
		/* 82185F8Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82185F8Ch case   21:*/		return 0x82185F90;
	}
	return 0x82185F90;
} // Block from 82185F38h-82185F90h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82185F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185F90);
		  /* 82185F90h */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82185F90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82185F90h case    0:*/		return 0x82185F94;
		  /* 82185F94h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82185F94h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82185FA8;  }
		/* 82185F94h case    1:*/		return 0x82185F98;
		  /* 82185F98h */ case    2:  		/* subfic R5, R11, 64 */
		/* 82185F98h case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82185F98h case    2:*/		return 0x82185F9C;
		  /* 82185F9Ch */ case    3:  		/* mr R4, R11 */
		/* 82185F9Ch case    3:*/		regs.R4 = regs.R11;
		/* 82185F9Ch case    3:*/		return 0x82185FA0;
		  /* 82185FA0h */ case    4:  		/* addi R3, R1, 112 */
		/* 82185FA0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82185FA0h case    4:*/		return 0x82185FA4;
		  /* 82185FA4h */ case    5:  		/* bl -92876 */
		/* 82185FA4h case    5:*/		regs.LR = 0x82185FA8; return 0x8216F4D8;
		/* 82185FA4h case    5:*/		return 0x82185FA8;
	}
	return 0x82185FA8;
} // Block from 82185F90h-82185FA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82185FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82185FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82185FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82185FA8);
		  /* 82185FA8h */ case    0:  		/* mr R3, R31 */
		/* 82185FA8h case    0:*/		regs.R3 = regs.R31;
		/* 82185FA8h case    0:*/		return 0x82185FAC;
		  /* 82185FACh */ case    1:  		/* bl -4092 */
		/* 82185FACh case    1:*/		regs.LR = 0x82185FB0; return 0x82184FB0;
		/* 82185FACh case    1:*/		return 0x82185FB0;
		  /* 82185FB0h */ case    2:  		/* mr R30, R3 */
		/* 82185FB0h case    2:*/		regs.R30 = regs.R3;
		/* 82185FB0h case    2:*/		return 0x82185FB4;
		  /* 82185FB4h */ case    3:  		/* mr R4, R3 */
		/* 82185FB4h case    3:*/		regs.R4 = regs.R3;
		/* 82185FB4h case    3:*/		return 0x82185FB8;
		  /* 82185FB8h */ case    4:  		/* li R7, 1 */
		/* 82185FB8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82185FB8h case    4:*/		return 0x82185FBC;
		  /* 82185FBCh */ case    5:  		/* mr R6, R28 */
		/* 82185FBCh case    5:*/		regs.R6 = regs.R28;
		/* 82185FBCh case    5:*/		return 0x82185FC0;
		  /* 82185FC0h */ case    6:  		/* mr R5, R26 */
		/* 82185FC0h case    6:*/		regs.R5 = regs.R26;
		/* 82185FC0h case    6:*/		return 0x82185FC4;
		  /* 82185FC4h */ case    7:  		/* mr R3, R31 */
		/* 82185FC4h case    7:*/		regs.R3 = regs.R31;
		/* 82185FC4h case    7:*/		return 0x82185FC8;
		  /* 82185FC8h */ case    8:  		/* bl -2632 */
		/* 82185FC8h case    8:*/		regs.LR = 0x82185FCC; return 0x82185580;
		/* 82185FC8h case    8:*/		return 0x82185FCC;
		  /* 82185FCCh */ case    9:  		/* addi R11, R1, 96 */
		/* 82185FCCh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82185FCCh case    9:*/		return 0x82185FD0;
		  /* 82185FD0h */ case   10:  		/* addi R9, R1, 96 */
		/* 82185FD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82185FD0h case   10:*/		return 0x82185FD4;
		  /* 82185FD4h */ case   11:  		/* mr R5, R30 */
		/* 82185FD4h case   11:*/		regs.R5 = regs.R30;
		/* 82185FD4h case   11:*/		return 0x82185FD8;
		  /* 82185FD8h */ case   12:  		/* stw R9, <#[R1 + 84]> */
		/* 82185FD8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82185FD8h case   12:*/		return 0x82185FDC;
		  /* 82185FDCh */ case   13:  		/* addi R10, R1, 112 */
		/* 82185FDCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 82185FDCh case   13:*/		return 0x82185FE0;
		  /* 82185FE0h */ case   14:  		/* li R9, 0 */
		/* 82185FE0h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82185FE0h case   14:*/		return 0x82185FE4;
		  /* 82185FE4h */ case   15:  		/* stw R27, <#[R11]> */
		/* 82185FE4h case   15:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82185FE4h case   15:*/		return 0x82185FE8;
		  /* 82185FE8h */ case   16:  		/* li R8, 0 */
		/* 82185FE8h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82185FE8h case   16:*/		return 0x82185FEC;
		  /* 82185FECh */ case   17:  		/* mr R4, R29 */
		/* 82185FECh case   17:*/		regs.R4 = regs.R29;
		/* 82185FECh case   17:*/		return 0x82185FF0;
		  /* 82185FF0h */ case   18:  		/* mr R3, R31 */
		/* 82185FF0h case   18:*/		regs.R3 = regs.R31;
		/* 82185FF0h case   18:*/		return 0x82185FF4;
		  /* 82185FF4h */ case   19:  		/* lwz R11, <#[R29 + 192]> */
		/* 82185FF4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000C0) );
		/* 82185FF4h case   19:*/		return 0x82185FF8;
		  /* 82185FF8h */ case   20:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82185FF8h case   20:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82185FF8h case   20:*/		return 0x82185FFC;
		  /* 82185FFCh */ case   21:  		/* addi R7, R11, 1 */
		/* 82185FFCh case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1);
		/* 82185FFCh case   21:*/		return 0x82186000;
		  /* 82186000h */ case   22:  		/* lwz R6, <#[R1 + 96]> */
		/* 82186000h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 82186000h case   22:*/		return 0x82186004;
		  /* 82186004h */ case   23:  		/* or R6, R11, R6 */
		/* 82186004h case   23:*/		cpu::op::or<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 82186004h case   23:*/		return 0x82186008;
		  /* 82186008h */ case   24:  		/* bl -1616 */
		/* 82186008h case   24:*/		regs.LR = 0x8218600C; return 0x821859B8;
		/* 82186008h case   24:*/		return 0x8218600C;
		  /* 8218600Ch */ case   25:  		/* mr R29, R3 */
		/* 8218600Ch case   25:*/		regs.R29 = regs.R3;
		/* 8218600Ch case   25:*/		return 0x82186010;
		  /* 82186010h */ case   26:  		/* mr R4, R30 */
		/* 82186010h case   26:*/		regs.R4 = regs.R30;
		/* 82186010h case   26:*/		return 0x82186014;
		  /* 82186014h */ case   27:  		/* mr R3, R31 */
		/* 82186014h case   27:*/		regs.R3 = regs.R31;
		/* 82186014h case   27:*/		return 0x82186018;
		  /* 82186018h */ case   28:  		/* bl -6672 */
		/* 82186018h case   28:*/		regs.LR = 0x8218601C; return 0x82184608;
		/* 82186018h case   28:*/		return 0x8218601C;
		  /* 8218601Ch */ case   29:  		/* cmpwi CR6, R29, -1 */
		/* 8218601Ch case   29:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 8218601Ch case   29:*/		return 0x82186020;
		  /* 82186020h */ case   30:  		/* li R3, 0 */
		/* 82186020h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82186020h case   30:*/		return 0x82186024;
		  /* 82186024h */ case   31:  		/* bc 12, CR6_EQ, 8 */
		/* 82186024h case   31:*/		if ( regs.CR[6].eq ) { return 0x8218602C;  }
		/* 82186024h case   31:*/		return 0x82186028;
	}
	return 0x82186028;
} // Block from 82185FA8h-82186028h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82186028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186028);
		  /* 82186028h */ case    0:  		/* li R3, 1 */
		/* 82186028h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82186028h case    0:*/		return 0x8218602C;
	}
	return 0x8218602C;
} // Block from 82186028h-8218602Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218602Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218602C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218602C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218602C);
		  /* 8218602Ch */ case    0:  		/* addi R1, R1, 208 */
		/* 8218602Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8218602Ch case    0:*/		return 0x82186030;
		  /* 82186030h */ case    1:  		/* b -1002896 */
		/* 82186030h case    1:*/		return 0x820912A0;
		/* 82186030h case    1:*/		return 0x82186034;
	}
	return 0x82186034;
} // Block from 8218602Ch-82186034h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186034);
		  /* 82186034h */ case    0:  		/* li R11, 1 */
		/* 82186034h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82186034h case    0:*/		return 0x82186038;
		  /* 82186038h */ case    1:  		/* b -216 */
		/* 82186038h case    1:*/		return 0x82185F60;
		/* 82186038h case    1:*/		return 0x8218603C;
		  /* 8218603Ch */ case    2:  		/* nop */
		/* 8218603Ch case    2:*/		cpu::op::nop();
		/* 8218603Ch case    2:*/		return 0x82186040;
	}
	return 0x82186040;
} // Block from 82186034h-82186040h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186040);
		  /* 82186040h */ case    0:  		/* mfspr R12, LR */
		/* 82186040h case    0:*/		regs.R12 = regs.LR;
		/* 82186040h case    0:*/		return 0x82186044;
		  /* 82186044h */ case    1:  		/* bl -1003044 */
		/* 82186044h case    1:*/		regs.LR = 0x82186048; return 0x82091220;
		/* 82186044h case    1:*/		return 0x82186048;
		  /* 82186048h */ case    2:  		/* stwu R1, <#[R1 - 304]> */
		/* 82186048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 82186048h case    2:*/		return 0x8218604C;
		  /* 8218604Ch */ case    3:  		/* li R20, 0 */
		/* 8218604Ch case    3:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8218604Ch case    3:*/		return 0x82186050;
		  /* 82186050h */ case    4:  		/* stw R10, <#[R1 + 380]> */
		/* 82186050h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000017C) );
		/* 82186050h case    4:*/		return 0x82186054;
		  /* 82186054h */ case    5:  		/* addi R11, R1, 96 */
		/* 82186054h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82186054h case    5:*/		return 0x82186058;
		  /* 82186058h */ case    6:  		/* stw R4, <#[R1 + 332]> */
		/* 82186058h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000014C) );
		/* 82186058h case    6:*/		return 0x8218605C;
		  /* 8218605Ch */ case    7:  		/* stw R20, <#[R3]> */
		/* 8218605Ch case    7:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R3 + 0x00000000) );
		/* 8218605Ch case    7:*/		return 0x82186060;
		  /* 82186060h */ case    8:  		/* addi R10, R1, 100 */
		/* 82186060h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x64);
		/* 82186060h case    8:*/		return 0x82186064;
		  /* 82186064h */ case    9:  		/* stw R7, <#[R1 + 356]> */
		/* 82186064h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000164) );
		/* 82186064h case    9:*/		return 0x82186068;
		  /* 82186068h */ case   10:  		/* mr R17, R3 */
		/* 82186068h case   10:*/		regs.R17 = regs.R3;
		/* 82186068h case   10:*/		return 0x8218606C;
		  /* 8218606Ch */ case   11:  		/* stw R9, <#[R1 + 372]> */
		/* 8218606Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000174) );
		/* 8218606Ch case   11:*/		return 0x82186070;
		  /* 82186070h */ case   12:  		/* mr R15, R4 */
		/* 82186070h case   12:*/		regs.R15 = regs.R4;
		/* 82186070h case   12:*/		return 0x82186074;
		  /* 82186074h */ case   13:  		/* stw R20, <#[R11]> */
		/* 82186074h case   13:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 82186074h case   13:*/		return 0x82186078;
		  /* 82186078h */ case   14:  		/* mr R18, R5 */
		/* 82186078h case   14:*/		regs.R18 = regs.R5;
		/* 82186078h case   14:*/		return 0x8218607C;
		  /* 8218607Ch */ case   15:  		/* mr R19, R6 */
		/* 8218607Ch case   15:*/		regs.R19 = regs.R6;
		/* 8218607Ch case   15:*/		return 0x82186080;
		  /* 82186080h */ case   16:  		/* stw R20, <#[R10]> */
		/* 82186080h case   16:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R10 + 0x00000000) );
		/* 82186080h case   16:*/		return 0x82186084;
		  /* 82186084h */ case   17:  		/* mr R14, R9 */
		/* 82186084h case   17:*/		regs.R14 = regs.R9;
		/* 82186084h case   17:*/		return 0x82186088;
		  /* 82186088h */ case   18:  		/* li R21, 1 */
		/* 82186088h case   18:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 82186088h case   18:*/		return 0x8218608C;
		  /* 8218608Ch */ case   19:  		/* li R23, 2 */
		/* 8218608Ch case   19:*/		cpu::op::li<0>(regs,&regs.R23,0x2);
		/* 8218608Ch case   19:*/		return 0x82186090;
		  /* 82186090h */ case   20:  		/* li R3, -1 */
		/* 82186090h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82186090h case   20:*/		return 0x82186094;
		  /* 82186094h */ case   21:  		/* mr R28, R20 */
		/* 82186094h case   21:*/		regs.R28 = regs.R20;
		/* 82186094h case   21:*/		return 0x82186098;
		  /* 82186098h */ case   22:  		/* lwz R26, <#[R6 + 192]> */
		/* 82186098h case   22:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R6 + 0x000000C0) );
		/* 82186098h case   22:*/		return 0x8218609C;
		  /* 8218609Ch */ case   23:  		/* lwz R25, <#[R5 + 192]> */
		/* 8218609Ch case   23:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R5 + 0x000000C0) );
		/* 8218609Ch case   23:*/		return 0x821860A0;
		  /* 821860A0h */ case   24:  		/* rlwinm R16, R25, 0, 29, 31 */
		/* 821860A0h case   24:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R16,regs.R25);
		/* 821860A0h case   24:*/		return 0x821860A4;
		  /* 821860A4h */ case   25:  		/* rlwinm. R22, R26, 0, 29, 31 */
		/* 821860A4h case   25:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R22,regs.R26);
		/* 821860A4h case   25:*/		return 0x821860A8;
		  /* 821860A8h */ case   26:  		/* bc 12, CR0_EQ, 492 */
		/* 821860A8h case   26:*/		if ( regs.CR[0].eq ) { return 0x82186294;  }
		/* 821860A8h case   26:*/		return 0x821860AC;
		  /* 821860ACh */ case   27:  		/* mr R9, R20 */
		/* 821860ACh case   27:*/		regs.R9 = regs.R20;
		/* 821860ACh case   27:*/		return 0x821860B0;
		  /* 821860B0h */ case   28:  		/* li R27, 5 */
		/* 821860B0h case   28:*/		cpu::op::li<0>(regs,&regs.R27,0x5);
		/* 821860B0h case   28:*/		return 0x821860B4;
		  /* 821860B4h */ case   29:  		/* subfic R24, R6, 3 */
		/* 821860B4h case   29:*/		cpu::op::subfic<0>(regs,&regs.R24,regs.R6,0x3);
		/* 821860B4h case   29:*/		return 0x821860B8;
		  /* 821860B8h */ case   30:  		/* slw R11, R21, R28 */
		/* 821860B8h case   30:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R28);
		/* 821860B8h case   30:*/		return 0x821860BC;
		  /* 821860BCh */ case   31:  		/* and. R11, R11, R14 */
		/* 821860BCh case   31:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R14);
		/* 821860BCh case   31:*/		return 0x821860C0;
		  /* 821860C0h */ case   32:  		/* bc 4, CR0_EQ, 448 */
		/* 821860C0h case   32:*/		if ( !regs.CR[0].eq ) { return 0x82186280;  }
		/* 821860C0h case   32:*/		return 0x821860C4;
		  /* 821860C4h */ case   33:  		/* mr R29, R20 */
		/* 821860C4h case   33:*/		regs.R29 = regs.R20;
		/* 821860C4h case   33:*/		return 0x821860C8;
		  /* 821860C8h */ case   34:  		/* cmplwi CR6, R16, 0 */
		/* 821860C8h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821860C8h case   34:*/		return 0x821860CC;
		  /* 821860CCh */ case   35:  		/* bc 12, CR6_EQ, 320 */
		/* 821860CCh case   35:*/		if ( regs.CR[6].eq ) { return 0x8218620C;  }
		/* 821860CCh case   35:*/		return 0x821860D0;
		  /* 821860D0h */ case   36:  		/* add R30, R9, R19 */
		/* 821860D0h case   36:*/		cpu::op::add<0>(regs,&regs.R30,regs.R9,regs.R19);
		/* 821860D0h case   36:*/		return 0x821860D4;
		  /* 821860D4h */ case   37:  		/* lwz R11, <#[R15 + 672]> */
		/* 821860D4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x000002A0) );
		/* 821860D4h case   37:*/		return 0x821860D8;
		  /* 821860D8h */ case   38:  		/* li R5, 5 */
		/* 821860D8h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 821860D8h case   38:*/		return 0x821860DC;
		  /* 821860DCh */ case   39:  		/* addi R6, R18, 16 */
		/* 821860DCh case   39:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R18,0x10);
		/* 821860DCh case   39:*/		return 0x821860E0;
		  /* 821860E0h */ case   40:  		/* rlwinm R31, R11, 3, 0, 28 */
		/* 821860E0h case   40:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R31,regs.R11);
		/* 821860E0h case   40:*/		return 0x821860E4;
		  /* 821860E4h */ case   41:  		/* lwz R4, <#[R30 + 16]> */
		/* 821860E4h case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821860E4h case   41:*/		return 0x821860E8;
		  /* 821860E8h */ case   42:  		/* add R10, R31, R4 */
		/* 821860E8h case   42:*/		cpu::op::add<0>(regs,&regs.R10,regs.R31,regs.R4);
		/* 821860E8h case   42:*/		return 0x821860EC;
		  /* 821860ECh */ case   43:  		/* mr R11, R4 */
		/* 821860ECh case   43:*/		regs.R11 = regs.R4;
		/* 821860ECh case   43:*/		return 0x821860F0;
		  /* 821860F0h */ case   44:  		/* cmplw CR6, R4, R10 */
		/* 821860F0h case   44:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821860F0h case   44:*/		return 0x821860F4;
		  /* 821860F4h */ case   45:  		/* bc 4, CR6_LT, 48 */
		/* 821860F4h case   45:*/		if ( !regs.CR[6].lt ) { return 0x82186124;  }
		/* 821860F4h case   45:*/		return 0x821860F8;
		  /* 821860F8h */ case   46:  		/* lwz R7, <#[R6 - 16]> */
		/* 821860F8h case   46:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0xFFFFFFF0) );
		/* 821860F8h case   46:*/		return 0x821860FC;
		  /* 821860FCh */ case   47:  		/* subf R7, R4, R7 */
		/* 821860FCh case   47:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R4,regs.R7);
		/* 821860FCh case   47:*/		return 0x82186100;
		  /* 82186100h */ case   48:  		/* ldx R15, <#[R7 + R11]> */
		/* 82186100h case   48:*/		cpu::mem::load64( regs, &regs.R15, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82186100h case   48:*/		return 0x82186104;
		  /* 82186104h */ case   49:  		/* ld R14, <#[R11]> */
		/* 82186104h case   49:*/		cpu::mem::load64( regs, &regs.R14, (uint32)(regs.R11 + 0x00000000) );
		/* 82186104h case   49:*/		return 0x82186108;
		  /* 82186108h */ case   50:  		/* and R15, R15, R14 */
		/* 82186108h case   50:*/		cpu::op::and<0>(regs,&regs.R15,regs.R15,regs.R14);
		/* 82186108h case   50:*/		return 0x8218610C;
		  /* 8218610Ch */ case   51:  		/* cmpldi CR6, R15, 0 */
		/* 8218610Ch case   51:*/		cpu::op::cmpldi<6>(regs,regs.R15,0x00000000);
		/* 8218610Ch case   51:*/		return 0x82186110;
		  /* 82186110h */ case   52:  		/* bc 4, CR6_EQ, 684 */
		/* 82186110h case   52:*/		if ( !regs.CR[6].eq ) { return 0x821863BC;  }
		/* 82186110h case   52:*/		return 0x82186114;
		  /* 82186114h */ case   53:  		/* addi R11, R11, 8 */
		/* 82186114h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82186114h case   53:*/		return 0x82186118;
		  /* 82186118h */ case   54:  		/* cmplw CR6, R11, R10 */
		/* 82186118h case   54:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82186118h case   54:*/		return 0x8218611C;
		  /* 8218611Ch */ case   55:  		/* bc 12, CR6_LT, -28 */
		/* 8218611Ch case   55:*/		if ( regs.CR[6].lt ) { return 0x82186100;  }
		/* 8218611Ch case   55:*/		return 0x82186120;
		  /* 82186120h */ case   56:  		/* lwz R15, <#[R1 + 332]> */
		/* 82186120h case   56:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000014C) );
		/* 82186120h case   56:*/		return 0x82186124;
	}
	return 0x82186124;
} // Block from 82186040h-82186124h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82186124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186124);
		  /* 82186124h */ case    0:  		/* mr R11, R20 */
		/* 82186124h case    0:*/		regs.R11 = regs.R20;
		/* 82186124h case    0:*/		return 0x82186128;
		  /* 82186128h */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82186128h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82186128h case    1:*/		return 0x8218612C;
		  /* 8218612Ch */ case    2:  		/* bc 4, CR0_EQ, 156 */
		/* 8218612Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821861C8;  }
		/* 8218612Ch case    2:*/		return 0x82186130;
		  /* 82186130h */ case    3:  		/* lwz R11, <#[R6]> */
		/* 82186130h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82186130h case    3:*/		return 0x82186134;
		  /* 82186134h */ case    4:  		/* add R10, R31, R11 */
		/* 82186134h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R31,regs.R11);
		/* 82186134h case    4:*/		return 0x82186138;
		  /* 82186138h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82186138h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82186138h case    5:*/		return 0x8218613C;
		  /* 8218613Ch */ case    6:  		/* bc 4, CR6_LT, 48 */
		/* 8218613Ch case    6:*/		if ( !regs.CR[6].lt ) { return 0x8218616C;  }
		/* 8218613Ch case    6:*/		return 0x82186140;
		  /* 82186140h */ case    7:  		/* lwz R7, <#[R30]> */
		/* 82186140h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82186140h case    7:*/		return 0x82186144;
		  /* 82186144h */ case    8:  		/* subf R7, R11, R7 */
		/* 82186144h case    8:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 82186144h case    8:*/		return 0x82186148;
		  /* 82186148h */ case    9:  		/* ldx R15, <#[R7 + R11]> */
		/* 82186148h case    9:*/		cpu::mem::load64( regs, &regs.R15, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82186148h case    9:*/		return 0x8218614C;
		  /* 8218614Ch */ case   10:  		/* ld R14, <#[R11]> */
		/* 8218614Ch case   10:*/		cpu::mem::load64( regs, &regs.R14, (uint32)(regs.R11 + 0x00000000) );
		/* 8218614Ch case   10:*/		return 0x82186150;
		  /* 82186150h */ case   11:  		/* and R15, R15, R14 */
		/* 82186150h case   11:*/		cpu::op::and<0>(regs,&regs.R15,regs.R15,regs.R14);
		/* 82186150h case   11:*/		return 0x82186154;
		  /* 82186154h */ case   12:  		/* cmpldi CR6, R15, 0 */
		/* 82186154h case   12:*/		cpu::op::cmpldi<6>(regs,regs.R15,0x00000000);
		/* 82186154h case   12:*/		return 0x82186158;
		  /* 82186158h */ case   13:  		/* bc 4, CR6_EQ, 624 */
		/* 82186158h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821863C8;  }
		/* 82186158h case   13:*/		return 0x8218615C;
		  /* 8218615Ch */ case   14:  		/* addi R11, R11, 8 */
		/* 8218615Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8218615Ch case   14:*/		return 0x82186160;
		  /* 82186160h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 82186160h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82186160h case   15:*/		return 0x82186164;
		  /* 82186164h */ case   16:  		/* bc 12, CR6_LT, -28 */
		/* 82186164h case   16:*/		if ( regs.CR[6].lt ) { return 0x82186148;  }
		/* 82186164h case   16:*/		return 0x82186168;
		  /* 82186168h */ case   17:  		/* lwz R15, <#[R1 + 332]> */
		/* 82186168h case   17:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000014C) );
		/* 82186168h case   17:*/		return 0x8218616C;
	}
	return 0x8218616C;
} // Block from 82186124h-8218616Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8218616Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218616C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218616C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218616C);
		  /* 8218616Ch */ case    0:  		/* mr R11, R20 */
		/* 8218616Ch case    0:*/		regs.R11 = regs.R20;
		/* 8218616Ch case    0:*/		return 0x82186170;
		  /* 82186170h */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82186170h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82186170h case    1:*/		return 0x82186174;
		  /* 82186174h */ case    2:  		/* bc 4, CR0_EQ, 84 */
		/* 82186174h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821861C8;  }
		/* 82186174h case    2:*/		return 0x82186178;
		  /* 82186178h */ case    3:  		/* rlwinm. R11, R26, 0, 1, 1 */
		/* 82186178h case    3:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R26);
		/* 82186178h case    3:*/		return 0x8218617C;
		  /* 8218617Ch */ case    4:  		/* bc 12, CR0_EQ, 120 */
		/* 8218617Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821861F4;  }
		/* 8218617Ch case    4:*/		return 0x82186180;
		  /* 82186180h */ case    5:  		/* rlwinm. R11, R25, 0, 1, 1 */
		/* 82186180h case    5:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R25);
		/* 82186180h case    5:*/		return 0x82186184;
		  /* 82186184h */ case    6:  		/* bc 12, CR0_EQ, 112 */
		/* 82186184h case    6:*/		if ( regs.CR[0].eq ) { return 0x821861F4;  }
		/* 82186184h case    6:*/		return 0x82186188;
		  /* 82186188h */ case    7:  		/* mr R11, R20 */
		/* 82186188h case    7:*/		regs.R11 = regs.R20;
		/* 82186188h case    7:*/		return 0x8218618C;
		  /* 8218618Ch */ case    8:  		/* add R10, R27, R11 */
		/* 8218618Ch case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R27,regs.R11);
		/* 8218618Ch case    8:*/		return 0x82186190;
		  /* 82186190h */ case    9:  		/* add R7, R5, R11 */
		/* 82186190h case    9:*/		cpu::op::add<0>(regs,&regs.R7,regs.R5,regs.R11);
		/* 82186190h case    9:*/		return 0x82186194;
		  /* 82186194h */ case   10:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82186194h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82186194h case   10:*/		return 0x82186198;
		  /* 82186198h */ case   11:  		/* rlwinm R7, R7, 3, 0, 28 */
		/* 82186198h case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R7);
		/* 82186198h case   11:*/		return 0x8218619C;
		  /* 8218619Ch */ case   12:  		/* ldx R10, <#[R10 + R19]> */
		/* 8218619Ch case   12:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R10 + regs.R19 + 0x00000000) );
		/* 8218619Ch case   12:*/		return 0x821861A0;
		  /* 821861A0h */ case   13:  		/* ldx R7, <#[R7 + R18]> */
		/* 821861A0h case   13:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R18 + 0x00000000) );
		/* 821861A0h case   13:*/		return 0x821861A4;
		  /* 821861A4h */ case   14:  		/* nor R10, R10, R7 */
		/* 821861A4h case   14:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821861A4h case   14:*/		return 0x821861A8;
		  /* 821861A8h */ case   15:  		/* cmpldi CR6, R10, 0 */
		/* 821861A8h case   15:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 821861A8h case   15:*/		return 0x821861AC;
		  /* 821861ACh */ case   16:  		/* bc 4, CR6_EQ, 552 */
		/* 821861ACh case   16:*/		if ( !regs.CR[6].eq ) { return 0x821863D4;  }
		/* 821861ACh case   16:*/		return 0x821861B0;
		  /* 821861B0h */ case   17:  		/* addi R11, R11, 1 */
		/* 821861B0h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821861B0h case   17:*/		return 0x821861B4;
		  /* 821861B4h */ case   18:  		/* cmpwi CR6, R11, 4 */
		/* 821861B4h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 821861B4h case   18:*/		return 0x821861B8;
		  /* 821861B8h */ case   19:  		/* bc 12, CR6_LT, -44 */
		/* 821861B8h case   19:*/		if ( regs.CR[6].lt ) { return 0x8218618C;  }
		/* 821861B8h case   19:*/		return 0x821861BC;
		  /* 821861BCh */ case   20:  		/* mr R11, R20 */
		/* 821861BCh case   20:*/		regs.R11 = regs.R20;
		/* 821861BCh case   20:*/		return 0x821861C0;
		  /* 821861C0h */ case   21:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821861C0h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821861C0h case   21:*/		return 0x821861C4;
		  /* 821861C4h */ case   22:  		/* bc 4, CR0_EQ, 48 */
		/* 821861C4h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821861F4;  }
		/* 821861C4h case   22:*/		return 0x821861C8;
	}
	return 0x821861C8;
} // Block from 8218616Ch-821861C8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821861C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821861C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821861C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821861C8);
		  /* 821861C8h */ case    0:  		/* lwz R15, <#[R1 + 332]> */
		/* 821861C8h case    0:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000014C) );
		/* 821861C8h case    0:*/		return 0x821861CC;
		  /* 821861CCh */ case    1:  		/* rlwinm R10, R9, 29, 3, 29 */
		/* 821861CCh case    1:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R9);
		/* 821861CCh case    1:*/		return 0x821861D0;
		  /* 821861D0h */ case    2:  		/* std R9, <#[R1 + 104]> */
		/* 821861D0h case    2:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 821861D0h case    2:*/		return 0x821861D4;
		  /* 821861D4h */ case    3:  		/* addi R11, R1, 96 */
		/* 821861D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821861D4h case    3:*/		return 0x821861D8;
		  /* 821861D8h */ case    4:  		/* rlwinm R7, R9, 0, 27, 31 */
		/* 821861D8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R9);
		/* 821861D8h case    4:*/		return 0x821861DC;
		  /* 821861DCh */ case    5:  		/* slw R14, R21, R29 */
		/* 821861DCh case    5:*/		cpu::op::slw<0>(regs,&regs.R14,regs.R21,regs.R29);
		/* 821861DCh case    5:*/		return 0x821861E0;
		  /* 821861E0h */ case    6:  		/* lwzx R9, <#[R10 + R11]> */
		/* 821861E0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821861E0h case    6:*/		return 0x821861E4;
		  /* 821861E4h */ case    7:  		/* slw R7, R14, R7 */
		/* 821861E4h case    7:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R14,regs.R7);
		/* 821861E4h case    7:*/		return 0x821861E8;
		  /* 821861E8h */ case    8:  		/* or R7, R7, R9 */
		/* 821861E8h case    8:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 821861E8h case    8:*/		return 0x821861EC;
		  /* 821861ECh */ case    9:  		/* ld R9, <#[R1 + 104]> */
		/* 821861ECh case    9:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 821861ECh case    9:*/		return 0x821861F0;
		  /* 821861F0h */ case   10:  		/* stwx R7, <#[R10 + R11]> */
		/* 821861F0h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821861F0h case   10:*/		return 0x821861F4;
	}
	return 0x821861F4;
} // Block from 821861C8h-821861F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821861F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821861F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821861F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821861F4);
		  /* 821861F4h */ case    0:  		/* addi R29, R29, 1 */
		/* 821861F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821861F4h case    0:*/		return 0x821861F8;
		  /* 821861F8h */ case    1:  		/* addi R6, R6, 4 */
		/* 821861F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 821861F8h case    1:*/		return 0x821861FC;
		  /* 821861FCh */ case    2:  		/* addi R5, R5, 5 */
		/* 821861FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x5);
		/* 821861FCh case    2:*/		return 0x82186200;
		  /* 82186200h */ case    3:  		/* cmplw CR6, R29, R16 */
		/* 82186200h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R16);
		/* 82186200h case    3:*/		return 0x82186204;
		  /* 82186204h */ case    4:  		/* bc 12, CR6_LT, -284 */
		/* 82186204h case    4:*/		if ( regs.CR[6].lt ) { return 0x821860E8;  }
		/* 82186204h case    4:*/		return 0x82186208;
		  /* 82186208h */ case    5:  		/* lwz R14, <#[R1 + 372]> */
		/* 82186208h case    5:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000174) );
		/* 82186208h case    5:*/		return 0x8218620C;
	}
	return 0x8218620C;
} // Block from 821861F4h-8218620Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218620Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218620C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218620C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218620C);
		  /* 8218620Ch */ case    0:  		/* add R10, R24, R9 */
		/* 8218620Ch case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R24,regs.R9);
		/* 8218620Ch case    0:*/		return 0x82186210;
		  /* 82186210h */ case    1:  		/* rlwinm R11, R9, 29, 3, 29 */
		/* 82186210h case    1:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R9);
		/* 82186210h case    1:*/		return 0x82186214;
		  /* 82186214h */ case    2:  		/* add R10, R10, R19 */
		/* 82186214h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R19);
		/* 82186214h case    2:*/		return 0x82186218;
		  /* 82186218h */ case    3:  		/* addi R7, R1, 96 */
		/* 82186218h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82186218h case    3:*/		return 0x8218621C;
		  /* 8218621Ch */ case    4:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8218621Ch case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8218621Ch case    4:*/		return 0x82186220;
		  /* 82186220h */ case    5:  		/* rlwinm R6, R9, 0, 27, 31 */
		/* 82186220h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R9);
		/* 82186220h case    5:*/		return 0x82186224;
		  /* 82186224h */ case    6:  		/* slw R10, R23, R10 */
		/* 82186224h case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R10);
		/* 82186224h case    6:*/		return 0x82186228;
		  /* 82186228h */ case    7:  		/* lwzx R7, <#[R11 + R7]> */
		/* 82186228h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82186228h case    7:*/		return 0x8218622C;
		  /* 8218622Ch */ case    8:  		/* addi R10, R10, -1 */
		/* 8218622Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8218622Ch case    8:*/		return 0x82186230;
		  /* 82186230h */ case    9:  		/* slw R5, R3, R6 */
		/* 82186230h case    9:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R3,regs.R6);
		/* 82186230h case    9:*/		return 0x82186234;
		  /* 82186234h */ case   10:  		/* and R10, R10, R7 */
		/* 82186234h case   10:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82186234h case   10:*/		return 0x82186238;
		  /* 82186238h */ case   11:  		/* lis R4, 0 */
		/* 82186238h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x0);
		/* 82186238h case   11:*/		return 0x8218623C;
		  /* 8218623Ch */ case   12:  		/* lis R7, -28311 */
		/* 8218623Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF9169);
		/* 8218623Ch case   12:*/		return 0x82186240;
		  /* 82186240h */ case   13:  		/* and R10, R10, R5 */
		/* 82186240h case   13:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82186240h case   13:*/		return 0x82186244;
		  /* 82186244h */ case   14:  		/* ori R7, R7, 5192 */
		/* 82186244h case   14:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x1448);
		/* 82186244h case   14:*/		return 0x82186248;
		  /* 82186248h */ case   15:  		/* ori R5, R4, 36262 */
		/* 82186248h case   15:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R4,0x8DA6);
		/* 82186248h case   15:*/		return 0x8218624C;
		  /* 8218624Ch */ case   16:  		/* srw R10, R10, R6 */
		/* 8218624Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 8218624Ch case   16:*/		return 0x82186250;
		  /* 82186250h */ case   17:  		/* rldimi R7, R5, 32, 0 */
		/* 82186250h case   17:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R7,regs.R5);
		/* 82186250h case   17:*/		return 0x82186254;
		  /* 82186254h */ case   18:  		/* rldicl R5, R10, 0, 32 */
		/* 82186254h case   18:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R5,regs.R10);
		/* 82186254h case   18:*/		return 0x82186258;
		  /* 82186258h */ case   19:  		/* addi R10, R1, 100 */
		/* 82186258h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x64);
		/* 82186258h case   19:*/		return 0x8218625C;
		  /* 8218625Ch */ case   20:  		/* srd R7, R7, R5 */
		/* 8218625Ch case   20:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 8218625Ch case   20:*/		return 0x82186260;
		  /* 82186260h */ case   21:  		/* srd R7, R7, R5 */
		/* 82186260h case   21:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 82186260h case   21:*/		return 0x82186264;
		  /* 82186264h */ case   22:  		/* lwzx R4, <#[R11 + R10]> */
		/* 82186264h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82186264h case   22:*/		return 0x82186268;
		  /* 82186268h */ case   23:  		/* srd R7, R7, R5 */
		/* 82186268h case   23:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 82186268h case   23:*/		return 0x8218626C;
		  /* 8218626Ch */ case   24:  		/* rlwinm R7, R7, 0, 29, 31 */
		/* 8218626Ch case   24:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R7,regs.R7);
		/* 8218626Ch case   24:*/		return 0x82186270;
		  /* 82186270h */ case   25:  		/* subfic R7, R7, 4 */
		/* 82186270h case   25:*/		cpu::op::subfic<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82186270h case   25:*/		return 0x82186274;
		  /* 82186274h */ case   26:  		/* slw R7, R7, R6 */
		/* 82186274h case   26:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82186274h case   26:*/		return 0x82186278;
		  /* 82186278h */ case   27:  		/* or R7, R7, R4 */
		/* 82186278h case   27:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R4);
		/* 82186278h case   27:*/		return 0x8218627C;
		  /* 8218627Ch */ case   28:  		/* stwx R7, <#[R11 + R10]> */
		/* 8218627Ch case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218627Ch case   28:*/		return 0x82186280;
	}
	return 0x82186280;
} // Block from 8218620Ch-82186280h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82186280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186280);
		  /* 82186280h */ case    0:  		/* addi R28, R28, 1 */
		/* 82186280h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82186280h case    0:*/		return 0x82186284;
		  /* 82186284h */ case    1:  		/* addi R27, R27, 5 */
		/* 82186284h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x5);
		/* 82186284h case    1:*/		return 0x82186288;
		  /* 82186288h */ case    2:  		/* addi R9, R9, 4 */
		/* 82186288h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82186288h case    2:*/		return 0x8218628C;
		  /* 8218628Ch */ case    3:  		/* cmplw CR6, R28, R22 */
		/* 8218628Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R22);
		/* 8218628Ch case    3:*/		return 0x82186290;
		  /* 82186290h */ case    4:  		/* bc 12, CR6_LT, -472 */
		/* 82186290h case    4:*/		if ( regs.CR[6].lt ) { return 0x821860B8;  }
		/* 82186290h case    4:*/		return 0x82186294;
	}
	return 0x82186294;
} // Block from 82186280h-82186294h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82186294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186294);
		  /* 82186294h */ case    0:  		/* mr R29, R20 */
		/* 82186294h case    0:*/		regs.R29 = regs.R20;
		/* 82186294h case    0:*/		return 0x82186298;
		  /* 82186298h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 82186298h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82186298h case    1:*/		return 0x8218629C;
		  /* 8218629Ch */ case    2:  		/* bc 12, CR6_EQ, 428 */
		/* 8218629Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82186448;  }
		/* 8218629Ch case    2:*/		return 0x821862A0;
		  /* 821862A0h */ case    3:  		/* li R6, 4 */
		/* 821862A0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821862A0h case    3:*/		return 0x821862A4;
		  /* 821862A4h */ case    4:  		/* addi R11, R6, -1 */
		/* 821862A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFF);
		/* 821862A4h case    4:*/		return 0x821862A8;
		  /* 821862A8h */ case    5:  		/* addi R7, R1, 356 */
		/* 821862A8h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x164);
		/* 821862A8h case    5:*/		return 0x821862AC;
		  /* 821862ACh */ case    6:  		/* addi R10, R11, 4 */
		/* 821862ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821862ACh case    6:*/		return 0x821862B0;
		  /* 821862B0h */ case    7:  		/* rlwinm R9, R6, 29, 3, 29 */
		/* 821862B0h case    7:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R6);
		/* 821862B0h case    7:*/		return 0x821862B4;
		  /* 821862B4h */ case    8:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821862B4h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821862B4h case    8:*/		return 0x821862B8;
		  /* 821862B8h */ case    9:  		/* rlwinm R5, R6, 0, 27, 31 */
		/* 821862B8h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R6);
		/* 821862B8h case    9:*/		return 0x821862BC;
		  /* 821862BCh */ case   10:  		/* slw R10, R23, R10 */
		/* 821862BCh case   10:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R10);
		/* 821862BCh case   10:*/		return 0x821862C0;
		  /* 821862C0h */ case   11:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821862C0h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821862C0h case   11:*/		return 0x821862C4;
		  /* 821862C4h */ case   12:  		/* addi R10, R10, -1 */
		/* 821862C4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821862C4h case   12:*/		return 0x821862C8;
		  /* 821862C8h */ case   13:  		/* slw R7, R3, R5 */
		/* 821862C8h case   13:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R3,regs.R5);
		/* 821862C8h case   13:*/		return 0x821862CC;
		  /* 821862CCh */ case   14:  		/* and R9, R10, R9 */
		/* 821862CCh case   14:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821862CCh case   14:*/		return 0x821862D0;
		  /* 821862D0h */ case   15:  		/* addi R10, R6, -4 */
		/* 821862D0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0xFFFFFFFC);
		/* 821862D0h case   15:*/		return 0x821862D4;
		  /* 821862D4h */ case   16:  		/* and R9, R9, R7 */
		/* 821862D4h case   16:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821862D4h case   16:*/		return 0x821862D8;
		  /* 821862D8h */ case   17:  		/* rlwinm R7, R10, 29, 3, 29 */
		/* 821862D8h case   17:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R7,regs.R10);
		/* 821862D8h case   17:*/		return 0x821862DC;
		  /* 821862DCh */ case   18:  		/* srw R4, R9, R5 */
		/* 821862DCh case   18:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R9,regs.R5);
		/* 821862DCh case   18:*/		return 0x821862E0;
		  /* 821862E0h */ case   19:  		/* addi R5, R1, 356 */
		/* 821862E0h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x164);
		/* 821862E0h case   19:*/		return 0x821862E4;
		  /* 821862E4h */ case   20:  		/* rlwinm R9, R4, 2, 0, 29 */
		/* 821862E4h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R4);
		/* 821862E4h case   20:*/		return 0x821862E8;
	}
	return 0x821862E8;
} // Block from 82186294h-821862E8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821862E8h
// Function '?PickRegForGroup@Compiler@D3DXShader@@AAAIPAURegGroupInfo@2@0V?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$03@2@IIIPAVGeneralRegisterSet@2@PAV?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$01@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821862E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821862E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821862E8);
		  /* 821862E8h */ case    0:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821862E8h case    0:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821862E8h case    0:*/		return 0x821862EC;
		  /* 821862ECh */ case    1:  		/* addi R9, R9, 3 */
		/* 821862ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x3);
		/* 821862ECh case    1:*/		return 0x821862F0;
		  /* 821862F0h */ case    2:  		/* slw R11, R23, R11 */
		/* 821862F0h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821862F0h case    2:*/		return 0x821862F4;
		  /* 821862F4h */ case    3:  		/* lwzx R7, <#[R7 + R5]> */
		/* 821862F4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R5 + 0x00000000) );
		/* 821862F4h case    3:*/		return 0x821862F8;
		  /* 821862F8h */ case    4:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821862F8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821862F8h case    4:*/		return 0x821862FC;
		  /* 821862FCh */ case    5:  		/* rlwinm R5, R4, 31, 3, 29 */
		/* 821862FCh case    5:*/		cpu::op::rlwinm<0,31,3,29>(regs,&regs.R5,regs.R4);
		/* 821862FCh case    5:*/		return 0x82186300;
		  /* 82186300h */ case    6:  		/* addi R31, R1, 96 */
		/* 82186300h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x60);
		/* 82186300h case    6:*/		return 0x82186304;
		  /* 82186304h */ case    7:  		/* addi R30, R11, -1 */
		/* 82186304h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFF);
		/* 82186304h case    7:*/		return 0x82186308;
		  /* 82186308h */ case    8:  		/* slw R11, R23, R9 */
		/* 82186308h case    8:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R9);
		/* 82186308h case    8:*/		return 0x8218630C;
		  /* 8218630Ch */ case    9:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8218630Ch case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8218630Ch case    9:*/		return 0x82186310;
		  /* 82186310h */ case   10:  		/* lwzx R9, <#[R5 + R31]> */
		/* 82186310h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + regs.R31 + 0x00000000) );
		/* 82186310h case   10:*/		return 0x82186314;
		  /* 82186314h */ case   11:  		/* addi R11, R11, -1 */
		/* 82186314h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82186314h case   11:*/		return 0x82186318;
		  /* 82186318h */ case   12:  		/* rlwinm R5, R4, 2, 27, 29 */
		/* 82186318h case   12:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R5,regs.R4);
		/* 82186318h case   12:*/		return 0x8218631C;
		  /* 8218631Ch */ case   13:  		/* and R7, R30, R7 */
		/* 8218631Ch case   13:*/		cpu::op::and<0>(regs,&regs.R7,regs.R30,regs.R7);
		/* 8218631Ch case   13:*/		return 0x82186320;
		  /* 82186320h */ case   14:  		/* slw R31, R3, R10 */
		/* 82186320h case   14:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R3,regs.R10);
		/* 82186320h case   14:*/		return 0x82186324;
		  /* 82186324h */ case   15:  		/* and R11, R11, R9 */
		/* 82186324h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82186324h case   15:*/		return 0x82186328;
		  /* 82186328h */ case   16:  		/* and R7, R7, R31 */
		/* 82186328h case   16:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 82186328h case   16:*/		return 0x8218632C;
		  /* 8218632Ch */ case   17:  		/* slw R9, R3, R5 */
		/* 8218632Ch case   17:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R3,regs.R5);
		/* 8218632Ch case   17:*/		return 0x82186330;
		  /* 82186330h */ case   18:  		/* and R11, R11, R9 */
		/* 82186330h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82186330h case   18:*/		return 0x82186334;
		  /* 82186334h */ case   19:  		/* srw R10, R7, R10 */
		/* 82186334h case   19:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 82186334h case   19:*/		return 0x82186338;
		  /* 82186338h */ case   20:  		/* slw R7, R21, R10 */
		/* 82186338h case   20:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R21,regs.R10);
		/* 82186338h case   20:*/		return 0x8218633C;
		  /* 8218633Ch */ case   21:  		/* srw R11, R11, R5 */
		/* 8218633Ch case   21:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 8218633Ch case   21:*/		return 0x82186340;
		  /* 82186340h */ case   22:  		/* and. R11, R11, R7 */
		/* 82186340h case   22:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82186340h case   22:*/		return 0x82186344;
		  /* 82186344h */ case   23:  		/* bc 4, CR0_EQ, 900 */
		/* 82186344h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821866C8;  }
		/* 82186344h case   23:*/		return 0x82186348;
		  /* 82186348h */ case   24:  		/* mr R30, R20 */
		/* 82186348h case   24:*/		regs.R30 = regs.R20;
		/* 82186348h case   24:*/		return 0x8218634C;
		  /* 8218634Ch */ case   25:  		/* cmplwi CR6, R22, 0 */
		/* 8218634Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8218634Ch case   25:*/		return 0x82186350;
		  /* 82186350h */ case   26:  		/* bc 12, CR6_EQ, 232 */
		/* 82186350h case   26:*/		if ( regs.CR[6].eq ) { return 0x82186438;  }
		/* 82186350h case   26:*/		return 0x82186354;
		  /* 82186354h */ case   27:  		/* mr R11, R20 */
		/* 82186354h case   27:*/		regs.R11 = regs.R20;
		/* 82186354h case   27:*/		return 0x82186358;
		  /* 82186358h */ case   28:  		/* mtspr CTR, R22 */
		/* 82186358h case   28:*/		regs.CTR = regs.R22;
		/* 82186358h case   28:*/		return 0x8218635C;
		  /* 8218635Ch */ case   29:  		/* cmplw CR6, R30, R4 */
		/* 8218635Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8218635Ch case   29:*/		return 0x82186360;
		  /* 82186360h */ case   30:  		/* addi R9, R11, 3 */
		/* 82186360h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3);
		/* 82186360h case   30:*/		return 0x82186364;
		  /* 82186364h */ case   31:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 82186364h case   31:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 82186364h case   31:*/		return 0x82186368;
		  /* 82186368h */ case   32:  		/* rlwinm R28, R11, 0, 27, 31 */
		/* 82186368h case   32:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R28,regs.R11);
		/* 82186368h case   32:*/		return 0x8218636C;
		  /* 8218636Ch */ case   33:  		/* bc 4, CR6_EQ, 112 */
		/* 8218636Ch case   33:*/		if ( !regs.CR[6].eq ) { return 0x821863DC;  }
		/* 8218636Ch case   33:*/		return 0x82186370;
		  /* 82186370h */ case   34:  		/* rlwinm R31, R9, 0, 27, 31 */
		/* 82186370h case   34:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R9);
		/* 82186370h case   34:*/		return 0x82186374;
		  /* 82186374h */ case   35:  		/* addi R9, R1, 100 */
		/* 82186374h case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 82186374h case   35:*/		return 0x82186378;
		  /* 82186378h */ case   36:  		/* slw R31, R23, R31 */
		/* 82186378h case   36:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R23,regs.R31);
		/* 82186378h case   36:*/		return 0x8218637C;
		  /* 8218637Ch */ case   37:  		/* addi R5, R1, 96 */
		/* 8218637Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8218637Ch case   37:*/		return 0x82186380;
		  /* 82186380h */ case   38:  		/* lwzx R27, <#[R10 + R9]> */
		/* 82186380h case   38:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82186380h case   38:*/		return 0x82186384;
		  /* 82186384h */ case   39:  		/* addi R31, R31, -1 */
		/* 82186384h case   39:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 82186384h case   39:*/		return 0x82186388;
		  /* 82186388h */ case   40:  		/* slw R26, R3, R28 */
		/* 82186388h case   40:*/		cpu::op::slw<0>(regs,&regs.R26,regs.R3,regs.R28);
		/* 82186388h case   40:*/		return 0x8218638C;
		  /* 8218638Ch */ case   41:  		/* nand R31, R31, R26 */
		/* 8218638Ch case   41:*/		cpu::op::nand<0>(regs,&regs.R31,regs.R31,regs.R26);
		/* 8218638Ch case   41:*/		return 0x82186390;
		  /* 82186390h */ case   42:  		/* lwzx R25, <#[R10 + R5]> */
		/* 82186390h case   42:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 82186390h case   42:*/		return 0x82186394;
		  /* 82186394h */ case   43:  		/* subfic R26, R7, 15 */
		/* 82186394h case   43:*/		cpu::op::subfic<0>(regs,&regs.R26,regs.R7,0xF);
		/* 82186394h case   43:*/		return 0x82186398;
		  /* 82186398h */ case   44:  		/* and R27, R31, R27 */
		/* 82186398h case   44:*/		cpu::op::and<0>(regs,&regs.R27,regs.R31,regs.R27);
		/* 82186398h case   44:*/		return 0x8218639C;
		  /* 8218639Ch */ case   45:  		/* slw R24, R21, R28 */
		/* 8218639Ch case   45:*/		cpu::op::slw<0>(regs,&regs.R24,regs.R21,regs.R28);
		/* 8218639Ch case   45:*/		return 0x821863A0;
		  /* 821863A0h */ case   46:  		/* slw R28, R26, R28 */
		/* 821863A0h case   46:*/		cpu::op::slw<0>(regs,&regs.R28,regs.R26,regs.R28);
		/* 821863A0h case   46:*/		return 0x821863A4;
		  /* 821863A4h */ case   47:  		/* and R31, R31, R25 */
		/* 821863A4h case   47:*/		cpu::op::and<0>(regs,&regs.R31,regs.R31,regs.R25);
		/* 821863A4h case   47:*/		return 0x821863A8;
		  /* 821863A8h */ case   48:  		/* or R27, R27, R24 */
		/* 821863A8h case   48:*/		cpu::op::or<0>(regs,&regs.R27,regs.R27,regs.R24);
		/* 821863A8h case   48:*/		return 0x821863AC;
		  /* 821863ACh */ case   49:  		/* or R31, R28, R31 */
		/* 821863ACh case   49:*/		cpu::op::or<0>(regs,&regs.R31,regs.R28,regs.R31);
		/* 821863ACh case   49:*/		return 0x821863B0;
		  /* 821863B0h */ case   50:  		/* stwx R27, <#[R10 + R9]> */
		/* 821863B0h case   50:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821863B0h case   50:*/		return 0x821863B4;
		  /* 821863B4h */ case   51:  		/* stwx R31, <#[R10 + R5]> */
		/* 821863B4h case   51:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 821863B4h case   51:*/		return 0x821863B8;
		  /* 821863B8h */ case   52:  		/* b 116 */
		/* 821863B8h case   52:*/		return 0x8218642C;
		/* 821863B8h case   52:*/		return 0x821863BC;
	}
	return 0x821863BC;
} // Block from 821862E8h-821863BCh (53 instructions)

//////////////////////////////////////////////////////
// Block at 821863BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821863BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821863BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821863BC);
		  /* 821863BCh */ case    0:  		/* lwz R15, <#[R1 + 332]> */
		/* 821863BCh case    0:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000014C) );
		/* 821863BCh case    0:*/		return 0x821863C0;
		  /* 821863C0h */ case    1:  		/* mr R11, R21 */
		/* 821863C0h case    1:*/		regs.R11 = regs.R21;
		/* 821863C0h case    1:*/		return 0x821863C4;
		  /* 821863C4h */ case    2:  		/* b -668 */
		/* 821863C4h case    2:*/		return 0x82186128;
		/* 821863C4h case    2:*/		return 0x821863C8;
	}
	return 0x821863C8;
} // Block from 821863BCh-821863C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821863C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821863C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821863C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821863C8);
		  /* 821863C8h */ case    0:  		/* lwz R15, <#[R1 + 332]> */
		/* 821863C8h case    0:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000014C) );
		/* 821863C8h case    0:*/		return 0x821863CC;
		  /* 821863CCh */ case    1:  		/* mr R11, R21 */
		/* 821863CCh case    1:*/		regs.R11 = regs.R21;
		/* 821863CCh case    1:*/		return 0x821863D0;
		  /* 821863D0h */ case    2:  		/* b -608 */
		/* 821863D0h case    2:*/		return 0x82186170;
		/* 821863D0h case    2:*/		return 0x821863D4;
	}
	return 0x821863D4;
} // Block from 821863C8h-821863D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821863D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821863D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821863D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821863D4);
		  /* 821863D4h */ case    0:  		/* mr R11, R21 */
		/* 821863D4h case    0:*/		regs.R11 = regs.R21;
		/* 821863D4h case    0:*/		return 0x821863D8;
		  /* 821863D8h */ case    1:  		/* b -536 */
		/* 821863D8h case    1:*/		return 0x821861C0;
		/* 821863D8h case    1:*/		return 0x821863DC;
	}
	return 0x821863DC;
} // Block from 821863D4h-821863DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821863DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821863DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821863DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821863DC);
		  /* 821863DCh */ case    0:  		/* rlwinm R5, R9, 0, 27, 31 */
		/* 821863DCh case    0:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R9);
		/* 821863DCh case    0:*/		return 0x821863E0;
		  /* 821863E0h */ case    1:  		/* addi R9, R1, 100 */
		/* 821863E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 821863E0h case    1:*/		return 0x821863E4;
		  /* 821863E4h */ case    2:  		/* slw R5, R23, R5 */
		/* 821863E4h case    2:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R23,regs.R5);
		/* 821863E4h case    2:*/		return 0x821863E8;
		  /* 821863E8h */ case    3:  		/* addi R5, R5, -1 */
		/* 821863E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFFFF);
		/* 821863E8h case    3:*/		return 0x821863EC;
		  /* 821863ECh */ case    4:  		/* lwzx R31, <#[R10 + R9]> */
		/* 821863ECh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821863ECh case    4:*/		return 0x821863F0;
		  /* 821863F0h */ case    5:  		/* slw R27, R3, R28 */
		/* 821863F0h case    5:*/		cpu::op::slw<0>(regs,&regs.R27,regs.R3,regs.R28);
		/* 821863F0h case    5:*/		return 0x821863F4;
		  /* 821863F4h */ case    6:  		/* and R27, R5, R27 */
		/* 821863F4h case    6:*/		cpu::op::and<0>(regs,&regs.R27,regs.R5,regs.R27);
		/* 821863F4h case    6:*/		return 0x821863F8;
		  /* 821863F8h */ case    7:  		/* mr R26, R31 */
		/* 821863F8h case    7:*/		regs.R26 = regs.R31;
		/* 821863F8h case    7:*/		return 0x821863FC;
		  /* 821863FCh */ case    8:  		/* and R31, R27, R31 */
		/* 821863FCh case    8:*/		cpu::op::and<0>(regs,&regs.R31,regs.R27,regs.R31);
		/* 821863FCh case    8:*/		return 0x82186400;
		  /* 82186400h */ case    9:  		/* addi R5, R1, 96 */
		/* 82186400h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 82186400h case    9:*/		return 0x82186404;
		  /* 82186404h */ case   10:  		/* srw R31, R31, R28 */
		/* 82186404h case   10:*/		cpu::op::srw<0>(regs,&regs.R31,regs.R31,regs.R28);
		/* 82186404h case   10:*/		return 0x82186408;
		  /* 82186408h */ case   11:  		/* addi R31, R31, 1 */
		/* 82186408h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82186408h case   11:*/		return 0x8218640C;
		  /* 8218640Ch */ case   12:  		/* andc R27, R26, R27 */
		/* 8218640Ch case   12:*/		cpu::op::andc<0>(regs,&regs.R27,regs.R26,regs.R27);
		/* 8218640Ch case   12:*/		return 0x82186410;
		  /* 82186410h */ case   13:  		/* lwzx R26, <#[R10 + R5]> */
		/* 82186410h case   13:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 82186410h case   13:*/		return 0x82186414;
		  /* 82186414h */ case   14:  		/* slw R31, R31, R28 */
		/* 82186414h case   14:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R31,regs.R28);
		/* 82186414h case   14:*/		return 0x82186418;
		  /* 82186418h */ case   15:  		/* slw R25, R7, R28 */
		/* 82186418h case   15:*/		cpu::op::slw<0>(regs,&regs.R25,regs.R7,regs.R28);
		/* 82186418h case   15:*/		return 0x8218641C;
		  /* 8218641Ch */ case   16:  		/* or R31, R27, R31 */
		/* 8218641Ch case   16:*/		cpu::op::or<0>(regs,&regs.R31,regs.R27,regs.R31);
		/* 8218641Ch case   16:*/		return 0x82186420;
		  /* 82186420h */ case   17:  		/* or R28, R25, R26 */
		/* 82186420h case   17:*/		cpu::op::or<0>(regs,&regs.R28,regs.R25,regs.R26);
		/* 82186420h case   17:*/		return 0x82186424;
		  /* 82186424h */ case   18:  		/* stwx R31, <#[R10 + R9]> */
		/* 82186424h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82186424h case   18:*/		return 0x82186428;
		  /* 82186428h */ case   19:  		/* stwx R28, <#[R10 + R5]> */
		/* 82186428h case   19:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 82186428h case   19:*/		return 0x8218642C;
	}
	return 0x8218642C;
} // Block from 821863DCh-8218642Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8218642Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218642C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218642C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218642C);
		  /* 8218642Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 8218642Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8218642Ch case    0:*/		return 0x82186430;
		  /* 82186430h */ case    1:  		/* addi R11, R11, 4 */
		/* 82186430h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82186430h case    1:*/		return 0x82186434;
		  /* 82186434h */ case    2:  		/* bc 16, CR0_LT, -216 */
		/* 82186434h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218635C;  }
		/* 82186434h case    2:*/		return 0x82186438;
	}
	return 0x82186438;
} // Block from 8218642Ch-82186438h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186438);
		  /* 82186438h */ case    0:  		/* addi R29, R29, 1 */
		/* 82186438h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82186438h case    0:*/		return 0x8218643C;
		  /* 8218643Ch */ case    1:  		/* addi R6, R6, 8 */
		/* 8218643Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x8);
		/* 8218643Ch case    1:*/		return 0x82186440;
		  /* 82186440h */ case    2:  		/* cmplw CR6, R29, R8 */
		/* 82186440h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R8);
		/* 82186440h case    2:*/		return 0x82186444;
		  /* 82186444h */ case    3:  		/* bc 12, CR6_LT, -416 */
		/* 82186444h case    3:*/		if ( regs.CR[6].lt ) { return 0x821862A4;  }
		/* 82186444h case    3:*/		return 0x82186448;
	}
	return 0x82186448;
} // Block from 82186438h-82186448h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82186448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186448);
		  /* 82186448h */ case    0:  		/* li R29, 15 */
		/* 82186448h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0xF);
		/* 82186448h case    0:*/		return 0x8218644C;
		  /* 8218644Ch */ case    1:  		/* mr R28, R20 */
		/* 8218644Ch case    1:*/		regs.R28 = regs.R20;
		/* 8218644Ch case    1:*/		return 0x82186450;
		  /* 82186450h */ case    2:  		/* mr R27, R20 */
		/* 82186450h case    2:*/		regs.R27 = regs.R20;
		/* 82186450h case    2:*/		return 0x82186454;
		  /* 82186454h */ case    3:  		/* cmplwi CR6, R22, 0 */
		/* 82186454h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82186454h case    3:*/		return 0x82186458;
		  /* 82186458h */ case    4:  		/* bc 12, CR6_EQ, 408 */
		/* 82186458h case    4:*/		if ( regs.CR[6].eq ) { return 0x821865F0;  }
		/* 82186458h case    4:*/		return 0x8218645C;
		  /* 8218645Ch */ case    5:  		/* slw R11, R21, R27 */
		/* 8218645Ch case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R27);
		/* 8218645Ch case    5:*/		return 0x82186460;
		  /* 82186460h */ case    6:  		/* and. R11, R11, R14 */
		/* 82186460h case    6:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R14);
		/* 82186460h case    6:*/		return 0x82186464;
		  /* 82186464h */ case    7:  		/* bc 4, CR0_EQ, 384 */
		/* 82186464h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821865E4;  }
		/* 82186464h case    7:*/		return 0x82186468;
		  /* 82186468h */ case    8:  		/* mr R11, R3 */
		/* 82186468h case    8:*/		regs.R11 = regs.R3;
		/* 82186468h case    8:*/		return 0x8218646C;
		  /* 8218646Ch */ case    9:  		/* li R7, 15 */
		/* 8218646Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xF);
		/* 8218646Ch case    9:*/		return 0x82186470;
		  /* 82186470h */ case   10:  		/* mr R8, R20 */
		/* 82186470h case   10:*/		regs.R8 = regs.R20;
		/* 82186470h case   10:*/		return 0x82186474;
		  /* 82186474h */ case   11:  		/* mr R10, R20 */
		/* 82186474h case   11:*/		regs.R10 = regs.R20;
		/* 82186474h case   11:*/		return 0x82186478;
		  /* 82186478h */ case   12:  		/* slw R9, R21, R8 */
		/* 82186478h case   12:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R21,regs.R8);
		/* 82186478h case   12:*/		return 0x8218647C;
		  /* 8218647Ch */ case   13:  		/* and. R9, R9, R14 */
		/* 8218647Ch case   13:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R14);
		/* 8218647Ch case   13:*/		return 0x82186480;
		  /* 82186480h */ case   14:  		/* bc 4, CR0_EQ, 84 */
		/* 82186480h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821864D4;  }
		/* 82186480h case   14:*/		return 0x82186484;
		  /* 82186484h */ case   15:  		/* addi R9, R10, 3 */
		/* 82186484h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x3);
		/* 82186484h case   15:*/		return 0x82186488;
		  /* 82186488h */ case   16:  		/* addi R5, R1, 100 */
		/* 82186488h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 82186488h case   16:*/		return 0x8218648C;
		  /* 8218648Ch */ case   17:  		/* rlwinm R6, R10, 29, 3, 29 */
		/* 8218648Ch case   17:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R6,regs.R10);
		/* 8218648Ch case   17:*/		return 0x82186490;
		  /* 82186490h */ case   18:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82186490h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82186490h case   18:*/		return 0x82186494;
		  /* 82186494h */ case   19:  		/* slw R9, R23, R9 */
		/* 82186494h case   19:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 82186494h case   19:*/		return 0x82186498;
		  /* 82186498h */ case   20:  		/* lwzx R6, <#[R6 + R5]> */
		/* 82186498h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 82186498h case   20:*/		return 0x8218649C;
		  /* 8218649Ch */ case   21:  		/* addi R9, R9, -1 */
		/* 8218649Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8218649Ch case   21:*/		return 0x821864A0;
		  /* 821864A0h */ case   22:  		/* rlwinm R5, R10, 0, 27, 31 */
		/* 821864A0h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R10);
		/* 821864A0h case   22:*/		return 0x821864A4;
		  /* 821864A4h */ case   23:  		/* and R9, R9, R6 */
		/* 821864A4h case   23:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821864A4h case   23:*/		return 0x821864A8;
		  /* 821864A8h */ case   24:  		/* slw R4, R3, R5 */
		/* 821864A8h case   24:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R3,regs.R5);
		/* 821864A8h case   24:*/		return 0x821864AC;
		  /* 821864ACh */ case   25:  		/* and R9, R9, R4 */
		/* 821864ACh case   25:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 821864ACh case   25:*/		return 0x821864B0;
		  /* 821864B0h */ case   26:  		/* srw R9, R9, R5 */
		/* 821864B0h case   26:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 821864B0h case   26:*/		return 0x821864B4;
		  /* 821864B4h */ case   27:  		/* cmplwi CR6, R9, 8 */
		/* 821864B4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000008);
		/* 821864B4h case   27:*/		return 0x821864B8;
		  /* 821864B8h */ case   28:  		/* bc 12, CR6_GT, 28 */
		/* 821864B8h case   28:*/		if ( regs.CR[6].gt ) { return 0x821864D4;  }
		/* 821864B8h case   28:*/		return 0x821864BC;
		  /* 821864BCh */ case   29:  		/* cmplwi CR6, R9, 0 */
		/* 821864BCh case   29:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821864BCh case   29:*/		return 0x821864C0;
		  /* 821864C0h */ case   30:  		/* bc 12, CR6_EQ, 520 */
		/* 821864C0h case   30:*/		if ( regs.CR[6].eq ) { return 0x821866C8;  }
		/* 821864C0h case   30:*/		return 0x821864C4;
		  /* 821864C4h */ case   31:  		/* cmplw CR6, R9, R7 */
		/* 821864C4h case   31:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821864C4h case   31:*/		return 0x821864C8;
		  /* 821864C8h */ case   32:  		/* bc 4, CR6_LT, 12 */
		/* 821864C8h case   32:*/		if ( !regs.CR[6].lt ) { return 0x821864D4;  }
		/* 821864C8h case   32:*/		return 0x821864CC;
		  /* 821864CCh */ case   33:  		/* mr R7, R9 */
		/* 821864CCh case   33:*/		regs.R7 = regs.R9;
		/* 821864CCh case   33:*/		return 0x821864D0;
		  /* 821864D0h */ case   34:  		/* mr R11, R8 */
		/* 821864D0h case   34:*/		regs.R11 = regs.R8;
		/* 821864D0h case   34:*/		return 0x821864D4;
	}
	return 0x821864D4;
} // Block from 82186448h-821864D4h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821864D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821864D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821864D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821864D4);
		  /* 821864D4h */ case    0:  		/* addi R8, R8, 1 */
		/* 821864D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821864D4h case    0:*/		return 0x821864D8;
	}
	return 0x821864D8;
} // Block from 821864D4h-821864D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821864D8h
// Function '?RestrictRegister@Compiler@D3DXShader@@AAAXPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821864D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821864D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821864D8);
		  /* 821864D8h */ case    0:  		/* addi R10, R10, 4 */
		/* 821864D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821864D8h case    0:*/		return 0x821864DC;
		  /* 821864DCh */ case    1:  		/* cmplw CR6, R8, R22 */
		/* 821864DCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R22);
		/* 821864DCh case    1:*/		return 0x821864E0;
		  /* 821864E0h */ case    2:  		/* bc 12, CR6_LT, -104 */
		/* 821864E0h case    2:*/		if ( regs.CR[6].lt ) { return 0x82186478;  }
		/* 821864E0h case    2:*/		return 0x821864E4;
		  /* 821864E4h */ case    3:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 821864E4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 821864E4h case    3:*/		return 0x821864E8;
		  /* 821864E8h */ case    4:  		/* rlwinm R5, R11, 31, 3, 29 */
		/* 821864E8h case    4:*/		cpu::op::rlwinm<0,31,3,29>(regs,&regs.R5,regs.R11);
		/* 821864E8h case    4:*/		return 0x821864EC;
		  /* 821864ECh */ case    5:  		/* addi R10, R10, 3 */
		/* 821864ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3);
		/* 821864ECh case    5:*/		return 0x821864F0;
		  /* 821864F0h */ case    6:  		/* addi R9, R1, 96 */
		/* 821864F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 821864F0h case    6:*/		return 0x821864F4;
		  /* 821864F4h */ case    7:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821864F4h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821864F4h case    7:*/		return 0x821864F8;
		  /* 821864F8h */ case    8:  		/* rlwinm R4, R11, 2, 27, 29 */
		/* 821864F8h case    8:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R4,regs.R11);
		/* 821864F8h case    8:*/		return 0x821864FC;
		  /* 821864FCh */ case    9:  		/* slw R10, R23, R10 */
		/* 821864FCh case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R10);
		/* 821864FCh case    9:*/		return 0x82186500;
		  /* 82186500h */ case   10:  		/* lwzx R11, <#[R5 + R9]> */
		/* 82186500h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 82186500h case   10:*/		return 0x82186504;
		  /* 82186504h */ case   11:  		/* addi R10, R10, -1 */
		/* 82186504h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82186504h case   11:*/		return 0x82186508;
		  /* 82186508h */ case   12:  		/* slw R9, R3, R4 */
		/* 82186508h case   12:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R3,regs.R4);
		/* 82186508h case   12:*/		return 0x8218650C;
		  /* 8218650Ch */ case   13:  		/* and R11, R10, R11 */
		/* 8218650Ch case   13:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218650Ch case   13:*/		return 0x82186510;
		  /* 82186510h */ case   14:  		/* and R11, R11, R9 */
		/* 82186510h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82186510h case   14:*/		return 0x82186514;
		  /* 82186514h */ case   15:  		/* srw R11, R11, R4 */
		/* 82186514h case   15:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82186514h case   15:*/		return 0x82186518;
		  /* 82186518h */ case   16:  		/* cmplwi CR6, R11, 15 */
		/* 82186518h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 82186518h case   16:*/		return 0x8218651C;
		  /* 8218651Ch */ case   17:  		/* bc 12, CR6_EQ, 428 */
		/* 8218651Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821866C8;  }
		/* 8218651Ch case   17:*/		return 0x82186520;
		  /* 82186520h */ case   18:  		/* andc R11, R29, R11 */
		/* 82186520h case   18:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 82186520h case   18:*/		return 0x82186524;
		  /* 82186524h */ case   19:  		/* mtspr CTR, R22 */
		/* 82186524h case   19:*/		regs.CTR = regs.R22;
		/* 82186524h case   19:*/		return 0x82186528;
		  /* 82186528h */ case   20:  		/* mr R31, R20 */
		/* 82186528h case   20:*/		regs.R31 = regs.R20;
		/* 82186528h case   20:*/		return 0x8218652C;
		  /* 8218652Ch */ case   21:  		/* addi R10, R11, -1 */
		/* 8218652Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8218652Ch case   21:*/		return 0x82186530;
		  /* 82186530h */ case   22:  		/* mr R8, R20 */
		/* 82186530h case   22:*/		regs.R8 = regs.R20;
		/* 82186530h case   22:*/		return 0x82186534;
		  /* 82186534h */ case   23:  		/* andc R11, R11, R10 */
		/* 82186534h case   23:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82186534h case   23:*/		return 0x82186538;
		  /* 82186538h */ case   24:  		/* cntlzw R10, R11 */
		/* 82186538h case   24:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R11);
		/* 82186538h case   24:*/		return 0x8218653C;
		  /* 8218653Ch */ case   25:  		/* subf R29, R11, R29 */
		/* 8218653Ch case   25:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 8218653Ch case   25:*/		return 0x82186540;
		  /* 82186540h */ case   26:  		/* or R28, R11, R28 */
		/* 82186540h case   26:*/		cpu::op::or<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 82186540h case   26:*/		return 0x82186544;
		  /* 82186544h */ case   27:  		/* subfic R30, R10, 31 */
		/* 82186544h case   27:*/		cpu::op::subfic<0>(regs,&regs.R30,regs.R10,0x1F);
		/* 82186544h case   27:*/		return 0x82186548;
		  /* 82186548h */ case   28:  		/* slw R10, R21, R31 */
		/* 82186548h case   28:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R21,regs.R31);
		/* 82186548h case   28:*/		return 0x8218654C;
		  /* 8218654Ch */ case   29:  		/* and. R10, R10, R14 */
		/* 8218654Ch case   29:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R14);
		/* 8218654Ch case   29:*/		return 0x82186550;
		  /* 82186550h */ case   30:  		/* bc 4, CR0_EQ, 96 */
		/* 82186550h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821865B0;  }
		/* 82186550h case   30:*/		return 0x82186554;
		  /* 82186554h */ case   31:  		/* addi R10, R8, 3 */
		/* 82186554h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x3);
		/* 82186554h case   31:*/		return 0x82186558;
		  /* 82186558h */ case   32:  		/* rlwinm R9, R8, 0, 27, 31 */
		/* 82186558h case   32:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R8);
		/* 82186558h case   32:*/		return 0x8218655C;
		  /* 8218655Ch */ case   33:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 8218655Ch case   33:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 8218655Ch case   33:*/		return 0x82186560;
		  /* 82186560h */ case   34:  		/* rlwinm R10, R8, 29, 3, 29 */
		/* 82186560h case   34:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R8);
		/* 82186560h case   34:*/		return 0x82186564;
		  /* 82186564h */ case   35:  		/* slw R6, R23, R6 */
		/* 82186564h case   35:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R23,regs.R6);
		/* 82186564h case   35:*/		return 0x82186568;
		  /* 82186568h */ case   36:  		/* addi R7, R1, 96 */
		/* 82186568h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82186568h case   36:*/		return 0x8218656C;
		  /* 8218656Ch */ case   37:  		/* addi R6, R6, -1 */
		/* 8218656Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 8218656Ch case   37:*/		return 0x82186570;
		  /* 82186570h */ case   38:  		/* slw R25, R3, R9 */
		/* 82186570h case   38:*/		cpu::op::slw<0>(regs,&regs.R25,regs.R3,regs.R9);
		/* 82186570h case   38:*/		return 0x82186574;
		  /* 82186574h */ case   39:  		/* lwzx R26, <#[R10 + R7]> */
		/* 82186574h case   39:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82186574h case   39:*/		return 0x82186578;
		  /* 82186578h */ case   40:  		/* and R6, R6, R25 */
		/* 82186578h case   40:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R25);
		/* 82186578h case   40:*/		return 0x8218657C;
		  /* 8218657Ch */ case   41:  		/* and R6, R6, R26 */
		/* 8218657Ch case   41:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R26);
		/* 8218657Ch case   41:*/		return 0x82186580;
		  /* 82186580h */ case   42:  		/* srw R6, R6, R9 */
		/* 82186580h case   42:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R6,regs.R9);
		/* 82186580h case   42:*/		return 0x82186584;
		  /* 82186584h */ case   43:  		/* and. R6, R6, R11 */
		/* 82186584h case   43:*/		cpu::op::and<1>(regs,&regs.R6,regs.R6,regs.R11);
		/* 82186584h case   43:*/		return 0x82186588;
		  /* 82186588h */ case   44:  		/* bc 4, CR0_EQ, 40 */
		/* 82186588h case   44:*/		if ( !regs.CR[0].eq ) { return 0x821865B0;  }
		/* 82186588h case   44:*/		return 0x8218658C;
		  /* 8218658Ch */ case   45:  		/* addi R6, R1, 100 */
		/* 8218658Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x64);
		/* 8218658Ch case   45:*/		return 0x82186590;
		  /* 82186590h */ case   46:  		/* slw R25, R21, R9 */
		/* 82186590h case   46:*/		cpu::op::slw<0>(regs,&regs.R25,regs.R21,regs.R9);
		/* 82186590h case   46:*/		return 0x82186594;
		  /* 82186594h */ case   47:  		/* lwzx R24, <#[R10 + R6]> */
		/* 82186594h case   47:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 82186594h case   47:*/		return 0x82186598;
		  /* 82186598h */ case   48:  		/* rlwinm R26, R26, 0, 0, 31 */
		/* 82186598h case   48:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R26,regs.R26);
		/* 82186598h case   48:*/		return 0x8218659C;
		  /* 8218659Ch */ case   49:  		/* slw R9, R11, R9 */
		/* 8218659Ch case   49:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8218659Ch case   49:*/		return 0x821865A0;
		  /* 821865A0h */ case   50:  		/* subf R25, R25, R24 */
		/* 821865A0h case   50:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R25,regs.R24);
		/* 821865A0h case   50:*/		return 0x821865A4;
		  /* 821865A4h */ case   51:  		/* or R9, R9, R26 */
		/* 821865A4h case   51:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R26);
		/* 821865A4h case   51:*/		return 0x821865A8;
		  /* 821865A8h */ case   52:  		/* stwx R25, <#[R10 + R6]> */
		/* 821865A8h case   52:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821865A8h case   52:*/		return 0x821865AC;
		  /* 821865ACh */ case   53:  		/* stwx R9, <#[R10 + R7]> */
		/* 821865ACh case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 821865ACh case   53:*/		return 0x821865B0;
	}
	return 0x821865B0;
} // Block from 821864D8h-821865B0h (54 instructions)

//////////////////////////////////////////////////////
// Block at 821865B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821865B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821865B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821865B0);
		  /* 821865B0h */ case    0:  		/* addi R31, R31, 1 */
		/* 821865B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821865B0h case    0:*/		return 0x821865B4;
		  /* 821865B4h */ case    1:  		/* addi R8, R8, 4 */
		/* 821865B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821865B4h case    1:*/		return 0x821865B8;
		  /* 821865B8h */ case    2:  		/* bc 16, CR0_LT, -112 */
		/* 821865B8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82186548;  }
		/* 821865B8h case    2:*/		return 0x821865BC;
		  /* 821865BCh */ case    3:  		/* addi R11, R1, 100 */
		/* 821865BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x64);
		/* 821865BCh case    3:*/		return 0x821865C0;
		  /* 821865C0h */ case    4:  		/* lwzx R10, <#[R5 + R17]> */
		/* 821865C0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + regs.R17 + 0x00000000) );
		/* 821865C0h case    4:*/		return 0x821865C4;
		  /* 821865C4h */ case    5:  		/* li R9, 15 */
		/* 821865C4h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0xF);
		/* 821865C4h case    5:*/		return 0x821865C8;
		  /* 821865C8h */ case    6:  		/* slw R8, R30, R4 */
		/* 821865C8h case    6:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R30,regs.R4);
		/* 821865C8h case    6:*/		return 0x821865CC;
		  /* 821865CCh */ case    7:  		/* lwzx R7, <#[R5 + R11]> */
		/* 821865CCh case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 821865CCh case    7:*/		return 0x821865D0;
		  /* 821865D0h */ case    8:  		/* slw R9, R9, R4 */
		/* 821865D0h case    8:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 821865D0h case    8:*/		return 0x821865D4;
		  /* 821865D4h */ case    9:  		/* or R9, R9, R7 */
		/* 821865D4h case    9:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821865D4h case    9:*/		return 0x821865D8;
		  /* 821865D8h */ case   10:  		/* or R10, R8, R10 */
		/* 821865D8h case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821865D8h case   10:*/		return 0x821865DC;
		  /* 821865DCh */ case   11:  		/* stwx R9, <#[R5 + R11]> */
		/* 821865DCh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 821865DCh case   11:*/		return 0x821865E0;
		  /* 821865E0h */ case   12:  		/* stwx R10, <#[R5 + R17]> */
		/* 821865E0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + regs.R17 + 0x00000000) );
		/* 821865E0h case   12:*/		return 0x821865E4;
	}
	return 0x821865E4;
} // Block from 821865B0h-821865E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821865E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821865E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821865E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821865E4);
		  /* 821865E4h */ case    0:  		/* addi R27, R27, 1 */
		/* 821865E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821865E4h case    0:*/		return 0x821865E8;
		  /* 821865E8h */ case    1:  		/* cmplw CR6, R27, R22 */
		/* 821865E8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R22);
		/* 821865E8h case    1:*/		return 0x821865EC;
		  /* 821865ECh */ case    2:  		/* bc 12, CR6_LT, -400 */
		/* 821865ECh case    2:*/		if ( regs.CR[6].lt ) { return 0x8218645C;  }
		/* 821865ECh case    2:*/		return 0x821865F0;
	}
	return 0x821865F0;
} // Block from 821865E4h-821865F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821865F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821865F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821865F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821865F0);
		  /* 821865F0h */ case    0:  		/* cntlzw R11, R28 */
		/* 821865F0h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R28);
		/* 821865F0h case    0:*/		return 0x821865F4;
		  /* 821865F4h */ case    1:  		/* mr R10, R16 */
		/* 821865F4h case    1:*/		regs.R10 = regs.R16;
		/* 821865F4h case    1:*/		return 0x821865F8;
	}
	return 0x821865F8;
} // Block from 821865F0h-821865F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821865F8h
// Function '?CanAddToGroupComponent@Compiler@D3DXShader@@AAA_NPAURegGroupInfo@2@III@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821865F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821865F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821865F8);
		  /* 821865F8h */ case    0:  		/* subfic R11, R11, 32 */
		/* 821865F8h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821865F8h case    0:*/		return 0x821865FC;
		  /* 821865FCh */ case    1:  		/* cmplw CR6, R16, R11 */
		/* 821865FCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R16,regs.R11);
		/* 821865FCh case    1:*/		return 0x82186600;
		  /* 82186600h */ case    2:  		/* bc 12, CR6_GT, 8 */
		/* 82186600h case    2:*/		if ( regs.CR[6].gt ) { return 0x82186608;  }
		/* 82186600h case    2:*/		return 0x82186604;
		  /* 82186604h */ case    3:  		/* mr R10, R11 */
		/* 82186604h case    3:*/		regs.R10 = regs.R11;
		/* 82186604h case    3:*/		return 0x82186608;
	}
	return 0x82186608;
} // Block from 821865F8h-82186608h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82186608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186608);
		  /* 82186608h */ case    0:  		/* cmplw CR6, R10, R22 */
		/* 82186608h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 82186608h case    0:*/		return 0x8218660C;
		  /* 8218660Ch */ case    1:  		/* bc 4, CR6_GT, 28 */
		/* 8218660Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x82186628;  }
		/* 8218660Ch case    1:*/		return 0x82186610;
		  /* 82186610h */ case    2:  		/* cmplw CR6, R16, R11 */
		/* 82186610h case    2:*/		cpu::op::cmplw<6>(regs,regs.R16,regs.R11);
		/* 82186610h case    2:*/		return 0x82186614;
		  /* 82186614h */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 82186614h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82186620;  }
		/* 82186614h case    3:*/		return 0x82186618;
		  /* 82186618h */ case    4:  		/* mr R31, R16 */
		/* 82186618h case    4:*/		regs.R31 = regs.R16;
		/* 82186618h case    4:*/		return 0x8218661C;
		  /* 8218661Ch */ case    5:  		/* b 16 */
		/* 8218661Ch case    5:*/		return 0x8218662C;
		/* 8218661Ch case    5:*/		return 0x82186620;
	}
	return 0x82186620;
} // Block from 82186608h-82186620h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186620);
		  /* 82186620h */ case    0:  		/* mr R31, R11 */
		/* 82186620h case    0:*/		regs.R31 = regs.R11;
		/* 82186620h case    0:*/		return 0x82186624;
		  /* 82186624h */ case    1:  		/* b 8 */
		/* 82186624h case    1:*/		return 0x8218662C;
		/* 82186624h case    1:*/		return 0x82186628;
	}
	return 0x82186628;
} // Block from 82186620h-82186628h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186628);
		  /* 82186628h */ case    0:  		/* mr R31, R22 */
		/* 82186628h case    0:*/		regs.R31 = regs.R22;
		/* 82186628h case    0:*/		return 0x8218662C;
	}
	return 0x8218662C;
} // Block from 82186628h-8218662Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218662Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218662C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218662C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218662C);
		  /* 8218662Ch */ case    0:  		/* lwz R11, <#[R19 + 192]> */
		/* 8218662Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218662Ch case    0:*/		return 0x82186630;
		  /* 82186630h */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82186630h case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82186630h case    1:*/		return 0x82186634;
		  /* 82186634h */ case    2:  		/* bc 12, CR0_EQ, 132 */
		/* 82186634h case    2:*/		if ( regs.CR[0].eq ) { return 0x821866B8;  }
		/* 82186634h case    2:*/		return 0x82186638;
		  /* 82186638h */ case    3:  		/* lwz R11, <#[R18 + 192]> */
		/* 82186638h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x000000C0) );
		/* 82186638h case    3:*/		return 0x8218663C;
		  /* 8218663Ch */ case    4:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8218663Ch case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8218663Ch case    4:*/		return 0x82186640;
		  /* 82186640h */ case    5:  		/* bc 12, CR0_EQ, 120 */
		/* 82186640h case    5:*/		if ( regs.CR[0].eq ) { return 0x821866B8;  }
		/* 82186640h case    5:*/		return 0x82186644;
		  /* 82186644h */ case    6:  		/* addi R10, R1, 120 */
		/* 82186644h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x78);
		/* 82186644h case    6:*/		return 0x82186648;
		  /* 82186648h */ case    7:  		/* stw R15, <#[R1 + 112]> */
		/* 82186648h case    7:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 82186648h case    7:*/		return 0x8218664C;
		  /* 8218664Ch */ case    8:  		/* lwz R11, <#[R15 + 792]> */
		/* 8218664Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000318) );
		/* 8218664Ch case    8:*/		return 0x82186650;
		  /* 82186650h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82186650h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82186650h case    9:*/		return 0x82186654;
		  /* 82186654h */ case   10:  		/* std R20, <#[R10]> */
		/* 82186654h case   10:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000000) );
		/* 82186654h case   10:*/		return 0x82186658;
		  /* 82186658h */ case   11:  		/* std R20, <#[R10 + 8]> */
		/* 82186658h case   11:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000008) );
		/* 82186658h case   11:*/		return 0x8218665C;
		  /* 8218665Ch */ case   12:  		/* std R20, <#[R10 + 16]> */
		/* 8218665Ch case   12:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000010) );
		/* 8218665Ch case   12:*/		return 0x82186660;
		  /* 82186660h */ case   13:  		/* std R20, <#[R10 + 24]> */
		/* 82186660h case   13:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000018) );
		/* 82186660h case   13:*/		return 0x82186664;
		  /* 82186664h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 82186664h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8218666C;  }
		/* 82186664h case   14:*/		return 0x82186668;
		  /* 82186668h */ case   15:  		/* li R11, 32 */
		/* 82186668h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82186668h case   15:*/		return 0x8218666C;
	}
	return 0x8218666C;
} // Block from 8218662Ch-8218666Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8218666Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218666C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218666C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218666C);
		  /* 8218666Ch */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 8218666Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 8218666Ch case    0:*/		return 0x82186670;
		  /* 82186670h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82186670h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82186684;  }
		/* 82186670h case    1:*/		return 0x82186674;
		  /* 82186674h */ case    2:  		/* subfic R5, R11, 64 */
		/* 82186674h case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82186674h case    2:*/		return 0x82186678;
		  /* 82186678h */ case    3:  		/* mr R4, R11 */
		/* 82186678h case    3:*/		regs.R4 = regs.R11;
		/* 82186678h case    3:*/		return 0x8218667C;
		  /* 8218667Ch */ case    4:  		/* addi R3, R1, 112 */
		/* 8218667Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8218667Ch case    4:*/		return 0x82186680;
		  /* 82186680h */ case    5:  		/* bl -94632 */
		/* 82186680h case    5:*/		regs.LR = 0x82186684; return 0x8216F4D8;
		/* 82186680h case    5:*/		return 0x82186684;
	}
	return 0x82186684;
} // Block from 8218666Ch-82186684h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186684);
		  /* 82186684h */ case    0:  		/* addi R11, R1, 100 */
		/* 82186684h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x64);
		/* 82186684h case    0:*/		return 0x82186688;
		  /* 82186688h */ case    1:  		/* lwz R6, <#[R17]> */
		/* 82186688h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R17 + 0x00000000) );
		/* 82186688h case    1:*/		return 0x8218668C;
		  /* 8218668Ch */ case    2:  		/* addi R10, R1, 112 */
		/* 8218668Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8218668Ch case    2:*/		return 0x82186690;
		  /* 82186690h */ case    3:  		/* lwz R9, <#[R1 + 380]> */
		/* 82186690h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000017C) );
		/* 82186690h case    3:*/		return 0x82186694;
		  /* 82186694h */ case    4:  		/* mr R8, R14 */
		/* 82186694h case    4:*/		regs.R8 = regs.R14;
		/* 82186694h case    4:*/		return 0x82186698;
		  /* 82186698h */ case    5:  		/* stw R11, <#[R1 + 84]> */
		/* 82186698h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82186698h case    5:*/		return 0x8218669C;
		  /* 8218669Ch */ case    6:  		/* mr R7, R31 */
		/* 8218669Ch case    6:*/		regs.R7 = regs.R31;
		/* 8218669Ch case    6:*/		return 0x821866A0;
		  /* 821866A0h */ case    7:  		/* mr R5, R19 */
		/* 821866A0h case    7:*/		regs.R5 = regs.R19;
		/* 821866A0h case    7:*/		return 0x821866A4;
		  /* 821866A4h */ case    8:  		/* mr R4, R18 */
		/* 821866A4h case    8:*/		regs.R4 = regs.R18;
		/* 821866A4h case    8:*/		return 0x821866A8;
		  /* 821866A8h */ case    9:  		/* mr R3, R15 */
		/* 821866A8h case    9:*/		regs.R3 = regs.R15;
		/* 821866A8h case    9:*/		return 0x821866AC;
		  /* 821866ACh */ case   10:  		/* bl -3316 */
		/* 821866ACh case   10:*/		regs.LR = 0x821866B0; return 0x821859B8;
		/* 821866ACh case   10:*/		return 0x821866B0;
		  /* 821866B0h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 821866B0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821866B0h case   11:*/		return 0x821866B4;
		  /* 821866B4h */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 821866B4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821866C8;  }
		/* 821866B4h case   12:*/		return 0x821866B8;
	}
	return 0x821866B8;
} // Block from 82186684h-821866B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821866B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821866B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821866B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821866B8);
		  /* 821866B8h */ case    0:  		/* lwz R11, <#[R17]> */
		/* 821866B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821866B8h case    0:*/		return 0x821866BC;
		  /* 821866BCh */ case    1:  		/* rlwinm R10, R31, 16, 0, 15 */
		/* 821866BCh case    1:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R31);
		/* 821866BCh case    1:*/		return 0x821866C0;
		  /* 821866C0h */ case    2:  		/* or R11, R10, R11 */
		/* 821866C0h case    2:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821866C0h case    2:*/		return 0x821866C4;
		  /* 821866C4h */ case    3:  		/* stw R11, <#[R17]> */
		/* 821866C4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821866C4h case    3:*/		return 0x821866C8;
	}
	return 0x821866C8;
} // Block from 821866B8h-821866C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821866C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821866C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821866C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821866C8);
		  /* 821866C8h */ case    0:  		/* mr R3, R17 */
		/* 821866C8h case    0:*/		regs.R3 = regs.R17;
		/* 821866C8h case    0:*/		return 0x821866CC;
		  /* 821866CCh */ case    1:  		/* addi R1, R1, 304 */
		/* 821866CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 821866CCh case    1:*/		return 0x821866D0;
		  /* 821866D0h */ case    2:  		/* b -1004640 */
		/* 821866D0h case    2:*/		return 0x82091270;
		/* 821866D0h case    2:*/		return 0x821866D4;
		  /* 821866D4h */ case    3:  		/* nop */
		/* 821866D4h case    3:*/		cpu::op::nop();
		/* 821866D4h case    3:*/		return 0x821866D8;
	}
	return 0x821866D8;
} // Block from 821866C8h-821866D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821866D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821866D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821866D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821866D8);
		  /* 821866D8h */ case    0:  		/* mfspr R12, LR */
		/* 821866D8h case    0:*/		regs.R12 = regs.LR;
		/* 821866D8h case    0:*/		return 0x821866DC;
		  /* 821866DCh */ case    1:  		/* bl -1004684 */
		/* 821866DCh case    1:*/		regs.LR = 0x821866E0; return 0x82091250;
		/* 821866DCh case    1:*/		return 0x821866E0;
		  /* 821866E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821866E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821866E0h case    2:*/		return 0x821866E4;
		  /* 821866E4h */ case    3:  		/* mr R27, R3 */
		/* 821866E4h case    3:*/		regs.R27 = regs.R3;
		/* 821866E4h case    3:*/		return 0x821866E8;
		  /* 821866E8h */ case    4:  		/* stw R6, <#[R1 + 188]> */
		/* 821866E8h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 821866E8h case    4:*/		return 0x821866EC;
		  /* 821866ECh */ case    5:  		/* mr R29, R4 */
		/* 821866ECh case    5:*/		regs.R29 = regs.R4;
		/* 821866ECh case    5:*/		return 0x821866F0;
		  /* 821866F0h */ case    6:  		/* mr R28, R5 */
		/* 821866F0h case    6:*/		regs.R28 = regs.R5;
		/* 821866F0h case    6:*/		return 0x821866F4;
		  /* 821866F4h */ case    7:  		/* mr R30, R7 */
		/* 821866F4h case    7:*/		regs.R30 = regs.R7;
		/* 821866F4h case    7:*/		return 0x821866F8;
		  /* 821866F8h */ case    8:  		/* mr R26, R8 */
		/* 821866F8h case    8:*/		regs.R26 = regs.R8;
		/* 821866F8h case    8:*/		return 0x821866FC;
		  /* 821866FCh */ case    9:  		/* mr R31, R9 */
		/* 821866FCh case    9:*/		regs.R31 = regs.R9;
		/* 821866FCh case    9:*/		return 0x82186700;
		  /* 82186700h */ case   10:  		/* cmplwi CR6, R7, 0 */
		/* 82186700h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82186700h case   10:*/		return 0x82186704;
		  /* 82186704h */ case   11:  		/* bc 4, CR6_EQ, 60 */
		/* 82186704h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82186740;  }
		/* 82186704h case   11:*/		return 0x82186708;
		  /* 82186708h */ case   12:  		/* lwz R11, <#[R4 + 192]> */
		/* 82186708h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000C0) );
		/* 82186708h case   12:*/		return 0x8218670C;
		  /* 8218670Ch */ case   13:  		/* lwz R10, <#[R5 + 192]> */
		/* 8218670Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x000000C0) );
		/* 8218670Ch case   13:*/		return 0x82186710;
		  /* 82186710h */ case   14:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 82186710h case   14:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 82186710h case   14:*/		return 0x82186714;
		  /* 82186714h */ case   15:  		/* rlwinm R8, R10, 0, 29, 31 */
		/* 82186714h case   15:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R10);
		/* 82186714h case   15:*/		return 0x82186718;
		  /* 82186718h */ case   16:  		/* add R9, R8, R9 */
		/* 82186718h case   16:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82186718h case   16:*/		return 0x8218671C;
		  /* 8218671Ch */ case   17:  		/* subf R9, R31, R9 */
		/* 8218671Ch case   17:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R31,regs.R9);
		/* 8218671Ch case   17:*/		return 0x82186720;
		  /* 82186720h */ case   18:  		/* cmplwi CR6, R9, 4 */
		/* 82186720h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82186720h case   18:*/		return 0x82186724;
		  /* 82186724h */ case   19:  		/* bc 12, CR6_GT, 28 */
		/* 82186724h case   19:*/		if ( regs.CR[6].gt ) { return 0x82186740;  }
		/* 82186724h case   19:*/		return 0x82186728;
		  /* 82186728h */ case   20:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82186728h case   20:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82186728h case   20:*/		return 0x8218672C;
		  /* 8218672Ch */ case   21:  		/* bc 4, CR0_EQ, 20 */
		/* 8218672Ch case   21:*/		if ( !regs.CR[0].eq ) { return 0x82186740;  }
		/* 8218672Ch case   21:*/		return 0x82186730;
		  /* 82186730h */ case   22:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 82186730h case   22:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 82186730h case   22:*/		return 0x82186734;
		  /* 82186734h */ case   23:  		/* bc 4, CR0_EQ, 12 */
		/* 82186734h case   23:*/		if ( !regs.CR[0].eq ) { return 0x82186740;  }
		/* 82186734h case   23:*/		return 0x82186738;
		  /* 82186738h */ case   24:  		/* li R3, 1 */
		/* 82186738h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82186738h case   24:*/		return 0x8218673C;
		  /* 8218673Ch */ case   25:  		/* b 308 */
		/* 8218673Ch case   25:*/		return 0x82186870;
		/* 8218673Ch case   25:*/		return 0x82186740;
	}
	return 0x82186740;
} // Block from 821866D8h-82186740h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82186740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186740);
		  /* 82186740h */ case    0:  		/* mr R7, R6 */
		/* 82186740h case    0:*/		regs.R7 = regs.R6;
		/* 82186740h case    0:*/		return 0x82186744;
		  /* 82186744h */ case    1:  		/* mr R10, R31 */
		/* 82186744h case    1:*/		regs.R10 = regs.R31;
		/* 82186744h case    1:*/		return 0x82186748;
		  /* 82186748h */ case    2:  		/* mr R9, R26 */
		/* 82186748h case    2:*/		regs.R9 = regs.R26;
		/* 82186748h case    2:*/		return 0x8218674C;
		  /* 8218674Ch */ case    3:  		/* mr R8, R30 */
		/* 8218674Ch case    3:*/		regs.R8 = regs.R30;
		/* 8218674Ch case    3:*/		return 0x82186750;
		  /* 82186750h */ case    4:  		/* mr R6, R28 */
		/* 82186750h case    4:*/		regs.R6 = regs.R28;
		/* 82186750h case    4:*/		return 0x82186754;
		  /* 82186754h */ case    5:  		/* mr R5, R29 */
		/* 82186754h case    5:*/		regs.R5 = regs.R29;
		/* 82186754h case    5:*/		return 0x82186758;
		  /* 82186758h */ case    6:  		/* mr R4, R27 */
		/* 82186758h case    6:*/		regs.R4 = regs.R27;
		/* 82186758h case    6:*/		return 0x8218675C;
		  /* 8218675Ch */ case    7:  		/* addi R3, R1, 80 */
		/* 8218675Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8218675Ch case    7:*/		return 0x82186760;
		  /* 82186760h */ case    8:  		/* bl -1824 */
		/* 82186760h case    8:*/		regs.LR = 0x82186764; return 0x82186040;
		/* 82186760h case    8:*/		return 0x82186764;
		  /* 82186764h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 82186764h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82186764h case    9:*/		return 0x82186768;
		  /* 82186768h */ case   10:  		/* rlwinm. R11, R11, 0, 12, 15 */
		/* 82186768h case   10:*/		cpu::op::rlwinm<1,0,12,15>(regs,&regs.R11,regs.R11);
		/* 82186768h case   10:*/		return 0x8218676C;
		  /* 8218676Ch */ case   11:  		/* bc 4, CR0_EQ, -52 */
		/* 8218676Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82186738;  }
		/* 8218676Ch case   11:*/		return 0x82186770;
		  /* 82186770h */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 82186770h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82186770h case   12:*/		return 0x82186774;
		  /* 82186774h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 82186774h case   13:*/		if ( regs.CR[6].eq ) { return 0x82186780;  }
		/* 82186774h case   13:*/		return 0x82186778;
		  /* 82186778h */ case   14:  		/* li R3, 0 */
		/* 82186778h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82186778h case   14:*/		return 0x8218677C;
		  /* 8218677Ch */ case   15:  		/* b 244 */
		/* 8218677Ch case   15:*/		return 0x82186870;
		/* 8218677Ch case   15:*/		return 0x82186780;
	}
	return 0x82186780;
} // Block from 82186740h-82186780h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82186780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186780);
		  /* 82186780h */ case    0:  		/* addi R11, R1, 80 */
		/* 82186780h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82186780h case    0:*/		return 0x82186784;
		  /* 82186784h */ case    1:  		/* li R10, 0 */
		/* 82186784h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82186784h case    1:*/		return 0x82186788;
		  /* 82186788h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82186788h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82186788h case    2:*/		return 0x8218678C;
		  /* 8218678Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 8218678Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8218678Ch case    3:*/		return 0x82186790;
		  /* 82186790h */ case    4:  		/* bc 12, CR6_EQ, 168 */
		/* 82186790h case    4:*/		if ( regs.CR[6].eq ) { return 0x82186838;  }
		/* 82186790h case    4:*/		return 0x82186794;
		  /* 82186794h */ case    5:  		/* li R11, 4 */
		/* 82186794h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82186794h case    5:*/		return 0x82186798;
		  /* 82186798h */ case    6:  		/* mtspr CTR, R30 */
		/* 82186798h case    6:*/		regs.CTR = regs.R30;
		/* 82186798h case    6:*/		return 0x8218679C;
		  /* 8218679Ch */ case    7:  		/* li R5, 2 */
		/* 8218679Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8218679Ch case    7:*/		return 0x821867A0;
		  /* 821867A0h */ case    8:  		/* li R8, -1 */
		/* 821867A0h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 821867A0h case    8:*/		return 0x821867A4;
		  /* 821867A4h */ case    9:  		/* addi R10, R11, 3 */
		/* 821867A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821867A4h case    9:*/		return 0x821867A8;
		  /* 821867A8h */ case   10:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 821867A8h case   10:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 821867A8h case   10:*/		return 0x821867AC;
		  /* 821867ACh */ case   11:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821867ACh case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821867ACh case   11:*/		return 0x821867B0;
		  /* 821867B0h */ case   12:  		/* addi R7, R1, 188 */
		/* 821867B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xBC);
		/* 821867B0h case   12:*/		return 0x821867B4;
		  /* 821867B4h */ case   13:  		/* slw R10, R5, R10 */
		/* 821867B4h case   13:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 821867B4h case   13:*/		return 0x821867B8;
		  /* 821867B8h */ case   14:  		/* lwzx R6, <#[R9 + R7]> */
		/* 821867B8h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821867B8h case   14:*/		return 0x821867BC;
		  /* 821867BCh */ case   15:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821867BCh case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821867BCh case   15:*/		return 0x821867C0;
		  /* 821867C0h */ case   16:  		/* addi R10, R10, -1 */
		/* 821867C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821867C0h case   16:*/		return 0x821867C4;
		  /* 821867C4h */ case   17:  		/* addi R7, R11, -4 */
		/* 821867C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFC);
		/* 821867C4h case   17:*/		return 0x821867C8;
		  /* 821867C8h */ case   18:  		/* and R3, R10, R6 */
		/* 821867C8h case   18:*/		cpu::op::and<0>(regs,&regs.R3,regs.R10,regs.R6);
		/* 821867C8h case   18:*/		return 0x821867CC;
		  /* 821867CCh */ case   19:  		/* slw R31, R8, R4 */
		/* 821867CCh case   19:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R8,regs.R4);
		/* 821867CCh case   19:*/		return 0x821867D0;
		  /* 821867D0h */ case   20:  		/* rlwinm R10, R7, 29, 3, 29 */
		/* 821867D0h case   20:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R7);
		/* 821867D0h case   20:*/		return 0x821867D4;
		  /* 821867D4h */ case   21:  		/* and R3, R3, R31 */
		/* 821867D4h case   21:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R31);
		/* 821867D4h case   21:*/		return 0x821867D8;
		  /* 821867D8h */ case   22:  		/* addi R6, R1, 80 */
		/* 821867D8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821867D8h case   22:*/		return 0x821867DC;
		  /* 821867DCh */ case   23:  		/* rlwinm R31, R7, 0, 27, 31 */
		/* 821867DCh case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R7);
		/* 821867DCh case   23:*/		return 0x821867E0;
	}
	return 0x821867E0;
} // Block from 82186780h-821867E0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821867E0h
// Function '?CanAddToGroup@Compiler@D3DXShader@@AAA_NPAURegGroupInfo@2@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821867E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821867E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821867E0);
		  /* 821867E0h */ case    0:  		/* srw R7, R3, R4 */
		/* 821867E0h case    0:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R3,regs.R4);
		/* 821867E0h case    0:*/		return 0x821867E4;
		  /* 821867E4h */ case    1:  		/* lwzx R3, <#[R10 + R6]> */
		/* 821867E4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821867E4h case    1:*/		return 0x821867E8;
		  /* 821867E8h */ case    2:  		/* slw R7, R7, R31 */
		/* 821867E8h case    2:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 821867E8h case    2:*/		return 0x821867EC;
		  /* 821867ECh */ case    3:  		/* or R7, R7, R3 */
		/* 821867ECh case    3:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R3);
		/* 821867ECh case    3:*/		return 0x821867F0;
		  /* 821867F0h */ case    4:  		/* addi R3, R11, -1 */
		/* 821867F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFFF);
		/* 821867F0h case    4:*/		return 0x821867F4;
		  /* 821867F4h */ case    5:  		/* stwx R7, <#[R10 + R6]> */
		/* 821867F4h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821867F4h case    5:*/		return 0x821867F8;
		  /* 821867F8h */ case    6:  		/* addi R6, R1, 188 */
		/* 821867F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xBC);
		/* 821867F8h case    6:*/		return 0x821867FC;
		  /* 821867FCh */ case    7:  		/* rlwinm R7, R3, 0, 27, 31 */
		/* 821867FCh case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R3);
		/* 821867FCh case    7:*/		return 0x82186800;
		  /* 82186800h */ case    8:  		/* slw R3, R8, R31 */
		/* 82186800h case    8:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R8,regs.R31);
		/* 82186800h case    8:*/		return 0x82186804;
		  /* 82186804h */ case    9:  		/* slw R7, R5, R7 */
		/* 82186804h case    9:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R5,regs.R7);
		/* 82186804h case    9:*/		return 0x82186808;
		  /* 82186808h */ case   10:  		/* lwzx R6, <#[R10 + R6]> */
		/* 82186808h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 82186808h case   10:*/		return 0x8218680C;
		  /* 8218680Ch */ case   11:  		/* addi R7, R7, -1 */
		/* 8218680Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 8218680Ch case   11:*/		return 0x82186810;
		  /* 82186810h */ case   12:  		/* addi R10, R1, 80 */
		/* 82186810h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82186810h case   12:*/		return 0x82186814;
		  /* 82186814h */ case   13:  		/* and R7, R7, R6 */
		/* 82186814h case   13:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82186814h case   13:*/		return 0x82186818;
		  /* 82186818h */ case   14:  		/* addi R11, R11, 8 */
		/* 82186818h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82186818h case   14:*/		return 0x8218681C;
		  /* 8218681Ch */ case   15:  		/* and R7, R7, R3 */
		/* 8218681Ch case   15:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R3);
		/* 8218681Ch case   15:*/		return 0x82186820;
		  /* 82186820h */ case   16:  		/* srw R7, R7, R31 */
		/* 82186820h case   16:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 82186820h case   16:*/		return 0x82186824;
		  /* 82186824h */ case   17:  		/* lwzx R6, <#[R9 + R10]> */
		/* 82186824h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82186824h case   17:*/		return 0x82186828;
		  /* 82186828h */ case   18:  		/* slw R7, R7, R4 */
		/* 82186828h case   18:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R4);
		/* 82186828h case   18:*/		return 0x8218682C;
		  /* 8218682Ch */ case   19:  		/* or R7, R7, R6 */
		/* 8218682Ch case   19:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 8218682Ch case   19:*/		return 0x82186830;
		  /* 82186830h */ case   20:  		/* stwx R7, <#[R9 + R10]> */
		/* 82186830h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82186830h case   20:*/		return 0x82186834;
		  /* 82186834h */ case   21:  		/* bc 16, CR0_LT, -144 */
		/* 82186834h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821867A4;  }
		/* 82186834h case   21:*/		return 0x82186838;
	}
	return 0x82186838;
} // Block from 821867E0h-82186838h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82186838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186838);
		  /* 82186838h */ case    0:  		/* li R10, 0 */
		/* 82186838h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82186838h case    0:*/		return 0x8218683C;
		  /* 8218683Ch */ case    1:  		/* lwz R7, <#[R1 + 80]> */
		/* 8218683Ch case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8218683Ch case    1:*/		return 0x82186840;
		  /* 82186840h */ case    2:  		/* mr R9, R26 */
		/* 82186840h case    2:*/		regs.R9 = regs.R26;
		/* 82186840h case    2:*/		return 0x82186844;
		  /* 82186844h */ case    3:  		/* mr R8, R30 */
		/* 82186844h case    3:*/		regs.R8 = regs.R30;
		/* 82186844h case    3:*/		return 0x82186848;
		  /* 82186848h */ case    4:  		/* mr R6, R29 */
		/* 82186848h case    4:*/		regs.R6 = regs.R29;
		/* 82186848h case    4:*/		return 0x8218684C;
		  /* 8218684Ch */ case    5:  		/* mr R5, R28 */
		/* 8218684Ch case    5:*/		regs.R5 = regs.R28;
		/* 8218684Ch case    5:*/		return 0x82186850;
		  /* 82186850h */ case    6:  		/* mr R4, R27 */
		/* 82186850h case    6:*/		regs.R4 = regs.R27;
		/* 82186850h case    6:*/		return 0x82186854;
		  /* 82186854h */ case    7:  		/* addi R3, R1, 80 */
		/* 82186854h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82186854h case    7:*/		return 0x82186858;
		  /* 82186858h */ case    8:  		/* bl -2072 */
		/* 82186858h case    8:*/		regs.LR = 0x8218685C; return 0x82186040;
		/* 82186858h case    8:*/		return 0x8218685C;
		  /* 8218685Ch */ case    9:  		/* lwz R11, <#[R3]> */
		/* 8218685Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8218685Ch case    9:*/		return 0x82186860;
		  /* 82186860h */ case   10:  		/* rlwinm R11, R11, 0, 12, 15 */
		/* 82186860h case   10:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R11);
		/* 82186860h case   10:*/		return 0x82186864;
		  /* 82186864h */ case   11:  		/* addi R11, R11, 0 */
		/* 82186864h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82186864h case   11:*/		return 0x82186868;
		  /* 82186868h */ case   12:  		/* addic R10, R11, -1 */
		/* 82186868h case   12:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82186868h case   12:*/		return 0x8218686C;
		  /* 8218686Ch */ case   13:  		/* subfe R3, R10, R11 */
		/* 8218686Ch case   13:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 8218686Ch case   13:*/		return 0x82186870;
	}
	return 0x82186870;
} // Block from 82186838h-82186870h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82186870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186870);
		  /* 82186870h */ case    0:  		/* addi R1, R1, 144 */
		/* 82186870h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82186870h case    0:*/		return 0x82186874;
		  /* 82186874h */ case    1:  		/* b -1005012 */
		/* 82186874h case    1:*/		return 0x820912A0;
		/* 82186874h case    1:*/		return 0x82186878;
	}
	return 0x82186878;
} // Block from 82186870h-82186878h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186878);
		  /* 82186878h */ case    0:  		/* mfspr R12, LR */
		/* 82186878h case    0:*/		regs.R12 = regs.LR;
		/* 82186878h case    0:*/		return 0x8218687C;
		  /* 8218687Ch */ case    1:  		/* bl -1005112 */
		/* 8218687Ch case    1:*/		regs.LR = 0x82186880; return 0x82091244;
		/* 8218687Ch case    1:*/		return 0x82186880;
		  /* 82186880h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82186880h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82186880h case    2:*/		return 0x82186884;
		  /* 82186884h */ case    3:  		/* mr R11, R6 */
		/* 82186884h case    3:*/		regs.R11 = regs.R6;
		/* 82186884h case    3:*/		return 0x82186888;
		  /* 82186888h */ case    4:  		/* stw R6, <#[R1 + 220]> */
		/* 82186888h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000DC) );
		/* 82186888h case    4:*/		return 0x8218688C;
		  /* 8218688Ch */ case    5:  		/* mr R23, R10 */
		/* 8218688Ch case    5:*/		regs.R23 = regs.R10;
		/* 8218688Ch case    5:*/		return 0x82186890;
		  /* 82186890h */ case    6:  		/* mr R27, R5 */
		/* 82186890h case    6:*/		regs.R27 = regs.R5;
		/* 82186890h case    6:*/		return 0x82186894;
		  /* 82186894h */ case    7:  		/* mr R28, R9 */
		/* 82186894h case    7:*/		regs.R28 = regs.R9;
		/* 82186894h case    7:*/		return 0x82186898;
		  /* 82186898h */ case    8:  		/* mr R10, R9 */
		/* 82186898h case    8:*/		regs.R10 = regs.R9;
		/* 82186898h case    8:*/		return 0x8218689C;
		  /* 8218689Ch */ case    9:  		/* mr R6, R5 */
		/* 8218689Ch case    9:*/		regs.R6 = regs.R5;
		/* 8218689Ch case    9:*/		return 0x821868A0;
		  /* 821868A0h */ case   10:  		/* mr R31, R4 */
		/* 821868A0h case   10:*/		regs.R31 = regs.R4;
		/* 821868A0h case   10:*/		return 0x821868A4;
		  /* 821868A4h */ case   11:  		/* mr R24, R8 */
		/* 821868A4h case   11:*/		regs.R24 = regs.R8;
		/* 821868A4h case   11:*/		return 0x821868A8;
		  /* 821868A8h */ case   12:  		/* mr R9, R8 */
		/* 821868A8h case   12:*/		regs.R9 = regs.R8;
		/* 821868A8h case   12:*/		return 0x821868AC;
		  /* 821868ACh */ case   13:  		/* mr R5, R4 */
		/* 821868ACh case   13:*/		regs.R5 = regs.R4;
		/* 821868ACh case   13:*/		return 0x821868B0;
		  /* 821868B0h */ case   14:  		/* mr R26, R3 */
		/* 821868B0h case   14:*/		regs.R26 = regs.R3;
		/* 821868B0h case   14:*/		return 0x821868B4;
		  /* 821868B4h */ case   15:  		/* mr R30, R7 */
		/* 821868B4h case   15:*/		regs.R30 = regs.R7;
		/* 821868B4h case   15:*/		return 0x821868B8;
		  /* 821868B8h */ case   16:  		/* mr R8, R7 */
		/* 821868B8h case   16:*/		regs.R8 = regs.R7;
		/* 821868B8h case   16:*/		return 0x821868BC;
		  /* 821868BCh */ case   17:  		/* mr R4, R3 */
		/* 821868BCh case   17:*/		regs.R4 = regs.R3;
		/* 821868BCh case   17:*/		return 0x821868C0;
		  /* 821868C0h */ case   18:  		/* addi R3, R1, 80 */
		/* 821868C0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821868C0h case   18:*/		return 0x821868C4;
		  /* 821868C4h */ case   19:  		/* mr R7, R11 */
		/* 821868C4h case   19:*/		regs.R7 = regs.R11;
		/* 821868C4h case   19:*/		return 0x821868C8;
		  /* 821868C8h */ case   20:  		/* bl -2184 */
		/* 821868C8h case   20:*/		regs.LR = 0x821868CC; return 0x82186040;
		/* 821868C8h case   20:*/		return 0x821868CC;
		  /* 821868CCh */ case   21:  		/* lwz R11, <#[R1 + 80]> */
		/* 821868CCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821868CCh case   21:*/		return 0x821868D0;
		  /* 821868D0h */ case   22:  		/* li R25, 2 */
		/* 821868D0h case   22:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 821868D0h case   22:*/		return 0x821868D4;
		  /* 821868D4h */ case   23:  		/* rlwinm. R10, R11, 0, 12, 15 */
		/* 821868D4h case   23:*/		cpu::op::rlwinm<1,0,12,15>(regs,&regs.R10,regs.R11);
		/* 821868D4h case   23:*/		return 0x821868D8;
		  /* 821868D8h */ case   24:  		/* li R29, -1 */
		/* 821868D8h case   24:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821868D8h case   24:*/		return 0x821868DC;
		  /* 821868DCh */ case   25:  		/* bc 4, CR0_EQ, 256 */
		/* 821868DCh case   25:*/		if ( !regs.CR[0].eq ) { return 0x821869DC;  }
		/* 821868DCh case   25:*/		return 0x821868E0;
		  /* 821868E0h */ case   26:  		/* cmplwi CR6, R28, 0 */
		/* 821868E0h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821868E0h case   26:*/		return 0x821868E4;
		  /* 821868E4h */ case   27:  		/* bc 12, CR6_EQ, 16 */
		/* 821868E4h case   27:*/		if ( regs.CR[6].eq ) { return 0x821868F4;  }
		/* 821868E4h case   27:*/		return 0x821868E8;
		  /* 821868E8h */ case   28:  		/* li R4, 4800 */
		/* 821868E8h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821868E8h case   28:*/		return 0x821868EC;
		  /* 821868ECh */ case   29:  		/* mr R3, R26 */
		/* 821868ECh case   29:*/		regs.R3 = regs.R26;
		/* 821868ECh case   29:*/		return 0x821868F0;
		  /* 821868F0h */ case   30:  		/* bl -215688 */
		/* 821868F0h case   30:*/		regs.LR = 0x821868F4; return 0x82151E68;
		/* 821868F0h case   30:*/		return 0x821868F4;
	}
	return 0x821868F4;
} // Block from 82186878h-821868F4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821868F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821868F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821868F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821868F4);
		  /* 821868F4h */ case    0:  		/* addi R11, R1, 80 */
		/* 821868F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821868F4h case    0:*/		return 0x821868F8;
		  /* 821868F8h */ case    1:  		/* li R10, 0 */
		/* 821868F8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821868F8h case    1:*/		return 0x821868FC;
		  /* 821868FCh */ case    2:  		/* mr R6, R31 */
		/* 821868FCh case    2:*/		regs.R6 = regs.R31;
		/* 821868FCh case    2:*/		return 0x82186900;
		  /* 82186900h */ case    3:  		/* mr R31, R27 */
		/* 82186900h case    3:*/		regs.R31 = regs.R27;
		/* 82186900h case    3:*/		return 0x82186904;
		  /* 82186904h */ case    4:  		/* mr R27, R6 */
		/* 82186904h case    4:*/		regs.R27 = regs.R6;
		/* 82186904h case    4:*/		return 0x82186908;
		  /* 82186908h */ case    5:  		/* stw R10, <#[R11]> */
		/* 82186908h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82186908h case    5:*/		return 0x8218690C;
		  /* 8218690Ch */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 8218690Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8218690Ch case    6:*/		return 0x82186910;
		  /* 82186910h */ case    7:  		/* bc 12, CR6_EQ, 160 */
		/* 82186910h case    7:*/		if ( regs.CR[6].eq ) { return 0x821869B0;  }
		/* 82186910h case    7:*/		return 0x82186914;
		  /* 82186914h */ case    8:  		/* li R11, 4 */
		/* 82186914h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82186914h case    8:*/		return 0x82186918;
		  /* 82186918h */ case    9:  		/* mtspr CTR, R30 */
		/* 82186918h case    9:*/		regs.CTR = regs.R30;
		/* 82186918h case    9:*/		return 0x8218691C;
		  /* 8218691Ch */ case   10:  		/* addi R10, R11, 3 */
		/* 8218691Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8218691Ch case   10:*/		return 0x82186920;
		  /* 82186920h */ case   11:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 82186920h case   11:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 82186920h case   11:*/		return 0x82186924;
		  /* 82186924h */ case   12:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 82186924h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 82186924h case   12:*/		return 0x82186928;
		  /* 82186928h */ case   13:  		/* addi R8, R1, 220 */
		/* 82186928h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xDC);
		/* 82186928h case   13:*/		return 0x8218692C;
		  /* 8218692Ch */ case   14:  		/* slw R10, R25, R10 */
		/* 8218692Ch case   14:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R25,regs.R10);
		/* 8218692Ch case   14:*/		return 0x82186930;
		  /* 82186930h */ case   15:  		/* lwzx R7, <#[R9 + R8]> */
		/* 82186930h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82186930h case   15:*/		return 0x82186934;
		  /* 82186934h */ case   16:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 82186934h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 82186934h case   16:*/		return 0x82186938;
		  /* 82186938h */ case   17:  		/* addi R10, R10, -1 */
		/* 82186938h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82186938h case   17:*/		return 0x8218693C;
		  /* 8218693Ch */ case   18:  		/* addi R8, R11, -4 */
		/* 8218693Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFC);
		/* 8218693Ch case   18:*/		return 0x82186940;
		  /* 82186940h */ case   19:  		/* and R4, R10, R7 */
		/* 82186940h case   19:*/		cpu::op::and<0>(regs,&regs.R4,regs.R10,regs.R7);
		/* 82186940h case   19:*/		return 0x82186944;
		  /* 82186944h */ case   20:  		/* slw R3, R29, R5 */
		/* 82186944h case   20:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R29,regs.R5);
		/* 82186944h case   20:*/		return 0x82186948;
		  /* 82186948h */ case   21:  		/* rlwinm R10, R8, 29, 3, 29 */
		/* 82186948h case   21:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R8);
		/* 82186948h case   21:*/		return 0x8218694C;
		  /* 8218694Ch */ case   22:  		/* and R4, R4, R3 */
		/* 8218694Ch case   22:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R3);
		/* 8218694Ch case   22:*/		return 0x82186950;
		  /* 82186950h */ case   23:  		/* addi R7, R1, 80 */
		/* 82186950h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82186950h case   23:*/		return 0x82186954;
		  /* 82186954h */ case   24:  		/* rlwinm R3, R8, 0, 27, 31 */
		/* 82186954h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R8);
		/* 82186954h case   24:*/		return 0x82186958;
		  /* 82186958h */ case   25:  		/* srw R8, R4, R5 */
		/* 82186958h case   25:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R4,regs.R5);
		/* 82186958h case   25:*/		return 0x8218695C;
		  /* 8218695Ch */ case   26:  		/* lwzx R4, <#[R10 + R7]> */
		/* 8218695Ch case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8218695Ch case   26:*/		return 0x82186960;
		  /* 82186960h */ case   27:  		/* slw R8, R8, R3 */
		/* 82186960h case   27:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R3);
		/* 82186960h case   27:*/		return 0x82186964;
		  /* 82186964h */ case   28:  		/* or R8, R8, R4 */
		/* 82186964h case   28:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 82186964h case   28:*/		return 0x82186968;
		  /* 82186968h */ case   29:  		/* addi R4, R11, -1 */
		/* 82186968h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFF);
		/* 82186968h case   29:*/		return 0x8218696C;
		  /* 8218696Ch */ case   30:  		/* stwx R8, <#[R10 + R7]> */
		/* 8218696Ch case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8218696Ch case   30:*/		return 0x82186970;
	}
	return 0x82186970;
} // Block from 821868F4h-82186970h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82186970h
// Function '?FindGroupMapping@Compiler@D3DXShader@@AAA?AV?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$03@2@PAURegGroupInfo@2@0V32@III@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186970);
		  /* 82186970h */ case    0:  		/* addi R7, R1, 220 */
		/* 82186970h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xDC);
		/* 82186970h case    0:*/		return 0x82186974;
		  /* 82186974h */ case    1:  		/* rlwinm R8, R4, 0, 27, 31 */
		/* 82186974h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R4);
		/* 82186974h case    1:*/		return 0x82186978;
		  /* 82186978h */ case    2:  		/* slw R4, R29, R3 */
		/* 82186978h case    2:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R29,regs.R3);
		/* 82186978h case    2:*/		return 0x8218697C;
		  /* 8218697Ch */ case    3:  		/* slw R8, R25, R8 */
		/* 8218697Ch case    3:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R25,regs.R8);
		/* 8218697Ch case    3:*/		return 0x82186980;
		  /* 82186980h */ case    4:  		/* lwzx R7, <#[R10 + R7]> */
		/* 82186980h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82186980h case    4:*/		return 0x82186984;
		  /* 82186984h */ case    5:  		/* addi R8, R8, -1 */
		/* 82186984h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 82186984h case    5:*/		return 0x82186988;
		  /* 82186988h */ case    6:  		/* addi R10, R1, 80 */
		/* 82186988h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82186988h case    6:*/		return 0x8218698C;
		  /* 8218698Ch */ case    7:  		/* and R8, R8, R7 */
		/* 8218698Ch case    7:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 8218698Ch case    7:*/		return 0x82186990;
		  /* 82186990h */ case    8:  		/* addi R11, R11, 8 */
		/* 82186990h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82186990h case    8:*/		return 0x82186994;
		  /* 82186994h */ case    9:  		/* and R8, R8, R4 */
		/* 82186994h case    9:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 82186994h case    9:*/		return 0x82186998;
		  /* 82186998h */ case   10:  		/* srw R8, R8, R3 */
		/* 82186998h case   10:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R3);
		/* 82186998h case   10:*/		return 0x8218699C;
		  /* 8218699Ch */ case   11:  		/* lwzx R7, <#[R9 + R10]> */
		/* 8218699Ch case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8218699Ch case   11:*/		return 0x821869A0;
		  /* 821869A0h */ case   12:  		/* slw R8, R8, R5 */
		/* 821869A0h case   12:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 821869A0h case   12:*/		return 0x821869A4;
		  /* 821869A4h */ case   13:  		/* or R8, R8, R7 */
		/* 821869A4h case   13:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821869A4h case   13:*/		return 0x821869A8;
		  /* 821869A8h */ case   14:  		/* stwx R8, <#[R9 + R10]> */
		/* 821869A8h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821869A8h case   14:*/		return 0x821869AC;
		  /* 821869ACh */ case   15:  		/* bc 16, CR0_LT, -144 */
		/* 821869ACh case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218691C;  }
		/* 821869ACh case   15:*/		return 0x821869B0;
	}
	return 0x821869B0;
} // Block from 82186970h-821869B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821869B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821869B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821869B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821869B0);
		  /* 821869B0h */ case    0:  		/* lwz R7, <#[R1 + 80]> */
		/* 821869B0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 821869B0h case    0:*/		return 0x821869B4;
		  /* 821869B4h */ case    1:  		/* li R10, 0 */
		/* 821869B4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821869B4h case    1:*/		return 0x821869B8;
		  /* 821869B8h */ case    2:  		/* mr R9, R24 */
		/* 821869B8h case    2:*/		regs.R9 = regs.R24;
		/* 821869B8h case    2:*/		return 0x821869BC;
		  /* 821869BCh */ case    3:  		/* mr R8, R30 */
		/* 821869BCh case    3:*/		regs.R8 = regs.R30;
		/* 821869BCh case    3:*/		return 0x821869C0;
		  /* 821869C0h */ case    4:  		/* mr R5, R31 */
		/* 821869C0h case    4:*/		regs.R5 = regs.R31;
		/* 821869C0h case    4:*/		return 0x821869C4;
		  /* 821869C4h */ case    5:  		/* mr R4, R26 */
		/* 821869C4h case    5:*/		regs.R4 = regs.R26;
		/* 821869C4h case    5:*/		return 0x821869C8;
		  /* 821869C8h */ case    6:  		/* addi R3, R1, 80 */
		/* 821869C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821869C8h case    6:*/		return 0x821869CC;
		  /* 821869CCh */ case    7:  		/* stw R7, <#[R1 + 220]> */
		/* 821869CCh case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000DC) );
		/* 821869CCh case    7:*/		return 0x821869D0;
		  /* 821869D0h */ case    8:  		/* bl -2448 */
		/* 821869D0h case    8:*/		regs.LR = 0x821869D4; return 0x82186040;
		/* 821869D0h case    8:*/		return 0x821869D4;
		  /* 821869D4h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 821869D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821869D4h case    9:*/		return 0x821869D8;
		  /* 821869D8h */ case   10:  		/* stw R11, <#[R1 + 80]> */
		/* 821869D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821869D8h case   10:*/		return 0x821869DC;
	}
	return 0x821869DC;
} // Block from 821869B0h-821869DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821869DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821869DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821869DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821869DC);
		  /* 821869DCh */ case    0:  		/* lwz R10, <#[R31 + 192]> */
		/* 821869DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000C0) );
		/* 821869DCh case    0:*/		return 0x821869E0;
		  /* 821869E0h */ case    1:  		/* rlwinm R30, R11, 16, 28, 31 */
		/* 821869E0h case    1:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R30,regs.R11);
		/* 821869E0h case    1:*/		return 0x821869E4;
		  /* 821869E4h */ case    2:  		/* rlwinm R11, R10, 0, 29, 31 */
		/* 821869E4h case    2:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R10);
		/* 821869E4h case    2:*/		return 0x821869E8;
		  /* 821869E8h */ case    3:  		/* b 60 */
		/* 821869E8h case    3:*/		return 0x82186A24;
		/* 821869E8h case    3:*/		return 0x821869EC;
		  /* 821869ECh */ case    4:  		/* lwz R11, <#[R26 + 672]> */
		/* 821869ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000002A0) );
		/* 821869ECh case    4:*/		return 0x821869F0;
		  /* 821869F0h */ case    5:  		/* li R5, 0 */
		/* 821869F0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821869F0h case    5:*/		return 0x821869F4;
		  /* 821869F4h */ case    6:  		/* mr R3, R26 */
		/* 821869F4h case    6:*/		regs.R3 = regs.R26;
		/* 821869F4h case    6:*/		return 0x821869F8;
		  /* 821869F8h */ case    7:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 821869F8h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 821869F8h case    7:*/		return 0x821869FC;
		  /* 821869FCh */ case    8:  		/* bl -137668 */
		/* 821869FCh case    8:*/		regs.LR = 0x82186A00; return 0x82165038;
		/* 821869FCh case    8:*/		return 0x82186A00;
		  /* 82186A00h */ case    9:  		/* lwz R11, <#[R31 + 192]> */
		/* 82186A00h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 82186A00h case    9:*/		return 0x82186A04;
		  /* 82186A04h */ case   10:  		/* rlwinm R11, R11, 2, 27, 29 */
		/* 82186A04h case   10:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R11,regs.R11);
		/* 82186A04h case   10:*/		return 0x82186A08;
		  /* 82186A08h */ case   11:  		/* stwx R3, <#[R11 + R31]> */
		/* 82186A08h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82186A08h case   11:*/		return 0x82186A0C;
		  /* 82186A0Ch */ case   12:  		/* lwz R11, <#[R31 + 192]> */
		/* 82186A0Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 82186A0Ch case   12:*/		return 0x82186A10;
		  /* 82186A10h */ case   13:  		/* addi R10, R11, 1 */
		/* 82186A10h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82186A10h case   13:*/		return 0x82186A14;
		  /* 82186A14h */ case   14:  		/* rlwimi R10, R11, 0, 0, 28 */
		/* 82186A14h case   14:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R11);
		/* 82186A14h case   14:*/		return 0x82186A18;
		  /* 82186A18h */ case   15:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82186A18h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82186A18h case   15:*/		return 0x82186A1C;
		  /* 82186A1Ch */ case   16:  		/* stw R10, <#[R31 + 192]> */
		/* 82186A1Ch case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000C0) );
		/* 82186A1Ch case   16:*/		return 0x82186A20;
		  /* 82186A20h */ case   17:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82186A20h case   17:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82186A20h case   17:*/		return 0x82186A24;
	}
	return 0x82186A24;
} // Block from 821869DCh-82186A24h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82186A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186A24);
		  /* 82186A24h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 82186A24h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82186A24h case    0:*/		return 0x82186A28;
		  /* 82186A28h */ case    1:  		/* bc 12, CR6_LT, -60 */
		/* 82186A28h case    1:*/		if ( regs.CR[6].lt ) { return 0x821869EC;  }
		/* 82186A28h case    1:*/		return 0x82186A2C;
		  /* 82186A2Ch */ case    2:  		/* lwz R11, <#[R27 + 192]> */
		/* 82186A2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C0) );
		/* 82186A2Ch case    2:*/		return 0x82186A30;
		  /* 82186A30h */ case    3:  		/* li R28, 0 */
		/* 82186A30h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82186A30h case    3:*/		return 0x82186A34;
		  /* 82186A34h */ case    4:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 82186A34h case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82186A34h case    4:*/		return 0x82186A38;
		  /* 82186A38h */ case    5:  		/* bc 12, CR0_EQ, 120 */
		/* 82186A38h case    5:*/		if ( regs.CR[0].eq ) { return 0x82186AB0;  }
		/* 82186A38h case    5:*/		return 0x82186A3C;
		  /* 82186A3Ch */ case    6:  		/* li R30, 0 */
		/* 82186A3Ch case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82186A3Ch case    6:*/		return 0x82186A40;
		  /* 82186A40h */ case    7:  		/* li R11, 1 */
		/* 82186A40h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82186A40h case    7:*/		return 0x82186A44;
		  /* 82186A44h */ case    8:  		/* slw R11, R11, R28 */
		/* 82186A44h case    8:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 82186A44h case    8:*/		return 0x82186A48;
		  /* 82186A48h */ case    9:  		/* and. R11, R11, R24 */
		/* 82186A48h case    9:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R24);
		/* 82186A48h case    9:*/		return 0x82186A4C;
		  /* 82186A4Ch */ case   10:  		/* bc 4, CR0_EQ, 76 */
		/* 82186A4Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x82186A98;  }
		/* 82186A4Ch case   10:*/		return 0x82186A50;
		  /* 82186A50h */ case   11:  		/* addi R11, R30, 3 */
		/* 82186A50h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3);
		/* 82186A50h case   11:*/		return 0x82186A54;
		  /* 82186A54h */ case   12:  		/* addi R9, R1, 80 */
		/* 82186A54h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82186A54h case   12:*/		return 0x82186A58;
		  /* 82186A58h */ case   13:  		/* rlwinm R10, R30, 29, 3, 29 */
		/* 82186A58h case   13:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R30);
		/* 82186A58h case   13:*/		return 0x82186A5C;
		  /* 82186A5Ch */ case   14:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 82186A5Ch case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82186A5Ch case   14:*/		return 0x82186A60;
		  /* 82186A60h */ case   15:  		/* mr R8, R23 */
		/* 82186A60h case   15:*/		regs.R8 = regs.R23;
		/* 82186A60h case   15:*/		return 0x82186A64;
		  /* 82186A64h */ case   16:  		/* slw R11, R25, R11 */
		/* 82186A64h case   16:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 82186A64h case   16:*/		return 0x82186A68;
		  /* 82186A68h */ case   17:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82186A68h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82186A68h case   17:*/		return 0x82186A6C;
		  /* 82186A6Ch */ case   18:  		/* rlwinm R9, R30, 0, 27, 31 */
		/* 82186A6Ch case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R30);
		/* 82186A6Ch case   18:*/		return 0x82186A70;
		  /* 82186A70h */ case   19:  		/* addi R11, R11, -1 */
		/* 82186A70h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82186A70h case   19:*/		return 0x82186A74;
		  /* 82186A74h */ case   20:  		/* slw R7, R29, R9 */
		/* 82186A74h case   20:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R29,regs.R9);
		/* 82186A74h case   20:*/		return 0x82186A78;
		  /* 82186A78h */ case   21:  		/* and R11, R11, R10 */
		/* 82186A78h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82186A78h case   21:*/		return 0x82186A7C;
		  /* 82186A7Ch */ case   22:  		/* mr R6, R27 */
		/* 82186A7Ch case   22:*/		regs.R6 = regs.R27;
		/* 82186A7Ch case   22:*/		return 0x82186A80;
		  /* 82186A80h */ case   23:  		/* and R11, R11, R7 */
		/* 82186A80h case   23:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82186A80h case   23:*/		return 0x82186A84;
		  /* 82186A84h */ case   24:  		/* mr R7, R28 */
		/* 82186A84h case   24:*/		regs.R7 = regs.R28;
		/* 82186A84h case   24:*/		return 0x82186A88;
		  /* 82186A88h */ case   25:  		/* srw R5, R11, R9 */
		/* 82186A88h case   25:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R11,regs.R9);
		/* 82186A88h case   25:*/		return 0x82186A8C;
		  /* 82186A8Ch */ case   26:  		/* mr R4, R31 */
		/* 82186A8Ch case   26:*/		regs.R4 = regs.R31;
		/* 82186A8Ch case   26:*/		return 0x82186A90;
		  /* 82186A90h */ case   27:  		/* mr R3, R26 */
		/* 82186A90h case   27:*/		regs.R3 = regs.R26;
		/* 82186A90h case   27:*/		return 0x82186A94;
		  /* 82186A94h */ case   28:  		/* bl -10276 */
		/* 82186A94h case   28:*/		regs.LR = 0x82186A98; return 0x82184270;
		/* 82186A94h case   28:*/		return 0x82186A98;
	}
	return 0x82186A98;
} // Block from 82186A24h-82186A98h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82186A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186A98);
		  /* 82186A98h */ case    0:  		/* lwz R11, <#[R27 + 192]> */
		/* 82186A98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C0) );
		/* 82186A98h case    0:*/		return 0x82186A9C;
		  /* 82186A9Ch */ case    1:  		/* addi R28, R28, 1 */
		/* 82186A9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82186A9Ch case    1:*/		return 0x82186AA0;
		  /* 82186AA0h */ case    2:  		/* addi R30, R30, 4 */
		/* 82186AA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82186AA0h case    2:*/		return 0x82186AA4;
		  /* 82186AA4h */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82186AA4h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82186AA4h case    3:*/		return 0x82186AA8;
		  /* 82186AA8h */ case    4:  		/* cmplw CR6, R28, R11 */
		/* 82186AA8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82186AA8h case    4:*/		return 0x82186AAC;
		  /* 82186AACh */ case    5:  		/* bc 12, CR6_LT, -108 */
		/* 82186AACh case    5:*/		if ( regs.CR[6].lt ) { return 0x82186A40;  }
		/* 82186AACh case    5:*/		return 0x82186AB0;
	}
	return 0x82186AB0;
} // Block from 82186A98h-82186AB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186AB0);
		  /* 82186AB0h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 82186AB0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 82186AB0h case    0:*/		return 0x82186AB4;
		  /* 82186AB4h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 82186AB4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82186AC4;  }
		/* 82186AB4h case    1:*/		return 0x82186AB8;
		  /* 82186AB8h */ case    2:  		/* mr R4, R27 */
		/* 82186AB8h case    2:*/		regs.R4 = regs.R27;
		/* 82186AB8h case    2:*/		return 0x82186ABC;
		  /* 82186ABCh */ case    3:  		/* mr R3, R26 */
		/* 82186ABCh case    3:*/		regs.R3 = regs.R26;
		/* 82186ABCh case    3:*/		return 0x82186AC0;
		  /* 82186AC0h */ case    4:  		/* bl -9400 */
		/* 82186AC0h case    4:*/		regs.LR = 0x82186AC4; return 0x82184608;
		/* 82186AC0h case    4:*/		return 0x82186AC4;
	}
	return 0x82186AC4;
} // Block from 82186AB0h-82186AC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82186AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186AC4);
		  /* 82186AC4h */ case    0:  		/* mr R3, R31 */
		/* 82186AC4h case    0:*/		regs.R3 = regs.R31;
		/* 82186AC4h case    0:*/		return 0x82186AC8;
		  /* 82186AC8h */ case    1:  		/* addi R1, R1, 176 */
		/* 82186AC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82186AC8h case    1:*/		return 0x82186ACC;
		  /* 82186ACCh */ case    2:  		/* b -1005624 */
		/* 82186ACCh case    2:*/		return 0x82091294;
		/* 82186ACCh case    2:*/		return 0x82186AD0;
	}
	return 0x82186AD0;
} // Block from 82186AC4h-82186AD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186AD0);
		  /* 82186AD0h */ case    0:  		/* mfspr R12, LR */
		/* 82186AD0h case    0:*/		regs.R12 = regs.LR;
		/* 82186AD0h case    0:*/		return 0x82186AD4;
		  /* 82186AD4h */ case    1:  		/* bl -1005692 */
		/* 82186AD4h case    1:*/		regs.LR = 0x82186AD8; return 0x82091258;
		/* 82186AD4h case    1:*/		return 0x82186AD8;
		  /* 82186AD8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82186AD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82186AD8h case    2:*/		return 0x82186ADC;
		  /* 82186ADCh */ case    3:  		/* addi R7, R1, 80 */
		/* 82186ADCh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82186ADCh case    3:*/		return 0x82186AE0;
		  /* 82186AE0h */ case    4:  		/* lwz R11, <#[R4 + 192]> */
		/* 82186AE0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000C0) );
		/* 82186AE0h case    4:*/		return 0x82186AE4;
		  /* 82186AE4h */ case    5:  		/* li R28, 0 */
		/* 82186AE4h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82186AE4h case    5:*/		return 0x82186AE8;
		  /* 82186AE8h */ case    6:  		/* lwz R10, <#[R5 + 192]> */
		/* 82186AE8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x000000C0) );
		/* 82186AE8h case    6:*/		return 0x82186AEC;
		  /* 82186AECh */ case    7:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 82186AECh case    7:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 82186AECh case    7:*/		return 0x82186AF0;
		  /* 82186AF0h */ case    8:  		/* rlwinm R8, R10, 0, 29, 31 */
		/* 82186AF0h case    8:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R10);
		/* 82186AF0h case    8:*/		return 0x82186AF4;
		  /* 82186AF4h */ case    9:  		/* mr R29, R3 */
		/* 82186AF4h case    9:*/		regs.R29 = regs.R3;
		/* 82186AF4h case    9:*/		return 0x82186AF8;
		  /* 82186AF8h */ case   10:  		/* stw R28, <#[R7]> */
		/* 82186AF8h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 82186AF8h case   10:*/		return 0x82186AFC;
		  /* 82186AFCh */ case   11:  		/* add R9, R8, R9 */
		/* 82186AFCh case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82186AFCh case   11:*/		return 0x82186B00;
		  /* 82186B00h */ case   12:  		/* mr R31, R4 */
		/* 82186B00h case   12:*/		regs.R31 = regs.R4;
		/* 82186B00h case   12:*/		return 0x82186B04;
		  /* 82186B04h */ case   13:  		/* mr R30, R5 */
		/* 82186B04h case   13:*/		regs.R30 = regs.R5;
		/* 82186B04h case   13:*/		return 0x82186B08;
		  /* 82186B08h */ case   14:  		/* cmplwi CR6, R9, 4 */
		/* 82186B08h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82186B08h case   14:*/		return 0x82186B0C;
		  /* 82186B0Ch */ case   15:  		/* lwz R7, <#[R1 + 80]> */
		/* 82186B0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 82186B0Ch case   15:*/		return 0x82186B10;
		  /* 82186B10h */ case   16:  		/* bc 12, CR6_GT, 28 */
		/* 82186B10h case   16:*/		if ( regs.CR[6].gt ) { return 0x82186B2C;  }
		/* 82186B10h case   16:*/		return 0x82186B14;
		  /* 82186B14h */ case   17:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82186B14h case   17:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82186B14h case   17:*/		return 0x82186B18;
		  /* 82186B18h */ case   18:  		/* bc 4, CR0_EQ, 20 */
		/* 82186B18h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82186B2C;  }
		/* 82186B18h case   18:*/		return 0x82186B1C;
		  /* 82186B1Ch */ case   19:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 82186B1Ch case   19:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 82186B1Ch case   19:*/		return 0x82186B20;
		  /* 82186B20h */ case   20:  		/* bc 4, CR0_EQ, 12 */
		/* 82186B20h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82186B2C;  }
		/* 82186B20h case   20:*/		return 0x82186B24;
		  /* 82186B24h */ case   21:  		/* li R3, 1 */
		/* 82186B24h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82186B24h case   21:*/		return 0x82186B28;
		  /* 82186B28h */ case   22:  		/* b 112 */
		/* 82186B28h case   22:*/		return 0x82186B98;
		/* 82186B28h case   22:*/		return 0x82186B2C;
	}
	return 0x82186B2C;
} // Block from 82186AD0h-82186B2Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82186B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186B2C);
		  /* 82186B2Ch */ case    0:  		/* li R10, 0 */
		/* 82186B2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82186B2Ch case    0:*/		return 0x82186B30;
		  /* 82186B30h */ case    1:  		/* li R9, 0 */
		/* 82186B30h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82186B30h case    1:*/		return 0x82186B34;
		  /* 82186B34h */ case    2:  		/* li R8, 0 */
		/* 82186B34h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82186B34h case    2:*/		return 0x82186B38;
		  /* 82186B38h */ case    3:  		/* mr R6, R30 */
		/* 82186B38h case    3:*/		regs.R6 = regs.R30;
		/* 82186B38h case    3:*/		return 0x82186B3C;
		  /* 82186B3Ch */ case    4:  		/* mr R5, R31 */
		/* 82186B3Ch case    4:*/		regs.R5 = regs.R31;
		/* 82186B3Ch case    4:*/		return 0x82186B40;
		  /* 82186B40h */ case    5:  		/* mr R4, R29 */
		/* 82186B40h case    5:*/		regs.R4 = regs.R29;
		/* 82186B40h case    5:*/		return 0x82186B44;
		  /* 82186B44h */ case    6:  		/* addi R3, R1, 84 */
		/* 82186B44h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 82186B44h case    6:*/		return 0x82186B48;
		  /* 82186B48h */ case    7:  		/* bl -2824 */
		/* 82186B48h case    7:*/		regs.LR = 0x82186B4C; return 0x82186040;
		/* 82186B48h case    7:*/		return 0x82186B4C;
		  /* 82186B4Ch */ case    8:  		/* lwz R11, <#[R3]> */
		/* 82186B4Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82186B4Ch case    8:*/		return 0x82186B50;
		  /* 82186B50h */ case    9:  		/* rlwinm. R11, R11, 0, 12, 15 */
		/* 82186B50h case    9:*/		cpu::op::rlwinm<1,0,12,15>(regs,&regs.R11,regs.R11);
		/* 82186B50h case    9:*/		return 0x82186B54;
		  /* 82186B54h */ case   10:  		/* bc 4, CR0_EQ, -48 */
		/* 82186B54h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82186B24;  }
		/* 82186B54h case   10:*/		return 0x82186B58;
		  /* 82186B58h */ case   11:  		/* addi R11, R1, 80 */
		/* 82186B58h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82186B58h case   11:*/		return 0x82186B5C;
		  /* 82186B5Ch */ case   12:  		/* li R10, 0 */
		/* 82186B5Ch case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82186B5Ch case   12:*/		return 0x82186B60;
		  /* 82186B60h */ case   13:  		/* li R9, 0 */
		/* 82186B60h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82186B60h case   13:*/		return 0x82186B64;
		  /* 82186B64h */ case   14:  		/* li R8, 0 */
		/* 82186B64h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82186B64h case   14:*/		return 0x82186B68;
		  /* 82186B68h */ case   15:  		/* mr R6, R31 */
		/* 82186B68h case   15:*/		regs.R6 = regs.R31;
		/* 82186B68h case   15:*/		return 0x82186B6C;
		  /* 82186B6Ch */ case   16:  		/* stw R28, <#[R11]> */
		/* 82186B6Ch case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82186B6Ch case   16:*/		return 0x82186B70;
		  /* 82186B70h */ case   17:  		/* mr R5, R30 */
		/* 82186B70h case   17:*/		regs.R5 = regs.R30;
		/* 82186B70h case   17:*/		return 0x82186B74;
		  /* 82186B74h */ case   18:  		/* mr R4, R29 */
		/* 82186B74h case   18:*/		regs.R4 = regs.R29;
		/* 82186B74h case   18:*/		return 0x82186B78;
		  /* 82186B78h */ case   19:  		/* addi R3, R1, 88 */
		/* 82186B78h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 82186B78h case   19:*/		return 0x82186B7C;
		  /* 82186B7Ch */ case   20:  		/* lwz R7, <#[R1 + 80]> */
		/* 82186B7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 82186B7Ch case   20:*/		return 0x82186B80;
		  /* 82186B80h */ case   21:  		/* bl -2880 */
		/* 82186B80h case   21:*/		regs.LR = 0x82186B84; return 0x82186040;
		/* 82186B80h case   21:*/		return 0x82186B84;
		  /* 82186B84h */ case   22:  		/* lwz R11, <#[R3]> */
		/* 82186B84h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82186B84h case   22:*/		return 0x82186B88;
		  /* 82186B88h */ case   23:  		/* rlwinm R11, R11, 0, 12, 15 */
		/* 82186B88h case   23:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R11);
		/* 82186B88h case   23:*/		return 0x82186B8C;
		  /* 82186B8Ch */ case   24:  		/* addi R11, R11, 0 */
		/* 82186B8Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82186B8Ch case   24:*/		return 0x82186B90;
		  /* 82186B90h */ case   25:  		/* addic R10, R11, -1 */
		/* 82186B90h case   25:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82186B90h case   25:*/		return 0x82186B94;
		  /* 82186B94h */ case   26:  		/* subfe R3, R10, R11 */
		/* 82186B94h case   26:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82186B94h case   26:*/		return 0x82186B98;
	}
	return 0x82186B98;
} // Block from 82186B2Ch-82186B98h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82186B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186B98);
		  /* 82186B98h */ case    0:  		/* addi R1, R1, 144 */
		/* 82186B98h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82186B98h case    0:*/		return 0x82186B9C;
		  /* 82186B9Ch */ case    1:  		/* b -1005812 */
		/* 82186B9Ch case    1:*/		return 0x820912A8;
		/* 82186B9Ch case    1:*/		return 0x82186BA0;
	}
	return 0x82186BA0;
} // Block from 82186B98h-82186BA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186BA0);
		  /* 82186BA0h */ case    0:  		/* mfspr R12, LR */
		/* 82186BA0h case    0:*/		regs.R12 = regs.LR;
		/* 82186BA0h case    0:*/		return 0x82186BA4;
		  /* 82186BA4h */ case    1:  		/* bl -1005956 */
		/* 82186BA4h case    1:*/		regs.LR = 0x82186BA8; return 0x82091220;
		/* 82186BA4h case    1:*/		return 0x82186BA8;
		  /* 82186BA8h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 82186BA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 82186BA8h case    2:*/		return 0x82186BAC;
		  /* 82186BACh */ case    3:  		/* li R17, 1 */
		/* 82186BACh case    3:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82186BACh case    3:*/		return 0x82186BB0;
		  /* 82186BB0h */ case    4:  		/* stw R5, <#[R1 + 388]> */
		/* 82186BB0h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000184) );
		/* 82186BB0h case    4:*/		return 0x82186BB4;
		  /* 82186BB4h */ case    5:  		/* li R11, 0 */
		/* 82186BB4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82186BB4h case    5:*/		return 0x82186BB8;
		  /* 82186BB8h */ case    6:  		/* stw R6, <#[R1 + 396]> */
		/* 82186BB8h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000018C) );
		/* 82186BB8h case    6:*/		return 0x82186BBC;
		  /* 82186BBCh */ case    7:  		/* mr R30, R3 */
		/* 82186BBCh case    7:*/		regs.R30 = regs.R3;
		/* 82186BBCh case    7:*/		return 0x82186BC0;
		  /* 82186BC0h */ case    8:  		/* stw R17, <#[R1 + 120]> */
		/* 82186BC0h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000078) );
		/* 82186BC0h case    8:*/		return 0x82186BC4;
		  /* 82186BC4h */ case    9:  		/* cmplwi CR6, R6, 1 */
		/* 82186BC4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 82186BC4h case    9:*/		return 0x82186BC8;
		  /* 82186BC8h */ case   10:  		/* stb R11, <#[R1 + 81]> */
		/* 82186BC8h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000051) );
		/* 82186BC8h case   10:*/		return 0x82186BCC;
		  /* 82186BCCh */ case   11:  		/* bc 12, CR6_LT, 16712 */
		/* 82186BCCh case   11:*/		if ( regs.CR[6].lt ) { return 0x8218AD14;  }
		/* 82186BCCh case   11:*/		return 0x82186BD0;
		  /* 82186BD0h */ case   12:  		/* rlwinm R14, R4, 0, 24, 31 */
		/* 82186BD0h case   12:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R14,regs.R4);
		/* 82186BD0h case   12:*/		return 0x82186BD4;
		  /* 82186BD4h */ case   13:  		/* stw R14, <#[R1 + 116]> */
		/* 82186BD4h case   13:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000074) );
		/* 82186BD4h case   13:*/		return 0x82186BD8;
		  /* 82186BD8h */ case   14:  		/* b 12 */
		/* 82186BD8h case   14:*/		return 0x82186BE4;
		/* 82186BD8h case   14:*/		return 0x82186BDC;
		  /* 82186BDCh */ case   15:  		/* lwz R14, <#[R1 + 116]> */
		/* 82186BDCh case   15:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000074) );
		/* 82186BDCh case   15:*/		return 0x82186BE0;
		  /* 82186BE0h */ case   16:  		/* li R17, 1 */
		/* 82186BE0h case   16:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82186BE0h case   16:*/		return 0x82186BE4;
	}
	return 0x82186BE4;
} // Block from 82186BA0h-82186BE4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82186BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186BE4);
		  /* 82186BE4h */ case    0:  		/* li R21, 0 */
		/* 82186BE4h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82186BE4h case    0:*/		return 0x82186BE8;
		  /* 82186BE8h */ case    1:  		/* cmplwi CR6, R14, 0 */
		/* 82186BE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 82186BE8h case    1:*/		return 0x82186BEC;
		  /* 82186BECh */ case    2:  		/* bc 4, CR6_EQ, 796 */
		/* 82186BECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82186F08;  }
		/* 82186BECh case    2:*/		return 0x82186BF0;
		  /* 82186BF0h */ case    3:  		/* lwz R11, <#[R30 + 44]> */
		/* 82186BF0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 82186BF0h case    3:*/		return 0x82186BF4;
		  /* 82186BF4h */ case    4:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 82186BF4h case    4:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 82186BF4h case    4:*/		return 0x82186BF8;
		  /* 82186BF8h */ case    5:  		/* bc 12, CR0_EQ, 388 */
		/* 82186BF8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82186D7C;  }
		/* 82186BF8h case    5:*/		return 0x82186BFC;
		  /* 82186BFCh */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 82186BFCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82186BFCh case    6:*/		return 0x82186C00;
		  /* 82186C00h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186C00h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186C00h case    7:*/		return 0x82186C04;
		  /* 82186C04h */ case    8:  		/* bc 4, CR0_EQ, 376 */
		/* 82186C04h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82186D7C;  }
		/* 82186C04h case    8:*/		return 0x82186C08;
		  /* 82186C08h */ case    9:  		/* mr R28, R11 */
		/* 82186C08h case    9:*/		regs.R28 = regs.R11;
		/* 82186C08h case    9:*/		return 0x82186C0C;
		  /* 82186C0Ch */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 82186C0Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82186C0Ch case   10:*/		return 0x82186C10;
		  /* 82186C10h */ case   11:  		/* bc 12, CR0_EQ, 364 */
		/* 82186C10h case   11:*/		if ( regs.CR[0].eq ) { return 0x82186D7C;  }
		/* 82186C10h case   11:*/		return 0x82186C14;
		  /* 82186C14h */ case   12:  		/* lwz R11, <#[R28 + 28]> */
		/* 82186C14h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 82186C14h case   12:*/		return 0x82186C18;
		  /* 82186C18h */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186C18h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186C18h case   13:*/		return 0x82186C1C;
		  /* 82186C1Ch */ case   14:  		/* bc 4, CR0_EQ, 324 */
		/* 82186C1Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x82186D60;  }
		/* 82186C1Ch case   14:*/		return 0x82186C20;
		  /* 82186C20h */ case   15:  		/* mr R29, R11 */
		/* 82186C20h case   15:*/		regs.R29 = regs.R11;
		/* 82186C20h case   15:*/		return 0x82186C24;
		  /* 82186C24h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 82186C24h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82186C24h case   16:*/		return 0x82186C28;
		  /* 82186C28h */ case   17:  		/* bc 12, CR0_EQ, 312 */
		/* 82186C28h case   17:*/		if ( regs.CR[0].eq ) { return 0x82186D60;  }
		/* 82186C28h case   17:*/		return 0x82186C2C;
		  /* 82186C2Ch */ case   18:  		/* lwz R11, <#[R29 + 8]> */
		/* 82186C2Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82186C2Ch case   18:*/		return 0x82186C30;
		  /* 82186C30h */ case   19:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 82186C30h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 82186C30h case   19:*/		return 0x82186C34;
		  /* 82186C34h */ case   20:  		/* cmplwi CR6, R10, 13312 */
		/* 82186C34h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003400);
		/* 82186C34h case   20:*/		return 0x82186C38;
		  /* 82186C38h */ case   21:  		/* bc 4, CR6_EQ, 268 */
		/* 82186C38h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82186D44;  }
		/* 82186C38h case   21:*/		return 0x82186C3C;
		  /* 82186C3Ch */ case   22:  		/* rlwinm. R5, R11, 31, 28, 31 */
		/* 82186C3Ch case   22:*/		cpu::op::rlwinm<1,31,28,31>(regs,&regs.R5,regs.R11);
		/* 82186C3Ch case   22:*/		return 0x82186C40;
		  /* 82186C40h */ case   23:  		/* bc 12, CR0_EQ, 260 */
		/* 82186C40h case   23:*/		if ( regs.CR[0].eq ) { return 0x82186D44;  }
		/* 82186C40h case   23:*/		return 0x82186C44;
		  /* 82186C44h */ case   24:  		/* lwz R10, <#[R29 + 4]> */
		/* 82186C44h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 82186C44h case   24:*/		return 0x82186C48;
		  /* 82186C48h */ case   25:  		/* cmpwi CR6, R10, 0 */
		/* 82186C48h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82186C48h case   25:*/		return 0x82186C4C;
		  /* 82186C4Ch */ case   26:  		/* bc 4, CR6_EQ, 20 */
		/* 82186C4Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x82186C60;  }
		/* 82186C4Ch case   26:*/		return 0x82186C50;
		  /* 82186C50h */ case   27:  		/* rlwinm R11, R11, 0, 31, 26 */
		/* 82186C50h case   27:*/		cpu::op::rlwinm<0,0,31,26>(regs,&regs.R11,regs.R11);
		/* 82186C50h case   27:*/		return 0x82186C54;
		  /* 82186C54h */ case   28:  		/* rlwinm R11, R11, 0, 18, 14 */
		/* 82186C54h case   28:*/		cpu::op::rlwinm<0,0,18,14>(regs,&regs.R11,regs.R11);
		/* 82186C54h case   28:*/		return 0x82186C58;
		  /* 82186C58h */ case   29:  		/* stw R11, <#[R29 + 8]> */
		/* 82186C58h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82186C58h case   29:*/		return 0x82186C5C;
		  /* 82186C5Ch */ case   30:  		/* b 232 */
		/* 82186C5Ch case   30:*/		return 0x82186D44;
		/* 82186C5Ch case   30:*/		return 0x82186C60;
	}
	return 0x82186C60;
} // Block from 82186BE4h-82186C60h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82186C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186C60);
		  /* 82186C60h */ case    0:  		/* addi R11, R5, -1 */
		/* 82186C60h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xFFFFFFFF);
		/* 82186C60h case    0:*/		return 0x82186C64;
		  /* 82186C64h */ case    1:  		/* lwz R6, <#[R29 + 44]> */
		/* 82186C64h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x0000002C) );
		/* 82186C64h case    1:*/		return 0x82186C68;
		  /* 82186C68h */ case    2:  		/* li R10, 3 */
		/* 82186C68h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82186C68h case    2:*/		return 0x82186C6C;
		  /* 82186C6Ch */ case    3:  		/* andc R11, R5, R11 */
		/* 82186C6Ch case    3:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 82186C6Ch case    3:*/		return 0x82186C70;
		  /* 82186C70h */ case    4:  		/* mr R7, R17 */
		/* 82186C70h case    4:*/		regs.R7 = regs.R17;
		/* 82186C70h case    4:*/		return 0x82186C74;
		  /* 82186C74h */ case    5:  		/* cntlzw R8, R11 */
		/* 82186C74h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R11);
		/* 82186C74h case    5:*/		return 0x82186C78;
		  /* 82186C78h */ case    6:  		/* lwz R9, <#[R6]> */
		/* 82186C78h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82186C78h case    6:*/		return 0x82186C7C;
		  /* 82186C7Ch */ case    7:  		/* li R11, 2 */
		/* 82186C7Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82186C7Ch case    7:*/		return 0x82186C80;
		  /* 82186C80h */ case    8:  		/* subfic R4, R8, 31 */
		/* 82186C80h case    8:*/		cpu::op::subfic<0>(regs,&regs.R4,regs.R8,0x1F);
		/* 82186C80h case    8:*/		return 0x82186C84;
		  /* 82186C84h */ case    9:  		/* mtspr CTR, R10 */
		/* 82186C84h case    9:*/		regs.CTR = regs.R10;
		/* 82186C84h case    9:*/		return 0x82186C88;
		  /* 82186C88h */ case   10:  		/* rlwinm R8, R9, 27, 24, 31 */
		/* 82186C88h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R9);
		/* 82186C88h case   10:*/		return 0x82186C8C;
		  /* 82186C8Ch */ case   11:  		/* rlwinm R10, R4, 1, 0, 30 */
		/* 82186C8Ch case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R4);
		/* 82186C8Ch case   11:*/		return 0x82186C90;
		  /* 82186C90h */ case   12:  		/* srw R10, R8, R10 */
		/* 82186C90h case   12:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82186C90h case   12:*/		return 0x82186C94;
		  /* 82186C94h */ case   13:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 82186C94h case   13:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 82186C94h case   13:*/		return 0x82186C98;
		  /* 82186C98h */ case   14:  		/* ori R10, R10, 228 */
		/* 82186C98h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xE4);
		/* 82186C98h case   14:*/		return 0x82186C9C;
		  /* 82186C9Ch */ case   15:  		/* slw R4, R17, R7 */
		/* 82186C9Ch case   15:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R17,regs.R7);
		/* 82186C9Ch case   15:*/		return 0x82186CA0;
		  /* 82186CA0h */ case   16:  		/* and. R4, R4, R5 */
		/* 82186CA0h case   16:*/		cpu::op::and<1>(regs,&regs.R4,regs.R4,regs.R5);
		/* 82186CA0h case   16:*/		return 0x82186CA4;
		  /* 82186CA4h */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 82186CA4h case   17:*/		if ( regs.CR[0].eq ) { return 0x82186CB0;  }
		/* 82186CA4h case   17:*/		return 0x82186CA8;
		  /* 82186CA8h */ case   18:  		/* srw R4, R8, R11 */
		/* 82186CA8h case   18:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R8,regs.R11);
		/* 82186CA8h case   18:*/		return 0x82186CAC;
		  /* 82186CACh */ case   19:  		/* b 12 */
		/* 82186CACh case   19:*/		return 0x82186CB8;
		/* 82186CACh case   19:*/		return 0x82186CB0;
	}
	return 0x82186CB0;
} // Block from 82186C60h-82186CB0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82186CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186CB0);
		  /* 82186CB0h */ case    0:  		/* addi R4, R11, -2 */
		/* 82186CB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFE);
		/* 82186CB0h case    0:*/		return 0x82186CB4;
		  /* 82186CB4h */ case    1:  		/* srw R4, R10, R4 */
		/* 82186CB4h case    1:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R10,regs.R4);
		/* 82186CB4h case    1:*/		return 0x82186CB8;
	}
	return 0x82186CB8;
} // Block from 82186CB0h-82186CB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186CB8);
		  /* 82186CB8h */ case    0:  		/* li R3, 3 */
		/* 82186CB8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82186CB8h case    0:*/		return 0x82186CBC;
		  /* 82186CBCh */ case    1:  		/* rlwinm R4, R4, 0, 30, 31 */
		/* 82186CBCh case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R4);
		/* 82186CBCh case    1:*/		return 0x82186CC0;
		  /* 82186CC0h */ case    2:  		/* slw R3, R3, R11 */
		/* 82186CC0h case    2:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R3,regs.R11);
		/* 82186CC0h case    2:*/		return 0x82186CC4;
		  /* 82186CC4h */ case    3:  		/* slw R4, R4, R11 */
		/* 82186CC4h case    3:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R4,regs.R11);
		/* 82186CC4h case    3:*/		return 0x82186CC8;
		  /* 82186CC8h */ case    4:  		/* andc R10, R10, R3 */
		/* 82186CC8h case    4:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R3);
		/* 82186CC8h case    4:*/		return 0x82186CCC;
		  /* 82186CCCh */ case    5:  		/* addi R7, R7, 1 */
		/* 82186CCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82186CCCh case    5:*/		return 0x82186CD0;
		  /* 82186CD0h */ case    6:  		/* or R10, R10, R4 */
		/* 82186CD0h case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82186CD0h case    6:*/		return 0x82186CD4;
		  /* 82186CD4h */ case    7:  		/* addi R11, R11, 2 */
		/* 82186CD4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82186CD4h case    7:*/		return 0x82186CD8;
		  /* 82186CD8h */ case    8:  		/* bc 16, CR0_LT, -60 */
		/* 82186CD8h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82186C9C;  }
		/* 82186CD8h case    8:*/		return 0x82186CDC;
		  /* 82186CDCh */ case    9:  		/* lwz R31, <#[R6 + 12]> */
		/* 82186CDCh case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + 0x0000000C) );
		/* 82186CDCh case    9:*/		return 0x82186CE0;
		  /* 82186CE0h */ case   10:  		/* cmplw CR6, R8, R10 */
		/* 82186CE0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 82186CE0h case   10:*/		return 0x82186CE4;
		  /* 82186CE4h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 82186CE4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82186D20;  }
		/* 82186CE4h case   11:*/		return 0x82186CE8;
		  /* 82186CE8h */ case   12:  		/* rlwimi R9, R10, 5, 19, 26 */
		/* 82186CE8h case   12:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R9,regs.R10);
		/* 82186CE8h case   12:*/		return 0x82186CEC;
		  /* 82186CECh */ case   13:  		/* stw R9, <#[R6]> */
		/* 82186CECh case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82186CECh case   13:*/		return 0x82186CF0;
		  /* 82186CF0h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 82186CF0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82186CF0h case   14:*/		return 0x82186CF4;
		  /* 82186CF4h */ case   15:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82186CF4h case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82186CF4h case   15:*/		return 0x82186CF8;
		  /* 82186CF8h */ case   16:  		/* cmplwi CR6, R11, 1 */
		/* 82186CF8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82186CF8h case   16:*/		return 0x82186CFC;
		  /* 82186CFCh */ case   17:  		/* bc 12, CR6_LT, 16 */
		/* 82186CFCh case   17:*/		if ( regs.CR[6].lt ) { return 0x82186D0C;  }
		/* 82186CFCh case   17:*/		return 0x82186D00;
		  /* 82186D00h */ case   18:  		/* cmplwi CR6, R11, 102 */
		/* 82186D00h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 82186D00h case   18:*/		return 0x82186D04;
		  /* 82186D04h */ case   19:  		/* mr R11, R17 */
		/* 82186D04h case   19:*/		regs.R11 = regs.R17;
		/* 82186D04h case   19:*/		return 0x82186D08;
		  /* 82186D08h */ case   20:  		/* bc 4, CR6_GT, 8 */
		/* 82186D08h case   20:*/		if ( !regs.CR[6].gt ) { return 0x82186D10;  }
		/* 82186D08h case   20:*/		return 0x82186D0C;
	}
	return 0x82186D0C;
} // Block from 82186CB8h-82186D0Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82186D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D0C);
		  /* 82186D0Ch */ case    0:  		/* mr R11, R21 */
		/* 82186D0Ch case    0:*/		regs.R11 = regs.R21;
		/* 82186D0Ch case    0:*/		return 0x82186D10;
	}
	return 0x82186D10;
} // Block from 82186D0Ch-82186D10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82186D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D10);
		  /* 82186D10h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82186D10h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82186D10h case    0:*/		return 0x82186D14;
		  /* 82186D14h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82186D14h case    1:*/		if ( regs.CR[0].eq ) { return 0x82186D20;  }
		/* 82186D14h case    1:*/		return 0x82186D18;
		  /* 82186D18h */ case    2:  		/* mr R3, R31 */
		/* 82186D18h case    2:*/		regs.R3 = regs.R31;
		/* 82186D18h case    2:*/		return 0x82186D1C;
		  /* 82186D1Ch */ case    3:  		/* bl -59812 */
		/* 82186D1Ch case    3:*/		regs.LR = 0x82186D20; return 0x82178378;
		/* 82186D1Ch case    3:*/		return 0x82186D20;
	}
	return 0x82186D20;
} // Block from 82186D10h-82186D20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82186D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D20);
		  /* 82186D20h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82186D20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82186D20h case    0:*/		return 0x82186D24;
		  /* 82186D24h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82186D24h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82186D24h case    1:*/		return 0x82186D28;
		  /* 82186D28h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82186D28h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82186D38;  }
		/* 82186D28h case    2:*/		return 0x82186D2C;
		  /* 82186D2Ch */ case    3:  		/* mr R4, R31 */
		/* 82186D2Ch case    3:*/		regs.R4 = regs.R31;
		/* 82186D2Ch case    3:*/		return 0x82186D30;
		  /* 82186D30h */ case    4:  		/* mr R3, R30 */
		/* 82186D30h case    4:*/		regs.R3 = regs.R30;
		/* 82186D30h case    4:*/		return 0x82186D34;
		  /* 82186D34h */ case    5:  		/* bl 195860 */
		/* 82186D34h case    5:*/		regs.LR = 0x82186D38; return 0x821B6A48;
		/* 82186D34h case    5:*/		return 0x82186D38;
	}
	return 0x82186D38;
} // Block from 82186D20h-82186D38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D38);
		  /* 82186D38h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 82186D38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82186D38h case    0:*/		return 0x82186D3C;
		  /* 82186D3Ch */ case    1:  		/* oris R11, R11, 16 */
		/* 82186D3Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82186D3Ch case    1:*/		return 0x82186D40;
		  /* 82186D40h */ case    2:  		/* stw R11, <#[R31 + 16]> */
		/* 82186D40h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82186D40h case    2:*/		return 0x82186D44;
	}
	return 0x82186D44;
} // Block from 82186D38h-82186D44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D44);
		  /* 82186D44h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82186D44h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82186D44h case    0:*/		return 0x82186D48;
		  /* 82186D48h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82186D48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82186D48h case    1:*/		return 0x82186D4C;
		  /* 82186D4Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186D4Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186D4Ch case    2:*/		return 0x82186D50;
		  /* 82186D50h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82186D50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82186D60;  }
		/* 82186D50h case    3:*/		return 0x82186D54;
		  /* 82186D54h */ case    4:  		/* mr R29, R11 */
		/* 82186D54h case    4:*/		regs.R29 = regs.R11;
		/* 82186D54h case    4:*/		return 0x82186D58;
		  /* 82186D58h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82186D58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82186D58h case    5:*/		return 0x82186D5C;
		  /* 82186D5Ch */ case    6:  		/* bc 4, CR6_EQ, -304 */
		/* 82186D5Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82186C2C;  }
		/* 82186D5Ch case    6:*/		return 0x82186D60;
	}
	return 0x82186D60;
} // Block from 82186D44h-82186D60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82186D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D60);
		  /* 82186D60h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82186D60h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82186D60h case    0:*/		return 0x82186D64;
		  /* 82186D64h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82186D64h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82186D64h case    1:*/		return 0x82186D68;
		  /* 82186D68h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186D68h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186D68h case    2:*/		return 0x82186D6C;
		  /* 82186D6Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82186D6Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82186D7C;  }
		/* 82186D6Ch case    3:*/		return 0x82186D70;
		  /* 82186D70h */ case    4:  		/* mr R28, R11 */
		/* 82186D70h case    4:*/		regs.R28 = regs.R11;
		/* 82186D70h case    4:*/		return 0x82186D74;
		  /* 82186D74h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82186D74h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82186D74h case    5:*/		return 0x82186D78;
		  /* 82186D78h */ case    6:  		/* bc 4, CR6_EQ, -356 */
		/* 82186D78h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82186C14;  }
		/* 82186D78h case    6:*/		return 0x82186D7C;
	}
	return 0x82186D7C;
} // Block from 82186D60h-82186D7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82186D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D7C);
		  /* 82186D7Ch */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 82186D7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 82186D7Ch case    0:*/		return 0x82186D80;
		  /* 82186D80h */ case    1:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 82186D80h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 82186D80h case    1:*/		return 0x82186D84;
		  /* 82186D84h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82186D84h case    2:*/		if ( regs.CR[0].eq ) { return 0x82186D94;  }
		/* 82186D84h case    2:*/		return 0x82186D88;
		  /* 82186D88h */ case    3:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82186D88h case    3:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82186D88h case    3:*/		return 0x82186D8C;
		  /* 82186D8Ch */ case    4:  		/* mr R11, R17 */
		/* 82186D8Ch case    4:*/		regs.R11 = regs.R17;
		/* 82186D8Ch case    4:*/		return 0x82186D90;
		  /* 82186D90h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 82186D90h case    5:*/		if ( regs.CR[0].eq ) { return 0x82186D98;  }
		/* 82186D90h case    5:*/		return 0x82186D94;
	}
	return 0x82186D94;
} // Block from 82186D7Ch-82186D94h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D94);
		  /* 82186D94h */ case    0:  		/* mr R11, R21 */
		/* 82186D94h case    0:*/		regs.R11 = regs.R21;
		/* 82186D94h case    0:*/		return 0x82186D98;
	}
	return 0x82186D98;
} // Block from 82186D94h-82186D98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82186D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186D98);
		  /* 82186D98h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82186D98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82186D98h case    0:*/		return 0x82186D9C;
		  /* 82186D9Ch */ case    1:  		/* bc 12, CR0_EQ, 364 */
		/* 82186D9Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82186F08;  }
		/* 82186D9Ch case    1:*/		return 0x82186DA0;
		  /* 82186DA0h */ case    2:  		/* mr R3, R30 */
		/* 82186DA0h case    2:*/		regs.R3 = regs.R30;
		/* 82186DA0h case    2:*/		return 0x82186DA4;
		  /* 82186DA4h */ case    3:  		/* bl -91628 */
		/* 82186DA4h case    3:*/		regs.LR = 0x82186DA8; return 0x821707B8;
		/* 82186DA4h case    3:*/		return 0x82186DA8;
		  /* 82186DA8h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 82186DA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82186DA8h case    4:*/		return 0x82186DAC;
		  /* 82186DACh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186DACh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186DACh case    5:*/		return 0x82186DB0;
		  /* 82186DB0h */ case    6:  		/* bc 4, CR0_EQ, 344 */
		/* 82186DB0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82186F08;  }
		/* 82186DB0h case    6:*/		return 0x82186DB4;
		  /* 82186DB4h */ case    7:  		/* mr R27, R11 */
		/* 82186DB4h case    7:*/		regs.R27 = regs.R11;
		/* 82186DB4h case    7:*/		return 0x82186DB8;
		  /* 82186DB8h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 82186DB8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82186DB8h case    8:*/		return 0x82186DBC;
		  /* 82186DBCh */ case    9:  		/* bc 12, CR0_EQ, 332 */
		/* 82186DBCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82186F08;  }
		/* 82186DBCh case    9:*/		return 0x82186DC0;
		  /* 82186DC0h */ case   10:  		/* lwz R11, <#[R27 + 20]> */
		/* 82186DC0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82186DC0h case   10:*/		return 0x82186DC4;
		  /* 82186DC4h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82186DC4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82186DC4h case   11:*/		return 0x82186DC8;
		  /* 82186DC8h */ case   12:  		/* bc 12, CR0_EQ, 40 */
		/* 82186DC8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82186DF0;  }
		/* 82186DC8h case   12:*/		return 0x82186DCC;
		  /* 82186DCCh */ case   13:  		/* lwz R11, <#[R27 + 28]> */
		/* 82186DCCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 82186DCCh case   13:*/		return 0x82186DD0;
		  /* 82186DD0h */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82186DD0h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82186DD0h case   14:*/		return 0x82186DD4;
		  /* 82186DD4h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 82186DD4h case   15:*/		if ( regs.CR[0].eq ) { return 0x82186DE4;  }
		/* 82186DD4h case   15:*/		return 0x82186DD8;
		  /* 82186DD8h */ case   16:  		/* lwz R10, <#[R27 + 36]> */
		/* 82186DD8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000024) );
		/* 82186DD8h case   16:*/		return 0x82186DDC;
		  /* 82186DDCh */ case   17:  		/* addi R11, R27, 32 */
		/* 82186DDCh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x20);
		/* 82186DDCh case   17:*/		return 0x82186DE0;
		  /* 82186DE0h */ case   18:  		/* b 24 */
		/* 82186DE0h case   18:*/		return 0x82186DF8;
		/* 82186DE0h case   18:*/		return 0x82186DE4;
	}
	return 0x82186DE4;
} // Block from 82186D98h-82186DE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82186DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186DE4);
		  /* 82186DE4h */ case    0:  		/* lwz R10, <#[R27 + 28]> */
		/* 82186DE4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 82186DE4h case    0:*/		return 0x82186DE8;
		  /* 82186DE8h */ case    1:  		/* addi R11, R27, 24 */
		/* 82186DE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x18);
		/* 82186DE8h case    1:*/		return 0x82186DEC;
		  /* 82186DECh */ case    2:  		/* b 12 */
		/* 82186DECh case    2:*/		return 0x82186DF8;
		/* 82186DECh case    2:*/		return 0x82186DF0;
	}
	return 0x82186DF0;
} // Block from 82186DE4h-82186DF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186DF0);
		  /* 82186DF0h */ case    0:  		/* lwz R10, <#[R27 + 20]> */
		/* 82186DF0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 82186DF0h case    0:*/		return 0x82186DF4;
		  /* 82186DF4h */ case    1:  		/* addi R11, R27, 16 */
		/* 82186DF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x10);
		/* 82186DF4h case    1:*/		return 0x82186DF8;
	}
	return 0x82186DF8;
} // Block from 82186DF0h-82186DF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186DF8);
		  /* 82186DF8h */ case    0:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 82186DF8h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 82186DF8h case    0:*/		return 0x82186DFC;
		  /* 82186DFCh */ case    1:  		/* mr R28, R11 */
		/* 82186DFCh case    1:*/		regs.R28 = regs.R11;
		/* 82186DFCh case    1:*/		return 0x82186E00;
		  /* 82186E00h */ case    2:  		/* addic R11, R9, -1 */
		/* 82186E00h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 82186E00h case    2:*/		return 0x82186E04;
		  /* 82186E04h */ case    3:  		/* subfe R11, R11, R11 */
		/* 82186E04h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82186E04h case    3:*/		return 0x82186E08;
		  /* 82186E08h */ case    4:  		/* and R31, R11, R10 */
		/* 82186E08h case    4:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 82186E08h case    4:*/		return 0x82186E0C;
		  /* 82186E0Ch */ case    5:  		/* b 216 */
		/* 82186E0Ch case    5:*/		return 0x82186EE4;
		/* 82186E0Ch case    5:*/		return 0x82186E10;
		  /* 82186E10h */ case    6:  		/* lwz R29, <#[R31 + 8]> */
		/* 82186E10h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 82186E10h case    6:*/		return 0x82186E14;
		  /* 82186E14h */ case    7:  		/* rlwinm. R11, R29, 6, 31, 31 */
		/* 82186E14h case    7:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R29);
		/* 82186E14h case    7:*/		return 0x82186E18;
		  /* 82186E18h */ case    8:  		/* bc 12, CR0_EQ, 116 */
		/* 82186E18h case    8:*/		if ( regs.CR[0].eq ) { return 0x82186E8C;  }
		/* 82186E18h case    8:*/		return 0x82186E1C;
		  /* 82186E1Ch */ case    9:  		/* mr R3, R31 */
		/* 82186E1Ch case    9:*/		regs.R3 = regs.R31;
		/* 82186E1Ch case    9:*/		return 0x82186E20;
		  /* 82186E20h */ case   10:  		/* bl -106648 */
		/* 82186E20h case   10:*/		regs.LR = 0x82186E24; return 0x8216CD88;
		/* 82186E20h case   10:*/		return 0x82186E24;
		  /* 82186E24h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82186E24h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82186E24h case   11:*/		return 0x82186E28;
		  /* 82186E28h */ case   12:  		/* bc 12, CR0_EQ, 88 */
		/* 82186E28h case   12:*/		if ( regs.CR[0].eq ) { return 0x82186E80;  }
		/* 82186E28h case   12:*/		return 0x82186E2C;
		  /* 82186E2Ch */ case   13:  		/* rlwinm. R11, R29, 0, 27, 30 */
		/* 82186E2Ch case   13:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R29);
		/* 82186E2Ch case   13:*/		return 0x82186E30;
		  /* 82186E30h */ case   14:  		/* bc 12, CR0_EQ, 80 */
		/* 82186E30h case   14:*/		if ( regs.CR[0].eq ) { return 0x82186E80;  }
		/* 82186E30h case   14:*/		return 0x82186E34;
		  /* 82186E34h */ case   15:  		/* rlwinm. R11, R29, 9, 31, 31 */
		/* 82186E34h case   15:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R29);
		/* 82186E34h case   15:*/		return 0x82186E38;
		  /* 82186E38h */ case   16:  		/* bc 4, CR0_EQ, 72 */
		/* 82186E38h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82186E80;  }
		/* 82186E38h case   16:*/		return 0x82186E3C;
		  /* 82186E3Ch */ case   17:  		/* lwz R11, <#[R31 + 4]> */
		/* 82186E3Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82186E3Ch case   17:*/		return 0x82186E40;
		  /* 82186E40h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82186E40h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82186E40h case   18:*/		return 0x82186E44;
		  /* 82186E44h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 82186E44h case   19:*/		if ( regs.CR[6].eq ) { return 0x82186E68;  }
		/* 82186E44h case   19:*/		return 0x82186E48;
		  /* 82186E48h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 82186E48h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82186E48h case   20:*/		return 0x82186E4C;
		  /* 82186E4Ch */ case   21:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 82186E4Ch case   21:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 82186E4Ch case   21:*/		return 0x82186E50;
		  /* 82186E50h */ case   22:  		/* bc 4, CR0_EQ, 12 */
		/* 82186E50h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82186E5C;  }
		/* 82186E50h case   22:*/		return 0x82186E54;
		  /* 82186E54h */ case   23:  		/* lwz R11, <#[R11 + 8]> */
		/* 82186E54h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82186E54h case   23:*/		return 0x82186E58;
		  /* 82186E58h */ case   24:  		/* b -24 */
		/* 82186E58h case   24:*/		return 0x82186E40;
		/* 82186E58h case   24:*/		return 0x82186E5C;
	}
	return 0x82186E5C;
} // Block from 82186DF8h-82186E5Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 82186E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186E5C);
		  /* 82186E5Ch */ case    0:  		/* rlwinm. R11, R10, 2, 31, 31 */
		/* 82186E5Ch case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R10);
		/* 82186E5Ch case    0:*/		return 0x82186E60;
		  /* 82186E60h */ case    1:  		/* mr R11, R17 */
		/* 82186E60h case    1:*/		regs.R11 = regs.R17;
		/* 82186E60h case    1:*/		return 0x82186E64;
		  /* 82186E64h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 82186E64h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82186E6C;  }
		/* 82186E64h case    2:*/		return 0x82186E68;
	}
	return 0x82186E68;
} // Block from 82186E5Ch-82186E68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186E68);
		  /* 82186E68h */ case    0:  		/* mr R11, R21 */
		/* 82186E68h case    0:*/		regs.R11 = regs.R21;
		/* 82186E68h case    0:*/		return 0x82186E6C;
	}
	return 0x82186E6C;
} // Block from 82186E68h-82186E6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82186E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186E6C);
		  /* 82186E6Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82186E6Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82186E6Ch case    0:*/		return 0x82186E70;
		  /* 82186E70h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 82186E70h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82186E80;  }
		/* 82186E70h case    1:*/		return 0x82186E74;
		  /* 82186E74h */ case    2:  		/* mr R4, R31 */
		/* 82186E74h case    2:*/		regs.R4 = regs.R31;
		/* 82186E74h case    2:*/		return 0x82186E78;
		  /* 82186E78h */ case    3:  		/* mr R3, R30 */
		/* 82186E78h case    3:*/		regs.R3 = regs.R30;
		/* 82186E78h case    3:*/		return 0x82186E7C;
		  /* 82186E7Ch */ case    4:  		/* bl 195532 */
		/* 82186E7Ch case    4:*/		regs.LR = 0x82186E80; return 0x821B6A48;
		/* 82186E7Ch case    4:*/		return 0x82186E80;
	}
	return 0x82186E80;
} // Block from 82186E6Ch-82186E80h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82186E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186E80);
		  /* 82186E80h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82186E80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82186E80h case    0:*/		return 0x82186E84;
		  /* 82186E84h */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 82186E84h case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 82186E84h case    1:*/		return 0x82186E88;
		  /* 82186E88h */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 82186E88h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82186E88h case    2:*/		return 0x82186E8C;
	}
	return 0x82186E8C;
} // Block from 82186E80h-82186E8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186E8C);
		  /* 82186E8Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82186E8Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82186E8Ch case    0:*/		return 0x82186E90;
		  /* 82186E90h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 82186E90h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 82186E90h case    1:*/		return 0x82186E94;
		  /* 82186E94h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82186E94h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82186E94h case    2:*/		return 0x82186E98;
		  /* 82186E98h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82186E98h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82186EA4;  }
		/* 82186E98h case    3:*/		return 0x82186E9C;
		  /* 82186E9Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82186E9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82186E9Ch case    4:*/		return 0x82186EA0;
		  /* 82186EA0h */ case    5:  		/* bc 4, CR6_EQ, -144 */
		/* 82186EA0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82186E10;  }
		/* 82186EA0h case    5:*/		return 0x82186EA4;
	}
	return 0x82186EA4;
} // Block from 82186E8Ch-82186EA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186EA4);
		  /* 82186EA4h */ case    0:  		/* addi R10, R27, 32 */
		/* 82186EA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x20);
		/* 82186EA4h case    0:*/		return 0x82186EA8;
		  /* 82186EA8h */ case    1:  		/* cmplw CR6, R28, R10 */
		/* 82186EA8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 82186EA8h case    1:*/		return 0x82186EAC;
		  /* 82186EACh */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82186EACh case    2:*/		if ( regs.CR[6].eq ) { return 0x82186EEC;  }
		/* 82186EACh case    2:*/		return 0x82186EB0;
		  /* 82186EB0h */ case    3:  		/* addi R11, R27, 24 */
		/* 82186EB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x18);
		/* 82186EB0h case    3:*/		return 0x82186EB4;
		  /* 82186EB4h */ case    4:  		/* cmplw CR6, R28, R11 */
		/* 82186EB4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82186EB4h case    4:*/		return 0x82186EB8;
		  /* 82186EB8h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82186EB8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82186ED4;  }
		/* 82186EB8h case    5:*/		return 0x82186EBC;
		  /* 82186EBCh */ case    6:  		/* lwz R9, <#[R27 + 28]> */
		/* 82186EBCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000001C) );
		/* 82186EBCh case    6:*/		return 0x82186EC0;
		  /* 82186EC0h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 82186EC0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82186EC0h case    7:*/		return 0x82186EC4;
		  /* 82186EC4h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 82186EC4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82186ED4;  }
		/* 82186EC4h case    8:*/		return 0x82186EC8;
		  /* 82186EC8h */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 82186EC8h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 82186EC8h case    9:*/		return 0x82186ECC;
		  /* 82186ECCh */ case   10:  		/* mr R28, R11 */
		/* 82186ECCh case   10:*/		regs.R28 = regs.R11;
		/* 82186ECCh case   10:*/		return 0x82186ED0;
		  /* 82186ED0h */ case   11:  		/* b 12 */
		/* 82186ED0h case   11:*/		return 0x82186EDC;
		/* 82186ED0h case   11:*/		return 0x82186ED4;
	}
	return 0x82186ED4;
} // Block from 82186EA4h-82186ED4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82186ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186ED4);
		  /* 82186ED4h */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 82186ED4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 82186ED4h case    0:*/		return 0x82186ED8;
		  /* 82186ED8h */ case    1:  		/* mr R28, R10 */
		/* 82186ED8h case    1:*/		regs.R28 = regs.R10;
		/* 82186ED8h case    1:*/		return 0x82186EDC;
	}
	return 0x82186EDC;
} // Block from 82186ED4h-82186EDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186EDC);
		  /* 82186EDCh */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82186EDCh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82186EDCh case    0:*/		return 0x82186EE0;
		  /* 82186EE0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82186EE0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82186EEC;  }
		/* 82186EE0h case    1:*/		return 0x82186EE4;
	}
	return 0x82186EE4;
} // Block from 82186EDCh-82186EE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186EE4);
		  /* 82186EE4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82186EE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82186EE4h case    0:*/		return 0x82186EE8;
		  /* 82186EE8h */ case    1:  		/* bc 4, CR6_EQ, -216 */
		/* 82186EE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82186E10;  }
		/* 82186EE8h case    1:*/		return 0x82186EEC;
	}
	return 0x82186EEC;
} // Block from 82186EE4h-82186EECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186EEC);
		  /* 82186EECh */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82186EECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82186EECh case    0:*/		return 0x82186EF0;
		  /* 82186EF0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82186EF0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82186EF0h case    1:*/		return 0x82186EF4;
		  /* 82186EF4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186EF4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186EF4h case    2:*/		return 0x82186EF8;
		  /* 82186EF8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82186EF8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82186F08;  }
		/* 82186EF8h case    3:*/		return 0x82186EFC;
		  /* 82186EFCh */ case    4:  		/* mr R27, R11 */
		/* 82186EFCh case    4:*/		regs.R27 = regs.R11;
		/* 82186EFCh case    4:*/		return 0x82186F00;
		  /* 82186F00h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82186F00h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82186F00h case    5:*/		return 0x82186F04;
		  /* 82186F04h */ case    6:  		/* bc 4, CR6_EQ, -324 */
		/* 82186F04h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82186DC0;  }
		/* 82186F04h case    6:*/		return 0x82186F08;
	}
	return 0x82186F08;
} // Block from 82186EECh-82186F08h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82186F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186F08);
		  /* 82186F08h */ case    0:  		/* lwz R11, <#[R30 + 116]> */
		/* 82186F08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000074) );
		/* 82186F08h case    0:*/		return 0x82186F0C;
		  /* 82186F0Ch */ case    1:  		/* li R5, 0 */
		/* 82186F0Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82186F0Ch case    1:*/		return 0x82186F10;
		  /* 82186F10h */ case    2:  		/* mr R3, R30 */
		/* 82186F10h case    2:*/		regs.R3 = regs.R30;
		/* 82186F10h case    2:*/		return 0x82186F14;
		  /* 82186F14h */ case    3:  		/* addi R11, R11, 1 */
		/* 82186F14h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82186F14h case    3:*/		return 0x82186F18;
		  /* 82186F18h */ case    4:  		/* stw R11, <#[R30 + 668]> */
		/* 82186F18h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82186F18h case    4:*/		return 0x82186F1C;
		  /* 82186F1Ch */ case    5:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 82186F1Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 82186F1Ch case    5:*/		return 0x82186F20;
		  /* 82186F20h */ case    6:  		/* bl -138984 */
		/* 82186F20h case    6:*/		regs.LR = 0x82186F24; return 0x82165038;
		/* 82186F20h case    6:*/		return 0x82186F24;
		  /* 82186F24h */ case    7:  		/* lwz R11, <#[R30 + 4]> */
		/* 82186F24h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82186F24h case    7:*/		return 0x82186F28;
		  /* 82186F28h */ case    8:  		/* stw R3, <#[R30 + 708]> */
		/* 82186F28h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000002C4) );
		/* 82186F28h case    8:*/		return 0x82186F2C;
		  /* 82186F2Ch */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82186F2Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82186F2Ch case    9:*/		return 0x82186F30;
		  /* 82186F30h */ case   10:  		/* bc 4, CR0_EQ, 304 */
		/* 82186F30h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82187060;  }
		/* 82186F30h case   10:*/		return 0x82186F34;
		  /* 82186F34h */ case   11:  		/* mr R4, R11 */
		/* 82186F34h case   11:*/		regs.R4 = regs.R11;
		/* 82186F34h case   11:*/		return 0x82186F38;
		  /* 82186F38h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 82186F38h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82186F38h case   12:*/		return 0x82186F3C;
		  /* 82186F3Ch */ case   13:  		/* bc 12, CR0_EQ, 292 */
		/* 82186F3Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x82187060;  }
		/* 82186F3Ch case   13:*/		return 0x82186F40;
		  /* 82186F40h */ case   14:  		/* lwz R11, <#[R4 + 20]> */
		/* 82186F40h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 82186F40h case   14:*/		return 0x82186F44;
		  /* 82186F44h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82186F44h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82186F44h case   15:*/		return 0x82186F48;
		  /* 82186F48h */ case   16:  		/* bc 12, CR0_EQ, 40 */
		/* 82186F48h case   16:*/		if ( regs.CR[0].eq ) { return 0x82186F70;  }
		/* 82186F48h case   16:*/		return 0x82186F4C;
		  /* 82186F4Ch */ case   17:  		/* lwz R11, <#[R4 + 28]> */
		/* 82186F4Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 82186F4Ch case   17:*/		return 0x82186F50;
		  /* 82186F50h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82186F50h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82186F50h case   18:*/		return 0x82186F54;
		  /* 82186F54h */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 82186F54h case   19:*/		if ( regs.CR[0].eq ) { return 0x82186F64;  }
		/* 82186F54h case   19:*/		return 0x82186F58;
		  /* 82186F58h */ case   20:  		/* lwz R10, <#[R4 + 36]> */
		/* 82186F58h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000024) );
		/* 82186F58h case   20:*/		return 0x82186F5C;
		  /* 82186F5Ch */ case   21:  		/* addi R11, R4, 32 */
		/* 82186F5Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x20);
		/* 82186F5Ch case   21:*/		return 0x82186F60;
		  /* 82186F60h */ case   22:  		/* b 24 */
		/* 82186F60h case   22:*/		return 0x82186F78;
		/* 82186F60h case   22:*/		return 0x82186F64;
	}
	return 0x82186F64;
} // Block from 82186F08h-82186F64h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82186F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186F64);
		  /* 82186F64h */ case    0:  		/* lwz R10, <#[R4 + 28]> */
		/* 82186F64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82186F64h case    0:*/		return 0x82186F68;
		  /* 82186F68h */ case    1:  		/* addi R11, R4, 24 */
		/* 82186F68h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x18);
		/* 82186F68h case    1:*/		return 0x82186F6C;
		  /* 82186F6Ch */ case    2:  		/* b 12 */
		/* 82186F6Ch case    2:*/		return 0x82186F78;
		/* 82186F6Ch case    2:*/		return 0x82186F70;
	}
	return 0x82186F70;
} // Block from 82186F64h-82186F70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82186F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186F70);
		  /* 82186F70h */ case    0:  		/* lwz R10, <#[R4 + 20]> */
		/* 82186F70h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000014) );
		/* 82186F70h case    0:*/		return 0x82186F74;
		  /* 82186F74h */ case    1:  		/* addi R11, R4, 16 */
		/* 82186F74h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x10);
		/* 82186F74h case    1:*/		return 0x82186F78;
	}
	return 0x82186F78;
} // Block from 82186F70h-82186F78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82186F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186F78);
		  /* 82186F78h */ case    0:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 82186F78h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 82186F78h case    0:*/		return 0x82186F7C;
		  /* 82186F7Ch */ case    1:  		/* mr R5, R11 */
		/* 82186F7Ch case    1:*/		regs.R5 = regs.R11;
		/* 82186F7Ch case    1:*/		return 0x82186F80;
		  /* 82186F80h */ case    2:  		/* addic R11, R9, -1 */
		/* 82186F80h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 82186F80h case    2:*/		return 0x82186F84;
		  /* 82186F84h */ case    3:  		/* subfe R11, R11, R11 */
		/* 82186F84h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82186F84h case    3:*/		return 0x82186F88;
		  /* 82186F88h */ case    4:  		/* and R10, R11, R10 */
		/* 82186F88h case    4:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82186F88h case    4:*/		return 0x82186F8C;
		  /* 82186F8Ch */ case    5:  		/* b 176 */
		/* 82186F8Ch case    5:*/		return 0x8218703C;
		/* 82186F8Ch case    5:*/		return 0x82186F90;
		  /* 82186F90h */ case    6:  		/* lwz R11, <#[R10 + 8]> */
		/* 82186F90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82186F90h case    6:*/		return 0x82186F94;
		  /* 82186F94h */ case    7:  		/* rlwinm. R9, R11, 9, 31, 31 */
		/* 82186F94h case    7:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R11);
		/* 82186F94h case    7:*/		return 0x82186F98;
		  /* 82186F98h */ case    8:  		/* bc 12, CR0_EQ, 76 */
		/* 82186F98h case    8:*/		if ( regs.CR[0].eq ) { return 0x82186FE4;  }
		/* 82186F98h case    8:*/		return 0x82186F9C;
		  /* 82186F9Ch */ case    9:  		/* lwz R9, <#[R10 + 16]> */
		/* 82186F9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82186F9Ch case    9:*/		return 0x82186FA0;
		  /* 82186FA0h */ case   10:  		/* rlwinm R6, R11, 31, 28, 31 */
		/* 82186FA0h case   10:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R6,regs.R11);
		/* 82186FA0h case   10:*/		return 0x82186FA4;
		  /* 82186FA4h */ case   11:  		/* mr R8, R17 */
		/* 82186FA4h case   11:*/		regs.R8 = regs.R17;
		/* 82186FA4h case   11:*/		return 0x82186FA8;
		  /* 82186FA8h */ case   12:  		/* rlwinm R11, R9, 0, 16, 31 */
		/* 82186FA8h case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R9);
		/* 82186FA8h case   12:*/		return 0x82186FAC;
		  /* 82186FACh */ case   13:  		/* rlwinm R9, R9, 16, 29, 31 */
		/* 82186FACh case   13:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R9,regs.R9);
		/* 82186FACh case   13:*/		return 0x82186FB0;
		  /* 82186FB0h */ case   14:  		/* add R9, R9, R11 */
		/* 82186FB0h case   14:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82186FB0h case   14:*/		return 0x82186FB4;
		  /* 82186FB4h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 82186FB4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82186FB4h case   15:*/		return 0x82186FB8;
		  /* 82186FB8h */ case   16:  		/* bc 4, CR6_LT, 44 */
		/* 82186FB8h case   16:*/		if ( !regs.CR[6].lt ) { return 0x82186FE4;  }
		/* 82186FB8h case   16:*/		return 0x82186FBC;
		  /* 82186FBCh */ case   17:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 82186FBCh case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 82186FBCh case   17:*/		return 0x82186FC0;
		  /* 82186FC0h */ case   18:  		/* and. R3, R8, R6 */
		/* 82186FC0h case   18:*/		cpu::op::and<1>(regs,&regs.R3,regs.R8,regs.R6);
		/* 82186FC0h case   18:*/		return 0x82186FC4;
		  /* 82186FC4h */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 82186FC4h case   19:*/		if ( regs.CR[0].eq ) { return 0x82186FD0;  }
		/* 82186FC4h case   19:*/		return 0x82186FC8;
		  /* 82186FC8h */ case   20:  		/* lwz R3, <#[R30 + 708]> */
		/* 82186FC8h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000002C4) );
		/* 82186FC8h case   20:*/		return 0x82186FCC;
		  /* 82186FCCh */ case   21:  		/* stwx R10, <#[R3 + R7]> */
		/* 82186FCCh case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + regs.R7 + 0x00000000) );
		/* 82186FCCh case   21:*/		return 0x82186FD0;
	}
	return 0x82186FD0;
} // Block from 82186F78h-82186FD0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82186FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186FD0);
		  /* 82186FD0h */ case    0:  		/* addi R11, R11, 1 */
		/* 82186FD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82186FD0h case    0:*/		return 0x82186FD4;
		  /* 82186FD4h */ case    1:  		/* addi R7, R7, 4 */
		/* 82186FD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82186FD4h case    1:*/		return 0x82186FD8;
		  /* 82186FD8h */ case    2:  		/* rlwinm R8, R8, 1, 0, 30 */
		/* 82186FD8h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R8);
		/* 82186FD8h case    2:*/		return 0x82186FDC;
		  /* 82186FDCh */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 82186FDCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82186FDCh case    3:*/		return 0x82186FE0;
		  /* 82186FE0h */ case    4:  		/* bc 12, CR6_LT, -32 */
		/* 82186FE0h case    4:*/		if ( regs.CR[6].lt ) { return 0x82186FC0;  }
		/* 82186FE0h case    4:*/		return 0x82186FE4;
	}
	return 0x82186FE4;
} // Block from 82186FD0h-82186FE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82186FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186FE4);
		  /* 82186FE4h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 82186FE4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 82186FE4h case    0:*/		return 0x82186FE8;
		  /* 82186FE8h */ case    1:  		/* lwz R10, <#[R11 + 40]> */
		/* 82186FE8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 82186FE8h case    1:*/		return 0x82186FEC;
		  /* 82186FECh */ case    2:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 82186FECh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 82186FECh case    2:*/		return 0x82186FF0;
		  /* 82186FF0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82186FF0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82186FFC;  }
		/* 82186FF0h case    3:*/		return 0x82186FF4;
		  /* 82186FF4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82186FF4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82186FF4h case    4:*/		return 0x82186FF8;
		  /* 82186FF8h */ case    5:  		/* bc 4, CR6_EQ, -104 */
		/* 82186FF8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82186F90;  }
		/* 82186FF8h case    5:*/		return 0x82186FFC;
	}
	return 0x82186FFC;
} // Block from 82186FE4h-82186FFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82186FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82186FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82186FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82186FFC);
		  /* 82186FFCh */ case    0:  		/* addi R9, R4, 32 */
		/* 82186FFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0x20);
		/* 82186FFCh case    0:*/		return 0x82187000;
		  /* 82187000h */ case    1:  		/* cmplw CR6, R5, R9 */
		/* 82187000h case    1:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 82187000h case    1:*/		return 0x82187004;
		  /* 82187004h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82187004h case    2:*/		if ( regs.CR[6].eq ) { return 0x82187044;  }
		/* 82187004h case    2:*/		return 0x82187008;
	}
	return 0x82187008;
} // Block from 82186FFCh-82187008h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82187008h
// Function '?CanMergeGroups@Compiler@D3DXShader@@AAA_NPAURegGroupInfo@2@0V?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$03@2@III@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187008);
		  /* 82187008h */ case    0:  		/* addi R11, R4, 24 */
		/* 82187008h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x18);
		/* 82187008h case    0:*/		return 0x8218700C;
		  /* 8218700Ch */ case    1:  		/* cmplw CR6, R5, R11 */
		/* 8218700Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8218700Ch case    1:*/		return 0x82187010;
		  /* 82187010h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 82187010h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218702C;  }
		/* 82187010h case    2:*/		return 0x82187014;
		  /* 82187014h */ case    3:  		/* lwz R10, <#[R4 + 28]> */
		/* 82187014h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82187014h case    3:*/		return 0x82187018;
		  /* 82187018h */ case    4:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82187018h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82187018h case    4:*/		return 0x8218701C;
		  /* 8218701Ch */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 8218701Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8218702C;  }
		/* 8218701Ch case    5:*/		return 0x82187020;
		  /* 82187020h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 82187020h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82187020h case    6:*/		return 0x82187024;
		  /* 82187024h */ case    7:  		/* mr R5, R11 */
		/* 82187024h case    7:*/		regs.R5 = regs.R11;
		/* 82187024h case    7:*/		return 0x82187028;
		  /* 82187028h */ case    8:  		/* b 12 */
		/* 82187028h case    8:*/		return 0x82187034;
		/* 82187028h case    8:*/		return 0x8218702C;
	}
	return 0x8218702C;
} // Block from 82187008h-8218702Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8218702Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218702C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218702C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218702C);
		  /* 8218702Ch */ case    0:  		/* lwz R10, <#[R9 + 4]> */
		/* 8218702Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8218702Ch case    0:*/		return 0x82187030;
		  /* 82187030h */ case    1:  		/* mr R5, R9 */
		/* 82187030h case    1:*/		regs.R5 = regs.R9;
		/* 82187030h case    1:*/		return 0x82187034;
	}
	return 0x82187034;
} // Block from 8218702Ch-82187034h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187034);
		  /* 82187034h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 82187034h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 82187034h case    0:*/		return 0x82187038;
		  /* 82187038h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82187038h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82187044;  }
		/* 82187038h case    1:*/		return 0x8218703C;
	}
	return 0x8218703C;
} // Block from 82187034h-8218703Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218703Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218703C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218703C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218703C);
		  /* 8218703Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8218703Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8218703Ch case    0:*/		return 0x82187040;
		  /* 82187040h */ case    1:  		/* bc 4, CR6_EQ, -176 */
		/* 82187040h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82186F90;  }
		/* 82187040h case    1:*/		return 0x82187044;
	}
	return 0x82187044;
} // Block from 8218703Ch-82187044h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187044);
		  /* 82187044h */ case    0:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82187044h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82187044h case    0:*/		return 0x82187048;
		  /* 82187048h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187048h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187048h case    1:*/		return 0x8218704C;
		  /* 8218704Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218704Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218704Ch case    2:*/		return 0x82187050;
		  /* 82187050h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82187050h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187060;  }
		/* 82187050h case    3:*/		return 0x82187054;
		  /* 82187054h */ case    4:  		/* mr R4, R11 */
		/* 82187054h case    4:*/		regs.R4 = regs.R11;
		/* 82187054h case    4:*/		return 0x82187058;
		  /* 82187058h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82187058h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187058h case    5:*/		return 0x8218705C;
		  /* 8218705Ch */ case    6:  		/* bc 4, CR6_EQ, -284 */
		/* 8218705Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82186F40;  }
		/* 8218705Ch case    6:*/		return 0x82187060;
	}
	return 0x82187060;
} // Block from 82187044h-82187060h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187060);
		  /* 82187060h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187060h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187060h case    0:*/		return 0x82187064;
		  /* 82187064h */ case    1:  		/* li R5, 0 */
		/* 82187064h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82187064h case    1:*/		return 0x82187068;
		  /* 82187068h */ case    2:  		/* mr R3, R30 */
		/* 82187068h case    2:*/		regs.R3 = regs.R30;
		/* 82187068h case    2:*/		return 0x8218706C;
		  /* 8218706Ch */ case    3:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8218706Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8218706Ch case    3:*/		return 0x82187070;
		  /* 82187070h */ case    4:  		/* bl -139320 */
		/* 82187070h case    4:*/		regs.LR = 0x82187074; return 0x82165038;
		/* 82187070h case    4:*/		return 0x82187074;
		  /* 82187074h */ case    5:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187074h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187074h case    5:*/		return 0x82187078;
		  /* 82187078h */ case    6:  		/* lwz R4, <#[R30 + 708]> */
		/* 82187078h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000002C4) );
		/* 82187078h case    6:*/		return 0x8218707C;
		  /* 8218707Ch */ case    7:  		/* mr R15, R3 */
		/* 8218707Ch case    7:*/		regs.R15 = regs.R3;
		/* 8218707Ch case    7:*/		return 0x82187080;
		  /* 82187080h */ case    8:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82187080h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82187080h case    8:*/		return 0x82187084;
		  /* 82187084h */ case    9:  		/* stw R3, <#[R1 + 108]> */
		/* 82187084h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000006C) );
		/* 82187084h case    9:*/		return 0x82187088;
		  /* 82187088h */ case   10:  		/* bl -1005272 */
		/* 82187088h case   10:*/		regs.LR = 0x8218708C; return 0x820919B0;
		/* 82187088h case   10:*/		return 0x8218708C;
		  /* 8218708Ch */ case   11:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218708Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218708Ch case   11:*/		return 0x82187090;
		  /* 82187090h */ case   12:  		/* lis R10, -32232 */
		/* 82187090h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8218);
		/* 82187090h case   12:*/		return 0x82187094;
		  /* 82187094h */ case   13:  		/* addi R19, R15, 4 */
		/* 82187094h case   13:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R15,0x4);
		/* 82187094h case   13:*/		return 0x82187098;
		  /* 82187098h */ case   14:  		/* li R5, 4 */
		/* 82187098h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82187098h case   14:*/		return 0x8218709C;
		  /* 8218709Ch */ case   15:  		/* addi R6, R10, 14824 */
		/* 8218709Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x39E8);
		/* 8218709Ch case   15:*/		return 0x821870A0;
		  /* 821870A0h */ case   16:  		/* mr R3, R19 */
		/* 821870A0h case   16:*/		regs.R3 = regs.R19;
		/* 821870A0h case   16:*/		return 0x821870A4;
		  /* 821870A4h */ case   17:  		/* addi R4, R11, -1 */
		/* 821870A4h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFF);
		/* 821870A4h case   17:*/		return 0x821870A8;
		  /* 821870A8h */ case   18:  		/* bl -1003720 */
		/* 821870A8h case   18:*/		regs.LR = 0x821870AC; return 0x82091FE0;
		/* 821870A8h case   18:*/		return 0x821870AC;
		  /* 821870ACh */ case   19:  		/* lwz R11, <#[R30 + 668]> */
		/* 821870ACh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821870ACh case   19:*/		return 0x821870B0;
		  /* 821870B0h */ case   20:  		/* li R5, 0 */
		/* 821870B0h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821870B0h case   20:*/		return 0x821870B4;
		  /* 821870B4h */ case   21:  		/* mr R3, R30 */
		/* 821870B4h case   21:*/		regs.R3 = regs.R30;
		/* 821870B4h case   21:*/		return 0x821870B8;
		  /* 821870B8h */ case   22:  		/* mulli R4, R11, 40 */
		/* 821870B8h case   22:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R11,0x28);
		/* 821870B8h case   22:*/		return 0x821870BC;
		  /* 821870BCh */ case   23:  		/* bl -139396 */
		/* 821870BCh case   23:*/		regs.LR = 0x821870C0; return 0x82165038;
		/* 821870BCh case   23:*/		return 0x821870C0;
		  /* 821870C0h */ case   24:  		/* lwz R11, <#[R30 + 668]> */
		/* 821870C0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821870C0h case   24:*/		return 0x821870C4;
		  /* 821870C4h */ case   25:  		/* stw R3, <#[R30 + 676]> */
		/* 821870C4h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000002A4) );
		/* 821870C4h case   25:*/		return 0x821870C8;
		  /* 821870C8h */ case   26:  		/* mr R29, R17 */
		/* 821870C8h case   26:*/		regs.R29 = regs.R17;
		/* 821870C8h case   26:*/		return 0x821870CC;
		  /* 821870CCh */ case   27:  		/* cmplwi CR6, R11, 1 */
		/* 821870CCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821870CCh case   27:*/		return 0x821870D0;
		  /* 821870D0h */ case   28:  		/* bc 4, CR6_GT, 92 */
		/* 821870D0h case   28:*/		if ( !regs.CR[6].gt ) { return 0x8218712C;  }
		/* 821870D0h case   28:*/		return 0x821870D4;
		  /* 821870D4h */ case   29:  		/* li R31, 40 */
		/* 821870D4h case   29:*/		cpu::op::li<0>(regs,&regs.R31,0x28);
		/* 821870D4h case   29:*/		return 0x821870D8;
		  /* 821870D8h */ case   30:  		/* lwz R11, <#[R30 + 676]> */
		/* 821870D8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A4) );
		/* 821870D8h case   30:*/		return 0x821870DC;
		  /* 821870DCh */ case   31:  		/* add R3, R11, R31 */
		/* 821870DCh case   31:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R31);
		/* 821870DCh case   31:*/		return 0x821870E0;
		  /* 821870E0h */ case   32:  		/* stwx R30, <#[R11 + R31]> */
		/* 821870E0h case   32:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821870E0h case   32:*/		return 0x821870E4;
		  /* 821870E4h */ case   33:  		/* std R21, <#[R3 + 8]> */
		/* 821870E4h case   33:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R3 + 0x00000008) );
		/* 821870E4h case   33:*/		return 0x821870E8;
		  /* 821870E8h */ case   34:  		/* std R21, <#[R3 + 16]> */
		/* 821870E8h case   34:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R3 + 0x00000010) );
		/* 821870E8h case   34:*/		return 0x821870EC;
		  /* 821870ECh */ case   35:  		/* std R21, <#[R3 + 24]> */
		/* 821870ECh case   35:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R3 + 0x00000018) );
		/* 821870ECh case   35:*/		return 0x821870F0;
		  /* 821870F0h */ case   36:  		/* std R21, <#[R3 + 32]> */
		/* 821870F0h case   36:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R3 + 0x00000020) );
		/* 821870F0h case   36:*/		return 0x821870F4;
		  /* 821870F4h */ case   37:  		/* lwz R11, <#[R30 + 792]> */
		/* 821870F4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000318) );
		/* 821870F4h case   37:*/		return 0x821870F8;
		  /* 821870F8h */ case   38:  		/* cmplwi CR6, R11, 0 */
		/* 821870F8h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821870F8h case   38:*/		return 0x821870FC;
		  /* 821870FCh */ case   39:  		/* bc 4, CR6_EQ, 8 */
		/* 821870FCh case   39:*/		if ( !regs.CR[6].eq ) { return 0x82187104;  }
		/* 821870FCh case   39:*/		return 0x82187100;
		  /* 82187100h */ case   40:  		/* li R11, 32 */
		/* 82187100h case   40:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82187100h case   40:*/		return 0x82187104;
	}
	return 0x82187104;
} // Block from 82187060h-82187104h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82187104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187104);
		  /* 82187104h */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82187104h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82187104h case    0:*/		return 0x82187108;
		  /* 82187108h */ case    1:  		/* bc 4, CR6_LT, 16 */
		/* 82187108h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82187118;  }
		/* 82187108h case    1:*/		return 0x8218710C;
		  /* 8218710Ch */ case    2:  		/* subfic R5, R11, 64 */
		/* 8218710Ch case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 8218710Ch case    2:*/		return 0x82187110;
		  /* 82187110h */ case    3:  		/* mr R4, R11 */
		/* 82187110h case    3:*/		regs.R4 = regs.R11;
		/* 82187110h case    3:*/		return 0x82187114;
		  /* 82187114h */ case    4:  		/* bl -97340 */
		/* 82187114h case    4:*/		regs.LR = 0x82187118; return 0x8216F4D8;
		/* 82187114h case    4:*/		return 0x82187118;
	}
	return 0x82187118;
} // Block from 82187104h-82187118h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82187118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187118);
		  /* 82187118h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187118h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187118h case    0:*/		return 0x8218711C;
		  /* 8218711Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8218711Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8218711Ch case    1:*/		return 0x82187120;
		  /* 82187120h */ case    2:  		/* addi R31, R31, 40 */
		/* 82187120h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x28);
		/* 82187120h case    2:*/		return 0x82187124;
		  /* 82187124h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 82187124h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82187124h case    3:*/		return 0x82187128;
		  /* 82187128h */ case    4:  		/* bc 12, CR6_LT, -80 */
		/* 82187128h case    4:*/		if ( regs.CR[6].lt ) { return 0x821870D8;  }
		/* 82187128h case    4:*/		return 0x8218712C;
	}
	return 0x8218712C;
} // Block from 82187118h-8218712Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218712Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218712C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218712C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218712C);
		  /* 8218712Ch */ case    0:  		/* lwz R11, <#[R30 + 48]> */
		/* 8218712Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8218712Ch case    0:*/		return 0x82187130;
		  /* 82187130h */ case    1:  		/* lis R10, -1 */
		/* 82187130h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82187130h case    1:*/		return 0x82187134;
		  /* 82187134h */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82187134h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82187134h case    2:*/		return 0x82187138;
		  /* 82187138h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82187138h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82187138h case    3:*/		return 0x8218713C;
		  /* 8218713Ch */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 8218713Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8218713Ch case    4:*/		return 0x82187140;
		  /* 82187140h */ case    5:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82187140h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187140h case    5:*/		return 0x82187144;
		  /* 82187144h */ case    6:  		/* addic R10, R10, -1 */
		/* 82187144h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82187144h case    6:*/		return 0x82187148;
		  /* 82187148h */ case    7:  		/* subfe R10, R10, R10 */
		/* 82187148h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82187148h case    7:*/		return 0x8218714C;
		  /* 8218714Ch */ case    8:  		/* and R11, R10, R11 */
		/* 8218714Ch case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218714Ch case    8:*/		return 0x82187150;
		  /* 82187150h */ case    9:  		/* lwz R11, <#[R11 + 20]> */
		/* 82187150h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82187150h case    9:*/		return 0x82187154;
		  /* 82187154h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187154h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187154h case   10:*/		return 0x82187158;
		  /* 82187158h */ case   11:  		/* bc 12, CR6_EQ, 332 */
		/* 82187158h case   11:*/		if ( regs.CR[6].eq ) { return 0x821872A4;  }
		/* 82187158h case   11:*/		return 0x8218715C;
		  /* 8218715Ch */ case   12:  		/* mr R4, R21 */
		/* 8218715Ch case   12:*/		regs.R4 = regs.R21;
		/* 8218715Ch case   12:*/		return 0x82187160;
		  /* 82187160h */ case   13:  		/* mr R31, R21 */
		/* 82187160h case   13:*/		regs.R31 = regs.R21;
		/* 82187160h case   13:*/		return 0x82187164;
		  /* 82187164h */ case   14:  		/* mr R29, R21 */
		/* 82187164h case   14:*/		regs.R29 = regs.R21;
		/* 82187164h case   14:*/		return 0x82187168;
		  /* 82187168h */ case   15:  		/* bc 4, CR0_EQ, 576 */
		/* 82187168h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821873A8;  }
		/* 82187168h case   15:*/		return 0x8218716C;
		  /* 8218716Ch */ case   16:  		/* mr R7, R11 */
		/* 8218716Ch case   16:*/		regs.R7 = regs.R11;
		/* 8218716Ch case   16:*/		return 0x82187170;
		  /* 82187170h */ case   17:  		/* cmplwi CR0, R11, 0 */
		/* 82187170h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187170h case   17:*/		return 0x82187174;
		  /* 82187174h */ case   18:  		/* bc 12, CR0_EQ, 564 */
		/* 82187174h case   18:*/		if ( regs.CR[0].eq ) { return 0x821873A8;  }
		/* 82187174h case   18:*/		return 0x82187178;
		  /* 82187178h */ case   19:  		/* lwz R11, <#[R7 + 8]> */
		/* 82187178h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 82187178h case   19:*/		return 0x8218717C;
		  /* 8218717Ch */ case   20:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8218717Ch case   20:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8218717Ch case   20:*/		return 0x82187180;
		  /* 82187180h */ case   21:  		/* cmplwi CR6, R11, 14464 */
		/* 82187180h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003880);
		/* 82187180h case   21:*/		return 0x82187184;
		  /* 82187184h */ case   22:  		/* bc 4, CR6_EQ, 196 */
		/* 82187184h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82187248;  }
		/* 82187184h case   22:*/		return 0x82187188;
		  /* 82187188h */ case   23:  		/* lwz R10, <#[R30 + 536]> */
		/* 82187188h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000218) );
		/* 82187188h case   23:*/		return 0x8218718C;
		  /* 8218718Ch */ case   24:  		/* mr R11, R21 */
		/* 8218718Ch case   24:*/		regs.R11 = regs.R21;
		/* 8218718Ch case   24:*/		return 0x82187190;
		  /* 82187190h */ case   25:  		/* cmplwi CR6, R10, 0 */
		/* 82187190h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82187190h case   25:*/		return 0x82187194;
		  /* 82187194h */ case   26:  		/* bc 4, CR6_GT, 180 */
		/* 82187194h case   26:*/		if ( !regs.CR[6].gt ) { return 0x82187248;  }
		/* 82187194h case   26:*/		return 0x82187198;
		  /* 82187198h */ case   27:  		/* addi R10, R30, 352 */
		/* 82187198h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x160);
		/* 82187198h case   27:*/		return 0x8218719C;
		  /* 8218719Ch */ case   28:  		/* lwz R9, <#[R10]> */
		/* 8218719Ch case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8218719Ch case   28:*/		return 0x821871A0;
		  /* 821871A0h */ case   29:  		/* cmplw CR6, R7, R9 */
		/* 821871A0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 821871A0h case   29:*/		return 0x821871A4;
		  /* 821871A4h */ case   30:  		/* bc 12, CR6_EQ, 28 */
		/* 821871A4h case   30:*/		if ( regs.CR[6].eq ) { return 0x821871C0;  }
		/* 821871A4h case   30:*/		return 0x821871A8;
	}
	return 0x821871A8;
} // Block from 8218712Ch-821871A8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821871A8h
// Function '?MergeGroups@Compiler@D3DXShader@@AAAPAURegGroupInfo@2@PAU32@0V?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$03@2@III_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821871A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821871A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821871A8);
		  /* 821871A8h */ case    0:  		/* lwz R9, <#[R30 + 536]> */
		/* 821871A8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000218) );
		/* 821871A8h case    0:*/		return 0x821871AC;
		  /* 821871ACh */ case    1:  		/* addi R11, R11, 1 */
		/* 821871ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821871ACh case    1:*/		return 0x821871B0;
		  /* 821871B0h */ case    2:  		/* addi R10, R10, 12 */
		/* 821871B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821871B0h case    2:*/		return 0x821871B4;
		  /* 821871B4h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 821871B4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821871B4h case    3:*/		return 0x821871B8;
		  /* 821871B8h */ case    4:  		/* bc 12, CR6_LT, -28 */
		/* 821871B8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8218719C;  }
		/* 821871B8h case    4:*/		return 0x821871BC;
		  /* 821871BCh */ case    5:  		/* b 140 */
		/* 821871BCh case    5:*/		return 0x82187248;
		/* 821871BCh case    5:*/		return 0x821871C0;
	}
	return 0x821871C0;
} // Block from 821871A8h-821871C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821871C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821871C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821871C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821871C0);
		  /* 821871C0h */ case    0:  		/* addi R11, R11, 29 */
		/* 821871C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D);
		/* 821871C0h case    0:*/		return 0x821871C4;
		  /* 821871C4h */ case    1:  		/* mulli R11, R11, 12 */
		/* 821871C4h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821871C4h case    1:*/		return 0x821871C8;
		  /* 821871C8h */ case    2:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821871C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821871C8h case    2:*/		return 0x821871CC;
		  /* 821871CCh */ case    3:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821871CCh case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821871CCh case    3:*/		return 0x821871D0;
		  /* 821871D0h */ case    4:  		/* cmplwi CR6, R11, 18 */
		/* 821871D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 821871D0h case    4:*/		return 0x821871D4;
		  /* 821871D4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821871D4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821871E0;  }
		/* 821871D4h case    5:*/		return 0x821871D8;
		  /* 821871D8h */ case    6:  		/* mr R29, R7 */
		/* 821871D8h case    6:*/		regs.R29 = regs.R7;
		/* 821871D8h case    6:*/		return 0x821871DC;
		  /* 821871DCh */ case    7:  		/* b 108 */
		/* 821871DCh case    7:*/		return 0x82187248;
		/* 821871DCh case    7:*/		return 0x821871E0;
	}
	return 0x821871E0;
} // Block from 821871C0h-821871E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821871E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821871E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821871E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821871E0);
		  /* 821871E0h */ case    0:  		/* lwz R11, <#[R30 + 544]> */
		/* 821871E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000220) );
		/* 821871E0h case    0:*/		return 0x821871E4;
		  /* 821871E4h */ case    1:  		/* mr R8, R21 */
		/* 821871E4h case    1:*/		regs.R8 = regs.R21;
		/* 821871E4h case    1:*/		return 0x821871E8;
		  /* 821871E8h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 821871E8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821871E8h case    2:*/		return 0x821871EC;
		  /* 821871ECh */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 821871ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x82187228;  }
		/* 821871ECh case    3:*/		return 0x821871F0;
		  /* 821871F0h */ case    4:  		/* lwz R9, <#[R30 + 536]> */
		/* 821871F0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000218) );
		/* 821871F0h case    4:*/		return 0x821871F4;
		  /* 821871F4h */ case    5:  		/* mr R10, R21 */
		/* 821871F4h case    5:*/		regs.R10 = regs.R21;
		/* 821871F4h case    5:*/		return 0x821871F8;
		  /* 821871F8h */ case    6:  		/* addi R11, R30, 348 */
		/* 821871F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x15C);
		/* 821871F8h case    6:*/		return 0x821871FC;
		  /* 821871FCh */ case    7:  		/* lwz R6, <#[R11 + 4]> */
		/* 821871FCh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821871FCh case    7:*/		return 0x82187200;
		  /* 82187200h */ case    8:  		/* cmplw CR6, R7, R6 */
		/* 82187200h case    8:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 82187200h case    8:*/		return 0x82187204;
		  /* 82187204h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 82187204h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82187218;  }
		/* 82187204h case    9:*/		return 0x82187208;
		  /* 82187208h */ case   10:  		/* lwz R6, <#[R11]> */
		/* 82187208h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82187208h case   10:*/		return 0x8218720C;
		  /* 8218720Ch */ case   11:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 8218720Ch case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 8218720Ch case   11:*/		return 0x82187210;
		  /* 82187210h */ case   12:  		/* slw R6, R17, R6 */
		/* 82187210h case   12:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R17,regs.R6);
		/* 82187210h case   12:*/		return 0x82187214;
		  /* 82187214h */ case   13:  		/* or R8, R6, R8 */
		/* 82187214h case   13:*/		cpu::op::or<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 82187214h case   13:*/		return 0x82187218;
	}
	return 0x82187218;
} // Block from 821871E0h-82187218h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82187218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187218);
		  /* 82187218h */ case    0:  		/* addi R10, R10, 1 */
		/* 82187218h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82187218h case    0:*/		return 0x8218721C;
		  /* 8218721Ch */ case    1:  		/* addi R11, R11, 12 */
		/* 8218721Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8218721Ch case    1:*/		return 0x82187220;
		  /* 82187220h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 82187220h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82187220h case    2:*/		return 0x82187224;
		  /* 82187224h */ case    3:  		/* bc 12, CR6_LT, -40 */
		/* 82187224h case    3:*/		if ( regs.CR[6].lt ) { return 0x821871FC;  }
		/* 82187224h case    3:*/		return 0x82187228;
	}
	return 0x82187228;
} // Block from 82187218h-82187228h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82187228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187228);
		  /* 82187228h */ case    0:  		/* rlwinm. R11, R8, 0, 17, 17 */
		/* 82187228h case    0:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R8);
		/* 82187228h case    0:*/		return 0x8218722C;
		  /* 8218722Ch */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8218722Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8218722Ch case    1:*/		return 0x82187230;
		  /* 82187230h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82187230h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218723C;  }
		/* 82187230h case    2:*/		return 0x82187234;
		  /* 82187234h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82187234h case    3:*/		if ( regs.CR[0].eq ) { return 0x82187244;  }
		/* 82187234h case    3:*/		return 0x82187238;
		  /* 82187238h */ case    4:  		/* mr R31, R4 */
		/* 82187238h case    4:*/		regs.R31 = regs.R4;
		/* 82187238h case    4:*/		return 0x8218723C;
	}
	return 0x8218723C;
} // Block from 82187228h-8218723Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218723Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218723C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218723C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218723C);
		  /* 8218723Ch */ case    0:  		/* mr R4, R7 */
		/* 8218723Ch case    0:*/		regs.R4 = regs.R7;
		/* 8218723Ch case    0:*/		return 0x82187240;
		  /* 82187240h */ case    1:  		/* b 8 */
		/* 82187240h case    1:*/		return 0x82187248;
		/* 82187240h case    1:*/		return 0x82187244;
	}
	return 0x82187244;
} // Block from 8218723Ch-82187244h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187244);
		  /* 82187244h */ case    0:  		/* mr R31, R7 */
		/* 82187244h case    0:*/		regs.R31 = regs.R7;
		/* 82187244h case    0:*/		return 0x82187248;
	}
	return 0x82187248;
} // Block from 82187244h-82187248h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82187248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187248);
		  /* 82187248h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 82187248h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 82187248h case    0:*/		return 0x8218724C;
		  /* 8218724Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8218724Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8218724Ch case    1:*/		return 0x82187250;
		  /* 82187250h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187250h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187250h case    2:*/		return 0x82187254;
		  /* 82187254h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82187254h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187264;  }
		/* 82187254h case    3:*/		return 0x82187258;
		  /* 82187258h */ case    4:  		/* mr R7, R11 */
		/* 82187258h case    4:*/		regs.R7 = regs.R11;
		/* 82187258h case    4:*/		return 0x8218725C;
		  /* 8218725Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218725Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218725Ch case    5:*/		return 0x82187260;
		  /* 82187260h */ case    6:  		/* bc 4, CR6_EQ, -232 */
		/* 82187260h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82187178;  }
		/* 82187260h case    6:*/		return 0x82187264;
	}
	return 0x82187264;
} // Block from 82187248h-82187264h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187264);
		  /* 82187264h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 82187264h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82187264h case    0:*/		return 0x82187268;
		  /* 82187268h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 82187268h case    1:*/		if ( regs.CR[6].eq ) { return 0x82187290;  }
		/* 82187268h case    1:*/		return 0x8218726C;
		  /* 8218726Ch */ case    2:  		/* li R5, 0 */
		/* 8218726Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218726Ch case    2:*/		return 0x82187270;
		  /* 82187270h */ case    3:  		/* mr R3, R30 */
		/* 82187270h case    3:*/		regs.R3 = regs.R30;
		/* 82187270h case    3:*/		return 0x82187274;
		  /* 82187274h */ case    4:  		/* bl -5836 */
		/* 82187274h case    4:*/		regs.LR = 0x82187278; return 0x82185BA8;
		/* 82187274h case    4:*/		return 0x82187278;
		  /* 82187278h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 82187278h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82187278h case    5:*/		return 0x8218727C;
		  /* 8218727Ch */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8218727Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82187290;  }
		/* 8218727Ch case    6:*/		return 0x82187280;
		  /* 82187280h */ case    7:  		/* li R5, 1 */
		/* 82187280h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82187280h case    7:*/		return 0x82187284;
		  /* 82187284h */ case    8:  		/* mr R4, R31 */
		/* 82187284h case    8:*/		regs.R4 = regs.R31;
		/* 82187284h case    8:*/		return 0x82187288;
		  /* 82187288h */ case    9:  		/* mr R3, R30 */
		/* 82187288h case    9:*/		regs.R3 = regs.R30;
		/* 82187288h case    9:*/		return 0x8218728C;
		  /* 8218728Ch */ case   10:  		/* bl -5860 */
		/* 8218728Ch case   10:*/		regs.LR = 0x82187290; return 0x82185BA8;
		/* 8218728Ch case   10:*/		return 0x82187290;
	}
	return 0x82187290;
} // Block from 82187264h-82187290h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82187290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187290);
		  /* 82187290h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82187290h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82187290h case    0:*/		return 0x82187294;
		  /* 82187294h */ case    1:  		/* bc 12, CR6_EQ, 276 */
		/* 82187294h case    1:*/		if ( regs.CR[6].eq ) { return 0x821873A8;  }
		/* 82187294h case    1:*/		return 0x82187298;
		  /* 82187298h */ case    2:  		/* li R5, 2 */
		/* 82187298h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82187298h case    2:*/		return 0x8218729C;
		  /* 8218729Ch */ case    3:  		/* mr R4, R29 */
		/* 8218729Ch case    3:*/		regs.R4 = regs.R29;
		/* 8218729Ch case    3:*/		return 0x821872A0;
		  /* 821872A0h */ case    4:  		/* b 256 */
		/* 821872A0h case    4:*/		return 0x821873A0;
		/* 821872A0h case    4:*/		return 0x821872A4;
	}
	return 0x821872A4;
} // Block from 82187290h-821872A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821872A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821872A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821872A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821872A4);
		  /* 821872A4h */ case    0:  		/* mr R29, R21 */
		/* 821872A4h case    0:*/		regs.R29 = regs.R21;
		/* 821872A4h case    0:*/		return 0x821872A8;
		  /* 821872A8h */ case    1:  		/* mr R28, R21 */
		/* 821872A8h case    1:*/		regs.R28 = regs.R21;
		/* 821872A8h case    1:*/		return 0x821872AC;
		  /* 821872ACh */ case    2:  		/* mr R27, R21 */
		/* 821872ACh case    2:*/		regs.R27 = regs.R21;
		/* 821872ACh case    2:*/		return 0x821872B0;
		  /* 821872B0h */ case    3:  		/* bc 4, CR0_EQ, 248 */
		/* 821872B0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821873A8;  }
		/* 821872B0h case    3:*/		return 0x821872B4;
		  /* 821872B4h */ case    4:  		/* mr R31, R11 */
		/* 821872B4h case    4:*/		regs.R31 = regs.R11;
		/* 821872B4h case    4:*/		return 0x821872B8;
		  /* 821872B8h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821872B8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821872B8h case    5:*/		return 0x821872BC;
		  /* 821872BCh */ case    6:  		/* bc 12, CR0_EQ, 236 */
		/* 821872BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821873A8;  }
		/* 821872BCh case    6:*/		return 0x821872C0;
		  /* 821872C0h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821872C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821872C0h case    7:*/		return 0x821872C4;
		  /* 821872C4h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821872C4h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821872C4h case    8:*/		return 0x821872C8;
		  /* 821872C8h */ case    9:  		/* cmplwi CR6, R11, 14464 */
		/* 821872C8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003880);
		/* 821872C8h case    9:*/		return 0x821872CC;
		  /* 821872CCh */ case   10:  		/* bc 4, CR6_EQ, 144 */
		/* 821872CCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x8218735C;  }
		/* 821872CCh case   10:*/		return 0x821872D0;
		  /* 821872D0h */ case   11:  		/* lwz R9, <#[R30 + 536]> */
		/* 821872D0h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000218) );
		/* 821872D0h case   11:*/		return 0x821872D4;
		  /* 821872D4h */ case   12:  		/* mr R10, R21 */
		/* 821872D4h case   12:*/		regs.R10 = regs.R21;
		/* 821872D4h case   12:*/		return 0x821872D8;
		  /* 821872D8h */ case   13:  		/* cmplwi CR6, R9, 0 */
		/* 821872D8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821872D8h case   13:*/		return 0x821872DC;
		  /* 821872DCh */ case   14:  		/* bc 12, CR6_EQ, 100 */
		/* 821872DCh case   14:*/		if ( regs.CR[6].eq ) { return 0x82187340;  }
		/* 821872DCh case   14:*/		return 0x821872E0;
		  /* 821872E0h */ case   15:  		/* addi R11, R30, 352 */
		/* 821872E0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x160);
		/* 821872E0h case   15:*/		return 0x821872E4;
		  /* 821872E4h */ case   16:  		/* lwz R8, <#[R11 - 4]> */
		/* 821872E4h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821872E4h case   16:*/		return 0x821872E8;
		  /* 821872E8h */ case   17:  		/* rlwinm. R8, R8, 0, 18, 18 */
		/* 821872E8h case   17:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R8,regs.R8);
		/* 821872E8h case   17:*/		return 0x821872EC;
		  /* 821872ECh */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 821872ECh case   18:*/		if ( regs.CR[0].eq ) { return 0x821872FC;  }
		/* 821872ECh case   18:*/		return 0x821872F0;
		  /* 821872F0h */ case   19:  		/* lwz R8, <#[R11]> */
		/* 821872F0h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821872F0h case   19:*/		return 0x821872F4;
		  /* 821872F4h */ case   20:  		/* cmplw CR6, R31, R8 */
		/* 821872F4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R8);
		/* 821872F4h case   20:*/		return 0x821872F8;
		  /* 821872F8h */ case   21:  		/* bc 12, CR6_EQ, 28 */
		/* 821872F8h case   21:*/		if ( regs.CR[6].eq ) { return 0x82187314;  }
		/* 821872F8h case   21:*/		return 0x821872FC;
	}
	return 0x821872FC;
} // Block from 821872A4h-821872FCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 821872FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821872FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821872FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821872FC);
		  /* 821872FCh */ case    0:  		/* lwz R8, <#[R30 + 536]> */
		/* 821872FCh case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000218) );
		/* 821872FCh case    0:*/		return 0x82187300;
		  /* 82187300h */ case    1:  		/* addi R10, R10, 1 */
		/* 82187300h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82187300h case    1:*/		return 0x82187304;
		  /* 82187304h */ case    2:  		/* addi R11, R11, 12 */
		/* 82187304h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 82187304h case    2:*/		return 0x82187308;
		  /* 82187308h */ case    3:  		/* cmplw CR6, R10, R8 */
		/* 82187308h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82187308h case    3:*/		return 0x8218730C;
		  /* 8218730Ch */ case    4:  		/* bc 12, CR6_LT, -40 */
		/* 8218730Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821872E4;  }
		/* 8218730Ch case    4:*/		return 0x82187310;
		  /* 82187310h */ case    5:  		/* b 48 */
		/* 82187310h case    5:*/		return 0x82187340;
		/* 82187310h case    5:*/		return 0x82187314;
	}
	return 0x82187314;
} // Block from 821872FCh-82187314h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187314);
		  /* 82187314h */ case    0:  		/* addi R11, R10, 29 */
		/* 82187314h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x1D);
		/* 82187314h case    0:*/		return 0x82187318;
		  /* 82187318h */ case    1:  		/* mulli R11, R11, 12 */
		/* 82187318h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 82187318h case    1:*/		return 0x8218731C;
		  /* 8218731Ch */ case    2:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8218731Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8218731Ch case    2:*/		return 0x82187320;
		  /* 82187320h */ case    3:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 82187320h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82187320h case    3:*/		return 0x82187324;
		  /* 82187324h */ case    4:  		/* cmplwi CR6, R11, 17 */
		/* 82187324h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 82187324h case    4:*/		return 0x82187328;
		  /* 82187328h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82187328h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82187334;  }
		/* 82187328h case    5:*/		return 0x8218732C;
		  /* 8218732Ch */ case    6:  		/* mr R28, R31 */
		/* 8218732Ch case    6:*/		regs.R28 = regs.R31;
		/* 8218732Ch case    6:*/		return 0x82187330;
		  /* 82187330h */ case    7:  		/* b 16 */
		/* 82187330h case    7:*/		return 0x82187340;
		/* 82187330h case    7:*/		return 0x82187334;
	}
	return 0x82187334;
} // Block from 82187314h-82187334h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82187334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187334);
		  /* 82187334h */ case    0:  		/* cmplwi CR6, R11, 18 */
		/* 82187334h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 82187334h case    0:*/		return 0x82187338;
		  /* 82187338h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82187338h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82187340;  }
		/* 82187338h case    1:*/		return 0x8218733C;
		  /* 8218733Ch */ case    2:  		/* mr R27, R31 */
		/* 8218733Ch case    2:*/		regs.R27 = regs.R31;
		/* 8218733Ch case    2:*/		return 0x82187340;
	}
	return 0x82187340;
} // Block from 82187334h-82187340h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82187340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187340);
		  /* 82187340h */ case    0:  		/* cmplw CR6, R10, R9 */
		/* 82187340h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82187340h case    0:*/		return 0x82187344;
		  /* 82187344h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82187344h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218735C;  }
		/* 82187344h case    1:*/		return 0x82187348;
		  /* 82187348h */ case    2:  		/* mr R5, R29 */
		/* 82187348h case    2:*/		regs.R5 = regs.R29;
		/* 82187348h case    2:*/		return 0x8218734C;
		  /* 8218734Ch */ case    3:  		/* mr R4, R31 */
		/* 8218734Ch case    3:*/		regs.R4 = regs.R31;
		/* 8218734Ch case    3:*/		return 0x82187350;
		  /* 82187350h */ case    4:  		/* mr R3, R30 */
		/* 82187350h case    4:*/		regs.R3 = regs.R30;
		/* 82187350h case    4:*/		return 0x82187354;
		  /* 82187354h */ case    5:  		/* bl -6060 */
		/* 82187354h case    5:*/		regs.LR = 0x82187358; return 0x82185BA8;
		/* 82187354h case    5:*/		return 0x82187358;
		  /* 82187358h */ case    6:  		/* addi R29, R29, 1 */
		/* 82187358h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82187358h case    6:*/		return 0x8218735C;
	}
	return 0x8218735C;
} // Block from 82187340h-8218735Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218735Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218735C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218735C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218735C);
		  /* 8218735Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8218735Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8218735Ch case    0:*/		return 0x82187360;
		  /* 82187360h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82187360h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82187360h case    1:*/		return 0x82187364;
		  /* 82187364h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187364h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187364h case    2:*/		return 0x82187368;
		  /* 82187368h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82187368h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187378;  }
		/* 82187368h case    3:*/		return 0x8218736C;
		  /* 8218736Ch */ case    4:  		/* mr R31, R11 */
		/* 8218736Ch case    4:*/		regs.R31 = regs.R11;
		/* 8218736Ch case    4:*/		return 0x82187370;
		  /* 82187370h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82187370h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187370h case    5:*/		return 0x82187374;
		  /* 82187374h */ case    6:  		/* bc 4, CR6_EQ, -180 */
		/* 82187374h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821872C0;  }
		/* 82187374h case    6:*/		return 0x82187378;
	}
	return 0x82187378;
} // Block from 8218735Ch-82187378h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187378);
		  /* 82187378h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82187378h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82187378h case    0:*/		return 0x8218737C;
		  /* 8218737Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8218737Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82187390;  }
		/* 8218737Ch case    1:*/		return 0x82187380;
		  /* 82187380h */ case    2:  		/* mr R5, R29 */
		/* 82187380h case    2:*/		regs.R5 = regs.R29;
		/* 82187380h case    2:*/		return 0x82187384;
		  /* 82187384h */ case    3:  		/* mr R4, R28 */
		/* 82187384h case    3:*/		regs.R4 = regs.R28;
		/* 82187384h case    3:*/		return 0x82187388;
		  /* 82187388h */ case    4:  		/* mr R3, R30 */
		/* 82187388h case    4:*/		regs.R3 = regs.R30;
		/* 82187388h case    4:*/		return 0x8218738C;
		  /* 8218738Ch */ case    5:  		/* bl -6116 */
		/* 8218738Ch case    5:*/		regs.LR = 0x82187390; return 0x82185BA8;
		/* 8218738Ch case    5:*/		return 0x82187390;
	}
	return 0x82187390;
} // Block from 82187378h-82187390h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187390);
		  /* 82187390h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82187390h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82187390h case    0:*/		return 0x82187394;
		  /* 82187394h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82187394h case    1:*/		if ( regs.CR[6].eq ) { return 0x821873A8;  }
		/* 82187394h case    1:*/		return 0x82187398;
		  /* 82187398h */ case    2:  		/* addi R5, R29, 1 */
		/* 82187398h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x1);
		/* 82187398h case    2:*/		return 0x8218739C;
		  /* 8218739Ch */ case    3:  		/* mr R4, R27 */
		/* 8218739Ch case    3:*/		regs.R4 = regs.R27;
		/* 8218739Ch case    3:*/		return 0x821873A0;
	}
	return 0x821873A0;
} // Block from 82187390h-821873A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821873A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821873A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821873A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821873A0);
		  /* 821873A0h */ case    0:  		/* mr R3, R30 */
		/* 821873A0h case    0:*/		regs.R3 = regs.R30;
		/* 821873A0h case    0:*/		return 0x821873A4;
		  /* 821873A4h */ case    1:  		/* bl -6140 */
		/* 821873A4h case    1:*/		regs.LR = 0x821873A8; return 0x82185BA8;
		/* 821873A4h case    1:*/		return 0x821873A8;
	}
	return 0x821873A8;
} // Block from 821873A0h-821873A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821873A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821873A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821873A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821873A8);
		  /* 821873A8h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 821873A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821873A8h case    0:*/		return 0x821873AC;
		  /* 821873ACh */ case    1:  		/* mr R26, R17 */
		/* 821873ACh case    1:*/		regs.R26 = regs.R17;
		/* 821873ACh case    1:*/		return 0x821873B0;
		  /* 821873B0h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 821873B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821873B0h case    2:*/		return 0x821873B4;
		  /* 821873B4h */ case    3:  		/* bc 4, CR6_GT, 436 */
		/* 821873B4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82187568;  }
		/* 821873B4h case    3:*/		return 0x821873B8;
		  /* 821873B8h */ case    4:  		/* mr R27, R19 */
		/* 821873B8h case    4:*/		regs.R27 = regs.R19;
		/* 821873B8h case    4:*/		return 0x821873BC;
		  /* 821873BCh */ case    5:  		/* lwz R29, <#[R27]> */
		/* 821873BCh case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000000) );
		/* 821873BCh case    5:*/		return 0x821873C0;
		  /* 821873C0h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 821873C0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821873C0h case    6:*/		return 0x821873C4;
		  /* 821873C4h */ case    7:  		/* bc 12, CR6_EQ, 420 */
		/* 821873C4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82187568;  }
		/* 821873C4h case    7:*/		return 0x821873C8;
		  /* 821873C8h */ case    8:  		/* lwz R11, <#[R29 + 8]> */
		/* 821873C8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821873C8h case    8:*/		return 0x821873CC;
		  /* 821873CCh */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821873CCh case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821873CCh case    9:*/		return 0x821873D0;
		  /* 821873D0h */ case   10:  		/* cmpwi CR6, R11, 19 */
		/* 821873D0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 821873D0h case   10:*/		return 0x821873D4;
		  /* 821873D4h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821873D4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821873E0;  }
		/* 821873D4h case   11:*/		return 0x821873D8;
		  /* 821873D8h */ case   12:  		/* cmpwi CR6, R11, 29 */
		/* 821873D8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 821873D8h case   12:*/		return 0x821873DC;
		  /* 821873DCh */ case   13:  		/* bc 4, CR6_EQ, 152 */
		/* 821873DCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x82187474;  }
		/* 821873DCh case   13:*/		return 0x821873E0;
	}
	return 0x821873E0;
} // Block from 821873A8h-821873E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821873E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821873E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821873E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821873E0);
		  /* 821873E0h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 821873E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821873E0h case    0:*/		return 0x821873E4;
		  /* 821873E4h */ case    1:  		/* mr R4, R21 */
		/* 821873E4h case    1:*/		regs.R4 = regs.R21;
		/* 821873E4h case    1:*/		return 0x821873E8;
		  /* 821873E8h */ case    2:  		/* oris R10, R11, 16 */
		/* 821873E8h case    2:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R11,0x10);
		/* 821873E8h case    2:*/		return 0x821873EC;
		  /* 821873ECh */ case    3:  		/* rlwinm R11, R10, 0, 16, 31 */
		/* 821873ECh case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R10);
		/* 821873ECh case    3:*/		return 0x821873F0;
		  /* 821873F0h */ case    4:  		/* stw R10, <#[R29 + 16]> */
		/* 821873F0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 821873F0h case    4:*/		return 0x821873F4;
		  /* 821873F4h */ case    5:  		/* rlwinm R10, R10, 16, 29, 31 */
		/* 821873F4h case    5:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R10);
		/* 821873F4h case    5:*/		return 0x821873F8;
		  /* 821873F8h */ case    6:  		/* add R10, R11, R10 */
		/* 821873F8h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821873F8h case    6:*/		return 0x821873FC;
		  /* 821873FCh */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821873FCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821873FCh case    7:*/		return 0x82187400;
	}
	return 0x82187400;
} // Block from 821873E0h-82187400h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82187400h
// Function '?CanMergeGroups@Compiler@D3DXShader@@AAA_NPAURegGroupInfo@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187400);
		  /* 82187400h */ case    0:  		/* bc 4, CR6_LT, 116 */
		/* 82187400h case    0:*/		if ( !regs.CR[6].lt ) { return 0x82187474;  }
		/* 82187400h case    0:*/		return 0x82187404;
		  /* 82187404h */ case    1:  		/* mulli R7, R11, 40 */
		/* 82187404h case    1:*/		cpu::op::mulli<0>(regs,&regs.R7,regs.R11,0x28);
		/* 82187404h case    1:*/		return 0x82187408;
		  /* 82187408h */ case    2:  		/* subf R5, R11, R10 */
		/* 82187408h case    2:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 82187408h case    2:*/		return 0x8218740C;
		  /* 8218740Ch */ case    3:  		/* mr R6, R21 */
		/* 8218740Ch case    3:*/		regs.R6 = regs.R21;
		/* 8218740Ch case    3:*/		return 0x82187410;
		  /* 82187410h */ case    4:  		/* mr R9, R21 */
		/* 82187410h case    4:*/		regs.R9 = regs.R21;
		/* 82187410h case    4:*/		return 0x82187414;
		  /* 82187414h */ case    5:  		/* cmplw CR6, R6, R4 */
		/* 82187414h case    5:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R4);
		/* 82187414h case    5:*/		return 0x82187418;
		  /* 82187418h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 82187418h case    6:*/		if ( regs.CR[6].eq ) { return 0x82187454;  }
		/* 82187418h case    6:*/		return 0x8218741C;
		  /* 8218741Ch */ case    7:  		/* lwz R10, <#[R30 + 676]> */
		/* 8218741Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A4) );
		/* 8218741Ch case    7:*/		return 0x82187420;
		  /* 82187420h */ case    8:  		/* lis R8, 4369 */
		/* 82187420h case    8:*/		cpu::op::lis<0>(regs,&regs.R8,0x1111);
		/* 82187420h case    8:*/		return 0x82187424;
		  /* 82187424h */ case    9:  		/* li R11, 4 */
		/* 82187424h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82187424h case    9:*/		return 0x82187428;
		  /* 82187428h */ case   10:  		/* ori R8, R8, 4369 */
		/* 82187428h case   10:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1111);
		/* 82187428h case   10:*/		return 0x8218742C;
		  /* 8218742Ch */ case   11:  		/* add R10, R10, R7 */
		/* 8218742Ch case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8218742Ch case   11:*/		return 0x82187430;
		  /* 82187430h */ case   12:  		/* rldimi R8, R8, 32, 0 */
		/* 82187430h case   12:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R8,regs.R8);
		/* 82187430h case   12:*/		return 0x82187434;
		  /* 82187434h */ case   13:  		/* addi R10, R10, 8 */
		/* 82187434h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82187434h case   13:*/		return 0x82187438;
		  /* 82187438h */ case   14:  		/* mtspr CTR, R11 */
		/* 82187438h case   14:*/		regs.CTR = regs.R11;
		/* 82187438h case   14:*/		return 0x8218743C;
		  /* 8218743Ch */ case   15:  		/* sld R8, R8, R9 */
		/* 8218743Ch case   15:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 8218743Ch case   15:*/		return 0x82187440;
		  /* 82187440h */ case   16:  		/* addi R11, R10, -8 */
		/* 82187440h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFF8);
		/* 82187440h case   16:*/		return 0x82187444;
		  /* 82187444h */ case   17:  		/* ld R10, <#[R11 + 8]> */
		/* 82187444h case   17:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82187444h case   17:*/		return 0x82187448;
		  /* 82187448h */ case   18:  		/* or R10, R10, R8 */
		/* 82187448h case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82187448h case   18:*/		return 0x8218744C;
		  /* 8218744Ch */ case   19:  		/* stdu R10, <#[R11 + 8]> */
		/* 8218744Ch case   19:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 8218744Ch case   19:*/		return 0x82187450;
		  /* 82187450h */ case   20:  		/* bc 16, CR0_LT, -12 */
		/* 82187450h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82187444;  }
		/* 82187450h case   20:*/		return 0x82187454;
	}
	return 0x82187454;
} // Block from 82187400h-82187454h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82187454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187454);
		  /* 82187454h */ case    0:  		/* addi R6, R6, 1 */
		/* 82187454h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82187454h case    0:*/		return 0x82187458;
		  /* 82187458h */ case    1:  		/* addi R9, R9, 1 */
		/* 82187458h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82187458h case    1:*/		return 0x8218745C;
		  /* 8218745Ch */ case    2:  		/* cmplwi CR6, R6, 4 */
		/* 8218745Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000004);
		/* 8218745Ch case    2:*/		return 0x82187460;
		  /* 82187460h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 82187460h case    3:*/		if ( regs.CR[6].lt ) { return 0x82187414;  }
		/* 82187460h case    3:*/		return 0x82187464;
		  /* 82187464h */ case    4:  		/* addic. R5, R5, -1 */
		/* 82187464h case    4:*/		cpu::op::addic<1>(regs,&regs.R5,regs.R5,0xFFFFFFFF);
		/* 82187464h case    4:*/		return 0x82187468;
		  /* 82187468h */ case    5:  		/* addi R4, R4, 1 */
		/* 82187468h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82187468h case    5:*/		return 0x8218746C;
		  /* 8218746Ch */ case    6:  		/* addi R7, R7, 40 */
		/* 8218746Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x28);
		/* 8218746Ch case    6:*/		return 0x82187470;
		  /* 82187470h */ case    7:  		/* bc 4, CR0_EQ, -100 */
		/* 82187470h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8218740C;  }
		/* 82187470h case    7:*/		return 0x82187474;
	}
	return 0x82187474;
} // Block from 82187454h-82187474h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82187474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187474);
		  /* 82187474h */ case    0:  		/* lwz R28, <#[R29 + 4]> */
		/* 82187474h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000004) );
		/* 82187474h case    0:*/		return 0x82187478;
		  /* 82187478h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 82187478h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82187478h case    1:*/		return 0x8218747C;
		  /* 8218747Ch */ case    2:  		/* bc 12, CR6_EQ, 216 */
		/* 8218747Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82187554;  }
		/* 8218747Ch case    2:*/		return 0x82187480;
		  /* 82187480h */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 82187480h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82187480h case    3:*/		return 0x82187484;
		  /* 82187484h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82187484h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187484h case    4:*/		return 0x82187488;
		  /* 82187488h */ case    5:  		/* bc 12, CR6_EQ, 196 */
		/* 82187488h case    5:*/		if ( regs.CR[6].eq ) { return 0x8218754C;  }
		/* 82187488h case    5:*/		return 0x8218748C;
		  /* 8218748Ch */ case    6:  		/* lwz R10, <#[R28]> */
		/* 8218748Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8218748Ch case    6:*/		return 0x82187490;
		  /* 82187490h */ case    7:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 82187490h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 82187490h case    7:*/		return 0x82187494;
		  /* 82187494h */ case    8:  		/* bc 12, CR0_EQ, 184 */
		/* 82187494h case    8:*/		if ( regs.CR[0].eq ) { return 0x8218754C;  }
		/* 82187494h case    8:*/		return 0x82187498;
		  /* 82187498h */ case    9:  		/* lwz R9, <#[R11 + 8]> */
		/* 82187498h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82187498h case    9:*/		return 0x8218749C;
		  /* 8218749Ch */ case   10:  		/* rlwinm R9, R9, 25, 25, 31 */
		/* 8218749Ch case   10:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R9,regs.R9);
		/* 8218749Ch case   10:*/		return 0x821874A0;
		  /* 821874A0h */ case   11:  		/* cmpwi CR6, R9, 74 */
		/* 821874A0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000004A);
		/* 821874A0h case   11:*/		return 0x821874A4;
		  /* 821874A4h */ case   12:  		/* bc 12, CR6_LT, 168 */
		/* 821874A4h case   12:*/		if ( regs.CR[6].lt ) { return 0x8218754C;  }
		/* 821874A4h case   12:*/		return 0x821874A8;
		  /* 821874A8h */ case   13:  		/* cmpwi CR6, R9, 79 */
		/* 821874A8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000004F);
		/* 821874A8h case   13:*/		return 0x821874AC;
		  /* 821874ACh */ case   14:  		/* bc 12, CR6_GT, 160 */
		/* 821874ACh case   14:*/		if ( regs.CR[6].gt ) { return 0x8218754C;  }
		/* 821874ACh case   14:*/		return 0x821874B0;
		  /* 821874B0h */ case   15:  		/* lwz R9, <#[R11 + 48]> */
		/* 821874B0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821874B0h case   15:*/		return 0x821874B4;
		  /* 821874B4h */ case   16:  		/* cmplw CR6, R28, R9 */
		/* 821874B4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R9);
		/* 821874B4h case   16:*/		return 0x821874B8;
		  /* 821874B8h */ case   17:  		/* bc 4, CR6_EQ, 148 */
		/* 821874B8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8218754C;  }
		/* 821874B8h case   17:*/		return 0x821874BC;
		  /* 821874BCh */ case   18:  		/* lwz R7, <#[R11 + 44]> */
		/* 821874BCh case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000002C) );
		/* 821874BCh case   18:*/		return 0x821874C0;
		  /* 821874C0h */ case   19:  		/* rlwinm R9, R10, 27, 30, 31 */
		/* 821874C0h case   19:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R9,regs.R10);
		/* 821874C0h case   19:*/		return 0x821874C4;
		  /* 821874C4h */ case   20:  		/* li R11, 4 */
		/* 821874C4h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821874C4h case   20:*/		return 0x821874C8;
		  /* 821874C8h */ case   21:  		/* lhz R10, <#[R29 + 18]> */
		/* 821874C8h case   21:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000012) );
		/* 821874C8h case   21:*/		return 0x821874CC;
		  /* 821874CCh */ case   22:  		/* lwz R8, <#[R30 + 676]> */
		/* 821874CCh case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000002A4) );
		/* 821874CCh case   22:*/		return 0x821874D0;
	}
	return 0x821874D0;
} // Block from 82187474h-821874D0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821874D0h
// Function '?BuildRegGroups@Compiler@D3DXShader@@AAA_N_NPAPAPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821874D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821874D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821874D0);
		  /* 821874D0h */ case    0:  		/* lis R6, 4369 */
		/* 821874D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R6,0x1111);
		/* 821874D0h case    0:*/		return 0x821874D4;
		  /* 821874D4h */ case    1:  		/* add R10, R9, R10 */
		/* 821874D4h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821874D4h case    1:*/		return 0x821874D8;
		  /* 821874D8h */ case    2:  		/* ori R9, R6, 4369 */
		/* 821874D8h case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R6,0x1111);
		/* 821874D8h case    2:*/		return 0x821874DC;
		  /* 821874DCh */ case    3:  		/* lwz R7, <#[R7]> */
		/* 821874DCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 821874DCh case    3:*/		return 0x821874E0;
		  /* 821874E0h */ case    4:  		/* mtspr CTR, R11 */
		/* 821874E0h case    4:*/		regs.CTR = regs.R11;
		/* 821874E0h case    4:*/		return 0x821874E4;
		  /* 821874E4h */ case    5:  		/* mulli R11, R10, 40 */
		/* 821874E4h case    5:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0x28);
		/* 821874E4h case    5:*/		return 0x821874E8;
		  /* 821874E8h */ case    6:  		/* add R10, R8, R11 */
		/* 821874E8h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R11);
		/* 821874E8h case    6:*/		return 0x821874EC;
		  /* 821874ECh */ case    7:  		/* rldimi R9, R9, 32, 0 */
		/* 821874ECh case    7:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R9,regs.R9);
		/* 821874ECh case    7:*/		return 0x821874F0;
		  /* 821874F0h */ case    8:  		/* rldicl R8, R7, 59, 62 */
		/* 821874F0h case    8:*/		cpu::op::rldicl<0,59,62>(regs,&regs.R8,regs.R7);
		/* 821874F0h case    8:*/		return 0x821874F4;
		  /* 821874F4h */ case    9:  		/* addi R10, R10, 8 */
		/* 821874F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821874F4h case    9:*/		return 0x821874F8;
		  /* 821874F8h */ case   10:  		/* sld R9, R9, R8 */
		/* 821874F8h case   10:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821874F8h case   10:*/		return 0x821874FC;
		  /* 821874FCh */ case   11:  		/* addi R10, R10, -8 */
		/* 821874FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFF8);
		/* 821874FCh case   11:*/		return 0x82187500;
		  /* 82187500h */ case   12:  		/* ld R8, <#[R10 + 8]> */
		/* 82187500h case   12:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 82187500h case   12:*/		return 0x82187504;
		  /* 82187504h */ case   13:  		/* or R8, R8, R9 */
		/* 82187504h case   13:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 82187504h case   13:*/		return 0x82187508;
		  /* 82187508h */ case   14:  		/* stdu R8, <#[R10 + 8]> */
		/* 82187508h case   14:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82187508h case   14:*/		return 0x8218750C;
		  /* 8218750Ch */ case   15:  		/* bc 16, CR0_LT, -12 */
		/* 8218750Ch case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82187500;  }
		/* 8218750Ch case   15:*/		return 0x82187510;
		  /* 82187510h */ case   16:  		/* lwz R10, <#[R30 + 676]> */
		/* 82187510h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A4) );
		/* 82187510h case   16:*/		return 0x82187514;
		  /* 82187514h */ case   17:  		/* add R3, R10, R11 */
		/* 82187514h case   17:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82187514h case   17:*/		return 0x82187518;
		  /* 82187518h */ case   18:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82187518h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82187518h case   18:*/		return 0x8218751C;
		  /* 8218751Ch */ case   19:  		/* lwz R11, <#[R11 + 792]> */
		/* 8218751Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000318) );
		/* 8218751Ch case   19:*/		return 0x82187520;
		  /* 82187520h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 82187520h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187520h case   20:*/		return 0x82187524;
		  /* 82187524h */ case   21:  		/* mr R31, R11 */
		/* 82187524h case   21:*/		regs.R31 = regs.R11;
		/* 82187524h case   21:*/		return 0x82187528;
		  /* 82187528h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 82187528h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82187530;  }
		/* 82187528h case   22:*/		return 0x8218752C;
		  /* 8218752Ch */ case   23:  		/* li R31, 32 */
		/* 8218752Ch case   23:*/		cpu::op::li<0>(regs,&regs.R31,0x20);
		/* 8218752Ch case   23:*/		return 0x82187530;
	}
	return 0x82187530;
} // Block from 821874D0h-82187530h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82187530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187530);
		  /* 82187530h */ case    0:  		/* bl -13072 */
		/* 82187530h case    0:*/		regs.LR = 0x82187534; return 0x82184220;
		/* 82187530h case    0:*/		return 0x82187534;
		  /* 82187534h */ case    1:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 82187534h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 82187534h case    1:*/		return 0x82187538;
		  /* 82187538h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 82187538h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82187538h case    2:*/		return 0x8218753C;
		  /* 8218753Ch */ case    3:  		/* bc 4, CR6_LT, 14348 */
		/* 8218753Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x8218AD48;  }
		/* 8218753Ch case    3:*/		return 0x82187540;
		  /* 82187540h */ case    4:  		/* lwz R11, <#[R29 + 16]> */
		/* 82187540h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82187540h case    4:*/		return 0x82187544;
		  /* 82187544h */ case    5:  		/* oris R11, R11, 16 */
		/* 82187544h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82187544h case    5:*/		return 0x82187548;
		  /* 82187548h */ case    6:  		/* stw R11, <#[R29 + 16]> */
		/* 82187548h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82187548h case    6:*/		return 0x8218754C;
	}
	return 0x8218754C;
} // Block from 82187530h-8218754Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218754Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218754C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218754C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218754C);
		  /* 8218754Ch */ case    0:  		/* lwz R28, <#[R28 + 8]> */
		/* 8218754Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000008) );
		/* 8218754Ch case    0:*/		return 0x82187550;
		  /* 82187550h */ case    1:  		/* b -216 */
		/* 82187550h case    1:*/		return 0x82187478;
		/* 82187550h case    1:*/		return 0x82187554;
	}
	return 0x82187554;
} // Block from 8218754Ch-82187554h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187554);
		  /* 82187554h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187554h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187554h case    0:*/		return 0x82187558;
		  /* 82187558h */ case    1:  		/* addi R26, R26, 1 */
		/* 82187558h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82187558h case    1:*/		return 0x8218755C;
		  /* 8218755Ch */ case    2:  		/* addi R27, R27, 4 */
		/* 8218755Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8218755Ch case    2:*/		return 0x82187560;
		  /* 82187560h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 82187560h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82187560h case    3:*/		return 0x82187564;
		  /* 82187564h */ case    4:  		/* bc 12, CR6_LT, -424 */
		/* 82187564h case    4:*/		if ( regs.CR[6].lt ) { return 0x821873BC;  }
		/* 82187564h case    4:*/		return 0x82187568;
	}
	return 0x82187568;
} // Block from 82187554h-82187568h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82187568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187568);
		  /* 82187568h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187568h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187568h case    0:*/		return 0x8218756C;
		  /* 8218756Ch */ case    1:  		/* li R5, 0 */
		/* 8218756Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218756Ch case    1:*/		return 0x82187570;
		  /* 82187570h */ case    2:  		/* mr R3, R30 */
		/* 82187570h case    2:*/		regs.R3 = regs.R30;
		/* 82187570h case    2:*/		return 0x82187574;
		  /* 82187574h */ case    3:  		/* addi R10, R11, 63 */
		/* 82187574h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3F);
		/* 82187574h case    3:*/		return 0x82187578;
		  /* 82187578h */ case    4:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 82187578h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 82187578h case    4:*/		return 0x8218757C;
		  /* 8218757Ch */ case    5:  		/* rlwinm R16, R10, 29, 3, 28 */
		/* 8218757Ch case    5:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R16,regs.R10);
		/* 8218757Ch case    5:*/		return 0x82187580;
		  /* 82187580h */ case    6:  		/* rlwinm R11, R16, 29, 3, 31 */
		/* 82187580h case    6:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R11,regs.R16);
		/* 82187580h case    6:*/		return 0x82187584;
		  /* 82187584h */ case    7:  		/* stw R16, <#[R1 + 128]> */
		/* 82187584h case    7:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000080) );
		/* 82187584h case    7:*/		return 0x82187588;
		  /* 82187588h */ case    8:  		/* stw R11, <#[R30 + 672]> */
		/* 82187588h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 82187588h case    8:*/		return 0x8218758C;
		  /* 8218758Ch */ case    9:  		/* bl -140628 */
		/* 8218758Ch case    9:*/		regs.LR = 0x82187590; return 0x82165038;
		/* 8218758Ch case    9:*/		return 0x82187590;
		  /* 82187590h */ case   10:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187590h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187590h case   10:*/		return 0x82187594;
		  /* 82187594h */ case   11:  		/* stw R3, <#[R30 + 680]> */
		/* 82187594h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000002A8) );
		/* 82187594h case   11:*/		return 0x82187598;
		  /* 82187598h */ case   12:  		/* mr R23, R17 */
		/* 82187598h case   12:*/		regs.R23 = regs.R17;
		/* 82187598h case   12:*/		return 0x8218759C;
		  /* 8218759Ch */ case   13:  		/* cmplwi CR6, R11, 1 */
		/* 8218759Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8218759Ch case   13:*/		return 0x821875A0;
		  /* 821875A0h */ case   14:  		/* bc 4, CR6_GT, 836 */
		/* 821875A0h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821878E4;  }
		/* 821875A0h case   14:*/		return 0x821875A4;
		  /* 821875A4h */ case   15:  		/* mr R22, R19 */
		/* 821875A4h case   15:*/		regs.R22 = regs.R19;
		/* 821875A4h case   15:*/		return 0x821875A8;
		  /* 821875A8h */ case   16:  		/* lwz R31, <#[R22]> */
		/* 821875A8h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x00000000) );
		/* 821875A8h case   16:*/		return 0x821875AC;
		  /* 821875ACh */ case   17:  		/* cmplwi CR6, R31, 0 */
		/* 821875ACh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821875ACh case   17:*/		return 0x821875B0;
		  /* 821875B0h */ case   18:  		/* bc 12, CR6_EQ, 820 */
		/* 821875B0h case   18:*/		if ( regs.CR[6].eq ) { return 0x821878E4;  }
		/* 821875B0h case   18:*/		return 0x821875B4;
		  /* 821875B4h */ case   19:  		/* mr R3, R31 */
		/* 821875B4h case   19:*/		regs.R3 = regs.R31;
		/* 821875B4h case   19:*/		return 0x821875B8;
		  /* 821875B8h */ case   20:  		/* bl -144504 */
		/* 821875B8h case   20:*/		regs.LR = 0x821875BC; return 0x82164140;
		/* 821875B8h case   20:*/		return 0x821875BC;
		  /* 821875BCh */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821875BCh case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821875BCh case   21:*/		return 0x821875C0;
		  /* 821875C0h */ case   22:  		/* bc 12, CR0_EQ, 784 */
		/* 821875C0h case   22:*/		if ( regs.CR[0].eq ) { return 0x821878D0;  }
		/* 821875C0h case   22:*/		return 0x821875C4;
		  /* 821875C4h */ case   23:  		/* lwz R11, <#[R31 + 8]> */
		/* 821875C4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821875C4h case   23:*/		return 0x821875C8;
		  /* 821875C8h */ case   24:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821875C8h case   24:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821875C8h case   24:*/		return 0x821875CC;
		  /* 821875CCh */ case   25:  		/* bc 4, CR0_EQ, 772 */
		/* 821875CCh case   25:*/		if ( !regs.CR[0].eq ) { return 0x821878D0;  }
		/* 821875CCh case   25:*/		return 0x821875D0;
		  /* 821875D0h */ case   26:  		/* li R5, 38 */
		/* 821875D0h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821875D0h case   26:*/		return 0x821875D4;
		  /* 821875D4h */ case   27:  		/* li R4, 8 */
		/* 821875D4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821875D4h case   27:*/		return 0x821875D8;
		  /* 821875D8h */ case   28:  		/* mr R3, R30 */
		/* 821875D8h case   28:*/		regs.R3 = regs.R30;
		/* 821875D8h case   28:*/		return 0x821875DC;
		  /* 821875DCh */ case   29:  		/* bl -142572 */
		/* 821875DCh case   29:*/		regs.LR = 0x821875E0; return 0x821648F0;
		/* 821875DCh case   29:*/		return 0x821875E0;
		  /* 821875E0h */ case   30:  		/* addi R24, R3, 4 */
		/* 821875E0h case   30:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x4);
		/* 821875E0h case   30:*/		return 0x821875E4;
		  /* 821875E4h */ case   31:  		/* ori R10, R3, 1 */
		/* 821875E4h case   31:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821875E4h case   31:*/		return 0x821875E8;
		  /* 821875E8h */ case   32:  		/* ori R11, R24, 1 */
		/* 821875E8h case   32:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R24,0x1);
		/* 821875E8h case   32:*/		return 0x821875EC;
		  /* 821875ECh */ case   33:  		/* mr R25, R3 */
		/* 821875ECh case   33:*/		regs.R25 = regs.R3;
		/* 821875ECh case   33:*/		return 0x821875F0;
		  /* 821875F0h */ case   34:  		/* stw R10, <#[R3 + 4]> */
		/* 821875F0h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821875F0h case   34:*/		return 0x821875F4;
		  /* 821875F4h */ case   35:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821875F4h case   35:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821875F4h case   35:*/		return 0x821875F8;
		  /* 821875F8h */ case   36:  		/* stw R11, <#[R3]> */
		/* 821875F8h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821875F8h case   36:*/		return 0x821875FC;
		  /* 821875FCh */ case   37:  		/* bc 4, CR0_EQ, 36 */
		/* 821875FCh case   37:*/		if ( !regs.CR[0].eq ) { return 0x82187620;  }
		/* 821875FCh case   37:*/		return 0x82187600;
		  /* 82187600h */ case   38:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82187600h case   38:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82187600h case   38:*/		return 0x82187604;
		  /* 82187604h */ case   39:  		/* addic. R3, R11, -4 */
		/* 82187604h case   39:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82187604h case   39:*/		return 0x82187608;
		  /* 82187608h */ case   40:  		/* bc 12, CR0_EQ, 24 */
		/* 82187608h case   40:*/		if ( regs.CR[0].eq ) { return 0x82187620;  }
		/* 82187608h case   40:*/		return 0x8218760C;
		  /* 8218760Ch */ case   41:  		/* lwz R11, <#[R3 + 8]> */
		/* 8218760Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8218760Ch case   41:*/		return 0x82187610;
		  /* 82187610h */ case   42:  		/* lwz R10, <#[R3 + 12]> */
		/* 82187610h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82187610h case   42:*/		return 0x82187614;
		  /* 82187614h */ case   43:  		/* addi R11, R11, 1 */
		/* 82187614h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82187614h case   43:*/		return 0x82187618;
		  /* 82187618h */ case   44:  		/* cmplw CR6, R11, R10 */
		/* 82187618h case   44:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82187618h case   44:*/		return 0x8218761C;
		  /* 8218761Ch */ case   45:  		/* bc 4, CR6_GT, 16 */
		/* 8218761Ch case   45:*/		if ( !regs.CR[6].gt ) { return 0x8218762C;  }
		/* 8218761Ch case   45:*/		return 0x82187620;
	}
	return 0x82187620;
} // Block from 82187568h-82187620h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82187620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187620);
		  /* 82187620h */ case    0:  		/* li R4, 1 */
		/* 82187620h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82187620h case    0:*/		return 0x82187624;
		  /* 82187624h */ case    1:  		/* mr R3, R25 */
		/* 82187624h case    1:*/		regs.R3 = regs.R25;
		/* 82187624h case    1:*/		return 0x82187628;
		  /* 82187628h */ case    2:  		/* bl 23200 */
		/* 82187628h case    2:*/		regs.LR = 0x8218762C; return 0x8218D0C8;
		/* 82187628h case    2:*/		return 0x8218762C;
	}
	return 0x8218762C;
} // Block from 82187620h-8218762Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218762Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218762C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218762C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218762C);
		  /* 8218762Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8218762Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8218762Ch case    0:*/		return 0x82187630;
		  /* 82187630h */ case    1:  		/* addi R10, R11, 4 */
		/* 82187630h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82187630h case    1:*/		return 0x82187634;
		  /* 82187634h */ case    2:  		/* addi R9, R11, 1 */
		/* 82187634h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82187634h case    2:*/		return 0x82187638;
		  /* 82187638h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82187638h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82187638h case    3:*/		return 0x8218763C;
		  /* 8218763Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8218763Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8218763Ch case    4:*/		return 0x82187640;
		  /* 82187640h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 82187640h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82187640h case    5:*/		return 0x82187644;
		  /* 82187644h */ case    6:  		/* lwz R11, <#[R24]> */
		/* 82187644h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82187644h case    6:*/		return 0x82187648;
		  /* 82187648h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187648h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187648h case    7:*/		return 0x8218764C;
		  /* 8218764Ch */ case    8:  		/* bc 4, CR0_EQ, 628 */
		/* 8218764Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821878C0;  }
		/* 8218764Ch case    8:*/		return 0x82187650;
		  /* 82187650h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 82187650h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187650h case    9:*/		return 0x82187654;
		  /* 82187654h */ case   10:  		/* bc 12, CR0_EQ, 620 */
		/* 82187654h case   10:*/		if ( regs.CR[0].eq ) { return 0x821878C0;  }
		/* 82187654h case   10:*/		return 0x82187658;
		  /* 82187658h */ case   11:  		/* lwz R11, <#[R25]> */
		/* 82187658h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82187658h case   11:*/		return 0x8218765C;
		  /* 8218765Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8218765Ch case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8218765Ch case   12:*/		return 0x82187660;
		  /* 82187660h */ case   13:  		/* addi R4, R11, -4 */
		/* 82187660h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82187660h case   13:*/		return 0x82187664;
		  /* 82187664h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187664h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187664h case   14:*/		return 0x82187668;
		  /* 82187668h */ case   15:  		/* addi R10, R11, 3 */
		/* 82187668h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82187668h case   15:*/		return 0x8218766C;
		  /* 8218766Ch */ case   16:  		/* addic. R11, R11, -1 */
		/* 8218766Ch case   16:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218766Ch case   16:*/		return 0x82187670;
		  /* 82187670h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82187670h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82187670h case   17:*/		return 0x82187674;
		  /* 82187674h */ case   18:  		/* lwzx R26, <#[R10 + R4]> */
		/* 82187674h case   18:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82187674h case   18:*/		return 0x82187678;
		  /* 82187678h */ case   19:  		/* stw R11, <#[R4 + 8]> */
		/* 82187678h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82187678h case   19:*/		return 0x8218767C;
		  /* 8218767Ch */ case   20:  		/* bc 4, CR0_EQ, 60 */
		/* 8218767Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x821876B8;  }
		/* 8218767Ch case   20:*/		return 0x82187680;
		  /* 82187680h */ case   21:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82187680h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82187680h case   21:*/		return 0x82187684;
		  /* 82187684h */ case   22:  		/* mr R3, R25 */
		/* 82187684h case   22:*/		regs.R3 = regs.R25;
		/* 82187684h case   22:*/		return 0x82187688;
		  /* 82187688h */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 82187688h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82187688h case   23:*/		return 0x8218768C;
		  /* 8218768Ch */ case   24:  		/* lwz R9, <#[R11]> */
		/* 8218768Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8218768Ch case   24:*/		return 0x82187690;
		  /* 82187690h */ case   25:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82187690h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82187690h case   25:*/		return 0x82187694;
		  /* 82187694h */ case   26:  		/* stw R9, <#[R10]> */
		/* 82187694h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82187694h case   26:*/		return 0x82187698;
		  /* 82187698h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 82187698h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82187698h case   27:*/		return 0x8218769C;
		  /* 8218769Ch */ case   28:  		/* lwz R11, <#[R11]> */
		/* 8218769Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218769Ch case   28:*/		return 0x821876A0;
		  /* 821876A0h */ case   29:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821876A0h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821876A0h case   29:*/		return 0x821876A4;
		  /* 821876A4h */ case   30:  		/* stw R10, <#[R11]> */
		/* 821876A4h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821876A4h case   30:*/		return 0x821876A8;
		  /* 821876A8h */ case   31:  		/* lwz R11, <#[R4 + 12]> */
		/* 821876A8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821876A8h case   31:*/		return 0x821876AC;
		  /* 821876ACh */ case   32:  		/* addi R11, R11, 4 */
		/* 821876ACh case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821876ACh case   32:*/		return 0x821876B0;
		  /* 821876B0h */ case   33:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821876B0h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821876B0h case   33:*/		return 0x821876B4;
		  /* 821876B4h */ case   34:  		/* bl -219308 */
		/* 821876B4h case   34:*/		regs.LR = 0x821876B8; return 0x82151E08;
		/* 821876B4h case   34:*/		return 0x821876B8;
	}
	return 0x821876B8;
} // Block from 8218762Ch-821876B8h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821876B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821876B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821876B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821876B8);
		  /* 821876B8h */ case    0:  		/* lwz R29, <#[R26 + 8]> */
		/* 821876B8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000008) );
		/* 821876B8h case    0:*/		return 0x821876BC;
		  /* 821876BCh */ case    1:  		/* rlwinm R11, R29, 0, 18, 24 */
		/* 821876BCh case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R29);
		/* 821876BCh case    1:*/		return 0x821876C0;
		  /* 821876C0h */ case    2:  		/* cmplwi CR6, R11, 14336 */
		/* 821876C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821876C0h case    2:*/		return 0x821876C4;
		  /* 821876C4h */ case    3:  		/* bc 4, CR6_EQ, 428 */
		/* 821876C4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82187870;  }
		/* 821876C4h case    3:*/		return 0x821876C8;
		  /* 821876C8h */ case    4:  		/* lwz R31, <#[R26]> */
		/* 821876C8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 821876C8h case    4:*/		return 0x821876CC;
		  /* 821876CCh */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 821876CCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821876CCh case    5:*/		return 0x821876D0;
		  /* 821876D0h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 821876D0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821876D0h case    6:*/		return 0x821876D4;
		  /* 821876D4h */ case    7:  		/* bc 4, CR6_EQ, -144 */
		/* 821876D4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82187644;  }
		/* 821876D4h case    7:*/		return 0x821876D8;
		  /* 821876D8h */ case    8:  		/* rlwinm. R11, R29, 0, 27, 30 */
		/* 821876D8h case    8:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R29);
		/* 821876D8h case    8:*/		return 0x821876DC;
		  /* 821876DCh */ case    9:  		/* bc 12, CR0_EQ, -152 */
		/* 821876DCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82187644;  }
		/* 821876DCh case    9:*/		return 0x821876E0;
		  /* 821876E0h */ case   10:  		/* lwz R27, <#[R31 + 12]> */
		/* 821876E0h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 821876E0h case   10:*/		return 0x821876E4;
		  /* 821876E4h */ case   11:  		/* lwz R11, <#[R27 + 8]> */
		/* 821876E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821876E4h case   11:*/		return 0x821876E8;
		  /* 821876E8h */ case   12:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821876E8h case   12:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821876E8h case   12:*/		return 0x821876EC;
		  /* 821876ECh */ case   13:  		/* bc 12, CR0_EQ, 260 */
		/* 821876ECh case   13:*/		if ( regs.CR[0].eq ) { return 0x821877F0;  }
		/* 821876ECh case   13:*/		return 0x821876F0;
		  /* 821876F0h */ case   14:  		/* lhz R28, <#[R26 + 18]> */
		/* 821876F0h case   14:*/		cpu::mem::load16z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000012) );
		/* 821876F0h case   14:*/		return 0x821876F4;
		  /* 821876F4h */ case   15:  		/* mr R3, R30 */
		/* 821876F4h case   15:*/		regs.R3 = regs.R30;
		/* 821876F4h case   15:*/		return 0x821876F8;
		  /* 821876F8h */ case   16:  		/* mr R4, R28 */
		/* 821876F8h case   16:*/		regs.R4 = regs.R28;
		/* 821876F8h case   16:*/		return 0x821876FC;
		  /* 821876FCh */ case   17:  		/* bl -15772 */
		/* 821876FCh case   17:*/		regs.LR = 0x82187700; return 0x82183960;
		/* 821876FCh case   17:*/		return 0x82187700;
		  /* 82187700h */ case   18:  		/* lwz R10, <#[R31]> */
		/* 82187700h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82187700h case   18:*/		return 0x82187704;
		  /* 82187704h */ case   19:  		/* lhz R11, <#[R27 + 18]> */
		/* 82187704h case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000012) );
		/* 82187704h case   19:*/		return 0x82187708;
		  /* 82187708h */ case   20:  		/* mr R29, R3 */
		/* 82187708h case   20:*/		regs.R29 = regs.R3;
		/* 82187708h case   20:*/		return 0x8218770C;
		  /* 8218770Ch */ case   21:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 8218770Ch case   21:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 8218770Ch case   21:*/		return 0x82187710;
		  /* 82187710h */ case   22:  		/* mr R3, R30 */
		/* 82187710h case   22:*/		regs.R3 = regs.R30;
		/* 82187710h case   22:*/		return 0x82187714;
		  /* 82187714h */ case   23:  		/* add R4, R10, R11 */
		/* 82187714h case   23:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82187714h case   23:*/		return 0x82187718;
		  /* 82187718h */ case   24:  		/* bl -15800 */
		/* 82187718h case   24:*/		regs.LR = 0x8218771C; return 0x82183960;
		/* 82187718h case   24:*/		return 0x8218771C;
		  /* 8218771Ch */ case   25:  		/* mr R31, R3 */
		/* 8218771Ch case   25:*/		regs.R31 = regs.R3;
		/* 8218771Ch case   25:*/		return 0x82187720;
		  /* 82187720h */ case   26:  		/* cmplw CR6, R3, R29 */
		/* 82187720h case   26:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82187720h case   26:*/		return 0x82187724;
		  /* 82187724h */ case   27:  		/* bc 12, CR6_EQ, 204 */
		/* 82187724h case   27:*/		if ( regs.CR[6].eq ) { return 0x821877F0;  }
		/* 82187724h case   27:*/		return 0x82187728;
		  /* 82187728h */ case   28:  		/* lwz R10, <#[R30 + 676]> */
		/* 82187728h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A4) );
		/* 82187728h case   28:*/		return 0x8218772C;
		  /* 8218772Ch */ case   29:  		/* mr R11, R21 */
		/* 8218772Ch case   29:*/		regs.R11 = regs.R21;
		/* 8218772Ch case   29:*/		return 0x82187730;
		  /* 82187730h */ case   30:  		/* mulli R9, R3, 5 */
		/* 82187730h case   30:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R3,0x5);
		/* 82187730h case   30:*/		return 0x82187734;
		  /* 82187734h */ case   31:  		/* mulli R8, R29, 5 */
		/* 82187734h case   31:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R29,0x5);
		/* 82187734h case   31:*/		return 0x82187738;
		  /* 82187738h */ case   32:  		/* add R7, R8, R11 */
		/* 82187738h case   32:*/		cpu::op::add<0>(regs,&regs.R7,regs.R8,regs.R11);
		/* 82187738h case   32:*/		return 0x8218773C;
		  /* 8218773Ch */ case   33:  		/* add R6, R9, R11 */
		/* 8218773Ch case   33:*/		cpu::op::add<0>(regs,&regs.R6,regs.R9,regs.R11);
		/* 8218773Ch case   33:*/		return 0x82187740;
		  /* 82187740h */ case   34:  		/* addi R7, R7, 1 */
		/* 82187740h case   34:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82187740h case   34:*/		return 0x82187744;
		  /* 82187744h */ case   35:  		/* addi R6, R6, 1 */
		/* 82187744h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82187744h case   35:*/		return 0x82187748;
		  /* 82187748h */ case   36:  		/* rlwinm R7, R7, 3, 0, 28 */
		/* 82187748h case   36:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R7);
		/* 82187748h case   36:*/		return 0x8218774C;
		  /* 8218774Ch */ case   37:  		/* rlwinm R6, R6, 3, 0, 28 */
		/* 8218774Ch case   37:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R6,regs.R6);
		/* 8218774Ch case   37:*/		return 0x82187750;
		  /* 82187750h */ case   38:  		/* ldx R7, <#[R7 + R10]> */
		/* 82187750h case   38:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82187750h case   38:*/		return 0x82187754;
		  /* 82187754h */ case   39:  		/* ldx R6, <#[R6 + R10]> */
		/* 82187754h case   39:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82187754h case   39:*/		return 0x82187758;
		  /* 82187758h */ case   40:  		/* nor R7, R7, R6 */
		/* 82187758h case   40:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82187758h case   40:*/		return 0x8218775C;
		  /* 8218775Ch */ case   41:  		/* cmpldi CR6, R7, 0 */
		/* 8218775Ch case   41:*/		cpu::op::cmpldi<6>(regs,regs.R7,0x00000000);
		/* 8218775Ch case   41:*/		return 0x82187760;
		  /* 82187760h */ case   42:  		/* bc 4, CR6_EQ, 344 */
		/* 82187760h case   42:*/		if ( !regs.CR[6].eq ) { return 0x821878B8;  }
		/* 82187760h case   42:*/		return 0x82187764;
		  /* 82187764h */ case   43:  		/* addi R11, R11, 1 */
		/* 82187764h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82187764h case   43:*/		return 0x82187768;
		  /* 82187768h */ case   44:  		/* cmpwi CR6, R11, 4 */
		/* 82187768h case   44:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82187768h case   44:*/		return 0x8218776C;
		  /* 8218776Ch */ case   45:  		/* bc 12, CR6_LT, -52 */
		/* 8218776Ch case   45:*/		if ( regs.CR[6].lt ) { return 0x82187738;  }
		/* 8218776Ch case   45:*/		return 0x82187770;
		  /* 82187770h */ case   46:  		/* mr R11, R21 */
		/* 82187770h case   46:*/		regs.R11 = regs.R21;
		/* 82187770h case   46:*/		return 0x82187774;
		  /* 82187774h */ case   47:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82187774h case   47:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82187774h case   47:*/		return 0x82187778;
		  /* 82187778h */ case   48:  		/* mr R3, R30 */
		/* 82187778h case   48:*/		regs.R3 = regs.R30;
		/* 82187778h case   48:*/		return 0x8218777C;
		  /* 8218777Ch */ case   49:  		/* bc 12, CR0_EQ, 13796 */
		/* 8218777Ch case   49:*/		if ( regs.CR[0].eq ) { return 0x8218AD60;  }
		/* 8218777Ch case   49:*/		return 0x82187780;
		  /* 82187780h */ case   50:  		/* mr R5, R31 */
		/* 82187780h case   50:*/		regs.R5 = regs.R31;
		/* 82187780h case   50:*/		return 0x82187784;
		  /* 82187784h */ case   51:  		/* mr R4, R28 */
		/* 82187784h case   51:*/		regs.R4 = regs.R28;
		/* 82187784h case   51:*/		return 0x82187788;
		  /* 82187788h */ case   52:  		/* bl -11560 */
		/* 82187788h case   52:*/		regs.LR = 0x8218778C; return 0x82184A60;
		/* 82187788h case   52:*/		return 0x8218778C;
		  /* 8218778Ch */ case   53:  		/* mr R5, R31 */
		/* 8218778Ch case   53:*/		regs.R5 = regs.R31;
		/* 8218778Ch case   53:*/		return 0x82187790;
		  /* 82187790h */ case   54:  		/* mr R4, R29 */
		/* 82187790h case   54:*/		regs.R4 = regs.R29;
		/* 82187790h case   54:*/		return 0x82187794;
		  /* 82187794h */ case   55:  		/* mr R3, R30 */
		/* 82187794h case   55:*/		regs.R3 = regs.R30;
		/* 82187794h case   55:*/		return 0x82187798;
		  /* 82187798h */ case   56:  		/* bl -11576 */
		/* 82187798h case   56:*/		regs.LR = 0x8218779C; return 0x82184A60;
		/* 82187798h case   56:*/		return 0x8218779C;
		  /* 8218779Ch */ case   57:  		/* lwz R11, <#[R24]> */
		/* 8218779Ch case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8218779Ch case   57:*/		return 0x821877A0;
		  /* 821877A0h */ case   58:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821877A0h case   58:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821877A0h case   58:*/		return 0x821877A4;
		  /* 821877A4h */ case   59:  		/* bc 4, CR0_EQ, 40 */
		/* 821877A4h case   59:*/		if ( !regs.CR[0].eq ) { return 0x821877CC;  }
		/* 821877A4h case   59:*/		return 0x821877A8;
		  /* 821877A8h */ case   60:  		/* lwz R11, <#[R25]> */
		/* 821877A8h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821877A8h case   60:*/		return 0x821877AC;
		  /* 821877ACh */ case   61:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821877ACh case   61:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821877ACh case   61:*/		return 0x821877B0;
		  /* 821877B0h */ case   62:  		/* addic. R3, R11, -4 */
		/* 821877B0h case   62:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821877B0h case   62:*/		return 0x821877B4;
		  /* 821877B4h */ case   63:  		/* bc 12, CR0_EQ, 24 */
		/* 821877B4h case   63:*/		if ( regs.CR[0].eq ) { return 0x821877CC;  }
		/* 821877B4h case   63:*/		return 0x821877B8;
		  /* 821877B8h */ case   64:  		/* lwz R11, <#[R3 + 8]> */
		/* 821877B8h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821877B8h case   64:*/		return 0x821877BC;
		  /* 821877BCh */ case   65:  		/* lwz R10, <#[R3 + 12]> */
		/* 821877BCh case   65:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821877BCh case   65:*/		return 0x821877C0;
		  /* 821877C0h */ case   66:  		/* addi R11, R11, 1 */
		/* 821877C0h case   66:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821877C0h case   66:*/		return 0x821877C4;
		  /* 821877C4h */ case   67:  		/* cmplw CR6, R11, R10 */
		/* 821877C4h case   67:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821877C4h case   67:*/		return 0x821877C8;
		  /* 821877C8h */ case   68:  		/* bc 4, CR6_GT, 16 */
		/* 821877C8h case   68:*/		if ( !regs.CR[6].gt ) { return 0x821877D8;  }
		/* 821877C8h case   68:*/		return 0x821877CC;
	}
	return 0x821877CC;
} // Block from 821876B8h-821877CCh (69 instructions)

//////////////////////////////////////////////////////
// Block at 821877CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821877CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821877CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821877CC);
		  /* 821877CCh */ case    0:  		/* li R4, 1 */
		/* 821877CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821877CCh case    0:*/		return 0x821877D0;
		  /* 821877D0h */ case    1:  		/* mr R3, R25 */
		/* 821877D0h case    1:*/		regs.R3 = regs.R25;
		/* 821877D0h case    1:*/		return 0x821877D4;
		  /* 821877D4h */ case    2:  		/* bl 22772 */
		/* 821877D4h case    2:*/		regs.LR = 0x821877D8; return 0x8218D0C8;
		/* 821877D4h case    2:*/		return 0x821877D8;
	}
	return 0x821877D8;
} // Block from 821877CCh-821877D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821877D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821877D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821877D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821877D8);
		  /* 821877D8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821877D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821877D8h case    0:*/		return 0x821877DC;
		  /* 821877DCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821877DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821877DCh case    1:*/		return 0x821877E0;
		  /* 821877E0h */ case    2:  		/* addi R9, R11, 1 */
		/* 821877E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821877E0h case    2:*/		return 0x821877E4;
		  /* 821877E4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821877E4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821877E4h case    3:*/		return 0x821877E8;
		  /* 821877E8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821877E8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821877E8h case    4:*/		return 0x821877EC;
		  /* 821877ECh */ case    5:  		/* stwx R27, <#[R11 + R3]> */
		/* 821877ECh case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821877ECh case    5:*/		return 0x821877F0;
	}
	return 0x821877F0;
} // Block from 821877D8h-821877F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821877F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821877F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821877F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821877F0);
		  /* 821877F0h */ case    0:  		/* lwz R29, <#[R26 + 4]> */
		/* 821877F0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000004) );
		/* 821877F0h case    0:*/		return 0x821877F4;
		  /* 821877F4h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821877F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821877F4h case    1:*/		return 0x821877F8;
		  /* 821877F8h */ case    2:  		/* bc 12, CR6_EQ, -436 */
		/* 821877F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82187644;  }
		/* 821877F8h case    2:*/		return 0x821877FC;
		  /* 821877FCh */ case    3:  		/* lwz R31, <#[R29 + 16]> */
		/* 821877FCh case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000010) );
		/* 821877FCh case    3:*/		return 0x82187800;
		  /* 82187800h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82187800h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82187800h case    4:*/		return 0x82187804;
		  /* 82187804h */ case    5:  		/* bc 12, CR6_EQ, 100 */
		/* 82187804h case    5:*/		if ( regs.CR[6].eq ) { return 0x82187868;  }
		/* 82187804h case    5:*/		return 0x82187808;
		  /* 82187808h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 82187808h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82187808h case    6:*/		return 0x8218780C;
		  /* 8218780Ch */ case    7:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8218780Ch case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8218780Ch case    7:*/		return 0x82187810;
		  /* 82187810h */ case    8:  		/* bc 12, CR0_EQ, 88 */
		/* 82187810h case    8:*/		if ( regs.CR[0].eq ) { return 0x82187868;  }
		/* 82187810h case    8:*/		return 0x82187814;
		  /* 82187814h */ case    9:  		/* lwz R11, <#[R24]> */
		/* 82187814h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82187814h case    9:*/		return 0x82187818;
		  /* 82187818h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82187818h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82187818h case   10:*/		return 0x8218781C;
		  /* 8218781Ch */ case   11:  		/* bc 4, CR0_EQ, 40 */
		/* 8218781Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82187844;  }
		/* 8218781Ch case   11:*/		return 0x82187820;
		  /* 82187820h */ case   12:  		/* lwz R11, <#[R25]> */
		/* 82187820h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82187820h case   12:*/		return 0x82187824;
		  /* 82187824h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82187824h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82187824h case   13:*/		return 0x82187828;
		  /* 82187828h */ case   14:  		/* addic. R3, R11, -4 */
		/* 82187828h case   14:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 82187828h case   14:*/		return 0x8218782C;
		  /* 8218782Ch */ case   15:  		/* bc 12, CR0_EQ, 24 */
		/* 8218782Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x82187844;  }
		/* 8218782Ch case   15:*/		return 0x82187830;
		  /* 82187830h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 82187830h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82187830h case   16:*/		return 0x82187834;
		  /* 82187834h */ case   17:  		/* lwz R10, <#[R3 + 12]> */
		/* 82187834h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82187834h case   17:*/		return 0x82187838;
		  /* 82187838h */ case   18:  		/* addi R11, R11, 1 */
		/* 82187838h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82187838h case   18:*/		return 0x8218783C;
		  /* 8218783Ch */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8218783Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8218783Ch case   19:*/		return 0x82187840;
		  /* 82187840h */ case   20:  		/* bc 4, CR6_GT, 16 */
		/* 82187840h case   20:*/		if ( !regs.CR[6].gt ) { return 0x82187850;  }
		/* 82187840h case   20:*/		return 0x82187844;
	}
	return 0x82187844;
} // Block from 821877F0h-82187844h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82187844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187844);
		  /* 82187844h */ case    0:  		/* li R4, 1 */
		/* 82187844h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82187844h case    0:*/		return 0x82187848;
		  /* 82187848h */ case    1:  		/* mr R3, R25 */
		/* 82187848h case    1:*/		regs.R3 = regs.R25;
		/* 82187848h case    1:*/		return 0x8218784C;
		  /* 8218784Ch */ case    2:  		/* bl 22652 */
		/* 8218784Ch case    2:*/		regs.LR = 0x82187850; return 0x8218D0C8;
		/* 8218784Ch case    2:*/		return 0x82187850;
	}
	return 0x82187850;
} // Block from 82187844h-82187850h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82187850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187850);
		  /* 82187850h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82187850h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82187850h case    0:*/		return 0x82187854;
		  /* 82187854h */ case    1:  		/* addi R10, R11, 4 */
		/* 82187854h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82187854h case    1:*/		return 0x82187858;
		  /* 82187858h */ case    2:  		/* addi R9, R11, 1 */
		/* 82187858h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82187858h case    2:*/		return 0x8218785C;
		  /* 8218785Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8218785Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8218785Ch case    3:*/		return 0x82187860;
		  /* 82187860h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 82187860h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82187860h case    4:*/		return 0x82187864;
		  /* 82187864h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 82187864h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82187864h case    5:*/		return 0x82187868;
	}
	return 0x82187868;
} // Block from 82187850h-82187868h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187868);
		  /* 82187868h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 82187868h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 82187868h case    0:*/		return 0x8218786C;
		  /* 8218786Ch */ case    1:  		/* b -120 */
		/* 8218786Ch case    1:*/		return 0x821877F4;
		/* 8218786Ch case    1:*/		return 0x82187870;
	}
	return 0x82187870;
} // Block from 82187868h-82187870h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187870);
		  /* 82187870h */ case    0:  		/* mr R3, R26 */
		/* 82187870h case    0:*/		regs.R3 = regs.R26;
		/* 82187870h case    0:*/		return 0x82187874;
		  /* 82187874h */ case    1:  		/* bl -145204 */
		/* 82187874h case    1:*/		regs.LR = 0x82187878; return 0x82164140;
		/* 82187874h case    1:*/		return 0x82187878;
		  /* 82187878h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82187878h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82187878h case    2:*/		return 0x8218787C;
		  /* 8218787Ch */ case    3:  		/* bc 12, CR0_EQ, -568 */
		/* 8218787Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82187644;  }
		/* 8218787Ch case    3:*/		return 0x82187880;
		  /* 82187880h */ case    4:  		/* rlwinm. R11, R29, 0, 0, 0 */
		/* 82187880h case    4:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R29);
		/* 82187880h case    4:*/		return 0x82187884;
		  /* 82187884h */ case    5:  		/* bc 4, CR0_EQ, -576 */
		/* 82187884h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82187644;  }
		/* 82187884h case    5:*/		return 0x82187888;
		  /* 82187888h */ case    6:  		/* rlwinm. R11, R29, 0, 10, 12 */
		/* 82187888h case    6:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R29);
		/* 82187888h case    6:*/		return 0x8218788C;
		  /* 8218788Ch */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8218788Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82187898;  }
		/* 8218788Ch case    7:*/		return 0x82187890;
		  /* 82187890h */ case    8:  		/* lwz R31, <#[R26 + 44]> */
		/* 82187890h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x0000002C) );
		/* 82187890h case    8:*/		return 0x82187894;
		  /* 82187894h */ case    9:  		/* b -444 */
		/* 82187894h case    9:*/		return 0x821876D8;
		/* 82187894h case    9:*/		return 0x82187898;
	}
	return 0x82187898;
} // Block from 82187870h-82187898h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82187898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187898);
		  /* 82187898h */ case    0:  		/* lwz R31, <#[R26]> */
		/* 82187898h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 82187898h case    0:*/		return 0x8218789C;
		  /* 8218789Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8218789Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218789Ch case    1:*/		return 0x821878A0;
		  /* 821878A0h */ case    2:  		/* bc 12, CR6_EQ, 13492 */
		/* 821878A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218AD54;  }
		/* 821878A0h case    2:*/		return 0x821878A4;
		  /* 821878A4h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 821878A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821878A4h case    3:*/		return 0x821878A8;
		  /* 821878A8h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821878A8h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821878A8h case    4:*/		return 0x821878AC;
		  /* 821878ACh */ case    5:  		/* bc 4, CR0_EQ, -468 */
		/* 821878ACh case    5:*/		if ( !regs.CR[0].eq ) { return 0x821876D8;  }
		/* 821878ACh case    5:*/		return 0x821878B0;
		  /* 821878B0h */ case    6:  		/* lwz R31, <#[R31 + 4]> */
		/* 821878B0h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821878B0h case    6:*/		return 0x821878B4;
		  /* 821878B4h */ case    7:  		/* b -24 */
		/* 821878B4h case    7:*/		return 0x8218789C;
		/* 821878B4h case    7:*/		return 0x821878B8;
	}
	return 0x821878B8;
} // Block from 82187898h-821878B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821878B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821878B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821878B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821878B8);
		  /* 821878B8h */ case    0:  		/* mr R11, R17 */
		/* 821878B8h case    0:*/		regs.R11 = regs.R17;
		/* 821878B8h case    0:*/		return 0x821878BC;
		  /* 821878BCh */ case    1:  		/* b -328 */
		/* 821878BCh case    1:*/		return 0x82187774;
		/* 821878BCh case    1:*/		return 0x821878C0;
	}
	return 0x821878C0;
} // Block from 821878B8h-821878C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821878C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821878C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821878C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821878C0);
		  /* 821878C0h */ case    0:  		/* lwz R10, <#[R30 + 976]> */
		/* 821878C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003D0) );
		/* 821878C0h case    0:*/		return 0x821878C4;
		  /* 821878C4h */ case    1:  		/* addi R11, R30, 972 */
		/* 821878C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821878C4h case    1:*/		return 0x821878C8;
		  /* 821878C8h */ case    2:  		/* stw R10, <#[R25]> */
		/* 821878C8h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821878C8h case    2:*/		return 0x821878CC;
		  /* 821878CCh */ case    3:  		/* stw R25, <#[R30 + 976]> */
		/* 821878CCh case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x000003D0) );
		/* 821878CCh case    3:*/		return 0x821878D0;
	}
	return 0x821878D0;
} // Block from 821878C0h-821878D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821878D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821878D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821878D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821878D0);
		  /* 821878D0h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 821878D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821878D0h case    0:*/		return 0x821878D4;
		  /* 821878D4h */ case    1:  		/* addi R23, R23, 1 */
		/* 821878D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821878D4h case    1:*/		return 0x821878D8;
		  /* 821878D8h */ case    2:  		/* addi R22, R22, 4 */
		/* 821878D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821878D8h case    2:*/		return 0x821878DC;
		  /* 821878DCh */ case    3:  		/* cmplw CR6, R23, R11 */
		/* 821878DCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821878DCh case    3:*/		return 0x821878E0;
		  /* 821878E0h */ case    4:  		/* bc 12, CR6_LT, -824 */
		/* 821878E0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821875A8;  }
		/* 821878E0h case    4:*/		return 0x821878E4;
	}
	return 0x821878E4;
} // Block from 821878D0h-821878E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821878E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821878E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821878E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821878E4);
		  /* 821878E4h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 821878E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821878E4h case    0:*/		return 0x821878E8;
		  /* 821878E8h */ case    1:  		/* mr R26, R17 */
		/* 821878E8h case    1:*/		regs.R26 = regs.R17;
		/* 821878E8h case    1:*/		return 0x821878EC;
		  /* 821878ECh */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 821878ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821878ECh case    2:*/		return 0x821878F0;
		  /* 821878F0h */ case    3:  		/* bc 4, CR6_GT, 296 */
		/* 821878F0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82187A18;  }
		/* 821878F0h case    3:*/		return 0x821878F4;
		  /* 821878F4h */ case    4:  		/* mr R27, R19 */
		/* 821878F4h case    4:*/		regs.R27 = regs.R19;
		/* 821878F4h case    4:*/		return 0x821878F8;
		  /* 821878F8h */ case    5:  		/* lwz R11, <#[R27]> */
		/* 821878F8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821878F8h case    5:*/		return 0x821878FC;
		  /* 821878FCh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821878FCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821878FCh case    6:*/		return 0x82187900;
		  /* 82187900h */ case    7:  		/* bc 12, CR6_EQ, 280 */
		/* 82187900h case    7:*/		if ( regs.CR[6].eq ) { return 0x82187A18;  }
		/* 82187900h case    7:*/		return 0x82187904;
		  /* 82187904h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 82187904h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82187904h case    8:*/		return 0x82187908;
		  /* 82187908h */ case    9:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 82187908h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 82187908h case    9:*/		return 0x8218790C;
		  /* 8218790Ch */ case   10:  		/* cmplwi CR6, R10, 14336 */
		/* 8218790Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8218790Ch case   10:*/		return 0x82187910;
		  /* 82187910h */ case   11:  		/* bc 4, CR6_EQ, 244 */
		/* 82187910h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82187A04;  }
		/* 82187910h case   11:*/		return 0x82187914;
		  /* 82187914h */ case   12:  		/* lwz R31, <#[R11]> */
		/* 82187914h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82187914h case   12:*/		return 0x82187918;
		  /* 82187918h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 82187918h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82187918h case   13:*/		return 0x8218791C;
		  /* 8218791Ch */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 8218791Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x82187930;  }
		/* 8218791Ch case   14:*/		return 0x82187920;
		  /* 82187920h */ case   15:  		/* lwz R10, <#[R31 + 4]> */
		/* 82187920h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82187920h case   15:*/		return 0x82187924;
		  /* 82187924h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 82187924h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82187924h case   16:*/		return 0x82187928;
		  /* 82187928h */ case   17:  		/* mr R10, R17 */
		/* 82187928h case   17:*/		regs.R10 = regs.R17;
		/* 82187928h case   17:*/		return 0x8218792C;
		  /* 8218792Ch */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 8218792Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x82187934;  }
		/* 8218792Ch case   18:*/		return 0x82187930;
	}
	return 0x82187930;
} // Block from 821878E4h-82187930h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82187930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187930);
		  /* 82187930h */ case    0:  		/* mr R10, R21 */
		/* 82187930h case    0:*/		regs.R10 = regs.R21;
		/* 82187930h case    0:*/		return 0x82187934;
	}
	return 0x82187934;
} // Block from 82187930h-82187934h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82187934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187934);
		  /* 82187934h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82187934h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82187934h case    0:*/		return 0x82187938;
		  /* 82187938h */ case    1:  		/* bc 4, CR0_EQ, 204 */
		/* 82187938h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82187A04;  }
		/* 82187938h case    1:*/		return 0x8218793C;
		  /* 8218793Ch */ case    2:  		/* lwz R10, <#[R11 + 28]> */
		/* 8218793Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 8218793Ch case    2:*/		return 0x82187940;
		  /* 82187940h */ case    3:  		/* lwz R10, <#[R10 + 48]> */
		/* 82187940h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 82187940h case    3:*/		return 0x82187944;
		  /* 82187944h */ case    4:  		/* rlwinm. R9, R10, 11, 31, 31 */
		/* 82187944h case    4:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R9,regs.R10);
		/* 82187944h case    4:*/		return 0x82187948;
		  /* 82187948h */ case    5:  		/* bc 4, CR0_EQ, 188 */
		/* 82187948h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82187A04;  }
		/* 82187948h case    5:*/		return 0x8218794C;
		  /* 8218794Ch */ case    6:  		/* rlwinm. R10, R10, 12, 31, 31 */
		/* 8218794Ch case    6:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R10,regs.R10);
		/* 8218794Ch case    6:*/		return 0x82187950;
		  /* 82187950h */ case    7:  		/* bc 4, CR0_EQ, 180 */
		/* 82187950h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82187A04;  }
		/* 82187950h case    7:*/		return 0x82187954;
		  /* 82187954h */ case    8:  		/* lhz R28, <#[R11 + 18]> */
		/* 82187954h case    8:*/		cpu::mem::load16z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000012) );
		/* 82187954h case    8:*/		return 0x82187958;
		  /* 82187958h */ case    9:  		/* mr R3, R30 */
		/* 82187958h case    9:*/		regs.R3 = regs.R30;
		/* 82187958h case    9:*/		return 0x8218795C;
		  /* 8218795Ch */ case   10:  		/* lwz R29, <#[R31 + 12]> */
		/* 8218795Ch case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 8218795Ch case   10:*/		return 0x82187960;
		  /* 82187960h */ case   11:  		/* mr R4, R28 */
		/* 82187960h case   11:*/		regs.R4 = regs.R28;
		/* 82187960h case   11:*/		return 0x82187964;
		  /* 82187964h */ case   12:  		/* bl -16388 */
		/* 82187964h case   12:*/		regs.LR = 0x82187968; return 0x82183960;
		/* 82187964h case   12:*/		return 0x82187968;
		  /* 82187968h */ case   13:  		/* lwz R10, <#[R31]> */
		/* 82187968h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82187968h case   13:*/		return 0x8218796C;
		  /* 8218796Ch */ case   14:  		/* lhz R11, <#[R29 + 18]> */
		/* 8218796Ch case   14:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000012) );
		/* 8218796Ch case   14:*/		return 0x82187970;
		  /* 82187970h */ case   15:  		/* mr R29, R3 */
		/* 82187970h case   15:*/		regs.R29 = regs.R3;
		/* 82187970h case   15:*/		return 0x82187974;
		  /* 82187974h */ case   16:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 82187974h case   16:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 82187974h case   16:*/		return 0x82187978;
		  /* 82187978h */ case   17:  		/* mr R3, R30 */
		/* 82187978h case   17:*/		regs.R3 = regs.R30;
		/* 82187978h case   17:*/		return 0x8218797C;
		  /* 8218797Ch */ case   18:  		/* add R4, R10, R11 */
		/* 8218797Ch case   18:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8218797Ch case   18:*/		return 0x82187980;
		  /* 82187980h */ case   19:  		/* bl -16416 */
		/* 82187980h case   19:*/		regs.LR = 0x82187984; return 0x82183960;
		/* 82187980h case   19:*/		return 0x82187984;
		  /* 82187984h */ case   20:  		/* mr R31, R3 */
		/* 82187984h case   20:*/		regs.R31 = regs.R3;
		/* 82187984h case   20:*/		return 0x82187988;
		  /* 82187988h */ case   21:  		/* cmplw CR6, R3, R29 */
		/* 82187988h case   21:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82187988h case   21:*/		return 0x8218798C;
		  /* 8218798Ch */ case   22:  		/* bc 12, CR6_EQ, 120 */
		/* 8218798Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x82187A04;  }
		/* 8218798Ch case   22:*/		return 0x82187990;
		  /* 82187990h */ case   23:  		/* lwz R10, <#[R30 + 676]> */
		/* 82187990h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A4) );
		/* 82187990h case   23:*/		return 0x82187994;
		  /* 82187994h */ case   24:  		/* mr R11, R21 */
		/* 82187994h case   24:*/		regs.R11 = regs.R21;
		/* 82187994h case   24:*/		return 0x82187998;
		  /* 82187998h */ case   25:  		/* mulli R9, R3, 5 */
		/* 82187998h case   25:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R3,0x5);
		/* 82187998h case   25:*/		return 0x8218799C;
		  /* 8218799Ch */ case   26:  		/* mulli R8, R29, 5 */
		/* 8218799Ch case   26:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R29,0x5);
		/* 8218799Ch case   26:*/		return 0x821879A0;
		  /* 821879A0h */ case   27:  		/* add R7, R8, R11 */
		/* 821879A0h case   27:*/		cpu::op::add<0>(regs,&regs.R7,regs.R8,regs.R11);
		/* 821879A0h case   27:*/		return 0x821879A4;
		  /* 821879A4h */ case   28:  		/* add R6, R9, R11 */
		/* 821879A4h case   28:*/		cpu::op::add<0>(regs,&regs.R6,regs.R9,regs.R11);
		/* 821879A4h case   28:*/		return 0x821879A8;
		  /* 821879A8h */ case   29:  		/* addi R7, R7, 1 */
		/* 821879A8h case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821879A8h case   29:*/		return 0x821879AC;
		  /* 821879ACh */ case   30:  		/* addi R6, R6, 1 */
		/* 821879ACh case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821879ACh case   30:*/		return 0x821879B0;
		  /* 821879B0h */ case   31:  		/* rlwinm R7, R7, 3, 0, 28 */
		/* 821879B0h case   31:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R7);
		/* 821879B0h case   31:*/		return 0x821879B4;
		  /* 821879B4h */ case   32:  		/* rlwinm R6, R6, 3, 0, 28 */
		/* 821879B4h case   32:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R6,regs.R6);
		/* 821879B4h case   32:*/		return 0x821879B8;
		  /* 821879B8h */ case   33:  		/* ldx R7, <#[R7 + R10]> */
		/* 821879B8h case   33:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 821879B8h case   33:*/		return 0x821879BC;
		  /* 821879BCh */ case   34:  		/* ldx R6, <#[R6 + R10]> */
		/* 821879BCh case   34:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 821879BCh case   34:*/		return 0x821879C0;
		  /* 821879C0h */ case   35:  		/* nor R7, R7, R6 */
		/* 821879C0h case   35:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821879C0h case   35:*/		return 0x821879C4;
		  /* 821879C4h */ case   36:  		/* cmpldi CR6, R7, 0 */
		/* 821879C4h case   36:*/		cpu::op::cmpldi<6>(regs,regs.R7,0x00000000);
		/* 821879C4h case   36:*/		return 0x821879C8;
		  /* 821879C8h */ case   37:  		/* bc 4, CR6_EQ, 428 */
		/* 821879C8h case   37:*/		if ( !regs.CR[6].eq ) { return 0x82187B74;  }
		/* 821879C8h case   37:*/		return 0x821879CC;
		  /* 821879CCh */ case   38:  		/* addi R11, R11, 1 */
		/* 821879CCh case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821879CCh case   38:*/		return 0x821879D0;
		  /* 821879D0h */ case   39:  		/* cmpwi CR6, R11, 4 */
		/* 821879D0h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 821879D0h case   39:*/		return 0x821879D4;
		  /* 821879D4h */ case   40:  		/* bc 12, CR6_LT, -52 */
		/* 821879D4h case   40:*/		if ( regs.CR[6].lt ) { return 0x821879A0;  }
		/* 821879D4h case   40:*/		return 0x821879D8;
		  /* 821879D8h */ case   41:  		/* mr R11, R21 */
		/* 821879D8h case   41:*/		regs.R11 = regs.R21;
		/* 821879D8h case   41:*/		return 0x821879DC;
		  /* 821879DCh */ case   42:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821879DCh case   42:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821879DCh case   42:*/		return 0x821879E0;
		  /* 821879E0h */ case   43:  		/* bc 12, CR0_EQ, 36 */
		/* 821879E0h case   43:*/		if ( regs.CR[0].eq ) { return 0x82187A04;  }
		/* 821879E0h case   43:*/		return 0x821879E4;
		  /* 821879E4h */ case   44:  		/* mr R5, R31 */
		/* 821879E4h case   44:*/		regs.R5 = regs.R31;
		/* 821879E4h case   44:*/		return 0x821879E8;
		  /* 821879E8h */ case   45:  		/* mr R4, R28 */
		/* 821879E8h case   45:*/		regs.R4 = regs.R28;
		/* 821879E8h case   45:*/		return 0x821879EC;
		  /* 821879ECh */ case   46:  		/* mr R3, R30 */
		/* 821879ECh case   46:*/		regs.R3 = regs.R30;
		/* 821879ECh case   46:*/		return 0x821879F0;
		  /* 821879F0h */ case   47:  		/* bl -12176 */
		/* 821879F0h case   47:*/		regs.LR = 0x821879F4; return 0x82184A60;
		/* 821879F0h case   47:*/		return 0x821879F4;
		  /* 821879F4h */ case   48:  		/* mr R5, R31 */
		/* 821879F4h case   48:*/		regs.R5 = regs.R31;
		/* 821879F4h case   48:*/		return 0x821879F8;
		  /* 821879F8h */ case   49:  		/* mr R4, R29 */
		/* 821879F8h case   49:*/		regs.R4 = regs.R29;
		/* 821879F8h case   49:*/		return 0x821879FC;
		  /* 821879FCh */ case   50:  		/* mr R3, R30 */
		/* 821879FCh case   50:*/		regs.R3 = regs.R30;
		/* 821879FCh case   50:*/		return 0x82187A00;
		  /* 82187A00h */ case   51:  		/* bl -12192 */
		/* 82187A00h case   51:*/		regs.LR = 0x82187A04; return 0x82184A60;
		/* 82187A00h case   51:*/		return 0x82187A04;
	}
	return 0x82187A04;
} // Block from 82187934h-82187A04h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82187A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187A04);
		  /* 82187A04h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187A04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187A04h case    0:*/		return 0x82187A08;
		  /* 82187A08h */ case    1:  		/* addi R26, R26, 1 */
		/* 82187A08h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82187A08h case    1:*/		return 0x82187A0C;
		  /* 82187A0Ch */ case    2:  		/* addi R27, R27, 4 */
		/* 82187A0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82187A0Ch case    2:*/		return 0x82187A10;
		  /* 82187A10h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 82187A10h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82187A10h case    3:*/		return 0x82187A14;
		  /* 82187A14h */ case    4:  		/* bc 12, CR6_LT, -284 */
		/* 82187A14h case    4:*/		if ( regs.CR[6].lt ) { return 0x821878F8;  }
		/* 82187A14h case    4:*/		return 0x82187A18;
	}
	return 0x82187A18;
} // Block from 82187A04h-82187A18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82187A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187A18);
		  /* 82187A18h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187A18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187A18h case    0:*/		return 0x82187A1C;
		  /* 82187A1Ch */ case    1:  		/* mr R18, R17 */
		/* 82187A1Ch case    1:*/		regs.R18 = regs.R17;
		/* 82187A1Ch case    1:*/		return 0x82187A20;
		  /* 82187A20h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 82187A20h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82187A20h case    2:*/		return 0x82187A24;
		  /* 82187A24h */ case    3:  		/* bc 4, CR6_GT, 760 */
		/* 82187A24h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82187D1C;  }
		/* 82187A24h case    3:*/		return 0x82187A28;
		  /* 82187A28h */ case    4:  		/* lwz R20, <#[R19]> */
		/* 82187A28h case    4:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R19 + 0x00000000) );
		/* 82187A28h case    4:*/		return 0x82187A2C;
		  /* 82187A2Ch */ case    5:  		/* cmplwi CR6, R20, 0 */
		/* 82187A2Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82187A2Ch case    5:*/		return 0x82187A30;
		  /* 82187A30h */ case    6:  		/* bc 12, CR6_EQ, 748 */
		/* 82187A30h case    6:*/		if ( regs.CR[6].eq ) { return 0x82187D1C;  }
		/* 82187A30h case    6:*/		return 0x82187A34;
		  /* 82187A34h */ case    7:  		/* lwz R11, <#[R20 + 8]> */
		/* 82187A34h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 82187A34h case    7:*/		return 0x82187A38;
		  /* 82187A38h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82187A38h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82187A38h case    8:*/		return 0x82187A3C;
		  /* 82187A3Ch */ case    9:  		/* cmplwi CR6, R11, 14336 */
		/* 82187A3Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 82187A3Ch case    9:*/		return 0x82187A40;
		  /* 82187A40h */ case   10:  		/* bc 4, CR6_EQ, 708 */
		/* 82187A40h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82187D04;  }
		/* 82187A40h case   10:*/		return 0x82187A44;
		  /* 82187A44h */ case   11:  		/* lwz R11, <#[R20]> */
		/* 82187A44h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82187A44h case   11:*/		return 0x82187A48;
		  /* 82187A48h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82187A48h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187A48h case   12:*/		return 0x82187A4C;
		  /* 82187A4Ch */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 82187A4Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82187A60;  }
		/* 82187A4Ch case   13:*/		return 0x82187A50;
		  /* 82187A50h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187A50h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187A50h case   14:*/		return 0x82187A54;
		  /* 82187A54h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82187A54h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187A54h case   15:*/		return 0x82187A58;
		  /* 82187A58h */ case   16:  		/* mr R11, R17 */
		/* 82187A58h case   16:*/		regs.R11 = regs.R17;
		/* 82187A58h case   16:*/		return 0x82187A5C;
		  /* 82187A5Ch */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 82187A5Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x82187A64;  }
		/* 82187A5Ch case   17:*/		return 0x82187A60;
	}
	return 0x82187A60;
} // Block from 82187A18h-82187A60h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82187A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187A60);
		  /* 82187A60h */ case    0:  		/* mr R11, R21 */
		/* 82187A60h case    0:*/		regs.R11 = regs.R21;
		/* 82187A60h case    0:*/		return 0x82187A64;
	}
	return 0x82187A64;
} // Block from 82187A60h-82187A64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82187A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187A64);
		  /* 82187A64h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82187A64h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82187A64h case    0:*/		return 0x82187A68;
		  /* 82187A68h */ case    1:  		/* bc 12, CR0_EQ, 668 */
		/* 82187A68h case    1:*/		if ( regs.CR[0].eq ) { return 0x82187D04;  }
		/* 82187A68h case    1:*/		return 0x82187A6C;
		  /* 82187A6Ch */ case    2:  		/* lwz R11, <#[R20 + 28]> */
		/* 82187A6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 82187A6Ch case    2:*/		return 0x82187A70;
		  /* 82187A70h */ case    3:  		/* mr R25, R21 */
		/* 82187A70h case    3:*/		regs.R25 = regs.R21;
		/* 82187A70h case    3:*/		return 0x82187A74;
		  /* 82187A74h */ case    4:  		/* mr R26, R21 */
		/* 82187A74h case    4:*/		regs.R26 = regs.R21;
		/* 82187A74h case    4:*/		return 0x82187A78;
		  /* 82187A78h */ case    5:  		/* lwz R11, <#[R11 + 20]> */
		/* 82187A78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82187A78h case    5:*/		return 0x82187A7C;
		  /* 82187A7Ch */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187A7Ch case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187A7Ch case    6:*/		return 0x82187A80;
		  /* 82187A80h */ case    7:  		/* bc 4, CR0_EQ, 644 */
		/* 82187A80h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82187D04;  }
		/* 82187A80h case    7:*/		return 0x82187A84;
		  /* 82187A84h */ case    8:  		/* mr R22, R11 */
		/* 82187A84h case    8:*/		regs.R22 = regs.R11;
		/* 82187A84h case    8:*/		return 0x82187A88;
		  /* 82187A88h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 82187A88h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187A88h case    9:*/		return 0x82187A8C;
		  /* 82187A8Ch */ case   10:  		/* bc 12, CR0_EQ, 632 */
		/* 82187A8Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x82187D04;  }
		/* 82187A8Ch case   10:*/		return 0x82187A90;
		  /* 82187A90h */ case   11:  		/* cmplw CR6, R20, R22 */
		/* 82187A90h case   11:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R22);
		/* 82187A90h case   11:*/		return 0x82187A94;
		  /* 82187A94h */ case   12:  		/* bc 12, CR6_EQ, 568 */
		/* 82187A94h case   12:*/		if ( regs.CR[6].eq ) { return 0x82187CCC;  }
		/* 82187A94h case   12:*/		return 0x82187A98;
		  /* 82187A98h */ case   13:  		/* lwz R11, <#[R22 + 8]> */
		/* 82187A98h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 82187A98h case   13:*/		return 0x82187A9C;
		  /* 82187A9Ch */ case   14:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82187A9Ch case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82187A9Ch case   14:*/		return 0x82187AA0;
		  /* 82187AA0h */ case   15:  		/* cmplwi CR6, R11, 14336 */
		/* 82187AA0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 82187AA0h case   15:*/		return 0x82187AA4;
		  /* 82187AA4h */ case   16:  		/* bc 4, CR6_EQ, 552 */
		/* 82187AA4h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82187CCC;  }
		/* 82187AA4h case   16:*/		return 0x82187AA8;
		  /* 82187AA8h */ case   17:  		/* lwz R11, <#[R22]> */
		/* 82187AA8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82187AA8h case   17:*/		return 0x82187AAC;
		  /* 82187AACh */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82187AACh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187AACh case   18:*/		return 0x82187AB0;
		  /* 82187AB0h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 82187AB0h case   19:*/		if ( regs.CR[6].eq ) { return 0x82187AC4;  }
		/* 82187AB0h case   19:*/		return 0x82187AB4;
		  /* 82187AB4h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187AB4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187AB4h case   20:*/		return 0x82187AB8;
		  /* 82187AB8h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82187AB8h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187AB8h case   21:*/		return 0x82187ABC;
		  /* 82187ABCh */ case   22:  		/* mr R11, R17 */
		/* 82187ABCh case   22:*/		regs.R11 = regs.R17;
		/* 82187ABCh case   22:*/		return 0x82187AC0;
		  /* 82187AC0h */ case   23:  		/* bc 4, CR6_EQ, 8 */
		/* 82187AC0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82187AC8;  }
		/* 82187AC0h case   23:*/		return 0x82187AC4;
	}
	return 0x82187AC4;
} // Block from 82187A64h-82187AC4h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82187AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187AC4);
		  /* 82187AC4h */ case    0:  		/* li R11, 0 */
		/* 82187AC4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82187AC4h case    0:*/		return 0x82187AC8;
	}
	return 0x82187AC8;
} // Block from 82187AC4h-82187AC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82187AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187AC8);
		  /* 82187AC8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82187AC8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82187AC8h case    0:*/		return 0x82187ACC;
		  /* 82187ACCh */ case    1:  		/* bc 12, CR0_EQ, 512 */
		/* 82187ACCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82187CCC;  }
		/* 82187ACCh case    1:*/		return 0x82187AD0;
		  /* 82187AD0h */ case    2:  		/* lhz R21, <#[R20 + 18]> */
		/* 82187AD0h case    2:*/		cpu::mem::load16z( regs, &regs.R21, (uint32)(regs.R20 + 0x00000012) );
		/* 82187AD0h case    2:*/		return 0x82187AD4;
		  /* 82187AD4h */ case    3:  		/* mr R3, R30 */
		/* 82187AD4h case    3:*/		regs.R3 = regs.R30;
		/* 82187AD4h case    3:*/		return 0x82187AD8;
		  /* 82187AD8h */ case    4:  		/* mr R4, R21 */
		/* 82187AD8h case    4:*/		regs.R4 = regs.R21;
		/* 82187AD8h case    4:*/		return 0x82187ADC;
		  /* 82187ADCh */ case    5:  		/* bl -16764 */
		/* 82187ADCh case    5:*/		regs.LR = 0x82187AE0; return 0x82183960;
		/* 82187ADCh case    5:*/		return 0x82187AE0;
		  /* 82187AE0h */ case    6:  		/* mr R23, R3 */
		/* 82187AE0h case    6:*/		regs.R23 = regs.R3;
		/* 82187AE0h case    6:*/		return 0x82187AE4;
		  /* 82187AE4h */ case    7:  		/* mr R3, R30 */
		/* 82187AE4h case    7:*/		regs.R3 = regs.R30;
		/* 82187AE4h case    7:*/		return 0x82187AE8;
		  /* 82187AE8h */ case    8:  		/* lhz R4, <#[R22 + 18]> */
		/* 82187AE8h case    8:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R22 + 0x00000012) );
		/* 82187AE8h case    8:*/		return 0x82187AEC;
		  /* 82187AECh */ case    9:  		/* bl -16780 */
		/* 82187AECh case    9:*/		regs.LR = 0x82187AF0; return 0x82183960;
		/* 82187AECh case    9:*/		return 0x82187AF0;
		  /* 82187AF0h */ case   10:  		/* mr R24, R3 */
		/* 82187AF0h case   10:*/		regs.R24 = regs.R3;
		/* 82187AF0h case   10:*/		return 0x82187AF4;
		  /* 82187AF4h */ case   11:  		/* cmplw CR6, R23, R3 */
		/* 82187AF4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R3);
		/* 82187AF4h case   11:*/		return 0x82187AF8;
		  /* 82187AF8h */ case   12:  		/* bc 12, CR6_EQ, 468 */
		/* 82187AF8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82187CCC;  }
		/* 82187AF8h case   12:*/		return 0x82187AFC;
		  /* 82187AFCh */ case   13:  		/* lwz R10, <#[R30 + 676]> */
		/* 82187AFCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A4) );
		/* 82187AFCh case   13:*/		return 0x82187B00;
		  /* 82187B00h */ case   14:  		/* li R11, 0 */
		/* 82187B00h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82187B00h case   14:*/		return 0x82187B04;
		  /* 82187B04h */ case   15:  		/* mulli R9, R3, 5 */
		/* 82187B04h case   15:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R3,0x5);
		/* 82187B04h case   15:*/		return 0x82187B08;
		  /* 82187B08h */ case   16:  		/* mulli R8, R23, 5 */
		/* 82187B08h case   16:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R23,0x5);
		/* 82187B08h case   16:*/		return 0x82187B0C;
		  /* 82187B0Ch */ case   17:  		/* add R7, R8, R11 */
		/* 82187B0Ch case   17:*/		cpu::op::add<0>(regs,&regs.R7,regs.R8,regs.R11);
		/* 82187B0Ch case   17:*/		return 0x82187B10;
		  /* 82187B10h */ case   18:  		/* add R6, R9, R11 */
		/* 82187B10h case   18:*/		cpu::op::add<0>(regs,&regs.R6,regs.R9,regs.R11);
		/* 82187B10h case   18:*/		return 0x82187B14;
		  /* 82187B14h */ case   19:  		/* addi R7, R7, 1 */
		/* 82187B14h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82187B14h case   19:*/		return 0x82187B18;
		  /* 82187B18h */ case   20:  		/* addi R6, R6, 1 */
		/* 82187B18h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82187B18h case   20:*/		return 0x82187B1C;
		  /* 82187B1Ch */ case   21:  		/* rlwinm R7, R7, 3, 0, 28 */
		/* 82187B1Ch case   21:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R7);
		/* 82187B1Ch case   21:*/		return 0x82187B20;
		  /* 82187B20h */ case   22:  		/* rlwinm R6, R6, 3, 0, 28 */
		/* 82187B20h case   22:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R6,regs.R6);
		/* 82187B20h case   22:*/		return 0x82187B24;
		  /* 82187B24h */ case   23:  		/* ldx R7, <#[R7 + R10]> */
		/* 82187B24h case   23:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82187B24h case   23:*/		return 0x82187B28;
		  /* 82187B28h */ case   24:  		/* ldx R6, <#[R6 + R10]> */
		/* 82187B28h case   24:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82187B28h case   24:*/		return 0x82187B2C;
		  /* 82187B2Ch */ case   25:  		/* nor R7, R7, R6 */
		/* 82187B2Ch case   25:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82187B2Ch case   25:*/		return 0x82187B30;
		  /* 82187B30h */ case   26:  		/* cmpldi CR6, R7, 0 */
		/* 82187B30h case   26:*/		cpu::op::cmpldi<6>(regs,regs.R7,0x00000000);
		/* 82187B30h case   26:*/		return 0x82187B34;
		  /* 82187B34h */ case   27:  		/* bc 4, CR6_EQ, 72 */
		/* 82187B34h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82187B7C;  }
		/* 82187B34h case   27:*/		return 0x82187B38;
		  /* 82187B38h */ case   28:  		/* addi R11, R11, 1 */
		/* 82187B38h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82187B38h case   28:*/		return 0x82187B3C;
		  /* 82187B3Ch */ case   29:  		/* cmpwi CR6, R11, 4 */
		/* 82187B3Ch case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82187B3Ch case   29:*/		return 0x82187B40;
		  /* 82187B40h */ case   30:  		/* bc 12, CR6_LT, -52 */
		/* 82187B40h case   30:*/		if ( regs.CR[6].lt ) { return 0x82187B0C;  }
		/* 82187B40h case   30:*/		return 0x82187B44;
		  /* 82187B44h */ case   31:  		/* li R11, 0 */
		/* 82187B44h case   31:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82187B44h case   31:*/		return 0x82187B48;
		  /* 82187B48h */ case   32:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82187B48h case   32:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82187B48h case   32:*/		return 0x82187B4C;
		  /* 82187B4Ch */ case   33:  		/* bc 12, CR0_EQ, 384 */
		/* 82187B4Ch case   33:*/		if ( regs.CR[0].eq ) { return 0x82187CCC;  }
		/* 82187B4Ch case   33:*/		return 0x82187B50;
		  /* 82187B50h */ case   34:  		/* cmplwi CR6, R26, 0 */
		/* 82187B50h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82187B50h case   34:*/		return 0x82187B54;
		  /* 82187B54h */ case   35:  		/* bc 4, CR6_EQ, 52 */
		/* 82187B54h case   35:*/		if ( !regs.CR[6].eq ) { return 0x82187B88;  }
		/* 82187B54h case   35:*/		return 0x82187B58;
		  /* 82187B58h */ case   36:  		/* lwz R11, <#[R20]> */
		/* 82187B58h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82187B58h case   36:*/		return 0x82187B5C;
		  /* 82187B5Ch */ case   37:  		/* li R10, 0 */
		/* 82187B5Ch case   37:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82187B5Ch case   37:*/		return 0x82187B60;
		  /* 82187B60h */ case   38:  		/* cmplwi CR6, R11, 0 */
		/* 82187B60h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187B60h case   38:*/		return 0x82187B64;
		  /* 82187B64h */ case   39:  		/* bc 12, CR6_EQ, 32 */
		/* 82187B64h case   39:*/		if ( regs.CR[6].eq ) { return 0x82187B84;  }
		/* 82187B64h case   39:*/		return 0x82187B68;
		  /* 82187B68h */ case   40:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187B68h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187B68h case   40:*/		return 0x82187B6C;
		  /* 82187B6Ch */ case   41:  		/* addi R10, R10, 1 */
		/* 82187B6Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82187B6Ch case   41:*/		return 0x82187B70;
		  /* 82187B70h */ case   42:  		/* b -16 */
		/* 82187B70h case   42:*/		return 0x82187B60;
		/* 82187B70h case   42:*/		return 0x82187B74;
	}
	return 0x82187B74;
} // Block from 82187AC8h-82187B74h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82187B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187B74);
		  /* 82187B74h */ case    0:  		/* mr R11, R17 */
		/* 82187B74h case    0:*/		regs.R11 = regs.R17;
		/* 82187B74h case    0:*/		return 0x82187B78;
		  /* 82187B78h */ case    1:  		/* b -412 */
		/* 82187B78h case    1:*/		return 0x821879DC;
		/* 82187B78h case    1:*/		return 0x82187B7C;
	}
	return 0x82187B7C;
} // Block from 82187B74h-82187B7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187B7C);
		  /* 82187B7Ch */ case    0:  		/* mr R11, R17 */
		/* 82187B7Ch case    0:*/		regs.R11 = regs.R17;
		/* 82187B7Ch case    0:*/		return 0x82187B80;
		  /* 82187B80h */ case    1:  		/* b -56 */
		/* 82187B80h case    1:*/		return 0x82187B48;
		/* 82187B80h case    1:*/		return 0x82187B84;
	}
	return 0x82187B84;
} // Block from 82187B7Ch-82187B84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187B84);
		  /* 82187B84h */ case    0:  		/* mr R26, R10 */
		/* 82187B84h case    0:*/		regs.R26 = regs.R10;
		/* 82187B84h case    0:*/		return 0x82187B88;
	}
	return 0x82187B88;
} // Block from 82187B84h-82187B88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82187B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187B88);
		  /* 82187B88h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 82187B88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82187B88h case    0:*/		return 0x82187B8C;
		  /* 82187B8Ch */ case    1:  		/* li R10, 0 */
		/* 82187B8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82187B8Ch case    1:*/		return 0x82187B90;
		  /* 82187B90h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82187B90h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187B90h case    2:*/		return 0x82187B94;
		  /* 82187B94h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82187B94h case    3:*/		if ( regs.CR[6].eq ) { return 0x82187BA4;  }
		/* 82187B94h case    3:*/		return 0x82187B98;
		  /* 82187B98h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187B98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187B98h case    4:*/		return 0x82187B9C;
		  /* 82187B9Ch */ case    5:  		/* addi R10, R10, 1 */
		/* 82187B9Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82187B9Ch case    5:*/		return 0x82187BA0;
		  /* 82187BA0h */ case    6:  		/* b -16 */
		/* 82187BA0h case    6:*/		return 0x82187B90;
		/* 82187BA0h case    6:*/		return 0x82187BA4;
	}
	return 0x82187BA4;
} // Block from 82187B88h-82187BA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187BA4);
		  /* 82187BA4h */ case    0:  		/* cmplw CR6, R10, R26 */
		/* 82187BA4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 82187BA4h case    0:*/		return 0x82187BA8;
		  /* 82187BA8h */ case    1:  		/* bc 4, CR6_EQ, 292 */
		/* 82187BA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82187CCC;  }
		/* 82187BA8h case    1:*/		return 0x82187BAC;
		  /* 82187BACh */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82187BACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82187BACh case    2:*/		return 0x82187BB0;
		  /* 82187BB0h */ case    3:  		/* bc 4, CR6_EQ, 104 */
		/* 82187BB0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82187C18;  }
		/* 82187BB0h case    3:*/		return 0x82187BB4;
		  /* 82187BB4h */ case    4:  		/* li R5, 0 */
		/* 82187BB4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82187BB4h case    4:*/		return 0x82187BB8;
		  /* 82187BB8h */ case    5:  		/* rlwinm R4, R26, 3, 0, 28 */
		/* 82187BB8h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R26);
		/* 82187BB8h case    5:*/		return 0x82187BBC;
		  /* 82187BBCh */ case    6:  		/* mr R3, R30 */
		/* 82187BBCh case    6:*/		regs.R3 = regs.R30;
		/* 82187BBCh case    6:*/		return 0x82187BC0;
		  /* 82187BC0h */ case    7:  		/* bl -142216 */
		/* 82187BC0h case    7:*/		regs.LR = 0x82187BC4; return 0x82165038;
		/* 82187BC0h case    7:*/		return 0x82187BC4;
		  /* 82187BC4h */ case    8:  		/* lwz R31, <#[R20]> */
		/* 82187BC4h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000000) );
		/* 82187BC4h case    8:*/		return 0x82187BC8;
		  /* 82187BC8h */ case    9:  		/* mr R25, R3 */
		/* 82187BC8h case    9:*/		regs.R25 = regs.R3;
		/* 82187BC8h case    9:*/		return 0x82187BCC;
		  /* 82187BCCh */ case   10:  		/* addi R29, R3, -4 */
		/* 82187BCCh case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0xFFFFFFFC);
		/* 82187BCCh case   10:*/		return 0x82187BD0;
		  /* 82187BD0h */ case   11:  		/* cmplwi CR6, R31, 0 */
		/* 82187BD0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82187BD0h case   11:*/		return 0x82187BD4;
		  /* 82187BD4h */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 82187BD4h case   12:*/		if ( regs.CR[6].eq ) { return 0x82187C00;  }
		/* 82187BD4h case   12:*/		return 0x82187BD8;
		  /* 82187BD8h */ case   13:  		/* lwz R11, <#[R31 + 12]> */
		/* 82187BD8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82187BD8h case   13:*/		return 0x82187BDC;
		  /* 82187BDCh */ case   14:  		/* mr R3, R30 */
		/* 82187BDCh case   14:*/		regs.R3 = regs.R30;
		/* 82187BDCh case   14:*/		return 0x82187BE0;
		  /* 82187BE0h */ case   15:  		/* lwz R10, <#[R31]> */
		/* 82187BE0h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82187BE0h case   15:*/		return 0x82187BE4;
		  /* 82187BE4h */ case   16:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 82187BE4h case   16:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 82187BE4h case   16:*/		return 0x82187BE8;
		  /* 82187BE8h */ case   17:  		/* lhz R11, <#[R11 + 18]> */
		/* 82187BE8h case   17:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000012) );
		/* 82187BE8h case   17:*/		return 0x82187BEC;
		  /* 82187BECh */ case   18:  		/* add R4, R10, R11 */
		/* 82187BECh case   18:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82187BECh case   18:*/		return 0x82187BF0;
		  /* 82187BF0h */ case   19:  		/* bl -17040 */
		/* 82187BF0h case   19:*/		regs.LR = 0x82187BF4; return 0x82183960;
		/* 82187BF0h case   19:*/		return 0x82187BF4;
		  /* 82187BF4h */ case   20:  		/* stwu R3, <#[R29 + 4]> */
		/* 82187BF4h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 82187BF4h case   20:*/		return 0x82187BF8;
		  /* 82187BF8h */ case   21:  		/* lwz R31, <#[R31 + 4]> */
		/* 82187BF8h case   21:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 82187BF8h case   21:*/		return 0x82187BFC;
		  /* 82187BFCh */ case   22:  		/* b -44 */
		/* 82187BFCh case   22:*/		return 0x82187BD0;
		/* 82187BFCh case   22:*/		return 0x82187C00;
	}
	return 0x82187C00;
} // Block from 82187BA4h-82187C00h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82187C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187C00);
		  /* 82187C00h */ case    0:  		/* lis R11, -32232 */
		/* 82187C00h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8218);
		/* 82187C00h case    0:*/		return 0x82187C04;
		  /* 82187C04h */ case    1:  		/* li R5, 4 */
		/* 82187C04h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82187C04h case    1:*/		return 0x82187C08;
		  /* 82187C08h */ case    2:  		/* addi R6, R11, 14808 */
		/* 82187C08h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x39D8);
		/* 82187C08h case    2:*/		return 0x82187C0C;
		  /* 82187C0Ch */ case    3:  		/* mr R4, R26 */
		/* 82187C0Ch case    3:*/		regs.R4 = regs.R26;
		/* 82187C0Ch case    3:*/		return 0x82187C10;
		  /* 82187C10h */ case    4:  		/* mr R3, R25 */
		/* 82187C10h case    4:*/		regs.R3 = regs.R25;
		/* 82187C10h case    4:*/		return 0x82187C14;
		  /* 82187C14h */ case    5:  		/* bl -1006644 */
		/* 82187C14h case    5:*/		regs.LR = 0x82187C18; return 0x82091FE0;
		/* 82187C14h case    5:*/		return 0x82187C18;
	}
	return 0x82187C18;
} // Block from 82187C00h-82187C18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187C18);
		  /* 82187C18h */ case    0:  		/* rlwinm R28, R26, 2, 0, 29 */
		/* 82187C18h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R26);
		/* 82187C18h case    0:*/		return 0x82187C1C;
		  /* 82187C1Ch */ case    1:  		/* lwz R31, <#[R22]> */
		/* 82187C1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x00000000) );
		/* 82187C1Ch case    1:*/		return 0x82187C20;
		  /* 82187C20h */ case    2:  		/* add R29, R28, R25 */
		/* 82187C20h case    2:*/		cpu::op::add<0>(regs,&regs.R29,regs.R28,regs.R25);
		/* 82187C20h case    2:*/		return 0x82187C24;
		  /* 82187C24h */ case    3:  		/* addi R27, R29, -4 */
		/* 82187C24h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R29,0xFFFFFFFC);
		/* 82187C24h case    3:*/		return 0x82187C28;
		  /* 82187C28h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82187C28h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82187C28h case    4:*/		return 0x82187C2C;
		  /* 82187C2Ch */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 82187C2Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82187C58;  }
		/* 82187C2Ch case    5:*/		return 0x82187C30;
		  /* 82187C30h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 82187C30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82187C30h case    6:*/		return 0x82187C34;
		  /* 82187C34h */ case    7:  		/* mr R3, R30 */
		/* 82187C34h case    7:*/		regs.R3 = regs.R30;
		/* 82187C34h case    7:*/		return 0x82187C38;
		  /* 82187C38h */ case    8:  		/* lwz R10, <#[R31]> */
		/* 82187C38h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82187C38h case    8:*/		return 0x82187C3C;
		  /* 82187C3Ch */ case    9:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 82187C3Ch case    9:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 82187C3Ch case    9:*/		return 0x82187C40;
		  /* 82187C40h */ case   10:  		/* lhz R11, <#[R11 + 18]> */
		/* 82187C40h case   10:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000012) );
		/* 82187C40h case   10:*/		return 0x82187C44;
		  /* 82187C44h */ case   11:  		/* add R4, R10, R11 */
		/* 82187C44h case   11:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82187C44h case   11:*/		return 0x82187C48;
		  /* 82187C48h */ case   12:  		/* bl -17128 */
		/* 82187C48h case   12:*/		regs.LR = 0x82187C4C; return 0x82183960;
		/* 82187C48h case   12:*/		return 0x82187C4C;
		  /* 82187C4Ch */ case   13:  		/* stwu R3, <#[R27 + 4]> */
		/* 82187C4Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000004) );
		regs.R27 = (uint32)(regs.R27 + 0x00000004);
		/* 82187C4Ch case   13:*/		return 0x82187C50;
		  /* 82187C50h */ case   14:  		/* lwz R31, <#[R31 + 4]> */
		/* 82187C50h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 82187C50h case   14:*/		return 0x82187C54;
		  /* 82187C54h */ case   15:  		/* b -44 */
		/* 82187C54h case   15:*/		return 0x82187C28;
		/* 82187C54h case   15:*/		return 0x82187C58;
	}
	return 0x82187C58;
} // Block from 82187C18h-82187C58h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82187C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187C58);
		  /* 82187C58h */ case    0:  		/* lis R11, -32232 */
		/* 82187C58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8218);
		/* 82187C58h case    0:*/		return 0x82187C5C;
		  /* 82187C5Ch */ case    1:  		/* li R5, 4 */
		/* 82187C5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82187C5Ch case    1:*/		return 0x82187C60;
		  /* 82187C60h */ case    2:  		/* addi R6, R11, 14808 */
		/* 82187C60h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x39D8);
		/* 82187C60h case    2:*/		return 0x82187C64;
		  /* 82187C64h */ case    3:  		/* mr R4, R26 */
		/* 82187C64h case    3:*/		regs.R4 = regs.R26;
		/* 82187C64h case    3:*/		return 0x82187C68;
		  /* 82187C68h */ case    4:  		/* mr R3, R29 */
		/* 82187C68h case    4:*/		regs.R3 = regs.R29;
		/* 82187C68h case    4:*/		return 0x82187C6C;
		  /* 82187C6Ch */ case    5:  		/* bl -1006732 */
		/* 82187C6Ch case    5:*/		regs.LR = 0x82187C70; return 0x82091FE0;
		/* 82187C6Ch case    5:*/		return 0x82187C70;
		  /* 82187C70h */ case    6:  		/* mr R11, R25 */
		/* 82187C70h case    6:*/		regs.R11 = regs.R25;
		/* 82187C70h case    6:*/		return 0x82187C74;
		  /* 82187C74h */ case    7:  		/* li R10, 0 */
		/* 82187C74h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82187C74h case    7:*/		return 0x82187C78;
		  /* 82187C78h */ case    8:  		/* cmplwi CR0, R28, 0 */
		/* 82187C78h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 82187C78h case    8:*/		return 0x82187C7C;
		  /* 82187C7Ch */ case    9:  		/* bc 12, CR0_EQ, 40 */
		/* 82187C7Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82187CA4;  }
		/* 82187C7Ch case    9:*/		return 0x82187C80;
		  /* 82187C80h */ case   10:  		/* add R9, R25, R28 */
		/* 82187C80h case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R25,regs.R28);
		/* 82187C80h case   10:*/		return 0x82187C84;
		  /* 82187C84h */ case   11:  		/* lbz R10, <#[R11]> */
		/* 82187C84h case   11:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82187C84h case   11:*/		return 0x82187C88;
		  /* 82187C88h */ case   12:  		/* lbz R8, <#[R29]> */
		/* 82187C88h case   12:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 82187C88h case   12:*/		return 0x82187C8C;
		  /* 82187C8Ch */ case   13:  		/* subf. R10, R8, R10 */
		/* 82187C8Ch case   13:*/		cpu::op::subf<1>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82187C8Ch case   13:*/		return 0x82187C90;
		  /* 82187C90h */ case   14:  		/* bc 4, CR0_EQ, 20 */
		/* 82187C90h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82187CA4;  }
		/* 82187C90h case   14:*/		return 0x82187C94;
		  /* 82187C94h */ case   15:  		/* addi R11, R11, 1 */
		/* 82187C94h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82187C94h case   15:*/		return 0x82187C98;
		  /* 82187C98h */ case   16:  		/* addi R29, R29, 1 */
		/* 82187C98h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82187C98h case   16:*/		return 0x82187C9C;
		  /* 82187C9Ch */ case   17:  		/* cmpw CR6, R11, R9 */
		/* 82187C9Ch case   17:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 82187C9Ch case   17:*/		return 0x82187CA0;
		  /* 82187CA0h */ case   18:  		/* bc 4, CR6_EQ, -28 */
		/* 82187CA0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82187C84;  }
		/* 82187CA0h case   18:*/		return 0x82187CA4;
	}
	return 0x82187CA4;
} // Block from 82187C58h-82187CA4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82187CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187CA4);
		  /* 82187CA4h */ case    0:  		/* cmpwi CR0, R10, 0 */
		/* 82187CA4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R10,0x00000000);
		/* 82187CA4h case    0:*/		return 0x82187CA8;
		  /* 82187CA8h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 82187CA8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82187CCC;  }
		/* 82187CA8h case    1:*/		return 0x82187CAC;
		  /* 82187CACh */ case    2:  		/* mr R5, R24 */
		/* 82187CACh case    2:*/		regs.R5 = regs.R24;
		/* 82187CACh case    2:*/		return 0x82187CB0;
		  /* 82187CB0h */ case    3:  		/* mr R4, R21 */
		/* 82187CB0h case    3:*/		regs.R4 = regs.R21;
		/* 82187CB0h case    3:*/		return 0x82187CB4;
		  /* 82187CB4h */ case    4:  		/* mr R3, R30 */
		/* 82187CB4h case    4:*/		regs.R3 = regs.R30;
		/* 82187CB4h case    4:*/		return 0x82187CB8;
		  /* 82187CB8h */ case    5:  		/* bl -12888 */
		/* 82187CB8h case    5:*/		regs.LR = 0x82187CBC; return 0x82184A60;
		/* 82187CB8h case    5:*/		return 0x82187CBC;
		  /* 82187CBCh */ case    6:  		/* mr R5, R24 */
		/* 82187CBCh case    6:*/		regs.R5 = regs.R24;
		/* 82187CBCh case    6:*/		return 0x82187CC0;
		  /* 82187CC0h */ case    7:  		/* mr R4, R23 */
		/* 82187CC0h case    7:*/		regs.R4 = regs.R23;
		/* 82187CC0h case    7:*/		return 0x82187CC4;
		  /* 82187CC4h */ case    8:  		/* mr R3, R30 */
		/* 82187CC4h case    8:*/		regs.R3 = regs.R30;
		/* 82187CC4h case    8:*/		return 0x82187CC8;
		  /* 82187CC8h */ case    9:  		/* bl -12904 */
		/* 82187CC8h case    9:*/		regs.LR = 0x82187CCC; return 0x82184A60;
		/* 82187CC8h case    9:*/		return 0x82187CCC;
	}
	return 0x82187CCC;
} // Block from 82187CA4h-82187CCCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 82187CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187CCC);
		  /* 82187CCCh */ case    0:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 82187CCCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 82187CCCh case    0:*/		return 0x82187CD0;
		  /* 82187CD0h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82187CD0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82187CD0h case    1:*/		return 0x82187CD4;
		  /* 82187CD4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187CD4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187CD4h case    2:*/		return 0x82187CD8;
		  /* 82187CD8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82187CD8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187CE8;  }
		/* 82187CD8h case    3:*/		return 0x82187CDC;
		  /* 82187CDCh */ case    4:  		/* mr R22, R11 */
		/* 82187CDCh case    4:*/		regs.R22 = regs.R11;
		/* 82187CDCh case    4:*/		return 0x82187CE0;
		  /* 82187CE0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82187CE0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187CE0h case    5:*/		return 0x82187CE4;
		  /* 82187CE4h */ case    6:  		/* bc 4, CR6_EQ, -596 */
		/* 82187CE4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82187A90;  }
		/* 82187CE4h case    6:*/		return 0x82187CE8;
	}
	return 0x82187CE8;
} // Block from 82187CCCh-82187CE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187CE8);
		  /* 82187CE8h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82187CE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82187CE8h case    0:*/		return 0x82187CEC;
		  /* 82187CECh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82187CECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82187D04;  }
		/* 82187CECh case    1:*/		return 0x82187CF0;
		  /* 82187CF0h */ case    2:  		/* li R6, 0 */
		/* 82187CF0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82187CF0h case    2:*/		return 0x82187CF4;
		  /* 82187CF4h */ case    3:  		/* rlwinm R5, R26, 3, 0, 28 */
		/* 82187CF4h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R26);
		/* 82187CF4h case    3:*/		return 0x82187CF8;
		  /* 82187CF8h */ case    4:  		/* mr R4, R25 */
		/* 82187CF8h case    4:*/		regs.R4 = regs.R25;
		/* 82187CF8h case    4:*/		return 0x82187CFC;
		  /* 82187CFCh */ case    5:  		/* mr R3, R30 */
		/* 82187CFCh case    5:*/		regs.R3 = regs.R30;
		/* 82187CFCh case    5:*/		return 0x82187D00;
		  /* 82187D00h */ case    6:  		/* bl -110256 */
		/* 82187D00h case    6:*/		regs.LR = 0x82187D04; return 0x8216CE50;
		/* 82187D00h case    6:*/		return 0x82187D04;
	}
	return 0x82187D04;
} // Block from 82187CE8h-82187D04h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187D04);
		  /* 82187D04h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82187D04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82187D04h case    0:*/		return 0x82187D08;
		  /* 82187D08h */ case    1:  		/* addi R18, R18, 1 */
		/* 82187D08h case    1:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 82187D08h case    1:*/		return 0x82187D0C;
		  /* 82187D0Ch */ case    2:  		/* addi R19, R19, 4 */
		/* 82187D0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 82187D0Ch case    2:*/		return 0x82187D10;
		  /* 82187D10h */ case    3:  		/* cmplw CR6, R18, R11 */
		/* 82187D10h case    3:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 82187D10h case    3:*/		return 0x82187D14;
		  /* 82187D14h */ case    4:  		/* li R21, 0 */
		/* 82187D14h case    4:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82187D14h case    4:*/		return 0x82187D18;
		  /* 82187D18h */ case    5:  		/* bc 12, CR6_LT, -752 */
		/* 82187D18h case    5:*/		if ( regs.CR[6].lt ) { return 0x82187A28;  }
		/* 82187D18h case    5:*/		return 0x82187D1C;
	}
	return 0x82187D1C;
} // Block from 82187D04h-82187D1Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187D1C);
		  /* 82187D1Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82187D1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82187D1Ch case    0:*/		return 0x82187D20;
		  /* 82187D20h */ case    1:  		/* mr R22, R21 */
		/* 82187D20h case    1:*/		regs.R22 = regs.R21;
		/* 82187D20h case    1:*/		return 0x82187D24;
		  /* 82187D24h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187D24h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187D24h case    2:*/		return 0x82187D28;
		  /* 82187D28h */ case    3:  		/* bc 4, CR0_EQ, 496 */
		/* 82187D28h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187F18;  }
		/* 82187D28h case    3:*/		return 0x82187D2C;
		  /* 82187D2Ch */ case    4:  		/* mr R25, R11 */
		/* 82187D2Ch case    4:*/		regs.R25 = regs.R11;
		/* 82187D2Ch case    4:*/		return 0x82187D30;
		  /* 82187D30h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 82187D30h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187D30h case    5:*/		return 0x82187D34;
		  /* 82187D34h */ case    6:  		/* bc 12, CR0_EQ, 484 */
		/* 82187D34h case    6:*/		if ( regs.CR[0].eq ) { return 0x82187F18;  }
		/* 82187D34h case    6:*/		return 0x82187D38;
		  /* 82187D38h */ case    7:  		/* lwz R11, <#[R30 + 672]> */
		/* 82187D38h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 82187D38h case    7:*/		return 0x82187D3C;
		  /* 82187D3Ch */ case    8:  		/* li R5, 0 */
		/* 82187D3Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82187D3Ch case    8:*/		return 0x82187D40;
		  /* 82187D40h */ case    9:  		/* mr R3, R30 */
		/* 82187D40h case    9:*/		regs.R3 = regs.R30;
		/* 82187D40h case    9:*/		return 0x82187D44;
		  /* 82187D44h */ case   10:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82187D44h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82187D44h case   10:*/		return 0x82187D48;
		  /* 82187D48h */ case   11:  		/* bl -142608 */
		/* 82187D48h case   11:*/		regs.LR = 0x82187D4C; return 0x82165038;
		/* 82187D48h case   11:*/		return 0x82187D4C;
		  /* 82187D4Ch */ case   12:  		/* lwz R11, <#[R30 + 672]> */
		/* 82187D4Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 82187D4Ch case   12:*/		return 0x82187D50;
		  /* 82187D50h */ case   13:  		/* mr R23, R3 */
		/* 82187D50h case   13:*/		regs.R23 = regs.R3;
		/* 82187D50h case   13:*/		return 0x82187D54;
		  /* 82187D54h */ case   14:  		/* li R5, 0 */
		/* 82187D54h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82187D54h case   14:*/		return 0x82187D58;
		  /* 82187D58h */ case   15:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82187D58h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82187D58h case   15:*/		return 0x82187D5C;
		  /* 82187D5Ch */ case   16:  		/* mr R3, R30 */
		/* 82187D5Ch case   16:*/		regs.R3 = regs.R30;
		/* 82187D5Ch case   16:*/		return 0x82187D60;
		  /* 82187D60h */ case   17:  		/* bl -142632 */
		/* 82187D60h case   17:*/		regs.LR = 0x82187D64; return 0x82165038;
		/* 82187D60h case   17:*/		return 0x82187D64;
		  /* 82187D64h */ case   18:  		/* stw R3, <#[R25 + 88]> */
		/* 82187D64h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000058) );
		/* 82187D64h case   18:*/		return 0x82187D68;
		  /* 82187D68h */ case   19:  		/* lwz R11, <#[R25 + 20]> */
		/* 82187D68h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 82187D68h case   19:*/		return 0x82187D6C;
		  /* 82187D6Ch */ case   20:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187D6Ch case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187D6Ch case   20:*/		return 0x82187D70;
		  /* 82187D70h */ case   21:  		/* bc 4, CR0_EQ, 124 */
		/* 82187D70h case   21:*/		if ( !regs.CR[0].eq ) { return 0x82187DEC;  }
		/* 82187D70h case   21:*/		return 0x82187D74;
		  /* 82187D74h */ case   22:  		/* mr R28, R11 */
		/* 82187D74h case   22:*/		regs.R28 = regs.R11;
		/* 82187D74h case   22:*/		return 0x82187D78;
		  /* 82187D78h */ case   23:  		/* cmplwi CR0, R11, 0 */
		/* 82187D78h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187D78h case   23:*/		return 0x82187D7C;
		  /* 82187D7Ch */ case   24:  		/* bc 12, CR0_EQ, 112 */
		/* 82187D7Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x82187DEC;  }
		/* 82187D7Ch case   24:*/		return 0x82187D80;
		  /* 82187D80h */ case   25:  		/* lwz R11, <#[R28 + 8]> */
		/* 82187D80h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82187D80h case   25:*/		return 0x82187D84;
		  /* 82187D84h */ case   26:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82187D84h case   26:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82187D84h case   26:*/		return 0x82187D88;
		  /* 82187D88h */ case   27:  		/* bc 12, CR0_EQ, 72 */
		/* 82187D88h case   27:*/		if ( regs.CR[0].eq ) { return 0x82187DD0;  }
		/* 82187D88h case   27:*/		return 0x82187D8C;
		  /* 82187D8Ch */ case   28:  		/* lwz R11, <#[R28 + 16]> */
		/* 82187D8Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82187D8Ch case   28:*/		return 0x82187D90;
		  /* 82187D90h */ case   29:  		/* rlwinm R31, R11, 0, 16, 31 */
		/* 82187D90h case   29:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R31,regs.R11);
		/* 82187D90h case   29:*/		return 0x82187D94;
		  /* 82187D94h */ case   30:  		/* rlwinm R11, R11, 16, 29, 31 */
		/* 82187D94h case   30:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R11,regs.R11);
		/* 82187D94h case   30:*/		return 0x82187D98;
		  /* 82187D98h */ case   31:  		/* add R29, R11, R31 */
		/* 82187D98h case   31:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R31);
		/* 82187D98h case   31:*/		return 0x82187D9C;
		  /* 82187D9Ch */ case   32:  		/* b 44 */
		/* 82187D9Ch case   32:*/		return 0x82187DC8;
		/* 82187D9Ch case   32:*/		return 0x82187DA0;
		  /* 82187DA0h */ case   33:  		/* mr R4, R31 */
		/* 82187DA0h case   33:*/		regs.R4 = regs.R31;
		/* 82187DA0h case   33:*/		return 0x82187DA4;
		  /* 82187DA4h */ case   34:  		/* mr R3, R30 */
		/* 82187DA4h case   34:*/		regs.R3 = regs.R30;
		/* 82187DA4h case   34:*/		return 0x82187DA8;
		  /* 82187DA8h */ case   35:  		/* bl -17480 */
		/* 82187DA8h case   35:*/		regs.LR = 0x82187DAC; return 0x82183960;
		/* 82187DA8h case   35:*/		return 0x82187DAC;
		  /* 82187DACh */ case   36:  		/* rlwinm R11, R3, 29, 3, 28 */
		/* 82187DACh case   36:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R3);
		/* 82187DACh case   36:*/		return 0x82187DB0;
		  /* 82187DB0h */ case   37:  		/* rldicl R10, R3, 0, 58 */
		/* 82187DB0h case   37:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 82187DB0h case   37:*/		return 0x82187DB4;
		  /* 82187DB4h */ case   38:  		/* addi R31, R31, 1 */
		/* 82187DB4h case   38:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82187DB4h case   38:*/		return 0x82187DB8;
		  /* 82187DB8h */ case   39:  		/* sld R10, R17, R10 */
		/* 82187DB8h case   39:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 82187DB8h case   39:*/		return 0x82187DBC;
		  /* 82187DBCh */ case   40:  		/* ldx R9, <#[R11 + R23]> */
		/* 82187DBCh case   40:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82187DBCh case   40:*/		return 0x82187DC0;
		  /* 82187DC0h */ case   41:  		/* or R10, R10, R9 */
		/* 82187DC0h case   41:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82187DC0h case   41:*/		return 0x82187DC4;
		  /* 82187DC4h */ case   42:  		/* stdx R10, <#[R11 + R23]> */
		/* 82187DC4h case   42:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82187DC4h case   42:*/		return 0x82187DC8;
	}
	return 0x82187DC8;
} // Block from 82187D1Ch-82187DC8h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82187DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187DC8);
		  /* 82187DC8h */ case    0:  		/* cmplw CR6, R31, R29 */
		/* 82187DC8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 82187DC8h case    0:*/		return 0x82187DCC;
		  /* 82187DCCh */ case    1:  		/* bc 12, CR6_LT, -44 */
		/* 82187DCCh case    1:*/		if ( regs.CR[6].lt ) { return 0x82187DA0;  }
		/* 82187DCCh case    1:*/		return 0x82187DD0;
	}
	return 0x82187DD0;
} // Block from 82187DC8h-82187DD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187DD0);
		  /* 82187DD0h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82187DD0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82187DD0h case    0:*/		return 0x82187DD4;
		  /* 82187DD4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82187DD4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82187DD4h case    1:*/		return 0x82187DD8;
		  /* 82187DD8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187DD8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187DD8h case    2:*/		return 0x82187DDC;
		  /* 82187DDCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82187DDCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187DEC;  }
		/* 82187DDCh case    3:*/		return 0x82187DE0;
		  /* 82187DE0h */ case    4:  		/* mr R28, R11 */
		/* 82187DE0h case    4:*/		regs.R28 = regs.R11;
		/* 82187DE0h case    4:*/		return 0x82187DE4;
		  /* 82187DE4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82187DE4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187DE4h case    5:*/		return 0x82187DE8;
		  /* 82187DE8h */ case    6:  		/* bc 4, CR6_EQ, -104 */
		/* 82187DE8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82187D80;  }
		/* 82187DE8h case    6:*/		return 0x82187DEC;
	}
	return 0x82187DEC;
} // Block from 82187DD0h-82187DECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82187DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187DEC);
		  /* 82187DECh */ case    0:  		/* lwz R11, <#[R25 + 28]> */
		/* 82187DECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 82187DECh case    0:*/		return 0x82187DF0;
		  /* 82187DF0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82187DF0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82187DF0h case    1:*/		return 0x82187DF4;
		  /* 82187DF4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82187DF4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82187E04;  }
		/* 82187DF4h case    2:*/		return 0x82187DF8;
		  /* 82187DF8h */ case    3:  		/* lwz R10, <#[R25 + 36]> */
		/* 82187DF8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000024) );
		/* 82187DF8h case    3:*/		return 0x82187DFC;
		  /* 82187DFCh */ case    4:  		/* addi R11, R25, 32 */
		/* 82187DFCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x20);
		/* 82187DFCh case    4:*/		return 0x82187E00;
		  /* 82187E00h */ case    5:  		/* b 12 */
		/* 82187E00h case    5:*/		return 0x82187E0C;
		/* 82187E00h case    5:*/		return 0x82187E04;
	}
	return 0x82187E04;
} // Block from 82187DECh-82187E04h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187E04);
		  /* 82187E04h */ case    0:  		/* lwz R10, <#[R25 + 28]> */
		/* 82187E04h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000001C) );
		/* 82187E04h case    0:*/		return 0x82187E08;
		  /* 82187E08h */ case    1:  		/* addi R11, R25, 24 */
		/* 82187E08h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x18);
		/* 82187E08h case    1:*/		return 0x82187E0C;
	}
	return 0x82187E0C;
} // Block from 82187E04h-82187E0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82187E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187E0C);
		  /* 82187E0Ch */ case    0:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 82187E0Ch case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 82187E0Ch case    0:*/		return 0x82187E10;
		  /* 82187E10h */ case    1:  		/* mr R24, R11 */
		/* 82187E10h case    1:*/		regs.R24 = regs.R11;
		/* 82187E10h case    1:*/		return 0x82187E14;
		  /* 82187E14h */ case    2:  		/* addic R11, R9, -1 */
		/* 82187E14h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 82187E14h case    2:*/		return 0x82187E18;
		  /* 82187E18h */ case    3:  		/* subfe R11, R11, R11 */
		/* 82187E18h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82187E18h case    3:*/		return 0x82187E1C;
		  /* 82187E1Ch */ case    4:  		/* and R29, R11, R10 */
		/* 82187E1Ch case    4:*/		cpu::op::and<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 82187E1Ch case    4:*/		return 0x82187E20;
		  /* 82187E20h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 82187E20h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82187E20h case    5:*/		return 0x82187E24;
		  /* 82187E24h */ case    6:  		/* bc 12, CR6_EQ, 172 */
		/* 82187E24h case    6:*/		if ( regs.CR[6].eq ) { return 0x82187ED0;  }
		/* 82187E24h case    6:*/		return 0x82187E28;
		  /* 82187E28h */ case    7:  		/* lwz R11, <#[R29 + 8]> */
		/* 82187E28h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82187E28h case    7:*/		return 0x82187E2C;
		  /* 82187E2Ch */ case    8:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 82187E2Ch case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 82187E2Ch case    8:*/		return 0x82187E30;
		  /* 82187E30h */ case    9:  		/* bc 12, CR0_EQ, 100 */
		/* 82187E30h case    9:*/		if ( regs.CR[0].eq ) { return 0x82187E94;  }
		/* 82187E30h case    9:*/		return 0x82187E34;
		  /* 82187E34h */ case   10:  		/* lwz R10, <#[R29 + 16]> */
		/* 82187E34h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 82187E34h case   10:*/		return 0x82187E38;
		  /* 82187E38h */ case   11:  		/* rlwinm R26, R11, 31, 28, 31 */
		/* 82187E38h case   11:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R26,regs.R11);
		/* 82187E38h case   11:*/		return 0x82187E3C;
		  /* 82187E3Ch */ case   12:  		/* mr R27, R17 */
		/* 82187E3Ch case   12:*/		regs.R27 = regs.R17;
		/* 82187E3Ch case   12:*/		return 0x82187E40;
		  /* 82187E40h */ case   13:  		/* rlwinm R11, R10, 0, 16, 31 */
		/* 82187E40h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R10);
		/* 82187E40h case   13:*/		return 0x82187E44;
		  /* 82187E44h */ case   14:  		/* rlwinm R10, R10, 16, 29, 31 */
		/* 82187E44h case   14:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R10,regs.R10);
		/* 82187E44h case   14:*/		return 0x82187E48;
		  /* 82187E48h */ case   15:  		/* mr R31, R11 */
		/* 82187E48h case   15:*/		regs.R31 = regs.R11;
		/* 82187E48h case   15:*/		return 0x82187E4C;
		  /* 82187E4Ch */ case   16:  		/* add R28, R10, R11 */
		/* 82187E4Ch case   16:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 82187E4Ch case   16:*/		return 0x82187E50;
		  /* 82187E50h */ case   17:  		/* cmplw CR6, R11, R28 */
		/* 82187E50h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82187E50h case   17:*/		return 0x82187E54;
		  /* 82187E54h */ case   18:  		/* bc 4, CR6_LT, 64 */
		/* 82187E54h case   18:*/		if ( !regs.CR[6].lt ) { return 0x82187E94;  }
		/* 82187E54h case   18:*/		return 0x82187E58;
		  /* 82187E58h */ case   19:  		/* and. R11, R27, R26 */
		/* 82187E58h case   19:*/		cpu::op::and<1>(regs,&regs.R11,regs.R27,regs.R26);
		/* 82187E58h case   19:*/		return 0x82187E5C;
		  /* 82187E5Ch */ case   20:  		/* bc 12, CR0_EQ, 40 */
		/* 82187E5Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x82187E84;  }
		/* 82187E5Ch case   20:*/		return 0x82187E60;
		  /* 82187E60h */ case   21:  		/* mr R4, R31 */
		/* 82187E60h case   21:*/		regs.R4 = regs.R31;
		/* 82187E60h case   21:*/		return 0x82187E64;
		  /* 82187E64h */ case   22:  		/* mr R3, R30 */
		/* 82187E64h case   22:*/		regs.R3 = regs.R30;
		/* 82187E64h case   22:*/		return 0x82187E68;
		  /* 82187E68h */ case   23:  		/* bl -17672 */
		/* 82187E68h case   23:*/		regs.LR = 0x82187E6C; return 0x82183960;
		/* 82187E68h case   23:*/		return 0x82187E6C;
		  /* 82187E6Ch */ case   24:  		/* rlwinm R11, R3, 29, 3, 28 */
		/* 82187E6Ch case   24:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R3);
		/* 82187E6Ch case   24:*/		return 0x82187E70;
		  /* 82187E70h */ case   25:  		/* rldicl R10, R3, 0, 58 */
		/* 82187E70h case   25:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 82187E70h case   25:*/		return 0x82187E74;
		  /* 82187E74h */ case   26:  		/* sld R10, R17, R10 */
		/* 82187E74h case   26:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 82187E74h case   26:*/		return 0x82187E78;
		  /* 82187E78h */ case   27:  		/* ldx R9, <#[R11 + R23]> */
		/* 82187E78h case   27:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82187E78h case   27:*/		return 0x82187E7C;
		  /* 82187E7Ch */ case   28:  		/* or R10, R10, R9 */
		/* 82187E7Ch case   28:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82187E7Ch case   28:*/		return 0x82187E80;
		  /* 82187E80h */ case   29:  		/* stdx R10, <#[R11 + R23]> */
		/* 82187E80h case   29:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82187E80h case   29:*/		return 0x82187E84;
	}
	return 0x82187E84;
} // Block from 82187E0Ch-82187E84h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82187E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187E84);
		  /* 82187E84h */ case    0:  		/* addi R31, R31, 1 */
		/* 82187E84h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82187E84h case    0:*/		return 0x82187E88;
		  /* 82187E88h */ case    1:  		/* rlwinm R27, R27, 1, 0, 30 */
		/* 82187E88h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R27,regs.R27);
		/* 82187E88h case    1:*/		return 0x82187E8C;
		  /* 82187E8Ch */ case    2:  		/* cmplw CR6, R31, R28 */
		/* 82187E8Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 82187E8Ch case    2:*/		return 0x82187E90;
		  /* 82187E90h */ case    3:  		/* bc 12, CR6_LT, -56 */
		/* 82187E90h case    3:*/		if ( regs.CR[6].lt ) { return 0x82187E58;  }
		/* 82187E90h case    3:*/		return 0x82187E94;
	}
	return 0x82187E94;
} // Block from 82187E84h-82187E94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82187E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187E94);
		  /* 82187E94h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82187E94h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82187E94h case    0:*/		return 0x82187E98;
		  /* 82187E98h */ case    1:  		/* lwz R29, <#[R11 + 40]> */
		/* 82187E98h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000028) );
		/* 82187E98h case    1:*/		return 0x82187E9C;
		  /* 82187E9Ch */ case    2:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 82187E9Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 82187E9Ch case    2:*/		return 0x82187EA0;
		  /* 82187EA0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82187EA0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82187EAC;  }
		/* 82187EA0h case    3:*/		return 0x82187EA4;
		  /* 82187EA4h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82187EA4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82187EA4h case    4:*/		return 0x82187EA8;
		  /* 82187EA8h */ case    5:  		/* bc 4, CR6_EQ, -128 */
		/* 82187EA8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82187E28;  }
		/* 82187EA8h case    5:*/		return 0x82187EAC;
	}
	return 0x82187EAC;
} // Block from 82187E94h-82187EACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82187EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187EAC);
		  /* 82187EACh */ case    0:  		/* addi R11, R25, 32 */
		/* 82187EACh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x20);
		/* 82187EACh case    0:*/		return 0x82187EB0;
		  /* 82187EB0h */ case    1:  		/* cmplw CR6, R24, R11 */
		/* 82187EB0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82187EB0h case    1:*/		return 0x82187EB4;
		  /* 82187EB4h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 82187EB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82187ED0;  }
		/* 82187EB4h case    2:*/		return 0x82187EB8;
		  /* 82187EB8h */ case    3:  		/* lwz R29, <#[R11 + 4]> */
		/* 82187EB8h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 82187EB8h case    3:*/		return 0x82187EBC;
		  /* 82187EBCh */ case    4:  		/* mr R24, R11 */
		/* 82187EBCh case    4:*/		regs.R24 = regs.R11;
		/* 82187EBCh case    4:*/		return 0x82187EC0;
		  /* 82187EC0h */ case    5:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 82187EC0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 82187EC0h case    5:*/		return 0x82187EC4;
		  /* 82187EC4h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 82187EC4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82187ED0;  }
		/* 82187EC4h case    6:*/		return 0x82187EC8;
		  /* 82187EC8h */ case    7:  		/* cmplwi CR0, R29, 0 */
		/* 82187EC8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 82187EC8h case    7:*/		return 0x82187ECC;
		  /* 82187ECCh */ case    8:  		/* bc 4, CR0_EQ, -164 */
		/* 82187ECCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x82187E28;  }
		/* 82187ECCh case    8:*/		return 0x82187ED0;
	}
	return 0x82187ED0;
} // Block from 82187EACh-82187ED0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82187ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187ED0);
		  /* 82187ED0h */ case    0:  		/* stw R23, <#[R25 + 84]> */
		/* 82187ED0h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R25 + 0x00000054) );
		/* 82187ED0h case    0:*/		return 0x82187ED4;
		  /* 82187ED4h */ case    1:  		/* li R5, 0 */
		/* 82187ED4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82187ED4h case    1:*/		return 0x82187ED8;
		  /* 82187ED8h */ case    2:  		/* lwz R11, <#[R30 + 672]> */
		/* 82187ED8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 82187ED8h case    2:*/		return 0x82187EDC;
		  /* 82187EDCh */ case    3:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82187EDCh case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82187EDCh case    3:*/		return 0x82187EE0;
		  /* 82187EE0h */ case    4:  		/* mr R3, R30 */
		/* 82187EE0h case    4:*/		regs.R3 = regs.R30;
		/* 82187EE0h case    4:*/		return 0x82187EE4;
		  /* 82187EE4h */ case    5:  		/* bl -143020 */
		/* 82187EE4h case    5:*/		regs.LR = 0x82187EE8; return 0x82165038;
		/* 82187EE4h case    5:*/		return 0x82187EE8;
		  /* 82187EE8h */ case    6:  		/* lwz R10, <#[R25 + 48]> */
		/* 82187EE8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 82187EE8h case    6:*/		return 0x82187EEC;
		  /* 82187EECh */ case    7:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 82187EECh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 82187EECh case    7:*/		return 0x82187EF0;
		  /* 82187EF0h */ case    8:  		/* stw R3, <#[R25 + 80]> */
		/* 82187EF0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000050) );
		/* 82187EF0h case    8:*/		return 0x82187EF4;
		  /* 82187EF4h */ case    9:  		/* rlwinm R10, R10, 13, 31, 31 */
		/* 82187EF4h case    9:*/		cpu::op::rlwinm<0,13,31,31>(regs,&regs.R10,regs.R10);
		/* 82187EF4h case    9:*/		return 0x82187EF8;
		  /* 82187EF8h */ case   10:  		/* rlwinm R9, R22, 0, 24, 31 */
		/* 82187EF8h case   10:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R22);
		/* 82187EF8h case   10:*/		return 0x82187EFC;
		  /* 82187EFCh */ case   11:  		/* or R22, R10, R9 */
		/* 82187EFCh case   11:*/		cpu::op::or<0>(regs,&regs.R22,regs.R10,regs.R9);
		/* 82187EFCh case   11:*/		return 0x82187F00;
		  /* 82187F00h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 82187F00h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82187F00h case   12:*/		return 0x82187F04;
		  /* 82187F04h */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187F04h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187F04h case   13:*/		return 0x82187F08;
		  /* 82187F08h */ case   14:  		/* bc 4, CR0_EQ, 16 */
		/* 82187F08h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82187F18;  }
		/* 82187F08h case   14:*/		return 0x82187F0C;
		  /* 82187F0Ch */ case   15:  		/* mr R25, R11 */
		/* 82187F0Ch case   15:*/		regs.R25 = regs.R11;
		/* 82187F0Ch case   15:*/		return 0x82187F10;
		  /* 82187F10h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82187F10h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82187F10h case   16:*/		return 0x82187F14;
		  /* 82187F14h */ case   17:  		/* bc 4, CR6_EQ, -476 */
		/* 82187F14h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82187D38;  }
		/* 82187F14h case   17:*/		return 0x82187F18;
	}
	return 0x82187F18;
} // Block from 82187ED0h-82187F18h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82187F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82187F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82187F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82187F18);
		  /* 82187F18h */ case    0:  		/* lwz R11, <#[R30 + 672]> */
		/* 82187F18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 82187F18h case    0:*/		return 0x82187F1C;
		  /* 82187F1Ch */ case    1:  		/* li R5, 0 */
		/* 82187F1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82187F1Ch case    1:*/		return 0x82187F20;
		  /* 82187F20h */ case    2:  		/* mr R3, R30 */
		/* 82187F20h case    2:*/		regs.R3 = regs.R30;
		/* 82187F20h case    2:*/		return 0x82187F24;
		  /* 82187F24h */ case    3:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 82187F24h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 82187F24h case    3:*/		return 0x82187F28;
		  /* 82187F28h */ case    4:  		/* bl -143088 */
		/* 82187F28h case    4:*/		regs.LR = 0x82187F2C; return 0x82165038;
		/* 82187F28h case    4:*/		return 0x82187F2C;
		  /* 82187F2Ch */ case    5:  		/* mr R26, R3 */
		/* 82187F2Ch case    5:*/		regs.R26 = regs.R3;
		/* 82187F2Ch case    5:*/		return 0x82187F30;
		  /* 82187F30h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 82187F30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82187F30h case    6:*/		return 0x82187F34;
		  /* 82187F34h */ case    7:  		/* mr R25, R21 */
		/* 82187F34h case    7:*/		regs.R25 = regs.R21;
		/* 82187F34h case    7:*/		return 0x82187F38;
		  /* 82187F38h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187F38h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187F38h case    8:*/		return 0x82187F3C;
		  /* 82187F3Ch */ case    9:  		/* bc 4, CR0_EQ, 672 */
		/* 82187F3Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821881DC;  }
		/* 82187F3Ch case    9:*/		return 0x82187F40;
		  /* 82187F40h */ case   10:  		/* mr R28, R11 */
		/* 82187F40h case   10:*/		regs.R28 = regs.R11;
		/* 82187F40h case   10:*/		return 0x82187F44;
		  /* 82187F44h */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 82187F44h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187F44h case   11:*/		return 0x82187F48;
		  /* 82187F48h */ case   12:  		/* bc 12, CR0_EQ, 660 */
		/* 82187F48h case   12:*/		if ( regs.CR[0].eq ) { return 0x821881DC;  }
		/* 82187F48h case   12:*/		return 0x82187F4C;
		  /* 82187F4Ch */ case   13:  		/* mr R5, R16 */
		/* 82187F4Ch case   13:*/		regs.R5 = regs.R16;
		/* 82187F4Ch case   13:*/		return 0x82187F50;
		  /* 82187F50h */ case   14:  		/* li R4, 0 */
		/* 82187F50h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82187F50h case   14:*/		return 0x82187F54;
		  /* 82187F54h */ case   15:  		/* mr R3, R26 */
		/* 82187F54h case   15:*/		regs.R3 = regs.R26;
		/* 82187F54h case   15:*/		return 0x82187F58;
		  /* 82187F58h */ case   16:  		/* bl -1010712 */
		/* 82187F58h case   16:*/		regs.LR = 0x82187F5C; return 0x82091340;
		/* 82187F58h case   16:*/		return 0x82187F5C;
		  /* 82187F5Ch */ case   17:  		/* lwz R11, <#[R28 + 48]> */
		/* 82187F5Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 82187F5Ch case   17:*/		return 0x82187F60;
		  /* 82187F60h */ case   18:  		/* rlwinm. R11, R11, 12, 31, 31 */
		/* 82187F60h case   18:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R11,regs.R11);
		/* 82187F60h case   18:*/		return 0x82187F64;
		  /* 82187F64h */ case   19:  		/* bc 4, CR0_EQ, 196 */
		/* 82187F64h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82188028;  }
		/* 82187F64h case   19:*/		return 0x82187F68;
		  /* 82187F68h */ case   20:  		/* lwz R29, <#[R28 + 12]> */
		/* 82187F68h case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x0000000C) );
		/* 82187F68h case   20:*/		return 0x82187F6C;
		  /* 82187F6Ch */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 82187F6Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82187F6Ch case   21:*/		return 0x82187F70;
		  /* 82187F70h */ case   22:  		/* bc 12, CR6_EQ, 460 */
		/* 82187F70h case   22:*/		if ( regs.CR[6].eq ) { return 0x8218813C;  }
		/* 82187F70h case   22:*/		return 0x82187F74;
		  /* 82187F74h */ case   23:  		/* lwz R31, <#[R29]> */
		/* 82187F74h case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 82187F74h case   23:*/		return 0x82187F78;
		  /* 82187F78h */ case   24:  		/* mr R3, R26 */
		/* 82187F78h case   24:*/		regs.R3 = regs.R26;
		/* 82187F78h case   24:*/		return 0x82187F7C;
		  /* 82187F7Ch */ case   25:  		/* lwz R5, <#[R30 + 672]> */
		/* 82187F7Ch case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 82187F7Ch case   25:*/		return 0x82187F80;
		  /* 82187F80h */ case   26:  		/* lwz R4, <#[R31 + 80]> */
		/* 82187F80h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000050) );
		/* 82187F80h case   26:*/		return 0x82187F84;
		  /* 82187F84h */ case   27:  		/* bl -17116 */
		/* 82187F84h case   27:*/		regs.LR = 0x82187F88; return 0x82183CA8;
		/* 82187F84h case   27:*/		return 0x82187F88;
		  /* 82187F88h */ case   28:  		/* lwz R11, <#[R31 + 20]> */
		/* 82187F88h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82187F88h case   28:*/		return 0x82187F8C;
		  /* 82187F8Ch */ case   29:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82187F8Ch case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82187F8Ch case   29:*/		return 0x82187F90;
		  /* 82187F90h */ case   30:  		/* bc 4, CR0_EQ, 144 */
		/* 82187F90h case   30:*/		if ( !regs.CR[0].eq ) { return 0x82188020;  }
		/* 82187F90h case   30:*/		return 0x82187F94;
		  /* 82187F94h */ case   31:  		/* mr R31, R11 */
		/* 82187F94h case   31:*/		regs.R31 = regs.R11;
		/* 82187F94h case   31:*/		return 0x82187F98;
		  /* 82187F98h */ case   32:  		/* cmplwi CR0, R11, 0 */
		/* 82187F98h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82187F98h case   32:*/		return 0x82187F9C;
		  /* 82187F9Ch */ case   33:  		/* bc 12, CR0_EQ, 132 */
		/* 82187F9Ch case   33:*/		if ( regs.CR[0].eq ) { return 0x82188020;  }
		/* 82187F9Ch case   33:*/		return 0x82187FA0;
		  /* 82187FA0h */ case   34:  		/* lwz R11, <#[R31 + 8]> */
		/* 82187FA0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82187FA0h case   34:*/		return 0x82187FA4;
		  /* 82187FA4h */ case   35:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82187FA4h case   35:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82187FA4h case   35:*/		return 0x82187FA8;
		  /* 82187FA8h */ case   36:  		/* cmplwi CR6, R11, 14336 */
		/* 82187FA8h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 82187FA8h case   36:*/		return 0x82187FAC;
		  /* 82187FACh */ case   37:  		/* bc 4, CR6_EQ, 88 */
		/* 82187FACh case   37:*/		if ( !regs.CR[6].eq ) { return 0x82188004;  }
		/* 82187FACh case   37:*/		return 0x82187FB0;
		  /* 82187FB0h */ case   38:  		/* li R7, 1 */
		/* 82187FB0h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82187FB0h case   38:*/		return 0x82187FB4;
		  /* 82187FB4h */ case   39:  		/* li R6, 0 */
		/* 82187FB4h case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82187FB4h case   39:*/		return 0x82187FB8;
		  /* 82187FB8h */ case   40:  		/* mr R5, R28 */
		/* 82187FB8h case   40:*/		regs.R5 = regs.R28;
		/* 82187FB8h case   40:*/		return 0x82187FBC;
		  /* 82187FBCh */ case   41:  		/* mr R4, R31 */
		/* 82187FBCh case   41:*/		regs.R4 = regs.R31;
		/* 82187FBCh case   41:*/		return 0x82187FC0;
		  /* 82187FC0h */ case   42:  		/* mr R3, R30 */
		/* 82187FC0h case   42:*/		regs.R3 = regs.R30;
		/* 82187FC0h case   42:*/		return 0x82187FC4;
		  /* 82187FC4h */ case   43:  		/* bl 394556 */
		/* 82187FC4h case   43:*/		regs.LR = 0x82187FC8; return 0x821E8500;
		/* 82187FC4h case   43:*/		return 0x82187FC8;
		  /* 82187FC8h */ case   44:  		/* or. R11, R3, R3 */
		/* 82187FC8h case   44:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 82187FC8h case   44:*/		return 0x82187FCC;
		  /* 82187FCCh */ case   45:  		/* bc 12, CR0_EQ, 56 */
		/* 82187FCCh case   45:*/		if ( regs.CR[0].eq ) { return 0x82188004;  }
		/* 82187FCCh case   45:*/		return 0x82187FD0;
		  /* 82187FD0h */ case   46:  		/* lwz R10, <#[R11 + 12]> */
		/* 82187FD0h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82187FD0h case   46:*/		return 0x82187FD4;
		  /* 82187FD4h */ case   47:  		/* mr R3, R30 */
		/* 82187FD4h case   47:*/		regs.R3 = regs.R30;
		/* 82187FD4h case   47:*/		return 0x82187FD8;
		  /* 82187FD8h */ case   48:  		/* lwz R11, <#[R11]> */
		/* 82187FD8h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82187FD8h case   48:*/		return 0x82187FDC;
		  /* 82187FDCh */ case   49:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 82187FDCh case   49:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 82187FDCh case   49:*/		return 0x82187FE0;
		  /* 82187FE0h */ case   50:  		/* lhz R10, <#[R10 + 18]> */
		/* 82187FE0h case   50:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000012) );
		/* 82187FE0h case   50:*/		return 0x82187FE4;
		  /* 82187FE4h */ case   51:  		/* add R4, R10, R11 */
		/* 82187FE4h case   51:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82187FE4h case   51:*/		return 0x82187FE8;
		  /* 82187FE8h */ case   52:  		/* bl -18056 */
		/* 82187FE8h case   52:*/		regs.LR = 0x82187FEC; return 0x82183960;
		/* 82187FE8h case   52:*/		return 0x82187FEC;
		  /* 82187FECh */ case   53:  		/* rlwinm R11, R3, 29, 3, 28 */
		/* 82187FECh case   53:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R3);
		/* 82187FECh case   53:*/		return 0x82187FF0;
		  /* 82187FF0h */ case   54:  		/* rldicl R10, R3, 0, 58 */
		/* 82187FF0h case   54:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 82187FF0h case   54:*/		return 0x82187FF4;
		  /* 82187FF4h */ case   55:  		/* sld R10, R17, R10 */
		/* 82187FF4h case   55:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 82187FF4h case   55:*/		return 0x82187FF8;
		  /* 82187FF8h */ case   56:  		/* ldx R9, <#[R11 + R26]> */
		/* 82187FF8h case   56:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82187FF8h case   56:*/		return 0x82187FFC;
		  /* 82187FFCh */ case   57:  		/* or R10, R10, R9 */
		/* 82187FFCh case   57:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82187FFCh case   57:*/		return 0x82188000;
		  /* 82188000h */ case   58:  		/* stdx R10, <#[R11 + R26]> */
		/* 82188000h case   58:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82188000h case   58:*/		return 0x82188004;
	}
	return 0x82188004;
} // Block from 82187F18h-82188004h (59 instructions)

//////////////////////////////////////////////////////
// Block at 82188004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188004);
		  /* 82188004h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82188004h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82188004h case    0:*/		return 0x82188008;
		  /* 82188008h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82188008h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82188008h case    1:*/		return 0x8218800C;
		  /* 8218800Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218800Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218800Ch case    2:*/		return 0x82188010;
		  /* 82188010h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82188010h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188020;  }
		/* 82188010h case    3:*/		return 0x82188014;
		  /* 82188014h */ case    4:  		/* mr R31, R11 */
		/* 82188014h case    4:*/		regs.R31 = regs.R11;
		/* 82188014h case    4:*/		return 0x82188018;
		  /* 82188018h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82188018h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188018h case    5:*/		return 0x8218801C;
		  /* 8218801Ch */ case    6:  		/* bc 4, CR6_EQ, -124 */
		/* 8218801Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82187FA0;  }
		/* 8218801Ch case    6:*/		return 0x82188020;
	}
	return 0x82188020;
} // Block from 82188004h-82188020h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188020);
		  /* 82188020h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 82188020h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 82188020h case    0:*/		return 0x82188024;
		  /* 82188024h */ case    1:  		/* b -184 */
		/* 82188024h case    1:*/		return 0x82187F6C;
		/* 82188024h case    1:*/		return 0x82188028;
	}
	return 0x82188028;
} // Block from 82188020h-82188028h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82188028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188028);
		  /* 82188028h */ case    0:  		/* mr R3, R28 */
		/* 82188028h case    0:*/		regs.R3 = regs.R28;
		/* 82188028h case    0:*/		return 0x8218802C;
		  /* 8218802Ch */ case    1:  		/* bl -18316 */
		/* 8218802Ch case    1:*/		regs.LR = 0x82188030; return 0x821838A0;
		/* 8218802Ch case    1:*/		return 0x82188030;
		  /* 82188030h */ case    2:  		/* lwz R27, <#[R3 + 8]> */
		/* 82188030h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x00000008) );
		/* 82188030h case    2:*/		return 0x82188034;
		  /* 82188034h */ case    3:  		/* mr R29, R3 */
		/* 82188034h case    3:*/		regs.R29 = regs.R3;
		/* 82188034h case    3:*/		return 0x82188038;
		  /* 82188038h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 82188038h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82188038h case    4:*/		return 0x8218803C;
		  /* 8218803Ch */ case    5:  		/* bc 12, CR6_EQ, 256 */
		/* 8218803Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8218813C;  }
		/* 8218803Ch case    5:*/		return 0x82188040;
		  /* 82188040h */ case    6:  		/* lwz R11, <#[R27 + 4]> */
		/* 82188040h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82188040h case    6:*/		return 0x82188044;
		  /* 82188044h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 82188044h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82188044h case    7:*/		return 0x82188048;
		  /* 82188048h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82188048h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82188048h case    8:*/		return 0x8218804C;
		  /* 8218804Ch */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 8218804Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82188068;  }
		/* 8218804Ch case    9:*/		return 0x82188050;
		  /* 82188050h */ case   10:  		/* lwz R11, <#[R10]> */
		/* 82188050h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82188050h case   10:*/		return 0x82188054;
		  /* 82188054h */ case   11:  		/* lwz R9, <#[R11 + 48]> */
		/* 82188054h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 82188054h case   11:*/		return 0x82188058;
		  /* 82188058h */ case   12:  		/* rlwinm. R9, R9, 11, 31, 31 */
		/* 82188058h case   12:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R9,regs.R9);
		/* 82188058h case   12:*/		return 0x8218805C;
		  /* 8218805Ch */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 8218805Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x8218806C;  }
		/* 8218805Ch case   13:*/		return 0x82188060;
		  /* 82188060h */ case   14:  		/* lwz R10, <#[R10 + 8]> */
		/* 82188060h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82188060h case   14:*/		return 0x82188064;
		  /* 82188064h */ case   15:  		/* b -28 */
		/* 82188064h case   15:*/		return 0x82188048;
		/* 82188064h case   15:*/		return 0x82188068;
	}
	return 0x82188068;
} // Block from 82188028h-82188068h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82188068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188068);
		  /* 82188068h */ case    0:  		/* mr R11, R21 */
		/* 82188068h case    0:*/		regs.R11 = regs.R21;
		/* 82188068h case    0:*/		return 0x8218806C;
	}
	return 0x8218806C;
} // Block from 82188068h-8218806Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218806Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218806C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218806C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218806C);
		  /* 8218806Ch */ case    0:  		/* lwz R11, <#[R11 + 20]> */
		/* 8218806Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 8218806Ch case    0:*/		return 0x82188070;
		  /* 82188070h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188070h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188070h case    1:*/		return 0x82188074;
		  /* 82188074h */ case    2:  		/* bc 4, CR0_EQ, 192 */
		/* 82188074h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82188134;  }
		/* 82188074h case    2:*/		return 0x82188078;
		  /* 82188078h */ case    3:  		/* mr R31, R11 */
		/* 82188078h case    3:*/		regs.R31 = regs.R11;
		/* 82188078h case    3:*/		return 0x8218807C;
		  /* 8218807Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8218807Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218807Ch case    4:*/		return 0x82188080;
		  /* 82188080h */ case    5:  		/* bc 12, CR0_EQ, 180 */
		/* 82188080h case    5:*/		if ( regs.CR[0].eq ) { return 0x82188134;  }
		/* 82188080h case    5:*/		return 0x82188084;
		  /* 82188084h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 82188084h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82188084h case    6:*/		return 0x82188088;
		  /* 82188088h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82188088h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82188088h case    7:*/		return 0x8218808C;
		  /* 8218808Ch */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 8218808Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8218808Ch case    8:*/		return 0x82188090;
		  /* 82188090h */ case    9:  		/* bc 4, CR6_EQ, 136 */
		/* 82188090h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82188118;  }
		/* 82188090h case    9:*/		return 0x82188094;
		  /* 82188094h */ case   10:  		/* li R7, 1 */
		/* 82188094h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82188094h case   10:*/		return 0x82188098;
		  /* 82188098h */ case   11:  		/* li R6, 0 */
		/* 82188098h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82188098h case   11:*/		return 0x8218809C;
		  /* 8218809Ch */ case   12:  		/* mr R5, R28 */
		/* 8218809Ch case   12:*/		regs.R5 = regs.R28;
		/* 8218809Ch case   12:*/		return 0x821880A0;
		  /* 821880A0h */ case   13:  		/* mr R4, R31 */
		/* 821880A0h case   13:*/		regs.R4 = regs.R31;
		/* 821880A0h case   13:*/		return 0x821880A4;
		  /* 821880A4h */ case   14:  		/* mr R3, R30 */
		/* 821880A4h case   14:*/		regs.R3 = regs.R30;
		/* 821880A4h case   14:*/		return 0x821880A8;
		  /* 821880A8h */ case   15:  		/* bl 394328 */
		/* 821880A8h case   15:*/		regs.LR = 0x821880AC; return 0x821E8500;
		/* 821880A8h case   15:*/		return 0x821880AC;
		  /* 821880ACh */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 821880ACh case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821880ACh case   16:*/		return 0x821880B0;
		  /* 821880B0h */ case   17:  		/* bc 12, CR0_EQ, 104 */
		/* 821880B0h case   17:*/		if ( regs.CR[0].eq ) { return 0x82188118;  }
		/* 821880B0h case   17:*/		return 0x821880B4;
		  /* 821880B4h */ case   18:  		/* lwz R10, <#[R29 + 48]> */
		/* 821880B4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000030) );
		/* 821880B4h case   18:*/		return 0x821880B8;
		  /* 821880B8h */ case   19:  		/* lwz R11, <#[R3 + 12]> */
		/* 821880B8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821880B8h case   19:*/		return 0x821880BC;
		  /* 821880BCh */ case   20:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821880BCh case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821880BCh case   20:*/		return 0x821880C0;
		  /* 821880C0h */ case   21:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821880C0h case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821880C0h case   21:*/		return 0x821880C4;
		  /* 821880C4h */ case   22:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821880C4h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821880C4h case   22:*/		return 0x821880C8;
		  /* 821880C8h */ case   23:  		/* lwz R8, <#[R11 + 28]> */
		/* 821880C8h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 821880C8h case   23:*/		return 0x821880CC;
		  /* 821880CCh */ case   24:  		/* addi R10, R10, 1 */
		/* 821880CCh case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821880CCh case   24:*/		return 0x821880D0;
		  /* 821880D0h */ case   25:  		/* slw R9, R17, R9 */
		/* 821880D0h case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 821880D0h case   25:*/		return 0x821880D4;
		  /* 821880D4h */ case   26:  		/* lwz R8, <#[R8 + 40]> */
		/* 821880D4h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000028) );
		/* 821880D4h case   26:*/		return 0x821880D8;
		  /* 821880D8h */ case   27:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821880D8h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821880D8h case   27:*/		return 0x821880DC;
		  /* 821880DCh */ case   28:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821880DCh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821880DCh case   28:*/		return 0x821880E0;
		  /* 821880E0h */ case   29:  		/* and. R10, R10, R9 */
		/* 821880E0h case   29:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821880E0h case   29:*/		return 0x821880E4;
		  /* 821880E4h */ case   30:  		/* bc 12, CR0_EQ, 52 */
		/* 821880E4h case   30:*/		if ( regs.CR[0].eq ) { return 0x82188118;  }
		/* 821880E4h case   30:*/		return 0x821880E8;
		  /* 821880E8h */ case   31:  		/* lwz R9, <#[R3]> */
		/* 821880E8h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821880E8h case   31:*/		return 0x821880EC;
		  /* 821880ECh */ case   32:  		/* mr R3, R30 */
		/* 821880ECh case   32:*/		regs.R3 = regs.R30;
		/* 821880ECh case   32:*/		return 0x821880F0;
		  /* 821880F0h */ case   33:  		/* lhz R10, <#[R11 + 18]> */
		/* 821880F0h case   33:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000012) );
		/* 821880F0h case   33:*/		return 0x821880F4;
		  /* 821880F4h */ case   34:  		/* rlwinm R11, R9, 27, 30, 31 */
		/* 821880F4h case   34:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R9);
		/* 821880F4h case   34:*/		return 0x821880F8;
		  /* 821880F8h */ case   35:  		/* add R4, R10, R11 */
		/* 821880F8h case   35:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 821880F8h case   35:*/		return 0x821880FC;
		  /* 821880FCh */ case   36:  		/* bl -18332 */
		/* 821880FCh case   36:*/		regs.LR = 0x82188100; return 0x82183960;
		/* 821880FCh case   36:*/		return 0x82188100;
		  /* 82188100h */ case   37:  		/* rlwinm R11, R3, 29, 3, 28 */
		/* 82188100h case   37:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R3);
		/* 82188100h case   37:*/		return 0x82188104;
		  /* 82188104h */ case   38:  		/* rldicl R10, R3, 0, 58 */
		/* 82188104h case   38:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 82188104h case   38:*/		return 0x82188108;
		  /* 82188108h */ case   39:  		/* sld R10, R17, R10 */
		/* 82188108h case   39:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 82188108h case   39:*/		return 0x8218810C;
		  /* 8218810Ch */ case   40:  		/* ldx R9, <#[R11 + R26]> */
		/* 8218810Ch case   40:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8218810Ch case   40:*/		return 0x82188110;
		  /* 82188110h */ case   41:  		/* or R10, R10, R9 */
		/* 82188110h case   41:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82188110h case   41:*/		return 0x82188114;
		  /* 82188114h */ case   42:  		/* stdx R10, <#[R11 + R26]> */
		/* 82188114h case   42:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82188114h case   42:*/		return 0x82188118;
	}
	return 0x82188118;
} // Block from 8218806Ch-82188118h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82188118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188118);
		  /* 82188118h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82188118h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82188118h case    0:*/		return 0x8218811C;
		  /* 8218811Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8218811Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8218811Ch case    1:*/		return 0x82188120;
		  /* 82188120h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188120h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188120h case    2:*/		return 0x82188124;
		  /* 82188124h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82188124h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188134;  }
		/* 82188124h case    3:*/		return 0x82188128;
		  /* 82188128h */ case    4:  		/* mr R31, R11 */
		/* 82188128h case    4:*/		regs.R31 = regs.R11;
		/* 82188128h case    4:*/		return 0x8218812C;
		  /* 8218812Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218812Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218812Ch case    5:*/		return 0x82188130;
		  /* 82188130h */ case    6:  		/* bc 4, CR6_EQ, -172 */
		/* 82188130h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82188084;  }
		/* 82188130h case    6:*/		return 0x82188134;
	}
	return 0x82188134;
} // Block from 82188118h-82188134h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188134);
		  /* 82188134h */ case    0:  		/* lwz R27, <#[R27 + 12]> */
		/* 82188134h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x0000000C) );
		/* 82188134h case    0:*/		return 0x82188138;
		  /* 82188138h */ case    1:  		/* b -256 */
		/* 82188138h case    1:*/		return 0x82188038;
		/* 82188138h case    1:*/		return 0x8218813C;
	}
	return 0x8218813C;
} // Block from 82188134h-8218813Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218813Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218813C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218813C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218813C);
		  /* 8218813Ch */ case    0:  		/* mr R5, R16 */
		/* 8218813Ch case    0:*/		regs.R5 = regs.R16;
		/* 8218813Ch case    0:*/		return 0x82188140;
		  /* 82188140h */ case    1:  		/* lwz R3, <#[R28 + 88]> */
		/* 82188140h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000058) );
		/* 82188140h case    1:*/		return 0x82188144;
		  /* 82188144h */ case    2:  		/* mr R4, R26 */
		/* 82188144h case    2:*/		regs.R4 = regs.R26;
		/* 82188144h case    2:*/		return 0x82188148;
		  /* 82188148h */ case    3:  		/* bl -1009560 */
		/* 82188148h case    3:*/		regs.LR = 0x8218814C; return 0x820919B0;
		/* 82188148h case    3:*/		return 0x8218814C;
		  /* 8218814Ch */ case    4:  		/* mr R3, R26 */
		/* 8218814Ch case    4:*/		regs.R3 = regs.R26;
		/* 8218814Ch case    4:*/		return 0x82188150;
		  /* 82188150h */ case    5:  		/* lwz R5, <#[R30 + 672]> */
		/* 82188150h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 82188150h case    5:*/		return 0x82188154;
		  /* 82188154h */ case    6:  		/* lwz R4, <#[R28 + 84]> */
		/* 82188154h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000054) );
		/* 82188154h case    6:*/		return 0x82188158;
		  /* 82188158h */ case    7:  		/* bl -17512 */
		/* 82188158h case    7:*/		regs.LR = 0x8218815C; return 0x82183CF0;
		/* 82188158h case    7:*/		return 0x8218815C;
		  /* 8218815Ch */ case    8:  		/* mr R3, R26 */
		/* 8218815Ch case    8:*/		regs.R3 = regs.R26;
		/* 8218815Ch case    8:*/		return 0x82188160;
		  /* 82188160h */ case    9:  		/* lwz R5, <#[R30 + 672]> */
		/* 82188160h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 82188160h case    9:*/		return 0x82188164;
		  /* 82188164h */ case   10:  		/* lwz R4, <#[R28 + 80]> */
		/* 82188164h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000050) );
		/* 82188164h case   10:*/		return 0x82188168;
		  /* 82188168h */ case   11:  		/* bl -17600 */
		/* 82188168h case   11:*/		regs.LR = 0x8218816C; return 0x82183CA8;
		/* 82188168h case   11:*/		return 0x8218816C;
		  /* 8218816Ch */ case   12:  		/* lwz R3, <#[R28 + 80]> */
		/* 8218816Ch case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000050) );
		/* 8218816Ch case   12:*/		return 0x82188170;
		  /* 82188170h */ case   13:  		/* mr R10, R26 */
		/* 82188170h case   13:*/		regs.R10 = regs.R26;
		/* 82188170h case   13:*/		return 0x82188174;
		  /* 82188174h */ case   14:  		/* mr R9, R21 */
		/* 82188174h case   14:*/		regs.R9 = regs.R21;
		/* 82188174h case   14:*/		return 0x82188178;
		  /* 82188178h */ case   15:  		/* cmplwi CR0, R16, 0 */
		/* 82188178h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R16,0x00000000);
		/* 82188178h case   15:*/		return 0x8218817C;
		  /* 8218817Ch */ case   16:  		/* mr R11, R3 */
		/* 8218817Ch case   16:*/		regs.R11 = regs.R3;
		/* 8218817Ch case   16:*/		return 0x82188180;
		  /* 82188180h */ case   17:  		/* bc 12, CR0_EQ, 40 */
		/* 82188180h case   17:*/		if ( regs.CR[0].eq ) { return 0x821881A8;  }
		/* 82188180h case   17:*/		return 0x82188184;
		  /* 82188184h */ case   18:  		/* add R8, R3, R16 */
		/* 82188184h case   18:*/		cpu::op::add<0>(regs,&regs.R8,regs.R3,regs.R16);
		/* 82188184h case   18:*/		return 0x82188188;
		  /* 82188188h */ case   19:  		/* lbz R9, <#[R11]> */
		/* 82188188h case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82188188h case   19:*/		return 0x8218818C;
		  /* 8218818Ch */ case   20:  		/* lbz R7, <#[R10]> */
		/* 8218818Ch case   20:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8218818Ch case   20:*/		return 0x82188190;
		  /* 82188190h */ case   21:  		/* subf. R9, R7, R9 */
		/* 82188190h case   21:*/		cpu::op::subf<1>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82188190h case   21:*/		return 0x82188194;
		  /* 82188194h */ case   22:  		/* bc 4, CR0_EQ, 20 */
		/* 82188194h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821881A8;  }
		/* 82188194h case   22:*/		return 0x82188198;
		  /* 82188198h */ case   23:  		/* addi R11, R11, 1 */
		/* 82188198h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82188198h case   23:*/		return 0x8218819C;
		  /* 8218819Ch */ case   24:  		/* addi R10, R10, 1 */
		/* 8218819Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8218819Ch case   24:*/		return 0x821881A0;
		  /* 821881A0h */ case   25:  		/* cmpw CR6, R11, R8 */
		/* 821881A0h case   25:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 821881A0h case   25:*/		return 0x821881A4;
		  /* 821881A4h */ case   26:  		/* bc 4, CR6_EQ, -28 */
		/* 821881A4h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82188188;  }
		/* 821881A4h case   26:*/		return 0x821881A8;
	}
	return 0x821881A8;
} // Block from 8218813Ch-821881A8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821881A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821881A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821881A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821881A8);
		  /* 821881A8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821881A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821881A8h case    0:*/		return 0x821881AC;
		  /* 821881ACh */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821881ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821881C0;  }
		/* 821881ACh case    1:*/		return 0x821881B0;
		  /* 821881B0h */ case    2:  		/* mr R5, R16 */
		/* 821881B0h case    2:*/		regs.R5 = regs.R16;
		/* 821881B0h case    2:*/		return 0x821881B4;
		  /* 821881B4h */ case    3:  		/* mr R4, R26 */
		/* 821881B4h case    3:*/		regs.R4 = regs.R26;
		/* 821881B4h case    3:*/		return 0x821881B8;
		  /* 821881B8h */ case    4:  		/* bl -1009672 */
		/* 821881B8h case    4:*/		regs.LR = 0x821881BC; return 0x820919B0;
		/* 821881B8h case    4:*/		return 0x821881BC;
		  /* 821881BCh */ case    5:  		/* mr R25, R17 */
		/* 821881BCh case    5:*/		regs.R25 = regs.R17;
		/* 821881BCh case    5:*/		return 0x821881C0;
	}
	return 0x821881C0;
} // Block from 821881A8h-821881C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821881C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821881C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821881C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821881C0);
		  /* 821881C0h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821881C0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821881C0h case    0:*/		return 0x821881C4;
		  /* 821881C4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821881C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821881C4h case    1:*/		return 0x821881C8;
		  /* 821881C8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821881C8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821881C8h case    2:*/		return 0x821881CC;
		  /* 821881CCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821881CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821881DC;  }
		/* 821881CCh case    3:*/		return 0x821881D0;
		  /* 821881D0h */ case    4:  		/* mr R28, R11 */
		/* 821881D0h case    4:*/		regs.R28 = regs.R11;
		/* 821881D0h case    4:*/		return 0x821881D4;
		  /* 821881D4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821881D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821881D4h case    5:*/		return 0x821881D8;
		  /* 821881D8h */ case    6:  		/* bc 4, CR6_EQ, -652 */
		/* 821881D8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82187F4C;  }
		/* 821881D8h case    6:*/		return 0x821881DC;
	}
	return 0x821881DC;
} // Block from 821881C0h-821881DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821881DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821881DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821881DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821881DC);
		  /* 821881DCh */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821881DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821881DCh case    0:*/		return 0x821881E0;
		  /* 821881E0h */ case    1:  		/* bc 4, CR0_EQ, -688 */
		/* 821881E0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82187F30;  }
		/* 821881E0h case    1:*/		return 0x821881E4;
		  /* 821881E4h */ case    2:  		/* lwz R11, <#[R30 + 40]> */
		/* 821881E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821881E4h case    2:*/		return 0x821881E8;
		  /* 821881E8h */ case    3:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 821881E8h case    3:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 821881E8h case    3:*/		return 0x821881EC;
		  /* 821881ECh */ case    4:  		/* bc 12, CR0_EQ, 368 */
		/* 821881ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x8218835C;  }
		/* 821881ECh case    4:*/		return 0x821881F0;
		  /* 821881F0h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 821881F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821881F0h case    5:*/		return 0x821881F4;
		  /* 821881F4h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821881F4h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821881F4h case    6:*/		return 0x821881F8;
		  /* 821881F8h */ case    7:  		/* bc 4, CR0_EQ, 356 */
		/* 821881F8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8218835C;  }
		/* 821881F8h case    7:*/		return 0x821881FC;
		  /* 821881FCh */ case    8:  		/* mr R27, R11 */
		/* 821881FCh case    8:*/		regs.R27 = regs.R11;
		/* 821881FCh case    8:*/		return 0x82188200;
		  /* 82188200h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 82188200h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82188200h case    9:*/		return 0x82188204;
		  /* 82188204h */ case   10:  		/* bc 12, CR0_EQ, 344 */
		/* 82188204h case   10:*/		if ( regs.CR[0].eq ) { return 0x8218835C;  }
		/* 82188204h case   10:*/		return 0x82188208;
		  /* 82188208h */ case   11:  		/* lwz R11, <#[R27 + 40]> */
		/* 82188208h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 82188208h case   11:*/		return 0x8218820C;
		  /* 8218820Ch */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8218820Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218820Ch case   12:*/		return 0x82188210;
		  /* 82188210h */ case   13:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 82188210h case   13:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 82188210h case   13:*/		return 0x82188214;
		  /* 82188214h */ case   14:  		/* bc 12, CR0_EQ, 300 */
		/* 82188214h case   14:*/		if ( regs.CR[0].eq ) { return 0x82188340;  }
		/* 82188214h case   14:*/		return 0x82188218;
		  /* 82188218h */ case   15:  		/* lwz R11, <#[R27 + 28]> */
		/* 82188218h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 82188218h case   15:*/		return 0x8218821C;
		  /* 8218821Ch */ case   16:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218821Ch case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218821Ch case   16:*/		return 0x82188220;
		  /* 82188220h */ case   17:  		/* bc 4, CR0_EQ, 288 */
		/* 82188220h case   17:*/		if ( !regs.CR[0].eq ) { return 0x82188340;  }
		/* 82188220h case   17:*/		return 0x82188224;
		  /* 82188224h */ case   18:  		/* mr R29, R11 */
		/* 82188224h case   18:*/		regs.R29 = regs.R11;
		/* 82188224h case   18:*/		return 0x82188228;
		  /* 82188228h */ case   19:  		/* cmplwi CR0, R11, 0 */
		/* 82188228h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82188228h case   19:*/		return 0x8218822C;
		  /* 8218822Ch */ case   20:  		/* bc 12, CR0_EQ, 276 */
		/* 8218822Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x82188340;  }
		/* 8218822Ch case   20:*/		return 0x82188230;
		  /* 82188230h */ case   21:  		/* lwz R11, <#[R29 + 8]> */
		/* 82188230h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82188230h case   21:*/		return 0x82188234;
		  /* 82188234h */ case   22:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82188234h case   22:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82188234h case   22:*/		return 0x82188238;
		  /* 82188238h */ case   23:  		/* bc 12, CR0_EQ, 236 */
		/* 82188238h case   23:*/		if ( regs.CR[0].eq ) { return 0x82188324;  }
		/* 82188238h case   23:*/		return 0x8218823C;
		  /* 8218823Ch */ case   24:  		/* mr R3, R29 */
		/* 8218823Ch case   24:*/		regs.R3 = regs.R29;
		/* 8218823Ch case   24:*/		return 0x82188240;
		  /* 82188240h */ case   25:  		/* bl -147712 */
		/* 82188240h case   25:*/		regs.LR = 0x82188244; return 0x82164140;
		/* 82188240h case   25:*/		return 0x82188244;
		  /* 82188244h */ case   26:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82188244h case   26:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82188244h case   26:*/		return 0x82188248;
		  /* 82188248h */ case   27:  		/* bc 12, CR0_EQ, 220 */
		/* 82188248h case   27:*/		if ( regs.CR[0].eq ) { return 0x82188324;  }
		/* 82188248h case   27:*/		return 0x8218824C;
		  /* 8218824Ch */ case   28:  		/* rlwinm R31, R27, 0, 0, 30 */
		/* 8218824Ch case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R31,regs.R27);
		/* 8218824Ch case   28:*/		return 0x82188250;
		  /* 82188250h */ case   29:  		/* mr R28, R21 */
		/* 82188250h case   29:*/		regs.R28 = regs.R21;
		/* 82188250h case   29:*/		return 0x82188254;
		  /* 82188254h */ case   30:  		/* lwz R11, <#[R31 + 4]> */
		/* 82188254h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82188254h case   30:*/		return 0x82188258;
		  /* 82188258h */ case   31:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188258h case   31:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188258h case   31:*/		return 0x8218825C;
		  /* 8218825Ch */ case   32:  		/* bc 4, CR0_EQ, 200 */
		/* 8218825Ch case   32:*/		if ( !regs.CR[0].eq ) { return 0x82188324;  }
		/* 8218825Ch case   32:*/		return 0x82188260;
		  /* 82188260h */ case   33:  		/* mr R9, R11 */
		/* 82188260h case   33:*/		regs.R9 = regs.R11;
		/* 82188260h case   33:*/		return 0x82188264;
		  /* 82188264h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 82188264h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188264h case   34:*/		return 0x82188268;
		  /* 82188268h */ case   35:  		/* bc 12, CR6_EQ, 188 */
		/* 82188268h case   35:*/		if ( regs.CR[6].eq ) { return 0x82188324;  }
		/* 82188268h case   35:*/		return 0x8218826C;
		  /* 8218826Ch */ case   36:  		/* lwz R8, <#[R29 + 4]> */
		/* 8218826Ch case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000004) );
		/* 8218826Ch case   36:*/		return 0x82188270;
		  /* 82188270h */ case   37:  		/* mr R10, R8 */
		/* 82188270h case   37:*/		regs.R10 = regs.R8;
		/* 82188270h case   37:*/		return 0x82188274;
		  /* 82188274h */ case   38:  		/* cmplwi CR6, R10, 0 */
		/* 82188274h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82188274h case   38:*/		return 0x82188278;
		  /* 82188278h */ case   39:  		/* bc 12, CR6_EQ, 40 */
		/* 82188278h case   39:*/		if ( regs.CR[6].eq ) { return 0x821882A0;  }
		/* 82188278h case   39:*/		return 0x8218827C;
		  /* 8218827Ch */ case   40:  		/* lwz R11, <#[R10 + 16]> */
		/* 8218827Ch case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8218827Ch case   40:*/		return 0x82188280;
		  /* 82188280h */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 82188280h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188280h case   41:*/		return 0x82188284;
		  /* 82188284h */ case   42:  		/* bc 12, CR6_EQ, 16 */
		/* 82188284h case   42:*/		if ( regs.CR[6].eq ) { return 0x82188294;  }
		/* 82188284h case   42:*/		return 0x82188288;
		  /* 82188288h */ case   43:  		/* lwz R11, <#[R11 + 28]> */
		/* 82188288h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82188288h case   43:*/		return 0x8218828C;
		  /* 8218828Ch */ case   44:  		/* cmplw CR6, R11, R9 */
		/* 8218828Ch case   44:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8218828Ch case   44:*/		return 0x82188290;
		  /* 82188290h */ case   45:  		/* bc 12, CR6_EQ, 12 */
		/* 82188290h case   45:*/		if ( regs.CR[6].eq ) { return 0x8218829C;  }
		/* 82188290h case   45:*/		return 0x82188294;
	}
	return 0x82188294;
} // Block from 821881DCh-82188294h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82188294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188294);
		  /* 82188294h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 82188294h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82188294h case    0:*/		return 0x82188298;
		  /* 82188298h */ case    1:  		/* b -36 */
		/* 82188298h case    1:*/		return 0x82188274;
		/* 82188298h case    1:*/		return 0x8218829C;
	}
	return 0x8218829C;
} // Block from 82188294h-8218829Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218829Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218829C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218829C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218829C);
		  /* 8218829Ch */ case    0:  		/* mr R28, R9 */
		/* 8218829Ch case    0:*/		regs.R28 = regs.R9;
		/* 8218829Ch case    0:*/		return 0x821882A0;
	}
	return 0x821882A0;
} // Block from 8218829Ch-821882A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821882A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821882A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821882A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821882A0);
		  /* 821882A0h */ case    0:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 821882A0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821882A0h case    0:*/		return 0x821882A4;
		  /* 821882A4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821882A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821882A4h case    1:*/		return 0x821882A8;
		  /* 821882A8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821882A8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821882A8h case    2:*/		return 0x821882AC;
		  /* 821882ACh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821882ACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821882BC;  }
		/* 821882ACh case    3:*/		return 0x821882B0;
		  /* 821882B0h */ case    4:  		/* mr R9, R11 */
		/* 821882B0h case    4:*/		regs.R9 = regs.R11;
		/* 821882B0h case    4:*/		return 0x821882B4;
		  /* 821882B4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821882B4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821882B4h case    5:*/		return 0x821882B8;
		  /* 821882B8h */ case    6:  		/* bc 4, CR6_EQ, -72 */
		/* 821882B8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82188270;  }
		/* 821882B8h case    6:*/		return 0x821882BC;
	}
	return 0x821882BC;
} // Block from 821882A0h-821882BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821882BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821882BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821882BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821882BC);
		  /* 821882BCh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821882BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821882BCh case    0:*/		return 0x821882C0;
		  /* 821882C0h */ case    1:  		/* bc 12, CR6_EQ, 100 */
		/* 821882C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82188324;  }
		/* 821882C0h case    1:*/		return 0x821882C4;
		  /* 821882C4h */ case    2:  		/* mr R3, R30 */
		/* 821882C4h case    2:*/		regs.R3 = regs.R30;
		/* 821882C4h case    2:*/		return 0x821882C8;
		  /* 821882C8h */ case    3:  		/* lhz R4, <#[R29 + 18]> */
		/* 821882C8h case    3:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000012) );
		/* 821882C8h case    3:*/		return 0x821882CC;
		  /* 821882CCh */ case    4:  		/* bl -18796 */
		/* 821882CCh case    4:*/		regs.LR = 0x821882D0; return 0x82183960;
		/* 821882CCh case    4:*/		return 0x821882D0;
		  /* 821882D0h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 821882D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821882D0h case    5:*/		return 0x821882D4;
		  /* 821882D4h */ case    6:  		/* b 64 */
		/* 821882D4h case    6:*/		return 0x82188314;
		/* 821882D4h case    6:*/		return 0x821882D8;
		  /* 821882D8h */ case    7:  		/* cmplw CR6, R11, R28 */
		/* 821882D8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821882D8h case    7:*/		return 0x821882DC;
		  /* 821882DCh */ case    8:  		/* bc 12, CR6_EQ, 72 */
		/* 821882DCh case    8:*/		if ( regs.CR[6].eq ) { return 0x82188324;  }
		/* 821882DCh case    8:*/		return 0x821882E0;
		  /* 821882E0h */ case    9:  		/* lwz R10, <#[R11 + 88]> */
		/* 821882E0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000058) );
		/* 821882E0h case    9:*/		return 0x821882E4;
		  /* 821882E4h */ case   10:  		/* rlwinm R9, R3, 29, 3, 28 */
		/* 821882E4h case   10:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R9,regs.R3);
		/* 821882E4h case   10:*/		return 0x821882E8;
		  /* 821882E8h */ case   11:  		/* rldicl R8, R3, 0, 58 */
		/* 821882E8h case   11:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R8,regs.R3);
		/* 821882E8h case   11:*/		return 0x821882EC;
		  /* 821882ECh */ case   12:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 821882ECh case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 821882ECh case   12:*/		return 0x821882F0;
		  /* 821882F0h */ case   13:  		/* sld R8, R17, R8 */
		/* 821882F0h case   13:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R17,regs.R8);
		/* 821882F0h case   13:*/		return 0x821882F4;
		  /* 821882F4h */ case   14:  		/* ldx R6, <#[R9 + R10]> */
		/* 821882F4h case   14:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821882F4h case   14:*/		return 0x821882F8;
		  /* 821882F8h */ case   15:  		/* or R6, R8, R6 */
		/* 821882F8h case   15:*/		cpu::op::or<0>(regs,&regs.R6,regs.R8,regs.R6);
		/* 821882F8h case   15:*/		return 0x821882FC;
		  /* 821882FCh */ case   16:  		/* stdx R6, <#[R9 + R10]> */
		/* 821882FCh case   16:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821882FCh case   16:*/		return 0x82188300;
		  /* 82188300h */ case   17:  		/* lwz R11, <#[R11 + 80]> */
		/* 82188300h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 82188300h case   17:*/		return 0x82188304;
		  /* 82188304h */ case   18:  		/* ldx R10, <#[R9 + R11]> */
		/* 82188304h case   18:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82188304h case   18:*/		return 0x82188308;
		  /* 82188308h */ case   19:  		/* or R10, R8, R10 */
		/* 82188308h case   19:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82188308h case   19:*/		return 0x8218830C;
		  /* 8218830Ch */ case   20:  		/* stdx R10, <#[R9 + R11]> */
		/* 8218830Ch case   20:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8218830Ch case   20:*/		return 0x82188310;
		  /* 82188310h */ case   21:  		/* lwz R11, <#[R7 + 4]> */
		/* 82188310h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 82188310h case   21:*/		return 0x82188314;
	}
	return 0x82188314;
} // Block from 821882BCh-82188314h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82188314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188314);
		  /* 82188314h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188314h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188314h case    0:*/		return 0x82188318;
		  /* 82188318h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82188318h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82188324;  }
		/* 82188318h case    1:*/		return 0x8218831C;
		  /* 8218831Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8218831Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218831Ch case    2:*/		return 0x82188320;
		  /* 82188320h */ case    3:  		/* bc 4, CR6_EQ, -72 */
		/* 82188320h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821882D8;  }
		/* 82188320h case    3:*/		return 0x82188324;
	}
	return 0x82188324;
} // Block from 82188314h-82188324h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82188324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188324);
		  /* 82188324h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82188324h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82188324h case    0:*/		return 0x82188328;
		  /* 82188328h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82188328h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82188328h case    1:*/		return 0x8218832C;
		  /* 8218832Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218832Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218832Ch case    2:*/		return 0x82188330;
		  /* 82188330h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82188330h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188340;  }
		/* 82188330h case    3:*/		return 0x82188334;
		  /* 82188334h */ case    4:  		/* mr R29, R11 */
		/* 82188334h case    4:*/		regs.R29 = regs.R11;
		/* 82188334h case    4:*/		return 0x82188338;
		  /* 82188338h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82188338h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188338h case    5:*/		return 0x8218833C;
		  /* 8218833Ch */ case    6:  		/* bc 4, CR6_EQ, -268 */
		/* 8218833Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82188230;  }
		/* 8218833Ch case    6:*/		return 0x82188340;
	}
	return 0x82188340;
} // Block from 82188324h-82188340h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188340);
		  /* 82188340h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82188340h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82188340h case    0:*/		return 0x82188344;
		  /* 82188344h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82188344h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82188344h case    1:*/		return 0x82188348;
		  /* 82188348h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188348h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188348h case    2:*/		return 0x8218834C;
		  /* 8218834Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8218834Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218835C;  }
		/* 8218834Ch case    3:*/		return 0x82188350;
		  /* 82188350h */ case    4:  		/* mr R27, R11 */
		/* 82188350h case    4:*/		regs.R27 = regs.R11;
		/* 82188350h case    4:*/		return 0x82188354;
		  /* 82188354h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82188354h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188354h case    5:*/		return 0x82188358;
		  /* 82188358h */ case    6:  		/* bc 4, CR6_EQ, -336 */
		/* 82188358h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82188208;  }
		/* 82188358h case    6:*/		return 0x8218835C;
	}
	return 0x8218835C;
} // Block from 82188340h-8218835Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218835Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218835C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218835C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218835C);
		  /* 8218835Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 8218835Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 8218835Ch case    0:*/		return 0x82188360;
		  /* 82188360h */ case    1:  		/* bc 12, CR0_EQ, 536 */
		/* 82188360h case    1:*/		if ( regs.CR[0].eq ) { return 0x82188578;  }
		/* 82188360h case    1:*/		return 0x82188364;
		  /* 82188364h */ case    2:  		/* lwz R31, <#[R30 + 4]> */
		/* 82188364h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 82188364h case    2:*/		return 0x82188368;
		  /* 82188368h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82188368h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82188368h case    3:*/		return 0x8218836C;
		  /* 8218836Ch */ case    4:  		/* bc 4, CR0_EQ, 52 */
		/* 8218836Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821883A0;  }
		/* 8218836Ch case    4:*/		return 0x82188370;
		  /* 82188370h */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 82188370h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82188370h case    5:*/		return 0x82188374;
		  /* 82188374h */ case    6:  		/* bc 12, CR0_EQ, 44 */
		/* 82188374h case    6:*/		if ( regs.CR[0].eq ) { return 0x821883A0;  }
		/* 82188374h case    6:*/		return 0x82188378;
		  /* 82188378h */ case    7:  		/* mr R5, R16 */
		/* 82188378h case    7:*/		regs.R5 = regs.R16;
		/* 82188378h case    7:*/		return 0x8218837C;
		  /* 8218837Ch */ case    8:  		/* lwz R4, <#[R31 + 88]> */
		/* 8218837Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000058) );
		/* 8218837Ch case    8:*/		return 0x82188380;
		  /* 82188380h */ case    9:  		/* lwz R3, <#[R31 + 84]> */
		/* 82188380h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000054) );
		/* 82188380h case    9:*/		return 0x82188384;
		  /* 82188384h */ case   10:  		/* bl -1010132 */
		/* 82188384h case   10:*/		regs.LR = 0x82188388; return 0x820919B0;
		/* 82188384h case   10:*/		return 0x82188388;
		  /* 82188388h */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82188388h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82188388h case   11:*/		return 0x8218838C;
		  /* 8218838Ch */ case   12:  		/* lwz R31, <#[R11 + 4]> */
		/* 8218838Ch case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8218838Ch case   12:*/		return 0x82188390;
		  /* 82188390h */ case   13:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82188390h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82188390h case   13:*/		return 0x82188394;
		  /* 82188394h */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 82188394h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821883A0;  }
		/* 82188394h case   14:*/		return 0x82188398;
		  /* 82188398h */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 82188398h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82188398h case   15:*/		return 0x8218839C;
		  /* 8218839Ch */ case   16:  		/* bc 4, CR6_EQ, -36 */
		/* 8218839Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82188378;  }
		/* 8218839Ch case   16:*/		return 0x821883A0;
	}
	return 0x821883A0;
} // Block from 8218835Ch-821883A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821883A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821883A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821883A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821883A0);
		  /* 821883A0h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821883A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821883A0h case    0:*/		return 0x821883A4;
		  /* 821883A4h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821883A4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821883A4h case    1:*/		return 0x821883A8;
		  /* 821883A8h */ case    2:  		/* bc 4, CR0_EQ, 464 */
		/* 821883A8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82188578;  }
		/* 821883A8h case    2:*/		return 0x821883AC;
		  /* 821883ACh */ case    3:  		/* mr R28, R11 */
		/* 821883ACh case    3:*/		regs.R28 = regs.R11;
		/* 821883ACh case    3:*/		return 0x821883B0;
		  /* 821883B0h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821883B0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821883B0h case    4:*/		return 0x821883B4;
		  /* 821883B4h */ case    5:  		/* bc 12, CR0_EQ, 452 */
		/* 821883B4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82188578;  }
		/* 821883B4h case    5:*/		return 0x821883B8;
		  /* 821883B8h */ case    6:  		/* lwz R10, <#[R28 + 12]> */
		/* 821883B8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 821883B8h case    6:*/		return 0x821883BC;
		  /* 821883BCh */ case    7:  		/* mr R11, R10 */
		/* 821883BCh case    7:*/		regs.R11 = regs.R10;
		/* 821883BCh case    7:*/		return 0x821883C0;
		  /* 821883C0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821883C0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821883C0h case    8:*/		return 0x821883C4;
		  /* 821883C4h */ case    9:  		/* bc 12, CR6_EQ, 408 */
		/* 821883C4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8218855C;  }
		/* 821883C4h case    9:*/		return 0x821883C8;
		  /* 821883C8h */ case   10:  		/* lwz R29, <#[R11]> */
		/* 821883C8h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821883C8h case   10:*/		return 0x821883CC;
		  /* 821883CCh */ case   11:  		/* lwz R9, <#[R29 + 48]> */
		/* 821883CCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000030) );
		/* 821883CCh case   11:*/		return 0x821883D0;
		  /* 821883D0h */ case   12:  		/* rlwinm. R9, R9, 13, 31, 31 */
		/* 821883D0h case   12:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R9,regs.R9);
		/* 821883D0h case   12:*/		return 0x821883D4;
		  /* 821883D4h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821883D4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821883E0;  }
		/* 821883D4h case   13:*/		return 0x821883D8;
		  /* 821883D8h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821883D8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821883D8h case   14:*/		return 0x821883DC;
		  /* 821883DCh */ case   15:  		/* b -28 */
		/* 821883DCh case   15:*/		return 0x821883C0;
		/* 821883DCh case   15:*/		return 0x821883E0;
	}
	return 0x821883E0;
} // Block from 821883A0h-821883E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821883E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821883E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821883E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821883E0);
		  /* 821883E0h */ case    0:  		/* mr R11, R10 */
		/* 821883E0h case    0:*/		regs.R11 = regs.R10;
		/* 821883E0h case    0:*/		return 0x821883E4;
		  /* 821883E4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821883E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821883E4h case    1:*/		return 0x821883E8;
		  /* 821883E8h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821883E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82188404;  }
		/* 821883E8h case    2:*/		return 0x821883EC;
		  /* 821883ECh */ case    3:  		/* lwz R31, <#[R11]> */
		/* 821883ECh case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821883ECh case    3:*/		return 0x821883F0;
		  /* 821883F0h */ case    4:  		/* lwz R10, <#[R31 + 48]> */
		/* 821883F0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821883F0h case    4:*/		return 0x821883F4;
		  /* 821883F4h */ case    5:  		/* rlwinm. R10, R10, 11, 31, 31 */
		/* 821883F4h case    5:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R10,regs.R10);
		/* 821883F4h case    5:*/		return 0x821883F8;
		  /* 821883F8h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821883F8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82188408;  }
		/* 821883F8h case    6:*/		return 0x821883FC;
		  /* 821883FCh */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 821883FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821883FCh case    7:*/		return 0x82188400;
		  /* 82188400h */ case    8:  		/* b -28 */
		/* 82188400h case    8:*/		return 0x821883E4;
		/* 82188400h case    8:*/		return 0x82188404;
	}
	return 0x82188404;
} // Block from 821883E0h-82188404h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82188404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188404);
		  /* 82188404h */ case    0:  		/* mr R31, R21 */
		/* 82188404h case    0:*/		regs.R31 = regs.R21;
		/* 82188404h case    0:*/		return 0x82188408;
	}
	return 0x82188408;
} // Block from 82188404h-82188408h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82188408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188408);
		  /* 82188408h */ case    0:  		/* mr R5, R16 */
		/* 82188408h case    0:*/		regs.R5 = regs.R16;
		/* 82188408h case    0:*/		return 0x8218840C;
		  /* 8218840Ch */ case    1:  		/* lwz R4, <#[R31 + 80]> */
		/* 8218840Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000050) );
		/* 8218840Ch case    1:*/		return 0x82188410;
		  /* 82188410h */ case    2:  		/* mr R3, R26 */
		/* 82188410h case    2:*/		regs.R3 = regs.R26;
		/* 82188410h case    2:*/		return 0x82188414;
		  /* 82188414h */ case    3:  		/* bl -1010276 */
		/* 82188414h case    3:*/		regs.LR = 0x82188418; return 0x820919B0;
		/* 82188414h case    3:*/		return 0x82188418;
		  /* 82188418h */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 82188418h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82188418h case    4:*/		return 0x8218841C;
		  /* 8218841Ch */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218841Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218841Ch case    5:*/		return 0x82188420;
		  /* 82188420h */ case    6:  		/* bc 4, CR0_EQ, 144 */
		/* 82188420h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821884B0;  }
		/* 82188420h case    6:*/		return 0x82188424;
		  /* 82188424h */ case    7:  		/* mr R31, R11 */
		/* 82188424h case    7:*/		regs.R31 = regs.R11;
		/* 82188424h case    7:*/		return 0x82188428;
		  /* 82188428h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 82188428h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82188428h case    8:*/		return 0x8218842C;
		  /* 8218842Ch */ case    9:  		/* bc 12, CR0_EQ, 132 */
		/* 8218842Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821884B0;  }
		/* 8218842Ch case    9:*/		return 0x82188430;
		  /* 82188430h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 82188430h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82188430h case   10:*/		return 0x82188434;
		  /* 82188434h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82188434h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82188434h case   11:*/		return 0x82188438;
		  /* 82188438h */ case   12:  		/* cmplwi CR6, R11, 14336 */
		/* 82188438h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 82188438h case   12:*/		return 0x8218843C;
		  /* 8218843Ch */ case   13:  		/* bc 4, CR6_EQ, 88 */
		/* 8218843Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82188494;  }
		/* 8218843Ch case   13:*/		return 0x82188440;
		  /* 82188440h */ case   14:  		/* li R7, 1 */
		/* 82188440h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82188440h case   14:*/		return 0x82188444;
		  /* 82188444h */ case   15:  		/* li R6, 0 */
		/* 82188444h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82188444h case   15:*/		return 0x82188448;
		  /* 82188448h */ case   16:  		/* mr R5, R28 */
		/* 82188448h case   16:*/		regs.R5 = regs.R28;
		/* 82188448h case   16:*/		return 0x8218844C;
		  /* 8218844Ch */ case   17:  		/* mr R4, R31 */
		/* 8218844Ch case   17:*/		regs.R4 = regs.R31;
		/* 8218844Ch case   17:*/		return 0x82188450;
		  /* 82188450h */ case   18:  		/* mr R3, R30 */
		/* 82188450h case   18:*/		regs.R3 = regs.R30;
		/* 82188450h case   18:*/		return 0x82188454;
		  /* 82188454h */ case   19:  		/* bl 393388 */
		/* 82188454h case   19:*/		regs.LR = 0x82188458; return 0x821E8500;
		/* 82188454h case   19:*/		return 0x82188458;
		  /* 82188458h */ case   20:  		/* or. R11, R3, R3 */
		/* 82188458h case   20:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 82188458h case   20:*/		return 0x8218845C;
		  /* 8218845Ch */ case   21:  		/* bc 12, CR0_EQ, 56 */
		/* 8218845Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x82188494;  }
		/* 8218845Ch case   21:*/		return 0x82188460;
		  /* 82188460h */ case   22:  		/* lwz R10, <#[R11 + 12]> */
		/* 82188460h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82188460h case   22:*/		return 0x82188464;
		  /* 82188464h */ case   23:  		/* mr R3, R30 */
		/* 82188464h case   23:*/		regs.R3 = regs.R30;
		/* 82188464h case   23:*/		return 0x82188468;
		  /* 82188468h */ case   24:  		/* lwz R11, <#[R11]> */
		/* 82188468h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82188468h case   24:*/		return 0x8218846C;
		  /* 8218846Ch */ case   25:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 8218846Ch case   25:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 8218846Ch case   25:*/		return 0x82188470;
		  /* 82188470h */ case   26:  		/* lhz R10, <#[R10 + 18]> */
		/* 82188470h case   26:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000012) );
		/* 82188470h case   26:*/		return 0x82188474;
		  /* 82188474h */ case   27:  		/* add R4, R10, R11 */
		/* 82188474h case   27:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82188474h case   27:*/		return 0x82188478;
		  /* 82188478h */ case   28:  		/* bl -19224 */
		/* 82188478h case   28:*/		regs.LR = 0x8218847C; return 0x82183960;
		/* 82188478h case   28:*/		return 0x8218847C;
		  /* 8218847Ch */ case   29:  		/* rlwinm R11, R3, 29, 3, 28 */
		/* 8218847Ch case   29:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R3);
		/* 8218847Ch case   29:*/		return 0x82188480;
		  /* 82188480h */ case   30:  		/* rldicl R10, R3, 0, 58 */
		/* 82188480h case   30:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 82188480h case   30:*/		return 0x82188484;
		  /* 82188484h */ case   31:  		/* sld R10, R17, R10 */
		/* 82188484h case   31:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 82188484h case   31:*/		return 0x82188488;
		  /* 82188488h */ case   32:  		/* ldx R9, <#[R11 + R26]> */
		/* 82188488h case   32:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82188488h case   32:*/		return 0x8218848C;
		  /* 8218848Ch */ case   33:  		/* or R10, R10, R9 */
		/* 8218848Ch case   33:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8218848Ch case   33:*/		return 0x82188490;
		  /* 82188490h */ case   34:  		/* stdx R10, <#[R11 + R26]> */
		/* 82188490h case   34:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82188490h case   34:*/		return 0x82188494;
	}
	return 0x82188494;
} // Block from 82188408h-82188494h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82188494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188494);
		  /* 82188494h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82188494h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82188494h case    0:*/		return 0x82188498;
		  /* 82188498h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82188498h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82188498h case    1:*/		return 0x8218849C;
		  /* 8218849Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218849Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218849Ch case    2:*/		return 0x821884A0;
		  /* 821884A0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821884A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821884B0;  }
		/* 821884A0h case    3:*/		return 0x821884A4;
		  /* 821884A4h */ case    4:  		/* mr R31, R11 */
		/* 821884A4h case    4:*/		regs.R31 = regs.R11;
		/* 821884A4h case    4:*/		return 0x821884A8;
		  /* 821884A8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821884A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821884A8h case    5:*/		return 0x821884AC;
		  /* 821884ACh */ case    6:  		/* bc 4, CR6_EQ, -124 */
		/* 821884ACh case    6:*/		if ( !regs.CR[6].eq ) { return 0x82188430;  }
		/* 821884ACh case    6:*/		return 0x821884B0;
	}
	return 0x821884B0;
} // Block from 82188494h-821884B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821884B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821884B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821884B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821884B0);
		  /* 821884B0h */ case    0:  		/* lwz R11, <#[R29 + 116]> */
		/* 821884B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821884B0h case    0:*/		return 0x821884B4;
		  /* 821884B4h */ case    1:  		/* addi R31, R11, 16 */
		/* 821884B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 821884B4h case    1:*/		return 0x821884B8;
		  /* 821884B8h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 821884B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821884B8h case    2:*/		return 0x821884BC;
		  /* 821884BCh */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 821884BCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821884BCh case    3:*/		return 0x821884C0;
		  /* 821884C0h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 821884C0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821884FC;  }
		/* 821884C0h case    4:*/		return 0x821884C4;
		  /* 821884C4h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821884C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821884C4h case    5:*/		return 0x821884C8;
		  /* 821884C8h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 821884C8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821884FC;  }
		/* 821884C8h case    6:*/		return 0x821884CC;
		  /* 821884CCh */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821884CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821884CCh case    7:*/		return 0x821884D0;
		  /* 821884D0h */ case    8:  		/* lwz R10, <#[R11 + 48]> */
		/* 821884D0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821884D0h case    8:*/		return 0x821884D4;
		  /* 821884D4h */ case    9:  		/* rlwinm. R9, R10, 10, 31, 31 */
		/* 821884D4h case    9:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R10);
		/* 821884D4h case    9:*/		return 0x821884D8;
		  /* 821884D8h */ case   10:  		/* bc 4, CR0_EQ, 28 */
		/* 821884D8h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821884F4;  }
		/* 821884D8h case   10:*/		return 0x821884DC;
		  /* 821884DCh */ case   11:  		/* rlwinm. R10, R10, 12, 31, 31 */
		/* 821884DCh case   11:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R10,regs.R10);
		/* 821884DCh case   11:*/		return 0x821884E0;
		  /* 821884E0h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 821884E0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821884F4;  }
		/* 821884E0h case   12:*/		return 0x821884E4;
		  /* 821884E4h */ case   13:  		/* mr R3, R26 */
		/* 821884E4h case   13:*/		regs.R3 = regs.R26;
		/* 821884E4h case   13:*/		return 0x821884E8;
		  /* 821884E8h */ case   14:  		/* lwz R5, <#[R30 + 672]> */
		/* 821884E8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 821884E8h case   14:*/		return 0x821884EC;
		  /* 821884ECh */ case   15:  		/* lwz R4, <#[R11 + 88]> */
		/* 821884ECh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000058) );
		/* 821884ECh case   15:*/		return 0x821884F0;
		  /* 821884F0h */ case   16:  		/* bl -18432 */
		/* 821884F0h case   16:*/		regs.LR = 0x821884F4; return 0x82183CF0;
		/* 821884F0h case   16:*/		return 0x821884F4;
	}
	return 0x821884F4;
} // Block from 821884B0h-821884F4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821884F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821884F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821884F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821884F4);
		  /* 821884F4h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821884F4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821884F4h case    0:*/		return 0x821884F8;
		  /* 821884F8h */ case    1:  		/* b -52 */
		/* 821884F8h case    1:*/		return 0x821884C4;
		/* 821884F8h case    1:*/		return 0x821884FC;
	}
	return 0x821884FC;
} // Block from 821884F4h-821884FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821884FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821884FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821884FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821884FC);
		  /* 821884FCh */ case    0:  		/* mr R31, R29 */
		/* 821884FCh case    0:*/		regs.R31 = regs.R29;
		/* 821884FCh case    0:*/		return 0x82188500;
		  /* 82188500h */ case    1:  		/* mr R4, R26 */
		/* 82188500h case    1:*/		regs.R4 = regs.R26;
		/* 82188500h case    1:*/		return 0x82188504;
		  /* 82188504h */ case    2:  		/* lwz R5, <#[R30 + 672]> */
		/* 82188504h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 82188504h case    2:*/		return 0x82188508;
		  /* 82188508h */ case    3:  		/* lwz R3, <#[R31 + 80]> */
		/* 82188508h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 82188508h case    3:*/		return 0x8218850C;
		  /* 8218850Ch */ case    4:  		/* bl -18532 */
		/* 8218850Ch case    4:*/		regs.LR = 0x82188510; return 0x82183CA8;
		/* 8218850Ch case    4:*/		return 0x82188510;
		  /* 82188510h */ case    5:  		/* mr R4, R26 */
		/* 82188510h case    5:*/		regs.R4 = regs.R26;
		/* 82188510h case    5:*/		return 0x82188514;
		  /* 82188514h */ case    6:  		/* lwz R5, <#[R30 + 672]> */
		/* 82188514h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 82188514h case    6:*/		return 0x82188518;
		  /* 82188518h */ case    7:  		/* lwz R3, <#[R31 + 88]> */
		/* 82188518h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 82188518h case    7:*/		return 0x8218851C;
		  /* 8218851Ch */ case    8:  		/* bl -18548 */
		/* 8218851Ch case    8:*/		regs.LR = 0x82188520; return 0x82183CA8;
		/* 8218851Ch case    8:*/		return 0x82188520;
		  /* 82188520h */ case    9:  		/* lwz R11, <#[R31 + 56]> */
		/* 82188520h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82188520h case    9:*/		return 0x82188524;
		  /* 82188524h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 82188524h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82188524h case   10:*/		return 0x82188528;
		  /* 82188528h */ case   11:  		/* bc 4, CR6_EQ, 40 */
		/* 82188528h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82188550;  }
		/* 82188528h case   11:*/		return 0x8218852C;
		  /* 8218852Ch */ case   12:  		/* cmplw CR6, R31, R29 */
		/* 8218852Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8218852Ch case   12:*/		return 0x82188530;
		  /* 82188530h */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 82188530h case   13:*/		if ( regs.CR[6].eq ) { return 0x8218855C;  }
		/* 82188530h case   13:*/		return 0x82188534;
		  /* 82188534h */ case   14:  		/* lwz R11, <#[R31 + 60]> */
		/* 82188534h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82188534h case   14:*/		return 0x82188538;
		  /* 82188538h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 82188538h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82188538h case   15:*/		return 0x8218853C;
		  /* 8218853Ch */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 8218853Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82188550;  }
		/* 8218853Ch case   16:*/		return 0x82188540;
		  /* 82188540h */ case   17:  		/* lwz R31, <#[R31 + 52]> */
		/* 82188540h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000034) );
		/* 82188540h case   17:*/		return 0x82188544;
		  /* 82188544h */ case   18:  		/* cmplw CR6, R31, R29 */
		/* 82188544h case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 82188544h case   18:*/		return 0x82188548;
		  /* 82188548h */ case   19:  		/* bc 4, CR6_EQ, -20 */
		/* 82188548h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82188534;  }
		/* 82188548h case   19:*/		return 0x8218854C;
		  /* 8218854Ch */ case   20:  		/* b 8 */
		/* 8218854Ch case   20:*/		return 0x82188554;
		/* 8218854Ch case   20:*/		return 0x82188550;
	}
	return 0x82188550;
} // Block from 821884FCh-82188550h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82188550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188550);
		  /* 82188550h */ case    0:  		/* mr R31, R11 */
		/* 82188550h case    0:*/		regs.R31 = regs.R11;
		/* 82188550h case    0:*/		return 0x82188554;
	}
	return 0x82188554;
} // Block from 82188550h-82188554h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82188554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188554);
		  /* 82188554h */ case    0:  		/* cmplw CR6, R31, R29 */
		/* 82188554h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 82188554h case    0:*/		return 0x82188558;
		  /* 82188558h */ case    1:  		/* bc 4, CR6_EQ, -88 */
		/* 82188558h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82188500;  }
		/* 82188558h case    1:*/		return 0x8218855C;
	}
	return 0x8218855C;
} // Block from 82188554h-8218855Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218855Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218855C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218855C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218855C);
		  /* 8218855Ch */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8218855Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8218855Ch case    0:*/		return 0x82188560;
		  /* 82188560h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82188560h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82188560h case    1:*/		return 0x82188564;
		  /* 82188564h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188564h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188564h case    2:*/		return 0x82188568;
		  /* 82188568h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82188568h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188578;  }
		/* 82188568h case    3:*/		return 0x8218856C;
		  /* 8218856Ch */ case    4:  		/* mr R28, R11 */
		/* 8218856Ch case    4:*/		regs.R28 = regs.R11;
		/* 8218856Ch case    4:*/		return 0x82188570;
		  /* 82188570h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82188570h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188570h case    5:*/		return 0x82188574;
		  /* 82188574h */ case    6:  		/* bc 4, CR6_EQ, -444 */
		/* 82188574h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821883B8;  }
		/* 82188574h case    6:*/		return 0x82188578;
	}
	return 0x82188578;
} // Block from 8218855Ch-82188578h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188578);
		  /* 82188578h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 82188578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82188578h case    0:*/		return 0x8218857C;
		  /* 8218857Ch */ case    1:  		/* li R5, 0 */
		/* 8218857Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218857Ch case    1:*/		return 0x82188580;
		  /* 82188580h */ case    2:  		/* mr R3, R30 */
		/* 82188580h case    2:*/		regs.R3 = regs.R30;
		/* 82188580h case    2:*/		return 0x82188584;
		  /* 82188584h */ case    3:  		/* mullw R4, R11, R16 */
		/* 82188584h case    3:*/		cpu::op::mullw<0>(regs,&regs.R4,regs.R11,regs.R16);
		/* 82188584h case    3:*/		return 0x82188588;
		  /* 82188588h */ case    4:  		/* bl -144720 */
		/* 82188588h case    4:*/		regs.LR = 0x8218858C; return 0x82165038;
		/* 82188588h case    4:*/		return 0x8218858C;
		  /* 8218858Ch */ case    5:  		/* stw R3, <#[R30 + 684]> */
		/* 8218858Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218858Ch case    5:*/		return 0x82188590;
		  /* 82188590h */ case    6:  		/* cmplwi CR6, R14, 0 */
		/* 82188590h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 82188590h case    6:*/		return 0x82188594;
		  /* 82188594h */ case    7:  		/* mr R3, R30 */
		/* 82188594h case    7:*/		regs.R3 = regs.R30;
		/* 82188594h case    7:*/		return 0x82188598;
		  /* 82188598h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82188598h case    8:*/		if ( regs.CR[6].eq ) { return 0x821885A8;  }
		/* 82188598h case    8:*/		return 0x8218859C;
		  /* 8218859Ch */ case    9:  		/* mr R4, R22 */
		/* 8218859Ch case    9:*/		regs.R4 = regs.R22;
		/* 8218859Ch case    9:*/		return 0x821885A0;
		  /* 821885A0h */ case   10:  		/* bl 90744 */
		/* 821885A0h case   10:*/		regs.LR = 0x821885A4; return 0x8219E818;
		/* 821885A0h case   10:*/		return 0x821885A4;
		  /* 821885A4h */ case   11:  		/* b 20 */
		/* 821885A4h case   11:*/		return 0x821885B8;
		/* 821885A4h case   11:*/		return 0x821885A8;
	}
	return 0x821885A8;
} // Block from 82188578h-821885A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821885A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821885A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821885A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821885A8);
		  /* 821885A8h */ case    0:  		/* mr R6, R22 */
		/* 821885A8h case    0:*/		regs.R6 = regs.R22;
		/* 821885A8h case    0:*/		return 0x821885AC;
		  /* 821885ACh */ case    1:  		/* mr R5, R16 */
		/* 821885ACh case    1:*/		regs.R5 = regs.R16;
		/* 821885ACh case    1:*/		return 0x821885B0;
		  /* 821885B0h */ case    2:  		/* mr R4, R26 */
		/* 821885B0h case    2:*/		regs.R4 = regs.R26;
		/* 821885B0h case    2:*/		return 0x821885B4;
		  /* 821885B4h */ case    3:  		/* bl -13572 */
		/* 821885B4h case    3:*/		regs.LR = 0x821885B8; return 0x821850B0;
		/* 821885B4h case    3:*/		return 0x821885B8;
	}
	return 0x821885B8;
} // Block from 821885A8h-821885B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821885B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821885B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821885B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821885B8);
		  /* 821885B8h */ case    0:  		/* lwz R11, <#[R30 + 672]> */
		/* 821885B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 821885B8h case    0:*/		return 0x821885BC;
		  /* 821885BCh */ case    1:  		/* li R6, 0 */
		/* 821885BCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821885BCh case    1:*/		return 0x821885C0;
		  /* 821885C0h */ case    2:  		/* mr R4, R26 */
		/* 821885C0h case    2:*/		regs.R4 = regs.R26;
		/* 821885C0h case    2:*/		return 0x821885C4;
		  /* 821885C4h */ case    3:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 821885C4h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 821885C4h case    3:*/		return 0x821885C8;
		  /* 821885C8h */ case    4:  		/* mr R3, R30 */
		/* 821885C8h case    4:*/		regs.R3 = regs.R30;
		/* 821885C8h case    4:*/		return 0x821885CC;
		  /* 821885CCh */ case    5:  		/* bl -112508 */
		/* 821885CCh case    5:*/		regs.LR = 0x821885D0; return 0x8216CE50;
		/* 821885CCh case    5:*/		return 0x821885D0;
		  /* 821885D0h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 821885D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821885D0h case    6:*/		return 0x821885D4;
		  /* 821885D4h */ case    7:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821885D4h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821885D4h case    7:*/		return 0x821885D8;
		  /* 821885D8h */ case    8:  		/* addic R10, R10, -1 */
		/* 821885D8h case    8:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821885D8h case    8:*/		return 0x821885DC;
		  /* 821885DCh */ case    9:  		/* subfe R10, R10, R10 */
		/* 821885DCh case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821885DCh case    9:*/		return 0x821885E0;
		  /* 821885E0h */ case   10:  		/* and R11, R10, R11 */
		/* 821885E0h case   10:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821885E0h case   10:*/		return 0x821885E4;
		  /* 821885E4h */ case   11:  		/* lwz R11, <#[R11 + 20]> */
		/* 821885E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821885E4h case   11:*/		return 0x821885E8;
		  /* 821885E8h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821885E8h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821885E8h case   12:*/		return 0x821885EC;
		  /* 821885ECh */ case   13:  		/* bc 4, CR0_EQ, 376 */
		/* 821885ECh case   13:*/		if ( !regs.CR[0].eq ) { return 0x82188764;  }
		/* 821885ECh case   13:*/		return 0x821885F0;
		  /* 821885F0h */ case   14:  		/* mr R22, R11 */
		/* 821885F0h case   14:*/		regs.R22 = regs.R11;
		/* 821885F0h case   14:*/		return 0x821885F4;
		  /* 821885F4h */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 821885F4h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821885F4h case   15:*/		return 0x821885F8;
		  /* 821885F8h */ case   16:  		/* bc 12, CR0_EQ, 364 */
		/* 821885F8h case   16:*/		if ( regs.CR[0].eq ) { return 0x82188764;  }
		/* 821885F8h case   16:*/		return 0x821885FC;
		  /* 821885FCh */ case   17:  		/* lwz R11, <#[R22 + 8]> */
		/* 821885FCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821885FCh case   17:*/		return 0x82188600;
		  /* 82188600h */ case   18:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82188600h case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82188600h case   18:*/		return 0x82188604;
		  /* 82188604h */ case   19:  		/* cmplwi CR6, R11, 14464 */
		/* 82188604h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003880);
		/* 82188604h case   19:*/		return 0x82188608;
		  /* 82188608h */ case   20:  		/* bc 4, CR6_EQ, 320 */
		/* 82188608h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82188748;  }
		/* 82188608h case   20:*/		return 0x8218860C;
		  /* 8218860Ch */ case   21:  		/* lwz R11, <#[R22 + 16]> */
		/* 8218860Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000010) );
		/* 8218860Ch case   21:*/		return 0x82188610;
		  /* 82188610h */ case   22:  		/* rlwinm R23, R11, 0, 16, 31 */
		/* 82188610h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R23,regs.R11);
		/* 82188610h case   22:*/		return 0x82188614;
		  /* 82188614h */ case   23:  		/* rlwinm R11, R11, 16, 29, 31 */
		/* 82188614h case   23:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R11,regs.R11);
		/* 82188614h case   23:*/		return 0x82188618;
		  /* 82188618h */ case   24:  		/* mr R31, R23 */
		/* 82188618h case   24:*/		regs.R31 = regs.R23;
		/* 82188618h case   24:*/		return 0x8218861C;
		  /* 8218861Ch */ case   25:  		/* add R25, R23, R11 */
		/* 8218861Ch case   25:*/		cpu::op::add<0>(regs,&regs.R25,regs.R23,regs.R11);
		/* 8218861Ch case   25:*/		return 0x82188620;
		  /* 82188620h */ case   26:  		/* cmplw CR6, R23, R25 */
		/* 82188620h case   26:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R25);
		/* 82188620h case   26:*/		return 0x82188624;
		  /* 82188624h */ case   27:  		/* bc 4, CR6_LT, 88 */
		/* 82188624h case   27:*/		if ( !regs.CR[6].lt ) { return 0x8218867C;  }
		/* 82188624h case   27:*/		return 0x82188628;
		  /* 82188628h */ case   28:  		/* mr R4, R31 */
		/* 82188628h case   28:*/		regs.R4 = regs.R31;
		/* 82188628h case   28:*/		return 0x8218862C;
		  /* 8218862Ch */ case   29:  		/* mr R3, R30 */
		/* 8218862Ch case   29:*/		regs.R3 = regs.R30;
		/* 8218862Ch case   29:*/		return 0x82188630;
		  /* 82188630h */ case   30:  		/* bl -19664 */
		/* 82188630h case   30:*/		regs.LR = 0x82188634; return 0x82183960;
		/* 82188630h case   30:*/		return 0x82188634;
		  /* 82188634h */ case   31:  		/* addi R29, R31, 1 */
		/* 82188634h case   31:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x1);
		/* 82188634h case   31:*/		return 0x82188638;
		  /* 82188638h */ case   32:  		/* mr R28, R3 */
		/* 82188638h case   32:*/		regs.R28 = regs.R3;
		/* 82188638h case   32:*/		return 0x8218863C;
		  /* 8218863Ch */ case   33:  		/* mr R31, R29 */
		/* 8218863Ch case   33:*/		regs.R31 = regs.R29;
		/* 8218863Ch case   33:*/		return 0x82188640;
		  /* 82188640h */ case   34:  		/* cmplw CR6, R29, R25 */
		/* 82188640h case   34:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 82188640h case   34:*/		return 0x82188644;
		  /* 82188644h */ case   35:  		/* bc 4, CR6_LT, 44 */
		/* 82188644h case   35:*/		if ( !regs.CR[6].lt ) { return 0x82188670;  }
		/* 82188644h case   35:*/		return 0x82188648;
		  /* 82188648h */ case   36:  		/* mr R4, R31 */
		/* 82188648h case   36:*/		regs.R4 = regs.R31;
		/* 82188648h case   36:*/		return 0x8218864C;
		  /* 8218864Ch */ case   37:  		/* mr R3, R30 */
		/* 8218864Ch case   37:*/		regs.R3 = regs.R30;
		/* 8218864Ch case   37:*/		return 0x82188650;
		  /* 82188650h */ case   38:  		/* bl -19696 */
		/* 82188650h case   38:*/		regs.LR = 0x82188654; return 0x82183960;
		/* 82188650h case   38:*/		return 0x82188654;
		  /* 82188654h */ case   39:  		/* mr R5, R3 */
		/* 82188654h case   39:*/		regs.R5 = regs.R3;
		/* 82188654h case   39:*/		return 0x82188658;
		  /* 82188658h */ case   40:  		/* mr R4, R28 */
		/* 82188658h case   40:*/		regs.R4 = regs.R28;
		/* 82188658h case   40:*/		return 0x8218865C;
		  /* 8218865Ch */ case   41:  		/* mr R3, R30 */
		/* 8218865Ch case   41:*/		regs.R3 = regs.R30;
		/* 8218865Ch case   41:*/		return 0x82188660;
		  /* 82188660h */ case   42:  		/* bl -17568 */
		/* 82188660h case   42:*/		regs.LR = 0x82188664; return 0x821841C0;
		/* 82188660h case   42:*/		return 0x82188664;
		  /* 82188664h */ case   43:  		/* addi R31, R31, 1 */
		/* 82188664h case   43:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82188664h case   43:*/		return 0x82188668;
		  /* 82188668h */ case   44:  		/* cmplw CR6, R31, R25 */
		/* 82188668h case   44:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 82188668h case   44:*/		return 0x8218866C;
		  /* 8218866Ch */ case   45:  		/* bc 12, CR6_LT, -36 */
		/* 8218866Ch case   45:*/		if ( regs.CR[6].lt ) { return 0x82188648;  }
		/* 8218866Ch case   45:*/		return 0x82188670;
	}
	return 0x82188670;
} // Block from 821885B8h-82188670h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82188670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188670);
		  /* 82188670h */ case    0:  		/* mr R31, R29 */
		/* 82188670h case    0:*/		regs.R31 = regs.R29;
		/* 82188670h case    0:*/		return 0x82188674;
		  /* 82188674h */ case    1:  		/* cmplw CR6, R29, R25 */
		/* 82188674h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 82188674h case    1:*/		return 0x82188678;
		  /* 82188678h */ case    2:  		/* bc 12, CR6_LT, -80 */
		/* 82188678h case    2:*/		if ( regs.CR[6].lt ) { return 0x82188628;  }
		/* 82188678h case    2:*/		return 0x8218867C;
	}
	return 0x8218867C;
} // Block from 82188670h-8218867Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218867Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218867C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218867C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218867C);
		  /* 8218867Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8218867Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8218867Ch case    0:*/		return 0x82188680;
		  /* 82188680h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82188680h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188680h case    1:*/		return 0x82188684;
		  /* 82188684h */ case    2:  		/* addic R10, R10, -1 */
		/* 82188684h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82188684h case    2:*/		return 0x82188688;
		  /* 82188688h */ case    3:  		/* subfe R10, R10, R10 */
		/* 82188688h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82188688h case    3:*/		return 0x8218868C;
		  /* 8218868Ch */ case    4:  		/* and R11, R10, R11 */
		/* 8218868Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218868Ch case    4:*/		return 0x82188690;
		  /* 82188690h */ case    5:  		/* lwz R11, <#[R11 + 20]> */
		/* 82188690h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82188690h case    5:*/		return 0x82188694;
		  /* 82188694h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188694h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188694h case    6:*/		return 0x82188698;
		  /* 82188698h */ case    7:  		/* bc 4, CR0_EQ, 176 */
		/* 82188698h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82188748;  }
		/* 82188698h case    7:*/		return 0x8218869C;
		  /* 8218869Ch */ case    8:  		/* mr R24, R11 */
		/* 8218869Ch case    8:*/		regs.R24 = regs.R11;
		/* 8218869Ch case    8:*/		return 0x821886A0;
		  /* 821886A0h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821886A0h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821886A0h case    9:*/		return 0x821886A4;
		  /* 821886A4h */ case   10:  		/* bc 12, CR0_EQ, 164 */
		/* 821886A4h case   10:*/		if ( regs.CR[0].eq ) { return 0x82188748;  }
		/* 821886A4h case   10:*/		return 0x821886A8;
		  /* 821886A8h */ case   11:  		/* cmplw CR6, R24, R22 */
		/* 821886A8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R22);
		/* 821886A8h case   11:*/		return 0x821886AC;
		  /* 821886ACh */ case   12:  		/* bc 12, CR6_EQ, 128 */
		/* 821886ACh case   12:*/		if ( regs.CR[6].eq ) { return 0x8218872C;  }
		/* 821886ACh case   12:*/		return 0x821886B0;
		  /* 821886B0h */ case   13:  		/* lwz R11, <#[R24 + 8]> */
		/* 821886B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821886B0h case   13:*/		return 0x821886B4;
		  /* 821886B4h */ case   14:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821886B4h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821886B4h case   14:*/		return 0x821886B8;
		  /* 821886B8h */ case   15:  		/* cmplwi CR6, R11, 14464 */
		/* 821886B8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003880);
		/* 821886B8h case   15:*/		return 0x821886BC;
		  /* 821886BCh */ case   16:  		/* bc 4, CR6_EQ, 112 */
		/* 821886BCh case   16:*/		if ( !regs.CR[6].eq ) { return 0x8218872C;  }
		/* 821886BCh case   16:*/		return 0x821886C0;
		  /* 821886C0h */ case   17:  		/* lwz R10, <#[R24 + 16]> */
		/* 821886C0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000010) );
		/* 821886C0h case   17:*/		return 0x821886C4;
		  /* 821886C4h */ case   18:  		/* mr R28, R23 */
		/* 821886C4h case   18:*/		regs.R28 = regs.R23;
		/* 821886C4h case   18:*/		return 0x821886C8;
		  /* 821886C8h */ case   19:  		/* cmplw CR6, R23, R25 */
		/* 821886C8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R25);
		/* 821886C8h case   19:*/		return 0x821886CC;
		  /* 821886CCh */ case   20:  		/* rlwinm R11, R10, 16, 29, 31 */
		/* 821886CCh case   20:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R11,regs.R10);
		/* 821886CCh case   20:*/		return 0x821886D0;
		  /* 821886D0h */ case   21:  		/* rlwinm R29, R10, 0, 16, 31 */
		/* 821886D0h case   21:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R10);
		/* 821886D0h case   21:*/		return 0x821886D4;
		  /* 821886D4h */ case   22:  		/* bc 4, CR6_LT, 88 */
		/* 821886D4h case   22:*/		if ( !regs.CR[6].lt ) { return 0x8218872C;  }
		/* 821886D4h case   22:*/		return 0x821886D8;
		  /* 821886D8h */ case   23:  		/* add R27, R29, R11 */
		/* 821886D8h case   23:*/		cpu::op::add<0>(regs,&regs.R27,regs.R29,regs.R11);
		/* 821886D8h case   23:*/		return 0x821886DC;
		  /* 821886DCh */ case   24:  		/* mr R4, R28 */
		/* 821886DCh case   24:*/		regs.R4 = regs.R28;
		/* 821886DCh case   24:*/		return 0x821886E0;
		  /* 821886E0h */ case   25:  		/* mr R3, R30 */
		/* 821886E0h case   25:*/		regs.R3 = regs.R30;
		/* 821886E0h case   25:*/		return 0x821886E4;
		  /* 821886E4h */ case   26:  		/* bl -19844 */
		/* 821886E4h case   26:*/		regs.LR = 0x821886E8; return 0x82183960;
		/* 821886E4h case   26:*/		return 0x821886E8;
		  /* 821886E8h */ case   27:  		/* mr R26, R3 */
		/* 821886E8h case   27:*/		regs.R26 = regs.R3;
		/* 821886E8h case   27:*/		return 0x821886EC;
		  /* 821886ECh */ case   28:  		/* mr R31, R29 */
		/* 821886ECh case   28:*/		regs.R31 = regs.R29;
		/* 821886ECh case   28:*/		return 0x821886F0;
		  /* 821886F0h */ case   29:  		/* cmplw CR6, R29, R27 */
		/* 821886F0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 821886F0h case   29:*/		return 0x821886F4;
		  /* 821886F4h */ case   30:  		/* bc 4, CR6_LT, 44 */
		/* 821886F4h case   30:*/		if ( !regs.CR[6].lt ) { return 0x82188720;  }
		/* 821886F4h case   30:*/		return 0x821886F8;
		  /* 821886F8h */ case   31:  		/* mr R4, R31 */
		/* 821886F8h case   31:*/		regs.R4 = regs.R31;
		/* 821886F8h case   31:*/		return 0x821886FC;
		  /* 821886FCh */ case   32:  		/* mr R3, R30 */
		/* 821886FCh case   32:*/		regs.R3 = regs.R30;
		/* 821886FCh case   32:*/		return 0x82188700;
		  /* 82188700h */ case   33:  		/* bl -19872 */
		/* 82188700h case   33:*/		regs.LR = 0x82188704; return 0x82183960;
		/* 82188700h case   33:*/		return 0x82188704;
		  /* 82188704h */ case   34:  		/* mr R5, R3 */
		/* 82188704h case   34:*/		regs.R5 = regs.R3;
		/* 82188704h case   34:*/		return 0x82188708;
		  /* 82188708h */ case   35:  		/* mr R4, R26 */
		/* 82188708h case   35:*/		regs.R4 = regs.R26;
		/* 82188708h case   35:*/		return 0x8218870C;
		  /* 8218870Ch */ case   36:  		/* mr R3, R30 */
		/* 8218870Ch case   36:*/		regs.R3 = regs.R30;
		/* 8218870Ch case   36:*/		return 0x82188710;
		  /* 82188710h */ case   37:  		/* bl -17744 */
		/* 82188710h case   37:*/		regs.LR = 0x82188714; return 0x821841C0;
		/* 82188710h case   37:*/		return 0x82188714;
		  /* 82188714h */ case   38:  		/* addi R31, R31, 1 */
		/* 82188714h case   38:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82188714h case   38:*/		return 0x82188718;
		  /* 82188718h */ case   39:  		/* cmplw CR6, R31, R27 */
		/* 82188718h case   39:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 82188718h case   39:*/		return 0x8218871C;
		  /* 8218871Ch */ case   40:  		/* bc 12, CR6_LT, -36 */
		/* 8218871Ch case   40:*/		if ( regs.CR[6].lt ) { return 0x821886F8;  }
		/* 8218871Ch case   40:*/		return 0x82188720;
	}
	return 0x82188720;
} // Block from 8218867Ch-82188720h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82188720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188720);
		  /* 82188720h */ case    0:  		/* addi R28, R28, 1 */
		/* 82188720h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82188720h case    0:*/		return 0x82188724;
		  /* 82188724h */ case    1:  		/* cmplw CR6, R28, R25 */
		/* 82188724h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 82188724h case    1:*/		return 0x82188728;
		  /* 82188728h */ case    2:  		/* bc 12, CR6_LT, -76 */
		/* 82188728h case    2:*/		if ( regs.CR[6].lt ) { return 0x821886DC;  }
		/* 82188728h case    2:*/		return 0x8218872C;
	}
	return 0x8218872C;
} // Block from 82188720h-8218872Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218872Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218872C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218872C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218872C);
		  /* 8218872Ch */ case    0:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 8218872Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 8218872Ch case    0:*/		return 0x82188730;
		  /* 82188730h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82188730h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82188730h case    1:*/		return 0x82188734;
		  /* 82188734h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188734h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188734h case    2:*/		return 0x82188738;
		  /* 82188738h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82188738h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188748;  }
		/* 82188738h case    3:*/		return 0x8218873C;
		  /* 8218873Ch */ case    4:  		/* mr R24, R11 */
		/* 8218873Ch case    4:*/		regs.R24 = regs.R11;
		/* 8218873Ch case    4:*/		return 0x82188740;
		  /* 82188740h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82188740h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188740h case    5:*/		return 0x82188744;
		  /* 82188744h */ case    6:  		/* bc 4, CR6_EQ, -156 */
		/* 82188744h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821886A8;  }
		/* 82188744h case    6:*/		return 0x82188748;
	}
	return 0x82188748;
} // Block from 8218872Ch-82188748h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188748);
		  /* 82188748h */ case    0:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 82188748h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 82188748h case    0:*/		return 0x8218874C;
		  /* 8218874Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8218874Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8218874Ch case    1:*/		return 0x82188750;
		  /* 82188750h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188750h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188750h case    2:*/		return 0x82188754;
		  /* 82188754h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82188754h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188764;  }
		/* 82188754h case    3:*/		return 0x82188758;
		  /* 82188758h */ case    4:  		/* mr R22, R11 */
		/* 82188758h case    4:*/		regs.R22 = regs.R11;
		/* 82188758h case    4:*/		return 0x8218875C;
		  /* 8218875Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218875Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218875Ch case    5:*/		return 0x82188760;
		  /* 82188760h */ case    6:  		/* bc 4, CR6_EQ, -356 */
		/* 82188760h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821885FC;  }
		/* 82188760h case    6:*/		return 0x82188764;
	}
	return 0x82188764;
} // Block from 82188748h-82188764h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188764);
		  /* 82188764h */ case    0:  		/* lwz R10, <#[R30 + 668]> */
		/* 82188764h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 82188764h case    0:*/		return 0x82188768;
		  /* 82188768h */ case    1:  		/* mr R11, R17 */
		/* 82188768h case    1:*/		regs.R11 = regs.R17;
		/* 82188768h case    1:*/		return 0x8218876C;
		  /* 8218876Ch */ case    2:  		/* stw R21, <#[R1 + 84]> */
		/* 8218876Ch case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000054) );
		/* 8218876Ch case    2:*/		return 0x82188770;
		  /* 82188770h */ case    3:  		/* stb R21, <#[R1 + 80]> */
		/* 82188770h case    3:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 82188770h case    3:*/		return 0x82188774;
		  /* 82188774h */ case    4:  		/* cmplwi CR6, R10, 1 */
		/* 82188774h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82188774h case    4:*/		return 0x82188778;
		  /* 82188778h */ case    5:  		/* stw R21, <#[R1 + 92]> */
		/* 82188778h case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000005C) );
		/* 82188778h case    5:*/		return 0x8218877C;
		  /* 8218877Ch */ case    6:  		/* stw R17, <#[R1 + 88]> */
		/* 8218877Ch case    6:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000058) );
		/* 8218877Ch case    6:*/		return 0x82188780;
		  /* 82188780h */ case    7:  		/* bc 4, CR6_GT, 3952 */
		/* 82188780h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821896F0;  }
		/* 82188780h case    7:*/		return 0x82188784;
		  /* 82188784h */ case    8:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 82188784h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 82188784h case    8:*/		return 0x82188788;
		  /* 82188788h */ case    9:  		/* lwzx R16, <#[R10 + R15]> */
		/* 82188788h case    9:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R10 + regs.R15 + 0x00000000) );
		/* 82188788h case    9:*/		return 0x8218878C;
		  /* 8218878Ch */ case   10:  		/* cmplwi CR6, R16, 0 */
		/* 8218878Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8218878Ch case   10:*/		return 0x82188790;
		  /* 82188790h */ case   11:  		/* bc 12, CR6_EQ, 3936 */
		/* 82188790h case   11:*/		if ( regs.CR[6].eq ) { return 0x821896F0;  }
		/* 82188790h case   11:*/		return 0x82188794;
		  /* 82188794h */ case   12:  		/* lwz R10, <#[R16 + 8]> */
		/* 82188794h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 82188794h case   12:*/		return 0x82188798;
		  /* 82188798h */ case   13:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 82188798h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 82188798h case   13:*/		return 0x8218879C;
		  /* 8218879Ch */ case   14:  		/* cmplwi CR6, R10, 14336 */
		/* 8218879Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8218879Ch case   14:*/		return 0x821887A0;
		  /* 821887A0h */ case   15:  		/* bc 4, CR6_EQ, 3900 */
		/* 821887A0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821896DC;  }
		/* 821887A0h case   15:*/		return 0x821887A4;
		  /* 821887A4h */ case   16:  		/* lhz R15, <#[R16 + 18]> */
		/* 821887A4h case   16:*/		cpu::mem::load16z( regs, &regs.R15, (uint32)(regs.R16 + 0x00000012) );
		/* 821887A4h case   16:*/		return 0x821887A8;
		  /* 821887A8h */ case   17:  		/* mr R3, R30 */
		/* 821887A8h case   17:*/		regs.R3 = regs.R30;
		/* 821887A8h case   17:*/		return 0x821887AC;
		  /* 821887ACh */ case   18:  		/* mr R4, R15 */
		/* 821887ACh case   18:*/		regs.R4 = regs.R15;
		/* 821887ACh case   18:*/		return 0x821887B0;
		  /* 821887B0h */ case   19:  		/* bl -20048 */
		/* 821887B0h case   19:*/		regs.LR = 0x821887B4; return 0x82183960;
		/* 821887B0h case   19:*/		return 0x821887B4;
		  /* 821887B4h */ case   20:  		/* lwz R10, <#[R16]> */
		/* 821887B4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 821887B4h case   20:*/		return 0x821887B8;
		  /* 821887B8h */ case   21:  		/* mr R20, R3 */
		/* 821887B8h case   21:*/		regs.R20 = regs.R3;
		/* 821887B8h case   21:*/		return 0x821887BC;
		  /* 821887BCh */ case   22:  		/* mr R11, R21 */
		/* 821887BCh case   22:*/		regs.R11 = regs.R21;
		/* 821887BCh case   22:*/		return 0x821887C0;
		  /* 821887C0h */ case   23:  		/* cmplwi CR6, R10, 0 */
		/* 821887C0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821887C0h case   23:*/		return 0x821887C4;
		  /* 821887C4h */ case   24:  		/* bc 12, CR6_EQ, 16 */
		/* 821887C4h case   24:*/		if ( regs.CR[6].eq ) { return 0x821887D4;  }
		/* 821887C4h case   24:*/		return 0x821887C8;
		  /* 821887C8h */ case   25:  		/* lwz R10, <#[R10 + 4]> */
		/* 821887C8h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821887C8h case   25:*/		return 0x821887CC;
		  /* 821887CCh */ case   26:  		/* addi R11, R11, 1 */
		/* 821887CCh case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821887CCh case   26:*/		return 0x821887D0;
		  /* 821887D0h */ case   27:  		/* b -16 */
		/* 821887D0h case   27:*/		return 0x821887C0;
		/* 821887D0h case   27:*/		return 0x821887D4;
	}
	return 0x821887D4;
} // Block from 82188764h-821887D4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821887D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821887D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821887D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821887D4);
		  /* 821887D4h */ case    0:  		/* rlwinm R31, R11, 3, 0, 28 */
		/* 821887D4h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R31,regs.R11);
		/* 821887D4h case    0:*/		return 0x821887D8;
		  /* 821887D8h */ case    1:  		/* li R5, 0 */
		/* 821887D8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821887D8h case    1:*/		return 0x821887DC;
		  /* 821887DCh */ case    2:  		/* addi R4, R31, 8 */
		/* 821887DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x8);
		/* 821887DCh case    2:*/		return 0x821887E0;
		  /* 821887E0h */ case    3:  		/* mr R3, R30 */
		/* 821887E0h case    3:*/		regs.R3 = regs.R30;
		/* 821887E0h case    3:*/		return 0x821887E4;
		  /* 821887E4h */ case    4:  		/* stw R4, <#[R1 + 112]> */
		/* 821887E4h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000070) );
		/* 821887E4h case    4:*/		return 0x821887E8;
		  /* 821887E8h */ case    5:  		/* mr R21, R11 */
		/* 821887E8h case    5:*/		regs.R21 = regs.R11;
		/* 821887E8h case    5:*/		return 0x821887EC;
		  /* 821887ECh */ case    6:  		/* bl -145332 */
		/* 821887ECh case    6:*/		regs.LR = 0x821887F0; return 0x82165038;
		/* 821887ECh case    6:*/		return 0x821887F0;
		  /* 821887F0h */ case    7:  		/* lis R11, 4095 */
		/* 821887F0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFF);
		/* 821887F0h case    7:*/		return 0x821887F4;
		  /* 821887F4h */ case    8:  		/* lis R10, 4095 */
		/* 821887F4h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFF);
		/* 821887F4h case    8:*/		return 0x821887F8;
		  /* 821887F8h */ case    9:  		/* mr R14, R3 */
		/* 821887F8h case    9:*/		regs.R14 = regs.R3;
		/* 821887F8h case    9:*/		return 0x821887FC;
		  /* 821887FCh */ case   10:  		/* add R23, R31, R3 */
		/* 821887FCh case   10:*/		cpu::op::add<0>(regs,&regs.R23,regs.R31,regs.R3);
		/* 821887FCh case   10:*/		return 0x82188800;
		  /* 82188800h */ case   11:  		/* ori R18, R11, 65534 */
		/* 82188800h case   11:*/		cpu::op::ori<0>(regs,&regs.R18,regs.R11,0xFFFE);
		/* 82188800h case   11:*/		return 0x82188804;
		  /* 82188804h */ case   12:  		/* ori R19, R10, 65535 */
		/* 82188804h case   12:*/		cpu::op::ori<0>(regs,&regs.R19,regs.R10,0xFFFF);
		/* 82188804h case   12:*/		return 0x82188808;
		  /* 82188808h */ case   13:  		/* stw R21, <#[R23]> */
		/* 82188808h case   13:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R23 + 0x00000000) );
		/* 82188808h case   13:*/		return 0x8218880C;
		  /* 8218880Ch */ case   14:  		/* li R22, 0 */
		/* 8218880Ch case   14:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8218880Ch case   14:*/		return 0x82188810;
		  /* 82188810h */ case   15:  		/* lwz R28, <#[R16]> */
		/* 82188810h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R16 + 0x00000000) );
		/* 82188810h case   15:*/		return 0x82188814;
		  /* 82188814h */ case   16:  		/* mr R25, R14 */
		/* 82188814h case   16:*/		regs.R25 = regs.R14;
		/* 82188814h case   16:*/		return 0x82188818;
		  /* 82188818h */ case   17:  		/* cmplwi CR6, R28, 0 */
		/* 82188818h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82188818h case   17:*/		return 0x8218881C;
		  /* 8218881Ch */ case   18:  		/* bc 12, CR6_EQ, 836 */
		/* 8218881Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x82188B60;  }
		/* 8218881Ch case   18:*/		return 0x82188820;
		  /* 82188820h */ case   19:  		/* lwz R24, <#[R28 + 12]> */
		/* 82188820h case   19:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R28 + 0x0000000C) );
		/* 82188820h case   19:*/		return 0x82188824;
		  /* 82188824h */ case   20:  		/* stw R22, <#[R25]> */
		/* 82188824h case   20:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R25 + 0x00000000) );
		/* 82188824h case   20:*/		return 0x82188828;
		  /* 82188828h */ case   21:  		/* lwz R11, <#[R24 + 8]> */
		/* 82188828h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 82188828h case   21:*/		return 0x8218882C;
		  /* 8218882Ch */ case   22:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8218882Ch case   22:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8218882Ch case   22:*/		return 0x82188830;
		  /* 82188830h */ case   23:  		/* bc 12, CR0_EQ, 708 */
		/* 82188830h case   23:*/		if ( regs.CR[0].eq ) { return 0x82188AF4;  }
		/* 82188830h case   23:*/		return 0x82188834;
		  /* 82188834h */ case   24:  		/* lwz R11, <#[R28]> */
		/* 82188834h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82188834h case   24:*/		return 0x82188838;
		  /* 82188838h */ case   25:  		/* mr R3, R30 */
		/* 82188838h case   25:*/		regs.R3 = regs.R30;
		/* 82188838h case   25:*/		return 0x8218883C;
		  /* 8218883Ch */ case   26:  		/* lhz R10, <#[R24 + 18]> */
		/* 8218883Ch case   26:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000012) );
		/* 8218883Ch case   26:*/		return 0x82188840;
		  /* 82188840h */ case   27:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 82188840h case   27:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 82188840h case   27:*/		return 0x82188844;
		  /* 82188844h */ case   28:  		/* add R4, R10, R11 */
		/* 82188844h case   28:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82188844h case   28:*/		return 0x82188848;
		  /* 82188848h */ case   29:  		/* bl -20200 */
		/* 82188848h case   29:*/		regs.LR = 0x8218884C; return 0x82183960;
		/* 82188848h case   29:*/		return 0x8218884C;
		  /* 8218884Ch */ case   30:  		/* lwz R11, <#[R16 + 28]> */
		/* 8218884Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 8218884Ch case   30:*/		return 0x82188850;
		  /* 82188850h */ case   31:  		/* mr R26, R3 */
		/* 82188850h case   31:*/		regs.R26 = regs.R3;
		/* 82188850h case   31:*/		return 0x82188854;
		  /* 82188854h */ case   32:  		/* lwz R11, <#[R11 + 20]> */
		/* 82188854h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82188854h case   32:*/		return 0x82188858;
		  /* 82188858h */ case   33:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82188858h case   33:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82188858h case   33:*/		return 0x8218885C;
		  /* 8218885Ch */ case   34:  		/* bc 4, CR0_EQ, 80 */
		/* 8218885Ch case   34:*/		if ( !regs.CR[0].eq ) { return 0x821888AC;  }
		/* 8218885Ch case   34:*/		return 0x82188860;
		  /* 82188860h */ case   35:  		/* mr R31, R11 */
		/* 82188860h case   35:*/		regs.R31 = regs.R11;
		/* 82188860h case   35:*/		return 0x82188864;
		  /* 82188864h */ case   36:  		/* cmplwi CR0, R11, 0 */
		/* 82188864h case   36:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82188864h case   36:*/		return 0x82188868;
		  /* 82188868h */ case   37:  		/* bc 12, CR0_EQ, 68 */
		/* 82188868h case   37:*/		if ( regs.CR[0].eq ) { return 0x821888AC;  }
		/* 82188868h case   37:*/		return 0x8218886C;
		  /* 8218886Ch */ case   38:  		/* lwz R11, <#[R31 + 8]> */
		/* 8218886Ch case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218886Ch case   38:*/		return 0x82188870;
		  /* 82188870h */ case   39:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82188870h case   39:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82188870h case   39:*/		return 0x82188874;
		  /* 82188874h */ case   40:  		/* bc 12, CR0_EQ, 32 */
		/* 82188874h case   40:*/		if ( regs.CR[0].eq ) { return 0x82188894;  }
		/* 82188874h case   40:*/		return 0x82188878;
		  /* 82188878h */ case   41:  		/* cmplw CR6, R31, R16 */
		/* 82188878h case   41:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R16);
		/* 82188878h case   41:*/		return 0x8218887C;
		  /* 8218887Ch */ case   42:  		/* bc 12, CR6_EQ, 24 */
		/* 8218887Ch case   42:*/		if ( regs.CR[6].eq ) { return 0x82188894;  }
		/* 8218887Ch case   42:*/		return 0x82188880;
		  /* 82188880h */ case   43:  		/* mr R3, R30 */
		/* 82188880h case   43:*/		regs.R3 = regs.R30;
		/* 82188880h case   43:*/		return 0x82188884;
		  /* 82188884h */ case   44:  		/* lhz R4, <#[R31 + 18]> */
		/* 82188884h case   44:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000012) );
		/* 82188884h case   44:*/		return 0x82188888;
		  /* 82188888h */ case   45:  		/* bl -20264 */
		/* 82188888h case   45:*/		regs.LR = 0x8218888C; return 0x82183960;
		/* 82188888h case   45:*/		return 0x8218888C;
		  /* 8218888Ch */ case   46:  		/* cmplw CR6, R26, R3 */
		/* 8218888Ch case   46:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R3);
		/* 8218888Ch case   46:*/		return 0x82188890;
		  /* 82188890h */ case   47:  		/* bc 12, CR6_EQ, 668 */
		/* 82188890h case   47:*/		if ( regs.CR[6].eq ) { return 0x82188B2C;  }
		/* 82188890h case   47:*/		return 0x82188894;
	}
	return 0x82188894;
} // Block from 821887D4h-82188894h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82188894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188894);
		  /* 82188894h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82188894h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82188894h case    0:*/		return 0x82188898;
		  /* 82188898h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 82188898h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 82188898h case    1:*/		return 0x8218889C;
		  /* 8218889Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8218889Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8218889Ch case    2:*/		return 0x821888A0;
		  /* 821888A0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821888A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821888AC;  }
		/* 821888A0h case    3:*/		return 0x821888A4;
		  /* 821888A4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821888A4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821888A4h case    4:*/		return 0x821888A8;
		  /* 821888A8h */ case    5:  		/* bc 4, CR6_EQ, -60 */
		/* 821888A8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8218886C;  }
		/* 821888A8h case    5:*/		return 0x821888AC;
	}
	return 0x821888AC;
} // Block from 82188894h-821888ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821888ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821888AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821888AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821888AC);
		  /* 821888ACh */ case    0:  		/* mr R5, R20 */
		/* 821888ACh case    0:*/		regs.R5 = regs.R20;
		/* 821888ACh case    0:*/		return 0x821888B0;
		  /* 821888B0h */ case    1:  		/* mr R4, R26 */
		/* 821888B0h case    1:*/		regs.R4 = regs.R26;
		/* 821888B0h case    1:*/		return 0x821888B4;
		  /* 821888B4h */ case    2:  		/* mr R3, R30 */
		/* 821888B4h case    2:*/		regs.R3 = regs.R30;
		/* 821888B4h case    2:*/		return 0x821888B8;
		  /* 821888B8h */ case    3:  		/* bl -17504 */
		/* 821888B8h case    3:*/		regs.LR = 0x821888BC; return 0x82184458;
		/* 821888B8h case    3:*/		return 0x821888BC;
		  /* 821888BCh */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821888BCh case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821888BCh case    4:*/		return 0x821888C0;
		  /* 821888C0h */ case    5:  		/* bc 12, CR0_EQ, 156 */
		/* 821888C0h case    5:*/		if ( regs.CR[0].eq ) { return 0x8218895C;  }
		/* 821888C0h case    5:*/		return 0x821888C4;
		  /* 821888C4h */ case    6:  		/* lwz R11, <#[R30 + 680]> */
		/* 821888C4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A8) );
		/* 821888C4h case    6:*/		return 0x821888C8;
		  /* 821888C8h */ case    7:  		/* rlwinm R10, R26, 2, 0, 29 */
		/* 821888C8h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R26);
		/* 821888C8h case    7:*/		return 0x821888CC;
		  /* 821888CCh */ case    8:  		/* lwz R9, <#[R16 + 28]> */
		/* 821888CCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x0000001C) );
		/* 821888CCh case    8:*/		return 0x821888D0;
		  /* 821888D0h */ case    9:  		/* lwzx R3, <#[R10 + R11]> */
		/* 821888D0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821888D0h case    9:*/		return 0x821888D4;
		  /* 821888D4h */ case   10:  		/* lwz R4, <#[R9 + 80]> */
		/* 821888D4h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000050) );
		/* 821888D4h case   10:*/		return 0x821888D8;
		  /* 821888D8h */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 821888D8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821888D8h case   11:*/		return 0x821888DC;
		  /* 821888DCh */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 821888DCh case   12:*/		if ( regs.CR[6].eq ) { return 0x821888F0;  }
		/* 821888DCh case   12:*/		return 0x821888E0;
		  /* 821888E0h */ case   13:  		/* lwz R5, <#[R30 + 672]> */
		/* 821888E0h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 821888E0h case   13:*/		return 0x821888E4;
		  /* 821888E4h */ case   14:  		/* bl -19588 */
		/* 821888E4h case   14:*/		regs.LR = 0x821888E8; return 0x82183C60;
		/* 821888E4h case   14:*/		return 0x821888E8;
		  /* 821888E8h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821888E8h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821888E8h case   15:*/		return 0x821888EC;
		  /* 821888ECh */ case   16:  		/* b 44 */
		/* 821888ECh case   16:*/		return 0x82188918;
		/* 821888ECh case   16:*/		return 0x821888F0;
	}
	return 0x821888F0;
} // Block from 821888ACh-821888F0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821888F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821888F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821888F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821888F0);
		  /* 821888F0h */ case    0:  		/* rlwinm R11, R26, 29, 3, 28 */
		/* 821888F0h case    0:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R26);
		/* 821888F0h case    0:*/		return 0x821888F4;
		  /* 821888F4h */ case    1:  		/* rldicl R10, R26, 0, 58 */
		/* 821888F4h case    1:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R26);
		/* 821888F4h case    1:*/		return 0x821888F8;
		  /* 821888F8h */ case    2:  		/* sld R10, R17, R10 */
		/* 821888F8h case    2:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 821888F8h case    2:*/		return 0x821888FC;
		  /* 821888FCh */ case    3:  		/* ldx R11, <#[R11 + R4]> */
		/* 821888FCh case    3:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 821888FCh case    3:*/		return 0x82188900;
		  /* 82188900h */ case    4:  		/* and R11, R10, R11 */
		/* 82188900h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82188900h case    4:*/		return 0x82188904;
		  /* 82188904h */ case    5:  		/* cmpldi CR6, R11, 0 */
		/* 82188904h case    5:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82188904h case    5:*/		return 0x82188908;
		  /* 82188908h */ case    6:  		/* mr R11, R17 */
		/* 82188908h case    6:*/		regs.R11 = regs.R17;
		/* 82188908h case    6:*/		return 0x8218890C;
		  /* 8218890Ch */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8218890Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82188914;  }
		/* 8218890Ch case    7:*/		return 0x82188910;
		  /* 82188910h */ case    8:  		/* li R11, 0 */
		/* 82188910h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82188910h case    8:*/		return 0x82188914;
	}
	return 0x82188914;
} // Block from 821888F0h-82188914h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82188914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188914);
		  /* 82188914h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82188914h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82188914h case    0:*/		return 0x82188918;
	}
	return 0x82188918;
} // Block from 82188914h-82188918h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82188918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188918);
		  /* 82188918h */ case    0:  		/* bc 4, CR0_EQ, 560 */
		/* 82188918h case    0:*/		if ( !regs.CR[0].eq ) { return 0x82188B48;  }
		/* 82188918h case    0:*/		return 0x8218891C;
		  /* 8218891Ch */ case    1:  		/* addi R8, R1, 132 */
		/* 8218891Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x84);
		/* 8218891Ch case    1:*/		return 0x82188920;
		  /* 82188920h */ case    2:  		/* addi R7, R23, 4 */
		/* 82188920h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R23,0x4);
		/* 82188920h case    2:*/		return 0x82188924;
		  /* 82188924h */ case    3:  		/* mr R6, R28 */
		/* 82188924h case    3:*/		regs.R6 = regs.R28;
		/* 82188924h case    3:*/		return 0x82188928;
		  /* 82188928h */ case    4:  		/* mr R5, R28 */
		/* 82188928h case    4:*/		regs.R5 = regs.R28;
		/* 82188928h case    4:*/		return 0x8218892C;
		  /* 8218892Ch */ case    5:  		/* mr R4, R16 */
		/* 8218892Ch case    5:*/		regs.R4 = regs.R16;
		/* 8218892Ch case    5:*/		return 0x82188930;
		  /* 82188930h */ case    6:  		/* mr R3, R30 */
		/* 82188930h case    6:*/		regs.R3 = regs.R30;
		/* 82188930h case    6:*/		return 0x82188934;
		  /* 82188934h */ case    7:  		/* bl -20028 */
		/* 82188934h case    7:*/		regs.LR = 0x82188938; return 0x82183AF8;
		/* 82188934h case    7:*/		return 0x82188938;
		  /* 82188938h */ case    8:  		/* lwz R10, <#[R16 + 28]> */
		/* 82188938h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000001C) );
		/* 82188938h case    8:*/		return 0x8218893C;
		  /* 8218893Ch */ case    9:  		/* lwz R11, <#[R25 + 4]> */
		/* 8218893Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 8218893Ch case    9:*/		return 0x82188940;
		  /* 82188940h */ case   10:  		/* lwz R10, <#[R10 + 68]> */
		/* 82188940h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000044) );
		/* 82188940h case   10:*/		return 0x82188944;
		  /* 82188944h */ case   11:  		/* rlwinm R10, R10, 0, 4, 31 */
		/* 82188944h case   11:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R10,regs.R10);
		/* 82188944h case   11:*/		return 0x82188948;
		  /* 82188948h */ case   12:  		/* add R11, R10, R11 */
		/* 82188948h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82188948h case   12:*/		return 0x8218894C;
		  /* 8218894Ch */ case   13:  		/* cmplw CR6, R11, R19 */
		/* 8218894Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8218894Ch case   13:*/		return 0x82188950;
		  /* 82188950h */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 82188950h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82188958;  }
		/* 82188950h case   14:*/		return 0x82188954;
		  /* 82188954h */ case   15:  		/* mr R11, R19 */
		/* 82188954h case   15:*/		regs.R11 = regs.R19;
		/* 82188954h case   15:*/		return 0x82188958;
	}
	return 0x82188958;
} // Block from 82188918h-82188958h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82188958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188958);
		  /* 82188958h */ case    0:  		/* stw R11, <#[R25 + 4]> */
		/* 82188958h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 82188958h case    0:*/		return 0x8218895C;
	}
	return 0x8218895C;
} // Block from 82188958h-8218895Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218895Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218895C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218895C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218895C);
		  /* 8218895Ch */ case    0:  		/* lwz R29, <#[R16]> */
		/* 8218895Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R16 + 0x00000000) );
		/* 8218895Ch case    0:*/		return 0x82188960;
		  /* 82188960h */ case    1:  		/* addi R27, R14, 4 */
		/* 82188960h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R14,0x4);
		/* 82188960h case    1:*/		return 0x82188964;
		  /* 82188964h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82188964h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82188964h case    2:*/		return 0x82188968;
		  /* 82188968h */ case    3:  		/* bc 12, CR6_EQ, 396 */
		/* 82188968h case    3:*/		if ( regs.CR[6].eq ) { return 0x82188AF4;  }
		/* 82188968h case    3:*/		return 0x8218896C;
		  /* 8218896Ch */ case    4:  		/* cmplw CR6, R29, R28 */
		/* 8218896Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 8218896Ch case    4:*/		return 0x82188970;
		  /* 82188970h */ case    5:  		/* bc 12, CR6_EQ, 388 */
		/* 82188970h case    5:*/		if ( regs.CR[6].eq ) { return 0x82188AF4;  }
		/* 82188970h case    5:*/		return 0x82188974;
		  /* 82188974h */ case    6:  		/* lwz R31, <#[R29 + 12]> */
		/* 82188974h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 82188974h case    6:*/		return 0x82188978;
		  /* 82188978h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 82188978h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82188978h case    7:*/		return 0x8218897C;
		  /* 8218897Ch */ case    8:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8218897Ch case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8218897Ch case    8:*/		return 0x82188980;
		  /* 82188980h */ case    9:  		/* bc 12, CR0_EQ, 360 */
		/* 82188980h case    9:*/		if ( regs.CR[0].eq ) { return 0x82188AE8;  }
		/* 82188980h case    9:*/		return 0x82188984;
		  /* 82188984h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 82188984h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82188984h case   10:*/		return 0x82188988;
		  /* 82188988h */ case   11:  		/* mr R3, R30 */
		/* 82188988h case   11:*/		regs.R3 = regs.R30;
		/* 82188988h case   11:*/		return 0x8218898C;
		  /* 8218898Ch */ case   12:  		/* lhz R10, <#[R31 + 18]> */
		/* 8218898Ch case   12:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000012) );
		/* 8218898Ch case   12:*/		return 0x82188990;
		  /* 82188990h */ case   13:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 82188990h case   13:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 82188990h case   13:*/		return 0x82188994;
		  /* 82188994h */ case   14:  		/* add R4, R10, R11 */
		/* 82188994h case   14:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82188994h case   14:*/		return 0x82188998;
		  /* 82188998h */ case   15:  		/* bl -20536 */
		/* 82188998h case   15:*/		regs.LR = 0x8218899C; return 0x82183960;
		/* 82188998h case   15:*/		return 0x8218899C;
		  /* 8218899Ch */ case   16:  		/* mr R5, R3 */
		/* 8218899Ch case   16:*/		regs.R5 = regs.R3;
		/* 8218899Ch case   16:*/		return 0x821889A0;
		  /* 821889A0h */ case   17:  		/* mr R4, R26 */
		/* 821889A0h case   17:*/		regs.R4 = regs.R26;
		/* 821889A0h case   17:*/		return 0x821889A4;
		  /* 821889A4h */ case   18:  		/* mr R3, R30 */
		/* 821889A4h case   18:*/		regs.R3 = regs.R30;
		/* 821889A4h case   18:*/		return 0x821889A8;
		  /* 821889A8h */ case   19:  		/* bl -17744 */
		/* 821889A8h case   19:*/		regs.LR = 0x821889AC; return 0x82184458;
		/* 821889A8h case   19:*/		return 0x821889AC;
		  /* 821889ACh */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821889ACh case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821889ACh case   20:*/		return 0x821889B0;
		  /* 821889B0h */ case   21:  		/* bc 12, CR0_EQ, 312 */
		/* 821889B0h case   21:*/		if ( regs.CR[0].eq ) { return 0x82188AE8;  }
		/* 821889B0h case   21:*/		return 0x821889B4;
		  /* 821889B4h */ case   22:  		/* lwz R11, <#[R24 + 8]> */
		/* 821889B4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821889B4h case   22:*/		return 0x821889B8;
		  /* 821889B8h */ case   23:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821889B8h case   23:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821889B8h case   23:*/		return 0x821889BC;
		  /* 821889BCh */ case   24:  		/* cmplwi CR6, R10, 116 */
		/* 821889BCh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000074);
		/* 821889BCh case   24:*/		return 0x821889C0;
		  /* 821889C0h */ case   25:  		/* bc 12, CR6_EQ, 20 */
		/* 821889C0h case   25:*/		if ( regs.CR[6].eq ) { return 0x821889D4;  }
		/* 821889C0h case   25:*/		return 0x821889C4;
		  /* 821889C4h */ case   26:  		/* lwz R11, <#[R31 + 8]> */
		/* 821889C4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821889C4h case   26:*/		return 0x821889C8;
		  /* 821889C8h */ case   27:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821889C8h case   27:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821889C8h case   27:*/		return 0x821889CC;
		  /* 821889CCh */ case   28:  		/* cmplwi CR6, R11, 14848 */
		/* 821889CCh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A00);
		/* 821889CCh case   28:*/		return 0x821889D0;
		  /* 821889D0h */ case   29:  		/* bc 4, CR6_EQ, 132 */
		/* 821889D0h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82188A54;  }
		/* 821889D0h case   29:*/		return 0x821889D4;
	}
	return 0x821889D4;
} // Block from 8218895Ch-821889D4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821889D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821889D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821889D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821889D4);
		  /* 821889D4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821889D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821889D4h case    0:*/		return 0x821889D8;
		  /* 821889D8h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821889D8h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821889D8h case    1:*/		return 0x821889DC;
		  /* 821889DCh */ case    2:  		/* cmplwi CR6, R11, 14848 */
		/* 821889DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A00);
		/* 821889DCh case    2:*/		return 0x821889E0;
		  /* 821889E0h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 821889E0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82188A18;  }
		/* 821889E0h case    3:*/		return 0x821889E4;
		  /* 821889E4h */ case    4:  		/* lwz R11, <#[R24 + 28]> */
		/* 821889E4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 821889E4h case    4:*/		return 0x821889E8;
		  /* 821889E8h */ case    5:  		/* lwz R9, <#[R31 + 28]> */
		/* 821889E8h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 821889E8h case    5:*/		return 0x821889EC;
		  /* 821889ECh */ case    6:  		/* lwz R11, <#[R11 + 48]> */
		/* 821889ECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821889ECh case    6:*/		return 0x821889F0;
		  /* 821889F0h */ case    7:  		/* lwz R9, <#[R9 + 40]> */
		/* 821889F0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 821889F0h case    7:*/		return 0x821889F4;
		  /* 821889F4h */ case    8:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821889F4h case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821889F4h case    8:*/		return 0x821889F8;
		  /* 821889F8h */ case    9:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821889F8h case    9:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821889F8h case    9:*/		return 0x821889FC;
		  /* 821889FCh */ case   10:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821889FCh case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821889FCh case   10:*/		return 0x82188A00;
		  /* 82188A00h */ case   11:  		/* addi R11, R11, 1 */
		/* 82188A00h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82188A00h case   11:*/		return 0x82188A04;
		  /* 82188A04h */ case   12:  		/* slw R8, R17, R8 */
		/* 82188A04h case   12:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R17,regs.R8);
		/* 82188A04h case   12:*/		return 0x82188A08;
		  /* 82188A08h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82188A08h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82188A08h case   13:*/		return 0x82188A0C;
		  /* 82188A0Ch */ case   14:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82188A0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82188A0Ch case   14:*/		return 0x82188A10;
		  /* 82188A10h */ case   15:  		/* and. R11, R11, R8 */
		/* 82188A10h case   15:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82188A10h case   15:*/		return 0x82188A14;
		  /* 82188A14h */ case   16:  		/* bc 4, CR0_EQ, 240 */
		/* 82188A14h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82188B04;  }
		/* 82188A14h case   16:*/		return 0x82188A18;
	}
	return 0x82188A18;
} // Block from 821889D4h-82188A18h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82188A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188A18);
		  /* 82188A18h */ case    0:  		/* cmplwi CR6, R10, 116 */
		/* 82188A18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000074);
		/* 82188A18h case    0:*/		return 0x82188A1C;
		  /* 82188A1Ch */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82188A1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82188A54;  }
		/* 82188A1Ch case    1:*/		return 0x82188A20;
		  /* 82188A20h */ case    2:  		/* lwz R11, <#[R31 + 28]> */
		/* 82188A20h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82188A20h case    2:*/		return 0x82188A24;
		  /* 82188A24h */ case    3:  		/* lwz R9, <#[R24 + 28]> */
		/* 82188A24h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R24 + 0x0000001C) );
		/* 82188A24h case    3:*/		return 0x82188A28;
		  /* 82188A28h */ case    4:  		/* lwz R11, <#[R11 + 48]> */
		/* 82188A28h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82188A28h case    4:*/		return 0x82188A2C;
		  /* 82188A2Ch */ case    5:  		/* lwz R9, <#[R9 + 40]> */
		/* 82188A2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 82188A2Ch case    5:*/		return 0x82188A30;
		  /* 82188A30h */ case    6:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 82188A30h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 82188A30h case    6:*/		return 0x82188A34;
		  /* 82188A34h */ case    7:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 82188A34h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 82188A34h case    7:*/		return 0x82188A38;
		  /* 82188A38h */ case    8:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 82188A38h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 82188A38h case    8:*/		return 0x82188A3C;
		  /* 82188A3Ch */ case    9:  		/* addi R11, R11, 1 */
		/* 82188A3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82188A3Ch case    9:*/		return 0x82188A40;
		  /* 82188A40h */ case   10:  		/* slw R8, R17, R8 */
		/* 82188A40h case   10:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R17,regs.R8);
		/* 82188A40h case   10:*/		return 0x82188A44;
		  /* 82188A44h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82188A44h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82188A44h case   11:*/		return 0x82188A48;
		  /* 82188A48h */ case   12:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82188A48h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82188A48h case   12:*/		return 0x82188A4C;
		  /* 82188A4Ch */ case   13:  		/* and. R11, R11, R8 */
		/* 82188A4Ch case   13:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82188A4Ch case   13:*/		return 0x82188A50;
		  /* 82188A50h */ case   14:  		/* bc 4, CR0_EQ, 180 */
		/* 82188A50h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82188B04;  }
		/* 82188A50h case   14:*/		return 0x82188A54;
	}
	return 0x82188A54;
} // Block from 82188A18h-82188A54h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82188A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188A54);
		  /* 82188A54h */ case    0:  		/* lwz R11, <#[R24 + 28]> */
		/* 82188A54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 82188A54h case    0:*/		return 0x82188A58;
		  /* 82188A58h */ case    1:  		/* rlwinm R10, R5, 29, 3, 28 */
		/* 82188A58h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R5);
		/* 82188A58h case    1:*/		return 0x82188A5C;
		  /* 82188A5Ch */ case    2:  		/* rldicl R9, R5, 0, 58 */
		/* 82188A5Ch case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R5);
		/* 82188A5Ch case    2:*/		return 0x82188A60;
		  /* 82188A60h */ case    3:  		/* sld R9, R17, R9 */
		/* 82188A60h case    3:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 82188A60h case    3:*/		return 0x82188A64;
		  /* 82188A64h */ case    4:  		/* lwz R11, <#[R11 + 88]> */
		/* 82188A64h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82188A64h case    4:*/		return 0x82188A68;
		  /* 82188A68h */ case    5:  		/* ldx R11, <#[R10 + R11]> */
		/* 82188A68h case    5:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82188A68h case    5:*/		return 0x82188A6C;
		  /* 82188A6Ch */ case    6:  		/* and R11, R11, R9 */
		/* 82188A6Ch case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82188A6Ch case    6:*/		return 0x82188A70;
		  /* 82188A70h */ case    7:  		/* cmpldi CR6, R11, 0 */
		/* 82188A70h case    7:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82188A70h case    7:*/		return 0x82188A74;
		  /* 82188A74h */ case    8:  		/* mr R11, R17 */
		/* 82188A74h case    8:*/		regs.R11 = regs.R17;
		/* 82188A74h case    8:*/		return 0x82188A78;
		  /* 82188A78h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 82188A78h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82188A80;  }
		/* 82188A78h case    9:*/		return 0x82188A7C;
		  /* 82188A7Ch */ case   10:  		/* li R11, 0 */
		/* 82188A7Ch case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82188A7Ch case   10:*/		return 0x82188A80;
	}
	return 0x82188A80;
} // Block from 82188A54h-82188A80h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82188A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188A80);
		  /* 82188A80h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82188A80h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82188A80h case    0:*/		return 0x82188A84;
		  /* 82188A84h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82188A84h case    1:*/		if ( regs.CR[0].eq ) { return 0x82188A90;  }
		/* 82188A84h case    1:*/		return 0x82188A88;
		  /* 82188A88h */ case    2:  		/* stw R18, <#[R27]> */
		/* 82188A88h case    2:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R27 + 0x00000000) );
		/* 82188A88h case    2:*/		return 0x82188A8C;
		  /* 82188A8Ch */ case    3:  		/* b 92 */
		/* 82188A8Ch case    3:*/		return 0x82188AE8;
		/* 82188A8Ch case    3:*/		return 0x82188A90;
	}
	return 0x82188A90;
} // Block from 82188A80h-82188A90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82188A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188A90);
		  /* 82188A90h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 82188A90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82188A90h case    0:*/		return 0x82188A94;
		  /* 82188A94h */ case    1:  		/* rlwinm R10, R26, 29, 3, 28 */
		/* 82188A94h case    1:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R26);
		/* 82188A94h case    1:*/		return 0x82188A98;
		  /* 82188A98h */ case    2:  		/* rldicl R9, R26, 0, 58 */
		/* 82188A98h case    2:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R26);
		/* 82188A98h case    2:*/		return 0x82188A9C;
		  /* 82188A9Ch */ case    3:  		/* sld R9, R17, R9 */
		/* 82188A9Ch case    3:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 82188A9Ch case    3:*/		return 0x82188AA0;
		  /* 82188AA0h */ case    4:  		/* lwz R11, <#[R11 + 88]> */
		/* 82188AA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82188AA0h case    4:*/		return 0x82188AA4;
		  /* 82188AA4h */ case    5:  		/* ldx R11, <#[R10 + R11]> */
		/* 82188AA4h case    5:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82188AA4h case    5:*/		return 0x82188AA8;
		  /* 82188AA8h */ case    6:  		/* and R11, R11, R9 */
		/* 82188AA8h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82188AA8h case    6:*/		return 0x82188AAC;
		  /* 82188AACh */ case    7:  		/* cmpldi CR6, R11, 0 */
		/* 82188AACh case    7:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82188AACh case    7:*/		return 0x82188AB0;
		  /* 82188AB0h */ case    8:  		/* mr R11, R17 */
		/* 82188AB0h case    8:*/		regs.R11 = regs.R17;
		/* 82188AB0h case    8:*/		return 0x82188AB4;
		  /* 82188AB4h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 82188AB4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82188ABC;  }
		/* 82188AB4h case    9:*/		return 0x82188AB8;
		  /* 82188AB8h */ case   10:  		/* li R11, 0 */
		/* 82188AB8h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82188AB8h case   10:*/		return 0x82188ABC;
	}
	return 0x82188ABC;
} // Block from 82188A90h-82188ABCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82188ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188ABC);
		  /* 82188ABCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82188ABCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82188ABCh case    0:*/		return 0x82188AC0;
		  /* 82188AC0h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82188AC0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82188ACC;  }
		/* 82188AC0h case    1:*/		return 0x82188AC4;
		  /* 82188AC4h */ case    2:  		/* stw R18, <#[R25 + 4]> */
		/* 82188AC4h case    2:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R25 + 0x00000004) );
		/* 82188AC4h case    2:*/		return 0x82188AC8;
		  /* 82188AC8h */ case    3:  		/* b 32 */
		/* 82188AC8h case    3:*/		return 0x82188AE8;
		/* 82188AC8h case    3:*/		return 0x82188ACC;
	}
	return 0x82188ACC;
} // Block from 82188ABCh-82188ACCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82188ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188ACC);
		  /* 82188ACCh */ case    0:  		/* mr R8, R27 */
		/* 82188ACCh case    0:*/		regs.R8 = regs.R27;
		/* 82188ACCh case    0:*/		return 0x82188AD0;
		  /* 82188AD0h */ case    1:  		/* addi R7, R25, 4 */
		/* 82188AD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R25,0x4);
		/* 82188AD0h case    1:*/		return 0x82188AD4;
		  /* 82188AD4h */ case    2:  		/* mr R6, R29 */
		/* 82188AD4h case    2:*/		regs.R6 = regs.R29;
		/* 82188AD4h case    2:*/		return 0x82188AD8;
		  /* 82188AD8h */ case    3:  		/* mr R5, R28 */
		/* 82188AD8h case    3:*/		regs.R5 = regs.R28;
		/* 82188AD8h case    3:*/		return 0x82188ADC;
		  /* 82188ADCh */ case    4:  		/* mr R4, R16 */
		/* 82188ADCh case    4:*/		regs.R4 = regs.R16;
		/* 82188ADCh case    4:*/		return 0x82188AE0;
		  /* 82188AE0h */ case    5:  		/* mr R3, R30 */
		/* 82188AE0h case    5:*/		regs.R3 = regs.R30;
		/* 82188AE0h case    5:*/		return 0x82188AE4;
		  /* 82188AE4h */ case    6:  		/* bl -20460 */
		/* 82188AE4h case    6:*/		regs.LR = 0x82188AE8; return 0x82183AF8;
		/* 82188AE4h case    6:*/		return 0x82188AE8;
	}
	return 0x82188AE8;
} // Block from 82188ACCh-82188AE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188AE8);
		  /* 82188AE8h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 82188AE8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 82188AE8h case    0:*/		return 0x82188AEC;
		  /* 82188AECh */ case    1:  		/* addi R27, R27, 8 */
		/* 82188AECh case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x8);
		/* 82188AECh case    1:*/		return 0x82188AF0;
		  /* 82188AF0h */ case    2:  		/* b -396 */
		/* 82188AF0h case    2:*/		return 0x82188964;
		/* 82188AF0h case    2:*/		return 0x82188AF4;
	}
	return 0x82188AF4;
} // Block from 82188AE8h-82188AF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82188AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188AF4);
		  /* 82188AF4h */ case    0:  		/* lwz R28, <#[R28 + 4]> */
		/* 82188AF4h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000004) );
		/* 82188AF4h case    0:*/		return 0x82188AF8;
		  /* 82188AF8h */ case    1:  		/* addi R22, R22, 1 */
		/* 82188AF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82188AF8h case    1:*/		return 0x82188AFC;
		  /* 82188AFCh */ case    2:  		/* addi R25, R25, 8 */
		/* 82188AFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x8);
		/* 82188AFCh case    2:*/		return 0x82188B00;
		  /* 82188B00h */ case    3:  		/* b -744 */
		/* 82188B00h case    3:*/		return 0x82188818;
		/* 82188B00h case    3:*/		return 0x82188B04;
	}
	return 0x82188B04;
} // Block from 82188AF4h-82188B04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82188B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188B04);
		  /* 82188B04h */ case    0:  		/* cmplwi CR6, R10, 116 */
		/* 82188B04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000074);
		/* 82188B04h case    0:*/		return 0x82188B08;
		  /* 82188B08h */ case    1:  		/* mr R5, R30 */
		/* 82188B08h case    1:*/		regs.R5 = regs.R30;
		/* 82188B08h case    1:*/		return 0x82188B0C;
		  /* 82188B0Ch */ case    2:  		/* mr R3, R16 */
		/* 82188B0Ch case    2:*/		regs.R3 = regs.R16;
		/* 82188B0Ch case    2:*/		return 0x82188B10;
		  /* 82188B10h */ case    3:  		/* mr R4, R28 */
		/* 82188B10h case    3:*/		regs.R4 = regs.R28;
		/* 82188B10h case    3:*/		return 0x82188B14;
		  /* 82188B14h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 82188B14h case    4:*/		if ( regs.CR[6].eq ) { return 0x82188B1C;  }
		/* 82188B14h case    4:*/		return 0x82188B18;
		  /* 82188B18h */ case    5:  		/* mr R4, R29 */
		/* 82188B18h case    5:*/		regs.R4 = regs.R29;
		/* 82188B18h case    5:*/		return 0x82188B1C;
	}
	return 0x82188B1C;
} // Block from 82188B04h-82188B1Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82188B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188B1C);
		  /* 82188B1Ch */ case    0:  		/* bl -66060 */
		/* 82188B1Ch case    0:*/		regs.LR = 0x82188B20; return 0x82178910;
		/* 82188B1Ch case    0:*/		return 0x82188B20;
		  /* 82188B20h */ case    1:  		/* addi R21, R21, -1 */
		/* 82188B20h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0xFFFFFFFF);
		/* 82188B20h case    1:*/		return 0x82188B24;
		  /* 82188B24h */ case    2:  		/* addi R23, R23, -8 */
		/* 82188B24h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0xFFFFFFF8);
		/* 82188B24h case    2:*/		return 0x82188B28;
		  /* 82188B28h */ case    3:  		/* b -800 */
		/* 82188B28h case    3:*/		return 0x82188808;
		/* 82188B28h case    3:*/		return 0x82188B2C;
	}
	return 0x82188B2C;
} // Block from 82188B1Ch-82188B2Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82188B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188B2C);
		  /* 82188B2Ch */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 82188B2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82188B2Ch case    0:*/		return 0x82188B30;
		  /* 82188B30h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 82188B30h case    1:*/		if ( regs.CR[6].eq ) { return 0x82188B60;  }
		/* 82188B30h case    1:*/		return 0x82188B34;
		  /* 82188B34h */ case    2:  		/* addi R11, R14, -4 */
		/* 82188B34h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0xFFFFFFFC);
		/* 82188B34h case    2:*/		return 0x82188B38;
		  /* 82188B38h */ case    3:  		/* mtspr CTR, R21 */
		/* 82188B38h case    3:*/		regs.CTR = regs.R21;
		/* 82188B38h case    3:*/		return 0x82188B3C;
		  /* 82188B3Ch */ case    4:  		/* stwu R19, <#[R11 + 8]> */
		/* 82188B3Ch case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82188B3Ch case    4:*/		return 0x82188B40;
		  /* 82188B40h */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 82188B40h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82188B3C;  }
		/* 82188B40h case    5:*/		return 0x82188B44;
		  /* 82188B44h */ case    6:  		/* b 28 */
		/* 82188B44h case    6:*/		return 0x82188B60;
		/* 82188B44h case    6:*/		return 0x82188B48;
	}
	return 0x82188B48;
} // Block from 82188B2Ch-82188B48h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82188B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188B48);
		  /* 82188B48h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 82188B48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82188B48h case    0:*/		return 0x82188B4C;
		  /* 82188B4Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82188B4Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82188B60;  }
		/* 82188B4Ch case    1:*/		return 0x82188B50;
		  /* 82188B50h */ case    2:  		/* addi R11, R14, -4 */
		/* 82188B50h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0xFFFFFFFC);
		/* 82188B50h case    2:*/		return 0x82188B54;
		  /* 82188B54h */ case    3:  		/* mtspr CTR, R21 */
		/* 82188B54h case    3:*/		regs.CTR = regs.R21;
		/* 82188B54h case    3:*/		return 0x82188B58;
		  /* 82188B58h */ case    4:  		/* stwu R19, <#[R11 + 8]> */
		/* 82188B58h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82188B58h case    4:*/		return 0x82188B5C;
		  /* 82188B5Ch */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 82188B5Ch case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82188B58;  }
		/* 82188B5Ch case    5:*/		return 0x82188B60;
	}
	return 0x82188B60;
} // Block from 82188B48h-82188B60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82188B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188B60);
		  /* 82188B60h */ case    0:  		/* addic. R8, R21, 1 */
		/* 82188B60h case    0:*/		cpu::op::addic<1>(regs,&regs.R8,regs.R21,0x1);
		/* 82188B60h case    0:*/		return 0x82188B64;
		  /* 82188B64h */ case    1:  		/* li R6, -1 */
		/* 82188B64h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 82188B64h case    1:*/		return 0x82188B68;
		  /* 82188B68h */ case    2:  		/* mr R10, R19 */
		/* 82188B68h case    2:*/		regs.R10 = regs.R19;
		/* 82188B68h case    2:*/		return 0x82188B6C;
		  /* 82188B6Ch */ case    3:  		/* li R7, 0 */
		/* 82188B6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82188B6Ch case    3:*/		return 0x82188B70;
		  /* 82188B70h */ case    4:  		/* bc 12, CR0_EQ, 8696 */
		/* 82188B70h case    4:*/		if ( regs.CR[0].eq ) { return 0x8218AD68;  }
		/* 82188B70h case    4:*/		return 0x82188B74;
		  /* 82188B74h */ case    5:  		/* addi R11, R14, 4 */
		/* 82188B74h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0x4);
		/* 82188B74h case    5:*/		return 0x82188B78;
		  /* 82188B78h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 82188B78h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82188B78h case    6:*/		return 0x82188B7C;
		  /* 82188B7Ch */ case    7:  		/* cmplw CR6, R9, R10 */
		/* 82188B7Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82188B7Ch case    7:*/		return 0x82188B80;
		  /* 82188B80h */ case    8:  		/* bc 4, CR6_LT, 12 */
		/* 82188B80h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82188B8C;  }
		/* 82188B80h case    8:*/		return 0x82188B84;
		  /* 82188B84h */ case    9:  		/* lwz R6, <#[R11 - 4]> */
		/* 82188B84h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82188B84h case    9:*/		return 0x82188B88;
		  /* 82188B88h */ case   10:  		/* mr R10, R9 */
		/* 82188B88h case   10:*/		regs.R10 = regs.R9;
		/* 82188B88h case   10:*/		return 0x82188B8C;
	}
	return 0x82188B8C;
} // Block from 82188B60h-82188B8Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82188B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188B8C);
		  /* 82188B8Ch */ case    0:  		/* addi R7, R7, 1 */
		/* 82188B8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82188B8Ch case    0:*/		return 0x82188B90;
		  /* 82188B90h */ case    1:  		/* addi R11, R11, 8 */
		/* 82188B90h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82188B90h case    1:*/		return 0x82188B94;
		  /* 82188B94h */ case    2:  		/* cmplw CR6, R7, R8 */
		/* 82188B94h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 82188B94h case    2:*/		return 0x82188B98;
		  /* 82188B98h */ case    3:  		/* bc 12, CR6_LT, -32 */
		/* 82188B98h case    3:*/		if ( regs.CR[6].lt ) { return 0x82188B78;  }
		/* 82188B98h case    3:*/		return 0x82188B9C;
		  /* 82188B9Ch */ case    4:  		/* cmplw CR6, R10, R19 */
		/* 82188B9Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 82188B9Ch case    4:*/		return 0x82188BA0;
		  /* 82188BA0h */ case    5:  		/* bc 12, CR6_EQ, 8648 */
		/* 82188BA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8218AD68;  }
		/* 82188BA0h case    5:*/		return 0x82188BA4;
		  /* 82188BA4h */ case    6:  		/* cmplw CR6, R6, R21 */
		/* 82188BA4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R21);
		/* 82188BA4h case    6:*/		return 0x82188BA8;
		  /* 82188BA8h */ case    7:  		/* bc 12, CR6_EQ, 72 */
		/* 82188BA8h case    7:*/		if ( regs.CR[6].eq ) { return 0x82188BF0;  }
		/* 82188BA8h case    7:*/		return 0x82188BAC;
		  /* 82188BACh */ case    8:  		/* lwz R11, <#[R16]> */
		/* 82188BACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 82188BACh case    8:*/		return 0x82188BB0;
		  /* 82188BB0h */ case    9:  		/* li R10, 0 */
		/* 82188BB0h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82188BB0h case    9:*/		return 0x82188BB4;
		  /* 82188BB4h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82188BB4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188BB4h case   10:*/		return 0x82188BB8;
		  /* 82188BB8h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 82188BB8h case   11:*/		if ( regs.CR[6].eq ) { return 0x82188BD0;  }
		/* 82188BB8h case   11:*/		return 0x82188BBC;
		  /* 82188BBCh */ case   12:  		/* cmplw CR6, R10, R6 */
		/* 82188BBCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 82188BBCh case   12:*/		return 0x82188BC0;
		  /* 82188BC0h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 82188BC0h case   13:*/		if ( regs.CR[6].eq ) { return 0x82188BD0;  }
		/* 82188BC0h case   13:*/		return 0x82188BC4;
		  /* 82188BC4h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82188BC4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82188BC4h case   14:*/		return 0x82188BC8;
		  /* 82188BC8h */ case   15:  		/* addi R10, R10, 1 */
		/* 82188BC8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82188BC8h case   15:*/		return 0x82188BCC;
		  /* 82188BCCh */ case   16:  		/* b -24 */
		/* 82188BCCh case   16:*/		return 0x82188BB4;
		/* 82188BCCh case   16:*/		return 0x82188BD0;
	}
	return 0x82188BD0;
} // Block from 82188B8Ch-82188BD0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82188BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188BD0);
		  /* 82188BD0h */ case    0:  		/* lwz R9, <#[R11 + 12]> */
		/* 82188BD0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82188BD0h case    0:*/		return 0x82188BD4;
		  /* 82188BD4h */ case    1:  		/* mr R3, R30 */
		/* 82188BD4h case    1:*/		regs.R3 = regs.R30;
		/* 82188BD4h case    1:*/		return 0x82188BD8;
		  /* 82188BD8h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 82188BD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82188BD8h case    2:*/		return 0x82188BDC;
		  /* 82188BDCh */ case    3:  		/* rlwinm R10, R11, 27, 30, 31 */
		/* 82188BDCh case    3:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R11);
		/* 82188BDCh case    3:*/		return 0x82188BE0;
		  /* 82188BE0h */ case    4:  		/* lhz R11, <#[R9 + 18]> */
		/* 82188BE0h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000012) );
		/* 82188BE0h case    4:*/		return 0x82188BE4;
		  /* 82188BE4h */ case    5:  		/* add R4, R10, R11 */
		/* 82188BE4h case    5:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82188BE4h case    5:*/		return 0x82188BE8;
		  /* 82188BE8h */ case    6:  		/* bl -21128 */
		/* 82188BE8h case    6:*/		regs.LR = 0x82188BEC; return 0x82183960;
		/* 82188BE8h case    6:*/		return 0x82188BEC;
		  /* 82188BECh */ case    7:  		/* mr R20, R3 */
		/* 82188BECh case    7:*/		regs.R20 = regs.R3;
		/* 82188BECh case    7:*/		return 0x82188BF0;
	}
	return 0x82188BF0;
} // Block from 82188BD0h-82188BF0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82188BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188BF0);
		  /* 82188BF0h */ case    0:  		/* li R17, 0 */
		/* 82188BF0h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 82188BF0h case    0:*/		return 0x82188BF4;
		  /* 82188BF4h */ case    1:  		/* li R27, 1 */
		/* 82188BF4h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82188BF4h case    1:*/		return 0x82188BF8;
		  /* 82188BF8h */ case    2:  		/* lwz R19, <#[R16]> */
		/* 82188BF8h case    2:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R16 + 0x00000000) );
		/* 82188BF8h case    2:*/		return 0x82188BFC;
		  /* 82188BFCh */ case    3:  		/* cmplwi CR6, R19, 0 */
		/* 82188BFCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82188BFCh case    3:*/		return 0x82188C00;
		  /* 82188C00h */ case    4:  		/* bc 12, CR6_EQ, 2384 */
		/* 82188C00h case    4:*/		if ( regs.CR[6].eq ) { return 0x82189550;  }
		/* 82188C00h case    4:*/		return 0x82188C04;
		  /* 82188C04h */ case    5:  		/* lwz R23, <#[R19 + 12]> */
		/* 82188C04h case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R19 + 0x0000000C) );
		/* 82188C04h case    5:*/		return 0x82188C08;
		  /* 82188C08h */ case    6:  		/* lwz R11, <#[R23 + 8]> */
		/* 82188C08h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82188C08h case    6:*/		return 0x82188C0C;
		  /* 82188C0Ch */ case    7:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82188C0Ch case    7:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82188C0Ch case    7:*/		return 0x82188C10;
		  /* 82188C10h */ case    8:  		/* bc 12, CR0_EQ, 112 */
		/* 82188C10h case    8:*/		if ( regs.CR[0].eq ) { return 0x82188C80;  }
		/* 82188C10h case    8:*/		return 0x82188C14;
		  /* 82188C14h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 82188C14h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82188C14h case    9:*/		return 0x82188C18;
		  /* 82188C18h */ case   10:  		/* mr R3, R30 */
		/* 82188C18h case   10:*/		regs.R3 = regs.R30;
		/* 82188C18h case   10:*/		return 0x82188C1C;
		  /* 82188C1Ch */ case   11:  		/* lhz R10, <#[R23 + 18]> */
		/* 82188C1Ch case   11:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000012) );
		/* 82188C1Ch case   11:*/		return 0x82188C20;
		  /* 82188C20h */ case   12:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 82188C20h case   12:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 82188C20h case   12:*/		return 0x82188C24;
		  /* 82188C24h */ case   13:  		/* add R29, R10, R11 */
		/* 82188C24h case   13:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 82188C24h case   13:*/		return 0x82188C28;
		  /* 82188C28h */ case   14:  		/* mr R4, R29 */
		/* 82188C28h case   14:*/		regs.R4 = regs.R29;
		/* 82188C28h case   14:*/		return 0x82188C2C;
		  /* 82188C2Ch */ case   15:  		/* bl -21196 */
		/* 82188C2Ch case   15:*/		regs.LR = 0x82188C30; return 0x82183960;
		/* 82188C2Ch case   15:*/		return 0x82188C30;
		  /* 82188C30h */ case   16:  		/* rlwinm. R18, R17, 0, 24, 31 */
		/* 82188C30h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R18,regs.R17);
		/* 82188C30h case   16:*/		return 0x82188C34;
		  /* 82188C34h */ case   17:  		/* mr R31, R3 */
		/* 82188C34h case   17:*/		regs.R31 = regs.R3;
		/* 82188C34h case   17:*/		return 0x82188C38;
		  /* 82188C38h */ case   18:  		/* bc 4, CR0_EQ, 12 */
		/* 82188C38h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82188C44;  }
		/* 82188C38h case   18:*/		return 0x82188C3C;
		  /* 82188C3Ch */ case   19:  		/* cmplw CR6, R3, R20 */
		/* 82188C3Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R20);
		/* 82188C3Ch case   19:*/		return 0x82188C40;
		  /* 82188C40h */ case   20:  		/* bc 12, CR6_EQ, 64 */
		/* 82188C40h case   20:*/		if ( regs.CR[6].eq ) { return 0x82188C80;  }
		/* 82188C40h case   20:*/		return 0x82188C44;
	}
	return 0x82188C44;
} // Block from 82188BF0h-82188C44h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82188C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188C44);
		  /* 82188C44h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 82188C44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 82188C44h case    0:*/		return 0x82188C48;
		  /* 82188C48h */ case    1:  		/* bc 4, CR6_EQ, 64 */
		/* 82188C48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82188C88;  }
		/* 82188C48h case    1:*/		return 0x82188C4C;
		  /* 82188C4Ch */ case    2:  		/* mr R5, R20 */
		/* 82188C4Ch case    2:*/		regs.R5 = regs.R20;
		/* 82188C4Ch case    2:*/		return 0x82188C50;
		  /* 82188C50h */ case    3:  		/* mr R4, R31 */
		/* 82188C50h case    3:*/		regs.R4 = regs.R31;
		/* 82188C50h case    3:*/		return 0x82188C54;
		  /* 82188C54h */ case    4:  		/* mr R3, R30 */
		/* 82188C54h case    4:*/		regs.R3 = regs.R30;
		/* 82188C54h case    4:*/		return 0x82188C58;
		  /* 82188C58h */ case    5:  		/* bl -18432 */
		/* 82188C58h case    5:*/		regs.LR = 0x82188C5C; return 0x82184458;
		/* 82188C58h case    5:*/		return 0x82188C5C;
		  /* 82188C5Ch */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82188C5Ch case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82188C5Ch case    6:*/		return 0x82188C60;
		  /* 82188C60h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 82188C60h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82188C88;  }
		/* 82188C60h case    7:*/		return 0x82188C64;
		  /* 82188C64h */ case    8:  		/* mr R4, R29 */
		/* 82188C64h case    8:*/		regs.R4 = regs.R29;
		/* 82188C64h case    8:*/		return 0x82188C68;
		  /* 82188C68h */ case    9:  		/* mr R3, R30 */
		/* 82188C68h case    9:*/		regs.R3 = regs.R30;
		/* 82188C68h case    9:*/		return 0x82188C6C;
		  /* 82188C6Ch */ case   10:  		/* bl -16908 */
		/* 82188C6Ch case   10:*/		regs.LR = 0x82188C70; return 0x82184A60;
		/* 82188C6Ch case   10:*/		return 0x82188C70;
		  /* 82188C70h */ case   11:  		/* mr R5, R20 */
		/* 82188C70h case   11:*/		regs.R5 = regs.R20;
		/* 82188C70h case   11:*/		return 0x82188C74;
		  /* 82188C74h */ case   12:  		/* mr R4, R31 */
		/* 82188C74h case   12:*/		regs.R4 = regs.R31;
		/* 82188C74h case   12:*/		return 0x82188C78;
		  /* 82188C78h */ case   13:  		/* mr R3, R30 */
		/* 82188C78h case   13:*/		regs.R3 = regs.R30;
		/* 82188C78h case   13:*/		return 0x82188C7C;
		  /* 82188C7Ch */ case   14:  		/* bl -16924 */
		/* 82188C7Ch case   14:*/		regs.LR = 0x82188C80; return 0x82184A60;
		/* 82188C7Ch case   14:*/		return 0x82188C80;
	}
	return 0x82188C80;
} // Block from 82188C44h-82188C80h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82188C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188C80);
		  /* 82188C80h */ case    0:  		/* lwz R19, <#[R19 + 4]> */
		/* 82188C80h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R19 + 0x00000004) );
		/* 82188C80h case    0:*/		return 0x82188C84;
		  /* 82188C84h */ case    1:  		/* b -136 */
		/* 82188C84h case    1:*/		return 0x82188BFC;
		/* 82188C84h case    1:*/		return 0x82188C88;
	}
	return 0x82188C88;
} // Block from 82188C80h-82188C88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82188C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188C88);
		  /* 82188C88h */ case    0:  		/* lwz R21, <#[R16 + 28]> */
		/* 82188C88h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R16 + 0x0000001C) );
		/* 82188C88h case    0:*/		return 0x82188C8C;
		  /* 82188C8Ch */ case    1:  		/* li R5, 0 */
		/* 82188C8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82188C8Ch case    1:*/		return 0x82188C90;
		  /* 82188C90h */ case    2:  		/* addi R3, R1, 160 */
		/* 82188C90h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82188C90h case    2:*/		return 0x82188C94;
		  /* 82188C94h */ case    3:  		/* mr R4, R21 */
		/* 82188C94h case    3:*/		regs.R4 = regs.R21;
		/* 82188C94h case    3:*/		return 0x82188C98;
		  /* 82188C98h */ case    4:  		/* li R22, 0 */
		/* 82188C98h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82188C98h case    4:*/		return 0x82188C9C;
		  /* 82188C9Ch */ case    5:  		/* bl -115180 */
		/* 82188C9Ch case    5:*/		regs.LR = 0x82188CA0; return 0x8216CAB0;
		/* 82188C9Ch case    5:*/		return 0x82188CA0;
		  /* 82188CA0h */ case    6:  		/* b 2168 */
		/* 82188CA0h case    6:*/		return 0x82189518;
		/* 82188CA0h case    6:*/		return 0x82188CA4;
		  /* 82188CA4h */ case    7:  		/* li R7, 1 */
		/* 82188CA4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82188CA4h case    7:*/		return 0x82188CA8;
		  /* 82188CA8h */ case    8:  		/* mr R6, R19 */
		/* 82188CA8h case    8:*/		regs.R6 = regs.R19;
		/* 82188CA8h case    8:*/		return 0x82188CAC;
		  /* 82188CACh */ case    9:  		/* mr R5, R25 */
		/* 82188CACh case    9:*/		regs.R5 = regs.R25;
		/* 82188CACh case    9:*/		return 0x82188CB0;
		  /* 82188CB0h */ case   10:  		/* mr R4, R16 */
		/* 82188CB0h case   10:*/		regs.R4 = regs.R16;
		/* 82188CB0h case   10:*/		return 0x82188CB4;
		  /* 82188CB4h */ case   11:  		/* mr R3, R30 */
		/* 82188CB4h case   11:*/		regs.R3 = regs.R30;
		/* 82188CB4h case   11:*/		return 0x82188CB8;
		  /* 82188CB8h */ case   12:  		/* bl 391240 */
		/* 82188CB8h case   12:*/		regs.LR = 0x82188CBC; return 0x821E8500;
		/* 82188CB8h case   12:*/		return 0x82188CBC;
		  /* 82188CBCh */ case   13:  		/* cmplw CR6, R19, R3 */
		/* 82188CBCh case   13:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R3);
		/* 82188CBCh case   13:*/		return 0x82188CC0;
		  /* 82188CC0h */ case   14:  		/* bc 4, CR6_EQ, 2136 */
		/* 82188CC0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82189518;  }
		/* 82188CC0h case   14:*/		return 0x82188CC4;
		  /* 82188CC4h */ case   15:  		/* lwz R11, <#[R1 + 176]> */
		/* 82188CC4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82188CC4h case   15:*/		return 0x82188CC8;
		  /* 82188CC8h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82188CC8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188CC8h case   16:*/		return 0x82188CCC;
		  /* 82188CCCh */ case   17:  		/* bc 12, CR6_EQ, 60 */
		/* 82188CCCh case   17:*/		if ( regs.CR[6].eq ) { return 0x82188D08;  }
		/* 82188CCCh case   17:*/		return 0x82188CD0;
		  /* 82188CD0h */ case   18:  		/* lwz R11, <#[R11 + 48]> */
		/* 82188CD0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82188CD0h case   18:*/		return 0x82188CD4;
		  /* 82188CD4h */ case   19:  		/* lwz R10, <#[R23 + 28]> */
		/* 82188CD4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000001C) );
		/* 82188CD4h case   19:*/		return 0x82188CD8;
		  /* 82188CD8h */ case   20:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 82188CD8h case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 82188CD8h case   20:*/		return 0x82188CDC;
		  /* 82188CDCh */ case   21:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 82188CDCh case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 82188CDCh case   21:*/		return 0x82188CE0;
		  /* 82188CE0h */ case   22:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82188CE0h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82188CE0h case   22:*/		return 0x82188CE4;
		  /* 82188CE4h */ case   23:  		/* addi R11, R11, 1 */
		/* 82188CE4h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82188CE4h case   23:*/		return 0x82188CE8;
		  /* 82188CE8h */ case   24:  		/* lwz R10, <#[R10 + 40]> */
		/* 82188CE8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 82188CE8h case   24:*/		return 0x82188CEC;
		  /* 82188CECh */ case   25:  		/* slw R9, R27, R9 */
		/* 82188CECh case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 82188CECh case   25:*/		return 0x82188CF0;
		  /* 82188CF0h */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82188CF0h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82188CF0h case   26:*/		return 0x82188CF4;
		  /* 82188CF4h */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82188CF4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82188CF4h case   27:*/		return 0x82188CF8;
		  /* 82188CF8h */ case   28:  		/* and. R11, R11, R9 */
		/* 82188CF8h case   28:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82188CF8h case   28:*/		return 0x82188CFC;
		  /* 82188CFCh */ case   29:  		/* bc 4, CR0_EQ, 1560 */
		/* 82188CFCh case   29:*/		if ( !regs.CR[0].eq ) { return 0x82189314;  }
		/* 82188CFCh case   29:*/		return 0x82188D00;
		  /* 82188D00h */ case   30:  		/* lwz R25, <#[R1 + 180]> */
		/* 82188D00h case   30:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82188D00h case   30:*/		return 0x82188D04;
		  /* 82188D04h */ case   31:  		/* b 1552 */
		/* 82188D04h case   31:*/		return 0x82189314;
		/* 82188D04h case   31:*/		return 0x82188D08;
	}
	return 0x82188D08;
} // Block from 82188C88h-82188D08h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82188D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188D08);
		  /* 82188D08h */ case    0:  		/* lwz R11, <#[R21 + 48]> */
		/* 82188D08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 82188D08h case    0:*/		return 0x82188D0C;
		  /* 82188D0Ch */ case    1:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 82188D0Ch case    1:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 82188D0Ch case    1:*/		return 0x82188D10;
		  /* 82188D10h */ case    2:  		/* bc 4, CR0_EQ, 1540 */
		/* 82188D10h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82189314;  }
		/* 82188D10h case    2:*/		return 0x82188D14;
		  /* 82188D14h */ case    3:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 82188D14h case    3:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 82188D14h case    3:*/		return 0x82188D18;
		  /* 82188D18h */ case    4:  		/* bc 4, CR0_EQ, 1532 */
		/* 82188D18h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82189314;  }
		/* 82188D18h case    4:*/		return 0x82188D1C;
		  /* 82188D1Ch */ case    5:  		/* lwz R11, <#[R25 + 12]> */
		/* 82188D1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82188D1Ch case    5:*/		return 0x82188D20;
		  /* 82188D20h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82188D20h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188D20h case    6:*/		return 0x82188D24;
		  /* 82188D24h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 82188D24h case    7:*/		if ( regs.CR[6].eq ) { return 0x82188D38;  }
		/* 82188D24h case    7:*/		return 0x82188D28;
		  /* 82188D28h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 82188D28h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82188D28h case    8:*/		return 0x82188D2C;
		  /* 82188D2Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82188D2Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82188D2Ch case    9:*/		return 0x82188D30;
		  /* 82188D30h */ case   10:  		/* mr R11, R27 */
		/* 82188D30h case   10:*/		regs.R11 = regs.R27;
		/* 82188D30h case   10:*/		return 0x82188D34;
		  /* 82188D34h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 82188D34h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82188D3C;  }
		/* 82188D34h case   11:*/		return 0x82188D38;
	}
	return 0x82188D38;
} // Block from 82188D08h-82188D38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82188D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188D38);
		  /* 82188D38h */ case    0:  		/* li R11, 0 */
		/* 82188D38h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82188D38h case    0:*/		return 0x82188D3C;
	}
	return 0x82188D3C;
} // Block from 82188D38h-82188D3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82188D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188D3C);
		  /* 82188D3Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82188D3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82188D3Ch case    0:*/		return 0x82188D40;
		  /* 82188D40h */ case    1:  		/* bc 12, CR0_EQ, 1492 */
		/* 82188D40h case    1:*/		if ( regs.CR[0].eq ) { return 0x82189314;  }
		/* 82188D40h case    1:*/		return 0x82188D44;
		  /* 82188D44h */ case    2:  		/* lwz R11, <#[R25 + 28]> */
		/* 82188D44h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 82188D44h case    2:*/		return 0x82188D48;
		  /* 82188D48h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82188D48h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82188D48h case    3:*/		return 0x82188D4C;
		  /* 82188D4Ch */ case    4:  		/* bc 4, CR0_EQ, 36 */
		/* 82188D4Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x82188D70;  }
		/* 82188D4Ch case    4:*/		return 0x82188D50;
		  /* 82188D50h */ case    5:  		/* lwz R11, <#[R25 + 24]> */
		/* 82188D50h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 82188D50h case    5:*/		return 0x82188D54;
		  /* 82188D54h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82188D54h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82188D54h case    6:*/		return 0x82188D58;
		  /* 82188D58h */ case    7:  		/* addic. R24, R11, -40 */
		/* 82188D58h case    7:*/		cpu::op::addic<1>(regs,&regs.R24,regs.R11,0xFFFFFFD8);
		/* 82188D58h case    7:*/		return 0x82188D5C;
		  /* 82188D5Ch */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 82188D5Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82188D70;  }
		/* 82188D5Ch case    8:*/		return 0x82188D60;
		  /* 82188D60h */ case    9:  		/* mr R3, R24 */
		/* 82188D60h case    9:*/		regs.R3 = regs.R24;
		/* 82188D60h case    9:*/		return 0x82188D64;
		  /* 82188D64h */ case   10:  		/* bl -150380 */
		/* 82188D64h case   10:*/		regs.LR = 0x82188D68; return 0x821641F8;
		/* 82188D64h case   10:*/		return 0x82188D68;
		  /* 82188D68h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82188D68h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82188D68h case   11:*/		return 0x82188D6C;
		  /* 82188D6Ch */ case   12:  		/* bc 4, CR0_EQ, 48 */
		/* 82188D6Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x82188D9C;  }
		/* 82188D6Ch case   12:*/		return 0x82188D70;
	}
	return 0x82188D70;
} // Block from 82188D3Ch-82188D70h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82188D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188D70);
		  /* 82188D70h */ case    0:  		/* lwz R11, <#[R25 + 36]> */
		/* 82188D70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 82188D70h case    0:*/		return 0x82188D74;
		  /* 82188D74h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82188D74h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82188D74h case    1:*/		return 0x82188D78;
		  /* 82188D78h */ case    2:  		/* bc 4, CR0_EQ, 8212 */
		/* 82188D78h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8218AD8C;  }
		/* 82188D78h case    2:*/		return 0x82188D7C;
		  /* 82188D7Ch */ case    3:  		/* lwz R11, <#[R25 + 32]> */
		/* 82188D7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000020) );
		/* 82188D7Ch case    3:*/		return 0x82188D80;
		  /* 82188D80h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82188D80h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82188D80h case    4:*/		return 0x82188D84;
		  /* 82188D84h */ case    5:  		/* addic. R24, R11, -40 */
		/* 82188D84h case    5:*/		cpu::op::addic<1>(regs,&regs.R24,regs.R11,0xFFFFFFD8);
		/* 82188D84h case    5:*/		return 0x82188D88;
		  /* 82188D88h */ case    6:  		/* bc 12, CR0_EQ, 8196 */
		/* 82188D88h case    6:*/		if ( regs.CR[0].eq ) { return 0x8218AD8C;  }
		/* 82188D88h case    6:*/		return 0x82188D8C;
		  /* 82188D8Ch */ case    7:  		/* mr R3, R24 */
		/* 82188D8Ch case    7:*/		regs.R3 = regs.R24;
		/* 82188D8Ch case    7:*/		return 0x82188D90;
		  /* 82188D90h */ case    8:  		/* bl -150424 */
		/* 82188D90h case    8:*/		regs.LR = 0x82188D94; return 0x821641F8;
		/* 82188D90h case    8:*/		return 0x82188D94;
		  /* 82188D94h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82188D94h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82188D94h case    9:*/		return 0x82188D98;
		  /* 82188D98h */ case   10:  		/* bc 12, CR0_EQ, 8180 */
		/* 82188D98h case   10:*/		if ( regs.CR[0].eq ) { return 0x8218AD8C;  }
		/* 82188D98h case   10:*/		return 0x82188D9C;
	}
	return 0x82188D9C;
} // Block from 82188D70h-82188D9Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82188D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188D9C);
		  /* 82188D9Ch */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 82188D9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 82188D9Ch case    0:*/		return 0x82188DA0;
		  /* 82188DA0h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82188DA0h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82188DA0h case    1:*/		return 0x82188DA4;
		  /* 82188DA4h */ case    2:  		/* cmplwi CR6, R11, 85 */
		/* 82188DA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 82188DA4h case    2:*/		return 0x82188DA8;
		  /* 82188DA8h */ case    3:  		/* bc 12, CR6_EQ, 1380 */
		/* 82188DA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8218930C;  }
		/* 82188DA8h case    3:*/		return 0x82188DAC;
		  /* 82188DACh */ case    4:  		/* cmplwi CR6, R11, 84 */
		/* 82188DACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 82188DACh case    4:*/		return 0x82188DB0;
		  /* 82188DB0h */ case    5:  		/* bc 12, CR6_EQ, 1372 */
		/* 82188DB0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8218930C;  }
		/* 82188DB0h case    5:*/		return 0x82188DB4;
		  /* 82188DB4h */ case    6:  		/* mr R3, R30 */
		/* 82188DB4h case    6:*/		regs.R3 = regs.R30;
		/* 82188DB4h case    6:*/		return 0x82188DB8;
		  /* 82188DB8h */ case    7:  		/* bl -114304 */
		/* 82188DB8h case    7:*/		regs.LR = 0x82188DBC; return 0x8216CF38;
		/* 82188DB8h case    7:*/		return 0x82188DBC;
		  /* 82188DBCh */ case    8:  		/* lwz R11, <#[R1 + 172]> */
		/* 82188DBCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 82188DBCh case    8:*/		return 0x82188DC0;
		  /* 82188DC0h */ case    9:  		/* lwz R10, <#[R3 + 68]> */
		/* 82188DC0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000044) );
		/* 82188DC0h case    9:*/		return 0x82188DC4;
		  /* 82188DC4h */ case   10:  		/* mr R31, R3 */
		/* 82188DC4h case   10:*/		regs.R31 = regs.R3;
		/* 82188DC4h case   10:*/		return 0x82188DC8;
		  /* 82188DC8h */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 82188DC8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82188DC8h case   11:*/		return 0x82188DCC;
		  /* 82188DCCh */ case   12:  		/* rlwimi R11, R10, 0, 0, 3 */
		/* 82188DCCh case   12:*/		cpu::op::rlwimi<0,0,0,3>(regs,&regs.R11,regs.R10);
		/* 82188DCCh case   12:*/		return 0x82188DD0;
		  /* 82188DD0h */ case   13:  		/* stw R11, <#[R3 + 68]> */
		/* 82188DD0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000044) );
		/* 82188DD0h case   13:*/		return 0x82188DD4;
		  /* 82188DD4h */ case   14:  		/* lwz R11, <#[R25 + 48]> */
		/* 82188DD4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 82188DD4h case   14:*/		return 0x82188DD8;
		  /* 82188DD8h */ case   15:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 82188DD8h case   15:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 82188DD8h case   15:*/		return 0x82188DDC;
		  /* 82188DDCh */ case   16:  		/* bc 12, CR0_EQ, 988 */
		/* 82188DDCh case   16:*/		if ( regs.CR[0].eq ) { return 0x821891B8;  }
		/* 82188DDCh case   16:*/		return 0x82188DE0;
		  /* 82188DE0h */ case   17:  		/* lwz R29, <#[R24 + 8]> */
		/* 82188DE0h case   17:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R24 + 0x00000008) );
		/* 82188DE0h case   17:*/		return 0x82188DE4;
		  /* 82188DE4h */ case   18:  		/* mr R3, R30 */
		/* 82188DE4h case   18:*/		regs.R3 = regs.R30;
		/* 82188DE4h case   18:*/		return 0x82188DE8;
		  /* 82188DE8h */ case   19:  		/* rlwinm R6, R29, 18, 29, 31 */
		/* 82188DE8h case   19:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R29);
		/* 82188DE8h case   19:*/		return 0x82188DEC;
		  /* 82188DECh */ case   20:  		/* rlwinm R5, R29, 13, 29, 31 */
		/* 82188DECh case   20:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R29);
		/* 82188DECh case   20:*/		return 0x82188DF0;
		  /* 82188DF0h */ case   21:  		/* rlwinm R4, R29, 25, 25, 31 */
		/* 82188DF0h case   21:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R29);
		/* 82188DF0h case   21:*/		return 0x82188DF4;
		  /* 82188DF4h */ case   22:  		/* bl -149956 */
		/* 82188DF4h case   22:*/		regs.LR = 0x82188DF8; return 0x82164430;
		/* 82188DF4h case   22:*/		return 0x82188DF8;
		  /* 82188DF8h */ case   23:  		/* addi R11, R24, -16 */
		/* 82188DF8h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFF0);
		/* 82188DF8h case   23:*/		return 0x82188DFC;
		  /* 82188DFCh */ case   24:  		/* rlwinm R26, R29, 14, 31, 31 */
		/* 82188DFCh case   24:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R26,regs.R29);
		/* 82188DFCh case   24:*/		return 0x82188E00;
		  /* 82188E00h */ case   25:  		/* lwzx R28, <#[R3 + R11]> */
		/* 82188E00h case   25:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82188E00h case   25:*/		return 0x82188E04;
		  /* 82188E04h */ case   26:  		/* cmplw CR6, R28, R21 */
		/* 82188E04h case   26:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R21);
		/* 82188E04h case   26:*/		return 0x82188E08;
		  /* 82188E08h */ case   27:  		/* bc 12, CR6_EQ, 16 */
		/* 82188E08h case   27:*/		if ( regs.CR[6].eq ) { return 0x82188E18;  }
		/* 82188E08h case   27:*/		return 0x82188E0C;
		  /* 82188E0Ch */ case   28:  		/* rlwinm R11, R26, 0, 24, 31 */
		/* 82188E0Ch case   28:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R26);
		/* 82188E0Ch case   28:*/		return 0x82188E10;
		  /* 82188E10h */ case   29:  		/* cntlzw R11, R11 */
		/* 82188E10h case   29:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82188E10h case   29:*/		return 0x82188E14;
		  /* 82188E14h */ case   30:  		/* rlwinm R26, R11, 27, 31, 31 */
		/* 82188E14h case   30:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R26,regs.R11);
		/* 82188E14h case   30:*/		return 0x82188E18;
	}
	return 0x82188E18;
} // Block from 82188D9Ch-82188E18h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82188E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188E18);
		  /* 82188E18h */ case    0:  		/* rlwinm. R11, R29, 15, 31, 31 */
		/* 82188E18h case    0:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R29);
		/* 82188E18h case    0:*/		return 0x82188E1C;
		  /* 82188E1Ch */ case    1:  		/* mr R27, R25 */
		/* 82188E1Ch case    1:*/		regs.R27 = regs.R25;
		/* 82188E1Ch case    1:*/		return 0x82188E20;
		  /* 82188E20h */ case    2:  		/* bc 12, CR0_EQ, 620 */
		/* 82188E20h case    2:*/		if ( regs.CR[0].eq ) { return 0x8218908C;  }
		/* 82188E20h case    2:*/		return 0x82188E24;
		  /* 82188E24h */ case    3:  		/* mr R3, R24 */
		/* 82188E24h case    3:*/		regs.R3 = regs.R24;
		/* 82188E24h case    3:*/		return 0x82188E28;
		  /* 82188E28h */ case    4:  		/* bl -115184 */
		/* 82188E28h case    4:*/		regs.LR = 0x82188E2C; return 0x8216CC38;
		/* 82188E28h case    4:*/		return 0x82188E2C;
		  /* 82188E2Ch */ case    5:  		/* lwz R10, <#[R3 + 12]> */
		/* 82188E2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82188E2Ch case    5:*/		return 0x82188E30;
		  /* 82188E30h */ case    6:  		/* lwz R11, <#[R10 + 8]> */
		/* 82188E30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82188E30h case    6:*/		return 0x82188E34;
		  /* 82188E34h */ case    7:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82188E34h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82188E34h case    7:*/		return 0x82188E38;
		  /* 82188E38h */ case    8:  		/* cmplwi CR6, R11, 21 */
		/* 82188E38h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 82188E38h case    8:*/		return 0x82188E3C;
		  /* 82188E3Ch */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 82188E3Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x82188E4C;  }
		/* 82188E3Ch case    9:*/		return 0x82188E40;
		  /* 82188E40h */ case   10:  		/* cmplwi CR6, R11, 24 */
		/* 82188E40h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 82188E40h case   10:*/		return 0x82188E44;
		  /* 82188E44h */ case   11:  		/* li R11, 1 */
		/* 82188E44h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82188E44h case   11:*/		return 0x82188E48;
		  /* 82188E48h */ case   12:  		/* bc 4, CR6_GT, 8 */
		/* 82188E48h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82188E50;  }
		/* 82188E48h case   12:*/		return 0x82188E4C;
	}
	return 0x82188E4C;
} // Block from 82188E18h-82188E4Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82188E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188E4C);
		  /* 82188E4Ch */ case    0:  		/* li R11, 0 */
		/* 82188E4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82188E4Ch case    0:*/		return 0x82188E50;
	}
	return 0x82188E50;
} // Block from 82188E4Ch-82188E50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82188E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188E50);
		  /* 82188E50h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82188E50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82188E50h case    0:*/		return 0x82188E54;
		  /* 82188E54h */ case    1:  		/* bc 12, CR0_EQ, 472 */
		/* 82188E54h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218902C;  }
		/* 82188E54h case    1:*/		return 0x82188E58;
		  /* 82188E58h */ case    2:  		/* cmplw CR6, R21, R28 */
		/* 82188E58h case    2:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R28);
		/* 82188E58h case    2:*/		return 0x82188E5C;
		  /* 82188E5Ch */ case    3:  		/* bc 4, CR6_EQ, 464 */
		/* 82188E5Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8218902C;  }
		/* 82188E5Ch case    3:*/		return 0x82188E60;
		  /* 82188E60h */ case    4:  		/* lwz R7, <#[R10 + 4]> */
		/* 82188E60h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 82188E60h case    4:*/		return 0x82188E64;
		  /* 82188E64h */ case    5:  		/* li R26, 1 */
		/* 82188E64h case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82188E64h case    5:*/		return 0x82188E68;
		  /* 82188E68h */ case    6:  		/* li R11, 0 */
		/* 82188E68h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82188E68h case    6:*/		return 0x82188E6C;
		  /* 82188E6Ch */ case    7:  		/* li R9, 0 */
		/* 82188E6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82188E6Ch case    7:*/		return 0x82188E70;
		  /* 82188E70h */ case    8:  		/* cmplwi CR6, R7, 0 */
		/* 82188E70h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82188E70h case    8:*/		return 0x82188E74;
		  /* 82188E74h */ case    9:  		/* bc 12, CR6_EQ, 104 */
		/* 82188E74h case    9:*/		if ( regs.CR[6].eq ) { return 0x82188EDC;  }
		/* 82188E74h case    9:*/		return 0x82188E78;
		  /* 82188E78h */ case   10:  		/* lwz R10, <#[R7 + 16]> */
		/* 82188E78h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000010) );
		/* 82188E78h case   10:*/		return 0x82188E7C;
		  /* 82188E7Ch */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82188E7Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82188E7Ch case   11:*/		return 0x82188E80;
		  /* 82188E80h */ case   12:  		/* bc 12, CR6_EQ, 84 */
		/* 82188E80h case   12:*/		if ( regs.CR[6].eq ) { return 0x82188ED4;  }
		/* 82188E80h case   12:*/		return 0x82188E84;
		  /* 82188E84h */ case   13:  		/* lwz R8, <#[R10 + 8]> */
		/* 82188E84h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 82188E84h case   13:*/		return 0x82188E88;
		  /* 82188E88h */ case   14:  		/* rlwinm R8, R8, 0, 18, 24 */
		/* 82188E88h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R8,regs.R8);
		/* 82188E88h case   14:*/		return 0x82188E8C;
		  /* 82188E8Ch */ case   15:  		/* cmplwi CR6, R8, 14336 */
		/* 82188E8Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00003800);
		/* 82188E8Ch case   15:*/		return 0x82188E90;
		  /* 82188E90h */ case   16:  		/* bc 4, CR6_EQ, 68 */
		/* 82188E90h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82188ED4;  }
		/* 82188E90h case   16:*/		return 0x82188E94;
		  /* 82188E94h */ case   17:  		/* lwz R8, <#[R10 + 4]> */
		/* 82188E94h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 82188E94h case   17:*/		return 0x82188E98;
		  /* 82188E98h */ case   18:  		/* cmplwi CR6, R8, 0 */
		/* 82188E98h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82188E98h case   18:*/		return 0x82188E9C;
		  /* 82188E9Ch */ case   19:  		/* bc 12, CR6_EQ, 48 */
		/* 82188E9Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82188ECC;  }
		/* 82188E9Ch case   19:*/		return 0x82188EA0;
		  /* 82188EA0h */ case   20:  		/* lwz R10, <#[R8 + 16]> */
		/* 82188EA0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 82188EA0h case   20:*/		return 0x82188EA4;
		  /* 82188EA4h */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 82188EA4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82188EA4h case   21:*/		return 0x82188EA8;
		  /* 82188EA8h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 82188EA8h case   22:*/		if ( regs.CR[6].eq ) { return 0x82188EC0;  }
		/* 82188EA8h case   22:*/		return 0x82188EAC;
		  /* 82188EACh */ case   23:  		/* lwz R6, <#[R10 + 8]> */
		/* 82188EACh case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000008) );
		/* 82188EACh case   23:*/		return 0x82188EB0;
		  /* 82188EB0h */ case   24:  		/* mr R11, R10 */
		/* 82188EB0h case   24:*/		regs.R11 = regs.R10;
		/* 82188EB0h case   24:*/		return 0x82188EB4;
		  /* 82188EB4h */ case   25:  		/* rlwinm R10, R6, 0, 18, 24 */
		/* 82188EB4h case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R6);
		/* 82188EB4h case   25:*/		return 0x82188EB8;
		  /* 82188EB8h */ case   26:  		/* cmplwi CR6, R10, 8192 */
		/* 82188EB8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002000);
		/* 82188EB8h case   26:*/		return 0x82188EBC;
		  /* 82188EBCh */ case   27:  		/* bc 12, CR6_EQ, 12 */
		/* 82188EBCh case   27:*/		if ( regs.CR[6].eq ) { return 0x82188EC8;  }
		/* 82188EBCh case   27:*/		return 0x82188EC0;
	}
	return 0x82188EC0;
} // Block from 82188E50h-82188EC0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82188EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188EC0);
		  /* 82188EC0h */ case    0:  		/* lwz R8, <#[R8 + 8]> */
		/* 82188EC0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82188EC0h case    0:*/		return 0x82188EC4;
		  /* 82188EC4h */ case    1:  		/* b -44 */
		/* 82188EC4h case    1:*/		return 0x82188E98;
		/* 82188EC4h case    1:*/		return 0x82188EC8;
	}
	return 0x82188EC8;
} // Block from 82188EC0h-82188EC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82188EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188EC8);
		  /* 82188EC8h */ case    0:  		/* lwz R9, <#[R11 + 28]> */
		/* 82188EC8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 82188EC8h case    0:*/		return 0x82188ECC;
	}
	return 0x82188ECC;
} // Block from 82188EC8h-82188ECCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82188ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188ECC);
		  /* 82188ECCh */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82188ECCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82188ECCh case    0:*/		return 0x82188ED0;
		  /* 82188ED0h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82188ED0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82188EE4;  }
		/* 82188ED0h case    1:*/		return 0x82188ED4;
	}
	return 0x82188ED4;
} // Block from 82188ECCh-82188ED4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82188ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188ED4);
		  /* 82188ED4h */ case    0:  		/* lwz R7, <#[R7 + 8]> */
		/* 82188ED4h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 82188ED4h case    0:*/		return 0x82188ED8;
		  /* 82188ED8h */ case    1:  		/* b -104 */
		/* 82188ED8h case    1:*/		return 0x82188E70;
		/* 82188ED8h case    1:*/		return 0x82188EDC;
	}
	return 0x82188EDC;
} // Block from 82188ED4h-82188EDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82188EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188EDC);
		  /* 82188EDCh */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82188EDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82188EDCh case    0:*/		return 0x82188EE0;
		  /* 82188EE0h */ case    1:  		/* bc 12, CR6_EQ, 7828 */
		/* 82188EE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8218AD74;  }
		/* 82188EE0h case    1:*/		return 0x82188EE4;
	}
	return 0x82188EE4;
} // Block from 82188EDCh-82188EE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82188EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188EE4);
		  /* 82188EE4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82188EE4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82188EE4h case    0:*/		return 0x82188EE8;
		  /* 82188EE8h */ case    1:  		/* li R8, 63 */
		/* 82188EE8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x3F);
		/* 82188EE8h case    1:*/		return 0x82188EEC;
		  /* 82188EECh */ case    2:  		/* mr R4, R31 */
		/* 82188EECh case    2:*/		regs.R4 = regs.R31;
		/* 82188EECh case    2:*/		return 0x82188EF0;
		  /* 82188EF0h */ case    3:  		/* rlwimi R10, R8, 7, 18, 24 */
		/* 82188EF0h case    3:*/		cpu::op::rlwimi<0,7,18,24>(regs,&regs.R10,regs.R8);
		/* 82188EF0h case    3:*/		return 0x82188EF4;
		  /* 82188EF4h */ case    4:  		/* mr R3, R30 */
		/* 82188EF4h case    4:*/		regs.R3 = regs.R30;
		/* 82188EF4h case    4:*/		return 0x82188EF8;
		  /* 82188EF8h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 82188EF8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82188EF8h case    5:*/		return 0x82188EFC;
		  /* 82188EFCh */ case    6:  		/* mr R27, R9 */
		/* 82188EFCh case    6:*/		regs.R27 = regs.R9;
		/* 82188EFCh case    6:*/		return 0x82188F00;
		  /* 82188F00h */ case    7:  		/* lwz R11, <#[R11 + 44]> */
		/* 82188F00h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82188F00h case    7:*/		return 0x82188F04;
		  /* 82188F04h */ case    8:  		/* lwz R28, <#[R11 + 12]> */
		/* 82188F04h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 82188F04h case    8:*/		return 0x82188F08;
		  /* 82188F08h */ case    9:  		/* bl 637752 */
		/* 82188F08h case    9:*/		regs.LR = 0x82188F0C; return 0x82224A40;
		/* 82188F08h case    9:*/		return 0x82188F0C;
		  /* 82188F0Ch */ case   10:  		/* lwz R4, <#[R28]> */
		/* 82188F0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 82188F0Ch case   10:*/		return 0x82188F10;
		  /* 82188F10h */ case   11:  		/* mr R29, R3 */
		/* 82188F10h case   11:*/		regs.R29 = regs.R3;
		/* 82188F10h case   11:*/		return 0x82188F14;
		  /* 82188F14h */ case   12:  		/* bl -68940 */
		/* 82188F14h case   12:*/		regs.LR = 0x82188F18; return 0x821781C8;
		/* 82188F14h case   12:*/		return 0x82188F18;
		  /* 82188F18h */ case   13:  		/* lwz R9, <#[R29 + 16]> */
		/* 82188F18h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 82188F18h case   13:*/		return 0x82188F1C;
		  /* 82188F1Ch */ case   14:  		/* li R11, 1 */
		/* 82188F1Ch case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82188F1Ch case   14:*/		return 0x82188F20;
		  /* 82188F20h */ case   15:  		/* lwz R10, <#[R1 + 92]> */
		/* 82188F20h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 82188F20h case   15:*/		return 0x82188F24;
		  /* 82188F24h */ case   16:  		/* li R8, 1 */
		/* 82188F24h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82188F24h case   16:*/		return 0x82188F28;
		  /* 82188F28h */ case   17:  		/* stw R29, <#[R1 + 92]> */
		/* 82188F28h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 82188F28h case   17:*/		return 0x82188F2C;
		  /* 82188F2Ch */ case   18:  		/* rlwimi R9, R11, 16, 13, 15 */
		/* 82188F2Ch case   18:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R9,regs.R11);
		/* 82188F2Ch case   18:*/		return 0x82188F30;
		  /* 82188F30h */ case   19:  		/* li R7, 1 */
		/* 82188F30h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82188F30h case   19:*/		return 0x82188F34;
		  /* 82188F34h */ case   20:  		/* stw R9, <#[R29 + 16]> */
		/* 82188F34h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 82188F34h case   20:*/		return 0x82188F38;
		  /* 82188F38h */ case   21:  		/* li R6, 64 */
		/* 82188F38h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 82188F38h case   21:*/		return 0x82188F3C;
		  /* 82188F3Ch */ case   22:  		/* li R5, 0 */
		/* 82188F3Ch case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82188F3Ch case   22:*/		return 0x82188F40;
		  /* 82188F40h */ case   23:  		/* mr R4, R31 */
		/* 82188F40h case   23:*/		regs.R4 = regs.R31;
		/* 82188F40h case   23:*/		return 0x82188F44;
		  /* 82188F44h */ case   24:  		/* mr R3, R30 */
		/* 82188F44h case   24:*/		regs.R3 = regs.R30;
		/* 82188F44h case   24:*/		return 0x82188F48;
		  /* 82188F48h */ case   25:  		/* lhz R11, <#[R28 + 18]> */
		/* 82188F48h case   25:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000012) );
		/* 82188F48h case   25:*/		return 0x82188F4C;
		  /* 82188F4Ch */ case   26:  		/* stw R10, <#[R29 + 32]> */
		/* 82188F4Ch case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000020) );
		/* 82188F4Ch case   26:*/		return 0x82188F50;
		  /* 82188F50h */ case   27:  		/* sth R11, <#[R29 + 18]> */
		/* 82188F50h case   27:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R29 + 0x00000012) );
		/* 82188F50h case   27:*/		return 0x82188F54;
		  /* 82188F54h */ case   28:  		/* bl 637508 */
		/* 82188F54h case   28:*/		regs.LR = 0x82188F58; return 0x82224998;
		/* 82188F54h case   28:*/		return 0x82188F58;
		  /* 82188F58h */ case   29:  		/* mr R28, R3 */
		/* 82188F58h case   29:*/		regs.R28 = regs.R3;
		/* 82188F58h case   29:*/		return 0x82188F5C;
		  /* 82188F5Ch */ case   30:  		/* mr R4, R29 */
		/* 82188F5Ch case   30:*/		regs.R4 = regs.R29;
		/* 82188F5Ch case   30:*/		return 0x82188F60;
		  /* 82188F60h */ case   31:  		/* mr R3, R30 */
		/* 82188F60h case   31:*/		regs.R3 = regs.R30;
		/* 82188F60h case   31:*/		return 0x82188F64;
		  /* 82188F64h */ case   32:  		/* bl -69476 */
		/* 82188F64h case   32:*/		regs.LR = 0x82188F68; return 0x82178000;
		/* 82188F64h case   32:*/		return 0x82188F68;
		  /* 82188F68h */ case   33:  		/* mr R5, R3 */
		/* 82188F68h case   33:*/		regs.R5 = regs.R3;
		/* 82188F68h case   33:*/		return 0x82188F6C;
		  /* 82188F6Ch */ case   34:  		/* li R4, 0 */
		/* 82188F6Ch case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82188F6Ch case   34:*/		return 0x82188F70;
		  /* 82188F70h */ case   35:  		/* mr R3, R28 */
		/* 82188F70h case   35:*/		regs.R3 = regs.R28;
		/* 82188F70h case   35:*/		return 0x82188F74;
		  /* 82188F74h */ case   36:  		/* bl -100548 */
		/* 82188F74h case   36:*/		regs.LR = 0x82188F78; return 0x821706B0;
		/* 82188F74h case   36:*/		return 0x82188F78;
		  /* 82188F78h */ case   37:  		/* lwz R11, <#[R28 + 8]> */
		/* 82188F78h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82188F78h case   37:*/		return 0x82188F7C;
		  /* 82188F7Ch */ case   38:  		/* ori R11, R11, 64 */
		/* 82188F7Ch case   38:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82188F7Ch case   38:*/		return 0x82188F80;
		  /* 82188F80h */ case   39:  		/* stw R11, <#[R28 + 8]> */
		/* 82188F80h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82188F80h case   39:*/		return 0x82188F84;
		  /* 82188F84h */ case   40:  		/* lwz R11, <#[R30 + 40]> */
		/* 82188F84h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 82188F84h case   40:*/		return 0x82188F88;
		  /* 82188F88h */ case   41:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82188F88h case   41:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82188F88h case   41:*/		return 0x82188F8C;
		  /* 82188F8Ch */ case   42:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82188F8Ch case   42:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82188F8Ch case   42:*/		return 0x82188F90;
		  /* 82188F90h */ case   43:  		/* addi R11, R11, 36 */
		/* 82188F90h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82188F90h case   43:*/		return 0x82188F94;
		  /* 82188F94h */ case   44:  		/* addi R8, R11, -36 */
		/* 82188F94h case   44:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 82188F94h case   44:*/		return 0x82188F98;
		  /* 82188F98h */ case   45:  		/* bc 12, CR0_EQ, 52 */
		/* 82188F98h case   45:*/		if ( regs.CR[0].eq ) { return 0x82188FCC;  }
		/* 82188F98h case   45:*/		return 0x82188F9C;
		  /* 82188F9Ch */ case   46:  		/* lwz R9, <#[R31 + 24]> */
		/* 82188F9Ch case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 82188F9Ch case   46:*/		return 0x82188FA0;
		  /* 82188FA0h */ case   47:  		/* addi R10, R31, 24 */
		/* 82188FA0h case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 82188FA0h case   47:*/		return 0x82188FA4;
		  /* 82188FA4h */ case   48:  		/* addi R10, R10, -36 */
		/* 82188FA4h case   48:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 82188FA4h case   48:*/		return 0x82188FA8;
		  /* 82188FA8h */ case   49:  		/* ori R7, R10, 1 */
		/* 82188FA8h case   49:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82188FA8h case   49:*/		return 0x82188FAC;
		  /* 82188FACh */ case   50:  		/* stw R9, <#[R11]> */
		/* 82188FACh case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82188FACh case   50:*/		return 0x82188FB0;
		  /* 82188FB0h */ case   51:  		/* addi R10, R11, 4 */
		/* 82188FB0h case   51:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82188FB0h case   51:*/		return 0x82188FB4;
		  /* 82188FB4h */ case   52:  		/* lwz R9, <#[R31 + 24]> */
		/* 82188FB4h case   52:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 82188FB4h case   52:*/		return 0x82188FB8;
		  /* 82188FB8h */ case   53:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 82188FB8h case   53:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 82188FB8h case   53:*/		return 0x82188FBC;
		  /* 82188FBCh */ case   54:  		/* stw R8, <#[R9]> */
		/* 82188FBCh case   54:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82188FBCh case   54:*/		return 0x82188FC0;
		  /* 82188FC0h */ case   55:  		/* stw R7, <#[R11 + 4]> */
		/* 82188FC0h case   55:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82188FC0h case   55:*/		return 0x82188FC4;
		  /* 82188FC4h */ case   56:  		/* stw R10, <#[R31 + 24]> */
		/* 82188FC4h case   56:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82188FC4h case   56:*/		return 0x82188FC8;
		  /* 82188FC8h */ case   57:  		/* b 48 */
		/* 82188FC8h case   57:*/		return 0x82188FF8;
		/* 82188FC8h case   57:*/		return 0x82188FCC;
	}
	return 0x82188FCC;
} // Block from 82188EE4h-82188FCCh (58 instructions)

//////////////////////////////////////////////////////
// Block at 82188FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188FCC);
		  /* 82188FCCh */ case    0:  		/* lwz R9, <#[R31 + 32]> */
		/* 82188FCCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82188FCCh case    0:*/		return 0x82188FD0;
		  /* 82188FD0h */ case    1:  		/* addi R10, R31, 32 */
		/* 82188FD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x20);
		/* 82188FD0h case    1:*/		return 0x82188FD4;
		  /* 82188FD4h */ case    2:  		/* addi R10, R10, -36 */
		/* 82188FD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 82188FD4h case    2:*/		return 0x82188FD8;
		  /* 82188FD8h */ case    3:  		/* ori R7, R10, 1 */
		/* 82188FD8h case    3:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x1);
		/* 82188FD8h case    3:*/		return 0x82188FDC;
		  /* 82188FDCh */ case    4:  		/* stw R9, <#[R11]> */
		/* 82188FDCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82188FDCh case    4:*/		return 0x82188FE0;
		  /* 82188FE0h */ case    5:  		/* addi R10, R11, 4 */
		/* 82188FE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82188FE0h case    5:*/		return 0x82188FE4;
		  /* 82188FE4h */ case    6:  		/* lwz R9, <#[R31 + 32]> */
		/* 82188FE4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82188FE4h case    6:*/		return 0x82188FE8;
		  /* 82188FE8h */ case    7:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 82188FE8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 82188FE8h case    7:*/		return 0x82188FEC;
		  /* 82188FECh */ case    8:  		/* stw R8, <#[R9]> */
		/* 82188FECh case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82188FECh case    8:*/		return 0x82188FF0;
		  /* 82188FF0h */ case    9:  		/* stw R7, <#[R11 + 4]> */
		/* 82188FF0h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82188FF0h case    9:*/		return 0x82188FF4;
		  /* 82188FF4h */ case   10:  		/* stw R10, <#[R31 + 32]> */
		/* 82188FF4h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82188FF4h case   10:*/		return 0x82188FF8;
	}
	return 0x82188FF8;
} // Block from 82188FCCh-82188FF8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82188FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82188FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82188FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82188FF8);
		  /* 82188FF8h */ case    0:  		/* mr R6, R30 */
		/* 82188FF8h case    0:*/		regs.R6 = regs.R30;
		/* 82188FF8h case    0:*/		return 0x82188FFC;
		  /* 82188FFCh */ case    1:  		/* mr R5, R28 */
		/* 82188FFCh case    1:*/		regs.R5 = regs.R28;
		/* 82188FFCh case    1:*/		return 0x82189000;
		  /* 82189000h */ case    2:  		/* li R4, 1 */
		/* 82189000h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82189000h case    2:*/		return 0x82189004;
		  /* 82189004h */ case    3:  		/* mr R3, R31 */
		/* 82189004h case    3:*/		regs.R3 = regs.R31;
		/* 82189004h case    3:*/		return 0x82189008;
		  /* 82189008h */ case    4:  		/* bl -116280 */
		/* 82189008h case    4:*/		regs.LR = 0x8218900C; return 0x8216C9D0;
		/* 82189008h case    4:*/		return 0x8218900C;
		  /* 8218900Ch */ case    5:  		/* mr R3, R29 */
		/* 8218900Ch case    5:*/		regs.R3 = regs.R29;
		/* 8218900Ch case    5:*/		return 0x82189010;
		  /* 82189010h */ case    6:  		/* bl -68760 */
		/* 82189010h case    6:*/		regs.LR = 0x82189014; return 0x82178378;
		/* 82189010h case    6:*/		return 0x82189014;
		  /* 82189014h */ case    7:  		/* lwz R11, <#[R29 + 8]> */
		/* 82189014h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82189014h case    7:*/		return 0x82189018;
		  /* 82189018h */ case    8:  		/* oris R11, R11, 256 */
		/* 82189018h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82189018h case    8:*/		return 0x8218901C;
		  /* 8218901Ch */ case    9:  		/* stw R11, <#[R29 + 8]> */
		/* 8218901Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8218901Ch case    9:*/		return 0x82189020;
		  /* 82189020h */ case   10:  		/* lwz R11, <#[R28 + 8]> */
		/* 82189020h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82189020h case   10:*/		return 0x82189024;
		  /* 82189024h */ case   11:  		/* oris R11, R11, 256 */
		/* 82189024h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82189024h case   11:*/		return 0x82189028;
		  /* 82189028h */ case   12:  		/* stw R11, <#[R28 + 8]> */
		/* 82189028h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82189028h case   12:*/		return 0x8218902C;
	}
	return 0x8218902C;
} // Block from 82188FF8h-8218902Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8218902Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218902C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218902C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218902C);
		  /* 8218902Ch */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 8218902Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8218902Ch case    0:*/		return 0x82189030;
		  /* 82189030h */ case    1:  		/* rlwinm R10, R26, 0, 24, 31 */
		/* 82189030h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R26);
		/* 82189030h case    1:*/		return 0x82189034;
		  /* 82189034h */ case    2:  		/* lwz R9, <#[R31 + 48]> */
		/* 82189034h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 82189034h case    2:*/		return 0x82189038;
		  /* 82189038h */ case    3:  		/* rlwimi R11, R10, 23, 8, 8 */
		/* 82189038h case    3:*/		cpu::op::rlwimi<0,23,8,8>(regs,&regs.R11,regs.R10);
		/* 82189038h case    3:*/		return 0x8218903C;
		  /* 8218903Ch */ case    4:  		/* stw R25, <#[R31 + 112]> */
		/* 8218903Ch case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000070) );
		/* 8218903Ch case    4:*/		return 0x82189040;
		  /* 82189040h */ case    5:  		/* oris R10, R9, 128 */
		/* 82189040h case    5:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x80);
		/* 82189040h case    5:*/		return 0x82189044;
		  /* 82189044h */ case    6:  		/* oris R11, R11, 64 */
		/* 82189044h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82189044h case    6:*/		return 0x82189048;
		  /* 82189048h */ case    7:  		/* stw R10, <#[R31 + 48]> */
		/* 82189048h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82189048h case    7:*/		return 0x8218904C;
		  /* 8218904Ch */ case    8:  		/* stw R11, <#[R31 + 76]> */
		/* 8218904Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8218904Ch case    8:*/		return 0x82189050;
		  /* 82189050h */ case    9:  		/* lwz R11, <#[R25 + 76]> */
		/* 82189050h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 82189050h case    9:*/		return 0x82189054;
		  /* 82189054h */ case   10:  		/* rlwinm. R10, R11, 8, 31, 31 */
		/* 82189054h case   10:*/		cpu::op::rlwinm<1,8,31,31>(regs,&regs.R10,regs.R11);
		/* 82189054h case   10:*/		return 0x82189058;
		  /* 82189058h */ case   11:  		/* bc 12, CR0_EQ, 256 */
		/* 82189058h case   11:*/		if ( regs.CR[0].eq ) { return 0x82189158;  }
		/* 82189058h case   11:*/		return 0x8218905C;
		  /* 8218905Ch */ case   12:  		/* mr R3, R25 */
		/* 8218905Ch case   12:*/		regs.R3 = regs.R25;
		/* 8218905Ch case   12:*/		return 0x82189060;
		  /* 82189060h */ case   13:  		/* lwz R29, <#[R25 + 72]> */
		/* 82189060h case   13:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x00000048) );
		/* 82189060h case   13:*/		return 0x82189064;
		  /* 82189064h */ case   14:  		/* rlwinm R28, R11, 7, 31, 31 */
		/* 82189064h case   14:*/		cpu::op::rlwinm<0,7,31,31>(regs,&regs.R28,regs.R11);
		/* 82189064h case   14:*/		return 0x82189068;
		  /* 82189068h */ case   15:  		/* bl -22544 */
		/* 82189068h case   15:*/		regs.LR = 0x8218906C; return 0x82183858;
		/* 82189068h case   15:*/		return 0x8218906C;
		  /* 8218906Ch */ case   16:  		/* lwz R11, <#[R31 + 76]> */
		/* 8218906Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8218906Ch case   16:*/		return 0x82189070;
		  /* 82189070h */ case   17:  		/* lwz R10, <#[R31 + 48]> */
		/* 82189070h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82189070h case   17:*/		return 0x82189074;
		  /* 82189074h */ case   18:  		/* rlwimi R11, R28, 25, 6, 6 */
		/* 82189074h case   18:*/		cpu::op::rlwimi<0,25,6,6>(regs,&regs.R11,regs.R28);
		/* 82189074h case   18:*/		return 0x82189078;
		  /* 82189078h */ case   19:  		/* stw R29, <#[R31 + 72]> */
		/* 82189078h case   19:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000048) );
		/* 82189078h case   19:*/		return 0x8218907C;
		  /* 8218907Ch */ case   20:  		/* oris R10, R10, 384 */
		/* 8218907Ch case   20:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x180);
		/* 8218907Ch case   20:*/		return 0x82189080;
		  /* 82189080h */ case   21:  		/* stw R3, <#[R31 + 108]> */
		/* 82189080h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000006C) );
		/* 82189080h case   21:*/		return 0x82189084;
		  /* 82189084h */ case   22:  		/* oris R11, R11, 256 */
		/* 82189084h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82189084h case   22:*/		return 0x82189088;
		  /* 82189088h */ case   23:  		/* b 200 */
		/* 82189088h case   23:*/		return 0x82189150;
		/* 82189088h case   23:*/		return 0x8218908C;
	}
	return 0x8218908C;
} // Block from 8218902Ch-8218908Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 8218908Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218908C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218908C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218908C);
		  /* 8218908Ch */ case    0:  		/* li R8, 0 */
		/* 8218908Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218908Ch case    0:*/		return 0x82189090;
		  /* 82189090h */ case    1:  		/* lwz R29, <#[R24 + 44]> */
		/* 82189090h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R24 + 0x0000002C) );
		/* 82189090h case    1:*/		return 0x82189094;
		  /* 82189094h */ case    2:  		/* li R7, 0 */
		/* 82189094h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82189094h case    2:*/		return 0x82189098;
		  /* 82189098h */ case    3:  		/* li R6, 117 */
		/* 82189098h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 82189098h case    3:*/		return 0x8218909C;
		  /* 8218909Ch */ case    4:  		/* li R5, 0 */
		/* 8218909Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218909Ch case    4:*/		return 0x821890A0;
		  /* 821890A0h */ case    5:  		/* mr R4, R31 */
		/* 821890A0h case    5:*/		regs.R4 = regs.R31;
		/* 821890A0h case    5:*/		return 0x821890A4;
		  /* 821890A4h */ case    6:  		/* mr R3, R30 */
		/* 821890A4h case    6:*/		regs.R3 = regs.R30;
		/* 821890A4h case    6:*/		return 0x821890A8;
		  /* 821890A8h */ case    7:  		/* bl 637168 */
		/* 821890A8h case    7:*/		regs.LR = 0x821890AC; return 0x82224998;
		/* 821890A8h case    7:*/		return 0x821890AC;
		  /* 821890ACh */ case    8:  		/* lwz R8, <#[R31 + 28]> */
		/* 821890ACh case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 821890ACh case    8:*/		return 0x821890B0;
		  /* 821890B0h */ case    9:  		/* rlwinm R9, R3, 0, 0, 30 */
		/* 821890B0h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R3);
		/* 821890B0h case    9:*/		return 0x821890B4;
		  /* 821890B4h */ case   10:  		/* addi R11, R31, 24 */
		/* 821890B4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x18);
		/* 821890B4h case   10:*/		return 0x821890B8;
		  /* 821890B8h */ case   11:  		/* mr R4, R29 */
		/* 821890B8h case   11:*/		regs.R4 = regs.R29;
		/* 821890B8h case   11:*/		return 0x821890BC;
		  /* 821890BCh */ case   12:  		/* addi R10, R11, 4 */
		/* 821890BCh case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821890BCh case   12:*/		return 0x821890C0;
		  /* 821890C0h */ case   13:  		/* addi R11, R9, 36 */
		/* 821890C0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x24);
		/* 821890C0h case   13:*/		return 0x821890C4;
		  /* 821890C4h */ case   14:  		/* stw R8, <#[R9 + 40]> */
		/* 821890C4h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000028) );
		/* 821890C4h case   14:*/		return 0x821890C8;
		  /* 821890C8h */ case   15:  		/* ori R7, R10, 1 */
		/* 821890C8h case   15:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821890C8h case   15:*/		return 0x821890CC;
		  /* 821890CCh */ case   16:  		/* lwz R8, <#[R31 + 28]> */
		/* 821890CCh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 821890CCh case   16:*/		return 0x821890D0;
		  /* 821890D0h */ case   17:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821890D0h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821890D0h case   17:*/		return 0x821890D4;
		  /* 821890D4h */ case   18:  		/* addi R10, R11, 4 */
		/* 821890D4h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821890D4h case   18:*/		return 0x821890D8;
		  /* 821890D8h */ case   19:  		/* addi R11, R11, -36 */
		/* 821890D8h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFDC);
		/* 821890D8h case   19:*/		return 0x821890DC;
		  /* 821890DCh */ case   20:  		/* stw R10, <#[R8 + 36]> */
		/* 821890DCh case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000024) );
		/* 821890DCh case   20:*/		return 0x821890E0;
		  /* 821890E0h */ case   21:  		/* stw R7, <#[R9 + 36]> */
		/* 821890E0h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000024) );
		/* 821890E0h case   21:*/		return 0x821890E4;
		  /* 821890E4h */ case   22:  		/* stw R11, <#[R31 + 28]> */
		/* 821890E4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821890E4h case   22:*/		return 0x821890E8;
		  /* 821890E8h */ case   23:  		/* lwz R11, <#[R3 + 8]> */
		/* 821890E8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821890E8h case   23:*/		return 0x821890EC;
		  /* 821890ECh */ case   24:  		/* oris R11, R11, 768 */
		/* 821890ECh case   24:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x300);
		/* 821890ECh case   24:*/		return 0x821890F0;
		  /* 821890F0h */ case   25:  		/* stw R11, <#[R3 + 8]> */
		/* 821890F0h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821890F0h case   25:*/		return 0x821890F4;
		  /* 821890F4h */ case   26:  		/* bl -69420 */
		/* 821890F4h case   26:*/		regs.LR = 0x821890F8; return 0x821781C8;
		/* 821890F4h case   26:*/		return 0x821890F8;
		  /* 821890F8h */ case   27:  		/* lwz R11, <#[R31 + 76]> */
		/* 821890F8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821890F8h case   27:*/		return 0x821890FC;
		  /* 821890FCh */ case   28:  		/* rlwinm R10, R26, 0, 24, 31 */
		/* 821890FCh case   28:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R26);
		/* 821890FCh case   28:*/		return 0x82189100;
		  /* 82189100h */ case   29:  		/* lwz R9, <#[R31 + 48]> */
		/* 82189100h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 82189100h case   29:*/		return 0x82189104;
		  /* 82189104h */ case   30:  		/* stw R25, <#[R31 + 108]> */
		/* 82189104h case   30:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000006C) );
		/* 82189104h case   30:*/		return 0x82189108;
		  /* 82189108h */ case   31:  		/* rlwimi R11, R10, 25, 6, 6 */
		/* 82189108h case   31:*/		cpu::op::rlwimi<0,25,6,6>(regs,&regs.R11,regs.R10);
		/* 82189108h case   31:*/		return 0x8218910C;
		  /* 8218910Ch */ case   32:  		/* stw R3, <#[R31 + 72]> */
		/* 8218910Ch case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000048) );
		/* 8218910Ch case   32:*/		return 0x82189110;
		  /* 82189110h */ case   33:  		/* oris R10, R9, 384 */
		/* 82189110h case   33:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x180);
		/* 82189110h case   33:*/		return 0x82189114;
		  /* 82189114h */ case   34:  		/* oris R11, R11, 256 */
		/* 82189114h case   34:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82189114h case   34:*/		return 0x82189118;
		  /* 82189118h */ case   35:  		/* stw R10, <#[R31 + 48]> */
		/* 82189118h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82189118h case   35:*/		return 0x8218911C;
		  /* 8218911Ch */ case   36:  		/* stw R11, <#[R31 + 76]> */
		/* 8218911Ch case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8218911Ch case   36:*/		return 0x82189120;
		  /* 82189120h */ case   37:  		/* lwz R11, <#[R25 + 76]> */
		/* 82189120h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 82189120h case   37:*/		return 0x82189124;
		  /* 82189124h */ case   38:  		/* rlwinm. R10, R11, 10, 31, 31 */
		/* 82189124h case   38:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R11);
		/* 82189124h case   38:*/		return 0x82189128;
		  /* 82189128h */ case   39:  		/* bc 12, CR0_EQ, 48 */
		/* 82189128h case   39:*/		if ( regs.CR[0].eq ) { return 0x82189158;  }
		/* 82189128h case   39:*/		return 0x8218912C;
		  /* 8218912Ch */ case   40:  		/* mr R3, R25 */
		/* 8218912Ch case   40:*/		regs.R3 = regs.R25;
		/* 8218912Ch case   40:*/		return 0x82189130;
		  /* 82189130h */ case   41:  		/* rlwinm R29, R11, 9, 31, 31 */
		/* 82189130h case   41:*/		cpu::op::rlwinm<0,9,31,31>(regs,&regs.R29,regs.R11);
		/* 82189130h case   41:*/		return 0x82189134;
		  /* 82189134h */ case   42:  		/* bl -151012 */
		/* 82189134h case   42:*/		regs.LR = 0x82189138; return 0x82164350;
		/* 82189134h case   42:*/		return 0x82189138;
		  /* 82189138h */ case   43:  		/* lwz R11, <#[R31 + 76]> */
		/* 82189138h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 82189138h case   43:*/		return 0x8218913C;
		  /* 8218913Ch */ case   44:  		/* lwz R10, <#[R31 + 48]> */
		/* 8218913Ch case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 8218913Ch case   44:*/		return 0x82189140;
		  /* 82189140h */ case   45:  		/* rlwimi R11, R29, 23, 8, 8 */
		/* 82189140h case   45:*/		cpu::op::rlwimi<0,23,8,8>(regs,&regs.R11,regs.R29);
		/* 82189140h case   45:*/		return 0x82189144;
		  /* 82189144h */ case   46:  		/* stw R3, <#[R31 + 112]> */
		/* 82189144h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000070) );
		/* 82189144h case   46:*/		return 0x82189148;
		  /* 82189148h */ case   47:  		/* oris R10, R10, 128 */
		/* 82189148h case   47:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82189148h case   47:*/		return 0x8218914C;
		  /* 8218914Ch */ case   48:  		/* oris R11, R11, 64 */
		/* 8218914Ch case   48:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 8218914Ch case   48:*/		return 0x82189150;
	}
	return 0x82189150;
} // Block from 8218908Ch-82189150h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82189150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189150);
		  /* 82189150h */ case    0:  		/* stw R11, <#[R31 + 76]> */
		/* 82189150h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 82189150h case    0:*/		return 0x82189154;
		  /* 82189154h */ case    1:  		/* stw R10, <#[R31 + 48]> */
		/* 82189154h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82189154h case    1:*/		return 0x82189158;
	}
	return 0x82189158;
} // Block from 82189150h-82189158h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189158);
		  /* 82189158h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82189158h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82189158h case    0:*/		return 0x8218915C;
		  /* 8218915Ch */ case    1:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 8218915Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 8218915Ch case    1:*/		return 0x82189160;
		  /* 82189160h */ case    2:  		/* addi R9, R11, 4 */
		/* 82189160h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82189160h case    2:*/		return 0x82189164;
		  /* 82189164h */ case    3:  		/* addi R8, R10, 4 */
		/* 82189164h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82189164h case    3:*/		return 0x82189168;
		  /* 82189168h */ case    4:  		/* lwz R7, <#[R11 + 4]> */
		/* 82189168h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82189168h case    4:*/		return 0x8218916C;
		  /* 8218916Ch */ case    5:  		/* stw R7, <#[R10 + 4]> */
		/* 8218916Ch case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8218916Ch case    5:*/		return 0x82189170;
		  /* 82189170h */ case    6:  		/* lwz R7, <#[R11 + 4]> */
		/* 82189170h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82189170h case    6:*/		return 0x82189174;
		  /* 82189174h */ case    7:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 82189174h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 82189174h case    7:*/		return 0x82189178;
		  /* 82189178h */ case    8:  		/* stw R8, <#[R7]> */
		/* 82189178h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 82189178h case    8:*/		return 0x8218917C;
		  /* 8218917Ch */ case    9:  		/* stw R9, <#[R10]> */
		/* 8218917Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8218917Ch case    9:*/		return 0x82189180;
		  /* 82189180h */ case   10:  		/* stw R10, <#[R11 + 4]> */
		/* 82189180h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82189180h case   10:*/		return 0x82189184;
		  /* 82189184h */ case   11:  		/* lwz R11, <#[R27 + 48]> */
		/* 82189184h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 82189184h case   11:*/		return 0x82189188;
		  /* 82189188h */ case   12:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 82189188h case   12:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 82189188h case   12:*/		return 0x8218918C;
		  /* 8218918Ch */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 8218918Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x8218919C;  }
		/* 8218918Ch case   13:*/		return 0x82189190;
		  /* 82189190h */ case   14:  		/* lwz R11, <#[R31 + 48]> */
		/* 82189190h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82189190h case   14:*/		return 0x82189194;
		  /* 82189194h */ case   15:  		/* oris R11, R11, 2048 */
		/* 82189194h case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 82189194h case   15:*/		return 0x82189198;
		  /* 82189198h */ case   16:  		/* stw R11, <#[R31 + 48]> */
		/* 82189198h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82189198h case   16:*/		return 0x8218919C;
	}
	return 0x8218919C;
} // Block from 82189158h-8218919Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8218919Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218919C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218919C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218919C);
		  /* 8218919Ch */ case    0:  		/* lwz R11, <#[R27 + 48]> */
		/* 8218919Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 8218919Ch case    0:*/		return 0x821891A0;
		  /* 821891A0h */ case    1:  		/* oris R11, R11, 2048 */
		/* 821891A0h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821891A0h case    1:*/		return 0x821891A4;
		  /* 821891A4h */ case    2:  		/* stw R11, <#[R27 + 48]> */
		/* 821891A4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 821891A4h case    2:*/		return 0x821891A8;
		  /* 821891A8h */ case    3:  		/* lwz R10, <#[R31 + 48]> */
		/* 821891A8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821891A8h case    3:*/		return 0x821891AC;
		  /* 821891ACh */ case    4:  		/* rlwimi R10, R11, 0, 6, 6 */
		/* 821891ACh case    4:*/		cpu::op::rlwimi<0,0,6,6>(regs,&regs.R10,regs.R11);
		/* 821891ACh case    4:*/		return 0x821891B0;
		  /* 821891B0h */ case    5:  		/* stw R10, <#[R31 + 48]> */
		/* 821891B0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821891B0h case    5:*/		return 0x821891B4;
		  /* 821891B4h */ case    6:  		/* b 88 */
		/* 821891B4h case    6:*/		return 0x8218920C;
		/* 821891B4h case    6:*/		return 0x821891B8;
	}
	return 0x821891B8;
} // Block from 8218919Ch-821891B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821891B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821891B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821891B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821891B8);
		  /* 821891B8h */ case    0:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821891B8h case    0:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821891B8h case    0:*/		return 0x821891BC;
		  /* 821891BCh */ case    1:  		/* bc 4, CR0_EQ, 7108 */
		/* 821891BCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218AD80;  }
		/* 821891BCh case    1:*/		return 0x821891C0;
		  /* 821891C0h */ case    2:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821891C0h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821891C0h case    2:*/		return 0x821891C4;
		  /* 821891C4h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 821891C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821891C4h case    3:*/		return 0x821891C8;
		  /* 821891C8h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821891C8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821891C8h case    4:*/		return 0x821891CC;
		  /* 821891CCh */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821891CCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821891D8;  }
		/* 821891CCh case    5:*/		return 0x821891D0;
		  /* 821891D0h */ case    6:  		/* li R27, 0 */
		/* 821891D0h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821891D0h case    6:*/		return 0x821891D4;
		  /* 821891D4h */ case    7:  		/* b 12 */
		/* 821891D4h case    7:*/		return 0x821891E0;
		/* 821891D4h case    7:*/		return 0x821891D8;
	}
	return 0x821891D8;
} // Block from 821891B8h-821891D8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821891D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821891D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821891D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821891D8);
		  /* 821891D8h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821891D8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821891D8h case    0:*/		return 0x821891DC;
		  /* 821891DCh */ case    1:  		/* addi R27, R11, -4 */
		/* 821891DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFFFFC);
		/* 821891DCh case    1:*/		return 0x821891E0;
	}
	return 0x821891E0;
} // Block from 821891D8h-821891E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821891E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821891E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821891E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821891E0);
		  /* 821891E0h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821891E0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821891E0h case    0:*/		return 0x821891E4;
		  /* 821891E4h */ case    1:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821891E4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821891E4h case    1:*/		return 0x821891E8;
		  /* 821891E8h */ case    2:  		/* addi R9, R11, 4 */
		/* 821891E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821891E8h case    2:*/		return 0x821891EC;
		  /* 821891ECh */ case    3:  		/* addi R8, R10, 4 */
		/* 821891ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821891ECh case    3:*/		return 0x821891F0;
		  /* 821891F0h */ case    4:  		/* lwz R7, <#[R11 + 4]> */
		/* 821891F0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821891F0h case    4:*/		return 0x821891F4;
		  /* 821891F4h */ case    5:  		/* stw R7, <#[R10 + 4]> */
		/* 821891F4h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821891F4h case    5:*/		return 0x821891F8;
		  /* 821891F8h */ case    6:  		/* lwz R7, <#[R11 + 4]> */
		/* 821891F8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821891F8h case    6:*/		return 0x821891FC;
		  /* 821891FCh */ case    7:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821891FCh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821891FCh case    7:*/		return 0x82189200;
		  /* 82189200h */ case    8:  		/* stw R8, <#[R7]> */
		/* 82189200h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 82189200h case    8:*/		return 0x82189204;
		  /* 82189204h */ case    9:  		/* stw R9, <#[R10]> */
		/* 82189204h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82189204h case    9:*/		return 0x82189208;
		  /* 82189208h */ case   10:  		/* stw R10, <#[R11 + 4]> */
		/* 82189208h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82189208h case   10:*/		return 0x8218920C;
	}
	return 0x8218920C;
} // Block from 821891E0h-8218920Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8218920Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218920C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218920C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218920C);
		  /* 8218920Ch */ case    0:  		/* mr R5, R30 */
		/* 8218920Ch case    0:*/		regs.R5 = regs.R30;
		/* 8218920Ch case    0:*/		return 0x82189210;
		  /* 82189210h */ case    1:  		/* mr R4, R31 */
		/* 82189210h case    1:*/		regs.R4 = regs.R31;
		/* 82189210h case    1:*/		return 0x82189214;
		  /* 82189214h */ case    2:  		/* mr R3, R25 */
		/* 82189214h case    2:*/		regs.R3 = regs.R25;
		/* 82189214h case    2:*/		return 0x82189218;
		  /* 82189218h */ case    3:  		/* bl 682184 */
		/* 82189218h case    3:*/		regs.LR = 0x8218921C; return 0x8222FAE0;
		/* 82189218h case    3:*/		return 0x8218921C;
		  /* 8218921Ch */ case    4:  		/* lwz R11, <#[R1 + 172]> */
		/* 8218921Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 8218921Ch case    4:*/		return 0x82189220;
		  /* 82189220h */ case    5:  		/* mr R10, R3 */
		/* 82189220h case    5:*/		regs.R10 = regs.R3;
		/* 82189220h case    5:*/		return 0x82189224;
		  /* 82189224h */ case    6:  		/* mr R5, R31 */
		/* 82189224h case    6:*/		regs.R5 = regs.R31;
		/* 82189224h case    6:*/		return 0x82189228;
		  /* 82189228h */ case    7:  		/* mr R3, R21 */
		/* 82189228h case    7:*/		regs.R3 = regs.R21;
		/* 82189228h case    7:*/		return 0x8218922C;
		  /* 8218922Ch */ case    8:  		/* lwz R11, <#[R11 + 16]> */
		/* 8218922Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8218922Ch case    8:*/		return 0x82189230;
		  /* 82189230h */ case    9:  		/* stw R11, <#[R10 + 16]> */
		/* 82189230h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82189230h case    9:*/		return 0x82189234;
		  /* 82189234h */ case   10:  		/* lwz R4, <#[R1 + 172]> */
		/* 82189234h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000AC) );
		/* 82189234h case   10:*/		return 0x82189238;
		  /* 82189238h */ case   11:  		/* bl 681648 */
		/* 82189238h case   11:*/		regs.LR = 0x8218923C; return 0x8222F8E8;
		/* 82189238h case   11:*/		return 0x8218923C;
		  /* 8218923Ch */ case   12:  		/* lwz R11, <#[R24 + 8]> */
		/* 8218923Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8218923Ch case   12:*/		return 0x82189240;
		  /* 82189240h */ case   13:  		/* mr R3, R30 */
		/* 82189240h case   13:*/		regs.R3 = regs.R30;
		/* 82189240h case   13:*/		return 0x82189244;
		  /* 82189244h */ case   14:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82189244h case   14:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82189244h case   14:*/		return 0x82189248;
		  /* 82189248h */ case   15:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82189248h case   15:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82189248h case   15:*/		return 0x8218924C;
		  /* 8218924Ch */ case   16:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8218924Ch case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8218924Ch case   16:*/		return 0x82189250;
		  /* 82189250h */ case   17:  		/* bl -151072 */
		/* 82189250h case   17:*/		regs.LR = 0x82189254; return 0x82164430;
		/* 82189250h case   17:*/		return 0x82189254;
		  /* 82189254h */ case   18:  		/* addi R11, R24, -16 */
		/* 82189254h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFF0);
		/* 82189254h case   18:*/		return 0x82189258;
		  /* 82189258h */ case   19:  		/* add R11, R3, R11 */
		/* 82189258h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82189258h case   19:*/		return 0x8218925C;
		  /* 8218925Ch */ case   20:  		/* lwz R10, <#[R11]> */
		/* 8218925Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8218925Ch case   20:*/		return 0x82189260;
		  /* 82189260h */ case   21:  		/* cmplw CR6, R10, R21 */
		/* 82189260h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 82189260h case   21:*/		return 0x82189264;
		  /* 82189264h */ case   22:  		/* bc 4, CR6_EQ, 132 */
		/* 82189264h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821892E8;  }
		/* 82189264h case   22:*/		return 0x82189268;
		  /* 82189268h */ case   23:  		/* stw R31, <#[R11]> */
		/* 82189268h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82189268h case   23:*/		return 0x8218926C;
		  /* 8218926Ch */ case   24:  		/* cmplw CR6, R27, R25 */
		/* 8218926Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R25);
		/* 8218926Ch case   24:*/		return 0x82189270;
		  /* 82189270h */ case   25:  		/* bc 4, CR6_EQ, 120 */
		/* 82189270h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821892E8;  }
		/* 82189270h case   25:*/		return 0x82189274;
		  /* 82189274h */ case   26:  		/* lwz R8, <#[R24 + 8]> */
		/* 82189274h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R24 + 0x00000008) );
		/* 82189274h case   26:*/		return 0x82189278;
		  /* 82189278h */ case   27:  		/* rlwinm R10, R8, 0, 18, 24 */
		/* 82189278h case   27:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R8);
		/* 82189278h case   27:*/		return 0x8218927C;
		  /* 8218927Ch */ case   28:  		/* cmplwi CR6, R10, 11520 */
		/* 8218927Ch case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002D00);
		/* 8218927Ch case   28:*/		return 0x82189280;
		  /* 82189280h */ case   29:  		/* bc 4, CR6_EQ, 104 */
		/* 82189280h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821892E8;  }
		/* 82189280h case   29:*/		return 0x82189284;
		  /* 82189284h */ case   30:  		/* lwz R10, <#[R11 + 8]> */
		/* 82189284h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82189284h case   30:*/		return 0x82189288;
		  /* 82189288h */ case   31:  		/* rlwinm. R9, R10, 0, 30, 31 */
		/* 82189288h case   31:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R10);
		/* 82189288h case   31:*/		return 0x8218928C;
		  /* 8218928Ch */ case   32:  		/* bc 4, CR0_EQ, 24 */
		/* 8218928Ch case   32:*/		if ( !regs.CR[0].eq ) { return 0x821892A4;  }
		/* 8218928Ch case   32:*/		return 0x82189290;
		  /* 82189290h */ case   33:  		/* rlwinm R10, R10, 30, 28, 31 */
		/* 82189290h case   33:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R10,regs.R10);
		/* 82189290h case   33:*/		return 0x82189294;
		  /* 82189294h */ case   34:  		/* cmpwi CR6, R10, 9 */
		/* 82189294h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 82189294h case   34:*/		return 0x82189298;
		  /* 82189298h */ case   35:  		/* bc 12, CR6_EQ, 80 */
		/* 82189298h case   35:*/		if ( regs.CR[6].eq ) { return 0x821892E8;  }
		/* 82189298h case   35:*/		return 0x8218929C;
		  /* 8218929Ch */ case   36:  		/* cmpwi CR6, R10, 8 */
		/* 8218929Ch case   36:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000008);
		/* 8218929Ch case   36:*/		return 0x821892A0;
		  /* 821892A0h */ case   37:  		/* bc 12, CR6_EQ, 72 */
		/* 821892A0h case   37:*/		if ( regs.CR[6].eq ) { return 0x821892E8;  }
		/* 821892A0h case   37:*/		return 0x821892A4;
	}
	return 0x821892A4;
} // Block from 8218920Ch-821892A4h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821892A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821892A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821892A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821892A4);
		  /* 821892A4h */ case    0:  		/* lwz R9, <#[R25 + 12]> */
		/* 821892A4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x0000000C) );
		/* 821892A4h case    0:*/		return 0x821892A8;
		  /* 821892A8h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821892A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821892A8h case    1:*/		return 0x821892AC;
		  /* 821892ACh */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821892ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x821892C4;  }
		/* 821892ACh case    2:*/		return 0x821892B0;
		  /* 821892B0h */ case    3:  		/* lwz R10, <#[R9]> */
		/* 821892B0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821892B0h case    3:*/		return 0x821892B4;
		  /* 821892B4h */ case    4:  		/* cmplw CR6, R10, R31 */
		/* 821892B4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821892B4h case    4:*/		return 0x821892B8;
		  /* 821892B8h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 821892B8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821892C8;  }
		/* 821892B8h case    5:*/		return 0x821892BC;
		  /* 821892BCh */ case    6:  		/* lwz R9, <#[R9 + 8]> */
		/* 821892BCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821892BCh case    6:*/		return 0x821892C0;
		  /* 821892C0h */ case    7:  		/* b -24 */
		/* 821892C0h case    7:*/		return 0x821892A8;
		/* 821892C0h case    7:*/		return 0x821892C4;
	}
	return 0x821892C4;
} // Block from 821892A4h-821892C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821892C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821892C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821892C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821892C4);
		  /* 821892C4h */ case    0:  		/* li R10, 0 */
		/* 821892C4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821892C4h case    0:*/		return 0x821892C8;
	}
	return 0x821892C8;
} // Block from 821892C4h-821892C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821892C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821892C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821892C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821892C8);
		  /* 821892C8h */ case    0:  		/* nor R9, R8, R8 */
		/* 821892C8h case    0:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R8,regs.R8);
		/* 821892C8h case    0:*/		return 0x821892CC;
		  /* 821892CCh */ case    1:  		/* rlwimi R9, R8, 0, 14, 12 */
		/* 821892CCh case    1:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R9,regs.R8);
		/* 821892CCh case    1:*/		return 0x821892D0;
		  /* 821892D0h */ case    2:  		/* stw R9, <#[R24 + 8]> */
		/* 821892D0h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R24 + 0x00000008) );
		/* 821892D0h case    2:*/		return 0x821892D4;
		  /* 821892D4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821892D4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821892D4h case    3:*/		return 0x821892D8;
		  /* 821892D8h */ case    4:  		/* lwz R10, <#[R11 + 12]> */
		/* 821892D8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821892D8h case    4:*/		return 0x821892DC;
		  /* 821892DCh */ case    5:  		/* nor R9, R10, R10 */
		/* 821892DCh case    5:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R10,regs.R10);
		/* 821892DCh case    5:*/		return 0x821892E0;
		  /* 821892E0h */ case    6:  		/* rlwimi R9, R10, 0, 31, 29 */
		/* 821892E0h case    6:*/		cpu::op::rlwimi<0,0,31,29>(regs,&regs.R9,regs.R10);
		/* 821892E0h case    6:*/		return 0x821892E4;
		  /* 821892E4h */ case    7:  		/* stw R9, <#[R11 + 12]> */
		/* 821892E4h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821892E4h case    7:*/		return 0x821892E8;
	}
	return 0x821892E8;
} // Block from 821892C8h-821892E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821892E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821892E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821892E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821892E8);
		  /* 821892E8h */ case    0:  		/* lwz R11, <#[R25 + 88]> */
		/* 821892E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000058) );
		/* 821892E8h case    0:*/		return 0x821892EC;
		  /* 821892ECh */ case    1:  		/* mr R3, R30 */
		/* 821892ECh case    1:*/		regs.R3 = regs.R30;
		/* 821892ECh case    1:*/		return 0x821892F0;
		  /* 821892F0h */ case    2:  		/* stw R11, <#[R31 + 88]> */
		/* 821892F0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 821892F0h case    2:*/		return 0x821892F4;
		  /* 821892F4h */ case    3:  		/* lwz R11, <#[R25 + 84]> */
		/* 821892F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000054) );
		/* 821892F4h case    3:*/		return 0x821892F8;
		  /* 821892F8h */ case    4:  		/* mr R25, R31 */
		/* 821892F8h case    4:*/		regs.R25 = regs.R31;
		/* 821892F8h case    4:*/		return 0x821892FC;
		  /* 821892FCh */ case    5:  		/* stw R11, <#[R31 + 84]> */
		/* 821892FCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 821892FCh case    5:*/		return 0x82189300;
		  /* 82189300h */ case    6:  		/* bl 401440 */
		/* 82189300h case    6:*/		regs.LR = 0x82189304; return 0x821EB320;
		/* 82189300h case    6:*/		return 0x82189304;
		  /* 82189304h */ case    7:  		/* li R27, 1 */
		/* 82189304h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82189304h case    7:*/		return 0x82189308;
		  /* 82189308h */ case    8:  		/* b 12 */
		/* 82189308h case    8:*/		return 0x82189314;
		/* 82189308h case    8:*/		return 0x8218930C;
	}
	return 0x8218930C;
} // Block from 821892E8h-8218930Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8218930Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218930C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218930C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218930C);
		  /* 8218930Ch */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 8218930Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8218930Ch case    0:*/		return 0x82189310;
		  /* 82189310h */ case    1:  		/* bc 12, CR6_EQ, 568 */
		/* 82189310h case    1:*/		if ( regs.CR[6].eq ) { return 0x82189548;  }
		/* 82189310h case    1:*/		return 0x82189314;
	}
	return 0x82189314;
} // Block from 8218930Ch-82189314h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189314);
		  /* 82189314h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 82189314h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 82189314h case    0:*/		return 0x82189318;
		  /* 82189318h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 82189318h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218934C;  }
		/* 82189318h case    1:*/		return 0x8218931C;
		  /* 8218931Ch */ case    2:  		/* lwz R10, <#[R16]> */
		/* 8218931Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 8218931Ch case    2:*/		return 0x82189320;
		  /* 82189320h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 82189320h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82189320h case    3:*/		return 0x82189324;
		  /* 82189324h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82189324h case    4:*/		if ( regs.CR[6].eq ) { return 0x8218934C;  }
		/* 82189324h case    4:*/		return 0x82189328;
		  /* 82189328h */ case    5:  		/* lwz R11, <#[R10 + 12]> */
		/* 82189328h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82189328h case    5:*/		return 0x8218932C;
		  /* 8218932Ch */ case    6:  		/* lwz R9, <#[R11 + 8]> */
		/* 8218932Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8218932Ch case    6:*/		return 0x82189330;
		  /* 82189330h */ case    7:  		/* rlwinm. R9, R9, 9, 31, 31 */
		/* 82189330h case    7:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R9);
		/* 82189330h case    7:*/		return 0x82189334;
		  /* 82189334h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 82189334h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82189344;  }
		/* 82189334h case    8:*/		return 0x82189338;
		  /* 82189338h */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 82189338h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82189338h case    9:*/		return 0x8218933C;
		  /* 8218933Ch */ case   10:  		/* cmplw CR6, R11, R25 */
		/* 8218933Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8218933Ch case   10:*/		return 0x82189340;
		  /* 82189340h */ case   11:  		/* bc 12, CR6_EQ, 472 */
		/* 82189340h case   11:*/		if ( regs.CR[6].eq ) { return 0x82189518;  }
		/* 82189340h case   11:*/		return 0x82189344;
	}
	return 0x82189344;
} // Block from 82189314h-82189344h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82189344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189344);
		  /* 82189344h */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 82189344h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82189344h case    0:*/		return 0x82189348;
		  /* 82189348h */ case    1:  		/* b -40 */
		/* 82189348h case    1:*/		return 0x82189320;
		/* 82189348h case    1:*/		return 0x8218934C;
	}
	return 0x8218934C;
} // Block from 82189344h-8218934Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218934Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218934C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218934C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218934C);
		  /* 8218934Ch */ case    0:  		/* mr R4, R19 */
		/* 8218934Ch case    0:*/		regs.R4 = regs.R19;
		/* 8218934Ch case    0:*/		return 0x82189350;
		  /* 82189350h */ case    1:  		/* mr R3, R16 */
		/* 82189350h case    1:*/		regs.R3 = regs.R16;
		/* 82189350h case    1:*/		return 0x82189354;
		  /* 82189354h */ case    2:  		/* bl -70028 */
		/* 82189354h case    2:*/		regs.LR = 0x82189358; return 0x821781C8;
		/* 82189354h case    2:*/		return 0x82189358;
		  /* 82189358h */ case    3:  		/* lwz R11, <#[R23 + 28]> */
		/* 82189358h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 82189358h case    3:*/		return 0x8218935C;
		  /* 8218935Ch */ case    4:  		/* mr R29, R3 */
		/* 8218935Ch case    4:*/		regs.R29 = regs.R3;
		/* 8218935Ch case    4:*/		return 0x82189360;
		  /* 82189360h */ case    5:  		/* cmplw CR6, R11, R25 */
		/* 82189360h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 82189360h case    5:*/		return 0x82189364;
		  /* 82189364h */ case    6:  		/* bc 4, CR6_EQ, 196 */
		/* 82189364h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82189428;  }
		/* 82189364h case    6:*/		return 0x82189368;
		  /* 82189368h */ case    7:  		/* lwz R11, <#[R23 + 8]> */
		/* 82189368h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82189368h case    7:*/		return 0x8218936C;
		  /* 8218936Ch */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8218936Ch case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8218936Ch case    8:*/		return 0x82189370;
		  /* 82189370h */ case    9:  		/* cmplwi CR6, R11, 32 */
		/* 82189370h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 82189370h case    9:*/		return 0x82189374;
		  /* 82189374h */ case   10:  		/* bc 12, CR6_LT, 16 */
		/* 82189374h case   10:*/		if ( regs.CR[6].lt ) { return 0x82189384;  }
		/* 82189374h case   10:*/		return 0x82189378;
		  /* 82189378h */ case   11:  		/* cmplwi CR6, R11, 82 */
		/* 82189378h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 82189378h case   11:*/		return 0x8218937C;
		  /* 8218937Ch */ case   12:  		/* mr R11, R27 */
		/* 8218937Ch case   12:*/		regs.R11 = regs.R27;
		/* 8218937Ch case   12:*/		return 0x82189380;
		  /* 82189380h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 82189380h case   13:*/		if ( !regs.CR[6].gt ) { return 0x82189388;  }
		/* 82189380h case   13:*/		return 0x82189384;
	}
	return 0x82189384;
} // Block from 8218934Ch-82189384h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82189384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189384);
		  /* 82189384h */ case    0:  		/* li R11, 0 */
		/* 82189384h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82189384h case    0:*/		return 0x82189388;
	}
	return 0x82189388;
} // Block from 82189384h-82189388h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82189388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189388);
		  /* 82189388h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82189388h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82189388h case    0:*/		return 0x8218938C;
		  /* 8218938Ch */ case    1:  		/* bc 12, CR0_EQ, 156 */
		/* 8218938Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82189428;  }
		/* 8218938Ch case    1:*/		return 0x82189390;
		  /* 82189390h */ case    2:  		/* mr R5, R20 */
		/* 82189390h case    2:*/		regs.R5 = regs.R20;
		/* 82189390h case    2:*/		return 0x82189394;
		  /* 82189394h */ case    3:  		/* mr R4, R23 */
		/* 82189394h case    3:*/		regs.R4 = regs.R23;
		/* 82189394h case    3:*/		return 0x82189398;
		  /* 82189398h */ case    4:  		/* mr R3, R30 */
		/* 82189398h case    4:*/		regs.R3 = regs.R30;
		/* 82189398h case    4:*/		return 0x8218939C;
		  /* 8218939Ch */ case    5:  		/* bl -19740 */
		/* 8218939Ch case    5:*/		regs.LR = 0x821893A0; return 0x82184680;
		/* 8218939Ch case    5:*/		return 0x821893A0;
		  /* 821893A0h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821893A0h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821893A0h case    6:*/		return 0x821893A4;
		  /* 821893A4h */ case    7:  		/* bc 12, CR0_EQ, 132 */
		/* 821893A4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82189428;  }
		/* 821893A4h case    7:*/		return 0x821893A8;
		  /* 821893A8h */ case    8:  		/* lwz R11, <#[R23 + 8]> */
		/* 821893A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821893A8h case    8:*/		return 0x821893AC;
		  /* 821893ACh */ case    9:  		/* lwz R10, <#[R23 + 16]> */
		/* 821893ACh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000010) );
		/* 821893ACh case    9:*/		return 0x821893B0;
		  /* 821893B0h */ case   10:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821893B0h case   10:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821893B0h case   10:*/		return 0x821893B4;
		  /* 821893B4h */ case   11:  		/* lwz R9, <#[R30 + 708]> */
		/* 821893B4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000002C4) );
		/* 821893B4h case   11:*/		return 0x821893B8;
		  /* 821893B8h */ case   12:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821893B8h case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821893B8h case   12:*/		return 0x821893BC;
		  /* 821893BCh */ case   13:  		/* stb R27, <#[R1 + 80]> */
		/* 821893BCh case   13:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821893BCh case   13:*/		return 0x821893C0;
		  /* 821893C0h */ case   14:  		/* nor R11, R11, R11 */
		/* 821893C0h case   14:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821893C0h case   14:*/		return 0x821893C4;
		  /* 821893C4h */ case   15:  		/* addi R8, R11, -1 */
		/* 821893C4h case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821893C4h case   15:*/		return 0x821893C8;
		  /* 821893C8h */ case   16:  		/* andc R11, R11, R8 */
		/* 821893C8h case   16:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821893C8h case   16:*/		return 0x821893CC;
		  /* 821893CCh */ case   17:  		/* addi R8, R11, -1 */
		/* 821893CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821893CCh case   17:*/		return 0x821893D0;
		  /* 821893D0h */ case   18:  		/* rlwinm R7, R11, 1, 27, 30 */
		/* 821893D0h case   18:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R7,regs.R11);
		/* 821893D0h case   18:*/		return 0x821893D4;
		  /* 821893D4h */ case   19:  		/* andc R11, R11, R8 */
		/* 821893D4h case   19:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821893D4h case   19:*/		return 0x821893D8;
		  /* 821893D8h */ case   20:  		/* cntlzw R11, R11 */
		/* 821893D8h case   20:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821893D8h case   20:*/		return 0x821893DC;
		  /* 821893DCh */ case   21:  		/* subfic R11, R11, 31 */
		/* 821893DCh case   21:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821893DCh case   21:*/		return 0x821893E0;
		  /* 821893E0h */ case   22:  		/* add R10, R10, R11 */
		/* 821893E0h case   22:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821893E0h case   22:*/		return 0x821893E4;
		  /* 821893E4h */ case   23:  		/* rlwinm R11, R11, 5, 22, 26 */
		/* 821893E4h case   23:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R11,regs.R11);
		/* 821893E4h case   23:*/		return 0x821893E8;
		  /* 821893E8h */ case   24:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821893E8h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821893E8h case   24:*/		return 0x821893EC;
		  /* 821893ECh */ case   25:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 821893ECh case   25:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 821893ECh case   25:*/		return 0x821893F0;
		  /* 821893F0h */ case   26:  		/* ori R8, R11, 7296 */
		/* 821893F0h case   26:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x1C80);
		/* 821893F0h case   26:*/		return 0x821893F4;
		  /* 821893F4h */ case   27:  		/* stwx R23, <#[R10 + R9]> */
		/* 821893F4h case   27:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821893F4h case   27:*/		return 0x821893F8;
		  /* 821893F8h */ case   28:  		/* lwz R11, <#[R23 + 8]> */
		/* 821893F8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821893F8h case   28:*/		return 0x821893FC;
		  /* 821893FCh */ case   29:  		/* or R10, R7, R11 */
		/* 821893FCh case   29:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R11);
		/* 821893FCh case   29:*/		return 0x82189400;
		  /* 82189400h */ case   30:  		/* rlwinm R11, R10, 0, 0, 17 */
		/* 82189400h case   30:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R11,regs.R10);
		/* 82189400h case   30:*/		return 0x82189404;
		  /* 82189404h */ case   31:  		/* addi R11, R11, 16384 */
		/* 82189404h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82189404h case   31:*/		return 0x82189408;
		  /* 82189408h */ case   32:  		/* rlwimi R11, R10, 0, 18, 14 */
		/* 82189408h case   32:*/		cpu::op::rlwimi<0,0,18,14>(regs,&regs.R11,regs.R10);
		/* 82189408h case   32:*/		return 0x8218940C;
		  /* 8218940Ch */ case   33:  		/* stw R11, <#[R23 + 8]> */
		/* 8218940Ch case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8218940Ch case   33:*/		return 0x82189410;
		  /* 82189410h */ case   34:  		/* lwz R11, <#[R29]> */
		/* 82189410h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82189410h case   34:*/		return 0x82189414;
		  /* 82189414h */ case   35:  		/* rlwinm R11, R11, 0, 27, 24 */
		/* 82189414h case   35:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R11,regs.R11);
		/* 82189414h case   35:*/		return 0x82189418;
		  /* 82189418h */ case   36:  		/* rlwinm R11, R11, 0, 24, 21 */
		/* 82189418h case   36:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R11,regs.R11);
		/* 82189418h case   36:*/		return 0x8218941C;
		  /* 8218941Ch */ case   37:  		/* or R11, R8, R11 */
		/* 8218941Ch case   37:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8218941Ch case   37:*/		return 0x82189420;
		  /* 82189420h */ case   38:  		/* stw R11, <#[R29]> */
		/* 82189420h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82189420h case   38:*/		return 0x82189424;
		  /* 82189424h */ case   39:  		/* b 240 */
		/* 82189424h case   39:*/		return 0x82189514;
		/* 82189424h case   39:*/		return 0x82189428;
	}
	return 0x82189428;
} // Block from 82189388h-82189428h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82189428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189428);
		  /* 82189428h */ case    0:  		/* lwz R11, <#[R25 + 28]> */
		/* 82189428h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 82189428h case    0:*/		return 0x8218942C;
		  /* 8218942Ch */ case    1:  		/* addi R28, R25, 24 */
		/* 8218942Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R25,0x18);
		/* 8218942Ch case    1:*/		return 0x82189430;
		  /* 82189430h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82189430h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82189430h case    2:*/		return 0x82189434;
		  /* 82189434h */ case    3:  		/* bc 4, CR0_EQ, 84 */
		/* 82189434h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82189488;  }
		/* 82189434h case    3:*/		return 0x82189438;
		  /* 82189438h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 82189438h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82189438h case    4:*/		return 0x8218943C;
		  /* 8218943Ch */ case    5:  		/* b 64 */
		/* 8218943Ch case    5:*/		return 0x8218947C;
		/* 8218943Ch case    5:*/		return 0x82189440;
		  /* 82189440h */ case    6:  		/* mr R3, R31 */
		/* 82189440h case    6:*/		regs.R3 = regs.R31;
		/* 82189440h case    6:*/		return 0x82189444;
		  /* 82189444h */ case    7:  		/* bl -97436 */
		/* 82189444h case    7:*/		regs.LR = 0x82189448; return 0x821717A8;
		/* 82189444h case    7:*/		return 0x82189448;
		  /* 82189448h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82189448h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82189448h case    8:*/		return 0x8218944C;
		  /* 8218944Ch */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 8218944Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8218946C;  }
		/* 8218944Ch case    9:*/		return 0x82189450;
		  /* 82189450h */ case   10:  		/* lwz R11, <#[R25 + 48]> */
		/* 82189450h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 82189450h case   10:*/		return 0x82189454;
		  /* 82189454h */ case   11:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82189454h case   11:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82189454h case   11:*/		return 0x82189458;
		  /* 82189458h */ case   12:  		/* bc 12, CR0_EQ, 228 */
		/* 82189458h case   12:*/		if ( regs.CR[0].eq ) { return 0x8218953C;  }
		/* 82189458h case   12:*/		return 0x8218945C;
		  /* 8218945Ch */ case   13:  		/* mr R3, R31 */
		/* 8218945Ch case   13:*/		regs.R3 = regs.R31;
		/* 8218945Ch case   13:*/		return 0x82189460;
		  /* 82189460h */ case   14:  		/* bl -152496 */
		/* 82189460h case   14:*/		regs.LR = 0x82189464; return 0x821640B0;
		/* 82189460h case   14:*/		return 0x82189464;
		  /* 82189464h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82189464h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82189464h case   15:*/		return 0x82189468;
		  /* 82189468h */ case   16:  		/* bc 12, CR0_EQ, 212 */
		/* 82189468h case   16:*/		if ( regs.CR[0].eq ) { return 0x8218953C;  }
		/* 82189468h case   16:*/		return 0x8218946C;
	}
	return 0x8218946C;
} // Block from 82189428h-8218946Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8218946Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218946C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218946C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218946C);
		  /* 8218946Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8218946Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8218946Ch case    0:*/		return 0x82189470;
		  /* 82189470h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 82189470h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82189470h case    1:*/		return 0x82189474;
		  /* 82189474h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82189474h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82189474h case    2:*/		return 0x82189478;
		  /* 82189478h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82189478h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82189488;  }
		/* 82189478h case    3:*/		return 0x8218947C;
	}
	return 0x8218947C;
} // Block from 8218946Ch-8218947Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218947Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218947C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218947C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218947C);
		  /* 8218947Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8218947Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8218947Ch case    0:*/		return 0x82189480;
		  /* 82189480h */ case    1:  		/* addic. R31, R11, -40 */
		/* 82189480h case    1:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 82189480h case    1:*/		return 0x82189484;
		  /* 82189484h */ case    2:  		/* bc 4, CR0_EQ, -68 */
		/* 82189484h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82189440;  }
		/* 82189484h case    2:*/		return 0x82189488;
	}
	return 0x82189488;
} // Block from 8218947Ch-82189488h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82189488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189488);
		  /* 82189488h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 82189488h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 82189488h case    0:*/		return 0x8218948C;
		  /* 8218948Ch */ case    1:  		/* ori R5, R11, 2 */
		/* 8218948Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R11,0x2);
		/* 8218948Ch case    1:*/		return 0x82189490;
		  /* 82189490h */ case    2:  		/* mr R6, R29 */
		/* 82189490h case    2:*/		regs.R6 = regs.R29;
		/* 82189490h case    2:*/		return 0x82189494;
		  /* 82189494h */ case    3:  		/* mr R4, R25 */
		/* 82189494h case    3:*/		regs.R4 = regs.R25;
		/* 82189494h case    3:*/		return 0x82189498;
		  /* 82189498h */ case    4:  		/* mr R3, R30 */
		/* 82189498h case    4:*/		regs.R3 = regs.R30;
		/* 82189498h case    4:*/		return 0x8218949C;
		  /* 8218949Ch */ case    5:  		/* bl 657372 */
		/* 8218949Ch case    5:*/		regs.LR = 0x821894A0; return 0x82229C78;
		/* 8218949Ch case    5:*/		return 0x821894A0;
		  /* 821894A0h */ case    6:  		/* lwz R11, <#[R23 + 28]> */
		/* 821894A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821894A0h case    6:*/		return 0x821894A4;
		  /* 821894A4h */ case    7:  		/* cmplw CR6, R11, R25 */
		/* 821894A4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821894A4h case    7:*/		return 0x821894A8;
		  /* 821894A8h */ case    8:  		/* lwz R31, <#[R29 + 12]> */
		/* 821894A8h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 821894A8h case    8:*/		return 0x821894AC;
		  /* 821894ACh */ case    9:  		/* bc 12, CR6_EQ, 76 */
		/* 821894ACh case    9:*/		if ( regs.CR[6].eq ) { return 0x821894F8;  }
		/* 821894ACh case    9:*/		return 0x821894B0;
		  /* 821894B0h */ case   10:  		/* li R5, 1 */
		/* 821894B0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821894B0h case   10:*/		return 0x821894B4;
		  /* 821894B4h */ case   11:  		/* lwz R4, <#[R31 + 44]> */
		/* 821894B4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821894B4h case   11:*/		return 0x821894B8;
		  /* 821894B8h */ case   12:  		/* mr R3, R30 */
		/* 821894B8h case   12:*/		regs.R3 = regs.R30;
		/* 821894B8h case   12:*/		return 0x821894BC;
		  /* 821894BCh */ case   13:  		/* bl 188764 */
		/* 821894BCh case   13:*/		regs.LR = 0x821894C0; return 0x821B7618;
		/* 821894BCh case   13:*/		return 0x821894C0;
		  /* 821894C0h */ case   14:  		/* mr R29, R3 */
		/* 821894C0h case   14:*/		regs.R29 = regs.R3;
		/* 821894C0h case   14:*/		return 0x821894C4;
		  /* 821894C4h */ case   15:  		/* li R5, 1 */
		/* 821894C4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821894C4h case   15:*/		return 0x821894C8;
		  /* 821894C8h */ case   16:  		/* lwz R4, <#[R31 + 48]> */
		/* 821894C8h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821894C8h case   16:*/		return 0x821894CC;
		  /* 821894CCh */ case   17:  		/* mr R3, R30 */
		/* 821894CCh case   17:*/		regs.R3 = regs.R30;
		/* 821894CCh case   17:*/		return 0x821894D0;
		  /* 821894D0h */ case   18:  		/* bl 188744 */
		/* 821894D0h case   18:*/		regs.LR = 0x821894D4; return 0x821B7618;
		/* 821894D0h case   18:*/		return 0x821894D4;
		  /* 821894D4h */ case   19:  		/* lwz R11, <#[R29 + 16]> */
		/* 821894D4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821894D4h case   19:*/		return 0x821894D8;
		  /* 821894D8h */ case   20:  		/* rlwinm. R10, R11, 0, 16, 31 */
		/* 821894D8h case   20:*/		cpu::op::rlwinm<1,0,16,31>(regs,&regs.R10,regs.R11);
		/* 821894D8h case   20:*/		return 0x821894DC;
		  /* 821894DCh */ case   21:  		/* bc 4, CR0_EQ, 28 */
		/* 821894DCh case   21:*/		if ( !regs.CR[0].eq ) { return 0x821894F8;  }
		/* 821894DCh case   21:*/		return 0x821894E0;
		  /* 821894E0h */ case   22:  		/* lwz R10, <#[R1 + 92]> */
		/* 821894E0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821894E0h case   22:*/		return 0x821894E4;
		  /* 821894E4h */ case   23:  		/* rlwimi R11, R27, 16, 13, 15 */
		/* 821894E4h case   23:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R27);
		/* 821894E4h case   23:*/		return 0x821894E8;
		  /* 821894E8h */ case   24:  		/* stw R29, <#[R1 + 92]> */
		/* 821894E8h case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 821894E8h case   24:*/		return 0x821894EC;
		  /* 821894ECh */ case   25:  		/* stw R11, <#[R29 + 16]> */
		/* 821894ECh case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821894ECh case   25:*/		return 0x821894F0;
		  /* 821894F0h */ case   26:  		/* sth R20, <#[R29 + 18]> */
		/* 821894F0h case   26:*/		cpu::mem::store16( regs, regs.R20, (uint32)(regs.R29 + 0x00000012) );
		/* 821894F0h case   26:*/		return 0x821894F4;
		  /* 821894F4h */ case   27:  		/* stw R10, <#[R29 + 32]> */
		/* 821894F4h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000020) );
		/* 821894F4h case   27:*/		return 0x821894F8;
	}
	return 0x821894F8;
} // Block from 82189488h-821894F8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821894F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821894F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821894F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821894F8);
		  /* 821894F8h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 821894F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821894F8h case    0:*/		return 0x821894FC;
		  /* 821894FCh */ case    1:  		/* lwz R9, <#[R1 + 84]> */
		/* 821894FCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821894FCh case    1:*/		return 0x82189500;
		  /* 82189500h */ case    2:  		/* rlwimi R11, R27, 16, 13, 15 */
		/* 82189500h case    2:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R27);
		/* 82189500h case    2:*/		return 0x82189504;
		  /* 82189504h */ case    3:  		/* stw R31, <#[R1 + 84]> */
		/* 82189504h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82189504h case    3:*/		return 0x82189508;
		  /* 82189508h */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 82189508h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82189508h case    4:*/		return 0x8218950C;
		  /* 8218950Ch */ case    5:  		/* sth R20, <#[R31 + 18]> */
		/* 8218950Ch case    5:*/		cpu::mem::store16( regs, regs.R20, (uint32)(regs.R31 + 0x00000012) );
		/* 8218950Ch case    5:*/		return 0x82189510;
		  /* 82189510h */ case    6:  		/* stw R9, <#[R31 + 32]> */
		/* 82189510h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82189510h case    6:*/		return 0x82189514;
	}
	return 0x82189514;
} // Block from 821894F8h-82189514h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82189514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189514);
		  /* 82189514h */ case    0:  		/* mr R22, R27 */
		/* 82189514h case    0:*/		regs.R22 = regs.R27;
		/* 82189514h case    0:*/		return 0x82189518;
	}
	return 0x82189518;
} // Block from 82189514h-82189518h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82189518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189518);
		  /* 82189518h */ case    0:  		/* addi R3, R1, 160 */
		/* 82189518h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82189518h case    0:*/		return 0x8218951C;
		  /* 8218951Ch */ case    1:  		/* bl -117276 */
		/* 8218951Ch case    1:*/		regs.LR = 0x82189520; return 0x8216CB00;
		/* 8218951Ch case    1:*/		return 0x82189520;
		  /* 82189520h */ case    2:  		/* or. R25, R3, R3 */
		/* 82189520h case    2:*/		cpu::op::or<1>(regs,&regs.R25,regs.R3,regs.R3);
		/* 82189520h case    2:*/		return 0x82189524;
		  /* 82189524h */ case    3:  		/* bc 4, CR0_EQ, -2176 */
		/* 82189524h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82188CA4;  }
		/* 82189524h case    3:*/		return 0x82189528;
		  /* 82189528h */ case    4:  		/* mr R5, R30 */
		/* 82189528h case    4:*/		regs.R5 = regs.R30;
		/* 82189528h case    4:*/		return 0x8218952C;
		  /* 8218952Ch */ case    5:  		/* mr R4, R19 */
		/* 8218952Ch case    5:*/		regs.R4 = regs.R19;
		/* 8218952Ch case    5:*/		return 0x82189530;
		  /* 82189530h */ case    6:  		/* mr R3, R16 */
		/* 82189530h case    6:*/		regs.R3 = regs.R16;
		/* 82189530h case    6:*/		return 0x82189534;
		  /* 82189534h */ case    7:  		/* bl -68644 */
		/* 82189534h case    7:*/		regs.LR = 0x82189538; return 0x82178910;
		/* 82189534h case    7:*/		return 0x82189538;
		  /* 82189538h */ case    8:  		/* b -2368 */
		/* 82189538h case    8:*/		return 0x82188BF8;
		/* 82189538h case    8:*/		return 0x8218953C;
	}
	return 0x8218953C;
} // Block from 82189518h-8218953Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8218953Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218953C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218953C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218953C);
		  /* 8218953Ch */ case    0:  		/* rlwimi R31, R27, 0, 30, 31 */
		/* 8218953Ch case    0:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R31,regs.R27);
		/* 8218953Ch case    0:*/		return 0x82189540;
		  /* 82189540h */ case    1:  		/* mr R5, R31 */
		/* 82189540h case    1:*/		regs.R5 = regs.R31;
		/* 82189540h case    1:*/		return 0x82189544;
		  /* 82189544h */ case    2:  		/* b -180 */
		/* 82189544h case    2:*/		return 0x82189490;
		/* 82189544h case    2:*/		return 0x82189548;
	}
	return 0x82189548;
} // Block from 8218953Ch-82189548h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82189548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189548);
		  /* 82189548h */ case    0:  		/* mr R17, R27 */
		/* 82189548h case    0:*/		regs.R17 = regs.R27;
		/* 82189548h case    0:*/		return 0x8218954C;
		  /* 8218954Ch */ case    1:  		/* b -2388 */
		/* 8218954Ch case    1:*/		return 0x82188BF8;
		/* 8218954Ch case    1:*/		return 0x82189550;
	}
	return 0x82189550;
} // Block from 82189548h-82189550h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189550);
		  /* 82189550h */ case    0:  		/* mr R4, R15 */
		/* 82189550h case    0:*/		regs.R4 = regs.R15;
		/* 82189550h case    0:*/		return 0x82189554;
		  /* 82189554h */ case    1:  		/* mr R3, R30 */
		/* 82189554h case    1:*/		regs.R3 = regs.R30;
		/* 82189554h case    1:*/		return 0x82189558;
		  /* 82189558h */ case    2:  		/* bl -23544 */
		/* 82189558h case    2:*/		regs.LR = 0x8218955C; return 0x82183960;
		/* 82189558h case    2:*/		return 0x8218955C;
		  /* 8218955Ch */ case    3:  		/* rlwinm. R11, R17, 0, 24, 31 */
		/* 8218955Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R17);
		/* 8218955Ch case    3:*/		return 0x82189560;
		  /* 82189560h */ case    4:  		/* mr R29, R3 */
		/* 82189560h case    4:*/		regs.R29 = regs.R3;
		/* 82189560h case    4:*/		return 0x82189564;
		  /* 82189564h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 82189564h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82189570;  }
		/* 82189564h case    5:*/		return 0x82189568;
		  /* 82189568h */ case    6:  		/* cmplw CR6, R3, R20 */
		/* 82189568h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R20);
		/* 82189568h case    6:*/		return 0x8218956C;
		  /* 8218956Ch */ case    7:  		/* bc 12, CR6_EQ, 332 */
		/* 8218956Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821896B8;  }
		/* 8218956Ch case    7:*/		return 0x82189570;
	}
	return 0x82189570;
} // Block from 82189550h-82189570h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82189570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189570);
		  /* 82189570h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82189570h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82189570h case    0:*/		return 0x82189574;
		  /* 82189574h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 82189574h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821895B0;  }
		/* 82189574h case    1:*/		return 0x82189578;
		  /* 82189578h */ case    2:  		/* mr R5, R20 */
		/* 82189578h case    2:*/		regs.R5 = regs.R20;
		/* 82189578h case    2:*/		return 0x8218957C;
		  /* 8218957Ch */ case    3:  		/* mr R4, R29 */
		/* 8218957Ch case    3:*/		regs.R4 = regs.R29;
		/* 8218957Ch case    3:*/		return 0x82189580;
		  /* 82189580h */ case    4:  		/* mr R3, R30 */
		/* 82189580h case    4:*/		regs.R3 = regs.R30;
		/* 82189580h case    4:*/		return 0x82189584;
		  /* 82189584h */ case    5:  		/* bl -20780 */
		/* 82189584h case    5:*/		regs.LR = 0x82189588; return 0x82184458;
		/* 82189584h case    5:*/		return 0x82189588;
		  /* 82189588h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82189588h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82189588h case    6:*/		return 0x8218958C;
		  /* 8218958Ch */ case    7:  		/* bc 4, CR0_EQ, 36 */
		/* 8218958Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821895B0;  }
		/* 8218958Ch case    7:*/		return 0x82189590;
		  /* 82189590h */ case    8:  		/* mr R4, R15 */
		/* 82189590h case    8:*/		regs.R4 = regs.R15;
		/* 82189590h case    8:*/		return 0x82189594;
		  /* 82189594h */ case    9:  		/* mr R3, R30 */
		/* 82189594h case    9:*/		regs.R3 = regs.R30;
		/* 82189594h case    9:*/		return 0x82189598;
		  /* 82189598h */ case   10:  		/* bl -19256 */
		/* 82189598h case   10:*/		regs.LR = 0x8218959C; return 0x82184A60;
		/* 82189598h case   10:*/		return 0x8218959C;
		  /* 8218959Ch */ case   11:  		/* mr R5, R20 */
		/* 8218959Ch case   11:*/		regs.R5 = regs.R20;
		/* 8218959Ch case   11:*/		return 0x821895A0;
		  /* 821895A0h */ case   12:  		/* mr R4, R29 */
		/* 821895A0h case   12:*/		regs.R4 = regs.R29;
		/* 821895A0h case   12:*/		return 0x821895A4;
		  /* 821895A4h */ case   13:  		/* mr R3, R30 */
		/* 821895A4h case   13:*/		regs.R3 = regs.R30;
		/* 821895A4h case   13:*/		return 0x821895A8;
		  /* 821895A8h */ case   14:  		/* bl -19272 */
		/* 821895A8h case   14:*/		regs.LR = 0x821895AC; return 0x82184A60;
		/* 821895A8h case   14:*/		return 0x821895AC;
		  /* 821895ACh */ case   15:  		/* b 268 */
		/* 821895ACh case   15:*/		return 0x821896B8;
		/* 821895ACh case   15:*/		return 0x821895B0;
	}
	return 0x821895B0;
} // Block from 82189570h-821895B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821895B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821895B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821895B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821895B0);
		  /* 821895B0h */ case    0:  		/* lwz R31, <#[R16 + 28]> */
		/* 821895B0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000001C) );
		/* 821895B0h case    0:*/		return 0x821895B4;
		  /* 821895B4h */ case    1:  		/* mr R6, R16 */
		/* 821895B4h case    1:*/		regs.R6 = regs.R16;
		/* 821895B4h case    1:*/		return 0x821895B8;
		  /* 821895B8h */ case    2:  		/* mr R3, R30 */
		/* 821895B8h case    2:*/		regs.R3 = regs.R30;
		/* 821895B8h case    2:*/		return 0x821895BC;
		  /* 821895BCh */ case    3:  		/* addi R11, R31, 24 */
		/* 821895BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x18);
		/* 821895BCh case    3:*/		return 0x821895C0;
		  /* 821895C0h */ case    4:  		/* mr R4, R31 */
		/* 821895C0h case    4:*/		regs.R4 = regs.R31;
		/* 821895C0h case    4:*/		return 0x821895C4;
		  /* 821895C4h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821895C4h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821895C4h case    5:*/		return 0x821895C8;
		  /* 821895C8h */ case    6:  		/* ori R5, R11, 2 */
		/* 821895C8h case    6:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R11,0x2);
		/* 821895C8h case    6:*/		return 0x821895CC;
		  /* 821895CCh */ case    7:  		/* bl 661164 */
		/* 821895CCh case    7:*/		regs.LR = 0x821895D0; return 0x8222AC78;
		/* 821895CCh case    7:*/		return 0x821895D0;
		  /* 821895D0h */ case    8:  		/* lwz R7, <#[R3 + 16]> */
		/* 821895D0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000010) );
		/* 821895D0h case    8:*/		return 0x821895D4;
		  /* 821895D4h */ case    9:  		/* lwz R6, <#[R3 + 8]> */
		/* 821895D4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 821895D4h case    9:*/		return 0x821895D8;
		  /* 821895D8h */ case   10:  		/* rlwinm R9, R15, 2, 0, 29 */
		/* 821895D8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R15);
		/* 821895D8h case   10:*/		return 0x821895DC;
		  /* 821895DCh */ case   11:  		/* rlwimi R7, R27, 16, 13, 15 */
		/* 821895DCh case   11:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R7,regs.R27);
		/* 821895DCh case   11:*/		return 0x821895E0;
		  /* 821895E0h */ case   12:  		/* lwz R11, <#[R1 + 88]> */
		/* 821895E0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821895E0h case   12:*/		return 0x821895E4;
		  /* 821895E4h */ case   13:  		/* oris R6, R6, 128 */
		/* 821895E4h case   13:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R6,0x80);
		/* 821895E4h case   13:*/		return 0x821895E8;
		  /* 821895E8h */ case   14:  		/* lwz R8, <#[R1 + 108]> */
		/* 821895E8h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000006C) );
		/* 821895E8h case   14:*/		return 0x821895EC;
		  /* 821895ECh */ case   15:  		/* stw R7, <#[R3 + 16]> */
		/* 821895ECh case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000010) );
		/* 821895ECh case   15:*/		return 0x821895F0;
		  /* 821895F0h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821895F0h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821895F0h case   16:*/		return 0x821895F4;
		  /* 821895F4h */ case   17:  		/* stw R6, <#[R3 + 8]> */
		/* 821895F4h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 821895F4h case   17:*/		return 0x821895F8;
		  /* 821895F8h */ case   18:  		/* sth R15, <#[R3 + 18]> */
		/* 821895F8h case   18:*/		cpu::mem::store16( regs, regs.R15, (uint32)(regs.R3 + 0x00000012) );
		/* 821895F8h case   18:*/		return 0x821895FC;
		  /* 821895FCh */ case   19:  		/* lwz R10, <#[R30 + 708]> */
		/* 821895FCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002C4) );
		/* 821895FCh case   19:*/		return 0x82189600;
		  /* 82189600h */ case   20:  		/* stwx R3, <#[R9 + R10]> */
		/* 82189600h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82189600h case   20:*/		return 0x82189604;
		  /* 82189604h */ case   21:  		/* stwx R3, <#[R11 + R8]> */
		/* 82189604h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82189604h case   21:*/		return 0x82189608;
		  /* 82189608h */ case   22:  		/* lwz R11, <#[R31 + 20]> */
		/* 82189608h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82189608h case   22:*/		return 0x8218960C;
		  /* 8218960Ch */ case   23:  		/* lwz R10, <#[R30 + 684]> */
		/* 8218960Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218960Ch case   23:*/		return 0x82189610;
		  /* 82189610h */ case   24:  		/* lwz R9, <#[R30 + 672]> */
		/* 82189610h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000002A0) );
		/* 82189610h case   24:*/		return 0x82189614;
		  /* 82189614h */ case   25:  		/* mullw R9, R29, R9 */
		/* 82189614h case   25:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R29,regs.R9);
		/* 82189614h case   25:*/		return 0x82189618;
		  /* 82189618h */ case   26:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82189618h case   26:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82189618h case   26:*/		return 0x8218961C;
		  /* 8218961Ch */ case   27:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 8218961Ch case   27:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 8218961Ch case   27:*/		return 0x82189620;
		  /* 82189620h */ case   28:  		/* add R9, R9, R10 */
		/* 82189620h case   28:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82189620h case   28:*/		return 0x82189624;
		  /* 82189624h */ case   29:  		/* bc 4, CR0_EQ, 136 */
		/* 82189624h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821896AC;  }
		/* 82189624h case   29:*/		return 0x82189628;
		  /* 82189628h */ case   30:  		/* mr R7, R11 */
		/* 82189628h case   30:*/		regs.R7 = regs.R11;
		/* 82189628h case   30:*/		return 0x8218962C;
		  /* 8218962Ch */ case   31:  		/* cmplwi CR0, R11, 0 */
		/* 8218962Ch case   31:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218962Ch case   31:*/		return 0x82189630;
		  /* 82189630h */ case   32:  		/* bc 12, CR0_EQ, 124 */
		/* 82189630h case   32:*/		if ( regs.CR[0].eq ) { return 0x821896AC;  }
		/* 82189630h case   32:*/		return 0x82189634;
		  /* 82189634h */ case   33:  		/* lwz R11, <#[R7 + 8]> */
		/* 82189634h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 82189634h case   33:*/		return 0x82189638;
		  /* 82189638h */ case   34:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82189638h case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82189638h case   34:*/		return 0x8218963C;
		  /* 8218963Ch */ case   35:  		/* cmplwi CR6, R11, 14336 */
		/* 8218963Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8218963Ch case   35:*/		return 0x82189640;
		  /* 82189640h */ case   36:  		/* bc 4, CR6_EQ, 80 */
		/* 82189640h case   36:*/		if ( !regs.CR[6].eq ) { return 0x82189690;  }
		/* 82189640h case   36:*/		return 0x82189644;
		  /* 82189644h */ case   37:  		/* lwz R8, <#[R7]> */
		/* 82189644h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 82189644h case   37:*/		return 0x82189648;
		  /* 82189648h */ case   38:  		/* cmplwi CR6, R8, 0 */
		/* 82189648h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82189648h case   38:*/		return 0x8218964C;
		  /* 8218964Ch */ case   39:  		/* bc 12, CR6_EQ, 68 */
		/* 8218964Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x82189690;  }
		/* 8218964Ch case   39:*/		return 0x82189650;
		  /* 82189650h */ case   40:  		/* lwz R11, <#[R8 + 12]> */
		/* 82189650h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 82189650h case   40:*/		return 0x82189654;
		  /* 82189654h */ case   41:  		/* lwz R10, <#[R11 + 8]> */
		/* 82189654h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82189654h case   41:*/		return 0x82189658;
		  /* 82189658h */ case   42:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 82189658h case   42:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 82189658h case   42:*/		return 0x8218965C;
		  /* 8218965Ch */ case   43:  		/* bc 12, CR0_EQ, 44 */
		/* 8218965Ch case   43:*/		if ( regs.CR[0].eq ) { return 0x82189688;  }
		/* 8218965Ch case   43:*/		return 0x82189660;
		  /* 82189660h */ case   44:  		/* lwz R10, <#[R8]> */
		/* 82189660h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82189660h case   44:*/		return 0x82189664;
		  /* 82189664h */ case   45:  		/* lhz R11, <#[R11 + 18]> */
		/* 82189664h case   45:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000012) );
		/* 82189664h case   45:*/		return 0x82189668;
		  /* 82189668h */ case   46:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 82189668h case   46:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 82189668h case   46:*/		return 0x8218966C;
		  /* 8218966Ch */ case   47:  		/* add R11, R10, R11 */
		/* 8218966Ch case   47:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218966Ch case   47:*/		return 0x82189670;
		  /* 82189670h */ case   48:  		/* rlwinm R10, R11, 29, 3, 28 */
		/* 82189670h case   48:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R11);
		/* 82189670h case   48:*/		return 0x82189674;
		  /* 82189674h */ case   49:  		/* rldicl R11, R11, 0, 58 */
		/* 82189674h case   49:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R11,regs.R11);
		/* 82189674h case   49:*/		return 0x82189678;
		  /* 82189678h */ case   50:  		/* sld R11, R27, R11 */
		/* 82189678h case   50:*/		cpu::op::sld<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 82189678h case   50:*/		return 0x8218967C;
		  /* 8218967Ch */ case   51:  		/* ldx R6, <#[R10 + R9]> */
		/* 8218967Ch case   51:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8218967Ch case   51:*/		return 0x82189680;
		  /* 82189680h */ case   52:  		/* or R11, R11, R6 */
		/* 82189680h case   52:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82189680h case   52:*/		return 0x82189684;
		  /* 82189684h */ case   53:  		/* stdx R11, <#[R10 + R9]> */
		/* 82189684h case   53:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82189684h case   53:*/		return 0x82189688;
	}
	return 0x82189688;
} // Block from 821895B0h-82189688h (54 instructions)

//////////////////////////////////////////////////////
// Block at 82189688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189688);
		  /* 82189688h */ case    0:  		/* lwz R8, <#[R8 + 4]> */
		/* 82189688h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 82189688h case    0:*/		return 0x8218968C;
		  /* 8218968Ch */ case    1:  		/* b -68 */
		/* 8218968Ch case    1:*/		return 0x82189648;
		/* 8218968Ch case    1:*/		return 0x82189690;
	}
	return 0x82189690;
} // Block from 82189688h-82189690h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189690);
		  /* 82189690h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 82189690h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 82189690h case    0:*/		return 0x82189694;
		  /* 82189694h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 82189694h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82189694h case    1:*/		return 0x82189698;
		  /* 82189698h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82189698h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82189698h case    2:*/		return 0x8218969C;
		  /* 8218969Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8218969Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821896AC;  }
		/* 8218969Ch case    3:*/		return 0x821896A0;
		  /* 821896A0h */ case    4:  		/* mr R7, R11 */
		/* 821896A0h case    4:*/		regs.R7 = regs.R11;
		/* 821896A0h case    4:*/		return 0x821896A4;
		  /* 821896A4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821896A4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821896A4h case    5:*/		return 0x821896A8;
		  /* 821896A8h */ case    6:  		/* bc 4, CR6_EQ, -116 */
		/* 821896A8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82189634;  }
		/* 821896A8h case    6:*/		return 0x821896AC;
	}
	return 0x821896AC;
} // Block from 82189690h-821896ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821896ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821896AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821896AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821896AC);
		  /* 821896ACh */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 821896ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821896ACh case    0:*/		return 0x821896B0;
		  /* 821896B0h */ case    1:  		/* stw R3, <#[R1 + 84]> */
		/* 821896B0h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 821896B0h case    1:*/		return 0x821896B4;
		  /* 821896B4h */ case    2:  		/* stw R11, <#[R3 + 32]> */
		/* 821896B4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821896B4h case    2:*/		return 0x821896B8;
	}
	return 0x821896B8;
} // Block from 821896ACh-821896B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821896B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821896B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821896B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821896B8);
		  /* 821896B8h */ case    0:  		/* li R6, 0 */
		/* 821896B8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821896B8h case    0:*/		return 0x821896BC;
		  /* 821896BCh */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 821896BCh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821896BCh case    1:*/		return 0x821896C0;
		  /* 821896C0h */ case    2:  		/* mr R4, R14 */
		/* 821896C0h case    2:*/		regs.R4 = regs.R14;
		/* 821896C0h case    2:*/		return 0x821896C4;
		  /* 821896C4h */ case    3:  		/* mr R3, R30 */
		/* 821896C4h case    3:*/		regs.R3 = regs.R30;
		/* 821896C4h case    3:*/		return 0x821896C8;
		  /* 821896C8h */ case    4:  		/* bl -116856 */
		/* 821896C8h case    4:*/		regs.LR = 0x821896CC; return 0x8216CE50;
		/* 821896C8h case    4:*/		return 0x821896CC;
		  /* 821896CCh */ case    5:  		/* lwz R15, <#[R1 + 108]> */
		/* 821896CCh case    5:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000006C) );
		/* 821896CCh case    5:*/		return 0x821896D0;
		  /* 821896D0h */ case    6:  		/* lwz R11, <#[R1 + 88]> */
		/* 821896D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821896D0h case    6:*/		return 0x821896D4;
		  /* 821896D4h */ case    7:  		/* li R17, 1 */
		/* 821896D4h case    7:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821896D4h case    7:*/		return 0x821896D8;
		  /* 821896D8h */ case    8:  		/* li R21, 0 */
		/* 821896D8h case    8:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821896D8h case    8:*/		return 0x821896DC;
	}
	return 0x821896DC;
} // Block from 821896B8h-821896DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821896DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821896DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821896DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821896DC);
		  /* 821896DCh */ case    0:  		/* lwz R10, <#[R30 + 668]> */
		/* 821896DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 821896DCh case    0:*/		return 0x821896E0;
		  /* 821896E0h */ case    1:  		/* addi R11, R11, 1 */
		/* 821896E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821896E0h case    1:*/		return 0x821896E4;
		  /* 821896E4h */ case    2:  		/* stw R11, <#[R1 + 88]> */
		/* 821896E4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821896E4h case    2:*/		return 0x821896E8;
		  /* 821896E8h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 821896E8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821896E8h case    3:*/		return 0x821896EC;
		  /* 821896ECh */ case    4:  		/* bc 12, CR6_LT, -3944 */
		/* 821896ECh case    4:*/		if ( regs.CR[6].lt ) { return 0x82188784;  }
		/* 821896ECh case    4:*/		return 0x821896F0;
	}
	return 0x821896F0;
} // Block from 821896DCh-821896F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821896F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821896F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821896F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821896F0);
		  /* 821896F0h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 821896F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 821896F0h case    0:*/		return 0x821896F4;
		  /* 821896F4h */ case    1:  		/* li R5, 0 */
		/* 821896F4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821896F4h case    1:*/		return 0x821896F8;
		  /* 821896F8h */ case    2:  		/* mr R3, R30 */
		/* 821896F8h case    2:*/		regs.R3 = regs.R30;
		/* 821896F8h case    2:*/		return 0x821896FC;
		  /* 821896FCh */ case    3:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821896FCh case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821896FCh case    3:*/		return 0x82189700;
		  /* 82189700h */ case    4:  		/* addi R11, R11, 63 */
		/* 82189700h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3F);
		/* 82189700h case    4:*/		return 0x82189704;
		  /* 82189704h */ case    5:  		/* rlwinm R4, R11, 29, 3, 28 */
		/* 82189704h case    5:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R4,regs.R11);
		/* 82189704h case    5:*/		return 0x82189708;
		  /* 82189708h */ case    6:  		/* bl -149200 */
		/* 82189708h case    6:*/		regs.LR = 0x8218970C; return 0x82165038;
		/* 82189708h case    6:*/		return 0x8218970C;
		  /* 8218970Ch */ case    7:  		/* stw R3, <#[R30 + 692]> */
		/* 8218970Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000002B4) );
		/* 8218970Ch case    7:*/		return 0x82189710;
		  /* 82189710h */ case    8:  		/* lwz R11, <#[R30 + 668]> */
		/* 82189710h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82189710h case    8:*/		return 0x82189714;
		  /* 82189714h */ case    9:  		/* li R5, 0 */
		/* 82189714h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82189714h case    9:*/		return 0x82189718;
		  /* 82189718h */ case   10:  		/* mr R3, R30 */
		/* 82189718h case   10:*/		regs.R3 = regs.R30;
		/* 82189718h case   10:*/		return 0x8218971C;
		  /* 8218971Ch */ case   11:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8218971Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8218971Ch case   11:*/		return 0x82189720;
		  /* 82189720h */ case   12:  		/* bl -149224 */
		/* 82189720h case   12:*/		regs.LR = 0x82189724; return 0x82165038;
		/* 82189720h case   12:*/		return 0x82189724;
		  /* 82189724h */ case   13:  		/* lwz R11, <#[R30 + 668]> */
		/* 82189724h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 82189724h case   13:*/		return 0x82189728;
		  /* 82189728h */ case   14:  		/* stw R3, <#[R30 + 688]> */
		/* 82189728h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189728h case   14:*/		return 0x8218972C;
		  /* 8218972Ch */ case   15:  		/* stw R21, <#[R1 + 112]> */
		/* 8218972Ch case   15:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000070) );
		/* 8218972Ch case   15:*/		return 0x82189730;
		  /* 82189730h */ case   16:  		/* cmplwi CR6, R11, 1 */
		/* 82189730h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82189730h case   16:*/		return 0x82189734;
		  /* 82189734h */ case   17:  		/* stw R17, <#[R1 + 88]> */
		/* 82189734h case   17:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000058) );
		/* 82189734h case   17:*/		return 0x82189738;
		  /* 82189738h */ case   18:  		/* bc 4, CR6_GT, 4500 */
		/* 82189738h case   18:*/		if ( !regs.CR[6].gt ) { return 0x8218A8CC;  }
		/* 82189738h case   18:*/		return 0x8218973C;
		  /* 8218973Ch */ case   19:  		/* lwz R11, <#[R1 + 88]> */
		/* 8218973Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8218973Ch case   19:*/		return 0x82189740;
		  /* 82189740h */ case   20:  		/* lwz R10, <#[R1 + 108]> */
		/* 82189740h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 82189740h case   20:*/		return 0x82189744;
		  /* 82189744h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82189744h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82189744h case   21:*/		return 0x82189748;
		  /* 82189748h */ case   22:  		/* add R16, R11, R10 */
		/* 82189748h case   22:*/		cpu::op::add<0>(regs,&regs.R16,regs.R11,regs.R10);
		/* 82189748h case   22:*/		return 0x8218974C;
		  /* 8218974Ch */ case   23:  		/* lwz R15, <#[R16]> */
		/* 8218974Ch case   23:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R16 + 0x00000000) );
		/* 8218974Ch case   23:*/		return 0x82189750;
		  /* 82189750h */ case   24:  		/* cmplwi CR6, R15, 0 */
		/* 82189750h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82189750h case   24:*/		return 0x82189754;
		  /* 82189754h */ case   25:  		/* bc 12, CR6_EQ, 4472 */
		/* 82189754h case   25:*/		if ( regs.CR[6].eq ) { return 0x8218A8CC;  }
		/* 82189754h case   25:*/		return 0x82189758;
		  /* 82189758h */ case   26:  		/* lwz R11, <#[R15 + 8]> */
		/* 82189758h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82189758h case   26:*/		return 0x8218975C;
		  /* 8218975Ch */ case   27:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8218975Ch case   27:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8218975Ch case   27:*/		return 0x82189760;
		  /* 82189760h */ case   28:  		/* cmplwi CR6, R10, 14336 */
		/* 82189760h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 82189760h case   28:*/		return 0x82189764;
		  /* 82189764h */ case   29:  		/* bc 4, CR6_EQ, 84 */
		/* 82189764h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821897B8;  }
		/* 82189764h case   29:*/		return 0x82189768;
		  /* 82189768h */ case   30:  		/* lhz R31, <#[R15 + 18]> */
		/* 82189768h case   30:*/		cpu::mem::load16z( regs, &regs.R31, (uint32)(regs.R15 + 0x00000012) );
		/* 82189768h case   30:*/		return 0x8218976C;
		  /* 8218976Ch */ case   31:  		/* mr R3, R30 */
		/* 8218976Ch case   31:*/		regs.R3 = regs.R30;
		/* 8218976Ch case   31:*/		return 0x82189770;
		  /* 82189770h */ case   32:  		/* mr R4, R31 */
		/* 82189770h case   32:*/		regs.R4 = regs.R31;
		/* 82189770h case   32:*/		return 0x82189774;
		  /* 82189774h */ case   33:  		/* bl -24084 */
		/* 82189774h case   33:*/		regs.LR = 0x82189778; return 0x82183960;
		/* 82189774h case   33:*/		return 0x82189778;
		  /* 82189778h */ case   34:  		/* lwz R11, <#[R30 + 688]> */
		/* 82189778h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189778h case   34:*/		return 0x8218977C;
		  /* 8218977Ch */ case   35:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8218977Ch case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8218977Ch case   35:*/		return 0x82189780;
		  /* 82189780h */ case   36:  		/* mr R29, R3 */
		/* 82189780h case   36:*/		regs.R29 = regs.R3;
		/* 82189780h case   36:*/		return 0x82189784;
		  /* 82189784h */ case   37:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82189784h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82189784h case   37:*/		return 0x82189788;
		  /* 82189788h */ case   38:  		/* cmpwi CR6, R11, 0 */
		/* 82189788h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82189788h case   38:*/		return 0x8218978C;
		  /* 8218978Ch */ case   39:  		/* bc 4, CR6_EQ, 4392 */
		/* 8218978Ch case   39:*/		if ( !regs.CR[6].eq ) { return 0x8218A8B4;  }
		/* 8218978Ch case   39:*/		return 0x82189790;
		  /* 82189790h */ case   40:  		/* mr R3, R30 */
		/* 82189790h case   40:*/		regs.R3 = regs.R30;
		/* 82189790h case   40:*/		return 0x82189794;
		  /* 82189794h */ case   41:  		/* bl -18404 */
		/* 82189794h case   41:*/		regs.LR = 0x82189798; return 0x82184FB0;
		/* 82189794h case   41:*/		return 0x82189798;
		  /* 82189798h */ case   42:  		/* mr R4, R3 */
		/* 82189798h case   42:*/		regs.R4 = regs.R3;
		/* 82189798h case   42:*/		return 0x8218979C;
		  /* 8218979Ch */ case   43:  		/* li R8, 0 */
		/* 8218979Ch case   43:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218979Ch case   43:*/		return 0x821897A0;
		  /* 821897A0h */ case   44:  		/* li R7, 0 */
		/* 821897A0h case   44:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821897A0h case   44:*/		return 0x821897A4;
		  /* 821897A4h */ case   45:  		/* mr R6, R29 */
		/* 821897A4h case   45:*/		regs.R6 = regs.R29;
		/* 821897A4h case   45:*/		return 0x821897A8;
		  /* 821897A8h */ case   46:  		/* mr R5, R31 */
		/* 821897A8h case   46:*/		regs.R5 = regs.R31;
		/* 821897A8h case   46:*/		return 0x821897AC;
		  /* 821897ACh */ case   47:  		/* mr R3, R30 */
		/* 821897ACh case   47:*/		regs.R3 = regs.R30;
		/* 821897ACh case   47:*/		return 0x821897B0;
		  /* 821897B0h */ case   48:  		/* bl -20432 */
		/* 821897B0h case   48:*/		regs.LR = 0x821897B4; return 0x821847E0;
		/* 821897B0h case   48:*/		return 0x821897B4;
		  /* 821897B4h */ case   49:  		/* b 4352 */
		/* 821897B4h case   49:*/		return 0x8218A8B4;
		/* 821897B4h case   49:*/		return 0x821897B8;
	}
	return 0x821897B8;
} // Block from 821896F0h-821897B8h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821897B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821897B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821897B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821897B8);
		  /* 821897B8h */ case    0:  		/* lwz R10, <#[R15 + 16]> */
		/* 821897B8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000010) );
		/* 821897B8h case    0:*/		return 0x821897BC;
		  /* 821897BCh */ case    1:  		/* rlwinm R20, R11, 31, 28, 31 */
		/* 821897BCh case    1:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R20,regs.R11);
		/* 821897BCh case    1:*/		return 0x821897C0;
		  /* 821897C0h */ case    2:  		/* li R18, 0 */
		/* 821897C0h case    2:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821897C0h case    2:*/		return 0x821897C4;
		  /* 821897C4h */ case    3:  		/* rlwinm R19, R10, 16, 29, 31 */
		/* 821897C4h case    3:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R19,regs.R10);
		/* 821897C4h case    3:*/		return 0x821897C8;
		  /* 821897C8h */ case    4:  		/* rlwinm R14, R10, 0, 16, 31 */
		/* 821897C8h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R14,regs.R10);
		/* 821897C8h case    4:*/		return 0x821897CC;
		  /* 821897CCh */ case    5:  		/* add R17, R14, R19 */
		/* 821897CCh case    5:*/		cpu::op::add<0>(regs,&regs.R17,regs.R14,regs.R19);
		/* 821897CCh case    5:*/		return 0x821897D0;
		  /* 821897D0h */ case    6:  		/* addi R11, R1, 100 */
		/* 821897D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x64);
		/* 821897D0h case    6:*/		return 0x821897D4;
		  /* 821897D4h */ case    7:  		/* li R10, 0 */
		/* 821897D4h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821897D4h case    7:*/		return 0x821897D8;
		  /* 821897D8h */ case    8:  		/* li R21, 1 */
		/* 821897D8h case    8:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821897D8h case    8:*/		return 0x821897DC;
		  /* 821897DCh */ case    9:  		/* mr R26, R14 */
		/* 821897DCh case    9:*/		regs.R26 = regs.R14;
		/* 821897DCh case    9:*/		return 0x821897E0;
		  /* 821897E0h */ case   10:  		/* cmplw CR6, R14, R17 */
		/* 821897E0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R17);
		/* 821897E0h case   10:*/		return 0x821897E4;
		  /* 821897E4h */ case   11:  		/* stw R10, <#[R11]> */
		/* 821897E4h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821897E4h case   11:*/		return 0x821897E8;
		  /* 821897E8h */ case   12:  		/* bc 4, CR6_LT, 336 */
		/* 821897E8h case   12:*/		if ( !regs.CR[6].lt ) { return 0x82189938;  }
		/* 821897E8h case   12:*/		return 0x821897EC;
		  /* 821897ECh */ case   13:  		/* li R22, 0 */
		/* 821897ECh case   13:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821897ECh case   13:*/		return 0x821897F0;
		  /* 821897F0h */ case   14:  		/* li R23, 0 */
		/* 821897F0h case   14:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821897F0h case   14:*/		return 0x821897F4;
		  /* 821897F4h */ case   15:  		/* and. R11, R21, R20 */
		/* 821897F4h case   15:*/		cpu::op::and<1>(regs,&regs.R11,regs.R21,regs.R20);
		/* 821897F4h case   15:*/		return 0x821897F8;
		  /* 821897F8h */ case   16:  		/* bc 12, CR0_EQ, 296 */
		/* 821897F8h case   16:*/		if ( regs.CR[0].eq ) { return 0x82189920;  }
		/* 821897F8h case   16:*/		return 0x821897FC;
		  /* 821897FCh */ case   17:  		/* mr R4, R26 */
		/* 821897FCh case   17:*/		regs.R4 = regs.R26;
		/* 821897FCh case   17:*/		return 0x82189800;
		  /* 82189800h */ case   18:  		/* mr R3, R30 */
		/* 82189800h case   18:*/		regs.R3 = regs.R30;
		/* 82189800h case   18:*/		return 0x82189804;
		  /* 82189804h */ case   19:  		/* bl -24228 */
		/* 82189804h case   19:*/		regs.LR = 0x82189808; return 0x82183960;
		/* 82189804h case   19:*/		return 0x82189808;
		  /* 82189808h */ case   20:  		/* lwz R11, <#[R30 + 688]> */
		/* 82189808h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189808h case   20:*/		return 0x8218980C;
		  /* 8218980Ch */ case   21:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8218980Ch case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8218980Ch case   21:*/		return 0x82189810;
		  /* 82189810h */ case   22:  		/* mr R25, R3 */
		/* 82189810h case   22:*/		regs.R25 = regs.R3;
		/* 82189810h case   22:*/		return 0x82189814;
		  /* 82189814h */ case   23:  		/* li R24, 1 */
		/* 82189814h case   23:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82189814h case   23:*/		return 0x82189818;
		  /* 82189818h */ case   24:  		/* mr R31, R14 */
		/* 82189818h case   24:*/		regs.R31 = regs.R14;
		/* 82189818h case   24:*/		return 0x8218981C;
		  /* 8218981Ch */ case   25:  		/* li R27, 0 */
		/* 8218981Ch case   25:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8218981Ch case   25:*/		return 0x82189820;
		  /* 82189820h */ case   26:  		/* lwzx R28, <#[R10 + R11]> */
		/* 82189820h case   26:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82189820h case   26:*/		return 0x82189824;
		  /* 82189824h */ case   27:  		/* li R29, 0 */
		/* 82189824h case   27:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82189824h case   27:*/		return 0x82189828;
		  /* 82189828h */ case   28:  		/* and. R11, R24, R20 */
		/* 82189828h case   28:*/		cpu::op::and<1>(regs,&regs.R11,regs.R24,regs.R20);
		/* 82189828h case   28:*/		return 0x8218982C;
		  /* 8218982Ch */ case   29:  		/* bc 12, CR0_EQ, 220 */
		/* 8218982Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x82189908;  }
		/* 8218982Ch case   29:*/		return 0x82189830;
		  /* 82189830h */ case   30:  		/* cmplw CR6, R26, R31 */
		/* 82189830h case   30:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R31);
		/* 82189830h case   30:*/		return 0x82189834;
		  /* 82189834h */ case   31:  		/* bc 12, CR6_EQ, 212 */
		/* 82189834h case   31:*/		if ( regs.CR[6].eq ) { return 0x82189908;  }
		/* 82189834h case   31:*/		return 0x82189838;
		  /* 82189838h */ case   32:  		/* mr R4, R31 */
		/* 82189838h case   32:*/		regs.R4 = regs.R31;
		/* 82189838h case   32:*/		return 0x8218983C;
		  /* 8218983Ch */ case   33:  		/* mr R3, R30 */
		/* 8218983Ch case   33:*/		regs.R3 = regs.R30;
		/* 8218983Ch case   33:*/		return 0x82189840;
		  /* 82189840h */ case   34:  		/* bl -24288 */
		/* 82189840h case   34:*/		regs.LR = 0x82189844; return 0x82183960;
		/* 82189840h case   34:*/		return 0x82189844;
		  /* 82189844h */ case   35:  		/* lwz R10, <#[R30 + 688]> */
		/* 82189844h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189844h case   35:*/		return 0x82189848;
		  /* 82189848h */ case   36:  		/* rlwinm R9, R3, 2, 0, 29 */
		/* 82189848h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R3);
		/* 82189848h case   36:*/		return 0x8218984C;
		  /* 8218984Ch */ case   37:  		/* mr R6, R3 */
		/* 8218984Ch case   37:*/		regs.R6 = regs.R3;
		/* 8218984Ch case   37:*/		return 0x82189850;
		  /* 82189850h */ case   38:  		/* li R11, 0 */
		/* 82189850h case   38:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82189850h case   38:*/		return 0x82189854;
		  /* 82189854h */ case   39:  		/* cmplwi CR6, R28, 0 */
		/* 82189854h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82189854h case   39:*/		return 0x82189858;
		  /* 82189858h */ case   40:  		/* lwzx R4, <#[R9 + R10]> */
		/* 82189858h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82189858h case   40:*/		return 0x8218985C;
		  /* 8218985Ch */ case   41:  		/* bc 12, CR6_EQ, 52 */
		/* 8218985Ch case   41:*/		if ( regs.CR[6].eq ) { return 0x82189890;  }
		/* 8218985Ch case   41:*/		return 0x82189860;
		  /* 82189860h */ case   42:  		/* cmplwi CR6, R4, 0 */
		/* 82189860h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82189860h case   42:*/		return 0x82189864;
		  /* 82189864h */ case   43:  		/* bc 12, CR6_EQ, 32 */
		/* 82189864h case   43:*/		if ( regs.CR[6].eq ) { return 0x82189884;  }
		/* 82189864h case   43:*/		return 0x82189868;
		  /* 82189868h */ case   44:  		/* cmplw CR6, R28, R4 */
		/* 82189868h case   44:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R4);
		/* 82189868h case   44:*/		return 0x8218986C;
		  /* 8218986Ch */ case   45:  		/* bc 12, CR6_EQ, 80 */
		/* 8218986Ch case   45:*/		if ( regs.CR[6].eq ) { return 0x821898BC;  }
		/* 8218986Ch case   45:*/		return 0x82189870;
		  /* 82189870h */ case   46:  		/* mr R5, R4 */
		/* 82189870h case   46:*/		regs.R5 = regs.R4;
		/* 82189870h case   46:*/		return 0x82189874;
		  /* 82189874h */ case   47:  		/* mr R4, R28 */
		/* 82189874h case   47:*/		regs.R4 = regs.R28;
		/* 82189874h case   47:*/		return 0x82189878;
		  /* 82189878h */ case   48:  		/* mr R3, R30 */
		/* 82189878h case   48:*/		regs.R3 = regs.R30;
		/* 82189878h case   48:*/		return 0x8218987C;
		  /* 8218987Ch */ case   49:  		/* bl -11692 */
		/* 8218987Ch case   49:*/		regs.LR = 0x82189880; return 0x82186AD0;
		/* 8218987Ch case   49:*/		return 0x82189880;
		  /* 82189880h */ case   50:  		/* b 40 */
		/* 82189880h case   50:*/		return 0x821898A8;
		/* 82189880h case   50:*/		return 0x82189884;
	}
	return 0x82189884;
} // Block from 821897B8h-82189884h (51 instructions)

//////////////////////////////////////////////////////
// Block at 82189884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189884);
		  /* 82189884h */ case    0:  		/* mr R5, R31 */
		/* 82189884h case    0:*/		regs.R5 = regs.R31;
		/* 82189884h case    0:*/		return 0x82189888;
		  /* 82189888h */ case    1:  		/* mr R4, R28 */
		/* 82189888h case    1:*/		regs.R4 = regs.R28;
		/* 82189888h case    1:*/		return 0x8218988C;
		  /* 8218988Ch */ case    2:  		/* b 20 */
		/* 8218988Ch case    2:*/		return 0x821898A0;
		/* 8218988Ch case    2:*/		return 0x82189890;
	}
	return 0x82189890;
} // Block from 82189884h-82189890h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82189890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189890);
		  /* 82189890h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 82189890h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82189890h case    0:*/		return 0x82189894;
		  /* 82189894h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82189894h case    1:*/		if ( regs.CR[6].eq ) { return 0x821898B8;  }
		/* 82189894h case    1:*/		return 0x82189898;
		  /* 82189898h */ case    2:  		/* mr R6, R25 */
		/* 82189898h case    2:*/		regs.R6 = regs.R25;
		/* 82189898h case    2:*/		return 0x8218989C;
		  /* 8218989Ch */ case    3:  		/* mr R5, R26 */
		/* 8218989Ch case    3:*/		regs.R5 = regs.R26;
		/* 8218989Ch case    3:*/		return 0x821898A0;
	}
	return 0x821898A0;
} // Block from 82189890h-821898A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821898A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821898A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821898A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821898A0);
		  /* 821898A0h */ case    0:  		/* mr R3, R30 */
		/* 821898A0h case    0:*/		regs.R3 = regs.R30;
		/* 821898A0h case    0:*/		return 0x821898A4;
		  /* 821898A4h */ case    1:  		/* bl -14836 */
		/* 821898A4h case    1:*/		regs.LR = 0x821898A8; return 0x82185EB0;
		/* 821898A4h case    1:*/		return 0x821898A8;
	}
	return 0x821898A8;
} // Block from 821898A0h-821898A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821898A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821898A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821898A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821898A8);
		  /* 821898A8h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821898A8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821898A8h case    0:*/		return 0x821898AC;
		  /* 821898ACh */ case    1:  		/* cntlzw R11, R11 */
		/* 821898ACh case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821898ACh case    1:*/		return 0x821898B0;
		  /* 821898B0h */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821898B0h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821898B0h case    2:*/		return 0x821898B4;
		  /* 821898B4h */ case    3:  		/* b 8 */
		/* 821898B4h case    3:*/		return 0x821898BC;
		/* 821898B4h case    3:*/		return 0x821898B8;
	}
	return 0x821898B8;
} // Block from 821898A8h-821898B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821898B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821898B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821898B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821898B8);
		  /* 821898B8h */ case    0:  		/* li R11, 0 */
		/* 821898B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821898B8h case    0:*/		return 0x821898BC;
	}
	return 0x821898BC;
} // Block from 821898B8h-821898BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821898BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821898BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821898BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821898BC);
		  /* 821898BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821898BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821898BCh case    0:*/		return 0x821898C0;
		  /* 821898C0h */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 821898C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82189908;  }
		/* 821898C0h case    1:*/		return 0x821898C4;
		  /* 821898C4h */ case    2:  		/* addi R11, R1, 100 */
		/* 821898C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x64);
		/* 821898C4h case    2:*/		return 0x821898C8;
		  /* 821898C8h */ case    3:  		/* rlwinm R10, R23, 29, 3, 29 */
		/* 821898C8h case    3:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R23);
		/* 821898C8h case    3:*/		return 0x821898CC;
		  /* 821898CCh */ case    4:  		/* li R8, 1 */
		/* 821898CCh case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821898CCh case    4:*/		return 0x821898D0;
		  /* 821898D0h */ case    5:  		/* rlwinm R9, R23, 0, 27, 31 */
		/* 821898D0h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R23);
		/* 821898D0h case    5:*/		return 0x821898D4;
		  /* 821898D4h */ case    6:  		/* slw R7, R8, R27 */
		/* 821898D4h case    6:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R8,regs.R27);
		/* 821898D4h case    6:*/		return 0x821898D8;
		  /* 821898D8h */ case    7:  		/* lwzx R6, <#[R10 + R11]> */
		/* 821898D8h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821898D8h case    7:*/		return 0x821898DC;
		  /* 821898DCh */ case    8:  		/* slw R9, R7, R9 */
		/* 821898DCh case    8:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821898DCh case    8:*/		return 0x821898E0;
		  /* 821898E0h */ case    9:  		/* or R7, R9, R6 */
		/* 821898E0h case    9:*/		cpu::op::or<0>(regs,&regs.R7,regs.R9,regs.R6);
		/* 821898E0h case    9:*/		return 0x821898E4;
		  /* 821898E4h */ case   10:  		/* rlwinm R9, R29, 29, 3, 29 */
		/* 821898E4h case   10:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R29);
		/* 821898E4h case   10:*/		return 0x821898E8;
		  /* 821898E8h */ case   11:  		/* stwx R7, <#[R10 + R11]> */
		/* 821898E8h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821898E8h case   11:*/		return 0x821898EC;
		  /* 821898ECh */ case   12:  		/* addi R11, R1, 100 */
		/* 821898ECh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x64);
		/* 821898ECh case   12:*/		return 0x821898F0;
		  /* 821898F0h */ case   13:  		/* slw R8, R8, R22 */
		/* 821898F0h case   13:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R22);
		/* 821898F0h case   13:*/		return 0x821898F4;
		  /* 821898F4h */ case   14:  		/* rlwinm R10, R29, 0, 27, 31 */
		/* 821898F4h case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R29);
		/* 821898F4h case   14:*/		return 0x821898F8;
		  /* 821898F8h */ case   15:  		/* slw R10, R8, R10 */
		/* 821898F8h case   15:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821898F8h case   15:*/		return 0x821898FC;
		  /* 821898FCh */ case   16:  		/* lwzx R8, <#[R9 + R11]> */
		/* 821898FCh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821898FCh case   16:*/		return 0x82189900;
		  /* 82189900h */ case   17:  		/* or R10, R10, R8 */
		/* 82189900h case   17:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82189900h case   17:*/		return 0x82189904;
		  /* 82189904h */ case   18:  		/* stwx R10, <#[R9 + R11]> */
		/* 82189904h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82189904h case   18:*/		return 0x82189908;
	}
	return 0x82189908;
} // Block from 821898BCh-82189908h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82189908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189908);
		  /* 82189908h */ case    0:  		/* addi R31, R31, 1 */
		/* 82189908h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82189908h case    0:*/		return 0x8218990C;
		  /* 8218990Ch */ case    1:  		/* addi R29, R29, 4 */
		/* 8218990Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8218990Ch case    1:*/		return 0x82189910;
		  /* 82189910h */ case    2:  		/* addi R27, R27, 1 */
		/* 82189910h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82189910h case    2:*/		return 0x82189914;
		  /* 82189914h */ case    3:  		/* rlwinm R24, R24, 1, 0, 30 */
		/* 82189914h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R24,regs.R24);
		/* 82189914h case    3:*/		return 0x82189918;
		  /* 82189918h */ case    4:  		/* cmplw CR6, R31, R17 */
		/* 82189918h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R17);
		/* 82189918h case    4:*/		return 0x8218991C;
		  /* 8218991Ch */ case    5:  		/* bc 12, CR6_LT, -244 */
		/* 8218991Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x82189828;  }
		/* 8218991Ch case    5:*/		return 0x82189920;
	}
	return 0x82189920;
} // Block from 82189908h-82189920h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82189920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189920);
		  /* 82189920h */ case    0:  		/* addi R26, R26, 1 */
		/* 82189920h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82189920h case    0:*/		return 0x82189924;
		  /* 82189924h */ case    1:  		/* addi R22, R22, 1 */
		/* 82189924h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82189924h case    1:*/		return 0x82189928;
		  /* 82189928h */ case    2:  		/* addi R23, R23, 4 */
		/* 82189928h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 82189928h case    2:*/		return 0x8218992C;
		  /* 8218992Ch */ case    3:  		/* rlwinm R21, R21, 1, 0, 30 */
		/* 8218992Ch case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R21,regs.R21);
		/* 8218992Ch case    3:*/		return 0x82189930;
		  /* 82189930h */ case    4:  		/* cmplw CR6, R26, R17 */
		/* 82189930h case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R17);
		/* 82189930h case    4:*/		return 0x82189934;
		  /* 82189934h */ case    5:  		/* bc 12, CR6_LT, -320 */
		/* 82189934h case    5:*/		if ( regs.CR[6].lt ) { return 0x821897F4;  }
		/* 82189934h case    5:*/		return 0x82189938;
	}
	return 0x82189938;
} // Block from 82189920h-82189938h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82189938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189938);
		  /* 82189938h */ case    0:  		/* li R6, -1 */
		/* 82189938h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 82189938h case    0:*/		return 0x8218993C;
		  /* 8218993Ch */ case    1:  		/* li R7, 1 */
		/* 8218993Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8218993Ch case    1:*/		return 0x82189940;
		  /* 82189940h */ case    2:  		/* mr R9, R6 */
		/* 82189940h case    2:*/		regs.R9 = regs.R6;
		/* 82189940h case    2:*/		return 0x82189944;
		  /* 82189944h */ case    3:  		/* mr R29, R6 */
		/* 82189944h case    3:*/		regs.R29 = regs.R6;
		/* 82189944h case    3:*/		return 0x82189948;
		  /* 82189948h */ case    4:  		/* li R8, 0 */
		/* 82189948h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82189948h case    4:*/		return 0x8218994C;
		  /* 8218994Ch */ case    5:  		/* cmplwi CR6, R19, 0 */
		/* 8218994Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 8218994Ch case    5:*/		return 0x82189950;
		  /* 82189950h */ case    6:  		/* bc 12, CR6_EQ, 144 */
		/* 82189950h case    6:*/		if ( regs.CR[6].eq ) { return 0x821899E0;  }
		/* 82189950h case    6:*/		return 0x82189954;
		  /* 82189954h */ case    7:  		/* li R11, 0 */
		/* 82189954h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82189954h case    7:*/		return 0x82189958;
		  /* 82189958h */ case    8:  		/* mtspr CTR, R19 */
		/* 82189958h case    8:*/		regs.CTR = regs.R19;
		/* 82189958h case    8:*/		return 0x8218995C;
		  /* 8218995Ch */ case    9:  		/* and. R10, R7, R20 */
		/* 8218995Ch case    9:*/		cpu::op::and<1>(regs,&regs.R10,regs.R7,regs.R20);
		/* 8218995Ch case    9:*/		return 0x82189960;
		  /* 82189960h */ case   10:  		/* bc 12, CR0_EQ, 112 */
		/* 82189960h case   10:*/		if ( regs.CR[0].eq ) { return 0x821899D0;  }
		/* 82189960h case   10:*/		return 0x82189964;
		  /* 82189964h */ case   11:  		/* addi R10, R11, 3 */
		/* 82189964h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 82189964h case   11:*/		return 0x82189968;
		  /* 82189968h */ case   12:  		/* addi R4, R1, 100 */
		/* 82189968h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x64);
		/* 82189968h case   12:*/		return 0x8218996C;
		  /* 8218996Ch */ case   13:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8218996Ch case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8218996Ch case   13:*/		return 0x82189970;
		  /* 82189970h */ case   14:  		/* li R3, 2 */
		/* 82189970h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 82189970h case   14:*/		return 0x82189974;
		  /* 82189974h */ case   15:  		/* rlwinm R5, R11, 29, 3, 29 */
		/* 82189974h case   15:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R5,regs.R11);
		/* 82189974h case   15:*/		return 0x82189978;
		  /* 82189978h */ case   16:  		/* slw R10, R3, R10 */
		/* 82189978h case   16:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R3,regs.R10);
		/* 82189978h case   16:*/		return 0x8218997C;
		  /* 8218997Ch */ case   17:  		/* lwzx R5, <#[R5 + R4]> */
		/* 8218997Ch case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 8218997Ch case   17:*/		return 0x82189980;
		  /* 82189980h */ case   18:  		/* addi R10, R10, -1 */
		/* 82189980h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82189980h case   18:*/		return 0x82189984;
		  /* 82189984h */ case   19:  		/* rlwinm R31, R11, 0, 27, 31 */
		/* 82189984h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R11);
		/* 82189984h case   19:*/		return 0x82189988;
		  /* 82189988h */ case   20:  		/* and R10, R10, R5 */
		/* 82189988h case   20:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82189988h case   20:*/		return 0x8218998C;
		  /* 8218998Ch */ case   21:  		/* slw R4, R6, R31 */
		/* 8218998Ch case   21:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R6,regs.R31);
		/* 8218998Ch case   21:*/		return 0x82189990;
		  /* 82189990h */ case   22:  		/* and R10, R10, R4 */
		/* 82189990h case   22:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82189990h case   22:*/		return 0x82189994;
		  /* 82189994h */ case   23:  		/* lis R5, -28311 */
		/* 82189994h case   23:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF9169);
		/* 82189994h case   23:*/		return 0x82189998;
		  /* 82189998h */ case   24:  		/* lis R3, 0 */
		/* 82189998h case   24:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 82189998h case   24:*/		return 0x8218999C;
		  /* 8218999Ch */ case   25:  		/* ori R5, R5, 5192 */
		/* 8218999Ch case   25:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1448);
		/* 8218999Ch case   25:*/		return 0x821899A0;
		  /* 821899A0h */ case   26:  		/* srw R10, R10, R31 */
		/* 821899A0h case   26:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821899A0h case   26:*/		return 0x821899A4;
		  /* 821899A4h */ case   27:  		/* ori R4, R3, 36262 */
		/* 821899A4h case   27:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R3,0x8DA6);
		/* 821899A4h case   27:*/		return 0x821899A8;
		  /* 821899A8h */ case   28:  		/* rldicl R10, R10, 0, 32 */
		/* 821899A8h case   28:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 821899A8h case   28:*/		return 0x821899AC;
		  /* 821899ACh */ case   29:  		/* rldimi R5, R4, 32, 0 */
		/* 821899ACh case   29:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R5,regs.R4);
		/* 821899ACh case   29:*/		return 0x821899B0;
		  /* 821899B0h */ case   30:  		/* srd R5, R5, R10 */
		/* 821899B0h case   30:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R5,regs.R10);
		/* 821899B0h case   30:*/		return 0x821899B4;
		  /* 821899B4h */ case   31:  		/* srd R5, R5, R10 */
		/* 821899B4h case   31:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R5,regs.R10);
		/* 821899B4h case   31:*/		return 0x821899B8;
		  /* 821899B8h */ case   32:  		/* srd R10, R5, R10 */
		/* 821899B8h case   32:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 821899B8h case   32:*/		return 0x821899BC;
		  /* 821899BCh */ case   33:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 821899BCh case   33:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821899BCh case   33:*/		return 0x821899C0;
		  /* 821899C0h */ case   34:  		/* cmplw CR6, R10, R9 */
		/* 821899C0h case   34:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821899C0h case   34:*/		return 0x821899C4;
		  /* 821899C4h */ case   35:  		/* bc 4, CR6_LT, 12 */
		/* 821899C4h case   35:*/		if ( !regs.CR[6].lt ) { return 0x821899D0;  }
		/* 821899C4h case   35:*/		return 0x821899C8;
		  /* 821899C8h */ case   36:  		/* mr R9, R10 */
		/* 821899C8h case   36:*/		regs.R9 = regs.R10;
		/* 821899C8h case   36:*/		return 0x821899CC;
		  /* 821899CCh */ case   37:  		/* mr R29, R8 */
		/* 821899CCh case   37:*/		regs.R29 = regs.R8;
		/* 821899CCh case   37:*/		return 0x821899D0;
	}
	return 0x821899D0;
} // Block from 82189938h-821899D0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821899D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821899D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821899D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821899D0);
		  /* 821899D0h */ case    0:  		/* addi R8, R8, 1 */
		/* 821899D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821899D0h case    0:*/		return 0x821899D4;
		  /* 821899D4h */ case    1:  		/* addi R11, R11, 4 */
		/* 821899D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821899D4h case    1:*/		return 0x821899D8;
		  /* 821899D8h */ case    2:  		/* rlwinm R7, R7, 1, 0, 30 */
		/* 821899D8h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R7);
		/* 821899D8h case    2:*/		return 0x821899DC;
		  /* 821899DCh */ case    3:  		/* bc 16, CR0_LT, -128 */
		/* 821899DCh case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218995C;  }
		/* 821899DCh case    3:*/		return 0x821899E0;
	}
	return 0x821899E0;
} // Block from 821899D0h-821899E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821899E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821899E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821899E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821899E0);
		  /* 821899E0h */ case    0:  		/* add R28, R29, R14 */
		/* 821899E0h case    0:*/		cpu::op::add<0>(regs,&regs.R28,regs.R29,regs.R14);
		/* 821899E0h case    0:*/		return 0x821899E4;
		  /* 821899E4h */ case    1:  		/* mr R3, R30 */
		/* 821899E4h case    1:*/		regs.R3 = regs.R30;
		/* 821899E4h case    1:*/		return 0x821899E8;
		  /* 821899E8h */ case    2:  		/* mr R4, R28 */
		/* 821899E8h case    2:*/		regs.R4 = regs.R28;
		/* 821899E8h case    2:*/		return 0x821899EC;
		  /* 821899ECh */ case    3:  		/* bl -24716 */
		/* 821899ECh case    3:*/		regs.LR = 0x821899F0; return 0x82183960;
		/* 821899ECh case    3:*/		return 0x821899F0;
		  /* 821899F0h */ case    4:  		/* lwz R11, <#[R30 + 688]> */
		/* 821899F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 821899F0h case    4:*/		return 0x821899F4;
		  /* 821899F4h */ case    5:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 821899F4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 821899F4h case    5:*/		return 0x821899F8;
		  /* 821899F8h */ case    6:  		/* lwzx R31, <#[R10 + R11]> */
		/* 821899F8h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821899F8h case    6:*/		return 0x821899FC;
		  /* 821899FCh */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821899FCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821899FCh case    7:*/		return 0x82189A00;
		  /* 82189A00h */ case    8:  		/* bc 4, CR6_EQ, 56 */
		/* 82189A00h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82189A38;  }
		/* 82189A00h case    8:*/		return 0x82189A04;
		  /* 82189A04h */ case    9:  		/* mr R3, R30 */
		/* 82189A04h case    9:*/		regs.R3 = regs.R30;
		/* 82189A04h case    9:*/		return 0x82189A08;
		  /* 82189A08h */ case   10:  		/* bl -19032 */
		/* 82189A08h case   10:*/		regs.LR = 0x82189A0C; return 0x82184FB0;
		/* 82189A08h case   10:*/		return 0x82189A0C;
		  /* 82189A0Ch */ case   11:  		/* mr R31, R3 */
		/* 82189A0Ch case   11:*/		regs.R31 = regs.R3;
		/* 82189A0Ch case   11:*/		return 0x82189A10;
		  /* 82189A10h */ case   12:  		/* mr R4, R28 */
		/* 82189A10h case   12:*/		regs.R4 = regs.R28;
		/* 82189A10h case   12:*/		return 0x82189A14;
		  /* 82189A14h */ case   13:  		/* mr R3, R30 */
		/* 82189A14h case   13:*/		regs.R3 = regs.R30;
		/* 82189A14h case   13:*/		return 0x82189A18;
		  /* 82189A18h */ case   14:  		/* bl -24760 */
		/* 82189A18h case   14:*/		regs.LR = 0x82189A1C; return 0x82183960;
		/* 82189A18h case   14:*/		return 0x82189A1C;
		  /* 82189A1Ch */ case   15:  		/* mr R6, R3 */
		/* 82189A1Ch case   15:*/		regs.R6 = regs.R3;
		/* 82189A1Ch case   15:*/		return 0x82189A20;
		  /* 82189A20h */ case   16:  		/* mr R5, R28 */
		/* 82189A20h case   16:*/		regs.R5 = regs.R28;
		/* 82189A20h case   16:*/		return 0x82189A24;
		  /* 82189A24h */ case   17:  		/* mr R4, R31 */
		/* 82189A24h case   17:*/		regs.R4 = regs.R31;
		/* 82189A24h case   17:*/		return 0x82189A28;
		  /* 82189A28h */ case   18:  		/* mr R3, R30 */
		/* 82189A28h case   18:*/		regs.R3 = regs.R30;
		/* 82189A28h case   18:*/		return 0x82189A2C;
		  /* 82189A2Ch */ case   19:  		/* li R7, 0 */
		/* 82189A2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82189A2Ch case   19:*/		return 0x82189A30;
		  /* 82189A30h */ case   20:  		/* li R8, 0 */
		/* 82189A30h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82189A30h case   20:*/		return 0x82189A34;
		  /* 82189A34h */ case   21:  		/* bl -21076 */
		/* 82189A34h case   21:*/		regs.LR = 0x82189A38; return 0x821847E0;
		/* 82189A34h case   21:*/		return 0x82189A38;
	}
	return 0x82189A38;
} // Block from 821899E0h-82189A38h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82189A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189A38);
		  /* 82189A38h */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82189A38h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82189A38h case    0:*/		return 0x82189A3C;
		  /* 82189A3Ch */ case    1:  		/* addi R9, R1, 100 */
		/* 82189A3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 82189A3Ch case    1:*/		return 0x82189A40;
		  /* 82189A40h */ case    2:  		/* addi R11, R11, 3 */
		/* 82189A40h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82189A40h case    2:*/		return 0x82189A44;
		  /* 82189A44h */ case    3:  		/* rlwinm R10, R29, 31, 3, 29 */
		/* 82189A44h case    3:*/		cpu::op::rlwinm<0,31,3,29>(regs,&regs.R10,regs.R29);
		/* 82189A44h case    3:*/		return 0x82189A48;
		  /* 82189A48h */ case    4:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 82189A48h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82189A48h case    4:*/		return 0x82189A4C;
		  /* 82189A4Ch */ case    5:  		/* li R8, 2 */
		/* 82189A4Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 82189A4Ch case    5:*/		return 0x82189A50;
		  /* 82189A50h */ case    6:  		/* rlwinm R7, R29, 2, 27, 29 */
		/* 82189A50h case    6:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R7,regs.R29);
		/* 82189A50h case    6:*/		return 0x82189A54;
		  /* 82189A54h */ case    7:  		/* slw R11, R8, R11 */
		/* 82189A54h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82189A54h case    7:*/		return 0x82189A58;
		  /* 82189A58h */ case    8:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82189A58h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82189A58h case    8:*/		return 0x82189A5C;
		  /* 82189A5Ch */ case    9:  		/* addi R11, R11, -1 */
		/* 82189A5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82189A5Ch case    9:*/		return 0x82189A60;
		  /* 82189A60h */ case   10:  		/* li R9, -1 */
		/* 82189A60h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 82189A60h case   10:*/		return 0x82189A64;
		  /* 82189A64h */ case   11:  		/* and R11, R11, R10 */
		/* 82189A64h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82189A64h case   11:*/		return 0x82189A68;
		  /* 82189A68h */ case   12:  		/* slw R10, R9, R7 */
		/* 82189A68h case   12:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R7);
		/* 82189A68h case   12:*/		return 0x82189A6C;
		  /* 82189A6Ch */ case   13:  		/* and R11, R11, R10 */
		/* 82189A6Ch case   13:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82189A6Ch case   13:*/		return 0x82189A70;
		  /* 82189A70h */ case   14:  		/* srw R11, R11, R7 */
		/* 82189A70h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82189A70h case   14:*/		return 0x82189A74;
		  /* 82189A74h */ case   15:  		/* andc. R27, R20, R11 */
		/* 82189A74h case   15:*/		cpu::op::andc<1>(regs,&regs.R27,regs.R20,regs.R11);
		/* 82189A74h case   15:*/		return 0x82189A78;
		  /* 82189A78h */ case   16:  		/* bc 12, CR0_EQ, 204 */
		/* 82189A78h case   16:*/		if ( regs.CR[0].eq ) { return 0x82189B44;  }
		/* 82189A78h case   16:*/		return 0x82189A7C;
		  /* 82189A7Ch */ case   17:  		/* addi R11, R27, -1 */
		/* 82189A7Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 82189A7Ch case   17:*/		return 0x82189A80;
		  /* 82189A80h */ case   18:  		/* mr R3, R30 */
		/* 82189A80h case   18:*/		regs.R3 = regs.R30;
		/* 82189A80h case   18:*/		return 0x82189A84;
		  /* 82189A84h */ case   19:  		/* andc R29, R27, R11 */
		/* 82189A84h case   19:*/		cpu::op::andc<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 82189A84h case   19:*/		return 0x82189A88;
		  /* 82189A88h */ case   20:  		/* cntlzw R11, R29 */
		/* 82189A88h case   20:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R29);
		/* 82189A88h case   20:*/		return 0x82189A8C;
		  /* 82189A8Ch */ case   21:  		/* subf R27, R29, R27 */
		/* 82189A8Ch case   21:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R29,regs.R27);
		/* 82189A8Ch case   21:*/		return 0x82189A90;
		  /* 82189A90h */ case   22:  		/* subf R11, R11, R14 */
		/* 82189A90h case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R14);
		/* 82189A90h case   22:*/		return 0x82189A94;
		  /* 82189A94h */ case   23:  		/* addi R26, R11, 31 */
		/* 82189A94h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1F);
		/* 82189A94h case   23:*/		return 0x82189A98;
		  /* 82189A98h */ case   24:  		/* mr R4, R26 */
		/* 82189A98h case   24:*/		regs.R4 = regs.R26;
		/* 82189A98h case   24:*/		return 0x82189A9C;
		  /* 82189A9Ch */ case   25:  		/* bl -24892 */
		/* 82189A9Ch case   25:*/		regs.LR = 0x82189AA0; return 0x82183960;
		/* 82189A9Ch case   25:*/		return 0x82189AA0;
		  /* 82189AA0h */ case   26:  		/* lwz R11, <#[R30 + 688]> */
		/* 82189AA0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189AA0h case   26:*/		return 0x82189AA4;
		  /* 82189AA4h */ case   27:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82189AA4h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82189AA4h case   27:*/		return 0x82189AA8;
		  /* 82189AA8h */ case   28:  		/* mr R25, R3 */
		/* 82189AA8h case   28:*/		regs.R25 = regs.R3;
		/* 82189AA8h case   28:*/		return 0x82189AAC;
		  /* 82189AACh */ case   29:  		/* lwzx R28, <#[R10 + R11]> */
		/* 82189AACh case   29:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82189AACh case   29:*/		return 0x82189AB0;
		  /* 82189AB0h */ case   30:  		/* cmplw CR6, R28, R31 */
		/* 82189AB0h case   30:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R31);
		/* 82189AB0h case   30:*/		return 0x82189AB4;
		  /* 82189AB4h */ case   31:  		/* bc 12, CR6_EQ, 132 */
		/* 82189AB4h case   31:*/		if ( regs.CR[6].eq ) { return 0x82189B38;  }
		/* 82189AB4h case   31:*/		return 0x82189AB8;
		  /* 82189AB8h */ case   32:  		/* cmplwi CR6, R28, 0 */
		/* 82189AB8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82189AB8h case   32:*/		return 0x82189ABC;
		  /* 82189ABCh */ case   33:  		/* mr R4, R31 */
		/* 82189ABCh case   33:*/		regs.R4 = regs.R31;
		/* 82189ABCh case   33:*/		return 0x82189AC0;
		  /* 82189AC0h */ case   34:  		/* mr R3, R30 */
		/* 82189AC0h case   34:*/		regs.R3 = regs.R30;
		/* 82189AC0h case   34:*/		return 0x82189AC4;
		  /* 82189AC4h */ case   35:  		/* bc 12, CR6_EQ, 72 */
		/* 82189AC4h case   35:*/		if ( regs.CR[6].eq ) { return 0x82189B0C;  }
		/* 82189AC4h case   35:*/		return 0x82189AC8;
		  /* 82189AC8h */ case   36:  		/* mr R5, R28 */
		/* 82189AC8h case   36:*/		regs.R5 = regs.R28;
		/* 82189AC8h case   36:*/		return 0x82189ACC;
		  /* 82189ACCh */ case   37:  		/* bl -12284 */
		/* 82189ACCh case   37:*/		regs.LR = 0x82189AD0; return 0x82186AD0;
		/* 82189ACCh case   37:*/		return 0x82189AD0;
		  /* 82189AD0h */ case   38:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82189AD0h case   38:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82189AD0h case   38:*/		return 0x82189AD4;
		  /* 82189AD4h */ case   39:  		/* bc 12, CR0_EQ, 104 */
		/* 82189AD4h case   39:*/		if ( regs.CR[0].eq ) { return 0x82189B3C;  }
		/* 82189AD4h case   39:*/		return 0x82189AD8;
		  /* 82189AD8h */ case   40:  		/* addi R11, R1, 124 */
		/* 82189AD8h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x7C);
		/* 82189AD8h case   40:*/		return 0x82189ADC;
		  /* 82189ADCh */ case   41:  		/* li R7, 0 */
		/* 82189ADCh case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82189ADCh case   41:*/		return 0x82189AE0;
		  /* 82189AE0h */ case   42:  		/* li R10, 0 */
		/* 82189AE0h case   42:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82189AE0h case   42:*/		return 0x82189AE4;
		  /* 82189AE4h */ case   43:  		/* li R9, 0 */
		/* 82189AE4h case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82189AE4h case   43:*/		return 0x82189AE8;
		  /* 82189AE8h */ case   44:  		/* li R8, 0 */
		/* 82189AE8h case   44:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82189AE8h case   44:*/		return 0x82189AEC;
		  /* 82189AECh */ case   45:  		/* stw R7, <#[R11]> */
		/* 82189AECh case   45:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82189AECh case   45:*/		return 0x82189AF0;
		  /* 82189AF0h */ case   46:  		/* mr R5, R28 */
		/* 82189AF0h case   46:*/		regs.R5 = regs.R28;
		/* 82189AF0h case   46:*/		return 0x82189AF4;
		  /* 82189AF4h */ case   47:  		/* mr R4, R31 */
		/* 82189AF4h case   47:*/		regs.R4 = regs.R31;
		/* 82189AF4h case   47:*/		return 0x82189AF8;
		  /* 82189AF8h */ case   48:  		/* mr R3, R30 */
		/* 82189AF8h case   48:*/		regs.R3 = regs.R30;
		/* 82189AF8h case   48:*/		return 0x82189AFC;
		  /* 82189AFCh */ case   49:  		/* lwz R6, <#[R1 + 124]> */
		/* 82189AFCh case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000007C) );
		/* 82189AFCh case   49:*/		return 0x82189B00;
		  /* 82189B00h */ case   50:  		/* bl -12936 */
		/* 82189B00h case   50:*/		regs.LR = 0x82189B04; return 0x82186878;
		/* 82189B00h case   50:*/		return 0x82189B04;
		  /* 82189B04h */ case   51:  		/* mr R31, R3 */
		/* 82189B04h case   51:*/		regs.R31 = regs.R3;
		/* 82189B04h case   51:*/		return 0x82189B08;
		  /* 82189B08h */ case   52:  		/* b 48 */
		/* 82189B08h case   52:*/		return 0x82189B38;
		/* 82189B08h case   52:*/		return 0x82189B0C;
	}
	return 0x82189B0C;
} // Block from 82189A38h-82189B0Ch (53 instructions)

//////////////////////////////////////////////////////
// Block at 82189B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189B0C);
		  /* 82189B0Ch */ case    0:  		/* mr R6, R25 */
		/* 82189B0Ch case    0:*/		regs.R6 = regs.R25;
		/* 82189B0Ch case    0:*/		return 0x82189B10;
		  /* 82189B10h */ case    1:  		/* mr R5, R26 */
		/* 82189B10h case    1:*/		regs.R5 = regs.R26;
		/* 82189B10h case    1:*/		return 0x82189B14;
		  /* 82189B14h */ case    2:  		/* bl -15460 */
		/* 82189B14h case    2:*/		regs.LR = 0x82189B18; return 0x82185EB0;
		/* 82189B14h case    2:*/		return 0x82189B18;
		  /* 82189B18h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82189B18h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82189B18h case    3:*/		return 0x82189B1C;
		  /* 82189B1Ch */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 82189B1Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82189B3C;  }
		/* 82189B1Ch case    4:*/		return 0x82189B20;
		  /* 82189B20h */ case    5:  		/* li R7, 0 */
		/* 82189B20h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82189B20h case    5:*/		return 0x82189B24;
		  /* 82189B24h */ case    6:  		/* mr R6, R25 */
		/* 82189B24h case    6:*/		regs.R6 = regs.R25;
		/* 82189B24h case    6:*/		return 0x82189B28;
		  /* 82189B28h */ case    7:  		/* mr R5, R26 */
		/* 82189B28h case    7:*/		regs.R5 = regs.R26;
		/* 82189B28h case    7:*/		return 0x82189B2C;
		  /* 82189B2Ch */ case    8:  		/* mr R4, R31 */
		/* 82189B2Ch case    8:*/		regs.R4 = regs.R31;
		/* 82189B2Ch case    8:*/		return 0x82189B30;
		  /* 82189B30h */ case    9:  		/* mr R3, R30 */
		/* 82189B30h case    9:*/		regs.R3 = regs.R30;
		/* 82189B30h case    9:*/		return 0x82189B34;
		  /* 82189B34h */ case   10:  		/* bl -17844 */
		/* 82189B34h case   10:*/		regs.LR = 0x82189B38; return 0x82185580;
		/* 82189B34h case   10:*/		return 0x82189B38;
	}
	return 0x82189B38;
} // Block from 82189B0Ch-82189B38h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82189B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189B38);
		  /* 82189B38h */ case    0:  		/* subf R20, R29, R20 */
		/* 82189B38h case    0:*/		cpu::op::subf<0>(regs,&regs.R20,regs.R29,regs.R20);
		/* 82189B38h case    0:*/		return 0x82189B3C;
	}
	return 0x82189B3C;
} // Block from 82189B38h-82189B3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82189B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189B3C);
		  /* 82189B3Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82189B3Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82189B3Ch case    0:*/		return 0x82189B40;
		  /* 82189B40h */ case    1:  		/* bc 4, CR6_EQ, -196 */
		/* 82189B40h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82189A7C;  }
		/* 82189B40h case    1:*/		return 0x82189B44;
	}
	return 0x82189B44;
} // Block from 82189B3Ch-82189B44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189B44);
		  /* 82189B44h */ case    0:  		/* addi R18, R18, 1 */
		/* 82189B44h case    0:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 82189B44h case    0:*/		return 0x82189B48;
		  /* 82189B48h */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 82189B48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82189B48h case    1:*/		return 0x82189B4C;
		  /* 82189B4Ch */ case    2:  		/* bc 4, CR6_EQ, -892 */
		/* 82189B4Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821897D0;  }
		/* 82189B4Ch case    2:*/		return 0x82189B50;
		  /* 82189B50h */ case    3:  		/* lwz R11, <#[R15 + 8]> */
		/* 82189B50h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82189B50h case    3:*/		return 0x82189B54;
		  /* 82189B54h */ case    4:  		/* cmplwi CR6, R18, 1 */
		/* 82189B54h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000001);
		/* 82189B54h case    4:*/		return 0x82189B58;
		  /* 82189B58h */ case    5:  		/* bc 4, CR6_GT, 640 */
		/* 82189B58h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82189DD8;  }
		/* 82189B58h case    5:*/		return 0x82189B5C;
		  /* 82189B5Ch */ case    6:  		/* lwz R22, <#[R1 + 88]> */
		/* 82189B5Ch case    6:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000058) );
		/* 82189B5Ch case    6:*/		return 0x82189B60;
		  /* 82189B60h */ case    7:  		/* rlwinm R24, R11, 31, 28, 31 */
		/* 82189B60h case    7:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R24,regs.R11);
		/* 82189B60h case    7:*/		return 0x82189B64;
		  /* 82189B64h */ case    8:  		/* li R23, 1 */
		/* 82189B64h case    8:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82189B64h case    8:*/		return 0x82189B68;
		  /* 82189B68h */ case    9:  		/* li R27, 0 */
		/* 82189B68h case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82189B68h case    9:*/		return 0x82189B6C;
		  /* 82189B6Ch */ case   10:  		/* li R28, 0 */
		/* 82189B6Ch case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82189B6Ch case   10:*/		return 0x82189B70;
		  /* 82189B70h */ case   11:  		/* mr R31, R23 */
		/* 82189B70h case   11:*/		regs.R31 = regs.R23;
		/* 82189B70h case   11:*/		return 0x82189B74;
		  /* 82189B74h */ case   12:  		/* mr R29, R14 */
		/* 82189B74h case   12:*/		regs.R29 = regs.R14;
		/* 82189B74h case   12:*/		return 0x82189B78;
		  /* 82189B78h */ case   13:  		/* cmplw CR6, R14, R17 */
		/* 82189B78h case   13:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R17);
		/* 82189B78h case   13:*/		return 0x82189B7C;
		  /* 82189B7Ch */ case   14:  		/* bc 4, CR6_LT, 76 */
		/* 82189B7Ch case   14:*/		if ( !regs.CR[6].lt ) { return 0x82189BC8;  }
		/* 82189B7Ch case   14:*/		return 0x82189B80;
		  /* 82189B80h */ case   15:  		/* and. R11, R31, R24 */
		/* 82189B80h case   15:*/		cpu::op::and<1>(regs,&regs.R11,regs.R31,regs.R24);
		/* 82189B80h case   15:*/		return 0x82189B84;
		  /* 82189B84h */ case   16:  		/* bc 12, CR0_EQ, 52 */
		/* 82189B84h case   16:*/		if ( regs.CR[0].eq ) { return 0x82189BB8;  }
		/* 82189B84h case   16:*/		return 0x82189B88;
		  /* 82189B88h */ case   17:  		/* mr R4, R29 */
		/* 82189B88h case   17:*/		regs.R4 = regs.R29;
		/* 82189B88h case   17:*/		return 0x82189B8C;
		  /* 82189B8Ch */ case   18:  		/* mr R3, R30 */
		/* 82189B8Ch case   18:*/		regs.R3 = regs.R30;
		/* 82189B8Ch case   18:*/		return 0x82189B90;
		  /* 82189B90h */ case   19:  		/* bl -25136 */
		/* 82189B90h case   19:*/		regs.LR = 0x82189B94; return 0x82183960;
		/* 82189B90h case   19:*/		return 0x82189B94;
		  /* 82189B94h */ case   20:  		/* lwz R11, <#[R30 + 688]> */
		/* 82189B94h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189B94h case   20:*/		return 0x82189B98;
		  /* 82189B98h */ case   21:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82189B98h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82189B98h case   21:*/		return 0x82189B9C;
		  /* 82189B9Ch */ case   22:  		/* cmplwi CR6, R28, 0 */
		/* 82189B9Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82189B9Ch case   22:*/		return 0x82189BA0;
		  /* 82189BA0h */ case   23:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82189BA0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82189BA0h case   23:*/		return 0x82189BA4;
		  /* 82189BA4h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 82189BA4h case   24:*/		if ( regs.CR[6].eq ) { return 0x82189BB0;  }
		/* 82189BA4h case   24:*/		return 0x82189BA8;
		  /* 82189BA8h */ case   25:  		/* cmplw CR6, R11, R28 */
		/* 82189BA8h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82189BA8h case   25:*/		return 0x82189BAC;
		  /* 82189BACh */ case   26:  		/* bc 4, CR6_EQ, 12 */
		/* 82189BACh case   26:*/		if ( !regs.CR[6].eq ) { return 0x82189BB8;  }
		/* 82189BACh case   26:*/		return 0x82189BB0;
	}
	return 0x82189BB0;
} // Block from 82189B44h-82189BB0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82189BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189BB0);
		  /* 82189BB0h */ case    0:  		/* mr R28, R11 */
		/* 82189BB0h case    0:*/		regs.R28 = regs.R11;
		/* 82189BB0h case    0:*/		return 0x82189BB4;
		  /* 82189BB4h */ case    1:  		/* or R27, R31, R27 */
		/* 82189BB4h case    1:*/		cpu::op::or<0>(regs,&regs.R27,regs.R31,regs.R27);
		/* 82189BB4h case    1:*/		return 0x82189BB8;
	}
	return 0x82189BB8;
} // Block from 82189BB0h-82189BB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189BB8);
		  /* 82189BB8h */ case    0:  		/* addi R29, R29, 1 */
		/* 82189BB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82189BB8h case    0:*/		return 0x82189BBC;
		  /* 82189BBCh */ case    1:  		/* rlwinm R31, R31, 1, 0, 30 */
		/* 82189BBCh case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R31,regs.R31);
		/* 82189BBCh case    1:*/		return 0x82189BC0;
		  /* 82189BC0h */ case    2:  		/* cmplw CR6, R29, R17 */
		/* 82189BC0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R17);
		/* 82189BC0h case    2:*/		return 0x82189BC4;
		  /* 82189BC4h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 82189BC4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82189B80;  }
		/* 82189BC4h case    3:*/		return 0x82189BC8;
	}
	return 0x82189BC8;
} // Block from 82189BB8h-82189BC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82189BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189BC8);
		  /* 82189BC8h */ case    0:  		/* subf R24, R27, R24 */
		/* 82189BC8h case    0:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R27,regs.R24);
		/* 82189BC8h case    0:*/		return 0x82189BCC;
		  /* 82189BCCh */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 82189BCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82189BCCh case    1:*/		return 0x82189BD0;
		  /* 82189BD0h */ case    2:  		/* bc 12, CR6_EQ, 476 */
		/* 82189BD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82189DAC;  }
		/* 82189BD0h case    2:*/		return 0x82189BD4;
		  /* 82189BD4h */ case    3:  		/* addi R25, R15, 4 */
		/* 82189BD4h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R15,0x4);
		/* 82189BD4h case    3:*/		return 0x82189BD8;
		  /* 82189BD8h */ case    4:  		/* addi R11, R27, -1 */
		/* 82189BD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 82189BD8h case    4:*/		return 0x82189BDC;
		  /* 82189BDCh */ case    5:  		/* lwz R31, <#[R25]> */
		/* 82189BDCh case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 82189BDCh case    5:*/		return 0x82189BE0;
		  /* 82189BE0h */ case    6:  		/* andc R26, R27, R11 */
		/* 82189BE0h case    6:*/		cpu::op::andc<0>(regs,&regs.R26,regs.R27,regs.R11);
		/* 82189BE0h case    6:*/		return 0x82189BE4;
		  /* 82189BE4h */ case    7:  		/* cntlzw R11, R26 */
		/* 82189BE4h case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R26);
		/* 82189BE4h case    7:*/		return 0x82189BE8;
		  /* 82189BE8h */ case    8:  		/* subfic R29, R11, 31 */
		/* 82189BE8h case    8:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R11,0x1F);
		/* 82189BE8h case    8:*/		return 0x82189BEC;
		  /* 82189BECh */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 82189BECh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82189BECh case    9:*/		return 0x82189BF0;
		  /* 82189BF0h */ case   10:  		/* bc 12, CR6_EQ, 436 */
		/* 82189BF0h case   10:*/		if ( regs.CR[6].eq ) { return 0x82189DA4;  }
		/* 82189BF0h case   10:*/		return 0x82189BF4;
		  /* 82189BF4h */ case   11:  		/* lwz R11, <#[R31 + 16]> */
		/* 82189BF4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82189BF4h case   11:*/		return 0x82189BF8;
		  /* 82189BF8h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82189BF8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82189BF8h case   12:*/		return 0x82189BFC;
		  /* 82189BFCh */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 82189BFCh case   13:*/		if ( regs.CR[6].eq ) { return 0x82189C28;  }
		/* 82189BFCh case   13:*/		return 0x82189C00;
		  /* 82189C00h */ case   14:  		/* lwz R10, <#[R31]> */
		/* 82189C00h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82189C00h case   14:*/		return 0x82189C04;
		  /* 82189C04h */ case   15:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 82189C04h case   15:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 82189C04h case   15:*/		return 0x82189C08;
		  /* 82189C08h */ case   16:  		/* bc 12, CR0_EQ, 32 */
		/* 82189C08h case   16:*/		if ( regs.CR[0].eq ) { return 0x82189C28;  }
		/* 82189C08h case   16:*/		return 0x82189C0C;
		  /* 82189C0Ch */ case   17:  		/* lwz R11, <#[R11 + 16]> */
		/* 82189C0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82189C0Ch case   17:*/		return 0x82189C10;
		  /* 82189C10h */ case   18:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82189C10h case   18:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82189C10h case   18:*/		return 0x82189C14;
		  /* 82189C14h */ case   19:  		/* bc 4, CR0_EQ, 20 */
		/* 82189C14h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82189C28;  }
		/* 82189C14h case   19:*/		return 0x82189C18;
		  /* 82189C18h */ case   20:  		/* mr R3, R31 */
		/* 82189C18h case   20:*/		regs.R3 = regs.R31;
		/* 82189C18h case   20:*/		return 0x82189C1C;
		  /* 82189C1Ch */ case   21:  		/* bl -154076 */
		/* 82189C1Ch case   21:*/		regs.LR = 0x82189C20; return 0x82164240;
		/* 82189C1Ch case   21:*/		return 0x82189C20;
		  /* 82189C20h */ case   22:  		/* cmplw CR6, R3, R26 */
		/* 82189C20h case   22:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 82189C20h case   22:*/		return 0x82189C24;
		  /* 82189C24h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 82189C24h case   23:*/		if ( regs.CR[6].eq ) { return 0x82189C30;  }
		/* 82189C24h case   23:*/		return 0x82189C28;
	}
	return 0x82189C28;
} // Block from 82189BC8h-82189C28h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82189C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189C28);
		  /* 82189C28h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 82189C28h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 82189C28h case    0:*/		return 0x82189C2C;
		  /* 82189C2Ch */ case    1:  		/* b -64 */
		/* 82189C2Ch case    1:*/		return 0x82189BEC;
		/* 82189C2Ch case    1:*/		return 0x82189C30;
	}
	return 0x82189C30;
} // Block from 82189C28h-82189C30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189C30);
		  /* 82189C30h */ case    0:  		/* mr R3, R15 */
		/* 82189C30h case    0:*/		regs.R3 = regs.R15;
		/* 82189C30h case    0:*/		return 0x82189C34;
		  /* 82189C34h */ case    1:  		/* bl -99276 */
		/* 82189C34h case    1:*/		regs.LR = 0x82189C38; return 0x82171868;
		/* 82189C34h case    1:*/		return 0x82189C38;
		  /* 82189C38h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82189C38h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82189C38h case    2:*/		return 0x82189C3C;
		  /* 82189C3Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82189C3Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82189C4C;  }
		/* 82189C3Ch case    3:*/		return 0x82189C40;
		  /* 82189C40h */ case    4:  		/* mr R5, R15 */
		/* 82189C40h case    4:*/		regs.R5 = regs.R15;
		/* 82189C40h case    4:*/		return 0x82189C44;
		  /* 82189C44h */ case    5:  		/* rlwimi R5, R23, 0, 30, 31 */
		/* 82189C44h case    5:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R5,regs.R23);
		/* 82189C44h case    5:*/		return 0x82189C48;
		  /* 82189C48h */ case    6:  		/* b 20 */
		/* 82189C48h case    6:*/		return 0x82189C5C;
		/* 82189C48h case    6:*/		return 0x82189C4C;
	}
	return 0x82189C4C;
} // Block from 82189C30h-82189C4Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82189C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189C4C);
		  /* 82189C4Ch */ case    0:  		/* lwz R11, <#[R15 + 28]> */
		/* 82189C4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x0000001C) );
		/* 82189C4Ch case    0:*/		return 0x82189C50;
		  /* 82189C50h */ case    1:  		/* addi R11, R11, 24 */
		/* 82189C50h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x18);
		/* 82189C50h case    1:*/		return 0x82189C54;
		  /* 82189C54h */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82189C54h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82189C54h case    2:*/		return 0x82189C58;
		  /* 82189C58h */ case    3:  		/* ori R5, R11, 2 */
		/* 82189C58h case    3:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R11,0x2);
		/* 82189C58h case    3:*/		return 0x82189C5C;
	}
	return 0x82189C5C;
} // Block from 82189C4Ch-82189C5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82189C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189C5C);
		  /* 82189C5Ch */ case    0:  		/* mr R7, R29 */
		/* 82189C5Ch case    0:*/		regs.R7 = regs.R29;
		/* 82189C5Ch case    0:*/		return 0x82189C60;
		  /* 82189C60h */ case    1:  		/* lwz R4, <#[R15 + 28]> */
		/* 82189C60h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R15 + 0x0000001C) );
		/* 82189C60h case    1:*/		return 0x82189C64;
		  /* 82189C64h */ case    2:  		/* mr R6, R15 */
		/* 82189C64h case    2:*/		regs.R6 = regs.R15;
		/* 82189C64h case    2:*/		return 0x82189C68;
		  /* 82189C68h */ case    3:  		/* mr R3, R30 */
		/* 82189C68h case    3:*/		regs.R3 = regs.R30;
		/* 82189C68h case    3:*/		return 0x82189C6C;
		  /* 82189C6Ch */ case    4:  		/* bl 660068 */
		/* 82189C6Ch case    4:*/		regs.LR = 0x82189C70; return 0x8222AED0;
		/* 82189C6Ch case    4:*/		return 0x82189C70;
		  /* 82189C70h */ case    5:  		/* lwz R11, <#[R15 + 16]> */
		/* 82189C70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000010) );
		/* 82189C70h case    5:*/		return 0x82189C74;
		  /* 82189C74h */ case    6:  		/* mr R31, R3 */
		/* 82189C74h case    6:*/		regs.R31 = regs.R3;
		/* 82189C74h case    6:*/		return 0x82189C78;
		  /* 82189C78h */ case    7:  		/* rlwinm. R11, R11, 0, 11, 11 */
		/* 82189C78h case    7:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R11);
		/* 82189C78h case    7:*/		return 0x82189C7C;
		  /* 82189C7Ch */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 82189C7Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82189C8C;  }
		/* 82189C7Ch case    8:*/		return 0x82189C80;
		  /* 82189C80h */ case    9:  		/* lwz R11, <#[R1 + 84]> */
		/* 82189C80h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82189C80h case    9:*/		return 0x82189C84;
		  /* 82189C84h */ case   10:  		/* stw R3, <#[R1 + 84]> */
		/* 82189C84h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82189C84h case   10:*/		return 0x82189C88;
		  /* 82189C88h */ case   11:  		/* b 12 */
		/* 82189C88h case   11:*/		return 0x82189C94;
		/* 82189C88h case   11:*/		return 0x82189C8C;
	}
	return 0x82189C8C;
} // Block from 82189C5Ch-82189C8Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82189C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189C8C);
		  /* 82189C8Ch */ case    0:  		/* lwz R11, <#[R1 + 112]> */
		/* 82189C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 82189C8Ch case    0:*/		return 0x82189C90;
		  /* 82189C90h */ case    1:  		/* stw R31, <#[R1 + 112]> */
		/* 82189C90h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 82189C90h case    1:*/		return 0x82189C94;
	}
	return 0x82189C94;
} // Block from 82189C8Ch-82189C94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189C94);
		  /* 82189C94h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 82189C94h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82189C94h case    0:*/		return 0x82189C98;
		  /* 82189C98h */ case    1:  		/* stw R11, <#[R31 + 32]> */
		/* 82189C98h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82189C98h case    1:*/		return 0x82189C9C;
		  /* 82189C9Ch */ case    2:  		/* add R11, R29, R14 */
		/* 82189C9Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R14);
		/* 82189C9Ch case    2:*/		return 0x82189CA0;
		  /* 82189CA0h */ case    3:  		/* rlwimi R10, R23, 16, 13, 15 */
		/* 82189CA0h case    3:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R10,regs.R23);
		/* 82189CA0h case    3:*/		return 0x82189CA4;
		  /* 82189CA4h */ case    4:  		/* lwz R9, <#[R31 + 8]> */
		/* 82189CA4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82189CA4h case    4:*/		return 0x82189CA8;
		  /* 82189CA8h */ case    5:  		/* stw R10, <#[R31 + 16]> */
		/* 82189CA8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82189CA8h case    5:*/		return 0x82189CAC;
		  /* 82189CACh */ case    6:  		/* oris R10, R9, 128 */
		/* 82189CACh case    6:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x80);
		/* 82189CACh case    6:*/		return 0x82189CB0;
		  /* 82189CB0h */ case    7:  		/* sth R11, <#[R31 + 18]> */
		/* 82189CB0h case    7:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 82189CB0h case    7:*/		return 0x82189CB4;
		  /* 82189CB4h */ case    8:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 82189CB4h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 82189CB4h case    8:*/		return 0x82189CB8;
		  /* 82189CB8h */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 82189CB8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82189CB8h case    9:*/		return 0x82189CBC;
		  /* 82189CBCh */ case   10:  		/* mr R11, R22 */
		/* 82189CBCh case   10:*/		regs.R11 = regs.R22;
		/* 82189CBCh case   10:*/		return 0x82189CC0;
		  /* 82189CC0h */ case   11:  		/* lwz R10, <#[R31 + 16]> */
		/* 82189CC0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82189CC0h case   11:*/		return 0x82189CC4;
		  /* 82189CC4h */ case   12:  		/* oris R10, R10, 8 */
		/* 82189CC4h case   12:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82189CC4h case   12:*/		return 0x82189CC8;
		  /* 82189CC8h */ case   13:  		/* stw R10, <#[R31 + 16]> */
		/* 82189CC8h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82189CC8h case   13:*/		return 0x82189CCC;
		  /* 82189CCCh */ case   14:  		/* lwz R10, <#[R30 + 708]> */
		/* 82189CCCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002C4) );
		/* 82189CCCh case   14:*/		return 0x82189CD0;
		  /* 82189CD0h */ case   15:  		/* stwx R31, <#[R9 + R10]> */
		/* 82189CD0h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82189CD0h case   15:*/		return 0x82189CD4;
		  /* 82189CD4h */ case   16:  		/* lwz R10, <#[R30 + 668]> */
		/* 82189CD4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 82189CD4h case   16:*/		return 0x82189CD8;
		  /* 82189CD8h */ case   17:  		/* cmplw CR6, R22, R10 */
		/* 82189CD8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R10);
		/* 82189CD8h case   17:*/		return 0x82189CDC;
		  /* 82189CDCh */ case   18:  		/* bc 4, CR6_LT, 40 */
		/* 82189CDCh case   18:*/		if ( !regs.CR[6].lt ) { return 0x82189D04;  }
		/* 82189CDCh case   18:*/		return 0x82189CE0;
		  /* 82189CE0h */ case   19:  		/* addi R10, R16, -4 */
		/* 82189CE0h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R16,0xFFFFFFFC);
		/* 82189CE0h case   19:*/		return 0x82189CE4;
		  /* 82189CE4h */ case   20:  		/* lwz R9, <#[R10 + 4]> */
		/* 82189CE4h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82189CE4h case   20:*/		return 0x82189CE8;
		  /* 82189CE8h */ case   21:  		/* cmplw CR6, R9, R15 */
		/* 82189CE8h case   21:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R15);
		/* 82189CE8h case   21:*/		return 0x82189CEC;
		  /* 82189CECh */ case   22:  		/* bc 4, CR6_EQ, 24 */
		/* 82189CECh case   22:*/		if ( !regs.CR[6].eq ) { return 0x82189D04;  }
		/* 82189CECh case   22:*/		return 0x82189CF0;
		  /* 82189CF0h */ case   23:  		/* stwu R31, <#[R10 + 4]> */
		/* 82189CF0h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82189CF0h case   23:*/		return 0x82189CF4;
		  /* 82189CF4h */ case   24:  		/* addi R11, R11, 1 */
		/* 82189CF4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82189CF4h case   24:*/		return 0x82189CF8;
		  /* 82189CF8h */ case   25:  		/* lwz R9, <#[R30 + 668]> */
		/* 82189CF8h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000029C) );
		/* 82189CF8h case   25:*/		return 0x82189CFC;
		  /* 82189CFCh */ case   26:  		/* cmplw CR6, R11, R9 */
		/* 82189CFCh case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82189CFCh case   26:*/		return 0x82189D00;
		  /* 82189D00h */ case   27:  		/* bc 12, CR6_LT, -28 */
		/* 82189D00h case   27:*/		if ( regs.CR[6].lt ) { return 0x82189CE4;  }
		/* 82189D00h case   27:*/		return 0x82189D04;
	}
	return 0x82189D04;
} // Block from 82189C94h-82189D04h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82189D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189D04);
		  /* 82189D04h */ case    0:  		/* mr R28, R25 */
		/* 82189D04h case    0:*/		regs.R28 = regs.R25;
		/* 82189D04h case    0:*/		return 0x82189D08;
		  /* 82189D08h */ case    1:  		/* lwz R29, <#[R28]> */
		/* 82189D08h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 82189D08h case    1:*/		return 0x82189D0C;
		  /* 82189D0Ch */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82189D0Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82189D0Ch case    2:*/		return 0x82189D10;
		  /* 82189D10h */ case    3:  		/* bc 12, CR6_EQ, 148 */
		/* 82189D10h case    3:*/		if ( regs.CR[6].eq ) { return 0x82189DA4;  }
		/* 82189D10h case    3:*/		return 0x82189D14;
		  /* 82189D14h */ case    4:  		/* lwz R11, <#[R29 + 16]> */
		/* 82189D14h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82189D14h case    4:*/		return 0x82189D18;
		  /* 82189D18h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82189D18h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82189D18h case    5:*/		return 0x82189D1C;
		  /* 82189D1Ch */ case    6:  		/* bc 12, CR6_EQ, 116 */
		/* 82189D1Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82189D90;  }
		/* 82189D1Ch case    6:*/		return 0x82189D20;
		  /* 82189D20h */ case    7:  		/* lwz R10, <#[R29]> */
		/* 82189D20h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82189D20h case    7:*/		return 0x82189D24;
		  /* 82189D24h */ case    8:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 82189D24h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 82189D24h case    8:*/		return 0x82189D28;
		  /* 82189D28h */ case    9:  		/* bc 12, CR0_EQ, 104 */
		/* 82189D28h case    9:*/		if ( regs.CR[0].eq ) { return 0x82189D90;  }
		/* 82189D28h case    9:*/		return 0x82189D2C;
		  /* 82189D2Ch */ case   10:  		/* lwz R11, <#[R11 + 16]> */
		/* 82189D2Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82189D2Ch case   10:*/		return 0x82189D30;
		  /* 82189D30h */ case   11:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82189D30h case   11:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82189D30h case   11:*/		return 0x82189D34;
		  /* 82189D34h */ case   12:  		/* bc 4, CR0_EQ, 92 */
		/* 82189D34h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82189D90;  }
		/* 82189D34h case   12:*/		return 0x82189D38;
		  /* 82189D38h */ case   13:  		/* mr R3, R29 */
		/* 82189D38h case   13:*/		regs.R3 = regs.R29;
		/* 82189D38h case   13:*/		return 0x82189D3C;
		  /* 82189D3Ch */ case   14:  		/* bl -154364 */
		/* 82189D3Ch case   14:*/		regs.LR = 0x82189D40; return 0x82164240;
		/* 82189D3Ch case   14:*/		return 0x82189D40;
		  /* 82189D40h */ case   15:  		/* cmplw CR6, R3, R26 */
		/* 82189D40h case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 82189D40h case   15:*/		return 0x82189D44;
		  /* 82189D44h */ case   16:  		/* bc 4, CR6_EQ, 76 */
		/* 82189D44h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82189D90;  }
		/* 82189D44h case   16:*/		return 0x82189D48;
		  /* 82189D48h */ case   17:  		/* lwz R11, <#[R29 + 12]> */
		/* 82189D48h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82189D48h case   17:*/		return 0x82189D4C;
		  /* 82189D4Ch */ case   18:  		/* addi R11, R11, 4 */
		/* 82189D4Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82189D4Ch case   18:*/		return 0x82189D50;
		  /* 82189D50h */ case   19:  		/* lwz R10, <#[R11]> */
		/* 82189D50h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82189D50h case   19:*/		return 0x82189D54;
		  /* 82189D54h */ case   20:  		/* b 12 */
		/* 82189D54h case   20:*/		return 0x82189D60;
		/* 82189D54h case   20:*/		return 0x82189D58;
		  /* 82189D58h */ case   21:  		/* addi R11, R10, 8 */
		/* 82189D58h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 82189D58h case   21:*/		return 0x82189D5C;
		  /* 82189D5Ch */ case   22:  		/* lwz R10, <#[R10 + 8]> */
		/* 82189D5Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82189D5Ch case   22:*/		return 0x82189D60;
	}
	return 0x82189D60;
} // Block from 82189D04h-82189D60h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82189D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189D60);
		  /* 82189D60h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 82189D60h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 82189D60h case    0:*/		return 0x82189D64;
		  /* 82189D64h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82189D64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82189D58;  }
		/* 82189D64h case    1:*/		return 0x82189D68;
		  /* 82189D68h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 82189D68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 82189D68h case    2:*/		return 0x82189D6C;
		  /* 82189D6Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 82189D6Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82189D6Ch case    3:*/		return 0x82189D70;
		  /* 82189D70h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82189D70h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82189D70h case    4:*/		return 0x82189D74;
		  /* 82189D74h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 82189D74h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82189D74h case    5:*/		return 0x82189D78;
		  /* 82189D78h */ case    6:  		/* stw R29, <#[R31 + 4]> */
		/* 82189D78h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 82189D78h case    6:*/		return 0x82189D7C;
		  /* 82189D7Ch */ case    7:  		/* stw R31, <#[R29 + 12]> */
		/* 82189D7Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 82189D7Ch case    7:*/		return 0x82189D80;
		  /* 82189D80h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 82189D80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82189D80h case    8:*/		return 0x82189D84;
		  /* 82189D84h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82189D84h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82189D84h case    9:*/		return 0x82189D88;
		  /* 82189D88h */ case   10:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 82189D88h case   10:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 82189D88h case   10:*/		return 0x82189D8C;
		  /* 82189D8Ch */ case   11:  		/* stw R11, <#[R29]> */
		/* 82189D8Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82189D8Ch case   11:*/		return 0x82189D90;
	}
	return 0x82189D90;
} // Block from 82189D60h-82189D90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82189D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189D90);
		  /* 82189D90h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82189D90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82189D90h case    0:*/		return 0x82189D94;
		  /* 82189D94h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 82189D94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82189D94h case    1:*/		return 0x82189D98;
		  /* 82189D98h */ case    2:  		/* bc 4, CR6_EQ, -144 */
		/* 82189D98h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82189D08;  }
		/* 82189D98h case    2:*/		return 0x82189D9C;
		  /* 82189D9Ch */ case    3:  		/* addi R28, R29, 8 */
		/* 82189D9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x8);
		/* 82189D9Ch case    3:*/		return 0x82189DA0;
		  /* 82189DA0h */ case    4:  		/* b -152 */
		/* 82189DA0h case    4:*/		return 0x82189D08;
		/* 82189DA0h case    4:*/		return 0x82189DA4;
	}
	return 0x82189DA4;
} // Block from 82189D90h-82189DA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82189DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189DA4);
		  /* 82189DA4h */ case    0:  		/* subf. R27, R26, R27 */
		/* 82189DA4h case    0:*/		cpu::op::subf<1>(regs,&regs.R27,regs.R26,regs.R27);
		/* 82189DA4h case    0:*/		return 0x82189DA8;
		  /* 82189DA8h */ case    1:  		/* bc 4, CR0_EQ, -464 */
		/* 82189DA8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82189BD8;  }
		/* 82189DA8h case    1:*/		return 0x82189DAC;
	}
	return 0x82189DAC;
} // Block from 82189DA4h-82189DACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189DAC);
		  /* 82189DACh */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82189DACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82189DACh case    0:*/		return 0x82189DB0;
		  /* 82189DB0h */ case    1:  		/* bc 4, CR6_EQ, -584 */
		/* 82189DB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82189B68;  }
		/* 82189DB0h case    1:*/		return 0x82189DB4;
		  /* 82189DB4h */ case    2:  		/* lwz R11, <#[R15 + 16]> */
		/* 82189DB4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000010) );
		/* 82189DB4h case    2:*/		return 0x82189DB8;
		  /* 82189DB8h */ case    3:  		/* rlwinm. R11, R11, 0, 11, 11 */
		/* 82189DB8h case    3:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R11);
		/* 82189DB8h case    3:*/		return 0x82189DBC;
		  /* 82189DBCh */ case    4:  		/* bc 4, CR0_EQ, 2808 */
		/* 82189DBCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8218A8B4;  }
		/* 82189DBCh case    4:*/		return 0x82189DC0;
		  /* 82189DC0h */ case    5:  		/* lwz R11, <#[R15 + 8]> */
		/* 82189DC0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82189DC0h case    5:*/		return 0x82189DC4;
		  /* 82189DC4h */ case    6:  		/* li R10, 0 */
		/* 82189DC4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82189DC4h case    6:*/		return 0x82189DC8;
		  /* 82189DC8h */ case    7:  		/* rlwinm R11, R11, 0, 9, 7 */
		/* 82189DC8h case    7:*/		cpu::op::rlwinm<0,0,9,7>(regs,&regs.R11,regs.R11);
		/* 82189DC8h case    7:*/		return 0x82189DCC;
		  /* 82189DCCh */ case    8:  		/* sth R10, <#[R15 + 18]> */
		/* 82189DCCh case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R15 + 0x00000012) );
		/* 82189DCCh case    8:*/		return 0x82189DD0;
		  /* 82189DD0h */ case    9:  		/* stw R11, <#[R15 + 8]> */
		/* 82189DD0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82189DD0h case    9:*/		return 0x82189DD4;
		  /* 82189DD4h */ case   10:  		/* b 2784 */
		/* 82189DD4h case   10:*/		return 0x8218A8B4;
		/* 82189DD4h case   10:*/		return 0x82189DD8;
	}
	return 0x82189DD8;
} // Block from 82189DACh-82189DD8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82189DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189DD8);
		  /* 82189DD8h */ case    0:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 82189DD8h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 82189DD8h case    0:*/		return 0x82189DDC;
		  /* 82189DDCh */ case    1:  		/* cmplwi CR6, R10, 14080 */
		/* 82189DDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 82189DDCh case    1:*/		return 0x82189DE0;
		  /* 82189DE0h */ case    2:  		/* bc 4, CR6_EQ, 2772 */
		/* 82189DE0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8218A8B4;  }
		/* 82189DE0h case    2:*/		return 0x82189DE4;
		  /* 82189DE4h */ case    3:  		/* mr R4, R14 */
		/* 82189DE4h case    3:*/		regs.R4 = regs.R14;
		/* 82189DE4h case    3:*/		return 0x82189DE8;
		  /* 82189DE8h */ case    4:  		/* mr R3, R30 */
		/* 82189DE8h case    4:*/		regs.R3 = regs.R30;
		/* 82189DE8h case    4:*/		return 0x82189DEC;
		  /* 82189DECh */ case    5:  		/* rlwinm R20, R11, 31, 28, 31 */
		/* 82189DECh case    5:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R20,regs.R11);
		/* 82189DECh case    5:*/		return 0x82189DF0;
		  /* 82189DF0h */ case    6:  		/* bl -25744 */
		/* 82189DF0h case    6:*/		regs.LR = 0x82189DF4; return 0x82183960;
		/* 82189DF0h case    6:*/		return 0x82189DF4;
		  /* 82189DF4h */ case    7:  		/* lwz R11, <#[R30 + 688]> */
		/* 82189DF4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189DF4h case    7:*/		return 0x82189DF8;
		  /* 82189DF8h */ case    8:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82189DF8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82189DF8h case    8:*/		return 0x82189DFC;
		  /* 82189DFCh */ case    9:  		/* addi R18, R15, 44 */
		/* 82189DFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R15,0x2C);
		/* 82189DFCh case    9:*/		return 0x82189E00;
		  /* 82189E00h */ case   10:  		/* li R24, 0 */
		/* 82189E00h case   10:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82189E00h case   10:*/		return 0x82189E04;
		  /* 82189E04h */ case   11:  		/* mr R22, R18 */
		/* 82189E04h case   11:*/		regs.R22 = regs.R18;
		/* 82189E04h case   11:*/		return 0x82189E08;
		  /* 82189E08h */ case   12:  		/* li R21, 2 */
		/* 82189E08h case   12:*/		cpu::op::li<0>(regs,&regs.R21,0x2);
		/* 82189E08h case   12:*/		return 0x82189E0C;
		  /* 82189E0Ch */ case   13:  		/* lwzx R19, <#[R10 + R11]> */
		/* 82189E0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82189E0Ch case   13:*/		return 0x82189E10;
		  /* 82189E10h */ case   14:  		/* li R17, 1 */
		/* 82189E10h case   14:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82189E10h case   14:*/		return 0x82189E14;
		  /* 82189E14h */ case   15:  		/* lwz R11, <#[R15 + 8]> */
		/* 82189E14h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82189E14h case   15:*/		return 0x82189E18;
		  /* 82189E18h */ case   16:  		/* rlwinm R10, R11, 13, 29, 31 */
		/* 82189E18h case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R11);
		/* 82189E18h case   16:*/		return 0x82189E1C;
		  /* 82189E1Ch */ case   17:  		/* cmplw CR6, R24, R10 */
		/* 82189E1Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R10);
		/* 82189E1Ch case   17:*/		return 0x82189E20;
		  /* 82189E20h */ case   18:  		/* bc 4, CR6_LT, 688 */
		/* 82189E20h case   18:*/		if ( !regs.CR[6].lt ) { return 0x8218A0D0;  }
		/* 82189E20h case   18:*/		return 0x82189E24;
		  /* 82189E24h */ case   19:  		/* lwz R11, <#[R22]> */
		/* 82189E24h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82189E24h case   19:*/		return 0x82189E28;
		  /* 82189E28h */ case   20:  		/* slw R31, R17, R24 */
		/* 82189E28h case   20:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R17,regs.R24);
		/* 82189E28h case   20:*/		return 0x82189E2C;
		  /* 82189E2Ch */ case   21:  		/* lwz R10, <#[R11 + 12]> */
		/* 82189E2Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82189E2Ch case   21:*/		return 0x82189E30;
		  /* 82189E30h */ case   22:  		/* lwz R9, <#[R10 + 8]> */
		/* 82189E30h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82189E30h case   22:*/		return 0x82189E34;
		  /* 82189E34h */ case   23:  		/* rlwinm. R9, R9, 9, 31, 31 */
		/* 82189E34h case   23:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R9);
		/* 82189E34h case   23:*/		return 0x82189E38;
		  /* 82189E38h */ case   24:  		/* bc 4, CR0_EQ, 12 */
		/* 82189E38h case   24:*/		if ( !regs.CR[0].eq ) { return 0x82189E44;  }
		/* 82189E38h case   24:*/		return 0x82189E3C;
		  /* 82189E3Ch */ case   25:  		/* subf R20, R31, R20 */
		/* 82189E3Ch case   25:*/		cpu::op::subf<0>(regs,&regs.R20,regs.R31,regs.R20);
		/* 82189E3Ch case   25:*/		return 0x82189E40;
		  /* 82189E40h */ case   26:  		/* b 620 */
		/* 82189E40h case   26:*/		return 0x8218A0AC;
		/* 82189E40h case   26:*/		return 0x82189E44;
	}
	return 0x82189E44;
} // Block from 82189DD8h-82189E44h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82189E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189E44);
		  /* 82189E44h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82189E44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82189E44h case    0:*/		return 0x82189E48;
		  /* 82189E48h */ case    1:  		/* mr R3, R30 */
		/* 82189E48h case    1:*/		regs.R3 = regs.R30;
		/* 82189E48h case    1:*/		return 0x82189E4C;
		  /* 82189E4Ch */ case    2:  		/* lhz R10, <#[R10 + 18]> */
		/* 82189E4Ch case    2:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000012) );
		/* 82189E4Ch case    2:*/		return 0x82189E50;
		  /* 82189E50h */ case    3:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 82189E50h case    3:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 82189E50h case    3:*/		return 0x82189E54;
		  /* 82189E54h */ case    4:  		/* add R23, R10, R11 */
		/* 82189E54h case    4:*/		cpu::op::add<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 82189E54h case    4:*/		return 0x82189E58;
		  /* 82189E58h */ case    5:  		/* mr R4, R23 */
		/* 82189E58h case    5:*/		regs.R4 = regs.R23;
		/* 82189E58h case    5:*/		return 0x82189E5C;
		  /* 82189E5Ch */ case    6:  		/* bl -25852 */
		/* 82189E5Ch case    6:*/		regs.LR = 0x82189E60; return 0x82183960;
		/* 82189E5Ch case    6:*/		return 0x82189E60;
		  /* 82189E60h */ case    7:  		/* lwz R11, <#[R30 + 688]> */
		/* 82189E60h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 82189E60h case    7:*/		return 0x82189E64;
		  /* 82189E64h */ case    8:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82189E64h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82189E64h case    8:*/		return 0x82189E68;
		  /* 82189E68h */ case    9:  		/* mr R28, R3 */
		/* 82189E68h case    9:*/		regs.R28 = regs.R3;
		/* 82189E68h case    9:*/		return 0x82189E6C;
		  /* 82189E6Ch */ case   10:  		/* lwzx R27, <#[R10 + R11]> */
		/* 82189E6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82189E6Ch case   10:*/		return 0x82189E70;
		  /* 82189E70h */ case   11:  		/* cmplw CR6, R27, R19 */
		/* 82189E70h case   11:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R19);
		/* 82189E70h case   11:*/		return 0x82189E74;
		  /* 82189E74h */ case   12:  		/* bc 12, CR6_EQ, -56 */
		/* 82189E74h case   12:*/		if ( regs.CR[6].eq ) { return 0x82189E3C;  }
		/* 82189E74h case   12:*/		return 0x82189E78;
		  /* 82189E78h */ case   13:  		/* rlwinm R11, R15, 0, 0, 30 */
		/* 82189E78h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R15);
		/* 82189E78h case   13:*/		return 0x82189E7C;
		  /* 82189E7Ch */ case   14:  		/* b 224 */
		/* 82189E7Ch case   14:*/		return 0x82189F5C;
		/* 82189E7Ch case   14:*/		return 0x82189E80;
		  /* 82189E80h */ case   15:  		/* lwz R11, <#[R29 + 8]> */
		/* 82189E80h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82189E80h case   15:*/		return 0x82189E84;
		  /* 82189E84h */ case   16:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 82189E84h case   16:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 82189E84h case   16:*/		return 0x82189E88;
		  /* 82189E88h */ case   17:  		/* bc 12, CR0_EQ, 208 */
		/* 82189E88h case   17:*/		if ( regs.CR[0].eq ) { return 0x82189F58;  }
		/* 82189E88h case   17:*/		return 0x82189E8C;
		  /* 82189E8Ch */ case   18:  		/* li R26, 0 */
		/* 82189E8Ch case   18:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82189E8Ch case   18:*/		return 0x82189E90;
		  /* 82189E90h */ case   19:  		/* rlwinm R31, R11, 31, 28, 31 */
		/* 82189E90h case   19:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R31,regs.R11);
		/* 82189E90h case   19:*/		return 0x82189E94;
		  /* 82189E94h */ case   20:  		/* cmplwi CR6, R31, 0 */
		/* 82189E94h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82189E94h case   20:*/		return 0x82189E98;
		  /* 82189E98h */ case   21:  		/* bc 12, CR6_EQ, 36 */
		/* 82189E98h case   21:*/		if ( regs.CR[6].eq ) { return 0x82189EBC;  }
		/* 82189E98h case   21:*/		return 0x82189E9C;
		  /* 82189E9Ch */ case   22:  		/* addi R11, R31, -1 */
		/* 82189E9Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 82189E9Ch case   22:*/		return 0x82189EA0;
		  /* 82189EA0h */ case   23:  		/* lhz R10, <#[R29 + 18]> */
		/* 82189EA0h case   23:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000012) );
		/* 82189EA0h case   23:*/		return 0x82189EA4;
		  /* 82189EA4h */ case   24:  		/* andc R11, R31, R11 */
		/* 82189EA4h case   24:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 82189EA4h case   24:*/		return 0x82189EA8;
		  /* 82189EA8h */ case   25:  		/* cntlzw R11, R11 */
		/* 82189EA8h case   25:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82189EA8h case   25:*/		return 0x82189EAC;
		  /* 82189EACh */ case   26:  		/* subf R11, R11, R10 */
		/* 82189EACh case   26:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82189EACh case   26:*/		return 0x82189EB0;
		  /* 82189EB0h */ case   27:  		/* addi R4, R11, 31 */
		/* 82189EB0h case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1F);
		/* 82189EB0h case   27:*/		return 0x82189EB4;
		  /* 82189EB4h */ case   28:  		/* mr R11, R4 */
		/* 82189EB4h case   28:*/		regs.R11 = regs.R4;
		/* 82189EB4h case   28:*/		return 0x82189EB8;
		  /* 82189EB8h */ case   29:  		/* b 12 */
		/* 82189EB8h case   29:*/		return 0x82189EC4;
		/* 82189EB8h case   29:*/		return 0x82189EBC;
	}
	return 0x82189EBC;
} // Block from 82189E44h-82189EBCh (30 instructions)

//////////////////////////////////////////////////////
// Block at 82189EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189EBC);
		  /* 82189EBCh */ case    0:  		/* li R4, 0 */
		/* 82189EBCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82189EBCh case    0:*/		return 0x82189EC0;
		  /* 82189EC0h */ case    1:  		/* li R11, 0 */
		/* 82189EC0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82189EC0h case    1:*/		return 0x82189EC4;
	}
	return 0x82189EC4;
} // Block from 82189EBCh-82189EC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189EC4);
		  /* 82189EC4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82189EC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82189EC4h case    0:*/		return 0x82189EC8;
		  /* 82189EC8h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 82189EC8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82189F50;  }
		/* 82189EC8h case    1:*/		return 0x82189ECC;
		  /* 82189ECCh */ case    2:  		/* mr R3, R30 */
		/* 82189ECCh case    2:*/		regs.R3 = regs.R30;
		/* 82189ECCh case    2:*/		return 0x82189ED0;
		  /* 82189ED0h */ case    3:  		/* bl -25968 */
		/* 82189ED0h case    3:*/		regs.LR = 0x82189ED4; return 0x82183960;
		/* 82189ED0h case    3:*/		return 0x82189ED4;
		  /* 82189ED4h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 82189ED4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82189ED4h case    4:*/		return 0x82189ED8;
		  /* 82189ED8h */ case    5:  		/* bc 12, CR6_EQ, 480 */
		/* 82189ED8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8218A0B8;  }
		/* 82189ED8h case    5:*/		return 0x82189EDC;
		  /* 82189EDCh */ case    6:  		/* rlwinm R10, R28, 1, 0, 30 */
		/* 82189EDCh case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R28);
		/* 82189EDCh case    6:*/		return 0x82189EE0;
		  /* 82189EE0h */ case    7:  		/* lwz R9, <#[R30 + 692]> */
		/* 82189EE0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000002B4) );
		/* 82189EE0h case    7:*/		return 0x82189EE4;
		  /* 82189EE4h */ case    8:  		/* rlwinm R8, R28, 1, 0, 25 */
		/* 82189EE4h case    8:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R8,regs.R28);
		/* 82189EE4h case    8:*/		return 0x82189EE8;
		  /* 82189EE8h */ case    9:  		/* subf R11, R10, R10 */
		/* 82189EE8h case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R10);
		/* 82189EE8h case    9:*/		return 0x82189EEC;
		  /* 82189EECh */ case   10:  		/* rlwinm R7, R28, 30, 3, 28 */
		/* 82189EECh case   10:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R7,regs.R28);
		/* 82189EECh case   10:*/		return 0x82189EF0;
		  /* 82189EF0h */ case   11:  		/* addi R11, R11, 1 */
		/* 82189EF0h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82189EF0h case   11:*/		return 0x82189EF4;
		  /* 82189EF4h */ case   12:  		/* subf R10, R8, R10 */
		/* 82189EF4h case   12:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82189EF4h case   12:*/		return 0x82189EF8;
		  /* 82189EF8h */ case   13:  		/* rldicl R11, R11, 0, 32 */
		/* 82189EF8h case   13:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 82189EF8h case   13:*/		return 0x82189EFC;
		  /* 82189EFCh */ case   14:  		/* rldicl R10, R10, 0, 32 */
		/* 82189EFCh case   14:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 82189EFCh case   14:*/		return 0x82189F00;
		  /* 82189F00h */ case   15:  		/* ldx R9, <#[R7 + R9]> */
		/* 82189F00h case   15:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82189F00h case   15:*/		return 0x82189F04;
		  /* 82189F04h */ case   16:  		/* slw R11, R21, R11 */
		/* 82189F04h case   16:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 82189F04h case   16:*/		return 0x82189F08;
		  /* 82189F08h */ case   17:  		/* srd R10, R9, R10 */
		/* 82189F08h case   17:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82189F08h case   17:*/		return 0x82189F0C;
		  /* 82189F0Ch */ case   18:  		/* addi R11, R11, -1 */
		/* 82189F0Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82189F0Ch case   18:*/		return 0x82189F10;
		  /* 82189F10h */ case   19:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82189F10h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82189F10h case   19:*/		return 0x82189F14;
		  /* 82189F14h */ case   20:  		/* rlwinm R9, R3, 29, 3, 28 */
		/* 82189F14h case   20:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R9,regs.R3);
		/* 82189F14h case   20:*/		return 0x82189F18;
		  /* 82189F18h */ case   21:  		/* and R11, R10, R11 */
		/* 82189F18h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82189F18h case   21:*/		return 0x82189F1C;
		  /* 82189F1Ch */ case   22:  		/* rldicl R10, R3, 0, 58 */
		/* 82189F1Ch case   22:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 82189F1Ch case   22:*/		return 0x82189F20;
		  /* 82189F20h */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82189F20h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82189F20h case   23:*/		return 0x82189F24;
		  /* 82189F24h */ case   24:  		/* sld R10, R17, R10 */
		/* 82189F24h case   24:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 82189F24h case   24:*/		return 0x82189F28;
		  /* 82189F28h */ case   25:  		/* lwzx R11, <#[R11 + R27]> */
		/* 82189F28h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82189F28h case   25:*/		return 0x82189F2C;
		  /* 82189F2Ch */ case   26:  		/* ldx R11, <#[R11 + R9]> */
		/* 82189F2Ch case   26:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82189F2Ch case   26:*/		return 0x82189F30;
		  /* 82189F30h */ case   27:  		/* and R11, R11, R10 */
		/* 82189F30h case   27:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82189F30h case   27:*/		return 0x82189F34;
		  /* 82189F34h */ case   28:  		/* cmpldi CR6, R11, 0 */
		/* 82189F34h case   28:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82189F34h case   28:*/		return 0x82189F38;
		  /* 82189F38h */ case   29:  		/* mr R11, R17 */
		/* 82189F38h case   29:*/		regs.R11 = regs.R17;
		/* 82189F38h case   29:*/		return 0x82189F3C;
		  /* 82189F3Ch */ case   30:  		/* bc 4, CR6_EQ, 8 */
		/* 82189F3Ch case   30:*/		if ( !regs.CR[6].eq ) { return 0x82189F44;  }
		/* 82189F3Ch case   30:*/		return 0x82189F40;
		  /* 82189F40h */ case   31:  		/* li R11, 0 */
		/* 82189F40h case   31:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82189F40h case   31:*/		return 0x82189F44;
	}
	return 0x82189F44;
} // Block from 82189EC4h-82189F44h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82189F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189F44);
		  /* 82189F44h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82189F44h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82189F44h case    0:*/		return 0x82189F48;
		  /* 82189F48h */ case    1:  		/* bc 12, CR0_EQ, 376 */
		/* 82189F48h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218A0C0;  }
		/* 82189F48h case    1:*/		return 0x82189F4C;
		  /* 82189F4Ch */ case    2:  		/* mr R26, R17 */
		/* 82189F4Ch case    2:*/		regs.R26 = regs.R17;
		/* 82189F4Ch case    2:*/		return 0x82189F50;
	}
	return 0x82189F50;
} // Block from 82189F44h-82189F50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82189F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189F50);
		  /* 82189F50h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 82189F50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 82189F50h case    0:*/		return 0x82189F54;
		  /* 82189F54h */ case    1:  		/* bc 4, CR0_EQ, 344 */
		/* 82189F54h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218A0AC;  }
		/* 82189F54h case    1:*/		return 0x82189F58;
	}
	return 0x82189F58;
} // Block from 82189F50h-82189F58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82189F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189F58);
		  /* 82189F58h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82189F58h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82189F58h case    0:*/		return 0x82189F5C;
	}
	return 0x82189F5C;
} // Block from 82189F58h-82189F5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82189F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189F5C);
		  /* 82189F5Ch */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 82189F5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82189F5Ch case    0:*/		return 0x82189F60;
		  /* 82189F60h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82189F60h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82189F60h case    1:*/		return 0x82189F64;
		  /* 82189F64h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82189F64h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82189F74;  }
		/* 82189F64h case    2:*/		return 0x82189F68;
		  /* 82189F68h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82189F68h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82189F68h case    3:*/		return 0x82189F6C;
		  /* 82189F6Ch */ case    4:  		/* mr R29, R11 */
		/* 82189F6Ch case    4:*/		regs.R29 = regs.R11;
		/* 82189F6Ch case    4:*/		return 0x82189F70;
		  /* 82189F70h */ case    5:  		/* bc 4, CR6_EQ, -240 */
		/* 82189F70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82189E80;  }
		/* 82189F70h case    5:*/		return 0x82189F74;
	}
	return 0x82189F74;
} // Block from 82189F5Ch-82189F74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82189F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82189F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82189F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82189F74);
		  /* 82189F74h */ case    0:  		/* add R4, R24, R14 */
		/* 82189F74h case    0:*/		cpu::op::add<0>(regs,&regs.R4,regs.R24,regs.R14);
		/* 82189F74h case    0:*/		return 0x82189F78;
		  /* 82189F78h */ case    1:  		/* mr R3, R30 */
		/* 82189F78h case    1:*/		regs.R3 = regs.R30;
		/* 82189F78h case    1:*/		return 0x82189F7C;
		  /* 82189F7Ch */ case    2:  		/* bl -26140 */
		/* 82189F7Ch case    2:*/		regs.LR = 0x82189F80; return 0x82183960;
		/* 82189F7Ch case    2:*/		return 0x82189F80;
		  /* 82189F80h */ case    3:  		/* lwz R11, <#[R30 + 672]> */
		/* 82189F80h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 82189F80h case    3:*/		return 0x82189F84;
		  /* 82189F84h */ case    4:  		/* rlwinm R7, R3, 1, 0, 30 */
		/* 82189F84h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R3);
		/* 82189F84h case    4:*/		return 0x82189F88;
		  /* 82189F88h */ case    5:  		/* lwz R8, <#[R30 + 692]> */
		/* 82189F88h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000002B4) );
		/* 82189F88h case    5:*/		return 0x82189F8C;
		  /* 82189F8Ch */ case    6:  		/* mullw R10, R11, R28 */
		/* 82189F8Ch case    6:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 82189F8Ch case    6:*/		return 0x82189F90;
		  /* 82189F90h */ case    7:  		/* lwz R11, <#[R30 + 684]> */
		/* 82189F90h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002AC) );
		/* 82189F90h case    7:*/		return 0x82189F94;
		  /* 82189F94h */ case    8:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82189F94h case    8:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82189F94h case    8:*/		return 0x82189F98;
		  /* 82189F98h */ case    9:  		/* rlwinm R6, R3, 1, 0, 25 */
		/* 82189F98h case    9:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R6,regs.R3);
		/* 82189F98h case    9:*/		return 0x82189F9C;
		  /* 82189F9Ch */ case   10:  		/* rlwinm R5, R3, 30, 3, 28 */
		/* 82189F9Ch case   10:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R5,regs.R3);
		/* 82189F9Ch case   10:*/		return 0x82189FA0;
		  /* 82189FA0h */ case   11:  		/* subf R9, R7, R7 */
		/* 82189FA0h case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R7);
		/* 82189FA0h case   11:*/		return 0x82189FA4;
		  /* 82189FA4h */ case   12:  		/* add R11, R10, R11 */
		/* 82189FA4h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82189FA4h case   12:*/		return 0x82189FA8;
		  /* 82189FA8h */ case   13:  		/* subf R10, R6, R7 */
		/* 82189FA8h case   13:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R6,regs.R7);
		/* 82189FA8h case   13:*/		return 0x82189FAC;
		  /* 82189FACh */ case   14:  		/* rlwinm R29, R3, 29, 3, 28 */
		/* 82189FACh case   14:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R29,regs.R3);
		/* 82189FACh case   14:*/		return 0x82189FB0;
		  /* 82189FB0h */ case   15:  		/* addi R9, R9, 1 */
		/* 82189FB0h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82189FB0h case   15:*/		return 0x82189FB4;
		  /* 82189FB4h */ case   16:  		/* ldx R8, <#[R5 + R8]> */
		/* 82189FB4h case   16:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R5 + regs.R8 + 0x00000000) );
		/* 82189FB4h case   16:*/		return 0x82189FB8;
		  /* 82189FB8h */ case   17:  		/* rldicl R7, R3, 0, 58 */
		/* 82189FB8h case   17:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R7,regs.R3);
		/* 82189FB8h case   17:*/		return 0x82189FBC;
		  /* 82189FBCh */ case   18:  		/* rldicl R10, R10, 0, 32 */
		/* 82189FBCh case   18:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 82189FBCh case   18:*/		return 0x82189FC0;
		  /* 82189FC0h */ case   19:  		/* rldicl R9, R9, 0, 32 */
		/* 82189FC0h case   19:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 82189FC0h case   19:*/		return 0x82189FC4;
		  /* 82189FC4h */ case   20:  		/* sld R7, R17, R7 */
		/* 82189FC4h case   20:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R17,regs.R7);
		/* 82189FC4h case   20:*/		return 0x82189FC8;
		  /* 82189FC8h */ case   21:  		/* ldx R6, <#[R29 + R11]> */
		/* 82189FC8h case   21:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82189FC8h case   21:*/		return 0x82189FCC;
		  /* 82189FCCh */ case   22:  		/* srd R8, R8, R10 */
		/* 82189FCCh case   22:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 82189FCCh case   22:*/		return 0x82189FD0;
		  /* 82189FD0h */ case   23:  		/* slw R10, R21, R9 */
		/* 82189FD0h case   23:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R21,regs.R9);
		/* 82189FD0h case   23:*/		return 0x82189FD4;
		  /* 82189FD4h */ case   24:  		/* nor R26, R7, R7 */
		/* 82189FD4h case   24:*/		cpu::op::nor<0>(regs,&regs.R26,regs.R7,regs.R7);
		/* 82189FD4h case   24:*/		return 0x82189FD8;
		  /* 82189FD8h */ case   25:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82189FD8h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82189FD8h case   25:*/		return 0x82189FDC;
		  /* 82189FDCh */ case   26:  		/* addi R10, R10, -1 */
		/* 82189FDCh case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82189FDCh case   26:*/		return 0x82189FE0;
		  /* 82189FE0h */ case   27:  		/* and R8, R26, R6 */
		/* 82189FE0h case   27:*/		cpu::op::and<0>(regs,&regs.R8,regs.R26,regs.R6);
		/* 82189FE0h case   27:*/		return 0x82189FE4;
		  /* 82189FE4h */ case   28:  		/* mr R31, R3 */
		/* 82189FE4h case   28:*/		regs.R31 = regs.R3;
		/* 82189FE4h case   28:*/		return 0x82189FE8;
		  /* 82189FE8h */ case   29:  		/* and R25, R9, R10 */
		/* 82189FE8h case   29:*/		cpu::op::and<0>(regs,&regs.R25,regs.R9,regs.R10);
		/* 82189FE8h case   29:*/		return 0x82189FEC;
		  /* 82189FECh */ case   30:  		/* stdx R8, <#[R29 + R11]> */
		/* 82189FECh case   30:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82189FECh case   30:*/		return 0x82189FF0;
		  /* 82189FF0h */ case   31:  		/* cmplwi CR6, R27, 0 */
		/* 82189FF0h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82189FF0h case   31:*/		return 0x82189FF4;
		  /* 82189FF4h */ case   32:  		/* bc 4, CR6_EQ, 44 */
		/* 82189FF4h case   32:*/		if ( !regs.CR[6].eq ) { return 0x8218A020;  }
		/* 82189FF4h case   32:*/		return 0x82189FF8;
		  /* 82189FF8h */ case   33:  		/* mr R3, R30 */
		/* 82189FF8h case   33:*/		regs.R3 = regs.R30;
		/* 82189FF8h case   33:*/		return 0x82189FFC;
		  /* 82189FFCh */ case   34:  		/* bl -20556 */
		/* 82189FFCh case   34:*/		regs.LR = 0x8218A000; return 0x82184FB0;
		/* 82189FFCh case   34:*/		return 0x8218A000;
		  /* 8218A000h */ case   35:  		/* mr R27, R3 */
		/* 8218A000h case   35:*/		regs.R27 = regs.R3;
		/* 8218A000h case   35:*/		return 0x8218A004;
		  /* 8218A004h */ case   36:  		/* mr R4, R3 */
		/* 8218A004h case   36:*/		regs.R4 = regs.R3;
		/* 8218A004h case   36:*/		return 0x8218A008;
		  /* 8218A008h */ case   37:  		/* li R8, 0 */
		/* 8218A008h case   37:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218A008h case   37:*/		return 0x8218A00C;
		  /* 8218A00Ch */ case   38:  		/* li R7, 0 */
		/* 8218A00Ch case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8218A00Ch case   38:*/		return 0x8218A010;
		  /* 8218A010h */ case   39:  		/* mr R6, R28 */
		/* 8218A010h case   39:*/		regs.R6 = regs.R28;
		/* 8218A010h case   39:*/		return 0x8218A014;
		  /* 8218A014h */ case   40:  		/* mr R5, R23 */
		/* 8218A014h case   40:*/		regs.R5 = regs.R23;
		/* 8218A014h case   40:*/		return 0x8218A018;
		  /* 8218A018h */ case   41:  		/* mr R3, R30 */
		/* 8218A018h case   41:*/		regs.R3 = regs.R30;
		/* 8218A018h case   41:*/		return 0x8218A01C;
		  /* 8218A01Ch */ case   42:  		/* bl -22588 */
		/* 8218A01Ch case   42:*/		regs.LR = 0x8218A020; return 0x821847E0;
		/* 8218A01Ch case   42:*/		return 0x8218A020;
	}
	return 0x8218A020;
} // Block from 82189F74h-8218A020h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8218A020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A020);
		  /* 8218A020h */ case    0:  		/* rlwinm R9, R28, 1, 0, 30 */
		/* 8218A020h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R28);
		/* 8218A020h case    0:*/		return 0x8218A024;
		  /* 8218A024h */ case    1:  		/* lwz R8, <#[R30 + 692]> */
		/* 8218A024h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000002B4) );
		/* 8218A024h case    1:*/		return 0x8218A028;
		  /* 8218A028h */ case    2:  		/* rlwinm R7, R28, 1, 0, 25 */
		/* 8218A028h case    2:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R7,regs.R28);
		/* 8218A028h case    2:*/		return 0x8218A02C;
		  /* 8218A02Ch */ case    3:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A02Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A02Ch case    3:*/		return 0x8218A030;
		  /* 8218A030h */ case    4:  		/* subf R11, R9, R9 */
		/* 8218A030h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R9);
		/* 8218A030h case    4:*/		return 0x8218A034;
		  /* 8218A034h */ case    5:  		/* lwz R10, <#[R30 + 684]> */
		/* 8218A034h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218A034h case    5:*/		return 0x8218A038;
		  /* 8218A038h */ case    6:  		/* rlwinm R6, R28, 30, 3, 28 */
		/* 8218A038h case    6:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R6,regs.R28);
		/* 8218A038h case    6:*/		return 0x8218A03C;
		  /* 8218A03Ch */ case    7:  		/* subf R9, R7, R9 */
		/* 8218A03Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8218A03Ch case    7:*/		return 0x8218A040;
		  /* 8218A040h */ case    8:  		/* addi R11, R11, 1 */
		/* 8218A040h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218A040h case    8:*/		return 0x8218A044;
		  /* 8218A044h */ case    9:  		/* rldicl R9, R9, 0, 32 */
		/* 8218A044h case    9:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 8218A044h case    9:*/		return 0x8218A048;
		  /* 8218A048h */ case   10:  		/* rldicl R11, R11, 0, 32 */
		/* 8218A048h case   10:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8218A048h case   10:*/		return 0x8218A04C;
		  /* 8218A04Ch */ case   11:  		/* ldx R8, <#[R6 + R8]> */
		/* 8218A04Ch case   11:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 8218A04Ch case   11:*/		return 0x8218A050;
		  /* 8218A050h */ case   12:  		/* mullw R7, R5, R31 */
		/* 8218A050h case   12:*/		cpu::op::mullw<0>(regs,&regs.R7,regs.R5,regs.R31);
		/* 8218A050h case   12:*/		return 0x8218A054;
		  /* 8218A054h */ case   13:  		/* slw R11, R21, R11 */
		/* 8218A054h case   13:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 8218A054h case   13:*/		return 0x8218A058;
		  /* 8218A058h */ case   14:  		/* srd R9, R8, R9 */
		/* 8218A058h case   14:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8218A058h case   14:*/		return 0x8218A05C;
		  /* 8218A05Ch */ case   15:  		/* addi R8, R11, -1 */
		/* 8218A05Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 8218A05Ch case   15:*/		return 0x8218A060;
		  /* 8218A060h */ case   16:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8218A060h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8218A060h case   16:*/		return 0x8218A064;
		  /* 8218A064h */ case   17:  		/* rlwinm R11, R7, 3, 0, 28 */
		/* 8218A064h case   17:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R7);
		/* 8218A064h case   17:*/		return 0x8218A068;
		  /* 8218A068h */ case   18:  		/* and R28, R9, R8 */
		/* 8218A068h case   18:*/		cpu::op::and<0>(regs,&regs.R28,regs.R9,regs.R8);
		/* 8218A068h case   18:*/		return 0x8218A06C;
		  /* 8218A06Ch */ case   19:  		/* add R3, R11, R10 */
		/* 8218A06Ch case   19:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8218A06Ch case   19:*/		return 0x8218A070;
		  /* 8218A070h */ case   20:  		/* rlwinm R31, R28, 2, 0, 29 */
		/* 8218A070h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R28);
		/* 8218A070h case   20:*/		return 0x8218A074;
		  /* 8218A074h */ case   21:  		/* lwzx R4, <#[R31 + R27]> */
		/* 8218A074h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R27 + 0x00000000) );
		/* 8218A074h case   21:*/		return 0x8218A078;
		  /* 8218A078h */ case   22:  		/* bl -25480 */
		/* 8218A078h case   22:*/		regs.LR = 0x8218A07C; return 0x82183CF0;
		/* 8218A078h case   22:*/		return 0x8218A07C;
		  /* 8218A07Ch */ case   23:  		/* addi R11, R25, 4 */
		/* 8218A07Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x4);
		/* 8218A07Ch case   23:*/		return 0x8218A080;
		  /* 8218A080h */ case   24:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A080h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A080h case   24:*/		return 0x8218A084;
		  /* 8218A084h */ case   25:  		/* lwzx R4, <#[R31 + R27]> */
		/* 8218A084h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R27 + 0x00000000) );
		/* 8218A084h case   25:*/		return 0x8218A088;
		  /* 8218A088h */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218A088h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218A088h case   26:*/		return 0x8218A08C;
		  /* 8218A08Ch */ case   27:  		/* lwzx R3, <#[R11 + R19]> */
		/* 8218A08Ch case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 8218A08Ch case   27:*/		return 0x8218A090;
		  /* 8218A090h */ case   28:  		/* bl -25504 */
		/* 8218A090h case   28:*/		regs.LR = 0x8218A094; return 0x82183CF0;
		/* 8218A090h case   28:*/		return 0x8218A094;
		  /* 8218A094h */ case   29:  		/* addi R11, R28, 4 */
		/* 8218A094h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x4);
		/* 8218A094h case   29:*/		return 0x8218A098;
		  /* 8218A098h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218A098h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218A098h case   30:*/		return 0x8218A09C;
		  /* 8218A09Ch */ case   31:  		/* lwzx R11, <#[R11 + R27]> */
		/* 8218A09Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8218A09Ch case   31:*/		return 0x8218A0A0;
		  /* 8218A0A0h */ case   32:  		/* ldx R10, <#[R29 + R11]> */
		/* 8218A0A0h case   32:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8218A0A0h case   32:*/		return 0x8218A0A4;
		  /* 8218A0A4h */ case   33:  		/* and R10, R10, R26 */
		/* 8218A0A4h case   33:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R26);
		/* 8218A0A4h case   33:*/		return 0x8218A0A8;
		  /* 8218A0A8h */ case   34:  		/* stdx R10, <#[R29 + R11]> */
		/* 8218A0A8h case   34:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8218A0A8h case   34:*/		return 0x8218A0AC;
	}
	return 0x8218A0AC;
} // Block from 8218A020h-8218A0ACh (35 instructions)

//////////////////////////////////////////////////////
// Block at 8218A0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A0AC);
		  /* 8218A0ACh */ case    0:  		/* addi R24, R24, 1 */
		/* 8218A0ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8218A0ACh case    0:*/		return 0x8218A0B0;
		  /* 8218A0B0h */ case    1:  		/* addi R22, R22, 4 */
		/* 8218A0B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 8218A0B0h case    1:*/		return 0x8218A0B4;
		  /* 8218A0B4h */ case    2:  		/* b -672 */
		/* 8218A0B4h case    2:*/		return 0x82189E14;
		/* 8218A0B4h case    2:*/		return 0x8218A0B8;
	}
	return 0x8218A0B8;
} // Block from 8218A0ACh-8218A0B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218A0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A0B8);
		  /* 8218A0B8h */ case    0:  		/* cmplw CR6, R3, R28 */
		/* 8218A0B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 8218A0B8h case    0:*/		return 0x8218A0BC;
		  /* 8218A0BCh */ case    1:  		/* bc 12, CR6_EQ, -368 */
		/* 8218A0BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82189F4C;  }
		/* 8218A0BCh case    1:*/		return 0x8218A0C0;
	}
	return 0x8218A0C0;
} // Block from 8218A0B8h-8218A0C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218A0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A0C0);
		  /* 8218A0C0h */ case    0:  		/* addi R11, R31, -1 */
		/* 8218A0C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 8218A0C0h case    0:*/		return 0x8218A0C4;
		  /* 8218A0C4h */ case    1:  		/* andc R11, R31, R11 */
		/* 8218A0C4h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 8218A0C4h case    1:*/		return 0x8218A0C8;
		  /* 8218A0C8h */ case    2:  		/* subf R31, R11, R31 */
		/* 8218A0C8h case    2:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8218A0C8h case    2:*/		return 0x8218A0CC;
		  /* 8218A0CCh */ case    3:  		/* b -568 */
		/* 8218A0CCh case    3:*/		return 0x82189E94;
		/* 8218A0CCh case    3:*/		return 0x8218A0D0;
	}
	return 0x8218A0D0;
} // Block from 8218A0C0h-8218A0D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218A0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A0D0);
		  /* 8218A0D0h */ case    0:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 8218A0D0h case    0:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 8218A0D0h case    0:*/		return 0x8218A0D4;
		  /* 8218A0D4h */ case    1:  		/* lwz R16, <#[R1 + 84]> */
		/* 8218A0D4h case    1:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 8218A0D4h case    1:*/		return 0x8218A0D8;
		  /* 8218A0D8h */ case    2:  		/* li R17, 1 */
		/* 8218A0D8h case    2:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 8218A0D8h case    2:*/		return 0x8218A0DC;
		  /* 8218A0DCh */ case    3:  		/* subf R22, R20, R11 */
		/* 8218A0DCh case    3:*/		cpu::op::subf<0>(regs,&regs.R22,regs.R20,regs.R11);
		/* 8218A0DCh case    3:*/		return 0x8218A0E0;
		  /* 8218A0E0h */ case    4:  		/* li R24, 0 */
		/* 8218A0E0h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8218A0E0h case    4:*/		return 0x8218A0E4;
		  /* 8218A0E4h */ case    5:  		/* mr R3, R30 */
		/* 8218A0E4h case    5:*/		regs.R3 = regs.R30;
		/* 8218A0E4h case    5:*/		return 0x8218A0E8;
		  /* 8218A0E8h */ case    6:  		/* bl -20792 */
		/* 8218A0E8h case    6:*/		regs.LR = 0x8218A0EC; return 0x82184FB0;
		/* 8218A0E8h case    6:*/		return 0x8218A0EC;
		  /* 8218A0ECh */ case    7:  		/* addi R11, R1, 104 */
		/* 8218A0ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 8218A0ECh case    7:*/		return 0x8218A0F0;
		  /* 8218A0F0h */ case    8:  		/* lwz R7, <#[R15 + 8]> */
		/* 8218A0F0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R15 + 0x00000008) );
		/* 8218A0F0h case    8:*/		return 0x8218A0F4;
		  /* 8218A0F4h */ case    9:  		/* mr R21, R3 */
		/* 8218A0F4h case    9:*/		regs.R21 = regs.R3;
		/* 8218A0F4h case    9:*/		return 0x8218A0F8;
		  /* 8218A0F8h */ case   10:  		/* mr R4, R3 */
		/* 8218A0F8h case   10:*/		regs.R4 = regs.R3;
		/* 8218A0F8h case   10:*/		return 0x8218A0FC;
		  /* 8218A0FCh */ case   11:  		/* li R10, 1 */
		/* 8218A0FCh case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8218A0FCh case   11:*/		return 0x8218A100;
		  /* 8218A100h */ case   12:  		/* li R9, 0 */
		/* 8218A100h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8218A100h case   12:*/		return 0x8218A104;
		  /* 8218A104h */ case   13:  		/* stw R24, <#[R11]> */
		/* 8218A104h case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 8218A104h case   13:*/		return 0x8218A108;
		  /* 8218A108h */ case   14:  		/* li R8, 0 */
		/* 8218A108h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218A108h case   14:*/		return 0x8218A10C;
		  /* 8218A10Ch */ case   15:  		/* rlwinm R7, R7, 13, 29, 31 */
		/* 8218A10Ch case   15:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R7,regs.R7);
		/* 8218A10Ch case   15:*/		return 0x8218A110;
		  /* 8218A110h */ case   16:  		/* mr R5, R19 */
		/* 8218A110h case   16:*/		regs.R5 = regs.R19;
		/* 8218A110h case   16:*/		return 0x8218A114;
		  /* 8218A114h */ case   17:  		/* mr R3, R30 */
		/* 8218A114h case   17:*/		regs.R3 = regs.R30;
		/* 8218A114h case   17:*/		return 0x8218A118;
		  /* 8218A118h */ case   18:  		/* lwz R11, <#[R1 + 104]> */
		/* 8218A118h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8218A118h case   18:*/		return 0x8218A11C;
		  /* 8218A11Ch */ case   19:  		/* ori R11, R11, 256 */
		/* 8218A11Ch case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8218A11Ch case   19:*/		return 0x8218A120;
		  /* 8218A120h */ case   20:  		/* ori R11, R11, 4096 */
		/* 8218A120h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 8218A120h case   20:*/		return 0x8218A124;
		  /* 8218A124h */ case   21:  		/* oris R11, R11, 2 */
		/* 8218A124h case   21:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8218A124h case   21:*/		return 0x8218A128;
		  /* 8218A128h */ case   22:  		/* oris R11, R11, 32 */
		/* 8218A128h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8218A128h case   22:*/		return 0x8218A12C;
		  /* 8218A12Ch */ case   23:  		/* oris R11, R11, 768 */
		/* 8218A12Ch case   23:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x300);
		/* 8218A12Ch case   23:*/		return 0x8218A130;
		  /* 8218A130h */ case   24:  		/* oris R6, R11, 12288 */
		/* 8218A130h case   24:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R11,0x3000);
		/* 8218A130h case   24:*/		return 0x8218A134;
		  /* 8218A134h */ case   25:  		/* stw R6, <#[R1 + 104]> */
		/* 8218A134h case   25:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000068) );
		/* 8218A134h case   25:*/		return 0x8218A138;
		  /* 8218A138h */ case   26:  		/* bl -14528 */
		/* 8218A138h case   26:*/		regs.LR = 0x8218A13C; return 0x82186878;
		/* 8218A138h case   26:*/		return 0x8218A13C;
		  /* 8218A13Ch */ case   27:  		/* mr R27, R20 */
		/* 8218A13Ch case   27:*/		regs.R27 = regs.R20;
		/* 8218A13Ch case   27:*/		return 0x8218A140;
		  /* 8218A140h */ case   28:  		/* cmplwi CR6, R20, 0 */
		/* 8218A140h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8218A140h case   28:*/		return 0x8218A144;
		  /* 8218A144h */ case   29:  		/* bc 12, CR6_EQ, 592 */
		/* 8218A144h case   29:*/		if ( regs.CR[6].eq ) { return 0x8218A394;  }
		/* 8218A144h case   29:*/		return 0x8218A148;
		  /* 8218A148h */ case   30:  		/* addi R11, R27, -1 */
		/* 8218A148h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 8218A148h case   30:*/		return 0x8218A14C;
		  /* 8218A14Ch */ case   31:  		/* mr R3, R30 */
		/* 8218A14Ch case   31:*/		regs.R3 = regs.R30;
		/* 8218A14Ch case   31:*/		return 0x8218A150;
		  /* 8218A150h */ case   32:  		/* andc R11, R27, R11 */
		/* 8218A150h case   32:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 8218A150h case   32:*/		return 0x8218A154;
		  /* 8218A154h */ case   33:  		/* cntlzw R10, R11 */
		/* 8218A154h case   33:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R11);
		/* 8218A154h case   33:*/		return 0x8218A158;
		  /* 8218A158h */ case   34:  		/* subf R27, R11, R27 */
		/* 8218A158h case   34:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 8218A158h case   34:*/		return 0x8218A15C;
		  /* 8218A15Ch */ case   35:  		/* subfic R26, R10, 31 */
		/* 8218A15Ch case   35:*/		cpu::op::subfic<0>(regs,&regs.R26,regs.R10,0x1F);
		/* 8218A15Ch case   35:*/		return 0x8218A160;
		  /* 8218A160h */ case   36:  		/* addi R11, R26, 11 */
		/* 8218A160h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xB);
		/* 8218A160h case   36:*/		return 0x8218A164;
		  /* 8218A164h */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218A164h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218A164h case   37:*/		return 0x8218A168;
		  /* 8218A168h */ case   38:  		/* lwzx R11, <#[R11 + R15]> */
		/* 8218A168h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 8218A168h case   38:*/		return 0x8218A16C;
		  /* 8218A16Ch */ case   39:  		/* lwz R23, <#[R11 + 12]> */
		/* 8218A16Ch case   39:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 8218A16Ch case   39:*/		return 0x8218A170;
		  /* 8218A170h */ case   40:  		/* lwz R11, <#[R11]> */
		/* 8218A170h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218A170h case   40:*/		return 0x8218A174;
		  /* 8218A174h */ case   41:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 8218A174h case   41:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 8218A174h case   41:*/		return 0x8218A178;
		  /* 8218A178h */ case   42:  		/* lhz R10, <#[R23 + 18]> */
		/* 8218A178h case   42:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000012) );
		/* 8218A178h case   42:*/		return 0x8218A17C;
		  /* 8218A17Ch */ case   43:  		/* add R29, R10, R11 */
		/* 8218A17Ch case   43:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 8218A17Ch case   43:*/		return 0x8218A180;
		  /* 8218A180h */ case   44:  		/* mr R4, R29 */
		/* 8218A180h case   44:*/		regs.R4 = regs.R29;
		/* 8218A180h case   44:*/		return 0x8218A184;
		  /* 8218A184h */ case   45:  		/* bl -26660 */
		/* 8218A184h case   45:*/		regs.LR = 0x8218A188; return 0x82183960;
		/* 8218A184h case   45:*/		return 0x8218A188;
		  /* 8218A188h */ case   46:  		/* lwz R11, <#[R30 + 688]> */
		/* 8218A188h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 8218A188h case   46:*/		return 0x8218A18C;
		  /* 8218A18Ch */ case   47:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8218A18Ch case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8218A18Ch case   47:*/		return 0x8218A190;
		  /* 8218A190h */ case   48:  		/* mr R31, R3 */
		/* 8218A190h case   48:*/		regs.R31 = regs.R3;
		/* 8218A190h case   48:*/		return 0x8218A194;
		  /* 8218A194h */ case   49:  		/* lwzx R28, <#[R10 + R11]> */
		/* 8218A194h case   49:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218A194h case   49:*/		return 0x8218A198;
		  /* 8218A198h */ case   50:  		/* cmplwi CR6, R28, 0 */
		/* 8218A198h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8218A198h case   50:*/		return 0x8218A19C;
		  /* 8218A19Ch */ case   51:  		/* bc 4, CR6_EQ, 44 */
		/* 8218A19Ch case   51:*/		if ( !regs.CR[6].eq ) { return 0x8218A1C8;  }
		/* 8218A19Ch case   51:*/		return 0x8218A1A0;
		  /* 8218A1A0h */ case   52:  		/* mr R3, R30 */
		/* 8218A1A0h case   52:*/		regs.R3 = regs.R30;
		/* 8218A1A0h case   52:*/		return 0x8218A1A4;
		  /* 8218A1A4h */ case   53:  		/* bl -20980 */
		/* 8218A1A4h case   53:*/		regs.LR = 0x8218A1A8; return 0x82184FB0;
		/* 8218A1A4h case   53:*/		return 0x8218A1A8;
		  /* 8218A1A8h */ case   54:  		/* mr R28, R3 */
		/* 8218A1A8h case   54:*/		regs.R28 = regs.R3;
		/* 8218A1A8h case   54:*/		return 0x8218A1AC;
		  /* 8218A1ACh */ case   55:  		/* mr R4, R3 */
		/* 8218A1ACh case   55:*/		regs.R4 = regs.R3;
		/* 8218A1ACh case   55:*/		return 0x8218A1B0;
		  /* 8218A1B0h */ case   56:  		/* li R8, 0 */
		/* 8218A1B0h case   56:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218A1B0h case   56:*/		return 0x8218A1B4;
		  /* 8218A1B4h */ case   57:  		/* li R7, 0 */
		/* 8218A1B4h case   57:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8218A1B4h case   57:*/		return 0x8218A1B8;
		  /* 8218A1B8h */ case   58:  		/* mr R6, R31 */
		/* 8218A1B8h case   58:*/		regs.R6 = regs.R31;
		/* 8218A1B8h case   58:*/		return 0x8218A1BC;
		  /* 8218A1BCh */ case   59:  		/* mr R5, R29 */
		/* 8218A1BCh case   59:*/		regs.R5 = regs.R29;
		/* 8218A1BCh case   59:*/		return 0x8218A1C0;
		  /* 8218A1C0h */ case   60:  		/* mr R3, R30 */
		/* 8218A1C0h case   60:*/		regs.R3 = regs.R30;
		/* 8218A1C0h case   60:*/		return 0x8218A1C4;
		  /* 8218A1C4h */ case   61:  		/* bl -23012 */
		/* 8218A1C4h case   61:*/		regs.LR = 0x8218A1C8; return 0x821847E0;
		/* 8218A1C4h case   61:*/		return 0x8218A1C8;
	}
	return 0x8218A1C8;
} // Block from 8218A0D0h-8218A1C8h (62 instructions)

//////////////////////////////////////////////////////
// Block at 8218A1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A1C8);
		  /* 8218A1C8h */ case    0:  		/* rlwinm R10, R31, 1, 0, 30 */
		/* 8218A1C8h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R31);
		/* 8218A1C8h case    0:*/		return 0x8218A1CC;
		  /* 8218A1CCh */ case    1:  		/* lwz R9, <#[R30 + 692]> */
		/* 8218A1CCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000002B4) );
		/* 8218A1CCh case    1:*/		return 0x8218A1D0;
		  /* 8218A1D0h */ case    2:  		/* rlwinm R8, R31, 1, 0, 25 */
		/* 8218A1D0h case    2:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R8,regs.R31);
		/* 8218A1D0h case    2:*/		return 0x8218A1D4;
		  /* 8218A1D4h */ case    3:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A1D4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A1D4h case    3:*/		return 0x8218A1D8;
		  /* 8218A1D8h */ case    4:  		/* subf R11, R10, R10 */
		/* 8218A1D8h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R10);
		/* 8218A1D8h case    4:*/		return 0x8218A1DC;
		  /* 8218A1DCh */ case    5:  		/* rlwinm R7, R31, 30, 3, 28 */
		/* 8218A1DCh case    5:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R7,regs.R31);
		/* 8218A1DCh case    5:*/		return 0x8218A1E0;
		  /* 8218A1E0h */ case    6:  		/* addi R11, R11, 1 */
		/* 8218A1E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218A1E0h case    6:*/		return 0x8218A1E4;
		  /* 8218A1E4h */ case    7:  		/* subf R10, R8, R10 */
		/* 8218A1E4h case    7:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8218A1E4h case    7:*/		return 0x8218A1E8;
		  /* 8218A1E8h */ case    8:  		/* rldicl R11, R11, 0, 32 */
		/* 8218A1E8h case    8:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8218A1E8h case    8:*/		return 0x8218A1EC;
		  /* 8218A1ECh */ case    9:  		/* rldicl R10, R10, 0, 32 */
		/* 8218A1ECh case    9:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 8218A1ECh case    9:*/		return 0x8218A1F0;
		  /* 8218A1F0h */ case   10:  		/* ldx R9, <#[R7 + R9]> */
		/* 8218A1F0h case   10:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8218A1F0h case   10:*/		return 0x8218A1F4;
		  /* 8218A1F4h */ case   11:  		/* li R8, 2 */
		/* 8218A1F4h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 8218A1F4h case   11:*/		return 0x8218A1F8;
		  /* 8218A1F8h */ case   12:  		/* li R4, 0 */
		/* 8218A1F8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218A1F8h case   12:*/		return 0x8218A1FC;
		  /* 8218A1FCh */ case   13:  		/* slw R11, R8, R11 */
		/* 8218A1FCh case   13:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8218A1FCh case   13:*/		return 0x8218A200;
		  /* 8218A200h */ case   14:  		/* srd R10, R9, R10 */
		/* 8218A200h case   14:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8218A200h case   14:*/		return 0x8218A204;
		  /* 8218A204h */ case   15:  		/* addi R11, R11, -1 */
		/* 8218A204h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A204h case   15:*/		return 0x8218A208;
		  /* 8218A208h */ case   16:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8218A208h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8218A208h case   16:*/		return 0x8218A20C;
		  /* 8218A20Ch */ case   17:  		/* and R11, R10, R11 */
		/* 8218A20Ch case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218A20Ch case   17:*/		return 0x8218A210;
		  /* 8218A210h */ case   18:  		/* rlwinm R25, R11, 2, 0, 29 */
		/* 8218A210h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R11);
		/* 8218A210h case   18:*/		return 0x8218A214;
		  /* 8218A214h */ case   19:  		/* lwzx R3, <#[R25 + R28]> */
		/* 8218A214h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + regs.R28 + 0x00000000) );
		/* 8218A214h case   19:*/		return 0x8218A218;
		  /* 8218A218h */ case   20:  		/* bl -111296 */
		/* 8218A218h case   20:*/		regs.LR = 0x8218A21C; return 0x8216EF58;
		/* 8218A218h case   20:*/		return 0x8218A21C;
		  /* 8218A21Ch */ case   21:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218A21Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218A21Ch case   21:*/		return 0x8218A220;
		  /* 8218A220h */ case   22:  		/* mr R31, R3 */
		/* 8218A220h case   22:*/		regs.R31 = regs.R3;
		/* 8218A220h case   22:*/		return 0x8218A224;
		  /* 8218A224h */ case   23:  		/* addi R11, R11, -1 */
		/* 8218A224h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A224h case   23:*/		return 0x8218A228;
		  /* 8218A228h */ case   24:  		/* cmplw CR6, R3, R11 */
		/* 8218A228h case   24:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8218A228h case   24:*/		return 0x8218A22C;
		  /* 8218A22Ch */ case   25:  		/* bc 12, CR6_GT, 352 */
		/* 8218A22Ch case   25:*/		if ( regs.CR[6].gt ) { return 0x8218A38C;  }
		/* 8218A22Ch case   25:*/		return 0x8218A230;
		  /* 8218A230h */ case   26:  		/* rlwinm R24, R26, 2, 0, 29 */
		/* 8218A230h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R26);
		/* 8218A230h case   26:*/		return 0x8218A234;
		  /* 8218A234h */ case   27:  		/* mr R4, R31 */
		/* 8218A234h case   27:*/		regs.R4 = regs.R31;
		/* 8218A234h case   27:*/		return 0x8218A238;
		  /* 8218A238h */ case   28:  		/* mr R3, R30 */
		/* 8218A238h case   28:*/		regs.R3 = regs.R30;
		/* 8218A238h case   28:*/		return 0x8218A23C;
		  /* 8218A23Ch */ case   29:  		/* bl -26844 */
		/* 8218A23Ch case   29:*/		regs.LR = 0x8218A240; return 0x82183960;
		/* 8218A23Ch case   29:*/		return 0x8218A240;
		  /* 8218A240h */ case   30:  		/* lwzx R11, <#[R24 + R21]> */
		/* 8218A240h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + regs.R21 + 0x00000000) );
		/* 8218A240h case   30:*/		return 0x8218A244;
		  /* 8218A244h */ case   31:  		/* rlwinm R8, R3, 29, 3, 28 */
		/* 8218A244h case   31:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R8,regs.R3);
		/* 8218A244h case   31:*/		return 0x8218A248;
		  /* 8218A248h */ case   32:  		/* rldicl R10, R3, 0, 58 */
		/* 8218A248h case   32:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R3);
		/* 8218A248h case   32:*/		return 0x8218A24C;
		  /* 8218A24Ch */ case   33:  		/* mr R29, R3 */
		/* 8218A24Ch case   33:*/		regs.R29 = regs.R3;
		/* 8218A24Ch case   33:*/		return 0x8218A250;
		  /* 8218A250h */ case   34:  		/* sld R7, R17, R10 */
		/* 8218A250h case   34:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R17,regs.R10);
		/* 8218A250h case   34:*/		return 0x8218A254;
		  /* 8218A254h */ case   35:  		/* ldx R10, <#[R11 + R8]> */
		/* 8218A254h case   35:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8218A254h case   35:*/		return 0x8218A258;
		  /* 8218A258h */ case   36:  		/* and R10, R10, R7 */
		/* 8218A258h case   36:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8218A258h case   36:*/		return 0x8218A25C;
		  /* 8218A25Ch */ case   37:  		/* cmpldi CR6, R10, 0 */
		/* 8218A25Ch case   37:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 8218A25Ch case   37:*/		return 0x8218A260;
		  /* 8218A260h */ case   38:  		/* mr R10, R17 */
		/* 8218A260h case   38:*/		regs.R10 = regs.R17;
		/* 8218A260h case   38:*/		return 0x8218A264;
		  /* 8218A264h */ case   39:  		/* bc 4, CR6_EQ, 8 */
		/* 8218A264h case   39:*/		if ( !regs.CR[6].eq ) { return 0x8218A26C;  }
		/* 8218A264h case   39:*/		return 0x8218A268;
		  /* 8218A268h */ case   40:  		/* li R10, 0 */
		/* 8218A268h case   40:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8218A268h case   40:*/		return 0x8218A26C;
	}
	return 0x8218A26C;
} // Block from 8218A1C8h-8218A26Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 8218A26Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A26C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A26C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A26C);
		  /* 8218A26Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8218A26Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8218A26Ch case    0:*/		return 0x8218A270;
		  /* 8218A270h */ case    1:  		/* bc 12, CR0_EQ, 64 */
		/* 8218A270h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218A2B0;  }
		/* 8218A270h case    1:*/		return 0x8218A274;
		  /* 8218A274h */ case    2:  		/* rlwinm R10, R31, 29, 3, 28 */
		/* 8218A274h case    2:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R10,regs.R31);
		/* 8218A274h case    2:*/		return 0x8218A278;
		  /* 8218A278h */ case    3:  		/* rldicl R9, R31, 0, 58 */
		/* 8218A278h case    3:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R31);
		/* 8218A278h case    3:*/		return 0x8218A27C;
		  /* 8218A27Ch */ case    4:  		/* sld R9, R17, R9 */
		/* 8218A27Ch case    4:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 8218A27Ch case    4:*/		return 0x8218A280;
		  /* 8218A280h */ case    5:  		/* ldx R8, <#[R10 + R11]> */
		/* 8218A280h case    5:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218A280h case    5:*/		return 0x8218A284;
		  /* 8218A284h */ case    6:  		/* and R8, R8, R9 */
		/* 8218A284h case    6:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 8218A284h case    6:*/		return 0x8218A288;
		  /* 8218A288h */ case    7:  		/* cmpldi CR6, R8, 0 */
		/* 8218A288h case    7:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 8218A288h case    7:*/		return 0x8218A28C;
		  /* 8218A28Ch */ case    8:  		/* mr R8, R17 */
		/* 8218A28Ch case    8:*/		regs.R8 = regs.R17;
		/* 8218A28Ch case    8:*/		return 0x8218A290;
		  /* 8218A290h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 8218A290h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8218A298;  }
		/* 8218A290h case    9:*/		return 0x8218A294;
		  /* 8218A294h */ case   10:  		/* li R8, 0 */
		/* 8218A294h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218A294h case   10:*/		return 0x8218A298;
	}
	return 0x8218A298;
} // Block from 8218A26Ch-8218A298h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8218A298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A298);
		  /* 8218A298h */ case    0:  		/* rlwinm. R8, R8, 0, 24, 31 */
		/* 8218A298h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R8,regs.R8);
		/* 8218A298h case    0:*/		return 0x8218A29C;
		  /* 8218A29Ch */ case    1:  		/* bc 4, CR0_EQ, 176 */
		/* 8218A29Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218A34C;  }
		/* 8218A29Ch case    1:*/		return 0x8218A2A0;
		  /* 8218A2A0h */ case    2:  		/* ldx R8, <#[R10 + R11]> */
		/* 8218A2A0h case    2:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218A2A0h case    2:*/		return 0x8218A2A4;
		  /* 8218A2A4h */ case    3:  		/* or R9, R9, R8 */
		/* 8218A2A4h case    3:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8218A2A4h case    3:*/		return 0x8218A2A8;
		  /* 8218A2A8h */ case    4:  		/* stdx R9, <#[R10 + R11]> */
		/* 8218A2A8h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218A2A8h case    4:*/		return 0x8218A2AC;
		  /* 8218A2ACh */ case    5:  		/* b 160 */
		/* 8218A2ACh case    5:*/		return 0x8218A34C;
		/* 8218A2ACh case    5:*/		return 0x8218A2B0;
	}
	return 0x8218A2B0;
} // Block from 8218A298h-8218A2B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218A2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A2B0);
		  /* 8218A2B0h */ case    0:  		/* lwz R10, <#[R15 + 8]> */
		/* 8218A2B0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 8218A2B0h case    0:*/		return 0x8218A2B4;
		  /* 8218A2B4h */ case    1:  		/* li R11, 0 */
		/* 8218A2B4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218A2B4h case    1:*/		return 0x8218A2B8;
		  /* 8218A2B8h */ case    2:  		/* rlwinm. R6, R10, 13, 29, 31 */
		/* 8218A2B8h case    2:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R6,regs.R10);
		/* 8218A2B8h case    2:*/		return 0x8218A2BC;
		  /* 8218A2BCh */ case    3:  		/* bc 12, CR0_EQ, 76 */
		/* 8218A2BCh case    3:*/		if ( regs.CR[0].eq ) { return 0x8218A308;  }
		/* 8218A2BCh case    3:*/		return 0x8218A2C0;
		  /* 8218A2C0h */ case    4:  		/* mr R9, R21 */
		/* 8218A2C0h case    4:*/		regs.R9 = regs.R21;
		/* 8218A2C0h case    4:*/		return 0x8218A2C4;
		  /* 8218A2C4h */ case    5:  		/* cmplw CR6, R11, R26 */
		/* 8218A2C4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8218A2C4h case    5:*/		return 0x8218A2C8;
		  /* 8218A2C8h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 8218A2C8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8218A2F0;  }
		/* 8218A2C8h case    6:*/		return 0x8218A2CC;
		  /* 8218A2CCh */ case    7:  		/* lwz R10, <#[R9]> */
		/* 8218A2CCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8218A2CCh case    7:*/		return 0x8218A2D0;
		  /* 8218A2D0h */ case    8:  		/* ldx R10, <#[R8 + R10]> */
		/* 8218A2D0h case    8:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8218A2D0h case    8:*/		return 0x8218A2D4;
		  /* 8218A2D4h */ case    9:  		/* and R10, R10, R7 */
		/* 8218A2D4h case    9:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8218A2D4h case    9:*/		return 0x8218A2D8;
		  /* 8218A2D8h */ case   10:  		/* cmpldi CR6, R10, 0 */
		/* 8218A2D8h case   10:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 8218A2D8h case   10:*/		return 0x8218A2DC;
		  /* 8218A2DCh */ case   11:  		/* mr R10, R17 */
		/* 8218A2DCh case   11:*/		regs.R10 = regs.R17;
		/* 8218A2DCh case   11:*/		return 0x8218A2E0;
		  /* 8218A2E0h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 8218A2E0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8218A2E8;  }
		/* 8218A2E0h case   12:*/		return 0x8218A2E4;
		  /* 8218A2E4h */ case   13:  		/* li R10, 0 */
		/* 8218A2E4h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8218A2E4h case   13:*/		return 0x8218A2E8;
	}
	return 0x8218A2E8;
} // Block from 8218A2B0h-8218A2E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8218A2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A2E8);
		  /* 8218A2E8h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8218A2E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8218A2E8h case    0:*/		return 0x8218A2EC;
		  /* 8218A2ECh */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 8218A2ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218A308;  }
		/* 8218A2ECh case    1:*/		return 0x8218A2F0;
	}
	return 0x8218A2F0;
} // Block from 8218A2E8h-8218A2F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218A2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A2F0);
		  /* 8218A2F0h */ case    0:  		/* lwz R10, <#[R15 + 8]> */
		/* 8218A2F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 8218A2F0h case    0:*/		return 0x8218A2F4;
		  /* 8218A2F4h */ case    1:  		/* addi R11, R11, 1 */
		/* 8218A2F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218A2F4h case    1:*/		return 0x8218A2F8;
		  /* 8218A2F8h */ case    2:  		/* addi R9, R9, 4 */
		/* 8218A2F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8218A2F8h case    2:*/		return 0x8218A2FC;
		  /* 8218A2FCh */ case    3:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 8218A2FCh case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 8218A2FCh case    3:*/		return 0x8218A300;
		  /* 8218A300h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8218A300h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8218A300h case    4:*/		return 0x8218A304;
		  /* 8218A304h */ case    5:  		/* bc 12, CR6_LT, -64 */
		/* 8218A304h case    5:*/		if ( regs.CR[6].lt ) { return 0x8218A2C4;  }
		/* 8218A304h case    5:*/		return 0x8218A308;
	}
	return 0x8218A308;
} // Block from 8218A2F0h-8218A308h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218A308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A308);
		  /* 8218A308h */ case    0:  		/* cmplw CR6, R11, R6 */
		/* 8218A308h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 8218A308h case    0:*/		return 0x8218A30C;
		  /* 8218A30Ch */ case    1:  		/* bc 4, CR6_EQ, 556 */
		/* 8218A30Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218A538;  }
		/* 8218A30Ch case    1:*/		return 0x8218A310;
		  /* 8218A310h */ case    2:  		/* mr R7, R26 */
		/* 8218A310h case    2:*/		regs.R7 = regs.R26;
		/* 8218A310h case    2:*/		return 0x8218A314;
		  /* 8218A314h */ case    3:  		/* mr R6, R29 */
		/* 8218A314h case    3:*/		regs.R6 = regs.R29;
		/* 8218A314h case    3:*/		return 0x8218A318;
		  /* 8218A318h */ case    4:  		/* mr R5, R31 */
		/* 8218A318h case    4:*/		regs.R5 = regs.R31;
		/* 8218A318h case    4:*/		return 0x8218A31C;
		  /* 8218A31Ch */ case    5:  		/* mr R4, R21 */
		/* 8218A31Ch case    5:*/		regs.R4 = regs.R21;
		/* 8218A31Ch case    5:*/		return 0x8218A320;
		  /* 8218A320h */ case    6:  		/* mr R3, R30 */
		/* 8218A320h case    6:*/		regs.R3 = regs.R30;
		/* 8218A320h case    6:*/		return 0x8218A324;
		  /* 8218A324h */ case    7:  		/* bl -18012 */
		/* 8218A324h case    7:*/		regs.LR = 0x8218A328; return 0x82185CC8;
		/* 8218A324h case    7:*/		return 0x8218A328;
		  /* 8218A328h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8218A328h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8218A328h case    8:*/		return 0x8218A32C;
		  /* 8218A32Ch */ case    9:  		/* bc 12, CR0_EQ, 524 */
		/* 8218A32Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8218A538;  }
		/* 8218A32Ch case    9:*/		return 0x8218A330;
		  /* 8218A330h */ case   10:  		/* li R8, 1 */
		/* 8218A330h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8218A330h case   10:*/		return 0x8218A334;
		  /* 8218A334h */ case   11:  		/* mr R7, R26 */
		/* 8218A334h case   11:*/		regs.R7 = regs.R26;
		/* 8218A334h case   11:*/		return 0x8218A338;
		  /* 8218A338h */ case   12:  		/* mr R6, R29 */
		/* 8218A338h case   12:*/		regs.R6 = regs.R29;
		/* 8218A338h case   12:*/		return 0x8218A33C;
		  /* 8218A33Ch */ case   13:  		/* mr R5, R31 */
		/* 8218A33Ch case   13:*/		regs.R5 = regs.R31;
		/* 8218A33Ch case   13:*/		return 0x8218A340;
		  /* 8218A340h */ case   14:  		/* mr R4, R21 */
		/* 8218A340h case   14:*/		regs.R4 = regs.R21;
		/* 8218A340h case   14:*/		return 0x8218A344;
		  /* 8218A344h */ case   15:  		/* mr R3, R30 */
		/* 8218A344h case   15:*/		regs.R3 = regs.R30;
		/* 8218A344h case   15:*/		return 0x8218A348;
		  /* 8218A348h */ case   16:  		/* bl -23400 */
		/* 8218A348h case   16:*/		regs.LR = 0x8218A34C; return 0x821847E0;
		/* 8218A348h case   16:*/		return 0x8218A34C;
	}
	return 0x8218A34C;
} // Block from 8218A308h-8218A34Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8218A34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A34C);
		  /* 8218A34Ch */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218A34Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218A34Ch case    0:*/		return 0x8218A350;
		  /* 8218A350h */ case    1:  		/* addi R11, R11, -1 */
		/* 8218A350h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A350h case    1:*/		return 0x8218A354;
		  /* 8218A354h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 8218A354h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8218A354h case    2:*/		return 0x8218A358;
		  /* 8218A358h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8218A358h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8218A364;  }
		/* 8218A358h case    3:*/		return 0x8218A35C;
		  /* 8218A35Ch */ case    4:  		/* li R31, -1 */
		/* 8218A35Ch case    4:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 8218A35Ch case    4:*/		return 0x8218A360;
		  /* 8218A360h */ case    5:  		/* b 24 */
		/* 8218A360h case    5:*/		return 0x8218A378;
		/* 8218A360h case    5:*/		return 0x8218A364;
	}
	return 0x8218A364;
} // Block from 8218A34Ch-8218A364h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218A364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A364);
		  /* 8218A364h */ case    0:  		/* addi R4, R31, 1 */
		/* 8218A364h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1);
		/* 8218A364h case    0:*/		return 0x8218A368;
		  /* 8218A368h */ case    1:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A368h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A368h case    1:*/		return 0x8218A36C;
		  /* 8218A36Ch */ case    2:  		/* lwzx R3, <#[R25 + R28]> */
		/* 8218A36Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + regs.R28 + 0x00000000) );
		/* 8218A36Ch case    2:*/		return 0x8218A370;
		  /* 8218A370h */ case    3:  		/* bl -111640 */
		/* 8218A370h case    3:*/		regs.LR = 0x8218A374; return 0x8216EF58;
		/* 8218A370h case    3:*/		return 0x8218A374;
		  /* 8218A374h */ case    4:  		/* mr R31, R3 */
		/* 8218A374h case    4:*/		regs.R31 = regs.R3;
		/* 8218A374h case    4:*/		return 0x8218A378;
	}
	return 0x8218A378;
} // Block from 8218A364h-8218A378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218A378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A378);
		  /* 8218A378h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218A378h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218A378h case    0:*/		return 0x8218A37C;
		  /* 8218A37Ch */ case    1:  		/* addi R11, R11, -1 */
		/* 8218A37Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A37Ch case    1:*/		return 0x8218A380;
		  /* 8218A380h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 8218A380h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8218A380h case    2:*/		return 0x8218A384;
		  /* 8218A384h */ case    3:  		/* bc 4, CR6_GT, -336 */
		/* 8218A384h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8218A234;  }
		/* 8218A384h case    3:*/		return 0x8218A388;
		  /* 8218A388h */ case    4:  		/* li R24, 0 */
		/* 8218A388h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8218A388h case    4:*/		return 0x8218A38C;
	}
	return 0x8218A38C;
} // Block from 8218A378h-8218A38Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218A38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A38C);
		  /* 8218A38Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8218A38Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8218A38Ch case    0:*/		return 0x8218A390;
		  /* 8218A390h */ case    1:  		/* bc 4, CR6_EQ, -584 */
		/* 8218A390h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218A148;  }
		/* 8218A390h case    1:*/		return 0x8218A394;
	}
	return 0x8218A394;
} // Block from 8218A38Ch-8218A394h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218A394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A394);
		  /* 8218A394h */ case    0:  		/* addi R10, R1, 104 */
		/* 8218A394h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x68);
		/* 8218A394h case    0:*/		return 0x8218A398;
		  /* 8218A398h */ case    1:  		/* stw R24, <#[R1 + 144]> */
		/* 8218A398h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000090) );
		/* 8218A398h case    1:*/		return 0x8218A39C;
		  /* 8218A39Ch */ case    2:  		/* addi R11, R1, 148 */
		/* 8218A39Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x94);
		/* 8218A39Ch case    2:*/		return 0x8218A3A0;
		  /* 8218A3A0h */ case    3:  		/* stw R24, <#[R10]> */
		/* 8218A3A0h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000000) );
		/* 8218A3A0h case    3:*/		return 0x8218A3A4;
		  /* 8218A3A4h */ case    4:  		/* stw R24, <#[R11]> */
		/* 8218A3A4h case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 8218A3A4h case    4:*/		return 0x8218A3A8;
		  /* 8218A3A8h */ case    5:  		/* stw R24, <#[R11 + 4]> */
		/* 8218A3A8h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		/* 8218A3A8h case    5:*/		return 0x8218A3AC;
		  /* 8218A3ACh */ case    6:  		/* stw R24, <#[R11 + 8]> */
		/* 8218A3ACh case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 8218A3ACh case    6:*/		return 0x8218A3B0;
		  /* 8218A3B0h */ case    7:  		/* lwz R25, <#[R1 + 104]> */
		/* 8218A3B0h case    7:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000068) );
		/* 8218A3B0h case    7:*/		return 0x8218A3B4;
		  /* 8218A3B4h */ case    8:  		/* cmplwi CR6, R20, 0 */
		/* 8218A3B4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8218A3B4h case    8:*/		return 0x8218A3B8;
		  /* 8218A3B8h */ case    9:  		/* bc 12, CR6_EQ, 712 */
		/* 8218A3B8h case    9:*/		if ( regs.CR[6].eq ) { return 0x8218A680;  }
		/* 8218A3B8h case    9:*/		return 0x8218A3BC;
		  /* 8218A3BCh */ case   10:  		/* mr R29, R24 */
		/* 8218A3BCh case   10:*/		regs.R29 = regs.R24;
		/* 8218A3BCh case   10:*/		return 0x8218A3C0;
		  /* 8218A3C0h */ case   11:  		/* mr R26, R24 */
		/* 8218A3C0h case   11:*/		regs.R26 = regs.R24;
		/* 8218A3C0h case   11:*/		return 0x8218A3C4;
		  /* 8218A3C4h */ case   12:  		/* mr R31, R20 */
		/* 8218A3C4h case   12:*/		regs.R31 = regs.R20;
		/* 8218A3C4h case   12:*/		return 0x8218A3C8;
		  /* 8218A3C8h */ case   13:  		/* addi R11, R31, -1 */
		/* 8218A3C8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 8218A3C8h case   13:*/		return 0x8218A3CC;
		  /* 8218A3CCh */ case   14:  		/* mr R3, R30 */
		/* 8218A3CCh case   14:*/		regs.R3 = regs.R30;
		/* 8218A3CCh case   14:*/		return 0x8218A3D0;
		  /* 8218A3D0h */ case   15:  		/* andc R28, R31, R11 */
		/* 8218A3D0h case   15:*/		cpu::op::andc<0>(regs,&regs.R28,regs.R31,regs.R11);
		/* 8218A3D0h case   15:*/		return 0x8218A3D4;
		  /* 8218A3D4h */ case   16:  		/* cntlzw R11, R28 */
		/* 8218A3D4h case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R28);
		/* 8218A3D4h case   16:*/		return 0x8218A3D8;
		  /* 8218A3D8h */ case   17:  		/* subf R31, R28, R31 */
		/* 8218A3D8h case   17:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R28,regs.R31);
		/* 8218A3D8h case   17:*/		return 0x8218A3DC;
		  /* 8218A3DCh */ case   18:  		/* subfic R27, R11, 31 */
		/* 8218A3DCh case   18:*/		cpu::op::subfic<0>(regs,&regs.R27,regs.R11,0x1F);
		/* 8218A3DCh case   18:*/		return 0x8218A3E0;
		  /* 8218A3E0h */ case   19:  		/* addi R11, R27, 11 */
		/* 8218A3E0h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xB);
		/* 8218A3E0h case   19:*/		return 0x8218A3E4;
		  /* 8218A3E4h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218A3E4h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218A3E4h case   20:*/		return 0x8218A3E8;
		  /* 8218A3E8h */ case   21:  		/* lwzx R11, <#[R11 + R15]> */
		/* 8218A3E8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 8218A3E8h case   21:*/		return 0x8218A3EC;
		  /* 8218A3ECh */ case   22:  		/* lwz R10, <#[R11 + 12]> */
		/* 8218A3ECh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8218A3ECh case   22:*/		return 0x8218A3F0;
		  /* 8218A3F0h */ case   23:  		/* lwz R11, <#[R11]> */
		/* 8218A3F0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218A3F0h case   23:*/		return 0x8218A3F4;
		  /* 8218A3F4h */ case   24:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 8218A3F4h case   24:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 8218A3F4h case   24:*/		return 0x8218A3F8;
		  /* 8218A3F8h */ case   25:  		/* lhz R10, <#[R10 + 18]> */
		/* 8218A3F8h case   25:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000012) );
		/* 8218A3F8h case   25:*/		return 0x8218A3FC;
		  /* 8218A3FCh */ case   26:  		/* add R4, R10, R11 */
		/* 8218A3FCh case   26:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8218A3FCh case   26:*/		return 0x8218A400;
		  /* 8218A400h */ case   27:  		/* bl -27296 */
		/* 8218A400h case   27:*/		regs.LR = 0x8218A404; return 0x82183960;
		/* 8218A400h case   27:*/		return 0x8218A404;
		  /* 8218A404h */ case   28:  		/* lwz R11, <#[R30 + 688]> */
		/* 8218A404h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 8218A404h case   28:*/		return 0x8218A408;
		  /* 8218A408h */ case   29:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8218A408h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8218A408h case   29:*/		return 0x8218A40C;
		  /* 8218A40Ch */ case   30:  		/* rlwinm R9, R27, 2, 0, 29 */
		/* 8218A40Ch case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R27);
		/* 8218A40Ch case   30:*/		return 0x8218A410;
		  /* 8218A410h */ case   31:  		/* addi R8, R1, 144 */
		/* 8218A410h case   31:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 8218A410h case   31:*/		return 0x8218A414;
		  /* 8218A414h */ case   32:  		/* cmplwi CR6, R26, 0 */
		/* 8218A414h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8218A414h case   32:*/		return 0x8218A418;
		  /* 8218A418h */ case   33:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8218A418h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218A418h case   33:*/		return 0x8218A41C;
		  /* 8218A41Ch */ case   34:  		/* stwx R11, <#[R9 + R8]> */
		/* 8218A41Ch case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8218A41Ch case   34:*/		return 0x8218A420;
		  /* 8218A420h */ case   35:  		/* bc 12, CR6_EQ, 12 */
		/* 8218A420h case   35:*/		if ( regs.CR[6].eq ) { return 0x8218A42C;  }
		/* 8218A420h case   35:*/		return 0x8218A424;
		  /* 8218A424h */ case   36:  		/* cmplw CR6, R26, R11 */
		/* 8218A424h case   36:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 8218A424h case   36:*/		return 0x8218A428;
		  /* 8218A428h */ case   37:  		/* bc 4, CR6_EQ, 12 */
		/* 8218A428h case   37:*/		if ( !regs.CR[6].eq ) { return 0x8218A434;  }
		/* 8218A428h case   37:*/		return 0x8218A42C;
	}
	return 0x8218A42C;
} // Block from 8218A394h-8218A42Ch (38 instructions)

//////////////////////////////////////////////////////
// Block at 8218A42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A42C);
		  /* 8218A42Ch */ case    0:  		/* or R29, R28, R29 */
		/* 8218A42Ch case    0:*/		cpu::op::or<0>(regs,&regs.R29,regs.R28,regs.R29);
		/* 8218A42Ch case    0:*/		return 0x8218A430;
		  /* 8218A430h */ case    1:  		/* mr R26, R11 */
		/* 8218A430h case    1:*/		regs.R26 = regs.R11;
		/* 8218A430h case    1:*/		return 0x8218A434;
	}
	return 0x8218A434;
} // Block from 8218A42Ch-8218A434h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218A434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A434);
		  /* 8218A434h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8218A434h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218A434h case    0:*/		return 0x8218A438;
		  /* 8218A438h */ case    1:  		/* bc 4, CR6_EQ, -112 */
		/* 8218A438h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218A3C8;  }
		/* 8218A438h case    1:*/		return 0x8218A43C;
		  /* 8218A43Ch */ case    2:  		/* subf R20, R29, R20 */
		/* 8218A43Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R20,regs.R29,regs.R20);
		/* 8218A43Ch case    2:*/		return 0x8218A440;
		  /* 8218A440h */ case    3:  		/* mr R28, R24 */
		/* 8218A440h case    3:*/		regs.R28 = regs.R24;
		/* 8218A440h case    3:*/		return 0x8218A444;
		  /* 8218A444h */ case    4:  		/* mr R27, R24 */
		/* 8218A444h case    4:*/		regs.R27 = regs.R24;
		/* 8218A444h case    4:*/		return 0x8218A448;
		  /* 8218A448h */ case    5:  		/* mr R31, R29 */
		/* 8218A448h case    5:*/		regs.R31 = regs.R29;
		/* 8218A448h case    5:*/		return 0x8218A44C;
		  /* 8218A44Ch */ case    6:  		/* addi R11, R31, -1 */
		/* 8218A44Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 8218A44Ch case    6:*/		return 0x8218A450;
		  /* 8218A450h */ case    7:  		/* mr R3, R30 */
		/* 8218A450h case    7:*/		regs.R3 = regs.R30;
		/* 8218A450h case    7:*/		return 0x8218A454;
		  /* 8218A454h */ case    8:  		/* andc R11, R31, R11 */
		/* 8218A454h case    8:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 8218A454h case    8:*/		return 0x8218A458;
		  /* 8218A458h */ case    9:  		/* cntlzw R10, R11 */
		/* 8218A458h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R11);
		/* 8218A458h case    9:*/		return 0x8218A45C;
		  /* 8218A45Ch */ case   10:  		/* subf R31, R11, R31 */
		/* 8218A45Ch case   10:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8218A45Ch case   10:*/		return 0x8218A460;
		  /* 8218A460h */ case   11:  		/* subfic R11, R10, 42 */
		/* 8218A460h case   11:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R10,0x2A);
		/* 8218A460h case   11:*/		return 0x8218A464;
		  /* 8218A464h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218A464h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218A464h case   12:*/		return 0x8218A468;
		  /* 8218A468h */ case   13:  		/* lwzx R11, <#[R11 + R15]> */
		/* 8218A468h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 8218A468h case   13:*/		return 0x8218A46C;
		  /* 8218A46Ch */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 8218A46Ch case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8218A46Ch case   14:*/		return 0x8218A470;
		  /* 8218A470h */ case   15:  		/* lwz R11, <#[R11]> */
		/* 8218A470h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218A470h case   15:*/		return 0x8218A474;
		  /* 8218A474h */ case   16:  		/* rlwinm R10, R11, 27, 30, 31 */
		/* 8218A474h case   16:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R11);
		/* 8218A474h case   16:*/		return 0x8218A478;
		  /* 8218A478h */ case   17:  		/* lhz R11, <#[R9 + 18]> */
		/* 8218A478h case   17:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000012) );
		/* 8218A478h case   17:*/		return 0x8218A47C;
		  /* 8218A47Ch */ case   18:  		/* add R4, R10, R11 */
		/* 8218A47Ch case   18:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8218A47Ch case   18:*/		return 0x8218A480;
		  /* 8218A480h */ case   19:  		/* bl -27424 */
		/* 8218A480h case   19:*/		regs.LR = 0x8218A484; return 0x82183960;
		/* 8218A480h case   19:*/		return 0x8218A484;
		  /* 8218A484h */ case   20:  		/* rlwinm R8, R3, 1, 0, 30 */
		/* 8218A484h case   20:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R3);
		/* 8218A484h case   20:*/		return 0x8218A488;
		  /* 8218A488h */ case   21:  		/* lwz R10, <#[R30 + 692]> */
		/* 8218A488h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002B4) );
		/* 8218A488h case   21:*/		return 0x8218A48C;
		  /* 8218A48Ch */ case   22:  		/* rlwinm R7, R3, 1, 0, 25 */
		/* 8218A48Ch case   22:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R7,regs.R3);
		/* 8218A48Ch case   22:*/		return 0x8218A490;
		  /* 8218A490h */ case   23:  		/* subf R11, R8, R8 */
		/* 8218A490h case   23:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R8);
		/* 8218A490h case   23:*/		return 0x8218A494;
		  /* 8218A494h */ case   24:  		/* rlwinm R6, R3, 30, 3, 28 */
		/* 8218A494h case   24:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R6,regs.R3);
		/* 8218A494h case   24:*/		return 0x8218A498;
		  /* 8218A498h */ case   25:  		/* addi R11, R11, 1 */
		/* 8218A498h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218A498h case   25:*/		return 0x8218A49C;
		  /* 8218A49Ch */ case   26:  		/* subf R8, R7, R8 */
		/* 8218A49Ch case   26:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8218A49Ch case   26:*/		return 0x8218A4A0;
		  /* 8218A4A0h */ case   27:  		/* rldicl R11, R11, 0, 32 */
		/* 8218A4A0h case   27:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8218A4A0h case   27:*/		return 0x8218A4A4;
		  /* 8218A4A4h */ case   28:  		/* li R9, 2 */
		/* 8218A4A4h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8218A4A4h case   28:*/		return 0x8218A4A8;
		  /* 8218A4A8h */ case   29:  		/* ldx R10, <#[R6 + R10]> */
		/* 8218A4A8h case   29:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 8218A4A8h case   29:*/		return 0x8218A4AC;
		  /* 8218A4ACh */ case   30:  		/* rldicl R8, R8, 0, 32 */
		/* 8218A4ACh case   30:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R8);
		/* 8218A4ACh case   30:*/		return 0x8218A4B0;
		  /* 8218A4B0h */ case   31:  		/* slw R11, R9, R11 */
		/* 8218A4B0h case   31:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8218A4B0h case   31:*/		return 0x8218A4B4;
		  /* 8218A4B4h */ case   32:  		/* srd R10, R10, R8 */
		/* 8218A4B4h case   32:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8218A4B4h case   32:*/		return 0x8218A4B8;
		  /* 8218A4B8h */ case   33:  		/* addi R11, R11, -1 */
		/* 8218A4B8h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A4B8h case   33:*/		return 0x8218A4BC;
		  /* 8218A4BCh */ case   34:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8218A4BCh case   34:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8218A4BCh case   34:*/		return 0x8218A4C0;
		  /* 8218A4C0h */ case   35:  		/* addi R28, R28, 1 */
		/* 8218A4C0h case   35:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8218A4C0h case   35:*/		return 0x8218A4C4;
		  /* 8218A4C4h */ case   36:  		/* and R11, R10, R11 */
		/* 8218A4C4h case   36:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218A4C4h case   36:*/		return 0x8218A4C8;
		  /* 8218A4C8h */ case   37:  		/* cmplwi CR6, R31, 0 */
		/* 8218A4C8h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218A4C8h case   37:*/		return 0x8218A4CC;
		  /* 8218A4CCh */ case   38:  		/* slw R11, R17, R11 */
		/* 8218A4CCh case   38:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R11);
		/* 8218A4CCh case   38:*/		return 0x8218A4D0;
		  /* 8218A4D0h */ case   39:  		/* or R27, R11, R27 */
		/* 8218A4D0h case   39:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 8218A4D0h case   39:*/		return 0x8218A4D4;
		  /* 8218A4D4h */ case   40:  		/* bc 4, CR6_EQ, -136 */
		/* 8218A4D4h case   40:*/		if ( !regs.CR[6].eq ) { return 0x8218A44C;  }
		/* 8218A4D4h case   40:*/		return 0x8218A4D8;
		  /* 8218A4D8h */ case   41:  		/* lwz R11, <#[R26 + 192]> */
		/* 8218A4D8h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000000C0) );
		/* 8218A4D8h case   41:*/		return 0x8218A4DC;
		  /* 8218A4DCh */ case   42:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8218A4DCh case   42:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218A4DCh case   42:*/		return 0x8218A4E0;
		  /* 8218A4E0h */ case   43:  		/* cmplw CR6, R28, R11 */
		/* 8218A4E0h case   43:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8218A4E0h case   43:*/		return 0x8218A4E4;
		  /* 8218A4E4h */ case   44:  		/* bc 4, CR6_LT, -304 */
		/* 8218A4E4h case   44:*/		if ( !regs.CR[6].lt ) { return 0x8218A3B4;  }
		/* 8218A4E4h case   44:*/		return 0x8218A4E8;
		  /* 8218A4E8h */ case   45:  		/* mr R9, R28 */
		/* 8218A4E8h case   45:*/		regs.R9 = regs.R28;
		/* 8218A4E8h case   45:*/		return 0x8218A4EC;
		  /* 8218A4ECh */ case   46:  		/* mr R8, R27 */
		/* 8218A4ECh case   46:*/		regs.R8 = regs.R27;
		/* 8218A4ECh case   46:*/		return 0x8218A4F0;
		  /* 8218A4F0h */ case   47:  		/* li R7, 0 */
		/* 8218A4F0h case   47:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8218A4F0h case   47:*/		return 0x8218A4F4;
		  /* 8218A4F4h */ case   48:  		/* mr R6, R25 */
		/* 8218A4F4h case   48:*/		regs.R6 = regs.R25;
		/* 8218A4F4h case   48:*/		return 0x8218A4F8;
		  /* 8218A4F8h */ case   49:  		/* mr R5, R26 */
		/* 8218A4F8h case   49:*/		regs.R5 = regs.R26;
		/* 8218A4F8h case   49:*/		return 0x8218A4FC;
		  /* 8218A4FCh */ case   50:  		/* mr R4, R21 */
		/* 8218A4FCh case   50:*/		regs.R4 = regs.R21;
		/* 8218A4FCh case   50:*/		return 0x8218A500;
		  /* 8218A500h */ case   51:  		/* mr R3, R30 */
		/* 8218A500h case   51:*/		regs.R3 = regs.R30;
		/* 8218A500h case   51:*/		return 0x8218A504;
		  /* 8218A504h */ case   52:  		/* bl -15916 */
		/* 8218A504h case   52:*/		regs.LR = 0x8218A508; return 0x821866D8;
		/* 8218A504h case   52:*/		return 0x8218A508;
		  /* 8218A508h */ case   53:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8218A508h case   53:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8218A508h case   53:*/		return 0x8218A50C;
		  /* 8218A50Ch */ case   54:  		/* bc 12, CR0_EQ, 188 */
		/* 8218A50Ch case   54:*/		if ( regs.CR[0].eq ) { return 0x8218A5C8;  }
		/* 8218A50Ch case   54:*/		return 0x8218A510;
		  /* 8218A510h */ case   55:  		/* li R10, 1 */
		/* 8218A510h case   55:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8218A510h case   55:*/		return 0x8218A514;
		  /* 8218A514h */ case   56:  		/* mr R9, R28 */
		/* 8218A514h case   56:*/		regs.R9 = regs.R28;
		/* 8218A514h case   56:*/		return 0x8218A518;
		  /* 8218A518h */ case   57:  		/* mr R8, R27 */
		/* 8218A518h case   57:*/		regs.R8 = regs.R27;
		/* 8218A518h case   57:*/		return 0x8218A51C;
		  /* 8218A51Ch */ case   58:  		/* li R7, 0 */
		/* 8218A51Ch case   58:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8218A51Ch case   58:*/		return 0x8218A520;
		  /* 8218A520h */ case   59:  		/* mr R6, R25 */
		/* 8218A520h case   59:*/		regs.R6 = regs.R25;
		/* 8218A520h case   59:*/		return 0x8218A524;
		  /* 8218A524h */ case   60:  		/* mr R5, R26 */
		/* 8218A524h case   60:*/		regs.R5 = regs.R26;
		/* 8218A524h case   60:*/		return 0x8218A528;
		  /* 8218A528h */ case   61:  		/* mr R4, R21 */
		/* 8218A528h case   61:*/		regs.R4 = regs.R21;
		/* 8218A528h case   61:*/		return 0x8218A52C;
		  /* 8218A52Ch */ case   62:  		/* mr R3, R30 */
		/* 8218A52Ch case   62:*/		regs.R3 = regs.R30;
		/* 8218A52Ch case   62:*/		return 0x8218A530;
		  /* 8218A530h */ case   63:  		/* bl -15544 */
		/* 8218A530h case   63:*/		regs.LR = 0x8218A534; return 0x82186878;
		/* 8218A530h case   63:*/		return 0x8218A534;
		  /* 8218A534h */ case   64:  		/* b -384 */
		/* 8218A534h case   64:*/		return 0x8218A3B4;
		/* 8218A534h case   64:*/		return 0x8218A538;
	}
	return 0x8218A538;
} // Block from 8218A434h-8218A538h (65 instructions)

//////////////////////////////////////////////////////
// Block at 8218A538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A538);
		  /* 8218A538h */ case    0:  		/* li R29, 0 */
		/* 8218A538h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8218A538h case    0:*/		return 0x8218A53C;
		  /* 8218A53Ch */ case    1:  		/* mr R28, R18 */
		/* 8218A53Ch case    1:*/		regs.R28 = regs.R18;
		/* 8218A53Ch case    1:*/		return 0x8218A540;
		  /* 8218A540h */ case    2:  		/* lwz R11, <#[R15 + 8]> */
		/* 8218A540h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 8218A540h case    2:*/		return 0x8218A544;
		  /* 8218A544h */ case    3:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8218A544h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8218A544h case    3:*/		return 0x8218A548;
		  /* 8218A548h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8218A548h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8218A548h case    4:*/		return 0x8218A54C;
		  /* 8218A54Ch */ case    5:  		/* bc 4, CR6_LT, 104 */
		/* 8218A54Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x8218A5B4;  }
		/* 8218A54Ch case    5:*/		return 0x8218A550;
		  /* 8218A550h */ case    6:  		/* lwz R31, <#[R28]> */
		/* 8218A550h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8218A550h case    6:*/		return 0x8218A554;
		  /* 8218A554h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 8218A554h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8218A554h case    7:*/		return 0x8218A558;
		  /* 8218A558h */ case    8:  		/* cmplw CR6, R23, R11 */
		/* 8218A558h case    8:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 8218A558h case    8:*/		return 0x8218A55C;
		  /* 8218A55Ch */ case    9:  		/* bc 4, CR6_EQ, 76 */
		/* 8218A55Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8218A5A8;  }
		/* 8218A55Ch case    9:*/		return 0x8218A560;
		  /* 8218A560h */ case   10:  		/* rlwinm R5, R15, 0, 0, 29 */
		/* 8218A560h case   10:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R15);
		/* 8218A560h case   10:*/		return 0x8218A564;
		  /* 8218A564h */ case   11:  		/* lwz R4, <#[R15 + 28]> */
		/* 8218A564h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R15 + 0x0000001C) );
		/* 8218A564h case   11:*/		return 0x8218A568;
		  /* 8218A568h */ case   12:  		/* mr R6, R31 */
		/* 8218A568h case   12:*/		regs.R6 = regs.R31;
		/* 8218A568h case   12:*/		return 0x8218A56C;
		  /* 8218A56Ch */ case   13:  		/* mr R3, R30 */
		/* 8218A56Ch case   13:*/		regs.R3 = regs.R30;
		/* 8218A56Ch case   13:*/		return 0x8218A570;
		  /* 8218A570h */ case   14:  		/* slw R27, R17, R29 */
		/* 8218A570h case   14:*/		cpu::op::slw<0>(regs,&regs.R27,regs.R17,regs.R29);
		/* 8218A570h case   14:*/		return 0x8218A574;
		  /* 8218A574h */ case   15:  		/* bl 653060 */
		/* 8218A574h case   15:*/		regs.LR = 0x8218A578; return 0x82229C78;
		/* 8218A574h case   15:*/		return 0x8218A578;
		  /* 8218A578h */ case   16:  		/* add R4, R29, R14 */
		/* 8218A578h case   16:*/		cpu::op::add<0>(regs,&regs.R4,regs.R29,regs.R14);
		/* 8218A578h case   16:*/		return 0x8218A57C;
		  /* 8218A57Ch */ case   17:  		/* mr R3, R30 */
		/* 8218A57Ch case   17:*/		regs.R3 = regs.R30;
		/* 8218A57Ch case   17:*/		return 0x8218A580;
		  /* 8218A580h */ case   18:  		/* lwz R31, <#[R31 + 12]> */
		/* 8218A580h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8218A580h case   18:*/		return 0x8218A584;
		  /* 8218A584h */ case   19:  		/* lwz R11, <#[R31 + 16]> */
		/* 8218A584h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8218A584h case   19:*/		return 0x8218A588;
		  /* 8218A588h */ case   20:  		/* rlwimi R11, R17, 16, 13, 15 */
		/* 8218A588h case   20:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R17);
		/* 8218A588h case   20:*/		return 0x8218A58C;
		  /* 8218A58Ch */ case   21:  		/* stw R11, <#[R31 + 16]> */
		/* 8218A58Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8218A58Ch case   21:*/		return 0x8218A590;
		  /* 8218A590h */ case   22:  		/* bl -27696 */
		/* 8218A590h case   22:*/		regs.LR = 0x8218A594; return 0x82183960;
		/* 8218A590h case   22:*/		return 0x8218A594;
		  /* 8218A594h */ case   23:  		/* stw R16, <#[R31 + 32]> */
		/* 8218A594h case   23:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000020) );
		/* 8218A594h case   23:*/		return 0x8218A598;
		  /* 8218A598h */ case   24:  		/* mr R16, R31 */
		/* 8218A598h case   24:*/		regs.R16 = regs.R31;
		/* 8218A598h case   24:*/		return 0x8218A59C;
		  /* 8218A59Ch */ case   25:  		/* sth R3, <#[R31 + 18]> */
		/* 8218A59Ch case   25:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 8218A59Ch case   25:*/		return 0x8218A5A0;
		  /* 8218A5A0h */ case   26:  		/* or R22, R27, R22 */
		/* 8218A5A0h case   26:*/		cpu::op::or<0>(regs,&regs.R22,regs.R27,regs.R22);
		/* 8218A5A0h case   26:*/		return 0x8218A5A4;
		  /* 8218A5A4h */ case   27:  		/* subf R20, R27, R20 */
		/* 8218A5A4h case   27:*/		cpu::op::subf<0>(regs,&regs.R20,regs.R27,regs.R20);
		/* 8218A5A4h case   27:*/		return 0x8218A5A8;
	}
	return 0x8218A5A8;
} // Block from 8218A538h-8218A5A8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8218A5A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A5A8);
		  /* 8218A5A8h */ case    0:  		/* addi R29, R29, 1 */
		/* 8218A5A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8218A5A8h case    0:*/		return 0x8218A5AC;
		  /* 8218A5ACh */ case    1:  		/* addi R28, R28, 4 */
		/* 8218A5ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8218A5ACh case    1:*/		return 0x8218A5B0;
		  /* 8218A5B0h */ case    2:  		/* b -112 */
		/* 8218A5B0h case    2:*/		return 0x8218A540;
		/* 8218A5B0h case    2:*/		return 0x8218A5B4;
	}
	return 0x8218A5B4;
} // Block from 8218A5A8h-8218A5B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218A5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A5B4);
		  /* 8218A5B4h */ case    0:  		/* mr R4, R21 */
		/* 8218A5B4h case    0:*/		regs.R4 = regs.R21;
		/* 8218A5B4h case    0:*/		return 0x8218A5B8;
		  /* 8218A5B8h */ case    1:  		/* stw R16, <#[R1 + 84]> */
		/* 8218A5B8h case    1:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 8218A5B8h case    1:*/		return 0x8218A5BC;
		  /* 8218A5BCh */ case    2:  		/* mr R3, R30 */
		/* 8218A5BCh case    2:*/		regs.R3 = regs.R30;
		/* 8218A5BCh case    2:*/		return 0x8218A5C0;
		  /* 8218A5C0h */ case    3:  		/* bl -24504 */
		/* 8218A5C0h case    3:*/		regs.LR = 0x8218A5C4; return 0x82184608;
		/* 8218A5C0h case    3:*/		return 0x8218A5C4;
		  /* 8218A5C4h */ case    4:  		/* b -1252 */
		/* 8218A5C4h case    4:*/		return 0x8218A0E0;
		/* 8218A5C4h case    4:*/		return 0x8218A5C8;
	}
	return 0x8218A5C8;
} // Block from 8218A5B4h-8218A5C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218A5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A5C8);
		  /* 8218A5C8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8218A5C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8218A5C8h case    0:*/		return 0x8218A5CC;
		  /* 8218A5CCh */ case    1:  		/* bc 12, CR6_EQ, 116 */
		/* 8218A5CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8218A640;  }
		/* 8218A5CCh case    1:*/		return 0x8218A5D0;
		  /* 8218A5D0h */ case    2:  		/* rlwinm R28, R15, 0, 0, 29 */
		/* 8218A5D0h case    2:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R28,regs.R15);
		/* 8218A5D0h case    2:*/		return 0x8218A5D4;
		  /* 8218A5D4h */ case    3:  		/* addi R11, R29, -1 */
		/* 8218A5D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 8218A5D4h case    3:*/		return 0x8218A5D8;
		  /* 8218A5D8h */ case    4:  		/* lwz R4, <#[R15 + 28]> */
		/* 8218A5D8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R15 + 0x0000001C) );
		/* 8218A5D8h case    4:*/		return 0x8218A5DC;
		  /* 8218A5DCh */ case    5:  		/* mr R5, R28 */
		/* 8218A5DCh case    5:*/		regs.R5 = regs.R28;
		/* 8218A5DCh case    5:*/		return 0x8218A5E0;
		  /* 8218A5E0h */ case    6:  		/* andc R27, R29, R11 */
		/* 8218A5E0h case    6:*/		cpu::op::andc<0>(regs,&regs.R27,regs.R29,regs.R11);
		/* 8218A5E0h case    6:*/		return 0x8218A5E4;
		  /* 8218A5E4h */ case    7:  		/* mr R3, R30 */
		/* 8218A5E4h case    7:*/		regs.R3 = regs.R30;
		/* 8218A5E4h case    7:*/		return 0x8218A5E8;
		  /* 8218A5E8h */ case    8:  		/* cntlzw R11, R27 */
		/* 8218A5E8h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R27);
		/* 8218A5E8h case    8:*/		return 0x8218A5EC;
		  /* 8218A5ECh */ case    9:  		/* subfic R31, R11, 31 */
		/* 8218A5ECh case    9:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 8218A5ECh case    9:*/		return 0x8218A5F0;
		  /* 8218A5F0h */ case   10:  		/* addi R11, R31, 11 */
		/* 8218A5F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xB);
		/* 8218A5F0h case   10:*/		return 0x8218A5F4;
		  /* 8218A5F4h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218A5F4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218A5F4h case   11:*/		return 0x8218A5F8;
		  /* 8218A5F8h */ case   12:  		/* lwzx R26, <#[R11 + R15]> */
		/* 8218A5F8h case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 8218A5F8h case   12:*/		return 0x8218A5FC;
		  /* 8218A5FCh */ case   13:  		/* mr R6, R26 */
		/* 8218A5FCh case   13:*/		regs.R6 = regs.R26;
		/* 8218A5FCh case   13:*/		return 0x8218A600;
		  /* 8218A600h */ case   14:  		/* bl 652920 */
		/* 8218A600h case   14:*/		regs.LR = 0x8218A604; return 0x82229C78;
		/* 8218A600h case   14:*/		return 0x8218A604;
		  /* 8218A604h */ case   15:  		/* add R4, R31, R14 */
		/* 8218A604h case   15:*/		cpu::op::add<0>(regs,&regs.R4,regs.R31,regs.R14);
		/* 8218A604h case   15:*/		return 0x8218A608;
		  /* 8218A608h */ case   16:  		/* mr R3, R30 */
		/* 8218A608h case   16:*/		regs.R3 = regs.R30;
		/* 8218A608h case   16:*/		return 0x8218A60C;
		  /* 8218A60Ch */ case   17:  		/* lwz R31, <#[R26 + 12]> */
		/* 8218A60Ch case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x0000000C) );
		/* 8218A60Ch case   17:*/		return 0x8218A610;
		  /* 8218A610h */ case   18:  		/* lwz R11, <#[R31 + 16]> */
		/* 8218A610h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8218A610h case   18:*/		return 0x8218A614;
		  /* 8218A614h */ case   19:  		/* rlwimi R11, R17, 16, 13, 15 */
		/* 8218A614h case   19:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R17);
		/* 8218A614h case   19:*/		return 0x8218A618;
		  /* 8218A618h */ case   20:  		/* stw R11, <#[R31 + 16]> */
		/* 8218A618h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8218A618h case   20:*/		return 0x8218A61C;
		  /* 8218A61Ch */ case   21:  		/* bl -27836 */
		/* 8218A61Ch case   21:*/		regs.LR = 0x8218A620; return 0x82183960;
		/* 8218A61Ch case   21:*/		return 0x8218A620;
		  /* 8218A620h */ case   22:  		/* rlwinm R11, R3, 0, 16, 31 */
		/* 8218A620h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R3);
		/* 8218A620h case   22:*/		return 0x8218A624;
		  /* 8218A624h */ case   23:  		/* stw R16, <#[R31 + 32]> */
		/* 8218A624h case   23:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000020) );
		/* 8218A624h case   23:*/		return 0x8218A628;
		  /* 8218A628h */ case   24:  		/* subf. R29, R27, R29 */
		/* 8218A628h case   24:*/		cpu::op::subf<1>(regs,&regs.R29,regs.R27,regs.R29);
		/* 8218A628h case   24:*/		return 0x8218A62C;
		  /* 8218A62Ch */ case   25:  		/* mr R16, R31 */
		/* 8218A62Ch case   25:*/		regs.R16 = regs.R31;
		/* 8218A62Ch case   25:*/		return 0x8218A630;
		  /* 8218A630h */ case   26:  		/* sth R11, <#[R31 + 18]> */
		/* 8218A630h case   26:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 8218A630h case   26:*/		return 0x8218A634;
		  /* 8218A634h */ case   27:  		/* or R22, R27, R22 */
		/* 8218A634h case   27:*/		cpu::op::or<0>(regs,&regs.R22,regs.R27,regs.R22);
		/* 8218A634h case   27:*/		return 0x8218A638;
		  /* 8218A638h */ case   28:  		/* bc 4, CR0_EQ, -100 */
		/* 8218A638h case   28:*/		if ( !regs.CR[0].eq ) { return 0x8218A5D4;  }
		/* 8218A638h case   28:*/		return 0x8218A63C;
		  /* 8218A63Ch */ case   29:  		/* stw R31, <#[R1 + 84]> */
		/* 8218A63Ch case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8218A63Ch case   29:*/		return 0x8218A640;
	}
	return 0x8218A640;
} // Block from 8218A5C8h-8218A640h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8218A640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A640);
		  /* 8218A640h */ case    0:  		/* mr R4, R21 */
		/* 8218A640h case    0:*/		regs.R4 = regs.R21;
		/* 8218A640h case    0:*/		return 0x8218A644;
		  /* 8218A644h */ case    1:  		/* mr R3, R30 */
		/* 8218A644h case    1:*/		regs.R3 = regs.R30;
		/* 8218A644h case    1:*/		return 0x8218A648;
		  /* 8218A648h */ case    2:  		/* bl -24640 */
		/* 8218A648h case    2:*/		regs.LR = 0x8218A64C; return 0x82184608;
		/* 8218A648h case    2:*/		return 0x8218A64C;
		  /* 8218A64Ch */ case    3:  		/* b -1384 */
		/* 8218A64Ch case    3:*/		return 0x8218A0E4;
		/* 8218A64Ch case    3:*/		return 0x8218A650;
		  /* 8218A650h */ case    4:  		/* lwz R11, <#[R30 + 672]> */
		/* 8218A650h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A650h case    4:*/		return 0x8218A654;
		  /* 8218A654h */ case    5:  		/* li R5, 0 */
		/* 8218A654h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218A654h case    5:*/		return 0x8218A658;
		  /* 8218A658h */ case    6:  		/* mr R3, R30 */
		/* 8218A658h case    6:*/		regs.R3 = regs.R30;
		/* 8218A658h case    6:*/		return 0x8218A65C;
		  /* 8218A65Ch */ case    7:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 8218A65Ch case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 8218A65Ch case    7:*/		return 0x8218A660;
		  /* 8218A660h */ case    8:  		/* bl -153128 */
		/* 8218A660h case    8:*/		regs.LR = 0x8218A664; return 0x82165038;
		/* 8218A660h case    8:*/		return 0x8218A664;
		  /* 8218A664h */ case    9:  		/* lwz R11, <#[R19 + 192]> */
		/* 8218A664h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218A664h case    9:*/		return 0x8218A668;
		  /* 8218A668h */ case   10:  		/* rlwinm R11, R11, 2, 27, 29 */
		/* 8218A668h case   10:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R11,regs.R11);
		/* 8218A668h case   10:*/		return 0x8218A66C;
		  /* 8218A66Ch */ case   11:  		/* stwx R3, <#[R11 + R19]> */
		/* 8218A66Ch case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 8218A66Ch case   11:*/		return 0x8218A670;
		  /* 8218A670h */ case   12:  		/* lwz R11, <#[R19 + 192]> */
		/* 8218A670h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218A670h case   12:*/		return 0x8218A674;
		  /* 8218A674h */ case   13:  		/* addi R10, R11, 1 */
		/* 8218A674h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8218A674h case   13:*/		return 0x8218A678;
		  /* 8218A678h */ case   14:  		/* rlwimi R10, R11, 0, 0, 28 */
		/* 8218A678h case   14:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R11);
		/* 8218A678h case   14:*/		return 0x8218A67C;
		  /* 8218A67Ch */ case   15:  		/* stw R10, <#[R19 + 192]> */
		/* 8218A67Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218A67Ch case   15:*/		return 0x8218A680;
	}
	return 0x8218A680;
} // Block from 8218A640h-8218A680h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8218A680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A680);
		  /* 8218A680h */ case    0:  		/* lwz R10, <#[R19 + 192]> */
		/* 8218A680h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218A680h case    0:*/		return 0x8218A684;
		  /* 8218A684h */ case    1:  		/* lwz R11, <#[R21 + 192]> */
		/* 8218A684h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x000000C0) );
		/* 8218A684h case    1:*/		return 0x8218A688;
		  /* 8218A688h */ case    2:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 8218A688h case    2:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 8218A688h case    2:*/		return 0x8218A68C;
		  /* 8218A68Ch */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8218A68Ch case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218A68Ch case    3:*/		return 0x8218A690;
		  /* 8218A690h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 8218A690h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8218A690h case    4:*/		return 0x8218A694;
		  /* 8218A694h */ case    5:  		/* bc 12, CR6_LT, -68 */
		/* 8218A694h case    5:*/		if ( regs.CR[6].lt ) { return 0x8218A650;  }
		/* 8218A694h case    5:*/		return 0x8218A698;
		  /* 8218A698h */ case    6:  		/* mr R25, R24 */
		/* 8218A698h case    6:*/		regs.R25 = regs.R24;
		/* 8218A698h case    6:*/		return 0x8218A69C;
		  /* 8218A69Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8218A69Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218A69Ch case    7:*/		return 0x8218A6A0;
		  /* 8218A6A0h */ case    8:  		/* bc 12, CR6_EQ, 468 */
		/* 8218A6A0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8218A874;  }
		/* 8218A6A0h case    8:*/		return 0x8218A6A4;
		  /* 8218A6A4h */ case    9:  		/* mr R26, R21 */
		/* 8218A6A4h case    9:*/		regs.R26 = regs.R21;
		/* 8218A6A4h case    9:*/		return 0x8218A6A8;
		  /* 8218A6A8h */ case   10:  		/* addi R27, R19, 40 */
		/* 8218A6A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R19,0x28);
		/* 8218A6A8h case   10:*/		return 0x8218A6AC;
		  /* 8218A6ACh */ case   11:  		/* addi R29, R19, 16 */
		/* 8218A6ACh case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R19,0x10);
		/* 8218A6ACh case   11:*/		return 0x8218A6B0;
		  /* 8218A6B0h */ case   12:  		/* li R4, 0 */
		/* 8218A6B0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218A6B0h case   12:*/		return 0x8218A6B4;
		  /* 8218A6B4h */ case   13:  		/* b 384 */
		/* 8218A6B4h case   13:*/		return 0x8218A834;
		/* 8218A6B4h case   13:*/		return 0x8218A6B8;
		  /* 8218A6B8h */ case   14:  		/* mr R4, R28 */
		/* 8218A6B8h case   14:*/		regs.R4 = regs.R28;
		/* 8218A6B8h case   14:*/		return 0x8218A6BC;
		  /* 8218A6BCh */ case   15:  		/* mr R3, R30 */
		/* 8218A6BCh case   15:*/		regs.R3 = regs.R30;
		/* 8218A6BCh case   15:*/		return 0x8218A6C0;
		  /* 8218A6C0h */ case   16:  		/* bl -28000 */
		/* 8218A6C0h case   16:*/		regs.LR = 0x8218A6C4; return 0x82183960;
		/* 8218A6C0h case   16:*/		return 0x8218A6C4;
		  /* 8218A6C4h */ case   17:  		/* lwz R10, <#[R29 - 16]> */
		/* 8218A6C4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0xFFFFFFF0) );
		/* 8218A6C4h case   17:*/		return 0x8218A6C8;
		  /* 8218A6C8h */ case   18:  		/* rlwinm R11, R3, 29, 3, 28 */
		/* 8218A6C8h case   18:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R3);
		/* 8218A6C8h case   18:*/		return 0x8218A6CC;
		  /* 8218A6CCh */ case   19:  		/* rldicl R9, R3, 0, 58 */
		/* 8218A6CCh case   19:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R3);
		/* 8218A6CCh case   19:*/		return 0x8218A6D0;
		  /* 8218A6D0h */ case   20:  		/* mr R31, R3 */
		/* 8218A6D0h case   20:*/		regs.R31 = regs.R3;
		/* 8218A6D0h case   20:*/		return 0x8218A6D4;
		  /* 8218A6D4h */ case   21:  		/* sld R8, R17, R9 */
		/* 8218A6D4h case   21:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R17,regs.R9);
		/* 8218A6D4h case   21:*/		return 0x8218A6D8;
		  /* 8218A6D8h */ case   22:  		/* ldx R9, <#[R11 + R10]> */
		/* 8218A6D8h case   22:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218A6D8h case   22:*/		return 0x8218A6DC;
		  /* 8218A6DCh */ case   23:  		/* and R9, R9, R8 */
		/* 8218A6DCh case   23:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8218A6DCh case   23:*/		return 0x8218A6E0;
		  /* 8218A6E0h */ case   24:  		/* cmpldi CR6, R9, 0 */
		/* 8218A6E0h case   24:*/		cpu::op::cmpldi<6>(regs,regs.R9,0x00000000);
		/* 8218A6E0h case   24:*/		return 0x8218A6E4;
		  /* 8218A6E4h */ case   25:  		/* mr R9, R17 */
		/* 8218A6E4h case   25:*/		regs.R9 = regs.R17;
		/* 8218A6E4h case   25:*/		return 0x8218A6E8;
		  /* 8218A6E8h */ case   26:  		/* bc 4, CR6_EQ, 8 */
		/* 8218A6E8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8218A6F0;  }
		/* 8218A6E8h case   26:*/		return 0x8218A6EC;
		  /* 8218A6ECh */ case   27:  		/* mr R9, R24 */
		/* 8218A6ECh case   27:*/		regs.R9 = regs.R24;
		/* 8218A6ECh case   27:*/		return 0x8218A6F0;
	}
	return 0x8218A6F0;
} // Block from 8218A680h-8218A6F0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8218A6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A6F0);
		  /* 8218A6F0h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 8218A6F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 8218A6F0h case    0:*/		return 0x8218A6F4;
		  /* 8218A6F4h */ case    1:  		/* bc 4, CR0_EQ, 236 */
		/* 8218A6F4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218A7E0;  }
		/* 8218A6F4h case    1:*/		return 0x8218A6F8;
		  /* 8218A6F8h */ case    2:  		/* lwz R10, <#[R29 - 16]> */
		/* 8218A6F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0xFFFFFFF0) );
		/* 8218A6F8h case    2:*/		return 0x8218A6FC;
		  /* 8218A6FCh */ case    3:  		/* rlwinm R9, R28, 29, 3, 28 */
		/* 8218A6FCh case    3:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R9,regs.R28);
		/* 8218A6FCh case    3:*/		return 0x8218A700;
		  /* 8218A700h */ case    4:  		/* rldicl R7, R28, 0, 58 */
		/* 8218A700h case    4:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R7,regs.R28);
		/* 8218A700h case    4:*/		return 0x8218A704;
		  /* 8218A704h */ case    5:  		/* sld R7, R17, R7 */
		/* 8218A704h case    5:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R17,regs.R7);
		/* 8218A704h case    5:*/		return 0x8218A708;
		  /* 8218A708h */ case    6:  		/* ldx R6, <#[R9 + R10]> */
		/* 8218A708h case    6:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8218A708h case    6:*/		return 0x8218A70C;
		  /* 8218A70Ch */ case    7:  		/* or R7, R7, R6 */
		/* 8218A70Ch case    7:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 8218A70Ch case    7:*/		return 0x8218A710;
		  /* 8218A710h */ case    8:  		/* stdx R7, <#[R9 + R10]> */
		/* 8218A710h case    8:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8218A710h case    8:*/		return 0x8218A714;
		  /* 8218A714h */ case    9:  		/* lwz R10, <#[R29 - 16]> */
		/* 8218A714h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0xFFFFFFF0) );
		/* 8218A714h case    9:*/		return 0x8218A718;
		  /* 8218A718h */ case   10:  		/* ldx R9, <#[R11 + R10]> */
		/* 8218A718h case   10:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218A718h case   10:*/		return 0x8218A71C;
		  /* 8218A71Ch */ case   11:  		/* or R9, R8, R9 */
		/* 8218A71Ch case   11:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8218A71Ch case   11:*/		return 0x8218A720;
		  /* 8218A720h */ case   12:  		/* stdx R9, <#[R11 + R10]> */
		/* 8218A720h case   12:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218A720h case   12:*/		return 0x8218A724;
		  /* 8218A724h */ case   13:  		/* lwz R3, <#[R29]> */
		/* 8218A724h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8218A724h case   13:*/		return 0x8218A728;
		  /* 8218A728h */ case   14:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A728h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A728h case   14:*/		return 0x8218A72C;
		  /* 8218A72Ch */ case   15:  		/* lwz R11, <#[R30 + 684]> */
		/* 8218A72Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218A72Ch case   15:*/		return 0x8218A730;
		  /* 8218A730h */ case   16:  		/* mullw R10, R31, R5 */
		/* 8218A730h case   16:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R31,regs.R5);
		/* 8218A730h case   16:*/		return 0x8218A734;
		  /* 8218A734h */ case   17:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 8218A734h case   17:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 8218A734h case   17:*/		return 0x8218A738;
		  /* 8218A738h */ case   18:  		/* add R4, R10, R11 */
		/* 8218A738h case   18:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8218A738h case   18:*/		return 0x8218A73C;
		  /* 8218A73Ch */ case   19:  		/* bl -27284 */
		/* 8218A73Ch case   19:*/		regs.LR = 0x8218A740; return 0x82183CA8;
		/* 8218A73Ch case   19:*/		return 0x8218A740;
		  /* 8218A740h */ case   20:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A740h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A740h case   20:*/		return 0x8218A744;
		  /* 8218A744h */ case   21:  		/* lwz R3, <#[R29]> */
		/* 8218A744h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8218A744h case   21:*/		return 0x8218A748;
		  /* 8218A748h */ case   22:  		/* lwz R4, <#[R29 - 16]> */
		/* 8218A748h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0xFFFFFFF0) );
		/* 8218A748h case   22:*/		return 0x8218A74C;
		  /* 8218A74Ch */ case   23:  		/* bl -27228 */
		/* 8218A74Ch case   23:*/		regs.LR = 0x8218A750; return 0x82183CF0;
		/* 8218A74Ch case   23:*/		return 0x8218A750;
		  /* 8218A750h */ case   24:  		/* lwz R10, <#[R30 + 676]> */
		/* 8218A750h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000002A4) );
		/* 8218A750h case   24:*/		return 0x8218A754;
		  /* 8218A754h */ case   25:  		/* mr R11, R24 */
		/* 8218A754h case   25:*/		regs.R11 = regs.R24;
		/* 8218A754h case   25:*/		return 0x8218A758;
		  /* 8218A758h */ case   26:  		/* mulli R9, R31, 5 */
		/* 8218A758h case   26:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R31,0x5);
		/* 8218A758h case   26:*/		return 0x8218A75C;
		  /* 8218A75Ch */ case   27:  		/* add R8, R9, R11 */
		/* 8218A75Ch case   27:*/		cpu::op::add<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 8218A75Ch case   27:*/		return 0x8218A760;
		  /* 8218A760h */ case   28:  		/* addi R8, R8, 1 */
		/* 8218A760h case   28:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8218A760h case   28:*/		return 0x8218A764;
		  /* 8218A764h */ case   29:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 8218A764h case   29:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 8218A764h case   29:*/		return 0x8218A768;
		  /* 8218A768h */ case   30:  		/* ldx R8, <#[R8 + R10]> */
		/* 8218A768h case   30:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8218A768h case   30:*/		return 0x8218A76C;
		  /* 8218A76Ch */ case   31:  		/* cmpldi CR6, R8, 0 */
		/* 8218A76Ch case   31:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 8218A76Ch case   31:*/		return 0x8218A770;
		  /* 8218A770h */ case   32:  		/* bc 4, CR6_EQ, 104 */
		/* 8218A770h case   32:*/		if ( !regs.CR[6].eq ) { return 0x8218A7D8;  }
		/* 8218A770h case   32:*/		return 0x8218A774;
		  /* 8218A774h */ case   33:  		/* addi R11, R11, 1 */
		/* 8218A774h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218A774h case   33:*/		return 0x8218A778;
		  /* 8218A778h */ case   34:  		/* cmplwi CR6, R11, 4 */
		/* 8218A778h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8218A778h case   34:*/		return 0x8218A77C;
		  /* 8218A77Ch */ case   35:  		/* bc 12, CR6_LT, -32 */
		/* 8218A77Ch case   35:*/		if ( regs.CR[6].lt ) { return 0x8218A75C;  }
		/* 8218A77Ch case   35:*/		return 0x8218A780;
		  /* 8218A780h */ case   36:  		/* mr R11, R24 */
		/* 8218A780h case   36:*/		regs.R11 = regs.R24;
		/* 8218A780h case   36:*/		return 0x8218A784;
		  /* 8218A784h */ case   37:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218A784h case   37:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218A784h case   37:*/		return 0x8218A788;
		  /* 8218A788h */ case   38:  		/* bc 12, CR0_EQ, 56 */
		/* 8218A788h case   38:*/		if ( regs.CR[0].eq ) { return 0x8218A7C0;  }
		/* 8218A788h case   38:*/		return 0x8218A78C;
		  /* 8218A78Ch */ case   39:  		/* li R9, 4 */
		/* 8218A78Ch case   39:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8218A78Ch case   39:*/		return 0x8218A790;
		  /* 8218A790h */ case   40:  		/* mulli R11, R31, 40 */
		/* 8218A790h case   40:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x28);
		/* 8218A790h case   40:*/		return 0x8218A794;
		  /* 8218A794h */ case   41:  		/* mtspr CTR, R9 */
		/* 8218A794h case   41:*/		regs.CTR = regs.R9;
		/* 8218A794h case   41:*/		return 0x8218A798;
		  /* 8218A798h */ case   42:  		/* add R10, R11, R10 */
		/* 8218A798h case   42:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8218A798h case   42:*/		return 0x8218A79C;
		  /* 8218A79Ch */ case   43:  		/* addi R11, R27, -8 */
		/* 8218A79Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF8);
		/* 8218A79Ch case   43:*/		return 0x8218A7A0;
		  /* 8218A7A0h */ case   44:  		/* ldu R9, <#[R10 + 8]> */
		/* 8218A7A0h case   44:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8218A7A0h case   44:*/		return 0x8218A7A4;
		  /* 8218A7A4h */ case   45:  		/* ld R8, <#[R11 + 8]> */
		/* 8218A7A4h case   45:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8218A7A4h case   45:*/		return 0x8218A7A8;
		  /* 8218A7A8h */ case   46:  		/* or R9, R9, R8 */
		/* 8218A7A8h case   46:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8218A7A8h case   46:*/		return 0x8218A7AC;
		  /* 8218A7ACh */ case   47:  		/* stdu R9, <#[R11 + 8]> */
		/* 8218A7ACh case   47:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 8218A7ACh case   47:*/		return 0x8218A7B0;
		  /* 8218A7B0h */ case   48:  		/* bc 16, CR0_LT, -16 */
		/* 8218A7B0h case   48:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8218A7A0;  }
		/* 8218A7B0h case   48:*/		return 0x8218A7B4;
		  /* 8218A7B4h */ case   49:  		/* lwz R11, <#[R19 + 192]> */
		/* 8218A7B4h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218A7B4h case   49:*/		return 0x8218A7B8;
		  /* 8218A7B8h */ case   50:  		/* oris R11, R11, 16384 */
		/* 8218A7B8h case   50:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 8218A7B8h case   50:*/		return 0x8218A7BC;
		  /* 8218A7BCh */ case   51:  		/* stw R11, <#[R19 + 192]> */
		/* 8218A7BCh case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x000000C0) );
		/* 8218A7BCh case   51:*/		return 0x8218A7C0;
	}
	return 0x8218A7C0;
} // Block from 8218A6F0h-8218A7C0h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8218A7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A7C0);
		  /* 8218A7C0h */ case    0:  		/* mr R6, R25 */
		/* 8218A7C0h case    0:*/		regs.R6 = regs.R25;
		/* 8218A7C0h case    0:*/		return 0x8218A7C4;
		  /* 8218A7C4h */ case    1:  		/* mr R5, R19 */
		/* 8218A7C4h case    1:*/		regs.R5 = regs.R19;
		/* 8218A7C4h case    1:*/		return 0x8218A7C8;
		  /* 8218A7C8h */ case    2:  		/* mr R4, R31 */
		/* 8218A7C8h case    2:*/		regs.R4 = regs.R31;
		/* 8218A7C8h case    2:*/		return 0x8218A7CC;
		  /* 8218A7CCh */ case    3:  		/* mr R3, R30 */
		/* 8218A7CCh case    3:*/		regs.R3 = regs.R30;
		/* 8218A7CCh case    3:*/		return 0x8218A7D0;
		  /* 8218A7D0h */ case    4:  		/* bl -27216 */
		/* 8218A7D0h case    4:*/		regs.LR = 0x8218A7D4; return 0x82183D80;
		/* 8218A7D0h case    4:*/		return 0x8218A7D4;
		  /* 8218A7D4h */ case    5:  		/* b 68 */
		/* 8218A7D4h case    5:*/		return 0x8218A818;
		/* 8218A7D4h case    5:*/		return 0x8218A7D8;
	}
	return 0x8218A7D8;
} // Block from 8218A7C0h-8218A7D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218A7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A7D8);
		  /* 8218A7D8h */ case    0:  		/* mr R11, R17 */
		/* 8218A7D8h case    0:*/		regs.R11 = regs.R17;
		/* 8218A7D8h case    0:*/		return 0x8218A7DC;
		  /* 8218A7DCh */ case    1:  		/* b -88 */
		/* 8218A7DCh case    1:*/		return 0x8218A784;
		/* 8218A7DCh case    1:*/		return 0x8218A7E0;
	}
	return 0x8218A7E0;
} // Block from 8218A7D8h-8218A7E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218A7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A7E0);
		  /* 8218A7E0h */ case    0:  		/* rlwinm R11, R28, 29, 3, 28 */
		/* 8218A7E0h case    0:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R11,regs.R28);
		/* 8218A7E0h case    0:*/		return 0x8218A7E4;
		  /* 8218A7E4h */ case    1:  		/* rldicl R9, R28, 0, 58 */
		/* 8218A7E4h case    1:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R28);
		/* 8218A7E4h case    1:*/		return 0x8218A7E8;
		  /* 8218A7E8h */ case    2:  		/* sld R9, R17, R9 */
		/* 8218A7E8h case    2:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 8218A7E8h case    2:*/		return 0x8218A7EC;
		  /* 8218A7ECh */ case    3:  		/* ldx R8, <#[R11 + R10]> */
		/* 8218A7ECh case    3:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218A7ECh case    3:*/		return 0x8218A7F0;
		  /* 8218A7F0h */ case    4:  		/* and R8, R8, R9 */
		/* 8218A7F0h case    4:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 8218A7F0h case    4:*/		return 0x8218A7F4;
		  /* 8218A7F4h */ case    5:  		/* cmpldi CR6, R8, 0 */
		/* 8218A7F4h case    5:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 8218A7F4h case    5:*/		return 0x8218A7F8;
		  /* 8218A7F8h */ case    6:  		/* mr R8, R17 */
		/* 8218A7F8h case    6:*/		regs.R8 = regs.R17;
		/* 8218A7F8h case    6:*/		return 0x8218A7FC;
		  /* 8218A7FCh */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8218A7FCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8218A804;  }
		/* 8218A7FCh case    7:*/		return 0x8218A800;
		  /* 8218A800h */ case    8:  		/* mr R8, R24 */
		/* 8218A800h case    8:*/		regs.R8 = regs.R24;
		/* 8218A800h case    8:*/		return 0x8218A804;
	}
	return 0x8218A804;
} // Block from 8218A7E0h-8218A804h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8218A804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A804);
		  /* 8218A804h */ case    0:  		/* rlwinm. R8, R8, 0, 24, 31 */
		/* 8218A804h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R8,regs.R8);
		/* 8218A804h case    0:*/		return 0x8218A808;
		  /* 8218A808h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8218A808h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218A818;  }
		/* 8218A808h case    1:*/		return 0x8218A80C;
		  /* 8218A80Ch */ case    2:  		/* ldx R8, <#[R11 + R10]> */
		/* 8218A80Ch case    2:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218A80Ch case    2:*/		return 0x8218A810;
		  /* 8218A810h */ case    3:  		/* or R9, R9, R8 */
		/* 8218A810h case    3:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8218A810h case    3:*/		return 0x8218A814;
		  /* 8218A814h */ case    4:  		/* stdx R9, <#[R11 + R10]> */
		/* 8218A814h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8218A814h case    4:*/		return 0x8218A818;
	}
	return 0x8218A818;
} // Block from 8218A804h-8218A818h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218A818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A818);
		  /* 8218A818h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218A818h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218A818h case    0:*/		return 0x8218A81C;
		  /* 8218A81Ch */ case    1:  		/* addi R11, R11, -1 */
		/* 8218A81Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A81Ch case    1:*/		return 0x8218A820;
		  /* 8218A820h */ case    2:  		/* cmplw CR6, R28, R11 */
		/* 8218A820h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8218A820h case    2:*/		return 0x8218A824;
		  /* 8218A824h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8218A824h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8218A830;  }
		/* 8218A824h case    3:*/		return 0x8218A828;
		  /* 8218A828h */ case    4:  		/* li R28, -1 */
		/* 8218A828h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 8218A828h case    4:*/		return 0x8218A82C;
		  /* 8218A82Ch */ case    5:  		/* b 24 */
		/* 8218A82Ch case    5:*/		return 0x8218A844;
		/* 8218A82Ch case    5:*/		return 0x8218A830;
	}
	return 0x8218A830;
} // Block from 8218A818h-8218A830h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218A830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A830);
		  /* 8218A830h */ case    0:  		/* addi R4, R28, 1 */
		/* 8218A830h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x1);
		/* 8218A830h case    0:*/		return 0x8218A834;
	}
	return 0x8218A834;
} // Block from 8218A830h-8218A834h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218A834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A834);
		  /* 8218A834h */ case    0:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218A834h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218A834h case    0:*/		return 0x8218A838;
		  /* 8218A838h */ case    1:  		/* lwz R3, <#[R26]> */
		/* 8218A838h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8218A838h case    1:*/		return 0x8218A83C;
		  /* 8218A83Ch */ case    2:  		/* bl -112868 */
		/* 8218A83Ch case    2:*/		regs.LR = 0x8218A840; return 0x8216EF58;
		/* 8218A83Ch case    2:*/		return 0x8218A840;
		  /* 8218A840h */ case    3:  		/* mr R28, R3 */
		/* 8218A840h case    3:*/		regs.R28 = regs.R3;
		/* 8218A840h case    3:*/		return 0x8218A844;
	}
	return 0x8218A844;
} // Block from 8218A834h-8218A844h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218A844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A844);
		  /* 8218A844h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218A844h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218A844h case    0:*/		return 0x8218A848;
		  /* 8218A848h */ case    1:  		/* addi R11, R11, -1 */
		/* 8218A848h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218A848h case    1:*/		return 0x8218A84C;
		  /* 8218A84Ch */ case    2:  		/* cmplw CR6, R28, R11 */
		/* 8218A84Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8218A84Ch case    2:*/		return 0x8218A850;
		  /* 8218A850h */ case    3:  		/* bc 4, CR6_GT, -408 */
		/* 8218A850h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8218A6B8;  }
		/* 8218A850h case    3:*/		return 0x8218A854;
		  /* 8218A854h */ case    4:  		/* lwz R11, <#[R21 + 192]> */
		/* 8218A854h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x000000C0) );
		/* 8218A854h case    4:*/		return 0x8218A858;
		  /* 8218A858h */ case    5:  		/* addi R25, R25, 1 */
		/* 8218A858h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8218A858h case    5:*/		return 0x8218A85C;
		  /* 8218A85Ch */ case    6:  		/* addi R26, R26, 4 */
		/* 8218A85Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8218A85Ch case    6:*/		return 0x8218A860;
		  /* 8218A860h */ case    7:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8218A860h case    7:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218A860h case    7:*/		return 0x8218A864;
		  /* 8218A864h */ case    8:  		/* addi R29, R29, 4 */
		/* 8218A864h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8218A864h case    8:*/		return 0x8218A868;
		  /* 8218A868h */ case    9:  		/* addi R27, R27, 40 */
		/* 8218A868h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x28);
		/* 8218A868h case    9:*/		return 0x8218A86C;
		  /* 8218A86Ch */ case   10:  		/* cmplw CR6, R25, R11 */
		/* 8218A86Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 8218A86Ch case   10:*/		return 0x8218A870;
		  /* 8218A870h */ case   11:  		/* bc 12, CR6_LT, -448 */
		/* 8218A870h case   11:*/		if ( regs.CR[6].lt ) { return 0x8218A6B0;  }
		/* 8218A870h case   11:*/		return 0x8218A874;
	}
	return 0x8218A874;
} // Block from 8218A844h-8218A874h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8218A874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A874);
		  /* 8218A874h */ case    0:  		/* mr R4, R21 */
		/* 8218A874h case    0:*/		regs.R4 = regs.R21;
		/* 8218A874h case    0:*/		return 0x8218A878;
		  /* 8218A878h */ case    1:  		/* mr R3, R30 */
		/* 8218A878h case    1:*/		regs.R3 = regs.R30;
		/* 8218A878h case    1:*/		return 0x8218A87C;
		  /* 8218A87Ch */ case    2:  		/* bl -25204 */
		/* 8218A87Ch case    2:*/		regs.LR = 0x8218A880; return 0x82184608;
		/* 8218A87Ch case    2:*/		return 0x8218A880;
		  /* 8218A880h */ case    3:  		/* addi R31, R1, 144 */
		/* 8218A880h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x90);
		/* 8218A880h case    3:*/		return 0x8218A884;
		  /* 8218A884h */ case    4:  		/* li R29, 4 */
		/* 8218A884h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x4);
		/* 8218A884h case    4:*/		return 0x8218A888;
		  /* 8218A888h */ case    5:  		/* lwz R4, <#[R31]> */
		/* 8218A888h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8218A888h case    5:*/		return 0x8218A88C;
		  /* 8218A88Ch */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8218A88Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8218A88Ch case    6:*/		return 0x8218A890;
		  /* 8218A890h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 8218A890h case    7:*/		if ( regs.CR[6].eq ) { return 0x8218A8A8;  }
		/* 8218A890h case    7:*/		return 0x8218A894;
		  /* 8218A894h */ case    8:  		/* lwz R11, <#[R4 + 192]> */
		/* 8218A894h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000C0) );
		/* 8218A894h case    8:*/		return 0x8218A898;
		  /* 8218A898h */ case    9:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 8218A898h case    9:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218A898h case    9:*/		return 0x8218A89C;
		  /* 8218A89Ch */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 8218A89Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x8218A8A8;  }
		/* 8218A89Ch case   10:*/		return 0x8218A8A0;
		  /* 8218A8A0h */ case   11:  		/* mr R3, R30 */
		/* 8218A8A0h case   11:*/		regs.R3 = regs.R30;
		/* 8218A8A0h case   11:*/		return 0x8218A8A4;
		  /* 8218A8A4h */ case   12:  		/* bl -25244 */
		/* 8218A8A4h case   12:*/		regs.LR = 0x8218A8A8; return 0x82184608;
		/* 8218A8A4h case   12:*/		return 0x8218A8A8;
	}
	return 0x8218A8A8;
} // Block from 8218A874h-8218A8A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8218A8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A8A8);
		  /* 8218A8A8h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8218A8A8h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8218A8A8h case    0:*/		return 0x8218A8AC;
		  /* 8218A8ACh */ case    1:  		/* addi R31, R31, 4 */
		/* 8218A8ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8218A8ACh case    1:*/		return 0x8218A8B0;
		  /* 8218A8B0h */ case    2:  		/* bc 4, CR0_EQ, -40 */
		/* 8218A8B0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8218A888;  }
		/* 8218A8B0h case    2:*/		return 0x8218A8B4;
	}
	return 0x8218A8B4;
} // Block from 8218A8A8h-8218A8B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218A8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A8B4);
		  /* 8218A8B4h */ case    0:  		/* lwz R11, <#[R1 + 88]> */
		/* 8218A8B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8218A8B4h case    0:*/		return 0x8218A8B8;
		  /* 8218A8B8h */ case    1:  		/* lwz R10, <#[R30 + 668]> */
		/* 8218A8B8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218A8B8h case    1:*/		return 0x8218A8BC;
		  /* 8218A8BCh */ case    2:  		/* addi R11, R11, 1 */
		/* 8218A8BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218A8BCh case    2:*/		return 0x8218A8C0;
		  /* 8218A8C0h */ case    3:  		/* stw R11, <#[R1 + 88]> */
		/* 8218A8C0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8218A8C0h case    3:*/		return 0x8218A8C4;
		  /* 8218A8C4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8218A8C4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8218A8C4h case    4:*/		return 0x8218A8C8;
		  /* 8218A8C8h */ case    5:  		/* bc 12, CR6_LT, -4492 */
		/* 8218A8C8h case    5:*/		if ( regs.CR[6].lt ) { return 0x8218973C;  }
		/* 8218A8C8h case    5:*/		return 0x8218A8CC;
	}
	return 0x8218A8CC;
} // Block from 8218A8B4h-8218A8CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218A8CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A8CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A8CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A8CC);
		  /* 8218A8CCh */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 8218A8CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8218A8CCh case    0:*/		return 0x8218A8D0;
		  /* 8218A8D0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8218A8D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218A8D0h case    1:*/		return 0x8218A8D4;
		  /* 8218A8D4h */ case    2:  		/* bc 4, CR6_EQ, 808 */
		/* 8218A8D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8218ABFC;  }
		/* 8218A8D4h case    2:*/		return 0x8218A8D8;
		  /* 8218A8D8h */ case    3:  		/* lwz R11, <#[R30 + 44]> */
		/* 8218A8D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 8218A8D8h case    3:*/		return 0x8218A8DC;
		  /* 8218A8DCh */ case    4:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8218A8DCh case    4:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8218A8DCh case    4:*/		return 0x8218A8E0;
		  /* 8218A8E0h */ case    5:  		/* bc 12, CR0_EQ, 796 */
		/* 8218A8E0h case    5:*/		if ( regs.CR[0].eq ) { return 0x8218ABFC;  }
		/* 8218A8E0h case    5:*/		return 0x8218A8E4;
		  /* 8218A8E4h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 8218A8E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8218A8E4h case    6:*/		return 0x8218A8E8;
		  /* 8218A8E8h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218A8E8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218A8E8h case    7:*/		return 0x8218A8EC;
		  /* 8218A8ECh */ case    8:  		/* bc 4, CR0_EQ, 784 */
		/* 8218A8ECh case    8:*/		if ( !regs.CR[0].eq ) { return 0x8218ABFC;  }
		/* 8218A8ECh case    8:*/		return 0x8218A8F0;
		  /* 8218A8F0h */ case    9:  		/* mr R21, R11 */
		/* 8218A8F0h case    9:*/		regs.R21 = regs.R11;
		/* 8218A8F0h case    9:*/		return 0x8218A8F4;
		  /* 8218A8F4h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 8218A8F4h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218A8F4h case   10:*/		return 0x8218A8F8;
		  /* 8218A8F8h */ case   11:  		/* bc 12, CR0_EQ, 772 */
		/* 8218A8F8h case   11:*/		if ( regs.CR[0].eq ) { return 0x8218ABFC;  }
		/* 8218A8F8h case   11:*/		return 0x8218A8FC;
		  /* 8218A8FCh */ case   12:  		/* lwz R17, <#[R1 + 84]> */
		/* 8218A8FCh case   12:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 8218A8FCh case   12:*/		return 0x8218A900;
		  /* 8218A900h */ case   13:  		/* li R19, 0 */
		/* 8218A900h case   13:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 8218A900h case   13:*/		return 0x8218A904;
		  /* 8218A904h */ case   14:  		/* li R20, 2 */
		/* 8218A904h case   14:*/		cpu::op::li<0>(regs,&regs.R20,0x2);
		/* 8218A904h case   14:*/		return 0x8218A908;
		  /* 8218A908h */ case   15:  		/* li R18, -1 */
		/* 8218A908h case   15:*/		cpu::op::li<0>(regs,&regs.R18,0xFFFFFFFF);
		/* 8218A908h case   15:*/		return 0x8218A90C;
		  /* 8218A90Ch */ case   16:  		/* lwz R24, <#[R21 + 28]> */
		/* 8218A90Ch case   16:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R21 + 0x0000001C) );
		/* 8218A90Ch case   16:*/		return 0x8218A910;
		  /* 8218A910h */ case   17:  		/* rlwinm. R11, R24, 0, 31, 31 */
		/* 8218A910h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R24);
		/* 8218A910h case   17:*/		return 0x8218A914;
		  /* 8218A914h */ case   18:  		/* bc 4, CR0_EQ, 712 */
		/* 8218A914h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8218ABDC;  }
		/* 8218A914h case   18:*/		return 0x8218A918;
		  /* 8218A918h */ case   19:  		/* cmplwi CR0, R24, 0 */
		/* 8218A918h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R24,0x00000000);
		/* 8218A918h case   19:*/		return 0x8218A91C;
		  /* 8218A91Ch */ case   20:  		/* bc 12, CR0_EQ, 704 */
		/* 8218A91Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x8218ABDC;  }
		/* 8218A91Ch case   20:*/		return 0x8218A920;
		  /* 8218A920h */ case   21:  		/* lwz R11, <#[R24 + 8]> */
		/* 8218A920h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8218A920h case   21:*/		return 0x8218A924;
		  /* 8218A924h */ case   22:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8218A924h case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8218A924h case   22:*/		return 0x8218A928;
		  /* 8218A928h */ case   23:  		/* cmplwi CR6, R10, 13312 */
		/* 8218A928h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003400);
		/* 8218A928h case   23:*/		return 0x8218A92C;
		  /* 8218A92Ch */ case   24:  		/* bc 4, CR6_EQ, 664 */
		/* 8218A92Ch case   24:*/		if ( !regs.CR[6].eq ) { return 0x8218ABC4;  }
		/* 8218A92Ch case   24:*/		return 0x8218A930;
		  /* 8218A930h */ case   25:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 8218A930h case   25:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 8218A930h case   25:*/		return 0x8218A934;
		  /* 8218A934h */ case   26:  		/* bc 12, CR0_EQ, 656 */
		/* 8218A934h case   26:*/		if ( regs.CR[0].eq ) { return 0x8218ABC4;  }
		/* 8218A934h case   26:*/		return 0x8218A938;
		  /* 8218A938h */ case   27:  		/* lwz R26, <#[R24 + 44]> */
		/* 8218A938h case   27:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R24 + 0x0000002C) );
		/* 8218A938h case   27:*/		return 0x8218A93C;
		  /* 8218A93Ch */ case   28:  		/* mr R3, R30 */
		/* 8218A93Ch case   28:*/		regs.R3 = regs.R30;
		/* 8218A93Ch case   28:*/		return 0x8218A940;
		  /* 8218A940h */ case   29:  		/* lwz R25, <#[R26 + 12]> */
		/* 8218A940h case   29:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R26 + 0x0000000C) );
		/* 8218A940h case   29:*/		return 0x8218A944;
		  /* 8218A944h */ case   30:  		/* mr R4, R25 */
		/* 8218A944h case   30:*/		regs.R4 = regs.R25;
		/* 8218A944h case   30:*/		return 0x8218A948;
		  /* 8218A948h */ case   31:  		/* bl -27504 */
		/* 8218A948h case   31:*/		regs.LR = 0x8218A94C; return 0x82183DD8;
		/* 8218A948h case   31:*/		return 0x8218A94C;
		  /* 8218A94Ch */ case   32:  		/* mr R23, R3 */
		/* 8218A94Ch case   32:*/		regs.R23 = regs.R3;
		/* 8218A94Ch case   32:*/		return 0x8218A950;
		  /* 8218A950h */ case   33:  		/* mr R4, R24 */
		/* 8218A950h case   33:*/		regs.R4 = regs.R24;
		/* 8218A950h case   33:*/		return 0x8218A954;
		  /* 8218A954h */ case   34:  		/* mr R3, R30 */
		/* 8218A954h case   34:*/		regs.R3 = regs.R30;
		/* 8218A954h case   34:*/		return 0x8218A958;
		  /* 8218A958h */ case   35:  		/* bl -27520 */
		/* 8218A958h case   35:*/		regs.LR = 0x8218A95C; return 0x82183DD8;
		/* 8218A958h case   35:*/		return 0x8218A95C;
		  /* 8218A95Ch */ case   36:  		/* addi R11, R1, 96 */
		/* 8218A95Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8218A95Ch case   36:*/		return 0x8218A960;
		  /* 8218A960h */ case   37:  		/* lwz R10, <#[R24 + 8]> */
		/* 8218A960h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000008) );
		/* 8218A960h case   37:*/		return 0x8218A964;
		  /* 8218A964h */ case   38:  		/* mr R22, R3 */
		/* 8218A964h case   38:*/		regs.R22 = regs.R3;
		/* 8218A964h case   38:*/		return 0x8218A968;
		  /* 8218A968h */ case   39:  		/* mr R27, R19 */
		/* 8218A968h case   39:*/		regs.R27 = regs.R19;
		/* 8218A968h case   39:*/		return 0x8218A96C;
		  /* 8218A96Ch */ case   40:  		/* rlwinm R29, R10, 31, 28, 31 */
		/* 8218A96Ch case   40:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R29,regs.R10);
		/* 8218A96Ch case   40:*/		return 0x8218A970;
		  /* 8218A970h */ case   41:  		/* mr R31, R19 */
		/* 8218A970h case   41:*/		regs.R31 = regs.R19;
		/* 8218A970h case   41:*/		return 0x8218A974;
		  /* 8218A974h */ case   42:  		/* stw R19, <#[R11]> */
		/* 8218A974h case   42:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 8218A974h case   42:*/		return 0x8218A978;
		  /* 8218A978h */ case   43:  		/* cmplwi CR6, R29, 0 */
		/* 8218A978h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8218A978h case   43:*/		return 0x8218A97C;
		  /* 8218A97Ch */ case   44:  		/* bc 12, CR6_EQ, 36 */
		/* 8218A97Ch case   44:*/		if ( regs.CR[6].eq ) { return 0x8218A9A0;  }
		/* 8218A97Ch case   44:*/		return 0x8218A980;
		  /* 8218A980h */ case   45:  		/* addi R11, R29, -1 */
		/* 8218A980h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 8218A980h case   45:*/		return 0x8218A984;
		  /* 8218A984h */ case   46:  		/* lhz R10, <#[R24 + 18]> */
		/* 8218A984h case   46:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000012) );
		/* 8218A984h case   46:*/		return 0x8218A988;
		  /* 8218A988h */ case   47:  		/* andc R11, R29, R11 */
		/* 8218A988h case   47:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 8218A988h case   47:*/		return 0x8218A98C;
		  /* 8218A98Ch */ case   48:  		/* cntlzw R11, R11 */
		/* 8218A98Ch case   48:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8218A98Ch case   48:*/		return 0x8218A990;
		  /* 8218A990h */ case   49:  		/* subf R11, R11, R10 */
		/* 8218A990h case   49:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8218A990h case   49:*/		return 0x8218A994;
		  /* 8218A994h */ case   50:  		/* addi R28, R11, 31 */
		/* 8218A994h case   50:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x1F);
		/* 8218A994h case   50:*/		return 0x8218A998;
		  /* 8218A998h */ case   51:  		/* mr R11, R28 */
		/* 8218A998h case   51:*/		regs.R11 = regs.R28;
		/* 8218A998h case   51:*/		return 0x8218A99C;
		  /* 8218A99Ch */ case   52:  		/* b 12 */
		/* 8218A99Ch case   52:*/		return 0x8218A9A8;
		/* 8218A99Ch case   52:*/		return 0x8218A9A0;
	}
	return 0x8218A9A0;
} // Block from 8218A8CCh-8218A9A0h (53 instructions)

//////////////////////////////////////////////////////
// Block at 8218A9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A9A0);
		  /* 8218A9A0h */ case    0:  		/* mr R28, R19 */
		/* 8218A9A0h case    0:*/		regs.R28 = regs.R19;
		/* 8218A9A0h case    0:*/		return 0x8218A9A4;
		  /* 8218A9A4h */ case    1:  		/* mr R11, R19 */
		/* 8218A9A4h case    1:*/		regs.R11 = regs.R19;
		/* 8218A9A4h case    1:*/		return 0x8218A9A8;
	}
	return 0x8218A9A8;
} // Block from 8218A9A0h-8218A9A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218A9A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218A9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218A9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218A9A8);
		  /* 8218A9A8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8218A9A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218A9A8h case    0:*/		return 0x8218A9AC;
		  /* 8218A9ACh */ case    1:  		/* bc 12, CR6_EQ, 264 */
		/* 8218A9ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x8218AAB4;  }
		/* 8218A9ACh case    1:*/		return 0x8218A9B0;
		  /* 8218A9B0h */ case    2:  		/* mr R4, R28 */
		/* 8218A9B0h case    2:*/		regs.R4 = regs.R28;
		/* 8218A9B0h case    2:*/		return 0x8218A9B4;
		  /* 8218A9B4h */ case    3:  		/* mr R3, R30 */
		/* 8218A9B4h case    3:*/		regs.R3 = regs.R30;
		/* 8218A9B4h case    3:*/		return 0x8218A9B8;
		  /* 8218A9B8h */ case    4:  		/* bl -28760 */
		/* 8218A9B8h case    4:*/		regs.LR = 0x8218A9BC; return 0x82183960;
		/* 8218A9B8h case    4:*/		return 0x8218A9BC;
		  /* 8218A9BCh */ case    5:  		/* lhz R11, <#[R24 + 18]> */
		/* 8218A9BCh case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000012) );
		/* 8218A9BCh case    5:*/		return 0x8218A9C0;
		  /* 8218A9C0h */ case    6:  		/* lwz R10, <#[R26]> */
		/* 8218A9C0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8218A9C0h case    6:*/		return 0x8218A9C4;
		  /* 8218A9C4h */ case    7:  		/* mr R16, R3 */
		/* 8218A9C4h case    7:*/		regs.R16 = regs.R3;
		/* 8218A9C4h case    7:*/		return 0x8218A9C8;
		  /* 8218A9C8h */ case    8:  		/* subf R9, R11, R28 */
		/* 8218A9C8h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R28);
		/* 8218A9C8h case    8:*/		return 0x8218A9CC;
		  /* 8218A9CCh */ case    9:  		/* lhz R11, <#[R25 + 18]> */
		/* 8218A9CCh case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000012) );
		/* 8218A9CCh case    9:*/		return 0x8218A9D0;
		  /* 8218A9D0h */ case   10:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 8218A9D0h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 8218A9D0h case   10:*/		return 0x8218A9D4;
		  /* 8218A9D4h */ case   11:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 8218A9D4h case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 8218A9D4h case   11:*/		return 0x8218A9D8;
		  /* 8218A9D8h */ case   12:  		/* mr R3, R30 */
		/* 8218A9D8h case   12:*/		regs.R3 = regs.R30;
		/* 8218A9D8h case   12:*/		return 0x8218A9DC;
		  /* 8218A9DCh */ case   13:  		/* srw R10, R10, R9 */
		/* 8218A9DCh case   13:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8218A9DCh case   13:*/		return 0x8218A9E0;
		  /* 8218A9E0h */ case   14:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 8218A9E0h case   14:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 8218A9E0h case   14:*/		return 0x8218A9E4;
		  /* 8218A9E4h */ case   15:  		/* add R4, R10, R11 */
		/* 8218A9E4h case   15:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8218A9E4h case   15:*/		return 0x8218A9E8;
		  /* 8218A9E8h */ case   16:  		/* bl -28808 */
		/* 8218A9E8h case   16:*/		regs.LR = 0x8218A9EC; return 0x82183960;
		/* 8218A9E8h case   16:*/		return 0x8218A9EC;
		  /* 8218A9ECh */ case   17:  		/* rlwinm R10, R16, 1, 0, 30 */
		/* 8218A9ECh case   17:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R16);
		/* 8218A9ECh case   17:*/		return 0x8218A9F0;
		  /* 8218A9F0h */ case   18:  		/* lwz R8, <#[R30 + 692]> */
		/* 8218A9F0h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000002B4) );
		/* 8218A9F0h case   18:*/		return 0x8218A9F4;
		  /* 8218A9F4h */ case   19:  		/* rlwinm R9, R16, 1, 0, 25 */
		/* 8218A9F4h case   19:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R9,regs.R16);
		/* 8218A9F4h case   19:*/		return 0x8218A9F8;
		  /* 8218A9F8h */ case   20:  		/* subf R11, R10, R10 */
		/* 8218A9F8h case   20:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R10);
		/* 8218A9F8h case   20:*/		return 0x8218A9FC;
		  /* 8218A9FCh */ case   21:  		/* rlwinm R7, R16, 30, 3, 28 */
		/* 8218A9FCh case   21:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R7,regs.R16);
		/* 8218A9FCh case   21:*/		return 0x8218AA00;
		  /* 8218AA00h */ case   22:  		/* subf R10, R9, R10 */
		/* 8218AA00h case   22:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8218AA00h case   22:*/		return 0x8218AA04;
		  /* 8218AA04h */ case   23:  		/* addi R11, R11, 1 */
		/* 8218AA04h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218AA04h case   23:*/		return 0x8218AA08;
		  /* 8218AA08h */ case   24:  		/* rldicl R10, R10, 0, 32 */
		/* 8218AA08h case   24:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 8218AA08h case   24:*/		return 0x8218AA0C;
		  /* 8218AA0Ch */ case   25:  		/* rldicl R11, R11, 0, 32 */
		/* 8218AA0Ch case   25:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8218AA0Ch case   25:*/		return 0x8218AA10;
		  /* 8218AA10h */ case   26:  		/* ldx R7, <#[R7 + R8]> */
		/* 8218AA10h case   26:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 8218AA10h case   26:*/		return 0x8218AA14;
		  /* 8218AA14h */ case   27:  		/* rlwinm R6, R31, 0, 27, 31 */
		/* 8218AA14h case   27:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R31);
		/* 8218AA14h case   27:*/		return 0x8218AA18;
		  /* 8218AA18h */ case   28:  		/* slw R9, R20, R11 */
		/* 8218AA18h case   28:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R11);
		/* 8218AA18h case   28:*/		return 0x8218AA1C;
		  /* 8218AA1Ch */ case   29:  		/* srd R7, R7, R10 */
		/* 8218AA1Ch case   29:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 8218AA1Ch case   29:*/		return 0x8218AA20;
		  /* 8218AA20h */ case   30:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 8218AA20h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 8218AA20h case   30:*/		return 0x8218AA24;
		  /* 8218AA24h */ case   31:  		/* addi R9, R9, -1 */
		/* 8218AA24h case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8218AA24h case   31:*/		return 0x8218AA28;
		  /* 8218AA28h */ case   32:  		/* rlwinm R10, R31, 29, 3, 29 */
		/* 8218AA28h case   32:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R31);
		/* 8218AA28h case   32:*/		return 0x8218AA2C;
		  /* 8218AA2Ch */ case   33:  		/* addi R11, R1, 96 */
		/* 8218AA2Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8218AA2Ch case   33:*/		return 0x8218AA30;
		  /* 8218AA30h */ case   34:  		/* and R9, R7, R9 */
		/* 8218AA30h case   34:*/		cpu::op::and<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8218AA30h case   34:*/		return 0x8218AA34;
		  /* 8218AA34h */ case   35:  		/* addi R27, R27, 1 */
		/* 8218AA34h case   35:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8218AA34h case   35:*/		return 0x8218AA38;
		  /* 8218AA38h */ case   36:  		/* slw R9, R9, R6 */
		/* 8218AA38h case   36:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 8218AA38h case   36:*/		return 0x8218AA3C;
		  /* 8218AA3Ch */ case   37:  		/* lwzx R7, <#[R10 + R11]> */
		/* 8218AA3Ch case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218AA3Ch case   37:*/		return 0x8218AA40;
		  /* 8218AA40h */ case   38:  		/* addi R6, R29, -1 */
		/* 8218AA40h case   38:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R29,0xFFFFFFFF);
		/* 8218AA40h case   38:*/		return 0x8218AA44;
		  /* 8218AA44h */ case   39:  		/* or R9, R9, R7 */
		/* 8218AA44h case   39:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8218AA44h case   39:*/		return 0x8218AA48;
		  /* 8218AA48h */ case   40:  		/* rlwinm R7, R3, 1, 0, 30 */
		/* 8218AA48h case   40:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R3);
		/* 8218AA48h case   40:*/		return 0x8218AA4C;
		  /* 8218AA4Ch */ case   41:  		/* stwx R9, <#[R10 + R11]> */
		/* 8218AA4Ch case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218AA4Ch case   41:*/		return 0x8218AA50;
		  /* 8218AA50h */ case   42:  		/* rlwinm R10, R3, 1, 0, 25 */
		/* 8218AA50h case   42:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R10,regs.R3);
		/* 8218AA50h case   42:*/		return 0x8218AA54;
		  /* 8218AA54h */ case   43:  		/* subf R11, R7, R7 */
		/* 8218AA54h case   43:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R7);
		/* 8218AA54h case   43:*/		return 0x8218AA58;
		  /* 8218AA58h */ case   44:  		/* rlwinm R9, R3, 30, 3, 28 */
		/* 8218AA58h case   44:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R9,regs.R3);
		/* 8218AA58h case   44:*/		return 0x8218AA5C;
		  /* 8218AA5Ch */ case   45:  		/* addi R11, R11, 1 */
		/* 8218AA5Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218AA5Ch case   45:*/		return 0x8218AA60;
		  /* 8218AA60h */ case   46:  		/* subf R10, R10, R7 */
		/* 8218AA60h case   46:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8218AA60h case   46:*/		return 0x8218AA64;
		  /* 8218AA64h */ case   47:  		/* rldicl R7, R11, 0, 32 */
		/* 8218AA64h case   47:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R7,regs.R11);
		/* 8218AA64h case   47:*/		return 0x8218AA68;
		  /* 8218AA68h */ case   48:  		/* rldicl R10, R10, 0, 32 */
		/* 8218AA68h case   48:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 8218AA68h case   48:*/		return 0x8218AA6C;
		  /* 8218AA6Ch */ case   49:  		/* ldx R9, <#[R9 + R8]> */
		/* 8218AA6Ch case   49:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8218AA6Ch case   49:*/		return 0x8218AA70;
		  /* 8218AA70h */ case   50:  		/* slw R8, R20, R7 */
		/* 8218AA70h case   50:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R20,regs.R7);
		/* 8218AA70h case   50:*/		return 0x8218AA74;
		  /* 8218AA74h */ case   51:  		/* addi R11, R31, 4 */
		/* 8218AA74h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8218AA74h case   51:*/		return 0x8218AA78;
		  /* 8218AA78h */ case   52:  		/* srd R7, R9, R10 */
		/* 8218AA78h case   52:*/		cpu::op::srd<0>(regs,&regs.R7,regs.R9,regs.R10);
		/* 8218AA78h case   52:*/		return 0x8218AA7C;
		  /* 8218AA7Ch */ case   53:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 8218AA7Ch case   53:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 8218AA7Ch case   53:*/		return 0x8218AA80;
		  /* 8218AA80h */ case   54:  		/* addi R10, R1, 96 */
		/* 8218AA80h case   54:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8218AA80h case   54:*/		return 0x8218AA84;
		  /* 8218AA84h */ case   55:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 8218AA84h case   55:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 8218AA84h case   55:*/		return 0x8218AA88;
		  /* 8218AA88h */ case   56:  		/* addi R8, R8, -1 */
		/* 8218AA88h case   56:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8218AA88h case   56:*/		return 0x8218AA8C;
		  /* 8218AA8Ch */ case   57:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8218AA8Ch case   57:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8218AA8Ch case   57:*/		return 0x8218AA90;
		  /* 8218AA90h */ case   58:  		/* and R8, R7, R8 */
		/* 8218AA90h case   58:*/		cpu::op::and<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8218AA90h case   58:*/		return 0x8218AA94;
		  /* 8218AA94h */ case   59:  		/* lwzx R7, <#[R9 + R10]> */
		/* 8218AA94h case   59:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8218AA94h case   59:*/		return 0x8218AA98;
		  /* 8218AA98h */ case   60:  		/* addi R31, R31, 8 */
		/* 8218AA98h case   60:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x8);
		/* 8218AA98h case   60:*/		return 0x8218AA9C;
		  /* 8218AA9Ch */ case   61:  		/* slw R11, R8, R11 */
		/* 8218AA9Ch case   61:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8218AA9Ch case   61:*/		return 0x8218AAA0;
		  /* 8218AAA0h */ case   62:  		/* or R11, R11, R7 */
		/* 8218AAA0h case   62:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8218AAA0h case   62:*/		return 0x8218AAA4;
		  /* 8218AAA4h */ case   63:  		/* andc R8, R29, R6 */
		/* 8218AAA4h case   63:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R29,regs.R6);
		/* 8218AAA4h case   63:*/		return 0x8218AAA8;
		  /* 8218AAA8h */ case   64:  		/* stwx R11, <#[R9 + R10]> */
		/* 8218AAA8h case   64:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8218AAA8h case   64:*/		return 0x8218AAAC;
		  /* 8218AAACh */ case   65:  		/* subf R29, R8, R29 */
		/* 8218AAACh case   65:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R8,regs.R29);
		/* 8218AAACh case   65:*/		return 0x8218AAB0;
		  /* 8218AAB0h */ case   66:  		/* b -312 */
		/* 8218AAB0h case   66:*/		return 0x8218A978;
		/* 8218AAB0h case   66:*/		return 0x8218AAB4;
	}
	return 0x8218AAB4;
} // Block from 8218A9A8h-8218AAB4h (67 instructions)

//////////////////////////////////////////////////////
// Block at 8218AAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AAB4);
		  /* 8218AAB4h */ case    0:  		/* mr R29, R19 */
		/* 8218AAB4h case    0:*/		regs.R29 = regs.R19;
		/* 8218AAB4h case    0:*/		return 0x8218AAB8;
		  /* 8218AAB8h */ case    1:  		/* cmplw CR6, R23, R22 */
		/* 8218AAB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 8218AAB8h case    1:*/		return 0x8218AABC;
		  /* 8218AABCh */ case    2:  		/* bc 4, CR6_EQ, 148 */
		/* 8218AABCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8218AB50;  }
		/* 8218AABCh case    2:*/		return 0x8218AAC0;
		  /* 8218AAC0h */ case    3:  		/* mr R7, R19 */
		/* 8218AAC0h case    3:*/		regs.R7 = regs.R19;
		/* 8218AAC0h case    3:*/		return 0x8218AAC4;
		  /* 8218AAC4h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 8218AAC4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8218AAC4h case    4:*/		return 0x8218AAC8;
		  /* 8218AAC8h */ case    5:  		/* bc 12, CR6_EQ, 224 */
		/* 8218AAC8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8218ABA8;  }
		/* 8218AAC8h case    5:*/		return 0x8218AACC;
		  /* 8218AACCh */ case    6:  		/* li R11, 4 */
		/* 8218AACCh case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8218AACCh case    6:*/		return 0x8218AAD0;
		  /* 8218AAD0h */ case    7:  		/* addi R10, R11, -4 */
		/* 8218AAD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 8218AAD0h case    7:*/		return 0x8218AAD4;
		  /* 8218AAD4h */ case    8:  		/* addi R9, R11, 3 */
		/* 8218AAD4h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3);
		/* 8218AAD4h case    8:*/		return 0x8218AAD8;
		  /* 8218AAD8h */ case    9:  		/* addi R8, R11, -1 */
		/* 8218AAD8h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 8218AAD8h case    9:*/		return 0x8218AADC;
		  /* 8218AADCh */ case   10:  		/* addi R5, R1, 96 */
		/* 8218AADCh case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8218AADCh case   10:*/		return 0x8218AAE0;
		  /* 8218AAE0h */ case   11:  		/* rlwinm R6, R11, 29, 3, 29 */
		/* 8218AAE0h case   11:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R6,regs.R11);
		/* 8218AAE0h case   11:*/		return 0x8218AAE4;
		  /* 8218AAE4h */ case   12:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8218AAE4h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8218AAE4h case   12:*/		return 0x8218AAE8;
		  /* 8218AAE8h */ case   13:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8218AAE8h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8218AAE8h case   13:*/		return 0x8218AAEC;
		  /* 8218AAECh */ case   14:  		/* rlwinm R4, R10, 29, 3, 29 */
		/* 8218AAECh case   14:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R10);
		/* 8218AAECh case   14:*/		return 0x8218AAF0;
		  /* 8218AAF0h */ case   15:  		/* addi R3, R1, 96 */
		/* 8218AAF0h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8218AAF0h case   15:*/		return 0x8218AAF4;
		  /* 8218AAF4h */ case   16:  		/* slw R9, R20, R9 */
		/* 8218AAF4h case   16:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 8218AAF4h case   16:*/		return 0x8218AAF8;
		  /* 8218AAF8h */ case   17:  		/* lwzx R6, <#[R6 + R5]> */
		/* 8218AAF8h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 8218AAF8h case   17:*/		return 0x8218AAFC;
		  /* 8218AAFCh */ case   18:  		/* slw R8, R20, R8 */
		/* 8218AAFCh case   18:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R20,regs.R8);
		/* 8218AAFCh case   18:*/		return 0x8218AB00;
		  /* 8218AB00h */ case   19:  		/* lwzx R5, <#[R4 + R3]> */
		/* 8218AB00h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + regs.R3 + 0x00000000) );
		/* 8218AB00h case   19:*/		return 0x8218AB04;
		  /* 8218AB04h */ case   20:  		/* addi R9, R9, -1 */
		/* 8218AB04h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8218AB04h case   20:*/		return 0x8218AB08;
		  /* 8218AB08h */ case   21:  		/* addi R8, R8, -1 */
		/* 8218AB08h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8218AB08h case   21:*/		return 0x8218AB0C;
		  /* 8218AB0Ch */ case   22:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8218AB0Ch case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8218AB0Ch case   22:*/		return 0x8218AB10;
		  /* 8218AB10h */ case   23:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 8218AB10h case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 8218AB10h case   23:*/		return 0x8218AB14;
		  /* 8218AB14h */ case   24:  		/* and R9, R9, R6 */
		/* 8218AB14h case   24:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 8218AB14h case   24:*/		return 0x8218AB18;
		  /* 8218AB18h */ case   25:  		/* and R8, R8, R5 */
		/* 8218AB18h case   25:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 8218AB18h case   25:*/		return 0x8218AB1C;
		  /* 8218AB1Ch */ case   26:  		/* slw R5, R18, R10 */
		/* 8218AB1Ch case   26:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R18,regs.R10);
		/* 8218AB1Ch case   26:*/		return 0x8218AB20;
		  /* 8218AB20h */ case   27:  		/* slw R6, R18, R4 */
		/* 8218AB20h case   27:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R18,regs.R4);
		/* 8218AB20h case   27:*/		return 0x8218AB24;
		  /* 8218AB24h */ case   28:  		/* and R9, R9, R6 */
		/* 8218AB24h case   28:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 8218AB24h case   28:*/		return 0x8218AB28;
		  /* 8218AB28h */ case   29:  		/* and R8, R8, R5 */
		/* 8218AB28h case   29:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 8218AB28h case   29:*/		return 0x8218AB2C;
		  /* 8218AB2Ch */ case   30:  		/* srw R9, R9, R4 */
		/* 8218AB2Ch case   30:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 8218AB2Ch case   30:*/		return 0x8218AB30;
		  /* 8218AB30h */ case   31:  		/* srw R10, R8, R10 */
		/* 8218AB30h case   31:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8218AB30h case   31:*/		return 0x8218AB34;
		  /* 8218AB34h */ case   32:  		/* cmplw CR6, R10, R9 */
		/* 8218AB34h case   32:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8218AB34h case   32:*/		return 0x8218AB38;
		  /* 8218AB38h */ case   33:  		/* bc 4, CR6_EQ, 108 */
		/* 8218AB38h case   33:*/		if ( !regs.CR[6].eq ) { return 0x8218ABA4;  }
		/* 8218AB38h case   33:*/		return 0x8218AB3C;
		  /* 8218AB3Ch */ case   34:  		/* addi R7, R7, 1 */
		/* 8218AB3Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8218AB3Ch case   34:*/		return 0x8218AB40;
		  /* 8218AB40h */ case   35:  		/* addi R11, R11, 8 */
		/* 8218AB40h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8218AB40h case   35:*/		return 0x8218AB44;
		  /* 8218AB44h */ case   36:  		/* cmplw CR6, R7, R27 */
		/* 8218AB44h case   36:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R27);
		/* 8218AB44h case   36:*/		return 0x8218AB48;
		  /* 8218AB48h */ case   37:  		/* bc 12, CR6_LT, -120 */
		/* 8218AB48h case   37:*/		if ( regs.CR[6].lt ) { return 0x8218AAD0;  }
		/* 8218AB48h case   37:*/		return 0x8218AB4C;
		  /* 8218AB4Ch */ case   38:  		/* b 92 */
		/* 8218AB4Ch case   38:*/		return 0x8218ABA8;
		/* 8218AB4Ch case   38:*/		return 0x8218AB50;
	}
	return 0x8218AB50;
} // Block from 8218AAB4h-8218AB50h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8218AB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AB50);
		  /* 8218AB50h */ case    0:  		/* lwz R31, <#[R1 + 96]> */
		/* 8218AB50h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 8218AB50h case    0:*/		return 0x8218AB54;
		  /* 8218AB54h */ case    1:  		/* li R9, 0 */
		/* 8218AB54h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8218AB54h case    1:*/		return 0x8218AB58;
		  /* 8218AB58h */ case    2:  		/* li R8, 0 */
		/* 8218AB58h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218AB58h case    2:*/		return 0x8218AB5C;
		  /* 8218AB5Ch */ case    3:  		/* mr R7, R27 */
		/* 8218AB5Ch case    3:*/		regs.R7 = regs.R27;
		/* 8218AB5Ch case    3:*/		return 0x8218AB60;
		  /* 8218AB60h */ case    4:  		/* mr R6, R31 */
		/* 8218AB60h case    4:*/		regs.R6 = regs.R31;
		/* 8218AB60h case    4:*/		return 0x8218AB64;
		  /* 8218AB64h */ case    5:  		/* mr R5, R23 */
		/* 8218AB64h case    5:*/		regs.R5 = regs.R23;
		/* 8218AB64h case    5:*/		return 0x8218AB68;
		  /* 8218AB68h */ case    6:  		/* mr R4, R22 */
		/* 8218AB68h case    6:*/		regs.R4 = regs.R22;
		/* 8218AB68h case    6:*/		return 0x8218AB6C;
		  /* 8218AB6Ch */ case    7:  		/* mr R3, R30 */
		/* 8218AB6Ch case    7:*/		regs.R3 = regs.R30;
		/* 8218AB6Ch case    7:*/		return 0x8218AB70;
		  /* 8218AB70h */ case    8:  		/* bl -17560 */
		/* 8218AB70h case    8:*/		regs.LR = 0x8218AB74; return 0x821866D8;
		/* 8218AB70h case    8:*/		return 0x8218AB74;
		  /* 8218AB74h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8218AB74h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8218AB74h case    9:*/		return 0x8218AB78;
		  /* 8218AB78h */ case   10:  		/* bc 12, CR0_EQ, 44 */
		/* 8218AB78h case   10:*/		if ( regs.CR[0].eq ) { return 0x8218ABA4;  }
		/* 8218AB78h case   10:*/		return 0x8218AB7C;
		  /* 8218AB7Ch */ case   11:  		/* li R10, 0 */
		/* 8218AB7Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8218AB7Ch case   11:*/		return 0x8218AB80;
		  /* 8218AB80h */ case   12:  		/* li R9, 0 */
		/* 8218AB80h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8218AB80h case   12:*/		return 0x8218AB84;
		  /* 8218AB84h */ case   13:  		/* li R8, 0 */
		/* 8218AB84h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218AB84h case   13:*/		return 0x8218AB88;
		  /* 8218AB88h */ case   14:  		/* mr R7, R27 */
		/* 8218AB88h case   14:*/		regs.R7 = regs.R27;
		/* 8218AB88h case   14:*/		return 0x8218AB8C;
		  /* 8218AB8Ch */ case   15:  		/* mr R6, R31 */
		/* 8218AB8Ch case   15:*/		regs.R6 = regs.R31;
		/* 8218AB8Ch case   15:*/		return 0x8218AB90;
		  /* 8218AB90h */ case   16:  		/* mr R5, R23 */
		/* 8218AB90h case   16:*/		regs.R5 = regs.R23;
		/* 8218AB90h case   16:*/		return 0x8218AB94;
		  /* 8218AB94h */ case   17:  		/* mr R4, R22 */
		/* 8218AB94h case   17:*/		regs.R4 = regs.R22;
		/* 8218AB94h case   17:*/		return 0x8218AB98;
		  /* 8218AB98h */ case   18:  		/* mr R3, R30 */
		/* 8218AB98h case   18:*/		regs.R3 = regs.R30;
		/* 8218AB98h case   18:*/		return 0x8218AB9C;
		  /* 8218AB9Ch */ case   19:  		/* bl -17188 */
		/* 8218AB9Ch case   19:*/		regs.LR = 0x8218ABA0; return 0x82186878;
		/* 8218AB9Ch case   19:*/		return 0x8218ABA0;
		  /* 8218ABA0h */ case   20:  		/* b 8 */
		/* 8218ABA0h case   20:*/		return 0x8218ABA8;
		/* 8218ABA0h case   20:*/		return 0x8218ABA4;
	}
	return 0x8218ABA4;
} // Block from 8218AB50h-8218ABA4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8218ABA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ABA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ABA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ABA4);
		  /* 8218ABA4h */ case    0:  		/* li R29, 1 */
		/* 8218ABA4h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8218ABA4h case    0:*/		return 0x8218ABA8;
	}
	return 0x8218ABA8;
} // Block from 8218ABA4h-8218ABA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218ABA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ABA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ABA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ABA8);
		  /* 8218ABA8h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 8218ABA8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8218ABA8h case    0:*/		return 0x8218ABAC;
		  /* 8218ABACh */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8218ABACh case    1:*/		if ( regs.CR[0].eq ) { return 0x8218ABC4;  }
		/* 8218ABACh case    1:*/		return 0x8218ABB0;
		  /* 8218ABB0h */ case    2:  		/* mr R4, R24 */
		/* 8218ABB0h case    2:*/		regs.R4 = regs.R24;
		/* 8218ABB0h case    2:*/		return 0x8218ABB4;
		  /* 8218ABB4h */ case    3:  		/* mr R3, R30 */
		/* 8218ABB4h case    3:*/		regs.R3 = regs.R30;
		/* 8218ABB4h case    3:*/		return 0x8218ABB8;
		  /* 8218ABB8h */ case    4:  		/* bl -27504 */
		/* 8218ABB8h case    4:*/		regs.LR = 0x8218ABBC; return 0x82184048;
		/* 8218ABB8h case    4:*/		return 0x8218ABBC;
		  /* 8218ABBCh */ case    5:  		/* stw R17, <#[R3 + 32]> */
		/* 8218ABBCh case    5:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R3 + 0x00000020) );
		/* 8218ABBCh case    5:*/		return 0x8218ABC0;
		  /* 8218ABC0h */ case    6:  		/* mr R17, R3 */
		/* 8218ABC0h case    6:*/		regs.R17 = regs.R3;
		/* 8218ABC0h case    6:*/		return 0x8218ABC4;
	}
	return 0x8218ABC4;
} // Block from 8218ABA8h-8218ABC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218ABC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ABC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ABC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ABC4);
		  /* 8218ABC4h */ case    0:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 8218ABC4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 8218ABC4h case    0:*/		return 0x8218ABC8;
		  /* 8218ABC8h */ case    1:  		/* lwz R24, <#[R11 + 40]> */
		/* 8218ABC8h case    1:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x00000028) );
		/* 8218ABC8h case    1:*/		return 0x8218ABCC;
		  /* 8218ABCCh */ case    2:  		/* rlwinm. R11, R24, 0, 31, 31 */
		/* 8218ABCCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R24);
		/* 8218ABCCh case    2:*/		return 0x8218ABD0;
		  /* 8218ABD0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8218ABD0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218ABDC;  }
		/* 8218ABD0h case    3:*/		return 0x8218ABD4;
		  /* 8218ABD4h */ case    4:  		/* cmplwi CR6, R24, 0 */
		/* 8218ABD4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8218ABD4h case    4:*/		return 0x8218ABD8;
		  /* 8218ABD8h */ case    5:  		/* bc 4, CR6_EQ, -696 */
		/* 8218ABD8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8218A920;  }
		/* 8218ABD8h case    5:*/		return 0x8218ABDC;
	}
	return 0x8218ABDC;
} // Block from 8218ABC4h-8218ABDCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218ABDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ABDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ABDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ABDC);
		  /* 8218ABDCh */ case    0:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 8218ABDCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 8218ABDCh case    0:*/		return 0x8218ABE0;
		  /* 8218ABE0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8218ABE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8218ABE0h case    1:*/		return 0x8218ABE4;
		  /* 8218ABE4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218ABE4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218ABE4h case    2:*/		return 0x8218ABE8;
		  /* 8218ABE8h */ case    3:  		/* bc 4, CR0_EQ, 28 */
		/* 8218ABE8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218AC04;  }
		/* 8218ABE8h case    3:*/		return 0x8218ABEC;
		  /* 8218ABECh */ case    4:  		/* mr R21, R11 */
		/* 8218ABECh case    4:*/		regs.R21 = regs.R11;
		/* 8218ABECh case    4:*/		return 0x8218ABF0;
		  /* 8218ABF0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218ABF0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218ABF0h case    5:*/		return 0x8218ABF4;
		  /* 8218ABF4h */ case    6:  		/* bc 4, CR6_EQ, -744 */
		/* 8218ABF4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8218A90C;  }
		/* 8218ABF4h case    6:*/		return 0x8218ABF8;
		  /* 8218ABF8h */ case    7:  		/* b 12 */
		/* 8218ABF8h case    7:*/		return 0x8218AC04;
		/* 8218ABF8h case    7:*/		return 0x8218ABFC;
	}
	return 0x8218ABFC;
} // Block from 8218ABDCh-8218ABFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8218ABFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ABFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ABFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ABFC);
		  /* 8218ABFCh */ case    0:  		/* lwz R17, <#[R1 + 84]> */
		/* 8218ABFCh case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 8218ABFCh case    0:*/		return 0x8218AC00;
		  /* 8218AC00h */ case    1:  		/* li R19, 0 */
		/* 8218AC00h case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 8218AC00h case    1:*/		return 0x8218AC04;
	}
	return 0x8218AC04;
} // Block from 8218ABFCh-8218AC04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218AC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AC04);
		  /* 8218AC04h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 8218AC04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8218AC04h case    0:*/		return 0x8218AC08;
		  /* 8218AC08h */ case    1:  		/* bc 4, CR6_EQ, 124 */
		/* 8218AC08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218AC84;  }
		/* 8218AC08h case    1:*/		return 0x8218AC0C;
		  /* 8218AC0Ch */ case    2:  		/* lwz R11, <#[R1 + 112]> */
		/* 8218AC0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8218AC0Ch case    2:*/		return 0x8218AC10;
		  /* 8218AC10h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8218AC10h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218AC10h case    3:*/		return 0x8218AC14;
		  /* 8218AC14h */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 8218AC14h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8218AC84;  }
		/* 8218AC14h case    4:*/		return 0x8218AC18;
		  /* 8218AC18h */ case    5:  		/* lwz R31, <#[R1 + 92]> */
		/* 8218AC18h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8218AC18h case    5:*/		return 0x8218AC1C;
		  /* 8218AC1Ch */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 8218AC1Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218AC1Ch case    6:*/		return 0x8218AC20;
		  /* 8218AC20h */ case    7:  		/* bc 4, CR6_EQ, 104 */
		/* 8218AC20h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8218AC88;  }
		/* 8218AC20h case    7:*/		return 0x8218AC24;
		  /* 8218AC24h */ case    8:  		/* lbz R11, <#[R1 + 80]> */
		/* 8218AC24h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8218AC24h case    8:*/		return 0x8218AC28;
		  /* 8218AC28h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8218AC28h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218AC28h case    9:*/		return 0x8218AC2C;
		  /* 8218AC2Ch */ case   10:  		/* bc 4, CR0_EQ, 92 */
		/* 8218AC2Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8218AC88;  }
		/* 8218AC2Ch case   10:*/		return 0x8218AC30;
		  /* 8218AC30h */ case   11:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218AC30h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218AC30h case   11:*/		return 0x8218AC34;
		  /* 8218AC34h */ case   12:  		/* li R6, 0 */
		/* 8218AC34h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218AC34h case   12:*/		return 0x8218AC38;
		  /* 8218AC38h */ case   13:  		/* mr R3, R30 */
		/* 8218AC38h case   13:*/		regs.R3 = regs.R30;
		/* 8218AC38h case   13:*/		return 0x8218AC3C;
		  /* 8218AC3Ch */ case   14:  		/* lwz R4, <#[R30 + 676]> */
		/* 8218AC3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000002A4) );
		/* 8218AC3Ch case   14:*/		return 0x8218AC40;
		  /* 8218AC40h */ case   15:  		/* mulli R5, R11, 40 */
		/* 8218AC40h case   15:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 8218AC40h case   15:*/		return 0x8218AC44;
		  /* 8218AC44h */ case   16:  		/* bl -122356 */
		/* 8218AC44h case   16:*/		regs.LR = 0x8218AC48; return 0x8216CE50;
		/* 8218AC44h case   16:*/		return 0x8218AC48;
		  /* 8218AC48h */ case   17:  		/* stw R19, <#[R30 + 676]> */
		/* 8218AC48h case   17:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002A4) );
		/* 8218AC48h case   17:*/		return 0x8218AC4C;
		  /* 8218AC4Ch */ case   18:  		/* lwz R11, <#[R1 + 128]> */
		/* 8218AC4Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8218AC4Ch case   18:*/		return 0x8218AC50;
		  /* 8218AC50h */ case   19:  		/* lwz R10, <#[R30 + 668]> */
		/* 8218AC50h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218AC50h case   19:*/		return 0x8218AC54;
		  /* 8218AC54h */ case   20:  		/* lwz R4, <#[R30 + 684]> */
		/* 8218AC54h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218AC54h case   20:*/		return 0x8218AC58;
		  /* 8218AC58h */ case   21:  		/* li R6, 0 */
		/* 8218AC58h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218AC58h case   21:*/		return 0x8218AC5C;
		  /* 8218AC5Ch */ case   22:  		/* mr R3, R30 */
		/* 8218AC5Ch case   22:*/		regs.R3 = regs.R30;
		/* 8218AC5Ch case   22:*/		return 0x8218AC60;
		  /* 8218AC60h */ case   23:  		/* mullw R5, R10, R11 */
		/* 8218AC60h case   23:*/		cpu::op::mullw<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 8218AC60h case   23:*/		return 0x8218AC64;
		  /* 8218AC64h */ case   24:  		/* bl -122388 */
		/* 8218AC64h case   24:*/		regs.LR = 0x8218AC68; return 0x8216CE50;
		/* 8218AC64h case   24:*/		return 0x8218AC68;
		  /* 8218AC68h */ case   25:  		/* lwz R11, <#[R1 + 108]> */
		/* 8218AC68h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8218AC68h case   25:*/		return 0x8218AC6C;
		  /* 8218AC6Ch */ case   26:  		/* lwz R10, <#[R1 + 388]> */
		/* 8218AC6Ch case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000184) );
		/* 8218AC6Ch case   26:*/		return 0x8218AC70;
		  /* 8218AC70h */ case   27:  		/* stw R19, <#[R30 + 684]> */
		/* 8218AC70h case   27:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218AC70h case   27:*/		return 0x8218AC74;
		  /* 8218AC74h */ case   28:  		/* lbz R3, <#[R1 + 81]> */
		/* 8218AC74h case   28:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000051) );
		/* 8218AC74h case   28:*/		return 0x8218AC78;
		  /* 8218AC78h */ case   29:  		/* stw R11, <#[R10]> */
		/* 8218AC78h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8218AC78h case   29:*/		return 0x8218AC7C;
		  /* 8218AC7Ch */ case   30:  		/* addi R1, R1, 352 */
		/* 8218AC7Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 8218AC7Ch case   30:*/		return 0x8218AC80;
		  /* 8218AC80h */ case   31:  		/* b -1022480 */
		/* 8218AC80h case   31:*/		return 0x82091270;
		/* 8218AC80h case   31:*/		return 0x8218AC84;
	}
	return 0x8218AC84;
} // Block from 8218AC04h-8218AC84h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8218AC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AC84);
		  /* 8218AC84h */ case    0:  		/* lwz R31, <#[R1 + 92]> */
		/* 8218AC84h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8218AC84h case    0:*/		return 0x8218AC88;
	}
	return 0x8218AC88;
} // Block from 8218AC84h-8218AC88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218AC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AC88);
		  /* 8218AC88h */ case    0:  		/* li R11, 1 */
		/* 8218AC88h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218AC88h case    0:*/		return 0x8218AC8C;
		  /* 8218AC8Ch */ case    1:  		/* stw R19, <#[R30 + 680]> */
		/* 8218AC8Ch case    1:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002A8) );
		/* 8218AC8Ch case    1:*/		return 0x8218AC90;
		  /* 8218AC90h */ case    2:  		/* stw R19, <#[R30 + 684]> */
		/* 8218AC90h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218AC90h case    2:*/		return 0x8218AC94;
		  /* 8218AC94h */ case    3:  		/* stw R19, <#[R30 + 696]> */
		/* 8218AC94h case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002B8) );
		/* 8218AC94h case    3:*/		return 0x8218AC98;
		  /* 8218AC98h */ case    4:  		/* stw R19, <#[R30 + 700]> */
		/* 8218AC98h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218AC98h case    4:*/		return 0x8218AC9C;
		  /* 8218AC9Ch */ case    5:  		/* stb R11, <#[R1 + 81]> */
		/* 8218AC9Ch case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000051) );
		/* 8218AC9Ch case    5:*/		return 0x8218ACA0;
		  /* 8218ACA0h */ case    6:  		/* stw R19, <#[R30 + 704]> */
		/* 8218ACA0h case    6:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002C0) );
		/* 8218ACA0h case    6:*/		return 0x8218ACA4;
		  /* 8218ACA4h */ case    7:  		/* stw R19, <#[R30 + 708]> */
		/* 8218ACA4h case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x000002C4) );
		/* 8218ACA4h case    7:*/		return 0x8218ACA8;
		  /* 8218ACA8h */ case    8:  		/* b 32 */
		/* 8218ACA8h case    8:*/		return 0x8218ACC8;
		/* 8218ACA8h case    8:*/		return 0x8218ACAC;
		  /* 8218ACACh */ case    9:  		/* lwz R11, <#[R17 + 16]> */
		/* 8218ACACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000010) );
		/* 8218ACACh case    9:*/		return 0x8218ACB0;
		  /* 8218ACB0h */ case   10:  		/* mr R4, R17 */
		/* 8218ACB0h case   10:*/		regs.R4 = regs.R17;
		/* 8218ACB0h case   10:*/		return 0x8218ACB4;
		  /* 8218ACB4h */ case   11:  		/* mr R3, R30 */
		/* 8218ACB4h case   11:*/		regs.R3 = regs.R30;
		/* 8218ACB4h case   11:*/		return 0x8218ACB8;
		  /* 8218ACB8h */ case   12:  		/* oris R11, R11, 8 */
		/* 8218ACB8h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8218ACB8h case   12:*/		return 0x8218ACBC;
		  /* 8218ACBCh */ case   13:  		/* stw R11, <#[R17 + 16]> */
		/* 8218ACBCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000010) );
		/* 8218ACBCh case   13:*/		return 0x8218ACC0;
		  /* 8218ACC0h */ case   14:  		/* bl 178152 */
		/* 8218ACC0h case   14:*/		regs.LR = 0x8218ACC4; return 0x821B64A8;
		/* 8218ACC0h case   14:*/		return 0x8218ACC4;
		  /* 8218ACC4h */ case   15:  		/* lwz R17, <#[R17 + 32]> */
		/* 8218ACC4h case   15:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R17 + 0x00000020) );
		/* 8218ACC4h case   15:*/		return 0x8218ACC8;
	}
	return 0x8218ACC8;
} // Block from 8218AC88h-8218ACC8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8218ACC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ACC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ACC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ACC8);
		  /* 8218ACC8h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 8218ACC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8218ACC8h case    0:*/		return 0x8218ACCC;
		  /* 8218ACCCh */ case    1:  		/* bc 4, CR6_EQ, -32 */
		/* 8218ACCCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218ACAC;  }
		/* 8218ACCCh case    1:*/		return 0x8218ACD0;
		  /* 8218ACD0h */ case    2:  		/* b 28 */
		/* 8218ACD0h case    2:*/		return 0x8218ACEC;
		/* 8218ACD0h case    2:*/		return 0x8218ACD4;
		  /* 8218ACD4h */ case    3:  		/* lwz R11, <#[R30 + 116]> */
		/* 8218ACD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000074) );
		/* 8218ACD4h case    3:*/		return 0x8218ACD8;
		  /* 8218ACD8h */ case    4:  		/* addi R11, R11, 1 */
		/* 8218ACD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218ACD8h case    4:*/		return 0x8218ACDC;
		  /* 8218ACDCh */ case    5:  		/* stw R11, <#[R30 + 116]> */
		/* 8218ACDCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000074) );
		/* 8218ACDCh case    5:*/		return 0x8218ACE0;
		  /* 8218ACE0h */ case    6:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8218ACE0h case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8218ACE0h case    6:*/		return 0x8218ACE4;
		  /* 8218ACE4h */ case    7:  		/* sth R11, <#[R31 + 18]> */
		/* 8218ACE4h case    7:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 8218ACE4h case    7:*/		return 0x8218ACE8;
		  /* 8218ACE8h */ case    8:  		/* lwz R31, <#[R31 + 32]> */
		/* 8218ACE8h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000020) );
		/* 8218ACE8h case    8:*/		return 0x8218ACEC;
	}
	return 0x8218ACEC;
} // Block from 8218ACC8h-8218ACECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8218ACECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218ACEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218ACEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218ACEC);
		  /* 8218ACECh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8218ACECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218ACECh case    0:*/		return 0x8218ACF0;
		  /* 8218ACF0h */ case    1:  		/* bc 4, CR6_EQ, -28 */
		/* 8218ACF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218ACD4;  }
		/* 8218ACF0h case    1:*/		return 0x8218ACF4;
		  /* 8218ACF4h */ case    2:  		/* addi R3, R30, 972 */
		/* 8218ACF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x3CC);
		/* 8218ACF4h case    2:*/		return 0x8218ACF8;
		  /* 8218ACF8h */ case    3:  		/* bl -232648 */
		/* 8218ACF8h case    3:*/		regs.LR = 0x8218ACFC; return 0x82152030;
		/* 8218ACF8h case    3:*/		return 0x8218ACFC;
		  /* 8218ACFCh */ case    4:  		/* lwz R11, <#[R1 + 120]> */
		/* 8218ACFCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8218ACFCh case    4:*/		return 0x8218AD00;
		  /* 8218AD00h */ case    5:  		/* lwz R10, <#[R1 + 396]> */
		/* 8218AD00h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000018C) );
		/* 8218AD00h case    5:*/		return 0x8218AD04;
		  /* 8218AD04h */ case    6:  		/* addi R11, R11, 1 */
		/* 8218AD04h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8218AD04h case    6:*/		return 0x8218AD08;
		  /* 8218AD08h */ case    7:  		/* stw R11, <#[R1 + 120]> */
		/* 8218AD08h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8218AD08h case    7:*/		return 0x8218AD0C;
		  /* 8218AD0Ch */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 8218AD0Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8218AD0Ch case    8:*/		return 0x8218AD10;
		  /* 8218AD10h */ case    9:  		/* bc 4, CR6_GT, -16692 */
		/* 8218AD10h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82186BDC;  }
		/* 8218AD10h case    9:*/		return 0x8218AD14;
	}
	return 0x8218AD14;
} // Block from 8218ACECh-8218AD14h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD14);
		  /* 8218AD14h */ case    0:  		/* lwz R11, <#[R30 + 40]> */
		/* 8218AD14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8218AD14h case    0:*/		return 0x8218AD18;
		  /* 8218AD18h */ case    1:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 8218AD18h case    1:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 8218AD18h case    1:*/		return 0x8218AD1C;
		  /* 8218AD1Ch */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8218AD1Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8218AD3C;  }
		/* 8218AD1Ch case    2:*/		return 0x8218AD20;
		  /* 8218AD20h */ case    3:  		/* lwz R11, <#[R30 + 52]> */
		/* 8218AD20h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8218AD20h case    3:*/		return 0x8218AD24;
		  /* 8218AD24h */ case    4:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 8218AD24h case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 8218AD24h case    4:*/		return 0x8218AD28;
		  /* 8218AD28h */ case    5:  		/* bc 4, CR0_EQ, 20 */
		/* 8218AD28h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8218AD3C;  }
		/* 8218AD28h case    5:*/		return 0x8218AD2C;
		  /* 8218AD2Ch */ case    6:  		/* ori R11, R11, 256 */
		/* 8218AD2Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8218AD2Ch case    6:*/		return 0x8218AD30;
		  /* 8218AD30h */ case    7:  		/* mr R3, R30 */
		/* 8218AD30h case    7:*/		regs.R3 = regs.R30;
		/* 8218AD30h case    7:*/		return 0x8218AD34;
		  /* 8218AD34h */ case    8:  		/* stw R11, <#[R30 + 52]> */
		/* 8218AD34h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8218AD34h case    8:*/		return 0x8218AD38;
		  /* 8218AD38h */ case    9:  		/* bl -234048 */
		/* 8218AD38h case    9:*/		regs.LR = 0x8218AD3C; return 0x82151AF8;
		/* 8218AD38h case    9:*/		return 0x8218AD3C;
	}
	return 0x8218AD3C;
} // Block from 8218AD14h-8218AD3Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD3C);
		  /* 8218AD3Ch */ case    0:  		/* li R4, 4800 */
		/* 8218AD3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD3Ch case    0:*/		return 0x8218AD40;
		  /* 8218AD40h */ case    1:  		/* mr R3, R30 */
		/* 8218AD40h case    1:*/		regs.R3 = regs.R30;
		/* 8218AD40h case    1:*/		return 0x8218AD44;
		  /* 8218AD44h */ case    2:  		/* bl -233180 */
		/* 8218AD44h case    2:*/		regs.LR = 0x8218AD48; return 0x82151E68;
		/* 8218AD44h case    2:*/		return 0x8218AD48;
	}
	return 0x8218AD48;
} // Block from 8218AD3Ch-8218AD48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD48);
		  /* 8218AD48h */ case    0:  		/* li R4, 4800 */
		/* 8218AD48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD48h case    0:*/		return 0x8218AD4C;
		  /* 8218AD4Ch */ case    1:  		/* mr R3, R30 */
		/* 8218AD4Ch case    1:*/		regs.R3 = regs.R30;
		/* 8218AD4Ch case    1:*/		return 0x8218AD50;
		  /* 8218AD50h */ case    2:  		/* bl -233192 */
		/* 8218AD50h case    2:*/		regs.LR = 0x8218AD54; return 0x82151E68;
		/* 8218AD50h case    2:*/		return 0x8218AD54;
	}
	return 0x8218AD54;
} // Block from 8218AD48h-8218AD54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD54);
		  /* 8218AD54h */ case    0:  		/* li R4, 4800 */
		/* 8218AD54h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD54h case    0:*/		return 0x8218AD58;
		  /* 8218AD58h */ case    1:  		/* mr R3, R30 */
		/* 8218AD58h case    1:*/		regs.R3 = regs.R30;
		/* 8218AD58h case    1:*/		return 0x8218AD5C;
		  /* 8218AD5Ch */ case    2:  		/* bl -233204 */
		/* 8218AD5Ch case    2:*/		regs.LR = 0x8218AD60; return 0x82151E68;
		/* 8218AD5Ch case    2:*/		return 0x8218AD60;
	}
	return 0x8218AD60;
} // Block from 8218AD54h-8218AD60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD60);
		  /* 8218AD60h */ case    0:  		/* li R4, 4800 */
		/* 8218AD60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD60h case    0:*/		return 0x8218AD64;
		  /* 8218AD64h */ case    1:  		/* bl -233212 */
		/* 8218AD64h case    1:*/		regs.LR = 0x8218AD68; return 0x82151E68;
		/* 8218AD64h case    1:*/		return 0x8218AD68;
	}
	return 0x8218AD68;
} // Block from 8218AD60h-8218AD68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD68);
		  /* 8218AD68h */ case    0:  		/* li R4, 4800 */
		/* 8218AD68h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD68h case    0:*/		return 0x8218AD6C;
		  /* 8218AD6Ch */ case    1:  		/* mr R3, R30 */
		/* 8218AD6Ch case    1:*/		regs.R3 = regs.R30;
		/* 8218AD6Ch case    1:*/		return 0x8218AD70;
		  /* 8218AD70h */ case    2:  		/* bl -233224 */
		/* 8218AD70h case    2:*/		regs.LR = 0x8218AD74; return 0x82151E68;
		/* 8218AD70h case    2:*/		return 0x8218AD74;
	}
	return 0x8218AD74;
} // Block from 8218AD68h-8218AD74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD74);
		  /* 8218AD74h */ case    0:  		/* li R4, 4800 */
		/* 8218AD74h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD74h case    0:*/		return 0x8218AD78;
		  /* 8218AD78h */ case    1:  		/* mr R3, R30 */
		/* 8218AD78h case    1:*/		regs.R3 = regs.R30;
		/* 8218AD78h case    1:*/		return 0x8218AD7C;
		  /* 8218AD7Ch */ case    2:  		/* bl -233236 */
		/* 8218AD7Ch case    2:*/		regs.LR = 0x8218AD80; return 0x82151E68;
		/* 8218AD7Ch case    2:*/		return 0x8218AD80;
	}
	return 0x8218AD80;
} // Block from 8218AD74h-8218AD80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD80);
		  /* 8218AD80h */ case    0:  		/* li R4, 4800 */
		/* 8218AD80h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD80h case    0:*/		return 0x8218AD84;
		  /* 8218AD84h */ case    1:  		/* mr R3, R30 */
		/* 8218AD84h case    1:*/		regs.R3 = regs.R30;
		/* 8218AD84h case    1:*/		return 0x8218AD88;
		  /* 8218AD88h */ case    2:  		/* bl -233248 */
		/* 8218AD88h case    2:*/		regs.LR = 0x8218AD8C; return 0x82151E68;
		/* 8218AD88h case    2:*/		return 0x8218AD8C;
	}
	return 0x8218AD8C;
} // Block from 8218AD80h-8218AD8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD8C);
		  /* 8218AD8Ch */ case    0:  		/* li R4, 4800 */
		/* 8218AD8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AD8Ch case    0:*/		return 0x8218AD90;
		  /* 8218AD90h */ case    1:  		/* mr R3, R30 */
		/* 8218AD90h case    1:*/		regs.R3 = regs.R30;
		/* 8218AD90h case    1:*/		return 0x8218AD94;
		  /* 8218AD94h */ case    2:  		/* bl -233260 */
		/* 8218AD94h case    2:*/		regs.LR = 0x8218AD98; return 0x82151E68;
		/* 8218AD94h case    2:*/		return 0x8218AD98;
	}
	return 0x8218AD98;
} // Block from 8218AD8Ch-8218AD98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AD98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AD98);
		  /* 8218AD98h */ case    0:  		/* mfspr R12, LR */
		/* 8218AD98h case    0:*/		regs.R12 = regs.LR;
		/* 8218AD98h case    0:*/		return 0x8218AD9C;
		  /* 8218AD9Ch */ case    1:  		/* bl -1022828 */
		/* 8218AD9Ch case    1:*/		regs.LR = 0x8218ADA0; return 0x82091230;
		/* 8218AD9Ch case    1:*/		return 0x8218ADA0;
		  /* 8218ADA0h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8218ADA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8218ADA0h case    2:*/		return 0x8218ADA4;
		  /* 8218ADA4h */ case    3:  		/* li R6, 100 */
		/* 8218ADA4h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x64);
		/* 8218ADA4h case    3:*/		return 0x8218ADA8;
		  /* 8218ADA8h */ case    4:  		/* addi R5, R1, 100 */
		/* 8218ADA8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 8218ADA8h case    4:*/		return 0x8218ADAC;
		  /* 8218ADACh */ case    5:  		/* li R4, 0 */
		/* 8218ADACh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218ADACh case    5:*/		return 0x8218ADB0;
		  /* 8218ADB0h */ case    6:  		/* mr R30, R3 */
		/* 8218ADB0h case    6:*/		regs.R30 = regs.R3;
		/* 8218ADB0h case    6:*/		return 0x8218ADB4;
		  /* 8218ADB4h */ case    7:  		/* bl -16916 */
		/* 8218ADB4h case    7:*/		regs.LR = 0x8218ADB8; return 0x82186BA0;
		/* 8218ADB4h case    7:*/		return 0x8218ADB8;
		  /* 8218ADB8h */ case    8:  		/* lwz R11, <#[R30 + 700]> */
		/* 8218ADB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218ADB8h case    8:*/		return 0x8218ADBC;
		  /* 8218ADBCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8218ADBCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218ADBCh case    9:*/		return 0x8218ADC0;
		  /* 8218ADC0h */ case   10:  		/* bc 12, CR6_EQ, 1436 */
		/* 8218ADC0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8218B35C;  }
		/* 8218ADC0h case   10:*/		return 0x8218ADC4;
		  /* 8218ADC4h */ case   11:  		/* mr R3, R30 */
		/* 8218ADC4h case   11:*/		regs.R3 = regs.R30;
		/* 8218ADC4h case   11:*/		return 0x8218ADC8;
		  /* 8218ADC8h */ case   12:  		/* bl -58360 */
		/* 8218ADC8h case   12:*/		regs.LR = 0x8218ADCC; return 0x8217C9D0;
		/* 8218ADC8h case   12:*/		return 0x8218ADCC;
		  /* 8218ADCCh */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8218ADCCh case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8218ADCCh case   13:*/		return 0x8218ADD0;
		  /* 8218ADD0h */ case   14:  		/* li R18, 0 */
		/* 8218ADD0h case   14:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8218ADD0h case   14:*/		return 0x8218ADD4;
		  /* 8218ADD4h */ case   15:  		/* bc 12, CR0_EQ, 88 */
		/* 8218ADD4h case   15:*/		if ( regs.CR[0].eq ) { return 0x8218AE2C;  }
		/* 8218ADD4h case   15:*/		return 0x8218ADD8;
		  /* 8218ADD8h */ case   16:  		/* stw R18, <#[R30 + 680]> */
		/* 8218ADD8h case   16:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x000002A8) );
		/* 8218ADD8h case   16:*/		return 0x8218ADDC;
		  /* 8218ADDCh */ case   17:  		/* addi R3, R30, 972 */
		/* 8218ADDCh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x3CC);
		/* 8218ADDCh case   17:*/		return 0x8218ADE0;
		  /* 8218ADE0h */ case   18:  		/* stw R18, <#[R30 + 684]> */
		/* 8218ADE0h case   18:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x000002AC) );
		/* 8218ADE0h case   18:*/		return 0x8218ADE4;
		  /* 8218ADE4h */ case   19:  		/* stw R18, <#[R30 + 696]> */
		/* 8218ADE4h case   19:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x000002B8) );
		/* 8218ADE4h case   19:*/		return 0x8218ADE8;
		  /* 8218ADE8h */ case   20:  		/* stw R18, <#[R30 + 700]> */
		/* 8218ADE8h case   20:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218ADE8h case   20:*/		return 0x8218ADEC;
		  /* 8218ADECh */ case   21:  		/* stw R18, <#[R30 + 704]> */
		/* 8218ADECh case   21:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x000002C0) );
		/* 8218ADECh case   21:*/		return 0x8218ADF0;
		  /* 8218ADF0h */ case   22:  		/* stw R18, <#[R30 + 708]> */
		/* 8218ADF0h case   22:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x000002C4) );
		/* 8218ADF0h case   22:*/		return 0x8218ADF4;
		  /* 8218ADF4h */ case   23:  		/* bl -232900 */
		/* 8218ADF4h case   23:*/		regs.LR = 0x8218ADF8; return 0x82152030;
		/* 8218ADF4h case   23:*/		return 0x8218ADF8;
		  /* 8218ADF8h */ case   24:  		/* li R6, 1 */
		/* 8218ADF8h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8218ADF8h case   24:*/		return 0x8218ADFC;
		  /* 8218ADFCh */ case   25:  		/* addi R5, R1, 100 */
		/* 8218ADFCh case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 8218ADFCh case   25:*/		return 0x8218AE00;
		  /* 8218AE00h */ case   26:  		/* li R4, 0 */
		/* 8218AE00h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218AE00h case   26:*/		return 0x8218AE04;
		  /* 8218AE04h */ case   27:  		/* mr R3, R30 */
		/* 8218AE04h case   27:*/		regs.R3 = regs.R30;
		/* 8218AE04h case   27:*/		return 0x8218AE08;
		  /* 8218AE08h */ case   28:  		/* bl -17000 */
		/* 8218AE08h case   28:*/		regs.LR = 0x8218AE0C; return 0x82186BA0;
		/* 8218AE08h case   28:*/		return 0x8218AE0C;
		  /* 8218AE0Ch */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8218AE0Ch case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8218AE0Ch case   29:*/		return 0x8218AE10;
		  /* 8218AE10h */ case   30:  		/* bc 12, CR0_EQ, 16 */
		/* 8218AE10h case   30:*/		if ( regs.CR[0].eq ) { return 0x8218AE20;  }
		/* 8218AE10h case   30:*/		return 0x8218AE14;
		  /* 8218AE14h */ case   31:  		/* li R4, 4800 */
		/* 8218AE14h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218AE14h case   31:*/		return 0x8218AE18;
		  /* 8218AE18h */ case   32:  		/* mr R3, R30 */
		/* 8218AE18h case   32:*/		regs.R3 = regs.R30;
		/* 8218AE18h case   32:*/		return 0x8218AE1C;
		  /* 8218AE1Ch */ case   33:  		/* bl -233396 */
		/* 8218AE1Ch case   33:*/		regs.LR = 0x8218AE20; return 0x82151E68;
		/* 8218AE1Ch case   33:*/		return 0x8218AE20;
	}
	return 0x8218AE20;
} // Block from 8218AD98h-8218AE20h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8218AE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AE20);
		  /* 8218AE20h */ case    0:  		/* lwz R11, <#[R30 + 700]> */
		/* 8218AE20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218AE20h case    0:*/		return 0x8218AE24;
		  /* 8218AE24h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8218AE24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218AE24h case    1:*/		return 0x8218AE28;
		  /* 8218AE28h */ case    2:  		/* bc 12, CR6_EQ, 1332 */
		/* 8218AE28h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218B35C;  }
		/* 8218AE28h case    2:*/		return 0x8218AE2C;
	}
	return 0x8218AE2C;
} // Block from 8218AE20h-8218AE2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AE2C);
		  /* 8218AE2Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8218AE2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8218AE2Ch case    0:*/		return 0x8218AE30;
		  /* 8218AE30h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8218AE30h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AE30h case    1:*/		return 0x8218AE34;
		  /* 8218AE34h */ case    2:  		/* addic R10, R10, -1 */
		/* 8218AE34h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8218AE34h case    2:*/		return 0x8218AE38;
		  /* 8218AE38h */ case    3:  		/* subfe R10, R10, R10 */
		/* 8218AE38h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8218AE38h case    3:*/		return 0x8218AE3C;
		  /* 8218AE3Ch */ case    4:  		/* and R11, R10, R11 */
		/* 8218AE3Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218AE3Ch case    4:*/		return 0x8218AE40;
		  /* 8218AE40h */ case    5:  		/* lwz R11, <#[R11 + 20]> */
		/* 8218AE40h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 8218AE40h case    5:*/		return 0x8218AE44;
		  /* 8218AE44h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218AE44h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AE44h case    6:*/		return 0x8218AE48;
		  /* 8218AE48h */ case    7:  		/* bc 4, CR0_EQ, 168 */
		/* 8218AE48h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8218AEF0;  }
		/* 8218AE48h case    7:*/		return 0x8218AE4C;
		  /* 8218AE4Ch */ case    8:  		/* mr R31, R11 */
		/* 8218AE4Ch case    8:*/		regs.R31 = regs.R11;
		/* 8218AE4Ch case    8:*/		return 0x8218AE50;
		  /* 8218AE50h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8218AE50h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218AE50h case    9:*/		return 0x8218AE54;
		  /* 8218AE54h */ case   10:  		/* bc 12, CR0_EQ, 156 */
		/* 8218AE54h case   10:*/		if ( regs.CR[0].eq ) { return 0x8218AEF0;  }
		/* 8218AE54h case   10:*/		return 0x8218AE58;
		  /* 8218AE58h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 8218AE58h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218AE58h case   11:*/		return 0x8218AE5C;
		  /* 8218AE5Ch */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8218AE5Ch case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8218AE5Ch case   12:*/		return 0x8218AE60;
		  /* 8218AE60h */ case   13:  		/* cmplwi CR6, R11, 14464 */
		/* 8218AE60h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003880);
		/* 8218AE60h case   13:*/		return 0x8218AE64;
		  /* 8218AE64h */ case   14:  		/* bc 4, CR6_EQ, 112 */
		/* 8218AE64h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8218AED4;  }
		/* 8218AE64h case   14:*/		return 0x8218AE68;
		  /* 8218AE68h */ case   15:  		/* lwz R9, <#[R30 + 536]> */
		/* 8218AE68h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000218) );
		/* 8218AE68h case   15:*/		return 0x8218AE6C;
		  /* 8218AE6Ch */ case   16:  		/* mr R10, R18 */
		/* 8218AE6Ch case   16:*/		regs.R10 = regs.R18;
		/* 8218AE6Ch case   16:*/		return 0x8218AE70;
		  /* 8218AE70h */ case   17:  		/* cmplwi CR6, R9, 0 */
		/* 8218AE70h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8218AE70h case   17:*/		return 0x8218AE74;
		  /* 8218AE74h */ case   18:  		/* bc 12, CR6_EQ, 52 */
		/* 8218AE74h case   18:*/		if ( regs.CR[6].eq ) { return 0x8218AEA8;  }
		/* 8218AE74h case   18:*/		return 0x8218AE78;
		  /* 8218AE78h */ case   19:  		/* addi R11, R30, 352 */
		/* 8218AE78h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x160);
		/* 8218AE78h case   19:*/		return 0x8218AE7C;
		  /* 8218AE7Ch */ case   20:  		/* lwz R8, <#[R11 - 4]> */
		/* 8218AE7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8218AE7Ch case   20:*/		return 0x8218AE80;
		  /* 8218AE80h */ case   21:  		/* rlwinm. R8, R8, 0, 18, 18 */
		/* 8218AE80h case   21:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R8,regs.R8);
		/* 8218AE80h case   21:*/		return 0x8218AE84;
		  /* 8218AE84h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 8218AE84h case   22:*/		if ( regs.CR[0].eq ) { return 0x8218AE94;  }
		/* 8218AE84h case   22:*/		return 0x8218AE88;
		  /* 8218AE88h */ case   23:  		/* lwz R8, <#[R11]> */
		/* 8218AE88h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8218AE88h case   23:*/		return 0x8218AE8C;
		  /* 8218AE8Ch */ case   24:  		/* cmplw CR6, R31, R8 */
		/* 8218AE8Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R8);
		/* 8218AE8Ch case   24:*/		return 0x8218AE90;
		  /* 8218AE90h */ case   25:  		/* bc 12, CR6_EQ, 24 */
		/* 8218AE90h case   25:*/		if ( regs.CR[6].eq ) { return 0x8218AEA8;  }
		/* 8218AE90h case   25:*/		return 0x8218AE94;
	}
	return 0x8218AE94;
} // Block from 8218AE2Ch-8218AE94h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8218AE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AE94);
		  /* 8218AE94h */ case    0:  		/* lwz R8, <#[R30 + 536]> */
		/* 8218AE94h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000218) );
		/* 8218AE94h case    0:*/		return 0x8218AE98;
		  /* 8218AE98h */ case    1:  		/* addi R10, R10, 1 */
		/* 8218AE98h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8218AE98h case    1:*/		return 0x8218AE9C;
		  /* 8218AE9Ch */ case    2:  		/* addi R11, R11, 12 */
		/* 8218AE9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8218AE9Ch case    2:*/		return 0x8218AEA0;
		  /* 8218AEA0h */ case    3:  		/* cmplw CR6, R10, R8 */
		/* 8218AEA0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8218AEA0h case    3:*/		return 0x8218AEA4;
		  /* 8218AEA4h */ case    4:  		/* bc 12, CR6_LT, -40 */
		/* 8218AEA4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8218AE7C;  }
		/* 8218AEA4h case    4:*/		return 0x8218AEA8;
	}
	return 0x8218AEA8;
} // Block from 8218AE94h-8218AEA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218AEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AEA8);
		  /* 8218AEA8h */ case    0:  		/* cmplw CR6, R10, R9 */
		/* 8218AEA8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8218AEA8h case    0:*/		return 0x8218AEAC;
		  /* 8218AEACh */ case    1:  		/* bc 12, CR6_LT, 40 */
		/* 8218AEACh case    1:*/		if ( regs.CR[6].lt ) { return 0x8218AED4;  }
		/* 8218AEACh case    1:*/		return 0x8218AEB0;
		  /* 8218AEB0h */ case    2:  		/* mr R3, R30 */
		/* 8218AEB0h case    2:*/		regs.R3 = regs.R30;
		/* 8218AEB0h case    2:*/		return 0x8218AEB4;
		  /* 8218AEB4h */ case    3:  		/* lhz R4, <#[R31 + 18]> */
		/* 8218AEB4h case    3:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000012) );
		/* 8218AEB4h case    3:*/		return 0x8218AEB8;
		  /* 8218AEB8h */ case    4:  		/* bl -30040 */
		/* 8218AEB8h case    4:*/		regs.LR = 0x8218AEBC; return 0x82183960;
		/* 8218AEB8h case    4:*/		return 0x8218AEBC;
		  /* 8218AEBCh */ case    5:  		/* lwz R11, <#[R30 + 688]> */
		/* 8218AEBCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 8218AEBCh case    5:*/		return 0x8218AEC0;
		  /* 8218AEC0h */ case    6:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8218AEC0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8218AEC0h case    6:*/		return 0x8218AEC4;
		  /* 8218AEC4h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8218AEC4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218AEC4h case    7:*/		return 0x8218AEC8;
		  /* 8218AEC8h */ case    8:  		/* lwz R10, <#[R11 + 192]> */
		/* 8218AEC8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000000C0) );
		/* 8218AEC8h case    8:*/		return 0x8218AECC;
		  /* 8218AECCh */ case    9:  		/* oris R10, R10, 8192 */
		/* 8218AECCh case    9:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x2000);
		/* 8218AECCh case    9:*/		return 0x8218AED0;
		  /* 8218AED0h */ case   10:  		/* stw R10, <#[R11 + 192]> */
		/* 8218AED0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x000000C0) );
		/* 8218AED0h case   10:*/		return 0x8218AED4;
	}
	return 0x8218AED4;
} // Block from 8218AEA8h-8218AED4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8218AED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AED4);
		  /* 8218AED4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8218AED4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8218AED4h case    0:*/		return 0x8218AED8;
		  /* 8218AED8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8218AED8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8218AED8h case    1:*/		return 0x8218AEDC;
		  /* 8218AEDCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218AEDCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AEDCh case    2:*/		return 0x8218AEE0;
		  /* 8218AEE0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8218AEE0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218AEF0;  }
		/* 8218AEE0h case    3:*/		return 0x8218AEE4;
		  /* 8218AEE4h */ case    4:  		/* mr R31, R11 */
		/* 8218AEE4h case    4:*/		regs.R31 = regs.R11;
		/* 8218AEE4h case    4:*/		return 0x8218AEE8;
		  /* 8218AEE8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218AEE8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218AEE8h case    5:*/		return 0x8218AEEC;
		  /* 8218AEECh */ case    6:  		/* bc 4, CR6_EQ, -148 */
		/* 8218AEECh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8218AE58;  }
		/* 8218AEECh case    6:*/		return 0x8218AEF0;
	}
	return 0x8218AEF0;
} // Block from 8218AED4h-8218AEF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218AEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AEF0);
		  /* 8218AEF0h */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 8218AEF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 8218AEF0h case    0:*/		return 0x8218AEF4;
		  /* 8218AEF4h */ case    1:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 8218AEF4h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 8218AEF4h case    1:*/		return 0x8218AEF8;
		  /* 8218AEF8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8218AEF8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8218AF08;  }
		/* 8218AEF8h case    2:*/		return 0x8218AEFC;
		  /* 8218AEFCh */ case    3:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8218AEFCh case    3:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8218AEFCh case    3:*/		return 0x8218AF00;
		  /* 8218AF00h */ case    4:  		/* li R11, 1 */
		/* 8218AF00h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218AF00h case    4:*/		return 0x8218AF04;
		  /* 8218AF04h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 8218AF04h case    5:*/		if ( regs.CR[0].eq ) { return 0x8218AF0C;  }
		/* 8218AF04h case    5:*/		return 0x8218AF08;
	}
	return 0x8218AF08;
} // Block from 8218AEF0h-8218AF08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218AF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AF08);
		  /* 8218AF08h */ case    0:  		/* mr R11, R18 */
		/* 8218AF08h case    0:*/		regs.R11 = regs.R18;
		/* 8218AF08h case    0:*/		return 0x8218AF0C;
	}
	return 0x8218AF0C;
} // Block from 8218AF08h-8218AF0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218AF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AF0C);
		  /* 8218AF0Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218AF0Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218AF0Ch case    0:*/		return 0x8218AF10;
		  /* 8218AF10h */ case    1:  		/* bc 12, CR0_EQ, 300 */
		/* 8218AF10h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218B03C;  }
		/* 8218AF10h case    1:*/		return 0x8218AF14;
		  /* 8218AF14h */ case    2:  		/* mr R3, R30 */
		/* 8218AF14h case    2:*/		regs.R3 = regs.R30;
		/* 8218AF14h case    2:*/		return 0x8218AF18;
		  /* 8218AF18h */ case    3:  		/* bl -108384 */
		/* 8218AF18h case    3:*/		regs.LR = 0x8218AF1C; return 0x821707B8;
		/* 8218AF18h case    3:*/		return 0x8218AF1C;
		  /* 8218AF1Ch */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 8218AF1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8218AF1Ch case    4:*/		return 0x8218AF20;
		  /* 8218AF20h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218AF20h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AF20h case    5:*/		return 0x8218AF24;
		  /* 8218AF24h */ case    6:  		/* bc 4, CR0_EQ, 280 */
		/* 8218AF24h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8218B03C;  }
		/* 8218AF24h case    6:*/		return 0x8218AF28;
		  /* 8218AF28h */ case    7:  		/* mr R28, R11 */
		/* 8218AF28h case    7:*/		regs.R28 = regs.R11;
		/* 8218AF28h case    7:*/		return 0x8218AF2C;
		  /* 8218AF2Ch */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 8218AF2Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218AF2Ch case    8:*/		return 0x8218AF30;
		  /* 8218AF30h */ case    9:  		/* bc 12, CR0_EQ, 268 */
		/* 8218AF30h case    9:*/		if ( regs.CR[0].eq ) { return 0x8218B03C;  }
		/* 8218AF30h case    9:*/		return 0x8218AF34;
		  /* 8218AF34h */ case   10:  		/* lwz R11, <#[R28 + 20]> */
		/* 8218AF34h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8218AF34h case   10:*/		return 0x8218AF38;
		  /* 8218AF38h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8218AF38h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8218AF38h case   11:*/		return 0x8218AF3C;
		  /* 8218AF3Ch */ case   12:  		/* bc 12, CR0_EQ, 40 */
		/* 8218AF3Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x8218AF64;  }
		/* 8218AF3Ch case   12:*/		return 0x8218AF40;
		  /* 8218AF40h */ case   13:  		/* lwz R11, <#[R28 + 28]> */
		/* 8218AF40h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8218AF40h case   13:*/		return 0x8218AF44;
		  /* 8218AF44h */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8218AF44h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8218AF44h case   14:*/		return 0x8218AF48;
		  /* 8218AF48h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 8218AF48h case   15:*/		if ( regs.CR[0].eq ) { return 0x8218AF58;  }
		/* 8218AF48h case   15:*/		return 0x8218AF4C;
		  /* 8218AF4Ch */ case   16:  		/* lwz R11, <#[R28 + 36]> */
		/* 8218AF4Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 8218AF4Ch case   16:*/		return 0x8218AF50;
		  /* 8218AF50h */ case   17:  		/* addi R29, R28, 32 */
		/* 8218AF50h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x20);
		/* 8218AF50h case   17:*/		return 0x8218AF54;
		  /* 8218AF54h */ case   18:  		/* b 24 */
		/* 8218AF54h case   18:*/		return 0x8218AF6C;
		/* 8218AF54h case   18:*/		return 0x8218AF58;
	}
	return 0x8218AF58;
} // Block from 8218AF0Ch-8218AF58h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8218AF58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AF58);
		  /* 8218AF58h */ case    0:  		/* lwz R11, <#[R28 + 28]> */
		/* 8218AF58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8218AF58h case    0:*/		return 0x8218AF5C;
		  /* 8218AF5Ch */ case    1:  		/* addi R29, R28, 24 */
		/* 8218AF5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x18);
		/* 8218AF5Ch case    1:*/		return 0x8218AF60;
		  /* 8218AF60h */ case    2:  		/* b 12 */
		/* 8218AF60h case    2:*/		return 0x8218AF6C;
		/* 8218AF60h case    2:*/		return 0x8218AF64;
	}
	return 0x8218AF64;
} // Block from 8218AF58h-8218AF64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AF64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AF64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AF64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AF64);
		  /* 8218AF64h */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 8218AF64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8218AF64h case    0:*/		return 0x8218AF68;
		  /* 8218AF68h */ case    1:  		/* addi R29, R28, 16 */
		/* 8218AF68h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x10);
		/* 8218AF68h case    1:*/		return 0x8218AF6C;
	}
	return 0x8218AF6C;
} // Block from 8218AF64h-8218AF6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218AF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AF6C);
		  /* 8218AF6Ch */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8218AF6Ch case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AF6Ch case    0:*/		return 0x8218AF70;
		  /* 8218AF70h */ case    1:  		/* addic R10, R10, -1 */
		/* 8218AF70h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8218AF70h case    1:*/		return 0x8218AF74;
		  /* 8218AF74h */ case    2:  		/* subfe R10, R10, R10 */
		/* 8218AF74h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8218AF74h case    2:*/		return 0x8218AF78;
		  /* 8218AF78h */ case    3:  		/* and R31, R10, R11 */
		/* 8218AF78h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 8218AF78h case    3:*/		return 0x8218AF7C;
		  /* 8218AF7Ch */ case    4:  		/* b 156 */
		/* 8218AF7Ch case    4:*/		return 0x8218B018;
		/* 8218AF7Ch case    4:*/		return 0x8218AF80;
		  /* 8218AF80h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 8218AF80h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218AF80h case    5:*/		return 0x8218AF84;
		  /* 8218AF84h */ case    6:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 8218AF84h case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AF84h case    6:*/		return 0x8218AF88;
		  /* 8218AF88h */ case    7:  		/* bc 12, CR0_EQ, 56 */
		/* 8218AF88h case    7:*/		if ( regs.CR[0].eq ) { return 0x8218AFC0;  }
		/* 8218AF88h case    7:*/		return 0x8218AF8C;
		  /* 8218AF8Ch */ case    8:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 8218AF8Ch case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 8218AF8Ch case    8:*/		return 0x8218AF90;
		  /* 8218AF90h */ case    9:  		/* bc 12, CR0_EQ, 36 */
		/* 8218AF90h case    9:*/		if ( regs.CR[0].eq ) { return 0x8218AFB4;  }
		/* 8218AF90h case    9:*/		return 0x8218AF94;
		  /* 8218AF94h */ case   10:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 8218AF94h case   10:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 8218AF94h case   10:*/		return 0x8218AF98;
		  /* 8218AF98h */ case   11:  		/* bc 12, CR0_EQ, 28 */
		/* 8218AF98h case   11:*/		if ( regs.CR[0].eq ) { return 0x8218AFB4;  }
		/* 8218AF98h case   11:*/		return 0x8218AF9C;
		  /* 8218AF9Ch */ case   12:  		/* mr R4, R31 */
		/* 8218AF9Ch case   12:*/		regs.R4 = regs.R31;
		/* 8218AF9Ch case   12:*/		return 0x8218AFA0;
		  /* 8218AFA0h */ case   13:  		/* mr R3, R30 */
		/* 8218AFA0h case   13:*/		regs.R3 = regs.R30;
		/* 8218AFA0h case   13:*/		return 0x8218AFA4;
		  /* 8218AFA4h */ case   14:  		/* bl -29132 */
		/* 8218AFA4h case   14:*/		regs.LR = 0x8218AFA8; return 0x82183DD8;
		/* 8218AFA4h case   14:*/		return 0x8218AFA8;
		  /* 8218AFA8h */ case   15:  		/* lis R11, 4095 */
		/* 8218AFA8h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFF);
		/* 8218AFA8h case   15:*/		return 0x8218AFAC;
		  /* 8218AFACh */ case   16:  		/* ori R11, R11, 65535 */
		/* 8218AFACh case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 8218AFACh case   16:*/		return 0x8218AFB0;
		  /* 8218AFB0h */ case   17:  		/* stw R11, <#[R3 + 196]> */
		/* 8218AFB0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000C4) );
		/* 8218AFB0h case   17:*/		return 0x8218AFB4;
	}
	return 0x8218AFB4;
} // Block from 8218AF6Ch-8218AFB4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8218AFB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AFB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AFB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AFB4);
		  /* 8218AFB4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8218AFB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218AFB4h case    0:*/		return 0x8218AFB8;
		  /* 8218AFB8h */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 8218AFB8h case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 8218AFB8h case    1:*/		return 0x8218AFBC;
		  /* 8218AFBCh */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 8218AFBCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8218AFBCh case    2:*/		return 0x8218AFC0;
	}
	return 0x8218AFC0;
} // Block from 8218AFB4h-8218AFC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218AFC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AFC0);
		  /* 8218AFC0h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8218AFC0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8218AFC0h case    0:*/		return 0x8218AFC4;
		  /* 8218AFC4h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8218AFC4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8218AFC4h case    1:*/		return 0x8218AFC8;
		  /* 8218AFC8h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8218AFC8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8218AFC8h case    2:*/		return 0x8218AFCC;
		  /* 8218AFCCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8218AFCCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218AFD8;  }
		/* 8218AFCCh case    3:*/		return 0x8218AFD0;
		  /* 8218AFD0h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8218AFD0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218AFD0h case    4:*/		return 0x8218AFD4;
		  /* 8218AFD4h */ case    5:  		/* bc 4, CR6_EQ, -84 */
		/* 8218AFD4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8218AF80;  }
		/* 8218AFD4h case    5:*/		return 0x8218AFD8;
	}
	return 0x8218AFD8;
} // Block from 8218AFC0h-8218AFD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218AFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218AFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218AFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218AFD8);
		  /* 8218AFD8h */ case    0:  		/* addi R10, R28, 32 */
		/* 8218AFD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x20);
		/* 8218AFD8h case    0:*/		return 0x8218AFDC;
		  /* 8218AFDCh */ case    1:  		/* cmplw CR6, R29, R10 */
		/* 8218AFDCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8218AFDCh case    1:*/		return 0x8218AFE0;
		  /* 8218AFE0h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 8218AFE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8218B020;  }
		/* 8218AFE0h case    2:*/		return 0x8218AFE4;
		  /* 8218AFE4h */ case    3:  		/* addi R11, R28, 24 */
		/* 8218AFE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x18);
		/* 8218AFE4h case    3:*/		return 0x8218AFE8;
		  /* 8218AFE8h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8218AFE8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8218AFE8h case    4:*/		return 0x8218AFEC;
		  /* 8218AFECh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 8218AFECh case    5:*/		if ( regs.CR[6].eq ) { return 0x8218B008;  }
		/* 8218AFECh case    5:*/		return 0x8218AFF0;
		  /* 8218AFF0h */ case    6:  		/* lwz R9, <#[R28 + 28]> */
		/* 8218AFF0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x0000001C) );
		/* 8218AFF0h case    6:*/		return 0x8218AFF4;
		  /* 8218AFF4h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 8218AFF4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 8218AFF4h case    7:*/		return 0x8218AFF8;
		  /* 8218AFF8h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 8218AFF8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8218B008;  }
		/* 8218AFF8h case    8:*/		return 0x8218AFFC;
		  /* 8218AFFCh */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 8218AFFCh case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8218AFFCh case    9:*/		return 0x8218B000;
		  /* 8218B000h */ case   10:  		/* mr R29, R11 */
		/* 8218B000h case   10:*/		regs.R29 = regs.R11;
		/* 8218B000h case   10:*/		return 0x8218B004;
		  /* 8218B004h */ case   11:  		/* b 12 */
		/* 8218B004h case   11:*/		return 0x8218B010;
		/* 8218B004h case   11:*/		return 0x8218B008;
	}
	return 0x8218B008;
} // Block from 8218AFD8h-8218B008h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8218B008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B008);
		  /* 8218B008h */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 8218B008h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 8218B008h case    0:*/		return 0x8218B00C;
		  /* 8218B00Ch */ case    1:  		/* mr R29, R10 */
		/* 8218B00Ch case    1:*/		regs.R29 = regs.R10;
		/* 8218B00Ch case    1:*/		return 0x8218B010;
	}
	return 0x8218B010;
} // Block from 8218B008h-8218B010h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B010);
		  /* 8218B010h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8218B010h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8218B010h case    0:*/		return 0x8218B014;
		  /* 8218B014h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8218B014h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218B020;  }
		/* 8218B014h case    1:*/		return 0x8218B018;
	}
	return 0x8218B018;
} // Block from 8218B010h-8218B018h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B018);
		  /* 8218B018h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8218B018h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218B018h case    0:*/		return 0x8218B01C;
		  /* 8218B01Ch */ case    1:  		/* bc 4, CR6_EQ, -156 */
		/* 8218B01Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218AF80;  }
		/* 8218B01Ch case    1:*/		return 0x8218B020;
	}
	return 0x8218B020;
} // Block from 8218B018h-8218B020h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B020);
		  /* 8218B020h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8218B020h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8218B020h case    0:*/		return 0x8218B024;
		  /* 8218B024h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8218B024h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8218B024h case    1:*/		return 0x8218B028;
		  /* 8218B028h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218B028h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218B028h case    2:*/		return 0x8218B02C;
		  /* 8218B02Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8218B02Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218B03C;  }
		/* 8218B02Ch case    3:*/		return 0x8218B030;
		  /* 8218B030h */ case    4:  		/* mr R28, R11 */
		/* 8218B030h case    4:*/		regs.R28 = regs.R11;
		/* 8218B030h case    4:*/		return 0x8218B034;
		  /* 8218B034h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8218B034h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218B034h case    5:*/		return 0x8218B038;
		  /* 8218B038h */ case    6:  		/* bc 4, CR6_EQ, -260 */
		/* 8218B038h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8218AF34;  }
		/* 8218B038h case    6:*/		return 0x8218B03C;
	}
	return 0x8218B03C;
} // Block from 8218B020h-8218B03Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218B03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B03C);
		  /* 8218B03Ch */ case    0:  		/* lwz R11, <#[R30 + 700]> */
		/* 8218B03Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218B03Ch case    0:*/		return 0x8218B040;
		  /* 8218B040h */ case    1:  		/* li R5, 0 */
		/* 8218B040h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218B040h case    1:*/		return 0x8218B044;
		  /* 8218B044h */ case    2:  		/* mr R3, R30 */
		/* 8218B044h case    2:*/		regs.R3 = regs.R30;
		/* 8218B044h case    2:*/		return 0x8218B048;
		  /* 8218B048h */ case    3:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8218B048h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8218B048h case    3:*/		return 0x8218B04C;
		  /* 8218B04Ch */ case    4:  		/* bl -155668 */
		/* 8218B04Ch case    4:*/		regs.LR = 0x8218B050; return 0x82165038;
		/* 8218B04Ch case    4:*/		return 0x8218B050;
		  /* 8218B050h */ case    5:  		/* lwz R31, <#[R30 + 696]> */
		/* 8218B050h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x000002B8) );
		/* 8218B050h case    5:*/		return 0x8218B054;
		  /* 8218B054h */ case    6:  		/* mr R23, R3 */
		/* 8218B054h case    6:*/		regs.R23 = regs.R3;
		/* 8218B054h case    6:*/		return 0x8218B058;
		  /* 8218B058h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 8218B058h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218B058h case    7:*/		return 0x8218B05C;
		  /* 8218B05Ch */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 8218B05Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8218B0E4;  }
		/* 8218B05Ch case    8:*/		return 0x8218B060;
		  /* 8218B060h */ case    9:  		/* addi R24, R3, -4 */
		/* 8218B060h case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0xFFFFFFFC);
		/* 8218B060h case    9:*/		return 0x8218B064;
		  /* 8218B064h */ case   10:  		/* lwz R11, <#[R31 + 192]> */
		/* 8218B064h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C0) );
		/* 8218B064h case   10:*/		return 0x8218B068;
		  /* 8218B068h */ case   11:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 8218B068h case   11:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218B068h case   11:*/		return 0x8218B06C;
		  /* 8218B06Ch */ case   12:  		/* bc 12, CR0_EQ, 108 */
		/* 8218B06Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x8218B0D8;  }
		/* 8218B06Ch case   12:*/		return 0x8218B070;
		  /* 8218B070h */ case   13:  		/* stwu R31, <#[R24 + 4]> */
		/* 8218B070h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000004) );
		regs.R24 = (uint32)(regs.R24 + 0x00000004);
		/* 8218B070h case   13:*/		return 0x8218B074;
		  /* 8218B074h */ case   14:  		/* mr R27, R18 */
		/* 8218B074h case   14:*/		regs.R27 = regs.R18;
		/* 8218B074h case   14:*/		return 0x8218B078;
		  /* 8218B078h */ case   15:  		/* lwz R28, <#[R31 + 192]> */
		/* 8218B078h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x000000C0) );
		/* 8218B078h case   15:*/		return 0x8218B07C;
		  /* 8218B07Ch */ case   16:  		/* rlwinm. R11, R28, 0, 1, 1 */
		/* 8218B07Ch case   16:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R28);
		/* 8218B07Ch case   16:*/		return 0x8218B080;
		  /* 8218B080h */ case   17:  		/* bc 12, CR0_EQ, 56 */
		/* 8218B080h case   17:*/		if ( regs.CR[0].eq ) { return 0x8218B0B8;  }
		/* 8218B080h case   17:*/		return 0x8218B084;
		  /* 8218B084h */ case   18:  		/* rlwinm. R11, R28, 0, 29, 31 */
		/* 8218B084h case   18:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R28);
		/* 8218B084h case   18:*/		return 0x8218B088;
		  /* 8218B088h */ case   19:  		/* mr R26, R18 */
		/* 8218B088h case   19:*/		regs.R26 = regs.R18;
		/* 8218B088h case   19:*/		return 0x8218B08C;
		  /* 8218B08Ch */ case   20:  		/* bc 12, CR0_EQ, 44 */
		/* 8218B08Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x8218B0B8;  }
		/* 8218B08Ch case   20:*/		return 0x8218B090;
		  /* 8218B090h */ case   21:  		/* rlwinm R11, R28, 0, 0, 31 */
		/* 8218B090h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R28);
		/* 8218B090h case   21:*/		return 0x8218B094;
		  /* 8218B094h */ case   22:  		/* addi R29, R31, 32 */
		/* 8218B094h case   22:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x20);
		/* 8218B094h case   22:*/		return 0x8218B098;
		  /* 8218B098h */ case   23:  		/* rlwinm R25, R11, 0, 29, 31 */
		/* 8218B098h case   23:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R25,regs.R11);
		/* 8218B098h case   23:*/		return 0x8218B09C;
		  /* 8218B09Ch */ case   24:  		/* mr R3, R29 */
		/* 8218B09Ch case   24:*/		regs.R3 = regs.R29;
		/* 8218B09Ch case   24:*/		return 0x8218B0A0;
		  /* 8218B0A0h */ case   25:  		/* bl -28288 */
		/* 8218B0A0h case   25:*/		regs.LR = 0x8218B0A4; return 0x82184220;
		/* 8218B0A0h case   25:*/		return 0x8218B0A4;
		  /* 8218B0A4h */ case   26:  		/* addi R26, R26, 1 */
		/* 8218B0A4h case   26:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8218B0A4h case   26:*/		return 0x8218B0A8;
		  /* 8218B0A8h */ case   27:  		/* add R27, R3, R27 */
		/* 8218B0A8h case   27:*/		cpu::op::add<0>(regs,&regs.R27,regs.R3,regs.R27);
		/* 8218B0A8h case   27:*/		return 0x8218B0AC;
		  /* 8218B0ACh */ case   28:  		/* addi R29, R29, 40 */
		/* 8218B0ACh case   28:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x28);
		/* 8218B0ACh case   28:*/		return 0x8218B0B0;
		  /* 8218B0B0h */ case   29:  		/* cmplw CR6, R26, R25 */
		/* 8218B0B0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 8218B0B0h case   29:*/		return 0x8218B0B4;
		  /* 8218B0B4h */ case   30:  		/* bc 12, CR6_LT, -24 */
		/* 8218B0B4h case   30:*/		if ( regs.CR[6].lt ) { return 0x8218B09C;  }
		/* 8218B0B4h case   30:*/		return 0x8218B0B8;
	}
	return 0x8218B0B8;
} // Block from 8218B03Ch-8218B0B8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8218B0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B0B8);
		  /* 8218B0B8h */ case    0:  		/* rlwinm R11, R28, 0, 29, 31 */
		/* 8218B0B8h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R28);
		/* 8218B0B8h case    0:*/		return 0x8218B0BC;
		  /* 8218B0BCh */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 8218B0BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8218B0BCh case    1:*/		return 0x8218B0C0;
		  /* 8218B0C0h */ case    2:  		/* bc 4, CR6_LT, 16 */
		/* 8218B0C0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8218B0D0;  }
		/* 8218B0C0h case    2:*/		return 0x8218B0C4;
		  /* 8218B0C4h */ case    3:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 8218B0C4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 8218B0C4h case    3:*/		return 0x8218B0C8;
		  /* 8218B0C8h */ case    4:  		/* twi 6, R11, 0 */
		/* 8218B0C8h case    4:*/		cpu::op::tw<6>(regs, 0x8218B0C8, regs.R11, 0x00000000);
		/* 8218B0C8h case    4:*/		return 0x8218B0CC;
		  /* 8218B0CCh */ case    5:  		/* divwu R27, R10, R11 */
		/* 8218B0CCh case    5:*/		cpu::op::divwu<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 8218B0CCh case    5:*/		return 0x8218B0D0;
	}
	return 0x8218B0D0;
} // Block from 8218B0B8h-8218B0D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218B0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B0D0);
		  /* 8218B0D0h */ case    0:  		/* rlwimi R28, R27, 3, 18, 28 */
		/* 8218B0D0h case    0:*/		cpu::op::rlwimi<0,3,18,28>(regs,&regs.R28,regs.R27);
		/* 8218B0D0h case    0:*/		return 0x8218B0D4;
		  /* 8218B0D4h */ case    1:  		/* stw R28, <#[R31 + 192]> */
		/* 8218B0D4h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x000000C0) );
		/* 8218B0D4h case    1:*/		return 0x8218B0D8;
	}
	return 0x8218B0D8;
} // Block from 8218B0D0h-8218B0D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B0D8);
		  /* 8218B0D8h */ case    0:  		/* lwz R31, <#[R31 + 200]> */
		/* 8218B0D8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x000000C8) );
		/* 8218B0D8h case    0:*/		return 0x8218B0DC;
		  /* 8218B0DCh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8218B0DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218B0DCh case    1:*/		return 0x8218B0E0;
		  /* 8218B0E0h */ case    2:  		/* bc 4, CR6_EQ, -124 */
		/* 8218B0E0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8218B064;  }
		/* 8218B0E0h case    2:*/		return 0x8218B0E4;
	}
	return 0x8218B0E4;
} // Block from 8218B0D8h-8218B0E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8218B0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B0E4);
		  /* 8218B0E4h */ case    0:  		/* lis R11, -32232 */
		/* 8218B0E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8218);
		/* 8218B0E4h case    0:*/		return 0x8218B0E8;
		  /* 8218B0E8h */ case    1:  		/* lwz R4, <#[R30 + 700]> */
		/* 8218B0E8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218B0E8h case    1:*/		return 0x8218B0EC;
		  /* 8218B0ECh */ case    2:  		/* li R5, 4 */
		/* 8218B0ECh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8218B0ECh case    2:*/		return 0x8218B0F0;
		  /* 8218B0F0h */ case    3:  		/* addi R6, R11, 15008 */
		/* 8218B0F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3AA0);
		/* 8218B0F0h case    3:*/		return 0x8218B0F4;
		  /* 8218B0F4h */ case    4:  		/* mr R3, R23 */
		/* 8218B0F4h case    4:*/		regs.R3 = regs.R23;
		/* 8218B0F4h case    4:*/		return 0x8218B0F8;
		  /* 8218B0F8h */ case    5:  		/* bl -1020184 */
		/* 8218B0F8h case    5:*/		regs.LR = 0x8218B0FC; return 0x82091FE0;
		/* 8218B0F8h case    5:*/		return 0x8218B0FC;
		  /* 8218B0FCh */ case    6:  		/* addi R10, R1, 120 */
		/* 8218B0FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x78);
		/* 8218B0FCh case    6:*/		return 0x8218B100;
		  /* 8218B100h */ case    7:  		/* stw R30, <#[R1 + 112]> */
		/* 8218B100h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 8218B100h case    7:*/		return 0x8218B104;
		  /* 8218B104h */ case    8:  		/* lwz R11, <#[R30 + 792]> */
		/* 8218B104h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000318) );
		/* 8218B104h case    8:*/		return 0x8218B108;
		  /* 8218B108h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8218B108h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218B108h case    9:*/		return 0x8218B10C;
		  /* 8218B10Ch */ case   10:  		/* std R18, <#[R10]> */
		/* 8218B10Ch case   10:*/		cpu::mem::store64( regs, regs.R18, (uint32)(regs.R10 + 0x00000000) );
		/* 8218B10Ch case   10:*/		return 0x8218B110;
		  /* 8218B110h */ case   11:  		/* std R18, <#[R10 + 8]> */
		/* 8218B110h case   11:*/		cpu::mem::store64( regs, regs.R18, (uint32)(regs.R10 + 0x00000008) );
		/* 8218B110h case   11:*/		return 0x8218B114;
		  /* 8218B114h */ case   12:  		/* std R18, <#[R10 + 16]> */
		/* 8218B114h case   12:*/		cpu::mem::store64( regs, regs.R18, (uint32)(regs.R10 + 0x00000010) );
		/* 8218B114h case   12:*/		return 0x8218B118;
		  /* 8218B118h */ case   13:  		/* std R18, <#[R10 + 24]> */
		/* 8218B118h case   13:*/		cpu::mem::store64( regs, regs.R18, (uint32)(regs.R10 + 0x00000018) );
		/* 8218B118h case   13:*/		return 0x8218B11C;
		  /* 8218B11Ch */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 8218B11Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8218B124;  }
		/* 8218B11Ch case   14:*/		return 0x8218B120;
		  /* 8218B120h */ case   15:  		/* li R11, 32 */
		/* 8218B120h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8218B120h case   15:*/		return 0x8218B124;
	}
	return 0x8218B124;
} // Block from 8218B0E4h-8218B124h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8218B124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B124);
		  /* 8218B124h */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 8218B124h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 8218B124h case    0:*/		return 0x8218B128;
		  /* 8218B128h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 8218B128h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8218B13C;  }
		/* 8218B128h case    1:*/		return 0x8218B12C;
		  /* 8218B12Ch */ case    2:  		/* subfic R5, R11, 64 */
		/* 8218B12Ch case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 8218B12Ch case    2:*/		return 0x8218B130;
		  /* 8218B130h */ case    3:  		/* mr R4, R11 */
		/* 8218B130h case    3:*/		regs.R4 = regs.R11;
		/* 8218B130h case    3:*/		return 0x8218B134;
		  /* 8218B134h */ case    4:  		/* addi R3, R1, 112 */
		/* 8218B134h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8218B134h case    4:*/		return 0x8218B138;
		  /* 8218B138h */ case    5:  		/* bl -113760 */
		/* 8218B138h case    5:*/		regs.LR = 0x8218B13C; return 0x8216F4D8;
		/* 8218B138h case    5:*/		return 0x8218B13C;
	}
	return 0x8218B13C;
} // Block from 8218B124h-8218B13Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218B13Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B13C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B13C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B13C);
		  /* 8218B13Ch */ case    0:  		/* lwz R11, <#[R30 + 700]> */
		/* 8218B13Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218B13Ch case    0:*/		return 0x8218B140;
		  /* 8218B140h */ case    1:  		/* mr R19, R18 */
		/* 8218B140h case    1:*/		regs.R19 = regs.R18;
		/* 8218B140h case    1:*/		return 0x8218B144;
		  /* 8218B144h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8218B144h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218B144h case    2:*/		return 0x8218B148;
		  /* 8218B148h */ case    3:  		/* bc 4, CR6_GT, 448 */
		/* 8218B148h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8218B308;  }
		/* 8218B148h case    3:*/		return 0x8218B14C;
		  /* 8218B14Ch */ case    4:  		/* mr R20, R23 */
		/* 8218B14Ch case    4:*/		regs.R20 = regs.R23;
		/* 8218B14Ch case    4:*/		return 0x8218B150;
		  /* 8218B150h */ case    5:  		/* li R22, -1 */
		/* 8218B150h case    5:*/		cpu::op::li<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 8218B150h case    5:*/		return 0x8218B154;
		  /* 8218B154h */ case    6:  		/* addi R11, R1, 104 */
		/* 8218B154h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 8218B154h case    6:*/		return 0x8218B158;
		  /* 8218B158h */ case    7:  		/* lwz R27, <#[R20]> */
		/* 8218B158h case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R20 + 0x00000000) );
		/* 8218B158h case    7:*/		return 0x8218B15C;
		  /* 8218B15Ch */ case    8:  		/* addi R8, R1, 96 */
		/* 8218B15Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8218B15Ch case    8:*/		return 0x8218B160;
		  /* 8218B160h */ case    9:  		/* addi R10, R1, 112 */
		/* 8218B160h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8218B160h case    9:*/		return 0x8218B164;
		  /* 8218B164h */ case   10:  		/* stw R8, <#[R1 + 84]> */
		/* 8218B164h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 8218B164h case   10:*/		return 0x8218B168;
		  /* 8218B168h */ case   11:  		/* li R9, 0 */
		/* 8218B168h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8218B168h case   11:*/		return 0x8218B16C;
		  /* 8218B16Ch */ case   12:  		/* li R8, 0 */
		/* 8218B16Ch case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8218B16Ch case   12:*/		return 0x8218B170;
		  /* 8218B170h */ case   13:  		/* stw R18, <#[R11]> */
		/* 8218B170h case   13:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000000) );
		/* 8218B170h case   13:*/		return 0x8218B174;
		  /* 8218B174h */ case   14:  		/* lwz R11, <#[R27 + 192]> */
		/* 8218B174h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C0) );
		/* 8218B174h case   14:*/		return 0x8218B178;
		  /* 8218B178h */ case   15:  		/* li R5, 0 */
		/* 8218B178h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218B178h case   15:*/		return 0x8218B17C;
		  /* 8218B17Ch */ case   16:  		/* mr R4, R27 */
		/* 8218B17Ch case   16:*/		regs.R4 = regs.R27;
		/* 8218B17Ch case   16:*/		return 0x8218B180;
		  /* 8218B180h */ case   17:  		/* mr R3, R30 */
		/* 8218B180h case   17:*/		regs.R3 = regs.R30;
		/* 8218B180h case   17:*/		return 0x8218B184;
		  /* 8218B184h */ case   18:  		/* rlwinm R7, R11, 0, 29, 31 */
		/* 8218B184h case   18:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R7,regs.R11);
		/* 8218B184h case   18:*/		return 0x8218B188;
		  /* 8218B188h */ case   19:  		/* lwz R6, <#[R1 + 104]> */
		/* 8218B188h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000068) );
		/* 8218B188h case   19:*/		return 0x8218B18C;
		  /* 8218B18Ch */ case   20:  		/* bl -22484 */
		/* 8218B18Ch case   20:*/		regs.LR = 0x8218B190; return 0x821859B8;
		/* 8218B18Ch case   20:*/		return 0x8218B190;
		  /* 8218B190h */ case   21:  		/* mr R23, R3 */
		/* 8218B190h case   21:*/		regs.R23 = regs.R3;
		/* 8218B190h case   21:*/		return 0x8218B194;
		  /* 8218B194h */ case   22:  		/* cmpwi CR6, R3, -1 */
		/* 8218B194h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8218B194h case   22:*/		return 0x8218B198;
		  /* 8218B198h */ case   23:  		/* bc 12, CR6_EQ, 460 */
		/* 8218B198h case   23:*/		if ( regs.CR[6].eq ) { return 0x8218B364;  }
		/* 8218B198h case   23:*/		return 0x8218B19C;
		  /* 8218B19Ch */ case   24:  		/* lwz R11, <#[R27 + 192]> */
		/* 8218B19Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C0) );
		/* 8218B19Ch case   24:*/		return 0x8218B1A0;
		  /* 8218B1A0h */ case   25:  		/* mr R21, R18 */
		/* 8218B1A0h case   25:*/		regs.R21 = regs.R18;
		/* 8218B1A0h case   25:*/		return 0x8218B1A4;
		  /* 8218B1A4h */ case   26:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 8218B1A4h case   26:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218B1A4h case   26:*/		return 0x8218B1A8;
		  /* 8218B1A8h */ case   27:  		/* bc 12, CR0_EQ, 292 */
		/* 8218B1A8h case   27:*/		if ( regs.CR[0].eq ) { return 0x8218B2CC;  }
		/* 8218B1A8h case   27:*/		return 0x8218B1AC;
		  /* 8218B1ACh */ case   28:  		/* rlwinm R24, R3, 0, 0, 27 */
		/* 8218B1ACh case   28:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R24,regs.R3);
		/* 8218B1ACh case   28:*/		return 0x8218B1B0;
		  /* 8218B1B0h */ case   29:  		/* mr R28, R18 */
		/* 8218B1B0h case   29:*/		regs.R28 = regs.R18;
		/* 8218B1B0h case   29:*/		return 0x8218B1B4;
		  /* 8218B1B4h */ case   30:  		/* addi R26, R27, 16 */
		/* 8218B1B4h case   30:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R27,0x10);
		/* 8218B1B4h case   30:*/		return 0x8218B1B8;
		  /* 8218B1B8h */ case   31:  		/* addi R11, R28, 1 */
		/* 8218B1B8h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x1);
		/* 8218B1B8h case   31:*/		return 0x8218B1BC;
		  /* 8218B1BCh */ case   32:  		/* rlwinm R9, R28, 29, 3, 29 */
		/* 8218B1BCh case   32:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R28);
		/* 8218B1BCh case   32:*/		return 0x8218B1C0;
		  /* 8218B1C0h */ case   33:  		/* addi R8, R1, 96 */
		/* 8218B1C0h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8218B1C0h case   33:*/		return 0x8218B1C4;
		  /* 8218B1C4h */ case   34:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8218B1C4h case   34:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8218B1C4h case   34:*/		return 0x8218B1C8;
		  /* 8218B1C8h */ case   35:  		/* li R10, 2 */
		/* 8218B1C8h case   35:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8218B1C8h case   35:*/		return 0x8218B1CC;
		  /* 8218B1CCh */ case   36:  		/* li R4, 0 */
		/* 8218B1CCh case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8218B1CCh case   36:*/		return 0x8218B1D0;
		  /* 8218B1D0h */ case   37:  		/* slw R11, R10, R11 */
		/* 8218B1D0h case   37:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218B1D0h case   37:*/		return 0x8218B1D4;
		  /* 8218B1D4h */ case   38:  		/* lwzx R10, <#[R9 + R8]> */
		/* 8218B1D4h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8218B1D4h case   38:*/		return 0x8218B1D8;
		  /* 8218B1D8h */ case   39:  		/* addi R11, R11, -1 */
		/* 8218B1D8h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218B1D8h case   39:*/		return 0x8218B1DC;
		  /* 8218B1DCh */ case   40:  		/* rlwinm R9, R28, 0, 27, 31 */
		/* 8218B1DCh case   40:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R28);
		/* 8218B1DCh case   40:*/		return 0x8218B1E0;
		  /* 8218B1E0h */ case   41:  		/* and R11, R11, R10 */
		/* 8218B1E0h case   41:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8218B1E0h case   41:*/		return 0x8218B1E4;
		  /* 8218B1E4h */ case   42:  		/* slw R8, R22, R9 */
		/* 8218B1E4h case   42:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R9);
		/* 8218B1E4h case   42:*/		return 0x8218B1E8;
		  /* 8218B1E8h */ case   43:  		/* and R11, R11, R8 */
		/* 8218B1E8h case   43:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8218B1E8h case   43:*/		return 0x8218B1EC;
		  /* 8218B1ECh */ case   44:  		/* li R10, 1 */
		/* 8218B1ECh case   44:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8218B1ECh case   44:*/		return 0x8218B1F0;
		  /* 8218B1F0h */ case   45:  		/* srw R11, R11, R9 */
		/* 8218B1F0h case   45:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8218B1F0h case   45:*/		return 0x8218B1F4;
		  /* 8218B1F4h */ case   46:  		/* slw R11, R10, R11 */
		/* 8218B1F4h case   46:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218B1F4h case   46:*/		return 0x8218B1F8;
		  /* 8218B1F8h */ case   47:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 8218B1F8h case   47:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 8218B1F8h case   47:*/		return 0x8218B1FC;
		  /* 8218B1FCh */ case   48:  		/* or R25, R11, R24 */
		/* 8218B1FCh case   48:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R24);
		/* 8218B1FCh case   48:*/		return 0x8218B200;
		  /* 8218B200h */ case   49:  		/* b 144 */
		/* 8218B200h case   49:*/		return 0x8218B290;
		/* 8218B200h case   49:*/		return 0x8218B204;
		  /* 8218B204h */ case   50:  		/* mr R4, R31 */
		/* 8218B204h case   50:*/		regs.R4 = regs.R31;
		/* 8218B204h case   50:*/		return 0x8218B208;
		  /* 8218B208h */ case   51:  		/* mr R3, R30 */
		/* 8218B208h case   51:*/		regs.R3 = regs.R30;
		/* 8218B208h case   51:*/		return 0x8218B20C;
		  /* 8218B20Ch */ case   52:  		/* bl -30892 */
		/* 8218B20Ch case   52:*/		regs.LR = 0x8218B210; return 0x82183960;
		/* 8218B20Ch case   52:*/		return 0x8218B210;
		  /* 8218B210h */ case   53:  		/* lwz R11, <#[R30 + 688]> */
		/* 8218B210h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B0) );
		/* 8218B210h case   53:*/		return 0x8218B214;
		  /* 8218B214h */ case   54:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8218B214h case   54:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8218B214h case   54:*/		return 0x8218B218;
		  /* 8218B218h */ case   55:  		/* lwzx R29, <#[R10 + R11]> */
		/* 8218B218h case   55:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8218B218h case   55:*/		return 0x8218B21C;
		  /* 8218B21Ch */ case   56:  		/* lwz R11, <#[R29 + 192]> */
		/* 8218B21Ch case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000C0) );
		/* 8218B21Ch case   56:*/		return 0x8218B220;
		  /* 8218B220h */ case   57:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 8218B220h case   57:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 8218B220h case   57:*/		return 0x8218B224;
		  /* 8218B224h */ case   58:  		/* bc 4, CR0_EQ, 80 */
		/* 8218B224h case   58:*/		if ( !regs.CR[0].eq ) { return 0x8218B274;  }
		/* 8218B224h case   58:*/		return 0x8218B228;
		  /* 8218B228h */ case   59:  		/* cmplw CR6, R29, R27 */
		/* 8218B228h case   59:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 8218B228h case   59:*/		return 0x8218B22C;
		  /* 8218B22Ch */ case   60:  		/* bc 12, CR6_EQ, 72 */
		/* 8218B22Ch case   60:*/		if ( regs.CR[6].eq ) { return 0x8218B274;  }
		/* 8218B22Ch case   60:*/		return 0x8218B230;
		  /* 8218B230h */ case   61:  		/* lwz R11, <#[R30 + 692]> */
		/* 8218B230h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002B4) );
		/* 8218B230h case   61:*/		return 0x8218B234;
		  /* 8218B234h */ case   62:  		/* rlwinm R10, R3, 1, 0, 30 */
		/* 8218B234h case   62:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R3);
		/* 8218B234h case   62:*/		return 0x8218B238;
		  /* 8218B238h */ case   63:  		/* rlwinm R9, R3, 1, 0, 25 */
		/* 8218B238h case   63:*/		cpu::op::rlwinm<0,1,0,25>(regs,&regs.R9,regs.R3);
		/* 8218B238h case   63:*/		return 0x8218B23C;
		  /* 8218B23Ch */ case   64:  		/* rlwinm R8, R3, 30, 3, 28 */
		/* 8218B23Ch case   64:*/		cpu::op::rlwinm<0,30,3,28>(regs,&regs.R8,regs.R3);
		/* 8218B23Ch case   64:*/		return 0x8218B240;
		  /* 8218B240h */ case   65:  		/* subf R10, R9, R10 */
		/* 8218B240h case   65:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8218B240h case   65:*/		return 0x8218B244;
		  /* 8218B244h */ case   66:  		/* mr R4, R25 */
		/* 8218B244h case   66:*/		regs.R4 = regs.R25;
		/* 8218B244h case   66:*/		return 0x8218B248;
		  /* 8218B248h */ case   67:  		/* rldicl R10, R10, 0, 32 */
		/* 8218B248h case   67:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 8218B248h case   67:*/		return 0x8218B24C;
		  /* 8218B24Ch */ case   68:  		/* ldx R11, <#[R8 + R11]> */
		/* 8218B24Ch case   68:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8218B24Ch case   68:*/		return 0x8218B250;
		  /* 8218B250h */ case   69:  		/* srd R11, R11, R10 */
		/* 8218B250h case   69:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8218B250h case   69:*/		return 0x8218B254;
		  /* 8218B254h */ case   70:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 8218B254h case   70:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 8218B254h case   70:*/		return 0x8218B258;
		  /* 8218B258h */ case   71:  		/* mulli R11, R11, 40 */
		/* 8218B258h case   71:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 8218B258h case   71:*/		return 0x8218B25C;
		  /* 8218B25Ch */ case   72:  		/* add R11, R11, R29 */
		/* 8218B25Ch case   72:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8218B25Ch case   72:*/		return 0x8218B260;
		  /* 8218B260h */ case   73:  		/* addi R3, R11, 32 */
		/* 8218B260h case   73:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x20);
		/* 8218B260h case   73:*/		return 0x8218B264;
		  /* 8218B264h */ case   74:  		/* bl -113604 */
		/* 8218B264h case   74:*/		regs.LR = 0x8218B268; return 0x8216F6A0;
		/* 8218B264h case   74:*/		return 0x8218B268;
		  /* 8218B268h */ case   75:  		/* lwz R11, <#[R29 + 192]> */
		/* 8218B268h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000C0) );
		/* 8218B268h case   75:*/		return 0x8218B26C;
		  /* 8218B26Ch */ case   76:  		/* oris R11, R11, 16384 */
		/* 8218B26Ch case   76:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 8218B26Ch case   76:*/		return 0x8218B270;
		  /* 8218B270h */ case   77:  		/* stw R11, <#[R29 + 192]> */
		/* 8218B270h case   77:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000000C0) );
		/* 8218B270h case   77:*/		return 0x8218B274;
	}
	return 0x8218B274;
} // Block from 8218B13Ch-8218B274h (78 instructions)

//////////////////////////////////////////////////////
// Block at 8218B274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B274);
		  /* 8218B274h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218B274h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218B274h case    0:*/		return 0x8218B278;
		  /* 8218B278h */ case    1:  		/* addi R11, R11, -1 */
		/* 8218B278h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218B278h case    1:*/		return 0x8218B27C;
		  /* 8218B27Ch */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 8218B27Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8218B27Ch case    2:*/		return 0x8218B280;
		  /* 8218B280h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8218B280h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8218B28C;  }
		/* 8218B280h case    3:*/		return 0x8218B284;
		  /* 8218B284h */ case    4:  		/* mr R31, R22 */
		/* 8218B284h case    4:*/		regs.R31 = regs.R22;
		/* 8218B284h case    4:*/		return 0x8218B288;
		  /* 8218B288h */ case    5:  		/* b 24 */
		/* 8218B288h case    5:*/		return 0x8218B2A0;
		/* 8218B288h case    5:*/		return 0x8218B28C;
	}
	return 0x8218B28C;
} // Block from 8218B274h-8218B28Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218B28Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B28C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B28C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B28C);
		  /* 8218B28Ch */ case    0:  		/* addi R4, R31, 1 */
		/* 8218B28Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1);
		/* 8218B28Ch case    0:*/		return 0x8218B290;
	}
	return 0x8218B290;
} // Block from 8218B28Ch-8218B290h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B290);
		  /* 8218B290h */ case    0:  		/* lwz R5, <#[R30 + 672]> */
		/* 8218B290h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000002A0) );
		/* 8218B290h case    0:*/		return 0x8218B294;
		  /* 8218B294h */ case    1:  		/* lwz R3, <#[R26]> */
		/* 8218B294h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8218B294h case    1:*/		return 0x8218B298;
		  /* 8218B298h */ case    2:  		/* bl -115520 */
		/* 8218B298h case    2:*/		regs.LR = 0x8218B29C; return 0x8216EF58;
		/* 8218B298h case    2:*/		return 0x8218B29C;
		  /* 8218B29Ch */ case    3:  		/* mr R31, R3 */
		/* 8218B29Ch case    3:*/		regs.R31 = regs.R3;
		/* 8218B29Ch case    3:*/		return 0x8218B2A0;
	}
	return 0x8218B2A0;
} // Block from 8218B290h-8218B2A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218B2A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B2A0);
		  /* 8218B2A0h */ case    0:  		/* lwz R11, <#[R30 + 668]> */
		/* 8218B2A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218B2A0h case    0:*/		return 0x8218B2A4;
		  /* 8218B2A4h */ case    1:  		/* addi R11, R11, -1 */
		/* 8218B2A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218B2A4h case    1:*/		return 0x8218B2A8;
		  /* 8218B2A8h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 8218B2A8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8218B2A8h case    2:*/		return 0x8218B2AC;
		  /* 8218B2ACh */ case    3:  		/* bc 4, CR6_GT, -168 */
		/* 8218B2ACh case    3:*/		if ( !regs.CR[6].gt ) { return 0x8218B204;  }
		/* 8218B2ACh case    3:*/		return 0x8218B2B0;
		  /* 8218B2B0h */ case    4:  		/* lwz R11, <#[R27 + 192]> */
		/* 8218B2B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C0) );
		/* 8218B2B0h case    4:*/		return 0x8218B2B4;
		  /* 8218B2B4h */ case    5:  		/* addi R21, R21, 1 */
		/* 8218B2B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 8218B2B4h case    5:*/		return 0x8218B2B8;
		  /* 8218B2B8h */ case    6:  		/* addi R26, R26, 4 */
		/* 8218B2B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8218B2B8h case    6:*/		return 0x8218B2BC;
		  /* 8218B2BCh */ case    7:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8218B2BCh case    7:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8218B2BCh case    7:*/		return 0x8218B2C0;
		  /* 8218B2C0h */ case    8:  		/* addi R28, R28, 2 */
		/* 8218B2C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x2);
		/* 8218B2C0h case    8:*/		return 0x8218B2C4;
		  /* 8218B2C4h */ case    9:  		/* cmplw CR6, R21, R11 */
		/* 8218B2C4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 8218B2C4h case    9:*/		return 0x8218B2C8;
		  /* 8218B2C8h */ case   10:  		/* bc 12, CR6_LT, -272 */
		/* 8218B2C8h case   10:*/		if ( regs.CR[6].lt ) { return 0x8218B1B8;  }
		/* 8218B2C8h case   10:*/		return 0x8218B2CC;
	}
	return 0x8218B2CC;
} // Block from 8218B2A0h-8218B2CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8218B2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B2CC);
		  /* 8218B2CCh */ case    0:  		/* lwz R11, <#[R1 + 96]> */
		/* 8218B2CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8218B2CCh case    0:*/		return 0x8218B2D0;
		  /* 8218B2D0h */ case    1:  		/* li R10, 16384 */
		/* 8218B2D0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x4000);
		/* 8218B2D0h case    1:*/		return 0x8218B2D4;
		  /* 8218B2D4h */ case    2:  		/* lwz R9, <#[R27 + 192]> */
		/* 8218B2D4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x000000C0) );
		/* 8218B2D4h case    2:*/		return 0x8218B2D8;
		  /* 8218B2D8h */ case    3:  		/* addi R19, R19, 1 */
		/* 8218B2D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 8218B2D8h case    3:*/		return 0x8218B2DC;
		  /* 8218B2DCh */ case    4:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8218B2DCh case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218B2DCh case    4:*/		return 0x8218B2E0;
		  /* 8218B2E0h */ case    5:  		/* rlwimi R10, R23, 4, 18, 23 */
		/* 8218B2E0h case    5:*/		cpu::op::rlwimi<0,4,18,23>(regs,&regs.R10,regs.R23);
		/* 8218B2E0h case    5:*/		return 0x8218B2E4;
		  /* 8218B2E4h */ case    6:  		/* rlwinm R9, R9, 0, 18, 3 */
		/* 8218B2E4h case    6:*/		cpu::op::rlwinm<0,0,18,3>(regs,&regs.R9,regs.R9);
		/* 8218B2E4h case    6:*/		return 0x8218B2E8;
		  /* 8218B2E8h */ case    7:  		/* or R11, R10, R11 */
		/* 8218B2E8h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218B2E8h case    7:*/		return 0x8218B2EC;
		  /* 8218B2ECh */ case    8:  		/* addi R20, R20, 4 */
		/* 8218B2ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 8218B2ECh case    8:*/		return 0x8218B2F0;
		  /* 8218B2F0h */ case    9:  		/* rlwinm R11, R11, 14, 0, 17 */
		/* 8218B2F0h case    9:*/		cpu::op::rlwinm<0,14,0,17>(regs,&regs.R11,regs.R11);
		/* 8218B2F0h case    9:*/		return 0x8218B2F4;
		  /* 8218B2F4h */ case   10:  		/* or R11, R11, R9 */
		/* 8218B2F4h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8218B2F4h case   10:*/		return 0x8218B2F8;
		  /* 8218B2F8h */ case   11:  		/* stw R11, <#[R27 + 192]> */
		/* 8218B2F8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x000000C0) );
		/* 8218B2F8h case   11:*/		return 0x8218B2FC;
		  /* 8218B2FCh */ case   12:  		/* lwz R11, <#[R30 + 700]> */
		/* 8218B2FCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000002BC) );
		/* 8218B2FCh case   12:*/		return 0x8218B300;
		  /* 8218B300h */ case   13:  		/* cmplw CR6, R19, R11 */
		/* 8218B300h case   13:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R11);
		/* 8218B300h case   13:*/		return 0x8218B304;
		  /* 8218B304h */ case   14:  		/* bc 12, CR6_LT, -432 */
		/* 8218B304h case   14:*/		if ( regs.CR[6].lt ) { return 0x8218B154;  }
		/* 8218B304h case   14:*/		return 0x8218B308;
	}
	return 0x8218B308;
} // Block from 8218B2CCh-8218B308h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8218B308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B308);
		  /* 8218B308h */ case    0:  		/* lwz R10, <#[R30 + 668]> */
		/* 8218B308h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218B308h case    0:*/		return 0x8218B30C;
		  /* 8218B30Ch */ case    1:  		/* mr R11, R18 */
		/* 8218B30Ch case    1:*/		regs.R11 = regs.R18;
		/* 8218B30Ch case    1:*/		return 0x8218B310;
		  /* 8218B310h */ case    2:  		/* li R29, 1 */
		/* 8218B310h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8218B310h case    2:*/		return 0x8218B314;
		  /* 8218B314h */ case    3:  		/* cmplwi CR6, R10, 1 */
		/* 8218B314h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8218B314h case    3:*/		return 0x8218B318;
		  /* 8218B318h */ case    4:  		/* bc 4, CR6_GT, 68 */
		/* 8218B318h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8218B35C;  }
		/* 8218B318h case    4:*/		return 0x8218B31C;
		  /* 8218B31Ch */ case    5:  		/* lwz R10, <#[R1 + 100]> */
		/* 8218B31Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 8218B31Ch case    5:*/		return 0x8218B320;
		  /* 8218B320h */ case    6:  		/* addi R28, R10, 4 */
		/* 8218B320h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x4);
		/* 8218B320h case    6:*/		return 0x8218B324;
		  /* 8218B324h */ case    7:  		/* lwz R31, <#[R28]> */
		/* 8218B324h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8218B324h case    7:*/		return 0x8218B328;
		  /* 8218B328h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8218B328h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8218B328h case    8:*/		return 0x8218B32C;
		  /* 8218B32Ch */ case    9:  		/* bc 12, CR6_EQ, 48 */
		/* 8218B32Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8218B35C;  }
		/* 8218B32Ch case    9:*/		return 0x8218B330;
		  /* 8218B330h */ case   10:  		/* cmplw CR6, R31, R11 */
		/* 8218B330h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8218B330h case   10:*/		return 0x8218B334;
		  /* 8218B334h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 8218B334h case   11:*/		if ( regs.CR[6].eq ) { return 0x8218B348;  }
		/* 8218B334h case   11:*/		return 0x8218B338;
		  /* 8218B338h */ case   12:  		/* mr R4, R31 */
		/* 8218B338h case   12:*/		regs.R4 = regs.R31;
		/* 8218B338h case   12:*/		return 0x8218B33C;
		  /* 8218B33Ch */ case   13:  		/* mr R3, R30 */
		/* 8218B33Ch case   13:*/		regs.R3 = regs.R30;
		/* 8218B33Ch case   13:*/		return 0x8218B340;
		  /* 8218B340h */ case   14:  		/* bl -29288 */
		/* 8218B340h case   14:*/		regs.LR = 0x8218B344; return 0x821840D8;
		/* 8218B340h case   14:*/		return 0x8218B344;
		  /* 8218B344h */ case   15:  		/* mr R11, R31 */
		/* 8218B344h case   15:*/		regs.R11 = regs.R31;
		/* 8218B344h case   15:*/		return 0x8218B348;
	}
	return 0x8218B348;
} // Block from 8218B308h-8218B348h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8218B348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B348);
		  /* 8218B348h */ case    0:  		/* lwz R10, <#[R30 + 668]> */
		/* 8218B348h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000029C) );
		/* 8218B348h case    0:*/		return 0x8218B34C;
		  /* 8218B34Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8218B34Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8218B34Ch case    1:*/		return 0x8218B350;
		  /* 8218B350h */ case    2:  		/* addi R28, R28, 4 */
		/* 8218B350h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8218B350h case    2:*/		return 0x8218B354;
		  /* 8218B354h */ case    3:  		/* cmplw CR6, R29, R10 */
		/* 8218B354h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8218B354h case    3:*/		return 0x8218B358;
		  /* 8218B358h */ case    4:  		/* bc 12, CR6_LT, -52 */
		/* 8218B358h case    4:*/		if ( regs.CR[6].lt ) { return 0x8218B324;  }
		/* 8218B358h case    4:*/		return 0x8218B35C;
	}
	return 0x8218B35C;
} // Block from 8218B348h-8218B35Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218B35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B35C);
		  /* 8218B35Ch */ case    0:  		/* addi R1, R1, 272 */
		/* 8218B35Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8218B35Ch case    0:*/		return 0x8218B360;
		  /* 8218B360h */ case    1:  		/* b -1024224 */
		/* 8218B360h case    1:*/		return 0x82091280;
		/* 8218B360h case    1:*/		return 0x8218B364;
	}
	return 0x8218B364;
} // Block from 8218B35Ch-8218B364h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B364);
		  /* 8218B364h */ case    0:  		/* lwz R11, <#[R30 + 40]> */
		/* 8218B364h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8218B364h case    0:*/		return 0x8218B368;
		  /* 8218B368h */ case    1:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 8218B368h case    1:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 8218B368h case    1:*/		return 0x8218B36C;
		  /* 8218B36Ch */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8218B36Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8218B38C;  }
		/* 8218B36Ch case    2:*/		return 0x8218B370;
		  /* 8218B370h */ case    3:  		/* lwz R11, <#[R30 + 52]> */
		/* 8218B370h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8218B370h case    3:*/		return 0x8218B374;
		  /* 8218B374h */ case    4:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 8218B374h case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 8218B374h case    4:*/		return 0x8218B378;
		  /* 8218B378h */ case    5:  		/* bc 4, CR0_EQ, 20 */
		/* 8218B378h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8218B38C;  }
		/* 8218B378h case    5:*/		return 0x8218B37C;
		  /* 8218B37Ch */ case    6:  		/* ori R11, R11, 256 */
		/* 8218B37Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8218B37Ch case    6:*/		return 0x8218B380;
		  /* 8218B380h */ case    7:  		/* mr R3, R30 */
		/* 8218B380h case    7:*/		regs.R3 = regs.R30;
		/* 8218B380h case    7:*/		return 0x8218B384;
		  /* 8218B384h */ case    8:  		/* stw R11, <#[R30 + 52]> */
		/* 8218B384h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8218B384h case    8:*/		return 0x8218B388;
		  /* 8218B388h */ case    9:  		/* bl -235664 */
		/* 8218B388h case    9:*/		regs.LR = 0x8218B38C; return 0x82151AF8;
		/* 8218B388h case    9:*/		return 0x8218B38C;
	}
	return 0x8218B38C;
} // Block from 8218B364h-8218B38Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218B38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B38C);
		  /* 8218B38Ch */ case    0:  		/* lwz R11, <#[R30 + 52]> */
		/* 8218B38Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8218B38Ch case    0:*/		return 0x8218B390;
		  /* 8218B390h */ case    1:  		/* rlwinm. R10, R11, 0, 21, 22 */
		/* 8218B390h case    1:*/		cpu::op::rlwinm<1,0,21,22>(regs,&regs.R10,regs.R11);
		/* 8218B390h case    1:*/		return 0x8218B394;
		  /* 8218B394h */ case    2:  		/* bc 4, CR0_EQ, 32 */
		/* 8218B394h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8218B3B4;  }
		/* 8218B394h case    2:*/		return 0x8218B398;
		  /* 8218B398h */ case    3:  		/* lwz R10, <#[R30 + 44]> */
		/* 8218B398h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000002C) );
		/* 8218B398h case    3:*/		return 0x8218B39C;
		  /* 8218B39Ch */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8218B39Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8218B39Ch case    4:*/		return 0x8218B3A0;
		  /* 8218B3A0h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 8218B3A0h case    5:*/		if ( regs.CR[0].eq ) { return 0x8218B3B4;  }
		/* 8218B3A0h case    5:*/		return 0x8218B3A4;
		  /* 8218B3A4h */ case    6:  		/* ori R11, R11, 1025 */
		/* 8218B3A4h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x401);
		/* 8218B3A4h case    6:*/		return 0x8218B3A8;
		  /* 8218B3A8h */ case    7:  		/* mr R3, R30 */
		/* 8218B3A8h case    7:*/		regs.R3 = regs.R30;
		/* 8218B3A8h case    7:*/		return 0x8218B3AC;
		  /* 8218B3ACh */ case    8:  		/* stw R11, <#[R30 + 52]> */
		/* 8218B3ACh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 8218B3ACh case    8:*/		return 0x8218B3B0;
		  /* 8218B3B0h */ case    9:  		/* bl -235704 */
		/* 8218B3B0h case    9:*/		regs.LR = 0x8218B3B4; return 0x82151AF8;
		/* 8218B3B0h case    9:*/		return 0x8218B3B4;
	}
	return 0x8218B3B4;
} // Block from 8218B38Ch-8218B3B4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218B3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B3B4);
		  /* 8218B3B4h */ case    0:  		/* li R4, 3562 */
		/* 8218B3B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDEA);
		/* 8218B3B4h case    0:*/		return 0x8218B3B8;
		  /* 8218B3B8h */ case    1:  		/* mr R3, R30 */
		/* 8218B3B8h case    1:*/		regs.R3 = regs.R30;
		/* 8218B3B8h case    1:*/		return 0x8218B3BC;
		  /* 8218B3BCh */ case    2:  		/* bl -234836 */
		/* 8218B3BCh case    2:*/		regs.LR = 0x8218B3C0; return 0x82151E68;
		/* 8218B3BCh case    2:*/		return 0x8218B3C0;
		  /* 8218B3C0h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 8218B3C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8218B3C0h case    3:*/		return 0x8218B3C4;
		  /* 8218B3C4h */ case    4:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8218B3C4h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8218B3C4h case    4:*/		return 0x8218B3C8;
		  /* 8218B3C8h */ case    5:  		/* cmplwi CR6, R10, 1 */
		/* 8218B3C8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8218B3C8h case    5:*/		return 0x8218B3CC;
		  /* 8218B3CCh */ case    6:  		/* bc 12, CR6_LT, 16 */
		/* 8218B3CCh case    6:*/		if ( regs.CR[6].lt ) { return 0x8218B3DC;  }
		/* 8218B3CCh case    6:*/		return 0x8218B3D0;
		  /* 8218B3D0h */ case    7:  		/* cmplwi CR6, R10, 102 */
		/* 8218B3D0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 8218B3D0h case    7:*/		return 0x8218B3D4;
		  /* 8218B3D4h */ case    8:  		/* li R11, 1 */
		/* 8218B3D4h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218B3D4h case    8:*/		return 0x8218B3D8;
		  /* 8218B3D8h */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 8218B3D8h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8218B3E0;  }
		/* 8218B3D8h case    9:*/		return 0x8218B3DC;
	}
	return 0x8218B3DC;
} // Block from 8218B3B4h-8218B3DCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218B3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B3DC);
		  /* 8218B3DCh */ case    0:  		/* li R11, 0 */
		/* 8218B3DCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218B3DCh case    0:*/		return 0x8218B3E0;
	}
	return 0x8218B3E0;
} // Block from 8218B3DCh-8218B3E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B3E0);
		  /* 8218B3E0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218B3E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218B3E0h case    0:*/		return 0x8218B3E4;
		  /* 8218B3E4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8218B3E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8218B3F0;  }
		/* 8218B3E4h case    1:*/		return 0x8218B3E8;
		  /* 8218B3E8h */ case    2:  		/* li R3, 7 */
		/* 8218B3E8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x7);
		/* 8218B3E8h case    2:*/		return 0x8218B3EC;
		  /* 8218B3ECh */ case    3:  		/* bclr 20, CR0_LT */
		/* 8218B3ECh case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B3ECh case    3:*/		return 0x8218B3F0;
	}
	return 0x8218B3F0;
} // Block from 8218B3E0h-8218B3F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218B3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B3F0);
		  /* 8218B3F0h */ case    0:  		/* cmplwi CR6, R10, 96 */
		/* 8218B3F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000060);
		/* 8218B3F0h case    0:*/		return 0x8218B3F4;
		  /* 8218B3F4h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 8218B3F4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8218B404;  }
		/* 8218B3F4h case    1:*/		return 0x8218B3F8;
		  /* 8218B3F8h */ case    2:  		/* cmplwi CR6, R10, 102 */
		/* 8218B3F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 8218B3F8h case    2:*/		return 0x8218B3FC;
		  /* 8218B3FCh */ case    3:  		/* li R11, 1 */
		/* 8218B3FCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218B3FCh case    3:*/		return 0x8218B400;
		  /* 8218B400h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 8218B400h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8218B408;  }
		/* 8218B400h case    4:*/		return 0x8218B404;
	}
	return 0x8218B404;
} // Block from 8218B3F0h-8218B404h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218B404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B404);
		  /* 8218B404h */ case    0:  		/* li R11, 0 */
		/* 8218B404h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218B404h case    0:*/		return 0x8218B408;
	}
	return 0x8218B408;
} // Block from 8218B404h-8218B408h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B408);
		  /* 8218B408h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218B408h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218B408h case    0:*/		return 0x8218B40C;
		  /* 8218B40Ch */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 8218B40Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8218B428;  }
		/* 8218B40Ch case    1:*/		return 0x8218B410;
		  /* 8218B410h */ case    2:  		/* cmplwi CR6, R10, 96 */
		/* 8218B410h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000060);
		/* 8218B410h case    2:*/		return 0x8218B414;
		  /* 8218B414h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8218B414h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8218B420;  }
		/* 8218B414h case    3:*/		return 0x8218B418;
		  /* 8218B418h */ case    4:  		/* li R3, 6 */
		/* 8218B418h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x6);
		/* 8218B418h case    4:*/		return 0x8218B41C;
		  /* 8218B41Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8218B41Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B41Ch case    5:*/		return 0x8218B420;
	}
	return 0x8218B420;
} // Block from 8218B408h-8218B420h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218B420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B420);
		  /* 8218B420h */ case    0:  		/* li R3, 3 */
		/* 8218B420h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8218B420h case    0:*/		return 0x8218B424;
		  /* 8218B424h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8218B424h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B424h case    1:*/		return 0x8218B428;
	}
	return 0x8218B428;
} // Block from 8218B420h-8218B428h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B428);
		  /* 8218B428h */ case    0:  		/* cmplwi CR6, R10, 83 */
		/* 8218B428h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000053);
		/* 8218B428h case    0:*/		return 0x8218B42C;
		  /* 8218B42Ch */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 8218B42Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8218B43C;  }
		/* 8218B42Ch case    1:*/		return 0x8218B430;
		  /* 8218B430h */ case    2:  		/* cmplwi CR6, R10, 95 */
		/* 8218B430h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005F);
		/* 8218B430h case    2:*/		return 0x8218B434;
		  /* 8218B434h */ case    3:  		/* li R11, 1 */
		/* 8218B434h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218B434h case    3:*/		return 0x8218B438;
		  /* 8218B438h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 8218B438h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8218B440;  }
		/* 8218B438h case    4:*/		return 0x8218B43C;
	}
	return 0x8218B43C;
} // Block from 8218B428h-8218B43Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218B43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B43C);
		  /* 8218B43Ch */ case    0:  		/* li R11, 0 */
		/* 8218B43Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8218B43Ch case    0:*/		return 0x8218B440;
	}
	return 0x8218B440;
} // Block from 8218B43Ch-8218B440h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B440);
		  /* 8218B440h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218B440h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218B440h case    0:*/		return 0x8218B444;
		  /* 8218B444h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8218B444h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218B458;  }
		/* 8218B444h case    1:*/		return 0x8218B448;
		  /* 8218B448h */ case    2:  		/* addi R11, R10, -84 */
		/* 8218B448h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFAC);
		/* 8218B448h case    2:*/		return 0x8218B44C;
		  /* 8218B44Ch */ case    3:  		/* cntlzw R11, R11 */
		/* 8218B44Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8218B44Ch case    3:*/		return 0x8218B450;
		  /* 8218B450h */ case    4:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8218B450h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8218B450h case    4:*/		return 0x8218B454;
		  /* 8218B454h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8218B454h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B454h case    5:*/		return 0x8218B458;
	}
	return 0x8218B458;
} // Block from 8218B440h-8218B458h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218B458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B458);
		  /* 8218B458h */ case    0:  		/* li R3, 2 */
		/* 8218B458h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8218B458h case    0:*/		return 0x8218B45C;
		  /* 8218B45Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8218B45Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B45Ch case    1:*/		return 0x8218B460;
	}
	return 0x8218B460;
} // Block from 8218B458h-8218B460h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218B460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B460);
		  /* 8218B460h */ case    0:  		/* mr R11, R3 */
		/* 8218B460h case    0:*/		regs.R11 = regs.R3;
		/* 8218B460h case    0:*/		return 0x8218B464;
		  /* 8218B464h */ case    1:  		/* lwz R3, <#[R3 + 804]> */
		/* 8218B464h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000324) );
		/* 8218B464h case    1:*/		return 0x8218B468;
		  /* 8218B468h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8218B468h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8218B468h case    2:*/		return 0x8218B46C;
		  /* 8218B46Ch */ case    3:  		/* bclr 4, CR6_EQ */
		/* 8218B46Ch case    3:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8218B46Ch case    3:*/		return 0x8218B470;
	}
	return 0x8218B470;
} // Block from 8218B460h-8218B470h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218B470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B470);
		  /* 8218B470h */ case    0:  		/* lwz R10, <#[R11 + 40]> */
		/* 8218B470h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 8218B470h case    0:*/		return 0x8218B474;
		  /* 8218B474h */ case    1:  		/* rlwinm. R10, R10, 0, 15, 15 */
		/* 8218B474h case    1:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R10);
		/* 8218B474h case    1:*/		return 0x8218B478;
		  /* 8218B478h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8218B478h case    2:*/		if ( regs.CR[0].eq ) { return 0x8218B484;  }
		/* 8218B478h case    2:*/		return 0x8218B47C;
		  /* 8218B47Ch */ case    3:  		/* li R3, 32 */
		/* 8218B47Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 8218B47Ch case    3:*/		return 0x8218B480;
		  /* 8218B480h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8218B480h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B480h case    4:*/		return 0x8218B484;
	}
	return 0x8218B484;
} // Block from 8218B470h-8218B484h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218B484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B484);
		  /* 8218B484h */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 8218B484h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8218B484h case    0:*/		return 0x8218B488;
		  /* 8218B488h */ case    1:  		/* lis R10, -1 */
		/* 8218B488h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8218B488h case    1:*/		return 0x8218B48C;
		  /* 8218B48Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8218B48Ch case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8218B48Ch case    2:*/		return 0x8218B490;
		  /* 8218B490h */ case    3:  		/* subf R11, R10, R11 */
		/* 8218B490h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218B490h case    3:*/		return 0x8218B494;
		  /* 8218B494h */ case    4:  		/* cntlzw R11, R11 */
		/* 8218B494h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8218B494h case    4:*/		return 0x8218B498;
		  /* 8218B498h */ case    5:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8218B498h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8218B498h case    5:*/		return 0x8218B49C;
		  /* 8218B49Ch */ case    6:  		/* subfic R11, R11, 0 */
		/* 8218B49Ch case    6:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8218B49Ch case    6:*/		return 0x8218B4A0;
		  /* 8218B4A0h */ case    7:  		/* subfe R11, R11, R11 */
		/* 8218B4A0h case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8218B4A0h case    7:*/		return 0x8218B4A4;
		  /* 8218B4A4h */ case    8:  		/* rlwinm R11, R11, 0, 28, 29 */
		/* 8218B4A4h case    8:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R11,regs.R11);
		/* 8218B4A4h case    8:*/		return 0x8218B4A8;
		  /* 8218B4A8h */ case    9:  		/* addi R3, R11, 4 */
		/* 8218B4A8h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 8218B4A8h case    9:*/		return 0x8218B4AC;
		  /* 8218B4ACh */ case   10:  		/* bclr 20, CR0_LT */
		/* 8218B4ACh case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B4ACh case   10:*/		return 0x8218B4B0;
	}
	return 0x8218B4B0;
} // Block from 8218B484h-8218B4B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8218B4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B4B0);
		  /* 8218B4B0h */ case    0:  		/* rlwinm R10, R4, 3, 0, 28 */
		/* 8218B4B0h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R4);
		/* 8218B4B0h case    0:*/		return 0x8218B4B4;
		  /* 8218B4B4h */ case    1:  		/* cmpwi CR6, R7, 0 */
		/* 8218B4B4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8218B4B4h case    1:*/		return 0x8218B4B8;
		  /* 8218B4B8h */ case    2:  		/* lwzx R11, <#[R10 + R3]> */
		/* 8218B4B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8218B4B8h case    2:*/		return 0x8218B4BC;
		  /* 8218B4BCh */ case    3:  		/* rlwimi R11, R5, 4, 14, 27 */
		/* 8218B4BCh case    3:*/		cpu::op::rlwimi<0,4,14,27>(regs,&regs.R11,regs.R5);
		/* 8218B4BCh case    3:*/		return 0x8218B4C0;
		  /* 8218B4C0h */ case    4:  		/* rlwimi R11, R6, 0, 28, 31 */
		/* 8218B4C0h case    4:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R6);
		/* 8218B4C0h case    4:*/		return 0x8218B4C4;
		  /* 8218B4C4h */ case    5:  		/* stwx R11, <#[R10 + R3]> */
		/* 8218B4C4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8218B4C4h case    5:*/		return 0x8218B4C8;
		  /* 8218B4C8h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 8218B4C8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8218B4D8;  }
		/* 8218B4C8h case    6:*/		return 0x8218B4CC;
		  /* 8218B4CCh */ case    7:  		/* li R9, 1 */
		/* 8218B4CCh case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8218B4CCh case    7:*/		return 0x8218B4D0;
		  /* 8218B4D0h */ case    8:  		/* rlwimi R11, R9, 18, 12, 13 */
		/* 8218B4D0h case    8:*/		cpu::op::rlwimi<0,18,12,13>(regs,&regs.R11,regs.R9);
		/* 8218B4D0h case    8:*/		return 0x8218B4D4;
		  /* 8218B4D4h */ case    9:  		/* b 80 */
		/* 8218B4D4h case    9:*/		return 0x8218B524;
		/* 8218B4D4h case    9:*/		return 0x8218B4D8;
	}
	return 0x8218B4D8;
} // Block from 8218B4B0h-8218B4D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218B4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B4D8);
		  /* 8218B4D8h */ case    0:  		/* bc 4, CR6_GT, 16 */
		/* 8218B4D8h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8218B4E8;  }
		/* 8218B4D8h case    0:*/		return 0x8218B4DC;
		  /* 8218B4DCh */ case    1:  		/* cmpwi CR6, R7, 9 */
		/* 8218B4DCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000009);
		/* 8218B4DCh case    1:*/		return 0x8218B4E0;
		  /* 8218B4E0h */ case    2:  		/* li R9, 1 */
		/* 8218B4E0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8218B4E0h case    2:*/		return 0x8218B4E4;
		  /* 8218B4E4h */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 8218B4E4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8218B4EC;  }
		/* 8218B4E4h case    3:*/		return 0x8218B4E8;
	}
	return 0x8218B4E8;
} // Block from 8218B4D8h-8218B4E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8218B4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B4E8);
		  /* 8218B4E8h */ case    0:  		/* li R9, 0 */
		/* 8218B4E8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8218B4E8h case    0:*/		return 0x8218B4EC;
	}
	return 0x8218B4EC;
} // Block from 8218B4E8h-8218B4ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B4ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B4EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B4EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B4EC);
		  /* 8218B4ECh */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 8218B4ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 8218B4ECh case    0:*/		return 0x8218B4F0;
		  /* 8218B4F0h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 8218B4F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218B528;  }
		/* 8218B4F0h case    1:*/		return 0x8218B4F4;
		  /* 8218B4F4h */ case    2:  		/* cmpwi CR6, R7, 2 */
		/* 8218B4F4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000002);
		/* 8218B4F4h case    2:*/		return 0x8218B4F8;
		  /* 8218B4F8h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 8218B4F8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8218B508;  }
		/* 8218B4F8h case    3:*/		return 0x8218B4FC;
		  /* 8218B4FCh */ case    4:  		/* cmpwi CR6, R7, 5 */
		/* 8218B4FCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000005);
		/* 8218B4FCh case    4:*/		return 0x8218B500;
		  /* 8218B500h */ case    5:  		/* li R9, 1 */
		/* 8218B500h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8218B500h case    5:*/		return 0x8218B504;
		  /* 8218B504h */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 8218B504h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8218B50C;  }
		/* 8218B504h case    6:*/		return 0x8218B508;
	}
	return 0x8218B508;
} // Block from 8218B4ECh-8218B508h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218B508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B508);
		  /* 8218B508h */ case    0:  		/* li R9, 0 */
		/* 8218B508h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8218B508h case    0:*/		return 0x8218B50C;
	}
	return 0x8218B50C;
} // Block from 8218B508h-8218B50Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B50C);
		  /* 8218B50Ch */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 8218B50Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 8218B50Ch case    0:*/		return 0x8218B510;
		  /* 8218B510h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8218B510h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218B520;  }
		/* 8218B510h case    1:*/		return 0x8218B514;
		  /* 8218B514h */ case    2:  		/* li R9, 1 */
		/* 8218B514h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8218B514h case    2:*/		return 0x8218B518;
		  /* 8218B518h */ case    3:  		/* rlwimi R11, R9, 19, 12, 13 */
		/* 8218B518h case    3:*/		cpu::op::rlwimi<0,19,12,13>(regs,&regs.R11,regs.R9);
		/* 8218B518h case    3:*/		return 0x8218B51C;
		  /* 8218B51Ch */ case    4:  		/* b 8 */
		/* 8218B51Ch case    4:*/		return 0x8218B524;
		/* 8218B51Ch case    4:*/		return 0x8218B520;
	}
	return 0x8218B520;
} // Block from 8218B50Ch-8218B520h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8218B520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B520);
		  /* 8218B520h */ case    0:  		/* oris R11, R11, 12 */
		/* 8218B520h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8218B520h case    0:*/		return 0x8218B524;
	}
	return 0x8218B524;
} // Block from 8218B520h-8218B524h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B524);
		  /* 8218B524h */ case    0:  		/* stwx R11, <#[R10 + R3]> */
		/* 8218B524h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8218B524h case    0:*/		return 0x8218B528;
	}
	return 0x8218B528;
} // Block from 8218B524h-8218B528h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8218B528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B528);
		  /* 8218B528h */ case    0:  		/* rlwinm R11, R8, 11, 13, 20 */
		/* 8218B528h case    0:*/		cpu::op::rlwinm<0,11,13,20>(regs,&regs.R11,regs.R8);
		/* 8218B528h case    0:*/		return 0x8218B52C;
		  /* 8218B52Ch */ case    1:  		/* lwzx R9, <#[R10 + R3]> */
		/* 8218B52Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8218B52Ch case    1:*/		return 0x8218B530;
		  /* 8218B530h */ case    2:  		/* rlwinm R8, R7, 0, 26, 31 */
		/* 8218B530h case    2:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R8,regs.R7);
		/* 8218B530h case    2:*/		return 0x8218B534;
		  /* 8218B534h */ case    3:  		/* rlwinm R9, R9, 0, 1, 31 */
		/* 8218B534h case    3:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R9,regs.R9);
		/* 8218B534h case    3:*/		return 0x8218B538;
		  /* 8218B538h */ case    4:  		/* or R11, R11, R8 */
		/* 8218B538h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8218B538h case    4:*/		return 0x8218B53C;
		  /* 8218B53Ch */ case    5:  		/* rlwinm R9, R9, 0, 12, 5 */
		/* 8218B53Ch case    5:*/		cpu::op::rlwinm<0,0,12,5>(regs,&regs.R9,regs.R9);
		/* 8218B53Ch case    5:*/		return 0x8218B540;
		  /* 8218B540h */ case    6:  		/* rlwinm R11, R11, 20, 0, 11 */
		/* 8218B540h case    6:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R11,regs.R11);
		/* 8218B540h case    6:*/		return 0x8218B544;
		  /* 8218B544h */ case    7:  		/* or R11, R11, R9 */
		/* 8218B544h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8218B544h case    7:*/		return 0x8218B548;
		  /* 8218B548h */ case    8:  		/* stwx R11, <#[R10 + R3]> */
		/* 8218B548h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8218B548h case    8:*/		return 0x8218B54C;
		  /* 8218B54Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 8218B54Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8218B54Ch case    9:*/		return 0x8218B550;
	}
	return 0x8218B550;
} // Block from 8218B528h-8218B550h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218B550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B550);
		  /* 8218B550h */ case    0:  		/* mfspr R12, LR */
		/* 8218B550h case    0:*/		regs.R12 = regs.LR;
		/* 8218B550h case    0:*/		return 0x8218B554;
		  /* 8218B554h */ case    1:  		/* bl -1024772 */
		/* 8218B554h case    1:*/		regs.LR = 0x8218B558; return 0x82091250;
		/* 8218B554h case    1:*/		return 0x8218B558;
		  /* 8218B558h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8218B558h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8218B558h case    2:*/		return 0x8218B55C;
		  /* 8218B55Ch */ case    3:  		/* lwz R29, <#[R4 + 24]> */
		/* 8218B55Ch case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x00000018) );
		/* 8218B55Ch case    3:*/		return 0x8218B560;
		  /* 8218B560h */ case    4:  		/* mr R28, R5 */
		/* 8218B560h case    4:*/		regs.R28 = regs.R5;
		/* 8218B560h case    4:*/		return 0x8218B564;
		  /* 8218B564h */ case    5:  		/* mr R26, R6 */
		/* 8218B564h case    5:*/		regs.R26 = regs.R6;
		/* 8218B564h case    5:*/		return 0x8218B568;
		  /* 8218B568h */ case    6:  		/* mr R27, R7 */
		/* 8218B568h case    6:*/		regs.R27 = regs.R7;
		/* 8218B568h case    6:*/		return 0x8218B56C;
		  /* 8218B56Ch */ case    7:  		/* lbz R11, <#[R29]> */
		/* 8218B56Ch case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8218B56Ch case    7:*/		return 0x8218B570;
		  /* 8218B570h */ case    8:  		/* cmplwi CR6, R11, 98 */
		/* 8218B570h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000062);
		/* 8218B570h case    8:*/		return 0x8218B574;
		  /* 8218B574h */ case    9:  		/* bc 12, CR6_GT, 116 */
		/* 8218B574h case    9:*/		if ( regs.CR[6].gt ) { return 0x8218B5E8;  }
		/* 8218B574h case    9:*/		return 0x8218B578;
		  /* 8218B578h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 8218B578h case   10:*/		if ( regs.CR[6].eq ) { return 0x8218B5A4;  }
		/* 8218B578h case   10:*/		return 0x8218B57C;
		  /* 8218B57Ch */ case   11:  		/* cmplwi CR6, R11, 66 */
		/* 8218B57Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000042);
		/* 8218B57Ch case   11:*/		return 0x8218B580;
		  /* 8218B580h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 8218B580h case   12:*/		if ( regs.CR[6].eq ) { return 0x8218B5A4;  }
		/* 8218B580h case   12:*/		return 0x8218B584;
		  /* 8218B584h */ case   13:  		/* cmplwi CR6, R11, 67 */
		/* 8218B584h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000043);
		/* 8218B584h case   13:*/		return 0x8218B588;
		  /* 8218B588h */ case   14:  		/* bc 12, CR6_EQ, 340 */
		/* 8218B588h case   14:*/		if ( regs.CR[6].eq ) { return 0x8218B6DC;  }
		/* 8218B588h case   14:*/		return 0x8218B58C;
		  /* 8218B58Ch */ case   15:  		/* cmplwi CR6, R11, 73 */
		/* 8218B58Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000049);
		/* 8218B58Ch case   15:*/		return 0x8218B590;
		  /* 8218B590h */ case   16:  		/* bc 12, CR6_EQ, 260 */
		/* 8218B590h case   16:*/		if ( regs.CR[6].eq ) { return 0x8218B694;  }
		/* 8218B590h case   16:*/		return 0x8218B594;
		  /* 8218B594h */ case   17:  		/* cmplwi CR6, R11, 83 */
		/* 8218B594h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 8218B594h case   17:*/		return 0x8218B598;
		  /* 8218B598h */ case   18:  		/* bc 12, CR6_EQ, 216 */
		/* 8218B598h case   18:*/		if ( regs.CR[6].eq ) { return 0x8218B670;  }
		/* 8218B598h case   18:*/		return 0x8218B59C;
		  /* 8218B59Ch */ case   19:  		/* cmplwi CR6, R11, 86 */
		/* 8218B59Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8218B59Ch case   19:*/		return 0x8218B5A0;
		  /* 8218B5A0h */ case   20:  		/* b 100 */
		/* 8218B5A0h case   20:*/		return 0x8218B604;
		/* 8218B5A0h case   20:*/		return 0x8218B5A4;
	}
	return 0x8218B5A4;
} // Block from 8218B550h-8218B5A4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8218B5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B5A4);
		  /* 8218B5A4h */ case    0:  		/* cmpwi CR6, R28, 7 */
		/* 8218B5A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000007);
		/* 8218B5A4h case    0:*/		return 0x8218B5A8;
		  /* 8218B5A8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8218B5A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8218B5C0;  }
		/* 8218B5A8h case    1:*/		return 0x8218B5AC;
		  /* 8218B5ACh */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 8218B5ACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8218B5ACh case    2:*/		return 0x8218B5B0;
		  /* 8218B5B0h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8218B5B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8218B5C0;  }
		/* 8218B5B0h case    3:*/		return 0x8218B5B4;
		  /* 8218B5B4h */ case    4:  		/* mr R5, R29 */
		/* 8218B5B4h case    4:*/		regs.R5 = regs.R29;
		/* 8218B5B4h case    4:*/		return 0x8218B5B8;
		  /* 8218B5B8h */ case    5:  		/* li R4, 4509 */
		/* 8218B5B8h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x119D);
		/* 8218B5B8h case    5:*/		return 0x8218B5BC;
		  /* 8218B5BCh */ case    6:  		/* bl -235348 */
		/* 8218B5BCh case    6:*/		regs.LR = 0x8218B5C0; return 0x82151E68;
		/* 8218B5BCh case    6:*/		return 0x8218B5C0;
	}
	return 0x8218B5C0;
} // Block from 8218B5A4h-8218B5C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218B5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B5C0);
		  /* 8218B5C0h */ case    0:  		/* lwz R11, <#[R3 + 48]> */
		/* 8218B5C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 8218B5C0h case    0:*/		return 0x8218B5C4;
		  /* 8218B5C4h */ case    1:  		/* lis R10, -1 */
		/* 8218B5C4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8218B5C4h case    1:*/		return 0x8218B5C8;
		  /* 8218B5C8h */ case    2:  		/* li R9, 128 */
		/* 8218B5C8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x80);
		/* 8218B5C8h case    2:*/		return 0x8218B5CC;
		  /* 8218B5CCh */ case    3:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8218B5CCh case    3:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8218B5CCh case    3:*/		return 0x8218B5D0;
		  /* 8218B5D0h */ case    4:  		/* li R28, 0 */
		/* 8218B5D0h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8218B5D0h case    4:*/		return 0x8218B5D4;
		  /* 8218B5D4h */ case    5:  		/* subf R11, R10, R11 */
		/* 8218B5D4h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218B5D4h case    5:*/		return 0x8218B5D8;
		  /* 8218B5D8h */ case    6:  		/* addic R11, R11, -1 */
		/* 8218B5D8h case    6:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8218B5D8h case    6:*/		return 0x8218B5DC;
		  /* 8218B5DCh */ case    7:  		/* subfe R11, R11, R11 */
		/* 8218B5DCh case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8218B5DCh case    7:*/		return 0x8218B5E0;
		  /* 8218B5E0h */ case    8:  		/* and R31, R11, R9 */
		/* 8218B5E0h case    8:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R9);
		/* 8218B5E0h case    8:*/		return 0x8218B5E4;
		  /* 8218B5E4h */ case    9:  		/* b 284 */
		/* 8218B5E4h case    9:*/		return 0x8218B700;
		/* 8218B5E4h case    9:*/		return 0x8218B5E8;
	}
	return 0x8218B5E8;
} // Block from 8218B5C0h-8218B5E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218B5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218B5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218B5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218B5E8);
		  /* 8218B5E8h */ case    0:  		/* cmplwi CR6, R11, 99 */
		/* 8218B5E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000063);
		/* 8218B5E8h case    0:*/		return 0x8218B5EC;
		  /* 8218B5ECh */ case    1:  		/* bc 12, CR6_EQ, 240 */
		/* 8218B5ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8218B6DC;  }
		/* 8218B5ECh case    1:*/		return 0x8218B5F0;
		  /* 8218B5F0h */ case    2:  		/* cmplwi CR6, R11, 105 */
		/* 8218B5F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000069);
		/* 8218B5F0h case    2:*/		return 0x8218B5F4;
		  /* 8218B5F4h */ case    3:  		/* bc 12, CR6_EQ, 160 */
		/* 8218B5F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8218B694;  }
		/* 8218B5F4h case    3:*/		return 0x8218B5F8;
		  /* 8218B5F8h */ case    4:  		/* cmplwi CR6, R11, 115 */
		/* 8218B5F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000073);
		/* 8218B5F8h case    4:*/		return 0x8218B5FC;
		  /* 8218B5FCh */ case    5:  		/* bc 12, CR6_EQ, 116 */
		/* 8218B5FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8218B670;  }
		/* 8218B5FCh case    5:*/		return 0x8218B600;
		  /* 8218B600h */ case    6:  		/* cmplwi CR6, R11, 118 */
		/* 8218B600h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000076);
		/* 8218B600h case    6:*/		return 0x8218B604;
	}
	return 0x8218B604;
} // Block from 8218B5E8h-8218B604h (7 instructions)

