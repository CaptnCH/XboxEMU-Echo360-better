#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 8212B45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B45C);
		  /* 8212B45Ch */ case    0:  		/* li R5, 0 */
		/* 8212B45Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212B45Ch case    0:*/		return 0x8212B460;
	}
	return 0x8212B460;
} // Block from 8212B45Ch-8212B460h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212B460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B460);
		  /* 8212B460h */ case    0:  		/* lwz R3, <#[R31 + 3032]> */
		/* 8212B460h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000BD8) );
		/* 8212B460h case    0:*/		return 0x8212B464;
		  /* 8212B464h */ case    1:  		/* bl -14508 */
		/* 8212B464h case    1:*/		regs.LR = 0x8212B468; return 0x82127BB8;
		/* 8212B464h case    1:*/		return 0x8212B468;
	}
	return 0x8212B468;
} // Block from 8212B460h-8212B468h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212B468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B468);
		  /* 8212B468h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212B468h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B468h case    0:*/		return 0x8212B46C;
		  /* 8212B46Ch */ case    1:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 8212B46Ch case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 8212B46Ch case    1:*/		return 0x8212B470;
		  /* 8212B470h */ case    2:  		/* lwz R9, <#[R31 + 20]> */
		/* 8212B470h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B470h case    2:*/		return 0x8212B474;
		  /* 8212B474h */ case    3:  		/* addi R8, R27, -3296 */
		/* 8212B474h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R27,0xFFFFF320);
		/* 8212B474h case    3:*/		return 0x8212B478;
		  /* 8212B478h */ case    4:  		/* subf R11, R10, R11 */
		/* 8212B478h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8212B478h case    4:*/		return 0x8212B47C;
		  /* 8212B47Ch */ case    5:  		/* subf R10, R28, R9 */
		/* 8212B47Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R9);
		/* 8212B47Ch case    5:*/		return 0x8212B480;
		  /* 8212B480h */ case    6:  		/* stw R11, <#[R31 + 16]> */
		/* 8212B480h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B480h case    6:*/		return 0x8212B484;
		  /* 8212B484h */ case    7:  		/* lha R11, <#[R11]> */
		/* 8212B484h case    7:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B484h case    7:*/		return 0x8212B488;
		  /* 8212B488h */ case    8:  		/* stw R10, <#[R31 + 20]> */
		/* 8212B488h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B488h case    8:*/		return 0x8212B48C;
		  /* 8212B48Ch */ case    9:  		/* cmpwi CR0, R11, 0 */
		/* 8212B48Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 8212B48Ch case    9:*/		return 0x8212B490;
		  /* 8212B490h */ case   10:  		/* lhax R10, <#[R30 + R8]> */
		/* 8212B490h case   10:*/		cpu::mem::load16a( regs, &regs.R10, (uint32)(regs.R30 + regs.R8 + 0x00000000) );
		/* 8212B490h case   10:*/		return 0x8212B494;
		  /* 8212B494h */ case   11:  		/* bc 4, CR0_EQ, 112 */
		/* 8212B494h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8212B504;  }
		/* 8212B494h case   11:*/		return 0x8212B498;
		  /* 8212B498h */ case   12:  		/* cmpwi CR6, R10, 0 */
		/* 8212B498h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8212B498h case   12:*/		return 0x8212B49C;
		  /* 8212B49Ch */ case   13:  		/* bc 4, CR6_EQ, 104 */
		/* 8212B49Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8212B504;  }
		/* 8212B49Ch case   13:*/		return 0x8212B4A0;
		  /* 8212B4A0h */ case   14:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212B4A0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B4A0h case   14:*/		return 0x8212B4A4;
		  /* 8212B4A4h */ case   15:  		/* li R10, 66 */
		/* 8212B4A4h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x42);
		/* 8212B4A4h case   15:*/		return 0x8212B4A8;
		  /* 8212B4A8h */ case   16:  		/* li R30, 66 */
		/* 8212B4A8h case   16:*/		cpu::op::li<0>(regs,&regs.R30,0x42);
		/* 8212B4A8h case   16:*/		return 0x8212B4AC;
		  /* 8212B4ACh */ case   17:  		/* addi R11, R11, 2 */
		/* 8212B4ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8212B4ACh case   17:*/		return 0x8212B4B0;
		  /* 8212B4B0h */ case   18:  		/* stw R11, <#[R31 + 16]> */
		/* 8212B4B0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B4B0h case   18:*/		return 0x8212B4B4;
		  /* 8212B4B4h */ case   19:  		/* sth R10, <#[R11]> */
		/* 8212B4B4h case   19:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B4B4h case   19:*/		return 0x8212B4B8;
		  /* 8212B4B8h */ case   20:  		/* lwz R10, <#[R31 + 24]> */
		/* 8212B4B8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8212B4B8h case   20:*/		return 0x8212B4BC;
		  /* 8212B4BCh */ case   21:  		/* lwz R11, <#[R31 + 20]> */
		/* 8212B4BCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B4BCh case   21:*/		return 0x8212B4C0;
		  /* 8212B4C0h */ case   22:  		/* addi R11, R11, 4 */
		/* 8212B4C0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212B4C0h case   22:*/		return 0x8212B4C4;
		  /* 8212B4C4h */ case   23:  		/* stw R11, <#[R31 + 20]> */
		/* 8212B4C4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B4C4h case   23:*/		return 0x8212B4C8;
		  /* 8212B4C8h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8212B4C8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B4C8h case   24:*/		return 0x8212B4CC;
		  /* 8212B4CCh */ case   25:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212B4CCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212B4CCh case   25:*/		return 0x8212B4D0;
		  /* 8212B4D0h */ case   26:  		/* cmpwi CR6, R11, 0 */
		/* 8212B4D0h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212B4D0h case   26:*/		return 0x8212B4D4;
		  /* 8212B4D4h */ case   27:  		/* bc 4, CR6_LT, 28 */
		/* 8212B4D4h case   27:*/		if ( !regs.CR[6].lt ) { return 0x8212B4F0;  }
		/* 8212B4D4h case   27:*/		return 0x8212B4D8;
		  /* 8212B4D8h */ case   28:  		/* lwz R3, <#[R31 + 3032]> */
		/* 8212B4D8h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000BD8) );
		/* 8212B4D8h case   28:*/		return 0x8212B4DC;
		  /* 8212B4DCh */ case   29:  		/* bl -34284 */
		/* 8212B4DCh case   29:*/		regs.LR = 0x8212B4E0; return 0x82122EF0;
		/* 8212B4DCh case   29:*/		return 0x8212B4E0;
		  /* 8212B4E0h */ case   30:  		/* stw R3, <#[R31 + 12]> */
		/* 8212B4E0h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212B4E0h case   30:*/		return 0x8212B4E4;
		  /* 8212B4E4h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 8212B4E4h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212B4E4h case   31:*/		return 0x8212B4E8;
		  /* 8212B4E8h */ case   32:  		/* bc 4, CR0_LT, 8 */
		/* 8212B4E8h case   32:*/		if ( !regs.CR[0].lt ) { return 0x8212B4F0;  }
		/* 8212B4E8h case   32:*/		return 0x8212B4EC;
		  /* 8212B4ECh */ case   33:  		/* stw R24, <#[R31 + 12]> */
		/* 8212B4ECh case   33:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212B4ECh case   33:*/		return 0x8212B4F0;
	}
	return 0x8212B4F0;
} // Block from 8212B468h-8212B4F0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8212B4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B4F0);
		  /* 8212B4F0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212B4F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212B4F0h case    0:*/		return 0x8212B4F4;
		  /* 8212B4F4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8212B4F4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212B4F4h case    1:*/		return 0x8212B4F8;
		  /* 8212B4F8h */ case    2:  		/* bc 4, CR6_EQ, -5108 */
		/* 8212B4F8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212A104;  }
		/* 8212B4F8h case    2:*/		return 0x8212B4FC;
		  /* 8212B4FCh */ case    3:  		/* li R3, 0 */
		/* 8212B4FCh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212B4FCh case    3:*/		return 0x8212B500;
		  /* 8212B500h */ case    4:  		/* b 352 */
		/* 8212B500h case    4:*/		return 0x8212B660;
		/* 8212B500h case    4:*/		return 0x8212B504;
	}
	return 0x8212B504;
} // Block from 8212B4F0h-8212B504h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212B504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B504);
		  /* 8212B504h */ case    0:  		/* rlwinm R9, R10, 1, 0, 30 */
		/* 8212B504h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 8212B504h case    0:*/		return 0x8212B508;
		  /* 8212B508h */ case    1:  		/* addi R10, R27, 3456 */
		/* 8212B508h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xD80);
		/* 8212B508h case    1:*/		return 0x8212B50C;
		  /* 8212B50Ch */ case    2:  		/* lhax R10, <#[R9 + R10]> */
		/* 8212B50Ch case    2:*/		cpu::mem::load16a( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8212B50Ch case    2:*/		return 0x8212B510;
		  /* 8212B510h */ case    3:  		/* cmpwi CR0, R10, 0 */
		/* 8212B510h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R10,0x00000000);
		/* 8212B510h case    3:*/		return 0x8212B514;
		  /* 8212B514h */ case    4:  		/* bc 12, CR0_EQ, 48 */
		/* 8212B514h case    4:*/		if ( regs.CR[0].eq ) { return 0x8212B544;  }
		/* 8212B514h case    4:*/		return 0x8212B518;
		  /* 8212B518h */ case    5:  		/* add. R10, R10, R11 */
		/* 8212B518h case    5:*/		cpu::op::add<1>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8212B518h case    5:*/		return 0x8212B51C;
		  /* 8212B51Ch */ case    6:  		/* bc 12, CR0_LT, 40 */
		/* 8212B51Ch case    6:*/		if ( regs.CR[0].lt ) { return 0x8212B544;  }
		/* 8212B51Ch case    6:*/		return 0x8212B520;
		  /* 8212B520h */ case    7:  		/* cmpwi CR6, R10, 7525 */
		/* 8212B520h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00001D65);
		/* 8212B520h case    7:*/		return 0x8212B524;
		  /* 8212B524h */ case    8:  		/* bc 12, CR6_GT, 32 */
		/* 8212B524h case    8:*/		if ( regs.CR[6].gt ) { return 0x8212B544;  }
		/* 8212B524h case    8:*/		return 0x8212B528;
		  /* 8212B528h */ case    9:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8212B528h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8212B528h case    9:*/		return 0x8212B52C;
		  /* 8212B52Ch */ case   10:  		/* lhax R8, <#[R10 + R26]> */
		/* 8212B52Ch case   10:*/		cpu::mem::load16a( regs, &regs.R8, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 8212B52Ch case   10:*/		return 0x8212B530;
		  /* 8212B530h */ case   11:  		/* cmpw CR6, R8, R11 */
		/* 8212B530h case   11:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R11);
		/* 8212B530h case   11:*/		return 0x8212B534;
		  /* 8212B534h */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 8212B534h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212B544;  }
		/* 8212B534h case   12:*/		return 0x8212B538;
		  /* 8212B538h */ case   13:  		/* addi R11, R27, 3744 */
		/* 8212B538h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xEA0);
		/* 8212B538h case   13:*/		return 0x8212B53C;
		  /* 8212B53Ch */ case   14:  		/* lhax R30, <#[R10 + R11]> */
		/* 8212B53Ch case   14:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212B53Ch case   14:*/		return 0x8212B540;
		  /* 8212B540h */ case   15:  		/* b 8 */
		/* 8212B540h case   15:*/		return 0x8212B548;
		/* 8212B540h case   15:*/		return 0x8212B544;
	}
	return 0x8212B544;
} // Block from 8212B504h-8212B544h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212B544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B544);
		  /* 8212B544h */ case    0:  		/* lhax R30, <#[R9 + R27]> */
		/* 8212B544h case    0:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R9 + regs.R27 + 0x00000000) );
		/* 8212B544h case    0:*/		return 0x8212B548;
	}
	return 0x8212B548;
} // Block from 8212B544h-8212B548h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212B548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B548);
		  /* 8212B548h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212B548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B548h case    0:*/		return 0x8212B54C;
		  /* 8212B54Ch */ case    1:  		/* addi R10, R31, 1030 */
		/* 8212B54Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x406);
		/* 8212B54Ch case    1:*/		return 0x8212B550;
		  /* 8212B550h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8212B550h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212B550h case    2:*/		return 0x8212B554;
		  /* 8212B554h */ case    3:  		/* bc 4, CR6_LT, 248 */
		/* 8212B554h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8212B64C;  }
		/* 8212B554h case    3:*/		return 0x8212B558;
		  /* 8212B558h */ case    4:  		/* addi R11, R11, 2 */
		/* 8212B558h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8212B558h case    4:*/		return 0x8212B55C;
		  /* 8212B55Ch */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 8212B55Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B55Ch case    5:*/		return 0x8212B560;
		  /* 8212B560h */ case    6:  		/* sth R30, <#[R11]> */
		/* 8212B560h case    6:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B560h case    6:*/		return 0x8212B564;
		  /* 8212B564h */ case    7:  		/* lwz R10, <#[R31 + 24]> */
		/* 8212B564h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8212B564h case    7:*/		return 0x8212B568;
		  /* 8212B568h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 8212B568h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B568h case    8:*/		return 0x8212B56C;
		  /* 8212B56Ch */ case    9:  		/* addi R11, R11, 4 */
		/* 8212B56Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212B56Ch case    9:*/		return 0x8212B570;
		  /* 8212B570h */ case   10:  		/* stw R11, <#[R31 + 20]> */
		/* 8212B570h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B570h case   10:*/		return 0x8212B574;
		  /* 8212B574h */ case   11:  		/* stw R10, <#[R11]> */
		/* 8212B574h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B574h case   11:*/		return 0x8212B578;
		  /* 8212B578h */ case   12:  		/* b -5236 */
		/* 8212B578h case   12:*/		return 0x8212A104;
		/* 8212B578h case   12:*/		return 0x8212B57C;
	}
	return 0x8212B57C;
} // Block from 8212B548h-8212B57Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212B57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B57C);
		  /* 8212B57Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8212B57Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212B57Ch case    0:*/		return 0x8212B580;
		  /* 8212B580h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8212B580h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212B580h case    1:*/		return 0x8212B584;
		  /* 8212B584h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8212B584h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212B5A0;  }
		/* 8212B584h case    2:*/		return 0x8212B588;
		  /* 8212B588h */ case    3:  		/* mr R4, R23 */
		/* 8212B588h case    3:*/		regs.R4 = regs.R23;
		/* 8212B588h case    3:*/		return 0x8212B58C;
		  /* 8212B58Ch */ case    4:  		/* mr R3, R31 */
		/* 8212B58Ch case    4:*/		regs.R3 = regs.R31;
		/* 8212B58Ch case    4:*/		return 0x8212B590;
		  /* 8212B590h */ case    5:  		/* bl -62072 */
		/* 8212B590h case    5:*/		regs.LR = 0x8212B594; return 0x8211C318;
		/* 8212B590h case    5:*/		return 0x8212B594;
		  /* 8212B594h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 8212B594h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8212B594h case    6:*/		return 0x8212B598;
		  /* 8212B598h */ case    7:  		/* addi R11, R11, 1 */
		/* 8212B598h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212B598h case    7:*/		return 0x8212B59C;
		  /* 8212B59Ch */ case    8:  		/* stw R11, <#[R31 + 4]> */
		/* 8212B59Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8212B59Ch case    8:*/		return 0x8212B5A0;
	}
	return 0x8212B5A0;
} // Block from 8212B57Ch-8212B5A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212B5A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B5A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B5A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B5A0);
		  /* 8212B5A0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8212B5A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212B5A0h case    0:*/		return 0x8212B5A4;
		  /* 8212B5A4h */ case    1:  		/* cmpwi CR6, R11, 3 */
		/* 8212B5A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8212B5A4h case    1:*/		return 0x8212B5A8;
		  /* 8212B5A8h */ case    2:  		/* bc 4, CR6_LT, 144 */
		/* 8212B5A8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8212B638;  }
		/* 8212B5A8h case    2:*/		return 0x8212B5AC;
		  /* 8212B5ACh */ case    3:  		/* li R11, 3 */
		/* 8212B5ACh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8212B5ACh case    3:*/		return 0x8212B5B0;
		  /* 8212B5B0h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 8212B5B0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212B5B0h case    4:*/		return 0x8212B5B4;
		  /* 8212B5B4h */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212B5B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B5B4h case    5:*/		return 0x8212B5B8;
		  /* 8212B5B8h */ case    6:  		/* addi R10, R26, -18512 */
		/* 8212B5B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0xFFFFB7B0);
		/* 8212B5B8h case    6:*/		return 0x8212B5BC;
		  /* 8212B5BCh */ case    7:  		/* lha R9, <#[R11]> */
		/* 8212B5BCh case    7:*/		cpu::mem::load16a( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B5BCh case    7:*/		return 0x8212B5C0;
		  /* 8212B5C0h */ case    8:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 8212B5C0h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 8212B5C0h case    8:*/		return 0x8212B5C4;
		  /* 8212B5C4h */ case    9:  		/* lhax R10, <#[R9 + R10]> */
		/* 8212B5C4h case    9:*/		cpu::mem::load16a( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8212B5C4h case    9:*/		return 0x8212B5C8;
		  /* 8212B5C8h */ case   10:  		/* cmpwi CR0, R10, 0 */
		/* 8212B5C8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R10,0x00000000);
		/* 8212B5C8h case   10:*/		return 0x8212B5CC;
		  /* 8212B5CCh */ case   11:  		/* bc 12, CR0_EQ, 36 */
		/* 8212B5CCh case   11:*/		if ( regs.CR[0].eq ) { return 0x8212B5F0;  }
		/* 8212B5CCh case   11:*/		return 0x8212B5D0;
		  /* 8212B5D0h */ case   12:  		/* addic. R10, R10, 256 */
		/* 8212B5D0h case   12:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0x100);
		/* 8212B5D0h case   12:*/		return 0x8212B5D4;
		  /* 8212B5D4h */ case   13:  		/* bc 12, CR0_LT, 28 */
		/* 8212B5D4h case   13:*/		if ( regs.CR[0].lt ) { return 0x8212B5F0;  }
		/* 8212B5D4h case   13:*/		return 0x8212B5D8;
		  /* 8212B5D8h */ case   14:  		/* cmpwi CR6, R10, 7525 */
		/* 8212B5D8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00001D65);
		/* 8212B5D8h case   14:*/		return 0x8212B5DC;
		  /* 8212B5DCh */ case   15:  		/* bc 12, CR6_GT, 20 */
		/* 8212B5DCh case   15:*/		if ( regs.CR[6].gt ) { return 0x8212B5F0;  }
		/* 8212B5DCh case   15:*/		return 0x8212B5E0;
		  /* 8212B5E0h */ case   16:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8212B5E0h case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8212B5E0h case   16:*/		return 0x8212B5E4;
		  /* 8212B5E4h */ case   17:  		/* lhzx R9, <#[R10 + R26]> */
		/* 8212B5E4h case   17:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 8212B5E4h case   17:*/		return 0x8212B5E8;
		  /* 8212B5E8h */ case   18:  		/* cmplwi CR6, R9, 256 */
		/* 8212B5E8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000100);
		/* 8212B5E8h case   18:*/		return 0x8212B5EC;
		  /* 8212B5ECh */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 8212B5ECh case   19:*/		if ( regs.CR[6].eq ) { return 0x8212B610;  }
		/* 8212B5ECh case   19:*/		return 0x8212B5F0;
	}
	return 0x8212B5F0;
} // Block from 8212B5A0h-8212B5F0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8212B5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B5F0);
		  /* 8212B5F0h */ case    0:  		/* cmplw CR6, R11, R22 */
		/* 8212B5F0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 8212B5F0h case    0:*/		return 0x8212B5F4;
		  /* 8212B5F4h */ case    1:  		/* bc 4, CR6_GT, 104 */
		/* 8212B5F4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8212B65C;  }
		/* 8212B5F4h case    1:*/		return 0x8212B5F8;
		  /* 8212B5F8h */ case    2:  		/* lwz R10, <#[R31 + 20]> */
		/* 8212B5F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B5F8h case    2:*/		return 0x8212B5FC;
		  /* 8212B5FCh */ case    3:  		/* addi R11, R11, -2 */
		/* 8212B5FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 8212B5FCh case    3:*/		return 0x8212B600;
		  /* 8212B600h */ case    4:  		/* addi R10, R10, -4 */
		/* 8212B600h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8212B600h case    4:*/		return 0x8212B604;
		  /* 8212B604h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 8212B604h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B604h case    5:*/		return 0x8212B608;
		  /* 8212B608h */ case    6:  		/* stw R10, <#[R31 + 20]> */
		/* 8212B608h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B608h case    6:*/		return 0x8212B60C;
		  /* 8212B60Ch */ case    7:  		/* b -88 */
		/* 8212B60Ch case    7:*/		return 0x8212B5B4;
		/* 8212B60Ch case    7:*/		return 0x8212B610;
	}
	return 0x8212B610;
} // Block from 8212B5F0h-8212B610h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212B610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B610);
		  /* 8212B610h */ case    0:  		/* addi R9, R31, 1030 */
		/* 8212B610h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x406);
		/* 8212B610h case    0:*/		return 0x8212B614;
		  /* 8212B614h */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 8212B614h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212B614h case    1:*/		return 0x8212B618;
		  /* 8212B618h */ case    2:  		/* bc 4, CR6_LT, 52 */
		/* 8212B618h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8212B64C;  }
		/* 8212B618h case    2:*/		return 0x8212B61C;
		  /* 8212B61Ch */ case    3:  		/* addi R9, R27, 3744 */
		/* 8212B61Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xEA0);
		/* 8212B61Ch case    3:*/		return 0x8212B620;
		  /* 8212B620h */ case    4:  		/* addi R11, R11, 2 */
		/* 8212B620h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8212B620h case    4:*/		return 0x8212B624;
		  /* 8212B624h */ case    5:  		/* lhax R30, <#[R10 + R9]> */
		/* 8212B624h case    5:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212B624h case    5:*/		return 0x8212B628;
		  /* 8212B628h */ case    6:  		/* stw R11, <#[R31 + 16]> */
		/* 8212B628h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B628h case    6:*/		return 0x8212B62C;
		  /* 8212B62Ch */ case    7:  		/* sth R30, <#[R11]> */
		/* 8212B62Ch case    7:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8212B62Ch case    7:*/		return 0x8212B630;
		  /* 8212B630h */ case    8:  		/* lwz R10, <#[R31 + 28]> */
		/* 8212B630h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8212B630h case    8:*/		return 0x8212B634;
		  /* 8212B634h */ case    9:  		/* b -204 */
		/* 8212B634h case    9:*/		return 0x8212B568;
		/* 8212B634h case    9:*/		return 0x8212B638;
	}
	return 0x8212B638;
} // Block from 8212B610h-8212B638h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212B638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B638);
		  /* 8212B638h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212B638h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212B638h case    0:*/		return 0x8212B63C;
		  /* 8212B63Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8212B63Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212B63Ch case    1:*/		return 0x8212B640;
		  /* 8212B640h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8212B640h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212B65C;  }
		/* 8212B640h case    2:*/		return 0x8212B644;
		  /* 8212B644h */ case    3:  		/* stw R25, <#[R31 + 12]> */
		/* 8212B644h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212B644h case    3:*/		return 0x8212B648;
		  /* 8212B648h */ case    4:  		/* b -5444 */
		/* 8212B648h case    4:*/		return 0x8212A104;
		/* 8212B648h case    4:*/		return 0x8212B64C;
	}
	return 0x8212B64C;
} // Block from 8212B638h-8212B64Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212B64Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B64C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B64C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B64C);
		  /* 8212B64Ch */ case    0:  		/* lis R11, -32255 */
		/* 8212B64Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8212B64Ch case    0:*/		return 0x8212B650;
		  /* 8212B650h */ case    1:  		/* mr R3, R31 */
		/* 8212B650h case    1:*/		regs.R3 = regs.R31;
		/* 8212B650h case    1:*/		return 0x8212B654;
		  /* 8212B654h */ case    2:  		/* addi R4, R11, -9924 */
		/* 8212B654h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD93C);
		/* 8212B654h case    2:*/		return 0x8212B658;
		  /* 8212B658h */ case    3:  		/* bl -62272 */
		/* 8212B658h case    3:*/		regs.LR = 0x8212B65C; return 0x8211C318;
		/* 8212B658h case    3:*/		return 0x8212B65C;
	}
	return 0x8212B65C;
} // Block from 8212B64Ch-8212B65Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212B65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B65C);
		  /* 8212B65Ch */ case    0:  		/* li R3, 1 */
		/* 8212B65Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212B65Ch case    0:*/		return 0x8212B660;
	}
	return 0x8212B660;
} // Block from 8212B65Ch-8212B660h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212B660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B660);
		  /* 8212B660h */ case    0:  		/* addi R1, R1, 192 */
		/* 8212B660h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8212B660h case    0:*/		return 0x8212B664;
		  /* 8212B664h */ case    1:  		/* b -631764 */
		/* 8212B664h case    1:*/		return 0x82091290;
		/* 8212B664h case    1:*/		return 0x8212B668;
	}
	return 0x8212B668;
} // Block from 8212B660h-8212B668h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212B668h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B668);
		  /* 8212B668h */ case    0:  		/* mfspr R12, LR */
		/* 8212B668h case    0:*/		regs.R12 = regs.LR;
		/* 8212B668h case    0:*/		return 0x8212B66C;
		  /* 8212B66Ch */ case    1:  		/* bl -631844 */
		/* 8212B66Ch case    1:*/		regs.LR = 0x8212B670; return 0x82091248;
		/* 8212B66Ch case    1:*/		return 0x8212B670;
		  /* 8212B670h */ case    2:  		/* stwu R1, <#[R1 - 3200]> */
		/* 8212B670h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF380) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF380);
		/* 8212B670h case    2:*/		return 0x8212B674;
		  /* 8212B674h */ case    3:  		/* mr R31, R3 */
		/* 8212B674h case    3:*/		regs.R31 = regs.R3;
		/* 8212B674h case    3:*/		return 0x8212B678;
		  /* 8212B678h */ case    4:  		/* mr R29, R4 */
		/* 8212B678h case    4:*/		regs.R29 = regs.R4;
		/* 8212B678h case    4:*/		return 0x8212B67C;
		  /* 8212B67Ch */ case    5:  		/* li R4, 0 */
		/* 8212B67Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212B67Ch case    5:*/		return 0x8212B680;
		  /* 8212B680h */ case    6:  		/* li R3, 0 */
		/* 8212B680h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212B680h case    6:*/		return 0x8212B684;
		  /* 8212B684h */ case    7:  		/* mr R27, R5 */
		/* 8212B684h case    7:*/		regs.R27 = regs.R5;
		/* 8212B684h case    7:*/		return 0x8212B688;
		  /* 8212B688h */ case    8:  		/* mr R28, R6 */
		/* 8212B688h case    8:*/		regs.R28 = regs.R6;
		/* 8212B688h case    8:*/		return 0x8212B68C;
		  /* 8212B68Ch */ case    9:  		/* mr R26, R7 */
		/* 8212B68Ch case    9:*/		regs.R26 = regs.R7;
		/* 8212B68Ch case    9:*/		return 0x8212B690;
		  /* 8212B690h */ case   10:  		/* bl -591104 */
		/* 8212B690h case   10:*/		regs.LR = 0x8212B694; return 0x8209B190;
		/* 8212B690h case   10:*/		return 0x8212B694;
		  /* 8212B694h */ case   11:  		/* lis R4, 8 */
		/* 8212B694h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x8);
		/* 8212B694h case   11:*/		return 0x8212B698;
		  /* 8212B698h */ case   12:  		/* mr R24, R3 */
		/* 8212B698h case   12:*/		regs.R24 = regs.R3;
		/* 8212B698h case   12:*/		return 0x8212B69C;
		  /* 8212B69Ch */ case   13:  		/* ori R4, R4, 31 */
		/* 8212B69Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1F);
		/* 8212B69Ch case   13:*/		return 0x8212B6A0;
		  /* 8212B6A0h */ case   14:  		/* li R3, -1 */
		/* 8212B6A0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 8212B6A0h case   14:*/		return 0x8212B6A4;
		  /* 8212B6A4h */ case   15:  		/* bl -591124 */
		/* 8212B6A4h case   15:*/		regs.LR = 0x8212B6A8; return 0x8209B190;
		/* 8212B6A4h case   15:*/		return 0x8212B6A8;
		  /* 8212B6A8h */ case   16:  		/* lis R4, 3 */
		/* 8212B6A8h case   16:*/		cpu::op::lis<0>(regs,&regs.R4,0x3);
		/* 8212B6A8h case   16:*/		return 0x8212B6AC;
		  /* 8212B6ACh */ case   17:  		/* li R3, 0 */
		/* 8212B6ACh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212B6ACh case   17:*/		return 0x8212B6B0;
		  /* 8212B6B0h */ case   18:  		/* bl -591136 */
		/* 8212B6B0h case   18:*/		regs.LR = 0x8212B6B4; return 0x8209B190;
		/* 8212B6B0h case   18:*/		return 0x8212B6B4;
		  /* 8212B6B4h */ case   19:  		/* cmplwi CR6, R28, 0 */
		/* 8212B6B4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8212B6B4h case   19:*/		return 0x8212B6B8;
		  /* 8212B6B8h */ case   20:  		/* bc 4, CR6_EQ, 16 */
		/* 8212B6B8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8212B6C8;  }
		/* 8212B6B8h case   20:*/		return 0x8212B6BC;
		  /* 8212B6BCh */ case   21:  		/* lis R29, -30602 */
		/* 8212B6BCh case   21:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8876);
		/* 8212B6BCh case   21:*/		return 0x8212B6C0;
		  /* 8212B6C0h */ case   22:  		/* ori R29, R29, 2156 */
		/* 8212B6C0h case   22:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0x86C);
		/* 8212B6C0h case   22:*/		return 0x8212B6C4;
		  /* 8212B6C4h */ case   23:  		/* b 228 */
		/* 8212B6C4h case   23:*/		return 0x8212B7A8;
		/* 8212B6C4h case   23:*/		return 0x8212B6C8;
	}
	return 0x8212B6C8;
} // Block from 8212B668h-8212B6C8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8212B6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B6C8);
		  /* 8212B6C8h */ case    0:  		/* li R30, 0 */
		/* 8212B6C8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212B6C8h case    0:*/		return 0x8212B6CC;
		  /* 8212B6CCh */ case    1:  		/* li R25, 1 */
		/* 8212B6CCh case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8212B6CCh case    1:*/		return 0x8212B6D0;
		  /* 8212B6D0h */ case    2:  		/* stw R30, <#[R28]> */
		/* 8212B6D0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 8212B6D0h case    2:*/		return 0x8212B6D4;
		  /* 8212B6D4h */ case    3:  		/* li R4, 1 */
		/* 8212B6D4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212B6D4h case    3:*/		return 0x8212B6D8;
		  /* 8212B6D8h */ case    4:  		/* stw R27, <#[R31]> */
		/* 8212B6D8h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000000) );
		/* 8212B6D8h case    4:*/		return 0x8212B6DC;
		  /* 8212B6DCh */ case    5:  		/* mr R3, R29 */
		/* 8212B6DCh case    5:*/		regs.R3 = regs.R29;
		/* 8212B6DCh case    5:*/		return 0x8212B6E0;
		  /* 8212B6E0h */ case    6:  		/* stw R29, <#[R31 + 4]> */
		/* 8212B6E0h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8212B6E0h case    6:*/		return 0x8212B6E4;
		  /* 8212B6E4h */ case    7:  		/* stw R26, <#[R31 + 128]> */
		/* 8212B6E4h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000080) );
		/* 8212B6E4h case    7:*/		return 0x8212B6E8;
		  /* 8212B6E8h */ case    8:  		/* stw R30, <#[R31 + 8]> */
		/* 8212B6E8h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8212B6E8h case    8:*/		return 0x8212B6EC;
		  /* 8212B6ECh */ case    9:  		/* stw R30, <#[R31 + 20]> */
		/* 8212B6ECh case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8212B6ECh case    9:*/		return 0x8212B6F0;
		  /* 8212B6F0h */ case   10:  		/* stw R30, <#[R31 + 24]> */
		/* 8212B6F0h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000018) );
		/* 8212B6F0h case   10:*/		return 0x8212B6F4;
		  /* 8212B6F4h */ case   11:  		/* stw R30, <#[R31 + 32]> */
		/* 8212B6F4h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 8212B6F4h case   11:*/		return 0x8212B6F8;
		  /* 8212B6F8h */ case   12:  		/* stw R30, <#[R31 + 36]> */
		/* 8212B6F8h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000024) );
		/* 8212B6F8h case   12:*/		return 0x8212B6FC;
		  /* 8212B6FCh */ case   13:  		/* stw R30, <#[R31 + 28]> */
		/* 8212B6FCh case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 8212B6FCh case   13:*/		return 0x8212B700;
		  /* 8212B700h */ case   14:  		/* stw R30, <#[R31 + 16]> */
		/* 8212B700h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 8212B700h case   14:*/		return 0x8212B704;
		  /* 8212B704h */ case   15:  		/* stw R30, <#[R31 + 80]> */
		/* 8212B704h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000050) );
		/* 8212B704h case   15:*/		return 0x8212B708;
		  /* 8212B708h */ case   16:  		/* stw R30, <#[R31 + 84]> */
		/* 8212B708h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000054) );
		/* 8212B708h case   16:*/		return 0x8212B70C;
		  /* 8212B70Ch */ case   17:  		/* stw R30, <#[R31 + 88]> */
		/* 8212B70Ch case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000058) );
		/* 8212B70Ch case   17:*/		return 0x8212B710;
		  /* 8212B710h */ case   18:  		/* stw R25, <#[R31 + 92]> */
		/* 8212B710h case   18:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000005C) );
		/* 8212B710h case   18:*/		return 0x8212B714;
		  /* 8212B714h */ case   19:  		/* stw R30, <#[R31 + 96]> */
		/* 8212B714h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000060) );
		/* 8212B714h case   19:*/		return 0x8212B718;
		  /* 8212B718h */ case   20:  		/* stw R30, <#[R31 + 100]> */
		/* 8212B718h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000064) );
		/* 8212B718h case   20:*/		return 0x8212B71C;
		  /* 8212B71Ch */ case   21:  		/* stw R30, <#[R31 + 104]> */
		/* 8212B71Ch case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000068) );
		/* 8212B71Ch case   21:*/		return 0x8212B720;
		  /* 8212B720h */ case   22:  		/* stw R30, <#[R31 + 108]> */
		/* 8212B720h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000006C) );
		/* 8212B720h case   22:*/		return 0x8212B724;
		  /* 8212B724h */ case   23:  		/* stw R30, <#[R31 + 112]> */
		/* 8212B724h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000070) );
		/* 8212B724h case   23:*/		return 0x8212B728;
		  /* 8212B728h */ case   24:  		/* stw R30, <#[R31 + 116]> */
		/* 8212B728h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000074) );
		/* 8212B728h case   24:*/		return 0x8212B72C;
		  /* 8212B72Ch */ case   25:  		/* stw R30, <#[R31 + 120]> */
		/* 8212B72Ch case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000078) );
		/* 8212B72Ch case   25:*/		return 0x8212B730;
		  /* 8212B730h */ case   26:  		/* bl -566656 */
		/* 8212B730h case   26:*/		regs.LR = 0x8212B734; return 0x820A11B0;
		/* 8212B730h case   26:*/		return 0x8212B734;
		  /* 8212B734h */ case   27:  		/* or. R29, R3, R3 */
		/* 8212B734h case   27:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8212B734h case   27:*/		return 0x8212B738;
		  /* 8212B738h */ case   28:  		/* bc 12, CR0_LT, 112 */
		/* 8212B738h case   28:*/		if ( regs.CR[0].lt ) { return 0x8212B7A8;  }
		/* 8212B738h case   28:*/		return 0x8212B73C;
		  /* 8212B73Ch */ case   29:  		/* li R5, 0 */
		/* 8212B73Ch case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212B73Ch case   29:*/		return 0x8212B740;
		  /* 8212B740h */ case   30:  		/* li R4, 0 */
		/* 8212B740h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212B740h case   30:*/		return 0x8212B744;
		  /* 8212B744h */ case   31:  		/* mr R3, R31 */
		/* 8212B744h case   31:*/		regs.R3 = regs.R31;
		/* 8212B744h case   31:*/		return 0x8212B748;
		  /* 8212B748h */ case   32:  		/* bl -72904 */
		/* 8212B748h case   32:*/		regs.LR = 0x8212B74C; return 0x82119A80;
		/* 8212B748h case   32:*/		return 0x8212B74C;
		  /* 8212B74Ch */ case   33:  		/* li R5, 3036 */
		/* 8212B74Ch case   33:*/		cpu::op::li<0>(regs,&regs.R5,0xBDC);
		/* 8212B74Ch case   33:*/		return 0x8212B750;
		  /* 8212B750h */ case   34:  		/* li R4, 0 */
		/* 8212B750h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212B750h case   34:*/		return 0x8212B754;
		  /* 8212B754h */ case   35:  		/* addi R3, R1, 80 */
		/* 8212B754h case   35:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8212B754h case   35:*/		return 0x8212B758;
		  /* 8212B758h */ case   36:  		/* bl -631832 */
		/* 8212B758h case   36:*/		regs.LR = 0x8212B75C; return 0x82091340;
		/* 8212B758h case   36:*/		return 0x8212B75C;
		  /* 8212B75Ch */ case   37:  		/* stw R31, <#[R1 + 3112]> */
		/* 8212B75Ch case   37:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000C28) );
		/* 8212B75Ch case   37:*/		return 0x8212B760;
		  /* 8212B760h */ case   38:  		/* addi R3, R1, 80 */
		/* 8212B760h case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8212B760h case   38:*/		return 0x8212B764;
		  /* 8212B764h */ case   39:  		/* bl -5812 */
		/* 8212B764h case   39:*/		regs.LR = 0x8212B768; return 0x8212A0B0;
		/* 8212B764h case   39:*/		return 0x8212B768;
		  /* 8212B768h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 8212B768h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212B768h case   40:*/		return 0x8212B76C;
		  /* 8212B76Ch */ case   41:  		/* bc 12, CR0_EQ, 8 */
		/* 8212B76Ch case   41:*/		if ( regs.CR[0].eq ) { return 0x8212B774;  }
		/* 8212B76Ch case   41:*/		return 0x8212B770;
		  /* 8212B770h */ case   42:  		/* stw R25, <#[R31 + 80]> */
		/* 8212B770h case   42:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000050) );
		/* 8212B770h case   42:*/		return 0x8212B774;
	}
	return 0x8212B774;
} // Block from 8212B6C8h-8212B774h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8212B774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B774);
		  /* 8212B774h */ case    0:  		/* li R4, 0 */
		/* 8212B774h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212B774h case    0:*/		return 0x8212B778;
		  /* 8212B778h */ case    1:  		/* lwz R3, <#[R31 + 4]> */
		/* 8212B778h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8212B778h case    1:*/		return 0x8212B77C;
		  /* 8212B77Ch */ case    2:  		/* bl -551252 */
		/* 8212B77Ch case    2:*/		regs.LR = 0x8212B780; return 0x820A4E28;
		/* 8212B77Ch case    2:*/		return 0x8212B780;
		  /* 8212B780h */ case    3:  		/* or. R29, R3, R3 */
		/* 8212B780h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8212B780h case    3:*/		return 0x8212B784;
		  /* 8212B784h */ case    4:  		/* bc 12, CR0_LT, 36 */
		/* 8212B784h case    4:*/		if ( regs.CR[0].lt ) { return 0x8212B7A8;  }
		/* 8212B784h case    4:*/		return 0x8212B788;
		  /* 8212B788h */ case    5:  		/* lwz R11, <#[R31 + 80]> */
		/* 8212B788h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8212B788h case    5:*/		return 0x8212B78C;
		  /* 8212B78Ch */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8212B78Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212B78Ch case    6:*/		return 0x8212B790;
		  /* 8212B790h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 8212B790h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8212B7A8;  }
		/* 8212B790h case    7:*/		return 0x8212B794;
		  /* 8212B794h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 8212B794h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212B794h case    8:*/		return 0x8212B798;
		  /* 8212B798h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212B798h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212B798h case    9:*/		return 0x8212B79C;
		  /* 8212B79Ch */ case   10:  		/* stw R11, <#[R28]> */
		/* 8212B79Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8212B79Ch case   10:*/		return 0x8212B7A0;
		  /* 8212B7A0h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 8212B7A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212B7A0h case   11:*/		return 0x8212B7A4;
		  /* 8212B7A4h */ case   12:  		/* stw R30, <#[R11 + 8]> */
		/* 8212B7A4h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8212B7A4h case   12:*/		return 0x8212B7A8;
	}
	return 0x8212B7A8;
} // Block from 8212B774h-8212B7A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212B7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B7A8);
		  /* 8212B7A8h */ case    0:  		/* bl -591024 */
		/* 8212B7A8h case    0:*/		regs.LR = 0x8212B7AC; return 0x8209B2F8;
		/* 8212B7A8h case    0:*/		return 0x8212B7AC;
		  /* 8212B7ACh */ case    1:  		/* lis R4, 11 */
		/* 8212B7ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0xB);
		/* 8212B7ACh case    1:*/		return 0x8212B7B0;
		  /* 8212B7B0h */ case    2:  		/* mr R3, R24 */
		/* 8212B7B0h case    2:*/		regs.R3 = regs.R24;
		/* 8212B7B0h case    2:*/		return 0x8212B7B4;
		  /* 8212B7B4h */ case    3:  		/* ori R4, R4, 31 */
		/* 8212B7B4h case    3:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1F);
		/* 8212B7B4h case    3:*/		return 0x8212B7B8;
		  /* 8212B7B8h */ case    4:  		/* bl -591400 */
		/* 8212B7B8h case    4:*/		regs.LR = 0x8212B7BC; return 0x8209B190;
		/* 8212B7B8h case    4:*/		return 0x8212B7BC;
		  /* 8212B7BCh */ case    5:  		/* cmpwi CR6, R29, 0 */
		/* 8212B7BCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8212B7BCh case    5:*/		return 0x8212B7C0;
		  /* 8212B7C0h */ case    6:  		/* bc 4, CR6_LT, 12 */
		/* 8212B7C0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8212B7CC;  }
		/* 8212B7C0h case    6:*/		return 0x8212B7C4;
		  /* 8212B7C4h */ case    7:  		/* mr R3, R29 */
		/* 8212B7C4h case    7:*/		regs.R3 = regs.R29;
		/* 8212B7C4h case    7:*/		return 0x8212B7C8;
		  /* 8212B7C8h */ case    8:  		/* b 44 */
		/* 8212B7C8h case    8:*/		return 0x8212B7F4;
		/* 8212B7C8h case    8:*/		return 0x8212B7CC;
	}
	return 0x8212B7CC;
} // Block from 8212B7A8h-8212B7CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212B7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B7CC);
		  /* 8212B7CCh */ case    0:  		/* lwz R11, <#[R31 + 80]> */
		/* 8212B7CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8212B7CCh case    0:*/		return 0x8212B7D0;
		  /* 8212B7D0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8212B7D0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212B7D0h case    1:*/		return 0x8212B7D4;
		  /* 8212B7D4h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8212B7D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212B7F0;  }
		/* 8212B7D4h case    2:*/		return 0x8212B7D8;
		  /* 8212B7D8h */ case    3:  		/* lwz R3, <#[R31 + 88]> */
		/* 8212B7D8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 8212B7D8h case    3:*/		return 0x8212B7DC;
		  /* 8212B7DCh */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 8212B7DCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8212B7DCh case    4:*/		return 0x8212B7E0;
		  /* 8212B7E0h */ case    5:  		/* bc 12, CR6_LT, 20 */
		/* 8212B7E0h case    5:*/		if ( regs.CR[6].lt ) { return 0x8212B7F4;  }
		/* 8212B7E0h case    5:*/		return 0x8212B7E4;
		  /* 8212B7E4h */ case    6:  		/* lis R3, -32768 */
		/* 8212B7E4h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212B7E4h case    6:*/		return 0x8212B7E8;
		  /* 8212B7E8h */ case    7:  		/* ori R3, R3, 16389 */
		/* 8212B7E8h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212B7E8h case    7:*/		return 0x8212B7EC;
		  /* 8212B7ECh */ case    8:  		/* b 8 */
		/* 8212B7ECh case    8:*/		return 0x8212B7F4;
		/* 8212B7ECh case    8:*/		return 0x8212B7F0;
	}
	return 0x8212B7F0;
} // Block from 8212B7CCh-8212B7F0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212B7F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B7F0);
		  /* 8212B7F0h */ case    0:  		/* li R3, 0 */
		/* 8212B7F0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212B7F0h case    0:*/		return 0x8212B7F4;
	}
	return 0x8212B7F4;
} // Block from 8212B7F0h-8212B7F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212B7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B7F4);
		  /* 8212B7F4h */ case    0:  		/* addi R1, R1, 3200 */
		/* 8212B7F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC80);
		/* 8212B7F4h case    0:*/		return 0x8212B7F8;
		  /* 8212B7F8h */ case    1:  		/* b -632160 */
		/* 8212B7F8h case    1:*/		return 0x82091298;
		/* 8212B7F8h case    1:*/		return 0x8212B7FC;
		  /* 8212B7FCh */ case    2:  		/* nop */
		/* 8212B7FCh case    2:*/		cpu::op::nop();
		/* 8212B7FCh case    2:*/		return 0x8212B800;
	}
	return 0x8212B800;
} // Block from 8212B7F4h-8212B800h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212B800h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B800);
		  /* 8212B800h */ case    0:  		/* mfspr R12, LR */
		/* 8212B800h case    0:*/		regs.R12 = regs.LR;
		/* 8212B800h case    0:*/		return 0x8212B804;
		  /* 8212B804h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212B804h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212B804h case    1:*/		return 0x8212B808;
		  /* 8212B808h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8212B808h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212B808h case    2:*/		return 0x8212B80C;
		  /* 8212B80Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8212B80Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212B80Ch case    3:*/		return 0x8212B810;
		  /* 8212B810h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8212B810h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8212B810h case    4:*/		return 0x8212B814;
		  /* 8212B814h */ case    5:  		/* mr R30, R4 */
		/* 8212B814h case    5:*/		regs.R30 = regs.R4;
		/* 8212B814h case    5:*/		return 0x8212B818;
		  /* 8212B818h */ case    6:  		/* mr R4, R5 */
		/* 8212B818h case    6:*/		regs.R4 = regs.R5;
		/* 8212B818h case    6:*/		return 0x8212B81C;
		  /* 8212B81Ch */ case    7:  		/* mr R31, R3 */
		/* 8212B81Ch case    7:*/		regs.R31 = regs.R3;
		/* 8212B81Ch case    7:*/		return 0x8212B820;
		  /* 8212B820h */ case    8:  		/* bl -252944 */
		/* 8212B820h case    8:*/		regs.LR = 0x8212B824; return 0x820EDC10;
		/* 8212B820h case    8:*/		return 0x8212B824;
		  /* 8212B824h */ case    9:  		/* lis R11, -32253 */
		/* 8212B824h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212B824h case    9:*/		return 0x8212B828;
		  /* 8212B828h */ case   10:  		/* lis R10, -32217 */
		/* 8212B828h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8212B828h case   10:*/		return 0x8212B82C;
		  /* 8212B82Ch */ case   11:  		/* stw R30, <#[R31 + 348]> */
		/* 8212B82Ch case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000015C) );
		/* 8212B82Ch case   11:*/		return 0x8212B830;
		  /* 8212B830h */ case   12:  		/* addi R11, R11, 15400 */
		/* 8212B830h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3C28);
		/* 8212B830h case   12:*/		return 0x8212B834;
		  /* 8212B834h */ case   13:  		/* lis R9, -32217 */
		/* 8212B834h case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 8212B834h case   13:*/		return 0x8212B838;
		  /* 8212B838h */ case   14:  		/* stw R11, <#[R31]> */
		/* 8212B838h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212B838h case   14:*/		return 0x8212B83C;
		  /* 8212B83Ch */ case   15:  		/* addi R10, R10, 15224 */
		/* 8212B83Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3B78);
		/* 8212B83Ch case   15:*/		return 0x8212B840;
		  /* 8212B840h */ case   16:  		/* addi R9, R9, 15512 */
		/* 8212B840h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x3C98);
		/* 8212B840h case   16:*/		return 0x8212B844;
		  /* 8212B844h */ case   17:  		/* li R11, 0 */
		/* 8212B844h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212B844h case   17:*/		return 0x8212B848;
		  /* 8212B848h */ case   18:  		/* stw R10, <#[R31 + 248]> */
		/* 8212B848h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000F8) );
		/* 8212B848h case   18:*/		return 0x8212B84C;
		  /* 8212B84Ch */ case   19:  		/* stw R9, <#[R31 + 252]> */
		/* 8212B84Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000000FC) );
		/* 8212B84Ch case   19:*/		return 0x8212B850;
		  /* 8212B850h */ case   20:  		/* mr R3, R31 */
		/* 8212B850h case   20:*/		regs.R3 = regs.R31;
		/* 8212B850h case   20:*/		return 0x8212B854;
		  /* 8212B854h */ case   21:  		/* stw R11, <#[R31 + 556]> */
		/* 8212B854h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000022C) );
		/* 8212B854h case   21:*/		return 0x8212B858;
		  /* 8212B858h */ case   22:  		/* addi R1, R1, 112 */
		/* 8212B858h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8212B858h case   22:*/		return 0x8212B85C;
		  /* 8212B85Ch */ case   23:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212B85Ch case   23:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212B85Ch case   23:*/		return 0x8212B860;
		  /* 8212B860h */ case   24:  		/* mtspr LR, R12 */
		/* 8212B860h case   24:*/		regs.LR = regs.R12;
		/* 8212B860h case   24:*/		return 0x8212B864;
		  /* 8212B864h */ case   25:  		/* ld R30, <#[R1 - 24]> */
		/* 8212B864h case   25:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212B864h case   25:*/		return 0x8212B868;
		  /* 8212B868h */ case   26:  		/* ld R31, <#[R1 - 16]> */
		/* 8212B868h case   26:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212B868h case   26:*/		return 0x8212B86C;
		  /* 8212B86Ch */ case   27:  		/* bclr 20, CR0_LT */
		/* 8212B86Ch case   27:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212B86Ch case   27:*/		return 0x8212B870;
	}
	return 0x8212B870;
} // Block from 8212B800h-8212B870h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8212B870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B870);
		  /* 8212B870h */ case    0:  		/* mfspr R12, LR */
		/* 8212B870h case    0:*/		regs.R12 = regs.LR;
		/* 8212B870h case    0:*/		return 0x8212B874;
		  /* 8212B874h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212B874h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212B874h case    1:*/		return 0x8212B878;
		  /* 8212B878h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8212B878h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212B878h case    2:*/		return 0x8212B87C;
		  /* 8212B87Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8212B87Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212B87Ch case    3:*/		return 0x8212B880;
		  /* 8212B880h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8212B880h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8212B880h case    4:*/		return 0x8212B884;
		  /* 8212B884h */ case    5:  		/* mr R31, R3 */
		/* 8212B884h case    5:*/		regs.R31 = regs.R3;
		/* 8212B884h case    5:*/		return 0x8212B888;
		  /* 8212B888h */ case    6:  		/* mr R30, R4 */
		/* 8212B888h case    6:*/		regs.R30 = regs.R4;
		/* 8212B888h case    6:*/		return 0x8212B88C;
		  /* 8212B88Ch */ case    7:  		/* addi R3, R3, 508 */
		/* 8212B88Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1FC);
		/* 8212B88Ch case    7:*/		return 0x8212B890;
		  /* 8212B890h */ case    8:  		/* li R5, 32 */
		/* 8212B890h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8212B890h case    8:*/		return 0x8212B894;
		  /* 8212B894h */ case    9:  		/* li R4, 0 */
		/* 8212B894h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212B894h case    9:*/		return 0x8212B898;
		  /* 8212B898h */ case   10:  		/* bl -632152 */
		/* 8212B898h case   10:*/		regs.LR = 0x8212B89C; return 0x82091340;
		/* 8212B898h case   10:*/		return 0x8212B89C;
		  /* 8212B89Ch */ case   11:  		/* li R11, 0 */
		/* 8212B89Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212B89Ch case   11:*/		return 0x8212B8A0;
		  /* 8212B8A0h */ case   12:  		/* mr R4, R30 */
		/* 8212B8A0h case   12:*/		regs.R4 = regs.R30;
		/* 8212B8A0h case   12:*/		return 0x8212B8A4;
		  /* 8212B8A4h */ case   13:  		/* stw R11, <#[R31 + 540]> */
		/* 8212B8A4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000021C) );
		/* 8212B8A4h case   13:*/		return 0x8212B8A8;
		  /* 8212B8A8h */ case   14:  		/* mr R3, R31 */
		/* 8212B8A8h case   14:*/		regs.R3 = regs.R31;
		/* 8212B8A8h case   14:*/		return 0x8212B8AC;
		  /* 8212B8ACh */ case   15:  		/* stw R11, <#[R31 + 544]> */
		/* 8212B8ACh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000220) );
		/* 8212B8ACh case   15:*/		return 0x8212B8B0;
		  /* 8212B8B0h */ case   16:  		/* bl -224392 */
		/* 8212B8B0h case   16:*/		regs.LR = 0x8212B8B4; return 0x820F4C28;
		/* 8212B8B0h case   16:*/		return 0x8212B8B4;
		  /* 8212B8B4h */ case   17:  		/* addi R1, R1, 112 */
		/* 8212B8B4h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8212B8B4h case   17:*/		return 0x8212B8B8;
		  /* 8212B8B8h */ case   18:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212B8B8h case   18:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212B8B8h case   18:*/		return 0x8212B8BC;
		  /* 8212B8BCh */ case   19:  		/* mtspr LR, R12 */
		/* 8212B8BCh case   19:*/		regs.LR = regs.R12;
		/* 8212B8BCh case   19:*/		return 0x8212B8C0;
		  /* 8212B8C0h */ case   20:  		/* ld R30, <#[R1 - 24]> */
		/* 8212B8C0h case   20:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212B8C0h case   20:*/		return 0x8212B8C4;
		  /* 8212B8C4h */ case   21:  		/* ld R31, <#[R1 - 16]> */
		/* 8212B8C4h case   21:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212B8C4h case   21:*/		return 0x8212B8C8;
		  /* 8212B8C8h */ case   22:  		/* bclr 20, CR0_LT */
		/* 8212B8C8h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212B8C8h case   22:*/		return 0x8212B8CC;
	}
	return 0x8212B8CC;
} // Block from 8212B870h-8212B8CCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212B8CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B8CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B8CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B8CC);
		  /* 8212B8CCh */ case    0:  		/* nop */
		/* 8212B8CCh case    0:*/		cpu::op::nop();
		/* 8212B8CCh case    0:*/		return 0x8212B8D0;
	}
	return 0x8212B8D0;
} // Block from 8212B8CCh-8212B8D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212B8D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B8D0);
		  /* 8212B8D0h */ case    0:  		/* mfspr R12, LR */
		/* 8212B8D0h case    0:*/		regs.R12 = regs.LR;
		/* 8212B8D0h case    0:*/		return 0x8212B8D4;
		  /* 8212B8D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212B8D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212B8D4h case    1:*/		return 0x8212B8D8;
		  /* 8212B8D8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8212B8D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8212B8D8h case    2:*/		return 0x8212B8DC;
		  /* 8212B8DCh */ case    3:  		/* lwz R6, <#[R3 + 200]> */
		/* 8212B8DCh case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x000000C8) );
		/* 8212B8DCh case    3:*/		return 0x8212B8E0;
		  /* 8212B8E0h */ case    4:  		/* lis R10, -1 */
		/* 8212B8E0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8212B8E0h case    4:*/		return 0x8212B8E4;
		  /* 8212B8E4h */ case    5:  		/* li R8, 32 */
		/* 8212B8E4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x20);
		/* 8212B8E4h case    5:*/		return 0x8212B8E8;
		  /* 8212B8E8h */ case    6:  		/* ori R9, R10, 512 */
		/* 8212B8E8h case    6:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8212B8E8h case    6:*/		return 0x8212B8EC;
		  /* 8212B8ECh */ case    7:  		/* mr R11, R3 */
		/* 8212B8ECh case    7:*/		regs.R11 = regs.R3;
		/* 8212B8ECh case    7:*/		return 0x8212B8F0;
		  /* 8212B8F0h */ case    8:  		/* stw R8, <#[R3 + 56]> */
		/* 8212B8F0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000038) );
		/* 8212B8F0h case    8:*/		return 0x8212B8F4;
		  /* 8212B8F4h */ case    9:  		/* li R7, 1 */
		/* 8212B8F4h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8212B8F4h case    9:*/		return 0x8212B8F8;
		  /* 8212B8F8h */ case   10:  		/* subf. R10, R9, R6 */
		/* 8212B8F8h case   10:*/		cpu::op::subf<1>(regs,&regs.R10,regs.R9,regs.R6);
		/* 8212B8F8h case   10:*/		return 0x8212B8FC;
		  /* 8212B8FCh */ case   11:  		/* stw R6, <#[R3 + 268]> */
		/* 8212B8FCh case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x0000010C) );
		/* 8212B8FCh case   11:*/		return 0x8212B900;
		  /* 8212B900h */ case   12:  		/* bc 12, CR0_EQ, 204 */
		/* 8212B900h case   12:*/		if ( regs.CR[0].eq ) { return 0x8212B9CC;  }
		/* 8212B900h case   12:*/		return 0x8212B904;
		  /* 8212B904h */ case   13:  		/* cmplwi CR6, R10, 2 */
		/* 8212B904h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 8212B904h case   13:*/		return 0x8212B908;
		  /* 8212B908h */ case   14:  		/* bc 12, CR6_EQ, 140 */
		/* 8212B908h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212B994;  }
		/* 8212B908h case   14:*/		return 0x8212B90C;
		  /* 8212B90Ch */ case   15:  		/* cmplwi CR6, R10, 3 */
		/* 8212B90Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8212B90Ch case   15:*/		return 0x8212B910;
		  /* 8212B910h */ case   16:  		/* bc 12, CR6_EQ, 96 */
		/* 8212B910h case   16:*/		if ( regs.CR[6].eq ) { return 0x8212B970;  }
		/* 8212B910h case   16:*/		return 0x8212B914;
		  /* 8212B914h */ case   17:  		/* cmplwi CR6, R10, 100 */
		/* 8212B914h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000064);
		/* 8212B914h case   17:*/		return 0x8212B918;
		  /* 8212B918h */ case   18:  		/* bc 12, CR6_EQ, 96 */
		/* 8212B918h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212B978;  }
		/* 8212B918h case   18:*/		return 0x8212B91C;
		  /* 8212B91Ch */ case   19:  		/* cmplwi CR6, R10, 255 */
		/* 8212B91Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x000000FF);
		/* 8212B91Ch case   19:*/		return 0x8212B920;
		  /* 8212B920h */ case   20:  		/* bc 12, CR6_EQ, 36 */
		/* 8212B920h case   20:*/		if ( regs.CR[6].eq ) { return 0x8212B944;  }
		/* 8212B920h case   20:*/		return 0x8212B924;
		  /* 8212B924h */ case   21:  		/* lis R10, -32253 */
		/* 8212B924h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212B924h case   21:*/		return 0x8212B928;
		  /* 8212B928h */ case   22:  		/* li R5, 0 */
		/* 8212B928h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212B928h case   22:*/		return 0x8212B92C;
		  /* 8212B92Ch */ case   23:  		/* addi R6, R10, 15776 */
		/* 8212B92Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x3DA0);
		/* 8212B92Ch case   23:*/		return 0x8212B930;
		  /* 8212B930h */ case   24:  		/* li R4, 0 */
		/* 8212B930h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212B930h case   24:*/		return 0x8212B934;
		  /* 8212B934h */ case   25:  		/* bl -119300 */
		/* 8212B934h case   25:*/		regs.LR = 0x8212B938; return 0x8210E730;
		/* 8212B934h case   25:*/		return 0x8212B938;
		  /* 8212B938h */ case   26:  		/* lis R3, -32768 */
		/* 8212B938h case   26:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212B938h case   26:*/		return 0x8212B93C;
		  /* 8212B93Ch */ case   27:  		/* ori R3, R3, 16389 */
		/* 8212B93Ch case   27:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212B93Ch case   27:*/		return 0x8212B940;
		  /* 8212B940h */ case   28:  		/* b 240 */
		/* 8212B940h case   28:*/		return 0x8212BA30;
		/* 8212B940h case   28:*/		return 0x8212B944;
	}
	return 0x8212B944;
} // Block from 8212B8D0h-8212B944h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212B944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B944);
		  /* 8212B944h */ case    0:  		/* lwz R10, <#[R11 + 108]> */
		/* 8212B944h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B944h case    0:*/		return 0x8212B948;
		  /* 8212B948h */ case    1:  		/* li R9, 2048 */
		/* 8212B948h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x800);
		/* 8212B948h case    1:*/		return 0x8212B94C;
		  /* 8212B94Ch */ case    2:  		/* lwz R6, <#[R11 + 112]> */
		/* 8212B94Ch case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000070) );
		/* 8212B94Ch case    2:*/		return 0x8212B950;
		  /* 8212B950h */ case    3:  		/* oris R10, R10, 64 */
		/* 8212B950h case    3:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 8212B950h case    3:*/		return 0x8212B954;
		  /* 8212B954h */ case    4:  		/* stw R8, <#[R11 + 44]> */
		/* 8212B954h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000002C) );
		/* 8212B954h case    4:*/		return 0x8212B958;
		  /* 8212B958h */ case    5:  		/* rlwimi R6, R7, 26, 5, 6 */
		/* 8212B958h case    5:*/		cpu::op::rlwimi<0,26,5,6>(regs,&regs.R6,regs.R7);
		/* 8212B958h case    5:*/		return 0x8212B95C;
		  /* 8212B95Ch */ case    6:  		/* stw R9, <#[R11 + 96]> */
		/* 8212B95Ch case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000060) );
		/* 8212B95Ch case    6:*/		return 0x8212B960;
		  /* 8212B960h */ case    7:  		/* ori R10, R10, 1 */
		/* 8212B960h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212B960h case    7:*/		return 0x8212B964;
		  /* 8212B964h */ case    8:  		/* stw R6, <#[R11 + 112]> */
		/* 8212B964h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000070) );
		/* 8212B964h case    8:*/		return 0x8212B968;
		  /* 8212B968h */ case    9:  		/* stw R10, <#[R11 + 108]> */
		/* 8212B968h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B968h case    9:*/		return 0x8212B96C;
		  /* 8212B96Ch */ case   10:  		/* b 132 */
		/* 8212B96Ch case   10:*/		return 0x8212B9F0;
		/* 8212B96Ch case   10:*/		return 0x8212B970;
	}
	return 0x8212B970;
} // Block from 8212B944h-8212B970h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212B970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B970);
		  /* 8212B970h */ case    0:  		/* lis R9, -1 */
		/* 8212B970h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8212B970h case    0:*/		return 0x8212B974;
		  /* 8212B974h */ case    1:  		/* ori R9, R9, 513 */
		/* 8212B974h case    1:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x201);
		/* 8212B974h case    1:*/		return 0x8212B978;
	}
	return 0x8212B978;
} // Block from 8212B970h-8212B978h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212B978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B978);
		  /* 8212B978h */ case    0:  		/* lwz R6, <#[R11 + 108]> */
		/* 8212B978h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B978h case    0:*/		return 0x8212B97C;
		  /* 8212B97Ch */ case    1:  		/* stw R8, <#[R11 + 44]> */
		/* 8212B97Ch case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000002C) );
		/* 8212B97Ch case    1:*/		return 0x8212B980;
		  /* 8212B980h */ case    2:  		/* oris R8, R6, 8256 */
		/* 8212B980h case    2:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R6,0x2040);
		/* 8212B980h case    2:*/		return 0x8212B984;
		  /* 8212B984h */ case    3:  		/* stw R9, <#[R11 + 200]> */
		/* 8212B984h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000000C8) );
		/* 8212B984h case    3:*/		return 0x8212B988;
		  /* 8212B988h */ case    4:  		/* ori R8, R8, 16 */
		/* 8212B988h case    4:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x10);
		/* 8212B988h case    4:*/		return 0x8212B98C;
		  /* 8212B98Ch */ case    5:  		/* stw R8, <#[R11 + 108]> */
		/* 8212B98Ch case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B98Ch case    5:*/		return 0x8212B990;
		  /* 8212B990h */ case    6:  		/* b 84 */
		/* 8212B990h case    6:*/		return 0x8212B9E4;
		/* 8212B990h case    6:*/		return 0x8212B994;
	}
	return 0x8212B994;
} // Block from 8212B978h-8212B994h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212B994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B994);
		  /* 8212B994h */ case    0:  		/* lwz R8, <#[R11 + 108]> */
		/* 8212B994h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B994h case    0:*/		return 0x8212B998;
		  /* 8212B998h */ case    1:  		/* li R9, 17 */
		/* 8212B998h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x11);
		/* 8212B998h case    1:*/		return 0x8212B99C;
		  /* 8212B99Ch */ case    2:  		/* lwz R10, <#[R11 + 112]> */
		/* 8212B99Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 8212B99Ch case    2:*/		return 0x8212B9A0;
		  /* 8212B9A0h */ case    3:  		/* lis R6, -1 */
		/* 8212B9A0h case    3:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 8212B9A0h case    3:*/		return 0x8212B9A4;
		  /* 8212B9A4h */ case    4:  		/* oris R8, R8, 64 */
		/* 8212B9A4h case    4:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x40);
		/* 8212B9A4h case    4:*/		return 0x8212B9A8;
		  /* 8212B9A8h */ case    5:  		/* rlwimi R10, R9, 26, 5, 6 */
		/* 8212B9A8h case    5:*/		cpu::op::rlwimi<0,26,5,6>(regs,&regs.R10,regs.R9);
		/* 8212B9A8h case    5:*/		return 0x8212B9AC;
		  /* 8212B9ACh */ case    6:  		/* li R5, 22 */
		/* 8212B9ACh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 8212B9ACh case    6:*/		return 0x8212B9B0;
		  /* 8212B9B0h */ case    7:  		/* ori R6, R6, 513 */
		/* 8212B9B0h case    7:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x201);
		/* 8212B9B0h case    7:*/		return 0x8212B9B4;
		  /* 8212B9B4h */ case    8:  		/* ori R8, R8, 9 */
		/* 8212B9B4h case    8:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x9);
		/* 8212B9B4h case    8:*/		return 0x8212B9B8;
		  /* 8212B9B8h */ case    9:  		/* stw R5, <#[R11 + 44]> */
		/* 8212B9B8h case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x0000002C) );
		/* 8212B9B8h case    9:*/		return 0x8212B9BC;
		  /* 8212B9BCh */ case   10:  		/* rlwimi R10, R9, 26, 1, 1 */
		/* 8212B9BCh case   10:*/		cpu::op::rlwimi<0,26,1,1>(regs,&regs.R10,regs.R9);
		/* 8212B9BCh case   10:*/		return 0x8212B9C0;
		  /* 8212B9C0h */ case   11:  		/* stw R6, <#[R11 + 200]> */
		/* 8212B9C0h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x000000C8) );
		/* 8212B9C0h case   11:*/		return 0x8212B9C4;
		  /* 8212B9C4h */ case   12:  		/* stw R8, <#[R11 + 108]> */
		/* 8212B9C4h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B9C4h case   12:*/		return 0x8212B9C8;
		  /* 8212B9C8h */ case   13:  		/* b 36 */
		/* 8212B9C8h case   13:*/		return 0x8212B9EC;
		/* 8212B9C8h case   13:*/		return 0x8212B9CC;
	}
	return 0x8212B9CC;
} // Block from 8212B994h-8212B9CCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212B9CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B9CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B9CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B9CC);
		  /* 8212B9CCh */ case    0:  		/* li R9, 12 */
		/* 8212B9CCh case    0:*/		cpu::op::li<0>(regs,&regs.R9,0xC);
		/* 8212B9CCh case    0:*/		return 0x8212B9D0;
		  /* 8212B9D0h */ case    1:  		/* lwz R8, <#[R11 + 108]> */
		/* 8212B9D0h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B9D0h case    1:*/		return 0x8212B9D4;
		  /* 8212B9D4h */ case    2:  		/* stw R9, <#[R11 + 44]> */
		/* 8212B9D4h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 8212B9D4h case    2:*/		return 0x8212B9D8;
		  /* 8212B9D8h */ case    3:  		/* oris R9, R8, 8256 */
		/* 8212B9D8h case    3:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x2040);
		/* 8212B9D8h case    3:*/		return 0x8212B9DC;
		  /* 8212B9DCh */ case    4:  		/* ori R9, R9, 16 */
		/* 8212B9DCh case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x10);
		/* 8212B9DCh case    4:*/		return 0x8212B9E0;
		  /* 8212B9E0h */ case    5:  		/* stw R9, <#[R11 + 108]> */
		/* 8212B9E0h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B9E0h case    5:*/		return 0x8212B9E4;
	}
	return 0x8212B9E4;
} // Block from 8212B9CCh-8212B9E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212B9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B9E4);
		  /* 8212B9E4h */ case    0:  		/* lwz R10, <#[R11 + 112]> */
		/* 8212B9E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 8212B9E4h case    0:*/		return 0x8212B9E8;
		  /* 8212B9E8h */ case    1:  		/* oris R10, R10, 10240 */
		/* 8212B9E8h case    1:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x2800);
		/* 8212B9E8h case    1:*/		return 0x8212B9EC;
	}
	return 0x8212B9EC;
} // Block from 8212B9E4h-8212B9ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212B9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B9EC);
		  /* 8212B9ECh */ case    0:  		/* stw R10, <#[R11 + 112]> */
		/* 8212B9ECh case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 8212B9ECh case    0:*/		return 0x8212B9F0;
	}
	return 0x8212B9F0;
} // Block from 8212B9ECh-8212B9F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212B9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212B9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212B9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212B9F0);
		  /* 8212B9F0h */ case    0:  		/* lwz R10, <#[R11 + 108]> */
		/* 8212B9F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212B9F0h case    0:*/		return 0x8212B9F4;
		  /* 8212B9F4h */ case    1:  		/* li R9, 2 */
		/* 8212B9F4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8212B9F4h case    1:*/		return 0x8212B9F8;
		  /* 8212B9F8h */ case    2:  		/* lwz R8, <#[R11 + 44]> */
		/* 8212B9F8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000002C) );
		/* 8212B9F8h case    2:*/		return 0x8212B9FC;
		  /* 8212B9FCh */ case    3:  		/* li R6, 10 */
		/* 8212B9FCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8212B9FCh case    3:*/		return 0x8212BA00;
		  /* 8212BA00h */ case    4:  		/* oris R10, R10, 17024 */
		/* 8212BA00h case    4:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x4280);
		/* 8212BA00h case    4:*/		return 0x8212BA04;
		  /* 8212BA04h */ case    5:  		/* stw R9, <#[R11 + 40]> */
		/* 8212BA04h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 8212BA04h case    5:*/		return 0x8212BA08;
		  /* 8212BA08h */ case    6:  		/* li R5, 4 */
		/* 8212BA08h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212BA08h case    6:*/		return 0x8212BA0C;
		  /* 8212BA0Ch */ case    7:  		/* stw R6, <#[R11 + 68]> */
		/* 8212BA0Ch case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000044) );
		/* 8212BA0Ch case    7:*/		return 0x8212BA10;
		  /* 8212BA10h */ case    8:  		/* li R9, 16 */
		/* 8212BA10h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x10);
		/* 8212BA10h case    8:*/		return 0x8212BA14;
		  /* 8212BA14h */ case    9:  		/* stw R7, <#[R11 + 100]> */
		/* 8212BA14h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000064) );
		/* 8212BA14h case    9:*/		return 0x8212BA18;
		  /* 8212BA18h */ case   10:  		/* ori R10, R10, 512 */
		/* 8212BA18h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x200);
		/* 8212BA18h case   10:*/		return 0x8212BA1C;
		  /* 8212BA1Ch */ case   11:  		/* stw R5, <#[R11 + 72]> */
		/* 8212BA1Ch case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000048) );
		/* 8212BA1Ch case   11:*/		return 0x8212BA20;
		  /* 8212BA20h */ case   12:  		/* stw R9, <#[R11 + 76]> */
		/* 8212BA20h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 8212BA20h case   12:*/		return 0x8212BA24;
		  /* 8212BA24h */ case   13:  		/* li R3, 0 */
		/* 8212BA24h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212BA24h case   13:*/		return 0x8212BA28;
		  /* 8212BA28h */ case   14:  		/* stw R10, <#[R11 + 108]> */
		/* 8212BA28h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212BA28h case   14:*/		return 0x8212BA2C;
		  /* 8212BA2Ch */ case   15:  		/* stw R8, <#[R11 + 468]> */
		/* 8212BA2Ch case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x000001D4) );
		/* 8212BA2Ch case   15:*/		return 0x8212BA30;
	}
	return 0x8212BA30;
} // Block from 8212B9F0h-8212BA30h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212BA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BA30);
		  /* 8212BA30h */ case    0:  		/* addi R1, R1, 96 */
		/* 8212BA30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8212BA30h case    0:*/		return 0x8212BA34;
		  /* 8212BA34h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212BA34h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212BA34h case    1:*/		return 0x8212BA38;
		  /* 8212BA38h */ case    2:  		/* mtspr LR, R12 */
		/* 8212BA38h case    2:*/		regs.LR = regs.R12;
		/* 8212BA38h case    2:*/		return 0x8212BA3C;
		  /* 8212BA3Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8212BA3Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212BA3Ch case    3:*/		return 0x8212BA40;
	}
	return 0x8212BA40;
} // Block from 8212BA30h-8212BA40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212BA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BA40);
		  /* 8212BA40h */ case    0:  		/* mfspr R12, LR */
		/* 8212BA40h case    0:*/		regs.R12 = regs.LR;
		/* 8212BA40h case    0:*/		return 0x8212BA44;
		  /* 8212BA44h */ case    1:  		/* bl -632828 */
		/* 8212BA44h case    1:*/		regs.LR = 0x8212BA48; return 0x82091248;
		/* 8212BA44h case    1:*/		return 0x8212BA48;
		  /* 8212BA48h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8212BA48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8212BA48h case    2:*/		return 0x8212BA4C;
		  /* 8212BA4Ch */ case    3:  		/* lwz R11, <#[R3 + 204]> */
		/* 8212BA4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CC) );
		/* 8212BA4Ch case    3:*/		return 0x8212BA50;
		  /* 8212BA50h */ case    4:  		/* mr R31, R3 */
		/* 8212BA50h case    4:*/		regs.R31 = regs.R3;
		/* 8212BA50h case    4:*/		return 0x8212BA54;
		  /* 8212BA54h */ case    5:  		/* li R30, 0 */
		/* 8212BA54h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212BA54h case    5:*/		return 0x8212BA58;
		  /* 8212BA58h */ case    6:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8212BA58h case    6:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8212BA58h case    6:*/		return 0x8212BA5C;
		  /* 8212BA5Ch */ case    7:  		/* bc 12, CR0_EQ, 100 */
		/* 8212BA5Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8212BAC0;  }
		/* 8212BA5Ch case    7:*/		return 0x8212BA60;
		  /* 8212BA60h */ case    8:  		/* bl -173280 */
		/* 8212BA60h case    8:*/		regs.LR = 0x8212BA64; return 0x82101580;
		/* 8212BA60h case    8:*/		return 0x8212BA64;
		  /* 8212BA64h */ case    9:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BA64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BA64h case    9:*/		return 0x8212BA68;
		  /* 8212BA68h */ case   10:  		/* li R29, 0 */
		/* 8212BA68h case   10:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BA68h case   10:*/		return 0x8212BA6C;
		  /* 8212BA6Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8212BA6Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BA6Ch case   11:*/		return 0x8212BA70;
		  /* 8212BA70h */ case   12:  		/* bc 4, CR6_GT, 72 */
		/* 8212BA70h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8212BAB8;  }
		/* 8212BA70h case   12:*/		return 0x8212BA74;
		  /* 8212BA74h */ case   13:  		/* li R28, 0 */
		/* 8212BA74h case   13:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BA74h case   13:*/		return 0x8212BA78;
		  /* 8212BA78h */ case   14:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BA78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BA78h case   14:*/		return 0x8212BA7C;
		  /* 8212BA7Ch */ case   15:  		/* lis R10, 4096 */
		/* 8212BA7Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8212BA7Ch case   15:*/		return 0x8212BA80;
		  /* 8212BA80h */ case   16:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BA80h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BA80h case   16:*/		return 0x8212BA84;
		  /* 8212BA84h */ case   17:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BA84h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BA84h case   17:*/		return 0x8212BA88;
		  /* 8212BA88h */ case   18:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BA88h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BA88h case   18:*/		return 0x8212BA8C;
		  /* 8212BA8Ch */ case   19:  		/* lwz R11, <#[R11]> */
		/* 8212BA8Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BA8Ch case   19:*/		return 0x8212BA90;
		  /* 8212BA90h */ case   20:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BA90h case   20:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BA90h case   20:*/		return 0x8212BA94;
		  /* 8212BA94h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8212BA94h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BA94h case   21:*/		return 0x8212BA98;
		  /* 8212BA98h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 8212BA98h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8212BAA4;  }
		/* 8212BA98h case   22:*/		return 0x8212BA9C;
		  /* 8212BA9Ch */ case   23:  		/* mr R3, R31 */
		/* 8212BA9Ch case   23:*/		regs.R3 = regs.R31;
		/* 8212BA9Ch case   23:*/		return 0x8212BAA0;
		  /* 8212BAA0h */ case   24:  		/* bl -287368 */
		/* 8212BAA0h case   24:*/		regs.LR = 0x8212BAA4; return 0x820E5818;
		/* 8212BAA0h case   24:*/		return 0x8212BAA4;
	}
	return 0x8212BAA4;
} // Block from 8212BA40h-8212BAA4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8212BAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BAA4);
		  /* 8212BAA4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BAA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BAA4h case    0:*/		return 0x8212BAA8;
		  /* 8212BAA8h */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BAA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BAA8h case    1:*/		return 0x8212BAAC;
		  /* 8212BAACh */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BAACh case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BAACh case    2:*/		return 0x8212BAB0;
		  /* 8212BAB0h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BAB0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BAB0h case    3:*/		return 0x8212BAB4;
		  /* 8212BAB4h */ case    4:  		/* bc 12, CR6_LT, -60 */
		/* 8212BAB4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BA78;  }
		/* 8212BAB4h case    4:*/		return 0x8212BAB8;
	}
	return 0x8212BAB8;
} // Block from 8212BAA4h-8212BAB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BAB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BAB8);
		  /* 8212BAB8h */ case    0:  		/* mr R3, R31 */
		/* 8212BAB8h case    0:*/		regs.R3 = regs.R31;
		/* 8212BAB8h case    0:*/		return 0x8212BABC;
		  /* 8212BABCh */ case    1:  		/* bl -153244 */
		/* 8212BABCh case    1:*/		regs.LR = 0x8212BAC0; return 0x82106420;
		/* 8212BABCh case    1:*/		return 0x8212BAC0;
	}
	return 0x8212BAC0;
} // Block from 8212BAB8h-8212BAC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212BAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BAC0);
		  /* 8212BAC0h */ case    0:  		/* lwz R11, <#[R31 + 204]> */
		/* 8212BAC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 8212BAC0h case    0:*/		return 0x8212BAC4;
		  /* 8212BAC4h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8212BAC4h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8212BAC4h case    1:*/		return 0x8212BAC8;
		  /* 8212BAC8h */ case    2:  		/* bc 4, CR0_EQ, 1124 */
		/* 8212BAC8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8212BF2C;  }
		/* 8212BAC8h case    2:*/		return 0x8212BACC;
		  /* 8212BACCh */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BACCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BACCh case    3:*/		return 0x8212BAD0;
		  /* 8212BAD0h */ case    4:  		/* lis R27, 8192 */
		/* 8212BAD0h case    4:*/		cpu::op::lis<0>(regs,&regs.R27,0x2000);
		/* 8212BAD0h case    4:*/		return 0x8212BAD4;
		  /* 8212BAD4h */ case    5:  		/* lis R25, 12288 */
		/* 8212BAD4h case    5:*/		cpu::op::lis<0>(regs,&regs.R25,0x3000);
		/* 8212BAD4h case    5:*/		return 0x8212BAD8;
		  /* 8212BAD8h */ case    6:  		/* li R29, 0 */
		/* 8212BAD8h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BAD8h case    6:*/		return 0x8212BADC;
		  /* 8212BADCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8212BADCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BADCh case    7:*/		return 0x8212BAE0;
		  /* 8212BAE0h */ case    8:  		/* bc 4, CR6_GT, 148 */
		/* 8212BAE0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8212BB74;  }
		/* 8212BAE0h case    8:*/		return 0x8212BAE4;
		  /* 8212BAE4h */ case    9:  		/* li R28, 0 */
		/* 8212BAE4h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BAE4h case    9:*/		return 0x8212BAE8;
		  /* 8212BAE8h */ case   10:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BAE8h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BAE8h case   10:*/		return 0x8212BAEC;
		  /* 8212BAECh */ case   11:  		/* lis R10, 4112 */
		/* 8212BAECh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 8212BAECh case   11:*/		return 0x8212BAF0;
		  /* 8212BAF0h */ case   12:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BAF0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BAF0h case   12:*/		return 0x8212BAF4;
		  /* 8212BAF4h */ case   13:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BAF4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BAF4h case   13:*/		return 0x8212BAF8;
		  /* 8212BAF8h */ case   14:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BAF8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BAF8h case   14:*/		return 0x8212BAFC;
		  /* 8212BAFCh */ case   15:  		/* lwz R11, <#[R11]> */
		/* 8212BAFCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BAFCh case   15:*/		return 0x8212BB00;
		  /* 8212BB00h */ case   16:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BB00h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BB00h case   16:*/		return 0x8212BB04;
		  /* 8212BB04h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 8212BB04h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BB04h case   17:*/		return 0x8212BB08;
		  /* 8212BB08h */ case   18:  		/* bc 12, CR6_EQ, 64 */
		/* 8212BB08h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212BB48;  }
		/* 8212BB08h case   18:*/		return 0x8212BB0C;
		  /* 8212BB0Ch */ case   19:  		/* cmplw CR6, R11, R27 */
		/* 8212BB0Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8212BB0Ch case   19:*/		return 0x8212BB10;
		  /* 8212BB10h */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 8212BB10h case   20:*/		if ( regs.CR[6].eq ) { return 0x8212BB30;  }
		/* 8212BB10h case   20:*/		return 0x8212BB14;
		  /* 8212BB14h */ case   21:  		/* lis R10, 8208 */
		/* 8212BB14h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x2010);
		/* 8212BB14h case   21:*/		return 0x8212BB18;
		  /* 8212BB18h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8212BB18h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BB18h case   22:*/		return 0x8212BB1C;
		  /* 8212BB1Ch */ case   23:  		/* bc 12, CR6_EQ, 20 */
		/* 8212BB1Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x8212BB30;  }
		/* 8212BB1Ch case   23:*/		return 0x8212BB20;
		  /* 8212BB20h */ case   24:  		/* cmplw CR6, R11, R25 */
		/* 8212BB20h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8212BB20h case   24:*/		return 0x8212BB24;
		  /* 8212BB24h */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 8212BB24h case   25:*/		if ( regs.CR[6].eq ) { return 0x8212BB30;  }
		/* 8212BB24h case   25:*/		return 0x8212BB28;
		  /* 8212BB28h */ case   26:  		/* li R30, 1 */
		/* 8212BB28h case   26:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8212BB28h case   26:*/		return 0x8212BB2C;
		  /* 8212BB2Ch */ case   27:  		/* b 52 */
		/* 8212BB2Ch case   27:*/		return 0x8212BB60;
		/* 8212BB2Ch case   27:*/		return 0x8212BB30;
	}
	return 0x8212BB30;
} // Block from 8212BAC0h-8212BB30h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8212BB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BB30);
		  /* 8212BB30h */ case    0:  		/* mr R3, R31 */
		/* 8212BB30h case    0:*/		regs.R3 = regs.R31;
		/* 8212BB30h case    0:*/		return 0x8212BB34;
		  /* 8212BB34h */ case    1:  		/* bl -247772 */
		/* 8212BB34h case    1:*/		regs.LR = 0x8212BB38; return 0x820EF358;
		/* 8212BB34h case    1:*/		return 0x8212BB38;
		  /* 8212BB38h */ case    2:  		/* mr R30, R3 */
		/* 8212BB38h case    2:*/		regs.R30 = regs.R3;
		/* 8212BB38h case    2:*/		return 0x8212BB3C;
		  /* 8212BB3Ch */ case    3:  		/* mr R3, R31 */
		/* 8212BB3Ch case    3:*/		regs.R3 = regs.R31;
		/* 8212BB3Ch case    3:*/		return 0x8212BB40;
		  /* 8212BB40h */ case    4:  		/* bl -291680 */
		/* 8212BB40h case    4:*/		regs.LR = 0x8212BB44; return 0x820E47E0;
		/* 8212BB40h case    4:*/		return 0x8212BB44;
		  /* 8212BB44h */ case    5:  		/* b 20 */
		/* 8212BB44h case    5:*/		return 0x8212BB58;
		/* 8212BB44h case    5:*/		return 0x8212BB48;
	}
	return 0x8212BB48;
} // Block from 8212BB30h-8212BB48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212BB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BB48);
		  /* 8212BB48h */ case    0:  		/* li R4, 1 */
		/* 8212BB48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212BB48h case    0:*/		return 0x8212BB4C;
		  /* 8212BB4Ch */ case    1:  		/* mr R3, R31 */
		/* 8212BB4Ch case    1:*/		regs.R3 = regs.R31;
		/* 8212BB4Ch case    1:*/		return 0x8212BB50;
		  /* 8212BB50h */ case    2:  		/* bl -234312 */
		/* 8212BB50h case    2:*/		regs.LR = 0x8212BB54; return 0x820F2808;
		/* 8212BB50h case    2:*/		return 0x8212BB54;
		  /* 8212BB54h */ case    3:  		/* mr R30, R3 */
		/* 8212BB54h case    3:*/		regs.R30 = regs.R3;
		/* 8212BB54h case    3:*/		return 0x8212BB58;
	}
	return 0x8212BB58;
} // Block from 8212BB48h-8212BB58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212BB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BB58);
		  /* 8212BB58h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8212BB58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8212BB58h case    0:*/		return 0x8212BB5C;
		  /* 8212BB5Ch */ case    1:  		/* bc 12, CR6_LT, 1144 */
		/* 8212BB5Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8212BFD4;  }
		/* 8212BB5Ch case    1:*/		return 0x8212BB60;
	}
	return 0x8212BB60;
} // Block from 8212BB58h-8212BB60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212BB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BB60);
		  /* 8212BB60h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BB60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BB60h case    0:*/		return 0x8212BB64;
		  /* 8212BB64h */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BB64h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BB64h case    1:*/		return 0x8212BB68;
		  /* 8212BB68h */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BB68h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BB68h case    2:*/		return 0x8212BB6C;
		  /* 8212BB6Ch */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BB6Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BB6Ch case    3:*/		return 0x8212BB70;
		  /* 8212BB70h */ case    4:  		/* bc 12, CR6_LT, -136 */
		/* 8212BB70h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BAE8;  }
		/* 8212BB70h case    4:*/		return 0x8212BB74;
	}
	return 0x8212BB74;
} // Block from 8212BB60h-8212BB74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BB74);
		  /* 8212BB74h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BB74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BB74h case    0:*/		return 0x8212BB78;
		  /* 8212BB78h */ case    1:  		/* li R29, 0 */
		/* 8212BB78h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BB78h case    1:*/		return 0x8212BB7C;
		  /* 8212BB7Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8212BB7Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BB7Ch case    2:*/		return 0x8212BB80;
		  /* 8212BB80h */ case    3:  		/* bc 4, CR6_GT, 132 */
		/* 8212BB80h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8212BC04;  }
		/* 8212BB80h case    3:*/		return 0x8212BB84;
		  /* 8212BB84h */ case    4:  		/* li R28, 0 */
		/* 8212BB84h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BB84h case    4:*/		return 0x8212BB88;
		  /* 8212BB88h */ case    5:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BB88h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BB88h case    5:*/		return 0x8212BB8C;
		  /* 8212BB8Ch */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BB8Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BB8Ch case    6:*/		return 0x8212BB90;
		  /* 8212BB90h */ case    7:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BB90h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BB90h case    7:*/		return 0x8212BB94;
		  /* 8212BB94h */ case    8:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BB94h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BB94h case    8:*/		return 0x8212BB98;
		  /* 8212BB98h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8212BB98h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BB98h case    9:*/		return 0x8212BB9C;
		  /* 8212BB9Ch */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BB9Ch case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BB9Ch case   10:*/		return 0x8212BBA0;
		  /* 8212BBA0h */ case   11:  		/* cmplw CR6, R11, R25 */
		/* 8212BBA0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8212BBA0h case   11:*/		return 0x8212BBA4;
		  /* 8212BBA4h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 8212BBA4h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212BBB0;  }
		/* 8212BBA4h case   12:*/		return 0x8212BBA8;
		  /* 8212BBA8h */ case   13:  		/* li R30, 1 */
		/* 8212BBA8h case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8212BBA8h case   13:*/		return 0x8212BBAC;
		  /* 8212BBACh */ case   14:  		/* b 68 */
		/* 8212BBACh case   14:*/		return 0x8212BBF0;
		/* 8212BBACh case   14:*/		return 0x8212BBB0;
	}
	return 0x8212BBB0;
} // Block from 8212BB74h-8212BBB0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212BBB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BBB0);
		  /* 8212BBB0h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8212BBB0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8212BBB0h case    0:*/		return 0x8212BBB4;
		  /* 8212BBB4h */ case    1:  		/* bc 12, CR6_LT, 1056 */
		/* 8212BBB4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8212BFD4;  }
		/* 8212BBB4h case    1:*/		return 0x8212BBB8;
		  /* 8212BBB8h */ case    2:  		/* li R6, 0 */
		/* 8212BBB8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212BBB8h case    2:*/		return 0x8212BBBC;
		  /* 8212BBBCh */ case    3:  		/* li R5, 0 */
		/* 8212BBBCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212BBBCh case    3:*/		return 0x8212BBC0;
		  /* 8212BBC0h */ case    4:  		/* li R4, 0 */
		/* 8212BBC0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212BBC0h case    4:*/		return 0x8212BBC4;
		  /* 8212BBC4h */ case    5:  		/* mr R3, R31 */
		/* 8212BBC4h case    5:*/		regs.R3 = regs.R31;
		/* 8212BBC4h case    5:*/		return 0x8212BBC8;
		  /* 8212BBC8h */ case    6:  		/* bl -287488 */
		/* 8212BBC8h case    6:*/		regs.LR = 0x8212BBCC; return 0x820E58C8;
		/* 8212BBC8h case    6:*/		return 0x8212BBCC;
		  /* 8212BBCCh */ case    7:  		/* or. R30, R3, R3 */
		/* 8212BBCCh case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BBCCh case    7:*/		return 0x8212BBD0;
		  /* 8212BBD0h */ case    8:  		/* bc 12, CR0_LT, 1028 */
		/* 8212BBD0h case    8:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BBD0h case    8:*/		return 0x8212BBD4;
		  /* 8212BBD4h */ case    9:  		/* li R6, 0 */
		/* 8212BBD4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212BBD4h case    9:*/		return 0x8212BBD8;
		  /* 8212BBD8h */ case   10:  		/* li R5, 0 */
		/* 8212BBD8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212BBD8h case   10:*/		return 0x8212BBDC;
		  /* 8212BBDCh */ case   11:  		/* li R4, 0 */
		/* 8212BBDCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212BBDCh case   11:*/		return 0x8212BBE0;
		  /* 8212BBE0h */ case   12:  		/* mr R3, R31 */
		/* 8212BBE0h case   12:*/		regs.R3 = regs.R31;
		/* 8212BBE0h case   12:*/		return 0x8212BBE4;
		  /* 8212BBE4h */ case   13:  		/* bl -285828 */
		/* 8212BBE4h case   13:*/		regs.LR = 0x8212BBE8; return 0x820E5F60;
		/* 8212BBE4h case   13:*/		return 0x8212BBE8;
		  /* 8212BBE8h */ case   14:  		/* or. R30, R3, R3 */
		/* 8212BBE8h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BBE8h case   14:*/		return 0x8212BBEC;
		  /* 8212BBECh */ case   15:  		/* bc 12, CR0_LT, 1000 */
		/* 8212BBECh case   15:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BBECh case   15:*/		return 0x8212BBF0;
	}
	return 0x8212BBF0;
} // Block from 8212BBB0h-8212BBF0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212BBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BBF0);
		  /* 8212BBF0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BBF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BBF0h case    0:*/		return 0x8212BBF4;
		  /* 8212BBF4h */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BBF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BBF4h case    1:*/		return 0x8212BBF8;
		  /* 8212BBF8h */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BBF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BBF8h case    2:*/		return 0x8212BBFC;
		  /* 8212BBFCh */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BBFCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BBFCh case    3:*/		return 0x8212BC00;
		  /* 8212BC00h */ case    4:  		/* bc 12, CR6_LT, -120 */
		/* 8212BC00h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BB88;  }
		/* 8212BC00h case    4:*/		return 0x8212BC04;
	}
	return 0x8212BC04;
} // Block from 8212BBF0h-8212BC04h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BC04);
		  /* 8212BC04h */ case    0:  		/* mr R3, R31 */
		/* 8212BC04h case    0:*/		regs.R3 = regs.R31;
		/* 8212BC04h case    0:*/		return 0x8212BC08;
		  /* 8212BC08h */ case    1:  		/* bl -150432 */
		/* 8212BC08h case    1:*/		regs.LR = 0x8212BC0C; return 0x82107068;
		/* 8212BC08h case    1:*/		return 0x8212BC0C;
		  /* 8212BC0Ch */ case    2:  		/* or. R30, R3, R3 */
		/* 8212BC0Ch case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BC0Ch case    2:*/		return 0x8212BC10;
		  /* 8212BC10h */ case    3:  		/* bc 12, CR0_LT, 964 */
		/* 8212BC10h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BC10h case    3:*/		return 0x8212BC14;
		  /* 8212BC14h */ case    4:  		/* mr R3, R31 */
		/* 8212BC14h case    4:*/		regs.R3 = regs.R31;
		/* 8212BC14h case    4:*/		return 0x8212BC18;
		  /* 8212BC18h */ case    5:  		/* bl -291896 */
		/* 8212BC18h case    5:*/		regs.LR = 0x8212BC1C; return 0x820E47E0;
		/* 8212BC18h case    5:*/		return 0x8212BC1C;
		  /* 8212BC1Ch */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BC1Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BC1Ch case    6:*/		return 0x8212BC20;
		  /* 8212BC20h */ case    7:  		/* li R29, 0 */
		/* 8212BC20h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BC20h case    7:*/		return 0x8212BC24;
		  /* 8212BC24h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8212BC24h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BC24h case    8:*/		return 0x8212BC28;
		  /* 8212BC28h */ case    9:  		/* bc 4, CR6_GT, 100 */
		/* 8212BC28h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8212BC8C;  }
		/* 8212BC28h case    9:*/		return 0x8212BC2C;
		  /* 8212BC2Ch */ case   10:  		/* li R28, 0 */
		/* 8212BC2Ch case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BC2Ch case   10:*/		return 0x8212BC30;
		  /* 8212BC30h */ case   11:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BC30h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BC30h case   11:*/		return 0x8212BC34;
		  /* 8212BC34h */ case   12:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BC34h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BC34h case   12:*/		return 0x8212BC38;
		  /* 8212BC38h */ case   13:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BC38h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BC38h case   13:*/		return 0x8212BC3C;
		  /* 8212BC3Ch */ case   14:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BC3Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BC3Ch case   14:*/		return 0x8212BC40;
		  /* 8212BC40h */ case   15:  		/* lwz R11, <#[R11]> */
		/* 8212BC40h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BC40h case   15:*/		return 0x8212BC44;
		  /* 8212BC44h */ case   16:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BC44h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BC44h case   16:*/		return 0x8212BC48;
		  /* 8212BC48h */ case   17:  		/* cmplw CR6, R11, R27 */
		/* 8212BC48h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8212BC48h case   17:*/		return 0x8212BC4C;
		  /* 8212BC4Ch */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 8212BC4Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8212BC5C;  }
		/* 8212BC4Ch case   18:*/		return 0x8212BC50;
		  /* 8212BC50h */ case   19:  		/* lis R10, 28848 */
		/* 8212BC50h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x70B0);
		/* 8212BC50h case   19:*/		return 0x8212BC54;
		  /* 8212BC54h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 8212BC54h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BC54h case   20:*/		return 0x8212BC58;
		  /* 8212BC58h */ case   21:  		/* bc 4, CR6_EQ, 32 */
		/* 8212BC58h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8212BC78;  }
		/* 8212BC58h case   21:*/		return 0x8212BC5C;
	}
	return 0x8212BC5C;
} // Block from 8212BC04h-8212BC5Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212BC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BC5C);
		  /* 8212BC5Ch */ case    0:  		/* mr R3, R31 */
		/* 8212BC5Ch case    0:*/		regs.R3 = regs.R31;
		/* 8212BC5Ch case    0:*/		return 0x8212BC60;
		  /* 8212BC60h */ case    1:  		/* bl -248072 */
		/* 8212BC60h case    1:*/		regs.LR = 0x8212BC64; return 0x820EF358;
		/* 8212BC60h case    1:*/		return 0x8212BC64;
		  /* 8212BC64h */ case    2:  		/* mr R30, R3 */
		/* 8212BC64h case    2:*/		regs.R30 = regs.R3;
		/* 8212BC64h case    2:*/		return 0x8212BC68;
		  /* 8212BC68h */ case    3:  		/* mr R3, R31 */
		/* 8212BC68h case    3:*/		regs.R3 = regs.R31;
		/* 8212BC68h case    3:*/		return 0x8212BC6C;
		  /* 8212BC6Ch */ case    4:  		/* bl -291980 */
		/* 8212BC6Ch case    4:*/		regs.LR = 0x8212BC70; return 0x820E47E0;
		/* 8212BC6Ch case    4:*/		return 0x8212BC70;
		  /* 8212BC70h */ case    5:  		/* cmpwi CR6, R30, 0 */
		/* 8212BC70h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8212BC70h case    5:*/		return 0x8212BC74;
		  /* 8212BC74h */ case    6:  		/* bc 12, CR6_LT, 864 */
		/* 8212BC74h case    6:*/		if ( regs.CR[6].lt ) { return 0x8212BFD4;  }
		/* 8212BC74h case    6:*/		return 0x8212BC78;
	}
	return 0x8212BC78;
} // Block from 8212BC5Ch-8212BC78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212BC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BC78);
		  /* 8212BC78h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BC78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BC78h case    0:*/		return 0x8212BC7C;
		  /* 8212BC7Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BC7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BC7Ch case    1:*/		return 0x8212BC80;
		  /* 8212BC80h */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BC80h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BC80h case    2:*/		return 0x8212BC84;
		  /* 8212BC84h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BC84h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BC84h case    3:*/		return 0x8212BC88;
		  /* 8212BC88h */ case    4:  		/* bc 12, CR6_LT, -88 */
		/* 8212BC88h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BC30;  }
		/* 8212BC88h case    4:*/		return 0x8212BC8C;
	}
	return 0x8212BC8C;
} // Block from 8212BC78h-8212BC8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BC8C);
		  /* 8212BC8Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BC8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BC8Ch case    0:*/		return 0x8212BC90;
		  /* 8212BC90h */ case    1:  		/* li R29, 0 */
		/* 8212BC90h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BC90h case    1:*/		return 0x8212BC94;
		  /* 8212BC94h */ case    2:  		/* lis R26, 8272 */
		/* 8212BC94h case    2:*/		cpu::op::lis<0>(regs,&regs.R26,0x2050);
		/* 8212BC94h case    2:*/		return 0x8212BC98;
		  /* 8212BC98h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8212BC98h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BC98h case    3:*/		return 0x8212BC9C;
		  /* 8212BC9Ch */ case    4:  		/* bc 4, CR6_GT, 208 */
		/* 8212BC9Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x8212BD6C;  }
		/* 8212BC9Ch case    4:*/		return 0x8212BCA0;
		  /* 8212BCA0h */ case    5:  		/* li R28, 0 */
		/* 8212BCA0h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BCA0h case    5:*/		return 0x8212BCA4;
		  /* 8212BCA4h */ case    6:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BCA4h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BCA4h case    6:*/		return 0x8212BCA8;
		  /* 8212BCA8h */ case    7:  		/* lis R10, 4176 */
		/* 8212BCA8h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x1050);
		/* 8212BCA8h case    7:*/		return 0x8212BCAC;
		  /* 8212BCACh */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BCACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BCACh case    8:*/		return 0x8212BCB0;
		  /* 8212BCB0h */ case    9:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BCB0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BCB0h case    9:*/		return 0x8212BCB4;
		  /* 8212BCB4h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BCB4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BCB4h case   10:*/		return 0x8212BCB8;
		  /* 8212BCB8h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8212BCB8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BCB8h case   11:*/		return 0x8212BCBC;
		  /* 8212BCBCh */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BCBCh case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BCBCh case   12:*/		return 0x8212BCC0;
		  /* 8212BCC0h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8212BCC0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BCC0h case   13:*/		return 0x8212BCC4;
		  /* 8212BCC4h */ case   14:  		/* bc 12, CR6_EQ, 128 */
		/* 8212BCC4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212BD44;  }
		/* 8212BCC4h case   14:*/		return 0x8212BCC8;
		  /* 8212BCC8h */ case   15:  		/* lis R10, 4336 */
		/* 8212BCC8h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x10F0);
		/* 8212BCC8h case   15:*/		return 0x8212BCCC;
		  /* 8212BCCCh */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8212BCCCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BCCCh case   16:*/		return 0x8212BCD0;
		  /* 8212BCD0h */ case   17:  		/* bc 12, CR6_EQ, 104 */
		/* 8212BCD0h case   17:*/		if ( regs.CR[6].eq ) { return 0x8212BD38;  }
		/* 8212BCD0h case   17:*/		return 0x8212BCD4;
		  /* 8212BCD4h */ case   18:  		/* lis R10, 8256 */
		/* 8212BCD4h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 8212BCD4h case   18:*/		return 0x8212BCD8;
		  /* 8212BCD8h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8212BCD8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BCD8h case   19:*/		return 0x8212BCDC;
		  /* 8212BCDCh */ case   20:  		/* bc 12, CR6_EQ, 60 */
		/* 8212BCDCh case   20:*/		if ( regs.CR[6].eq ) { return 0x8212BD18;  }
		/* 8212BCDCh case   20:*/		return 0x8212BCE0;
		  /* 8212BCE0h */ case   21:  		/* cmplw CR6, R11, R26 */
		/* 8212BCE0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8212BCE0h case   21:*/		return 0x8212BCE4;
		  /* 8212BCE4h */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 8212BCE4h case   22:*/		if ( regs.CR[6].eq ) { return 0x8212BD0C;  }
		/* 8212BCE4h case   22:*/		return 0x8212BCE8;
		  /* 8212BCE8h */ case   23:  		/* cmplw CR6, R11, R25 */
		/* 8212BCE8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8212BCE8h case   23:*/		return 0x8212BCEC;
		  /* 8212BCECh */ case   24:  		/* bc 4, CR6_EQ, 108 */
		/* 8212BCECh case   24:*/		if ( !regs.CR[6].eq ) { return 0x8212BD58;  }
		/* 8212BCECh case   24:*/		return 0x8212BCF0;
		  /* 8212BCF0h */ case   25:  		/* mr R3, R31 */
		/* 8212BCF0h case   25:*/		regs.R3 = regs.R31;
		/* 8212BCF0h case   25:*/		return 0x8212BCF4;
		  /* 8212BCF4h */ case   26:  		/* bl -270084 */
		/* 8212BCF4h case   26:*/		regs.LR = 0x8212BCF8; return 0x820E9DF0;
		/* 8212BCF4h case   26:*/		return 0x8212BCF8;
		  /* 8212BCF8h */ case   27:  		/* or. R30, R3, R3 */
		/* 8212BCF8h case   27:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BCF8h case   27:*/		return 0x8212BCFC;
		  /* 8212BCFCh */ case   28:  		/* bc 12, CR0_EQ, 84 */
		/* 8212BCFCh case   28:*/		if ( regs.CR[0].eq ) { return 0x8212BD50;  }
		/* 8212BCFCh case   28:*/		return 0x8212BD00;
		  /* 8212BD00h */ case   29:  		/* mr R3, R31 */
		/* 8212BD00h case   29:*/		regs.R3 = regs.R31;
		/* 8212BD00h case   29:*/		return 0x8212BD04;
		  /* 8212BD04h */ case   30:  		/* bl -269876 */
		/* 8212BD04h case   30:*/		regs.LR = 0x8212BD08; return 0x820E9ED0;
		/* 8212BD04h case   30:*/		return 0x8212BD08;
		  /* 8212BD08h */ case   31:  		/* b 68 */
		/* 8212BD08h case   31:*/		return 0x8212BD4C;
		/* 8212BD08h case   31:*/		return 0x8212BD0C;
	}
	return 0x8212BD0C;
} // Block from 8212BC8Ch-8212BD0Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD0C);
		  /* 8212BD0Ch */ case    0:  		/* mr R3, R31 */
		/* 8212BD0Ch case    0:*/		regs.R3 = regs.R31;
		/* 8212BD0Ch case    0:*/		return 0x8212BD10;
		  /* 8212BD10h */ case    1:  		/* bl -273552 */
		/* 8212BD10h case    1:*/		regs.LR = 0x8212BD14; return 0x820E9080;
		/* 8212BD10h case    1:*/		return 0x8212BD14;
		  /* 8212BD14h */ case    2:  		/* b 56 */
		/* 8212BD14h case    2:*/		return 0x8212BD4C;
		/* 8212BD14h case    2:*/		return 0x8212BD18;
	}
	return 0x8212BD18;
} // Block from 8212BD0Ch-8212BD18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD18);
		  /* 8212BD18h */ case    0:  		/* mr R3, R31 */
		/* 8212BD18h case    0:*/		regs.R3 = regs.R31;
		/* 8212BD18h case    0:*/		return 0x8212BD1C;
		  /* 8212BD1Ch */ case    1:  		/* bl -272404 */
		/* 8212BD1Ch case    1:*/		regs.LR = 0x8212BD20; return 0x820E9508;
		/* 8212BD1Ch case    1:*/		return 0x8212BD20;
		  /* 8212BD20h */ case    2:  		/* or. R30, R3, R3 */
		/* 8212BD20h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BD20h case    2:*/		return 0x8212BD24;
		  /* 8212BD24h */ case    3:  		/* bc 12, CR0_EQ, 44 */
		/* 8212BD24h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212BD50;  }
		/* 8212BD24h case    3:*/		return 0x8212BD28;
		  /* 8212BD28h */ case    4:  		/* li R4, 1 */
		/* 8212BD28h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212BD28h case    4:*/		return 0x8212BD2C;
		  /* 8212BD2Ch */ case    5:  		/* mr R3, R31 */
		/* 8212BD2Ch case    5:*/		regs.R3 = regs.R31;
		/* 8212BD2Ch case    5:*/		return 0x8212BD30;
		  /* 8212BD30h */ case    6:  		/* bl -244672 */
		/* 8212BD30h case    6:*/		regs.LR = 0x8212BD34; return 0x820F0170;
		/* 8212BD30h case    6:*/		return 0x8212BD34;
		  /* 8212BD34h */ case    7:  		/* b 24 */
		/* 8212BD34h case    7:*/		return 0x8212BD4C;
		/* 8212BD34h case    7:*/		return 0x8212BD38;
	}
	return 0x8212BD38;
} // Block from 8212BD18h-8212BD38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD38);
		  /* 8212BD38h */ case    0:  		/* mr R3, R31 */
		/* 8212BD38h case    0:*/		regs.R3 = regs.R31;
		/* 8212BD38h case    0:*/		return 0x8212BD3C;
		  /* 8212BD3Ch */ case    1:  		/* bl -282924 */
		/* 8212BD3Ch case    1:*/		regs.LR = 0x8212BD40; return 0x820E6C10;
		/* 8212BD3Ch case    1:*/		return 0x8212BD40;
		  /* 8212BD40h */ case    2:  		/* b 12 */
		/* 8212BD40h case    2:*/		return 0x8212BD4C;
		/* 8212BD40h case    2:*/		return 0x8212BD44;
	}
	return 0x8212BD44;
} // Block from 8212BD38h-8212BD44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD44);
		  /* 8212BD44h */ case    0:  		/* mr R3, R31 */
		/* 8212BD44h case    0:*/		regs.R3 = regs.R31;
		/* 8212BD44h case    0:*/		return 0x8212BD48;
		  /* 8212BD48h */ case    1:  		/* bl -288456 */
		/* 8212BD48h case    1:*/		regs.LR = 0x8212BD4C; return 0x820E5680;
		/* 8212BD48h case    1:*/		return 0x8212BD4C;
	}
	return 0x8212BD4C;
} // Block from 8212BD44h-8212BD4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD4C);
		  /* 8212BD4Ch */ case    0:  		/* mr R30, R3 */
		/* 8212BD4Ch case    0:*/		regs.R30 = regs.R3;
		/* 8212BD4Ch case    0:*/		return 0x8212BD50;
	}
	return 0x8212BD50;
} // Block from 8212BD4Ch-8212BD50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD50);
		  /* 8212BD50h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8212BD50h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8212BD50h case    0:*/		return 0x8212BD54;
		  /* 8212BD54h */ case    1:  		/* bc 12, CR6_LT, 640 */
		/* 8212BD54h case    1:*/		if ( regs.CR[6].lt ) { return 0x8212BFD4;  }
		/* 8212BD54h case    1:*/		return 0x8212BD58;
	}
	return 0x8212BD58;
} // Block from 8212BD50h-8212BD58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD58);
		  /* 8212BD58h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BD58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BD58h case    0:*/		return 0x8212BD5C;
		  /* 8212BD5Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BD5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BD5Ch case    1:*/		return 0x8212BD60;
		  /* 8212BD60h */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BD60h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BD60h case    2:*/		return 0x8212BD64;
		  /* 8212BD64h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BD64h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BD64h case    3:*/		return 0x8212BD68;
		  /* 8212BD68h */ case    4:  		/* bc 12, CR6_LT, -196 */
		/* 8212BD68h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BCA4;  }
		/* 8212BD68h case    4:*/		return 0x8212BD6C;
	}
	return 0x8212BD6C;
} // Block from 8212BD58h-8212BD6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BD6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BD6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BD6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BD6C);
		  /* 8212BD6Ch */ case    0:  		/* mr R3, R31 */
		/* 8212BD6Ch case    0:*/		regs.R3 = regs.R31;
		/* 8212BD6Ch case    0:*/		return 0x8212BD70;
		  /* 8212BD70h */ case    1:  		/* bl -150792 */
		/* 8212BD70h case    1:*/		regs.LR = 0x8212BD74; return 0x82107068;
		/* 8212BD70h case    1:*/		return 0x8212BD74;
		  /* 8212BD74h */ case    2:  		/* or. R30, R3, R3 */
		/* 8212BD74h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BD74h case    2:*/		return 0x8212BD78;
		  /* 8212BD78h */ case    3:  		/* bc 12, CR0_LT, 604 */
		/* 8212BD78h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BD78h case    3:*/		return 0x8212BD7C;
		  /* 8212BD7Ch */ case    4:  		/* mr R3, R31 */
		/* 8212BD7Ch case    4:*/		regs.R3 = regs.R31;
		/* 8212BD7Ch case    4:*/		return 0x8212BD80;
		  /* 8212BD80h */ case    5:  		/* bl -292256 */
		/* 8212BD80h case    5:*/		regs.LR = 0x8212BD84; return 0x820E47E0;
		/* 8212BD80h case    5:*/		return 0x8212BD84;
		  /* 8212BD84h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BD84h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BD84h case    6:*/		return 0x8212BD88;
		  /* 8212BD88h */ case    7:  		/* li R29, 0 */
		/* 8212BD88h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BD88h case    7:*/		return 0x8212BD8C;
		  /* 8212BD8Ch */ case    8:  		/* lis R27, 28720 */
		/* 8212BD8Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R27,0x7030);
		/* 8212BD8Ch case    8:*/		return 0x8212BD90;
		  /* 8212BD90h */ case    9:  		/* lis R24, 29520 */
		/* 8212BD90h case    9:*/		cpu::op::lis<0>(regs,&regs.R24,0x7350);
		/* 8212BD90h case    9:*/		return 0x8212BD94;
		  /* 8212BD94h */ case   10:  		/* lis R25, 29536 */
		/* 8212BD94h case   10:*/		cpu::op::lis<0>(regs,&regs.R25,0x7360);
		/* 8212BD94h case   10:*/		return 0x8212BD98;
		  /* 8212BD98h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8212BD98h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BD98h case   11:*/		return 0x8212BD9C;
		  /* 8212BD9Ch */ case   12:  		/* bc 4, CR6_GT, 156 */
		/* 8212BD9Ch case   12:*/		if ( !regs.CR[6].gt ) { return 0x8212BE38;  }
		/* 8212BD9Ch case   12:*/		return 0x8212BDA0;
		  /* 8212BDA0h */ case   13:  		/* li R28, 0 */
		/* 8212BDA0h case   13:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BDA0h case   13:*/		return 0x8212BDA4;
		  /* 8212BDA4h */ case   14:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BDA4h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BDA4h case   14:*/		return 0x8212BDA8;
		  /* 8212BDA8h */ case   15:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BDA8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BDA8h case   15:*/		return 0x8212BDAC;
		  /* 8212BDACh */ case   16:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BDACh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BDACh case   16:*/		return 0x8212BDB0;
		  /* 8212BDB0h */ case   17:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BDB0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BDB0h case   17:*/		return 0x8212BDB4;
		  /* 8212BDB4h */ case   18:  		/* lwz R11, <#[R11]> */
		/* 8212BDB4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BDB4h case   18:*/		return 0x8212BDB8;
		  /* 8212BDB8h */ case   19:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BDB8h case   19:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BDB8h case   19:*/		return 0x8212BDBC;
		  /* 8212BDBCh */ case   20:  		/* cmplw CR6, R11, R26 */
		/* 8212BDBCh case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8212BDBCh case   20:*/		return 0x8212BDC0;
		  /* 8212BDC0h */ case   21:  		/* bc 12, CR6_EQ, 80 */
		/* 8212BDC0h case   21:*/		if ( regs.CR[6].eq ) { return 0x8212BE10;  }
		/* 8212BDC0h case   21:*/		return 0x8212BDC4;
		  /* 8212BDC4h */ case   22:  		/* lis R10, 20480 */
		/* 8212BDC4h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 8212BDC4h case   22:*/		return 0x8212BDC8;
		  /* 8212BDC8h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 8212BDC8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BDC8h case   23:*/		return 0x8212BDCC;
		  /* 8212BDCCh */ case   24:  		/* bc 12, CR6_EQ, 56 */
		/* 8212BDCCh case   24:*/		if ( regs.CR[6].eq ) { return 0x8212BE04;  }
		/* 8212BDCCh case   24:*/		return 0x8212BDD0;
		  /* 8212BDD0h */ case   25:  		/* cmplw CR6, R11, R27 */
		/* 8212BDD0h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8212BDD0h case   25:*/		return 0x8212BDD4;
		  /* 8212BDD4h */ case   26:  		/* bc 12, CR6_EQ, 32 */
		/* 8212BDD4h case   26:*/		if ( regs.CR[6].eq ) { return 0x8212BDF4;  }
		/* 8212BDD4h case   26:*/		return 0x8212BDD8;
		  /* 8212BDD8h */ case   27:  		/* cmplw CR6, R11, R24 */
		/* 8212BDD8h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8212BDD8h case   27:*/		return 0x8212BDDC;
		  /* 8212BDDCh */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 8212BDDCh case   28:*/		if ( regs.CR[6].eq ) { return 0x8212BDE8;  }
		/* 8212BDDCh case   28:*/		return 0x8212BDE0;
		  /* 8212BDE0h */ case   29:  		/* cmplw CR6, R11, R25 */
		/* 8212BDE0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8212BDE0h case   29:*/		return 0x8212BDE4;
		  /* 8212BDE4h */ case   30:  		/* bc 4, CR6_EQ, 64 */
		/* 8212BDE4h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8212BE24;  }
		/* 8212BDE4h case   30:*/		return 0x8212BDE8;
	}
	return 0x8212BDE8;
} // Block from 8212BD6Ch-8212BDE8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8212BDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BDE8);
		  /* 8212BDE8h */ case    0:  		/* mr R3, R31 */
		/* 8212BDE8h case    0:*/		regs.R3 = regs.R31;
		/* 8212BDE8h case    0:*/		return 0x8212BDEC;
		  /* 8212BDECh */ case    1:  		/* bl -282156 */
		/* 8212BDECh case    1:*/		regs.LR = 0x8212BDF0; return 0x820E6FC0;
		/* 8212BDECh case    1:*/		return 0x8212BDF0;
		  /* 8212BDF0h */ case    2:  		/* b 40 */
		/* 8212BDF0h case    2:*/		return 0x8212BE18;
		/* 8212BDF0h case    2:*/		return 0x8212BDF4;
	}
	return 0x8212BDF4;
} // Block from 8212BDE8h-8212BDF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BDF4);
		  /* 8212BDF4h */ case    0:  		/* li R4, 0 */
		/* 8212BDF4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212BDF4h case    0:*/		return 0x8212BDF8;
		  /* 8212BDF8h */ case    1:  		/* mr R3, R31 */
		/* 8212BDF8h case    1:*/		regs.R3 = regs.R31;
		/* 8212BDF8h case    1:*/		return 0x8212BDFC;
		  /* 8212BDFCh */ case    2:  		/* bl -268420 */
		/* 8212BDFCh case    2:*/		regs.LR = 0x8212BE00; return 0x820EA578;
		/* 8212BDFCh case    2:*/		return 0x8212BE00;
		  /* 8212BE00h */ case    3:  		/* b 24 */
		/* 8212BE00h case    3:*/		return 0x8212BE18;
		/* 8212BE00h case    3:*/		return 0x8212BE04;
	}
	return 0x8212BE04;
} // Block from 8212BDF4h-8212BE04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE04);
		  /* 8212BE04h */ case    0:  		/* mr R3, R31 */
		/* 8212BE04h case    0:*/		regs.R3 = regs.R31;
		/* 8212BE04h case    0:*/		return 0x8212BE08;
		  /* 8212BE08h */ case    1:  		/* bl -271816 */
		/* 8212BE08h case    1:*/		regs.LR = 0x8212BE0C; return 0x820E9840;
		/* 8212BE08h case    1:*/		return 0x8212BE0C;
		  /* 8212BE0Ch */ case    2:  		/* b 12 */
		/* 8212BE0Ch case    2:*/		return 0x8212BE18;
		/* 8212BE0Ch case    2:*/		return 0x8212BE10;
	}
	return 0x8212BE10;
} // Block from 8212BE04h-8212BE10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE10);
		  /* 8212BE10h */ case    0:  		/* mr R3, R31 */
		/* 8212BE10h case    0:*/		regs.R3 = regs.R31;
		/* 8212BE10h case    0:*/		return 0x8212BE14;
		  /* 8212BE14h */ case    1:  		/* bl -273396 */
		/* 8212BE14h case    1:*/		regs.LR = 0x8212BE18; return 0x820E9220;
		/* 8212BE14h case    1:*/		return 0x8212BE18;
	}
	return 0x8212BE18;
} // Block from 8212BE10h-8212BE18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE18);
		  /* 8212BE18h */ case    0:  		/* mr R30, R3 */
		/* 8212BE18h case    0:*/		regs.R30 = regs.R3;
		/* 8212BE18h case    0:*/		return 0x8212BE1C;
		  /* 8212BE1Ch */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 8212BE1Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8212BE1Ch case    1:*/		return 0x8212BE20;
		  /* 8212BE20h */ case    2:  		/* bc 12, CR6_LT, 436 */
		/* 8212BE20h case    2:*/		if ( regs.CR[6].lt ) { return 0x8212BFD4;  }
		/* 8212BE20h case    2:*/		return 0x8212BE24;
	}
	return 0x8212BE24;
} // Block from 8212BE18h-8212BE24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE24);
		  /* 8212BE24h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BE24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BE24h case    0:*/		return 0x8212BE28;
		  /* 8212BE28h */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BE28h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BE28h case    1:*/		return 0x8212BE2C;
		  /* 8212BE2Ch */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BE2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BE2Ch case    2:*/		return 0x8212BE30;
		  /* 8212BE30h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BE30h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BE30h case    3:*/		return 0x8212BE34;
		  /* 8212BE34h */ case    4:  		/* bc 12, CR6_LT, -144 */
		/* 8212BE34h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BDA4;  }
		/* 8212BE34h case    4:*/		return 0x8212BE38;
	}
	return 0x8212BE38;
} // Block from 8212BE24h-8212BE38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE38);
		  /* 8212BE38h */ case    0:  		/* mr R3, R31 */
		/* 8212BE38h case    0:*/		regs.R3 = regs.R31;
		/* 8212BE38h case    0:*/		return 0x8212BE3C;
		  /* 8212BE3Ch */ case    1:  		/* bl -292444 */
		/* 8212BE3Ch case    1:*/		regs.LR = 0x8212BE40; return 0x820E47E0;
		/* 8212BE3Ch case    1:*/		return 0x8212BE40;
		  /* 8212BE40h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BE40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BE40h case    2:*/		return 0x8212BE44;
		  /* 8212BE44h */ case    3:  		/* li R30, 0 */
		/* 8212BE44h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212BE44h case    3:*/		return 0x8212BE48;
		  /* 8212BE48h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8212BE48h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BE48h case    4:*/		return 0x8212BE4C;
		  /* 8212BE4Ch */ case    5:  		/* bc 4, CR6_GT, 68 */
		/* 8212BE4Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x8212BE90;  }
		/* 8212BE4Ch case    5:*/		return 0x8212BE50;
		  /* 8212BE50h */ case    6:  		/* li R29, 0 */
		/* 8212BE50h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BE50h case    6:*/		return 0x8212BE54;
		  /* 8212BE54h */ case    7:  		/* stw R30, <#[R31 + 256]> */
		/* 8212BE54h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BE54h case    7:*/		return 0x8212BE58;
		  /* 8212BE58h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BE58h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BE58h case    8:*/		return 0x8212BE5C;
		  /* 8212BE5Ch */ case    9:  		/* lwzx R11, <#[R29 + R11]> */
		/* 8212BE5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8212BE5Ch case    9:*/		return 0x8212BE60;
		  /* 8212BE60h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BE60h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BE60h case   10:*/		return 0x8212BE64;
		  /* 8212BE64h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8212BE64h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BE64h case   11:*/		return 0x8212BE68;
		  /* 8212BE68h */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BE68h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BE68h case   12:*/		return 0x8212BE6C;
		  /* 8212BE6Ch */ case   13:  		/* cmplw CR6, R11, R27 */
		/* 8212BE6Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8212BE6Ch case   13:*/		return 0x8212BE70;
		  /* 8212BE70h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 8212BE70h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8212BE7C;  }
		/* 8212BE70h case   14:*/		return 0x8212BE74;
		  /* 8212BE74h */ case   15:  		/* mr R3, R31 */
		/* 8212BE74h case   15:*/		regs.R3 = regs.R31;
		/* 8212BE74h case   15:*/		return 0x8212BE78;
		  /* 8212BE78h */ case   16:  		/* bl -243368 */
		/* 8212BE78h case   16:*/		regs.LR = 0x8212BE7C; return 0x820F07D0;
		/* 8212BE78h case   16:*/		return 0x8212BE7C;
	}
	return 0x8212BE7C;
} // Block from 8212BE38h-8212BE7Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE7C);
		  /* 8212BE7Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BE7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BE7Ch case    0:*/		return 0x8212BE80;
		  /* 8212BE80h */ case    1:  		/* addi R30, R30, 1 */
		/* 8212BE80h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8212BE80h case    1:*/		return 0x8212BE84;
		  /* 8212BE84h */ case    2:  		/* addi R29, R29, 4 */
		/* 8212BE84h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8212BE84h case    2:*/		return 0x8212BE88;
		  /* 8212BE88h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8212BE88h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8212BE88h case    3:*/		return 0x8212BE8C;
		  /* 8212BE8Ch */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 8212BE8Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BE54;  }
		/* 8212BE8Ch case    4:*/		return 0x8212BE90;
	}
	return 0x8212BE90;
} // Block from 8212BE7Ch-8212BE90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BE90);
		  /* 8212BE90h */ case    0:  		/* mr R3, R31 */
		/* 8212BE90h case    0:*/		regs.R3 = regs.R31;
		/* 8212BE90h case    0:*/		return 0x8212BE94;
		  /* 8212BE94h */ case    1:  		/* bl -292532 */
		/* 8212BE94h case    1:*/		regs.LR = 0x8212BE98; return 0x820E47E0;
		/* 8212BE94h case    1:*/		return 0x8212BE98;
		  /* 8212BE98h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BE98h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BE98h case    2:*/		return 0x8212BE9C;
		  /* 8212BE9Ch */ case    3:  		/* li R29, 0 */
		/* 8212BE9Ch case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BE9Ch case    3:*/		return 0x8212BEA0;
		  /* 8212BEA0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8212BEA0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BEA0h case    4:*/		return 0x8212BEA4;
		  /* 8212BEA4h */ case    5:  		/* bc 4, CR6_GT, 136 */
		/* 8212BEA4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8212BF2C;  }
		/* 8212BEA4h case    5:*/		return 0x8212BEA8;
		  /* 8212BEA8h */ case    6:  		/* li R28, 0 */
		/* 8212BEA8h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BEA8h case    6:*/		return 0x8212BEAC;
		  /* 8212BEACh */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212BEACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BEACh case    7:*/		return 0x8212BEB0;
		  /* 8212BEB0h */ case    8:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BEB0h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BEB0h case    8:*/		return 0x8212BEB4;
		  /* 8212BEB4h */ case    9:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212BEB4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212BEB4h case    9:*/		return 0x8212BEB8;
		  /* 8212BEB8h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8212BEB8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BEB8h case   10:*/		return 0x8212BEBC;
		  /* 8212BEBCh */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8212BEBCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212BEBCh case   11:*/		return 0x8212BEC0;
		  /* 8212BEC0h */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212BEC0h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212BEC0h case   12:*/		return 0x8212BEC4;
		  /* 8212BEC4h */ case   13:  		/* cmplw CR6, R11, R27 */
		/* 8212BEC4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8212BEC4h case   13:*/		return 0x8212BEC8;
		  /* 8212BEC8h */ case   14:  		/* bc 12, CR6_EQ, 56 */
		/* 8212BEC8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212BF00;  }
		/* 8212BEC8h case   14:*/		return 0x8212BECC;
		  /* 8212BECCh */ case   15:  		/* cmplw CR6, R11, R24 */
		/* 8212BECCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8212BECCh case   15:*/		return 0x8212BED0;
		  /* 8212BED0h */ case   16:  		/* bc 12, CR6_EQ, 36 */
		/* 8212BED0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8212BEF4;  }
		/* 8212BED0h case   16:*/		return 0x8212BED4;
		  /* 8212BED4h */ case   17:  		/* cmplw CR6, R11, R25 */
		/* 8212BED4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8212BED4h case   17:*/		return 0x8212BED8;
		  /* 8212BED8h */ case   18:  		/* bc 12, CR6_EQ, 28 */
		/* 8212BED8h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212BEF4;  }
		/* 8212BED8h case   18:*/		return 0x8212BEDC;
		  /* 8212BEDCh */ case   19:  		/* lis R10, 29552 */
		/* 8212BEDCh case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x7370);
		/* 8212BEDCh case   19:*/		return 0x8212BEE0;
		  /* 8212BEE0h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 8212BEE0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BEE0h case   20:*/		return 0x8212BEE4;
		  /* 8212BEE4h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 8212BEE4h case   21:*/		if ( regs.CR[6].eq ) { return 0x8212BEF4;  }
		/* 8212BEE4h case   21:*/		return 0x8212BEE8;
		  /* 8212BEE8h */ case   22:  		/* lis R10, 29568 */
		/* 8212BEE8h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0x7380);
		/* 8212BEE8h case   22:*/		return 0x8212BEEC;
		  /* 8212BEECh */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 8212BEECh case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212BEECh case   23:*/		return 0x8212BEF0;
		  /* 8212BEF0h */ case   24:  		/* bc 4, CR6_EQ, 40 */
		/* 8212BEF0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8212BF18;  }
		/* 8212BEF0h case   24:*/		return 0x8212BEF4;
	}
	return 0x8212BEF4;
} // Block from 8212BE90h-8212BEF4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8212BEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BEF4);
		  /* 8212BEF4h */ case    0:  		/* mr R3, R31 */
		/* 8212BEF4h case    0:*/		regs.R3 = regs.R31;
		/* 8212BEF4h case    0:*/		return 0x8212BEF8;
		  /* 8212BEF8h */ case    1:  		/* bl -281592 */
		/* 8212BEF8h case    1:*/		regs.LR = 0x8212BEFC; return 0x820E7300;
		/* 8212BEF8h case    1:*/		return 0x8212BEFC;
		  /* 8212BEFCh */ case    2:  		/* b 16 */
		/* 8212BEFCh case    2:*/		return 0x8212BF0C;
		/* 8212BEFCh case    2:*/		return 0x8212BF00;
	}
	return 0x8212BF00;
} // Block from 8212BEF4h-8212BF00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BF00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BF00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BF00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BF00);
		  /* 8212BF00h */ case    0:  		/* li R4, 0 */
		/* 8212BF00h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212BF00h case    0:*/		return 0x8212BF04;
		  /* 8212BF04h */ case    1:  		/* mr R3, R31 */
		/* 8212BF04h case    1:*/		regs.R3 = regs.R31;
		/* 8212BF04h case    1:*/		return 0x8212BF08;
		  /* 8212BF08h */ case    2:  		/* bl -268688 */
		/* 8212BF08h case    2:*/		regs.LR = 0x8212BF0C; return 0x820EA578;
		/* 8212BF08h case    2:*/		return 0x8212BF0C;
	}
	return 0x8212BF0C;
} // Block from 8212BF00h-8212BF0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BF0C);
		  /* 8212BF0Ch */ case    0:  		/* mr R30, R3 */
		/* 8212BF0Ch case    0:*/		regs.R30 = regs.R3;
		/* 8212BF0Ch case    0:*/		return 0x8212BF10;
		  /* 8212BF10h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 8212BF10h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8212BF10h case    1:*/		return 0x8212BF14;
		  /* 8212BF14h */ case    2:  		/* bc 12, CR6_LT, 192 */
		/* 8212BF14h case    2:*/		if ( regs.CR[6].lt ) { return 0x8212BFD4;  }
		/* 8212BF14h case    2:*/		return 0x8212BF18;
	}
	return 0x8212BF18;
} // Block from 8212BF0Ch-8212BF18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BF18);
		  /* 8212BF18h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BF18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BF18h case    0:*/		return 0x8212BF1C;
		  /* 8212BF1Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BF1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BF1Ch case    1:*/		return 0x8212BF20;
		  /* 8212BF20h */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BF20h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BF20h case    2:*/		return 0x8212BF24;
		  /* 8212BF24h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BF24h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BF24h case    3:*/		return 0x8212BF28;
		  /* 8212BF28h */ case    4:  		/* bc 12, CR6_LT, -124 */
		/* 8212BF28h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BEAC;  }
		/* 8212BF28h case    4:*/		return 0x8212BF2C;
	}
	return 0x8212BF2C;
} // Block from 8212BF18h-8212BF2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BF2C);
		  /* 8212BF2Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BF2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BF2Ch case    0:*/		return 0x8212BF30;
		  /* 8212BF30h */ case    1:  		/* li R29, 0 */
		/* 8212BF30h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212BF30h case    1:*/		return 0x8212BF34;
		  /* 8212BF34h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8212BF34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212BF34h case    2:*/		return 0x8212BF38;
		  /* 8212BF38h */ case    3:  		/* bc 4, CR6_GT, 80 */
		/* 8212BF38h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8212BF88;  }
		/* 8212BF38h case    3:*/		return 0x8212BF3C;
		  /* 8212BF3Ch */ case    4:  		/* li R28, 0 */
		/* 8212BF3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212BF3Ch case    4:*/		return 0x8212BF40;
		  /* 8212BF40h */ case    5:  		/* stw R29, <#[R31 + 256]> */
		/* 8212BF40h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212BF40h case    5:*/		return 0x8212BF44;
		  /* 8212BF44h */ case    6:  		/* lis R11, 20528 */
		/* 8212BF44h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x5030);
		/* 8212BF44h case    6:*/		return 0x8212BF48;
		  /* 8212BF48h */ case    7:  		/* lwz R10, <#[R31 + 24]> */
		/* 8212BF48h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8212BF48h case    7:*/		return 0x8212BF4C;
		  /* 8212BF4Ch */ case    8:  		/* lwzx R10, <#[R28 + R10]> */
		/* 8212BF4Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 8212BF4Ch case    8:*/		return 0x8212BF50;
		  /* 8212BF50h */ case    9:  		/* stw R10, <#[R31 + 260]> */
		/* 8212BF50h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8212BF50h case    9:*/		return 0x8212BF54;
		  /* 8212BF54h */ case   10:  		/* lwz R10, <#[R10]> */
		/* 8212BF54h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8212BF54h case   10:*/		return 0x8212BF58;
		  /* 8212BF58h */ case   11:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8212BF58h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8212BF58h case   11:*/		return 0x8212BF5C;
		  /* 8212BF5Ch */ case   12:  		/* cmplw CR6, R10, R11 */
		/* 8212BF5Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8212BF5Ch case   12:*/		return 0x8212BF60;
		  /* 8212BF60h */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 8212BF60h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8212BF74;  }
		/* 8212BF60h case   13:*/		return 0x8212BF64;
		  /* 8212BF64h */ case   14:  		/* mr R3, R31 */
		/* 8212BF64h case   14:*/		regs.R3 = regs.R31;
		/* 8212BF64h case   14:*/		return 0x8212BF68;
		  /* 8212BF68h */ case   15:  		/* bl -291176 */
		/* 8212BF68h case   15:*/		regs.LR = 0x8212BF6C; return 0x820E4E00;
		/* 8212BF68h case   15:*/		return 0x8212BF6C;
		  /* 8212BF6Ch */ case   16:  		/* or. R30, R3, R3 */
		/* 8212BF6Ch case   16:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BF6Ch case   16:*/		return 0x8212BF70;
		  /* 8212BF70h */ case   17:  		/* bc 12, CR0_LT, 100 */
		/* 8212BF70h case   17:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BF70h case   17:*/		return 0x8212BF74;
	}
	return 0x8212BF74;
} // Block from 8212BF2Ch-8212BF74h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8212BF74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BF74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BF74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BF74);
		  /* 8212BF74h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212BF74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212BF74h case    0:*/		return 0x8212BF78;
		  /* 8212BF78h */ case    1:  		/* addi R29, R29, 1 */
		/* 8212BF78h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212BF78h case    1:*/		return 0x8212BF7C;
		  /* 8212BF7Ch */ case    2:  		/* addi R28, R28, 4 */
		/* 8212BF7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212BF7Ch case    2:*/		return 0x8212BF80;
		  /* 8212BF80h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8212BF80h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212BF80h case    3:*/		return 0x8212BF84;
		  /* 8212BF84h */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 8212BF84h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212BF40;  }
		/* 8212BF84h case    4:*/		return 0x8212BF88;
	}
	return 0x8212BF88;
} // Block from 8212BF74h-8212BF88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212BF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BF88);
		  /* 8212BF88h */ case    0:  		/* mr R3, R31 */
		/* 8212BF88h case    0:*/		regs.R3 = regs.R31;
		/* 8212BF88h case    0:*/		return 0x8212BF8C;
		  /* 8212BF8Ch */ case    1:  		/* bl -151332 */
		/* 8212BF8Ch case    1:*/		regs.LR = 0x8212BF90; return 0x82107068;
		/* 8212BF8Ch case    1:*/		return 0x8212BF90;
		  /* 8212BF90h */ case    2:  		/* or. R30, R3, R3 */
		/* 8212BF90h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BF90h case    2:*/		return 0x8212BF94;
		  /* 8212BF94h */ case    3:  		/* bc 12, CR0_LT, 64 */
		/* 8212BF94h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BF94h case    3:*/		return 0x8212BF98;
		  /* 8212BF98h */ case    4:  		/* mr R3, R31 */
		/* 8212BF98h case    4:*/		regs.R3 = regs.R31;
		/* 8212BF98h case    4:*/		return 0x8212BF9C;
		  /* 8212BF9Ch */ case    5:  		/* bl -149556 */
		/* 8212BF9Ch case    5:*/		regs.LR = 0x8212BFA0; return 0x82107768;
		/* 8212BF9Ch case    5:*/		return 0x8212BFA0;
		  /* 8212BFA0h */ case    6:  		/* or. R30, R3, R3 */
		/* 8212BFA0h case    6:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BFA0h case    6:*/		return 0x8212BFA4;
		  /* 8212BFA4h */ case    7:  		/* bc 12, CR0_LT, 48 */
		/* 8212BFA4h case    7:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BFA4h case    7:*/		return 0x8212BFA8;
		  /* 8212BFA8h */ case    8:  		/* mr R3, R31 */
		/* 8212BFA8h case    8:*/		regs.R3 = regs.R31;
		/* 8212BFA8h case    8:*/		return 0x8212BFAC;
		  /* 8212BFACh */ case    9:  		/* bl -172876 */
		/* 8212BFACh case    9:*/		regs.LR = 0x8212BFB0; return 0x82101C60;
		/* 8212BFACh case    9:*/		return 0x8212BFB0;
		  /* 8212BFB0h */ case   10:  		/* or. R30, R3, R3 */
		/* 8212BFB0h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BFB0h case   10:*/		return 0x8212BFB4;
		  /* 8212BFB4h */ case   11:  		/* bc 12, CR0_LT, 32 */
		/* 8212BFB4h case   11:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BFB4h case   11:*/		return 0x8212BFB8;
		  /* 8212BFB8h */ case   12:  		/* mr R3, R31 */
		/* 8212BFB8h case   12:*/		regs.R3 = regs.R31;
		/* 8212BFB8h case   12:*/		return 0x8212BFBC;
		  /* 8212BFBCh */ case   13:  		/* bl -138764 */
		/* 8212BFBCh case   13:*/		regs.LR = 0x8212BFC0; return 0x8210A1B0;
		/* 8212BFBCh case   13:*/		return 0x8212BFC0;
		  /* 8212BFC0h */ case   14:  		/* or. R30, R3, R3 */
		/* 8212BFC0h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212BFC0h case   14:*/		return 0x8212BFC4;
		  /* 8212BFC4h */ case   15:  		/* bc 12, CR0_LT, 16 */
		/* 8212BFC4h case   15:*/		if ( regs.CR[0].lt ) { return 0x8212BFD4;  }
		/* 8212BFC4h case   15:*/		return 0x8212BFC8;
		  /* 8212BFC8h */ case   16:  		/* mr R3, R31 */
		/* 8212BFC8h case   16:*/		regs.R3 = regs.R31;
		/* 8212BFC8h case   16:*/		return 0x8212BFCC;
		  /* 8212BFCCh */ case   17:  		/* bl -292844 */
		/* 8212BFCCh case   17:*/		regs.LR = 0x8212BFD0; return 0x820E47E0;
		/* 8212BFCCh case   17:*/		return 0x8212BFD0;
		  /* 8212BFD0h */ case   18:  		/* li R30, 0 */
		/* 8212BFD0h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212BFD0h case   18:*/		return 0x8212BFD4;
	}
	return 0x8212BFD4;
} // Block from 8212BF88h-8212BFD4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212BFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BFD4);
		  /* 8212BFD4h */ case    0:  		/* mr R3, R30 */
		/* 8212BFD4h case    0:*/		regs.R3 = regs.R30;
		/* 8212BFD4h case    0:*/		return 0x8212BFD8;
		  /* 8212BFD8h */ case    1:  		/* addi R1, R1, 160 */
		/* 8212BFD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8212BFD8h case    1:*/		return 0x8212BFDC;
		  /* 8212BFDCh */ case    2:  		/* b -634180 */
		/* 8212BFDCh case    2:*/		return 0x82091298;
		/* 8212BFDCh case    2:*/		return 0x8212BFE0;
	}
	return 0x8212BFE0;
} // Block from 8212BFD4h-8212BFE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212BFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212BFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212BFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212BFE0);
		  /* 8212BFE0h */ case    0:  		/* mfspr R12, LR */
		/* 8212BFE0h case    0:*/		regs.R12 = regs.LR;
		/* 8212BFE0h case    0:*/		return 0x8212BFE4;
		  /* 8212BFE4h */ case    1:  		/* bl -634260 */
		/* 8212BFE4h case    1:*/		regs.LR = 0x8212BFE8; return 0x82091250;
		/* 8212BFE4h case    1:*/		return 0x8212BFE8;
		  /* 8212BFE8h */ case    2:  		/* stfd FR30, <#[R1 - 72]> */
		/* 8212BFE8h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 8212BFE8h case    2:*/		return 0x8212BFEC;
		  /* 8212BFECh */ case    3:  		/* stfd FR31, <#[R1 - 64]> */
		/* 8212BFECh case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8212BFECh case    3:*/		return 0x8212BFF0;
		  /* 8212BFF0h */ case    4:  		/* stwu R1, <#[R1 - 160]> */
		/* 8212BFF0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8212BFF0h case    4:*/		return 0x8212BFF4;
		  /* 8212BFF4h */ case    5:  		/* lwz R10, <#[R3 + 12]> */
		/* 8212BFF4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8212BFF4h case    5:*/		return 0x8212BFF8;
		  /* 8212BFF8h */ case    6:  		/* li R11, -1 */
		/* 8212BFF8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8212BFF8h case    6:*/		return 0x8212BFFC;
		  /* 8212BFFCh */ case    7:  		/* mr R31, R3 */
		/* 8212BFFCh case    7:*/		regs.R31 = regs.R3;
		/* 8212BFFCh case    7:*/		return 0x8212C000;
		  /* 8212C000h */ case    8:  		/* li R27, 0 */
		/* 8212C000h case    8:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8212C000h case    8:*/		return 0x8212C004;
		  /* 8212C004h */ case    9:  		/* stw R11, <#[R3 + 548]> */
		/* 8212C004h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000224) );
		/* 8212C004h case    9:*/		return 0x8212C008;
		  /* 8212C008h */ case   10:  		/* li R30, 0 */
		/* 8212C008h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212C008h case   10:*/		return 0x8212C00C;
		  /* 8212C00Ch */ case   11:  		/* stw R11, <#[R3 + 552]> */
		/* 8212C00Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000228) );
		/* 8212C00Ch case   11:*/		return 0x8212C010;
		  /* 8212C010h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 8212C010h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8212C010h case   12:*/		return 0x8212C014;
		  /* 8212C014h */ case   13:  		/* bc 4, CR6_GT, 208 */
		/* 8212C014h case   13:*/		if ( !regs.CR[6].gt ) { return 0x8212C0E4;  }
		/* 8212C014h case   13:*/		return 0x8212C018;
		  /* 8212C018h */ case   14:  		/* lis R10, -32256 */
		/* 8212C018h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8212C018h case   14:*/		return 0x8212C01C;
		  /* 8212C01Ch */ case   15:  		/* lis R9, -32256 */
		/* 8212C01Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8212C01Ch case   15:*/		return 0x8212C020;
		  /* 8212C020h */ case   16:  		/* lis R11, -32255 */
		/* 8212C020h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8212C020h case   16:*/		return 0x8212C024;
		  /* 8212C024h */ case   17:  		/* li R29, 0 */
		/* 8212C024h case   17:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212C024h case   17:*/		return 0x8212C028;
		  /* 8212C028h */ case   18:  		/* addi R28, R11, -8736 */
		/* 8212C028h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFDDE0);
		/* 8212C028h case   18:*/		return 0x8212C02C;
		  /* 8212C02Ch */ case   19:  		/* lfd FR30, <#[R10 + 1848]> */
		/* 8212C02Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R10 + 0x00000738) );
		/* 8212C02Ch case   19:*/		return 0x8212C030;
		  /* 8212C030h */ case   20:  		/* lfd FR31, <#[R9 + 1808]> */
		/* 8212C030h case   20:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R9 + 0x00000710) );
		/* 8212C030h case   20:*/		return 0x8212C034;
		  /* 8212C034h */ case   21:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212C034h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212C034h case   21:*/		return 0x8212C038;
		  /* 8212C038h */ case   22:  		/* lis R10, 8240 */
		/* 8212C038h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0x2030);
		/* 8212C038h case   22:*/		return 0x8212C03C;
		  /* 8212C03Ch */ case   23:  		/* stw R30, <#[R31 + 256]> */
		/* 8212C03Ch case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8212C03Ch case   23:*/		return 0x8212C040;
		  /* 8212C040h */ case   24:  		/* lwzx R9, <#[R11 + R29]> */
		/* 8212C040h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8212C040h case   24:*/		return 0x8212C044;
		  /* 8212C044h */ case   25:  		/* stw R9, <#[R31 + 260]> */
		/* 8212C044h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 8212C044h case   25:*/		return 0x8212C048;
		  /* 8212C048h */ case   26:  		/* stw R30, <#[R31 + 256]> */
		/* 8212C048h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8212C048h case   26:*/		return 0x8212C04C;
		  /* 8212C04Ch */ case   27:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8212C04Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8212C04Ch case   27:*/		return 0x8212C050;
		  /* 8212C050h */ case   28:  		/* stw R11, <#[R31 + 260]> */
		/* 8212C050h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212C050h case   28:*/		return 0x8212C054;
		  /* 8212C054h */ case   29:  		/* lwz R11, <#[R11]> */
		/* 8212C054h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212C054h case   29:*/		return 0x8212C058;
		  /* 8212C058h */ case   30:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212C058h case   30:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212C058h case   30:*/		return 0x8212C05C;
		  /* 8212C05Ch */ case   31:  		/* cmplw CR6, R11, R10 */
		/* 8212C05Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212C05Ch case   31:*/		return 0x8212C060;
		  /* 8212C060h */ case   32:  		/* bc 12, CR6_EQ, 16 */
		/* 8212C060h case   32:*/		if ( regs.CR[6].eq ) { return 0x8212C070;  }
		/* 8212C060h case   32:*/		return 0x8212C064;
		  /* 8212C064h */ case   33:  		/* lis R10, 8224 */
		/* 8212C064h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0x2020);
		/* 8212C064h case   33:*/		return 0x8212C068;
		  /* 8212C068h */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 8212C068h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212C068h case   34:*/		return 0x8212C06C;
		  /* 8212C06Ch */ case   35:  		/* bc 4, CR6_EQ, 100 */
		/* 8212C06Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x8212C0D0;  }
		/* 8212C06Ch case   35:*/		return 0x8212C070;
	}
	return 0x8212C070;
} // Block from 8212BFE0h-8212C070h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8212C070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C070);
		  /* 8212C070h */ case    0:  		/* lwz R11, <#[R31 + 548]> */
		/* 8212C070h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8212C070h case    0:*/		return 0x8212C074;
		  /* 8212C074h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8212C074h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212C074h case    1:*/		return 0x8212C078;
		  /* 8212C078h */ case    2:  		/* bc 4, CR6_EQ, 88 */
		/* 8212C078h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212C0D0;  }
		/* 8212C078h case    2:*/		return 0x8212C07C;
		  /* 8212C07Ch */ case    3:  		/* mr R4, R28 */
		/* 8212C07Ch case    3:*/		regs.R4 = regs.R28;
		/* 8212C07Ch case    3:*/		return 0x8212C080;
		  /* 8212C080h */ case    4:  		/* li R7, 4 */
		/* 8212C080h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 8212C080h case    4:*/		return 0x8212C084;
		  /* 8212C084h */ case    5:  		/* li R6, 1 */
		/* 8212C084h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8212C084h case    5:*/		return 0x8212C088;
		  /* 8212C088h */ case    6:  		/* li R5, 785 */
		/* 8212C088h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x311);
		/* 8212C088h case    6:*/		return 0x8212C08C;
		  /* 8212C08Ch */ case    7:  		/* mr R3, R31 */
		/* 8212C08Ch case    7:*/		regs.R3 = regs.R31;
		/* 8212C08Ch case    7:*/		return 0x8212C090;
		  /* 8212C090h */ case    8:  		/* bl -192264 */
		/* 8212C090h case    8:*/		regs.LR = 0x8212C094; return 0x820FD188;
		/* 8212C090h case    8:*/		return 0x8212C094;
		  /* 8212C094h */ case    9:  		/* mr R26, R3 */
		/* 8212C094h case    9:*/		regs.R26 = regs.R3;
		/* 8212C094h case    9:*/		return 0x8212C098;
		  /* 8212C098h */ case   10:  		/* mr R4, R3 */
		/* 8212C098h case   10:*/		regs.R4 = regs.R3;
		/* 8212C098h case   10:*/		return 0x8212C09C;
		  /* 8212C09Ch */ case   11:  		/* fmr FR1, FR31 */
		/* 8212C09Ch case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8212C09Ch case   11:*/		return 0x8212C0A0;
		  /* 8212C0A0h */ case   12:  		/* li R6, 0 */
		/* 8212C0A0h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212C0A0h case   12:*/		return 0x8212C0A4;
		  /* 8212C0A4h */ case   13:  		/* li R5, 0 */
		/* 8212C0A4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212C0A4h case   13:*/		return 0x8212C0A8;
		  /* 8212C0A8h */ case   14:  		/* mr R3, R31 */
		/* 8212C0A8h case   14:*/		regs.R3 = regs.R31;
		/* 8212C0A8h case   14:*/		return 0x8212C0AC;
		  /* 8212C0ACh */ case   15:  		/* bl -192132 */
		/* 8212C0ACh case   15:*/		regs.LR = 0x8212C0B0; return 0x820FD228;
		/* 8212C0ACh case   15:*/		return 0x8212C0B0;
		  /* 8212C0B0h */ case   16:  		/* stw R3, <#[R31 + 548]> */
		/* 8212C0B0h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000224) );
		/* 8212C0B0h case   16:*/		return 0x8212C0B4;
		  /* 8212C0B4h */ case   17:  		/* li R6, 1 */
		/* 8212C0B4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8212C0B4h case   17:*/		return 0x8212C0B8;
		  /* 8212C0B8h */ case   18:  		/* fmr FR1, FR30 */
		/* 8212C0B8h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8212C0B8h case   18:*/		return 0x8212C0BC;
		  /* 8212C0BCh */ case   19:  		/* li R5, 0 */
		/* 8212C0BCh case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212C0BCh case   19:*/		return 0x8212C0C0;
		  /* 8212C0C0h */ case   20:  		/* mr R4, R26 */
		/* 8212C0C0h case   20:*/		regs.R4 = regs.R26;
		/* 8212C0C0h case   20:*/		return 0x8212C0C4;
		  /* 8212C0C4h */ case   21:  		/* mr R3, R31 */
		/* 8212C0C4h case   21:*/		regs.R3 = regs.R31;
		/* 8212C0C4h case   21:*/		return 0x8212C0C8;
		  /* 8212C0C8h */ case   22:  		/* bl -192160 */
		/* 8212C0C8h case   22:*/		regs.LR = 0x8212C0CC; return 0x820FD228;
		/* 8212C0C8h case   22:*/		return 0x8212C0CC;
		  /* 8212C0CCh */ case   23:  		/* stw R3, <#[R31 + 552]> */
		/* 8212C0CCh case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000228) );
		/* 8212C0CCh case   23:*/		return 0x8212C0D0;
	}
	return 0x8212C0D0;
} // Block from 8212C070h-8212C0D0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8212C0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C0D0);
		  /* 8212C0D0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212C0D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212C0D0h case    0:*/		return 0x8212C0D4;
		  /* 8212C0D4h */ case    1:  		/* addi R30, R30, 1 */
		/* 8212C0D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8212C0D4h case    1:*/		return 0x8212C0D8;
		  /* 8212C0D8h */ case    2:  		/* addi R29, R29, 4 */
		/* 8212C0D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8212C0D8h case    2:*/		return 0x8212C0DC;
		  /* 8212C0DCh */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8212C0DCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8212C0DCh case    3:*/		return 0x8212C0E0;
		  /* 8212C0E0h */ case    4:  		/* bc 12, CR6_LT, -172 */
		/* 8212C0E0h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212C034;  }
		/* 8212C0E0h case    4:*/		return 0x8212C0E4;
	}
	return 0x8212C0E4;
} // Block from 8212C0D0h-8212C0E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C0E4);
		  /* 8212C0E4h */ case    0:  		/* mr R3, R31 */
		/* 8212C0E4h case    0:*/		regs.R3 = regs.R31;
		/* 8212C0E4h case    0:*/		return 0x8212C0E8;
		  /* 8212C0E8h */ case    1:  		/* bl -293128 */
		/* 8212C0E8h case    1:*/		regs.LR = 0x8212C0EC; return 0x820E47E0;
		/* 8212C0E8h case    1:*/		return 0x8212C0EC;
		  /* 8212C0ECh */ case    2:  		/* lwz R11, <#[R31 + 204]> */
		/* 8212C0ECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 8212C0ECh case    2:*/		return 0x8212C0F0;
		  /* 8212C0F0h */ case    3:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8212C0F0h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8212C0F0h case    3:*/		return 0x8212C0F4;
		  /* 8212C0F4h */ case    4:  		/* bc 4, CR0_EQ, 168 */
		/* 8212C0F4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8212C19C;  }
		/* 8212C0F4h case    4:*/		return 0x8212C0F8;
		  /* 8212C0F8h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212C0F8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212C0F8h case    5:*/		return 0x8212C0FC;
		  /* 8212C0FCh */ case    6:  		/* li R30, 0 */
		/* 8212C0FCh case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212C0FCh case    6:*/		return 0x8212C100;
		  /* 8212C100h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8212C100h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212C100h case    7:*/		return 0x8212C104;
		  /* 8212C104h */ case    8:  		/* bc 4, CR6_GT, 152 */
		/* 8212C104h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8212C19C;  }
		/* 8212C104h case    8:*/		return 0x8212C108;
		  /* 8212C108h */ case    9:  		/* li R29, 0 */
		/* 8212C108h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212C108h case    9:*/		return 0x8212C10C;
		  /* 8212C10Ch */ case   10:  		/* stw R30, <#[R31 + 256]> */
		/* 8212C10Ch case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8212C10Ch case   10:*/		return 0x8212C110;
		  /* 8212C110h */ case   11:  		/* lis R9, 4144 */
		/* 8212C110h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0x1030);
		/* 8212C110h case   11:*/		return 0x8212C114;
		  /* 8212C114h */ case   12:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212C114h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212C114h case   12:*/		return 0x8212C118;
		  /* 8212C118h */ case   13:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8212C118h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8212C118h case   13:*/		return 0x8212C11C;
		  /* 8212C11Ch */ case   14:  		/* stw R11, <#[R31 + 260]> */
		/* 8212C11Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212C11Ch case   14:*/		return 0x8212C120;
		  /* 8212C120h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 8212C120h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212C120h case   15:*/		return 0x8212C124;
		  /* 8212C124h */ case   16:  		/* rlwinm R11, R10, 0, 0, 11 */
		/* 8212C124h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R10);
		/* 8212C124h case   16:*/		return 0x8212C128;
		  /* 8212C128h */ case   17:  		/* cmplw CR6, R11, R9 */
		/* 8212C128h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212C128h case   17:*/		return 0x8212C12C;
		  /* 8212C12Ch */ case   18:  		/* bc 12, CR6_EQ, 72 */
		/* 8212C12Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8212C174;  }
		/* 8212C12Ch case   18:*/		return 0x8212C130;
		  /* 8212C130h */ case   19:  		/* lis R9, 4176 */
		/* 8212C130h case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0x1050);
		/* 8212C130h case   19:*/		return 0x8212C134;
		  /* 8212C134h */ case   20:  		/* cmplw CR6, R11, R9 */
		/* 8212C134h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212C134h case   20:*/		return 0x8212C138;
		  /* 8212C138h */ case   21:  		/* bc 12, CR6_EQ, 60 */
		/* 8212C138h case   21:*/		if ( regs.CR[6].eq ) { return 0x8212C174;  }
		/* 8212C138h case   21:*/		return 0x8212C13C;
		  /* 8212C13Ch */ case   22:  		/* lis R9, 4192 */
		/* 8212C13Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R9,0x1060);
		/* 8212C13Ch case   22:*/		return 0x8212C140;
		  /* 8212C140h */ case   23:  		/* cmplw CR6, R11, R9 */
		/* 8212C140h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212C140h case   23:*/		return 0x8212C144;
		  /* 8212C144h */ case   24:  		/* bc 12, CR6_EQ, 48 */
		/* 8212C144h case   24:*/		if ( regs.CR[6].eq ) { return 0x8212C174;  }
		/* 8212C144h case   24:*/		return 0x8212C148;
		  /* 8212C148h */ case   25:  		/* lis R9, 4208 */
		/* 8212C148h case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0x1070);
		/* 8212C148h case   25:*/		return 0x8212C14C;
		  /* 8212C14Ch */ case   26:  		/* cmplw CR6, R11, R9 */
		/* 8212C14Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212C14Ch case   26:*/		return 0x8212C150;
		  /* 8212C150h */ case   27:  		/* bc 12, CR6_EQ, 36 */
		/* 8212C150h case   27:*/		if ( regs.CR[6].eq ) { return 0x8212C174;  }
		/* 8212C150h case   27:*/		return 0x8212C154;
		  /* 8212C154h */ case   28:  		/* lis R9, 20480 */
		/* 8212C154h case   28:*/		cpu::op::lis<0>(regs,&regs.R9,0x5000);
		/* 8212C154h case   28:*/		return 0x8212C158;
		  /* 8212C158h */ case   29:  		/* cmplw CR6, R11, R9 */
		/* 8212C158h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212C158h case   29:*/		return 0x8212C15C;
		  /* 8212C15Ch */ case   30:  		/* bc 12, CR6_EQ, 12 */
		/* 8212C15Ch case   30:*/		if ( regs.CR[6].eq ) { return 0x8212C168;  }
		/* 8212C15Ch case   30:*/		return 0x8212C160;
		  /* 8212C160h */ case   31:  		/* li R27, 1 */
		/* 8212C160h case   31:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8212C160h case   31:*/		return 0x8212C164;
		  /* 8212C164h */ case   32:  		/* b 36 */
		/* 8212C164h case   32:*/		return 0x8212C188;
		/* 8212C164h case   32:*/		return 0x8212C168;
	}
	return 0x8212C168;
} // Block from 8212C0E4h-8212C168h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8212C168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C168);
		  /* 8212C168h */ case    0:  		/* rlwinm R11, R10, 0, 12, 31 */
		/* 8212C168h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 8212C168h case    0:*/		return 0x8212C16C;
		  /* 8212C16Ch */ case    1:  		/* cmplwi CR6, R11, 2 */
		/* 8212C16Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8212C16Ch case    1:*/		return 0x8212C170;
		  /* 8212C170h */ case    2:  		/* bc 4, CR6_GT, 16 */
		/* 8212C170h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8212C180;  }
		/* 8212C170h case    2:*/		return 0x8212C174;
	}
	return 0x8212C174;
} // Block from 8212C168h-8212C174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212C174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C174);
		  /* 8212C174h */ case    0:  		/* mr R3, R31 */
		/* 8212C174h case    0:*/		regs.R3 = regs.R31;
		/* 8212C174h case    0:*/		return 0x8212C178;
		  /* 8212C178h */ case    1:  		/* bl -286104 */
		/* 8212C178h case    1:*/		regs.LR = 0x8212C17C; return 0x820E63E0;
		/* 8212C178h case    1:*/		return 0x8212C17C;
		  /* 8212C17Ch */ case    2:  		/* mr R27, R3 */
		/* 8212C17Ch case    2:*/		regs.R27 = regs.R3;
		/* 8212C17Ch case    2:*/		return 0x8212C180;
	}
	return 0x8212C180;
} // Block from 8212C174h-8212C180h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212C180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C180);
		  /* 8212C180h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8212C180h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8212C180h case    0:*/		return 0x8212C184;
		  /* 8212C184h */ case    1:  		/* bc 12, CR6_LT, 156 */
		/* 8212C184h case    1:*/		if ( regs.CR[6].lt ) { return 0x8212C220;  }
		/* 8212C184h case    1:*/		return 0x8212C188;
	}
	return 0x8212C188;
} // Block from 8212C180h-8212C188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C188);
		  /* 8212C188h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212C188h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212C188h case    0:*/		return 0x8212C18C;
		  /* 8212C18Ch */ case    1:  		/* addi R30, R30, 1 */
		/* 8212C18Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8212C18Ch case    1:*/		return 0x8212C190;
		  /* 8212C190h */ case    2:  		/* addi R29, R29, 4 */
		/* 8212C190h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8212C190h case    2:*/		return 0x8212C194;
		  /* 8212C194h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8212C194h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8212C194h case    3:*/		return 0x8212C198;
		  /* 8212C198h */ case    4:  		/* bc 12, CR6_LT, -140 */
		/* 8212C198h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212C10C;  }
		/* 8212C198h case    4:*/		return 0x8212C19C;
	}
	return 0x8212C19C;
} // Block from 8212C188h-8212C19Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C19C);
		  /* 8212C19Ch */ case    0:  		/* mr R3, R31 */
		/* 8212C19Ch case    0:*/		regs.R3 = regs.R31;
		/* 8212C19Ch case    0:*/		return 0x8212C1A0;
		  /* 8212C1A0h */ case    1:  		/* bl -293312 */
		/* 8212C1A0h case    1:*/		regs.LR = 0x8212C1A4; return 0x820E47E0;
		/* 8212C1A0h case    1:*/		return 0x8212C1A4;
		  /* 8212C1A4h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 8212C1A4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8212C1A4h case    2:*/		return 0x8212C1A8;
		  /* 8212C1A8h */ case    3:  		/* li R11, 0 */
		/* 8212C1A8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212C1A8h case    3:*/		return 0x8212C1AC;
		  /* 8212C1ACh */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8212C1ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8212C1ACh case    4:*/		return 0x8212C1B0;
		  /* 8212C1B0h */ case    5:  		/* bc 4, CR6_GT, 108 */
		/* 8212C1B0h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8212C21C;  }
		/* 8212C1B0h case    5:*/		return 0x8212C1B4;
		  /* 8212C1B4h */ case    6:  		/* li R9, 0 */
		/* 8212C1B4h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212C1B4h case    6:*/		return 0x8212C1B8;
		  /* 8212C1B8h */ case    7:  		/* lwz R10, <#[R31 + 20]> */
		/* 8212C1B8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212C1B8h case    7:*/		return 0x8212C1BC;
		  /* 8212C1BCh */ case    8:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8212C1BCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8212C1BCh case    8:*/		return 0x8212C1C0;
		  /* 8212C1C0h */ case    9:  		/* lwz R8, <#[R10 + 84]> */
		/* 8212C1C0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000054) );
		/* 8212C1C0h case    9:*/		return 0x8212C1C4;
		  /* 8212C1C4h */ case   10:  		/* cmpwi CR6, R8, -1 */
		/* 8212C1C4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 8212C1C4h case   10:*/		return 0x8212C1C8;
		  /* 8212C1C8h */ case   11:  		/* bc 4, CR6_EQ, 64 */
		/* 8212C1C8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8212C208;  }
		/* 8212C1C8h case   11:*/		return 0x8212C1CC;
		  /* 8212C1CCh */ case   12:  		/* lwz R8, <#[R10 + 4]> */
		/* 8212C1CCh case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 8212C1CCh case   12:*/		return 0x8212C1D0;
	}
	return 0x8212C1D0;
} // Block from 8212C19Ch-8212C1D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212C1D0h
// Function '?ParseEx@CParse@D3DXShader@@QAAJPAVCPreProcessor@2@KPAPAVCNode@2@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C1D0);
		  /* 8212C1D0h */ case    0:  		/* lwz R7, <#[R31 + 16]> */
		/* 8212C1D0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 8212C1D0h case    0:*/		return 0x8212C1D4;
		  /* 8212C1D4h */ case    1:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212C1D4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212C1D4h case    1:*/		return 0x8212C1D8;
		  /* 8212C1D8h */ case    2:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8212C1D8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212C1D8h case    2:*/		return 0x8212C1DC;
		  /* 8212C1DCh */ case    3:  		/* lwz R8, <#[R8 + 4]> */
		/* 8212C1DCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 8212C1DCh case    3:*/		return 0x8212C1E0;
		  /* 8212C1E0h */ case    4:  		/* rlwinm. R8, R8, 0, 23, 23 */
		/* 8212C1E0h case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R8,regs.R8);
		/* 8212C1E0h case    4:*/		return 0x8212C1E4;
		  /* 8212C1E4h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8212C1E4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8212C208;  }
		/* 8212C1E4h case    5:*/		return 0x8212C1E8;
		  /* 8212C1E8h */ case    6:  		/* lwz R8, <#[R31 + 552]> */
		/* 8212C1E8h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000228) );
		/* 8212C1E8h case    6:*/		return 0x8212C1EC;
		  /* 8212C1ECh */ case    7:  		/* cmplw CR6, R8, R11 */
		/* 8212C1ECh case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8212C1ECh case    7:*/		return 0x8212C1F0;
		  /* 8212C1F0h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 8212C1F0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212C208;  }
		/* 8212C1F0h case    8:*/		return 0x8212C1F4;
		  /* 8212C1F4h */ case    9:  		/* lwz R8, <#[R31 + 548]> */
		/* 8212C1F4h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000224) );
		/* 8212C1F4h case    9:*/		return 0x8212C1F8;
		  /* 8212C1F8h */ case   10:  		/* cmplw CR6, R8, R11 */
		/* 8212C1F8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8212C1F8h case   10:*/		return 0x8212C1FC;
		  /* 8212C1FCh */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8212C1FCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8212C208;  }
		/* 8212C1FCh case   11:*/		return 0x8212C200;
		  /* 8212C200h */ case   12:  		/* lwz R8, <#[R31 + 116]> */
		/* 8212C200h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000074) );
		/* 8212C200h case   12:*/		return 0x8212C204;
		  /* 8212C204h */ case   13:  		/* stw R8, <#[R10 + 4]> */
		/* 8212C204h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 8212C204h case   13:*/		return 0x8212C208;
	}
	return 0x8212C208;
} // Block from 8212C1D0h-8212C208h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212C208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C208);
		  /* 8212C208h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8212C208h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8212C208h case    0:*/		return 0x8212C20C;
		  /* 8212C20Ch */ case    1:  		/* addi R11, R11, 1 */
		/* 8212C20Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212C20Ch case    1:*/		return 0x8212C210;
		  /* 8212C210h */ case    2:  		/* addi R9, R9, 4 */
		/* 8212C210h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212C210h case    2:*/		return 0x8212C214;
		  /* 8212C214h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8212C214h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212C214h case    3:*/		return 0x8212C218;
		  /* 8212C218h */ case    4:  		/* bc 12, CR6_LT, -96 */
		/* 8212C218h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212C1B8;  }
		/* 8212C218h case    4:*/		return 0x8212C21C;
	}
	return 0x8212C21C;
} // Block from 8212C208h-8212C21Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C21Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C21C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C21C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C21C);
		  /* 8212C21Ch */ case    0:  		/* li R27, 0 */
		/* 8212C21Ch case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8212C21Ch case    0:*/		return 0x8212C220;
	}
	return 0x8212C220;
} // Block from 8212C21Ch-8212C220h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212C220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C220);
		  /* 8212C220h */ case    0:  		/* mr R3, R27 */
		/* 8212C220h case    0:*/		regs.R3 = regs.R27;
		/* 8212C220h case    0:*/		return 0x8212C224;
		  /* 8212C224h */ case    1:  		/* addi R1, R1, 160 */
		/* 8212C224h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8212C224h case    1:*/		return 0x8212C228;
		  /* 8212C228h */ case    2:  		/* lfd FR30, <#[R1 - 72]> */
		/* 8212C228h case    2:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 8212C228h case    2:*/		return 0x8212C22C;
		  /* 8212C22Ch */ case    3:  		/* lfd FR31, <#[R1 - 64]> */
		/* 8212C22Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8212C22Ch case    3:*/		return 0x8212C230;
		  /* 8212C230h */ case    4:  		/* b -634768 */
		/* 8212C230h case    4:*/		return 0x820912A0;
		/* 8212C230h case    4:*/		return 0x8212C234;
		  /* 8212C234h */ case    5:  		/* nop */
		/* 8212C234h case    5:*/		cpu::op::nop();
		/* 8212C234h case    5:*/		return 0x8212C238;
	}
	return 0x8212C238;
} // Block from 8212C220h-8212C238h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212C238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C238);
		  /* 8212C238h */ case    0:  		/* mfspr R12, LR */
		/* 8212C238h case    0:*/		regs.R12 = regs.LR;
		/* 8212C238h case    0:*/		return 0x8212C23C;
		  /* 8212C23Ch */ case    1:  		/* bl -634872 */
		/* 8212C23Ch case    1:*/		regs.LR = 0x8212C240; return 0x82091244;
		/* 8212C23Ch case    1:*/		return 0x8212C240;
		  /* 8212C240h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8212C240h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8212C240h case    2:*/		return 0x8212C244;
		  /* 8212C244h */ case    3:  		/* mr R28, R3 */
		/* 8212C244h case    3:*/		regs.R28 = regs.R3;
		/* 8212C244h case    3:*/		return 0x8212C248;
		  /* 8212C248h */ case    4:  		/* mr R25, R4 */
		/* 8212C248h case    4:*/		regs.R25 = regs.R4;
		/* 8212C248h case    4:*/		return 0x8212C24C;
		  /* 8212C24Ch */ case    5:  		/* mr R26, R5 */
		/* 8212C24Ch case    5:*/		regs.R26 = regs.R5;
		/* 8212C24Ch case    5:*/		return 0x8212C250;
		  /* 8212C250h */ case    6:  		/* mr R23, R6 */
		/* 8212C250h case    6:*/		regs.R23 = regs.R6;
		/* 8212C250h case    6:*/		return 0x8212C254;
		  /* 8212C254h */ case    7:  		/* li R24, 0 */
		/* 8212C254h case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8212C254h case    7:*/		return 0x8212C258;
		  /* 8212C258h */ case    8:  		/* cmpwi CR6, R7, 0 */
		/* 8212C258h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8212C258h case    8:*/		return 0x8212C25C;
		  /* 8212C25Ch */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 8212C25Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8212C268;  }
		/* 8212C25Ch case    9:*/		return 0x8212C260;
		  /* 8212C260h */ case   10:  		/* lis R24, 15 */
		/* 8212C260h case   10:*/		cpu::op::lis<0>(regs,&regs.R24,0xF);
		/* 8212C260h case   10:*/		return 0x8212C264;
		  /* 8212C264h */ case   11:  		/* b 184 */
		/* 8212C264h case   11:*/		return 0x8212C31C;
		/* 8212C264h case   11:*/		return 0x8212C268;
	}
	return 0x8212C268;
} // Block from 8212C238h-8212C268h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212C268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C268);
		  /* 8212C268h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 8212C268h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8212C268h case    0:*/		return 0x8212C26C;
		  /* 8212C26Ch */ case    1:  		/* lwz R10, <#[R28 + 20]> */
		/* 8212C26Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8212C26Ch case    1:*/		return 0x8212C270;
		  /* 8212C270h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212C270h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212C270h case    2:*/		return 0x8212C274;
		  /* 8212C274h */ case    3:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8212C274h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212C274h case    3:*/		return 0x8212C278;
		  /* 8212C278h */ case    4:  		/* lwz R11, <#[R11 + 60]> */
		/* 8212C278h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212C278h case    4:*/		return 0x8212C27C;
		  /* 8212C27Ch */ case    5:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8212C27Ch case    5:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8212C27Ch case    5:*/		return 0x8212C280;
		  /* 8212C280h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 8212C280h case    6:*/		if ( regs.CR[0].eq ) { return 0x8212C288;  }
		/* 8212C280h case    6:*/		return 0x8212C284;
		  /* 8212C284h */ case    7:  		/* lis R24, 16 */
		/* 8212C284h case    7:*/		cpu::op::lis<0>(regs,&regs.R24,0x10);
		/* 8212C284h case    7:*/		return 0x8212C288;
	}
	return 0x8212C288;
} // Block from 8212C268h-8212C288h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212C288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C288);
		  /* 8212C288h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8212C288h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8212C288h case    0:*/		return 0x8212C28C;
		  /* 8212C28Ch */ case    1:  		/* bc 12, CR6_EQ, 144 */
		/* 8212C28Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8212C31C;  }
		/* 8212C28Ch case    1:*/		return 0x8212C290;
		  /* 8212C290h */ case    2:  		/* lis R11, -32254 */
		/* 8212C290h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8212C290h case    2:*/		return 0x8212C294;
		  /* 8212C294h */ case    3:  		/* mr R30, R25 */
		/* 8212C294h case    3:*/		regs.R30 = regs.R25;
		/* 8212C294h case    3:*/		return 0x8212C298;
		  /* 8212C298h */ case    4:  		/* mr R29, R26 */
		/* 8212C298h case    4:*/		regs.R29 = regs.R26;
		/* 8212C298h case    4:*/		return 0x8212C29C;
		  /* 8212C29Ch */ case    5:  		/* addi R27, R11, -31760 */
		/* 8212C29Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF83F0);
		/* 8212C29Ch case    5:*/		return 0x8212C2A0;
		  /* 8212C2A0h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 8212C2A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212C2A0h case    6:*/		return 0x8212C2A4;
		  /* 8212C2A4h */ case    7:  		/* li R31, 0 */
		/* 8212C2A4h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212C2A4h case    7:*/		return 0x8212C2A8;
		  /* 8212C2A8h */ case    8:  		/* lwz R10, <#[R28 + 20]> */
		/* 8212C2A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8212C2A8h case    8:*/		return 0x8212C2AC;
		  /* 8212C2ACh */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212C2ACh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212C2ACh case    9:*/		return 0x8212C2B0;
		  /* 8212C2B0h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8212C2B0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212C2B0h case   10:*/		return 0x8212C2B4;
		  /* 8212C2B4h */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 8212C2B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8212C2B4h case   11:*/		return 0x8212C2B8;
		  /* 8212C2B8h */ case   12:  		/* cmplwi CR6, R11, 1 */
		/* 8212C2B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8212C2B8h case   12:*/		return 0x8212C2BC;
		  /* 8212C2BCh */ case   13:  		/* bc 12, CR6_LT, 44 */
		/* 8212C2BCh case   13:*/		if ( regs.CR[6].lt ) { return 0x8212C2E8;  }
		/* 8212C2BCh case   13:*/		return 0x8212C2C0;
		  /* 8212C2C0h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 8212C2C0h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212C2E0;  }
		/* 8212C2C0h case   14:*/		return 0x8212C2C4;
		  /* 8212C2C4h */ case   15:  		/* cmplwi CR6, R11, 3 */
		/* 8212C2C4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8212C2C4h case   15:*/		return 0x8212C2C8;
		  /* 8212C2C8h */ case   16:  		/* bc 12, CR6_LT, 16 */
		/* 8212C2C8h case   16:*/		if ( regs.CR[6].lt ) { return 0x8212C2D8;  }
		/* 8212C2C8h case   16:*/		return 0x8212C2CC;
		  /* 8212C2CCh */ case   17:  		/* bc 4, CR6_EQ, 32 */
		/* 8212C2CCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x8212C2EC;  }
		/* 8212C2CCh case   17:*/		return 0x8212C2D0;
		  /* 8212C2D0h */ case   18:  		/* lis R31, 8 */
		/* 8212C2D0h case   18:*/		cpu::op::lis<0>(regs,&regs.R31,0x8);
		/* 8212C2D0h case   18:*/		return 0x8212C2D4;
		  /* 8212C2D4h */ case   19:  		/* b 24 */
		/* 8212C2D4h case   19:*/		return 0x8212C2EC;
		/* 8212C2D4h case   19:*/		return 0x8212C2D8;
	}
	return 0x8212C2D8;
} // Block from 8212C288h-8212C2D8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8212C2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C2D8);
		  /* 8212C2D8h */ case    0:  		/* lis R31, 4 */
		/* 8212C2D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x4);
		/* 8212C2D8h case    0:*/		return 0x8212C2DC;
		  /* 8212C2DCh */ case    1:  		/* b 16 */
		/* 8212C2DCh case    1:*/		return 0x8212C2EC;
		/* 8212C2DCh case    1:*/		return 0x8212C2E0;
	}
	return 0x8212C2E0;
} // Block from 8212C2D8h-8212C2E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C2E0);
		  /* 8212C2E0h */ case    0:  		/* lis R31, 2 */
		/* 8212C2E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x2);
		/* 8212C2E0h case    0:*/		return 0x8212C2E4;
		  /* 8212C2E4h */ case    1:  		/* b 8 */
		/* 8212C2E4h case    1:*/		return 0x8212C2EC;
		/* 8212C2E4h case    1:*/		return 0x8212C2E8;
	}
	return 0x8212C2E8;
} // Block from 8212C2E0h-8212C2E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C2E8);
		  /* 8212C2E8h */ case    0:  		/* lis R31, 1 */
		/* 8212C2E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x1);
		/* 8212C2E8h case    0:*/		return 0x8212C2EC;
	}
	return 0x8212C2EC;
} // Block from 8212C2E8h-8212C2ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212C2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C2EC);
		  /* 8212C2ECh */ case    0:  		/* and. R11, R31, R24 */
		/* 8212C2ECh case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R31,regs.R24);
		/* 8212C2ECh case    0:*/		return 0x8212C2F0;
		  /* 8212C2F0h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 8212C2F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8212C30C;  }
		/* 8212C2F0h case    1:*/		return 0x8212C2F4;
		  /* 8212C2F4h */ case    2:  		/* lwz R11, <#[R28 + 260]> */
		/* 8212C2F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 8212C2F4h case    2:*/		return 0x8212C2F8;
		  /* 8212C2F8h */ case    3:  		/* mr R6, R27 */
		/* 8212C2F8h case    3:*/		regs.R6 = regs.R27;
		/* 8212C2F8h case    3:*/		return 0x8212C2FC;
		  /* 8212C2FCh */ case    4:  		/* li R5, 4821 */
		/* 8212C2FCh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x12D5);
		/* 8212C2FCh case    4:*/		return 0x8212C300;
		  /* 8212C300h */ case    5:  		/* mr R3, R28 */
		/* 8212C300h case    5:*/		regs.R3 = regs.R28;
		/* 8212C300h case    5:*/		return 0x8212C304;
		  /* 8212C304h */ case    6:  		/* lwz R4, <#[R11 + 60]> */
		/* 8212C304h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212C304h case    6:*/		return 0x8212C308;
		  /* 8212C308h */ case    7:  		/* bl -121816 */
		/* 8212C308h case    7:*/		regs.LR = 0x8212C30C; return 0x8210E730;
		/* 8212C308h case    7:*/		return 0x8212C30C;
	}
	return 0x8212C30C;
} // Block from 8212C2ECh-8212C30Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212C30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C30C);
		  /* 8212C30Ch */ case    0:  		/* addic. R29, R29, -1 */
		/* 8212C30Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8212C30Ch case    0:*/		return 0x8212C310;
		  /* 8212C310h */ case    1:  		/* or R24, R31, R24 */
		/* 8212C310h case    1:*/		cpu::op::or<0>(regs,&regs.R24,regs.R31,regs.R24);
		/* 8212C310h case    1:*/		return 0x8212C314;
		  /* 8212C314h */ case    2:  		/* addi R30, R30, 4 */
		/* 8212C314h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212C314h case    2:*/		return 0x8212C318;
		  /* 8212C318h */ case    3:  		/* bc 4, CR0_EQ, -120 */
		/* 8212C318h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8212C2A0;  }
		/* 8212C318h case    3:*/		return 0x8212C31C;
	}
	return 0x8212C31C;
} // Block from 8212C30Ch-8212C31Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212C31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C31C);
		  /* 8212C31Ch */ case    0:  		/* lwz R7, <#[R28 + 204]> */
		/* 8212C31Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x000000CC) );
		/* 8212C31Ch case    0:*/		return 0x8212C320;
		  /* 8212C320h */ case    1:  		/* rlwinm. R11, R7, 0, 26, 26 */
		/* 8212C320h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R7);
		/* 8212C320h case    1:*/		return 0x8212C324;
		  /* 8212C324h */ case    2:  		/* bc 4, CR0_EQ, 124 */
		/* 8212C324h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8212C3A0;  }
		/* 8212C324h case    2:*/		return 0x8212C328;
		  /* 8212C328h */ case    3:  		/* li R9, 0 */
		/* 8212C328h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212C328h case    3:*/		return 0x8212C32C;
		  /* 8212C32Ch */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8212C32Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8212C32Ch case    4:*/		return 0x8212C330;
		  /* 8212C330h */ case    5:  		/* bc 12, CR6_EQ, 104 */
		/* 8212C330h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212C398;  }
		/* 8212C330h case    5:*/		return 0x8212C334;
		  /* 8212C334h */ case    6:  		/* lwz R8, <#[R28 + 20]> */
		/* 8212C334h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 8212C334h case    6:*/		return 0x8212C338;
		  /* 8212C338h */ case    7:  		/* mr R10, R25 */
		/* 8212C338h case    7:*/		regs.R10 = regs.R25;
		/* 8212C338h case    7:*/		return 0x8212C33C;
		  /* 8212C33Ch */ case    8:  		/* lwz R11, <#[R10]> */
		/* 8212C33Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212C33Ch case    8:*/		return 0x8212C340;
		  /* 8212C340h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212C340h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212C340h case    9:*/		return 0x8212C344;
		  /* 8212C344h */ case   10:  		/* lwzx R11, <#[R11 + R8]> */
		/* 8212C344h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212C344h case   10:*/		return 0x8212C348;
		  /* 8212C348h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 8212C348h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8212C348h case   11:*/		return 0x8212C34C;
		  /* 8212C34Ch */ case   12:  		/* rlwinm. R6, R6, 0, 6, 6 */
		/* 8212C34Ch case   12:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R6,regs.R6);
		/* 8212C34Ch case   12:*/		return 0x8212C350;
		  /* 8212C350h */ case   13:  		/* bc 4, CR0_EQ, 56 */
		/* 8212C350h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8212C388;  }
		/* 8212C350h case   13:*/		return 0x8212C354;
		  /* 8212C354h */ case   14:  		/* lwz R6, <#[R11 + 4]> */
		/* 8212C354h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8212C354h case   14:*/		return 0x8212C358;
		  /* 8212C358h */ case   15:  		/* lwz R5, <#[R28 + 16]> */
		/* 8212C358h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000010) );
		/* 8212C358h case   15:*/		return 0x8212C35C;
		  /* 8212C35Ch */ case   16:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8212C35Ch case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8212C35Ch case   16:*/		return 0x8212C360;
		  /* 8212C360h */ case   17:  		/* lwzx R6, <#[R6 + R5]> */
		/* 8212C360h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 8212C360h case   17:*/		return 0x8212C364;
		  /* 8212C364h */ case   18:  		/* lwz R6, <#[R6 + 4]> */
		/* 8212C364h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 8212C364h case   18:*/		return 0x8212C368;
	}
	return 0x8212C368;
} // Block from 8212C31Ch-8212C368h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212C368h
// Function '??0CPSProgram@D3DXShader@@QAA@HH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C368);
		  /* 8212C368h */ case    0:  		/* rlwinm. R6, R6, 0, 31, 31 */
		/* 8212C368h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R6,regs.R6);
		/* 8212C368h case    0:*/		return 0x8212C36C;
		  /* 8212C36Ch */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 8212C36Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8212C398;  }
		/* 8212C36Ch case    1:*/		return 0x8212C370;
		  /* 8212C370h */ case    2:  		/* lwz R6, <#[R11 + 72]> */
		/* 8212C370h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000048) );
		/* 8212C370h case    2:*/		return 0x8212C374;
		  /* 8212C374h */ case    3:  		/* cmpwi CR6, R6, -1 */
		/* 8212C374h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R6,0xFFFFFFFF);
		/* 8212C374h case    3:*/		return 0x8212C378;
		  /* 8212C378h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 8212C378h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212C398;  }
		/* 8212C378h case    4:*/		return 0x8212C37C;
		  /* 8212C37Ch */ case    5:  		/* lwz R11, <#[R11 + 84]> */
		/* 8212C37Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8212C37Ch case    5:*/		return 0x8212C380;
		  /* 8212C380h */ case    6:  		/* cmpwi CR6, R11, -1 */
		/* 8212C380h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212C380h case    6:*/		return 0x8212C384;
		  /* 8212C384h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 8212C384h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8212C398;  }
		/* 8212C384h case    7:*/		return 0x8212C388;
	}
	return 0x8212C388;
} // Block from 8212C368h-8212C388h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212C388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C388);
		  /* 8212C388h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212C388h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212C388h case    0:*/		return 0x8212C38C;
		  /* 8212C38Ch */ case    1:  		/* addi R10, R10, 4 */
		/* 8212C38Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212C38Ch case    1:*/		return 0x8212C390;
		  /* 8212C390h */ case    2:  		/* cmplw CR6, R9, R26 */
		/* 8212C390h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 8212C390h case    2:*/		return 0x8212C394;
		  /* 8212C394h */ case    3:  		/* bc 12, CR6_LT, -88 */
		/* 8212C394h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212C33C;  }
		/* 8212C394h case    3:*/		return 0x8212C398;
	}
	return 0x8212C398;
} // Block from 8212C388h-8212C398h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212C398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C398);
		  /* 8212C398h */ case    0:  		/* cmplw CR6, R9, R26 */
		/* 8212C398h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 8212C398h case    0:*/		return 0x8212C39C;
		  /* 8212C39Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8212C39Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212C3A4;  }
		/* 8212C39Ch case    1:*/		return 0x8212C3A0;
	}
	return 0x8212C3A0;
} // Block from 8212C398h-8212C3A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C3A0);
		  /* 8212C3A0h */ case    0:  		/* oris R24, R24, 32 */
		/* 8212C3A0h case    0:*/		cpu::op::oris<0>(regs,&regs.R24,regs.R24,0x20);
		/* 8212C3A0h case    0:*/		return 0x8212C3A4;
	}
	return 0x8212C3A4;
} // Block from 8212C3A0h-8212C3A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212C3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C3A4);
		  /* 8212C3A4h */ case    0:  		/* rlwinm. R11, R7, 0, 31, 31 */
		/* 8212C3A4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R7);
		/* 8212C3A4h case    0:*/		return 0x8212C3A8;
		  /* 8212C3A8h */ case    1:  		/* bc 12, CR0_EQ, 76 */
		/* 8212C3A8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8212C3F4;  }
		/* 8212C3A8h case    1:*/		return 0x8212C3AC;
		  /* 8212C3ACh */ case    2:  		/* lwz R11, <#[R28 + 296]> */
		/* 8212C3ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000128) );
		/* 8212C3ACh case    2:*/		return 0x8212C3B0;
		  /* 8212C3B0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8212C3B0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212C3B0h case    3:*/		return 0x8212C3B4;
		  /* 8212C3B4h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 8212C3B4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212C3F4;  }
		/* 8212C3B4h case    4:*/		return 0x8212C3B8;
		  /* 8212C3B8h */ case    5:  		/* li R11, 0 */
		/* 8212C3B8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212C3B8h case    5:*/		return 0x8212C3BC;
		  /* 8212C3BCh */ case    6:  		/* cmplwi CR6, R26, 0 */
		/* 8212C3BCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8212C3BCh case    6:*/		return 0x8212C3C0;
		  /* 8212C3C0h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 8212C3C0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8212C3F4;  }
		/* 8212C3C0h case    7:*/		return 0x8212C3C4;
		  /* 8212C3C4h */ case    8:  		/* mtspr CTR, R26 */
		/* 8212C3C4h case    8:*/		regs.CTR = regs.R26;
		/* 8212C3C4h case    8:*/		return 0x8212C3C8;
		  /* 8212C3C8h */ case    9:  		/* addi R10, R25, -4 */
		/* 8212C3C8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0xFFFFFFFC);
		/* 8212C3C8h case    9:*/		return 0x8212C3CC;
		  /* 8212C3CCh */ case   10:  		/* lwz R8, <#[R28 + 300]> */
		/* 8212C3CCh case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x0000012C) );
		/* 8212C3CCh case   10:*/		return 0x8212C3D0;
		  /* 8212C3D0h */ case   11:  		/* lwzu R9, <#[R10 + 4]> */
		/* 8212C3D0h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8212C3D0h case   11:*/		return 0x8212C3D4;
		  /* 8212C3D4h */ case   12:  		/* mulli R8, R8, 6 */
		/* 8212C3D4h case   12:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x6);
		/* 8212C3D4h case   12:*/		return 0x8212C3D8;
	}
	return 0x8212C3D8;
} // Block from 8212C3A4h-8212C3D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212C3D8h
// Function '?GenerateCode@CPSProgram@D3DXShader@@UAAJPAPAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C3D8);
		  /* 8212C3D8h */ case    0:  		/* lwz R7, <#[R28 + 296]> */
		/* 8212C3D8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000128) );
		/* 8212C3D8h case    0:*/		return 0x8212C3DC;
		  /* 8212C3DCh */ case    1:  		/* add R8, R8, R11 */
		/* 8212C3DCh case    1:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 8212C3DCh case    1:*/		return 0x8212C3E0;
		  /* 8212C3E0h */ case    2:  		/* addi R11, R11, 1 */
		/* 8212C3E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212C3E0h case    2:*/		return 0x8212C3E4;
		  /* 8212C3E4h */ case    3:  		/* addi R8, R8, -4 */
		/* 8212C3E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFC);
		/* 8212C3E4h case    3:*/		return 0x8212C3E8;
		  /* 8212C3E8h */ case    4:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212C3E8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212C3E8h case    4:*/		return 0x8212C3EC;
		  /* 8212C3ECh */ case    5:  		/* stwx R9, <#[R8 + R7]> */
		/* 8212C3ECh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212C3ECh case    5:*/		return 0x8212C3F0;
		  /* 8212C3F0h */ case    6:  		/* bc 16, CR0_LT, -36 */
		/* 8212C3F0h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212C3CC;  }
		/* 8212C3F0h case    6:*/		return 0x8212C3F4;
	}
	return 0x8212C3F4;
} // Block from 8212C3D8h-8212C3F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212C3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C3F4);
		  /* 8212C3F4h */ case    0:  		/* stw R24, <#[R23]> */
		/* 8212C3F4h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R23 + 0x00000000) );
		/* 8212C3F4h case    0:*/		return 0x8212C3F8;
		  /* 8212C3F8h */ case    1:  		/* li R3, 0 */
		/* 8212C3F8h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212C3F8h case    1:*/		return 0x8212C3FC;
		  /* 8212C3FCh */ case    2:  		/* addi R1, R1, 160 */
		/* 8212C3FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8212C3FCh case    2:*/		return 0x8212C400;
		  /* 8212C400h */ case    3:  		/* b -635244 */
		/* 8212C400h case    3:*/		return 0x82091294;
		/* 8212C400h case    3:*/		return 0x8212C404;
		  /* 8212C404h */ case    4:  		/* nop */
		/* 8212C404h case    4:*/		cpu::op::nop();
		/* 8212C404h case    4:*/		return 0x8212C408;
	}
	return 0x8212C408;
} // Block from 8212C3F4h-8212C408h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C408);
		  /* 8212C408h */ case    0:  		/* mfspr R12, LR */
		/* 8212C408h case    0:*/		regs.R12 = regs.LR;
		/* 8212C408h case    0:*/		return 0x8212C40C;
		  /* 8212C40Ch */ case    1:  		/* bl -635336 */
		/* 8212C40Ch case    1:*/		regs.LR = 0x8212C410; return 0x82091244;
		/* 8212C40Ch case    1:*/		return 0x8212C410;
		  /* 8212C410h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8212C410h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8212C410h case    2:*/		return 0x8212C414;
		  /* 8212C414h */ case    3:  		/* lwz R11, <#[R3 + 348]> */
		/* 8212C414h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000015C) );
		/* 8212C414h case    3:*/		return 0x8212C418;
		  /* 8212C418h */ case    4:  		/* mr R30, R3 */
		/* 8212C418h case    4:*/		regs.R30 = regs.R3;
		/* 8212C418h case    4:*/		return 0x8212C41C;
		  /* 8212C41Ch */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 8212C41Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212C41Ch case    5:*/		return 0x8212C420;
		  /* 8212C420h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8212C420h case    6:*/		if ( regs.CR[6].eq ) { return 0x8212C42C;  }
		/* 8212C420h case    6:*/		return 0x8212C424;
		  /* 8212C424h */ case    7:  		/* li R3, 0 */
		/* 8212C424h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212C424h case    7:*/		return 0x8212C428;
		  /* 8212C428h */ case    8:  		/* b 676 */
		/* 8212C428h case    8:*/		return 0x8212C6CC;
		/* 8212C428h case    8:*/		return 0x8212C42C;
	}
	return 0x8212C42C;
} // Block from 8212C408h-8212C42Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212C42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C42C);
		  /* 8212C42Ch */ case    0:  		/* li R11, 8 */
		/* 8212C42Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8212C42Ch case    0:*/		return 0x8212C430;
		  /* 8212C430h */ case    1:  		/* li R23, 0 */
		/* 8212C430h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8212C430h case    1:*/		return 0x8212C434;
		  /* 8212C434h */ case    2:  		/* addi R10, R1, 88 */
		/* 8212C434h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x58);
		/* 8212C434h case    2:*/		return 0x8212C438;
	}
	return 0x8212C438;
} // Block from 8212C42Ch-8212C438h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212C438h
// Function '?InitCaps@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C438);
		  /* 8212C438h */ case    0:  		/* mr R24, R23 */
		/* 8212C438h case    0:*/		regs.R24 = regs.R23;
		/* 8212C438h case    0:*/		return 0x8212C43C;
		  /* 8212C43Ch */ case    1:  		/* mr R25, R23 */
		/* 8212C43Ch case    1:*/		regs.R25 = regs.R23;
		/* 8212C43Ch case    1:*/		return 0x8212C440;
		  /* 8212C440h */ case    2:  		/* mtspr CTR, R11 */
		/* 8212C440h case    2:*/		regs.CTR = regs.R11;
		/* 8212C440h case    2:*/		return 0x8212C444;
		  /* 8212C444h */ case    3:  		/* mr R9, R23 */
		/* 8212C444h case    3:*/		regs.R9 = regs.R23;
		/* 8212C444h case    3:*/		return 0x8212C448;
		  /* 8212C448h */ case    4:  		/* stdu R9, <#[R10 + 8]> */
		/* 8212C448h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8212C448h case    4:*/		return 0x8212C44C;
		  /* 8212C44Ch */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 8212C44Ch case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212C448;  }
		/* 8212C44Ch case    5:*/		return 0x8212C450;
		  /* 8212C450h */ case    6:  		/* addi R11, R1, 80 */
		/* 8212C450h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8212C450h case    6:*/		return 0x8212C454;
		  /* 8212C454h */ case    7:  		/* stw R23, <#[R30 + 540]> */
		/* 8212C454h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R30 + 0x0000021C) );
		/* 8212C454h case    7:*/		return 0x8212C458;
		  /* 8212C458h */ case    8:  		/* li R5, 32 */
		/* 8212C458h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8212C458h case    8:*/		return 0x8212C45C;
		  /* 8212C45Ch */ case    9:  		/* stw R23, <#[R30 + 544]> */
		/* 8212C45Ch case    9:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R30 + 0x00000220) );
		/* 8212C45Ch case    9:*/		return 0x8212C460;
		  /* 8212C460h */ case   10:  		/* li R4, 0 */
		/* 8212C460h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212C460h case   10:*/		return 0x8212C464;
		  /* 8212C464h */ case   11:  		/* addi R3, R30, 508 */
		/* 8212C464h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x1FC);
		/* 8212C464h case   11:*/		return 0x8212C468;
		  /* 8212C468h */ case   12:  		/* std R23, <#[R11]> */
		/* 8212C468h case   12:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 8212C468h case   12:*/		return 0x8212C46C;
		  /* 8212C46Ch */ case   13:  		/* std R23, <#[R11 + 8]> */
		/* 8212C46Ch case   13:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R11 + 0x00000008) );
		/* 8212C46Ch case   13:*/		return 0x8212C470;
		  /* 8212C470h */ case   14:  		/* bl -635184 */
		/* 8212C470h case   14:*/		regs.LR = 0x8212C474; return 0x82091340;
		/* 8212C470h case   14:*/		return 0x8212C474;
		  /* 8212C474h */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 8212C474h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8212C474h case   15:*/		return 0x8212C478;
		  /* 8212C478h */ case   16:  		/* mr R26, R23 */
		/* 8212C478h case   16:*/		regs.R26 = regs.R23;
		/* 8212C478h case   16:*/		return 0x8212C47C;
		  /* 8212C47Ch */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 8212C47Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212C47Ch case   17:*/		return 0x8212C480;
		  /* 8212C480h */ case   18:  		/* bc 4, CR6_GT, 392 */
		/* 8212C480h case   18:*/		if ( !regs.CR[6].gt ) { return 0x8212C608;  }
		/* 8212C480h case   18:*/		return 0x8212C484;
		  /* 8212C484h */ case   19:  		/* lis R11, -32254 */
		/* 8212C484h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8212C484h case   19:*/		return 0x8212C488;
		  /* 8212C488h */ case   20:  		/* mr R28, R23 */
		/* 8212C488h case   20:*/		regs.R28 = regs.R23;
		/* 8212C488h case   20:*/		return 0x8212C48C;
		  /* 8212C48Ch */ case   21:  		/* addi R27, R11, -14656 */
		/* 8212C48Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFC6C0);
		/* 8212C48Ch case   21:*/		return 0x8212C490;
		  /* 8212C490h */ case   22:  		/* lwz R11, <#[R30 + 20]> */
		/* 8212C490h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8212C490h case   22:*/		return 0x8212C494;
		  /* 8212C494h */ case   23:  		/* lwz R10, <#[R30 + 16]> */
		/* 8212C494h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8212C494h case   23:*/		return 0x8212C498;
		  /* 8212C498h */ case   24:  		/* lwzx R31, <#[R11 + R28]> */
		/* 8212C498h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8212C498h case   24:*/		return 0x8212C49C;
		  /* 8212C49Ch */ case   25:  		/* lwz R11, <#[R31 + 4]> */
		/* 8212C49Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8212C49Ch case   25:*/		return 0x8212C4A0;
		  /* 8212C4A0h */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212C4A0h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212C4A0h case   26:*/		return 0x8212C4A4;
		  /* 8212C4A4h */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8212C4A4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212C4A4h case   27:*/		return 0x8212C4A8;
		  /* 8212C4A8h */ case   28:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212C4A8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212C4A8h case   28:*/		return 0x8212C4AC;
		  /* 8212C4ACh */ case   29:  		/* rlwinm. R10, R11, 0, 26, 26 */
		/* 8212C4ACh case   29:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R11);
		/* 8212C4ACh case   29:*/		return 0x8212C4B0;
		  /* 8212C4B0h */ case   30:  		/* bc 12, CR0_EQ, 184 */
		/* 8212C4B0h case   30:*/		if ( regs.CR[0].eq ) { return 0x8212C568;  }
		/* 8212C4B0h case   30:*/		return 0x8212C4B4;
		  /* 8212C4B4h */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8212C4B4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212C4B4h case   31:*/		return 0x8212C4B8;
		  /* 8212C4B8h */ case   32:  		/* mr R3, R30 */
		/* 8212C4B8h case   32:*/		regs.R3 = regs.R30;
		/* 8212C4B8h case   32:*/		return 0x8212C4BC;
		  /* 8212C4BCh */ case   33:  		/* lwz R4, <#[R31 + 108]> */
		/* 8212C4BCh case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8212C4BCh case   33:*/		return 0x8212C4C0;
		  /* 8212C4C0h */ case   34:  		/* lwz R11, <#[R11 + 112]> */
		/* 8212C4C0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8212C4C0h case   34:*/		return 0x8212C4C4;
		  /* 8212C4C4h */ case   35:  		/* mtspr CTR, R11 */
		/* 8212C4C4h case   35:*/		regs.CTR = regs.R11;
		/* 8212C4C4h case   35:*/		return 0x8212C4C8;
		  /* 8212C4C8h */ case   36:  		/* bcctrl 20, CR0_LT */
		/* 8212C4C8h case   36:*/		if ( 1 ) { regs.LR = 0x8212C4CC; return (uint32)regs.CTR; }
		/* 8212C4C8h case   36:*/		return 0x8212C4CC;
		  /* 8212C4CCh */ case   37:  		/* lwz R11, <#[R30]> */
		/* 8212C4CCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212C4CCh case   37:*/		return 0x8212C4D0;
		  /* 8212C4D0h */ case   38:  		/* mr R29, R3 */
		/* 8212C4D0h case   38:*/		regs.R29 = regs.R3;
		/* 8212C4D0h case   38:*/		return 0x8212C4D4;
		  /* 8212C4D4h */ case   39:  		/* mr R3, R30 */
		/* 8212C4D4h case   39:*/		regs.R3 = regs.R30;
		/* 8212C4D4h case   39:*/		return 0x8212C4D8;
		  /* 8212C4D8h */ case   40:  		/* lwz R4, <#[R31 + 108]> */
		/* 8212C4D8h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8212C4D8h case   40:*/		return 0x8212C4DC;
		  /* 8212C4DCh */ case   41:  		/* lwz R11, <#[R11 + 116]> */
		/* 8212C4DCh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8212C4DCh case   41:*/		return 0x8212C4E0;
		  /* 8212C4E0h */ case   42:  		/* mtspr CTR, R11 */
		/* 8212C4E0h case   42:*/		regs.CTR = regs.R11;
		/* 8212C4E0h case   42:*/		return 0x8212C4E4;
		  /* 8212C4E4h */ case   43:  		/* bcctrl 20, CR0_LT */
		/* 8212C4E4h case   43:*/		if ( 1 ) { regs.LR = 0x8212C4E8; return (uint32)regs.CTR; }
		/* 8212C4E4h case   43:*/		return 0x8212C4E8;
		  /* 8212C4E8h */ case   44:  		/* cmplwi CR6, R29, 11 */
		/* 8212C4E8h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000B);
		/* 8212C4E8h case   44:*/		return 0x8212C4EC;
		  /* 8212C4ECh */ case   45:  		/* bc 12, CR6_EQ, 72 */
		/* 8212C4ECh case   45:*/		if ( regs.CR[6].eq ) { return 0x8212C534;  }
		/* 8212C4ECh case   45:*/		return 0x8212C4F0;
		  /* 8212C4F0h */ case   46:  		/* cmplwi CR6, R29, 13 */
		/* 8212C4F0h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000D);
		/* 8212C4F0h case   46:*/		return 0x8212C4F4;
		  /* 8212C4F4h */ case   47:  		/* bc 4, CR6_EQ, 256 */
		/* 8212C4F4h case   47:*/		if ( !regs.CR[6].eq ) { return 0x8212C5F4;  }
		/* 8212C4F4h case   47:*/		return 0x8212C4F8;
		  /* 8212C4F8h */ case   48:  		/* cmplwi CR6, R3, 0 */
		/* 8212C4F8h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212C4F8h case   48:*/		return 0x8212C4FC;
		  /* 8212C4FCh */ case   49:  		/* bc 4, CR6_EQ, 248 */
		/* 8212C4FCh case   49:*/		if ( !regs.CR[6].eq ) { return 0x8212C5F4;  }
		/* 8212C4FCh case   49:*/		return 0x8212C500;
		  /* 8212C500h */ case   50:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212C500h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212C500h case   50:*/		return 0x8212C504;
		  /* 8212C504h */ case   51:  		/* cmplwi CR6, R11, 0 */
		/* 8212C504h case   51:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212C504h case   51:*/		return 0x8212C508;
		  /* 8212C508h */ case   52:  		/* bc 12, CR6_EQ, 236 */
		/* 8212C508h case   52:*/		if ( regs.CR[6].eq ) { return 0x8212C5F4;  }
		/* 8212C508h case   52:*/		return 0x8212C50C;
		  /* 8212C50Ch */ case   53:  		/* cmpwi CR6, R25, 0 */
		/* 8212C50Ch case   53:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8212C50Ch case   53:*/		return 0x8212C510;
		  /* 8212C510h */ case   54:  		/* bc 4, CR6_EQ, 228 */
		/* 8212C510h case   54:*/		if ( !regs.CR[6].eq ) { return 0x8212C5F4;  }
		/* 8212C510h case   54:*/		return 0x8212C514;
		  /* 8212C514h */ case   55:  		/* mr R6, R27 */
		/* 8212C514h case   55:*/		regs.R6 = regs.R27;
		/* 8212C514h case   55:*/		return 0x8212C518;
		  /* 8212C518h */ case   56:  		/* lwz R4, <#[R31 + 96]> */
		/* 8212C518h case   56:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000060) );
		/* 8212C518h case   56:*/		return 0x8212C51C;
		  /* 8212C51Ch */ case   57:  		/* li R5, 4528 */
		/* 8212C51Ch case   57:*/		cpu::op::li<0>(regs,&regs.R5,0x11B0);
		/* 8212C51Ch case   57:*/		return 0x8212C520;
		  /* 8212C520h */ case   58:  		/* mr R3, R30 */
		/* 8212C520h case   58:*/		regs.R3 = regs.R30;
		/* 8212C520h case   58:*/		return 0x8212C524;
		  /* 8212C524h */ case   59:  		/* bl -122356 */
		/* 8212C524h case   59:*/		regs.LR = 0x8212C528; return 0x8210E730;
		/* 8212C524h case   59:*/		return 0x8212C528;
		  /* 8212C528h */ case   60:  		/* li R25, 1 */
		/* 8212C528h case   60:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8212C528h case   60:*/		return 0x8212C52C;
		  /* 8212C52Ch */ case   61:  		/* li R24, 1 */
		/* 8212C52Ch case   61:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8212C52Ch case   61:*/		return 0x8212C530;
		  /* 8212C530h */ case   62:  		/* b 196 */
		/* 8212C530h case   62:*/		return 0x8212C5F4;
		/* 8212C530h case   62:*/		return 0x8212C534;
	}
	return 0x8212C534;
} // Block from 8212C438h-8212C534h (63 instructions)

//////////////////////////////////////////////////////
// Block at 8212C534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C534);
		  /* 8212C534h */ case    0:  		/* cmplwi CR6, R3, 4 */
		/* 8212C534h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 8212C534h case    0:*/		return 0x8212C538;
		  /* 8212C538h */ case    1:  		/* bc 4, CR6_LT, 188 */
		/* 8212C538h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8212C5F4;  }
		/* 8212C538h case    1:*/		return 0x8212C53C;
		  /* 8212C53Ch */ case    2:  		/* lwz R10, <#[R31 + 16]> */
		/* 8212C53Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8212C53Ch case    2:*/		return 0x8212C540;
		  /* 8212C540h */ case    3:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 8212C540h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 8212C540h case    3:*/		return 0x8212C544;
		  /* 8212C544h */ case    4:  		/* lwz R9, <#[R31 + 96]> */
		/* 8212C544h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000060) );
		/* 8212C544h case    4:*/		return 0x8212C548;
		  /* 8212C548h */ case    5:  		/* addi R8, R1, 96 */
		/* 8212C548h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8212C548h case    5:*/		return 0x8212C54C;
		  /* 8212C54Ch */ case    6:  		/* add R10, R10, R11 */
		/* 8212C54Ch case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8212C54Ch case    6:*/		return 0x8212C550;
		  /* 8212C550h */ case    7:  		/* addi R7, R1, 80 */
		/* 8212C550h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8212C550h case    7:*/		return 0x8212C554;
		  /* 8212C554h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C554h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C554h case    8:*/		return 0x8212C558;
		  /* 8212C558h */ case    9:  		/* li R6, 1 */
		/* 8212C558h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8212C558h case    9:*/		return 0x8212C55C;
		  /* 8212C55Ch */ case   10:  		/* stwx R9, <#[R11 + R7]> */
		/* 8212C55Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8212C55Ch case   10:*/		return 0x8212C560;
		  /* 8212C560h */ case   11:  		/* stwx R6, <#[R10 + R8]> */
		/* 8212C560h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212C560h case   11:*/		return 0x8212C564;
		  /* 8212C564h */ case   12:  		/* b 144 */
		/* 8212C564h case   12:*/		return 0x8212C5F4;
		/* 8212C564h case   12:*/		return 0x8212C568;
	}
	return 0x8212C568;
} // Block from 8212C534h-8212C568h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212C568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C568);
		  /* 8212C568h */ case    0:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 8212C568h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 8212C568h case    0:*/		return 0x8212C56C;
		  /* 8212C56Ch */ case    1:  		/* bc 12, CR0_EQ, 136 */
		/* 8212C56Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8212C5F4;  }
		/* 8212C56Ch case    1:*/		return 0x8212C570;
		  /* 8212C570h */ case    2:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8212C570h case    2:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8212C570h case    2:*/		return 0x8212C574;
		  /* 8212C574h */ case    3:  		/* bc 4, CR0_EQ, 128 */
		/* 8212C574h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8212C5F4;  }
		/* 8212C574h case    3:*/		return 0x8212C578;
		  /* 8212C578h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 8212C578h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212C578h case    4:*/		return 0x8212C57C;
		  /* 8212C57Ch */ case    5:  		/* mr R3, R30 */
		/* 8212C57Ch case    5:*/		regs.R3 = regs.R30;
		/* 8212C57Ch case    5:*/		return 0x8212C580;
		  /* 8212C580h */ case    6:  		/* lwz R4, <#[R31 + 108]> */
		/* 8212C580h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8212C580h case    6:*/		return 0x8212C584;
		  /* 8212C584h */ case    7:  		/* lwz R11, <#[R11 + 112]> */
		/* 8212C584h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8212C584h case    7:*/		return 0x8212C588;
		  /* 8212C588h */ case    8:  		/* mtspr CTR, R11 */
		/* 8212C588h case    8:*/		regs.CTR = regs.R11;
		/* 8212C588h case    8:*/		return 0x8212C58C;
		  /* 8212C58Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8212C58Ch case    9:*/		if ( 1 ) { regs.LR = 0x8212C590; return (uint32)regs.CTR; }
		/* 8212C58Ch case    9:*/		return 0x8212C590;
		  /* 8212C590h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 8212C590h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212C590h case   10:*/		return 0x8212C594;
		  /* 8212C594h */ case   11:  		/* mr R29, R3 */
		/* 8212C594h case   11:*/		regs.R29 = regs.R3;
		/* 8212C594h case   11:*/		return 0x8212C598;
		  /* 8212C598h */ case   12:  		/* mr R3, R30 */
		/* 8212C598h case   12:*/		regs.R3 = regs.R30;
		/* 8212C598h case   12:*/		return 0x8212C59C;
		  /* 8212C59Ch */ case   13:  		/* lwz R4, <#[R31 + 108]> */
		/* 8212C59Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8212C59Ch case   13:*/		return 0x8212C5A0;
		  /* 8212C5A0h */ case   14:  		/* lwz R11, <#[R11 + 116]> */
		/* 8212C5A0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8212C5A0h case   14:*/		return 0x8212C5A4;
		  /* 8212C5A4h */ case   15:  		/* mtspr CTR, R11 */
		/* 8212C5A4h case   15:*/		regs.CTR = regs.R11;
		/* 8212C5A4h case   15:*/		return 0x8212C5A8;
	}
	return 0x8212C5A8;
} // Block from 8212C568h-8212C5A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212C5A8h
// Function '?Translate@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C5A8);
		  /* 8212C5A8h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 8212C5A8h case    0:*/		if ( 1 ) { regs.LR = 0x8212C5AC; return (uint32)regs.CTR; }
		/* 8212C5A8h case    0:*/		return 0x8212C5AC;
		  /* 8212C5ACh */ case    1:  		/* cmplwi CR6, R29, 6 */
		/* 8212C5ACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 8212C5ACh case    1:*/		return 0x8212C5B0;
		  /* 8212C5B0h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8212C5B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212C5CC;  }
		/* 8212C5B0h case    2:*/		return 0x8212C5B4;
		  /* 8212C5B4h */ case    3:  		/* cmplwi CR6, R29, 11 */
		/* 8212C5B4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000B);
		/* 8212C5B4h case    3:*/		return 0x8212C5B8;
		  /* 8212C5B8h */ case    4:  		/* bc 4, CR6_EQ, 60 */
		/* 8212C5B8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8212C5F4;  }
		/* 8212C5B8h case    4:*/		return 0x8212C5BC;
		  /* 8212C5BCh */ case    5:  		/* cmplwi CR6, R3, 2 */
		/* 8212C5BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 8212C5BCh case    5:*/		return 0x8212C5C0;
		  /* 8212C5C0h */ case    6:  		/* bc 4, CR6_LT, 52 */
		/* 8212C5C0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8212C5F4;  }
		/* 8212C5C0h case    6:*/		return 0x8212C5C4;
		  /* 8212C5C4h */ case    7:  		/* addi R10, R3, 135 */
		/* 8212C5C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x87);
		/* 8212C5C4h case    7:*/		return 0x8212C5C8;
		  /* 8212C5C8h */ case    8:  		/* b 16 */
		/* 8212C5C8h case    8:*/		return 0x8212C5D8;
		/* 8212C5C8h case    8:*/		return 0x8212C5CC;
	}
	return 0x8212C5CC;
} // Block from 8212C5A8h-8212C5CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212C5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C5CC);
		  /* 8212C5CCh */ case    0:  		/* cmplwi CR6, R3, 8 */
		/* 8212C5CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000008);
		/* 8212C5CCh case    0:*/		return 0x8212C5D0;
		  /* 8212C5D0h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 8212C5D0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8212C5F4;  }
		/* 8212C5D0h case    1:*/		return 0x8212C5D4;
		  /* 8212C5D4h */ case    2:  		/* addi R10, R3, 127 */
		/* 8212C5D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x7F);
		/* 8212C5D4h case    2:*/		return 0x8212C5D8;
	}
	return 0x8212C5D8;
} // Block from 8212C5CCh-8212C5D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212C5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C5D8);
		  /* 8212C5D8h */ case    0:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C5D8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C5D8h case    0:*/		return 0x8212C5DC;
		  /* 8212C5DCh */ case    1:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212C5DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212C5DCh case    1:*/		return 0x8212C5E0;
		  /* 8212C5E0h */ case    2:  		/* addi R11, R11, 1 */
		/* 8212C5E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212C5E0h case    2:*/		return 0x8212C5E4;
		  /* 8212C5E4h */ case    3:  		/* lwzx R9, <#[R10 + R30]> */
		/* 8212C5E4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8212C5E4h case    3:*/		return 0x8212C5E8;
		  /* 8212C5E8h */ case    4:  		/* cmplw CR6, R9, R11 */
		/* 8212C5E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8212C5E8h case    4:*/		return 0x8212C5EC;
		  /* 8212C5ECh */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 8212C5ECh case    5:*/		if ( !regs.CR[6].lt ) { return 0x8212C5F4;  }
		/* 8212C5ECh case    5:*/		return 0x8212C5F0;
		  /* 8212C5F0h */ case    6:  		/* stwx R11, <#[R10 + R30]> */
		/* 8212C5F0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8212C5F0h case    6:*/		return 0x8212C5F4;
	}
	return 0x8212C5F4;
} // Block from 8212C5D8h-8212C5F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212C5F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C5F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C5F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C5F4);
		  /* 8212C5F4h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8212C5F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8212C5F4h case    0:*/		return 0x8212C5F8;
		  /* 8212C5F8h */ case    1:  		/* addi R26, R26, 1 */
		/* 8212C5F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8212C5F8h case    1:*/		return 0x8212C5FC;
		  /* 8212C5FCh */ case    2:  		/* addi R28, R28, 4 */
		/* 8212C5FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212C5FCh case    2:*/		return 0x8212C600;
		  /* 8212C600h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 8212C600h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 8212C600h case    3:*/		return 0x8212C604;
		  /* 8212C604h */ case    4:  		/* bc 12, CR6_LT, -372 */
		/* 8212C604h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212C490;  }
		/* 8212C604h case    4:*/		return 0x8212C608;
	}
	return 0x8212C608;
} // Block from 8212C5F4h-8212C608h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C608);
		  /* 8212C608h */ case    0:  		/* lis R11, -32254 */
		/* 8212C608h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8212C608h case    0:*/		return 0x8212C60C;
		  /* 8212C60Ch */ case    1:  		/* lis R10, -32254 */
		/* 8212C60Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 8212C60Ch case    1:*/		return 0x8212C610;
		  /* 8212C610h */ case    2:  		/* mr R27, R23 */
		/* 8212C610h case    2:*/		regs.R27 = regs.R23;
		/* 8212C610h case    2:*/		return 0x8212C614;
		  /* 8212C614h */ case    3:  		/* li R26, 1 */
		/* 8212C614h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8212C614h case    3:*/		return 0x8212C618;
		  /* 8212C618h */ case    4:  		/* mr R31, R23 */
		/* 8212C618h case    4:*/		regs.R31 = regs.R23;
		/* 8212C618h case    4:*/		return 0x8212C61C;
		  /* 8212C61Ch */ case    5:  		/* addi R29, R11, -14696 */
		/* 8212C61Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFC698);
		/* 8212C61Ch case    5:*/		return 0x8212C620;
		  /* 8212C620h */ case    6:  		/* addi R28, R10, -14760 */
		/* 8212C620h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFC658);
		/* 8212C620h case    6:*/		return 0x8212C624;
		  /* 8212C624h */ case    7:  		/* li R8, 4 */
		/* 8212C624h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8212C624h case    7:*/		return 0x8212C628;
		  /* 8212C628h */ case    8:  		/* mr R10, R23 */
		/* 8212C628h case    8:*/		regs.R10 = regs.R23;
		/* 8212C628h case    8:*/		return 0x8212C62C;
		  /* 8212C62Ch */ case    9:  		/* mr R11, R23 */
		/* 8212C62Ch case    9:*/		regs.R11 = regs.R23;
		/* 8212C62Ch case    9:*/		return 0x8212C630;
		  /* 8212C630h */ case   10:  		/* rlwinm R9, R31, 2, 0, 29 */
		/* 8212C630h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R31);
		/* 8212C630h case   10:*/		return 0x8212C634;
		  /* 8212C634h */ case   11:  		/* mtspr CTR, R8 */
		/* 8212C634h case   11:*/		regs.CTR = regs.R8;
		/* 8212C634h case   11:*/		return 0x8212C638;
		  /* 8212C638h */ case   12:  		/* add R8, R9, R11 */
		/* 8212C638h case   12:*/		cpu::op::add<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 8212C638h case   12:*/		return 0x8212C63C;
		  /* 8212C63Ch */ case   13:  		/* addi R7, R1, 96 */
		/* 8212C63Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8212C63Ch case   13:*/		return 0x8212C640;
		  /* 8212C640h */ case   14:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212C640h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212C640h case   14:*/		return 0x8212C644;
		  /* 8212C644h */ case   15:  		/* addi R11, R11, 1 */
		/* 8212C644h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212C644h case   15:*/		return 0x8212C648;
		  /* 8212C648h */ case   16:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8212C648h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212C648h case   16:*/		return 0x8212C64C;
		  /* 8212C64Ch */ case   17:  		/* addic R7, R8, -1 */
		/* 8212C64Ch case   17:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R8,0xFFFFFFFF);
		/* 8212C64Ch case   17:*/		return 0x8212C650;
		  /* 8212C650h */ case   18:  		/* subfe R8, R7, R8 */
		/* 8212C650h case   18:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8212C650h case   18:*/		return 0x8212C654;
		  /* 8212C654h */ case   19:  		/* add R10, R8, R10 */
		/* 8212C654h case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8212C654h case   19:*/		return 0x8212C658;
		  /* 8212C658h */ case   20:  		/* bc 16, CR0_LT, -32 */
		/* 8212C658h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212C638;  }
		/* 8212C658h case   20:*/		return 0x8212C65C;
		  /* 8212C65Ch */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 8212C65Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8212C65Ch case   21:*/		return 0x8212C660;
		  /* 8212C660h */ case   22:  		/* bc 4, CR6_EQ, 116 */
		/* 8212C660h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8212C6D4;  }
		/* 8212C660h case   22:*/		return 0x8212C664;
		  /* 8212C664h */ case   23:  		/* cmplwi CR6, R31, 0 */
		/* 8212C664h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8212C664h case   23:*/		return 0x8212C668;
		  /* 8212C668h */ case   24:  		/* bc 4, CR6_EQ, 28 */
		/* 8212C668h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8212C684;  }
		/* 8212C668h case   24:*/		return 0x8212C66C;
		  /* 8212C66Ch */ case   25:  		/* mr R6, R28 */
		/* 8212C66Ch case   25:*/		regs.R6 = regs.R28;
		/* 8212C66Ch case   25:*/		return 0x8212C670;
		  /* 8212C670h */ case   26:  		/* lwz R4, <#[R1 + 80]> */
		/* 8212C670h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8212C670h case   26:*/		return 0x8212C674;
		  /* 8212C674h */ case   27:  		/* li R5, 4530 */
		/* 8212C674h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x11B2);
		/* 8212C674h case   27:*/		return 0x8212C678;
		  /* 8212C678h */ case   28:  		/* mr R3, R30 */
		/* 8212C678h case   28:*/		regs.R3 = regs.R30;
		/* 8212C678h case   28:*/		return 0x8212C67C;
		  /* 8212C67Ch */ case   29:  		/* bl -122700 */
		/* 8212C67Ch case   29:*/		regs.LR = 0x8212C680; return 0x8210E730;
		/* 8212C67Ch case   29:*/		return 0x8212C680;
		  /* 8212C680h */ case   30:  		/* li R24, 1 */
		/* 8212C680h case   30:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8212C680h case   30:*/		return 0x8212C684;
	}
	return 0x8212C684;
} // Block from 8212C608h-8212C684h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8212C684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C684);
		  /* 8212C684h */ case    0:  		/* li R27, 1 */
		/* 8212C684h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8212C684h case    0:*/		return 0x8212C688;
		  /* 8212C688h */ case    1:  		/* addi R31, R31, 1 */
		/* 8212C688h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8212C688h case    1:*/		return 0x8212C68C;
		  /* 8212C68Ch */ case    2:  		/* cmplwi CR6, R31, 4 */
		/* 8212C68Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 8212C68Ch case    2:*/		return 0x8212C690;
		  /* 8212C690h */ case    3:  		/* bc 12, CR6_LT, -108 */
		/* 8212C690h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212C624;  }
		/* 8212C690h case    3:*/		return 0x8212C694;
		  /* 8212C694h */ case    4:  		/* cmpwi CR6, R26, 0 */
		/* 8212C694h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8212C694h case    4:*/		return 0x8212C698;
		  /* 8212C698h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 8212C698h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8212C6B8;  }
		/* 8212C698h case    5:*/		return 0x8212C69C;
		  /* 8212C69Ch */ case    6:  		/* lis R11, -32254 */
		/* 8212C69Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8212C69Ch case    6:*/		return 0x8212C6A0;
		  /* 8212C6A0h */ case    7:  		/* li R5, 4538 */
		/* 8212C6A0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x11BA);
		/* 8212C6A0h case    7:*/		return 0x8212C6A4;
		  /* 8212C6A4h */ case    8:  		/* addi R6, R11, -14820 */
		/* 8212C6A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC61C);
		/* 8212C6A4h case    8:*/		return 0x8212C6A8;
		  /* 8212C6A8h */ case    9:  		/* li R4, 0 */
		/* 8212C6A8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212C6A8h case    9:*/		return 0x8212C6AC;
		  /* 8212C6ACh */ case   10:  		/* mr R3, R30 */
		/* 8212C6ACh case   10:*/		regs.R3 = regs.R30;
		/* 8212C6ACh case   10:*/		return 0x8212C6B0;
		  /* 8212C6B0h */ case   11:  		/* bl -122752 */
		/* 8212C6B0h case   11:*/		regs.LR = 0x8212C6B4; return 0x8210E730;
		/* 8212C6B0h case   11:*/		return 0x8212C6B4;
		  /* 8212C6B4h */ case   12:  		/* li R24, 1 */
		/* 8212C6B4h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8212C6B4h case   12:*/		return 0x8212C6B8;
	}
	return 0x8212C6B8;
} // Block from 8212C684h-8212C6B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212C6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C6B8);
		  /* 8212C6B8h */ case    0:  		/* subfic R11, R24, 0 */
		/* 8212C6B8h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R24,0x0);
		/* 8212C6B8h case    0:*/		return 0x8212C6BC;
		  /* 8212C6BCh */ case    1:  		/* lis R10, -32768 */
		/* 8212C6BCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8212C6BCh case    1:*/		return 0x8212C6C0;
		  /* 8212C6C0h */ case    2:  		/* subfe R11, R11, R11 */
		/* 8212C6C0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8212C6C0h case    2:*/		return 0x8212C6C4;
		  /* 8212C6C4h */ case    3:  		/* ori R10, R10, 16389 */
		/* 8212C6C4h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 8212C6C4h case    3:*/		return 0x8212C6C8;
		  /* 8212C6C8h */ case    4:  		/* and R3, R11, R10 */
		/* 8212C6C8h case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8212C6C8h case    4:*/		return 0x8212C6CC;
	}
	return 0x8212C6CC;
} // Block from 8212C6B8h-8212C6CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C6CC);
		  /* 8212C6CCh */ case    0:  		/* addi R1, R1, 240 */
		/* 8212C6CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8212C6CCh case    0:*/		return 0x8212C6D0;
		  /* 8212C6D0h */ case    1:  		/* b -635964 */
		/* 8212C6D0h case    1:*/		return 0x82091294;
		/* 8212C6D0h case    1:*/		return 0x8212C6D4;
	}
	return 0x8212C6D4;
} // Block from 8212C6CCh-8212C6D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C6D4);
		  /* 8212C6D4h */ case    0:  		/* cmplwi CR6, R10, 4 */
		/* 8212C6D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8212C6D4h case    0:*/		return 0x8212C6D8;
		  /* 8212C6D8h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8212C6D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212C6FC;  }
		/* 8212C6D8h case    1:*/		return 0x8212C6DC;
		  /* 8212C6DCh */ case    2:  		/* addi R11, R1, 80 */
		/* 8212C6DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8212C6DCh case    2:*/		return 0x8212C6E0;
		  /* 8212C6E0h */ case    3:  		/* mr R6, R29 */
		/* 8212C6E0h case    3:*/		regs.R6 = regs.R29;
		/* 8212C6E0h case    3:*/		return 0x8212C6E4;
		  /* 8212C6E4h */ case    4:  		/* mr R7, R31 */
		/* 8212C6E4h case    4:*/		regs.R7 = regs.R31;
		/* 8212C6E4h case    4:*/		return 0x8212C6E8;
		  /* 8212C6E8h */ case    5:  		/* li R5, 4529 */
		/* 8212C6E8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x11B1);
		/* 8212C6E8h case    5:*/		return 0x8212C6EC;
		  /* 8212C6ECh */ case    6:  		/* mr R3, R30 */
		/* 8212C6ECh case    6:*/		regs.R3 = regs.R30;
		/* 8212C6ECh case    6:*/		return 0x8212C6F0;
		  /* 8212C6F0h */ case    7:  		/* lwzx R4, <#[R9 + R11]> */
		/* 8212C6F0h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8212C6F0h case    7:*/		return 0x8212C6F4;
		  /* 8212C6F4h */ case    8:  		/* bl -122820 */
		/* 8212C6F4h case    8:*/		regs.LR = 0x8212C6F8; return 0x8210E730;
		/* 8212C6F4h case    8:*/		return 0x8212C6F8;
		  /* 8212C6F8h */ case    9:  		/* li R24, 1 */
		/* 8212C6F8h case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8212C6F8h case    9:*/		return 0x8212C6FC;
	}
	return 0x8212C6FC;
} // Block from 8212C6D4h-8212C6FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212C6FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C6FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C6FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C6FC);
		  /* 8212C6FCh */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8212C6FCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8212C6FCh case    0:*/		return 0x8212C700;
		  /* 8212C700h */ case    1:  		/* bc 12, CR6_EQ, -120 */
		/* 8212C700h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212C688;  }
		/* 8212C700h case    1:*/		return 0x8212C704;
		  /* 8212C704h */ case    2:  		/* mr R26, R23 */
		/* 8212C704h case    2:*/		regs.R26 = regs.R23;
		/* 8212C704h case    2:*/		return 0x8212C708;
		  /* 8212C708h */ case    3:  		/* b -128 */
		/* 8212C708h case    3:*/		return 0x8212C688;
		/* 8212C708h case    3:*/		return 0x8212C70C;
		  /* 8212C70Ch */ case    4:  		/* nop */
		/* 8212C70Ch case    4:*/		cpu::op::nop();
		/* 8212C70Ch case    4:*/		return 0x8212C710;
	}
	return 0x8212C710;
} // Block from 8212C6FCh-8212C710h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212C710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C710);
		  /* 8212C710h */ case    0:  		/* mfspr R12, LR */
		/* 8212C710h case    0:*/		regs.R12 = regs.LR;
		/* 8212C710h case    0:*/		return 0x8212C714;
		  /* 8212C714h */ case    1:  		/* bl -636104 */
		/* 8212C714h case    1:*/		regs.LR = 0x8212C718; return 0x8209124C;
		/* 8212C714h case    1:*/		return 0x8212C718;
		  /* 8212C718h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8212C718h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8212C718h case    2:*/		return 0x8212C71C;
		  /* 8212C71Ch */ case    3:  		/* lwz R10, <#[R3 + 260]> */
		/* 8212C71Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 8212C71Ch case    3:*/		return 0x8212C720;
		  /* 8212C720h */ case    4:  		/* li R8, 0 */
		/* 8212C720h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212C720h case    4:*/		return 0x8212C724;
		  /* 8212C724h */ case    5:  		/* lwz R11, <#[R3]> */
		/* 8212C724h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212C724h case    5:*/		return 0x8212C728;
		  /* 8212C728h */ case    6:  		/* li R7, 0 */
		/* 8212C728h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212C728h case    6:*/		return 0x8212C72C;
		  /* 8212C72Ch */ case    7:  		/* li R6, 4 */
		/* 8212C72Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212C72Ch case    7:*/		return 0x8212C730;
		  /* 8212C730h */ case    8:  		/* lwz R4, <#[R3 + 256]> */
		/* 8212C730h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000100) );
		/* 8212C730h case    8:*/		return 0x8212C734;
		  /* 8212C734h */ case    9:  		/* addi R5, R1, 128 */
		/* 8212C734h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8212C734h case    9:*/		return 0x8212C738;
		  /* 8212C738h */ case   10:  		/* mr R31, R3 */
		/* 8212C738h case   10:*/		regs.R31 = regs.R3;
		/* 8212C738h case   10:*/		return 0x8212C73C;
		  /* 8212C73Ch */ case   11:  		/* lwz R9, <#[R10]> */
		/* 8212C73Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8212C73Ch case   11:*/		return 0x8212C740;
		  /* 8212C740h */ case   12:  		/* lwz R30, <#[R11 + 340]> */
		/* 8212C740h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000154) );
		/* 8212C740h case   12:*/		return 0x8212C744;
		  /* 8212C744h */ case   13:  		/* rlwinm R28, R9, 0, 12, 31 */
		/* 8212C744h case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R9);
		/* 8212C744h case   13:*/		return 0x8212C748;
		  /* 8212C748h */ case   14:  		/* lwz R27, <#[R10 + 8]> */
		/* 8212C748h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000008) );
		/* 8212C748h case   14:*/		return 0x8212C74C;
		  /* 8212C74Ch */ case   15:  		/* lwz R29, <#[R10 + 12]> */
		/* 8212C74Ch case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212C74Ch case   15:*/		return 0x8212C750;
		  /* 8212C750h */ case   16:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 8212C750h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 8212C750h case   16:*/		return 0x8212C754;
		  /* 8212C754h */ case   17:  		/* lwz R26, <#[R10 + 16]> */
		/* 8212C754h case   17:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000010) );
		/* 8212C754h case   17:*/		return 0x8212C758;
		  /* 8212C758h */ case   18:  		/* add R25, R11, R27 */
		/* 8212C758h case   18:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R27);
		/* 8212C758h case   18:*/		return 0x8212C75C;
		  /* 8212C75Ch */ case   19:  		/* mtspr CTR, R30 */
		/* 8212C75Ch case   19:*/		regs.CTR = regs.R30;
		/* 8212C75Ch case   19:*/		return 0x8212C760;
		  /* 8212C760h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8212C760h case   20:*/		if ( 1 ) { regs.LR = 0x8212C764; return (uint32)regs.CTR; }
		/* 8212C760h case   20:*/		return 0x8212C764;
		  /* 8212C764h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 8212C764h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212C764h case   21:*/		return 0x8212C768;
		  /* 8212C768h */ case   22:  		/* bc 12, CR0_LT, 216 */
		/* 8212C768h case   22:*/		if ( regs.CR[0].lt ) { return 0x8212C840;  }
		/* 8212C768h case   22:*/		return 0x8212C76C;
		  /* 8212C76Ch */ case   23:  		/* li R10, 4 */
		/* 8212C76Ch case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8212C76Ch case   23:*/		return 0x8212C770;
		  /* 8212C770h */ case   24:  		/* lwz R8, <#[R31 + 548]> */
		/* 8212C770h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000224) );
		/* 8212C770h case   24:*/		return 0x8212C774;
		  /* 8212C774h */ case   25:  		/* li R30, 0 */
		/* 8212C774h case   25:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212C774h case   25:*/		return 0x8212C778;
		  /* 8212C778h */ case   26:  		/* lwz R7, <#[R31 + 552]> */
		/* 8212C778h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000228) );
		/* 8212C778h case   26:*/		return 0x8212C77C;
		  /* 8212C77Ch */ case   27:  		/* mr R9, R30 */
		/* 8212C77Ch case   27:*/		regs.R9 = regs.R30;
		/* 8212C77Ch case   27:*/		return 0x8212C780;
		  /* 8212C780h */ case   28:  		/* mr R11, R30 */
		/* 8212C780h case   28:*/		regs.R11 = regs.R30;
		/* 8212C780h case   28:*/		return 0x8212C784;
		  /* 8212C784h */ case   29:  		/* mtspr CTR, R10 */
		/* 8212C784h case   29:*/		regs.CTR = regs.R10;
		/* 8212C784h case   29:*/		return 0x8212C788;
		  /* 8212C788h */ case   30:  		/* addi R10, R1, 144 */
		/* 8212C788h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8212C788h case   30:*/		return 0x8212C78C;
		  /* 8212C78Ch */ case   31:  		/* addi R6, R1, 160 */
		/* 8212C78Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 8212C78Ch case   31:*/		return 0x8212C790;
		  /* 8212C790h */ case   32:  		/* cmplw CR6, R9, R29 */
		/* 8212C790h case   32:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 8212C790h case   32:*/		return 0x8212C794;
		  /* 8212C794h */ case   33:  		/* stwx R8, <#[R11 + R10]> */
		/* 8212C794h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212C794h case   33:*/		return 0x8212C798;
		  /* 8212C798h */ case   34:  		/* stwx R7, <#[R11 + R6]> */
		/* 8212C798h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8212C798h case   34:*/		return 0x8212C79C;
		  /* 8212C79Ch */ case   35:  		/* bc 4, CR6_LT, 44 */
		/* 8212C79Ch case   35:*/		if ( !regs.CR[6].lt ) { return 0x8212C7C8;  }
		/* 8212C79Ch case   35:*/		return 0x8212C7A0;
		  /* 8212C7A0h */ case   36:  		/* lwzx R10, <#[R11 + R26]> */
		/* 8212C7A0h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8212C7A0h case   36:*/		return 0x8212C7A4;
		  /* 8212C7A4h */ case   37:  		/* addi R6, R1, 128 */
		/* 8212C7A4h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8212C7A4h case   37:*/		return 0x8212C7A8;
		  /* 8212C7A8h */ case   38:  		/* lwz R5, <#[R31 + 20]> */
		/* 8212C7A8h case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 8212C7A8h case   38:*/		return 0x8212C7AC;
		  /* 8212C7ACh */ case   39:  		/* addi R4, R1, 112 */
		/* 8212C7ACh case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8212C7ACh case   39:*/		return 0x8212C7B0;
		  /* 8212C7B0h */ case   40:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C7B0h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C7B0h case   40:*/		return 0x8212C7B4;
		  /* 8212C7B4h */ case   41:  		/* lwzx R10, <#[R10 + R5]> */
		/* 8212C7B4h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 8212C7B4h case   41:*/		return 0x8212C7B8;
		  /* 8212C7B8h */ case   42:  		/* lwz R10, <#[R10 + 16]> */
		/* 8212C7B8h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8212C7B8h case   42:*/		return 0x8212C7BC;
		  /* 8212C7BCh */ case   43:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C7BCh case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C7BCh case   43:*/		return 0x8212C7C0;
		  /* 8212C7C0h */ case   44:  		/* lwzx R10, <#[R10 + R6]> */
		/* 8212C7C0h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8212C7C0h case   44:*/		return 0x8212C7C4;
		  /* 8212C7C4h */ case   45:  		/* stwx R10, <#[R11 + R4]> */
		/* 8212C7C4h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8212C7C4h case   45:*/		return 0x8212C7C8;
	}
	return 0x8212C7C8;
} // Block from 8212C710h-8212C7C8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8212C7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C7C8);
		  /* 8212C7C8h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212C7C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212C7C8h case    0:*/		return 0x8212C7CC;
		  /* 8212C7CCh */ case    1:  		/* addi R11, R11, 4 */
		/* 8212C7CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212C7CCh case    1:*/		return 0x8212C7D0;
		  /* 8212C7D0h */ case    2:  		/* bc 16, CR0_LT, -72 */
		/* 8212C7D0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212C788;  }
		/* 8212C7D0h case    2:*/		return 0x8212C7D4;
		  /* 8212C7D4h */ case    3:  		/* lis R11, 256 */
		/* 8212C7D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x100);
		/* 8212C7D4h case    3:*/		return 0x8212C7D8;
		  /* 8212C7D8h */ case    4:  		/* stw R30, <#[R1 + 108]> */
		/* 8212C7D8h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212C7D8h case    4:*/		return 0x8212C7DC;
		  /* 8212C7DCh */ case    5:  		/* mr R10, R28 */
		/* 8212C7DCh case    5:*/		regs.R10 = regs.R28;
		/* 8212C7DCh case    5:*/		return 0x8212C7E0;
		  /* 8212C7E0h */ case    6:  		/* stw R30, <#[R1 + 100]> */
		/* 8212C7E0h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8212C7E0h case    6:*/		return 0x8212C7E4;
		  /* 8212C7E4h */ case    7:  		/* li R9, 0 */
		/* 8212C7E4h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212C7E4h case    7:*/		return 0x8212C7E8;
		  /* 8212C7E8h */ case    8:  		/* stw R11, <#[R1 + 92]> */
		/* 8212C7E8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212C7E8h case    8:*/		return 0x8212C7EC;
		  /* 8212C7ECh */ case    9:  		/* mr R8, R25 */
		/* 8212C7ECh case    9:*/		regs.R8 = regs.R25;
		/* 8212C7ECh case    9:*/		return 0x8212C7F0;
		  /* 8212C7F0h */ case   10:  		/* stw R30, <#[R1 + 84]> */
		/* 8212C7F0h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8212C7F0h case   10:*/		return 0x8212C7F4;
		  /* 8212C7F4h */ case   11:  		/* mr R7, R27 */
		/* 8212C7F4h case   11:*/		regs.R7 = regs.R27;
		/* 8212C7F4h case   11:*/		return 0x8212C7F8;
		  /* 8212C7F8h */ case   12:  		/* mr R6, R29 */
		/* 8212C7F8h case   12:*/		regs.R6 = regs.R29;
		/* 8212C7F8h case   12:*/		return 0x8212C7FC;
		  /* 8212C7FCh */ case   13:  		/* addi R5, R1, 112 */
		/* 8212C7FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8212C7FCh case   13:*/		return 0x8212C800;
		  /* 8212C800h */ case   14:  		/* li R4, 2 */
		/* 8212C800h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212C800h case   14:*/		return 0x8212C804;
		  /* 8212C804h */ case   15:  		/* mr R3, R31 */
		/* 8212C804h case   15:*/		regs.R3 = regs.R31;
		/* 8212C804h case   15:*/		return 0x8212C808;
		  /* 8212C808h */ case   16:  		/* bl -222376 */
		/* 8212C808h case   16:*/		regs.LR = 0x8212C80C; return 0x820F6360;
		/* 8212C808h case   16:*/		return 0x8212C80C;
		  /* 8212C80Ch */ case   17:  		/* mr R10, R28 */
		/* 8212C80Ch case   17:*/		regs.R10 = regs.R28;
		/* 8212C80Ch case   17:*/		return 0x8212C810;
		  /* 8212C810h */ case   18:  		/* addi R9, R1, 144 */
		/* 8212C810h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 8212C810h case   18:*/		return 0x8212C814;
		  /* 8212C814h */ case   19:  		/* stw R30, <#[R1 + 108]> */
		/* 8212C814h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212C814h case   19:*/		return 0x8212C818;
		  /* 8212C818h */ case   20:  		/* addi R8, R1, 160 */
		/* 8212C818h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 8212C818h case   20:*/		return 0x8212C81C;
		  /* 8212C81Ch */ case   21:  		/* stw R30, <#[R1 + 100]> */
		/* 8212C81Ch case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8212C81Ch case   21:*/		return 0x8212C820;
		  /* 8212C820h */ case   22:  		/* addi R7, R1, 112 */
		/* 8212C820h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8212C820h case   22:*/		return 0x8212C824;
		  /* 8212C824h */ case   23:  		/* stw R30, <#[R1 + 92]> */
		/* 8212C824h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212C824h case   23:*/		return 0x8212C828;
		  /* 8212C828h */ case   24:  		/* mr R6, R29 */
		/* 8212C828h case   24:*/		regs.R6 = regs.R29;
		/* 8212C828h case   24:*/		return 0x8212C82C;
		  /* 8212C82Ch */ case   25:  		/* stw R30, <#[R1 + 84]> */
		/* 8212C82Ch case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8212C82Ch case   25:*/		return 0x8212C830;
		  /* 8212C830h */ case   26:  		/* mr R5, R26 */
		/* 8212C830h case   26:*/		regs.R5 = regs.R26;
		/* 8212C830h case   26:*/		return 0x8212C834;
		  /* 8212C834h */ case   27:  		/* li R4, 88 */
		/* 8212C834h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 8212C834h case   27:*/		return 0x8212C838;
		  /* 8212C838h */ case   28:  		/* mr R3, R31 */
		/* 8212C838h case   28:*/		regs.R3 = regs.R31;
		/* 8212C838h case   28:*/		return 0x8212C83C;
		  /* 8212C83Ch */ case   29:  		/* bl -222428 */
		/* 8212C83Ch case   29:*/		regs.LR = 0x8212C840; return 0x820F6360;
		/* 8212C83Ch case   29:*/		return 0x8212C840;
	}
	return 0x8212C840;
} // Block from 8212C7C8h-8212C840h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8212C840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C840);
		  /* 8212C840h */ case    0:  		/* addi R1, R1, 240 */
		/* 8212C840h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8212C840h case    0:*/		return 0x8212C844;
		  /* 8212C844h */ case    1:  		/* b -636328 */
		/* 8212C844h case    1:*/		return 0x8209129C;
		/* 8212C844h case    1:*/		return 0x8212C848;
	}
	return 0x8212C848;
} // Block from 8212C840h-8212C848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C848);
		  /* 8212C848h */ case    0:  		/* mfspr R12, LR */
		/* 8212C848h case    0:*/		regs.R12 = regs.LR;
		/* 8212C848h case    0:*/		return 0x8212C84C;
		  /* 8212C84Ch */ case    1:  		/* bl -636416 */
		/* 8212C84Ch case    1:*/		regs.LR = 0x8212C850; return 0x8209124C;
		/* 8212C84Ch case    1:*/		return 0x8212C850;
		  /* 8212C850h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8212C850h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8212C850h case    2:*/		return 0x8212C854;
		  /* 8212C854h */ case    3:  		/* lwz R10, <#[R3 + 260]> */
		/* 8212C854h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 8212C854h case    3:*/		return 0x8212C858;
		  /* 8212C858h */ case    4:  		/* li R8, 0 */
		/* 8212C858h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212C858h case    4:*/		return 0x8212C85C;
		  /* 8212C85Ch */ case    5:  		/* lwz R11, <#[R3]> */
		/* 8212C85Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212C85Ch case    5:*/		return 0x8212C860;
		  /* 8212C860h */ case    6:  		/* li R7, 0 */
		/* 8212C860h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212C860h case    6:*/		return 0x8212C864;
		  /* 8212C864h */ case    7:  		/* li R6, 4 */
		/* 8212C864h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212C864h case    7:*/		return 0x8212C868;
		  /* 8212C868h */ case    8:  		/* lwz R4, <#[R3 + 256]> */
		/* 8212C868h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000100) );
		/* 8212C868h case    8:*/		return 0x8212C86C;
		  /* 8212C86Ch */ case    9:  		/* addi R5, R1, 128 */
		/* 8212C86Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8212C86Ch case    9:*/		return 0x8212C870;
		  /* 8212C870h */ case   10:  		/* mr R31, R3 */
		/* 8212C870h case   10:*/		regs.R31 = regs.R3;
		/* 8212C870h case   10:*/		return 0x8212C874;
		  /* 8212C874h */ case   11:  		/* lwz R9, <#[R10]> */
		/* 8212C874h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8212C874h case   11:*/		return 0x8212C878;
		  /* 8212C878h */ case   12:  		/* lwz R30, <#[R11 + 340]> */
		/* 8212C878h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000154) );
		/* 8212C878h case   12:*/		return 0x8212C87C;
		  /* 8212C87Ch */ case   13:  		/* rlwinm R28, R9, 0, 12, 31 */
		/* 8212C87Ch case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R9);
		/* 8212C87Ch case   13:*/		return 0x8212C880;
		  /* 8212C880h */ case   14:  		/* lwz R27, <#[R10 + 8]> */
		/* 8212C880h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000008) );
		/* 8212C880h case   14:*/		return 0x8212C884;
		  /* 8212C884h */ case   15:  		/* lwz R29, <#[R10 + 12]> */
		/* 8212C884h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212C884h case   15:*/		return 0x8212C888;
		  /* 8212C888h */ case   16:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 8212C888h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 8212C888h case   16:*/		return 0x8212C88C;
		  /* 8212C88Ch */ case   17:  		/* lwz R26, <#[R10 + 16]> */
		/* 8212C88Ch case   17:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000010) );
		/* 8212C88Ch case   17:*/		return 0x8212C890;
		  /* 8212C890h */ case   18:  		/* add R25, R11, R27 */
		/* 8212C890h case   18:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R27);
		/* 8212C890h case   18:*/		return 0x8212C894;
		  /* 8212C894h */ case   19:  		/* mtspr CTR, R30 */
		/* 8212C894h case   19:*/		regs.CTR = regs.R30;
		/* 8212C894h case   19:*/		return 0x8212C898;
		  /* 8212C898h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8212C898h case   20:*/		if ( 1 ) { regs.LR = 0x8212C89C; return (uint32)regs.CTR; }
		/* 8212C898h case   20:*/		return 0x8212C89C;
		  /* 8212C89Ch */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 8212C89Ch case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212C89Ch case   21:*/		return 0x8212C8A0;
		  /* 8212C8A0h */ case   22:  		/* bc 12, CR0_LT, 216 */
		/* 8212C8A0h case   22:*/		if ( regs.CR[0].lt ) { return 0x8212C978;  }
		/* 8212C8A0h case   22:*/		return 0x8212C8A4;
		  /* 8212C8A4h */ case   23:  		/* li R10, 4 */
		/* 8212C8A4h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8212C8A4h case   23:*/		return 0x8212C8A8;
		  /* 8212C8A8h */ case   24:  		/* lwz R8, <#[R31 + 548]> */
		/* 8212C8A8h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000224) );
		/* 8212C8A8h case   24:*/		return 0x8212C8AC;
		  /* 8212C8ACh */ case   25:  		/* li R30, 0 */
		/* 8212C8ACh case   25:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212C8ACh case   25:*/		return 0x8212C8B0;
		  /* 8212C8B0h */ case   26:  		/* lwz R7, <#[R31 + 552]> */
		/* 8212C8B0h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000228) );
		/* 8212C8B0h case   26:*/		return 0x8212C8B4;
		  /* 8212C8B4h */ case   27:  		/* mr R9, R30 */
		/* 8212C8B4h case   27:*/		regs.R9 = regs.R30;
		/* 8212C8B4h case   27:*/		return 0x8212C8B8;
		  /* 8212C8B8h */ case   28:  		/* mr R11, R30 */
		/* 8212C8B8h case   28:*/		regs.R11 = regs.R30;
		/* 8212C8B8h case   28:*/		return 0x8212C8BC;
		  /* 8212C8BCh */ case   29:  		/* mtspr CTR, R10 */
		/* 8212C8BCh case   29:*/		regs.CTR = regs.R10;
		/* 8212C8BCh case   29:*/		return 0x8212C8C0;
		  /* 8212C8C0h */ case   30:  		/* addi R10, R1, 160 */
		/* 8212C8C0h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 8212C8C0h case   30:*/		return 0x8212C8C4;
		  /* 8212C8C4h */ case   31:  		/* addi R6, R1, 144 */
		/* 8212C8C4h case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 8212C8C4h case   31:*/		return 0x8212C8C8;
		  /* 8212C8C8h */ case   32:  		/* cmplw CR6, R9, R29 */
		/* 8212C8C8h case   32:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 8212C8C8h case   32:*/		return 0x8212C8CC;
		  /* 8212C8CCh */ case   33:  		/* stwx R8, <#[R11 + R10]> */
		/* 8212C8CCh case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212C8CCh case   33:*/		return 0x8212C8D0;
		  /* 8212C8D0h */ case   34:  		/* stwx R7, <#[R11 + R6]> */
		/* 8212C8D0h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8212C8D0h case   34:*/		return 0x8212C8D4;
		  /* 8212C8D4h */ case   35:  		/* bc 4, CR6_LT, 44 */
		/* 8212C8D4h case   35:*/		if ( !regs.CR[6].lt ) { return 0x8212C900;  }
		/* 8212C8D4h case   35:*/		return 0x8212C8D8;
		  /* 8212C8D8h */ case   36:  		/* lwzx R10, <#[R11 + R26]> */
		/* 8212C8D8h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8212C8D8h case   36:*/		return 0x8212C8DC;
		  /* 8212C8DCh */ case   37:  		/* addi R6, R1, 128 */
		/* 8212C8DCh case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8212C8DCh case   37:*/		return 0x8212C8E0;
		  /* 8212C8E0h */ case   38:  		/* lwz R5, <#[R31 + 20]> */
		/* 8212C8E0h case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 8212C8E0h case   38:*/		return 0x8212C8E4;
		  /* 8212C8E4h */ case   39:  		/* addi R4, R1, 112 */
		/* 8212C8E4h case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8212C8E4h case   39:*/		return 0x8212C8E8;
		  /* 8212C8E8h */ case   40:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C8E8h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C8E8h case   40:*/		return 0x8212C8EC;
		  /* 8212C8ECh */ case   41:  		/* lwzx R10, <#[R10 + R5]> */
		/* 8212C8ECh case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 8212C8ECh case   41:*/		return 0x8212C8F0;
		  /* 8212C8F0h */ case   42:  		/* lwz R10, <#[R10 + 16]> */
		/* 8212C8F0h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8212C8F0h case   42:*/		return 0x8212C8F4;
		  /* 8212C8F4h */ case   43:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C8F4h case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C8F4h case   43:*/		return 0x8212C8F8;
		  /* 8212C8F8h */ case   44:  		/* lwzx R10, <#[R10 + R6]> */
		/* 8212C8F8h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8212C8F8h case   44:*/		return 0x8212C8FC;
		  /* 8212C8FCh */ case   45:  		/* stwx R10, <#[R11 + R4]> */
		/* 8212C8FCh case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8212C8FCh case   45:*/		return 0x8212C900;
	}
	return 0x8212C900;
} // Block from 8212C848h-8212C900h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8212C900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C900);
		  /* 8212C900h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212C900h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212C900h case    0:*/		return 0x8212C904;
		  /* 8212C904h */ case    1:  		/* addi R11, R11, 4 */
		/* 8212C904h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212C904h case    1:*/		return 0x8212C908;
		  /* 8212C908h */ case    2:  		/* bc 16, CR0_LT, -72 */
		/* 8212C908h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212C8C0;  }
		/* 8212C908h case    2:*/		return 0x8212C90C;
		  /* 8212C90Ch */ case    3:  		/* lis R11, 256 */
		/* 8212C90Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x100);
		/* 8212C90Ch case    3:*/		return 0x8212C910;
		  /* 8212C910h */ case    4:  		/* stw R30, <#[R1 + 108]> */
		/* 8212C910h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212C910h case    4:*/		return 0x8212C914;
		  /* 8212C914h */ case    5:  		/* mr R10, R28 */
		/* 8212C914h case    5:*/		regs.R10 = regs.R28;
		/* 8212C914h case    5:*/		return 0x8212C918;
		  /* 8212C918h */ case    6:  		/* stw R30, <#[R1 + 100]> */
		/* 8212C918h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8212C918h case    6:*/		return 0x8212C91C;
		  /* 8212C91Ch */ case    7:  		/* li R9, 0 */
		/* 8212C91Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212C91Ch case    7:*/		return 0x8212C920;
		  /* 8212C920h */ case    8:  		/* stw R11, <#[R1 + 92]> */
		/* 8212C920h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212C920h case    8:*/		return 0x8212C924;
		  /* 8212C924h */ case    9:  		/* mr R8, R25 */
		/* 8212C924h case    9:*/		regs.R8 = regs.R25;
		/* 8212C924h case    9:*/		return 0x8212C928;
		  /* 8212C928h */ case   10:  		/* stw R30, <#[R1 + 84]> */
		/* 8212C928h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8212C928h case   10:*/		return 0x8212C92C;
		  /* 8212C92Ch */ case   11:  		/* mr R7, R27 */
		/* 8212C92Ch case   11:*/		regs.R7 = regs.R27;
		/* 8212C92Ch case   11:*/		return 0x8212C930;
		  /* 8212C930h */ case   12:  		/* mr R6, R29 */
		/* 8212C930h case   12:*/		regs.R6 = regs.R29;
		/* 8212C930h case   12:*/		return 0x8212C934;
		  /* 8212C934h */ case   13:  		/* addi R5, R1, 112 */
		/* 8212C934h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8212C934h case   13:*/		return 0x8212C938;
		  /* 8212C938h */ case   14:  		/* li R4, 2 */
		/* 8212C938h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212C938h case   14:*/		return 0x8212C93C;
		  /* 8212C93Ch */ case   15:  		/* mr R3, R31 */
		/* 8212C93Ch case   15:*/		regs.R3 = regs.R31;
		/* 8212C93Ch case   15:*/		return 0x8212C940;
		  /* 8212C940h */ case   16:  		/* bl -222688 */
		/* 8212C940h case   16:*/		regs.LR = 0x8212C944; return 0x820F6360;
		/* 8212C940h case   16:*/		return 0x8212C944;
		  /* 8212C944h */ case   17:  		/* mr R10, R28 */
		/* 8212C944h case   17:*/		regs.R10 = regs.R28;
		/* 8212C944h case   17:*/		return 0x8212C948;
		  /* 8212C948h */ case   18:  		/* addi R9, R1, 144 */
		/* 8212C948h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 8212C948h case   18:*/		return 0x8212C94C;
		  /* 8212C94Ch */ case   19:  		/* stw R30, <#[R1 + 108]> */
		/* 8212C94Ch case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212C94Ch case   19:*/		return 0x8212C950;
		  /* 8212C950h */ case   20:  		/* addi R8, R1, 160 */
		/* 8212C950h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 8212C950h case   20:*/		return 0x8212C954;
		  /* 8212C954h */ case   21:  		/* stw R30, <#[R1 + 100]> */
		/* 8212C954h case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8212C954h case   21:*/		return 0x8212C958;
		  /* 8212C958h */ case   22:  		/* addi R7, R1, 112 */
		/* 8212C958h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8212C958h case   22:*/		return 0x8212C95C;
		  /* 8212C95Ch */ case   23:  		/* stw R30, <#[R1 + 92]> */
		/* 8212C95Ch case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212C95Ch case   23:*/		return 0x8212C960;
		  /* 8212C960h */ case   24:  		/* mr R6, R29 */
		/* 8212C960h case   24:*/		regs.R6 = regs.R29;
		/* 8212C960h case   24:*/		return 0x8212C964;
		  /* 8212C964h */ case   25:  		/* stw R30, <#[R1 + 84]> */
		/* 8212C964h case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8212C964h case   25:*/		return 0x8212C968;
		  /* 8212C968h */ case   26:  		/* mr R5, R26 */
		/* 8212C968h case   26:*/		regs.R5 = regs.R26;
		/* 8212C968h case   26:*/		return 0x8212C96C;
		  /* 8212C96Ch */ case   27:  		/* li R4, 88 */
		/* 8212C96Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 8212C96Ch case   27:*/		return 0x8212C970;
		  /* 8212C970h */ case   28:  		/* mr R3, R31 */
		/* 8212C970h case   28:*/		regs.R3 = regs.R31;
		/* 8212C970h case   28:*/		return 0x8212C974;
		  /* 8212C974h */ case   29:  		/* bl -222740 */
		/* 8212C974h case   29:*/		regs.LR = 0x8212C978; return 0x820F6360;
		/* 8212C974h case   29:*/		return 0x8212C978;
	}
	return 0x8212C978;
} // Block from 8212C900h-8212C978h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8212C978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C978);
		  /* 8212C978h */ case    0:  		/* addi R1, R1, 240 */
		/* 8212C978h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8212C978h case    0:*/		return 0x8212C97C;
		  /* 8212C97Ch */ case    1:  		/* b -636640 */
		/* 8212C97Ch case    1:*/		return 0x8209129C;
		/* 8212C97Ch case    1:*/		return 0x8212C980;
	}
	return 0x8212C980;
} // Block from 8212C978h-8212C980h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212C980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C980);
		  /* 8212C980h */ case    0:  		/* mfspr R12, LR */
		/* 8212C980h case    0:*/		regs.R12 = regs.LR;
		/* 8212C980h case    0:*/		return 0x8212C984;
		  /* 8212C984h */ case    1:  		/* bl -636728 */
		/* 8212C984h case    1:*/		regs.LR = 0x8212C988; return 0x8209124C;
		/* 8212C984h case    1:*/		return 0x8212C988;
		  /* 8212C988h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8212C988h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8212C988h case    2:*/		return 0x8212C98C;
		  /* 8212C98Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 8212C98Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8212C98Ch case    3:*/		return 0x8212C990;
		  /* 8212C990h */ case    4:  		/* mr R30, R3 */
		/* 8212C990h case    4:*/		regs.R30 = regs.R3;
		/* 8212C990h case    4:*/		return 0x8212C994;
		  /* 8212C994h */ case    5:  		/* lwz R8, <#[R3 + 20]> */
		/* 8212C994h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 8212C994h case    5:*/		return 0x8212C998;
		  /* 8212C998h */ case    6:  		/* lwz R29, <#[R11 + 8]> */
		/* 8212C998h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8212C998h case    6:*/		return 0x8212C99C;
		  /* 8212C99Ch */ case    7:  		/* lwz R28, <#[R11 + 16]> */
		/* 8212C99Ch case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000010) );
		/* 8212C99Ch case    7:*/		return 0x8212C9A0;
		  /* 8212C9A0h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 8212C9A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212C9A0h case    8:*/		return 0x8212C9A4;
		  /* 8212C9A4h */ case    9:  		/* lwz R27, <#[R11 + 12]> */
		/* 8212C9A4h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212C9A4h case    9:*/		return 0x8212C9A8;
		  /* 8212C9A8h */ case   10:  		/* rlwinm R26, R10, 0, 12, 31 */
		/* 8212C9A8h case   10:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R10);
		/* 8212C9A8h case   10:*/		return 0x8212C9AC;
		  /* 8212C9ACh */ case   11:  		/* lwz R10, <#[R29]> */
		/* 8212C9ACh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8212C9ACh case   11:*/		return 0x8212C9B0;
		  /* 8212C9B0h */ case   12:  		/* lwz R9, <#[R28]> */
		/* 8212C9B0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 8212C9B0h case   12:*/		return 0x8212C9B4;
		  /* 8212C9B4h */ case   13:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 8212C9B4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 8212C9B4h case   13:*/		return 0x8212C9B8;
		  /* 8212C9B8h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212C9B8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212C9B8h case   14:*/		return 0x8212C9BC;
		  /* 8212C9BCh */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8212C9BCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8212C9BCh case   15:*/		return 0x8212C9C0;
		  /* 8212C9C0h */ case   16:  		/* add R25, R11, R29 */
		/* 8212C9C0h case   16:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R29);
		/* 8212C9C0h case   16:*/		return 0x8212C9C4;
		  /* 8212C9C4h */ case   17:  		/* lwzx R7, <#[R11 + R29]> */
		/* 8212C9C4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8212C9C4h case   17:*/		return 0x8212C9C8;
		  /* 8212C9C8h */ case   18:  		/* lwzx R11, <#[R10 + R8]> */
		/* 8212C9C8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212C9C8h case   18:*/		return 0x8212C9CC;
		  /* 8212C9CCh */ case   19:  		/* lwzx R10, <#[R9 + R8]> */
		/* 8212C9CCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8212C9CCh case   19:*/		return 0x8212C9D0;
		  /* 8212C9D0h */ case   20:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8212C9D0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8212C9D0h case   20:*/		return 0x8212C9D4;
		  /* 8212C9D4h */ case   21:  		/* lwz R6, <#[R11 + 4]> */
		/* 8212C9D4h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8212C9D4h case   21:*/		return 0x8212C9D8;
		  /* 8212C9D8h */ case   22:  		/* lwz R9, <#[R10 + 4]> */
		/* 8212C9D8h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8212C9D8h case   22:*/		return 0x8212C9DC;
		  /* 8212C9DCh */ case   23:  		/* lwzx R8, <#[R7 + R8]> */
		/* 8212C9DCh case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 8212C9DCh case   23:*/		return 0x8212C9E0;
		  /* 8212C9E0h */ case   24:  		/* cmplw CR6, R9, R6 */
		/* 8212C9E0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 8212C9E0h case   24:*/		return 0x8212C9E4;
		  /* 8212C9E4h */ case   25:  		/* bc 4, CR6_EQ, 20 */
		/* 8212C9E4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8212C9F8;  }
		/* 8212C9E4h case   25:*/		return 0x8212C9E8;
		  /* 8212C9E8h */ case   26:  		/* lwz R7, <#[R10 + 12]> */
		/* 8212C9E8h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212C9E8h case   26:*/		return 0x8212C9EC;
		  /* 8212C9ECh */ case   27:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212C9ECh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212C9ECh case   27:*/		return 0x8212C9F0;
		  /* 8212C9F0h */ case   28:  		/* cmplw CR6, R7, R11 */
		/* 8212C9F0h case   28:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 8212C9F0h case   28:*/		return 0x8212C9F4;
		  /* 8212C9F4h */ case   29:  		/* bc 12, CR6_EQ, 32 */
		/* 8212C9F4h case   29:*/		if ( regs.CR[6].eq ) { return 0x8212CA14;  }
		/* 8212C9F4h case   29:*/		return 0x8212C9F8;
	}
	return 0x8212C9F8;
} // Block from 8212C980h-8212C9F8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8212C9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212C9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212C9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212C9F8);
		  /* 8212C9F8h */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 8212C9F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 8212C9F8h case    0:*/		return 0x8212C9FC;
		  /* 8212C9FCh */ case    1:  		/* cmplw CR6, R9, R11 */
		/* 8212C9FCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8212C9FCh case    1:*/		return 0x8212CA00;
		  /* 8212CA00h */ case    2:  		/* bc 4, CR6_EQ, 252 */
		/* 8212CA00h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212CAFC;  }
		/* 8212CA00h case    2:*/		return 0x8212CA04;
		  /* 8212CA04h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 8212CA04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212CA04h case    3:*/		return 0x8212CA08;
		  /* 8212CA08h */ case    4:  		/* lwz R10, <#[R8 + 12]> */
		/* 8212CA08h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 8212CA08h case    4:*/		return 0x8212CA0C;
		  /* 8212CA0Ch */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 8212CA0Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212CA0Ch case    5:*/		return 0x8212CA10;
		  /* 8212CA10h */ case    6:  		/* bc 4, CR6_EQ, 236 */
		/* 8212CA10h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212CAFC;  }
		/* 8212CA10h case    6:*/		return 0x8212CA14;
	}
	return 0x8212CA14;
} // Block from 8212C9F8h-8212CA14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212CA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CA14);
		  /* 8212CA14h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8212CA14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212CA14h case    0:*/		return 0x8212CA18;
		  /* 8212CA18h */ case    1:  		/* li R8, 0 */
		/* 8212CA18h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212CA18h case    1:*/		return 0x8212CA1C;
		  /* 8212CA1Ch */ case    2:  		/* li R7, 0 */
		/* 8212CA1Ch case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212CA1Ch case    2:*/		return 0x8212CA20;
		  /* 8212CA20h */ case    3:  		/* lwz R4, <#[R30 + 256]> */
		/* 8212CA20h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000100) );
		/* 8212CA20h case    3:*/		return 0x8212CA24;
		  /* 8212CA24h */ case    4:  		/* li R6, 4 */
		/* 8212CA24h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212CA24h case    4:*/		return 0x8212CA28;
		  /* 8212CA28h */ case    5:  		/* addi R5, R1, 128 */
		/* 8212CA28h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8212CA28h case    5:*/		return 0x8212CA2C;
		  /* 8212CA2Ch */ case    6:  		/* mr R3, R30 */
		/* 8212CA2Ch case    6:*/		regs.R3 = regs.R30;
		/* 8212CA2Ch case    6:*/		return 0x8212CA30;
		  /* 8212CA30h */ case    7:  		/* lwz R11, <#[R11 + 340]> */
		/* 8212CA30h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 8212CA30h case    7:*/		return 0x8212CA34;
		  /* 8212CA34h */ case    8:  		/* mtspr CTR, R11 */
		/* 8212CA34h case    8:*/		regs.CTR = regs.R11;
		/* 8212CA34h case    8:*/		return 0x8212CA38;
		  /* 8212CA38h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8212CA38h case    9:*/		if ( 1 ) { regs.LR = 0x8212CA3C; return (uint32)regs.CTR; }
		/* 8212CA38h case    9:*/		return 0x8212CA3C;
		  /* 8212CA3Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8212CA3Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CA3Ch case   10:*/		return 0x8212CA40;
		  /* 8212CA40h */ case   11:  		/* bc 12, CR0_LT, 244 */
		/* 8212CA40h case   11:*/		if ( regs.CR[0].lt ) { return 0x8212CB34;  }
		/* 8212CA40h case   11:*/		return 0x8212CA44;
		  /* 8212CA44h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 8212CA44h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8212CA44h case   12:*/		return 0x8212CA48;
		  /* 8212CA48h */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 8212CA48h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212CA88;  }
		/* 8212CA48h case   13:*/		return 0x8212CA4C;
		  /* 8212CA4Ch */ case   14:  		/* addi R9, R1, 112 */
		/* 8212CA4Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8212CA4Ch case   14:*/		return 0x8212CA50;
		  /* 8212CA50h */ case   15:  		/* lwz R10, <#[R30 + 20]> */
		/* 8212CA50h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 8212CA50h case   15:*/		return 0x8212CA54;
		  /* 8212CA54h */ case   16:  		/* addi R11, R1, 112 */
		/* 8212CA54h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8212CA54h case   16:*/		return 0x8212CA58;
		  /* 8212CA58h */ case   17:  		/* mtspr CTR, R27 */
		/* 8212CA58h case   17:*/		regs.CTR = regs.R27;
		/* 8212CA58h case   17:*/		return 0x8212CA5C;
		  /* 8212CA5Ch */ case   18:  		/* subf R9, R9, R28 */
		/* 8212CA5Ch case   18:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R28);
		/* 8212CA5Ch case   18:*/		return 0x8212CA60;
		  /* 8212CA60h */ case   19:  		/* lwzx R8, <#[R9 + R11]> */
		/* 8212CA60h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8212CA60h case   19:*/		return 0x8212CA64;
		  /* 8212CA64h */ case   20:  		/* addi R7, R1, 128 */
		/* 8212CA64h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 8212CA64h case   20:*/		return 0x8212CA68;
		  /* 8212CA68h */ case   21:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212CA68h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212CA68h case   21:*/		return 0x8212CA6C;
		  /* 8212CA6Ch */ case   22:  		/* lwzx R8, <#[R8 + R10]> */
		/* 8212CA6Ch case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8212CA6Ch case   22:*/		return 0x8212CA70;
		  /* 8212CA70h */ case   23:  		/* lwz R8, <#[R8 + 16]> */
		/* 8212CA70h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8212CA70h case   23:*/		return 0x8212CA74;
		  /* 8212CA74h */ case   24:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212CA74h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212CA74h case   24:*/		return 0x8212CA78;
		  /* 8212CA78h */ case   25:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8212CA78h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212CA78h case   25:*/		return 0x8212CA7C;
		  /* 8212CA7Ch */ case   26:  		/* stw R8, <#[R11]> */
		/* 8212CA7Ch case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8212CA7Ch case   26:*/		return 0x8212CA80;
		  /* 8212CA80h */ case   27:  		/* addi R11, R11, 4 */
		/* 8212CA80h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212CA80h case   27:*/		return 0x8212CA84;
		  /* 8212CA84h */ case   28:  		/* bc 16, CR0_LT, -36 */
		/* 8212CA84h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212CA60;  }
		/* 8212CA84h case   28:*/		return 0x8212CA88;
	}
	return 0x8212CA88;
} // Block from 8212CA14h-8212CA88h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212CA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CA88);
		  /* 8212CA88h */ case    0:  		/* li R31, 0 */
		/* 8212CA88h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212CA88h case    0:*/		return 0x8212CA8C;
		  /* 8212CA8Ch */ case    1:  		/* lis R11, 256 */
		/* 8212CA8Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x100);
		/* 8212CA8Ch case    1:*/		return 0x8212CA90;
		  /* 8212CA90h */ case    2:  		/* mr R10, R26 */
		/* 8212CA90h case    2:*/		regs.R10 = regs.R26;
		/* 8212CA90h case    2:*/		return 0x8212CA94;
		  /* 8212CA94h */ case    3:  		/* stw R31, <#[R1 + 108]> */
		/* 8212CA94h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212CA94h case    3:*/		return 0x8212CA98;
		  /* 8212CA98h */ case    4:  		/* li R9, 0 */
		/* 8212CA98h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212CA98h case    4:*/		return 0x8212CA9C;
		  /* 8212CA9Ch */ case    5:  		/* stw R31, <#[R1 + 100]> */
		/* 8212CA9Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8212CA9Ch case    5:*/		return 0x8212CAA0;
		  /* 8212CAA0h */ case    6:  		/* mr R8, R25 */
		/* 8212CAA0h case    6:*/		regs.R8 = regs.R25;
		/* 8212CAA0h case    6:*/		return 0x8212CAA4;
		  /* 8212CAA4h */ case    7:  		/* stw R11, <#[R1 + 92]> */
		/* 8212CAA4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212CAA4h case    7:*/		return 0x8212CAA8;
		  /* 8212CAA8h */ case    8:  		/* mr R7, R29 */
		/* 8212CAA8h case    8:*/		regs.R7 = regs.R29;
		/* 8212CAA8h case    8:*/		return 0x8212CAAC;
		  /* 8212CAACh */ case    9:  		/* stw R31, <#[R1 + 84]> */
		/* 8212CAACh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8212CAACh case    9:*/		return 0x8212CAB0;
		  /* 8212CAB0h */ case   10:  		/* mr R6, R27 */
		/* 8212CAB0h case   10:*/		regs.R6 = regs.R27;
		/* 8212CAB0h case   10:*/		return 0x8212CAB4;
		  /* 8212CAB4h */ case   11:  		/* addi R5, R1, 112 */
		/* 8212CAB4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8212CAB4h case   11:*/		return 0x8212CAB8;
		  /* 8212CAB8h */ case   12:  		/* li R4, 2 */
		/* 8212CAB8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212CAB8h case   12:*/		return 0x8212CABC;
		  /* 8212CABCh */ case   13:  		/* mr R3, R30 */
		/* 8212CABCh case   13:*/		regs.R3 = regs.R30;
		/* 8212CABCh case   13:*/		return 0x8212CAC0;
		  /* 8212CAC0h */ case   14:  		/* bl -223072 */
		/* 8212CAC0h case   14:*/		regs.LR = 0x8212CAC4; return 0x820F6360;
		/* 8212CAC0h case   14:*/		return 0x8212CAC4;
		  /* 8212CAC4h */ case   15:  		/* mr R10, R26 */
		/* 8212CAC4h case   15:*/		regs.R10 = regs.R26;
		/* 8212CAC4h case   15:*/		return 0x8212CAC8;
		  /* 8212CAC8h */ case   16:  		/* mr R9, R25 */
		/* 8212CAC8h case   16:*/		regs.R9 = regs.R25;
		/* 8212CAC8h case   16:*/		return 0x8212CACC;
		  /* 8212CACCh */ case   17:  		/* stw R31, <#[R1 + 108]> */
		/* 8212CACCh case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212CACCh case   17:*/		return 0x8212CAD0;
		  /* 8212CAD0h */ case   18:  		/* mr R8, R29 */
		/* 8212CAD0h case   18:*/		regs.R8 = regs.R29;
		/* 8212CAD0h case   18:*/		return 0x8212CAD4;
		  /* 8212CAD4h */ case   19:  		/* stw R31, <#[R1 + 100]> */
		/* 8212CAD4h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8212CAD4h case   19:*/		return 0x8212CAD8;
		  /* 8212CAD8h */ case   20:  		/* addi R7, R1, 112 */
		/* 8212CAD8h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8212CAD8h case   20:*/		return 0x8212CADC;
		  /* 8212CADCh */ case   21:  		/* stw R31, <#[R1 + 92]> */
		/* 8212CADCh case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212CADCh case   21:*/		return 0x8212CAE0;
		  /* 8212CAE0h */ case   22:  		/* mr R6, R27 */
		/* 8212CAE0h case   22:*/		regs.R6 = regs.R27;
		/* 8212CAE0h case   22:*/		return 0x8212CAE4;
		  /* 8212CAE4h */ case   23:  		/* stw R31, <#[R1 + 84]> */
		/* 8212CAE4h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8212CAE4h case   23:*/		return 0x8212CAE8;
		  /* 8212CAE8h */ case   24:  		/* mr R5, R28 */
		/* 8212CAE8h case   24:*/		regs.R5 = regs.R28;
		/* 8212CAE8h case   24:*/		return 0x8212CAEC;
		  /* 8212CAECh */ case   25:  		/* li R4, 88 */
		/* 8212CAECh case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 8212CAECh case   25:*/		return 0x8212CAF0;
		  /* 8212CAF0h */ case   26:  		/* mr R3, R30 */
		/* 8212CAF0h case   26:*/		regs.R3 = regs.R30;
		/* 8212CAF0h case   26:*/		return 0x8212CAF4;
		  /* 8212CAF4h */ case   27:  		/* bl -223124 */
		/* 8212CAF4h case   27:*/		regs.LR = 0x8212CAF8; return 0x820F6360;
		/* 8212CAF4h case   27:*/		return 0x8212CAF8;
		  /* 8212CAF8h */ case   28:  		/* b 60 */
		/* 8212CAF8h case   28:*/		return 0x8212CB34;
		/* 8212CAF8h case   28:*/		return 0x8212CAFC;
	}
	return 0x8212CAFC;
} // Block from 8212CA88h-8212CAFCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212CAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CAFC);
		  /* 8212CAFCh */ case    0:  		/* li R31, 0 */
		/* 8212CAFCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212CAFCh case    0:*/		return 0x8212CB00;
		  /* 8212CB00h */ case    1:  		/* mr R10, R26 */
		/* 8212CB00h case    1:*/		regs.R10 = regs.R26;
		/* 8212CB00h case    1:*/		return 0x8212CB04;
		  /* 8212CB04h */ case    2:  		/* li R9, 0 */
		/* 8212CB04h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212CB04h case    2:*/		return 0x8212CB08;
		  /* 8212CB08h */ case    3:  		/* stw R31, <#[R1 + 108]> */
		/* 8212CB08h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212CB08h case    3:*/		return 0x8212CB0C;
		  /* 8212CB0Ch */ case    4:  		/* mr R8, R25 */
		/* 8212CB0Ch case    4:*/		regs.R8 = regs.R25;
		/* 8212CB0Ch case    4:*/		return 0x8212CB10;
		  /* 8212CB10h */ case    5:  		/* stw R31, <#[R1 + 100]> */
		/* 8212CB10h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8212CB10h case    5:*/		return 0x8212CB14;
		  /* 8212CB14h */ case    6:  		/* mr R7, R29 */
		/* 8212CB14h case    6:*/		regs.R7 = regs.R29;
		/* 8212CB14h case    6:*/		return 0x8212CB18;
		  /* 8212CB18h */ case    7:  		/* stw R31, <#[R1 + 92]> */
		/* 8212CB18h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212CB18h case    7:*/		return 0x8212CB1C;
		  /* 8212CB1Ch */ case    8:  		/* mr R6, R27 */
		/* 8212CB1Ch case    8:*/		regs.R6 = regs.R27;
		/* 8212CB1Ch case    8:*/		return 0x8212CB20;
		  /* 8212CB20h */ case    9:  		/* stw R31, <#[R1 + 84]> */
		/* 8212CB20h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8212CB20h case    9:*/		return 0x8212CB24;
		  /* 8212CB24h */ case   10:  		/* mr R5, R28 */
		/* 8212CB24h case   10:*/		regs.R5 = regs.R28;
		/* 8212CB24h case   10:*/		return 0x8212CB28;
		  /* 8212CB28h */ case   11:  		/* li R4, 11 */
		/* 8212CB28h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 8212CB28h case   11:*/		return 0x8212CB2C;
		  /* 8212CB2Ch */ case   12:  		/* mr R3, R30 */
		/* 8212CB2Ch case   12:*/		regs.R3 = regs.R30;
		/* 8212CB2Ch case   12:*/		return 0x8212CB30;
		  /* 8212CB30h */ case   13:  		/* bl -223184 */
		/* 8212CB30h case   13:*/		regs.LR = 0x8212CB34; return 0x820F6360;
		/* 8212CB30h case   13:*/		return 0x8212CB34;
	}
	return 0x8212CB34;
} // Block from 8212CAFCh-8212CB34h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212CB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CB34);
		  /* 8212CB34h */ case    0:  		/* addi R1, R1, 208 */
		/* 8212CB34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8212CB34h case    0:*/		return 0x8212CB38;
		  /* 8212CB38h */ case    1:  		/* b -637084 */
		/* 8212CB38h case    1:*/		return 0x8209129C;
		/* 8212CB38h case    1:*/		return 0x8212CB3C;
		  /* 8212CB3Ch */ case    2:  		/* nop */
		/* 8212CB3Ch case    2:*/		cpu::op::nop();
		/* 8212CB3Ch case    2:*/		return 0x8212CB40;
	}
	return 0x8212CB40;
} // Block from 8212CB34h-8212CB40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212CB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CB40);
		  /* 8212CB40h */ case    0:  		/* mfspr R12, LR */
		/* 8212CB40h case    0:*/		regs.R12 = regs.LR;
		/* 8212CB40h case    0:*/		return 0x8212CB44;
		  /* 8212CB44h */ case    1:  		/* bl -637176 */
		/* 8212CB44h case    1:*/		regs.LR = 0x8212CB48; return 0x8209124C;
		/* 8212CB44h case    1:*/		return 0x8212CB48;
	}
	return 0x8212CB48;
} // Block from 8212CB40h-8212CB48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212CB48h
// Function '?PatternMatch@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CB48);
		  /* 8212CB48h */ case    0:  		/* stwu R1, <#[R1 - 208]> */
		/* 8212CB48h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8212CB48h case    0:*/		return 0x8212CB4C;
		  /* 8212CB4Ch */ case    1:  		/* lwz R11, <#[R3 + 260]> */
		/* 8212CB4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8212CB4Ch case    1:*/		return 0x8212CB50;
		  /* 8212CB50h */ case    2:  		/* mr R30, R3 */
		/* 8212CB50h case    2:*/		regs.R30 = regs.R3;
		/* 8212CB50h case    2:*/		return 0x8212CB54;
		  /* 8212CB54h */ case    3:  		/* lwz R8, <#[R3 + 20]> */
		/* 8212CB54h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 8212CB54h case    3:*/		return 0x8212CB58;
		  /* 8212CB58h */ case    4:  		/* lwz R29, <#[R11 + 8]> */
		/* 8212CB58h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8212CB58h case    4:*/		return 0x8212CB5C;
		  /* 8212CB5Ch */ case    5:  		/* lwz R28, <#[R11 + 16]> */
		/* 8212CB5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000010) );
		/* 8212CB5Ch case    5:*/		return 0x8212CB60;
		  /* 8212CB60h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 8212CB60h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212CB60h case    6:*/		return 0x8212CB64;
		  /* 8212CB64h */ case    7:  		/* lwz R27, <#[R11 + 12]> */
		/* 8212CB64h case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212CB64h case    7:*/		return 0x8212CB68;
		  /* 8212CB68h */ case    8:  		/* rlwinm R26, R10, 0, 12, 31 */
		/* 8212CB68h case    8:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R10);
		/* 8212CB68h case    8:*/		return 0x8212CB6C;
		  /* 8212CB6Ch */ case    9:  		/* lwz R10, <#[R29]> */
		/* 8212CB6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8212CB6Ch case    9:*/		return 0x8212CB70;
		  /* 8212CB70h */ case   10:  		/* lwz R9, <#[R28]> */
		/* 8212CB70h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 8212CB70h case   10:*/		return 0x8212CB74;
		  /* 8212CB74h */ case   11:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 8212CB74h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 8212CB74h case   11:*/		return 0x8212CB78;
		  /* 8212CB78h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212CB78h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212CB78h case   12:*/		return 0x8212CB7C;
		  /* 8212CB7Ch */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8212CB7Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8212CB7Ch case   13:*/		return 0x8212CB80;
		  /* 8212CB80h */ case   14:  		/* add R25, R11, R29 */
		/* 8212CB80h case   14:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R29);
		/* 8212CB80h case   14:*/		return 0x8212CB84;
		  /* 8212CB84h */ case   15:  		/* lwzx R7, <#[R11 + R29]> */
		/* 8212CB84h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8212CB84h case   15:*/		return 0x8212CB88;
		  /* 8212CB88h */ case   16:  		/* lwzx R11, <#[R10 + R8]> */
		/* 8212CB88h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212CB88h case   16:*/		return 0x8212CB8C;
		  /* 8212CB8Ch */ case   17:  		/* lwzx R10, <#[R9 + R8]> */
		/* 8212CB8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8212CB8Ch case   17:*/		return 0x8212CB90;
		  /* 8212CB90h */ case   18:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8212CB90h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8212CB90h case   18:*/		return 0x8212CB94;
		  /* 8212CB94h */ case   19:  		/* lwz R6, <#[R11 + 4]> */
		/* 8212CB94h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8212CB94h case   19:*/		return 0x8212CB98;
		  /* 8212CB98h */ case   20:  		/* lwz R9, <#[R10 + 4]> */
		/* 8212CB98h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8212CB98h case   20:*/		return 0x8212CB9C;
		  /* 8212CB9Ch */ case   21:  		/* lwzx R8, <#[R7 + R8]> */
		/* 8212CB9Ch case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 8212CB9Ch case   21:*/		return 0x8212CBA0;
		  /* 8212CBA0h */ case   22:  		/* cmplw CR6, R9, R6 */
		/* 8212CBA0h case   22:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 8212CBA0h case   22:*/		return 0x8212CBA4;
		  /* 8212CBA4h */ case   23:  		/* bc 4, CR6_EQ, 20 */
		/* 8212CBA4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8212CBB8;  }
		/* 8212CBA4h case   23:*/		return 0x8212CBA8;
		  /* 8212CBA8h */ case   24:  		/* lwz R7, <#[R10 + 12]> */
		/* 8212CBA8h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212CBA8h case   24:*/		return 0x8212CBAC;
		  /* 8212CBACh */ case   25:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212CBACh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212CBACh case   25:*/		return 0x8212CBB0;
		  /* 8212CBB0h */ case   26:  		/* cmplw CR6, R7, R11 */
		/* 8212CBB0h case   26:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 8212CBB0h case   26:*/		return 0x8212CBB4;
		  /* 8212CBB4h */ case   27:  		/* bc 12, CR6_EQ, 32 */
		/* 8212CBB4h case   27:*/		if ( regs.CR[6].eq ) { return 0x8212CBD4;  }
		/* 8212CBB4h case   27:*/		return 0x8212CBB8;
	}
	return 0x8212CBB8;
} // Block from 8212CB48h-8212CBB8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8212CBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CBB8);
		  /* 8212CBB8h */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 8212CBB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 8212CBB8h case    0:*/		return 0x8212CBBC;
		  /* 8212CBBCh */ case    1:  		/* cmplw CR6, R9, R11 */
		/* 8212CBBCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8212CBBCh case    1:*/		return 0x8212CBC0;
		  /* 8212CBC0h */ case    2:  		/* bc 4, CR6_EQ, 252 */
		/* 8212CBC0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212CCBC;  }
		/* 8212CBC0h case    2:*/		return 0x8212CBC4;
		  /* 8212CBC4h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 8212CBC4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212CBC4h case    3:*/		return 0x8212CBC8;
		  /* 8212CBC8h */ case    4:  		/* lwz R10, <#[R8 + 12]> */
		/* 8212CBC8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 8212CBC8h case    4:*/		return 0x8212CBCC;
		  /* 8212CBCCh */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 8212CBCCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212CBCCh case    5:*/		return 0x8212CBD0;
		  /* 8212CBD0h */ case    6:  		/* bc 4, CR6_EQ, 236 */
		/* 8212CBD0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212CCBC;  }
		/* 8212CBD0h case    6:*/		return 0x8212CBD4;
	}
	return 0x8212CBD4;
} // Block from 8212CBB8h-8212CBD4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212CBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CBD4);
		  /* 8212CBD4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8212CBD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212CBD4h case    0:*/		return 0x8212CBD8;
		  /* 8212CBD8h */ case    1:  		/* li R8, 0 */
		/* 8212CBD8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212CBD8h case    1:*/		return 0x8212CBDC;
		  /* 8212CBDCh */ case    2:  		/* li R7, 0 */
		/* 8212CBDCh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212CBDCh case    2:*/		return 0x8212CBE0;
		  /* 8212CBE0h */ case    3:  		/* lwz R4, <#[R30 + 256]> */
		/* 8212CBE0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000100) );
		/* 8212CBE0h case    3:*/		return 0x8212CBE4;
		  /* 8212CBE4h */ case    4:  		/* li R6, 4 */
		/* 8212CBE4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212CBE4h case    4:*/		return 0x8212CBE8;
		  /* 8212CBE8h */ case    5:  		/* addi R5, R1, 128 */
		/* 8212CBE8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8212CBE8h case    5:*/		return 0x8212CBEC;
		  /* 8212CBECh */ case    6:  		/* mr R3, R30 */
		/* 8212CBECh case    6:*/		regs.R3 = regs.R30;
		/* 8212CBECh case    6:*/		return 0x8212CBF0;
		  /* 8212CBF0h */ case    7:  		/* lwz R11, <#[R11 + 340]> */
		/* 8212CBF0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 8212CBF0h case    7:*/		return 0x8212CBF4;
		  /* 8212CBF4h */ case    8:  		/* mtspr CTR, R11 */
		/* 8212CBF4h case    8:*/		regs.CTR = regs.R11;
		/* 8212CBF4h case    8:*/		return 0x8212CBF8;
		  /* 8212CBF8h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8212CBF8h case    9:*/		if ( 1 ) { regs.LR = 0x8212CBFC; return (uint32)regs.CTR; }
		/* 8212CBF8h case    9:*/		return 0x8212CBFC;
		  /* 8212CBFCh */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8212CBFCh case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CBFCh case   10:*/		return 0x8212CC00;
		  /* 8212CC00h */ case   11:  		/* bc 12, CR0_LT, 244 */
		/* 8212CC00h case   11:*/		if ( regs.CR[0].lt ) { return 0x8212CCF4;  }
		/* 8212CC00h case   11:*/		return 0x8212CC04;
		  /* 8212CC04h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 8212CC04h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8212CC04h case   12:*/		return 0x8212CC08;
		  /* 8212CC08h */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 8212CC08h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212CC48;  }
		/* 8212CC08h case   13:*/		return 0x8212CC0C;
		  /* 8212CC0Ch */ case   14:  		/* addi R9, R1, 112 */
		/* 8212CC0Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8212CC0Ch case   14:*/		return 0x8212CC10;
		  /* 8212CC10h */ case   15:  		/* lwz R10, <#[R30 + 20]> */
		/* 8212CC10h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 8212CC10h case   15:*/		return 0x8212CC14;
		  /* 8212CC14h */ case   16:  		/* addi R11, R1, 112 */
		/* 8212CC14h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8212CC14h case   16:*/		return 0x8212CC18;
		  /* 8212CC18h */ case   17:  		/* mtspr CTR, R27 */
		/* 8212CC18h case   17:*/		regs.CTR = regs.R27;
		/* 8212CC18h case   17:*/		return 0x8212CC1C;
		  /* 8212CC1Ch */ case   18:  		/* subf R9, R9, R28 */
		/* 8212CC1Ch case   18:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R28);
		/* 8212CC1Ch case   18:*/		return 0x8212CC20;
		  /* 8212CC20h */ case   19:  		/* lwzx R8, <#[R9 + R11]> */
		/* 8212CC20h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8212CC20h case   19:*/		return 0x8212CC24;
		  /* 8212CC24h */ case   20:  		/* addi R7, R1, 128 */
		/* 8212CC24h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 8212CC24h case   20:*/		return 0x8212CC28;
		  /* 8212CC28h */ case   21:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212CC28h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212CC28h case   21:*/		return 0x8212CC2C;
		  /* 8212CC2Ch */ case   22:  		/* lwzx R8, <#[R8 + R10]> */
		/* 8212CC2Ch case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8212CC2Ch case   22:*/		return 0x8212CC30;
		  /* 8212CC30h */ case   23:  		/* lwz R8, <#[R8 + 16]> */
		/* 8212CC30h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8212CC30h case   23:*/		return 0x8212CC34;
		  /* 8212CC34h */ case   24:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212CC34h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212CC34h case   24:*/		return 0x8212CC38;
		  /* 8212CC38h */ case   25:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8212CC38h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212CC38h case   25:*/		return 0x8212CC3C;
		  /* 8212CC3Ch */ case   26:  		/* stw R8, <#[R11]> */
		/* 8212CC3Ch case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8212CC3Ch case   26:*/		return 0x8212CC40;
		  /* 8212CC40h */ case   27:  		/* addi R11, R11, 4 */
		/* 8212CC40h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212CC40h case   27:*/		return 0x8212CC44;
		  /* 8212CC44h */ case   28:  		/* bc 16, CR0_LT, -36 */
		/* 8212CC44h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212CC20;  }
		/* 8212CC44h case   28:*/		return 0x8212CC48;
	}
	return 0x8212CC48;
} // Block from 8212CBD4h-8212CC48h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212CC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CC48);
		  /* 8212CC48h */ case    0:  		/* li R31, 0 */
		/* 8212CC48h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212CC48h case    0:*/		return 0x8212CC4C;
		  /* 8212CC4Ch */ case    1:  		/* lis R11, 256 */
		/* 8212CC4Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x100);
		/* 8212CC4Ch case    1:*/		return 0x8212CC50;
		  /* 8212CC50h */ case    2:  		/* mr R10, R26 */
		/* 8212CC50h case    2:*/		regs.R10 = regs.R26;
		/* 8212CC50h case    2:*/		return 0x8212CC54;
		  /* 8212CC54h */ case    3:  		/* stw R31, <#[R1 + 108]> */
		/* 8212CC54h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212CC54h case    3:*/		return 0x8212CC58;
		  /* 8212CC58h */ case    4:  		/* li R9, 0 */
		/* 8212CC58h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212CC58h case    4:*/		return 0x8212CC5C;
		  /* 8212CC5Ch */ case    5:  		/* stw R31, <#[R1 + 100]> */
		/* 8212CC5Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8212CC5Ch case    5:*/		return 0x8212CC60;
		  /* 8212CC60h */ case    6:  		/* mr R8, R25 */
		/* 8212CC60h case    6:*/		regs.R8 = regs.R25;
		/* 8212CC60h case    6:*/		return 0x8212CC64;
		  /* 8212CC64h */ case    7:  		/* stw R11, <#[R1 + 92]> */
		/* 8212CC64h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212CC64h case    7:*/		return 0x8212CC68;
		  /* 8212CC68h */ case    8:  		/* mr R7, R29 */
		/* 8212CC68h case    8:*/		regs.R7 = regs.R29;
		/* 8212CC68h case    8:*/		return 0x8212CC6C;
		  /* 8212CC6Ch */ case    9:  		/* stw R31, <#[R1 + 84]> */
		/* 8212CC6Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8212CC6Ch case    9:*/		return 0x8212CC70;
		  /* 8212CC70h */ case   10:  		/* mr R6, R27 */
		/* 8212CC70h case   10:*/		regs.R6 = regs.R27;
		/* 8212CC70h case   10:*/		return 0x8212CC74;
		  /* 8212CC74h */ case   11:  		/* addi R5, R1, 112 */
		/* 8212CC74h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8212CC74h case   11:*/		return 0x8212CC78;
		  /* 8212CC78h */ case   12:  		/* li R4, 2 */
		/* 8212CC78h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212CC78h case   12:*/		return 0x8212CC7C;
		  /* 8212CC7Ch */ case   13:  		/* mr R3, R30 */
		/* 8212CC7Ch case   13:*/		regs.R3 = regs.R30;
		/* 8212CC7Ch case   13:*/		return 0x8212CC80;
		  /* 8212CC80h */ case   14:  		/* bl -223520 */
		/* 8212CC80h case   14:*/		regs.LR = 0x8212CC84; return 0x820F6360;
		/* 8212CC80h case   14:*/		return 0x8212CC84;
		  /* 8212CC84h */ case   15:  		/* mr R10, R26 */
		/* 8212CC84h case   15:*/		regs.R10 = regs.R26;
		/* 8212CC84h case   15:*/		return 0x8212CC88;
		  /* 8212CC88h */ case   16:  		/* mr R9, R29 */
		/* 8212CC88h case   16:*/		regs.R9 = regs.R29;
		/* 8212CC88h case   16:*/		return 0x8212CC8C;
		  /* 8212CC8Ch */ case   17:  		/* stw R31, <#[R1 + 108]> */
		/* 8212CC8Ch case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212CC8Ch case   17:*/		return 0x8212CC90;
		  /* 8212CC90h */ case   18:  		/* mr R8, R25 */
		/* 8212CC90h case   18:*/		regs.R8 = regs.R25;
		/* 8212CC90h case   18:*/		return 0x8212CC94;
		  /* 8212CC94h */ case   19:  		/* stw R31, <#[R1 + 100]> */
		/* 8212CC94h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8212CC94h case   19:*/		return 0x8212CC98;
		  /* 8212CC98h */ case   20:  		/* addi R7, R1, 112 */
		/* 8212CC98h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8212CC98h case   20:*/		return 0x8212CC9C;
		  /* 8212CC9Ch */ case   21:  		/* stw R31, <#[R1 + 92]> */
		/* 8212CC9Ch case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212CC9Ch case   21:*/		return 0x8212CCA0;
		  /* 8212CCA0h */ case   22:  		/* mr R6, R27 */
		/* 8212CCA0h case   22:*/		regs.R6 = regs.R27;
		/* 8212CCA0h case   22:*/		return 0x8212CCA4;
		  /* 8212CCA4h */ case   23:  		/* stw R31, <#[R1 + 84]> */
		/* 8212CCA4h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8212CCA4h case   23:*/		return 0x8212CCA8;
		  /* 8212CCA8h */ case   24:  		/* mr R5, R28 */
		/* 8212CCA8h case   24:*/		regs.R5 = regs.R28;
		/* 8212CCA8h case   24:*/		return 0x8212CCAC;
		  /* 8212CCACh */ case   25:  		/* li R4, 88 */
		/* 8212CCACh case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 8212CCACh case   25:*/		return 0x8212CCB0;
		  /* 8212CCB0h */ case   26:  		/* mr R3, R30 */
		/* 8212CCB0h case   26:*/		regs.R3 = regs.R30;
		/* 8212CCB0h case   26:*/		return 0x8212CCB4;
		  /* 8212CCB4h */ case   27:  		/* bl -223572 */
		/* 8212CCB4h case   27:*/		regs.LR = 0x8212CCB8; return 0x820F6360;
		/* 8212CCB4h case   27:*/		return 0x8212CCB8;
		  /* 8212CCB8h */ case   28:  		/* b 60 */
		/* 8212CCB8h case   28:*/		return 0x8212CCF4;
		/* 8212CCB8h case   28:*/		return 0x8212CCBC;
	}
	return 0x8212CCBC;
} // Block from 8212CC48h-8212CCBCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212CCBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CCBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CCBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CCBC);
		  /* 8212CCBCh */ case    0:  		/* li R31, 0 */
		/* 8212CCBCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212CCBCh case    0:*/		return 0x8212CCC0;
		  /* 8212CCC0h */ case    1:  		/* mr R10, R26 */
		/* 8212CCC0h case    1:*/		regs.R10 = regs.R26;
		/* 8212CCC0h case    1:*/		return 0x8212CCC4;
		  /* 8212CCC4h */ case    2:  		/* li R9, 0 */
		/* 8212CCC4h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212CCC4h case    2:*/		return 0x8212CCC8;
		  /* 8212CCC8h */ case    3:  		/* stw R31, <#[R1 + 108]> */
		/* 8212CCC8h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8212CCC8h case    3:*/		return 0x8212CCCC;
		  /* 8212CCCCh */ case    4:  		/* mr R8, R25 */
		/* 8212CCCCh case    4:*/		regs.R8 = regs.R25;
		/* 8212CCCCh case    4:*/		return 0x8212CCD0;
		  /* 8212CCD0h */ case    5:  		/* stw R31, <#[R1 + 100]> */
		/* 8212CCD0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8212CCD0h case    5:*/		return 0x8212CCD4;
		  /* 8212CCD4h */ case    6:  		/* mr R7, R29 */
		/* 8212CCD4h case    6:*/		regs.R7 = regs.R29;
		/* 8212CCD4h case    6:*/		return 0x8212CCD8;
		  /* 8212CCD8h */ case    7:  		/* stw R31, <#[R1 + 92]> */
		/* 8212CCD8h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8212CCD8h case    7:*/		return 0x8212CCDC;
		  /* 8212CCDCh */ case    8:  		/* mr R6, R27 */
		/* 8212CCDCh case    8:*/		regs.R6 = regs.R27;
		/* 8212CCDCh case    8:*/		return 0x8212CCE0;
		  /* 8212CCE0h */ case    9:  		/* stw R31, <#[R1 + 84]> */
		/* 8212CCE0h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8212CCE0h case    9:*/		return 0x8212CCE4;
		  /* 8212CCE4h */ case   10:  		/* mr R5, R28 */
		/* 8212CCE4h case   10:*/		regs.R5 = regs.R28;
		/* 8212CCE4h case   10:*/		return 0x8212CCE8;
		  /* 8212CCE8h */ case   11:  		/* li R4, 10 */
		/* 8212CCE8h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 8212CCE8h case   11:*/		return 0x8212CCEC;
		  /* 8212CCECh */ case   12:  		/* mr R3, R30 */
		/* 8212CCECh case   12:*/		regs.R3 = regs.R30;
		/* 8212CCECh case   12:*/		return 0x8212CCF0;
		  /* 8212CCF0h */ case   13:  		/* bl -223632 */
		/* 8212CCF0h case   13:*/		regs.LR = 0x8212CCF4; return 0x820F6360;
		/* 8212CCF0h case   13:*/		return 0x8212CCF4;
	}
	return 0x8212CCF4;
} // Block from 8212CCBCh-8212CCF4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212CCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CCF4);
		  /* 8212CCF4h */ case    0:  		/* addi R1, R1, 208 */
		/* 8212CCF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8212CCF4h case    0:*/		return 0x8212CCF8;
		  /* 8212CCF8h */ case    1:  		/* b -637532 */
		/* 8212CCF8h case    1:*/		return 0x8209129C;
		/* 8212CCF8h case    1:*/		return 0x8212CCFC;
		  /* 8212CCFCh */ case    2:  		/* nop */
		/* 8212CCFCh case    2:*/		cpu::op::nop();
		/* 8212CCFCh case    2:*/		return 0x8212CD00;
	}
	return 0x8212CD00;
} // Block from 8212CCF4h-8212CD00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212CD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CD00);
		  /* 8212CD00h */ case    0:  		/* mr R11, R3 */
		/* 8212CD00h case    0:*/		regs.R11 = regs.R3;
		/* 8212CD00h case    0:*/		return 0x8212CD04;
		  /* 8212CD04h */ case    1:  		/* lwz R9, <#[R3 + 284]> */
		/* 8212CD04h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000011C) );
		/* 8212CD04h case    1:*/		return 0x8212CD08;
		  /* 8212CD08h */ case    2:  		/* li R3, 0 */
		/* 8212CD08h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212CD08h case    2:*/		return 0x8212CD0C;
		  /* 8212CD0Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 8212CD0Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 8212CD0Ch case    3:*/		return 0x8212CD10;
		  /* 8212CD10h */ case    4:  		/* lwz R8, <#[R11 + 276]> */
		/* 8212CD10h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000114) );
		/* 8212CD10h case    4:*/		return 0x8212CD14;
		  /* 8212CD14h */ case    5:  		/* lwz R11, <#[R11 + 272]> */
		/* 8212CD14h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000110) );
		/* 8212CD14h case    5:*/		return 0x8212CD18;
		  /* 8212CD18h */ case    6:  		/* subf R9, R9, R8 */
		/* 8212CD18h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8212CD18h case    6:*/		return 0x8212CD1C;
		  /* 8212CD1Ch */ case    7:  		/* addi R9, R9, -1 */
		/* 8212CD1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8212CD1Ch case    7:*/		return 0x8212CD20;
		  /* 8212CD20h */ case    8:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8212CD20h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212CD20h case    8:*/		return 0x8212CD24;
		  /* 8212CD24h */ case    9:  		/* rlwinm R9, R9, 24, 0, 7 */
		/* 8212CD24h case    9:*/		cpu::op::rlwinm<0,24,0,7>(regs,&regs.R9,regs.R9);
		/* 8212CD24h case    9:*/		return 0x8212CD28;
		  /* 8212CD28h */ case   10:  		/* or R9, R9, R8 */
		/* 8212CD28h case   10:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8212CD28h case   10:*/		return 0x8212CD2C;
		  /* 8212CD2Ch */ case   11:  		/* stwx R9, <#[R10 + R11]> */
		/* 8212CD2Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212CD2Ch case   11:*/		return 0x8212CD30;
		  /* 8212CD30h */ case   12:  		/* bclr 20, CR0_LT */
		/* 8212CD30h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212CD30h case   12:*/		return 0x8212CD34;
	}
	return 0x8212CD34;
} // Block from 8212CD00h-8212CD34h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212CD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CD34);
		  /* 8212CD34h */ case    0:  		/* nop */
		/* 8212CD34h case    0:*/		cpu::op::nop();
		/* 8212CD34h case    0:*/		return 0x8212CD38;
	}
	return 0x8212CD38;
} // Block from 8212CD34h-8212CD38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212CD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CD38);
		  /* 8212CD38h */ case    0:  		/* mfspr R12, LR */
		/* 8212CD38h case    0:*/		regs.R12 = regs.LR;
		/* 8212CD38h case    0:*/		return 0x8212CD3C;
		  /* 8212CD3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212CD3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212CD3Ch case    1:*/		return 0x8212CD40;
		  /* 8212CD40h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8212CD40h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212CD40h case    2:*/		return 0x8212CD44;
		  /* 8212CD44h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8212CD44h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212CD44h case    3:*/		return 0x8212CD48;
		  /* 8212CD48h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8212CD48h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8212CD48h case    4:*/		return 0x8212CD4C;
		  /* 8212CD4Ch */ case    5:  		/* lwz R11, <#[R3 + 348]> */
		/* 8212CD4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000015C) );
		/* 8212CD4Ch case    5:*/		return 0x8212CD50;
		  /* 8212CD50h */ case    6:  		/* mr R31, R3 */
		/* 8212CD50h case    6:*/		regs.R31 = regs.R3;
		/* 8212CD50h case    6:*/		return 0x8212CD54;
		  /* 8212CD54h */ case    7:  		/* mr R30, R4 */
		/* 8212CD54h case    7:*/		regs.R30 = regs.R4;
		/* 8212CD54h case    7:*/		return 0x8212CD58;
		  /* 8212CD58h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8212CD58h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212CD58h case    8:*/		return 0x8212CD5C;
		  /* 8212CD5Ch */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 8212CD5Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8212CD68;  }
		/* 8212CD5Ch case    9:*/		return 0x8212CD60;
		  /* 8212CD60h */ case   10:  		/* li R3, 0 */
		/* 8212CD60h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212CD60h case   10:*/		return 0x8212CD64;
		  /* 8212CD64h */ case   11:  		/* b 216 */
		/* 8212CD64h case   11:*/		return 0x8212CE3C;
		/* 8212CD64h case   11:*/		return 0x8212CD68;
	}
	return 0x8212CD68;
} // Block from 8212CD38h-8212CD68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212CD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CD68);
		  /* 8212CD68h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8212CD68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212CD68h case    0:*/		return 0x8212CD6C;
		  /* 8212CD6Ch */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 8212CD6Ch case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 8212CD6Ch case    1:*/		return 0x8212CD70;
		  /* 8212CD70h */ case    2:  		/* bc 4, CR0_EQ, -16 */
		/* 8212CD70h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8212CD60;  }
		/* 8212CD70h case    2:*/		return 0x8212CD74;
		  /* 8212CD74h */ case    3:  		/* lis R4, 512 */
		/* 8212CD74h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x200);
		/* 8212CD74h case    3:*/		return 0x8212CD78;
		  /* 8212CD78h */ case    4:  		/* mr R3, R31 */
		/* 8212CD78h case    4:*/		regs.R3 = regs.R31;
		/* 8212CD78h case    4:*/		return 0x8212CD7C;
		  /* 8212CD7Ch */ case    5:  		/* ori R4, R4, 31 */
		/* 8212CD7Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1F);
		/* 8212CD7Ch case    5:*/		return 0x8212CD80;
		  /* 8212CD80h */ case    6:  		/* bl -224400 */
		/* 8212CD80h case    6:*/		regs.LR = 0x8212CD84; return 0x820F60F0;
		/* 8212CD80h case    6:*/		return 0x8212CD84;
		  /* 8212CD84h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8212CD84h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CD84h case    7:*/		return 0x8212CD88;
		  /* 8212CD88h */ case    8:  		/* bc 12, CR0_LT, 180 */
		/* 8212CD88h case    8:*/		if ( regs.CR[0].lt ) { return 0x8212CE3C;  }
		/* 8212CD88h case    8:*/		return 0x8212CD8C;
		  /* 8212CD8Ch */ case    9:  		/* lwz R11, <#[R30 + 60]> */
		/* 8212CD8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 8212CD8Ch case    9:*/		return 0x8212CD90;
		  /* 8212CD90h */ case   10:  		/* lis R10, 32 */
		/* 8212CD90h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0x20);
		/* 8212CD90h case   10:*/		return 0x8212CD94;
		  /* 8212CD94h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 8212CD94h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212CD94h case   11:*/		return 0x8212CD98;
		  /* 8212CD98h */ case   12:  		/* bc 4, CR6_EQ, 92 */
		/* 8212CD98h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212CDF4;  }
		/* 8212CD98h case   12:*/		return 0x8212CD9C;
		  /* 8212CD9Ch */ case   13:  		/* lis R4, -28672 */
		/* 8212CD9Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF9000);
		/* 8212CD9Ch case   13:*/		return 0x8212CDA0;
	}
	return 0x8212CDA0;
} // Block from 8212CD68h-8212CDA0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212CDA0h
// Function '?DestMask@CPSProgram@D3DXShader@@MAAJPAIIPAKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CDA0);
		  /* 8212CDA0h */ case    0:  		/* mr R3, R31 */
		/* 8212CDA0h case    0:*/		regs.R3 = regs.R31;
		/* 8212CDA0h case    0:*/		return 0x8212CDA4;
		  /* 8212CDA4h */ case    1:  		/* bl -236084 */
		/* 8212CDA4h case    1:*/		regs.LR = 0x8212CDA8; return 0x820F3370;
		/* 8212CDA4h case    1:*/		return 0x8212CDA8;
		  /* 8212CDA8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8212CDA8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CDA8h case    2:*/		return 0x8212CDAC;
		  /* 8212CDACh */ case    3:  		/* bc 12, CR0_LT, 144 */
		/* 8212CDACh case    3:*/		if ( regs.CR[0].lt ) { return 0x8212CE3C;  }
		/* 8212CDACh case    3:*/		return 0x8212CDB0;
		  /* 8212CDB0h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 8212CDB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212CDB0h case    4:*/		return 0x8212CDB4;
		  /* 8212CDB4h */ case    5:  		/* li R10, 16389 */
		/* 8212CDB4h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x4005);
		/* 8212CDB4h case    5:*/		return 0x8212CDB8;
		  /* 8212CDB8h */ case    6:  		/* lwz R4, <#[R30 + 12]> */
		/* 8212CDB8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 8212CDB8h case    6:*/		return 0x8212CDBC;
		  /* 8212CDBCh */ case    7:  		/* li R6, 0 */
		/* 8212CDBCh case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212CDBCh case    7:*/		return 0x8212CDC0;
		  /* 8212CDC0h */ case    8:  		/* lis R5, 15 */
		/* 8212CDC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 8212CDC0h case    8:*/		return 0x8212CDC4;
		  /* 8212CDC4h */ case    9:  		/* rlwimi R4, R10, 29, 0, 20 */
		/* 8212CDC4h case    9:*/		cpu::op::rlwimi<0,29,0,20>(regs,&regs.R4,regs.R10);
		/* 8212CDC4h case    9:*/		return 0x8212CDC8;
		  /* 8212CDC8h */ case   10:  		/* mr R3, R31 */
		/* 8212CDC8h case   10:*/		regs.R3 = regs.R31;
		/* 8212CDC8h case   10:*/		return 0x8212CDCC;
		  /* 8212CDCCh */ case   11:  		/* lwz R11, <#[R11 + 312]> */
		/* 8212CDCCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 8212CDCCh case   11:*/		return 0x8212CDD0;
		  /* 8212CDD0h */ case   12:  		/* mtspr CTR, R11 */
		/* 8212CDD0h case   12:*/		regs.CTR = regs.R11;
		/* 8212CDD0h case   12:*/		return 0x8212CDD4;
		  /* 8212CDD4h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8212CDD4h case   13:*/		if ( 1 ) { regs.LR = 0x8212CDD8; return (uint32)regs.CTR; }
		/* 8212CDD4h case   13:*/		return 0x8212CDD8;
		  /* 8212CDD8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8212CDD8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CDD8h case   14:*/		return 0x8212CDDC;
		  /* 8212CDDCh */ case   15:  		/* bc 12, CR0_LT, 96 */
		/* 8212CDDCh case   15:*/		if ( regs.CR[0].lt ) { return 0x8212CE3C;  }
		/* 8212CDDCh case   15:*/		return 0x8212CDE0;
		  /* 8212CDE0h */ case   16:  		/* mr R3, R31 */
		/* 8212CDE0h case   16:*/		regs.R3 = regs.R31;
		/* 8212CDE0h case   16:*/		return 0x8212CDE4;
		  /* 8212CDE4h */ case   17:  		/* bl -259292 */
		/* 8212CDE4h case   17:*/		regs.LR = 0x8212CDE8; return 0x820ED908;
		/* 8212CDE4h case   17:*/		return 0x8212CDE8;
		  /* 8212CDE8h */ case   18:  		/* srawi R11, R3, 31 */
		/* 8212CDE8h case   18:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 8212CDE8h case   18:*/		return 0x8212CDEC;
		  /* 8212CDECh */ case   19:  		/* and R3, R11, R3 */
		/* 8212CDECh case   19:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 8212CDECh case   19:*/		return 0x8212CDF0;
		  /* 8212CDF0h */ case   20:  		/* b 76 */
		/* 8212CDF0h case   20:*/		return 0x8212CE3C;
		/* 8212CDF0h case   20:*/		return 0x8212CDF4;
	}
	return 0x8212CDF4;
} // Block from 8212CDA0h-8212CDF4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8212CDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CDF4);
		  /* 8212CDF4h */ case    0:  		/* lis R10, 64 */
		/* 8212CDF4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 8212CDF4h case    0:*/		return 0x8212CDF8;
		  /* 8212CDF8h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8212CDF8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212CDF8h case    1:*/		return 0x8212CDFC;
		  /* 8212CDFCh */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8212CDFCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212CE08;  }
		/* 8212CDFCh case    2:*/		return 0x8212CE00;
		  /* 8212CE00h */ case    3:  		/* lis R4, -24576 */
		/* 8212CE00h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFA000);
		/* 8212CE00h case    3:*/		return 0x8212CE04;
		  /* 8212CE04h */ case    4:  		/* b -100 */
		/* 8212CE04h case    4:*/		return 0x8212CDA0;
		/* 8212CE04h case    4:*/		return 0x8212CE08;
	}
	return 0x8212CE08;
} // Block from 8212CDF4h-8212CE08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212CE08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CE08);
		  /* 8212CE08h */ case    0:  		/* lis R10, 128 */
		/* 8212CE08h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x80);
		/* 8212CE08h case    0:*/		return 0x8212CE0C;
		  /* 8212CE0Ch */ case    1:  		/* mr R3, R31 */
		/* 8212CE0Ch case    1:*/		regs.R3 = regs.R31;
		/* 8212CE0Ch case    1:*/		return 0x8212CE10;
		  /* 8212CE10h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8212CE10h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212CE10h case    2:*/		return 0x8212CE14;
		  /* 8212CE14h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8212CE14h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8212CE20;  }
		/* 8212CE14h case    3:*/		return 0x8212CE18;
		  /* 8212CE18h */ case    4:  		/* lis R4, -26624 */
		/* 8212CE18h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF9800);
		/* 8212CE18h case    4:*/		return 0x8212CE1C;
		  /* 8212CE1Ch */ case    5:  		/* b -120 */
		/* 8212CE1Ch case    5:*/		return 0x8212CDA4;
		/* 8212CE1Ch case    5:*/		return 0x8212CE20;
	}
	return 0x8212CE20;
} // Block from 8212CE08h-8212CE20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212CE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CE20);
		  /* 8212CE20h */ case    0:  		/* lis R11, -32254 */
		/* 8212CE20h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8212CE20h case    0:*/		return 0x8212CE24;
		  /* 8212CE24h */ case    1:  		/* li R5, 4814 */
		/* 8212CE24h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12CE);
		/* 8212CE24h case    1:*/		return 0x8212CE28;
		  /* 8212CE28h */ case    2:  		/* addi R6, R11, -31816 */
		/* 8212CE28h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF83B8);
		/* 8212CE28h case    2:*/		return 0x8212CE2C;
		  /* 8212CE2Ch */ case    3:  		/* li R4, 0 */
		/* 8212CE2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212CE2Ch case    3:*/		return 0x8212CE30;
		  /* 8212CE30h */ case    4:  		/* bl -124672 */
		/* 8212CE30h case    4:*/		regs.LR = 0x8212CE34; return 0x8210E730;
		/* 8212CE30h case    4:*/		return 0x8212CE34;
		  /* 8212CE34h */ case    5:  		/* lis R3, -32768 */
		/* 8212CE34h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212CE34h case    5:*/		return 0x8212CE38;
		  /* 8212CE38h */ case    6:  		/* ori R3, R3, 16389 */
		/* 8212CE38h case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212CE38h case    6:*/		return 0x8212CE3C;
	}
	return 0x8212CE3C;
} // Block from 8212CE20h-8212CE3Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212CE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CE3C);
		  /* 8212CE3Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8212CE3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8212CE3Ch case    0:*/		return 0x8212CE40;
		  /* 8212CE40h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212CE40h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212CE40h case    1:*/		return 0x8212CE44;
		  /* 8212CE44h */ case    2:  		/* mtspr LR, R12 */
		/* 8212CE44h case    2:*/		regs.LR = regs.R12;
		/* 8212CE44h case    2:*/		return 0x8212CE48;
		  /* 8212CE48h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8212CE48h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212CE48h case    3:*/		return 0x8212CE4C;
		  /* 8212CE4Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8212CE4Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212CE4Ch case    4:*/		return 0x8212CE50;
		  /* 8212CE50h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8212CE50h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212CE50h case    5:*/		return 0x8212CE54;
	}
	return 0x8212CE54;
} // Block from 8212CE3Ch-8212CE54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212CE54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CE54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CE54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CE54);
		  /* 8212CE54h */ case    0:  		/* nop */
		/* 8212CE54h case    0:*/		cpu::op::nop();
		/* 8212CE54h case    0:*/		return 0x8212CE58;
	}
	return 0x8212CE58;
} // Block from 8212CE54h-8212CE58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212CE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CE58);
		  /* 8212CE58h */ case    0:  		/* mfspr R12, LR */
		/* 8212CE58h case    0:*/		regs.R12 = regs.LR;
		/* 8212CE58h case    0:*/		return 0x8212CE5C;
		  /* 8212CE5Ch */ case    1:  		/* bl -637968 */
		/* 8212CE5Ch case    1:*/		regs.LR = 0x8212CE60; return 0x8209124C;
		/* 8212CE5Ch case    1:*/		return 0x8212CE60;
		  /* 8212CE60h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8212CE60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8212CE60h case    2:*/		return 0x8212CE64;
		  /* 8212CE64h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8212CE64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212CE64h case    3:*/		return 0x8212CE68;
		  /* 8212CE68h */ case    4:  		/* mr R28, R4 */
		/* 8212CE68h case    4:*/		regs.R28 = regs.R4;
		/* 8212CE68h case    4:*/		return 0x8212CE6C;
		  /* 8212CE6Ch */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 8212CE6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 8212CE6Ch case    5:*/		return 0x8212CE70;
		  /* 8212CE70h */ case    6:  		/* mr R31, R3 */
		/* 8212CE70h case    6:*/		regs.R31 = regs.R3;
		/* 8212CE70h case    6:*/		return 0x8212CE74;
		  /* 8212CE74h */ case    7:  		/* mr R30, R5 */
		/* 8212CE74h case    7:*/		regs.R30 = regs.R5;
		/* 8212CE74h case    7:*/		return 0x8212CE78;
		  /* 8212CE78h */ case    8:  		/* lwz R11, <#[R11 + 112]> */
		/* 8212CE78h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8212CE78h case    8:*/		return 0x8212CE7C;
		  /* 8212CE7Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 8212CE7Ch case    9:*/		regs.CTR = regs.R11;
		/* 8212CE7Ch case    9:*/		return 0x8212CE80;
		  /* 8212CE80h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8212CE80h case   10:*/		if ( 1 ) { regs.LR = 0x8212CE84; return (uint32)regs.CTR; }
		/* 8212CE80h case   10:*/		return 0x8212CE84;
		  /* 8212CE84h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 8212CE84h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212CE84h case   11:*/		return 0x8212CE88;
		  /* 8212CE88h */ case   12:  		/* mr R29, R3 */
		/* 8212CE88h case   12:*/		regs.R29 = regs.R3;
		/* 8212CE88h case   12:*/		return 0x8212CE8C;
		  /* 8212CE8Ch */ case   13:  		/* mr R3, R31 */
		/* 8212CE8Ch case   13:*/		regs.R3 = regs.R31;
		/* 8212CE8Ch case   13:*/		return 0x8212CE90;
		  /* 8212CE90h */ case   14:  		/* lwz R4, <#[R28 + 108]> */
		/* 8212CE90h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000006C) );
		/* 8212CE90h case   14:*/		return 0x8212CE94;
		  /* 8212CE94h */ case   15:  		/* lwz R11, <#[R11 + 116]> */
		/* 8212CE94h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8212CE94h case   15:*/		return 0x8212CE98;
		  /* 8212CE98h */ case   16:  		/* mtspr CTR, R11 */
		/* 8212CE98h case   16:*/		regs.CTR = regs.R11;
		/* 8212CE98h case   16:*/		return 0x8212CE9C;
		  /* 8212CE9Ch */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 8212CE9Ch case   17:*/		if ( 1 ) { regs.LR = 0x8212CEA0; return (uint32)regs.CTR; }
		/* 8212CE9Ch case   17:*/		return 0x8212CEA0;
		  /* 8212CEA0h */ case   18:  		/* mr R27, R3 */
		/* 8212CEA0h case   18:*/		regs.R27 = regs.R3;
		/* 8212CEA0h case   18:*/		return 0x8212CEA4;
		  /* 8212CEA4h */ case   19:  		/* cmplwi CR6, R29, 11 */
		/* 8212CEA4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000B);
		/* 8212CEA4h case   19:*/		return 0x8212CEA8;
		  /* 8212CEA8h */ case   20:  		/* bc 4, CR6_EQ, 36 */
		/* 8212CEA8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8212CECC;  }
		/* 8212CEA8h case   20:*/		return 0x8212CEAC;
		  /* 8212CEACh */ case   21:  		/* lwz R11, <#[R31 + 40]> */
		/* 8212CEACh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8212CEACh case   21:*/		return 0x8212CEB0;
		  /* 8212CEB0h */ case   22:  		/* cmplw CR6, R3, R11 */
		/* 8212CEB0h case   22:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212CEB0h case   22:*/		return 0x8212CEB4;
		  /* 8212CEB4h */ case   23:  		/* bc 4, CR6_LT, 572 */
		/* 8212CEB4h case   23:*/		if ( !regs.CR[6].lt ) { return 0x8212D0F0;  }
		/* 8212CEB4h case   23:*/		return 0x8212CEB8;
		  /* 8212CEB8h */ case   24:  		/* addi R11, R3, 135 */
		/* 8212CEB8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x87);
		/* 8212CEB8h case   24:*/		return 0x8212CEBC;
		  /* 8212CEBCh */ case   25:  		/* stw R3, <#[R30]> */
		/* 8212CEBCh case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8212CEBCh case   25:*/		return 0x8212CEC0;
		  /* 8212CEC0h */ case   26:  		/* li R25, 1 */
		/* 8212CEC0h case   26:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8212CEC0h case   26:*/		return 0x8212CEC4;
		  /* 8212CEC4h */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212CEC4h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212CEC4h case   27:*/		return 0x8212CEC8;
		  /* 8212CEC8h */ case   28:  		/* b 40 */
		/* 8212CEC8h case   28:*/		return 0x8212CEF0;
		/* 8212CEC8h case   28:*/		return 0x8212CECC;
	}
	return 0x8212CECC;
} // Block from 8212CE58h-8212CECCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212CECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CECC);
		  /* 8212CECCh */ case    0:  		/* cmplwi CR6, R29, 6 */
		/* 8212CECCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 8212CECCh case    0:*/		return 0x8212CED0;
		  /* 8212CED0h */ case    1:  		/* bc 4, CR6_EQ, 544 */
		/* 8212CED0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212D0F0;  }
		/* 8212CED0h case    1:*/		return 0x8212CED4;
		  /* 8212CED4h */ case    2:  		/* cmplwi CR6, R27, 8 */
		/* 8212CED4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000008);
		/* 8212CED4h case    2:*/		return 0x8212CED8;
		  /* 8212CED8h */ case    3:  		/* bc 4, CR6_LT, 536 */
		/* 8212CED8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8212D0F0;  }
		/* 8212CED8h case    3:*/		return 0x8212CEDC;
		  /* 8212CEDCh */ case    4:  		/* addi R11, R27, 2 */
		/* 8212CEDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x2);
		/* 8212CEDCh case    4:*/		return 0x8212CEE0;
		  /* 8212CEE0h */ case    5:  		/* addi R10, R27, 127 */
		/* 8212CEE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x7F);
		/* 8212CEE0h case    5:*/		return 0x8212CEE4;
		  /* 8212CEE4h */ case    6:  		/* stw R11, <#[R30]> */
		/* 8212CEE4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212CEE4h case    6:*/		return 0x8212CEE8;
		  /* 8212CEE8h */ case    7:  		/* li R25, 3 */
		/* 8212CEE8h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x3);
		/* 8212CEE8h case    7:*/		return 0x8212CEEC;
		  /* 8212CEECh */ case    8:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8212CEECh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8212CEECh case    8:*/		return 0x8212CEF0;
	}
	return 0x8212CEF0;
} // Block from 8212CECCh-8212CEF0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212CEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CEF0);
		  /* 8212CEF0h */ case    0:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8212CEF0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8212CEF0h case    0:*/		return 0x8212CEF4;
		  /* 8212CEF4h */ case    1:  		/* li R26, 0 */
		/* 8212CEF4h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8212CEF4h case    1:*/		return 0x8212CEF8;
		  /* 8212CEF8h */ case    2:  		/* li R11, 0 */
		/* 8212CEF8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212CEF8h case    2:*/		return 0x8212CEFC;
		  /* 8212CEFCh */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8212CEFCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8212CEFCh case    3:*/		return 0x8212CF00;
		  /* 8212CF00h */ case    4:  		/* bc 12, CR6_EQ, 68 */
		/* 8212CF00h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212CF44;  }
		/* 8212CF00h case    4:*/		return 0x8212CF04;
		  /* 8212CF04h */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 8212CF04h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8212CF04h case    5:*/		return 0x8212CF08;
		  /* 8212CF08h */ case    6:  		/* bc 12, CR6_LT, 44 */
		/* 8212CF08h case    6:*/		if ( regs.CR[6].lt ) { return 0x8212CF34;  }
		/* 8212CF08h case    6:*/		return 0x8212CF0C;
		  /* 8212CF0Ch */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 8212CF0Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8212CF2C;  }
		/* 8212CF0Ch case    7:*/		return 0x8212CF10;
		  /* 8212CF10h */ case    8:  		/* cmplwi CR6, R11, 3 */
		/* 8212CF10h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8212CF10h case    8:*/		return 0x8212CF14;
		  /* 8212CF14h */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 8212CF14h case    9:*/		if ( regs.CR[6].lt ) { return 0x8212CF24;  }
		/* 8212CF14h case    9:*/		return 0x8212CF18;
		  /* 8212CF18h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8212CF18h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8212CF38;  }
		/* 8212CF18h case   10:*/		return 0x8212CF1C;
		  /* 8212CF1Ch */ case   11:  		/* oris R26, R26, 8 */
		/* 8212CF1Ch case   11:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R26,0x8);
		/* 8212CF1Ch case   11:*/		return 0x8212CF20;
		  /* 8212CF20h */ case   12:  		/* b 24 */
		/* 8212CF20h case   12:*/		return 0x8212CF38;
		/* 8212CF20h case   12:*/		return 0x8212CF24;
	}
	return 0x8212CF24;
} // Block from 8212CEF0h-8212CF24h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF24);
		  /* 8212CF24h */ case    0:  		/* oris R26, R26, 4 */
		/* 8212CF24h case    0:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8212CF24h case    0:*/		return 0x8212CF28;
		  /* 8212CF28h */ case    1:  		/* b 16 */
		/* 8212CF28h case    1:*/		return 0x8212CF38;
		/* 8212CF28h case    1:*/		return 0x8212CF2C;
	}
	return 0x8212CF2C;
} // Block from 8212CF24h-8212CF2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF2C);
		  /* 8212CF2Ch */ case    0:  		/* oris R26, R26, 2 */
		/* 8212CF2Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R26,0x2);
		/* 8212CF2Ch case    0:*/		return 0x8212CF30;
		  /* 8212CF30h */ case    1:  		/* b 8 */
		/* 8212CF30h case    1:*/		return 0x8212CF38;
		/* 8212CF30h case    1:*/		return 0x8212CF34;
	}
	return 0x8212CF34;
} // Block from 8212CF2Ch-8212CF34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF34);
		  /* 8212CF34h */ case    0:  		/* oris R26, R26, 1 */
		/* 8212CF34h case    0:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8212CF34h case    0:*/		return 0x8212CF38;
	}
	return 0x8212CF38;
} // Block from 8212CF34h-8212CF38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF38);
		  /* 8212CF38h */ case    0:  		/* addi R11, R11, 1 */
		/* 8212CF38h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212CF38h case    0:*/		return 0x8212CF3C;
		  /* 8212CF3Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8212CF3Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212CF3Ch case    1:*/		return 0x8212CF40;
		  /* 8212CF40h */ case    2:  		/* bc 12, CR6_LT, -60 */
		/* 8212CF40h case    2:*/		if ( regs.CR[6].lt ) { return 0x8212CF04;  }
		/* 8212CF40h case    2:*/		return 0x8212CF44;
	}
	return 0x8212CF44;
} // Block from 8212CF38h-8212CF44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF44);
		  /* 8212CF44h */ case    0:  		/* cmplwi CR6, R25, 1 */
		/* 8212CF44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 8212CF44h case    0:*/		return 0x8212CF48;
		  /* 8212CF48h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 8212CF48h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212CF70;  }
		/* 8212CF48h case    1:*/		return 0x8212CF4C;
		  /* 8212CF4Ch */ case    2:  		/* lwz R11, <#[R31 + 204]> */
		/* 8212CF4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 8212CF4Ch case    2:*/		return 0x8212CF50;
		  /* 8212CF50h */ case    3:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8212CF50h case    3:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8212CF50h case    3:*/		return 0x8212CF54;
		  /* 8212CF54h */ case    4:  		/* bc 4, CR0_EQ, 24 */
		/* 8212CF54h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8212CF6C;  }
		/* 8212CF54h case    4:*/		return 0x8212CF58;
		  /* 8212CF58h */ case    5:  		/* cmplwi CR6, R29, 6 */
		/* 8212CF58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 8212CF58h case    5:*/		return 0x8212CF5C;
		  /* 8212CF5Ch */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 8212CF5Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212CF70;  }
		/* 8212CF5Ch case    6:*/		return 0x8212CF60;
		  /* 8212CF60h */ case    7:  		/* lwz R11, <#[R28]> */
		/* 8212CF60h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8212CF60h case    7:*/		return 0x8212CF64;
		  /* 8212CF64h */ case    8:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 8212CF64h case    8:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 8212CF64h case    8:*/		return 0x8212CF68;
		  /* 8212CF68h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 8212CF68h case    9:*/		if ( regs.CR[0].eq ) { return 0x8212CF70;  }
		/* 8212CF68h case    9:*/		return 0x8212CF6C;
	}
	return 0x8212CF6C;
} // Block from 8212CF44h-8212CF6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF6C);
		  /* 8212CF6Ch */ case    0:  		/* oris R26, R26, 32 */
		/* 8212CF6Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R26,0x20);
		/* 8212CF6Ch case    0:*/		return 0x8212CF70;
	}
	return 0x8212CF70;
} // Block from 8212CF6Ch-8212CF70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF70h
// Function '?ValidateOutput@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF70);
		  /* 8212CF70h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8212CF70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8212CF70h case    0:*/		return 0x8212CF74;
		  /* 8212CF74h */ case    1:  		/* li R30, 0 */
		/* 8212CF74h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212CF74h case    1:*/		return 0x8212CF78;
		  /* 8212CF78h */ case    2:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 8212CF78h case    2:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 8212CF78h case    2:*/		return 0x8212CF7C;
		  /* 8212CF7Ch */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8212CF7Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8212CF84;  }
		/* 8212CF7Ch case    3:*/		return 0x8212CF80;
		  /* 8212CF80h */ case    4:  		/* lis R30, 64 */
		/* 8212CF80h case    4:*/		cpu::op::lis<0>(regs,&regs.R30,0x40);
		/* 8212CF80h case    4:*/		return 0x8212CF84;
	}
	return 0x8212CF84;
} // Block from 8212CF70h-8212CF84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212CF84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212CF84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212CF84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212CF84);
		  /* 8212CF84h */ case    0:  		/* lis R4, 512 */
		/* 8212CF84h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x200);
		/* 8212CF84h case    0:*/		return 0x8212CF88;
		  /* 8212CF88h */ case    1:  		/* mr R3, R31 */
		/* 8212CF88h case    1:*/		regs.R3 = regs.R31;
		/* 8212CF88h case    1:*/		return 0x8212CF8C;
		  /* 8212CF8Ch */ case    2:  		/* ori R4, R4, 31 */
		/* 8212CF8Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1F);
		/* 8212CF8Ch case    2:*/		return 0x8212CF90;
		  /* 8212CF90h */ case    3:  		/* bl -224928 */
		/* 8212CF90h case    3:*/		regs.LR = 0x8212CF94; return 0x820F60F0;
		/* 8212CF90h case    3:*/		return 0x8212CF94;
		  /* 8212CF94h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8212CF94h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CF94h case    4:*/		return 0x8212CF98;
		  /* 8212CF98h */ case    5:  		/* bc 12, CR0_LT, 352 */
		/* 8212CF98h case    5:*/		if ( regs.CR[0].lt ) { return 0x8212D0F8;  }
		/* 8212CF98h case    5:*/		return 0x8212CF9C;
		  /* 8212CF9Ch */ case    6:  		/* lis R4, -32768 */
		/* 8212CF9Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8000);
		/* 8212CF9Ch case    6:*/		return 0x8212CFA0;
		  /* 8212CFA0h */ case    7:  		/* mr R3, R31 */
		/* 8212CFA0h case    7:*/		regs.R3 = regs.R31;
		/* 8212CFA0h case    7:*/		return 0x8212CFA4;
		  /* 8212CFA4h */ case    8:  		/* bl -236596 */
		/* 8212CFA4h case    8:*/		regs.LR = 0x8212CFA8; return 0x820F3370;
		/* 8212CFA4h case    8:*/		return 0x8212CFA8;
		  /* 8212CFA8h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8212CFA8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212CFA8h case    9:*/		return 0x8212CFAC;
		  /* 8212CFACh */ case   10:  		/* bc 12, CR0_LT, 332 */
		/* 8212CFACh case   10:*/		if ( regs.CR[0].lt ) { return 0x8212D0F8;  }
		/* 8212CFACh case   10:*/		return 0x8212CFB0;
		  /* 8212CFB0h */ case   11:  		/* lwz R11, <#[R31 + 204]> */
		/* 8212CFB0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 8212CFB0h case   11:*/		return 0x8212CFB4;
		  /* 8212CFB4h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8212CFB4h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8212CFB4h case   12:*/		return 0x8212CFB8;
		  /* 8212CFB8h */ case   13:  		/* bc 12, CR0_EQ, 224 */
		/* 8212CFB8h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212D098;  }
		/* 8212CFB8h case   13:*/		return 0x8212CFBC;
		  /* 8212CFBCh */ case   14:  		/* addi R10, R1, 96 */
		/* 8212CFBCh case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8212CFBCh case   14:*/		return 0x8212CFC0;
		  /* 8212CFC0h */ case   15:  		/* lwz R6, <#[R31 + 8]> */
		/* 8212CFC0h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 8212CFC0h case   15:*/		return 0x8212CFC4;
		  /* 8212CFC4h */ case   16:  		/* li R11, -1 */
		/* 8212CFC4h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8212CFC4h case   16:*/		return 0x8212CFC8;
		  /* 8212CFC8h */ case   17:  		/* li R5, 0 */
		/* 8212CFC8h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212CFC8h case   17:*/		return 0x8212CFCC;
		  /* 8212CFCCh */ case   18:  		/* li R9, 0 */
		/* 8212CFCCh case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212CFCCh case   18:*/		return 0x8212CFD0;
		  /* 8212CFD0h */ case   19:  		/* cmplwi CR6, R6, 0 */
		/* 8212CFD0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8212CFD0h case   19:*/		return 0x8212CFD4;
		  /* 8212CFD4h */ case   20:  		/* stw R11, <#[R10]> */
		/* 8212CFD4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212CFD4h case   20:*/		return 0x8212CFD8;
		  /* 8212CFD8h */ case   21:  		/* stw R11, <#[R10 + 4]> */
		/* 8212CFD8h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8212CFD8h case   21:*/		return 0x8212CFDC;
		  /* 8212CFDCh */ case   22:  		/* stw R11, <#[R10 + 8]> */
		/* 8212CFDCh case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8212CFDCh case   22:*/		return 0x8212CFE0;
		  /* 8212CFE0h */ case   23:  		/* stw R11, <#[R10 + 12]> */
		/* 8212CFE0h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212CFE0h case   23:*/		return 0x8212CFE4;
		  /* 8212CFE4h */ case   24:  		/* bc 12, CR6_EQ, 96 */
		/* 8212CFE4h case   24:*/		if ( regs.CR[6].eq ) { return 0x8212D044;  }
		/* 8212CFE4h case   24:*/		return 0x8212CFE8;
		  /* 8212CFE8h */ case   25:  		/* lwz R8, <#[R31 + 20]> */
		/* 8212CFE8h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8212CFE8h case   25:*/		return 0x8212CFEC;
		  /* 8212CFECh */ case   26:  		/* li R10, 0 */
		/* 8212CFECh case   26:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212CFECh case   26:*/		return 0x8212CFF0;
		  /* 8212CFF0h */ case   27:  		/* lwz R7, <#[R28 + 4]> */
		/* 8212CFF0h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000004) );
		/* 8212CFF0h case   27:*/		return 0x8212CFF4;
		  /* 8212CFF4h */ case   28:  		/* lwzx R11, <#[R10 + R8]> */
		/* 8212CFF4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212CFF4h case   28:*/		return 0x8212CFF8;
		  /* 8212CFF8h */ case   29:  		/* lwz R4, <#[R11 + 4]> */
		/* 8212CFF8h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8212CFF8h case   29:*/		return 0x8212CFFC;
		  /* 8212CFFCh */ case   30:  		/* cmplw CR6, R7, R4 */
		/* 8212CFFCh case   30:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 8212CFFCh case   30:*/		return 0x8212D000;
		  /* 8212D000h */ case   31:  		/* bc 4, CR6_EQ, 52 */
		/* 8212D000h case   31:*/		if ( !regs.CR[6].eq ) { return 0x8212D034;  }
		/* 8212D000h case   31:*/		return 0x8212D004;
		  /* 8212D004h */ case   32:  		/* lwz R4, <#[R28 + 8]> */
		/* 8212D004h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000008) );
		/* 8212D004h case   32:*/		return 0x8212D008;
		  /* 8212D008h */ case   33:  		/* lwz R3, <#[R11 + 8]> */
		/* 8212D008h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8212D008h case   33:*/		return 0x8212D00C;
		  /* 8212D00Ch */ case   34:  		/* cmplw CR6, R4, R3 */
		/* 8212D00Ch case   34:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 8212D00Ch case   34:*/		return 0x8212D010;
		  /* 8212D010h */ case   35:  		/* bc 4, CR6_EQ, 36 */
		/* 8212D010h case   35:*/		if ( !regs.CR[6].eq ) { return 0x8212D034;  }
		/* 8212D010h case   35:*/		return 0x8212D014;
		  /* 8212D014h */ case   36:  		/* lwz R4, <#[R28 + 12]> */
		/* 8212D014h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000000C) );
		/* 8212D014h case   36:*/		return 0x8212D018;
		  /* 8212D018h */ case   37:  		/* lwz R3, <#[R11 + 12]> */
		/* 8212D018h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212D018h case   37:*/		return 0x8212D01C;
		  /* 8212D01Ch */ case   38:  		/* cmplw CR6, R4, R3 */
		/* 8212D01Ch case   38:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 8212D01Ch case   38:*/		return 0x8212D020;
		  /* 8212D020h */ case   39:  		/* bc 4, CR6_EQ, 20 */
		/* 8212D020h case   39:*/		if ( !regs.CR[6].eq ) { return 0x8212D034;  }
		/* 8212D020h case   39:*/		return 0x8212D024;
		  /* 8212D024h */ case   40:  		/* lwz R11, <#[R11 + 16]> */
		/* 8212D024h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8212D024h case   40:*/		return 0x8212D028;
		  /* 8212D028h */ case   41:  		/* addi R4, R1, 96 */
		/* 8212D028h case   41:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212D028h case   41:*/		return 0x8212D02C;
		  /* 8212D02Ch */ case   42:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212D02Ch case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212D02Ch case   42:*/		return 0x8212D030;
		  /* 8212D030h */ case   43:  		/* stwx R9, <#[R11 + R4]> */
		/* 8212D030h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8212D030h case   43:*/		return 0x8212D034;
	}
	return 0x8212D034;
} // Block from 8212CF84h-8212D034h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8212D034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D034);
		  /* 8212D034h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212D034h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212D034h case    0:*/		return 0x8212D038;
		  /* 8212D038h */ case    1:  		/* addi R10, R10, 4 */
		/* 8212D038h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212D038h case    1:*/		return 0x8212D03C;
		  /* 8212D03Ch */ case    2:  		/* cmplw CR6, R9, R6 */
		/* 8212D03Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 8212D03Ch case    2:*/		return 0x8212D040;
		  /* 8212D040h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 8212D040h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212CFF4;  }
		/* 8212D040h case    3:*/		return 0x8212D044;
	}
	return 0x8212D044;
} // Block from 8212D034h-8212D044h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212D044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D044);
		  /* 8212D044h */ case    0:  		/* li R11, 4 */
		/* 8212D044h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8212D044h case    0:*/		return 0x8212D048;
		  /* 8212D048h */ case    1:  		/* addi R10, R1, 92 */
		/* 8212D048h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5C);
		/* 8212D048h case    1:*/		return 0x8212D04C;
		  /* 8212D04Ch */ case    2:  		/* addi R9, R1, 96 */
		/* 8212D04Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8212D04Ch case    2:*/		return 0x8212D050;
		  /* 8212D050h */ case    3:  		/* mtspr CTR, R11 */
		/* 8212D050h case    3:*/		regs.CTR = regs.R11;
		/* 8212D050h case    3:*/		return 0x8212D054;
		  /* 8212D054h */ case    4:  		/* lwz R11, <#[R9]> */
		/* 8212D054h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8212D054h case    4:*/		return 0x8212D058;
		  /* 8212D058h */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 8212D058h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212D058h case    5:*/		return 0x8212D05C;
		  /* 8212D05Ch */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8212D05Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8212D068;  }
		/* 8212D05Ch case    6:*/		return 0x8212D060;
		  /* 8212D060h */ case    7:  		/* stwu R11, <#[R10 + 4]> */
		/* 8212D060h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8212D060h case    7:*/		return 0x8212D064;
		  /* 8212D064h */ case    8:  		/* addi R5, R5, 1 */
		/* 8212D064h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8212D064h case    8:*/		return 0x8212D068;
	}
	return 0x8212D068;
} // Block from 8212D044h-8212D068h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212D068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D068);
		  /* 8212D068h */ case    0:  		/* addi R9, R9, 4 */
		/* 8212D068h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212D068h case    0:*/		return 0x8212D06C;
		  /* 8212D06Ch */ case    1:  		/* bc 16, CR0_LT, -24 */
		/* 8212D06Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D054;  }
		/* 8212D06Ch case    1:*/		return 0x8212D070;
		  /* 8212D070h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8212D070h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212D070h case    2:*/		return 0x8212D074;
		  /* 8212D074h */ case    3:  		/* li R7, 1 */
		/* 8212D074h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8212D074h case    3:*/		return 0x8212D078;
		  /* 8212D078h */ case    4:  		/* addi R6, R1, 80 */
		/* 8212D078h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8212D078h case    4:*/		return 0x8212D07C;
		  /* 8212D07Ch */ case    5:  		/* addi R4, R1, 96 */
		/* 8212D07Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212D07Ch case    5:*/		return 0x8212D080;
		  /* 8212D080h */ case    6:  		/* mr R3, R31 */
		/* 8212D080h case    6:*/		regs.R3 = regs.R31;
		/* 8212D080h case    6:*/		return 0x8212D084;
		  /* 8212D084h */ case    7:  		/* lwz R11, <#[R11 + 324]> */
		/* 8212D084h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 8212D084h case    7:*/		return 0x8212D088;
		  /* 8212D088h */ case    8:  		/* mtspr CTR, R11 */
		/* 8212D088h case    8:*/		regs.CTR = regs.R11;
		/* 8212D088h case    8:*/		return 0x8212D08C;
		  /* 8212D08Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8212D08Ch case    9:*/		if ( 1 ) { regs.LR = 0x8212D090; return (uint32)regs.CTR; }
		/* 8212D08Ch case    9:*/		return 0x8212D090;
		  /* 8212D090h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8212D090h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212D090h case   10:*/		return 0x8212D094;
		  /* 8212D094h */ case   11:  		/* bc 12, CR0_LT, 100 */
		/* 8212D094h case   11:*/		if ( regs.CR[0].lt ) { return 0x8212D0F8;  }
		/* 8212D094h case   11:*/		return 0x8212D098;
	}
	return 0x8212D098;
} // Block from 8212D068h-8212D098h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212D098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D098);
		  /* 8212D098h */ case    0:  		/* lis R11, -128 */
		/* 8212D098h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 8212D098h case    0:*/		return 0x8212D09C;
		  /* 8212D09Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 8212D09Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8212D09Ch case    1:*/		return 0x8212D0A0;
		  /* 8212D0A0h */ case    2:  		/* rlwinm R9, R25, 0, 27, 28 */
		/* 8212D0A0h case    2:*/		cpu::op::rlwinm<0,0,27,28>(regs,&regs.R9,regs.R25);
		/* 8212D0A0h case    2:*/		return 0x8212D0A4;
		  /* 8212D0A4h */ case    3:  		/* rlwimi R11, R25, 20, 9, 11 */
		/* 8212D0A4h case    3:*/		cpu::op::rlwimi<0,20,9,11>(regs,&regs.R11,regs.R25);
		/* 8212D0A4h case    3:*/		return 0x8212D0A8;
		  /* 8212D0A8h */ case    4:  		/* rlwinm R8, R27, 0, 21, 31 */
		/* 8212D0A8h case    4:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R8,regs.R27);
		/* 8212D0A8h case    4:*/		return 0x8212D0AC;
		  /* 8212D0ACh */ case    5:  		/* or R11, R11, R9 */
		/* 8212D0ACh case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8212D0ACh case    5:*/		return 0x8212D0B0;
		  /* 8212D0B0h */ case    6:  		/* lwz R10, <#[R10 + 312]> */
		/* 8212D0B0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000138) );
		/* 8212D0B0h case    6:*/		return 0x8212D0B4;
		  /* 8212D0B4h */ case    7:  		/* li R6, 0 */
		/* 8212D0B4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212D0B4h case    7:*/		return 0x8212D0B8;
		  /* 8212D0B8h */ case    8:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 8212D0B8h case    8:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 8212D0B8h case    8:*/		return 0x8212D0BC;
		  /* 8212D0BCh */ case    9:  		/* mr R5, R26 */
		/* 8212D0BCh case    9:*/		regs.R5 = regs.R26;
		/* 8212D0BCh case    9:*/		return 0x8212D0C0;
		  /* 8212D0C0h */ case   10:  		/* or R11, R11, R8 */
		/* 8212D0C0h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8212D0C0h case   10:*/		return 0x8212D0C4;
		  /* 8212D0C4h */ case   11:  		/* mr R3, R31 */
		/* 8212D0C4h case   11:*/		regs.R3 = regs.R31;
		/* 8212D0C4h case   11:*/		return 0x8212D0C8;
		  /* 8212D0C8h */ case   12:  		/* or R4, R11, R30 */
		/* 8212D0C8h case   12:*/		cpu::op::or<0>(regs,&regs.R4,regs.R11,regs.R30);
		/* 8212D0C8h case   12:*/		return 0x8212D0CC;
		  /* 8212D0CCh */ case   13:  		/* mtspr CTR, R10 */
		/* 8212D0CCh case   13:*/		regs.CTR = regs.R10;
		/* 8212D0CCh case   13:*/		return 0x8212D0D0;
		  /* 8212D0D0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8212D0D0h case   14:*/		if ( 1 ) { regs.LR = 0x8212D0D4; return (uint32)regs.CTR; }
		/* 8212D0D0h case   14:*/		return 0x8212D0D4;
		  /* 8212D0D4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8212D0D4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212D0D4h case   15:*/		return 0x8212D0D8;
		  /* 8212D0D8h */ case   16:  		/* bc 12, CR0_LT, 32 */
		/* 8212D0D8h case   16:*/		if ( regs.CR[0].lt ) { return 0x8212D0F8;  }
		/* 8212D0D8h case   16:*/		return 0x8212D0DC;
		  /* 8212D0DCh */ case   17:  		/* mr R3, R31 */
		/* 8212D0DCh case   17:*/		regs.R3 = regs.R31;
		/* 8212D0DCh case   17:*/		return 0x8212D0E0;
		  /* 8212D0E0h */ case   18:  		/* bl -260056 */
		/* 8212D0E0h case   18:*/		regs.LR = 0x8212D0E4; return 0x820ED908;
		/* 8212D0E0h case   18:*/		return 0x8212D0E4;
		  /* 8212D0E4h */ case   19:  		/* srawi R11, R3, 31 */
		/* 8212D0E4h case   19:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 8212D0E4h case   19:*/		return 0x8212D0E8;
		  /* 8212D0E8h */ case   20:  		/* and R3, R11, R3 */
		/* 8212D0E8h case   20:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 8212D0E8h case   20:*/		return 0x8212D0EC;
		  /* 8212D0ECh */ case   21:  		/* b 12 */
		/* 8212D0ECh case   21:*/		return 0x8212D0F8;
		/* 8212D0ECh case   21:*/		return 0x8212D0F0;
	}
	return 0x8212D0F0;
} // Block from 8212D098h-8212D0F0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212D0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D0F0);
		  /* 8212D0F0h */ case    0:  		/* lis R3, -32768 */
		/* 8212D0F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212D0F0h case    0:*/		return 0x8212D0F4;
		  /* 8212D0F4h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8212D0F4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212D0F4h case    1:*/		return 0x8212D0F8;
	}
	return 0x8212D0F8;
} // Block from 8212D0F0h-8212D0F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D0F8);
		  /* 8212D0F8h */ case    0:  		/* addi R1, R1, 176 */
		/* 8212D0F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8212D0F8h case    0:*/		return 0x8212D0FC;
		  /* 8212D0FCh */ case    1:  		/* b -638560 */
		/* 8212D0FCh case    1:*/		return 0x8209129C;
		/* 8212D0FCh case    1:*/		return 0x8212D100;
	}
	return 0x8212D100;
} // Block from 8212D0F8h-8212D100h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D100);
		  /* 8212D100h */ case    0:  		/* mfspr R12, LR */
		/* 8212D100h case    0:*/		regs.R12 = regs.LR;
		/* 8212D100h case    0:*/		return 0x8212D104;
		  /* 8212D104h */ case    1:  		/* bl -638640 */
		/* 8212D104h case    1:*/		regs.LR = 0x8212D108; return 0x82091254;
		/* 8212D104h case    1:*/		return 0x8212D108;
		  /* 8212D108h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8212D108h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8212D108h case    2:*/		return 0x8212D10C;
		  /* 8212D10Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8212D10Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212D10Ch case    3:*/		return 0x8212D110;
		  /* 8212D110h */ case    4:  		/* mr R28, R4 */
		/* 8212D110h case    4:*/		regs.R28 = regs.R4;
		/* 8212D110h case    4:*/		return 0x8212D114;
		  /* 8212D114h */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 8212D114h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 8212D114h case    5:*/		return 0x8212D118;
		  /* 8212D118h */ case    6:  		/* mr R31, R3 */
		/* 8212D118h case    6:*/		regs.R31 = regs.R3;
		/* 8212D118h case    6:*/		return 0x8212D11C;
		  /* 8212D11Ch */ case    7:  		/* mr R27, R5 */
		/* 8212D11Ch case    7:*/		regs.R27 = regs.R5;
		/* 8212D11Ch case    7:*/		return 0x8212D120;
		  /* 8212D120h */ case    8:  		/* mr R29, R6 */
		/* 8212D120h case    8:*/		regs.R29 = regs.R6;
		/* 8212D120h case    8:*/		return 0x8212D124;
		  /* 8212D124h */ case    9:  		/* lwz R11, <#[R11 + 112]> */
		/* 8212D124h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8212D124h case    9:*/		return 0x8212D128;
		  /* 8212D128h */ case   10:  		/* mtspr CTR, R11 */
		/* 8212D128h case   10:*/		regs.CTR = regs.R11;
		/* 8212D128h case   10:*/		return 0x8212D12C;
		  /* 8212D12Ch */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8212D12Ch case   11:*/		if ( 1 ) { regs.LR = 0x8212D130; return (uint32)regs.CTR; }
		/* 8212D12Ch case   11:*/		return 0x8212D130;
		  /* 8212D130h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 8212D130h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212D130h case   12:*/		return 0x8212D134;
		  /* 8212D134h */ case   13:  		/* mr R30, R3 */
		/* 8212D134h case   13:*/		regs.R30 = regs.R3;
		/* 8212D134h case   13:*/		return 0x8212D138;
		  /* 8212D138h */ case   14:  		/* mr R3, R31 */
		/* 8212D138h case   14:*/		regs.R3 = regs.R31;
		/* 8212D138h case   14:*/		return 0x8212D13C;
		  /* 8212D13Ch */ case   15:  		/* lwz R4, <#[R28 + 108]> */
		/* 8212D13Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000006C) );
		/* 8212D13Ch case   15:*/		return 0x8212D140;
		  /* 8212D140h */ case   16:  		/* lwz R11, <#[R11 + 116]> */
		/* 8212D140h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8212D140h case   16:*/		return 0x8212D144;
		  /* 8212D144h */ case   17:  		/* mtspr CTR, R11 */
		/* 8212D144h case   17:*/		regs.CTR = regs.R11;
		/* 8212D144h case   17:*/		return 0x8212D148;
		  /* 8212D148h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8212D148h case   18:*/		if ( 1 ) { regs.LR = 0x8212D14C; return (uint32)regs.CTR; }
		/* 8212D148h case   18:*/		return 0x8212D14C;
		  /* 8212D14Ch */ case   19:  		/* cmplwi CR6, R30, 11 */
		/* 8212D14Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000B);
		/* 8212D14Ch case   19:*/		return 0x8212D150;
		  /* 8212D150h */ case   20:  		/* stw R3, <#[R27]> */
		/* 8212D150h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8212D150h case   20:*/		return 0x8212D154;
		  /* 8212D154h */ case   21:  		/* bc 4, CR6_EQ, 24 */
		/* 8212D154h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8212D16C;  }
		/* 8212D154h case   21:*/		return 0x8212D158;
		  /* 8212D158h */ case   22:  		/* lwz R11, <#[R31 + 40]> */
		/* 8212D158h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8212D158h case   22:*/		return 0x8212D15C;
		  /* 8212D15Ch */ case   23:  		/* cmplw CR6, R3, R11 */
		/* 8212D15Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212D15Ch case   23:*/		return 0x8212D160;
		  /* 8212D160h */ case   24:  		/* bc 4, CR6_LT, 60 */
		/* 8212D160h case   24:*/		if ( !regs.CR[6].lt ) { return 0x8212D19C;  }
		/* 8212D160h case   24:*/		return 0x8212D164;
		  /* 8212D164h */ case   25:  		/* li R11, 1 */
		/* 8212D164h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212D164h case   25:*/		return 0x8212D168;
		  /* 8212D168h */ case   26:  		/* b 40 */
		/* 8212D168h case   26:*/		return 0x8212D190;
		/* 8212D168h case   26:*/		return 0x8212D16C;
	}
	return 0x8212D16C;
} // Block from 8212D100h-8212D16Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8212D16Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D16C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D16C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D16C);
		  /* 8212D16Ch */ case    0:  		/* cmplwi CR6, R30, 6 */
		/* 8212D16Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 8212D16Ch case    0:*/		return 0x8212D170;
		  /* 8212D170h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8212D170h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212D184;  }
		/* 8212D170h case    1:*/		return 0x8212D174;
		  /* 8212D174h */ case    2:  		/* cmplwi CR6, R3, 8 */
		/* 8212D174h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000008);
		/* 8212D174h case    2:*/		return 0x8212D178;
		  /* 8212D178h */ case    3:  		/* bc 4, CR6_LT, 36 */
		/* 8212D178h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8212D19C;  }
		/* 8212D178h case    3:*/		return 0x8212D17C;
		  /* 8212D17Ch */ case    4:  		/* li R11, 3 */
		/* 8212D17Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8212D17Ch case    4:*/		return 0x8212D180;
		  /* 8212D180h */ case    5:  		/* b 16 */
		/* 8212D180h case    5:*/		return 0x8212D190;
		/* 8212D180h case    5:*/		return 0x8212D184;
	}
	return 0x8212D184;
} // Block from 8212D16Ch-8212D184h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212D184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D184);
		  /* 8212D184h */ case    0:  		/* cmplwi CR6, R30, 65535 */
		/* 8212D184h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000FFFF);
		/* 8212D184h case    0:*/		return 0x8212D188;
		  /* 8212D188h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8212D188h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212D19C;  }
		/* 8212D188h case    1:*/		return 0x8212D18C;
		  /* 8212D18Ch */ case    2:  		/* li R11, 0 */
		/* 8212D18Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212D18Ch case    2:*/		return 0x8212D190;
	}
	return 0x8212D190;
} // Block from 8212D184h-8212D190h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D190);
		  /* 8212D190h */ case    0:  		/* stw R11, <#[R29]> */
		/* 8212D190h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8212D190h case    0:*/		return 0x8212D194;
		  /* 8212D194h */ case    1:  		/* li R3, 0 */
		/* 8212D194h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D194h case    1:*/		return 0x8212D198;
		  /* 8212D198h */ case    2:  		/* b 12 */
		/* 8212D198h case    2:*/		return 0x8212D1A4;
		/* 8212D198h case    2:*/		return 0x8212D19C;
	}
	return 0x8212D19C;
} // Block from 8212D190h-8212D19Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D19C);
		  /* 8212D19Ch */ case    0:  		/* lis R3, -32768 */
		/* 8212D19Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212D19Ch case    0:*/		return 0x8212D1A0;
		  /* 8212D1A0h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8212D1A0h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212D1A0h case    1:*/		return 0x8212D1A4;
	}
	return 0x8212D1A4;
} // Block from 8212D19Ch-8212D1A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D1A4);
		  /* 8212D1A4h */ case    0:  		/* addi R1, R1, 128 */
		/* 8212D1A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8212D1A4h case    0:*/		return 0x8212D1A8;
		  /* 8212D1A8h */ case    1:  		/* b -638724 */
		/* 8212D1A8h case    1:*/		return 0x820912A4;
		/* 8212D1A8h case    1:*/		return 0x8212D1AC;
		  /* 8212D1ACh */ case    2:  		/* nop */
		/* 8212D1ACh case    2:*/		cpu::op::nop();
		/* 8212D1ACh case    2:*/		return 0x8212D1B0;
	}
	return 0x8212D1B0;
} // Block from 8212D1A4h-8212D1B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D1B0);
		  /* 8212D1B0h */ case    0:  		/* mfspr R12, LR */
		/* 8212D1B0h case    0:*/		regs.R12 = regs.LR;
		/* 8212D1B0h case    0:*/		return 0x8212D1B4;
		  /* 8212D1B4h */ case    1:  		/* bl -638824 */
		/* 8212D1B4h case    1:*/		regs.LR = 0x8212D1B8; return 0x8209124C;
		/* 8212D1B4h case    1:*/		return 0x8212D1B8;
		  /* 8212D1B8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8212D1B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8212D1B8h case    2:*/		return 0x8212D1BC;
		  /* 8212D1BCh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8212D1BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212D1BCh case    3:*/		return 0x8212D1C0;
		  /* 8212D1C0h */ case    4:  		/* mr R26, R4 */
		/* 8212D1C0h case    4:*/		regs.R26 = regs.R4;
		/* 8212D1C0h case    4:*/		return 0x8212D1C4;
		  /* 8212D1C4h */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 8212D1C4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 8212D1C4h case    5:*/		return 0x8212D1C8;
		  /* 8212D1C8h */ case    6:  		/* mr R27, R3 */
		/* 8212D1C8h case    6:*/		regs.R27 = regs.R3;
		/* 8212D1C8h case    6:*/		return 0x8212D1CC;
		  /* 8212D1CCh */ case    7:  		/* mr R25, R5 */
		/* 8212D1CCh case    7:*/		regs.R25 = regs.R5;
		/* 8212D1CCh case    7:*/		return 0x8212D1D0;
		  /* 8212D1D0h */ case    8:  		/* mr R30, R6 */
		/* 8212D1D0h case    8:*/		regs.R30 = regs.R6;
		/* 8212D1D0h case    8:*/		return 0x8212D1D4;
		  /* 8212D1D4h */ case    9:  		/* mr R28, R7 */
		/* 8212D1D4h case    9:*/		regs.R28 = regs.R7;
		/* 8212D1D4h case    9:*/		return 0x8212D1D8;
		  /* 8212D1D8h */ case   10:  		/* lwz R11, <#[R11 + 112]> */
		/* 8212D1D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8212D1D8h case   10:*/		return 0x8212D1DC;
		  /* 8212D1DCh */ case   11:  		/* li R29, 1 */
		/* 8212D1DCh case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8212D1DCh case   11:*/		return 0x8212D1E0;
		  /* 8212D1E0h */ case   12:  		/* mtspr CTR, R11 */
		/* 8212D1E0h case   12:*/		regs.CTR = regs.R11;
		/* 8212D1E0h case   12:*/		return 0x8212D1E4;
		  /* 8212D1E4h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8212D1E4h case   13:*/		if ( 1 ) { regs.LR = 0x8212D1E8; return (uint32)regs.CTR; }
		/* 8212D1E4h case   13:*/		return 0x8212D1E8;
		  /* 8212D1E8h */ case   14:  		/* lwz R11, <#[R27]> */
		/* 8212D1E8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8212D1E8h case   14:*/		return 0x8212D1EC;
		  /* 8212D1ECh */ case   15:  		/* mr R31, R3 */
		/* 8212D1ECh case   15:*/		regs.R31 = regs.R3;
		/* 8212D1ECh case   15:*/		return 0x8212D1F0;
		  /* 8212D1F0h */ case   16:  		/* mr R3, R27 */
		/* 8212D1F0h case   16:*/		regs.R3 = regs.R27;
		/* 8212D1F0h case   16:*/		return 0x8212D1F4;
		  /* 8212D1F4h */ case   17:  		/* lwz R4, <#[R26 + 108]> */
		/* 8212D1F4h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000006C) );
		/* 8212D1F4h case   17:*/		return 0x8212D1F8;
		  /* 8212D1F8h */ case   18:  		/* lwz R11, <#[R11 + 116]> */
		/* 8212D1F8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8212D1F8h case   18:*/		return 0x8212D1FC;
		  /* 8212D1FCh */ case   19:  		/* mtspr CTR, R11 */
		/* 8212D1FCh case   19:*/		regs.CTR = regs.R11;
		/* 8212D1FCh case   19:*/		return 0x8212D200;
		  /* 8212D200h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8212D200h case   20:*/		if ( 1 ) { regs.LR = 0x8212D204; return (uint32)regs.CTR; }
		/* 8212D200h case   20:*/		return 0x8212D204;
		  /* 8212D204h */ case   21:  		/* cmplwi CR6, R31, 11 */
		/* 8212D204h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000B);
		/* 8212D204h case   21:*/		return 0x8212D208;
		  /* 8212D208h */ case   22:  		/* stw R3, <#[R25]> */
		/* 8212D208h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 8212D208h case   22:*/		return 0x8212D20C;
		  /* 8212D20Ch */ case   23:  		/* bc 4, CR6_EQ, 20 */
		/* 8212D20Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x8212D220;  }
		/* 8212D20Ch case   23:*/		return 0x8212D210;
		  /* 8212D210h */ case   24:  		/* cmplwi CR6, R3, 4 */
		/* 8212D210h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 8212D210h case   24:*/		return 0x8212D214;
		  /* 8212D214h */ case   25:  		/* bc 4, CR6_LT, 76 */
		/* 8212D214h case   25:*/		if ( !regs.CR[6].lt ) { return 0x8212D260;  }
		/* 8212D214h case   25:*/		return 0x8212D218;
		  /* 8212D218h */ case   26:  		/* li R11, 8 */
		/* 8212D218h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8212D218h case   26:*/		return 0x8212D21C;
		  /* 8212D21Ch */ case   27:  		/* b 24 */
		/* 8212D21Ch case   27:*/		return 0x8212D234;
		/* 8212D21Ch case   27:*/		return 0x8212D220;
	}
	return 0x8212D220;
} // Block from 8212D1B0h-8212D220h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8212D220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D220);
		  /* 8212D220h */ case    0:  		/* cmplwi CR6, R31, 13 */
		/* 8212D220h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000D);
		/* 8212D220h case    0:*/		return 0x8212D224;
		  /* 8212D224h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8212D224h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212D23C;  }
		/* 8212D224h case    1:*/		return 0x8212D228;
		  /* 8212D228h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8212D228h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212D228h case    2:*/		return 0x8212D22C;
		  /* 8212D22Ch */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 8212D22Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8212D260;  }
		/* 8212D22Ch case    3:*/		return 0x8212D230;
		  /* 8212D230h */ case    4:  		/* li R11, 9 */
		/* 8212D230h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 8212D230h case    4:*/		return 0x8212D234;
	}
	return 0x8212D234;
} // Block from 8212D220h-8212D234h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212D234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D234);
		  /* 8212D234h */ case    0:  		/* stw R11, <#[R30]> */
		/* 8212D234h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212D234h case    0:*/		return 0x8212D238;
		  /* 8212D238h */ case    1:  		/* b 20 */
		/* 8212D238h case    1:*/		return 0x8212D24C;
		/* 8212D238h case    1:*/		return 0x8212D23C;
	}
	return 0x8212D23C;
} // Block from 8212D234h-8212D23Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D23C);
		  /* 8212D23Ch */ case    0:  		/* cmplwi CR6, R31, 65535 */
		/* 8212D23Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000FFFF);
		/* 8212D23Ch case    0:*/		return 0x8212D240;
		  /* 8212D240h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8212D240h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212D260;  }
		/* 8212D240h case    1:*/		return 0x8212D244;
		  /* 8212D244h */ case    2:  		/* li R29, 0 */
		/* 8212D244h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212D244h case    2:*/		return 0x8212D248;
		  /* 8212D248h */ case    3:  		/* stw R29, <#[R30]> */
		/* 8212D248h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 8212D248h case    3:*/		return 0x8212D24C;
	}
	return 0x8212D24C;
} // Block from 8212D23Ch-8212D24Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212D24Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D24C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D24C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D24C);
		  /* 8212D24Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8212D24Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8212D24Ch case    0:*/		return 0x8212D250;
		  /* 8212D250h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8212D250h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212D258;  }
		/* 8212D250h case    1:*/		return 0x8212D254;
		  /* 8212D254h */ case    2:  		/* stw R29, <#[R28]> */
		/* 8212D254h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 8212D254h case    2:*/		return 0x8212D258;
	}
	return 0x8212D258;
} // Block from 8212D24Ch-8212D258h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D258);
		  /* 8212D258h */ case    0:  		/* li R3, 0 */
		/* 8212D258h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D258h case    0:*/		return 0x8212D25C;
		  /* 8212D25Ch */ case    1:  		/* b 12 */
		/* 8212D25Ch case    1:*/		return 0x8212D268;
		/* 8212D25Ch case    1:*/		return 0x8212D260;
	}
	return 0x8212D260;
} // Block from 8212D258h-8212D260h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D260);
		  /* 8212D260h */ case    0:  		/* lis R3, -32768 */
		/* 8212D260h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212D260h case    0:*/		return 0x8212D264;
		  /* 8212D264h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8212D264h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212D264h case    1:*/		return 0x8212D268;
	}
	return 0x8212D268;
} // Block from 8212D260h-8212D268h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D268);
		  /* 8212D268h */ case    0:  		/* addi R1, R1, 144 */
		/* 8212D268h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8212D268h case    0:*/		return 0x8212D26C;
		  /* 8212D26Ch */ case    1:  		/* b -638928 */
		/* 8212D26Ch case    1:*/		return 0x8209129C;
		/* 8212D26Ch case    1:*/		return 0x8212D270;
		  /* 8212D270h */ case    2:  		/* lis R11, -32217 */
		/* 8212D270h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8212D270h case    2:*/		return 0x8212D274;
		  /* 8212D274h */ case    3:  		/* subf R5, R4, R3 */
		/* 8212D274h case    3:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R4,regs.R3);
		/* 8212D274h case    3:*/		return 0x8212D278;
	}
	return 0x8212D278;
} // Block from 8212D268h-8212D278h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212D278h
// Function '?PSEmitGE@CPSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D278);
		  /* 8212D278h */ case    0:  		/* li R7, 0 */
		/* 8212D278h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212D278h case    0:*/		return 0x8212D27C;
		  /* 8212D27Ch */ case    1:  		/* addi R6, R11, 15624 */
		/* 8212D27Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3D08);
		/* 8212D27Ch case    1:*/		return 0x8212D280;
		  /* 8212D280h */ case    2:  		/* li R9, 4 */
		/* 8212D280h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8212D280h case    2:*/		return 0x8212D284;
		  /* 8212D284h */ case    3:  		/* li R8, 1 */
		/* 8212D284h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8212D284h case    3:*/		return 0x8212D288;
		  /* 8212D288h */ case    4:  		/* li R10, 0 */
		/* 8212D288h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212D288h case    4:*/		return 0x8212D28C;
		  /* 8212D28Ch */ case    5:  		/* mr R11, R4 */
		/* 8212D28Ch case    5:*/		regs.R11 = regs.R4;
		/* 8212D28Ch case    5:*/		return 0x8212D290;
		  /* 8212D290h */ case    6:  		/* mtspr CTR, R9 */
		/* 8212D290h case    6:*/		regs.CTR = regs.R9;
		/* 8212D290h case    6:*/		return 0x8212D294;
		  /* 8212D294h */ case    7:  		/* add R9, R7, R10 */
		/* 8212D294h case    7:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R10);
		/* 8212D294h case    7:*/		return 0x8212D298;
		  /* 8212D298h */ case    8:  		/* lwzx R3, <#[R5 + R11]> */
		/* 8212D298h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8212D298h case    8:*/		return 0x8212D29C;
		  /* 8212D29Ch */ case    9:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8212D29Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8212D29Ch case    9:*/		return 0x8212D2A0;
		  /* 8212D2A0h */ case   10:  		/* lwzx R9, <#[R9 + R6]> */
		/* 8212D2A0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 8212D2A0h case   10:*/		return 0x8212D2A4;
		  /* 8212D2A4h */ case   11:  		/* cmplw CR6, R3, R9 */
		/* 8212D2A4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 8212D2A4h case   11:*/		return 0x8212D2A8;
		  /* 8212D2A8h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 8212D2A8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212D2C4;  }
		/* 8212D2A8h case   12:*/		return 0x8212D2AC;
		  /* 8212D2ACh */ case   13:  		/* lwz R9, <#[R11]> */
		/* 8212D2ACh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212D2ACh case   13:*/		return 0x8212D2B0;
		  /* 8212D2B0h */ case   14:  		/* li R3, -1 */
		/* 8212D2B0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 8212D2B0h case   14:*/		return 0x8212D2B4;
		  /* 8212D2B4h */ case   15:  		/* subf R9, R9, R3 */
		/* 8212D2B4h case   15:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 8212D2B4h case   15:*/		return 0x8212D2B8;
		  /* 8212D2B8h */ case   16:  		/* addic R9, R9, -1 */
		/* 8212D2B8h case   16:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8212D2B8h case   16:*/		return 0x8212D2BC;
		  /* 8212D2BCh */ case   17:  		/* subfe R9, R9, R9 */
		/* 8212D2BCh case   17:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8212D2BCh case   17:*/		return 0x8212D2C0;
		  /* 8212D2C0h */ case   18:  		/* and R8, R9, R8 */
		/* 8212D2C0h case   18:*/		cpu::op::and<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 8212D2C0h case   18:*/		return 0x8212D2C4;
	}
	return 0x8212D2C4;
} // Block from 8212D278h-8212D2C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212D2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D2C4);
		  /* 8212D2C4h */ case    0:  		/* addi R10, R10, 1 */
		/* 8212D2C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212D2C4h case    0:*/		return 0x8212D2C8;
		  /* 8212D2C8h */ case    1:  		/* addi R11, R11, 4 */
		/* 8212D2C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212D2C8h case    1:*/		return 0x8212D2CC;
		  /* 8212D2CCh */ case    2:  		/* bc 16, CR0_LT, -56 */
		/* 8212D2CCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D294;  }
		/* 8212D2CCh case    2:*/		return 0x8212D2D0;
		  /* 8212D2D0h */ case    3:  		/* cmpwi CR6, R8, 0 */
		/* 8212D2D0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8212D2D0h case    3:*/		return 0x8212D2D4;
		  /* 8212D2D4h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8212D2D4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8212D2EC;  }
		/* 8212D2D4h case    4:*/		return 0x8212D2D8;
		  /* 8212D2D8h */ case    5:  		/* addi R7, R7, 4 */
		/* 8212D2D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8212D2D8h case    5:*/		return 0x8212D2DC;
		  /* 8212D2DCh */ case    6:  		/* cmplwi CR6, R7, 32 */
		/* 8212D2DCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000020);
		/* 8212D2DCh case    6:*/		return 0x8212D2E0;
		  /* 8212D2E0h */ case    7:  		/* bc 12, CR6_LT, -96 */
		/* 8212D2E0h case    7:*/		if ( regs.CR[6].lt ) { return 0x8212D280;  }
		/* 8212D2E0h case    7:*/		return 0x8212D2E4;
		  /* 8212D2E4h */ case    8:  		/* li R3, 0 */
		/* 8212D2E4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D2E4h case    8:*/		return 0x8212D2E8;
		  /* 8212D2E8h */ case    9:  		/* bclr 20, CR0_LT */
		/* 8212D2E8h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212D2E8h case    9:*/		return 0x8212D2EC;
	}
	return 0x8212D2EC;
} // Block from 8212D2C4h-8212D2ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212D2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D2EC);
		  /* 8212D2ECh */ case    0:  		/* li R3, 1 */
		/* 8212D2ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212D2ECh case    0:*/		return 0x8212D2F0;
		  /* 8212D2F0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8212D2F0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212D2F0h case    1:*/		return 0x8212D2F4;
	}
	return 0x8212D2F4;
} // Block from 8212D2ECh-8212D2F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D2F4);
		  /* 8212D2F4h */ case    0:  		/* nop */
		/* 8212D2F4h case    0:*/		cpu::op::nop();
		/* 8212D2F4h case    0:*/		return 0x8212D2F8;
	}
	return 0x8212D2F8;
} // Block from 8212D2F4h-8212D2F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D2F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D2F8);
		  /* 8212D2F8h */ case    0:  		/* mfspr R12, LR */
		/* 8212D2F8h case    0:*/		regs.R12 = regs.LR;
		/* 8212D2F8h case    0:*/		return 0x8212D2FC;
		  /* 8212D2FCh */ case    1:  		/* bl -639144 */
		/* 8212D2FCh case    1:*/		regs.LR = 0x8212D300; return 0x82091254;
		/* 8212D2FCh case    1:*/		return 0x8212D300;
		  /* 8212D300h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8212D300h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8212D300h case    2:*/		return 0x8212D304;
		  /* 8212D304h */ case    3:  		/* mr R30, R3 */
		/* 8212D304h case    3:*/		regs.R30 = regs.R3;
		/* 8212D304h case    3:*/		return 0x8212D308;
		  /* 8212D308h */ case    4:  		/* mr R27, R4 */
		/* 8212D308h case    4:*/		regs.R27 = regs.R4;
		/* 8212D308h case    4:*/		return 0x8212D30C;
		  /* 8212D30Ch */ case    5:  		/* mr R29, R5 */
		/* 8212D30Ch case    5:*/		regs.R29 = regs.R5;
		/* 8212D30Ch case    5:*/		return 0x8212D310;
		  /* 8212D310h */ case    6:  		/* li R11, 0 */
		/* 8212D310h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212D310h case    6:*/		return 0x8212D314;
		  /* 8212D314h */ case    7:  		/* cmplwi CR6, R6, 0 */
		/* 8212D314h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8212D314h case    7:*/		return 0x8212D318;
		  /* 8212D318h */ case    8:  		/* bc 12, CR6_EQ, 140 */
		/* 8212D318h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212D3A4;  }
		/* 8212D318h case    8:*/		return 0x8212D31C;
		  /* 8212D31Ch */ case    9:  		/* li R10, 0 */
		/* 8212D31Ch case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212D31Ch case    9:*/		return 0x8212D320;
		  /* 8212D320h */ case   10:  		/* rlwinm R9, R5, 2, 0, 29 */
		/* 8212D320h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R5);
		/* 8212D320h case   10:*/		return 0x8212D324;
		  /* 8212D324h */ case   11:  		/* lwz R8, <#[R30 + 260]> */
		/* 8212D324h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000104) );
		/* 8212D324h case   11:*/		return 0x8212D328;
		  /* 8212D328h */ case   12:  		/* lwz R7, <#[R30 + 20]> */
		/* 8212D328h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000014) );
		/* 8212D328h case   12:*/		return 0x8212D32C;
		  /* 8212D32Ch */ case   13:  		/* lwz R5, <#[R8 + 8]> */
		/* 8212D32Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000008) );
		/* 8212D32Ch case   13:*/		return 0x8212D330;
		  /* 8212D330h */ case   14:  		/* lwz R8, <#[R8 + 16]> */
		/* 8212D330h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8212D330h case   14:*/		return 0x8212D334;
		  /* 8212D334h */ case   15:  		/* lwzx R5, <#[R5 + R10]> */
		/* 8212D334h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 8212D334h case   15:*/		return 0x8212D338;
		  /* 8212D338h */ case   16:  		/* lwz R8, <#[R8]> */
		/* 8212D338h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8212D338h case   16:*/		return 0x8212D33C;
		  /* 8212D33Ch */ case   17:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 8212D33Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 8212D33Ch case   17:*/		return 0x8212D340;
		  /* 8212D340h */ case   18:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212D340h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212D340h case   18:*/		return 0x8212D344;
		  /* 8212D344h */ case   19:  		/* lwzx R5, <#[R5 + R7]> */
		/* 8212D344h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 8212D344h case   19:*/		return 0x8212D348;
		  /* 8212D348h */ case   20:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8212D348h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212D348h case   20:*/		return 0x8212D34C;
		  /* 8212D34Ch */ case   21:  		/* lwz R7, <#[R5 + 4]> */
		/* 8212D34Ch case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000004) );
		/* 8212D34Ch case   21:*/		return 0x8212D350;
		  /* 8212D350h */ case   22:  		/* lwz R8, <#[R8 + 4]> */
		/* 8212D350h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 8212D350h case   22:*/		return 0x8212D354;
		  /* 8212D354h */ case   23:  		/* cmplw CR6, R8, R7 */
		/* 8212D354h case   23:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 8212D354h case   23:*/		return 0x8212D358;
		  /* 8212D358h */ case   24:  		/* bc 4, CR6_EQ, 60 */
		/* 8212D358h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8212D394;  }
		/* 8212D358h case   24:*/		return 0x8212D35C;
		  /* 8212D35Ch */ case   25:  		/* lwz R8, <#[R30 + 260]> */
		/* 8212D35Ch case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000104) );
		/* 8212D35Ch case   25:*/		return 0x8212D360;
		  /* 8212D360h */ case   26:  		/* lwz R7, <#[R30 + 20]> */
		/* 8212D360h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000014) );
		/* 8212D360h case   26:*/		return 0x8212D364;
		  /* 8212D364h */ case   27:  		/* lwz R5, <#[R8 + 8]> */
		/* 8212D364h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000008) );
		/* 8212D364h case   27:*/		return 0x8212D368;
		  /* 8212D368h */ case   28:  		/* lwz R8, <#[R8 + 16]> */
		/* 8212D368h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8212D368h case   28:*/		return 0x8212D36C;
		  /* 8212D36Ch */ case   29:  		/* lwzx R5, <#[R5 + R10]> */
		/* 8212D36Ch case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 8212D36Ch case   29:*/		return 0x8212D370;
		  /* 8212D370h */ case   30:  		/* lwz R8, <#[R8]> */
		/* 8212D370h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8212D370h case   30:*/		return 0x8212D374;
		  /* 8212D374h */ case   31:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 8212D374h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 8212D374h case   31:*/		return 0x8212D378;
		  /* 8212D378h */ case   32:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212D378h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212D378h case   32:*/		return 0x8212D37C;
		  /* 8212D37Ch */ case   33:  		/* lwzx R5, <#[R5 + R7]> */
		/* 8212D37Ch case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 8212D37Ch case   33:*/		return 0x8212D380;
		  /* 8212D380h */ case   34:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8212D380h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8212D380h case   34:*/		return 0x8212D384;
		  /* 8212D384h */ case   35:  		/* lwz R7, <#[R5 + 12]> */
		/* 8212D384h case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x0000000C) );
		/* 8212D384h case   35:*/		return 0x8212D388;
		  /* 8212D388h */ case   36:  		/* lwz R8, <#[R8 + 12]> */
		/* 8212D388h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 8212D388h case   36:*/		return 0x8212D38C;
		  /* 8212D38Ch */ case   37:  		/* cmplw CR6, R8, R7 */
		/* 8212D38Ch case   37:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 8212D38Ch case   37:*/		return 0x8212D390;
		  /* 8212D390h */ case   38:  		/* bc 12, CR6_EQ, 20 */
		/* 8212D390h case   38:*/		if ( regs.CR[6].eq ) { return 0x8212D3A4;  }
		/* 8212D390h case   38:*/		return 0x8212D394;
	}
	return 0x8212D394;
} // Block from 8212D2F8h-8212D394h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8212D394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D394);
		  /* 8212D394h */ case    0:  		/* addi R11, R11, 1 */
		/* 8212D394h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212D394h case    0:*/		return 0x8212D398;
		  /* 8212D398h */ case    1:  		/* add R10, R9, R10 */
		/* 8212D398h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8212D398h case    1:*/		return 0x8212D39C;
		  /* 8212D39Ch */ case    2:  		/* cmplw CR6, R11, R6 */
		/* 8212D39Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 8212D39Ch case    2:*/		return 0x8212D3A0;
		  /* 8212D3A0h */ case    3:  		/* bc 12, CR6_LT, -124 */
		/* 8212D3A0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212D324;  }
		/* 8212D3A0h case    3:*/		return 0x8212D3A4;
	}
	return 0x8212D3A4;
} // Block from 8212D394h-8212D3A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212D3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D3A4);
		  /* 8212D3A4h */ case    0:  		/* cmplw CR6, R11, R6 */
		/* 8212D3A4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 8212D3A4h case    0:*/		return 0x8212D3A8;
		  /* 8212D3A8h */ case    1:  		/* bc 12, CR6_EQ, 420 */
		/* 8212D3A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212D54C;  }
		/* 8212D3A8h case    1:*/		return 0x8212D3AC;
		  /* 8212D3ACh */ case    2:  		/* lwz R10, <#[R30 + 260]> */
		/* 8212D3ACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 8212D3ACh case    2:*/		return 0x8212D3B0;
	}
	return 0x8212D3B0;
} // Block from 8212D3A4h-8212D3B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D3B0h
// Function '?PSEmitLT@CPSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D3B0);
		  /* 8212D3B0h */ case    0:  		/* addi R8, R1, 80 */
		/* 8212D3B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8212D3B0h case    0:*/		return 0x8212D3B4;
		  /* 8212D3B4h */ case    1:  		/* mullw R7, R11, R29 */
		/* 8212D3B4h case    1:*/		cpu::op::mullw<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 8212D3B4h case    1:*/		return 0x8212D3B8;
		  /* 8212D3B8h */ case    2:  		/* lwz R11, <#[R10 + 8]> */
		/* 8212D3B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8212D3B8h case    2:*/		return 0x8212D3BC;
		  /* 8212D3BCh */ case    3:  		/* li R9, -1 */
		/* 8212D3BCh case    3:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8212D3BCh case    3:*/		return 0x8212D3C0;
		  /* 8212D3C0h */ case    4:  		/* rlwinm R10, R7, 2, 0, 29 */
		/* 8212D3C0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 8212D3C0h case    4:*/		return 0x8212D3C4;
		  /* 8212D3C4h */ case    5:  		/* std R9, <#[R8]> */
		/* 8212D3C4h case    5:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8212D3C4h case    5:*/		return 0x8212D3C8;
		  /* 8212D3C8h */ case    6:  		/* li R31, 0 */
		/* 8212D3C8h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212D3C8h case    6:*/		return 0x8212D3CC;
		  /* 8212D3CCh */ case    7:  		/* std R9, <#[R8 + 8]> */
		/* 8212D3CCh case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R8 + 0x00000008) );
		/* 8212D3CCh case    7:*/		return 0x8212D3D0;
		  /* 8212D3D0h */ case    8:  		/* add R28, R10, R11 */
		/* 8212D3D0h case    8:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 8212D3D0h case    8:*/		return 0x8212D3D4;
		  /* 8212D3D4h */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 8212D3D4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212D3D4h case    9:*/		return 0x8212D3D8;
		  /* 8212D3D8h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 8212D3D8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8212D408;  }
		/* 8212D3D8h case   10:*/		return 0x8212D3DC;
		  /* 8212D3DCh */ case   11:  		/* lwz R9, <#[R30 + 20]> */
		/* 8212D3DCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 8212D3DCh case   11:*/		return 0x8212D3E0;
		  /* 8212D3E0h */ case   12:  		/* addi R11, R28, -4 */
		/* 8212D3E0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 8212D3E0h case   12:*/		return 0x8212D3E4;
		  /* 8212D3E4h */ case   13:  		/* mtspr CTR, R29 */
		/* 8212D3E4h case   13:*/		regs.CTR = regs.R29;
		/* 8212D3E4h case   13:*/		return 0x8212D3E8;
		  /* 8212D3E8h */ case   14:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8212D3E8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8212D3E8h case   14:*/		return 0x8212D3EC;
		  /* 8212D3ECh */ case   15:  		/* addi R8, R1, 80 */
		/* 8212D3ECh case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8212D3ECh case   15:*/		return 0x8212D3F0;
		  /* 8212D3F0h */ case   16:  		/* rlwinm R7, R10, 2, 0, 29 */
		/* 8212D3F0h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R10);
		/* 8212D3F0h case   16:*/		return 0x8212D3F4;
		  /* 8212D3F4h */ case   17:  		/* lwzx R7, <#[R7 + R9]> */
		/* 8212D3F4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8212D3F4h case   17:*/		return 0x8212D3F8;
		  /* 8212D3F8h */ case   18:  		/* lwz R7, <#[R7 + 16]> */
		/* 8212D3F8h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 8212D3F8h case   18:*/		return 0x8212D3FC;
		  /* 8212D3FCh */ case   19:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8212D3FCh case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8212D3FCh case   19:*/		return 0x8212D400;
		  /* 8212D400h */ case   20:  		/* stwx R10, <#[R7 + R8]> */
		/* 8212D400h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 8212D400h case   20:*/		return 0x8212D404;
		  /* 8212D404h */ case   21:  		/* bc 16, CR0_LT, -28 */
		/* 8212D404h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D3E8;  }
		/* 8212D404h case   21:*/		return 0x8212D408;
	}
	return 0x8212D408;
} // Block from 8212D3B0h-8212D408h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212D408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D408);
		  /* 8212D408h */ case    0:  		/* li R11, 4 */
		/* 8212D408h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8212D408h case    0:*/		return 0x8212D40C;
		  /* 8212D40Ch */ case    1:  		/* addi R10, R1, 76 */
		/* 8212D40Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x4C);
		/* 8212D40Ch case    1:*/		return 0x8212D410;
		  /* 8212D410h */ case    2:  		/* mtspr CTR, R11 */
		/* 8212D410h case    2:*/		regs.CTR = regs.R11;
		/* 8212D410h case    2:*/		return 0x8212D414;
		  /* 8212D414h */ case    3:  		/* lwzu R11, <#[R10 + 4]> */
		/* 8212D414h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8212D414h case    3:*/		return 0x8212D418;
		  /* 8212D418h */ case    4:  		/* addi R11, R11, 1 */
		/* 8212D418h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212D418h case    4:*/		return 0x8212D41C;
		  /* 8212D41Ch */ case    5:  		/* addic R9, R11, -1 */
		/* 8212D41Ch case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8212D41Ch case    5:*/		return 0x8212D420;
		  /* 8212D420h */ case    6:  		/* subfe R11, R9, R11 */
		/* 8212D420h case    6:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8212D420h case    6:*/		return 0x8212D424;
		  /* 8212D424h */ case    7:  		/* add R31, R11, R31 */
		/* 8212D424h case    7:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8212D424h case    7:*/		return 0x8212D428;
		  /* 8212D428h */ case    8:  		/* bc 16, CR0_LT, -20 */
		/* 8212D428h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D414;  }
		/* 8212D428h case    8:*/		return 0x8212D42C;
		  /* 8212D42Ch */ case    9:  		/* lwz R11, <#[R30]> */
		/* 8212D42Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212D42Ch case    9:*/		return 0x8212D430;
		  /* 8212D430h */ case   10:  		/* li R8, 0 */
		/* 8212D430h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212D430h case   10:*/		return 0x8212D434;
		  /* 8212D434h */ case   11:  		/* li R7, 0 */
		/* 8212D434h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212D434h case   11:*/		return 0x8212D438;
		  /* 8212D438h */ case   12:  		/* lwz R4, <#[R30 + 256]> */
		/* 8212D438h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000100) );
		/* 8212D438h case   12:*/		return 0x8212D43C;
		  /* 8212D43Ch */ case   13:  		/* li R6, 4 */
		/* 8212D43Ch case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212D43Ch case   13:*/		return 0x8212D440;
		  /* 8212D440h */ case   14:  		/* addi R5, R1, 96 */
		/* 8212D440h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8212D440h case   14:*/		return 0x8212D444;
		  /* 8212D444h */ case   15:  		/* mr R3, R30 */
		/* 8212D444h case   15:*/		regs.R3 = regs.R30;
		/* 8212D444h case   15:*/		return 0x8212D448;
		  /* 8212D448h */ case   16:  		/* lwz R11, <#[R11 + 340]> */
		/* 8212D448h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 8212D448h case   16:*/		return 0x8212D44C;
		  /* 8212D44Ch */ case   17:  		/* mtspr CTR, R11 */
		/* 8212D44Ch case   17:*/		regs.CTR = regs.R11;
		/* 8212D44Ch case   17:*/		return 0x8212D450;
		  /* 8212D450h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8212D450h case   18:*/		if ( 1 ) { regs.LR = 0x8212D454; return (uint32)regs.CTR; }
		/* 8212D450h case   18:*/		return 0x8212D454;
		  /* 8212D454h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 8212D454h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212D454h case   19:*/		return 0x8212D458;
		  /* 8212D458h */ case   20:  		/* bc 12, CR0_LT, 248 */
		/* 8212D458h case   20:*/		if ( regs.CR[0].lt ) { return 0x8212D550;  }
		/* 8212D458h case   20:*/		return 0x8212D45C;
		  /* 8212D45Ch */ case   21:  		/* li R3, 116 */
		/* 8212D45Ch case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212D45Ch case   21:*/		return 0x8212D460;
		  /* 8212D460h */ case   22:  		/* bl -200392 */
		/* 8212D460h case   22:*/		regs.LR = 0x8212D464; return 0x820FC598;
		/* 8212D460h case   22:*/		return 0x8212D464;
		  /* 8212D464h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 8212D464h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212D464h case   23:*/		return 0x8212D468;
		  /* 8212D468h */ case   24:  		/* bc 12, CR0_EQ, 12 */
		/* 8212D468h case   24:*/		if ( regs.CR[0].eq ) { return 0x8212D474;  }
		/* 8212D468h case   24:*/		return 0x8212D46C;
		  /* 8212D46Ch */ case   25:  		/* bl -202188 */
		/* 8212D46Ch case   25:*/		regs.LR = 0x8212D470; return 0x820FBEA0;
		/* 8212D46Ch case   25:*/		return 0x8212D470;
		  /* 8212D470h */ case   26:  		/* b 8 */
		/* 8212D470h case   26:*/		return 0x8212D478;
		/* 8212D470h case   26:*/		return 0x8212D474;
	}
	return 0x8212D474;
} // Block from 8212D408h-8212D474h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8212D474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D474);
		  /* 8212D474h */ case    0:  		/* li R3, 0 */
		/* 8212D474h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D474h case    0:*/		return 0x8212D478;
	}
	return 0x8212D478;
} // Block from 8212D474h-8212D478h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D478);
		  /* 8212D478h */ case    0:  		/* stw R3, <#[R27]> */
		/* 8212D478h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8212D478h case    0:*/		return 0x8212D47C;
		  /* 8212D47Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8212D47Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212D47Ch case    1:*/		return 0x8212D480;
		  /* 8212D480h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8212D480h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212D490;  }
		/* 8212D480h case    2:*/		return 0x8212D484;
		  /* 8212D484h */ case    3:  		/* lis R3, -32761 */
		/* 8212D484h case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8212D484h case    3:*/		return 0x8212D488;
		  /* 8212D488h */ case    4:  		/* ori R3, R3, 14 */
		/* 8212D488h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8212D488h case    4:*/		return 0x8212D48C;
		  /* 8212D48Ch */ case    5:  		/* b 196 */
		/* 8212D48Ch case    5:*/		return 0x8212D550;
		/* 8212D48Ch case    5:*/		return 0x8212D490;
	}
	return 0x8212D490;
} // Block from 8212D478h-8212D490h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212D490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D490);
		  /* 8212D490h */ case    0:  		/* li R11, 1 */
		/* 8212D490h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212D490h case    0:*/		return 0x8212D494;
		  /* 8212D494h */ case    1:  		/* mr R4, R31 */
		/* 8212D494h case    1:*/		regs.R4 = regs.R31;
		/* 8212D494h case    1:*/		return 0x8212D498;
		  /* 8212D498h */ case    2:  		/* li R7, 0 */
		/* 8212D498h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212D498h case    2:*/		return 0x8212D49C;
		  /* 8212D49Ch */ case    3:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 8212D49Ch case    3:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 8212D49Ch case    3:*/		return 0x8212D4A0;
		  /* 8212D4A0h */ case    4:  		/* mr R6, R31 */
		/* 8212D4A0h case    4:*/		regs.R6 = regs.R31;
		/* 8212D4A0h case    4:*/		return 0x8212D4A4;
		  /* 8212D4A4h */ case    5:  		/* mr R5, R31 */
		/* 8212D4A4h case    5:*/		regs.R5 = regs.R31;
		/* 8212D4A4h case    5:*/		return 0x8212D4A8;
		  /* 8212D4A8h */ case    6:  		/* bl -200312 */
		/* 8212D4A8h case    6:*/		regs.LR = 0x8212D4AC; return 0x820FC630;
		/* 8212D4A8h case    6:*/		return 0x8212D4AC;
		  /* 8212D4ACh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8212D4ACh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212D4ACh case    7:*/		return 0x8212D4B0;
		  /* 8212D4B0h */ case    8:  		/* bc 12, CR0_LT, 160 */
		/* 8212D4B0h case    8:*/		if ( regs.CR[0].lt ) { return 0x8212D550;  }
		/* 8212D4B0h case    8:*/		return 0x8212D4B4;
		  /* 8212D4B4h */ case    9:  		/* lwz R4, <#[R30 + 260]> */
		/* 8212D4B4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 8212D4B4h case    9:*/		return 0x8212D4B8;
		  /* 8212D4B8h */ case   10:  		/* lwz R3, <#[R27]> */
		/* 8212D4B8h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8212D4B8h case   10:*/		return 0x8212D4BC;
		  /* 8212D4BCh */ case   11:  		/* bl -202188 */
		/* 8212D4BCh case   11:*/		regs.LR = 0x8212D4C0; return 0x820FBEF0;
		/* 8212D4BCh case   11:*/		return 0x8212D4C0;
		  /* 8212D4C0h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8212D4C0h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212D4C0h case   12:*/		return 0x8212D4C4;
		  /* 8212D4C4h */ case   13:  		/* bc 12, CR0_LT, 140 */
		/* 8212D4C4h case   13:*/		if ( regs.CR[0].lt ) { return 0x8212D550;  }
		/* 8212D4C4h case   13:*/		return 0x8212D4C8;
		  /* 8212D4C8h */ case   14:  		/* li R9, 4 */
		/* 8212D4C8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8212D4C8h case   14:*/		return 0x8212D4CC;
		  /* 8212D4CCh */ case   15:  		/* li R11, 0 */
		/* 8212D4CCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212D4CCh case   15:*/		return 0x8212D4D0;
		  /* 8212D4D0h */ case   16:  		/* li R10, 0 */
		/* 8212D4D0h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212D4D0h case   16:*/		return 0x8212D4D4;
		  /* 8212D4D4h */ case   17:  		/* mtspr CTR, R9 */
		/* 8212D4D4h case   17:*/		regs.CTR = regs.R9;
		/* 8212D4D4h case   17:*/		return 0x8212D4D8;
		  /* 8212D4D8h */ case   18:  		/* addi R9, R1, 80 */
		/* 8212D4D8h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8212D4D8h case   18:*/		return 0x8212D4DC;
		  /* 8212D4DCh */ case   19:  		/* lwzx R9, <#[R10 + R9]> */
		/* 8212D4DCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212D4DCh case   19:*/		return 0x8212D4E0;
		  /* 8212D4E0h */ case   20:  		/* cmpwi CR6, R9, -1 */
		/* 8212D4E0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8212D4E0h case   20:*/		return 0x8212D4E4;
		  /* 8212D4E4h */ case   21:  		/* bc 12, CR6_EQ, 40 */
		/* 8212D4E4h case   21:*/		if ( regs.CR[6].eq ) { return 0x8212D50C;  }
		/* 8212D4E4h case   21:*/		return 0x8212D4E8;
	}
	return 0x8212D4E8;
} // Block from 8212D490h-8212D4E8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212D4E8h
// Function '?PSEmitMax@CPSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D4E8);
		  /* 8212D4E8h */ case    0:  		/* lwz R8, <#[R27]> */
		/* 8212D4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 8212D4E8h case    0:*/		return 0x8212D4EC;
		  /* 8212D4ECh */ case    1:  		/* addi R7, R1, 96 */
		/* 8212D4ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8212D4ECh case    1:*/		return 0x8212D4F0;
		  /* 8212D4F0h */ case    2:  		/* lwz R8, <#[R8 + 16]> */
		/* 8212D4F0h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8212D4F0h case    2:*/		return 0x8212D4F4;
		  /* 8212D4F4h */ case    3:  		/* lwzx R7, <#[R10 + R7]> */
		/* 8212D4F4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8212D4F4h case    3:*/		return 0x8212D4F8;
		  /* 8212D4F8h */ case    4:  		/* stwx R7, <#[R8 + R11]> */
		/* 8212D4F8h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8212D4F8h case    4:*/		return 0x8212D4FC;
		  /* 8212D4FCh */ case    5:  		/* lwz R8, <#[R27]> */
		/* 8212D4FCh case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 8212D4FCh case    5:*/		return 0x8212D500;
		  /* 8212D500h */ case    6:  		/* lwz R8, <#[R8 + 8]> */
		/* 8212D500h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 8212D500h case    6:*/		return 0x8212D504;
		  /* 8212D504h */ case    7:  		/* stwx R9, <#[R8 + R11]> */
		/* 8212D504h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8212D504h case    7:*/		return 0x8212D508;
		  /* 8212D508h */ case    8:  		/* addi R11, R11, 4 */
		/* 8212D508h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212D508h case    8:*/		return 0x8212D50C;
	}
	return 0x8212D50C;
} // Block from 8212D4E8h-8212D50Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212D50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D50C);
		  /* 8212D50Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 8212D50Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212D50Ch case    0:*/		return 0x8212D510;
		  /* 8212D510h */ case    1:  		/* bc 16, CR0_LT, -56 */
		/* 8212D510h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D4D8;  }
		/* 8212D510h case    1:*/		return 0x8212D514;
		  /* 8212D514h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8212D514h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212D514h case    2:*/		return 0x8212D518;
		  /* 8212D518h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 8212D518h case    3:*/		if ( regs.CR[6].eq ) { return 0x8212D54C;  }
		/* 8212D518h case    3:*/		return 0x8212D51C;
		  /* 8212D51Ch */ case    4:  		/* mtspr CTR, R29 */
		/* 8212D51Ch case    4:*/		regs.CTR = regs.R29;
		/* 8212D51Ch case    4:*/		return 0x8212D520;
		  /* 8212D520h */ case    5:  		/* addi R11, R28, -4 */
		/* 8212D520h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 8212D520h case    5:*/		return 0x8212D524;
		  /* 8212D524h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212D524h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212D524h case    6:*/		return 0x8212D528;
		  /* 8212D528h */ case    7:  		/* addi R9, R1, 96 */
		/* 8212D528h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8212D528h case    7:*/		return 0x8212D52C;
		  /* 8212D52Ch */ case    8:  		/* lwz R8, <#[R30 + 20]> */
		/* 8212D52Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 8212D52Ch case    8:*/		return 0x8212D530;
		  /* 8212D530h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212D530h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212D530h case    9:*/		return 0x8212D534;
		  /* 8212D534h */ case   10:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8212D534h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212D534h case   10:*/		return 0x8212D538;
		  /* 8212D538h */ case   11:  		/* lwz R10, <#[R10 + 16]> */
		/* 8212D538h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8212D538h case   11:*/		return 0x8212D53C;
		  /* 8212D53Ch */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212D53Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212D53Ch case   12:*/		return 0x8212D540;
		  /* 8212D540h */ case   13:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8212D540h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212D540h case   13:*/		return 0x8212D544;
		  /* 8212D544h */ case   14:  		/* stwu R10, <#[R11 + 4]> */
		/* 8212D544h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8212D544h case   14:*/		return 0x8212D548;
		  /* 8212D548h */ case   15:  		/* bc 16, CR0_LT, -36 */
		/* 8212D548h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D524;  }
		/* 8212D548h case   15:*/		return 0x8212D54C;
	}
	return 0x8212D54C;
} // Block from 8212D50Ch-8212D54Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212D54Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D54C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D54C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D54C);
		  /* 8212D54Ch */ case    0:  		/* li R3, 0 */
		/* 8212D54Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D54Ch case    0:*/		return 0x8212D550;
	}
	return 0x8212D550;
} // Block from 8212D54Ch-8212D550h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D550);
		  /* 8212D550h */ case    0:  		/* addi R1, R1, 160 */
		/* 8212D550h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8212D550h case    0:*/		return 0x8212D554;
		  /* 8212D554h */ case    1:  		/* b -639664 */
		/* 8212D554h case    1:*/		return 0x820912A4;
		/* 8212D554h case    1:*/		return 0x8212D558;
	}
	return 0x8212D558;
} // Block from 8212D550h-8212D558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D558);
		  /* 8212D558h */ case    0:  		/* mfspr R12, LR */
		/* 8212D558h case    0:*/		regs.R12 = regs.LR;
		/* 8212D558h case    0:*/		return 0x8212D55C;
		  /* 8212D55Ch */ case    1:  		/* bl -639756 */
		/* 8212D55Ch case    1:*/		regs.LR = 0x8212D560; return 0x82091250;
		/* 8212D55Ch case    1:*/		return 0x8212D560;
		  /* 8212D560h */ case    2:  		/* stfd FR31, <#[R1 - 64]> */
		/* 8212D560h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8212D560h case    2:*/		return 0x8212D564;
		  /* 8212D564h */ case    3:  		/* stwu R1, <#[R1 - 160]> */
		/* 8212D564h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8212D564h case    3:*/		return 0x8212D568;
		  /* 8212D568h */ case    4:  		/* lwz R9, <#[R3 + 8]> */
		/* 8212D568h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8212D568h case    4:*/		return 0x8212D56C;
		  /* 8212D56Ch */ case    5:  		/* mr R29, R3 */
		/* 8212D56Ch case    5:*/		regs.R29 = regs.R3;
		/* 8212D56Ch case    5:*/		return 0x8212D570;
		  /* 8212D570h */ case    6:  		/* mr R26, R4 */
		/* 8212D570h case    6:*/		regs.R26 = regs.R4;
		/* 8212D570h case    6:*/		return 0x8212D574;
		  /* 8212D574h */ case    7:  		/* mr R27, R5 */
		/* 8212D574h case    7:*/		regs.R27 = regs.R5;
		/* 8212D574h case    7:*/		return 0x8212D578;
		  /* 8212D578h */ case    8:  		/* li R28, 0 */
		/* 8212D578h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212D578h case    8:*/		return 0x8212D57C;
		  /* 8212D57Ch */ case    9:  		/* li R8, 0 */
		/* 8212D57Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212D57Ch case    9:*/		return 0x8212D580;
		  /* 8212D580h */ case   10:  		/* cmplwi CR6, R9, 0 */
		/* 8212D580h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8212D580h case   10:*/		return 0x8212D584;
		  /* 8212D584h */ case   11:  		/* bc 12, CR6_EQ, 64 */
		/* 8212D584h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212D5C4;  }
		/* 8212D584h case   11:*/		return 0x8212D588;
		  /* 8212D588h */ case   12:  		/* lwz R7, <#[R3 + 136]> */
		/* 8212D588h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000088) );
		/* 8212D588h case   12:*/		return 0x8212D58C;
		  /* 8212D58Ch */ case   13:  		/* li R10, 0 */
		/* 8212D58Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212D58Ch case   13:*/		return 0x8212D590;
		  /* 8212D590h */ case   14:  		/* lwz R6, <#[R3 + 20]> */
		/* 8212D590h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000014) );
		/* 8212D590h case   14:*/		return 0x8212D594;
		  /* 8212D594h */ case   15:  		/* lwzx R11, <#[R10 + R6]> */
		/* 8212D594h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8212D594h case   15:*/		return 0x8212D598;
		  /* 8212D598h */ case   16:  		/* lwz R5, <#[R11 + 4]> */
		/* 8212D598h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 8212D598h case   16:*/		return 0x8212D59C;
		  /* 8212D59Ch */ case   17:  		/* cmplw CR6, R7, R5 */
		/* 8212D59Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 8212D59Ch case   17:*/		return 0x8212D5A0;
		  /* 8212D5A0h */ case   18:  		/* bc 4, CR6_EQ, 20 */
		/* 8212D5A0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8212D5B4;  }
		/* 8212D5A0h case   18:*/		return 0x8212D5A4;
		  /* 8212D5A4h */ case   19:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212D5A4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212D5A4h case   19:*/		return 0x8212D5A8;
		  /* 8212D5A8h */ case   20:  		/* cmplw CR6, R11, R28 */
		/* 8212D5A8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8212D5A8h case   20:*/		return 0x8212D5AC;
		  /* 8212D5ACh */ case   21:  		/* bc 12, CR6_LT, 8 */
		/* 8212D5ACh case   21:*/		if ( regs.CR[6].lt ) { return 0x8212D5B4;  }
		/* 8212D5ACh case   21:*/		return 0x8212D5B0;
		  /* 8212D5B0h */ case   22:  		/* addi R28, R11, 1 */
		/* 8212D5B0h case   22:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x1);
		/* 8212D5B0h case   22:*/		return 0x8212D5B4;
	}
	return 0x8212D5B4;
} // Block from 8212D558h-8212D5B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212D5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D5B4);
		  /* 8212D5B4h */ case    0:  		/* addi R8, R8, 1 */
		/* 8212D5B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8212D5B4h case    0:*/		return 0x8212D5B8;
		  /* 8212D5B8h */ case    1:  		/* addi R10, R10, 4 */
		/* 8212D5B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212D5B8h case    1:*/		return 0x8212D5BC;
		  /* 8212D5BCh */ case    2:  		/* cmplw CR6, R8, R9 */
		/* 8212D5BCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8212D5BCh case    2:*/		return 0x8212D5C0;
		  /* 8212D5C0h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212D5C0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212D594;  }
		/* 8212D5C0h case    3:*/		return 0x8212D5C4;
	}
	return 0x8212D5C4;
} // Block from 8212D5B4h-8212D5C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212D5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D5C4);
		  /* 8212D5C4h */ case    0:  		/* lis R11, -32256 */
		/* 8212D5C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8212D5C4h case    0:*/		return 0x8212D5C8;
		  /* 8212D5C8h */ case    1:  		/* li R31, 0 */
		/* 8212D5C8h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212D5C8h case    1:*/		return 0x8212D5CC;
		  /* 8212D5CCh */ case    2:  		/* addi R30, R1, 80 */
		/* 8212D5CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 8212D5CCh case    2:*/		return 0x8212D5D0;
		  /* 8212D5D0h */ case    3:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8212D5D0h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8212D5D0h case    3:*/		return 0x8212D5D4;
		  /* 8212D5D4h */ case    4:  		/* mr R6, R31 */
		/* 8212D5D4h case    4:*/		regs.R6 = regs.R31;
		/* 8212D5D4h case    4:*/		return 0x8212D5D8;
		  /* 8212D5D8h */ case    5:  		/* lwz R4, <#[R29 + 136]> */
		/* 8212D5D8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000088) );
		/* 8212D5D8h case    5:*/		return 0x8212D5DC;
		  /* 8212D5DCh */ case    6:  		/* mr R5, R28 */
		/* 8212D5DCh case    6:*/		regs.R5 = regs.R28;
		/* 8212D5DCh case    6:*/		return 0x8212D5E0;
		  /* 8212D5E0h */ case    7:  		/* fmr FR1, FR31 */
		/* 8212D5E0h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8212D5E0h case    7:*/		return 0x8212D5E4;
		  /* 8212D5E4h */ case    8:  		/* mr R3, R29 */
		/* 8212D5E4h case    8:*/		regs.R3 = regs.R29;
		/* 8212D5E4h case    8:*/		return 0x8212D5E8;
		  /* 8212D5E8h */ case    9:  		/* bl -197568 */
		/* 8212D5E8h case    9:*/		regs.LR = 0x8212D5EC; return 0x820FD228;
		/* 8212D5E8h case    9:*/		return 0x8212D5EC;
		  /* 8212D5ECh */ case   10:  		/* stw R3, <#[R30]> */
		/* 8212D5ECh case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8212D5ECh case   10:*/		return 0x8212D5F0;
		  /* 8212D5F0h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 8212D5F0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8212D5F0h case   11:*/		return 0x8212D5F4;
		  /* 8212D5F4h */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 8212D5F4h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212D620;  }
		/* 8212D5F4h case   12:*/		return 0x8212D5F8;
		  /* 8212D5F8h */ case   13:  		/* addi R31, R31, 1 */
		/* 8212D5F8h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8212D5F8h case   13:*/		return 0x8212D5FC;
		  /* 8212D5FCh */ case   14:  		/* addi R30, R30, 4 */
		/* 8212D5FCh case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212D5FCh case   14:*/		return 0x8212D600;
		  /* 8212D600h */ case   15:  		/* cmplwi CR6, R31, 4 */
		/* 8212D600h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 8212D600h case   15:*/		return 0x8212D604;
		  /* 8212D604h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 8212D604h case   16:*/		if ( regs.CR[6].lt ) { return 0x8212D5D4;  }
		/* 8212D604h case   16:*/		return 0x8212D608;
		  /* 8212D608h */ case   17:  		/* li R3, 116 */
		/* 8212D608h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212D608h case   17:*/		return 0x8212D60C;
		  /* 8212D60Ch */ case   18:  		/* bl -200820 */
		/* 8212D60Ch case   18:*/		regs.LR = 0x8212D610; return 0x820FC598;
		/* 8212D60Ch case   18:*/		return 0x8212D610;
		  /* 8212D610h */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 8212D610h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212D610h case   19:*/		return 0x8212D614;
		  /* 8212D614h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 8212D614h case   20:*/		if ( regs.CR[0].eq ) { return 0x8212D62C;  }
		/* 8212D614h case   20:*/		return 0x8212D618;
		  /* 8212D618h */ case   21:  		/* bl -202616 */
		/* 8212D618h case   21:*/		regs.LR = 0x8212D61C; return 0x820FBEA0;
		/* 8212D618h case   21:*/		return 0x8212D61C;
		  /* 8212D61Ch */ case   22:  		/* b 20 */
		/* 8212D61Ch case   22:*/		return 0x8212D630;
		/* 8212D61Ch case   22:*/		return 0x8212D620;
	}
	return 0x8212D620;
} // Block from 8212D5C4h-8212D620h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212D620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D620);
		  /* 8212D620h */ case    0:  		/* lis R3, -32761 */
		/* 8212D620h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8212D620h case    0:*/		return 0x8212D624;
		  /* 8212D624h */ case    1:  		/* ori R3, R3, 14 */
		/* 8212D624h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8212D624h case    1:*/		return 0x8212D628;
		  /* 8212D628h */ case    2:  		/* b 196 */
		/* 8212D628h case    2:*/		return 0x8212D6EC;
		/* 8212D628h case    2:*/		return 0x8212D62C;
	}
	return 0x8212D62C;
} // Block from 8212D620h-8212D62Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D62C);
		  /* 8212D62Ch */ case    0:  		/* li R3, 0 */
		/* 8212D62Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D62Ch case    0:*/		return 0x8212D630;
	}
	return 0x8212D630;
} // Block from 8212D62Ch-8212D630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D630);
		  /* 8212D630h */ case    0:  		/* stw R3, <#[R26]> */
		/* 8212D630h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8212D630h case    0:*/		return 0x8212D634;
		  /* 8212D634h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8212D634h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212D634h case    1:*/		return 0x8212D638;
		  /* 8212D638h */ case    2:  		/* bc 12, CR6_EQ, -24 */
		/* 8212D638h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212D620;  }
		/* 8212D638h case    2:*/		return 0x8212D63C;
		  /* 8212D63Ch */ case    3:  		/* li R11, 1 */
		/* 8212D63Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212D63Ch case    3:*/		return 0x8212D640;
		  /* 8212D640h */ case    4:  		/* mr R4, R27 */
		/* 8212D640h case    4:*/		regs.R4 = regs.R27;
		/* 8212D640h case    4:*/		return 0x8212D644;
		  /* 8212D644h */ case    5:  		/* li R7, 0 */
		/* 8212D644h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212D644h case    5:*/		return 0x8212D648;
		  /* 8212D648h */ case    6:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 8212D648h case    6:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 8212D648h case    6:*/		return 0x8212D64C;
		  /* 8212D64Ch */ case    7:  		/* mr R6, R27 */
		/* 8212D64Ch case    7:*/		regs.R6 = regs.R27;
		/* 8212D64Ch case    7:*/		return 0x8212D650;
		  /* 8212D650h */ case    8:  		/* mr R5, R27 */
		/* 8212D650h case    8:*/		regs.R5 = regs.R27;
		/* 8212D650h case    8:*/		return 0x8212D654;
		  /* 8212D654h */ case    9:  		/* bl -200740 */
		/* 8212D654h case    9:*/		regs.LR = 0x8212D658; return 0x820FC630;
		/* 8212D654h case    9:*/		return 0x8212D658;
		  /* 8212D658h */ case   10:  		/* or. R30, R3, R3 */
		/* 8212D658h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212D658h case   10:*/		return 0x8212D65C;
		  /* 8212D65Ch */ case   11:  		/* bc 4, CR0_LT, 40 */
		/* 8212D65Ch case   11:*/		if ( !regs.CR[0].lt ) { return 0x8212D684;  }
		/* 8212D65Ch case   11:*/		return 0x8212D660;
		  /* 8212D660h */ case   12:  		/* lwz R31, <#[R26]> */
		/* 8212D660h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8212D660h case   12:*/		return 0x8212D664;
		  /* 8212D664h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 8212D664h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8212D664h case   13:*/		return 0x8212D668;
		  /* 8212D668h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 8212D668h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212D67C;  }
		/* 8212D668h case   14:*/		return 0x8212D66C;
		  /* 8212D66Ch */ case   15:  		/* mr R3, R31 */
		/* 8212D66Ch case   15:*/		regs.R3 = regs.R31;
		/* 8212D66Ch case   15:*/		return 0x8212D670;
		  /* 8212D670h */ case   16:  		/* bl 982352 */
		/* 8212D670h case   16:*/		regs.LR = 0x8212D674; return 0x8221D3C0;
		/* 8212D670h case   16:*/		return 0x8212D674;
		  /* 8212D674h */ case   17:  		/* mr R3, R31 */
		/* 8212D674h case   17:*/		regs.R3 = regs.R31;
		/* 8212D674h case   17:*/		return 0x8212D678;
		  /* 8212D678h */ case   18:  		/* bl -200840 */
		/* 8212D678h case   18:*/		regs.LR = 0x8212D67C; return 0x820FC5F0;
		/* 8212D678h case   18:*/		return 0x8212D67C;
	}
	return 0x8212D67C;
} // Block from 8212D630h-8212D67Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212D67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D67C);
		  /* 8212D67Ch */ case    0:  		/* mr R3, R30 */
		/* 8212D67Ch case    0:*/		regs.R3 = regs.R30;
		/* 8212D67Ch case    0:*/		return 0x8212D680;
		  /* 8212D680h */ case    1:  		/* b 108 */
		/* 8212D680h case    1:*/		return 0x8212D6EC;
		/* 8212D680h case    1:*/		return 0x8212D684;
	}
	return 0x8212D684;
} // Block from 8212D67Ch-8212D684h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D684);
		  /* 8212D684h */ case    0:  		/* lwz R3, <#[R26]> */
		/* 8212D684h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8212D684h case    0:*/		return 0x8212D688;
		  /* 8212D688h */ case    1:  		/* lwz R4, <#[R29 + 260]> */
		/* 8212D688h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000104) );
		/* 8212D688h case    1:*/		return 0x8212D68C;
		  /* 8212D68Ch */ case    2:  		/* bl -202652 */
		/* 8212D68Ch case    2:*/		regs.LR = 0x8212D690; return 0x820FBEF0;
		/* 8212D68Ch case    2:*/		return 0x8212D690;
		  /* 8212D690h */ case    3:  		/* or. R30, R3, R3 */
		/* 8212D690h case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212D690h case    3:*/		return 0x8212D694;
		  /* 8212D694h */ case    4:  		/* bc 12, CR0_LT, -52 */
		/* 8212D694h case    4:*/		if ( regs.CR[0].lt ) { return 0x8212D660;  }
		/* 8212D694h case    4:*/		return 0x8212D698;
		  /* 8212D698h */ case    5:  		/* cmplwi CR6, R27, 0 */
		/* 8212D698h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8212D698h case    5:*/		return 0x8212D69C;
		  /* 8212D69Ch */ case    6:  		/* bc 12, CR6_EQ, 76 */
		/* 8212D69Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8212D6E8;  }
		/* 8212D69Ch case    6:*/		return 0x8212D6A0;
		  /* 8212D6A0h */ case    7:  		/* li R11, 0 */
		/* 8212D6A0h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212D6A0h case    7:*/		return 0x8212D6A4;
		  /* 8212D6A4h */ case    8:  		/* mtspr CTR, R27 */
		/* 8212D6A4h case    8:*/		regs.CTR = regs.R27;
		/* 8212D6A4h case    8:*/		return 0x8212D6A8;
	}
	return 0x8212D6A8;
} // Block from 8212D684h-8212D6A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212D6A8h
// Function '?PSEmitMin@CPSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D6A8);
		  /* 8212D6A8h */ case    0:  		/* lwz R10, <#[R26]> */
		/* 8212D6A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8212D6A8h case    0:*/		return 0x8212D6AC;
		  /* 8212D6ACh */ case    1:  		/* addi R9, R1, 80 */
		/* 8212D6ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8212D6ACh case    1:*/		return 0x8212D6B0;
		  /* 8212D6B0h */ case    2:  		/* lwz R10, <#[R10 + 8]> */
		/* 8212D6B0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8212D6B0h case    2:*/		return 0x8212D6B4;
		  /* 8212D6B4h */ case    3:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8212D6B4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212D6B4h case    3:*/		return 0x8212D6B8;
		  /* 8212D6B8h */ case    4:  		/* stwx R9, <#[R10 + R11]> */
		/* 8212D6B8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212D6B8h case    4:*/		return 0x8212D6BC;
		  /* 8212D6BCh */ case    5:  		/* lwz R10, <#[R29 + 260]> */
		/* 8212D6BCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000104) );
		/* 8212D6BCh case    5:*/		return 0x8212D6C0;
		  /* 8212D6C0h */ case    6:  		/* lwz R10, <#[R10 + 16]> */
		/* 8212D6C0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8212D6C0h case    6:*/		return 0x8212D6C4;
		  /* 8212D6C4h */ case    7:  		/* lwz R8, <#[R26]> */
		/* 8212D6C4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000000) );
		/* 8212D6C4h case    7:*/		return 0x8212D6C8;
		  /* 8212D6C8h */ case    8:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8212D6C8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212D6C8h case    8:*/		return 0x8212D6CC;
		  /* 8212D6CCh */ case    9:  		/* lwz R8, <#[R8 + 16]> */
		/* 8212D6CCh case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8212D6CCh case    9:*/		return 0x8212D6D0;
		  /* 8212D6D0h */ case   10:  		/* stwx R10, <#[R8 + R11]> */
		/* 8212D6D0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8212D6D0h case   10:*/		return 0x8212D6D4;
		  /* 8212D6D4h */ case   11:  		/* lwz R10, <#[R29 + 260]> */
		/* 8212D6D4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000104) );
		/* 8212D6D4h case   11:*/		return 0x8212D6D8;
		  /* 8212D6D8h */ case   12:  		/* lwz R10, <#[R10 + 16]> */
		/* 8212D6D8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8212D6D8h case   12:*/		return 0x8212D6DC;
		  /* 8212D6DCh */ case   13:  		/* stwx R9, <#[R10 + R11]> */
		/* 8212D6DCh case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212D6DCh case   13:*/		return 0x8212D6E0;
		  /* 8212D6E0h */ case   14:  		/* addi R11, R11, 4 */
		/* 8212D6E0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212D6E0h case   14:*/		return 0x8212D6E4;
		  /* 8212D6E4h */ case   15:  		/* bc 16, CR0_LT, -60 */
		/* 8212D6E4h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D6A8;  }
		/* 8212D6E4h case   15:*/		return 0x8212D6E8;
	}
	return 0x8212D6E8;
} // Block from 8212D6A8h-8212D6E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212D6E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D6E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D6E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D6E8);
		  /* 8212D6E8h */ case    0:  		/* li R3, 0 */
		/* 8212D6E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D6E8h case    0:*/		return 0x8212D6EC;
	}
	return 0x8212D6EC;
} // Block from 8212D6E8h-8212D6ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D6ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D6EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D6EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D6EC);
		  /* 8212D6ECh */ case    0:  		/* addi R1, R1, 160 */
		/* 8212D6ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8212D6ECh case    0:*/		return 0x8212D6F0;
		  /* 8212D6F0h */ case    1:  		/* lfd FR31, <#[R1 - 64]> */
		/* 8212D6F0h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8212D6F0h case    1:*/		return 0x8212D6F4;
		  /* 8212D6F4h */ case    2:  		/* b -640084 */
		/* 8212D6F4h case    2:*/		return 0x820912A0;
		/* 8212D6F4h case    2:*/		return 0x8212D6F8;
	}
	return 0x8212D6F8;
} // Block from 8212D6ECh-8212D6F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D6F8);
		  /* 8212D6F8h */ case    0:  		/* mfspr R12, LR */
		/* 8212D6F8h case    0:*/		regs.R12 = regs.LR;
		/* 8212D6F8h case    0:*/		return 0x8212D6FC;
		  /* 8212D6FCh */ case    1:  		/* bl -640220 */
		/* 8212D6FCh case    1:*/		regs.LR = 0x8212D700; return 0x82091220;
		/* 8212D6FCh case    1:*/		return 0x8212D700;
		  /* 8212D700h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 8212D700h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8212D700h case    2:*/		return 0x8212D704;
		  /* 8212D704h */ case    3:  		/* stwu R1, <#[R1 - 416]> */
		/* 8212D704h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 8212D704h case    3:*/		return 0x8212D708;
		  /* 8212D708h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 8212D708h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 8212D708h case    4:*/		return 0x8212D70C;
		  /* 8212D70Ch */ case    5:  		/* li R17, 0 */
		/* 8212D70Ch case    5:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 8212D70Ch case    5:*/		return 0x8212D710;
		  /* 8212D710h */ case    6:  		/* mr R21, R3 */
		/* 8212D710h case    6:*/		regs.R21 = regs.R3;
		/* 8212D710h case    6:*/		return 0x8212D714;
		  /* 8212D714h */ case    7:  		/* mr R14, R17 */
		/* 8212D714h case    7:*/		regs.R14 = regs.R17;
		/* 8212D714h case    7:*/		return 0x8212D718;
		  /* 8212D718h */ case    8:  		/* stw R17, <#[R1 + 80]> */
		/* 8212D718h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000050) );
		/* 8212D718h case    8:*/		return 0x8212D71C;
		  /* 8212D71Ch */ case    9:  		/* mr R15, R17 */
		/* 8212D71Ch case    9:*/		regs.R15 = regs.R17;
		/* 8212D71Ch case    9:*/		return 0x8212D720;
		  /* 8212D720h */ case   10:  		/* stw R17, <#[R1 + 84]> */
		/* 8212D720h case   10:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 8212D720h case   10:*/		return 0x8212D724;
		  /* 8212D724h */ case   11:  		/* lwz R11, <#[R4]> */
		/* 8212D724h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8212D724h case   11:*/		return 0x8212D728;
		  /* 8212D728h */ case   12:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 8212D728h case   12:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212D728h case   12:*/		return 0x8212D72C;
		  /* 8212D72Ch */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 8212D72Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x8212D738;  }
		/* 8212D72Ch case   13:*/		return 0x8212D730;
		  /* 8212D730h */ case   14:  		/* li R3, 0 */
		/* 8212D730h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212D730h case   14:*/		return 0x8212D734;
		  /* 8212D734h */ case   15:  		/* b 3744 */
		/* 8212D734h case   15:*/		return 0x8212E5D4;
		/* 8212D734h case   15:*/		return 0x8212D738;
	}
	return 0x8212D738;
} // Block from 8212D6F8h-8212D738h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212D738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D738);
		  /* 8212D738h */ case    0:  		/* lwz R10, <#[R21 + 260]> */
		/* 8212D738h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000104) );
		/* 8212D738h case    0:*/		return 0x8212D73C;
		  /* 8212D73Ch */ case    1:  		/* lis R7, 20480 */
		/* 8212D73Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R7,0x5000);
		/* 8212D73Ch case    1:*/		return 0x8212D740;
		  /* 8212D740h */ case    2:  		/* lis R9, 20512 */
		/* 8212D740h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0x5020);
		/* 8212D740h case    2:*/		return 0x8212D744;
		  /* 8212D744h */ case    3:  		/* lis R8, 28800 */
		/* 8212D744h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0x7080);
		/* 8212D744h case    3:*/		return 0x8212D748;
		  /* 8212D748h */ case    4:  		/* lwz R6, <#[R10]> */
		/* 8212D748h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8212D748h case    4:*/		return 0x8212D74C;
		  /* 8212D74Ch */ case    5:  		/* lwz R10, <#[R10 + 4]> */
		/* 8212D74Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8212D74Ch case    5:*/		return 0x8212D750;
		  /* 8212D750h */ case    6:  		/* rlwinm R16, R6, 0, 12, 31 */
		/* 8212D750h case    6:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R16,regs.R6);
		/* 8212D750h case    6:*/		return 0x8212D754;
		  /* 8212D754h */ case    7:  		/* rlwinm R6, R6, 0, 0, 11 */
		/* 8212D754h case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R6,regs.R6);
		/* 8212D754h case    7:*/		return 0x8212D758;
		  /* 8212D758h */ case    8:  		/* divwu R18, R10, R16 */
		/* 8212D758h case    8:*/		cpu::op::divwu<0>(regs,&regs.R18,regs.R10,regs.R16);
		/* 8212D758h case    8:*/		return 0x8212D75C;
		  /* 8212D75Ch */ case    9:  		/* twi 6, R16, 0 */
		/* 8212D75Ch case    9:*/		cpu::op::tw<6>(regs, 0x8212D75C, regs.R16, 0x00000000);
		/* 8212D75Ch case    9:*/		return 0x8212D760;
		  /* 8212D760h */ case   10:  		/* cmplw CR6, R6, R7 */
		/* 8212D760h case   10:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 8212D760h case   10:*/		return 0x8212D764;
		  /* 8212D764h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 8212D764h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212D77C;  }
		/* 8212D764h case   11:*/		return 0x8212D768;
		  /* 8212D768h */ case   12:  		/* cmplw CR6, R11, R9 */
		/* 8212D768h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212D768h case   12:*/		return 0x8212D76C;
		  /* 8212D76Ch */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8212D76Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212D77C;  }
		/* 8212D76Ch case   13:*/		return 0x8212D770;
		  /* 8212D770h */ case   14:  		/* cmplw CR6, R11, R8 */
		/* 8212D770h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8212D770h case   14:*/		return 0x8212D774;
		  /* 8212D774h */ case   15:  		/* mr R10, R17 */
		/* 8212D774h case   15:*/		regs.R10 = regs.R17;
		/* 8212D774h case   15:*/		return 0x8212D778;
		  /* 8212D778h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8212D778h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8212D780;  }
		/* 8212D778h case   16:*/		return 0x8212D77C;
	}
	return 0x8212D77C;
} // Block from 8212D738h-8212D77Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8212D77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D77C);
		  /* 8212D77Ch */ case    0:  		/* li R10, 1 */
		/* 8212D77Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8212D77Ch case    0:*/		return 0x8212D780;
	}
	return 0x8212D780;
} // Block from 8212D77Ch-8212D780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D780);
		  /* 8212D780h */ case    0:  		/* lis R7, 24656 */
		/* 8212D780h case    0:*/		cpu::op::lis<0>(regs,&regs.R7,0x6050);
		/* 8212D780h case    0:*/		return 0x8212D784;
		  /* 8212D784h */ case    1:  		/* mr R28, R17 */
		/* 8212D784h case    1:*/		regs.R28 = regs.R17;
		/* 8212D784h case    1:*/		return 0x8212D788;
		  /* 8212D788h */ case    2:  		/* cmplw CR6, R11, R7 */
		/* 8212D788h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8212D788h case    2:*/		return 0x8212D78C;
		  /* 8212D78Ch */ case    3:  		/* bc 12, CR6_EQ, 3580 */
		/* 8212D78Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8212E588;  }
		/* 8212D78Ch case    3:*/		return 0x8212D790;
		  /* 8212D790h */ case    4:  		/* lis R7, 24736 */
		/* 8212D790h case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0x60A0);
		/* 8212D790h case    4:*/		return 0x8212D794;
		  /* 8212D794h */ case    5:  		/* cmplw CR6, R11, R7 */
		/* 8212D794h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8212D794h case    5:*/		return 0x8212D798;
		  /* 8212D798h */ case    6:  		/* bc 12, CR6_EQ, 3568 */
		/* 8212D798h case    6:*/		if ( regs.CR[6].eq ) { return 0x8212E588;  }
		/* 8212D798h case    6:*/		return 0x8212D79C;
		  /* 8212D79Ch */ case    7:  		/* lis R7, 24816 */
		/* 8212D79Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R7,0x60F0);
		/* 8212D79Ch case    7:*/		return 0x8212D7A0;
		  /* 8212D7A0h */ case    8:  		/* cmplw CR6, R11, R7 */
		/* 8212D7A0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8212D7A0h case    8:*/		return 0x8212D7A4;
		  /* 8212D7A4h */ case    9:  		/* bc 12, CR6_EQ, 3556 */
		/* 8212D7A4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8212E588;  }
		/* 8212D7A4h case    9:*/		return 0x8212D7A8;
		  /* 8212D7A8h */ case   10:  		/* lis R7, 4352 */
		/* 8212D7A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R7,0x1100);
		/* 8212D7A8h case   10:*/		return 0x8212D7AC;
		  /* 8212D7ACh */ case   11:  		/* cmplw CR6, R11, R7 */
		/* 8212D7ACh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8212D7ACh case   11:*/		return 0x8212D7B0;
		  /* 8212D7B0h */ case   12:  		/* bc 12, CR6_EQ, 3544 */
		/* 8212D7B0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212E588;  }
		/* 8212D7B0h case   12:*/		return 0x8212D7B4;
		  /* 8212D7B4h */ case   13:  		/* cmpwi CR6, R10, 0 */
		/* 8212D7B4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8212D7B4h case   13:*/		return 0x8212D7B8;
		  /* 8212D7B8h */ case   14:  		/* bc 4, CR6_EQ, 2476 */
		/* 8212D7B8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8212E164;  }
		/* 8212D7B8h case   14:*/		return 0x8212D7BC;
		  /* 8212D7BCh */ case   15:  		/* mr R31, R17 */
		/* 8212D7BCh case   15:*/		regs.R31 = regs.R17;
		/* 8212D7BCh case   15:*/		return 0x8212D7C0;
		  /* 8212D7C0h */ case   16:  		/* li R19, -1 */
		/* 8212D7C0h case   16:*/		cpu::op::li<0>(regs,&regs.R19,0xFFFFFFFF);
		/* 8212D7C0h case   16:*/		return 0x8212D7C4;
		  /* 8212D7C4h */ case   17:  		/* cmplwi CR6, R18, 0 */
		/* 8212D7C4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212D7C4h case   17:*/		return 0x8212D7C8;
		  /* 8212D7C8h */ case   18:  		/* bc 12, CR6_EQ, 156 */
		/* 8212D7C8h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212D864;  }
		/* 8212D7C8h case   18:*/		return 0x8212D7CC;
		  /* 8212D7CCh */ case   19:  		/* mr R30, R17 */
		/* 8212D7CCh case   19:*/		regs.R30 = regs.R17;
		/* 8212D7CCh case   19:*/		return 0x8212D7D0;
		  /* 8212D7D0h */ case   20:  		/* addi R5, R1, 176 */
		/* 8212D7D0h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 8212D7D0h case   20:*/		return 0x8212D7D4;
		  /* 8212D7D4h */ case   21:  		/* stw R19, <#[R5]> */
		/* 8212D7D4h case   21:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R5 + 0x00000000) );
		/* 8212D7D4h case   21:*/		return 0x8212D7D8;
		  /* 8212D7D8h */ case   22:  		/* mr R8, R17 */
		/* 8212D7D8h case   22:*/		regs.R8 = regs.R17;
		/* 8212D7D8h case   22:*/		return 0x8212D7DC;
		  /* 8212D7DCh */ case   23:  		/* stw R19, <#[R5 + 4]> */
		/* 8212D7DCh case   23:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R5 + 0x00000004) );
		/* 8212D7DCh case   23:*/		return 0x8212D7E0;
		  /* 8212D7E0h */ case   24:  		/* cmplwi CR6, R16, 0 */
		/* 8212D7E0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8212D7E0h case   24:*/		return 0x8212D7E4;
		  /* 8212D7E4h */ case   25:  		/* stw R19, <#[R5 + 8]> */
		/* 8212D7E4h case   25:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R5 + 0x00000008) );
		/* 8212D7E4h case   25:*/		return 0x8212D7E8;
		  /* 8212D7E8h */ case   26:  		/* stw R19, <#[R5 + 12]> */
		/* 8212D7E8h case   26:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R5 + 0x0000000C) );
		/* 8212D7E8h case   26:*/		return 0x8212D7EC;
		  /* 8212D7ECh */ case   27:  		/* bc 12, CR6_EQ, 100 */
		/* 8212D7ECh case   27:*/		if ( regs.CR[6].eq ) { return 0x8212D850;  }
		/* 8212D7ECh case   27:*/		return 0x8212D7F0;
		  /* 8212D7F0h */ case   28:  		/* lwz R10, <#[R21 + 260]> */
		/* 8212D7F0h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000104) );
		/* 8212D7F0h case   28:*/		return 0x8212D7F4;
		  /* 8212D7F4h */ case   29:  		/* rlwinm R7, R31, 2, 0, 29 */
		/* 8212D7F4h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R31);
		/* 8212D7F4h case   29:*/		return 0x8212D7F8;
		  /* 8212D7F8h */ case   30:  		/* lwz R9, <#[R21 + 20]> */
		/* 8212D7F8h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000014) );
		/* 8212D7F8h case   30:*/		return 0x8212D7FC;
		  /* 8212D7FCh */ case   31:  		/* mr R11, R17 */
		/* 8212D7FCh case   31:*/		regs.R11 = regs.R17;
		/* 8212D7FCh case   31:*/		return 0x8212D800;
		  /* 8212D800h */ case   32:  		/* mtspr CTR, R16 */
		/* 8212D800h case   32:*/		regs.CTR = regs.R16;
		/* 8212D800h case   32:*/		return 0x8212D804;
		  /* 8212D804h */ case   33:  		/* lwz R6, <#[R10 + 16]> */
		/* 8212D804h case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000010) );
		/* 8212D804h case   33:*/		return 0x8212D808;
		  /* 8212D808h */ case   34:  		/* add R3, R30, R8 */
		/* 8212D808h case   34:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R8);
		/* 8212D808h case   34:*/		return 0x8212D80C;
		  /* 8212D80Ch */ case   35:  		/* lwzx R29, <#[R6 + R11]> */
		/* 8212D80Ch case   35:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8212D80Ch case   35:*/		return 0x8212D810;
		  /* 8212D810h */ case   36:  		/* lwz R27, <#[R10 + 8]> */
		/* 8212D810h case   36:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000008) );
		/* 8212D810h case   36:*/		return 0x8212D814;
		  /* 8212D814h */ case   37:  		/* addi R26, R1, 176 */
		/* 8212D814h case   37:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xB0);
		/* 8212D814h case   37:*/		return 0x8212D818;
		  /* 8212D818h */ case   38:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 8212D818h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 8212D818h case   38:*/		return 0x8212D81C;
		  /* 8212D81Ch */ case   39:  		/* rlwinm R29, R29, 2, 0, 29 */
		/* 8212D81Ch case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R29);
		/* 8212D81Ch case   39:*/		return 0x8212D820;
		  /* 8212D820h */ case   40:  		/* addi R8, R8, 1 */
		/* 8212D820h case   40:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8212D820h case   40:*/		return 0x8212D824;
		  /* 8212D824h */ case   41:  		/* addi R11, R11, 4 */
		/* 8212D824h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212D824h case   41:*/		return 0x8212D828;
		  /* 8212D828h */ case   42:  		/* lwzx R3, <#[R3 + R27]> */
		/* 8212D828h case   42:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R27 + 0x00000000) );
		/* 8212D828h case   42:*/		return 0x8212D82C;
		  /* 8212D82Ch */ case   43:  		/* lwzx R29, <#[R29 + R9]> */
		/* 8212D82Ch case   43:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R9 + 0x00000000) );
		/* 8212D82Ch case   43:*/		return 0x8212D830;
		  /* 8212D830h */ case   44:  		/* rlwinm R27, R3, 2, 0, 29 */
		/* 8212D830h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R3);
		/* 8212D830h case   44:*/		return 0x8212D834;
		  /* 8212D834h */ case   45:  		/* lwz R3, <#[R29 + 16]> */
		/* 8212D834h case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8212D834h case   45:*/		return 0x8212D838;
		  /* 8212D838h */ case   46:  		/* lwzx R29, <#[R27 + R9]> */
		/* 8212D838h case   46:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + regs.R9 + 0x00000000) );
		/* 8212D838h case   46:*/		return 0x8212D83C;
		  /* 8212D83Ch */ case   47:  		/* add R3, R3, R7 */
		/* 8212D83Ch case   47:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R7);
		/* 8212D83Ch case   47:*/		return 0x8212D840;
		  /* 8212D840h */ case   48:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 8212D840h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 8212D840h case   48:*/		return 0x8212D844;
		  /* 8212D844h */ case   49:  		/* lwz R29, <#[R29 + 16]> */
		/* 8212D844h case   49:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000010) );
		/* 8212D844h case   49:*/		return 0x8212D848;
		  /* 8212D848h */ case   50:  		/* stwx R29, <#[R3 + R26]> */
		/* 8212D848h case   50:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + regs.R26 + 0x00000000) );
		/* 8212D848h case   50:*/		return 0x8212D84C;
		  /* 8212D84Ch */ case   51:  		/* bc 16, CR0_LT, -68 */
		/* 8212D84Ch case   51:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212D808;  }
		/* 8212D84Ch case   51:*/		return 0x8212D850;
	}
	return 0x8212D850;
} // Block from 8212D780h-8212D850h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8212D850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D850);
		  /* 8212D850h */ case    0:  		/* addi R31, R31, 1 */
		/* 8212D850h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8212D850h case    0:*/		return 0x8212D854;
		  /* 8212D854h */ case    1:  		/* addi R5, R5, 16 */
		/* 8212D854h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x10);
		/* 8212D854h case    1:*/		return 0x8212D858;
		  /* 8212D858h */ case    2:  		/* add R30, R30, R16 */
		/* 8212D858h case    2:*/		cpu::op::add<0>(regs,&regs.R30,regs.R30,regs.R16);
		/* 8212D858h case    2:*/		return 0x8212D85C;
		  /* 8212D85Ch */ case    3:  		/* cmplw CR6, R31, R18 */
		/* 8212D85Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R18);
		/* 8212D85Ch case    3:*/		return 0x8212D860;
		  /* 8212D860h */ case    4:  		/* bc 12, CR6_LT, -140 */
		/* 8212D860h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212D7D4;  }
		/* 8212D860h case    4:*/		return 0x8212D864;
	}
	return 0x8212D864;
} // Block from 8212D850h-8212D864h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212D864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D864);
		  /* 8212D864h */ case    0:  		/* lwz R11, <#[R4 + 16]> */
		/* 8212D864h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8212D864h case    0:*/		return 0x8212D868;
	}
	return 0x8212D868;
} // Block from 8212D864h-8212D868h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212D868h
// Function '?EmitSize@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D868);
		  /* 8212D868h */ case    0:  		/* lwz R10, <#[R21 + 20]> */
		/* 8212D868h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000014) );
		/* 8212D868h case    0:*/		return 0x8212D86C;
		  /* 8212D86Ch */ case    1:  		/* lwz R9, <#[R21 + 16]> */
		/* 8212D86Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000010) );
		/* 8212D86Ch case    1:*/		return 0x8212D870;
		  /* 8212D870h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 8212D870h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212D870h case    2:*/		return 0x8212D874;
		  /* 8212D874h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212D874h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212D874h case    3:*/		return 0x8212D878;
		  /* 8212D878h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8212D878h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212D878h case    4:*/		return 0x8212D87C;
		  /* 8212D87Ch */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212D87Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212D87Ch case    5:*/		return 0x8212D880;
		  /* 8212D880h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212D880h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212D880h case    6:*/		return 0x8212D884;
		  /* 8212D884h */ case    7:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8212D884h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212D884h case    7:*/		return 0x8212D888;
		  /* 8212D888h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212D888h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212D888h case    8:*/		return 0x8212D88C;
		  /* 8212D88Ch */ case    9:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8212D88Ch case    9:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8212D88Ch case    9:*/		return 0x8212D890;
		  /* 8212D890h */ case   10:  		/* bc 12, CR0_EQ, 440 */
		/* 8212D890h case   10:*/		if ( regs.CR[0].eq ) { return 0x8212DA48;  }
		/* 8212D890h case   10:*/		return 0x8212D894;
		  /* 8212D894h */ case   11:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212D894h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212D894h case   11:*/		return 0x8212D898;
		  /* 8212D898h */ case   12:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8212D898h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8212D898h case   12:*/		return 0x8212D89C;
		  /* 8212D89Ch */ case   13:  		/* lwz R9, <#[R21]> */
		/* 8212D89Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000000) );
		/* 8212D89Ch case   13:*/		return 0x8212D8A0;
	}
	return 0x8212D8A0;
} // Block from 8212D868h-8212D8A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212D8A0h
// Function '?EmitObjectDCL@C30Program@D3DXShader@@MAAJPAVCArgument@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D8A0);
		  /* 8212D8A0h */ case    0:  		/* mr R3, R21 */
		/* 8212D8A0h case    0:*/		regs.R3 = regs.R21;
		/* 8212D8A0h case    0:*/		return 0x8212D8A4;
		  /* 8212D8A4h */ case    1:  		/* lwz R8, <#[R11 + 16]> */
		/* 8212D8A4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8212D8A4h case    1:*/		return 0x8212D8A8;
		  /* 8212D8A8h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212D8A8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212D8A8h case    2:*/		return 0x8212D8AC;
		  /* 8212D8ACh */ case    3:  		/* lwz R9, <#[R9 + 112]> */
		/* 8212D8ACh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000070) );
		/* 8212D8ACh case    3:*/		return 0x8212D8B0;
		  /* 8212D8B0h */ case    4:  		/* lwz R8, <#[R8]> */
		/* 8212D8B0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8212D8B0h case    4:*/		return 0x8212D8B4;
		  /* 8212D8B4h */ case    5:  		/* lwz R11, <#[R11]> */
		/* 8212D8B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212D8B4h case    5:*/		return 0x8212D8B8;
		  /* 8212D8B8h */ case    6:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212D8B8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212D8B8h case    6:*/		return 0x8212D8BC;
		  /* 8212D8BCh */ case    7:  		/* mtspr CTR, R9 */
		/* 8212D8BCh case    7:*/		regs.CTR = regs.R9;
		/* 8212D8BCh case    7:*/		return 0x8212D8C0;
		  /* 8212D8C0h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212D8C0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212D8C0h case    8:*/		return 0x8212D8C4;
		  /* 8212D8C4h */ case    9:  		/* lwzx R9, <#[R8 + R10]> */
		/* 8212D8C4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8212D8C4h case    9:*/		return 0x8212D8C8;
		  /* 8212D8C8h */ case   10:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8212D8C8h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212D8C8h case   10:*/		return 0x8212D8CC;
		  /* 8212D8CCh */ case   11:  		/* lwz R4, <#[R9 + 108]> */
		/* 8212D8CCh case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x0000006C) );
		/* 8212D8CCh case   11:*/		return 0x8212D8D0;
		  /* 8212D8D0h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8212D8D0h case   12:*/		if ( 1 ) { regs.LR = 0x8212D8D4; return (uint32)regs.CTR; }
		/* 8212D8D0h case   12:*/		return 0x8212D8D4;
		  /* 8212D8D4h */ case   13:  		/* mr R30, R3 */
		/* 8212D8D4h case   13:*/		regs.R30 = regs.R3;
		/* 8212D8D4h case   13:*/		return 0x8212D8D8;
		  /* 8212D8D8h */ case   14:  		/* cmplwi CR6, R3, 65535 */
		/* 8212D8D8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000FFFF);
		/* 8212D8D8h case   14:*/		return 0x8212D8DC;
		  /* 8212D8DCh */ case   15:  		/* bc 12, CR6_EQ, 484 */
		/* 8212D8DCh case   15:*/		if ( regs.CR[6].eq ) { return 0x8212DAC0;  }
		/* 8212D8DCh case   15:*/		return 0x8212D8E0;
		  /* 8212D8E0h */ case   16:  		/* cmplwi CR6, R3, 11 */
		/* 8212D8E0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000000B);
		/* 8212D8E0h case   16:*/		return 0x8212D8E4;
		  /* 8212D8E4h */ case   17:  		/* bc 4, CR6_EQ, 80 */
		/* 8212D8E4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8212D934;  }
		/* 8212D8E4h case   17:*/		return 0x8212D8E8;
		  /* 8212D8E8h */ case   18:  		/* lis R10, -32217 */
		/* 8212D8E8h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8212D8E8h case   18:*/		return 0x8212D8EC;
		  /* 8212D8ECh */ case   19:  		/* mr R11, R17 */
		/* 8212D8ECh case   19:*/		regs.R11 = regs.R17;
		/* 8212D8ECh case   19:*/		return 0x8212D8F0;
		  /* 8212D8F0h */ case   20:  		/* addi R9, R10, 15624 */
		/* 8212D8F0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x3D08);
		/* 8212D8F0h case   20:*/		return 0x8212D8F4;
		  /* 8212D8F4h */ case   21:  		/* addi R10, R1, 176 */
		/* 8212D8F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8212D8F4h case   21:*/		return 0x8212D8F8;
		  /* 8212D8F8h */ case   22:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8212D8F8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212D8F8h case   22:*/		return 0x8212D8FC;
		  /* 8212D8FCh */ case   23:  		/* cmpwi CR6, R10, -1 */
		/* 8212D8FCh case   23:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8212D8FCh case   23:*/		return 0x8212D900;
		  /* 8212D900h */ case   24:  		/* bc 12, CR6_EQ, 20 */
		/* 8212D900h case   24:*/		if ( regs.CR[6].eq ) { return 0x8212D914;  }
		/* 8212D900h case   24:*/		return 0x8212D904;
		  /* 8212D904h */ case   25:  		/* addi R8, R9, 64 */
		/* 8212D904h case   25:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x40);
		/* 8212D904h case   25:*/		return 0x8212D908;
		  /* 8212D908h */ case   26:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8212D908h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212D908h case   26:*/		return 0x8212D90C;
		  /* 8212D90Ch */ case   27:  		/* cmplw CR6, R10, R8 */
		/* 8212D90Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8212D90Ch case   27:*/		return 0x8212D910;
		  /* 8212D910h */ case   28:  		/* bc 4, CR6_EQ, 28 */
		/* 8212D910h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8212D92C;  }
		/* 8212D910h case   28:*/		return 0x8212D914;
	}
	return 0x8212D914;
} // Block from 8212D8A0h-8212D914h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212D914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D914);
		  /* 8212D914h */ case    0:  		/* addi R11, R11, 4 */
		/* 8212D914h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212D914h case    0:*/		return 0x8212D918;
		  /* 8212D918h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 8212D918h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8212D918h case    1:*/		return 0x8212D91C;
		  /* 8212D91Ch */ case    2:  		/* bc 12, CR6_LT, -40 */
		/* 8212D91Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8212D8F4;  }
		/* 8212D91Ch case    2:*/		return 0x8212D920;
		  /* 8212D920h */ case    3:  		/* li R11, 1 */
		/* 8212D920h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212D920h case    3:*/		return 0x8212D924;
		  /* 8212D924h */ case    4:  		/* cntlzw R11, R11 */
		/* 8212D924h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8212D924h case    4:*/		return 0x8212D928;
		  /* 8212D928h */ case    5:  		/* b 100 */
		/* 8212D928h case    5:*/		return 0x8212D98C;
		/* 8212D928h case    5:*/		return 0x8212D92C;
	}
	return 0x8212D92C;
} // Block from 8212D914h-8212D92Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212D92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D92C);
		  /* 8212D92Ch */ case    0:  		/* mr R11, R17 */
		/* 8212D92Ch case    0:*/		regs.R11 = regs.R17;
		/* 8212D92Ch case    0:*/		return 0x8212D930;
		  /* 8212D930h */ case    1:  		/* b -12 */
		/* 8212D930h case    1:*/		return 0x8212D924;
		/* 8212D930h case    1:*/		return 0x8212D934;
	}
	return 0x8212D934;
} // Block from 8212D92Ch-8212D934h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212D934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D934);
		  /* 8212D934h */ case    0:  		/* cmplwi CR6, R30, 13 */
		/* 8212D934h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000D);
		/* 8212D934h case    0:*/		return 0x8212D938;
		  /* 8212D938h */ case    1:  		/* bc 4, CR6_EQ, 96 */
		/* 8212D938h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212D998;  }
		/* 8212D938h case    1:*/		return 0x8212D93C;
		  /* 8212D93Ch */ case    2:  		/* lis R11, -32217 */
		/* 8212D93Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8212D93Ch case    2:*/		return 0x8212D940;
		  /* 8212D940h */ case    3:  		/* mr R6, R17 */
		/* 8212D940h case    3:*/		regs.R6 = regs.R17;
		/* 8212D940h case    3:*/		return 0x8212D944;
		  /* 8212D944h */ case    4:  		/* mr R8, R17 */
		/* 8212D944h case    4:*/		regs.R8 = regs.R17;
		/* 8212D944h case    4:*/		return 0x8212D948;
		  /* 8212D948h */ case    5:  		/* addi R7, R11, 15624 */
		/* 8212D948h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3D08);
		/* 8212D948h case    5:*/		return 0x8212D94C;
		  /* 8212D94Ch */ case    6:  		/* mr R11, R17 */
		/* 8212D94Ch case    6:*/		regs.R11 = regs.R17;
		/* 8212D94Ch case    6:*/		return 0x8212D950;
		  /* 8212D950h */ case    7:  		/* addi R9, R1, 176 */
		/* 8212D950h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xB0);
		/* 8212D950h case    7:*/		return 0x8212D954;
		  /* 8212D954h */ case    8:  		/* lwz R10, <#[R9]> */
		/* 8212D954h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8212D954h case    8:*/		return 0x8212D958;
		  /* 8212D958h */ case    9:  		/* cmpwi CR6, R10, -1 */
		/* 8212D958h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8212D958h case    9:*/		return 0x8212D95C;
		  /* 8212D95Ch */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 8212D95Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8212D974;  }
		/* 8212D95Ch case   10:*/		return 0x8212D960;
		  /* 8212D960h */ case   11:  		/* add R5, R8, R11 */
		/* 8212D960h case   11:*/		cpu::op::add<0>(regs,&regs.R5,regs.R8,regs.R11);
		/* 8212D960h case   11:*/		return 0x8212D964;
		  /* 8212D964h */ case   12:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 8212D964h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 8212D964h case   12:*/		return 0x8212D968;
		  /* 8212D968h */ case   13:  		/* lwzx R5, <#[R5 + R7]> */
		/* 8212D968h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 8212D968h case   13:*/		return 0x8212D96C;
		  /* 8212D96Ch */ case   14:  		/* cmplw CR6, R10, R5 */
		/* 8212D96Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 8212D96Ch case   14:*/		return 0x8212D970;
		  /* 8212D970h */ case   15:  		/* bc 4, CR6_EQ, 200 */
		/* 8212D970h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8212DA38;  }
		/* 8212D970h case   15:*/		return 0x8212D974;
	}
	return 0x8212D974;
} // Block from 8212D934h-8212D974h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212D974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D974);
		  /* 8212D974h */ case    0:  		/* addi R11, R11, 1 */
		/* 8212D974h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212D974h case    0:*/		return 0x8212D978;
		  /* 8212D978h */ case    1:  		/* addi R9, R9, 4 */
		/* 8212D978h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212D978h case    1:*/		return 0x8212D97C;
		  /* 8212D97Ch */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 8212D97Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212D97Ch case    2:*/		return 0x8212D980;
		  /* 8212D980h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212D980h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212D954;  }
		/* 8212D980h case    3:*/		return 0x8212D984;
		  /* 8212D984h */ case    4:  		/* li R6, 1 */
		/* 8212D984h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8212D984h case    4:*/		return 0x8212D988;
		  /* 8212D988h */ case    5:  		/* cntlzw R11, R6 */
		/* 8212D988h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R6);
		/* 8212D988h case    5:*/		return 0x8212D98C;
	}
	return 0x8212D98C;
} // Block from 8212D974h-8212D98Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212D98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D98C);
		  /* 8212D98Ch */ case    0:  		/* rlwinm R28, R11, 27, 31, 31 */
		/* 8212D98Ch case    0:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R11);
		/* 8212D98Ch case    0:*/		return 0x8212D990;
		  /* 8212D990h */ case    1:  		/* cmpwi CR6, R28, 0 */
		/* 8212D990h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8212D990h case    1:*/		return 0x8212D994;
		  /* 8212D994h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8212D994h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212D9A4;  }
		/* 8212D994h case    2:*/		return 0x8212D998;
	}
	return 0x8212D998;
} // Block from 8212D98Ch-8212D998h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D998);
		  /* 8212D998h */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 8212D998h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 8212D998h case    0:*/		return 0x8212D99C;
		  /* 8212D99Ch */ case    1:  		/* rlwinm. R11, R11, 0, 11, 15 */
		/* 8212D99Ch case    1:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R11,regs.R11);
		/* 8212D99Ch case    1:*/		return 0x8212D9A0;
		  /* 8212D9A0h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8212D9A0h case    2:*/		if ( regs.CR[0].eq ) { return 0x8212D9C0;  }
		/* 8212D9A0h case    2:*/		return 0x8212D9A4;
	}
	return 0x8212D9A4;
} // Block from 8212D998h-8212D9A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212D9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D9A4);
		  /* 8212D9A4h */ case    0:  		/* mr R5, R16 */
		/* 8212D9A4h case    0:*/		regs.R5 = regs.R16;
		/* 8212D9A4h case    0:*/		return 0x8212D9A8;
		  /* 8212D9A8h */ case    1:  		/* addi R4, R1, 80 */
		/* 8212D9A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8212D9A8h case    1:*/		return 0x8212D9AC;
		  /* 8212D9ACh */ case    2:  		/* mr R3, R21 */
		/* 8212D9ACh case    2:*/		regs.R3 = regs.R21;
		/* 8212D9ACh case    2:*/		return 0x8212D9B0;
		  /* 8212D9B0h */ case    3:  		/* bl -1112 */
		/* 8212D9B0h case    3:*/		regs.LR = 0x8212D9B4; return 0x8212D558;
		/* 8212D9B0h case    3:*/		return 0x8212D9B4;
		  /* 8212D9B4h */ case    4:  		/* lwz R14, <#[R1 + 80]> */
		/* 8212D9B4h case    4:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000050) );
		/* 8212D9B4h case    4:*/		return 0x8212D9B8;
		  /* 8212D9B8h */ case    5:  		/* or. R31, R3, R3 */
		/* 8212D9B8h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212D9B8h case    5:*/		return 0x8212D9BC;
		  /* 8212D9BCh */ case    6:  		/* bc 12, CR0_LT, 3044 */
		/* 8212D9BCh case    6:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212D9BCh case    6:*/		return 0x8212D9C0;
	}
	return 0x8212D9C0;
} // Block from 8212D9A4h-8212D9C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212D9C0h
// Function '?EmitDCL@CPSProgram@D3DXShader@@MAAJPAVCArgument@2@PAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D9C0);
		  /* 8212D9C0h */ case    0:  		/* addi R11, R1, 96 */
		/* 8212D9C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8212D9C0h case    0:*/		return 0x8212D9C4;
		  /* 8212D9C4h */ case    1:  		/* addi R4, R1, 96 */
		/* 8212D9C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212D9C4h case    1:*/		return 0x8212D9C8;
		  /* 8212D9C8h */ case    2:  		/* addi R3, R1, 176 */
		/* 8212D9C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 8212D9C8h case    2:*/		return 0x8212D9CC;
		  /* 8212D9CCh */ case    3:  		/* std R17, <#[R11]> */
		/* 8212D9CCh case    3:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212D9CCh case    3:*/		return 0x8212D9D0;
		  /* 8212D9D0h */ case    4:  		/* std R17, <#[R11 + 8]> */
		/* 8212D9D0h case    4:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000008) );
		/* 8212D9D0h case    4:*/		return 0x8212D9D4;
		  /* 8212D9D4h */ case    5:  		/* bl -1892 */
		/* 8212D9D4h case    5:*/		regs.LR = 0x8212D9D8; return 0x8212D270;
		/* 8212D9D4h case    5:*/		return 0x8212D9D8;
		  /* 8212D9D8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8212D9D8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212D9D8h case    6:*/		return 0x8212D9DC;
		  /* 8212D9DCh */ case    7:  		/* bc 4, CR0_EQ, 24 */
		/* 8212D9DCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x8212D9F4;  }
		/* 8212D9DCh case    7:*/		return 0x8212D9E0;
		  /* 8212D9E0h */ case    8:  		/* cmplwi CR6, R30, 13 */
		/* 8212D9E0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000D);
		/* 8212D9E0h case    8:*/		return 0x8212D9E4;
		  /* 8212D9E4h */ case    9:  		/* bc 4, CR6_EQ, 220 */
		/* 8212D9E4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8212DAC0;  }
		/* 8212D9E4h case    9:*/		return 0x8212D9E8;
		  /* 8212D9E8h */ case   10:  		/* lwz R11, <#[R1 + 176]> */
		/* 8212D9E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212D9E8h case   10:*/		return 0x8212D9EC;
		  /* 8212D9ECh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8212D9ECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212D9ECh case   11:*/		return 0x8212D9F0;
		  /* 8212D9F0h */ case   12:  		/* bc 4, CR6_EQ, 208 */
		/* 8212D9F0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212DAC0;  }
		/* 8212D9F0h case   12:*/		return 0x8212D9F4;
	}
	return 0x8212D9F4;
} // Block from 8212D9C0h-8212D9F4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212D9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212D9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212D9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212D9F4);
		  /* 8212D9F4h */ case    0:  		/* mr R6, R16 */
		/* 8212D9F4h case    0:*/		regs.R6 = regs.R16;
		/* 8212D9F4h case    0:*/		return 0x8212D9F8;
		  /* 8212D9F8h */ case    1:  		/* mr R5, R18 */
		/* 8212D9F8h case    1:*/		regs.R5 = regs.R18;
		/* 8212D9F8h case    1:*/		return 0x8212D9FC;
		  /* 8212D9FCh */ case    2:  		/* addi R4, R1, 96 */
		/* 8212D9FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212D9FCh case    2:*/		return 0x8212DA00;
		  /* 8212DA00h */ case    3:  		/* mr R3, R21 */
		/* 8212DA00h case    3:*/		regs.R3 = regs.R21;
		/* 8212DA00h case    3:*/		return 0x8212DA04;
		  /* 8212DA04h */ case    4:  		/* bl -266380 */
		/* 8212DA04h case    4:*/		regs.LR = 0x8212DA08; return 0x820EC978;
		/* 8212DA04h case    4:*/		return 0x8212DA08;
		  /* 8212DA08h */ case    5:  		/* or. R31, R3, R3 */
		/* 8212DA08h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DA08h case    5:*/		return 0x8212DA0C;
		  /* 8212DA0Ch */ case    6:  		/* bc 12, CR0_LT, 2964 */
		/* 8212DA0Ch case    6:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DA0Ch case    6:*/		return 0x8212DA10;
		  /* 8212DA10h */ case    7:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212DA10h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DA10h case    7:*/		return 0x8212DA14;
		  /* 8212DA14h */ case    8:  		/* cmplwi CR6, R14, 0 */
		/* 8212DA14h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 8212DA14h case    8:*/		return 0x8212DA18;
		  /* 8212DA18h */ case    9:  		/* stw R17, <#[R11]> */
		/* 8212DA18h case    9:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212DA18h case    9:*/		return 0x8212DA1C;
		  /* 8212DA1Ch */ case   10:  		/* bc 12, CR6_EQ, 2996 */
		/* 8212DA1Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8212E5D0;  }
		/* 8212DA1Ch case   10:*/		return 0x8212DA20;
		  /* 8212DA20h */ case   11:  		/* mr R4, R14 */
		/* 8212DA20h case   11:*/		regs.R4 = regs.R14;
		/* 8212DA20h case   11:*/		return 0x8212DA24;
		  /* 8212DA24h */ case   12:  		/* mr R3, R21 */
		/* 8212DA24h case   12:*/		regs.R3 = regs.R21;
		/* 8212DA24h case   12:*/		return 0x8212DA28;
		  /* 8212DA28h */ case   13:  		/* bl -199024 */
		/* 8212DA28h case   13:*/		regs.LR = 0x8212DA2C; return 0x820FD0B8;
		/* 8212DA28h case   13:*/		return 0x8212DA2C;
		  /* 8212DA2Ch */ case   14:  		/* or. R31, R3, R3 */
		/* 8212DA2Ch case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DA2Ch case   14:*/		return 0x8212DA30;
		  /* 8212DA30h */ case   15:  		/* bc 12, CR0_LT, 2928 */
		/* 8212DA30h case   15:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DA30h case   15:*/		return 0x8212DA34;
		  /* 8212DA34h */ case   16:  		/* b 2972 */
		/* 8212DA34h case   16:*/		return 0x8212E5D0;
		/* 8212DA34h case   16:*/		return 0x8212DA38;
	}
	return 0x8212DA38;
} // Block from 8212D9F4h-8212DA38h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8212DA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DA38);
		  /* 8212DA38h */ case    0:  		/* addi R8, R8, 4 */
		/* 8212DA38h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8212DA38h case    0:*/		return 0x8212DA3C;
		  /* 8212DA3Ch */ case    1:  		/* cmplwi CR6, R8, 16 */
		/* 8212DA3Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000010);
		/* 8212DA3Ch case    1:*/		return 0x8212DA40;
		  /* 8212DA40h */ case    2:  		/* bc 12, CR6_LT, -244 */
		/* 8212DA40h case    2:*/		if ( regs.CR[6].lt ) { return 0x8212D94C;  }
		/* 8212DA40h case    2:*/		return 0x8212DA44;
		  /* 8212DA44h */ case    3:  		/* b -188 */
		/* 8212DA44h case    3:*/		return 0x8212D988;
		/* 8212DA44h case    3:*/		return 0x8212DA48;
	}
	return 0x8212DA48;
} // Block from 8212DA38h-8212DA48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212DA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DA48);
		  /* 8212DA48h */ case    0:  		/* mr R6, R17 */
		/* 8212DA48h case    0:*/		regs.R6 = regs.R17;
		/* 8212DA48h case    0:*/		return 0x8212DA4C;
		  /* 8212DA4Ch */ case    1:  		/* cmplwi CR6, R18, 0 */
		/* 8212DA4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212DA4Ch case    1:*/		return 0x8212DA50;
		  /* 8212DA50h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 8212DA50h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212DAC0;  }
		/* 8212DA50h case    2:*/		return 0x8212DA54;
		  /* 8212DA54h */ case    3:  		/* lis R11, -32217 */
		/* 8212DA54h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8212DA54h case    3:*/		return 0x8212DA58;
		  /* 8212DA58h */ case    4:  		/* addi R7, R1, 176 */
		/* 8212DA58h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 8212DA58h case    4:*/		return 0x8212DA5C;
		  /* 8212DA5Ch */ case    5:  		/* addi R5, R11, 15624 */
		/* 8212DA5Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x3D08);
		/* 8212DA5Ch case    5:*/		return 0x8212DA60;
		  /* 8212DA60h */ case    6:  		/* mr R8, R17 */
		/* 8212DA60h case    6:*/		regs.R8 = regs.R17;
		/* 8212DA60h case    6:*/		return 0x8212DA64;
		  /* 8212DA64h */ case    7:  		/* mr R11, R17 */
		/* 8212DA64h case    7:*/		regs.R11 = regs.R17;
		/* 8212DA64h case    7:*/		return 0x8212DA68;
		  /* 8212DA68h */ case    8:  		/* mr R9, R7 */
		/* 8212DA68h case    8:*/		regs.R9 = regs.R7;
		/* 8212DA68h case    8:*/		return 0x8212DA6C;
		  /* 8212DA6Ch */ case    9:  		/* lwz R10, <#[R9]> */
		/* 8212DA6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8212DA6Ch case    9:*/		return 0x8212DA70;
		  /* 8212DA70h */ case   10:  		/* cmpwi CR6, R10, -1 */
		/* 8212DA70h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8212DA70h case   10:*/		return 0x8212DA74;
		  /* 8212DA74h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 8212DA74h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212DA8C;  }
		/* 8212DA74h case   11:*/		return 0x8212DA78;
		  /* 8212DA78h */ case   12:  		/* add R4, R8, R11 */
		/* 8212DA78h case   12:*/		cpu::op::add<0>(regs,&regs.R4,regs.R8,regs.R11);
		/* 8212DA78h case   12:*/		return 0x8212DA7C;
		  /* 8212DA7Ch */ case   13:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 8212DA7Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 8212DA7Ch case   13:*/		return 0x8212DA80;
		  /* 8212DA80h */ case   14:  		/* lwzx R4, <#[R4 + R5]> */
		/* 8212DA80h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R5 + 0x00000000) );
		/* 8212DA80h case   14:*/		return 0x8212DA84;
		  /* 8212DA84h */ case   15:  		/* cmplw CR6, R10, R4 */
		/* 8212DA84h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 8212DA84h case   15:*/		return 0x8212DA88;
		  /* 8212DA88h */ case   16:  		/* bc 4, CR6_EQ, 40 */
		/* 8212DA88h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8212DAB0;  }
		/* 8212DA88h case   16:*/		return 0x8212DA8C;
	}
	return 0x8212DA8C;
} // Block from 8212DA48h-8212DA8Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8212DA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DA8C);
		  /* 8212DA8Ch */ case    0:  		/* addi R11, R11, 1 */
		/* 8212DA8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212DA8Ch case    0:*/		return 0x8212DA90;
		  /* 8212DA90h */ case    1:  		/* addi R9, R9, 4 */
		/* 8212DA90h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212DA90h case    1:*/		return 0x8212DA94;
		  /* 8212DA94h */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 8212DA94h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212DA94h case    2:*/		return 0x8212DA98;
		  /* 8212DA98h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212DA98h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DA6C;  }
		/* 8212DA98h case    3:*/		return 0x8212DA9C;
		  /* 8212DA9Ch */ case    4:  		/* addi R6, R6, 1 */
		/* 8212DA9Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8212DA9Ch case    4:*/		return 0x8212DAA0;
		  /* 8212DAA0h */ case    5:  		/* addi R7, R7, 16 */
		/* 8212DAA0h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x10);
		/* 8212DAA0h case    5:*/		return 0x8212DAA4;
		  /* 8212DAA4h */ case    6:  		/* cmplw CR6, R6, R18 */
		/* 8212DAA4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R18);
		/* 8212DAA4h case    6:*/		return 0x8212DAA8;
		  /* 8212DAA8h */ case    7:  		/* bc 12, CR6_LT, -72 */
		/* 8212DAA8h case    7:*/		if ( regs.CR[6].lt ) { return 0x8212DA60;  }
		/* 8212DAA8h case    7:*/		return 0x8212DAAC;
		  /* 8212DAACh */ case    8:  		/* b 20 */
		/* 8212DAACh case    8:*/		return 0x8212DAC0;
		/* 8212DAACh case    8:*/		return 0x8212DAB0;
	}
	return 0x8212DAB0;
} // Block from 8212DA8Ch-8212DAB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212DAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DAB0);
		  /* 8212DAB0h */ case    0:  		/* addi R8, R8, 4 */
		/* 8212DAB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8212DAB0h case    0:*/		return 0x8212DAB4;
		  /* 8212DAB4h */ case    1:  		/* cmplwi CR6, R8, 32 */
		/* 8212DAB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000020);
		/* 8212DAB4h case    1:*/		return 0x8212DAB8;
		  /* 8212DAB8h */ case    2:  		/* bc 12, CR6_LT, -84 */
		/* 8212DAB8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8212DA64;  }
		/* 8212DAB8h case    2:*/		return 0x8212DABC;
		  /* 8212DABCh */ case    3:  		/* li R28, 1 */
		/* 8212DABCh case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8212DABCh case    3:*/		return 0x8212DAC0;
	}
	return 0x8212DAC0;
} // Block from 8212DAB0h-8212DAC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212DAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DAC0);
		  /* 8212DAC0h */ case    0:  		/* lwz R8, <#[R21 + 260]> */
		/* 8212DAC0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DAC0h case    0:*/		return 0x8212DAC4;
		  /* 8212DAC4h */ case    1:  		/* lis R10, 4304 */
		/* 8212DAC4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x10D0);
		/* 8212DAC4h case    1:*/		return 0x8212DAC8;
		  /* 8212DAC8h */ case    2:  		/* lwz R11, <#[R8]> */
		/* 8212DAC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8212DAC8h case    2:*/		return 0x8212DACC;
		  /* 8212DACCh */ case    3:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212DACCh case    3:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212DACCh case    3:*/		return 0x8212DAD0;
		  /* 8212DAD0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8212DAD0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212DAD0h case    4:*/		return 0x8212DAD4;
		  /* 8212DAD4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 8212DAD4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212DAE4;  }
		/* 8212DAD4h case    5:*/		return 0x8212DAD8;
		  /* 8212DAD8h */ case    6:  		/* lis R10, 4320 */
		/* 8212DAD8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x10E0);
		/* 8212DAD8h case    6:*/		return 0x8212DADC;
		  /* 8212DADCh */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8212DADCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212DADCh case    7:*/		return 0x8212DAE0;
		  /* 8212DAE0h */ case    8:  		/* bc 4, CR6_EQ, 444 */
		/* 8212DAE0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8212DC9C;  }
		/* 8212DAE0h case    8:*/		return 0x8212DAE4;
	}
	return 0x8212DAE4;
} // Block from 8212DAC0h-8212DAE4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212DAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DAE4);
		  /* 8212DAE4h */ case    0:  		/* lwz R9, <#[R8 + 4]> */
		/* 8212DAE4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 8212DAE4h case    0:*/		return 0x8212DAE8;
		  /* 8212DAE8h */ case    1:  		/* mr R7, R17 */
		/* 8212DAE8h case    1:*/		regs.R7 = regs.R17;
		/* 8212DAE8h case    1:*/		return 0x8212DAEC;
		  /* 8212DAECh */ case    2:  		/* mr R10, R17 */
		/* 8212DAECh case    2:*/		regs.R10 = regs.R17;
		/* 8212DAECh case    2:*/		return 0x8212DAF0;
		  /* 8212DAF0h */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 8212DAF0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8212DAF0h case    3:*/		return 0x8212DAF4;
		  /* 8212DAF4h */ case    4:  		/* bc 12, CR6_EQ, 424 */
		/* 8212DAF4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212DC9C;  }
		/* 8212DAF4h case    4:*/		return 0x8212DAF8;
		  /* 8212DAF8h */ case    5:  		/* lwz R6, <#[R21 + 20]> */
		/* 8212DAF8h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R21 + 0x00000014) );
		/* 8212DAF8h case    5:*/		return 0x8212DAFC;
		  /* 8212DAFCh */ case    6:  		/* mr R11, R17 */
		/* 8212DAFCh case    6:*/		regs.R11 = regs.R17;
		/* 8212DAFCh case    6:*/		return 0x8212DB00;
		  /* 8212DB00h */ case    7:  		/* lwz R5, <#[R8 + 8]> */
		/* 8212DB00h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000008) );
		/* 8212DB00h case    7:*/		return 0x8212DB04;
		  /* 8212DB04h */ case    8:  		/* lwzx R5, <#[R5 + R11]> */
		/* 8212DB04h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8212DB04h case    8:*/		return 0x8212DB08;
		  /* 8212DB08h */ case    9:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 8212DB08h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 8212DB08h case    9:*/		return 0x8212DB0C;
		  /* 8212DB0Ch */ case   10:  		/* lwzx R5, <#[R5 + R6]> */
		/* 8212DB0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R6 + 0x00000000) );
		/* 8212DB0Ch case   10:*/		return 0x8212DB10;
		  /* 8212DB10h */ case   11:  		/* lwz R5, <#[R5 + 60]> */
		/* 8212DB10h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000003C) );
		/* 8212DB10h case   11:*/		return 0x8212DB14;
		  /* 8212DB14h */ case   12:  		/* rlwinm. R5, R5, 0, 11, 15 */
		/* 8212DB14h case   12:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R5,regs.R5);
		/* 8212DB14h case   12:*/		return 0x8212DB18;
		  /* 8212DB18h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 8212DB18h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212DB20;  }
		/* 8212DB18h case   13:*/		return 0x8212DB1C;
		  /* 8212DB1Ch */ case   14:  		/* li R7, 1 */
		/* 8212DB1Ch case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8212DB1Ch case   14:*/		return 0x8212DB20;
	}
	return 0x8212DB20;
} // Block from 8212DAE4h-8212DB20h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212DB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DB20);
		  /* 8212DB20h */ case    0:  		/* addi R10, R10, 1 */
		/* 8212DB20h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212DB20h case    0:*/		return 0x8212DB24;
		  /* 8212DB24h */ case    1:  		/* addi R11, R11, 4 */
		/* 8212DB24h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212DB24h case    1:*/		return 0x8212DB28;
		  /* 8212DB28h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 8212DB28h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8212DB28h case    2:*/		return 0x8212DB2C;
		  /* 8212DB2Ch */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212DB2Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DB00;  }
		/* 8212DB2Ch case    3:*/		return 0x8212DB30;
		  /* 8212DB30h */ case    4:  		/* cmpwi CR6, R7, 0 */
		/* 8212DB30h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8212DB30h case    4:*/		return 0x8212DB34;
		  /* 8212DB34h */ case    5:  		/* bc 12, CR6_EQ, 360 */
		/* 8212DB34h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212DC9C;  }
		/* 8212DB34h case    5:*/		return 0x8212DB38;
		  /* 8212DB38h */ case    6:  		/* lwz R7, <#[R21 + 8]> */
		/* 8212DB38h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 8212DB38h case    6:*/		return 0x8212DB3C;
		  /* 8212DB3Ch */ case    7:  		/* mr R29, R17 */
		/* 8212DB3Ch case    7:*/		regs.R29 = regs.R17;
		/* 8212DB3Ch case    7:*/		return 0x8212DB40;
		  /* 8212DB40h */ case    8:  		/* mr R9, R17 */
		/* 8212DB40h case    8:*/		regs.R9 = regs.R17;
		/* 8212DB40h case    8:*/		return 0x8212DB44;
		  /* 8212DB44h */ case    9:  		/* cmplwi CR6, R7, 0 */
		/* 8212DB44h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8212DB44h case    9:*/		return 0x8212DB48;
		  /* 8212DB48h */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 8212DB48h case   10:*/		if ( regs.CR[6].eq ) { return 0x8212DB84;  }
		/* 8212DB48h case   10:*/		return 0x8212DB4C;
		  /* 8212DB4Ch */ case   11:  		/* lwz R8, <#[R21 + 136]> */
		/* 8212DB4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000088) );
		/* 8212DB4Ch case   11:*/		return 0x8212DB50;
		  /* 8212DB50h */ case   12:  		/* mr R10, R17 */
		/* 8212DB50h case   12:*/		regs.R10 = regs.R17;
		/* 8212DB50h case   12:*/		return 0x8212DB54;
		  /* 8212DB54h */ case   13:  		/* lwzx R11, <#[R6 + R10]> */
		/* 8212DB54h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 8212DB54h case   13:*/		return 0x8212DB58;
		  /* 8212DB58h */ case   14:  		/* lwz R5, <#[R11 + 4]> */
		/* 8212DB58h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 8212DB58h case   14:*/		return 0x8212DB5C;
		  /* 8212DB5Ch */ case   15:  		/* cmplw CR6, R8, R5 */
		/* 8212DB5Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R5);
		/* 8212DB5Ch case   15:*/		return 0x8212DB60;
		  /* 8212DB60h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 8212DB60h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8212DB74;  }
		/* 8212DB60h case   16:*/		return 0x8212DB64;
		  /* 8212DB64h */ case   17:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212DB64h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212DB64h case   17:*/		return 0x8212DB68;
		  /* 8212DB68h */ case   18:  		/* cmplw CR6, R11, R29 */
		/* 8212DB68h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8212DB68h case   18:*/		return 0x8212DB6C;
		  /* 8212DB6Ch */ case   19:  		/* bc 12, CR6_LT, 8 */
		/* 8212DB6Ch case   19:*/		if ( regs.CR[6].lt ) { return 0x8212DB74;  }
		/* 8212DB6Ch case   19:*/		return 0x8212DB70;
		  /* 8212DB70h */ case   20:  		/* addi R29, R11, 1 */
		/* 8212DB70h case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 8212DB70h case   20:*/		return 0x8212DB74;
	}
	return 0x8212DB74;
} // Block from 8212DB20h-8212DB74h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8212DB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DB74);
		  /* 8212DB74h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212DB74h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212DB74h case    0:*/		return 0x8212DB78;
		  /* 8212DB78h */ case    1:  		/* addi R10, R10, 4 */
		/* 8212DB78h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212DB78h case    1:*/		return 0x8212DB7C;
		  /* 8212DB7Ch */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 8212DB7Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 8212DB7Ch case    2:*/		return 0x8212DB80;
		  /* 8212DB80h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212DB80h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DB54;  }
		/* 8212DB80h case    3:*/		return 0x8212DB84;
	}
	return 0x8212DB84;
} // Block from 8212DB74h-8212DB84h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212DB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DB84);
		  /* 8212DB84h */ case    0:  		/* lis R11, -32256 */
		/* 8212DB84h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8212DB84h case    0:*/		return 0x8212DB88;
		  /* 8212DB88h */ case    1:  		/* mr R31, R17 */
		/* 8212DB88h case    1:*/		regs.R31 = regs.R17;
		/* 8212DB88h case    1:*/		return 0x8212DB8C;
		  /* 8212DB8Ch */ case    2:  		/* addi R30, R1, 240 */
		/* 8212DB8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xF0);
		/* 8212DB8Ch case    2:*/		return 0x8212DB90;
		  /* 8212DB90h */ case    3:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8212DB90h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8212DB90h case    3:*/		return 0x8212DB94;
		  /* 8212DB94h */ case    4:  		/* mr R6, R31 */
		/* 8212DB94h case    4:*/		regs.R6 = regs.R31;
		/* 8212DB94h case    4:*/		return 0x8212DB98;
		  /* 8212DB98h */ case    5:  		/* lwz R4, <#[R21 + 136]> */
		/* 8212DB98h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000088) );
		/* 8212DB98h case    5:*/		return 0x8212DB9C;
		  /* 8212DB9Ch */ case    6:  		/* mr R5, R29 */
		/* 8212DB9Ch case    6:*/		regs.R5 = regs.R29;
		/* 8212DB9Ch case    6:*/		return 0x8212DBA0;
		  /* 8212DBA0h */ case    7:  		/* fmr FR1, FR31 */
		/* 8212DBA0h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8212DBA0h case    7:*/		return 0x8212DBA4;
		  /* 8212DBA4h */ case    8:  		/* mr R3, R21 */
		/* 8212DBA4h case    8:*/		regs.R3 = regs.R21;
		/* 8212DBA4h case    8:*/		return 0x8212DBA8;
		  /* 8212DBA8h */ case    9:  		/* bl -199040 */
		/* 8212DBA8h case    9:*/		regs.LR = 0x8212DBAC; return 0x820FD228;
		/* 8212DBA8h case    9:*/		return 0x8212DBAC;
		  /* 8212DBACh */ case   10:  		/* stw R3, <#[R30]> */
		/* 8212DBACh case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8212DBACh case   10:*/		return 0x8212DBB0;
		  /* 8212DBB0h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 8212DBB0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8212DBB0h case   11:*/		return 0x8212DBB4;
		  /* 8212DBB4h */ case   12:  		/* bc 12, CR6_EQ, 60 */
		/* 8212DBB4h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212DBF0;  }
		/* 8212DBB4h case   12:*/		return 0x8212DBB8;
		  /* 8212DBB8h */ case   13:  		/* addi R31, R31, 1 */
		/* 8212DBB8h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8212DBB8h case   13:*/		return 0x8212DBBC;
		  /* 8212DBBCh */ case   14:  		/* addi R30, R30, 4 */
		/* 8212DBBCh case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212DBBCh case   14:*/		return 0x8212DBC0;
		  /* 8212DBC0h */ case   15:  		/* cmplwi CR6, R31, 4 */
		/* 8212DBC0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 8212DBC0h case   15:*/		return 0x8212DBC4;
		  /* 8212DBC4h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 8212DBC4h case   16:*/		if ( regs.CR[6].lt ) { return 0x8212DB94;  }
		/* 8212DBC4h case   16:*/		return 0x8212DBC8;
		  /* 8212DBC8h */ case   17:  		/* li R3, 116 */
		/* 8212DBC8h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212DBC8h case   17:*/		return 0x8212DBCC;
		  /* 8212DBCCh */ case   18:  		/* bl -202292 */
		/* 8212DBCCh case   18:*/		regs.LR = 0x8212DBD0; return 0x820FC598;
		/* 8212DBCCh case   18:*/		return 0x8212DBD0;
		  /* 8212DBD0h */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 8212DBD0h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212DBD0h case   19:*/		return 0x8212DBD4;
		  /* 8212DBD4h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 8212DBD4h case   20:*/		if ( regs.CR[0].eq ) { return 0x8212DBE4;  }
		/* 8212DBD4h case   20:*/		return 0x8212DBD8;
		  /* 8212DBD8h */ case   21:  		/* bl -204088 */
		/* 8212DBD8h case   21:*/		regs.LR = 0x8212DBDC; return 0x820FBEA0;
		/* 8212DBD8h case   21:*/		return 0x8212DBDC;
		  /* 8212DBDCh */ case   22:  		/* mr R15, R3 */
		/* 8212DBDCh case   22:*/		regs.R15 = regs.R3;
		/* 8212DBDCh case   22:*/		return 0x8212DBE0;
		  /* 8212DBE0h */ case   23:  		/* b 8 */
		/* 8212DBE0h case   23:*/		return 0x8212DBE8;
		/* 8212DBE0h case   23:*/		return 0x8212DBE4;
	}
	return 0x8212DBE4;
} // Block from 8212DB84h-8212DBE4h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8212DBE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DBE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DBE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DBE4);
		  /* 8212DBE4h */ case    0:  		/* mr R15, R17 */
		/* 8212DBE4h case    0:*/		regs.R15 = regs.R17;
		/* 8212DBE4h case    0:*/		return 0x8212DBE8;
	}
	return 0x8212DBE8;
} // Block from 8212DBE4h-8212DBE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212DBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DBE8);
		  /* 8212DBE8h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 8212DBE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 8212DBE8h case    0:*/		return 0x8212DBEC;
		  /* 8212DBECh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8212DBECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212DBFC;  }
		/* 8212DBECh case    1:*/		return 0x8212DBF0;
	}
	return 0x8212DBF0;
} // Block from 8212DBE8h-8212DBF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212DBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DBF0);
		  /* 8212DBF0h */ case    0:  		/* lis R31, -32761 */
		/* 8212DBF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 8212DBF0h case    0:*/		return 0x8212DBF4;
		  /* 8212DBF4h */ case    1:  		/* ori R31, R31, 14 */
		/* 8212DBF4h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 8212DBF4h case    1:*/		return 0x8212DBF8;
		  /* 8212DBF8h */ case    2:  		/* b 2472 */
		/* 8212DBF8h case    2:*/		return 0x8212E5A0;
		/* 8212DBF8h case    2:*/		return 0x8212DBFC;
	}
	return 0x8212DBFC;
} // Block from 8212DBF0h-8212DBFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212DBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DBFC);
		  /* 8212DBFCh */ case    0:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212DBFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DBFCh case    0:*/		return 0x8212DC00;
		  /* 8212DC00h */ case    1:  		/* li R10, 1 */
		/* 8212DC00h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8212DC00h case    1:*/		return 0x8212DC04;
		  /* 8212DC04h */ case    2:  		/* li R7, 0 */
		/* 8212DC04h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212DC04h case    2:*/		return 0x8212DC08;
		  /* 8212DC08h */ case    3:  		/* mr R3, R15 */
		/* 8212DC08h case    3:*/		regs.R3 = regs.R15;
		/* 8212DC08h case    3:*/		return 0x8212DC0C;
		  /* 8212DC0Ch */ case    4:  		/* lwz R5, <#[R11 + 4]> */
		/* 8212DC0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 8212DC0Ch case    4:*/		return 0x8212DC10;
		  /* 8212DC10h */ case    5:  		/* lwz R6, <#[R11 + 12]> */
		/* 8212DC10h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212DC10h case    5:*/		return 0x8212DC14;
		  /* 8212DC14h */ case    6:  		/* mr R4, R5 */
		/* 8212DC14h case    6:*/		regs.R4 = regs.R5;
		/* 8212DC14h case    6:*/		return 0x8212DC18;
		  /* 8212DC18h */ case    7:  		/* rlwimi R4, R10, 28, 0, 11 */
		/* 8212DC18h case    7:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R10);
		/* 8212DC18h case    7:*/		return 0x8212DC1C;
		  /* 8212DC1Ch */ case    8:  		/* bl -202220 */
		/* 8212DC1Ch case    8:*/		regs.LR = 0x8212DC20; return 0x820FC630;
		/* 8212DC1Ch case    8:*/		return 0x8212DC20;
		  /* 8212DC20h */ case    9:  		/* or. R31, R3, R3 */
		/* 8212DC20h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DC20h case    9:*/		return 0x8212DC24;
		  /* 8212DC24h */ case   10:  		/* bc 12, CR0_LT, 2428 */
		/* 8212DC24h case   10:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DC24h case   10:*/		return 0x8212DC28;
		  /* 8212DC28h */ case   11:  		/* mr R3, R15 */
		/* 8212DC28h case   11:*/		regs.R3 = regs.R15;
		/* 8212DC28h case   11:*/		return 0x8212DC2C;
		  /* 8212DC2Ch */ case   12:  		/* lwz R4, <#[R21 + 260]> */
		/* 8212DC2Ch case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DC2Ch case   12:*/		return 0x8212DC30;
		  /* 8212DC30h */ case   13:  		/* bl -204096 */
		/* 8212DC30h case   13:*/		regs.LR = 0x8212DC34; return 0x820FBEF0;
		/* 8212DC30h case   13:*/		return 0x8212DC34;
		  /* 8212DC34h */ case   14:  		/* or. R31, R3, R3 */
		/* 8212DC34h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DC34h case   14:*/		return 0x8212DC38;
		  /* 8212DC38h */ case   15:  		/* bc 12, CR0_LT, 2408 */
		/* 8212DC38h case   15:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DC38h case   15:*/		return 0x8212DC3C;
		  /* 8212DC3Ch */ case   16:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212DC3Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DC3Ch case   16:*/		return 0x8212DC40;
		  /* 8212DC40h */ case   17:  		/* addi R4, R1, 240 */
		/* 8212DC40h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xF0);
		/* 8212DC40h case   17:*/		return 0x8212DC44;
		  /* 8212DC44h */ case   18:  		/* lwz R3, <#[R15 + 16]> */
		/* 8212DC44h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R15 + 0x00000010) );
		/* 8212DC44h case   18:*/		return 0x8212DC48;
		  /* 8212DC48h */ case   19:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212DC48h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212DC48h case   19:*/		return 0x8212DC4C;
		  /* 8212DC4Ch */ case   20:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8212DC4Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8212DC4Ch case   20:*/		return 0x8212DC50;
		  /* 8212DC50h */ case   21:  		/* bl -639648 */
		/* 8212DC50h case   21:*/		regs.LR = 0x8212DC54; return 0x820919B0;
		/* 8212DC50h case   21:*/		return 0x8212DC54;
		  /* 8212DC54h */ case   22:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212DC54h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DC54h case   22:*/		return 0x8212DC58;
		  /* 8212DC58h */ case   23:  		/* lwz R3, <#[R15 + 8]> */
		/* 8212DC58h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R15 + 0x00000008) );
		/* 8212DC58h case   23:*/		return 0x8212DC5C;
		  /* 8212DC5Ch */ case   24:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212DC5Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212DC5Ch case   24:*/		return 0x8212DC60;
		  /* 8212DC60h */ case   25:  		/* lwz R4, <#[R11 + 8]> */
		/* 8212DC60h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 8212DC60h case   25:*/		return 0x8212DC64;
		  /* 8212DC64h */ case   26:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 8212DC64h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 8212DC64h case   26:*/		return 0x8212DC68;
	}
	return 0x8212DC68;
} // Block from 8212DBFCh-8212DC68h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8212DC68h
// Function '?FindInput@CPSProgram@D3DXShader@@MAAJPAVCArgument@2@AAK1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DC68);
		  /* 8212DC68h */ case    0:  		/* bl -639672 */
		/* 8212DC68h case    0:*/		regs.LR = 0x8212DC6C; return 0x820919B0;
		/* 8212DC68h case    0:*/		return 0x8212DC6C;
		  /* 8212DC6Ch */ case    1:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212DC6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212DC6Ch case    1:*/		return 0x8212DC70;
		  /* 8212DC70h */ case    2:  		/* addi R4, R1, 240 */
		/* 8212DC70h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xF0);
		/* 8212DC70h case    2:*/		return 0x8212DC74;
		  /* 8212DC74h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212DC74h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212DC74h case    3:*/		return 0x8212DC78;
		  /* 8212DC78h */ case    4:  		/* lwz R3, <#[R11 + 8]> */
		/* 8212DC78h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8212DC78h case    4:*/		return 0x8212DC7C;
		  /* 8212DC7Ch */ case    5:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 8212DC7Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 8212DC7Ch case    5:*/		return 0x8212DC80;
		  /* 8212DC80h */ case    6:  		/* bl -639696 */
		/* 8212DC80h case    6:*/		regs.LR = 0x8212DC84; return 0x820919B0;
		/* 8212DC80h case    6:*/		return 0x8212DC84;
		  /* 8212DC84h */ case    7:  		/* mr R4, R15 */
		/* 8212DC84h case    7:*/		regs.R4 = regs.R15;
		/* 8212DC84h case    7:*/		return 0x8212DC88;
		  /* 8212DC88h */ case    8:  		/* mr R3, R21 */
		/* 8212DC88h case    8:*/		regs.R3 = regs.R21;
		/* 8212DC88h case    8:*/		return 0x8212DC8C;
		  /* 8212DC8Ch */ case    9:  		/* bl -199636 */
		/* 8212DC8Ch case    9:*/		regs.LR = 0x8212DC90; return 0x820FD0B8;
		/* 8212DC8Ch case    9:*/		return 0x8212DC90;
		  /* 8212DC90h */ case   10:  		/* or. R31, R3, R3 */
		/* 8212DC90h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DC90h case   10:*/		return 0x8212DC94;
		  /* 8212DC94h */ case   11:  		/* bc 12, CR0_LT, 2316 */
		/* 8212DC94h case   11:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DC94h case   11:*/		return 0x8212DC98;
		  /* 8212DC98h */ case   12:  		/* mr R15, R17 */
		/* 8212DC98h case   12:*/		regs.R15 = regs.R17;
		/* 8212DC98h case   12:*/		return 0x8212DC9C;
	}
	return 0x8212DC9C;
} // Block from 8212DC68h-8212DC9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212DC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DC9C);
		  /* 8212DC9Ch */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 8212DC9Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8212DC9Ch case    0:*/		return 0x8212DCA0;
		  /* 8212DCA0h */ case    1:  		/* bc 12, CR6_EQ, 1196 */
		/* 8212DCA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E14C;  }
		/* 8212DCA0h case    1:*/		return 0x8212DCA4;
		  /* 8212DCA4h */ case    2:  		/* lwz R11, <#[R21 + 108]> */
		/* 8212DCA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000006C) );
		/* 8212DCA4h case    2:*/		return 0x8212DCA8;
		  /* 8212DCA8h */ case    3:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8212DCA8h case    3:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8212DCA8h case    3:*/		return 0x8212DCAC;
		  /* 8212DCACh */ case    4:  		/* bc 12, CR0_EQ, 1184 */
		/* 8212DCACh case    4:*/		if ( regs.CR[0].eq ) { return 0x8212E14C;  }
		/* 8212DCACh case    4:*/		return 0x8212DCB0;
		  /* 8212DCB0h */ case    5:  		/* mr R20, R17 */
		/* 8212DCB0h case    5:*/		regs.R20 = regs.R17;
		/* 8212DCB0h case    5:*/		return 0x8212DCB4;
		  /* 8212DCB4h */ case    6:  		/* mr R22, R17 */
		/* 8212DCB4h case    6:*/		regs.R22 = regs.R17;
		/* 8212DCB4h case    6:*/		return 0x8212DCB8;
		  /* 8212DCB8h */ case    7:  		/* cmplwi CR6, R16, 4 */
		/* 8212DCB8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000004);
		/* 8212DCB8h case    7:*/		return 0x8212DCBC;
		  /* 8212DCBCh */ case    8:  		/* bc 4, CR6_EQ, 660 */
		/* 8212DCBCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x8212DF50;  }
		/* 8212DCBCh case    8:*/		return 0x8212DCC0;
		  /* 8212DCC0h */ case    9:  		/* li R27, 1 */
		/* 8212DCC0h case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8212DCC0h case    9:*/		return 0x8212DCC4;
		  /* 8212DCC4h */ case   10:  		/* mr R26, R17 */
		/* 8212DCC4h case   10:*/		regs.R26 = regs.R17;
		/* 8212DCC4h case   10:*/		return 0x8212DCC8;
		  /* 8212DCC8h */ case   11:  		/* addi R30, R1, 112 */
		/* 8212DCC8h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x70);
		/* 8212DCC8h case   11:*/		return 0x8212DCCC;
		  /* 8212DCCCh */ case   12:  		/* li R31, -1 */
		/* 8212DCCCh case   12:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 8212DCCCh case   12:*/		return 0x8212DCD0;
		  /* 8212DCD0h */ case   13:  		/* cmpwi CR6, R27, 0 */
		/* 8212DCD0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8212DCD0h case   13:*/		return 0x8212DCD4;
		  /* 8212DCD4h */ case   14:  		/* bc 12, CR6_EQ, 124 */
		/* 8212DCD4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212DD50;  }
		/* 8212DCD4h case   14:*/		return 0x8212DCD8;
		  /* 8212DCD8h */ case   15:  		/* addi R11, R1, 96 */
		/* 8212DCD8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8212DCD8h case   15:*/		return 0x8212DCDC;
		  /* 8212DCDCh */ case   16:  		/* addi R10, R1, 112 */
		/* 8212DCDCh case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8212DCDCh case   16:*/		return 0x8212DCE0;
		  /* 8212DCE0h */ case   17:  		/* mr R27, R17 */
		/* 8212DCE0h case   17:*/		regs.R27 = regs.R17;
		/* 8212DCE0h case   17:*/		return 0x8212DCE4;
		  /* 8212DCE4h */ case   18:  		/* cmplwi CR6, R18, 0 */
		/* 8212DCE4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212DCE4h case   18:*/		return 0x8212DCE8;
		  /* 8212DCE8h */ case   19:  		/* std R17, <#[R11]> */
		/* 8212DCE8h case   19:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212DCE8h case   19:*/		return 0x8212DCEC;
		  /* 8212DCECh */ case   20:  		/* std R17, <#[R11 + 8]> */
		/* 8212DCECh case   20:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000008) );
		/* 8212DCECh case   20:*/		return 0x8212DCF0;
		  /* 8212DCF0h */ case   21:  		/* stw R19, <#[R10]> */
		/* 8212DCF0h case   21:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000000) );
		/* 8212DCF0h case   21:*/		return 0x8212DCF4;
		  /* 8212DCF4h */ case   22:  		/* stw R19, <#[R10 + 4]> */
		/* 8212DCF4h case   22:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000004) );
		/* 8212DCF4h case   22:*/		return 0x8212DCF8;
		  /* 8212DCF8h */ case   23:  		/* stw R19, <#[R10 + 8]> */
		/* 8212DCF8h case   23:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000008) );
		/* 8212DCF8h case   23:*/		return 0x8212DCFC;
		  /* 8212DCFCh */ case   24:  		/* stw R19, <#[R10 + 12]> */
		/* 8212DCFCh case   24:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212DCFCh case   24:*/		return 0x8212DD00;
		  /* 8212DD00h */ case   25:  		/* stw R31, <#[R30 - 16]> */
		/* 8212DD00h case   25:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 8212DD00h case   25:*/		return 0x8212DD04;
		  /* 8212DD04h */ case   26:  		/* stw R17, <#[R30]> */
		/* 8212DD04h case   26:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x00000000) );
		/* 8212DD04h case   26:*/		return 0x8212DD08;
		  /* 8212DD08h */ case   27:  		/* bc 12, CR6_EQ, 224 */
		/* 8212DD08h case   27:*/		if ( regs.CR[6].eq ) { return 0x8212DDE8;  }
		/* 8212DD08h case   27:*/		return 0x8212DD0C;
		  /* 8212DD0Ch */ case   28:  		/* addi R28, R1, 176 */
		/* 8212DD0Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0xB0);
		/* 8212DD0Ch case   28:*/		return 0x8212DD10;
		  /* 8212DD10h */ case   29:  		/* mr R29, R18 */
		/* 8212DD10h case   29:*/		regs.R29 = regs.R18;
		/* 8212DD10h case   29:*/		return 0x8212DD14;
		  /* 8212DD14h */ case   30:  		/* addi R4, R1, 96 */
		/* 8212DD14h case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212DD14h case   30:*/		return 0x8212DD18;
	}
	return 0x8212DD18;
} // Block from 8212DC9Ch-8212DD18h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8212DD18h
// Function '?FindOutput@CPSProgram@D3DXShader@@MAAJPAVCArgument@2@AAK1PAH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DD18);
		  /* 8212DD18h */ case    0:  		/* mr R3, R28 */
		/* 8212DD18h case    0:*/		regs.R3 = regs.R28;
		/* 8212DD18h case    0:*/		return 0x8212DD1C;
		  /* 8212DD1Ch */ case    1:  		/* bl -2732 */
		/* 8212DD1Ch case    1:*/		regs.LR = 0x8212DD20; return 0x8212D270;
		/* 8212DD1Ch case    1:*/		return 0x8212DD20;
		  /* 8212DD20h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8212DD20h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212DD20h case    2:*/		return 0x8212DD24;
		  /* 8212DD24h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 8212DD24h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8212DD2C;  }
		/* 8212DD24h case    3:*/		return 0x8212DD28;
		  /* 8212DD28h */ case    4:  		/* li R27, 1 */
		/* 8212DD28h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8212DD28h case    4:*/		return 0x8212DD2C;
	}
	return 0x8212DD2C;
} // Block from 8212DD18h-8212DD2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212DD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DD2C);
		  /* 8212DD2Ch */ case    0:  		/* addic. R29, R29, -1 */
		/* 8212DD2Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8212DD2Ch case    0:*/		return 0x8212DD30;
		  /* 8212DD30h */ case    1:  		/* addi R28, R28, 16 */
		/* 8212DD30h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x10);
		/* 8212DD30h case    1:*/		return 0x8212DD34;
		  /* 8212DD34h */ case    2:  		/* bc 4, CR0_EQ, -32 */
		/* 8212DD34h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8212DD14;  }
		/* 8212DD34h case    2:*/		return 0x8212DD38;
		  /* 8212DD38h */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 8212DD38h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8212DD38h case    3:*/		return 0x8212DD3C;
		  /* 8212DD3Ch */ case    4:  		/* bc 12, CR6_EQ, 172 */
		/* 8212DD3Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8212DDE8;  }
		/* 8212DD3Ch case    4:*/		return 0x8212DD40;
		  /* 8212DD40h */ case    5:  		/* addi R26, R26, 1 */
		/* 8212DD40h case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8212DD40h case    5:*/		return 0x8212DD44;
		  /* 8212DD44h */ case    6:  		/* addi R30, R30, 4 */
		/* 8212DD44h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212DD44h case    6:*/		return 0x8212DD48;
		  /* 8212DD48h */ case    7:  		/* cmplwi CR6, R26, 4 */
		/* 8212DD48h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 8212DD48h case    7:*/		return 0x8212DD4C;
		  /* 8212DD4Ch */ case    8:  		/* bc 12, CR6_LT, -124 */
		/* 8212DD4Ch case    8:*/		if ( regs.CR[6].lt ) { return 0x8212DCD0;  }
		/* 8212DD4Ch case    8:*/		return 0x8212DD50;
	}
	return 0x8212DD50;
} // Block from 8212DD2Ch-8212DD50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212DD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DD50);
		  /* 8212DD50h */ case    0:  		/* li R25, 1 */
		/* 8212DD50h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8212DD50h case    0:*/		return 0x8212DD54;
		  /* 8212DD54h */ case    1:  		/* mr R23, R17 */
		/* 8212DD54h case    1:*/		regs.R23 = regs.R17;
		/* 8212DD54h case    1:*/		return 0x8212DD58;
		  /* 8212DD58h */ case    2:  		/* addi R29, R1, 112 */
		/* 8212DD58h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x70);
		/* 8212DD58h case    2:*/		return 0x8212DD5C;
		  /* 8212DD5Ch */ case    3:  		/* cmpwi CR6, R25, 0 */
		/* 8212DD5Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8212DD5Ch case    3:*/		return 0x8212DD60;
		  /* 8212DD60h */ case    4:  		/* bc 12, CR6_EQ, 372 */
		/* 8212DD60h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212DED4;  }
		/* 8212DD60h case    4:*/		return 0x8212DD64;
		  /* 8212DD64h */ case    5:  		/* mr R24, R17 */
		/* 8212DD64h case    5:*/		regs.R24 = regs.R17;
		/* 8212DD64h case    5:*/		return 0x8212DD68;
		  /* 8212DD68h */ case    6:  		/* addi R30, R1, 112 */
		/* 8212DD68h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x70);
		/* 8212DD68h case    6:*/		return 0x8212DD6C;
		  /* 8212DD6Ch */ case    7:  		/* cmplw CR6, R24, R23 */
		/* 8212DD6Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R23);
		/* 8212DD6Ch case    7:*/		return 0x8212DD70;
		  /* 8212DD70h */ case    8:  		/* bc 12, CR6_EQ, 316 */
		/* 8212DD70h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212DEAC;  }
		/* 8212DD70h case    8:*/		return 0x8212DD74;
		  /* 8212DD74h */ case    9:  		/* addi R11, R1, 96 */
		/* 8212DD74h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8212DD74h case    9:*/		return 0x8212DD78;
		  /* 8212DD78h */ case   10:  		/* addi R10, R1, 112 */
		/* 8212DD78h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8212DD78h case   10:*/		return 0x8212DD7C;
		  /* 8212DD7Ch */ case   11:  		/* mr R25, R17 */
		/* 8212DD7Ch case   11:*/		regs.R25 = regs.R17;
		/* 8212DD7Ch case   11:*/		return 0x8212DD80;
		  /* 8212DD80h */ case   12:  		/* mr R26, R17 */
		/* 8212DD80h case   12:*/		regs.R26 = regs.R17;
		/* 8212DD80h case   12:*/		return 0x8212DD84;
		  /* 8212DD84h */ case   13:  		/* cmplwi CR6, R18, 0 */
		/* 8212DD84h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212DD84h case   13:*/		return 0x8212DD88;
		  /* 8212DD88h */ case   14:  		/* std R17, <#[R11]> */
		/* 8212DD88h case   14:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212DD88h case   14:*/		return 0x8212DD8C;
		  /* 8212DD8Ch */ case   15:  		/* std R17, <#[R11 + 8]> */
		/* 8212DD8Ch case   15:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000008) );
		/* 8212DD8Ch case   15:*/		return 0x8212DD90;
		  /* 8212DD90h */ case   16:  		/* stw R19, <#[R10]> */
		/* 8212DD90h case   16:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000000) );
		/* 8212DD90h case   16:*/		return 0x8212DD94;
		  /* 8212DD94h */ case   17:  		/* stw R19, <#[R10 + 4]> */
		/* 8212DD94h case   17:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000004) );
		/* 8212DD94h case   17:*/		return 0x8212DD98;
		  /* 8212DD98h */ case   18:  		/* stw R19, <#[R10 + 8]> */
		/* 8212DD98h case   18:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000008) );
		/* 8212DD98h case   18:*/		return 0x8212DD9C;
		  /* 8212DD9Ch */ case   19:  		/* stw R19, <#[R10 + 12]> */
		/* 8212DD9Ch case   19:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212DD9Ch case   19:*/		return 0x8212DDA0;
		  /* 8212DDA0h */ case   20:  		/* stw R31, <#[R29 - 16]> */
		/* 8212DDA0h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0xFFFFFFF0) );
		/* 8212DDA0h case   20:*/		return 0x8212DDA4;
		  /* 8212DDA4h */ case   21:  		/* stw R31, <#[R30 - 16]> */
		/* 8212DDA4h case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 8212DDA4h case   21:*/		return 0x8212DDA8;
		  /* 8212DDA8h */ case   22:  		/* stw R17, <#[R29]> */
		/* 8212DDA8h case   22:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R29 + 0x00000000) );
		/* 8212DDA8h case   22:*/		return 0x8212DDAC;
		  /* 8212DDACh */ case   23:  		/* stw R17, <#[R30]> */
		/* 8212DDACh case   23:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x00000000) );
		/* 8212DDACh case   23:*/		return 0x8212DDB0;
		  /* 8212DDB0h */ case   24:  		/* bc 12, CR6_EQ, 272 */
		/* 8212DDB0h case   24:*/		if ( regs.CR[6].eq ) { return 0x8212DEC0;  }
		/* 8212DDB0h case   24:*/		return 0x8212DDB4;
		  /* 8212DDB4h */ case   25:  		/* addi R28, R1, 176 */
		/* 8212DDB4h case   25:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0xB0);
		/* 8212DDB4h case   25:*/		return 0x8212DDB8;
		  /* 8212DDB8h */ case   26:  		/* mr R27, R18 */
		/* 8212DDB8h case   26:*/		regs.R27 = regs.R18;
		/* 8212DDB8h case   26:*/		return 0x8212DDBC;
		  /* 8212DDBCh */ case   27:  		/* addi R4, R1, 96 */
		/* 8212DDBCh case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212DDBCh case   27:*/		return 0x8212DDC0;
		  /* 8212DDC0h */ case   28:  		/* mr R3, R28 */
		/* 8212DDC0h case   28:*/		regs.R3 = regs.R28;
		/* 8212DDC0h case   28:*/		return 0x8212DDC4;
		  /* 8212DDC4h */ case   29:  		/* bl -2900 */
		/* 8212DDC4h case   29:*/		regs.LR = 0x8212DDC8; return 0x8212D270;
		/* 8212DDC4h case   29:*/		return 0x8212DDC8;
		  /* 8212DDC8h */ case   30:  		/* mr R14, R3 */
		/* 8212DDC8h case   30:*/		regs.R14 = regs.R3;
		/* 8212DDC8h case   30:*/		return 0x8212DDCC;
		  /* 8212DDCCh */ case   31:  		/* addi R4, R1, 112 */
		/* 8212DDCCh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8212DDCCh case   31:*/		return 0x8212DDD0;
		  /* 8212DDD0h */ case   32:  		/* mr R3, R28 */
		/* 8212DDD0h case   32:*/		regs.R3 = regs.R28;
		/* 8212DDD0h case   32:*/		return 0x8212DDD4;
		  /* 8212DDD4h */ case   33:  		/* bl -2916 */
		/* 8212DDD4h case   33:*/		regs.LR = 0x8212DDD8; return 0x8212D270;
		/* 8212DDD4h case   33:*/		return 0x8212DDD8;
	}
	return 0x8212DDD8;
} // Block from 8212DD50h-8212DDD8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8212DDD8h
// Function '?IsValidSwizzle@D3DXShader@@YAHPAI0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DDD8);
		  /* 8212DDD8h */ case    0:  		/* cmpwi CR6, R14, 0 */
		/* 8212DDD8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 8212DDD8h case    0:*/		return 0x8212DDDC;
		  /* 8212DDDCh */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 8212DDDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212DE24;  }
		/* 8212DDDCh case    1:*/		return 0x8212DDE0;
		  /* 8212DDE0h */ case    2:  		/* li R26, 1 */
		/* 8212DDE0h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8212DDE0h case    2:*/		return 0x8212DDE4;
		  /* 8212DDE4h */ case    3:  		/* b 72 */
		/* 8212DDE4h case    3:*/		return 0x8212DE2C;
		/* 8212DDE4h case    3:*/		return 0x8212DDE8;
	}
	return 0x8212DDE8;
} // Block from 8212DDD8h-8212DDE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212DDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DDE8);
		  /* 8212DDE8h */ case    0:  		/* li R6, 4 */
		/* 8212DDE8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DDE8h case    0:*/		return 0x8212DDEC;
		  /* 8212DDECh */ case    1:  		/* mr R5, R18 */
		/* 8212DDECh case    1:*/		regs.R5 = regs.R18;
		/* 8212DDECh case    1:*/		return 0x8212DDF0;
		  /* 8212DDF0h */ case    2:  		/* addi R4, R1, 96 */
		/* 8212DDF0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212DDF0h case    2:*/		return 0x8212DDF4;
		  /* 8212DDF4h */ case    3:  		/* mr R3, R21 */
		/* 8212DDF4h case    3:*/		regs.R3 = regs.R21;
		/* 8212DDF4h case    3:*/		return 0x8212DDF8;
		  /* 8212DDF8h */ case    4:  		/* bl -267392 */
		/* 8212DDF8h case    4:*/		regs.LR = 0x8212DDFC; return 0x820EC978;
		/* 8212DDF8h case    4:*/		return 0x8212DDFC;
		  /* 8212DDFCh */ case    5:  		/* or. R31, R3, R3 */
		/* 8212DDFCh case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DDFCh case    5:*/		return 0x8212DE00;
		  /* 8212DE00h */ case    6:  		/* bc 12, CR0_LT, 1952 */
		/* 8212DE00h case    6:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DE00h case    6:*/		return 0x8212DE04;
		  /* 8212DE04h */ case    7:  		/* li R6, 4 */
		/* 8212DE04h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DE04h case    7:*/		return 0x8212DE08;
		  /* 8212DE08h */ case    8:  		/* mr R5, R18 */
		/* 8212DE08h case    8:*/		regs.R5 = regs.R18;
		/* 8212DE08h case    8:*/		return 0x8212DE0C;
		  /* 8212DE0Ch */ case    9:  		/* addi R4, R1, 112 */
		/* 8212DE0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8212DE0Ch case    9:*/		return 0x8212DE10;
		  /* 8212DE10h */ case   10:  		/* mr R3, R21 */
		/* 8212DE10h case   10:*/		regs.R3 = regs.R21;
		/* 8212DE10h case   10:*/		return 0x8212DE14;
		  /* 8212DE14h */ case   11:  		/* bl -267420 */
		/* 8212DE14h case   11:*/		regs.LR = 0x8212DE18; return 0x820EC978;
		/* 8212DE14h case   11:*/		return 0x8212DE18;
		  /* 8212DE18h */ case   12:  		/* or. R31, R3, R3 */
		/* 8212DE18h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DE18h case   12:*/		return 0x8212DE1C;
		  /* 8212DE1Ch */ case   13:  		/* bc 12, CR0_LT, 1924 */
		/* 8212DE1Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DE1Ch case   13:*/		return 0x8212DE20;
		  /* 8212DE20h */ case   14:  		/* b 776 */
		/* 8212DE20h case   14:*/		return 0x8212E128;
		/* 8212DE20h case   14:*/		return 0x8212DE24;
	}
	return 0x8212DE24;
} // Block from 8212DDE8h-8212DE24h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212DE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DE24);
		  /* 8212DE24h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8212DE24h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8212DE24h case    0:*/		return 0x8212DE28;
		  /* 8212DE28h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8212DE28h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212DE30;  }
		/* 8212DE28h case    1:*/		return 0x8212DE2C;
	}
	return 0x8212DE2C;
} // Block from 8212DE24h-8212DE2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212DE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DE2C);
		  /* 8212DE2Ch */ case    0:  		/* li R25, 1 */
		/* 8212DE2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8212DE2Ch case    0:*/		return 0x8212DE30;
	}
	return 0x8212DE30;
} // Block from 8212DE2Ch-8212DE30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212DE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DE30);
		  /* 8212DE30h */ case    0:  		/* addic. R27, R27, -1 */
		/* 8212DE30h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 8212DE30h case    0:*/		return 0x8212DE34;
		  /* 8212DE34h */ case    1:  		/* addi R28, R28, 16 */
		/* 8212DE34h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x10);
		/* 8212DE34h case    1:*/		return 0x8212DE38;
		  /* 8212DE38h */ case    2:  		/* bc 4, CR0_EQ, -124 */
		/* 8212DE38h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8212DDBC;  }
		/* 8212DE38h case    2:*/		return 0x8212DE3C;
		  /* 8212DE3Ch */ case    3:  		/* lwz R14, <#[R1 + 80]> */
		/* 8212DE3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000050) );
		/* 8212DE3Ch case    3:*/		return 0x8212DE40;
		  /* 8212DE40h */ case    4:  		/* cmpwi CR6, R25, 0 */
		/* 8212DE40h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8212DE40h case    4:*/		return 0x8212DE44;
		  /* 8212DE44h */ case    5:  		/* bc 12, CR6_EQ, 124 */
		/* 8212DE44h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212DEC0;  }
		/* 8212DE44h case    5:*/		return 0x8212DE48;
		  /* 8212DE48h */ case    6:  		/* cmpwi CR6, R26, 0 */
		/* 8212DE48h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8212DE48h case    6:*/		return 0x8212DE4C;
		  /* 8212DE4Ch */ case    7:  		/* bc 4, CR6_EQ, 96 */
		/* 8212DE4Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8212DEAC;  }
		/* 8212DE4Ch case    7:*/		return 0x8212DE50;
		  /* 8212DE50h */ case    8:  		/* addi R11, R1, 96 */
		/* 8212DE50h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8212DE50h case    8:*/		return 0x8212DE54;
		  /* 8212DE54h */ case    9:  		/* addi R10, R1, 128 */
		/* 8212DE54h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8212DE54h case    9:*/		return 0x8212DE58;
		  /* 8212DE58h */ case   10:  		/* addi R9, R1, 144 */
		/* 8212DE58h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 8212DE58h case   10:*/		return 0x8212DE5C;
		  /* 8212DE5Ch */ case   11:  		/* addi R8, R1, 160 */
		/* 8212DE5Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 8212DE5Ch case   11:*/		return 0x8212DE60;
	}
	return 0x8212DE60;
} // Block from 8212DE30h-8212DE60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212DE60h
// Function '?RemapInput@CPSProgram@D3DXShader@@IAAJAAPAVCInstruction@2@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DE60);
		  /* 8212DE60h */ case    0:  		/* li R22, 1 */
		/* 8212DE60h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 8212DE60h case    0:*/		return 0x8212DE64;
		  /* 8212DE64h */ case    1:  		/* lwz R7, <#[R11]> */
		/* 8212DE64h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8212DE64h case    1:*/		return 0x8212DE68;
		  /* 8212DE68h */ case    2:  		/* lwz R6, <#[R11 + 4]> */
		/* 8212DE68h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8212DE68h case    2:*/		return 0x8212DE6C;
		  /* 8212DE6Ch */ case    3:  		/* lwz R5, <#[R11 + 8]> */
		/* 8212DE6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 8212DE6Ch case    3:*/		return 0x8212DE70;
		  /* 8212DE70h */ case    4:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212DE70h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212DE70h case    4:*/		return 0x8212DE74;
		  /* 8212DE74h */ case    5:  		/* stw R7, <#[R10]> */
		/* 8212DE74h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8212DE74h case    5:*/		return 0x8212DE78;
		  /* 8212DE78h */ case    6:  		/* stw R6, <#[R10 + 4]> */
		/* 8212DE78h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8212DE78h case    6:*/		return 0x8212DE7C;
		  /* 8212DE7Ch */ case    7:  		/* stw R5, <#[R10 + 8]> */
		/* 8212DE7Ch case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x00000008) );
		/* 8212DE7Ch case    7:*/		return 0x8212DE80;
		  /* 8212DE80h */ case    8:  		/* stw R11, <#[R10 + 12]> */
		/* 8212DE80h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212DE80h case    8:*/		return 0x8212DE84;
		  /* 8212DE84h */ case    9:  		/* stw R19, <#[R9]> */
		/* 8212DE84h case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R9 + 0x00000000) );
		/* 8212DE84h case    9:*/		return 0x8212DE88;
		  /* 8212DE88h */ case   10:  		/* stw R19, <#[R9 + 4]> */
		/* 8212DE88h case   10:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R9 + 0x00000004) );
		/* 8212DE88h case   10:*/		return 0x8212DE8C;
		  /* 8212DE8Ch */ case   11:  		/* stw R19, <#[R9 + 8]> */
		/* 8212DE8Ch case   11:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R9 + 0x00000008) );
		/* 8212DE8Ch case   11:*/		return 0x8212DE90;
		  /* 8212DE90h */ case   12:  		/* stw R19, <#[R9 + 12]> */
		/* 8212DE90h case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R9 + 0x0000000C) );
		/* 8212DE90h case   12:*/		return 0x8212DE94;
		  /* 8212DE94h */ case   13:  		/* stw R19, <#[R8]> */
		/* 8212DE94h case   13:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R8 + 0x00000000) );
		/* 8212DE94h case   13:*/		return 0x8212DE98;
		  /* 8212DE98h */ case   14:  		/* stw R19, <#[R8 + 4]> */
		/* 8212DE98h case   14:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R8 + 0x00000004) );
		/* 8212DE98h case   14:*/		return 0x8212DE9C;
		  /* 8212DE9Ch */ case   15:  		/* stw R19, <#[R8 + 8]> */
		/* 8212DE9Ch case   15:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R8 + 0x00000008) );
		/* 8212DE9Ch case   15:*/		return 0x8212DEA0;
		  /* 8212DEA0h */ case   16:  		/* stw R19, <#[R8 + 12]> */
		/* 8212DEA0h case   16:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R8 + 0x0000000C) );
		/* 8212DEA0h case   16:*/		return 0x8212DEA4;
		  /* 8212DEA4h */ case   17:  		/* stw R17, <#[R29 + 32]> */
		/* 8212DEA4h case   17:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R29 + 0x00000020) );
		/* 8212DEA4h case   17:*/		return 0x8212DEA8;
		  /* 8212DEA8h */ case   18:  		/* stw R17, <#[R30 + 48]> */
		/* 8212DEA8h case   18:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x00000030) );
		/* 8212DEA8h case   18:*/		return 0x8212DEAC;
	}
	return 0x8212DEAC;
} // Block from 8212DE60h-8212DEACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212DEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DEAC);
		  /* 8212DEACh */ case    0:  		/* addi R24, R24, 1 */
		/* 8212DEACh case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8212DEACh case    0:*/		return 0x8212DEB0;
		  /* 8212DEB0h */ case    1:  		/* addi R30, R30, 4 */
		/* 8212DEB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212DEB0h case    1:*/		return 0x8212DEB4;
		  /* 8212DEB4h */ case    2:  		/* cmplwi CR6, R24, 4 */
		/* 8212DEB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000004);
		/* 8212DEB4h case    2:*/		return 0x8212DEB8;
		  /* 8212DEB8h */ case    3:  		/* bc 12, CR6_LT, -332 */
		/* 8212DEB8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DD6C;  }
		/* 8212DEB8h case    3:*/		return 0x8212DEBC;
		  /* 8212DEBCh */ case    4:  		/* b 8 */
		/* 8212DEBCh case    4:*/		return 0x8212DEC4;
		/* 8212DEBCh case    4:*/		return 0x8212DEC0;
	}
	return 0x8212DEC0;
} // Block from 8212DEACh-8212DEC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212DEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DEC0);
		  /* 8212DEC0h */ case    0:  		/* li R20, 1 */
		/* 8212DEC0h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8212DEC0h case    0:*/		return 0x8212DEC4;
	}
	return 0x8212DEC4;
} // Block from 8212DEC0h-8212DEC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212DEC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DEC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DEC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DEC4);
		  /* 8212DEC4h */ case    0:  		/* addi R23, R23, 1 */
		/* 8212DEC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8212DEC4h case    0:*/		return 0x8212DEC8;
		  /* 8212DEC8h */ case    1:  		/* addi R29, R29, 4 */
		/* 8212DEC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8212DEC8h case    1:*/		return 0x8212DECC;
		  /* 8212DECCh */ case    2:  		/* cmplwi CR6, R23, 4 */
		/* 8212DECCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000004);
		/* 8212DECCh case    2:*/		return 0x8212DED0;
		  /* 8212DED0h */ case    3:  		/* bc 12, CR6_LT, -372 */
		/* 8212DED0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DD5C;  }
		/* 8212DED0h case    3:*/		return 0x8212DED4;
	}
	return 0x8212DED4;
} // Block from 8212DEC4h-8212DED4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212DED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DED4);
		  /* 8212DED4h */ case    0:  		/* cmpwi CR6, R20, 0 */
		/* 8212DED4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 8212DED4h case    0:*/		return 0x8212DED8;
		  /* 8212DED8h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 8212DED8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212DF00;  }
		/* 8212DED8h case    1:*/		return 0x8212DEDC;
		  /* 8212DEDCh */ case    2:  		/* li R6, 4 */
		/* 8212DEDCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DEDCh case    2:*/		return 0x8212DEE0;
		  /* 8212DEE0h */ case    3:  		/* mr R5, R18 */
		/* 8212DEE0h case    3:*/		regs.R5 = regs.R18;
		/* 8212DEE0h case    3:*/		return 0x8212DEE4;
		  /* 8212DEE4h */ case    4:  		/* addi R4, R1, 96 */
		/* 8212DEE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212DEE4h case    4:*/		return 0x8212DEE8;
		  /* 8212DEE8h */ case    5:  		/* mr R3, R21 */
		/* 8212DEE8h case    5:*/		regs.R3 = regs.R21;
		/* 8212DEE8h case    5:*/		return 0x8212DEEC;
		  /* 8212DEECh */ case    6:  		/* bl -267636 */
		/* 8212DEECh case    6:*/		regs.LR = 0x8212DEF0; return 0x820EC978;
		/* 8212DEECh case    6:*/		return 0x8212DEF0;
		  /* 8212DEF0h */ case    7:  		/* or. R31, R3, R3 */
		/* 8212DEF0h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DEF0h case    7:*/		return 0x8212DEF4;
		  /* 8212DEF4h */ case    8:  		/* bc 12, CR0_LT, 1708 */
		/* 8212DEF4h case    8:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DEF4h case    8:*/		return 0x8212DEF8;
		  /* 8212DEF8h */ case    9:  		/* li R6, 4 */
		/* 8212DEF8h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DEF8h case    9:*/		return 0x8212DEFC;
		  /* 8212DEFCh */ case   10:  		/* b 412 */
		/* 8212DEFCh case   10:*/		return 0x8212E098;
		/* 8212DEFCh case   10:*/		return 0x8212DF00;
	}
	return 0x8212DF00;
} // Block from 8212DED4h-8212DF00h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212DF00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DF00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DF00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DF00);
		  /* 8212DF00h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 8212DF00h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 8212DF00h case    0:*/		return 0x8212DF04;
		  /* 8212DF04h */ case    1:  		/* bc 12, CR6_EQ, 436 */
		/* 8212DF04h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E0B8;  }
		/* 8212DF04h case    1:*/		return 0x8212DF08;
		  /* 8212DF08h */ case    2:  		/* li R6, 4 */
		/* 8212DF08h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DF08h case    2:*/		return 0x8212DF0C;
		  /* 8212DF0Ch */ case    3:  		/* mr R5, R18 */
		/* 8212DF0Ch case    3:*/		regs.R5 = regs.R18;
		/* 8212DF0Ch case    3:*/		return 0x8212DF10;
		  /* 8212DF10h */ case    4:  		/* addi R4, R1, 128 */
		/* 8212DF10h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 8212DF10h case    4:*/		return 0x8212DF14;
		  /* 8212DF14h */ case    5:  		/* mr R3, R21 */
		/* 8212DF14h case    5:*/		regs.R3 = regs.R21;
		/* 8212DF14h case    5:*/		return 0x8212DF18;
		  /* 8212DF18h */ case    6:  		/* li R20, 1 */
		/* 8212DF18h case    6:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8212DF18h case    6:*/		return 0x8212DF1C;
		  /* 8212DF1Ch */ case    7:  		/* bl -267684 */
		/* 8212DF1Ch case    7:*/		regs.LR = 0x8212DF20; return 0x820EC978;
		/* 8212DF1Ch case    7:*/		return 0x8212DF20;
		  /* 8212DF20h */ case    8:  		/* or. R31, R3, R3 */
		/* 8212DF20h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DF20h case    8:*/		return 0x8212DF24;
		  /* 8212DF24h */ case    9:  		/* bc 12, CR0_LT, 1660 */
		/* 8212DF24h case    9:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DF24h case    9:*/		return 0x8212DF28;
		  /* 8212DF28h */ case   10:  		/* li R6, 4 */
		/* 8212DF28h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DF28h case   10:*/		return 0x8212DF2C;
		  /* 8212DF2Ch */ case   11:  		/* mr R5, R18 */
		/* 8212DF2Ch case   11:*/		regs.R5 = regs.R18;
		/* 8212DF2Ch case   11:*/		return 0x8212DF30;
		  /* 8212DF30h */ case   12:  		/* addi R4, R1, 144 */
		/* 8212DF30h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 8212DF30h case   12:*/		return 0x8212DF34;
		  /* 8212DF34h */ case   13:  		/* mr R3, R21 */
		/* 8212DF34h case   13:*/		regs.R3 = regs.R21;
		/* 8212DF34h case   13:*/		return 0x8212DF38;
		  /* 8212DF38h */ case   14:  		/* bl -267712 */
		/* 8212DF38h case   14:*/		regs.LR = 0x8212DF3C; return 0x820EC978;
		/* 8212DF38h case   14:*/		return 0x8212DF3C;
		  /* 8212DF3Ch */ case   15:  		/* or. R31, R3, R3 */
		/* 8212DF3Ch case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212DF3Ch case   15:*/		return 0x8212DF40;
		  /* 8212DF40h */ case   16:  		/* bc 12, CR0_LT, 1632 */
		/* 8212DF40h case   16:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212DF40h case   16:*/		return 0x8212DF44;
		  /* 8212DF44h */ case   17:  		/* li R6, 4 */
		/* 8212DF44h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212DF44h case   17:*/		return 0x8212DF48;
		  /* 8212DF48h */ case   18:  		/* addi R4, R1, 160 */
		/* 8212DF48h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 8212DF48h case   18:*/		return 0x8212DF4C;
		  /* 8212DF4Ch */ case   19:  		/* b 336 */
		/* 8212DF4Ch case   19:*/		return 0x8212E09C;
		/* 8212DF4Ch case   19:*/		return 0x8212DF50;
	}
	return 0x8212DF50;
} // Block from 8212DF00h-8212DF50h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8212DF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DF50);
		  /* 8212DF50h */ case    0:  		/* cmplwi CR6, R16, 3 */
		/* 8212DF50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000003);
		/* 8212DF50h case    0:*/		return 0x8212DF54;
		  /* 8212DF54h */ case    1:  		/* bc 4, CR6_EQ, 356 */
		/* 8212DF54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212E0B8;  }
		/* 8212DF54h case    1:*/		return 0x8212DF58;
		  /* 8212DF58h */ case    2:  		/* li R11, 4 */
		/* 8212DF58h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8212DF58h case    2:*/		return 0x8212DF5C;
		  /* 8212DF5Ch */ case    3:  		/* li R31, -1 */
		/* 8212DF5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 8212DF5Ch case    3:*/		return 0x8212DF60;
		  /* 8212DF60h */ case    4:  		/* mr R10, R17 */
		/* 8212DF60h case    4:*/		regs.R10 = regs.R17;
		/* 8212DF60h case    4:*/		return 0x8212DF64;
		  /* 8212DF64h */ case    5:  		/* mr R25, R31 */
		/* 8212DF64h case    5:*/		regs.R25 = regs.R31;
		/* 8212DF64h case    5:*/		return 0x8212DF68;
		  /* 8212DF68h */ case    6:  		/* addi R9, R1, 176 */
		/* 8212DF68h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xB0);
		/* 8212DF68h case    6:*/		return 0x8212DF6C;
		  /* 8212DF6Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 8212DF6Ch case    7:*/		regs.CTR = regs.R11;
		/* 8212DF6Ch case    7:*/		return 0x8212DF70;
		  /* 8212DF70h */ case    8:  		/* lwz R11, <#[R9]> */
		/* 8212DF70h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8212DF70h case    8:*/		return 0x8212DF74;
		  /* 8212DF74h */ case    9:  		/* cmpwi CR6, R11, -1 */
		/* 8212DF74h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212DF74h case    9:*/		return 0x8212DF78;
		  /* 8212DF78h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 8212DF78h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8212DF80;  }
		/* 8212DF78h case   10:*/		return 0x8212DF7C;
		  /* 8212DF7Ch */ case   11:  		/* mr R25, R10 */
		/* 8212DF7Ch case   11:*/		regs.R25 = regs.R10;
		/* 8212DF7Ch case   11:*/		return 0x8212DF80;
	}
	return 0x8212DF80;
} // Block from 8212DF50h-8212DF80h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212DF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212DF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212DF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212DF80);
		  /* 8212DF80h */ case    0:  		/* addi R10, R10, 1 */
		/* 8212DF80h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212DF80h case    0:*/		return 0x8212DF84;
		  /* 8212DF84h */ case    1:  		/* addi R9, R9, 4 */
		/* 8212DF84h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212DF84h case    1:*/		return 0x8212DF88;
		  /* 8212DF88h */ case    2:  		/* bc 16, CR0_LT, -24 */
		/* 8212DF88h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212DF70;  }
		/* 8212DF88h case    2:*/		return 0x8212DF8C;
		  /* 8212DF8Ch */ case    3:  		/* mr R23, R17 */
		/* 8212DF8Ch case    3:*/		regs.R23 = regs.R17;
		/* 8212DF8Ch case    3:*/		return 0x8212DF90;
		  /* 8212DF90h */ case    4:  		/* addi R26, R1, 112 */
		/* 8212DF90h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x70);
		/* 8212DF90h case    4:*/		return 0x8212DF94;
		  /* 8212DF94h */ case    5:  		/* cmpwi CR6, R20, 0 */
		/* 8212DF94h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 8212DF94h case    5:*/		return 0x8212DF98;
		  /* 8212DF98h */ case    6:  		/* bc 4, CR6_EQ, 224 */
		/* 8212DF98h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212E078;  }
		/* 8212DF98h case    6:*/		return 0x8212DF9C;
		  /* 8212DF9Ch */ case    7:  		/* mr R24, R17 */
		/* 8212DF9Ch case    7:*/		regs.R24 = regs.R17;
		/* 8212DF9Ch case    7:*/		return 0x8212DFA0;
		  /* 8212DFA0h */ case    8:  		/* addi R28, R1, 112 */
		/* 8212DFA0h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x70);
		/* 8212DFA0h case    8:*/		return 0x8212DFA4;
		  /* 8212DFA4h */ case    9:  		/* cmpwi CR6, R20, 0 */
		/* 8212DFA4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 8212DFA4h case    9:*/		return 0x8212DFA8;
		  /* 8212DFA8h */ case   10:  		/* bc 4, CR6_EQ, 184 */
		/* 8212DFA8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8212E060;  }
		/* 8212DFA8h case   10:*/		return 0x8212DFAC;
		  /* 8212DFACh */ case   11:  		/* cmplw CR6, R24, R23 */
		/* 8212DFACh case   11:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R23);
		/* 8212DFACh case   11:*/		return 0x8212DFB0;
		  /* 8212DFB0h */ case   12:  		/* bc 12, CR6_EQ, 160 */
		/* 8212DFB0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212E050;  }
		/* 8212DFB0h case   12:*/		return 0x8212DFB4;
		  /* 8212DFB4h */ case   13:  		/* cmplw CR6, R24, R25 */
		/* 8212DFB4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R25);
		/* 8212DFB4h case   13:*/		return 0x8212DFB8;
		  /* 8212DFB8h */ case   14:  		/* bc 12, CR6_EQ, 152 */
		/* 8212DFB8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212E050;  }
		/* 8212DFB8h case   14:*/		return 0x8212DFBC;
		  /* 8212DFBCh */ case   15:  		/* cmplw CR6, R23, R25 */
		/* 8212DFBCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R25);
		/* 8212DFBCh case   15:*/		return 0x8212DFC0;
		  /* 8212DFC0h */ case   16:  		/* bc 12, CR6_EQ, 144 */
		/* 8212DFC0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8212E050;  }
		/* 8212DFC0h case   16:*/		return 0x8212DFC4;
		  /* 8212DFC4h */ case   17:  		/* addi R11, R1, 96 */
		/* 8212DFC4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8212DFC4h case   17:*/		return 0x8212DFC8;
		  /* 8212DFC8h */ case   18:  		/* addi R10, R1, 112 */
		/* 8212DFC8h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8212DFC8h case   18:*/		return 0x8212DFCC;
		  /* 8212DFCCh */ case   19:  		/* rlwinm R9, R25, 2, 0, 29 */
		/* 8212DFCCh case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R25);
		/* 8212DFCCh case   19:*/		return 0x8212DFD0;
		  /* 8212DFD0h */ case   20:  		/* addi R8, R1, 112 */
		/* 8212DFD0h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 8212DFD0h case   20:*/		return 0x8212DFD4;
		  /* 8212DFD4h */ case   21:  		/* mr R29, R17 */
		/* 8212DFD4h case   21:*/		regs.R29 = regs.R17;
		/* 8212DFD4h case   21:*/		return 0x8212DFD8;
		  /* 8212DFD8h */ case   22:  		/* std R19, <#[R11]> */
		/* 8212DFD8h case   22:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 8212DFD8h case   22:*/		return 0x8212DFDC;
		  /* 8212DFDCh */ case   23:  		/* mr R30, R17 */
		/* 8212DFDCh case   23:*/		regs.R30 = regs.R17;
		/* 8212DFDCh case   23:*/		return 0x8212DFE0;
		  /* 8212DFE0h */ case   24:  		/* std R19, <#[R11 + 8]> */
		/* 8212DFE0h case   24:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000008) );
		/* 8212DFE0h case   24:*/		return 0x8212DFE4;
		  /* 8212DFE4h */ case   25:  		/* stw R17, <#[R10]> */
		/* 8212DFE4h case   25:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R10 + 0x00000000) );
		/* 8212DFE4h case   25:*/		return 0x8212DFE8;
		  /* 8212DFE8h */ case   26:  		/* cmplwi CR6, R18, 0 */
		/* 8212DFE8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212DFE8h case   26:*/		return 0x8212DFEC;
		  /* 8212DFECh */ case   27:  		/* stw R17, <#[R10 + 4]> */
		/* 8212DFECh case   27:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R10 + 0x00000004) );
		/* 8212DFECh case   27:*/		return 0x8212DFF0;
		  /* 8212DFF0h */ case   28:  		/* stw R17, <#[R10 + 8]> */
		/* 8212DFF0h case   28:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R10 + 0x00000008) );
		/* 8212DFF0h case   28:*/		return 0x8212DFF4;
		  /* 8212DFF4h */ case   29:  		/* stw R17, <#[R10 + 12]> */
		/* 8212DFF4h case   29:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212DFF4h case   29:*/		return 0x8212DFF8;
		  /* 8212DFF8h */ case   30:  		/* stw R17, <#[R26 - 16]> */
		/* 8212DFF8h case   30:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R26 + 0xFFFFFFF0) );
		/* 8212DFF8h case   30:*/		return 0x8212DFFC;
		  /* 8212DFFCh */ case   31:  		/* stw R17, <#[R28 - 16]> */
		/* 8212DFFCh case   31:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R28 + 0xFFFFFFF0) );
		/* 8212DFFCh case   31:*/		return 0x8212E000;
		  /* 8212E000h */ case   32:  		/* stw R31, <#[R26]> */
		/* 8212E000h case   32:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8212E000h case   32:*/		return 0x8212E004;
		  /* 8212E004h */ case   33:  		/* stw R31, <#[R28]> */
		/* 8212E004h case   33:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8212E004h case   33:*/		return 0x8212E008;
		  /* 8212E008h */ case   34:  		/* stwx R31, <#[R9 + R8]> */
		/* 8212E008h case   34:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8212E008h case   34:*/		return 0x8212E00C;
		  /* 8212E00Ch */ case   35:  		/* bc 12, CR6_EQ, 64 */
		/* 8212E00Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x8212E04C;  }
		/* 8212E00Ch case   35:*/		return 0x8212E010;
		  /* 8212E010h */ case   36:  		/* addi R27, R1, 176 */
		/* 8212E010h case   36:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0xB0);
		/* 8212E010h case   36:*/		return 0x8212E014;
		  /* 8212E014h */ case   37:  		/* cmpwi CR6, R29, 0 */
		/* 8212E014h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8212E014h case   37:*/		return 0x8212E018;
		  /* 8212E018h */ case   38:  		/* bc 4, CR6_EQ, 56 */
		/* 8212E018h case   38:*/		if ( !regs.CR[6].eq ) { return 0x8212E050;  }
		/* 8212E018h case   38:*/		return 0x8212E01C;
		  /* 8212E01Ch */ case   39:  		/* addi R4, R1, 96 */
		/* 8212E01Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212E01Ch case   39:*/		return 0x8212E020;
		  /* 8212E020h */ case   40:  		/* mr R3, R27 */
		/* 8212E020h case   40:*/		regs.R3 = regs.R27;
		/* 8212E020h case   40:*/		return 0x8212E024;
		  /* 8212E024h */ case   41:  		/* bl -3508 */
		/* 8212E024h case   41:*/		regs.LR = 0x8212E028; return 0x8212D270;
		/* 8212E024h case   41:*/		return 0x8212E028;
		  /* 8212E028h */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 8212E028h case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212E028h case   42:*/		return 0x8212E02C;
		  /* 8212E02Ch */ case   43:  		/* bc 4, CR0_EQ, 8 */
		/* 8212E02Ch case   43:*/		if ( !regs.CR[0].eq ) { return 0x8212E034;  }
		/* 8212E02Ch case   43:*/		return 0x8212E030;
		  /* 8212E030h */ case   44:  		/* li R29, 1 */
		/* 8212E030h case   44:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8212E030h case   44:*/		return 0x8212E034;
	}
	return 0x8212E034;
} // Block from 8212DF80h-8212E034h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8212E034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E034);
		  /* 8212E034h */ case    0:  		/* addi R30, R30, 1 */
		/* 8212E034h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8212E034h case    0:*/		return 0x8212E038;
		  /* 8212E038h */ case    1:  		/* addi R27, R27, 16 */
		/* 8212E038h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x10);
		/* 8212E038h case    1:*/		return 0x8212E03C;
		  /* 8212E03Ch */ case    2:  		/* cmplw CR6, R30, R18 */
		/* 8212E03Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R18);
		/* 8212E03Ch case    2:*/		return 0x8212E040;
		  /* 8212E040h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212E040h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E014;  }
		/* 8212E040h case    3:*/		return 0x8212E044;
		  /* 8212E044h */ case    4:  		/* cmpwi CR6, R29, 0 */
		/* 8212E044h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8212E044h case    4:*/		return 0x8212E048;
		  /* 8212E048h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 8212E048h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8212E050;  }
		/* 8212E048h case    5:*/		return 0x8212E04C;
	}
	return 0x8212E04C;
} // Block from 8212E034h-8212E04Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E04C);
		  /* 8212E04Ch */ case    0:  		/* li R20, 1 */
		/* 8212E04Ch case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8212E04Ch case    0:*/		return 0x8212E050;
	}
	return 0x8212E050;
} // Block from 8212E04Ch-8212E050h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E050);
		  /* 8212E050h */ case    0:  		/* addi R24, R24, 1 */
		/* 8212E050h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8212E050h case    0:*/		return 0x8212E054;
		  /* 8212E054h */ case    1:  		/* addi R28, R28, 4 */
		/* 8212E054h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212E054h case    1:*/		return 0x8212E058;
		  /* 8212E058h */ case    2:  		/* cmplwi CR6, R24, 4 */
		/* 8212E058h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000004);
		/* 8212E058h case    2:*/		return 0x8212E05C;
		  /* 8212E05Ch */ case    3:  		/* bc 12, CR6_LT, -184 */
		/* 8212E05Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DFA4;  }
		/* 8212E05Ch case    3:*/		return 0x8212E060;
	}
	return 0x8212E060;
} // Block from 8212E050h-8212E060h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212E060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E060);
		  /* 8212E060h */ case    0:  		/* addi R23, R23, 1 */
		/* 8212E060h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8212E060h case    0:*/		return 0x8212E064;
		  /* 8212E064h */ case    1:  		/* addi R26, R26, 4 */
		/* 8212E064h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8212E064h case    1:*/		return 0x8212E068;
		  /* 8212E068h */ case    2:  		/* cmplwi CR6, R23, 4 */
		/* 8212E068h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000004);
		/* 8212E068h case    2:*/		return 0x8212E06C;
		  /* 8212E06Ch */ case    3:  		/* bc 12, CR6_LT, -216 */
		/* 8212E06Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212DF94;  }
		/* 8212E06Ch case    3:*/		return 0x8212E070;
		  /* 8212E070h */ case    4:  		/* cmpwi CR6, R20, 0 */
		/* 8212E070h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 8212E070h case    4:*/		return 0x8212E074;
		  /* 8212E074h */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 8212E074h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212E0B8;  }
		/* 8212E074h case    5:*/		return 0x8212E078;
	}
	return 0x8212E078;
} // Block from 8212E060h-8212E078h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E078);
		  /* 8212E078h */ case    0:  		/* li R6, 3 */
		/* 8212E078h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8212E078h case    0:*/		return 0x8212E07C;
		  /* 8212E07Ch */ case    1:  		/* mr R5, R18 */
		/* 8212E07Ch case    1:*/		regs.R5 = regs.R18;
		/* 8212E07Ch case    1:*/		return 0x8212E080;
		  /* 8212E080h */ case    2:  		/* addi R4, R1, 96 */
		/* 8212E080h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212E080h case    2:*/		return 0x8212E084;
		  /* 8212E084h */ case    3:  		/* mr R3, R21 */
		/* 8212E084h case    3:*/		regs.R3 = regs.R21;
		/* 8212E084h case    3:*/		return 0x8212E088;
		  /* 8212E088h */ case    4:  		/* bl -268048 */
		/* 8212E088h case    4:*/		regs.LR = 0x8212E08C; return 0x820EC978;
		/* 8212E088h case    4:*/		return 0x8212E08C;
		  /* 8212E08Ch */ case    5:  		/* or. R31, R3, R3 */
		/* 8212E08Ch case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E08Ch case    5:*/		return 0x8212E090;
		  /* 8212E090h */ case    6:  		/* bc 12, CR0_LT, 1296 */
		/* 8212E090h case    6:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212E090h case    6:*/		return 0x8212E094;
		  /* 8212E094h */ case    7:  		/* li R6, 3 */
		/* 8212E094h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8212E094h case    7:*/		return 0x8212E098;
	}
	return 0x8212E098;
} // Block from 8212E078h-8212E098h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212E098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E098);
		  /* 8212E098h */ case    0:  		/* addi R4, R1, 112 */
		/* 8212E098h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8212E098h case    0:*/		return 0x8212E09C;
	}
	return 0x8212E09C;
} // Block from 8212E098h-8212E09Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E09C);
		  /* 8212E09Ch */ case    0:  		/* mr R5, R18 */
		/* 8212E09Ch case    0:*/		regs.R5 = regs.R18;
		/* 8212E09Ch case    0:*/		return 0x8212E0A0;
		  /* 8212E0A0h */ case    1:  		/* mr R3, R21 */
		/* 8212E0A0h case    1:*/		regs.R3 = regs.R21;
		/* 8212E0A0h case    1:*/		return 0x8212E0A4;
		  /* 8212E0A4h */ case    2:  		/* bl -268076 */
		/* 8212E0A4h case    2:*/		regs.LR = 0x8212E0A8; return 0x820EC978;
		/* 8212E0A4h case    2:*/		return 0x8212E0A8;
		  /* 8212E0A8h */ case    3:  		/* or. R31, R3, R3 */
		/* 8212E0A8h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E0A8h case    3:*/		return 0x8212E0AC;
		  /* 8212E0ACh */ case    4:  		/* bc 12, CR0_LT, 1268 */
		/* 8212E0ACh case    4:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212E0ACh case    4:*/		return 0x8212E0B0;
		  /* 8212E0B0h */ case    5:  		/* cmpwi CR6, R20, 0 */
		/* 8212E0B0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 8212E0B0h case    5:*/		return 0x8212E0B4;
		  /* 8212E0B4h */ case    6:  		/* bc 4, CR6_EQ, 116 */
		/* 8212E0B4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212E128;  }
		/* 8212E0B4h case    6:*/		return 0x8212E0B8;
	}
	return 0x8212E0B8;
} // Block from 8212E09Ch-8212E0B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E0B8);
		  /* 8212E0B8h */ case    0:  		/* mr R29, R17 */
		/* 8212E0B8h case    0:*/		regs.R29 = regs.R17;
		/* 8212E0B8h case    0:*/		return 0x8212E0BC;
		  /* 8212E0BCh */ case    1:  		/* cmplwi CR6, R16, 0 */
		/* 8212E0BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8212E0BCh case    1:*/		return 0x8212E0C0;
	}
	return 0x8212E0C0;
} // Block from 8212E0B8h-8212E0C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212E0C0h
// Function '?RemapOutputMov@CPSProgram@D3DXShader@@IAAJAAPAVCInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E0C0);
		  /* 8212E0C0h */ case    0:  		/* bc 12, CR6_EQ, 104 */
		/* 8212E0C0h case    0:*/		if ( regs.CR[6].eq ) { return 0x8212E128;  }
		/* 8212E0C0h case    0:*/		return 0x8212E0C4;
		  /* 8212E0C4h */ case    1:  		/* mr R30, R17 */
		/* 8212E0C4h case    1:*/		regs.R30 = regs.R17;
		/* 8212E0C4h case    1:*/		return 0x8212E0C8;
		  /* 8212E0C8h */ case    2:  		/* addi R11, R1, 96 */
		/* 8212E0C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8212E0C8h case    2:*/		return 0x8212E0CC;
		  /* 8212E0CCh */ case    3:  		/* lwz R10, <#[R21 + 260]> */
		/* 8212E0CCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E0CCh case    3:*/		return 0x8212E0D0;
		  /* 8212E0D0h */ case    4:  		/* lwz R9, <#[R21 + 20]> */
		/* 8212E0D0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000014) );
		/* 8212E0D0h case    4:*/		return 0x8212E0D4;
		  /* 8212E0D4h */ case    5:  		/* addi R8, R1, 96 */
		/* 8212E0D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8212E0D4h case    5:*/		return 0x8212E0D8;
		  /* 8212E0D8h */ case    6:  		/* mr R6, R16 */
		/* 8212E0D8h case    6:*/		regs.R6 = regs.R16;
		/* 8212E0D8h case    6:*/		return 0x8212E0DC;
		  /* 8212E0DCh */ case    7:  		/* mr R5, R18 */
		/* 8212E0DCh case    7:*/		regs.R5 = regs.R18;
		/* 8212E0DCh case    7:*/		return 0x8212E0E0;
		  /* 8212E0E0h */ case    8:  		/* addi R4, R1, 96 */
		/* 8212E0E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8212E0E0h case    8:*/		return 0x8212E0E4;
		  /* 8212E0E4h */ case    9:  		/* std R19, <#[R11]> */
		/* 8212E0E4h case    9:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E0E4h case    9:*/		return 0x8212E0E8;
		  /* 8212E0E8h */ case   10:  		/* mr R3, R21 */
		/* 8212E0E8h case   10:*/		regs.R3 = regs.R21;
		/* 8212E0E8h case   10:*/		return 0x8212E0EC;
		  /* 8212E0ECh */ case   11:  		/* std R19, <#[R11 + 8]> */
		/* 8212E0ECh case   11:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000008) );
		/* 8212E0ECh case   11:*/		return 0x8212E0F0;
		  /* 8212E0F0h */ case   12:  		/* lwz R11, <#[R10 + 16]> */
		/* 8212E0F0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8212E0F0h case   12:*/		return 0x8212E0F4;
		  /* 8212E0F4h */ case   13:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8212E0F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8212E0F4h case   13:*/		return 0x8212E0F8;
		  /* 8212E0F8h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212E0F8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212E0F8h case   14:*/		return 0x8212E0FC;
		  /* 8212E0FCh */ case   15:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8212E0FCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212E0FCh case   15:*/		return 0x8212E100;
		  /* 8212E100h */ case   16:  		/* lwz R11, <#[R11 + 16]> */
		/* 8212E100h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8212E100h case   16:*/		return 0x8212E104;
		  /* 8212E104h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212E104h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212E104h case   17:*/		return 0x8212E108;
		  /* 8212E108h */ case   18:  		/* stwx R17, <#[R11 + R8]> */
		/* 8212E108h case   18:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212E108h case   18:*/		return 0x8212E10C;
		  /* 8212E10Ch */ case   19:  		/* bl -268180 */
		/* 8212E10Ch case   19:*/		regs.LR = 0x8212E110; return 0x820EC978;
		/* 8212E10Ch case   19:*/		return 0x8212E110;
		  /* 8212E110h */ case   20:  		/* or. R31, R3, R3 */
		/* 8212E110h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E110h case   20:*/		return 0x8212E114;
		  /* 8212E114h */ case   21:  		/* bc 12, CR0_LT, 1164 */
		/* 8212E114h case   21:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212E114h case   21:*/		return 0x8212E118;
		  /* 8212E118h */ case   22:  		/* addi R29, R29, 1 */
		/* 8212E118h case   22:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212E118h case   22:*/		return 0x8212E11C;
		  /* 8212E11Ch */ case   23:  		/* addi R30, R30, 4 */
		/* 8212E11Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212E11Ch case   23:*/		return 0x8212E120;
		  /* 8212E120h */ case   24:  		/* cmplw CR6, R29, R16 */
		/* 8212E120h case   24:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R16);
		/* 8212E120h case   24:*/		return 0x8212E124;
		  /* 8212E124h */ case   25:  		/* bc 12, CR6_LT, -92 */
		/* 8212E124h case   25:*/		if ( regs.CR[6].lt ) { return 0x8212E0C8;  }
		/* 8212E124h case   25:*/		return 0x8212E128;
	}
	return 0x8212E128;
} // Block from 8212E0C0h-8212E128h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8212E128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E128);
		  /* 8212E128h */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 8212E128h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 8212E128h case    0:*/		return 0x8212E12C;
		  /* 8212E12Ch */ case    1:  		/* bc 12, CR6_EQ, 360 */
		/* 8212E12Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E294;  }
		/* 8212E12Ch case    1:*/		return 0x8212E130;
		  /* 8212E130h */ case    2:  		/* mr R4, R14 */
		/* 8212E130h case    2:*/		regs.R4 = regs.R14;
		/* 8212E130h case    2:*/		return 0x8212E134;
		  /* 8212E134h */ case    3:  		/* mr R3, R21 */
		/* 8212E134h case    3:*/		regs.R3 = regs.R21;
		/* 8212E134h case    3:*/		return 0x8212E138;
		  /* 8212E138h */ case    4:  		/* bl -200832 */
		/* 8212E138h case    4:*/		regs.LR = 0x8212E13C; return 0x820FD0B8;
		/* 8212E138h case    4:*/		return 0x8212E13C;
		  /* 8212E13Ch */ case    5:  		/* or. R31, R3, R3 */
		/* 8212E13Ch case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E13Ch case    5:*/		return 0x8212E140;
		  /* 8212E140h */ case    6:  		/* bc 12, CR0_LT, 1120 */
		/* 8212E140h case    6:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212E140h case    6:*/		return 0x8212E144;
		  /* 8212E144h */ case    7:  		/* mr R14, R17 */
		/* 8212E144h case    7:*/		regs.R14 = regs.R17;
		/* 8212E144h case    7:*/		return 0x8212E148;
		  /* 8212E148h */ case    8:  		/* b 332 */
		/* 8212E148h case    8:*/		return 0x8212E294;
		/* 8212E148h case    8:*/		return 0x8212E14C;
	}
	return 0x8212E14C;
} // Block from 8212E128h-8212E14Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212E14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E14C);
		  /* 8212E14Ch */ case    0:  		/* mr R3, R21 */
		/* 8212E14Ch case    0:*/		regs.R3 = regs.R21;
		/* 8212E14Ch case    0:*/		return 0x8212E150;
		  /* 8212E150h */ case    1:  		/* lwz R4, <#[R21 + 260]> */
		/* 8212E150h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E150h case    1:*/		return 0x8212E154;
		  /* 8212E154h */ case    2:  		/* bl -199916 */
		/* 8212E154h case    2:*/		regs.LR = 0x8212E158; return 0x820FD468;
		/* 8212E154h case    2:*/		return 0x8212E158;
		  /* 8212E158h */ case    3:  		/* or. R31, R3, R3 */
		/* 8212E158h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E158h case    3:*/		return 0x8212E15C;
		  /* 8212E15Ch */ case    4:  		/* bc 12, CR0_LT, 1092 */
		/* 8212E15Ch case    4:*/		if ( regs.CR[0].lt ) { return 0x8212E5A0;  }
		/* 8212E15Ch case    4:*/		return 0x8212E160;
		  /* 8212E160h */ case    5:  		/* b 308 */
		/* 8212E160h case    5:*/		return 0x8212E294;
		/* 8212E160h case    5:*/		return 0x8212E164;
	}
	return 0x8212E164;
} // Block from 8212E14Ch-8212E164h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E164);
		  /* 8212E164h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 8212E164h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212E164h case    0:*/		return 0x8212E168;
		  /* 8212E168h */ case    1:  		/* bc 12, CR6_EQ, 1028 */
		/* 8212E168h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E56C;  }
		/* 8212E168h case    1:*/		return 0x8212E16C;
		  /* 8212E16Ch */ case    2:  		/* cmplw CR6, R11, R8 */
		/* 8212E16Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8212E16Ch case    2:*/		return 0x8212E170;
		  /* 8212E170h */ case    3:  		/* bc 12, CR6_EQ, 1020 */
		/* 8212E170h case    3:*/		if ( regs.CR[6].eq ) { return 0x8212E56C;  }
		/* 8212E170h case    3:*/		return 0x8212E174;
		  /* 8212E174h */ case    4:  		/* lwz R11, <#[R4 + 16]> */
		/* 8212E174h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8212E174h case    4:*/		return 0x8212E178;
		  /* 8212E178h */ case    5:  		/* lwz R31, <#[R21 + 20]> */
		/* 8212E178h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000014) );
		/* 8212E178h case    5:*/		return 0x8212E17C;
		  /* 8212E17Ch */ case    6:  		/* lwz R10, <#[R21 + 132]> */
		/* 8212E17Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000084) );
		/* 8212E17Ch case    6:*/		return 0x8212E180;
		  /* 8212E180h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 8212E180h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E180h case    7:*/		return 0x8212E184;
		  /* 8212E184h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212E184h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212E184h case    8:*/		return 0x8212E188;
		  /* 8212E188h */ case    9:  		/* lwzx R11, <#[R11 + R31]> */
		/* 8212E188h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8212E188h case    9:*/		return 0x8212E18C;
		  /* 8212E18Ch */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212E18Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212E18Ch case   10:*/		return 0x8212E190;
		  /* 8212E190h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 8212E190h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212E190h case   11:*/		return 0x8212E194;
		  /* 8212E194h */ case   12:  		/* bc 4, CR6_EQ, 40 */
		/* 8212E194h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212E1BC;  }
		/* 8212E194h case   12:*/		return 0x8212E198;
		  /* 8212E198h */ case   13:  		/* lis R11, -32253 */
		/* 8212E198h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212E198h case   13:*/		return 0x8212E19C;
		  /* 8212E19Ch */ case   14:  		/* lwz R4, <#[R4 + 60]> */
		/* 8212E19Ch case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000003C) );
		/* 8212E19Ch case   14:*/		return 0x8212E1A0;
		  /* 8212E1A0h */ case   15:  		/* li R5, 4817 */
		/* 8212E1A0h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x12D1);
		/* 8212E1A0h case   15:*/		return 0x8212E1A4;
		  /* 8212E1A4h */ case   16:  		/* addi R6, R11, 15840 */
		/* 8212E1A4h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3DE0);
		/* 8212E1A4h case   16:*/		return 0x8212E1A8;
		  /* 8212E1A8h */ case   17:  		/* mr R3, R21 */
		/* 8212E1A8h case   17:*/		regs.R3 = regs.R21;
		/* 8212E1A8h case   17:*/		return 0x8212E1AC;
		  /* 8212E1ACh */ case   18:  		/* bl -129660 */
		/* 8212E1ACh case   18:*/		regs.LR = 0x8212E1B0; return 0x8210E730;
		/* 8212E1ACh case   18:*/		return 0x8212E1B0;
		  /* 8212E1B0h */ case   19:  		/* lis R31, -32768 */
		/* 8212E1B0h case   19:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 8212E1B0h case   19:*/		return 0x8212E1B4;
		  /* 8212E1B4h */ case   20:  		/* ori R31, R31, 16389 */
		/* 8212E1B4h case   20:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 8212E1B4h case   20:*/		return 0x8212E1B8;
		  /* 8212E1B8h */ case   21:  		/* b 1048 */
		/* 8212E1B8h case   21:*/		return 0x8212E5D0;
		/* 8212E1B8h case   21:*/		return 0x8212E1BC;
	}
	return 0x8212E1BC;
} // Block from 8212E164h-8212E1BCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212E1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E1BC);
		  /* 8212E1BCh */ case    0:  		/* mr R6, R17 */
		/* 8212E1BCh case    0:*/		regs.R6 = regs.R17;
		/* 8212E1BCh case    0:*/		return 0x8212E1C0;
		  /* 8212E1C0h */ case    1:  		/* cmplwi CR6, R18, 0 */
		/* 8212E1C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212E1C0h case    1:*/		return 0x8212E1C4;
		  /* 8212E1C4h */ case    2:  		/* bc 12, CR6_EQ, 192 */
		/* 8212E1C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212E284;  }
		/* 8212E1C4h case    2:*/		return 0x8212E1C8;
		  /* 8212E1C8h */ case    3:  		/* lis R11, -32217 */
		/* 8212E1C8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8212E1C8h case    3:*/		return 0x8212E1CC;
		  /* 8212E1CCh */ case    4:  		/* mr R5, R17 */
		/* 8212E1CCh case    4:*/		regs.R5 = regs.R17;
		/* 8212E1CCh case    4:*/		return 0x8212E1D0;
		  /* 8212E1D0h */ case    5:  		/* addi R10, R1, 176 */
		/* 8212E1D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8212E1D0h case    5:*/		return 0x8212E1D4;
		  /* 8212E1D4h */ case    6:  		/* li R19, -1 */
		/* 8212E1D4h case    6:*/		cpu::op::li<0>(regs,&regs.R19,0xFFFFFFFF);
		/* 8212E1D4h case    6:*/		return 0x8212E1D8;
		  /* 8212E1D8h */ case    7:  		/* addi R3, R11, 15624 */
		/* 8212E1D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x3D08);
		/* 8212E1D8h case    7:*/		return 0x8212E1DC;
		  /* 8212E1DCh */ case    8:  		/* stw R19, <#[R10]> */
		/* 8212E1DCh case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000000) );
		/* 8212E1DCh case    8:*/		return 0x8212E1E0;
		  /* 8212E1E0h */ case    9:  		/* mr R11, R17 */
		/* 8212E1E0h case    9:*/		regs.R11 = regs.R17;
		/* 8212E1E0h case    9:*/		return 0x8212E1E4;
		  /* 8212E1E4h */ case   10:  		/* stw R19, <#[R10 + 4]> */
		/* 8212E1E4h case   10:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000004) );
		/* 8212E1E4h case   10:*/		return 0x8212E1E8;
		  /* 8212E1E8h */ case   11:  		/* cmplwi CR6, R16, 0 */
		/* 8212E1E8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8212E1E8h case   11:*/		return 0x8212E1EC;
		  /* 8212E1ECh */ case   12:  		/* stw R19, <#[R10 + 8]> */
		/* 8212E1ECh case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000008) );
		/* 8212E1ECh case   12:*/		return 0x8212E1F0;
		  /* 8212E1F0h */ case   13:  		/* stw R19, <#[R10 + 12]> */
		/* 8212E1F0h case   13:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212E1F0h case   13:*/		return 0x8212E1F4;
		  /* 8212E1F4h */ case   14:  		/* bc 12, CR6_EQ, 64 */
		/* 8212E1F4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212E234;  }
		/* 8212E1F4h case   14:*/		return 0x8212E1F8;
		  /* 8212E1F8h */ case   15:  		/* lwz R9, <#[R4 + 8]> */
		/* 8212E1F8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000008) );
		/* 8212E1F8h case   15:*/		return 0x8212E1FC;
		  /* 8212E1FCh */ case   16:  		/* rlwinm R8, R6, 2, 0, 29 */
		/* 8212E1FCh case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R6);
		/* 8212E1FCh case   16:*/		return 0x8212E200;
		  /* 8212E200h */ case   17:  		/* mtspr CTR, R16 */
		/* 8212E200h case   17:*/		regs.CTR = regs.R16;
		/* 8212E200h case   17:*/		return 0x8212E204;
		  /* 8212E204h */ case   18:  		/* add R7, R5, R11 */
		/* 8212E204h case   18:*/		cpu::op::add<0>(regs,&regs.R7,regs.R5,regs.R11);
		/* 8212E204h case   18:*/		return 0x8212E208;
		  /* 8212E208h */ case   19:  		/* add R30, R8, R11 */
		/* 8212E208h case   19:*/		cpu::op::add<0>(regs,&regs.R30,regs.R8,regs.R11);
		/* 8212E208h case   19:*/		return 0x8212E20C;
		  /* 8212E20Ch */ case   20:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8212E20Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8212E20Ch case   20:*/		return 0x8212E210;
		  /* 8212E210h */ case   21:  		/* rlwinm R30, R30, 2, 0, 29 */
		/* 8212E210h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R30);
		/* 8212E210h case   21:*/		return 0x8212E214;
		  /* 8212E214h */ case   22:  		/* addi R29, R1, 176 */
		/* 8212E214h case   22:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0xB0);
		/* 8212E214h case   22:*/		return 0x8212E218;
		  /* 8212E218h */ case   23:  		/* addi R11, R11, 1 */
		/* 8212E218h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E218h case   23:*/		return 0x8212E21C;
		  /* 8212E21Ch */ case   24:  		/* lwzx R7, <#[R7 + R9]> */
		/* 8212E21Ch case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8212E21Ch case   24:*/		return 0x8212E220;
		  /* 8212E220h */ case   25:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8212E220h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8212E220h case   25:*/		return 0x8212E224;
		  /* 8212E224h */ case   26:  		/* lwzx R7, <#[R7 + R31]> */
		/* 8212E224h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8212E224h case   26:*/		return 0x8212E228;
		  /* 8212E228h */ case   27:  		/* lwz R7, <#[R7 + 16]> */
		/* 8212E228h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 8212E228h case   27:*/		return 0x8212E22C;
		  /* 8212E22Ch */ case   28:  		/* stwx R7, <#[R30 + R29]> */
		/* 8212E22Ch case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 8212E22Ch case   28:*/		return 0x8212E230;
		  /* 8212E230h */ case   29:  		/* bc 16, CR0_LT, -44 */
		/* 8212E230h case   29:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212E204;  }
		/* 8212E230h case   29:*/		return 0x8212E234;
	}
	return 0x8212E234;
} // Block from 8212E1BCh-8212E234h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8212E234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E234);
		  /* 8212E234h */ case    0:  		/* mr R7, R17 */
		/* 8212E234h case    0:*/		regs.R7 = regs.R17;
		/* 8212E234h case    0:*/		return 0x8212E238;
		  /* 8212E238h */ case    1:  		/* mr R11, R17 */
		/* 8212E238h case    1:*/		regs.R11 = regs.R17;
		/* 8212E238h case    1:*/		return 0x8212E23C;
		  /* 8212E23Ch */ case    2:  		/* mr R8, R10 */
		/* 8212E23Ch case    2:*/		regs.R8 = regs.R10;
		/* 8212E23Ch case    2:*/		return 0x8212E240;
		  /* 8212E240h */ case    3:  		/* lwz R9, <#[R8]> */
		/* 8212E240h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8212E240h case    3:*/		return 0x8212E244;
		  /* 8212E244h */ case    4:  		/* cmpwi CR6, R9, -1 */
		/* 8212E244h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8212E244h case    4:*/		return 0x8212E248;
		  /* 8212E248h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8212E248h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212E260;  }
		/* 8212E248h case    5:*/		return 0x8212E24C;
		  /* 8212E24Ch */ case    6:  		/* add R30, R7, R11 */
		/* 8212E24Ch case    6:*/		cpu::op::add<0>(regs,&regs.R30,regs.R7,regs.R11);
		/* 8212E24Ch case    6:*/		return 0x8212E250;
		  /* 8212E250h */ case    7:  		/* rlwinm R30, R30, 2, 0, 29 */
		/* 8212E250h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R30);
		/* 8212E250h case    7:*/		return 0x8212E254;
		  /* 8212E254h */ case    8:  		/* lwzx R30, <#[R30 + R3]> */
		/* 8212E254h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + regs.R3 + 0x00000000) );
		/* 8212E254h case    8:*/		return 0x8212E258;
		  /* 8212E258h */ case    9:  		/* cmplw CR6, R9, R30 */
		/* 8212E258h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 8212E258h case    9:*/		return 0x8212E25C;
		  /* 8212E25Ch */ case   10:  		/* bc 4, CR6_EQ, 72 */
		/* 8212E25Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x8212E2A4;  }
		/* 8212E25Ch case   10:*/		return 0x8212E260;
	}
	return 0x8212E260;
} // Block from 8212E234h-8212E260h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212E260h
// Function '?Unswizzle@CPSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E260);
		  /* 8212E260h */ case    0:  		/* addi R11, R11, 1 */
		/* 8212E260h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E260h case    0:*/		return 0x8212E264;
		  /* 8212E264h */ case    1:  		/* addi R8, R8, 4 */
		/* 8212E264h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8212E264h case    1:*/		return 0x8212E268;
		  /* 8212E268h */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 8212E268h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212E268h case    2:*/		return 0x8212E26C;
		  /* 8212E26Ch */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212E26Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E240;  }
		/* 8212E26Ch case    3:*/		return 0x8212E270;
		  /* 8212E270h */ case    4:  		/* addi R6, R6, 1 */
		/* 8212E270h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8212E270h case    4:*/		return 0x8212E274;
		  /* 8212E274h */ case    5:  		/* add R5, R5, R16 */
		/* 8212E274h case    5:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R16);
		/* 8212E274h case    5:*/		return 0x8212E278;
		  /* 8212E278h */ case    6:  		/* addi R10, R10, 16 */
		/* 8212E278h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8212E278h case    6:*/		return 0x8212E27C;
		  /* 8212E27Ch */ case    7:  		/* cmplw CR6, R6, R18 */
		/* 8212E27Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R18);
		/* 8212E27Ch case    7:*/		return 0x8212E280;
		  /* 8212E280h */ case    8:  		/* bc 12, CR6_LT, -164 */
		/* 8212E280h case    8:*/		if ( regs.CR[6].lt ) { return 0x8212E1DC;  }
		/* 8212E280h case    8:*/		return 0x8212E284;
	}
	return 0x8212E284;
} // Block from 8212E260h-8212E284h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212E284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E284);
		  /* 8212E284h */ case    0:  		/* mr R3, R21 */
		/* 8212E284h case    0:*/		regs.R3 = regs.R21;
		/* 8212E284h case    0:*/		return 0x8212E288;
		  /* 8212E288h */ case    1:  		/* bl -200224 */
		/* 8212E288h case    1:*/		regs.LR = 0x8212E28C; return 0x820FD468;
		/* 8212E288h case    1:*/		return 0x8212E28C;
		  /* 8212E28Ch */ case    2:  		/* or. R31, R3, R3 */
		/* 8212E28Ch case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E28Ch case    2:*/		return 0x8212E290;
		  /* 8212E290h */ case    3:  		/* bc 12, CR0_LT, 832 */
		/* 8212E290h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212E5D0;  }
		/* 8212E290h case    3:*/		return 0x8212E294;
	}
	return 0x8212E294;
} // Block from 8212E284h-8212E294h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212E294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E294);
		  /* 8212E294h */ case    0:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E294h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E294h case    0:*/		return 0x8212E298;
		  /* 8212E298h */ case    1:  		/* mr R31, R17 */
		/* 8212E298h case    1:*/		regs.R31 = regs.R17;
		/* 8212E298h case    1:*/		return 0x8212E29C;
		  /* 8212E29Ch */ case    2:  		/* stw R17, <#[R11]> */
		/* 8212E29Ch case    2:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E29Ch case    2:*/		return 0x8212E2A0;
		  /* 8212E2A0h */ case    3:  		/* b 768 */
		/* 8212E2A0h case    3:*/		return 0x8212E5A0;
		/* 8212E2A0h case    3:*/		return 0x8212E2A4;
	}
	return 0x8212E2A4;
} // Block from 8212E294h-8212E2A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212E2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E2A4);
		  /* 8212E2A4h */ case    0:  		/* addi R7, R7, 4 */
		/* 8212E2A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8212E2A4h case    0:*/		return 0x8212E2A8;
		  /* 8212E2A8h */ case    1:  		/* cmplwi CR6, R7, 32 */
		/* 8212E2A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000020);
		/* 8212E2A8h case    1:*/		return 0x8212E2AC;
		  /* 8212E2ACh */ case    2:  		/* bc 12, CR6_LT, -116 */
		/* 8212E2ACh case    2:*/		if ( regs.CR[6].lt ) { return 0x8212E238;  }
		/* 8212E2ACh case    2:*/		return 0x8212E2B0;
		  /* 8212E2B0h */ case    3:  		/* lwz R11, <#[R21 + 108]> */
		/* 8212E2B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000006C) );
		/* 8212E2B0h case    3:*/		return 0x8212E2B4;
		  /* 8212E2B4h */ case    4:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8212E2B4h case    4:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8212E2B4h case    4:*/		return 0x8212E2B8;
		  /* 8212E2B8h */ case    5:  		/* bc 12, CR0_EQ, -52 */
		/* 8212E2B8h case    5:*/		if ( regs.CR[0].eq ) { return 0x8212E284;  }
		/* 8212E2B8h case    5:*/		return 0x8212E2BC;
		  /* 8212E2BCh */ case    6:  		/* mr R6, R18 */
		/* 8212E2BCh case    6:*/		regs.R6 = regs.R18;
		/* 8212E2BCh case    6:*/		return 0x8212E2C0;
		  /* 8212E2C0h */ case    7:  		/* mr R5, R16 */
		/* 8212E2C0h case    7:*/		regs.R5 = regs.R16;
		/* 8212E2C0h case    7:*/		return 0x8212E2C4;
		  /* 8212E2C4h */ case    8:  		/* addi R4, R1, 84 */
		/* 8212E2C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x54);
		/* 8212E2C4h case    8:*/		return 0x8212E2C8;
		  /* 8212E2C8h */ case    9:  		/* mr R3, R21 */
		/* 8212E2C8h case    9:*/		regs.R3 = regs.R21;
		/* 8212E2C8h case    9:*/		return 0x8212E2CC;
		  /* 8212E2CCh */ case   10:  		/* bl -4052 */
		/* 8212E2CCh case   10:*/		regs.LR = 0x8212E2D0; return 0x8212D2F8;
		/* 8212E2CCh case   10:*/		return 0x8212E2D0;
		  /* 8212E2D0h */ case   11:  		/* lwz R15, <#[R1 + 84]> */
		/* 8212E2D0h case   11:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x00000054) );
		/* 8212E2D0h case   11:*/		return 0x8212E2D4;
		  /* 8212E2D4h */ case   12:  		/* or. R31, R3, R3 */
		/* 8212E2D4h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E2D4h case   12:*/		return 0x8212E2D8;
		  /* 8212E2D8h */ case   13:  		/* bc 12, CR0_LT, 736 */
		/* 8212E2D8h case   13:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E2D8h case   13:*/		return 0x8212E2DC;
		  /* 8212E2DCh */ case   14:  		/* cmplwi CR6, R15, 0 */
		/* 8212E2DCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 8212E2DCh case   14:*/		return 0x8212E2E0;
		  /* 8212E2E0h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 8212E2E0h case   15:*/		if ( regs.CR[6].eq ) { return 0x8212E2FC;  }
		/* 8212E2E0h case   15:*/		return 0x8212E2E4;
		  /* 8212E2E4h */ case   16:  		/* mr R4, R15 */
		/* 8212E2E4h case   16:*/		regs.R4 = regs.R15;
		/* 8212E2E4h case   16:*/		return 0x8212E2E8;
		  /* 8212E2E8h */ case   17:  		/* mr R3, R21 */
		/* 8212E2E8h case   17:*/		regs.R3 = regs.R21;
		/* 8212E2E8h case   17:*/		return 0x8212E2EC;
		  /* 8212E2ECh */ case   18:  		/* bl -201268 */
		/* 8212E2ECh case   18:*/		regs.LR = 0x8212E2F0; return 0x820FD0B8;
		/* 8212E2ECh case   18:*/		return 0x8212E2F0;
		  /* 8212E2F0h */ case   19:  		/* or. R31, R3, R3 */
		/* 8212E2F0h case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E2F0h case   19:*/		return 0x8212E2F4;
		  /* 8212E2F4h */ case   20:  		/* bc 12, CR0_LT, 708 */
		/* 8212E2F4h case   20:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E2F4h case   20:*/		return 0x8212E2F8;
		  /* 8212E2F8h */ case   21:  		/* mr R15, R17 */
		/* 8212E2F8h case   21:*/		regs.R15 = regs.R17;
		/* 8212E2F8h case   21:*/		return 0x8212E2FC;
	}
	return 0x8212E2FC;
} // Block from 8212E2A4h-8212E2FCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212E2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E2FC);
		  /* 8212E2FCh */ case    0:  		/* li R3, 116 */
		/* 8212E2FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212E2FCh case    0:*/		return 0x8212E300;
		  /* 8212E300h */ case    1:  		/* bl -204136 */
		/* 8212E300h case    1:*/		regs.LR = 0x8212E304; return 0x820FC598;
		/* 8212E300h case    1:*/		return 0x8212E304;
		  /* 8212E304h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8212E304h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212E304h case    2:*/		return 0x8212E308;
		  /* 8212E308h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 8212E308h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212E318;  }
		/* 8212E308h case    3:*/		return 0x8212E30C;
		  /* 8212E30Ch */ case    4:  		/* bl -205932 */
		/* 8212E30Ch case    4:*/		regs.LR = 0x8212E310; return 0x820FBEA0;
		/* 8212E30Ch case    4:*/		return 0x8212E310;
		  /* 8212E310h */ case    5:  		/* mr R29, R3 */
		/* 8212E310h case    5:*/		regs.R29 = regs.R3;
		/* 8212E310h case    5:*/		return 0x8212E314;
		  /* 8212E314h */ case    6:  		/* b 8 */
		/* 8212E314h case    6:*/		return 0x8212E31C;
		/* 8212E314h case    6:*/		return 0x8212E318;
	}
	return 0x8212E318;
} // Block from 8212E2FCh-8212E318h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E318);
		  /* 8212E318h */ case    0:  		/* mr R29, R17 */
		/* 8212E318h case    0:*/		regs.R29 = regs.R17;
		/* 8212E318h case    0:*/		return 0x8212E31C;
	}
	return 0x8212E31C;
} // Block from 8212E318h-8212E31Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E31C);
		  /* 8212E31Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8212E31Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212E31Ch case    0:*/		return 0x8212E320;
		  /* 8212E320h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8212E320h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212E330;  }
		/* 8212E320h case    1:*/		return 0x8212E324;
		  /* 8212E324h */ case    2:  		/* lis R31, -32761 */
		/* 8212E324h case    2:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 8212E324h case    2:*/		return 0x8212E328;
		  /* 8212E328h */ case    3:  		/* ori R31, R31, 14 */
		/* 8212E328h case    3:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 8212E328h case    3:*/		return 0x8212E32C;
		  /* 8212E32Ch */ case    4:  		/* b 652 */
		/* 8212E32Ch case    4:*/		return 0x8212E5B8;
		/* 8212E32Ch case    4:*/		return 0x8212E330;
	}
	return 0x8212E330;
} // Block from 8212E31Ch-8212E330h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212E330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E330);
		  /* 8212E330h */ case    0:  		/* lwz R5, <#[R21 + 8]> */
		/* 8212E330h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R21 + 0x00000008) );
		/* 8212E330h case    0:*/		return 0x8212E334;
		  /* 8212E334h */ case    1:  		/* mr R30, R17 */
		/* 8212E334h case    1:*/		regs.R30 = regs.R17;
		/* 8212E334h case    1:*/		return 0x8212E338;
		  /* 8212E338h */ case    2:  		/* mr R6, R17 */
		/* 8212E338h case    2:*/		regs.R6 = regs.R17;
		/* 8212E338h case    2:*/		return 0x8212E33C;
		  /* 8212E33Ch */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 8212E33Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8212E33Ch case    3:*/		return 0x8212E340;
		  /* 8212E340h */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 8212E340h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212E398;  }
		/* 8212E340h case    4:*/		return 0x8212E344;
		  /* 8212E344h */ case    5:  		/* lwz R8, <#[R21 + 20]> */
		/* 8212E344h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000014) );
		/* 8212E344h case    5:*/		return 0x8212E348;
		  /* 8212E348h */ case    6:  		/* mr R9, R17 */
		/* 8212E348h case    6:*/		regs.R9 = regs.R17;
		/* 8212E348h case    6:*/		return 0x8212E34C;
		  /* 8212E34Ch */ case    7:  		/* lwz R7, <#[R21 + 16]> */
		/* 8212E34Ch case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000010) );
		/* 8212E34Ch case    7:*/		return 0x8212E350;
		  /* 8212E350h */ case    8:  		/* lwzx R11, <#[R9 + R8]> */
		/* 8212E350h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8212E350h case    8:*/		return 0x8212E354;
		  /* 8212E354h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212E354h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212E354h case    9:*/		return 0x8212E358;
		  /* 8212E358h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212E358h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212E358h case   10:*/		return 0x8212E35C;
		  /* 8212E35Ch */ case   11:  		/* lwzx R10, <#[R10 + R7]> */
		/* 8212E35Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8212E35Ch case   11:*/		return 0x8212E360;
		  /* 8212E360h */ case   12:  		/* lwz R10, <#[R10 + 4]> */
		/* 8212E360h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8212E360h case   12:*/		return 0x8212E364;
		  /* 8212E364h */ case   13:  		/* rlwinm. R4, R10, 0, 31, 31 */
		/* 8212E364h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R4,regs.R10);
		/* 8212E364h case   13:*/		return 0x8212E368;
		  /* 8212E368h */ case   14:  		/* bc 12, CR0_EQ, 32 */
		/* 8212E368h case   14:*/		if ( regs.CR[0].eq ) { return 0x8212E388;  }
		/* 8212E368h case   14:*/		return 0x8212E36C;
		  /* 8212E36Ch */ case   15:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 8212E36Ch case   15:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 8212E36Ch case   15:*/		return 0x8212E370;
		  /* 8212E370h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 8212E370h case   16:*/		if ( regs.CR[0].eq ) { return 0x8212E388;  }
		/* 8212E370h case   16:*/		return 0x8212E374;
		  /* 8212E374h */ case   17:  		/* lwz R11, <#[R11 + 12]> */
		/* 8212E374h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212E374h case   17:*/		return 0x8212E378;
		  /* 8212E378h */ case   18:  		/* addi R11, R11, 1 */
		/* 8212E378h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E378h case   18:*/		return 0x8212E37C;
		  /* 8212E37Ch */ case   19:  		/* cmplw CR6, R30, R11 */
		/* 8212E37Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8212E37Ch case   19:*/		return 0x8212E380;
		  /* 8212E380h */ case   20:  		/* bc 4, CR6_LT, 8 */
		/* 8212E380h case   20:*/		if ( !regs.CR[6].lt ) { return 0x8212E388;  }
		/* 8212E380h case   20:*/		return 0x8212E384;
		  /* 8212E384h */ case   21:  		/* mr R30, R11 */
		/* 8212E384h case   21:*/		regs.R30 = regs.R11;
		/* 8212E384h case   21:*/		return 0x8212E388;
	}
	return 0x8212E388;
} // Block from 8212E330h-8212E388h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212E388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E388);
		  /* 8212E388h */ case    0:  		/* addi R6, R6, 1 */
		/* 8212E388h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8212E388h case    0:*/		return 0x8212E38C;
		  /* 8212E38Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 8212E38Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212E38Ch case    1:*/		return 0x8212E390;
		  /* 8212E390h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 8212E390h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 8212E390h case    2:*/		return 0x8212E394;
		  /* 8212E394h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 8212E394h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E350;  }
		/* 8212E394h case    3:*/		return 0x8212E398;
	}
	return 0x8212E398;
} // Block from 8212E388h-8212E398h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212E398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E398);
		  /* 8212E398h */ case    0:  		/* lis R4, 8272 */
		/* 8212E398h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2050);
		/* 8212E398h case    0:*/		return 0x8212E39C;
		  /* 8212E39Ch */ case    1:  		/* li R7, 0 */
		/* 8212E39Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212E39Ch case    1:*/		return 0x8212E3A0;
		  /* 8212E3A0h */ case    2:  		/* li R6, 1 */
		/* 8212E3A0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8212E3A0h case    2:*/		return 0x8212E3A4;
		  /* 8212E3A4h */ case    3:  		/* li R5, 2 */
		/* 8212E3A4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212E3A4h case    3:*/		return 0x8212E3A8;
		  /* 8212E3A8h */ case    4:  		/* ori R4, R4, 1 */
		/* 8212E3A8h case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8212E3A8h case    4:*/		return 0x8212E3AC;
		  /* 8212E3ACh */ case    5:  		/* mr R3, R29 */
		/* 8212E3ACh case    5:*/		regs.R3 = regs.R29;
		/* 8212E3ACh case    5:*/		return 0x8212E3B0;
		  /* 8212E3B0h */ case    6:  		/* bl -204160 */
		/* 8212E3B0h case    6:*/		regs.LR = 0x8212E3B4; return 0x820FC630;
		/* 8212E3B0h case    6:*/		return 0x8212E3B4;
		  /* 8212E3B4h */ case    7:  		/* or. R31, R3, R3 */
		/* 8212E3B4h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E3B4h case    7:*/		return 0x8212E3B8;
		  /* 8212E3B8h */ case    8:  		/* bc 12, CR0_LT, 512 */
		/* 8212E3B8h case    8:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E3B8h case    8:*/		return 0x8212E3BC;
		  /* 8212E3BCh */ case    9:  		/* mr R3, R29 */
		/* 8212E3BCh case    9:*/		regs.R3 = regs.R29;
		/* 8212E3BCh case    9:*/		return 0x8212E3C0;
		  /* 8212E3C0h */ case   10:  		/* lwz R4, <#[R21 + 260]> */
		/* 8212E3C0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E3C0h case   10:*/		return 0x8212E3C4;
		  /* 8212E3C4h */ case   11:  		/* bl -206036 */
		/* 8212E3C4h case   11:*/		regs.LR = 0x8212E3C8; return 0x820FBEF0;
		/* 8212E3C4h case   11:*/		return 0x8212E3C8;
		  /* 8212E3C8h */ case   12:  		/* or. R31, R3, R3 */
		/* 8212E3C8h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E3C8h case   12:*/		return 0x8212E3CC;
		  /* 8212E3CCh */ case   13:  		/* bc 12, CR0_LT, 492 */
		/* 8212E3CCh case   13:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E3CCh case   13:*/		return 0x8212E3D0;
		  /* 8212E3D0h */ case   14:  		/* lis R11, -32256 */
		/* 8212E3D0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8212E3D0h case   14:*/		return 0x8212E3D4;
		  /* 8212E3D4h */ case   15:  		/* lwz R4, <#[R21 + 136]> */
		/* 8212E3D4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000088) );
		/* 8212E3D4h case   15:*/		return 0x8212E3D8;
		  /* 8212E3D8h */ case   16:  		/* li R6, 0 */
		/* 8212E3D8h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212E3D8h case   16:*/		return 0x8212E3DC;
		  /* 8212E3DCh */ case   17:  		/* mr R5, R30 */
		/* 8212E3DCh case   17:*/		regs.R5 = regs.R30;
		/* 8212E3DCh case   17:*/		return 0x8212E3E0;
		  /* 8212E3E0h */ case   18:  		/* mr R3, R21 */
		/* 8212E3E0h case   18:*/		regs.R3 = regs.R21;
		/* 8212E3E0h case   18:*/		return 0x8212E3E4;
		  /* 8212E3E4h */ case   19:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8212E3E4h case   19:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8212E3E4h case   19:*/		return 0x8212E3E8;
		  /* 8212E3E8h */ case   20:  		/* fmr FR1, FR31 */
		/* 8212E3E8h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8212E3E8h case   20:*/		return 0x8212E3EC;
		  /* 8212E3ECh */ case   21:  		/* bl -201156 */
		/* 8212E3ECh case   21:*/		regs.LR = 0x8212E3F0; return 0x820FD228;
		/* 8212E3ECh case   21:*/		return 0x8212E3F0;
		  /* 8212E3F0h */ case   22:  		/* mr R28, R3 */
		/* 8212E3F0h case   22:*/		regs.R28 = regs.R3;
		/* 8212E3F0h case   22:*/		return 0x8212E3F4;
		  /* 8212E3F4h */ case   23:  		/* addi R25, R30, 1 */
		/* 8212E3F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R30,0x1);
		/* 8212E3F4h case   23:*/		return 0x8212E3F8;
		  /* 8212E3F8h */ case   24:  		/* cmpwi CR6, R3, -1 */
		/* 8212E3F8h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8212E3F8h case   24:*/		return 0x8212E3FC;
		  /* 8212E3FCh */ case   25:  		/* bc 12, CR6_EQ, -216 */
		/* 8212E3FCh case   25:*/		if ( regs.CR[6].eq ) { return 0x8212E324;  }
		/* 8212E3FCh case   25:*/		return 0x8212E400;
		  /* 8212E400h */ case   26:  		/* lwz R11, <#[R29 + 16]> */
		/* 8212E400h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8212E400h case   26:*/		return 0x8212E404;
		  /* 8212E404h */ case   27:  		/* rlwinm R30, R16, 2, 0, 29 */
		/* 8212E404h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R16);
		/* 8212E404h case   27:*/		return 0x8212E408;
		  /* 8212E408h */ case   28:  		/* mr R4, R29 */
		/* 8212E408h case   28:*/		regs.R4 = regs.R29;
		/* 8212E408h case   28:*/		return 0x8212E40C;
		  /* 8212E40Ch */ case   29:  		/* mr R3, R21 */
		/* 8212E40Ch case   29:*/		regs.R3 = regs.R21;
		/* 8212E40Ch case   29:*/		return 0x8212E410;
		  /* 8212E410h */ case   30:  		/* stw R28, <#[R11]> */
		/* 8212E410h case   30:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E410h case   30:*/		return 0x8212E414;
		  /* 8212E414h */ case   31:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E414h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E414h case   31:*/		return 0x8212E418;
		  /* 8212E418h */ case   32:  		/* lwz R10, <#[R29 + 8]> */
		/* 8212E418h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8212E418h case   32:*/		return 0x8212E41C;
		  /* 8212E41Ch */ case   33:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212E41Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212E41Ch case   33:*/		return 0x8212E420;
		  /* 8212E420h */ case   34:  		/* lwz R11, <#[R11]> */
		/* 8212E420h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E420h case   34:*/		return 0x8212E424;
		  /* 8212E424h */ case   35:  		/* stw R11, <#[R10]> */
		/* 8212E424h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212E424h case   35:*/		return 0x8212E428;
		  /* 8212E428h */ case   36:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E428h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E428h case   36:*/		return 0x8212E42C;
		  /* 8212E42Ch */ case   37:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212E42Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212E42Ch case   37:*/		return 0x8212E430;
		  /* 8212E430h */ case   38:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8212E430h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8212E430h case   38:*/		return 0x8212E434;
		  /* 8212E434h */ case   39:  		/* lwz R10, <#[R29 + 8]> */
		/* 8212E434h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8212E434h case   39:*/		return 0x8212E438;
		  /* 8212E438h */ case   40:  		/* stw R11, <#[R10 + 4]> */
		/* 8212E438h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8212E438h case   40:*/		return 0x8212E43C;
		  /* 8212E43Ch */ case   41:  		/* bl -201604 */
		/* 8212E43Ch case   41:*/		regs.LR = 0x8212E440; return 0x820FD0B8;
		/* 8212E43Ch case   41:*/		return 0x8212E440;
		  /* 8212E440h */ case   42:  		/* or. R31, R3, R3 */
		/* 8212E440h case   42:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E440h case   42:*/		return 0x8212E444;
		  /* 8212E444h */ case   43:  		/* bc 12, CR0_LT, 372 */
		/* 8212E444h case   43:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E444h case   43:*/		return 0x8212E448;
		  /* 8212E448h */ case   44:  		/* li R29, 1 */
		/* 8212E448h case   44:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8212E448h case   44:*/		return 0x8212E44C;
		  /* 8212E44Ch */ case   45:  		/* cmplwi CR6, R16, 1 */
		/* 8212E44Ch case   45:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000001);
		/* 8212E44Ch case   45:*/		return 0x8212E450;
		  /* 8212E450h */ case   46:  		/* bc 4, CR6_GT, -444 */
		/* 8212E450h case   46:*/		if ( !regs.CR[6].gt ) { return 0x8212E294;  }
		/* 8212E450h case   46:*/		return 0x8212E454;
		  /* 8212E454h */ case   47:  		/* li R27, 4 */
		/* 8212E454h case   47:*/		cpu::op::li<0>(regs,&regs.R27,0x4);
		/* 8212E454h case   47:*/		return 0x8212E458;
		  /* 8212E458h */ case   48:  		/* addi R26, R30, 4 */
		/* 8212E458h case   48:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R30,0x4);
		/* 8212E458h case   48:*/		return 0x8212E45C;
		  /* 8212E45Ch */ case   49:  		/* li R3, 116 */
		/* 8212E45Ch case   49:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212E45Ch case   49:*/		return 0x8212E460;
		  /* 8212E460h */ case   50:  		/* bl -204488 */
		/* 8212E460h case   50:*/		regs.LR = 0x8212E464; return 0x820FC598;
		/* 8212E460h case   50:*/		return 0x8212E464;
		  /* 8212E464h */ case   51:  		/* cmplwi CR0, R3, 0 */
		/* 8212E464h case   51:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212E464h case   51:*/		return 0x8212E468;
		  /* 8212E468h */ case   52:  		/* bc 12, CR0_EQ, 16 */
		/* 8212E468h case   52:*/		if ( regs.CR[0].eq ) { return 0x8212E478;  }
		/* 8212E468h case   52:*/		return 0x8212E46C;
		  /* 8212E46Ch */ case   53:  		/* bl -206284 */
		/* 8212E46Ch case   53:*/		regs.LR = 0x8212E470; return 0x820FBEA0;
		/* 8212E46Ch case   53:*/		return 0x8212E470;
		  /* 8212E470h */ case   54:  		/* mr R30, R3 */
		/* 8212E470h case   54:*/		regs.R30 = regs.R3;
		/* 8212E470h case   54:*/		return 0x8212E474;
		  /* 8212E474h */ case   55:  		/* b 8 */
		/* 8212E474h case   55:*/		return 0x8212E47C;
		/* 8212E474h case   55:*/		return 0x8212E478;
	}
	return 0x8212E478;
} // Block from 8212E398h-8212E478h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8212E478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E478);
		  /* 8212E478h */ case    0:  		/* mr R30, R17 */
		/* 8212E478h case    0:*/		regs.R30 = regs.R17;
		/* 8212E478h case    0:*/		return 0x8212E47C;
	}
	return 0x8212E47C;
} // Block from 8212E478h-8212E47Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E47C);
		  /* 8212E47Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8212E47Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8212E47Ch case    0:*/		return 0x8212E480;
		  /* 8212E480h */ case    1:  		/* bc 12, CR6_EQ, -348 */
		/* 8212E480h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E324;  }
		/* 8212E480h case    1:*/		return 0x8212E484;
		  /* 8212E484h */ case    2:  		/* lis R4, 28720 */
		/* 8212E484h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x7030);
		/* 8212E484h case    2:*/		return 0x8212E488;
		  /* 8212E488h */ case    3:  		/* li R7, 0 */
		/* 8212E488h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212E488h case    3:*/		return 0x8212E48C;
		  /* 8212E48Ch */ case    4:  		/* li R6, 1 */
		/* 8212E48Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8212E48Ch case    4:*/		return 0x8212E490;
		  /* 8212E490h */ case    5:  		/* li R5, 3 */
		/* 8212E490h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212E490h case    5:*/		return 0x8212E494;
		  /* 8212E494h */ case    6:  		/* ori R4, R4, 1 */
		/* 8212E494h case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8212E494h case    6:*/		return 0x8212E498;
		  /* 8212E498h */ case    7:  		/* mr R3, R30 */
		/* 8212E498h case    7:*/		regs.R3 = regs.R30;
		/* 8212E498h case    7:*/		return 0x8212E49C;
		  /* 8212E49Ch */ case    8:  		/* bl -204396 */
		/* 8212E49Ch case    8:*/		regs.LR = 0x8212E4A0; return 0x820FC630;
		/* 8212E49Ch case    8:*/		return 0x8212E4A0;
		  /* 8212E4A0h */ case    9:  		/* or. R31, R3, R3 */
		/* 8212E4A0h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E4A0h case    9:*/		return 0x8212E4A4;
		  /* 8212E4A4h */ case   10:  		/* bc 12, CR0_LT, 276 */
		/* 8212E4A4h case   10:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E4A4h case   10:*/		return 0x8212E4A8;
		  /* 8212E4A8h */ case   11:  		/* mr R3, R30 */
		/* 8212E4A8h case   11:*/		regs.R3 = regs.R30;
		/* 8212E4A8h case   11:*/		return 0x8212E4AC;
		  /* 8212E4ACh */ case   12:  		/* lwz R4, <#[R21 + 260]> */
		/* 8212E4ACh case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E4ACh case   12:*/		return 0x8212E4B0;
		  /* 8212E4B0h */ case   13:  		/* bl -206272 */
		/* 8212E4B0h case   13:*/		regs.LR = 0x8212E4B4; return 0x820FBEF0;
		/* 8212E4B0h case   13:*/		return 0x8212E4B4;
		  /* 8212E4B4h */ case   14:  		/* or. R31, R3, R3 */
		/* 8212E4B4h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E4B4h case   14:*/		return 0x8212E4B8;
		  /* 8212E4B8h */ case   15:  		/* bc 12, CR0_LT, 256 */
		/* 8212E4B8h case   15:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E4B8h case   15:*/		return 0x8212E4BC;
		  /* 8212E4BCh */ case   16:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E4BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E4BCh case   16:*/		return 0x8212E4C0;
		  /* 8212E4C0h */ case   17:  		/* addi R10, R16, -1 */
		/* 8212E4C0h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R16,0xFFFFFFFF);
		/* 8212E4C0h case   17:*/		return 0x8212E4C4;
		  /* 8212E4C4h */ case   18:  		/* lwz R9, <#[R30 + 8]> */
		/* 8212E4C4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 8212E4C4h case   18:*/		return 0x8212E4C8;
		  /* 8212E4C8h */ case   19:  		/* cmplw CR6, R29, R10 */
		/* 8212E4C8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8212E4C8h case   19:*/		return 0x8212E4CC;
		  /* 8212E4CCh */ case   20:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212E4CCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212E4CCh case   20:*/		return 0x8212E4D0;
		  /* 8212E4D0h */ case   21:  		/* lwzx R11, <#[R11 + R27]> */
		/* 8212E4D0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8212E4D0h case   21:*/		return 0x8212E4D4;
		  /* 8212E4D4h */ case   22:  		/* stw R11, <#[R9]> */
		/* 8212E4D4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8212E4D4h case   22:*/		return 0x8212E4D8;
		  /* 8212E4D8h */ case   23:  		/* lwz R10, <#[R21 + 260]> */
		/* 8212E4D8h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E4D8h case   23:*/		return 0x8212E4DC;
		  /* 8212E4DCh */ case   24:  		/* lwz R10, <#[R10 + 8]> */
		/* 8212E4DCh case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8212E4DCh case   24:*/		return 0x8212E4E0;
		  /* 8212E4E0h */ case   25:  		/* lwzx R10, <#[R10 + R26]> */
		/* 8212E4E0h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 8212E4E0h case   25:*/		return 0x8212E4E4;
		  /* 8212E4E4h */ case   26:  		/* lwz R11, <#[R30 + 8]> */
		/* 8212E4E4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8212E4E4h case   26:*/		return 0x8212E4E8;
		  /* 8212E4E8h */ case   27:  		/* stw R10, <#[R11 + 4]> */
		/* 8212E4E8h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212E4E8h case   27:*/		return 0x8212E4EC;
		  /* 8212E4ECh */ case   28:  		/* lwz R11, <#[R30 + 8]> */
		/* 8212E4ECh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8212E4ECh case   28:*/		return 0x8212E4F0;
		  /* 8212E4F0h */ case   29:  		/* stw R28, <#[R11 + 8]> */
		/* 8212E4F0h case   29:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 8212E4F0h case   29:*/		return 0x8212E4F4;
		  /* 8212E4F4h */ case   30:  		/* bc 12, CR6_EQ, 56 */
		/* 8212E4F4h case   30:*/		if ( regs.CR[6].eq ) { return 0x8212E52C;  }
		/* 8212E4F4h case   30:*/		return 0x8212E4F8;
		  /* 8212E4F8h */ case   31:  		/* li R6, 0 */
		/* 8212E4F8h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212E4F8h case   31:*/		return 0x8212E4FC;
		  /* 8212E4FCh */ case   32:  		/* lwz R4, <#[R21 + 136]> */
		/* 8212E4FCh case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000088) );
		/* 8212E4FCh case   32:*/		return 0x8212E500;
		  /* 8212E500h */ case   33:  		/* mr R5, R25 */
		/* 8212E500h case   33:*/		regs.R5 = regs.R25;
		/* 8212E500h case   33:*/		return 0x8212E504;
		  /* 8212E504h */ case   34:  		/* fmr FR1, FR31 */
		/* 8212E504h case   34:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8212E504h case   34:*/		return 0x8212E508;
		  /* 8212E508h */ case   35:  		/* mr R3, R21 */
		/* 8212E508h case   35:*/		regs.R3 = regs.R21;
		/* 8212E508h case   35:*/		return 0x8212E50C;
		  /* 8212E50Ch */ case   36:  		/* bl -201444 */
		/* 8212E50Ch case   36:*/		regs.LR = 0x8212E510; return 0x820FD228;
		/* 8212E50Ch case   36:*/		return 0x8212E510;
		  /* 8212E510h */ case   37:  		/* mr R28, R3 */
		/* 8212E510h case   37:*/		regs.R28 = regs.R3;
		/* 8212E510h case   37:*/		return 0x8212E514;
		  /* 8212E514h */ case   38:  		/* addi R25, R25, 1 */
		/* 8212E514h case   38:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8212E514h case   38:*/		return 0x8212E518;
		  /* 8212E518h */ case   39:  		/* cmpwi CR6, R3, -1 */
		/* 8212E518h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8212E518h case   39:*/		return 0x8212E51C;
		  /* 8212E51Ch */ case   40:  		/* bc 12, CR6_EQ, -504 */
		/* 8212E51Ch case   40:*/		if ( regs.CR[6].eq ) { return 0x8212E324;  }
		/* 8212E51Ch case   40:*/		return 0x8212E520;
		  /* 8212E520h */ case   41:  		/* lwz R11, <#[R30 + 16]> */
		/* 8212E520h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8212E520h case   41:*/		return 0x8212E524;
		  /* 8212E524h */ case   42:  		/* stw R3, <#[R11]> */
		/* 8212E524h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E524h case   42:*/		return 0x8212E528;
		  /* 8212E528h */ case   43:  		/* b 24 */
		/* 8212E528h case   43:*/		return 0x8212E540;
		/* 8212E528h case   43:*/		return 0x8212E52C;
	}
	return 0x8212E52C;
} // Block from 8212E47Ch-8212E52Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8212E52Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E52C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E52C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E52C);
		  /* 8212E52Ch */ case    0:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E52Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E52Ch case    0:*/		return 0x8212E530;
		  /* 8212E530h */ case    1:  		/* lwz R10, <#[R30 + 16]> */
		/* 8212E530h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8212E530h case    1:*/		return 0x8212E534;
		  /* 8212E534h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 8212E534h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8212E534h case    2:*/		return 0x8212E538;
		  /* 8212E538h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 8212E538h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E538h case    3:*/		return 0x8212E53C;
		  /* 8212E53Ch */ case    4:  		/* stw R11, <#[R10]> */
		/* 8212E53Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212E53Ch case    4:*/		return 0x8212E540;
	}
	return 0x8212E540;
} // Block from 8212E52Ch-8212E540h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212E540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E540);
		  /* 8212E540h */ case    0:  		/* mr R4, R30 */
		/* 8212E540h case    0:*/		regs.R4 = regs.R30;
		/* 8212E540h case    0:*/		return 0x8212E544;
		  /* 8212E544h */ case    1:  		/* mr R3, R21 */
		/* 8212E544h case    1:*/		regs.R3 = regs.R21;
		/* 8212E544h case    1:*/		return 0x8212E548;
		  /* 8212E548h */ case    2:  		/* bl -201872 */
		/* 8212E548h case    2:*/		regs.LR = 0x8212E54C; return 0x820FD0B8;
		/* 8212E548h case    2:*/		return 0x8212E54C;
		  /* 8212E54Ch */ case    3:  		/* or. R31, R3, R3 */
		/* 8212E54Ch case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E54Ch case    3:*/		return 0x8212E550;
		  /* 8212E550h */ case    4:  		/* bc 12, CR0_LT, 104 */
		/* 8212E550h case    4:*/		if ( regs.CR[0].lt ) { return 0x8212E5B8;  }
		/* 8212E550h case    4:*/		return 0x8212E554;
		  /* 8212E554h */ case    5:  		/* addi R29, R29, 1 */
		/* 8212E554h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212E554h case    5:*/		return 0x8212E558;
		  /* 8212E558h */ case    6:  		/* addi R27, R27, 4 */
		/* 8212E558h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8212E558h case    6:*/		return 0x8212E55C;
		  /* 8212E55Ch */ case    7:  		/* addi R26, R26, 4 */
		/* 8212E55Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8212E55Ch case    7:*/		return 0x8212E560;
		  /* 8212E560h */ case    8:  		/* cmplw CR6, R29, R16 */
		/* 8212E560h case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R16);
		/* 8212E560h case    8:*/		return 0x8212E564;
		  /* 8212E564h */ case    9:  		/* bc 12, CR6_LT, -264 */
		/* 8212E564h case    9:*/		if ( regs.CR[6].lt ) { return 0x8212E45C;  }
		/* 8212E564h case    9:*/		return 0x8212E568;
		  /* 8212E568h */ case   10:  		/* b -724 */
		/* 8212E568h case   10:*/		return 0x8212E294;
		/* 8212E568h case   10:*/		return 0x8212E56C;
	}
	return 0x8212E56C;
} // Block from 8212E540h-8212E56Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212E56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E56C);
		  /* 8212E56Ch */ case    0:  		/* mr R3, R21 */
		/* 8212E56Ch case    0:*/		regs.R3 = regs.R21;
		/* 8212E56Ch case    0:*/		return 0x8212E570;
		  /* 8212E570h */ case    1:  		/* bl -200968 */
		/* 8212E570h case    1:*/		regs.LR = 0x8212E574; return 0x820FD468;
		/* 8212E570h case    1:*/		return 0x8212E574;
		  /* 8212E574h */ case    2:  		/* or. R31, R3, R3 */
		/* 8212E574h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E574h case    2:*/		return 0x8212E578;
		  /* 8212E578h */ case    3:  		/* bc 12, CR0_LT, 88 */
		/* 8212E578h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212E5D0;  }
		/* 8212E578h case    3:*/		return 0x8212E57C;
		  /* 8212E57Ch */ case    4:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E57Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E57Ch case    4:*/		return 0x8212E580;
		  /* 8212E580h */ case    5:  		/* stw R17, <#[R11]> */
		/* 8212E580h case    5:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E580h case    5:*/		return 0x8212E584;
		  /* 8212E584h */ case    6:  		/* b 76 */
		/* 8212E584h case    6:*/		return 0x8212E5D0;
		/* 8212E584h case    6:*/		return 0x8212E588;
	}
	return 0x8212E588;
} // Block from 8212E56Ch-8212E588h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E588);
		  /* 8212E588h */ case    0:  		/* mr R3, R21 */
		/* 8212E588h case    0:*/		regs.R3 = regs.R21;
		/* 8212E588h case    0:*/		return 0x8212E58C;
		  /* 8212E58Ch */ case    1:  		/* bl -200996 */
		/* 8212E58Ch case    1:*/		regs.LR = 0x8212E590; return 0x820FD468;
		/* 8212E58Ch case    1:*/		return 0x8212E590;
		  /* 8212E590h */ case    2:  		/* or. R31, R3, R3 */
		/* 8212E590h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212E590h case    2:*/		return 0x8212E594;
		  /* 8212E594h */ case    3:  		/* bc 12, CR0_LT, 60 */
		/* 8212E594h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212E5D0;  }
		/* 8212E594h case    3:*/		return 0x8212E598;
		  /* 8212E598h */ case    4:  		/* lwz R11, <#[R21 + 260]> */
		/* 8212E598h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 8212E598h case    4:*/		return 0x8212E59C;
		  /* 8212E59Ch */ case    5:  		/* stw R17, <#[R11]> */
		/* 8212E59Ch case    5:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E59Ch case    5:*/		return 0x8212E5A0;
	}
	return 0x8212E5A0;
} // Block from 8212E588h-8212E5A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E5A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E5A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E5A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E5A0);
		  /* 8212E5A0h */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 8212E5A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 8212E5A0h case    0:*/		return 0x8212E5A4;
		  /* 8212E5A4h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8212E5A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E5B8;  }
		/* 8212E5A4h case    1:*/		return 0x8212E5A8;
		  /* 8212E5A8h */ case    2:  		/* mr R3, R14 */
		/* 8212E5A8h case    2:*/		regs.R3 = regs.R14;
		/* 8212E5A8h case    2:*/		return 0x8212E5AC;
		  /* 8212E5ACh */ case    3:  		/* bl 978452 */
		/* 8212E5ACh case    3:*/		regs.LR = 0x8212E5B0; return 0x8221D3C0;
		/* 8212E5ACh case    3:*/		return 0x8212E5B0;
		  /* 8212E5B0h */ case    4:  		/* mr R3, R14 */
		/* 8212E5B0h case    4:*/		regs.R3 = regs.R14;
		/* 8212E5B0h case    4:*/		return 0x8212E5B4;
		  /* 8212E5B4h */ case    5:  		/* bl -204740 */
		/* 8212E5B4h case    5:*/		regs.LR = 0x8212E5B8; return 0x820FC5F0;
		/* 8212E5B4h case    5:*/		return 0x8212E5B8;
	}
	return 0x8212E5B8;
} // Block from 8212E5A0h-8212E5B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E5B8);
		  /* 8212E5B8h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 8212E5B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 8212E5B8h case    0:*/		return 0x8212E5BC;
		  /* 8212E5BCh */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8212E5BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E5D0;  }
		/* 8212E5BCh case    1:*/		return 0x8212E5C0;
		  /* 8212E5C0h */ case    2:  		/* mr R3, R15 */
		/* 8212E5C0h case    2:*/		regs.R3 = regs.R15;
		/* 8212E5C0h case    2:*/		return 0x8212E5C4;
		  /* 8212E5C4h */ case    3:  		/* bl 978428 */
		/* 8212E5C4h case    3:*/		regs.LR = 0x8212E5C8; return 0x8221D3C0;
		/* 8212E5C4h case    3:*/		return 0x8212E5C8;
		  /* 8212E5C8h */ case    4:  		/* mr R3, R15 */
		/* 8212E5C8h case    4:*/		regs.R3 = regs.R15;
		/* 8212E5C8h case    4:*/		return 0x8212E5CC;
		  /* 8212E5CCh */ case    5:  		/* bl -204764 */
		/* 8212E5CCh case    5:*/		regs.LR = 0x8212E5D0; return 0x820FC5F0;
		/* 8212E5CCh case    5:*/		return 0x8212E5D0;
	}
	return 0x8212E5D0;
} // Block from 8212E5B8h-8212E5D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E5D0);
		  /* 8212E5D0h */ case    0:  		/* mr R3, R31 */
		/* 8212E5D0h case    0:*/		regs.R3 = regs.R31;
		/* 8212E5D0h case    0:*/		return 0x8212E5D4;
	}
	return 0x8212E5D4;
} // Block from 8212E5D0h-8212E5D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E5D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E5D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E5D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E5D4);
		  /* 8212E5D4h */ case    0:  		/* addi R1, R1, 416 */
		/* 8212E5D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 8212E5D4h case    0:*/		return 0x8212E5D8;
		  /* 8212E5D8h */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8212E5D8h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8212E5D8h case    1:*/		return 0x8212E5DC;
		  /* 8212E5DCh */ case    2:  		/* b -643948 */
		/* 8212E5DCh case    2:*/		return 0x82091270;
		/* 8212E5DCh case    2:*/		return 0x8212E5E0;
	}
	return 0x8212E5E0;
} // Block from 8212E5D4h-8212E5E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212E5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E5E0);
		  /* 8212E5E0h */ case    0:  		/* mfspr R12, LR */
		/* 8212E5E0h case    0:*/		regs.R12 = regs.LR;
		/* 8212E5E0h case    0:*/		return 0x8212E5E4;
		  /* 8212E5E4h */ case    1:  		/* bl -643976 */
		/* 8212E5E4h case    1:*/		regs.LR = 0x8212E5E8; return 0x8209125C;
		/* 8212E5E4h case    1:*/		return 0x8212E5E8;
		  /* 8212E5E8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8212E5E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8212E5E8h case    2:*/		return 0x8212E5EC;
		  /* 8212E5ECh */ case    3:  		/* lwz R10, <#[R4]> */
		/* 8212E5ECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 8212E5ECh case    3:*/		return 0x8212E5F0;
		  /* 8212E5F0h */ case    4:  		/* li R11, 0 */
		/* 8212E5F0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212E5F0h case    4:*/		return 0x8212E5F4;
		  /* 8212E5F4h */ case    5:  		/* lwz R30, <#[R3 + 20]> */
		/* 8212E5F4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000014) );
		/* 8212E5F4h case    5:*/		return 0x8212E5F8;
		  /* 8212E5F8h */ case    6:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 8212E5F8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 8212E5F8h case    6:*/		return 0x8212E5FC;
		  /* 8212E5FCh */ case    7:  		/* lwz R10, <#[R3 + 16]> */
		/* 8212E5FCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8212E5FCh case    7:*/		return 0x8212E600;
		  /* 8212E600h */ case    8:  		/* lwzx R31, <#[R30 + R9]> */
		/* 8212E600h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 8212E600h case    8:*/		return 0x8212E604;
		  /* 8212E604h */ case    9:  		/* lwz R8, <#[R31 + 4]> */
		/* 8212E604h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8212E604h case    9:*/		return 0x8212E608;
		  /* 8212E608h */ case   10:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212E608h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212E608h case   10:*/		return 0x8212E60C;
		  /* 8212E60Ch */ case   11:  		/* lwzx R10, <#[R8 + R10]> */
		/* 8212E60Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8212E60Ch case   11:*/		return 0x8212E610;
		  /* 8212E610h */ case   12:  		/* lwz R10, <#[R10 + 4]> */
		/* 8212E610h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8212E610h case   12:*/		return 0x8212E614;
		  /* 8212E614h */ case   13:  		/* rlwinm. R10, R10, 0, 24, 24 */
		/* 8212E614h case   13:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R10);
		/* 8212E614h case   13:*/		return 0x8212E618;
		  /* 8212E618h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 8212E618h case   14:*/		if ( regs.CR[0].eq ) { return 0x8212E628;  }
		/* 8212E618h case   14:*/		return 0x8212E61C;
		  /* 8212E61Ch */ case   15:  		/* lis R11, 228 */
		/* 8212E61Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xE4);
		/* 8212E61Ch case   15:*/		return 0x8212E620;
		  /* 8212E620h */ case   16:  		/* stw R11, <#[R7]> */
		/* 8212E620h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8212E620h case   16:*/		return 0x8212E624;
		  /* 8212E624h */ case   17:  		/* b 548 */
		/* 8212E624h case   17:*/		return 0x8212E848;
		/* 8212E624h case   17:*/		return 0x8212E628;
	}
	return 0x8212E628;
} // Block from 8212E5E0h-8212E628h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8212E628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E628);
		  /* 8212E628h */ case    0:  		/* rlwinm. R10, R6, 0, 15, 15 */
		/* 8212E628h case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R6);
		/* 8212E628h case    0:*/		return 0x8212E62C;
		  /* 8212E62Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8212E62Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8212E63C;  }
		/* 8212E62Ch case    1:*/		return 0x8212E630;
		  /* 8212E630h */ case    2:  		/* li R10, 0 */
		/* 8212E630h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212E630h case    2:*/		return 0x8212E634;
		  /* 8212E634h */ case    3:  		/* li R11, 1 */
		/* 8212E634h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212E634h case    3:*/		return 0x8212E638;
		  /* 8212E638h */ case    4:  		/* stw R10, <#[R1 + 80]> */
		/* 8212E638h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8212E638h case    4:*/		return 0x8212E63C;
	}
	return 0x8212E63C;
} // Block from 8212E628h-8212E63Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212E63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E63C);
		  /* 8212E63Ch */ case    0:  		/* rlwinm. R10, R6, 0, 14, 14 */
		/* 8212E63Ch case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R10,regs.R6);
		/* 8212E63Ch case    0:*/		return 0x8212E640;
		  /* 8212E640h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8212E640h case    1:*/		if ( regs.CR[0].eq ) { return 0x8212E658;  }
		/* 8212E640h case    1:*/		return 0x8212E644;
		  /* 8212E644h */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8212E644h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8212E644h case    2:*/		return 0x8212E648;
		  /* 8212E648h */ case    3:  		/* addi R8, R1, 80 */
		/* 8212E648h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8212E648h case    3:*/		return 0x8212E64C;
		  /* 8212E64Ch */ case    4:  		/* li R29, 1 */
		/* 8212E64Ch case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8212E64Ch case    4:*/		return 0x8212E650;
		  /* 8212E650h */ case    5:  		/* addi R11, R11, 1 */
		/* 8212E650h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E650h case    5:*/		return 0x8212E654;
		  /* 8212E654h */ case    6:  		/* stwx R29, <#[R10 + R8]> */
		/* 8212E654h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212E654h case    6:*/		return 0x8212E658;
	}
	return 0x8212E658;
} // Block from 8212E63Ch-8212E658h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E658);
		  /* 8212E658h */ case    0:  		/* rlwinm. R10, R6, 0, 13, 13 */
		/* 8212E658h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R6);
		/* 8212E658h case    0:*/		return 0x8212E65C;
		  /* 8212E65Ch */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8212E65Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8212E674;  }
		/* 8212E65Ch case    1:*/		return 0x8212E660;
		  /* 8212E660h */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8212E660h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8212E660h case    2:*/		return 0x8212E664;
		  /* 8212E664h */ case    3:  		/* addi R8, R1, 80 */
		/* 8212E664h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8212E664h case    3:*/		return 0x8212E668;
		  /* 8212E668h */ case    4:  		/* li R29, 2 */
		/* 8212E668h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x2);
		/* 8212E668h case    4:*/		return 0x8212E66C;
		  /* 8212E66Ch */ case    5:  		/* addi R11, R11, 1 */
		/* 8212E66Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E66Ch case    5:*/		return 0x8212E670;
		  /* 8212E670h */ case    6:  		/* stwx R29, <#[R10 + R8]> */
		/* 8212E670h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212E670h case    6:*/		return 0x8212E674;
	}
	return 0x8212E674;
} // Block from 8212E658h-8212E674h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E674);
		  /* 8212E674h */ case    0:  		/* rlwinm. R10, R6, 0, 12, 12 */
		/* 8212E674h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R6);
		/* 8212E674h case    0:*/		return 0x8212E678;
		  /* 8212E678h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8212E678h case    1:*/		if ( regs.CR[0].eq ) { return 0x8212E690;  }
		/* 8212E678h case    1:*/		return 0x8212E67C;
		  /* 8212E67Ch */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8212E67Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8212E67Ch case    2:*/		return 0x8212E680;
		  /* 8212E680h */ case    3:  		/* addi R8, R1, 80 */
		/* 8212E680h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8212E680h case    3:*/		return 0x8212E684;
		  /* 8212E684h */ case    4:  		/* li R6, 3 */
		/* 8212E684h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8212E684h case    4:*/		return 0x8212E688;
		  /* 8212E688h */ case    5:  		/* addi R11, R11, 1 */
		/* 8212E688h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E688h case    5:*/		return 0x8212E68C;
		  /* 8212E68Ch */ case    6:  		/* stwx R6, <#[R10 + R8]> */
		/* 8212E68Ch case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212E68Ch case    6:*/		return 0x8212E690;
	}
	return 0x8212E690;
} // Block from 8212E674h-8212E690h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E690);
		  /* 8212E690h */ case    0:  		/* cmplw CR6, R5, R11 */
		/* 8212E690h case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8212E690h case    0:*/		return 0x8212E694;
		  /* 8212E694h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8212E694h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8212E69C;  }
		/* 8212E694h case    1:*/		return 0x8212E698;
		  /* 8212E698h */ case    2:  		/* mr R5, R11 */
		/* 8212E698h case    2:*/		regs.R5 = regs.R11;
		/* 8212E698h case    2:*/		return 0x8212E69C;
	}
	return 0x8212E69C;
} // Block from 8212E690h-8212E69Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212E69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E69C);
		  /* 8212E69Ch */ case    0:  		/* lwz R11, <#[R3 + 108]> */
		/* 8212E69Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8212E69Ch case    0:*/		return 0x8212E6A0;
		  /* 8212E6A0h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212E6A0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212E6A0h case    1:*/		return 0x8212E6A4;
		  /* 8212E6A4h */ case    2:  		/* srawi. R6, R11, 31 */
		/* 8212E6A4h case    2:*/		cpu::op::srawi<1,31>(regs,&regs.R6,regs.R11);
		/* 8212E6A4h case    2:*/		return 0x8212E6A8;
		  /* 8212E6A8h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 8212E6A8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212E6C0;  }
		/* 8212E6A8h case    3:*/		return 0x8212E6AC;
		  /* 8212E6ACh */ case    4:  		/* addi R10, R1, 96 */
		/* 8212E6ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8212E6ACh case    4:*/		return 0x8212E6B0;
		  /* 8212E6B0h */ case    5:  		/* li R11, -1 */
		/* 8212E6B0h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8212E6B0h case    5:*/		return 0x8212E6B4;
		  /* 8212E6B4h */ case    6:  		/* std R11, <#[R10]> */
		/* 8212E6B4h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212E6B4h case    6:*/		return 0x8212E6B8;
		  /* 8212E6B8h */ case    7:  		/* std R11, <#[R10 + 8]> */
		/* 8212E6B8h case    7:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8212E6B8h case    7:*/		return 0x8212E6BC;
		  /* 8212E6BCh */ case    8:  		/* b 136 */
		/* 8212E6BCh case    8:*/		return 0x8212E744;
		/* 8212E6BCh case    8:*/		return 0x8212E6C0;
	}
	return 0x8212E6C0;
} // Block from 8212E69Ch-8212E6C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212E6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E6C0);
		  /* 8212E6C0h */ case    0:  		/* li R8, 0 */
		/* 8212E6C0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212E6C0h case    0:*/		return 0x8212E6C4;
		  /* 8212E6C4h */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 8212E6C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8212E6C4h case    1:*/		return 0x8212E6C8;
		  /* 8212E6C8h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 8212E6C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212E72C;  }
		/* 8212E6C8h case    2:*/		return 0x8212E6CC;
		  /* 8212E6CCh */ case    3:  		/* lwz R10, <#[R3 + 20]> */
		/* 8212E6CCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8212E6CCh case    3:*/		return 0x8212E6D0;
		  /* 8212E6D0h */ case    4:  		/* mr R11, R4 */
		/* 8212E6D0h case    4:*/		regs.R11 = regs.R4;
		/* 8212E6D0h case    4:*/		return 0x8212E6D4;
		  /* 8212E6D4h */ case    5:  		/* lwzx R9, <#[R10 + R9]> */
		/* 8212E6D4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212E6D4h case    5:*/		return 0x8212E6D8;
		  /* 8212E6D8h */ case    6:  		/* lwz R9, <#[R9 + 16]> */
		/* 8212E6D8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8212E6D8h case    6:*/		return 0x8212E6DC;
		  /* 8212E6DCh */ case    7:  		/* lwz R29, <#[R11]> */
		/* 8212E6DCh case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E6DCh case    7:*/		return 0x8212E6E0;
		  /* 8212E6E0h */ case    8:  		/* rlwinm R29, R29, 2, 0, 29 */
		/* 8212E6E0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R29);
		/* 8212E6E0h case    8:*/		return 0x8212E6E4;
		  /* 8212E6E4h */ case    9:  		/* lwzx R29, <#[R29 + R10]> */
		/* 8212E6E4h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 8212E6E4h case    9:*/		return 0x8212E6E8;
		  /* 8212E6E8h */ case   10:  		/* lwz R29, <#[R29 + 16]> */
		/* 8212E6E8h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000010) );
		/* 8212E6E8h case   10:*/		return 0x8212E6EC;
		  /* 8212E6ECh */ case   11:  		/* cmplw CR6, R9, R29 */
		/* 8212E6ECh case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 8212E6ECh case   11:*/		return 0x8212E6F0;
		  /* 8212E6F0h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 8212E6F0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212E704;  }
		/* 8212E6F0h case   12:*/		return 0x8212E6F4;
		  /* 8212E6F4h */ case   13:  		/* addi R8, R8, 1 */
		/* 8212E6F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8212E6F4h case   13:*/		return 0x8212E6F8;
		  /* 8212E6F8h */ case   14:  		/* addi R11, R11, 4 */
		/* 8212E6F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212E6F8h case   14:*/		return 0x8212E6FC;
		  /* 8212E6FCh */ case   15:  		/* cmplw CR6, R8, R5 */
		/* 8212E6FCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R5);
		/* 8212E6FCh case   15:*/		return 0x8212E700;
		  /* 8212E700h */ case   16:  		/* bc 12, CR6_LT, -36 */
		/* 8212E700h case   16:*/		if ( regs.CR[6].lt ) { return 0x8212E6DC;  }
		/* 8212E700h case   16:*/		return 0x8212E704;
	}
	return 0x8212E704;
} // Block from 8212E6C0h-8212E704h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8212E704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E704);
		  /* 8212E704h */ case    0:  		/* cmplw CR6, R8, R5 */
		/* 8212E704h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R5);
		/* 8212E704h case    0:*/		return 0x8212E708;
		  /* 8212E708h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 8212E708h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8212E72C;  }
		/* 8212E708h case    1:*/		return 0x8212E70C;
		  /* 8212E70Ch */ case    2:  		/* li R10, 4 */
		/* 8212E70Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8212E70Ch case    2:*/		return 0x8212E710;
		  /* 8212E710h */ case    3:  		/* addi R9, R1, 92 */
		/* 8212E710h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x5C);
		/* 8212E710h case    3:*/		return 0x8212E714;
		  /* 8212E714h */ case    4:  		/* li R11, 0 */
		/* 8212E714h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212E714h case    4:*/		return 0x8212E718;
		  /* 8212E718h */ case    5:  		/* mtspr CTR, R10 */
		/* 8212E718h case    5:*/		regs.CTR = regs.R10;
		/* 8212E718h case    5:*/		return 0x8212E71C;
		  /* 8212E71Ch */ case    6:  		/* stwu R11, <#[R9 + 4]> */
		/* 8212E71Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8212E71Ch case    6:*/		return 0x8212E720;
		  /* 8212E720h */ case    7:  		/* addi R11, R11, 1 */
		/* 8212E720h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E720h case    7:*/		return 0x8212E724;
		  /* 8212E724h */ case    8:  		/* bc 16, CR0_LT, -8 */
		/* 8212E724h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212E71C;  }
		/* 8212E724h case    8:*/		return 0x8212E728;
		  /* 8212E728h */ case    9:  		/* b 28 */
		/* 8212E728h case    9:*/		return 0x8212E744;
		/* 8212E728h case    9:*/		return 0x8212E72C;
	}
	return 0x8212E72C;
} // Block from 8212E704h-8212E72Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212E72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E72C);
		  /* 8212E72Ch */ case    0:  		/* li R11, 4 */
		/* 8212E72Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8212E72Ch case    0:*/		return 0x8212E730;
		  /* 8212E730h */ case    1:  		/* lwz R9, <#[R31 + 16]> */
		/* 8212E730h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8212E730h case    1:*/		return 0x8212E734;
		  /* 8212E734h */ case    2:  		/* addi R10, R1, 92 */
		/* 8212E734h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5C);
		/* 8212E734h case    2:*/		return 0x8212E738;
		  /* 8212E738h */ case    3:  		/* mtspr CTR, R11 */
		/* 8212E738h case    3:*/		regs.CTR = regs.R11;
		/* 8212E738h case    3:*/		return 0x8212E73C;
		  /* 8212E73Ch */ case    4:  		/* stwu R9, <#[R10 + 4]> */
		/* 8212E73Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8212E73Ch case    4:*/		return 0x8212E740;
		  /* 8212E740h */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 8212E740h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212E73C;  }
		/* 8212E740h case    5:*/		return 0x8212E744;
	}
	return 0x8212E744;
} // Block from 8212E72Ch-8212E744h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212E744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E744);
		  /* 8212E744h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 8212E744h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8212E744h case    0:*/		return 0x8212E748;
		  /* 8212E748h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 8212E748h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E784;  }
		/* 8212E748h case    1:*/		return 0x8212E74C;
		  /* 8212E74Ch */ case    2:  		/* addi R10, R1, 80 */
		/* 8212E74Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8212E74Ch case    2:*/		return 0x8212E750;
		  /* 8212E750h */ case    3:  		/* mtspr CTR, R5 */
		/* 8212E750h case    3:*/		regs.CTR = regs.R5;
		/* 8212E750h case    3:*/		return 0x8212E754;
		  /* 8212E754h */ case    4:  		/* addi R11, R1, 80 */
		/* 8212E754h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8212E754h case    4:*/		return 0x8212E758;
		  /* 8212E758h */ case    5:  		/* subf R10, R10, R4 */
		/* 8212E758h case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 8212E758h case    5:*/		return 0x8212E75C;
		  /* 8212E75Ch */ case    6:  		/* lwzx R9, <#[R10 + R11]> */
		/* 8212E75Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212E75Ch case    6:*/		return 0x8212E760;
		  /* 8212E760h */ case    7:  		/* addi R8, R1, 96 */
		/* 8212E760h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8212E760h case    7:*/		return 0x8212E764;
		  /* 8212E764h */ case    8:  		/* lwz R5, <#[R11]> */
		/* 8212E764h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E764h case    8:*/		return 0x8212E768;
		  /* 8212E768h */ case    9:  		/* addi R11, R11, 4 */
		/* 8212E768h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212E768h case    9:*/		return 0x8212E76C;
		  /* 8212E76Ch */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8212E76Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8212E76Ch case   10:*/		return 0x8212E770;
		  /* 8212E770h */ case   11:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 8212E770h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 8212E770h case   11:*/		return 0x8212E774;
		  /* 8212E774h */ case   12:  		/* lwzx R9, <#[R9 + R30]> */
		/* 8212E774h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 8212E774h case   12:*/		return 0x8212E778;
		  /* 8212E778h */ case   13:  		/* lwz R9, <#[R9 + 16]> */
		/* 8212E778h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8212E778h case   13:*/		return 0x8212E77C;
		  /* 8212E77Ch */ case   14:  		/* stwx R9, <#[R5 + R8]> */
		/* 8212E77Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + regs.R8 + 0x00000000) );
		/* 8212E77Ch case   14:*/		return 0x8212E780;
		  /* 8212E780h */ case   15:  		/* bc 16, CR0_LT, -36 */
		/* 8212E780h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212E75C;  }
		/* 8212E780h case   15:*/		return 0x8212E784;
	}
	return 0x8212E784;
} // Block from 8212E744h-8212E784h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212E784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E784);
		  /* 8212E784h */ case    0:  		/* cmpwi CR6, R6, 0 */
		/* 8212E784h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 8212E784h case    0:*/		return 0x8212E788;
		  /* 8212E788h */ case    1:  		/* bc 12, CR6_EQ, 144 */
		/* 8212E788h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E818;  }
		/* 8212E788h case    1:*/		return 0x8212E78C;
		  /* 8212E78Ch */ case    2:  		/* lis R11, -32217 */
		/* 8212E78Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8212E78Ch case    2:*/		return 0x8212E790;
		  /* 8212E790h */ case    3:  		/* li R5, 0 */
		/* 8212E790h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212E790h case    3:*/		return 0x8212E794;
		  /* 8212E794h */ case    4:  		/* li R8, 0 */
		/* 8212E794h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212E794h case    4:*/		return 0x8212E798;
		  /* 8212E798h */ case    5:  		/* addi R6, R11, 15624 */
		/* 8212E798h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3D08);
		/* 8212E798h case    5:*/		return 0x8212E79C;
		  /* 8212E79Ch */ case    6:  		/* li R11, 0 */
		/* 8212E79Ch case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212E79Ch case    6:*/		return 0x8212E7A0;
		  /* 8212E7A0h */ case    7:  		/* addi R9, R1, 96 */
		/* 8212E7A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8212E7A0h case    7:*/		return 0x8212E7A4;
		  /* 8212E7A4h */ case    8:  		/* lwz R10, <#[R9]> */
		/* 8212E7A4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8212E7A4h case    8:*/		return 0x8212E7A8;
		  /* 8212E7A8h */ case    9:  		/* cmpwi CR6, R10, -1 */
		/* 8212E7A8h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8212E7A8h case    9:*/		return 0x8212E7AC;
		  /* 8212E7ACh */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 8212E7ACh case   10:*/		if ( regs.CR[6].eq ) { return 0x8212E7C4;  }
		/* 8212E7ACh case   10:*/		return 0x8212E7B0;
		  /* 8212E7B0h */ case   11:  		/* add R4, R8, R11 */
		/* 8212E7B0h case   11:*/		cpu::op::add<0>(regs,&regs.R4,regs.R8,regs.R11);
		/* 8212E7B0h case   11:*/		return 0x8212E7B4;
		  /* 8212E7B4h */ case   12:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 8212E7B4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 8212E7B4h case   12:*/		return 0x8212E7B8;
		  /* 8212E7B8h */ case   13:  		/* lwzx R4, <#[R4 + R6]> */
		/* 8212E7B8h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R6 + 0x00000000) );
		/* 8212E7B8h case   13:*/		return 0x8212E7BC;
		  /* 8212E7BCh */ case   14:  		/* cmplw CR6, R10, R4 */
		/* 8212E7BCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 8212E7BCh case   14:*/		return 0x8212E7C0;
		  /* 8212E7C0h */ case   15:  		/* bc 4, CR6_EQ, 68 */
		/* 8212E7C0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8212E804;  }
		/* 8212E7C0h case   15:*/		return 0x8212E7C4;
	}
	return 0x8212E7C4;
} // Block from 8212E784h-8212E7C4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212E7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E7C4);
		  /* 8212E7C4h */ case    0:  		/* addi R11, R11, 1 */
		/* 8212E7C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212E7C4h case    0:*/		return 0x8212E7C8;
		  /* 8212E7C8h */ case    1:  		/* addi R9, R9, 4 */
		/* 8212E7C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212E7C8h case    1:*/		return 0x8212E7CC;
		  /* 8212E7CCh */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 8212E7CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212E7CCh case    2:*/		return 0x8212E7D0;
		  /* 8212E7D0h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212E7D0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E7A4;  }
		/* 8212E7D0h case    3:*/		return 0x8212E7D4;
		  /* 8212E7D4h */ case    4:  		/* rlwinm R11, R5, 4, 0, 27 */
		/* 8212E7D4h case    4:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R5);
		/* 8212E7D4h case    4:*/		return 0x8212E7D8;
		  /* 8212E7D8h */ case    5:  		/* add. R9, R11, R6 */
		/* 8212E7D8h case    5:*/		cpu::op::add<1>(regs,&regs.R9,regs.R11,regs.R6);
		/* 8212E7D8h case    5:*/		return 0x8212E7DC;
		  /* 8212E7DCh */ case    6:  		/* bc 4, CR0_EQ, 64 */
		/* 8212E7DCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x8212E81C;  }
		/* 8212E7DCh case    6:*/		return 0x8212E7E0;
		  /* 8212E7E0h */ case    7:  		/* lwz R11, <#[R3 + 260]> */
		/* 8212E7E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8212E7E0h case    7:*/		return 0x8212E7E4;
		  /* 8212E7E4h */ case    8:  		/* lis R10, -32253 */
		/* 8212E7E4h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212E7E4h case    8:*/		return 0x8212E7E8;
		  /* 8212E7E8h */ case    9:  		/* li R5, 4818 */
		/* 8212E7E8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x12D2);
		/* 8212E7E8h case    9:*/		return 0x8212E7EC;
		  /* 8212E7ECh */ case   10:  		/* addi R6, R10, 15904 */
		/* 8212E7ECh case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x3E20);
		/* 8212E7ECh case   10:*/		return 0x8212E7F0;
		  /* 8212E7F0h */ case   11:  		/* lwz R4, <#[R11 + 60]> */
		/* 8212E7F0h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212E7F0h case   11:*/		return 0x8212E7F4;
		  /* 8212E7F4h */ case   12:  		/* bl -131268 */
		/* 8212E7F4h case   12:*/		regs.LR = 0x8212E7F8; return 0x8210E730;
		/* 8212E7F4h case   12:*/		return 0x8212E7F8;
		  /* 8212E7F8h */ case   13:  		/* lis R3, -32768 */
		/* 8212E7F8h case   13:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212E7F8h case   13:*/		return 0x8212E7FC;
		  /* 8212E7FCh */ case   14:  		/* ori R3, R3, 16389 */
		/* 8212E7FCh case   14:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212E7FCh case   14:*/		return 0x8212E800;
		  /* 8212E800h */ case   15:  		/* b 76 */
		/* 8212E800h case   15:*/		return 0x8212E84C;
		/* 8212E800h case   15:*/		return 0x8212E804;
	}
	return 0x8212E804;
} // Block from 8212E7C4h-8212E804h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212E804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E804);
		  /* 8212E804h */ case    0:  		/* addi R8, R8, 4 */
		/* 8212E804h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8212E804h case    0:*/		return 0x8212E808;
		  /* 8212E808h */ case    1:  		/* addi R5, R5, 1 */
		/* 8212E808h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8212E808h case    1:*/		return 0x8212E80C;
		  /* 8212E80Ch */ case    2:  		/* cmplwi CR6, R8, 32 */
		/* 8212E80Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000020);
		/* 8212E80Ch case    2:*/		return 0x8212E810;
		  /* 8212E810h */ case    3:  		/* bc 12, CR6_LT, -116 */
		/* 8212E810h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E79C;  }
		/* 8212E810h case    3:*/		return 0x8212E814;
		  /* 8212E814h */ case    4:  		/* b -52 */
		/* 8212E814h case    4:*/		return 0x8212E7E0;
		/* 8212E814h case    4:*/		return 0x8212E818;
	}
	return 0x8212E818;
} // Block from 8212E804h-8212E818h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212E818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E818);
		  /* 8212E818h */ case    0:  		/* addi R9, R1, 96 */
		/* 8212E818h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8212E818h case    0:*/		return 0x8212E81C;
	}
	return 0x8212E81C;
} // Block from 8212E818h-8212E81Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E81C);
		  /* 8212E81Ch */ case    0:  		/* li R8, 4 */
		/* 8212E81Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8212E81Ch case    0:*/		return 0x8212E820;
		  /* 8212E820h */ case    1:  		/* li R10, 0 */
		/* 8212E820h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212E820h case    1:*/		return 0x8212E824;
		  /* 8212E824h */ case    2:  		/* li R11, 16 */
		/* 8212E824h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8212E824h case    2:*/		return 0x8212E828;
		  /* 8212E828h */ case    3:  		/* addi R9, R9, -4 */
		/* 8212E828h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 8212E828h case    3:*/		return 0x8212E82C;
		  /* 8212E82Ch */ case    4:  		/* mtspr CTR, R8 */
		/* 8212E82Ch case    4:*/		regs.CTR = regs.R8;
		/* 8212E82Ch case    4:*/		return 0x8212E830;
		  /* 8212E830h */ case    5:  		/* lwzu R8, <#[R9 + 4]> */
		/* 8212E830h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8212E830h case    5:*/		return 0x8212E834;
		  /* 8212E834h */ case    6:  		/* slw R8, R8, R11 */
		/* 8212E834h case    6:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 8212E834h case    6:*/		return 0x8212E838;
		  /* 8212E838h */ case    7:  		/* or R10, R8, R10 */
		/* 8212E838h case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8212E838h case    7:*/		return 0x8212E83C;
		  /* 8212E83Ch */ case    8:  		/* addi R11, R11, 2 */
		/* 8212E83Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8212E83Ch case    8:*/		return 0x8212E840;
		  /* 8212E840h */ case    9:  		/* bc 16, CR0_LT, -16 */
		/* 8212E840h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212E830;  }
		/* 8212E840h case    9:*/		return 0x8212E844;
		  /* 8212E844h */ case   10:  		/* stw R10, <#[R7]> */
		/* 8212E844h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 8212E844h case   10:*/		return 0x8212E848;
	}
	return 0x8212E848;
} // Block from 8212E81Ch-8212E848h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212E848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E848);
		  /* 8212E848h */ case    0:  		/* li R3, 0 */
		/* 8212E848h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212E848h case    0:*/		return 0x8212E84C;
	}
	return 0x8212E84C;
} // Block from 8212E848h-8212E84Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E84C);
		  /* 8212E84Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8212E84Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8212E84Ch case    0:*/		return 0x8212E850;
		  /* 8212E850h */ case    1:  		/* b -644516 */
		/* 8212E850h case    1:*/		return 0x820912AC;
		/* 8212E850h case    1:*/		return 0x8212E854;
		  /* 8212E854h */ case    2:  		/* nop */
		/* 8212E854h case    2:*/		cpu::op::nop();
		/* 8212E854h case    2:*/		return 0x8212E858;
	}
	return 0x8212E858;
} // Block from 8212E84Ch-8212E858h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212E858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E858);
		  /* 8212E858h */ case    0:  		/* mfspr R12, LR */
		/* 8212E858h case    0:*/		regs.R12 = regs.LR;
		/* 8212E858h case    0:*/		return 0x8212E85C;
		  /* 8212E85Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212E85Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212E85Ch case    1:*/		return 0x8212E860;
		  /* 8212E860h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8212E860h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212E860h case    2:*/		return 0x8212E864;
		  /* 8212E864h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8212E864h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212E864h case    3:*/		return 0x8212E868;
		  /* 8212E868h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8212E868h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8212E868h case    4:*/		return 0x8212E86C;
		  /* 8212E86Ch */ case    5:  		/* lis R11, -32253 */
		/* 8212E86Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212E86Ch case    5:*/		return 0x8212E870;
		  /* 8212E870h */ case    6:  		/* mr R31, R3 */
		/* 8212E870h case    6:*/		regs.R31 = regs.R3;
		/* 8212E870h case    6:*/		return 0x8212E874;
		  /* 8212E874h */ case    7:  		/* addi R11, R11, 15400 */
		/* 8212E874h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3C28);
		/* 8212E874h case    7:*/		return 0x8212E878;
		  /* 8212E878h */ case    8:  		/* mr R30, R4 */
		/* 8212E878h case    8:*/		regs.R30 = regs.R4;
		/* 8212E878h case    8:*/		return 0x8212E87C;
		  /* 8212E87Ch */ case    9:  		/* stw R11, <#[R3]> */
		/* 8212E87Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212E87Ch case    9:*/		return 0x8212E880;
		  /* 8212E880h */ case   10:  		/* bl -265088 */
		/* 8212E880h case   10:*/		regs.LR = 0x8212E884; return 0x820EDD00;
		/* 8212E880h case   10:*/		return 0x8212E884;
		  /* 8212E884h */ case   11:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8212E884h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8212E884h case   11:*/		return 0x8212E888;
		  /* 8212E888h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 8212E888h case   12:*/		if ( regs.CR[0].eq ) { return 0x8212E898;  }
		/* 8212E888h case   12:*/		return 0x8212E88C;
		  /* 8212E88Ch */ case   13:  		/* lis R4, 9345 */
		/* 8212E88Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8212E88Ch case   13:*/		return 0x8212E890;
		  /* 8212E890h */ case   14:  		/* mr R3, R31 */
		/* 8212E890h case   14:*/		regs.R3 = regs.R31;
		/* 8212E890h case   14:*/		return 0x8212E894;
		  /* 8212E894h */ case   15:  		/* bl -681308 */
		/* 8212E894h case   15:*/		regs.LR = 0x8212E898; return 0x82088338;
		/* 8212E894h case   15:*/		return 0x8212E898;
	}
	return 0x8212E898;
} // Block from 8212E858h-8212E898h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212E898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E898);
		  /* 8212E898h */ case    0:  		/* mr R3, R31 */
		/* 8212E898h case    0:*/		regs.R3 = regs.R31;
		/* 8212E898h case    0:*/		return 0x8212E89C;
		  /* 8212E89Ch */ case    1:  		/* addi R1, R1, 112 */
		/* 8212E89Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8212E89Ch case    1:*/		return 0x8212E8A0;
		  /* 8212E8A0h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212E8A0h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212E8A0h case    2:*/		return 0x8212E8A4;
		  /* 8212E8A4h */ case    3:  		/* mtspr LR, R12 */
		/* 8212E8A4h case    3:*/		regs.LR = regs.R12;
		/* 8212E8A4h case    3:*/		return 0x8212E8A8;
		  /* 8212E8A8h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8212E8A8h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212E8A8h case    4:*/		return 0x8212E8AC;
		  /* 8212E8ACh */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8212E8ACh case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212E8ACh case    5:*/		return 0x8212E8B0;
		  /* 8212E8B0h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8212E8B0h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212E8B0h case    6:*/		return 0x8212E8B4;
	}
	return 0x8212E8B4;
} // Block from 8212E898h-8212E8B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E8B4);
		  /* 8212E8B4h */ case    0:  		/* nop */
		/* 8212E8B4h case    0:*/		cpu::op::nop();
		/* 8212E8B4h case    0:*/		return 0x8212E8B8;
	}
	return 0x8212E8B8;
} // Block from 8212E8B4h-8212E8B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212E8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E8B8);
		  /* 8212E8B8h */ case    0:  		/* mfspr R12, LR */
		/* 8212E8B8h case    0:*/		regs.R12 = regs.LR;
		/* 8212E8B8h case    0:*/		return 0x8212E8BC;
		  /* 8212E8BCh */ case    1:  		/* bl -644708 */
		/* 8212E8BCh case    1:*/		regs.LR = 0x8212E8C0; return 0x82091258;
		/* 8212E8BCh case    1:*/		return 0x8212E8C0;
		  /* 8212E8C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8212E8C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8212E8C0h case    2:*/		return 0x8212E8C4;
		  /* 8212E8C4h */ case    3:  		/* mr R31, R3 */
		/* 8212E8C4h case    3:*/		regs.R31 = regs.R3;
		/* 8212E8C4h case    3:*/		return 0x8212E8C8;
		  /* 8212E8C8h */ case    4:  		/* bl -262104 */
		/* 8212E8C8h case    4:*/		regs.LR = 0x8212E8CC; return 0x820EE8F0;
		/* 8212E8C8h case    4:*/		return 0x8212E8CC;
		  /* 8212E8CCh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8212E8CCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212E8CCh case    5:*/		return 0x8212E8D0;
		  /* 8212E8D0h */ case    6:  		/* bc 12, CR0_LT, 156 */
		/* 8212E8D0h case    6:*/		if ( regs.CR[0].lt ) { return 0x8212E96C;  }
		/* 8212E8D0h case    6:*/		return 0x8212E8D4;
		  /* 8212E8D4h */ case    7:  		/* mr R3, R31 */
		/* 8212E8D4h case    7:*/		regs.R3 = regs.R31;
		/* 8212E8D4h case    7:*/		return 0x8212E8D8;
		  /* 8212E8D8h */ case    8:  		/* bl -303352 */
		/* 8212E8D8h case    8:*/		regs.LR = 0x8212E8DC; return 0x820E47E0;
		/* 8212E8D8h case    8:*/		return 0x8212E8DC;
		  /* 8212E8DCh */ case    9:  		/* li R30, 0 */
		/* 8212E8DCh case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212E8DCh case    9:*/		return 0x8212E8E0;
		  /* 8212E8E0h */ case   10:  		/* lwz R28, <#[R31 + 12]> */
		/* 8212E8E0h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212E8E0h case   10:*/		return 0x8212E8E4;
		  /* 8212E8E4h */ case   11:  		/* cmplwi CR6, R28, 0 */
		/* 8212E8E4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8212E8E4h case   11:*/		return 0x8212E8E8;
		  /* 8212E8E8h */ case   12:  		/* bc 12, CR6_EQ, 72 */
		/* 8212E8E8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212E930;  }
		/* 8212E8E8h case   12:*/		return 0x8212E8EC;
		  /* 8212E8ECh */ case   13:  		/* li R29, 0 */
		/* 8212E8ECh case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212E8ECh case   13:*/		return 0x8212E8F0;
		  /* 8212E8F0h */ case   14:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212E8F0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212E8F0h case   14:*/		return 0x8212E8F4;
		  /* 8212E8F4h */ case   15:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8212E8F4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8212E8F4h case   15:*/		return 0x8212E8F8;
		  /* 8212E8F8h */ case   16:  		/* stw R30, <#[R31 + 256]> */
		/* 8212E8F8h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8212E8F8h case   16:*/		return 0x8212E8FC;
		  /* 8212E8FCh */ case   17:  		/* stw R11, <#[R31 + 260]> */
		/* 8212E8FCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212E8FCh case   17:*/		return 0x8212E900;
		  /* 8212E900h */ case   18:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8212E900h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8212E900h case   18:*/		return 0x8212E904;
		  /* 8212E904h */ case   19:  		/* lwz R11, <#[R11]> */
		/* 8212E904h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E904h case   19:*/		return 0x8212E908;
		  /* 8212E908h */ case   20:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 8212E908h case   20:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212E908h case   20:*/		return 0x8212E90C;
		  /* 8212E90Ch */ case   21:  		/* bc 12, CR0_EQ, 20 */
		/* 8212E90Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x8212E920;  }
		/* 8212E90Ch case   21:*/		return 0x8212E910;
		  /* 8212E910h */ case   22:  		/* mr R3, R31 */
		/* 8212E910h case   22:*/		regs.R3 = regs.R31;
		/* 8212E910h case   22:*/		return 0x8212E914;
		  /* 8212E914h */ case   23:  		/* bl -4636 */
		/* 8212E914h case   23:*/		regs.LR = 0x8212E918; return 0x8212D6F8;
		/* 8212E914h case   23:*/		return 0x8212E918;
		  /* 8212E918h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 8212E918h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212E918h case   24:*/		return 0x8212E91C;
		  /* 8212E91Ch */ case   25:  		/* bc 12, CR0_LT, 80 */
		/* 8212E91Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x8212E96C;  }
		/* 8212E91Ch case   25:*/		return 0x8212E920;
	}
	return 0x8212E920;
} // Block from 8212E8B8h-8212E920h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8212E920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E920);
		  /* 8212E920h */ case    0:  		/* addi R30, R30, 1 */
		/* 8212E920h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8212E920h case    0:*/		return 0x8212E924;
		  /* 8212E924h */ case    1:  		/* addi R29, R29, 4 */
		/* 8212E924h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8212E924h case    1:*/		return 0x8212E928;
		  /* 8212E928h */ case    2:  		/* cmplw CR6, R30, R28 */
		/* 8212E928h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 8212E928h case    2:*/		return 0x8212E92C;
		  /* 8212E92Ch */ case    3:  		/* bc 12, CR6_LT, -60 */
		/* 8212E92Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E8F0;  }
		/* 8212E92Ch case    3:*/		return 0x8212E930;
	}
	return 0x8212E930;
} // Block from 8212E920h-8212E930h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212E930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E930);
		  /* 8212E930h */ case    0:  		/* mr R3, R31 */
		/* 8212E930h case    0:*/		regs.R3 = regs.R31;
		/* 8212E930h case    0:*/		return 0x8212E934;
		  /* 8212E934h */ case    1:  		/* bl -161996 */
		/* 8212E934h case    1:*/		regs.LR = 0x8212E938; return 0x82107068;
		/* 8212E934h case    1:*/		return 0x8212E938;
		  /* 8212E938h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8212E938h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212E938h case    2:*/		return 0x8212E93C;
		  /* 8212E93Ch */ case    3:  		/* bc 12, CR0_LT, 48 */
		/* 8212E93Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x8212E96C;  }
		/* 8212E93Ch case    3:*/		return 0x8212E940;
		  /* 8212E940h */ case    4:  		/* mr R3, R31 */
		/* 8212E940h case    4:*/		regs.R3 = regs.R31;
		/* 8212E940h case    4:*/		return 0x8212E944;
		  /* 8212E944h */ case    5:  		/* bl -149396 */
		/* 8212E944h case    5:*/		regs.LR = 0x8212E948; return 0x8210A1B0;
		/* 8212E944h case    5:*/		return 0x8212E948;
		  /* 8212E948h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8212E948h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212E948h case    6:*/		return 0x8212E94C;
		  /* 8212E94Ch */ case    7:  		/* bc 12, CR0_LT, 32 */
		/* 8212E94Ch case    7:*/		if ( regs.CR[0].lt ) { return 0x8212E96C;  }
		/* 8212E94Ch case    7:*/		return 0x8212E950;
		  /* 8212E950h */ case    8:  		/* mr R3, R31 */
		/* 8212E950h case    8:*/		regs.R3 = regs.R31;
		/* 8212E950h case    8:*/		return 0x8212E954;
		  /* 8212E954h */ case    9:  		/* bl -183540 */
		/* 8212E954h case    9:*/		regs.LR = 0x8212E958; return 0x82101C60;
		/* 8212E954h case    9:*/		return 0x8212E958;
		  /* 8212E958h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8212E958h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212E958h case   10:*/		return 0x8212E95C;
		  /* 8212E95Ch */ case   11:  		/* bc 12, CR0_LT, 16 */
		/* 8212E95Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x8212E96C;  }
		/* 8212E95Ch case   11:*/		return 0x8212E960;
		  /* 8212E960h */ case   12:  		/* mr R3, R31 */
		/* 8212E960h case   12:*/		regs.R3 = regs.R31;
		/* 8212E960h case   12:*/		return 0x8212E964;
		  /* 8212E964h */ case   13:  		/* bl -303492 */
		/* 8212E964h case   13:*/		regs.LR = 0x8212E968; return 0x820E47E0;
		/* 8212E964h case   13:*/		return 0x8212E968;
		  /* 8212E968h */ case   14:  		/* li R3, 0 */
		/* 8212E968h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212E968h case   14:*/		return 0x8212E96C;
	}
	return 0x8212E96C;
} // Block from 8212E930h-8212E96Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212E96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E96C);
		  /* 8212E96Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8212E96Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8212E96Ch case    0:*/		return 0x8212E970;
		  /* 8212E970h */ case    1:  		/* b -644808 */
		/* 8212E970h case    1:*/		return 0x820912A8;
		/* 8212E970h case    1:*/		return 0x8212E974;
		  /* 8212E974h */ case    2:  		/* nop */
		/* 8212E974h case    2:*/		cpu::op::nop();
		/* 8212E974h case    2:*/		return 0x8212E978;
	}
	return 0x8212E978;
} // Block from 8212E96Ch-8212E978h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212E978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E978);
		  /* 8212E978h */ case    0:  		/* mfspr R12, LR */
		/* 8212E978h case    0:*/		regs.R12 = regs.LR;
		/* 8212E978h case    0:*/		return 0x8212E97C;
		  /* 8212E97Ch */ case    1:  		/* bl -644908 */
		/* 8212E97Ch case    1:*/		regs.LR = 0x8212E980; return 0x82091250;
		/* 8212E97Ch case    1:*/		return 0x8212E980;
		  /* 8212E980h */ case    2:  		/* lwz R11, <#[R4]> */
		/* 8212E980h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8212E980h case    2:*/		return 0x8212E984;
		  /* 8212E984h */ case    3:  		/* rlwinm. R7, R11, 0, 12, 31 */
		/* 8212E984h case    3:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R7,regs.R11);
		/* 8212E984h case    3:*/		return 0x8212E988;
		  /* 8212E988h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 8212E988h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8212E994;  }
		/* 8212E988h case    4:*/		return 0x8212E98C;
		  /* 8212E98Ch */ case    5:  		/* li R3, 1 */
		/* 8212E98Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212E98Ch case    5:*/		return 0x8212E990;
		  /* 8212E990h */ case    6:  		/* b 248 */
		/* 8212E990h case    6:*/		return 0x8212EA88;
		/* 8212E990h case    6:*/		return 0x8212E994;
	}
	return 0x8212E994;
} // Block from 8212E978h-8212E994h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212E994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212E994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212E994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212E994);
		  /* 8212E994h */ case    0:  		/* lwz R11, <#[R4 + 4]> */
		/* 8212E994h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8212E994h case    0:*/		return 0x8212E998;
		  /* 8212E998h */ case    1:  		/* li R31, 0 */
		/* 8212E998h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8212E998h case    1:*/		return 0x8212E99C;
		  /* 8212E99Ch */ case    2:  		/* twi 6, R7, 0 */
		/* 8212E99Ch case    2:*/		cpu::op::tw<6>(regs, 0x8212E99C, regs.R7, 0x00000000);
		/* 8212E99Ch case    2:*/		return 0x8212E9A0;
		  /* 8212E9A0h */ case    3:  		/* divwu. R28, R11, R7 */
		/* 8212E9A0h case    3:*/		cpu::op::divwu<1>(regs,&regs.R28,regs.R11,regs.R7);
		/* 8212E9A0h case    3:*/		return 0x8212E9A4;
		  /* 8212E9A4h */ case    4:  		/* bc 12, CR0_EQ, 224 */
		/* 8212E9A4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8212EA84;  }
		/* 8212E9A4h case    4:*/		return 0x8212E9A8;
		  /* 8212E9A8h */ case    5:  		/* lwz R11, <#[R3 + 108]> */
		/* 8212E9A8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8212E9A8h case    5:*/		return 0x8212E9AC;
		  /* 8212E9ACh */ case    6:  		/* li R5, 0 */
		/* 8212E9ACh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212E9ACh case    6:*/		return 0x8212E9B0;
		  /* 8212E9B0h */ case    7:  		/* li R30, -1 */
		/* 8212E9B0h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 8212E9B0h case    7:*/		return 0x8212E9B4;
		  /* 8212E9B4h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212E9B4h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212E9B4h case    8:*/		return 0x8212E9B8;
		  /* 8212E9B8h */ case    9:  		/* srawi R27, R11, 31 */
		/* 8212E9B8h case    9:*/		cpu::op::srawi<0,31>(regs,&regs.R27,regs.R11);
		/* 8212E9B8h case    9:*/		return 0x8212E9BC;
		  /* 8212E9BCh */ case   10:  		/* lis R11, -32217 */
		/* 8212E9BCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8212E9BCh case   10:*/		return 0x8212E9C0;
		  /* 8212E9C0h */ case   11:  		/* addi R29, R11, 15624 */
		/* 8212E9C0h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x3D08);
		/* 8212E9C0h case   11:*/		return 0x8212E9C4;
		  /* 8212E9C4h */ case   12:  		/* addi R11, R1, -80 */
		/* 8212E9C4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xFFFFFFB0);
		/* 8212E9C4h case   12:*/		return 0x8212E9C8;
		  /* 8212E9C8h */ case   13:  		/* li R10, 0 */
		/* 8212E9C8h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212E9C8h case   13:*/		return 0x8212E9CC;
		  /* 8212E9CCh */ case   14:  		/* cmplwi CR6, R7, 0 */
		/* 8212E9CCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8212E9CCh case   14:*/		return 0x8212E9D0;
		  /* 8212E9D0h */ case   15:  		/* std R30, <#[R11]> */
		/* 8212E9D0h case   15:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8212E9D0h case   15:*/		return 0x8212E9D4;
		  /* 8212E9D4h */ case   16:  		/* std R30, <#[R11 + 8]> */
		/* 8212E9D4h case   16:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8212E9D4h case   16:*/		return 0x8212E9D8;
		  /* 8212E9D8h */ case   17:  		/* bc 12, CR6_EQ, 56 */
		/* 8212E9D8h case   17:*/		if ( regs.CR[6].eq ) { return 0x8212EA10;  }
		/* 8212E9D8h case   17:*/		return 0x8212E9DC;
		  /* 8212E9DCh */ case   18:  		/* addi R11, R1, -84 */
		/* 8212E9DCh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xFFFFFFAC);
		/* 8212E9DCh case   18:*/		return 0x8212E9E0;
		  /* 8212E9E0h */ case   19:  		/* lwz R9, <#[R4 + 8]> */
		/* 8212E9E0h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000008) );
		/* 8212E9E0h case   19:*/		return 0x8212E9E4;
		  /* 8212E9E4h */ case   20:  		/* lwz R8, <#[R3 + 20]> */
		/* 8212E9E4h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 8212E9E4h case   20:*/		return 0x8212E9E8;
		  /* 8212E9E8h */ case   21:  		/* mtspr CTR, R7 */
		/* 8212E9E8h case   21:*/		regs.CTR = regs.R7;
		/* 8212E9E8h case   21:*/		return 0x8212E9EC;
		  /* 8212E9ECh */ case   22:  		/* add R6, R5, R10 */
		/* 8212E9ECh case   22:*/		cpu::op::add<0>(regs,&regs.R6,regs.R5,regs.R10);
		/* 8212E9ECh case   22:*/		return 0x8212E9F0;
		  /* 8212E9F0h */ case   23:  		/* addi R10, R10, 1 */
		/* 8212E9F0h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212E9F0h case   23:*/		return 0x8212E9F4;
		  /* 8212E9F4h */ case   24:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8212E9F4h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8212E9F4h case   24:*/		return 0x8212E9F8;
		  /* 8212E9F8h */ case   25:  		/* lwzx R6, <#[R6 + R9]> */
		/* 8212E9F8h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 8212E9F8h case   25:*/		return 0x8212E9FC;
		  /* 8212E9FCh */ case   26:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8212E9FCh case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8212E9FCh case   26:*/		return 0x8212EA00;
		  /* 8212EA00h */ case   27:  		/* lwzx R6, <#[R6 + R8]> */
		/* 8212EA00h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 8212EA00h case   27:*/		return 0x8212EA04;
		  /* 8212EA04h */ case   28:  		/* lwz R6, <#[R6 + 16]> */
		/* 8212EA04h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000010) );
		/* 8212EA04h case   28:*/		return 0x8212EA08;
		  /* 8212EA08h */ case   29:  		/* stwu R6, <#[R11 + 4]> */
		/* 8212EA08h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8212EA08h case   29:*/		return 0x8212EA0C;
		  /* 8212EA0Ch */ case   30:  		/* bc 16, CR0_LT, -32 */
		/* 8212EA0Ch case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212E9EC;  }
		/* 8212EA0Ch case   30:*/		return 0x8212EA10;
	}
	return 0x8212EA10;
} // Block from 8212E994h-8212EA10h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA10);
		  /* 8212EA10h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8212EA10h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8212EA10h case    0:*/		return 0x8212EA14;
		  /* 8212EA14h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 8212EA14h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212EA74;  }
		/* 8212EA14h case    1:*/		return 0x8212EA18;
		  /* 8212EA18h */ case    2:  		/* li R6, 0 */
		/* 8212EA18h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212EA18h case    2:*/		return 0x8212EA1C;
		  /* 8212EA1Ch */ case    3:  		/* li R9, 0 */
		/* 8212EA1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212EA1Ch case    3:*/		return 0x8212EA20;
		  /* 8212EA20h */ case    4:  		/* li R11, 0 */
		/* 8212EA20h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212EA20h case    4:*/		return 0x8212EA24;
		  /* 8212EA24h */ case    5:  		/* addi R8, R1, -80 */
		/* 8212EA24h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xFFFFFFB0);
		/* 8212EA24h case    5:*/		return 0x8212EA28;
		  /* 8212EA28h */ case    6:  		/* lwz R10, <#[R8]> */
		/* 8212EA28h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8212EA28h case    6:*/		return 0x8212EA2C;
		  /* 8212EA2Ch */ case    7:  		/* cmpwi CR6, R10, -1 */
		/* 8212EA2Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8212EA2Ch case    7:*/		return 0x8212EA30;
		  /* 8212EA30h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 8212EA30h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212EA48;  }
		/* 8212EA30h case    8:*/		return 0x8212EA34;
		  /* 8212EA34h */ case    9:  		/* add R26, R9, R11 */
		/* 8212EA34h case    9:*/		cpu::op::add<0>(regs,&regs.R26,regs.R9,regs.R11);
		/* 8212EA34h case    9:*/		return 0x8212EA38;
		  /* 8212EA38h */ case   10:  		/* rlwinm R26, R26, 2, 0, 29 */
		/* 8212EA38h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R26);
		/* 8212EA38h case   10:*/		return 0x8212EA3C;
		  /* 8212EA3Ch */ case   11:  		/* lwzx R26, <#[R26 + R29]> */
		/* 8212EA3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + regs.R29 + 0x00000000) );
		/* 8212EA3Ch case   11:*/		return 0x8212EA40;
		  /* 8212EA40h */ case   12:  		/* cmplw CR6, R10, R26 */
		/* 8212EA40h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 8212EA40h case   12:*/		return 0x8212EA44;
		  /* 8212EA44h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 8212EA44h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8212EA5C;  }
		/* 8212EA44h case   13:*/		return 0x8212EA48;
	}
	return 0x8212EA48;
} // Block from 8212EA10h-8212EA48h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA48);
		  /* 8212EA48h */ case    0:  		/* addi R11, R11, 1 */
		/* 8212EA48h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212EA48h case    0:*/		return 0x8212EA4C;
		  /* 8212EA4Ch */ case    1:  		/* addi R8, R8, 4 */
		/* 8212EA4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8212EA4Ch case    1:*/		return 0x8212EA50;
		  /* 8212EA50h */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 8212EA50h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212EA50h case    2:*/		return 0x8212EA54;
		  /* 8212EA54h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8212EA54h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212EA28;  }
		/* 8212EA54h case    3:*/		return 0x8212EA58;
		  /* 8212EA58h */ case    4:  		/* b 20 */
		/* 8212EA58h case    4:*/		return 0x8212EA6C;
		/* 8212EA58h case    4:*/		return 0x8212EA5C;
	}
	return 0x8212EA5C;
} // Block from 8212EA48h-8212EA5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA5C);
		  /* 8212EA5Ch */ case    0:  		/* addi R9, R9, 4 */
		/* 8212EA5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212EA5Ch case    0:*/		return 0x8212EA60;
		  /* 8212EA60h */ case    1:  		/* addi R6, R6, 1 */
		/* 8212EA60h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8212EA60h case    1:*/		return 0x8212EA64;
		  /* 8212EA64h */ case    2:  		/* cmplwi CR6, R9, 32 */
		/* 8212EA64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000020);
		/* 8212EA64h case    2:*/		return 0x8212EA68;
		  /* 8212EA68h */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 8212EA68h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212EA20;  }
		/* 8212EA68h case    3:*/		return 0x8212EA6C;
	}
	return 0x8212EA6C;
} // Block from 8212EA5Ch-8212EA6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA6C);
		  /* 8212EA6Ch */ case    0:  		/* cmplwi CR6, R6, 8 */
		/* 8212EA6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000008);
		/* 8212EA6Ch case    0:*/		return 0x8212EA70;
		  /* 8212EA70h */ case    1:  		/* bc 12, CR6_EQ, -228 */
		/* 8212EA70h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212E98C;  }
		/* 8212EA70h case    1:*/		return 0x8212EA74;
	}
	return 0x8212EA74;
} // Block from 8212EA6Ch-8212EA74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA74);
		  /* 8212EA74h */ case    0:  		/* addi R31, R31, 1 */
		/* 8212EA74h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8212EA74h case    0:*/		return 0x8212EA78;
		  /* 8212EA78h */ case    1:  		/* add R5, R5, R7 */
		/* 8212EA78h case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R7);
		/* 8212EA78h case    1:*/		return 0x8212EA7C;
		  /* 8212EA7Ch */ case    2:  		/* cmplw CR6, R31, R28 */
		/* 8212EA7Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 8212EA7Ch case    2:*/		return 0x8212EA80;
		  /* 8212EA80h */ case    3:  		/* bc 12, CR6_LT, -188 */
		/* 8212EA80h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212E9C4;  }
		/* 8212EA80h case    3:*/		return 0x8212EA84;
	}
	return 0x8212EA84;
} // Block from 8212EA74h-8212EA84h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA84);
		  /* 8212EA84h */ case    0:  		/* li R3, 0 */
		/* 8212EA84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212EA84h case    0:*/		return 0x8212EA88;
	}
	return 0x8212EA88;
} // Block from 8212EA84h-8212EA88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA88);
		  /* 8212EA88h */ case    0:  		/* b -645096 */
		/* 8212EA88h case    0:*/		return 0x820912A0;
		/* 8212EA88h case    0:*/		return 0x8212EA8C;
		  /* 8212EA8Ch */ case    1:  		/* nop */
		/* 8212EA8Ch case    1:*/		cpu::op::nop();
		/* 8212EA8Ch case    1:*/		return 0x8212EA90;
	}
	return 0x8212EA90;
} // Block from 8212EA88h-8212EA90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212EA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EA90);
		  /* 8212EA90h */ case    0:  		/* mfspr R12, LR */
		/* 8212EA90h case    0:*/		regs.R12 = regs.LR;
		/* 8212EA90h case    0:*/		return 0x8212EA94;
		  /* 8212EA94h */ case    1:  		/* bl -645236 */
		/* 8212EA94h case    1:*/		regs.LR = 0x8212EA98; return 0x82091220;
		/* 8212EA94h case    1:*/		return 0x8212EA98;
		  /* 8212EA98h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8212EA98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8212EA98h case    2:*/		return 0x8212EA9C;
		  /* 8212EA9Ch */ case    3:  		/* lwz R24, <#[R3 + 12]> */
		/* 8212EA9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x0000000C) );
		/* 8212EA9Ch case    3:*/		return 0x8212EAA0;
		  /* 8212EAA0h */ case    4:  		/* mr R31, R3 */
		/* 8212EAA0h case    4:*/		regs.R31 = regs.R3;
		/* 8212EAA0h case    4:*/		return 0x8212EAA4;
		  /* 8212EAA4h */ case    5:  		/* li R30, 0 */
		/* 8212EAA4h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212EAA4h case    5:*/		return 0x8212EAA8;
		  /* 8212EAA8h */ case    6:  		/* li R21, 0 */
		/* 8212EAA8h case    6:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8212EAA8h case    6:*/		return 0x8212EAAC;
		  /* 8212EAACh */ case    7:  		/* li R29, 0 */
		/* 8212EAACh case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212EAACh case    7:*/		return 0x8212EAB0;
		  /* 8212EAB0h */ case    8:  		/* cmplwi CR6, R24, 0 */
		/* 8212EAB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8212EAB0h case    8:*/		return 0x8212EAB4;
		  /* 8212EAB4h */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 8212EAB4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8212EAE8;  }
		/* 8212EAB4h case    9:*/		return 0x8212EAB8;
		  /* 8212EAB8h */ case   10:  		/* li R28, 0 */
		/* 8212EAB8h case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212EAB8h case   10:*/		return 0x8212EABC;
		  /* 8212EABCh */ case   11:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212EABCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212EABCh case   11:*/		return 0x8212EAC0;
		  /* 8212EAC0h */ case   12:  		/* mr R3, R31 */
		/* 8212EAC0h case   12:*/		regs.R3 = regs.R31;
		/* 8212EAC0h case   12:*/		return 0x8212EAC4;
		  /* 8212EAC4h */ case   13:  		/* stw R29, <#[R31 + 256]> */
		/* 8212EAC4h case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8212EAC4h case   13:*/		return 0x8212EAC8;
		  /* 8212EAC8h */ case   14:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8212EAC8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8212EAC8h case   14:*/		return 0x8212EACC;
		  /* 8212EACCh */ case   15:  		/* stw R11, <#[R31 + 260]> */
		/* 8212EACCh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EACCh case   15:*/		return 0x8212EAD0;
		  /* 8212EAD0h */ case   16:  		/* bl -301576 */
		/* 8212EAD0h case   16:*/		regs.LR = 0x8212EAD4; return 0x820E50C8;
		/* 8212EAD0h case   16:*/		return 0x8212EAD4;
		  /* 8212EAD4h */ case   17:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212EAD4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212EAD4h case   17:*/		return 0x8212EAD8;
		  /* 8212EAD8h */ case   18:  		/* addi R29, R29, 1 */
		/* 8212EAD8h case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212EAD8h case   18:*/		return 0x8212EADC;
		  /* 8212EADCh */ case   19:  		/* addi R28, R28, 4 */
		/* 8212EADCh case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212EADCh case   19:*/		return 0x8212EAE0;
		  /* 8212EAE0h */ case   20:  		/* cmplw CR6, R29, R11 */
		/* 8212EAE0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212EAE0h case   20:*/		return 0x8212EAE4;
		  /* 8212EAE4h */ case   21:  		/* bc 12, CR6_LT, -40 */
		/* 8212EAE4h case   21:*/		if ( regs.CR[6].lt ) { return 0x8212EABC;  }
		/* 8212EAE4h case   21:*/		return 0x8212EAE8;
	}
	return 0x8212EAE8;
} // Block from 8212EA90h-8212EAE8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212EAE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EAE8);
		  /* 8212EAE8h */ case    0:  		/* li R26, 0 */
		/* 8212EAE8h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8212EAE8h case    0:*/		return 0x8212EAEC;
		  /* 8212EAECh */ case    1:  		/* lis R19, 24656 */
		/* 8212EAECh case    1:*/		cpu::op::lis<0>(regs,&regs.R19,0x6050);
		/* 8212EAECh case    1:*/		return 0x8212EAF0;
		  /* 8212EAF0h */ case    2:  		/* lis R17, 24768 */
		/* 8212EAF0h case    2:*/		cpu::op::lis<0>(regs,&regs.R17,0x60C0);
		/* 8212EAF0h case    2:*/		return 0x8212EAF4;
		  /* 8212EAF4h */ case    3:  		/* lis R14, 24704 */
		/* 8212EAF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R14,0x6080);
		/* 8212EAF4h case    3:*/		return 0x8212EAF8;
		  /* 8212EAF8h */ case    4:  		/* lis R15, 24784 */
		/* 8212EAF8h case    4:*/		cpu::op::lis<0>(regs,&regs.R15,0x60D0);
		/* 8212EAF8h case    4:*/		return 0x8212EAFC;
		  /* 8212EAFCh */ case    5:  		/* lis R16, 24864 */
		/* 8212EAFCh case    5:*/		cpu::op::lis<0>(regs,&regs.R16,0x6120);
		/* 8212EAFCh case    5:*/		return 0x8212EB00;
		  /* 8212EB00h */ case    6:  		/* lis R18, 24576 */
		/* 8212EB00h case    6:*/		cpu::op::lis<0>(regs,&regs.R18,0x6000);
		/* 8212EB00h case    6:*/		return 0x8212EB04;
		  /* 8212EB04h */ case    7:  		/* lis R20, 4352 */
		/* 8212EB04h case    7:*/		cpu::op::lis<0>(regs,&regs.R20,0x1100);
		/* 8212EB04h case    7:*/		return 0x8212EB08;
		  /* 8212EB08h */ case    8:  		/* cmplwi CR6, R24, 0 */
		/* 8212EB08h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8212EB08h case    8:*/		return 0x8212EB0C;
		  /* 8212EB0Ch */ case    9:  		/* bc 12, CR6_EQ, 1128 */
		/* 8212EB0Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8212EF74;  }
		/* 8212EB0Ch case    9:*/		return 0x8212EB10;
		  /* 8212EB10h */ case   10:  		/* li R25, 0 */
		/* 8212EB10h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8212EB10h case   10:*/		return 0x8212EB14;
		  /* 8212EB14h */ case   11:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212EB14h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212EB14h case   11:*/		return 0x8212EB18;
		  /* 8212EB18h */ case   12:  		/* stw R26, <#[R31 + 256]> */
		/* 8212EB18h case   12:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000100) );
		/* 8212EB18h case   12:*/		return 0x8212EB1C;
		  /* 8212EB1Ch */ case   13:  		/* lwzx R4, <#[R11 + R25]> */
		/* 8212EB1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8212EB1Ch case   13:*/		return 0x8212EB20;
		  /* 8212EB20h */ case   14:  		/* stw R4, <#[R31 + 260]> */
		/* 8212EB20h case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EB20h case   14:*/		return 0x8212EB24;
		  /* 8212EB24h */ case   15:  		/* lwz R11, <#[R4]> */
		/* 8212EB24h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8212EB24h case   15:*/		return 0x8212EB28;
		  /* 8212EB28h */ case   16:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212EB28h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212EB28h case   16:*/		return 0x8212EB2C;
		  /* 8212EB2Ch */ case   17:  		/* cmplw CR6, R11, R19 */
		/* 8212EB2Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8212EB2Ch case   17:*/		return 0x8212EB30;
		  /* 8212EB30h */ case   18:  		/* bc 12, CR6_EQ, 124 */
		/* 8212EB30h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB30h case   18:*/		return 0x8212EB34;
		  /* 8212EB34h */ case   19:  		/* lis R10, 24816 */
		/* 8212EB34h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 8212EB34h case   19:*/		return 0x8212EB38;
		  /* 8212EB38h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 8212EB38h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212EB38h case   20:*/		return 0x8212EB3C;
		  /* 8212EB3Ch */ case   21:  		/* bc 12, CR6_EQ, 112 */
		/* 8212EB3Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB3Ch case   21:*/		return 0x8212EB40;
		  /* 8212EB40h */ case   22:  		/* lis R10, 24736 */
		/* 8212EB40h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 8212EB40h case   22:*/		return 0x8212EB44;
		  /* 8212EB44h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 8212EB44h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212EB44h case   23:*/		return 0x8212EB48;
		  /* 8212EB48h */ case   24:  		/* bc 12, CR6_EQ, 100 */
		/* 8212EB48h case   24:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB48h case   24:*/		return 0x8212EB4C;
		  /* 8212EB4Ch */ case   25:  		/* lis R10, 24608 */
		/* 8212EB4Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0x6020);
		/* 8212EB4Ch case   25:*/		return 0x8212EB50;
		  /* 8212EB50h */ case   26:  		/* cmplw CR6, R11, R10 */
		/* 8212EB50h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212EB50h case   26:*/		return 0x8212EB54;
		  /* 8212EB54h */ case   27:  		/* bc 12, CR6_EQ, 88 */
		/* 8212EB54h case   27:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB54h case   27:*/		return 0x8212EB58;
		  /* 8212EB58h */ case   28:  		/* lis R10, 24688 */
		/* 8212EB58h case   28:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 8212EB58h case   28:*/		return 0x8212EB5C;
		  /* 8212EB5Ch */ case   29:  		/* cmplw CR6, R11, R10 */
		/* 8212EB5Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212EB5Ch case   29:*/		return 0x8212EB60;
		  /* 8212EB60h */ case   30:  		/* bc 12, CR6_EQ, 76 */
		/* 8212EB60h case   30:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB60h case   30:*/		return 0x8212EB64;
		  /* 8212EB64h */ case   31:  		/* cmplw CR6, R11, R17 */
		/* 8212EB64h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 8212EB64h case   31:*/		return 0x8212EB68;
		  /* 8212EB68h */ case   32:  		/* bc 12, CR6_EQ, 68 */
		/* 8212EB68h case   32:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB68h case   32:*/		return 0x8212EB6C;
		  /* 8212EB6Ch */ case   33:  		/* lis R10, 24848 */
		/* 8212EB6Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0x6110);
		/* 8212EB6Ch case   33:*/		return 0x8212EB70;
		  /* 8212EB70h */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 8212EB70h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212EB70h case   34:*/		return 0x8212EB74;
		  /* 8212EB74h */ case   35:  		/* bc 12, CR6_EQ, 56 */
		/* 8212EB74h case   35:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB74h case   35:*/		return 0x8212EB78;
		  /* 8212EB78h */ case   36:  		/* lis R10, 24624 */
		/* 8212EB78h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0x6030);
		/* 8212EB78h case   36:*/		return 0x8212EB7C;
		  /* 8212EB7Ch */ case   37:  		/* cmplw CR6, R11, R10 */
		/* 8212EB7Ch case   37:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212EB7Ch case   37:*/		return 0x8212EB80;
		  /* 8212EB80h */ case   38:  		/* bc 12, CR6_EQ, 44 */
		/* 8212EB80h case   38:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB80h case   38:*/		return 0x8212EB84;
		  /* 8212EB84h */ case   39:  		/* cmplw CR6, R11, R14 */
		/* 8212EB84h case   39:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 8212EB84h case   39:*/		return 0x8212EB88;
		  /* 8212EB88h */ case   40:  		/* bc 12, CR6_EQ, 36 */
		/* 8212EB88h case   40:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB88h case   40:*/		return 0x8212EB8C;
		  /* 8212EB8Ch */ case   41:  		/* cmplw CR6, R11, R15 */
		/* 8212EB8Ch case   41:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 8212EB8Ch case   41:*/		return 0x8212EB90;
		  /* 8212EB90h */ case   42:  		/* bc 12, CR6_EQ, 28 */
		/* 8212EB90h case   42:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB90h case   42:*/		return 0x8212EB94;
		  /* 8212EB94h */ case   43:  		/* cmplw CR6, R11, R16 */
		/* 8212EB94h case   43:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 8212EB94h case   43:*/		return 0x8212EB98;
		  /* 8212EB98h */ case   44:  		/* bc 12, CR6_EQ, 20 */
		/* 8212EB98h case   44:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EB98h case   44:*/		return 0x8212EB9C;
		  /* 8212EB9Ch */ case   45:  		/* cmplw CR6, R11, R18 */
		/* 8212EB9Ch case   45:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 8212EB9Ch case   45:*/		return 0x8212EBA0;
		  /* 8212EBA0h */ case   46:  		/* bc 12, CR6_EQ, 12 */
		/* 8212EBA0h case   46:*/		if ( regs.CR[6].eq ) { return 0x8212EBAC;  }
		/* 8212EBA0h case   46:*/		return 0x8212EBA4;
		  /* 8212EBA4h */ case   47:  		/* cmplw CR6, R11, R20 */
		/* 8212EBA4h case   47:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8212EBA4h case   47:*/		return 0x8212EBA8;
		  /* 8212EBA8h */ case   48:  		/* bc 4, CR6_EQ, 928 */
		/* 8212EBA8h case   48:*/		if ( !regs.CR[6].eq ) { return 0x8212EF48;  }
		/* 8212EBA8h case   48:*/		return 0x8212EBAC;
	}
	return 0x8212EBAC;
} // Block from 8212EAE8h-8212EBACh (49 instructions)

//////////////////////////////////////////////////////
// Block at 8212EBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EBAC);
		  /* 8212EBACh */ case    0:  		/* lwz R11, <#[R4]> */
		/* 8212EBACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8212EBACh case    0:*/		return 0x8212EBB0;
		  /* 8212EBB0h */ case    1:  		/* li R30, 0 */
		/* 8212EBB0h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212EBB0h case    1:*/		return 0x8212EBB4;
		  /* 8212EBB4h */ case    2:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 8212EBB4h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8212EBB4h case    2:*/		return 0x8212EBB8;
		  /* 8212EBB8h */ case    3:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 8212EBB8h case    3:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 8212EBB8h case    3:*/		return 0x8212EBBC;
		  /* 8212EBBCh */ case    4:  		/* subf R11, R10, R20 */
		/* 8212EBBCh case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R20);
		/* 8212EBBCh case    4:*/		return 0x8212EBC0;
		  /* 8212EBC0h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 8212EBC0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212EBC0h case    5:*/		return 0x8212EBC4;
		  /* 8212EBC4h */ case    6:  		/* subfic R11, R11, 0 */
		/* 8212EBC4h case    6:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8212EBC4h case    6:*/		return 0x8212EBC8;
		  /* 8212EBC8h */ case    7:  		/* subfe R11, R11, R11 */
		/* 8212EBC8h case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8212EBC8h case    7:*/		return 0x8212EBCC;
		  /* 8212EBCCh */ case    8:  		/* and R27, R11, R29 */
		/* 8212EBCCh case    8:*/		cpu::op::and<0>(regs,&regs.R27,regs.R11,regs.R29);
		/* 8212EBCCh case    8:*/		return 0x8212EBD0;
		  /* 8212EBD0h */ case    9:  		/* bc 12, CR6_EQ, 132 */
		/* 8212EBD0h case    9:*/		if ( regs.CR[6].eq ) { return 0x8212EC54;  }
		/* 8212EBD0h case    9:*/		return 0x8212EBD4;
		  /* 8212EBD4h */ case   10:  		/* rlwinm R28, R27, 2, 0, 29 */
		/* 8212EBD4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R27);
		/* 8212EBD4h case   10:*/		return 0x8212EBD8;
		  /* 8212EBD8h */ case   11:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212EBD8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EBD8h case   11:*/		return 0x8212EBDC;
		  /* 8212EBDCh */ case   12:  		/* lwz R10, <#[R31 + 20]> */
		/* 8212EBDCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212EBDCh case   12:*/		return 0x8212EBE0;
		  /* 8212EBE0h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212EBE0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212EBE0h case   13:*/		return 0x8212EBE4;
		  /* 8212EBE4h */ case   14:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8212EBE4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8212EBE4h case   14:*/		return 0x8212EBE8;
		  /* 8212EBE8h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212EBE8h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212EBE8h case   15:*/		return 0x8212EBEC;
		  /* 8212EBECh */ case   16:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8212EBECh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212EBECh case   16:*/		return 0x8212EBF0;
		  /* 8212EBF0h */ case   17:  		/* lwz R10, <#[R11 + 16]> */
		/* 8212EBF0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8212EBF0h case   17:*/		return 0x8212EBF4;
		  /* 8212EBF4h */ case   18:  		/* cmplw CR6, R10, R30 */
		/* 8212EBF4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 8212EBF4h case   18:*/		return 0x8212EBF8;
		  /* 8212EBF8h */ case   19:  		/* bc 4, CR6_EQ, 92 */
		/* 8212EBF8h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8212EC54;  }
		/* 8212EBF8h case   19:*/		return 0x8212EBFC;
		  /* 8212EBFCh */ case   20:  		/* lwz R10, <#[R11 + 60]> */
		/* 8212EBFCh case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212EBFCh case   20:*/		return 0x8212EC00;
		  /* 8212EC00h */ case   21:  		/* rlwinm. R10, R10, 0, 11, 15 */
		/* 8212EC00h case   21:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R10,regs.R10);
		/* 8212EC00h case   21:*/		return 0x8212EC04;
		  /* 8212EC04h */ case   22:  		/* bc 4, CR0_EQ, 80 */
		/* 8212EC04h case   22:*/		if ( !regs.CR[0].eq ) { return 0x8212EC54;  }
		/* 8212EC04h case   22:*/		return 0x8212EC08;
		  /* 8212EC08h */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212EC08h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212EC08h case   23:*/		return 0x8212EC0C;
		  /* 8212EC0Ch */ case   24:  		/* lwz R9, <#[R31 + 128]> */
		/* 8212EC0Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000080) );
		/* 8212EC0Ch case   24:*/		return 0x8212EC10;
		  /* 8212EC10h */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 8212EC10h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8212EC10h case   25:*/		return 0x8212EC14;
		  /* 8212EC14h */ case   26:  		/* bc 4, CR6_EQ, 36 */
		/* 8212EC14h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8212EC38;  }
		/* 8212EC14h case   26:*/		return 0x8212EC18;
		  /* 8212EC18h */ case   27:  		/* lwz R10, <#[R31]> */
		/* 8212EC18h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8212EC18h case   27:*/		return 0x8212EC1C;
		  /* 8212EC1Ch */ case   28:  		/* mr R3, R31 */
		/* 8212EC1Ch case   28:*/		regs.R3 = regs.R31;
		/* 8212EC1Ch case   28:*/		return 0x8212EC20;
		  /* 8212EC20h */ case   29:  		/* lwz R4, <#[R11 + 108]> */
		/* 8212EC20h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000006C) );
		/* 8212EC20h case   29:*/		return 0x8212EC24;
		  /* 8212EC24h */ case   30:  		/* lwz R11, <#[R10 + 112]> */
		/* 8212EC24h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000070) );
		/* 8212EC24h case   30:*/		return 0x8212EC28;
		  /* 8212EC28h */ case   31:  		/* mtspr CTR, R11 */
		/* 8212EC28h case   31:*/		regs.CTR = regs.R11;
		/* 8212EC28h case   31:*/		return 0x8212EC2C;
		  /* 8212EC2Ch */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 8212EC2Ch case   32:*/		if ( 1 ) { regs.LR = 0x8212EC30; return (uint32)regs.CTR; }
		/* 8212EC2Ch case   32:*/		return 0x8212EC30;
		  /* 8212EC30h */ case   33:  		/* cmplwi CR6, R3, 6 */
		/* 8212EC30h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000006);
		/* 8212EC30h case   33:*/		return 0x8212EC34;
		  /* 8212EC34h */ case   34:  		/* b 12 */
		/* 8212EC34h case   34:*/		return 0x8212EC40;
		/* 8212EC34h case   34:*/		return 0x8212EC38;
	}
	return 0x8212EC38;
} // Block from 8212EBACh-8212EC38h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8212EC38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EC38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EC38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EC38);
		  /* 8212EC38h */ case    0:  		/* lwz R11, <#[R31 + 136]> */
		/* 8212EC38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000088) );
		/* 8212EC38h case    0:*/		return 0x8212EC3C;
		  /* 8212EC3Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8212EC3Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8212EC3Ch case    1:*/		return 0x8212EC40;
	}
	return 0x8212EC40;
} // Block from 8212EC38h-8212EC40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212EC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EC40);
		  /* 8212EC40h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 8212EC40h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8212EC54;  }
		/* 8212EC40h case    0:*/		return 0x8212EC44;
		  /* 8212EC44h */ case    1:  		/* addi R30, R30, 1 */
		/* 8212EC44h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8212EC44h case    1:*/		return 0x8212EC48;
		  /* 8212EC48h */ case    2:  		/* addi R28, R28, 4 */
		/* 8212EC48h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8212EC48h case    2:*/		return 0x8212EC4C;
		  /* 8212EC4Ch */ case    3:  		/* cmplw CR6, R30, R29 */
		/* 8212EC4Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8212EC4Ch case    3:*/		return 0x8212EC50;
		  /* 8212EC50h */ case    4:  		/* bc 12, CR6_LT, -120 */
		/* 8212EC50h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212EBD8;  }
		/* 8212EC50h case    4:*/		return 0x8212EC54;
	}
	return 0x8212EC54;
} // Block from 8212EC40h-8212EC54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212EC54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EC54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EC54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EC54);
		  /* 8212EC54h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212EC54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EC54h case    0:*/		return 0x8212EC58;
		  /* 8212EC58h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8212EC58h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8212EC58h case    1:*/		return 0x8212EC5C;
		  /* 8212EC5Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212EC5Ch case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212EC5Ch case    2:*/		return 0x8212EC60;
		  /* 8212EC60h */ case    3:  		/* cmplw CR6, R11, R18 */
		/* 8212EC60h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 8212EC60h case    3:*/		return 0x8212EC64;
		  /* 8212EC64h */ case    4:  		/* bc 4, CR6_EQ, 468 */
		/* 8212EC64h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8212EE38;  }
		/* 8212EC64h case    4:*/		return 0x8212EC68;
		  /* 8212EC68h */ case    5:  		/* cmplwi CR6, R29, 1 */
		/* 8212EC68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 8212EC68h case    5:*/		return 0x8212EC6C;
		  /* 8212EC6Ch */ case    6:  		/* bc 4, CR6_EQ, 460 */
		/* 8212EC6Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212EE38;  }
		/* 8212EC6Ch case    6:*/		return 0x8212EC70;
		  /* 8212EC70h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 8212EC70h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212EC70h case    7:*/		return 0x8212EC74;
		  /* 8212EC74h */ case    8:  		/* li R8, 0 */
		/* 8212EC74h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212EC74h case    8:*/		return 0x8212EC78;
		  /* 8212EC78h */ case    9:  		/* li R7, 0 */
		/* 8212EC78h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212EC78h case    9:*/		return 0x8212EC7C;
		  /* 8212EC7Ch */ case   10:  		/* lwz R4, <#[R31 + 256]> */
		/* 8212EC7Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000100) );
		/* 8212EC7Ch case   10:*/		return 0x8212EC80;
		  /* 8212EC80h */ case   11:  		/* li R6, 4 */
		/* 8212EC80h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212EC80h case   11:*/		return 0x8212EC84;
		  /* 8212EC84h */ case   12:  		/* addi R5, R1, 80 */
		/* 8212EC84h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8212EC84h case   12:*/		return 0x8212EC88;
		  /* 8212EC88h */ case   13:  		/* mr R3, R31 */
		/* 8212EC88h case   13:*/		regs.R3 = regs.R31;
		/* 8212EC88h case   13:*/		return 0x8212EC8C;
		  /* 8212EC8Ch */ case   14:  		/* lwz R11, <#[R11 + 340]> */
		/* 8212EC8Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 8212EC8Ch case   14:*/		return 0x8212EC90;
		  /* 8212EC90h */ case   15:  		/* mtspr CTR, R11 */
		/* 8212EC90h case   15:*/		regs.CTR = regs.R11;
		/* 8212EC90h case   15:*/		return 0x8212EC94;
		  /* 8212EC94h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8212EC94h case   16:*/		if ( 1 ) { regs.LR = 0x8212EC98; return (uint32)regs.CTR; }
		/* 8212EC94h case   16:*/		return 0x8212EC98;
		  /* 8212EC98h */ case   17:  		/* or. R30, R3, R3 */
		/* 8212EC98h case   17:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EC98h case   17:*/		return 0x8212EC9C;
		  /* 8212EC9Ch */ case   18:  		/* bc 12, CR0_LT, 2088 */
		/* 8212EC9Ch case   18:*/		if ( regs.CR[0].lt ) { return 0x8212F4C4;  }
		/* 8212EC9Ch case   18:*/		return 0x8212ECA0;
		  /* 8212ECA0h */ case   19:  		/* li R3, 116 */
		/* 8212ECA0h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212ECA0h case   19:*/		return 0x8212ECA4;
		  /* 8212ECA4h */ case   20:  		/* bl -206604 */
		/* 8212ECA4h case   20:*/		regs.LR = 0x8212ECA8; return 0x820FC598;
		/* 8212ECA4h case   20:*/		return 0x8212ECA8;
		  /* 8212ECA8h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 8212ECA8h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212ECA8h case   21:*/		return 0x8212ECAC;
		  /* 8212ECACh */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 8212ECACh case   22:*/		if ( regs.CR[0].eq ) { return 0x8212ECBC;  }
		/* 8212ECACh case   22:*/		return 0x8212ECB0;
		  /* 8212ECB0h */ case   23:  		/* bl -208400 */
		/* 8212ECB0h case   23:*/		regs.LR = 0x8212ECB4; return 0x820FBEA0;
		/* 8212ECB0h case   23:*/		return 0x8212ECB4;
		  /* 8212ECB4h */ case   24:  		/* mr R21, R3 */
		/* 8212ECB4h case   24:*/		regs.R21 = regs.R3;
		/* 8212ECB4h case   24:*/		return 0x8212ECB8;
		  /* 8212ECB8h */ case   25:  		/* b 8 */
		/* 8212ECB8h case   25:*/		return 0x8212ECC0;
		/* 8212ECB8h case   25:*/		return 0x8212ECBC;
	}
	return 0x8212ECBC;
} // Block from 8212EC54h-8212ECBCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8212ECBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212ECBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212ECBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212ECBC);
		  /* 8212ECBCh */ case    0:  		/* li R21, 0 */
		/* 8212ECBCh case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8212ECBCh case    0:*/		return 0x8212ECC0;
	}
	return 0x8212ECC0;
} // Block from 8212ECBCh-8212ECC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212ECC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212ECC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212ECC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212ECC0);
		  /* 8212ECC0h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8212ECC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8212ECC0h case    0:*/		return 0x8212ECC4;
		  /* 8212ECC4h */ case    1:  		/* bc 12, CR6_EQ, 980 */
		/* 8212ECC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F098;  }
		/* 8212ECC4h case    1:*/		return 0x8212ECC8;
		  /* 8212ECC8h */ case    2:  		/* lis R4, 4096 */
		/* 8212ECC8h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8212ECC8h case    2:*/		return 0x8212ECCC;
		  /* 8212ECCCh */ case    3:  		/* li R7, 0 */
		/* 8212ECCCh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212ECCCh case    3:*/		return 0x8212ECD0;
		  /* 8212ECD0h */ case    4:  		/* li R6, 2 */
		/* 8212ECD0h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8212ECD0h case    4:*/		return 0x8212ECD4;
		  /* 8212ECD4h */ case    5:  		/* li R5, 2 */
		/* 8212ECD4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ECD4h case    5:*/		return 0x8212ECD8;
		  /* 8212ECD8h */ case    6:  		/* ori R4, R4, 2 */
		/* 8212ECD8h case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x2);
		/* 8212ECD8h case    6:*/		return 0x8212ECDC;
		  /* 8212ECDCh */ case    7:  		/* mr R3, R21 */
		/* 8212ECDCh case    7:*/		regs.R3 = regs.R21;
		/* 8212ECDCh case    7:*/		return 0x8212ECE0;
		  /* 8212ECE0h */ case    8:  		/* bl -206512 */
		/* 8212ECE0h case    8:*/		regs.LR = 0x8212ECE4; return 0x820FC630;
		/* 8212ECE0h case    8:*/		return 0x8212ECE4;
		  /* 8212ECE4h */ case    9:  		/* or. R30, R3, R3 */
		/* 8212ECE4h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212ECE4h case    9:*/		return 0x8212ECE8;
		  /* 8212ECE8h */ case   10:  		/* bc 12, CR0_LT, 1988 */
		/* 8212ECE8h case   10:*/		if ( regs.CR[0].lt ) { return 0x8212F4AC;  }
		/* 8212ECE8h case   10:*/		return 0x8212ECEC;
		  /* 8212ECECh */ case   11:  		/* mr R3, R21 */
		/* 8212ECECh case   11:*/		regs.R3 = regs.R21;
		/* 8212ECECh case   11:*/		return 0x8212ECF0;
		  /* 8212ECF0h */ case   12:  		/* lwz R4, <#[R31 + 260]> */
		/* 8212ECF0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 8212ECF0h case   12:*/		return 0x8212ECF4;
		  /* 8212ECF4h */ case   13:  		/* bl -208388 */
		/* 8212ECF4h case   13:*/		regs.LR = 0x8212ECF8; return 0x820FBEF0;
		/* 8212ECF4h case   13:*/		return 0x8212ECF8;
		  /* 8212ECF8h */ case   14:  		/* or. R30, R3, R3 */
		/* 8212ECF8h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212ECF8h case   14:*/		return 0x8212ECFC;
		  /* 8212ECFCh */ case   15:  		/* bc 12, CR0_LT, 1968 */
		/* 8212ECFCh case   15:*/		if ( regs.CR[0].lt ) { return 0x8212F4AC;  }
		/* 8212ECFCh case   15:*/		return 0x8212ED00;
		  /* 8212ED00h */ case   16:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212ED00h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212ED00h case   16:*/		return 0x8212ED04;
		  /* 8212ED04h */ case   17:  		/* mr R4, R21 */
		/* 8212ED04h case   17:*/		regs.R4 = regs.R21;
		/* 8212ED04h case   17:*/		return 0x8212ED08;
		  /* 8212ED08h */ case   18:  		/* lwz R10, <#[R21 + 8]> */
		/* 8212ED08h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000008) );
		/* 8212ED08h case   18:*/		return 0x8212ED0C;
		  /* 8212ED0Ch */ case   19:  		/* mr R3, R31 */
		/* 8212ED0Ch case   19:*/		regs.R3 = regs.R31;
		/* 8212ED0Ch case   19:*/		return 0x8212ED10;
		  /* 8212ED10h */ case   20:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212ED10h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212ED10h case   20:*/		return 0x8212ED14;
		  /* 8212ED14h */ case   21:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212ED14h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212ED14h case   21:*/		return 0x8212ED18;
		  /* 8212ED18h */ case   22:  		/* stw R11, <#[R10]> */
		/* 8212ED18h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212ED18h case   22:*/		return 0x8212ED1C;
		  /* 8212ED1Ch */ case   23:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212ED1Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212ED1Ch case   23:*/		return 0x8212ED20;
		  /* 8212ED20h */ case   24:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212ED20h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212ED20h case   24:*/		return 0x8212ED24;
		  /* 8212ED24h */ case   25:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212ED24h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212ED24h case   25:*/		return 0x8212ED28;
		  /* 8212ED28h */ case   26:  		/* lwz R10, <#[R21 + 8]> */
		/* 8212ED28h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000008) );
		/* 8212ED28h case   26:*/		return 0x8212ED2C;
		  /* 8212ED2Ch */ case   27:  		/* stw R11, <#[R10 + 4]> */
		/* 8212ED2Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8212ED2Ch case   27:*/		return 0x8212ED30;
		  /* 8212ED30h */ case   28:  		/* lwz R11, <#[R21 + 16]> */
		/* 8212ED30h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 8212ED30h case   28:*/		return 0x8212ED34;
		  /* 8212ED34h */ case   29:  		/* lwz R10, <#[R1 + 80]> */
		/* 8212ED34h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8212ED34h case   29:*/		return 0x8212ED38;
		  /* 8212ED38h */ case   30:  		/* stw R10, <#[R11]> */
		/* 8212ED38h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212ED38h case   30:*/		return 0x8212ED3C;
		  /* 8212ED3Ch */ case   31:  		/* lwz R11, <#[R21 + 16]> */
		/* 8212ED3Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 8212ED3Ch case   31:*/		return 0x8212ED40;
		  /* 8212ED40h */ case   32:  		/* lwz R10, <#[R1 + 84]> */
		/* 8212ED40h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8212ED40h case   32:*/		return 0x8212ED44;
		  /* 8212ED44h */ case   33:  		/* stw R10, <#[R11 + 4]> */
		/* 8212ED44h case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212ED44h case   33:*/		return 0x8212ED48;
		  /* 8212ED48h */ case   34:  		/* bl -203920 */
		/* 8212ED48h case   34:*/		regs.LR = 0x8212ED4C; return 0x820FD0B8;
		/* 8212ED48h case   34:*/		return 0x8212ED4C;
		  /* 8212ED4Ch */ case   35:  		/* or. R30, R3, R3 */
		/* 8212ED4Ch case   35:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212ED4Ch case   35:*/		return 0x8212ED50;
		  /* 8212ED50h */ case   36:  		/* bc 12, CR0_LT, 1884 */
		/* 8212ED50h case   36:*/		if ( regs.CR[0].lt ) { return 0x8212F4AC;  }
		/* 8212ED50h case   36:*/		return 0x8212ED54;
		  /* 8212ED54h */ case   37:  		/* li R3, 116 */
		/* 8212ED54h case   37:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212ED54h case   37:*/		return 0x8212ED58;
		  /* 8212ED58h */ case   38:  		/* bl -206784 */
		/* 8212ED58h case   38:*/		regs.LR = 0x8212ED5C; return 0x820FC598;
		/* 8212ED58h case   38:*/		return 0x8212ED5C;
		  /* 8212ED5Ch */ case   39:  		/* cmplwi CR0, R3, 0 */
		/* 8212ED5Ch case   39:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212ED5Ch case   39:*/		return 0x8212ED60;
		  /* 8212ED60h */ case   40:  		/* bc 12, CR0_EQ, 16 */
		/* 8212ED60h case   40:*/		if ( regs.CR[0].eq ) { return 0x8212ED70;  }
		/* 8212ED60h case   40:*/		return 0x8212ED64;
		  /* 8212ED64h */ case   41:  		/* bl -208580 */
		/* 8212ED64h case   41:*/		regs.LR = 0x8212ED68; return 0x820FBEA0;
		/* 8212ED64h case   41:*/		return 0x8212ED68;
		  /* 8212ED68h */ case   42:  		/* mr R29, R3 */
		/* 8212ED68h case   42:*/		regs.R29 = regs.R3;
		/* 8212ED68h case   42:*/		return 0x8212ED6C;
		  /* 8212ED6Ch */ case   43:  		/* b 8 */
		/* 8212ED6Ch case   43:*/		return 0x8212ED74;
		/* 8212ED6Ch case   43:*/		return 0x8212ED70;
	}
	return 0x8212ED70;
} // Block from 8212ECC0h-8212ED70h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8212ED70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212ED70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212ED70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212ED70);
		  /* 8212ED70h */ case    0:  		/* li R29, 0 */
		/* 8212ED70h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8212ED70h case    0:*/		return 0x8212ED74;
	}
	return 0x8212ED74;
} // Block from 8212ED70h-8212ED74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212ED74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212ED74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212ED74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212ED74);
		  /* 8212ED74h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8212ED74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212ED74h case    0:*/		return 0x8212ED78;
		  /* 8212ED78h */ case    1:  		/* bc 12, CR6_EQ, 812 */
		/* 8212ED78h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F0A4;  }
		/* 8212ED78h case    1:*/		return 0x8212ED7C;
		  /* 8212ED7Ch */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212ED7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212ED7Ch case    2:*/		return 0x8212ED80;
		  /* 8212ED80h */ case    3:  		/* lis R4, 24656 */
		/* 8212ED80h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x6050);
		/* 8212ED80h case    3:*/		return 0x8212ED84;
		  /* 8212ED84h */ case    4:  		/* li R7, 0 */
		/* 8212ED84h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212ED84h case    4:*/		return 0x8212ED88;
		  /* 8212ED88h */ case    5:  		/* li R5, 4 */
		/* 8212ED88h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212ED88h case    5:*/		return 0x8212ED8C;
		  /* 8212ED8Ch */ case    6:  		/* ori R4, R4, 2 */
		/* 8212ED8Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x2);
		/* 8212ED8Ch case    6:*/		return 0x8212ED90;
		  /* 8212ED90h */ case    7:  		/* mr R3, R29 */
		/* 8212ED90h case    7:*/		regs.R3 = regs.R29;
		/* 8212ED90h case    7:*/		return 0x8212ED94;
		  /* 8212ED94h */ case    8:  		/* lwz R6, <#[R11 + 12]> */
		/* 8212ED94h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212ED94h case    8:*/		return 0x8212ED98;
		  /* 8212ED98h */ case    9:  		/* bl -206696 */
		/* 8212ED98h case    9:*/		regs.LR = 0x8212ED9C; return 0x820FC630;
		/* 8212ED98h case    9:*/		return 0x8212ED9C;
		  /* 8212ED9Ch */ case   10:  		/* or. R30, R3, R3 */
		/* 8212ED9Ch case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212ED9Ch case   10:*/		return 0x8212EDA0;
		  /* 8212EDA0h */ case   11:  		/* mr R3, R29 */
		/* 8212EDA0h case   11:*/		regs.R3 = regs.R29;
		/* 8212EDA0h case   11:*/		return 0x8212EDA4;
		  /* 8212EDA4h */ case   12:  		/* bc 12, CR0_LT, 784 */
		/* 8212EDA4h case   12:*/		if ( regs.CR[0].lt ) { return 0x8212F0B4;  }
		/* 8212EDA4h case   12:*/		return 0x8212EDA8;
		  /* 8212EDA8h */ case   13:  		/* lwz R4, <#[R31 + 260]> */
		/* 8212EDA8h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EDA8h case   13:*/		return 0x8212EDAC;
		  /* 8212EDACh */ case   14:  		/* bl -208572 */
		/* 8212EDACh case   14:*/		regs.LR = 0x8212EDB0; return 0x820FBEF0;
		/* 8212EDACh case   14:*/		return 0x8212EDB0;
		  /* 8212EDB0h */ case   15:  		/* or. R30, R3, R3 */
		/* 8212EDB0h case   15:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EDB0h case   15:*/		return 0x8212EDB4;
		  /* 8212EDB4h */ case   16:  		/* bc 12, CR0_LT, 764 */
		/* 8212EDB4h case   16:*/		if ( regs.CR[0].lt ) { return 0x8212F0B0;  }
		/* 8212EDB4h case   16:*/		return 0x8212EDB8;
		  /* 8212EDB8h */ case   17:  		/* li R10, 2 */
		/* 8212EDB8h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8212EDB8h case   17:*/		return 0x8212EDBC;
		  /* 8212EDBCh */ case   18:  		/* addi R9, R1, 72 */
		/* 8212EDBCh case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x48);
		/* 8212EDBCh case   18:*/		return 0x8212EDC0;
		  /* 8212EDC0h */ case   19:  		/* li R11, 8 */
		/* 8212EDC0h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8212EDC0h case   19:*/		return 0x8212EDC4;
		  /* 8212EDC4h */ case   20:  		/* mtspr CTR, R10 */
		/* 8212EDC4h case   20:*/		regs.CTR = regs.R10;
		/* 8212EDC4h case   20:*/		return 0x8212EDC8;
		  /* 8212EDC8h */ case   21:  		/* lwz R8, <#[R31 + 260]> */
		/* 8212EDC8h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EDC8h case   21:*/		return 0x8212EDCC;
		  /* 8212EDCCh */ case   22:  		/* lwz R10, <#[R29 + 8]> */
		/* 8212EDCCh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8212EDCCh case   22:*/		return 0x8212EDD0;
		  /* 8212EDD0h */ case   23:  		/* add R10, R11, R10 */
		/* 8212EDD0h case   23:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8212EDD0h case   23:*/		return 0x8212EDD4;
		  /* 8212EDD4h */ case   24:  		/* lwz R8, <#[R8 + 8]> */
		/* 8212EDD4h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 8212EDD4h case   24:*/		return 0x8212EDD8;
		  /* 8212EDD8h */ case   25:  		/* lwz R8, <#[R8]> */
		/* 8212EDD8h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8212EDD8h case   25:*/		return 0x8212EDDC;
		  /* 8212EDDCh */ case   26:  		/* stw R8, <#[R10 - 8]> */
		/* 8212EDDCh case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0xFFFFFFF8) );
		/* 8212EDDCh case   26:*/		return 0x8212EDE0;
		  /* 8212EDE0h */ case   27:  		/* lwzx R10, <#[R9 + R11]> */
		/* 8212EDE0h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8212EDE0h case   27:*/		return 0x8212EDE4;
		  /* 8212EDE4h */ case   28:  		/* lwz R8, <#[R29 + 8]> */
		/* 8212EDE4h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 8212EDE4h case   28:*/		return 0x8212EDE8;
		  /* 8212EDE8h */ case   29:  		/* stwx R10, <#[R11 + R8]> */
		/* 8212EDE8h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212EDE8h case   29:*/		return 0x8212EDEC;
		  /* 8212EDECh */ case   30:  		/* addi R11, R11, 4 */
		/* 8212EDECh case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212EDECh case   30:*/		return 0x8212EDF0;
		  /* 8212EDF0h */ case   31:  		/* bc 16, CR0_LT, -40 */
		/* 8212EDF0h case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212EDC8;  }
		/* 8212EDF0h case   31:*/		return 0x8212EDF4;
		  /* 8212EDF4h */ case   32:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212EDF4h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EDF4h case   32:*/		return 0x8212EDF8;
		  /* 8212EDF8h */ case   33:  		/* lwz R3, <#[R29 + 16]> */
		/* 8212EDF8h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8212EDF8h case   33:*/		return 0x8212EDFC;
		  /* 8212EDFCh */ case   34:  		/* lwz R10, <#[R11 + 12]> */
		/* 8212EDFCh case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212EDFCh case   34:*/		return 0x8212EE00;
		  /* 8212EE00h */ case   35:  		/* lwz R4, <#[R11 + 16]> */
		/* 8212EE00h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 8212EE00h case   35:*/		return 0x8212EE04;
		  /* 8212EE04h */ case   36:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 8212EE04h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 8212EE04h case   36:*/		return 0x8212EE08;
		  /* 8212EE08h */ case   37:  		/* bl -644184 */
		/* 8212EE08h case   37:*/		regs.LR = 0x8212EE0C; return 0x820919B0;
		/* 8212EE08h case   37:*/		return 0x8212EE0C;
		  /* 8212EE0Ch */ case   38:  		/* lwz R30, <#[R31 + 260]> */
		/* 8212EE0Ch case   38:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EE0Ch case   38:*/		return 0x8212EE10;
		  /* 8212EE10h */ case   39:  		/* cmplwi CR6, R30, 0 */
		/* 8212EE10h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8212EE10h case   39:*/		return 0x8212EE14;
		  /* 8212EE14h */ case   40:  		/* bc 12, CR6_EQ, 20 */
		/* 8212EE14h case   40:*/		if ( regs.CR[6].eq ) { return 0x8212EE28;  }
		/* 8212EE14h case   40:*/		return 0x8212EE18;
		  /* 8212EE18h */ case   41:  		/* mr R3, R30 */
		/* 8212EE18h case   41:*/		regs.R3 = regs.R30;
		/* 8212EE18h case   41:*/		return 0x8212EE1C;
		  /* 8212EE1Ch */ case   42:  		/* bl 976292 */
		/* 8212EE1Ch case   42:*/		regs.LR = 0x8212EE20; return 0x8221D3C0;
		/* 8212EE1Ch case   42:*/		return 0x8212EE20;
		  /* 8212EE20h */ case   43:  		/* mr R3, R30 */
		/* 8212EE20h case   43:*/		regs.R3 = regs.R30;
		/* 8212EE20h case   43:*/		return 0x8212EE24;
		  /* 8212EE24h */ case   44:  		/* bl -206900 */
		/* 8212EE24h case   44:*/		regs.LR = 0x8212EE28; return 0x820FC5F0;
		/* 8212EE24h case   44:*/		return 0x8212EE28;
	}
	return 0x8212EE28;
} // Block from 8212ED74h-8212EE28h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8212EE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EE28);
		  /* 8212EE28h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212EE28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212EE28h case    0:*/		return 0x8212EE2C;
		  /* 8212EE2Ch */ case    1:  		/* stwx R29, <#[R11 + R25]> */
		/* 8212EE2Ch case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8212EE2Ch case    1:*/		return 0x8212EE30;
		  /* 8212EE30h */ case    2:  		/* stw R29, <#[R31 + 260]> */
		/* 8212EE30h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EE30h case    2:*/		return 0x8212EE34;
		  /* 8212EE34h */ case    3:  		/* b 268 */
		/* 8212EE34h case    3:*/		return 0x8212EF40;
		/* 8212EE34h case    3:*/		return 0x8212EE38;
	}
	return 0x8212EE38;
} // Block from 8212EE28h-8212EE38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212EE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EE38);
		  /* 8212EE38h */ case    0:  		/* cmplw CR6, R30, R29 */
		/* 8212EE38h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8212EE38h case    0:*/		return 0x8212EE3C;
		  /* 8212EE3Ch */ case    1:  		/* bc 12, CR6_EQ, 264 */
		/* 8212EE3Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8212EF44;  }
		/* 8212EE3Ch case    1:*/		return 0x8212EE40;
		  /* 8212EE40h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8212EE40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212EE40h case    2:*/		return 0x8212EE44;
		  /* 8212EE44h */ case    3:  		/* li R8, 0 */
		/* 8212EE44h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212EE44h case    3:*/		return 0x8212EE48;
		  /* 8212EE48h */ case    4:  		/* li R7, 0 */
		/* 8212EE48h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212EE48h case    4:*/		return 0x8212EE4C;
		  /* 8212EE4Ch */ case    5:  		/* lwz R4, <#[R31 + 256]> */
		/* 8212EE4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000100) );
		/* 8212EE4Ch case    5:*/		return 0x8212EE50;
		  /* 8212EE50h */ case    6:  		/* li R6, 4 */
		/* 8212EE50h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8212EE50h case    6:*/		return 0x8212EE54;
		  /* 8212EE54h */ case    7:  		/* addi R5, R1, 96 */
		/* 8212EE54h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8212EE54h case    7:*/		return 0x8212EE58;
		  /* 8212EE58h */ case    8:  		/* mr R3, R31 */
		/* 8212EE58h case    8:*/		regs.R3 = regs.R31;
		/* 8212EE58h case    8:*/		return 0x8212EE5C;
		  /* 8212EE5Ch */ case    9:  		/* lwz R11, <#[R11 + 340]> */
		/* 8212EE5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 8212EE5Ch case    9:*/		return 0x8212EE60;
		  /* 8212EE60h */ case   10:  		/* mtspr CTR, R11 */
		/* 8212EE60h case   10:*/		regs.CTR = regs.R11;
		/* 8212EE60h case   10:*/		return 0x8212EE64;
		  /* 8212EE64h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8212EE64h case   11:*/		if ( 1 ) { regs.LR = 0x8212EE68; return (uint32)regs.CTR; }
		/* 8212EE64h case   11:*/		return 0x8212EE68;
		  /* 8212EE68h */ case   12:  		/* or. R30, R3, R3 */
		/* 8212EE68h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EE68h case   12:*/		return 0x8212EE6C;
		  /* 8212EE6Ch */ case   13:  		/* bc 12, CR0_LT, 1624 */
		/* 8212EE6Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x8212F4C4;  }
		/* 8212EE6Ch case   13:*/		return 0x8212EE70;
		  /* 8212EE70h */ case   14:  		/* li R3, 116 */
		/* 8212EE70h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8212EE70h case   14:*/		return 0x8212EE74;
		  /* 8212EE74h */ case   15:  		/* bl -207068 */
		/* 8212EE74h case   15:*/		regs.LR = 0x8212EE78; return 0x820FC598;
		/* 8212EE74h case   15:*/		return 0x8212EE78;
		  /* 8212EE78h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 8212EE78h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212EE78h case   16:*/		return 0x8212EE7C;
		  /* 8212EE7Ch */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 8212EE7Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x8212EE8C;  }
		/* 8212EE7Ch case   17:*/		return 0x8212EE80;
		  /* 8212EE80h */ case   18:  		/* bl -208864 */
		/* 8212EE80h case   18:*/		regs.LR = 0x8212EE84; return 0x820FBEA0;
		/* 8212EE80h case   18:*/		return 0x8212EE84;
		  /* 8212EE84h */ case   19:  		/* mr R21, R3 */
		/* 8212EE84h case   19:*/		regs.R21 = regs.R3;
		/* 8212EE84h case   19:*/		return 0x8212EE88;
		  /* 8212EE88h */ case   20:  		/* b 8 */
		/* 8212EE88h case   20:*/		return 0x8212EE90;
		/* 8212EE88h case   20:*/		return 0x8212EE8C;
	}
	return 0x8212EE8C;
} // Block from 8212EE38h-8212EE8Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8212EE8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EE8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EE8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EE8C);
		  /* 8212EE8Ch */ case    0:  		/* li R21, 0 */
		/* 8212EE8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8212EE8Ch case    0:*/		return 0x8212EE90;
	}
	return 0x8212EE90;
} // Block from 8212EE8Ch-8212EE90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212EE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EE90);
		  /* 8212EE90h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8212EE90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8212EE90h case    0:*/		return 0x8212EE94;
		  /* 8212EE94h */ case    1:  		/* bc 12, CR6_EQ, 516 */
		/* 8212EE94h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F098;  }
		/* 8212EE94h case    1:*/		return 0x8212EE98;
		  /* 8212EE98h */ case    2:  		/* li R11, 1 */
		/* 8212EE98h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212EE98h case    2:*/		return 0x8212EE9C;
		  /* 8212EE9Ch */ case    3:  		/* mr R4, R29 */
		/* 8212EE9Ch case    3:*/		regs.R4 = regs.R29;
		/* 8212EE9Ch case    3:*/		return 0x8212EEA0;
		  /* 8212EEA0h */ case    4:  		/* li R7, 0 */
		/* 8212EEA0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212EEA0h case    4:*/		return 0x8212EEA4;
		  /* 8212EEA4h */ case    5:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 8212EEA4h case    5:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 8212EEA4h case    5:*/		return 0x8212EEA8;
		  /* 8212EEA8h */ case    6:  		/* mr R6, R29 */
		/* 8212EEA8h case    6:*/		regs.R6 = regs.R29;
		/* 8212EEA8h case    6:*/		return 0x8212EEAC;
		  /* 8212EEACh */ case    7:  		/* mr R5, R29 */
		/* 8212EEACh case    7:*/		regs.R5 = regs.R29;
		/* 8212EEACh case    7:*/		return 0x8212EEB0;
		  /* 8212EEB0h */ case    8:  		/* mr R3, R21 */
		/* 8212EEB0h case    8:*/		regs.R3 = regs.R21;
		/* 8212EEB0h case    8:*/		return 0x8212EEB4;
		  /* 8212EEB4h */ case    9:  		/* bl -206980 */
		/* 8212EEB4h case    9:*/		regs.LR = 0x8212EEB8; return 0x820FC630;
		/* 8212EEB4h case    9:*/		return 0x8212EEB8;
		  /* 8212EEB8h */ case   10:  		/* or. R30, R3, R3 */
		/* 8212EEB8h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EEB8h case   10:*/		return 0x8212EEBC;
		  /* 8212EEBCh */ case   11:  		/* bc 12, CR0_LT, 1520 */
		/* 8212EEBCh case   11:*/		if ( regs.CR[0].lt ) { return 0x8212F4AC;  }
		/* 8212EEBCh case   11:*/		return 0x8212EEC0;
		  /* 8212EEC0h */ case   12:  		/* mr R3, R21 */
		/* 8212EEC0h case   12:*/		regs.R3 = regs.R21;
		/* 8212EEC0h case   12:*/		return 0x8212EEC4;
		  /* 8212EEC4h */ case   13:  		/* lwz R4, <#[R31 + 260]> */
		/* 8212EEC4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EEC4h case   13:*/		return 0x8212EEC8;
		  /* 8212EEC8h */ case   14:  		/* bl -208856 */
		/* 8212EEC8h case   14:*/		regs.LR = 0x8212EECC; return 0x820FBEF0;
		/* 8212EEC8h case   14:*/		return 0x8212EECC;
		  /* 8212EECCh */ case   15:  		/* or. R30, R3, R3 */
		/* 8212EECCh case   15:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EECCh case   15:*/		return 0x8212EED0;
		  /* 8212EED0h */ case   16:  		/* bc 12, CR0_LT, 1500 */
		/* 8212EED0h case   16:*/		if ( regs.CR[0].lt ) { return 0x8212F4AC;  }
		/* 8212EED0h case   16:*/		return 0x8212EED4;
		  /* 8212EED4h */ case   17:  		/* cmplwi CR6, R29, 0 */
		/* 8212EED4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212EED4h case   17:*/		return 0x8212EED8;
		  /* 8212EED8h */ case   18:  		/* bc 12, CR6_EQ, 84 */
		/* 8212EED8h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212EF2C;  }
		/* 8212EED8h case   18:*/		return 0x8212EEDC;
		  /* 8212EEDCh */ case   19:  		/* mtspr CTR, R29 */
		/* 8212EEDCh case   19:*/		regs.CTR = regs.R29;
		/* 8212EEDCh case   19:*/		return 0x8212EEE0;
		  /* 8212EEE0h */ case   20:  		/* li R11, 0 */
		/* 8212EEE0h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212EEE0h case   20:*/		return 0x8212EEE4;
		  /* 8212EEE4h */ case   21:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 8212EEE4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 8212EEE4h case   21:*/		return 0x8212EEE8;
		  /* 8212EEE8h */ case   22:  		/* lwz R9, <#[R31 + 260]> */
		/* 8212EEE8h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EEE8h case   22:*/		return 0x8212EEEC;
		  /* 8212EEECh */ case   23:  		/* addi R8, R1, 96 */
		/* 8212EEECh case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8212EEECh case   23:*/		return 0x8212EEF0;
		  /* 8212EEF0h */ case   24:  		/* lwz R7, <#[R21 + 8]> */
		/* 8212EEF0h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 8212EEF0h case   24:*/		return 0x8212EEF4;
		  /* 8212EEF4h */ case   25:  		/* lwz R9, <#[R9 + 8]> */
		/* 8212EEF4h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8212EEF4h case   25:*/		return 0x8212EEF8;
		  /* 8212EEF8h */ case   26:  		/* lwzx R9, <#[R9 + R10]> */
		/* 8212EEF8h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8212EEF8h case   26:*/		return 0x8212EEFC;
		  /* 8212EEFCh */ case   27:  		/* stwx R9, <#[R11 + R7]> */
		/* 8212EEFCh case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8212EEFCh case   27:*/		return 0x8212EF00;
		  /* 8212EF00h */ case   28:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8212EF00h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212EF00h case   28:*/		return 0x8212EF04;
		  /* 8212EF04h */ case   29:  		/* lwz R9, <#[R21 + 16]> */
		/* 8212EF04h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000010) );
		/* 8212EF04h case   29:*/		return 0x8212EF08;
		  /* 8212EF08h */ case   30:  		/* stwx R8, <#[R11 + R9]> */
		/* 8212EF08h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212EF08h case   30:*/		return 0x8212EF0C;
		  /* 8212EF0Ch */ case   31:  		/* lwz R9, <#[R21 + 16]> */
		/* 8212EF0Ch case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000010) );
		/* 8212EF0Ch case   31:*/		return 0x8212EF10;
		  /* 8212EF10h */ case   32:  		/* lwz R8, <#[R31 + 260]> */
		/* 8212EF10h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EF10h case   32:*/		return 0x8212EF14;
		  /* 8212EF14h */ case   33:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8212EF14h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212EF14h case   33:*/		return 0x8212EF18;
		  /* 8212EF18h */ case   34:  		/* addi R11, R11, 4 */
		/* 8212EF18h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212EF18h case   34:*/		return 0x8212EF1C;
		  /* 8212EF1Ch */ case   35:  		/* lwz R8, <#[R8 + 8]> */
		/* 8212EF1Ch case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 8212EF1Ch case   35:*/		return 0x8212EF20;
		  /* 8212EF20h */ case   36:  		/* stwx R9, <#[R8 + R10]> */
		/* 8212EF20h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8212EF20h case   36:*/		return 0x8212EF24;
		  /* 8212EF24h */ case   37:  		/* addi R10, R10, 4 */
		/* 8212EF24h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212EF24h case   37:*/		return 0x8212EF28;
		  /* 8212EF28h */ case   38:  		/* bc 16, CR0_LT, -64 */
		/* 8212EF28h case   38:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212EEE8;  }
		/* 8212EF28h case   38:*/		return 0x8212EF2C;
	}
	return 0x8212EF2C;
} // Block from 8212EE90h-8212EF2Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 8212EF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EF2C);
		  /* 8212EF2Ch */ case    0:  		/* mr R4, R21 */
		/* 8212EF2Ch case    0:*/		regs.R4 = regs.R21;
		/* 8212EF2Ch case    0:*/		return 0x8212EF30;
		  /* 8212EF30h */ case    1:  		/* mr R3, R31 */
		/* 8212EF30h case    1:*/		regs.R3 = regs.R31;
		/* 8212EF30h case    1:*/		return 0x8212EF34;
		  /* 8212EF34h */ case    2:  		/* bl -204412 */
		/* 8212EF34h case    2:*/		regs.LR = 0x8212EF38; return 0x820FD0B8;
		/* 8212EF34h case    2:*/		return 0x8212EF38;
		  /* 8212EF38h */ case    3:  		/* or. R30, R3, R3 */
		/* 8212EF38h case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EF38h case    3:*/		return 0x8212EF3C;
		  /* 8212EF3Ch */ case    4:  		/* bc 12, CR0_LT, 1392 */
		/* 8212EF3Ch case    4:*/		if ( regs.CR[0].lt ) { return 0x8212F4AC;  }
		/* 8212EF3Ch case    4:*/		return 0x8212EF40;
	}
	return 0x8212EF40;
} // Block from 8212EF2Ch-8212EF40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212EF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EF40);
		  /* 8212EF40h */ case    0:  		/* li R21, 0 */
		/* 8212EF40h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8212EF40h case    0:*/		return 0x8212EF44;
	}
	return 0x8212EF44;
} // Block from 8212EF40h-8212EF44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212EF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EF44);
		  /* 8212EF44h */ case    0:  		/* lwz R4, <#[R31 + 260]> */
		/* 8212EF44h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EF44h case    0:*/		return 0x8212EF48;
	}
	return 0x8212EF48;
} // Block from 8212EF44h-8212EF48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212EF48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EF48);
		  /* 8212EF48h */ case    0:  		/* mr R3, R31 */
		/* 8212EF48h case    0:*/		regs.R3 = regs.R31;
		/* 8212EF48h case    0:*/		return 0x8212EF4C;
		  /* 8212EF4Ch */ case    1:  		/* bl -203492 */
		/* 8212EF4Ch case    1:*/		regs.LR = 0x8212EF50; return 0x820FD468;
		/* 8212EF4Ch case    1:*/		return 0x8212EF50;
		  /* 8212EF50h */ case    2:  		/* or. R30, R3, R3 */
		/* 8212EF50h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8212EF50h case    2:*/		return 0x8212EF54;
		  /* 8212EF54h */ case    3:  		/* bc 12, CR0_LT, 1392 */
		/* 8212EF54h case    3:*/		if ( regs.CR[0].lt ) { return 0x8212F4C4;  }
		/* 8212EF54h case    3:*/		return 0x8212EF58;
		  /* 8212EF58h */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212EF58h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EF58h case    4:*/		return 0x8212EF5C;
		  /* 8212EF5Ch */ case    5:  		/* addi R26, R26, 1 */
		/* 8212EF5Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8212EF5Ch case    5:*/		return 0x8212EF60;
		  /* 8212EF60h */ case    6:  		/* li R10, 0 */
		/* 8212EF60h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212EF60h case    6:*/		return 0x8212EF64;
		  /* 8212EF64h */ case    7:  		/* addi R25, R25, 4 */
		/* 8212EF64h case    7:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 8212EF64h case    7:*/		return 0x8212EF68;
		  /* 8212EF68h */ case    8:  		/* cmplw CR6, R26, R24 */
		/* 8212EF68h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 8212EF68h case    8:*/		return 0x8212EF6C;
		  /* 8212EF6Ch */ case    9:  		/* stw R10, <#[R11]> */
		/* 8212EF6Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212EF6Ch case    9:*/		return 0x8212EF70;
		  /* 8212EF70h */ case   10:  		/* bc 12, CR6_LT, -1116 */
		/* 8212EF70h case   10:*/		if ( regs.CR[6].lt ) { return 0x8212EB14;  }
		/* 8212EF70h case   10:*/		return 0x8212EF74;
	}
	return 0x8212EF74;
} // Block from 8212EF48h-8212EF74h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212EF74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EF74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EF74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EF74);
		  /* 8212EF74h */ case    0:  		/* mr R3, R31 */
		/* 8212EF74h case    0:*/		regs.R3 = regs.R31;
		/* 8212EF74h case    0:*/		return 0x8212EF78;
		  /* 8212EF78h */ case    1:  		/* bl -305048 */
		/* 8212EF78h case    1:*/		regs.LR = 0x8212EF7C; return 0x820E47E0;
		/* 8212EF78h case    1:*/		return 0x8212EF7C;
		  /* 8212EF7Ch */ case    2:  		/* li R28, 0 */
		/* 8212EF7Ch case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212EF7Ch case    2:*/		return 0x8212EF80;
		  /* 8212EF80h */ case    3:  		/* lwz R22, <#[R31 + 12]> */
		/* 8212EF80h case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212EF80h case    3:*/		return 0x8212EF84;
		  /* 8212EF84h */ case    4:  		/* cmplwi CR6, R22, 0 */
		/* 8212EF84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8212EF84h case    4:*/		return 0x8212EF88;
		  /* 8212EF88h */ case    5:  		/* bc 12, CR6_EQ, 1340 */
		/* 8212EF88h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F4C4;  }
		/* 8212EF88h case    5:*/		return 0x8212EF8C;
		  /* 8212EF8Ch */ case    6:  		/* lis R11, -32768 */
		/* 8212EF8Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8212EF8Ch case    6:*/		return 0x8212EF90;
		  /* 8212EF90h */ case    7:  		/* lis R23, 8208 */
		/* 8212EF90h case    7:*/		cpu::op::lis<0>(regs,&regs.R23,0x2010);
		/* 8212EF90h case    7:*/		return 0x8212EF94;
		  /* 8212EF94h */ case    8:  		/* lis R24, 4192 */
		/* 8212EF94h case    8:*/		cpu::op::lis<0>(regs,&regs.R24,0x1060);
		/* 8212EF94h case    8:*/		return 0x8212EF98;
		  /* 8212EF98h */ case    9:  		/* ori R29, R11, 16385 */
		/* 8212EF98h case    9:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x4001);
		/* 8212EF98h case    9:*/		return 0x8212EF9C;
		  /* 8212EF9Ch */ case   10:  		/* lis R25, 20480 */
		/* 8212EF9Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R25,0x5000);
		/* 8212EF9Ch case   10:*/		return 0x8212EFA0;
		  /* 8212EFA0h */ case   11:  		/* lis R26, 24880 */
		/* 8212EFA0h case   11:*/		cpu::op::lis<0>(regs,&regs.R26,0x6130);
		/* 8212EFA0h case   11:*/		return 0x8212EFA4;
		  /* 8212EFA4h */ case   12:  		/* lis R27, 28848 */
		/* 8212EFA4h case   12:*/		cpu::op::lis<0>(regs,&regs.R27,0x70B0);
		/* 8212EFA4h case   12:*/		return 0x8212EFA8;
		  /* 8212EFA8h */ case   13:  		/* stw R28, <#[R31 + 256]> */
		/* 8212EFA8h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000100) );
		/* 8212EFA8h case   13:*/		return 0x8212EFAC;
		  /* 8212EFACh */ case   14:  		/* rlwinm R10, R28, 2, 0, 29 */
		/* 8212EFACh case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R28);
		/* 8212EFACh case   14:*/		return 0x8212EFB0;
		  /* 8212EFB0h */ case   15:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212EFB0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212EFB0h case   15:*/		return 0x8212EFB4;
		  /* 8212EFB4h */ case   16:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8212EFB4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212EFB4h case   16:*/		return 0x8212EFB8;
		  /* 8212EFB8h */ case   17:  		/* stw R11, <#[R31 + 260]> */
		/* 8212EFB8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EFB8h case   17:*/		return 0x8212EFBC;
		  /* 8212EFBCh */ case   18:  		/* lwz R11, <#[R11 + 60]> */
		/* 8212EFBCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212EFBCh case   18:*/		return 0x8212EFC0;
		  /* 8212EFC0h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8212EFC0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212EFC0h case   19:*/		return 0x8212EFC4;
		  /* 8212EFC4h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 8212EFC4h case   20:*/		if ( regs.CR[6].eq ) { return 0x8212EFDC;  }
		/* 8212EFC4h case   20:*/		return 0x8212EFC8;
		  /* 8212EFC8h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212EFC8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212EFC8h case   21:*/		return 0x8212EFCC;
		  /* 8212EFCCh */ case   22:  		/* cmpwi CR6, R10, 14 */
		/* 8212EFCCh case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 8212EFCCh case   22:*/		return 0x8212EFD0;
		  /* 8212EFD0h */ case   23:  		/* bc 4, CR6_EQ, 12 */
		/* 8212EFD0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8212EFDC;  }
		/* 8212EFD0h case   23:*/		return 0x8212EFD4;
		  /* 8212EFD4h */ case   24:  		/* addi R11, R11, 48 */
		/* 8212EFD4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x30);
		/* 8212EFD4h case   24:*/		return 0x8212EFD8;
		  /* 8212EFD8h */ case   25:  		/* stw R11, <#[R31 + 264]> */
		/* 8212EFD8h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000108) );
		/* 8212EFD8h case   25:*/		return 0x8212EFDC;
	}
	return 0x8212EFDC;
} // Block from 8212EF74h-8212EFDCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8212EFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212EFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212EFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212EFDC);
		  /* 8212EFDCh */ case    0:  		/* lwz R10, <#[R31 + 260]> */
		/* 8212EFDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8212EFDCh case    0:*/		return 0x8212EFE0;
		  /* 8212EFE0h */ case    1:  		/* lwz R11, <#[R10]> */
		/* 8212EFE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212EFE0h case    1:*/		return 0x8212EFE4;
		  /* 8212EFE4h */ case    2:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 8212EFE4h case    2:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212EFE4h case    2:*/		return 0x8212EFE8;
		  /* 8212EFE8h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 8212EFE8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212F018;  }
		/* 8212EFE8h case    3:*/		return 0x8212EFEC;
		  /* 8212EFECh */ case    4:  		/* lwz R9, <#[R10 + 4]> */
		/* 8212EFECh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8212EFECh case    4:*/		return 0x8212EFF0;
		  /* 8212EFF0h */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 8212EFF0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8212EFF0h case    5:*/		return 0x8212EFF4;
		  /* 8212EFF4h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 8212EFF4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8212F018;  }
		/* 8212EFF4h case    6:*/		return 0x8212EFF8;
		  /* 8212EFF8h */ case    7:  		/* lwz R9, <#[R10 + 8]> */
		/* 8212EFF8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8212EFF8h case    7:*/		return 0x8212EFFC;
		  /* 8212EFFCh */ case    8:  		/* lwz R8, <#[R31 + 20]> */
		/* 8212EFFCh case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8212EFFCh case    8:*/		return 0x8212F000;
		  /* 8212F000h */ case    9:  		/* lwz R9, <#[R9]> */
		/* 8212F000h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8212F000h case    9:*/		return 0x8212F004;
		  /* 8212F004h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8212F004h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8212F004h case   10:*/		return 0x8212F008;
		  /* 8212F008h */ case   11:  		/* lwzx R9, <#[R9 + R8]> */
		/* 8212F008h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8212F008h case   11:*/		return 0x8212F00C;
		  /* 8212F00Ch */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 8212F00Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8212F00Ch case   12:*/		return 0x8212F010;
		  /* 8212F010h */ case   13:  		/* cmpwi CR6, R9, -1 */
		/* 8212F010h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8212F010h case   13:*/		return 0x8212F014;
		  /* 8212F014h */ case   14:  		/* bc 4, CR6_EQ, 1212 */
		/* 8212F014h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8212F4D0;  }
		/* 8212F014h case   14:*/		return 0x8212F018;
	}
	return 0x8212F018;
} // Block from 8212EFDCh-8212F018h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212F018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F018);
		  /* 8212F018h */ case    0:  		/* cmplw CR6, R11, R19 */
		/* 8212F018h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8212F018h case    0:*/		return 0x8212F01C;
		  /* 8212F01Ch */ case    1:  		/* bc 12, CR6_GT, 656 */
		/* 8212F01Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x8212F2AC;  }
		/* 8212F01Ch case    1:*/		return 0x8212F020;
		  /* 8212F020h */ case    2:  		/* bc 12, CR6_EQ, 844 */
		/* 8212F020h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F36C;  }
		/* 8212F020h case    2:*/		return 0x8212F024;
		  /* 8212F024h */ case    3:  		/* cmplw CR6, R11, R23 */
		/* 8212F024h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8212F024h case    3:*/		return 0x8212F028;
		  /* 8212F028h */ case    4:  		/* bc 12, CR6_GT, 372 */
		/* 8212F028h case    4:*/		if ( regs.CR[6].gt ) { return 0x8212F19C;  }
		/* 8212F028h case    4:*/		return 0x8212F02C;
		  /* 8212F02Ch */ case    5:  		/* bc 12, CR6_EQ, 1084 */
		/* 8212F02Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F468;  }
		/* 8212F02Ch case    5:*/		return 0x8212F030;
		  /* 8212F030h */ case    6:  		/* cmplw CR6, R11, R24 */
		/* 8212F030h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8212F030h case    6:*/		return 0x8212F034;
		  /* 8212F034h */ case    7:  		/* bc 12, CR6_GT, 200 */
		/* 8212F034h case    7:*/		if ( regs.CR[6].gt ) { return 0x8212F0FC;  }
		/* 8212F034h case    7:*/		return 0x8212F038;
		  /* 8212F038h */ case    8:  		/* bc 12, CR6_EQ, 184 */
		/* 8212F038h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212F0F0;  }
		/* 8212F038h case    8:*/		return 0x8212F03C;
		  /* 8212F03Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8212F03Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212F03Ch case    9:*/		return 0x8212F040;
		  /* 8212F040h */ case   10:  		/* bc 12, CR6_EQ, 1076 */
		/* 8212F040h case   10:*/		if ( regs.CR[6].eq ) { return 0x8212F474;  }
		/* 8212F040h case   10:*/		return 0x8212F044;
		  /* 8212F044h */ case   11:  		/* lis R10, 4096 */
		/* 8212F044h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8212F044h case   11:*/		return 0x8212F048;
		  /* 8212F048h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 8212F048h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F048h case   12:*/		return 0x8212F04C;
		  /* 8212F04Ch */ case   13:  		/* bc 12, CR6_EQ, 152 */
		/* 8212F04Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212F0E4;  }
		/* 8212F04Ch case   13:*/		return 0x8212F050;
		  /* 8212F050h */ case   14:  		/* lis R10, 4112 */
		/* 8212F050h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 8212F050h case   14:*/		return 0x8212F054;
		  /* 8212F054h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8212F054h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F054h case   15:*/		return 0x8212F058;
		  /* 8212F058h */ case   16:  		/* bc 12, CR6_EQ, 128 */
		/* 8212F058h case   16:*/		if ( regs.CR[6].eq ) { return 0x8212F0D8;  }
		/* 8212F058h case   16:*/		return 0x8212F05C;
		  /* 8212F05Ch */ case   17:  		/* lis R10, 4144 */
		/* 8212F05Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0x1030);
		/* 8212F05Ch case   17:*/		return 0x8212F060;
		  /* 8212F060h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 8212F060h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F060h case   18:*/		return 0x8212F064;
		  /* 8212F064h */ case   19:  		/* bc 12, CR6_EQ, 104 */
		/* 8212F064h case   19:*/		if ( regs.CR[6].eq ) { return 0x8212F0CC;  }
		/* 8212F064h case   19:*/		return 0x8212F068;
		  /* 8212F068h */ case   20:  		/* lis R10, 4160 */
		/* 8212F068h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x1040);
		/* 8212F068h case   20:*/		return 0x8212F06C;
		  /* 8212F06Ch */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8212F06Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F06Ch case   21:*/		return 0x8212F070;
		  /* 8212F070h */ case   22:  		/* bc 12, CR6_EQ, 80 */
		/* 8212F070h case   22:*/		if ( regs.CR[6].eq ) { return 0x8212F0C0;  }
		/* 8212F070h case   22:*/		return 0x8212F074;
		  /* 8212F074h */ case   23:  		/* lis R10, 4176 */
		/* 8212F074h case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0x1050);
		/* 8212F074h case   23:*/		return 0x8212F078;
		  /* 8212F078h */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 8212F078h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F078h case   24:*/		return 0x8212F07C;
		  /* 8212F07Ch */ case   25:  		/* bc 4, CR6_EQ, 1040 */
		/* 8212F07Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F07Ch case   25:*/		return 0x8212F080;
		  /* 8212F080h */ case   26:  		/* lwz R11, <#[R31]> */
		/* 8212F080h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F080h case   26:*/		return 0x8212F084;
		  /* 8212F084h */ case   27:  		/* lwz R11, <#[R11 + 140]> */
		/* 8212F084h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000008C) );
		/* 8212F084h case   27:*/		return 0x8212F088;
		  /* 8212F088h */ case   28:  		/* mr R3, R31 */
		/* 8212F088h case   28:*/		regs.R3 = regs.R31;
		/* 8212F088h case   28:*/		return 0x8212F08C;
		  /* 8212F08Ch */ case   29:  		/* mtspr CTR, R11 */
		/* 8212F08Ch case   29:*/		regs.CTR = regs.R11;
		/* 8212F08Ch case   29:*/		return 0x8212F090;
		  /* 8212F090h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8212F090h case   30:*/		if ( 1 ) { regs.LR = 0x8212F094; return (uint32)regs.CTR; }
		/* 8212F090h case   30:*/		return 0x8212F094;
		  /* 8212F094h */ case   31:  		/* b 988 */
		/* 8212F094h case   31:*/		return 0x8212F470;
		/* 8212F094h case   31:*/		return 0x8212F098;
	}
	return 0x8212F098;
} // Block from 8212F018h-8212F098h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8212F098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F098);
		  /* 8212F098h */ case    0:  		/* lis R3, -32761 */
		/* 8212F098h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8212F098h case    0:*/		return 0x8212F09C;
		  /* 8212F09Ch */ case    1:  		/* ori R3, R3, 14 */
		/* 8212F09Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8212F09Ch case    1:*/		return 0x8212F0A0;
		  /* 8212F0A0h */ case    2:  		/* b 1064 */
		/* 8212F0A0h case    2:*/		return 0x8212F4C8;
		/* 8212F0A0h case    2:*/		return 0x8212F0A4;
	}
	return 0x8212F0A4;
} // Block from 8212F098h-8212F0A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0A4);
		  /* 8212F0A4h */ case    0:  		/* lis R30, -32761 */
		/* 8212F0A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 8212F0A4h case    0:*/		return 0x8212F0A8;
		  /* 8212F0A8h */ case    1:  		/* ori R30, R30, 14 */
		/* 8212F0A8h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 8212F0A8h case    1:*/		return 0x8212F0AC;
		  /* 8212F0ACh */ case    2:  		/* b 1048 */
		/* 8212F0ACh case    2:*/		return 0x8212F4C4;
		/* 8212F0ACh case    2:*/		return 0x8212F0B0;
	}
	return 0x8212F0B0;
} // Block from 8212F0A4h-8212F0B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0B0);
		  /* 8212F0B0h */ case    0:  		/* mr R3, R29 */
		/* 8212F0B0h case    0:*/		regs.R3 = regs.R29;
		/* 8212F0B0h case    0:*/		return 0x8212F0B4;
	}
	return 0x8212F0B4;
} // Block from 8212F0B0h-8212F0B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0B4);
		  /* 8212F0B4h */ case    0:  		/* bl 975628 */
		/* 8212F0B4h case    0:*/		regs.LR = 0x8212F0B8; return 0x8221D3C0;
		/* 8212F0B4h case    0:*/		return 0x8212F0B8;
		  /* 8212F0B8h */ case    1:  		/* mr R3, R29 */
		/* 8212F0B8h case    1:*/		regs.R3 = regs.R29;
		/* 8212F0B8h case    1:*/		return 0x8212F0BC;
		  /* 8212F0BCh */ case    2:  		/* b 1028 */
		/* 8212F0BCh case    2:*/		return 0x8212F4C0;
		/* 8212F0BCh case    2:*/		return 0x8212F0C0;
	}
	return 0x8212F0C0;
} // Block from 8212F0B4h-8212F0C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0C0);
		  /* 8212F0C0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F0C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F0C0h case    0:*/		return 0x8212F0C4;
		  /* 8212F0C4h */ case    1:  		/* lwz R11, <#[R11 + 136]> */
		/* 8212F0C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000088) );
		/* 8212F0C4h case    1:*/		return 0x8212F0C8;
		  /* 8212F0C8h */ case    2:  		/* b -64 */
		/* 8212F0C8h case    2:*/		return 0x8212F088;
		/* 8212F0C8h case    2:*/		return 0x8212F0CC;
	}
	return 0x8212F0CC;
} // Block from 8212F0C0h-8212F0CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0CC);
		  /* 8212F0CCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F0CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F0CCh case    0:*/		return 0x8212F0D0;
		  /* 8212F0D0h */ case    1:  		/* lwz R11, <#[R11 + 132]> */
		/* 8212F0D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000084) );
		/* 8212F0D0h case    1:*/		return 0x8212F0D4;
		  /* 8212F0D4h */ case    2:  		/* b -76 */
		/* 8212F0D4h case    2:*/		return 0x8212F088;
		/* 8212F0D4h case    2:*/		return 0x8212F0D8;
	}
	return 0x8212F0D8;
} // Block from 8212F0CCh-8212F0D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0D8);
		  /* 8212F0D8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F0D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F0D8h case    0:*/		return 0x8212F0DC;
		  /* 8212F0DCh */ case    1:  		/* lwz R11, <#[R11 + 128]> */
		/* 8212F0DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000080) );
		/* 8212F0DCh case    1:*/		return 0x8212F0E0;
		  /* 8212F0E0h */ case    2:  		/* b -88 */
		/* 8212F0E0h case    2:*/		return 0x8212F088;
		/* 8212F0E0h case    2:*/		return 0x8212F0E4;
	}
	return 0x8212F0E4;
} // Block from 8212F0D8h-8212F0E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0E4);
		  /* 8212F0E4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F0E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F0E4h case    0:*/		return 0x8212F0E8;
		  /* 8212F0E8h */ case    1:  		/* lwz R11, <#[R11 + 124]> */
		/* 8212F0E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000007C) );
		/* 8212F0E8h case    1:*/		return 0x8212F0EC;
		  /* 8212F0ECh */ case    2:  		/* b -100 */
		/* 8212F0ECh case    2:*/		return 0x8212F088;
		/* 8212F0ECh case    2:*/		return 0x8212F0F0;
	}
	return 0x8212F0F0;
} // Block from 8212F0E4h-8212F0F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0F0);
		  /* 8212F0F0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F0F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F0F0h case    0:*/		return 0x8212F0F4;
		  /* 8212F0F4h */ case    1:  		/* lwz R11, <#[R11 + 144]> */
		/* 8212F0F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000090) );
		/* 8212F0F4h case    1:*/		return 0x8212F0F8;
		  /* 8212F0F8h */ case    2:  		/* b -112 */
		/* 8212F0F8h case    2:*/		return 0x8212F088;
		/* 8212F0F8h case    2:*/		return 0x8212F0FC;
	}
	return 0x8212F0FC;
} // Block from 8212F0F0h-8212F0FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F0FC);
		  /* 8212F0FCh */ case    0:  		/* lis R10, 4208 */
		/* 8212F0FCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1070);
		/* 8212F0FCh case    0:*/		return 0x8212F100;
		  /* 8212F100h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8212F100h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F100h case    1:*/		return 0x8212F104;
		  /* 8212F104h */ case    2:  		/* bc 12, CR6_EQ, 140 */
		/* 8212F104h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F190;  }
		/* 8212F104h case    2:*/		return 0x8212F108;
		  /* 8212F108h */ case    3:  		/* lis R10, 4304 */
		/* 8212F108h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x10D0);
		/* 8212F108h case    3:*/		return 0x8212F10C;
		  /* 8212F10Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8212F10Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F10Ch case    4:*/		return 0x8212F110;
		  /* 8212F110h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 8212F110h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F170;  }
		/* 8212F110h case    5:*/		return 0x8212F114;
		  /* 8212F114h */ case    6:  		/* lis R10, 4320 */
		/* 8212F114h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x10E0);
		/* 8212F114h case    6:*/		return 0x8212F118;
		  /* 8212F118h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8212F118h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F118h case    7:*/		return 0x8212F11C;
		  /* 8212F11Ch */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 8212F11Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8212F158;  }
		/* 8212F11Ch case    8:*/		return 0x8212F120;
		  /* 8212F120h */ case    9:  		/* lis R10, 4336 */
		/* 8212F120h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x10F0);
		/* 8212F120h case    9:*/		return 0x8212F124;
		  /* 8212F124h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8212F124h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F124h case   10:*/		return 0x8212F128;
		  /* 8212F128h */ case   11:  		/* bc 12, CR6_EQ, 808 */
		/* 8212F128h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212F450;  }
		/* 8212F128h case   11:*/		return 0x8212F12C;
		  /* 8212F12Ch */ case   12:  		/* cmplw CR6, R11, R20 */
		/* 8212F12Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8212F12Ch case   12:*/		return 0x8212F130;
		  /* 8212F130h */ case   13:  		/* bc 12, CR6_EQ, 28 */
		/* 8212F130h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212F14C;  }
		/* 8212F130h case   13:*/		return 0x8212F134;
		  /* 8212F134h */ case   14:  		/* lis R10, 8192 */
		/* 8212F134h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 8212F134h case   14:*/		return 0x8212F138;
		  /* 8212F138h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8212F138h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F138h case   15:*/		return 0x8212F13C;
		  /* 8212F13Ch */ case   16:  		/* bc 4, CR6_EQ, 848 */
		/* 8212F13Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F13Ch case   16:*/		return 0x8212F140;
		  /* 8212F140h */ case   17:  		/* mr R3, R31 */
		/* 8212F140h case   17:*/		regs.R3 = regs.R31;
		/* 8212F140h case   17:*/		return 0x8212F144;
		  /* 8212F144h */ case   18:  		/* bl -9732 */
		/* 8212F144h case   18:*/		regs.LR = 0x8212F148; return 0x8212CB40;
		/* 8212F144h case   18:*/		return 0x8212F148;
	}
	return 0x8212F148;
} // Block from 8212F0FCh-8212F148h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212F148h
// Function '?SrcSwizzle@CPSProgram@D3DXShader@@MAAJPAIIKPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F148);
		  /* 8212F148h */ case    0:  		/* b 808 */
		/* 8212F148h case    0:*/		return 0x8212F470;
		/* 8212F148h case    0:*/		return 0x8212F14C;
	}
	return 0x8212F14C;
} // Block from 8212F148h-8212F14Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F14C);
		  /* 8212F14Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F14Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F14Ch case    0:*/		return 0x8212F150;
		  /* 8212F150h */ case    1:  		/* lwz R11, <#[R11 + 220]> */
		/* 8212F150h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000DC) );
		/* 8212F150h case    1:*/		return 0x8212F154;
		  /* 8212F154h */ case    2:  		/* b -204 */
		/* 8212F154h case    2:*/		return 0x8212F088;
		/* 8212F154h case    2:*/		return 0x8212F158;
	}
	return 0x8212F158;
} // Block from 8212F14Ch-8212F158h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F158);
		  /* 8212F158h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 8212F158h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8212F158h case    0:*/		return 0x8212F15C;
		  /* 8212F15Ch */ case    1:  		/* rlwinm. R11, R11, 0, 5, 5 */
		/* 8212F15Ch case    1:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R11,regs.R11);
		/* 8212F15Ch case    1:*/		return 0x8212F160;
		  /* 8212F160h */ case    2:  		/* bc 12, CR0_EQ, 40 */
		/* 8212F160h case    2:*/		if ( regs.CR[0].eq ) { return 0x8212F188;  }
		/* 8212F160h case    2:*/		return 0x8212F164;
		  /* 8212F164h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8212F164h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F164h case    3:*/		return 0x8212F168;
		  /* 8212F168h */ case    4:  		/* lwz R11, <#[R11 + 228]> */
		/* 8212F168h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E4) );
		/* 8212F168h case    4:*/		return 0x8212F16C;
		  /* 8212F16Ch */ case    5:  		/* b -228 */
		/* 8212F16Ch case    5:*/		return 0x8212F088;
		/* 8212F16Ch case    5:*/		return 0x8212F170;
	}
	return 0x8212F170;
} // Block from 8212F158h-8212F170h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212F170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F170);
		  /* 8212F170h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 8212F170h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8212F170h case    0:*/		return 0x8212F174;
		  /* 8212F174h */ case    1:  		/* rlwinm. R11, R11, 0, 5, 5 */
		/* 8212F174h case    1:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R11,regs.R11);
		/* 8212F174h case    1:*/		return 0x8212F178;
		  /* 8212F178h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8212F178h case    2:*/		if ( regs.CR[0].eq ) { return 0x8212F188;  }
		/* 8212F178h case    2:*/		return 0x8212F17C;
		  /* 8212F17Ch */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8212F17Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F17Ch case    3:*/		return 0x8212F180;
		  /* 8212F180h */ case    4:  		/* lwz R11, <#[R11 + 224]> */
		/* 8212F180h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E0) );
		/* 8212F180h case    4:*/		return 0x8212F184;
		  /* 8212F184h */ case    5:  		/* b -252 */
		/* 8212F184h case    5:*/		return 0x8212F088;
		/* 8212F184h case    5:*/		return 0x8212F188;
	}
	return 0x8212F188;
} // Block from 8212F170h-8212F188h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212F188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F188);
		  /* 8212F188h */ case    0:  		/* mr R30, R29 */
		/* 8212F188h case    0:*/		regs.R30 = regs.R29;
		/* 8212F188h case    0:*/		return 0x8212F18C;
		  /* 8212F18Ch */ case    1:  		/* b 744 */
		/* 8212F18Ch case    1:*/		return 0x8212F474;
		/* 8212F18Ch case    1:*/		return 0x8212F190;
	}
	return 0x8212F190;
} // Block from 8212F188h-8212F190h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212F190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F190);
		  /* 8212F190h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F190h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F190h case    0:*/		return 0x8212F194;
		  /* 8212F194h */ case    1:  		/* lwz R11, <#[R11 + 152]> */
		/* 8212F194h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000098) );
		/* 8212F194h case    1:*/		return 0x8212F198;
		  /* 8212F198h */ case    2:  		/* b -272 */
		/* 8212F198h case    2:*/		return 0x8212F088;
		/* 8212F198h case    2:*/		return 0x8212F19C;
	}
	return 0x8212F19C;
} // Block from 8212F190h-8212F19Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F19C);
		  /* 8212F19Ch */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 8212F19Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8212F19Ch case    0:*/		return 0x8212F1A0;
		  /* 8212F1A0h */ case    1:  		/* bc 12, CR6_GT, 164 */
		/* 8212F1A0h case    1:*/		if ( regs.CR[6].gt ) { return 0x8212F244;  }
		/* 8212F1A0h case    1:*/		return 0x8212F1A4;
		  /* 8212F1A4h */ case    2:  		/* bc 12, CR6_EQ, 148 */
		/* 8212F1A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F238;  }
		/* 8212F1A4h case    2:*/		return 0x8212F1A8;
		  /* 8212F1A8h */ case    3:  		/* lis R10, 8224 */
		/* 8212F1A8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x2020);
		/* 8212F1A8h case    3:*/		return 0x8212F1AC;
		  /* 8212F1ACh */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8212F1ACh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F1ACh case    4:*/		return 0x8212F1B0;
		  /* 8212F1B0h */ case    5:  		/* bc 12, CR6_EQ, 124 */
		/* 8212F1B0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F22C;  }
		/* 8212F1B0h case    5:*/		return 0x8212F1B4;
		  /* 8212F1B4h */ case    6:  		/* lis R10, 8240 */
		/* 8212F1B4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x2030);
		/* 8212F1B4h case    6:*/		return 0x8212F1B8;
		  /* 8212F1B8h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8212F1B8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F1B8h case    7:*/		return 0x8212F1BC;
		  /* 8212F1BCh */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 8212F1BCh case    8:*/		if ( regs.CR[6].eq ) { return 0x8212F220;  }
		/* 8212F1BCh case    8:*/		return 0x8212F1C0;
		  /* 8212F1C0h */ case    9:  		/* lis R10, 8256 */
		/* 8212F1C0h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 8212F1C0h case    9:*/		return 0x8212F1C4;
		  /* 8212F1C4h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8212F1C4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F1C4h case   10:*/		return 0x8212F1C8;
		  /* 8212F1C8h */ case   11:  		/* bc 12, CR6_EQ, 76 */
		/* 8212F1C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212F214;  }
		/* 8212F1C8h case   11:*/		return 0x8212F1CC;
		  /* 8212F1CCh */ case   12:  		/* lis R10, 8272 */
		/* 8212F1CCh case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x2050);
		/* 8212F1CCh case   12:*/		return 0x8212F1D0;
		  /* 8212F1D0h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8212F1D0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F1D0h case   13:*/		return 0x8212F1D4;
		  /* 8212F1D4h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 8212F1D4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212F208;  }
		/* 8212F1D4h case   14:*/		return 0x8212F1D8;
		  /* 8212F1D8h */ case   15:  		/* lis R10, 8304 */
		/* 8212F1D8h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x2070);
		/* 8212F1D8h case   15:*/		return 0x8212F1DC;
		  /* 8212F1DCh */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8212F1DCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F1DCh case   16:*/		return 0x8212F1E0;
		  /* 8212F1E0h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 8212F1E0h case   17:*/		if ( regs.CR[6].eq ) { return 0x8212F1FC;  }
		/* 8212F1E0h case   17:*/		return 0x8212F1E4;
		  /* 8212F1E4h */ case   18:  		/* lis R10, 12288 */
		/* 8212F1E4h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x3000);
		/* 8212F1E4h case   18:*/		return 0x8212F1E8;
		  /* 8212F1E8h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8212F1E8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F1E8h case   19:*/		return 0x8212F1EC;
		  /* 8212F1ECh */ case   20:  		/* bc 4, CR6_EQ, 672 */
		/* 8212F1ECh case   20:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F1ECh case   20:*/		return 0x8212F1F0;
		  /* 8212F1F0h */ case   21:  		/* lwz R11, <#[R31]> */
		/* 8212F1F0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F1F0h case   21:*/		return 0x8212F1F4;
		  /* 8212F1F4h */ case   22:  		/* lwz R11, <#[R11 + 188]> */
		/* 8212F1F4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000BC) );
		/* 8212F1F4h case   22:*/		return 0x8212F1F8;
		  /* 8212F1F8h */ case   23:  		/* b -368 */
		/* 8212F1F8h case   23:*/		return 0x8212F088;
		/* 8212F1F8h case   23:*/		return 0x8212F1FC;
	}
	return 0x8212F1FC;
} // Block from 8212F19Ch-8212F1FCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 8212F1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F1FC);
		  /* 8212F1FCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F1FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F1FCh case    0:*/		return 0x8212F200;
		  /* 8212F200h */ case    1:  		/* lwz R11, <#[R11 + 260]> */
		/* 8212F200h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000104) );
		/* 8212F200h case    1:*/		return 0x8212F204;
		  /* 8212F204h */ case    2:  		/* b -380 */
		/* 8212F204h case    2:*/		return 0x8212F088;
		/* 8212F204h case    2:*/		return 0x8212F208;
	}
	return 0x8212F208;
} // Block from 8212F1FCh-8212F208h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F208);
		  /* 8212F208h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F208h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F208h case    0:*/		return 0x8212F20C;
		  /* 8212F20Ch */ case    1:  		/* lwz R11, <#[R11 + 176]> */
		/* 8212F20Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B0) );
		/* 8212F20Ch case    1:*/		return 0x8212F210;
		  /* 8212F210h */ case    2:  		/* b -392 */
		/* 8212F210h case    2:*/		return 0x8212F088;
		/* 8212F210h case    2:*/		return 0x8212F214;
	}
	return 0x8212F214;
} // Block from 8212F208h-8212F214h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F214);
		  /* 8212F214h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F214h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F214h case    0:*/		return 0x8212F218;
		  /* 8212F218h */ case    1:  		/* lwz R11, <#[R11 + 172]> */
		/* 8212F218h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000AC) );
		/* 8212F218h case    1:*/		return 0x8212F21C;
		  /* 8212F21Ch */ case    2:  		/* b -404 */
		/* 8212F21Ch case    2:*/		return 0x8212F088;
		/* 8212F21Ch case    2:*/		return 0x8212F220;
	}
	return 0x8212F220;
} // Block from 8212F214h-8212F220h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F220);
		  /* 8212F220h */ case    0:  		/* mr R3, R31 */
		/* 8212F220h case    0:*/		regs.R3 = regs.R31;
		/* 8212F220h case    0:*/		return 0x8212F224;
		  /* 8212F224h */ case    1:  		/* bl -11028 */
		/* 8212F224h case    1:*/		regs.LR = 0x8212F228; return 0x8212C710;
		/* 8212F224h case    1:*/		return 0x8212F228;
		  /* 8212F228h */ case    2:  		/* b 584 */
		/* 8212F228h case    2:*/		return 0x8212F470;
		/* 8212F228h case    2:*/		return 0x8212F22C;
	}
	return 0x8212F22C;
} // Block from 8212F220h-8212F22Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F22C);
		  /* 8212F22Ch */ case    0:  		/* mr R3, R31 */
		/* 8212F22Ch case    0:*/		regs.R3 = regs.R31;
		/* 8212F22Ch case    0:*/		return 0x8212F230;
		  /* 8212F230h */ case    1:  		/* bl -10728 */
		/* 8212F230h case    1:*/		regs.LR = 0x8212F234; return 0x8212C848;
		/* 8212F230h case    1:*/		return 0x8212F234;
		  /* 8212F234h */ case    2:  		/* b 572 */
		/* 8212F234h case    2:*/		return 0x8212F470;
		/* 8212F234h case    2:*/		return 0x8212F238;
	}
	return 0x8212F238;
} // Block from 8212F22Ch-8212F238h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F238);
		  /* 8212F238h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F238h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F238h case    0:*/		return 0x8212F23C;
		  /* 8212F23Ch */ case    1:  		/* lwz R11, <#[R11 + 180]> */
		/* 8212F23Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B4) );
		/* 8212F23Ch case    1:*/		return 0x8212F240;
		  /* 8212F240h */ case    2:  		/* b -440 */
		/* 8212F240h case    2:*/		return 0x8212F088;
		/* 8212F240h case    2:*/		return 0x8212F244;
	}
	return 0x8212F244;
} // Block from 8212F238h-8212F244h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F244);
		  /* 8212F244h */ case    0:  		/* lis R9, 20528 */
		/* 8212F244h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0x5030);
		/* 8212F244h case    0:*/		return 0x8212F248;
		  /* 8212F248h */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 8212F248h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F248h case    1:*/		return 0x8212F24C;
		  /* 8212F24Ch */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8212F24Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F2A0;  }
		/* 8212F24Ch case    2:*/		return 0x8212F250;
		  /* 8212F250h */ case    3:  		/* cmplw CR6, R11, R18 */
		/* 8212F250h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 8212F250h case    3:*/		return 0x8212F254;
		  /* 8212F254h */ case    4:  		/* bc 12, CR6_EQ, 280 */
		/* 8212F254h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212F36C;  }
		/* 8212F254h case    4:*/		return 0x8212F258;
		  /* 8212F258h */ case    5:  		/* lis R9, 24592 */
		/* 8212F258h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0x6010);
		/* 8212F258h case    5:*/		return 0x8212F25C;
		  /* 8212F25Ch */ case    6:  		/* cmplw CR6, R11, R9 */
		/* 8212F25Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F25Ch case    6:*/		return 0x8212F260;
		  /* 8212F260h */ case    7:  		/* bc 12, CR6_EQ, 168 */
		/* 8212F260h case    7:*/		if ( regs.CR[6].eq ) { return 0x8212F308;  }
		/* 8212F260h case    7:*/		return 0x8212F264;
		  /* 8212F264h */ case    8:  		/* lis R9, 24608 */
		/* 8212F264h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0x6020);
		/* 8212F264h case    8:*/		return 0x8212F268;
		  /* 8212F268h */ case    9:  		/* cmplw CR6, R11, R9 */
		/* 8212F268h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F268h case    9:*/		return 0x8212F26C;
		  /* 8212F26Ch */ case   10:  		/* bc 12, CR6_EQ, 244 */
		/* 8212F26Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8212F360;  }
		/* 8212F26Ch case   10:*/		return 0x8212F270;
		  /* 8212F270h */ case   11:  		/* lis R9, 24624 */
		/* 8212F270h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0x6030);
		/* 8212F270h case   11:*/		return 0x8212F274;
		  /* 8212F274h */ case   12:  		/* cmplw CR6, R11, R9 */
		/* 8212F274h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F274h case   12:*/		return 0x8212F278;
		  /* 8212F278h */ case   13:  		/* bc 12, CR6_EQ, 220 */
		/* 8212F278h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212F354;  }
		/* 8212F278h case   13:*/		return 0x8212F27C;
		  /* 8212F27Ch */ case   14:  		/* lis R9, 24640 */
		/* 8212F27Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0x6040);
		/* 8212F27Ch case   14:*/		return 0x8212F280;
		  /* 8212F280h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 8212F280h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F280h case   15:*/		return 0x8212F284;
		  /* 8212F284h */ case   16:  		/* bc 4, CR6_EQ, 520 */
		/* 8212F284h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F284h case   16:*/		return 0x8212F288;
		  /* 8212F288h */ case   17:  		/* lwz R11, <#[R31 + 112]> */
		/* 8212F288h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8212F288h case   17:*/		return 0x8212F28C;
		  /* 8212F28Ch */ case   18:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 8212F28Ch case   18:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 8212F28Ch case   18:*/		return 0x8212F290;
		  /* 8212F290h */ case   19:  		/* bc 12, CR0_EQ, 612 */
		/* 8212F290h case   19:*/		if ( regs.CR[0].eq ) { return 0x8212F4F4;  }
		/* 8212F290h case   19:*/		return 0x8212F294;
		  /* 8212F294h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 8212F294h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F294h case   20:*/		return 0x8212F298;
		  /* 8212F298h */ case   21:  		/* lwz R11, <#[R11 + 276]> */
		/* 8212F298h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000114) );
		/* 8212F298h case   21:*/		return 0x8212F29C;
		  /* 8212F29Ch */ case   22:  		/* b -532 */
		/* 8212F29Ch case   22:*/		return 0x8212F088;
		/* 8212F29Ch case   22:*/		return 0x8212F2A0;
	}
	return 0x8212F2A0;
} // Block from 8212F244h-8212F2A0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212F2A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F2A0);
		  /* 8212F2A0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F2A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F2A0h case    0:*/		return 0x8212F2A4;
		  /* 8212F2A4h */ case    1:  		/* lwz R11, <#[R11 + 232]> */
		/* 8212F2A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E8) );
		/* 8212F2A4h case    1:*/		return 0x8212F2A8;
		  /* 8212F2A8h */ case    2:  		/* b -544 */
		/* 8212F2A8h case    2:*/		return 0x8212F088;
		/* 8212F2A8h case    2:*/		return 0x8212F2AC;
	}
	return 0x8212F2AC;
} // Block from 8212F2A0h-8212F2ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F2ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F2AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F2AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F2AC);
		  /* 8212F2ACh */ case    0:  		/* cmplw CR6, R11, R26 */
		/* 8212F2ACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8212F2ACh case    0:*/		return 0x8212F2B0;
		  /* 8212F2B0h */ case    1:  		/* bc 12, CR6_GT, 200 */
		/* 8212F2B0h case    1:*/		if ( regs.CR[6].gt ) { return 0x8212F378;  }
		/* 8212F2B0h case    1:*/		return 0x8212F2B4;
		  /* 8212F2B4h */ case    2:  		/* bc 12, CR6_EQ, -44 */
		/* 8212F2B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F288;  }
		/* 8212F2B4h case    2:*/		return 0x8212F2B8;
		  /* 8212F2B8h */ case    3:  		/* cmplw CR6, R11, R17 */
		/* 8212F2B8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 8212F2B8h case    3:*/		return 0x8212F2BC;
		  /* 8212F2BCh */ case    4:  		/* bc 12, CR6_GT, 88 */
		/* 8212F2BCh case    4:*/		if ( regs.CR[6].gt ) { return 0x8212F314;  }
		/* 8212F2BCh case    4:*/		return 0x8212F2C0;
		  /* 8212F2C0h */ case    5:  		/* bc 12, CR6_EQ, 160 */
		/* 8212F2C0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F360;  }
		/* 8212F2C0h case    5:*/		return 0x8212F2C4;
		  /* 8212F2C4h */ case    6:  		/* lis R9, 24672 */
		/* 8212F2C4h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x6060);
		/* 8212F2C4h case    6:*/		return 0x8212F2C8;
		  /* 8212F2C8h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 8212F2C8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F2C8h case    7:*/		return 0x8212F2CC;
		  /* 8212F2CCh */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 8212F2CCh case    8:*/		if ( regs.CR[6].eq ) { return 0x8212F308;  }
		/* 8212F2CCh case    8:*/		return 0x8212F2D0;
		  /* 8212F2D0h */ case    9:  		/* lis R9, 24688 */
		/* 8212F2D0h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0x6070);
		/* 8212F2D0h case    9:*/		return 0x8212F2D4;
		  /* 8212F2D4h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 8212F2D4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F2D4h case   10:*/		return 0x8212F2D8;
		  /* 8212F2D8h */ case   11:  		/* bc 12, CR6_EQ, 136 */
		/* 8212F2D8h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212F360;  }
		/* 8212F2D8h case   11:*/		return 0x8212F2DC;
		  /* 8212F2DCh */ case   12:  		/* cmplw CR6, R11, R14 */
		/* 8212F2DCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 8212F2DCh case   12:*/		return 0x8212F2E0;
		  /* 8212F2E0h */ case   13:  		/* bc 12, CR6_EQ, 116 */
		/* 8212F2E0h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212F354;  }
		/* 8212F2E0h case   13:*/		return 0x8212F2E4;
		  /* 8212F2E4h */ case   14:  		/* lis R9, 24720 */
		/* 8212F2E4h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0x6090);
		/* 8212F2E4h case   14:*/		return 0x8212F2E8;
		  /* 8212F2E8h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 8212F2E8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F2E8h case   15:*/		return 0x8212F2EC;
		  /* 8212F2ECh */ case   16:  		/* bc 12, CR6_EQ, -100 */
		/* 8212F2ECh case   16:*/		if ( regs.CR[6].eq ) { return 0x8212F288;  }
		/* 8212F2ECh case   16:*/		return 0x8212F2F0;
		  /* 8212F2F0h */ case   17:  		/* lis R10, 24736 */
		/* 8212F2F0h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 8212F2F0h case   17:*/		return 0x8212F2F4;
		  /* 8212F2F4h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 8212F2F4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F2F4h case   18:*/		return 0x8212F2F8;
		  /* 8212F2F8h */ case   19:  		/* bc 12, CR6_EQ, 116 */
		/* 8212F2F8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8212F36C;  }
		/* 8212F2F8h case   19:*/		return 0x8212F2FC;
		  /* 8212F2FCh */ case   20:  		/* lis R10, 24752 */
		/* 8212F2FCh case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x60B0);
		/* 8212F2FCh case   20:*/		return 0x8212F300;
		  /* 8212F300h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8212F300h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F300h case   21:*/		return 0x8212F304;
		  /* 8212F304h */ case   22:  		/* bc 4, CR6_EQ, 392 */
		/* 8212F304h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F304h case   22:*/		return 0x8212F308;
	}
	return 0x8212F308;
} // Block from 8212F2ACh-8212F308h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212F308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F308);
		  /* 8212F308h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F308h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F308h case    0:*/		return 0x8212F30C;
		  /* 8212F30Ch */ case    1:  		/* lwz R11, <#[R11 + 280]> */
		/* 8212F30Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000118) );
		/* 8212F30Ch case    1:*/		return 0x8212F310;
		  /* 8212F310h */ case    2:  		/* b -648 */
		/* 8212F310h case    2:*/		return 0x8212F088;
		/* 8212F310h case    2:*/		return 0x8212F314;
	}
	return 0x8212F314;
} // Block from 8212F308h-8212F314h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F314);
		  /* 8212F314h */ case    0:  		/* cmplw CR6, R11, R15 */
		/* 8212F314h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 8212F314h case    0:*/		return 0x8212F318;
		  /* 8212F318h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 8212F318h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F354;  }
		/* 8212F318h case    1:*/		return 0x8212F31C;
		  /* 8212F31Ch */ case    2:  		/* lis R9, 24800 */
		/* 8212F31Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0x60E0);
		/* 8212F31Ch case    2:*/		return 0x8212F320;
		  /* 8212F320h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 8212F320h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212F320h case    3:*/		return 0x8212F324;
		  /* 8212F324h */ case    4:  		/* bc 12, CR6_EQ, -156 */
		/* 8212F324h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212F288;  }
		/* 8212F324h case    4:*/		return 0x8212F328;
		  /* 8212F328h */ case    5:  		/* lis R10, 24816 */
		/* 8212F328h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 8212F328h case    5:*/		return 0x8212F32C;
		  /* 8212F32Ch */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8212F32Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F32Ch case    6:*/		return 0x8212F330;
		  /* 8212F330h */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 8212F330h case    7:*/		if ( regs.CR[6].eq ) { return 0x8212F36C;  }
		/* 8212F330h case    7:*/		return 0x8212F334;
		  /* 8212F334h */ case    8:  		/* lis R10, 24832 */
		/* 8212F334h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x6100);
		/* 8212F334h case    8:*/		return 0x8212F338;
		  /* 8212F338h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 8212F338h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F338h case    9:*/		return 0x8212F33C;
		  /* 8212F33Ch */ case   10:  		/* bc 12, CR6_EQ, -52 */
		/* 8212F33Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8212F308;  }
		/* 8212F33Ch case   10:*/		return 0x8212F340;
		  /* 8212F340h */ case   11:  		/* lis R10, 24848 */
		/* 8212F340h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x6110);
		/* 8212F340h case   11:*/		return 0x8212F344;
		  /* 8212F344h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 8212F344h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F344h case   12:*/		return 0x8212F348;
		  /* 8212F348h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 8212F348h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212F360;  }
		/* 8212F348h case   13:*/		return 0x8212F34C;
		  /* 8212F34Ch */ case   14:  		/* cmplw CR6, R11, R16 */
		/* 8212F34Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 8212F34Ch case   14:*/		return 0x8212F350;
		  /* 8212F350h */ case   15:  		/* bc 4, CR6_EQ, 316 */
		/* 8212F350h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F350h case   15:*/		return 0x8212F354;
	}
	return 0x8212F354;
} // Block from 8212F314h-8212F354h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212F354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F354);
		  /* 8212F354h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F354h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F354h case    0:*/		return 0x8212F358;
		  /* 8212F358h */ case    1:  		/* lwz R11, <#[R11 + 272]> */
		/* 8212F358h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000110) );
		/* 8212F358h case    1:*/		return 0x8212F35C;
		  /* 8212F35Ch */ case    2:  		/* b -724 */
		/* 8212F35Ch case    2:*/		return 0x8212F088;
		/* 8212F35Ch case    2:*/		return 0x8212F360;
	}
	return 0x8212F360;
} // Block from 8212F354h-8212F360h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F360);
		  /* 8212F360h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F360h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F360h case    0:*/		return 0x8212F364;
		  /* 8212F364h */ case    1:  		/* lwz R11, <#[R11 + 268]> */
		/* 8212F364h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000010C) );
		/* 8212F364h case    1:*/		return 0x8212F368;
		  /* 8212F368h */ case    2:  		/* b -736 */
		/* 8212F368h case    2:*/		return 0x8212F088;
		/* 8212F368h case    2:*/		return 0x8212F36C;
	}
	return 0x8212F36C;
} // Block from 8212F360h-8212F36Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F36Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F36C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F36C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F36C);
		  /* 8212F36Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F36Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F36Ch case    0:*/		return 0x8212F370;
		  /* 8212F370h */ case    1:  		/* lwz R11, <#[R11 + 264]> */
		/* 8212F370h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000108) );
		/* 8212F370h case    1:*/		return 0x8212F374;
		  /* 8212F374h */ case    2:  		/* b -748 */
		/* 8212F374h case    2:*/		return 0x8212F088;
		/* 8212F374h case    2:*/		return 0x8212F378;
	}
	return 0x8212F378;
} // Block from 8212F36Ch-8212F378h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F378);
		  /* 8212F378h */ case    0:  		/* cmplw CR6, R11, R27 */
		/* 8212F378h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8212F378h case    0:*/		return 0x8212F37C;
		  /* 8212F37Ch */ case    1:  		/* bc 12, CR6_GT, 140 */
		/* 8212F37Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x8212F408;  }
		/* 8212F37Ch case    1:*/		return 0x8212F380;
		  /* 8212F380h */ case    2:  		/* bc 12, CR6_EQ, -576 */
		/* 8212F380h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F140;  }
		/* 8212F380h case    2:*/		return 0x8212F384;
		  /* 8212F384h */ case    3:  		/* lis R10, 28672 */
		/* 8212F384h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7000);
		/* 8212F384h case    3:*/		return 0x8212F388;
		  /* 8212F388h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8212F388h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F388h case    4:*/		return 0x8212F38C;
		  /* 8212F38Ch */ case    5:  		/* bc 12, CR6_EQ, 112 */
		/* 8212F38Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F3FC;  }
		/* 8212F38Ch case    5:*/		return 0x8212F390;
		  /* 8212F390h */ case    6:  		/* lis R10, 28688 */
		/* 8212F390h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7010);
		/* 8212F390h case    6:*/		return 0x8212F394;
		  /* 8212F394h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8212F394h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F394h case    7:*/		return 0x8212F398;
		  /* 8212F398h */ case    8:  		/* bc 12, CR6_EQ, 88 */
		/* 8212F398h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212F3F0;  }
		/* 8212F398h case    8:*/		return 0x8212F39C;
		  /* 8212F39Ch */ case    9:  		/* lis R10, 28704 */
		/* 8212F39Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7020);
		/* 8212F39Ch case    9:*/		return 0x8212F3A0;
		  /* 8212F3A0h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8212F3A0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F3A0h case   10:*/		return 0x8212F3A4;
		  /* 8212F3A4h */ case   11:  		/* bc 12, CR6_EQ, 64 */
		/* 8212F3A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212F3E4;  }
		/* 8212F3A4h case   11:*/		return 0x8212F3A8;
		  /* 8212F3A8h */ case   12:  		/* lis R10, 28720 */
		/* 8212F3A8h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x7030);
		/* 8212F3A8h case   12:*/		return 0x8212F3AC;
		  /* 8212F3ACh */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8212F3ACh case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F3ACh case   13:*/		return 0x8212F3B0;
		  /* 8212F3B0h */ case   14:  		/* bc 12, CR6_EQ, 40 */
		/* 8212F3B0h case   14:*/		if ( regs.CR[6].eq ) { return 0x8212F3D8;  }
		/* 8212F3B0h case   14:*/		return 0x8212F3B4;
		  /* 8212F3B4h */ case   15:  		/* lis R10, 28736 */
		/* 8212F3B4h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x7040);
		/* 8212F3B4h case   15:*/		return 0x8212F3B8;
		  /* 8212F3B8h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8212F3B8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F3B8h case   16:*/		return 0x8212F3BC;
		  /* 8212F3BCh */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 8212F3BCh case   17:*/		if ( regs.CR[6].eq ) { return 0x8212F3D8;  }
		/* 8212F3BCh case   17:*/		return 0x8212F3C0;
	}
	return 0x8212F3C0;
} // Block from 8212F378h-8212F3C0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8212F3C0h
// Function '??_GCPSProgram@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F3C0);
		  /* 8212F3C0h */ case    0:  		/* lis R10, 28800 */
		/* 8212F3C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7080);
		/* 8212F3C0h case    0:*/		return 0x8212F3C4;
		  /* 8212F3C4h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8212F3C4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F3C4h case    1:*/		return 0x8212F3C8;
		  /* 8212F3C8h */ case    2:  		/* bc 4, CR6_EQ, 196 */
		/* 8212F3C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F3C8h case    2:*/		return 0x8212F3CC;
		  /* 8212F3CCh */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8212F3CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F3CCh case    3:*/		return 0x8212F3D0;
		  /* 8212F3D0h */ case    4:  		/* lwz R11, <#[R11 + 284]> */
		/* 8212F3D0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000011C) );
		/* 8212F3D0h case    4:*/		return 0x8212F3D4;
		  /* 8212F3D4h */ case    5:  		/* b -844 */
		/* 8212F3D4h case    5:*/		return 0x8212F088;
		/* 8212F3D4h case    5:*/		return 0x8212F3D8;
	}
	return 0x8212F3D8;
} // Block from 8212F3C0h-8212F3D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212F3D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F3D8);
		  /* 8212F3D8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F3D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F3D8h case    0:*/		return 0x8212F3DC;
		  /* 8212F3DCh */ case    1:  		/* lwz R11, <#[R11 + 208]> */
		/* 8212F3DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D0) );
		/* 8212F3DCh case    1:*/		return 0x8212F3E0;
		  /* 8212F3E0h */ case    2:  		/* b -856 */
		/* 8212F3E0h case    2:*/		return 0x8212F088;
		/* 8212F3E0h case    2:*/		return 0x8212F3E4;
	}
	return 0x8212F3E4;
} // Block from 8212F3D8h-8212F3E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F3E4);
		  /* 8212F3E4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F3E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F3E4h case    0:*/		return 0x8212F3E8;
		  /* 8212F3E8h */ case    1:  		/* lwz R11, <#[R11 + 204]> */
		/* 8212F3E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000CC) );
		/* 8212F3E8h case    1:*/		return 0x8212F3EC;
		  /* 8212F3ECh */ case    2:  		/* b -868 */
		/* 8212F3ECh case    2:*/		return 0x8212F088;
		/* 8212F3ECh case    2:*/		return 0x8212F3F0;
	}
	return 0x8212F3F0;
} // Block from 8212F3E4h-8212F3F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F3F0);
		  /* 8212F3F0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F3F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F3F0h case    0:*/		return 0x8212F3F4;
		  /* 8212F3F4h */ case    1:  		/* lwz R11, <#[R11 + 200]> */
		/* 8212F3F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C8) );
		/* 8212F3F4h case    1:*/		return 0x8212F3F8;
		  /* 8212F3F8h */ case    2:  		/* b -880 */
		/* 8212F3F8h case    2:*/		return 0x8212F088;
		/* 8212F3F8h case    2:*/		return 0x8212F3FC;
	}
	return 0x8212F3FC;
} // Block from 8212F3F0h-8212F3FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F3FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F3FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F3FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F3FC);
		  /* 8212F3FCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F3FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F3FCh case    0:*/		return 0x8212F400;
		  /* 8212F400h */ case    1:  		/* lwz R11, <#[R11 + 196]> */
		/* 8212F400h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C4) );
		/* 8212F400h case    1:*/		return 0x8212F404;
		  /* 8212F404h */ case    2:  		/* b -892 */
		/* 8212F404h case    2:*/		return 0x8212F088;
		/* 8212F404h case    2:*/		return 0x8212F408;
	}
	return 0x8212F408;
} // Block from 8212F3FCh-8212F408h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F408);
		  /* 8212F408h */ case    0:  		/* lis R10, 28864 */
		/* 8212F408h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x70C0);
		/* 8212F408h case    0:*/		return 0x8212F40C;
		  /* 8212F40Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8212F40Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F40Ch case    1:*/		return 0x8212F410;
		  /* 8212F410h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8212F410h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F468;  }
		/* 8212F410h case    2:*/		return 0x8212F414;
		  /* 8212F414h */ case    3:  		/* lis R10, 28880 */
		/* 8212F414h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x70D0);
		/* 8212F414h case    3:*/		return 0x8212F418;
		  /* 8212F418h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8212F418h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F418h case    4:*/		return 0x8212F41C;
		  /* 8212F41Ch */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 8212F41Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F45C;  }
		/* 8212F41Ch case    5:*/		return 0x8212F420;
	}
	return 0x8212F420;
} // Block from 8212F408h-8212F420h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212F420h
// Function '?Constrain@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F420);
		  /* 8212F420h */ case    0:  		/* lis R10, 29520 */
		/* 8212F420h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7350);
		/* 8212F420h case    0:*/		return 0x8212F424;
		  /* 8212F424h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8212F424h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F424h case    1:*/		return 0x8212F428;
		  /* 8212F428h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 8212F428h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F450;  }
		/* 8212F428h case    2:*/		return 0x8212F42C;
		  /* 8212F42Ch */ case    3:  		/* lis R10, 29536 */
		/* 8212F42Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7360);
		/* 8212F42Ch case    3:*/		return 0x8212F430;
		  /* 8212F430h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8212F430h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F430h case    4:*/		return 0x8212F434;
		  /* 8212F434h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 8212F434h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F450;  }
		/* 8212F434h case    5:*/		return 0x8212F438;
		  /* 8212F438h */ case    6:  		/* lis R10, 29552 */
		/* 8212F438h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7370);
		/* 8212F438h case    6:*/		return 0x8212F43C;
		  /* 8212F43Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8212F43Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F43Ch case    7:*/		return 0x8212F440;
		  /* 8212F440h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 8212F440h case    8:*/		if ( regs.CR[6].eq ) { return 0x8212F450;  }
		/* 8212F440h case    8:*/		return 0x8212F444;
		  /* 8212F444h */ case    9:  		/* lis R10, 29568 */
		/* 8212F444h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7380);
		/* 8212F444h case    9:*/		return 0x8212F448;
		  /* 8212F448h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8212F448h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F448h case   10:*/		return 0x8212F44C;
		  /* 8212F44Ch */ case   11:  		/* bc 4, CR6_EQ, 64 */
		/* 8212F44Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8212F48C;  }
		/* 8212F44Ch case   11:*/		return 0x8212F450;
	}
	return 0x8212F450;
} // Block from 8212F420h-8212F450h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212F450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F450);
		  /* 8212F450h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F450h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F450h case    0:*/		return 0x8212F454;
		  /* 8212F454h */ case    1:  		/* lwz R11, <#[R11 + 256]> */
		/* 8212F454h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000100) );
		/* 8212F454h case    1:*/		return 0x8212F458;
		  /* 8212F458h */ case    2:  		/* b -976 */
		/* 8212F458h case    2:*/		return 0x8212F088;
		/* 8212F458h case    2:*/		return 0x8212F45C;
	}
	return 0x8212F45C;
} // Block from 8212F450h-8212F45Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F45C);
		  /* 8212F45Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8212F45Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F45Ch case    0:*/		return 0x8212F460;
		  /* 8212F460h */ case    1:  		/* lwz R11, <#[R11 + 148]> */
		/* 8212F460h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000094) );
		/* 8212F460h case    1:*/		return 0x8212F464;
		  /* 8212F464h */ case    2:  		/* b -988 */
		/* 8212F464h case    2:*/		return 0x8212F088;
		/* 8212F464h case    2:*/		return 0x8212F468;
	}
	return 0x8212F468;
} // Block from 8212F45Ch-8212F468h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212F468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F468);
		  /* 8212F468h */ case    0:  		/* mr R3, R31 */
		/* 8212F468h case    0:*/		regs.R3 = regs.R31;
		/* 8212F468h case    0:*/		return 0x8212F46C;
		  /* 8212F46Ch */ case    1:  		/* bl -10988 */
		/* 8212F46Ch case    1:*/		regs.LR = 0x8212F470; return 0x8212C980;
		/* 8212F46Ch case    1:*/		return 0x8212F470;
	}
	return 0x8212F470;
} // Block from 8212F468h-8212F470h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212F470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F470);
		  /* 8212F470h */ case    0:  		/* mr R30, R3 */
		/* 8212F470h case    0:*/		regs.R30 = regs.R3;
		/* 8212F470h case    0:*/		return 0x8212F474;
	}
	return 0x8212F474;
} // Block from 8212F470h-8212F474h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F474);
		  /* 8212F474h */ case    0:  		/* cmpw CR6, R30, R29 */
		/* 8212F474h case    0:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R29);
		/* 8212F474h case    0:*/		return 0x8212F478;
		  /* 8212F478h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8212F478h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F490;  }
		/* 8212F478h case    1:*/		return 0x8212F47C;
		  /* 8212F47Ch */ case    2:  		/* addi R28, R28, 1 */
		/* 8212F47Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8212F47Ch case    2:*/		return 0x8212F480;
		  /* 8212F480h */ case    3:  		/* cmplw CR6, R28, R22 */
		/* 8212F480h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R22);
		/* 8212F480h case    3:*/		return 0x8212F484;
		  /* 8212F484h */ case    4:  		/* bc 12, CR6_LT, -1244 */
		/* 8212F484h case    4:*/		if ( regs.CR[6].lt ) { return 0x8212EFA8;  }
		/* 8212F484h case    4:*/		return 0x8212F488;
		  /* 8212F488h */ case    5:  		/* b 60 */
		/* 8212F488h case    5:*/		return 0x8212F4C4;
		/* 8212F488h case    5:*/		return 0x8212F48C;
	}
	return 0x8212F48C;
} // Block from 8212F474h-8212F48Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212F48Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F48C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F48C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F48C);
		  /* 8212F48Ch */ case    0:  		/* mr R30, R29 */
		/* 8212F48Ch case    0:*/		regs.R30 = regs.R29;
		/* 8212F48Ch case    0:*/		return 0x8212F490;
	}
	return 0x8212F490;
} // Block from 8212F48Ch-8212F490h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F490);
		  /* 8212F490h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212F490h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212F490h case    0:*/		return 0x8212F494;
		  /* 8212F494h */ case    1:  		/* lis R10, -32254 */
		/* 8212F494h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 8212F494h case    1:*/		return 0x8212F498;
		  /* 8212F498h */ case    2:  		/* li R5, 4532 */
		/* 8212F498h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 8212F498h case    2:*/		return 0x8212F49C;
		  /* 8212F49Ch */ case    3:  		/* addi R6, R10, -31928 */
		/* 8212F49Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8348);
		/* 8212F49Ch case    3:*/		return 0x8212F4A0;
		  /* 8212F4A0h */ case    4:  		/* mr R3, R31 */
		/* 8212F4A0h case    4:*/		regs.R3 = regs.R31;
		/* 8212F4A0h case    4:*/		return 0x8212F4A4;
		  /* 8212F4A4h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 8212F4A4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212F4A4h case    5:*/		return 0x8212F4A8;
		  /* 8212F4A8h */ case    6:  		/* bl -134520 */
		/* 8212F4A8h case    6:*/		regs.LR = 0x8212F4AC; return 0x8210E730;
		/* 8212F4A8h case    6:*/		return 0x8212F4AC;
	}
	return 0x8212F4AC;
} // Block from 8212F490h-8212F4ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4AC);
		  /* 8212F4ACh */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8212F4ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8212F4ACh case    0:*/		return 0x8212F4B0;
		  /* 8212F4B0h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8212F4B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F4C4;  }
		/* 8212F4B0h case    1:*/		return 0x8212F4B4;
		  /* 8212F4B4h */ case    2:  		/* mr R3, R21 */
		/* 8212F4B4h case    2:*/		regs.R3 = regs.R21;
		/* 8212F4B4h case    2:*/		return 0x8212F4B8;
		  /* 8212F4B8h */ case    3:  		/* bl 974600 */
		/* 8212F4B8h case    3:*/		regs.LR = 0x8212F4BC; return 0x8221D3C0;
		/* 8212F4B8h case    3:*/		return 0x8212F4BC;
		  /* 8212F4BCh */ case    4:  		/* mr R3, R21 */
		/* 8212F4BCh case    4:*/		regs.R3 = regs.R21;
		/* 8212F4BCh case    4:*/		return 0x8212F4C0;
	}
	return 0x8212F4C0;
} // Block from 8212F4ACh-8212F4C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4C0);
		  /* 8212F4C0h */ case    0:  		/* bl -208592 */
		/* 8212F4C0h case    0:*/		regs.LR = 0x8212F4C4; return 0x820FC5F0;
		/* 8212F4C0h case    0:*/		return 0x8212F4C4;
	}
	return 0x8212F4C4;
} // Block from 8212F4C0h-8212F4C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4C4);
		  /* 8212F4C4h */ case    0:  		/* mr R3, R30 */
		/* 8212F4C4h case    0:*/		regs.R3 = regs.R30;
		/* 8212F4C4h case    0:*/		return 0x8212F4C8;
	}
	return 0x8212F4C8;
} // Block from 8212F4C4h-8212F4C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4C8);
		  /* 8212F4C8h */ case    0:  		/* addi R1, R1, 272 */
		/* 8212F4C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8212F4C8h case    0:*/		return 0x8212F4CC;
		  /* 8212F4CCh */ case    1:  		/* b -647772 */
		/* 8212F4CCh case    1:*/		return 0x82091270;
		/* 8212F4CCh case    1:*/		return 0x8212F4D0;
	}
	return 0x8212F4D0;
} // Block from 8212F4C8h-8212F4D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4D0);
		  /* 8212F4D0h */ case    0:  		/* lis R11, -32253 */
		/* 8212F4D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212F4D0h case    0:*/		return 0x8212F4D4;
		  /* 8212F4D4h */ case    1:  		/* lwz R4, <#[R10 + 60]> */
		/* 8212F4D4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000003C) );
		/* 8212F4D4h case    1:*/		return 0x8212F4D8;
		  /* 8212F4D8h */ case    2:  		/* li R5, 4511 */
		/* 8212F4D8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x119F);
		/* 8212F4D8h case    2:*/		return 0x8212F4DC;
		  /* 8212F4DCh */ case    3:  		/* addi R6, R11, 15980 */
		/* 8212F4DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3E6C);
		/* 8212F4DCh case    3:*/		return 0x8212F4E0;
	}
	return 0x8212F4E0;
} // Block from 8212F4D0h-8212F4E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4E0h
// Function '?IsDPNoSwizzle@CPSProgram@D3DXShader@@MAAHPAVCInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4E0);
		  /* 8212F4E0h */ case    0:  		/* mr R3, R31 */
		/* 8212F4E0h case    0:*/		regs.R3 = regs.R31;
		/* 8212F4E0h case    0:*/		return 0x8212F4E4;
		  /* 8212F4E4h */ case    1:  		/* bl -134580 */
		/* 8212F4E4h case    1:*/		regs.LR = 0x8212F4E8; return 0x8210E730;
		/* 8212F4E4h case    1:*/		return 0x8212F4E8;
		  /* 8212F4E8h */ case    2:  		/* lis R30, -32768 */
		/* 8212F4E8h case    2:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 8212F4E8h case    2:*/		return 0x8212F4EC;
		  /* 8212F4ECh */ case    3:  		/* ori R30, R30, 16389 */
		/* 8212F4ECh case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 8212F4ECh case    3:*/		return 0x8212F4F0;
		  /* 8212F4F0h */ case    4:  		/* b -44 */
		/* 8212F4F0h case    4:*/		return 0x8212F4C4;
		/* 8212F4F0h case    4:*/		return 0x8212F4F4;
	}
	return 0x8212F4F4;
} // Block from 8212F4E0h-8212F4F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212F4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F4F4);
		  /* 8212F4F4h */ case    0:  		/* lis R11, -32253 */
		/* 8212F4F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212F4F4h case    0:*/		return 0x8212F4F8;
		  /* 8212F4F8h */ case    1:  		/* lwz R4, <#[R10 + 60]> */
		/* 8212F4F8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000003C) );
		/* 8212F4F8h case    1:*/		return 0x8212F4FC;
		  /* 8212F4FCh */ case    2:  		/* li R5, 4532 */
		/* 8212F4FCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 8212F4FCh case    2:*/		return 0x8212F500;
		  /* 8212F500h */ case    3:  		/* addi R6, R11, 15944 */
		/* 8212F500h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3E48);
		/* 8212F500h case    3:*/		return 0x8212F504;
		  /* 8212F504h */ case    4:  		/* mr R3, R31 */
		/* 8212F504h case    4:*/		regs.R3 = regs.R31;
		/* 8212F504h case    4:*/		return 0x8212F508;
		  /* 8212F508h */ case    5:  		/* bl -134616 */
		/* 8212F508h case    5:*/		regs.LR = 0x8212F50C; return 0x8210E730;
		/* 8212F508h case    5:*/		return 0x8212F50C;
		  /* 8212F50Ch */ case    6:  		/* mr R30, R29 */
		/* 8212F50Ch case    6:*/		regs.R30 = regs.R29;
		/* 8212F50Ch case    6:*/		return 0x8212F510;
		  /* 8212F510h */ case    7:  		/* b -76 */
		/* 8212F510h case    7:*/		return 0x8212F4C4;
		/* 8212F510h case    7:*/		return 0x8212F514;
		  /* 8212F514h */ case    8:  		/* nop */
		/* 8212F514h case    8:*/		cpu::op::nop();
		/* 8212F514h case    8:*/		return 0x8212F518;
	}
	return 0x8212F518;
} // Block from 8212F4F4h-8212F518h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212F518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F518);
		  /* 8212F518h */ case    0:  		/* mfspr R12, LR */
		/* 8212F518h case    0:*/		regs.R12 = regs.LR;
		/* 8212F518h case    0:*/		return 0x8212F51C;
		  /* 8212F51Ch */ case    1:  		/* bl -647904 */
		/* 8212F51Ch case    1:*/		regs.LR = 0x8212F520; return 0x8209123C;
		/* 8212F51Ch case    1:*/		return 0x8212F520;
		  /* 8212F520h */ case    2:  		/* stwu R1, <#[R1 - 336]> */
		/* 8212F520h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 8212F520h case    2:*/		return 0x8212F524;
		  /* 8212F524h */ case    3:  		/* mr R31, R3 */
		/* 8212F524h case    3:*/		regs.R31 = regs.R3;
		/* 8212F524h case    3:*/		return 0x8212F528;
		  /* 8212F528h */ case    4:  		/* mr R27, R4 */
		/* 8212F528h case    4:*/		regs.R27 = regs.R4;
		/* 8212F528h case    4:*/		return 0x8212F52C;
		  /* 8212F52Ch */ case    5:  		/* mr R21, R5 */
		/* 8212F52Ch case    5:*/		regs.R21 = regs.R5;
		/* 8212F52Ch case    5:*/		return 0x8212F530;
		  /* 8212F530h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8212F530h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8212F530h case    6:*/		return 0x8212F534;
		  /* 8212F534h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 8212F534h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8212F540;  }
		/* 8212F534h case    7:*/		return 0x8212F538;
		  /* 8212F538h */ case    8:  		/* li R3, 1 */
		/* 8212F538h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212F538h case    8:*/		return 0x8212F53C;
		  /* 8212F53Ch */ case    9:  		/* b 520 */
		/* 8212F53Ch case    9:*/		return 0x8212F744;
		/* 8212F53Ch case    9:*/		return 0x8212F540;
	}
	return 0x8212F540;
} // Block from 8212F518h-8212F540h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212F540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F540);
		  /* 8212F540h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8212F540h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8212F540h case    0:*/		return 0x8212F544;
		  /* 8212F544h */ case    1:  		/* rlwinm. R10, R11, 0, 0, 11 */
		/* 8212F544h case    1:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8212F544h case    1:*/		return 0x8212F548;
		  /* 8212F548h */ case    2:  		/* bc 12, CR0_EQ, 504 */
		/* 8212F548h case    2:*/		if ( regs.CR[0].eq ) { return 0x8212F740;  }
		/* 8212F548h case    2:*/		return 0x8212F54C;
		  /* 8212F54Ch */ case    3:  		/* lis R9, 8304 */
		/* 8212F54Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x2070);
		/* 8212F54Ch case    3:*/		return 0x8212F550;
		  /* 8212F550h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 8212F550h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8212F550h case    4:*/		return 0x8212F554;
		  /* 8212F554h */ case    5:  		/* bc 12, CR6_EQ, 492 */
		/* 8212F554h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212F740;  }
		/* 8212F554h case    5:*/		return 0x8212F558;
		  /* 8212F558h */ case    6:  		/* lwz R9, <#[R27 + 4]> */
		/* 8212F558h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000004) );
		/* 8212F558h case    6:*/		return 0x8212F55C;
		  /* 8212F55Ch */ case    7:  		/* rlwinm R10, R11, 0, 12, 31 */
		/* 8212F55Ch case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R11);
		/* 8212F55Ch case    7:*/		return 0x8212F560;
		  /* 8212F560h */ case    8:  		/* divwu R23, R9, R10 */
		/* 8212F560h case    8:*/		cpu::op::divwu<0>(regs,&regs.R23,regs.R9,regs.R10);
		/* 8212F560h case    8:*/		return 0x8212F564;
		  /* 8212F564h */ case    9:  		/* twi 6, R10, 0 */
		/* 8212F564h case    9:*/		cpu::op::tw<6>(regs, 0x8212F564, regs.R10, 0x00000000);
		/* 8212F564h case    9:*/		return 0x8212F568;
		  /* 8212F568h */ case   10:  		/* cmplwi CR6, R23, 1 */
		/* 8212F568h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000001);
		/* 8212F568h case   10:*/		return 0x8212F56C;
		  /* 8212F56Ch */ case   11:  		/* bc 4, CR6_GT, 468 */
		/* 8212F56Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x8212F740;  }
		/* 8212F56Ch case   11:*/		return 0x8212F570;
		  /* 8212F570h */ case   12:  		/* lwz R11, <#[R31 + 128]> */
		/* 8212F570h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8212F570h case   12:*/		return 0x8212F574;
		  /* 8212F574h */ case   13:  		/* addi R9, R1, 80 */
		/* 8212F574h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8212F574h case   13:*/		return 0x8212F578;
		  /* 8212F578h */ case   14:  		/* lwz R8, <#[R31 + 136]> */
		/* 8212F578h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000088) );
		/* 8212F578h case   14:*/		return 0x8212F57C;
		  /* 8212F57Ch */ case   15:  		/* addi R4, R1, 80 */
		/* 8212F57Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8212F57Ch case   15:*/		return 0x8212F580;
		  /* 8212F580h */ case   16:  		/* lwz R6, <#[R31 + 124]> */
		/* 8212F580h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000007C) );
		/* 8212F580h case   16:*/		return 0x8212F584;
		  /* 8212F584h */ case   17:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8212F584h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8212F584h case   17:*/		return 0x8212F588;
		  /* 8212F588h */ case   18:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8212F588h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8212F588h case   18:*/		return 0x8212F58C;
		  /* 8212F58Ch */ case   19:  		/* lwz R11, <#[R31 + 148]> */
		/* 8212F58Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000094) );
		/* 8212F58Ch case   19:*/		return 0x8212F590;
		  /* 8212F590h */ case   20:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8212F590h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8212F590h case   20:*/		return 0x8212F594;
		  /* 8212F594h */ case   21:  		/* addi R30, R1, 80 */
		/* 8212F594h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 8212F594h case   21:*/		return 0x8212F598;
		  /* 8212F598h */ case   22:  		/* li R28, 0 */
		/* 8212F598h case   22:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8212F598h case   22:*/		return 0x8212F59C;
		  /* 8212F59Ch */ case   23:  		/* addi R7, R1, 160 */
		/* 8212F59Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 8212F59Ch case   23:*/		return 0x8212F5A0;
		  /* 8212F5A0h */ case   24:  		/* stwx R28, <#[R5 + R9]> */
		/* 8212F5A0h case   24:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 8212F5A0h case   24:*/		return 0x8212F5A4;
		  /* 8212F5A4h */ case   25:  		/* addi R3, R1, 160 */
		/* 8212F5A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 8212F5A4h case   25:*/		return 0x8212F5A8;
		  /* 8212F5A8h */ case   26:  		/* rlwinm R26, R11, 2, 0, 29 */
		/* 8212F5A8h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R11);
		/* 8212F5A8h case   26:*/		return 0x8212F5AC;
		  /* 8212F5ACh */ case   27:  		/* stwx R28, <#[R8 + R4]> */
		/* 8212F5ACh case   27:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8212F5ACh case   27:*/		return 0x8212F5B0;
		  /* 8212F5B0h */ case   28:  		/* addi R25, R1, 160 */
		/* 8212F5B0h case   28:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0xA0);
		/* 8212F5B0h case   28:*/		return 0x8212F5B4;
		  /* 8212F5B4h */ case   29:  		/* stwx R28, <#[R6 + R30]> */
		/* 8212F5B4h case   29:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R6 + regs.R30 + 0x00000000) );
		/* 8212F5B4h case   29:*/		return 0x8212F5B8;
		  /* 8212F5B8h */ case   30:  		/* li R11, 1 */
		/* 8212F5B8h case   30:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212F5B8h case   30:*/		return 0x8212F5BC;
		  /* 8212F5BCh */ case   31:  		/* addi R9, R1, 80 */
		/* 8212F5BCh case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8212F5BCh case   31:*/		return 0x8212F5C0;
		  /* 8212F5C0h */ case   32:  		/* addi R4, R1, 160 */
		/* 8212F5C0h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 8212F5C0h case   32:*/		return 0x8212F5C4;
		  /* 8212F5C4h */ case   33:  		/* stwx R11, <#[R5 + R7]> */
		/* 8212F5C4h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 8212F5C4h case   33:*/		return 0x8212F5C8;
		  /* 8212F5C8h */ case   34:  		/* li R30, 3 */
		/* 8212F5C8h case   34:*/		cpu::op::li<0>(regs,&regs.R30,0x3);
		/* 8212F5C8h case   34:*/		return 0x8212F5CC;
		  /* 8212F5CCh */ case   35:  		/* mr R22, R28 */
		/* 8212F5CCh case   35:*/		regs.R22 = regs.R28;
		/* 8212F5CCh case   35:*/		return 0x8212F5D0;
		  /* 8212F5D0h */ case   36:  		/* stwx R30, <#[R8 + R3]> */
		/* 8212F5D0h case   36:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8212F5D0h case   36:*/		return 0x8212F5D4;
		  /* 8212F5D4h */ case   37:  		/* cmplwi CR6, R23, 0 */
		/* 8212F5D4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8212F5D4h case   37:*/		return 0x8212F5D8;
		  /* 8212F5D8h */ case   38:  		/* stwx R11, <#[R6 + R25]> */
		/* 8212F5D8h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + regs.R25 + 0x00000000) );
		/* 8212F5D8h case   38:*/		return 0x8212F5DC;
		  /* 8212F5DCh */ case   39:  		/* mr R29, R28 */
		/* 8212F5DCh case   39:*/		regs.R29 = regs.R28;
		/* 8212F5DCh case   39:*/		return 0x8212F5E0;
		  /* 8212F5E0h */ case   40:  		/* stwx R28, <#[R26 + R9]> */
		/* 8212F5E0h case   40:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R26 + regs.R9 + 0x00000000) );
		/* 8212F5E0h case   40:*/		return 0x8212F5E4;
		  /* 8212F5E4h */ case   41:  		/* stwx R11, <#[R26 + R4]> */
		/* 8212F5E4h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + regs.R4 + 0x00000000) );
		/* 8212F5E4h case   41:*/		return 0x8212F5E8;
		  /* 8212F5E8h */ case   42:  		/* bc 12, CR6_EQ, 344 */
		/* 8212F5E8h case   42:*/		if ( regs.CR[6].eq ) { return 0x8212F740;  }
		/* 8212F5E8h case   42:*/		return 0x8212F5EC;
		  /* 8212F5ECh */ case   43:  		/* rlwinm R24, R10, 2, 0, 29 */
		/* 8212F5ECh case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R10);
		/* 8212F5ECh case   43:*/		return 0x8212F5F0;
		  /* 8212F5F0h */ case   44:  		/* mr R26, R28 */
		/* 8212F5F0h case   44:*/		regs.R26 = regs.R28;
		/* 8212F5F0h case   44:*/		return 0x8212F5F4;
		  /* 8212F5F4h */ case   45:  		/* lwz R11, <#[R27 + 8]> */
		/* 8212F5F4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8212F5F4h case   45:*/		return 0x8212F5F8;
	}
	return 0x8212F5F8;
} // Block from 8212F540h-8212F5F8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8212F5F8h
// Function '?EmitInstructions@CPSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F5F8);
		  /* 8212F5F8h */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 8212F5F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212F5F8h case    0:*/		return 0x8212F5FC;
		  /* 8212F5FCh */ case    1:  		/* lwz R9, <#[R31 + 16]> */
		/* 8212F5FCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8212F5FCh case    1:*/		return 0x8212F600;
		  /* 8212F600h */ case    2:  		/* lwzx R11, <#[R11 + R26]> */
		/* 8212F600h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8212F600h case    2:*/		return 0x8212F604;
		  /* 8212F604h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212F604h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212F604h case    3:*/		return 0x8212F608;
		  /* 8212F608h */ case    4:  		/* lwzx R30, <#[R11 + R10]> */
		/* 8212F608h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212F608h case    4:*/		return 0x8212F60C;
		  /* 8212F60Ch */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 8212F60Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8212F60Ch case    5:*/		return 0x8212F610;
		  /* 8212F610h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212F610h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212F610h case    6:*/		return 0x8212F614;
		  /* 8212F614h */ case    7:  		/* lwzx R25, <#[R11 + R9]> */
		/* 8212F614h case    7:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212F614h case    7:*/		return 0x8212F618;
		  /* 8212F618h */ case    8:  		/* lwz R11, <#[R25 + 4]> */
		/* 8212F618h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 8212F618h case    8:*/		return 0x8212F61C;
		  /* 8212F61Ch */ case    9:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 8212F61Ch case    9:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 8212F61Ch case    9:*/		return 0x8212F620;
		  /* 8212F620h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 8212F620h case   10:*/		if ( regs.CR[0].eq ) { return 0x8212F634;  }
		/* 8212F620h case   10:*/		return 0x8212F624;
		  /* 8212F624h */ case   11:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 8212F624h case   11:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 8212F624h case   11:*/		return 0x8212F628;
		  /* 8212F628h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 8212F628h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8212F634;  }
		/* 8212F628h case   12:*/		return 0x8212F62C;
		  /* 8212F62Ch */ case   13:  		/* lwz R5, <#[R31 + 124]> */
		/* 8212F62Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000007C) );
		/* 8212F62Ch case   13:*/		return 0x8212F630;
		  /* 8212F630h */ case   14:  		/* b 80 */
		/* 8212F630h case   14:*/		return 0x8212F680;
		/* 8212F630h case   14:*/		return 0x8212F634;
	}
	return 0x8212F634;
} // Block from 8212F5F8h-8212F634h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212F634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F634);
		  /* 8212F634h */ case    0:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 8212F634h case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 8212F634h case    0:*/		return 0x8212F638;
		  /* 8212F638h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8212F638h case    1:*/		if ( regs.CR[0].eq ) { return 0x8212F644;  }
		/* 8212F638h case    1:*/		return 0x8212F63C;
		  /* 8212F63Ch */ case    2:  		/* lwz R5, <#[R31 + 148]> */
		/* 8212F63Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000094) );
		/* 8212F63Ch case    2:*/		return 0x8212F640;
		  /* 8212F640h */ case    3:  		/* b 64 */
		/* 8212F640h case    3:*/		return 0x8212F680;
		/* 8212F640h case    3:*/		return 0x8212F644;
	}
	return 0x8212F644;
} // Block from 8212F634h-8212F644h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212F644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F644);
		  /* 8212F644h */ case    0:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 8212F644h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 8212F644h case    0:*/		return 0x8212F648;
		  /* 8212F648h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 8212F648h case    1:*/		if ( regs.CR[0].eq ) { return 0x8212F67C;  }
		/* 8212F648h case    1:*/		return 0x8212F64C;
		  /* 8212F64Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8212F64Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8212F64Ch case    2:*/		return 0x8212F650;
		  /* 8212F650h */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 8212F650h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8212F67C;  }
		/* 8212F650h case    3:*/		return 0x8212F654;
		  /* 8212F654h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 8212F654h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F654h case    4:*/		return 0x8212F658;
		  /* 8212F658h */ case    5:  		/* mr R3, R31 */
		/* 8212F658h case    5:*/		regs.R3 = regs.R31;
		/* 8212F658h case    5:*/		return 0x8212F65C;
		  /* 8212F65Ch */ case    6:  		/* lwz R4, <#[R30 + 108]> */
		/* 8212F65Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000006C) );
		/* 8212F65Ch case    6:*/		return 0x8212F660;
		  /* 8212F660h */ case    7:  		/* lwz R11, <#[R11 + 112]> */
		/* 8212F660h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8212F660h case    7:*/		return 0x8212F664;
		  /* 8212F664h */ case    8:  		/* mtspr CTR, R11 */
		/* 8212F664h case    8:*/		regs.CTR = regs.R11;
		/* 8212F664h case    8:*/		return 0x8212F668;
		  /* 8212F668h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8212F668h case    9:*/		if ( 1 ) { regs.LR = 0x8212F66C; return (uint32)regs.CTR; }
		/* 8212F668h case    9:*/		return 0x8212F66C;
		  /* 8212F66Ch */ case   10:  		/* cmplwi CR6, R3, 65535 */
		/* 8212F66Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000FFFF);
		/* 8212F66Ch case   10:*/		return 0x8212F670;
		  /* 8212F670h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8212F670h case   11:*/		if ( regs.CR[6].eq ) { return 0x8212F67C;  }
		/* 8212F670h case   11:*/		return 0x8212F674;
		  /* 8212F674h */ case   12:  		/* lwz R5, <#[R31 + 128]> */
		/* 8212F674h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000080) );
		/* 8212F674h case   12:*/		return 0x8212F678;
		  /* 8212F678h */ case   13:  		/* b 8 */
		/* 8212F678h case   13:*/		return 0x8212F680;
		/* 8212F678h case   13:*/		return 0x8212F67C;
	}
	return 0x8212F67C;
} // Block from 8212F644h-8212F67Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212F67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F67C);
		  /* 8212F67Ch */ case    0:  		/* lwz R5, <#[R31 + 136]> */
		/* 8212F67Ch case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000088) );
		/* 8212F67Ch case    0:*/		return 0x8212F680;
	}
	return 0x8212F680;
} // Block from 8212F67Ch-8212F680h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F680);
		  /* 8212F680h */ case    0:  		/* mr R6, R28 */
		/* 8212F680h case    0:*/		regs.R6 = regs.R28;
		/* 8212F680h case    0:*/		return 0x8212F684;
		  /* 8212F684h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 8212F684h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212F684h case    1:*/		return 0x8212F688;
		  /* 8212F688h */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 8212F688h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212F6E4;  }
		/* 8212F688h case    2:*/		return 0x8212F68C;
		  /* 8212F68Ch */ case    3:  		/* lwz R9, <#[R27 + 8]> */
		/* 8212F68Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000008) );
		/* 8212F68Ch case    3:*/		return 0x8212F690;
		  /* 8212F690h */ case    4:  		/* mr R11, R28 */
		/* 8212F690h case    4:*/		regs.R11 = regs.R28;
		/* 8212F690h case    4:*/		return 0x8212F694;
		  /* 8212F694h */ case    5:  		/* lwz R8, <#[R31 + 20]> */
		/* 8212F694h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8212F694h case    5:*/		return 0x8212F698;
		  /* 8212F698h */ case    6:  		/* lwz R7, <#[R30 + 4]> */
		/* 8212F698h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 8212F698h case    6:*/		return 0x8212F69C;
		  /* 8212F69Ch */ case    7:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8212F69Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212F69Ch case    7:*/		return 0x8212F6A0;
		  /* 8212F6A0h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212F6A0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212F6A0h case    8:*/		return 0x8212F6A4;
		  /* 8212F6A4h */ case    9:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8212F6A4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8212F6A4h case    9:*/		return 0x8212F6A8;
		  /* 8212F6A8h */ case   10:  		/* lwz R4, <#[R10 + 4]> */
		/* 8212F6A8h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 8212F6A8h case   10:*/		return 0x8212F6AC;
		  /* 8212F6ACh */ case   11:  		/* cmplw CR6, R7, R4 */
		/* 8212F6ACh case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 8212F6ACh case   11:*/		return 0x8212F6B0;
		  /* 8212F6B0h */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 8212F6B0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212F6D4;  }
		/* 8212F6B0h case   12:*/		return 0x8212F6B4;
		  /* 8212F6B4h */ case   13:  		/* lwz R4, <#[R30 + 8]> */
		/* 8212F6B4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 8212F6B4h case   13:*/		return 0x8212F6B8;
		  /* 8212F6B8h */ case   14:  		/* lwz R3, <#[R10 + 8]> */
		/* 8212F6B8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 8212F6B8h case   14:*/		return 0x8212F6BC;
		  /* 8212F6BCh */ case   15:  		/* cmplw CR6, R4, R3 */
		/* 8212F6BCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 8212F6BCh case   15:*/		return 0x8212F6C0;
		  /* 8212F6C0h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 8212F6C0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8212F6D4;  }
		/* 8212F6C0h case   16:*/		return 0x8212F6C4;
		  /* 8212F6C4h */ case   17:  		/* lwz R4, <#[R30 + 12]> */
		/* 8212F6C4h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 8212F6C4h case   17:*/		return 0x8212F6C8;
		  /* 8212F6C8h */ case   18:  		/* lwz R10, <#[R10 + 12]> */
		/* 8212F6C8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212F6C8h case   18:*/		return 0x8212F6CC;
		  /* 8212F6CCh */ case   19:  		/* cmplw CR6, R4, R10 */
		/* 8212F6CCh case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 8212F6CCh case   19:*/		return 0x8212F6D0;
		  /* 8212F6D0h */ case   20:  		/* bc 12, CR6_EQ, 20 */
		/* 8212F6D0h case   20:*/		if ( regs.CR[6].eq ) { return 0x8212F6E4;  }
		/* 8212F6D0h case   20:*/		return 0x8212F6D4;
	}
	return 0x8212F6D4;
} // Block from 8212F680h-8212F6D4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8212F6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F6D4);
		  /* 8212F6D4h */ case    0:  		/* addi R6, R6, 1 */
		/* 8212F6D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8212F6D4h case    0:*/		return 0x8212F6D8;
		  /* 8212F6D8h */ case    1:  		/* add R11, R24, R11 */
		/* 8212F6D8h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 8212F6D8h case    1:*/		return 0x8212F6DC;
		  /* 8212F6DCh */ case    2:  		/* cmplw CR6, R6, R29 */
		/* 8212F6DCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 8212F6DCh case    2:*/		return 0x8212F6E0;
		  /* 8212F6E0h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 8212F6E0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212F69C;  }
		/* 8212F6E0h case    3:*/		return 0x8212F6E4;
	}
	return 0x8212F6E4;
} // Block from 8212F6D4h-8212F6E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212F6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F6E4);
		  /* 8212F6E4h */ case    0:  		/* cmplw CR6, R6, R29 */
		/* 8212F6E4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 8212F6E4h case    0:*/		return 0x8212F6E8;
		  /* 8212F6E8h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 8212F6E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212F718;  }
		/* 8212F6E8h case    1:*/		return 0x8212F6EC;
		  /* 8212F6ECh */ case    2:  		/* cmplwi CR6, R5, 18 */
		/* 8212F6ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000012);
		/* 8212F6ECh case    2:*/		return 0x8212F6F0;
		  /* 8212F6F0h */ case    3:  		/* bc 4, CR6_LT, 40 */
		/* 8212F6F0h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8212F718;  }
		/* 8212F6F0h case    3:*/		return 0x8212F6F4;
		  /* 8212F6F4h */ case    4:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 8212F6F4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 8212F6F4h case    4:*/		return 0x8212F6F8;
		  /* 8212F6F8h */ case    5:  		/* addi R9, R1, 80 */
		/* 8212F6F8h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8212F6F8h case    5:*/		return 0x8212F6FC;
		  /* 8212F6FCh */ case    6:  		/* addi R8, R1, 160 */
		/* 8212F6FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 8212F6FCh case    6:*/		return 0x8212F700;
		  /* 8212F700h */ case    7:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8212F700h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212F700h case    7:*/		return 0x8212F704;
		  /* 8212F704h */ case    8:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8212F704h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212F704h case    8:*/		return 0x8212F708;
		  /* 8212F708h */ case    9:  		/* addi R10, R10, 1 */
		/* 8212F708h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212F708h case    9:*/		return 0x8212F70C;
		  /* 8212F70Ch */ case   10:  		/* stwx R10, <#[R11 + R9]> */
		/* 8212F70Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212F70Ch case   10:*/		return 0x8212F710;
		  /* 8212F710h */ case   11:  		/* cmplw CR6, R10, R8 */
		/* 8212F710h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8212F710h case   11:*/		return 0x8212F714;
		  /* 8212F714h */ case   12:  		/* bc 12, CR6_GT, 56 */
		/* 8212F714h case   12:*/		if ( regs.CR[6].gt ) { return 0x8212F74C;  }
		/* 8212F714h case   12:*/		return 0x8212F718;
	}
	return 0x8212F718;
} // Block from 8212F6E4h-8212F718h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212F718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F718);
		  /* 8212F718h */ case    0:  		/* lwz R11, <#[R25 + 4]> */
		/* 8212F718h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 8212F718h case    0:*/		return 0x8212F71C;
		  /* 8212F71Ch */ case    1:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8212F71Ch case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8212F71Ch case    1:*/		return 0x8212F720;
		  /* 8212F720h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8212F720h case    2:*/		if ( regs.CR[0].eq ) { return 0x8212F730;  }
		/* 8212F720h case    2:*/		return 0x8212F724;
		  /* 8212F724h */ case    3:  		/* addi R22, R22, 1 */
		/* 8212F724h case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8212F724h case    3:*/		return 0x8212F728;
		  /* 8212F728h */ case    4:  		/* cmplwi CR6, R22, 2 */
		/* 8212F728h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000002);
		/* 8212F728h case    4:*/		return 0x8212F72C;
		  /* 8212F72Ch */ case    5:  		/* bc 12, CR6_GT, 32 */
		/* 8212F72Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x8212F74C;  }
		/* 8212F72Ch case    5:*/		return 0x8212F730;
	}
	return 0x8212F730;
} // Block from 8212F718h-8212F730h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212F730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F730);
		  /* 8212F730h */ case    0:  		/* addi R29, R29, 1 */
		/* 8212F730h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8212F730h case    0:*/		return 0x8212F734;
		  /* 8212F734h */ case    1:  		/* add R26, R24, R26 */
		/* 8212F734h case    1:*/		cpu::op::add<0>(regs,&regs.R26,regs.R24,regs.R26);
		/* 8212F734h case    1:*/		return 0x8212F738;
		  /* 8212F738h */ case    2:  		/* cmplw CR6, R29, R23 */
		/* 8212F738h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R23);
		/* 8212F738h case    2:*/		return 0x8212F73C;
		  /* 8212F73Ch */ case    3:  		/* bc 12, CR6_LT, -328 */
		/* 8212F73Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212F5F4;  }
		/* 8212F73Ch case    3:*/		return 0x8212F740;
	}
	return 0x8212F740;
} // Block from 8212F730h-8212F740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212F740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F740);
		  /* 8212F740h */ case    0:  		/* li R3, 0 */
		/* 8212F740h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212F740h case    0:*/		return 0x8212F744;
	}
	return 0x8212F744;
} // Block from 8212F740h-8212F744h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F744);
		  /* 8212F744h */ case    0:  		/* addi R1, R1, 336 */
		/* 8212F744h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 8212F744h case    0:*/		return 0x8212F748;
		  /* 8212F748h */ case    1:  		/* b -648380 */
		/* 8212F748h case    1:*/		return 0x8209128C;
		/* 8212F748h case    1:*/		return 0x8212F74C;
	}
	return 0x8212F74C;
} // Block from 8212F744h-8212F74Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212F74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F74C);
		  /* 8212F74Ch */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8212F74Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8212F74Ch case    0:*/		return 0x8212F750;
		  /* 8212F750h */ case    1:  		/* bc 12, CR6_EQ, -536 */
		/* 8212F750h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212F538;  }
		/* 8212F750h case    1:*/		return 0x8212F754;
		  /* 8212F754h */ case    2:  		/* stw R29, <#[R21]> */
		/* 8212F754h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R21 + 0x00000000) );
		/* 8212F754h case    2:*/		return 0x8212F758;
		  /* 8212F758h */ case    3:  		/* b -544 */
		/* 8212F758h case    3:*/		return 0x8212F538;
		/* 8212F758h case    3:*/		return 0x8212F75C;
		  /* 8212F75Ch */ case    4:  		/* nop */
		/* 8212F75Ch case    4:*/		cpu::op::nop();
		/* 8212F75Ch case    4:*/		return 0x8212F760;
		  /* 8212F760h */ case    5:  		/* lis R11, 24656 */
		/* 8212F760h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0x6050);
		/* 8212F760h case    5:*/		return 0x8212F764;
		  /* 8212F764h */ case    6:  		/* cmplw CR6, R3, R11 */
		/* 8212F764h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212F764h case    6:*/		return 0x8212F768;
		  /* 8212F768h */ case    7:  		/* bc 12, CR6_EQ, 68 */
		/* 8212F768h case    7:*/		if ( regs.CR[6].eq ) { return 0x8212F7AC;  }
		/* 8212F768h case    7:*/		return 0x8212F76C;
		  /* 8212F76Ch */ case    8:  		/* lis R11, 24736 */
		/* 8212F76Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0x60A0);
		/* 8212F76Ch case    8:*/		return 0x8212F770;
		  /* 8212F770h */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 8212F770h case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212F770h case    9:*/		return 0x8212F774;
		  /* 8212F774h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 8212F774h case   10:*/		if ( regs.CR[6].eq ) { return 0x8212F7AC;  }
		/* 8212F774h case   10:*/		return 0x8212F778;
		  /* 8212F778h */ case   11:  		/* lis R11, 24576 */
		/* 8212F778h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0x6000);
		/* 8212F778h case   11:*/		return 0x8212F77C;
		  /* 8212F77Ch */ case   12:  		/* cmplw CR6, R3, R11 */
		/* 8212F77Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212F77Ch case   12:*/		return 0x8212F780;
		  /* 8212F780h */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 8212F780h case   13:*/		if ( regs.CR[6].eq ) { return 0x8212F7AC;  }
		/* 8212F780h case   13:*/		return 0x8212F784;
		  /* 8212F784h */ case   14:  		/* lis R11, 29408 */
		/* 8212F784h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0x72E0);
		/* 8212F784h case   14:*/		return 0x8212F788;
		  /* 8212F788h */ case   15:  		/* cmplw CR6, R3, R11 */
		/* 8212F788h case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212F788h case   15:*/		return 0x8212F78C;
		  /* 8212F78Ch */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 8212F78Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x8212F7AC;  }
		/* 8212F78Ch case   16:*/		return 0x8212F790;
		  /* 8212F790h */ case   17:  		/* lis R11, 24688 */
		/* 8212F790h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0x6070);
		/* 8212F790h case   17:*/		return 0x8212F794;
		  /* 8212F794h */ case   18:  		/* cmplw CR6, R3, R11 */
		/* 8212F794h case   18:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212F794h case   18:*/		return 0x8212F798;
		  /* 8212F798h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 8212F798h case   19:*/		if ( regs.CR[6].eq ) { return 0x8212F7AC;  }
		/* 8212F798h case   19:*/		return 0x8212F79C;
		  /* 8212F79Ch */ case   20:  		/* lis R11, 24816 */
		/* 8212F79Ch case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0x60F0);
		/* 8212F79Ch case   20:*/		return 0x8212F7A0;
		  /* 8212F7A0h */ case   21:  		/* cmplw CR6, R3, R11 */
		/* 8212F7A0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212F7A0h case   21:*/		return 0x8212F7A4;
		  /* 8212F7A4h */ case   22:  		/* li R3, 0 */
		/* 8212F7A4h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212F7A4h case   22:*/		return 0x8212F7A8;
		  /* 8212F7A8h */ case   23:  		/* bclr 4, CR6_EQ */
		/* 8212F7A8h case   23:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8212F7A8h case   23:*/		return 0x8212F7AC;
	}
	return 0x8212F7AC;
} // Block from 8212F74Ch-8212F7ACh (24 instructions)

//////////////////////////////////////////////////////
// Block at 8212F7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F7AC);
		  /* 8212F7ACh */ case    0:  		/* li R3, 1 */
		/* 8212F7ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212F7ACh case    0:*/		return 0x8212F7B0;
		  /* 8212F7B0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8212F7B0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212F7B0h case    1:*/		return 0x8212F7B4;
	}
	return 0x8212F7B4;
} // Block from 8212F7ACh-8212F7B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212F7B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F7B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F7B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F7B4);
		  /* 8212F7B4h */ case    0:  		/* nop */
		/* 8212F7B4h case    0:*/		cpu::op::nop();
		/* 8212F7B4h case    0:*/		return 0x8212F7B8;
	}
	return 0x8212F7B8;
} // Block from 8212F7B4h-8212F7B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212F7B8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F7B8);
		  /* 8212F7B8h */ case    0:  		/* mfspr R12, LR */
		/* 8212F7B8h case    0:*/		regs.R12 = regs.LR;
		/* 8212F7B8h case    0:*/		return 0x8212F7BC;
		  /* 8212F7BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212F7BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212F7BCh case    1:*/		return 0x8212F7C0;
		  /* 8212F7C0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8212F7C0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212F7C0h case    2:*/		return 0x8212F7C4;
		  /* 8212F7C4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8212F7C4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212F7C4h case    3:*/		return 0x8212F7C8;
		  /* 8212F7C8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8212F7C8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8212F7C8h case    4:*/		return 0x8212F7CC;
		  /* 8212F7CCh */ case    5:  		/* mr R31, R3 */
		/* 8212F7CCh case    5:*/		regs.R31 = regs.R3;
		/* 8212F7CCh case    5:*/		return 0x8212F7D0;
		  /* 8212F7D0h */ case    6:  		/* bl -269248 */
		/* 8212F7D0h case    6:*/		regs.LR = 0x8212F7D4; return 0x820EDC10;
		/* 8212F7D0h case    6:*/		return 0x8212F7D4;
		  /* 8212F7D4h */ case    7:  		/* lis R11, -32253 */
		/* 8212F7D4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212F7D4h case    7:*/		return 0x8212F7D8;
		  /* 8212F7D8h */ case    8:  		/* li R30, 0 */
		/* 8212F7D8h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212F7D8h case    8:*/		return 0x8212F7DC;
		  /* 8212F7DCh */ case    9:  		/* addi R11, R11, 19544 */
		/* 8212F7DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4C58);
		/* 8212F7DCh case    9:*/		return 0x8212F7E0;
		  /* 8212F7E0h */ case   10:  		/* li R10, -1 */
		/* 8212F7E0h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8212F7E0h case   10:*/		return 0x8212F7E4;
		  /* 8212F7E4h */ case   11:  		/* stw R30, <#[R31 + 560]> */
		/* 8212F7E4h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000230) );
		/* 8212F7E4h case   11:*/		return 0x8212F7E8;
		  /* 8212F7E8h */ case   12:  		/* addi R3, R31, 712 */
		/* 8212F7E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x2C8);
		/* 8212F7E8h case   12:*/		return 0x8212F7EC;
		  /* 8212F7ECh */ case   13:  		/* stw R11, <#[R31]> */
		/* 8212F7ECh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212F7ECh case   13:*/		return 0x8212F7F0;
		  /* 8212F7F0h */ case   14:  		/* li R5, 64 */
		/* 8212F7F0h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 8212F7F0h case   14:*/		return 0x8212F7F4;
		  /* 8212F7F4h */ case   15:  		/* stw R30, <#[R31 + 564]> */
		/* 8212F7F4h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 8212F7F4h case   15:*/		return 0x8212F7F8;
		  /* 8212F7F8h */ case   16:  		/* li R4, 0 */
		/* 8212F7F8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212F7F8h case   16:*/		return 0x8212F7FC;
		  /* 8212F7FCh */ case   17:  		/* stw R10, <#[R31 + 1088]> */
		/* 8212F7FCh case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000440) );
		/* 8212F7FCh case   17:*/		return 0x8212F800;
		  /* 8212F800h */ case   18:  		/* stw R30, <#[R31 + 1100]> */
		/* 8212F800h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000044C) );
		/* 8212F800h case   18:*/		return 0x8212F804;
		  /* 8212F804h */ case   19:  		/* stw R30, <#[R31 + 696]> */
		/* 8212F804h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000002B8) );
		/* 8212F804h case   19:*/		return 0x8212F808;
		  /* 8212F808h */ case   20:  		/* stw R30, <#[R31 + 700]> */
		/* 8212F808h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000002BC) );
		/* 8212F808h case   20:*/		return 0x8212F80C;
		  /* 8212F80Ch */ case   21:  		/* stw R30, <#[R31 + 708]> */
		/* 8212F80Ch case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000002C4) );
		/* 8212F80Ch case   21:*/		return 0x8212F810;
		  /* 8212F810h */ case   22:  		/* stw R30, <#[R31 + 704]> */
		/* 8212F810h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000002C0) );
		/* 8212F810h case   22:*/		return 0x8212F814;
		  /* 8212F814h */ case   23:  		/* bl -648404 */
		/* 8212F814h case   23:*/		regs.LR = 0x8212F818; return 0x82091340;
		/* 8212F814h case   23:*/		return 0x8212F818;
		  /* 8212F818h */ case   24:  		/* stw R30, <#[R31 + 1032]> */
		/* 8212F818h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000408) );
		/* 8212F818h case   24:*/		return 0x8212F81C;
		  /* 8212F81Ch */ case   25:  		/* mr R3, R31 */
		/* 8212F81Ch case   25:*/		regs.R3 = regs.R31;
		/* 8212F81Ch case   25:*/		return 0x8212F820;
		  /* 8212F820h */ case   26:  		/* addi R1, R1, 112 */
		/* 8212F820h case   26:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8212F820h case   26:*/		return 0x8212F824;
		  /* 8212F824h */ case   27:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212F824h case   27:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212F824h case   27:*/		return 0x8212F828;
		  /* 8212F828h */ case   28:  		/* mtspr LR, R12 */
		/* 8212F828h case   28:*/		regs.LR = regs.R12;
		/* 8212F828h case   28:*/		return 0x8212F82C;
		  /* 8212F82Ch */ case   29:  		/* ld R30, <#[R1 - 24]> */
		/* 8212F82Ch case   29:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8212F82Ch case   29:*/		return 0x8212F830;
		  /* 8212F830h */ case   30:  		/* ld R31, <#[R1 - 16]> */
		/* 8212F830h case   30:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212F830h case   30:*/		return 0x8212F834;
		  /* 8212F834h */ case   31:  		/* bclr 20, CR0_LT */
		/* 8212F834h case   31:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212F834h case   31:*/		return 0x8212F838;
	}
	return 0x8212F838;
} // Block from 8212F7B8h-8212F838h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8212F838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F838);
		  /* 8212F838h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 8212F838h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212F838h case    0:*/		return 0x8212F83C;
		  /* 8212F83Ch */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 8212F83Ch case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212F83Ch case    1:*/		return 0x8212F840;
		  /* 8212F840h */ case    2:  		/* lwz R11, <#[R3 + 108]> */
		/* 8212F840h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8212F840h case    2:*/		return 0x8212F844;
		  /* 8212F844h */ case    3:  		/* li R7, 2 */
		/* 8212F844h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8212F844h case    3:*/		return 0x8212F848;
		  /* 8212F848h */ case    4:  		/* lwz R10, <#[R3 + 200]> */
		/* 8212F848h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000000C8) );
		/* 8212F848h case    4:*/		return 0x8212F84C;
		  /* 8212F84Ch */ case    5:  		/* li R8, 0 */
		/* 8212F84Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212F84Ch case    5:*/		return 0x8212F850;
		  /* 8212F850h */ case    6:  		/* rlwinm R11, R11, 0, 7, 5 */
		/* 8212F850h case    6:*/		cpu::op::rlwinm<0,0,7,5>(regs,&regs.R11,regs.R11);
		/* 8212F850h case    6:*/		return 0x8212F854;
		  /* 8212F854h */ case    7:  		/* lwz R6, <#[R3 + 112]> */
		/* 8212F854h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000070) );
		/* 8212F854h case    7:*/		return 0x8212F858;
		  /* 8212F858h */ case    8:  		/* lwz R5, <#[R3 + 204]> */
		/* 8212F858h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x000000CC) );
		/* 8212F858h case    8:*/		return 0x8212F85C;
		  /* 8212F85Ch */ case    9:  		/* li R9, 8 */
		/* 8212F85Ch case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 8212F85Ch case    9:*/		return 0x8212F860;
		  /* 8212F860h */ case   10:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 8212F860h case   10:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 8212F860h case   10:*/		return 0x8212F864;
		  /* 8212F864h */ case   11:  		/* stw R7, <#[R3 + 40]> */
		/* 8212F864h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000028) );
		/* 8212F864h case   11:*/		return 0x8212F868;
		  /* 8212F868h */ case   12:  		/* li R4, 24 */
		/* 8212F868h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8212F868h case   12:*/		return 0x8212F86C;
		  /* 8212F86Ch */ case   13:  		/* stw R8, <#[R3 + 48]> */
		/* 8212F86Ch case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000030) );
		/* 8212F86Ch case   13:*/		return 0x8212F870;
		  /* 8212F870h */ case   14:  		/* oris R11, R11, 10394 */
		/* 8212F870h case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x289A);
		/* 8212F870h case   14:*/		return 0x8212F874;
		  /* 8212F874h */ case   15:  		/* stw R10, <#[R3 + 268]> */
		/* 8212F874h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000010C) );
		/* 8212F874h case   15:*/		return 0x8212F878;
		  /* 8212F878h */ case   16:  		/* li R31, 1 */
		/* 8212F878h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 8212F878h case   16:*/		return 0x8212F87C;
		  /* 8212F87Ch */ case   17:  		/* stw R4, <#[R3 + 44]> */
		/* 8212F87Ch case   17:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x0000002C) );
		/* 8212F87Ch case   17:*/		return 0x8212F880;
		  /* 8212F880h */ case   18:  		/* li R30, 64 */
		/* 8212F880h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x40);
		/* 8212F880h case   18:*/		return 0x8212F884;
		  /* 8212F884h */ case   19:  		/* stw R9, <#[R3 + 56]> */
		/* 8212F884h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000038) );
		/* 8212F884h case   19:*/		return 0x8212F888;
		  /* 8212F888h */ case   20:  		/* ori R11, R11, 18228 */
		/* 8212F888h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4734);
		/* 8212F888h case   20:*/		return 0x8212F88C;
		  /* 8212F88Ch */ case   21:  		/* stw R31, <#[R3 + 72]> */
		/* 8212F88Ch case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000048) );
		/* 8212F88Ch case   21:*/		return 0x8212F890;
		  /* 8212F890h */ case   22:  		/* oris R6, R6, 2048 */
		/* 8212F890h case   22:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R6,0x800);
		/* 8212F890h case   22:*/		return 0x8212F894;
		  /* 8212F894h */ case   23:  		/* stw R30, <#[R3 + 100]> */
		/* 8212F894h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000064) );
		/* 8212F894h case   23:*/		return 0x8212F898;
		  /* 8212F898h */ case   24:  		/* ori R5, R5, 256 */
		/* 8212F898h case   24:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x100);
		/* 8212F898h case   24:*/		return 0x8212F89C;
		  /* 8212F89Ch */ case   25:  		/* stw R11, <#[R3 + 108]> */
		/* 8212F89Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8212F89Ch case   25:*/		return 0x8212F8A0;
		  /* 8212F8A0h */ case   26:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8212F8A0h case   26:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8212F8A0h case   26:*/		return 0x8212F8A4;
		  /* 8212F8A4h */ case   27:  		/* stw R6, <#[R3 + 112]> */
		/* 8212F8A4h case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000070) );
		/* 8212F8A4h case   27:*/		return 0x8212F8A8;
		  /* 8212F8A8h */ case   28:  		/* stw R5, <#[R3 + 204]> */
		/* 8212F8A8h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x000000CC) );
		/* 8212F8A8h case   28:*/		return 0x8212F8AC;
		  /* 8212F8ACh */ case   29:  		/* cmplwi CR6, R10, 260 */
		/* 8212F8ACh case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000104);
		/* 8212F8ACh case   29:*/		return 0x8212F8B0;
		  /* 8212F8B0h */ case   30:  		/* bc 4, CR6_EQ, 52 */
		/* 8212F8B0h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8212F8E4;  }
		/* 8212F8B0h case   30:*/		return 0x8212F8B4;
		  /* 8212F8B4h */ case   31:  		/* lis R12, -4609 */
		/* 8212F8B4h case   31:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFEDFF);
		/* 8212F8B4h case   31:*/		return 0x8212F8B8;
		  /* 8212F8B8h */ case   32:  		/* stw R9, <#[R3 + 68]> */
		/* 8212F8B8h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000044) );
		/* 8212F8B8h case   32:*/		return 0x8212F8BC;
		  /* 8212F8BCh */ case   33:  		/* stw R8, <#[R3 + 80]> */
		/* 8212F8BCh case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000050) );
		/* 8212F8BCh case   33:*/		return 0x8212F8C0;
		  /* 8212F8C0h */ case   34:  		/* ori R12, R12, 51071 */
		/* 8212F8C0h case   34:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xC77F);
		/* 8212F8C0h case   34:*/		return 0x8212F8C4;
		  /* 8212F8C4h */ case   35:  		/* and R10, R11, R12 */
		/* 8212F8C4h case   35:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 8212F8C4h case   35:*/		return 0x8212F8C8;
		  /* 8212F8C8h */ case   36:  		/* li R11, 6 */
		/* 8212F8C8h case   36:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8212F8C8h case   36:*/		return 0x8212F8CC;
		  /* 8212F8CCh */ case   37:  		/* oris R10, R10, 1029 */
		/* 8212F8CCh case   37:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x405);
		/* 8212F8CCh case   37:*/		return 0x8212F8D0;
		  /* 8212F8D0h */ case   38:  		/* stw R11, <#[R3 + 60]> */
		/* 8212F8D0h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000003C) );
		/* 8212F8D0h case   38:*/		return 0x8212F8D4;
		  /* 8212F8D4h */ case   39:  		/* ori R10, R10, 32768 */
		/* 8212F8D4h case   39:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8000);
		/* 8212F8D4h case   39:*/		return 0x8212F8D8;
		  /* 8212F8D8h */ case   40:  		/* stw R11, <#[R3 + 76]> */
		/* 8212F8D8h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 8212F8D8h case   40:*/		return 0x8212F8DC;
		  /* 8212F8DCh */ case   41:  		/* stw R10, <#[R3 + 108]> */
		/* 8212F8DCh case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000006C) );
		/* 8212F8DCh case   41:*/		return 0x8212F8E0;
		  /* 8212F8E0h */ case   42:  		/* b 64 */
		/* 8212F8E0h case   42:*/		return 0x8212F920;
		/* 8212F8E0h case   42:*/		return 0x8212F8E4;
	}
	return 0x8212F8E4;
} // Block from 8212F838h-8212F8E4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8212F8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F8E4);
		  /* 8212F8E4h */ case    0:  		/* addi R9, R10, -257 */
		/* 8212F8E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFEFF);
		/* 8212F8E4h case    0:*/		return 0x8212F8E8;
		  /* 8212F8E8h */ case    1:  		/* stw R7, <#[R3 + 80]> */
		/* 8212F8E8h case    1:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000050) );
		/* 8212F8E8h case    1:*/		return 0x8212F8EC;
		  /* 8212F8ECh */ case    2:  		/* li R10, 4 */
		/* 8212F8ECh case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8212F8ECh case    2:*/		return 0x8212F8F0;
		  /* 8212F8F0h */ case    3:  		/* cntlzw R9, R9 */
		/* 8212F8F0h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 8212F8F0h case    3:*/		return 0x8212F8F4;
		  /* 8212F8F4h */ case    4:  		/* li R8, 6 */
		/* 8212F8F4h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x6);
		/* 8212F8F4h case    4:*/		return 0x8212F8F8;
		  /* 8212F8F8h */ case    5:  		/* stw R10, <#[R3 + 60]> */
		/* 8212F8F8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 8212F8F8h case    5:*/		return 0x8212F8FC;
		  /* 8212F8FCh */ case    6:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 8212F8FCh case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 8212F8FCh case    6:*/		return 0x8212F900;
		  /* 8212F900h */ case    7:  		/* stw R10, <#[R3 + 76]> */
		/* 8212F900h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000004C) );
		/* 8212F900h case    7:*/		return 0x8212F904;
		  /* 8212F904h */ case    8:  		/* stw R8, <#[R3 + 68]> */
		/* 8212F904h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000044) );
		/* 8212F904h case    8:*/		return 0x8212F908;
		  /* 8212F908h */ case    9:  		/* rlwimi R11, R9, 13, 18, 18 */
		/* 8212F908h case    9:*/		cpu::op::rlwimi<0,13,18,18>(regs,&regs.R11,regs.R9);
		/* 8212F908h case    9:*/		return 0x8212F90C;
		  /* 8212F90Ch */ case   10:  		/* rlwinm R11, R11, 0, 17, 14 */
		/* 8212F90Ch case   10:*/		cpu::op::rlwinm<0,0,17,14>(regs,&regs.R11,regs.R11);
		/* 8212F90Ch case   10:*/		return 0x8212F910;
		  /* 8212F910h */ case   11:  		/* rlwinm R11, R11, 0, 14, 12 */
		/* 8212F910h case   11:*/		cpu::op::rlwinm<0,0,14,12>(regs,&regs.R11,regs.R11);
		/* 8212F910h case   11:*/		return 0x8212F914;
		  /* 8212F914h */ case   12:  		/* oris R11, R11, 5120 */
		/* 8212F914h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1400);
		/* 8212F914h case   12:*/		return 0x8212F918;
		  /* 8212F918h */ case   13:  		/* ori R11, R11, 6274 */
		/* 8212F918h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1882);
		/* 8212F918h case   13:*/		return 0x8212F91C;
		  /* 8212F91Ch */ case   14:  		/* stw R11, <#[R3 + 108]> */
		/* 8212F91Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8212F91Ch case   14:*/		return 0x8212F920;
	}
	return 0x8212F920;
} // Block from 8212F8E4h-8212F920h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212F920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F920);
		  /* 8212F920h */ case    0:  		/* li R3, 0 */
		/* 8212F920h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212F920h case    0:*/		return 0x8212F924;
		  /* 8212F924h */ case    1:  		/* ld R30, <#[R1 - 16]> */
		/* 8212F924h case    1:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212F924h case    1:*/		return 0x8212F928;
		  /* 8212F928h */ case    2:  		/* ld R31, <#[R1 - 8]> */
		/* 8212F928h case    2:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212F928h case    2:*/		return 0x8212F92C;
		  /* 8212F92Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8212F92Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212F92Ch case    3:*/		return 0x8212F930;
	}
	return 0x8212F930;
} // Block from 8212F920h-8212F930h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212F930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F930);
		  /* 8212F930h */ case    0:  		/* mfspr R12, LR */
		/* 8212F930h case    0:*/		regs.R12 = regs.LR;
		/* 8212F930h case    0:*/		return 0x8212F934;
		  /* 8212F934h */ case    1:  		/* bl -648920 */
		/* 8212F934h case    1:*/		regs.LR = 0x8212F938; return 0x8209125C;
		/* 8212F934h case    1:*/		return 0x8212F938;
		  /* 8212F938h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8212F938h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8212F938h case    2:*/		return 0x8212F93C;
		  /* 8212F93Ch */ case    3:  		/* lwz R31, <#[R3 + 76]> */
		/* 8212F93Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000004C) );
		/* 8212F93Ch case    3:*/		return 0x8212F940;
		  /* 8212F940h */ case    4:  		/* lwz R29, <#[R3 + 552]> */
		/* 8212F940h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000228) );
		/* 8212F940h case    4:*/		return 0x8212F944;
		  /* 8212F944h */ case    5:  		/* cmplw CR6, R31, R29 */
		/* 8212F944h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8212F944h case    5:*/		return 0x8212F948;
		  /* 8212F948h */ case    6:  		/* bc 4, CR6_LT, 240 */
		/* 8212F948h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8212FA38;  }
		/* 8212F948h case    6:*/		return 0x8212F94C;
		  /* 8212F94Ch */ case    7:  		/* lwz R10, <#[R3 + 564]> */
		/* 8212F94Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000234) );
		/* 8212F94Ch case    7:*/		return 0x8212F950;
		  /* 8212F950h */ case    8:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 8212F950h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 8212F950h case    8:*/		return 0x8212F954;
		  /* 8212F954h */ case    9:  		/* add R30, R10, R11 */
		/* 8212F954h case    9:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 8212F954h case    9:*/		return 0x8212F958;
		  /* 8212F958h */ case   10:  		/* lwz R6, <#[R30]> */
		/* 8212F958h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 8212F958h case   10:*/		return 0x8212F95C;
		  /* 8212F95Ch */ case   11:  		/* cmplwi CR6, R6, 0 */
		/* 8212F95Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8212F95Ch case   11:*/		return 0x8212F960;
		  /* 8212F960h */ case   12:  		/* bc 12, CR6_EQ, 172 */
		/* 8212F960h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212FA0C;  }
		/* 8212F960h case   12:*/		return 0x8212F964;
		  /* 8212F964h */ case   13:  		/* lwz R11, <#[R6]> */
		/* 8212F964h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8212F964h case   13:*/		return 0x8212F968;
		  /* 8212F968h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8212F968h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212F968h case   14:*/		return 0x8212F96C;
		  /* 8212F96Ch */ case   15:  		/* bc 12, CR6_EQ, 160 */
		/* 8212F96Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8212FA0C;  }
		/* 8212F96Ch case   15:*/		return 0x8212F970;
		  /* 8212F970h */ case   16:  		/* lwz R10, <#[R6 + 16]> */
		/* 8212F970h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000010) );
		/* 8212F970h case   16:*/		return 0x8212F974;
		  /* 8212F974h */ case   17:  		/* lwz R7, <#[R3 + 20]> */
		/* 8212F974h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 8212F974h case   17:*/		return 0x8212F978;
		  /* 8212F978h */ case   18:  		/* lwz R9, <#[R3 + 132]> */
		/* 8212F978h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000084) );
		/* 8212F978h case   18:*/		return 0x8212F97C;
		  /* 8212F97Ch */ case   19:  		/* lwz R10, <#[R10]> */
		/* 8212F97Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8212F97Ch case   19:*/		return 0x8212F980;
		  /* 8212F980h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8212F980h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8212F980h case   20:*/		return 0x8212F984;
		  /* 8212F984h */ case   21:  		/* lwzx R10, <#[R10 + R7]> */
		/* 8212F984h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8212F984h case   21:*/		return 0x8212F988;
		  /* 8212F988h */ case   22:  		/* lwz R10, <#[R10 + 4]> */
		/* 8212F988h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8212F988h case   22:*/		return 0x8212F98C;
		  /* 8212F98Ch */ case   23:  		/* cmplw CR6, R10, R9 */
		/* 8212F98Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8212F98Ch case   23:*/		return 0x8212F990;
		  /* 8212F990h */ case   24:  		/* bc 4, CR6_EQ, 20 */
		/* 8212F990h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8212F9A4;  }
		/* 8212F990h case   24:*/		return 0x8212F994;
		  /* 8212F994h */ case   25:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212F994h case   25:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212F994h case   25:*/		return 0x8212F998;
		  /* 8212F998h */ case   26:  		/* lis R10, 4096 */
		/* 8212F998h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8212F998h case   26:*/		return 0x8212F99C;
		  /* 8212F99Ch */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 8212F99Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8212F99Ch case   27:*/		return 0x8212F9A0;
		  /* 8212F9A0h */ case   28:  		/* bc 12, CR6_EQ, 108 */
		/* 8212F9A0h case   28:*/		if ( regs.CR[6].eq ) { return 0x8212FA0C;  }
		/* 8212F9A0h case   28:*/		return 0x8212F9A4;
	}
	return 0x8212F9A4;
} // Block from 8212F930h-8212F9A4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212F9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F9A4);
		  /* 8212F9A4h */ case    0:  		/* lwz R4, <#[R6 + 4]> */
		/* 8212F9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + 0x00000004) );
		/* 8212F9A4h case    0:*/		return 0x8212F9A8;
		  /* 8212F9A8h */ case    1:  		/* li R5, 0 */
		/* 8212F9A8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212F9A8h case    1:*/		return 0x8212F9AC;
		  /* 8212F9ACh */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8212F9ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8212F9ACh case    2:*/		return 0x8212F9B0;
		  /* 8212F9B0h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 8212F9B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8212FA0C;  }
		/* 8212F9B0h case    3:*/		return 0x8212F9B4;
		  /* 8212F9B4h */ case    4:  		/* lwz R9, <#[R6 + 8]> */
		/* 8212F9B4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000008) );
		/* 8212F9B4h case    4:*/		return 0x8212F9B8;
		  /* 8212F9B8h */ case    5:  		/* lwz R11, <#[R9]> */
		/* 8212F9B8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8212F9B8h case    5:*/		return 0x8212F9BC;
		  /* 8212F9BCh */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212F9BCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212F9BCh case    6:*/		return 0x8212F9C0;
		  /* 8212F9C0h */ case    7:  		/* lwzx R11, <#[R11 + R7]> */
		/* 8212F9C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8212F9C0h case    7:*/		return 0x8212F9C4;
		  /* 8212F9C4h */ case    8:  		/* lwz R8, <#[R11 + 60]> */
		/* 8212F9C4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212F9C4h case    8:*/		return 0x8212F9C8;
		  /* 8212F9C8h */ case    9:  		/* b 12 */
		/* 8212F9C8h case    9:*/		return 0x8212F9D4;
		/* 8212F9C8h case    9:*/		return 0x8212F9CC;
		  /* 8212F9CCh */ case   10:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8212F9CCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8212F9CCh case   10:*/		return 0x8212F9D0;
		  /* 8212F9D0h */ case   11:  		/* lwzx R11, <#[R11 + R7]> */
		/* 8212F9D0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8212F9D0h case   11:*/		return 0x8212F9D4;
	}
	return 0x8212F9D4;
} // Block from 8212F9A4h-8212F9D4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212F9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F9D4);
		  /* 8212F9D4h */ case    0:  		/* lwz R10, <#[R11 + 56]> */
		/* 8212F9D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 8212F9D4h case    0:*/		return 0x8212F9D8;
		  /* 8212F9D8h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 8212F9D8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8212F9D8h case    1:*/		return 0x8212F9DC;
		  /* 8212F9DCh */ case    2:  		/* bc 4, CR6_EQ, -16 */
		/* 8212F9DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212F9CC;  }
		/* 8212F9DCh case    2:*/		return 0x8212F9E0;
		  /* 8212F9E0h */ case    3:  		/* lbz R10, <#[R11 + 111]> */
		/* 8212F9E0h case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006F) );
		/* 8212F9E0h case    3:*/		return 0x8212F9E4;
		  /* 8212F9E4h */ case    4:  		/* cmplwi CR6, R10, 3 */
		/* 8212F9E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8212F9E4h case    4:*/		return 0x8212F9E8;
		  /* 8212F9E8h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 8212F9E8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8212F9FC;  }
		/* 8212F9E8h case    5:*/		return 0x8212F9EC;
		  /* 8212F9ECh */ case    6:  		/* lwz R11, <#[R11 + 60]> */
		/* 8212F9ECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 8212F9ECh case    6:*/		return 0x8212F9F0;
		  /* 8212F9F0h */ case    7:  		/* or R11, R11, R8 */
		/* 8212F9F0h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8212F9F0h case    7:*/		return 0x8212F9F4;
		  /* 8212F9F4h */ case    8:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8212F9F4h case    8:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8212F9F4h case    8:*/		return 0x8212F9F8;
		  /* 8212F9F8h */ case    9:  		/* bc 12, CR0_EQ, 40 */
		/* 8212F9F8h case    9:*/		if ( regs.CR[0].eq ) { return 0x8212FA20;  }
		/* 8212F9F8h case    9:*/		return 0x8212F9FC;
	}
	return 0x8212F9FC;
} // Block from 8212F9D4h-8212F9FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212F9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212F9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212F9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212F9FC);
		  /* 8212F9FCh */ case    0:  		/* addi R5, R5, 1 */
		/* 8212F9FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8212F9FCh case    0:*/		return 0x8212FA00;
		  /* 8212FA00h */ case    1:  		/* addi R9, R9, 4 */
		/* 8212FA00h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8212FA00h case    1:*/		return 0x8212FA04;
		  /* 8212FA04h */ case    2:  		/* cmplw CR6, R5, R4 */
		/* 8212FA04h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 8212FA04h case    2:*/		return 0x8212FA08;
		  /* 8212FA08h */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 8212FA08h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212F9B8;  }
		/* 8212FA08h case    3:*/		return 0x8212FA0C;
	}
	return 0x8212FA0C;
} // Block from 8212F9FCh-8212FA0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212FA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FA0C);
		  /* 8212FA0Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 8212FA0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8212FA0Ch case    0:*/		return 0x8212FA10;
		  /* 8212FA10h */ case    1:  		/* addi R30, R30, 4 */
		/* 8212FA10h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8212FA10h case    1:*/		return 0x8212FA14;
		  /* 8212FA14h */ case    2:  		/* cmplw CR6, R31, R29 */
		/* 8212FA14h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8212FA14h case    2:*/		return 0x8212FA18;
		  /* 8212FA18h */ case    3:  		/* bc 12, CR6_LT, -192 */
		/* 8212FA18h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212F958;  }
		/* 8212FA18h case    3:*/		return 0x8212FA1C;
		  /* 8212FA1Ch */ case    4:  		/* b 28 */
		/* 8212FA1Ch case    4:*/		return 0x8212FA38;
		/* 8212FA1Ch case    4:*/		return 0x8212FA20;
	}
	return 0x8212FA20;
} // Block from 8212FA0Ch-8212FA20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212FA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FA20);
		  /* 8212FA20h */ case    0:  		/* lis R11, -32253 */
		/* 8212FA20h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212FA20h case    0:*/		return 0x8212FA24;
		  /* 8212FA24h */ case    1:  		/* lwz R4, <#[R6 + 60]> */
		/* 8212FA24h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + 0x0000003C) );
		/* 8212FA24h case    1:*/		return 0x8212FA28;
		  /* 8212FA28h */ case    2:  		/* li R5, 4707 */
		/* 8212FA28h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1263);
		/* 8212FA28h case    2:*/		return 0x8212FA2C;
		  /* 8212FA2Ch */ case    3:  		/* lbz R7, <#[R3 + 203]> */
		/* 8212FA2Ch case    3:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R3 + 0x000000CB) );
		/* 8212FA2Ch case    3:*/		return 0x8212FA30;
		  /* 8212FA30h */ case    4:  		/* addi R6, R11, 19928 */
		/* 8212FA30h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4DD8);
		/* 8212FA30h case    4:*/		return 0x8212FA34;
		  /* 8212FA34h */ case    5:  		/* bl -135748 */
		/* 8212FA34h case    5:*/		regs.LR = 0x8212FA38; return 0x8210E7F0;
		/* 8212FA34h case    5:*/		return 0x8212FA38;
	}
	return 0x8212FA38;
} // Block from 8212FA20h-8212FA38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212FA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FA38);
		  /* 8212FA38h */ case    0:  		/* li R3, 0 */
		/* 8212FA38h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212FA38h case    0:*/		return 0x8212FA3C;
		  /* 8212FA3Ch */ case    1:  		/* addi R1, R1, 112 */
		/* 8212FA3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8212FA3Ch case    1:*/		return 0x8212FA40;
		  /* 8212FA40h */ case    2:  		/* b -649108 */
		/* 8212FA40h case    2:*/		return 0x820912AC;
		/* 8212FA40h case    2:*/		return 0x8212FA44;
		  /* 8212FA44h */ case    3:  		/* nop */
		/* 8212FA44h case    3:*/		cpu::op::nop();
		/* 8212FA44h case    3:*/		return 0x8212FA48;
	}
	return 0x8212FA48;
} // Block from 8212FA38h-8212FA48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212FA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FA48);
		  /* 8212FA48h */ case    0:  		/* mfspr R12, LR */
		/* 8212FA48h case    0:*/		regs.R12 = regs.LR;
		/* 8212FA48h case    0:*/		return 0x8212FA4C;
		  /* 8212FA4Ch */ case    1:  		/* bl -649204 */
		/* 8212FA4Ch case    1:*/		regs.LR = 0x8212FA50; return 0x82091258;
		/* 8212FA4Ch case    1:*/		return 0x8212FA50;
		  /* 8212FA50h */ case    2:  		/* lwz R11, <#[R3 + 260]> */
		/* 8212FA50h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8212FA50h case    2:*/		return 0x8212FA54;
		  /* 8212FA54h */ case    3:  		/* mr R30, R3 */
		/* 8212FA54h case    3:*/		regs.R30 = regs.R3;
		/* 8212FA54h case    3:*/		return 0x8212FA58;
		  /* 8212FA58h */ case    4:  		/* lwz R10, <#[R3 + 20]> */
		/* 8212FA58h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8212FA58h case    4:*/		return 0x8212FA5C;
		  /* 8212FA5Ch */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212FA5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FA5Ch case    5:*/		return 0x8212FA60;
		  /* 8212FA60h */ case    6:  		/* lwz R11, <#[R11 + 28]> */
		/* 8212FA60h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8212FA60h case    6:*/		return 0x8212FA64;
		  /* 8212FA64h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212FA64h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212FA64h case    7:*/		return 0x8212FA68;
		  /* 8212FA68h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8212FA68h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212FA68h case    8:*/		return 0x8212FA6C;
		  /* 8212FA6Ch */ case    9:  		/* lwz R11, <#[R11 + 72]> */
		/* 8212FA6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 8212FA6Ch case    9:*/		return 0x8212FA70;
		  /* 8212FA70h */ case   10:  		/* cmpwi CR6, R11, -1 */
		/* 8212FA70h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212FA70h case   10:*/		return 0x8212FA74;
		  /* 8212FA74h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 8212FA74h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8212FA80;  }
		/* 8212FA74h case   11:*/		return 0x8212FA78;
		  /* 8212FA78h */ case   12:  		/* li R3, 1 */
		/* 8212FA78h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212FA78h case   12:*/		return 0x8212FA7C;
		  /* 8212FA7Ch */ case   13:  		/* b 452 */
		/* 8212FA7Ch case   13:*/		return 0x8212FC40;
		/* 8212FA7Ch case   13:*/		return 0x8212FA80;
	}
	return 0x8212FA80;
} // Block from 8212FA48h-8212FA80h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212FA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FA80);
		  /* 8212FA80h */ case    0:  		/* lwz R9, <#[R30 + 24]> */
		/* 8212FA80h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000018) );
		/* 8212FA80h case    0:*/		return 0x8212FA84;
		  /* 8212FA84h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212FA84h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212FA84h case    1:*/		return 0x8212FA88;
		  /* 8212FA88h */ case    2:  		/* lis R5, 4096 */
		/* 8212FA88h case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 8212FA88h case    2:*/		return 0x8212FA8C;
		  /* 8212FA8Ch */ case    3:  		/* lwzx R4, <#[R11 + R9]> */
		/* 8212FA8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212FA8Ch case    3:*/		return 0x8212FA90;
		  /* 8212FA90h */ case    4:  		/* lwz R11, <#[R4]> */
		/* 8212FA90h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8212FA90h case    4:*/		return 0x8212FA94;
		  /* 8212FA94h */ case    5:  		/* rlwinm R6, R11, 0, 0, 11 */
		/* 8212FA94h case    5:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R6,regs.R11);
		/* 8212FA94h case    5:*/		return 0x8212FA98;
		  /* 8212FA98h */ case    6:  		/* cmplw CR6, R6, R5 */
		/* 8212FA98h case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 8212FA98h case    6:*/		return 0x8212FA9C;
		  /* 8212FA9Ch */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 8212FA9Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8212FAAC;  }
		/* 8212FA9Ch case    7:*/		return 0x8212FAA0;
		  /* 8212FAA0h */ case    8:  		/* lis R11, 20480 */
		/* 8212FAA0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0x5000);
		/* 8212FAA0h case    8:*/		return 0x8212FAA4;
		  /* 8212FAA4h */ case    9:  		/* cmplw CR6, R6, R11 */
		/* 8212FAA4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 8212FAA4h case    9:*/		return 0x8212FAA8;
		  /* 8212FAA8h */ case   10:  		/* bc 4, CR6_EQ, -48 */
		/* 8212FAA8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8212FA78;  }
		/* 8212FAA8h case   10:*/		return 0x8212FAAC;
	}
	return 0x8212FAAC;
} // Block from 8212FA80h-8212FAACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212FAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FAAC);
		  /* 8212FAACh */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 8212FAACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8212FAACh case    0:*/		return 0x8212FAB0;
		  /* 8212FAB0h */ case    1:  		/* li R29, -1 */
		/* 8212FAB0h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 8212FAB0h case    1:*/		return 0x8212FAB4;
		  /* 8212FAB4h */ case    2:  		/* lwz R31, <#[R11 + 8]> */
		/* 8212FAB4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FAB4h case    2:*/		return 0x8212FAB8;
		  /* 8212FAB8h */ case    3:  		/* lwz R3, <#[R31 + 24]> */
		/* 8212FAB8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8212FAB8h case    3:*/		return 0x8212FABC;
		  /* 8212FABCh */ case    4:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 8212FABCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 8212FABCh case    4:*/		return 0x8212FAC0;
		  /* 8212FAC0h */ case    5:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8212FAC0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212FAC0h case    5:*/		return 0x8212FAC4;
		  /* 8212FAC4h */ case    6:  		/* lwz R11, <#[R10 + 72]> */
		/* 8212FAC4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000048) );
		/* 8212FAC4h case    6:*/		return 0x8212FAC8;
		  /* 8212FAC8h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 8212FAC8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212FAC8h case    7:*/		return 0x8212FACC;
		  /* 8212FACCh */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 8212FACCh case    8:*/		if ( regs.CR[6].eq ) { return 0x8212FB30;  }
		/* 8212FACCh case    8:*/		return 0x8212FAD0;
		  /* 8212FAD0h */ case    9:  		/* lwz R10, <#[R10 + 60]> */
		/* 8212FAD0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 8212FAD0h case    9:*/		return 0x8212FAD4;
		  /* 8212FAD4h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 8212FAD4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8212FAD4h case   10:*/		return 0x8212FAD8;
		  /* 8212FAD8h */ case   11:  		/* bc 4, CR6_EQ, 88 */
		/* 8212FAD8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8212FB30;  }
		/* 8212FAD8h case   11:*/		return 0x8212FADC;
		  /* 8212FADCh */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212FADCh case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212FADCh case   12:*/		return 0x8212FAE0;
		  /* 8212FAE0h */ case   13:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8212FAE0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212FAE0h case   13:*/		return 0x8212FAE4;
		  /* 8212FAE4h */ case   14:  		/* lwz R11, <#[R10]> */
		/* 8212FAE4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212FAE4h case   14:*/		return 0x8212FAE8;
		  /* 8212FAE8h */ case   15:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212FAE8h case   15:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212FAE8h case   15:*/		return 0x8212FAEC;
		  /* 8212FAECh */ case   16:  		/* cmplw CR6, R11, R5 */
		/* 8212FAECh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 8212FAECh case   16:*/		return 0x8212FAF0;
		  /* 8212FAF0h */ case   17:  		/* bc 4, CR6_EQ, 64 */
		/* 8212FAF0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8212FB30;  }
		/* 8212FAF0h case   17:*/		return 0x8212FAF4;
		  /* 8212FAF4h */ case   18:  		/* lwz R7, <#[R10 + 4]> */
		/* 8212FAF4h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8212FAF4h case   18:*/		return 0x8212FAF8;
		  /* 8212FAF8h */ case   19:  		/* li R9, 0 */
		/* 8212FAF8h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212FAF8h case   19:*/		return 0x8212FAFC;
		  /* 8212FAFCh */ case   20:  		/* cmplwi CR6, R7, 0 */
		/* 8212FAFCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8212FAFCh case   20:*/		return 0x8212FB00;
		  /* 8212FB00h */ case   21:  		/* bc 12, CR6_EQ, 48 */
		/* 8212FB00h case   21:*/		if ( regs.CR[6].eq ) { return 0x8212FB30;  }
		/* 8212FB00h case   21:*/		return 0x8212FB04;
		  /* 8212FB04h */ case   22:  		/* lwz R8, <#[R10 + 16]> */
		/* 8212FB04h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000010) );
		/* 8212FB04h case   22:*/		return 0x8212FB08;
		  /* 8212FB08h */ case   23:  		/* li R11, 0 */
		/* 8212FB08h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FB08h case   23:*/		return 0x8212FB0C;
		  /* 8212FB0Ch */ case   24:  		/* lwzx R28, <#[R11 + R8]> */
		/* 8212FB0Ch case   24:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212FB0Ch case   24:*/		return 0x8212FB10;
		  /* 8212FB10h */ case   25:  		/* cmplw CR6, R28, R3 */
		/* 8212FB10h case   25:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R3);
		/* 8212FB10h case   25:*/		return 0x8212FB14;
		  /* 8212FB14h */ case   26:  		/* bc 4, CR6_EQ, 12 */
		/* 8212FB14h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8212FB20;  }
		/* 8212FB14h case   26:*/		return 0x8212FB18;
		  /* 8212FB18h */ case   27:  		/* lwz R29, <#[R10 + 8]> */
		/* 8212FB18h case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + 0x00000008) );
		/* 8212FB18h case   27:*/		return 0x8212FB1C;
		  /* 8212FB1Ch */ case   28:  		/* lwzx R29, <#[R29 + R11]> */
		/* 8212FB1Ch case   28:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8212FB1Ch case   28:*/		return 0x8212FB20;
	}
	return 0x8212FB20;
} // Block from 8212FAACh-8212FB20h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8212FB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FB20);
		  /* 8212FB20h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212FB20h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212FB20h case    0:*/		return 0x8212FB24;
		  /* 8212FB24h */ case    1:  		/* addi R11, R11, 4 */
		/* 8212FB24h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212FB24h case    1:*/		return 0x8212FB28;
		  /* 8212FB28h */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 8212FB28h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 8212FB28h case    2:*/		return 0x8212FB2C;
		  /* 8212FB2Ch */ case    3:  		/* bc 12, CR6_LT, -32 */
		/* 8212FB2Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8212FB0C;  }
		/* 8212FB2Ch case    3:*/		return 0x8212FB30;
	}
	return 0x8212FB30;
} // Block from 8212FB20h-8212FB30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212FB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FB30);
		  /* 8212FB30h */ case    0:  		/* mr R11, R5 */
		/* 8212FB30h case    0:*/		regs.R11 = regs.R5;
		/* 8212FB30h case    0:*/		return 0x8212FB34;
		  /* 8212FB34h */ case    1:  		/* li R5, 0 */
		/* 8212FB34h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212FB34h case    1:*/		return 0x8212FB38;
		  /* 8212FB38h */ case    2:  		/* cmplw CR6, R6, R11 */
		/* 8212FB38h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 8212FB38h case    2:*/		return 0x8212FB3C;
		  /* 8212FB3Ch */ case    3:  		/* bc 4, CR6_EQ, 116 */
		/* 8212FB3Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8212FBB0;  }
		/* 8212FB3Ch case    3:*/		return 0x8212FB40;
		  /* 8212FB40h */ case    4:  		/* lwz R7, <#[R4 + 4]> */
		/* 8212FB40h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000004) );
		/* 8212FB40h case    4:*/		return 0x8212FB44;
		  /* 8212FB44h */ case    5:  		/* li R9, 0 */
		/* 8212FB44h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212FB44h case    5:*/		return 0x8212FB48;
		  /* 8212FB48h */ case    6:  		/* cmplwi CR6, R7, 0 */
		/* 8212FB48h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8212FB48h case    6:*/		return 0x8212FB4C;
		  /* 8212FB4Ch */ case    7:  		/* bc 12, CR6_EQ, -212 */
		/* 8212FB4Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8212FA78;  }
		/* 8212FB4Ch case    7:*/		return 0x8212FB50;
		  /* 8212FB50h */ case    8:  		/* lwz R8, <#[R4 + 8]> */
		/* 8212FB50h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000008) );
		/* 8212FB50h case    8:*/		return 0x8212FB54;
		  /* 8212FB54h */ case    9:  		/* li R11, 0 */
		/* 8212FB54h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FB54h case    9:*/		return 0x8212FB58;
		  /* 8212FB58h */ case   10:  		/* lwzx R10, <#[R11 + R8]> */
		/* 8212FB58h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212FB58h case   10:*/		return 0x8212FB5C;
		  /* 8212FB5Ch */ case   11:  		/* cmplw CR6, R10, R3 */
		/* 8212FB5Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 8212FB5Ch case   11:*/		return 0x8212FB60;
		  /* 8212FB60h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8212FB60h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212FB7C;  }
		/* 8212FB60h case   12:*/		return 0x8212FB64;
		  /* 8212FB64h */ case   13:  		/* lwz R6, <#[R4 + 16]> */
		/* 8212FB64h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000010) );
		/* 8212FB64h case   13:*/		return 0x8212FB68;
		  /* 8212FB68h */ case   14:  		/* lwz R28, <#[R31 + 28]> */
		/* 8212FB68h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000001C) );
		/* 8212FB68h case   14:*/		return 0x8212FB6C;
		  /* 8212FB6Ch */ case   15:  		/* lwzx R6, <#[R6 + R11]> */
		/* 8212FB6Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8212FB6Ch case   15:*/		return 0x8212FB70;
		  /* 8212FB70h */ case   16:  		/* cmplw CR6, R6, R28 */
		/* 8212FB70h case   16:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R28);
		/* 8212FB70h case   16:*/		return 0x8212FB74;
		  /* 8212FB74h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 8212FB74h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8212FB7C;  }
		/* 8212FB74h case   17:*/		return 0x8212FB78;
		  /* 8212FB78h */ case   18:  		/* li R5, 1 */
		/* 8212FB78h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212FB78h case   18:*/		return 0x8212FB7C;
	}
	return 0x8212FB7C;
} // Block from 8212FB30h-8212FB7Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212FB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FB7C);
		  /* 8212FB7Ch */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 8212FB7Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 8212FB7Ch case    0:*/		return 0x8212FB80;
		  /* 8212FB80h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8212FB80h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212FB9C;  }
		/* 8212FB80h case    1:*/		return 0x8212FB84;
		  /* 8212FB84h */ case    2:  		/* lwz R10, <#[R4 + 16]> */
		/* 8212FB84h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 8212FB84h case    2:*/		return 0x8212FB88;
		  /* 8212FB88h */ case    3:  		/* lwz R6, <#[R31 + 28]> */
		/* 8212FB88h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8212FB88h case    3:*/		return 0x8212FB8C;
		  /* 8212FB8Ch */ case    4:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8212FB8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212FB8Ch case    4:*/		return 0x8212FB90;
		  /* 8212FB90h */ case    5:  		/* cmplw CR6, R10, R6 */
		/* 8212FB90h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8212FB90h case    5:*/		return 0x8212FB94;
		  /* 8212FB94h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8212FB94h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8212FB9C;  }
		/* 8212FB94h case    6:*/		return 0x8212FB98;
		  /* 8212FB98h */ case    7:  		/* li R5, 1 */
		/* 8212FB98h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212FB98h case    7:*/		return 0x8212FB9C;
	}
	return 0x8212FB9C;
} // Block from 8212FB7Ch-8212FB9Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212FB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FB9C);
		  /* 8212FB9Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 8212FB9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212FB9Ch case    0:*/		return 0x8212FBA0;
		  /* 8212FBA0h */ case    1:  		/* addi R11, R11, 4 */
		/* 8212FBA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212FBA0h case    1:*/		return 0x8212FBA4;
		  /* 8212FBA4h */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 8212FBA4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 8212FBA4h case    2:*/		return 0x8212FBA8;
		  /* 8212FBA8h */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 8212FBA8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212FB58;  }
		/* 8212FBA8h case    3:*/		return 0x8212FBAC;
		  /* 8212FBACh */ case    4:  		/* b 60 */
		/* 8212FBACh case    4:*/		return 0x8212FBE8;
		/* 8212FBACh case    4:*/		return 0x8212FBB0;
	}
	return 0x8212FBB0;
} // Block from 8212FB9Ch-8212FBB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212FBB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FBB0);
		  /* 8212FBB0h */ case    0:  		/* lwz R8, <#[R4 + 4]> */
		/* 8212FBB0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000004) );
		/* 8212FBB0h case    0:*/		return 0x8212FBB4;
		  /* 8212FBB4h */ case    1:  		/* li R10, 0 */
		/* 8212FBB4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212FBB4h case    1:*/		return 0x8212FBB8;
		  /* 8212FBB8h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 8212FBB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8212FBB8h case    2:*/		return 0x8212FBBC;
		  /* 8212FBBCh */ case    3:  		/* bc 12, CR6_EQ, -324 */
		/* 8212FBBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8212FA78;  }
		/* 8212FBBCh case    3:*/		return 0x8212FBC0;
		  /* 8212FBC0h */ case    4:  		/* lwz R9, <#[R4 + 16]> */
		/* 8212FBC0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 8212FBC0h case    4:*/		return 0x8212FBC4;
		  /* 8212FBC4h */ case    5:  		/* li R11, 0 */
		/* 8212FBC4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FBC4h case    5:*/		return 0x8212FBC8;
		  /* 8212FBC8h */ case    6:  		/* lwzx R7, <#[R11 + R9]> */
		/* 8212FBC8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212FBC8h case    6:*/		return 0x8212FBCC;
		  /* 8212FBCCh */ case    7:  		/* cmplw CR6, R29, R7 */
		/* 8212FBCCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R7);
		/* 8212FBCCh case    7:*/		return 0x8212FBD0;
		  /* 8212FBD0h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 8212FBD0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8212FBD8;  }
		/* 8212FBD0h case    8:*/		return 0x8212FBD4;
		  /* 8212FBD4h */ case    9:  		/* li R5, 1 */
		/* 8212FBD4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212FBD4h case    9:*/		return 0x8212FBD8;
	}
	return 0x8212FBD8;
} // Block from 8212FBB0h-8212FBD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212FBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FBD8);
		  /* 8212FBD8h */ case    0:  		/* addi R10, R10, 1 */
		/* 8212FBD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212FBD8h case    0:*/		return 0x8212FBDC;
		  /* 8212FBDCh */ case    1:  		/* addi R11, R11, 4 */
		/* 8212FBDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212FBDCh case    1:*/		return 0x8212FBE0;
		  /* 8212FBE0h */ case    2:  		/* cmplw CR6, R10, R8 */
		/* 8212FBE0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8212FBE0h case    2:*/		return 0x8212FBE4;
		  /* 8212FBE4h */ case    3:  		/* bc 12, CR6_LT, -28 */
		/* 8212FBE4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212FBC8;  }
		/* 8212FBE4h case    3:*/		return 0x8212FBE8;
	}
	return 0x8212FBE8;
} // Block from 8212FBD8h-8212FBE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212FBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FBE8);
		  /* 8212FBE8h */ case    0:  		/* cmpwi CR6, R5, 0 */
		/* 8212FBE8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8212FBE8h case    0:*/		return 0x8212FBEC;
		  /* 8212FBECh */ case    1:  		/* bc 12, CR6_EQ, -372 */
		/* 8212FBECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8212FA78;  }
		/* 8212FBECh case    1:*/		return 0x8212FBF0;
		  /* 8212FBF0h */ case    2:  		/* lwz R11, <#[R30 + 260]> */
		/* 8212FBF0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8212FBF0h case    2:*/		return 0x8212FBF4;
		  /* 8212FBF4h */ case    3:  		/* lis R10, 29408 */
		/* 8212FBF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x72E0);
		/* 8212FBF4h case    3:*/		return 0x8212FBF8;
		  /* 8212FBF8h */ case    4:  		/* li R9, 6 */
		/* 8212FBF8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 8212FBF8h case    4:*/		return 0x8212FBFC;
		  /* 8212FBFCh */ case    5:  		/* ori R10, R10, 3 */
		/* 8212FBFCh case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8212FBFCh case    5:*/		return 0x8212FC00;
		  /* 8212FC00h */ case    6:  		/* li R3, 0 */
		/* 8212FC00h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212FC00h case    6:*/		return 0x8212FC04;
		  /* 8212FC04h */ case    7:  		/* stw R10, <#[R11]> */
		/* 8212FC04h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212FC04h case    7:*/		return 0x8212FC08;
		  /* 8212FC08h */ case    8:  		/* lwz R11, <#[R30 + 260]> */
		/* 8212FC08h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8212FC08h case    8:*/		return 0x8212FC0C;
		  /* 8212FC0Ch */ case    9:  		/* stw R9, <#[R11 + 4]> */
		/* 8212FC0Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8212FC0Ch case    9:*/		return 0x8212FC10;
		  /* 8212FC10h */ case   10:  		/* lwz R11, <#[R30 + 260]> */
		/* 8212FC10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8212FC10h case   10:*/		return 0x8212FC14;
		  /* 8212FC14h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212FC14h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FC14h case   11:*/		return 0x8212FC18;
		  /* 8212FC18h */ case   12:  		/* lwz R10, <#[R11 + 16]> */
		/* 8212FC18h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8212FC18h case   12:*/		return 0x8212FC1C;
		  /* 8212FC1Ch */ case   13:  		/* stw R10, <#[R11 + 12]> */
		/* 8212FC1Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212FC1Ch case   13:*/		return 0x8212FC20;
		  /* 8212FC20h */ case   14:  		/* lwz R11, <#[R30 + 260]> */
		/* 8212FC20h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8212FC20h case   14:*/		return 0x8212FC24;
		  /* 8212FC24h */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212FC24h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FC24h case   15:*/		return 0x8212FC28;
		  /* 8212FC28h */ case   16:  		/* lwz R10, <#[R11 + 20]> */
		/* 8212FC28h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8212FC28h case   16:*/		return 0x8212FC2C;
		  /* 8212FC2Ch */ case   17:  		/* stw R10, <#[R11 + 16]> */
		/* 8212FC2Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8212FC2Ch case   17:*/		return 0x8212FC30;
		  /* 8212FC30h */ case   18:  		/* lwz R11, <#[R30 + 260]> */
		/* 8212FC30h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8212FC30h case   18:*/		return 0x8212FC34;
		  /* 8212FC34h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212FC34h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FC34h case   19:*/		return 0x8212FC38;
		  /* 8212FC38h */ case   20:  		/* lwz R10, <#[R11 + 24]> */
		/* 8212FC38h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8212FC38h case   20:*/		return 0x8212FC3C;
		  /* 8212FC3Ch */ case   21:  		/* stw R10, <#[R11 + 20]> */
		/* 8212FC3Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8212FC3Ch case   21:*/		return 0x8212FC40;
	}
	return 0x8212FC40;
} // Block from 8212FBE8h-8212FC40h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212FC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FC40);
		  /* 8212FC40h */ case    0:  		/* b -649624 */
		/* 8212FC40h case    0:*/		return 0x820912A8;
		/* 8212FC40h case    0:*/		return 0x8212FC44;
		  /* 8212FC44h */ case    1:  		/* nop */
		/* 8212FC44h case    1:*/		cpu::op::nop();
		/* 8212FC44h case    1:*/		return 0x8212FC48;
	}
	return 0x8212FC48;
} // Block from 8212FC40h-8212FC48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212FC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FC48);
		  /* 8212FC48h */ case    0:  		/* mfspr R12, LR */
		/* 8212FC48h case    0:*/		regs.R12 = regs.LR;
		/* 8212FC48h case    0:*/		return 0x8212FC4C;
		  /* 8212FC4Ch */ case    1:  		/* bl -649744 */
		/* 8212FC4Ch case    1:*/		regs.LR = 0x8212FC50; return 0x8209123C;
		/* 8212FC4Ch case    1:*/		return 0x8212FC50;
		  /* 8212FC50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8212FC50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8212FC50h case    2:*/		return 0x8212FC54;
		  /* 8212FC54h */ case    3:  		/* lwz R22, <#[R3 + 260]> */
		/* 8212FC54h case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R3 + 0x00000104) );
		/* 8212FC54h case    3:*/		return 0x8212FC58;
		  /* 8212FC58h */ case    4:  		/* mr R28, R3 */
		/* 8212FC58h case    4:*/		regs.R28 = regs.R3;
		/* 8212FC58h case    4:*/		return 0x8212FC5C;
		  /* 8212FC5Ch */ case    5:  		/* lwz R11, <#[R22]> */
		/* 8212FC5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 8212FC5Ch case    5:*/		return 0x8212FC60;
		  /* 8212FC60h */ case    6:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 8212FC60h case    6:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 8212FC60h case    6:*/		return 0x8212FC64;
		  /* 8212FC64h */ case    7:  		/* cmplwi CR6, R11, 4 */
		/* 8212FC64h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212FC64h case    7:*/		return 0x8212FC68;
		  /* 8212FC68h */ case    8:  		/* bc 4, CR6_EQ, 688 */
		/* 8212FC68h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8212FF18;  }
		/* 8212FC68h case    8:*/		return 0x8212FC6C;
		  /* 8212FC6Ch */ case    9:  		/* lwz R11, <#[R22 + 4]> */
		/* 8212FC6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 8212FC6Ch case    9:*/		return 0x8212FC70;
		  /* 8212FC70h */ case   10:  		/* cmplwi CR6, R11, 4 */
		/* 8212FC70h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8212FC70h case   10:*/		return 0x8212FC74;
		  /* 8212FC74h */ case   11:  		/* bc 4, CR6_EQ, 676 */
		/* 8212FC74h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8212FF18;  }
		/* 8212FC74h case   11:*/		return 0x8212FC78;
		  /* 8212FC78h */ case   12:  		/* lwz R6, <#[R22 + 8]> */
		/* 8212FC78h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R22 + 0x00000008) );
		/* 8212FC78h case   12:*/		return 0x8212FC7C;
		  /* 8212FC7Ch */ case   13:  		/* rlwinm R11, R22, 0, 0, 31 */
		/* 8212FC7Ch case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R22);
		/* 8212FC7Ch case   13:*/		return 0x8212FC80;
		  /* 8212FC80h */ case   14:  		/* lwz R24, <#[R3 + 20]> */
		/* 8212FC80h case   14:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x00000014) );
		/* 8212FC80h case   14:*/		return 0x8212FC84;
		  /* 8212FC84h */ case   15:  		/* li R10, 0 */
		/* 8212FC84h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212FC84h case   15:*/		return 0x8212FC88;
		  /* 8212FC88h */ case   16:  		/* lwz R25, <#[R6 + 12]> */
		/* 8212FC88h case   16:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R6 + 0x0000000C) );
		/* 8212FC88h case   16:*/		return 0x8212FC8C;
		  /* 8212FC8Ch */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212FC8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FC8Ch case   17:*/		return 0x8212FC90;
		  /* 8212FC90h */ case   18:  		/* rlwinm R8, R25, 2, 0, 29 */
		/* 8212FC90h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R25);
		/* 8212FC90h case   18:*/		return 0x8212FC94;
		  /* 8212FC94h */ case   19:  		/* lwz R9, <#[R11 + 12]> */
		/* 8212FC94h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8212FC94h case   19:*/		return 0x8212FC98;
		  /* 8212FC98h */ case   20:  		/* lwzx R8, <#[R8 + R24]> */
		/* 8212FC98h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R24 + 0x00000000) );
		/* 8212FC98h case   20:*/		return 0x8212FC9C;
		  /* 8212FC9Ch */ case   21:  		/* lwzx R7, <#[R10 + R11]> */
		/* 8212FC9Ch case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212FC9Ch case   21:*/		return 0x8212FCA0;
		  /* 8212FCA0h */ case   22:  		/* cmplw CR6, R7, R9 */
		/* 8212FCA0h case   22:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 8212FCA0h case   22:*/		return 0x8212FCA4;
		  /* 8212FCA4h */ case   23:  		/* bc 12, CR6_EQ, 360 */
		/* 8212FCA4h case   23:*/		if ( regs.CR[6].eq ) { return 0x8212FE0C;  }
		/* 8212FCA4h case   23:*/		return 0x8212FCA8;
		  /* 8212FCA8h */ case   24:  		/* addi R10, R10, 4 */
		/* 8212FCA8h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212FCA8h case   24:*/		return 0x8212FCAC;
		  /* 8212FCACh */ case   25:  		/* cmplwi CR6, R10, 12 */
		/* 8212FCACh case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000C);
		/* 8212FCACh case   25:*/		return 0x8212FCB0;
		  /* 8212FCB0h */ case   26:  		/* bc 12, CR6_LT, -20 */
		/* 8212FCB0h case   26:*/		if ( regs.CR[6].lt ) { return 0x8212FC9C;  }
		/* 8212FCB0h case   26:*/		return 0x8212FCB4;
		  /* 8212FCB4h */ case   27:  		/* lwz R26, <#[R8 + 72]> */
		/* 8212FCB4h case   27:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R8 + 0x00000048) );
		/* 8212FCB4h case   27:*/		return 0x8212FCB8;
		  /* 8212FCB8h */ case   28:  		/* li R23, -1 */
		/* 8212FCB8h case   28:*/		cpu::op::li<0>(regs,&regs.R23,0xFFFFFFFF);
		/* 8212FCB8h case   28:*/		return 0x8212FCBC;
		  /* 8212FCBCh */ case   29:  		/* mr R5, R23 */
		/* 8212FCBCh case   29:*/		regs.R5 = regs.R23;
		/* 8212FCBCh case   29:*/		return 0x8212FCC0;
		  /* 8212FCC0h */ case   30:  		/* cmpwi CR6, R26, -1 */
		/* 8212FCC0h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R26,0xFFFFFFFF);
		/* 8212FCC0h case   30:*/		return 0x8212FCC4;
		  /* 8212FCC4h */ case   31:  		/* bc 12, CR6_EQ, 96 */
		/* 8212FCC4h case   31:*/		if ( regs.CR[6].eq ) { return 0x8212FD24;  }
		/* 8212FCC4h case   31:*/		return 0x8212FCC8;
		  /* 8212FCC8h */ case   32:  		/* lwz R11, <#[R28 + 24]> */
		/* 8212FCC8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8212FCC8h case   32:*/		return 0x8212FCCC;
		  /* 8212FCCCh */ case   33:  		/* rlwinm R10, R26, 2, 0, 29 */
		/* 8212FCCCh case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R26);
		/* 8212FCCCh case   33:*/		return 0x8212FCD0;
		  /* 8212FCD0h */ case   34:  		/* lis R9, 4096 */
		/* 8212FCD0h case   34:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 8212FCD0h case   34:*/		return 0x8212FCD4;
		  /* 8212FCD4h */ case   35:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8212FCD4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8212FCD4h case   35:*/		return 0x8212FCD8;
		  /* 8212FCD8h */ case   36:  		/* lwz R11, <#[R10]> */
		/* 8212FCD8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8212FCD8h case   36:*/		return 0x8212FCDC;
		  /* 8212FCDCh */ case   37:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8212FCDCh case   37:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8212FCDCh case   37:*/		return 0x8212FCE0;
		  /* 8212FCE0h */ case   38:  		/* cmplw CR6, R11, R9 */
		/* 8212FCE0h case   38:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212FCE0h case   38:*/		return 0x8212FCE4;
		  /* 8212FCE4h */ case   39:  		/* bc 4, CR6_EQ, 64 */
		/* 8212FCE4h case   39:*/		if ( !regs.CR[6].eq ) { return 0x8212FD24;  }
		/* 8212FCE4h case   39:*/		return 0x8212FCE8;
		  /* 8212FCE8h */ case   40:  		/* lwz R7, <#[R10 + 12]> */
		/* 8212FCE8h case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212FCE8h case   40:*/		return 0x8212FCEC;
		  /* 8212FCECh */ case   41:  		/* li R9, 0 */
		/* 8212FCECh case   41:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212FCECh case   41:*/		return 0x8212FCF0;
		  /* 8212FCF0h */ case   42:  		/* cmplwi CR6, R7, 0 */
		/* 8212FCF0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8212FCF0h case   42:*/		return 0x8212FCF4;
		  /* 8212FCF4h */ case   43:  		/* bc 12, CR6_EQ, 48 */
		/* 8212FCF4h case   43:*/		if ( regs.CR[6].eq ) { return 0x8212FD24;  }
		/* 8212FCF4h case   43:*/		return 0x8212FCF8;
		  /* 8212FCF8h */ case   44:  		/* lwz R8, <#[R10 + 16]> */
		/* 8212FCF8h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000010) );
		/* 8212FCF8h case   44:*/		return 0x8212FCFC;
		  /* 8212FCFCh */ case   45:  		/* li R11, 0 */
		/* 8212FCFCh case   45:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FCFCh case   45:*/		return 0x8212FD00;
		  /* 8212FD00h */ case   46:  		/* lwzx R4, <#[R11 + R8]> */
		/* 8212FD00h case   46:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212FD00h case   46:*/		return 0x8212FD04;
		  /* 8212FD04h */ case   47:  		/* cmplw CR6, R25, R4 */
		/* 8212FD04h case   47:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R4);
		/* 8212FD04h case   47:*/		return 0x8212FD08;
		  /* 8212FD08h */ case   48:  		/* bc 4, CR6_EQ, 12 */
		/* 8212FD08h case   48:*/		if ( !regs.CR[6].eq ) { return 0x8212FD14;  }
		/* 8212FD08h case   48:*/		return 0x8212FD0C;
		  /* 8212FD0Ch */ case   49:  		/* lwz R5, <#[R10 + 8]> */
		/* 8212FD0Ch case   49:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000008) );
		/* 8212FD0Ch case   49:*/		return 0x8212FD10;
		  /* 8212FD10h */ case   50:  		/* lwzx R5, <#[R5 + R11]> */
		/* 8212FD10h case   50:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8212FD10h case   50:*/		return 0x8212FD14;
	}
	return 0x8212FD14;
} // Block from 8212FC48h-8212FD14h (51 instructions)

//////////////////////////////////////////////////////
// Block at 8212FD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FD14);
		  /* 8212FD14h */ case    0:  		/* addi R9, R9, 1 */
		/* 8212FD14h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8212FD14h case    0:*/		return 0x8212FD18;
		  /* 8212FD18h */ case    1:  		/* addi R11, R11, 4 */
		/* 8212FD18h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212FD18h case    1:*/		return 0x8212FD1C;
		  /* 8212FD1Ch */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 8212FD1Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 8212FD1Ch case    2:*/		return 0x8212FD20;
		  /* 8212FD20h */ case    3:  		/* bc 12, CR6_LT, -32 */
		/* 8212FD20h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212FD00;  }
		/* 8212FD20h case    3:*/		return 0x8212FD24;
	}
	return 0x8212FD24;
} // Block from 8212FD14h-8212FD24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212FD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FD24);
		  /* 8212FD24h */ case    0:  		/* li R11, 0 */
		/* 8212FD24h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FD24h case    0:*/		return 0x8212FD28;
		  /* 8212FD28h */ case    1:  		/* lwzx R10, <#[R11 + R6]> */
		/* 8212FD28h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8212FD28h case    1:*/		return 0x8212FD2C;
		  /* 8212FD2Ch */ case    2:  		/* cmplw CR6, R10, R5 */
		/* 8212FD2Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 8212FD2Ch case    2:*/		return 0x8212FD30;
		  /* 8212FD30h */ case    3:  		/* bc 12, CR6_EQ, 220 */
		/* 8212FD30h case    3:*/		if ( regs.CR[6].eq ) { return 0x8212FE0C;  }
		/* 8212FD30h case    3:*/		return 0x8212FD34;
		  /* 8212FD34h */ case    4:  		/* addi R11, R11, 4 */
		/* 8212FD34h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212FD34h case    4:*/		return 0x8212FD38;
		  /* 8212FD38h */ case    5:  		/* cmplwi CR6, R11, 12 */
		/* 8212FD38h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 8212FD38h case    5:*/		return 0x8212FD3C;
		  /* 8212FD3Ch */ case    6:  		/* bc 12, CR6_LT, -20 */
		/* 8212FD3Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x8212FD28;  }
		/* 8212FD3Ch case    6:*/		return 0x8212FD40;
		  /* 8212FD40h */ case    7:  		/* li R27, 0 */
		/* 8212FD40h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8212FD40h case    7:*/		return 0x8212FD44;
		  /* 8212FD44h */ case    8:  		/* mr R29, R6 */
		/* 8212FD44h case    8:*/		regs.R29 = regs.R6;
		/* 8212FD44h case    8:*/		return 0x8212FD48;
		  /* 8212FD48h */ case    9:  		/* lwz R5, <#[R29]> */
		/* 8212FD48h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000000) );
		/* 8212FD48h case    9:*/		return 0x8212FD4C;
		  /* 8212FD4Ch */ case   10:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 8212FD4Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 8212FD4Ch case   10:*/		return 0x8212FD50;
		  /* 8212FD50h */ case   11:  		/* lwzx R11, <#[R11 + R24]> */
		/* 8212FD50h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 8212FD50h case   11:*/		return 0x8212FD54;
		  /* 8212FD54h */ case   12:  		/* lwz R11, <#[R11 + 72]> */
		/* 8212FD54h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 8212FD54h case   12:*/		return 0x8212FD58;
		  /* 8212FD58h */ case   13:  		/* cmpwi CR6, R11, -1 */
		/* 8212FD58h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212FD58h case   13:*/		return 0x8212FD5C;
		  /* 8212FD5Ch */ case   14:  		/* bc 12, CR6_EQ, 352 */
		/* 8212FD5Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FD5Ch case   14:*/		return 0x8212FD60;
		  /* 8212FD60h */ case   15:  		/* lwz R10, <#[R28 + 24]> */
		/* 8212FD60h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 8212FD60h case   15:*/		return 0x8212FD64;
		  /* 8212FD64h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212FD64h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212FD64h case   16:*/		return 0x8212FD68;
		  /* 8212FD68h */ case   17:  		/* rlwinm R9, R26, 2, 0, 29 */
		/* 8212FD68h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R26);
		/* 8212FD68h case   17:*/		return 0x8212FD6C;
		  /* 8212FD6Ch */ case   18:  		/* lwzx R7, <#[R11 + R10]> */
		/* 8212FD6Ch case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212FD6Ch case   18:*/		return 0x8212FD70;
		  /* 8212FD70h */ case   19:  		/* lwzx R6, <#[R9 + R10]> */
		/* 8212FD70h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8212FD70h case   19:*/		return 0x8212FD74;
		  /* 8212FD74h */ case   20:  		/* lwz R10, <#[R7]> */
		/* 8212FD74h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 8212FD74h case   20:*/		return 0x8212FD78;
		  /* 8212FD78h */ case   21:  		/* lwz R11, <#[R6]> */
		/* 8212FD78h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8212FD78h case   21:*/		return 0x8212FD7C;
		  /* 8212FD7Ch */ case   22:  		/* xor R9, R11, R10 */
		/* 8212FD7Ch case   22:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8212FD7Ch case   22:*/		return 0x8212FD80;
		  /* 8212FD80h */ case   23:  		/* rlwinm. R9, R9, 0, 0, 11 */
		/* 8212FD80h case   23:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R9,regs.R9);
		/* 8212FD80h case   23:*/		return 0x8212FD84;
		  /* 8212FD84h */ case   24:  		/* bc 4, CR0_EQ, 312 */
		/* 8212FD84h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8212FEBC;  }
		/* 8212FD84h case   24:*/		return 0x8212FD88;
		  /* 8212FD88h */ case   25:  		/* rlwinm. R3, R11, 0, 12, 31 */
		/* 8212FD88h case   25:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R3,regs.R11);
		/* 8212FD88h case   25:*/		return 0x8212FD8C;
		  /* 8212FD8Ch */ case   26:  		/* rlwinm R31, R10, 0, 12, 31 */
		/* 8212FD8Ch case   26:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R10);
		/* 8212FD8Ch case   26:*/		return 0x8212FD90;
		  /* 8212FD90h */ case   27:  		/* bc 12, CR0_EQ, 300 */
		/* 8212FD90h case   27:*/		if ( regs.CR[0].eq ) { return 0x8212FEBC;  }
		/* 8212FD90h case   27:*/		return 0x8212FD94;
		  /* 8212FD94h */ case   28:  		/* cmplwi CR6, R31, 0 */
		/* 8212FD94h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8212FD94h case   28:*/		return 0x8212FD98;
		  /* 8212FD98h */ case   29:  		/* bc 12, CR6_EQ, 292 */
		/* 8212FD98h case   29:*/		if ( regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FD98h case   29:*/		return 0x8212FD9C;
		  /* 8212FD9Ch */ case   30:  		/* lwz R11, <#[R6 + 4]> */
		/* 8212FD9Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 8212FD9Ch case   30:*/		return 0x8212FDA0;
		  /* 8212FDA0h */ case   31:  		/* twi 6, R3, 0 */
		/* 8212FDA0h case   31:*/		cpu::op::tw<6>(regs, 0x8212FDA0, regs.R3, 0x00000000);
		/* 8212FDA0h case   31:*/		return 0x8212FDA4;
		  /* 8212FDA4h */ case   32:  		/* lwz R10, <#[R7 + 4]> */
		/* 8212FDA4h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 8212FDA4h case   32:*/		return 0x8212FDA8;
		  /* 8212FDA8h */ case   33:  		/* twi 6, R31, 0 */
		/* 8212FDA8h case   33:*/		cpu::op::tw<6>(regs, 0x8212FDA8, regs.R31, 0x00000000);
		/* 8212FDA8h case   33:*/		return 0x8212FDAC;
		  /* 8212FDACh */ case   34:  		/* divwu R30, R11, R3 */
		/* 8212FDACh case   34:*/		cpu::op::divwu<0>(regs,&regs.R30,regs.R11,regs.R3);
		/* 8212FDACh case   34:*/		return 0x8212FDB0;
		  /* 8212FDB0h */ case   35:  		/* divwu R11, R10, R31 */
		/* 8212FDB0h case   35:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R10,regs.R31);
		/* 8212FDB0h case   35:*/		return 0x8212FDB4;
		  /* 8212FDB4h */ case   36:  		/* cmplw CR6, R30, R11 */
		/* 8212FDB4h case   36:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8212FDB4h case   36:*/		return 0x8212FDB8;
		  /* 8212FDB8h */ case   37:  		/* bc 4, CR6_EQ, 260 */
		/* 8212FDB8h case   37:*/		if ( !regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FDB8h case   37:*/		return 0x8212FDBC;
		  /* 8212FDBCh */ case   38:  		/* lwz R11, <#[R6 + 12]> */
		/* 8212FDBCh case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x0000000C) );
		/* 8212FDBCh case   38:*/		return 0x8212FDC0;
		  /* 8212FDC0h */ case   39:  		/* cmplw CR6, R3, R11 */
		/* 8212FDC0h case   39:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8212FDC0h case   39:*/		return 0x8212FDC4;
		  /* 8212FDC4h */ case   40:  		/* bc 4, CR6_EQ, 248 */
		/* 8212FDC4h case   40:*/		if ( !regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FDC4h case   40:*/		return 0x8212FDC8;
		  /* 8212FDC8h */ case   41:  		/* lwz R8, <#[R7 + 12]> */
		/* 8212FDC8h case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x0000000C) );
		/* 8212FDC8h case   41:*/		return 0x8212FDCC;
		  /* 8212FDCCh */ case   42:  		/* cmplw CR6, R31, R8 */
		/* 8212FDCCh case   42:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R8);
		/* 8212FDCCh case   42:*/		return 0x8212FDD0;
		  /* 8212FDD0h */ case   43:  		/* bc 4, CR6_EQ, 236 */
		/* 8212FDD0h case   43:*/		if ( !regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FDD0h case   43:*/		return 0x8212FDD4;
		  /* 8212FDD4h */ case   44:  		/* mr R4, R23 */
		/* 8212FDD4h case   44:*/		regs.R4 = regs.R23;
		/* 8212FDD4h case   44:*/		return 0x8212FDD8;
		  /* 8212FDD8h */ case   45:  		/* li R10, 0 */
		/* 8212FDD8h case   45:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212FDD8h case   45:*/		return 0x8212FDDC;
		  /* 8212FDDCh */ case   46:  		/* cmplwi CR6, R8, 0 */
		/* 8212FDDCh case   46:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8212FDDCh case   46:*/		return 0x8212FDE0;
		  /* 8212FDE0h */ case   47:  		/* bc 12, CR6_EQ, 68 */
		/* 8212FDE0h case   47:*/		if ( regs.CR[6].eq ) { return 0x8212FE24;  }
		/* 8212FDE0h case   47:*/		return 0x8212FDE4;
		  /* 8212FDE4h */ case   48:  		/* lwz R9, <#[R7 + 16]> */
		/* 8212FDE4h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000010) );
		/* 8212FDE4h case   48:*/		return 0x8212FDE8;
		  /* 8212FDE8h */ case   49:  		/* li R11, 0 */
		/* 8212FDE8h case   49:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FDE8h case   49:*/		return 0x8212FDEC;
		  /* 8212FDECh */ case   50:  		/* lwzx R21, <#[R11 + R9]> */
		/* 8212FDECh case   50:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8212FDECh case   50:*/		return 0x8212FDF0;
		  /* 8212FDF0h */ case   51:  		/* cmplw CR6, R21, R5 */
		/* 8212FDF0h case   51:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R5);
		/* 8212FDF0h case   51:*/		return 0x8212FDF4;
		  /* 8212FDF4h */ case   52:  		/* bc 12, CR6_EQ, 44 */
		/* 8212FDF4h case   52:*/		if ( regs.CR[6].eq ) { return 0x8212FE20;  }
		/* 8212FDF4h case   52:*/		return 0x8212FDF8;
		  /* 8212FDF8h */ case   53:  		/* addi R10, R10, 1 */
		/* 8212FDF8h case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212FDF8h case   53:*/		return 0x8212FDFC;
		  /* 8212FDFCh */ case   54:  		/* addi R11, R11, 4 */
		/* 8212FDFCh case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212FDFCh case   54:*/		return 0x8212FE00;
		  /* 8212FE00h */ case   55:  		/* cmplw CR6, R10, R8 */
		/* 8212FE00h case   55:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8212FE00h case   55:*/		return 0x8212FE04;
		  /* 8212FE04h */ case   56:  		/* bc 12, CR6_LT, -24 */
		/* 8212FE04h case   56:*/		if ( regs.CR[6].lt ) { return 0x8212FDEC;  }
		/* 8212FE04h case   56:*/		return 0x8212FE08;
		  /* 8212FE08h */ case   57:  		/* b 28 */
		/* 8212FE08h case   57:*/		return 0x8212FE24;
		/* 8212FE08h case   57:*/		return 0x8212FE0C;
	}
	return 0x8212FE0C;
} // Block from 8212FD24h-8212FE0Ch (58 instructions)

//////////////////////////////////////////////////////
// Block at 8212FE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FE0C);
		  /* 8212FE0Ch */ case    0:  		/* lis R11, 4352 */
		/* 8212FE0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x1100);
		/* 8212FE0Ch case    0:*/		return 0x8212FE10;
		  /* 8212FE10h */ case    1:  		/* li R3, 0 */
		/* 8212FE10h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212FE10h case    1:*/		return 0x8212FE14;
		  /* 8212FE14h */ case    2:  		/* ori R11, R11, 3 */
		/* 8212FE14h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8212FE14h case    2:*/		return 0x8212FE18;
		  /* 8212FE18h */ case    3:  		/* stw R11, <#[R22]> */
		/* 8212FE18h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 8212FE18h case    3:*/		return 0x8212FE1C;
		  /* 8212FE1Ch */ case    4:  		/* b 284 */
		/* 8212FE1Ch case    4:*/		return 0x8212FF38;
		/* 8212FE1Ch case    4:*/		return 0x8212FE20;
	}
	return 0x8212FE20;
} // Block from 8212FE0Ch-8212FE20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212FE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FE20);
		  /* 8212FE20h */ case    0:  		/* mr R4, R10 */
		/* 8212FE20h case    0:*/		regs.R4 = regs.R10;
		/* 8212FE20h case    0:*/		return 0x8212FE24;
	}
	return 0x8212FE24;
} // Block from 8212FE20h-8212FE24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212FE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FE24);
		  /* 8212FE24h */ case    0:  		/* li R11, 0 */
		/* 8212FE24h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212FE24h case    0:*/		return 0x8212FE28;
		  /* 8212FE28h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 8212FE28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8212FE28h case    1:*/		return 0x8212FE2C;
		  /* 8212FE2Ch */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 8212FE2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FE2Ch case    2:*/		return 0x8212FE30;
		  /* 8212FE30h */ case    3:  		/* lwz R9, <#[R6 + 16]> */
		/* 8212FE30h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000010) );
		/* 8212FE30h case    3:*/		return 0x8212FE34;
		  /* 8212FE34h */ case    4:  		/* li R10, 0 */
		/* 8212FE34h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212FE34h case    4:*/		return 0x8212FE38;
		  /* 8212FE38h */ case    5:  		/* lwzx R5, <#[R10 + R9]> */
		/* 8212FE38h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212FE38h case    5:*/		return 0x8212FE3C;
		  /* 8212FE3Ch */ case    6:  		/* cmplw CR6, R5, R25 */
		/* 8212FE3Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R25);
		/* 8212FE3Ch case    6:*/		return 0x8212FE40;
		  /* 8212FE40h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 8212FE40h case    7:*/		if ( regs.CR[6].eq ) { return 0x8212FE58;  }
		/* 8212FE40h case    7:*/		return 0x8212FE44;
		  /* 8212FE44h */ case    8:  		/* addi R11, R11, 1 */
		/* 8212FE44h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212FE44h case    8:*/		return 0x8212FE48;
		  /* 8212FE48h */ case    9:  		/* addi R10, R10, 4 */
		/* 8212FE48h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8212FE48h case    9:*/		return 0x8212FE4C;
		  /* 8212FE4Ch */ case   10:  		/* cmplw CR6, R11, R8 */
		/* 8212FE4Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8212FE4Ch case   10:*/		return 0x8212FE50;
		  /* 8212FE50h */ case   11:  		/* bc 12, CR6_LT, -24 */
		/* 8212FE50h case   11:*/		if ( regs.CR[6].lt ) { return 0x8212FE38;  }
		/* 8212FE50h case   11:*/		return 0x8212FE54;
		  /* 8212FE54h */ case   12:  		/* b 104 */
		/* 8212FE54h case   12:*/		return 0x8212FEBC;
		/* 8212FE54h case   12:*/		return 0x8212FE58;
	}
	return 0x8212FE58;
} // Block from 8212FE24h-8212FE58h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212FE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FE58);
		  /* 8212FE58h */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 8212FE58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8212FE58h case    0:*/		return 0x8212FE5C;
		  /* 8212FE5Ch */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 8212FE5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FE5Ch case    1:*/		return 0x8212FE60;
		  /* 8212FE60h */ case    2:  		/* cmpwi CR6, R4, -1 */
		/* 8212FE60h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 8212FE60h case    2:*/		return 0x8212FE64;
		  /* 8212FE64h */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 8212FE64h case    3:*/		if ( regs.CR[6].eq ) { return 0x8212FEBC;  }
		/* 8212FE64h case    3:*/		return 0x8212FE68;
		  /* 8212FE68h */ case    4:  		/* li R5, 1 */
		/* 8212FE68h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212FE68h case    4:*/		return 0x8212FE6C;
		  /* 8212FE6Ch */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 8212FE6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8212FE6Ch case    5:*/		return 0x8212FE70;
		  /* 8212FE70h */ case    6:  		/* bc 12, CR6_EQ, 124 */
		/* 8212FE70h case    6:*/		if ( regs.CR[6].eq ) { return 0x8212FEEC;  }
		/* 8212FE70h case    6:*/		return 0x8212FE74;
		  /* 8212FE74h */ case    7:  		/* lwz R9, <#[R7 + 8]> */
		/* 8212FE74h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000008) );
		/* 8212FE74h case    7:*/		return 0x8212FE78;
		  /* 8212FE78h */ case    8:  		/* rlwinm R7, R3, 2, 0, 29 */
		/* 8212FE78h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R3);
		/* 8212FE78h case    8:*/		return 0x8212FE7C;
		  /* 8212FE7Ch */ case    9:  		/* lwz R8, <#[R6 + 8]> */
		/* 8212FE7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000008) );
		/* 8212FE7Ch case    9:*/		return 0x8212FE80;
		  /* 8212FE80h */ case   10:  		/* rlwinm R6, R31, 2, 0, 29 */
		/* 8212FE80h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R31);
		/* 8212FE80h case   10:*/		return 0x8212FE84;
		  /* 8212FE84h */ case   11:  		/* mtspr CTR, R30 */
		/* 8212FE84h case   11:*/		regs.CTR = regs.R30;
		/* 8212FE84h case   11:*/		return 0x8212FE88;
		  /* 8212FE88h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8212FE88h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8212FE88h case   12:*/		return 0x8212FE8C;
		  /* 8212FE8Ch */ case   13:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 8212FE8Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 8212FE8Ch case   13:*/		return 0x8212FE90;
		  /* 8212FE90h */ case   14:  		/* lwzx R4, <#[R11 + R8]> */
		/* 8212FE90h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8212FE90h case   14:*/		return 0x8212FE94;
		  /* 8212FE94h */ case   15:  		/* add R11, R7, R11 */
		/* 8212FE94h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8212FE94h case   15:*/		return 0x8212FE98;
		  /* 8212FE98h */ case   16:  		/* lwzx R3, <#[R10 + R9]> */
		/* 8212FE98h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212FE98h case   16:*/		return 0x8212FE9C;
		  /* 8212FE9Ch */ case   17:  		/* add R10, R6, R10 */
		/* 8212FE9Ch case   17:*/		cpu::op::add<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 8212FE9Ch case   17:*/		return 0x8212FEA0;
		  /* 8212FEA0h */ case   18:  		/* subf R4, R4, R3 */
		/* 8212FEA0h case   18:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R4,regs.R3);
		/* 8212FEA0h case   18:*/		return 0x8212FEA4;
		  /* 8212FEA4h */ case   19:  		/* addic R4, R4, -1 */
		/* 8212FEA4h case   19:*/		cpu::op::addic<0>(regs,&regs.R4,regs.R4,0xFFFFFFFF);
		/* 8212FEA4h case   19:*/		return 0x8212FEA8;
		  /* 8212FEA8h */ case   20:  		/* subfe R4, R4, R4 */
		/* 8212FEA8h case   20:*/		cpu::op::subfe<0>(regs,&regs.R4,regs.R4,regs.R4);
		/* 8212FEA8h case   20:*/		return 0x8212FEAC;
		  /* 8212FEACh */ case   21:  		/* and R5, R4, R5 */
		/* 8212FEACh case   21:*/		cpu::op::and<0>(regs,&regs.R5,regs.R4,regs.R5);
		/* 8212FEACh case   21:*/		return 0x8212FEB0;
		  /* 8212FEB0h */ case   22:  		/* bc 16, CR0_LT, -32 */
		/* 8212FEB0h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8212FE90;  }
		/* 8212FEB0h case   22:*/		return 0x8212FEB4;
		  /* 8212FEB4h */ case   23:  		/* cmpwi CR6, R5, 0 */
		/* 8212FEB4h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8212FEB4h case   23:*/		return 0x8212FEB8;
		  /* 8212FEB8h */ case   24:  		/* bc 4, CR6_EQ, 52 */
		/* 8212FEB8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8212FEEC;  }
		/* 8212FEB8h case   24:*/		return 0x8212FEBC;
	}
	return 0x8212FEBC;
} // Block from 8212FE58h-8212FEBCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8212FEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FEBC);
		  /* 8212FEBCh */ case    0:  		/* addi R27, R27, 1 */
		/* 8212FEBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8212FEBCh case    0:*/		return 0x8212FEC0;
		  /* 8212FEC0h */ case    1:  		/* addi R29, R29, 4 */
		/* 8212FEC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8212FEC0h case    1:*/		return 0x8212FEC4;
		  /* 8212FEC4h */ case    2:  		/* cmplwi CR6, R27, 3 */
		/* 8212FEC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000003);
		/* 8212FEC4h case    2:*/		return 0x8212FEC8;
		  /* 8212FEC8h */ case    3:  		/* bc 12, CR6_LT, -384 */
		/* 8212FEC8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212FD48;  }
		/* 8212FEC8h case    3:*/		return 0x8212FECC;
		  /* 8212FECCh */ case    4:  		/* lis R11, -32253 */
		/* 8212FECCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212FECCh case    4:*/		return 0x8212FED0;
		  /* 8212FED0h */ case    5:  		/* lbz R7, <#[R28 + 203]> */
		/* 8212FED0h case    5:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R28 + 0x000000CB) );
		/* 8212FED0h case    5:*/		return 0x8212FED4;
		  /* 8212FED4h */ case    6:  		/* li R5, 4544 */
		/* 8212FED4h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x11C0);
		/* 8212FED4h case    6:*/		return 0x8212FED8;
		  /* 8212FED8h */ case    7:  		/* lwz R4, <#[R22 + 60]> */
		/* 8212FED8h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + 0x0000003C) );
		/* 8212FED8h case    7:*/		return 0x8212FEDC;
		  /* 8212FEDCh */ case    8:  		/* addi R6, R11, 20100 */
		/* 8212FEDCh case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4E84);
		/* 8212FEDCh case    8:*/		return 0x8212FEE0;
		  /* 8212FEE0h */ case    9:  		/* mr R3, R28 */
		/* 8212FEE0h case    9:*/		regs.R3 = regs.R28;
		/* 8212FEE0h case    9:*/		return 0x8212FEE4;
		  /* 8212FEE4h */ case   10:  		/* bl -137140 */
		/* 8212FEE4h case   10:*/		regs.LR = 0x8212FEE8; return 0x8210E730;
		/* 8212FEE4h case   10:*/		return 0x8212FEE8;
		  /* 8212FEE8h */ case   11:  		/* b 72 */
		/* 8212FEE8h case   11:*/		return 0x8212FF30;
		/* 8212FEE8h case   11:*/		return 0x8212FEEC;
	}
	return 0x8212FEEC;
} // Block from 8212FEBCh-8212FEECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212FEECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FEEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FEEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FEEC);
		  /* 8212FEECh */ case    0:  		/* lwz R10, <#[R28 + 260]> */
		/* 8212FEECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000104) );
		/* 8212FEECh case    0:*/		return 0x8212FEF0;
		  /* 8212FEF0h */ case    1:  		/* lis R9, 4352 */
		/* 8212FEF0h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x1100);
		/* 8212FEF0h case    1:*/		return 0x8212FEF4;
		  /* 8212FEF4h */ case    2:  		/* li R11, 3 */
		/* 8212FEF4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8212FEF4h case    2:*/		return 0x8212FEF8;
		  /* 8212FEF8h */ case    3:  		/* ori R9, R9, 3 */
		/* 8212FEF8h case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3);
		/* 8212FEF8h case    3:*/		return 0x8212FEFC;
		  /* 8212FEFCh */ case    4:  		/* li R3, 0 */
		/* 8212FEFCh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212FEFCh case    4:*/		return 0x8212FF00;
		  /* 8212FF00h */ case    5:  		/* stw R9, <#[R10]> */
		/* 8212FF00h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8212FF00h case    5:*/		return 0x8212FF04;
		  /* 8212FF04h */ case    6:  		/* lwz R10, <#[R28 + 260]> */
		/* 8212FF04h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000104) );
		/* 8212FF04h case    6:*/		return 0x8212FF08;
		  /* 8212FF08h */ case    7:  		/* stw R11, <#[R10 + 4]> */
		/* 8212FF08h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8212FF08h case    7:*/		return 0x8212FF0C;
		  /* 8212FF0Ch */ case    8:  		/* lwz R10, <#[R28 + 260]> */
		/* 8212FF0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000104) );
		/* 8212FF0Ch case    8:*/		return 0x8212FF10;
		  /* 8212FF10h */ case    9:  		/* stw R11, <#[R10 + 12]> */
		/* 8212FF10h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8212FF10h case    9:*/		return 0x8212FF14;
		  /* 8212FF14h */ case   10:  		/* b 36 */
		/* 8212FF14h case   10:*/		return 0x8212FF38;
		/* 8212FF14h case   10:*/		return 0x8212FF18;
	}
	return 0x8212FF18;
} // Block from 8212FEECh-8212FF18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212FF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FF18);
		  /* 8212FF18h */ case    0:  		/* lis R11, -32253 */
		/* 8212FF18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212FF18h case    0:*/		return 0x8212FF1C;
		  /* 8212FF1Ch */ case    1:  		/* lwz R4, <#[R22 + 60]> */
		/* 8212FF1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + 0x0000003C) );
		/* 8212FF1Ch case    1:*/		return 0x8212FF20;
		  /* 8212FF20h */ case    2:  		/* li R5, 4820 */
		/* 8212FF20h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x12D4);
		/* 8212FF20h case    2:*/		return 0x8212FF24;
		  /* 8212FF24h */ case    3:  		/* addi R6, R11, 20060 */
		/* 8212FF24h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4E5C);
		/* 8212FF24h case    3:*/		return 0x8212FF28;
		  /* 8212FF28h */ case    4:  		/* mr R3, R28 */
		/* 8212FF28h case    4:*/		regs.R3 = regs.R28;
		/* 8212FF28h case    4:*/		return 0x8212FF2C;
		  /* 8212FF2Ch */ case    5:  		/* bl -137212 */
		/* 8212FF2Ch case    5:*/		regs.LR = 0x8212FF30; return 0x8210E730;
		/* 8212FF2Ch case    5:*/		return 0x8212FF30;
	}
	return 0x8212FF30;
} // Block from 8212FF18h-8212FF30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212FF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FF30);
		  /* 8212FF30h */ case    0:  		/* lis R3, -32768 */
		/* 8212FF30h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8212FF30h case    0:*/		return 0x8212FF34;
		  /* 8212FF34h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8212FF34h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8212FF34h case    1:*/		return 0x8212FF38;
	}
	return 0x8212FF38;
} // Block from 8212FF30h-8212FF38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212FF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FF38);
		  /* 8212FF38h */ case    0:  		/* addi R1, R1, 176 */
		/* 8212FF38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8212FF38h case    0:*/		return 0x8212FF3C;
		  /* 8212FF3Ch */ case    1:  		/* b -650416 */
		/* 8212FF3Ch case    1:*/		return 0x8209128C;
		/* 8212FF3Ch case    1:*/		return 0x8212FF40;
	}
	return 0x8212FF40;
} // Block from 8212FF38h-8212FF40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212FF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FF40);
		  /* 8212FF40h */ case    0:  		/* mfspr R12, LR */
		/* 8212FF40h case    0:*/		regs.R12 = regs.LR;
		/* 8212FF40h case    0:*/		return 0x8212FF44;
		  /* 8212FF44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8212FF44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212FF44h case    1:*/		return 0x8212FF48;
		  /* 8212FF48h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8212FF48h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212FF48h case    2:*/		return 0x8212FF4C;
		  /* 8212FF4Ch */ case    3:  		/* stwu R1, <#[R1 - 368]> */
		/* 8212FF4Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 8212FF4Ch case    3:*/		return 0x8212FF50;
		  /* 8212FF50h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 8212FF50h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 8212FF50h case    4:*/		return 0x8212FF54;
		  /* 8212FF54h */ case    5:  		/* li R10, 0 */
		/* 8212FF54h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8212FF54h case    5:*/		return 0x8212FF58;
		  /* 8212FF58h */ case    6:  		/* li R11, 1 */
		/* 8212FF58h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8212FF58h case    6:*/		return 0x8212FF5C;
		  /* 8212FF5Ch */ case    7:  		/* li R9, 2 */
		/* 8212FF5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8212FF5Ch case    7:*/		return 0x8212FF60;
		  /* 8212FF60h */ case    8:  		/* stw R10, <#[R1 + 96]> */
		/* 8212FF60h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8212FF60h case    8:*/		return 0x8212FF64;
		  /* 8212FF64h */ case    9:  		/* li R8, 3 */
		/* 8212FF64h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8212FF64h case    9:*/		return 0x8212FF68;
		  /* 8212FF68h */ case   10:  		/* stw R10, <#[R1 + 112]> */
		/* 8212FF68h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8212FF68h case   10:*/		return 0x8212FF6C;
		  /* 8212FF6Ch */ case   11:  		/* stw R11, <#[R1 + 116]> */
		/* 8212FF6Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8212FF6Ch case   11:*/		return 0x8212FF70;
		  /* 8212FF70h */ case   12:  		/* mr R31, R3 */
		/* 8212FF70h case   12:*/		regs.R31 = regs.R3;
		/* 8212FF70h case   12:*/		return 0x8212FF74;
		  /* 8212FF74h */ case   13:  		/* stw R9, <#[R1 + 120]> */
		/* 8212FF74h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 8212FF74h case   13:*/		return 0x8212FF78;
		  /* 8212FF78h */ case   14:  		/* stw R8, <#[R1 + 124]> */
		/* 8212FF78h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 8212FF78h case   14:*/		return 0x8212FF7C;
		  /* 8212FF7Ch */ case   15:  		/* lwz R10, <#[R4]> */
		/* 8212FF7Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 8212FF7Ch case   15:*/		return 0x8212FF80;
		  /* 8212FF80h */ case   16:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 8212FF80h case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 8212FF80h case   16:*/		return 0x8212FF84;
		  /* 8212FF84h */ case   17:  		/* cmplwi CR6, R10, 3 */
		/* 8212FF84h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8212FF84h case   17:*/		return 0x8212FF88;
		  /* 8212FF88h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 8212FF88h case   18:*/		if ( regs.CR[6].eq ) { return 0x8212FF94;  }
		/* 8212FF88h case   18:*/		return 0x8212FF8C;
		  /* 8212FF8Ch */ case   19:  		/* li R3, 1 */
		/* 8212FF8Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8212FF8Ch case   19:*/		return 0x8212FF90;
		  /* 8212FF90h */ case   20:  		/* b 84 */
		/* 8212FF90h case   20:*/		return 0x8212FFE4;
		/* 8212FF90h case   20:*/		return 0x8212FF94;
	}
	return 0x8212FF94;
} // Block from 8212FF40h-8212FF94h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8212FF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FF94);
		  /* 8212FF94h */ case    0:  		/* stw R11, <#[R1 + 84]> */
		/* 8212FF94h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8212FF94h case    0:*/		return 0x8212FF98;
		  /* 8212FF98h */ case    1:  		/* lis R9, -32253 */
		/* 8212FF98h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8212FF98h case    1:*/		return 0x8212FF9C;
		  /* 8212FF9Ch */ case    2:  		/* li R10, 3 */
		/* 8212FF9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8212FF9Ch case    2:*/		return 0x8212FFA0;
		  /* 8212FFA0h */ case    3:  		/* addi R5, R9, 19480 */
		/* 8212FFA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0x4C18);
		/* 8212FFA0h case    3:*/		return 0x8212FFA4;
		  /* 8212FFA4h */ case    4:  		/* addi R9, R1, 112 */
		/* 8212FFA4h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8212FFA4h case    4:*/		return 0x8212FFA8;
		  /* 8212FFA8h */ case    5:  		/* addi R8, R1, 128 */
		/* 8212FFA8h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 8212FFA8h case    5:*/		return 0x8212FFAC;
		  /* 8212FFACh */ case    6:  		/* addi R7, R1, 96 */
		/* 8212FFACh case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8212FFACh case    6:*/		return 0x8212FFB0;
		  /* 8212FFB0h */ case    7:  		/* addi R6, R1, 288 */
		/* 8212FFB0h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 8212FFB0h case    7:*/		return 0x8212FFB4;
		  /* 8212FFB4h */ case    8:  		/* mr R3, R31 */
		/* 8212FFB4h case    8:*/		regs.R3 = regs.R31;
		/* 8212FFB4h case    8:*/		return 0x8212FFB8;
		  /* 8212FFB8h */ case    9:  		/* bl -312120 */
		/* 8212FFB8h case    9:*/		regs.LR = 0x8212FFBC; return 0x820E3C80;
		/* 8212FFB8h case    9:*/		return 0x8212FFBC;
		  /* 8212FFBCh */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8212FFBCh case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212FFBCh case   10:*/		return 0x8212FFC0;
		  /* 8212FFC0h */ case   11:  		/* bc 4, CR0_EQ, 36 */
		/* 8212FFC0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8212FFE4;  }
		/* 8212FFC0h case   11:*/		return 0x8212FFC4;
		  /* 8212FFC4h */ case   12:  		/* lwz R11, <#[R31 + 260]> */
		/* 8212FFC4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8212FFC4h case   12:*/		return 0x8212FFC8;
		  /* 8212FFC8h */ case   13:  		/* lwz R10, <#[R1 + 128]> */
		/* 8212FFC8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 8212FFC8h case   13:*/		return 0x8212FFCC;
		  /* 8212FFCCh */ case   14:  		/* lwz R9, <#[R1 + 132]> */
		/* 8212FFCCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 8212FFCCh case   14:*/		return 0x8212FFD0;
		  /* 8212FFD0h */ case   15:  		/* lwz R8, <#[R1 + 136]> */
		/* 8212FFD0h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000088) );
		/* 8212FFD0h case   15:*/		return 0x8212FFD4;
		  /* 8212FFD4h */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 8212FFD4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FFD4h case   16:*/		return 0x8212FFD8;
		  /* 8212FFD8h */ case   17:  		/* stw R10, <#[R11]> */
		/* 8212FFD8h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212FFD8h case   17:*/		return 0x8212FFDC;
		  /* 8212FFDCh */ case   18:  		/* stw R9, <#[R11 + 4]> */
		/* 8212FFDCh case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8212FFDCh case   18:*/		return 0x8212FFE0;
		  /* 8212FFE0h */ case   19:  		/* stw R8, <#[R11 + 8]> */
		/* 8212FFE0h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8212FFE0h case   19:*/		return 0x8212FFE4;
	}
	return 0x8212FFE4;
} // Block from 8212FF94h-8212FFE4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8212FFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FFE4);
		  /* 8212FFE4h */ case    0:  		/* addi R1, R1, 368 */
		/* 8212FFE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 8212FFE4h case    0:*/		return 0x8212FFE8;
		  /* 8212FFE8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8212FFE8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212FFE8h case    1:*/		return 0x8212FFEC;
		  /* 8212FFECh */ case    2:  		/* mtspr LR, R12 */
		/* 8212FFECh case    2:*/		regs.LR = regs.R12;
		/* 8212FFECh case    2:*/		return 0x8212FFF0;
		  /* 8212FFF0h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8212FFF0h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212FFF0h case    3:*/		return 0x8212FFF4;
		  /* 8212FFF4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8212FFF4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8212FFF4h case    4:*/		return 0x8212FFF8;
	}
	return 0x8212FFF8;
} // Block from 8212FFE4h-8212FFF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212FFF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212FFF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212FFF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212FFF8);
		  /* 8212FFF8h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 8212FFF8h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8212FFF8h case    0:*/		return 0x8212FFFC;
		  /* 8212FFFCh */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 8212FFFCh case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8212FFFCh case    1:*/		return 0x82130000;
		  /* 82130000h */ case    2:  		/* lwz R11, <#[R3 + 260]> */
		/* 82130000h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82130000h case    2:*/		return 0x82130004;
		  /* 82130004h */ case    3:  		/* lis R10, 4096 */
		/* 82130004h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 82130004h case    3:*/		return 0x82130008;
		  /* 82130008h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 82130008h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82130008h case    4:*/		return 0x8213000C;
		  /* 8213000Ch */ case    5:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213000Ch case    5:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213000Ch case    5:*/		return 0x82130010;
		  /* 82130010h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82130010h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82130010h case    6:*/		return 0x82130014;
		  /* 82130014h */ case    7:  		/* bc 4, CR6_EQ, 316 */
		/* 82130014h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82130150;  }
		/* 82130014h case    7:*/		return 0x82130018;
		  /* 82130018h */ case    8:  		/* lhz R11, <#[R3 + 202]> */
		/* 82130018h case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 82130018h case    8:*/		return 0x8213001C;
		  /* 8213001Ch */ case    9:  		/* cmplwi CR6, R11, 260 */
		/* 8213001Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213001Ch case    9:*/		return 0x82130020;
		  /* 82130020h */ case   10:  		/* bc 4, CR6_LT, 304 */
		/* 82130020h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82130150;  }
		/* 82130020h case   10:*/		return 0x82130024;
		  /* 82130024h */ case   11:  		/* lwz R11, <#[R3 + 260]> */
		/* 82130024h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82130024h case   11:*/		return 0x82130028;
		  /* 82130028h */ case   12:  		/* lwz R10, <#[R3 + 20]> */
		/* 82130028h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 82130028h case   12:*/		return 0x8213002C;
		  /* 8213002Ch */ case   13:  		/* lwz R8, <#[R11 + 8]> */
		/* 8213002Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8213002Ch case   13:*/		return 0x82130030;
		  /* 82130030h */ case   14:  		/* lwz R7, <#[R11 + 16]> */
		/* 82130030h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82130030h case   14:*/		return 0x82130034;
		  /* 82130034h */ case   15:  		/* lwz R11, <#[R11]> */
		/* 82130034h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82130034h case   15:*/		return 0x82130038;
		  /* 82130038h */ case   16:  		/* rlwinm R9, R11, 0, 12, 31 */
		/* 82130038h case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R11);
		/* 82130038h case   16:*/		return 0x8213003C;
		  /* 8213003Ch */ case   17:  		/* lwz R11, <#[R8]> */
		/* 8213003Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8213003Ch case   17:*/		return 0x82130040;
		  /* 82130040h */ case   18:  		/* lwz R8, <#[R7]> */
		/* 82130040h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 82130040h case   18:*/		return 0x82130044;
		  /* 82130044h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130044h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130044h case   19:*/		return 0x82130048;
		  /* 82130048h */ case   20:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82130048h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82130048h case   20:*/		return 0x8213004C;
		  /* 8213004Ch */ case   21:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213004Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213004Ch case   21:*/		return 0x82130050;
		  /* 82130050h */ case   22:  		/* lwzx R10, <#[R8 + R10]> */
		/* 82130050h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82130050h case   22:*/		return 0x82130054;
		  /* 82130054h */ case   23:  		/* lwz R8, <#[R11 + 60]> */
		/* 82130054h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000003C) );
		/* 82130054h case   23:*/		return 0x82130058;
		  /* 82130058h */ case   24:  		/* cmplwi CR6, R8, 0 */
		/* 82130058h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82130058h case   24:*/		return 0x8213005C;
		  /* 8213005Ch */ case   25:  		/* bc 4, CR6_EQ, 244 */
		/* 8213005Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x82130150;  }
		/* 8213005Ch case   25:*/		return 0x82130060;
		  /* 82130060h */ case   26:  		/* lwz R8, <#[R10 + 60]> */
		/* 82130060h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000003C) );
		/* 82130060h case   26:*/		return 0x82130064;
		  /* 82130064h */ case   27:  		/* rlwinm. R8, R8, 0, 22, 22 */
		/* 82130064h case   27:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R8,regs.R8);
		/* 82130064h case   27:*/		return 0x82130068;
		  /* 82130068h */ case   28:  		/* bc 12, CR0_EQ, 232 */
		/* 82130068h case   28:*/		if ( regs.CR[0].eq ) { return 0x82130150;  }
		/* 82130068h case   28:*/		return 0x8213006C;
		  /* 8213006Ch */ case   29:  		/* lbz R11, <#[R11 + 111]> */
		/* 8213006Ch case   29:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006F) );
		/* 8213006Ch case   29:*/		return 0x82130070;
		  /* 82130070h */ case   30:  		/* cmplwi CR6, R11, 3 */
		/* 82130070h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82130070h case   30:*/		return 0x82130074;
		  /* 82130074h */ case   31:  		/* bc 4, CR6_EQ, 220 */
		/* 82130074h case   31:*/		if ( !regs.CR[6].eq ) { return 0x82130150;  }
		/* 82130074h case   31:*/		return 0x82130078;
		  /* 82130078h */ case   32:  		/* lwz R11, <#[R10 + 4]> */
		/* 82130078h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82130078h case   32:*/		return 0x8213007C;
		  /* 8213007Ch */ case   33:  		/* lwz R10, <#[R3 + 136]> */
		/* 8213007Ch case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000088) );
		/* 8213007Ch case   33:*/		return 0x82130080;
	}
	return 0x82130080;
} // Block from 8212FFF8h-82130080h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82130080h
// Function '?ViolatesPortConstraints@CPSProgram@D3DXShader@@MAAHPAVCInstruction@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130080);
		  /* 82130080h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 82130080h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82130080h case    0:*/		return 0x82130084;
		  /* 82130084h */ case    1:  		/* bc 4, CR6_EQ, 204 */
		/* 82130084h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82130150;  }
		/* 82130084h case    1:*/		return 0x82130088;
		  /* 82130088h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 82130088h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82130088h case    2:*/		return 0x8213008C;
		  /* 8213008Ch */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 8213008Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82130144;  }
		/* 8213008Ch case    3:*/		return 0x82130090;
		  /* 82130090h */ case    4:  		/* mtspr CTR, R9 */
		/* 82130090h case    4:*/		regs.CTR = regs.R9;
		/* 82130090h case    4:*/		return 0x82130094;
		  /* 82130094h */ case    5:  		/* li R7, 0 */
		/* 82130094h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82130094h case    5:*/		return 0x82130098;
		  /* 82130098h */ case    6:  		/* lwz R11, <#[R3 + 260]> */
		/* 82130098h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82130098h case    6:*/		return 0x8213009C;
		  /* 8213009Ch */ case    7:  		/* lwz R10, <#[R3 + 20]> */
		/* 8213009Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8213009Ch case    7:*/		return 0x821300A0;
		  /* 821300A0h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821300A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821300A0h case    8:*/		return 0x821300A4;
		  /* 821300A4h */ case    9:  		/* lwzx R11, <#[R11 + R7]> */
		/* 821300A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821300A4h case    9:*/		return 0x821300A8;
		  /* 821300A8h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821300A8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821300A8h case   10:*/		return 0x821300AC;
		  /* 821300ACh */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821300ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821300ACh case   11:*/		return 0x821300B0;
		  /* 821300B0h */ case   12:  		/* lwz R10, <#[R11 + 60]> */
		/* 821300B0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821300B0h case   12:*/		return 0x821300B4;
		  /* 821300B4h */ case   13:  		/* ori R10, R10, 512 */
		/* 821300B4h case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x200);
		/* 821300B4h case   13:*/		return 0x821300B8;
		  /* 821300B8h */ case   14:  		/* stw R10, <#[R11 + 60]> */
		/* 821300B8h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821300B8h case   14:*/		return 0x821300BC;
		  /* 821300BCh */ case   15:  		/* lwz R4, <#[R3 + 256]> */
		/* 821300BCh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000100) );
		/* 821300BCh case   15:*/		return 0x821300C0;
		  /* 821300C0h */ case   16:  		/* lwz R11, <#[R3 + 12]> */
		/* 821300C0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821300C0h case   16:*/		return 0x821300C4;
		  /* 821300C4h */ case   17:  		/* cmplw CR6, R4, R11 */
		/* 821300C4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821300C4h case   17:*/		return 0x821300C8;
		  /* 821300C8h */ case   18:  		/* bc 4, CR6_LT, 116 */
		/* 821300C8h case   18:*/		if ( !regs.CR[6].lt ) { return 0x8213013C;  }
		/* 821300C8h case   18:*/		return 0x821300CC;
		  /* 821300CCh */ case   19:  		/* rlwinm R5, R4, 2, 0, 29 */
		/* 821300CCh case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R4);
		/* 821300CCh case   19:*/		return 0x821300D0;
		  /* 821300D0h */ case   20:  		/* lwz R11, <#[R3 + 24]> */
		/* 821300D0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821300D0h case   20:*/		return 0x821300D4;
		  /* 821300D4h */ case   21:  		/* li R6, 0 */
		/* 821300D4h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821300D4h case   21:*/		return 0x821300D8;
		  /* 821300D8h */ case   22:  		/* lwzx R8, <#[R5 + R11]> */
		/* 821300D8h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 821300D8h case   22:*/		return 0x821300DC;
		  /* 821300DCh */ case   23:  		/* lwz R11, <#[R8 + 4]> */
		/* 821300DCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821300DCh case   23:*/		return 0x821300E0;
		  /* 821300E0h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 821300E0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821300E0h case   24:*/		return 0x821300E4;
		  /* 821300E4h */ case   25:  		/* bc 4, CR6_GT, 68 */
		/* 821300E4h case   25:*/		if ( !regs.CR[6].gt ) { return 0x82130128;  }
		/* 821300E4h case   25:*/		return 0x821300E8;
		  /* 821300E8h */ case   26:  		/* li R11, 0 */
		/* 821300E8h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821300E8h case   26:*/		return 0x821300EC;
		  /* 821300ECh */ case   27:  		/* lwz R10, <#[R3 + 260]> */
		/* 821300ECh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 821300ECh case   27:*/		return 0x821300F0;
		  /* 821300F0h */ case   28:  		/* lwz R9, <#[R8 + 8]> */
		/* 821300F0h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000008) );
		/* 821300F0h case   28:*/		return 0x821300F4;
		  /* 821300F4h */ case   29:  		/* lwz R31, <#[R10 + 16]> */
		/* 821300F4h case   29:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000010) );
		/* 821300F4h case   29:*/		return 0x821300F8;
		  /* 821300F8h */ case   30:  		/* lwzx R30, <#[R9 + R11]> */
		/* 821300F8h case   30:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821300F8h case   30:*/		return 0x821300FC;
		  /* 821300FCh */ case   31:  		/* lwzx R31, <#[R31 + R7]> */
		/* 821300FCh case   31:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R7 + 0x00000000) );
		/* 821300FCh case   31:*/		return 0x82130100;
		  /* 82130100h */ case   32:  		/* cmplw CR6, R30, R31 */
		/* 82130100h case   32:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 82130100h case   32:*/		return 0x82130104;
		  /* 82130104h */ case   33:  		/* bc 4, CR6_EQ, 16 */
		/* 82130104h case   33:*/		if ( !regs.CR[6].eq ) { return 0x82130114;  }
		/* 82130104h case   33:*/		return 0x82130108;
		  /* 82130108h */ case   34:  		/* lwz R10, <#[R10 + 8]> */
		/* 82130108h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82130108h case   34:*/		return 0x8213010C;
		  /* 8213010Ch */ case   35:  		/* lwzx R10, <#[R10 + R7]> */
		/* 8213010Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8213010Ch case   35:*/		return 0x82130110;
		  /* 82130110h */ case   36:  		/* stwx R10, <#[R9 + R11]> */
		/* 82130110h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82130110h case   36:*/		return 0x82130114;
	}
	return 0x82130114;
} // Block from 82130080h-82130114h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82130114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130114);
		  /* 82130114h */ case    0:  		/* lwz R10, <#[R8 + 4]> */
		/* 82130114h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 82130114h case    0:*/		return 0x82130118;
		  /* 82130118h */ case    1:  		/* addi R6, R6, 1 */
		/* 82130118h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82130118h case    1:*/		return 0x8213011C;
		  /* 8213011Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 8213011Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213011Ch case    2:*/		return 0x82130120;
		  /* 82130120h */ case    3:  		/* cmplw CR6, R6, R10 */
		/* 82130120h case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 82130120h case    3:*/		return 0x82130124;
		  /* 82130124h */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 82130124h case    4:*/		if ( regs.CR[6].lt ) { return 0x821300EC;  }
		/* 82130124h case    4:*/		return 0x82130128;
	}
	return 0x82130128;
} // Block from 82130114h-82130128h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130128);
		  /* 82130128h */ case    0:  		/* lwz R11, <#[R3 + 12]> */
		/* 82130128h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82130128h case    0:*/		return 0x8213012C;
		  /* 8213012Ch */ case    1:  		/* addi R4, R4, 1 */
		/* 8213012Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8213012Ch case    1:*/		return 0x82130130;
		  /* 82130130h */ case    2:  		/* addi R5, R5, 4 */
		/* 82130130h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 82130130h case    2:*/		return 0x82130134;
		  /* 82130134h */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 82130134h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82130134h case    3:*/		return 0x82130138;
		  /* 82130138h */ case    4:  		/* bc 12, CR6_LT, -104 */
		/* 82130138h case    4:*/		if ( regs.CR[6].lt ) { return 0x821300D0;  }
		/* 82130138h case    4:*/		return 0x8213013C;
	}
	return 0x8213013C;
} // Block from 82130128h-8213013Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213013Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213013C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213013C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213013C);
		  /* 8213013Ch */ case    0:  		/* addi R7, R7, 4 */
		/* 8213013Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8213013Ch case    0:*/		return 0x82130140;
		  /* 82130140h */ case    1:  		/* bc 16, CR0_LT, -168 */
		/* 82130140h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130098;  }
		/* 82130140h case    1:*/		return 0x82130144;
	}
	return 0x82130144;
} // Block from 8213013Ch-82130144h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82130144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130144);
		  /* 82130144h */ case    0:  		/* lwz R11, <#[R3 + 260]> */
		/* 82130144h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82130144h case    0:*/		return 0x82130148;
		  /* 82130148h */ case    1:  		/* li R10, 0 */
		/* 82130148h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82130148h case    1:*/		return 0x8213014C;
		  /* 8213014Ch */ case    2:  		/* stw R10, <#[R11]> */
		/* 8213014Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213014Ch case    2:*/		return 0x82130150;
	}
	return 0x82130150;
} // Block from 82130144h-82130150h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82130150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130150);
		  /* 82130150h */ case    0:  		/* li R3, 0 */
		/* 82130150h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82130150h case    0:*/		return 0x82130154;
		  /* 82130154h */ case    1:  		/* ld R30, <#[R1 - 16]> */
		/* 82130154h case    1:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82130154h case    1:*/		return 0x82130158;
		  /* 82130158h */ case    2:  		/* ld R31, <#[R1 - 8]> */
		/* 82130158h case    2:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82130158h case    2:*/		return 0x8213015C;
		  /* 8213015Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8213015Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213015Ch case    3:*/		return 0x82130160;
	}
	return 0x82130160;
} // Block from 82130150h-82130160h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82130160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130160);
		  /* 82130160h */ case    0:  		/* mfspr R12, LR */
		/* 82130160h case    0:*/		regs.R12 = regs.LR;
		/* 82130160h case    0:*/		return 0x82130164;
		  /* 82130164h */ case    1:  		/* bl -651024 */
		/* 82130164h case    1:*/		regs.LR = 0x82130168; return 0x82091254;
		/* 82130164h case    1:*/		return 0x82130168;
		  /* 82130168h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82130168h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82130168h case    2:*/		return 0x8213016C;
		  /* 8213016Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 8213016Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8213016Ch case    3:*/		return 0x82130170;
		  /* 82130170h */ case    4:  		/* lis R10, 4112 */
		/* 82130170h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 82130170h case    4:*/		return 0x82130174;
		  /* 82130174h */ case    5:  		/* mr R29, R3 */
		/* 82130174h case    5:*/		regs.R29 = regs.R3;
		/* 82130174h case    5:*/		return 0x82130178;
		  /* 82130178h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 82130178h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82130178h case    6:*/		return 0x8213017C;
		  /* 8213017Ch */ case    7:  		/* rlwinm R9, R9, 0, 0, 11 */
		/* 8213017Ch case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R9);
		/* 8213017Ch case    7:*/		return 0x82130180;
		  /* 82130180h */ case    8:  		/* cmplw CR6, R9, R10 */
		/* 82130180h case    8:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82130180h case    8:*/		return 0x82130184;
		  /* 82130184h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 82130184h case    9:*/		if ( regs.CR[6].eq ) { return 0x82130190;  }
		/* 82130184h case    9:*/		return 0x82130188;
		  /* 82130188h */ case   10:  		/* li R3, 0 */
		/* 82130188h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82130188h case   10:*/		return 0x8213018C;
		  /* 8213018Ch */ case   11:  		/* b 548 */
		/* 8213018Ch case   11:*/		return 0x821303B0;
		/* 8213018Ch case   11:*/		return 0x82130190;
	}
	return 0x82130190;
} // Block from 82130160h-82130190h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82130190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130190);
		  /* 82130190h */ case    0:  		/* lwz R10, <#[R29 + 260]> */
		/* 82130190h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000104) );
		/* 82130190h case    0:*/		return 0x82130194;
		  /* 82130194h */ case    1:  		/* li R6, 0 */
		/* 82130194h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82130194h case    1:*/		return 0x82130198;
		  /* 82130198h */ case    2:  		/* lwz R9, <#[R29 + 20]> */
		/* 82130198h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000014) );
		/* 82130198h case    2:*/		return 0x8213019C;
		  /* 8213019Ch */ case    3:  		/* lwz R8, <#[R29 + 16]> */
		/* 8213019Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000010) );
		/* 8213019Ch case    3:*/		return 0x821301A0;
		  /* 821301A0h */ case    4:  		/* lwz R7, <#[R10 + 8]> */
		/* 821301A0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821301A0h case    4:*/		return 0x821301A4;
		  /* 821301A4h */ case    5:  		/* lwz R10, <#[R10]> */
		/* 821301A4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821301A4h case    5:*/		return 0x821301A8;
		  /* 821301A8h */ case    6:  		/* rlwinm R27, R10, 0, 12, 31 */
		/* 821301A8h case    6:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R27,regs.R10);
		/* 821301A8h case    6:*/		return 0x821301AC;
		  /* 821301ACh */ case    7:  		/* lwz R10, <#[R7]> */
		/* 821301ACh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821301ACh case    7:*/		return 0x821301B0;
		  /* 821301B0h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821301B0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821301B0h case    8:*/		return 0x821301B4;
		  /* 821301B4h */ case    9:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821301B4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821301B4h case    9:*/		return 0x821301B8;
		  /* 821301B8h */ case   10:  		/* lwz R10, <#[R10 + 4]> */
		/* 821301B8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821301B8h case   10:*/		return 0x821301BC;
		  /* 821301BCh */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821301BCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821301BCh case   11:*/		return 0x821301C0;
		  /* 821301C0h */ case   12:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821301C0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821301C0h case   12:*/		return 0x821301C4;
		  /* 821301C4h */ case   13:  		/* lwz R10, <#[R10 + 4]> */
		/* 821301C4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821301C4h case   13:*/		return 0x821301C8;
		  /* 821301C8h */ case   14:  		/* rlwinm. R10, R10, 0, 22, 22 */
		/* 821301C8h case   14:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R10);
		/* 821301C8h case   14:*/		return 0x821301CC;
		  /* 821301CCh */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 821301CCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821301D4;  }
		/* 821301CCh case   15:*/		return 0x821301D0;
		  /* 821301D0h */ case   16:  		/* li R6, 1 */
		/* 821301D0h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821301D0h case   16:*/		return 0x821301D4;
	}
	return 0x821301D4;
} // Block from 82130190h-821301D4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821301D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821301D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821301D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821301D4);
		  /* 821301D4h */ case    0:  		/* lwz R10, <#[R29 + 108]> */
		/* 821301D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000006C) );
		/* 821301D4h case    0:*/		return 0x821301D8;
		  /* 821301D8h */ case    1:  		/* rlwinm. R10, R10, 0, 18, 18 */
		/* 821301D8h case    1:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R10,regs.R10);
		/* 821301D8h case    1:*/		return 0x821301DC;
		  /* 821301DCh */ case    2:  		/* bc 12, CR0_EQ, 96 */
		/* 821301DCh case    2:*/		if ( regs.CR[0].eq ) { return 0x8213023C;  }
		/* 821301DCh case    2:*/		return 0x821301E0;
		  /* 821301E0h */ case    3:  		/* cmplwi CR6, R27, 0 */
		/* 821301E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821301E0h case    3:*/		return 0x821301E4;
		  /* 821301E4h */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 821301E4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213023C;  }
		/* 821301E4h case    4:*/		return 0x821301E8;
		  /* 821301E8h */ case    5:  		/* lwz R7, <#[R11 + 8]> */
		/* 821301E8h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821301E8h case    5:*/		return 0x821301EC;
		  /* 821301ECh */ case    6:  		/* li R8, 0 */
		/* 821301ECh case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821301ECh case    6:*/		return 0x821301F0;
		  /* 821301F0h */ case    7:  		/* mtspr CTR, R27 */
		/* 821301F0h case    7:*/		regs.CTR = regs.R27;
		/* 821301F0h case    7:*/		return 0x821301F4;
		  /* 821301F4h */ case    8:  		/* lwzx R11, <#[R8 + R7]> */
		/* 821301F4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 821301F4h case    8:*/		return 0x821301F8;
		  /* 821301F8h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821301F8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821301F8h case    9:*/		return 0x821301FC;
		  /* 821301FCh */ case   10:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821301FCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821301FCh case   10:*/		return 0x82130200;
		  /* 82130200h */ case   11:  		/* lwz R10, <#[R11 + 60]> */
		/* 82130200h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 82130200h case   11:*/		return 0x82130204;
		  /* 82130204h */ case   12:  		/* rlwinm. R10, R10, 0, 22, 22 */
		/* 82130204h case   12:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R10);
		/* 82130204h case   12:*/		return 0x82130208;
		  /* 82130208h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 82130208h case   13:*/		if ( regs.CR[0].eq ) { return 0x82130210;  }
		/* 82130208h case   13:*/		return 0x8213020C;
		  /* 8213020Ch */ case   14:  		/* li R6, 1 */
		/* 8213020Ch case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8213020Ch case   14:*/		return 0x82130210;
	}
	return 0x82130210;
} // Block from 821301D4h-82130210h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82130210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130210);
		  /* 82130210h */ case    0:  		/* lwz R10, <#[R11 + 56]> */
		/* 82130210h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 82130210h case    0:*/		return 0x82130214;
		  /* 82130214h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 82130214h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82130214h case    1:*/		return 0x82130218;
		  /* 82130218h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82130218h case    2:*/		if ( regs.CR[6].eq ) { return 0x82130224;  }
		/* 82130218h case    2:*/		return 0x8213021C;
		  /* 8213021Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8213021Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8213021Ch case    3:*/		return 0x82130220;
		  /* 82130220h */ case    4:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82130220h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130220h case    4:*/		return 0x82130224;
	}
	return 0x82130224;
} // Block from 82130210h-82130224h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130224);
		  /* 82130224h */ case    0:  		/* lwz R11, <#[R11 + 60]> */
		/* 82130224h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 82130224h case    0:*/		return 0x82130228;
		  /* 82130228h */ case    1:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 82130228h case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 82130228h case    1:*/		return 0x8213022C;
		  /* 8213022Ch */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 8213022Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82130234;  }
		/* 8213022Ch case    2:*/		return 0x82130230;
		  /* 82130230h */ case    3:  		/* li R6, 1 */
		/* 82130230h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82130230h case    3:*/		return 0x82130234;
	}
	return 0x82130234;
} // Block from 82130224h-82130234h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82130234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130234);
		  /* 82130234h */ case    0:  		/* addi R8, R8, 4 */
		/* 82130234h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82130234h case    0:*/		return 0x82130238;
		  /* 82130238h */ case    1:  		/* bc 16, CR0_LT, -68 */
		/* 82130238h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821301F4;  }
		/* 82130238h case    1:*/		return 0x8213023C;
	}
	return 0x8213023C;
} // Block from 82130234h-8213023Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213023Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213023C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213023C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213023C);
		  /* 8213023Ch */ case    0:  		/* cmpwi CR6, R6, 0 */
		/* 8213023Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 8213023Ch case    0:*/		return 0x82130240;
		  /* 82130240h */ case    1:  		/* bc 12, CR6_EQ, -184 */
		/* 82130240h case    1:*/		if ( regs.CR[6].eq ) { return 0x82130188;  }
		/* 82130240h case    1:*/		return 0x82130244;
		  /* 82130244h */ case    2:  		/* li R3, 116 */
		/* 82130244h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82130244h case    2:*/		return 0x82130248;
		  /* 82130248h */ case    3:  		/* bl -212144 */
		/* 82130248h case    3:*/		regs.LR = 0x8213024C; return 0x820FC598;
		/* 82130248h case    3:*/		return 0x8213024C;
		  /* 8213024Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8213024Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213024Ch case    4:*/		return 0x82130250;
		  /* 82130250h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82130250h case    5:*/		if ( regs.CR[0].eq ) { return 0x82130260;  }
		/* 82130250h case    5:*/		return 0x82130254;
		  /* 82130254h */ case    6:  		/* bl -213940 */
		/* 82130254h case    6:*/		regs.LR = 0x82130258; return 0x820FBEA0;
		/* 82130254h case    6:*/		return 0x82130258;
		  /* 82130258h */ case    7:  		/* mr R31, R3 */
		/* 82130258h case    7:*/		regs.R31 = regs.R3;
		/* 82130258h case    7:*/		return 0x8213025C;
		  /* 8213025Ch */ case    8:  		/* b 8 */
		/* 8213025Ch case    8:*/		return 0x82130264;
		/* 8213025Ch case    8:*/		return 0x82130260;
	}
	return 0x82130260;
} // Block from 8213023Ch-82130260h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82130260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130260);
		  /* 82130260h */ case    0:  		/* li R31, 0 */
		/* 82130260h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82130260h case    0:*/		return 0x82130264;
	}
	return 0x82130264;
} // Block from 82130260h-82130264h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130264);
		  /* 82130264h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82130264h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82130264h case    0:*/		return 0x82130268;
		  /* 82130268h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82130268h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82130278;  }
		/* 82130268h case    1:*/		return 0x8213026C;
		  /* 8213026Ch */ case    2:  		/* lis R30, -32761 */
		/* 8213026Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 8213026Ch case    2:*/		return 0x82130270;
		  /* 82130270h */ case    3:  		/* ori R30, R30, 14 */
		/* 82130270h case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 82130270h case    3:*/		return 0x82130274;
		  /* 82130274h */ case    4:  		/* b 312 */
		/* 82130274h case    4:*/		return 0x821303AC;
		/* 82130274h case    4:*/		return 0x82130278;
	}
	return 0x82130278;
} // Block from 82130264h-82130278h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130278);
		  /* 82130278h */ case    0:  		/* li R11, 517 */
		/* 82130278h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x205);
		/* 82130278h case    0:*/		return 0x8213027C;
		  /* 8213027Ch */ case    1:  		/* mr R4, R27 */
		/* 8213027Ch case    1:*/		regs.R4 = regs.R27;
		/* 8213027Ch case    1:*/		return 0x82130280;
		  /* 82130280h */ case    2:  		/* li R7, 0 */
		/* 82130280h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82130280h case    2:*/		return 0x82130284;
		  /* 82130284h */ case    3:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 82130284h case    3:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 82130284h case    3:*/		return 0x82130288;
		  /* 82130288h */ case    4:  		/* mr R6, R27 */
		/* 82130288h case    4:*/		regs.R6 = regs.R27;
		/* 82130288h case    4:*/		return 0x8213028C;
		  /* 8213028Ch */ case    5:  		/* rlwinm R5, R27, 1, 0, 30 */
		/* 8213028Ch case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R27);
		/* 8213028Ch case    5:*/		return 0x82130290;
		  /* 82130290h */ case    6:  		/* mr R3, R31 */
		/* 82130290h case    6:*/		regs.R3 = regs.R31;
		/* 82130290h case    6:*/		return 0x82130294;
		  /* 82130294h */ case    7:  		/* bl -212068 */
		/* 82130294h case    7:*/		regs.LR = 0x82130298; return 0x820FC630;
		/* 82130294h case    7:*/		return 0x82130298;
		  /* 82130298h */ case    8:  		/* or. R30, R3, R3 */
		/* 82130298h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82130298h case    8:*/		return 0x8213029C;
		  /* 8213029Ch */ case    9:  		/* bc 12, CR0_LT, 248 */
		/* 8213029Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x82130394;  }
		/* 8213029Ch case    9:*/		return 0x821302A0;
		  /* 821302A0h */ case   10:  		/* mr R3, R31 */
		/* 821302A0h case   10:*/		regs.R3 = regs.R31;
		/* 821302A0h case   10:*/		return 0x821302A4;
		  /* 821302A4h */ case   11:  		/* lwz R4, <#[R29 + 260]> */
		/* 821302A4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000104) );
		/* 821302A4h case   11:*/		return 0x821302A8;
		  /* 821302A8h */ case   12:  		/* bl -213944 */
		/* 821302A8h case   12:*/		regs.LR = 0x821302AC; return 0x820FBEF0;
		/* 821302A8h case   12:*/		return 0x821302AC;
		  /* 821302ACh */ case   13:  		/* or. R30, R3, R3 */
		/* 821302ACh case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821302ACh case   13:*/		return 0x821302B0;
		  /* 821302B0h */ case   14:  		/* bc 12, CR0_LT, 228 */
		/* 821302B0h case   14:*/		if ( regs.CR[0].lt ) { return 0x82130394;  }
		/* 821302B0h case   14:*/		return 0x821302B4;
		  /* 821302B4h */ case   15:  		/* lis R11, -32255 */
		/* 821302B4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821302B4h case   15:*/		return 0x821302B8;
		  /* 821302B8h */ case   16:  		/* li R7, 4 */
		/* 821302B8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 821302B8h case   16:*/		return 0x821302BC;
		  /* 821302BCh */ case   17:  		/* addi R4, R11, -8736 */
		/* 821302BCh case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDDE0);
		/* 821302BCh case   17:*/		return 0x821302C0;
		  /* 821302C0h */ case   18:  		/* li R6, 1 */
		/* 821302C0h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821302C0h case   18:*/		return 0x821302C4;
		  /* 821302C4h */ case   19:  		/* li R5, 785 */
		/* 821302C4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x311);
		/* 821302C4h case   19:*/		return 0x821302C8;
	}
	return 0x821302C8;
} // Block from 82130278h-821302C8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821302C8h
// Function '?IsTextureInst@D3DXShader@@YAHI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821302C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821302C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821302C8);
		  /* 821302C8h */ case    0:  		/* mr R3, R29 */
		/* 821302C8h case    0:*/		regs.R3 = regs.R29;
		/* 821302C8h case    0:*/		return 0x821302CC;
		  /* 821302CCh */ case    1:  		/* bl -209220 */
		/* 821302CCh case    1:*/		regs.LR = 0x821302D0; return 0x820FD188;
		/* 821302CCh case    1:*/		return 0x821302D0;
		  /* 821302D0h */ case    2:  		/* mr R4, R3 */
		/* 821302D0h case    2:*/		regs.R4 = regs.R3;
		/* 821302D0h case    2:*/		return 0x821302D4;
		  /* 821302D4h */ case    3:  		/* cmpwi CR6, R3, -1 */
		/* 821302D4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821302D4h case    3:*/		return 0x821302D8;
		  /* 821302D8h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 821302D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x82130300;  }
		/* 821302D8h case    4:*/		return 0x821302DC;
		  /* 821302DCh */ case    5:  		/* lis R11, -32255 */
		/* 821302DCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821302DCh case    5:*/		return 0x821302E0;
		  /* 821302E0h */ case    6:  		/* li R6, 0 */
		/* 821302E0h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821302E0h case    6:*/		return 0x821302E4;
		  /* 821302E4h */ case    7:  		/* li R5, 0 */
		/* 821302E4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821302E4h case    7:*/		return 0x821302E8;
		  /* 821302E8h */ case    8:  		/* mr R3, R29 */
		/* 821302E8h case    8:*/		regs.R3 = regs.R29;
		/* 821302E8h case    8:*/		return 0x821302EC;
		  /* 821302ECh */ case    9:  		/* lfd FR1, <#[R11 - 24488]> */
		/* 821302ECh case    9:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA058) );
		/* 821302ECh case    9:*/		return 0x821302F0;
		  /* 821302F0h */ case   10:  		/* bl -209096 */
		/* 821302F0h case   10:*/		regs.LR = 0x821302F4; return 0x820FD228;
		/* 821302F0h case   10:*/		return 0x821302F4;
		  /* 821302F4h */ case   11:  		/* mr R28, R3 */
		/* 821302F4h case   11:*/		regs.R28 = regs.R3;
		/* 821302F4h case   11:*/		return 0x821302F8;
		  /* 821302F8h */ case   12:  		/* cmpwi CR6, R3, -1 */
		/* 821302F8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821302F8h case   12:*/		return 0x821302FC;
		  /* 821302FCh */ case   13:  		/* bc 4, CR6_EQ, 16 */
		/* 821302FCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x8213030C;  }
		/* 821302FCh case   13:*/		return 0x82130300;
	}
	return 0x82130300;
} // Block from 821302C8h-82130300h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82130300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130300);
		  /* 82130300h */ case    0:  		/* lis R30, -32761 */
		/* 82130300h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 82130300h case    0:*/		return 0x82130304;
		  /* 82130304h */ case    1:  		/* ori R30, R30, 14 */
		/* 82130304h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 82130304h case    1:*/		return 0x82130308;
		  /* 82130308h */ case    2:  		/* b 140 */
		/* 82130308h case    2:*/		return 0x82130394;
		/* 82130308h case    2:*/		return 0x8213030C;
	}
	return 0x8213030C;
} // Block from 82130300h-8213030Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213030Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213030C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213030C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213030C);
		  /* 8213030Ch */ case    0:  		/* lwz R11, <#[R29 + 260]> */
		/* 8213030Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 8213030Ch case    0:*/		return 0x82130310;
		  /* 82130310h */ case    1:  		/* rlwinm R30, R27, 2, 0, 29 */
		/* 82130310h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R27);
		/* 82130310h case    1:*/		return 0x82130314;
		  /* 82130314h */ case    2:  		/* lwz R3, <#[R31 + 8]> */
		/* 82130314h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82130314h case    2:*/		return 0x82130318;
		  /* 82130318h */ case    3:  		/* mr R5, R30 */
		/* 82130318h case    3:*/		regs.R5 = regs.R30;
		/* 82130318h case    3:*/		return 0x8213031C;
		  /* 8213031Ch */ case    4:  		/* lwz R4, <#[R11 + 8]> */
		/* 8213031Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 8213031Ch case    4:*/		return 0x82130320;
	}
	return 0x82130320;
} // Block from 8213030Ch-82130320h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130320h
// Function '??0CPSLegacyProgram@D3DXShader@@QAA@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130320);
		  /* 82130320h */ case    0:  		/* bl -649584 */
		/* 82130320h case    0:*/		regs.LR = 0x82130324; return 0x820919B0;
		/* 82130320h case    0:*/		return 0x82130324;
		  /* 82130324h */ case    1:  		/* lwz R11, <#[R29 + 260]> */
		/* 82130324h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 82130324h case    1:*/		return 0x82130328;
		  /* 82130328h */ case    2:  		/* mr R5, R30 */
		/* 82130328h case    2:*/		regs.R5 = regs.R30;
		/* 82130328h case    2:*/		return 0x8213032C;
		  /* 8213032Ch */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8213032Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8213032Ch case    3:*/		return 0x82130330;
		  /* 82130330h */ case    4:  		/* lwz R4, <#[R11 + 16]> */
		/* 82130330h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 82130330h case    4:*/		return 0x82130334;
		  /* 82130334h */ case    5:  		/* bl -649604 */
		/* 82130334h case    5:*/		regs.LR = 0x82130338; return 0x820919B0;
		/* 82130334h case    5:*/		return 0x82130338;
		  /* 82130338h */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 82130338h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82130338h case    6:*/		return 0x8213033C;
		  /* 8213033Ch */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 8213033Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82130354;  }
		/* 8213033Ch case    7:*/		return 0x82130340;
		  /* 82130340h */ case    8:  		/* mtspr CTR, R27 */
		/* 82130340h case    8:*/		regs.CTR = regs.R27;
		/* 82130340h case    8:*/		return 0x82130344;
		  /* 82130344h */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 82130344h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82130344h case    9:*/		return 0x82130348;
		  /* 82130348h */ case   10:  		/* stwx R28, <#[R30 + R11]> */
		/* 82130348h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82130348h case   10:*/		return 0x8213034C;
		  /* 8213034Ch */ case   11:  		/* addi R30, R30, 4 */
		/* 8213034Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213034Ch case   11:*/		return 0x82130350;
		  /* 82130350h */ case   12:  		/* bc 16, CR0_LT, -12 */
		/* 82130350h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130344;  }
		/* 82130350h case   12:*/		return 0x82130354;
	}
	return 0x82130354;
} // Block from 82130320h-82130354h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82130354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130354);
		  /* 82130354h */ case    0:  		/* lwz R11, <#[R29 + 256]> */
		/* 82130354h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000100) );
		/* 82130354h case    0:*/		return 0x82130358;
		  /* 82130358h */ case    1:  		/* lwz R10, <#[R29 + 24]> */
		/* 82130358h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000018) );
		/* 82130358h case    1:*/		return 0x8213035C;
		  /* 8213035Ch */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213035Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213035Ch case    2:*/		return 0x82130360;
		  /* 82130360h */ case    3:  		/* lwzx R30, <#[R11 + R10]> */
		/* 82130360h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82130360h case    3:*/		return 0x82130364;
		  /* 82130364h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82130364h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82130364h case    4:*/		return 0x82130368;
		  /* 82130368h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 82130368h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213037C;  }
		/* 82130368h case    5:*/		return 0x8213036C;
		  /* 8213036Ch */ case    6:  		/* mr R3, R30 */
		/* 8213036Ch case    6:*/		regs.R3 = regs.R30;
		/* 8213036Ch case    6:*/		return 0x82130370;
		  /* 82130370h */ case    7:  		/* bl 970832 */
		/* 82130370h case    7:*/		regs.LR = 0x82130374; return 0x8221D3C0;
		/* 82130370h case    7:*/		return 0x82130374;
		  /* 82130374h */ case    8:  		/* mr R3, R30 */
		/* 82130374h case    8:*/		regs.R3 = regs.R30;
		/* 82130374h case    8:*/		return 0x82130378;
		  /* 82130378h */ case    9:  		/* bl -212360 */
		/* 82130378h case    9:*/		regs.LR = 0x8213037C; return 0x820FC5F0;
		/* 82130378h case    9:*/		return 0x8213037C;
	}
	return 0x8213037C;
} // Block from 82130354h-8213037Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213037Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213037C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213037C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213037C);
		  /* 8213037Ch */ case    0:  		/* lwz R11, <#[R29 + 256]> */
		/* 8213037Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000100) );
		/* 8213037Ch case    0:*/		return 0x82130380;
		  /* 82130380h */ case    1:  		/* li R30, 0 */
		/* 82130380h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82130380h case    1:*/		return 0x82130384;
		  /* 82130384h */ case    2:  		/* lwz R10, <#[R29 + 24]> */
		/* 82130384h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000018) );
		/* 82130384h case    2:*/		return 0x82130388;
		  /* 82130388h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130388h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130388h case    3:*/		return 0x8213038C;
		  /* 8213038Ch */ case    4:  		/* stwx R31, <#[R11 + R10]> */
		/* 8213038Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213038Ch case    4:*/		return 0x82130390;
		  /* 82130390h */ case    5:  		/* li R31, 0 */
		/* 82130390h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82130390h case    5:*/		return 0x82130394;
	}
	return 0x82130394;
} // Block from 8213037Ch-82130394h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82130394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130394);
		  /* 82130394h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82130394h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82130394h case    0:*/		return 0x82130398;
		  /* 82130398h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82130398h case    1:*/		if ( regs.CR[6].eq ) { return 0x821303AC;  }
		/* 82130398h case    1:*/		return 0x8213039C;
		  /* 8213039Ch */ case    2:  		/* mr R3, R31 */
		/* 8213039Ch case    2:*/		regs.R3 = regs.R31;
		/* 8213039Ch case    2:*/		return 0x821303A0;
	}
	return 0x821303A0;
} // Block from 82130394h-821303A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821303A0h
// Function '?InitCaps@CPSLegacyProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821303A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821303A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821303A0);
		  /* 821303A0h */ case    0:  		/* bl 970784 */
		/* 821303A0h case    0:*/		regs.LR = 0x821303A4; return 0x8221D3C0;
		/* 821303A0h case    0:*/		return 0x821303A4;
		  /* 821303A4h */ case    1:  		/* mr R3, R31 */
		/* 821303A4h case    1:*/		regs.R3 = regs.R31;
		/* 821303A4h case    1:*/		return 0x821303A8;
		  /* 821303A8h */ case    2:  		/* bl -212408 */
		/* 821303A8h case    2:*/		regs.LR = 0x821303AC; return 0x820FC5F0;
		/* 821303A8h case    2:*/		return 0x821303AC;
	}
	return 0x821303AC;
} // Block from 821303A0h-821303ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821303ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821303AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821303AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821303AC);
		  /* 821303ACh */ case    0:  		/* mr R3, R30 */
		/* 821303ACh case    0:*/		regs.R3 = regs.R30;
		/* 821303ACh case    0:*/		return 0x821303B0;
	}
	return 0x821303B0;
} // Block from 821303ACh-821303B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821303B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821303B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821303B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821303B0);
		  /* 821303B0h */ case    0:  		/* addi R1, R1, 128 */
		/* 821303B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821303B0h case    0:*/		return 0x821303B4;
		  /* 821303B4h */ case    1:  		/* b -651536 */
		/* 821303B4h case    1:*/		return 0x820912A4;
		/* 821303B4h case    1:*/		return 0x821303B8;
	}
	return 0x821303B8;
} // Block from 821303B0h-821303B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821303B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821303B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821303B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821303B8);
		  /* 821303B8h */ case    0:  		/* mfspr R12, LR */
		/* 821303B8h case    0:*/		regs.R12 = regs.LR;
		/* 821303B8h case    0:*/		return 0x821303BC;
		  /* 821303BCh */ case    1:  		/* bl -651644 */
		/* 821303BCh case    1:*/		regs.LR = 0x821303C0; return 0x82091240;
		/* 821303BCh case    1:*/		return 0x821303C0;
		  /* 821303C0h */ case    2:  		/* lwz R6, <#[R3 + 552]> */
		/* 821303C0h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000228) );
		/* 821303C0h case    2:*/		return 0x821303C4;
		  /* 821303C4h */ case    3:  		/* lwz R24, <#[R3 + 564]> */
		/* 821303C4h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x00000234) );
		/* 821303C4h case    3:*/		return 0x821303C8;
		  /* 821303C8h */ case    4:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 821303C8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 821303C8h case    4:*/		return 0x821303CC;
		  /* 821303CCh */ case    5:  		/* add R11, R11, R24 */
		/* 821303CCh case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821303CCh case    5:*/		return 0x821303D0;
		  /* 821303D0h */ case    6:  		/* lwz R23, <#[R11 - 4]> */
		/* 821303D0h case    6:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821303D0h case    6:*/		return 0x821303D4;
		  /* 821303D4h */ case    7:  		/* cmplwi CR6, R23, 0 */
		/* 821303D4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821303D4h case    7:*/		return 0x821303D8;
		  /* 821303D8h */ case    8:  		/* bc 12, CR6_EQ, 776 */
		/* 821303D8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821306E0;  }
		/* 821303D8h case    8:*/		return 0x821303DC;
		  /* 821303DCh */ case    9:  		/* lis R11, 4096 */
		/* 821303DCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0x1000);
		/* 821303DCh case    9:*/		return 0x821303E0;
		  /* 821303E0h */ case   10:  		/* lwz R10, <#[R23]> */
		/* 821303E0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821303E0h case   10:*/		return 0x821303E4;
		  /* 821303E4h */ case   11:  		/* ori R11, R11, 4 */
		/* 821303E4h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821303E4h case   11:*/		return 0x821303E8;
		  /* 821303E8h */ case   12:  		/* cmplw CR6, R10, R11 */
		/* 821303E8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821303E8h case   12:*/		return 0x821303EC;
		  /* 821303ECh */ case   13:  		/* bc 4, CR6_EQ, 756 */
		/* 821303ECh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821306E0;  }
		/* 821303ECh case   13:*/		return 0x821303F0;
		  /* 821303F0h */ case   14:  		/* li R26, 0 */
		/* 821303F0h case   14:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821303F0h case   14:*/		return 0x821303F4;
		  /* 821303F4h */ case   15:  		/* lwz R8, <#[R23 + 16]> */
		/* 821303F4h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x00000010) );
		/* 821303F4h case   15:*/		return 0x821303F8;
		  /* 821303F8h */ case   16:  		/* lwz R7, <#[R3 + 132]> */
		/* 821303F8h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000084) );
		/* 821303F8h case   16:*/		return 0x821303FC;
		  /* 821303FCh */ case   17:  		/* lwz R9, <#[R3 + 20]> */
		/* 821303FCh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 821303FCh case   17:*/		return 0x82130400;
		  /* 82130400h */ case   18:  		/* mr R11, R26 */
		/* 82130400h case   18:*/		regs.R11 = regs.R26;
		/* 82130400h case   18:*/		return 0x82130404;
		  /* 82130404h */ case   19:  		/* lwzx R10, <#[R11 + R8]> */
		/* 82130404h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82130404h case   19:*/		return 0x82130408;
		  /* 82130408h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82130408h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82130408h case   20:*/		return 0x8213040C;
		  /* 8213040Ch */ case   21:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8213040Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213040Ch case   21:*/		return 0x82130410;
		  /* 82130410h */ case   22:  		/* lwz R5, <#[R10 + 4]> */
		/* 82130410h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 82130410h case   22:*/		return 0x82130414;
		  /* 82130414h */ case   23:  		/* cmplw CR6, R5, R7 */
		/* 82130414h case   23:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R7);
		/* 82130414h case   23:*/		return 0x82130418;
		  /* 82130418h */ case   24:  		/* bc 4, CR6_EQ, 712 */
		/* 82130418h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821306E0;  }
		/* 82130418h case   24:*/		return 0x8213041C;
		  /* 8213041Ch */ case   25:  		/* lwz R10, <#[R10 + 60]> */
		/* 8213041Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 8213041Ch case   25:*/		return 0x82130420;
		  /* 82130420h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 82130420h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82130420h case   26:*/		return 0x82130424;
		  /* 82130424h */ case   27:  		/* bc 4, CR6_EQ, 700 */
		/* 82130424h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821306E0;  }
		/* 82130424h case   27:*/		return 0x82130428;
		  /* 82130428h */ case   28:  		/* lwz R10, <#[R23 + 8]> */
		/* 82130428h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 82130428h case   28:*/		return 0x8213042C;
		  /* 8213042Ch */ case   29:  		/* lwzx R5, <#[R11 + R10]> */
		/* 8213042Ch case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213042Ch case   29:*/		return 0x82130430;
		  /* 82130430h */ case   30:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 82130430h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 82130430h case   30:*/		return 0x82130434;
		  /* 82130434h */ case   31:  		/* lwzx R5, <#[R5 + R9]> */
		/* 82130434h case   31:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 82130434h case   31:*/		return 0x82130438;
		  /* 82130438h */ case   32:  		/* lwz R5, <#[R5 + 60]> */
		/* 82130438h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000003C) );
		/* 82130438h case   32:*/		return 0x8213043C;
		  /* 8213043Ch */ case   33:  		/* rlwinm. R5, R5, 0, 11, 15 */
		/* 8213043Ch case   33:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R5,regs.R5);
		/* 8213043Ch case   33:*/		return 0x82130440;
		  /* 82130440h */ case   34:  		/* bc 4, CR0_EQ, 672 */
		/* 82130440h case   34:*/		if ( !regs.CR[0].eq ) { return 0x821306E0;  }
		/* 82130440h case   34:*/		return 0x82130444;
		  /* 82130444h */ case   35:  		/* addi R11, R11, 4 */
		/* 82130444h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82130444h case   35:*/		return 0x82130448;
		  /* 82130448h */ case   36:  		/* cmplwi CR6, R11, 16 */
		/* 82130448h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 82130448h case   36:*/		return 0x8213044C;
		  /* 8213044Ch */ case   37:  		/* bc 12, CR6_LT, -72 */
		/* 8213044Ch case   37:*/		if ( regs.CR[6].lt ) { return 0x82130404;  }
		/* 8213044Ch case   37:*/		return 0x82130450;
		  /* 82130450h */ case   38:  		/* lhz R25, <#[R3 + 202]> */
		/* 82130450h case   38:*/		cpu::mem::load16z( regs, &regs.R25, (uint32)(regs.R3 + 0x000000CA) );
		/* 82130450h case   38:*/		return 0x82130454;
		  /* 82130454h */ case   39:  		/* li R28, 1 */
		/* 82130454h case   39:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82130454h case   39:*/		return 0x82130458;
		  /* 82130458h */ case   40:  		/* mr R27, R26 */
		/* 82130458h case   40:*/		regs.R27 = regs.R26;
		/* 82130458h case   40:*/		return 0x8213045C;
		  /* 8213045Ch */ case   41:  		/* addi R29, R6, -1 */
		/* 8213045Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R6,0xFFFFFFFF);
		/* 8213045Ch case   41:*/		return 0x82130460;
		  /* 82130460h */ case   42:  		/* mr R31, R26 */
		/* 82130460h case   42:*/		regs.R31 = regs.R26;
		/* 82130460h case   42:*/		return 0x82130464;
		  /* 82130464h */ case   43:  		/* mr R5, R26 */
		/* 82130464h case   43:*/		regs.R5 = regs.R26;
		/* 82130464h case   43:*/		return 0x82130468;
		  /* 82130468h */ case   44:  		/* cmplwi CR6, R29, 0 */
		/* 82130468h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82130468h case   44:*/		return 0x8213046C;
		  /* 8213046Ch */ case   45:  		/* bc 12, CR6_EQ, 116 */
		/* 8213046Ch case   45:*/		if ( regs.CR[6].eq ) { return 0x821304E0;  }
		/* 8213046Ch case   45:*/		return 0x82130470;
		  /* 82130470h */ case   46:  		/* mr R4, R24 */
		/* 82130470h case   46:*/		regs.R4 = regs.R24;
		/* 82130470h case   46:*/		return 0x82130474;
		  /* 82130474h */ case   47:  		/* lwz R11, <#[R4]> */
		/* 82130474h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82130474h case   47:*/		return 0x82130478;
		  /* 82130478h */ case   48:  		/* cmplwi CR6, R11, 0 */
		/* 82130478h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130478h case   48:*/		return 0x8213047C;
		  /* 8213047Ch */ case   49:  		/* bc 12, CR6_EQ, 84 */
		/* 8213047Ch case   49:*/		if ( regs.CR[6].eq ) { return 0x821304D0;  }
		/* 8213047Ch case   49:*/		return 0x82130480;
		  /* 82130480h */ case   50:  		/* lwz R9, <#[R11]> */
		/* 82130480h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82130480h case   50:*/		return 0x82130484;
		  /* 82130484h */ case   51:  		/* cmplwi CR6, R9, 0 */
		/* 82130484h case   51:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82130484h case   51:*/		return 0x82130488;
		  /* 82130488h */ case   52:  		/* bc 12, CR6_EQ, 72 */
		/* 82130488h case   52:*/		if ( regs.CR[6].eq ) { return 0x821304D0;  }
		/* 82130488h case   52:*/		return 0x8213048C;
		  /* 8213048Ch */ case   53:  		/* lwz R6, <#[R11 + 12]> */
		/* 8213048Ch case   53:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213048Ch case   53:*/		return 0x82130490;
		  /* 82130490h */ case   54:  		/* mr R7, R26 */
		/* 82130490h case   54:*/		regs.R7 = regs.R26;
		/* 82130490h case   54:*/		return 0x82130494;
		  /* 82130494h */ case   55:  		/* cmplwi CR6, R6, 0 */
		/* 82130494h case   55:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82130494h case   55:*/		return 0x82130498;
	}
	return 0x82130498;
} // Block from 821303B8h-82130498h (56 instructions)

//////////////////////////////////////////////////////
// Block at 82130498h
// Function '?ValidateTexSat@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130498);
		  /* 82130498h */ case    0:  		/* bc 12, CR6_EQ, 48 */
		/* 82130498h case    0:*/		if ( regs.CR[6].eq ) { return 0x821304C8;  }
		/* 82130498h case    0:*/		return 0x8213049C;
		  /* 8213049Ch */ case    1:  		/* lwz R9, <#[R11 + 16]> */
		/* 8213049Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8213049Ch case    1:*/		return 0x821304A0;
		  /* 821304A0h */ case    2:  		/* mr R11, R26 */
		/* 821304A0h case    2:*/		regs.R11 = regs.R26;
		/* 821304A0h case    2:*/		return 0x821304A4;
		  /* 821304A4h */ case    3:  		/* lwz R8, <#[R10]> */
		/* 821304A4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821304A4h case    3:*/		return 0x821304A8;
		  /* 821304A8h */ case    4:  		/* lwzx R30, <#[R11 + R9]> */
		/* 821304A8h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821304A8h case    4:*/		return 0x821304AC;
		  /* 821304ACh */ case    5:  		/* cmplw CR6, R30, R8 */
		/* 821304ACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R8);
		/* 821304ACh case    5:*/		return 0x821304B0;
		  /* 821304B0h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821304B0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821304B8;  }
		/* 821304B0h case    6:*/		return 0x821304B4;
		  /* 821304B4h */ case    7:  		/* li R31, 1 */
		/* 821304B4h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821304B4h case    7:*/		return 0x821304B8;
	}
	return 0x821304B8;
} // Block from 82130498h-821304B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821304B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821304B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821304B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821304B8);
		  /* 821304B8h */ case    0:  		/* addi R7, R7, 1 */
		/* 821304B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821304B8h case    0:*/		return 0x821304BC;
		  /* 821304BCh */ case    1:  		/* addi R11, R11, 4 */
		/* 821304BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821304BCh case    1:*/		return 0x821304C0;
		  /* 821304C0h */ case    2:  		/* cmplw CR6, R7, R6 */
		/* 821304C0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821304C0h case    2:*/		return 0x821304C4;
		  /* 821304C4h */ case    3:  		/* bc 12, CR6_LT, -28 */
		/* 821304C4h case    3:*/		if ( regs.CR[6].lt ) { return 0x821304A8;  }
		/* 821304C4h case    3:*/		return 0x821304C8;
	}
	return 0x821304C8;
} // Block from 821304B8h-821304C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821304C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821304C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821304C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821304C8);
		  /* 821304C8h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 821304C8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 821304C8h case    0:*/		return 0x821304CC;
		  /* 821304CCh */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821304CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821304E0;  }
		/* 821304CCh case    1:*/		return 0x821304D0;
	}
	return 0x821304D0;
} // Block from 821304C8h-821304D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821304D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821304D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821304D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821304D0);
		  /* 821304D0h */ case    0:  		/* addi R5, R5, 1 */
		/* 821304D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821304D0h case    0:*/		return 0x821304D4;
		  /* 821304D4h */ case    1:  		/* addi R4, R4, 4 */
		/* 821304D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 821304D4h case    1:*/		return 0x821304D8;
		  /* 821304D8h */ case    2:  		/* cmplw CR6, R5, R29 */
		/* 821304D8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R29);
		/* 821304D8h case    2:*/		return 0x821304DC;
		  /* 821304DCh */ case    3:  		/* bc 12, CR6_LT, -104 */
		/* 821304DCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82130474;  }
		/* 821304DCh case    3:*/		return 0x821304E0;
	}
	return 0x821304E0;
} // Block from 821304D0h-821304E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821304E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821304E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821304E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821304E0);
		  /* 821304E0h */ case    0:  		/* lwz R11, <#[R3 + 76]> */
		/* 821304E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 821304E0h case    0:*/		return 0x821304E4;
		  /* 821304E4h */ case    1:  		/* cmplwi CR6, R25, 260 */
		/* 821304E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000104);
		/* 821304E4h case    1:*/		return 0x821304E8;
		  /* 821304E8h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 821304E8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82130504;  }
		/* 821304E8h case    2:*/		return 0x821304EC;
		  /* 821304ECh */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 821304ECh case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821304ECh case    3:*/		return 0x821304F0;
		  /* 821304F0h */ case    4:  		/* bc 4, CR6_LT, 36 */
		/* 821304F0h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82130514;  }
		/* 821304F0h case    4:*/		return 0x821304F4;
		  /* 821304F4h */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 821304F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821304F4h case    5:*/		return 0x821304F8;
		  /* 821304F8h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 821304F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82130514;  }
		/* 821304F8h case    6:*/		return 0x821304FC;
		  /* 821304FCh */ case    7:  		/* mr R28, R26 */
		/* 821304FCh case    7:*/		regs.R28 = regs.R26;
		/* 821304FCh case    7:*/		return 0x82130500;
		  /* 82130500h */ case    8:  		/* b 20 */
		/* 82130500h case    8:*/		return 0x82130514;
		/* 82130500h case    8:*/		return 0x82130504;
	}
	return 0x82130504;
} // Block from 821304E0h-82130504h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82130504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130504);
		  /* 82130504h */ case    0:  		/* subfc R9, R11, R5 */
		/* 82130504h case    0:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R5);
		/* 82130504h case    0:*/		return 0x82130508;
		  /* 82130508h */ case    1:  		/* addze R8, R11 */
		/* 82130508h case    1:*/		cpu::op::addze<0>(regs,&regs.R8,regs.R11);
		/* 82130508h case    1:*/		return 0x8213050C;
		  /* 8213050Ch */ case    2:  		/* subf R11, R8, R11 */
		/* 8213050Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8213050Ch case    2:*/		return 0x82130510;
		  /* 82130510h */ case    3:  		/* and R28, R11, R28 */
		/* 82130510h case    3:*/		cpu::op::and<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 82130510h case    3:*/		return 0x82130514;
	}
	return 0x82130514;
} // Block from 82130504h-82130514h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82130514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130514);
		  /* 82130514h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82130514h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82130514h case    0:*/		return 0x82130518;
		  /* 82130518h */ case    1:  		/* bc 12, CR6_EQ, 456 */
		/* 82130518h case    1:*/		if ( regs.CR[6].eq ) { return 0x821306E0;  }
		/* 82130518h case    1:*/		return 0x8213051C;
		  /* 8213051Ch */ case    2:  		/* addi R11, R5, 1 */
		/* 8213051Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x1);
		/* 8213051Ch case    2:*/		return 0x82130520;
		  /* 82130520h */ case    3:  		/* cmplw CR6, R11, R29 */
		/* 82130520h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82130520h case    3:*/		return 0x82130524;
		  /* 82130524h */ case    4:  		/* bc 4, CR6_LT, 252 */
		/* 82130524h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82130620;  }
		/* 82130524h case    4:*/		return 0x82130528;
		  /* 82130528h */ case    5:  		/* subf R9, R11, R29 */
		/* 82130528h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R29);
		/* 82130528h case    5:*/		return 0x8213052C;
		  /* 8213052Ch */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213052Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213052Ch case    6:*/		return 0x82130530;
		  /* 82130530h */ case    7:  		/* add R30, R11, R24 */
		/* 82130530h case    7:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R24);
		/* 82130530h case    7:*/		return 0x82130534;
		  /* 82130534h */ case    8:  		/* mtspr CTR, R9 */
		/* 82130534h case    8:*/		regs.CTR = regs.R9;
		/* 82130534h case    8:*/		return 0x82130538;
		  /* 82130538h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 82130538h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82130538h case    9:*/		return 0x8213053C;
		  /* 8213053Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8213053Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213053Ch case   10:*/		return 0x82130540;
		  /* 82130540h */ case   11:  		/* bc 12, CR6_EQ, 216 */
		/* 82130540h case   11:*/		if ( regs.CR[6].eq ) { return 0x82130618;  }
		/* 82130540h case   11:*/		return 0x82130544;
		  /* 82130544h */ case   12:  		/* lwz R9, <#[R11]> */
		/* 82130544h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82130544h case   12:*/		return 0x82130548;
		  /* 82130548h */ case   13:  		/* cmplwi CR6, R9, 0 */
		/* 82130548h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82130548h case   13:*/		return 0x8213054C;
		  /* 8213054Ch */ case   14:  		/* bc 12, CR6_EQ, 204 */
		/* 8213054Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x82130618;  }
		/* 8213054Ch case   14:*/		return 0x82130550;
		  /* 82130550h */ case   15:  		/* lwz R31, <#[R11 + 12]> */
		/* 82130550h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 82130550h case   15:*/		return 0x82130554;
		  /* 82130554h */ case   16:  		/* mr R4, R26 */
		/* 82130554h case   16:*/		regs.R4 = regs.R26;
		/* 82130554h case   16:*/		return 0x82130558;
		  /* 82130558h */ case   17:  		/* cmplwi CR6, R31, 0 */
		/* 82130558h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82130558h case   17:*/		return 0x8213055C;
		  /* 8213055Ch */ case   18:  		/* bc 12, CR6_EQ, 88 */
		/* 8213055Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821305B4;  }
		/* 8213055Ch case   18:*/		return 0x82130560;
		  /* 82130560h */ case   19:  		/* lwz R7, <#[R11 + 16]> */
		/* 82130560h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82130560h case   19:*/		return 0x82130564;
		  /* 82130564h */ case   20:  		/* mr R9, R26 */
		/* 82130564h case   20:*/		regs.R9 = regs.R26;
		/* 82130564h case   20:*/		return 0x82130568;
		  /* 82130568h */ case   21:  		/* lwz R6, <#[R3 + 20]> */
		/* 82130568h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000014) );
		/* 82130568h case   21:*/		return 0x8213056C;
		  /* 8213056Ch */ case   22:  		/* lwz R5, <#[R3 + 136]> */
		/* 8213056Ch case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000088) );
		/* 8213056Ch case   22:*/		return 0x82130570;
		  /* 82130570h */ case   23:  		/* lwzx R8, <#[R9 + R7]> */
		/* 82130570h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82130570h case   23:*/		return 0x82130574;
		  /* 82130574h */ case   24:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82130574h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82130574h case   24:*/		return 0x82130578;
		  /* 82130578h */ case   25:  		/* lwzx R8, <#[R8 + R6]> */
		/* 82130578h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R6 + 0x00000000) );
		/* 82130578h case   25:*/		return 0x8213057C;
		  /* 8213057Ch */ case   26:  		/* lwz R22, <#[R8 + 4]> */
		/* 8213057Ch case   26:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R8 + 0x00000004) );
		/* 8213057Ch case   26:*/		return 0x82130580;
		  /* 82130580h */ case   27:  		/* cmplw CR6, R22, R5 */
		/* 82130580h case   27:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R5);
		/* 82130580h case   27:*/		return 0x82130584;
		  /* 82130584h */ case   28:  		/* bc 4, CR6_EQ, 32 */
		/* 82130584h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821305A4;  }
		/* 82130584h case   28:*/		return 0x82130588;
		  /* 82130588h */ case   29:  		/* lwz R22, <#[R8 + 16]> */
		/* 82130588h case   29:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R8 + 0x00000010) );
		/* 82130588h case   29:*/		return 0x8213058C;
		  /* 8213058Ch */ case   30:  		/* cmplw CR6, R22, R27 */
		/* 8213058Ch case   30:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R27);
		/* 8213058Ch case   30:*/		return 0x82130590;
		  /* 82130590h */ case   31:  		/* bc 4, CR6_EQ, 20 */
		/* 82130590h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821305A4;  }
		/* 82130590h case   31:*/		return 0x82130594;
		  /* 82130594h */ case   32:  		/* lwz R8, <#[R8 + 12]> */
		/* 82130594h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 82130594h case   32:*/		return 0x82130598;
		  /* 82130598h */ case   33:  		/* subfic R8, R8, 0 */
		/* 82130598h case   33:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R8,0x0);
		/* 82130598h case   33:*/		return 0x8213059C;
		  /* 8213059Ch */ case   34:  		/* subfe R8, R8, R8 */
		/* 8213059Ch case   34:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 8213059Ch case   34:*/		return 0x821305A0;
		  /* 821305A0h */ case   35:  		/* and R28, R8, R28 */
		/* 821305A0h case   35:*/		cpu::op::and<0>(regs,&regs.R28,regs.R8,regs.R28);
		/* 821305A0h case   35:*/		return 0x821305A4;
	}
	return 0x821305A4;
} // Block from 82130514h-821305A4h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821305A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821305A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821305A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821305A4);
		  /* 821305A4h */ case    0:  		/* addi R4, R4, 1 */
		/* 821305A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821305A4h case    0:*/		return 0x821305A8;
		  /* 821305A8h */ case    1:  		/* addi R9, R9, 4 */
		/* 821305A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821305A8h case    1:*/		return 0x821305AC;
		  /* 821305ACh */ case    2:  		/* cmplw CR6, R4, R31 */
		/* 821305ACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 821305ACh case    2:*/		return 0x821305B0;
	}
	return 0x821305B0;
} // Block from 821305A4h-821305B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821305B0h
// Function '?MatchTexldPR@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821305B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821305B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821305B0);
		  /* 821305B0h */ case    0:  		/* bc 12, CR6_LT, -64 */
		/* 821305B0h case    0:*/		if ( regs.CR[6].lt ) { return 0x82130570;  }
		/* 821305B0h case    0:*/		return 0x821305B4;
	}
	return 0x821305B4;
} // Block from 821305B0h-821305B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821305B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821305B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821305B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821305B4);
		  /* 821305B4h */ case    0:  		/* lwz R4, <#[R11 + 4]> */
		/* 821305B4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821305B4h case    0:*/		return 0x821305B8;
		  /* 821305B8h */ case    1:  		/* mr R5, R26 */
		/* 821305B8h case    1:*/		regs.R5 = regs.R26;
		/* 821305B8h case    1:*/		return 0x821305BC;
		  /* 821305BCh */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 821305BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821305BCh case    2:*/		return 0x821305C0;
		  /* 821305C0h */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 821305C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82130618;  }
		/* 821305C0h case    3:*/		return 0x821305C4;
		  /* 821305C4h */ case    4:  		/* lwz R8, <#[R11 + 8]> */
		/* 821305C4h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821305C4h case    4:*/		return 0x821305C8;
		  /* 821305C8h */ case    5:  		/* mr R11, R26 */
		/* 821305C8h case    5:*/		regs.R11 = regs.R26;
		/* 821305C8h case    5:*/		return 0x821305CC;
		  /* 821305CCh */ case    6:  		/* lwz R7, <#[R3 + 20]> */
		/* 821305CCh case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 821305CCh case    6:*/		return 0x821305D0;
		  /* 821305D0h */ case    7:  		/* lwz R6, <#[R3 + 136]> */
		/* 821305D0h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000088) );
		/* 821305D0h case    7:*/		return 0x821305D4;
		  /* 821305D4h */ case    8:  		/* lwzx R9, <#[R11 + R8]> */
		/* 821305D4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821305D4h case    8:*/		return 0x821305D8;
		  /* 821305D8h */ case    9:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821305D8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821305D8h case    9:*/		return 0x821305DC;
		  /* 821305DCh */ case   10:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821305DCh case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821305DCh case   10:*/		return 0x821305E0;
		  /* 821305E0h */ case   11:  		/* lwz R31, <#[R9 + 4]> */
		/* 821305E0h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + 0x00000004) );
		/* 821305E0h case   11:*/		return 0x821305E4;
		  /* 821305E4h */ case   12:  		/* cmplw CR6, R31, R6 */
		/* 821305E4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R6);
		/* 821305E4h case   12:*/		return 0x821305E8;
		  /* 821305E8h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 821305E8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82130608;  }
		/* 821305E8h case   13:*/		return 0x821305EC;
		  /* 821305ECh */ case   14:  		/* lwz R31, <#[R9 + 16]> */
		/* 821305ECh case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + 0x00000010) );
		/* 821305ECh case   14:*/		return 0x821305F0;
		  /* 821305F0h */ case   15:  		/* cmplw CR6, R31, R27 */
		/* 821305F0h case   15:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 821305F0h case   15:*/		return 0x821305F4;
		  /* 821305F4h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 821305F4h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82130608;  }
		/* 821305F4h case   16:*/		return 0x821305F8;
		  /* 821305F8h */ case   17:  		/* lwz R9, <#[R9 + 12]> */
		/* 821305F8h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821305F8h case   17:*/		return 0x821305FC;
		  /* 821305FCh */ case   18:  		/* subfic R9, R9, 0 */
		/* 821305FCh case   18:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 821305FCh case   18:*/		return 0x82130600;
		  /* 82130600h */ case   19:  		/* subfe R9, R9, R9 */
		/* 82130600h case   19:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82130600h case   19:*/		return 0x82130604;
		  /* 82130604h */ case   20:  		/* and R28, R9, R28 */
		/* 82130604h case   20:*/		cpu::op::and<0>(regs,&regs.R28,regs.R9,regs.R28);
		/* 82130604h case   20:*/		return 0x82130608;
	}
	return 0x82130608;
} // Block from 821305B4h-82130608h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82130608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130608);
		  /* 82130608h */ case    0:  		/* addi R5, R5, 1 */
		/* 82130608h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 82130608h case    0:*/		return 0x8213060C;
		  /* 8213060Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 8213060Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213060Ch case    1:*/		return 0x82130610;
		  /* 82130610h */ case    2:  		/* cmplw CR6, R5, R4 */
		/* 82130610h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 82130610h case    2:*/		return 0x82130614;
		  /* 82130614h */ case    3:  		/* bc 12, CR6_LT, -64 */
		/* 82130614h case    3:*/		if ( regs.CR[6].lt ) { return 0x821305D4;  }
		/* 82130614h case    3:*/		return 0x82130618;
	}
	return 0x82130618;
} // Block from 82130608h-82130618h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82130618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130618);
		  /* 82130618h */ case    0:  		/* addi R30, R30, 4 */
		/* 82130618h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82130618h case    0:*/		return 0x8213061C;
		  /* 8213061Ch */ case    1:  		/* bc 16, CR0_LT, -228 */
		/* 8213061Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130538;  }
		/* 8213061Ch case    1:*/		return 0x82130620;
	}
	return 0x82130620;
} // Block from 82130618h-82130620h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82130620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130620);
		  /* 82130620h */ case    0:  		/* addi R27, R27, 1 */
		/* 82130620h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82130620h case    0:*/		return 0x82130624;
		  /* 82130624h */ case    1:  		/* addi R10, R10, 4 */
		/* 82130624h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82130624h case    1:*/		return 0x82130628;
		  /* 82130628h */ case    2:  		/* cmplwi CR6, R27, 4 */
		/* 82130628h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 82130628h case    2:*/		return 0x8213062C;
		  /* 8213062Ch */ case    3:  		/* bc 12, CR6_LT, -460 */
		/* 8213062Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82130460;  }
		/* 8213062Ch case    3:*/		return 0x82130630;
		  /* 82130630h */ case    4:  		/* cmpwi CR6, R28, 0 */
		/* 82130630h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82130630h case    4:*/		return 0x82130634;
		  /* 82130634h */ case    5:  		/* bc 12, CR6_EQ, 172 */
		/* 82130634h case    5:*/		if ( regs.CR[6].eq ) { return 0x821306E0;  }
		/* 82130634h case    5:*/		return 0x82130638;
		  /* 82130638h */ case    6:  		/* mr R5, R26 */
		/* 82130638h case    6:*/		regs.R5 = regs.R26;
		/* 82130638h case    6:*/		return 0x8213063C;
		  /* 8213063Ch */ case    7:  		/* mr R6, R26 */
		/* 8213063Ch case    7:*/		regs.R6 = regs.R26;
		/* 8213063Ch case    7:*/		return 0x82130640;
		  /* 82130640h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 82130640h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82130640h case    8:*/		return 0x82130644;
		  /* 82130644h */ case    9:  		/* bc 12, CR6_EQ, 140 */
		/* 82130644h case    9:*/		if ( regs.CR[6].eq ) { return 0x821306D0;  }
		/* 82130644h case    9:*/		return 0x82130648;
		  /* 82130648h */ case   10:  		/* mr R7, R26 */
		/* 82130648h case   10:*/		regs.R7 = regs.R26;
		/* 82130648h case   10:*/		return 0x8213064C;
		  /* 8213064Ch */ case   11:  		/* lwz R11, <#[R3 + 564]> */
		/* 8213064Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000234) );
		/* 8213064Ch case   11:*/		return 0x82130650;
		  /* 82130650h */ case   12:  		/* lwzx R10, <#[R7 + R11]> */
		/* 82130650h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82130650h case   12:*/		return 0x82130654;
		  /* 82130654h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 82130654h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82130654h case   13:*/		return 0x82130658;
		  /* 82130658h */ case   14:  		/* bc 12, CR6_EQ, 96 */
		/* 82130658h case   14:*/		if ( regs.CR[6].eq ) { return 0x821306B8;  }
		/* 82130658h case   14:*/		return 0x8213065C;
		  /* 8213065Ch */ case   15:  		/* lwz R11, <#[R10]> */
		/* 8213065Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213065Ch case   15:*/		return 0x82130660;
		  /* 82130660h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82130660h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130660h case   16:*/		return 0x82130664;
		  /* 82130664h */ case   17:  		/* bc 12, CR6_EQ, 84 */
		/* 82130664h case   17:*/		if ( regs.CR[6].eq ) { return 0x821306B8;  }
		/* 82130664h case   17:*/		return 0x82130668;
		  /* 82130668h */ case   18:  		/* lwz R11, <#[R10 + 12]> */
		/* 82130668h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82130668h case   18:*/		return 0x8213066C;
		  /* 8213066Ch */ case   19:  		/* mr R8, R26 */
		/* 8213066Ch case   19:*/		regs.R8 = regs.R26;
		/* 8213066Ch case   19:*/		return 0x82130670;
		  /* 82130670h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 82130670h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130670h case   20:*/		return 0x82130674;
		  /* 82130674h */ case   21:  		/* bc 4, CR6_GT, 68 */
		/* 82130674h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821306B8;  }
		/* 82130674h case   21:*/		return 0x82130678;
		  /* 82130678h */ case   22:  		/* mr R9, R26 */
		/* 82130678h case   22:*/		regs.R9 = regs.R26;
		/* 82130678h case   22:*/		return 0x8213067C;
		  /* 8213067Ch */ case   23:  		/* lwz R11, <#[R10 + 16]> */
		/* 8213067Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8213067Ch case   23:*/		return 0x82130680;
		  /* 82130680h */ case   24:  		/* lwz R4, <#[R23 + 8]> */
		/* 82130680h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000008) );
		/* 82130680h case   24:*/		return 0x82130684;
		  /* 82130684h */ case   25:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82130684h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82130684h case   25:*/		return 0x82130688;
		  /* 82130688h */ case   26:  		/* lwzx R4, <#[R5 + R4]> */
		/* 82130688h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 82130688h case   26:*/		return 0x8213068C;
		  /* 8213068Ch */ case   27:  		/* cmplw CR6, R11, R4 */
		/* 8213068Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8213068Ch case   27:*/		return 0x82130690;
		  /* 82130690h */ case   28:  		/* bc 4, CR6_EQ, 20 */
		/* 82130690h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821306A4;  }
		/* 82130690h case   28:*/		return 0x82130694;
		  /* 82130694h */ case   29:  		/* lwz R4, <#[R3 + 20]> */
		/* 82130694h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000014) );
		/* 82130694h case   29:*/		return 0x82130698;
		  /* 82130698h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130698h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130698h case   30:*/		return 0x8213069C;
		  /* 8213069Ch */ case   31:  		/* lwzx R11, <#[R11 + R4]> */
		/* 8213069Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8213069Ch case   31:*/		return 0x821306A0;
		  /* 821306A0h */ case   32:  		/* stw R26, <#[R11 + 12]> */
		/* 821306A0h case   32:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x0000000C) );
		/* 821306A0h case   32:*/		return 0x821306A4;
	}
	return 0x821306A4;
} // Block from 82130620h-821306A4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821306A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821306A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821306A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821306A4);
		  /* 821306A4h */ case    0:  		/* lwz R11, <#[R10 + 12]> */
		/* 821306A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821306A4h case    0:*/		return 0x821306A8;
		  /* 821306A8h */ case    1:  		/* addi R8, R8, 1 */
		/* 821306A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821306A8h case    1:*/		return 0x821306AC;
		  /* 821306ACh */ case    2:  		/* addi R9, R9, 4 */
		/* 821306ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821306ACh case    2:*/		return 0x821306B0;
		  /* 821306B0h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 821306B0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821306B0h case    3:*/		return 0x821306B4;
		  /* 821306B4h */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 821306B4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213067C;  }
		/* 821306B4h case    4:*/		return 0x821306B8;
	}
	return 0x821306B8;
} // Block from 821306A4h-821306B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821306B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821306B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821306B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821306B8);
		  /* 821306B8h */ case    0:  		/* lwz R11, <#[R3 + 552]> */
		/* 821306B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000228) );
		/* 821306B8h case    0:*/		return 0x821306BC;
		  /* 821306BCh */ case    1:  		/* addi R6, R6, 1 */
		/* 821306BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821306BCh case    1:*/		return 0x821306C0;
		  /* 821306C0h */ case    2:  		/* addi R7, R7, 4 */
		/* 821306C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821306C0h case    2:*/		return 0x821306C4;
		  /* 821306C4h */ case    3:  		/* addi R29, R11, -1 */
		/* 821306C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFF);
		/* 821306C4h case    3:*/		return 0x821306C8;
		  /* 821306C8h */ case    4:  		/* cmplw CR6, R6, R29 */
		/* 821306C8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 821306C8h case    4:*/		return 0x821306CC;
		  /* 821306CCh */ case    5:  		/* bc 12, CR6_LT, -128 */
		/* 821306CCh case    5:*/		if ( regs.CR[6].lt ) { return 0x8213064C;  }
		/* 821306CCh case    5:*/		return 0x821306D0;
	}
	return 0x821306D0;
} // Block from 821306B8h-821306D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821306D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821306D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821306D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821306D0);
		  /* 821306D0h */ case    0:  		/* addi R5, R5, 4 */
		/* 821306D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 821306D0h case    0:*/		return 0x821306D4;
		  /* 821306D4h */ case    1:  		/* cmplwi CR6, R5, 16 */
		/* 821306D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 821306D4h case    1:*/		return 0x821306D8;
		  /* 821306D8h */ case    2:  		/* bc 12, CR6_LT, -156 */
		/* 821306D8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213063C;  }
		/* 821306D8h case    2:*/		return 0x821306DC;
		  /* 821306DCh */ case    3:  		/* stw R26, <#[R23]> */
		/* 821306DCh case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R23 + 0x00000000) );
		/* 821306DCh case    3:*/		return 0x821306E0;
	}
	return 0x821306E0;
} // Block from 821306D0h-821306E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821306E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821306E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821306E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821306E0);
		  /* 821306E0h */ case    0:  		/* li R3, 0 */
		/* 821306E0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821306E0h case    0:*/		return 0x821306E4;
		  /* 821306E4h */ case    1:  		/* b -652372 */
		/* 821306E4h case    1:*/		return 0x82091290;
		/* 821306E4h case    1:*/		return 0x821306E8;
	}
	return 0x821306E8;
} // Block from 821306E0h-821306E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821306E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821306E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821306E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821306E8);
		  /* 821306E8h */ case    0:  		/* mfspr R12, LR */
		/* 821306E8h case    0:*/		regs.R12 = regs.LR;
		/* 821306E8h case    0:*/		return 0x821306EC;
		  /* 821306ECh */ case    1:  		/* bl -652452 */
		/* 821306ECh case    1:*/		regs.LR = 0x821306F0; return 0x82091248;
		/* 821306ECh case    1:*/		return 0x821306F0;
		  /* 821306F0h */ case    2:  		/* stfd FR31, <#[R1 - 80]> */
		/* 821306F0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB0) );
		/* 821306F0h case    2:*/		return 0x821306F4;
		  /* 821306F4h */ case    3:  		/* stwu R1, <#[R1 - 160]> */
		/* 821306F4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821306F4h case    3:*/		return 0x821306F8;
		  /* 821306F8h */ case    4:  		/* lwz R11, <#[R3 + 76]> */
		/* 821306F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 821306F8h case    4:*/		return 0x821306FC;
		  /* 821306FCh */ case    5:  		/* mr R31, R3 */
		/* 821306FCh case    5:*/		regs.R31 = regs.R3;
		/* 821306FCh case    5:*/		return 0x82130700;
		  /* 82130700h */ case    6:  		/* li R24, 0 */
		/* 82130700h case    6:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82130700h case    6:*/		return 0x82130704;
		  /* 82130704h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82130704h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130704h case    7:*/		return 0x82130708;
		  /* 82130708h */ case    8:  		/* bc 4, CR6_GT, 448 */
		/* 82130708h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821308C8;  }
		/* 82130708h case    8:*/		return 0x8213070C;
		  /* 8213070Ch */ case    9:  		/* lis R11, -32256 */
		/* 8213070Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213070Ch case    9:*/		return 0x82130710;
		  /* 82130710h */ case   10:  		/* li R25, 0 */
		/* 82130710h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82130710h case   10:*/		return 0x82130714;
		  /* 82130714h */ case   11:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82130714h case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82130714h case   11:*/		return 0x82130718;
		  /* 82130718h */ case   12:  		/* lwz R11, <#[R31 + 564]> */
		/* 82130718h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82130718h case   12:*/		return 0x8213071C;
		  /* 8213071Ch */ case   13:  		/* lwzx R10, <#[R25 + R11]> */
		/* 8213071Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 8213071Ch case   13:*/		return 0x82130720;
		  /* 82130720h */ case   14:  		/* cmplwi CR6, R10, 0 */
		/* 82130720h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82130720h case   14:*/		return 0x82130724;
		  /* 82130724h */ case   15:  		/* bc 12, CR6_EQ, 400 */
		/* 82130724h case   15:*/		if ( regs.CR[6].eq ) { return 0x821308B4;  }
		/* 82130724h case   15:*/		return 0x82130728;
		  /* 82130728h */ case   16:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82130728h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82130728h case   16:*/		return 0x8213072C;
		  /* 8213072Ch */ case   17:  		/* lis R8, 29200 */
		/* 8213072Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R8,0x7210);
		/* 8213072Ch case   17:*/		return 0x82130730;
		  /* 82130730h */ case   18:  		/* lwz R9, <#[R10]> */
		/* 82130730h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82130730h case   18:*/		return 0x82130734;
		  /* 82130734h */ case   19:  		/* rlwinm R11, R9, 0, 0, 11 */
		/* 82130734h case   19:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R9);
		/* 82130734h case   19:*/		return 0x82130738;
		  /* 82130738h */ case   20:  		/* cmplw CR6, R11, R8 */
		/* 82130738h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82130738h case   20:*/		return 0x8213073C;
		  /* 8213073Ch */ case   21:  		/* bc 12, CR6_EQ, 376 */
		/* 8213073Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821308B4;  }
		/* 8213073Ch case   21:*/		return 0x82130740;
		  /* 82130740h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 82130740h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130740h case   22:*/		return 0x82130744;
		  /* 82130744h */ case   23:  		/* bc 12, CR6_EQ, 368 */
		/* 82130744h case   23:*/		if ( regs.CR[6].eq ) { return 0x821308B4;  }
		/* 82130744h case   23:*/		return 0x82130748;
		  /* 82130748h */ case   24:  		/* lis R8, 4352 */
		/* 82130748h case   24:*/		cpu::op::lis<0>(regs,&regs.R8,0x1100);
		/* 82130748h case   24:*/		return 0x8213074C;
		  /* 8213074Ch */ case   25:  		/* lwz R10, <#[R10 + 8]> */
		/* 8213074Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8213074Ch case   25:*/		return 0x82130750;
		  /* 82130750h */ case   26:  		/* rlwinm R26, R9, 0, 12, 31 */
		/* 82130750h case   26:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R9);
		/* 82130750h case   26:*/		return 0x82130754;
		  /* 82130754h */ case   27:  		/* lwz R9, <#[R31 + 20]> */
		/* 82130754h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82130754h case   27:*/		return 0x82130758;
		  /* 82130758h */ case   28:  		/* subf R11, R11, R8 */
		/* 82130758h case   28:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82130758h case   28:*/		return 0x8213075C;
		  /* 8213075Ch */ case   29:  		/* lwz R8, <#[R31 + 16]> */
		/* 8213075Ch case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8213075Ch case   29:*/		return 0x82130760;
		  /* 82130760h */ case   30:  		/* subfic R11, R11, 0 */
		/* 82130760h case   30:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82130760h case   30:*/		return 0x82130764;
		  /* 82130764h */ case   31:  		/* subfe R11, R11, R11 */
		/* 82130764h case   31:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82130764h case   31:*/		return 0x82130768;
		  /* 82130768h */ case   32:  		/* and R11, R11, R26 */
		/* 82130768h case   32:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82130768h case   32:*/		return 0x8213076C;
		  /* 8213076Ch */ case   33:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 8213076Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 8213076Ch case   33:*/		return 0x82130770;
		  /* 82130770h */ case   34:  		/* lwzx R11, <#[R10 + R29]> */
		/* 82130770h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 82130770h case   34:*/		return 0x82130774;
		  /* 82130774h */ case   35:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130774h case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130774h case   35:*/		return 0x82130778;
		  /* 82130778h */ case   36:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82130778h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130778h case   36:*/		return 0x8213077C;
		  /* 8213077Ch */ case   37:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213077Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213077Ch case   37:*/		return 0x82130780;
		  /* 82130780h */ case   38:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130780h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130780h case   38:*/		return 0x82130784;
		  /* 82130784h */ case   39:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82130784h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82130784h case   39:*/		return 0x82130788;
		  /* 82130788h */ case   40:  		/* lwz R11, <#[R11 + 4]> */
		/* 82130788h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82130788h case   40:*/		return 0x8213078C;
		  /* 8213078Ch */ case   41:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8213078Ch case   41:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8213078Ch case   41:*/		return 0x82130790;
		  /* 82130790h */ case   42:  		/* bc 12, CR0_EQ, 292 */
		/* 82130790h case   42:*/		if ( regs.CR[0].eq ) { return 0x821308B4;  }
		/* 82130790h case   42:*/		return 0x82130794;
		  /* 82130794h */ case   43:  		/* li R3, 116 */
		/* 82130794h case   43:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82130794h case   43:*/		return 0x82130798;
		  /* 82130798h */ case   44:  		/* bl -213504 */
		/* 82130798h case   44:*/		regs.LR = 0x8213079C; return 0x820FC598;
		/* 82130798h case   44:*/		return 0x8213079C;
		  /* 8213079Ch */ case   45:  		/* cmplwi CR0, R3, 0 */
		/* 8213079Ch case   45:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213079Ch case   45:*/		return 0x821307A0;
		  /* 821307A0h */ case   46:  		/* bc 12, CR0_EQ, 16 */
		/* 821307A0h case   46:*/		if ( regs.CR[0].eq ) { return 0x821307B0;  }
		/* 821307A0h case   46:*/		return 0x821307A4;
		  /* 821307A4h */ case   47:  		/* bl -215300 */
		/* 821307A4h case   47:*/		regs.LR = 0x821307A8; return 0x820FBEA0;
		/* 821307A4h case   47:*/		return 0x821307A8;
		  /* 821307A8h */ case   48:  		/* mr R28, R3 */
		/* 821307A8h case   48:*/		regs.R28 = regs.R3;
		/* 821307A8h case   48:*/		return 0x821307AC;
		  /* 821307ACh */ case   49:  		/* b 8 */
		/* 821307ACh case   49:*/		return 0x821307B4;
		/* 821307ACh case   49:*/		return 0x821307B0;
	}
	return 0x821307B0;
} // Block from 821306E8h-821307B0h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821307B0h
// Function '?CleanUpClip@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821307B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821307B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821307B0);
		  /* 821307B0h */ case    0:  		/* li R28, 0 */
		/* 821307B0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821307B0h case    0:*/		return 0x821307B4;
	}
	return 0x821307B4;
} // Block from 821307B0h-821307B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821307B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821307B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821307B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821307B4);
		  /* 821307B4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821307B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821307B4h case    0:*/		return 0x821307B8;
		  /* 821307B8h */ case    1:  		/* bc 12, CR6_EQ, 288 */
		/* 821307B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821308D8;  }
		/* 821307B8h case    1:*/		return 0x821307BC;
		  /* 821307BCh */ case    2:  		/* li R11, 1 */
		/* 821307BCh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821307BCh case    2:*/		return 0x821307C0;
		  /* 821307C0h */ case    3:  		/* mr R4, R26 */
		/* 821307C0h case    3:*/		regs.R4 = regs.R26;
		/* 821307C0h case    3:*/		return 0x821307C4;
		  /* 821307C4h */ case    4:  		/* li R7, 0 */
		/* 821307C4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821307C4h case    4:*/		return 0x821307C8;
		  /* 821307C8h */ case    5:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 821307C8h case    5:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 821307C8h case    5:*/		return 0x821307CC;
		  /* 821307CCh */ case    6:  		/* mr R6, R26 */
		/* 821307CCh case    6:*/		regs.R6 = regs.R26;
		/* 821307CCh case    6:*/		return 0x821307D0;
		  /* 821307D0h */ case    7:  		/* mr R5, R26 */
		/* 821307D0h case    7:*/		regs.R5 = regs.R26;
		/* 821307D0h case    7:*/		return 0x821307D4;
		  /* 821307D4h */ case    8:  		/* mr R3, R28 */
		/* 821307D4h case    8:*/		regs.R3 = regs.R28;
		/* 821307D4h case    8:*/		return 0x821307D8;
		  /* 821307D8h */ case    9:  		/* bl -213416 */
		/* 821307D8h case    9:*/		regs.LR = 0x821307DC; return 0x820FC630;
		/* 821307D8h case    9:*/		return 0x821307DC;
		  /* 821307DCh */ case   10:  		/* or. R30, R3, R3 */
		/* 821307DCh case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821307DCh case   10:*/		return 0x821307E0;
		  /* 821307E0h */ case   11:  		/* mr R3, R28 */
		/* 821307E0h case   11:*/		regs.R3 = regs.R28;
		/* 821307E0h case   11:*/		return 0x821307E4;
		  /* 821307E4h */ case   12:  		/* bc 12, CR0_LT, 256 */
		/* 821307E4h case   12:*/		if ( regs.CR[0].lt ) { return 0x821308E4;  }
		/* 821307E4h case   12:*/		return 0x821307E8;
		  /* 821307E8h */ case   13:  		/* lwz R11, <#[R31 + 564]> */
		/* 821307E8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821307E8h case   13:*/		return 0x821307EC;
		  /* 821307ECh */ case   14:  		/* lwzx R4, <#[R25 + R11]> */
		/* 821307ECh case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 821307ECh case   14:*/		return 0x821307F0;
		  /* 821307F0h */ case   15:  		/* bl -215296 */
		/* 821307F0h case   15:*/		regs.LR = 0x821307F4; return 0x820FBEF0;
		/* 821307F0h case   15:*/		return 0x821307F4;
		  /* 821307F4h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 821307F4h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821307F4h case   16:*/		return 0x821307F8;
		  /* 821307F8h */ case   17:  		/* bc 12, CR0_LT, 256 */
		/* 821307F8h case   17:*/		if ( regs.CR[0].lt ) { return 0x821308F8;  }
		/* 821307F8h case   17:*/		return 0x821307FC;
		  /* 821307FCh */ case   18:  		/* li R27, 0 */
		/* 821307FCh case   18:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821307FCh case   18:*/		return 0x82130800;
		  /* 82130800h */ case   19:  		/* cmplwi CR6, R26, 0 */
		/* 82130800h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82130800h case   19:*/		return 0x82130804;
		  /* 82130804h */ case   20:  		/* bc 12, CR6_EQ, 120 */
		/* 82130804h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213087C;  }
		/* 82130804h case   20:*/		return 0x82130808;
		  /* 82130808h */ case   21:  		/* li R30, 0 */
		/* 82130808h case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82130808h case   21:*/		return 0x8213080C;
		  /* 8213080Ch */ case   22:  		/* mr R6, R27 */
		/* 8213080Ch case   22:*/		regs.R6 = regs.R27;
		/* 8213080Ch case   22:*/		return 0x82130810;
		  /* 82130810h */ case   23:  		/* lwz R4, <#[R31 + 136]> */
		/* 82130810h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 82130810h case   23:*/		return 0x82130814;
		  /* 82130814h */ case   24:  		/* li R5, 0 */
		/* 82130814h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82130814h case   24:*/		return 0x82130818;
		  /* 82130818h */ case   25:  		/* fmr FR1, FR31 */
		/* 82130818h case   25:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82130818h case   25:*/		return 0x8213081C;
		  /* 8213081Ch */ case   26:  		/* mr R3, R31 */
		/* 8213081Ch case   26:*/		regs.R3 = regs.R31;
		/* 8213081Ch case   26:*/		return 0x82130820;
		  /* 82130820h */ case   27:  		/* bl -210424 */
		/* 82130820h case   27:*/		regs.LR = 0x82130824; return 0x820FD228;
		/* 82130820h case   27:*/		return 0x82130824;
		  /* 82130824h */ case   28:  		/* lwz R11, <#[R31 + 20]> */
		/* 82130824h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82130824h case   28:*/		return 0x82130828;
		  /* 82130828h */ case   29:  		/* rlwinm R9, R3, 2, 0, 29 */
		/* 82130828h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R3);
		/* 82130828h case   29:*/		return 0x8213082C;
		  /* 8213082Ch */ case   30:  		/* li R10, 0 */
		/* 8213082Ch case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8213082Ch case   30:*/		return 0x82130830;
		  /* 82130830h */ case   31:  		/* addi R27, R27, 1 */
		/* 82130830h case   31:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82130830h case   31:*/		return 0x82130834;
		  /* 82130834h */ case   32:  		/* cmplw CR6, R27, R26 */
		/* 82130834h case   32:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 82130834h case   32:*/		return 0x82130838;
		  /* 82130838h */ case   33:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82130838h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82130838h case   33:*/		return 0x8213083C;
		  /* 8213083Ch */ case   34:  		/* stw R10, <#[R11 + 60]> */
		/* 8213083Ch case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213083Ch case   34:*/		return 0x82130840;
		  /* 82130840h */ case   35:  		/* lwz R11, <#[R28 + 16]> */
		/* 82130840h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82130840h case   35:*/		return 0x82130844;
		  /* 82130844h */ case   36:  		/* stwx R3, <#[R11 + R30]> */
		/* 82130844h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82130844h case   36:*/		return 0x82130848;
		  /* 82130848h */ case   37:  		/* lwz R11, <#[R31 + 564]> */
		/* 82130848h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82130848h case   37:*/		return 0x8213084C;
		  /* 8213084Ch */ case   38:  		/* lwzx R11, <#[R25 + R11]> */
		/* 8213084Ch case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 8213084Ch case   38:*/		return 0x82130850;
		  /* 82130850h */ case   39:  		/* lwz R11, <#[R11 + 8]> */
		/* 82130850h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82130850h case   39:*/		return 0x82130854;
		  /* 82130854h */ case   40:  		/* lwzx R11, <#[R11 + R29]> */
		/* 82130854h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82130854h case   40:*/		return 0x82130858;
		  /* 82130858h */ case   41:  		/* lwz R10, <#[R28 + 8]> */
		/* 82130858h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82130858h case   41:*/		return 0x8213085C;
		  /* 8213085Ch */ case   42:  		/* stwx R11, <#[R10 + R30]> */
		/* 8213085Ch case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8213085Ch case   42:*/		return 0x82130860;
		  /* 82130860h */ case   43:  		/* addi R30, R30, 4 */
		/* 82130860h case   43:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82130860h case   43:*/		return 0x82130864;
		  /* 82130864h */ case   44:  		/* lwz R11, <#[R31 + 564]> */
		/* 82130864h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82130864h case   44:*/		return 0x82130868;
		  /* 82130868h */ case   45:  		/* lwzx R11, <#[R25 + R11]> */
		/* 82130868h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 82130868h case   45:*/		return 0x8213086C;
		  /* 8213086Ch */ case   46:  		/* lwz R11, <#[R11 + 8]> */
		/* 8213086Ch case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8213086Ch case   46:*/		return 0x82130870;
		  /* 82130870h */ case   47:  		/* stwx R3, <#[R11 + R29]> */
		/* 82130870h case   47:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82130870h case   47:*/		return 0x82130874;
		  /* 82130874h */ case   48:  		/* addi R29, R29, 4 */
		/* 82130874h case   48:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82130874h case   48:*/		return 0x82130878;
		  /* 82130878h */ case   49:  		/* bc 12, CR6_LT, -108 */
		/* 82130878h case   49:*/		if ( regs.CR[6].lt ) { return 0x8213080C;  }
		/* 82130878h case   49:*/		return 0x8213087C;
	}
	return 0x8213087C;
} // Block from 821307B4h-8213087Ch (50 instructions)

//////////////////////////////////////////////////////
// Block at 8213087Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213087C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213087C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213087C);
		  /* 8213087Ch */ case    0:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213087Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213087Ch case    0:*/		return 0x82130880;
		  /* 82130880h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 82130880h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82130880h case    1:*/		return 0x82130884;
		  /* 82130884h */ case    2:  		/* bc 4, CR6_LT, 144 */
		/* 82130884h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82130914;  }
		/* 82130884h case    2:*/		return 0x82130888;
		  /* 82130888h */ case    3:  		/* lwz R10, <#[R31 + 560]> */
		/* 82130888h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 82130888h case    3:*/		return 0x8213088C;
		  /* 8213088Ch */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213088Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213088Ch case    4:*/		return 0x82130890;
		  /* 82130890h */ case    5:  		/* mr R4, R28 */
		/* 82130890h case    5:*/		regs.R4 = regs.R28;
		/* 82130890h case    5:*/		return 0x82130894;
		  /* 82130894h */ case    6:  		/* mr R3, R31 */
		/* 82130894h case    6:*/		regs.R3 = regs.R31;
		/* 82130894h case    6:*/		return 0x82130898;
		  /* 82130898h */ case    7:  		/* stwx R28, <#[R11 + R10]> */
		/* 82130898h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82130898h case    7:*/		return 0x8213089C;
		  /* 8213089Ch */ case    8:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213089Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213089Ch case    8:*/		return 0x821308A0;
		  /* 821308A0h */ case    9:  		/* addi R11, R11, 1 */
		/* 821308A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821308A0h case    9:*/		return 0x821308A4;
		  /* 821308A4h */ case   10:  		/* stw R11, <#[R31 + 548]> */
		/* 821308A4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 821308A4h case   10:*/		return 0x821308A8;
		  /* 821308A8h */ case   11:  		/* bl -210928 */
		/* 821308A8h case   11:*/		regs.LR = 0x821308AC; return 0x820FD0B8;
		/* 821308A8h case   11:*/		return 0x821308AC;
		  /* 821308ACh */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 821308ACh case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821308ACh case   12:*/		return 0x821308B0;
		  /* 821308B0h */ case   13:  		/* bc 12, CR0_LT, 72 */
		/* 821308B0h case   13:*/		if ( regs.CR[0].lt ) { return 0x821308F8;  }
		/* 821308B0h case   13:*/		return 0x821308B4;
	}
	return 0x821308B4;
} // Block from 8213087Ch-821308B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821308B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821308B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821308B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821308B4);
		  /* 821308B4h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 821308B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821308B4h case    0:*/		return 0x821308B8;
		  /* 821308B8h */ case    1:  		/* addi R24, R24, 1 */
		/* 821308B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821308B8h case    1:*/		return 0x821308BC;
		  /* 821308BCh */ case    2:  		/* addi R25, R25, 4 */
		/* 821308BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821308BCh case    2:*/		return 0x821308C0;
		  /* 821308C0h */ case    3:  		/* cmplw CR6, R24, R11 */
		/* 821308C0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821308C0h case    3:*/		return 0x821308C4;
		  /* 821308C4h */ case    4:  		/* bc 12, CR6_LT, -428 */
		/* 821308C4h case    4:*/		if ( regs.CR[6].lt ) { return 0x82130718;  }
		/* 821308C4h case    4:*/		return 0x821308C8;
	}
	return 0x821308C8;
} // Block from 821308B4h-821308C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821308C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821308C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821308C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821308C8);
		  /* 821308C8h */ case    0:  		/* li R3, 0 */
		/* 821308C8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821308C8h case    0:*/		return 0x821308CC;
		  /* 821308CCh */ case    1:  		/* addi R1, R1, 160 */
		/* 821308CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821308CCh case    1:*/		return 0x821308D0;
		  /* 821308D0h */ case    2:  		/* lfd FR31, <#[R1 - 80]> */
		/* 821308D0h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB0) );
		/* 821308D0h case    2:*/		return 0x821308D4;
		  /* 821308D4h */ case    3:  		/* b -652860 */
		/* 821308D4h case    3:*/		return 0x82091298;
		/* 821308D4h case    3:*/		return 0x821308D8;
	}
	return 0x821308D8;
} // Block from 821308C8h-821308D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821308D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821308D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821308D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821308D8);
		  /* 821308D8h */ case    0:  		/* lis R3, -32761 */
		/* 821308D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 821308D8h case    0:*/		return 0x821308DC;
		  /* 821308DCh */ case    1:  		/* ori R3, R3, 14 */
		/* 821308DCh case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 821308DCh case    1:*/		return 0x821308E0;
		  /* 821308E0h */ case    2:  		/* b -20 */
		/* 821308E0h case    2:*/		return 0x821308CC;
		/* 821308E0h case    2:*/		return 0x821308E4;
	}
	return 0x821308E4;
} // Block from 821308D8h-821308E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821308E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821308E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821308E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821308E4);
		  /* 821308E4h */ case    0:  		/* bl 969436 */
		/* 821308E4h case    0:*/		regs.LR = 0x821308E8; return 0x8221D3C0;
		/* 821308E4h case    0:*/		return 0x821308E8;
		  /* 821308E8h */ case    1:  		/* mr R3, R28 */
		/* 821308E8h case    1:*/		regs.R3 = regs.R28;
		/* 821308E8h case    1:*/		return 0x821308EC;
		  /* 821308ECh */ case    2:  		/* bl -213756 */
		/* 821308ECh case    2:*/		regs.LR = 0x821308F0; return 0x820FC5F0;
		/* 821308ECh case    2:*/		return 0x821308F0;
		  /* 821308F0h */ case    3:  		/* mr R3, R30 */
		/* 821308F0h case    3:*/		regs.R3 = regs.R30;
		/* 821308F0h case    3:*/		return 0x821308F4;
		  /* 821308F4h */ case    4:  		/* b -40 */
		/* 821308F4h case    4:*/		return 0x821308CC;
		/* 821308F4h case    4:*/		return 0x821308F8;
	}
	return 0x821308F8;
} // Block from 821308E4h-821308F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821308F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821308F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821308F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821308F8);
		  /* 821308F8h */ case    0:  		/* mr R31, R3 */
		/* 821308F8h case    0:*/		regs.R31 = regs.R3;
		/* 821308F8h case    0:*/		return 0x821308FC;
		  /* 821308FCh */ case    1:  		/* mr R3, R28 */
		/* 821308FCh case    1:*/		regs.R3 = regs.R28;
		/* 821308FCh case    1:*/		return 0x82130900;
		  /* 82130900h */ case    2:  		/* bl 969408 */
		/* 82130900h case    2:*/		regs.LR = 0x82130904; return 0x8221D3C0;
		/* 82130900h case    2:*/		return 0x82130904;
		  /* 82130904h */ case    3:  		/* mr R3, R28 */
		/* 82130904h case    3:*/		regs.R3 = regs.R28;
		/* 82130904h case    3:*/		return 0x82130908;
		  /* 82130908h */ case    4:  		/* bl -213784 */
		/* 82130908h case    4:*/		regs.LR = 0x8213090C; return 0x820FC5F0;
		/* 82130908h case    4:*/		return 0x8213090C;
		  /* 8213090Ch */ case    5:  		/* mr R3, R31 */
		/* 8213090Ch case    5:*/		regs.R3 = regs.R31;
		/* 8213090Ch case    5:*/		return 0x82130910;
		  /* 82130910h */ case    6:  		/* b -68 */
		/* 82130910h case    6:*/		return 0x821308CC;
		/* 82130910h case    6:*/		return 0x82130914;
	}
	return 0x82130914;
} // Block from 821308F8h-82130914h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82130914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130914);
		  /* 82130914h */ case    0:  		/* lis R31, -32761 */
		/* 82130914h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 82130914h case    0:*/		return 0x82130918;
		  /* 82130918h */ case    1:  		/* ori R31, R31, 14 */
		/* 82130918h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 82130918h case    1:*/		return 0x8213091C;
		  /* 8213091Ch */ case    2:  		/* b -32 */
		/* 8213091Ch case    2:*/		return 0x821308FC;
		/* 8213091Ch case    2:*/		return 0x82130920;
	}
	return 0x82130920;
} // Block from 82130914h-82130920h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82130920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130920);
		  /* 82130920h */ case    0:  		/* mfspr R12, LR */
		/* 82130920h case    0:*/		regs.R12 = regs.LR;
		/* 82130920h case    0:*/		return 0x82130924;
		  /* 82130924h */ case    1:  		/* bl -653012 */
		/* 82130924h case    1:*/		regs.LR = 0x82130928; return 0x82091250;
		/* 82130924h case    1:*/		return 0x82130928;
		  /* 82130928h */ case    2:  		/* stfd FR31, <#[R1 - 64]> */
		/* 82130928h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 82130928h case    2:*/		return 0x8213092C;
		  /* 8213092Ch */ case    3:  		/* stwu R1, <#[R1 - 144]> */
		/* 8213092Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8213092Ch case    3:*/		return 0x82130930;
		  /* 82130930h */ case    4:  		/* mr R30, R3 */
		/* 82130930h case    4:*/		regs.R30 = regs.R3;
		/* 82130930h case    4:*/		return 0x82130934;
		  /* 82130934h */ case    5:  		/* li R3, 116 */
		/* 82130934h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82130934h case    5:*/		return 0x82130938;
		  /* 82130938h */ case    6:  		/* lwz R26, <#[R30 + 12]> */
		/* 82130938h case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x0000000C) );
		/* 82130938h case    6:*/		return 0x8213093C;
		  /* 8213093Ch */ case    7:  		/* bl -213924 */
		/* 8213093Ch case    7:*/		regs.LR = 0x82130940; return 0x820FC598;
		/* 8213093Ch case    7:*/		return 0x82130940;
		  /* 82130940h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82130940h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82130940h case    8:*/		return 0x82130944;
		  /* 82130944h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 82130944h case    9:*/		if ( regs.CR[0].eq ) { return 0x82130954;  }
		/* 82130944h case    9:*/		return 0x82130948;
		  /* 82130948h */ case   10:  		/* bl -215720 */
		/* 82130948h case   10:*/		regs.LR = 0x8213094C; return 0x820FBEA0;
		/* 82130948h case   10:*/		return 0x8213094C;
		  /* 8213094Ch */ case   11:  		/* mr R27, R3 */
		/* 8213094Ch case   11:*/		regs.R27 = regs.R3;
		/* 8213094Ch case   11:*/		return 0x82130950;
		  /* 82130950h */ case   12:  		/* b 8 */
		/* 82130950h case   12:*/		return 0x82130958;
		/* 82130950h case   12:*/		return 0x82130954;
	}
	return 0x82130954;
} // Block from 82130920h-82130954h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82130954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130954);
		  /* 82130954h */ case    0:  		/* li R27, 0 */
		/* 82130954h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82130954h case    0:*/		return 0x82130958;
	}
	return 0x82130958;
} // Block from 82130954h-82130958h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130958);
		  /* 82130958h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82130958h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82130958h case    0:*/		return 0x8213095C;
		  /* 8213095Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8213095Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213096C;  }
		/* 8213095Ch case    1:*/		return 0x82130960;
		  /* 82130960h */ case    2:  		/* lis R3, -32761 */
		/* 82130960h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82130960h case    2:*/		return 0x82130964;
		  /* 82130964h */ case    3:  		/* ori R3, R3, 14 */
		/* 82130964h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82130964h case    3:*/		return 0x82130968;
		  /* 82130968h */ case    4:  		/* b 516 */
		/* 82130968h case    4:*/		return 0x82130B6C;
		/* 82130968h case    4:*/		return 0x8213096C;
	}
	return 0x8213096C;
} // Block from 82130958h-8213096Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213096Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213096C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213096C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213096C);
		  /* 8213096Ch */ case    0:  		/* lis R4, 4096 */
		/* 8213096Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8213096Ch case    0:*/		return 0x82130970;
		  /* 82130970h */ case    1:  		/* li R7, 0 */
		/* 82130970h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82130970h case    1:*/		return 0x82130974;
		  /* 82130974h */ case    2:  		/* li R6, 4 */
		/* 82130974h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82130974h case    2:*/		return 0x82130978;
		  /* 82130978h */ case    3:  		/* li R5, 4 */
		/* 82130978h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82130978h case    3:*/		return 0x8213097C;
		  /* 8213097Ch */ case    4:  		/* ori R4, R4, 4 */
		/* 8213097Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x4);
		/* 8213097Ch case    4:*/		return 0x82130980;
		  /* 82130980h */ case    5:  		/* mr R3, R27 */
		/* 82130980h case    5:*/		regs.R3 = regs.R27;
		/* 82130980h case    5:*/		return 0x82130984;
		  /* 82130984h */ case    6:  		/* bl -213844 */
		/* 82130984h case    6:*/		regs.LR = 0x82130988; return 0x820FC630;
		/* 82130984h case    6:*/		return 0x82130988;
		  /* 82130988h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82130988h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82130988h case    7:*/		return 0x8213098C;
		  /* 8213098Ch */ case    8:  		/* bc 4, CR0_LT, 32 */
		/* 8213098Ch case    8:*/		if ( !regs.CR[0].lt ) { return 0x821309AC;  }
		/* 8213098Ch case    8:*/		return 0x82130990;
		  /* 82130990h */ case    9:  		/* mr R31, R3 */
		/* 82130990h case    9:*/		regs.R31 = regs.R3;
		/* 82130990h case    9:*/		return 0x82130994;
		  /* 82130994h */ case   10:  		/* mr R3, R27 */
		/* 82130994h case   10:*/		regs.R3 = regs.R27;
		/* 82130994h case   10:*/		return 0x82130998;
		  /* 82130998h */ case   11:  		/* bl 969256 */
		/* 82130998h case   11:*/		regs.LR = 0x8213099C; return 0x8221D3C0;
		/* 82130998h case   11:*/		return 0x8213099C;
		  /* 8213099Ch */ case   12:  		/* mr R3, R27 */
		/* 8213099Ch case   12:*/		regs.R3 = regs.R27;
		/* 8213099Ch case   12:*/		return 0x821309A0;
		  /* 821309A0h */ case   13:  		/* bl -213936 */
		/* 821309A0h case   13:*/		regs.LR = 0x821309A4; return 0x820FC5F0;
		/* 821309A0h case   13:*/		return 0x821309A4;
		  /* 821309A4h */ case   14:  		/* mr R3, R31 */
		/* 821309A4h case   14:*/		regs.R3 = regs.R31;
		/* 821309A4h case   14:*/		return 0x821309A8;
		  /* 821309A8h */ case   15:  		/* b 452 */
		/* 821309A8h case   15:*/		return 0x82130B6C;
		/* 821309A8h case   15:*/		return 0x821309AC;
	}
	return 0x821309AC;
} // Block from 8213096Ch-821309ACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821309ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821309AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821309AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821309AC);
		  /* 821309ACh */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821309ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821309ACh case    0:*/		return 0x821309B0;
		  /* 821309B0h */ case    1:  		/* li R9, -1 */
		/* 821309B0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 821309B0h case    1:*/		return 0x821309B4;
		  /* 821309B4h */ case    2:  		/* li R10, 0 */
		/* 821309B4h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821309B4h case    2:*/		return 0x821309B8;
		  /* 821309B8h */ case    3:  		/* mr R28, R9 */
		/* 821309B8h case    3:*/		regs.R28 = regs.R9;
		/* 821309B8h case    3:*/		return 0x821309BC;
		  /* 821309BCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821309BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821309BCh case    4:*/		return 0x821309C0;
		  /* 821309C0h */ case    5:  		/* bc 4, CR6_GT, 116 */
		/* 821309C0h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82130A34;  }
		/* 821309C0h case    5:*/		return 0x821309C4;
		  /* 821309C4h */ case    6:  		/* li R11, 0 */
		/* 821309C4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821309C4h case    6:*/		return 0x821309C8;
		  /* 821309C8h */ case    7:  		/* lwz R8, <#[R30 + 20]> */
		/* 821309C8h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 821309C8h case    7:*/		return 0x821309CC;
		  /* 821309CCh */ case    8:  		/* lwz R7, <#[R30 + 132]> */
		/* 821309CCh case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000084) );
		/* 821309CCh case    8:*/		return 0x821309D0;
		  /* 821309D0h */ case    9:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821309D0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821309D0h case    9:*/		return 0x821309D4;
		  /* 821309D4h */ case   10:  		/* lwz R8, <#[R8 + 4]> */
		/* 821309D4h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821309D4h case   10:*/		return 0x821309D8;
		  /* 821309D8h */ case   11:  		/* cmplw CR6, R8, R7 */
		/* 821309D8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821309D8h case   11:*/		return 0x821309DC;
		  /* 821309DCh */ case   12:  		/* bc 4, CR6_EQ, 68 */
		/* 821309DCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x82130A20;  }
		/* 821309DCh case   12:*/		return 0x821309E0;
		  /* 821309E0h */ case   13:  		/* lwz R8, <#[R30 + 20]> */
		/* 821309E0h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 821309E0h case   13:*/		return 0x821309E4;
		  /* 821309E4h */ case   14:  		/* lwz R7, <#[R27 + 8]> */
		/* 821309E4h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000008) );
		/* 821309E4h case   14:*/		return 0x821309E8;
		  /* 821309E8h */ case   15:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821309E8h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821309E8h case   15:*/		return 0x821309EC;
		  /* 821309ECh */ case   16:  		/* lwz R8, <#[R8 + 16]> */
		/* 821309ECh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 821309ECh case   16:*/		return 0x821309F0;
		  /* 821309F0h */ case   17:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821309F0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821309F0h case   17:*/		return 0x821309F4;
		  /* 821309F4h */ case   18:  		/* stwx R10, <#[R8 + R7]> */
		/* 821309F4h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 821309F4h case   18:*/		return 0x821309F8;
		  /* 821309F8h */ case   19:  		/* lwz R8, <#[R30 + 20]> */
		/* 821309F8h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 821309F8h case   19:*/		return 0x821309FC;
		  /* 821309FCh */ case   20:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821309FCh case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821309FCh case   20:*/		return 0x82130A00;
		  /* 82130A00h */ case   21:  		/* lwz R7, <#[R30 + 136]> */
		/* 82130A00h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000088) );
		/* 82130A00h case   21:*/		return 0x82130A04;
		  /* 82130A04h */ case   22:  		/* stw R7, <#[R8 + 4]> */
		/* 82130A04h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000004) );
		/* 82130A04h case   22:*/		return 0x82130A08;
		  /* 82130A08h */ case   23:  		/* lwz R8, <#[R30 + 20]> */
		/* 82130A08h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82130A08h case   23:*/		return 0x82130A0C;
		  /* 82130A0Ch */ case   24:  		/* lwzx R8, <#[R11 + R8]> */
		/* 82130A0Ch case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82130A0Ch case   24:*/		return 0x82130A10;
		  /* 82130A10h */ case   25:  		/* stw R9, <#[R8 + 12]> */
		/* 82130A10h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x0000000C) );
		/* 82130A10h case   25:*/		return 0x82130A14;
		  /* 82130A14h */ case   26:  		/* lwz R8, <#[R30 + 20]> */
		/* 82130A14h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82130A14h case   26:*/		return 0x82130A18;
		  /* 82130A18h */ case   27:  		/* lwzx R8, <#[R11 + R8]> */
		/* 82130A18h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82130A18h case   27:*/		return 0x82130A1C;
		  /* 82130A1Ch */ case   28:  		/* lwz R28, <#[R8 + 108]> */
		/* 82130A1Ch case   28:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R8 + 0x0000006C) );
		/* 82130A1Ch case   28:*/		return 0x82130A20;
	}
	return 0x82130A20;
} // Block from 821309ACh-82130A20h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82130A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130A20);
		  /* 82130A20h */ case    0:  		/* lwz R8, <#[R30 + 8]> */
		/* 82130A20h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 82130A20h case    0:*/		return 0x82130A24;
		  /* 82130A24h */ case    1:  		/* addi R10, R10, 1 */
		/* 82130A24h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82130A24h case    1:*/		return 0x82130A28;
		  /* 82130A28h */ case    2:  		/* addi R11, R11, 4 */
		/* 82130A28h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82130A28h case    2:*/		return 0x82130A2C;
		  /* 82130A2Ch */ case    3:  		/* cmplw CR6, R10, R8 */
		/* 82130A2Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82130A2Ch case    3:*/		return 0x82130A30;
		  /* 82130A30h */ case    4:  		/* bc 12, CR6_LT, -104 */
		/* 82130A30h case    4:*/		if ( regs.CR[6].lt ) { return 0x821309C8;  }
		/* 82130A30h case    4:*/		return 0x82130A34;
	}
	return 0x82130A34;
} // Block from 82130A20h-82130A34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130A34);
		  /* 82130A34h */ case    0:  		/* lis R11, -32256 */
		/* 82130A34h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82130A34h case    0:*/		return 0x82130A38;
		  /* 82130A38h */ case    1:  		/* li R29, 0 */
		/* 82130A38h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82130A38h case    1:*/		return 0x82130A3C;
		  /* 82130A3Ch */ case    2:  		/* li R31, 0 */
		/* 82130A3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82130A3Ch case    2:*/		return 0x82130A40;
		  /* 82130A40h */ case    3:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82130A40h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82130A40h case    3:*/		return 0x82130A44;
		  /* 82130A44h */ case    4:  		/* mr R6, R29 */
		/* 82130A44h case    4:*/		regs.R6 = regs.R29;
		/* 82130A44h case    4:*/		return 0x82130A48;
		  /* 82130A48h */ case    5:  		/* lwz R4, <#[R30 + 132]> */
		/* 82130A48h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000084) );
		/* 82130A48h case    5:*/		return 0x82130A4C;
		  /* 82130A4Ch */ case    6:  		/* li R5, 0 */
		/* 82130A4Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82130A4Ch case    6:*/		return 0x82130A50;
		  /* 82130A50h */ case    7:  		/* fmr FR1, FR31 */
		/* 82130A50h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82130A50h case    7:*/		return 0x82130A54;
		  /* 82130A54h */ case    8:  		/* mr R3, R30 */
		/* 82130A54h case    8:*/		regs.R3 = regs.R30;
		/* 82130A54h case    8:*/		return 0x82130A58;
		  /* 82130A58h */ case    9:  		/* bl -210992 */
		/* 82130A58h case    9:*/		regs.LR = 0x82130A5C; return 0x820FD228;
		/* 82130A58h case    9:*/		return 0x82130A5C;
		  /* 82130A5Ch */ case   10:  		/* lwz R11, <#[R27 + 16]> */
		/* 82130A5Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82130A5Ch case   10:*/		return 0x82130A60;
		  /* 82130A60h */ case   11:  		/* stwx R3, <#[R31 + R11]> */
		/* 82130A60h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82130A60h case   11:*/		return 0x82130A64;
		  /* 82130A64h */ case   12:  		/* lwz R11, <#[R27 + 16]> */
		/* 82130A64h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82130A64h case   12:*/		return 0x82130A68;
		  /* 82130A68h */ case   13:  		/* lwzx R11, <#[R31 + R11]> */
		/* 82130A68h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82130A68h case   13:*/		return 0x82130A6C;
		  /* 82130A6Ch */ case   14:  		/* cmpwi CR6, R11, -1 */
		/* 82130A6Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82130A6Ch case   14:*/		return 0x82130A70;
		  /* 82130A70h */ case   15:  		/* bc 12, CR6_EQ, 264 */
		/* 82130A70h case   15:*/		if ( regs.CR[6].eq ) { return 0x82130B78;  }
		/* 82130A70h case   15:*/		return 0x82130A74;
		  /* 82130A74h */ case   16:  		/* lwz R11, <#[R27 + 16]> */
		/* 82130A74h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82130A74h case   16:*/		return 0x82130A78;
		  /* 82130A78h */ case   17:  		/* li R10, 0 */
		/* 82130A78h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82130A78h case   17:*/		return 0x82130A7C;
		  /* 82130A7Ch */ case   18:  		/* lwz R9, <#[R30 + 20]> */
		/* 82130A7Ch case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82130A7Ch case   18:*/		return 0x82130A80;
		  /* 82130A80h */ case   19:  		/* addi R29, R29, 1 */
		/* 82130A80h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82130A80h case   19:*/		return 0x82130A84;
		  /* 82130A84h */ case   20:  		/* lwzx R11, <#[R31 + R11]> */
		/* 82130A84h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82130A84h case   20:*/		return 0x82130A88;
		  /* 82130A88h */ case   21:  		/* addi R31, R31, 4 */
		/* 82130A88h case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82130A88h case   21:*/		return 0x82130A8C;
		  /* 82130A8Ch */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130A8Ch case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130A8Ch case   22:*/		return 0x82130A90;
		  /* 82130A90h */ case   23:  		/* cmplwi CR6, R31, 16 */
		/* 82130A90h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 82130A90h case   23:*/		return 0x82130A94;
		  /* 82130A94h */ case   24:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82130A94h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130A94h case   24:*/		return 0x82130A98;
		  /* 82130A98h */ case   25:  		/* stw R10, <#[R11 + 60]> */
		/* 82130A98h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 82130A98h case   25:*/		return 0x82130A9C;
		  /* 82130A9Ch */ case   26:  		/* stw R28, <#[R11 + 108]> */
		/* 82130A9Ch case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000006C) );
		/* 82130A9Ch case   26:*/		return 0x82130AA0;
		  /* 82130AA0h */ case   27:  		/* bc 12, CR6_LT, -92 */
		/* 82130AA0h case   27:*/		if ( regs.CR[6].lt ) { return 0x82130A44;  }
		/* 82130AA0h case   27:*/		return 0x82130AA4;
		  /* 82130AA4h */ case   28:  		/* mr R4, R27 */
		/* 82130AA4h case   28:*/		regs.R4 = regs.R27;
		/* 82130AA4h case   28:*/		return 0x82130AA8;
	}
	return 0x82130AA8;
} // Block from 82130A34h-82130AA8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82130AA8h
// Function '?MatchClip@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130AA8);
		  /* 82130AA8h */ case    0:  		/* mr R3, R30 */
		/* 82130AA8h case    0:*/		regs.R3 = regs.R30;
		/* 82130AA8h case    0:*/		return 0x82130AAC;
		  /* 82130AACh */ case    1:  		/* bl -211444 */
		/* 82130AACh case    1:*/		regs.LR = 0x82130AB0; return 0x820FD0B8;
		/* 82130AACh case    1:*/		return 0x82130AB0;
		  /* 82130AB0h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82130AB0h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82130AB0h case    2:*/		return 0x82130AB4;
		  /* 82130AB4h */ case    3:  		/* bc 12, CR0_LT, -292 */
		/* 82130AB4h case    3:*/		if ( regs.CR[0].lt ) { return 0x82130990;  }
		/* 82130AB4h case    3:*/		return 0x82130AB8;
		  /* 82130AB8h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 82130AB8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82130AB8h case    4:*/		return 0x82130ABC;
		  /* 82130ABCh */ case    5:  		/* bc 12, CR6_EQ, 172 */
		/* 82130ABCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82130B68;  }
		/* 82130ABCh case    5:*/		return 0x82130AC0;
		  /* 82130AC0h */ case    6:  		/* li R5, 0 */
		/* 82130AC0h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82130AC0h case    6:*/		return 0x82130AC4;
		  /* 82130AC4h */ case    7:  		/* mr R4, R26 */
		/* 82130AC4h case    7:*/		regs.R4 = regs.R26;
		/* 82130AC4h case    7:*/		return 0x82130AC8;
		  /* 82130AC8h */ case    8:  		/* lwz R11, <#[R30 + 24]> */
		/* 82130AC8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82130AC8h case    8:*/		return 0x82130ACC;
		  /* 82130ACCh */ case    9:  		/* lwzx R7, <#[R11 + R5]> */
		/* 82130ACCh case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82130ACCh case    9:*/		return 0x82130AD0;
		  /* 82130AD0h */ case   10:  		/* cmplwi CR6, R7, 0 */
		/* 82130AD0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82130AD0h case   10:*/		return 0x82130AD4;
		  /* 82130AD4h */ case   11:  		/* bc 12, CR6_EQ, 136 */
		/* 82130AD4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82130B5C;  }
		/* 82130AD4h case   11:*/		return 0x82130AD8;
		  /* 82130AD8h */ case   12:  		/* lwz R6, <#[R7 + 12]> */
		/* 82130AD8h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x0000000C) );
		/* 82130AD8h case   12:*/		return 0x82130ADC;
		  /* 82130ADCh */ case   13:  		/* cmplwi CR6, R6, 0 */
		/* 82130ADCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82130ADCh case   13:*/		return 0x82130AE0;
		  /* 82130AE0h */ case   14:  		/* bc 12, CR6_EQ, 124 */
		/* 82130AE0h case   14:*/		if ( regs.CR[6].eq ) { return 0x82130B5C;  }
		/* 82130AE0h case   14:*/		return 0x82130AE4;
		  /* 82130AE4h */ case   15:  		/* lwz R11, <#[R7 + 16]> */
		/* 82130AE4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000010) );
		/* 82130AE4h case   15:*/		return 0x82130AE8;
		  /* 82130AE8h */ case   16:  		/* lwz R10, <#[R30 + 20]> */
		/* 82130AE8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 82130AE8h case   16:*/		return 0x82130AEC;
		  /* 82130AECh */ case   17:  		/* lwz R9, <#[R30 + 132]> */
		/* 82130AECh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000084) );
		/* 82130AECh case   17:*/		return 0x82130AF0;
		  /* 82130AF0h */ case   18:  		/* lwz R11, <#[R11]> */
		/* 82130AF0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82130AF0h case   18:*/		return 0x82130AF4;
		  /* 82130AF4h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130AF4h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130AF4h case   19:*/		return 0x82130AF8;
		  /* 82130AF8h */ case   20:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82130AF8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82130AF8h case   20:*/		return 0x82130AFC;
		  /* 82130AFCh */ case   21:  		/* lwz R11, <#[R11 + 4]> */
		/* 82130AFCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82130AFCh case   21:*/		return 0x82130B00;
		  /* 82130B00h */ case   22:  		/* cmplw CR6, R11, R9 */
		/* 82130B00h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82130B00h case   22:*/		return 0x82130B04;
		  /* 82130B04h */ case   23:  		/* bc 4, CR6_EQ, 88 */
		/* 82130B04h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82130B5C;  }
		/* 82130B04h case   23:*/		return 0x82130B08;
		  /* 82130B08h */ case   24:  		/* li R8, 0 */
		/* 82130B08h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82130B08h case   24:*/		return 0x82130B0C;
		  /* 82130B0Ch */ case   25:  		/* cmplwi CR0, R6, 0 */
		/* 82130B0Ch case   25:*/		cpu::op::cmplwi<0>(regs,regs.R6,0x00000000);
		/* 82130B0Ch case   25:*/		return 0x82130B10;
		  /* 82130B10h */ case   26:  		/* bc 12, CR0_EQ, 76 */
		/* 82130B10h case   26:*/		if ( regs.CR[0].eq ) { return 0x82130B5C;  }
		/* 82130B10h case   26:*/		return 0x82130B14;
		  /* 82130B14h */ case   27:  		/* li R10, 4 */
		/* 82130B14h case   27:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82130B14h case   27:*/		return 0x82130B18;
		  /* 82130B18h */ case   28:  		/* rlwinm R9, R8, 2, 0, 29 */
		/* 82130B18h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 82130B18h case   28:*/		return 0x82130B1C;
		  /* 82130B1Ch */ case   29:  		/* li R11, 0 */
		/* 82130B1Ch case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82130B1Ch case   29:*/		return 0x82130B20;
		  /* 82130B20h */ case   30:  		/* mtspr CTR, R10 */
		/* 82130B20h case   30:*/		regs.CTR = regs.R10;
		/* 82130B20h case   30:*/		return 0x82130B24;
		  /* 82130B24h */ case   31:  		/* lwz R10, <#[R7 + 16]> */
		/* 82130B24h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000010) );
		/* 82130B24h case   31:*/		return 0x82130B28;
		  /* 82130B28h */ case   32:  		/* lwz R3, <#[R27 + 16]> */
		/* 82130B28h case   32:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000010) );
		/* 82130B28h case   32:*/		return 0x82130B2C;
		  /* 82130B2Ch */ case   33:  		/* lwzx R31, <#[R10 + R9]> */
		/* 82130B2Ch case   33:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82130B2Ch case   33:*/		return 0x82130B30;
		  /* 82130B30h */ case   34:  		/* lwzx R3, <#[R11 + R3]> */
		/* 82130B30h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82130B30h case   34:*/		return 0x82130B34;
		  /* 82130B34h */ case   35:  		/* cmplw CR6, R31, R3 */
		/* 82130B34h case   35:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 82130B34h case   35:*/		return 0x82130B38;
		  /* 82130B38h */ case   36:  		/* bc 4, CR6_EQ, 16 */
		/* 82130B38h case   36:*/		if ( !regs.CR[6].eq ) { return 0x82130B48;  }
		/* 82130B38h case   36:*/		return 0x82130B3C;
		  /* 82130B3Ch */ case   37:  		/* lwz R3, <#[R27 + 8]> */
		/* 82130B3Ch case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000008) );
		/* 82130B3Ch case   37:*/		return 0x82130B40;
		  /* 82130B40h */ case   38:  		/* lwzx R3, <#[R3 + R11]> */
		/* 82130B40h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82130B40h case   38:*/		return 0x82130B44;
		  /* 82130B44h */ case   39:  		/* stwx R3, <#[R10 + R9]> */
		/* 82130B44h case   39:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82130B44h case   39:*/		return 0x82130B48;
	}
	return 0x82130B48;
} // Block from 82130AA8h-82130B48h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82130B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B48);
		  /* 82130B48h */ case    0:  		/* addi R11, R11, 4 */
		/* 82130B48h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82130B48h case    0:*/		return 0x82130B4C;
		  /* 82130B4Ch */ case    1:  		/* bc 16, CR0_LT, -40 */
		/* 82130B4Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130B24;  }
		/* 82130B4Ch case    1:*/		return 0x82130B50;
		  /* 82130B50h */ case    2:  		/* addi R8, R8, 1 */
		/* 82130B50h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82130B50h case    2:*/		return 0x82130B54;
		  /* 82130B54h */ case    3:  		/* cmplw CR6, R8, R6 */
		/* 82130B54h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 82130B54h case    3:*/		return 0x82130B58;
		  /* 82130B58h */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 82130B58h case    4:*/		if ( regs.CR[6].lt ) { return 0x82130B14;  }
		/* 82130B58h case    4:*/		return 0x82130B5C;
	}
	return 0x82130B5C;
} // Block from 82130B48h-82130B5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B5C);
		  /* 82130B5Ch */ case    0:  		/* addic. R4, R4, -1 */
		/* 82130B5Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R4,regs.R4,0xFFFFFFFF);
		/* 82130B5Ch case    0:*/		return 0x82130B60;
	}
	return 0x82130B60;
} // Block from 82130B5Ch-82130B60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130B60h
// Function '?FixSatTex@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B60);
		  /* 82130B60h */ case    0:  		/* addi R5, R5, 4 */
		/* 82130B60h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 82130B60h case    0:*/		return 0x82130B64;
		  /* 82130B64h */ case    1:  		/* bc 4, CR0_EQ, -156 */
		/* 82130B64h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82130AC8;  }
		/* 82130B64h case    1:*/		return 0x82130B68;
	}
	return 0x82130B68;
} // Block from 82130B60h-82130B68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82130B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B68);
		  /* 82130B68h */ case    0:  		/* li R3, 0 */
		/* 82130B68h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82130B68h case    0:*/		return 0x82130B6C;
	}
	return 0x82130B6C;
} // Block from 82130B68h-82130B6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B6C);
		  /* 82130B6Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 82130B6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82130B6Ch case    0:*/		return 0x82130B70;
		  /* 82130B70h */ case    1:  		/* lfd FR31, <#[R1 - 64]> */
		/* 82130B70h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 82130B70h case    1:*/		return 0x82130B74;
		  /* 82130B74h */ case    2:  		/* b -653524 */
		/* 82130B74h case    2:*/		return 0x820912A0;
		/* 82130B74h case    2:*/		return 0x82130B78;
	}
	return 0x82130B78;
} // Block from 82130B6Ch-82130B78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82130B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B78);
		  /* 82130B78h */ case    0:  		/* lis R31, -32761 */
		/* 82130B78h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 82130B78h case    0:*/		return 0x82130B7C;
		  /* 82130B7Ch */ case    1:  		/* ori R31, R31, 14 */
		/* 82130B7Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 82130B7Ch case    1:*/		return 0x82130B80;
		  /* 82130B80h */ case    2:  		/* b -492 */
		/* 82130B80h case    2:*/		return 0x82130994;
		/* 82130B80h case    2:*/		return 0x82130B84;
		  /* 82130B84h */ case    3:  		/* nop */
		/* 82130B84h case    3:*/		cpu::op::nop();
		/* 82130B84h case    3:*/		return 0x82130B88;
	}
	return 0x82130B88;
} // Block from 82130B78h-82130B88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82130B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130B88);
		  /* 82130B88h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 82130B88h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82130B88h case    0:*/		return 0x82130B8C;
		  /* 82130B8Ch */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 82130B8Ch case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82130B8Ch case    1:*/		return 0x82130B90;
		  /* 82130B90h */ case    2:  		/* li R6, 0 */
		/* 82130B90h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82130B90h case    2:*/		return 0x82130B94;
		  /* 82130B94h */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 82130B94h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82130B94h case    3:*/		return 0x82130B98;
		  /* 82130B98h */ case    4:  		/* bc 12, CR6_EQ, 120 */
		/* 82130B98h case    4:*/		if ( regs.CR[6].eq ) { return 0x82130C10;  }
		/* 82130B98h case    4:*/		return 0x82130B9C;
		  /* 82130B9Ch */ case    5:  		/* lis R11, -32217 */
		/* 82130B9Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82130B9Ch case    5:*/		return 0x82130BA0;
		  /* 82130BA0h */ case    6:  		/* subf R31, R4, R3 */
		/* 82130BA0h case    6:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R4,regs.R3);
		/* 82130BA0h case    6:*/		return 0x82130BA4;
		  /* 82130BA4h */ case    7:  		/* addi R3, R11, 15904 */
		/* 82130BA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x3E20);
		/* 82130BA4h case    7:*/		return 0x82130BA8;
		  /* 82130BA8h */ case    8:  		/* li R10, 4 */
		/* 82130BA8h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82130BA8h case    8:*/		return 0x82130BAC;
		  /* 82130BACh */ case    9:  		/* li R7, 1 */
		/* 82130BACh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82130BACh case    9:*/		return 0x82130BB0;
		  /* 82130BB0h */ case   10:  		/* li R9, 0 */
		/* 82130BB0h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82130BB0h case   10:*/		return 0x82130BB4;
		  /* 82130BB4h */ case   11:  		/* rlwinm R8, R6, 2, 0, 29 */
		/* 82130BB4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R6);
		/* 82130BB4h case   11:*/		return 0x82130BB8;
		  /* 82130BB8h */ case   12:  		/* mr R11, R4 */
		/* 82130BB8h case   12:*/		regs.R11 = regs.R4;
		/* 82130BB8h case   12:*/		return 0x82130BBC;
		  /* 82130BBCh */ case   13:  		/* mtspr CTR, R10 */
		/* 82130BBCh case   13:*/		regs.CTR = regs.R10;
		/* 82130BBCh case   13:*/		return 0x82130BC0;
		  /* 82130BC0h */ case   14:  		/* add R10, R8, R9 */
		/* 82130BC0h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 82130BC0h case   14:*/		return 0x82130BC4;
		  /* 82130BC4h */ case   15:  		/* lwzx R30, <#[R31 + R11]> */
		/* 82130BC4h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82130BC4h case   15:*/		return 0x82130BC8;
		  /* 82130BC8h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82130BC8h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82130BC8h case   16:*/		return 0x82130BCC;
		  /* 82130BCCh */ case   17:  		/* lwzx R10, <#[R10 + R3]> */
		/* 82130BCCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82130BCCh case   17:*/		return 0x82130BD0;
		  /* 82130BD0h */ case   18:  		/* cmplw CR6, R30, R10 */
		/* 82130BD0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 82130BD0h case   18:*/		return 0x82130BD4;
		  /* 82130BD4h */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 82130BD4h case   19:*/		if ( regs.CR[6].eq ) { return 0x82130BF0;  }
		/* 82130BD4h case   19:*/		return 0x82130BD8;
		  /* 82130BD8h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 82130BD8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82130BD8h case   20:*/		return 0x82130BDC;
		  /* 82130BDCh */ case   21:  		/* li R30, -1 */
		/* 82130BDCh case   21:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 82130BDCh case   21:*/		return 0x82130BE0;
		  /* 82130BE0h */ case   22:  		/* subf R10, R10, R30 */
		/* 82130BE0h case   22:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 82130BE0h case   22:*/		return 0x82130BE4;
		  /* 82130BE4h */ case   23:  		/* addic R10, R10, -1 */
		/* 82130BE4h case   23:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82130BE4h case   23:*/		return 0x82130BE8;
		  /* 82130BE8h */ case   24:  		/* subfe R10, R10, R10 */
		/* 82130BE8h case   24:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82130BE8h case   24:*/		return 0x82130BEC;
		  /* 82130BECh */ case   25:  		/* and R7, R10, R7 */
		/* 82130BECh case   25:*/		cpu::op::and<0>(regs,&regs.R7,regs.R10,regs.R7);
		/* 82130BECh case   25:*/		return 0x82130BF0;
	}
	return 0x82130BF0;
} // Block from 82130B88h-82130BF0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82130BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130BF0);
		  /* 82130BF0h */ case    0:  		/* addi R9, R9, 1 */
		/* 82130BF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82130BF0h case    0:*/		return 0x82130BF4;
		  /* 82130BF4h */ case    1:  		/* addi R11, R11, 4 */
		/* 82130BF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82130BF4h case    1:*/		return 0x82130BF8;
		  /* 82130BF8h */ case    2:  		/* bc 16, CR0_LT, -56 */
		/* 82130BF8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130BC0;  }
		/* 82130BF8h case    2:*/		return 0x82130BFC;
		  /* 82130BFCh */ case    3:  		/* cmpwi CR6, R7, 0 */
		/* 82130BFCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 82130BFCh case    3:*/		return 0x82130C00;
		  /* 82130C00h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 82130C00h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82130C20;  }
		/* 82130C00h case    4:*/		return 0x82130C04;
		  /* 82130C04h */ case    5:  		/* addi R6, R6, 1 */
		/* 82130C04h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82130C04h case    5:*/		return 0x82130C08;
		  /* 82130C08h */ case    6:  		/* cmplw CR6, R6, R5 */
		/* 82130C08h case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 82130C08h case    6:*/		return 0x82130C0C;
		  /* 82130C0Ch */ case    7:  		/* bc 12, CR6_LT, -100 */
		/* 82130C0Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x82130BA8;  }
		/* 82130C0Ch case    7:*/		return 0x82130C10;
	}
	return 0x82130C10;
} // Block from 82130BF0h-82130C10h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82130C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130C10);
		  /* 82130C10h */ case    0:  		/* li R3, 0 */
		/* 82130C10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82130C10h case    0:*/		return 0x82130C14;
		  /* 82130C14h */ case    1:  		/* ld R30, <#[R1 - 16]> */
		/* 82130C14h case    1:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82130C14h case    1:*/		return 0x82130C18;
		  /* 82130C18h */ case    2:  		/* ld R31, <#[R1 - 8]> */
		/* 82130C18h case    2:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82130C18h case    2:*/		return 0x82130C1C;
		  /* 82130C1Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 82130C1Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82130C1Ch case    3:*/		return 0x82130C20;
	}
	return 0x82130C20;
} // Block from 82130C10h-82130C20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82130C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130C20);
		  /* 82130C20h */ case    0:  		/* li R3, 1 */
		/* 82130C20h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82130C20h case    0:*/		return 0x82130C24;
		  /* 82130C24h */ case    1:  		/* b -16 */
		/* 82130C24h case    1:*/		return 0x82130C14;
		/* 82130C24h case    1:*/		return 0x82130C28;
	}
	return 0x82130C28;
} // Block from 82130C20h-82130C28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82130C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130C28);
		  /* 82130C28h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 82130C28h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82130C28h case    0:*/		return 0x82130C2C;
		  /* 82130C2Ch */ case    1:  		/* addi R11, R1, -32 */
		/* 82130C2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xFFFFFFE0);
		/* 82130C2Ch case    1:*/		return 0x82130C30;
		  /* 82130C30h */ case    2:  		/* lwz R8, <#[R4 + 12]> */
		/* 82130C30h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x0000000C) );
		/* 82130C30h case    2:*/		return 0x82130C34;
		  /* 82130C34h */ case    3:  		/* li R5, 0 */
		/* 82130C34h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82130C34h case    3:*/		return 0x82130C38;
		  /* 82130C38h */ case    4:  		/* mr R10, R3 */
		/* 82130C38h case    4:*/		regs.R10 = regs.R3;
		/* 82130C38h case    4:*/		return 0x82130C3C;
		  /* 82130C3Ch */ case    5:  		/* cmplwi CR6, R8, 0 */
		/* 82130C3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82130C3Ch case    5:*/		return 0x82130C40;
		  /* 82130C40h */ case    6:  		/* mr R3, R5 */
		/* 82130C40h case    6:*/		regs.R3 = regs.R5;
		/* 82130C40h case    6:*/		return 0x82130C44;
		  /* 82130C44h */ case    7:  		/* std R5, <#[R11]> */
		/* 82130C44h case    7:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82130C44h case    7:*/		return 0x82130C48;
		  /* 82130C48h */ case    8:  		/* mr R9, R5 */
		/* 82130C48h case    8:*/		regs.R9 = regs.R5;
		/* 82130C48h case    8:*/		return 0x82130C4C;
		  /* 82130C4Ch */ case    9:  		/* std R5, <#[R11 + 8]> */
		/* 82130C4Ch case    9:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 82130C4Ch case    9:*/		return 0x82130C50;
		  /* 82130C50h */ case   10:  		/* bc 12, CR6_EQ, 72 */
		/* 82130C50h case   10:*/		if ( regs.CR[6].eq ) { return 0x82130C98;  }
		/* 82130C50h case   10:*/		return 0x82130C54;
		  /* 82130C54h */ case   11:  		/* lwz R7, <#[R4 + 16]> */
		/* 82130C54h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000010) );
		/* 82130C54h case   11:*/		return 0x82130C58;
		  /* 82130C58h */ case   12:  		/* mr R11, R5 */
		/* 82130C58h case   12:*/		regs.R11 = regs.R5;
		/* 82130C58h case   12:*/		return 0x82130C5C;
		  /* 82130C5Ch */ case   13:  		/* lwz R6, <#[R10 + 20]> */
		/* 82130C5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000014) );
		/* 82130C5Ch case   13:*/		return 0x82130C60;
		  /* 82130C60h */ case   14:  		/* lwzx R10, <#[R11 + R7]> */
		/* 82130C60h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82130C60h case   14:*/		return 0x82130C64;
		  /* 82130C64h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82130C64h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82130C64h case   15:*/		return 0x82130C68;
		  /* 82130C68h */ case   16:  		/* lwzx R10, <#[R10 + R6]> */
		/* 82130C68h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 82130C68h case   16:*/		return 0x82130C6C;
		  /* 82130C6Ch */ case   17:  		/* lwz R10, <#[R10 + 16]> */
		/* 82130C6Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82130C6Ch case   17:*/		return 0x82130C70;
		  /* 82130C70h */ case   18:  		/* cmplwi CR6, R10, 3 */
		/* 82130C70h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82130C70h case   18:*/		return 0x82130C74;
		  /* 82130C74h */ case   19:  		/* bc 12, CR6_GT, 76 */
		/* 82130C74h case   19:*/		if ( regs.CR[6].gt ) { return 0x82130CC0;  }
		/* 82130C74h case   19:*/		return 0x82130C78;
		  /* 82130C78h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82130C78h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82130C78h case   20:*/		return 0x82130C7C;
		  /* 82130C7Ch */ case   21:  		/* addi R4, R1, -32 */
		/* 82130C7Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xFFFFFFE0);
		/* 82130C7Ch case   21:*/		return 0x82130C80;
		  /* 82130C80h */ case   22:  		/* addi R9, R9, 1 */
		/* 82130C80h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82130C80h case   22:*/		return 0x82130C84;
		  /* 82130C84h */ case   23:  		/* li R31, 1 */
		/* 82130C84h case   23:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82130C84h case   23:*/		return 0x82130C88;
		  /* 82130C88h */ case   24:  		/* addi R11, R11, 4 */
		/* 82130C88h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82130C88h case   24:*/		return 0x82130C8C;
		  /* 82130C8Ch */ case   25:  		/* cmplw CR6, R9, R8 */
		/* 82130C8Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82130C8Ch case   25:*/		return 0x82130C90;
		  /* 82130C90h */ case   26:  		/* stwx R31, <#[R10 + R4]> */
		/* 82130C90h case   26:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82130C90h case   26:*/		return 0x82130C94;
		  /* 82130C94h */ case   27:  		/* bc 12, CR6_LT, -52 */
		/* 82130C94h case   27:*/		if ( regs.CR[6].lt ) { return 0x82130C60;  }
		/* 82130C94h case   27:*/		return 0x82130C98;
	}
	return 0x82130C98;
} // Block from 82130C28h-82130C98h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82130C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130C98);
		  /* 82130C98h */ case    0:  		/* li R11, 3 */
		/* 82130C98h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82130C98h case    0:*/		return 0x82130C9C;
		  /* 82130C9Ch */ case    1:  		/* li R8, 1 */
		/* 82130C9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82130C9Ch case    1:*/		return 0x82130CA0;
		  /* 82130CA0h */ case    2:  		/* mr R9, R5 */
		/* 82130CA0h case    2:*/		regs.R9 = regs.R5;
		/* 82130CA0h case    2:*/		return 0x82130CA4;
		  /* 82130CA4h */ case    3:  		/* addi R10, R1, -32 */
		/* 82130CA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xFFFFFFE0);
		/* 82130CA4h case    3:*/		return 0x82130CA8;
		  /* 82130CA8h */ case    4:  		/* mtspr CTR, R11 */
		/* 82130CA8h case    4:*/		regs.CTR = regs.R11;
		/* 82130CA8h case    4:*/		return 0x82130CAC;
		  /* 82130CACh */ case    5:  		/* lwz R11, <#[R10]> */
		/* 82130CACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82130CACh case    5:*/		return 0x82130CB0;
		  /* 82130CB0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82130CB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130CB0h case    6:*/		return 0x82130CB4;
		  /* 82130CB4h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 82130CB4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82130CC8;  }
		/* 82130CB4h case    7:*/		return 0x82130CB8;
		  /* 82130CB8h */ case    8:  		/* mr R8, R5 */
		/* 82130CB8h case    8:*/		regs.R8 = regs.R5;
		/* 82130CB8h case    8:*/		return 0x82130CBC;
		  /* 82130CBCh */ case    9:  		/* b 16 */
		/* 82130CBCh case    9:*/		return 0x82130CCC;
		/* 82130CBCh case    9:*/		return 0x82130CC0;
	}
	return 0x82130CC0;
} // Block from 82130C98h-82130CC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82130CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130CC0);
		  /* 82130CC0h */ case    0:  		/* li R3, 0 */
		/* 82130CC0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82130CC0h case    0:*/		return 0x82130CC4;
		  /* 82130CC4h */ case    1:  		/* b 36 */
		/* 82130CC4h case    1:*/		return 0x82130CE8;
		/* 82130CC4h case    1:*/		return 0x82130CC8;
	}
	return 0x82130CC8;
} // Block from 82130CC0h-82130CC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82130CC8h
// Function '?FixNeg@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130CC8);
		  /* 82130CC8h */ case    0:  		/* li R9, 1 */
		/* 82130CC8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82130CC8h case    0:*/		return 0x82130CCC;
	}
	return 0x82130CCC;
} // Block from 82130CC8h-82130CCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130CCC);
		  /* 82130CCCh */ case    0:  		/* addi R10, R10, 4 */
		/* 82130CCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82130CCCh case    0:*/		return 0x82130CD0;
		  /* 82130CD0h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 82130CD0h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130CAC;  }
		/* 82130CD0h case    1:*/		return 0x82130CD4;
		  /* 82130CD4h */ case    2:  		/* cmpwi CR6, R9, 0 */
		/* 82130CD4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82130CD4h case    2:*/		return 0x82130CD8;
		  /* 82130CD8h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82130CD8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82130CE8;  }
		/* 82130CD8h case    3:*/		return 0x82130CDC;
		  /* 82130CDCh */ case    4:  		/* cmpwi CR6, R8, 0 */
		/* 82130CDCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82130CDCh case    4:*/		return 0x82130CE0;
		  /* 82130CE0h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82130CE0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82130CE8;  }
		/* 82130CE0h case    5:*/		return 0x82130CE4;
		  /* 82130CE4h */ case    6:  		/* li R3, 1 */
		/* 82130CE4h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82130CE4h case    6:*/		return 0x82130CE8;
	}
	return 0x82130CE8;
} // Block from 82130CCCh-82130CE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82130CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130CE8);
		  /* 82130CE8h */ case    0:  		/* ld R31, <#[R1 - 8]> */
		/* 82130CE8h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82130CE8h case    0:*/		return 0x82130CEC;
		  /* 82130CECh */ case    1:  		/* bclr 20, CR0_LT */
		/* 82130CECh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82130CECh case    1:*/		return 0x82130CF0;
	}
	return 0x82130CF0;
} // Block from 82130CE8h-82130CF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82130CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130CF0);
		  /* 82130CF0h */ case    0:  		/* mfspr R12, LR */
		/* 82130CF0h case    0:*/		regs.R12 = regs.LR;
		/* 82130CF0h case    0:*/		return 0x82130CF4;
		  /* 82130CF4h */ case    1:  		/* bl -654036 */
		/* 82130CF4h case    1:*/		regs.LR = 0x82130CF8; return 0x82091220;
		/* 82130CF4h case    1:*/		return 0x82130CF8;
		  /* 82130CF8h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82130CF8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82130CF8h case    2:*/		return 0x82130CFC;
		  /* 82130CFCh */ case    3:  		/* stwu R1, <#[R1 - 448]> */
		/* 82130CFCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE40);
		/* 82130CFCh case    3:*/		return 0x82130D00;
		  /* 82130D00h */ case    4:  		/* lwz R29, <#[R3 + 76]> */
		/* 82130D00h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000004C) );
		/* 82130D00h case    4:*/		return 0x82130D04;
		  /* 82130D04h */ case    5:  		/* li R18, 0 */
		/* 82130D04h case    5:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 82130D04h case    5:*/		return 0x82130D08;
		  /* 82130D08h */ case    6:  		/* lwz R30, <#[R3 + 552]> */
		/* 82130D08h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000228) );
		/* 82130D08h case    6:*/		return 0x82130D0C;
		  /* 82130D0Ch */ case    7:  		/* mr R27, R3 */
		/* 82130D0Ch case    7:*/		regs.R27 = regs.R3;
		/* 82130D0Ch case    7:*/		return 0x82130D10;
		  /* 82130D10h */ case    8:  		/* mr R15, R18 */
		/* 82130D10h case    8:*/		regs.R15 = regs.R18;
		/* 82130D10h case    8:*/		return 0x82130D14;
		  /* 82130D14h */ case    9:  		/* stw R18, <#[R1 + 80]> */
		/* 82130D14h case    9:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000050) );
		/* 82130D14h case    9:*/		return 0x82130D18;
		  /* 82130D18h */ case   10:  		/* cmplw CR6, R29, R30 */
		/* 82130D18h case   10:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 82130D18h case   10:*/		return 0x82130D1C;
		  /* 82130D1Ch */ case   11:  		/* stw R29, <#[R1 + 84]> */
		/* 82130D1Ch case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 82130D1Ch case   11:*/		return 0x82130D20;
		  /* 82130D20h */ case   12:  		/* stw R30, <#[R1 + 92]> */
		/* 82130D20h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82130D20h case   12:*/		return 0x82130D24;
		  /* 82130D24h */ case   13:  		/* bc 4, CR6_LT, 1320 */
		/* 82130D24h case   13:*/		if ( !regs.CR[6].lt ) { return 0x8213124C;  }
		/* 82130D24h case   13:*/		return 0x82130D28;
		  /* 82130D28h */ case   14:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82130D28h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82130D28h case   14:*/		return 0x82130D2C;
		  /* 82130D2Ch */ case   15:  		/* lis R10, -32256 */
		/* 82130D2Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82130D2Ch case   15:*/		return 0x82130D30;
		  /* 82130D30h */ case   16:  		/* stw R11, <#[R1 + 88]> */
		/* 82130D30h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82130D30h case   16:*/		return 0x82130D34;
		  /* 82130D34h */ case   17:  		/* lis R11, -32217 */
		/* 82130D34h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82130D34h case   17:*/		return 0x82130D38;
		  /* 82130D38h */ case   18:  		/* li R14, -1 */
		/* 82130D38h case   18:*/		cpu::op::li<0>(regs,&regs.R14,0xFFFFFFFF);
		/* 82130D38h case   18:*/		return 0x82130D3C;
		  /* 82130D3Ch */ case   19:  		/* addi R11, R11, 15904 */
		/* 82130D3Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3E20);
		/* 82130D3Ch case   19:*/		return 0x82130D40;
		  /* 82130D40h */ case   20:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 82130D40h case   20:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 82130D40h case   20:*/		return 0x82130D44;
		  /* 82130D44h */ case   21:  		/* stw R11, <#[R1 + 96]> */
		/* 82130D44h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82130D44h case   21:*/		return 0x82130D48;
		  /* 82130D48h */ case   22:  		/* b 8 */
		/* 82130D48h case   22:*/		return 0x82130D50;
		/* 82130D48h case   22:*/		return 0x82130D4C;
		  /* 82130D4Ch */ case   23:  		/* lwz R29, <#[R1 + 84]> */
		/* 82130D4Ch case   23:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 82130D4Ch case   23:*/		return 0x82130D50;
	}
	return 0x82130D50;
} // Block from 82130CF0h-82130D50h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82130D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130D50);
		  /* 82130D50h */ case    0:  		/* lwz R11, <#[R27 + 564]> */
		/* 82130D50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000234) );
		/* 82130D50h case    0:*/		return 0x82130D54;
		  /* 82130D54h */ case    1:  		/* lwz R28, <#[R1 + 88]> */
		/* 82130D54h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 82130D54h case    1:*/		return 0x82130D58;
		  /* 82130D58h */ case    2:  		/* lwzx R25, <#[R11 + R28]> */
		/* 82130D58h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82130D58h case    2:*/		return 0x82130D5C;
		  /* 82130D5Ch */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 82130D5Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82130D5Ch case    3:*/		return 0x82130D60;
		  /* 82130D60h */ case    4:  		/* bc 12, CR6_EQ, 1236 */
		/* 82130D60h case    4:*/		if ( regs.CR[6].eq ) { return 0x82131234;  }
		/* 82130D60h case    4:*/		return 0x82130D64;
		  /* 82130D64h */ case    5:  		/* lwz R11, <#[R25]> */
		/* 82130D64h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82130D64h case    5:*/		return 0x82130D68;
		  /* 82130D68h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82130D68h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82130D68h case    6:*/		return 0x82130D6C;
		  /* 82130D6Ch */ case    7:  		/* bc 12, CR6_EQ, 1224 */
		/* 82130D6Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82131234;  }
		/* 82130D6Ch case    7:*/		return 0x82130D70;
		  /* 82130D70h */ case    8:  		/* lwz R10, <#[R25 + 4]> */
		/* 82130D70h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000004) );
		/* 82130D70h case    8:*/		return 0x82130D74;
		  /* 82130D74h */ case    9:  		/* rlwinm R24, R11, 0, 12, 31 */
		/* 82130D74h case    9:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R24,regs.R11);
		/* 82130D74h case    9:*/		return 0x82130D78;
		  /* 82130D78h */ case   10:  		/* mr R19, R18 */
		/* 82130D78h case   10:*/		regs.R19 = regs.R18;
		/* 82130D78h case   10:*/		return 0x82130D7C;
		  /* 82130D7Ch */ case   11:  		/* divwu. R16, R10, R24 */
		/* 82130D7Ch case   11:*/		cpu::op::divwu<1>(regs,&regs.R16,regs.R10,regs.R24);
		/* 82130D7Ch case   11:*/		return 0x82130D80;
		  /* 82130D80h */ case   12:  		/* twi 6, R24, 0 */
		/* 82130D80h case   12:*/		cpu::op::tw<6>(regs, 0x82130D80, regs.R24, 0x00000000);
		/* 82130D80h case   12:*/		return 0x82130D84;
		  /* 82130D84h */ case   13:  		/* bc 12, CR0_EQ, 1068 */
		/* 82130D84h case   13:*/		if ( regs.CR[0].eq ) { return 0x821311B0;  }
		/* 82130D84h case   13:*/		return 0x82130D88;
		  /* 82130D88h */ case   14:  		/* mr R22, R18 */
		/* 82130D88h case   14:*/		regs.R22 = regs.R18;
		/* 82130D88h case   14:*/		return 0x82130D8C;
		  /* 82130D8Ch */ case   15:  		/* mr R20, R18 */
		/* 82130D8Ch case   15:*/		regs.R20 = regs.R18;
		/* 82130D8Ch case   15:*/		return 0x82130D90;
		  /* 82130D90h */ case   16:  		/* mr R21, R18 */
		/* 82130D90h case   16:*/		regs.R21 = regs.R18;
		/* 82130D90h case   16:*/		return 0x82130D94;
		  /* 82130D94h */ case   17:  		/* addi R23, R1, 160 */
		/* 82130D94h case   17:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R1,0xA0);
		/* 82130D94h case   17:*/		return 0x82130D98;
		  /* 82130D98h */ case   18:  		/* rlwinm R17, R24, 2, 0, 29 */
		/* 82130D98h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R17,regs.R24);
		/* 82130D98h case   18:*/		return 0x82130D9C;
		  /* 82130D9Ch */ case   19:  		/* addi R11, R1, 208 */
		/* 82130D9Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 82130D9Ch case   19:*/		return 0x82130DA0;
		  /* 82130DA0h */ case   20:  		/* stw R14, <#[R23]> */
		/* 82130DA0h case   20:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R23 + 0x00000000) );
		/* 82130DA0h case   20:*/		return 0x82130DA4;
		  /* 82130DA4h */ case   21:  		/* stw R14, <#[R23 + 4]> */
		/* 82130DA4h case   21:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R23 + 0x00000004) );
		/* 82130DA4h case   21:*/		return 0x82130DA8;
		  /* 82130DA8h */ case   22:  		/* mr R3, R18 */
		/* 82130DA8h case   22:*/		regs.R3 = regs.R18;
		/* 82130DA8h case   22:*/		return 0x82130DAC;
		  /* 82130DACh */ case   23:  		/* stw R14, <#[R23 + 8]> */
		/* 82130DACh case   23:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R23 + 0x00000008) );
		/* 82130DACh case   23:*/		return 0x82130DB0;
		  /* 82130DB0h */ case   24:  		/* mr R31, R18 */
		/* 82130DB0h case   24:*/		regs.R31 = regs.R18;
		/* 82130DB0h case   24:*/		return 0x82130DB4;
		  /* 82130DB4h */ case   25:  		/* stw R14, <#[R23 + 12]> */
		/* 82130DB4h case   25:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R23 + 0x0000000C) );
		/* 82130DB4h case   25:*/		return 0x82130DB8;
		  /* 82130DB8h */ case   26:  		/* mr R7, R18 */
		/* 82130DB8h case   26:*/		regs.R7 = regs.R18;
		/* 82130DB8h case   26:*/		return 0x82130DBC;
		  /* 82130DBCh */ case   27:  		/* std R14, <#[R11]> */
		/* 82130DBCh case   27:*/		cpu::mem::store64( regs, regs.R14, (uint32)(regs.R11 + 0x00000000) );
		/* 82130DBCh case   27:*/		return 0x82130DC0;
		  /* 82130DC0h */ case   28:  		/* cmplwi CR6, R24, 0 */
		/* 82130DC0h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82130DC0h case   28:*/		return 0x82130DC4;
		  /* 82130DC4h */ case   29:  		/* std R14, <#[R11 + 8]> */
		/* 82130DC4h case   29:*/		cpu::mem::store64( regs, regs.R14, (uint32)(regs.R11 + 0x00000008) );
		/* 82130DC4h case   29:*/		return 0x82130DC8;
		  /* 82130DC8h */ case   30:  		/* bc 12, CR6_EQ, 344 */
		/* 82130DC8h case   30:*/		if ( regs.CR[6].eq ) { return 0x82130F20;  }
		/* 82130DC8h case   30:*/		return 0x82130DCC;
		  /* 82130DCCh */ case   31:  		/* lwz R11, <#[R25]> */
		/* 82130DCCh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82130DCCh case   31:*/		return 0x82130DD0;
		  /* 82130DD0h */ case   32:  		/* mr R8, R18 */
		/* 82130DD0h case   32:*/		regs.R8 = regs.R18;
		/* 82130DD0h case   32:*/		return 0x82130DD4;
		  /* 82130DD4h */ case   33:  		/* lwz R6, <#[R25 + 8]> */
		/* 82130DD4h case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x00000008) );
		/* 82130DD4h case   33:*/		return 0x82130DD8;
		  /* 82130DD8h */ case   34:  		/* mtspr CTR, R24 */
		/* 82130DD8h case   34:*/		regs.CTR = regs.R24;
		/* 82130DD8h case   34:*/		return 0x82130DDC;
		  /* 82130DDCh */ case   35:  		/* lwz R9, <#[R27 + 20]> */
		/* 82130DDCh case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000014) );
		/* 82130DDCh case   35:*/		return 0x82130DE0;
		  /* 82130DE0h */ case   36:  		/* rlwinm R5, R11, 0, 0, 11 */
		/* 82130DE0h case   36:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R5,regs.R11);
		/* 82130DE0h case   36:*/		return 0x82130DE4;
		  /* 82130DE4h */ case   37:  		/* lwz R4, <#[R27 + 16]> */
		/* 82130DE4h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000010) );
		/* 82130DE4h case   37:*/		return 0x82130DE8;
		  /* 82130DE8h */ case   38:  		/* add R11, R22, R7 */
		/* 82130DE8h case   38:*/		cpu::op::add<0>(regs,&regs.R11,regs.R22,regs.R7);
		/* 82130DE8h case   38:*/		return 0x82130DEC;
		  /* 82130DECh */ case   39:  		/* lis R30, 20480 */
		/* 82130DECh case   39:*/		cpu::op::lis<0>(regs,&regs.R30,0x5000);
		/* 82130DECh case   39:*/		return 0x82130DF0;
		  /* 82130DF0h */ case   40:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130DF0h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130DF0h case   40:*/		return 0x82130DF4;
		  /* 82130DF4h */ case   41:  		/* cmplw CR6, R5, R30 */
		/* 82130DF4h case   41:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R30);
		/* 82130DF4h case   41:*/		return 0x82130DF8;
		  /* 82130DF8h */ case   42:  		/* lwzx R11, <#[R11 + R6]> */
		/* 82130DF8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82130DF8h case   42:*/		return 0x82130DFC;
		  /* 82130DFCh */ case   43:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130DFCh case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130DFCh case   43:*/		return 0x82130E00;
		  /* 82130E00h */ case   44:  		/* lwzx R10, <#[R11 + R9]> */
		/* 82130E00h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130E00h case   44:*/		return 0x82130E04;
		  /* 82130E04h */ case   45:  		/* bc 12, CR6_EQ, 40 */
		/* 82130E04h case   45:*/		if ( regs.CR[6].eq ) { return 0x82130E2C;  }
		/* 82130E04h case   45:*/		return 0x82130E08;
		  /* 82130E08h */ case   46:  		/* lwz R11, <#[R25 + 12]> */
		/* 82130E08h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82130E08h case   46:*/		return 0x82130E0C;
		  /* 82130E0Ch */ case   47:  		/* cmplw CR6, R24, R11 */
		/* 82130E0Ch case   47:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82130E0Ch case   47:*/		return 0x82130E10;
		  /* 82130E10h */ case   48:  		/* bc 4, CR6_EQ, 28 */
		/* 82130E10h case   48:*/		if ( !regs.CR[6].eq ) { return 0x82130E2C;  }
		/* 82130E10h case   48:*/		return 0x82130E14;
		  /* 82130E14h */ case   49:  		/* lwz R11, <#[R25 + 16]> */
		/* 82130E14h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 82130E14h case   49:*/		return 0x82130E18;
		  /* 82130E18h */ case   50:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82130E18h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82130E18h case   50:*/		return 0x82130E1C;
		  /* 82130E1Ch */ case   51:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130E1Ch case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130E1Ch case   51:*/		return 0x82130E20;
		  /* 82130E20h */ case   52:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82130E20h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130E20h case   52:*/		return 0x82130E24;
		  /* 82130E24h */ case   53:  		/* lwz R11, <#[R11 + 16]> */
		/* 82130E24h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82130E24h case   53:*/		return 0x82130E28;
		  /* 82130E28h */ case   54:  		/* b 8 */
		/* 82130E28h case   54:*/		return 0x82130E30;
		/* 82130E28h case   54:*/		return 0x82130E2C;
	}
	return 0x82130E2C;
} // Block from 82130D50h-82130E2Ch (55 instructions)

//////////////////////////////////////////////////////
// Block at 82130E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130E2C);
		  /* 82130E2Ch */ case    0:  		/* mr R11, R7 */
		/* 82130E2Ch case    0:*/		regs.R11 = regs.R7;
		/* 82130E2Ch case    0:*/		return 0x82130E30;
	}
	return 0x82130E30;
} // Block from 82130E2Ch-82130E30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130E30);
		  /* 82130E30h */ case    0:  		/* lwz R28, <#[R10 + 4]> */
		/* 82130E30h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000004) );
		/* 82130E30h case    0:*/		return 0x82130E34;
		  /* 82130E34h */ case    1:  		/* addi R26, R1, 160 */
		/* 82130E34h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xA0);
		/* 82130E34h case    1:*/		return 0x82130E38;
		  /* 82130E38h */ case    2:  		/* lwz R10, <#[R10 + 16]> */
		/* 82130E38h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82130E38h case    2:*/		return 0x82130E3C;
		  /* 82130E3Ch */ case    3:  		/* rlwinm R28, R28, 2, 0, 29 */
		/* 82130E3Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R28);
		/* 82130E3Ch case    3:*/		return 0x82130E40;
		  /* 82130E40h */ case    4:  		/* lwzx R28, <#[R28 + R4]> */
		/* 82130E40h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + regs.R4 + 0x00000000) );
		/* 82130E40h case    4:*/		return 0x82130E44;
		  /* 82130E44h */ case    5:  		/* lwz R28, <#[R28 + 4]> */
		/* 82130E44h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000004) );
		/* 82130E44h case    5:*/		return 0x82130E48;
		  /* 82130E48h */ case    6:  		/* rlwinm. R28, R28, 0, 23, 23 */
		/* 82130E48h case    6:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R28,regs.R28);
		/* 82130E48h case    6:*/		return 0x82130E4C;
		  /* 82130E4Ch */ case    7:  		/* add R28, R20, R11 */
		/* 82130E4Ch case    7:*/		cpu::op::add<0>(regs,&regs.R28,regs.R20,regs.R11);
		/* 82130E4Ch case    7:*/		return 0x82130E50;
		  /* 82130E50h */ case    8:  		/* rlwinm R28, R28, 2, 0, 29 */
		/* 82130E50h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R28);
		/* 82130E50h case    8:*/		return 0x82130E54;
		  /* 82130E54h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 82130E54h case    9:*/		if ( regs.CR[0].eq ) { return 0x82130E60;  }
		/* 82130E54h case    9:*/		return 0x82130E58;
		  /* 82130E58h */ case   10:  		/* stwx R11, <#[R28 + R26]> */
		/* 82130E58h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + regs.R26 + 0x00000000) );
		/* 82130E58h case   10:*/		return 0x82130E5C;
		  /* 82130E5Ch */ case   11:  		/* b 8 */
		/* 82130E5Ch case   11:*/		return 0x82130E64;
		/* 82130E5Ch case   11:*/		return 0x82130E60;
	}
	return 0x82130E60;
} // Block from 82130E30h-82130E60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82130E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130E60);
		  /* 82130E60h */ case    0:  		/* stwx R10, <#[R28 + R26]> */
		/* 82130E60h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + regs.R26 + 0x00000000) );
		/* 82130E60h case    0:*/		return 0x82130E64;
	}
	return 0x82130E64;
} // Block from 82130E60h-82130E64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130E64);
		  /* 82130E64h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 82130E64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82130E64h case    0:*/		return 0x82130E68;
		  /* 82130E68h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82130E68h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82130E70;  }
		/* 82130E68h case    1:*/		return 0x82130E6C;
		  /* 82130E6Ch */ case    2:  		/* li R3, 1 */
		/* 82130E6Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82130E6Ch case    2:*/		return 0x82130E70;
	}
	return 0x82130E70;
} // Block from 82130E64h-82130E70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82130E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130E70);
		  /* 82130E70h */ case    0:  		/* cmplwi CR6, R10, 3 */
		/* 82130E70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82130E70h case    0:*/		return 0x82130E74;
		  /* 82130E74h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82130E74h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82130E7C;  }
		/* 82130E74h case    1:*/		return 0x82130E78;
		  /* 82130E78h */ case    2:  		/* li R31, 1 */
		/* 82130E78h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82130E78h case    2:*/		return 0x82130E7C;
	}
	return 0x82130E7C;
} // Block from 82130E70h-82130E7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82130E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130E7C);
		  /* 82130E7Ch */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130E7Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130E7Ch case    0:*/		return 0x82130E80;
		  /* 82130E80h */ case    1:  		/* addi R10, R1, 208 */
		/* 82130E80h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 82130E80h case    1:*/		return 0x82130E84;
		  /* 82130E84h */ case    2:  		/* addi R7, R7, 1 */
		/* 82130E84h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82130E84h case    2:*/		return 0x82130E88;
		  /* 82130E88h */ case    3:  		/* addi R8, R8, 4 */
		/* 82130E88h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82130E88h case    3:*/		return 0x82130E8C;
		  /* 82130E8Ch */ case    4:  		/* stwx R18, <#[R11 + R10]> */
		/* 82130E8Ch case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82130E8Ch case    4:*/		return 0x82130E90;
		  /* 82130E90h */ case    5:  		/* bc 16, CR0_LT, -168 */
		/* 82130E90h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130DE8;  }
		/* 82130E90h case    5:*/		return 0x82130E94;
		  /* 82130E94h */ case    6:  		/* cmpwi CR6, R3, 0 */
		/* 82130E94h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82130E94h case    6:*/		return 0x82130E98;
		  /* 82130E98h */ case    7:  		/* bc 12, CR6_EQ, 136 */
		/* 82130E98h case    7:*/		if ( regs.CR[6].eq ) { return 0x82130F20;  }
		/* 82130E98h case    7:*/		return 0x82130E9C;
		  /* 82130E9Ch */ case    8:  		/* cmplwi CR6, R24, 1 */
		/* 82130E9Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 82130E9Ch case    8:*/		return 0x82130EA0;
		  /* 82130EA0h */ case    9:  		/* bc 4, CR6_EQ, 128 */
		/* 82130EA0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82130F20;  }
		/* 82130EA0h case    9:*/		return 0x82130EA4;
		  /* 82130EA4h */ case   10:  		/* cmplw CR6, R5, R30 */
		/* 82130EA4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R30);
		/* 82130EA4h case   10:*/		return 0x82130EA8;
		  /* 82130EA8h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 82130EA8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82130EB8;  }
		/* 82130EA8h case   11:*/		return 0x82130EAC;
		  /* 82130EACh */ case   12:  		/* lwz R11, <#[R25 + 12]> */
		/* 82130EACh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82130EACh case   12:*/		return 0x82130EB0;
		  /* 82130EB0h */ case   13:  		/* cmplwi CR6, R11, 1 */
		/* 82130EB0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82130EB0h case   13:*/		return 0x82130EB4;
		  /* 82130EB4h */ case   14:  		/* bc 12, CR6_EQ, 108 */
		/* 82130EB4h case   14:*/		if ( regs.CR[6].eq ) { return 0x82130F20;  }
		/* 82130EB4h case   14:*/		return 0x82130EB8;
	}
	return 0x82130EB8;
} // Block from 82130E7Ch-82130EB8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82130EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130EB8);
		  /* 82130EB8h */ case    0:  		/* li R9, 4 */
		/* 82130EB8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82130EB8h case    0:*/		return 0x82130EBC;
		  /* 82130EBCh */ case    1:  		/* li R8, 1 */
		/* 82130EBCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82130EBCh case    1:*/		return 0x82130EC0;
		  /* 82130EC0h */ case    2:  		/* mr R10, R18 */
		/* 82130EC0h case    2:*/		regs.R10 = regs.R18;
		/* 82130EC0h case    2:*/		return 0x82130EC4;
		  /* 82130EC4h */ case    3:  		/* mr R11, R18 */
		/* 82130EC4h case    3:*/		regs.R11 = regs.R18;
		/* 82130EC4h case    3:*/		return 0x82130EC8;
		  /* 82130EC8h */ case    4:  		/* mtspr CTR, R9 */
		/* 82130EC8h case    4:*/		regs.CTR = regs.R9;
		/* 82130EC8h case    4:*/		return 0x82130ECC;
		  /* 82130ECCh */ case    5:  		/* lwz R9, <#[R1 + 96]> */
		/* 82130ECCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82130ECCh case    5:*/		return 0x82130ED0;
		  /* 82130ED0h */ case    6:  		/* add R7, R20, R10 */
		/* 82130ED0h case    6:*/		cpu::op::add<0>(regs,&regs.R7,regs.R20,regs.R10);
		/* 82130ED0h case    6:*/		return 0x82130ED4;
		  /* 82130ED4h */ case    7:  		/* addi R6, R1, 160 */
		/* 82130ED4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 82130ED4h case    7:*/		return 0x82130ED8;
		  /* 82130ED8h */ case    8:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82130ED8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82130ED8h case    8:*/		return 0x82130EDC;
		  /* 82130EDCh */ case    9:  		/* addi R9, R9, 64 */
		/* 82130EDCh case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x40);
		/* 82130EDCh case    9:*/		return 0x82130EE0;
		  /* 82130EE0h */ case   10:  		/* lwzx R7, <#[R7 + R6]> */
		/* 82130EE0h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 82130EE0h case   10:*/		return 0x82130EE4;
		  /* 82130EE4h */ case   11:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82130EE4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130EE4h case   11:*/		return 0x82130EE8;
		  /* 82130EE8h */ case   12:  		/* cmplw CR6, R7, R9 */
		/* 82130EE8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 82130EE8h case   12:*/		return 0x82130EEC;
		  /* 82130EECh */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 82130EECh case   13:*/		if ( regs.CR[6].eq ) { return 0x82130F0C;  }
		/* 82130EECh case   13:*/		return 0x82130EF0;
		  /* 82130EF0h */ case   14:  		/* addi R9, R1, 208 */
		/* 82130EF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD0);
		/* 82130EF0h case   14:*/		return 0x82130EF4;
		  /* 82130EF4h */ case   15:  		/* li R7, -1 */
		/* 82130EF4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 82130EF4h case   15:*/		return 0x82130EF8;
		  /* 82130EF8h */ case   16:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82130EF8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82130EF8h case   16:*/		return 0x82130EFC;
		  /* 82130EFCh */ case   17:  		/* subf R9, R9, R7 */
		/* 82130EFCh case   17:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 82130EFCh case   17:*/		return 0x82130F00;
		  /* 82130F00h */ case   18:  		/* addic R9, R9, -1 */
		/* 82130F00h case   18:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82130F00h case   18:*/		return 0x82130F04;
		  /* 82130F04h */ case   19:  		/* subfe R9, R9, R9 */
		/* 82130F04h case   19:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82130F04h case   19:*/		return 0x82130F08;
		  /* 82130F08h */ case   20:  		/* and R8, R9, R8 */
		/* 82130F08h case   20:*/		cpu::op::and<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 82130F08h case   20:*/		return 0x82130F0C;
	}
	return 0x82130F0C;
} // Block from 82130EB8h-82130F0Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82130F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130F0C);
		  /* 82130F0Ch */ case    0:  		/* addi R10, R10, 1 */
		/* 82130F0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82130F0Ch case    0:*/		return 0x82130F10;
		  /* 82130F10h */ case    1:  		/* addi R11, R11, 4 */
		/* 82130F10h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82130F10h case    1:*/		return 0x82130F14;
		  /* 82130F14h */ case    2:  		/* bc 16, CR0_LT, -72 */
		/* 82130F14h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82130ECC;  }
		/* 82130F14h case    2:*/		return 0x82130F18;
		  /* 82130F18h */ case    3:  		/* cmpwi CR6, R8, 0 */
		/* 82130F18h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82130F18h case    3:*/		return 0x82130F1C;
		  /* 82130F1Ch */ case    4:  		/* bc 4, CR6_EQ, 624 */
		/* 82130F1Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213118C;  }
		/* 82130F1Ch case    4:*/		return 0x82130F20;
	}
	return 0x82130F20;
} // Block from 82130F0Ch-82130F20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82130F20h
// Function '?PackOutput@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130F20);
		  /* 82130F20h */ case    0:  		/* li R5, 2 */
		/* 82130F20h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82130F20h case    0:*/		return 0x82130F24;
		  /* 82130F24h */ case    1:  		/* addi R4, R1, 208 */
		/* 82130F24h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 82130F24h case    1:*/		return 0x82130F28;
		  /* 82130F28h */ case    2:  		/* mr R3, R23 */
		/* 82130F28h case    2:*/		regs.R3 = regs.R23;
		/* 82130F28h case    2:*/		return 0x82130F2C;
		  /* 82130F2Ch */ case    3:  		/* bl -932 */
		/* 82130F2Ch case    3:*/		regs.LR = 0x82130F30; return 0x82130B88;
		/* 82130F2Ch case    3:*/		return 0x82130F30;
		  /* 82130F30h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82130F30h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82130F30h case    4:*/		return 0x82130F34;
		  /* 82130F34h */ case    5:  		/* bc 4, CR0_EQ, 600 */
		/* 82130F34h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8213118C;  }
		/* 82130F34h case    5:*/		return 0x82130F38;
		  /* 82130F38h */ case    6:  		/* cmpwi CR6, R31, 0 */
		/* 82130F38h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82130F38h case    6:*/		return 0x82130F3C;
		  /* 82130F3Ch */ case    7:  		/* bc 4, CR6_EQ, 856 */
		/* 82130F3Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82131294;  }
		/* 82130F3Ch case    7:*/		return 0x82130F40;
		  /* 82130F40h */ case    8:  		/* mr R30, R18 */
		/* 82130F40h case    8:*/		regs.R30 = regs.R18;
		/* 82130F40h case    8:*/		return 0x82130F44;
		  /* 82130F44h */ case    9:  		/* addi R31, R1, 144 */
		/* 82130F44h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x90);
		/* 82130F44h case    9:*/		return 0x82130F48;
		  /* 82130F48h */ case   10:  		/* li R6, 3 */
		/* 82130F48h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82130F48h case   10:*/		return 0x82130F4C;
		  /* 82130F4Ch */ case   11:  		/* lwz R4, <#[R27 + 136]> */
		/* 82130F4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000088) );
		/* 82130F4Ch case   11:*/		return 0x82130F50;
		  /* 82130F50h */ case   12:  		/* li R5, 0 */
		/* 82130F50h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82130F50h case   12:*/		return 0x82130F54;
		  /* 82130F54h */ case   13:  		/* fmr FR1, FR31 */
		/* 82130F54h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82130F54h case   13:*/		return 0x82130F58;
		  /* 82130F58h */ case   14:  		/* mr R3, R27 */
		/* 82130F58h case   14:*/		regs.R3 = regs.R27;
		/* 82130F58h case   14:*/		return 0x82130F5C;
		  /* 82130F5Ch */ case   15:  		/* bl -212276 */
		/* 82130F5Ch case   15:*/		regs.LR = 0x82130F60; return 0x820FD228;
		/* 82130F5Ch case   15:*/		return 0x82130F60;
		  /* 82130F60h */ case   16:  		/* stw R3, <#[R31]> */
		/* 82130F60h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82130F60h case   16:*/		return 0x82130F64;
		  /* 82130F64h */ case   17:  		/* cmpwi CR6, R3, -1 */
		/* 82130F64h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82130F64h case   17:*/		return 0x82130F68;
		  /* 82130F68h */ case   18:  		/* bc 12, CR6_EQ, 892 */
		/* 82130F68h case   18:*/		if ( regs.CR[6].eq ) { return 0x821312E4;  }
		/* 82130F68h case   18:*/		return 0x82130F6C;
		  /* 82130F6Ch */ case   19:  		/* addi R30, R30, 1 */
		/* 82130F6Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82130F6Ch case   19:*/		return 0x82130F70;
		  /* 82130F70h */ case   20:  		/* addi R31, R31, 4 */
		/* 82130F70h case   20:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82130F70h case   20:*/		return 0x82130F74;
		  /* 82130F74h */ case   21:  		/* cmplwi CR6, R30, 1 */
		/* 82130F74h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82130F74h case   21:*/		return 0x82130F78;
		  /* 82130F78h */ case   22:  		/* bc 12, CR6_LT, -48 */
		/* 82130F78h case   22:*/		if ( regs.CR[6].lt ) { return 0x82130F48;  }
		/* 82130F78h case   22:*/		return 0x82130F7C;
		  /* 82130F7Ch */ case   23:  		/* li R3, 116 */
		/* 82130F7Ch case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82130F7Ch case   23:*/		return 0x82130F80;
		  /* 82130F80h */ case   24:  		/* bl -215528 */
		/* 82130F80h case   24:*/		regs.LR = 0x82130F84; return 0x820FC598;
		/* 82130F80h case   24:*/		return 0x82130F84;
		  /* 82130F84h */ case   25:  		/* cmplwi CR0, R3, 0 */
		/* 82130F84h case   25:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82130F84h case   25:*/		return 0x82130F88;
		  /* 82130F88h */ case   26:  		/* bc 12, CR0_EQ, 16 */
		/* 82130F88h case   26:*/		if ( regs.CR[0].eq ) { return 0x82130F98;  }
		/* 82130F88h case   26:*/		return 0x82130F8C;
		  /* 82130F8Ch */ case   27:  		/* bl -217324 */
		/* 82130F8Ch case   27:*/		regs.LR = 0x82130F90; return 0x820FBEA0;
		/* 82130F8Ch case   27:*/		return 0x82130F90;
		  /* 82130F90h */ case   28:  		/* mr R15, R3 */
		/* 82130F90h case   28:*/		regs.R15 = regs.R3;
		/* 82130F90h case   28:*/		return 0x82130F94;
		  /* 82130F94h */ case   29:  		/* b 8 */
		/* 82130F94h case   29:*/		return 0x82130F9C;
		/* 82130F94h case   29:*/		return 0x82130F98;
	}
	return 0x82130F98;
} // Block from 82130F20h-82130F98h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82130F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130F98);
		  /* 82130F98h */ case    0:  		/* mr R15, R18 */
		/* 82130F98h case    0:*/		regs.R15 = regs.R18;
		/* 82130F98h case    0:*/		return 0x82130F9C;
	}
	return 0x82130F9C;
} // Block from 82130F98h-82130F9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82130F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82130F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82130F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82130F9C);
		  /* 82130F9Ch */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 82130F9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82130F9Ch case    0:*/		return 0x82130FA0;
		  /* 82130FA0h */ case    1:  		/* bc 12, CR6_EQ, 836 */
		/* 82130FA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821312E4;  }
		/* 82130FA0h case    1:*/		return 0x82130FA4;
		  /* 82130FA4h */ case    2:  		/* lis R4, 20480 */
		/* 82130FA4h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x5000);
		/* 82130FA4h case    2:*/		return 0x82130FA8;
		  /* 82130FA8h */ case    3:  		/* li R7, 0 */
		/* 82130FA8h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82130FA8h case    3:*/		return 0x82130FAC;
		  /* 82130FACh */ case    4:  		/* li R6, 1 */
		/* 82130FACh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82130FACh case    4:*/		return 0x82130FB0;
		  /* 82130FB0h */ case    5:  		/* li R5, 6 */
		/* 82130FB0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82130FB0h case    5:*/		return 0x82130FB4;
		  /* 82130FB4h */ case    6:  		/* ori R4, R4, 3 */
		/* 82130FB4h case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3);
		/* 82130FB4h case    6:*/		return 0x82130FB8;
		  /* 82130FB8h */ case    7:  		/* mr R3, R15 */
		/* 82130FB8h case    7:*/		regs.R3 = regs.R15;
		/* 82130FB8h case    7:*/		return 0x82130FBC;
		  /* 82130FBCh */ case    8:  		/* bl -215436 */
		/* 82130FBCh case    8:*/		regs.LR = 0x82130FC0; return 0x820FC630;
		/* 82130FBCh case    8:*/		return 0x82130FC0;
		  /* 82130FC0h */ case    9:  		/* or. R31, R3, R3 */
		/* 82130FC0h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82130FC0h case    9:*/		return 0x82130FC4;
		  /* 82130FC4h */ case   10:  		/* bc 12, CR0_LT, 652 */
		/* 82130FC4h case   10:*/		if ( regs.CR[0].lt ) { return 0x82131250;  }
		/* 82130FC4h case   10:*/		return 0x82130FC8;
		  /* 82130FC8h */ case   11:  		/* mr R4, R25 */
		/* 82130FC8h case   11:*/		regs.R4 = regs.R25;
		/* 82130FC8h case   11:*/		return 0x82130FCC;
		  /* 82130FCCh */ case   12:  		/* mr R3, R15 */
		/* 82130FCCh case   12:*/		regs.R3 = regs.R15;
		/* 82130FCCh case   12:*/		return 0x82130FD0;
		  /* 82130FD0h */ case   13:  		/* bl -217312 */
		/* 82130FD0h case   13:*/		regs.LR = 0x82130FD4; return 0x820FBEF0;
		/* 82130FD0h case   13:*/		return 0x82130FD4;
		  /* 82130FD4h */ case   14:  		/* or. R31, R3, R3 */
		/* 82130FD4h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82130FD4h case   14:*/		return 0x82130FD8;
		  /* 82130FD8h */ case   15:  		/* bc 12, CR0_LT, 632 */
		/* 82130FD8h case   15:*/		if ( regs.CR[0].lt ) { return 0x82131250;  }
		/* 82130FD8h case   15:*/		return 0x82130FDC;
		  /* 82130FDCh */ case   16:  		/* lwz R11, <#[R25 + 8]> */
		/* 82130FDCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82130FDCh case   16:*/		return 0x82130FE0;
		  /* 82130FE0h */ case   17:  		/* mr R28, R18 */
		/* 82130FE0h case   17:*/		regs.R28 = regs.R18;
		/* 82130FE0h case   17:*/		return 0x82130FE4;
		  /* 82130FE4h */ case   18:  		/* lwz R10, <#[R27 + 20]> */
		/* 82130FE4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 82130FE4h case   18:*/		return 0x82130FE8;
		  /* 82130FE8h */ case   19:  		/* mr R29, R18 */
		/* 82130FE8h case   19:*/		regs.R29 = regs.R18;
		/* 82130FE8h case   19:*/		return 0x82130FEC;
		  /* 82130FECh */ case   20:  		/* lwzx R11, <#[R11 + R21]> */
		/* 82130FECh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 82130FECh case   20:*/		return 0x82130FF0;
		  /* 82130FF0h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82130FF0h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82130FF0h case   21:*/		return 0x82130FF4;
		  /* 82130FF4h */ case   22:  		/* lwzx R31, <#[R11 + R10]> */
		/* 82130FF4h case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82130FF4h case   22:*/		return 0x82130FF8;
		  /* 82130FF8h */ case   23:  		/* lwz R26, <#[R31 + 16]> */
		/* 82130FF8h case   23:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 82130FF8h case   23:*/		return 0x82130FFC;
		  /* 82130FFCh */ case   24:  		/* cmplw CR6, R28, R26 */
		/* 82130FFCh case   24:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 82130FFCh case   24:*/		return 0x82131000;
		  /* 82131000h */ case   25:  		/* addi R10, R1, 128 */
		/* 82131000h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82131000h case   25:*/		return 0x82131004;
		  /* 82131004h */ case   26:  		/* bc 4, CR6_EQ, 12 */
		/* 82131004h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82131010;  }
		/* 82131004h case   26:*/		return 0x82131008;
		  /* 82131008h */ case   27:  		/* lwz R11, <#[R27 + 1096]> */
		/* 82131008h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000448) );
		/* 82131008h case   27:*/		return 0x8213100C;
		  /* 8213100Ch */ case   28:  		/* b 8 */
		/* 8213100Ch case   28:*/		return 0x82131014;
		/* 8213100Ch case   28:*/		return 0x82131010;
	}
	return 0x82131010;
} // Block from 82130F9Ch-82131010h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82131010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131010);
		  /* 82131010h */ case    0:  		/* lwz R11, <#[R27 + 1092]> */
		/* 82131010h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000444) );
		/* 82131010h case    0:*/		return 0x82131014;
	}
	return 0x82131014;
} // Block from 82131010h-82131014h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131014);
		  /* 82131014h */ case    0:  		/* mr R6, R28 */
		/* 82131014h case    0:*/		regs.R6 = regs.R28;
		/* 82131014h case    0:*/		return 0x82131018;
		  /* 82131018h */ case    1:  		/* lfd FR1, <#[R31 + 32]> */
		/* 82131018h case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000020) );
		/* 82131018h case    1:*/		return 0x8213101C;
		  /* 8213101Ch */ case    2:  		/* li R5, 0 */
		/* 8213101Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213101Ch case    2:*/		return 0x82131020;
		  /* 82131020h */ case    3:  		/* lwz R4, <#[R31 + 4]> */
		/* 82131020h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82131020h case    3:*/		return 0x82131024;
		  /* 82131024h */ case    4:  		/* mr R3, R27 */
		/* 82131024h case    4:*/		regs.R3 = regs.R27;
		/* 82131024h case    4:*/		return 0x82131028;
		  /* 82131028h */ case    5:  		/* stwx R11, <#[R29 + R10]> */
		/* 82131028h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 82131028h case    5:*/		return 0x8213102C;
		  /* 8213102Ch */ case    6:  		/* bl -212484 */
		/* 8213102Ch case    6:*/		regs.LR = 0x82131030; return 0x820FD228;
		/* 8213102Ch case    6:*/		return 0x82131030;
		  /* 82131030h */ case    7:  		/* addi R11, R1, 112 */
		/* 82131030h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82131030h case    7:*/		return 0x82131034;
		  /* 82131034h */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 82131034h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82131034h case    8:*/		return 0x82131038;
		  /* 82131038h */ case    9:  		/* stwx R3, <#[R29 + R11]> */
		/* 82131038h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82131038h case    9:*/		return 0x8213103C;
		  /* 8213103Ch */ case   10:  		/* bc 12, CR6_EQ, 680 */
		/* 8213103Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821312E4;  }
		/* 8213103Ch case   10:*/		return 0x82131040;
		  /* 82131040h */ case   11:  		/* lwz R11, <#[R27 + 20]> */
		/* 82131040h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82131040h case   11:*/		return 0x82131044;
		  /* 82131044h */ case   12:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82131044h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82131044h case   12:*/		return 0x82131048;
		  /* 82131048h */ case   13:  		/* mr R4, R31 */
		/* 82131048h case   13:*/		regs.R4 = regs.R31;
		/* 82131048h case   13:*/		return 0x8213104C;
		  /* 8213104Ch */ case   14:  		/* lwzx R30, <#[R10 + R11]> */
		/* 8213104Ch case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213104Ch case   14:*/		return 0x82131050;
		  /* 82131050h */ case   15:  		/* mr R3, R30 */
		/* 82131050h case   15:*/		regs.R3 = regs.R30;
		/* 82131050h case   15:*/		return 0x82131054;
		  /* 82131054h */ case   16:  		/* bl -214188 */
		/* 82131054h case   16:*/		regs.LR = 0x82131058; return 0x820FCBA8;
		/* 82131054h case   16:*/		return 0x82131058;
		  /* 82131058h */ case   17:  		/* lwz R11, <#[R25 + 8]> */
		/* 82131058h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82131058h case   17:*/		return 0x8213105C;
		  /* 8213105Ch */ case   18:  		/* lwz R10, <#[R27 + 20]> */
		/* 8213105Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 8213105Ch case   18:*/		return 0x82131060;
		  /* 82131060h */ case   19:  		/* lwzx R11, <#[R11 + R21]> */
		/* 82131060h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 82131060h case   19:*/		return 0x82131064;
		  /* 82131064h */ case   20:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 82131064h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 82131064h case   20:*/		return 0x82131068;
		  /* 82131068h */ case   21:  		/* lwzx R10, <#[R9 + R10]> */
		/* 82131068h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82131068h case   21:*/		return 0x8213106C;
		  /* 8213106Ch */ case   22:  		/* lwz R10, <#[R10 + 56]> */
		/* 8213106Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 8213106Ch case   22:*/		return 0x82131070;
		  /* 82131070h */ case   23:  		/* cmpwi CR6, R10, -1 */
		/* 82131070h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82131070h case   23:*/		return 0x82131074;
		  /* 82131074h */ case   24:  		/* bc 4, CR6_EQ, 12 */
		/* 82131074h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82131080;  }
		/* 82131074h case   24:*/		return 0x82131078;
		  /* 82131078h */ case   25:  		/* stw R11, <#[R30 + 56]> */
		/* 82131078h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82131078h case   25:*/		return 0x8213107C;
		  /* 8213107Ch */ case   26:  		/* b 8 */
		/* 8213107Ch case   26:*/		return 0x82131084;
		/* 8213107Ch case   26:*/		return 0x82131080;
	}
	return 0x82131080;
} // Block from 82131014h-82131080h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82131080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131080);
		  /* 82131080h */ case    0:  		/* stw R10, <#[R30 + 56]> */
		/* 82131080h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 82131080h case    0:*/		return 0x82131084;
	}
	return 0x82131084;
} // Block from 82131080h-82131084h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131084);
		  /* 82131084h */ case    0:  		/* addi R29, R29, 4 */
		/* 82131084h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82131084h case    0:*/		return 0x82131088;
		  /* 82131088h */ case    1:  		/* addi R28, R28, 1 */
		/* 82131088h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82131088h case    1:*/		return 0x8213108C;
		  /* 8213108Ch */ case    2:  		/* cmplwi CR6, R29, 12 */
		/* 8213108Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000C);
		/* 8213108Ch case    2:*/		return 0x82131090;
		  /* 82131090h */ case    3:  		/* bc 12, CR6_LT, -148 */
		/* 82131090h case    3:*/		if ( regs.CR[6].lt ) { return 0x82130FFC;  }
		/* 82131090h case    3:*/		return 0x82131094;
		  /* 82131094h */ case    4:  		/* addi R11, R1, 144 */
		/* 82131094h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 82131094h case    4:*/		return 0x82131098;
		  /* 82131098h */ case    5:  		/* lwz R10, <#[R15 + 8]> */
		/* 82131098h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 82131098h case    5:*/		return 0x8213109C;
		  /* 8213109Ch */ case    6:  		/* lwz R8, <#[R1 + 128]> */
		/* 8213109Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 8213109Ch case    6:*/		return 0x821310A0;
		  /* 821310A0h */ case    7:  		/* mr R9, R18 */
		/* 821310A0h case    7:*/		regs.R9 = regs.R18;
		/* 821310A0h case    7:*/		return 0x821310A4;
		  /* 821310A4h */ case    8:  		/* lwz R7, <#[R1 + 132]> */
		/* 821310A4h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000084) );
		/* 821310A4h case    8:*/		return 0x821310A8;
		  /* 821310A8h */ case    9:  		/* cmplwi CR6, R24, 0 */
		/* 821310A8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821310A8h case    9:*/		return 0x821310AC;
		  /* 821310ACh */ case   10:  		/* lwz R6, <#[R1 + 136]> */
		/* 821310ACh case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000088) );
		/* 821310ACh case   10:*/		return 0x821310B0;
		  /* 821310B0h */ case   11:  		/* lwz R5, <#[R1 + 112]> */
		/* 821310B0h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821310B0h case   11:*/		return 0x821310B4;
		  /* 821310B4h */ case   12:  		/* lwz R4, <#[R1 + 116]> */
		/* 821310B4h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 821310B4h case   12:*/		return 0x821310B8;
		  /* 821310B8h */ case   13:  		/* lwz R3, <#[R1 + 120]> */
		/* 821310B8h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 821310B8h case   13:*/		return 0x821310BC;
		  /* 821310BCh */ case   14:  		/* lwz R31, <#[R11]> */
		/* 821310BCh case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821310BCh case   14:*/		return 0x821310C0;
		  /* 821310C0h */ case   15:  		/* stw R8, <#[R10]> */
		/* 821310C0h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821310C0h case   15:*/		return 0x821310C4;
		  /* 821310C4h */ case   16:  		/* stw R7, <#[R10 + 4]> */
		/* 821310C4h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821310C4h case   16:*/		return 0x821310C8;
		  /* 821310C8h */ case   17:  		/* stw R6, <#[R10 + 8]> */
		/* 821310C8h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000008) );
		/* 821310C8h case   17:*/		return 0x821310CC;
		  /* 821310CCh */ case   18:  		/* lwz R11, <#[R15 + 8]> */
		/* 821310CCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821310CCh case   18:*/		return 0x821310D0;
		  /* 821310D0h */ case   19:  		/* stw R5, <#[R11 + 12]> */
		/* 821310D0h case   19:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821310D0h case   19:*/		return 0x821310D4;
		  /* 821310D4h */ case   20:  		/* stw R4, <#[R11 + 16]> */
		/* 821310D4h case   20:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821310D4h case   20:*/		return 0x821310D8;
		  /* 821310D8h */ case   21:  		/* stw R3, <#[R11 + 20]> */
		/* 821310D8h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000014) );
		/* 821310D8h case   21:*/		return 0x821310DC;
		  /* 821310DCh */ case   22:  		/* lwz R11, <#[R15 + 16]> */
		/* 821310DCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000010) );
		/* 821310DCh case   22:*/		return 0x821310E0;
		  /* 821310E0h */ case   23:  		/* stw R31, <#[R11]> */
		/* 821310E0h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821310E0h case   23:*/		return 0x821310E4;
		  /* 821310E4h */ case   24:  		/* bc 12, CR6_EQ, 104 */
		/* 821310E4h case   24:*/		if ( regs.CR[6].eq ) { return 0x8213114C;  }
		/* 821310E4h case   24:*/		return 0x821310E8;
		  /* 821310E8h */ case   25:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 821310E8h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 821310E8h case   25:*/		return 0x821310EC;
		  /* 821310ECh */ case   26:  		/* addi R10, R1, 112 */
		/* 821310ECh case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821310ECh case   26:*/		return 0x821310F0;
		  /* 821310F0h */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821310F0h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821310F0h case   27:*/		return 0x821310F4;
		  /* 821310F4h */ case   28:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821310F4h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821310F4h case   28:*/		return 0x821310F8;
		  /* 821310F8h */ case   29:  		/* lwz R11, <#[R27 + 20]> */
		/* 821310F8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821310F8h case   29:*/		return 0x821310FC;
		  /* 821310FCh */ case   30:  		/* add R10, R22, R9 */
		/* 821310FCh case   30:*/		cpu::op::add<0>(regs,&regs.R10,regs.R22,regs.R9);
		/* 821310FCh case   30:*/		return 0x82131100;
		  /* 82131100h */ case   31:  		/* lwz R8, <#[R25 + 8]> */
		/* 82131100h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000008) );
		/* 82131100h case   31:*/		return 0x82131104;
		  /* 82131104h */ case   32:  		/* rlwinm R7, R10, 2, 0, 29 */
		/* 82131104h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R10);
		/* 82131104h case   32:*/		return 0x82131108;
		  /* 82131108h */ case   33:  		/* lwzx R6, <#[R5 + R11]> */
		/* 82131108h case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 82131108h case   33:*/		return 0x8213110C;
		  /* 8213110Ch */ case   34:  		/* lwzx R10, <#[R7 + R8]> */
		/* 8213110Ch case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 8213110Ch case   34:*/		return 0x82131110;
		  /* 82131110h */ case   35:  		/* lwz R6, <#[R6 + 56]> */
		/* 82131110h case   35:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000038) );
		/* 82131110h case   35:*/		return 0x82131114;
		  /* 82131114h */ case   36:  		/* cmplw CR6, R6, R10 */
		/* 82131114h case   36:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 82131114h case   36:*/		return 0x82131118;
		  /* 82131118h */ case   37:  		/* bc 12, CR6_EQ, 32 */
		/* 82131118h case   37:*/		if ( regs.CR[6].eq ) { return 0x82131138;  }
		/* 82131118h case   37:*/		return 0x8213111C;
		  /* 8213111Ch */ case   38:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213111Ch case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213111Ch case   38:*/		return 0x82131120;
		  /* 82131120h */ case   39:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82131120h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82131120h case   39:*/		return 0x82131124;
		  /* 82131124h */ case   40:  		/* lwz R11, <#[R11 + 56]> */
		/* 82131124h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 82131124h case   40:*/		return 0x82131128;
		  /* 82131128h */ case   41:  		/* cmpwi CR6, R11, -1 */
		/* 82131128h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82131128h case   41:*/		return 0x8213112C;
		  /* 8213112Ch */ case   42:  		/* bc 12, CR6_EQ, 400 */
		/* 8213112Ch case   42:*/		if ( regs.CR[6].eq ) { return 0x821312BC;  }
		/* 8213112Ch case   42:*/		return 0x82131130;
		  /* 82131130h */ case   43:  		/* cmplw CR6, R6, R11 */
		/* 82131130h case   43:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 82131130h case   43:*/		return 0x82131134;
		  /* 82131134h */ case   44:  		/* bc 4, CR6_EQ, 392 */
		/* 82131134h case   44:*/		if ( !regs.CR[6].eq ) { return 0x821312BC;  }
		/* 82131134h case   44:*/		return 0x82131138;
	}
	return 0x82131138;
} // Block from 82131084h-82131138h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82131138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131138);
		  /* 82131138h */ case    0:  		/* lwz R11, <#[R1 + 144]> */
		/* 82131138h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 82131138h case    0:*/		return 0x8213113C;
		  /* 8213113Ch */ case    1:  		/* addi R9, R9, 1 */
		/* 8213113Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213113Ch case    1:*/		return 0x82131140;
		  /* 82131140h */ case    2:  		/* cmplw CR6, R9, R24 */
		/* 82131140h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R24);
		/* 82131140h case    2:*/		return 0x82131144;
		  /* 82131144h */ case    3:  		/* stwx R11, <#[R7 + R8]> */
		/* 82131144h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82131144h case    3:*/		return 0x82131148;
		  /* 82131148h */ case    4:  		/* bc 12, CR6_LT, -80 */
		/* 82131148h case    4:*/		if ( regs.CR[6].lt ) { return 0x821310F8;  }
		/* 82131148h case    4:*/		return 0x8213114C;
	}
	return 0x8213114C;
} // Block from 82131138h-8213114Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213114Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213114C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213114C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213114C);
		  /* 8213114Ch */ case    0:  		/* lwz R11, <#[R27 + 552]> */
		/* 8213114Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000228) );
		/* 8213114Ch case    0:*/		return 0x82131150;
		  /* 82131150h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 82131150h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82131150h case    1:*/		return 0x82131154;
		  /* 82131154h */ case    2:  		/* bc 4, CR6_LT, 400 */
		/* 82131154h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821312E4;  }
		/* 82131154h case    2:*/		return 0x82131158;
		  /* 82131158h */ case    3:  		/* lwz R10, <#[R27 + 564]> */
		/* 82131158h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000234) );
		/* 82131158h case    3:*/		return 0x8213115C;
		  /* 8213115Ch */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213115Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213115Ch case    4:*/		return 0x82131160;
		  /* 82131160h */ case    5:  		/* mr R4, R15 */
		/* 82131160h case    5:*/		regs.R4 = regs.R15;
		/* 82131160h case    5:*/		return 0x82131164;
		  /* 82131164h */ case    6:  		/* mr R3, R27 */
		/* 82131164h case    6:*/		regs.R3 = regs.R27;
		/* 82131164h case    6:*/		return 0x82131168;
		  /* 82131168h */ case    7:  		/* stwx R15, <#[R11 + R10]> */
		/* 82131168h case    7:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82131168h case    7:*/		return 0x8213116C;
		  /* 8213116Ch */ case    8:  		/* lwz R11, <#[R27 + 552]> */
		/* 8213116Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000228) );
		/* 8213116Ch case    8:*/		return 0x82131170;
		  /* 82131170h */ case    9:  		/* addi R11, R11, 1 */
		/* 82131170h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82131170h case    9:*/		return 0x82131174;
		  /* 82131174h */ case   10:  		/* stw R11, <#[R27 + 552]> */
		/* 82131174h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000228) );
		/* 82131174h case   10:*/		return 0x82131178;
		  /* 82131178h */ case   11:  		/* bl -213184 */
		/* 82131178h case   11:*/		regs.LR = 0x8213117C; return 0x820FD0B8;
		/* 82131178h case   11:*/		return 0x8213117C;
		  /* 8213117Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8213117Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213117Ch case   12:*/		return 0x82131180;
		  /* 82131180h */ case   13:  		/* bc 12, CR0_LT, 356 */
		/* 82131180h case   13:*/		if ( regs.CR[0].lt ) { return 0x821312E4;  }
		/* 82131180h case   13:*/		return 0x82131184;
		  /* 82131184h */ case   14:  		/* lwz R29, <#[R1 + 84]> */
		/* 82131184h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 82131184h case   14:*/		return 0x82131188;
		  /* 82131188h */ case   15:  		/* mr R15, R18 */
		/* 82131188h case   15:*/		regs.R15 = regs.R18;
		/* 82131188h case   15:*/		return 0x8213118C;
	}
	return 0x8213118C;
} // Block from 8213114Ch-8213118Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213118Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213118C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213118C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213118C);
		  /* 8213118Ch */ case    0:  		/* addi R19, R19, 1 */
		/* 8213118Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 8213118Ch case    0:*/		return 0x82131190;
		  /* 82131190h */ case    1:  		/* addi R20, R20, 4 */
		/* 82131190h case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 82131190h case    1:*/		return 0x82131194;
		  /* 82131194h */ case    2:  		/* addi R23, R23, 16 */
		/* 82131194h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x10);
		/* 82131194h case    2:*/		return 0x82131198;
		  /* 82131198h */ case    3:  		/* add R22, R22, R24 */
		/* 82131198h case    3:*/		cpu::op::add<0>(regs,&regs.R22,regs.R22,regs.R24);
		/* 82131198h case    3:*/		return 0x8213119C;
		  /* 8213119Ch */ case    4:  		/* add R21, R17, R21 */
		/* 8213119Ch case    4:*/		cpu::op::add<0>(regs,&regs.R21,regs.R17,regs.R21);
		/* 8213119Ch case    4:*/		return 0x821311A0;
		  /* 821311A0h */ case    5:  		/* cmplw CR6, R19, R16 */
		/* 821311A0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R16);
		/* 821311A0h case    5:*/		return 0x821311A4;
		  /* 821311A4h */ case    6:  		/* bc 12, CR6_LT, -1032 */
		/* 821311A4h case    6:*/		if ( regs.CR[6].lt ) { return 0x82130D9C;  }
		/* 821311A4h case    6:*/		return 0x821311A8;
		  /* 821311A8h */ case    7:  		/* lwz R28, <#[R1 + 88]> */
		/* 821311A8h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 821311A8h case    7:*/		return 0x821311AC;
		  /* 821311ACh */ case    8:  		/* lwz R30, <#[R1 + 92]> */
		/* 821311ACh case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 821311ACh case    8:*/		return 0x821311B0;
	}
	return 0x821311B0;
} // Block from 8213118Ch-821311B0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821311B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821311B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821311B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821311B0);
		  /* 821311B0h */ case    0:  		/* li R3, 116 */
		/* 821311B0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 821311B0h case    0:*/		return 0x821311B4;
		  /* 821311B4h */ case    1:  		/* bl -216092 */
		/* 821311B4h case    1:*/		regs.LR = 0x821311B8; return 0x820FC598;
		/* 821311B4h case    1:*/		return 0x821311B8;
		  /* 821311B8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821311B8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821311B8h case    2:*/		return 0x821311BC;
		  /* 821311BCh */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821311BCh case    3:*/		if ( regs.CR[0].eq ) { return 0x821311CC;  }
		/* 821311BCh case    3:*/		return 0x821311C0;
		  /* 821311C0h */ case    4:  		/* bl -217888 */
		/* 821311C0h case    4:*/		regs.LR = 0x821311C4; return 0x820FBEA0;
		/* 821311C0h case    4:*/		return 0x821311C4;
		  /* 821311C4h */ case    5:  		/* stw R3, <#[R1 + 80]> */
		/* 821311C4h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821311C4h case    5:*/		return 0x821311C8;
		  /* 821311C8h */ case    6:  		/* b 8 */
		/* 821311C8h case    6:*/		return 0x821311D0;
		/* 821311C8h case    6:*/		return 0x821311CC;
	}
	return 0x821311CC;
} // Block from 821311B0h-821311CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821311CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821311CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821311CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821311CC);
		  /* 821311CCh */ case    0:  		/* stw R18, <#[R1 + 80]> */
		/* 821311CCh case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000050) );
		/* 821311CCh case    0:*/		return 0x821311D0;
	}
	return 0x821311D0;
} // Block from 821311CCh-821311D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821311D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821311D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821311D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821311D0);
		  /* 821311D0h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821311D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821311D0h case    0:*/		return 0x821311D4;
		  /* 821311D4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821311D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821311D4h case    1:*/		return 0x821311D8;
		  /* 821311D8h */ case    2:  		/* bc 12, CR6_EQ, 268 */
		/* 821311D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821312E4;  }
		/* 821311D8h case    2:*/		return 0x821311DC;
		  /* 821311DCh */ case    3:  		/* mr R3, R27 */
		/* 821311DCh case    3:*/		regs.R3 = regs.R27;
		/* 821311DCh case    3:*/		return 0x821311E0;
		  /* 821311E0h */ case    4:  		/* rlwinm R4, R11, 0, 0, 31 */
		/* 821311E0h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R11);
		/* 821311E0h case    4:*/		return 0x821311E4;
		  /* 821311E4h */ case    5:  		/* bl -213292 */
		/* 821311E4h case    5:*/		regs.LR = 0x821311E8; return 0x820FD0B8;
		/* 821311E4h case    5:*/		return 0x821311E8;
		  /* 821311E8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821311E8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821311E8h case    6:*/		return 0x821311EC;
		  /* 821311ECh */ case    7:  		/* bc 12, CR0_LT, 248 */
		/* 821311ECh case    7:*/		if ( regs.CR[0].lt ) { return 0x821312E4;  }
		/* 821311ECh case    7:*/		return 0x821311F0;
		  /* 821311F0h */ case    8:  		/* mr R4, R25 */
		/* 821311F0h case    8:*/		regs.R4 = regs.R25;
		/* 821311F0h case    8:*/		return 0x821311F4;
		  /* 821311F4h */ case    9:  		/* lwz R3, <#[R1 + 80]> */
		/* 821311F4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821311F4h case    9:*/		return 0x821311F8;
		  /* 821311F8h */ case   10:  		/* bl -215208 */
		/* 821311F8h case   10:*/		regs.LR = 0x821311FC; return 0x820FC950;
		/* 821311F8h case   10:*/		return 0x821311FC;
		  /* 821311FCh */ case   11:  		/* or. R31, R3, R3 */
		/* 821311FCh case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821311FCh case   11:*/		return 0x82131200;
		  /* 82131200h */ case   12:  		/* bc 12, CR0_LT, 104 */
		/* 82131200h case   12:*/		if ( regs.CR[0].lt ) { return 0x82131268;  }
		/* 82131200h case   12:*/		return 0x82131204;
		  /* 82131204h */ case   13:  		/* lwz R11, <#[R27 + 552]> */
		/* 82131204h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000228) );
		/* 82131204h case   13:*/		return 0x82131208;
		  /* 82131208h */ case   14:  		/* cmplwi CR6, R11, 512 */
		/* 82131208h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82131208h case   14:*/		return 0x8213120C;
		  /* 8213120Ch */ case   15:  		/* bc 4, CR6_LT, 216 */
		/* 8213120Ch case   15:*/		if ( !regs.CR[6].lt ) { return 0x821312E4;  }
		/* 8213120Ch case   15:*/		return 0x82131210;
		  /* 82131210h */ case   16:  		/* lwz R10, <#[R27 + 564]> */
		/* 82131210h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000234) );
		/* 82131210h case   16:*/		return 0x82131214;
		  /* 82131214h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82131214h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82131214h case   17:*/		return 0x82131218;
		  /* 82131218h */ case   18:  		/* lwz R9, <#[R1 + 80]> */
		/* 82131218h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82131218h case   18:*/		return 0x8213121C;
		  /* 8213121Ch */ case   19:  		/* stw R18, <#[R1 + 80]> */
		/* 8213121Ch case   19:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000050) );
		/* 8213121Ch case   19:*/		return 0x82131220;
		  /* 82131220h */ case   20:  		/* stwx R9, <#[R11 + R10]> */
		/* 82131220h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82131220h case   20:*/		return 0x82131224;
		  /* 82131224h */ case   21:  		/* lwz R11, <#[R27 + 552]> */
		/* 82131224h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000228) );
		/* 82131224h case   21:*/		return 0x82131228;
		  /* 82131228h */ case   22:  		/* addi R11, R11, 1 */
		/* 82131228h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82131228h case   22:*/		return 0x8213122C;
		  /* 8213122Ch */ case   23:  		/* stw R11, <#[R27 + 552]> */
		/* 8213122Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000228) );
		/* 8213122Ch case   23:*/		return 0x82131230;
		  /* 82131230h */ case   24:  		/* stw R18, <#[R25]> */
		/* 82131230h case   24:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R25 + 0x00000000) );
		/* 82131230h case   24:*/		return 0x82131234;
	}
	return 0x82131234;
} // Block from 821311D0h-82131234h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82131234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131234);
		  /* 82131234h */ case    0:  		/* addi R11, R29, 1 */
		/* 82131234h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1);
		/* 82131234h case    0:*/		return 0x82131238;
		  /* 82131238h */ case    1:  		/* addi R10, R28, 4 */
		/* 82131238h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x4);
		/* 82131238h case    1:*/		return 0x8213123C;
		  /* 8213123Ch */ case    2:  		/* stw R11, <#[R1 + 84]> */
		/* 8213123Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8213123Ch case    2:*/		return 0x82131240;
		  /* 82131240h */ case    3:  		/* cmplw CR6, R11, R30 */
		/* 82131240h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82131240h case    3:*/		return 0x82131244;
		  /* 82131244h */ case    4:  		/* stw R10, <#[R1 + 88]> */
		/* 82131244h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 82131244h case    4:*/		return 0x82131248;
		  /* 82131248h */ case    5:  		/* bc 12, CR6_LT, -1276 */
		/* 82131248h case    5:*/		if ( regs.CR[6].lt ) { return 0x82130D4C;  }
		/* 82131248h case    5:*/		return 0x8213124C;
	}
	return 0x8213124C;
} // Block from 82131234h-8213124Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213124Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213124C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213124C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213124C);
		  /* 8213124Ch */ case    0:  		/* mr R31, R18 */
		/* 8213124Ch case    0:*/		regs.R31 = regs.R18;
		/* 8213124Ch case    0:*/		return 0x82131250;
	}
	return 0x82131250;
} // Block from 8213124Ch-82131250h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131250h
// Function '?MovConsts@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131250);
		  /* 82131250h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 82131250h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82131250h case    0:*/		return 0x82131254;
		  /* 82131254h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82131254h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131268;  }
		/* 82131254h case    1:*/		return 0x82131258;
		  /* 82131258h */ case    2:  		/* mr R3, R15 */
		/* 82131258h case    2:*/		regs.R3 = regs.R15;
		/* 82131258h case    2:*/		return 0x8213125C;
		  /* 8213125Ch */ case    3:  		/* bl 967012 */
		/* 8213125Ch case    3:*/		regs.LR = 0x82131260; return 0x8221D3C0;
		/* 8213125Ch case    3:*/		return 0x82131260;
		  /* 82131260h */ case    4:  		/* mr R3, R15 */
		/* 82131260h case    4:*/		regs.R3 = regs.R15;
		/* 82131260h case    4:*/		return 0x82131264;
		  /* 82131264h */ case    5:  		/* bl -216180 */
		/* 82131264h case    5:*/		regs.LR = 0x82131268; return 0x820FC5F0;
		/* 82131264h case    5:*/		return 0x82131268;
	}
	return 0x82131268;
} // Block from 82131250h-82131268h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82131268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131268);
		  /* 82131268h */ case    0:  		/* lwz R30, <#[R1 + 80]> */
		/* 82131268h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 82131268h case    0:*/		return 0x8213126C;
		  /* 8213126Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8213126Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213126Ch case    1:*/		return 0x82131270;
		  /* 82131270h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82131270h case    2:*/		if ( regs.CR[6].eq ) { return 0x82131284;  }
		/* 82131270h case    2:*/		return 0x82131274;
		  /* 82131274h */ case    3:  		/* mr R3, R30 */
		/* 82131274h case    3:*/		regs.R3 = regs.R30;
		/* 82131274h case    3:*/		return 0x82131278;
		  /* 82131278h */ case    4:  		/* bl 966984 */
		/* 82131278h case    4:*/		regs.LR = 0x8213127C; return 0x8221D3C0;
		/* 82131278h case    4:*/		return 0x8213127C;
		  /* 8213127Ch */ case    5:  		/* mr R3, R30 */
		/* 8213127Ch case    5:*/		regs.R3 = regs.R30;
		/* 8213127Ch case    5:*/		return 0x82131280;
		  /* 82131280h */ case    6:  		/* bl -216208 */
		/* 82131280h case    6:*/		regs.LR = 0x82131284; return 0x820FC5F0;
		/* 82131280h case    6:*/		return 0x82131284;
	}
	return 0x82131284;
} // Block from 82131268h-82131284h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82131284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131284);
		  /* 82131284h */ case    0:  		/* mr R3, R31 */
		/* 82131284h case    0:*/		regs.R3 = regs.R31;
		/* 82131284h case    0:*/		return 0x82131288;
		  /* 82131288h */ case    1:  		/* addi R1, R1, 448 */
		/* 82131288h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1C0);
		/* 82131288h case    1:*/		return 0x8213128C;
		  /* 8213128Ch */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8213128Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8213128Ch case    2:*/		return 0x82131290;
		  /* 82131290h */ case    3:  		/* b -655392 */
		/* 82131290h case    3:*/		return 0x82091270;
		/* 82131290h case    3:*/		return 0x82131294;
	}
	return 0x82131294;
} // Block from 82131284h-82131294h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131294);
		  /* 82131294h */ case    0:  		/* lwz R11, <#[R27 + 260]> */
		/* 82131294h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000104) );
		/* 82131294h case    0:*/		return 0x82131298;
		  /* 82131298h */ case    1:  		/* lis R10, -32253 */
		/* 82131298h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82131298h case    1:*/		return 0x8213129C;
		  /* 8213129Ch */ case    2:  		/* li R5, 4533 */
		/* 8213129Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B5);
		/* 8213129Ch case    2:*/		return 0x821312A0;
		  /* 821312A0h */ case    3:  		/* addi R6, R10, 20140 */
		/* 821312A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x4EAC);
		/* 821312A0h case    3:*/		return 0x821312A4;
		  /* 821312A4h */ case    4:  		/* mr R3, R27 */
		/* 821312A4h case    4:*/		regs.R3 = regs.R27;
		/* 821312A4h case    4:*/		return 0x821312A8;
		  /* 821312A8h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 821312A8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 821312A8h case    5:*/		return 0x821312AC;
		  /* 821312ACh */ case    6:  		/* bl -142204 */
		/* 821312ACh case    6:*/		regs.LR = 0x821312B0; return 0x8210E730;
		/* 821312ACh case    6:*/		return 0x821312B0;
		  /* 821312B0h */ case    7:  		/* lis R31, -32768 */
		/* 821312B0h case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 821312B0h case    7:*/		return 0x821312B4;
		  /* 821312B4h */ case    8:  		/* ori R31, R31, 16389 */
		/* 821312B4h case    8:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 821312B4h case    8:*/		return 0x821312B8;
		  /* 821312B8h */ case    9:  		/* b -52 */
		/* 821312B8h case    9:*/		return 0x82131284;
		/* 821312B8h case    9:*/		return 0x821312BC;
	}
	return 0x821312BC;
} // Block from 82131294h-821312BCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821312BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821312BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821312BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821312BC);
		  /* 821312BCh */ case    0:  		/* lwz R11, <#[R27 + 260]> */
		/* 821312BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000104) );
		/* 821312BCh case    0:*/		return 0x821312C0;
		  /* 821312C0h */ case    1:  		/* lis R10, -32253 */
		/* 821312C0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821312C0h case    1:*/		return 0x821312C4;
		  /* 821312C4h */ case    2:  		/* li R5, 4533 */
		/* 821312C4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B5);
		/* 821312C4h case    2:*/		return 0x821312C8;
		  /* 821312C8h */ case    3:  		/* addi R6, R10, 20140 */
		/* 821312C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x4EAC);
		/* 821312C8h case    3:*/		return 0x821312CC;
		  /* 821312CCh */ case    4:  		/* mr R3, R27 */
		/* 821312CCh case    4:*/		regs.R3 = regs.R27;
		/* 821312CCh case    4:*/		return 0x821312D0;
		  /* 821312D0h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 821312D0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 821312D0h case    5:*/		return 0x821312D4;
		  /* 821312D4h */ case    6:  		/* bl -142244 */
		/* 821312D4h case    6:*/		regs.LR = 0x821312D8; return 0x8210E730;
		/* 821312D4h case    6:*/		return 0x821312D8;
		  /* 821312D8h */ case    7:  		/* lis R31, -32768 */
		/* 821312D8h case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 821312D8h case    7:*/		return 0x821312DC;
		  /* 821312DCh */ case    8:  		/* ori R31, R31, 16389 */
		/* 821312DCh case    8:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 821312DCh case    8:*/		return 0x821312E0;
		  /* 821312E0h */ case    9:  		/* b -144 */
		/* 821312E0h case    9:*/		return 0x82131250;
		/* 821312E0h case    9:*/		return 0x821312E4;
	}
	return 0x821312E4;
} // Block from 821312BCh-821312E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821312E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821312E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821312E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821312E4);
		  /* 821312E4h */ case    0:  		/* lis R31, -32761 */
		/* 821312E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 821312E4h case    0:*/		return 0x821312E8;
		  /* 821312E8h */ case    1:  		/* ori R31, R31, 14 */
		/* 821312E8h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 821312E8h case    1:*/		return 0x821312EC;
		  /* 821312ECh */ case    2:  		/* b -156 */
		/* 821312ECh case    2:*/		return 0x82131250;
		/* 821312ECh case    2:*/		return 0x821312F0;
	}
	return 0x821312F0;
} // Block from 821312E4h-821312F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821312F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821312F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821312F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821312F0);
		  /* 821312F0h */ case    0:  		/* mfspr R12, LR */
		/* 821312F0h case    0:*/		regs.R12 = regs.LR;
		/* 821312F0h case    0:*/		return 0x821312F4;
		  /* 821312F4h */ case    1:  		/* bl -655544 */
		/* 821312F4h case    1:*/		regs.LR = 0x821312F8; return 0x8209123C;
		/* 821312F4h case    1:*/		return 0x821312F8;
		  /* 821312F8h */ case    2:  		/* stfd FR29, <#[R1 - 120]> */
		/* 821312F8h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821312F8h case    2:*/		return 0x821312FC;
		  /* 821312FCh */ case    3:  		/* stfd FR30, <#[R1 - 112]> */
		/* 821312FCh case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 821312FCh case    3:*/		return 0x82131300;
		  /* 82131300h */ case    4:  		/* stfd FR31, <#[R1 - 104]> */
		/* 82131300h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 82131300h case    4:*/		return 0x82131304;
		  /* 82131304h */ case    5:  		/* stwu R1, <#[R1 - 208]> */
		/* 82131304h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82131304h case    5:*/		return 0x82131308;
		  /* 82131308h */ case    6:  		/* lwz R11, <#[R3 + 8]> */
		/* 82131308h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82131308h case    6:*/		return 0x8213130C;
		  /* 8213130Ch */ case    7:  		/* mr R30, R3 */
		/* 8213130Ch case    7:*/		regs.R30 = regs.R3;
		/* 8213130Ch case    7:*/		return 0x82131310;
		  /* 82131310h */ case    8:  		/* li R23, 0 */
		/* 82131310h case    8:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82131310h case    8:*/		return 0x82131314;
		  /* 82131314h */ case    9:  		/* li R6, 0 */
		/* 82131314h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82131314h case    9:*/		return 0x82131318;
		  /* 82131318h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82131318h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82131318h case   10:*/		return 0x8213131C;
		  /* 8213131Ch */ case   11:  		/* bc 4, CR6_GT, 76 */
		/* 8213131Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x82131368;  }
		/* 8213131Ch case   11:*/		return 0x82131320;
		  /* 82131320h */ case   12:  		/* lwz R9, <#[R3 + 136]> */
		/* 82131320h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000088) );
		/* 82131320h case   12:*/		return 0x82131324;
		  /* 82131324h */ case   13:  		/* li R11, 0 */
		/* 82131324h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82131324h case   13:*/		return 0x82131328;
		  /* 82131328h */ case   14:  		/* lwz R8, <#[R3 + 20]> */
		/* 82131328h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 82131328h case   14:*/		return 0x8213132C;
		  /* 8213132Ch */ case   15:  		/* lwz R7, <#[R3 + 8]> */
		/* 8213132Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000008) );
		/* 8213132Ch case   15:*/		return 0x82131330;
		  /* 82131330h */ case   16:  		/* lwzx R10, <#[R8 + R11]> */
		/* 82131330h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82131330h case   16:*/		return 0x82131334;
		  /* 82131334h */ case   17:  		/* lwz R5, <#[R10 + 4]> */
		/* 82131334h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 82131334h case   17:*/		return 0x82131338;
		  /* 82131338h */ case   18:  		/* cmplw CR6, R9, R5 */
		/* 82131338h case   18:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R5);
		/* 82131338h case   18:*/		return 0x8213133C;
		  /* 8213133Ch */ case   19:  		/* bc 4, CR6_EQ, 28 */
		/* 8213133Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x82131358;  }
		/* 8213133Ch case   19:*/		return 0x82131340;
		  /* 82131340h */ case   20:  		/* lwz R10, <#[R10 + 12]> */
		/* 82131340h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82131340h case   20:*/		return 0x82131344;
		  /* 82131344h */ case   21:  		/* cmpwi CR6, R10, -1 */
		/* 82131344h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82131344h case   21:*/		return 0x82131348;
		  /* 82131348h */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 82131348h case   22:*/		if ( regs.CR[6].eq ) { return 0x82131358;  }
		/* 82131348h case   22:*/		return 0x8213134C;
		  /* 8213134Ch */ case   23:  		/* cmplw CR6, R10, R23 */
		/* 8213134Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R23);
		/* 8213134Ch case   23:*/		return 0x82131350;
		  /* 82131350h */ case   24:  		/* bc 12, CR6_LT, 8 */
		/* 82131350h case   24:*/		if ( regs.CR[6].lt ) { return 0x82131358;  }
		/* 82131350h case   24:*/		return 0x82131354;
		  /* 82131354h */ case   25:  		/* addi R23, R10, 1 */
		/* 82131354h case   25:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x1);
		/* 82131354h case   25:*/		return 0x82131358;
	}
	return 0x82131358;
} // Block from 821312F0h-82131358h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82131358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131358);
		  /* 82131358h */ case    0:  		/* addi R6, R6, 1 */
		/* 82131358h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82131358h case    0:*/		return 0x8213135C;
		  /* 8213135Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 8213135Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213135Ch case    1:*/		return 0x82131360;
		  /* 82131360h */ case    2:  		/* cmplw CR6, R6, R7 */
		/* 82131360h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 82131360h case    2:*/		return 0x82131364;
		  /* 82131364h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 82131364h case    3:*/		if ( regs.CR[6].lt ) { return 0x82131330;  }
		/* 82131364h case    3:*/		return 0x82131368;
	}
	return 0x82131368;
} // Block from 82131358h-82131368h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131368);
		  /* 82131368h */ case    0:  		/* lwz R21, <#[R30 + 552]> */
		/* 82131368h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R30 + 0x00000228) );
		/* 82131368h case    0:*/		return 0x8213136C;
		  /* 8213136Ch */ case    1:  		/* lwz R25, <#[R30 + 76]> */
		/* 8213136Ch case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R30 + 0x0000004C) );
		/* 8213136Ch case    1:*/		return 0x82131370;
		  /* 82131370h */ case    2:  		/* cmplw CR6, R25, R21 */
		/* 82131370h case    2:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R21);
		/* 82131370h case    2:*/		return 0x82131374;
		  /* 82131374h */ case    3:  		/* bc 4, CR6_LT, 1420 */
		/* 82131374h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82131900;  }
		/* 82131374h case    3:*/		return 0x82131378;
		  /* 82131378h */ case    4:  		/* lis R11, -32256 */
		/* 82131378h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82131378h case    4:*/		return 0x8213137C;
		  /* 8213137Ch */ case    5:  		/* lis R10, -32255 */
		/* 8213137Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8213137Ch case    5:*/		return 0x82131380;
		  /* 82131380h */ case    6:  		/* lis R9, -32256 */
		/* 82131380h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82131380h case    6:*/		return 0x82131384;
		  /* 82131384h */ case    7:  		/* rlwinm R22, R25, 2, 0, 29 */
		/* 82131384h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R22,regs.R25);
		/* 82131384h case    7:*/		return 0x82131388;
		  /* 82131388h */ case    8:  		/* li R24, 1 */
		/* 82131388h case    8:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82131388h case    8:*/		return 0x8213138C;
		  /* 8213138Ch */ case    9:  		/* lfd FR29, <#[R11 + 4736]> */
		/* 8213138Ch case    9:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00001280) );
		/* 8213138Ch case    9:*/		return 0x82131390;
		  /* 82131390h */ case   10:  		/* lfd FR30, <#[R10 - 24488]> */
		/* 82131390h case   10:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R10 + 0xFFFFA058) );
		/* 82131390h case   10:*/		return 0x82131394;
		  /* 82131394h */ case   11:  		/* lfd FR31, <#[R9 + 1808]> */
		/* 82131394h case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R9 + 0x00000710) );
		/* 82131394h case   11:*/		return 0x82131398;
		  /* 82131398h */ case   12:  		/* lwz R11, <#[R30 + 564]> */
		/* 82131398h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000234) );
		/* 82131398h case   12:*/		return 0x8213139C;
		  /* 8213139Ch */ case   13:  		/* lwzx R27, <#[R11 + R22]> */
		/* 8213139Ch case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 8213139Ch case   13:*/		return 0x821313A0;
		  /* 821313A0h */ case   14:  		/* cmplwi CR6, R27, 0 */
		/* 821313A0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821313A0h case   14:*/		return 0x821313A4;
		  /* 821313A4h */ case   15:  		/* bc 12, CR6_EQ, 1356 */
		/* 821313A4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821318F0;  }
		/* 821313A4h case   15:*/		return 0x821313A8;
		  /* 821313A8h */ case   16:  		/* lwz R11, <#[R27]> */
		/* 821313A8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821313A8h case   16:*/		return 0x821313AC;
		  /* 821313ACh */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821313ACh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821313ACh case   17:*/		return 0x821313B0;
		  /* 821313B0h */ case   18:  		/* bc 12, CR6_EQ, 1344 */
		/* 821313B0h case   18:*/		if ( regs.CR[6].eq ) { return 0x821318F0;  }
		/* 821313B0h case   18:*/		return 0x821313B4;
		  /* 821313B4h */ case   19:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 821313B4h case   19:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 821313B4h case   19:*/		return 0x821313B8;
		  /* 821313B8h */ case   20:  		/* lis R9, 28688 */
		/* 821313B8h case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0x7010);
		/* 821313B8h case   20:*/		return 0x821313BC;
		  /* 821313BCh */ case   21:  		/* rlwinm R26, R11, 0, 12, 31 */
		/* 821313BCh case   21:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R11);
		/* 821313BCh case   21:*/		return 0x821313C0;
		  /* 821313C0h */ case   22:  		/* cmplw CR6, R10, R9 */
		/* 821313C0h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821313C0h case   22:*/		return 0x821313C4;
		  /* 821313C4h */ case   23:  		/* bc 4, CR6_EQ, 416 */
		/* 821313C4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82131564;  }
		/* 821313C4h case   23:*/		return 0x821313C8;
		  /* 821313C8h */ case   24:  		/* lwz R10, <#[R27 + 8]> */
		/* 821313C8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821313C8h case   24:*/		return 0x821313CC;
		  /* 821313CCh */ case   25:  		/* lwz R9, <#[R30 + 20]> */
		/* 821313CCh case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 821313CCh case   25:*/		return 0x821313D0;
		  /* 821313D0h */ case   26:  		/* lwz R11, <#[R30 + 16]> */
		/* 821313D0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821313D0h case   26:*/		return 0x821313D4;
		  /* 821313D4h */ case   27:  		/* lwz R8, <#[R10]> */
		/* 821313D4h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821313D4h case   27:*/		return 0x821313D8;
		  /* 821313D8h */ case   28:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821313D8h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821313D8h case   28:*/		return 0x821313DC;
		  /* 821313DCh */ case   29:  		/* lwzx R8, <#[R8 + R9]> */
		/* 821313DCh case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 821313DCh case   29:*/		return 0x821313E0;
		  /* 821313E0h */ case   30:  		/* lwz R8, <#[R8 + 4]> */
		/* 821313E0h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821313E0h case   30:*/		return 0x821313E4;
		  /* 821313E4h */ case   31:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821313E4h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821313E4h case   31:*/		return 0x821313E8;
		  /* 821313E8h */ case   32:  		/* lwzx R8, <#[R8 + R11]> */
		/* 821313E8h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821313E8h case   32:*/		return 0x821313EC;
		  /* 821313ECh */ case   33:  		/* lwz R8, <#[R8 + 4]> */
		/* 821313ECh case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821313ECh case   33:*/		return 0x821313F0;
		  /* 821313F0h */ case   34:  		/* rlwinm. R8, R8, 0, 22, 22 */
		/* 821313F0h case   34:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R8,regs.R8);
		/* 821313F0h case   34:*/		return 0x821313F4;
		  /* 821313F4h */ case   35:  		/* bc 12, CR0_EQ, 368 */
		/* 821313F4h case   35:*/		if ( regs.CR[0].eq ) { return 0x82131564;  }
		/* 821313F4h case   35:*/		return 0x821313F8;
		  /* 821313F8h */ case   36:  		/* rlwinm R8, R26, 2, 0, 29 */
		/* 821313F8h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R26);
		/* 821313F8h case   36:*/		return 0x821313FC;
		  /* 821313FCh */ case   37:  		/* lwzx R8, <#[R8 + R10]> */
		/* 821313FCh case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 821313FCh case   37:*/		return 0x82131400;
		  /* 82131400h */ case   38:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82131400h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82131400h case   38:*/		return 0x82131404;
		  /* 82131404h */ case   39:  		/* lwzx R8, <#[R8 + R9]> */
		/* 82131404h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82131404h case   39:*/		return 0x82131408;
		  /* 82131408h */ case   40:  		/* lwz R8, <#[R8 + 4]> */
		/* 82131408h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 82131408h case   40:*/		return 0x8213140C;
		  /* 8213140Ch */ case   41:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213140Ch case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213140Ch case   41:*/		return 0x82131410;
		  /* 82131410h */ case   42:  		/* lwzx R8, <#[R8 + R11]> */
		/* 82131410h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82131410h case   42:*/		return 0x82131414;
		  /* 82131414h */ case   43:  		/* lwz R8, <#[R8 + 4]> */
		/* 82131414h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 82131414h case   43:*/		return 0x82131418;
		  /* 82131418h */ case   44:  		/* rlwinm. R8, R8, 0, 22, 22 */
		/* 82131418h case   44:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R8,regs.R8);
		/* 82131418h case   44:*/		return 0x8213141C;
		  /* 8213141Ch */ case   45:  		/* bc 12, CR0_EQ, 328 */
		/* 8213141Ch case   45:*/		if ( regs.CR[0].eq ) { return 0x82131564;  }
		/* 8213141Ch case   45:*/		return 0x82131420;
		  /* 82131420h */ case   46:  		/* rlwinm R8, R26, 3, 0, 28 */
		/* 82131420h case   46:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R26);
		/* 82131420h case   46:*/		return 0x82131424;
		  /* 82131424h */ case   47:  		/* lwzx R10, <#[R8 + R10]> */
		/* 82131424h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82131424h case   47:*/		return 0x82131428;
		  /* 82131428h */ case   48:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82131428h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82131428h case   48:*/		return 0x8213142C;
		  /* 8213142Ch */ case   49:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8213142Ch case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213142Ch case   49:*/		return 0x82131430;
		  /* 82131430h */ case   50:  		/* lwz R10, <#[R10 + 4]> */
		/* 82131430h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82131430h case   50:*/		return 0x82131434;
		  /* 82131434h */ case   51:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82131434h case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82131434h case   51:*/		return 0x82131438;
		  /* 82131438h */ case   52:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82131438h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82131438h case   52:*/		return 0x8213143C;
		  /* 8213143Ch */ case   53:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213143Ch case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213143Ch case   53:*/		return 0x82131440;
		  /* 82131440h */ case   54:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 82131440h case   54:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 82131440h case   54:*/		return 0x82131444;
		  /* 82131444h */ case   55:  		/* bc 12, CR0_EQ, 288 */
		/* 82131444h case   55:*/		if ( regs.CR[0].eq ) { return 0x82131564;  }
		/* 82131444h case   55:*/		return 0x82131448;
		  /* 82131448h */ case   56:  		/* li R3, 116 */
		/* 82131448h case   56:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82131448h case   56:*/		return 0x8213144C;
		  /* 8213144Ch */ case   57:  		/* bl -216756 */
		/* 8213144Ch case   57:*/		regs.LR = 0x82131450; return 0x820FC598;
		/* 8213144Ch case   57:*/		return 0x82131450;
		  /* 82131450h */ case   58:  		/* cmplwi CR0, R3, 0 */
		/* 82131450h case   58:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82131450h case   58:*/		return 0x82131454;
		  /* 82131454h */ case   59:  		/* bc 12, CR0_EQ, 16 */
		/* 82131454h case   59:*/		if ( regs.CR[0].eq ) { return 0x82131464;  }
		/* 82131454h case   59:*/		return 0x82131458;
		  /* 82131458h */ case   60:  		/* bl -218552 */
		/* 82131458h case   60:*/		regs.LR = 0x8213145C; return 0x820FBEA0;
		/* 82131458h case   60:*/		return 0x8213145C;
		  /* 8213145Ch */ case   61:  		/* mr R29, R3 */
		/* 8213145Ch case   61:*/		regs.R29 = regs.R3;
		/* 8213145Ch case   61:*/		return 0x82131460;
		  /* 82131460h */ case   62:  		/* b 8 */
		/* 82131460h case   62:*/		return 0x82131468;
		/* 82131460h case   62:*/		return 0x82131464;
	}
	return 0x82131464;
} // Block from 82131368h-82131464h (63 instructions)

//////////////////////////////////////////////////////
// Block at 82131464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131464);
		  /* 82131464h */ case    0:  		/* li R29, 0 */
		/* 82131464h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82131464h case    0:*/		return 0x82131468;
	}
	return 0x82131468;
} // Block from 82131464h-82131468h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131468);
		  /* 82131468h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82131468h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82131468h case    0:*/		return 0x8213146C;
		  /* 8213146Ch */ case    1:  		/* bc 12, CR6_EQ, 1324 */
		/* 8213146Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 8213146Ch case    1:*/		return 0x82131470;
		  /* 82131470h */ case    2:  		/* mr R4, R26 */
		/* 82131470h case    2:*/		regs.R4 = regs.R26;
		/* 82131470h case    2:*/		return 0x82131474;
		  /* 82131474h */ case    3:  		/* li R7, 0 */
		/* 82131474h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82131474h case    3:*/		return 0x82131478;
		  /* 82131478h */ case    4:  		/* rlwimi R4, R24, 28, 0, 11 */
		/* 82131478h case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R24);
		/* 82131478h case    4:*/		return 0x8213147C;
		  /* 8213147Ch */ case    5:  		/* mr R6, R26 */
		/* 8213147Ch case    5:*/		regs.R6 = regs.R26;
		/* 8213147Ch case    5:*/		return 0x82131480;
		  /* 82131480h */ case    6:  		/* mr R5, R26 */
		/* 82131480h case    6:*/		regs.R5 = regs.R26;
		/* 82131480h case    6:*/		return 0x82131484;
		  /* 82131484h */ case    7:  		/* mr R3, R29 */
		/* 82131484h case    7:*/		regs.R3 = regs.R29;
		/* 82131484h case    7:*/		return 0x82131488;
	}
	return 0x82131488;
} // Block from 82131468h-82131488h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82131488h
// Function '?CheckDegenShader@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131488);
		  /* 82131488h */ case    0:  		/* bl -216664 */
		/* 82131488h case    0:*/		regs.LR = 0x8213148C; return 0x820FC630;
		/* 82131488h case    0:*/		return 0x8213148C;
		  /* 8213148Ch */ case    1:  		/* or. R31, R3, R3 */
		/* 8213148Ch case    1:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8213148Ch case    1:*/		return 0x82131490;
		  /* 82131490h */ case    2:  		/* bc 12, CR0_LT, 1188 */
		/* 82131490h case    2:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 82131490h case    2:*/		return 0x82131494;
		  /* 82131494h */ case    3:  		/* mr R4, R27 */
		/* 82131494h case    3:*/		regs.R4 = regs.R27;
		/* 82131494h case    3:*/		return 0x82131498;
		  /* 82131498h */ case    4:  		/* mr R3, R29 */
		/* 82131498h case    4:*/		regs.R3 = regs.R29;
		/* 82131498h case    4:*/		return 0x8213149C;
		  /* 8213149Ch */ case    5:  		/* bl -218540 */
		/* 8213149Ch case    5:*/		regs.LR = 0x821314A0; return 0x820FBEF0;
		/* 8213149Ch case    5:*/		return 0x821314A0;
		  /* 821314A0h */ case    6:  		/* or. R31, R3, R3 */
		/* 821314A0h case    6:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821314A0h case    6:*/		return 0x821314A4;
		  /* 821314A4h */ case    7:  		/* bc 12, CR0_LT, 1168 */
		/* 821314A4h case    7:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 821314A4h case    7:*/		return 0x821314A8;
		  /* 821314A8h */ case    8:  		/* li R28, 0 */
		/* 821314A8h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821314A8h case    8:*/		return 0x821314AC;
		  /* 821314ACh */ case    9:  		/* cmplwi CR6, R26, 0 */
		/* 821314ACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821314ACh case    9:*/		return 0x821314B0;
		  /* 821314B0h */ case   10:  		/* bc 12, CR6_EQ, 116 */
		/* 821314B0h case   10:*/		if ( regs.CR[6].eq ) { return 0x82131524;  }
		/* 821314B0h case   10:*/		return 0x821314B4;
		  /* 821314B4h */ case   11:  		/* li R31, 0 */
		/* 821314B4h case   11:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821314B4h case   11:*/		return 0x821314B8;
		  /* 821314B8h */ case   12:  		/* lwz R11, <#[R27 + 16]> */
		/* 821314B8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821314B8h case   12:*/		return 0x821314BC;
		  /* 821314BCh */ case   13:  		/* mr R5, R23 */
		/* 821314BCh case   13:*/		regs.R5 = regs.R23;
		/* 821314BCh case   13:*/		return 0x821314C0;
		  /* 821314C0h */ case   14:  		/* lwz R10, <#[R27 + 8]> */
		/* 821314C0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821314C0h case   14:*/		return 0x821314C4;
		  /* 821314C4h */ case   15:  		/* mr R3, R30 */
		/* 821314C4h case   15:*/		regs.R3 = regs.R30;
		/* 821314C4h case   15:*/		return 0x821314C8;
		  /* 821314C8h */ case   16:  		/* lwz R9, <#[R30 + 20]> */
		/* 821314C8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 821314C8h case   16:*/		return 0x821314CC;
		  /* 821314CCh */ case   17:  		/* fmr FR1, FR31 */
		/* 821314CCh case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821314CCh case   17:*/		return 0x821314D0;
		  /* 821314D0h */ case   18:  		/* lwz R8, <#[R29 + 8]> */
		/* 821314D0h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 821314D0h case   18:*/		return 0x821314D4;
		  /* 821314D4h */ case   19:  		/* lwzx R11, <#[R31 + R11]> */
		/* 821314D4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821314D4h case   19:*/		return 0x821314D8;
		  /* 821314D8h */ case   20:  		/* lwzx R10, <#[R10 + R31]> */
		/* 821314D8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821314D8h case   20:*/		return 0x821314DC;
		  /* 821314DCh */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821314DCh case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821314DCh case   21:*/		return 0x821314E0;
		  /* 821314E0h */ case   22:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821314E0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821314E0h case   22:*/		return 0x821314E4;
		  /* 821314E4h */ case   23:  		/* stwx R10, <#[R8 + R31]> */
		/* 821314E4h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 821314E4h case   23:*/		return 0x821314E8;
		  /* 821314E8h */ case   24:  		/* lwz R4, <#[R30 + 136]> */
		/* 821314E8h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000088) );
		/* 821314E8h case   24:*/		return 0x821314EC;
		  /* 821314ECh */ case   25:  		/* lwz R6, <#[R11 + 16]> */
		/* 821314ECh case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 821314ECh case   25:*/		return 0x821314F0;
		  /* 821314F0h */ case   26:  		/* bl -213704 */
		/* 821314F0h case   26:*/		regs.LR = 0x821314F4; return 0x820FD228;
		/* 821314F0h case   26:*/		return 0x821314F4;
		  /* 821314F4h */ case   27:  		/* lwz R11, <#[R29 + 16]> */
		/* 821314F4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821314F4h case   27:*/		return 0x821314F8;
		  /* 821314F8h */ case   28:  		/* stwx R3, <#[R11 + R31]> */
		/* 821314F8h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821314F8h case   28:*/		return 0x821314FC;
		  /* 821314FCh */ case   29:  		/* lwz R11, <#[R27 + 8]> */
		/* 821314FCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821314FCh case   29:*/		return 0x82131500;
		  /* 82131500h */ case   30:  		/* stwx R3, <#[R11 + R31]> */
		/* 82131500h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82131500h case   30:*/		return 0x82131504;
		  /* 82131504h */ case   31:  		/* lwz R11, <#[R29 + 16]> */
		/* 82131504h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82131504h case   31:*/		return 0x82131508;
		  /* 82131508h */ case   32:  		/* lwzx R11, <#[R11 + R31]> */
		/* 82131508h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82131508h case   32:*/		return 0x8213150C;
		  /* 8213150Ch */ case   33:  		/* cmpwi CR6, R11, -1 */
		/* 8213150Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213150Ch case   33:*/		return 0x82131510;
		  /* 82131510h */ case   34:  		/* bc 12, CR6_EQ, 1160 */
		/* 82131510h case   34:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 82131510h case   34:*/		return 0x82131514;
		  /* 82131514h */ case   35:  		/* addi R28, R28, 1 */
		/* 82131514h case   35:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82131514h case   35:*/		return 0x82131518;
		  /* 82131518h */ case   36:  		/* addi R31, R31, 4 */
		/* 82131518h case   36:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82131518h case   36:*/		return 0x8213151C;
		  /* 8213151Ch */ case   37:  		/* cmplw CR6, R28, R26 */
		/* 8213151Ch case   37:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 8213151Ch case   37:*/		return 0x82131520;
		  /* 82131520h */ case   38:  		/* bc 12, CR6_LT, -104 */
		/* 82131520h case   38:*/		if ( regs.CR[6].lt ) { return 0x821314B8;  }
		/* 82131520h case   38:*/		return 0x82131524;
	}
	return 0x82131524;
} // Block from 82131488h-82131524h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82131524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131524);
		  /* 82131524h */ case    0:  		/* lwz R11, <#[R30 + 552]> */
		/* 82131524h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131524h case    0:*/		return 0x82131528;
		  /* 82131528h */ case    1:  		/* addi R23, R23, 1 */
		/* 82131528h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82131528h case    1:*/		return 0x8213152C;
		  /* 8213152Ch */ case    2:  		/* cmplwi CR6, R11, 512 */
		/* 8213152Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213152Ch case    2:*/		return 0x82131530;
		  /* 82131530h */ case    3:  		/* bc 4, CR6_LT, 1128 */
		/* 82131530h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82131998;  }
		/* 82131530h case    3:*/		return 0x82131534;
		  /* 82131534h */ case    4:  		/* mr R4, R29 */
		/* 82131534h case    4:*/		regs.R4 = regs.R29;
		/* 82131534h case    4:*/		return 0x82131538;
		  /* 82131538h */ case    5:  		/* mr R3, R30 */
		/* 82131538h case    5:*/		regs.R3 = regs.R30;
		/* 82131538h case    5:*/		return 0x8213153C;
		  /* 8213153Ch */ case    6:  		/* bl -214148 */
		/* 8213153Ch case    6:*/		regs.LR = 0x82131540; return 0x820FD0B8;
		/* 8213153Ch case    6:*/		return 0x82131540;
		  /* 82131540h */ case    7:  		/* or. R31, R3, R3 */
		/* 82131540h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82131540h case    7:*/		return 0x82131544;
		  /* 82131544h */ case    8:  		/* bc 12, CR0_LT, 1008 */
		/* 82131544h case    8:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 82131544h case    8:*/		return 0x82131548;
		  /* 82131548h */ case    9:  		/* lwz R11, <#[R30 + 552]> */
		/* 82131548h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131548h case    9:*/		return 0x8213154C;
		  /* 8213154Ch */ case   10:  		/* lwz R10, <#[R30 + 564]> */
		/* 8213154Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000234) );
		/* 8213154Ch case   10:*/		return 0x82131550;
		  /* 82131550h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82131550h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82131550h case   11:*/		return 0x82131554;
		  /* 82131554h */ case   12:  		/* stwx R29, <#[R11 + R10]> */
		/* 82131554h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82131554h case   12:*/		return 0x82131558;
		  /* 82131558h */ case   13:  		/* lwz R11, <#[R30 + 552]> */
		/* 82131558h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131558h case   13:*/		return 0x8213155C;
		  /* 8213155Ch */ case   14:  		/* addi R11, R11, 1 */
		/* 8213155Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213155Ch case   14:*/		return 0x82131560;
		  /* 82131560h */ case   15:  		/* stw R11, <#[R30 + 552]> */
		/* 82131560h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131560h case   15:*/		return 0x82131564;
	}
	return 0x82131564;
} // Block from 82131524h-82131564h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82131564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131564);
		  /* 82131564h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 82131564h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82131564h case    0:*/		return 0x82131568;
		  /* 82131568h */ case    1:  		/* lis R10, 12288 */
		/* 82131568h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x3000);
		/* 82131568h case    1:*/		return 0x8213156C;
		  /* 8213156Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213156Ch case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213156Ch case    2:*/		return 0x82131570;
		  /* 82131570h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82131570h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82131570h case    3:*/		return 0x82131574;
		  /* 82131574h */ case    4:  		/* bc 4, CR6_EQ, 772 */
		/* 82131574h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82131878;  }
		/* 82131574h case    4:*/		return 0x82131578;
		  /* 82131578h */ case    5:  		/* lwz R7, <#[R30 + 200]> */
		/* 82131578h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x000000C8) );
		/* 82131578h case    5:*/		return 0x8213157C;
		  /* 8213157Ch */ case    6:  		/* rlwinm R11, R7, 0, 16, 31 */
		/* 8213157Ch case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R7);
		/* 8213157Ch case    6:*/		return 0x82131580;
		  /* 82131580h */ case    7:  		/* cmplwi CR6, R11, 260 */
		/* 82131580h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 82131580h case    7:*/		return 0x82131584;
		  /* 82131584h */ case    8:  		/* bc 12, CR6_EQ, 756 */
		/* 82131584h case    8:*/		if ( regs.CR[6].eq ) { return 0x82131878;  }
		/* 82131584h case    8:*/		return 0x82131588;
		  /* 82131588h */ case    9:  		/* mr R9, R24 */
		/* 82131588h case    9:*/		regs.R9 = regs.R24;
		/* 82131588h case    9:*/		return 0x8213158C;
		  /* 8213158Ch */ case   10:  		/* cmplwi CR6, R26, 1 */
		/* 8213158Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 8213158Ch case   10:*/		return 0x82131590;
		  /* 82131590h */ case   11:  		/* bc 4, CR6_GT, 44 */
		/* 82131590h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821315BC;  }
		/* 82131590h case   11:*/		return 0x82131594;
		  /* 82131594h */ case   12:  		/* lwz R10, <#[R27 + 8]> */
		/* 82131594h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 82131594h case   12:*/		return 0x82131598;
		  /* 82131598h */ case   13:  		/* li R11, 4 */
		/* 82131598h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82131598h case   13:*/		return 0x8213159C;
		  /* 8213159Ch */ case   14:  		/* lwz R8, <#[R10]> */
		/* 8213159Ch case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8213159Ch case   14:*/		return 0x821315A0;
		  /* 821315A0h */ case   15:  		/* lwzx R6, <#[R10 + R11]> */
		/* 821315A0h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821315A0h case   15:*/		return 0x821315A4;
		  /* 821315A4h */ case   16:  		/* cmplw CR6, R8, R6 */
		/* 821315A4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 821315A4h case   16:*/		return 0x821315A8;
		  /* 821315A8h */ case   17:  		/* bc 4, CR6_EQ, 932 */
		/* 821315A8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213194C;  }
		/* 821315A8h case   17:*/		return 0x821315AC;
		  /* 821315ACh */ case   18:  		/* addi R9, R9, 1 */
		/* 821315ACh case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821315ACh case   18:*/		return 0x821315B0;
		  /* 821315B0h */ case   19:  		/* addi R11, R11, 4 */
		/* 821315B0h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821315B0h case   19:*/		return 0x821315B4;
		  /* 821315B4h */ case   20:  		/* cmplw CR6, R9, R26 */
		/* 821315B4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821315B4h case   20:*/		return 0x821315B8;
		  /* 821315B8h */ case   21:  		/* bc 12, CR6_LT, -24 */
		/* 821315B8h case   21:*/		if ( regs.CR[6].lt ) { return 0x821315A0;  }
		/* 821315B8h case   21:*/		return 0x821315BC;
	}
	return 0x821315BC;
} // Block from 82131564h-821315BCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 821315BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821315BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821315BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821315BC);
		  /* 821315BCh */ case    0:  		/* li R3, 116 */
		/* 821315BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 821315BCh case    0:*/		return 0x821315C0;
		  /* 821315C0h */ case    1:  		/* bl -217128 */
		/* 821315C0h case    1:*/		regs.LR = 0x821315C4; return 0x820FC598;
		/* 821315C0h case    1:*/		return 0x821315C4;
		  /* 821315C4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821315C4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821315C4h case    2:*/		return 0x821315C8;
		  /* 821315C8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821315C8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821315D8;  }
		/* 821315C8h case    3:*/		return 0x821315CC;
		  /* 821315CCh */ case    4:  		/* bl -218924 */
		/* 821315CCh case    4:*/		regs.LR = 0x821315D0; return 0x820FBEA0;
		/* 821315CCh case    4:*/		return 0x821315D0;
		  /* 821315D0h */ case    5:  		/* mr R29, R3 */
		/* 821315D0h case    5:*/		regs.R29 = regs.R3;
		/* 821315D0h case    5:*/		return 0x821315D4;
		  /* 821315D4h */ case    6:  		/* b 8 */
		/* 821315D4h case    6:*/		return 0x821315DC;
		/* 821315D4h case    6:*/		return 0x821315D8;
	}
	return 0x821315D8;
} // Block from 821315BCh-821315D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821315D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821315D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821315D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821315D8);
		  /* 821315D8h */ case    0:  		/* li R29, 0 */
		/* 821315D8h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821315D8h case    0:*/		return 0x821315DC;
	}
	return 0x821315DC;
} // Block from 821315D8h-821315DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821315DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821315DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821315DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821315DC);
		  /* 821315DCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821315DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821315DCh case    0:*/		return 0x821315E0;
		  /* 821315E0h */ case    1:  		/* bc 12, CR6_EQ, 952 */
		/* 821315E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 821315E0h case    1:*/		return 0x821315E4;
		  /* 821315E4h */ case    2:  		/* mr R4, R29 */
		/* 821315E4h case    2:*/		regs.R4 = regs.R29;
		/* 821315E4h case    2:*/		return 0x821315E8;
		  /* 821315E8h */ case    3:  		/* mr R3, R30 */
		/* 821315E8h case    3:*/		regs.R3 = regs.R30;
		/* 821315E8h case    3:*/		return 0x821315EC;
		  /* 821315ECh */ case    4:  		/* bl -214324 */
		/* 821315ECh case    4:*/		regs.LR = 0x821315F0; return 0x820FD0B8;
		/* 821315ECh case    4:*/		return 0x821315F0;
		  /* 821315F0h */ case    5:  		/* or. R31, R3, R3 */
		/* 821315F0h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821315F0h case    5:*/		return 0x821315F4;
		  /* 821315F4h */ case    6:  		/* mr R3, R29 */
		/* 821315F4h case    6:*/		regs.R3 = regs.R29;
		/* 821315F4h case    6:*/		return 0x821315F8;
		  /* 821315F8h */ case    7:  		/* bc 12, CR0_LT, 892 */
		/* 821315F8h case    7:*/		if ( regs.CR[0].lt ) { return 0x82131974;  }
		/* 821315F8h case    7:*/		return 0x821315FC;
		  /* 821315FCh */ case    8:  		/* lis R4, 28720 */
		/* 821315FCh case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x7030);
		/* 821315FCh case    8:*/		return 0x82131600;
		  /* 82131600h */ case    9:  		/* li R7, 0 */
		/* 82131600h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82131600h case    9:*/		return 0x82131604;
		  /* 82131604h */ case   10:  		/* li R6, 1 */
		/* 82131604h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82131604h case   10:*/		return 0x82131608;
		  /* 82131608h */ case   11:  		/* li R5, 3 */
		/* 82131608h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82131608h case   11:*/		return 0x8213160C;
		  /* 8213160Ch */ case   12:  		/* ori R4, R4, 1 */
		/* 8213160Ch case   12:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8213160Ch case   12:*/		return 0x82131610;
		  /* 82131610h */ case   13:  		/* bl -217056 */
		/* 82131610h case   13:*/		regs.LR = 0x82131614; return 0x820FC630;
		/* 82131610h case   13:*/		return 0x82131614;
		  /* 82131614h */ case   14:  		/* or. R31, R3, R3 */
		/* 82131614h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82131614h case   14:*/		return 0x82131618;
		  /* 82131618h */ case   15:  		/* bc 12, CR0_LT, 796 */
		/* 82131618h case   15:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 82131618h case   15:*/		return 0x8213161C;
		  /* 8213161Ch */ case   16:  		/* mr R4, R27 */
		/* 8213161Ch case   16:*/		regs.R4 = regs.R27;
		/* 8213161Ch case   16:*/		return 0x82131620;
		  /* 82131620h */ case   17:  		/* mr R3, R29 */
		/* 82131620h case   17:*/		regs.R3 = regs.R29;
		/* 82131620h case   17:*/		return 0x82131624;
		  /* 82131624h */ case   18:  		/* bl -218932 */
		/* 82131624h case   18:*/		regs.LR = 0x82131628; return 0x820FBEF0;
		/* 82131624h case   18:*/		return 0x82131628;
		  /* 82131628h */ case   19:  		/* or. R31, R3, R3 */
		/* 82131628h case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82131628h case   19:*/		return 0x8213162C;
		  /* 8213162Ch */ case   20:  		/* bc 12, CR0_LT, 776 */
		/* 8213162Ch case   20:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 8213162Ch case   20:*/		return 0x82131630;
		  /* 82131630h */ case   21:  		/* lwz R11, <#[R27 + 8]> */
		/* 82131630h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82131630h case   21:*/		return 0x82131634;
		  /* 82131634h */ case   22:  		/* li R6, 0 */
		/* 82131634h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82131634h case   22:*/		return 0x82131638;
		  /* 82131638h */ case   23:  		/* lwz R10, <#[R29 + 8]> */
		/* 82131638h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 82131638h case   23:*/		return 0x8213163C;
		  /* 8213163Ch */ case   24:  		/* li R5, 0 */
		/* 8213163Ch case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213163Ch case   24:*/		return 0x82131640;
		  /* 82131640h */ case   25:  		/* mr R3, R30 */
		/* 82131640h case   25:*/		regs.R3 = regs.R30;
		/* 82131640h case   25:*/		return 0x82131644;
		  /* 82131644h */ case   26:  		/* fmr FR1, FR30 */
		/* 82131644h case   26:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82131644h case   26:*/		return 0x82131648;
		  /* 82131648h */ case   27:  		/* lwz R11, <#[R11]> */
		/* 82131648h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82131648h case   27:*/		return 0x8213164C;
		  /* 8213164Ch */ case   28:  		/* stw R11, <#[R10]> */
		/* 8213164Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213164Ch case   28:*/		return 0x82131650;
		  /* 82131650h */ case   29:  		/* lwz R4, <#[R30 + 120]> */
		/* 82131650h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000078) );
		/* 82131650h case   29:*/		return 0x82131654;
		  /* 82131654h */ case   30:  		/* bl -214060 */
		/* 82131654h case   30:*/		regs.LR = 0x82131658; return 0x820FD228;
		/* 82131654h case   30:*/		return 0x82131658;
		  /* 82131658h */ case   31:  		/* lwz R11, <#[R29 + 8]> */
		/* 82131658h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82131658h case   31:*/		return 0x8213165C;
		  /* 8213165Ch */ case   32:  		/* stw R3, <#[R11 + 4]> */
		/* 8213165Ch case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 8213165Ch case   32:*/		return 0x82131660;
		  /* 82131660h */ case   33:  		/* li R6, 0 */
		/* 82131660h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82131660h case   33:*/		return 0x82131664;
		  /* 82131664h */ case   34:  		/* li R5, 0 */
		/* 82131664h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82131664h case   34:*/		return 0x82131668;
		  /* 82131668h */ case   35:  		/* lwz R4, <#[R30 + 120]> */
		/* 82131668h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000078) );
		/* 82131668h case   35:*/		return 0x8213166C;
		  /* 8213166Ch */ case   36:  		/* mr R3, R30 */
		/* 8213166Ch case   36:*/		regs.R3 = regs.R30;
		/* 8213166Ch case   36:*/		return 0x82131670;
		  /* 82131670h */ case   37:  		/* fmr FR1, FR29 */
		/* 82131670h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 82131670h case   37:*/		return 0x82131674;
		  /* 82131674h */ case   38:  		/* bl -214092 */
		/* 82131674h case   38:*/		regs.LR = 0x82131678; return 0x820FD228;
		/* 82131674h case   38:*/		return 0x82131678;
		  /* 82131678h */ case   39:  		/* lwz R11, <#[R29 + 8]> */
		/* 82131678h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82131678h case   39:*/		return 0x8213167C;
		  /* 8213167Ch */ case   40:  		/* stw R3, <#[R11 + 8]> */
		/* 8213167Ch case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8213167Ch case   40:*/		return 0x82131680;
		  /* 82131680h */ case   41:  		/* lwz R11, <#[R29 + 8]> */
		/* 82131680h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82131680h case   41:*/		return 0x82131684;
		  /* 82131684h */ case   42:  		/* lwz R10, <#[R11 + 4]> */
		/* 82131684h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82131684h case   42:*/		return 0x82131688;
		  /* 82131688h */ case   43:  		/* cmpwi CR6, R10, -1 */
		/* 82131688h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82131688h case   43:*/		return 0x8213168C;
		  /* 8213168Ch */ case   44:  		/* bc 12, CR6_EQ, 780 */
		/* 8213168Ch case   44:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 8213168Ch case   44:*/		return 0x82131690;
		  /* 82131690h */ case   45:  		/* lwz R11, <#[R11 + 8]> */
		/* 82131690h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82131690h case   45:*/		return 0x82131694;
		  /* 82131694h */ case   46:  		/* cmpwi CR6, R11, -1 */
		/* 82131694h case   46:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82131694h case   46:*/		return 0x82131698;
		  /* 82131698h */ case   47:  		/* bc 12, CR6_EQ, 768 */
		/* 82131698h case   47:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 82131698h case   47:*/		return 0x8213169C;
		  /* 8213169Ch */ case   48:  		/* li R6, 3 */
		/* 8213169Ch case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8213169Ch case   48:*/		return 0x821316A0;
		  /* 821316A0h */ case   49:  		/* lwz R4, <#[R30 + 136]> */
		/* 821316A0h case   49:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000088) );
		/* 821316A0h case   49:*/		return 0x821316A4;
		  /* 821316A4h */ case   50:  		/* mr R5, R23 */
		/* 821316A4h case   50:*/		regs.R5 = regs.R23;
		/* 821316A4h case   50:*/		return 0x821316A8;
		  /* 821316A8h */ case   51:  		/* fmr FR1, FR31 */
		/* 821316A8h case   51:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821316A8h case   51:*/		return 0x821316AC;
		  /* 821316ACh */ case   52:  		/* mr R3, R30 */
		/* 821316ACh case   52:*/		regs.R3 = regs.R30;
		/* 821316ACh case   52:*/		return 0x821316B0;
		  /* 821316B0h */ case   53:  		/* bl -214152 */
		/* 821316B0h case   53:*/		regs.LR = 0x821316B4; return 0x820FD228;
		/* 821316B0h case   53:*/		return 0x821316B4;
		  /* 821316B4h */ case   54:  		/* lwz R11, <#[R29 + 16]> */
		/* 821316B4h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821316B4h case   54:*/		return 0x821316B8;
		  /* 821316B8h */ case   55:  		/* stw R3, <#[R11]> */
		/* 821316B8h case   55:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821316B8h case   55:*/		return 0x821316BC;
		  /* 821316BCh */ case   56:  		/* lwz R11, <#[R29 + 16]> */
		/* 821316BCh case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821316BCh case   56:*/		return 0x821316C0;
		  /* 821316C0h */ case   57:  		/* lwz R11, <#[R11]> */
		/* 821316C0h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821316C0h case   57:*/		return 0x821316C4;
		  /* 821316C4h */ case   58:  		/* cmpwi CR6, R11, -1 */
		/* 821316C4h case   58:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 821316C4h case   58:*/		return 0x821316C8;
		  /* 821316C8h */ case   59:  		/* bc 12, CR6_EQ, 720 */
		/* 821316C8h case   59:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 821316C8h case   59:*/		return 0x821316CC;
		  /* 821316CCh */ case   60:  		/* li R9, 0 */
		/* 821316CCh case   60:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821316CCh case   60:*/		return 0x821316D0;
		  /* 821316D0h */ case   61:  		/* cmplwi CR6, R26, 0 */
		/* 821316D0h case   61:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821316D0h case   61:*/		return 0x821316D4;
		  /* 821316D4h */ case   62:  		/* bc 12, CR6_EQ, 84 */
		/* 821316D4h case   62:*/		if ( regs.CR[6].eq ) { return 0x82131728;  }
		/* 821316D4h case   62:*/		return 0x821316D8;
		  /* 821316D8h */ case   63:  		/* rlwinm R8, R26, 1, 0, 30 */
		/* 821316D8h case   63:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R26);
		/* 821316D8h case   63:*/		return 0x821316DC;
		  /* 821316DCh */ case   64:  		/* mtspr CTR, R26 */
		/* 821316DCh case   64:*/		regs.CTR = regs.R26;
		/* 821316DCh case   64:*/		return 0x821316E0;
		  /* 821316E0h */ case   65:  		/* li R10, 0 */
		/* 821316E0h case   65:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821316E0h case   65:*/		return 0x821316E4;
		  /* 821316E4h */ case   66:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 821316E4h case   66:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 821316E4h case   66:*/		return 0x821316E8;
		  /* 821316E8h */ case   67:  		/* lwz R7, <#[R29 + 16]> */
		/* 821316E8h case   67:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000010) );
		/* 821316E8h case   67:*/		return 0x821316EC;
		  /* 821316ECh */ case   68:  		/* add R6, R8, R9 */
		/* 821316ECh case   68:*/		cpu::op::add<0>(regs,&regs.R6,regs.R8,regs.R9);
		/* 821316ECh case   68:*/		return 0x821316F0;
	}
	return 0x821316F0;
} // Block from 821315DCh-821316F0h (69 instructions)

//////////////////////////////////////////////////////
// Block at 821316F0h
// Function '?IsValidSwizzle@D3DXShader@@YAHPAI0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821316F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821316F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821316F0);
		  /* 821316F0h */ case    0:  		/* lwz R5, <#[R27 + 8]> */
		/* 821316F0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000008) );
		/* 821316F0h case    0:*/		return 0x821316F4;
		  /* 821316F4h */ case    1:  		/* addi R9, R9, 1 */
		/* 821316F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821316F4h case    1:*/		return 0x821316F8;
		  /* 821316F8h */ case    2:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 821316F8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 821316F8h case    2:*/		return 0x821316FC;
		  /* 821316FCh */ case    3:  		/* lwz R7, <#[R7]> */
		/* 821316FCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 821316FCh case    3:*/		return 0x82131700;
		  /* 82131700h */ case    4:  		/* stwx R7, <#[R5 + R10]> */
		/* 82131700h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82131700h case    4:*/		return 0x82131704;
		  /* 82131704h */ case    5:  		/* addi R10, R10, 4 */
		/* 82131704h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82131704h case    5:*/		return 0x82131708;
		  /* 82131708h */ case    6:  		/* lwz R7, <#[R27 + 8]> */
		/* 82131708h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000008) );
		/* 82131708h case    6:*/		return 0x8213170C;
		  /* 8213170Ch */ case    7:  		/* lwzx R4, <#[R7 + R11]> */
		/* 8213170Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 8213170Ch case    7:*/		return 0x82131710;
		  /* 82131710h */ case    8:  		/* lwzx R5, <#[R6 + R7]> */
		/* 82131710h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 82131710h case    8:*/		return 0x82131714;
		  /* 82131714h */ case    9:  		/* stwx R5, <#[R7 + R11]> */
		/* 82131714h case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82131714h case    9:*/		return 0x82131718;
		  /* 82131718h */ case   10:  		/* addi R11, R11, 4 */
		/* 82131718h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82131718h case   10:*/		return 0x8213171C;
		  /* 8213171Ch */ case   11:  		/* lwz R7, <#[R27 + 8]> */
		/* 8213171Ch case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000008) );
		/* 8213171Ch case   11:*/		return 0x82131720;
		  /* 82131720h */ case   12:  		/* stwx R4, <#[R6 + R7]> */
		/* 82131720h case   12:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 82131720h case   12:*/		return 0x82131724;
		  /* 82131724h */ case   13:  		/* bc 16, CR0_LT, -60 */
		/* 82131724h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821316E8;  }
		/* 82131724h case   13:*/		return 0x82131728;
	}
	return 0x82131728;
} // Block from 821316F0h-82131728h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82131728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131728);
		  /* 82131728h */ case    0:  		/* lwz R11, <#[R30 + 552]> */
		/* 82131728h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131728h case    0:*/		return 0x8213172C;
		  /* 8213172Ch */ case    1:  		/* addi R23, R23, 1 */
		/* 8213172Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8213172Ch case    1:*/		return 0x82131730;
		  /* 82131730h */ case    2:  		/* cmplwi CR6, R11, 512 */
		/* 82131730h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82131730h case    2:*/		return 0x82131734;
		  /* 82131734h */ case    3:  		/* bc 4, CR6_LT, 612 */
		/* 82131734h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82131998;  }
		/* 82131734h case    3:*/		return 0x82131738;
		  /* 82131738h */ case    4:  		/* lwz R10, <#[R30 + 564]> */
		/* 82131738h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000234) );
		/* 82131738h case    4:*/		return 0x8213173C;
		  /* 8213173Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213173Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213173Ch case    5:*/		return 0x82131740;
		  /* 82131740h */ case    6:  		/* li R5, 0 */
		/* 82131740h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82131740h case    6:*/		return 0x82131744;
		  /* 82131744h */ case    7:  		/* mr R4, R29 */
		/* 82131744h case    7:*/		regs.R4 = regs.R29;
		/* 82131744h case    7:*/		return 0x82131748;
		  /* 82131748h */ case    8:  		/* mr R3, R30 */
		/* 82131748h case    8:*/		regs.R3 = regs.R30;
		/* 82131748h case    8:*/		return 0x8213174C;
		  /* 8213174Ch */ case    9:  		/* stwx R29, <#[R11 + R10]> */
		/* 8213174Ch case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213174Ch case    9:*/		return 0x82131750;
		  /* 82131750h */ case   10:  		/* lwz R10, <#[R30]> */
		/* 82131750h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82131750h case   10:*/		return 0x82131754;
		  /* 82131754h */ case   11:  		/* lwz R11, <#[R30 + 552]> */
		/* 82131754h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131754h case   11:*/		return 0x82131758;
		  /* 82131758h */ case   12:  		/* addi R11, R11, 1 */
		/* 82131758h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82131758h case   12:*/		return 0x8213175C;
		  /* 8213175Ch */ case   13:  		/* stw R11, <#[R30 + 552]> */
		/* 8213175Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 8213175Ch case   13:*/		return 0x82131760;
		  /* 82131760h */ case   14:  		/* lwz R11, <#[R10 + 32]> */
		/* 82131760h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 82131760h case   14:*/		return 0x82131764;
		  /* 82131764h */ case   15:  		/* mtspr CTR, R11 */
		/* 82131764h case   15:*/		regs.CTR = regs.R11;
		/* 82131764h case   15:*/		return 0x82131768;
		  /* 82131768h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 82131768h case   16:*/		if ( 1 ) { regs.LR = 0x8213176C; return (uint32)regs.CTR; }
		/* 82131768h case   16:*/		return 0x8213176C;
		  /* 8213176Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8213176Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213176Ch case   17:*/		return 0x82131770;
		  /* 82131770h */ case   18:  		/* bc 12, CR0_EQ, 248 */
		/* 82131770h case   18:*/		if ( regs.CR[0].eq ) { return 0x82131868;  }
		/* 82131770h case   18:*/		return 0x82131774;
		  /* 82131774h */ case   19:  		/* li R3, 116 */
		/* 82131774h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82131774h case   19:*/		return 0x82131778;
		  /* 82131778h */ case   20:  		/* bl -217568 */
		/* 82131778h case   20:*/		regs.LR = 0x8213177C; return 0x820FC598;
		/* 82131778h case   20:*/		return 0x8213177C;
		  /* 8213177Ch */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 8213177Ch case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213177Ch case   21:*/		return 0x82131780;
		  /* 82131780h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 82131780h case   22:*/		if ( regs.CR[0].eq ) { return 0x82131790;  }
		/* 82131780h case   22:*/		return 0x82131784;
		  /* 82131784h */ case   23:  		/* bl -219364 */
		/* 82131784h case   23:*/		regs.LR = 0x82131788; return 0x820FBEA0;
		/* 82131784h case   23:*/		return 0x82131788;
		  /* 82131788h */ case   24:  		/* mr R28, R3 */
		/* 82131788h case   24:*/		regs.R28 = regs.R3;
		/* 82131788h case   24:*/		return 0x8213178C;
		  /* 8213178Ch */ case   25:  		/* b 8 */
		/* 8213178Ch case   25:*/		return 0x82131794;
		/* 8213178Ch case   25:*/		return 0x82131790;
	}
	return 0x82131790;
} // Block from 82131728h-82131790h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82131790h
// Function '?HasWriteMask@CPSLegacyProgram@D3DXShader@@IAAHPAVCInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131790);
		  /* 82131790h */ case    0:  		/* li R28, 0 */
		/* 82131790h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82131790h case    0:*/		return 0x82131794;
	}
	return 0x82131794;
} // Block from 82131790h-82131794h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131794);
		  /* 82131794h */ case    0:  		/* mr R4, R28 */
		/* 82131794h case    0:*/		regs.R4 = regs.R28;
		/* 82131794h case    0:*/		return 0x82131798;
		  /* 82131798h */ case    1:  		/* mr R3, R30 */
		/* 82131798h case    1:*/		regs.R3 = regs.R30;
		/* 82131798h case    1:*/		return 0x8213179C;
		  /* 8213179Ch */ case    2:  		/* bl -214756 */
		/* 8213179Ch case    2:*/		regs.LR = 0x821317A0; return 0x820FD0B8;
		/* 8213179Ch case    2:*/		return 0x821317A0;
		  /* 821317A0h */ case    3:  		/* or. R31, R3, R3 */
		/* 821317A0h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821317A0h case    3:*/		return 0x821317A4;
		  /* 821317A4h */ case    4:  		/* cmplwi CR6, R28, 0 */
		/* 821317A4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821317A4h case    4:*/		return 0x821317A8;
		  /* 821317A8h */ case    5:  		/* bc 12, CR0_LT, 472 */
		/* 821317A8h case    5:*/		if ( regs.CR[0].lt ) { return 0x82131980;  }
		/* 821317A8h case    5:*/		return 0x821317AC;
		  /* 821317ACh */ case    6:  		/* bc 12, CR6_EQ, 492 */
		/* 821317ACh case    6:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 821317ACh case    6:*/		return 0x821317B0;
		  /* 821317B0h */ case    7:  		/* lis R4, 8256 */
		/* 821317B0h case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x2040);
		/* 821317B0h case    7:*/		return 0x821317B4;
		  /* 821317B4h */ case    8:  		/* li R7, 0 */
		/* 821317B4h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821317B4h case    8:*/		return 0x821317B8;
		  /* 821317B8h */ case    9:  		/* li R6, 1 */
		/* 821317B8h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821317B8h case    9:*/		return 0x821317BC;
		  /* 821317BCh */ case   10:  		/* li R5, 2 */
		/* 821317BCh case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821317BCh case   10:*/		return 0x821317C0;
		  /* 821317C0h */ case   11:  		/* ori R4, R4, 1 */
		/* 821317C0h case   11:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821317C0h case   11:*/		return 0x821317C4;
		  /* 821317C4h */ case   12:  		/* mr R3, R28 */
		/* 821317C4h case   12:*/		regs.R3 = regs.R28;
		/* 821317C4h case   12:*/		return 0x821317C8;
		  /* 821317C8h */ case   13:  		/* bl -217496 */
		/* 821317C8h case   13:*/		regs.LR = 0x821317CC; return 0x820FC630;
		/* 821317C8h case   13:*/		return 0x821317CC;
		  /* 821317CCh */ case   14:  		/* or. R31, R3, R3 */
		/* 821317CCh case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821317CCh case   14:*/		return 0x821317D0;
		  /* 821317D0h */ case   15:  		/* bc 12, CR0_LT, 356 */
		/* 821317D0h case   15:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 821317D0h case   15:*/		return 0x821317D4;
		  /* 821317D4h */ case   16:  		/* mr R4, R27 */
		/* 821317D4h case   16:*/		regs.R4 = regs.R27;
		/* 821317D4h case   16:*/		return 0x821317D8;
		  /* 821317D8h */ case   17:  		/* mr R3, R28 */
		/* 821317D8h case   17:*/		regs.R3 = regs.R28;
		/* 821317D8h case   17:*/		return 0x821317DC;
		  /* 821317DCh */ case   18:  		/* bl -219372 */
		/* 821317DCh case   18:*/		regs.LR = 0x821317E0; return 0x820FBEF0;
		/* 821317DCh case   18:*/		return 0x821317E0;
		  /* 821317E0h */ case   19:  		/* or. R31, R3, R3 */
		/* 821317E0h case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821317E0h case   19:*/		return 0x821317E4;
		  /* 821317E4h */ case   20:  		/* bc 12, CR0_LT, 336 */
		/* 821317E4h case   20:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 821317E4h case   20:*/		return 0x821317E8;
		  /* 821317E8h */ case   21:  		/* lwz R11, <#[R29 + 16]> */
		/* 821317E8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821317E8h case   21:*/		return 0x821317EC;
		  /* 821317ECh */ case   22:  		/* li R6, 3 */
		/* 821317ECh case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821317ECh case   22:*/		return 0x821317F0;
		  /* 821317F0h */ case   23:  		/* lwz R10, <#[R28 + 16]> */
		/* 821317F0h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 821317F0h case   23:*/		return 0x821317F4;
		  /* 821317F4h */ case   24:  		/* li R5, 0 */
		/* 821317F4h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821317F4h case   24:*/		return 0x821317F8;
		  /* 821317F8h */ case   25:  		/* mr R3, R30 */
		/* 821317F8h case   25:*/		regs.R3 = regs.R30;
		/* 821317F8h case   25:*/		return 0x821317FC;
		  /* 821317FCh */ case   26:  		/* fmr FR1, FR31 */
		/* 821317FCh case   26:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821317FCh case   26:*/		return 0x82131800;
		  /* 82131800h */ case   27:  		/* lwz R11, <#[R11]> */
		/* 82131800h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82131800h case   27:*/		return 0x82131804;
		  /* 82131804h */ case   28:  		/* stw R11, <#[R10]> */
		/* 82131804h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82131804h case   28:*/		return 0x82131808;
		  /* 82131808h */ case   29:  		/* lwz R11, <#[R29 + 8]> */
		/* 82131808h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82131808h case   29:*/		return 0x8213180C;
		  /* 8213180Ch */ case   30:  		/* lwz R11, <#[R11 + 8]> */
		/* 8213180Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8213180Ch case   30:*/		return 0x82131810;
		  /* 82131810h */ case   31:  		/* lwz R10, <#[R28 + 8]> */
		/* 82131810h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82131810h case   31:*/		return 0x82131814;
		  /* 82131814h */ case   32:  		/* stw R11, <#[R10]> */
		/* 82131814h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82131814h case   32:*/		return 0x82131818;
		  /* 82131818h */ case   33:  		/* lwz R4, <#[R30 + 136]> */
		/* 82131818h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000088) );
		/* 82131818h case   33:*/		return 0x8213181C;
		  /* 8213181Ch */ case   34:  		/* bl -214516 */
		/* 8213181Ch case   34:*/		regs.LR = 0x82131820; return 0x820FD228;
		/* 8213181Ch case   34:*/		return 0x82131820;
		  /* 82131820h */ case   35:  		/* lwz R11, <#[R29 + 16]> */
		/* 82131820h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82131820h case   35:*/		return 0x82131824;
		  /* 82131824h */ case   36:  		/* lis R10, 8272 */
		/* 82131824h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0x2050);
		/* 82131824h case   36:*/		return 0x82131828;
		  /* 82131828h */ case   37:  		/* li R9, 2 */
		/* 82131828h case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82131828h case   37:*/		return 0x8213182C;
		  /* 8213182Ch */ case   38:  		/* ori R10, R10, 1 */
		/* 8213182Ch case   38:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213182Ch case   38:*/		return 0x82131830;
		  /* 82131830h */ case   39:  		/* stw R3, <#[R11]> */
		/* 82131830h case   39:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82131830h case   39:*/		return 0x82131834;
		  /* 82131834h */ case   40:  		/* lwz R11, <#[R28 + 8]> */
		/* 82131834h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82131834h case   40:*/		return 0x82131838;
		  /* 82131838h */ case   41:  		/* stw R3, <#[R11 + 4]> */
		/* 82131838h case   41:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 82131838h case   41:*/		return 0x8213183C;
		  /* 8213183Ch */ case   42:  		/* stw R9, <#[R29 + 4]> */
		/* 8213183Ch case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 8213183Ch case   42:*/		return 0x82131840;
		  /* 82131840h */ case   43:  		/* stw R10, <#[R29]> */
		/* 82131840h case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82131840h case   43:*/		return 0x82131844;
		  /* 82131844h */ case   44:  		/* lwz R11, <#[R30 + 552]> */
		/* 82131844h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131844h case   44:*/		return 0x82131848;
		  /* 82131848h */ case   45:  		/* cmplwi CR6, R11, 512 */
		/* 82131848h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82131848h case   45:*/		return 0x8213184C;
		  /* 8213184Ch */ case   46:  		/* bc 4, CR6_LT, 332 */
		/* 8213184Ch case   46:*/		if ( !regs.CR[6].lt ) { return 0x82131998;  }
		/* 8213184Ch case   46:*/		return 0x82131850;
		  /* 82131850h */ case   47:  		/* lwz R10, <#[R30 + 564]> */
		/* 82131850h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000234) );
		/* 82131850h case   47:*/		return 0x82131854;
		  /* 82131854h */ case   48:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82131854h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82131854h case   48:*/		return 0x82131858;
	}
	return 0x82131858;
} // Block from 82131794h-82131858h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82131858h
// Function '?EmmulateReplicate@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131858);
		  /* 82131858h */ case    0:  		/* stwx R28, <#[R11 + R10]> */
		/* 82131858h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82131858h case    0:*/		return 0x8213185C;
		  /* 8213185Ch */ case    1:  		/* lwz R11, <#[R30 + 552]> */
		/* 8213185Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 8213185Ch case    1:*/		return 0x82131860;
		  /* 82131860h */ case    2:  		/* addi R11, R11, 1 */
		/* 82131860h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82131860h case    2:*/		return 0x82131864;
		  /* 82131864h */ case    3:  		/* stw R11, <#[R30 + 552]> */
		/* 82131864h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 82131864h case    3:*/		return 0x82131868;
	}
	return 0x82131868;
} // Block from 82131858h-82131868h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131868);
		  /* 82131868h */ case    0:  		/* li R11, 1807 */
		/* 82131868h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x70F);
		/* 82131868h case    0:*/		return 0x8213186C;
		  /* 8213186Ch */ case    1:  		/* stw R24, <#[R30 + 1104]> */
		/* 8213186Ch case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x00000450) );
		/* 8213186Ch case    1:*/		return 0x82131870;
		  /* 82131870h */ case    2:  		/* rlwimi R26, R11, 20, 0, 11 */
		/* 82131870h case    2:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R26,regs.R11);
		/* 82131870h case    2:*/		return 0x82131874;
		  /* 82131874h */ case    3:  		/* stw R26, <#[R27]> */
		/* 82131874h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R27 + 0x00000000) );
		/* 82131874h case    3:*/		return 0x82131878;
	}
	return 0x82131878;
} // Block from 82131868h-82131878h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131878);
		  /* 82131878h */ case    0:  		/* li R3, 116 */
		/* 82131878h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82131878h case    0:*/		return 0x8213187C;
		  /* 8213187Ch */ case    1:  		/* bl -217828 */
		/* 8213187Ch case    1:*/		regs.LR = 0x82131880; return 0x820FC598;
		/* 8213187Ch case    1:*/		return 0x82131880;
		  /* 82131880h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82131880h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82131880h case    2:*/		return 0x82131884;
		  /* 82131884h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82131884h case    3:*/		if ( regs.CR[0].eq ) { return 0x82131894;  }
		/* 82131884h case    3:*/		return 0x82131888;
		  /* 82131888h */ case    4:  		/* bl -219624 */
		/* 82131888h case    4:*/		regs.LR = 0x8213188C; return 0x820FBEA0;
		/* 82131888h case    4:*/		return 0x8213188C;
		  /* 8213188Ch */ case    5:  		/* mr R29, R3 */
		/* 8213188Ch case    5:*/		regs.R29 = regs.R3;
		/* 8213188Ch case    5:*/		return 0x82131890;
		  /* 82131890h */ case    6:  		/* b 8 */
		/* 82131890h case    6:*/		return 0x82131898;
		/* 82131890h case    6:*/		return 0x82131894;
	}
	return 0x82131894;
} // Block from 82131878h-82131894h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82131894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131894);
		  /* 82131894h */ case    0:  		/* li R29, 0 */
		/* 82131894h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82131894h case    0:*/		return 0x82131898;
	}
	return 0x82131898;
} // Block from 82131894h-82131898h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131898);
		  /* 82131898h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82131898h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82131898h case    0:*/		return 0x8213189C;
		  /* 8213189Ch */ case    1:  		/* bc 12, CR6_EQ, 252 */
		/* 8213189Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82131998;  }
		/* 8213189Ch case    1:*/		return 0x821318A0;
		  /* 821318A0h */ case    2:  		/* mr R4, R27 */
		/* 821318A0h case    2:*/		regs.R4 = regs.R27;
		/* 821318A0h case    2:*/		return 0x821318A4;
		  /* 821318A4h */ case    3:  		/* mr R3, R29 */
		/* 821318A4h case    3:*/		regs.R3 = regs.R29;
		/* 821318A4h case    3:*/		return 0x821318A8;
		  /* 821318A8h */ case    4:  		/* bl -216920 */
		/* 821318A8h case    4:*/		regs.LR = 0x821318AC; return 0x820FC950;
		/* 821318A8h case    4:*/		return 0x821318AC;
		  /* 821318ACh */ case    5:  		/* or. R31, R3, R3 */
		/* 821318ACh case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821318ACh case    5:*/		return 0x821318B0;
		  /* 821318B0h */ case    6:  		/* bc 12, CR0_LT, 132 */
		/* 821318B0h case    6:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 821318B0h case    6:*/		return 0x821318B4;
		  /* 821318B4h */ case    7:  		/* lwz R11, <#[R30 + 552]> */
		/* 821318B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 821318B4h case    7:*/		return 0x821318B8;
		  /* 821318B8h */ case    8:  		/* cmplwi CR6, R11, 512 */
		/* 821318B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 821318B8h case    8:*/		return 0x821318BC;
		  /* 821318BCh */ case    9:  		/* bc 4, CR6_LT, 220 */
		/* 821318BCh case    9:*/		if ( !regs.CR[6].lt ) { return 0x82131998;  }
		/* 821318BCh case    9:*/		return 0x821318C0;
		  /* 821318C0h */ case   10:  		/* mr R4, R29 */
		/* 821318C0h case   10:*/		regs.R4 = regs.R29;
		/* 821318C0h case   10:*/		return 0x821318C4;
		  /* 821318C4h */ case   11:  		/* mr R3, R30 */
		/* 821318C4h case   11:*/		regs.R3 = regs.R30;
		/* 821318C4h case   11:*/		return 0x821318C8;
		  /* 821318C8h */ case   12:  		/* bl -215056 */
		/* 821318C8h case   12:*/		regs.LR = 0x821318CC; return 0x820FD0B8;
		/* 821318C8h case   12:*/		return 0x821318CC;
		  /* 821318CCh */ case   13:  		/* or. R31, R3, R3 */
		/* 821318CCh case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821318CCh case   13:*/		return 0x821318D0;
		  /* 821318D0h */ case   14:  		/* bc 12, CR0_LT, 100 */
		/* 821318D0h case   14:*/		if ( regs.CR[0].lt ) { return 0x82131934;  }
		/* 821318D0h case   14:*/		return 0x821318D4;
		  /* 821318D4h */ case   15:  		/* lwz R11, <#[R30 + 552]> */
		/* 821318D4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 821318D4h case   15:*/		return 0x821318D8;
		  /* 821318D8h */ case   16:  		/* lwz R10, <#[R30 + 564]> */
		/* 821318D8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000234) );
		/* 821318D8h case   16:*/		return 0x821318DC;
		  /* 821318DCh */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821318DCh case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821318DCh case   17:*/		return 0x821318E0;
		  /* 821318E0h */ case   18:  		/* stwx R29, <#[R11 + R10]> */
		/* 821318E0h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821318E0h case   18:*/		return 0x821318E4;
		  /* 821318E4h */ case   19:  		/* lwz R11, <#[R30 + 552]> */
		/* 821318E4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 821318E4h case   19:*/		return 0x821318E8;
		  /* 821318E8h */ case   20:  		/* addi R11, R11, 1 */
		/* 821318E8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821318E8h case   20:*/		return 0x821318EC;
		  /* 821318ECh */ case   21:  		/* stw R11, <#[R30 + 552]> */
		/* 821318ECh case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000228) );
		/* 821318ECh case   21:*/		return 0x821318F0;
	}
	return 0x821318F0;
} // Block from 82131898h-821318F0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821318F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821318F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821318F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821318F0);
		  /* 821318F0h */ case    0:  		/* addi R25, R25, 1 */
		/* 821318F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821318F0h case    0:*/		return 0x821318F4;
		  /* 821318F4h */ case    1:  		/* addi R22, R22, 4 */
		/* 821318F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821318F4h case    1:*/		return 0x821318F8;
		  /* 821318F8h */ case    2:  		/* cmplw CR6, R25, R21 */
		/* 821318F8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R21);
		/* 821318F8h case    2:*/		return 0x821318FC;
		  /* 821318FCh */ case    3:  		/* bc 12, CR6_LT, -1380 */
		/* 821318FCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82131398;  }
		/* 821318FCh case    3:*/		return 0x82131900;
	}
	return 0x82131900;
} // Block from 821318F0h-82131900h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131900);
		  /* 82131900h */ case    0:  		/* lwz R11, <#[R30 + 76]> */
		/* 82131900h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 82131900h case    0:*/		return 0x82131904;
		  /* 82131904h */ case    1:  		/* cmplw CR6, R11, R21 */
		/* 82131904h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 82131904h case    1:*/		return 0x82131908;
		  /* 82131908h */ case    2:  		/* bc 4, CR6_LT, 40 */
		/* 82131908h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82131930;  }
		/* 82131908h case    2:*/		return 0x8213190C;
		  /* 8213190Ch */ case    3:  		/* subf R10, R11, R21 */
		/* 8213190Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R21);
		/* 8213190Ch case    3:*/		return 0x82131910;
		  /* 82131910h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82131910h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82131910h case    4:*/		return 0x82131914;
		  /* 82131914h */ case    5:  		/* mtspr CTR, R10 */
		/* 82131914h case    5:*/		regs.CTR = regs.R10;
		/* 82131914h case    5:*/		return 0x82131918;
		  /* 82131918h */ case    6:  		/* lwz R10, <#[R30 + 564]> */
		/* 82131918h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000234) );
		/* 82131918h case    6:*/		return 0x8213191C;
		  /* 8213191Ch */ case    7:  		/* li R9, 0 */
		/* 8213191Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8213191Ch case    7:*/		return 0x82131920;
		  /* 82131920h */ case    8:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82131920h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82131920h case    8:*/		return 0x82131924;
		  /* 82131924h */ case    9:  		/* addi R11, R11, 4 */
		/* 82131924h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82131924h case    9:*/		return 0x82131928;
		  /* 82131928h */ case   10:  		/* stw R9, <#[R10]> */
		/* 82131928h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82131928h case   10:*/		return 0x8213192C;
		  /* 8213192Ch */ case   11:  		/* bc 16, CR0_LT, -20 */
		/* 8213192Ch case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82131918;  }
		/* 8213192Ch case   11:*/		return 0x82131930;
	}
	return 0x82131930;
} // Block from 82131900h-82131930h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82131930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131930);
		  /* 82131930h */ case    0:  		/* li R31, 0 */
		/* 82131930h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82131930h case    0:*/		return 0x82131934;
	}
	return 0x82131934;
} // Block from 82131930h-82131934h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131934);
		  /* 82131934h */ case    0:  		/* mr R3, R31 */
		/* 82131934h case    0:*/		regs.R3 = regs.R31;
		/* 82131934h case    0:*/		return 0x82131938;
		  /* 82131938h */ case    1:  		/* addi R1, R1, 208 */
		/* 82131938h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82131938h case    1:*/		return 0x8213193C;
		  /* 8213193Ch */ case    2:  		/* lfd FR29, <#[R1 - 120]> */
		/* 8213193Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 8213193Ch case    2:*/		return 0x82131940;
		  /* 82131940h */ case    3:  		/* lfd FR30, <#[R1 - 112]> */
		/* 82131940h case    3:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 82131940h case    3:*/		return 0x82131944;
		  /* 82131944h */ case    4:  		/* lfd FR31, <#[R1 - 104]> */
		/* 82131944h case    4:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 82131944h case    4:*/		return 0x82131948;
		  /* 82131948h */ case    5:  		/* b -657084 */
		/* 82131948h case    5:*/		return 0x8209128C;
		/* 82131948h case    5:*/		return 0x8213194C;
	}
	return 0x8213194C;
} // Block from 82131934h-8213194Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213194Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213194C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213194C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213194C);
		  /* 8213194Ch */ case    0:  		/* lis R11, -32253 */
		/* 8213194Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213194Ch case    0:*/		return 0x82131950;
		  /* 82131950h */ case    1:  		/* lwz R4, <#[R27 + 60]> */
		/* 82131950h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000003C) );
		/* 82131950h case    1:*/		return 0x82131954;
		  /* 82131954h */ case    2:  		/* rlwinm R7, R7, 0, 24, 31 */
		/* 82131954h case    2:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R7);
		/* 82131954h case    2:*/		return 0x82131958;
		  /* 82131958h */ case    3:  		/* addi R6, R11, 20172 */
		/* 82131958h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4ECC);
		/* 82131958h case    3:*/		return 0x8213195C;
		  /* 8213195Ch */ case    4:  		/* li R5, 4554 */
		/* 8213195Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x11CA);
		/* 8213195Ch case    4:*/		return 0x82131960;
		  /* 82131960h */ case    5:  		/* mr R3, R30 */
		/* 82131960h case    5:*/		regs.R3 = regs.R30;
		/* 82131960h case    5:*/		return 0x82131964;
		  /* 82131964h */ case    6:  		/* bl -143924 */
		/* 82131964h case    6:*/		regs.LR = 0x82131968; return 0x8210E730;
		/* 82131964h case    6:*/		return 0x82131968;
		  /* 82131968h */ case    7:  		/* lis R31, -32768 */
		/* 82131968h case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 82131968h case    7:*/		return 0x8213196C;
		  /* 8213196Ch */ case    8:  		/* ori R31, R31, 16389 */
		/* 8213196Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 8213196Ch case    8:*/		return 0x82131970;
		  /* 82131970h */ case    9:  		/* b -60 */
		/* 82131970h case    9:*/		return 0x82131934;
		/* 82131970h case    9:*/		return 0x82131974;
	}
	return 0x82131974;
} // Block from 8213194Ch-82131974h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82131974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131974);
		  /* 82131974h */ case    0:  		/* bl 965196 */
		/* 82131974h case    0:*/		regs.LR = 0x82131978; return 0x8221D3C0;
		/* 82131974h case    0:*/		return 0x82131978;
		  /* 82131978h */ case    1:  		/* mr R3, R29 */
		/* 82131978h case    1:*/		regs.R3 = regs.R29;
		/* 82131978h case    1:*/		return 0x8213197C;
		  /* 8213197Ch */ case    2:  		/* b 20 */
		/* 8213197Ch case    2:*/		return 0x82131990;
		/* 8213197Ch case    2:*/		return 0x82131980;
	}
	return 0x82131980;
} // Block from 82131974h-82131980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82131980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131980);
		  /* 82131980h */ case    0:  		/* bc 12, CR6_EQ, -76 */
		/* 82131980h case    0:*/		if ( regs.CR[6].eq ) { return 0x82131934;  }
		/* 82131980h case    0:*/		return 0x82131984;
		  /* 82131984h */ case    1:  		/* mr R3, R28 */
		/* 82131984h case    1:*/		regs.R3 = regs.R28;
		/* 82131984h case    1:*/		return 0x82131988;
		  /* 82131988h */ case    2:  		/* bl 965176 */
		/* 82131988h case    2:*/		regs.LR = 0x8213198C; return 0x8221D3C0;
		/* 82131988h case    2:*/		return 0x8213198C;
		  /* 8213198Ch */ case    3:  		/* mr R3, R28 */
		/* 8213198Ch case    3:*/		regs.R3 = regs.R28;
		/* 8213198Ch case    3:*/		return 0x82131990;
	}
	return 0x82131990;
} // Block from 82131980h-82131990h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131990);
		  /* 82131990h */ case    0:  		/* bl -218016 */
		/* 82131990h case    0:*/		regs.LR = 0x82131994; return 0x820FC5F0;
		/* 82131990h case    0:*/		return 0x82131994;
		  /* 82131994h */ case    1:  		/* b -96 */
		/* 82131994h case    1:*/		return 0x82131934;
		/* 82131994h case    1:*/		return 0x82131998;
	}
	return 0x82131998;
} // Block from 82131990h-82131998h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82131998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131998);
		  /* 82131998h */ case    0:  		/* lis R31, -32761 */
		/* 82131998h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 82131998h case    0:*/		return 0x8213199C;
		  /* 8213199Ch */ case    1:  		/* ori R31, R31, 14 */
		/* 8213199Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 8213199Ch case    1:*/		return 0x821319A0;
		  /* 821319A0h */ case    2:  		/* b -108 */
		/* 821319A0h case    2:*/		return 0x82131934;
		/* 821319A0h case    2:*/		return 0x821319A4;
		  /* 821319A4h */ case    3:  		/* nop */
		/* 821319A4h case    3:*/		cpu::op::nop();
		/* 821319A4h case    3:*/		return 0x821319A8;
	}
	return 0x821319A8;
} // Block from 82131998h-821319A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821319A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821319A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821319A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821319A8);
		  /* 821319A8h */ case    0:  		/* mfspr R12, LR */
		/* 821319A8h case    0:*/		regs.R12 = regs.LR;
		/* 821319A8h case    0:*/		return 0x821319AC;
		  /* 821319ACh */ case    1:  		/* bl -657292 */
		/* 821319ACh case    1:*/		regs.LR = 0x821319B0; return 0x82091220;
		/* 821319ACh case    1:*/		return 0x821319B0;
		  /* 821319B0h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 821319B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 821319B0h case    2:*/		return 0x821319B4;
		  /* 821319B4h */ case    3:  		/* lwz R28, <#[R3 + 260]> */
		/* 821319B4h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000104) );
		/* 821319B4h case    3:*/		return 0x821319B8;
		  /* 821319B8h */ case    4:  		/* mr R18, R3 */
		/* 821319B8h case    4:*/		regs.R18 = regs.R3;
		/* 821319B8h case    4:*/		return 0x821319BC;
		  /* 821319BCh */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821319BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821319BCh case    5:*/		return 0x821319C0;
		  /* 821319C0h */ case    6:  		/* lwz R11, <#[R28]> */
		/* 821319C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821319C0h case    6:*/		return 0x821319C4;
		  /* 821319C4h */ case    7:  		/* rlwinm R16, R11, 0, 12, 31 */
		/* 821319C4h case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R16,regs.R11);
		/* 821319C4h case    7:*/		return 0x821319C8;
		  /* 821319C8h */ case    8:  		/* bc 12, CR6_EQ, 1768 */
		/* 821319C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821320B0;  }
		/* 821319C8h case    8:*/		return 0x821319CC;
		  /* 821319CCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821319CCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821319CCh case    9:*/		return 0x821319D0;
		  /* 821319D0h */ case   10:  		/* bc 12, CR6_EQ, 1760 */
		/* 821319D0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821320B0;  }
		/* 821319D0h case   10:*/		return 0x821319D4;
		  /* 821319D4h */ case   11:  		/* lwz R10, <#[R28 + 4]> */
		/* 821319D4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821319D4h case   11:*/		return 0x821319D8;
		  /* 821319D8h */ case   12:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 821319D8h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 821319D8h case   12:*/		return 0x821319DC;
		  /* 821319DCh */ case   13:  		/* li R21, 0 */
		/* 821319DCh case   13:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821319DCh case   13:*/		return 0x821319E0;
		  /* 821319E0h */ case   14:  		/* lhz R11, <#[R3 + 202]> */
		/* 821319E0h case   14:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 821319E0h case   14:*/		return 0x821319E4;
		  /* 821319E4h */ case   15:  		/* lis R8, 20480 */
		/* 821319E4h case   15:*/		cpu::op::lis<0>(regs,&regs.R8,0x5000);
		/* 821319E4h case   15:*/		return 0x821319E8;
		  /* 821319E8h */ case   16:  		/* divwu R19, R10, R16 */
		/* 821319E8h case   16:*/		cpu::op::divwu<0>(regs,&regs.R19,regs.R10,regs.R16);
		/* 821319E8h case   16:*/		return 0x821319EC;
		  /* 821319ECh */ case   17:  		/* twi 6, R16, 0 */
		/* 821319ECh case   17:*/		cpu::op::tw<6>(regs, 0x821319EC, regs.R16, 0x00000000);
		/* 821319ECh case   17:*/		return 0x821319F0;
		  /* 821319F0h */ case   18:  		/* mr R27, R21 */
		/* 821319F0h case   18:*/		regs.R27 = regs.R21;
		/* 821319F0h case   18:*/		return 0x821319F4;
		  /* 821319F4h */ case   19:  		/* cmplw CR6, R9, R8 */
		/* 821319F4h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821319F4h case   19:*/		return 0x821319F8;
		  /* 821319F8h */ case   20:  		/* bc 12, CR6_EQ, 1692 */
		/* 821319F8h case   20:*/		if ( regs.CR[6].eq ) { return 0x82132094;  }
		/* 821319F8h case   20:*/		return 0x821319FC;
		  /* 821319FCh */ case   21:  		/* lwz R31, <#[R28 + 12]> */
		/* 821319FCh case   21:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000000C) );
		/* 821319FCh case   21:*/		return 0x82131A00;
		  /* 82131A00h */ case   22:  		/* cmplw CR6, R31, R16 */
		/* 82131A00h case   22:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R16);
		/* 82131A00h case   22:*/		return 0x82131A04;
		  /* 82131A04h */ case   23:  		/* bc 4, CR6_EQ, 1680 */
		/* 82131A04h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82132094;  }
		/* 82131A04h case   23:*/		return 0x82131A08;
		  /* 82131A08h */ case   24:  		/* mr R15, R21 */
		/* 82131A08h case   24:*/		regs.R15 = regs.R21;
		/* 82131A08h case   24:*/		return 0x82131A0C;
		  /* 82131A0Ch */ case   25:  		/* cmplwi CR6, R11, 260 */
		/* 82131A0Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 82131A0Ch case   25:*/		return 0x82131A10;
		  /* 82131A10h */ case   26:  		/* bc 12, CR6_EQ, 92 */
		/* 82131A10h case   26:*/		if ( regs.CR[6].eq ) { return 0x82131A6C;  }
		/* 82131A10h case   26:*/		return 0x82131A14;
		  /* 82131A14h */ case   27:  		/* mr R4, R28 */
		/* 82131A14h case   27:*/		regs.R4 = regs.R28;
		/* 82131A14h case   27:*/		return 0x82131A18;
		  /* 82131A18h */ case   28:  		/* bl -3568 */
		/* 82131A18h case   28:*/		regs.LR = 0x82131A1C; return 0x82130C28;
		/* 82131A18h case   28:*/		return 0x82131A1C;
		  /* 82131A1Ch */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 82131A1Ch case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131A1Ch case   29:*/		return 0x82131A20;
		  /* 82131A20h */ case   30:  		/* bc 12, CR0_EQ, 76 */
		/* 82131A20h case   30:*/		if ( regs.CR[0].eq ) { return 0x82131A6C;  }
		/* 82131A20h case   30:*/		return 0x82131A24;
		  /* 82131A24h */ case   31:  		/* mr R10, R21 */
		/* 82131A24h case   31:*/		regs.R10 = regs.R21;
		/* 82131A24h case   31:*/		return 0x82131A28;
		  /* 82131A28h */ case   32:  		/* cmplwi CR6, R31, 0 */
		/* 82131A28h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82131A28h case   32:*/		return 0x82131A2C;
		  /* 82131A2Ch */ case   33:  		/* bc 12, CR6_EQ, 64 */
		/* 82131A2Ch case   33:*/		if ( regs.CR[6].eq ) { return 0x82131A6C;  }
		/* 82131A2Ch case   33:*/		return 0x82131A30;
		  /* 82131A30h */ case   34:  		/* lwz R9, <#[R18 + 20]> */
		/* 82131A30h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x00000014) );
		/* 82131A30h case   34:*/		return 0x82131A34;
		  /* 82131A34h */ case   35:  		/* mr R11, R21 */
		/* 82131A34h case   35:*/		regs.R11 = regs.R21;
		/* 82131A34h case   35:*/		return 0x82131A38;
		  /* 82131A38h */ case   36:  		/* lwz R8, <#[R28 + 16]> */
		/* 82131A38h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 82131A38h case   36:*/		return 0x82131A3C;
		  /* 82131A3Ch */ case   37:  		/* lwzx R8, <#[R8 + R11]> */
		/* 82131A3Ch case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82131A3Ch case   37:*/		return 0x82131A40;
		  /* 82131A40h */ case   38:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82131A40h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82131A40h case   38:*/		return 0x82131A44;
		  /* 82131A44h */ case   39:  		/* lwzx R8, <#[R8 + R9]> */
		/* 82131A44h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82131A44h case   39:*/		return 0x82131A48;
		  /* 82131A48h */ case   40:  		/* lwz R8, <#[R8 + 16]> */
		/* 82131A48h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 82131A48h case   40:*/		return 0x82131A4C;
		  /* 82131A4Ch */ case   41:  		/* cmplwi CR6, R8, 3 */
		/* 82131A4Ch case   41:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000003);
		/* 82131A4Ch case   41:*/		return 0x82131A50;
		  /* 82131A50h */ case   42:  		/* bc 4, CR6_EQ, 12 */
		/* 82131A50h case   42:*/		if ( !regs.CR[6].eq ) { return 0x82131A5C;  }
		/* 82131A50h case   42:*/		return 0x82131A54;
		  /* 82131A54h */ case   43:  		/* li R27, 1 */
		/* 82131A54h case   43:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82131A54h case   43:*/		return 0x82131A58;
		  /* 82131A58h */ case   44:  		/* li R15, 1 */
		/* 82131A58h case   44:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 82131A58h case   44:*/		return 0x82131A5C;
	}
	return 0x82131A5C;
} // Block from 821319A8h-82131A5Ch (45 instructions)

//////////////////////////////////////////////////////
// Block at 82131A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131A5C);
		  /* 82131A5Ch */ case    0:  		/* addi R10, R10, 1 */
		/* 82131A5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82131A5Ch case    0:*/		return 0x82131A60;
		  /* 82131A60h */ case    1:  		/* addi R11, R11, 4 */
		/* 82131A60h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82131A60h case    1:*/		return 0x82131A64;
		  /* 82131A64h */ case    2:  		/* cmplw CR6, R10, R31 */
		/* 82131A64h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82131A64h case    2:*/		return 0x82131A68;
		  /* 82131A68h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 82131A68h case    3:*/		if ( regs.CR[6].lt ) { return 0x82131A38;  }
		/* 82131A68h case    3:*/		return 0x82131A6C;
	}
	return 0x82131A6C;
} // Block from 82131A5Ch-82131A6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131A6C);
		  /* 82131A6Ch */ case    0:  		/* mr R30, R21 */
		/* 82131A6Ch case    0:*/		regs.R30 = regs.R21;
		/* 82131A6Ch case    0:*/		return 0x82131A70;
		  /* 82131A70h */ case    1:  		/* li R24, -1 */
		/* 82131A70h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0xFFFFFFFF);
		/* 82131A70h case    1:*/		return 0x82131A74;
		  /* 82131A74h */ case    2:  		/* cmplwi CR6, R19, 0 */
		/* 82131A74h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82131A74h case    2:*/		return 0x82131A78;
		  /* 82131A78h */ case    3:  		/* bc 12, CR6_EQ, 256 */
		/* 82131A78h case    3:*/		if ( regs.CR[6].eq ) { return 0x82131B78;  }
		/* 82131A78h case    3:*/		return 0x82131A7C;
		  /* 82131A7Ch */ case    4:  		/* mr R29, R21 */
		/* 82131A7Ch case    4:*/		regs.R29 = regs.R21;
		/* 82131A7Ch case    4:*/		return 0x82131A80;
		  /* 82131A80h */ case    5:  		/* addi R31, R1, 80 */
		/* 82131A80h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x50);
		/* 82131A80h case    5:*/		return 0x82131A84;
		  /* 82131A84h */ case    6:  		/* addi R11, R1, 128 */
		/* 82131A84h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82131A84h case    6:*/		return 0x82131A88;
		  /* 82131A88h */ case    7:  		/* stw R24, <#[R31]> */
		/* 82131A88h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000000) );
		/* 82131A88h case    7:*/		return 0x82131A8C;
		  /* 82131A8Ch */ case    8:  		/* stw R24, <#[R31 + 4]> */
		/* 82131A8Ch case    8:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000004) );
		/* 82131A8Ch case    8:*/		return 0x82131A90;
		  /* 82131A90h */ case    9:  		/* mr R5, R21 */
		/* 82131A90h case    9:*/		regs.R5 = regs.R21;
		/* 82131A90h case    9:*/		return 0x82131A94;
		  /* 82131A94h */ case   10:  		/* stw R24, <#[R31 + 8]> */
		/* 82131A94h case   10:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000008) );
		/* 82131A94h case   10:*/		return 0x82131A98;
		  /* 82131A98h */ case   11:  		/* cmplwi CR6, R16, 0 */
		/* 82131A98h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82131A98h case   11:*/		return 0x82131A9C;
		  /* 82131A9Ch */ case   12:  		/* stw R24, <#[R31 + 12]> */
		/* 82131A9Ch case   12:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000000C) );
		/* 82131A9Ch case   12:*/		return 0x82131AA0;
		  /* 82131AA0h */ case   13:  		/* std R24, <#[R11]> */
		/* 82131AA0h case   13:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 82131AA0h case   13:*/		return 0x82131AA4;
		  /* 82131AA4h */ case   14:  		/* std R24, <#[R11 + 8]> */
		/* 82131AA4h case   14:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 82131AA4h case   14:*/		return 0x82131AA8;
		  /* 82131AA8h */ case   15:  		/* bc 12, CR6_EQ, 160 */
		/* 82131AA8h case   15:*/		if ( regs.CR[6].eq ) { return 0x82131B48;  }
		/* 82131AA8h case   15:*/		return 0x82131AAC;
		  /* 82131AACh */ case   16:  		/* lwz R8, <#[R18 + 260]> */
		/* 82131AACh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x00000104) );
		/* 82131AACh case   16:*/		return 0x82131AB0;
		  /* 82131AB0h */ case   17:  		/* rlwinm R4, R30, 2, 0, 29 */
		/* 82131AB0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R30);
		/* 82131AB0h case   17:*/		return 0x82131AB4;
		  /* 82131AB4h */ case   18:  		/* lwz R7, <#[R18 + 20]> */
		/* 82131AB4h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R18 + 0x00000014) );
		/* 82131AB4h case   18:*/		return 0x82131AB8;
		  /* 82131AB8h */ case   19:  		/* mr R11, R21 */
		/* 82131AB8h case   19:*/		regs.R11 = regs.R21;
		/* 82131AB8h case   19:*/		return 0x82131ABC;
		  /* 82131ABCh */ case   20:  		/* lwz R6, <#[R18 + 16]> */
		/* 82131ABCh case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R18 + 0x00000010) );
		/* 82131ABCh case   20:*/		return 0x82131AC0;
		  /* 82131AC0h */ case   21:  		/* mtspr CTR, R16 */
		/* 82131AC0h case   21:*/		regs.CTR = regs.R16;
		/* 82131AC0h case   21:*/		return 0x82131AC4;
		  /* 82131AC4h */ case   22:  		/* add R10, R29, R5 */
		/* 82131AC4h case   22:*/		cpu::op::add<0>(regs,&regs.R10,regs.R29,regs.R5);
		/* 82131AC4h case   22:*/		return 0x82131AC8;
		  /* 82131AC8h */ case   23:  		/* lwz R9, <#[R8 + 8]> */
		/* 82131AC8h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000008) );
		/* 82131AC8h case   23:*/		return 0x82131ACC;
		  /* 82131ACCh */ case   24:  		/* lwz R3, <#[R8 + 16]> */
		/* 82131ACCh case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000010) );
		/* 82131ACCh case   24:*/		return 0x82131AD0;
		  /* 82131AD0h */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82131AD0h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82131AD0h case   25:*/		return 0x82131AD4;
		  /* 82131AD4h */ case   26:  		/* lwzx R3, <#[R3 + R11]> */
		/* 82131AD4h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82131AD4h case   26:*/		return 0x82131AD8;
		  /* 82131AD8h */ case   27:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82131AD8h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82131AD8h case   27:*/		return 0x82131ADC;
		  /* 82131ADCh */ case   28:  		/* rlwinm R9, R3, 2, 0, 29 */
		/* 82131ADCh case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R3);
		/* 82131ADCh case   28:*/		return 0x82131AE0;
		  /* 82131AE0h */ case   29:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82131AE0h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82131AE0h case   29:*/		return 0x82131AE4;
		  /* 82131AE4h */ case   30:  		/* lwzx R9, <#[R9 + R7]> */
		/* 82131AE4h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82131AE4h case   30:*/		return 0x82131AE8;
		  /* 82131AE8h */ case   31:  		/* lwzx R10, <#[R10 + R7]> */
		/* 82131AE8h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82131AE8h case   31:*/		return 0x82131AEC;
		  /* 82131AECh */ case   32:  		/* lwz R9, <#[R9 + 16]> */
		/* 82131AECh case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 82131AECh case   32:*/		return 0x82131AF0;
		  /* 82131AF0h */ case   33:  		/* lwz R3, <#[R10 + 4]> */
		/* 82131AF0h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000004) );
		/* 82131AF0h case   33:*/		return 0x82131AF4;
		  /* 82131AF4h */ case   34:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 82131AF4h case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 82131AF4h case   34:*/		return 0x82131AF8;
		  /* 82131AF8h */ case   35:  		/* lwzx R3, <#[R3 + R6]> */
		/* 82131AF8h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R6 + 0x00000000) );
		/* 82131AF8h case   35:*/		return 0x82131AFC;
		  /* 82131AFCh */ case   36:  		/* lwz R3, <#[R3 + 4]> */
		/* 82131AFCh case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82131AFCh case   36:*/		return 0x82131B00;
		  /* 82131B00h */ case   37:  		/* rlwinm. R3, R3, 0, 23, 23 */
		/* 82131B00h case   37:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R3,regs.R3);
		/* 82131B00h case   37:*/		return 0x82131B04;
		  /* 82131B04h */ case   38:  		/* bc 12, CR0_EQ, 24 */
		/* 82131B04h case   38:*/		if ( regs.CR[0].eq ) { return 0x82131B1C;  }
		/* 82131B04h case   38:*/		return 0x82131B08;
		  /* 82131B08h */ case   39:  		/* add R10, R4, R9 */
		/* 82131B08h case   39:*/		cpu::op::add<0>(regs,&regs.R10,regs.R4,regs.R9);
		/* 82131B08h case   39:*/		return 0x82131B0C;
		  /* 82131B0Ch */ case   40:  		/* addi R3, R1, 80 */
		/* 82131B0Ch case   40:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82131B0Ch case   40:*/		return 0x82131B10;
		  /* 82131B10h */ case   41:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82131B10h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82131B10h case   41:*/		return 0x82131B14;
		  /* 82131B14h */ case   42:  		/* stwx R9, <#[R10 + R3]> */
		/* 82131B14h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82131B14h case   42:*/		return 0x82131B18;
		  /* 82131B18h */ case   43:  		/* b 24 */
		/* 82131B18h case   43:*/		return 0x82131B30;
		/* 82131B18h case   43:*/		return 0x82131B1C;
	}
	return 0x82131B1C;
} // Block from 82131A6Ch-82131B1Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 82131B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131B1C);
		  /* 82131B1Ch */ case    0:  		/* add R3, R4, R9 */
		/* 82131B1Ch case    0:*/		cpu::op::add<0>(regs,&regs.R3,regs.R4,regs.R9);
		/* 82131B1Ch case    0:*/		return 0x82131B20;
		  /* 82131B20h */ case    1:  		/* lwz R10, <#[R10 + 16]> */
		/* 82131B20h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82131B20h case    1:*/		return 0x82131B24;
		  /* 82131B24h */ case    2:  		/* addi R26, R1, 80 */
		/* 82131B24h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x50);
		/* 82131B24h case    2:*/		return 0x82131B28;
		  /* 82131B28h */ case    3:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 82131B28h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 82131B28h case    3:*/		return 0x82131B2C;
		  /* 82131B2Ch */ case    4:  		/* stwx R10, <#[R3 + R26]> */
		/* 82131B2Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + regs.R26 + 0x00000000) );
		/* 82131B2Ch case    4:*/		return 0x82131B30;
	}
	return 0x82131B30;
} // Block from 82131B1Ch-82131B30h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82131B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131B30);
		  /* 82131B30h */ case    0:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82131B30h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82131B30h case    0:*/		return 0x82131B34;
		  /* 82131B34h */ case    1:  		/* addi R9, R1, 128 */
		/* 82131B34h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 82131B34h case    1:*/		return 0x82131B38;
		  /* 82131B38h */ case    2:  		/* addi R5, R5, 1 */
		/* 82131B38h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 82131B38h case    2:*/		return 0x82131B3C;
		  /* 82131B3Ch */ case    3:  		/* addi R11, R11, 4 */
		/* 82131B3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82131B3Ch case    3:*/		return 0x82131B40;
		  /* 82131B40h */ case    4:  		/* stwx R21, <#[R10 + R9]> */
		/* 82131B40h case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82131B40h case    4:*/		return 0x82131B44;
		  /* 82131B44h */ case    5:  		/* bc 16, CR0_LT, -128 */
		/* 82131B44h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82131AC4;  }
		/* 82131B44h case    5:*/		return 0x82131B48;
	}
	return 0x82131B48;
} // Block from 82131B30h-82131B48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82131B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131B48);
		  /* 82131B48h */ case    0:  		/* li R5, 5 */
		/* 82131B48h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82131B48h case    0:*/		return 0x82131B4C;
		  /* 82131B4Ch */ case    1:  		/* addi R4, R1, 128 */
		/* 82131B4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131B4Ch case    1:*/		return 0x82131B50;
		  /* 82131B50h */ case    2:  		/* mr R3, R31 */
		/* 82131B50h case    2:*/		regs.R3 = regs.R31;
		/* 82131B50h case    2:*/		return 0x82131B54;
		  /* 82131B54h */ case    3:  		/* bl -4044 */
		/* 82131B54h case    3:*/		regs.LR = 0x82131B58; return 0x82130B88;
		/* 82131B54h case    3:*/		return 0x82131B58;
		  /* 82131B58h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82131B58h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131B58h case    4:*/		return 0x82131B5C;
		  /* 82131B5Ch */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 82131B5Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x82131B64;  }
		/* 82131B5Ch case    5:*/		return 0x82131B60;
		  /* 82131B60h */ case    6:  		/* li R27, 1 */
		/* 82131B60h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82131B60h case    6:*/		return 0x82131B64;
	}
	return 0x82131B64;
} // Block from 82131B48h-82131B64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82131B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131B64);
		  /* 82131B64h */ case    0:  		/* addi R30, R30, 1 */
		/* 82131B64h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82131B64h case    0:*/		return 0x82131B68;
		  /* 82131B68h */ case    1:  		/* add R29, R29, R16 */
		/* 82131B68h case    1:*/		cpu::op::add<0>(regs,&regs.R29,regs.R29,regs.R16);
		/* 82131B68h case    1:*/		return 0x82131B6C;
		  /* 82131B6Ch */ case    2:  		/* addi R31, R31, 16 */
		/* 82131B6Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 82131B6Ch case    2:*/		return 0x82131B70;
		  /* 82131B70h */ case    3:  		/* cmplw CR6, R30, R19 */
		/* 82131B70h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R19);
		/* 82131B70h case    3:*/		return 0x82131B74;
		  /* 82131B74h */ case    4:  		/* bc 12, CR6_LT, -240 */
		/* 82131B74h case    4:*/		if ( regs.CR[6].lt ) { return 0x82131A84;  }
		/* 82131B74h case    4:*/		return 0x82131B78;
	}
	return 0x82131B78;
} // Block from 82131B64h-82131B78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82131B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131B78);
		  /* 82131B78h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 82131B78h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82131B78h case    0:*/		return 0x82131B7C;
		  /* 82131B7Ch */ case    1:  		/* bc 12, CR6_EQ, 1268 */
		/* 82131B7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82132070;  }
		/* 82131B7Ch case    1:*/		return 0x82131B80;
		  /* 82131B80h */ case    2:  		/* mr R17, R21 */
		/* 82131B80h case    2:*/		regs.R17 = regs.R21;
		/* 82131B80h case    2:*/		return 0x82131B84;
		  /* 82131B84h */ case    3:  		/* mr R20, R21 */
		/* 82131B84h case    3:*/		regs.R20 = regs.R21;
		/* 82131B84h case    3:*/		return 0x82131B88;
		  /* 82131B88h */ case    4:  		/* cmplwi CR6, R16, 4 */
		/* 82131B88h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000004);
		/* 82131B88h case    4:*/		return 0x82131B8C;
		  /* 82131B8Ch */ case    5:  		/* bc 4, CR6_EQ, 712 */
		/* 82131B8Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82131E54;  }
		/* 82131B8Ch case    5:*/		return 0x82131B90;
		  /* 82131B90h */ case    6:  		/* li R29, 1 */
		/* 82131B90h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82131B90h case    6:*/		return 0x82131B94;
		  /* 82131B94h */ case    7:  		/* mr R26, R21 */
		/* 82131B94h case    7:*/		regs.R26 = regs.R21;
		/* 82131B94h case    7:*/		return 0x82131B98;
		  /* 82131B98h */ case    8:  		/* addi R31, R1, 144 */
		/* 82131B98h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x90);
		/* 82131B98h case    8:*/		return 0x82131B9C;
		  /* 82131B9Ch */ case    9:  		/* li R30, -1 */
		/* 82131B9Ch case    9:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 82131B9Ch case    9:*/		return 0x82131BA0;
		  /* 82131BA0h */ case   10:  		/* cmpwi CR6, R29, 0 */
		/* 82131BA0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82131BA0h case   10:*/		return 0x82131BA4;
		  /* 82131BA4h */ case   11:  		/* bc 12, CR6_EQ, 148 */
		/* 82131BA4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82131C38;  }
		/* 82131BA4h case   11:*/		return 0x82131BA8;
		  /* 82131BA8h */ case   12:  		/* addi R11, R1, 128 */
		/* 82131BA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82131BA8h case   12:*/		return 0x82131BAC;
		  /* 82131BACh */ case   13:  		/* addi R10, R1, 144 */
		/* 82131BACh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 82131BACh case   13:*/		return 0x82131BB0;
		  /* 82131BB0h */ case   14:  		/* mr R29, R21 */
		/* 82131BB0h case   14:*/		regs.R29 = regs.R21;
		/* 82131BB0h case   14:*/		return 0x82131BB4;
		  /* 82131BB4h */ case   15:  		/* cmplwi CR6, R19, 0 */
		/* 82131BB4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82131BB4h case   15:*/		return 0x82131BB8;
		  /* 82131BB8h */ case   16:  		/* std R21, <#[R11]> */
		/* 82131BB8h case   16:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 82131BB8h case   16:*/		return 0x82131BBC;
		  /* 82131BBCh */ case   17:  		/* std R21, <#[R11 + 8]> */
		/* 82131BBCh case   17:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 82131BBCh case   17:*/		return 0x82131BC0;
		  /* 82131BC0h */ case   18:  		/* stw R24, <#[R10]> */
		/* 82131BC0h case   18:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000000) );
		/* 82131BC0h case   18:*/		return 0x82131BC4;
		  /* 82131BC4h */ case   19:  		/* stw R24, <#[R10 + 4]> */
		/* 82131BC4h case   19:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000004) );
		/* 82131BC4h case   19:*/		return 0x82131BC8;
		  /* 82131BC8h */ case   20:  		/* stw R24, <#[R10 + 8]> */
		/* 82131BC8h case   20:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 82131BC8h case   20:*/		return 0x82131BCC;
		  /* 82131BCCh */ case   21:  		/* stw R24, <#[R10 + 12]> */
		/* 82131BCCh case   21:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x0000000C) );
		/* 82131BCCh case   21:*/		return 0x82131BD0;
		  /* 82131BD0h */ case   22:  		/* stw R30, <#[R31 - 16]> */
		/* 82131BD0h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0xFFFFFFF0) );
		/* 82131BD0h case   22:*/		return 0x82131BD4;
		  /* 82131BD4h */ case   23:  		/* stw R21, <#[R31]> */
		/* 82131BD4h case   23:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000000) );
		/* 82131BD4h case   23:*/		return 0x82131BD8;
		  /* 82131BD8h */ case   24:  		/* bc 12, CR6_EQ, 52 */
		/* 82131BD8h case   24:*/		if ( regs.CR[6].eq ) { return 0x82131C0C;  }
		/* 82131BD8h case   24:*/		return 0x82131BDC;
		  /* 82131BDCh */ case   25:  		/* addi R27, R1, 80 */
		/* 82131BDCh case   25:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0x50);
		/* 82131BDCh case   25:*/		return 0x82131BE0;
		  /* 82131BE0h */ case   26:  		/* mr R28, R19 */
		/* 82131BE0h case   26:*/		regs.R28 = regs.R19;
		/* 82131BE0h case   26:*/		return 0x82131BE4;
		  /* 82131BE4h */ case   27:  		/* li R5, 5 */
		/* 82131BE4h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82131BE4h case   27:*/		return 0x82131BE8;
		  /* 82131BE8h */ case   28:  		/* addi R4, R1, 128 */
		/* 82131BE8h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131BE8h case   28:*/		return 0x82131BEC;
		  /* 82131BECh */ case   29:  		/* mr R3, R27 */
		/* 82131BECh case   29:*/		regs.R3 = regs.R27;
		/* 82131BECh case   29:*/		return 0x82131BF0;
		  /* 82131BF0h */ case   30:  		/* bl -4200 */
		/* 82131BF0h case   30:*/		regs.LR = 0x82131BF4; return 0x82130B88;
		/* 82131BF0h case   30:*/		return 0x82131BF4;
		  /* 82131BF4h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 82131BF4h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131BF4h case   31:*/		return 0x82131BF8;
		  /* 82131BF8h */ case   32:  		/* bc 4, CR0_EQ, 8 */
		/* 82131BF8h case   32:*/		if ( !regs.CR[0].eq ) { return 0x82131C00;  }
		/* 82131BF8h case   32:*/		return 0x82131BFC;
		  /* 82131BFCh */ case   33:  		/* li R29, 1 */
		/* 82131BFCh case   33:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82131BFCh case   33:*/		return 0x82131C00;
	}
	return 0x82131C00;
} // Block from 82131B78h-82131C00h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82131C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131C00);
		  /* 82131C00h */ case    0:  		/* addic. R28, R28, -1 */
		/* 82131C00h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82131C00h case    0:*/		return 0x82131C04;
		  /* 82131C04h */ case    1:  		/* addi R27, R27, 16 */
		/* 82131C04h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x10);
		/* 82131C04h case    1:*/		return 0x82131C08;
		  /* 82131C08h */ case    2:  		/* bc 4, CR0_EQ, -36 */
		/* 82131C08h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82131BE4;  }
		/* 82131C08h case    2:*/		return 0x82131C0C;
	}
	return 0x82131C0C;
} // Block from 82131C00h-82131C0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82131C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131C0C);
		  /* 82131C0Ch */ case    0:  		/* cmpwi CR6, R15, 0 */
		/* 82131C0Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82131C0Ch case    0:*/		return 0x82131C10;
		  /* 82131C10h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82131C10h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131C20;  }
		/* 82131C10h case    1:*/		return 0x82131C14;
		  /* 82131C14h */ case    2:  		/* cmplwi CR6, R26, 3 */
		/* 82131C14h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 82131C14h case    2:*/		return 0x82131C18;
		  /* 82131C18h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82131C18h case    3:*/		if ( regs.CR[6].eq ) { return 0x82131C20;  }
		/* 82131C18h case    3:*/		return 0x82131C1C;
		  /* 82131C1Ch */ case    4:  		/* li R29, 1 */
		/* 82131C1Ch case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82131C1Ch case    4:*/		return 0x82131C20;
	}
	return 0x82131C20;
} // Block from 82131C0Ch-82131C20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82131C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131C20);
		  /* 82131C20h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 82131C20h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82131C20h case    0:*/		return 0x82131C24;
		  /* 82131C24h */ case    1:  		/* bc 12, CR6_EQ, 180 */
		/* 82131C24h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131CD8;  }
		/* 82131C24h case    1:*/		return 0x82131C28;
		  /* 82131C28h */ case    2:  		/* addi R26, R26, 1 */
		/* 82131C28h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82131C28h case    2:*/		return 0x82131C2C;
		  /* 82131C2Ch */ case    3:  		/* addi R31, R31, 4 */
		/* 82131C2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82131C2Ch case    3:*/		return 0x82131C30;
		  /* 82131C30h */ case    4:  		/* cmplwi CR6, R26, 4 */
		/* 82131C30h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 82131C30h case    4:*/		return 0x82131C34;
		  /* 82131C34h */ case    5:  		/* bc 12, CR6_LT, -148 */
		/* 82131C34h case    5:*/		if ( regs.CR[6].lt ) { return 0x82131BA0;  }
		/* 82131C34h case    5:*/		return 0x82131C38;
	}
	return 0x82131C38;
} // Block from 82131C20h-82131C38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82131C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131C38);
		  /* 82131C38h */ case    0:  		/* li R25, 1 */
		/* 82131C38h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82131C38h case    0:*/		return 0x82131C3C;
		  /* 82131C3Ch */ case    1:  		/* mr R22, R21 */
		/* 82131C3Ch case    1:*/		regs.R22 = regs.R21;
		/* 82131C3Ch case    1:*/		return 0x82131C40;
		  /* 82131C40h */ case    2:  		/* addi R28, R1, 144 */
		/* 82131C40h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x90);
		/* 82131C40h case    2:*/		return 0x82131C44;
		  /* 82131C44h */ case    3:  		/* cmpwi CR6, R25, 0 */
		/* 82131C44h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82131C44h case    3:*/		return 0x82131C48;
		  /* 82131C48h */ case    4:  		/* bc 12, CR6_EQ, 400 */
		/* 82131C48h case    4:*/		if ( regs.CR[6].eq ) { return 0x82131DD8;  }
		/* 82131C48h case    4:*/		return 0x82131C4C;
		  /* 82131C4Ch */ case    5:  		/* mr R23, R21 */
		/* 82131C4Ch case    5:*/		regs.R23 = regs.R21;
		/* 82131C4Ch case    5:*/		return 0x82131C50;
		  /* 82131C50h */ case    6:  		/* addi R31, R1, 144 */
		/* 82131C50h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x90);
		/* 82131C50h case    6:*/		return 0x82131C54;
		  /* 82131C54h */ case    7:  		/* cmplw CR6, R23, R22 */
		/* 82131C54h case    7:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 82131C54h case    7:*/		return 0x82131C58;
		  /* 82131C58h */ case    8:  		/* bc 12, CR6_EQ, 344 */
		/* 82131C58h case    8:*/		if ( regs.CR[6].eq ) { return 0x82131DB0;  }
		/* 82131C58h case    8:*/		return 0x82131C5C;
		  /* 82131C5Ch */ case    9:  		/* addi R11, R1, 128 */
		/* 82131C5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82131C5Ch case    9:*/		return 0x82131C60;
		  /* 82131C60h */ case   10:  		/* addi R10, R1, 144 */
		/* 82131C60h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 82131C60h case   10:*/		return 0x82131C64;
		  /* 82131C64h */ case   11:  		/* mr R25, R21 */
		/* 82131C64h case   11:*/		regs.R25 = regs.R21;
		/* 82131C64h case   11:*/		return 0x82131C68;
		  /* 82131C68h */ case   12:  		/* mr R26, R21 */
		/* 82131C68h case   12:*/		regs.R26 = regs.R21;
		/* 82131C68h case   12:*/		return 0x82131C6C;
		  /* 82131C6Ch */ case   13:  		/* cmplwi CR6, R19, 0 */
		/* 82131C6Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82131C6Ch case   13:*/		return 0x82131C70;
		  /* 82131C70h */ case   14:  		/* std R21, <#[R11]> */
		/* 82131C70h case   14:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 82131C70h case   14:*/		return 0x82131C74;
		  /* 82131C74h */ case   15:  		/* std R21, <#[R11 + 8]> */
		/* 82131C74h case   15:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 82131C74h case   15:*/		return 0x82131C78;
		  /* 82131C78h */ case   16:  		/* stw R24, <#[R10]> */
		/* 82131C78h case   16:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000000) );
		/* 82131C78h case   16:*/		return 0x82131C7C;
		  /* 82131C7Ch */ case   17:  		/* stw R24, <#[R10 + 4]> */
		/* 82131C7Ch case   17:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000004) );
		/* 82131C7Ch case   17:*/		return 0x82131C80;
		  /* 82131C80h */ case   18:  		/* stw R24, <#[R10 + 8]> */
		/* 82131C80h case   18:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 82131C80h case   18:*/		return 0x82131C84;
		  /* 82131C84h */ case   19:  		/* stw R24, <#[R10 + 12]> */
		/* 82131C84h case   19:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x0000000C) );
		/* 82131C84h case   19:*/		return 0x82131C88;
		  /* 82131C88h */ case   20:  		/* stw R30, <#[R28 - 16]> */
		/* 82131C88h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0xFFFFFFF0) );
		/* 82131C88h case   20:*/		return 0x82131C8C;
		  /* 82131C8Ch */ case   21:  		/* stw R30, <#[R31 - 16]> */
		/* 82131C8Ch case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0xFFFFFFF0) );
		/* 82131C8Ch case   21:*/		return 0x82131C90;
		  /* 82131C90h */ case   22:  		/* stw R21, <#[R28]> */
		/* 82131C90h case   22:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R28 + 0x00000000) );
		/* 82131C90h case   22:*/		return 0x82131C94;
		  /* 82131C94h */ case   23:  		/* stw R21, <#[R31]> */
		/* 82131C94h case   23:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000000) );
		/* 82131C94h case   23:*/		return 0x82131C98;
		  /* 82131C98h */ case   24:  		/* bc 12, CR6_EQ, 140 */
		/* 82131C98h case   24:*/		if ( regs.CR[6].eq ) { return 0x82131D24;  }
		/* 82131C98h case   24:*/		return 0x82131C9C;
		  /* 82131C9Ch */ case   25:  		/* addi R29, R1, 80 */
		/* 82131C9Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x50);
		/* 82131C9Ch case   25:*/		return 0x82131CA0;
		  /* 82131CA0h */ case   26:  		/* mr R27, R19 */
		/* 82131CA0h case   26:*/		regs.R27 = regs.R19;
		/* 82131CA0h case   26:*/		return 0x82131CA4;
		  /* 82131CA4h */ case   27:  		/* li R5, 5 */
		/* 82131CA4h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82131CA4h case   27:*/		return 0x82131CA8;
		  /* 82131CA8h */ case   28:  		/* addi R4, R1, 128 */
		/* 82131CA8h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131CA8h case   28:*/		return 0x82131CAC;
		  /* 82131CACh */ case   29:  		/* mr R3, R29 */
		/* 82131CACh case   29:*/		regs.R3 = regs.R29;
		/* 82131CACh case   29:*/		return 0x82131CB0;
		  /* 82131CB0h */ case   30:  		/* bl -4392 */
		/* 82131CB0h case   30:*/		regs.LR = 0x82131CB4; return 0x82130B88;
		/* 82131CB0h case   30:*/		return 0x82131CB4;
		  /* 82131CB4h */ case   31:  		/* mr R14, R3 */
		/* 82131CB4h case   31:*/		regs.R14 = regs.R3;
		/* 82131CB4h case   31:*/		return 0x82131CB8;
		  /* 82131CB8h */ case   32:  		/* li R5, 5 */
		/* 82131CB8h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82131CB8h case   32:*/		return 0x82131CBC;
		  /* 82131CBCh */ case   33:  		/* addi R4, R1, 144 */
		/* 82131CBCh case   33:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 82131CBCh case   33:*/		return 0x82131CC0;
		  /* 82131CC0h */ case   34:  		/* mr R3, R29 */
		/* 82131CC0h case   34:*/		regs.R3 = regs.R29;
		/* 82131CC0h case   34:*/		return 0x82131CC4;
		  /* 82131CC4h */ case   35:  		/* bl -4412 */
		/* 82131CC4h case   35:*/		regs.LR = 0x82131CC8; return 0x82130B88;
		/* 82131CC4h case   35:*/		return 0x82131CC8;
		  /* 82131CC8h */ case   36:  		/* cmpwi CR6, R14, 0 */
		/* 82131CC8h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 82131CC8h case   36:*/		return 0x82131CCC;
		  /* 82131CCCh */ case   37:  		/* bc 4, CR6_EQ, 64 */
		/* 82131CCCh case   37:*/		if ( !regs.CR[6].eq ) { return 0x82131D0C;  }
		/* 82131CCCh case   37:*/		return 0x82131CD0;
		  /* 82131CD0h */ case   38:  		/* li R26, 1 */
		/* 82131CD0h case   38:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82131CD0h case   38:*/		return 0x82131CD4;
		  /* 82131CD4h */ case   39:  		/* b 64 */
		/* 82131CD4h case   39:*/		return 0x82131D14;
		/* 82131CD4h case   39:*/		return 0x82131CD8;
	}
	return 0x82131CD8;
} // Block from 82131C38h-82131CD8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82131CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131CD8);
		  /* 82131CD8h */ case    0:  		/* li R6, 4 */
		/* 82131CD8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131CD8h case    0:*/		return 0x82131CDC;
		  /* 82131CDCh */ case    1:  		/* mr R5, R19 */
		/* 82131CDCh case    1:*/		regs.R5 = regs.R19;
		/* 82131CDCh case    1:*/		return 0x82131CE0;
		  /* 82131CE0h */ case    2:  		/* addi R4, R1, 128 */
		/* 82131CE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131CE0h case    2:*/		return 0x82131CE4;
		  /* 82131CE4h */ case    3:  		/* mr R3, R18 */
		/* 82131CE4h case    3:*/		regs.R3 = regs.R18;
		/* 82131CE4h case    3:*/		return 0x82131CE8;
		  /* 82131CE8h */ case    4:  		/* bl -283504 */
		/* 82131CE8h case    4:*/		regs.LR = 0x82131CEC; return 0x820EC978;
		/* 82131CE8h case    4:*/		return 0x82131CEC;
		  /* 82131CECh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82131CECh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131CECh case    5:*/		return 0x82131CF0;
		  /* 82131CF0h */ case    6:  		/* bc 12, CR0_LT, 964 */
		/* 82131CF0h case    6:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82131CF0h case    6:*/		return 0x82131CF4;
		  /* 82131CF4h */ case    7:  		/* li R6, 4 */
		/* 82131CF4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131CF4h case    7:*/		return 0x82131CF8;
		  /* 82131CF8h */ case    8:  		/* mr R5, R19 */
		/* 82131CF8h case    8:*/		regs.R5 = regs.R19;
		/* 82131CF8h case    8:*/		return 0x82131CFC;
		  /* 82131CFCh */ case    9:  		/* addi R4, R1, 144 */
		/* 82131CFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 82131CFCh case    9:*/		return 0x82131D00;
		  /* 82131D00h */ case   10:  		/* mr R3, R18 */
		/* 82131D00h case   10:*/		regs.R3 = regs.R18;
		/* 82131D00h case   10:*/		return 0x82131D04;
		  /* 82131D04h */ case   11:  		/* bl -283532 */
		/* 82131D04h case   11:*/		regs.LR = 0x82131D08; return 0x820EC978;
		/* 82131D04h case   11:*/		return 0x82131D08;
		  /* 82131D08h */ case   12:  		/* b 884 */
		/* 82131D08h case   12:*/		return 0x8213207C;
		/* 82131D08h case   12:*/		return 0x82131D0C;
	}
	return 0x82131D0C;
} // Block from 82131CD8h-82131D0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82131D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131D0C);
		  /* 82131D0Ch */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82131D0Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82131D0Ch case    0:*/		return 0x82131D10;
		  /* 82131D10h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82131D10h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82131D18;  }
		/* 82131D10h case    1:*/		return 0x82131D14;
	}
	return 0x82131D14;
} // Block from 82131D0Ch-82131D14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82131D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131D14);
		  /* 82131D14h */ case    0:  		/* li R25, 1 */
		/* 82131D14h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82131D14h case    0:*/		return 0x82131D18;
	}
	return 0x82131D18;
} // Block from 82131D14h-82131D18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131D18);
		  /* 82131D18h */ case    0:  		/* addic. R27, R27, -1 */
		/* 82131D18h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 82131D18h case    0:*/		return 0x82131D1C;
		  /* 82131D1Ch */ case    1:  		/* addi R29, R29, 16 */
		/* 82131D1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 82131D1Ch case    1:*/		return 0x82131D20;
		  /* 82131D20h */ case    2:  		/* bc 4, CR0_EQ, -124 */
		/* 82131D20h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82131CA4;  }
		/* 82131D20h case    2:*/		return 0x82131D24;
	}
	return 0x82131D24;
} // Block from 82131D18h-82131D24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82131D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131D24);
		  /* 82131D24h */ case    0:  		/* cmpwi CR6, R15, 0 */
		/* 82131D24h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82131D24h case    0:*/		return 0x82131D28;
		  /* 82131D28h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82131D28h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131D30;  }
		/* 82131D28h case    1:*/		return 0x82131D2C;
		  /* 82131D2Ch */ case    2:  		/* li R25, 1 */
		/* 82131D2Ch case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82131D2Ch case    2:*/		return 0x82131D30;
	}
	return 0x82131D30;
} // Block from 82131D24h-82131D30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82131D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131D30);
		  /* 82131D30h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 82131D30h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82131D30h case    0:*/		return 0x82131D34;
		  /* 82131D34h */ case    1:  		/* bc 12, CR6_EQ, 144 */
		/* 82131D34h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131DC4;  }
		/* 82131D34h case    1:*/		return 0x82131D38;
		  /* 82131D38h */ case    2:  		/* cmpwi CR6, R26, 0 */
		/* 82131D38h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82131D38h case    2:*/		return 0x82131D3C;
		  /* 82131D3Ch */ case    3:  		/* bc 4, CR6_EQ, 116 */
		/* 82131D3Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82131DB0;  }
		/* 82131D3Ch case    3:*/		return 0x82131D40;
		  /* 82131D40h */ case    4:  		/* cmpwi CR6, R15, 0 */
		/* 82131D40h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82131D40h case    4:*/		return 0x82131D44;
		  /* 82131D44h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 82131D44h case    5:*/		if ( regs.CR[6].eq ) { return 0x82131D54;  }
		/* 82131D44h case    5:*/		return 0x82131D48;
		  /* 82131D48h */ case    6:  		/* lwz R11, <#[R1 + 140]> */
		/* 82131D48h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 82131D48h case    6:*/		return 0x82131D4C;
		  /* 82131D4Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82131D4Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82131D4Ch case    7:*/		return 0x82131D50;
		  /* 82131D50h */ case    8:  		/* bc 12, CR6_EQ, 96 */
		/* 82131D50h case    8:*/		if ( regs.CR[6].eq ) { return 0x82131DB0;  }
		/* 82131D50h case    8:*/		return 0x82131D54;
	}
	return 0x82131D54;
} // Block from 82131D30h-82131D54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82131D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131D54);
		  /* 82131D54h */ case    0:  		/* addi R11, R1, 128 */
		/* 82131D54h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82131D54h case    0:*/		return 0x82131D58;
		  /* 82131D58h */ case    1:  		/* addi R10, R1, 160 */
		/* 82131D58h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82131D58h case    1:*/		return 0x82131D5C;
		  /* 82131D5Ch */ case    2:  		/* addi R9, R1, 176 */
		/* 82131D5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xB0);
		/* 82131D5Ch case    2:*/		return 0x82131D60;
		  /* 82131D60h */ case    3:  		/* addi R8, R1, 192 */
		/* 82131D60h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82131D60h case    3:*/		return 0x82131D64;
		  /* 82131D64h */ case    4:  		/* li R20, 1 */
		/* 82131D64h case    4:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 82131D64h case    4:*/		return 0x82131D68;
		  /* 82131D68h */ case    5:  		/* lwz R7, <#[R11]> */
		/* 82131D68h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82131D68h case    5:*/		return 0x82131D6C;
		  /* 82131D6Ch */ case    6:  		/* lwz R6, <#[R11 + 4]> */
		/* 82131D6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82131D6Ch case    6:*/		return 0x82131D70;
		  /* 82131D70h */ case    7:  		/* lwz R5, <#[R11 + 8]> */
		/* 82131D70h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 82131D70h case    7:*/		return 0x82131D74;
		  /* 82131D74h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 82131D74h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82131D74h case    8:*/		return 0x82131D78;
		  /* 82131D78h */ case    9:  		/* stw R7, <#[R10]> */
		/* 82131D78h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 82131D78h case    9:*/		return 0x82131D7C;
		  /* 82131D7Ch */ case   10:  		/* stw R6, <#[R10 + 4]> */
		/* 82131D7Ch case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82131D7Ch case   10:*/		return 0x82131D80;
		  /* 82131D80h */ case   11:  		/* stw R5, <#[R10 + 8]> */
		/* 82131D80h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x00000008) );
		/* 82131D80h case   11:*/		return 0x82131D84;
		  /* 82131D84h */ case   12:  		/* stw R11, <#[R10 + 12]> */
		/* 82131D84h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82131D84h case   12:*/		return 0x82131D88;
		  /* 82131D88h */ case   13:  		/* stw R24, <#[R9]> */
		/* 82131D88h case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R9 + 0x00000000) );
		/* 82131D88h case   13:*/		return 0x82131D8C;
		  /* 82131D8Ch */ case   14:  		/* stw R24, <#[R9 + 4]> */
		/* 82131D8Ch case   14:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R9 + 0x00000004) );
		/* 82131D8Ch case   14:*/		return 0x82131D90;
		  /* 82131D90h */ case   15:  		/* stw R24, <#[R9 + 8]> */
		/* 82131D90h case   15:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R9 + 0x00000008) );
		/* 82131D90h case   15:*/		return 0x82131D94;
		  /* 82131D94h */ case   16:  		/* stw R24, <#[R9 + 12]> */
		/* 82131D94h case   16:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R9 + 0x0000000C) );
		/* 82131D94h case   16:*/		return 0x82131D98;
		  /* 82131D98h */ case   17:  		/* stw R24, <#[R8]> */
		/* 82131D98h case   17:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R8 + 0x00000000) );
		/* 82131D98h case   17:*/		return 0x82131D9C;
		  /* 82131D9Ch */ case   18:  		/* stw R24, <#[R8 + 4]> */
		/* 82131D9Ch case   18:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R8 + 0x00000004) );
		/* 82131D9Ch case   18:*/		return 0x82131DA0;
		  /* 82131DA0h */ case   19:  		/* stw R24, <#[R8 + 8]> */
		/* 82131DA0h case   19:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R8 + 0x00000008) );
		/* 82131DA0h case   19:*/		return 0x82131DA4;
		  /* 82131DA4h */ case   20:  		/* stw R24, <#[R8 + 12]> */
		/* 82131DA4h case   20:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R8 + 0x0000000C) );
		/* 82131DA4h case   20:*/		return 0x82131DA8;
		  /* 82131DA8h */ case   21:  		/* stw R21, <#[R28 + 32]> */
		/* 82131DA8h case   21:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R28 + 0x00000020) );
		/* 82131DA8h case   21:*/		return 0x82131DAC;
		  /* 82131DACh */ case   22:  		/* stw R21, <#[R31 + 48]> */
		/* 82131DACh case   22:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000030) );
		/* 82131DACh case   22:*/		return 0x82131DB0;
	}
	return 0x82131DB0;
} // Block from 82131D54h-82131DB0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82131DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131DB0);
		  /* 82131DB0h */ case    0:  		/* addi R23, R23, 1 */
		/* 82131DB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82131DB0h case    0:*/		return 0x82131DB4;
		  /* 82131DB4h */ case    1:  		/* addi R31, R31, 4 */
		/* 82131DB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82131DB4h case    1:*/		return 0x82131DB8;
		  /* 82131DB8h */ case    2:  		/* cmplwi CR6, R23, 4 */
		/* 82131DB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000004);
		/* 82131DB8h case    2:*/		return 0x82131DBC;
		  /* 82131DBCh */ case    3:  		/* bc 12, CR6_LT, -360 */
		/* 82131DBCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82131C54;  }
		/* 82131DBCh case    3:*/		return 0x82131DC0;
		  /* 82131DC0h */ case    4:  		/* b 8 */
		/* 82131DC0h case    4:*/		return 0x82131DC8;
		/* 82131DC0h case    4:*/		return 0x82131DC4;
	}
	return 0x82131DC4;
} // Block from 82131DB0h-82131DC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82131DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131DC4);
		  /* 82131DC4h */ case    0:  		/* li R17, 1 */
		/* 82131DC4h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82131DC4h case    0:*/		return 0x82131DC8;
	}
	return 0x82131DC8;
} // Block from 82131DC4h-82131DC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131DC8);
		  /* 82131DC8h */ case    0:  		/* addi R22, R22, 1 */
		/* 82131DC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82131DC8h case    0:*/		return 0x82131DCC;
		  /* 82131DCCh */ case    1:  		/* addi R28, R28, 4 */
		/* 82131DCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82131DCCh case    1:*/		return 0x82131DD0;
		  /* 82131DD0h */ case    2:  		/* cmplwi CR6, R22, 4 */
		/* 82131DD0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000004);
		/* 82131DD0h case    2:*/		return 0x82131DD4;
		  /* 82131DD4h */ case    3:  		/* bc 12, CR6_LT, -400 */
		/* 82131DD4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82131C44;  }
		/* 82131DD4h case    3:*/		return 0x82131DD8;
	}
	return 0x82131DD8;
} // Block from 82131DC8h-82131DD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131DD8);
		  /* 82131DD8h */ case    0:  		/* cmpwi CR6, R17, 0 */
		/* 82131DD8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 82131DD8h case    0:*/		return 0x82131DDC;
		  /* 82131DDCh */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 82131DDCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82131E04;  }
		/* 82131DDCh case    1:*/		return 0x82131DE0;
		  /* 82131DE0h */ case    2:  		/* li R6, 4 */
		/* 82131DE0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131DE0h case    2:*/		return 0x82131DE4;
		  /* 82131DE4h */ case    3:  		/* mr R5, R19 */
		/* 82131DE4h case    3:*/		regs.R5 = regs.R19;
		/* 82131DE4h case    3:*/		return 0x82131DE8;
		  /* 82131DE8h */ case    4:  		/* addi R4, R1, 128 */
		/* 82131DE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131DE8h case    4:*/		return 0x82131DEC;
		  /* 82131DECh */ case    5:  		/* mr R3, R18 */
		/* 82131DECh case    5:*/		regs.R3 = regs.R18;
		/* 82131DECh case    5:*/		return 0x82131DF0;
		  /* 82131DF0h */ case    6:  		/* bl -283768 */
		/* 82131DF0h case    6:*/		regs.LR = 0x82131DF4; return 0x820EC978;
		/* 82131DF0h case    6:*/		return 0x82131DF4;
		  /* 82131DF4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82131DF4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131DF4h case    7:*/		return 0x82131DF8;
		  /* 82131DF8h */ case    8:  		/* bc 12, CR0_LT, 700 */
		/* 82131DF8h case    8:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82131DF8h case    8:*/		return 0x82131DFC;
		  /* 82131DFCh */ case    9:  		/* li R6, 4 */
		/* 82131DFCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131DFCh case    9:*/		return 0x82131E00;
		  /* 82131E00h */ case   10:  		/* b 476 */
		/* 82131E00h case   10:*/		return 0x82131FDC;
		/* 82131E00h case   10:*/		return 0x82131E04;
	}
	return 0x82131E04;
} // Block from 82131DD8h-82131E04h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82131E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131E04);
		  /* 82131E04h */ case    0:  		/* cmpwi CR6, R20, 0 */
		/* 82131E04h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 82131E04h case    0:*/		return 0x82131E08;
		  /* 82131E08h */ case    1:  		/* bc 12, CR6_EQ, 500 */
		/* 82131E08h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131FFC;  }
		/* 82131E08h case    1:*/		return 0x82131E0C;
		  /* 82131E0Ch */ case    2:  		/* li R6, 4 */
		/* 82131E0Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131E0Ch case    2:*/		return 0x82131E10;
		  /* 82131E10h */ case    3:  		/* mr R5, R19 */
		/* 82131E10h case    3:*/		regs.R5 = regs.R19;
		/* 82131E10h case    3:*/		return 0x82131E14;
		  /* 82131E14h */ case    4:  		/* addi R4, R1, 160 */
		/* 82131E14h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 82131E14h case    4:*/		return 0x82131E18;
		  /* 82131E18h */ case    5:  		/* mr R3, R18 */
		/* 82131E18h case    5:*/		regs.R3 = regs.R18;
		/* 82131E18h case    5:*/		return 0x82131E1C;
		  /* 82131E1Ch */ case    6:  		/* li R17, 1 */
		/* 82131E1Ch case    6:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82131E1Ch case    6:*/		return 0x82131E20;
		  /* 82131E20h */ case    7:  		/* bl -283816 */
		/* 82131E20h case    7:*/		regs.LR = 0x82131E24; return 0x820EC978;
		/* 82131E20h case    7:*/		return 0x82131E24;
		  /* 82131E24h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82131E24h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131E24h case    8:*/		return 0x82131E28;
		  /* 82131E28h */ case    9:  		/* bc 12, CR0_LT, 652 */
		/* 82131E28h case    9:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82131E28h case    9:*/		return 0x82131E2C;
		  /* 82131E2Ch */ case   10:  		/* li R6, 4 */
		/* 82131E2Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131E2Ch case   10:*/		return 0x82131E30;
		  /* 82131E30h */ case   11:  		/* mr R5, R19 */
		/* 82131E30h case   11:*/		regs.R5 = regs.R19;
		/* 82131E30h case   11:*/		return 0x82131E34;
		  /* 82131E34h */ case   12:  		/* addi R4, R1, 176 */
		/* 82131E34h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 82131E34h case   12:*/		return 0x82131E38;
		  /* 82131E38h */ case   13:  		/* mr R3, R18 */
		/* 82131E38h case   13:*/		regs.R3 = regs.R18;
		/* 82131E38h case   13:*/		return 0x82131E3C;
		  /* 82131E3Ch */ case   14:  		/* bl -283844 */
		/* 82131E3Ch case   14:*/		regs.LR = 0x82131E40; return 0x820EC978;
		/* 82131E3Ch case   14:*/		return 0x82131E40;
		  /* 82131E40h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82131E40h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131E40h case   15:*/		return 0x82131E44;
		  /* 82131E44h */ case   16:  		/* bc 12, CR0_LT, 624 */
		/* 82131E44h case   16:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82131E44h case   16:*/		return 0x82131E48;
		  /* 82131E48h */ case   17:  		/* li R6, 4 */
		/* 82131E48h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82131E48h case   17:*/		return 0x82131E4C;
		  /* 82131E4Ch */ case   18:  		/* addi R4, R1, 192 */
		/* 82131E4Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82131E4Ch case   18:*/		return 0x82131E50;
		  /* 82131E50h */ case   19:  		/* b 400 */
		/* 82131E50h case   19:*/		return 0x82131FE0;
		/* 82131E50h case   19:*/		return 0x82131E54;
	}
	return 0x82131E54;
} // Block from 82131E04h-82131E54h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82131E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131E54);
		  /* 82131E54h */ case    0:  		/* cmplwi CR6, R16, 3 */
		/* 82131E54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000003);
		/* 82131E54h case    0:*/		return 0x82131E58;
	}
	return 0x82131E58;
} // Block from 82131E54h-82131E58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131E58h
// Function '?FixPortConstraintsAndFixCMP@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131E58);
		  /* 82131E58h */ case    0:  		/* bc 4, CR6_EQ, 420 */
		/* 82131E58h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82131FFC;  }
		/* 82131E58h case    0:*/		return 0x82131E5C;
		  /* 82131E5Ch */ case    1:  		/* li R11, 4 */
		/* 82131E5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82131E5Ch case    1:*/		return 0x82131E60;
		  /* 82131E60h */ case    2:  		/* li R30, -1 */
		/* 82131E60h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 82131E60h case    2:*/		return 0x82131E64;
		  /* 82131E64h */ case    3:  		/* mr R10, R21 */
		/* 82131E64h case    3:*/		regs.R10 = regs.R21;
		/* 82131E64h case    3:*/		return 0x82131E68;
		  /* 82131E68h */ case    4:  		/* mr R25, R30 */
		/* 82131E68h case    4:*/		regs.R25 = regs.R30;
		/* 82131E68h case    4:*/		return 0x82131E6C;
		  /* 82131E6Ch */ case    5:  		/* addi R9, R1, 80 */
		/* 82131E6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82131E6Ch case    5:*/		return 0x82131E70;
		  /* 82131E70h */ case    6:  		/* mtspr CTR, R11 */
		/* 82131E70h case    6:*/		regs.CTR = regs.R11;
		/* 82131E70h case    6:*/		return 0x82131E74;
		  /* 82131E74h */ case    7:  		/* lwz R11, <#[R9]> */
		/* 82131E74h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82131E74h case    7:*/		return 0x82131E78;
		  /* 82131E78h */ case    8:  		/* cmpwi CR6, R11, -1 */
		/* 82131E78h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82131E78h case    8:*/		return 0x82131E7C;
		  /* 82131E7Ch */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 82131E7Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x82131E84;  }
		/* 82131E7Ch case    9:*/		return 0x82131E80;
		  /* 82131E80h */ case   10:  		/* mr R25, R10 */
		/* 82131E80h case   10:*/		regs.R25 = regs.R10;
		/* 82131E80h case   10:*/		return 0x82131E84;
	}
	return 0x82131E84;
} // Block from 82131E58h-82131E84h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82131E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131E84);
		  /* 82131E84h */ case    0:  		/* addi R10, R10, 1 */
		/* 82131E84h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82131E84h case    0:*/		return 0x82131E88;
		  /* 82131E88h */ case    1:  		/* addi R9, R9, 4 */
		/* 82131E88h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82131E88h case    1:*/		return 0x82131E8C;
		  /* 82131E8Ch */ case    2:  		/* bc 16, CR0_LT, -24 */
		/* 82131E8Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82131E74;  }
		/* 82131E8Ch case    2:*/		return 0x82131E90;
		  /* 82131E90h */ case    3:  		/* mr R22, R21 */
		/* 82131E90h case    3:*/		regs.R22 = regs.R21;
		/* 82131E90h case    3:*/		return 0x82131E94;
		  /* 82131E94h */ case    4:  		/* addi R26, R1, 144 */
		/* 82131E94h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x90);
		/* 82131E94h case    4:*/		return 0x82131E98;
		  /* 82131E98h */ case    5:  		/* cmpwi CR6, R17, 0 */
		/* 82131E98h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 82131E98h case    5:*/		return 0x82131E9C;
		  /* 82131E9Ch */ case    6:  		/* bc 4, CR6_EQ, 288 */
		/* 82131E9Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82131FBC;  }
		/* 82131E9Ch case    6:*/		return 0x82131EA0;
		  /* 82131EA0h */ case    7:  		/* mr R23, R21 */
		/* 82131EA0h case    7:*/		regs.R23 = regs.R21;
		/* 82131EA0h case    7:*/		return 0x82131EA4;
		  /* 82131EA4h */ case    8:  		/* addi R27, R1, 144 */
		/* 82131EA4h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0x90);
		/* 82131EA4h case    8:*/		return 0x82131EA8;
		  /* 82131EA8h */ case    9:  		/* cmpwi CR6, R17, 0 */
		/* 82131EA8h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 82131EA8h case    9:*/		return 0x82131EAC;
		  /* 82131EACh */ case   10:  		/* bc 4, CR6_EQ, 248 */
		/* 82131EACh case   10:*/		if ( !regs.CR[6].eq ) { return 0x82131FA4;  }
		/* 82131EACh case   10:*/		return 0x82131EB0;
		  /* 82131EB0h */ case   11:  		/* cmplw CR6, R23, R22 */
		/* 82131EB0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 82131EB0h case   11:*/		return 0x82131EB4;
		  /* 82131EB4h */ case   12:  		/* bc 12, CR6_EQ, 224 */
		/* 82131EB4h case   12:*/		if ( regs.CR[6].eq ) { return 0x82131F94;  }
		/* 82131EB4h case   12:*/		return 0x82131EB8;
		  /* 82131EB8h */ case   13:  		/* cmplw CR6, R23, R25 */
		/* 82131EB8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R25);
		/* 82131EB8h case   13:*/		return 0x82131EBC;
		  /* 82131EBCh */ case   14:  		/* bc 12, CR6_EQ, 216 */
		/* 82131EBCh case   14:*/		if ( regs.CR[6].eq ) { return 0x82131F94;  }
		/* 82131EBCh case   14:*/		return 0x82131EC0;
		  /* 82131EC0h */ case   15:  		/* cmplw CR6, R22, R25 */
		/* 82131EC0h case   15:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R25);
		/* 82131EC0h case   15:*/		return 0x82131EC4;
		  /* 82131EC4h */ case   16:  		/* bc 12, CR6_EQ, 208 */
		/* 82131EC4h case   16:*/		if ( regs.CR[6].eq ) { return 0x82131F94;  }
		/* 82131EC4h case   16:*/		return 0x82131EC8;
		  /* 82131EC8h */ case   17:  		/* addi R11, R1, 128 */
		/* 82131EC8h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82131EC8h case   17:*/		return 0x82131ECC;
		  /* 82131ECCh */ case   18:  		/* addi R10, R1, 144 */
		/* 82131ECCh case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 82131ECCh case   18:*/		return 0x82131ED0;
		  /* 82131ED0h */ case   19:  		/* rlwinm R9, R25, 2, 0, 29 */
		/* 82131ED0h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R25);
		/* 82131ED0h case   19:*/		return 0x82131ED4;
		  /* 82131ED4h */ case   20:  		/* addi R8, R1, 144 */
		/* 82131ED4h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 82131ED4h case   20:*/		return 0x82131ED8;
		  /* 82131ED8h */ case   21:  		/* mr R29, R21 */
		/* 82131ED8h case   21:*/		regs.R29 = regs.R21;
		/* 82131ED8h case   21:*/		return 0x82131EDC;
		  /* 82131EDCh */ case   22:  		/* std R24, <#[R11]> */
		/* 82131EDCh case   22:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 82131EDCh case   22:*/		return 0x82131EE0;
		  /* 82131EE0h */ case   23:  		/* mr R31, R21 */
		/* 82131EE0h case   23:*/		regs.R31 = regs.R21;
		/* 82131EE0h case   23:*/		return 0x82131EE4;
		  /* 82131EE4h */ case   24:  		/* std R24, <#[R11 + 8]> */
		/* 82131EE4h case   24:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 82131EE4h case   24:*/		return 0x82131EE8;
		  /* 82131EE8h */ case   25:  		/* stw R21, <#[R10]> */
		/* 82131EE8h case   25:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + 0x00000000) );
		/* 82131EE8h case   25:*/		return 0x82131EEC;
		  /* 82131EECh */ case   26:  		/* cmplwi CR6, R19, 0 */
		/* 82131EECh case   26:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82131EECh case   26:*/		return 0x82131EF0;
		  /* 82131EF0h */ case   27:  		/* stw R21, <#[R10 + 4]> */
		/* 82131EF0h case   27:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + 0x00000004) );
		/* 82131EF0h case   27:*/		return 0x82131EF4;
		  /* 82131EF4h */ case   28:  		/* stw R21, <#[R10 + 8]> */
		/* 82131EF4h case   28:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + 0x00000008) );
		/* 82131EF4h case   28:*/		return 0x82131EF8;
		  /* 82131EF8h */ case   29:  		/* stw R21, <#[R10 + 12]> */
		/* 82131EF8h case   29:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + 0x0000000C) );
		/* 82131EF8h case   29:*/		return 0x82131EFC;
		  /* 82131EFCh */ case   30:  		/* stw R21, <#[R26 - 16]> */
		/* 82131EFCh case   30:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R26 + 0xFFFFFFF0) );
		/* 82131EFCh case   30:*/		return 0x82131F00;
		  /* 82131F00h */ case   31:  		/* stw R21, <#[R27 - 16]> */
		/* 82131F00h case   31:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R27 + 0xFFFFFFF0) );
		/* 82131F00h case   31:*/		return 0x82131F04;
		  /* 82131F04h */ case   32:  		/* stw R30, <#[R26]> */
		/* 82131F04h case   32:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R26 + 0x00000000) );
		/* 82131F04h case   32:*/		return 0x82131F08;
		  /* 82131F08h */ case   33:  		/* stw R30, <#[R27]> */
		/* 82131F08h case   33:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 82131F08h case   33:*/		return 0x82131F0C;
		  /* 82131F0Ch */ case   34:  		/* stwx R30, <#[R9 + R8]> */
		/* 82131F0Ch case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82131F0Ch case   34:*/		return 0x82131F10;
		  /* 82131F10h */ case   35:  		/* bc 12, CR6_EQ, 60 */
		/* 82131F10h case   35:*/		if ( regs.CR[6].eq ) { return 0x82131F4C;  }
		/* 82131F10h case   35:*/		return 0x82131F14;
		  /* 82131F14h */ case   36:  		/* addi R28, R1, 80 */
		/* 82131F14h case   36:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x50);
		/* 82131F14h case   36:*/		return 0x82131F18;
		  /* 82131F18h */ case   37:  		/* cmpwi CR6, R29, 0 */
		/* 82131F18h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82131F18h case   37:*/		return 0x82131F1C;
		  /* 82131F1Ch */ case   38:  		/* bc 4, CR6_EQ, 48 */
		/* 82131F1Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x82131F4C;  }
		/* 82131F1Ch case   38:*/		return 0x82131F20;
		  /* 82131F20h */ case   39:  		/* li R5, 5 */
		/* 82131F20h case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82131F20h case   39:*/		return 0x82131F24;
		  /* 82131F24h */ case   40:  		/* addi R4, R1, 128 */
		/* 82131F24h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131F24h case   40:*/		return 0x82131F28;
		  /* 82131F28h */ case   41:  		/* mr R3, R28 */
		/* 82131F28h case   41:*/		regs.R3 = regs.R28;
		/* 82131F28h case   41:*/		return 0x82131F2C;
		  /* 82131F2Ch */ case   42:  		/* bl -5028 */
		/* 82131F2Ch case   42:*/		regs.LR = 0x82131F30; return 0x82130B88;
		/* 82131F2Ch case   42:*/		return 0x82131F30;
		  /* 82131F30h */ case   43:  		/* cmpwi CR0, R3, 0 */
		/* 82131F30h case   43:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131F30h case   43:*/		return 0x82131F34;
		  /* 82131F34h */ case   44:  		/* bc 4, CR0_EQ, 8 */
		/* 82131F34h case   44:*/		if ( !regs.CR[0].eq ) { return 0x82131F3C;  }
		/* 82131F34h case   44:*/		return 0x82131F38;
		  /* 82131F38h */ case   45:  		/* li R29, 1 */
		/* 82131F38h case   45:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82131F38h case   45:*/		return 0x82131F3C;
	}
	return 0x82131F3C;
} // Block from 82131E84h-82131F3Ch (46 instructions)

//////////////////////////////////////////////////////
// Block at 82131F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131F3C);
		  /* 82131F3Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 82131F3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82131F3Ch case    0:*/		return 0x82131F40;
		  /* 82131F40h */ case    1:  		/* addi R28, R28, 16 */
		/* 82131F40h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x10);
		/* 82131F40h case    1:*/		return 0x82131F44;
		  /* 82131F44h */ case    2:  		/* cmplw CR6, R31, R19 */
		/* 82131F44h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R19);
		/* 82131F44h case    2:*/		return 0x82131F48;
		  /* 82131F48h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 82131F48h case    3:*/		if ( regs.CR[6].lt ) { return 0x82131F18;  }
		/* 82131F48h case    3:*/		return 0x82131F4C;
	}
	return 0x82131F4C;
} // Block from 82131F3Ch-82131F4Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131F4C);
		  /* 82131F4Ch */ case    0:  		/* lwz R11, <#[R1 + 140]> */
		/* 82131F4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 82131F4Ch case    0:*/		return 0x82131F50;
		  /* 82131F50h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82131F50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82131F50h case    1:*/		return 0x82131F54;
		  /* 82131F54h */ case    2:  		/* bc 4, CR6_EQ, 52 */
		/* 82131F54h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82131F88;  }
		/* 82131F54h case    2:*/		return 0x82131F58;
		  /* 82131F58h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 82131F58h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 82131F58h case    3:*/		return 0x82131F5C;
		  /* 82131F5Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82131F5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82131F5Ch case    4:*/		return 0x82131F60;
		  /* 82131F60h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82131F60h case    5:*/		if ( regs.CR[6].eq ) { return 0x82131F7C;  }
		/* 82131F60h case    5:*/		return 0x82131F64;
		  /* 82131F64h */ case    6:  		/* lwz R11, <#[R1 + 132]> */
		/* 82131F64h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82131F64h case    6:*/		return 0x82131F68;
		  /* 82131F68h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82131F68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82131F68h case    7:*/		return 0x82131F6C;
		  /* 82131F6Ch */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82131F6Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82131F7C;  }
		/* 82131F6Ch case    8:*/		return 0x82131F70;
		  /* 82131F70h */ case    9:  		/* lwz R11, <#[R1 + 136]> */
		/* 82131F70h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82131F70h case    9:*/		return 0x82131F74;
		  /* 82131F74h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82131F74h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82131F74h case   10:*/		return 0x82131F78;
		  /* 82131F78h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 82131F78h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82131F88;  }
		/* 82131F78h case   11:*/		return 0x82131F7C;
	}
	return 0x82131F7C;
} // Block from 82131F4Ch-82131F7Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82131F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131F7C);
		  /* 82131F7Ch */ case    0:  		/* cmpwi CR6, R15, 0 */
		/* 82131F7Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82131F7Ch case    0:*/		return 0x82131F80;
		  /* 82131F80h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82131F80h case    1:*/		if ( regs.CR[6].eq ) { return 0x82131F88;  }
		/* 82131F80h case    1:*/		return 0x82131F84;
		  /* 82131F84h */ case    2:  		/* li R29, 1 */
		/* 82131F84h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82131F84h case    2:*/		return 0x82131F88;
	}
	return 0x82131F88;
} // Block from 82131F7Ch-82131F88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82131F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131F88);
		  /* 82131F88h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 82131F88h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82131F88h case    0:*/		return 0x82131F8C;
		  /* 82131F8Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82131F8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82131F94;  }
		/* 82131F8Ch case    1:*/		return 0x82131F90;
		  /* 82131F90h */ case    2:  		/* li R17, 1 */
		/* 82131F90h case    2:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82131F90h case    2:*/		return 0x82131F94;
	}
	return 0x82131F94;
} // Block from 82131F88h-82131F94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82131F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131F94);
		  /* 82131F94h */ case    0:  		/* addi R23, R23, 1 */
		/* 82131F94h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82131F94h case    0:*/		return 0x82131F98;
		  /* 82131F98h */ case    1:  		/* addi R27, R27, 4 */
		/* 82131F98h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82131F98h case    1:*/		return 0x82131F9C;
		  /* 82131F9Ch */ case    2:  		/* cmplwi CR6, R23, 4 */
		/* 82131F9Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000004);
		/* 82131F9Ch case    2:*/		return 0x82131FA0;
		  /* 82131FA0h */ case    3:  		/* bc 12, CR6_LT, -248 */
		/* 82131FA0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82131EA8;  }
		/* 82131FA0h case    3:*/		return 0x82131FA4;
	}
	return 0x82131FA4;
} // Block from 82131F94h-82131FA4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82131FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131FA4);
		  /* 82131FA4h */ case    0:  		/* addi R22, R22, 1 */
		/* 82131FA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82131FA4h case    0:*/		return 0x82131FA8;
		  /* 82131FA8h */ case    1:  		/* addi R26, R26, 4 */
		/* 82131FA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82131FA8h case    1:*/		return 0x82131FAC;
		  /* 82131FACh */ case    2:  		/* cmplwi CR6, R22, 4 */
		/* 82131FACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000004);
		/* 82131FACh case    2:*/		return 0x82131FB0;
		  /* 82131FB0h */ case    3:  		/* bc 12, CR6_LT, -280 */
		/* 82131FB0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82131E98;  }
		/* 82131FB0h case    3:*/		return 0x82131FB4;
		  /* 82131FB4h */ case    4:  		/* cmpwi CR6, R17, 0 */
		/* 82131FB4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 82131FB4h case    4:*/		return 0x82131FB8;
		  /* 82131FB8h */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 82131FB8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82131FFC;  }
		/* 82131FB8h case    5:*/		return 0x82131FBC;
	}
	return 0x82131FBC;
} // Block from 82131FA4h-82131FBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82131FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131FBC);
		  /* 82131FBCh */ case    0:  		/* li R6, 3 */
		/* 82131FBCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82131FBCh case    0:*/		return 0x82131FC0;
		  /* 82131FC0h */ case    1:  		/* mr R5, R19 */
		/* 82131FC0h case    1:*/		regs.R5 = regs.R19;
		/* 82131FC0h case    1:*/		return 0x82131FC4;
		  /* 82131FC4h */ case    2:  		/* addi R4, R1, 128 */
		/* 82131FC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82131FC4h case    2:*/		return 0x82131FC8;
		  /* 82131FC8h */ case    3:  		/* mr R3, R18 */
		/* 82131FC8h case    3:*/		regs.R3 = regs.R18;
		/* 82131FC8h case    3:*/		return 0x82131FCC;
		  /* 82131FCCh */ case    4:  		/* bl -284244 */
		/* 82131FCCh case    4:*/		regs.LR = 0x82131FD0; return 0x820EC978;
		/* 82131FCCh case    4:*/		return 0x82131FD0;
		  /* 82131FD0h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82131FD0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131FD0h case    5:*/		return 0x82131FD4;
		  /* 82131FD4h */ case    6:  		/* bc 12, CR0_LT, 224 */
		/* 82131FD4h case    6:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82131FD4h case    6:*/		return 0x82131FD8;
		  /* 82131FD8h */ case    7:  		/* li R6, 3 */
		/* 82131FD8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82131FD8h case    7:*/		return 0x82131FDC;
	}
	return 0x82131FDC;
} // Block from 82131FBCh-82131FDCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82131FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131FDC);
		  /* 82131FDCh */ case    0:  		/* addi R4, R1, 144 */
		/* 82131FDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 82131FDCh case    0:*/		return 0x82131FE0;
	}
	return 0x82131FE0;
} // Block from 82131FDCh-82131FE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82131FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131FE0);
		  /* 82131FE0h */ case    0:  		/* mr R5, R19 */
		/* 82131FE0h case    0:*/		regs.R5 = regs.R19;
		/* 82131FE0h case    0:*/		return 0x82131FE4;
		  /* 82131FE4h */ case    1:  		/* mr R3, R18 */
		/* 82131FE4h case    1:*/		regs.R3 = regs.R18;
		/* 82131FE4h case    1:*/		return 0x82131FE8;
		  /* 82131FE8h */ case    2:  		/* bl -284272 */
		/* 82131FE8h case    2:*/		regs.LR = 0x82131FEC; return 0x820EC978;
		/* 82131FE8h case    2:*/		return 0x82131FEC;
		  /* 82131FECh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82131FECh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82131FECh case    3:*/		return 0x82131FF0;
		  /* 82131FF0h */ case    4:  		/* bc 12, CR0_LT, 196 */
		/* 82131FF0h case    4:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82131FF0h case    4:*/		return 0x82131FF4;
		  /* 82131FF4h */ case    5:  		/* cmpwi CR6, R17, 0 */
		/* 82131FF4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 82131FF4h case    5:*/		return 0x82131FF8;
		  /* 82131FF8h */ case    6:  		/* bc 4, CR6_EQ, 140 */
		/* 82131FF8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82132084;  }
		/* 82131FF8h case    6:*/		return 0x82131FFC;
	}
	return 0x82131FFC;
} // Block from 82131FE0h-82131FFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82131FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82131FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82131FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82131FFC);
		  /* 82131FFCh */ case    0:  		/* mr R30, R21 */
		/* 82131FFCh case    0:*/		regs.R30 = regs.R21;
		/* 82131FFCh case    0:*/		return 0x82132000;
		  /* 82132000h */ case    1:  		/* cmplwi CR6, R16, 0 */
		/* 82132000h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82132000h case    1:*/		return 0x82132004;
		  /* 82132004h */ case    2:  		/* bc 12, CR6_EQ, 128 */
		/* 82132004h case    2:*/		if ( regs.CR[6].eq ) { return 0x82132084;  }
		/* 82132004h case    2:*/		return 0x82132008;
		  /* 82132008h */ case    3:  		/* mr R31, R21 */
		/* 82132008h case    3:*/		regs.R31 = regs.R21;
		/* 82132008h case    3:*/		return 0x8213200C;
		  /* 8213200Ch */ case    4:  		/* addi R11, R1, 128 */
		/* 8213200Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8213200Ch case    4:*/		return 0x82132010;
		  /* 82132010h */ case    5:  		/* lwz R10, <#[R18 + 260]> */
		/* 82132010h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000104) );
		/* 82132010h case    5:*/		return 0x82132014;
		  /* 82132014h */ case    6:  		/* lwz R9, <#[R18 + 20]> */
		/* 82132014h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x00000014) );
		/* 82132014h case    6:*/		return 0x82132018;
		  /* 82132018h */ case    7:  		/* addi R8, R1, 128 */
		/* 82132018h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 82132018h case    7:*/		return 0x8213201C;
		  /* 8213201Ch */ case    8:  		/* mr R6, R16 */
		/* 8213201Ch case    8:*/		regs.R6 = regs.R16;
		/* 8213201Ch case    8:*/		return 0x82132020;
		  /* 82132020h */ case    9:  		/* mr R5, R19 */
		/* 82132020h case    9:*/		regs.R5 = regs.R19;
		/* 82132020h case    9:*/		return 0x82132024;
		  /* 82132024h */ case   10:  		/* addi R4, R1, 128 */
		/* 82132024h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82132024h case   10:*/		return 0x82132028;
		  /* 82132028h */ case   11:  		/* std R24, <#[R11]> */
		/* 82132028h case   11:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 82132028h case   11:*/		return 0x8213202C;
		  /* 8213202Ch */ case   12:  		/* mr R3, R18 */
		/* 8213202Ch case   12:*/		regs.R3 = regs.R18;
		/* 8213202Ch case   12:*/		return 0x82132030;
		  /* 82132030h */ case   13:  		/* std R24, <#[R11 + 8]> */
		/* 82132030h case   13:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 82132030h case   13:*/		return 0x82132034;
		  /* 82132034h */ case   14:  		/* lwz R11, <#[R10 + 16]> */
		/* 82132034h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82132034h case   14:*/		return 0x82132038;
		  /* 82132038h */ case   15:  		/* lwzx R11, <#[R11 + R31]> */
		/* 82132038h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82132038h case   15:*/		return 0x8213203C;
		  /* 8213203Ch */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213203Ch case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213203Ch case   16:*/		return 0x82132040;
		  /* 82132040h */ case   17:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82132040h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82132040h case   17:*/		return 0x82132044;
		  /* 82132044h */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 82132044h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82132044h case   18:*/		return 0x82132048;
		  /* 82132048h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132048h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132048h case   19:*/		return 0x8213204C;
		  /* 8213204Ch */ case   20:  		/* stwx R21, <#[R11 + R8]> */
		/* 8213204Ch case   20:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213204Ch case   20:*/		return 0x82132050;
		  /* 82132050h */ case   21:  		/* bl -284376 */
		/* 82132050h case   21:*/		regs.LR = 0x82132054; return 0x820EC978;
		/* 82132050h case   21:*/		return 0x82132054;
		  /* 82132054h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 82132054h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82132054h case   22:*/		return 0x82132058;
		  /* 82132058h */ case   23:  		/* bc 12, CR0_LT, 92 */
		/* 82132058h case   23:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82132058h case   23:*/		return 0x8213205C;
		  /* 8213205Ch */ case   24:  		/* addi R30, R30, 1 */
		/* 8213205Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213205Ch case   24:*/		return 0x82132060;
		  /* 82132060h */ case   25:  		/* addi R31, R31, 4 */
		/* 82132060h case   25:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82132060h case   25:*/		return 0x82132064;
		  /* 82132064h */ case   26:  		/* cmplw CR6, R30, R16 */
		/* 82132064h case   26:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R16);
		/* 82132064h case   26:*/		return 0x82132068;
		  /* 82132068h */ case   27:  		/* bc 12, CR6_LT, -92 */
		/* 82132068h case   27:*/		if ( regs.CR[6].lt ) { return 0x8213200C;  }
		/* 82132068h case   27:*/		return 0x8213206C;
		  /* 8213206Ch */ case   28:  		/* b 24 */
		/* 8213206Ch case   28:*/		return 0x82132084;
		/* 8213206Ch case   28:*/		return 0x82132070;
	}
	return 0x82132070;
} // Block from 82131FFCh-82132070h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82132070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132070);
		  /* 82132070h */ case    0:  		/* mr R4, R28 */
		/* 82132070h case    0:*/		regs.R4 = regs.R28;
		/* 82132070h case    0:*/		return 0x82132074;
		  /* 82132074h */ case    1:  		/* mr R3, R18 */
		/* 82132074h case    1:*/		regs.R3 = regs.R18;
		/* 82132074h case    1:*/		return 0x82132078;
		  /* 82132078h */ case    2:  		/* bl -216080 */
		/* 82132078h case    2:*/		regs.LR = 0x8213207C; return 0x820FD468;
		/* 82132078h case    2:*/		return 0x8213207C;
	}
	return 0x8213207C;
} // Block from 82132070h-8213207Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213207Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213207C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213207C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213207C);
		  /* 8213207Ch */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 8213207Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213207Ch case    0:*/		return 0x82132080;
		  /* 82132080h */ case    1:  		/* bc 12, CR0_LT, 52 */
		/* 82132080h case    1:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 82132080h case    1:*/		return 0x82132084;
	}
	return 0x82132084;
} // Block from 8213207Ch-82132084h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132084);
		  /* 82132084h */ case    0:  		/* lwz R11, <#[R18 + 260]> */
		/* 82132084h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000104) );
		/* 82132084h case    0:*/		return 0x82132088;
		  /* 82132088h */ case    1:  		/* mr R3, R21 */
		/* 82132088h case    1:*/		regs.R3 = regs.R21;
		/* 82132088h case    1:*/		return 0x8213208C;
		  /* 8213208Ch */ case    2:  		/* stw R21, <#[R11]> */
		/* 8213208Ch case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 8213208Ch case    2:*/		return 0x82132090;
		  /* 82132090h */ case    3:  		/* b 36 */
		/* 82132090h case    3:*/		return 0x821320B4;
		/* 82132090h case    3:*/		return 0x82132094;
	}
	return 0x82132094;
} // Block from 82132084h-82132094h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82132094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132094);
		  /* 82132094h */ case    0:  		/* mr R4, R28 */
		/* 82132094h case    0:*/		regs.R4 = regs.R28;
		/* 82132094h case    0:*/		return 0x82132098;
		  /* 82132098h */ case    1:  		/* mr R3, R18 */
		/* 82132098h case    1:*/		regs.R3 = regs.R18;
		/* 82132098h case    1:*/		return 0x8213209C;
		  /* 8213209Ch */ case    2:  		/* bl -216116 */
		/* 8213209Ch case    2:*/		regs.LR = 0x821320A0; return 0x820FD468;
		/* 8213209Ch case    2:*/		return 0x821320A0;
		  /* 821320A0h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 821320A0h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821320A0h case    3:*/		return 0x821320A4;
		  /* 821320A4h */ case    4:  		/* bc 12, CR0_LT, 16 */
		/* 821320A4h case    4:*/		if ( regs.CR[0].lt ) { return 0x821320B4;  }
		/* 821320A4h case    4:*/		return 0x821320A8;
		  /* 821320A8h */ case    5:  		/* lwz R11, <#[R18 + 260]> */
		/* 821320A8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000104) );
		/* 821320A8h case    5:*/		return 0x821320AC;
		  /* 821320ACh */ case    6:  		/* stw R21, <#[R11]> */
		/* 821320ACh case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 821320ACh case    6:*/		return 0x821320B0;
	}
	return 0x821320B0;
} // Block from 82132094h-821320B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821320B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821320B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821320B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821320B0);
		  /* 821320B0h */ case    0:  		/* li R3, 0 */
		/* 821320B0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821320B0h case    0:*/		return 0x821320B4;
	}
	return 0x821320B4;
} // Block from 821320B0h-821320B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821320B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821320B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821320B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821320B4);
		  /* 821320B4h */ case    0:  		/* addi R1, R1, 368 */
		/* 821320B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 821320B4h case    0:*/		return 0x821320B8;
		  /* 821320B8h */ case    1:  		/* b -659016 */
		/* 821320B8h case    1:*/		return 0x82091270;
		/* 821320B8h case    1:*/		return 0x821320BC;
		  /* 821320BCh */ case    2:  		/* nop */
		/* 821320BCh case    2:*/		cpu::op::nop();
		/* 821320BCh case    2:*/		return 0x821320C0;
	}
	return 0x821320C0;
} // Block from 821320B4h-821320C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821320C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821320C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821320C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821320C0);
		  /* 821320C0h */ case    0:  		/* mfspr R12, LR */
		/* 821320C0h case    0:*/		regs.R12 = regs.LR;
		/* 821320C0h case    0:*/		return 0x821320C4;
		  /* 821320C4h */ case    1:  		/* bl -659068 */
		/* 821320C4h case    1:*/		regs.LR = 0x821320C8; return 0x82091248;
		/* 821320C4h case    1:*/		return 0x821320C8;
		  /* 821320C8h */ case    2:  		/* stwu R1, <#[R1 - 464]> */
		/* 821320C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE30);
		/* 821320C8h case    2:*/		return 0x821320CC;
		  /* 821320CCh */ case    3:  		/* lhz R11, <#[R3 + 202]> */
		/* 821320CCh case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 821320CCh case    3:*/		return 0x821320D0;
		  /* 821320D0h */ case    4:  		/* mr R27, R3 */
		/* 821320D0h case    4:*/		regs.R27 = regs.R3;
		/* 821320D0h case    4:*/		return 0x821320D4;
		  /* 821320D4h */ case    5:  		/* mr R24, R4 */
		/* 821320D4h case    5:*/		regs.R24 = regs.R4;
		/* 821320D4h case    5:*/		return 0x821320D8;
		  /* 821320D8h */ case    6:  		/* cmplwi CR6, R11, 260 */
		/* 821320D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 821320D8h case    6:*/		return 0x821320DC;
		  /* 821320DCh */ case    7:  		/* bc 12, CR6_LT, 12 */
		/* 821320DCh case    7:*/		if ( regs.CR[6].lt ) { return 0x821320E8;  }
		/* 821320DCh case    7:*/		return 0x821320E0;
		  /* 821320E0h */ case    8:  		/* li R3, 1 */
		/* 821320E0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821320E0h case    8:*/		return 0x821320E4;
		  /* 821320E4h */ case    9:  		/* b 1288 */
		/* 821320E4h case    9:*/		return 0x821325EC;
		/* 821320E4h case    9:*/		return 0x821320E8;
	}
	return 0x821320E8;
} // Block from 821320C0h-821320E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821320E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821320E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821320E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821320E8);
		  /* 821320E8h */ case    0:  		/* lwz R11, <#[R27 + 260]> */
		/* 821320E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000104) );
		/* 821320E8h case    0:*/		return 0x821320EC;
		  /* 821320ECh */ case    1:  		/* li R31, 0 */
		/* 821320ECh case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821320ECh case    1:*/		return 0x821320F0;
		  /* 821320F0h */ case    2:  		/* li R10, 2 */
		/* 821320F0h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821320F0h case    2:*/		return 0x821320F4;
		  /* 821320F4h */ case    3:  		/* li R9, 1 */
		/* 821320F4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821320F4h case    3:*/		return 0x821320F8;
		  /* 821320F8h */ case    4:  		/* stw R31, <#[R1 + 96]> */
		/* 821320F8h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 821320F8h case    4:*/		return 0x821320FC;
		  /* 821320FCh */ case    5:  		/* li R8, 3 */
		/* 821320FCh case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 821320FCh case    5:*/		return 0x82132100;
		  /* 82132100h */ case    6:  		/* stw R31, <#[R1 + 144]> */
		/* 82132100h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000090) );
		/* 82132100h case    6:*/		return 0x82132104;
		  /* 82132104h */ case    7:  		/* stw R9, <#[R1 + 148]> */
		/* 82132104h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000094) );
		/* 82132104h case    7:*/		return 0x82132108;
		  /* 82132108h */ case    8:  		/* stw R10, <#[R1 + 152]> */
		/* 82132108h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 82132108h case    8:*/		return 0x8213210C;
		  /* 8213210Ch */ case    9:  		/* stw R8, <#[R1 + 156]> */
		/* 8213210Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000009C) );
		/* 8213210Ch case    9:*/		return 0x82132110;
		  /* 82132110h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 82132110h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82132110h case   10:*/		return 0x82132114;
		  /* 82132114h */ case   11:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 82132114h case   11:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 82132114h case   11:*/		return 0x82132118;
		  /* 82132118h */ case   12:  		/* cmplwi CR6, R11, 3 */
		/* 82132118h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82132118h case   12:*/		return 0x8213211C;
		  /* 8213211Ch */ case   13:  		/* bc 4, CR6_EQ, -60 */
		/* 8213211Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 8213211Ch case   13:*/		return 0x82132120;
		  /* 82132120h */ case   14:  		/* lis R11, -32217 */
		/* 82132120h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82132120h case   14:*/		return 0x82132124;
		  /* 82132124h */ case   15:  		/* mr R29, R31 */
		/* 82132124h case   15:*/		regs.R29 = regs.R31;
		/* 82132124h case   15:*/		return 0x82132128;
		  /* 82132128h */ case   16:  		/* addi R28, R11, 15812 */
		/* 82132128h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x3DC4);
		/* 82132128h case   16:*/		return 0x8213212C;
		  /* 8213212Ch */ case   17:  		/* addi R30, R28, -36 */
		/* 8213212Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0xFFFFFFDC);
		/* 8213212Ch case   17:*/		return 0x82132130;
		  /* 82132130h */ case   18:  		/* li R10, 3 */
		/* 82132130h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82132130h case   18:*/		return 0x82132134;
		  /* 82132134h */ case   19:  		/* lwz R5, <#[R30]> */
		/* 82132134h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 82132134h case   19:*/		return 0x82132138;
		  /* 82132138h */ case   20:  		/* addi R9, R1, 144 */
		/* 82132138h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 82132138h case   20:*/		return 0x8213213C;
		  /* 8213213Ch */ case   21:  		/* lwz R4, <#[R27 + 260]> */
		/* 8213213Ch case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000104) );
		/* 8213213Ch case   21:*/		return 0x82132140;
		  /* 82132140h */ case   22:  		/* addi R8, R1, 224 */
		/* 82132140h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 82132140h case   22:*/		return 0x82132144;
		  /* 82132144h */ case   23:  		/* stw R31, <#[R1 + 84]> */
		/* 82132144h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82132144h case   23:*/		return 0x82132148;
		  /* 82132148h */ case   24:  		/* addi R7, R1, 96 */
		/* 82132148h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82132148h case   24:*/		return 0x8213214C;
		  /* 8213214Ch */ case   25:  		/* addi R6, R1, 160 */
		/* 8213214Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 8213214Ch case   25:*/		return 0x82132150;
		  /* 82132150h */ case   26:  		/* mr R3, R27 */
		/* 82132150h case   26:*/		regs.R3 = regs.R27;
		/* 82132150h case   26:*/		return 0x82132154;
		  /* 82132154h */ case   27:  		/* bl -320724 */
		/* 82132154h case   27:*/		regs.LR = 0x82132158; return 0x820E3C80;
		/* 82132154h case   27:*/		return 0x82132158;
		  /* 82132158h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 82132158h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82132158h case   28:*/		return 0x8213215C;
		  /* 8213215Ch */ case   29:  		/* bc 12, CR0_EQ, 20 */
		/* 8213215Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x82132170;  }
		/* 8213215Ch case   29:*/		return 0x82132160;
		  /* 82132160h */ case   30:  		/* addi R29, R29, 1 */
		/* 82132160h case   30:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82132160h case   30:*/		return 0x82132164;
		  /* 82132164h */ case   31:  		/* addi R30, R30, 4 */
		/* 82132164h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82132164h case   31:*/		return 0x82132168;
		  /* 82132168h */ case   32:  		/* cmplwi CR6, R29, 9 */
		/* 82132168h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000009);
		/* 82132168h case   32:*/		return 0x8213216C;
		  /* 8213216Ch */ case   33:  		/* bc 12, CR6_LT, -60 */
		/* 8213216Ch case   33:*/		if ( regs.CR[6].lt ) { return 0x82132130;  }
		/* 8213216Ch case   33:*/		return 0x82132170;
	}
	return 0x82132170;
} // Block from 821320E8h-82132170h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82132170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132170);
		  /* 82132170h */ case    0:  		/* mr R25, R31 */
		/* 82132170h case    0:*/		regs.R25 = regs.R31;
		/* 82132170h case    0:*/		return 0x82132174;
		  /* 82132174h */ case    1:  		/* mr R26, R31 */
		/* 82132174h case    1:*/		regs.R26 = regs.R31;
		/* 82132174h case    1:*/		return 0x82132178;
		  /* 82132178h */ case    2:  		/* cmplwi CR6, R29, 4 */
		/* 82132178h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82132178h case    2:*/		return 0x8213217C;
		  /* 8213217Ch */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 8213217Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x82132184;  }
		/* 8213217Ch case    3:*/		return 0x82132180;
		  /* 82132180h */ case    4:  		/* li R26, 1 */
		/* 82132180h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82132180h case    4:*/		return 0x82132184;
	}
	return 0x82132184;
} // Block from 82132170h-82132184h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82132184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132184);
		  /* 82132184h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82132184h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82132184h case    0:*/		return 0x82132188;
		  /* 82132188h */ case    1:  		/* bc 12, CR6_EQ, 104 */
		/* 82132188h case    1:*/		if ( regs.CR[6].eq ) { return 0x821321F0;  }
		/* 82132188h case    1:*/		return 0x8213218C;
		  /* 8213218Ch */ case    2:  		/* mr R30, R28 */
		/* 8213218Ch case    2:*/		regs.R30 = regs.R28;
		/* 8213218Ch case    2:*/		return 0x82132190;
		  /* 82132190h */ case    3:  		/* mr R29, R31 */
		/* 82132190h case    3:*/		regs.R29 = regs.R31;
		/* 82132190h case    3:*/		return 0x82132194;
		  /* 82132194h */ case    4:  		/* li R10, 3 */
		/* 82132194h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82132194h case    4:*/		return 0x82132198;
		  /* 82132198h */ case    5:  		/* lwz R5, <#[R30]> */
		/* 82132198h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 82132198h case    5:*/		return 0x8213219C;
		  /* 8213219Ch */ case    6:  		/* addi R9, R1, 144 */
		/* 8213219Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 8213219Ch case    6:*/		return 0x821321A0;
		  /* 821321A0h */ case    7:  		/* lwz R4, <#[R27 + 260]> */
		/* 821321A0h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000104) );
		/* 821321A0h case    7:*/		return 0x821321A4;
		  /* 821321A4h */ case    8:  		/* addi R8, R1, 224 */
		/* 821321A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 821321A4h case    8:*/		return 0x821321A8;
		  /* 821321A8h */ case    9:  		/* stw R31, <#[R1 + 84]> */
		/* 821321A8h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821321A8h case    9:*/		return 0x821321AC;
		  /* 821321ACh */ case   10:  		/* addi R7, R1, 96 */
		/* 821321ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821321ACh case   10:*/		return 0x821321B0;
		  /* 821321B0h */ case   11:  		/* addi R6, R1, 160 */
		/* 821321B0h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 821321B0h case   11:*/		return 0x821321B4;
		  /* 821321B4h */ case   12:  		/* mr R3, R27 */
		/* 821321B4h case   12:*/		regs.R3 = regs.R27;
		/* 821321B4h case   12:*/		return 0x821321B8;
		  /* 821321B8h */ case   13:  		/* bl -320824 */
		/* 821321B8h case   13:*/		regs.LR = 0x821321BC; return 0x820E3C80;
		/* 821321B8h case   13:*/		return 0x821321BC;
		  /* 821321BCh */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 821321BCh case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821321BCh case   14:*/		return 0x821321C0;
		  /* 821321C0h */ case   15:  		/* bc 12, CR0_EQ, 20 */
		/* 821321C0h case   15:*/		if ( regs.CR[0].eq ) { return 0x821321D4;  }
		/* 821321C0h case   15:*/		return 0x821321C4;
		  /* 821321C4h */ case   16:  		/* addi R29, R29, 1 */
		/* 821321C4h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821321C4h case   16:*/		return 0x821321C8;
		  /* 821321C8h */ case   17:  		/* addi R30, R30, 4 */
		/* 821321C8h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821321C8h case   17:*/		return 0x821321CC;
		  /* 821321CCh */ case   18:  		/* cmplwi CR6, R29, 3 */
		/* 821321CCh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 821321CCh case   18:*/		return 0x821321D0;
		  /* 821321D0h */ case   19:  		/* bc 12, CR6_LT, -60 */
		/* 821321D0h case   19:*/		if ( regs.CR[6].lt ) { return 0x82132194;  }
		/* 821321D0h case   19:*/		return 0x821321D4;
	}
	return 0x821321D4;
} // Block from 82132184h-821321D4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821321D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821321D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821321D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821321D4);
		  /* 821321D4h */ case    0:  		/* mr R26, R31 */
		/* 821321D4h case    0:*/		regs.R26 = regs.R31;
		/* 821321D4h case    0:*/		return 0x821321D8;
		  /* 821321D8h */ case    1:  		/* cmplwi CR6, R29, 1 */
		/* 821321D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 821321D8h case    1:*/		return 0x821321DC;
		  /* 821321DCh */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 821321DCh case    2:*/		if ( !regs.CR[6].gt ) { return 0x821321E4;  }
		/* 821321DCh case    2:*/		return 0x821321E0;
		  /* 821321E0h */ case    3:  		/* li R26, 1 */
		/* 821321E0h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821321E0h case    3:*/		return 0x821321E4;
	}
	return 0x821321E4;
} // Block from 821321D4h-821321E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821321E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821321E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821321E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821321E4);
		  /* 821321E4h */ case    0:  		/* li R25, 1 */
		/* 821321E4h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821321E4h case    0:*/		return 0x821321E8;
		  /* 821321E8h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 821321E8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821321E8h case    1:*/		return 0x821321EC;
		  /* 821321ECh */ case    2:  		/* bc 4, CR6_EQ, -268 */
		/* 821321ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 821321ECh case    2:*/		return 0x821321F0;
	}
	return 0x821321F0;
} // Block from 821321E4h-821321F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821321F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821321F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821321F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821321F0);
		  /* 821321F0h */ case    0:  		/* addi R11, R1, 120 */
		/* 821321F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 821321F0h case    0:*/		return 0x821321F4;
		  /* 821321F4h */ case    1:  		/* lwz R3, <#[R27 + 20]> */
		/* 821321F4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000014) );
		/* 821321F4h case    1:*/		return 0x821321F8;
		  /* 821321F8h */ case    2:  		/* mr R30, R31 */
		/* 821321F8h case    2:*/		regs.R30 = regs.R31;
		/* 821321F8h case    2:*/		return 0x821321FC;
		  /* 821321FCh */ case    3:  		/* subfic R29, R11, 12 */
		/* 821321FCh case    3:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R11,0xC);
		/* 821321FCh case    3:*/		return 0x82132200;
		  /* 82132200h */ case    4:  		/* lis R11, -32255 */
		/* 82132200h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82132200h case    4:*/		return 0x82132204;
		  /* 82132204h */ case    5:  		/* mr R5, R31 */
		/* 82132204h case    5:*/		regs.R5 = regs.R31;
		/* 82132204h case    5:*/		return 0x82132208;
		  /* 82132208h */ case    6:  		/* lfd FR0, <#[R11 - 24488]> */
		/* 82132208h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFA058) );
		/* 82132208h case    6:*/		return 0x8213220C;
		  /* 8213220Ch */ case    7:  		/* addi R11, R1, 288 */
		/* 8213220Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x120);
		/* 8213220Ch case    7:*/		return 0x82132210;
		  /* 82132210h */ case    8:  		/* add R4, R5, R11 */
		/* 82132210h case    8:*/		cpu::op::add<0>(regs,&regs.R4,regs.R5,regs.R11);
		/* 82132210h case    8:*/		return 0x82132214;
		  /* 82132214h */ case    9:  		/* lwz R8, <#[R4 - 48]> */
		/* 82132214h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0xFFFFFFD0) );
		/* 82132214h case    9:*/		return 0x82132218;
		  /* 82132218h */ case   10:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 82132218h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 82132218h case   10:*/		return 0x8213221C;
		  /* 8213221Ch */ case   11:  		/* lwzx R11, <#[R11 + R3]> */
		/* 8213221Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8213221Ch case   11:*/		return 0x82132220;
		  /* 82132220h */ case   12:  		/* lwz R10, <#[R11 + 16]> */
		/* 82132220h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82132220h case   12:*/		return 0x82132224;
		  /* 82132224h */ case   13:  		/* cmplw CR6, R10, R30 */
		/* 82132224h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82132224h case   13:*/		return 0x82132228;
		  /* 82132228h */ case   14:  		/* bc 4, CR6_EQ, -328 */
		/* 82132228h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132228h case   14:*/		return 0x8213222C;
		  /* 8213222Ch */ case   15:  		/* cmpwi CR6, R24, 0 */
		/* 8213222Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8213222Ch case   15:*/		return 0x82132230;
		  /* 82132230h */ case   16:  		/* bc 12, CR6_EQ, 184 */
		/* 82132230h case   16:*/		if ( regs.CR[6].eq ) { return 0x821322E8;  }
		/* 82132230h case   16:*/		return 0x82132234;
		  /* 82132234h */ case   17:  		/* lwz R10, <#[R11 + 72]> */
		/* 82132234h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 82132234h case   17:*/		return 0x82132238;
		  /* 82132238h */ case   18:  		/* cmpwi CR6, R10, -1 */
		/* 82132238h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82132238h case   18:*/		return 0x8213223C;
		  /* 8213223Ch */ case   19:  		/* bc 4, CR6_EQ, -348 */
		/* 8213223Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 8213223Ch case   19:*/		return 0x82132240;
		  /* 82132240h */ case   20:  		/* lwz R10, <#[R11 + 4]> */
		/* 82132240h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82132240h case   20:*/		return 0x82132244;
		  /* 82132244h */ case   21:  		/* lwz R9, <#[R27 + 128]> */
		/* 82132244h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000080) );
		/* 82132244h case   21:*/		return 0x82132248;
		  /* 82132248h */ case   22:  		/* cmplw CR6, R10, R9 */
		/* 82132248h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82132248h case   22:*/		return 0x8213224C;
		  /* 8213224Ch */ case   23:  		/* bc 4, CR6_EQ, -364 */
		/* 8213224Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 8213224Ch case   23:*/		return 0x82132250;
		  /* 82132250h */ case   24:  		/* lbz R10, <#[R11 + 110]> */
		/* 82132250h case   24:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006E) );
		/* 82132250h case   24:*/		return 0x82132254;
		  /* 82132254h */ case   25:  		/* addi R9, R30, 1 */
		/* 82132254h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x1);
		/* 82132254h case   25:*/		return 0x82132258;
		  /* 82132258h */ case   26:  		/* cmplw CR6, R10, R9 */
		/* 82132258h case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82132258h case   26:*/		return 0x8213225C;
		  /* 8213225Ch */ case   27:  		/* bc 4, CR6_EQ, -380 */
		/* 8213225Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 8213225Ch case   27:*/		return 0x82132260;
		  /* 82132260h */ case   28:  		/* lbz R10, <#[R11 + 111]> */
		/* 82132260h case   28:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006F) );
		/* 82132260h case   28:*/		return 0x82132264;
		  /* 82132264h */ case   29:  		/* cmplwi CR6, R10, 5 */
		/* 82132264h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82132264h case   29:*/		return 0x82132268;
		  /* 82132268h */ case   30:  		/* bc 4, CR6_EQ, -392 */
		/* 82132268h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132268h case   30:*/		return 0x8213226C;
		  /* 8213226Ch */ case   31:  		/* addi R10, R1, 120 */
		/* 8213226Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x78);
		/* 8213226Ch case   31:*/		return 0x82132270;
		  /* 82132270h */ case   32:  		/* cmpwi CR6, R26, 0 */
		/* 82132270h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82132270h case   32:*/		return 0x82132274;
		  /* 82132274h */ case   33:  		/* stwx R8, <#[R5 + R10]> */
		/* 82132274h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82132274h case   33:*/		return 0x82132278;
		  /* 82132278h */ case   34:  		/* bc 4, CR6_EQ, 28 */
		/* 82132278h case   34:*/		if ( !regs.CR[6].eq ) { return 0x82132294;  }
		/* 82132278h case   34:*/		return 0x8213227C;
		  /* 8213227Ch */ case   35:  		/* lwz R10, <#[R11 + 60]> */
		/* 8213227Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213227Ch case   35:*/		return 0x82132280;
		  /* 82132280h */ case   36:  		/* lis R9, 8 */
		/* 82132280h case   36:*/		cpu::op::lis<0>(regs,&regs.R9,0x8);
		/* 82132280h case   36:*/		return 0x82132284;
		  /* 82132284h */ case   37:  		/* cmplw CR6, R10, R9 */
		/* 82132284h case   37:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82132284h case   37:*/		return 0x82132288;
		  /* 82132288h */ case   38:  		/* bc 4, CR6_EQ, -424 */
		/* 82132288h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132288h case   38:*/		return 0x8213228C;
		  /* 8213228Ch */ case   39:  		/* lwz R7, <#[R11 + 56]> */
		/* 8213228Ch case   39:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000038) );
		/* 8213228Ch case   39:*/		return 0x82132290;
		  /* 82132290h */ case   40:  		/* b 304 */
		/* 82132290h case   40:*/		return 0x821323C0;
		/* 82132290h case   40:*/		return 0x82132294;
	}
	return 0x82132294;
} // Block from 821321F0h-82132294h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82132294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132294);
		  /* 82132294h */ case    0:  		/* lwz R11, <#[R11 + 60]> */
		/* 82132294h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 82132294h case    0:*/		return 0x82132298;
		  /* 82132298h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82132298h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82132298h case    1:*/		return 0x8213229C;
		  /* 8213229Ch */ case    2:  		/* bc 4, CR6_EQ, -444 */
		/* 8213229Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 8213229Ch case    2:*/		return 0x821322A0;
		  /* 821322A0h */ case    3:  		/* addi R11, R1, 272 */
		/* 821322A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x110);
		/* 821322A0h case    3:*/		return 0x821322A4;
		  /* 821322A4h */ case    4:  		/* add R11, R5, R11 */
		/* 821322A4h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 821322A4h case    4:*/		return 0x821322A8;
		  /* 821322A8h */ case    5:  		/* lwz R6, <#[R11]> */
		/* 821322A8h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821322A8h case    5:*/		return 0x821322AC;
		  /* 821322ACh */ case    6:  		/* cmplw CR6, R6, R8 */
		/* 821322ACh case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R8);
		/* 821322ACh case    6:*/		return 0x821322B0;
		  /* 821322B0h */ case    7:  		/* bc 4, CR6_EQ, 44 */
		/* 821322B0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821322DC;  }
		/* 821322B0h case    7:*/		return 0x821322B4;
		  /* 821322B4h */ case    8:  		/* lwz R7, <#[R4]> */
		/* 821322B4h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000000) );
		/* 821322B4h case    8:*/		return 0x821322B8;
		  /* 821322B8h */ case    9:  		/* lwz R10, <#[R11 - 16]> */
		/* 821322B8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 821322B8h case    9:*/		return 0x821322BC;
		  /* 821322BCh */ case   10:  		/* cmplw CR6, R7, R10 */
		/* 821322BCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 821322BCh case   10:*/		return 0x821322C0;
		  /* 821322C0h */ case   11:  		/* bc 4, CR6_EQ, 28 */
		/* 821322C0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821322DC;  }
		/* 821322C0h case   11:*/		return 0x821322C4;
		  /* 821322C4h */ case   12:  		/* lwz R9, <#[R11 + 32]> */
		/* 821322C4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 821322C4h case   12:*/		return 0x821322C8;
		  /* 821322C8h */ case   13:  		/* lwz R28, <#[R11 + 48]> */
		/* 821322C8h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000030) );
		/* 821322C8h case   13:*/		return 0x821322CC;
		  /* 821322CCh */ case   14:  		/* cmplw CR6, R9, R28 */
		/* 821322CCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 821322CCh case   14:*/		return 0x821322D0;
		  /* 821322D0h */ case   15:  		/* bc 4, CR6_EQ, 12 */
		/* 821322D0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821322DC;  }
		/* 821322D0h case   15:*/		return 0x821322D4;
		  /* 821322D4h */ case   16:  		/* cmplw CR6, R7, R9 */
		/* 821322D4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 821322D4h case   16:*/		return 0x821322D8;
		  /* 821322D8h */ case   17:  		/* bc 12, CR6_EQ, 340 */
		/* 821322D8h case   17:*/		if ( regs.CR[6].eq ) { return 0x8213242C;  }
		/* 821322D8h case   17:*/		return 0x821322DC;
	}
	return 0x821322DC;
} // Block from 82132294h-821322DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821322DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821322DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821322DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821322DC);
		  /* 821322DCh */ case    0:  		/* lwz R10, <#[R4]> */
		/* 821322DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 821322DCh case    0:*/		return 0x821322E0;
		  /* 821322E0h */ case    1:  		/* cmplw CR6, R10, R8 */
		/* 821322E0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821322E0h case    1:*/		return 0x821322E4;
		  /* 821322E4h */ case    2:  		/* b 288 */
		/* 821322E4h case    2:*/		return 0x82132404;
		/* 821322E4h case    2:*/		return 0x821322E8;
	}
	return 0x821322E8;
} // Block from 821322DCh-821322E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821322E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821322E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821322E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821322E8);
		  /* 821322E8h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 821322E8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821322E8h case    0:*/		return 0x821322EC;
		  /* 821322ECh */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821322ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82132318;  }
		/* 821322ECh case    1:*/		return 0x821322F0;
		  /* 821322F0h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 821322F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821322F0h case    2:*/		return 0x821322F4;
		  /* 821322F4h */ case    3:  		/* lwz R10, <#[R27 + 16]> */
		/* 821322F4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 821322F4h case    3:*/		return 0x821322F8;
		  /* 821322F8h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821322F8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821322F8h case    4:*/		return 0x821322FC;
		  /* 821322FCh */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821322FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821322FCh case    5:*/		return 0x82132300;
		  /* 82132300h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 82132300h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82132300h case    6:*/		return 0x82132304;
		  /* 82132304h */ case    7:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 82132304h case    7:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 82132304h case    7:*/		return 0x82132308;
		  /* 82132308h */ case    8:  		/* bc 12, CR0_EQ, -552 */
		/* 82132308h case    8:*/		if ( regs.CR[0].eq ) { return 0x821320E0;  }
		/* 82132308h case    8:*/		return 0x8213230C;
		  /* 8213230Ch */ case    9:  		/* addi R11, R1, 120 */
		/* 8213230Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 8213230Ch case    9:*/		return 0x82132310;
		  /* 82132310h */ case   10:  		/* add R11, R5, R11 */
		/* 82132310h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 82132310h case   10:*/		return 0x82132314;
		  /* 82132314h */ case   11:  		/* b 164 */
		/* 82132314h case   11:*/		return 0x821323B8;
		/* 82132314h case   11:*/		return 0x82132318;
	}
	return 0x82132318;
} // Block from 821322E8h-82132318h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82132318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132318);
		  /* 82132318h */ case    0:  		/* lwz R11, <#[R11 + 72]> */
		/* 82132318h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 82132318h case    0:*/		return 0x8213231C;
		  /* 8213231Ch */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8213231Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213231Ch case    1:*/		return 0x82132320;
		  /* 82132320h */ case    2:  		/* bc 12, CR6_EQ, -576 */
		/* 82132320h case    2:*/		if ( regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132320h case    2:*/		return 0x82132324;
		  /* 82132324h */ case    3:  		/* lwz R10, <#[R27 + 24]> */
		/* 82132324h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 82132324h case    3:*/		return 0x82132328;
		  /* 82132328h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132328h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132328h case    4:*/		return 0x8213232C;
		  /* 8213232Ch */ case    5:  		/* lis R9, 8272 */
		/* 8213232Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0x2050);
		/* 8213232Ch case    5:*/		return 0x82132330;
		  /* 82132330h */ case    6:  		/* ori R9, R9, 3 */
		/* 82132330h case    6:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3);
		/* 82132330h case    6:*/		return 0x82132334;
		  /* 82132334h */ case    7:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82132334h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82132334h case    7:*/		return 0x82132338;
		  /* 82132338h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 82132338h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82132338h case    8:*/		return 0x8213233C;
		  /* 8213233Ch */ case    9:  		/* cmplw CR6, R10, R9 */
		/* 8213233Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213233Ch case    9:*/		return 0x82132340;
		  /* 82132340h */ case   10:  		/* bc 4, CR6_EQ, -608 */
		/* 82132340h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132340h case   10:*/		return 0x82132344;
		  /* 82132344h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 82132344h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82132344h case   11:*/		return 0x82132348;
		  /* 82132348h */ case   12:  		/* lwz R9, <#[R27 + 16]> */
		/* 82132348h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 82132348h case   12:*/		return 0x8213234C;
		  /* 8213234Ch */ case   13:  		/* lwzx R8, <#[R5 + R10]> */
		/* 8213234Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 8213234Ch case   13:*/		return 0x82132350;
		  /* 82132350h */ case   14:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 82132350h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 82132350h case   14:*/		return 0x82132354;
		  /* 82132354h */ case   15:  		/* lwzx R11, <#[R11 + R3]> */
		/* 82132354h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82132354h case   15:*/		return 0x82132358;
		  /* 82132358h */ case   16:  		/* lwz R7, <#[R11 + 4]> */
		/* 82132358h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82132358h case   16:*/		return 0x8213235C;
		  /* 8213235Ch */ case   17:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8213235Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8213235Ch case   17:*/		return 0x82132360;
		  /* 82132360h */ case   18:  		/* lwzx R7, <#[R7 + R9]> */
		/* 82132360h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82132360h case   18:*/		return 0x82132364;
		  /* 82132364h */ case   19:  		/* lwz R7, <#[R7 + 4]> */
		/* 82132364h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 82132364h case   19:*/		return 0x82132368;
		  /* 82132368h */ case   20:  		/* rlwinm. R7, R7, 0, 22, 22 */
		/* 82132368h case   20:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R7,regs.R7);
		/* 82132368h case   20:*/		return 0x8213236C;
		  /* 8213236Ch */ case   21:  		/* bc 12, CR0_EQ, -652 */
		/* 8213236Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821320E0;  }
		/* 8213236Ch case   21:*/		return 0x82132370;
		  /* 82132370h */ case   22:  		/* lwz R11, <#[R11 + 16]> */
		/* 82132370h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82132370h case   22:*/		return 0x82132374;
		  /* 82132374h */ case   23:  		/* cmplw CR6, R11, R30 */
		/* 82132374h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82132374h case   23:*/		return 0x82132378;
		  /* 82132378h */ case   24:  		/* bc 4, CR6_EQ, -664 */
		/* 82132378h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132378h case   24:*/		return 0x8213237C;
		  /* 8213237Ch */ case   25:  		/* addi R11, R1, 120 */
		/* 8213237Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 8213237Ch case   25:*/		return 0x82132380;
		  /* 82132380h */ case   26:  		/* add R11, R5, R11 */
		/* 82132380h case   26:*/		cpu::op::add<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 82132380h case   26:*/		return 0x82132384;
		  /* 82132384h */ case   27:  		/* add R7, R29, R11 */
		/* 82132384h case   27:*/		cpu::op::add<0>(regs,&regs.R7,regs.R29,regs.R11);
		/* 82132384h case   27:*/		return 0x82132388;
		  /* 82132388h */ case   28:  		/* lwzx R10, <#[R7 + R10]> */
		/* 82132388h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82132388h case   28:*/		return 0x8213238C;
		  /* 8213238Ch */ case   29:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213238Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213238Ch case   29:*/		return 0x82132390;
		  /* 82132390h */ case   30:  		/* lwzx R10, <#[R10 + R3]> */
		/* 82132390h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82132390h case   30:*/		return 0x82132394;
		  /* 82132394h */ case   31:  		/* lwz R7, <#[R10 + 4]> */
		/* 82132394h case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 82132394h case   31:*/		return 0x82132398;
		  /* 82132398h */ case   32:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82132398h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82132398h case   32:*/		return 0x8213239C;
		  /* 8213239Ch */ case   33:  		/* lwzx R9, <#[R7 + R9]> */
		/* 8213239Ch case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8213239Ch case   33:*/		return 0x821323A0;
		  /* 821323A0h */ case   34:  		/* lwz R9, <#[R9 + 4]> */
		/* 821323A0h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821323A0h case   34:*/		return 0x821323A4;
		  /* 821323A4h */ case   35:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 821323A4h case   35:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 821323A4h case   35:*/		return 0x821323A8;
		  /* 821323A8h */ case   36:  		/* bc 12, CR0_EQ, -712 */
		/* 821323A8h case   36:*/		if ( regs.CR[0].eq ) { return 0x821320E0;  }
		/* 821323A8h case   36:*/		return 0x821323AC;
		  /* 821323ACh */ case   37:  		/* lfd FR13, <#[R10 + 32]> */
		/* 821323ACh case   37:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000020) );
		/* 821323ACh case   37:*/		return 0x821323B0;
		  /* 821323B0h */ case   38:  		/* fcmpu CR6, FR13, FR0 */
		/* 821323B0h case   38:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821323B0h case   38:*/		return 0x821323B4;
		  /* 821323B4h */ case   39:  		/* bc 4, CR6_EQ, -724 */
		/* 821323B4h case   39:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 821323B4h case   39:*/		return 0x821323B8;
	}
	return 0x821323B8;
} // Block from 82132318h-821323B8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821323B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821323B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821323B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821323B8);
		  /* 821323B8h */ case    0:  		/* stw R8, <#[R11]> */
		/* 821323B8h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821323B8h case    0:*/		return 0x821323BC;
		  /* 821323BCh */ case    1:  		/* rlwinm R7, R8, 0, 0, 31 */
		/* 821323BCh case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R8);
		/* 821323BCh case    1:*/		return 0x821323C0;
	}
	return 0x821323C0;
} // Block from 821323B8h-821323C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821323C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821323C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821323C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821323C0);
		  /* 821323C0h */ case    0:  		/* addi R10, R1, 272 */
		/* 821323C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x110);
		/* 821323C0h case    0:*/		return 0x821323C4;
		  /* 821323C4h */ case    1:  		/* add R11, R5, R10 */
		/* 821323C4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R5,regs.R10);
		/* 821323C4h case    1:*/		return 0x821323C8;
		  /* 821323C8h */ case    2:  		/* lwzx R6, <#[R5 + R10]> */
		/* 821323C8h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 821323C8h case    2:*/		return 0x821323CC;
		  /* 821323CCh */ case    3:  		/* cmplw CR6, R6, R7 */
		/* 821323CCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 821323CCh case    3:*/		return 0x821323D0;
		  /* 821323D0h */ case    4:  		/* bc 4, CR6_EQ, 44 */
		/* 821323D0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821323FC;  }
		/* 821323D0h case    4:*/		return 0x821323D4;
		  /* 821323D4h */ case    5:  		/* lwz R10, <#[R11 - 16]> */
		/* 821323D4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 821323D4h case    5:*/		return 0x821323D8;
		  /* 821323D8h */ case    6:  		/* lwz R8, <#[R4]> */
		/* 821323D8h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 821323D8h case    6:*/		return 0x821323DC;
		  /* 821323DCh */ case    7:  		/* cmplw CR6, R8, R10 */
		/* 821323DCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 821323DCh case    7:*/		return 0x821323E0;
		  /* 821323E0h */ case    8:  		/* bc 4, CR6_EQ, 28 */
		/* 821323E0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821323FC;  }
		/* 821323E0h case    8:*/		return 0x821323E4;
		  /* 821323E4h */ case    9:  		/* lwz R28, <#[R11 + 48]> */
		/* 821323E4h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000030) );
		/* 821323E4h case    9:*/		return 0x821323E8;
		  /* 821323E8h */ case   10:  		/* lwz R9, <#[R11 + 32]> */
		/* 821323E8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 821323E8h case   10:*/		return 0x821323EC;
		  /* 821323ECh */ case   11:  		/* cmplw CR6, R9, R28 */
		/* 821323ECh case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 821323ECh case   11:*/		return 0x821323F0;
		  /* 821323F0h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 821323F0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821323FC;  }
		/* 821323F0h case   12:*/		return 0x821323F4;
		  /* 821323F4h */ case   13:  		/* cmplw CR6, R8, R9 */
		/* 821323F4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821323F4h case   13:*/		return 0x821323F8;
		  /* 821323F8h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 821323F8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213242C;  }
		/* 821323F8h case   14:*/		return 0x821323FC;
	}
	return 0x821323FC;
} // Block from 821323C0h-821323FCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821323FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821323FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821323FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821323FC);
		  /* 821323FCh */ case    0:  		/* lwz R10, <#[R4]> */
		/* 821323FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 821323FCh case    0:*/		return 0x82132400;
		  /* 82132400h */ case    1:  		/* cmplw CR6, R10, R7 */
		/* 82132400h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82132400h case    1:*/		return 0x82132404;
	}
	return 0x82132404;
} // Block from 821323FCh-82132404h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132404);
		  /* 82132404h */ case    0:  		/* bc 4, CR6_EQ, -804 */
		/* 82132404h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132404h case    0:*/		return 0x82132408;
		  /* 82132408h */ case    1:  		/* lwz R10, <#[R11 - 16]> */
		/* 82132408h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 82132408h case    1:*/		return 0x8213240C;
		  /* 8213240Ch */ case    2:  		/* cmplw CR6, R6, R10 */
		/* 8213240Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 8213240Ch case    2:*/		return 0x82132410;
		  /* 82132410h */ case    3:  		/* bc 4, CR6_EQ, -816 */
		/* 82132410h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132410h case    3:*/		return 0x82132414;
		  /* 82132414h */ case    4:  		/* lwz R8, <#[R11 + 48]> */
		/* 82132414h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000030) );
		/* 82132414h case    4:*/		return 0x82132418;
		  /* 82132418h */ case    5:  		/* lwz R9, <#[R11 + 32]> */
		/* 82132418h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 82132418h case    5:*/		return 0x8213241C;
		  /* 8213241Ch */ case    6:  		/* cmplw CR6, R9, R8 */
		/* 8213241Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 8213241Ch case    6:*/		return 0x82132420;
		  /* 82132420h */ case    7:  		/* bc 4, CR6_EQ, -832 */
		/* 82132420h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132420h case    7:*/		return 0x82132424;
		  /* 82132424h */ case    8:  		/* cmplw CR6, R6, R9 */
		/* 82132424h case    8:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 82132424h case    8:*/		return 0x82132428;
		  /* 82132428h */ case    9:  		/* bc 4, CR6_EQ, -840 */
		/* 82132428h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132428h case    9:*/		return 0x8213242C;
	}
	return 0x8213242C;
} // Block from 82132404h-8213242Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213242Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213242C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213242C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213242C);
		  /* 8213242Ch */ case    0:  		/* addi R8, R1, 104 */
		/* 8213242Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 8213242Ch case    0:*/		return 0x82132430;
		  /* 82132430h */ case    1:  		/* cmpwi CR6, R25, 0 */
		/* 82132430h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82132430h case    1:*/		return 0x82132434;
		  /* 82132434h */ case    2:  		/* stwx R10, <#[R5 + R8]> */
		/* 82132434h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + regs.R8 + 0x00000000) );
		/* 82132434h case    2:*/		return 0x82132438;
		  /* 82132438h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82132438h case    3:*/		if ( regs.CR[6].eq ) { return 0x82132448;  }
		/* 82132438h case    3:*/		return 0x8213243C;
		  /* 8213243Ch */ case    4:  		/* lwz R11, <#[R11 + 64]> */
		/* 8213243Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000040) );
		/* 8213243Ch case    4:*/		return 0x82132440;
		  /* 82132440h */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 82132440h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82132440h case    5:*/		return 0x82132444;
		  /* 82132444h */ case    6:  		/* bc 4, CR6_EQ, -868 */
		/* 82132444h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132444h case    6:*/		return 0x82132448;
	}
	return 0x82132448;
} // Block from 8213242Ch-82132448h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82132448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132448);
		  /* 82132448h */ case    0:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82132448h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82132448h case    0:*/		return 0x8213244C;
		  /* 8213244Ch */ case    1:  		/* lwzx R11, <#[R11 + R3]> */
		/* 8213244Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8213244Ch case    1:*/		return 0x82132450;
		  /* 82132450h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 82132450h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82132450h case    2:*/		return 0x82132454;
		  /* 82132454h */ case    3:  		/* cmplw CR6, R11, R30 */
		/* 82132454h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82132454h case    3:*/		return 0x82132458;
		  /* 82132458h */ case    4:  		/* bc 4, CR6_EQ, -888 */
		/* 82132458h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821320E0;  }
		/* 82132458h case    4:*/		return 0x8213245C;
		  /* 8213245Ch */ case    5:  		/* addi R5, R5, 4 */
		/* 8213245Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 8213245Ch case    5:*/		return 0x82132460;
		  /* 82132460h */ case    6:  		/* addi R30, R30, 1 */
		/* 82132460h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82132460h case    6:*/		return 0x82132464;
		  /* 82132464h */ case    7:  		/* cmplwi CR6, R5, 12 */
		/* 82132464h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x0000000C);
		/* 82132464h case    7:*/		return 0x82132468;
		  /* 82132468h */ case    8:  		/* bc 12, CR6_LT, -604 */
		/* 82132468h case    8:*/		if ( regs.CR[6].lt ) { return 0x8213220C;  }
		/* 82132468h case    8:*/		return 0x8213246C;
		  /* 8213246Ch */ case    9:  		/* lwz R10, <#[R1 + 96]> */
		/* 8213246Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8213246Ch case    9:*/		return 0x82132470;
		  /* 82132470h */ case   10:  		/* mr R11, R31 */
		/* 82132470h case   10:*/		regs.R11 = regs.R31;
		/* 82132470h case   10:*/		return 0x82132474;
		  /* 82132474h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82132474h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82132474h case   11:*/		return 0x82132478;
		  /* 82132478h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 82132478h case   12:*/		if ( regs.CR[6].eq ) { return 0x82132498;  }
		/* 82132478h case   12:*/		return 0x8213247C;
		  /* 8213247Ch */ case   13:  		/* addi R10, R1, 156 */
		/* 8213247Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 8213247Ch case   13:*/		return 0x82132480;
		  /* 82132480h */ case   14:  		/* lwzu R9, <#[R10 + 4]> */
		/* 82132480h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82132480h case   14:*/		return 0x82132484;
		  /* 82132484h */ case   15:  		/* addi R11, R11, 1 */
		/* 82132484h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82132484h case   15:*/		return 0x82132488;
		  /* 82132488h */ case   16:  		/* stw R31, <#[R9]> */
		/* 82132488h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + 0x00000000) );
		/* 82132488h case   16:*/		return 0x8213248C;
		  /* 8213248Ch */ case   17:  		/* lwz R9, <#[R1 + 96]> */
		/* 8213248Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 8213248Ch case   17:*/		return 0x82132490;
		  /* 82132490h */ case   18:  		/* cmplw CR6, R11, R9 */
		/* 82132490h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82132490h case   18:*/		return 0x82132494;
		  /* 82132494h */ case   19:  		/* bc 12, CR6_LT, -20 */
		/* 82132494h case   19:*/		if ( regs.CR[6].lt ) { return 0x82132480;  }
		/* 82132494h case   19:*/		return 0x82132498;
	}
	return 0x82132498;
} // Block from 82132448h-82132498h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82132498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132498);
		  /* 82132498h */ case    0:  		/* li R3, 116 */
		/* 82132498h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82132498h case    0:*/		return 0x8213249C;
		  /* 8213249Ch */ case    1:  		/* bl -220932 */
		/* 8213249Ch case    1:*/		regs.LR = 0x821324A0; return 0x820FC598;
		/* 8213249Ch case    1:*/		return 0x821324A0;
		  /* 821324A0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821324A0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821324A0h case    2:*/		return 0x821324A4;
		  /* 821324A4h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821324A4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821324B0;  }
		/* 821324A4h case    3:*/		return 0x821324A8;
		  /* 821324A8h */ case    4:  		/* bl -222728 */
		/* 821324A8h case    4:*/		regs.LR = 0x821324AC; return 0x820FBEA0;
		/* 821324A8h case    4:*/		return 0x821324AC;
		  /* 821324ACh */ case    5:  		/* mr R31, R3 */
		/* 821324ACh case    5:*/		regs.R31 = regs.R3;
		/* 821324ACh case    5:*/		return 0x821324B0;
	}
	return 0x821324B0;
} // Block from 82132498h-821324B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821324B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821324B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821324B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821324B0);
		  /* 821324B0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821324B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821324B0h case    0:*/		return 0x821324B4;
		  /* 821324B4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821324B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821324C4;  }
		/* 821324B4h case    1:*/		return 0x821324B8;
		  /* 821324B8h */ case    2:  		/* lis R3, -32761 */
		/* 821324B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 821324B8h case    2:*/		return 0x821324BC;
		  /* 821324BCh */ case    3:  		/* ori R3, R3, 14 */
		/* 821324BCh case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 821324BCh case    3:*/		return 0x821324C0;
		  /* 821324C0h */ case    4:  		/* b 300 */
		/* 821324C0h case    4:*/		return 0x821325EC;
		/* 821324C0h case    4:*/		return 0x821324C4;
	}
	return 0x821324C4;
} // Block from 821324B0h-821324C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821324C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821324C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821324C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821324C4);
		  /* 821324C4h */ case    0:  		/* lwz R11, <#[R27 + 260]> */
		/* 821324C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000104) );
		/* 821324C4h case    0:*/		return 0x821324C8;
		  /* 821324C8h */ case    1:  		/* cmpwi CR6, R24, 0 */
		/* 821324C8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821324C8h case    1:*/		return 0x821324CC;
		  /* 821324CCh */ case    2:  		/* li R7, 0 */
		/* 821324CCh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821324CCh case    2:*/		return 0x821324D0;
		  /* 821324D0h */ case    3:  		/* mr R3, R31 */
		/* 821324D0h case    3:*/		regs.R3 = regs.R31;
		/* 821324D0h case    3:*/		return 0x821324D4;
		  /* 821324D4h */ case    4:  		/* lwz R6, <#[R11 + 12]> */
		/* 821324D4h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 821324D4h case    4:*/		return 0x821324D8;
		  /* 821324D8h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821324D8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821324E8;  }
		/* 821324D8h case    5:*/		return 0x821324DC;
		  /* 821324DCh */ case    6:  		/* lis R4, 29376 */
		/* 821324DCh case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x72C0);
		/* 821324DCh case    6:*/		return 0x821324E0;
		  /* 821324E0h */ case    7:  		/* li R5, 6 */
		/* 821324E0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821324E0h case    7:*/		return 0x821324E4;
		  /* 821324E4h */ case    8:  		/* b 12 */
		/* 821324E4h case    8:*/		return 0x821324F0;
		/* 821324E4h case    8:*/		return 0x821324E8;
	}
	return 0x821324E8;
} // Block from 821324C4h-821324E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821324E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821324E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821324E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821324E8);
		  /* 821324E8h */ case    0:  		/* lis R4, 29392 */
		/* 821324E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x72D0);
		/* 821324E8h case    0:*/		return 0x821324EC;
		  /* 821324ECh */ case    1:  		/* li R5, 9 */
		/* 821324ECh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 821324ECh case    1:*/		return 0x821324F0;
	}
	return 0x821324F0;
} // Block from 821324E8h-821324F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821324F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821324F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821324F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821324F0);
		  /* 821324F0h */ case    0:  		/* ori R4, R4, 3 */
		/* 821324F0h case    0:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3);
		/* 821324F0h case    0:*/		return 0x821324F4;
		  /* 821324F4h */ case    1:  		/* bl -220868 */
		/* 821324F4h case    1:*/		regs.LR = 0x821324F8; return 0x820FC630;
		/* 821324F4h case    1:*/		return 0x821324F8;
		  /* 821324F8h */ case    2:  		/* mr R30, R3 */
		/* 821324F8h case    2:*/		regs.R30 = regs.R3;
		/* 821324F8h case    2:*/		return 0x821324FC;
		  /* 821324FCh */ case    3:  		/* cmpwi CR6, R3, 0 */
		/* 821324FCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821324FCh case    3:*/		return 0x82132500;
		  /* 82132500h */ case    4:  		/* mr R3, R31 */
		/* 82132500h case    4:*/		regs.R3 = regs.R31;
		/* 82132500h case    4:*/		return 0x82132504;
		  /* 82132504h */ case    5:  		/* bc 4, CR6_LT, 24 */
		/* 82132504h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8213251C;  }
		/* 82132504h case    5:*/		return 0x82132508;
		  /* 82132508h */ case    6:  		/* bl 962232 */
		/* 82132508h case    6:*/		regs.LR = 0x8213250C; return 0x8221D3C0;
		/* 82132508h case    6:*/		return 0x8213250C;
		  /* 8213250Ch */ case    7:  		/* mr R3, R31 */
		/* 8213250Ch case    7:*/		regs.R3 = regs.R31;
		/* 8213250Ch case    7:*/		return 0x82132510;
	}
	return 0x82132510;
} // Block from 821324F0h-82132510h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82132510h
// Function '?DeSwizzle@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132510);
		  /* 82132510h */ case    0:  		/* bl -220960 */
		/* 82132510h case    0:*/		regs.LR = 0x82132514; return 0x820FC5F0;
		/* 82132510h case    0:*/		return 0x82132514;
		  /* 82132514h */ case    1:  		/* mr R3, R30 */
		/* 82132514h case    1:*/		regs.R3 = regs.R30;
		/* 82132514h case    1:*/		return 0x82132518;
		  /* 82132518h */ case    2:  		/* b 212 */
		/* 82132518h case    2:*/		return 0x821325EC;
		/* 82132518h case    2:*/		return 0x8213251C;
	}
	return 0x8213251C;
} // Block from 82132510h-8213251Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213251Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213251C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213251C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213251C);
		  /* 8213251Ch */ case    0:  		/* lwz R4, <#[R27 + 260]> */
		/* 8213251Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000104) );
		/* 8213251Ch case    0:*/		return 0x82132520;
		  /* 82132520h */ case    1:  		/* bl -222768 */
		/* 82132520h case    1:*/		regs.LR = 0x82132524; return 0x820FBEF0;
		/* 82132520h case    1:*/		return 0x82132524;
		  /* 82132524h */ case    2:  		/* or. R29, R3, R3 */
		/* 82132524h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82132524h case    2:*/		return 0x82132528;
		  /* 82132528h */ case    3:  		/* bc 4, CR0_LT, 24 */
		/* 82132528h case    3:*/		if ( !regs.CR[0].lt ) { return 0x82132540;  }
		/* 82132528h case    3:*/		return 0x8213252C;
		  /* 8213252Ch */ case    4:  		/* mr R3, R31 */
		/* 8213252Ch case    4:*/		regs.R3 = regs.R31;
		/* 8213252Ch case    4:*/		return 0x82132530;
		  /* 82132530h */ case    5:  		/* bl 962192 */
		/* 82132530h case    5:*/		regs.LR = 0x82132534; return 0x8221D3C0;
		/* 82132530h case    5:*/		return 0x82132534;
		  /* 82132534h */ case    6:  		/* mr R3, R31 */
		/* 82132534h case    6:*/		regs.R3 = regs.R31;
		/* 82132534h case    6:*/		return 0x82132538;
		  /* 82132538h */ case    7:  		/* bl -221000 */
		/* 82132538h case    7:*/		regs.LR = 0x8213253C; return 0x820FC5F0;
		/* 82132538h case    7:*/		return 0x8213253C;
		  /* 8213253Ch */ case    8:  		/* b 172 */
		/* 8213253Ch case    8:*/		return 0x821325E8;
		/* 8213253Ch case    8:*/		return 0x82132540;
	}
	return 0x82132540;
} // Block from 8213251Ch-82132540h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82132540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132540);
		  /* 82132540h */ case    0:  		/* lwz R11, <#[R27 + 260]> */
		/* 82132540h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000104) );
		/* 82132540h case    0:*/		return 0x82132544;
		  /* 82132544h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 82132544h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82132544h case    1:*/		return 0x82132548;
		  /* 82132548h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 82132548h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82132548h case    2:*/		return 0x8213254C;
		  /* 8213254Ch */ case    3:  		/* lwz R4, <#[R11 + 16]> */
		/* 8213254Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 8213254Ch case    3:*/		return 0x82132550;
		  /* 82132550h */ case    4:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 82132550h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 82132550h case    4:*/		return 0x82132554;
		  /* 82132554h */ case    5:  		/* bl -658340 */
		/* 82132554h case    5:*/		regs.LR = 0x82132558; return 0x820919B0;
		/* 82132554h case    5:*/		return 0x82132558;
		  /* 82132558h */ case    6:  		/* li R10, 3 */
		/* 82132558h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82132558h case    6:*/		return 0x8213255C;
		  /* 8213255Ch */ case    7:  		/* addi R8, R1, 92 */
		/* 8213255Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x5C);
		/* 8213255Ch case    7:*/		return 0x82132560;
		  /* 82132560h */ case    8:  		/* addi R9, R1, 108 */
		/* 82132560h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 82132560h case    8:*/		return 0x82132564;
		  /* 82132564h */ case    9:  		/* li R11, 12 */
		/* 82132564h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 82132564h case    9:*/		return 0x82132568;
		  /* 82132568h */ case   10:  		/* mtspr CTR, R10 */
		/* 82132568h case   10:*/		regs.CTR = regs.R10;
		/* 82132568h case   10:*/		return 0x8213256C;
		  /* 8213256Ch */ case   11:  		/* lwz R7, <#[R27 + 260]> */
		/* 8213256Ch case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000104) );
		/* 8213256Ch case   11:*/		return 0x82132570;
		  /* 82132570h */ case   12:  		/* cmpwi CR6, R24, 0 */
		/* 82132570h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82132570h case   12:*/		return 0x82132574;
		  /* 82132574h */ case   13:  		/* lwz R10, <#[R31 + 8]> */
		/* 82132574h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82132574h case   13:*/		return 0x82132578;
		  /* 82132578h */ case   14:  		/* lwzx R6, <#[R8 + R11]> */
		/* 82132578h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82132578h case   14:*/		return 0x8213257C;
		  /* 8213257Ch */ case   15:  		/* add R10, R11, R10 */
		/* 8213257Ch case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8213257Ch case   15:*/		return 0x82132580;
		  /* 82132580h */ case   16:  		/* lwz R7, <#[R7 + 8]> */
		/* 82132580h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 82132580h case   16:*/		return 0x82132584;
		  /* 82132584h */ case   17:  		/* lwz R7, <#[R7]> */
		/* 82132584h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 82132584h case   17:*/		return 0x82132588;
		  /* 82132588h */ case   18:  		/* stw R7, <#[R10 - 12]> */
		/* 82132588h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0xFFFFFFF4) );
		/* 82132588h case   18:*/		return 0x8213258C;
		  /* 8213258Ch */ case   19:  		/* lwz R10, <#[R31 + 8]> */
		/* 8213258Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8213258Ch case   19:*/		return 0x82132590;
		  /* 82132590h */ case   20:  		/* stwx R6, <#[R11 + R10]> */
		/* 82132590h case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82132590h case   20:*/		return 0x82132594;
		  /* 82132594h */ case   21:  		/* bc 4, CR6_EQ, 20 */
		/* 82132594h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821325A8;  }
		/* 82132594h case   21:*/		return 0x82132598;
		  /* 82132598h */ case   22:  		/* lwz R10, <#[R31 + 8]> */
		/* 82132598h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82132598h case   22:*/		return 0x8213259C;
		  /* 8213259Ch */ case   23:  		/* lwzx R7, <#[R9 + R11]> */
		/* 8213259Ch case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213259Ch case   23:*/		return 0x821325A0;
		  /* 821325A0h */ case   24:  		/* add R10, R11, R10 */
		/* 821325A0h case   24:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821325A0h case   24:*/		return 0x821325A4;
		  /* 821325A4h */ case   25:  		/* stw R7, <#[R10 + 12]> */
		/* 821325A4h case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 821325A4h case   25:*/		return 0x821325A8;
	}
	return 0x821325A8;
} // Block from 82132540h-821325A8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821325A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821325A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821325A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821325A8);
		  /* 821325A8h */ case    0:  		/* addi R11, R11, 4 */
		/* 821325A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821325A8h case    0:*/		return 0x821325AC;
		  /* 821325ACh */ case    1:  		/* bc 16, CR0_LT, -64 */
		/* 821325ACh case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213256C;  }
		/* 821325ACh case    1:*/		return 0x821325B0;
		  /* 821325B0h */ case    2:  		/* lwz R11, <#[R27 + 256]> */
		/* 821325B0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000100) );
		/* 821325B0h case    2:*/		return 0x821325B4;
		  /* 821325B4h */ case    3:  		/* lwz R10, <#[R27 + 24]> */
		/* 821325B4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 821325B4h case    3:*/		return 0x821325B8;
		  /* 821325B8h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821325B8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821325B8h case    4:*/		return 0x821325BC;
		  /* 821325BCh */ case    5:  		/* lwzx R30, <#[R11 + R10]> */
		/* 821325BCh case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821325BCh case    5:*/		return 0x821325C0;
		  /* 821325C0h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821325C0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821325C0h case    6:*/		return 0x821325C4;
		  /* 821325C4h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821325C4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821325D8;  }
		/* 821325C4h case    7:*/		return 0x821325C8;
		  /* 821325C8h */ case    8:  		/* mr R3, R30 */
		/* 821325C8h case    8:*/		regs.R3 = regs.R30;
		/* 821325C8h case    8:*/		return 0x821325CC;
		  /* 821325CCh */ case    9:  		/* bl 962036 */
		/* 821325CCh case    9:*/		regs.LR = 0x821325D0; return 0x8221D3C0;
		/* 821325CCh case    9:*/		return 0x821325D0;
		  /* 821325D0h */ case   10:  		/* mr R3, R30 */
		/* 821325D0h case   10:*/		regs.R3 = regs.R30;
		/* 821325D0h case   10:*/		return 0x821325D4;
		  /* 821325D4h */ case   11:  		/* bl -221156 */
		/* 821325D4h case   11:*/		regs.LR = 0x821325D8; return 0x820FC5F0;
		/* 821325D4h case   11:*/		return 0x821325D8;
	}
	return 0x821325D8;
} // Block from 821325A8h-821325D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821325D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821325D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821325D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821325D8);
		  /* 821325D8h */ case    0:  		/* lwz R11, <#[R27 + 256]> */
		/* 821325D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000100) );
		/* 821325D8h case    0:*/		return 0x821325DC;
		  /* 821325DCh */ case    1:  		/* lwz R10, <#[R27 + 24]> */
		/* 821325DCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 821325DCh case    1:*/		return 0x821325E0;
		  /* 821325E0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821325E0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821325E0h case    2:*/		return 0x821325E4;
		  /* 821325E4h */ case    3:  		/* stwx R31, <#[R11 + R10]> */
		/* 821325E4h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821325E4h case    3:*/		return 0x821325E8;
	}
	return 0x821325E8;
} // Block from 821325D8h-821325E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821325E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821325E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821325E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821325E8);
		  /* 821325E8h */ case    0:  		/* mr R3, R29 */
		/* 821325E8h case    0:*/		regs.R3 = regs.R29;
		/* 821325E8h case    0:*/		return 0x821325EC;
	}
	return 0x821325EC;
} // Block from 821325E8h-821325ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821325ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821325EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821325EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821325EC);
		  /* 821325ECh */ case    0:  		/* addi R1, R1, 464 */
		/* 821325ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1D0);
		/* 821325ECh case    0:*/		return 0x821325F0;
		  /* 821325F0h */ case    1:  		/* b -660312 */
		/* 821325F0h case    1:*/		return 0x82091298;
		/* 821325F0h case    1:*/		return 0x821325F4;
		  /* 821325F4h */ case    2:  		/* nop */
		/* 821325F4h case    2:*/		cpu::op::nop();
		/* 821325F4h case    2:*/		return 0x821325F8;
	}
	return 0x821325F8;
} // Block from 821325ECh-821325F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821325F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821325F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821325F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821325F8);
		  /* 821325F8h */ case    0:  		/* mfspr R12, LR */
		/* 821325F8h case    0:*/		regs.R12 = regs.LR;
		/* 821325F8h case    0:*/		return 0x821325FC;
		  /* 821325FCh */ case    1:  		/* bl -660384 */
		/* 821325FCh case    1:*/		regs.LR = 0x82132600; return 0x8209125C;
		/* 821325FCh case    1:*/		return 0x82132600;
		  /* 82132600h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82132600h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82132600h case    2:*/		return 0x82132604;
		  /* 82132604h */ case    3:  		/* lwz R29, <#[R3 + 12]> */
		/* 82132604h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 82132604h case    3:*/		return 0x82132608;
		  /* 82132608h */ case    4:  		/* mr R8, R3 */
		/* 82132608h case    4:*/		regs.R8 = regs.R3;
		/* 82132608h case    4:*/		return 0x8213260C;
		  /* 8213260Ch */ case    5:  		/* li R5, 0 */
		/* 8213260Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213260Ch case    5:*/		return 0x82132610;
		  /* 82132610h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82132610h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82132610h case    6:*/		return 0x82132614;
		  /* 82132614h */ case    7:  		/* bc 12, CR6_EQ, 332 */
		/* 82132614h case    7:*/		if ( regs.CR[6].eq ) { return 0x82132760;  }
		/* 82132614h case    7:*/		return 0x82132618;
		  /* 82132618h */ case    8:  		/* lwz R31, <#[R3 + 24]> */
		/* 82132618h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000018) );
		/* 82132618h case    8:*/		return 0x8213261C;
		  /* 8213261Ch */ case    9:  		/* li R6, 0 */
		/* 8213261Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213261Ch case    9:*/		return 0x82132620;
		  /* 82132620h */ case   10:  		/* lis R30, 24768 */
		/* 82132620h case   10:*/		cpu::op::lis<0>(regs,&regs.R30,0x60C0);
		/* 82132620h case   10:*/		return 0x82132624;
		  /* 82132624h */ case   11:  		/* lis R4, 4352 */
		/* 82132624h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x1100);
		/* 82132624h case   11:*/		return 0x82132628;
		  /* 82132628h */ case   12:  		/* stw R5, <#[R8 + 256]> */
		/* 82132628h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R8 + 0x00000100) );
		/* 82132628h case   12:*/		return 0x8213262C;
		  /* 8213262Ch */ case   13:  		/* lwzx R7, <#[R6 + R31]> */
		/* 8213262Ch case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + regs.R31 + 0x00000000) );
		/* 8213262Ch case   13:*/		return 0x82132630;
		  /* 82132630h */ case   14:  		/* cmplwi CR6, R7, 0 */
		/* 82132630h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82132630h case   14:*/		return 0x82132634;
		  /* 82132634h */ case   15:  		/* stw R7, <#[R8 + 260]> */
		/* 82132634h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000104) );
		/* 82132634h case   15:*/		return 0x82132638;
		  /* 82132638h */ case   16:  		/* bc 12, CR6_EQ, 276 */
		/* 82132638h case   16:*/		if ( regs.CR[6].eq ) { return 0x8213274C;  }
		/* 82132638h case   16:*/		return 0x8213263C;
		  /* 8213263Ch */ case   17:  		/* lwz R11, <#[R7]> */
		/* 8213263Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8213263Ch case   17:*/		return 0x82132640;
		  /* 82132640h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82132640h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82132640h case   18:*/		return 0x82132644;
		  /* 82132644h */ case   19:  		/* bc 12, CR6_EQ, 264 */
		/* 82132644h case   19:*/		if ( regs.CR[6].eq ) { return 0x8213274C;  }
		/* 82132644h case   19:*/		return 0x82132648;
		  /* 82132648h */ case   20:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82132648h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82132648h case   20:*/		return 0x8213264C;
		  /* 8213264Ch */ case   21:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 8213264Ch case   21:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213264Ch case   21:*/		return 0x82132650;
		  /* 82132650h */ case   22:  		/* rlwinm R9, R11, 0, 12, 31 */
		/* 82132650h case   22:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R11);
		/* 82132650h case   22:*/		return 0x82132654;
		  /* 82132654h */ case   23:  		/* cmplw CR6, R10, R30 */
		/* 82132654h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82132654h case   23:*/		return 0x82132658;
		  /* 82132658h */ case   24:  		/* bc 12, CR6_GT, 88 */
		/* 82132658h case   24:*/		if ( regs.CR[6].gt ) { return 0x821326B0;  }
		/* 82132658h case   24:*/		return 0x8213265C;
		  /* 8213265Ch */ case   25:  		/* bc 12, CR6_EQ, 448 */
		/* 8213265Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x8213281C;  }
		/* 8213265Ch case   25:*/		return 0x82132660;
		  /* 82132660h */ case   26:  		/* lis R11, 24608 */
		/* 82132660h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0x6020);
		/* 82132660h case   26:*/		return 0x82132664;
		  /* 82132664h */ case   27:  		/* cmplw CR6, R10, R11 */
		/* 82132664h case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82132664h case   27:*/		return 0x82132668;
		  /* 82132668h */ case   28:  		/* bc 12, CR6_EQ, 428 */
		/* 82132668h case   28:*/		if ( regs.CR[6].eq ) { return 0x82132814;  }
		/* 82132668h case   28:*/		return 0x8213266C;
		  /* 8213266Ch */ case   29:  		/* lis R11, 24624 */
		/* 8213266Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0x6030);
		/* 8213266Ch case   29:*/		return 0x82132670;
		  /* 82132670h */ case   30:  		/* cmplw CR6, R10, R11 */
		/* 82132670h case   30:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82132670h case   30:*/		return 0x82132674;
		  /* 82132674h */ case   31:  		/* bc 12, CR6_EQ, 408 */
		/* 82132674h case   31:*/		if ( regs.CR[6].eq ) { return 0x8213280C;  }
		/* 82132674h case   31:*/		return 0x82132678;
		  /* 82132678h */ case   32:  		/* lis R11, 24688 */
		/* 82132678h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0x6070);
		/* 82132678h case   32:*/		return 0x8213267C;
		  /* 8213267Ch */ case   33:  		/* cmplw CR6, R10, R11 */
		/* 8213267Ch case   33:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213267Ch case   33:*/		return 0x82132680;
		  /* 82132680h */ case   34:  		/* bc 12, CR6_EQ, 24 */
		/* 82132680h case   34:*/		if ( regs.CR[6].eq ) { return 0x82132698;  }
		/* 82132680h case   34:*/		return 0x82132684;
		  /* 82132684h */ case   35:  		/* lis R11, 24704 */
		/* 82132684h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0x6080);
		/* 82132684h case   35:*/		return 0x82132688;
		  /* 82132688h */ case   36:  		/* cmplw CR6, R10, R11 */
		/* 82132688h case   36:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82132688h case   36:*/		return 0x8213268C;
		  /* 8213268Ch */ case   37:  		/* bc 4, CR6_EQ, 72 */
		/* 8213268Ch case   37:*/		if ( !regs.CR[6].eq ) { return 0x821326D4;  }
		/* 8213268Ch case   37:*/		return 0x82132690;
		  /* 82132690h */ case   38:  		/* li R11, 1 */
		/* 82132690h case   38:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82132690h case   38:*/		return 0x82132694;
		  /* 82132694h */ case   39:  		/* b 420 */
		/* 82132694h case   39:*/		return 0x82132838;
		/* 82132694h case   39:*/		return 0x82132698;
	}
	return 0x82132698;
} // Block from 821325F8h-82132698h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82132698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132698);
		  /* 82132698h */ case    0:  		/* lhz R11, <#[R8 + 202]> */
		/* 82132698h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R8 + 0x000000CA) );
		/* 82132698h case    0:*/		return 0x8213269C;
		  /* 8213269Ch */ case    1:  		/* cmplwi CR6, R11, 260 */
		/* 8213269Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213269Ch case    1:*/		return 0x821326A0;
		  /* 821326A0h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821326A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821326D4;  }
		/* 821326A0h case    2:*/		return 0x821326A4;
		  /* 821326A4h */ case    3:  		/* li R11, 1 */
		/* 821326A4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821326A4h case    3:*/		return 0x821326A8;
		  /* 821326A8h */ case    4:  		/* li R10, 1 */
		/* 821326A8h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821326A8h case    4:*/		return 0x821326AC;
		  /* 821326ACh */ case    5:  		/* b 400 */
		/* 821326ACh case    5:*/		return 0x8213283C;
		/* 821326ACh case    5:*/		return 0x821326B0;
	}
	return 0x821326B0;
} // Block from 82132698h-821326B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821326B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821326B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821326B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821326B0);
		  /* 821326B0h */ case    0:  		/* lis R11, 24784 */
		/* 821326B0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x60D0);
		/* 821326B0h case    0:*/		return 0x821326B4;
		  /* 821326B4h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821326B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821326B4h case    1:*/		return 0x821326B8;
		  /* 821326B8h */ case    2:  		/* bc 12, CR6_EQ, 380 */
		/* 821326B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82132834;  }
		/* 821326B8h case    2:*/		return 0x821326BC;
		  /* 821326BCh */ case    3:  		/* lis R11, 24848 */
		/* 821326BCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x6110);
		/* 821326BCh case    3:*/		return 0x821326C0;
		  /* 821326C0h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821326C0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821326C0h case    4:*/		return 0x821326C4;
		  /* 821326C4h */ case    5:  		/* bc 12, CR6_EQ, 360 */
		/* 821326C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213282C;  }
		/* 821326C4h case    5:*/		return 0x821326C8;
		  /* 821326C8h */ case    6:  		/* lis R11, 24864 */
		/* 821326C8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x6120);
		/* 821326C8h case    6:*/		return 0x821326CC;
		  /* 821326CCh */ case    7:  		/* cmplw CR6, R10, R11 */
		/* 821326CCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821326CCh case    7:*/		return 0x821326D0;
		  /* 821326D0h */ case    8:  		/* bc 12, CR6_EQ, 340 */
		/* 821326D0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82132824;  }
		/* 821326D0h case    8:*/		return 0x821326D4;
	}
	return 0x821326D4;
} // Block from 821326B0h-821326D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821326D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821326D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821326D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821326D4);
		  /* 821326D4h */ case    0:  		/* mr R3, R10 */
		/* 821326D4h case    0:*/		regs.R3 = regs.R10;
		/* 821326D4h case    0:*/		return 0x821326D8;
		  /* 821326D8h */ case    1:  		/* bl -12152 */
		/* 821326D8h case    1:*/		regs.LR = 0x821326DC; return 0x8212F760;
		/* 821326D8h case    1:*/		return 0x821326DC;
		  /* 821326DCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821326DCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821326DCh case    2:*/		return 0x821326E0;
		  /* 821326E0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821326E0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821326EC;  }
		/* 821326E0h case    3:*/		return 0x821326E4;
		  /* 821326E4h */ case    4:  		/* cmplw CR6, R10, R4 */
		/* 821326E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 821326E4h case    4:*/		return 0x821326E8;
		  /* 821326E8h */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 821326E8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213274C;  }
		/* 821326E8h case    5:*/		return 0x821326EC;
	}
	return 0x821326EC;
} // Block from 821326D4h-821326ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821326ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821326EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821326EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821326EC);
		  /* 821326ECh */ case    0:  		/* subf R11, R10, R4 */
		/* 821326ECh case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R4);
		/* 821326ECh case    0:*/		return 0x821326F0;
		  /* 821326F0h */ case    1:  		/* lwz R10, <#[R7 + 8]> */
		/* 821326F0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000008) );
		/* 821326F0h case    1:*/		return 0x821326F4;
		  /* 821326F4h */ case    2:  		/* lwz R3, <#[R8 + 20]> */
		/* 821326F4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000014) );
		/* 821326F4h case    2:*/		return 0x821326F8;
		  /* 821326F8h */ case    3:  		/* subfic R11, R11, 0 */
		/* 821326F8h case    3:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 821326F8h case    3:*/		return 0x821326FC;
		  /* 821326FCh */ case    4:  		/* subfe R11, R11, R11 */
		/* 821326FCh case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821326FCh case    4:*/		return 0x82132700;
		  /* 82132700h */ case    5:  		/* and R11, R11, R9 */
		/* 82132700h case    5:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82132700h case    5:*/		return 0x82132704;
		  /* 82132704h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132704h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132704h case    6:*/		return 0x82132708;
		  /* 82132708h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82132708h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82132708h case    7:*/		return 0x8213270C;
		  /* 8213270Ch */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213270Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213270Ch case    8:*/		return 0x82132710;
		  /* 82132710h */ case    9:  		/* lwzx R11, <#[R11 + R3]> */
		/* 82132710h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82132710h case    9:*/		return 0x82132714;
		  /* 82132714h */ case   10:  		/* lwz R10, <#[R11 + 60]> */
		/* 82132714h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 82132714h case   10:*/		return 0x82132718;
		  /* 82132718h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82132718h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82132718h case   11:*/		return 0x8213271C;
		  /* 8213271Ch */ case   12:  		/* bc 12, CR6_EQ, 48 */
		/* 8213271Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8213274C;  }
		/* 8213271Ch case   12:*/		return 0x82132720;
		  /* 82132720h */ case   13:  		/* lwz R10, <#[R8 + 200]> */
		/* 82132720h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x000000C8) );
		/* 82132720h case   13:*/		return 0x82132724;
		  /* 82132724h */ case   14:  		/* rlwinm R9, R10, 0, 16, 31 */
		/* 82132724h case   14:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R10);
		/* 82132724h case   14:*/		return 0x82132728;
		  /* 82132728h */ case   15:  		/* cmplwi CR6, R9, 260 */
		/* 82132728h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000104);
		/* 82132728h case   15:*/		return 0x8213272C;
		  /* 8213272Ch */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 8213272Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x8213274C;  }
		/* 8213272Ch case   16:*/		return 0x82132730;
		  /* 82132730h */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 82132730h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82132730h case   17:*/		return 0x82132734;
		  /* 82132734h */ case   18:  		/* lwz R9, <#[R8 + 16]> */
		/* 82132734h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000010) );
		/* 82132734h case   18:*/		return 0x82132738;
		  /* 82132738h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132738h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132738h case   19:*/		return 0x8213273C;
		  /* 8213273Ch */ case   20:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213273Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213273Ch case   20:*/		return 0x82132740;
		  /* 82132740h */ case   21:  		/* lwz R11, <#[R11 + 4]> */
		/* 82132740h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82132740h case   21:*/		return 0x82132744;
		  /* 82132744h */ case   22:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82132744h case   22:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82132744h case   22:*/		return 0x82132748;
		  /* 82132748h */ case   23:  		/* bc 4, CR0_EQ, 312 */
		/* 82132748h case   23:*/		if ( !regs.CR[0].eq ) { return 0x82132880;  }
		/* 82132748h case   23:*/		return 0x8213274C;
	}
	return 0x8213274C;
} // Block from 821326ECh-8213274Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213274Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213274C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213274C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213274C);
		  /* 8213274Ch */ case    0:  		/* lwz R11, <#[R8 + 12]> */
		/* 8213274Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 8213274Ch case    0:*/		return 0x82132750;
		  /* 82132750h */ case    1:  		/* addi R5, R5, 1 */
		/* 82132750h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 82132750h case    1:*/		return 0x82132754;
		  /* 82132754h */ case    2:  		/* addi R6, R6, 4 */
		/* 82132754h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82132754h case    2:*/		return 0x82132758;
		  /* 82132758h */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 82132758h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 82132758h case    3:*/		return 0x8213275C;
		  /* 8213275Ch */ case    4:  		/* bc 12, CR6_LT, -308 */
		/* 8213275Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82132628;  }
		/* 8213275Ch case    4:*/		return 0x82132760;
	}
	return 0x82132760;
} // Block from 8213274Ch-82132760h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82132760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132760);
		  /* 82132760h */ case    0:  		/* li R4, 0 */
		/* 82132760h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82132760h case    0:*/		return 0x82132764;
		  /* 82132764h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 82132764h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82132764h case    1:*/		return 0x82132768;
		  /* 82132768h */ case    2:  		/* bc 12, CR6_EQ, 152 */
		/* 82132768h case    2:*/		if ( regs.CR[6].eq ) { return 0x82132800;  }
		/* 82132768h case    2:*/		return 0x8213276C;
		  /* 8213276Ch */ case    3:  		/* lwz R3, <#[R8 + 24]> */
		/* 8213276Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000018) );
		/* 8213276Ch case    3:*/		return 0x82132770;
		  /* 82132770h */ case    4:  		/* stw R4, <#[R8 + 256]> */
		/* 82132770h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R8 + 0x00000100) );
		/* 82132770h case    4:*/		return 0x82132774;
		  /* 82132774h */ case    5:  		/* lwz R10, <#[R3]> */
		/* 82132774h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82132774h case    5:*/		return 0x82132778;
		  /* 82132778h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 82132778h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82132778h case    6:*/		return 0x8213277C;
		  /* 8213277Ch */ case    7:  		/* stw R10, <#[R8 + 260]> */
		/* 8213277Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000104) );
		/* 8213277Ch case    7:*/		return 0x82132780;
		  /* 82132780h */ case    8:  		/* bc 12, CR0_EQ, 108 */
		/* 82132780h case    8:*/		if ( regs.CR[0].eq ) { return 0x821327EC;  }
		/* 82132780h case    8:*/		return 0x82132784;
		  /* 82132784h */ case    9:  		/* lwz R11, <#[R10]> */
		/* 82132784h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82132784h case    9:*/		return 0x82132788;
		  /* 82132788h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82132788h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82132788h case   10:*/		return 0x8213278C;
		  /* 8213278Ch */ case   11:  		/* bc 12, CR6_EQ, 96 */
		/* 8213278Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821327EC;  }
		/* 8213278Ch case   11:*/		return 0x82132790;
		  /* 82132790h */ case   12:  		/* lwz R11, <#[R10 + 4]> */
		/* 82132790h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82132790h case   12:*/		return 0x82132794;
		  /* 82132794h */ case   13:  		/* li R5, 0 */
		/* 82132794h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82132794h case   13:*/		return 0x82132798;
		  /* 82132798h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82132798h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82132798h case   14:*/		return 0x8213279C;
		  /* 8213279Ch */ case   15:  		/* bc 4, CR6_GT, 80 */
		/* 8213279Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x821327EC;  }
		/* 8213279Ch case   15:*/		return 0x821327A0;
		  /* 821327A0h */ case   16:  		/* lwz R7, <#[R8 + 20]> */
		/* 821327A0h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000014) );
		/* 821327A0h case   16:*/		return 0x821327A4;
		  /* 821327A4h */ case   17:  		/* li R11, 0 */
		/* 821327A4h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821327A4h case   17:*/		return 0x821327A8;
		  /* 821327A8h */ case   18:  		/* lwz R6, <#[R8 + 128]> */
		/* 821327A8h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000080) );
		/* 821327A8h case   18:*/		return 0x821327AC;
		  /* 821327ACh */ case   19:  		/* lwz R9, <#[R10 + 8]> */
		/* 821327ACh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821327ACh case   19:*/		return 0x821327B0;
		  /* 821327B0h */ case   20:  		/* lwzx R9, <#[R9 + R11]> */
		/* 821327B0h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821327B0h case   20:*/		return 0x821327B4;
		  /* 821327B4h */ case   21:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821327B4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821327B4h case   21:*/		return 0x821327B8;
		  /* 821327B8h */ case   22:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821327B8h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821327B8h case   22:*/		return 0x821327BC;
		  /* 821327BCh */ case   23:  		/* lwz R31, <#[R9 + 4]> */
		/* 821327BCh case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + 0x00000004) );
		/* 821327BCh case   23:*/		return 0x821327C0;
		  /* 821327C0h */ case   24:  		/* cmplw CR6, R31, R6 */
		/* 821327C0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R6);
		/* 821327C0h case   24:*/		return 0x821327C4;
		  /* 821327C4h */ case   25:  		/* bc 4, CR6_EQ, 16 */
		/* 821327C4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821327D4;  }
		/* 821327C4h case   25:*/		return 0x821327C8;
		  /* 821327C8h */ case   26:  		/* lbz R9, <#[R9 + 111]> */
		/* 821327C8h case   26:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000006F) );
		/* 821327C8h case   26:*/		return 0x821327CC;
		  /* 821327CCh */ case   27:  		/* cmplwi CR6, R9, 5 */
		/* 821327CCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 821327CCh case   27:*/		return 0x821327D0;
		  /* 821327D0h */ case   28:  		/* bc 12, CR6_EQ, 208 */
		/* 821327D0h case   28:*/		if ( regs.CR[6].eq ) { return 0x821328A0;  }
		/* 821327D0h case   28:*/		return 0x821327D4;
	}
	return 0x821327D4;
} // Block from 82132760h-821327D4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821327D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821327D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821327D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821327D4);
		  /* 821327D4h */ case    0:  		/* lwz R9, <#[R8 + 260]> */
		/* 821327D4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000104) );
		/* 821327D4h case    0:*/		return 0x821327D8;
		  /* 821327D8h */ case    1:  		/* addi R5, R5, 1 */
		/* 821327D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821327D8h case    1:*/		return 0x821327DC;
		  /* 821327DCh */ case    2:  		/* addi R11, R11, 4 */
		/* 821327DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821327DCh case    2:*/		return 0x821327E0;
		  /* 821327E0h */ case    3:  		/* lwz R9, <#[R9 + 4]> */
		/* 821327E0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821327E0h case    3:*/		return 0x821327E4;
		  /* 821327E4h */ case    4:  		/* cmplw CR6, R5, R9 */
		/* 821327E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 821327E4h case    4:*/		return 0x821327E8;
		  /* 821327E8h */ case    5:  		/* bc 12, CR6_LT, -60 */
		/* 821327E8h case    5:*/		if ( regs.CR[6].lt ) { return 0x821327AC;  }
		/* 821327E8h case    5:*/		return 0x821327EC;
	}
	return 0x821327EC;
} // Block from 821327D4h-821327ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821327ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821327EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821327EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821327EC);
		  /* 821327ECh */ case    0:  		/* lwz R11, <#[R8 + 12]> */
		/* 821327ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 821327ECh case    0:*/		return 0x821327F0;
		  /* 821327F0h */ case    1:  		/* addi R4, R4, 1 */
		/* 821327F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821327F0h case    1:*/		return 0x821327F4;
		  /* 821327F4h */ case    2:  		/* addi R3, R3, 4 */
		/* 821327F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 821327F4h case    2:*/		return 0x821327F8;
		  /* 821327F8h */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 821327F8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821327F8h case    3:*/		return 0x821327FC;
		  /* 821327FCh */ case    4:  		/* bc 12, CR6_LT, -140 */
		/* 821327FCh case    4:*/		if ( regs.CR[6].lt ) { return 0x82132770;  }
		/* 821327FCh case    4:*/		return 0x82132800;
	}
	return 0x82132800;
} // Block from 821327ECh-82132800h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82132800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132800);
		  /* 82132800h */ case    0:  		/* li R3, 0 */
		/* 82132800h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82132800h case    0:*/		return 0x82132804;
		  /* 82132804h */ case    1:  		/* addi R1, R1, 112 */
		/* 82132804h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82132804h case    1:*/		return 0x82132808;
		  /* 82132808h */ case    2:  		/* b -660828 */
		/* 82132808h case    2:*/		return 0x820912AC;
		/* 82132808h case    2:*/		return 0x8213280C;
	}
	return 0x8213280C;
} // Block from 82132800h-8213280Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213280Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213280C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213280C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213280C);
		  /* 8213280Ch */ case    0:  		/* li R11, 0 */
		/* 8213280Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213280Ch case    0:*/		return 0x82132810;
		  /* 82132810h */ case    1:  		/* b 40 */
		/* 82132810h case    1:*/		return 0x82132838;
		/* 82132810h case    1:*/		return 0x82132814;
	}
	return 0x82132814;
} // Block from 8213280Ch-82132814h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132814);
		  /* 82132814h */ case    0:  		/* li R11, 0 */
		/* 82132814h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82132814h case    0:*/		return 0x82132818;
		  /* 82132818h */ case    1:  		/* b -368 */
		/* 82132818h case    1:*/		return 0x821326A8;
		/* 82132818h case    1:*/		return 0x8213281C;
	}
	return 0x8213281C;
} // Block from 82132814h-8213281Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213281Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213281C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213281C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213281C);
		  /* 8213281Ch */ case    0:  		/* li R11, 2 */
		/* 8213281Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8213281Ch case    0:*/		return 0x82132820;
		  /* 82132820h */ case    1:  		/* b -376 */
		/* 82132820h case    1:*/		return 0x821326A8;
		/* 82132820h case    1:*/		return 0x82132824;
	}
	return 0x82132824;
} // Block from 8213281Ch-82132824h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132824);
		  /* 82132824h */ case    0:  		/* li R11, 3 */
		/* 82132824h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82132824h case    0:*/		return 0x82132828;
		  /* 82132828h */ case    1:  		/* b 16 */
		/* 82132828h case    1:*/		return 0x82132838;
		/* 82132828h case    1:*/		return 0x8213282C;
	}
	return 0x8213282C;
} // Block from 82132824h-8213282Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213282Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213282C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213282C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213282C);
		  /* 8213282Ch */ case    0:  		/* li R11, 3 */
		/* 8213282Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8213282Ch case    0:*/		return 0x82132830;
		  /* 82132830h */ case    1:  		/* b -392 */
		/* 82132830h case    1:*/		return 0x821326A8;
		/* 82132830h case    1:*/		return 0x82132834;
	}
	return 0x82132834;
} // Block from 8213282Ch-82132834h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132834);
		  /* 82132834h */ case    0:  		/* li R11, 2 */
		/* 82132834h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82132834h case    0:*/		return 0x82132838;
	}
	return 0x82132838;
} // Block from 82132834h-82132838h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82132838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132838);
		  /* 82132838h */ case    0:  		/* li R10, 0 */
		/* 82132838h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82132838h case    0:*/		return 0x8213283C;
	}
	return 0x8213283C;
} // Block from 82132838h-8213283Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213283Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213283C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213283C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213283C);
		  /* 8213283Ch */ case    0:  		/* lis R6, -32217 */
		/* 8213283Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8227);
		/* 8213283Ch case    0:*/		return 0x82132840;
		  /* 82132840h */ case    1:  		/* lwz R4, <#[R7 + 60]> */
		/* 82132840h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + 0x0000003C) );
		/* 82132840h case    1:*/		return 0x82132844;
		  /* 82132844h */ case    2:  		/* rlwinm R31, R10, 2, 0, 29 */
		/* 82132844h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R10);
		/* 82132844h case    2:*/		return 0x82132848;
		  /* 82132848h */ case    3:  		/* lbz R9, <#[R8 + 203]> */
		/* 82132848h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R8 + 0x000000CB) );
		/* 82132848h case    3:*/		return 0x8213284C;
		  /* 8213284Ch */ case    4:  		/* addi R10, R6, 15984 */
		/* 8213284Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x3E70);
		/* 8213284Ch case    4:*/		return 0x82132850;
		  /* 82132850h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132850h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132850h case    5:*/		return 0x82132854;
		  /* 82132854h */ case    6:  		/* addi R30, R10, 16 */
		/* 82132854h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x10);
		/* 82132854h case    6:*/		return 0x82132858;
		  /* 82132858h */ case    7:  		/* lis R7, -32253 */
		/* 82132858h case    7:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82132858h case    7:*/		return 0x8213285C;
		  /* 8213285Ch */ case    8:  		/* mr R3, R8 */
		/* 8213285Ch case    8:*/		regs.R3 = regs.R8;
		/* 8213285Ch case    8:*/		return 0x82132860;
		  /* 82132860h */ case    9:  		/* addi R6, R7, 20348 */
		/* 82132860h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R7,0x4F7C);
		/* 82132860h case    9:*/		return 0x82132864;
		  /* 82132864h */ case   10:  		/* li R5, 4532 */
		/* 82132864h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 82132864h case   10:*/		return 0x82132868;
		  /* 82132868h */ case   11:  		/* lwzx R7, <#[R11 + R10]> */
		/* 82132868h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82132868h case   11:*/		return 0x8213286C;
		  /* 8213286Ch */ case   12:  		/* lwzx R8, <#[R31 + R30]> */
		/* 8213286Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 8213286Ch case   12:*/		return 0x82132870;
		  /* 82132870h */ case   13:  		/* bl -147776 */
		/* 82132870h case   13:*/		regs.LR = 0x82132874; return 0x8210E730;
		/* 82132870h case   13:*/		return 0x82132874;
		  /* 82132874h */ case   14:  		/* lis R3, -32768 */
		/* 82132874h case   14:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82132874h case   14:*/		return 0x82132878;
		  /* 82132878h */ case   15:  		/* ori R3, R3, 16389 */
		/* 82132878h case   15:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82132878h case   15:*/		return 0x8213287C;
		  /* 8213287Ch */ case   16:  		/* b -120 */
		/* 8213287Ch case   16:*/		return 0x82132804;
		/* 8213287Ch case   16:*/		return 0x82132880;
	}
	return 0x82132880;
} // Block from 8213283Ch-82132880h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82132880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132880);
		  /* 82132880h */ case    0:  		/* lis R11, -32253 */
		/* 82132880h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82132880h case    0:*/		return 0x82132884;
		  /* 82132884h */ case    1:  		/* lwz R4, <#[R7 + 60]> */
		/* 82132884h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + 0x0000003C) );
		/* 82132884h case    1:*/		return 0x82132888;
		  /* 82132888h */ case    2:  		/* rlwinm R7, R10, 0, 24, 31 */
		/* 82132888h case    2:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R10);
		/* 82132888h case    2:*/		return 0x8213288C;
		  /* 8213288Ch */ case    3:  		/* addi R6, R11, 20300 */
		/* 8213288Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4F4C);
		/* 8213288Ch case    3:*/		return 0x82132890;
		  /* 82132890h */ case    4:  		/* li R5, 4532 */
		/* 82132890h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 82132890h case    4:*/		return 0x82132894;
		  /* 82132894h */ case    5:  		/* mr R3, R8 */
		/* 82132894h case    5:*/		regs.R3 = regs.R8;
		/* 82132894h case    5:*/		return 0x82132898;
		  /* 82132898h */ case    6:  		/* bl -147816 */
		/* 82132898h case    6:*/		regs.LR = 0x8213289C; return 0x8210E730;
		/* 82132898h case    6:*/		return 0x8213289C;
		  /* 8213289Ch */ case    7:  		/* b -40 */
		/* 8213289Ch case    7:*/		return 0x82132874;
		/* 8213289Ch case    7:*/		return 0x821328A0;
	}
	return 0x821328A0;
} // Block from 82132880h-821328A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821328A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821328A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821328A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821328A0);
		  /* 821328A0h */ case    0:  		/* lis R11, -32253 */
		/* 821328A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821328A0h case    0:*/		return 0x821328A4;
		  /* 821328A4h */ case    1:  		/* lwz R4, <#[R10 + 60]> */
		/* 821328A4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000003C) );
		/* 821328A4h case    1:*/		return 0x821328A8;
		  /* 821328A8h */ case    2:  		/* li R5, 4512 */
		/* 821328A8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11A0);
		/* 821328A8h case    2:*/		return 0x821328AC;
		  /* 821328ACh */ case    3:  		/* addi R6, R11, 20236 */
		/* 821328ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4F0C);
		/* 821328ACh case    3:*/		return 0x821328B0;
		  /* 821328B0h */ case    4:  		/* mr R3, R8 */
		/* 821328B0h case    4:*/		regs.R3 = regs.R8;
		/* 821328B0h case    4:*/		return 0x821328B4;
		  /* 821328B4h */ case    5:  		/* bl -147844 */
		/* 821328B4h case    5:*/		regs.LR = 0x821328B8; return 0x8210E730;
		/* 821328B4h case    5:*/		return 0x821328B8;
		  /* 821328B8h */ case    6:  		/* b -68 */
		/* 821328B8h case    6:*/		return 0x82132874;
		/* 821328B8h case    6:*/		return 0x821328BC;
		  /* 821328BCh */ case    7:  		/* nop */
		/* 821328BCh case    7:*/		cpu::op::nop();
		/* 821328BCh case    7:*/		return 0x821328C0;
	}
	return 0x821328C0;
} // Block from 821328A0h-821328C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821328C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821328C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821328C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821328C0);
		  /* 821328C0h */ case    0:  		/* mfspr R12, LR */
		/* 821328C0h case    0:*/		regs.R12 = regs.LR;
		/* 821328C0h case    0:*/		return 0x821328C4;
		  /* 821328C4h */ case    1:  		/* bl -661104 */
		/* 821328C4h case    1:*/		regs.LR = 0x821328C8; return 0x82091254;
		/* 821328C4h case    1:*/		return 0x821328C8;
		  /* 821328C8h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 821328C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 821328C8h case    2:*/		return 0x821328CC;
		  /* 821328CCh */ case    3:  		/* lhz R11, <#[R3 + 202]> */
		/* 821328CCh case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 821328CCh case    3:*/		return 0x821328D0;
		  /* 821328D0h */ case    4:  		/* li R28, 0 */
		/* 821328D0h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821328D0h case    4:*/		return 0x821328D4;
		  /* 821328D4h */ case    5:  		/* li R27, 1 */
		/* 821328D4h case    5:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821328D4h case    5:*/		return 0x821328D8;
		  /* 821328D8h */ case    6:  		/* li R10, 2 */
		/* 821328D8h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821328D8h case    6:*/		return 0x821328DC;
		  /* 821328DCh */ case    7:  		/* stw R28, <#[R1 + 96]> */
		/* 821328DCh case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 821328DCh case    7:*/		return 0x821328E0;
		  /* 821328E0h */ case    8:  		/* li R9, 3 */
		/* 821328E0h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821328E0h case    8:*/		return 0x821328E4;
		  /* 821328E4h */ case    9:  		/* stw R28, <#[R1 + 112]> */
		/* 821328E4h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 821328E4h case    9:*/		return 0x821328E8;
		  /* 821328E8h */ case   10:  		/* mr R30, R3 */
		/* 821328E8h case   10:*/		regs.R30 = regs.R3;
		/* 821328E8h case   10:*/		return 0x821328EC;
		  /* 821328ECh */ case   11:  		/* stw R27, <#[R1 + 116]> */
		/* 821328ECh case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000074) );
		/* 821328ECh case   11:*/		return 0x821328F0;
		  /* 821328F0h */ case   12:  		/* cmplwi CR6, R11, 260 */
		/* 821328F0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 821328F0h case   12:*/		return 0x821328F4;
		  /* 821328F4h */ case   13:  		/* stw R10, <#[R1 + 120]> */
		/* 821328F4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 821328F4h case   13:*/		return 0x821328F8;
		  /* 821328F8h */ case   14:  		/* stw R9, <#[R1 + 124]> */
		/* 821328F8h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 821328F8h case   14:*/		return 0x821328FC;
		  /* 821328FCh */ case   15:  		/* bc 4, CR6_EQ, 12 */
		/* 821328FCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x82132908;  }
		/* 821328FCh case   15:*/		return 0x82132900;
		  /* 82132900h */ case   16:  		/* li R3, 0 */
		/* 82132900h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82132900h case   16:*/		return 0x82132904;
		  /* 82132904h */ case   17:  		/* b 932 */
		/* 82132904h case   17:*/		return 0x82132CA8;
		/* 82132904h case   17:*/		return 0x82132908;
	}
	return 0x82132908;
} // Block from 821328C0h-82132908h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82132908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132908);
		  /* 82132908h */ case    0:  		/* lwz R4, <#[R30 + 260]> */
		/* 82132908h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 82132908h case    0:*/		return 0x8213290C;
		  /* 8213290Ch */ case    1:  		/* lis R11, -32253 */
		/* 8213290Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213290Ch case    1:*/		return 0x82132910;
		  /* 82132910h */ case    2:  		/* addi R9, R1, 112 */
		/* 82132910h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82132910h case    2:*/		return 0x82132914;
		  /* 82132914h */ case    3:  		/* stw R28, <#[R1 + 84]> */
		/* 82132914h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 82132914h case    3:*/		return 0x82132918;
		  /* 82132918h */ case    4:  		/* addi R29, R11, 16376 */
		/* 82132918h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x3FF8);
		/* 82132918h case    4:*/		return 0x8213291C;
		  /* 8213291Ch */ case    5:  		/* addi R8, R1, 192 */
		/* 8213291Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 8213291Ch case    5:*/		return 0x82132920;
		  /* 82132920h */ case    6:  		/* addi R5, R29, -128 */
		/* 82132920h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFF80);
		/* 82132920h case    6:*/		return 0x82132924;
		  /* 82132924h */ case    7:  		/* lwz R11, <#[R4]> */
		/* 82132924h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82132924h case    7:*/		return 0x82132928;
		  /* 82132928h */ case    8:  		/* addi R7, R1, 96 */
		/* 82132928h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82132928h case    8:*/		return 0x8213292C;
		  /* 8213292Ch */ case    9:  		/* addi R6, R1, 128 */
		/* 8213292Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8213292Ch case    9:*/		return 0x82132930;
		  /* 82132930h */ case   10:  		/* rlwinm R31, R11, 0, 12, 31 */
		/* 82132930h case   10:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R11);
		/* 82132930h case   10:*/		return 0x82132934;
		  /* 82132934h */ case   11:  		/* mr R3, R30 */
		/* 82132934h case   11:*/		regs.R3 = regs.R30;
		/* 82132934h case   11:*/		return 0x82132938;
		  /* 82132938h */ case   12:  		/* mr R10, R31 */
		/* 82132938h case   12:*/		regs.R10 = regs.R31;
		/* 82132938h case   12:*/		return 0x8213293C;
		  /* 8213293Ch */ case   13:  		/* bl -322748 */
		/* 8213293Ch case   13:*/		regs.LR = 0x82132940; return 0x820E3C80;
		/* 8213293Ch case   13:*/		return 0x82132940;
		  /* 82132940h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82132940h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82132940h case   14:*/		return 0x82132944;
		  /* 82132944h */ case   15:  		/* bc 12, CR0_LT, 868 */
		/* 82132944h case   15:*/		if ( regs.CR[0].lt ) { return 0x82132CA8;  }
		/* 82132944h case   15:*/		return 0x82132948;
		  /* 82132948h */ case   16:  		/* cmpwi CR6, R3, 0 */
		/* 82132948h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82132948h case   16:*/		return 0x8213294C;
		  /* 8213294Ch */ case   17:  		/* bc 4, CR6_EQ, 116 */
		/* 8213294Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x821329C0;  }
		/* 8213294Ch case   17:*/		return 0x82132950;
		  /* 82132950h */ case   18:  		/* mr R5, R28 */
		/* 82132950h case   18:*/		regs.R5 = regs.R28;
		/* 82132950h case   18:*/		return 0x82132954;
		  /* 82132954h */ case   19:  		/* mr R4, R28 */
		/* 82132954h case   19:*/		regs.R4 = regs.R28;
		/* 82132954h case   19:*/		return 0x82132958;
		  /* 82132958h */ case   20:  		/* cmplwi CR6, R31, 0 */
		/* 82132958h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82132958h case   20:*/		return 0x8213295C;
		  /* 8213295Ch */ case   21:  		/* bc 12, CR6_EQ, 840 */
		/* 8213295Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x82132CA4;  }
		/* 8213295Ch case   21:*/		return 0x82132960;
		  /* 82132960h */ case   22:  		/* lis R11, -32256 */
		/* 82132960h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82132960h case   22:*/		return 0x82132964;
		  /* 82132964h */ case   23:  		/* lwz R9, <#[R30 + 16]> */
		/* 82132964h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82132964h case   23:*/		return 0x82132968;
		  /* 82132968h */ case   24:  		/* lwz R8, <#[R30 + 20]> */
		/* 82132968h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82132968h case   24:*/		return 0x8213296C;
		  /* 8213296Ch */ case   25:  		/* addi R10, R1, 240 */
		/* 8213296Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 8213296Ch case   25:*/		return 0x82132970;
		  /* 82132970h */ case   26:  		/* mtspr CTR, R31 */
		/* 82132970h case   26:*/		regs.CTR = regs.R31;
		/* 82132970h case   26:*/		return 0x82132974;
		  /* 82132974h */ case   27:  		/* lfd FR0, <#[R11 + 4736]> */
		/* 82132974h case   27:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001280) );
		/* 82132974h case   27:*/		return 0x82132978;
		  /* 82132978h */ case   28:  		/* lwz R11, <#[R10]> */
		/* 82132978h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82132978h case   28:*/		return 0x8213297C;
		  /* 8213297Ch */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213297Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213297Ch case   29:*/		return 0x82132980;
		  /* 82132980h */ case   30:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82132980h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82132980h case   30:*/		return 0x82132984;
		  /* 82132984h */ case   31:  		/* lwz R7, <#[R11 + 4]> */
		/* 82132984h case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82132984h case   31:*/		return 0x82132988;
		  /* 82132988h */ case   32:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82132988h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82132988h case   32:*/		return 0x8213298C;
		  /* 8213298Ch */ case   33:  		/* lwzx R7, <#[R7 + R9]> */
		/* 8213298Ch case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8213298Ch case   33:*/		return 0x82132990;
		  /* 82132990h */ case   34:  		/* lwz R7, <#[R7 + 4]> */
		/* 82132990h case   34:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 82132990h case   34:*/		return 0x82132994;
		  /* 82132994h */ case   35:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 82132994h case   35:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 82132994h case   35:*/		return 0x82132998;
		  /* 82132998h */ case   36:  		/* bc 12, CR0_EQ, 24 */
		/* 82132998h case   36:*/		if ( regs.CR[0].eq ) { return 0x821329B0;  }
		/* 82132998h case   36:*/		return 0x8213299C;
		  /* 8213299Ch */ case   37:  		/* lfd FR13, <#[R11 + 32]> */
		/* 8213299Ch case   37:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 8213299Ch case   37:*/		return 0x821329A0;
		  /* 821329A0h */ case   38:  		/* fcmpu CR6, FR13, FR0 */
		/* 821329A0h case   38:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821329A0h case   38:*/		return 0x821329A4;
		  /* 821329A4h */ case   39:  		/* bc 4, CR6_EQ, 12 */
		/* 821329A4h case   39:*/		if ( !regs.CR[6].eq ) { return 0x821329B0;  }
		/* 821329A4h case   39:*/		return 0x821329A8;
		  /* 821329A8h */ case   40:  		/* mr R5, R27 */
		/* 821329A8h case   40:*/		regs.R5 = regs.R27;
		/* 821329A8h case   40:*/		return 0x821329AC;
		  /* 821329ACh */ case   41:  		/* b 8 */
		/* 821329ACh case   41:*/		return 0x821329B4;
		/* 821329ACh case   41:*/		return 0x821329B0;
	}
	return 0x821329B0;
} // Block from 82132908h-821329B0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821329B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821329B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821329B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821329B0);
		  /* 821329B0h */ case    0:  		/* mr R4, R27 */
		/* 821329B0h case    0:*/		regs.R4 = regs.R27;
		/* 821329B0h case    0:*/		return 0x821329B4;
	}
	return 0x821329B4;
} // Block from 821329B0h-821329B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821329B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821329B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821329B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821329B4);
		  /* 821329B4h */ case    0:  		/* addi R10, R10, 4 */
		/* 821329B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821329B4h case    0:*/		return 0x821329B8;
		  /* 821329B8h */ case    1:  		/* bc 16, CR0_LT, -64 */
		/* 821329B8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132978;  }
		/* 821329B8h case    1:*/		return 0x821329BC;
		  /* 821329BCh */ case    2:  		/* b 304 */
		/* 821329BCh case    2:*/		return 0x82132AEC;
		/* 821329BCh case    2:*/		return 0x821329C0;
	}
	return 0x821329C0;
} // Block from 821329B4h-821329C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821329C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821329C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821329C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821329C0);
		  /* 821329C0h */ case    0:  		/* mr R5, R29 */
		/* 821329C0h case    0:*/		regs.R5 = regs.R29;
		/* 821329C0h case    0:*/		return 0x821329C4;
		  /* 821329C4h */ case    1:  		/* lwz R4, <#[R30 + 260]> */
		/* 821329C4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 821329C4h case    1:*/		return 0x821329C8;
		  /* 821329C8h */ case    2:  		/* mr R10, R31 */
		/* 821329C8h case    2:*/		regs.R10 = regs.R31;
		/* 821329C8h case    2:*/		return 0x821329CC;
		  /* 821329CCh */ case    3:  		/* stw R28, <#[R1 + 84]> */
		/* 821329CCh case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 821329CCh case    3:*/		return 0x821329D0;
		  /* 821329D0h */ case    4:  		/* addi R9, R1, 112 */
		/* 821329D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 821329D0h case    4:*/		return 0x821329D4;
		  /* 821329D4h */ case    5:  		/* addi R8, R1, 192 */
		/* 821329D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 821329D4h case    5:*/		return 0x821329D8;
		  /* 821329D8h */ case    6:  		/* addi R7, R1, 96 */
		/* 821329D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821329D8h case    6:*/		return 0x821329DC;
		  /* 821329DCh */ case    7:  		/* addi R6, R1, 128 */
		/* 821329DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 821329DCh case    7:*/		return 0x821329E0;
		  /* 821329E0h */ case    8:  		/* mr R3, R30 */
		/* 821329E0h case    8:*/		regs.R3 = regs.R30;
		/* 821329E0h case    8:*/		return 0x821329E4;
		  /* 821329E4h */ case    9:  		/* bl -322916 */
		/* 821329E4h case    9:*/		regs.LR = 0x821329E8; return 0x820E3C80;
		/* 821329E4h case    9:*/		return 0x821329E8;
		  /* 821329E8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 821329E8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821329E8h case   10:*/		return 0x821329EC;
		  /* 821329ECh */ case   11:  		/* bc 4, CR0_EQ, 700 */
		/* 821329ECh case   11:*/		if ( !regs.CR[0].eq ) { return 0x82132CA8;  }
		/* 821329ECh case   11:*/		return 0x821329F0;
		  /* 821329F0h */ case   12:  		/* lis R11, -32254 */
		/* 821329F0h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 821329F0h case   12:*/		return 0x821329F4;
		  /* 821329F4h */ case   13:  		/* mr R5, R28 */
		/* 821329F4h case   13:*/		regs.R5 = regs.R28;
		/* 821329F4h case   13:*/		return 0x821329F8;
		  /* 821329F8h */ case   14:  		/* mr R4, R28 */
		/* 821329F8h case   14:*/		regs.R4 = regs.R28;
		/* 821329F8h case   14:*/		return 0x821329FC;
		  /* 821329FCh */ case   15:  		/* mr R7, R28 */
		/* 821329FCh case   15:*/		regs.R7 = regs.R28;
		/* 821329FCh case   15:*/		return 0x82132A00;
		  /* 82132A00h */ case   16:  		/* mr R6, R28 */
		/* 82132A00h case   16:*/		regs.R6 = regs.R28;
		/* 82132A00h case   16:*/		return 0x82132A04;
		  /* 82132A04h */ case   17:  		/* lfd FR0, <#[R11 - 16184]> */
		/* 82132A04h case   17:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFC0C8) );
		/* 82132A04h case   17:*/		return 0x82132A08;
		  /* 82132A08h */ case   18:  		/* cmplwi CR6, R31, 0 */
		/* 82132A08h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82132A08h case   18:*/		return 0x82132A0C;
		  /* 82132A0Ch */ case   19:  		/* bc 12, CR6_EQ, 664 */
		/* 82132A0Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82132CA4;  }
		/* 82132A0Ch case   19:*/		return 0x82132A10;
		  /* 82132A10h */ case   20:  		/* lwz R9, <#[R30 + 20]> */
		/* 82132A10h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82132A10h case   20:*/		return 0x82132A14;
		  /* 82132A14h */ case   21:  		/* addi R10, R1, 192 */
		/* 82132A14h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 82132A14h case   21:*/		return 0x82132A18;
		  /* 82132A18h */ case   22:  		/* lwz R8, <#[R30 + 16]> */
		/* 82132A18h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 82132A18h case   22:*/		return 0x82132A1C;
		  /* 82132A1Ch */ case   23:  		/* mtspr CTR, R31 */
		/* 82132A1Ch case   23:*/		regs.CTR = regs.R31;
		/* 82132A1Ch case   23:*/		return 0x82132A20;
		  /* 82132A20h */ case   24:  		/* lwz R11, <#[R10]> */
		/* 82132A20h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82132A20h case   24:*/		return 0x82132A24;
		  /* 82132A24h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132A24h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132A24h case   25:*/		return 0x82132A28;
		  /* 82132A28h */ case   26:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82132A28h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82132A28h case   26:*/		return 0x82132A2C;
		  /* 82132A2Ch */ case   27:  		/* lwz R3, <#[R11 + 4]> */
		/* 82132A2Ch case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 82132A2Ch case   27:*/		return 0x82132A30;
		  /* 82132A30h */ case   28:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 82132A30h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 82132A30h case   28:*/		return 0x82132A34;
		  /* 82132A34h */ case   29:  		/* lwzx R3, <#[R3 + R8]> */
		/* 82132A34h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 82132A34h case   29:*/		return 0x82132A38;
		  /* 82132A38h */ case   30:  		/* lwz R3, <#[R3 + 4]> */
		/* 82132A38h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82132A38h case   30:*/		return 0x82132A3C;
		  /* 82132A3Ch */ case   31:  		/* rlwinm. R3, R3, 0, 23, 23 */
		/* 82132A3Ch case   31:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R3,regs.R3);
		/* 82132A3Ch case   31:*/		return 0x82132A40;
		  /* 82132A40h */ case   32:  		/* bc 12, CR0_EQ, 24 */
		/* 82132A40h case   32:*/		if ( regs.CR[0].eq ) { return 0x82132A58;  }
		/* 82132A40h case   32:*/		return 0x82132A44;
		  /* 82132A44h */ case   33:  		/* lfd FR13, <#[R11 + 32]> */
		/* 82132A44h case   33:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 82132A44h case   33:*/		return 0x82132A48;
		  /* 82132A48h */ case   34:  		/* fcmpu CR6, FR13, FR0 */
		/* 82132A48h case   34:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82132A48h case   34:*/		return 0x82132A4C;
		  /* 82132A4Ch */ case   35:  		/* bc 4, CR6_EQ, 12 */
		/* 82132A4Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x82132A58;  }
		/* 82132A4Ch case   35:*/		return 0x82132A50;
		  /* 82132A50h */ case   36:  		/* mr R7, R27 */
		/* 82132A50h case   36:*/		regs.R7 = regs.R27;
		/* 82132A50h case   36:*/		return 0x82132A54;
		  /* 82132A54h */ case   37:  		/* b 8 */
		/* 82132A54h case   37:*/		return 0x82132A5C;
		/* 82132A54h case   37:*/		return 0x82132A58;
	}
	return 0x82132A58;
} // Block from 821329C0h-82132A58h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82132A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132A58);
		  /* 82132A58h */ case    0:  		/* mr R6, R27 */
		/* 82132A58h case    0:*/		regs.R6 = regs.R27;
		/* 82132A58h case    0:*/		return 0x82132A5C;
	}
	return 0x82132A5C;
} // Block from 82132A58h-82132A5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82132A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132A5C);
		  /* 82132A5Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 82132A5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82132A5Ch case    0:*/		return 0x82132A60;
		  /* 82132A60h */ case    1:  		/* bc 16, CR0_LT, -64 */
		/* 82132A60h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132A20;  }
		/* 82132A60h case    1:*/		return 0x82132A64;
		  /* 82132A64h */ case    2:  		/* cmpwi CR6, R7, 0 */
		/* 82132A64h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 82132A64h case    2:*/		return 0x82132A68;
		  /* 82132A68h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 82132A68h case    3:*/		if ( regs.CR[6].eq ) { return 0x82132A90;  }
		/* 82132A68h case    3:*/		return 0x82132A6C;
		  /* 82132A6Ch */ case    4:  		/* cmpwi CR6, R6, 0 */
		/* 82132A6Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82132A6Ch case    4:*/		return 0x82132A70;
		  /* 82132A70h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 82132A70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82132A90;  }
		/* 82132A70h case    5:*/		return 0x82132A74;
		  /* 82132A74h */ case    6:  		/* addi R11, R1, 236 */
		/* 82132A74h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xEC);
		/* 82132A74h case    6:*/		return 0x82132A78;
		  /* 82132A78h */ case    7:  		/* mtspr CTR, R31 */
		/* 82132A78h case    7:*/		regs.CTR = regs.R31;
		/* 82132A78h case    7:*/		return 0x82132A7C;
		  /* 82132A7Ch */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 82132A7Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82132A7Ch case    8:*/		return 0x82132A80;
		  /* 82132A80h */ case    9:  		/* lwz R9, <#[R11 - 44]> */
		/* 82132A80h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFD4) );
		/* 82132A80h case    9:*/		return 0x82132A84;
		  /* 82132A84h */ case   10:  		/* stw R10, <#[R11 - 44]> */
		/* 82132A84h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFFD4) );
		/* 82132A84h case   10:*/		return 0x82132A88;
		  /* 82132A88h */ case   11:  		/* stwu R9, <#[R11 + 4]> */
		/* 82132A88h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82132A88h case   11:*/		return 0x82132A8C;
		  /* 82132A8Ch */ case   12:  		/* bc 16, CR0_LT, -16 */
		/* 82132A8Ch case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132A7C;  }
		/* 82132A8Ch case   12:*/		return 0x82132A90;
	}
	return 0x82132A90;
} // Block from 82132A5Ch-82132A90h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82132A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132A90);
		  /* 82132A90h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82132A90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82132A90h case    0:*/		return 0x82132A94;
		  /* 82132A94h */ case    1:  		/* bc 12, CR6_EQ, 528 */
		/* 82132A94h case    1:*/		if ( regs.CR[6].eq ) { return 0x82132CA4;  }
		/* 82132A94h case    1:*/		return 0x82132A98;
		  /* 82132A98h */ case    2:  		/* lwz R9, <#[R30 + 16]> */
		/* 82132A98h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82132A98h case    2:*/		return 0x82132A9C;
		  /* 82132A9Ch */ case    3:  		/* addi R10, R1, 240 */
		/* 82132A9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 82132A9Ch case    3:*/		return 0x82132AA0;
		  /* 82132AA0h */ case    4:  		/* lwz R8, <#[R30 + 20]> */
		/* 82132AA0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82132AA0h case    4:*/		return 0x82132AA4;
		  /* 82132AA4h */ case    5:  		/* mtspr CTR, R31 */
		/* 82132AA4h case    5:*/		regs.CTR = regs.R31;
		/* 82132AA4h case    5:*/		return 0x82132AA8;
		  /* 82132AA8h */ case    6:  		/* lwz R11, <#[R10]> */
		/* 82132AA8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82132AA8h case    6:*/		return 0x82132AAC;
		  /* 82132AACh */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132AACh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132AACh case    7:*/		return 0x82132AB0;
		  /* 82132AB0h */ case    8:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82132AB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82132AB0h case    8:*/		return 0x82132AB4;
		  /* 82132AB4h */ case    9:  		/* lwz R7, <#[R11 + 4]> */
		/* 82132AB4h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82132AB4h case    9:*/		return 0x82132AB8;
		  /* 82132AB8h */ case   10:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82132AB8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82132AB8h case   10:*/		return 0x82132ABC;
		  /* 82132ABCh */ case   11:  		/* lwzx R7, <#[R7 + R9]> */
		/* 82132ABCh case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82132ABCh case   11:*/		return 0x82132AC0;
		  /* 82132AC0h */ case   12:  		/* lwz R7, <#[R7 + 4]> */
		/* 82132AC0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 82132AC0h case   12:*/		return 0x82132AC4;
		  /* 82132AC4h */ case   13:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 82132AC4h case   13:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 82132AC4h case   13:*/		return 0x82132AC8;
		  /* 82132AC8h */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 82132AC8h case   14:*/		if ( regs.CR[0].eq ) { return 0x82132AE0;  }
		/* 82132AC8h case   14:*/		return 0x82132ACC;
		  /* 82132ACCh */ case   15:  		/* lfd FR13, <#[R11 + 32]> */
		/* 82132ACCh case   15:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 82132ACCh case   15:*/		return 0x82132AD0;
		  /* 82132AD0h */ case   16:  		/* fcmpu CR6, FR13, FR0 */
		/* 82132AD0h case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82132AD0h case   16:*/		return 0x82132AD4;
		  /* 82132AD4h */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 82132AD4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82132AE0;  }
		/* 82132AD4h case   17:*/		return 0x82132AD8;
		  /* 82132AD8h */ case   18:  		/* mr R5, R27 */
		/* 82132AD8h case   18:*/		regs.R5 = regs.R27;
		/* 82132AD8h case   18:*/		return 0x82132ADC;
		  /* 82132ADCh */ case   19:  		/* b 8 */
		/* 82132ADCh case   19:*/		return 0x82132AE4;
		/* 82132ADCh case   19:*/		return 0x82132AE0;
	}
	return 0x82132AE0;
} // Block from 82132A90h-82132AE0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82132AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132AE0);
		  /* 82132AE0h */ case    0:  		/* mr R4, R27 */
		/* 82132AE0h case    0:*/		regs.R4 = regs.R27;
		/* 82132AE0h case    0:*/		return 0x82132AE4;
	}
	return 0x82132AE4;
} // Block from 82132AE0h-82132AE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82132AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132AE4);
		  /* 82132AE4h */ case    0:  		/* addi R10, R10, 4 */
		/* 82132AE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82132AE4h case    0:*/		return 0x82132AE8;
		  /* 82132AE8h */ case    1:  		/* bc 16, CR0_LT, -64 */
		/* 82132AE8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132AA8;  }
		/* 82132AE8h case    1:*/		return 0x82132AEC;
	}
	return 0x82132AEC;
} // Block from 82132AE4h-82132AECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132AEC);
		  /* 82132AECh */ case    0:  		/* cmpwi CR6, R5, 1 */
		/* 82132AECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000001);
		/* 82132AECh case    0:*/		return 0x82132AF0;
		  /* 82132AF0h */ case    1:  		/* bc 4, CR6_EQ, 436 */
		/* 82132AF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82132CA4;  }
		/* 82132AF0h case    1:*/		return 0x82132AF4;
		  /* 82132AF4h */ case    2:  		/* cmpwi CR6, R4, 0 */
		/* 82132AF4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 82132AF4h case    2:*/		return 0x82132AF8;
		  /* 82132AF8h */ case    3:  		/* bc 4, CR6_EQ, 428 */
		/* 82132AF8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82132CA4;  }
		/* 82132AF8h case    3:*/		return 0x82132AFC;
		  /* 82132AFCh */ case    4:  		/* mr R11, R27 */
		/* 82132AFCh case    4:*/		regs.R11 = regs.R27;
		/* 82132AFCh case    4:*/		return 0x82132B00;
		  /* 82132B00h */ case    5:  		/* cmplwi CR6, R31, 1 */
		/* 82132B00h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 82132B00h case    5:*/		return 0x82132B04;
		  /* 82132B04h */ case    6:  		/* bc 4, CR6_GT, 40 */
		/* 82132B04h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82132B2C;  }
		/* 82132B04h case    6:*/		return 0x82132B08;
		  /* 82132B08h */ case    7:  		/* addi R10, R1, 196 */
		/* 82132B08h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC4);
		/* 82132B08h case    7:*/		return 0x82132B0C;
		  /* 82132B0Ch */ case    8:  		/* lwz R9, <#[R10]> */
		/* 82132B0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82132B0Ch case    8:*/		return 0x82132B10;
		  /* 82132B10h */ case    9:  		/* lwz R8, <#[R1 + 192]> */
		/* 82132B10h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C0) );
		/* 82132B10h case    9:*/		return 0x82132B14;
		  /* 82132B14h */ case   10:  		/* cmplw CR6, R9, R8 */
		/* 82132B14h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82132B14h case   10:*/		return 0x82132B18;
		  /* 82132B18h */ case   11:  		/* bc 4, CR6_EQ, 396 */
		/* 82132B18h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82132CA4;  }
		/* 82132B18h case   11:*/		return 0x82132B1C;
		  /* 82132B1Ch */ case   12:  		/* addi R11, R11, 1 */
		/* 82132B1Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82132B1Ch case   12:*/		return 0x82132B20;
		  /* 82132B20h */ case   13:  		/* addi R10, R10, 4 */
		/* 82132B20h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82132B20h case   13:*/		return 0x82132B24;
		  /* 82132B24h */ case   14:  		/* cmplw CR6, R11, R31 */
		/* 82132B24h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82132B24h case   14:*/		return 0x82132B28;
		  /* 82132B28h */ case   15:  		/* bc 12, CR6_LT, -28 */
		/* 82132B28h case   15:*/		if ( regs.CR[6].lt ) { return 0x82132B0C;  }
		/* 82132B28h case   15:*/		return 0x82132B2C;
	}
	return 0x82132B2C;
} // Block from 82132AECh-82132B2Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82132B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132B2C);
		  /* 82132B2Ch */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 82132B2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82132B2Ch case    0:*/		return 0x82132B30;
		  /* 82132B30h */ case    1:  		/* lis R10, 4096 */
		/* 82132B30h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 82132B30h case    1:*/		return 0x82132B34;
		  /* 82132B34h */ case    2:  		/* mr R9, R31 */
		/* 82132B34h case    2:*/		regs.R9 = regs.R31;
		/* 82132B34h case    2:*/		return 0x82132B38;
		  /* 82132B38h */ case    3:  		/* ori R10, R10, 1 */
		/* 82132B38h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82132B38h case    3:*/		return 0x82132B3C;
		  /* 82132B3Ch */ case    4:  		/* li R8, 1807 */
		/* 82132B3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x70F);
		/* 82132B3Ch case    4:*/		return 0x82132B40;
		  /* 82132B40h */ case    5:  		/* mr R5, R28 */
		/* 82132B40h case    5:*/		regs.R5 = regs.R28;
		/* 82132B40h case    5:*/		return 0x82132B44;
		  /* 82132B44h */ case    6:  		/* stw R10, <#[R11]> */
		/* 82132B44h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82132B44h case    6:*/		return 0x82132B48;
		  /* 82132B48h */ case    7:  		/* rlwimi R9, R8, 20, 0, 11 */
		/* 82132B48h case    7:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R9,regs.R8);
		/* 82132B48h case    7:*/		return 0x82132B4C;
		  /* 82132B4Ch */ case    8:  		/* mr R7, R28 */
		/* 82132B4Ch case    8:*/		regs.R7 = regs.R28;
		/* 82132B4Ch case    8:*/		return 0x82132B50;
		  /* 82132B50h */ case    9:  		/* lwz R11, <#[R1 + 132]> */
		/* 82132B50h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82132B50h case    9:*/		return 0x82132B54;
		  /* 82132B54h */ case   10:  		/* stw R27, <#[R11 + 4]> */
		/* 82132B54h case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 82132B54h case   10:*/		return 0x82132B58;
		  /* 82132B58h */ case   11:  		/* lwz R11, <#[R1 + 132]> */
		/* 82132B58h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82132B58h case   11:*/		return 0x82132B5C;
		  /* 82132B5Ch */ case   12:  		/* stw R27, <#[R11 + 12]> */
		/* 82132B5Ch case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x0000000C) );
		/* 82132B5Ch case   12:*/		return 0x82132B60;
		  /* 82132B60h */ case   13:  		/* lwz R11, <#[R1 + 136]> */
		/* 82132B60h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82132B60h case   13:*/		return 0x82132B64;
		  /* 82132B64h */ case   14:  		/* stw R9, <#[R11]> */
		/* 82132B64h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82132B64h case   14:*/		return 0x82132B68;
		  /* 82132B68h */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 82132B68h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 82132B68h case   15:*/		return 0x82132B6C;
		  /* 82132B6Ch */ case   16:  		/* stw R28, <#[R11]> */
		/* 82132B6Ch case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82132B6Ch case   16:*/		return 0x82132B70;
		  /* 82132B70h */ case   17:  		/* lwz R11, <#[R30 + 8]> */
		/* 82132B70h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82132B70h case   17:*/		return 0x82132B74;
		  /* 82132B74h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82132B74h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82132B74h case   18:*/		return 0x82132B78;
		  /* 82132B78h */ case   19:  		/* bc 4, CR6_GT, 68 */
		/* 82132B78h case   19:*/		if ( !regs.CR[6].gt ) { return 0x82132BBC;  }
		/* 82132B78h case   19:*/		return 0x82132B7C;
		  /* 82132B7Ch */ case   20:  		/* lwz R9, <#[R30 + 136]> */
		/* 82132B7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000088) );
		/* 82132B7Ch case   20:*/		return 0x82132B80;
		  /* 82132B80h */ case   21:  		/* mr R11, R28 */
		/* 82132B80h case   21:*/		regs.R11 = regs.R28;
		/* 82132B80h case   21:*/		return 0x82132B84;
		  /* 82132B84h */ case   22:  		/* lwz R8, <#[R30 + 20]> */
		/* 82132B84h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82132B84h case   22:*/		return 0x82132B88;
		  /* 82132B88h */ case   23:  		/* lwz R6, <#[R30 + 8]> */
		/* 82132B88h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82132B88h case   23:*/		return 0x82132B8C;
		  /* 82132B8Ch */ case   24:  		/* lwzx R10, <#[R11 + R8]> */
		/* 82132B8Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82132B8Ch case   24:*/		return 0x82132B90;
		  /* 82132B90h */ case   25:  		/* lwz R4, <#[R10 + 4]> */
		/* 82132B90h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 82132B90h case   25:*/		return 0x82132B94;
		  /* 82132B94h */ case   26:  		/* cmplw CR6, R9, R4 */
		/* 82132B94h case   26:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 82132B94h case   26:*/		return 0x82132B98;
		  /* 82132B98h */ case   27:  		/* bc 4, CR6_EQ, 20 */
		/* 82132B98h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82132BAC;  }
		/* 82132B98h case   27:*/		return 0x82132B9C;
		  /* 82132B9Ch */ case   28:  		/* lwz R10, <#[R10 + 12]> */
		/* 82132B9Ch case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82132B9Ch case   28:*/		return 0x82132BA0;
		  /* 82132BA0h */ case   29:  		/* cmplw CR6, R10, R5 */
		/* 82132BA0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 82132BA0h case   29:*/		return 0x82132BA4;
		  /* 82132BA4h */ case   30:  		/* bc 12, CR6_LT, 8 */
		/* 82132BA4h case   30:*/		if ( regs.CR[6].lt ) { return 0x82132BAC;  }
		/* 82132BA4h case   30:*/		return 0x82132BA8;
		  /* 82132BA8h */ case   31:  		/* addi R5, R10, 1 */
		/* 82132BA8h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1);
		/* 82132BA8h case   31:*/		return 0x82132BAC;
	}
	return 0x82132BAC;
} // Block from 82132B2Ch-82132BACh (32 instructions)

//////////////////////////////////////////////////////
// Block at 82132BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132BAC);
		  /* 82132BACh */ case    0:  		/* addi R7, R7, 1 */
		/* 82132BACh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82132BACh case    0:*/		return 0x82132BB0;
		  /* 82132BB0h */ case    1:  		/* addi R11, R11, 4 */
		/* 82132BB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82132BB0h case    1:*/		return 0x82132BB4;
		  /* 82132BB4h */ case    2:  		/* cmplw CR6, R7, R6 */
		/* 82132BB4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 82132BB4h case    2:*/		return 0x82132BB8;
		  /* 82132BB8h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 82132BB8h case    3:*/		if ( regs.CR[6].lt ) { return 0x82132B8C;  }
		/* 82132BB8h case    3:*/		return 0x82132BBC;
	}
	return 0x82132BBC;
} // Block from 82132BACh-82132BBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82132BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132BBC);
		  /* 82132BBCh */ case    0:  		/* lwz R11, <#[R1 + 136]> */
		/* 82132BBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82132BBCh case    0:*/		return 0x82132BC0;
		  /* 82132BC0h */ case    1:  		/* lis R10, -32256 */
		/* 82132BC0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82132BC0h case    1:*/		return 0x82132BC4;
		  /* 82132BC4h */ case    2:  		/* lwz R9, <#[R30 + 20]> */
		/* 82132BC4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82132BC4h case    2:*/		return 0x82132BC8;
		  /* 82132BC8h */ case    3:  		/* mr R3, R30 */
		/* 82132BC8h case    3:*/		regs.R3 = regs.R30;
		/* 82132BC8h case    3:*/		return 0x82132BCC;
		  /* 82132BCCh */ case    4:  		/* lwz R4, <#[R30 + 136]> */
		/* 82132BCCh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000088) );
		/* 82132BCCh case    4:*/		return 0x82132BD0;
		  /* 82132BD0h */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 82132BD0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82132BD0h case    5:*/		return 0x82132BD4;
		  /* 82132BD4h */ case    6:  		/* lfd FR1, <#[R10 + 1808]> */
		/* 82132BD4h case    6:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00000710) );
		/* 82132BD4h case    6:*/		return 0x82132BD8;
		  /* 82132BD8h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 82132BD8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82132BD8h case    7:*/		return 0x82132BDC;
		  /* 82132BDCh */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132BDCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132BDCh case    8:*/		return 0x82132BE0;
		  /* 82132BE0h */ case    9:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82132BE0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82132BE0h case    9:*/		return 0x82132BE4;
		  /* 82132BE4h */ case   10:  		/* lwz R6, <#[R11 + 16]> */
		/* 82132BE4h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 82132BE4h case   10:*/		return 0x82132BE8;
		  /* 82132BE8h */ case   11:  		/* bl -219584 */
		/* 82132BE8h case   11:*/		regs.LR = 0x82132BEC; return 0x820FD228;
		/* 82132BE8h case   11:*/		return 0x82132BEC;
		  /* 82132BECh */ case   12:  		/* lwz R11, <#[R1 + 132]> */
		/* 82132BECh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82132BECh case   12:*/		return 0x82132BF0;
		  /* 82132BF0h */ case   13:  		/* lwz R11, <#[R11 + 16]> */
		/* 82132BF0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82132BF0h case   13:*/		return 0x82132BF4;
		  /* 82132BF4h */ case   14:  		/* stw R3, <#[R11]> */
		/* 82132BF4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82132BF4h case   14:*/		return 0x82132BF8;
		  /* 82132BF8h */ case   15:  		/* lwz R11, <#[R1 + 132]> */
		/* 82132BF8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82132BF8h case   15:*/		return 0x82132BFC;
		  /* 82132BFCh */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 82132BFCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82132BFCh case   16:*/		return 0x82132C00;
		  /* 82132C00h */ case   17:  		/* lwz R10, <#[R1 + 192]> */
		/* 82132C00h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 82132C00h case   17:*/		return 0x82132C04;
		  /* 82132C04h */ case   18:  		/* stw R10, <#[R11]> */
		/* 82132C04h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82132C04h case   18:*/		return 0x82132C08;
		  /* 82132C08h */ case   19:  		/* lwz R10, <#[R1 + 132]> */
		/* 82132C08h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 82132C08h case   19:*/		return 0x82132C0C;
		  /* 82132C0Ch */ case   20:  		/* lwz R11, <#[R10 + 16]> */
		/* 82132C0Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82132C0Ch case   20:*/		return 0x82132C10;
		  /* 82132C10h */ case   21:  		/* lwz R11, <#[R11]> */
		/* 82132C10h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82132C10h case   21:*/		return 0x82132C14;
		  /* 82132C14h */ case   22:  		/* cmpwi CR6, R11, -1 */
		/* 82132C14h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82132C14h case   22:*/		return 0x82132C18;
		  /* 82132C18h */ case   23:  		/* bc 4, CR6_EQ, 16 */
		/* 82132C18h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82132C28;  }
		/* 82132C18h case   23:*/		return 0x82132C1C;
		  /* 82132C1Ch */ case   24:  		/* lis R3, -32761 */
		/* 82132C1Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82132C1Ch case   24:*/		return 0x82132C20;
		  /* 82132C20h */ case   25:  		/* ori R3, R3, 14 */
		/* 82132C20h case   25:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82132C20h case   25:*/		return 0x82132C24;
		  /* 82132C24h */ case   26:  		/* b 132 */
		/* 82132C24h case   26:*/		return 0x82132CA8;
		/* 82132C24h case   26:*/		return 0x82132C28;
	}
	return 0x82132C28;
} // Block from 82132BBCh-82132C28h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82132C28h
// Function '?MatchTexReflect@CPSLegacyProgram@D3DXShader@@IAAJH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132C28);
		  /* 82132C28h */ case    0:  		/* mr R11, R28 */
		/* 82132C28h case    0:*/		regs.R11 = regs.R28;
		/* 82132C28h case    0:*/		return 0x82132C2C;
		  /* 82132C2Ch */ case    1:  		/* mtspr CTR, R31 */
		/* 82132C2Ch case    1:*/		regs.CTR = regs.R31;
		/* 82132C2Ch case    1:*/		return 0x82132C30;
		  /* 82132C30h */ case    2:  		/* b 8 */
		/* 82132C30h case    2:*/		return 0x82132C38;
		/* 82132C30h case    2:*/		return 0x82132C34;
		  /* 82132C34h */ case    3:  		/* lwz R10, <#[R1 + 132]> */
		/* 82132C34h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 82132C34h case    3:*/		return 0x82132C38;
	}
	return 0x82132C38;
} // Block from 82132C28h-82132C38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82132C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132C38);
		  /* 82132C38h */ case    0:  		/* lwz R10, <#[R10 + 16]> */
		/* 82132C38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82132C38h case    0:*/		return 0x82132C3C;
		  /* 82132C3Ch */ case    1:  		/* lwz R9, <#[R1 + 136]> */
		/* 82132C3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 82132C3Ch case    1:*/		return 0x82132C40;
		  /* 82132C40h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 82132C40h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82132C40h case    2:*/		return 0x82132C44;
		  /* 82132C44h */ case    3:  		/* lwz R9, <#[R9 + 8]> */
		/* 82132C44h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82132C44h case    3:*/		return 0x82132C48;
		  /* 82132C48h */ case    4:  		/* stwx R10, <#[R9 + R11]> */
		/* 82132C48h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82132C48h case    4:*/		return 0x82132C4C;
		  /* 82132C4Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 82132C4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82132C4Ch case    5:*/		return 0x82132C50;
		  /* 82132C50h */ case    6:  		/* bc 16, CR0_LT, -28 */
		/* 82132C50h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132C34;  }
		/* 82132C50h case    6:*/		return 0x82132C54;
		  /* 82132C54h */ case    7:  		/* mr R10, R28 */
		/* 82132C54h case    7:*/		regs.R10 = regs.R28;
		/* 82132C54h case    7:*/		return 0x82132C58;
		  /* 82132C58h */ case    8:  		/* mtspr CTR, R31 */
		/* 82132C58h case    8:*/		regs.CTR = regs.R31;
		/* 82132C58h case    8:*/		return 0x82132C5C;
		  /* 82132C5Ch */ case    9:  		/* rlwinm R9, R31, 1, 0, 30 */
		/* 82132C5Ch case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R31);
		/* 82132C5Ch case    9:*/		return 0x82132C60;
		  /* 82132C60h */ case   10:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 82132C60h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 82132C60h case   10:*/		return 0x82132C64;
		  /* 82132C64h */ case   11:  		/* lwz R8, <#[R30 + 260]> */
		/* 82132C64h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000104) );
		/* 82132C64h case   11:*/		return 0x82132C68;
		  /* 82132C68h */ case   12:  		/* add R7, R9, R10 */
		/* 82132C68h case   12:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R10);
		/* 82132C68h case   12:*/		return 0x82132C6C;
		  /* 82132C6Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 82132C6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82132C6Ch case   13:*/		return 0x82132C70;
		  /* 82132C70h */ case   14:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82132C70h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82132C70h case   14:*/		return 0x82132C74;
		  /* 82132C74h */ case   15:  		/* lwz R8, <#[R8 + 8]> */
		/* 82132C74h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82132C74h case   15:*/		return 0x82132C78;
		  /* 82132C78h */ case   16:  		/* lwzx R6, <#[R7 + R8]> */
		/* 82132C78h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82132C78h case   16:*/		return 0x82132C7C;
		  /* 82132C7Ch */ case   17:  		/* lwzx R5, <#[R8 + R11]> */
		/* 82132C7Ch case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82132C7Ch case   17:*/		return 0x82132C80;
		  /* 82132C80h */ case   18:  		/* stwx R6, <#[R8 + R11]> */
		/* 82132C80h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82132C80h case   18:*/		return 0x82132C84;
		  /* 82132C84h */ case   19:  		/* addi R11, R11, 4 */
		/* 82132C84h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82132C84h case   19:*/		return 0x82132C88;
		  /* 82132C88h */ case   20:  		/* lwz R8, <#[R30 + 260]> */
		/* 82132C88h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000104) );
		/* 82132C88h case   20:*/		return 0x82132C8C;
		  /* 82132C8Ch */ case   21:  		/* lwz R8, <#[R8 + 8]> */
		/* 82132C8Ch case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82132C8Ch case   21:*/		return 0x82132C90;
		  /* 82132C90h */ case   22:  		/* stwx R5, <#[R8 + R7]> */
		/* 82132C90h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 82132C90h case   22:*/		return 0x82132C94;
		  /* 82132C94h */ case   23:  		/* bc 16, CR0_LT, -48 */
		/* 82132C94h case   23:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132C64;  }
		/* 82132C94h case   23:*/		return 0x82132C98;
		  /* 82132C98h */ case   24:  		/* li R3, 0 */
		/* 82132C98h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82132C98h case   24:*/		return 0x82132C9C;
		  /* 82132C9Ch */ case   25:  		/* stw R27, <#[R30 + 1104]> */
		/* 82132C9Ch case   25:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000450) );
		/* 82132C9Ch case   25:*/		return 0x82132CA0;
		  /* 82132CA0h */ case   26:  		/* b 8 */
		/* 82132CA0h case   26:*/		return 0x82132CA8;
		/* 82132CA0h case   26:*/		return 0x82132CA4;
	}
	return 0x82132CA4;
} // Block from 82132C38h-82132CA4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82132CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132CA4);
		  /* 82132CA4h */ case    0:  		/* li R3, 1 */
		/* 82132CA4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82132CA4h case    0:*/		return 0x82132CA8;
	}
	return 0x82132CA8;
} // Block from 82132CA4h-82132CA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82132CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132CA8);
		  /* 82132CA8h */ case    0:  		/* addi R1, R1, 400 */
		/* 82132CA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 82132CA8h case    0:*/		return 0x82132CAC;
		  /* 82132CACh */ case    1:  		/* b -662024 */
		/* 82132CACh case    1:*/		return 0x820912A4;
		/* 82132CACh case    1:*/		return 0x82132CB0;
	}
	return 0x82132CB0;
} // Block from 82132CA8h-82132CB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82132CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132CB0);
		  /* 82132CB0h */ case    0:  		/* mfspr R12, LR */
		/* 82132CB0h case    0:*/		regs.R12 = regs.LR;
		/* 82132CB0h case    0:*/		return 0x82132CB4;
		  /* 82132CB4h */ case    1:  		/* bl -662120 */
		/* 82132CB4h case    1:*/		regs.LR = 0x82132CB8; return 0x8209124C;
		/* 82132CB4h case    1:*/		return 0x82132CB8;
		  /* 82132CB8h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 82132CB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 82132CB8h case    2:*/		return 0x82132CBC;
		  /* 82132CBCh */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 82132CBCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 82132CBCh case    3:*/		return 0x82132CC0;
		  /* 82132CC0h */ case    4:  		/* li R26, 0 */
		/* 82132CC0h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82132CC0h case    4:*/		return 0x82132CC4;
		  /* 82132CC4h */ case    5:  		/* li R10, 2 */
		/* 82132CC4h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82132CC4h case    5:*/		return 0x82132CC8;
		  /* 82132CC8h */ case    6:  		/* li R8, 3 */
		/* 82132CC8h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 82132CC8h case    6:*/		return 0x82132CCC;
		  /* 82132CCCh */ case    7:  		/* stw R26, <#[R1 + 96]> */
		/* 82132CCCh case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82132CCCh case    7:*/		return 0x82132CD0;
		  /* 82132CD0h */ case    8:  		/* li R9, 1 */
		/* 82132CD0h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82132CD0h case    8:*/		return 0x82132CD4;
		  /* 82132CD4h */ case    9:  		/* stw R10, <#[R1 + 120]> */
		/* 82132CD4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 82132CD4h case    9:*/		return 0x82132CD8;
		  /* 82132CD8h */ case   10:  		/* lis R11, -32253 */
		/* 82132CD8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82132CD8h case   10:*/		return 0x82132CDC;
		  /* 82132CDCh */ case   11:  		/* stw R8, <#[R1 + 124]> */
		/* 82132CDCh case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 82132CDCh case   11:*/		return 0x82132CE0;
		  /* 82132CE0h */ case   12:  		/* stw R9, <#[R1 + 116]> */
		/* 82132CE0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 82132CE0h case   12:*/		return 0x82132CE4;
		  /* 82132CE4h */ case   13:  		/* addi R9, R1, 112 */
		/* 82132CE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82132CE4h case   13:*/		return 0x82132CE8;
		  /* 82132CE8h */ case   14:  		/* addi R29, R11, 16056 */
		/* 82132CE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x3EB8);
		/* 82132CE8h case   14:*/		return 0x82132CEC;
		  /* 82132CECh */ case   15:  		/* stw R26, <#[R1 + 112]> */
		/* 82132CECh case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 82132CECh case   15:*/		return 0x82132CF0;
		  /* 82132CF0h */ case   16:  		/* lwz R11, <#[R4]> */
		/* 82132CF0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82132CF0h case   16:*/		return 0x82132CF4;
		  /* 82132CF4h */ case   17:  		/* rlwinm R31, R11, 0, 12, 31 */
		/* 82132CF4h case   17:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R11);
		/* 82132CF4h case   17:*/		return 0x82132CF8;
		  /* 82132CF8h */ case   18:  		/* mr R5, R29 */
		/* 82132CF8h case   18:*/		regs.R5 = regs.R29;
		/* 82132CF8h case   18:*/		return 0x82132CFC;
		  /* 82132CFCh */ case   19:  		/* stw R26, <#[R1 + 84]> */
		/* 82132CFCh case   19:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 82132CFCh case   19:*/		return 0x82132D00;
		  /* 82132D00h */ case   20:  		/* addi R8, R1, 192 */
		/* 82132D00h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82132D00h case   20:*/		return 0x82132D04;
		  /* 82132D04h */ case   21:  		/* addi R7, R1, 96 */
		/* 82132D04h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82132D04h case   21:*/		return 0x82132D08;
		  /* 82132D08h */ case   22:  		/* addi R6, R1, 128 */
		/* 82132D08h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 82132D08h case   22:*/		return 0x82132D0C;
		  /* 82132D0Ch */ case   23:  		/* mr R10, R31 */
		/* 82132D0Ch case   23:*/		regs.R10 = regs.R31;
		/* 82132D0Ch case   23:*/		return 0x82132D10;
		  /* 82132D10h */ case   24:  		/* mr R28, R3 */
		/* 82132D10h case   24:*/		regs.R28 = regs.R3;
		/* 82132D10h case   24:*/		return 0x82132D14;
		  /* 82132D14h */ case   25:  		/* mr R30, R26 */
		/* 82132D14h case   25:*/		regs.R30 = regs.R26;
		/* 82132D14h case   25:*/		return 0x82132D18;
		  /* 82132D18h */ case   26:  		/* mr R27, R26 */
		/* 82132D18h case   26:*/		regs.R27 = regs.R26;
		/* 82132D18h case   26:*/		return 0x82132D1C;
		  /* 82132D1Ch */ case   27:  		/* bl -323740 */
		/* 82132D1Ch case   27:*/		regs.LR = 0x82132D20; return 0x820E3C80;
		/* 82132D1Ch case   27:*/		return 0x82132D20;
		  /* 82132D20h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 82132D20h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82132D20h case   28:*/		return 0x82132D24;
		  /* 82132D24h */ case   29:  		/* bc 12, CR0_EQ, 56 */
		/* 82132D24h case   29:*/		if ( regs.CR[0].eq ) { return 0x82132D5C;  }
		/* 82132D24h case   29:*/		return 0x82132D28;
		  /* 82132D28h */ case   30:  		/* addi R5, R29, 96 */
		/* 82132D28h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x60);
		/* 82132D28h case   30:*/		return 0x82132D2C;
		  /* 82132D2Ch */ case   31:  		/* lwz R4, <#[R28 + 260]> */
		/* 82132D2Ch case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 82132D2Ch case   31:*/		return 0x82132D30;
		  /* 82132D30h */ case   32:  		/* mr R10, R31 */
		/* 82132D30h case   32:*/		regs.R10 = regs.R31;
		/* 82132D30h case   32:*/		return 0x82132D34;
		  /* 82132D34h */ case   33:  		/* stw R26, <#[R1 + 84]> */
		/* 82132D34h case   33:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 82132D34h case   33:*/		return 0x82132D38;
		  /* 82132D38h */ case   34:  		/* addi R9, R1, 112 */
		/* 82132D38h case   34:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82132D38h case   34:*/		return 0x82132D3C;
		  /* 82132D3Ch */ case   35:  		/* addi R8, R1, 192 */
		/* 82132D3Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82132D3Ch case   35:*/		return 0x82132D40;
		  /* 82132D40h */ case   36:  		/* addi R7, R1, 96 */
		/* 82132D40h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82132D40h case   36:*/		return 0x82132D44;
		  /* 82132D44h */ case   37:  		/* addi R6, R1, 128 */
		/* 82132D44h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 82132D44h case   37:*/		return 0x82132D48;
		  /* 82132D48h */ case   38:  		/* mr R3, R28 */
		/* 82132D48h case   38:*/		regs.R3 = regs.R28;
		/* 82132D48h case   38:*/		return 0x82132D4C;
		  /* 82132D4Ch */ case   39:  		/* bl -323788 */
		/* 82132D4Ch case   39:*/		regs.LR = 0x82132D50; return 0x820E3C80;
		/* 82132D4Ch case   39:*/		return 0x82132D50;
		  /* 82132D50h */ case   40:  		/* li R27, 1 */
		/* 82132D50h case   40:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82132D50h case   40:*/		return 0x82132D54;
		  /* 82132D54h */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 82132D54h case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82132D54h case   41:*/		return 0x82132D58;
		  /* 82132D58h */ case   42:  		/* bc 4, CR0_EQ, 512 */
		/* 82132D58h case   42:*/		if ( !regs.CR[0].eq ) { return 0x82132F58;  }
		/* 82132D58h case   42:*/		return 0x82132D5C;
	}
	return 0x82132D5C;
} // Block from 82132CB0h-82132D5Ch (43 instructions)

//////////////////////////////////////////////////////
// Block at 82132D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132D5C);
		  /* 82132D5Ch */ case    0:  		/* mr R25, R26 */
		/* 82132D5Ch case    0:*/		regs.R25 = regs.R26;
		/* 82132D5Ch case    0:*/		return 0x82132D60;
		  /* 82132D60h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 82132D60h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82132D60h case    1:*/		return 0x82132D64;
		  /* 82132D64h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 82132D64h case    2:*/		if ( regs.CR[6].eq ) { return 0x82132DCC;  }
		/* 82132D64h case    2:*/		return 0x82132D68;
		  /* 82132D68h */ case    3:  		/* lwz R11, <#[R1 + 208]> */
		/* 82132D68h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 82132D68h case    3:*/		return 0x82132D6C;
		  /* 82132D6Ch */ case    4:  		/* lwz R10, <#[R28 + 20]> */
		/* 82132D6Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 82132D6Ch case    4:*/		return 0x82132D70;
		  /* 82132D70h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132D70h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132D70h case    5:*/		return 0x82132D74;
		  /* 82132D74h */ case    6:  		/* lwz R9, <#[R1 + 192]> */
		/* 82132D74h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000C0) );
		/* 82132D74h case    6:*/		return 0x82132D78;
		  /* 82132D78h */ case    7:  		/* lwz R8, <#[R28 + 16]> */
		/* 82132D78h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 82132D78h case    7:*/		return 0x82132D7C;
		  /* 82132D7Ch */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82132D7Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82132D7Ch case    8:*/		return 0x82132D80;
		  /* 82132D80h */ case    9:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82132D80h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82132D80h case    9:*/		return 0x82132D84;
		  /* 82132D84h */ case   10:  		/* lwzx R10, <#[R9 + R10]> */
		/* 82132D84h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82132D84h case   10:*/		return 0x82132D88;
		  /* 82132D88h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 82132D88h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82132D88h case   11:*/		return 0x82132D8C;
		  /* 82132D8Ch */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132D8Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132D8Ch case   12:*/		return 0x82132D90;
		  /* 82132D90h */ case   13:  		/* lwz R10, <#[R10 + 4]> */
		/* 82132D90h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82132D90h case   13:*/		return 0x82132D94;
		  /* 82132D94h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82132D94h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82132D94h case   14:*/		return 0x82132D98;
		  /* 82132D98h */ case   15:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82132D98h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82132D98h case   15:*/		return 0x82132D9C;
		  /* 82132D9Ch */ case   16:  		/* lwzx R10, <#[R10 + R8]> */
		/* 82132D9Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82132D9Ch case   16:*/		return 0x82132DA0;
		  /* 82132DA0h */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 82132DA0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82132DA0h case   17:*/		return 0x82132DA4;
		  /* 82132DA4h */ case   18:  		/* rlwinm. R9, R11, 0, 22, 22 */
		/* 82132DA4h case   18:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R9,regs.R11);
		/* 82132DA4h case   18:*/		return 0x82132DA8;
		  /* 82132DA8h */ case   19:  		/* bc 12, CR0_EQ, 8 */
		/* 82132DA8h case   19:*/		if ( regs.CR[0].eq ) { return 0x82132DB0;  }
		/* 82132DA8h case   19:*/		return 0x82132DAC;
		  /* 82132DACh */ case   20:  		/* li R25, 1 */
		/* 82132DACh case   20:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82132DACh case   20:*/		return 0x82132DB0;
	}
	return 0x82132DB0;
} // Block from 82132D5Ch-82132DB0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82132DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132DB0);
		  /* 82132DB0h */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 82132DB0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82132DB0h case    0:*/		return 0x82132DB4;
		  /* 82132DB4h */ case    1:  		/* rlwinm. R10, R10, 0, 22, 23 */
		/* 82132DB4h case    1:*/		cpu::op::rlwinm<1,0,22,23>(regs,&regs.R10,regs.R10);
		/* 82132DB4h case    1:*/		return 0x82132DB8;
		  /* 82132DB8h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82132DB8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82132DCC;  }
		/* 82132DB8h case    2:*/		return 0x82132DBC;
		  /* 82132DBCh */ case    3:  		/* rlwinm. R11, R11, 0, 22, 23 */
		/* 82132DBCh case    3:*/		cpu::op::rlwinm<1,0,22,23>(regs,&regs.R11,regs.R11);
		/* 82132DBCh case    3:*/		return 0x82132DC0;
		  /* 82132DC0h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82132DC0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82132DCC;  }
		/* 82132DC0h case    4:*/		return 0x82132DC4;
		  /* 82132DC4h */ case    5:  		/* li R29, 1 */
		/* 82132DC4h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82132DC4h case    5:*/		return 0x82132DC8;
		  /* 82132DC8h */ case    6:  		/* b 428 */
		/* 82132DC8h case    6:*/		return 0x82132F74;
		/* 82132DC8h case    6:*/		return 0x82132DCC;
	}
	return 0x82132DCC;
} // Block from 82132DB0h-82132DCCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82132DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132DCC);
		  /* 82132DCCh */ case    0:  		/* li R3, 116 */
		/* 82132DCCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82132DCCh case    0:*/		return 0x82132DD0;
		  /* 82132DD0h */ case    1:  		/* bl -223288 */
		/* 82132DD0h case    1:*/		regs.LR = 0x82132DD4; return 0x820FC598;
		/* 82132DD0h case    1:*/		return 0x82132DD4;
		  /* 82132DD4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82132DD4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82132DD4h case    2:*/		return 0x82132DD8;
		  /* 82132DD8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82132DD8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82132DE8;  }
		/* 82132DD8h case    3:*/		return 0x82132DDC;
		  /* 82132DDCh */ case    4:  		/* bl -225084 */
		/* 82132DDCh case    4:*/		regs.LR = 0x82132DE0; return 0x820FBEA0;
		/* 82132DDCh case    4:*/		return 0x82132DE0;
		  /* 82132DE0h */ case    5:  		/* mr R30, R3 */
		/* 82132DE0h case    5:*/		regs.R30 = regs.R3;
		/* 82132DE0h case    5:*/		return 0x82132DE4;
		  /* 82132DE4h */ case    6:  		/* b 8 */
		/* 82132DE4h case    6:*/		return 0x82132DEC;
		/* 82132DE4h case    6:*/		return 0x82132DE8;
	}
	return 0x82132DE8;
} // Block from 82132DCCh-82132DE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82132DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132DE8);
		  /* 82132DE8h */ case    0:  		/* mr R30, R26 */
		/* 82132DE8h case    0:*/		regs.R30 = regs.R26;
		/* 82132DE8h case    0:*/		return 0x82132DEC;
	}
	return 0x82132DEC;
} // Block from 82132DE8h-82132DECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82132DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132DEC);
		  /* 82132DECh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82132DECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82132DECh case    0:*/		return 0x82132DF0;
		  /* 82132DF0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82132DF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82132E00;  }
		/* 82132DF0h case    1:*/		return 0x82132DF4;
		  /* 82132DF4h */ case    2:  		/* lis R29, -32761 */
		/* 82132DF4h case    2:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 82132DF4h case    2:*/		return 0x82132DF8;
		  /* 82132DF8h */ case    3:  		/* ori R29, R29, 14 */
		/* 82132DF8h case    3:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 82132DF8h case    3:*/		return 0x82132DFC;
		  /* 82132DFCh */ case    4:  		/* b 376 */
		/* 82132DFCh case    4:*/		return 0x82132F74;
		/* 82132DFCh case    4:*/		return 0x82132E00;
	}
	return 0x82132E00;
} // Block from 82132DECh-82132E00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82132E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132E00);
		  /* 82132E00h */ case    0:  		/* rlwinm R11, R31, 0, 12, 31 */
		/* 82132E00h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R31);
		/* 82132E00h case    0:*/		return 0x82132E04;
		  /* 82132E04h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 82132E04h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82132E04h case    1:*/		return 0x82132E08;
		  /* 82132E08h */ case    2:  		/* oris R4, R11, 28736 */
		/* 82132E08h case    2:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0x7040);
		/* 82132E08h case    2:*/		return 0x82132E0C;
		  /* 82132E0Ch */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 82132E0Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82132E14;  }
		/* 82132E0Ch case    3:*/		return 0x82132E10;
		  /* 82132E10h */ case    4:  		/* oris R4, R11, 28720 */
		/* 82132E10h case    4:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0x7030);
		/* 82132E10h case    4:*/		return 0x82132E14;
	}
	return 0x82132E14;
} // Block from 82132E00h-82132E14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82132E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132E14);
		  /* 82132E14h */ case    0:  		/* li R7, 0 */
		/* 82132E14h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82132E14h case    0:*/		return 0x82132E18;
		  /* 82132E18h */ case    1:  		/* mr R6, R31 */
		/* 82132E18h case    1:*/		regs.R6 = regs.R31;
		/* 82132E18h case    1:*/		return 0x82132E1C;
		  /* 82132E1Ch */ case    2:  		/* mulli R5, R31, 3 */
		/* 82132E1Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R31,0x3);
		/* 82132E1Ch case    2:*/		return 0x82132E20;
		  /* 82132E20h */ case    3:  		/* mr R3, R30 */
		/* 82132E20h case    3:*/		regs.R3 = regs.R30;
		/* 82132E20h case    3:*/		return 0x82132E24;
		  /* 82132E24h */ case    4:  		/* bl -223220 */
		/* 82132E24h case    4:*/		regs.LR = 0x82132E28; return 0x820FC630;
		/* 82132E24h case    4:*/		return 0x82132E28;
		  /* 82132E28h */ case    5:  		/* or. R29, R3, R3 */
		/* 82132E28h case    5:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82132E28h case    5:*/		return 0x82132E2C;
		  /* 82132E2Ch */ case    6:  		/* bc 12, CR0_LT, 304 */
		/* 82132E2Ch case    6:*/		if ( regs.CR[0].lt ) { return 0x82132F5C;  }
		/* 82132E2Ch case    6:*/		return 0x82132E30;
		  /* 82132E30h */ case    7:  		/* mr R3, R30 */
		/* 82132E30h case    7:*/		regs.R3 = regs.R30;
		/* 82132E30h case    7:*/		return 0x82132E34;
		  /* 82132E34h */ case    8:  		/* lwz R4, <#[R28 + 260]> */
		/* 82132E34h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 82132E34h case    8:*/		return 0x82132E38;
		  /* 82132E38h */ case    9:  		/* bl -225096 */
		/* 82132E38h case    9:*/		regs.LR = 0x82132E3C; return 0x820FBEF0;
		/* 82132E38h case    9:*/		return 0x82132E3C;
		  /* 82132E3Ch */ case   10:  		/* or. R29, R3, R3 */
		/* 82132E3Ch case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82132E3Ch case   10:*/		return 0x82132E40;
		  /* 82132E40h */ case   11:  		/* bc 12, CR0_LT, 284 */
		/* 82132E40h case   11:*/		if ( regs.CR[0].lt ) { return 0x82132F5C;  }
		/* 82132E40h case   11:*/		return 0x82132E44;
		  /* 82132E44h */ case   12:  		/* mr R8, R26 */
		/* 82132E44h case   12:*/		regs.R8 = regs.R26;
		/* 82132E44h case   12:*/		return 0x82132E48;
		  /* 82132E48h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 82132E48h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82132E48h case   13:*/		return 0x82132E4C;
		  /* 82132E4Ch */ case   14:  		/* bc 12, CR6_EQ, 132 */
		/* 82132E4Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x82132ED0;  }
		/* 82132E4Ch case   14:*/		return 0x82132E50;
		  /* 82132E50h */ case   15:  		/* mtspr CTR, R31 */
		/* 82132E50h case   15:*/		regs.CTR = regs.R31;
		/* 82132E50h case   15:*/		return 0x82132E54;
		  /* 82132E54h */ case   16:  		/* rlwinm R7, R31, 1, 0, 30 */
		/* 82132E54h case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R31);
		/* 82132E54h case   16:*/		return 0x82132E58;
		  /* 82132E58h */ case   17:  		/* mr R11, R26 */
		/* 82132E58h case   17:*/		regs.R11 = regs.R26;
		/* 82132E58h case   17:*/		return 0x82132E5C;
		  /* 82132E5Ch */ case   18:  		/* rlwinm R9, R31, 2, 0, 29 */
		/* 82132E5Ch case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R31);
		/* 82132E5Ch case   18:*/		return 0x82132E60;
		  /* 82132E60h */ case   19:  		/* lwz R10, <#[R28 + 260]> */
		/* 82132E60h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000104) );
		/* 82132E60h case   19:*/		return 0x82132E64;
		  /* 82132E64h */ case   20:  		/* cmpwi CR6, R25, 0 */
		/* 82132E64h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82132E64h case   20:*/		return 0x82132E68;
		  /* 82132E68h */ case   21:  		/* lwz R6, <#[R30 + 16]> */
		/* 82132E68h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 82132E68h case   21:*/		return 0x82132E6C;
		  /* 82132E6Ch */ case   22:  		/* lwz R10, <#[R10 + 16]> */
		/* 82132E6Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82132E6Ch case   22:*/		return 0x82132E70;
		  /* 82132E70h */ case   23:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82132E70h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82132E70h case   23:*/		return 0x82132E74;
		  /* 82132E74h */ case   24:  		/* stwx R10, <#[R11 + R6]> */
		/* 82132E74h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82132E74h case   24:*/		return 0x82132E78;
		  /* 82132E78h */ case   25:  		/* addi R10, R1, 208 */
		/* 82132E78h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 82132E78h case   25:*/		return 0x82132E7C;
		  /* 82132E7Ch */ case   26:  		/* lwz R6, <#[R30 + 8]> */
		/* 82132E7Ch case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82132E7Ch case   26:*/		return 0x82132E80;
		  /* 82132E80h */ case   27:  		/* add R10, R11, R10 */
		/* 82132E80h case   27:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82132E80h case   27:*/		return 0x82132E84;
		  /* 82132E84h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 82132E84h case   28:*/		if ( regs.CR[6].eq ) { return 0x82132E98;  }
		/* 82132E84h case   28:*/		return 0x82132E88;
		  /* 82132E88h */ case   29:  		/* lwz R5, <#[R10]> */
		/* 82132E88h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 82132E88h case   29:*/		return 0x82132E8C;
		  /* 82132E8Ch */ case   30:  		/* stwx R5, <#[R11 + R6]> */
		/* 82132E8Ch case   30:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82132E8Ch case   30:*/		return 0x82132E90;
		  /* 82132E90h */ case   31:  		/* lwz R5, <#[R10 - 16]> */
		/* 82132E90h case   31:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0xFFFFFFF0) );
		/* 82132E90h case   31:*/		return 0x82132E94;
		  /* 82132E94h */ case   32:  		/* b 16 */
		/* 82132E94h case   32:*/		return 0x82132EA4;
		/* 82132E94h case   32:*/		return 0x82132E98;
	}
	return 0x82132E98;
} // Block from 82132E14h-82132E98h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82132E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132E98);
		  /* 82132E98h */ case    0:  		/* lwz R5, <#[R10 - 16]> */
		/* 82132E98h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0xFFFFFFF0) );
		/* 82132E98h case    0:*/		return 0x82132E9C;
		  /* 82132E9Ch */ case    1:  		/* stwx R5, <#[R11 + R6]> */
		/* 82132E9Ch case    1:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82132E9Ch case    1:*/		return 0x82132EA0;
		  /* 82132EA0h */ case    2:  		/* lwz R5, <#[R10]> */
		/* 82132EA0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 82132EA0h case    2:*/		return 0x82132EA4;
	}
	return 0x82132EA4;
} // Block from 82132E98h-82132EA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82132EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132EA4);
		  /* 82132EA4h */ case    0:  		/* lwz R6, <#[R30 + 8]> */
		/* 82132EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82132EA4h case    0:*/		return 0x82132EA8;
		  /* 82132EA8h */ case    1:  		/* addi R11, R11, 4 */
		/* 82132EA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82132EA8h case    1:*/		return 0x82132EAC;
		  /* 82132EACh */ case    2:  		/* stwx R5, <#[R9 + R6]> */
		/* 82132EACh case    2:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 82132EACh case    2:*/		return 0x82132EB0;
		  /* 82132EB0h */ case    3:  		/* add R6, R7, R8 */
		/* 82132EB0h case    3:*/		cpu::op::add<0>(regs,&regs.R6,regs.R7,regs.R8);
		/* 82132EB0h case    3:*/		return 0x82132EB4;
		  /* 82132EB4h */ case    4:  		/* lwz R5, <#[R30 + 8]> */
		/* 82132EB4h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		/* 82132EB4h case    4:*/		return 0x82132EB8;
		  /* 82132EB8h */ case    5:  		/* addi R8, R8, 1 */
		/* 82132EB8h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82132EB8h case    5:*/		return 0x82132EBC;
		  /* 82132EBCh */ case    6:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82132EBCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82132EBCh case    6:*/		return 0x82132EC0;
		  /* 82132EC0h */ case    7:  		/* lwz R10, <#[R10 + 16]> */
		/* 82132EC0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82132EC0h case    7:*/		return 0x82132EC4;
		  /* 82132EC4h */ case    8:  		/* addi R9, R9, 4 */
		/* 82132EC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82132EC4h case    8:*/		return 0x82132EC8;
		  /* 82132EC8h */ case    9:  		/* stwx R10, <#[R6 + R5]> */
		/* 82132EC8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 82132EC8h case    9:*/		return 0x82132ECC;
		  /* 82132ECCh */ case   10:  		/* bc 16, CR0_LT, -108 */
		/* 82132ECCh case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82132E60;  }
		/* 82132ECCh case   10:*/		return 0x82132ED0;
	}
	return 0x82132ED0;
} // Block from 82132EA4h-82132ED0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82132ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132ED0);
		  /* 82132ED0h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82132ED0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82132ED0h case    0:*/		return 0x82132ED4;
		  /* 82132ED4h */ case    1:  		/* li R5, 0 */
		/* 82132ED4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82132ED4h case    1:*/		return 0x82132ED8;
		  /* 82132ED8h */ case    2:  		/* mr R4, R30 */
		/* 82132ED8h case    2:*/		regs.R4 = regs.R30;
		/* 82132ED8h case    2:*/		return 0x82132EDC;
		  /* 82132EDCh */ case    3:  		/* mr R3, R28 */
		/* 82132EDCh case    3:*/		regs.R3 = regs.R28;
		/* 82132EDCh case    3:*/		return 0x82132EE0;
		  /* 82132EE0h */ case    4:  		/* lwz R11, <#[R11 + 32]> */
		/* 82132EE0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82132EE0h case    4:*/		return 0x82132EE4;
		  /* 82132EE4h */ case    5:  		/* mtspr CTR, R11 */
		/* 82132EE4h case    5:*/		regs.CTR = regs.R11;
		/* 82132EE4h case    5:*/		return 0x82132EE8;
		  /* 82132EE8h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82132EE8h case    6:*/		if ( 1 ) { regs.LR = 0x82132EEC; return (uint32)regs.CTR; }
		/* 82132EE8h case    6:*/		return 0x82132EEC;
		  /* 82132EECh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82132EECh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82132EECh case    7:*/		return 0x82132EF0;
		  /* 82132EF0h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 82132EF0h case    8:*/		if ( regs.CR[0].eq ) { return 0x82132EFC;  }
		/* 82132EF0h case    8:*/		return 0x82132EF4;
		  /* 82132EF4h */ case    9:  		/* li R29, 1 */
		/* 82132EF4h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82132EF4h case    9:*/		return 0x82132EF8;
		  /* 82132EF8h */ case   10:  		/* b 100 */
		/* 82132EF8h case   10:*/		return 0x82132F5C;
		/* 82132EF8h case   10:*/		return 0x82132EFC;
	}
	return 0x82132EFC;
} // Block from 82132ED0h-82132EFCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82132EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132EFC);
		  /* 82132EFCh */ case    0:  		/* lwz R10, <#[R1 + 96]> */
		/* 82132EFCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 82132EFCh case    0:*/		return 0x82132F00;
		  /* 82132F00h */ case    1:  		/* mr R11, R26 */
		/* 82132F00h case    1:*/		regs.R11 = regs.R26;
		/* 82132F00h case    1:*/		return 0x82132F04;
		  /* 82132F04h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82132F04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82132F04h case    2:*/		return 0x82132F08;
		  /* 82132F08h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82132F08h case    3:*/		if ( regs.CR[6].eq ) { return 0x82132F28;  }
		/* 82132F08h case    3:*/		return 0x82132F0C;
		  /* 82132F0Ch */ case    4:  		/* addi R10, R1, 124 */
		/* 82132F0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x7C);
		/* 82132F0Ch case    4:*/		return 0x82132F10;
		  /* 82132F10h */ case    5:  		/* lwzu R9, <#[R10 + 4]> */
		/* 82132F10h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82132F10h case    5:*/		return 0x82132F14;
		  /* 82132F14h */ case    6:  		/* addi R11, R11, 1 */
		/* 82132F14h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82132F14h case    6:*/		return 0x82132F18;
		  /* 82132F18h */ case    7:  		/* stw R26, <#[R9]> */
		/* 82132F18h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R9 + 0x00000000) );
		/* 82132F18h case    7:*/		return 0x82132F1C;
		  /* 82132F1Ch */ case    8:  		/* lwz R9, <#[R1 + 96]> */
		/* 82132F1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82132F1Ch case    8:*/		return 0x82132F20;
		  /* 82132F20h */ case    9:  		/* cmplw CR6, R11, R9 */
		/* 82132F20h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82132F20h case    9:*/		return 0x82132F24;
		  /* 82132F24h */ case   10:  		/* bc 12, CR6_LT, -20 */
		/* 82132F24h case   10:*/		if ( regs.CR[6].lt ) { return 0x82132F10;  }
		/* 82132F24h case   10:*/		return 0x82132F28;
	}
	return 0x82132F28;
} // Block from 82132EFCh-82132F28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82132F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132F28);
		  /* 82132F28h */ case    0:  		/* lwz R31, <#[R28 + 260]> */
		/* 82132F28h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000104) );
		/* 82132F28h case    0:*/		return 0x82132F2C;
		  /* 82132F2Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82132F2Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82132F2Ch case    1:*/		return 0x82132F30;
		  /* 82132F30h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82132F30h case    2:*/		if ( regs.CR[6].eq ) { return 0x82132F44;  }
		/* 82132F30h case    2:*/		return 0x82132F34;
		  /* 82132F34h */ case    3:  		/* mr R3, R31 */
		/* 82132F34h case    3:*/		regs.R3 = regs.R31;
		/* 82132F34h case    3:*/		return 0x82132F38;
		  /* 82132F38h */ case    4:  		/* bl 959624 */
		/* 82132F38h case    4:*/		regs.LR = 0x82132F3C; return 0x8221D3C0;
		/* 82132F38h case    4:*/		return 0x82132F3C;
		  /* 82132F3Ch */ case    5:  		/* mr R3, R31 */
		/* 82132F3Ch case    5:*/		regs.R3 = regs.R31;
		/* 82132F3Ch case    5:*/		return 0x82132F40;
		  /* 82132F40h */ case    6:  		/* bl -223568 */
		/* 82132F40h case    6:*/		regs.LR = 0x82132F44; return 0x820FC5F0;
		/* 82132F40h case    6:*/		return 0x82132F44;
	}
	return 0x82132F44;
} // Block from 82132F28h-82132F44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82132F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132F44);
		  /* 82132F44h */ case    0:  		/* lwz R11, <#[R28 + 256]> */
		/* 82132F44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000100) );
		/* 82132F44h case    0:*/		return 0x82132F48;
		  /* 82132F48h */ case    1:  		/* lwz R10, <#[R28 + 24]> */
		/* 82132F48h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 82132F48h case    1:*/		return 0x82132F4C;
		  /* 82132F4Ch */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132F4Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132F4Ch case    2:*/		return 0x82132F50;
		  /* 82132F50h */ case    3:  		/* stwx R30, <#[R11 + R10]> */
		/* 82132F50h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82132F50h case    3:*/		return 0x82132F54;
		  /* 82132F54h */ case    4:  		/* mr R30, R26 */
		/* 82132F54h case    4:*/		regs.R30 = regs.R26;
		/* 82132F54h case    4:*/		return 0x82132F58;
	}
	return 0x82132F58;
} // Block from 82132F44h-82132F58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82132F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132F58);
		  /* 82132F58h */ case    0:  		/* mr R29, R26 */
		/* 82132F58h case    0:*/		regs.R29 = regs.R26;
		/* 82132F58h case    0:*/		return 0x82132F5C;
	}
	return 0x82132F5C;
} // Block from 82132F58h-82132F5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82132F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132F5C);
		  /* 82132F5Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82132F5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82132F5Ch case    0:*/		return 0x82132F60;
		  /* 82132F60h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82132F60h case    1:*/		if ( regs.CR[6].eq ) { return 0x82132F74;  }
		/* 82132F60h case    1:*/		return 0x82132F64;
		  /* 82132F64h */ case    2:  		/* mr R3, R30 */
		/* 82132F64h case    2:*/		regs.R3 = regs.R30;
		/* 82132F64h case    2:*/		return 0x82132F68;
		  /* 82132F68h */ case    3:  		/* bl 959576 */
		/* 82132F68h case    3:*/		regs.LR = 0x82132F6C; return 0x8221D3C0;
		/* 82132F68h case    3:*/		return 0x82132F6C;
		  /* 82132F6Ch */ case    4:  		/* mr R3, R30 */
		/* 82132F6Ch case    4:*/		regs.R3 = regs.R30;
		/* 82132F6Ch case    4:*/		return 0x82132F70;
		  /* 82132F70h */ case    5:  		/* bl -223616 */
		/* 82132F70h case    5:*/		regs.LR = 0x82132F74; return 0x820FC5F0;
		/* 82132F70h case    5:*/		return 0x82132F74;
	}
	return 0x82132F74;
} // Block from 82132F5Ch-82132F74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82132F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132F74);
		  /* 82132F74h */ case    0:  		/* mr R3, R29 */
		/* 82132F74h case    0:*/		regs.R3 = regs.R29;
		/* 82132F74h case    0:*/		return 0x82132F78;
		  /* 82132F78h */ case    1:  		/* addi R1, R1, 416 */
		/* 82132F78h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 82132F78h case    1:*/		return 0x82132F7C;
		  /* 82132F7Ch */ case    2:  		/* b -662752 */
		/* 82132F7Ch case    2:*/		return 0x8209129C;
		/* 82132F7Ch case    2:*/		return 0x82132F80;
	}
	return 0x82132F80;
} // Block from 82132F74h-82132F80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82132F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132F80);
		  /* 82132F80h */ case    0:  		/* mfspr R12, LR */
		/* 82132F80h case    0:*/		regs.R12 = regs.LR;
		/* 82132F80h case    0:*/		return 0x82132F84;
		  /* 82132F84h */ case    1:  		/* bl -662824 */
		/* 82132F84h case    1:*/		regs.LR = 0x82132F88; return 0x8209125C;
		/* 82132F84h case    1:*/		return 0x82132F88;
		  /* 82132F88h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82132F88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82132F88h case    2:*/		return 0x82132F8C;
		  /* 82132F8Ch */ case    3:  		/* lwz R11, <#[R3 + 28]> */
		/* 82132F8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 82132F8Ch case    3:*/		return 0x82132F90;
		  /* 82132F90h */ case    4:  		/* mr R31, R3 */
		/* 82132F90h case    4:*/		regs.R31 = regs.R3;
		/* 82132F90h case    4:*/		return 0x82132F94;
		  /* 82132F94h */ case    5:  		/* mr R29, R4 */
		/* 82132F94h case    5:*/		regs.R29 = regs.R4;
		/* 82132F94h case    5:*/		return 0x82132F98;
		  /* 82132F98h */ case    6:  		/* rlwinm. R10, R11, 0, 29, 31 */
		/* 82132F98h case    6:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R10,regs.R11);
		/* 82132F98h case    6:*/		return 0x82132F9C;
		  /* 82132F9Ch */ case    7:  		/* bc 4, CR0_EQ, 76 */
		/* 82132F9Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x82132FE8;  }
		/* 82132F9Ch case    7:*/		return 0x82132FA0;
		  /* 82132FA0h */ case    8:  		/* addi R3, R11, 8 */
		/* 82132FA0h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x8);
		/* 82132FA0h case    8:*/		return 0x82132FA4;
		  /* 82132FA4h */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 82132FA4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82132FA4h case    9:*/		return 0x82132FA8;
		  /* 82132FA8h */ case   10:  		/* bc 4, CR6_LT, 16 */
		/* 82132FA8h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82132FB8;  }
		/* 82132FA8h case   10:*/		return 0x82132FAC;
		  /* 82132FACh */ case   11:  		/* lis R3, -32768 */
		/* 82132FACh case   11:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82132FACh case   11:*/		return 0x82132FB0;
		  /* 82132FB0h */ case   12:  		/* ori R3, R3, 16389 */
		/* 82132FB0h case   12:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82132FB0h case   12:*/		return 0x82132FB4;
		  /* 82132FB4h */ case   13:  		/* b 84 */
		/* 82132FB4h case   13:*/		return 0x82133008;
		/* 82132FB4h case   13:*/		return 0x82132FB8;
	}
	return 0x82132FB8;
} // Block from 82132F80h-82132FB8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82132FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132FB8);
		  /* 82132FB8h */ case    0:  		/* bl -223840 */
		/* 82132FB8h case    0:*/		regs.LR = 0x82132FBC; return 0x820FC558;
		/* 82132FB8h case    0:*/		return 0x82132FBC;
		  /* 82132FBCh */ case    1:  		/* or. R30, R3, R3 */
		/* 82132FBCh case    1:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82132FBCh case    1:*/		return 0x82132FC0;
		  /* 82132FC0h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82132FC0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82132FD0;  }
		/* 82132FC0h case    2:*/		return 0x82132FC4;
		  /* 82132FC4h */ case    3:  		/* lis R3, -32761 */
		/* 82132FC4h case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82132FC4h case    3:*/		return 0x82132FC8;
		  /* 82132FC8h */ case    4:  		/* ori R3, R3, 14 */
		/* 82132FC8h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82132FC8h case    4:*/		return 0x82132FCC;
		  /* 82132FCCh */ case    5:  		/* b 60 */
		/* 82132FCCh case    5:*/		return 0x82133008;
		/* 82132FCCh case    5:*/		return 0x82132FD0;
	}
	return 0x82132FD0;
} // Block from 82132FB8h-82132FD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82132FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132FD0);
		  /* 82132FD0h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 82132FD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82132FD0h case    0:*/		return 0x82132FD4;
		  /* 82132FD4h */ case    1:  		/* mr R3, R30 */
		/* 82132FD4h case    1:*/		regs.R3 = regs.R30;
		/* 82132FD4h case    1:*/		return 0x82132FD8;
		  /* 82132FD8h */ case    2:  		/* lwz R4, <#[R31 + 32]> */
		/* 82132FD8h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 82132FD8h case    2:*/		return 0x82132FDC;
		  /* 82132FDCh */ case    3:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82132FDCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82132FDCh case    3:*/		return 0x82132FE0;
		  /* 82132FE0h */ case    4:  		/* bl -661040 */
		/* 82132FE0h case    4:*/		regs.LR = 0x82132FE4; return 0x820919B0;
		/* 82132FE0h case    4:*/		return 0x82132FE4;
		  /* 82132FE4h */ case    5:  		/* stw R30, <#[R31 + 32]> */
		/* 82132FE4h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 82132FE4h case    5:*/		return 0x82132FE8;
	}
	return 0x82132FE8;
} // Block from 82132FD0h-82132FE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82132FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82132FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82132FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82132FE8);
		  /* 82132FE8h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 82132FE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82132FE8h case    0:*/		return 0x82132FEC;
		  /* 82132FECh */ case    1:  		/* li R3, 0 */
		/* 82132FECh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82132FECh case    1:*/		return 0x82132FF0;
		  /* 82132FF0h */ case    2:  		/* lwz R10, <#[R31 + 32]> */
		/* 82132FF0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82132FF0h case    2:*/		return 0x82132FF4;
		  /* 82132FF4h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82132FF4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82132FF4h case    3:*/		return 0x82132FF8;
		  /* 82132FF8h */ case    4:  		/* stwx R29, <#[R10 + R11]> */
		/* 82132FF8h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82132FF8h case    4:*/		return 0x82132FFC;
		  /* 82132FFCh */ case    5:  		/* lwz R11, <#[R31 + 28]> */
		/* 82132FFCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82132FFCh case    5:*/		return 0x82133000;
		  /* 82133000h */ case    6:  		/* addi R11, R11, 1 */
		/* 82133000h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82133000h case    6:*/		return 0x82133004;
		  /* 82133004h */ case    7:  		/* stw R11, <#[R31 + 28]> */
		/* 82133004h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82133004h case    7:*/		return 0x82133008;
	}
	return 0x82133008;
} // Block from 82132FE8h-82133008h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82133008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133008);
		  /* 82133008h */ case    0:  		/* addi R1, R1, 112 */
		/* 82133008h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82133008h case    0:*/		return 0x8213300C;
		  /* 8213300Ch */ case    1:  		/* b -662880 */
		/* 8213300Ch case    1:*/		return 0x820912AC;
		/* 8213300Ch case    1:*/		return 0x82133010;
	}
	return 0x82133010;
} // Block from 82133008h-82133010h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82133010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133010);
		  /* 82133010h */ case    0:  		/* mfspr R12, LR */
		/* 82133010h case    0:*/		regs.R12 = regs.LR;
		/* 82133010h case    0:*/		return 0x82133014;
		  /* 82133014h */ case    1:  		/* bl -663000 */
		/* 82133014h case    1:*/		regs.LR = 0x82133018; return 0x8209123C;
		/* 82133014h case    1:*/		return 0x82133018;
		  /* 82133018h */ case    2:  		/* stwu R1, <#[R1 - 1200]> */
		/* 82133018h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFB50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFB50);
		/* 82133018h case    2:*/		return 0x8213301C;
		  /* 8213301Ch */ case    3:  		/* li R23, 0 */
		/* 8213301Ch case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8213301Ch case    3:*/		return 0x82133020;
		  /* 82133020h */ case    4:  		/* mr R24, R3 */
		/* 82133020h case    4:*/		regs.R24 = regs.R3;
		/* 82133020h case    4:*/		return 0x82133024;
		  /* 82133024h */ case    5:  		/* mr R21, R4 */
		/* 82133024h case    5:*/		regs.R21 = regs.R4;
		/* 82133024h case    5:*/		return 0x82133028;
		  /* 82133028h */ case    6:  		/* mr R22, R5 */
		/* 82133028h case    6:*/		regs.R22 = regs.R5;
		/* 82133028h case    6:*/		return 0x8213302C;
		  /* 8213302Ch */ case    7:  		/* cmplwi CR6, R5, 0 */
		/* 8213302Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213302Ch case    7:*/		return 0x82133030;
		  /* 82133030h */ case    8:  		/* mr R8, R23 */
		/* 82133030h case    8:*/		regs.R8 = regs.R23;
		/* 82133030h case    8:*/		return 0x82133034;
		  /* 82133034h */ case    9:  		/* bc 12, CR6_EQ, 108 */
		/* 82133034h case    9:*/		if ( regs.CR[6].eq ) { return 0x821330A0;  }
		/* 82133034h case    9:*/		return 0x82133038;
		  /* 82133038h */ case   10:  		/* mr R7, R4 */
		/* 82133038h case   10:*/		regs.R7 = regs.R4;
		/* 82133038h case   10:*/		return 0x8213303C;
		  /* 8213303Ch */ case   11:  		/* lwz R11, <#[R7]> */
		/* 8213303Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8213303Ch case   11:*/		return 0x82133040;
		  /* 82133040h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82133040h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133040h case   12:*/		return 0x82133044;
		  /* 82133044h */ case   13:  		/* bc 12, CR6_EQ, 76 */
		/* 82133044h case   13:*/		if ( regs.CR[6].eq ) { return 0x82133090;  }
		/* 82133044h case   13:*/		return 0x82133048;
		  /* 82133048h */ case   14:  		/* lwz R10, <#[R11 + 12]> */
		/* 82133048h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82133048h case   14:*/		return 0x8213304C;
		  /* 8213304Ch */ case   15:  		/* mr R9, R23 */
		/* 8213304Ch case   15:*/		regs.R9 = regs.R23;
		/* 8213304Ch case   15:*/		return 0x82133050;
		  /* 82133050h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 82133050h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82133050h case   16:*/		return 0x82133054;
		  /* 82133054h */ case   17:  		/* bc 4, CR6_GT, 52 */
		/* 82133054h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82133088;  }
		/* 82133054h case   17:*/		return 0x82133058;
		  /* 82133058h */ case   18:  		/* mr R10, R23 */
		/* 82133058h case   18:*/		regs.R10 = regs.R23;
		/* 82133058h case   18:*/		return 0x8213305C;
		  /* 8213305Ch */ case   19:  		/* lwz R6, <#[R11 + 16]> */
		/* 8213305Ch case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 8213305Ch case   19:*/		return 0x82133060;
		  /* 82133060h */ case   20:  		/* addi R9, R9, 1 */
		/* 82133060h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82133060h case   20:*/		return 0x82133064;
		  /* 82133064h */ case   21:  		/* lwz R5, <#[R24 + 20]> */
		/* 82133064h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000014) );
		/* 82133064h case   21:*/		return 0x82133068;
		  /* 82133068h */ case   22:  		/* lwzx R6, <#[R6 + R10]> */
		/* 82133068h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82133068h case   22:*/		return 0x8213306C;
		  /* 8213306Ch */ case   23:  		/* addi R10, R10, 4 */
		/* 8213306Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213306Ch case   23:*/		return 0x82133070;
		  /* 82133070h */ case   24:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82133070h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82133070h case   24:*/		return 0x82133074;
		  /* 82133074h */ case   25:  		/* lwzx R6, <#[R6 + R5]> */
		/* 82133074h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 82133074h case   25:*/		return 0x82133078;
		  /* 82133078h */ case   26:  		/* stw R8, <#[R6 + 72]> */
		/* 82133078h case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000048) );
		/* 82133078h case   26:*/		return 0x8213307C;
		  /* 8213307Ch */ case   27:  		/* lwz R6, <#[R11 + 12]> */
		/* 8213307Ch case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213307Ch case   27:*/		return 0x82133080;
		  /* 82133080h */ case   28:  		/* cmplw CR6, R9, R6 */
		/* 82133080h case   28:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 82133080h case   28:*/		return 0x82133084;
		  /* 82133084h */ case   29:  		/* bc 12, CR6_LT, -40 */
		/* 82133084h case   29:*/		if ( regs.CR[6].lt ) { return 0x8213305C;  }
		/* 82133084h case   29:*/		return 0x82133088;
	}
	return 0x82133088;
} // Block from 82133010h-82133088h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82133088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133088);
		  /* 82133088h */ case    0:  		/* stw R23, <#[R11 + 28]> */
		/* 82133088h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000001C) );
		/* 82133088h case    0:*/		return 0x8213308C;
		  /* 8213308Ch */ case    1:  		/* stw R23, <#[R11 + 20]> */
		/* 8213308Ch case    1:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000014) );
		/* 8213308Ch case    1:*/		return 0x82133090;
	}
	return 0x82133090;
} // Block from 82133088h-82133090h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82133090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133090);
		  /* 82133090h */ case    0:  		/* addi R8, R8, 1 */
		/* 82133090h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82133090h case    0:*/		return 0x82133094;
		  /* 82133094h */ case    1:  		/* addi R7, R7, 4 */
		/* 82133094h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82133094h case    1:*/		return 0x82133098;
		  /* 82133098h */ case    2:  		/* cmplw CR6, R8, R22 */
		/* 82133098h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R22);
		/* 82133098h case    2:*/		return 0x8213309C;
		  /* 8213309Ch */ case    3:  		/* bc 12, CR6_LT, -96 */
		/* 8213309Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8213303C;  }
		/* 8213309Ch case    3:*/		return 0x821330A0;
	}
	return 0x821330A0;
} // Block from 82133090h-821330A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821330A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821330A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821330A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821330A0);
		  /* 821330A0h */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821330A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821330A0h case    0:*/		return 0x821330A4;
		  /* 821330A4h */ case    1:  		/* mr R7, R23 */
		/* 821330A4h case    1:*/		regs.R7 = regs.R23;
		/* 821330A4h case    1:*/		return 0x821330A8;
		  /* 821330A8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821330A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821330A8h case    2:*/		return 0x821330AC;
		  /* 821330ACh */ case    3:  		/* bc 4, CR6_GT, 64 */
		/* 821330ACh case    3:*/		if ( !regs.CR[6].gt ) { return 0x821330EC;  }
		/* 821330ACh case    3:*/		return 0x821330B0;
		  /* 821330B0h */ case    4:  		/* mr R8, R23 */
		/* 821330B0h case    4:*/		regs.R8 = regs.R23;
		/* 821330B0h case    4:*/		return 0x821330B4;
		  /* 821330B4h */ case    5:  		/* lwz R11, <#[R24 + 20]> */
		/* 821330B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821330B4h case    5:*/		return 0x821330B8;
		  /* 821330B8h */ case    6:  		/* lwzx R10, <#[R8 + R11]> */
		/* 821330B8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821330B8h case    6:*/		return 0x821330BC;
		  /* 821330BCh */ case    7:  		/* lwz R9, <#[R10 + 56]> */
		/* 821330BCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000038) );
		/* 821330BCh case    7:*/		return 0x821330C0;
		  /* 821330C0h */ case    8:  		/* cmpwi CR6, R9, -1 */
		/* 821330C0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 821330C0h case    8:*/		return 0x821330C4;
		  /* 821330C4h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821330C4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821330D8;  }
		/* 821330C4h case    9:*/		return 0x821330C8;
		  /* 821330C8h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821330C8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821330C8h case   10:*/		return 0x821330CC;
		  /* 821330CCh */ case   11:  		/* lwzx R11, <#[R9 + R11]> */
		/* 821330CCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821330CCh case   11:*/		return 0x821330D0;
		  /* 821330D0h */ case   12:  		/* lwz R11, <#[R11 + 72]> */
		/* 821330D0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 821330D0h case   12:*/		return 0x821330D4;
		  /* 821330D4h */ case   13:  		/* stw R11, <#[R10 + 72]> */
		/* 821330D4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000048) );
		/* 821330D4h case   13:*/		return 0x821330D8;
	}
	return 0x821330D8;
} // Block from 821330A0h-821330D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821330D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821330D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821330D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821330D8);
		  /* 821330D8h */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821330D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821330D8h case    0:*/		return 0x821330DC;
		  /* 821330DCh */ case    1:  		/* addi R7, R7, 1 */
		/* 821330DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821330DCh case    1:*/		return 0x821330E0;
		  /* 821330E0h */ case    2:  		/* addi R8, R8, 4 */
		/* 821330E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821330E0h case    2:*/		return 0x821330E4;
		  /* 821330E4h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 821330E4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 821330E4h case    3:*/		return 0x821330E8;
		  /* 821330E8h */ case    4:  		/* bc 12, CR6_LT, -52 */
		/* 821330E8h case    4:*/		if ( regs.CR[6].lt ) { return 0x821330B4;  }
		/* 821330E8h case    4:*/		return 0x821330EC;
	}
	return 0x821330EC;
} // Block from 821330D8h-821330ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821330ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821330EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821330EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821330EC);
		  /* 821330ECh */ case    0:  		/* mr R26, R23 */
		/* 821330ECh case    0:*/		regs.R26 = regs.R23;
		/* 821330ECh case    0:*/		return 0x821330F0;
		  /* 821330F0h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 821330F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821330F0h case    1:*/		return 0x821330F4;
		  /* 821330F4h */ case    2:  		/* bc 12, CR6_EQ, 240 */
		/* 821330F4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821331E4;  }
		/* 821330F4h case    2:*/		return 0x821330F8;
		  /* 821330F8h */ case    3:  		/* mr R25, R21 */
		/* 821330F8h case    3:*/		regs.R25 = regs.R21;
		/* 821330F8h case    3:*/		return 0x821330FC;
		  /* 821330FCh */ case    4:  		/* lwz R30, <#[R25]> */
		/* 821330FCh case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 821330FCh case    4:*/		return 0x82133100;
		  /* 82133100h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 82133100h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82133100h case    5:*/		return 0x82133104;
		  /* 82133104h */ case    6:  		/* bc 12, CR6_EQ, 208 */
		/* 82133104h case    6:*/		if ( regs.CR[6].eq ) { return 0x821331D4;  }
		/* 82133104h case    6:*/		return 0x82133108;
		  /* 82133108h */ case    7:  		/* lwz R11, <#[R30 + 4]> */
		/* 82133108h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82133108h case    7:*/		return 0x8213310C;
		  /* 8213310Ch */ case    8:  		/* mr R31, R23 */
		/* 8213310Ch case    8:*/		regs.R31 = regs.R23;
		/* 8213310Ch case    8:*/		return 0x82133110;
		  /* 82133110h */ case    9:  		/* mr R27, R23 */
		/* 82133110h case    9:*/		regs.R27 = regs.R23;
		/* 82133110h case    9:*/		return 0x82133114;
		  /* 82133114h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82133114h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133114h case   10:*/		return 0x82133118;
		  /* 82133118h */ case   11:  		/* bc 4, CR6_GT, 152 */
		/* 82133118h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821331B0;  }
		/* 82133118h case   11:*/		return 0x8213311C;
		  /* 8213311Ch */ case   12:  		/* addi R11, R1, 80 */
		/* 8213311Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213311Ch case   12:*/		return 0x82133120;
		  /* 82133120h */ case   13:  		/* mr R29, R23 */
		/* 82133120h case   13:*/		regs.R29 = regs.R23;
		/* 82133120h case   13:*/		return 0x82133124;
		  /* 82133124h */ case   14:  		/* addi R28, R11, -4 */
		/* 82133124h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 82133124h case   14:*/		return 0x82133128;
		  /* 82133128h */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 82133128h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82133128h case   15:*/		return 0x8213312C;
		  /* 8213312Ch */ case   16:  		/* lwz R10, <#[R24 + 20]> */
		/* 8213312Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000014) );
		/* 8213312Ch case   16:*/		return 0x82133130;
		  /* 82133130h */ case   17:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82133130h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82133130h case   17:*/		return 0x82133134;
		  /* 82133134h */ case   18:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133134h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133134h case   18:*/		return 0x82133138;
		  /* 82133138h */ case   19:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82133138h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82133138h case   19:*/		return 0x8213313C;
		  /* 8213313Ch */ case   20:  		/* lwz R9, <#[R11 + 72]> */
		/* 8213313Ch case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000048) );
		/* 8213313Ch case   20:*/		return 0x82133140;
		  /* 82133140h */ case   21:  		/* cmpwi CR6, R9, -1 */
		/* 82133140h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 82133140h case   21:*/		return 0x82133144;
		  /* 82133144h */ case   22:  		/* bc 12, CR6_EQ, 88 */
		/* 82133144h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213319C;  }
		/* 82133144h case   22:*/		return 0x82133148;
		  /* 82133148h */ case   23:  		/* mr R11, R23 */
		/* 82133148h case   23:*/		regs.R11 = regs.R23;
		/* 82133148h case   23:*/		return 0x8213314C;
		  /* 8213314Ch */ case   24:  		/* cmplwi CR6, R31, 0 */
		/* 8213314Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213314Ch case   24:*/		return 0x82133150;
		  /* 82133150h */ case   25:  		/* bc 12, CR6_EQ, 36 */
		/* 82133150h case   25:*/		if ( regs.CR[6].eq ) { return 0x82133174;  }
		/* 82133150h case   25:*/		return 0x82133154;
		  /* 82133154h */ case   26:  		/* addi R10, R1, 80 */
		/* 82133154h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82133154h case   26:*/		return 0x82133158;
		  /* 82133158h */ case   27:  		/* lwz R8, <#[R10]> */
		/* 82133158h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82133158h case   27:*/		return 0x8213315C;
		  /* 8213315Ch */ case   28:  		/* cmplw CR6, R8, R9 */
		/* 8213315Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8213315Ch case   28:*/		return 0x82133160;
	}
	return 0x82133160;
} // Block from 821330ECh-82133160h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82133160h
// Function '?ValidateInstructions@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133160);
		  /* 82133160h */ case    0:  		/* bc 12, CR6_EQ, 20 */
		/* 82133160h case    0:*/		if ( regs.CR[6].eq ) { return 0x82133174;  }
		/* 82133160h case    0:*/		return 0x82133164;
		  /* 82133164h */ case    1:  		/* addi R11, R11, 1 */
		/* 82133164h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82133164h case    1:*/		return 0x82133168;
		  /* 82133168h */ case    2:  		/* addi R10, R10, 4 */
		/* 82133168h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82133168h case    2:*/		return 0x8213316C;
		  /* 8213316Ch */ case    3:  		/* cmplw CR6, R11, R31 */
		/* 8213316Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8213316Ch case    3:*/		return 0x82133170;
		  /* 82133170h */ case    4:  		/* bc 12, CR6_LT, -24 */
		/* 82133170h case    4:*/		if ( regs.CR[6].lt ) { return 0x82133158;  }
		/* 82133170h case    4:*/		return 0x82133174;
	}
	return 0x82133174;
} // Block from 82133160h-82133174h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82133174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133174);
		  /* 82133174h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 82133174h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82133174h case    0:*/		return 0x82133178;
		  /* 82133178h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82133178h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82133184;  }
		/* 82133178h case    1:*/		return 0x8213317C;
		  /* 8213317Ch */ case    2:  		/* stwu R9, <#[R28 + 4]> */
		/* 8213317Ch case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 8213317Ch case    2:*/		return 0x82133180;
		  /* 82133180h */ case    3:  		/* addi R31, R31, 1 */
		/* 82133180h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82133180h case    3:*/		return 0x82133184;
	}
	return 0x82133184;
} // Block from 82133174h-82133184h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82133184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133184);
		  /* 82133184h */ case    0:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 82133184h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 82133184h case    0:*/		return 0x82133188;
		  /* 82133188h */ case    1:  		/* mr R4, R26 */
		/* 82133188h case    1:*/		regs.R4 = regs.R26;
		/* 82133188h case    1:*/		return 0x8213318C;
		  /* 8213318Ch */ case    2:  		/* lwzx R3, <#[R11 + R21]> */
		/* 8213318Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 8213318Ch case    2:*/		return 0x82133190;
		  /* 82133190h */ case    3:  		/* bl -528 */
		/* 82133190h case    3:*/		regs.LR = 0x82133194; return 0x82132F80;
		/* 82133190h case    3:*/		return 0x82133194;
		  /* 82133194h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82133194h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82133194h case    4:*/		return 0x82133198;
		  /* 82133198h */ case    5:  		/* bc 12, CR0_LT, 80 */
		/* 82133198h case    5:*/		if ( regs.CR[0].lt ) { return 0x821331E8;  }
		/* 82133198h case    5:*/		return 0x8213319C;
	}
	return 0x8213319C;
} // Block from 82133184h-8213319Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213319Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213319C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213319C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213319C);
		  /* 8213319Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8213319Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8213319Ch case    0:*/		return 0x821331A0;
		  /* 821331A0h */ case    1:  		/* addi R27, R27, 1 */
		/* 821331A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821331A0h case    1:*/		return 0x821331A4;
		  /* 821331A4h */ case    2:  		/* addi R29, R29, 4 */
		/* 821331A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821331A4h case    2:*/		return 0x821331A8;
		  /* 821331A8h */ case    3:  		/* cmplw CR6, R27, R11 */
		/* 821331A8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821331A8h case    3:*/		return 0x821331AC;
		  /* 821331ACh */ case    4:  		/* bc 12, CR6_LT, -132 */
		/* 821331ACh case    4:*/		if ( regs.CR[6].lt ) { return 0x82133128;  }
		/* 821331ACh case    4:*/		return 0x821331B0;
	}
	return 0x821331B0;
} // Block from 8213319Ch-821331B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821331B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821331B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821331B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821331B0);
		  /* 821331B0h */ case    0:  		/* mr R3, R31 */
		/* 821331B0h case    0:*/		regs.R3 = regs.R31;
		/* 821331B0h case    0:*/		return 0x821331B4;
		  /* 821331B4h */ case    1:  		/* bl -224348 */
		/* 821331B4h case    1:*/		regs.LR = 0x821331B8; return 0x820FC558;
		/* 821331B4h case    1:*/		return 0x821331B8;
		  /* 821331B8h */ case    2:  		/* stw R3, <#[R30 + 24]> */
		/* 821331B8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 821331B8h case    2:*/		return 0x821331BC;
		  /* 821331BCh */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 821331BCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821331BCh case    3:*/		return 0x821331C0;
		  /* 821331C0h */ case    4:  		/* bc 12, CR0_EQ, 48 */
		/* 821331C0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821331F0;  }
		/* 821331C0h case    4:*/		return 0x821331C4;
		  /* 821331C4h */ case    5:  		/* rlwinm R5, R31, 2, 0, 29 */
		/* 821331C4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R31);
		/* 821331C4h case    5:*/		return 0x821331C8;
		  /* 821331C8h */ case    6:  		/* addi R4, R1, 80 */
		/* 821331C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821331C8h case    6:*/		return 0x821331CC;
		  /* 821331CCh */ case    7:  		/* bl -661532 */
		/* 821331CCh case    7:*/		regs.LR = 0x821331D0; return 0x820919B0;
		/* 821331CCh case    7:*/		return 0x821331D0;
		  /* 821331D0h */ case    8:  		/* stw R31, <#[R30 + 20]> */
		/* 821331D0h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000014) );
		/* 821331D0h case    8:*/		return 0x821331D4;
	}
	return 0x821331D4;
} // Block from 821331B0h-821331D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821331D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821331D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821331D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821331D4);
		  /* 821331D4h */ case    0:  		/* addi R26, R26, 1 */
		/* 821331D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821331D4h case    0:*/		return 0x821331D8;
		  /* 821331D8h */ case    1:  		/* addi R25, R25, 4 */
		/* 821331D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821331D8h case    1:*/		return 0x821331DC;
		  /* 821331DCh */ case    2:  		/* cmplw CR6, R26, R22 */
		/* 821331DCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R22);
		/* 821331DCh case    2:*/		return 0x821331E0;
		  /* 821331E0h */ case    3:  		/* bc 12, CR6_LT, -228 */
		/* 821331E0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821330FC;  }
		/* 821331E0h case    3:*/		return 0x821331E4;
	}
	return 0x821331E4;
} // Block from 821331D4h-821331E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821331E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821331E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821331E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821331E4);
		  /* 821331E4h */ case    0:  		/* mr R3, R23 */
		/* 821331E4h case    0:*/		regs.R3 = regs.R23;
		/* 821331E4h case    0:*/		return 0x821331E8;
	}
	return 0x821331E8;
} // Block from 821331E4h-821331E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821331E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821331E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821331E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821331E8);
		  /* 821331E8h */ case    0:  		/* addi R1, R1, 1200 */
		/* 821331E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x4B0);
		/* 821331E8h case    0:*/		return 0x821331EC;
		  /* 821331ECh */ case    1:  		/* b -663392 */
		/* 821331ECh case    1:*/		return 0x8209128C;
		/* 821331ECh case    1:*/		return 0x821331F0;
	}
	return 0x821331F0;
} // Block from 821331E8h-821331F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821331F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821331F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821331F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821331F0);
		  /* 821331F0h */ case    0:  		/* lis R3, -32761 */
		/* 821331F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 821331F0h case    0:*/		return 0x821331F4;
		  /* 821331F4h */ case    1:  		/* ori R3, R3, 14 */
		/* 821331F4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 821331F4h case    1:*/		return 0x821331F8;
		  /* 821331F8h */ case    2:  		/* b -16 */
		/* 821331F8h case    2:*/		return 0x821331E8;
		/* 821331F8h case    2:*/		return 0x821331FC;
		  /* 821331FCh */ case    3:  		/* nop */
		/* 821331FCh case    3:*/		cpu::op::nop();
		/* 821331FCh case    3:*/		return 0x82133200;
	}
	return 0x82133200;
} // Block from 821331F0h-82133200h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82133200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133200);
		  /* 82133200h */ case    0:  		/* mfspr R12, LR */
		/* 82133200h case    0:*/		regs.R12 = regs.LR;
		/* 82133200h case    0:*/		return 0x82133204;
		  /* 82133204h */ case    1:  		/* bl -663508 */
		/* 82133204h case    1:*/		regs.LR = 0x82133208; return 0x82091230;
		/* 82133204h case    1:*/		return 0x82133208;
		  /* 82133208h */ case    2:  		/* stfd FR31, <#[R1 - 128]> */
		/* 82133208h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 82133208h case    2:*/		return 0x8213320C;
		  /* 8213320Ch */ case    3:  		/* stwu R1, <#[R1 - 208]> */
		/* 8213320Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8213320Ch case    3:*/		return 0x82133210;
		  /* 82133210h */ case    4:  		/* mr R27, R3 */
		/* 82133210h case    4:*/		regs.R27 = regs.R3;
		/* 82133210h case    4:*/		return 0x82133214;
		  /* 82133214h */ case    5:  		/* mr R23, R5 */
		/* 82133214h case    5:*/		regs.R23 = regs.R5;
		/* 82133214h case    5:*/		return 0x82133218;
		  /* 82133218h */ case    6:  		/* mr R19, R6 */
		/* 82133218h case    6:*/		regs.R19 = regs.R6;
		/* 82133218h case    6:*/		return 0x8213321C;
		  /* 8213321Ch */ case    7:  		/* mr R18, R7 */
		/* 8213321Ch case    7:*/		regs.R18 = regs.R7;
		/* 8213321Ch case    7:*/		return 0x82133220;
		  /* 82133220h */ case    8:  		/* mr R24, R8 */
		/* 82133220h case    8:*/		regs.R24 = regs.R8;
		/* 82133220h case    8:*/		return 0x82133224;
		  /* 82133224h */ case    9:  		/* mr R26, R9 */
		/* 82133224h case    9:*/		regs.R26 = regs.R9;
		/* 82133224h case    9:*/		return 0x82133228;
		  /* 82133228h */ case   10:  		/* li R22, 0 */
		/* 82133228h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82133228h case   10:*/		return 0x8213322C;
		  /* 8213322Ch */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 8213322Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213322Ch case   11:*/		return 0x82133230;
		  /* 82133230h */ case   12:  		/* bc 12, CR6_EQ, 348 */
		/* 82133230h case   12:*/		if ( regs.CR[6].eq ) { return 0x8213338C;  }
		/* 82133230h case   12:*/		return 0x82133234;
		  /* 82133234h */ case   13:  		/* lis R11, -32256 */
		/* 82133234h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82133234h case   13:*/		return 0x82133238;
		  /* 82133238h */ case   14:  		/* mr R21, R4 */
		/* 82133238h case   14:*/		regs.R21 = regs.R4;
		/* 82133238h case   14:*/		return 0x8213323C;
		  /* 8213323Ch */ case   15:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8213323Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8213323Ch case   15:*/		return 0x82133240;
		  /* 82133240h */ case   16:  		/* lwz R28, <#[R21]> */
		/* 82133240h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R21 + 0x00000000) );
		/* 82133240h case   16:*/		return 0x82133244;
		  /* 82133244h */ case   17:  		/* cmplwi CR6, R28, 0 */
		/* 82133244h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82133244h case   17:*/		return 0x82133248;
		  /* 82133248h */ case   18:  		/* bc 12, CR6_EQ, 308 */
		/* 82133248h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213337C;  }
		/* 82133248h case   18:*/		return 0x8213324C;
		  /* 8213324Ch */ case   19:  		/* lwz R11, <#[R28]> */
		/* 8213324Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213324Ch case   19:*/		return 0x82133250;
		  /* 82133250h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 82133250h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133250h case   20:*/		return 0x82133254;
		  /* 82133254h */ case   21:  		/* bc 12, CR6_EQ, 296 */
		/* 82133254h case   21:*/		if ( regs.CR[6].eq ) { return 0x8213337C;  }
		/* 82133254h case   21:*/		return 0x82133258;
		  /* 82133258h */ case   22:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 82133258h case   22:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 82133258h case   22:*/		return 0x8213325C;
		  /* 8213325Ch */ case   23:  		/* mr R3, R10 */
		/* 8213325Ch case   23:*/		regs.R3 = regs.R10;
		/* 8213325Ch case   23:*/		return 0x82133260;
		  /* 82133260h */ case   24:  		/* bl -15104 */
		/* 82133260h case   24:*/		regs.LR = 0x82133264; return 0x8212F760;
		/* 82133260h case   24:*/		return 0x82133264;
		  /* 82133264h */ case   25:  		/* lis R11, 4352 */
		/* 82133264h case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0x1100);
		/* 82133264h case   25:*/		return 0x82133268;
		  /* 82133268h */ case   26:  		/* mr R20, R3 */
		/* 82133268h case   26:*/		regs.R20 = regs.R3;
		/* 82133268h case   26:*/		return 0x8213326C;
		  /* 8213326Ch */ case   27:  		/* cmplw CR6, R10, R11 */
		/* 8213326Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213326Ch case   27:*/		return 0x82133270;
		  /* 82133270h */ case   28:  		/* bc 4, CR6_EQ, 8 */
		/* 82133270h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82133278;  }
		/* 82133270h case   28:*/		return 0x82133274;
		  /* 82133274h */ case   29:  		/* li R20, 1 */
		/* 82133274h case   29:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 82133274h case   29:*/		return 0x82133278;
	}
	return 0x82133278;
} // Block from 82133200h-82133278h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82133278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133278);
		  /* 82133278h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82133278h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82133278h case    0:*/		return 0x8213327C;
		  /* 8213327Ch */ case    1:  		/* li R25, 0 */
		/* 8213327Ch case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8213327Ch case    1:*/		return 0x82133280;
		  /* 82133280h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82133280h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133280h case    2:*/		return 0x82133284;
		  /* 82133284h */ case    3:  		/* bc 4, CR6_GT, 248 */
		/* 82133284h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213337C;  }
		/* 82133284h case    3:*/		return 0x82133288;
		  /* 82133288h */ case    4:  		/* li R29, 0 */
		/* 82133288h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82133288h case    4:*/		return 0x8213328C;
		  /* 8213328Ch */ case    5:  		/* lwz R11, <#[R28 + 8]> */
		/* 8213328Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8213328Ch case    5:*/		return 0x82133290;
		  /* 82133290h */ case    6:  		/* lwz R10, <#[R27 + 20]> */
		/* 82133290h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 82133290h case    6:*/		return 0x82133294;
		  /* 82133294h */ case    7:  		/* lwz R9, <#[R27 + 128]> */
		/* 82133294h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000080) );
		/* 82133294h case    7:*/		return 0x82133298;
		  /* 82133298h */ case    8:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82133298h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82133298h case    8:*/		return 0x8213329C;
		  /* 8213329Ch */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213329Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213329Ch case    9:*/		return 0x821332A0;
		  /* 821332A0h */ case   10:  		/* lwzx R31, <#[R11 + R10]> */
		/* 821332A0h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821332A0h case   10:*/		return 0x821332A4;
		  /* 821332A4h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 821332A4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821332A4h case   11:*/		return 0x821332A8;
		  /* 821332A8h */ case   12:  		/* cmplw CR6, R11, R9 */
		/* 821332A8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821332A8h case   12:*/		return 0x821332AC;
		  /* 821332ACh */ case   13:  		/* bc 4, CR6_EQ, 188 */
		/* 821332ACh case   13:*/		if ( !regs.CR[6].eq ) { return 0x82133368;  }
		/* 821332ACh case   13:*/		return 0x821332B0;
		  /* 821332B0h */ case   14:  		/* lbz R11, <#[R31 + 111]> */
		/* 821332B0h case   14:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006F) );
		/* 821332B0h case   14:*/		return 0x821332B4;
		  /* 821332B4h */ case   15:  		/* cmplw CR6, R11, R19 */
		/* 821332B4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821332B4h case   15:*/		return 0x821332B8;
		  /* 821332B8h */ case   16:  		/* bc 4, CR6_EQ, 176 */
		/* 821332B8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82133368;  }
		/* 821332B8h case   16:*/		return 0x821332BC;
		  /* 821332BCh */ case   17:  		/* lbz R11, <#[R31 + 110]> */
		/* 821332BCh case   17:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006E) );
		/* 821332BCh case   17:*/		return 0x821332C0;
		  /* 821332C0h */ case   18:  		/* cmplw CR6, R18, R11 */
		/* 821332C0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 821332C0h case   18:*/		return 0x821332C4;
		  /* 821332C4h */ case   19:  		/* bc 4, CR6_EQ, 164 */
		/* 821332C4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82133368;  }
		/* 821332C4h case   19:*/		return 0x821332C8;
		  /* 821332C8h */ case   20:  		/* cmpwi CR6, R20, 0 */
		/* 821332C8h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 821332C8h case   20:*/		return 0x821332CC;
		  /* 821332CCh */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 821332CCh case   21:*/		if ( regs.CR[6].eq ) { return 0x821332DC;  }
		/* 821332CCh case   21:*/		return 0x821332D0;
		  /* 821332D0h */ case   22:  		/* lwz R11, <#[R31 + 60]> */
		/* 821332D0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821332D0h case   22:*/		return 0x821332D4;
		  /* 821332D4h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821332D4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821332D4h case   23:*/		return 0x821332D8;
		  /* 821332D8h */ case   24:  		/* bc 12, CR6_EQ, 144 */
		/* 821332D8h case   24:*/		if ( regs.CR[6].eq ) { return 0x82133368;  }
		/* 821332D8h case   24:*/		return 0x821332DC;
	}
	return 0x821332DC;
} // Block from 82133278h-821332DCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821332DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821332DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821332DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821332DC);
		  /* 821332DCh */ case    0:  		/* li R30, 0 */
		/* 821332DCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821332DCh case    0:*/		return 0x821332E0;
		  /* 821332E0h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 821332E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821332E0h case    1:*/		return 0x821332E4;
		  /* 821332E4h */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 821332E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82133360;  }
		/* 821332E4h case    2:*/		return 0x821332E8;
		  /* 821332E8h */ case    3:  		/* lwz R6, <#[R31 + 16]> */
		/* 821332E8h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 821332E8h case    3:*/		return 0x821332EC;
		  /* 821332ECh */ case    4:  		/* mr R11, R26 */
		/* 821332ECh case    4:*/		regs.R11 = regs.R26;
		/* 821332ECh case    4:*/		return 0x821332F0;
		  /* 821332F0h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 821332F0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821332F0h case    5:*/		return 0x821332F4;
		  /* 821332F4h */ case    6:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821332F4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821332F4h case    6:*/		return 0x821332F8;
		  /* 821332F8h */ case    7:  		/* lwzx R9, <#[R9 + R10]> */
		/* 821332F8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821332F8h case    7:*/		return 0x821332FC;
		  /* 821332FCh */ case    8:  		/* lwz R9, <#[R9 + 16]> */
		/* 821332FCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 821332FCh case    8:*/		return 0x82133300;
		  /* 82133300h */ case    9:  		/* cmplw CR6, R6, R9 */
		/* 82133300h case    9:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 82133300h case    9:*/		return 0x82133304;
		  /* 82133304h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82133304h case   10:*/		if ( regs.CR[6].eq ) { return 0x8213331C;  }
		/* 82133304h case   10:*/		return 0x82133308;
		  /* 82133308h */ case   11:  		/* addi R30, R30, 1 */
		/* 82133308h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82133308h case   11:*/		return 0x8213330C;
		  /* 8213330Ch */ case   12:  		/* addi R11, R11, 4 */
		/* 8213330Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213330Ch case   12:*/		return 0x82133310;
		  /* 82133310h */ case   13:  		/* cmplw CR6, R30, R24 */
		/* 82133310h case   13:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 82133310h case   13:*/		return 0x82133314;
		  /* 82133314h */ case   14:  		/* bc 12, CR6_LT, -36 */
		/* 82133314h case   14:*/		if ( regs.CR[6].lt ) { return 0x821332F0;  }
		/* 82133314h case   14:*/		return 0x82133318;
		  /* 82133318h */ case   15:  		/* b 72 */
		/* 82133318h case   15:*/		return 0x82133360;
		/* 82133318h case   15:*/		return 0x8213331C;
	}
	return 0x8213331C;
} // Block from 821332DCh-8213331Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213331Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213331C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213331C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213331C);
		  /* 8213331Ch */ case    0:  		/* li R5, 0 */
		/* 8213331Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213331Ch case    0:*/		return 0x82133320;
		  /* 82133320h */ case    1:  		/* lwz R4, <#[R27 + 136]> */
		/* 82133320h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000088) );
		/* 82133320h case    1:*/		return 0x82133324;
		  /* 82133324h */ case    2:  		/* mr R3, R27 */
		/* 82133324h case    2:*/		regs.R3 = regs.R27;
		/* 82133324h case    2:*/		return 0x82133328;
		  /* 82133328h */ case    3:  		/* fmr FR1, FR31 */
		/* 82133328h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82133328h case    3:*/		return 0x8213332C;
		  /* 8213332Ch */ case    4:  		/* bl -221444 */
		/* 8213332Ch case    4:*/		regs.LR = 0x82133330; return 0x820FD228;
		/* 8213332Ch case    4:*/		return 0x82133330;
		  /* 82133330h */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 82133330h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82133330h case    5:*/		return 0x82133334;
		  /* 82133334h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 82133334h case    6:*/		if ( regs.CR[6].eq ) { return 0x8213339C;  }
		/* 82133334h case    6:*/		return 0x82133338;
		  /* 82133338h */ case    7:  		/* lwz R11, <#[R27 + 20]> */
		/* 82133338h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82133338h case    7:*/		return 0x8213333C;
		  /* 8213333Ch */ case    8:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213333Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213333Ch case    8:*/		return 0x82133340;
		  /* 82133340h */ case    9:  		/* lwz R9, <#[R31 + 60]> */
		/* 82133340h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82133340h case    9:*/		return 0x82133344;
		  /* 82133344h */ case   10:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 82133344h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 82133344h case   10:*/		return 0x82133348;
		  /* 82133348h */ case   11:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82133348h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133348h case   11:*/		return 0x8213334C;
		  /* 8213334Ch */ case   12:  		/* stw R9, <#[R11 + 60]> */
		/* 8213334Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213334Ch case   12:*/		return 0x82133350;
		  /* 82133350h */ case   13:  		/* lwzx R10, <#[R8 + R26]> */
		/* 82133350h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R26 + 0x00000000) );
		/* 82133350h case   13:*/		return 0x82133354;
		  /* 82133354h */ case   14:  		/* stw R10, <#[R11 + 56]> */
		/* 82133354h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 82133354h case   14:*/		return 0x82133358;
		  /* 82133358h */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 82133358h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82133358h case   15:*/		return 0x8213335C;
		  /* 8213335Ch */ case   16:  		/* stwx R3, <#[R29 + R11]> */
		/* 8213335Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8213335Ch case   16:*/		return 0x82133360;
	}
	return 0x82133360;
} // Block from 8213331Ch-82133360h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82133360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133360);
		  /* 82133360h */ case    0:  		/* cmplw CR6, R30, R24 */
		/* 82133360h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 82133360h case    0:*/		return 0x82133364;
		  /* 82133364h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 82133364h case    1:*/		if ( regs.CR[6].eq ) { return 0x821333A8;  }
		/* 82133364h case    1:*/		return 0x82133368;
	}
	return 0x82133368;
} // Block from 82133360h-82133368h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82133368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133368);
		  /* 82133368h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82133368h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82133368h case    0:*/		return 0x8213336C;
		  /* 8213336Ch */ case    1:  		/* addi R25, R25, 1 */
		/* 8213336Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8213336Ch case    1:*/		return 0x82133370;
		  /* 82133370h */ case    2:  		/* addi R29, R29, 4 */
		/* 82133370h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82133370h case    2:*/		return 0x82133374;
		  /* 82133374h */ case    3:  		/* cmplw CR6, R25, R11 */
		/* 82133374h case    3:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 82133374h case    3:*/		return 0x82133378;
		  /* 82133378h */ case    4:  		/* bc 12, CR6_LT, -236 */
		/* 82133378h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213328C;  }
		/* 82133378h case    4:*/		return 0x8213337C;
	}
	return 0x8213337C;
} // Block from 82133368h-8213337Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213337Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213337C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213337C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213337C);
		  /* 8213337Ch */ case    0:  		/* addi R22, R22, 1 */
		/* 8213337Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8213337Ch case    0:*/		return 0x82133380;
		  /* 82133380h */ case    1:  		/* addi R21, R21, 4 */
		/* 82133380h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 82133380h case    1:*/		return 0x82133384;
		  /* 82133384h */ case    2:  		/* cmplw CR6, R22, R23 */
		/* 82133384h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R23);
		/* 82133384h case    2:*/		return 0x82133388;
		  /* 82133388h */ case    3:  		/* bc 12, CR6_LT, -328 */
		/* 82133388h case    3:*/		if ( regs.CR[6].lt ) { return 0x82133240;  }
		/* 82133388h case    3:*/		return 0x8213338C;
	}
	return 0x8213338C;
} // Block from 8213337Ch-8213338Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213338Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213338C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213338C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213338C);
		  /* 8213338Ch */ case    0:  		/* li R3, 0 */
		/* 8213338Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213338Ch case    0:*/		return 0x82133390;
		  /* 82133390h */ case    1:  		/* addi R1, R1, 208 */
		/* 82133390h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82133390h case    1:*/		return 0x82133394;
		  /* 82133394h */ case    2:  		/* lfd FR31, <#[R1 - 128]> */
		/* 82133394h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 82133394h case    2:*/		return 0x82133398;
		  /* 82133398h */ case    3:  		/* b -663832 */
		/* 82133398h case    3:*/		return 0x82091280;
		/* 82133398h case    3:*/		return 0x8213339C;
	}
	return 0x8213339C;
} // Block from 8213338Ch-8213339Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213339Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213339C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213339C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213339C);
		  /* 8213339Ch */ case    0:  		/* lis R3, -32761 */
		/* 8213339Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213339Ch case    0:*/		return 0x821333A0;
		  /* 821333A0h */ case    1:  		/* ori R3, R3, 14 */
		/* 821333A0h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 821333A0h case    1:*/		return 0x821333A4;
		  /* 821333A4h */ case    2:  		/* b -20 */
		/* 821333A4h case    2:*/		return 0x82133390;
		/* 821333A4h case    2:*/		return 0x821333A8;
	}
	return 0x821333A8;
} // Block from 8213339Ch-821333A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821333A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821333A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821333A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821333A8);
		  /* 821333A8h */ case    0:  		/* lis R11, -32253 */
		/* 821333A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821333A8h case    0:*/		return 0x821333AC;
		  /* 821333ACh */ case    1:  		/* li R5, 4801 */
		/* 821333ACh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12C1);
		/* 821333ACh case    1:*/		return 0x821333B0;
		  /* 821333B0h */ case    2:  		/* addi R6, R11, 20384 */
		/* 821333B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4FA0);
		/* 821333B0h case    2:*/		return 0x821333B4;
		  /* 821333B4h */ case    3:  		/* li R4, 0 */
		/* 821333B4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821333B4h case    3:*/		return 0x821333B8;
		  /* 821333B8h */ case    4:  		/* mr R3, R27 */
		/* 821333B8h case    4:*/		regs.R3 = regs.R27;
		/* 821333B8h case    4:*/		return 0x821333BC;
		  /* 821333BCh */ case    5:  		/* bl -150668 */
		/* 821333BCh case    5:*/		regs.LR = 0x821333C0; return 0x8210E730;
		/* 821333BCh case    5:*/		return 0x821333C0;
		  /* 821333C0h */ case    6:  		/* lis R3, -32768 */
		/* 821333C0h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 821333C0h case    6:*/		return 0x821333C4;
		  /* 821333C4h */ case    7:  		/* ori R3, R3, 16389 */
		/* 821333C4h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 821333C4h case    7:*/		return 0x821333C8;
		  /* 821333C8h */ case    8:  		/* b -56 */
		/* 821333C8h case    8:*/		return 0x82133390;
		/* 821333C8h case    8:*/		return 0x821333CC;
		  /* 821333CCh */ case    9:  		/* nop */
		/* 821333CCh case    9:*/		cpu::op::nop();
		/* 821333CCh case    9:*/		return 0x821333D0;
	}
	return 0x821333D0;
} // Block from 821333A8h-821333D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821333D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821333D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821333D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821333D0);
		  /* 821333D0h */ case    0:  		/* mfspr R12, LR */
		/* 821333D0h case    0:*/		regs.R12 = regs.LR;
		/* 821333D0h case    0:*/		return 0x821333D4;
		  /* 821333D4h */ case    1:  		/* bl -663968 */
		/* 821333D4h case    1:*/		regs.LR = 0x821333D8; return 0x82091234;
		/* 821333D4h case    1:*/		return 0x821333D8;
		  /* 821333D8h */ case    2:  		/* stfd FR31, <#[R1 - 120]> */
		/* 821333D8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821333D8h case    2:*/		return 0x821333DC;
		  /* 821333DCh */ case    3:  		/* stwu R1, <#[R1 - 208]> */
		/* 821333DCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821333DCh case    3:*/		return 0x821333E0;
		  /* 821333E0h */ case    4:  		/* mr R29, R3 */
		/* 821333E0h case    4:*/		regs.R29 = regs.R3;
		/* 821333E0h case    4:*/		return 0x821333E4;
		  /* 821333E4h */ case    5:  		/* mr R23, R5 */
		/* 821333E4h case    5:*/		regs.R23 = regs.R5;
		/* 821333E4h case    5:*/		return 0x821333E8;
		  /* 821333E8h */ case    6:  		/* mr R20, R6 */
		/* 821333E8h case    6:*/		regs.R20 = regs.R6;
		/* 821333E8h case    6:*/		return 0x821333EC;
		  /* 821333ECh */ case    7:  		/* mr R19, R7 */
		/* 821333ECh case    7:*/		regs.R19 = regs.R7;
		/* 821333ECh case    7:*/		return 0x821333F0;
		  /* 821333F0h */ case    8:  		/* mr R24, R8 */
		/* 821333F0h case    8:*/		regs.R24 = regs.R8;
		/* 821333F0h case    8:*/		return 0x821333F4;
		  /* 821333F4h */ case    9:  		/* mr R26, R9 */
		/* 821333F4h case    9:*/		regs.R26 = regs.R9;
		/* 821333F4h case    9:*/		return 0x821333F8;
		  /* 821333F8h */ case   10:  		/* li R22, 0 */
		/* 821333F8h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821333F8h case   10:*/		return 0x821333FC;
		  /* 821333FCh */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 821333FCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821333FCh case   11:*/		return 0x82133400;
		  /* 82133400h */ case   12:  		/* bc 12, CR6_EQ, 296 */
		/* 82133400h case   12:*/		if ( regs.CR[6].eq ) { return 0x82133528;  }
		/* 82133400h case   12:*/		return 0x82133404;
		  /* 82133404h */ case   13:  		/* lis R11, -32256 */
		/* 82133404h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82133404h case   13:*/		return 0x82133408;
		  /* 82133408h */ case   14:  		/* mr R21, R4 */
		/* 82133408h case   14:*/		regs.R21 = regs.R4;
		/* 82133408h case   14:*/		return 0x8213340C;
		  /* 8213340Ch */ case   15:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8213340Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8213340Ch case   15:*/		return 0x82133410;
		  /* 82133410h */ case   16:  		/* lwz R27, <#[R21]> */
		/* 82133410h case   16:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R21 + 0x00000000) );
		/* 82133410h case   16:*/		return 0x82133414;
		  /* 82133414h */ case   17:  		/* cmplwi CR6, R27, 0 */
		/* 82133414h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82133414h case   17:*/		return 0x82133418;
		  /* 82133418h */ case   18:  		/* bc 12, CR6_EQ, 256 */
		/* 82133418h case   18:*/		if ( regs.CR[6].eq ) { return 0x82133518;  }
		/* 82133418h case   18:*/		return 0x8213341C;
		  /* 8213341Ch */ case   19:  		/* lwz R11, <#[R27 + 4]> */
		/* 8213341Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 8213341Ch case   19:*/		return 0x82133420;
		  /* 82133420h */ case   20:  		/* li R25, 0 */
		/* 82133420h case   20:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82133420h case   20:*/		return 0x82133424;
		  /* 82133424h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82133424h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133424h case   21:*/		return 0x82133428;
	}
	return 0x82133428;
} // Block from 821333D0h-82133428h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82133428h
// Function '?MatchCMP@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133428);
		  /* 82133428h */ case    0:  		/* bc 4, CR6_GT, 240 */
		/* 82133428h case    0:*/		if ( !regs.CR[6].gt ) { return 0x82133518;  }
		/* 82133428h case    0:*/		return 0x8213342C;
		  /* 8213342Ch */ case    1:  		/* li R28, 0 */
		/* 8213342Ch case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8213342Ch case    1:*/		return 0x82133430;
		  /* 82133430h */ case    2:  		/* lwz R11, <#[R27 + 8]> */
		/* 82133430h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82133430h case    2:*/		return 0x82133434;
		  /* 82133434h */ case    3:  		/* lwz R10, <#[R29 + 20]> */
		/* 82133434h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 82133434h case    3:*/		return 0x82133438;
		  /* 82133438h */ case    4:  		/* lwz R9, <#[R29 + 128]> */
		/* 82133438h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000080) );
		/* 82133438h case    4:*/		return 0x8213343C;
		  /* 8213343Ch */ case    5:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213343Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213343Ch case    5:*/		return 0x82133440;
		  /* 82133440h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133440h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133440h case    6:*/		return 0x82133444;
		  /* 82133444h */ case    7:  		/* lwzx R31, <#[R11 + R10]> */
		/* 82133444h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82133444h case    7:*/		return 0x82133448;
		  /* 82133448h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 82133448h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82133448h case    8:*/		return 0x8213344C;
		  /* 8213344Ch */ case    9:  		/* cmplw CR6, R11, R9 */
		/* 8213344Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213344Ch case    9:*/		return 0x82133450;
		  /* 82133450h */ case   10:  		/* bc 4, CR6_EQ, 180 */
		/* 82133450h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82133504;  }
		/* 82133450h case   10:*/		return 0x82133454;
		  /* 82133454h */ case   11:  		/* lwz R11, <#[R31 + 60]> */
		/* 82133454h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82133454h case   11:*/		return 0x82133458;
		  /* 82133458h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82133458h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133458h case   12:*/		return 0x8213345C;
		  /* 8213345Ch */ case   13:  		/* bc 12, CR6_EQ, 168 */
		/* 8213345Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82133504;  }
		/* 8213345Ch case   13:*/		return 0x82133460;
		  /* 82133460h */ case   14:  		/* lbz R11, <#[R31 + 111]> */
		/* 82133460h case   14:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006F) );
		/* 82133460h case   14:*/		return 0x82133464;
		  /* 82133464h */ case   15:  		/* cmplw CR6, R11, R20 */
		/* 82133464h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 82133464h case   15:*/		return 0x82133468;
		  /* 82133468h */ case   16:  		/* bc 4, CR6_EQ, 156 */
		/* 82133468h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82133504;  }
		/* 82133468h case   16:*/		return 0x8213346C;
		  /* 8213346Ch */ case   17:  		/* lbz R11, <#[R31 + 110]> */
		/* 8213346Ch case   17:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006E) );
		/* 8213346Ch case   17:*/		return 0x82133470;
		  /* 82133470h */ case   18:  		/* cmplw CR6, R19, R11 */
		/* 82133470h case   18:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R11);
		/* 82133470h case   18:*/		return 0x82133474;
		  /* 82133474h */ case   19:  		/* bc 4, CR6_EQ, 144 */
		/* 82133474h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82133504;  }
		/* 82133474h case   19:*/		return 0x82133478;
		  /* 82133478h */ case   20:  		/* li R30, 0 */
		/* 82133478h case   20:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82133478h case   20:*/		return 0x8213347C;
		  /* 8213347Ch */ case   21:  		/* cmplwi CR6, R24, 0 */
		/* 8213347Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8213347Ch case   21:*/		return 0x82133480;
		  /* 82133480h */ case   22:  		/* bc 12, CR6_EQ, 124 */
		/* 82133480h case   22:*/		if ( regs.CR[6].eq ) { return 0x821334FC;  }
		/* 82133480h case   22:*/		return 0x82133484;
		  /* 82133484h */ case   23:  		/* lwz R6, <#[R31 + 16]> */
		/* 82133484h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 82133484h case   23:*/		return 0x82133488;
		  /* 82133488h */ case   24:  		/* mr R11, R26 */
		/* 82133488h case   24:*/		regs.R11 = regs.R26;
		/* 82133488h case   24:*/		return 0x8213348C;
		  /* 8213348Ch */ case   25:  		/* lwz R9, <#[R11]> */
		/* 8213348Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8213348Ch case   25:*/		return 0x82133490;
		  /* 82133490h */ case   26:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82133490h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82133490h case   26:*/		return 0x82133494;
		  /* 82133494h */ case   27:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82133494h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82133494h case   27:*/		return 0x82133498;
		  /* 82133498h */ case   28:  		/* lwz R9, <#[R9 + 16]> */
		/* 82133498h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 82133498h case   28:*/		return 0x8213349C;
		  /* 8213349Ch */ case   29:  		/* cmplw CR6, R6, R9 */
		/* 8213349Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 8213349Ch case   29:*/		return 0x821334A0;
		  /* 821334A0h */ case   30:  		/* bc 12, CR6_EQ, 24 */
		/* 821334A0h case   30:*/		if ( regs.CR[6].eq ) { return 0x821334B8;  }
		/* 821334A0h case   30:*/		return 0x821334A4;
		  /* 821334A4h */ case   31:  		/* addi R30, R30, 1 */
		/* 821334A4h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821334A4h case   31:*/		return 0x821334A8;
		  /* 821334A8h */ case   32:  		/* addi R11, R11, 4 */
		/* 821334A8h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821334A8h case   32:*/		return 0x821334AC;
		  /* 821334ACh */ case   33:  		/* cmplw CR6, R30, R24 */
		/* 821334ACh case   33:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 821334ACh case   33:*/		return 0x821334B0;
		  /* 821334B0h */ case   34:  		/* bc 12, CR6_LT, -36 */
		/* 821334B0h case   34:*/		if ( regs.CR[6].lt ) { return 0x8213348C;  }
		/* 821334B0h case   34:*/		return 0x821334B4;
		  /* 821334B4h */ case   35:  		/* b 72 */
		/* 821334B4h case   35:*/		return 0x821334FC;
		/* 821334B4h case   35:*/		return 0x821334B8;
	}
	return 0x821334B8;
} // Block from 82133428h-821334B8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821334B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821334B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821334B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821334B8);
		  /* 821334B8h */ case    0:  		/* li R5, 0 */
		/* 821334B8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821334B8h case    0:*/		return 0x821334BC;
		  /* 821334BCh */ case    1:  		/* lwz R4, <#[R29 + 136]> */
		/* 821334BCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000088) );
		/* 821334BCh case    1:*/		return 0x821334C0;
		  /* 821334C0h */ case    2:  		/* mr R3, R29 */
		/* 821334C0h case    2:*/		regs.R3 = regs.R29;
		/* 821334C0h case    2:*/		return 0x821334C4;
		  /* 821334C4h */ case    3:  		/* fmr FR1, FR31 */
		/* 821334C4h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821334C4h case    3:*/		return 0x821334C8;
		  /* 821334C8h */ case    4:  		/* bl -221856 */
		/* 821334C8h case    4:*/		regs.LR = 0x821334CC; return 0x820FD228;
		/* 821334C8h case    4:*/		return 0x821334CC;
		  /* 821334CCh */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 821334CCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821334CCh case    5:*/		return 0x821334D0;
		  /* 821334D0h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 821334D0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82133538;  }
		/* 821334D0h case    6:*/		return 0x821334D4;
		  /* 821334D4h */ case    7:  		/* lwz R11, <#[R29 + 20]> */
		/* 821334D4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821334D4h case    7:*/		return 0x821334D8;
		  /* 821334D8h */ case    8:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 821334D8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 821334D8h case    8:*/		return 0x821334DC;
		  /* 821334DCh */ case    9:  		/* lwz R9, <#[R31 + 60]> */
		/* 821334DCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 821334DCh case    9:*/		return 0x821334E0;
		  /* 821334E0h */ case   10:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 821334E0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 821334E0h case   10:*/		return 0x821334E4;
		  /* 821334E4h */ case   11:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821334E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821334E4h case   11:*/		return 0x821334E8;
		  /* 821334E8h */ case   12:  		/* stw R9, <#[R11 + 60]> */
		/* 821334E8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 821334E8h case   12:*/		return 0x821334EC;
		  /* 821334ECh */ case   13:  		/* lwzx R10, <#[R8 + R26]> */
		/* 821334ECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R26 + 0x00000000) );
		/* 821334ECh case   13:*/		return 0x821334F0;
		  /* 821334F0h */ case   14:  		/* stw R10, <#[R11 + 56]> */
		/* 821334F0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 821334F0h case   14:*/		return 0x821334F4;
		  /* 821334F4h */ case   15:  		/* lwz R11, <#[R27 + 8]> */
		/* 821334F4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821334F4h case   15:*/		return 0x821334F8;
		  /* 821334F8h */ case   16:  		/* stwx R3, <#[R11 + R28]> */
		/* 821334F8h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821334F8h case   16:*/		return 0x821334FC;
	}
	return 0x821334FC;
} // Block from 821334B8h-821334FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821334FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821334FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821334FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821334FC);
		  /* 821334FCh */ case    0:  		/* cmplw CR6, R30, R24 */
		/* 821334FCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 821334FCh case    0:*/		return 0x82133500;
		  /* 82133500h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 82133500h case    1:*/		if ( regs.CR[6].eq ) { return 0x82133544;  }
		/* 82133500h case    1:*/		return 0x82133504;
	}
	return 0x82133504;
} // Block from 821334FCh-82133504h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82133504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133504);
		  /* 82133504h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82133504h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82133504h case    0:*/		return 0x82133508;
		  /* 82133508h */ case    1:  		/* addi R25, R25, 1 */
		/* 82133508h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82133508h case    1:*/		return 0x8213350C;
		  /* 8213350Ch */ case    2:  		/* addi R28, R28, 4 */
		/* 8213350Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213350Ch case    2:*/		return 0x82133510;
		  /* 82133510h */ case    3:  		/* cmplw CR6, R25, R11 */
		/* 82133510h case    3:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 82133510h case    3:*/		return 0x82133514;
		  /* 82133514h */ case    4:  		/* bc 12, CR6_LT, -228 */
		/* 82133514h case    4:*/		if ( regs.CR[6].lt ) { return 0x82133430;  }
		/* 82133514h case    4:*/		return 0x82133518;
	}
	return 0x82133518;
} // Block from 82133504h-82133518h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82133518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133518);
		  /* 82133518h */ case    0:  		/* addi R22, R22, 1 */
		/* 82133518h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82133518h case    0:*/		return 0x8213351C;
		  /* 8213351Ch */ case    1:  		/* addi R21, R21, 4 */
		/* 8213351Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 8213351Ch case    1:*/		return 0x82133520;
		  /* 82133520h */ case    2:  		/* cmplw CR6, R22, R23 */
		/* 82133520h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R23);
		/* 82133520h case    2:*/		return 0x82133524;
		  /* 82133524h */ case    3:  		/* bc 12, CR6_LT, -276 */
		/* 82133524h case    3:*/		if ( regs.CR[6].lt ) { return 0x82133410;  }
		/* 82133524h case    3:*/		return 0x82133528;
	}
	return 0x82133528;
} // Block from 82133518h-82133528h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82133528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133528);
		  /* 82133528h */ case    0:  		/* li R3, 0 */
		/* 82133528h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82133528h case    0:*/		return 0x8213352C;
		  /* 8213352Ch */ case    1:  		/* addi R1, R1, 208 */
		/* 8213352Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8213352Ch case    1:*/		return 0x82133530;
		  /* 82133530h */ case    2:  		/* lfd FR31, <#[R1 - 120]> */
		/* 82133530h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 82133530h case    2:*/		return 0x82133534;
		  /* 82133534h */ case    3:  		/* b -664240 */
		/* 82133534h case    3:*/		return 0x82091284;
		/* 82133534h case    3:*/		return 0x82133538;
	}
	return 0x82133538;
} // Block from 82133528h-82133538h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82133538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133538);
		  /* 82133538h */ case    0:  		/* lis R3, -32761 */
		/* 82133538h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82133538h case    0:*/		return 0x8213353C;
		  /* 8213353Ch */ case    1:  		/* ori R3, R3, 14 */
		/* 8213353Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8213353Ch case    1:*/		return 0x82133540;
		  /* 82133540h */ case    2:  		/* b -20 */
		/* 82133540h case    2:*/		return 0x8213352C;
		/* 82133540h case    2:*/		return 0x82133544;
	}
	return 0x82133544;
} // Block from 82133538h-82133544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82133544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133544);
		  /* 82133544h */ case    0:  		/* lis R11, -32253 */
		/* 82133544h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82133544h case    0:*/		return 0x82133548;
		  /* 82133548h */ case    1:  		/* li R5, 4802 */
		/* 82133548h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12C2);
		/* 82133548h case    1:*/		return 0x8213354C;
		  /* 8213354Ch */ case    2:  		/* addi R6, R11, 20384 */
		/* 8213354Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4FA0);
		/* 8213354Ch case    2:*/		return 0x82133550;
		  /* 82133550h */ case    3:  		/* li R4, 0 */
		/* 82133550h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82133550h case    3:*/		return 0x82133554;
		  /* 82133554h */ case    4:  		/* mr R3, R29 */
		/* 82133554h case    4:*/		regs.R3 = regs.R29;
		/* 82133554h case    4:*/		return 0x82133558;
		  /* 82133558h */ case    5:  		/* bl -151080 */
		/* 82133558h case    5:*/		regs.LR = 0x8213355C; return 0x8210E730;
		/* 82133558h case    5:*/		return 0x8213355C;
		  /* 8213355Ch */ case    6:  		/* lis R3, -32768 */
		/* 8213355Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213355Ch case    6:*/		return 0x82133560;
		  /* 82133560h */ case    7:  		/* ori R3, R3, 16389 */
		/* 82133560h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82133560h case    7:*/		return 0x82133564;
		  /* 82133564h */ case    8:  		/* b -56 */
		/* 82133564h case    8:*/		return 0x8213352C;
		/* 82133564h case    8:*/		return 0x82133568;
	}
	return 0x82133568;
} // Block from 82133544h-82133568h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82133568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133568);
		  /* 82133568h */ case    0:  		/* mfspr R12, LR */
		/* 82133568h case    0:*/		regs.R12 = regs.LR;
		/* 82133568h case    0:*/		return 0x8213356C;
		  /* 8213356Ch */ case    1:  		/* bl -664392 */
		/* 8213356Ch case    1:*/		regs.LR = 0x82133570; return 0x82091224;
		/* 8213356Ch case    1:*/		return 0x82133570;
		  /* 82133570h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 82133570h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 82133570h case    2:*/		return 0x82133574;
		  /* 82133574h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 82133574h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82133574h case    3:*/		return 0x82133578;
		  /* 82133578h */ case    4:  		/* mr R25, R3 */
		/* 82133578h case    4:*/		regs.R25 = regs.R3;
		/* 82133578h case    4:*/		return 0x8213357C;
		  /* 8213357Ch */ case    5:  		/* mr R15, R4 */
		/* 8213357Ch case    5:*/		regs.R15 = regs.R4;
		/* 8213357Ch case    5:*/		return 0x82133580;
		  /* 82133580h */ case    6:  		/* mr R16, R5 */
		/* 82133580h case    6:*/		regs.R16 = regs.R5;
		/* 82133580h case    6:*/		return 0x82133584;
		  /* 82133584h */ case    7:  		/* mr R19, R6 */
		/* 82133584h case    7:*/		regs.R19 = regs.R6;
		/* 82133584h case    7:*/		return 0x82133588;
		  /* 82133588h */ case    8:  		/* mr R20, R7 */
		/* 82133588h case    8:*/		regs.R20 = regs.R7;
		/* 82133588h case    8:*/		return 0x8213358C;
		  /* 8213358Ch */ case    9:  		/* li R17, 0 */
		/* 8213358Ch case    9:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 8213358Ch case    9:*/		return 0x82133590;
		  /* 82133590h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82133590h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133590h case   10:*/		return 0x82133594;
		  /* 82133594h */ case   11:  		/* bc 4, CR6_GT, 548 */
		/* 82133594h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821337B8;  }
		/* 82133594h case   11:*/		return 0x82133598;
		  /* 82133598h */ case   12:  		/* li R18, 0 */
		/* 82133598h case   12:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 82133598h case   12:*/		return 0x8213359C;
		  /* 8213359Ch */ case   13:  		/* lwz R11, <#[R25 + 24]> */
		/* 8213359Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 8213359Ch case   13:*/		return 0x821335A0;
		  /* 821335A0h */ case   14:  		/* lwzx R28, <#[R18 + R11]> */
		/* 821335A0h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R18 + regs.R11 + 0x00000000) );
		/* 821335A0h case   14:*/		return 0x821335A4;
		  /* 821335A4h */ case   15:  		/* cmplwi CR6, R28, 0 */
		/* 821335A4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821335A4h case   15:*/		return 0x821335A8;
		  /* 821335A8h */ case   16:  		/* bc 12, CR6_EQ, 508 */
		/* 821335A8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821337A4;  }
		/* 821335A8h case   16:*/		return 0x821335AC;
		  /* 821335ACh */ case   17:  		/* lwz R11, <#[R28 + 36]> */
		/* 821335ACh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821335ACh case   17:*/		return 0x821335B0;
		  /* 821335B0h */ case   18:  		/* cmplwi CR6, R11, 1 */
		/* 821335B0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821335B0h case   18:*/		return 0x821335B4;
		  /* 821335B4h */ case   19:  		/* bc 12, CR6_EQ, 496 */
		/* 821335B4h case   19:*/		if ( regs.CR[6].eq ) { return 0x821337A4;  }
		/* 821335B4h case   19:*/		return 0x821335B8;
		  /* 821335B8h */ case   20:  		/* lwz R11, <#[R28]> */
		/* 821335B8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821335B8h case   20:*/		return 0x821335BC;
		  /* 821335BCh */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821335BCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821335BCh case   21:*/		return 0x821335C0;
		  /* 821335C0h */ case   22:  		/* bc 12, CR6_EQ, 484 */
		/* 821335C0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821337A4;  }
		/* 821335C0h case   22:*/		return 0x821335C4;
		  /* 821335C4h */ case   23:  		/* lwz R11, <#[R28 + 12]> */
		/* 821335C4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821335C4h case   23:*/		return 0x821335C8;
		  /* 821335C8h */ case   24:  		/* li R8, 0 */
		/* 821335C8h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821335C8h case   24:*/		return 0x821335CC;
		  /* 821335CCh */ case   25:  		/* li R21, 0 */
		/* 821335CCh case   25:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821335CCh case   25:*/		return 0x821335D0;
		  /* 821335D0h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 821335D0h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821335D0h case   26:*/		return 0x821335D4;
		  /* 821335D4h */ case   27:  		/* bc 4, CR6_GT, 464 */
		/* 821335D4h case   27:*/		if ( !regs.CR[6].gt ) { return 0x821337A4;  }
		/* 821335D4h case   27:*/		return 0x821335D8;
		  /* 821335D8h */ case   28:  		/* li R22, 0 */
		/* 821335D8h case   28:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821335D8h case   28:*/		return 0x821335DC;
		  /* 821335DCh */ case   29:  		/* li R23, 0 */
		/* 821335DCh case   29:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821335DCh case   29:*/		return 0x821335E0;
		  /* 821335E0h */ case   30:  		/* cmplwi CR6, R16, 0 */
		/* 821335E0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821335E0h case   30:*/		return 0x821335E4;
		  /* 821335E4h */ case   31:  		/* bc 12, CR6_EQ, 188 */
		/* 821335E4h case   31:*/		if ( regs.CR[6].eq ) { return 0x821336A0;  }
		/* 821335E4h case   31:*/		return 0x821335E8;
		  /* 821335E8h */ case   32:  		/* mr R24, R15 */
		/* 821335E8h case   32:*/		regs.R24 = regs.R15;
		/* 821335E8h case   32:*/		return 0x821335EC;
		  /* 821335ECh */ case   33:  		/* lwz R11, <#[R24]> */
		/* 821335ECh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821335ECh case   33:*/		return 0x821335F0;
		  /* 821335F0h */ case   34:  		/* lwz R10, <#[R25 + 20]> */
		/* 821335F0h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821335F0h case   34:*/		return 0x821335F4;
		  /* 821335F4h */ case   35:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 821335F4h case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 821335F4h case   35:*/		return 0x821335F8;
		  /* 821335F8h */ case   36:  		/* lwz R7, <#[R25 + 128]> */
		/* 821335F8h case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000080) );
		/* 821335F8h case   36:*/		return 0x821335FC;
		  /* 821335FCh */ case   37:  		/* lwzx R9, <#[R9 + R10]> */
		/* 821335FCh case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821335FCh case   37:*/		return 0x82133600;
		  /* 82133600h */ case   38:  		/* lwz R10, <#[R9 + 4]> */
		/* 82133600h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 82133600h case   38:*/		return 0x82133604;
		  /* 82133604h */ case   39:  		/* cmplw CR6, R10, R7 */
		/* 82133604h case   39:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82133604h case   39:*/		return 0x82133608;
		  /* 82133608h */ case   40:  		/* bc 4, CR6_EQ, 16 */
		/* 82133608h case   40:*/		if ( !regs.CR[6].eq ) { return 0x82133618;  }
		/* 82133608h case   40:*/		return 0x8213360C;
		  /* 8213360Ch */ case   41:  		/* lbz R10, <#[R9 + 111]> */
		/* 8213360Ch case   41:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000006F) );
		/* 8213360Ch case   41:*/		return 0x82133610;
		  /* 82133610h */ case   42:  		/* cmplwi CR6, R10, 3 */
		/* 82133610h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82133610h case   42:*/		return 0x82133614;
		  /* 82133614h */ case   43:  		/* bc 4, CR6_EQ, 432 */
		/* 82133614h case   43:*/		if ( !regs.CR[6].eq ) { return 0x821337C4;  }
		/* 82133614h case   43:*/		return 0x82133618;
	}
	return 0x82133618;
} // Block from 82133568h-82133618h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82133618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133618);
		  /* 82133618h */ case    0:  		/* lwz R10, <#[R28 + 16]> */
		/* 82133618h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 82133618h case    0:*/		return 0x8213361C;
		  /* 8213361Ch */ case    1:  		/* lwzx R10, <#[R10 + R22]> */
		/* 8213361Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R22 + 0x00000000) );
		/* 8213361Ch case    1:*/		return 0x82133620;
		  /* 82133620h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 82133620h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82133620h case    2:*/		return 0x82133624;
		  /* 82133624h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82133624h case    3:*/		if ( regs.CR[6].eq ) { return 0x82133634;  }
		/* 82133624h case    3:*/		return 0x82133628;
		  /* 82133628h */ case    4:  		/* lwz R11, <#[R9 + 56]> */
		/* 82133628h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000038) );
		/* 82133628h case    4:*/		return 0x8213362C;
		  /* 8213362Ch */ case    5:  		/* cmplw CR6, R10, R11 */
		/* 8213362Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213362Ch case    5:*/		return 0x82133630;
		  /* 82133630h */ case    6:  		/* bc 4, CR6_EQ, 96 */
		/* 82133630h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82133690;  }
		/* 82133630h case    6:*/		return 0x82133634;
	}
	return 0x82133634;
} // Block from 82133618h-82133634h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82133634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133634);
		  /* 82133634h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82133634h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82133634h case    0:*/		return 0x82133638;
		  /* 82133638h */ case    1:  		/* li R29, 0 */
		/* 82133638h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82133638h case    1:*/		return 0x8213363C;
		  /* 8213363Ch */ case    2:  		/* lwz R10, <#[R28 + 4]> */
		/* 8213363Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 8213363Ch case    2:*/		return 0x82133640;
		  /* 82133640h */ case    3:  		/* rlwinm R30, R11, 0, 12, 31 */
		/* 82133640h case    3:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R11);
		/* 82133640h case    3:*/		return 0x82133644;
		  /* 82133644h */ case    4:  		/* divwu. R27, R10, R30 */
		/* 82133644h case    4:*/		cpu::op::divwu<1>(regs,&regs.R27,regs.R10,regs.R30);
		/* 82133644h case    4:*/		return 0x82133648;
		  /* 82133648h */ case    5:  		/* twi 6, R30, 0 */
		/* 82133648h case    5:*/		cpu::op::tw<6>(regs, 0x82133648, regs.R30, 0x00000000);
		/* 82133648h case    5:*/		return 0x8213364C;
		  /* 8213364Ch */ case    6:  		/* bc 12, CR0_EQ, 68 */
		/* 8213364Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82133690;  }
		/* 8213364Ch case    6:*/		return 0x82133650;
		  /* 82133650h */ case    7:  		/* li R31, 0 */
		/* 82133650h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82133650h case    7:*/		return 0x82133654;
		  /* 82133654h */ case    8:  		/* rlwinm R26, R30, 2, 0, 29 */
		/* 82133654h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R30);
		/* 82133654h case    8:*/		return 0x82133658;
		  /* 82133658h */ case    9:  		/* lwz R11, <#[R28 + 8]> */
		/* 82133658h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82133658h case    9:*/		return 0x8213365C;
		  /* 8213365Ch */ case   10:  		/* mr R7, R20 */
		/* 8213365Ch case   10:*/		regs.R7 = regs.R20;
		/* 8213365Ch case   10:*/		return 0x82133660;
		  /* 82133660h */ case   11:  		/* mr R6, R19 */
		/* 82133660h case   11:*/		regs.R6 = regs.R19;
		/* 82133660h case   11:*/		return 0x82133664;
		  /* 82133664h */ case   12:  		/* mr R5, R30 */
		/* 82133664h case   12:*/		regs.R5 = regs.R30;
		/* 82133664h case   12:*/		return 0x82133668;
		  /* 82133668h */ case   13:  		/* add R4, R11, R31 */
		/* 82133668h case   13:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R31);
		/* 82133668h case   13:*/		return 0x8213366C;
		  /* 8213366Ch */ case   14:  		/* mr R3, R25 */
		/* 8213366Ch case   14:*/		regs.R3 = regs.R25;
		/* 8213366Ch case   14:*/		return 0x82133670;
		  /* 82133670h */ case   15:  		/* bl -264 */
		/* 82133670h case   15:*/		regs.LR = 0x82133674; return 0x82133568;
		/* 82133670h case   15:*/		return 0x82133674;
		  /* 82133674h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 82133674h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82133674h case   16:*/		return 0x82133678;
		  /* 82133678h */ case   17:  		/* bc 12, CR0_LT, 324 */
		/* 82133678h case   17:*/		if ( regs.CR[0].lt ) { return 0x821337BC;  }
		/* 82133678h case   17:*/		return 0x8213367C;
		  /* 8213367Ch */ case   18:  		/* addi R29, R29, 1 */
		/* 8213367Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213367Ch case   18:*/		return 0x82133680;
		  /* 82133680h */ case   19:  		/* li R8, 1 */
		/* 82133680h case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82133680h case   19:*/		return 0x82133684;
		  /* 82133684h */ case   20:  		/* add R31, R26, R31 */
		/* 82133684h case   20:*/		cpu::op::add<0>(regs,&regs.R31,regs.R26,regs.R31);
		/* 82133684h case   20:*/		return 0x82133688;
		  /* 82133688h */ case   21:  		/* cmplw CR6, R29, R27 */
		/* 82133688h case   21:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 82133688h case   21:*/		return 0x8213368C;
		  /* 8213368Ch */ case   22:  		/* bc 12, CR6_LT, -52 */
		/* 8213368Ch case   22:*/		if ( regs.CR[6].lt ) { return 0x82133658;  }
		/* 8213368Ch case   22:*/		return 0x82133690;
	}
	return 0x82133690;
} // Block from 82133634h-82133690h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82133690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133690);
		  /* 82133690h */ case    0:  		/* addi R23, R23, 1 */
		/* 82133690h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82133690h case    0:*/		return 0x82133694;
		  /* 82133694h */ case    1:  		/* addi R24, R24, 4 */
		/* 82133694h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 82133694h case    1:*/		return 0x82133698;
		  /* 82133698h */ case    2:  		/* cmplw CR6, R23, R16 */
		/* 82133698h case    2:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R16);
		/* 82133698h case    2:*/		return 0x8213369C;
		  /* 8213369Ch */ case    3:  		/* bc 12, CR6_LT, -176 */
		/* 8213369Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821335EC;  }
		/* 8213369Ch case    3:*/		return 0x821336A0;
	}
	return 0x821336A0;
} // Block from 82133690h-821336A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821336A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821336A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821336A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821336A0);
		  /* 821336A0h */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821336A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821336A0h case    0:*/		return 0x821336A4;
		  /* 821336A4h */ case    1:  		/* addi R21, R21, 1 */
		/* 821336A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821336A4h case    1:*/		return 0x821336A8;
		  /* 821336A8h */ case    2:  		/* addi R22, R22, 4 */
		/* 821336A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821336A8h case    2:*/		return 0x821336AC;
		  /* 821336ACh */ case    3:  		/* cmplw CR6, R21, R11 */
		/* 821336ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 821336ACh case    3:*/		return 0x821336B0;
		  /* 821336B0h */ case    4:  		/* bc 12, CR6_LT, -212 */
		/* 821336B0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821335DC;  }
		/* 821336B0h case    4:*/		return 0x821336B4;
		  /* 821336B4h */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 821336B4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 821336B4h case    5:*/		return 0x821336B8;
		  /* 821336B8h */ case    6:  		/* bc 12, CR6_EQ, 236 */
		/* 821336B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821337A4;  }
		/* 821336B8h case    6:*/		return 0x821336BC;
		  /* 821336BCh */ case    7:  		/* lwz R10, <#[R28]> */
		/* 821336BCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821336BCh case    7:*/		return 0x821336C0;
		  /* 821336C0h */ case    8:  		/* lis R9, 24576 */
		/* 821336C0h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0x6000);
		/* 821336C0h case    8:*/		return 0x821336C4;
		  /* 821336C4h */ case    9:  		/* rlwinm R11, R10, 0, 0, 11 */
		/* 821336C4h case    9:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R10);
		/* 821336C4h case    9:*/		return 0x821336C8;
		  /* 821336C8h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 821336C8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821336C8h case   10:*/		return 0x821336CC;
		  /* 821336CCh */ case   11:  		/* bc 12, CR6_EQ, 100 */
		/* 821336CCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 821336CCh case   11:*/		return 0x821336D0;
		  /* 821336D0h */ case   12:  		/* lis R9, 24656 */
		/* 821336D0h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x6050);
		/* 821336D0h case   12:*/		return 0x821336D4;
		  /* 821336D4h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 821336D4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821336D4h case   13:*/		return 0x821336D8;
		  /* 821336D8h */ case   14:  		/* bc 12, CR6_EQ, 88 */
		/* 821336D8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 821336D8h case   14:*/		return 0x821336DC;
		  /* 821336DCh */ case   15:  		/* lis R9, 24736 */
		/* 821336DCh case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0x60A0);
		/* 821336DCh case   15:*/		return 0x821336E0;
		  /* 821336E0h */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 821336E0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821336E0h case   16:*/		return 0x821336E4;
		  /* 821336E4h */ case   17:  		/* bc 12, CR6_EQ, 76 */
		/* 821336E4h case   17:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 821336E4h case   17:*/		return 0x821336E8;
		  /* 821336E8h */ case   18:  		/* lis R9, 24816 */
		/* 821336E8h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0x60F0);
		/* 821336E8h case   18:*/		return 0x821336EC;
		  /* 821336ECh */ case   19:  		/* cmplw CR6, R11, R9 */
		/* 821336ECh case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821336ECh case   19:*/		return 0x821336F0;
		  /* 821336F0h */ case   20:  		/* bc 12, CR6_EQ, 64 */
		/* 821336F0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 821336F0h case   20:*/		return 0x821336F4;
		  /* 821336F4h */ case   21:  		/* lis R9, 29408 */
		/* 821336F4h case   21:*/		cpu::op::lis<0>(regs,&regs.R9,0x72E0);
		/* 821336F4h case   21:*/		return 0x821336F8;
		  /* 821336F8h */ case   22:  		/* cmplw CR6, R11, R9 */
		/* 821336F8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821336F8h case   22:*/		return 0x821336FC;
		  /* 821336FCh */ case   23:  		/* bc 12, CR6_EQ, 52 */
		/* 821336FCh case   23:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 821336FCh case   23:*/		return 0x82133700;
		  /* 82133700h */ case   24:  		/* lis R9, 24688 */
		/* 82133700h case   24:*/		cpu::op::lis<0>(regs,&regs.R9,0x6070);
		/* 82133700h case   24:*/		return 0x82133704;
		  /* 82133704h */ case   25:  		/* cmplw CR6, R11, R9 */
		/* 82133704h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133704h case   25:*/		return 0x82133708;
		  /* 82133708h */ case   26:  		/* bc 12, CR6_EQ, 40 */
		/* 82133708h case   26:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 82133708h case   26:*/		return 0x8213370C;
		  /* 8213370Ch */ case   27:  		/* lis R9, 29376 */
		/* 8213370Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R9,0x72C0);
		/* 8213370Ch case   27:*/		return 0x82133710;
		  /* 82133710h */ case   28:  		/* cmplw CR6, R11, R9 */
		/* 82133710h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133710h case   28:*/		return 0x82133714;
		  /* 82133714h */ case   29:  		/* bc 12, CR6_EQ, 28 */
		/* 82133714h case   29:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 82133714h case   29:*/		return 0x82133718;
		  /* 82133718h */ case   30:  		/* lis R9, 29392 */
		/* 82133718h case   30:*/		cpu::op::lis<0>(regs,&regs.R9,0x72D0);
		/* 82133718h case   30:*/		return 0x8213371C;
		  /* 8213371Ch */ case   31:  		/* cmplw CR6, R11, R9 */
		/* 8213371Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213371Ch case   31:*/		return 0x82133720;
		  /* 82133720h */ case   32:  		/* bc 12, CR6_EQ, 16 */
		/* 82133720h case   32:*/		if ( regs.CR[6].eq ) { return 0x82133730;  }
		/* 82133720h case   32:*/		return 0x82133724;
		  /* 82133724h */ case   33:  		/* lis R9, 4352 */
		/* 82133724h case   33:*/		cpu::op::lis<0>(regs,&regs.R9,0x1100);
		/* 82133724h case   33:*/		return 0x82133728;
		  /* 82133728h */ case   34:  		/* cmplw CR6, R11, R9 */
		/* 82133728h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133728h case   34:*/		return 0x8213372C;
		  /* 8213372Ch */ case   35:  		/* bc 4, CR6_EQ, 80 */
		/* 8213372Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x8213377C;  }
		/* 8213372Ch case   35:*/		return 0x82133730;
	}
	return 0x82133730;
} // Block from 821336A0h-82133730h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82133730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133730);
		  /* 82133730h */ case    0:  		/* rlwinm R11, R10, 0, 12, 31 */
		/* 82133730h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 82133730h case    0:*/		return 0x82133734;
		  /* 82133734h */ case    1:  		/* rlwinm R6, R10, 1, 11, 30 */
		/* 82133734h case    1:*/		cpu::op::rlwinm<0,1,11,30>(regs,&regs.R6,regs.R10);
		/* 82133734h case    1:*/		return 0x82133738;
		  /* 82133738h */ case    2:  		/* mr R7, R11 */
		/* 82133738h case    2:*/		regs.R7 = regs.R11;
		/* 82133738h case    2:*/		return 0x8213373C;
		  /* 8213373Ch */ case    3:  		/* cmplw CR6, R11, R6 */
		/* 8213373Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 8213373Ch case    3:*/		return 0x82133740;
		  /* 82133740h */ case    4:  		/* bc 4, CR6_LT, 60 */
		/* 82133740h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8213377C;  }
		/* 82133740h case    4:*/		return 0x82133744;
		  /* 82133744h */ case    5:  		/* lwz R10, <#[R28 + 8]> */
		/* 82133744h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82133744h case    5:*/		return 0x82133748;
		  /* 82133748h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133748h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133748h case    6:*/		return 0x8213374C;
		  /* 8213374Ch */ case    7:  		/* lwz R9, <#[R25 + 20]> */
		/* 8213374Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000014) );
		/* 8213374Ch case    7:*/		return 0x82133750;
		  /* 82133750h */ case    8:  		/* lwz R8, <#[R25 + 136]> */
		/* 82133750h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000088) );
		/* 82133750h case    8:*/		return 0x82133754;
		  /* 82133754h */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82133754h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82133754h case    9:*/		return 0x82133758;
		  /* 82133758h */ case   10:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 82133758h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 82133758h case   10:*/		return 0x8213375C;
		  /* 8213375Ch */ case   11:  		/* lwzx R5, <#[R5 + R9]> */
		/* 8213375Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 8213375Ch case   11:*/		return 0x82133760;
		  /* 82133760h */ case   12:  		/* lwz R5, <#[R5 + 4]> */
		/* 82133760h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000004) );
		/* 82133760h case   12:*/		return 0x82133764;
		  /* 82133764h */ case   13:  		/* cmplw CR6, R5, R8 */
		/* 82133764h case   13:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 82133764h case   13:*/		return 0x82133768;
		  /* 82133768h */ case   14:  		/* bc 12, CR6_EQ, 128 */
		/* 82133768h case   14:*/		if ( regs.CR[6].eq ) { return 0x821337E8;  }
		/* 82133768h case   14:*/		return 0x8213376C;
		  /* 8213376Ch */ case   15:  		/* addi R7, R7, 1 */
		/* 8213376Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8213376Ch case   15:*/		return 0x82133770;
		  /* 82133770h */ case   16:  		/* addi R11, R11, 4 */
		/* 82133770h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82133770h case   16:*/		return 0x82133774;
		  /* 82133774h */ case   17:  		/* cmplw CR6, R7, R6 */
		/* 82133774h case   17:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 82133774h case   17:*/		return 0x82133778;
		  /* 82133778h */ case   18:  		/* bc 12, CR6_LT, -36 */
		/* 82133778h case   18:*/		if ( regs.CR[6].lt ) { return 0x82133754;  }
		/* 82133778h case   18:*/		return 0x8213377C;
	}
	return 0x8213377C;
} // Block from 82133730h-8213377Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8213377Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213377C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213377C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213377C);
		  /* 8213377Ch */ case    0:  		/* lwz R11, <#[R20]> */
		/* 8213377Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 8213377Ch case    0:*/		return 0x82133780;
		  /* 82133780h */ case    1:  		/* li R10, 1 */
		/* 82133780h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82133780h case    1:*/		return 0x82133784;
		  /* 82133784h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133784h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133784h case    2:*/		return 0x82133788;
		  /* 82133788h */ case    3:  		/* stwx R28, <#[R11 + R19]> */
		/* 82133788h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 82133788h case    3:*/		return 0x8213378C;
		  /* 8213378Ch */ case    4:  		/* lwz R11, <#[R25 + 24]> */
		/* 8213378Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 8213378Ch case    4:*/		return 0x82133790;
		  /* 82133790h */ case    5:  		/* lwzx R11, <#[R18 + R11]> */
		/* 82133790h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + regs.R11 + 0x00000000) );
		/* 82133790h case    5:*/		return 0x82133794;
		  /* 82133794h */ case    6:  		/* stw R10, <#[R11 + 36]> */
		/* 82133794h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82133794h case    6:*/		return 0x82133798;
		  /* 82133798h */ case    7:  		/* lwz R11, <#[R20]> */
		/* 82133798h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82133798h case    7:*/		return 0x8213379C;
		  /* 8213379Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8213379Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213379Ch case    8:*/		return 0x821337A0;
		  /* 821337A0h */ case    9:  		/* stw R11, <#[R20]> */
		/* 821337A0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821337A0h case    9:*/		return 0x821337A4;
	}
	return 0x821337A4;
} // Block from 8213377Ch-821337A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821337A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821337A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821337A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821337A4);
		  /* 821337A4h */ case    0:  		/* lwz R11, <#[R25 + 12]> */
		/* 821337A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821337A4h case    0:*/		return 0x821337A8;
		  /* 821337A8h */ case    1:  		/* addi R17, R17, 1 */
		/* 821337A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 821337A8h case    1:*/		return 0x821337AC;
		  /* 821337ACh */ case    2:  		/* addi R18, R18, 4 */
		/* 821337ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x4);
		/* 821337ACh case    2:*/		return 0x821337B0;
		  /* 821337B0h */ case    3:  		/* cmplw CR6, R17, R11 */
		/* 821337B0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 821337B0h case    3:*/		return 0x821337B4;
		  /* 821337B4h */ case    4:  		/* bc 12, CR6_LT, -536 */
		/* 821337B4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213359C;  }
		/* 821337B4h case    4:*/		return 0x821337B8;
	}
	return 0x821337B8;
} // Block from 821337A4h-821337B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821337B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821337B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821337B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821337B8);
		  /* 821337B8h */ case    0:  		/* li R3, 0 */
		/* 821337B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821337B8h case    0:*/		return 0x821337BC;
	}
	return 0x821337BC;
} // Block from 821337B8h-821337BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821337BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821337BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821337BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821337BC);
		  /* 821337BCh */ case    0:  		/* addi R1, R1, 224 */
		/* 821337BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821337BCh case    0:*/		return 0x821337C0;
		  /* 821337C0h */ case    1:  		/* b -664908 */
		/* 821337C0h case    1:*/		return 0x82091274;
		/* 821337C0h case    1:*/		return 0x821337C4;
	}
	return 0x821337C4;
} // Block from 821337BCh-821337C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821337C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821337C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821337C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821337C4);
		  /* 821337C4h */ case    0:  		/* lis R11, -32253 */
		/* 821337C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821337C4h case    0:*/		return 0x821337C8;
		  /* 821337C8h */ case    1:  		/* li R5, 4513 */
		/* 821337C8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11A1);
		/* 821337C8h case    1:*/		return 0x821337CC;
		  /* 821337CCh */ case    2:  		/* addi R6, R11, 20496 */
		/* 821337CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5010);
		/* 821337CCh case    2:*/		return 0x821337D0;
		  /* 821337D0h */ case    3:  		/* mr R3, R25 */
		/* 821337D0h case    3:*/		regs.R3 = regs.R25;
		/* 821337D0h case    3:*/		return 0x821337D4;
		  /* 821337D4h */ case    4:  		/* lwz R4, <#[R28 + 60]> */
		/* 821337D4h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000003C) );
		/* 821337D4h case    4:*/		return 0x821337D8;
		  /* 821337D8h */ case    5:  		/* bl -151720 */
		/* 821337D8h case    5:*/		regs.LR = 0x821337DC; return 0x8210E730;
		/* 821337D8h case    5:*/		return 0x821337DC;
		  /* 821337DCh */ case    6:  		/* lis R3, -32768 */
		/* 821337DCh case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 821337DCh case    6:*/		return 0x821337E0;
		  /* 821337E0h */ case    7:  		/* ori R3, R3, 16389 */
		/* 821337E0h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 821337E0h case    7:*/		return 0x821337E4;
		  /* 821337E4h */ case    8:  		/* b -40 */
		/* 821337E4h case    8:*/		return 0x821337BC;
		/* 821337E4h case    8:*/		return 0x821337E8;
	}
	return 0x821337E8;
} // Block from 821337C4h-821337E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821337E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821337E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821337E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821337E8);
		  /* 821337E8h */ case    0:  		/* lis R11, -32253 */
		/* 821337E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821337E8h case    0:*/		return 0x821337EC;
		  /* 821337ECh */ case    1:  		/* li R5, 4534 */
		/* 821337ECh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11B6);
		/* 821337ECh case    1:*/		return 0x821337F0;
		  /* 821337F0h */ case    2:  		/* addi R6, R11, 20436 */
		/* 821337F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4FD4);
		/* 821337F0h case    2:*/		return 0x821337F4;
		  /* 821337F4h */ case    3:  		/* b -36 */
		/* 821337F4h case    3:*/		return 0x821337D0;
		/* 821337F4h case    3:*/		return 0x821337F8;
	}
	return 0x821337F8;
} // Block from 821337E8h-821337F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821337F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821337F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821337F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821337F8);
		  /* 821337F8h */ case    0:  		/* mfspr R12, LR */
		/* 821337F8h case    0:*/		regs.R12 = regs.LR;
		/* 821337F8h case    0:*/		return 0x821337FC;
		  /* 821337FCh */ case    1:  		/* bl -665052 */
		/* 821337FCh case    1:*/		regs.LR = 0x82133800; return 0x82091220;
		/* 821337FCh case    1:*/		return 0x82133800;
		  /* 82133800h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82133800h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82133800h case    2:*/		return 0x82133804;
		  /* 82133804h */ case    3:  		/* stwu R1, <#[R1 - 320]> */
		/* 82133804h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 82133804h case    3:*/		return 0x82133808;
		  /* 82133808h */ case    4:  		/* addi R11, R1, 128 */
		/* 82133808h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82133808h case    4:*/		return 0x8213380C;
		  /* 8213380Ch */ case    5:  		/* stw R5, <#[R1 + 356]> */
		/* 8213380Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000164) );
		/* 8213380Ch case    5:*/		return 0x82133810;
		  /* 82133810h */ case    6:  		/* li R21, 0 */
		/* 82133810h case    6:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82133810h case    6:*/		return 0x82133814;
		  /* 82133814h */ case    7:  		/* mr R27, R3 */
		/* 82133814h case    7:*/		regs.R27 = regs.R3;
		/* 82133814h case    7:*/		return 0x82133818;
	}
	return 0x82133818;
} // Block from 821337F8h-82133818h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82133818h
// Function '?MatchComplexAdd@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133818);
		  /* 82133818h */ case    0:  		/* mr R19, R4 */
		/* 82133818h case    0:*/		regs.R19 = regs.R4;
		/* 82133818h case    0:*/		return 0x8213381C;
		  /* 8213381Ch */ case    1:  		/* mr R14, R5 */
		/* 8213381Ch case    1:*/		regs.R14 = regs.R5;
		/* 8213381Ch case    1:*/		return 0x82133820;
		  /* 82133820h */ case    2:  		/* std R21, <#[R11]> */
		/* 82133820h case    2:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 82133820h case    2:*/		return 0x82133824;
		  /* 82133824h */ case    3:  		/* mr R18, R6 */
		/* 82133824h case    3:*/		regs.R18 = regs.R6;
		/* 82133824h case    3:*/		return 0x82133828;
		  /* 82133828h */ case    4:  		/* std R21, <#[R11 + 8]> */
		/* 82133828h case    4:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 82133828h case    4:*/		return 0x8213382C;
		  /* 8213382Ch */ case    5:  		/* mr R20, R7 */
		/* 8213382Ch case    5:*/		regs.R20 = regs.R7;
		/* 8213382Ch case    5:*/		return 0x82133830;
		  /* 82133830h */ case    6:  		/* mr R22, R8 */
		/* 82133830h case    6:*/		regs.R22 = regs.R8;
		/* 82133830h case    6:*/		return 0x82133834;
		  /* 82133834h */ case    7:  		/* std R21, <#[R11 + 16]> */
		/* 82133834h case    7:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000010) );
		/* 82133834h case    7:*/		return 0x82133838;
		  /* 82133838h */ case    8:  		/* mr R23, R9 */
		/* 82133838h case    8:*/		regs.R23 = regs.R9;
		/* 82133838h case    8:*/		return 0x8213383C;
		  /* 8213383Ch */ case    9:  		/* add. R29, R7, R9 */
		/* 8213383Ch case    9:*/		cpu::op::add<1>(regs,&regs.R29,regs.R7,regs.R9);
		/* 8213383Ch case    9:*/		return 0x82133840;
		  /* 82133840h */ case   10:  		/* lis R16, 24576 */
		/* 82133840h case   10:*/		cpu::op::lis<0>(regs,&regs.R16,0x6000);
		/* 82133840h case   10:*/		return 0x82133844;
		  /* 82133844h */ case   11:  		/* lis R17, 4352 */
		/* 82133844h case   11:*/		cpu::op::lis<0>(regs,&regs.R17,0x1100);
		/* 82133844h case   11:*/		return 0x82133848;
		  /* 82133848h */ case   12:  		/* lis R15, 29392 */
		/* 82133848h case   12:*/		cpu::op::lis<0>(regs,&regs.R15,0x72D0);
		/* 82133848h case   12:*/		return 0x8213384C;
		  /* 8213384Ch */ case   13:  		/* mr R30, R21 */
		/* 8213384Ch case   13:*/		regs.R30 = regs.R21;
		/* 8213384Ch case   13:*/		return 0x82133850;
		  /* 82133850h */ case   14:  		/* bc 12, CR0_EQ, 352 */
		/* 82133850h case   14:*/		if ( regs.CR[0].eq ) { return 0x821339B0;  }
		/* 82133850h case   14:*/		return 0x82133854;
		  /* 82133854h */ case   15:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 82133854h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 82133854h case   15:*/		return 0x82133858;
		  /* 82133858h */ case   16:  		/* mr R28, R6 */
		/* 82133858h case   16:*/		regs.R28 = regs.R6;
		/* 82133858h case   16:*/		return 0x8213385C;
		  /* 8213385Ch */ case   17:  		/* subf R26, R11, R8 */
		/* 8213385Ch case   17:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R11,regs.R8);
		/* 8213385Ch case   17:*/		return 0x82133860;
		  /* 82133860h */ case   18:  		/* cmplw CR6, R30, R20 */
		/* 82133860h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R20);
		/* 82133860h case   18:*/		return 0x82133864;
		  /* 82133864h */ case   19:  		/* bc 4, CR6_LT, 12 */
		/* 82133864h case   19:*/		if ( !regs.CR[6].lt ) { return 0x82133870;  }
		/* 82133864h case   19:*/		return 0x82133868;
		  /* 82133868h */ case   20:  		/* lwz R10, <#[R28]> */
		/* 82133868h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82133868h case   20:*/		return 0x8213386C;
		  /* 8213386Ch */ case   21:  		/* b 8 */
		/* 8213386Ch case   21:*/		return 0x82133874;
		/* 8213386Ch case   21:*/		return 0x82133870;
	}
	return 0x82133870;
} // Block from 82133818h-82133870h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82133870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133870);
		  /* 82133870h */ case    0:  		/* lwz R10, <#[R26]> */
		/* 82133870h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82133870h case    0:*/		return 0x82133874;
	}
	return 0x82133874;
} // Block from 82133870h-82133874h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82133874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133874);
		  /* 82133874h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82133874h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82133874h case    0:*/		return 0x82133878;
		  /* 82133878h */ case    1:  		/* bc 12, CR6_EQ, 292 */
		/* 82133878h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213399C;  }
		/* 82133878h case    1:*/		return 0x8213387C;
		  /* 8213387Ch */ case    2:  		/* lwz R11, <#[R10]> */
		/* 8213387Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213387Ch case    2:*/		return 0x82133880;
		  /* 82133880h */ case    3:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 82133880h case    3:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82133880h case    3:*/		return 0x82133884;
		  /* 82133884h */ case    4:  		/* bc 12, CR0_EQ, 280 */
		/* 82133884h case    4:*/		if ( regs.CR[0].eq ) { return 0x8213399C;  }
		/* 82133884h case    4:*/		return 0x82133888;
		  /* 82133888h */ case    5:  		/* lwz R9, <#[R10 + 36]> */
		/* 82133888h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000024) );
		/* 82133888h case    5:*/		return 0x8213388C;
		  /* 8213388Ch */ case    6:  		/* cmplwi CR6, R9, 1 */
		/* 8213388Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 8213388Ch case    6:*/		return 0x82133890;
		  /* 82133890h */ case    7:  		/* bc 12, CR6_EQ, 268 */
		/* 82133890h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213399C;  }
		/* 82133890h case    7:*/		return 0x82133894;
		  /* 82133894h */ case    8:  		/* cmplw CR6, R11, R16 */
		/* 82133894h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 82133894h case    8:*/		return 0x82133898;
		  /* 82133898h */ case    9:  		/* bc 12, CR6_EQ, 68 */
		/* 82133898h case    9:*/		if ( regs.CR[6].eq ) { return 0x821338DC;  }
		/* 82133898h case    9:*/		return 0x8213389C;
		  /* 8213389Ch */ case   10:  		/* lis R9, 24656 */
		/* 8213389Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0x6050);
		/* 8213389Ch case   10:*/		return 0x821338A0;
		  /* 821338A0h */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 821338A0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821338A0h case   11:*/		return 0x821338A4;
		  /* 821338A4h */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 821338A4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821338DC;  }
		/* 821338A4h case   12:*/		return 0x821338A8;
		  /* 821338A8h */ case   13:  		/* lis R9, 24736 */
		/* 821338A8h case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x60A0);
		/* 821338A8h case   13:*/		return 0x821338AC;
		  /* 821338ACh */ case   14:  		/* cmplw CR6, R11, R9 */
		/* 821338ACh case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821338ACh case   14:*/		return 0x821338B0;
		  /* 821338B0h */ case   15:  		/* bc 12, CR6_EQ, 44 */
		/* 821338B0h case   15:*/		if ( regs.CR[6].eq ) { return 0x821338DC;  }
		/* 821338B0h case   15:*/		return 0x821338B4;
		  /* 821338B4h */ case   16:  		/* lis R9, 24816 */
		/* 821338B4h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0x60F0);
		/* 821338B4h case   16:*/		return 0x821338B8;
		  /* 821338B8h */ case   17:  		/* cmplw CR6, R11, R9 */
		/* 821338B8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821338B8h case   17:*/		return 0x821338BC;
		  /* 821338BCh */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 821338BCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821338DC;  }
		/* 821338BCh case   18:*/		return 0x821338C0;
		  /* 821338C0h */ case   19:  		/* cmplw CR6, R11, R17 */
		/* 821338C0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 821338C0h case   19:*/		return 0x821338C4;
		  /* 821338C4h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 821338C4h case   20:*/		if ( regs.CR[6].eq ) { return 0x821338DC;  }
		/* 821338C4h case   20:*/		return 0x821338C8;
		  /* 821338C8h */ case   21:  		/* lis R9, 29376 */
		/* 821338C8h case   21:*/		cpu::op::lis<0>(regs,&regs.R9,0x72C0);
		/* 821338C8h case   21:*/		return 0x821338CC;
		  /* 821338CCh */ case   22:  		/* cmplw CR6, R11, R9 */
		/* 821338CCh case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821338CCh case   22:*/		return 0x821338D0;
		  /* 821338D0h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 821338D0h case   23:*/		if ( regs.CR[6].eq ) { return 0x821338DC;  }
		/* 821338D0h case   23:*/		return 0x821338D4;
		  /* 821338D4h */ case   24:  		/* cmplw CR6, R11, R15 */
		/* 821338D4h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 821338D4h case   24:*/		return 0x821338D8;
		  /* 821338D8h */ case   25:  		/* bc 4, CR6_EQ, 12 */
		/* 821338D8h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821338E4;  }
		/* 821338D8h case   25:*/		return 0x821338DC;
	}
	return 0x821338DC;
} // Block from 82133874h-821338DCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 821338DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821338DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821338DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821338DC);
		  /* 821338DCh */ case    0:  		/* cmplw CR6, R30, R20 */
		/* 821338DCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R20);
		/* 821338DCh case    0:*/		return 0x821338E0;
		  /* 821338E0h */ case    1:  		/* bc 12, CR6_LT, 188 */
		/* 821338E0h case    1:*/		if ( regs.CR[6].lt ) { return 0x8213399C;  }
		/* 821338E0h case    1:*/		return 0x821338E4;
	}
	return 0x821338E4;
} // Block from 821338DCh-821338E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821338E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821338E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821338E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821338E4);
		  /* 821338E4h */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 821338E4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821338E4h case    0:*/		return 0x821338E8;
		  /* 821338E8h */ case    1:  		/* mr R3, R21 */
		/* 821338E8h case    1:*/		regs.R3 = regs.R21;
		/* 821338E8h case    1:*/		return 0x821338EC;
		  /* 821338ECh */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821338ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821338ECh case    2:*/		return 0x821338F0;
		  /* 821338F0h */ case    3:  		/* bc 12, CR6_EQ, 172 */
		/* 821338F0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213399C;  }
		/* 821338F0h case    3:*/		return 0x821338F4;
		  /* 821338F4h */ case    4:  		/* lwz R6, <#[R10 + 8]> */
		/* 821338F4h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000008) );
		/* 821338F4h case    4:*/		return 0x821338F8;
		  /* 821338F8h */ case    5:  		/* mr R7, R21 */
		/* 821338F8h case    5:*/		regs.R7 = regs.R21;
		/* 821338F8h case    5:*/		return 0x821338FC;
		  /* 821338FCh */ case    6:  		/* lwz R5, <#[R27 + 20]> */
		/* 821338FCh case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000014) );
		/* 821338FCh case    6:*/		return 0x82133900;
		  /* 82133900h */ case    7:  		/* lwz R4, <#[R27 + 128]> */
		/* 82133900h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000080) );
		/* 82133900h case    7:*/		return 0x82133904;
		  /* 82133904h */ case    8:  		/* lwzx R11, <#[R7 + R6]> */
		/* 82133904h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 82133904h case    8:*/		return 0x82133908;
		  /* 82133908h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133908h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133908h case    9:*/		return 0x8213390C;
		  /* 8213390Ch */ case   10:  		/* lwzx R11, <#[R11 + R5]> */
		/* 8213390Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 8213390Ch case   10:*/		return 0x82133910;
		  /* 82133910h */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 82133910h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82133910h case   11:*/		return 0x82133914;
		  /* 82133914h */ case   12:  		/* cmplw CR6, R10, R4 */
		/* 82133914h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 82133914h case   12:*/		return 0x82133918;
		  /* 82133918h */ case   13:  		/* bc 4, CR6_EQ, 116 */
		/* 82133918h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8213398C;  }
		/* 82133918h case   13:*/		return 0x8213391C;
		  /* 8213391Ch */ case   14:  		/* lbz R10, <#[R11 + 110]> */
		/* 8213391Ch case   14:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006E) );
		/* 8213391Ch case   14:*/		return 0x82133920;
		  /* 82133920h */ case   15:  		/* cmplwi CR6, R10, 5 */
		/* 82133920h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82133920h case   15:*/		return 0x82133924;
		  /* 82133924h */ case   16:  		/* bc 12, CR6_GT, 120 */
		/* 82133924h case   16:*/		if ( regs.CR[6].gt ) { return 0x8213399C;  }
		/* 82133924h case   16:*/		return 0x82133928;
		  /* 82133928h */ case   17:  		/* lbz R9, <#[R11 + 111]> */
		/* 82133928h case   17:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000006F) );
		/* 82133928h case   17:*/		return 0x8213392C;
		  /* 8213392Ch */ case   18:  		/* cmplwi CR6, R9, 3 */
		/* 8213392Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 8213392Ch case   18:*/		return 0x82133930;
		  /* 82133930h */ case   19:  		/* bc 4, CR6_EQ, 92 */
		/* 82133930h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8213398C;  }
		/* 82133930h case   19:*/		return 0x82133934;
		  /* 82133934h */ case   20:  		/* cmplw CR6, R30, R20 */
		/* 82133934h case   20:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R20);
		/* 82133934h case   20:*/		return 0x82133938;
		  /* 82133938h */ case   21:  		/* bc 12, CR6_LT, 52 */
		/* 82133938h case   21:*/		if ( regs.CR[6].lt ) { return 0x8213396C;  }
		/* 82133938h case   21:*/		return 0x8213393C;
		  /* 8213393Ch */ case   22:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 8213393Ch case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 8213393Ch case   22:*/		return 0x82133940;
		  /* 82133940h */ case   23:  		/* lwz R10, <#[R11 + 16]> */
		/* 82133940h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82133940h case   23:*/		return 0x82133944;
		  /* 82133944h */ case   24:  		/* addi R9, R1, 128 */
		/* 82133944h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 82133944h case   24:*/		return 0x82133948;
		  /* 82133948h */ case   25:  		/* addi R10, R10, 1 */
		/* 82133948h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82133948h case   25:*/		return 0x8213394C;
		  /* 8213394Ch */ case   26:  		/* lwzx R25, <#[R8 + R9]> */
		/* 8213394Ch case   26:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 8213394Ch case   26:*/		return 0x82133950;
		  /* 82133950h */ case   27:  		/* cmplw CR6, R10, R25 */
		/* 82133950h case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 82133950h case   27:*/		return 0x82133954;
		  /* 82133954h */ case   28:  		/* bc 4, CR6_GT, 56 */
		/* 82133954h case   28:*/		if ( !regs.CR[6].gt ) { return 0x8213398C;  }
		/* 82133954h case   28:*/		return 0x82133958;
		  /* 82133958h */ case   29:  		/* lwz R11, <#[R11 + 60]> */
		/* 82133958h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 82133958h case   29:*/		return 0x8213395C;
		  /* 8213395Ch */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 8213395Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213395Ch case   30:*/		return 0x82133960;
		  /* 82133960h */ case   31:  		/* bc 12, CR6_EQ, 44 */
		/* 82133960h case   31:*/		if ( regs.CR[6].eq ) { return 0x8213398C;  }
		/* 82133960h case   31:*/		return 0x82133964;
		  /* 82133964h */ case   32:  		/* stwx R10, <#[R8 + R9]> */
		/* 82133964h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82133964h case   32:*/		return 0x82133968;
		  /* 82133968h */ case   33:  		/* b 36 */
		/* 82133968h case   33:*/		return 0x8213398C;
		/* 82133968h case   33:*/		return 0x8213396C;
	}
	return 0x8213396C;
} // Block from 821338E4h-8213396Ch (34 instructions)

//////////////////////////////////////////////////////
// Block at 8213396Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213396C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213396C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213396C);
		  /* 8213396Ch */ case    0:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 8213396Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 8213396Ch case    0:*/		return 0x82133970;
		  /* 82133970h */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 82133970h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82133970h case    1:*/		return 0x82133974;
		  /* 82133974h */ case    2:  		/* addi R10, R1, 128 */
		/* 82133974h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82133974h case    2:*/		return 0x82133978;
		  /* 82133978h */ case    3:  		/* addi R11, R11, 1 */
		/* 82133978h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82133978h case    3:*/		return 0x8213397C;
		  /* 8213397Ch */ case    4:  		/* lwzx R8, <#[R9 + R10]> */
		/* 8213397Ch case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213397Ch case    4:*/		return 0x82133980;
		  /* 82133980h */ case    5:  		/* cmplw CR6, R11, R8 */
		/* 82133980h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82133980h case    5:*/		return 0x82133984;
		  /* 82133984h */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 82133984h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8213398C;  }
		/* 82133984h case    6:*/		return 0x82133988;
		  /* 82133988h */ case    7:  		/* stwx R11, <#[R9 + R10]> */
		/* 82133988h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82133988h case    7:*/		return 0x8213398C;
	}
	return 0x8213398C;
} // Block from 8213396Ch-8213398Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213398Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213398C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213398C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213398C);
		  /* 8213398Ch */ case    0:  		/* addi R3, R3, 1 */
		/* 8213398Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 8213398Ch case    0:*/		return 0x82133990;
		  /* 82133990h */ case    1:  		/* addi R7, R7, 4 */
		/* 82133990h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82133990h case    1:*/		return 0x82133994;
		  /* 82133994h */ case    2:  		/* cmplw CR6, R3, R31 */
		/* 82133994h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 82133994h case    2:*/		return 0x82133998;
		  /* 82133998h */ case    3:  		/* bc 12, CR6_LT, -148 */
		/* 82133998h case    3:*/		if ( regs.CR[6].lt ) { return 0x82133904;  }
		/* 82133998h case    3:*/		return 0x8213399C;
	}
	return 0x8213399C;
} // Block from 8213398Ch-8213399Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213399Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213399C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213399C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213399C);
		  /* 8213399Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 8213399Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213399Ch case    0:*/		return 0x821339A0;
		  /* 821339A0h */ case    1:  		/* addi R28, R28, 4 */
		/* 821339A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821339A0h case    1:*/		return 0x821339A4;
		  /* 821339A4h */ case    2:  		/* addi R26, R26, 4 */
		/* 821339A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821339A4h case    2:*/		return 0x821339A8;
		  /* 821339A8h */ case    3:  		/* cmplw CR6, R30, R29 */
		/* 821339A8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821339A8h case    3:*/		return 0x821339AC;
		  /* 821339ACh */ case    4:  		/* bc 12, CR6_LT, -332 */
		/* 821339ACh case    4:*/		if ( regs.CR[6].lt ) { return 0x82133860;  }
		/* 821339ACh case    4:*/		return 0x821339B0;
	}
	return 0x821339B0;
} // Block from 8213399Ch-821339B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821339B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821339B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821339B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821339B0);
		  /* 821339B0h */ case    0:  		/* lwz R11, <#[R27 + 60]> */
		/* 821339B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 821339B0h case    0:*/		return 0x821339B4;
		  /* 821339B4h */ case    1:  		/* mr R29, R21 */
		/* 821339B4h case    1:*/		regs.R29 = regs.R21;
		/* 821339B4h case    1:*/		return 0x821339B8;
		  /* 821339B8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821339B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821339B8h case    2:*/		return 0x821339BC;
		  /* 821339BCh */ case    3:  		/* bc 4, CR6_GT, 484 */
		/* 821339BCh case    3:*/		if ( !regs.CR[6].gt ) { return 0x82133BA0;  }
		/* 821339BCh case    3:*/		return 0x821339C0;
		  /* 821339C0h */ case    4:  		/* addi R11, R1, 128 */
		/* 821339C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 821339C0h case    4:*/		return 0x821339C4;
		  /* 821339C4h */ case    5:  		/* addi R25, R1, 128 */
		/* 821339C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0x80);
		/* 821339C4h case    5:*/		return 0x821339C8;
		  /* 821339C8h */ case    6:  		/* subf R24, R11, R19 */
		/* 821339C8h case    6:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R11,regs.R19);
		/* 821339C8h case    6:*/		return 0x821339CC;
		  /* 821339CCh */ case    7:  		/* lis R11, -32256 */
		/* 821339CCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821339CCh case    7:*/		return 0x821339D0;
		  /* 821339D0h */ case    8:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 821339D0h case    8:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 821339D0h case    8:*/		return 0x821339D4;
		  /* 821339D4h */ case    9:  		/* lwz R28, <#[R25]> */
		/* 821339D4h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x00000000) );
		/* 821339D4h case    9:*/		return 0x821339D8;
		  /* 821339D8h */ case   10:  		/* cmplwi CR6, R28, 0 */
		/* 821339D8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821339D8h case   10:*/		return 0x821339DC;
		  /* 821339DCh */ case   11:  		/* bc 12, CR6_EQ, 432 */
		/* 821339DCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82133B8C;  }
		/* 821339DCh case   11:*/		return 0x821339E0;
		  /* 821339E0h */ case   12:  		/* li R3, 116 */
		/* 821339E0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 821339E0h case   12:*/		return 0x821339E4;
		  /* 821339E4h */ case   13:  		/* bl -226380 */
		/* 821339E4h case   13:*/		regs.LR = 0x821339E8; return 0x820FC598;
		/* 821339E4h case   13:*/		return 0x821339E8;
		  /* 821339E8h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 821339E8h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821339E8h case   14:*/		return 0x821339EC;
		  /* 821339ECh */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821339ECh case   15:*/		if ( regs.CR[0].eq ) { return 0x821339FC;  }
		/* 821339ECh case   15:*/		return 0x821339F0;
		  /* 821339F0h */ case   16:  		/* bl -228176 */
		/* 821339F0h case   16:*/		regs.LR = 0x821339F4; return 0x820FBEA0;
		/* 821339F0h case   16:*/		return 0x821339F4;
		  /* 821339F4h */ case   17:  		/* mr R26, R3 */
		/* 821339F4h case   17:*/		regs.R26 = regs.R3;
		/* 821339F4h case   17:*/		return 0x821339F8;
		  /* 821339F8h */ case   18:  		/* b 8 */
		/* 821339F8h case   18:*/		return 0x82133A00;
		/* 821339F8h case   18:*/		return 0x821339FC;
	}
	return 0x821339FC;
} // Block from 821339B0h-821339FCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821339FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821339FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821339FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821339FC);
		  /* 821339FCh */ case    0:  		/* mr R26, R21 */
		/* 821339FCh case    0:*/		regs.R26 = regs.R21;
		/* 821339FCh case    0:*/		return 0x82133A00;
	}
	return 0x82133A00;
} // Block from 821339FCh-82133A00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82133A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133A00);
		  /* 82133A00h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82133A00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82133A00h case    0:*/		return 0x82133A04;
		  /* 82133A04h */ case    1:  		/* bc 12, CR6_EQ, 468 */
		/* 82133A04h case    1:*/		if ( regs.CR[6].eq ) { return 0x82133BD8;  }
		/* 82133A04h case    1:*/		return 0x82133A08;
		  /* 82133A08h */ case    2:  		/* li R11, 1825 */
		/* 82133A08h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x721);
		/* 82133A08h case    2:*/		return 0x82133A0C;
		  /* 82133A0Ch */ case    3:  		/* mr R4, R28 */
		/* 82133A0Ch case    3:*/		regs.R4 = regs.R28;
		/* 82133A0Ch case    3:*/		return 0x82133A10;
		  /* 82133A10h */ case    4:  		/* li R7, 0 */
		/* 82133A10h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82133A10h case    4:*/		return 0x82133A14;
		  /* 82133A14h */ case    5:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 82133A14h case    5:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 82133A14h case    5:*/		return 0x82133A18;
		  /* 82133A18h */ case    6:  		/* mr R6, R28 */
		/* 82133A18h case    6:*/		regs.R6 = regs.R28;
		/* 82133A18h case    6:*/		return 0x82133A1C;
		  /* 82133A1Ch */ case    7:  		/* mr R5, R28 */
		/* 82133A1Ch case    7:*/		regs.R5 = regs.R28;
		/* 82133A1Ch case    7:*/		return 0x82133A20;
		  /* 82133A20h */ case    8:  		/* mr R3, R26 */
		/* 82133A20h case    8:*/		regs.R3 = regs.R26;
		/* 82133A20h case    8:*/		return 0x82133A24;
		  /* 82133A24h */ case    9:  		/* bl -226292 */
		/* 82133A24h case    9:*/		regs.LR = 0x82133A28; return 0x820FC630;
		/* 82133A24h case    9:*/		return 0x82133A28;
		  /* 82133A28h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82133A28h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82133A28h case   10:*/		return 0x82133A2C;
		  /* 82133A2Ch */ case   11:  		/* bc 12, CR0_LT, 440 */
		/* 82133A2Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x82133BE4;  }
		/* 82133A2Ch case   11:*/		return 0x82133A30;
		  /* 82133A30h */ case   12:  		/* mr R30, R21 */
		/* 82133A30h case   12:*/		regs.R30 = regs.R21;
		/* 82133A30h case   12:*/		return 0x82133A34;
		  /* 82133A34h */ case   13:  		/* cmplwi CR6, R28, 0 */
		/* 82133A34h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82133A34h case   13:*/		return 0x82133A38;
		  /* 82133A38h */ case   14:  		/* bc 12, CR6_EQ, 112 */
		/* 82133A38h case   14:*/		if ( regs.CR[6].eq ) { return 0x82133AA8;  }
		/* 82133A38h case   14:*/		return 0x82133A3C;
		  /* 82133A3Ch */ case   15:  		/* mr R31, R21 */
		/* 82133A3Ch case   15:*/		regs.R31 = regs.R21;
		/* 82133A3Ch case   15:*/		return 0x82133A40;
		  /* 82133A40h */ case   16:  		/* mr R6, R30 */
		/* 82133A40h case   16:*/		regs.R6 = regs.R30;
		/* 82133A40h case   16:*/		return 0x82133A44;
		  /* 82133A44h */ case   17:  		/* lwz R4, <#[R27 + 136]> */
		/* 82133A44h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000088) );
		/* 82133A44h case   17:*/		return 0x82133A48;
		  /* 82133A48h */ case   18:  		/* mr R5, R29 */
		/* 82133A48h case   18:*/		regs.R5 = regs.R29;
		/* 82133A48h case   18:*/		return 0x82133A4C;
		  /* 82133A4Ch */ case   19:  		/* fmr FR1, FR31 */
		/* 82133A4Ch case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82133A4Ch case   19:*/		return 0x82133A50;
		  /* 82133A50h */ case   20:  		/* mr R3, R27 */
		/* 82133A50h case   20:*/		regs.R3 = regs.R27;
		/* 82133A50h case   20:*/		return 0x82133A54;
		  /* 82133A54h */ case   21:  		/* bl -223276 */
		/* 82133A54h case   21:*/		regs.LR = 0x82133A58; return 0x820FD228;
		/* 82133A54h case   21:*/		return 0x82133A58;
		  /* 82133A58h */ case   22:  		/* addi R11, R1, 96 */
		/* 82133A58h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82133A58h case   22:*/		return 0x82133A5C;
		  /* 82133A5Ch */ case   23:  		/* cmpwi CR6, R3, -1 */
		/* 82133A5Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82133A5Ch case   23:*/		return 0x82133A60;
		  /* 82133A60h */ case   24:  		/* stwx R3, <#[R31 + R11]> */
		/* 82133A60h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82133A60h case   24:*/		return 0x82133A64;
		  /* 82133A64h */ case   25:  		/* bc 12, CR6_EQ, 412 */
		/* 82133A64h case   25:*/		if ( regs.CR[6].eq ) { return 0x82133C00;  }
		/* 82133A64h case   25:*/		return 0x82133A68;
		  /* 82133A68h */ case   26:  		/* lwz R11, <#[R26 + 16]> */
		/* 82133A68h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82133A68h case   26:*/		return 0x82133A6C;
		  /* 82133A6Ch */ case   27:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82133A6Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82133A6Ch case   27:*/		return 0x82133A70;
		  /* 82133A70h */ case   28:  		/* li R9, 3 */
		/* 82133A70h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82133A70h case   28:*/		return 0x82133A74;
		  /* 82133A74h */ case   29:  		/* lwz R8, <#[R25]> */
		/* 82133A74h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000000) );
		/* 82133A74h case   29:*/		return 0x82133A78;
		  /* 82133A78h */ case   30:  		/* li R7, -1 */
		/* 82133A78h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 82133A78h case   30:*/		return 0x82133A7C;
		  /* 82133A7Ch */ case   31:  		/* rlwimi R9, R29, 8, 0, 23 */
		/* 82133A7Ch case   31:*/		cpu::op::rlwimi<0,8,0,23>(regs,&regs.R9,regs.R29);
		/* 82133A7Ch case   31:*/		return 0x82133A80;
		  /* 82133A80h */ case   32:  		/* addi R30, R30, 1 */
		/* 82133A80h case   32:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82133A80h case   32:*/		return 0x82133A84;
		  /* 82133A84h */ case   33:  		/* stwx R3, <#[R11 + R31]> */
		/* 82133A84h case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82133A84h case   33:*/		return 0x82133A88;
		  /* 82133A88h */ case   34:  		/* addi R31, R31, 4 */
		/* 82133A88h case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82133A88h case   34:*/		return 0x82133A8C;
		  /* 82133A8Ch */ case   35:  		/* lwz R11, <#[R27 + 20]> */
		/* 82133A8Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82133A8Ch case   35:*/		return 0x82133A90;
		  /* 82133A90h */ case   36:  		/* cmplw CR6, R30, R8 */
		/* 82133A90h case   36:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R8);
		/* 82133A90h case   36:*/		return 0x82133A94;
		  /* 82133A94h */ case   37:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82133A94h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133A94h case   37:*/		return 0x82133A98;
		  /* 82133A98h */ case   38:  		/* stw R9, <#[R11 + 108]> */
		/* 82133A98h case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 82133A98h case   38:*/		return 0x82133A9C;
		  /* 82133A9Ch */ case   39:  		/* stw R21, <#[R11 + 60]> */
		/* 82133A9Ch case   39:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000003C) );
		/* 82133A9Ch case   39:*/		return 0x82133AA0;
		  /* 82133AA0h */ case   40:  		/* stw R7, <#[R11 + 56]> */
		/* 82133AA0h case   40:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000038) );
		/* 82133AA0h case   40:*/		return 0x82133AA4;
		  /* 82133AA4h */ case   41:  		/* bc 12, CR6_LT, -100 */
		/* 82133AA4h case   41:*/		if ( regs.CR[6].lt ) { return 0x82133A40;  }
		/* 82133AA4h case   41:*/		return 0x82133AA8;
	}
	return 0x82133AA8;
} // Block from 82133A00h-82133AA8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82133AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133AA8);
		  /* 82133AA8h */ case    0:  		/* addi R9, R1, 96 */
		/* 82133AA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82133AA8h case    0:*/		return 0x82133AAC;
		  /* 82133AACh */ case    1:  		/* mr R8, R28 */
		/* 82133AACh case    1:*/		regs.R8 = regs.R28;
		/* 82133AACh case    1:*/		return 0x82133AB0;
		  /* 82133AB0h */ case    2:  		/* mr R7, R29 */
		/* 82133AB0h case    2:*/		regs.R7 = regs.R29;
		/* 82133AB0h case    2:*/		return 0x82133AB4;
		  /* 82133AB4h */ case    3:  		/* li R6, 3 */
		/* 82133AB4h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82133AB4h case    3:*/		return 0x82133AB8;
		  /* 82133AB8h */ case    4:  		/* mr R5, R20 */
		/* 82133AB8h case    4:*/		regs.R5 = regs.R20;
		/* 82133AB8h case    4:*/		return 0x82133ABC;
		  /* 82133ABCh */ case    5:  		/* mr R4, R18 */
		/* 82133ABCh case    5:*/		regs.R4 = regs.R18;
		/* 82133ABCh case    5:*/		return 0x82133AC0;
		  /* 82133AC0h */ case    6:  		/* mr R3, R27 */
		/* 82133AC0h case    6:*/		regs.R3 = regs.R27;
		/* 82133AC0h case    6:*/		return 0x82133AC4;
		  /* 82133AC4h */ case    7:  		/* bl -2244 */
		/* 82133AC4h case    7:*/		regs.LR = 0x82133AC8; return 0x82133200;
		/* 82133AC4h case    7:*/		return 0x82133AC8;
		  /* 82133AC8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82133AC8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82133AC8h case    8:*/		return 0x82133ACC;
		  /* 82133ACCh */ case    9:  		/* bc 12, CR0_LT, 280 */
		/* 82133ACCh case    9:*/		if ( regs.CR[0].lt ) { return 0x82133BE4;  }
		/* 82133ACCh case    9:*/		return 0x82133AD0;
		  /* 82133AD0h */ case   10:  		/* addi R9, R1, 96 */
		/* 82133AD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82133AD0h case   10:*/		return 0x82133AD4;
		  /* 82133AD4h */ case   11:  		/* mr R8, R28 */
		/* 82133AD4h case   11:*/		regs.R8 = regs.R28;
		/* 82133AD4h case   11:*/		return 0x82133AD8;
		  /* 82133AD8h */ case   12:  		/* mr R7, R29 */
		/* 82133AD8h case   12:*/		regs.R7 = regs.R29;
		/* 82133AD8h case   12:*/		return 0x82133ADC;
		  /* 82133ADCh */ case   13:  		/* li R6, 3 */
		/* 82133ADCh case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82133ADCh case   13:*/		return 0x82133AE0;
		  /* 82133AE0h */ case   14:  		/* mr R5, R23 */
		/* 82133AE0h case   14:*/		regs.R5 = regs.R23;
		/* 82133AE0h case   14:*/		return 0x82133AE4;
		  /* 82133AE4h */ case   15:  		/* mr R4, R22 */
		/* 82133AE4h case   15:*/		regs.R4 = regs.R22;
		/* 82133AE4h case   15:*/		return 0x82133AE8;
	}
	return 0x82133AE8;
} // Block from 82133AA8h-82133AE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82133AE8h
// Function '?AddChild@D3DXShader@@YAJPAVCInstruction@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133AE8);
		  /* 82133AE8h */ case    0:  		/* mr R3, R27 */
		/* 82133AE8h case    0:*/		regs.R3 = regs.R27;
		/* 82133AE8h case    0:*/		return 0x82133AEC;
		  /* 82133AECh */ case    1:  		/* bl -1820 */
		/* 82133AECh case    1:*/		regs.LR = 0x82133AF0; return 0x821333D0;
		/* 82133AECh case    1:*/		return 0x82133AF0;
		  /* 82133AF0h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82133AF0h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82133AF0h case    2:*/		return 0x82133AF4;
		  /* 82133AF4h */ case    3:  		/* bc 12, CR0_LT, 240 */
		/* 82133AF4h case    3:*/		if ( regs.CR[0].lt ) { return 0x82133BE4;  }
		/* 82133AF4h case    3:*/		return 0x82133AF8;
		  /* 82133AF8h */ case    4:  		/* mr R30, R21 */
		/* 82133AF8h case    4:*/		regs.R30 = regs.R21;
		/* 82133AF8h case    4:*/		return 0x82133AFC;
		  /* 82133AFCh */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 82133AFCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82133AFCh case    5:*/		return 0x82133B00;
		  /* 82133B00h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 82133B00h case    6:*/		if ( regs.CR[6].eq ) { return 0x82133B68;  }
		/* 82133B00h case    6:*/		return 0x82133B04;
		  /* 82133B04h */ case    7:  		/* mr R31, R21 */
		/* 82133B04h case    7:*/		regs.R31 = regs.R21;
		/* 82133B04h case    7:*/		return 0x82133B08;
		  /* 82133B08h */ case    8:  		/* mr R6, R30 */
		/* 82133B08h case    8:*/		regs.R6 = regs.R30;
		/* 82133B08h case    8:*/		return 0x82133B0C;
		  /* 82133B0Ch */ case    9:  		/* lwz R4, <#[R27 + 128]> */
		/* 82133B0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000080) );
		/* 82133B0Ch case    9:*/		return 0x82133B10;
		  /* 82133B10h */ case   10:  		/* mr R5, R29 */
		/* 82133B10h case   10:*/		regs.R5 = regs.R29;
		/* 82133B10h case   10:*/		return 0x82133B14;
		  /* 82133B14h */ case   11:  		/* fmr FR1, FR31 */
		/* 82133B14h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82133B14h case   11:*/		return 0x82133B18;
		  /* 82133B18h */ case   12:  		/* mr R3, R27 */
		/* 82133B18h case   12:*/		regs.R3 = regs.R27;
		/* 82133B18h case   12:*/		return 0x82133B1C;
		  /* 82133B1Ch */ case   13:  		/* bl -223476 */
		/* 82133B1Ch case   13:*/		regs.LR = 0x82133B20; return 0x820FD228;
		/* 82133B1Ch case   13:*/		return 0x82133B20;
		  /* 82133B20h */ case   14:  		/* addi R11, R1, 112 */
		/* 82133B20h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82133B20h case   14:*/		return 0x82133B24;
		  /* 82133B24h */ case   15:  		/* cmpwi CR6, R3, -1 */
		/* 82133B24h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82133B24h case   15:*/		return 0x82133B28;
		  /* 82133B28h */ case   16:  		/* stwx R3, <#[R31 + R11]> */
		/* 82133B28h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82133B28h case   16:*/		return 0x82133B2C;
		  /* 82133B2Ch */ case   17:  		/* bc 12, CR6_EQ, 212 */
		/* 82133B2Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82133C00;  }
		/* 82133B2Ch case   17:*/		return 0x82133B30;
		  /* 82133B30h */ case   18:  		/* lwz R11, <#[R27 + 20]> */
		/* 82133B30h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82133B30h case   18:*/		return 0x82133B34;
		  /* 82133B34h */ case   19:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82133B34h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82133B34h case   19:*/		return 0x82133B38;
		  /* 82133B38h */ case   20:  		/* li R9, 3 */
		/* 82133B38h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82133B38h case   20:*/		return 0x82133B3C;
		  /* 82133B3Ch */ case   21:  		/* lwz R8, <#[R25]> */
		/* 82133B3Ch case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000000) );
		/* 82133B3Ch case   21:*/		return 0x82133B40;
		  /* 82133B40h */ case   22:  		/* addi R30, R30, 1 */
		/* 82133B40h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82133B40h case   22:*/		return 0x82133B44;
		  /* 82133B44h */ case   23:  		/* rlwimi R9, R29, 8, 0, 23 */
		/* 82133B44h case   23:*/		cpu::op::rlwimi<0,8,0,23>(regs,&regs.R9,regs.R29);
		/* 82133B44h case   23:*/		return 0x82133B48;
		  /* 82133B48h */ case   24:  		/* cmplw CR6, R30, R8 */
		/* 82133B48h case   24:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R8);
		/* 82133B48h case   24:*/		return 0x82133B4C;
		  /* 82133B4Ch */ case   25:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82133B4Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133B4Ch case   25:*/		return 0x82133B50;
		  /* 82133B50h */ case   26:  		/* stw R9, <#[R11 + 108]> */
		/* 82133B50h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 82133B50h case   26:*/		return 0x82133B54;
		  /* 82133B54h */ case   27:  		/* stw R21, <#[R11 + 60]> */
		/* 82133B54h case   27:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000003C) );
		/* 82133B54h case   27:*/		return 0x82133B58;
		  /* 82133B58h */ case   28:  		/* lwz R11, <#[R26 + 8]> */
		/* 82133B58h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82133B58h case   28:*/		return 0x82133B5C;
		  /* 82133B5Ch */ case   29:  		/* stwx R3, <#[R11 + R31]> */
		/* 82133B5Ch case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82133B5Ch case   29:*/		return 0x82133B60;
		  /* 82133B60h */ case   30:  		/* addi R31, R31, 4 */
		/* 82133B60h case   30:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82133B60h case   30:*/		return 0x82133B64;
		  /* 82133B64h */ case   31:  		/* bc 12, CR6_LT, -92 */
		/* 82133B64h case   31:*/		if ( regs.CR[6].lt ) { return 0x82133B08;  }
		/* 82133B64h case   31:*/		return 0x82133B68;
	}
	return 0x82133B68;
} // Block from 82133AE8h-82133B68h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82133B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133B68);
		  /* 82133B68h */ case    0:  		/* lwzx R11, <#[R24 + R25]> */
		/* 82133B68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + regs.R25 + 0x00000000) );
		/* 82133B68h case    0:*/		return 0x82133B6C;
		  /* 82133B6Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82133B6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133B6Ch case    1:*/		return 0x82133B70;
		  /* 82133B70h */ case    2:  		/* bc 4, CR6_EQ, 156 */
		/* 82133B70h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82133C0C;  }
		/* 82133B70h case    2:*/		return 0x82133B74;
		  /* 82133B74h */ case    3:  		/* mr R4, R26 */
		/* 82133B74h case    3:*/		regs.R4 = regs.R26;
		/* 82133B74h case    3:*/		return 0x82133B78;
	}
	return 0x82133B78;
} // Block from 82133B68h-82133B78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82133B78h
// Function '?LegacyChildParentInfo@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133B78);
		  /* 82133B78h */ case    0:  		/* mr R3, R27 */
		/* 82133B78h case    0:*/		regs.R3 = regs.R27;
		/* 82133B78h case    0:*/		return 0x82133B7C;
		  /* 82133B7Ch */ case    1:  		/* bl -223940 */
		/* 82133B7Ch case    1:*/		regs.LR = 0x82133B80; return 0x820FD0B8;
		/* 82133B7Ch case    1:*/		return 0x82133B80;
		  /* 82133B80h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82133B80h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82133B80h case    2:*/		return 0x82133B84;
		  /* 82133B84h */ case    3:  		/* bc 12, CR0_LT, 1580 */
		/* 82133B84h case    3:*/		if ( regs.CR[0].lt ) { return 0x821341B0;  }
		/* 82133B84h case    3:*/		return 0x82133B88;
		  /* 82133B88h */ case    4:  		/* stwx R26, <#[R24 + R25]> */
		/* 82133B88h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R24 + regs.R25 + 0x00000000) );
		/* 82133B88h case    4:*/		return 0x82133B8C;
	}
	return 0x82133B8C;
} // Block from 82133B78h-82133B8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82133B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133B8C);
		  /* 82133B8Ch */ case    0:  		/* lwz R11, <#[R27 + 60]> */
		/* 82133B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 82133B8Ch case    0:*/		return 0x82133B90;
		  /* 82133B90h */ case    1:  		/* addi R29, R29, 1 */
		/* 82133B90h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82133B90h case    1:*/		return 0x82133B94;
		  /* 82133B94h */ case    2:  		/* addi R25, R25, 4 */
		/* 82133B94h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82133B94h case    2:*/		return 0x82133B98;
		  /* 82133B98h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 82133B98h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82133B98h case    3:*/		return 0x82133B9C;
		  /* 82133B9Ch */ case    4:  		/* bc 12, CR6_LT, -456 */
		/* 82133B9Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821339D4;  }
		/* 82133B9Ch case    4:*/		return 0x82133BA0;
	}
	return 0x82133BA0;
} // Block from 82133B8Ch-82133BA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82133BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133BA0);
		  /* 82133BA0h */ case    0:  		/* li R23, 1 */
		/* 82133BA0h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82133BA0h case    0:*/		return 0x82133BA4;
		  /* 82133BA4h */ case    1:  		/* mr R22, R23 */
		/* 82133BA4h case    1:*/		regs.R22 = regs.R23;
		/* 82133BA4h case    1:*/		return 0x82133BA8;
		  /* 82133BA8h */ case    2:  		/* mr R25, R21 */
		/* 82133BA8h case    2:*/		regs.R25 = regs.R21;
		/* 82133BA8h case    2:*/		return 0x82133BAC;
		  /* 82133BACh */ case    3:  		/* cmplwi CR6, R20, 0 */
		/* 82133BACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82133BACh case    3:*/		return 0x82133BB0;
		  /* 82133BB0h */ case    4:  		/* bc 12, CR6_EQ, 1156 */
		/* 82133BB0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82134034;  }
		/* 82133BB0h case    4:*/		return 0x82133BB4;
		  /* 82133BB4h */ case    5:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 82133BB4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 82133BB4h case    5:*/		return 0x82133BB8;
		  /* 82133BB8h */ case    6:  		/* mr R26, R18 */
		/* 82133BB8h case    6:*/		regs.R26 = regs.R18;
		/* 82133BB8h case    6:*/		return 0x82133BBC;
		  /* 82133BBCh */ case    7:  		/* subf R24, R11, R18 */
		/* 82133BBCh case    7:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R11,regs.R18);
		/* 82133BBCh case    7:*/		return 0x82133BC0;
		  /* 82133BC0h */ case    8:  		/* cmplwi CR6, R25, 512 */
		/* 82133BC0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000200);
		/* 82133BC0h case    8:*/		return 0x82133BC4;
		  /* 82133BC4h */ case    9:  		/* bc 4, CR6_LT, 1204 */
		/* 82133BC4h case    9:*/		if ( !regs.CR[6].lt ) { return 0x82134078;  }
		/* 82133BC4h case    9:*/		return 0x82133BC8;
		  /* 82133BC8h */ case   10:  		/* cmplw CR6, R25, R20 */
		/* 82133BC8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R20);
		/* 82133BC8h case   10:*/		return 0x82133BCC;
		  /* 82133BCCh */ case   11:  		/* bc 4, CR6_LT, 104 */
		/* 82133BCCh case   11:*/		if ( !regs.CR[6].lt ) { return 0x82133C34;  }
		/* 82133BCCh case   11:*/		return 0x82133BD0;
		  /* 82133BD0h */ case   12:  		/* lwz R28, <#[R26]> */
		/* 82133BD0h case   12:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000000) );
		/* 82133BD0h case   12:*/		return 0x82133BD4;
		  /* 82133BD4h */ case   13:  		/* b 100 */
		/* 82133BD4h case   13:*/		return 0x82133C38;
		/* 82133BD4h case   13:*/		return 0x82133BD8;
	}
	return 0x82133BD8;
} // Block from 82133BA0h-82133BD8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82133BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133BD8);
		  /* 82133BD8h */ case    0:  		/* lis R3, -32761 */
		/* 82133BD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82133BD8h case    0:*/		return 0x82133BDC;
		  /* 82133BDCh */ case    1:  		/* ori R3, R3, 14 */
		/* 82133BDCh case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82133BDCh case    1:*/		return 0x82133BE0;
		  /* 82133BE0h */ case    2:  		/* b 1488 */
		/* 82133BE0h case    2:*/		return 0x821341B0;
		/* 82133BE0h case    2:*/		return 0x82133BE4;
	}
	return 0x82133BE4;
} // Block from 82133BD8h-82133BE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82133BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133BE4);
		  /* 82133BE4h */ case    0:  		/* mr R31, R3 */
		/* 82133BE4h case    0:*/		regs.R31 = regs.R3;
		/* 82133BE4h case    0:*/		return 0x82133BE8;
		  /* 82133BE8h */ case    1:  		/* mr R3, R26 */
		/* 82133BE8h case    1:*/		regs.R3 = regs.R26;
		/* 82133BE8h case    1:*/		return 0x82133BEC;
		  /* 82133BECh */ case    2:  		/* bl 956372 */
		/* 82133BECh case    2:*/		regs.LR = 0x82133BF0; return 0x8221D3C0;
		/* 82133BECh case    2:*/		return 0x82133BF0;
		  /* 82133BF0h */ case    3:  		/* mr R3, R26 */
		/* 82133BF0h case    3:*/		regs.R3 = regs.R26;
		/* 82133BF0h case    3:*/		return 0x82133BF4;
		  /* 82133BF4h */ case    4:  		/* bl -226820 */
		/* 82133BF4h case    4:*/		regs.LR = 0x82133BF8; return 0x820FC5F0;
		/* 82133BF4h case    4:*/		return 0x82133BF8;
		  /* 82133BF8h */ case    5:  		/* mr R3, R31 */
		/* 82133BF8h case    5:*/		regs.R3 = regs.R31;
		/* 82133BF8h case    5:*/		return 0x82133BFC;
		  /* 82133BFCh */ case    6:  		/* b 1460 */
		/* 82133BFCh case    6:*/		return 0x821341B0;
		/* 82133BFCh case    6:*/		return 0x82133C00;
	}
	return 0x82133C00;
} // Block from 82133BE4h-82133C00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82133C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133C00);
		  /* 82133C00h */ case    0:  		/* lis R31, -32761 */
		/* 82133C00h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 82133C00h case    0:*/		return 0x82133C04;
		  /* 82133C04h */ case    1:  		/* ori R31, R31, 14 */
		/* 82133C04h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 82133C04h case    1:*/		return 0x82133C08;
		  /* 82133C08h */ case    2:  		/* b -32 */
		/* 82133C08h case    2:*/		return 0x82133BE8;
		/* 82133C08h case    2:*/		return 0x82133C0C;
	}
	return 0x82133C0C;
} // Block from 82133C00h-82133C0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82133C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133C0C);
		  /* 82133C0Ch */ case    0:  		/* lis R11, -32253 */
		/* 82133C0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82133C0Ch case    0:*/		return 0x82133C10;
		  /* 82133C10h */ case    1:  		/* lbz R7, <#[R27 + 203]> */
		/* 82133C10h case    1:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R27 + 0x000000CB) );
		/* 82133C10h case    1:*/		return 0x82133C14;
		  /* 82133C14h */ case    2:  		/* li R5, 4516 */
		/* 82133C14h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11A4);
		/* 82133C14h case    2:*/		return 0x82133C18;
		  /* 82133C18h */ case    3:  		/* addi R6, R11, 21240 */
		/* 82133C18h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x52F8);
		/* 82133C18h case    3:*/		return 0x82133C1C;
		  /* 82133C1Ch */ case    4:  		/* li R4, 0 */
		/* 82133C1Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82133C1Ch case    4:*/		return 0x82133C20;
		  /* 82133C20h */ case    5:  		/* mr R3, R27 */
		/* 82133C20h case    5:*/		regs.R3 = regs.R27;
		/* 82133C20h case    5:*/		return 0x82133C24;
		  /* 82133C24h */ case    6:  		/* bl -152820 */
		/* 82133C24h case    6:*/		regs.LR = 0x82133C28; return 0x8210E730;
		/* 82133C24h case    6:*/		return 0x82133C28;
		  /* 82133C28h */ case    7:  		/* lis R31, -32768 */
		/* 82133C28h case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 82133C28h case    7:*/		return 0x82133C2C;
		  /* 82133C2Ch */ case    8:  		/* ori R31, R31, 16389 */
		/* 82133C2Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 82133C2Ch case    8:*/		return 0x82133C30;
		  /* 82133C30h */ case    9:  		/* b -72 */
		/* 82133C30h case    9:*/		return 0x82133BE8;
		/* 82133C30h case    9:*/		return 0x82133C34;
	}
	return 0x82133C34;
} // Block from 82133C0Ch-82133C34h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82133C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133C34);
		  /* 82133C34h */ case    0:  		/* lwz R28, <#[R24]> */
		/* 82133C34h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000000) );
		/* 82133C34h case    0:*/		return 0x82133C38;
	}
	return 0x82133C38;
} // Block from 82133C34h-82133C38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82133C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133C38);
		  /* 82133C38h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82133C38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82133C38h case    0:*/		return 0x82133C3C;
		  /* 82133C3Ch */ case    1:  		/* bc 12, CR6_EQ, 996 */
		/* 82133C3Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82134020;  }
		/* 82133C3Ch case    1:*/		return 0x82133C40;
		  /* 82133C40h */ case    2:  		/* lwz R11, <#[R28 + 36]> */
		/* 82133C40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 82133C40h case    2:*/		return 0x82133C44;
		  /* 82133C44h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 82133C44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82133C44h case    3:*/		return 0x82133C48;
		  /* 82133C48h */ case    4:  		/* bc 12, CR6_EQ, 984 */
		/* 82133C48h case    4:*/		if ( regs.CR[6].eq ) { return 0x82134020;  }
		/* 82133C48h case    4:*/		return 0x82133C4C;
		  /* 82133C4Ch */ case    5:  		/* lwz R10, <#[R28]> */
		/* 82133C4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82133C4Ch case    5:*/		return 0x82133C50;
		  /* 82133C50h */ case    6:  		/* rlwinm R11, R10, 0, 0, 11 */
		/* 82133C50h case    6:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R10);
		/* 82133C50h case    6:*/		return 0x82133C54;
		  /* 82133C54h */ case    7:  		/* cmplw CR6, R11, R16 */
		/* 82133C54h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 82133C54h case    7:*/		return 0x82133C58;
		  /* 82133C58h */ case    8:  		/* bc 12, CR6_EQ, 92 */
		/* 82133C58h case    8:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C58h case    8:*/		return 0x82133C5C;
		  /* 82133C5Ch */ case    9:  		/* lis R9, 24656 */
		/* 82133C5Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0x6050);
		/* 82133C5Ch case    9:*/		return 0x82133C60;
		  /* 82133C60h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 82133C60h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133C60h case   10:*/		return 0x82133C64;
		  /* 82133C64h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 82133C64h case   11:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C64h case   11:*/		return 0x82133C68;
		  /* 82133C68h */ case   12:  		/* lis R9, 24736 */
		/* 82133C68h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x60A0);
		/* 82133C68h case   12:*/		return 0x82133C6C;
		  /* 82133C6Ch */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 82133C6Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133C6Ch case   13:*/		return 0x82133C70;
		  /* 82133C70h */ case   14:  		/* bc 12, CR6_EQ, 68 */
		/* 82133C70h case   14:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C70h case   14:*/		return 0x82133C74;
		  /* 82133C74h */ case   15:  		/* lis R9, 24816 */
		/* 82133C74h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0x60F0);
		/* 82133C74h case   15:*/		return 0x82133C78;
		  /* 82133C78h */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 82133C78h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133C78h case   16:*/		return 0x82133C7C;
		  /* 82133C7Ch */ case   17:  		/* bc 12, CR6_EQ, 56 */
		/* 82133C7Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C7Ch case   17:*/		return 0x82133C80;
		  /* 82133C80h */ case   18:  		/* lis R9, 29408 */
		/* 82133C80h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0x72E0);
		/* 82133C80h case   18:*/		return 0x82133C84;
		  /* 82133C84h */ case   19:  		/* cmplw CR6, R11, R9 */
		/* 82133C84h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133C84h case   19:*/		return 0x82133C88;
		  /* 82133C88h */ case   20:  		/* bc 12, CR6_EQ, 44 */
		/* 82133C88h case   20:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C88h case   20:*/		return 0x82133C8C;
		  /* 82133C8Ch */ case   21:  		/* lis R9, 24688 */
		/* 82133C8Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R9,0x6070);
		/* 82133C8Ch case   21:*/		return 0x82133C90;
		  /* 82133C90h */ case   22:  		/* cmplw CR6, R11, R9 */
		/* 82133C90h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133C90h case   22:*/		return 0x82133C94;
		  /* 82133C94h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 82133C94h case   23:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C94h case   23:*/		return 0x82133C98;
		  /* 82133C98h */ case   24:  		/* cmplw CR6, R11, R17 */
		/* 82133C98h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 82133C98h case   24:*/		return 0x82133C9C;
		  /* 82133C9Ch */ case   25:  		/* bc 12, CR6_EQ, 24 */
		/* 82133C9Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133C9Ch case   25:*/		return 0x82133CA0;
		  /* 82133CA0h */ case   26:  		/* lis R9, 29376 */
		/* 82133CA0h case   26:*/		cpu::op::lis<0>(regs,&regs.R9,0x72C0);
		/* 82133CA0h case   26:*/		return 0x82133CA4;
		  /* 82133CA4h */ case   27:  		/* cmplw CR6, R11, R9 */
		/* 82133CA4h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133CA4h case   27:*/		return 0x82133CA8;
		  /* 82133CA8h */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 82133CA8h case   28:*/		if ( regs.CR[6].eq ) { return 0x82133CB4;  }
		/* 82133CA8h case   28:*/		return 0x82133CAC;
		  /* 82133CACh */ case   29:  		/* cmplw CR6, R11, R15 */
		/* 82133CACh case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 82133CACh case   29:*/		return 0x82133CB0;
		  /* 82133CB0h */ case   30:  		/* bc 4, CR6_EQ, 880 */
		/* 82133CB0h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82134020;  }
		/* 82133CB0h case   30:*/		return 0x82133CB4;
	}
	return 0x82133CB4;
} // Block from 82133C38h-82133CB4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82133CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133CB4);
		  /* 82133CB4h */ case    0:  		/* subf R9, R11, R17 */
		/* 82133CB4h case    0:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R17);
		/* 82133CB4h case    0:*/		return 0x82133CB8;
		  /* 82133CB8h */ case    1:  		/* lwz R6, <#[R28 + 8]> */
		/* 82133CB8h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000008) );
		/* 82133CB8h case    1:*/		return 0x82133CBC;
		  /* 82133CBCh */ case    2:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 82133CBCh case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 82133CBCh case    2:*/		return 0x82133CC0;
		  /* 82133CC0h */ case    3:  		/* lwz R11, <#[R27 + 20]> */
		/* 82133CC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82133CC0h case    3:*/		return 0x82133CC4;
		  /* 82133CC4h */ case    4:  		/* subfic R9, R9, 0 */
		/* 82133CC4h case    4:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 82133CC4h case    4:*/		return 0x82133CC8;
		  /* 82133CC8h */ case    5:  		/* subfe R9, R9, R9 */
		/* 82133CC8h case    5:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82133CC8h case    5:*/		return 0x82133CCC;
		  /* 82133CCCh */ case    6:  		/* and R10, R9, R10 */
		/* 82133CCCh case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82133CCCh case    6:*/		return 0x82133CD0;
		  /* 82133CD0h */ case    7:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 82133CD0h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 82133CD0h case    7:*/		return 0x82133CD4;
		  /* 82133CD4h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82133CD4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82133CD4h case    8:*/		return 0x82133CD8;
		  /* 82133CD8h */ case    9:  		/* lwzx R10, <#[R9 + R6]> */
		/* 82133CD8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 82133CD8h case    9:*/		return 0x82133CDC;
		  /* 82133CDCh */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82133CDCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82133CDCh case   10:*/		return 0x82133CE0;
		  /* 82133CE0h */ case   11:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82133CE0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133CE0h case   11:*/		return 0x82133CE4;
		  /* 82133CE4h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 82133CE4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82133CF0;  }
		/* 82133CE4h case   12:*/		return 0x82133CE8;
		  /* 82133CE8h */ case   13:  		/* mr R31, R21 */
		/* 82133CE8h case   13:*/		regs.R31 = regs.R21;
		/* 82133CE8h case   13:*/		return 0x82133CEC;
		  /* 82133CECh */ case   14:  		/* b 16 */
		/* 82133CECh case   14:*/		return 0x82133CFC;
		/* 82133CECh case   14:*/		return 0x82133CF0;
	}
	return 0x82133CF0;
} // Block from 82133CB4h-82133CF0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82133CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133CF0);
		  /* 82133CF0h */ case    0:  		/* lwz R9, <#[R6]> */
		/* 82133CF0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82133CF0h case    0:*/		return 0x82133CF4;
		  /* 82133CF4h */ case    1:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82133CF4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82133CF4h case    1:*/		return 0x82133CF8;
		  /* 82133CF8h */ case    2:  		/* lwzx R31, <#[R9 + R11]> */
		/* 82133CF8h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82133CF8h case    2:*/		return 0x82133CFC;
	}
	return 0x82133CFC;
} // Block from 82133CF0h-82133CFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82133CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133CFC);
		  /* 82133CFCh */ case    0:  		/* lwz R5, <#[R10 + 4]> */
		/* 82133CFCh case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 82133CFCh case    0:*/		return 0x82133D00;
		  /* 82133D00h */ case    1:  		/* lwz R4, <#[R27 + 128]> */
		/* 82133D00h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000080) );
		/* 82133D00h case    1:*/		return 0x82133D04;
		  /* 82133D04h */ case    2:  		/* cmplw CR6, R5, R4 */
		/* 82133D04h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 82133D04h case    2:*/		return 0x82133D08;
		  /* 82133D08h */ case    3:  		/* bc 4, CR6_EQ, 336 */
		/* 82133D08h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82133E58;  }
		/* 82133D08h case    3:*/		return 0x82133D0C;
		  /* 82133D0Ch */ case    4:  		/* lwz R9, <#[R27 + 200]> */
		/* 82133D0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x000000C8) );
		/* 82133D0Ch case    4:*/		return 0x82133D10;
		  /* 82133D10h */ case    5:  		/* rlwinm R11, R9, 0, 16, 31 */
		/* 82133D10h case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R9);
		/* 82133D10h case    5:*/		return 0x82133D14;
		  /* 82133D14h */ case    6:  		/* cmplwi CR6, R11, 260 */
		/* 82133D14h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 82133D14h case    6:*/		return 0x82133D18;
		  /* 82133D18h */ case    7:  		/* bc 12, CR6_EQ, 320 */
		/* 82133D18h case    7:*/		if ( regs.CR[6].eq ) { return 0x82133E58;  }
		/* 82133D18h case    7:*/		return 0x82133D1C;
		  /* 82133D1Ch */ case    8:  		/* cmplwi CR6, R22, 1 */
		/* 82133D1Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000001);
		/* 82133D1Ch case    8:*/		return 0x82133D20;
		  /* 82133D20h */ case    9:  		/* bc 4, CR6_EQ, 312 */
		/* 82133D20h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82133E58;  }
		/* 82133D20h case    9:*/		return 0x82133D24;
		  /* 82133D24h */ case   10:  		/* lbz R30, <#[R10 + 110]> */
		/* 82133D24h case   10:*/		cpu::mem::load8z( regs, &regs.R30, (uint32)(regs.R10 + 0x0000006E) );
		/* 82133D24h case   10:*/		return 0x82133D28;
		  /* 82133D28h */ case   11:  		/* cmplwi CR6, R30, 6 */
		/* 82133D28h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 82133D28h case   11:*/		return 0x82133D2C;
		  /* 82133D2Ch */ case   12:  		/* bc 4, CR6_LT, 776 */
		/* 82133D2Ch case   12:*/		if ( !regs.CR[6].lt ) { return 0x82134034;  }
		/* 82133D2Ch case   12:*/		return 0x82133D30;
		  /* 82133D30h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 82133D30h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82133D30h case   13:*/		return 0x82133D34;
		  /* 82133D34h */ case   14:  		/* bc 12, CR6_EQ, 88 */
		/* 82133D34h case   14:*/		if ( regs.CR[6].eq ) { return 0x82133D8C;  }
		/* 82133D34h case   14:*/		return 0x82133D38;
		  /* 82133D38h */ case   15:  		/* lwz R11, <#[R31 + 4]> */
		/* 82133D38h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82133D38h case   15:*/		return 0x82133D3C;
		  /* 82133D3Ch */ case   16:  		/* lwz R10, <#[R27 + 16]> */
		/* 82133D3Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 82133D3Ch case   16:*/		return 0x82133D40;
		  /* 82133D40h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133D40h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133D40h case   17:*/		return 0x82133D44;
		  /* 82133D44h */ case   18:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82133D44h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82133D44h case   18:*/		return 0x82133D48;
		  /* 82133D48h */ case   19:  		/* lwz R11, <#[R11 + 4]> */
		/* 82133D48h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82133D48h case   19:*/		return 0x82133D4C;
		  /* 82133D4Ch */ case   20:  		/* andi. R10, R11, 2112 */
		/* 82133D4Ch case   20:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R11,0x840);
		/* 82133D4Ch case   20:*/		return 0x82133D50;
		  /* 82133D50h */ case   21:  		/* cmplwi CR0, R10, 0 */
		/* 82133D50h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82133D50h case   21:*/		return 0x82133D54;
		  /* 82133D54h */ case   22:  		/* bc 12, CR0_EQ, 52 */
		/* 82133D54h case   22:*/		if ( regs.CR[0].eq ) { return 0x82133D88;  }
		/* 82133D54h case   22:*/		return 0x82133D58;
		  /* 82133D58h */ case   23:  		/* lwz R10, <#[R31 + 12]> */
		/* 82133D58h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82133D58h case   23:*/		return 0x82133D5C;
		  /* 82133D5Ch */ case   24:  		/* cmplw CR6, R30, R10 */
		/* 82133D5Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 82133D5Ch case   24:*/		return 0x82133D60;
		  /* 82133D60h */ case   25:  		/* bc 12, CR6_EQ, 44 */
		/* 82133D60h case   25:*/		if ( regs.CR[6].eq ) { return 0x82133D8C;  }
		/* 82133D60h case   25:*/		return 0x82133D64;
		  /* 82133D64h */ case   26:  		/* lwz R4, <#[R28 + 60]> */
		/* 82133D64h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000003C) );
		/* 82133D64h case   26:*/		return 0x82133D68;
	}
	return 0x82133D68;
} // Block from 82133CFCh-82133D68h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82133D68h
// Function '?RemapInput@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IIIIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133D68);
		  /* 82133D68h */ case    0:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82133D68h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82133D68h case    0:*/		return 0x82133D6C;
		  /* 82133D6Ch */ case    1:  		/* rlwinm R7, R9, 0, 24, 31 */
		/* 82133D6Ch case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R9);
		/* 82133D6Ch case    1:*/		return 0x82133D70;
		  /* 82133D70h */ case    2:  		/* li R5, 4515 */
		/* 82133D70h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11A3);
		/* 82133D70h case    2:*/		return 0x82133D74;
		  /* 82133D74h */ case    3:  		/* mr R3, R27 */
		/* 82133D74h case    3:*/		regs.R3 = regs.R27;
		/* 82133D74h case    3:*/		return 0x82133D78;
		  /* 82133D78h */ case    4:  		/* bc 12, CR0_EQ, 804 */
		/* 82133D78h case    4:*/		if ( regs.CR[0].eq ) { return 0x8213409C;  }
		/* 82133D78h case    4:*/		return 0x82133D7C;
		  /* 82133D7Ch */ case    5:  		/* lis R11, -32253 */
		/* 82133D7Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82133D7Ch case    5:*/		return 0x82133D80;
		  /* 82133D80h */ case    6:  		/* addi R6, R11, 21120 */
		/* 82133D80h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5280);
		/* 82133D80h case    6:*/		return 0x82133D84;
		  /* 82133D84h */ case    7:  		/* b 800 */
		/* 82133D84h case    7:*/		return 0x821340A4;
		/* 82133D84h case    7:*/		return 0x82133D88;
	}
	return 0x82133D88;
} // Block from 82133D68h-82133D88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82133D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133D88);
		  /* 82133D88h */ case    0:  		/* stw R30, <#[R31 + 12]> */
		/* 82133D88h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82133D88h case    0:*/		return 0x82133D8C;
	}
	return 0x82133D8C;
} // Block from 82133D88h-82133D8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82133D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133D8C);
		  /* 82133D8Ch */ case    0:  		/* addi R11, R30, 266 */
		/* 82133D8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x10A);
		/* 82133D8Ch case    0:*/		return 0x82133D90;
		  /* 82133D90h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133D90h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133D90h case    1:*/		return 0x82133D94;
		  /* 82133D94h */ case    2:  		/* lwzx R10, <#[R11 + R27]> */
		/* 82133D94h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82133D94h case    2:*/		return 0x82133D98;
		  /* 82133D98h */ case    3:  		/* cmpwi CR6, R10, -1 */
		/* 82133D98h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82133D98h case    3:*/		return 0x82133D9C;
		  /* 82133D9Ch */ case    4:  		/* bc 4, CR6_EQ, 784 */
		/* 82133D9Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821340AC;  }
		/* 82133D9Ch case    4:*/		return 0x82133DA0;
		  /* 82133DA0h */ case    5:  		/* rlwinm R29, R30, 2, 0, 29 */
		/* 82133DA0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R30);
		/* 82133DA0h case    5:*/		return 0x82133DA4;
		  /* 82133DA4h */ case    6:  		/* lwzx R10, <#[R29 + R19]> */
		/* 82133DA4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R19 + 0x00000000) );
		/* 82133DA4h case    6:*/		return 0x82133DA8;
		  /* 82133DA8h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82133DA8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82133DA8h case    7:*/		return 0x82133DAC;
		  /* 82133DACh */ case    8:  		/* bc 4, CR6_EQ, 768 */
		/* 82133DACh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821340AC;  }
		/* 82133DACh case    8:*/		return 0x82133DB0;
		  /* 82133DB0h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 82133DB0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82133DB0h case    9:*/		return 0x82133DB4;
		  /* 82133DB4h */ case   10:  		/* bc 12, CR6_EQ, 156 */
		/* 82133DB4h case   10:*/		if ( regs.CR[6].eq ) { return 0x82133E50;  }
		/* 82133DB4h case   10:*/		return 0x82133DB8;
		  /* 82133DB8h */ case   11:  		/* addi R10, R30, 260 */
		/* 82133DB8h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x104);
		/* 82133DB8h case   11:*/		return 0x82133DBC;
		  /* 82133DBCh */ case   12:  		/* lwz R9, <#[R31 + 4]> */
		/* 82133DBCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82133DBCh case   12:*/		return 0x82133DC0;
		  /* 82133DC0h */ case   13:  		/* mr R3, R27 */
		/* 82133DC0h case   13:*/		regs.R3 = regs.R27;
		/* 82133DC0h case   13:*/		return 0x82133DC4;
		  /* 82133DC4h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82133DC4h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82133DC4h case   14:*/		return 0x82133DC8;
		  /* 82133DC8h */ case   15:  		/* stwx R9, <#[R10 + R27]> */
		/* 82133DC8h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 82133DC8h case   15:*/		return 0x82133DCC;
		  /* 82133DCCh */ case   16:  		/* lwz R10, <#[R28 + 8]> */
		/* 82133DCCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82133DCCh case   16:*/		return 0x82133DD0;
		  /* 82133DD0h */ case   17:  		/* lwz R10, <#[R10]> */
		/* 82133DD0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82133DD0h case   17:*/		return 0x82133DD4;
		  /* 82133DD4h */ case   18:  		/* stwx R10, <#[R11 + R27]> */
		/* 82133DD4h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82133DD4h case   18:*/		return 0x82133DD8;
		  /* 82133DD8h */ case   19:  		/* lfd FR1, <#[R31 + 32]> */
		/* 82133DD8h case   19:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000020) );
		/* 82133DD8h case   19:*/		return 0x82133DDC;
		  /* 82133DDCh */ case   20:  		/* lwz R6, <#[R31 + 16]> */
		/* 82133DDCh case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 82133DDCh case   20:*/		return 0x82133DE0;
		  /* 82133DE0h */ case   21:  		/* lwz R5, <#[R31 + 12]> */
		/* 82133DE0h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 82133DE0h case   21:*/		return 0x82133DE4;
		  /* 82133DE4h */ case   22:  		/* lwz R4, <#[R31 + 4]> */
		/* 82133DE4h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82133DE4h case   22:*/		return 0x82133DE8;
		  /* 82133DE8h */ case   23:  		/* bl -224192 */
		/* 82133DE8h case   23:*/		regs.LR = 0x82133DEC; return 0x820FD228;
		/* 82133DE8h case   23:*/		return 0x82133DEC;
		  /* 82133DECh */ case   24:  		/* lwz R10, <#[R28]> */
		/* 82133DECh case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82133DECh case   24:*/		return 0x82133DF0;
		  /* 82133DF0h */ case   25:  		/* mr R11, R21 */
		/* 82133DF0h case   25:*/		regs.R11 = regs.R21;
		/* 82133DF0h case   25:*/		return 0x82133DF4;
		  /* 82133DF4h */ case   26:  		/* rlwinm. R10, R10, 0, 12, 31 */
		/* 82133DF4h case   26:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R10,regs.R10);
		/* 82133DF4h case   26:*/		return 0x82133DF8;
		  /* 82133DF8h */ case   27:  		/* bc 12, CR0_EQ, 40 */
		/* 82133DF8h case   27:*/		if ( regs.CR[0].eq ) { return 0x82133E20;  }
		/* 82133DF8h case   27:*/		return 0x82133DFC;
		  /* 82133DFCh */ case   28:  		/* mr R10, R21 */
		/* 82133DFCh case   28:*/		regs.R10 = regs.R21;
		/* 82133DFCh case   28:*/		return 0x82133E00;
		  /* 82133E00h */ case   29:  		/* lwz R9, <#[R28 + 8]> */
		/* 82133E00h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82133E00h case   29:*/		return 0x82133E04;
		  /* 82133E04h */ case   30:  		/* addi R11, R11, 1 */
		/* 82133E04h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82133E04h case   30:*/		return 0x82133E08;
		  /* 82133E08h */ case   31:  		/* stwx R3, <#[R10 + R9]> */
		/* 82133E08h case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82133E08h case   31:*/		return 0x82133E0C;
		  /* 82133E0Ch */ case   32:  		/* addi R10, R10, 4 */
		/* 82133E0Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82133E0Ch case   32:*/		return 0x82133E10;
		  /* 82133E10h */ case   33:  		/* lwz R9, <#[R28]> */
		/* 82133E10h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82133E10h case   33:*/		return 0x82133E14;
		  /* 82133E14h */ case   34:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 82133E14h case   34:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 82133E14h case   34:*/		return 0x82133E18;
		  /* 82133E18h */ case   35:  		/* cmplw CR6, R11, R9 */
		/* 82133E18h case   35:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133E18h case   35:*/		return 0x82133E1C;
		  /* 82133E1Ch */ case   36:  		/* bc 12, CR6_LT, -28 */
		/* 82133E1Ch case   36:*/		if ( regs.CR[6].lt ) { return 0x82133E00;  }
		/* 82133E1Ch case   36:*/		return 0x82133E20;
	}
	return 0x82133E20;
} // Block from 82133D8Ch-82133E20h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82133E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133E20);
		  /* 82133E20h */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 82133E20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82133E20h case    0:*/		return 0x82133E24;
		  /* 82133E24h */ case    1:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82133E24h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82133E24h case    1:*/		return 0x82133E28;
		  /* 82133E28h */ case    2:  		/* mr R4, R31 */
		/* 82133E28h case    2:*/		regs.R4 = regs.R31;
		/* 82133E28h case    2:*/		return 0x82133E2C;
		  /* 82133E2Ch */ case    3:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82133E2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133E2Ch case    3:*/		return 0x82133E30;
		  /* 82133E30h */ case    4:  		/* mr R3, R11 */
		/* 82133E30h case    4:*/		regs.R3 = regs.R11;
		/* 82133E30h case    4:*/		return 0x82133E34;
		  /* 82133E34h */ case    5:  		/* stw R11, <#[R1 + 80]> */
		/* 82133E34h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82133E34h case    5:*/		return 0x82133E38;
		  /* 82133E38h */ case    6:  		/* bl -225936 */
		/* 82133E38h case    6:*/		regs.LR = 0x82133E3C; return 0x820FCBA8;
		/* 82133E38h case    6:*/		return 0x82133E3C;
		  /* 82133E3Ch */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 82133E3Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82133E3Ch case    7:*/		return 0x82133E40;
		  /* 82133E40h */ case    8:  		/* lwz R14, <#[R1 + 356]> */
		/* 82133E40h case    8:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000164) );
		/* 82133E40h case    8:*/		return 0x82133E44;
		  /* 82133E44h */ case    9:  		/* stw R30, <#[R11 + 12]> */
		/* 82133E44h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 82133E44h case    9:*/		return 0x82133E48;
		  /* 82133E48h */ case   10:  		/* stw R23, <#[R31 + 64]> */
		/* 82133E48h case   10:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000040) );
		/* 82133E48h case   10:*/		return 0x82133E4C;
		  /* 82133E4Ch */ case   11:  		/* stw R21, <#[R11 + 64]> */
		/* 82133E4Ch case   11:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000040) );
		/* 82133E4Ch case   11:*/		return 0x82133E50;
	}
	return 0x82133E50;
} // Block from 82133E20h-82133E50h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82133E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133E50);
		  /* 82133E50h */ case    0:  		/* stwx R28, <#[R29 + R19]> */
		/* 82133E50h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + regs.R19 + 0x00000000) );
		/* 82133E50h case    0:*/		return 0x82133E54;
		  /* 82133E54h */ case    1:  		/* b 452 */
		/* 82133E54h case    1:*/		return 0x82134018;
		/* 82133E54h case    1:*/		return 0x82133E58;
	}
	return 0x82133E58;
} // Block from 82133E50h-82133E58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82133E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133E58);
		  /* 82133E58h */ case    0:  		/* cmplwi CR6, R22, 2 */
		/* 82133E58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000002);
		/* 82133E58h case    0:*/		return 0x82133E5C;
		  /* 82133E5Ch */ case    1:  		/* bc 4, CR6_EQ, 452 */
		/* 82133E5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82134020;  }
		/* 82133E5Ch case    1:*/		return 0x82133E60;
		  /* 82133E60h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 82133E60h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82133E60h case    2:*/		return 0x82133E64;
		  /* 82133E64h */ case    3:  		/* bc 12, CR6_EQ, 160 */
		/* 82133E64h case    3:*/		if ( regs.CR[6].eq ) { return 0x82133F04;  }
		/* 82133E64h case    3:*/		return 0x82133E68;
		  /* 82133E68h */ case    4:  		/* lwz R9, <#[R31 + 4]> */
		/* 82133E68h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82133E68h case    4:*/		return 0x82133E6C;
		  /* 82133E6Ch */ case    5:  		/* lwz R11, <#[R27 + 16]> */
		/* 82133E6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82133E6Ch case    5:*/		return 0x82133E70;
		  /* 82133E70h */ case    6:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82133E70h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82133E70h case    6:*/		return 0x82133E74;
		  /* 82133E74h */ case    7:  		/* lwz R30, <#[R31 + 12]> */
		/* 82133E74h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82133E74h case    7:*/		return 0x82133E78;
		  /* 82133E78h */ case    8:  		/* cmplwi CR6, R30, 6 */
		/* 82133E78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 82133E78h case    8:*/		return 0x82133E7C;
		  /* 82133E7Ch */ case    9:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82133E7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133E7Ch case    9:*/		return 0x82133E80;
		  /* 82133E80h */ case   10:  		/* bc 4, CR6_LT, 436 */
		/* 82133E80h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82134034;  }
		/* 82133E80h case   10:*/		return 0x82133E84;
		  /* 82133E84h */ case   11:  		/* lwz R8, <#[R11 + 4]> */
		/* 82133E84h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82133E84h case   11:*/		return 0x82133E88;
		  /* 82133E88h */ case   12:  		/* andi. R11, R8, 2112 */
		/* 82133E88h case   12:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R8,0x840);
		/* 82133E88h case   12:*/		return 0x82133E8C;
		  /* 82133E8Ch */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 82133E8Ch case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82133E8Ch case   13:*/		return 0x82133E90;
		  /* 82133E90h */ case   14:  		/* bc 12, CR0_EQ, 116 */
		/* 82133E90h case   14:*/		if ( regs.CR[0].eq ) { return 0x82133F04;  }
		/* 82133E90h case   14:*/		return 0x82133E94;
		  /* 82133E94h */ case   15:  		/* addi R11, R30, 266 */
		/* 82133E94h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x10A);
		/* 82133E94h case   15:*/		return 0x82133E98;
		  /* 82133E98h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133E98h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133E98h case   16:*/		return 0x82133E9C;
		  /* 82133E9Ch */ case   17:  		/* lwzx R10, <#[R11 + R27]> */
		/* 82133E9Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82133E9Ch case   17:*/		return 0x82133EA0;
		  /* 82133EA0h */ case   18:  		/* cmpwi CR6, R10, -1 */
		/* 82133EA0h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82133EA0h case   18:*/		return 0x82133EA4;
		  /* 82133EA4h */ case   19:  		/* bc 4, CR6_EQ, 48 */
		/* 82133EA4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82133ED4;  }
		/* 82133EA4h case   19:*/		return 0x82133EA8;
		  /* 82133EA8h */ case   20:  		/* rlwinm R7, R30, 2, 0, 29 */
		/* 82133EA8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R30);
		/* 82133EA8h case   20:*/		return 0x82133EAC;
		  /* 82133EACh */ case   21:  		/* lwzx R7, <#[R7 + R19]> */
		/* 82133EACh case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R19 + 0x00000000) );
		/* 82133EACh case   21:*/		return 0x82133EB0;
		  /* 82133EB0h */ case   22:  		/* cmplwi CR6, R7, 0 */
		/* 82133EB0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82133EB0h case   22:*/		return 0x82133EB4;
		  /* 82133EB4h */ case   23:  		/* bc 4, CR6_EQ, 32 */
		/* 82133EB4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82133ED4;  }
		/* 82133EB4h case   23:*/		return 0x82133EB8;
		  /* 82133EB8h */ case   24:  		/* addi R10, R30, 260 */
		/* 82133EB8h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x104);
		/* 82133EB8h case   24:*/		return 0x82133EBC;
		  /* 82133EBCh */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82133EBCh case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82133EBCh case   25:*/		return 0x82133EC0;
		  /* 82133EC0h */ case   26:  		/* stwx R9, <#[R10 + R27]> */
		/* 82133EC0h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 82133EC0h case   26:*/		return 0x82133EC4;
		  /* 82133EC4h */ case   27:  		/* lwz R10, <#[R28 + 8]> */
		/* 82133EC4h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82133EC4h case   27:*/		return 0x82133EC8;
		  /* 82133EC8h */ case   28:  		/* lwz R10, <#[R10]> */
		/* 82133EC8h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82133EC8h case   28:*/		return 0x82133ECC;
		  /* 82133ECCh */ case   29:  		/* stwx R10, <#[R11 + R27]> */
		/* 82133ECCh case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82133ECCh case   29:*/		return 0x82133ED0;
		  /* 82133ED0h */ case   30:  		/* b 320 */
		/* 82133ED0h case   30:*/		return 0x82134010;
		/* 82133ED0h case   30:*/		return 0x82133ED4;
	}
	return 0x82133ED4;
} // Block from 82133E58h-82133ED4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82133ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133ED4);
		  /* 82133ED4h */ case    0:  		/* lwz R11, <#[R6]> */
		/* 82133ED4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82133ED4h case    0:*/		return 0x82133ED8;
		  /* 82133ED8h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82133ED8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82133ED8h case    1:*/		return 0x82133EDC;
		  /* 82133EDCh */ case    2:  		/* bc 4, CR6_EQ, 492 */
		/* 82133EDCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821340C8;  }
		/* 82133EDCh case    2:*/		return 0x82133EE0;
		  /* 82133EE0h */ case    3:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 82133EE0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 82133EE0h case    3:*/		return 0x82133EE4;
		  /* 82133EE4h */ case    4:  		/* lwzx R11, <#[R11 + R19]> */
		/* 82133EE4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 82133EE4h case    4:*/		return 0x82133EE8;
		  /* 82133EE8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82133EE8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82133EE8h case    5:*/		return 0x82133EEC;
		  /* 82133EECh */ case    6:  		/* bc 12, CR6_EQ, 292 */
		/* 82133EECh case    6:*/		if ( regs.CR[6].eq ) { return 0x82134010;  }
		/* 82133EECh case    6:*/		return 0x82133EF0;
		  /* 82133EF0h */ case    7:  		/* lis R11, -32253 */
		/* 82133EF0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82133EF0h case    7:*/		return 0x82133EF4;
		  /* 82133EF4h */ case    8:  		/* li R5, 4518 */
		/* 82133EF4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x11A6);
		/* 82133EF4h case    8:*/		return 0x82133EF8;
		  /* 82133EF8h */ case    9:  		/* addi R6, R11, 21016 */
		/* 82133EF8h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5218);
		/* 82133EF8h case    9:*/		return 0x82133EFC;
		  /* 82133EFCh */ case   10:  		/* li R4, 0 */
		/* 82133EFCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82133EFCh case   10:*/		return 0x82133F00;
		  /* 82133F00h */ case   11:  		/* b 444 */
		/* 82133F00h case   11:*/		return 0x821340BC;
		/* 82133F00h case   11:*/		return 0x82133F04;
	}
	return 0x82133F04;
} // Block from 82133ED4h-82133F04h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82133F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133F04);
		  /* 82133F04h */ case    0:  		/* lwz R7, <#[R27 + 76]> */
		/* 82133F04h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x0000004C) );
		/* 82133F04h case    0:*/		return 0x82133F08;
		  /* 82133F08h */ case    1:  		/* mr R11, R21 */
		/* 82133F08h case    1:*/		regs.R11 = regs.R21;
		/* 82133F08h case    1:*/		return 0x82133F0C;
		  /* 82133F0Ch */ case    2:  		/* cmplwi CR6, R7, 0 */
		/* 82133F0Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82133F0Ch case    2:*/		return 0x82133F10;
		  /* 82133F10h */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 82133F10h case    3:*/		if ( regs.CR[6].eq ) { return 0x82133F54;  }
		/* 82133F10h case    3:*/		return 0x82133F14;
		  /* 82133F14h */ case    4:  		/* mr R9, R19 */
		/* 82133F14h case    4:*/		regs.R9 = regs.R19;
		/* 82133F14h case    4:*/		return 0x82133F18;
		  /* 82133F18h */ case    5:  		/* addi R10, R27, 1064 */
		/* 82133F18h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x428);
		/* 82133F18h case    5:*/		return 0x82133F1C;
		  /* 82133F1Ch */ case    6:  		/* lwz R8, <#[R9]> */
		/* 82133F1Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82133F1Ch case    6:*/		return 0x82133F20;
		  /* 82133F20h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 82133F20h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82133F20h case    7:*/		return 0x82133F24;
		  /* 82133F24h */ case    8:  		/* bc 4, CR6_EQ, 28 */
		/* 82133F24h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82133F40;  }
		/* 82133F24h case    8:*/		return 0x82133F28;
		  /* 82133F28h */ case    9:  		/* lwz R8, <#[R10]> */
		/* 82133F28h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82133F28h case    9:*/		return 0x82133F2C;
		  /* 82133F2Ch */ case   10:  		/* lwz R3, <#[R6]> */
		/* 82133F2Ch case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R6 + 0x00000000) );
		/* 82133F2Ch case   10:*/		return 0x82133F30;
		  /* 82133F30h */ case   11:  		/* cmplw CR6, R8, R3 */
		/* 82133F30h case   11:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R3);
		/* 82133F30h case   11:*/		return 0x82133F34;
		  /* 82133F34h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 82133F34h case   12:*/		if ( regs.CR[6].eq ) { return 0x82133F54;  }
		/* 82133F34h case   12:*/		return 0x82133F38;
	}
	return 0x82133F38;
} // Block from 82133F04h-82133F38h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82133F38h
// Function '?RemapInputTex@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IIIIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133F38);
		  /* 82133F38h */ case    0:  		/* cmpwi CR6, R8, -1 */
		/* 82133F38h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 82133F38h case    0:*/		return 0x82133F3C;
		  /* 82133F3Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82133F3Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82133F54;  }
		/* 82133F3Ch case    1:*/		return 0x82133F40;
	}
	return 0x82133F40;
} // Block from 82133F38h-82133F40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82133F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133F40);
		  /* 82133F40h */ case    0:  		/* addi R11, R11, 1 */
		/* 82133F40h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82133F40h case    0:*/		return 0x82133F44;
		  /* 82133F44h */ case    1:  		/* addi R9, R9, 4 */
		/* 82133F44h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82133F44h case    1:*/		return 0x82133F48;
		  /* 82133F48h */ case    2:  		/* addi R10, R10, 4 */
		/* 82133F48h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82133F48h case    2:*/		return 0x82133F4C;
		  /* 82133F4Ch */ case    3:  		/* cmplw CR6, R11, R7 */
		/* 82133F4Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 82133F4Ch case    3:*/		return 0x82133F50;
		  /* 82133F50h */ case    4:  		/* bc 12, CR6_LT, -52 */
		/* 82133F50h case    4:*/		if ( regs.CR[6].lt ) { return 0x82133F1C;  }
		/* 82133F50h case    4:*/		return 0x82133F54;
	}
	return 0x82133F54;
} // Block from 82133F40h-82133F54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82133F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133F54);
		  /* 82133F54h */ case    0:  		/* cmplw CR6, R11, R7 */
		/* 82133F54h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 82133F54h case    0:*/		return 0x82133F58;
		  /* 82133F58h */ case    1:  		/* bc 12, CR6_EQ, 412 */
		/* 82133F58h case    1:*/		if ( regs.CR[6].eq ) { return 0x821340F4;  }
		/* 82133F58h case    1:*/		return 0x82133F5C;
		  /* 82133F5Ch */ case    2:  		/* mr R30, R11 */
		/* 82133F5Ch case    2:*/		regs.R30 = regs.R11;
		/* 82133F5Ch case    2:*/		return 0x82133F60;
		  /* 82133F60h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 82133F60h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82133F60h case    3:*/		return 0x82133F64;
		  /* 82133F64h */ case    4:  		/* bc 12, CR6_EQ, 172 */
		/* 82133F64h case    4:*/		if ( regs.CR[6].eq ) { return 0x82134010;  }
		/* 82133F64h case    4:*/		return 0x82133F68;
		  /* 82133F68h */ case    5:  		/* lhz R10, <#[R27 + 202]> */
		/* 82133F68h case    5:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R27 + 0x000000CA) );
		/* 82133F68h case    5:*/		return 0x82133F6C;
		  /* 82133F6Ch */ case    6:  		/* cmplwi CR6, R10, 260 */
		/* 82133F6Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000104);
		/* 82133F6Ch case    6:*/		return 0x82133F70;
		  /* 82133F70h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82133F70h case    7:*/		if ( regs.CR[6].eq ) { return 0x82133F7C;  }
		/* 82133F70h case    7:*/		return 0x82133F74;
		  /* 82133F74h */ case    8:  		/* cmplw CR6, R5, R4 */
		/* 82133F74h case    8:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 82133F74h case    8:*/		return 0x82133F78;
		  /* 82133F78h */ case    9:  		/* bc 4, CR6_EQ, 40 */
		/* 82133F78h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82133FA0;  }
		/* 82133F78h case    9:*/		return 0x82133F7C;
	}
	return 0x82133F7C;
} // Block from 82133F54h-82133F7Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82133F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133F7C);
		  /* 82133F7Ch */ case    0:  		/* addi R10, R11, 260 */
		/* 82133F7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x104);
		/* 82133F7Ch case    0:*/		return 0x82133F80;
		  /* 82133F80h */ case    1:  		/* lwz R9, <#[R31 + 4]> */
		/* 82133F80h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82133F80h case    1:*/		return 0x82133F84;
		  /* 82133F84h */ case    2:  		/* addi R11, R11, 266 */
		/* 82133F84h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10A);
		/* 82133F84h case    2:*/		return 0x82133F88;
		  /* 82133F88h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82133F88h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82133F88h case    3:*/		return 0x82133F8C;
		  /* 82133F8Ch */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82133F8Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82133F8Ch case    4:*/		return 0x82133F90;
		  /* 82133F90h */ case    5:  		/* stwx R9, <#[R10 + R27]> */
		/* 82133F90h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 82133F90h case    5:*/		return 0x82133F94;
		  /* 82133F94h */ case    6:  		/* lwz R10, <#[R28 + 8]> */
		/* 82133F94h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82133F94h case    6:*/		return 0x82133F98;
		  /* 82133F98h */ case    7:  		/* lwz R10, <#[R10]> */
		/* 82133F98h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82133F98h case    7:*/		return 0x82133F9C;
		  /* 82133F9Ch */ case    8:  		/* stwx R10, <#[R11 + R27]> */
		/* 82133F9Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82133F9Ch case    8:*/		return 0x82133FA0;
	}
	return 0x82133FA0;
} // Block from 82133F7Ch-82133FA0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82133FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133FA0);
		  /* 82133FA0h */ case    0:  		/* mr R3, R27 */
		/* 82133FA0h case    0:*/		regs.R3 = regs.R27;
		/* 82133FA0h case    0:*/		return 0x82133FA4;
		  /* 82133FA4h */ case    1:  		/* lfd FR1, <#[R31 + 32]> */
		/* 82133FA4h case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000020) );
		/* 82133FA4h case    1:*/		return 0x82133FA8;
		  /* 82133FA8h */ case    2:  		/* lwz R6, <#[R31 + 16]> */
		/* 82133FA8h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 82133FA8h case    2:*/		return 0x82133FAC;
		  /* 82133FACh */ case    3:  		/* lwz R5, <#[R31 + 12]> */
		/* 82133FACh case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 82133FACh case    3:*/		return 0x82133FB0;
		  /* 82133FB0h */ case    4:  		/* lwz R4, <#[R31 + 4]> */
		/* 82133FB0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82133FB0h case    4:*/		return 0x82133FB4;
		  /* 82133FB4h */ case    5:  		/* bl -224652 */
		/* 82133FB4h case    5:*/		regs.LR = 0x82133FB8; return 0x820FD228;
		/* 82133FB4h case    5:*/		return 0x82133FB8;
		  /* 82133FB8h */ case    6:  		/* lwz R10, <#[R28]> */
		/* 82133FB8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82133FB8h case    6:*/		return 0x82133FBC;
		  /* 82133FBCh */ case    7:  		/* mr R11, R21 */
		/* 82133FBCh case    7:*/		regs.R11 = regs.R21;
		/* 82133FBCh case    7:*/		return 0x82133FC0;
		  /* 82133FC0h */ case    8:  		/* rlwinm. R10, R10, 0, 12, 31 */
		/* 82133FC0h case    8:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R10,regs.R10);
		/* 82133FC0h case    8:*/		return 0x82133FC4;
		  /* 82133FC4h */ case    9:  		/* bc 12, CR0_EQ, 40 */
		/* 82133FC4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82133FEC;  }
		/* 82133FC4h case    9:*/		return 0x82133FC8;
		  /* 82133FC8h */ case   10:  		/* mr R10, R21 */
		/* 82133FC8h case   10:*/		regs.R10 = regs.R21;
		/* 82133FC8h case   10:*/		return 0x82133FCC;
		  /* 82133FCCh */ case   11:  		/* lwz R9, <#[R28 + 8]> */
		/* 82133FCCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82133FCCh case   11:*/		return 0x82133FD0;
		  /* 82133FD0h */ case   12:  		/* addi R11, R11, 1 */
		/* 82133FD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82133FD0h case   12:*/		return 0x82133FD4;
		  /* 82133FD4h */ case   13:  		/* stwx R3, <#[R10 + R9]> */
		/* 82133FD4h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82133FD4h case   13:*/		return 0x82133FD8;
		  /* 82133FD8h */ case   14:  		/* addi R10, R10, 4 */
		/* 82133FD8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82133FD8h case   14:*/		return 0x82133FDC;
		  /* 82133FDCh */ case   15:  		/* lwz R9, <#[R28]> */
		/* 82133FDCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82133FDCh case   15:*/		return 0x82133FE0;
		  /* 82133FE0h */ case   16:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 82133FE0h case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 82133FE0h case   16:*/		return 0x82133FE4;
		  /* 82133FE4h */ case   17:  		/* cmplw CR6, R11, R9 */
		/* 82133FE4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82133FE4h case   17:*/		return 0x82133FE8;
		  /* 82133FE8h */ case   18:  		/* bc 12, CR6_LT, -28 */
		/* 82133FE8h case   18:*/		if ( regs.CR[6].lt ) { return 0x82133FCC;  }
		/* 82133FE8h case   18:*/		return 0x82133FEC;
	}
	return 0x82133FEC;
} // Block from 82133FA0h-82133FECh (19 instructions)

//////////////////////////////////////////////////////
// Block at 82133FECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82133FEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82133FEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82133FEC);
		  /* 82133FECh */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 82133FECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82133FECh case    0:*/		return 0x82133FF0;
		  /* 82133FF0h */ case    1:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82133FF0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82133FF0h case    1:*/		return 0x82133FF4;
		  /* 82133FF4h */ case    2:  		/* mr R4, R31 */
		/* 82133FF4h case    2:*/		regs.R4 = regs.R31;
		/* 82133FF4h case    2:*/		return 0x82133FF8;
		  /* 82133FF8h */ case    3:  		/* lwzx R29, <#[R10 + R11]> */
		/* 82133FF8h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82133FF8h case    3:*/		return 0x82133FFC;
		  /* 82133FFCh */ case    4:  		/* mr R3, R29 */
		/* 82133FFCh case    4:*/		regs.R3 = regs.R29;
		/* 82133FFCh case    4:*/		return 0x82134000;
		  /* 82134000h */ case    5:  		/* bl -226392 */
		/* 82134000h case    5:*/		regs.LR = 0x82134004; return 0x820FCBA8;
		/* 82134000h case    5:*/		return 0x82134004;
		  /* 82134004h */ case    6:  		/* stw R30, <#[R29 + 12]> */
		/* 82134004h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 82134004h case    6:*/		return 0x82134008;
		  /* 82134008h */ case    7:  		/* stw R23, <#[R31 + 64]> */
		/* 82134008h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000040) );
		/* 82134008h case    7:*/		return 0x8213400C;
		  /* 8213400Ch */ case    8:  		/* stw R21, <#[R29 + 64]> */
		/* 8213400Ch case    8:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R29 + 0x00000040) );
		/* 8213400Ch case    8:*/		return 0x82134010;
	}
	return 0x82134010;
} // Block from 82133FECh-82134010h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82134010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134010);
		  /* 82134010h */ case    0:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 82134010h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 82134010h case    0:*/		return 0x82134014;
		  /* 82134014h */ case    1:  		/* stwx R28, <#[R11 + R19]> */
		/* 82134014h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 82134014h case    1:*/		return 0x82134018;
	}
	return 0x82134018;
} // Block from 82134010h-82134018h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82134018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134018);
		  /* 82134018h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 82134018h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82134018h case    0:*/		return 0x8213401C;
		  /* 8213401Ch */ case    1:  		/* stw R23, <#[R11 + 36]> */
		/* 8213401Ch case    1:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000024) );
		/* 8213401Ch case    1:*/		return 0x82134020;
	}
	return 0x82134020;
} // Block from 82134018h-82134020h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82134020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134020);
		  /* 82134020h */ case    0:  		/* addi R25, R25, 1 */
		/* 82134020h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82134020h case    0:*/		return 0x82134024;
		  /* 82134024h */ case    1:  		/* addi R24, R24, 4 */
		/* 82134024h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 82134024h case    1:*/		return 0x82134028;
		  /* 82134028h */ case    2:  		/* addi R26, R26, 4 */
		/* 82134028h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82134028h case    2:*/		return 0x8213402C;
		  /* 8213402Ch */ case    3:  		/* cmplw CR6, R25, R20 */
		/* 8213402Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R20);
		/* 8213402Ch case    3:*/		return 0x82134030;
		  /* 82134030h */ case    4:  		/* bc 12, CR6_LT, -1136 */
		/* 82134030h case    4:*/		if ( regs.CR[6].lt ) { return 0x82133BC0;  }
		/* 82134030h case    4:*/		return 0x82134034;
	}
	return 0x82134034;
} // Block from 82134020h-82134034h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134034);
		  /* 82134034h */ case    0:  		/* addi R22, R22, 1 */
		/* 82134034h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82134034h case    0:*/		return 0x82134038;
		  /* 82134038h */ case    1:  		/* cmplwi CR6, R22, 3 */
		/* 82134038h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000003);
		/* 82134038h case    1:*/		return 0x8213403C;
		  /* 8213403Ch */ case    2:  		/* bc 12, CR6_LT, -1172 */
		/* 8213403Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82133BA8;  }
		/* 8213403Ch case    2:*/		return 0x82134040;
		  /* 82134040h */ case    3:  		/* lwz R11, <#[R27 + 60]> */
		/* 82134040h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 82134040h case    3:*/		return 0x82134044;
		  /* 82134044h */ case    4:  		/* mr R30, R21 */
		/* 82134044h case    4:*/		regs.R30 = regs.R21;
		/* 82134044h case    4:*/		return 0x82134048;
		  /* 82134048h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82134048h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134048h case    5:*/		return 0x8213404C;
		  /* 8213404Ch */ case    6:  		/* bc 12, CR6_EQ, 252 */
		/* 8213404Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82134148;  }
		/* 8213404Ch case    6:*/		return 0x82134050;
		  /* 82134050h */ case    7:  		/* mr R31, R19 */
		/* 82134050h case    7:*/		regs.R31 = regs.R19;
		/* 82134050h case    7:*/		return 0x82134054;
		  /* 82134054h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 82134054h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82134054h case    8:*/		return 0x82134058;
		  /* 82134058h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82134058h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134058h case    9:*/		return 0x8213405C;
		  /* 8213405Ch */ case   10:  		/* bc 4, CR6_EQ, 216 */
		/* 8213405Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x82134134;  }
		/* 8213405Ch case   10:*/		return 0x82134060;
		  /* 82134060h */ case   11:  		/* li R3, 116 */
		/* 82134060h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82134060h case   11:*/		return 0x82134064;
		  /* 82134064h */ case   12:  		/* bl -228044 */
		/* 82134064h case   12:*/		regs.LR = 0x82134068; return 0x820FC598;
		/* 82134064h case   12:*/		return 0x82134068;
		  /* 82134068h */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 82134068h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82134068h case   13:*/		return 0x8213406C;
		  /* 8213406Ch */ case   14:  		/* bc 12, CR0_EQ, 152 */
		/* 8213406Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x82134104;  }
		/* 8213406Ch case   14:*/		return 0x82134070;
		  /* 82134070h */ case   15:  		/* bl -229840 */
		/* 82134070h case   15:*/		regs.LR = 0x82134074; return 0x820FBEA0;
		/* 82134070h case   15:*/		return 0x82134074;
		  /* 82134074h */ case   16:  		/* b 148 */
		/* 82134074h case   16:*/		return 0x82134108;
		/* 82134074h case   16:*/		return 0x82134078;
	}
	return 0x82134078;
} // Block from 82134034h-82134078h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82134078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134078);
		  /* 82134078h */ case    0:  		/* lis R11, -32253 */
		/* 82134078h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82134078h case    0:*/		return 0x8213407C;
		  /* 8213407Ch */ case    1:  		/* li R5, 4514 */
		/* 8213407Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11A2);
		/* 8213407Ch case    1:*/		return 0x82134080;
		  /* 82134080h */ case    2:  		/* addi R6, R11, 21000 */
		/* 82134080h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5208);
		/* 82134080h case    2:*/		return 0x82134084;
		  /* 82134084h */ case    3:  		/* li R4, 0 */
		/* 82134084h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82134084h case    3:*/		return 0x82134088;
		  /* 82134088h */ case    4:  		/* mr R3, R27 */
		/* 82134088h case    4:*/		regs.R3 = regs.R27;
		/* 82134088h case    4:*/		return 0x8213408C;
		  /* 8213408Ch */ case    5:  		/* bl -153948 */
		/* 8213408Ch case    5:*/		regs.LR = 0x82134090; return 0x8210E730;
		/* 8213408Ch case    5:*/		return 0x82134090;
		  /* 82134090h */ case    6:  		/* lis R3, -32768 */
		/* 82134090h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82134090h case    6:*/		return 0x82134094;
		  /* 82134094h */ case    7:  		/* ori R3, R3, 16389 */
		/* 82134094h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82134094h case    7:*/		return 0x82134098;
		  /* 82134098h */ case    8:  		/* b 280 */
		/* 82134098h case    8:*/		return 0x821341B0;
		/* 82134098h case    8:*/		return 0x8213409C;
	}
	return 0x8213409C;
} // Block from 82134078h-8213409Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213409Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213409C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213409C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213409C);
		  /* 8213409Ch */ case    0:  		/* lis R11, -32253 */
		/* 8213409Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213409Ch case    0:*/		return 0x821340A0;
		  /* 821340A0h */ case    1:  		/* addi R6, R11, 20888 */
		/* 821340A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5198);
		/* 821340A0h case    1:*/		return 0x821340A4;
	}
	return 0x821340A4;
} // Block from 8213409Ch-821340A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821340A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340A4);
		  /* 821340A4h */ case    0:  		/* bl -153972 */
		/* 821340A4h case    0:*/		regs.LR = 0x821340A8; return 0x8210E730;
		/* 821340A4h case    0:*/		return 0x821340A8;
		  /* 821340A8h */ case    1:  		/* b -24 */
		/* 821340A8h case    1:*/		return 0x82134090;
		/* 821340A8h case    1:*/		return 0x821340AC;
	}
	return 0x821340AC;
} // Block from 821340A4h-821340ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821340ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340AC);
		  /* 821340ACh */ case    0:  		/* lis R11, -32253 */
		/* 821340ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821340ACh case    0:*/		return 0x821340B0;
		  /* 821340B0h */ case    1:  		/* lwz R4, <#[R28 + 60]> */
		/* 821340B0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000003C) );
		/* 821340B0h case    1:*/		return 0x821340B4;
		  /* 821340B4h */ case    2:  		/* li R5, 4516 */
		/* 821340B4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11A4);
		/* 821340B4h case    2:*/		return 0x821340B8;
		  /* 821340B8h */ case    3:  		/* addi R6, R11, 20800 */
		/* 821340B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5140);
		/* 821340B8h case    3:*/		return 0x821340BC;
	}
	return 0x821340BC;
} // Block from 821340ACh-821340BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821340BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340BC);
		  /* 821340BCh */ case    0:  		/* lbz R7, <#[R27 + 203]> */
		/* 821340BCh case    0:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R27 + 0x000000CB) );
		/* 821340BCh case    0:*/		return 0x821340C0;
		  /* 821340C0h */ case    1:  		/* mr R3, R27 */
		/* 821340C0h case    1:*/		regs.R3 = regs.R27;
		/* 821340C0h case    1:*/		return 0x821340C4;
		  /* 821340C4h */ case    2:  		/* b -32 */
		/* 821340C4h case    2:*/		return 0x821340A4;
		/* 821340C4h case    2:*/		return 0x821340C8;
	}
	return 0x821340C8;
} // Block from 821340BCh-821340C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821340C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340C8);
		  /* 821340C8h */ case    0:  		/* rlwinm. R11, R8, 0, 20, 20 */
		/* 821340C8h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R8);
		/* 821340C8h case    0:*/		return 0x821340CC;
		  /* 821340CCh */ case    1:  		/* li R5, 4517 */
		/* 821340CCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11A5);
		/* 821340CCh case    1:*/		return 0x821340D0;
	}
	return 0x821340D0;
} // Block from 821340C8h-821340D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821340D0h
// Function '?PullOut@CPSLegacyProgram@D3DXShader@@IAAJPAIIPAPAVCInstruction@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340D0);
		  /* 821340D0h */ case    0:  		/* li R4, 0 */
		/* 821340D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821340D0h case    0:*/		return 0x821340D4;
		  /* 821340D4h */ case    1:  		/* mr R3, R27 */
		/* 821340D4h case    1:*/		regs.R3 = regs.R27;
		/* 821340D4h case    1:*/		return 0x821340D8;
		  /* 821340D8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821340D8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821340E8;  }
		/* 821340D8h case    2:*/		return 0x821340DC;
		  /* 821340DCh */ case    3:  		/* lis R11, -32253 */
		/* 821340DCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821340DCh case    3:*/		return 0x821340E0;
		  /* 821340E0h */ case    4:  		/* addi R6, R11, 20664 */
		/* 821340E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x50B8);
		/* 821340E0h case    4:*/		return 0x821340E4;
		  /* 821340E4h */ case    5:  		/* b -88 */
		/* 821340E4h case    5:*/		return 0x8213408C;
		/* 821340E4h case    5:*/		return 0x821340E8;
	}
	return 0x821340E8;
} // Block from 821340D0h-821340E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821340E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340E8);
		  /* 821340E8h */ case    0:  		/* lis R11, -32253 */
		/* 821340E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821340E8h case    0:*/		return 0x821340EC;
		  /* 821340ECh */ case    1:  		/* addi R6, R11, 20624 */
		/* 821340ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5090);
		/* 821340ECh case    1:*/		return 0x821340F0;
		  /* 821340F0h */ case    2:  		/* b -100 */
		/* 821340F0h case    2:*/		return 0x8213408C;
		/* 821340F0h case    2:*/		return 0x821340F4;
	}
	return 0x821340F4;
} // Block from 821340E8h-821340F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821340F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821340F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821340F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821340F4);
		  /* 821340F4h */ case    0:  		/* lis R11, -32253 */
		/* 821340F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821340F4h case    0:*/		return 0x821340F8;
		  /* 821340F8h */ case    1:  		/* li R5, 4519 */
		/* 821340F8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11A7);
		/* 821340F8h case    1:*/		return 0x821340FC;
		  /* 821340FCh */ case    2:  		/* addi R6, R11, 20576 */
		/* 821340FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5060);
		/* 821340FCh case    2:*/		return 0x82134100;
		  /* 82134100h */ case    3:  		/* b -124 */
		/* 82134100h case    3:*/		return 0x82134084;
		/* 82134100h case    3:*/		return 0x82134104;
	}
	return 0x82134104;
} // Block from 821340F4h-82134104h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134104);
		  /* 82134104h */ case    0:  		/* mr R3, R21 */
		/* 82134104h case    0:*/		regs.R3 = regs.R21;
		/* 82134104h case    0:*/		return 0x82134108;
	}
	return 0x82134108;
} // Block from 82134104h-82134108h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134108);
		  /* 82134108h */ case    0:  		/* stw R3, <#[R31]> */
		/* 82134108h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82134108h case    0:*/		return 0x8213410C;
		  /* 8213410Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8213410Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213410Ch case    1:*/		return 0x82134110;
		  /* 82134110h */ case    2:  		/* bc 12, CR6_EQ, -1336 */
		/* 82134110h case    2:*/		if ( regs.CR[6].eq ) { return 0x82133BD8;  }
		/* 82134110h case    2:*/		return 0x82134114;
		  /* 82134114h */ case    3:  		/* li R7, 0 */
		/* 82134114h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82134114h case    3:*/		return 0x82134118;
		  /* 82134118h */ case    4:  		/* li R6, 0 */
		/* 82134118h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82134118h case    4:*/		return 0x8213411C;
		  /* 8213411Ch */ case    5:  		/* li R5, 0 */
		/* 8213411Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213411Ch case    5:*/		return 0x82134120;
		  /* 82134120h */ case    6:  		/* li R4, 0 */
		/* 82134120h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82134120h case    6:*/		return 0x82134124;
		  /* 82134124h */ case    7:  		/* bl -228084 */
		/* 82134124h case    7:*/		regs.LR = 0x82134128; return 0x820FC630;
		/* 82134124h case    7:*/		return 0x82134128;
		  /* 82134128h */ case    8:  		/* mr R3, R27 */
		/* 82134128h case    8:*/		regs.R3 = regs.R27;
		/* 82134128h case    8:*/		return 0x8213412C;
		  /* 8213412Ch */ case    9:  		/* lwz R4, <#[R31]> */
		/* 8213412Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8213412Ch case    9:*/		return 0x82134130;
		  /* 82134130h */ case   10:  		/* bl -225400 */
		/* 82134130h case   10:*/		regs.LR = 0x82134134; return 0x820FD0B8;
		/* 82134130h case   10:*/		return 0x82134134;
	}
	return 0x82134134;
} // Block from 82134108h-82134134h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82134134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134134);
		  /* 82134134h */ case    0:  		/* lwz R11, <#[R27 + 60]> */
		/* 82134134h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 82134134h case    0:*/		return 0x82134138;
		  /* 82134138h */ case    1:  		/* addi R30, R30, 1 */
		/* 82134138h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82134138h case    1:*/		return 0x8213413C;
		  /* 8213413Ch */ case    2:  		/* addi R31, R31, 4 */
		/* 8213413Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8213413Ch case    2:*/		return 0x82134140;
		  /* 82134140h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82134140h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82134140h case    3:*/		return 0x82134144;
		  /* 82134144h */ case    4:  		/* bc 12, CR6_LT, -240 */
		/* 82134144h case    4:*/		if ( regs.CR[6].lt ) { return 0x82134054;  }
		/* 82134144h case    4:*/		return 0x82134148;
	}
	return 0x82134148;
} // Block from 82134134h-82134148h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134148);
		  /* 82134148h */ case    0:  		/* stw R11, <#[R14]> */
		/* 82134148h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 82134148h case    0:*/		return 0x8213414C;
		  /* 8213414Ch */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 8213414Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8213414Ch case    1:*/		return 0x82134150;
		  /* 82134150h */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 82134150h case    2:*/		if ( regs.CR[6].eq ) { return 0x821341AC;  }
		/* 82134150h case    2:*/		return 0x82134154;
		  /* 82134154h */ case    3:  		/* mr R11, R18 */
		/* 82134154h case    3:*/		regs.R11 = regs.R18;
		/* 82134154h case    3:*/		return 0x82134158;
		  /* 82134158h */ case    4:  		/* mtspr CTR, R20 */
		/* 82134158h case    4:*/		regs.CTR = regs.R20;
		/* 82134158h case    4:*/		return 0x8213415C;
		  /* 8213415Ch */ case    5:  		/* lwz R10, <#[R11]> */
		/* 8213415Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213415Ch case    5:*/		return 0x82134160;
		  /* 82134160h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 82134160h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82134160h case    6:*/		return 0x82134164;
		  /* 82134164h */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 82134164h case    7:*/		if ( regs.CR[6].eq ) { return 0x821341A4;  }
		/* 82134164h case    7:*/		return 0x82134168;
		  /* 82134168h */ case    8:  		/* lwz R9, <#[R10 + 36]> */
		/* 82134168h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000024) );
		/* 82134168h case    8:*/		return 0x8213416C;
		  /* 8213416Ch */ case    9:  		/* cmplwi CR6, R9, 1 */
		/* 8213416Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 8213416Ch case    9:*/		return 0x82134170;
		  /* 82134170h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 82134170h case   10:*/		if ( regs.CR[6].eq ) { return 0x821341A4;  }
		/* 82134170h case   10:*/		return 0x82134174;
		  /* 82134174h */ case   11:  		/* lwz R10, <#[R10]> */
		/* 82134174h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82134174h case   11:*/		return 0x82134178;
		  /* 82134178h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 82134178h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82134178h case   12:*/		return 0x8213417C;
		  /* 8213417Ch */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 8213417Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821341A4;  }
		/* 8213417Ch case   13:*/		return 0x82134180;
		  /* 82134180h */ case   14:  		/* lwz R10, <#[R14]> */
		/* 82134180h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000000) );
		/* 82134180h case   14:*/		return 0x82134184;
		  /* 82134184h */ case   15:  		/* lwz R9, <#[R11]> */
		/* 82134184h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82134184h case   15:*/		return 0x82134188;
		  /* 82134188h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82134188h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82134188h case   16:*/		return 0x8213418C;
		  /* 8213418Ch */ case   17:  		/* stwx R9, <#[R10 + R19]> */
		/* 8213418Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R19 + 0x00000000) );
		/* 8213418Ch case   17:*/		return 0x82134190;
		  /* 82134190h */ case   18:  		/* lwz R10, <#[R14]> */
		/* 82134190h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000000) );
		/* 82134190h case   18:*/		return 0x82134194;
		  /* 82134194h */ case   19:  		/* addi R10, R10, 1 */
		/* 82134194h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82134194h case   19:*/		return 0x82134198;
		  /* 82134198h */ case   20:  		/* stw R10, <#[R14]> */
		/* 82134198h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R14 + 0x00000000) );
		/* 82134198h case   20:*/		return 0x8213419C;
		  /* 8213419Ch */ case   21:  		/* lwz R10, <#[R11]> */
		/* 8213419Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213419Ch case   21:*/		return 0x821341A0;
		  /* 821341A0h */ case   22:  		/* stw R23, <#[R10 + 36]> */
		/* 821341A0h case   22:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000024) );
		/* 821341A0h case   22:*/		return 0x821341A4;
	}
	return 0x821341A4;
} // Block from 82134148h-821341A4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821341A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821341A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821341A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821341A4);
		  /* 821341A4h */ case    0:  		/* addi R11, R11, 4 */
		/* 821341A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821341A4h case    0:*/		return 0x821341A8;
		  /* 821341A8h */ case    1:  		/* bc 16, CR0_LT, -76 */
		/* 821341A8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213415C;  }
		/* 821341A8h case    1:*/		return 0x821341AC;
	}
	return 0x821341AC;
} // Block from 821341A4h-821341ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821341ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821341AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821341AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821341AC);
		  /* 821341ACh */ case    0:  		/* li R3, 0 */
		/* 821341ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821341ACh case    0:*/		return 0x821341B0;
	}
	return 0x821341B0;
} // Block from 821341ACh-821341B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821341B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821341B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821341B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821341B0);
		  /* 821341B0h */ case    0:  		/* addi R1, R1, 320 */
		/* 821341B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 821341B0h case    0:*/		return 0x821341B4;
		  /* 821341B4h */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 821341B4h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 821341B4h case    1:*/		return 0x821341B8;
		  /* 821341B8h */ case    2:  		/* b -667464 */
		/* 821341B8h case    2:*/		return 0x82091270;
		/* 821341B8h case    2:*/		return 0x821341BC;
		  /* 821341BCh */ case    3:  		/* nop */
		/* 821341BCh case    3:*/		cpu::op::nop();
		/* 821341BCh case    3:*/		return 0x821341C0;
	}
	return 0x821341C0;
} // Block from 821341B0h-821341C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821341C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821341C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821341C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821341C0);
		  /* 821341C0h */ case    0:  		/* mfspr R12, LR */
		/* 821341C0h case    0:*/		regs.R12 = regs.LR;
		/* 821341C0h case    0:*/		return 0x821341C4;
		  /* 821341C4h */ case    1:  		/* bl -667504 */
		/* 821341C4h case    1:*/		regs.LR = 0x821341C8; return 0x82091254;
		/* 821341C4h case    1:*/		return 0x821341C8;
		  /* 821341C8h */ case    2:  		/* li R11, 0 */
		/* 821341C8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821341C8h case    2:*/		return 0x821341CC;
		  /* 821341CCh */ case    3:  		/* mr R29, R3 */
		/* 821341CCh case    3:*/		regs.R29 = regs.R3;
		/* 821341CCh case    3:*/		return 0x821341D0;
		  /* 821341D0h */ case    4:  		/* li R3, 0 */
		/* 821341D0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821341D0h case    4:*/		return 0x821341D4;
		  /* 821341D4h */ case    5:  		/* stw R11, <#[R9]> */
		/* 821341D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821341D4h case    5:*/		return 0x821341D8;
		  /* 821341D8h */ case    6:  		/* mr R31, R5 */
		/* 821341D8h case    6:*/		regs.R31 = regs.R5;
		/* 821341D8h case    6:*/		return 0x821341DC;
		  /* 821341DCh */ case    7:  		/* cmplw CR6, R5, R6 */
		/* 821341DCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 821341DCh case    7:*/		return 0x821341E0;
		  /* 821341E0h */ case    8:  		/* bc 4, CR6_LT, 148 */
		/* 821341E0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82134274;  }
		/* 821341E0h case    8:*/		return 0x821341E4;
		  /* 821341E4h */ case    9:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 821341E4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 821341E4h case    9:*/		return 0x821341E8;
		  /* 821341E8h */ case   10:  		/* add R30, R11, R4 */
		/* 821341E8h case   10:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R4);
		/* 821341E8h case   10:*/		return 0x821341EC;
		  /* 821341ECh */ case   11:  		/* lwz R5, <#[R30]> */
		/* 821341ECh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 821341ECh case   11:*/		return 0x821341F0;
		  /* 821341F0h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 821341F0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821341F0h case   12:*/		return 0x821341F4;
		  /* 821341F4h */ case   13:  		/* bc 12, CR6_EQ, 112 */
		/* 821341F4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82134264;  }
		/* 821341F4h case   13:*/		return 0x821341F8;
		  /* 821341F8h */ case   14:  		/* lwz R11, <#[R5 + 4]> */
		/* 821341F8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821341F8h case   14:*/		return 0x821341FC;
		  /* 821341FCh */ case   15:  		/* li R4, 0 */
		/* 821341FCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821341FCh case   15:*/		return 0x82134200;
		  /* 82134200h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82134200h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134200h case   16:*/		return 0x82134204;
		  /* 82134204h */ case   17:  		/* bc 4, CR6_GT, 96 */
		/* 82134204h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82134264;  }
		/* 82134204h case   17:*/		return 0x82134208;
		  /* 82134208h */ case   18:  		/* li R10, 0 */
		/* 82134208h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82134208h case   18:*/		return 0x8213420C;
		  /* 8213420Ch */ case   19:  		/* lwz R11, <#[R5 + 8]> */
		/* 8213420Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8213420Ch case   19:*/		return 0x82134210;
		  /* 82134210h */ case   20:  		/* lwz R28, <#[R29 + 20]> */
		/* 82134210h case   20:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000014) );
		/* 82134210h case   20:*/		return 0x82134214;
		  /* 82134214h */ case   21:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82134214h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82134214h case   21:*/		return 0x82134218;
		  /* 82134218h */ case   22:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 82134218h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 82134218h case   22:*/		return 0x8213421C;
		  /* 8213421Ch */ case   23:  		/* cmplw CR6, R11, R7 */
		/* 8213421Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8213421Ch case   23:*/		return 0x82134220;
		  /* 82134220h */ case   24:  		/* lwzx R11, <#[R27 + R28]> */
		/* 82134220h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R28 + 0x00000000) );
		/* 82134220h case   24:*/		return 0x82134224;
		  /* 82134224h */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 82134224h case   25:*/		if ( regs.CR[6].eq ) { return 0x82134234;  }
		/* 82134224h case   25:*/		return 0x82134228;
		  /* 82134228h */ case   26:  		/* lwz R28, <#[R11 + 56]> */
		/* 82134228h case   26:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000038) );
		/* 82134228h case   26:*/		return 0x8213422C;
		  /* 8213422Ch */ case   27:  		/* cmplw CR6, R28, R7 */
		/* 8213422Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R7);
		/* 8213422Ch case   27:*/		return 0x82134230;
		  /* 82134230h */ case   28:  		/* bc 4, CR6_EQ, 32 */
		/* 82134230h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82134250;  }
		/* 82134230h case   28:*/		return 0x82134234;
	}
	return 0x82134234;
} // Block from 821341C0h-82134234h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82134234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134234);
		  /* 82134234h */ case    0:  		/* lwz R28, <#[R8 + 12]> */
		/* 82134234h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R8 + 0x0000000C) );
		/* 82134234h case    0:*/		return 0x82134238;
		  /* 82134238h */ case    1:  		/* li R27, 1 */
		/* 82134238h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82134238h case    1:*/		return 0x8213423C;
		  /* 8213423Ch */ case    2:  		/* mr R3, R31 */
		/* 8213423Ch case    2:*/		regs.R3 = regs.R31;
		/* 8213423Ch case    2:*/		return 0x82134240;
		  /* 82134240h */ case    3:  		/* stw R28, <#[R11 + 12]> */
		/* 82134240h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 82134240h case    3:*/		return 0x82134244;
		  /* 82134244h */ case    4:  		/* lwz R28, <#[R8 + 16]> */
		/* 82134244h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R8 + 0x00000010) );
		/* 82134244h case    4:*/		return 0x82134248;
		  /* 82134248h */ case    5:  		/* stw R28, <#[R11 + 16]> */
		/* 82134248h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000010) );
		/* 82134248h case    5:*/		return 0x8213424C;
		  /* 8213424Ch */ case    6:  		/* stw R27, <#[R9]> */
		/* 8213424Ch case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R9 + 0x00000000) );
		/* 8213424Ch case    6:*/		return 0x82134250;
	}
	return 0x82134250;
} // Block from 82134234h-82134250h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82134250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134250);
		  /* 82134250h */ case    0:  		/* lwz R11, <#[R5 + 4]> */
		/* 82134250h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82134250h case    0:*/		return 0x82134254;
		  /* 82134254h */ case    1:  		/* addi R4, R4, 1 */
		/* 82134254h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82134254h case    1:*/		return 0x82134258;
		  /* 82134258h */ case    2:  		/* addi R10, R10, 4 */
		/* 82134258h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82134258h case    2:*/		return 0x8213425C;
		  /* 8213425Ch */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 8213425Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8213425Ch case    3:*/		return 0x82134260;
		  /* 82134260h */ case    4:  		/* bc 12, CR6_LT, -84 */
		/* 82134260h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213420C;  }
		/* 82134260h case    4:*/		return 0x82134264;
	}
	return 0x82134264;
} // Block from 82134250h-82134264h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134264);
		  /* 82134264h */ case    0:  		/* addi R31, R31, 1 */
		/* 82134264h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82134264h case    0:*/		return 0x82134268;
		  /* 82134268h */ case    1:  		/* addi R30, R30, 4 */
		/* 82134268h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82134268h case    1:*/		return 0x8213426C;
		  /* 8213426Ch */ case    2:  		/* cmplw CR6, R31, R6 */
		/* 8213426Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R6);
		/* 8213426Ch case    2:*/		return 0x82134270;
		  /* 82134270h */ case    3:  		/* bc 12, CR6_LT, -132 */
		/* 82134270h case    3:*/		if ( regs.CR[6].lt ) { return 0x821341EC;  }
		/* 82134270h case    3:*/		return 0x82134274;
	}
	return 0x82134274;
} // Block from 82134264h-82134274h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134274);
		  /* 82134274h */ case    0:  		/* b -667600 */
		/* 82134274h case    0:*/		return 0x820912A4;
		/* 82134274h case    0:*/		return 0x82134278;
	}
	return 0x82134278;
} // Block from 82134274h-82134278h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134278);
		  /* 82134278h */ case    0:  		/* mfspr R12, LR */
		/* 82134278h case    0:*/		regs.R12 = regs.LR;
		/* 82134278h case    0:*/		return 0x8213427C;
		  /* 8213427Ch */ case    1:  		/* bl -667680 */
		/* 8213427Ch case    1:*/		regs.LR = 0x82134280; return 0x8209125C;
		/* 8213427Ch case    1:*/		return 0x82134280;
		  /* 82134280h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82134280h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82134280h case    2:*/		return 0x82134284;
		  /* 82134284h */ case    3:  		/* lwz R11, <#[R3 + 708]> */
		/* 82134284h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000002C4) );
		/* 82134284h case    3:*/		return 0x82134288;
		  /* 82134288h */ case    4:  		/* mr R31, R3 */
		/* 82134288h case    4:*/		regs.R31 = regs.R3;
		/* 82134288h case    4:*/		return 0x8213428C;
		  /* 8213428Ch */ case    5:  		/* li R29, 0 */
		/* 8213428Ch case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213428Ch case    5:*/		return 0x82134290;
		  /* 82134290h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82134290h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134290h case    6:*/		return 0x82134294;
		  /* 82134294h */ case    7:  		/* bc 4, CR6_GT, 100 */
		/* 82134294h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821342F8;  }
		/* 82134294h case    7:*/		return 0x82134298;
		  /* 82134298h */ case    8:  		/* li R30, 0 */
		/* 82134298h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82134298h case    8:*/		return 0x8213429C;
		  /* 8213429Ch */ case    9:  		/* lwz R11, <#[R31 + 696]> */
		/* 8213429Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213429Ch case    9:*/		return 0x821342A0;
		  /* 821342A0h */ case   10:  		/* lwz R10, <#[R31 + 24]> */
		/* 821342A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 821342A0h case   10:*/		return 0x821342A4;
		  /* 821342A4h */ case   11:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821342A4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821342A4h case   11:*/		return 0x821342A8;
		  /* 821342A8h */ case   12:  		/* lwzx R10, <#[R10 + R30]> */
		/* 821342A8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 821342A8h case   12:*/		return 0x821342AC;
		  /* 821342ACh */ case   13:  		/* lwz R9, <#[R11 + 4]> */
		/* 821342ACh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821342ACh case   13:*/		return 0x821342B0;
		  /* 821342B0h */ case   14:  		/* lwz R4, <#[R11 + 8]> */
		/* 821342B0h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 821342B0h case   14:*/		return 0x821342B4;
		  /* 821342B4h */ case   15:  		/* rlwinm R5, R9, 2, 0, 29 */
		/* 821342B4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 821342B4h case   15:*/		return 0x821342B8;
		  /* 821342B8h */ case   16:  		/* lwz R3, <#[R10 + 8]> */
		/* 821342B8h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 821342B8h case   16:*/		return 0x821342BC;
		  /* 821342BCh */ case   17:  		/* bl -665868 */
		/* 821342BCh case   17:*/		regs.LR = 0x821342C0; return 0x820919B0;
		/* 821342BCh case   17:*/		return 0x821342C0;
		  /* 821342C0h */ case   18:  		/* lwz R11, <#[R31 + 696]> */
		/* 821342C0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 821342C0h case   18:*/		return 0x821342C4;
		  /* 821342C4h */ case   19:  		/* lwz R10, <#[R31 + 24]> */
		/* 821342C4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 821342C4h case   19:*/		return 0x821342C8;
		  /* 821342C8h */ case   20:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821342C8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821342C8h case   20:*/		return 0x821342CC;
		  /* 821342CCh */ case   21:  		/* lwzx R10, <#[R10 + R30]> */
		/* 821342CCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 821342CCh case   21:*/		return 0x821342D0;
		  /* 821342D0h */ case   22:  		/* lwz R9, <#[R11 + 12]> */
		/* 821342D0h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821342D0h case   22:*/		return 0x821342D4;
		  /* 821342D4h */ case   23:  		/* lwz R4, <#[R11 + 16]> */
		/* 821342D4h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821342D4h case   23:*/		return 0x821342D8;
		  /* 821342D8h */ case   24:  		/* rlwinm R5, R9, 2, 0, 29 */
		/* 821342D8h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 821342D8h case   24:*/		return 0x821342DC;
		  /* 821342DCh */ case   25:  		/* lwz R3, <#[R10 + 16]> */
		/* 821342DCh case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000010) );
		/* 821342DCh case   25:*/		return 0x821342E0;
		  /* 821342E0h */ case   26:  		/* bl -665904 */
		/* 821342E0h case   26:*/		regs.LR = 0x821342E4; return 0x820919B0;
		/* 821342E0h case   26:*/		return 0x821342E4;
		  /* 821342E4h */ case   27:  		/* lwz R11, <#[R31 + 708]> */
		/* 821342E4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C4) );
		/* 821342E4h case   27:*/		return 0x821342E8;
		  /* 821342E8h */ case   28:  		/* addi R29, R29, 1 */
		/* 821342E8h case   28:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821342E8h case   28:*/		return 0x821342EC;
		  /* 821342ECh */ case   29:  		/* addi R30, R30, 4 */
		/* 821342ECh case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821342ECh case   29:*/		return 0x821342F0;
		  /* 821342F0h */ case   30:  		/* cmplw CR6, R29, R11 */
		/* 821342F0h case   30:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821342F0h case   30:*/		return 0x821342F4;
		  /* 821342F4h */ case   31:  		/* bc 12, CR6_LT, -88 */
		/* 821342F4h case   31:*/		if ( regs.CR[6].lt ) { return 0x8213429C;  }
		/* 821342F4h case   31:*/		return 0x821342F8;
	}
	return 0x821342F8;
} // Block from 82134278h-821342F8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821342F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821342F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821342F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821342F8);
		  /* 821342F8h */ case    0:  		/* lwz R11, <#[R31 + 704]> */
		/* 821342F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C0) );
		/* 821342F8h case    0:*/		return 0x821342FC;
		  /* 821342FCh */ case    1:  		/* li R10, 0 */
		/* 821342FCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821342FCh case    1:*/		return 0x82134300;
		  /* 82134300h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82134300h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134300h case    2:*/		return 0x82134304;
		  /* 82134304h */ case    3:  		/* bc 4, CR6_GT, 52 */
		/* 82134304h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82134338;  }
		/* 82134304h case    3:*/		return 0x82134308;
		  /* 82134308h */ case    4:  		/* li R11, 0 */
		/* 82134308h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82134308h case    4:*/		return 0x8213430C;
		  /* 8213430Ch */ case    5:  		/* lwz R9, <#[R31 + 700]> */
		/* 8213430Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213430Ch case    5:*/		return 0x82134310;
		  /* 82134310h */ case    6:  		/* addi R10, R10, 1 */
		/* 82134310h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82134310h case    6:*/		return 0x82134314;
		  /* 82134314h */ case    7:  		/* lwz R8, <#[R31 + 20]> */
		/* 82134314h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82134314h case    7:*/		return 0x82134318;
		  /* 82134318h */ case    8:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82134318h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82134318h case    8:*/		return 0x8213431C;
		  /* 8213431Ch */ case    9:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8213431Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213431Ch case    9:*/		return 0x82134320;
		  /* 82134320h */ case   10:  		/* addi R11, R11, 4 */
		/* 82134320h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82134320h case   10:*/		return 0x82134324;
		  /* 82134324h */ case   11:  		/* lwz R9, <#[R9 + 56]> */
		/* 82134324h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000038) );
		/* 82134324h case   11:*/		return 0x82134328;
		  /* 82134328h */ case   12:  		/* stw R9, <#[R8 + 56]> */
		/* 82134328h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000038) );
		/* 82134328h case   12:*/		return 0x8213432C;
		  /* 8213432Ch */ case   13:  		/* lwz R9, <#[R31 + 704]> */
		/* 8213432Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002C0) );
		/* 8213432Ch case   13:*/		return 0x82134330;
		  /* 82134330h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 82134330h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82134330h case   14:*/		return 0x82134334;
		  /* 82134334h */ case   15:  		/* bc 12, CR6_LT, -40 */
		/* 82134334h case   15:*/		if ( regs.CR[6].lt ) { return 0x8213430C;  }
		/* 82134334h case   15:*/		return 0x82134338;
	}
	return 0x82134338;
} // Block from 821342F8h-82134338h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82134338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134338);
		  /* 82134338h */ case    0:  		/* li R3, 0 */
		/* 82134338h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82134338h case    0:*/		return 0x8213433C;
		  /* 8213433Ch */ case    1:  		/* addi R1, R1, 112 */
		/* 8213433Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8213433Ch case    1:*/		return 0x82134340;
		  /* 82134340h */ case    2:  		/* b -667796 */
		/* 82134340h case    2:*/		return 0x820912AC;
		/* 82134340h case    2:*/		return 0x82134344;
		  /* 82134344h */ case    3:  		/* nop */
		/* 82134344h case    3:*/		cpu::op::nop();
		/* 82134344h case    3:*/		return 0x82134348;
	}
	return 0x82134348;
} // Block from 82134338h-82134348h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134348);
		  /* 82134348h */ case    0:  		/* mfspr R12, LR */
		/* 82134348h case    0:*/		regs.R12 = regs.LR;
		/* 82134348h case    0:*/		return 0x8213434C;
		  /* 8213434Ch */ case    1:  		/* bl -667932 */
		/* 8213434Ch case    1:*/		regs.LR = 0x82134350; return 0x82091230;
		/* 8213434Ch case    1:*/		return 0x82134350;
		  /* 82134350h */ case    2:  		/* stfd FR31, <#[R1 - 128]> */
		/* 82134350h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 82134350h case    2:*/		return 0x82134354;
		  /* 82134354h */ case    3:  		/* stwu R1, <#[R1 - 240]> */
		/* 82134354h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 82134354h case    3:*/		return 0x82134358;
		  /* 82134358h */ case    4:  		/* addi R11, R1, 80 */
		/* 82134358h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82134358h case    4:*/		return 0x8213435C;
		  /* 8213435Ch */ case    5:  		/* lwz R23, <#[R3 + 12]> */
		/* 8213435Ch case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R3 + 0x0000000C) );
		/* 8213435Ch case    5:*/		return 0x82134360;
	}
	return 0x82134360;
} // Block from 82134348h-82134360h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82134360h
// Function '?TexturePullOut@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@PAI0I0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134360);
		  /* 82134360h */ case    0:  		/* li R19, 0 */
		/* 82134360h case    0:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82134360h case    0:*/		return 0x82134364;
		  /* 82134364h */ case    1:  		/* mr R26, R3 */
		/* 82134364h case    1:*/		regs.R26 = regs.R3;
		/* 82134364h case    1:*/		return 0x82134368;
		  /* 82134368h */ case    2:  		/* lis R18, 4352 */
		/* 82134368h case    2:*/		cpu::op::lis<0>(regs,&regs.R18,0x1100);
		/* 82134368h case    2:*/		return 0x8213436C;
		  /* 8213436Ch */ case    3:  		/* cmplwi CR6, R23, 0 */
		/* 8213436Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213436Ch case    3:*/		return 0x82134370;
		  /* 82134370h */ case    4:  		/* std R19, <#[R11]> */
		/* 82134370h case    4:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 82134370h case    4:*/		return 0x82134374;
		  /* 82134374h */ case    5:  		/* std R19, <#[R11 + 8]> */
		/* 82134374h case    5:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000008) );
		/* 82134374h case    5:*/		return 0x82134378;
		  /* 82134378h */ case    6:  		/* std R19, <#[R11 + 16]> */
		/* 82134378h case    6:*/		cpu::mem::store64( regs, regs.R19, (uint32)(regs.R11 + 0x00000010) );
		/* 82134378h case    6:*/		return 0x8213437C;
		  /* 8213437Ch */ case    7:  		/* bc 12, CR6_EQ, 252 */
		/* 8213437Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82134478;  }
		/* 8213437Ch case    7:*/		return 0x82134380;
		  /* 82134380h */ case    8:  		/* lwz R29, <#[R3 + 24]> */
		/* 82134380h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000018) );
		/* 82134380h case    8:*/		return 0x82134384;
		  /* 82134384h */ case    9:  		/* mr R27, R23 */
		/* 82134384h case    9:*/		regs.R27 = regs.R23;
		/* 82134384h case    9:*/		return 0x82134388;
		  /* 82134388h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 82134388h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82134388h case   10:*/		return 0x8213438C;
		  /* 8213438Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8213438Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213438Ch case   11:*/		return 0x82134390;
		  /* 82134390h */ case   12:  		/* bc 12, CR6_EQ, 220 */
		/* 82134390h case   12:*/		if ( regs.CR[6].eq ) { return 0x8213446C;  }
		/* 82134390h case   12:*/		return 0x82134394;
		  /* 82134394h */ case   13:  		/* lwz R28, <#[R11]> */
		/* 82134394h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82134394h case   13:*/		return 0x82134398;
		  /* 82134398h */ case   14:  		/* cmplwi CR6, R28, 0 */
		/* 82134398h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82134398h case   14:*/		return 0x8213439C;
		  /* 8213439Ch */ case   15:  		/* bc 12, CR6_EQ, 208 */
		/* 8213439Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8213446C;  }
		/* 8213439Ch case   15:*/		return 0x821343A0;
		  /* 821343A0h */ case   16:  		/* lwz R30, <#[R11 + 4]> */
		/* 821343A0h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821343A0h case   16:*/		return 0x821343A4;
		  /* 821343A4h */ case   17:  		/* mr R31, R19 */
		/* 821343A4h case   17:*/		regs.R31 = regs.R19;
		/* 821343A4h case   17:*/		return 0x821343A8;
		  /* 821343A8h */ case   18:  		/* cmplwi CR6, R30, 0 */
		/* 821343A8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821343A8h case   18:*/		return 0x821343AC;
		  /* 821343ACh */ case   19:  		/* bc 12, CR6_EQ, 192 */
		/* 821343ACh case   19:*/		if ( regs.CR[6].eq ) { return 0x8213446C;  }
		/* 821343ACh case   19:*/		return 0x821343B0;
		  /* 821343B0h */ case   20:  		/* lwz R6, <#[R11 + 8]> */
		/* 821343B0h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821343B0h case   20:*/		return 0x821343B4;
		  /* 821343B4h */ case   21:  		/* mr R7, R19 */
		/* 821343B4h case   21:*/		regs.R7 = regs.R19;
		/* 821343B4h case   21:*/		return 0x821343B8;
		  /* 821343B8h */ case   22:  		/* lwz R5, <#[R26 + 20]> */
		/* 821343B8h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x00000014) );
		/* 821343B8h case   22:*/		return 0x821343BC;
		  /* 821343BCh */ case   23:  		/* lwz R4, <#[R26 + 128]> */
		/* 821343BCh case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000080) );
		/* 821343BCh case   23:*/		return 0x821343C0;
		  /* 821343C0h */ case   24:  		/* lwzx R11, <#[R6 + R7]> */
		/* 821343C0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 821343C0h case   24:*/		return 0x821343C4;
		  /* 821343C4h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821343C4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821343C4h case   25:*/		return 0x821343C8;
		  /* 821343C8h */ case   26:  		/* lwzx R10, <#[R11 + R5]> */
		/* 821343C8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 821343C8h case   26:*/		return 0x821343CC;
		  /* 821343CCh */ case   27:  		/* lwz R11, <#[R10 + 4]> */
		/* 821343CCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821343CCh case   27:*/		return 0x821343D0;
		  /* 821343D0h */ case   28:  		/* cmplw CR6, R11, R4 */
		/* 821343D0h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821343D0h case   28:*/		return 0x821343D4;
		  /* 821343D4h */ case   29:  		/* bc 4, CR6_EQ, 136 */
		/* 821343D4h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8213445C;  }
		/* 821343D4h case   29:*/		return 0x821343D8;
		  /* 821343D8h */ case   30:  		/* lbz R9, <#[R10 + 110]> */
		/* 821343D8h case   30:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000006E) );
		/* 821343D8h case   30:*/		return 0x821343DC;
		  /* 821343DCh */ case   31:  		/* cmplwi CR6, R9, 5 */
		/* 821343DCh case   31:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 821343DCh case   31:*/		return 0x821343E0;
		  /* 821343E0h */ case   32:  		/* bc 12, CR6_GT, 140 */
		/* 821343E0h case   32:*/		if ( regs.CR[6].gt ) { return 0x8213446C;  }
		/* 821343E0h case   32:*/		return 0x821343E4;
		  /* 821343E4h */ case   33:  		/* lbz R11, <#[R10 + 111]> */
		/* 821343E4h case   33:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000006F) );
		/* 821343E4h case   33:*/		return 0x821343E8;
		  /* 821343E8h */ case   34:  		/* cmplwi CR6, R11, 3 */
		/* 821343E8h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821343E8h case   34:*/		return 0x821343EC;
		  /* 821343ECh */ case   35:  		/* bc 4, CR6_EQ, 112 */
		/* 821343ECh case   35:*/		if ( !regs.CR[6].eq ) { return 0x8213445C;  }
		/* 821343ECh case   35:*/		return 0x821343F0;
		  /* 821343F0h */ case   36:  		/* rlwinm R8, R28, 0, 0, 11 */
		/* 821343F0h case   36:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R8,regs.R28);
		/* 821343F0h case   36:*/		return 0x821343F4;
		  /* 821343F4h */ case   37:  		/* mr R3, R8 */
		/* 821343F4h case   37:*/		regs.R3 = regs.R8;
		/* 821343F4h case   37:*/		return 0x821343F8;
		  /* 821343F8h */ case   38:  		/* bl -19608 */
		/* 821343F8h case   38:*/		regs.LR = 0x821343FC; return 0x8212F760;
		/* 821343F8h case   38:*/		return 0x821343FC;
		  /* 821343FCh */ case   39:  		/* cmpwi CR0, R3, 0 */
		/* 821343FCh case   39:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821343FCh case   39:*/		return 0x82134400;
		  /* 82134400h */ case   40:  		/* bc 4, CR0_EQ, 48 */
		/* 82134400h case   40:*/		if ( !regs.CR[0].eq ) { return 0x82134430;  }
		/* 82134400h case   40:*/		return 0x82134404;
		  /* 82134404h */ case   41:  		/* cmplw CR6, R8, R18 */
		/* 82134404h case   41:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R18);
		/* 82134404h case   41:*/		return 0x82134408;
		  /* 82134408h */ case   42:  		/* bc 12, CR6_EQ, 40 */
		/* 82134408h case   42:*/		if ( regs.CR[6].eq ) { return 0x82134430;  }
		/* 82134408h case   42:*/		return 0x8213440C;
		  /* 8213440Ch */ case   43:  		/* lwz R11, <#[R10 + 16]> */
		/* 8213440Ch case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8213440Ch case   43:*/		return 0x82134410;
		  /* 82134410h */ case   44:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82134410h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82134410h case   44:*/		return 0x82134414;
		  /* 82134414h */ case   45:  		/* addi R10, R1, 80 */
		/* 82134414h case   45:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82134414h case   45:*/		return 0x82134418;
		  /* 82134418h */ case   46:  		/* addi R11, R11, 1 */
		/* 82134418h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82134418h case   46:*/		return 0x8213441C;
		  /* 8213441Ch */ case   47:  		/* lwzx R8, <#[R9 + R10]> */
		/* 8213441Ch case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213441Ch case   47:*/		return 0x82134420;
		  /* 82134420h */ case   48:  		/* cmplw CR6, R11, R8 */
		/* 82134420h case   48:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82134420h case   48:*/		return 0x82134424;
		  /* 82134424h */ case   49:  		/* bc 4, CR6_GT, 56 */
		/* 82134424h case   49:*/		if ( !regs.CR[6].gt ) { return 0x8213445C;  }
		/* 82134424h case   49:*/		return 0x82134428;
		  /* 82134428h */ case   50:  		/* stwx R11, <#[R9 + R10]> */
		/* 82134428h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82134428h case   50:*/		return 0x8213442C;
		  /* 8213442Ch */ case   51:  		/* b 48 */
		/* 8213442Ch case   51:*/		return 0x8213445C;
		/* 8213442Ch case   51:*/		return 0x82134430;
	}
	return 0x82134430;
} // Block from 82134360h-82134430h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82134430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134430);
		  /* 82134430h */ case    0:  		/* rlwinm R8, R9, 2, 0, 29 */
		/* 82134430h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 82134430h case    0:*/		return 0x82134434;
		  /* 82134434h */ case    1:  		/* lwz R11, <#[R10 + 16]> */
		/* 82134434h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82134434h case    1:*/		return 0x82134438;
		  /* 82134438h */ case    2:  		/* addi R9, R1, 80 */
		/* 82134438h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82134438h case    2:*/		return 0x8213443C;
		  /* 8213443Ch */ case    3:  		/* addi R11, R11, 1 */
		/* 8213443Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213443Ch case    3:*/		return 0x82134440;
		  /* 82134440h */ case    4:  		/* lwzx R3, <#[R8 + R9]> */
		/* 82134440h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82134440h case    4:*/		return 0x82134444;
		  /* 82134444h */ case    5:  		/* cmplw CR6, R11, R3 */
		/* 82134444h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 82134444h case    5:*/		return 0x82134448;
		  /* 82134448h */ case    6:  		/* bc 4, CR6_GT, 20 */
		/* 82134448h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8213445C;  }
		/* 82134448h case    6:*/		return 0x8213444C;
		  /* 8213444Ch */ case    7:  		/* lwz R10, <#[R10 + 60]> */
		/* 8213444Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 8213444Ch case    7:*/		return 0x82134450;
		  /* 82134450h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82134450h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82134450h case    8:*/		return 0x82134454;
		  /* 82134454h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 82134454h case    9:*/		if ( regs.CR[6].eq ) { return 0x8213445C;  }
		/* 82134454h case    9:*/		return 0x82134458;
		  /* 82134458h */ case   10:  		/* stwx R11, <#[R8 + R9]> */
		/* 82134458h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82134458h case   10:*/		return 0x8213445C;
	}
	return 0x8213445C;
} // Block from 82134430h-8213445Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213445Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213445C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213445C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213445C);
		  /* 8213445Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 8213445Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8213445Ch case    0:*/		return 0x82134460;
		  /* 82134460h */ case    1:  		/* addi R7, R7, 4 */
		/* 82134460h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82134460h case    1:*/		return 0x82134464;
		  /* 82134464h */ case    2:  		/* cmplw CR6, R31, R30 */
		/* 82134464h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82134464h case    2:*/		return 0x82134468;
		  /* 82134468h */ case    3:  		/* bc 12, CR6_LT, -168 */
		/* 82134468h case    3:*/		if ( regs.CR[6].lt ) { return 0x821343C0;  }
		/* 82134468h case    3:*/		return 0x8213446C;
	}
	return 0x8213446C;
} // Block from 8213445Ch-8213446Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213446Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213446C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213446C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213446C);
		  /* 8213446Ch */ case    0:  		/* addic. R27, R27, -1 */
		/* 8213446Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 8213446Ch case    0:*/		return 0x82134470;
		  /* 82134470h */ case    1:  		/* addi R29, R29, 4 */
		/* 82134470h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82134470h case    1:*/		return 0x82134474;
		  /* 82134474h */ case    2:  		/* bc 4, CR0_EQ, -236 */
		/* 82134474h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82134388;  }
		/* 82134474h case    2:*/		return 0x82134478;
	}
	return 0x82134478;
} // Block from 8213446Ch-82134478h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82134478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134478);
		  /* 82134478h */ case    0:  		/* lis R11, -32256 */
		/* 82134478h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82134478h case    0:*/		return 0x8213447C;
		  /* 8213447Ch */ case    1:  		/* mr R27, R19 */
		/* 8213447Ch case    1:*/		regs.R27 = regs.R19;
		/* 8213447Ch case    1:*/		return 0x82134480;
		  /* 82134480h */ case    2:  		/* addi R25, R1, 80 */
		/* 82134480h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0x50);
		/* 82134480h case    2:*/		return 0x82134484;
		  /* 82134484h */ case    3:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82134484h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82134484h case    3:*/		return 0x82134488;
		  /* 82134488h */ case    4:  		/* lwz R28, <#[R25]> */
		/* 82134488h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x00000000) );
		/* 82134488h case    4:*/		return 0x8213448C;
		  /* 8213448Ch */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 8213448Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8213448Ch case    5:*/		return 0x82134490;
		  /* 82134490h */ case    6:  		/* bc 12, CR6_EQ, 332 */
		/* 82134490h case    6:*/		if ( regs.CR[6].eq ) { return 0x821345DC;  }
		/* 82134490h case    6:*/		return 0x82134494;
		  /* 82134494h */ case    7:  		/* li R3, 116 */
		/* 82134494h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82134494h case    7:*/		return 0x82134498;
		  /* 82134498h */ case    8:  		/* bl -229120 */
		/* 82134498h case    8:*/		regs.LR = 0x8213449C; return 0x820FC598;
		/* 82134498h case    8:*/		return 0x8213449C;
		  /* 8213449Ch */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8213449Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213449Ch case    9:*/		return 0x821344A0;
		  /* 821344A0h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821344A0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821344B0;  }
		/* 821344A0h case   10:*/		return 0x821344A4;
		  /* 821344A4h */ case   11:  		/* bl -230916 */
		/* 821344A4h case   11:*/		regs.LR = 0x821344A8; return 0x820FBEA0;
		/* 821344A4h case   11:*/		return 0x821344A8;
		  /* 821344A8h */ case   12:  		/* mr R30, R3 */
		/* 821344A8h case   12:*/		regs.R30 = regs.R3;
		/* 821344A8h case   12:*/		return 0x821344AC;
		  /* 821344ACh */ case   13:  		/* b 8 */
		/* 821344ACh case   13:*/		return 0x821344B4;
		/* 821344ACh case   13:*/		return 0x821344B0;
	}
	return 0x821344B0;
} // Block from 82134478h-821344B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821344B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821344B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821344B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821344B0);
		  /* 821344B0h */ case    0:  		/* mr R30, R19 */
		/* 821344B0h case    0:*/		regs.R30 = regs.R19;
		/* 821344B0h case    0:*/		return 0x821344B4;
	}
	return 0x821344B4;
} // Block from 821344B0h-821344B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821344B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821344B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821344B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821344B4);
		  /* 821344B4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821344B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821344B4h case    0:*/		return 0x821344B8;
		  /* 821344B8h */ case    1:  		/* bc 12, CR6_EQ, 420 */
		/* 821344B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213465C;  }
		/* 821344B8h case    1:*/		return 0x821344BC;
		  /* 821344BCh */ case    2:  		/* li R11, 1825 */
		/* 821344BCh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x721);
		/* 821344BCh case    2:*/		return 0x821344C0;
		  /* 821344C0h */ case    3:  		/* mr R4, R28 */
		/* 821344C0h case    3:*/		regs.R4 = regs.R28;
		/* 821344C0h case    3:*/		return 0x821344C4;
		  /* 821344C4h */ case    4:  		/* li R7, 0 */
		/* 821344C4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821344C4h case    4:*/		return 0x821344C8;
		  /* 821344C8h */ case    5:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 821344C8h case    5:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 821344C8h case    5:*/		return 0x821344CC;
		  /* 821344CCh */ case    6:  		/* mr R6, R28 */
		/* 821344CCh case    6:*/		regs.R6 = regs.R28;
		/* 821344CCh case    6:*/		return 0x821344D0;
		  /* 821344D0h */ case    7:  		/* mr R5, R28 */
		/* 821344D0h case    7:*/		regs.R5 = regs.R28;
		/* 821344D0h case    7:*/		return 0x821344D4;
		  /* 821344D4h */ case    8:  		/* mr R3, R30 */
		/* 821344D4h case    8:*/		regs.R3 = regs.R30;
		/* 821344D4h case    8:*/		return 0x821344D8;
		  /* 821344D8h */ case    9:  		/* bl -229032 */
		/* 821344D8h case    9:*/		regs.LR = 0x821344DC; return 0x820FC630;
		/* 821344D8h case    9:*/		return 0x821344DC;
		  /* 821344DCh */ case   10:  		/* or. R31, R3, R3 */
		/* 821344DCh case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821344DCh case   10:*/		return 0x821344E0;
		  /* 821344E0h */ case   11:  		/* bc 12, CR0_LT, 1220 */
		/* 821344E0h case   11:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 821344E0h case   11:*/		return 0x821344E4;
		  /* 821344E4h */ case   12:  		/* mr R29, R19 */
		/* 821344E4h case   12:*/		regs.R29 = regs.R19;
		/* 821344E4h case   12:*/		return 0x821344E8;
		  /* 821344E8h */ case   13:  		/* cmplwi CR6, R28, 0 */
		/* 821344E8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821344E8h case   13:*/		return 0x821344EC;
		  /* 821344ECh */ case   14:  		/* bc 12, CR6_EQ, 76 */
		/* 821344ECh case   14:*/		if ( regs.CR[6].eq ) { return 0x82134538;  }
		/* 821344ECh case   14:*/		return 0x821344F0;
		  /* 821344F0h */ case   15:  		/* mr R31, R19 */
		/* 821344F0h case   15:*/		regs.R31 = regs.R19;
		/* 821344F0h case   15:*/		return 0x821344F4;
		  /* 821344F4h */ case   16:  		/* mr R6, R29 */
		/* 821344F4h case   16:*/		regs.R6 = regs.R29;
		/* 821344F4h case   16:*/		return 0x821344F8;
		  /* 821344F8h */ case   17:  		/* lwz R4, <#[R26 + 136]> */
		/* 821344F8h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000088) );
		/* 821344F8h case   17:*/		return 0x821344FC;
		  /* 821344FCh */ case   18:  		/* li R5, 0 */
		/* 821344FCh case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821344FCh case   18:*/		return 0x82134500;
		  /* 82134500h */ case   19:  		/* fmr FR1, FR31 */
		/* 82134500h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82134500h case   19:*/		return 0x82134504;
		  /* 82134504h */ case   20:  		/* mr R3, R26 */
		/* 82134504h case   20:*/		regs.R3 = regs.R26;
		/* 82134504h case   20:*/		return 0x82134508;
		  /* 82134508h */ case   21:  		/* bl -226016 */
		/* 82134508h case   21:*/		regs.LR = 0x8213450C; return 0x820FD228;
		/* 82134508h case   21:*/		return 0x8213450C;
		  /* 8213450Ch */ case   22:  		/* lwz R11, <#[R30 + 16]> */
		/* 8213450Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8213450Ch case   22:*/		return 0x82134510;
		  /* 82134510h */ case   23:  		/* stwx R3, <#[R11 + R31]> */
		/* 82134510h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82134510h case   23:*/		return 0x82134514;
		  /* 82134514h */ case   24:  		/* lwz R11, <#[R30 + 16]> */
		/* 82134514h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82134514h case   24:*/		return 0x82134518;
		  /* 82134518h */ case   25:  		/* lwzx R11, <#[R11 + R31]> */
		/* 82134518h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82134518h case   25:*/		return 0x8213451C;
		  /* 8213451Ch */ case   26:  		/* cmpwi CR6, R11, -1 */
		/* 8213451Ch case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213451Ch case   26:*/		return 0x82134520;
		  /* 82134520h */ case   27:  		/* bc 12, CR6_EQ, 300 */
		/* 82134520h case   27:*/		if ( regs.CR[6].eq ) { return 0x8213464C;  }
		/* 82134520h case   27:*/		return 0x82134524;
		  /* 82134524h */ case   28:  		/* lwz R11, <#[R25]> */
		/* 82134524h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82134524h case   28:*/		return 0x82134528;
		  /* 82134528h */ case   29:  		/* addi R29, R29, 1 */
		/* 82134528h case   29:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82134528h case   29:*/		return 0x8213452C;
		  /* 8213452Ch */ case   30:  		/* addi R31, R31, 4 */
		/* 8213452Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8213452Ch case   30:*/		return 0x82134530;
		  /* 82134530h */ case   31:  		/* cmplw CR6, R29, R11 */
		/* 82134530h case   31:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82134530h case   31:*/		return 0x82134534;
		  /* 82134534h */ case   32:  		/* bc 12, CR6_LT, -64 */
		/* 82134534h case   32:*/		if ( regs.CR[6].lt ) { return 0x821344F4;  }
		/* 82134534h case   32:*/		return 0x82134538;
	}
	return 0x82134538;
} // Block from 821344B4h-82134538h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82134538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134538);
		  /* 82134538h */ case    0:  		/* mr R8, R28 */
		/* 82134538h case    0:*/		regs.R8 = regs.R28;
		/* 82134538h case    0:*/		return 0x8213453C;
		  /* 8213453Ch */ case    1:  		/* lwz R9, <#[R30 + 16]> */
		/* 8213453Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 8213453Ch case    1:*/		return 0x82134540;
		  /* 82134540h */ case    2:  		/* mr R7, R27 */
		/* 82134540h case    2:*/		regs.R7 = regs.R27;
		/* 82134540h case    2:*/		return 0x82134544;
		  /* 82134544h */ case    3:  		/* lwz R5, <#[R26 + 12]> */
		/* 82134544h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82134544h case    3:*/		return 0x82134548;
		  /* 82134548h */ case    4:  		/* li R6, 3 */
		/* 82134548h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82134548h case    4:*/		return 0x8213454C;
		  /* 8213454Ch */ case    5:  		/* lwz R4, <#[R26 + 24]> */
		/* 8213454Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000018) );
		/* 8213454Ch case    5:*/		return 0x82134550;
		  /* 82134550h */ case    6:  		/* mr R3, R26 */
		/* 82134550h case    6:*/		regs.R3 = regs.R26;
		/* 82134550h case    6:*/		return 0x82134554;
		  /* 82134554h */ case    7:  		/* bl -4948 */
		/* 82134554h case    7:*/		regs.LR = 0x82134558; return 0x82133200;
		/* 82134554h case    7:*/		return 0x82134558;
		  /* 82134558h */ case    8:  		/* or. R31, R3, R3 */
		/* 82134558h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82134558h case    8:*/		return 0x8213455C;
		  /* 8213455Ch */ case    9:  		/* bc 12, CR0_LT, 268 */
		/* 8213455Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x82134668;  }
		/* 8213455Ch case    9:*/		return 0x82134560;
		  /* 82134560h */ case   10:  		/* mr R31, R19 */
		/* 82134560h case   10:*/		regs.R31 = regs.R19;
		/* 82134560h case   10:*/		return 0x82134564;
		  /* 82134564h */ case   11:  		/* cmplwi CR6, R28, 0 */
		/* 82134564h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82134564h case   11:*/		return 0x82134568;
		  /* 82134568h */ case   12:  		/* bc 12, CR6_EQ, 96 */
		/* 82134568h case   12:*/		if ( regs.CR[6].eq ) { return 0x821345C8;  }
		/* 82134568h case   12:*/		return 0x8213456C;
		  /* 8213456Ch */ case   13:  		/* mr R29, R19 */
		/* 8213456Ch case   13:*/		regs.R29 = regs.R19;
		/* 8213456Ch case   13:*/		return 0x82134570;
		  /* 82134570h */ case   14:  		/* mr R6, R31 */
		/* 82134570h case   14:*/		regs.R6 = regs.R31;
		/* 82134570h case   14:*/		return 0x82134574;
		  /* 82134574h */ case   15:  		/* lwz R4, <#[R26 + 128]> */
		/* 82134574h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000080) );
		/* 82134574h case   15:*/		return 0x82134578;
		  /* 82134578h */ case   16:  		/* mr R5, R27 */
		/* 82134578h case   16:*/		regs.R5 = regs.R27;
		/* 82134578h case   16:*/		return 0x8213457C;
		  /* 8213457Ch */ case   17:  		/* fmr FR1, FR31 */
		/* 8213457Ch case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213457Ch case   17:*/		return 0x82134580;
		  /* 82134580h */ case   18:  		/* mr R3, R26 */
		/* 82134580h case   18:*/		regs.R3 = regs.R26;
		/* 82134580h case   18:*/		return 0x82134584;
		  /* 82134584h */ case   19:  		/* bl -226140 */
		/* 82134584h case   19:*/		regs.LR = 0x82134588; return 0x820FD228;
		/* 82134584h case   19:*/		return 0x82134588;
		  /* 82134588h */ case   20:  		/* cmpwi CR6, R3, -1 */
		/* 82134588h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82134588h case   20:*/		return 0x8213458C;
		  /* 8213458Ch */ case   21:  		/* bc 12, CR6_EQ, 240 */
		/* 8213458Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x8213467C;  }
		/* 8213458Ch case   21:*/		return 0x82134590;
		  /* 82134590h */ case   22:  		/* lwz R11, <#[R26 + 20]> */
		/* 82134590h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 82134590h case   22:*/		return 0x82134594;
		  /* 82134594h */ case   23:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82134594h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82134594h case   23:*/		return 0x82134598;
		  /* 82134598h */ case   24:  		/* li R9, 3 */
		/* 82134598h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82134598h case   24:*/		return 0x8213459C;
		  /* 8213459Ch */ case   25:  		/* lwz R8, <#[R25]> */
		/* 8213459Ch case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000000) );
		/* 8213459Ch case   25:*/		return 0x821345A0;
		  /* 821345A0h */ case   26:  		/* addi R31, R31, 1 */
		/* 821345A0h case   26:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821345A0h case   26:*/		return 0x821345A4;
		  /* 821345A4h */ case   27:  		/* rlwimi R9, R27, 8, 0, 23 */
		/* 821345A4h case   27:*/		cpu::op::rlwimi<0,8,0,23>(regs,&regs.R9,regs.R27);
		/* 821345A4h case   27:*/		return 0x821345A8;
		  /* 821345A8h */ case   28:  		/* cmplw CR6, R31, R8 */
		/* 821345A8h case   28:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R8);
		/* 821345A8h case   28:*/		return 0x821345AC;
		  /* 821345ACh */ case   29:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821345ACh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821345ACh case   29:*/		return 0x821345B0;
		  /* 821345B0h */ case   30:  		/* stw R9, <#[R11 + 108]> */
		/* 821345B0h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 821345B0h case   30:*/		return 0x821345B4;
		  /* 821345B4h */ case   31:  		/* stw R19, <#[R11 + 60]> */
		/* 821345B4h case   31:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x0000003C) );
		/* 821345B4h case   31:*/		return 0x821345B8;
		  /* 821345B8h */ case   32:  		/* lwz R11, <#[R30 + 8]> */
		/* 821345B8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821345B8h case   32:*/		return 0x821345BC;
		  /* 821345BCh */ case   33:  		/* stwx R3, <#[R11 + R29]> */
		/* 821345BCh case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821345BCh case   33:*/		return 0x821345C0;
		  /* 821345C0h */ case   34:  		/* addi R29, R29, 4 */
		/* 821345C0h case   34:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821345C0h case   34:*/		return 0x821345C4;
		  /* 821345C4h */ case   35:  		/* bc 12, CR6_LT, -84 */
		/* 821345C4h case   35:*/		if ( regs.CR[6].lt ) { return 0x82134570;  }
		/* 821345C4h case   35:*/		return 0x821345C8;
	}
	return 0x821345C8;
} // Block from 82134538h-821345C8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821345C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821345C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821345C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821345C8);
		  /* 821345C8h */ case    0:  		/* mr R4, R30 */
		/* 821345C8h case    0:*/		regs.R4 = regs.R30;
		/* 821345C8h case    0:*/		return 0x821345CC;
		  /* 821345CCh */ case    1:  		/* mr R3, R26 */
		/* 821345CCh case    1:*/		regs.R3 = regs.R26;
		/* 821345CCh case    1:*/		return 0x821345D0;
		  /* 821345D0h */ case    2:  		/* bl -226584 */
		/* 821345D0h case    2:*/		regs.LR = 0x821345D4; return 0x820FD0B8;
		/* 821345D0h case    2:*/		return 0x821345D4;
		  /* 821345D4h */ case    3:  		/* or. R31, R3, R3 */
		/* 821345D4h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821345D4h case    3:*/		return 0x821345D8;
		  /* 821345D8h */ case    4:  		/* bc 12, CR0_LT, 972 */
		/* 821345D8h case    4:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 821345D8h case    4:*/		return 0x821345DC;
	}
	return 0x821345DC;
} // Block from 821345C8h-821345DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821345DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821345DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821345DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821345DC);
		  /* 821345DCh */ case    0:  		/* addi R27, R27, 1 */
		/* 821345DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821345DCh case    0:*/		return 0x821345E0;
		  /* 821345E0h */ case    1:  		/* addi R25, R25, 4 */
		/* 821345E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821345E0h case    1:*/		return 0x821345E4;
		  /* 821345E4h */ case    2:  		/* cmplwi CR6, R27, 6 */
		/* 821345E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000006);
		/* 821345E4h case    2:*/		return 0x821345E8;
		  /* 821345E8h */ case    3:  		/* bc 12, CR6_LT, -352 */
		/* 821345E8h case    3:*/		if ( regs.CR[6].lt ) { return 0x82134488;  }
		/* 821345E8h case    3:*/		return 0x821345EC;
		  /* 821345ECh */ case    4:  		/* mr R24, R19 */
		/* 821345ECh case    4:*/		regs.R24 = regs.R19;
		/* 821345ECh case    4:*/		return 0x821345F0;
		  /* 821345F0h */ case    5:  		/* li R20, 1 */
		/* 821345F0h case    5:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 821345F0h case    5:*/		return 0x821345F4;
		  /* 821345F4h */ case    6:  		/* cmplwi CR6, R23, 0 */
		/* 821345F4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821345F4h case    6:*/		return 0x821345F8;
		  /* 821345F8h */ case    7:  		/* bc 12, CR6_EQ, 448 */
		/* 821345F8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821347B8;  }
		/* 821345F8h case    7:*/		return 0x821345FC;
		  /* 821345FCh */ case    8:  		/* mr R25, R19 */
		/* 821345FCh case    8:*/		regs.R25 = regs.R19;
		/* 821345FCh case    8:*/		return 0x82134600;
		  /* 82134600h */ case    9:  		/* lwz R11, <#[R26 + 24]> */
		/* 82134600h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 82134600h case    9:*/		return 0x82134604;
		  /* 82134604h */ case   10:  		/* lwzx R27, <#[R25 + R11]> */
		/* 82134604h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 82134604h case   10:*/		return 0x82134608;
		  /* 82134608h */ case   11:  		/* lwz R11, <#[R27]> */
		/* 82134608h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82134608h case   11:*/		return 0x8213460C;
		  /* 8213460Ch */ case   12:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 8213460Ch case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213460Ch case   12:*/		return 0x82134610;
		  /* 82134610h */ case   13:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 82134610h case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 82134610h case   13:*/		return 0x82134614;
		  /* 82134614h */ case   14:  		/* mr R3, R10 */
		/* 82134614h case   14:*/		regs.R3 = regs.R10;
		/* 82134614h case   14:*/		return 0x82134618;
		  /* 82134618h */ case   15:  		/* bl -20152 */
		/* 82134618h case   15:*/		regs.LR = 0x8213461C; return 0x8212F760;
		/* 82134618h case   15:*/		return 0x8213461C;
		  /* 8213461Ch */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8213461Ch case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213461Ch case   16:*/		return 0x82134620;
		  /* 82134620h */ case   17:  		/* bc 4, CR0_EQ, 12 */
		/* 82134620h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8213462C;  }
		/* 82134620h case   17:*/		return 0x82134624;
		  /* 82134624h */ case   18:  		/* cmplw CR6, R10, R18 */
		/* 82134624h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 82134624h case   18:*/		return 0x82134628;
		  /* 82134628h */ case   19:  		/* bc 4, CR6_EQ, 384 */
		/* 82134628h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821347A8;  }
		/* 82134628h case   19:*/		return 0x8213462C;
	}
	return 0x8213462C;
} // Block from 821345DCh-8213462Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8213462Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213462C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213462C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213462C);
		  /* 8213462Ch */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 8213462Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8213462Ch case    0:*/		return 0x82134630;
		  /* 82134630h */ case    1:  		/* cmplw CR6, R10, R18 */
		/* 82134630h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 82134630h case    1:*/		return 0x82134634;
		  /* 82134634h */ case    2:  		/* bc 4, CR6_EQ, 100 */
		/* 82134634h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82134698;  }
		/* 82134634h case    2:*/		return 0x82134638;
		  /* 82134638h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 82134638h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82134638h case    3:*/		return 0x8213463C;
		  /* 8213463Ch */ case    4:  		/* lwz R10, <#[R26 + 20]> */
		/* 8213463Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000014) );
		/* 8213463Ch case    4:*/		return 0x82134640;
		  /* 82134640h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82134640h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82134640h case    5:*/		return 0x82134644;
		  /* 82134644h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82134644h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82134644h case    6:*/		return 0x82134648;
		  /* 82134648h */ case    7:  		/* b 100 */
		/* 82134648h case    7:*/		return 0x821346AC;
		/* 82134648h case    7:*/		return 0x8213464C;
	}
	return 0x8213464C;
} // Block from 8213462Ch-8213464Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213464Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213464C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213464C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213464C);
		  /* 8213464Ch */ case    0:  		/* mr R3, R30 */
		/* 8213464Ch case    0:*/		regs.R3 = regs.R30;
		/* 8213464Ch case    0:*/		return 0x82134650;
		  /* 82134650h */ case    1:  		/* bl 953712 */
		/* 82134650h case    1:*/		regs.LR = 0x82134654; return 0x8221D3C0;
		/* 82134650h case    1:*/		return 0x82134654;
		  /* 82134654h */ case    2:  		/* mr R3, R30 */
		/* 82134654h case    2:*/		regs.R3 = regs.R30;
		/* 82134654h case    2:*/		return 0x82134658;
		  /* 82134658h */ case    3:  		/* bl -229480 */
		/* 82134658h case    3:*/		regs.LR = 0x8213465C; return 0x820FC5F0;
		/* 82134658h case    3:*/		return 0x8213465C;
	}
	return 0x8213465C;
} // Block from 8213464Ch-8213465Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213465Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213465C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213465C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213465C);
		  /* 8213465Ch */ case    0:  		/* lis R31, -32761 */
		/* 8213465Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 8213465Ch case    0:*/		return 0x82134660;
		  /* 82134660h */ case    1:  		/* ori R31, R31, 14 */
		/* 82134660h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 82134660h case    1:*/		return 0x82134664;
		  /* 82134664h */ case    2:  		/* b 832 */
		/* 82134664h case    2:*/		return 0x821349A4;
		/* 82134664h case    2:*/		return 0x82134668;
	}
	return 0x82134668;
} // Block from 8213465Ch-82134668h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82134668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134668);
		  /* 82134668h */ case    0:  		/* mr R3, R30 */
		/* 82134668h case    0:*/		regs.R3 = regs.R30;
		/* 82134668h case    0:*/		return 0x8213466C;
		  /* 8213466Ch */ case    1:  		/* bl 953684 */
		/* 8213466Ch case    1:*/		regs.LR = 0x82134670; return 0x8221D3C0;
		/* 8213466Ch case    1:*/		return 0x82134670;
		  /* 82134670h */ case    2:  		/* mr R3, R30 */
		/* 82134670h case    2:*/		regs.R3 = regs.R30;
		/* 82134670h case    2:*/		return 0x82134674;
		  /* 82134674h */ case    3:  		/* bl -229508 */
		/* 82134674h case    3:*/		regs.LR = 0x82134678; return 0x820FC5F0;
		/* 82134674h case    3:*/		return 0x82134678;
		  /* 82134678h */ case    4:  		/* b 812 */
		/* 82134678h case    4:*/		return 0x821349A4;
		/* 82134678h case    4:*/		return 0x8213467C;
	}
	return 0x8213467C;
} // Block from 82134668h-8213467Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213467Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213467C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213467C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213467C);
		  /* 8213467Ch */ case    0:  		/* mr R3, R30 */
		/* 8213467Ch case    0:*/		regs.R3 = regs.R30;
		/* 8213467Ch case    0:*/		return 0x82134680;
		  /* 82134680h */ case    1:  		/* bl 953664 */
		/* 82134680h case    1:*/		regs.LR = 0x82134684; return 0x8221D3C0;
		/* 82134680h case    1:*/		return 0x82134684;
		  /* 82134684h */ case    2:  		/* mr R3, R30 */
		/* 82134684h case    2:*/		regs.R3 = regs.R30;
		/* 82134684h case    2:*/		return 0x82134688;
		  /* 82134688h */ case    3:  		/* bl -229528 */
		/* 82134688h case    3:*/		regs.LR = 0x8213468C; return 0x820FC5F0;
		/* 82134688h case    3:*/		return 0x8213468C;
		  /* 8213468Ch */ case    4:  		/* lis R3, -32761 */
		/* 8213468Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213468Ch case    4:*/		return 0x82134690;
		  /* 82134690h */ case    5:  		/* ori R3, R3, 14 */
		/* 82134690h case    5:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82134690h case    5:*/		return 0x82134694;
		  /* 82134694h */ case    6:  		/* b 788 */
		/* 82134694h case    6:*/		return 0x821349A8;
		/* 82134694h case    6:*/		return 0x82134698;
	}
	return 0x82134698;
} // Block from 8213467Ch-82134698h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82134698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134698);
		  /* 82134698h */ case    0:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 82134698h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 82134698h case    0:*/		return 0x8213469C;
		  /* 8213469Ch */ case    1:  		/* lwz R9, <#[R26 + 20]> */
		/* 8213469Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000014) );
		/* 8213469Ch case    1:*/		return 0x821346A0;
		  /* 821346A0h */ case    2:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821346A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821346A0h case    2:*/		return 0x821346A4;
		  /* 821346A4h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821346A4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821346A4h case    3:*/		return 0x821346A8;
		  /* 821346A8h */ case    4:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821346A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821346A8h case    4:*/		return 0x821346AC;
	}
	return 0x821346AC;
} // Block from 82134698h-821346ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821346ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821346AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821346AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821346AC);
		  /* 821346ACh */ case    0:  		/* lwz R10, <#[R11 + 60]> */
		/* 821346ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821346ACh case    0:*/		return 0x821346B0;
		  /* 821346B0h */ case    1:  		/* rlwinm. R10, R10, 0, 11, 15 */
		/* 821346B0h case    1:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R10,regs.R10);
		/* 821346B0h case    1:*/		return 0x821346B4;
		  /* 821346B4h */ case    2:  		/* bc 12, CR0_EQ, 244 */
		/* 821346B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821347A8;  }
		/* 821346B4h case    2:*/		return 0x821346B8;
		  /* 821346B8h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 821346B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821346B8h case    3:*/		return 0x821346BC;
		  /* 821346BCh */ case    4:  		/* lwz R10, <#[R26 + 136]> */
		/* 821346BCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000088) );
		/* 821346BCh case    4:*/		return 0x821346C0;
		  /* 821346C0h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821346C0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821346C0h case    5:*/		return 0x821346C4;
		  /* 821346C4h */ case    6:  		/* bc 4, CR6_EQ, 228 */
		/* 821346C4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821347A8;  }
		/* 821346C4h case    6:*/		return 0x821346C8;
		  /* 821346C8h */ case    7:  		/* li R3, 116 */
		/* 821346C8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 821346C8h case    7:*/		return 0x821346CC;
		  /* 821346CCh */ case    8:  		/* bl -229684 */
		/* 821346CCh case    8:*/		regs.LR = 0x821346D0; return 0x820FC598;
		/* 821346CCh case    8:*/		return 0x821346D0;
		  /* 821346D0h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821346D0h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821346D0h case    9:*/		return 0x821346D4;
		  /* 821346D4h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821346D4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821346E4;  }
		/* 821346D4h case   10:*/		return 0x821346D8;
		  /* 821346D8h */ case   11:  		/* bl -231480 */
		/* 821346D8h case   11:*/		regs.LR = 0x821346DC; return 0x820FBEA0;
		/* 821346D8h case   11:*/		return 0x821346DC;
		  /* 821346DCh */ case   12:  		/* mr R28, R3 */
		/* 821346DCh case   12:*/		regs.R28 = regs.R3;
		/* 821346DCh case   12:*/		return 0x821346E0;
		  /* 821346E0h */ case   13:  		/* b 8 */
		/* 821346E0h case   13:*/		return 0x821346E8;
		/* 821346E0h case   13:*/		return 0x821346E4;
	}
	return 0x821346E4;
} // Block from 821346ACh-821346E4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821346E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821346E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821346E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821346E4);
		  /* 821346E4h */ case    0:  		/* mr R28, R19 */
		/* 821346E4h case    0:*/		regs.R28 = regs.R19;
		/* 821346E4h case    0:*/		return 0x821346E8;
	}
	return 0x821346E8;
} // Block from 821346E4h-821346E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821346E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821346E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821346E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821346E8);
		  /* 821346E8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821346E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821346E8h case    0:*/		return 0x821346EC;
		  /* 821346ECh */ case    1:  		/* bc 12, CR6_EQ, -144 */
		/* 821346ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8213465C;  }
		/* 821346ECh case    1:*/		return 0x821346F0;
		  /* 821346F0h */ case    2:  		/* mr R4, R29 */
		/* 821346F0h case    2:*/		regs.R4 = regs.R29;
		/* 821346F0h case    2:*/		return 0x821346F4;
		  /* 821346F4h */ case    3:  		/* li R7, 0 */
		/* 821346F4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821346F4h case    3:*/		return 0x821346F8;
		  /* 821346F8h */ case    4:  		/* rlwimi R4, R20, 28, 0, 11 */
		/* 821346F8h case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R20);
		/* 821346F8h case    4:*/		return 0x821346FC;
		  /* 821346FCh */ case    5:  		/* mr R6, R29 */
		/* 821346FCh case    5:*/		regs.R6 = regs.R29;
		/* 821346FCh case    5:*/		return 0x82134700;
		  /* 82134700h */ case    6:  		/* mr R5, R29 */
		/* 82134700h case    6:*/		regs.R5 = regs.R29;
		/* 82134700h case    6:*/		return 0x82134704;
		  /* 82134704h */ case    7:  		/* mr R3, R28 */
		/* 82134704h case    7:*/		regs.R3 = regs.R28;
		/* 82134704h case    7:*/		return 0x82134708;
		  /* 82134708h */ case    8:  		/* bl -229592 */
		/* 82134708h case    8:*/		regs.LR = 0x8213470C; return 0x820FC630;
		/* 82134708h case    8:*/		return 0x8213470C;
		  /* 8213470Ch */ case    9:  		/* or. R31, R3, R3 */
		/* 8213470Ch case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8213470Ch case    9:*/		return 0x82134710;
		  /* 82134710h */ case   10:  		/* bc 12, CR0_LT, 660 */
		/* 82134710h case   10:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 82134710h case   10:*/		return 0x82134714;
		  /* 82134714h */ case   11:  		/* lwz R11, <#[R27]> */
		/* 82134714h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82134714h case   11:*/		return 0x82134718;
		  /* 82134718h */ case   12:  		/* cmplwi CR6, R29, 0 */
		/* 82134718h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82134718h case   12:*/		return 0x8213471C;
		  /* 8213471Ch */ case   13:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 8213471Ch case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213471Ch case   13:*/		return 0x82134720;
		  /* 82134720h */ case   14:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 82134720h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 82134720h case   14:*/		return 0x82134724;
		  /* 82134724h */ case   15:  		/* subf R10, R10, R18 */
		/* 82134724h case   15:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R18);
		/* 82134724h case   15:*/		return 0x82134728;
		  /* 82134728h */ case   16:  		/* subfic R10, R10, 0 */
		/* 82134728h case   16:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 82134728h case   16:*/		return 0x8213472C;
		  /* 8213472Ch */ case   17:  		/* subfe R10, R10, R10 */
		/* 8213472Ch case   17:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8213472Ch case   17:*/		return 0x82134730;
		  /* 82134730h */ case   18:  		/* and R11, R10, R11 */
		/* 82134730h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82134730h case   18:*/		return 0x82134734;
		  /* 82134734h */ case   19:  		/* bc 12, CR6_EQ, 96 */
		/* 82134734h case   19:*/		if ( regs.CR[6].eq ) { return 0x82134794;  }
		/* 82134734h case   19:*/		return 0x82134738;
		  /* 82134738h */ case   20:  		/* mr R31, R19 */
		/* 82134738h case   20:*/		regs.R31 = regs.R19;
		/* 82134738h case   20:*/		return 0x8213473C;
		  /* 8213473Ch */ case   21:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 8213473Ch case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 8213473Ch case   21:*/		return 0x82134740;
		  /* 82134740h */ case   22:  		/* lwz R11, <#[R27 + 8]> */
		/* 82134740h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82134740h case   22:*/		return 0x82134744;
		  /* 82134744h */ case   23:  		/* li R5, 0 */
		/* 82134744h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82134744h case   23:*/		return 0x82134748;
		  /* 82134748h */ case   24:  		/* lwz R10, <#[R26 + 20]> */
		/* 82134748h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000014) );
		/* 82134748h case   24:*/		return 0x8213474C;
		  /* 8213474Ch */ case   25:  		/* mr R3, R26 */
		/* 8213474Ch case   25:*/		regs.R3 = regs.R26;
		/* 8213474Ch case   25:*/		return 0x82134750;
		  /* 82134750h */ case   26:  		/* lwz R9, <#[R28 + 8]> */
		/* 82134750h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82134750h case   26:*/		return 0x82134754;
		  /* 82134754h */ case   27:  		/* fmr FR1, FR31 */
		/* 82134754h case   27:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82134754h case   27:*/		return 0x82134758;
		  /* 82134758h */ case   28:  		/* lwzx R11, <#[R30 + R11]> */
		/* 82134758h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82134758h case   28:*/		return 0x8213475C;
		  /* 8213475Ch */ case   29:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 8213475Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 8213475Ch case   29:*/		return 0x82134760;
		  /* 82134760h */ case   30:  		/* lwzx R10, <#[R8 + R10]> */
		/* 82134760h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82134760h case   30:*/		return 0x82134764;
		  /* 82134764h */ case   31:  		/* stwx R11, <#[R31 + R9]> */
		/* 82134764h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 82134764h case   31:*/		return 0x82134768;
		  /* 82134768h */ case   32:  		/* lwz R6, <#[R10 + 16]> */
		/* 82134768h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000010) );
		/* 82134768h case   32:*/		return 0x8213476C;
		  /* 8213476Ch */ case   33:  		/* lwz R4, <#[R26 + 136]> */
		/* 8213476Ch case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000088) );
		/* 8213476Ch case   33:*/		return 0x82134770;
		  /* 82134770h */ case   34:  		/* bl -226632 */
		/* 82134770h case   34:*/		regs.LR = 0x82134774; return 0x820FD228;
		/* 82134770h case   34:*/		return 0x82134774;
		  /* 82134774h */ case   35:  		/* lwz R11, <#[R28 + 16]> */
		/* 82134774h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82134774h case   35:*/		return 0x82134778;
		  /* 82134778h */ case   36:  		/* addic. R29, R29, -1 */
		/* 82134778h case   36:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82134778h case   36:*/		return 0x8213477C;
		  /* 8213477Ch */ case   37:  		/* stwx R3, <#[R31 + R11]> */
		/* 8213477Ch case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8213477Ch case   37:*/		return 0x82134780;
		  /* 82134780h */ case   38:  		/* addi R31, R31, 4 */
		/* 82134780h case   38:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82134780h case   38:*/		return 0x82134784;
		  /* 82134784h */ case   39:  		/* lwz R11, <#[R27 + 8]> */
		/* 82134784h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82134784h case   39:*/		return 0x82134788;
		  /* 82134788h */ case   40:  		/* stwx R3, <#[R30 + R11]> */
		/* 82134788h case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82134788h case   40:*/		return 0x8213478C;
		  /* 8213478Ch */ case   41:  		/* addi R30, R30, 4 */
		/* 8213478Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213478Ch case   41:*/		return 0x82134790;
		  /* 82134790h */ case   42:  		/* bc 4, CR0_EQ, -80 */
		/* 82134790h case   42:*/		if ( !regs.CR[0].eq ) { return 0x82134740;  }
		/* 82134790h case   42:*/		return 0x82134794;
	}
	return 0x82134794;
} // Block from 821346E8h-82134794h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82134794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134794);
		  /* 82134794h */ case    0:  		/* mr R4, R28 */
		/* 82134794h case    0:*/		regs.R4 = regs.R28;
		/* 82134794h case    0:*/		return 0x82134798;
		  /* 82134798h */ case    1:  		/* mr R3, R26 */
		/* 82134798h case    1:*/		regs.R3 = regs.R26;
		/* 82134798h case    1:*/		return 0x8213479C;
		  /* 8213479Ch */ case    2:  		/* bl -227044 */
		/* 8213479Ch case    2:*/		regs.LR = 0x821347A0; return 0x820FD0B8;
		/* 8213479Ch case    2:*/		return 0x821347A0;
		  /* 821347A0h */ case    3:  		/* or. R31, R3, R3 */
		/* 821347A0h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821347A0h case    3:*/		return 0x821347A4;
		  /* 821347A4h */ case    4:  		/* bc 12, CR0_LT, 512 */
		/* 821347A4h case    4:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 821347A4h case    4:*/		return 0x821347A8;
	}
	return 0x821347A8;
} // Block from 82134794h-821347A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821347A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821347A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821347A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821347A8);
		  /* 821347A8h */ case    0:  		/* addi R24, R24, 1 */
		/* 821347A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821347A8h case    0:*/		return 0x821347AC;
		  /* 821347ACh */ case    1:  		/* addi R25, R25, 4 */
		/* 821347ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821347ACh case    1:*/		return 0x821347B0;
		  /* 821347B0h */ case    2:  		/* cmplw CR6, R24, R23 */
		/* 821347B0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R23);
		/* 821347B0h case    2:*/		return 0x821347B4;
		  /* 821347B4h */ case    3:  		/* bc 12, CR6_LT, -436 */
		/* 821347B4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82134600;  }
		/* 821347B4h case    3:*/		return 0x821347B8;
	}
	return 0x821347B8;
} // Block from 821347A8h-821347B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821347B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821347B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821347B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821347B8);
		  /* 821347B8h */ case    0:  		/* mr R29, R19 */
		/* 821347B8h case    0:*/		regs.R29 = regs.R19;
		/* 821347B8h case    0:*/		return 0x821347BC;
		  /* 821347BCh */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 821347BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821347BCh case    1:*/		return 0x821347C0;
		  /* 821347C0h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821347C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821347FC;  }
		/* 821347C0h case    2:*/		return 0x821347C4;
		  /* 821347C4h */ case    3:  		/* mr R30, R19 */
		/* 821347C4h case    3:*/		regs.R30 = regs.R19;
		/* 821347C4h case    3:*/		return 0x821347C8;
		  /* 821347C8h */ case    4:  		/* lwz R11, <#[R26 + 24]> */
		/* 821347C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 821347C8h case    4:*/		return 0x821347CC;
		  /* 821347CCh */ case    5:  		/* mr R3, R26 */
		/* 821347CCh case    5:*/		regs.R3 = regs.R26;
		/* 821347CCh case    5:*/		return 0x821347D0;
		  /* 821347D0h */ case    6:  		/* lwzx R4, <#[R30 + R11]> */
		/* 821347D0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821347D0h case    6:*/		return 0x821347D4;
		  /* 821347D4h */ case    7:  		/* bl -226156 */
		/* 821347D4h case    7:*/		regs.LR = 0x821347D8; return 0x820FD468;
		/* 821347D4h case    7:*/		return 0x821347D8;
		  /* 821347D8h */ case    8:  		/* or. R31, R3, R3 */
		/* 821347D8h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821347D8h case    8:*/		return 0x821347DC;
		  /* 821347DCh */ case    9:  		/* bc 12, CR0_LT, 456 */
		/* 821347DCh case    9:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 821347DCh case    9:*/		return 0x821347E0;
		  /* 821347E0h */ case   10:  		/* lwz R11, <#[R26 + 24]> */
		/* 821347E0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 821347E0h case   10:*/		return 0x821347E4;
		  /* 821347E4h */ case   11:  		/* addi R29, R29, 1 */
		/* 821347E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821347E4h case   11:*/		return 0x821347E8;
		  /* 821347E8h */ case   12:  		/* cmplw CR6, R29, R23 */
		/* 821347E8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R23);
		/* 821347E8h case   12:*/		return 0x821347EC;
		  /* 821347ECh */ case   13:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821347ECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821347ECh case   13:*/		return 0x821347F0;
		  /* 821347F0h */ case   14:  		/* addi R30, R30, 4 */
		/* 821347F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821347F0h case   14:*/		return 0x821347F4;
		  /* 821347F4h */ case   15:  		/* stw R19, <#[R11]> */
		/* 821347F4h case   15:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 821347F4h case   15:*/		return 0x821347F8;
		  /* 821347F8h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 821347F8h case   16:*/		if ( regs.CR[6].lt ) { return 0x821347C8;  }
		/* 821347F8h case   16:*/		return 0x821347FC;
	}
	return 0x821347FC;
} // Block from 821347B8h-821347FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821347FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821347FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821347FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821347FC);
		  /* 821347FCh */ case    0:  		/* lwz R21, <#[R26 + 12]> */
		/* 821347FCh case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R26 + 0x0000000C) );
		/* 821347FCh case    0:*/		return 0x82134800;
		  /* 82134800h */ case    1:  		/* mr R22, R19 */
		/* 82134800h case    1:*/		regs.R22 = regs.R19;
		/* 82134800h case    1:*/		return 0x82134804;
		  /* 82134804h */ case    2:  		/* cmplwi CR6, R21, 0 */
		/* 82134804h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82134804h case    2:*/		return 0x82134808;
		  /* 82134808h */ case    3:  		/* bc 12, CR6_EQ, 400 */
		/* 82134808h case    3:*/		if ( regs.CR[6].eq ) { return 0x82134998;  }
		/* 82134808h case    3:*/		return 0x8213480C;
		  /* 8213480Ch */ case    4:  		/* mr R23, R19 */
		/* 8213480Ch case    4:*/		regs.R23 = regs.R19;
		/* 8213480Ch case    4:*/		return 0x82134810;
		  /* 82134810h */ case    5:  		/* lwz R11, <#[R26 + 24]> */
		/* 82134810h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 82134810h case    5:*/		return 0x82134814;
		  /* 82134814h */ case    6:  		/* lwzx R29, <#[R23 + R11]> */
		/* 82134814h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + regs.R11 + 0x00000000) );
		/* 82134814h case    6:*/		return 0x82134818;
		  /* 82134818h */ case    7:  		/* lwz R11, <#[R29]> */
		/* 82134818h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82134818h case    7:*/		return 0x8213481C;
		  /* 8213481Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8213481Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213481Ch case    8:*/		return 0x82134820;
		  /* 82134820h */ case    9:  		/* bc 12, CR6_EQ, 360 */
		/* 82134820h case    9:*/		if ( regs.CR[6].eq ) { return 0x82134988;  }
		/* 82134820h case    9:*/		return 0x82134824;
		  /* 82134824h */ case   10:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 82134824h case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 82134824h case   10:*/		return 0x82134828;
		  /* 82134828h */ case   11:  		/* rlwinm R24, R11, 0, 12, 31 */
		/* 82134828h case   11:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R24,regs.R11);
		/* 82134828h case   11:*/		return 0x8213482C;
		  /* 8213482Ch */ case   12:  		/* mr R3, R10 */
		/* 8213482Ch case   12:*/		regs.R3 = regs.R10;
		/* 8213482Ch case   12:*/		return 0x82134830;
		  /* 82134830h */ case   13:  		/* bl -20688 */
		/* 82134830h case   13:*/		regs.LR = 0x82134834; return 0x8212F760;
		/* 82134830h case   13:*/		return 0x82134834;
		  /* 82134834h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82134834h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82134834h case   14:*/		return 0x82134838;
		  /* 82134838h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 82134838h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82134844;  }
		/* 82134838h case   15:*/		return 0x8213483C;
		  /* 8213483Ch */ case   16:  		/* cmplw CR6, R10, R18 */
		/* 8213483Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 8213483Ch case   16:*/		return 0x82134840;
		  /* 82134840h */ case   17:  		/* bc 4, CR6_EQ, 312 */
		/* 82134840h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82134978;  }
		/* 82134840h case   17:*/		return 0x82134844;
	}
	return 0x82134844;
} // Block from 821347FCh-82134844h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82134844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134844);
		  /* 82134844h */ case    0:  		/* subf R11, R10, R18 */
		/* 82134844h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R18);
		/* 82134844h case    0:*/		return 0x82134848;
		  /* 82134848h */ case    1:  		/* lwz R10, <#[R29 + 8]> */
		/* 82134848h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 82134848h case    1:*/		return 0x8213484C;
		  /* 8213484Ch */ case    2:  		/* lwz R9, <#[R26 + 20]> */
		/* 8213484Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000014) );
		/* 8213484Ch case    2:*/		return 0x82134850;
		  /* 82134850h */ case    3:  		/* subfic R11, R11, 0 */
		/* 82134850h case    3:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82134850h case    3:*/		return 0x82134854;
		  /* 82134854h */ case    4:  		/* lwz R8, <#[R26 + 16]> */
		/* 82134854h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000010) );
		/* 82134854h case    4:*/		return 0x82134858;
		  /* 82134858h */ case    5:  		/* subfe R11, R11, R11 */
		/* 82134858h case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82134858h case    5:*/		return 0x8213485C;
		  /* 8213485Ch */ case    6:  		/* and R11, R11, R24 */
		/* 8213485Ch case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 8213485Ch case    6:*/		return 0x82134860;
		  /* 82134860h */ case    7:  		/* rlwinm R25, R11, 2, 0, 29 */
		/* 82134860h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R11);
		/* 82134860h case    7:*/		return 0x82134864;
		  /* 82134864h */ case    8:  		/* lwzx R11, <#[R25 + R10]> */
		/* 82134864h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + regs.R10 + 0x00000000) );
		/* 82134864h case    8:*/		return 0x82134868;
		  /* 82134868h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82134868h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82134868h case    9:*/		return 0x8213486C;
		  /* 8213486Ch */ case   10:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8213486Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213486Ch case   10:*/		return 0x82134870;
		  /* 82134870h */ case   11:  		/* lwz R11, <#[R10 + 4]> */
		/* 82134870h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82134870h case   11:*/		return 0x82134874;
		  /* 82134874h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82134874h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82134874h case   12:*/		return 0x82134878;
		  /* 82134878h */ case   13:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82134878h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82134878h case   13:*/		return 0x8213487C;
		  /* 8213487Ch */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213487Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213487Ch case   14:*/		return 0x82134880;
		  /* 82134880h */ case   15:  		/* rlwinm. R9, R11, 0, 22, 22 */
		/* 82134880h case   15:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R9,regs.R11);
		/* 82134880h case   15:*/		return 0x82134884;
		  /* 82134884h */ case   16:  		/* bc 4, CR0_EQ, 24 */
		/* 82134884h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8213489C;  }
		/* 82134884h case   16:*/		return 0x82134888;
		  /* 82134888h */ case   17:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82134888h case   17:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82134888h case   17:*/		return 0x8213488C;
		  /* 8213488Ch */ case   18:  		/* bc 12, CR0_EQ, 236 */
		/* 8213488Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x82134978;  }
		/* 8213488Ch case   18:*/		return 0x82134890;
		  /* 82134890h */ case   19:  		/* lbz R11, <#[R10 + 111]> */
		/* 82134890h case   19:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000006F) );
		/* 82134890h case   19:*/		return 0x82134894;
		  /* 82134894h */ case   20:  		/* cmplwi CR6, R11, 1 */
		/* 82134894h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82134894h case   20:*/		return 0x82134898;
		  /* 82134898h */ case   21:  		/* bc 4, CR6_EQ, 224 */
		/* 82134898h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82134978;  }
		/* 82134898h case   21:*/		return 0x8213489C;
	}
	return 0x8213489C;
} // Block from 82134844h-8213489Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213489Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213489C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213489C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213489C);
		  /* 8213489Ch */ case    0:  		/* li R3, 116 */
		/* 8213489Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213489Ch case    0:*/		return 0x821348A0;
		  /* 821348A0h */ case    1:  		/* bl -230152 */
		/* 821348A0h case    1:*/		regs.LR = 0x821348A4; return 0x820FC598;
		/* 821348A0h case    1:*/		return 0x821348A4;
		  /* 821348A4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821348A4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821348A4h case    2:*/		return 0x821348A8;
		  /* 821348A8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821348A8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821348B8;  }
		/* 821348A8h case    3:*/		return 0x821348AC;
		  /* 821348ACh */ case    4:  		/* bl -231948 */
		/* 821348ACh case    4:*/		regs.LR = 0x821348B0; return 0x820FBEA0;
		/* 821348ACh case    4:*/		return 0x821348B0;
		  /* 821348B0h */ case    5:  		/* mr R27, R3 */
		/* 821348B0h case    5:*/		regs.R27 = regs.R3;
		/* 821348B0h case    5:*/		return 0x821348B4;
		  /* 821348B4h */ case    6:  		/* b 8 */
		/* 821348B4h case    6:*/		return 0x821348BC;
		/* 821348B4h case    6:*/		return 0x821348B8;
	}
	return 0x821348B8;
} // Block from 8213489Ch-821348B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821348B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821348B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821348B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821348B8);
		  /* 821348B8h */ case    0:  		/* mr R27, R19 */
		/* 821348B8h case    0:*/		regs.R27 = regs.R19;
		/* 821348B8h case    0:*/		return 0x821348BC;
	}
	return 0x821348BC;
} // Block from 821348B8h-821348BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821348BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821348BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821348BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821348BC);
		  /* 821348BCh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821348BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821348BCh case    0:*/		return 0x821348C0;
		  /* 821348C0h */ case    1:  		/* bc 12, CR6_EQ, -612 */
		/* 821348C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213465C;  }
		/* 821348C0h case    1:*/		return 0x821348C4;
		  /* 821348C4h */ case    2:  		/* mr R4, R24 */
		/* 821348C4h case    2:*/		regs.R4 = regs.R24;
		/* 821348C4h case    2:*/		return 0x821348C8;
		  /* 821348C8h */ case    3:  		/* li R7, 0 */
		/* 821348C8h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821348C8h case    3:*/		return 0x821348CC;
		  /* 821348CCh */ case    4:  		/* rlwimi R4, R20, 28, 0, 11 */
		/* 821348CCh case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R20);
		/* 821348CCh case    4:*/		return 0x821348D0;
		  /* 821348D0h */ case    5:  		/* mr R6, R24 */
		/* 821348D0h case    5:*/		regs.R6 = regs.R24;
		/* 821348D0h case    5:*/		return 0x821348D4;
		  /* 821348D4h */ case    6:  		/* mr R5, R24 */
		/* 821348D4h case    6:*/		regs.R5 = regs.R24;
		/* 821348D4h case    6:*/		return 0x821348D8;
		  /* 821348D8h */ case    7:  		/* mr R3, R27 */
		/* 821348D8h case    7:*/		regs.R3 = regs.R27;
		/* 821348D8h case    7:*/		return 0x821348DC;
		  /* 821348DCh */ case    8:  		/* bl -230060 */
		/* 821348DCh case    8:*/		regs.LR = 0x821348E0; return 0x820FC630;
		/* 821348DCh case    8:*/		return 0x821348E0;
		  /* 821348E0h */ case    9:  		/* or. R31, R3, R3 */
		/* 821348E0h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821348E0h case    9:*/		return 0x821348E4;
		  /* 821348E4h */ case   10:  		/* bc 12, CR0_LT, 192 */
		/* 821348E4h case   10:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 821348E4h case   10:*/		return 0x821348E8;
		  /* 821348E8h */ case   11:  		/* mr R4, R29 */
		/* 821348E8h case   11:*/		regs.R4 = regs.R29;
		/* 821348E8h case   11:*/		return 0x821348EC;
		  /* 821348ECh */ case   12:  		/* mr R3, R27 */
		/* 821348ECh case   12:*/		regs.R3 = regs.R27;
		/* 821348ECh case   12:*/		return 0x821348F0;
		  /* 821348F0h */ case   13:  		/* bl -231936 */
		/* 821348F0h case   13:*/		regs.LR = 0x821348F4; return 0x820FBEF0;
		/* 821348F0h case   13:*/		return 0x821348F4;
		  /* 821348F4h */ case   14:  		/* or. R31, R3, R3 */
		/* 821348F4h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821348F4h case   14:*/		return 0x821348F8;
		  /* 821348F8h */ case   15:  		/* bc 12, CR0_LT, 172 */
		/* 821348F8h case   15:*/		if ( regs.CR[0].lt ) { return 0x821349A4;  }
		/* 821348F8h case   15:*/		return 0x821348FC;
		  /* 821348FCh */ case   16:  		/* mr R28, R19 */
		/* 821348FCh case   16:*/		regs.R28 = regs.R19;
		/* 821348FCh case   16:*/		return 0x82134900;
		  /* 82134900h */ case   17:  		/* cmplwi CR6, R24, 0 */
		/* 82134900h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82134900h case   17:*/		return 0x82134904;
		  /* 82134904h */ case   18:  		/* bc 12, CR6_EQ, 104 */
		/* 82134904h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213496C;  }
		/* 82134904h case   18:*/		return 0x82134908;
		  /* 82134908h */ case   19:  		/* lwz R11, <#[R29 + 8]> */
		/* 82134908h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82134908h case   19:*/		return 0x8213490C;
		  /* 8213490Ch */ case   20:  		/* mr R30, R19 */
		/* 8213490Ch case   20:*/		regs.R30 = regs.R19;
		/* 8213490Ch case   20:*/		return 0x82134910;
		  /* 82134910h */ case   21:  		/* mr R31, R25 */
		/* 82134910h case   21:*/		regs.R31 = regs.R25;
		/* 82134910h case   21:*/		return 0x82134914;
		  /* 82134914h */ case   22:  		/* lwz R10, <#[R27 + 8]> */
		/* 82134914h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 82134914h case   22:*/		return 0x82134918;
		  /* 82134918h */ case   23:  		/* mr R6, R28 */
		/* 82134918h case   23:*/		regs.R6 = regs.R28;
		/* 82134918h case   23:*/		return 0x8213491C;
		  /* 8213491Ch */ case   24:  		/* lwzx R11, <#[R31 + R11]> */
		/* 8213491Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8213491Ch case   24:*/		return 0x82134920;
		  /* 82134920h */ case   25:  		/* li R5, 0 */
		/* 82134920h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82134920h case   25:*/		return 0x82134924;
		  /* 82134924h */ case   26:  		/* mr R3, R26 */
		/* 82134924h case   26:*/		regs.R3 = regs.R26;
		/* 82134924h case   26:*/		return 0x82134928;
		  /* 82134928h */ case   27:  		/* fmr FR1, FR31 */
		/* 82134928h case   27:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82134928h case   27:*/		return 0x8213492C;
		  /* 8213492Ch */ case   28:  		/* stwx R11, <#[R30 + R10]> */
		/* 8213492Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 8213492Ch case   28:*/		return 0x82134930;
		  /* 82134930h */ case   29:  		/* lwz R4, <#[R26 + 136]> */
		/* 82134930h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000088) );
		/* 82134930h case   29:*/		return 0x82134934;
		  /* 82134934h */ case   30:  		/* bl -227084 */
		/* 82134934h case   30:*/		regs.LR = 0x82134938; return 0x820FD228;
		/* 82134934h case   30:*/		return 0x82134938;
		  /* 82134938h */ case   31:  		/* lwz R11, <#[R27 + 16]> */
		/* 82134938h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82134938h case   31:*/		return 0x8213493C;
		  /* 8213493Ch */ case   32:  		/* stwx R3, <#[R11 + R30]> */
		/* 8213493Ch case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8213493Ch case   32:*/		return 0x82134940;
		  /* 82134940h */ case   33:  		/* lwz R11, <#[R29 + 8]> */
		/* 82134940h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82134940h case   33:*/		return 0x82134944;
		  /* 82134944h */ case   34:  		/* stwx R3, <#[R11 + R31]> */
		/* 82134944h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82134944h case   34:*/		return 0x82134948;
		  /* 82134948h */ case   35:  		/* lwz R11, <#[R29 + 8]> */
		/* 82134948h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82134948h case   35:*/		return 0x8213494C;
		  /* 8213494Ch */ case   36:  		/* lwzx R10, <#[R31 + R11]> */
		/* 8213494Ch case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8213494Ch case   36:*/		return 0x82134950;
		  /* 82134950h */ case   37:  		/* cmpwi CR6, R10, -1 */
		/* 82134950h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82134950h case   37:*/		return 0x82134954;
		  /* 82134954h */ case   38:  		/* bc 12, CR6_EQ, -760 */
		/* 82134954h case   38:*/		if ( regs.CR[6].eq ) { return 0x8213465C;  }
		/* 82134954h case   38:*/		return 0x82134958;
		  /* 82134958h */ case   39:  		/* addi R28, R28, 1 */
		/* 82134958h case   39:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82134958h case   39:*/		return 0x8213495C;
		  /* 8213495Ch */ case   40:  		/* addi R30, R30, 4 */
		/* 8213495Ch case   40:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213495Ch case   40:*/		return 0x82134960;
		  /* 82134960h */ case   41:  		/* addi R31, R31, 4 */
		/* 82134960h case   41:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82134960h case   41:*/		return 0x82134964;
		  /* 82134964h */ case   42:  		/* cmplw CR6, R28, R24 */
		/* 82134964h case   42:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R24);
		/* 82134964h case   42:*/		return 0x82134968;
		  /* 82134968h */ case   43:  		/* bc 12, CR6_LT, -84 */
		/* 82134968h case   43:*/		if ( regs.CR[6].lt ) { return 0x82134914;  }
		/* 82134968h case   43:*/		return 0x8213496C;
	}
	return 0x8213496C;
} // Block from 821348BCh-8213496Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8213496Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213496C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213496C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213496C);
		  /* 8213496Ch */ case    0:  		/* mr R4, R27 */
		/* 8213496Ch case    0:*/		regs.R4 = regs.R27;
		/* 8213496Ch case    0:*/		return 0x82134970;
		  /* 82134970h */ case    1:  		/* mr R3, R26 */
		/* 82134970h case    1:*/		regs.R3 = regs.R26;
		/* 82134970h case    1:*/		return 0x82134974;
		  /* 82134974h */ case    2:  		/* bl -227516 */
		/* 82134974h case    2:*/		regs.LR = 0x82134978; return 0x820FD0B8;
		/* 82134974h case    2:*/		return 0x82134978;
	}
	return 0x82134978;
} // Block from 8213496Ch-82134978h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82134978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134978);
		  /* 82134978h */ case    0:  		/* mr R4, R29 */
		/* 82134978h case    0:*/		regs.R4 = regs.R29;
		/* 82134978h case    0:*/		return 0x8213497C;
		  /* 8213497Ch */ case    1:  		/* mr R3, R26 */
		/* 8213497Ch case    1:*/		regs.R3 = regs.R26;
		/* 8213497Ch case    1:*/		return 0x82134980;
		  /* 82134980h */ case    2:  		/* bl -226584 */
		/* 82134980h case    2:*/		regs.LR = 0x82134984; return 0x820FD468;
		/* 82134980h case    2:*/		return 0x82134984;
		  /* 82134984h */ case    3:  		/* stw R19, <#[R29]> */
		/* 82134984h case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R29 + 0x00000000) );
		/* 82134984h case    3:*/		return 0x82134988;
	}
	return 0x82134988;
} // Block from 82134978h-82134988h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134988);
		  /* 82134988h */ case    0:  		/* addi R22, R22, 1 */
		/* 82134988h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82134988h case    0:*/		return 0x8213498C;
		  /* 8213498Ch */ case    1:  		/* addi R23, R23, 4 */
		/* 8213498Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 8213498Ch case    1:*/		return 0x82134990;
		  /* 82134990h */ case    2:  		/* cmplw CR6, R22, R21 */
		/* 82134990h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 82134990h case    2:*/		return 0x82134994;
		  /* 82134994h */ case    3:  		/* bc 12, CR6_LT, -388 */
		/* 82134994h case    3:*/		if ( regs.CR[6].lt ) { return 0x82134810;  }
		/* 82134994h case    3:*/		return 0x82134998;
	}
	return 0x82134998;
} // Block from 82134988h-82134998h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134998);
		  /* 82134998h */ case    0:  		/* mr R3, R26 */
		/* 82134998h case    0:*/		regs.R3 = regs.R26;
		/* 82134998h case    0:*/		return 0x8213499C;
		  /* 8213499Ch */ case    1:  		/* bl -208188 */
		/* 8213499Ch case    1:*/		regs.LR = 0x821349A0; return 0x82101C60;
		/* 8213499Ch case    1:*/		return 0x821349A0;
		  /* 821349A0h */ case    2:  		/* mr R31, R3 */
		/* 821349A0h case    2:*/		regs.R31 = regs.R3;
		/* 821349A0h case    2:*/		return 0x821349A4;
	}
	return 0x821349A4;
} // Block from 82134998h-821349A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821349A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821349A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821349A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821349A4);
		  /* 821349A4h */ case    0:  		/* mr R3, R31 */
		/* 821349A4h case    0:*/		regs.R3 = regs.R31;
		/* 821349A4h case    0:*/		return 0x821349A8;
	}
	return 0x821349A8;
} // Block from 821349A4h-821349A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821349A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821349A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821349A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821349A8);
		  /* 821349A8h */ case    0:  		/* addi R1, R1, 240 */
		/* 821349A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821349A8h case    0:*/		return 0x821349AC;
		  /* 821349ACh */ case    1:  		/* lfd FR31, <#[R1 - 128]> */
		/* 821349ACh case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 821349ACh case    1:*/		return 0x821349B0;
		  /* 821349B0h */ case    2:  		/* b -669488 */
		/* 821349B0h case    2:*/		return 0x82091280;
		/* 821349B0h case    2:*/		return 0x821349B4;
		  /* 821349B4h */ case    3:  		/* nop */
		/* 821349B4h case    3:*/		cpu::op::nop();
		/* 821349B4h case    3:*/		return 0x821349B8;
	}
	return 0x821349B8;
} // Block from 821349A8h-821349B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821349B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821349B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821349B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821349B8);
		  /* 821349B8h */ case    0:  		/* mfspr R12, LR */
		/* 821349B8h case    0:*/		regs.R12 = regs.LR;
		/* 821349B8h case    0:*/		return 0x821349BC;
		  /* 821349BCh */ case    1:  		/* bl -669548 */
		/* 821349BCh case    1:*/		regs.LR = 0x821349C0; return 0x82091250;
		/* 821349BCh case    1:*/		return 0x821349C0;
		  /* 821349C0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821349C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821349C0h case    2:*/		return 0x821349C4;
		  /* 821349C4h */ case    3:  		/* lwz R5, <#[R3 + 12]> */
		/* 821349C4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x0000000C) );
		/* 821349C4h case    3:*/		return 0x821349C8;
		  /* 821349C8h */ case    4:  		/* mr R31, R3 */
		/* 821349C8h case    4:*/		regs.R31 = regs.R3;
		/* 821349C8h case    4:*/		return 0x821349CC;
		  /* 821349CCh */ case    5:  		/* lwz R4, <#[R3 + 24]> */
		/* 821349CCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000018) );
		/* 821349CCh case    5:*/		return 0x821349D0;
		  /* 821349D0h */ case    6:  		/* bl -6592 */
		/* 821349D0h case    6:*/		regs.LR = 0x821349D4; return 0x82133010;
		/* 821349D0h case    6:*/		return 0x821349D4;
		  /* 821349D4h */ case    7:  		/* or. R27, R3, R3 */
		/* 821349D4h case    7:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 821349D4h case    7:*/		return 0x821349D8;
		  /* 821349D8h */ case    8:  		/* bc 12, CR0_LT, 176 */
		/* 821349D8h case    8:*/		if ( regs.CR[0].lt ) { return 0x82134A88;  }
		/* 821349D8h case    8:*/		return 0x821349DC;
		  /* 821349DCh */ case    9:  		/* lwz R10, <#[R31 + 12]> */
		/* 821349DCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821349DCh case    9:*/		return 0x821349E0;
		  /* 821349E0h */ case   10:  		/* li R8, 0 */
		/* 821349E0h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821349E0h case   10:*/		return 0x821349E4;
		  /* 821349E4h */ case   11:  		/* mr R9, R8 */
		/* 821349E4h case   11:*/		regs.R9 = regs.R8;
		/* 821349E4h case   11:*/		return 0x821349E8;
		  /* 821349E8h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 821349E8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821349E8h case   12:*/		return 0x821349EC;
		  /* 821349ECh */ case   13:  		/* bc 12, CR6_EQ, 52 */
		/* 821349ECh case   13:*/		if ( regs.CR[6].eq ) { return 0x82134A20;  }
		/* 821349ECh case   13:*/		return 0x821349F0;
		  /* 821349F0h */ case   14:  		/* mr R11, R8 */
		/* 821349F0h case   14:*/		regs.R11 = regs.R8;
		/* 821349F0h case   14:*/		return 0x821349F4;
		  /* 821349F4h */ case   15:  		/* lwz R10, <#[R31 + 24]> */
		/* 821349F4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 821349F4h case   15:*/		return 0x821349F8;
		  /* 821349F8h */ case   16:  		/* addi R9, R9, 1 */
		/* 821349F8h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821349F8h case   16:*/		return 0x821349FC;
		  /* 821349FCh */ case   17:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821349FCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821349FCh case   17:*/		return 0x82134A00;
		  /* 82134A00h */ case   18:  		/* stw R8, <#[R10 + 40]> */
		/* 82134A00h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000028) );
		/* 82134A00h case   18:*/		return 0x82134A04;
		  /* 82134A04h */ case   19:  		/* lwz R10, <#[R31 + 24]> */
		/* 82134A04h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82134A04h case   19:*/		return 0x82134A08;
		  /* 82134A08h */ case   20:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82134A08h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82134A08h case   20:*/		return 0x82134A0C;
		  /* 82134A0Ch */ case   21:  		/* addi R11, R11, 4 */
		/* 82134A0Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82134A0Ch case   21:*/		return 0x82134A10;
		  /* 82134A10h */ case   22:  		/* stw R8, <#[R10 + 36]> */
		/* 82134A10h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000024) );
		/* 82134A10h case   22:*/		return 0x82134A14;
		  /* 82134A14h */ case   23:  		/* lwz R10, <#[R31 + 12]> */
		/* 82134A14h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82134A14h case   23:*/		return 0x82134A18;
		  /* 82134A18h */ case   24:  		/* cmplw CR6, R9, R10 */
		/* 82134A18h case   24:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82134A18h case   24:*/		return 0x82134A1C;
		  /* 82134A1Ch */ case   25:  		/* bc 12, CR6_LT, -40 */
		/* 82134A1Ch case   25:*/		if ( regs.CR[6].lt ) { return 0x821349F4;  }
		/* 82134A1Ch case   25:*/		return 0x82134A20;
	}
	return 0x82134A20;
} // Block from 821349B8h-82134A20h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82134A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134A20);
		  /* 82134A20h */ case    0:  		/* mr R28, R8 */
		/* 82134A20h case    0:*/		regs.R28 = regs.R8;
		/* 82134A20h case    0:*/		return 0x82134A24;
		  /* 82134A24h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82134A24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82134A24h case    1:*/		return 0x82134A28;
		  /* 82134A28h */ case    2:  		/* bc 12, CR6_EQ, 96 */
		/* 82134A28h case    2:*/		if ( regs.CR[6].eq ) { return 0x82134A88;  }
		/* 82134A28h case    2:*/		return 0x82134A2C;
		  /* 82134A2Ch */ case    3:  		/* mr R29, R8 */
		/* 82134A2Ch case    3:*/		regs.R29 = regs.R8;
		/* 82134A2Ch case    3:*/		return 0x82134A30;
		  /* 82134A30h */ case    4:  		/* lwz R4, <#[R31 + 24]> */
		/* 82134A30h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 82134A30h case    4:*/		return 0x82134A34;
		  /* 82134A34h */ case    5:  		/* lwzx R30, <#[R29 + R4]> */
		/* 82134A34h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + regs.R4 + 0x00000000) );
		/* 82134A34h case    5:*/		return 0x82134A38;
		  /* 82134A38h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 82134A38h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82134A38h case    6:*/		return 0x82134A3C;
		  /* 82134A3Ch */ case    7:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 82134A3Ch case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 82134A3Ch case    7:*/		return 0x82134A40;
		  /* 82134A40h */ case    8:  		/* mr R3, R10 */
		/* 82134A40h case    8:*/		regs.R3 = regs.R10;
		/* 82134A40h case    8:*/		return 0x82134A44;
		  /* 82134A44h */ case    9:  		/* bl -21220 */
		/* 82134A44h case    9:*/		regs.LR = 0x82134A48; return 0x8212F760;
		/* 82134A44h case    9:*/		return 0x82134A48;
		  /* 82134A48h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82134A48h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82134A48h case   10:*/		return 0x82134A4C;
		  /* 82134A4Ch */ case   11:  		/* bc 4, CR0_EQ, 16 */
		/* 82134A4Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82134A5C;  }
		/* 82134A4Ch case   11:*/		return 0x82134A50;
		  /* 82134A50h */ case   12:  		/* lis R11, 4352 */
		/* 82134A50h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0x1100);
		/* 82134A50h case   12:*/		return 0x82134A54;
		  /* 82134A54h */ case   13:  		/* cmplw CR6, R10, R11 */
		/* 82134A54h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82134A54h case   13:*/		return 0x82134A58;
		  /* 82134A58h */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 82134A58h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82134A74;  }
		/* 82134A58h case   14:*/		return 0x82134A5C;
	}
	return 0x82134A5C;
} // Block from 82134A20h-82134A5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82134A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134A5C);
		  /* 82134A5Ch */ case    0:  		/* li R6, 1 */
		/* 82134A5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82134A5Ch case    0:*/		return 0x82134A60;
		  /* 82134A60h */ case    1:  		/* lwz R26, <#[R30 + 36]> */
		/* 82134A60h case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x00000024) );
		/* 82134A60h case    1:*/		return 0x82134A64;
		  /* 82134A64h */ case    2:  		/* mr R5, R30 */
		/* 82134A64h case    2:*/		regs.R5 = regs.R30;
		/* 82134A64h case    2:*/		return 0x82134A68;
		  /* 82134A68h */ case    3:  		/* mr R3, R31 */
		/* 82134A68h case    3:*/		regs.R3 = regs.R31;
		/* 82134A68h case    3:*/		return 0x82134A6C;
		  /* 82134A6Ch */ case    4:  		/* bl -329004 */
		/* 82134A6Ch case    4:*/		regs.LR = 0x82134A70; return 0x820E4540;
		/* 82134A6Ch case    4:*/		return 0x82134A70;
		  /* 82134A70h */ case    5:  		/* stw R26, <#[R30 + 36]> */
		/* 82134A70h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000024) );
		/* 82134A70h case    5:*/		return 0x82134A74;
	}
	return 0x82134A74;
} // Block from 82134A5Ch-82134A74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82134A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134A74);
		  /* 82134A74h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82134A74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82134A74h case    0:*/		return 0x82134A78;
		  /* 82134A78h */ case    1:  		/* addi R28, R28, 1 */
		/* 82134A78h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82134A78h case    1:*/		return 0x82134A7C;
		  /* 82134A7Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 82134A7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82134A7Ch case    2:*/		return 0x82134A80;
		  /* 82134A80h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 82134A80h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82134A80h case    3:*/		return 0x82134A84;
		  /* 82134A84h */ case    4:  		/* bc 12, CR6_LT, -84 */
		/* 82134A84h case    4:*/		if ( regs.CR[6].lt ) { return 0x82134A30;  }
		/* 82134A84h case    4:*/		return 0x82134A88;
	}
	return 0x82134A88;
} // Block from 82134A74h-82134A88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134A88);
		  /* 82134A88h */ case    0:  		/* mr R3, R27 */
		/* 82134A88h case    0:*/		regs.R3 = regs.R27;
		/* 82134A88h case    0:*/		return 0x82134A8C;
		  /* 82134A8Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 82134A8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82134A8Ch case    1:*/		return 0x82134A90;
		  /* 82134A90h */ case    2:  		/* b -669680 */
		/* 82134A90h case    2:*/		return 0x820912A0;
		/* 82134A90h case    2:*/		return 0x82134A94;
		  /* 82134A94h */ case    3:  		/* nop */
		/* 82134A94h case    3:*/		cpu::op::nop();
		/* 82134A94h case    3:*/		return 0x82134A98;
	}
	return 0x82134A98;
} // Block from 82134A88h-82134A98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134A98);
		  /* 82134A98h */ case    0:  		/* mfspr R12, LR */
		/* 82134A98h case    0:*/		regs.R12 = regs.LR;
		/* 82134A98h case    0:*/		return 0x82134A9C;
		  /* 82134A9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82134A9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82134A9Ch case    1:*/		return 0x82134AA0;
		  /* 82134AA0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82134AA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82134AA0h case    2:*/		return 0x82134AA4;
		  /* 82134AA4h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 82134AA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82134AA4h case    3:*/		return 0x82134AA8;
		  /* 82134AA8h */ case    4:  		/* mr R10, R3 */
		/* 82134AA8h case    4:*/		regs.R10 = regs.R3;
		/* 82134AA8h case    4:*/		return 0x82134AAC;
		  /* 82134AACh */ case    5:  		/* li R6, 0 */
		/* 82134AACh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82134AACh case    5:*/		return 0x82134AB0;
		  /* 82134AB0h */ case    6:  		/* li R7, 0 */
		/* 82134AB0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82134AB0h case    6:*/		return 0x82134AB4;
		  /* 82134AB4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82134AB4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134AB4h case    7:*/		return 0x82134AB8;
		  /* 82134AB8h */ case    8:  		/* bc 4, CR6_GT, 104 */
		/* 82134AB8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82134B20;  }
		/* 82134AB8h case    8:*/		return 0x82134ABC;
		  /* 82134ABCh */ case    9:  		/* li R8, 0 */
		/* 82134ABCh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82134ABCh case    9:*/		return 0x82134AC0;
		  /* 82134AC0h */ case   10:  		/* addi R5, R3, 1104 */
		/* 82134AC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x450);
		/* 82134AC0h case   10:*/		return 0x82134AC4;
		  /* 82134AC4h */ case   11:  		/* lwz R11, <#[R10 + 24]> */
		/* 82134AC4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82134AC4h case   11:*/		return 0x82134AC8;
		  /* 82134AC8h */ case   12:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82134AC8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82134AC8h case   12:*/		return 0x82134ACC;
		  /* 82134ACCh */ case   13:  		/* lwz R11, <#[R11]> */
		/* 82134ACCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82134ACCh case   13:*/		return 0x82134AD0;
		  /* 82134AD0h */ case   14:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 82134AD0h case   14:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 82134AD0h case   14:*/		return 0x82134AD4;
		  /* 82134AD4h */ case   15:  		/* mr R3, R9 */
		/* 82134AD4h case   15:*/		regs.R3 = regs.R9;
		/* 82134AD4h case   15:*/		return 0x82134AD8;
		  /* 82134AD8h */ case   16:  		/* bl -21368 */
		/* 82134AD8h case   16:*/		regs.LR = 0x82134ADC; return 0x8212F760;
		/* 82134AD8h case   16:*/		return 0x82134ADC;
		  /* 82134ADCh */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 82134ADCh case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82134ADCh case   17:*/		return 0x82134AE0;
		  /* 82134AE0h */ case   18:  		/* bc 4, CR0_EQ, 28 */
		/* 82134AE0h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82134AFC;  }
		/* 82134AE0h case   18:*/		return 0x82134AE4;
		  /* 82134AE4h */ case   19:  		/* lis R11, 29200 */
		/* 82134AE4h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0x7210);
		/* 82134AE4h case   19:*/		return 0x82134AE8;
		  /* 82134AE8h */ case   20:  		/* cmplw CR6, R9, R11 */
		/* 82134AE8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82134AE8h case   20:*/		return 0x82134AEC;
		  /* 82134AECh */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 82134AECh case   21:*/		if ( regs.CR[6].eq ) { return 0x82134AFC;  }
		/* 82134AECh case   21:*/		return 0x82134AF0;
		  /* 82134AF0h */ case   22:  		/* lis R11, 4352 */
		/* 82134AF0h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0x1100);
		/* 82134AF0h case   22:*/		return 0x82134AF4;
		  /* 82134AF4h */ case   23:  		/* cmplw CR6, R9, R11 */
		/* 82134AF4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82134AF4h case   23:*/		return 0x82134AF8;
		  /* 82134AF8h */ case   24:  		/* bc 4, CR6_EQ, 20 */
		/* 82134AF8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82134B0C;  }
		/* 82134AF8h case   24:*/		return 0x82134AFC;
	}
	return 0x82134AFC;
} // Block from 82134A98h-82134AFCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 82134AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134AFC);
		  /* 82134AFCh */ case    0:  		/* cmplwi CR6, R6, 12 */
		/* 82134AFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x0000000C);
		/* 82134AFCh case    0:*/		return 0x82134B00;
		  /* 82134B00h */ case    1:  		/* bc 4, CR6_LT, 60 */
		/* 82134B00h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82134B3C;  }
		/* 82134B00h case    1:*/		return 0x82134B04;
		  /* 82134B04h */ case    2:  		/* stwu R7, <#[R5 + 4]> */
		/* 82134B04h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R5 + 0x00000004) );
		regs.R5 = (uint32)(regs.R5 + 0x00000004);
		/* 82134B04h case    2:*/		return 0x82134B08;
		  /* 82134B08h */ case    3:  		/* addi R6, R6, 1 */
		/* 82134B08h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82134B08h case    3:*/		return 0x82134B0C;
	}
	return 0x82134B0C;
} // Block from 82134AFCh-82134B0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134B0C);
		  /* 82134B0Ch */ case    0:  		/* lwz R11, <#[R10 + 12]> */
		/* 82134B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82134B0Ch case    0:*/		return 0x82134B10;
		  /* 82134B10h */ case    1:  		/* addi R7, R7, 1 */
		/* 82134B10h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82134B10h case    1:*/		return 0x82134B14;
		  /* 82134B14h */ case    2:  		/* addi R8, R8, 4 */
		/* 82134B14h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82134B14h case    2:*/		return 0x82134B18;
		  /* 82134B18h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 82134B18h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 82134B18h case    3:*/		return 0x82134B1C;
		  /* 82134B1Ch */ case    4:  		/* bc 12, CR6_LT, -88 */
		/* 82134B1Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82134AC4;  }
		/* 82134B1Ch case    4:*/		return 0x82134B20;
	}
	return 0x82134B20;
} // Block from 82134B0Ch-82134B20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134B20);
		  /* 82134B20h */ case    0:  		/* li R11, 1 */
		/* 82134B20h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82134B20h case    0:*/		return 0x82134B24;
		  /* 82134B24h */ case    1:  		/* stw R6, <#[R10 + 1156]> */
		/* 82134B24h case    1:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000484) );
		/* 82134B24h case    1:*/		return 0x82134B28;
		  /* 82134B28h */ case    2:  		/* slw R3, R11, R6 */
		/* 82134B28h case    2:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R11,regs.R6);
		/* 82134B28h case    2:*/		return 0x82134B2C;
		  /* 82134B2Ch */ case    3:  		/* addi R1, R1, 96 */
		/* 82134B2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82134B2Ch case    3:*/		return 0x82134B30;
		  /* 82134B30h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 82134B30h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82134B30h case    4:*/		return 0x82134B34;
		  /* 82134B34h */ case    5:  		/* mtspr LR, R12 */
		/* 82134B34h case    5:*/		regs.LR = regs.R12;
		/* 82134B34h case    5:*/		return 0x82134B38;
		  /* 82134B38h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82134B38h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82134B38h case    6:*/		return 0x82134B3C;
	}
	return 0x82134B3C;
} // Block from 82134B20h-82134B3Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82134B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134B3C);
		  /* 82134B3Ch */ case    0:  		/* li R3, -1 */
		/* 82134B3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82134B3Ch case    0:*/		return 0x82134B40;
		  /* 82134B40h */ case    1:  		/* b -20 */
		/* 82134B40h case    1:*/		return 0x82134B2C;
		/* 82134B40h case    1:*/		return 0x82134B44;
		  /* 82134B44h */ case    2:  		/* nop */
		/* 82134B44h case    2:*/		cpu::op::nop();
		/* 82134B44h case    2:*/		return 0x82134B48;
	}
	return 0x82134B48;
} // Block from 82134B3Ch-82134B48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82134B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134B48);
		  /* 82134B48h */ case    0:  		/* mfspr R12, LR */
		/* 82134B48h case    0:*/		regs.R12 = regs.LR;
		/* 82134B48h case    0:*/		return 0x82134B4C;
		  /* 82134B4Ch */ case    1:  		/* bl -669944 */
		/* 82134B4Ch case    1:*/		regs.LR = 0x82134B50; return 0x82091254;
		/* 82134B4Ch case    1:*/		return 0x82134B50;
		  /* 82134B50h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82134B50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82134B50h case    2:*/		return 0x82134B54;
		  /* 82134B54h */ case    3:  		/* lwz R11, <#[R4]> */
		/* 82134B54h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82134B54h case    3:*/		return 0x82134B58;
		  /* 82134B58h */ case    4:  		/* mr R28, R3 */
		/* 82134B58h case    4:*/		regs.R28 = regs.R3;
		/* 82134B58h case    4:*/		return 0x82134B5C;
		  /* 82134B5Ch */ case    5:  		/* mr R31, R4 */
		/* 82134B5Ch case    5:*/		regs.R31 = regs.R4;
		/* 82134B5Ch case    5:*/		return 0x82134B60;
		  /* 82134B60h */ case    6:  		/* rlwinm R3, R11, 0, 0, 11 */
		/* 82134B60h case    6:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R3,regs.R11);
		/* 82134B60h case    6:*/		return 0x82134B64;
		  /* 82134B64h */ case    7:  		/* mr R27, R5 */
		/* 82134B64h case    7:*/		regs.R27 = regs.R5;
		/* 82134B64h case    7:*/		return 0x82134B68;
		  /* 82134B68h */ case    8:  		/* bl -21512 */
		/* 82134B68h case    8:*/		regs.LR = 0x82134B6C; return 0x8212F760;
		/* 82134B68h case    8:*/		return 0x82134B6C;
		  /* 82134B6Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82134B6Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82134B6Ch case    9:*/		return 0x82134B70;
		  /* 82134B70h */ case   10:  		/* bc 12, CR0_EQ, 60 */
		/* 82134B70h case   10:*/		if ( regs.CR[0].eq ) { return 0x82134BAC;  }
		/* 82134B70h case   10:*/		return 0x82134B74;
		  /* 82134B74h */ case   11:  		/* lwz R11, <#[R4 + 20]> */
		/* 82134B74h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 82134B74h case   11:*/		return 0x82134B78;
		  /* 82134B78h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82134B78h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134B78h case   12:*/		return 0x82134B7C;
		  /* 82134B7Ch */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 82134B7Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82134BAC;  }
		/* 82134B7Ch case   13:*/		return 0x82134B80;
		  /* 82134B80h */ case   14:  		/* cmplwi CR6, R5, 1 */
		/* 82134B80h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 82134B80h case   14:*/		return 0x82134B84;
		  /* 82134B84h */ case   15:  		/* bc 12, CR6_LT, 36 */
		/* 82134B84h case   15:*/		if ( regs.CR[6].lt ) { return 0x82134BA8;  }
		/* 82134B84h case   15:*/		return 0x82134B88;
		  /* 82134B88h */ case   16:  		/* lis R11, -32253 */
		/* 82134B88h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82134B88h case   16:*/		return 0x82134B8C;
		  /* 82134B8Ch */ case   17:  		/* lwz R4, <#[R4 + 60]> */
		/* 82134B8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000003C) );
		/* 82134B8Ch case   17:*/		return 0x82134B90;
		  /* 82134B90h */ case   18:  		/* li R5, 4500 */
		/* 82134B90h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 82134B90h case   18:*/		return 0x82134B94;
		  /* 82134B94h */ case   19:  		/* addi R6, R11, 21308 */
		/* 82134B94h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x533C);
		/* 82134B94h case   19:*/		return 0x82134B98;
		  /* 82134B98h */ case   20:  		/* mr R3, R28 */
		/* 82134B98h case   20:*/		regs.R3 = regs.R28;
		/* 82134B98h case   20:*/		return 0x82134B9C;
		  /* 82134B9Ch */ case   21:  		/* bl -156780 */
		/* 82134B9Ch case   21:*/		regs.LR = 0x82134BA0; return 0x8210E730;
		/* 82134B9Ch case   21:*/		return 0x82134BA0;
		  /* 82134BA0h */ case   22:  		/* li R3, 0 */
		/* 82134BA0h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82134BA0h case   22:*/		return 0x82134BA4;
		  /* 82134BA4h */ case   23:  		/* b 92 */
		/* 82134BA4h case   23:*/		return 0x82134C00;
		/* 82134BA4h case   23:*/		return 0x82134BA8;
	}
	return 0x82134BA8;
} // Block from 82134B48h-82134BA8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82134BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134BA8);
		  /* 82134BA8h */ case    0:  		/* addi R27, R27, 1 */
		/* 82134BA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82134BA8h case    0:*/		return 0x82134BAC;
	}
	return 0x82134BAC;
} // Block from 82134BA8h-82134BACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134BAC);
		  /* 82134BACh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82134BACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82134BACh case    0:*/		return 0x82134BB0;
		  /* 82134BB0h */ case    1:  		/* li R29, 0 */
		/* 82134BB0h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82134BB0h case    1:*/		return 0x82134BB4;
		  /* 82134BB4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82134BB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134BB4h case    2:*/		return 0x82134BB8;
		  /* 82134BB8h */ case    3:  		/* bc 4, CR6_GT, 68 */
		/* 82134BB8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82134BFC;  }
		/* 82134BB8h case    3:*/		return 0x82134BBC;
		  /* 82134BBCh */ case    4:  		/* li R30, 0 */
		/* 82134BBCh case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82134BBCh case    4:*/		return 0x82134BC0;
		  /* 82134BC0h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 82134BC0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82134BC0h case    5:*/		return 0x82134BC4;
		  /* 82134BC4h */ case    6:  		/* mr R5, R27 */
		/* 82134BC4h case    6:*/		regs.R5 = regs.R27;
		/* 82134BC4h case    6:*/		return 0x82134BC8;
		  /* 82134BC8h */ case    7:  		/* lwz R10, <#[R28 + 24]> */
		/* 82134BC8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 82134BC8h case    7:*/		return 0x82134BCC;
		  /* 82134BCCh */ case    8:  		/* mr R3, R28 */
		/* 82134BCCh case    8:*/		regs.R3 = regs.R28;
		/* 82134BCCh case    8:*/		return 0x82134BD0;
		  /* 82134BD0h */ case    9:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82134BD0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82134BD0h case    9:*/		return 0x82134BD4;
		  /* 82134BD4h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82134BD4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82134BD4h case   10:*/		return 0x82134BD8;
		  /* 82134BD8h */ case   11:  		/* lwzx R4, <#[R11 + R10]> */
		/* 82134BD8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82134BD8h case   11:*/		return 0x82134BDC;
		  /* 82134BDCh */ case   12:  		/* bl -148 */
		/* 82134BDCh case   12:*/		regs.LR = 0x82134BE0; return 0x82134B48;
		/* 82134BDCh case   12:*/		return 0x82134BE0;
		  /* 82134BE0h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82134BE0h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82134BE0h case   13:*/		return 0x82134BE4;
		  /* 82134BE4h */ case   14:  		/* bc 12, CR0_EQ, -68 */
		/* 82134BE4h case   14:*/		if ( regs.CR[0].eq ) { return 0x82134BA0;  }
		/* 82134BE4h case   14:*/		return 0x82134BE8;
		  /* 82134BE8h */ case   15:  		/* lwz R11, <#[R31 + 20]> */
		/* 82134BE8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82134BE8h case   15:*/		return 0x82134BEC;
		  /* 82134BECh */ case   16:  		/* addi R29, R29, 1 */
		/* 82134BECh case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82134BECh case   16:*/		return 0x82134BF0;
		  /* 82134BF0h */ case   17:  		/* addi R30, R30, 4 */
		/* 82134BF0h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82134BF0h case   17:*/		return 0x82134BF4;
		  /* 82134BF4h */ case   18:  		/* cmplw CR6, R29, R11 */
		/* 82134BF4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82134BF4h case   18:*/		return 0x82134BF8;
		  /* 82134BF8h */ case   19:  		/* bc 12, CR6_LT, -56 */
		/* 82134BF8h case   19:*/		if ( regs.CR[6].lt ) { return 0x82134BC0;  }
		/* 82134BF8h case   19:*/		return 0x82134BFC;
	}
	return 0x82134BFC;
} // Block from 82134BACh-82134BFCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 82134BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134BFC);
		  /* 82134BFCh */ case    0:  		/* li R3, 1 */
		/* 82134BFCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82134BFCh case    0:*/		return 0x82134C00;
	}
	return 0x82134C00;
} // Block from 82134BFCh-82134C00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134C00);
		  /* 82134C00h */ case    0:  		/* addi R1, R1, 128 */
		/* 82134C00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82134C00h case    0:*/		return 0x82134C04;
		  /* 82134C04h */ case    1:  		/* b -670048 */
		/* 82134C04h case    1:*/		return 0x820912A4;
		/* 82134C04h case    1:*/		return 0x82134C08;
	}
	return 0x82134C08;
} // Block from 82134C00h-82134C08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82134C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134C08);
		  /* 82134C08h */ case    0:  		/* mfspr R12, LR */
		/* 82134C08h case    0:*/		regs.R12 = regs.LR;
		/* 82134C08h case    0:*/		return 0x82134C0C;
		  /* 82134C0Ch */ case    1:  		/* bl -670144 */
		/* 82134C0Ch case    1:*/		regs.LR = 0x82134C10; return 0x8209124C;
		/* 82134C0Ch case    1:*/		return 0x82134C10;
		  /* 82134C10h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82134C10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82134C10h case    2:*/		return 0x82134C14;
		  /* 82134C14h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 82134C14h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82134C14h case    3:*/		return 0x82134C18;
		  /* 82134C18h */ case    4:  		/* mr R31, R3 */
		/* 82134C18h case    4:*/		regs.R31 = regs.R3;
		/* 82134C18h case    4:*/		return 0x82134C1C;
		  /* 82134C1Ch */ case    5:  		/* li R25, 0 */
		/* 82134C1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82134C1Ch case    5:*/		return 0x82134C20;
		  /* 82134C20h */ case    6:  		/* cmplwi CR6, R11, 64 */
		/* 82134C20h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82134C20h case    6:*/		return 0x82134C24;
		  /* 82134C24h */ case    7:  		/* bc 4, CR6_GT, 32 */
		/* 82134C24h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82134C44;  }
		/* 82134C24h case    7:*/		return 0x82134C28;
		  /* 82134C28h */ case    8:  		/* lis R11, -32253 */
		/* 82134C28h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82134C28h case    8:*/		return 0x82134C2C;
		  /* 82134C2Ch */ case    9:  		/* li R5, 4500 */
		/* 82134C2Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 82134C2Ch case    9:*/		return 0x82134C30;
		  /* 82134C30h */ case   10:  		/* addi R6, R11, 21444 */
		/* 82134C30h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x53C4);
		/* 82134C30h case   10:*/		return 0x82134C34;
		  /* 82134C34h */ case   11:  		/* li R4, 0 */
		/* 82134C34h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82134C34h case   11:*/		return 0x82134C38;
		  /* 82134C38h */ case   12:  		/* bl -156936 */
		/* 82134C38h case   12:*/		regs.LR = 0x82134C3C; return 0x8210E730;
		/* 82134C38h case   12:*/		return 0x82134C3C;
		  /* 82134C3Ch */ case   13:  		/* li R3, 1 */
		/* 82134C3Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82134C3Ch case   13:*/		return 0x82134C40;
		  /* 82134C40h */ case   14:  		/* b 268 */
		/* 82134C40h case   14:*/		return 0x82134D4C;
		/* 82134C40h case   14:*/		return 0x82134C44;
	}
	return 0x82134C44;
} // Block from 82134C08h-82134C44h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82134C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134C44);
		  /* 82134C44h */ case    0:  		/* li R10, 0 */
		/* 82134C44h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82134C44h case    0:*/		return 0x82134C48;
		  /* 82134C48h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82134C48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134C48h case    1:*/		return 0x82134C4C;
		  /* 82134C4Ch */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 82134C4Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82134C78;  }
		/* 82134C4Ch case    2:*/		return 0x82134C50;
		  /* 82134C50h */ case    3:  		/* li R11, 0 */
		/* 82134C50h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82134C50h case    3:*/		return 0x82134C54;
		  /* 82134C54h */ case    4:  		/* lwz R9, <#[R31 + 24]> */
		/* 82134C54h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 82134C54h case    4:*/		return 0x82134C58;
		  /* 82134C58h */ case    5:  		/* li R8, 0 */
		/* 82134C58h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82134C58h case    5:*/		return 0x82134C5C;
		  /* 82134C5Ch */ case    6:  		/* addi R10, R10, 1 */
		/* 82134C5Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82134C5Ch case    6:*/		return 0x82134C60;
		  /* 82134C60h */ case    7:  		/* lwzx R9, <#[R9 + R11]> */
		/* 82134C60h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82134C60h case    7:*/		return 0x82134C64;
		  /* 82134C64h */ case    8:  		/* addi R11, R11, 4 */
		/* 82134C64h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82134C64h case    8:*/		return 0x82134C68;
		  /* 82134C68h */ case    9:  		/* stw R8, <#[R9 + 40]> */
		/* 82134C68h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000028) );
		/* 82134C68h case    9:*/		return 0x82134C6C;
		  /* 82134C6Ch */ case   10:  		/* lwz R9, <#[R31 + 12]> */
		/* 82134C6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82134C6Ch case   10:*/		return 0x82134C70;
		  /* 82134C70h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 82134C70h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82134C70h case   11:*/		return 0x82134C74;
		  /* 82134C74h */ case   12:  		/* bc 12, CR6_LT, -32 */
		/* 82134C74h case   12:*/		if ( regs.CR[6].lt ) { return 0x82134C54;  }
		/* 82134C74h case   12:*/		return 0x82134C78;
	}
	return 0x82134C78;
} // Block from 82134C44h-82134C78h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82134C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134C78);
		  /* 82134C78h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82134C78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82134C78h case    0:*/		return 0x82134C7C;
		  /* 82134C7Ch */ case    1:  		/* li R26, 0 */
		/* 82134C7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82134C7Ch case    1:*/		return 0x82134C80;
		  /* 82134C80h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82134C80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134C80h case    2:*/		return 0x82134C84;
		  /* 82134C84h */ case    3:  		/* bc 4, CR6_GT, 196 */
		/* 82134C84h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82134D48;  }
		/* 82134C84h case    3:*/		return 0x82134C88;
		  /* 82134C88h */ case    4:  		/* lis R11, -32253 */
		/* 82134C88h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82134C88h case    4:*/		return 0x82134C8C;
		  /* 82134C8Ch */ case    5:  		/* li R28, 0 */
		/* 82134C8Ch case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82134C8Ch case    5:*/		return 0x82134C90;
		  /* 82134C90h */ case    6:  		/* addi R27, R11, 21368 */
		/* 82134C90h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x5378);
		/* 82134C90h case    6:*/		return 0x82134C94;
		  /* 82134C94h */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 82134C94h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82134C94h case    7:*/		return 0x82134C98;
		  /* 82134C98h */ case    8:  		/* lwzx R11, <#[R11 + R28]> */
		/* 82134C98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82134C98h case    8:*/		return 0x82134C9C;
		  /* 82134C9Ch */ case    9:  		/* stw R11, <#[R31 + 260]> */
		/* 82134C9Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82134C9Ch case    9:*/		return 0x82134CA0;
		  /* 82134CA0h */ case   10:  		/* lwz R10, <#[R11 + 36]> */
		/* 82134CA0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82134CA0h case   10:*/		return 0x82134CA4;
		  /* 82134CA4h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82134CA4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82134CA4h case   11:*/		return 0x82134CA8;
		  /* 82134CA8h */ case   12:  		/* bc 12, CR6_EQ, 108 */
		/* 82134CA8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82134D14;  }
		/* 82134CA8h case   12:*/		return 0x82134CAC;
		  /* 82134CACh */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 82134CACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82134CACh case   13:*/		return 0x82134CB0;
		  /* 82134CB0h */ case   14:  		/* li R29, 0 */
		/* 82134CB0h case   14:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82134CB0h case   14:*/		return 0x82134CB4;
		  /* 82134CB4h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82134CB4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82134CB4h case   15:*/		return 0x82134CB8;
		  /* 82134CB8h */ case   16:  		/* bc 4, CR6_GT, 92 */
		/* 82134CB8h case   16:*/		if ( !regs.CR[6].gt ) { return 0x82134D14;  }
		/* 82134CB8h case   16:*/		return 0x82134CBC;
		  /* 82134CBCh */ case   17:  		/* li R30, 0 */
		/* 82134CBCh case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82134CBCh case   17:*/		return 0x82134CC0;
		  /* 82134CC0h */ case   18:  		/* lwz R11, <#[R31 + 260]> */
		/* 82134CC0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82134CC0h case   18:*/		return 0x82134CC4;
		  /* 82134CC4h */ case   19:  		/* lwz R10, <#[R31 + 20]> */
		/* 82134CC4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82134CC4h case   19:*/		return 0x82134CC8;
		  /* 82134CC8h */ case   20:  		/* lwz R9, <#[R11 + 8]> */
		/* 82134CC8h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82134CC8h case   20:*/		return 0x82134CCC;
		  /* 82134CCCh */ case   21:  		/* lwzx R9, <#[R9 + R30]> */
		/* 82134CCCh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82134CCCh case   21:*/		return 0x82134CD0;
		  /* 82134CD0h */ case   22:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82134CD0h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82134CD0h case   22:*/		return 0x82134CD4;
		  /* 82134CD4h */ case   23:  		/* lwzx R10, <#[R9 + R10]> */
		/* 82134CD4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82134CD4h case   23:*/		return 0x82134CD8;
		  /* 82134CD8h */ case   24:  		/* lbz R10, <#[R10 + 111]> */
		/* 82134CD8h case   24:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000006F) );
		/* 82134CD8h case   24:*/		return 0x82134CDC;
		  /* 82134CDCh */ case   25:  		/* cmplwi CR6, R10, 1 */
		/* 82134CDCh case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82134CDCh case   25:*/		return 0x82134CE0;
		  /* 82134CE0h */ case   26:  		/* bc 4, CR6_EQ, 28 */
		/* 82134CE0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82134CFC;  }
		/* 82134CE0h case   26:*/		return 0x82134CE4;
		  /* 82134CE4h */ case   27:  		/* mr R6, R27 */
		/* 82134CE4h case   27:*/		regs.R6 = regs.R27;
		/* 82134CE4h case   27:*/		return 0x82134CE8;
		  /* 82134CE8h */ case   28:  		/* lwz R4, <#[R11 + 60]> */
		/* 82134CE8h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82134CE8h case   28:*/		return 0x82134CEC;
		  /* 82134CECh */ case   29:  		/* li R5, 4500 */
		/* 82134CECh case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 82134CECh case   29:*/		return 0x82134CF0;
		  /* 82134CF0h */ case   30:  		/* mr R3, R31 */
		/* 82134CF0h case   30:*/		regs.R3 = regs.R31;
		/* 82134CF0h case   30:*/		return 0x82134CF4;
		  /* 82134CF4h */ case   31:  		/* bl -157124 */
		/* 82134CF4h case   31:*/		regs.LR = 0x82134CF8; return 0x8210E730;
		/* 82134CF4h case   31:*/		return 0x82134CF8;
		  /* 82134CF8h */ case   32:  		/* li R25, 1 */
		/* 82134CF8h case   32:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82134CF8h case   32:*/		return 0x82134CFC;
	}
	return 0x82134CFC;
} // Block from 82134C78h-82134CFCh (33 instructions)

//////////////////////////////////////////////////////
// Block at 82134CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134CFC);
		  /* 82134CFCh */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 82134CFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82134CFCh case    0:*/		return 0x82134D00;
		  /* 82134D00h */ case    1:  		/* addi R29, R29, 1 */
		/* 82134D00h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82134D00h case    1:*/		return 0x82134D04;
		  /* 82134D04h */ case    2:  		/* addi R30, R30, 4 */
		/* 82134D04h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82134D04h case    2:*/		return 0x82134D08;
		  /* 82134D08h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 82134D08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82134D08h case    3:*/		return 0x82134D0C;
		  /* 82134D0Ch */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 82134D0Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82134D0Ch case    4:*/		return 0x82134D10;
		  /* 82134D10h */ case    5:  		/* bc 12, CR6_LT, -80 */
		/* 82134D10h case    5:*/		if ( regs.CR[6].lt ) { return 0x82134CC0;  }
		/* 82134D10h case    5:*/		return 0x82134D14;
	}
	return 0x82134D14;
} // Block from 82134CFCh-82134D14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82134D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134D14);
		  /* 82134D14h */ case    0:  		/* li R5, 0 */
		/* 82134D14h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82134D14h case    0:*/		return 0x82134D18;
		  /* 82134D18h */ case    1:  		/* lwz R4, <#[R31 + 260]> */
		/* 82134D18h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 82134D18h case    1:*/		return 0x82134D1C;
		  /* 82134D1Ch */ case    2:  		/* mr R3, R31 */
		/* 82134D1Ch case    2:*/		regs.R3 = regs.R31;
		/* 82134D1Ch case    2:*/		return 0x82134D20;
		  /* 82134D20h */ case    3:  		/* bl -472 */
		/* 82134D20h case    3:*/		regs.LR = 0x82134D24; return 0x82134B48;
		/* 82134D20h case    3:*/		return 0x82134D24;
		  /* 82134D24h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82134D24h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82134D24h case    4:*/		return 0x82134D28;
	}
	return 0x82134D28;
} // Block from 82134D14h-82134D28h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134D28h
// Function '?RegReassign@CPSLegacyProgram@D3DXShader@@IAAIPAPAVCInstruction@2@IIIPAVCArgument@2@AAH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134D28);
		  /* 82134D28h */ case    0:  		/* bc 12, CR0_EQ, 28 */
		/* 82134D28h case    0:*/		if ( regs.CR[0].eq ) { return 0x82134D44;  }
		/* 82134D28h case    0:*/		return 0x82134D2C;
		  /* 82134D2Ch */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 82134D2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82134D2Ch case    1:*/		return 0x82134D30;
		  /* 82134D30h */ case    2:  		/* addi R26, R26, 1 */
		/* 82134D30h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82134D30h case    2:*/		return 0x82134D34;
		  /* 82134D34h */ case    3:  		/* addi R28, R28, 4 */
		/* 82134D34h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82134D34h case    3:*/		return 0x82134D38;
		  /* 82134D38h */ case    4:  		/* cmplw CR6, R26, R11 */
		/* 82134D38h case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82134D38h case    4:*/		return 0x82134D3C;
		  /* 82134D3Ch */ case    5:  		/* bc 12, CR6_LT, -168 */
		/* 82134D3Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x82134C94;  }
		/* 82134D3Ch case    5:*/		return 0x82134D40;
		  /* 82134D40h */ case    6:  		/* b 8 */
		/* 82134D40h case    6:*/		return 0x82134D48;
		/* 82134D40h case    6:*/		return 0x82134D44;
	}
	return 0x82134D44;
} // Block from 82134D28h-82134D44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82134D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134D44);
		  /* 82134D44h */ case    0:  		/* li R25, 1 */
		/* 82134D44h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82134D44h case    0:*/		return 0x82134D48;
	}
	return 0x82134D48;
} // Block from 82134D44h-82134D48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134D48);
		  /* 82134D48h */ case    0:  		/* mr R3, R25 */
		/* 82134D48h case    0:*/		regs.R3 = regs.R25;
		/* 82134D48h case    0:*/		return 0x82134D4C;
	}
	return 0x82134D4C;
} // Block from 82134D48h-82134D4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134D4C);
		  /* 82134D4Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 82134D4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82134D4Ch case    0:*/		return 0x82134D50;
		  /* 82134D50h */ case    1:  		/* b -670388 */
		/* 82134D50h case    1:*/		return 0x8209129C;
		/* 82134D50h case    1:*/		return 0x82134D54;
		  /* 82134D54h */ case    2:  		/* nop */
		/* 82134D54h case    2:*/		cpu::op::nop();
		/* 82134D54h case    2:*/		return 0x82134D58;
	}
	return 0x82134D58;
} // Block from 82134D4Ch-82134D58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82134D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134D58);
		  /* 82134D58h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 82134D58h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82134D58h case    0:*/		return 0x82134D5C;
		  /* 82134D5Ch */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 82134D5Ch case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82134D5Ch case    1:*/		return 0x82134D60;
		  /* 82134D60h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 82134D60h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82134D60h case    2:*/		return 0x82134D64;
		  /* 82134D64h */ case    3:  		/* bc 4, CR6_EQ, 212 */
		/* 82134D64h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82134E38;  }
		/* 82134D64h case    3:*/		return 0x82134D68;
		  /* 82134D68h */ case    4:  		/* li R31, 0 */
		/* 82134D68h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82134D68h case    4:*/		return 0x82134D6C;
		  /* 82134D6Ch */ case    5:  		/* cmplwi CR6, R7, 0 */
		/* 82134D6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82134D6Ch case    5:*/		return 0x82134D70;
		  /* 82134D70h */ case    6:  		/* bc 12, CR6_EQ, 548 */
		/* 82134D70h case    6:*/		if ( regs.CR[6].eq ) { return 0x82134F94;  }
		/* 82134D70h case    6:*/		return 0x82134D74;
		  /* 82134D74h */ case    7:  		/* lwz R10, <#[R6]> */
		/* 82134D74h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 82134D74h case    7:*/		return 0x82134D78;
		  /* 82134D78h */ case    8:  		/* lis R9, 4352 */
		/* 82134D78h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0x1100);
		/* 82134D78h case    8:*/		return 0x82134D7C;
		  /* 82134D7Ch */ case    9:  		/* lwz R11, <#[R10]> */
		/* 82134D7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82134D7Ch case    9:*/		return 0x82134D80;
		  /* 82134D80h */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82134D80h case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82134D80h case   10:*/		return 0x82134D84;
		  /* 82134D84h */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 82134D84h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82134D84h case   11:*/		return 0x82134D88;
		  /* 82134D88h */ case   12:  		/* bc 12, CR6_EQ, 148 */
		/* 82134D88h case   12:*/		if ( regs.CR[6].eq ) { return 0x82134E1C;  }
		/* 82134D88h case   12:*/		return 0x82134D8C;
		  /* 82134D8Ch */ case   13:  		/* lis R9, 29200 */
		/* 82134D8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x7210);
		/* 82134D8Ch case   13:*/		return 0x82134D90;
		  /* 82134D90h */ case   14:  		/* cmplw CR6, R11, R9 */
		/* 82134D90h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82134D90h case   14:*/		return 0x82134D94;
		  /* 82134D94h */ case   15:  		/* bc 12, CR6_EQ, 136 */
		/* 82134D94h case   15:*/		if ( regs.CR[6].eq ) { return 0x82134E1C;  }
		/* 82134D94h case   15:*/		return 0x82134D98;
		  /* 82134D98h */ case   16:  		/* lwz R11, <#[R10 + 8]> */
		/* 82134D98h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82134D98h case   16:*/		return 0x82134D9C;
		  /* 82134D9Ch */ case   17:  		/* lwz R9, <#[R3 + 20]> */
		/* 82134D9Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82134D9Ch case   17:*/		return 0x82134DA0;
		  /* 82134DA0h */ case   18:  		/* lwz R30, <#[R3 + 16]> */
		/* 82134DA0h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000010) );
		/* 82134DA0h case   18:*/		return 0x82134DA4;
		  /* 82134DA4h */ case   19:  		/* lwz R8, <#[R11]> */
		/* 82134DA4h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82134DA4h case   19:*/		return 0x82134DA8;
		  /* 82134DA8h */ case   20:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 82134DA8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 82134DA8h case   20:*/		return 0x82134DAC;
		  /* 82134DACh */ case   21:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82134DACh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82134DACh case   21:*/		return 0x82134DB0;
		  /* 82134DB0h */ case   22:  		/* lwz R9, <#[R11 + 4]> */
		/* 82134DB0h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82134DB0h case   22:*/		return 0x82134DB4;
		  /* 82134DB4h */ case   23:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82134DB4h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82134DB4h case   23:*/		return 0x82134DB8;
		  /* 82134DB8h */ case   24:  		/* lwzx R9, <#[R9 + R30]> */
		/* 82134DB8h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82134DB8h case   24:*/		return 0x82134DBC;
		  /* 82134DBCh */ case   25:  		/* lwz R9, <#[R9 + 4]> */
		/* 82134DBCh case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82134DBCh case   25:*/		return 0x82134DC0;
		  /* 82134DC0h */ case   26:  		/* andi. R9, R9, 2112 */
		/* 82134DC0h case   26:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R9,0x840);
		/* 82134DC0h case   26:*/		return 0x82134DC4;
		  /* 82134DC4h */ case   27:  		/* cmplwi CR0, R9, 0 */
		/* 82134DC4h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 82134DC4h case   27:*/		return 0x82134DC8;
		  /* 82134DC8h */ case   28:  		/* bc 12, CR0_EQ, 84 */
		/* 82134DC8h case   28:*/		if ( regs.CR[0].eq ) { return 0x82134E1C;  }
		/* 82134DC8h case   28:*/		return 0x82134DCC;
		  /* 82134DCCh */ case   29:  		/* lwz R11, <#[R11 + 12]> */
		/* 82134DCCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82134DCCh case   29:*/		return 0x82134DD0;
		  /* 82134DD0h */ case   30:  		/* cmplwi CR6, R11, 6 */
		/* 82134DD0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82134DD0h case   30:*/		return 0x82134DD4;
		  /* 82134DD4h */ case   31:  		/* bc 4, CR6_LT, 92 */
		/* 82134DD4h case   31:*/		if ( !regs.CR[6].lt ) { return 0x82134E30;  }
		/* 82134DD4h case   31:*/		return 0x82134DD8;
		  /* 82134DD8h */ case   32:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82134DD8h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82134DD8h case   32:*/		return 0x82134DDC;
		  /* 82134DDCh */ case   33:  		/* lwzx R9, <#[R11 + R4]> */
		/* 82134DDCh case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82134DDCh case   33:*/		return 0x82134DE0;
	}
	return 0x82134DE0;
} // Block from 82134D58h-82134DE0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82134DE0h
// Function '?Restore@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134DE0);
		  /* 82134DE0h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82134DE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82134DE0h case    0:*/		return 0x82134DE4;
		  /* 82134DE4h */ case    1:  		/* bc 4, CR6_EQ, 76 */
		/* 82134DE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82134E30;  }
		/* 82134DE4h case    1:*/		return 0x82134DE8;
		  /* 82134DE8h */ case    2:  		/* lwzx R9, <#[R11 + R5]> */
		/* 82134DE8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82134DE8h case    2:*/		return 0x82134DEC;
		  /* 82134DECh */ case    3:  		/* cmpwi CR6, R9, -1 */
		/* 82134DECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 82134DECh case    3:*/		return 0x82134DF0;
		  /* 82134DF0h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82134DF0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82134DFC;  }
		/* 82134DF0h case    4:*/		return 0x82134DF4;
		  /* 82134DF4h */ case    5:  		/* stwx R8, <#[R11 + R5]> */
		/* 82134DF4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82134DF4h case    5:*/		return 0x82134DF8;
		  /* 82134DF8h */ case    6:  		/* b 12 */
		/* 82134DF8h case    6:*/		return 0x82134E04;
		/* 82134DF8h case    6:*/		return 0x82134DFC;
	}
	return 0x82134DFC;
} // Block from 82134DE0h-82134DFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82134DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134DFC);
		  /* 82134DFCh */ case    0:  		/* cmplw CR6, R9, R8 */
		/* 82134DFCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82134DFCh case    0:*/		return 0x82134E00;
		  /* 82134E00h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 82134E00h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82134E30;  }
		/* 82134E00h case    1:*/		return 0x82134E04;
	}
	return 0x82134E04;
} // Block from 82134DFCh-82134E04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82134E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134E04);
		  /* 82134E04h */ case    0:  		/* li R9, 0 */
		/* 82134E04h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82134E04h case    0:*/		return 0x82134E08;
		  /* 82134E08h */ case    1:  		/* stwx R10, <#[R11 + R4]> */
		/* 82134E08h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82134E08h case    1:*/		return 0x82134E0C;
		  /* 82134E0Ch */ case    2:  		/* stw R9, <#[R6]> */
		/* 82134E0Ch case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82134E0Ch case    2:*/		return 0x82134E10;
		  /* 82134E10h */ case    3:  		/* lwz R10, <#[R10 + 8]> */
		/* 82134E10h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82134E10h case    3:*/		return 0x82134E14;
		  /* 82134E14h */ case    4:  		/* lwz R10, <#[R10]> */
		/* 82134E14h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82134E14h case    4:*/		return 0x82134E18;
		  /* 82134E18h */ case    5:  		/* stwx R10, <#[R11 + R5]> */
		/* 82134E18h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82134E18h case    5:*/		return 0x82134E1C;
	}
	return 0x82134E1C;
} // Block from 82134E04h-82134E1Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82134E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134E1C);
		  /* 82134E1Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 82134E1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82134E1Ch case    0:*/		return 0x82134E20;
		  /* 82134E20h */ case    1:  		/* addi R6, R6, 4 */
		/* 82134E20h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82134E20h case    1:*/		return 0x82134E24;
		  /* 82134E24h */ case    2:  		/* cmplw CR6, R31, R7 */
		/* 82134E24h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R7);
		/* 82134E24h case    2:*/		return 0x82134E28;
		  /* 82134E28h */ case    3:  		/* bc 12, CR6_LT, -180 */
		/* 82134E28h case    3:*/		if ( regs.CR[6].lt ) { return 0x82134D74;  }
		/* 82134E28h case    3:*/		return 0x82134E2C;
		  /* 82134E2Ch */ case    4:  		/* b 360 */
		/* 82134E2Ch case    4:*/		return 0x82134F94;
		/* 82134E2Ch case    4:*/		return 0x82134E30;
	}
	return 0x82134E30;
} // Block from 82134E1Ch-82134E30h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134E30);
		  /* 82134E30h */ case    0:  		/* li R3, 0 */
		/* 82134E30h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82134E30h case    0:*/		return 0x82134E34;
		  /* 82134E34h */ case    1:  		/* b 356 */
		/* 82134E34h case    1:*/		return 0x82134F98;
		/* 82134E34h case    1:*/		return 0x82134E38;
	}
	return 0x82134E38;
} // Block from 82134E30h-82134E38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82134E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134E38);
		  /* 82134E38h */ case    0:  		/* cmplwi CR6, R8, 1 */
		/* 82134E38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82134E38h case    0:*/		return 0x82134E3C;
		  /* 82134E3Ch */ case    1:  		/* bc 4, CR6_EQ, 188 */
		/* 82134E3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82134EF8;  }
		/* 82134E3Ch case    1:*/		return 0x82134E40;
		  /* 82134E40h */ case    2:  		/* li R31, 0 */
		/* 82134E40h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82134E40h case    2:*/		return 0x82134E44;
		  /* 82134E44h */ case    3:  		/* cmplwi CR6, R7, 0 */
		/* 82134E44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82134E44h case    3:*/		return 0x82134E48;
		  /* 82134E48h */ case    4:  		/* bc 12, CR6_EQ, 332 */
		/* 82134E48h case    4:*/		if ( regs.CR[6].eq ) { return 0x82134F94;  }
		/* 82134E48h case    4:*/		return 0x82134E4C;
		  /* 82134E4Ch */ case    5:  		/* mr R3, R6 */
		/* 82134E4Ch case    5:*/		regs.R3 = regs.R6;
		/* 82134E4Ch case    5:*/		return 0x82134E50;
		  /* 82134E50h */ case    6:  		/* lwz R9, <#[R3]> */
		/* 82134E50h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82134E50h case    6:*/		return 0x82134E54;
		  /* 82134E54h */ case    7:  		/* cmplwi CR6, R9, 0 */
		/* 82134E54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82134E54h case    7:*/		return 0x82134E58;
		  /* 82134E58h */ case    8:  		/* bc 12, CR6_EQ, 140 */
		/* 82134E58h case    8:*/		if ( regs.CR[6].eq ) { return 0x82134EE4;  }
		/* 82134E58h case    8:*/		return 0x82134E5C;
		  /* 82134E5Ch */ case    9:  		/* lwz R11, <#[R9]> */
		/* 82134E5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82134E5Ch case    9:*/		return 0x82134E60;
		  /* 82134E60h */ case   10:  		/* lis R10, 4352 */
		/* 82134E60h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 82134E60h case   10:*/		return 0x82134E64;
		  /* 82134E64h */ case   11:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82134E64h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82134E64h case   11:*/		return 0x82134E68;
		  /* 82134E68h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 82134E68h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82134E68h case   12:*/		return 0x82134E6C;
		  /* 82134E6Ch */ case   13:  		/* bc 12, CR6_EQ, 120 */
		/* 82134E6Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82134EE4;  }
		/* 82134E6Ch case   13:*/		return 0x82134E70;
		  /* 82134E70h */ case   14:  		/* lis R10, 29200 */
		/* 82134E70h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 82134E70h case   14:*/		return 0x82134E74;
		  /* 82134E74h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 82134E74h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82134E74h case   15:*/		return 0x82134E78;
		  /* 82134E78h */ case   16:  		/* bc 12, CR6_EQ, 108 */
		/* 82134E78h case   16:*/		if ( regs.CR[6].eq ) { return 0x82134EE4;  }
		/* 82134E78h case   16:*/		return 0x82134E7C;
		  /* 82134E7Ch */ case   17:  		/* li R10, 0 */
		/* 82134E7Ch case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82134E7Ch case   17:*/		return 0x82134E80;
		  /* 82134E80h */ case   18:  		/* mr R11, R5 */
		/* 82134E80h case   18:*/		regs.R11 = regs.R5;
		/* 82134E80h case   18:*/		return 0x82134E84;
		  /* 82134E84h */ case   19:  		/* subf R6, R5, R4 */
		/* 82134E84h case   19:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R5,regs.R4);
		/* 82134E84h case   19:*/		return 0x82134E88;
		  /* 82134E88h */ case   20:  		/* lwzx R8, <#[R6 + R11]> */
		/* 82134E88h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82134E88h case   20:*/		return 0x82134E8C;
		  /* 82134E8Ch */ case   21:  		/* cmplwi CR6, R8, 0 */
		/* 82134E8Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82134E8Ch case   21:*/		return 0x82134E90;
		  /* 82134E90h */ case   22:  		/* bc 4, CR6_EQ, 32 */
		/* 82134E90h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82134EB0;  }
		/* 82134E90h case   22:*/		return 0x82134E94;
		  /* 82134E94h */ case   23:  		/* lwz R30, <#[R9 + 8]> */
		/* 82134E94h case   23:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + 0x00000008) );
		/* 82134E94h case   23:*/		return 0x82134E98;
		  /* 82134E98h */ case   24:  		/* lwz R8, <#[R11]> */
		/* 82134E98h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82134E98h case   24:*/		return 0x82134E9C;
		  /* 82134E9Ch */ case   25:  		/* lwz R30, <#[R30]> */
		/* 82134E9Ch case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000000) );
		/* 82134E9Ch case   25:*/		return 0x82134EA0;
		  /* 82134EA0h */ case   26:  		/* cmplw CR6, R8, R30 */
		/* 82134EA0h case   26:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R30);
		/* 82134EA0h case   26:*/		return 0x82134EA4;
		  /* 82134EA4h */ case   27:  		/* bc 12, CR6_EQ, 28 */
		/* 82134EA4h case   27:*/		if ( regs.CR[6].eq ) { return 0x82134EC0;  }
		/* 82134EA4h case   27:*/		return 0x82134EA8;
		  /* 82134EA8h */ case   28:  		/* cmpwi CR6, R8, -1 */
		/* 82134EA8h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 82134EA8h case   28:*/		return 0x82134EAC;
		  /* 82134EACh */ case   29:  		/* bc 12, CR6_EQ, 20 */
		/* 82134EACh case   29:*/		if ( regs.CR[6].eq ) { return 0x82134EC0;  }
		/* 82134EACh case   29:*/		return 0x82134EB0;
	}
	return 0x82134EB0;
} // Block from 82134E38h-82134EB0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82134EB0h
// Function '?CreateTexLoads@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134EB0);
		  /* 82134EB0h */ case    0:  		/* addi R10, R10, 1 */
		/* 82134EB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82134EB0h case    0:*/		return 0x82134EB4;
		  /* 82134EB4h */ case    1:  		/* addi R11, R11, 4 */
		/* 82134EB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82134EB4h case    1:*/		return 0x82134EB8;
		  /* 82134EB8h */ case    2:  		/* cmplwi CR6, R10, 6 */
		/* 82134EB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 82134EB8h case    2:*/		return 0x82134EBC;
		  /* 82134EBCh */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 82134EBCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82134E88;  }
		/* 82134EBCh case    3:*/		return 0x82134EC0;
	}
	return 0x82134EC0;
} // Block from 82134EB0h-82134EC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134EC0);
		  /* 82134EC0h */ case    0:  		/* cmplwi CR6, R10, 6 */
		/* 82134EC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 82134EC0h case    0:*/		return 0x82134EC4;
		  /* 82134EC4h */ case    1:  		/* bc 12, CR6_EQ, -148 */
		/* 82134EC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82134E30;  }
		/* 82134EC4h case    1:*/		return 0x82134EC8;
		  /* 82134EC8h */ case    2:  		/* lwz R11, <#[R9 + 8]> */
		/* 82134EC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82134EC8h case    2:*/		return 0x82134ECC;
		  /* 82134ECCh */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82134ECCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82134ECCh case    3:*/		return 0x82134ED0;
		  /* 82134ED0h */ case    4:  		/* li R8, 0 */
		/* 82134ED0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82134ED0h case    4:*/		return 0x82134ED4;
		  /* 82134ED4h */ case    5:  		/* lwz R11, <#[R11]> */
		/* 82134ED4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82134ED4h case    5:*/		return 0x82134ED8;
		  /* 82134ED8h */ case    6:  		/* stwx R11, <#[R10 + R5]> */
		/* 82134ED8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 82134ED8h case    6:*/		return 0x82134EDC;
		  /* 82134EDCh */ case    7:  		/* stwx R9, <#[R10 + R4]> */
		/* 82134EDCh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82134EDCh case    7:*/		return 0x82134EE0;
		  /* 82134EE0h */ case    8:  		/* stw R8, <#[R3]> */
		/* 82134EE0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 82134EE0h case    8:*/		return 0x82134EE4;
	}
	return 0x82134EE4;
} // Block from 82134EC0h-82134EE4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82134EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134EE4);
		  /* 82134EE4h */ case    0:  		/* addi R31, R31, 1 */
		/* 82134EE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82134EE4h case    0:*/		return 0x82134EE8;
		  /* 82134EE8h */ case    1:  		/* addi R3, R3, 4 */
		/* 82134EE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82134EE8h case    1:*/		return 0x82134EEC;
		  /* 82134EECh */ case    2:  		/* cmplw CR6, R31, R7 */
		/* 82134EECh case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R7);
		/* 82134EECh case    2:*/		return 0x82134EF0;
		  /* 82134EF0h */ case    3:  		/* bc 12, CR6_LT, -160 */
		/* 82134EF0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82134E50;  }
		/* 82134EF0h case    3:*/		return 0x82134EF4;
		  /* 82134EF4h */ case    4:  		/* b 160 */
		/* 82134EF4h case    4:*/		return 0x82134F94;
		/* 82134EF4h case    4:*/		return 0x82134EF8;
	}
	return 0x82134EF8;
} // Block from 82134EE4h-82134EF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82134EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134EF8);
		  /* 82134EF8h */ case    0:  		/* cmplwi CR6, R8, 2 */
		/* 82134EF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 82134EF8h case    0:*/		return 0x82134EFC;
		  /* 82134EFCh */ case    1:  		/* bc 4, CR6_EQ, 152 */
		/* 82134EFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82134F94;  }
		/* 82134EFCh case    1:*/		return 0x82134F00;
		  /* 82134F00h */ case    2:  		/* li R3, 0 */
		/* 82134F00h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82134F00h case    2:*/		return 0x82134F04;
		  /* 82134F04h */ case    3:  		/* cmplwi CR6, R7, 0 */
		/* 82134F04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82134F04h case    3:*/		return 0x82134F08;
		  /* 82134F08h */ case    4:  		/* bc 12, CR6_EQ, 140 */
		/* 82134F08h case    4:*/		if ( regs.CR[6].eq ) { return 0x82134F94;  }
		/* 82134F08h case    4:*/		return 0x82134F0C;
		  /* 82134F0Ch */ case    5:  		/* mr R8, R6 */
		/* 82134F0Ch case    5:*/		regs.R8 = regs.R6;
		/* 82134F0Ch case    5:*/		return 0x82134F10;
		  /* 82134F10h */ case    6:  		/* lwz R9, <#[R8]> */
		/* 82134F10h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 82134F10h case    6:*/		return 0x82134F14;
		  /* 82134F14h */ case    7:  		/* cmplwi CR6, R9, 0 */
		/* 82134F14h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82134F14h case    7:*/		return 0x82134F18;
		  /* 82134F18h */ case    8:  		/* bc 12, CR6_EQ, 108 */
		/* 82134F18h case    8:*/		if ( regs.CR[6].eq ) { return 0x82134F84;  }
		/* 82134F18h case    8:*/		return 0x82134F1C;
		  /* 82134F1Ch */ case    9:  		/* lwz R11, <#[R9]> */
		/* 82134F1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82134F1Ch case    9:*/		return 0x82134F20;
		  /* 82134F20h */ case   10:  		/* lis R10, 4352 */
		/* 82134F20h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 82134F20h case   10:*/		return 0x82134F24;
		  /* 82134F24h */ case   11:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82134F24h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82134F24h case   11:*/		return 0x82134F28;
		  /* 82134F28h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 82134F28h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82134F28h case   12:*/		return 0x82134F2C;
		  /* 82134F2Ch */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 82134F2Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82134F3C;  }
		/* 82134F2Ch case   13:*/		return 0x82134F30;
		  /* 82134F30h */ case   14:  		/* lis R10, 29200 */
		/* 82134F30h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 82134F30h case   14:*/		return 0x82134F34;
		  /* 82134F34h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 82134F34h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82134F34h case   15:*/		return 0x82134F38;
		  /* 82134F38h */ case   16:  		/* bc 4, CR6_EQ, 76 */
		/* 82134F38h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82134F84;  }
		/* 82134F38h case   16:*/		return 0x82134F3C;
	}
	return 0x82134F3C;
} // Block from 82134EF8h-82134F3Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82134F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134F3C);
		  /* 82134F3Ch */ case    0:  		/* li R11, 0 */
		/* 82134F3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82134F3Ch case    0:*/		return 0x82134F40;
		  /* 82134F40h */ case    1:  		/* mr R10, R4 */
		/* 82134F40h case    1:*/		regs.R10 = regs.R4;
		/* 82134F40h case    1:*/		return 0x82134F44;
		  /* 82134F44h */ case    2:  		/* lwz R6, <#[R10]> */
		/* 82134F44h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82134F44h case    2:*/		return 0x82134F48;
		  /* 82134F48h */ case    3:  		/* cmplwi CR6, R6, 0 */
		/* 82134F48h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82134F48h case    3:*/		return 0x82134F4C;
		  /* 82134F4Ch */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82134F4Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82134F60;  }
		/* 82134F4Ch case    4:*/		return 0x82134F50;
		  /* 82134F50h */ case    5:  		/* addi R11, R11, 1 */
		/* 82134F50h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82134F50h case    5:*/		return 0x82134F54;
		  /* 82134F54h */ case    6:  		/* addi R10, R10, 4 */
		/* 82134F54h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82134F54h case    6:*/		return 0x82134F58;
		  /* 82134F58h */ case    7:  		/* cmplwi CR6, R11, 6 */
		/* 82134F58h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82134F58h case    7:*/		return 0x82134F5C;
		  /* 82134F5Ch */ case    8:  		/* bc 12, CR6_LT, -24 */
		/* 82134F5Ch case    8:*/		if ( regs.CR[6].lt ) { return 0x82134F44;  }
		/* 82134F5Ch case    8:*/		return 0x82134F60;
	}
	return 0x82134F60;
} // Block from 82134F3Ch-82134F60h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82134F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134F60);
		  /* 82134F60h */ case    0:  		/* cmplwi CR6, R11, 6 */
		/* 82134F60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82134F60h case    0:*/		return 0x82134F64;
		  /* 82134F64h */ case    1:  		/* bc 12, CR6_EQ, -308 */
		/* 82134F64h case    1:*/		if ( regs.CR[6].eq ) { return 0x82134E30;  }
		/* 82134F64h case    1:*/		return 0x82134F68;
		  /* 82134F68h */ case    2:  		/* lwz R10, <#[R9 + 8]> */
		/* 82134F68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 82134F68h case    2:*/		return 0x82134F6C;
		  /* 82134F6Ch */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82134F6Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82134F6Ch case    3:*/		return 0x82134F70;
		  /* 82134F70h */ case    4:  		/* li R6, 0 */
		/* 82134F70h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82134F70h case    4:*/		return 0x82134F74;
		  /* 82134F74h */ case    5:  		/* lwz R10, <#[R10]> */
		/* 82134F74h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82134F74h case    5:*/		return 0x82134F78;
		  /* 82134F78h */ case    6:  		/* stwx R10, <#[R11 + R5]> */
		/* 82134F78h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82134F78h case    6:*/		return 0x82134F7C;
		  /* 82134F7Ch */ case    7:  		/* stwx R9, <#[R11 + R4]> */
		/* 82134F7Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82134F7Ch case    7:*/		return 0x82134F80;
		  /* 82134F80h */ case    8:  		/* stw R6, <#[R8]> */
		/* 82134F80h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + 0x00000000) );
		/* 82134F80h case    8:*/		return 0x82134F84;
	}
	return 0x82134F84;
} // Block from 82134F60h-82134F84h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82134F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134F84);
		  /* 82134F84h */ case    0:  		/* addi R3, R3, 1 */
		/* 82134F84h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 82134F84h case    0:*/		return 0x82134F88;
		  /* 82134F88h */ case    1:  		/* addi R8, R8, 4 */
		/* 82134F88h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82134F88h case    1:*/		return 0x82134F8C;
		  /* 82134F8Ch */ case    2:  		/* cmplw CR6, R3, R7 */
		/* 82134F8Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R7);
		/* 82134F8Ch case    2:*/		return 0x82134F90;
		  /* 82134F90h */ case    3:  		/* bc 12, CR6_LT, -128 */
		/* 82134F90h case    3:*/		if ( regs.CR[6].lt ) { return 0x82134F10;  }
		/* 82134F90h case    3:*/		return 0x82134F94;
	}
	return 0x82134F94;
} // Block from 82134F84h-82134F94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82134F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134F94);
		  /* 82134F94h */ case    0:  		/* li R3, 1 */
		/* 82134F94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82134F94h case    0:*/		return 0x82134F98;
	}
	return 0x82134F98;
} // Block from 82134F94h-82134F98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134F98);
		  /* 82134F98h */ case    0:  		/* ld R30, <#[R1 - 16]> */
		/* 82134F98h case    0:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82134F98h case    0:*/		return 0x82134F9C;
		  /* 82134F9Ch */ case    1:  		/* ld R31, <#[R1 - 8]> */
		/* 82134F9Ch case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82134F9Ch case    1:*/		return 0x82134FA0;
		  /* 82134FA0h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82134FA0h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82134FA0h case    2:*/		return 0x82134FA4;
	}
	return 0x82134FA4;
} // Block from 82134F98h-82134FA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82134FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134FA4);
		  /* 82134FA4h */ case    0:  		/* nop */
		/* 82134FA4h case    0:*/		cpu::op::nop();
		/* 82134FA4h case    0:*/		return 0x82134FA8;
	}
	return 0x82134FA8;
} // Block from 82134FA4h-82134FA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82134FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134FA8);
		  /* 82134FA8h */ case    0:  		/* mfspr R12, LR */
		/* 82134FA8h case    0:*/		regs.R12 = regs.LR;
		/* 82134FA8h case    0:*/		return 0x82134FAC;
		  /* 82134FACh */ case    1:  		/* bl -671084 */
		/* 82134FACh case    1:*/		regs.LR = 0x82134FB0; return 0x82091240;
		/* 82134FACh case    1:*/		return 0x82134FB0;
		  /* 82134FB0h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82134FB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82134FB0h case    2:*/		return 0x82134FB4;
		  /* 82134FB4h */ case    3:  		/* li R23, 0 */
		/* 82134FB4h case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82134FB4h case    3:*/		return 0x82134FB8;
		  /* 82134FB8h */ case    4:  		/* mr R31, R3 */
		/* 82134FB8h case    4:*/		regs.R31 = regs.R3;
		/* 82134FB8h case    4:*/		return 0x82134FBC;
		  /* 82134FBCh */ case    5:  		/* mr R28, R5 */
		/* 82134FBCh case    5:*/		regs.R28 = regs.R5;
		/* 82134FBCh case    5:*/		return 0x82134FC0;
		  /* 82134FC0h */ case    6:  		/* mr R10, R4 */
		/* 82134FC0h case    6:*/		regs.R10 = regs.R4;
		/* 82134FC0h case    6:*/		return 0x82134FC4;
		  /* 82134FC4h */ case    7:  		/* mr R11, R23 */
		/* 82134FC4h case    7:*/		regs.R11 = regs.R23;
		/* 82134FC4h case    7:*/		return 0x82134FC8;
		  /* 82134FC8h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82134FC8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82134FC8h case    8:*/		return 0x82134FCC;
		  /* 82134FCCh */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 82134FCCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82134FE4;  }
		/* 82134FCCh case    9:*/		return 0x82134FD0;
		  /* 82134FD0h */ case   10:  		/* addi R11, R11, 1 */
		/* 82134FD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82134FD0h case   10:*/		return 0x82134FD4;
		  /* 82134FD4h */ case   11:  		/* addi R9, R10, -1 */
		/* 82134FD4h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 82134FD4h case   11:*/		return 0x82134FD8;
		  /* 82134FD8h */ case   12:  		/* cmplwi CR6, R11, 7 */
		/* 82134FD8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 82134FD8h case   12:*/		return 0x82134FDC;
		  /* 82134FDCh */ case   13:  		/* and R10, R9, R10 */
		/* 82134FDCh case   13:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82134FDCh case   13:*/		return 0x82134FE0;
		  /* 82134FE0h */ case   14:  		/* bc 12, CR6_LT, -24 */
		/* 82134FE0h case   14:*/		if ( regs.CR[6].lt ) { return 0x82134FC8;  }
		/* 82134FE0h case   14:*/		return 0x82134FE4;
	}
	return 0x82134FE4;
} // Block from 82134FA8h-82134FE4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82134FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82134FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82134FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82134FE4);
		  /* 82134FE4h */ case    0:  		/* cmplwi CR6, R11, 6 */
		/* 82134FE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82134FE4h case    0:*/		return 0x82134FE8;
		  /* 82134FE8h */ case    1:  		/* bc 12, CR6_GT, 1128 */
		/* 82134FE8h case    1:*/		if ( regs.CR[6].gt ) { return 0x82135450;  }
		/* 82134FE8h case    1:*/		return 0x82134FEC;
		  /* 82134FECh */ case    2:  		/* lwz R10, <#[R31 + 1156]> */
		/* 82134FECh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000484) );
		/* 82134FECh case    2:*/		return 0x82134FF0;
		  /* 82134FF0h */ case    3:  		/* subf R11, R11, R10 */
		/* 82134FF0h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82134FF0h case    3:*/		return 0x82134FF4;
		  /* 82134FF4h */ case    4:  		/* cmplwi CR6, R11, 6 */
		/* 82134FF4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82134FF4h case    4:*/		return 0x82134FF8;
		  /* 82134FF8h */ case    5:  		/* bc 12, CR6_GT, 1112 */
		/* 82134FF8h case    5:*/		if ( regs.CR[6].gt ) { return 0x82135450;  }
		/* 82134FF8h case    5:*/		return 0x82134FFC;
		  /* 82134FFCh */ case    6:  		/* mr R30, R23 */
		/* 82134FFCh case    6:*/		regs.R30 = regs.R23;
		/* 82134FFCh case    6:*/		return 0x82135000;
		  /* 82135000h */ case    7:  		/* mr R29, R23 */
		/* 82135000h case    7:*/		regs.R29 = regs.R23;
		/* 82135000h case    7:*/		return 0x82135004;
		  /* 82135004h */ case    8:  		/* mr R7, R23 */
		/* 82135004h case    8:*/		regs.R7 = regs.R23;
		/* 82135004h case    8:*/		return 0x82135008;
		  /* 82135008h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 82135008h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82135008h case    9:*/		return 0x8213500C;
		  /* 8213500Ch */ case   10:  		/* bc 12, CR6_EQ, 188 */
		/* 8213500Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821350C8;  }
		/* 8213500Ch case   10:*/		return 0x82135010;
		  /* 82135010h */ case   11:  		/* addi R11, R1, 112 */
		/* 82135010h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82135010h case   11:*/		return 0x82135014;
		  /* 82135014h */ case   12:  		/* lwz R6, <#[R31 + 24]> */
		/* 82135014h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000018) );
		/* 82135014h case   12:*/		return 0x82135018;
		  /* 82135018h */ case   13:  		/* addi R10, R1, 144 */
		/* 82135018h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 82135018h case   13:*/		return 0x8213501C;
		  /* 8213501Ch */ case   14:  		/* addi R5, R11, -4 */
		/* 8213501Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFC);
		/* 8213501Ch case   14:*/		return 0x82135020;
		  /* 82135020h */ case   15:  		/* addi R3, R10, -4 */
		/* 82135020h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R10,0xFFFFFFFC);
		/* 82135020h case   15:*/		return 0x82135024;
		  /* 82135024h */ case   16:  		/* addi R8, R31, 1108 */
		/* 82135024h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x454);
		/* 82135024h case   16:*/		return 0x82135028;
		  /* 82135028h */ case   17:  		/* lwz R11, <#[R8]> */
		/* 82135028h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82135028h case   17:*/		return 0x8213502C;
		  /* 8213502Ch */ case   18:  		/* li R10, 1 */
		/* 8213502Ch case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8213502Ch case   18:*/		return 0x82135030;
		  /* 82135030h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135030h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135030h case   19:*/		return 0x82135034;
		  /* 82135034h */ case   20:  		/* slw R10, R10, R7 */
		/* 82135034h case   20:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82135034h case   20:*/		return 0x82135038;
		  /* 82135038h */ case   21:  		/* lwzx R11, <#[R11 + R6]> */
		/* 82135038h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82135038h case   21:*/		return 0x8213503C;
		  /* 8213503Ch */ case   22:  		/* and. R10, R10, R4 */
		/* 8213503Ch case   22:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R4);
		/* 8213503Ch case   22:*/		return 0x82135040;
		  /* 82135040h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 82135040h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82135040h case   23:*/		return 0x82135044;
		  /* 82135044h */ case   24:  		/* rlwinm R9, R10, 0, 0, 11 */
		/* 82135044h case   24:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R10);
		/* 82135044h case   24:*/		return 0x82135048;
		  /* 82135048h */ case   25:  		/* bc 12, CR0_EQ, 28 */
		/* 82135048h case   25:*/		if ( regs.CR[0].eq ) { return 0x82135064;  }
		/* 82135048h case   25:*/		return 0x8213504C;
		  /* 8213504Ch */ case   26:  		/* lwz R10, <#[R11 + 36]> */
		/* 8213504Ch case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8213504Ch case   26:*/		return 0x82135050;
		  /* 82135050h */ case   27:  		/* cmplwi CR6, R10, 1 */
		/* 82135050h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82135050h case   27:*/		return 0x82135054;
		  /* 82135054h */ case   28:  		/* bc 12, CR6_EQ, 1020 */
		/* 82135054h case   28:*/		if ( regs.CR[6].eq ) { return 0x82135450;  }
		/* 82135054h case   28:*/		return 0x82135058;
		  /* 82135058h */ case   29:  		/* stwu R11, <#[R3 + 4]> */
		/* 82135058h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82135058h case   29:*/		return 0x8213505C;
		  /* 8213505Ch */ case   30:  		/* addi R29, R29, 1 */
		/* 8213505Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213505Ch case   30:*/		return 0x82135060;
		  /* 82135060h */ case   31:  		/* b 84 */
		/* 82135060h case   31:*/		return 0x821350B4;
		/* 82135060h case   31:*/		return 0x82135064;
	}
	return 0x82135064;
} // Block from 82134FE4h-82135064h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82135064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135064);
		  /* 82135064h */ case    0:  		/* lis R27, 4352 */
		/* 82135064h case    0:*/		cpu::op::lis<0>(regs,&regs.R27,0x1100);
		/* 82135064h case    0:*/		return 0x82135068;
		  /* 82135068h */ case    1:  		/* cmplw CR6, R9, R27 */
		/* 82135068h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R27);
		/* 82135068h case    1:*/		return 0x8213506C;
		  /* 8213506Ch */ case    2:  		/* bc 12, CR6_EQ, 996 */
		/* 8213506Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82135450;  }
		/* 8213506Ch case    2:*/		return 0x82135070;
		  /* 82135070h */ case    3:  		/* lis R27, 29200 */
		/* 82135070h case    3:*/		cpu::op::lis<0>(regs,&regs.R27,0x7210);
		/* 82135070h case    3:*/		return 0x82135074;
		  /* 82135074h */ case    4:  		/* cmplw CR6, R9, R27 */
		/* 82135074h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R27);
		/* 82135074h case    4:*/		return 0x82135078;
		  /* 82135078h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 82135078h case    5:*/		if ( regs.CR[6].eq ) { return 0x821350AC;  }
		/* 82135078h case    5:*/		return 0x8213507C;
		  /* 8213507Ch */ case    6:  		/* lwz R9, <#[R11 + 8]> */
		/* 8213507Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8213507Ch case    6:*/		return 0x82135080;
		  /* 82135080h */ case    7:  		/* rlwinm R10, R10, 2, 10, 29 */
		/* 82135080h case    7:*/		cpu::op::rlwinm<0,2,10,29>(regs,&regs.R10,regs.R10);
		/* 82135080h case    7:*/		return 0x82135084;
		  /* 82135084h */ case    8:  		/* lwz R27, <#[R31 + 20]> */
		/* 82135084h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000014) );
		/* 82135084h case    8:*/		return 0x82135088;
		  /* 82135088h */ case    9:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82135088h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82135088h case    9:*/		return 0x8213508C;
		  /* 8213508Ch */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213508Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213508Ch case   10:*/		return 0x82135090;
		  /* 82135090h */ case   11:  		/* lwzx R10, <#[R10 + R27]> */
		/* 82135090h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 82135090h case   11:*/		return 0x82135094;
		  /* 82135094h */ case   12:  		/* lbz R9, <#[R10 + 111]> */
		/* 82135094h case   12:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000006F) );
		/* 82135094h case   12:*/		return 0x82135098;
		  /* 82135098h */ case   13:  		/* cmplwi CR6, R9, 3 */
		/* 82135098h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 82135098h case   13:*/		return 0x8213509C;
		  /* 8213509Ch */ case   14:  		/* bc 4, CR6_EQ, 948 */
		/* 8213509Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x82135450;  }
		/* 8213509Ch case   14:*/		return 0x821350A0;
		  /* 821350A0h */ case   15:  		/* lwz R10, <#[R10 + 60]> */
		/* 821350A0h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 821350A0h case   15:*/		return 0x821350A4;
		  /* 821350A4h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821350A4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821350A4h case   16:*/		return 0x821350A8;
		  /* 821350A8h */ case   17:  		/* bc 4, CR6_EQ, 936 */
		/* 821350A8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82135450;  }
		/* 821350A8h case   17:*/		return 0x821350AC;
	}
	return 0x821350AC;
} // Block from 82135064h-821350ACh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821350ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821350AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821350AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821350AC);
		  /* 821350ACh */ case    0:  		/* stwu R11, <#[R5 + 4]> */
		/* 821350ACh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000004) );
		regs.R5 = (uint32)(regs.R5 + 0x00000004);
		/* 821350ACh case    0:*/		return 0x821350B0;
		  /* 821350B0h */ case    1:  		/* addi R30, R30, 1 */
		/* 821350B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821350B0h case    1:*/		return 0x821350B4;
	}
	return 0x821350B4;
} // Block from 821350ACh-821350B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821350B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821350B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821350B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821350B4);
		  /* 821350B4h */ case    0:  		/* lwz R11, <#[R31 + 1156]> */
		/* 821350B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000484) );
		/* 821350B4h case    0:*/		return 0x821350B8;
		  /* 821350B8h */ case    1:  		/* addi R7, R7, 1 */
		/* 821350B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821350B8h case    1:*/		return 0x821350BC;
		  /* 821350BCh */ case    2:  		/* addi R8, R8, 4 */
		/* 821350BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821350BCh case    2:*/		return 0x821350C0;
		  /* 821350C0h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 821350C0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 821350C0h case    3:*/		return 0x821350C4;
		  /* 821350C4h */ case    4:  		/* bc 12, CR6_LT, -156 */
		/* 821350C4h case    4:*/		if ( regs.CR[6].lt ) { return 0x82135028;  }
		/* 821350C4h case    4:*/		return 0x821350C8;
	}
	return 0x821350C8;
} // Block from 821350B4h-821350C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821350C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821350C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821350C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821350C8);
		  /* 821350C8h */ case    0:  		/* addi R10, R1, 80 */
		/* 821350C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821350C8h case    0:*/		return 0x821350CC;
		  /* 821350CCh */ case    1:  		/* lwz R4, <#[R31 + 560]> */
		/* 821350CCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 821350CCh case    1:*/		return 0x821350D0;
		  /* 821350D0h */ case    2:  		/* li R11, -1 */
		/* 821350D0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821350D0h case    2:*/		return 0x821350D4;
		  /* 821350D4h */ case    3:  		/* li R8, 0 */
		/* 821350D4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821350D4h case    3:*/		return 0x821350D8;
		  /* 821350D8h */ case    4:  		/* mr R7, R30 */
		/* 821350D8h case    4:*/		regs.R7 = regs.R30;
		/* 821350D8h case    4:*/		return 0x821350DC;
		  /* 821350DCh */ case    5:  		/* addi R6, R1, 112 */
		/* 821350DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 821350DCh case    5:*/		return 0x821350E0;
		  /* 821350E0h */ case    6:  		/* std R11, <#[R10]> */
		/* 821350E0h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821350E0h case    6:*/		return 0x821350E4;
		  /* 821350E4h */ case    7:  		/* addi R5, R1, 80 */
		/* 821350E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821350E4h case    7:*/		return 0x821350E8;
		  /* 821350E8h */ case    8:  		/* std R11, <#[R10 + 8]> */
		/* 821350E8h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821350E8h case    8:*/		return 0x821350EC;
		  /* 821350ECh */ case    9:  		/* mr R3, R31 */
		/* 821350ECh case    9:*/		regs.R3 = regs.R31;
		/* 821350ECh case    9:*/		return 0x821350F0;
		  /* 821350F0h */ case   10:  		/* std R11, <#[R10 + 16]> */
		/* 821350F0h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821350F0h case   10:*/		return 0x821350F4;
		  /* 821350F4h */ case   11:  		/* bl -924 */
		/* 821350F4h case   11:*/		regs.LR = 0x821350F8; return 0x82134D58;
		/* 821350F4h case   11:*/		return 0x821350F8;
		  /* 821350F8h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 821350F8h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821350F8h case   12:*/		return 0x821350FC;
		  /* 821350FCh */ case   13:  		/* bc 12, CR0_EQ, 852 */
		/* 821350FCh case   13:*/		if ( regs.CR[0].eq ) { return 0x82135450;  }
		/* 821350FCh case   13:*/		return 0x82135100;
		  /* 82135100h */ case   14:  		/* li R8, 0 */
		/* 82135100h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82135100h case   14:*/		return 0x82135104;
		  /* 82135104h */ case   15:  		/* lwz R4, <#[R31 + 564]> */
		/* 82135104h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82135104h case   15:*/		return 0x82135108;
		  /* 82135108h */ case   16:  		/* mr R7, R29 */
		/* 82135108h case   16:*/		regs.R7 = regs.R29;
		/* 82135108h case   16:*/		return 0x8213510C;
		  /* 8213510Ch */ case   17:  		/* addi R6, R1, 144 */
		/* 8213510Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 8213510Ch case   17:*/		return 0x82135110;
		  /* 82135110h */ case   18:  		/* addi R5, R1, 80 */
		/* 82135110h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82135110h case   18:*/		return 0x82135114;
		  /* 82135114h */ case   19:  		/* mr R3, R31 */
		/* 82135114h case   19:*/		regs.R3 = regs.R31;
		/* 82135114h case   19:*/		return 0x82135118;
		  /* 82135118h */ case   20:  		/* bl -960 */
		/* 82135118h case   20:*/		regs.LR = 0x8213511C; return 0x82134D58;
		/* 82135118h case   20:*/		return 0x8213511C;
		  /* 8213511Ch */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 8213511Ch case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213511Ch case   21:*/		return 0x82135120;
		  /* 82135120h */ case   22:  		/* bc 12, CR0_EQ, 816 */
		/* 82135120h case   22:*/		if ( regs.CR[0].eq ) { return 0x82135450;  }
		/* 82135120h case   22:*/		return 0x82135124;
		  /* 82135124h */ case   23:  		/* li R8, 1 */
		/* 82135124h case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82135124h case   23:*/		return 0x82135128;
		  /* 82135128h */ case   24:  		/* lwz R4, <#[R31 + 560]> */
		/* 82135128h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82135128h case   24:*/		return 0x8213512C;
		  /* 8213512Ch */ case   25:  		/* mr R7, R30 */
		/* 8213512Ch case   25:*/		regs.R7 = regs.R30;
		/* 8213512Ch case   25:*/		return 0x82135130;
		  /* 82135130h */ case   26:  		/* addi R6, R1, 112 */
		/* 82135130h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 82135130h case   26:*/		return 0x82135134;
		  /* 82135134h */ case   27:  		/* addi R5, R1, 80 */
		/* 82135134h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82135134h case   27:*/		return 0x82135138;
		  /* 82135138h */ case   28:  		/* mr R3, R31 */
		/* 82135138h case   28:*/		regs.R3 = regs.R31;
		/* 82135138h case   28:*/		return 0x8213513C;
		  /* 8213513Ch */ case   29:  		/* bl -996 */
		/* 8213513Ch case   29:*/		regs.LR = 0x82135140; return 0x82134D58;
		/* 8213513Ch case   29:*/		return 0x82135140;
		  /* 82135140h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 82135140h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82135140h case   30:*/		return 0x82135144;
		  /* 82135144h */ case   31:  		/* bc 12, CR0_EQ, 780 */
		/* 82135144h case   31:*/		if ( regs.CR[0].eq ) { return 0x82135450;  }
		/* 82135144h case   31:*/		return 0x82135148;
		  /* 82135148h */ case   32:  		/* li R8, 1 */
		/* 82135148h case   32:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82135148h case   32:*/		return 0x8213514C;
		  /* 8213514Ch */ case   33:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213514Ch case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213514Ch case   33:*/		return 0x82135150;
		  /* 82135150h */ case   34:  		/* mr R7, R29 */
		/* 82135150h case   34:*/		regs.R7 = regs.R29;
		/* 82135150h case   34:*/		return 0x82135154;
		  /* 82135154h */ case   35:  		/* addi R6, R1, 144 */
		/* 82135154h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 82135154h case   35:*/		return 0x82135158;
		  /* 82135158h */ case   36:  		/* addi R5, R1, 80 */
		/* 82135158h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82135158h case   36:*/		return 0x8213515C;
		  /* 8213515Ch */ case   37:  		/* mr R3, R31 */
		/* 8213515Ch case   37:*/		regs.R3 = regs.R31;
		/* 8213515Ch case   37:*/		return 0x82135160;
		  /* 82135160h */ case   38:  		/* bl -1032 */
		/* 82135160h case   38:*/		regs.LR = 0x82135164; return 0x82134D58;
		/* 82135160h case   38:*/		return 0x82135164;
		  /* 82135164h */ case   39:  		/* cmpwi CR0, R3, 0 */
		/* 82135164h case   39:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82135164h case   39:*/		return 0x82135168;
		  /* 82135168h */ case   40:  		/* bc 12, CR0_EQ, 744 */
		/* 82135168h case   40:*/		if ( regs.CR[0].eq ) { return 0x82135450;  }
		/* 82135168h case   40:*/		return 0x8213516C;
		  /* 8213516Ch */ case   41:  		/* li R8, 2 */
		/* 8213516Ch case   41:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 8213516Ch case   41:*/		return 0x82135170;
		  /* 82135170h */ case   42:  		/* lwz R4, <#[R31 + 560]> */
		/* 82135170h case   42:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82135170h case   42:*/		return 0x82135174;
		  /* 82135174h */ case   43:  		/* mr R7, R30 */
		/* 82135174h case   43:*/		regs.R7 = regs.R30;
		/* 82135174h case   43:*/		return 0x82135178;
		  /* 82135178h */ case   44:  		/* addi R6, R1, 112 */
		/* 82135178h case   44:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 82135178h case   44:*/		return 0x8213517C;
		  /* 8213517Ch */ case   45:  		/* addi R5, R1, 80 */
		/* 8213517Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213517Ch case   45:*/		return 0x82135180;
		  /* 82135180h */ case   46:  		/* mr R3, R31 */
		/* 82135180h case   46:*/		regs.R3 = regs.R31;
		/* 82135180h case   46:*/		return 0x82135184;
		  /* 82135184h */ case   47:  		/* bl -1068 */
		/* 82135184h case   47:*/		regs.LR = 0x82135188; return 0x82134D58;
		/* 82135184h case   47:*/		return 0x82135188;
		  /* 82135188h */ case   48:  		/* cmpwi CR0, R3, 0 */
		/* 82135188h case   48:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82135188h case   48:*/		return 0x8213518C;
		  /* 8213518Ch */ case   49:  		/* bc 12, CR0_EQ, 708 */
		/* 8213518Ch case   49:*/		if ( regs.CR[0].eq ) { return 0x82135450;  }
		/* 8213518Ch case   49:*/		return 0x82135190;
		  /* 82135190h */ case   50:  		/* li R8, 2 */
		/* 82135190h case   50:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 82135190h case   50:*/		return 0x82135194;
		  /* 82135194h */ case   51:  		/* lwz R4, <#[R31 + 564]> */
		/* 82135194h case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82135194h case   51:*/		return 0x82135198;
		  /* 82135198h */ case   52:  		/* mr R7, R29 */
		/* 82135198h case   52:*/		regs.R7 = regs.R29;
		/* 82135198h case   52:*/		return 0x8213519C;
		  /* 8213519Ch */ case   53:  		/* addi R6, R1, 144 */
		/* 8213519Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 8213519Ch case   53:*/		return 0x821351A0;
		  /* 821351A0h */ case   54:  		/* addi R5, R1, 80 */
		/* 821351A0h case   54:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821351A0h case   54:*/		return 0x821351A4;
		  /* 821351A4h */ case   55:  		/* mr R3, R31 */
		/* 821351A4h case   55:*/		regs.R3 = regs.R31;
		/* 821351A4h case   55:*/		return 0x821351A8;
		  /* 821351A8h */ case   56:  		/* bl -1104 */
		/* 821351A8h case   56:*/		regs.LR = 0x821351AC; return 0x82134D58;
		/* 821351A8h case   56:*/		return 0x821351AC;
		  /* 821351ACh */ case   57:  		/* cmpwi CR0, R3, 0 */
		/* 821351ACh case   57:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821351ACh case   57:*/		return 0x821351B0;
		  /* 821351B0h */ case   58:  		/* bc 12, CR0_EQ, 672 */
		/* 821351B0h case   58:*/		if ( regs.CR[0].eq ) { return 0x82135450;  }
		/* 821351B0h case   58:*/		return 0x821351B4;
		  /* 821351B4h */ case   59:  		/* li R24, 6 */
		/* 821351B4h case   59:*/		cpu::op::li<0>(regs,&regs.R24,0x6);
		/* 821351B4h case   59:*/		return 0x821351B8;
		  /* 821351B8h */ case   60:  		/* cmpwi CR6, R28, 0 */
		/* 821351B8h case   60:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821351B8h case   60:*/		return 0x821351BC;
		  /* 821351BCh */ case   61:  		/* bc 4, CR6_EQ, 644 */
		/* 821351BCh case   61:*/		if ( !regs.CR[6].eq ) { return 0x82135440;  }
		/* 821351BCh case   61:*/		return 0x821351C0;
		  /* 821351C0h */ case   62:  		/* addi R11, R1, 144 */
		/* 821351C0h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 821351C0h case   62:*/		return 0x821351C4;
		  /* 821351C4h */ case   63:  		/* addi R10, R1, 112 */
		/* 821351C4h case   63:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821351C4h case   63:*/		return 0x821351C8;
		  /* 821351C8h */ case   64:  		/* mr R25, R23 */
		/* 821351C8h case   64:*/		regs.R25 = regs.R23;
		/* 821351C8h case   64:*/		return 0x821351CC;
		  /* 821351CCh */ case   65:  		/* mr R30, R23 */
		/* 821351CCh case   65:*/		regs.R30 = regs.R23;
		/* 821351CCh case   65:*/		return 0x821351D0;
		  /* 821351D0h */ case   66:  		/* std R23, <#[R11]> */
		/* 821351D0h case   66:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 821351D0h case   66:*/		return 0x821351D4;
		  /* 821351D4h */ case   67:  		/* std R23, <#[R10]> */
		/* 821351D4h case   67:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 821351D4h case   67:*/		return 0x821351D8;
		  /* 821351D8h */ case   68:  		/* std R23, <#[R11 + 8]> */
		/* 821351D8h case   68:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R11 + 0x00000008) );
		/* 821351D8h case   68:*/		return 0x821351DC;
		  /* 821351DCh */ case   69:  		/* std R23, <#[R10 + 8]> */
		/* 821351DCh case   69:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R10 + 0x00000008) );
		/* 821351DCh case   69:*/		return 0x821351E0;
		  /* 821351E0h */ case   70:  		/* std R23, <#[R11 + 16]> */
		/* 821351E0h case   70:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R11 + 0x00000010) );
		/* 821351E0h case   70:*/		return 0x821351E4;
		  /* 821351E4h */ case   71:  		/* std R23, <#[R10 + 16]> */
		/* 821351E4h case   71:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R10 + 0x00000010) );
		/* 821351E4h case   71:*/		return 0x821351E8;
		  /* 821351E8h */ case   72:  		/* lwz R10, <#[R31 + 560]> */
		/* 821351E8h case   72:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 821351E8h case   72:*/		return 0x821351EC;
		  /* 821351ECh */ case   73:  		/* lwzx R11, <#[R30 + R10]> */
		/* 821351ECh case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 821351ECh case   73:*/		return 0x821351F0;
		  /* 821351F0h */ case   74:  		/* cmplwi CR6, R11, 0 */
		/* 821351F0h case   74:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821351F0h case   74:*/		return 0x821351F4;
		  /* 821351F4h */ case   75:  		/* bc 4, CR6_EQ, 20 */
		/* 821351F4h case   75:*/		if ( !regs.CR[6].eq ) { return 0x82135208;  }
		/* 821351F4h case   75:*/		return 0x821351F8;
		  /* 821351F8h */ case   76:  		/* lwz R9, <#[R31 + 564]> */
		/* 821351F8h case   76:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 821351F8h case   76:*/		return 0x821351FC;
		  /* 821351FCh */ case   77:  		/* lwzx R9, <#[R30 + R9]> */
		/* 821351FCh case   77:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 821351FCh case   77:*/		return 0x82135200;
		  /* 82135200h */ case   78:  		/* cmplwi CR6, R9, 0 */
		/* 82135200h case   78:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82135200h case   78:*/		return 0x82135204;
		  /* 82135204h */ case   79:  		/* bc 12, CR6_EQ, 488 */
		/* 82135204h case   79:*/		if ( regs.CR[6].eq ) { return 0x821353EC;  }
		/* 82135204h case   79:*/		return 0x82135208;
	}
	return 0x82135208;
} // Block from 821350C8h-82135208h (80 instructions)

//////////////////////////////////////////////////////
// Block at 82135208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135208);
		  /* 82135208h */ case    0:  		/* mr R27, R23 */
		/* 82135208h case    0:*/		regs.R27 = regs.R23;
		/* 82135208h case    0:*/		return 0x8213520C;
		  /* 8213520Ch */ case    1:  		/* mr R3, R23 */
		/* 8213520Ch case    1:*/		regs.R3 = regs.R23;
		/* 8213520Ch case    1:*/		return 0x82135210;
		  /* 82135210h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82135210h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135210h case    2:*/		return 0x82135214;
		  /* 82135214h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82135214h case    3:*/		if ( regs.CR[6].eq ) { return 0x82135224;  }
		/* 82135214h case    3:*/		return 0x82135218;
		  /* 82135218h */ case    4:  		/* lwzx R11, <#[R30 + R10]> */
		/* 82135218h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 82135218h case    4:*/		return 0x8213521C;
		  /* 8213521Ch */ case    5:  		/* lwz R11, <#[R11]> */
		/* 8213521Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213521Ch case    5:*/		return 0x82135220;
		  /* 82135220h */ case    6:  		/* rlwinm R3, R11, 0, 0, 11 */
		/* 82135220h case    6:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R3,regs.R11);
		/* 82135220h case    6:*/		return 0x82135224;
	}
	return 0x82135224;
} // Block from 82135208h-82135224h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82135224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135224);
		  /* 82135224h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 82135224h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82135224h case    0:*/		return 0x82135228;
		  /* 82135228h */ case    1:  		/* lwzx R9, <#[R30 + R11]> */
		/* 82135228h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82135228h case    1:*/		return 0x8213522C;
		  /* 8213522Ch */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 8213522Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8213522Ch case    2:*/		return 0x82135230;
		  /* 82135230h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82135230h case    3:*/		if ( regs.CR[6].eq ) { return 0x82135240;  }
		/* 82135230h case    3:*/		return 0x82135234;
		  /* 82135234h */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 82135234h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 82135234h case    4:*/		return 0x82135238;
		  /* 82135238h */ case    5:  		/* lwz R11, <#[R11]> */
		/* 82135238h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82135238h case    5:*/		return 0x8213523C;
		  /* 8213523Ch */ case    6:  		/* rlwinm R27, R11, 0, 0, 11 */
		/* 8213523Ch case    6:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R27,regs.R11);
		/* 8213523Ch case    6:*/		return 0x82135240;
	}
	return 0x82135240;
} // Block from 82135224h-82135240h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82135240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135240);
		  /* 82135240h */ case    0:  		/* bl -23264 */
		/* 82135240h case    0:*/		regs.LR = 0x82135244; return 0x8212F760;
		/* 82135240h case    0:*/		return 0x82135244;
		  /* 82135244h */ case    1:  		/* or. R26, R3, R3 */
		/* 82135244h case    1:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 82135244h case    1:*/		return 0x82135248;
		  /* 82135248h */ case    2:  		/* bc 4, CR0_EQ, 20 */
		/* 82135248h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8213525C;  }
		/* 82135248h case    2:*/		return 0x8213524C;
		  /* 8213524Ch */ case    3:  		/* mr R3, R27 */
		/* 8213524Ch case    3:*/		regs.R3 = regs.R27;
		/* 8213524Ch case    3:*/		return 0x82135250;
		  /* 82135250h */ case    4:  		/* bl -23280 */
		/* 82135250h case    4:*/		regs.LR = 0x82135254; return 0x8212F760;
		/* 82135250h case    4:*/		return 0x82135254;
		  /* 82135254h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82135254h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82135254h case    5:*/		return 0x82135258;
		  /* 82135258h */ case    6:  		/* bc 12, CR0_EQ, 404 */
		/* 82135258h case    6:*/		if ( regs.CR[0].eq ) { return 0x821353EC;  }
		/* 82135258h case    6:*/		return 0x8213525C;
	}
	return 0x8213525C;
} // Block from 82135240h-8213525Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213525Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213525C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213525C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213525C);
		  /* 8213525Ch */ case    0:  		/* li R29, -1 */
		/* 8213525Ch case    0:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 8213525Ch case    0:*/		return 0x82135260;
		  /* 82135260h */ case    1:  		/* cmpwi CR6, R26, 0 */
		/* 82135260h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82135260h case    1:*/		return 0x82135264;
		  /* 82135264h */ case    2:  		/* bc 12, CR6_EQ, 176 */
		/* 82135264h case    2:*/		if ( regs.CR[6].eq ) { return 0x82135314;  }
		/* 82135264h case    2:*/		return 0x82135268;
		  /* 82135268h */ case    3:  		/* lwzx R11, <#[R30 + R10]> */
		/* 82135268h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 82135268h case    3:*/		return 0x8213526C;
		  /* 8213526Ch */ case    4:  		/* mr R3, R31 */
		/* 8213526Ch case    4:*/		regs.R3 = regs.R31;
		/* 8213526Ch case    4:*/		return 0x82135270;
		  /* 82135270h */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 82135270h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82135270h case    5:*/		return 0x82135274;
		  /* 82135274h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 82135274h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82135274h case    6:*/		return 0x82135278;
		  /* 82135278h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 82135278h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82135278h case    7:*/		return 0x8213527C;
		  /* 8213527Ch */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213527Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213527Ch case    8:*/		return 0x82135280;
		  /* 82135280h */ case    9:  		/* lwzx R28, <#[R11 + R10]> */
		/* 82135280h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82135280h case    9:*/		return 0x82135284;
		  /* 82135284h */ case   10:  		/* lfd FR1, <#[R28 + 32]> */
		/* 82135284h case   10:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R28 + 0x00000020) );
		/* 82135284h case   10:*/		return 0x82135288;
		  /* 82135288h */ case   11:  		/* lwz R6, <#[R28 + 16]> */
		/* 82135288h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000010) );
		/* 82135288h case   11:*/		return 0x8213528C;
		  /* 8213528Ch */ case   12:  		/* lwz R5, <#[R28 + 12]> */
		/* 8213528Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 8213528Ch case   12:*/		return 0x82135290;
		  /* 82135290h */ case   13:  		/* lwz R4, <#[R28 + 4]> */
		/* 82135290h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000004) );
		/* 82135290h case   13:*/		return 0x82135294;
		  /* 82135294h */ case   14:  		/* bl -229484 */
		/* 82135294h case   14:*/		regs.LR = 0x82135298; return 0x820FD228;
		/* 82135294h case   14:*/		return 0x82135298;
		  /* 82135298h */ case   15:  		/* mr R29, R3 */
		/* 82135298h case   15:*/		regs.R29 = regs.R3;
		/* 82135298h case   15:*/		return 0x8213529C;
		  /* 8213529Ch */ case   16:  		/* cmpwi CR6, R3, -1 */
		/* 8213529Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213529Ch case   16:*/		return 0x821352A0;
		  /* 821352A0h */ case   17:  		/* bc 12, CR6_EQ, 432 */
		/* 821352A0h case   17:*/		if ( regs.CR[6].eq ) { return 0x82135450;  }
		/* 821352A0h case   17:*/		return 0x821352A4;
		  /* 821352A4h */ case   18:  		/* lwz R10, <#[R31 + 560]> */
		/* 821352A4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 821352A4h case   18:*/		return 0x821352A8;
		  /* 821352A8h */ case   19:  		/* mr R11, R23 */
		/* 821352A8h case   19:*/		regs.R11 = regs.R23;
		/* 821352A8h case   19:*/		return 0x821352AC;
		  /* 821352ACh */ case   20:  		/* lwzx R10, <#[R30 + R10]> */
		/* 821352ACh case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 821352ACh case   20:*/		return 0x821352B0;
		  /* 821352B0h */ case   21:  		/* lwz R10, <#[R10]> */
		/* 821352B0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821352B0h case   21:*/		return 0x821352B4;
		  /* 821352B4h */ case   22:  		/* rlwinm. R10, R10, 0, 12, 31 */
		/* 821352B4h case   22:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R10,regs.R10);
		/* 821352B4h case   22:*/		return 0x821352B8;
		  /* 821352B8h */ case   23:  		/* bc 12, CR0_EQ, 56 */
		/* 821352B8h case   23:*/		if ( regs.CR[0].eq ) { return 0x821352F0;  }
		/* 821352B8h case   23:*/		return 0x821352BC;
		  /* 821352BCh */ case   24:  		/* mr R10, R23 */
		/* 821352BCh case   24:*/		regs.R10 = regs.R23;
		/* 821352BCh case   24:*/		return 0x821352C0;
		  /* 821352C0h */ case   25:  		/* lwz R9, <#[R31 + 560]> */
		/* 821352C0h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000230) );
		/* 821352C0h case   25:*/		return 0x821352C4;
		  /* 821352C4h */ case   26:  		/* addi R11, R11, 1 */
		/* 821352C4h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821352C4h case   26:*/		return 0x821352C8;
		  /* 821352C8h */ case   27:  		/* lwzx R9, <#[R30 + R9]> */
		/* 821352C8h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 821352C8h case   27:*/		return 0x821352CC;
		  /* 821352CCh */ case   28:  		/* lwz R9, <#[R9 + 8]> */
		/* 821352CCh case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821352CCh case   28:*/		return 0x821352D0;
		  /* 821352D0h */ case   29:  		/* stwx R29, <#[R9 + R10]> */
		/* 821352D0h case   29:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821352D0h case   29:*/		return 0x821352D4;
		  /* 821352D4h */ case   30:  		/* addi R10, R10, 4 */
		/* 821352D4h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821352D4h case   30:*/		return 0x821352D8;
		  /* 821352D8h */ case   31:  		/* lwz R9, <#[R31 + 560]> */
		/* 821352D8h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000230) );
		/* 821352D8h case   31:*/		return 0x821352DC;
		  /* 821352DCh */ case   32:  		/* lwzx R9, <#[R30 + R9]> */
		/* 821352DCh case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 821352DCh case   32:*/		return 0x821352E0;
		  /* 821352E0h */ case   33:  		/* lwz R9, <#[R9]> */
		/* 821352E0h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821352E0h case   33:*/		return 0x821352E4;
		  /* 821352E4h */ case   34:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 821352E4h case   34:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 821352E4h case   34:*/		return 0x821352E8;
		  /* 821352E8h */ case   35:  		/* cmplw CR6, R11, R9 */
		/* 821352E8h case   35:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821352E8h case   35:*/		return 0x821352EC;
		  /* 821352ECh */ case   36:  		/* bc 12, CR6_LT, -44 */
		/* 821352ECh case   36:*/		if ( regs.CR[6].lt ) { return 0x821352C0;  }
		/* 821352ECh case   36:*/		return 0x821352F0;
	}
	return 0x821352F0;
} // Block from 8213525Ch-821352F0h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821352F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821352F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821352F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821352F0);
		  /* 821352F0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821352F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821352F0h case    0:*/		return 0x821352F4;
		  /* 821352F4h */ case    1:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 821352F4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 821352F4h case    1:*/		return 0x821352F8;
		  /* 821352F8h */ case    2:  		/* addi R9, R1, 144 */
		/* 821352F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 821352F8h case    2:*/		return 0x821352FC;
		  /* 821352FCh */ case    3:  		/* mr R4, R28 */
		/* 821352FCh case    3:*/		regs.R4 = regs.R28;
		/* 821352FCh case    3:*/		return 0x82135300;
		  /* 82135300h */ case    4:  		/* lwzx R22, <#[R10 + R11]> */
		/* 82135300h case    4:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82135300h case    4:*/		return 0x82135304;
		  /* 82135304h */ case    5:  		/* stwx R28, <#[R30 + R9]> */
		/* 82135304h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 82135304h case    5:*/		return 0x82135308;
		  /* 82135308h */ case    6:  		/* mr R3, R22 */
		/* 82135308h case    6:*/		regs.R3 = regs.R22;
		/* 82135308h case    6:*/		return 0x8213530C;
		  /* 8213530Ch */ case    7:  		/* bl -231268 */
		/* 8213530Ch case    7:*/		regs.LR = 0x82135310; return 0x820FCBA8;
		/* 8213530Ch case    7:*/		return 0x82135310;
		  /* 82135310h */ case    8:  		/* stw R25, <#[R22 + 12]> */
		/* 82135310h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R22 + 0x0000000C) );
		/* 82135310h case    8:*/		return 0x82135314;
	}
	return 0x82135314;
} // Block from 821352F0h-82135314h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82135314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135314);
		  /* 82135314h */ case    0:  		/* mr R3, R27 */
		/* 82135314h case    0:*/		regs.R3 = regs.R27;
		/* 82135314h case    0:*/		return 0x82135318;
		  /* 82135318h */ case    1:  		/* bl -23480 */
		/* 82135318h case    1:*/		regs.LR = 0x8213531C; return 0x8212F760;
		/* 82135318h case    1:*/		return 0x8213531C;
		  /* 8213531Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213531Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213531Ch case    2:*/		return 0x82135320;
		  /* 82135320h */ case    3:  		/* bc 12, CR0_EQ, 196 */
		/* 82135320h case    3:*/		if ( regs.CR[0].eq ) { return 0x821353E4;  }
		/* 82135320h case    3:*/		return 0x82135324;
		  /* 82135324h */ case    4:  		/* lwz R11, <#[R31 + 564]> */
		/* 82135324h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82135324h case    4:*/		return 0x82135328;
		  /* 82135328h */ case    5:  		/* cmpwi CR6, R29, -1 */
		/* 82135328h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 82135328h case    5:*/		return 0x8213532C;
		  /* 8213532Ch */ case    6:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213532Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213532Ch case    6:*/		return 0x82135330;
		  /* 82135330h */ case    7:  		/* lwzx R11, <#[R30 + R11]> */
		/* 82135330h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82135330h case    7:*/		return 0x82135334;
		  /* 82135334h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 82135334h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82135334h case    8:*/		return 0x82135338;
		  /* 82135338h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 82135338h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82135338h case    9:*/		return 0x8213533C;
		  /* 8213533Ch */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213533Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213533Ch case   10:*/		return 0x82135340;
		  /* 82135340h */ case   11:  		/* lwzx R28, <#[R11 + R10]> */
		/* 82135340h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82135340h case   11:*/		return 0x82135344;
		  /* 82135344h */ case   12:  		/* bc 4, CR6_EQ, 40 */
		/* 82135344h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213536C;  }
		/* 82135344h case   12:*/		return 0x82135348;
		  /* 82135348h */ case   13:  		/* mr R3, R31 */
		/* 82135348h case   13:*/		regs.R3 = regs.R31;
		/* 82135348h case   13:*/		return 0x8213534C;
		  /* 8213534Ch */ case   14:  		/* lfd FR1, <#[R28 + 32]> */
		/* 8213534Ch case   14:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R28 + 0x00000020) );
		/* 8213534Ch case   14:*/		return 0x82135350;
		  /* 82135350h */ case   15:  		/* lwz R6, <#[R28 + 16]> */
		/* 82135350h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000010) );
		/* 82135350h case   15:*/		return 0x82135354;
		  /* 82135354h */ case   16:  		/* lwz R5, <#[R28 + 12]> */
		/* 82135354h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 82135354h case   16:*/		return 0x82135358;
		  /* 82135358h */ case   17:  		/* lwz R4, <#[R28 + 4]> */
		/* 82135358h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000004) );
		/* 82135358h case   17:*/		return 0x8213535C;
		  /* 8213535Ch */ case   18:  		/* bl -229684 */
		/* 8213535Ch case   18:*/		regs.LR = 0x82135360; return 0x820FD228;
		/* 8213535Ch case   18:*/		return 0x82135360;
		  /* 82135360h */ case   19:  		/* mr R29, R3 */
		/* 82135360h case   19:*/		regs.R29 = regs.R3;
		/* 82135360h case   19:*/		return 0x82135364;
		  /* 82135364h */ case   20:  		/* cmpwi CR6, R3, -1 */
		/* 82135364h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82135364h case   20:*/		return 0x82135368;
		  /* 82135368h */ case   21:  		/* bc 12, CR6_EQ, 232 */
		/* 82135368h case   21:*/		if ( regs.CR[6].eq ) { return 0x82135450;  }
		/* 82135368h case   21:*/		return 0x8213536C;
	}
	return 0x8213536C;
} // Block from 82135314h-8213536Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213536Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213536C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213536C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213536C);
		  /* 8213536Ch */ case    0:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213536Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213536Ch case    0:*/		return 0x82135370;
		  /* 82135370h */ case    1:  		/* mr R11, R23 */
		/* 82135370h case    1:*/		regs.R11 = regs.R23;
		/* 82135370h case    1:*/		return 0x82135374;
		  /* 82135374h */ case    2:  		/* lwzx R10, <#[R30 + R10]> */
		/* 82135374h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 82135374h case    2:*/		return 0x82135378;
		  /* 82135378h */ case    3:  		/* lwz R10, <#[R10]> */
		/* 82135378h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82135378h case    3:*/		return 0x8213537C;
		  /* 8213537Ch */ case    4:  		/* rlwinm. R10, R10, 0, 12, 31 */
		/* 8213537Ch case    4:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R10,regs.R10);
		/* 8213537Ch case    4:*/		return 0x82135380;
		  /* 82135380h */ case    5:  		/* bc 12, CR0_EQ, 56 */
		/* 82135380h case    5:*/		if ( regs.CR[0].eq ) { return 0x821353B8;  }
		/* 82135380h case    5:*/		return 0x82135384;
		  /* 82135384h */ case    6:  		/* mr R10, R23 */
		/* 82135384h case    6:*/		regs.R10 = regs.R23;
		/* 82135384h case    6:*/		return 0x82135388;
		  /* 82135388h */ case    7:  		/* lwz R9, <#[R31 + 564]> */
		/* 82135388h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 82135388h case    7:*/		return 0x8213538C;
		  /* 8213538Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8213538Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213538Ch case    8:*/		return 0x82135390;
		  /* 82135390h */ case    9:  		/* lwzx R9, <#[R30 + R9]> */
		/* 82135390h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 82135390h case    9:*/		return 0x82135394;
		  /* 82135394h */ case   10:  		/* lwz R9, <#[R9 + 8]> */
		/* 82135394h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82135394h case   10:*/		return 0x82135398;
		  /* 82135398h */ case   11:  		/* stwx R29, <#[R9 + R10]> */
		/* 82135398h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82135398h case   11:*/		return 0x8213539C;
		  /* 8213539Ch */ case   12:  		/* addi R10, R10, 4 */
		/* 8213539Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213539Ch case   12:*/		return 0x821353A0;
		  /* 821353A0h */ case   13:  		/* lwz R9, <#[R31 + 564]> */
		/* 821353A0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 821353A0h case   13:*/		return 0x821353A4;
		  /* 821353A4h */ case   14:  		/* lwzx R9, <#[R30 + R9]> */
		/* 821353A4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 821353A4h case   14:*/		return 0x821353A8;
		  /* 821353A8h */ case   15:  		/* lwz R9, <#[R9]> */
		/* 821353A8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821353A8h case   15:*/		return 0x821353AC;
		  /* 821353ACh */ case   16:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 821353ACh case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 821353ACh case   16:*/		return 0x821353B0;
		  /* 821353B0h */ case   17:  		/* cmplw CR6, R11, R9 */
		/* 821353B0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821353B0h case   17:*/		return 0x821353B4;
		  /* 821353B4h */ case   18:  		/* bc 12, CR6_LT, -44 */
		/* 821353B4h case   18:*/		if ( regs.CR[6].lt ) { return 0x82135388;  }
		/* 821353B4h case   18:*/		return 0x821353B8;
	}
	return 0x821353B8;
} // Block from 8213536Ch-821353B8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821353B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821353B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821353B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821353B8);
		  /* 821353B8h */ case    0:  		/* addi R11, R1, 112 */
		/* 821353B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821353B8h case    0:*/		return 0x821353BC;
		  /* 821353BCh */ case    1:  		/* cmpwi CR6, R26, 0 */
		/* 821353BCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821353BCh case    1:*/		return 0x821353C0;
		  /* 821353C0h */ case    2:  		/* stwx R28, <#[R30 + R11]> */
		/* 821353C0h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821353C0h case    2:*/		return 0x821353C4;
		  /* 821353C4h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821353C4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821353E4;  }
		/* 821353C4h case    3:*/		return 0x821353C8;
		  /* 821353C8h */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 821353C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821353C8h case    4:*/		return 0x821353CC;
		  /* 821353CCh */ case    5:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 821353CCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 821353CCh case    5:*/		return 0x821353D0;
		  /* 821353D0h */ case    6:  		/* mr R4, R28 */
		/* 821353D0h case    6:*/		regs.R4 = regs.R28;
		/* 821353D0h case    6:*/		return 0x821353D4;
		  /* 821353D4h */ case    7:  		/* lwzx R28, <#[R10 + R11]> */
		/* 821353D4h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821353D4h case    7:*/		return 0x821353D8;
		  /* 821353D8h */ case    8:  		/* mr R3, R28 */
		/* 821353D8h case    8:*/		regs.R3 = regs.R28;
		/* 821353D8h case    8:*/		return 0x821353DC;
		  /* 821353DCh */ case    9:  		/* bl -231476 */
		/* 821353DCh case    9:*/		regs.LR = 0x821353E0; return 0x820FCBA8;
		/* 821353DCh case    9:*/		return 0x821353E0;
		  /* 821353E0h */ case   10:  		/* stw R25, <#[R28 + 12]> */
		/* 821353E0h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R28 + 0x0000000C) );
		/* 821353E0h case   10:*/		return 0x821353E4;
	}
	return 0x821353E4;
} // Block from 821353B8h-821353E4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821353E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821353E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821353E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821353E4);
		  /* 821353E4h */ case    0:  		/* cmpwi CR6, R29, -1 */
		/* 821353E4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 821353E4h case    0:*/		return 0x821353E8;
		  /* 821353E8h */ case    1:  		/* bc 12, CR6_EQ, 104 */
		/* 821353E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135450;  }
		/* 821353E8h case    1:*/		return 0x821353EC;
	}
	return 0x821353EC;
} // Block from 821353E4h-821353ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821353ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821353EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821353EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821353EC);
		  /* 821353ECh */ case    0:  		/* addi R30, R30, 4 */
		/* 821353ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821353ECh case    0:*/		return 0x821353F0;
		  /* 821353F0h */ case    1:  		/* addi R25, R25, 1 */
		/* 821353F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821353F0h case    1:*/		return 0x821353F4;
		  /* 821353F4h */ case    2:  		/* cmplwi CR6, R30, 24 */
		/* 821353F4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000018);
		/* 821353F4h case    2:*/		return 0x821353F8;
		  /* 821353F8h */ case    3:  		/* bc 12, CR6_LT, -528 */
		/* 821353F8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821351E8;  }
		/* 821353F8h case    3:*/		return 0x821353FC;
		  /* 821353FCh */ case    4:  		/* mr R11, R24 */
		/* 821353FCh case    4:*/		regs.R11 = regs.R24;
		/* 821353FCh case    4:*/		return 0x82135400;
		  /* 82135400h */ case    5:  		/* mtspr CTR, R24 */
		/* 82135400h case    5:*/		regs.CTR = regs.R24;
		/* 82135400h case    5:*/		return 0x82135404;
		  /* 82135404h */ case    6:  		/* mr R10, R23 */
		/* 82135404h case    6:*/		regs.R10 = regs.R23;
		/* 82135404h case    6:*/		return 0x82135408;
		  /* 82135408h */ case    7:  		/* addi R11, R1, 144 */
		/* 82135408h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 82135408h case    7:*/		return 0x8213540C;
		  /* 8213540Ch */ case    8:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213540Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213540Ch case    8:*/		return 0x82135410;
		  /* 82135410h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82135410h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135410h case    9:*/		return 0x82135414;
		  /* 82135414h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 82135414h case   10:*/		if ( regs.CR[6].eq ) { return 0x82135420;  }
		/* 82135414h case   10:*/		return 0x82135418;
		  /* 82135418h */ case   11:  		/* lwz R9, <#[R31 + 116]> */
		/* 82135418h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000074) );
		/* 82135418h case   11:*/		return 0x8213541C;
		  /* 8213541Ch */ case   12:  		/* stw R9, <#[R11 + 4]> */
		/* 8213541Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8213541Ch case   12:*/		return 0x82135420;
	}
	return 0x82135420;
} // Block from 821353ECh-82135420h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82135420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135420);
		  /* 82135420h */ case    0:  		/* addi R11, R1, 112 */
		/* 82135420h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82135420h case    0:*/		return 0x82135424;
		  /* 82135424h */ case    1:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82135424h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82135424h case    1:*/		return 0x82135428;
		  /* 82135428h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82135428h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135428h case    2:*/		return 0x8213542C;
		  /* 8213542Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8213542Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82135438;  }
		/* 8213542Ch case    3:*/		return 0x82135430;
		  /* 82135430h */ case    4:  		/* lwz R9, <#[R31 + 116]> */
		/* 82135430h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000074) );
		/* 82135430h case    4:*/		return 0x82135434;
		  /* 82135434h */ case    5:  		/* stw R9, <#[R11 + 4]> */
		/* 82135434h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82135434h case    5:*/		return 0x82135438;
	}
	return 0x82135438;
} // Block from 82135420h-82135438h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82135438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135438);
		  /* 82135438h */ case    0:  		/* addi R10, R10, 4 */
		/* 82135438h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82135438h case    0:*/		return 0x8213543C;
		  /* 8213543Ch */ case    1:  		/* bc 16, CR0_LT, -52 */
		/* 8213543Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82135408;  }
		/* 8213543Ch case    1:*/		return 0x82135440;
	}
	return 0x82135440;
} // Block from 82135438h-82135440h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82135440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135440);
		  /* 82135440h */ case    0:  		/* stw R24, <#[R31 + 548]> */
		/* 82135440h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000224) );
		/* 82135440h case    0:*/		return 0x82135444;
		  /* 82135444h */ case    1:  		/* li R3, 1 */
		/* 82135444h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82135444h case    1:*/		return 0x82135448;
		  /* 82135448h */ case    2:  		/* stw R24, <#[R31 + 552]> */
		/* 82135448h case    2:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000228) );
		/* 82135448h case    2:*/		return 0x8213544C;
		  /* 8213544Ch */ case    3:  		/* b 8 */
		/* 8213544Ch case    3:*/		return 0x82135454;
		/* 8213544Ch case    3:*/		return 0x82135450;
	}
	return 0x82135450;
} // Block from 82135440h-82135450h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135450);
		  /* 82135450h */ case    0:  		/* li R3, 0 */
		/* 82135450h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82135450h case    0:*/		return 0x82135454;
	}
	return 0x82135454;
} // Block from 82135450h-82135454h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135454);
		  /* 82135454h */ case    0:  		/* addi R1, R1, 256 */
		/* 82135454h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82135454h case    0:*/		return 0x82135458;
		  /* 82135458h */ case    1:  		/* b -672200 */
		/* 82135458h case    1:*/		return 0x82091290;
		/* 82135458h case    1:*/		return 0x8213545C;
		  /* 8213545Ch */ case    2:  		/* nop */
		/* 8213545Ch case    2:*/		cpu::op::nop();
		/* 8213545Ch case    2:*/		return 0x82135460;
	}
	return 0x82135460;
} // Block from 82135454h-82135460h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135460);
		  /* 82135460h */ case    0:  		/* mfspr R12, LR */
		/* 82135460h case    0:*/		regs.R12 = regs.LR;
		/* 82135460h case    0:*/		return 0x82135464;
		  /* 82135464h */ case    1:  		/* bl -672324 */
		/* 82135464h case    1:*/		regs.LR = 0x82135468; return 0x82091220;
		/* 82135464h case    1:*/		return 0x82135468;
		  /* 82135468h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 82135468h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 82135468h case    2:*/		return 0x8213546C;
		  /* 8213546Ch */ case    3:  		/* li R16, 0 */
		/* 8213546Ch case    3:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 8213546Ch case    3:*/		return 0x82135470;
		  /* 82135470h */ case    4:  		/* stw R4, <#[R1 + 428]> */
		/* 82135470h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000001AC) );
		/* 82135470h case    4:*/		return 0x82135474;
		  /* 82135474h */ case    5:  		/* mr R31, R3 */
		/* 82135474h case    5:*/		regs.R31 = regs.R3;
		/* 82135474h case    5:*/		return 0x82135478;
		  /* 82135478h */ case    6:  		/* stw R16, <#[R1 + 80]> */
		/* 82135478h case    6:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000050) );
		/* 82135478h case    6:*/		return 0x8213547C;
		  /* 8213547Ch */ case    7:  		/* mr R15, R16 */
		/* 8213547Ch case    7:*/		regs.R15 = regs.R16;
		/* 8213547Ch case    7:*/		return 0x82135480;
		  /* 82135480h */ case    8:  		/* mr R18, R16 */
		/* 82135480h case    8:*/		regs.R18 = regs.R16;
		/* 82135480h case    8:*/		return 0x82135484;
		  /* 82135484h */ case    9:  		/* mr R21, R16 */
		/* 82135484h case    9:*/		regs.R21 = regs.R16;
		/* 82135484h case    9:*/		return 0x82135488;
		  /* 82135488h */ case   10:  		/* li R17, -1 */
		/* 82135488h case   10:*/		cpu::op::li<0>(regs,&regs.R17,0xFFFFFFFF);
		/* 82135488h case   10:*/		return 0x8213548C;
		  /* 8213548Ch */ case   11:  		/* li R14, -1 */
		/* 8213548Ch case   11:*/		cpu::op::li<0>(regs,&regs.R14,0xFFFFFFFF);
		/* 8213548Ch case   11:*/		return 0x82135490;
		  /* 82135490h */ case   12:  		/* lwz R11, <#[R31 + 560]> */
		/* 82135490h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82135490h case   12:*/		return 0x82135494;
		  /* 82135494h */ case   13:  		/* lwzx R11, <#[R21 + R11]> */
		/* 82135494h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + regs.R11 + 0x00000000) );
		/* 82135494h case   13:*/		return 0x82135498;
		  /* 82135498h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82135498h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135498h case   14:*/		return 0x8213549C;
		  /* 8213549Ch */ case   15:  		/* bc 12, CR6_EQ, 400 */
		/* 8213549Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8213562C;  }
		/* 8213549Ch case   15:*/		return 0x821354A0;
		  /* 821354A0h */ case   16:  		/* lwz R11, <#[R11 + 12]> */
		/* 821354A0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821354A0h case   16:*/		return 0x821354A4;
		  /* 821354A4h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821354A4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821354A4h case   17:*/		return 0x821354A8;
		  /* 821354A8h */ case   18:  		/* bc 12, CR6_EQ, 388 */
		/* 821354A8h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213562C;  }
		/* 821354A8h case   18:*/		return 0x821354AC;
		  /* 821354ACh */ case   19:  		/* lwz R11, <#[R31 + 552]> */
		/* 821354ACh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 821354ACh case   19:*/		return 0x821354B0;
		  /* 821354B0h */ case   20:  		/* mr R20, R16 */
		/* 821354B0h case   20:*/		regs.R20 = regs.R16;
		/* 821354B0h case   20:*/		return 0x821354B4;
		  /* 821354B4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821354B4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821354B4h case   21:*/		return 0x821354B8;
		  /* 821354B8h */ case   22:  		/* bc 4, CR6_GT, 372 */
		/* 821354B8h case   22:*/		if ( !regs.CR[6].gt ) { return 0x8213562C;  }
		/* 821354B8h case   22:*/		return 0x821354BC;
		  /* 821354BCh */ case   23:  		/* mr R19, R16 */
		/* 821354BCh case   23:*/		regs.R19 = regs.R16;
		/* 821354BCh case   23:*/		return 0x821354C0;
		  /* 821354C0h */ case   24:  		/* lwz R24, <#[R31 + 564]> */
		/* 821354C0h case   24:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x00000234) );
		/* 821354C0h case   24:*/		return 0x821354C4;
		  /* 821354C4h */ case   25:  		/* lwzx R23, <#[R19 + R24]> */
		/* 821354C4h case   25:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R19 + regs.R24 + 0x00000000) );
		/* 821354C4h case   25:*/		return 0x821354C8;
		  /* 821354C8h */ case   26:  		/* cmplwi CR6, R23, 0 */
		/* 821354C8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821354C8h case   26:*/		return 0x821354CC;
		  /* 821354CCh */ case   27:  		/* bc 12, CR6_EQ, 332 */
		/* 821354CCh case   27:*/		if ( regs.CR[6].eq ) { return 0x82135618;  }
		/* 821354CCh case   27:*/		return 0x821354D0;
		  /* 821354D0h */ case   28:  		/* lwz R11, <#[R23]> */
		/* 821354D0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821354D0h case   28:*/		return 0x821354D4;
		  /* 821354D4h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 821354D4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821354D4h case   29:*/		return 0x821354D8;
		  /* 821354D8h */ case   30:  		/* bc 12, CR6_EQ, 320 */
		/* 821354D8h case   30:*/		if ( regs.CR[6].eq ) { return 0x82135618;  }
		/* 821354D8h case   30:*/		return 0x821354DC;
		  /* 821354DCh */ case   31:  		/* li R10, 6 */
		/* 821354DCh case   31:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 821354DCh case   31:*/		return 0x821354E0;
		  /* 821354E0h */ case   32:  		/* rlwinm. R9, R11, 0, 12, 31 */
		/* 821354E0h case   32:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R9,regs.R11);
		/* 821354E0h case   32:*/		return 0x821354E4;
		  /* 821354E4h */ case   33:  		/* subfc R11, R10, R20 */
		/* 821354E4h case   33:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R10,regs.R20);
		/* 821354E4h case   33:*/		return 0x821354E8;
		  /* 821354E8h */ case   34:  		/* mr R22, R16 */
		/* 821354E8h case   34:*/		regs.R22 = regs.R16;
		/* 821354E8h case   34:*/		return 0x821354EC;
		  /* 821354ECh */ case   35:  		/* subfe R11, R11, R11 */
		/* 821354ECh case   35:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821354ECh case   35:*/		return 0x821354F0;
		  /* 821354F0h */ case   36:  		/* rlwinm R26, R11, 0, 31, 31 */
		/* 821354F0h case   36:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R26,regs.R11);
		/* 821354F0h case   36:*/		return 0x821354F4;
		  /* 821354F4h */ case   37:  		/* bc 12, CR0_EQ, 292 */
		/* 821354F4h case   37:*/		if ( regs.CR[0].eq ) { return 0x82135618;  }
		/* 821354F4h case   37:*/		return 0x821354F8;
		  /* 821354F8h */ case   38:  		/* lwz R11, <#[R31 + 560]> */
		/* 821354F8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 821354F8h case   38:*/		return 0x821354FC;
		  /* 821354FCh */ case   39:  		/* mr R27, R16 */
		/* 821354FCh case   39:*/		regs.R27 = regs.R16;
		/* 821354FCh case   39:*/		return 0x82135500;
		  /* 82135500h */ case   40:  		/* lwz R29, <#[R23 + 4]> */
		/* 82135500h case   40:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + 0x00000004) );
		/* 82135500h case   40:*/		return 0x82135504;
		  /* 82135504h */ case   41:  		/* mr R30, R16 */
		/* 82135504h case   41:*/		regs.R30 = regs.R16;
		/* 82135504h case   41:*/		return 0x82135508;
		  /* 82135508h */ case   42:  		/* twi 6, R9, 0 */
		/* 82135508h case   42:*/		cpu::op::tw<6>(regs, 0x82135508, regs.R9, 0x00000000);
		/* 82135508h case   42:*/		return 0x8213550C;
		  /* 8213550Ch */ case   43:  		/* divwu R28, R29, R9 */
		/* 8213550Ch case   43:*/		cpu::op::divwu<0>(regs,&regs.R28,regs.R29,regs.R9);
		/* 8213550Ch case   43:*/		return 0x82135510;
		  /* 82135510h */ case   44:  		/* lwzx R6, <#[R21 + R11]> */
		/* 82135510h case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R21 + regs.R11 + 0x00000000) );
		/* 82135510h case   44:*/		return 0x82135514;
		  /* 82135514h */ case   45:  		/* lwz R11, <#[R6 + 12]> */
		/* 82135514h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x0000000C) );
		/* 82135514h case   45:*/		return 0x82135518;
		  /* 82135518h */ case   46:  		/* cmplwi CR6, R11, 0 */
		/* 82135518h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135518h case   46:*/		return 0x8213551C;
		  /* 8213551Ch */ case   47:  		/* bc 4, CR6_GT, 252 */
		/* 8213551Ch case   47:*/		if ( !regs.CR[6].gt ) { return 0x82135618;  }
		/* 8213551Ch case   47:*/		return 0x82135520;
	}
	return 0x82135520;
} // Block from 82135460h-82135520h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82135520h
// Function '?SetupDependency@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135520);
		  /* 82135520h */ case    0:  		/* lwz R11, <#[R31 + 560]> */
		/* 82135520h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82135520h case    0:*/		return 0x82135524;
		  /* 82135524h */ case    1:  		/* lwzx R11, <#[R21 + R11]> */
		/* 82135524h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + regs.R11 + 0x00000000) );
		/* 82135524h case    1:*/		return 0x82135528;
		  /* 82135528h */ case    2:  		/* lwz R25, <#[R11 + 12]> */
		/* 82135528h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x0000000C) );
		/* 82135528h case    2:*/		return 0x8213552C;
		  /* 8213552Ch */ case    3:  		/* cmplw CR6, R26, R28 */
		/* 8213552Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R28);
		/* 8213552Ch case    3:*/		return 0x82135530;
		  /* 82135530h */ case    4:  		/* bc 4, CR6_LT, 180 */
		/* 82135530h case    4:*/		if ( !regs.CR[6].lt ) { return 0x821355E4;  }
		/* 82135530h case    4:*/		return 0x82135534;
		  /* 82135534h */ case    5:  		/* mullw R5, R9, R26 */
		/* 82135534h case    5:*/		cpu::op::mullw<0>(regs,&regs.R5,regs.R9,regs.R26);
		/* 82135534h case    5:*/		return 0x82135538;
		  /* 82135538h */ case    6:  		/* subf R3, R26, R28 */
		/* 82135538h case    6:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R26,regs.R28);
		/* 82135538h case    6:*/		return 0x8213553C;
		  /* 8213553Ch */ case    7:  		/* mr R4, R16 */
		/* 8213553Ch case    7:*/		regs.R4 = regs.R16;
		/* 8213553Ch case    7:*/		return 0x82135540;
		  /* 82135540h */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 82135540h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82135540h case    8:*/		return 0x82135544;
		  /* 82135544h */ case    9:  		/* bc 12, CR6_EQ, 148 */
		/* 82135544h case    9:*/		if ( regs.CR[6].eq ) { return 0x821355D8;  }
		/* 82135544h case    9:*/		return 0x82135548;
		  /* 82135548h */ case   10:  		/* lwz R8, <#[R23 + 8]> */
		/* 82135548h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x00000008) );
		/* 82135548h case   10:*/		return 0x8213554C;
		  /* 8213554Ch */ case   11:  		/* rlwinm R7, R30, 2, 0, 29 */
		/* 8213554Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R30);
		/* 8213554Ch case   11:*/		return 0x82135550;
		  /* 82135550h */ case   12:  		/* mtspr CTR, R9 */
		/* 82135550h case   12:*/		regs.CTR = regs.R9;
		/* 82135550h case   12:*/		return 0x82135554;
		  /* 82135554h */ case   13:  		/* add R11, R5, R4 */
		/* 82135554h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R5,regs.R4);
		/* 82135554h case   13:*/		return 0x82135558;
		  /* 82135558h */ case   14:  		/* lwz R10, <#[R6 + 16]> */
		/* 82135558h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000010) );
		/* 82135558h case   14:*/		return 0x8213555C;
		  /* 8213555Ch */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213555Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213555Ch case   15:*/		return 0x82135560;
		  /* 82135560h */ case   16:  		/* stw R11, <#[R1 + 84]> */
		/* 82135560h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82135560h case   16:*/		return 0x82135564;
		  /* 82135564h */ case   17:  		/* lwzx R11, <#[R10 + R7]> */
		/* 82135564h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82135564h case   17:*/		return 0x82135568;
		  /* 82135568h */ case   18:  		/* lwz R10, <#[R1 + 84]> */
		/* 82135568h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82135568h case   18:*/		return 0x8213556C;
		  /* 8213556Ch */ case   19:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8213556Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8213556Ch case   19:*/		return 0x82135570;
		  /* 82135570h */ case   20:  		/* cmplw CR6, R10, R11 */
		/* 82135570h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82135570h case   20:*/		return 0x82135574;
		  /* 82135574h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 82135574h case   21:*/		if ( regs.CR[6].eq ) { return 0x82135594;  }
		/* 82135574h case   21:*/		return 0x82135578;
		  /* 82135578h */ case   22:  		/* lwz R14, <#[R31 + 20]> */
		/* 82135578h case   22:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R31 + 0x00000014) );
		/* 82135578h case   22:*/		return 0x8213557C;
		  /* 8213557Ch */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213557Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213557Ch case   23:*/		return 0x82135580;
		  /* 82135580h */ case   24:  		/* lwzx R10, <#[R10 + R14]> */
		/* 82135580h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R14 + 0x00000000) );
		/* 82135580h case   24:*/		return 0x82135584;
		  /* 82135584h */ case   25:  		/* li R14, -1 */
		/* 82135584h case   25:*/		cpu::op::li<0>(regs,&regs.R14,0xFFFFFFFF);
		/* 82135584h case   25:*/		return 0x82135588;
		  /* 82135588h */ case   26:  		/* lwz R10, <#[R10 + 56]> */
		/* 82135588h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 82135588h case   26:*/		return 0x8213558C;
		  /* 8213558Ch */ case   27:  		/* cmplw CR6, R10, R11 */
		/* 8213558Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213558Ch case   27:*/		return 0x82135590;
		  /* 82135590h */ case   28:  		/* bc 4, CR6_EQ, 64 */
		/* 82135590h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821355D0;  }
		/* 82135590h case   28:*/		return 0x82135594;
	}
	return 0x82135594;
} // Block from 82135520h-82135594h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82135594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135594);
		  /* 82135594h */ case    0:  		/* cmplw CR6, R20, R18 */
		/* 82135594h case    0:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R18);
		/* 82135594h case    0:*/		return 0x82135598;
		  /* 82135598h */ case    1:  		/* bc 4, CR6_GT, 56 */
		/* 82135598h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821355D0;  }
		/* 82135598h case    1:*/		return 0x8213559C;
		  /* 8213559Ch */ case    2:  		/* lwzx R11, <#[R21 + R24]> */
		/* 8213559Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + regs.R24 + 0x00000000) );
		/* 8213559Ch case    2:*/		return 0x821355A0;
		  /* 821355A0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821355A0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821355A0h case    3:*/		return 0x821355A4;
		  /* 821355A4h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 821355A4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821355D0;  }
		/* 821355A4h case    4:*/		return 0x821355A8;
		  /* 821355A8h */ case    5:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821355A8h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821355A8h case    5:*/		return 0x821355AC;
		  /* 821355ACh */ case    6:  		/* lwz R11, <#[R11]> */
		/* 821355ACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821355ACh case    6:*/		return 0x821355B0;
		  /* 821355B0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821355B0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821355B0h case    7:*/		return 0x821355B4;
		  /* 821355B4h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821355B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821355D0;  }
		/* 821355B4h case    8:*/		return 0x821355B8;
		  /* 821355B8h */ case    9:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 821355B8h case    9:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 821355B8h case    9:*/		return 0x821355BC;
		  /* 821355BCh */ case   10:  		/* lis R10, 4352 */
		/* 821355BCh case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 821355BCh case   10:*/		return 0x821355C0;
		  /* 821355C0h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 821355C0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821355C0h case   11:*/		return 0x821355C4;
		  /* 821355C4h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 821355C4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821355D0;  }
		/* 821355C4h case   12:*/		return 0x821355C8;
		  /* 821355C8h */ case   13:  		/* li R27, 1 */
		/* 821355C8h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821355C8h case   13:*/		return 0x821355CC;
		  /* 821355CCh */ case   14:  		/* mr R22, R6 */
		/* 821355CCh case   14:*/		regs.R22 = regs.R6;
		/* 821355CCh case   14:*/		return 0x821355D0;
	}
	return 0x821355D0;
} // Block from 82135594h-821355D0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821355D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821355D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821355D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821355D0);
		  /* 821355D0h */ case    0:  		/* addi R4, R4, 1 */
		/* 821355D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821355D0h case    0:*/		return 0x821355D4;
		  /* 821355D4h */ case    1:  		/* bc 16, CR0_LT, -128 */
		/* 821355D4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82135554;  }
		/* 821355D4h case    1:*/		return 0x821355D8;
	}
	return 0x821355D8;
} // Block from 821355D0h-821355D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821355D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821355D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821355D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821355D8);
		  /* 821355D8h */ case    0:  		/* addic. R3, R3, -1 */
		/* 821355D8h case    0:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0xFFFFFFFF);
		/* 821355D8h case    0:*/		return 0x821355DC;
		  /* 821355DCh */ case    1:  		/* add R5, R5, R9 */
		/* 821355DCh case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R9);
		/* 821355DCh case    1:*/		return 0x821355E0;
		  /* 821355E0h */ case    2:  		/* bc 4, CR0_EQ, -164 */
		/* 821355E0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8213553C;  }
		/* 821355E0h case    2:*/		return 0x821355E4;
	}
	return 0x821355E4;
} // Block from 821355D8h-821355E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821355E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821355E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821355E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821355E4);
		  /* 821355E4h */ case    0:  		/* addi R30, R30, 1 */
		/* 821355E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821355E4h case    0:*/		return 0x821355E8;
		  /* 821355E8h */ case    1:  		/* cmplw CR6, R30, R25 */
		/* 821355E8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 821355E8h case    1:*/		return 0x821355EC;
		  /* 821355ECh */ case    2:  		/* bc 12, CR6_LT, -192 */
		/* 821355ECh case    2:*/		if ( regs.CR[6].lt ) { return 0x8213552C;  }
		/* 821355ECh case    2:*/		return 0x821355F0;
		  /* 821355F0h */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 821355F0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821355F0h case    3:*/		return 0x821355F4;
		  /* 821355F4h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 821355F4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82135618;  }
		/* 821355F4h case    4:*/		return 0x821355F8;
		  /* 821355F8h */ case    5:  		/* lwz R10, <#[R1 + 428]> */
		/* 821355F8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001AC) );
		/* 821355F8h case    5:*/		return 0x821355FC;
		  /* 821355FCh */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821355FCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821355FCh case    6:*/		return 0x82135600;
	}
	return 0x82135600;
} // Block from 821355E4h-82135600h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82135600h
// Function '?EnumerateCombos@CPSLegacyProgram@D3DXShader@@IAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135600);
		  /* 82135600h */ case    0:  		/* bc 12, CR6_EQ, 632 */
		/* 82135600h case    0:*/		if ( regs.CR[6].eq ) { return 0x82135878;  }
		/* 82135600h case    0:*/		return 0x82135604;
		  /* 82135604h */ case    1:  		/* lwz R11, <#[R10]> */
		/* 82135604h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82135604h case    1:*/		return 0x82135608;
		  /* 82135608h */ case    2:  		/* addi R11, R11, 1 */
		/* 82135608h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82135608h case    2:*/		return 0x8213560C;
		  /* 8213560Ch */ case    3:  		/* stw R11, <#[R10]> */
		/* 8213560Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213560Ch case    3:*/		return 0x82135610;
		  /* 82135610h */ case    4:  		/* addi R11, R11, 1 */
		/* 82135610h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82135610h case    4:*/		return 0x82135614;
		  /* 82135614h */ case    5:  		/* stw R11, <#[R10]> */
		/* 82135614h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82135614h case    5:*/		return 0x82135618;
	}
	return 0x82135618;
} // Block from 82135600h-82135618h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82135618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135618);
		  /* 82135618h */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 82135618h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 82135618h case    0:*/		return 0x8213561C;
		  /* 8213561Ch */ case    1:  		/* addi R20, R20, 1 */
		/* 8213561Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 8213561Ch case    1:*/		return 0x82135620;
		  /* 82135620h */ case    2:  		/* addi R19, R19, 4 */
		/* 82135620h case    2:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 82135620h case    2:*/		return 0x82135624;
		  /* 82135624h */ case    3:  		/* cmplw CR6, R20, R11 */
		/* 82135624h case    3:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R11);
		/* 82135624h case    3:*/		return 0x82135628;
		  /* 82135628h */ case    4:  		/* bc 12, CR6_LT, -360 */
		/* 82135628h case    4:*/		if ( regs.CR[6].lt ) { return 0x821354C0;  }
		/* 82135628h case    4:*/		return 0x8213562C;
	}
	return 0x8213562C;
} // Block from 82135618h-8213562Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213562Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213562C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213562C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213562C);
		  /* 8213562Ch */ case    0:  		/* addi R21, R21, 4 */
		/* 8213562Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 8213562Ch case    0:*/		return 0x82135630;
		  /* 82135630h */ case    1:  		/* addi R18, R18, 1 */
		/* 82135630h case    1:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 82135630h case    1:*/		return 0x82135634;
		  /* 82135634h */ case    2:  		/* cmplwi CR6, R21, 24 */
		/* 82135634h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000018);
		/* 82135634h case    2:*/		return 0x82135638;
		  /* 82135638h */ case    3:  		/* bc 12, CR6_LT, -424 */
		/* 82135638h case    3:*/		if ( regs.CR[6].lt ) { return 0x82135490;  }
		/* 82135638h case    3:*/		return 0x8213563C;
		  /* 8213563Ch */ case    4:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213563Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213563Ch case    4:*/		return 0x82135640;
		  /* 82135640h */ case    5:  		/* mr R22, R16 */
		/* 82135640h case    5:*/		regs.R22 = regs.R16;
		/* 82135640h case    5:*/		return 0x82135644;
		  /* 82135644h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82135644h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135644h case    6:*/		return 0x82135648;
		  /* 82135648h */ case    7:  		/* bc 4, CR6_GT, 1824 */
		/* 82135648h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82135D68;  }
		/* 82135648h case    7:*/		return 0x8213564C;
		  /* 8213564Ch */ case    8:  		/* addi R11, R1, 176 */
		/* 8213564Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 8213564Ch case    8:*/		return 0x82135650;
		  /* 82135650h */ case    9:  		/* mr R23, R16 */
		/* 82135650h case    9:*/		regs.R23 = regs.R16;
		/* 82135650h case    9:*/		return 0x82135654;
		  /* 82135654h */ case   10:  		/* addi R24, R11, -4 */
		/* 82135654h case   10:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFFFFC);
		/* 82135654h case   10:*/		return 0x82135658;
		  /* 82135658h */ case   11:  		/* lwz R11, <#[R31 + 560]> */
		/* 82135658h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82135658h case   11:*/		return 0x8213565C;
		  /* 8213565Ch */ case   12:  		/* lwzx R11, <#[R11 + R23]> */
		/* 8213565Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 8213565Ch case   12:*/		return 0x82135660;
		  /* 82135660h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82135660h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135660h case   13:*/		return 0x82135664;
		  /* 82135664h */ case   14:  		/* bc 12, CR6_EQ, 1776 */
		/* 82135664h case   14:*/		if ( regs.CR[6].eq ) { return 0x82135D54;  }
		/* 82135664h case   14:*/		return 0x82135668;
		  /* 82135668h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 82135668h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82135668h case   15:*/		return 0x8213566C;
		  /* 8213566Ch */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 8213566Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213566Ch case   16:*/		return 0x82135670;
		  /* 82135670h */ case   17:  		/* bc 12, CR6_EQ, 1764 */
		/* 82135670h case   17:*/		if ( regs.CR[6].eq ) { return 0x82135D54;  }
		/* 82135670h case   17:*/		return 0x82135674;
		  /* 82135674h */ case   18:  		/* lwz R7, <#[R11 + 12]> */
		/* 82135674h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 82135674h case   18:*/		return 0x82135678;
		  /* 82135678h */ case   19:  		/* mr R6, R16 */
		/* 82135678h case   19:*/		regs.R6 = regs.R16;
		/* 82135678h case   19:*/		return 0x8213567C;
		  /* 8213567Ch */ case   20:  		/* mr R25, R16 */
		/* 8213567Ch case   20:*/		regs.R25 = regs.R16;
		/* 8213567Ch case   20:*/		return 0x82135680;
		  /* 82135680h */ case   21:  		/* mr R8, R16 */
		/* 82135680h case   21:*/		regs.R8 = regs.R16;
		/* 82135680h case   21:*/		return 0x82135684;
		  /* 82135684h */ case   22:  		/* cmplwi CR6, R7, 0 */
		/* 82135684h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82135684h case   22:*/		return 0x82135688;
		  /* 82135688h */ case   23:  		/* bc 12, CR6_EQ, 1740 */
		/* 82135688h case   23:*/		if ( regs.CR[6].eq ) { return 0x82135D54;  }
		/* 82135688h case   23:*/		return 0x8213568C;
		  /* 8213568Ch */ case   24:  		/* lwz R9, <#[R11 + 16]> */
		/* 8213568Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8213568Ch case   24:*/		return 0x82135690;
		  /* 82135690h */ case   25:  		/* mr R11, R16 */
		/* 82135690h case   25:*/		regs.R11 = regs.R16;
		/* 82135690h case   25:*/		return 0x82135694;
		  /* 82135694h */ case   26:  		/* lwz R30, <#[R31 + 20]> */
		/* 82135694h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 82135694h case   26:*/		return 0x82135698;
		  /* 82135698h */ case   27:  		/* lwzx R10, <#[R11 + R9]> */
		/* 82135698h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82135698h case   27:*/		return 0x8213569C;
		  /* 8213569Ch */ case   28:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 8213569Ch case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 8213569Ch case   28:*/		return 0x821356A0;
		  /* 821356A0h */ case   29:  		/* lwzx R5, <#[R5 + R30]> */
		/* 821356A0h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R30 + 0x00000000) );
		/* 821356A0h case   29:*/		return 0x821356A4;
		  /* 821356A4h */ case   30:  		/* lwz R5, <#[R5 + 16]> */
		/* 821356A4h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000010) );
		/* 821356A4h case   30:*/		return 0x821356A8;
		  /* 821356A8h */ case   31:  		/* cmplwi CR6, R5, 3 */
		/* 821356A8h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 821356A8h case   31:*/		return 0x821356AC;
		  /* 821356ACh */ case   32:  		/* bc 4, CR6_EQ, 12 */
		/* 821356ACh case   32:*/		if ( !regs.CR[6].eq ) { return 0x821356B8;  }
		/* 821356ACh case   32:*/		return 0x821356B0;
	}
	return 0x821356B0;
} // Block from 8213562Ch-821356B0h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821356B0h
// Function '?CheckDependents@CPSLegacyProgram@D3DXShader@@IAAHPAVCInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821356B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821356B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821356B0);
		  /* 821356B0h */ case    0:  		/* li R6, 1 */
		/* 821356B0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821356B0h case    0:*/		return 0x821356B4;
		  /* 821356B4h */ case    1:  		/* mr R25, R10 */
		/* 821356B4h case    1:*/		regs.R25 = regs.R10;
		/* 821356B4h case    1:*/		return 0x821356B8;
	}
	return 0x821356B8;
} // Block from 821356B0h-821356B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821356B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821356B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821356B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821356B8);
		  /* 821356B8h */ case    0:  		/* addi R8, R8, 1 */
		/* 821356B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821356B8h case    0:*/		return 0x821356BC;
		  /* 821356BCh */ case    1:  		/* addi R11, R11, 4 */
		/* 821356BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821356BCh case    1:*/		return 0x821356C0;
		  /* 821356C0h */ case    2:  		/* cmplw CR6, R8, R7 */
		/* 821356C0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821356C0h case    2:*/		return 0x821356C4;
		  /* 821356C4h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 821356C4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82135698;  }
		/* 821356C4h case    3:*/		return 0x821356C8;
		  /* 821356C8h */ case    4:  		/* cmpwi CR6, R6, 0 */
		/* 821356C8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 821356C8h case    4:*/		return 0x821356CC;
		  /* 821356CCh */ case    5:  		/* bc 12, CR6_EQ, 1672 */
		/* 821356CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82135D54;  }
		/* 821356CCh case    5:*/		return 0x821356D0;
		  /* 821356D0h */ case    6:  		/* lwz R11, <#[R31 + 552]> */
		/* 821356D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 821356D0h case    6:*/		return 0x821356D4;
		  /* 821356D4h */ case    7:  		/* mr R29, R16 */
		/* 821356D4h case    7:*/		regs.R29 = regs.R16;
		/* 821356D4h case    7:*/		return 0x821356D8;
		  /* 821356D8h */ case    8:  		/* li R3, 6 */
		/* 821356D8h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x6);
		/* 821356D8h case    8:*/		return 0x821356DC;
		  /* 821356DCh */ case    9:  		/* cmplwi CR6, R11, 6 */
		/* 821356DCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821356DCh case    9:*/		return 0x821356E0;
		  /* 821356E0h */ case   10:  		/* bc 4, CR6_GT, 160 */
		/* 821356E0h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82135780;  }
		/* 821356E0h case   10:*/		return 0x821356E4;
		  /* 821356E4h */ case   11:  		/* lwz R11, <#[R31 + 564]> */
		/* 821356E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821356E4h case   11:*/		return 0x821356E8;
		  /* 821356E8h */ case   12:  		/* addi R4, R11, 24 */
		/* 821356E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x18);
		/* 821356E8h case   12:*/		return 0x821356EC;
		  /* 821356ECh */ case   13:  		/* lwz R8, <#[R4]> */
		/* 821356ECh case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 821356ECh case   13:*/		return 0x821356F0;
		  /* 821356F0h */ case   14:  		/* cmplwi CR6, R8, 0 */
		/* 821356F0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821356F0h case   14:*/		return 0x821356F4;
		  /* 821356F4h */ case   15:  		/* bc 12, CR6_EQ, 120 */
		/* 821356F4h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213576C;  }
		/* 821356F4h case   15:*/		return 0x821356F8;
		  /* 821356F8h */ case   16:  		/* lwz R11, <#[R8]> */
		/* 821356F8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821356F8h case   16:*/		return 0x821356FC;
		  /* 821356FCh */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821356FCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821356FCh case   17:*/		return 0x82135700;
		  /* 82135700h */ case   18:  		/* bc 12, CR6_EQ, 108 */
		/* 82135700h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213576C;  }
		/* 82135700h case   18:*/		return 0x82135704;
		  /* 82135704h */ case   19:  		/* lwz R5, <#[R8 + 4]> */
		/* 82135704h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000004) );
		/* 82135704h case   19:*/		return 0x82135708;
		  /* 82135708h */ case   20:  		/* mr R6, R16 */
		/* 82135708h case   20:*/		regs.R6 = regs.R16;
		/* 82135708h case   20:*/		return 0x8213570C;
		  /* 8213570Ch */ case   21:  		/* cmplwi CR6, R5, 0 */
		/* 8213570Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213570Ch case   21:*/		return 0x82135710;
		  /* 82135710h */ case   22:  		/* bc 12, CR6_EQ, 92 */
		/* 82135710h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213576C;  }
		/* 82135710h case   22:*/		return 0x82135714;
		  /* 82135714h */ case   23:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 82135714h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 82135714h case   23:*/		return 0x82135718;
		  /* 82135718h */ case   24:  		/* lwz R7, <#[R8 + 8]> */
		/* 82135718h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000008) );
		/* 82135718h case   24:*/		return 0x8213571C;
		  /* 8213571Ch */ case   25:  		/* addi R11, R1, 112 */
		/* 8213571Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8213571Ch case   25:*/		return 0x82135720;
		  /* 82135720h */ case   26:  		/* mr R9, R16 */
		/* 82135720h case   26:*/		regs.R9 = regs.R16;
		/* 82135720h case   26:*/		return 0x82135724;
		  /* 82135724h */ case   27:  		/* add R11, R10, R11 */
		/* 82135724h case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82135724h case   27:*/		return 0x82135728;
		  /* 82135728h */ case   28:  		/* addi R10, R11, -4 */
		/* 82135728h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 82135728h case   28:*/		return 0x8213572C;
		  /* 8213572Ch */ case   29:  		/* lwzx R11, <#[R7 + R9]> */
		/* 8213572Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8213572Ch case   29:*/		return 0x82135730;
		  /* 82135730h */ case   30:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 82135730h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 82135730h case   30:*/		return 0x82135734;
		  /* 82135734h */ case   31:  		/* lwzx R28, <#[R28 + R30]> */
		/* 82135734h case   31:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + regs.R30 + 0x00000000) );
		/* 82135734h case   31:*/		return 0x82135738;
		  /* 82135738h */ case   32:  		/* lwz R28, <#[R28 + 56]> */
		/* 82135738h case   32:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000038) );
		/* 82135738h case   32:*/		return 0x8213573C;
		  /* 8213573Ch */ case   33:  		/* cmplw CR6, R28, R25 */
		/* 8213573Ch case   33:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 8213573Ch case   33:*/		return 0x82135740;
		  /* 82135740h */ case   34:  		/* bc 12, CR6_EQ, 12 */
		/* 82135740h case   34:*/		if ( regs.CR[6].eq ) { return 0x8213574C;  }
		/* 82135740h case   34:*/		return 0x82135744;
		  /* 82135744h */ case   35:  		/* cmplw CR6, R11, R25 */
		/* 82135744h case   35:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 82135744h case   35:*/		return 0x82135748;
		  /* 82135748h */ case   36:  		/* bc 4, CR6_EQ, 20 */
		/* 82135748h case   36:*/		if ( !regs.CR[6].eq ) { return 0x8213575C;  }
		/* 82135748h case   36:*/		return 0x8213574C;
	}
	return 0x8213574C;
} // Block from 821356B8h-8213574Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 8213574Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213574C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213574C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213574C);
		  /* 8213574Ch */ case    0:  		/* cmplwi CR6, R29, 16 */
		/* 8213574Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000010);
		/* 8213574Ch case    0:*/		return 0x82135750;
		  /* 82135750h */ case    1:  		/* bc 4, CR6_LT, 1592 */
		/* 82135750h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82135D88;  }
		/* 82135750h case    1:*/		return 0x82135754;
		  /* 82135754h */ case    2:  		/* stwu R8, <#[R10 + 4]> */
		/* 82135754h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82135754h case    2:*/		return 0x82135758;
		  /* 82135758h */ case    3:  		/* addi R29, R29, 1 */
		/* 82135758h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82135758h case    3:*/		return 0x8213575C;
	}
	return 0x8213575C;
} // Block from 8213574Ch-8213575Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213575Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213575C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213575C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213575C);
		  /* 8213575Ch */ case    0:  		/* addi R6, R6, 1 */
		/* 8213575Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213575Ch case    0:*/		return 0x82135760;
		  /* 82135760h */ case    1:  		/* addi R9, R9, 4 */
		/* 82135760h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82135760h case    1:*/		return 0x82135764;
		  /* 82135764h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 82135764h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 82135764h case    2:*/		return 0x82135768;
		  /* 82135768h */ case    3:  		/* bc 12, CR6_LT, -60 */
		/* 82135768h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213572C;  }
		/* 82135768h case    3:*/		return 0x8213576C;
	}
	return 0x8213576C;
} // Block from 8213575Ch-8213576Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213576Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213576C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213576C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213576C);
		  /* 8213576Ch */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213576Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213576Ch case    0:*/		return 0x82135770;
	}
	return 0x82135770;
} // Block from 8213576Ch-82135770h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135770h
// Function '?TrivialReject@CPSLegacyProgram@D3DXShader@@IAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135770);
		  /* 82135770h */ case    0:  		/* addi R3, R3, 1 */
		/* 82135770h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 82135770h case    0:*/		return 0x82135774;
		  /* 82135774h */ case    1:  		/* addi R4, R4, 4 */
		/* 82135774h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82135774h case    1:*/		return 0x82135778;
		  /* 82135778h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 82135778h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82135778h case    2:*/		return 0x8213577C;
		  /* 8213577Ch */ case    3:  		/* bc 12, CR6_LT, -144 */
		/* 8213577Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821356EC;  }
		/* 8213577Ch case    3:*/		return 0x82135780;
	}
	return 0x82135780;
} // Block from 82135770h-82135780h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135780);
		  /* 82135780h */ case    0:  		/* lwz R4, <#[R1 + 428]> */
		/* 82135780h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001AC) );
		/* 82135780h case    0:*/		return 0x82135784;
		  /* 82135784h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82135784h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82135784h case    1:*/		return 0x82135788;
		  /* 82135788h */ case    2:  		/* bc 12, CR6_EQ, 184 */
		/* 82135788h case    2:*/		if ( regs.CR[6].eq ) { return 0x82135840;  }
		/* 82135788h case    2:*/		return 0x8213578C;
		  /* 8213578Ch */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213578Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213578Ch case    3:*/		return 0x82135790;
		  /* 82135790h */ case    4:  		/* mr R5, R16 */
		/* 82135790h case    4:*/		regs.R5 = regs.R16;
		/* 82135790h case    4:*/		return 0x82135794;
		  /* 82135794h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82135794h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135794h case    5:*/		return 0x82135798;
		  /* 82135798h */ case    6:  		/* bc 4, CR6_GT, 148 */
		/* 82135798h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8213582C;  }
		/* 82135798h case    6:*/		return 0x8213579C;
		  /* 8213579Ch */ case    7:  		/* lwz R6, <#[R31 + 24]> */
		/* 8213579Ch case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000018) );
		/* 8213579Ch case    7:*/		return 0x821357A0;
		  /* 821357A0h */ case    8:  		/* lwz R11, <#[R6]> */
		/* 821357A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821357A0h case    8:*/		return 0x821357A4;
		  /* 821357A4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821357A4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821357A4h case    9:*/		return 0x821357A8;
		  /* 821357A8h */ case   10:  		/* bc 12, CR6_EQ, 112 */
		/* 821357A8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82135818;  }
		/* 821357A8h case   10:*/		return 0x821357AC;
		  /* 821357ACh */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821357ACh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821357ACh case   11:*/		return 0x821357B0;
		  /* 821357B0h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 821357B0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821357B0h case   12:*/		return 0x821357B4;
		  /* 821357B4h */ case   13:  		/* bc 12, CR6_EQ, 100 */
		/* 821357B4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82135818;  }
		/* 821357B4h case   13:*/		return 0x821357B8;
		  /* 821357B8h */ case   14:  		/* lwz R10, <#[R11 + 40]> */
		/* 821357B8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 821357B8h case   14:*/		return 0x821357BC;
		  /* 821357BCh */ case   15:  		/* cmplwi CR6, R10, 1 */
		/* 821357BCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821357BCh case   15:*/		return 0x821357C0;
		  /* 821357C0h */ case   16:  		/* bc 12, CR6_EQ, 88 */
		/* 821357C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x82135818;  }
		/* 821357C0h case   16:*/		return 0x821357C4;
		  /* 821357C4h */ case   17:  		/* lwz R7, <#[R11 + 4]> */
		/* 821357C4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821357C4h case   17:*/		return 0x821357C8;
		  /* 821357C8h */ case   18:  		/* mr R8, R16 */
		/* 821357C8h case   18:*/		regs.R8 = regs.R16;
		/* 821357C8h case   18:*/		return 0x821357CC;
		  /* 821357CCh */ case   19:  		/* cmplwi CR6, R7, 0 */
		/* 821357CCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821357CCh case   19:*/		return 0x821357D0;
		  /* 821357D0h */ case   20:  		/* bc 12, CR6_EQ, 72 */
		/* 821357D0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82135818;  }
		/* 821357D0h case   20:*/		return 0x821357D4;
		  /* 821357D4h */ case   21:  		/* lwz R9, <#[R11 + 8]> */
		/* 821357D4h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821357D4h case   21:*/		return 0x821357D8;
		  /* 821357D8h */ case   22:  		/* mr R10, R16 */
		/* 821357D8h case   22:*/		regs.R10 = regs.R16;
		/* 821357D8h case   22:*/		return 0x821357DC;
		  /* 821357DCh */ case   23:  		/* lwzx R11, <#[R9 + R10]> */
		/* 821357DCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821357DCh case   23:*/		return 0x821357E0;
		  /* 821357E0h */ case   24:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821357E0h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821357E0h case   24:*/		return 0x821357E4;
		  /* 821357E4h */ case   25:  		/* lwzx R3, <#[R3 + R30]> */
		/* 821357E4h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R30 + 0x00000000) );
		/* 821357E4h case   25:*/		return 0x821357E8;
		  /* 821357E8h */ case   26:  		/* lwz R3, <#[R3 + 56]> */
		/* 821357E8h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000038) );
		/* 821357E8h case   26:*/		return 0x821357EC;
		  /* 821357ECh */ case   27:  		/* cmplw CR6, R3, R25 */
		/* 821357ECh case   27:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R25);
		/* 821357ECh case   27:*/		return 0x821357F0;
		  /* 821357F0h */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 821357F0h case   28:*/		if ( regs.CR[6].eq ) { return 0x821357FC;  }
		/* 821357F0h case   28:*/		return 0x821357F4;
		  /* 821357F4h */ case   29:  		/* cmplw CR6, R11, R25 */
		/* 821357F4h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821357F4h case   29:*/		return 0x821357F8;
		  /* 821357F8h */ case   30:  		/* bc 4, CR6_EQ, 16 */
		/* 821357F8h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82135808;  }
		/* 821357F8h case   30:*/		return 0x821357FC;
	}
	return 0x821357FC;
} // Block from 82135780h-821357FCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821357FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821357FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821357FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821357FC);
		  /* 821357FCh */ case    0:  		/* cmplwi CR6, R29, 16 */
		/* 821357FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000010);
		/* 821357FCh case    0:*/		return 0x82135800;
		  /* 82135800h */ case    1:  		/* bc 4, CR6_LT, 1416 */
		/* 82135800h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82135D88;  }
		/* 82135800h case    1:*/		return 0x82135804;
		  /* 82135804h */ case    2:  		/* addi R29, R29, 1 */
		/* 82135804h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82135804h case    2:*/		return 0x82135808;
	}
	return 0x82135808;
} // Block from 821357FCh-82135808h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135808);
		  /* 82135808h */ case    0:  		/* addi R8, R8, 1 */
		/* 82135808h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82135808h case    0:*/		return 0x8213580C;
		  /* 8213580Ch */ case    1:  		/* addi R10, R10, 4 */
		/* 8213580Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213580Ch case    1:*/		return 0x82135810;
		  /* 82135810h */ case    2:  		/* cmplw CR6, R8, R7 */
		/* 82135810h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 82135810h case    2:*/		return 0x82135814;
		  /* 82135814h */ case    3:  		/* bc 12, CR6_LT, -56 */
		/* 82135814h case    3:*/		if ( regs.CR[6].lt ) { return 0x821357DC;  }
		/* 82135814h case    3:*/		return 0x82135818;
	}
	return 0x82135818;
} // Block from 82135808h-82135818h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135818);
		  /* 82135818h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82135818h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82135818h case    0:*/		return 0x8213581C;
		  /* 8213581Ch */ case    1:  		/* addi R5, R5, 1 */
		/* 8213581Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213581Ch case    1:*/		return 0x82135820;
		  /* 82135820h */ case    2:  		/* addi R6, R6, 4 */
		/* 82135820h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82135820h case    2:*/		return 0x82135824;
		  /* 82135824h */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 82135824h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 82135824h case    3:*/		return 0x82135828;
		  /* 82135828h */ case    4:  		/* bc 12, CR6_LT, -136 */
		/* 82135828h case    4:*/		if ( regs.CR[6].lt ) { return 0x821357A0;  }
		/* 82135828h case    4:*/		return 0x8213582C;
	}
	return 0x8213582C;
} // Block from 82135818h-8213582Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213582Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213582C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213582C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213582C);
		  /* 8213582Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8213582Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8213582Ch case    0:*/		return 0x82135830;
		  /* 82135830h */ case    1:  		/* bc 12, CR6_EQ, 1316 */
		/* 82135830h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135D54;  }
		/* 82135830h case    1:*/		return 0x82135834;
		  /* 82135834h */ case    2:  		/* lwz R11, <#[R4]> */
		/* 82135834h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82135834h case    2:*/		return 0x82135838;
		  /* 82135838h */ case    3:  		/* addi R11, R11, 1 */
		/* 82135838h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82135838h case    3:*/		return 0x8213583C;
		  /* 8213583Ch */ case    4:  		/* stw R11, <#[R4]> */
		/* 8213583Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8213583Ch case    4:*/		return 0x82135840;
	}
	return 0x82135840;
} // Block from 8213582Ch-82135840h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82135840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135840);
		  /* 82135840h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82135840h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82135840h case    0:*/		return 0x82135844;
		  /* 82135844h */ case    1:  		/* bc 12, CR6_EQ, 1296 */
		/* 82135844h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135D54;  }
		/* 82135844h case    1:*/		return 0x82135848;
		  /* 82135848h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82135848h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82135848h case    2:*/		return 0x8213584C;
		  /* 8213584Ch */ case    3:  		/* bc 4, CR6_EQ, 1288 */
		/* 8213584Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82135D54;  }
		/* 8213584Ch case    3:*/		return 0x82135850;
		  /* 82135850h */ case    4:  		/* lwz R11, <#[R31 + 1032]> */
		/* 82135850h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135850h case    4:*/		return 0x82135854;
		  /* 82135854h */ case    5:  		/* cmplwi CR6, R11, 12 */
		/* 82135854h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 82135854h case    5:*/		return 0x82135858;
		  /* 82135858h */ case    6:  		/* bc 4, CR6_LT, 1340 */
		/* 82135858h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82135D94;  }
		/* 82135858h case    6:*/		return 0x8213585C;
		  /* 8213585Ch */ case    7:  		/* li R3, 116 */
		/* 8213585Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213585Ch case    7:*/		return 0x82135860;
		  /* 82135860h */ case    8:  		/* bl -234184 */
		/* 82135860h case    8:*/		regs.LR = 0x82135864; return 0x820FC598;
		/* 82135860h case    8:*/		return 0x82135864;
		  /* 82135864h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82135864h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82135864h case    9:*/		return 0x82135868;
		  /* 82135868h */ case   10:  		/* bc 12, CR0_EQ, 776 */
		/* 82135868h case   10:*/		if ( regs.CR[0].eq ) { return 0x82135B70;  }
		/* 82135868h case   10:*/		return 0x8213586C;
		  /* 8213586Ch */ case   11:  		/* bl -235980 */
		/* 8213586Ch case   11:*/		regs.LR = 0x82135870; return 0x820FBEA0;
		/* 8213586Ch case   11:*/		return 0x82135870;
		  /* 82135870h */ case   12:  		/* mr R30, R3 */
		/* 82135870h case   12:*/		regs.R30 = regs.R3;
		/* 82135870h case   12:*/		return 0x82135874;
		  /* 82135874h */ case   13:  		/* b 768 */
		/* 82135874h case   13:*/		return 0x82135B74;
		/* 82135874h case   13:*/		return 0x82135878;
	}
	return 0x82135878;
} // Block from 82135840h-82135878h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82135878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135878);
		  /* 82135878h */ case    0:  		/* addi R11, R1, 96 */
		/* 82135878h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82135878h case    0:*/		return 0x8213587C;
		  /* 8213587Ch */ case    1:  		/* mr R30, R16 */
		/* 8213587Ch case    1:*/		regs.R30 = regs.R16;
		/* 8213587Ch case    1:*/		return 0x82135880;
		  /* 82135880h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82135880h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82135880h case    2:*/		return 0x82135884;
		  /* 82135884h */ case    3:  		/* std R17, <#[R11]> */
		/* 82135884h case    3:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 82135884h case    3:*/		return 0x82135888;
		  /* 82135888h */ case    4:  		/* std R17, <#[R11 + 8]> */
		/* 82135888h case    4:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000008) );
		/* 82135888h case    4:*/		return 0x8213588C;
		  /* 8213588Ch */ case    5:  		/* bc 12, CR6_EQ, 168 */
		/* 8213588Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82135934;  }
		/* 8213588Ch case    5:*/		return 0x82135890;
		  /* 82135890h */ case    6:  		/* lwz R4, <#[R22 + 12]> */
		/* 82135890h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + 0x0000000C) );
		/* 82135890h case    6:*/		return 0x82135894;
		  /* 82135894h */ case    7:  		/* mr R7, R16 */
		/* 82135894h case    7:*/		regs.R7 = regs.R16;
		/* 82135894h case    7:*/		return 0x82135898;
		  /* 82135898h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 82135898h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82135898h case    8:*/		return 0x8213589C;
		  /* 8213589Ch */ case    9:  		/* bc 12, CR6_EQ, 140 */
		/* 8213589Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82135928;  }
		/* 8213589Ch case    9:*/		return 0x821358A0;
		  /* 821358A0h */ case   10:  		/* lwz R9, <#[R23 + 8]> */
		/* 821358A0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000008) );
		/* 821358A0h case   10:*/		return 0x821358A4;
		  /* 821358A4h */ case   11:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 821358A4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 821358A4h case   11:*/		return 0x821358A8;
		  /* 821358A8h */ case   12:  		/* addi R11, R1, 96 */
		/* 821358A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821358A8h case   12:*/		return 0x821358AC;
		  /* 821358ACh */ case   13:  		/* lwz R6, <#[R22 + 16]> */
		/* 821358ACh case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R22 + 0x00000010) );
		/* 821358ACh case   13:*/		return 0x821358B0;
		  /* 821358B0h */ case   14:  		/* mtspr CTR, R4 */
		/* 821358B0h case   14:*/		regs.CTR = regs.R4;
		/* 821358B0h case   14:*/		return 0x821358B4;
		  /* 821358B4h */ case   15:  		/* add R11, R10, R11 */
		/* 821358B4h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821358B4h case   15:*/		return 0x821358B8;
		  /* 821358B8h */ case   16:  		/* lwzx R8, <#[R9 + R7]> */
		/* 821358B8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821358B8h case   16:*/		return 0x821358BC;
		  /* 821358BCh */ case   17:  		/* addi R5, R11, -4 */
		/* 821358BCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFC);
		/* 821358BCh case   17:*/		return 0x821358C0;
	}
	return 0x821358C0;
} // Block from 82135878h-821358C0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821358C0h
// Function '?AssignSampler@CPSLegacyProgram@D3DXShader@@IAAHPAPAVCInstruction@2@PAI0II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821358C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821358C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821358C0);
		  /* 821358C0h */ case    0:  		/* lwz R9, <#[R6]> */
		/* 821358C0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 821358C0h case    0:*/		return 0x821358C4;
		  /* 821358C4h */ case    1:  		/* cmplw CR6, R9, R8 */
		/* 821358C4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821358C4h case    1:*/		return 0x821358C8;
		  /* 821358C8h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821358C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821358E4;  }
		/* 821358C8h case    2:*/		return 0x821358CC;
		  /* 821358CCh */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 821358CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821358CCh case    3:*/		return 0x821358D0;
		  /* 821358D0h */ case    4:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 821358D0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821358D0h case    4:*/		return 0x821358D4;
		  /* 821358D4h */ case    5:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821358D4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821358D4h case    5:*/		return 0x821358D8;
		  /* 821358D8h */ case    6:  		/* lwz R11, <#[R11 + 56]> */
		/* 821358D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 821358D8h case    6:*/		return 0x821358DC;
		  /* 821358DCh */ case    7:  		/* cmplw CR6, R9, R11 */
		/* 821358DCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821358DCh case    7:*/		return 0x821358E0;
		  /* 821358E0h */ case    8:  		/* bc 4, CR6_EQ, 64 */
		/* 821358E0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82135920;  }
		/* 821358E0h case    8:*/		return 0x821358E4;
	}
	return 0x821358E4;
} // Block from 821358C0h-821358E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821358E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821358E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821358E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821358E4);
		  /* 821358E4h */ case    0:  		/* mr R11, R16 */
		/* 821358E4h case    0:*/		regs.R11 = regs.R16;
		/* 821358E4h case    0:*/		return 0x821358E8;
		  /* 821358E8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821358E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821358E8h case    1:*/		return 0x821358EC;
		  /* 821358ECh */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821358ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x82135910;  }
		/* 821358ECh case    2:*/		return 0x821358F0;
		  /* 821358F0h */ case    3:  		/* addi R10, R1, 96 */
		/* 821358F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821358F0h case    3:*/		return 0x821358F4;
		  /* 821358F4h */ case    4:  		/* lwz R3, <#[R10]> */
		/* 821358F4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000000) );
		/* 821358F4h case    4:*/		return 0x821358F8;
		  /* 821358F8h */ case    5:  		/* cmplw CR6, R3, R9 */
		/* 821358F8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 821358F8h case    5:*/		return 0x821358FC;
		  /* 821358FCh */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821358FCh case    6:*/		if ( regs.CR[6].eq ) { return 0x82135910;  }
		/* 821358FCh case    6:*/		return 0x82135900;
		  /* 82135900h */ case    7:  		/* addi R11, R11, 1 */
		/* 82135900h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82135900h case    7:*/		return 0x82135904;
		  /* 82135904h */ case    8:  		/* addi R10, R10, 4 */
		/* 82135904h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82135904h case    8:*/		return 0x82135908;
		  /* 82135908h */ case    9:  		/* cmplw CR6, R11, R30 */
		/* 82135908h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82135908h case    9:*/		return 0x8213590C;
		  /* 8213590Ch */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 8213590Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821358F4;  }
		/* 8213590Ch case   10:*/		return 0x82135910;
	}
	return 0x82135910;
} // Block from 821358E4h-82135910h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82135910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135910);
		  /* 82135910h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 82135910h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82135910h case    0:*/		return 0x82135914;
		  /* 82135914h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82135914h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82135920;  }
		/* 82135914h case    1:*/		return 0x82135918;
		  /* 82135918h */ case    2:  		/* stwu R9, <#[R5 + 4]> */
		/* 82135918h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + 0x00000004) );
		regs.R5 = (uint32)(regs.R5 + 0x00000004);
		/* 82135918h case    2:*/		return 0x8213591C;
		  /* 8213591Ch */ case    3:  		/* addi R30, R30, 1 */
		/* 8213591Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213591Ch case    3:*/		return 0x82135920;
	}
	return 0x82135920;
} // Block from 82135910h-82135920h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135920);
		  /* 82135920h */ case    0:  		/* addi R6, R6, 4 */
		/* 82135920h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82135920h case    0:*/		return 0x82135924;
		  /* 82135924h */ case    1:  		/* bc 16, CR0_LT, -100 */
		/* 82135924h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821358C0;  }
		/* 82135924h case    1:*/		return 0x82135928;
	}
	return 0x82135928;
} // Block from 82135920h-82135928h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82135928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135928);
		  /* 82135928h */ case    0:  		/* addic. R29, R29, -1 */
		/* 82135928h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82135928h case    0:*/		return 0x8213592C;
		  /* 8213592Ch */ case    1:  		/* addi R7, R7, 4 */
		/* 8213592Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8213592Ch case    1:*/		return 0x82135930;
		  /* 82135930h */ case    2:  		/* bc 4, CR0_EQ, -152 */
		/* 82135930h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82135898;  }
		/* 82135930h case    2:*/		return 0x82135934;
	}
	return 0x82135934;
} // Block from 82135928h-82135934h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135934);
		  /* 82135934h */ case    0:  		/* li R3, 116 */
		/* 82135934h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82135934h case    0:*/		return 0x82135938;
		  /* 82135938h */ case    1:  		/* bl -234400 */
		/* 82135938h case    1:*/		regs.LR = 0x8213593C; return 0x820FC598;
		/* 82135938h case    1:*/		return 0x8213593C;
		  /* 8213593Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8213593Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213593Ch case    2:*/		return 0x82135940;
		  /* 82135940h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82135940h case    3:*/		if ( regs.CR[0].eq ) { return 0x82135950;  }
		/* 82135940h case    3:*/		return 0x82135944;
		  /* 82135944h */ case    4:  		/* bl -236196 */
		/* 82135944h case    4:*/		regs.LR = 0x82135948; return 0x820FBEA0;
		/* 82135944h case    4:*/		return 0x82135948;
		  /* 82135948h */ case    5:  		/* mr R15, R3 */
		/* 82135948h case    5:*/		regs.R15 = regs.R3;
		/* 82135948h case    5:*/		return 0x8213594C;
		  /* 8213594Ch */ case    6:  		/* b 8 */
		/* 8213594Ch case    6:*/		return 0x82135954;
		/* 8213594Ch case    6:*/		return 0x82135950;
	}
	return 0x82135950;
} // Block from 82135934h-82135950h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82135950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135950);
		  /* 82135950h */ case    0:  		/* mr R15, R16 */
		/* 82135950h case    0:*/		regs.R15 = regs.R16;
		/* 82135950h case    0:*/		return 0x82135954;
	}
	return 0x82135954;
} // Block from 82135950h-82135954h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135954);
		  /* 82135954h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 82135954h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82135954h case    0:*/		return 0x82135958;
		  /* 82135958h */ case    1:  		/* bc 12, CR6_EQ, 524 */
		/* 82135958h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135B64;  }
		/* 82135958h case    1:*/		return 0x8213595C;
		  /* 8213595Ch */ case    2:  		/* li R11, 1 */
		/* 8213595Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213595Ch case    2:*/		return 0x82135960;
		  /* 82135960h */ case    3:  		/* mr R4, R30 */
		/* 82135960h case    3:*/		regs.R4 = regs.R30;
		/* 82135960h case    3:*/		return 0x82135964;
		  /* 82135964h */ case    4:  		/* li R7, 0 */
		/* 82135964h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82135964h case    4:*/		return 0x82135968;
		  /* 82135968h */ case    5:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 82135968h case    5:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 82135968h case    5:*/		return 0x8213596C;
		  /* 8213596Ch */ case    6:  		/* mr R6, R30 */
		/* 8213596Ch case    6:*/		regs.R6 = regs.R30;
		/* 8213596Ch case    6:*/		return 0x82135970;
		  /* 82135970h */ case    7:  		/* mr R5, R30 */
		/* 82135970h case    7:*/		regs.R5 = regs.R30;
		/* 82135970h case    7:*/		return 0x82135974;
		  /* 82135974h */ case    8:  		/* mr R3, R15 */
		/* 82135974h case    8:*/		regs.R3 = regs.R15;
		/* 82135974h case    8:*/		return 0x82135978;
		  /* 82135978h */ case    9:  		/* bl -234312 */
		/* 82135978h case    9:*/		regs.LR = 0x8213597C; return 0x820FC630;
		/* 82135978h case    9:*/		return 0x8213597C;
		  /* 8213597Ch */ case   10:  		/* or. R29, R3, R3 */
		/* 8213597Ch case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8213597Ch case   10:*/		return 0x82135980;
		  /* 82135980h */ case   11:  		/* bc 12, CR0_LT, 1176 */
		/* 82135980h case   11:*/		if ( regs.CR[0].lt ) { return 0x82135E18;  }
		/* 82135980h case   11:*/		return 0x82135984;
		  /* 82135984h */ case   12:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 82135984h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 82135984h case   12:*/		return 0x82135988;
		  /* 82135988h */ case   13:  		/* lwz R3, <#[R15 + 16]> */
		/* 82135988h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R15 + 0x00000010) );
		/* 82135988h case   13:*/		return 0x8213598C;
		  /* 8213598Ch */ case   14:  		/* li R4, 255 */
		/* 8213598Ch case   14:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8213598Ch case   14:*/		return 0x82135990;
		  /* 82135990h */ case   15:  		/* bl -673360 */
		/* 82135990h case   15:*/		regs.LR = 0x82135994; return 0x82091340;
		/* 82135990h case   15:*/		return 0x82135994;
		  /* 82135994h */ case   16:  		/* lwz R11, <#[R23 + 4]> */
		/* 82135994h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 82135994h case   16:*/		return 0x82135998;
		  /* 82135998h */ case   17:  		/* mr R4, R16 */
		/* 82135998h case   17:*/		regs.R4 = regs.R16;
		/* 82135998h case   17:*/		return 0x8213599C;
		  /* 8213599Ch */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8213599Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213599Ch case   18:*/		return 0x821359A0;
		  /* 821359A0h */ case   19:  		/* bc 4, CR6_GT, 380 */
		/* 821359A0h case   19:*/		if ( !regs.CR[6].gt ) { return 0x82135B1C;  }
		/* 821359A0h case   19:*/		return 0x821359A4;
		  /* 821359A4h */ case   20:  		/* lwz R11, <#[R22 + 12]> */
		/* 821359A4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000000C) );
		/* 821359A4h case   20:*/		return 0x821359A8;
		  /* 821359A8h */ case   21:  		/* mr R3, R16 */
		/* 821359A8h case   21:*/		regs.R3 = regs.R16;
		/* 821359A8h case   21:*/		return 0x821359AC;
		  /* 821359ACh */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821359ACh case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821359ACh case   22:*/		return 0x821359B0;
		  /* 821359B0h */ case   23:  		/* bc 4, CR6_GT, 348 */
		/* 821359B0h case   23:*/		if ( !regs.CR[6].gt ) { return 0x82135B0C;  }
		/* 821359B0h case   23:*/		return 0x821359B4;
		  /* 821359B4h */ case   24:  		/* rlwinm R5, R4, 2, 0, 29 */
		/* 821359B4h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R4);
		/* 821359B4h case   24:*/		return 0x821359B8;
		  /* 821359B8h */ case   25:  		/* mr R6, R16 */
		/* 821359B8h case   25:*/		regs.R6 = regs.R16;
		/* 821359B8h case   25:*/		return 0x821359BC;
		  /* 821359BCh */ case   26:  		/* lwz R11, <#[R23 + 8]> */
		/* 821359BCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821359BCh case   26:*/		return 0x821359C0;
		  /* 821359C0h */ case   27:  		/* lwz R9, <#[R22 + 16]> */
		/* 821359C0h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R22 + 0x00000010) );
		/* 821359C0h case   27:*/		return 0x821359C4;
		  /* 821359C4h */ case   28:  		/* lwz R10, <#[R31 + 20]> */
		/* 821359C4h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821359C4h case   28:*/		return 0x821359C8;
		  /* 821359C8h */ case   29:  		/* lwzx R8, <#[R5 + R11]> */
		/* 821359C8h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 821359C8h case   29:*/		return 0x821359CC;
		  /* 821359CCh */ case   30:  		/* lwzx R11, <#[R6 + R9]> */
		/* 821359CCh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 821359CCh case   30:*/		return 0x821359D0;
		  /* 821359D0h */ case   31:  		/* rlwinm R9, R8, 2, 0, 29 */
		/* 821359D0h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821359D0h case   31:*/		return 0x821359D4;
		  /* 821359D4h */ case   32:  		/* cmplw CR6, R11, R8 */
		/* 821359D4h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821359D4h case   32:*/		return 0x821359D8;
		  /* 821359D8h */ case   33:  		/* lwzx R7, <#[R9 + R10]> */
		/* 821359D8h case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821359D8h case   33:*/		return 0x821359DC;
		  /* 821359DCh */ case   34:  		/* bc 12, CR6_EQ, 16 */
		/* 821359DCh case   34:*/		if ( regs.CR[6].eq ) { return 0x821359EC;  }
		/* 821359DCh case   34:*/		return 0x821359E0;
		  /* 821359E0h */ case   35:  		/* lwz R9, <#[R7 + 56]> */
		/* 821359E0h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000038) );
		/* 821359E0h case   35:*/		return 0x821359E4;
		  /* 821359E4h */ case   36:  		/* cmplw CR6, R11, R9 */
		/* 821359E4h case   36:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821359E4h case   36:*/		return 0x821359E8;
		  /* 821359E8h */ case   37:  		/* bc 4, CR6_EQ, 272 */
		/* 821359E8h case   37:*/		if ( !regs.CR[6].eq ) { return 0x82135AF8;  }
		/* 821359E8h case   37:*/		return 0x821359EC;
	}
	return 0x821359EC;
} // Block from 82135954h-821359ECh (38 instructions)

//////////////////////////////////////////////////////
// Block at 821359ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821359EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821359EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821359EC);
		  /* 821359ECh */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821359ECh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821359ECh case    0:*/		return 0x821359F0;
		  /* 821359F0h */ case    1:  		/* lwz R29, <#[R15 + 16]> */
		/* 821359F0h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R15 + 0x00000010) );
		/* 821359F0h case    1:*/		return 0x821359F4;
		  /* 821359F4h */ case    2:  		/* divwu R9, R4, R30 */
		/* 821359F4h case    2:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R4,regs.R30);
		/* 821359F4h case    2:*/		return 0x821359F8;
		  /* 821359F8h */ case    3:  		/* twi 6, R30, 0 */
		/* 821359F8h case    3:*/		cpu::op::tw<6>(regs, 0x821359F8, regs.R30, 0x00000000);
		/* 821359F8h case    3:*/		return 0x821359FC;
		  /* 821359FCh */ case    4:  		/* mullw R8, R9, R30 */
		/* 821359FCh case    4:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R9,regs.R30);
		/* 821359FCh case    4:*/		return 0x82135A00;
		  /* 82135A00h */ case    5:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82135A00h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82135A00h case    5:*/		return 0x82135A04;
		  /* 82135A04h */ case    6:  		/* subf R11, R8, R4 */
		/* 82135A04h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R4);
		/* 82135A04h case    6:*/		return 0x82135A08;
		  /* 82135A08h */ case    7:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 82135A08h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 82135A08h case    7:*/		return 0x82135A0C;
		  /* 82135A0Ch */ case    8:  		/* lwzx R11, <#[R8 + R29]> */
		/* 82135A0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R29 + 0x00000000) );
		/* 82135A0Ch case    8:*/		return 0x82135A10;
		  /* 82135A10h */ case    9:  		/* cmpwi CR6, R11, -1 */
		/* 82135A10h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82135A10h case    9:*/		return 0x82135A14;
		  /* 82135A14h */ case   10:  		/* bc 4, CR6_EQ, 76 */
		/* 82135A14h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82135A60;  }
		/* 82135A14h case   10:*/		return 0x82135A18;
		  /* 82135A18h */ case   11:  		/* lwz R11, <#[R31 + 1036]> */
		/* 82135A18h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135A18h case   11:*/		return 0x82135A1C;
		  /* 82135A1Ch */ case   12:  		/* cmplwi CR6, R11, 64 */
		/* 82135A1Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82135A1Ch case   12:*/		return 0x82135A20;
		  /* 82135A20h */ case   13:  		/* bc 4, CR6_LT, 324 */
		/* 82135A20h case   13:*/		if ( !regs.CR[6].lt ) { return 0x82135B64;  }
		/* 82135A20h case   13:*/		return 0x82135A24;
		  /* 82135A24h */ case   14:  		/* addi R29, R11, 194 */
		/* 82135A24h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xC2);
		/* 82135A24h case   14:*/		return 0x82135A28;
		  /* 82135A28h */ case   15:  		/* lwz R28, <#[R31 + 136]> */
		/* 82135A28h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000088) );
		/* 82135A28h case   15:*/		return 0x82135A2C;
		  /* 82135A2Ch */ case   16:  		/* addi R27, R11, 1 */
		/* 82135A2Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x1);
		/* 82135A2Ch case   16:*/		return 0x82135A30;
		  /* 82135A30h */ case   17:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82135A30h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82135A30h case   17:*/		return 0x82135A34;
		  /* 82135A34h */ case   18:  		/* lwzx R11, <#[R11 + R31]> */
		/* 82135A34h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82135A34h case   18:*/		return 0x82135A38;
		  /* 82135A38h */ case   19:  		/* stw R27, <#[R31 + 1036]> */
		/* 82135A38h case   19:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135A38h case   19:*/		return 0x82135A3C;
		  /* 82135A3Ch */ case   20:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 82135A3Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 82135A3Ch case   20:*/		return 0x82135A40;
		  /* 82135A40h */ case   21:  		/* cmpwi CR6, R11, -1 */
		/* 82135A40h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82135A40h case   21:*/		return 0x82135A44;
		  /* 82135A44h */ case   22:  		/* lwzx R10, <#[R29 + R10]> */
		/* 82135A44h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 82135A44h case   22:*/		return 0x82135A48;
		  /* 82135A48h */ case   23:  		/* stw R28, <#[R10 + 4]> */
		/* 82135A48h case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000004) );
		/* 82135A48h case   23:*/		return 0x82135A4C;
		  /* 82135A4Ch */ case   24:  		/* stw R16, <#[R10 + 60]> */
		/* 82135A4Ch case   24:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R10 + 0x0000003C) );
		/* 82135A4Ch case   24:*/		return 0x82135A50;
		  /* 82135A50h */ case   25:  		/* stw R14, <#[R10 + 56]> */
		/* 82135A50h case   25:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R10 + 0x00000038) );
		/* 82135A50h case   25:*/		return 0x82135A54;
		  /* 82135A54h */ case   26:  		/* lwz R29, <#[R9 + 16]> */
		/* 82135A54h case   26:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + 0x00000010) );
		/* 82135A54h case   26:*/		return 0x82135A58;
		  /* 82135A58h */ case   27:  		/* stw R29, <#[R10 + 16]> */
		/* 82135A58h case   27:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000010) );
		/* 82135A58h case   27:*/		return 0x82135A5C;
		  /* 82135A5Ch */ case   28:  		/* bc 12, CR6_EQ, 264 */
		/* 82135A5Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x82135B64;  }
		/* 82135A5Ch case   28:*/		return 0x82135A60;
	}
	return 0x82135A60;
} // Block from 821359ECh-82135A60h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82135A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135A60);
		  /* 82135A60h */ case    0:  		/* lwz R10, <#[R22 + 16]> */
		/* 82135A60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000010) );
		/* 82135A60h case    0:*/		return 0x82135A64;
		  /* 82135A64h */ case    1:  		/* lwz R29, <#[R7 + 56]> */
		/* 82135A64h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R7 + 0x00000038) );
		/* 82135A64h case    1:*/		return 0x82135A68;
		  /* 82135A68h */ case    2:  		/* lwzx R10, <#[R6 + R10]> */
		/* 82135A68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82135A68h case    2:*/		return 0x82135A6C;
		  /* 82135A6Ch */ case    3:  		/* cmplw CR6, R10, R29 */
		/* 82135A6Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 82135A6Ch case    3:*/		return 0x82135A70;
		  /* 82135A70h */ case    4:  		/* bc 4, CR6_EQ, 88 */
		/* 82135A70h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82135AC8;  }
		/* 82135A70h case    4:*/		return 0x82135A74;
		  /* 82135A74h */ case    5:  		/* lwz R10, <#[R31 + 1036]> */
		/* 82135A74h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135A74h case    5:*/		return 0x82135A78;
		  /* 82135A78h */ case    6:  		/* cmplwi CR6, R10, 64 */
		/* 82135A78h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 82135A78h case    6:*/		return 0x82135A7C;
		  /* 82135A7Ch */ case    7:  		/* bc 4, CR6_LT, 232 */
		/* 82135A7Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x82135B64;  }
		/* 82135A7Ch case    7:*/		return 0x82135A80;
		  /* 82135A80h */ case    8:  		/* addi R29, R10, 194 */
		/* 82135A80h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xC2);
		/* 82135A80h case    8:*/		return 0x82135A84;
		  /* 82135A84h */ case    9:  		/* lwz R28, <#[R31 + 20]> */
		/* 82135A84h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 82135A84h case    9:*/		return 0x82135A88;
		  /* 82135A88h */ case   10:  		/* addi R10, R10, 1 */
		/* 82135A88h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82135A88h case   10:*/		return 0x82135A8C;
		  /* 82135A8Ch */ case   11:  		/* rlwinm R29, R29, 2, 0, 29 */
		/* 82135A8Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R29);
		/* 82135A8Ch case   11:*/		return 0x82135A90;
		  /* 82135A90h */ case   12:  		/* lwzx R29, <#[R29 + R31]> */
		/* 82135A90h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 82135A90h case   12:*/		return 0x82135A94;
		  /* 82135A94h */ case   13:  		/* stw R10, <#[R31 + 1036]> */
		/* 82135A94h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135A94h case   13:*/		return 0x82135A98;
		  /* 82135A98h */ case   14:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 82135A98h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 82135A98h case   14:*/		return 0x82135A9C;
		  /* 82135A9Ch */ case   15:  		/* lwz R9, <#[R9 + 16]> */
		/* 82135A9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 82135A9Ch case   15:*/		return 0x82135AA0;
		  /* 82135AA0h */ case   16:  		/* lwzx R10, <#[R10 + R28]> */
		/* 82135AA0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R28 + 0x00000000) );
		/* 82135AA0h case   16:*/		return 0x82135AA4;
		  /* 82135AA4h */ case   17:  		/* stw R9, <#[R10 + 16]> */
		/* 82135AA4h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82135AA4h case   17:*/		return 0x82135AA8;
		  /* 82135AA8h */ case   18:  		/* lwz R9, <#[R7 + 60]> */
		/* 82135AA8h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x0000003C) );
		/* 82135AA8h case   18:*/		return 0x82135AAC;
		  /* 82135AACh */ case   19:  		/* stw R9, <#[R10 + 60]> */
		/* 82135AACh case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x0000003C) );
		/* 82135AACh case   19:*/		return 0x82135AB0;
		  /* 82135AB0h */ case   20:  		/* stw R11, <#[R10 + 56]> */
		/* 82135AB0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000038) );
		/* 82135AB0h case   20:*/		return 0x82135AB4;
		  /* 82135AB4h */ case   21:  		/* lwz R9, <#[R31 + 136]> */
		/* 82135AB4h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000088) );
		/* 82135AB4h case   21:*/		return 0x82135AB8;
		  /* 82135AB8h */ case   22:  		/* stw R9, <#[R10 + 4]> */
		/* 82135AB8h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82135AB8h case   22:*/		return 0x82135ABC;
		  /* 82135ABCh */ case   23:  		/* lwz R10, <#[R23 + 8]> */
		/* 82135ABCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 82135ABCh case   23:*/		return 0x82135AC0;
		  /* 82135AC0h */ case   24:  		/* stwx R29, <#[R5 + R10]> */
		/* 82135AC0h case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82135AC0h case   24:*/		return 0x82135AC4;
		  /* 82135AC4h */ case   25:  		/* b 12 */
		/* 82135AC4h case   25:*/		return 0x82135AD0;
		/* 82135AC4h case   25:*/		return 0x82135AC8;
	}
	return 0x82135AC8;
} // Block from 82135A60h-82135AC8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82135AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135AC8);
		  /* 82135AC8h */ case    0:  		/* lwz R10, <#[R23 + 8]> */
		/* 82135AC8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 82135AC8h case    0:*/		return 0x82135ACC;
		  /* 82135ACCh */ case    1:  		/* stwx R11, <#[R5 + R10]> */
		/* 82135ACCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82135ACCh case    1:*/		return 0x82135AD0;
	}
	return 0x82135AD0;
} // Block from 82135AC8h-82135AD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82135AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135AD0);
		  /* 82135AD0h */ case    0:  		/* lwz R10, <#[R22 + 16]> */
		/* 82135AD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000010) );
		/* 82135AD0h case    0:*/		return 0x82135AD4;
		  /* 82135AD4h */ case    1:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 82135AD4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 82135AD4h case    1:*/		return 0x82135AD8;
		  /* 82135AD8h */ case    2:  		/* lwz R7, <#[R15 + 8]> */
		/* 82135AD8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R15 + 0x00000008) );
		/* 82135AD8h case    2:*/		return 0x82135ADC;
		  /* 82135ADCh */ case    3:  		/* lwzx R10, <#[R6 + R10]> */
		/* 82135ADCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82135ADCh case    3:*/		return 0x82135AE0;
		  /* 82135AE0h */ case    4:  		/* stwx R10, <#[R7 + R8]> */
		/* 82135AE0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82135AE0h case    4:*/		return 0x82135AE4;
		  /* 82135AE4h */ case    5:  		/* lwz R10, <#[R15 + 16]> */
		/* 82135AE4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000010) );
		/* 82135AE4h case    5:*/		return 0x82135AE8;
		  /* 82135AE8h */ case    6:  		/* stwx R11, <#[R8 + R10]> */
		/* 82135AE8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82135AE8h case    6:*/		return 0x82135AEC;
		  /* 82135AECh */ case    7:  		/* lwz R11, <#[R31 + 20]> */
		/* 82135AECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82135AECh case    7:*/		return 0x82135AF0;
		  /* 82135AF0h */ case    8:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82135AF0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82135AF0h case    8:*/		return 0x82135AF4;
		  /* 82135AF4h */ case    9:  		/* stw R16, <#[R11 + 60]> */
		/* 82135AF4h case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R11 + 0x0000003C) );
		/* 82135AF4h case    9:*/		return 0x82135AF8;
	}
	return 0x82135AF8;
} // Block from 82135AD0h-82135AF8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82135AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135AF8);
		  /* 82135AF8h */ case    0:  		/* lwz R11, <#[R22 + 12]> */
		/* 82135AF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000000C) );
		/* 82135AF8h case    0:*/		return 0x82135AFC;
		  /* 82135AFCh */ case    1:  		/* addi R3, R3, 1 */
		/* 82135AFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 82135AFCh case    1:*/		return 0x82135B00;
		  /* 82135B00h */ case    2:  		/* addi R6, R6, 4 */
		/* 82135B00h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82135B00h case    2:*/		return 0x82135B04;
		  /* 82135B04h */ case    3:  		/* cmplw CR6, R3, R11 */
		/* 82135B04h case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82135B04h case    3:*/		return 0x82135B08;
		  /* 82135B08h */ case    4:  		/* bc 12, CR6_LT, -332 */
		/* 82135B08h case    4:*/		if ( regs.CR[6].lt ) { return 0x821359BC;  }
		/* 82135B08h case    4:*/		return 0x82135B0C;
	}
	return 0x82135B0C;
} // Block from 82135AF8h-82135B0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82135B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B0C);
		  /* 82135B0Ch */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 82135B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 82135B0Ch case    0:*/		return 0x82135B10;
	}
	return 0x82135B10;
} // Block from 82135B0Ch-82135B10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135B10h
// Function '?InitialCluster@CPSLegacyProgram@D3DXShader@@IAAHKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B10);
		  /* 82135B10h */ case    0:  		/* addi R4, R4, 1 */
		/* 82135B10h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82135B10h case    0:*/		return 0x82135B14;
		  /* 82135B14h */ case    1:  		/* cmplw CR6, R4, R11 */
		/* 82135B14h case    1:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82135B14h case    1:*/		return 0x82135B18;
		  /* 82135B18h */ case    2:  		/* bc 12, CR6_LT, -372 */
		/* 82135B18h case    2:*/		if ( regs.CR[6].lt ) { return 0x821359A4;  }
		/* 82135B18h case    2:*/		return 0x82135B1C;
	}
	return 0x82135B1C;
} // Block from 82135B10h-82135B1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B1C);
		  /* 82135B1Ch */ case    0:  		/* lwz R11, <#[R31 + 548]> */
		/* 82135B1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 82135B1Ch case    0:*/		return 0x82135B20;
		  /* 82135B20h */ case    1:  		/* lwz R10, <#[R31 + 560]> */
		/* 82135B20h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 82135B20h case    1:*/		return 0x82135B24;
		  /* 82135B24h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135B24h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135B24h case    2:*/		return 0x82135B28;
		  /* 82135B28h */ case    3:  		/* stwx R15, <#[R11 + R10]> */
		/* 82135B28h case    3:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82135B28h case    3:*/		return 0x82135B2C;
		  /* 82135B2Ch */ case    4:  		/* lwz R11, <#[R31 + 548]> */
		/* 82135B2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 82135B2Ch case    4:*/		return 0x82135B30;
		  /* 82135B30h */ case    5:  		/* addi R10, R11, 1 */
		/* 82135B30h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82135B30h case    5:*/		return 0x82135B34;
		  /* 82135B34h */ case    6:  		/* lwz R11, <#[R31 + 1032]> */
		/* 82135B34h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135B34h case    6:*/		return 0x82135B38;
		  /* 82135B38h */ case    7:  		/* cmplwi CR6, R11, 12 */
		/* 82135B38h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 82135B38h case    7:*/		return 0x82135B3C;
		  /* 82135B3Ch */ case    8:  		/* stw R10, <#[R31 + 548]> */
		/* 82135B3Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000224) );
		/* 82135B3Ch case    8:*/		return 0x82135B40;
		  /* 82135B40h */ case    9:  		/* bc 4, CR6_LT, 36 */
		/* 82135B40h case    9:*/		if ( !regs.CR[6].lt ) { return 0x82135B64;  }
		/* 82135B40h case    9:*/		return 0x82135B44;
		  /* 82135B44h */ case   10:  		/* addi R11, R11, 178 */
		/* 82135B44h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB2);
		/* 82135B44h case   10:*/		return 0x82135B48;
		  /* 82135B48h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135B48h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135B48h case   11:*/		return 0x82135B4C;
		  /* 82135B4Ch */ case   12:  		/* stwx R15, <#[R11 + R31]> */
		/* 82135B4Ch case   12:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82135B4Ch case   12:*/		return 0x82135B50;
		  /* 82135B50h */ case   13:  		/* mr R15, R16 */
		/* 82135B50h case   13:*/		regs.R15 = regs.R16;
		/* 82135B50h case   13:*/		return 0x82135B54;
		  /* 82135B54h */ case   14:  		/* lwz R11, <#[R31 + 1032]> */
		/* 82135B54h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135B54h case   14:*/		return 0x82135B58;
		  /* 82135B58h */ case   15:  		/* addi R11, R11, 1 */
		/* 82135B58h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82135B58h case   15:*/		return 0x82135B5C;
		  /* 82135B5Ch */ case   16:  		/* stw R11, <#[R31 + 1032]> */
		/* 82135B5Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135B5Ch case   16:*/		return 0x82135B60;
		  /* 82135B60h */ case   17:  		/* b -1352 */
		/* 82135B60h case   17:*/		return 0x82135618;
		/* 82135B60h case   17:*/		return 0x82135B64;
	}
	return 0x82135B64;
} // Block from 82135B1Ch-82135B64h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82135B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B64);
		  /* 82135B64h */ case    0:  		/* lis R29, -32761 */
		/* 82135B64h case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 82135B64h case    0:*/		return 0x82135B68;
		  /* 82135B68h */ case    1:  		/* ori R29, R29, 14 */
		/* 82135B68h case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 82135B68h case    1:*/		return 0x82135B6C;
		  /* 82135B6Ch */ case    2:  		/* b 684 */
		/* 82135B6Ch case    2:*/		return 0x82135E18;
		/* 82135B6Ch case    2:*/		return 0x82135B70;
	}
	return 0x82135B70;
} // Block from 82135B64h-82135B70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B70);
		  /* 82135B70h */ case    0:  		/* mr R30, R16 */
		/* 82135B70h case    0:*/		regs.R30 = regs.R16;
		/* 82135B70h case    0:*/		return 0x82135B74;
	}
	return 0x82135B74;
} // Block from 82135B70h-82135B74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B74);
		  /* 82135B74h */ case    0:  		/* li R3, 116 */
		/* 82135B74h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82135B74h case    0:*/		return 0x82135B78;
		  /* 82135B78h */ case    1:  		/* bl -234976 */
		/* 82135B78h case    1:*/		regs.LR = 0x82135B7C; return 0x820FC598;
		/* 82135B78h case    1:*/		return 0x82135B7C;
		  /* 82135B7Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82135B7Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82135B7Ch case    2:*/		return 0x82135B80;
		  /* 82135B80h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82135B80h case    3:*/		if ( regs.CR[0].eq ) { return 0x82135B90;  }
		/* 82135B80h case    3:*/		return 0x82135B84;
		  /* 82135B84h */ case    4:  		/* bl -236772 */
		/* 82135B84h case    4:*/		regs.LR = 0x82135B88; return 0x820FBEA0;
		/* 82135B84h case    4:*/		return 0x82135B88;
		  /* 82135B88h */ case    5:  		/* mr R28, R3 */
		/* 82135B88h case    5:*/		regs.R28 = regs.R3;
		/* 82135B88h case    5:*/		return 0x82135B8C;
		  /* 82135B8Ch */ case    6:  		/* b 8 */
		/* 82135B8Ch case    6:*/		return 0x82135B94;
		/* 82135B8Ch case    6:*/		return 0x82135B90;
	}
	return 0x82135B90;
} // Block from 82135B74h-82135B90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82135B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B90);
		  /* 82135B90h */ case    0:  		/* mr R28, R16 */
		/* 82135B90h case    0:*/		regs.R28 = regs.R16;
		/* 82135B90h case    0:*/		return 0x82135B94;
	}
	return 0x82135B94;
} // Block from 82135B90h-82135B94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135B94);
		  /* 82135B94h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82135B94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82135B94h case    0:*/		return 0x82135B98;
		  /* 82135B98h */ case    1:  		/* bc 12, CR6_EQ, 516 */
		/* 82135B98h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135D9C;  }
		/* 82135B98h case    1:*/		return 0x82135B9C;
		  /* 82135B9Ch */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82135B9Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82135B9Ch case    2:*/		return 0x82135BA0;
		  /* 82135BA0h */ case    3:  		/* bc 12, CR6_EQ, 508 */
		/* 82135BA0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82135D9C;  }
		/* 82135BA0h case    3:*/		return 0x82135BA4;
		  /* 82135BA4h */ case    4:  		/* lwz R11, <#[R31 + 1036]> */
		/* 82135BA4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135BA4h case    4:*/		return 0x82135BA8;
		  /* 82135BA8h */ case    5:  		/* cmplwi CR6, R11, 64 */
		/* 82135BA8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82135BA8h case    5:*/		return 0x82135BAC;
		  /* 82135BACh */ case    6:  		/* bc 12, CR6_GT, 496 */
		/* 82135BACh case    6:*/		if ( regs.CR[6].gt ) { return 0x82135D9C;  }
		/* 82135BACh case    6:*/		return 0x82135BB0;
		  /* 82135BB0h */ case    7:  		/* addi R10, R11, 195 */
		/* 82135BB0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xC3);
		/* 82135BB0h case    7:*/		return 0x82135BB4;
		  /* 82135BB4h */ case    8:  		/* lwz R9, <#[R31 + 20]> */
		/* 82135BB4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82135BB4h case    8:*/		return 0x82135BB8;
		  /* 82135BB8h */ case    9:  		/* addi R11, R11, 194 */
		/* 82135BB8h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC2);
		/* 82135BB8h case    9:*/		return 0x82135BBC;
		  /* 82135BBCh */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82135BBCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82135BBCh case   10:*/		return 0x82135BC0;
		  /* 82135BC0h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135BC0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135BC0h case   11:*/		return 0x82135BC4;
		  /* 82135BC4h */ case   12:  		/* li R8, 3 */
		/* 82135BC4h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 82135BC4h case   12:*/		return 0x82135BC8;
		  /* 82135BC8h */ case   13:  		/* li R7, 4 */
		/* 82135BC8h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82135BC8h case   13:*/		return 0x82135BCC;
		  /* 82135BCCh */ case   14:  		/* cmplwi CR6, R29, 0 */
		/* 82135BCCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82135BCCh case   14:*/		return 0x82135BD0;
		  /* 82135BD0h */ case   15:  		/* lwzx R26, <#[R10 + R31]> */
		/* 82135BD0h case   15:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 82135BD0h case   15:*/		return 0x82135BD4;
		  /* 82135BD4h */ case   16:  		/* lwzx R27, <#[R11 + R31]> */
		/* 82135BD4h case   16:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82135BD4h case   16:*/		return 0x82135BD8;
		  /* 82135BD8h */ case   17:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 82135BD8h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 82135BD8h case   17:*/		return 0x82135BDC;
		  /* 82135BDCh */ case   18:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 82135BDCh case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 82135BDCh case   18:*/		return 0x82135BE0;
		  /* 82135BE0h */ case   19:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82135BE0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82135BE0h case   19:*/		return 0x82135BE4;
		  /* 82135BE4h */ case   20:  		/* stw R16, <#[R11 + 60]> */
		/* 82135BE4h case   20:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R11 + 0x0000003C) );
		/* 82135BE4h case   20:*/		return 0x82135BE8;
		  /* 82135BE8h */ case   21:  		/* stw R8, <#[R11 + 16]> */
		/* 82135BE8h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 82135BE8h case   21:*/		return 0x82135BEC;
		  /* 82135BECh */ case   22:  		/* stw R14, <#[R11 + 56]> */
		/* 82135BECh case   22:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R11 + 0x00000038) );
		/* 82135BECh case   22:*/		return 0x82135BF0;
		  /* 82135BF0h */ case   23:  		/* lwz R11, <#[R31 + 20]> */
		/* 82135BF0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82135BF0h case   23:*/		return 0x82135BF4;
		  /* 82135BF4h */ case   24:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82135BF4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82135BF4h case   24:*/		return 0x82135BF8;
		  /* 82135BF8h */ case   25:  		/* stw R7, <#[R11 + 16]> */
		/* 82135BF8h case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82135BF8h case   25:*/		return 0x82135BFC;
		  /* 82135BFCh */ case   26:  		/* stw R16, <#[R11 + 60]> */
		/* 82135BFCh case   26:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R11 + 0x0000003C) );
		/* 82135BFCh case   26:*/		return 0x82135C00;
		  /* 82135C00h */ case   27:  		/* stw R14, <#[R11 + 56]> */
		/* 82135C00h case   27:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R11 + 0x00000038) );
		/* 82135C00h case   27:*/		return 0x82135C04;
		  /* 82135C04h */ case   28:  		/* lwz R11, <#[R31 + 1036]> */
		/* 82135C04h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135C04h case   28:*/		return 0x82135C08;
		  /* 82135C08h */ case   29:  		/* addi R11, R11, 2 */
		/* 82135C08h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82135C08h case   29:*/		return 0x82135C0C;
		  /* 82135C0Ch */ case   30:  		/* stw R11, <#[R31 + 1036]> */
		/* 82135C0Ch case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000040C) );
		/* 82135C0Ch case   30:*/		return 0x82135C10;
		  /* 82135C10h */ case   31:  		/* bc 12, CR6_EQ, 116 */
		/* 82135C10h case   31:*/		if ( regs.CR[6].eq ) { return 0x82135C84;  }
		/* 82135C10h case   31:*/		return 0x82135C14;
		  /* 82135C14h */ case   32:  		/* addi R5, R1, 112 */
		/* 82135C14h case   32:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82135C14h case   32:*/		return 0x82135C18;
		  /* 82135C18h */ case   33:  		/* mtspr CTR, R29 */
		/* 82135C18h case   33:*/		regs.CTR = regs.R29;
		/* 82135C18h case   33:*/		return 0x82135C1C;
		  /* 82135C1Ch */ case   34:  		/* lwz R7, <#[R5]> */
		/* 82135C1Ch case   34:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000000) );
		/* 82135C1Ch case   34:*/		return 0x82135C20;
		  /* 82135C20h */ case   35:  		/* mr R6, R16 */
		/* 82135C20h case   35:*/		regs.R6 = regs.R16;
		/* 82135C20h case   35:*/		return 0x82135C24;
		  /* 82135C24h */ case   36:  		/* lwz R11, <#[R7 + 4]> */
		/* 82135C24h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 82135C24h case   36:*/		return 0x82135C28;
		  /* 82135C28h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 82135C28h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135C28h case   37:*/		return 0x82135C2C;
		  /* 82135C2Ch */ case   38:  		/* bc 4, CR6_GT, 80 */
		/* 82135C2Ch case   38:*/		if ( !regs.CR[6].gt ) { return 0x82135C7C;  }
		/* 82135C2Ch case   38:*/		return 0x82135C30;
		  /* 82135C30h */ case   39:  		/* mr R8, R16 */
		/* 82135C30h case   39:*/		regs.R8 = regs.R16;
		/* 82135C30h case   39:*/		return 0x82135C34;
		  /* 82135C34h */ case   40:  		/* lwz R9, <#[R7 + 8]> */
		/* 82135C34h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000008) );
		/* 82135C34h case   40:*/		return 0x82135C38;
		  /* 82135C38h */ case   41:  		/* lwz R10, <#[R31 + 20]> */
		/* 82135C38h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82135C38h case   41:*/		return 0x82135C3C;
		  /* 82135C3Ch */ case   42:  		/* lwzx R11, <#[R9 + R8]> */
		/* 82135C3Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82135C3Ch case   42:*/		return 0x82135C40;
		  /* 82135C40h */ case   43:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 82135C40h case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 82135C40h case   43:*/		return 0x82135C44;
		  /* 82135C44h */ case   44:  		/* lwzx R10, <#[R4 + R10]> */
		/* 82135C44h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 82135C44h case   44:*/		return 0x82135C48;
		  /* 82135C48h */ case   45:  		/* lwz R4, <#[R10 + 56]> */
		/* 82135C48h case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000038) );
		/* 82135C48h case   45:*/		return 0x82135C4C;
		  /* 82135C4Ch */ case   46:  		/* cmplw CR6, R4, R25 */
		/* 82135C4Ch case   46:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R25);
		/* 82135C4Ch case   46:*/		return 0x82135C50;
		  /* 82135C50h */ case   47:  		/* bc 4, CR6_EQ, 12 */
		/* 82135C50h case   47:*/		if ( !regs.CR[6].eq ) { return 0x82135C5C;  }
		/* 82135C50h case   47:*/		return 0x82135C54;
		  /* 82135C54h */ case   48:  		/* stw R26, <#[R10 + 56]> */
		/* 82135C54h case   48:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R10 + 0x00000038) );
		/* 82135C54h case   48:*/		return 0x82135C58;
		  /* 82135C58h */ case   49:  		/* b 16 */
		/* 82135C58h case   49:*/		return 0x82135C68;
		/* 82135C58h case   49:*/		return 0x82135C5C;
	}
	return 0x82135C5C;
} // Block from 82135B94h-82135C5Ch (50 instructions)

//////////////////////////////////////////////////////
// Block at 82135C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135C5C);
		  /* 82135C5Ch */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 82135C5Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 82135C5Ch case    0:*/		return 0x82135C60;
		  /* 82135C60h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82135C60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82135C68;  }
		/* 82135C60h case    1:*/		return 0x82135C64;
		  /* 82135C64h */ case    2:  		/* stwx R26, <#[R9 + R8]> */
		/* 82135C64h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82135C64h case    2:*/		return 0x82135C68;
	}
	return 0x82135C68;
} // Block from 82135C5Ch-82135C68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135C68);
		  /* 82135C68h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 82135C68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 82135C68h case    0:*/		return 0x82135C6C;
		  /* 82135C6Ch */ case    1:  		/* addi R6, R6, 1 */
		/* 82135C6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82135C6Ch case    1:*/		return 0x82135C70;
		  /* 82135C70h */ case    2:  		/* addi R8, R8, 4 */
		/* 82135C70h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82135C70h case    2:*/		return 0x82135C74;
		  /* 82135C74h */ case    3:  		/* cmplw CR6, R6, R11 */
		/* 82135C74h case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 82135C74h case    3:*/		return 0x82135C78;
		  /* 82135C78h */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 82135C78h case    4:*/		if ( regs.CR[6].lt ) { return 0x82135C34;  }
		/* 82135C78h case    4:*/		return 0x82135C7C;
	}
	return 0x82135C7C;
} // Block from 82135C68h-82135C7Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82135C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135C7C);
		  /* 82135C7Ch */ case    0:  		/* addi R5, R5, 4 */
		/* 82135C7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 82135C7Ch case    0:*/		return 0x82135C80;
		  /* 82135C80h */ case    1:  		/* bc 16, CR0_LT, -100 */
		/* 82135C80h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82135C1C;  }
		/* 82135C80h case    1:*/		return 0x82135C84;
	}
	return 0x82135C84;
} // Block from 82135C7Ch-82135C84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82135C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135C84);
		  /* 82135C84h */ case    0:  		/* lis R4, 4096 */
		/* 82135C84h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 82135C84h case    0:*/		return 0x82135C88;
		  /* 82135C88h */ case    1:  		/* li R7, 0 */
		/* 82135C88h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82135C88h case    1:*/		return 0x82135C8C;
		  /* 82135C8Ch */ case    2:  		/* li R6, 1 */
		/* 82135C8Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82135C8Ch case    2:*/		return 0x82135C90;
		  /* 82135C90h */ case    3:  		/* li R5, 1 */
		/* 82135C90h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82135C90h case    3:*/		return 0x82135C94;
		  /* 82135C94h */ case    4:  		/* ori R4, R4, 1 */
		/* 82135C94h case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82135C94h case    4:*/		return 0x82135C98;
		  /* 82135C98h */ case    5:  		/* mr R3, R30 */
		/* 82135C98h case    5:*/		regs.R3 = regs.R30;
		/* 82135C98h case    5:*/		return 0x82135C9C;
		  /* 82135C9Ch */ case    6:  		/* bl -235116 */
		/* 82135C9Ch case    6:*/		regs.LR = 0x82135CA0; return 0x820FC630;
		/* 82135C9Ch case    6:*/		return 0x82135CA0;
		  /* 82135CA0h */ case    7:  		/* or. R29, R3, R3 */
		/* 82135CA0h case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82135CA0h case    7:*/		return 0x82135CA4;
		  /* 82135CA4h */ case    8:  		/* bc 12, CR0_LT, 396 */
		/* 82135CA4h case    8:*/		if ( regs.CR[0].lt ) { return 0x82135E30;  }
		/* 82135CA4h case    8:*/		return 0x82135CA8;
		  /* 82135CA8h */ case    9:  		/* lis R4, 4096 */
		/* 82135CA8h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 82135CA8h case    9:*/		return 0x82135CAC;
		  /* 82135CACh */ case   10:  		/* li R7, 0 */
		/* 82135CACh case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82135CACh case   10:*/		return 0x82135CB0;
		  /* 82135CB0h */ case   11:  		/* li R6, 1 */
		/* 82135CB0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82135CB0h case   11:*/		return 0x82135CB4;
		  /* 82135CB4h */ case   12:  		/* li R5, 1 */
		/* 82135CB4h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82135CB4h case   12:*/		return 0x82135CB8;
		  /* 82135CB8h */ case   13:  		/* ori R4, R4, 1 */
		/* 82135CB8h case   13:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82135CB8h case   13:*/		return 0x82135CBC;
		  /* 82135CBCh */ case   14:  		/* mr R3, R28 */
		/* 82135CBCh case   14:*/		regs.R3 = regs.R28;
		/* 82135CBCh case   14:*/		return 0x82135CC0;
		  /* 82135CC0h */ case   15:  		/* bl -235152 */
		/* 82135CC0h case   15:*/		regs.LR = 0x82135CC4; return 0x820FC630;
		/* 82135CC0h case   15:*/		return 0x82135CC4;
		  /* 82135CC4h */ case   16:  		/* or. R29, R3, R3 */
		/* 82135CC4h case   16:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82135CC4h case   16:*/		return 0x82135CC8;
		  /* 82135CC8h */ case   17:  		/* bc 12, CR0_LT, 360 */
		/* 82135CC8h case   17:*/		if ( regs.CR[0].lt ) { return 0x82135E30;  }
		/* 82135CC8h case   17:*/		return 0x82135CCC;
		  /* 82135CCCh */ case   18:  		/* lwz R11, <#[R30 + 16]> */
		/* 82135CCCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82135CCCh case   18:*/		return 0x82135CD0;
		  /* 82135CD0h */ case   19:  		/* li R10, 1 */
		/* 82135CD0h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82135CD0h case   19:*/		return 0x82135CD4;
		  /* 82135CD4h */ case   20:  		/* li R9, 2 */
		/* 82135CD4h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82135CD4h case   20:*/		return 0x82135CD8;
		  /* 82135CD8h */ case   21:  		/* lwz R8, <#[R1 + 80]> */
		/* 82135CD8h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82135CD8h case   21:*/		return 0x82135CDC;
		  /* 82135CDCh */ case   22:  		/* stwu R28, <#[R24 + 4]> */
		/* 82135CDCh case   22:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R24 + 0x00000004) );
		regs.R24 = (uint32)(regs.R24 + 0x00000004);
		/* 82135CDCh case   22:*/		return 0x82135CE0;
		  /* 82135CE0h */ case   23:  		/* addi R8, R8, 1 */
		/* 82135CE0h case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82135CE0h case   23:*/		return 0x82135CE4;
		  /* 82135CE4h */ case   24:  		/* stw R27, <#[R11]> */
		/* 82135CE4h case   24:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82135CE4h case   24:*/		return 0x82135CE8;
		  /* 82135CE8h */ case   25:  		/* lwz R11, <#[R30 + 8]> */
		/* 82135CE8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82135CE8h case   25:*/		return 0x82135CEC;
		  /* 82135CECh */ case   26:  		/* stw R25, <#[R11]> */
		/* 82135CECh case   26:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 82135CECh case   26:*/		return 0x82135CF0;
		  /* 82135CF0h */ case   27:  		/* stw R10, <#[R30 + 40]> */
		/* 82135CF0h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 82135CF0h case   27:*/		return 0x82135CF4;
		  /* 82135CF4h */ case   28:  		/* lwz R11, <#[R28 + 16]> */
		/* 82135CF4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82135CF4h case   28:*/		return 0x82135CF8;
		  /* 82135CF8h */ case   29:  		/* stw R26, <#[R11]> */
		/* 82135CF8h case   29:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 82135CF8h case   29:*/		return 0x82135CFC;
		  /* 82135CFCh */ case   30:  		/* lwz R11, <#[R28 + 8]> */
		/* 82135CFCh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82135CFCh case   30:*/		return 0x82135D00;
		  /* 82135D00h */ case   31:  		/* stw R27, <#[R11]> */
		/* 82135D00h case   31:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82135D00h case   31:*/		return 0x82135D04;
		  /* 82135D04h */ case   32:  		/* stw R9, <#[R30 + 40]> */
		/* 82135D04h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 82135D04h case   32:*/		return 0x82135D08;
		  /* 82135D08h */ case   33:  		/* stw R8, <#[R1 + 80]> */
		/* 82135D08h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82135D08h case   33:*/		return 0x82135D0C;
		  /* 82135D0Ch */ case   34:  		/* lwz R11, <#[R31 + 1032]> */
		/* 82135D0Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135D0Ch case   34:*/		return 0x82135D10;
		  /* 82135D10h */ case   35:  		/* addi R11, R11, 178 */
		/* 82135D10h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB2);
		/* 82135D10h case   35:*/		return 0x82135D14;
		  /* 82135D14h */ case   36:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135D14h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135D14h case   36:*/		return 0x82135D18;
		  /* 82135D18h */ case   37:  		/* stwx R30, <#[R11 + R31]> */
		/* 82135D18h case   37:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82135D18h case   37:*/		return 0x82135D1C;
		  /* 82135D1Ch */ case   38:  		/* lwz R11, <#[R31 + 1032]> */
		/* 82135D1Ch case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135D1Ch case   38:*/		return 0x82135D20;
		  /* 82135D20h */ case   39:  		/* addi R11, R11, 179 */
		/* 82135D20h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB3);
		/* 82135D20h case   39:*/		return 0x82135D24;
		  /* 82135D24h */ case   40:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135D24h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135D24h case   40:*/		return 0x82135D28;
		  /* 82135D28h */ case   41:  		/* stwx R28, <#[R11 + R31]> */
		/* 82135D28h case   41:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82135D28h case   41:*/		return 0x82135D2C;
		  /* 82135D2Ch */ case   42:  		/* lwz R11, <#[R31 + 1032]> */
		/* 82135D2Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135D2Ch case   42:*/		return 0x82135D30;
		  /* 82135D30h */ case   43:  		/* lwz R10, <#[R31 + 560]> */
		/* 82135D30h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 82135D30h case   43:*/		return 0x82135D34;
		  /* 82135D34h */ case   44:  		/* lwz R9, <#[R31 + 548]> */
		/* 82135D34h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000224) );
		/* 82135D34h case   44:*/		return 0x82135D38;
		  /* 82135D38h */ case   45:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82135D38h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82135D38h case   45:*/		return 0x82135D3C;
		  /* 82135D3Ch */ case   46:  		/* addi R11, R11, 2 */
		/* 82135D3Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82135D3Ch case   46:*/		return 0x82135D40;
		  /* 82135D40h */ case   47:  		/* stw R11, <#[R31 + 1032]> */
		/* 82135D40h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000408) );
		/* 82135D40h case   47:*/		return 0x82135D44;
		  /* 82135D44h */ case   48:  		/* stwx R30, <#[R9 + R10]> */
		/* 82135D44h case   48:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82135D44h case   48:*/		return 0x82135D48;
		  /* 82135D48h */ case   49:  		/* lwz R11, <#[R31 + 548]> */
		/* 82135D48h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 82135D48h case   49:*/		return 0x82135D4C;
		  /* 82135D4Ch */ case   50:  		/* addi R11, R11, 1 */
		/* 82135D4Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82135D4Ch case   50:*/		return 0x82135D50;
		  /* 82135D50h */ case   51:  		/* stw R11, <#[R31 + 548]> */
		/* 82135D50h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 82135D50h case   51:*/		return 0x82135D54;
	}
	return 0x82135D54;
} // Block from 82135C84h-82135D54h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82135D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135D54);
		  /* 82135D54h */ case    0:  		/* lwz R11, <#[R31 + 548]> */
		/* 82135D54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 82135D54h case    0:*/		return 0x82135D58;
		  /* 82135D58h */ case    1:  		/* addi R22, R22, 1 */
		/* 82135D58h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82135D58h case    1:*/		return 0x82135D5C;
		  /* 82135D5Ch */ case    2:  		/* addi R23, R23, 4 */
		/* 82135D5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 82135D5Ch case    2:*/		return 0x82135D60;
		  /* 82135D60h */ case    3:  		/* cmplw CR6, R22, R11 */
		/* 82135D60h case    3:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R11);
		/* 82135D60h case    3:*/		return 0x82135D64;
		  /* 82135D64h */ case    4:  		/* bc 12, CR6_LT, -1804 */
		/* 82135D64h case    4:*/		if ( regs.CR[6].lt ) { return 0x82135658;  }
		/* 82135D64h case    4:*/		return 0x82135D68;
	}
	return 0x82135D68;
} // Block from 82135D54h-82135D68h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82135D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135D68);
		  /* 82135D68h */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 82135D68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 82135D68h case    0:*/		return 0x82135D6C;
		  /* 82135D6Ch */ case    1:  		/* lwz R10, <#[R1 + 80]> */
		/* 82135D6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82135D6Ch case    1:*/		return 0x82135D70;
		  /* 82135D70h */ case    2:  		/* add R10, R11, R10 */
		/* 82135D70h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82135D70h case    2:*/		return 0x82135D74;
		  /* 82135D74h */ case    3:  		/* cmplwi CR6, R10, 512 */
		/* 82135D74h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000200);
		/* 82135D74h case    3:*/		return 0x82135D78;
		  /* 82135D78h */ case    4:  		/* bc 4, CR6_GT, 48 */
		/* 82135D78h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82135DA8;  }
		/* 82135D78h case    4:*/		return 0x82135D7C;
		  /* 82135D7Ch */ case    5:  		/* lis R3, -32768 */
		/* 82135D7Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82135D7Ch case    5:*/		return 0x82135D80;
		  /* 82135D80h */ case    6:  		/* ori R3, R3, 16389 */
		/* 82135D80h case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82135D80h case    6:*/		return 0x82135D84;
		  /* 82135D84h */ case    7:  		/* b 176 */
		/* 82135D84h case    7:*/		return 0x82135E34;
		/* 82135D84h case    7:*/		return 0x82135D88;
	}
	return 0x82135D88;
} // Block from 82135D68h-82135D88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82135D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135D88);
		  /* 82135D88h */ case    0:  		/* lis R29, -32768 */
		/* 82135D88h case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8000);
		/* 82135D88h case    0:*/		return 0x82135D8C;
		  /* 82135D8Ch */ case    1:  		/* ori R29, R29, 16389 */
		/* 82135D8Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0x4005);
		/* 82135D8Ch case    1:*/		return 0x82135D90;
		  /* 82135D90h */ case    2:  		/* b 160 */
		/* 82135D90h case    2:*/		return 0x82135E30;
		/* 82135D90h case    2:*/		return 0x82135D94;
	}
	return 0x82135D94;
} // Block from 82135D88h-82135D94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135D94);
		  /* 82135D94h */ case    0:  		/* li R3, 1 */
		/* 82135D94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82135D94h case    0:*/		return 0x82135D98;
		  /* 82135D98h */ case    1:  		/* b 156 */
		/* 82135D98h case    1:*/		return 0x82135E34;
		/* 82135D98h case    1:*/		return 0x82135D9C;
	}
	return 0x82135D9C;
} // Block from 82135D94h-82135D9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82135D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135D9C);
		  /* 82135D9Ch */ case    0:  		/* lis R29, -32761 */
		/* 82135D9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 82135D9Ch case    0:*/		return 0x82135DA0;
		  /* 82135DA0h */ case    1:  		/* ori R29, R29, 14 */
		/* 82135DA0h case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 82135DA0h case    1:*/		return 0x82135DA4;
		  /* 82135DA4h */ case    2:  		/* b 140 */
		/* 82135DA4h case    2:*/		return 0x82135E30;
		/* 82135DA4h case    2:*/		return 0x82135DA8;
	}
	return 0x82135DA8;
} // Block from 82135D9Ch-82135DA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135DA8);
		  /* 82135DA8h */ case    0:  		/* lwz R8, <#[R1 + 80]> */
		/* 82135DA8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82135DA8h case    0:*/		return 0x82135DAC;
		  /* 82135DACh */ case    1:  		/* cmplwi CR6, R11, 6 */
		/* 82135DACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82135DACh case    1:*/		return 0x82135DB0;
		  /* 82135DB0h */ case    2:  		/* bc 12, CR6_LT, 48 */
		/* 82135DB0h case    2:*/		if ( regs.CR[6].lt ) { return 0x82135DE0;  }
		/* 82135DB0h case    2:*/		return 0x82135DB4;
		  /* 82135DB4h */ case    3:  		/* addi R9, R11, -5 */
		/* 82135DB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFB);
		/* 82135DB4h case    3:*/		return 0x82135DB8;
		  /* 82135DB8h */ case    4:  		/* add R10, R11, R8 */
		/* 82135DB8h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R8);
		/* 82135DB8h case    4:*/		return 0x82135DBC;
		  /* 82135DBCh */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135DBCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135DBCh case    5:*/		return 0x82135DC0;
		  /* 82135DC0h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82135DC0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82135DC0h case    6:*/		return 0x82135DC4;
		  /* 82135DC4h */ case    7:  		/* mtspr CTR, R9 */
		/* 82135DC4h case    7:*/		regs.CTR = regs.R9;
		/* 82135DC4h case    7:*/		return 0x82135DC8;
		  /* 82135DC8h */ case    8:  		/* lwz R9, <#[R31 + 564]> */
		/* 82135DC8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 82135DC8h case    8:*/		return 0x82135DCC;
		  /* 82135DCCh */ case    9:  		/* lwzx R7, <#[R11 + R9]> */
		/* 82135DCCh case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82135DCCh case    9:*/		return 0x82135DD0;
		  /* 82135DD0h */ case   10:  		/* addi R11, R11, -4 */
		/* 82135DD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82135DD0h case   10:*/		return 0x82135DD4;
		  /* 82135DD4h */ case   11:  		/* stwx R7, <#[R10 + R9]> */
		/* 82135DD4h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82135DD4h case   11:*/		return 0x82135DD8;
		  /* 82135DD8h */ case   12:  		/* addi R10, R10, -4 */
		/* 82135DD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82135DD8h case   12:*/		return 0x82135DDC;
		  /* 82135DDCh */ case   13:  		/* bc 16, CR0_LT, -20 */
		/* 82135DDCh case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82135DC8;  }
		/* 82135DDCh case   13:*/		return 0x82135DE0;
	}
	return 0x82135DE0;
} // Block from 82135DA8h-82135DE0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82135DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135DE0);
		  /* 82135DE0h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 82135DE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82135DE0h case    0:*/		return 0x82135DE4;
		  /* 82135DE4h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82135DE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135E08;  }
		/* 82135DE4h case    1:*/		return 0x82135DE8;
		  /* 82135DE8h */ case    2:  		/* addi R10, R1, 152 */
		/* 82135DE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x98);
		/* 82135DE8h case    2:*/		return 0x82135DEC;
		  /* 82135DECh */ case    3:  		/* mtspr CTR, R8 */
		/* 82135DECh case    3:*/		regs.CTR = regs.R8;
		/* 82135DECh case    3:*/		return 0x82135DF0;
		  /* 82135DF0h */ case    4:  		/* li R11, 24 */
		/* 82135DF0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x18);
		/* 82135DF0h case    4:*/		return 0x82135DF4;
		  /* 82135DF4h */ case    5:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82135DF4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82135DF4h case    5:*/		return 0x82135DF8;
		  /* 82135DF8h */ case    6:  		/* lwz R7, <#[R31 + 564]> */
		/* 82135DF8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000234) );
		/* 82135DF8h case    6:*/		return 0x82135DFC;
		  /* 82135DFCh */ case    7:  		/* stwx R9, <#[R7 + R11]> */
		/* 82135DFCh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82135DFCh case    7:*/		return 0x82135E00;
		  /* 82135E00h */ case    8:  		/* addi R11, R11, 4 */
		/* 82135E00h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82135E00h case    8:*/		return 0x82135E04;
		  /* 82135E04h */ case    9:  		/* bc 16, CR0_LT, -16 */
		/* 82135E04h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82135DF4;  }
		/* 82135E04h case    9:*/		return 0x82135E08;
	}
	return 0x82135E08;
} // Block from 82135DE0h-82135E08h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82135E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135E08);
		  /* 82135E08h */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 82135E08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 82135E08h case    0:*/		return 0x82135E0C;
		  /* 82135E0Ch */ case    1:  		/* mr R29, R16 */
		/* 82135E0Ch case    1:*/		regs.R29 = regs.R16;
		/* 82135E0Ch case    1:*/		return 0x82135E10;
		  /* 82135E10h */ case    2:  		/* add R11, R11, R8 */
		/* 82135E10h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82135E10h case    2:*/		return 0x82135E14;
		  /* 82135E14h */ case    3:  		/* stw R11, <#[R31 + 552]> */
		/* 82135E14h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 82135E14h case    3:*/		return 0x82135E18;
	}
	return 0x82135E18;
} // Block from 82135E08h-82135E18h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135E18);
		  /* 82135E18h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 82135E18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 82135E18h case    0:*/		return 0x82135E1C;
		  /* 82135E1Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82135E1Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82135E30;  }
		/* 82135E1Ch case    1:*/		return 0x82135E20;
		  /* 82135E20h */ case    2:  		/* mr R3, R15 */
		/* 82135E20h case    2:*/		regs.R3 = regs.R15;
		/* 82135E20h case    2:*/		return 0x82135E24;
		  /* 82135E24h */ case    3:  		/* bl 947612 */
		/* 82135E24h case    3:*/		regs.LR = 0x82135E28; return 0x8221D3C0;
		/* 82135E24h case    3:*/		return 0x82135E28;
		  /* 82135E28h */ case    4:  		/* mr R3, R15 */
		/* 82135E28h case    4:*/		regs.R3 = regs.R15;
		/* 82135E28h case    4:*/		return 0x82135E2C;
		  /* 82135E2Ch */ case    5:  		/* bl -235580 */
		/* 82135E2Ch case    5:*/		regs.LR = 0x82135E30; return 0x820FC5F0;
		/* 82135E2Ch case    5:*/		return 0x82135E30;
	}
	return 0x82135E30;
} // Block from 82135E18h-82135E30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82135E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135E30);
		  /* 82135E30h */ case    0:  		/* mr R3, R29 */
		/* 82135E30h case    0:*/		regs.R3 = regs.R29;
		/* 82135E30h case    0:*/		return 0x82135E34;
	}
	return 0x82135E34;
} // Block from 82135E30h-82135E34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135E34);
		  /* 82135E34h */ case    0:  		/* addi R1, R1, 400 */
		/* 82135E34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 82135E34h case    0:*/		return 0x82135E38;
		  /* 82135E38h */ case    1:  		/* b -674760 */
		/* 82135E38h case    1:*/		return 0x82091270;
		/* 82135E38h case    1:*/		return 0x82135E3C;
		  /* 82135E3Ch */ case    2:  		/* nop */
		/* 82135E3Ch case    2:*/		cpu::op::nop();
		/* 82135E3Ch case    2:*/		return 0x82135E40;
	}
	return 0x82135E40;
} // Block from 82135E34h-82135E40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135E40);
		  /* 82135E40h */ case    0:  		/* mfspr R12, LR */
		/* 82135E40h case    0:*/		regs.R12 = regs.LR;
		/* 82135E40h case    0:*/		return 0x82135E44;
		  /* 82135E44h */ case    1:  		/* bl -674820 */
		/* 82135E44h case    1:*/		regs.LR = 0x82135E48; return 0x82091240;
		/* 82135E44h case    1:*/		return 0x82135E48;
		  /* 82135E48h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82135E48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82135E48h case    2:*/		return 0x82135E4C;
		  /* 82135E4Ch */ case    3:  		/* li R11, 6 */
		/* 82135E4Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82135E4Ch case    3:*/		return 0x82135E50;
		  /* 82135E50h */ case    4:  		/* lwz R9, <#[R3 + 564]> */
		/* 82135E50h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000234) );
		/* 82135E50h case    4:*/		return 0x82135E54;
		  /* 82135E54h */ case    5:  		/* mr R4, R3 */
		/* 82135E54h case    5:*/		regs.R4 = regs.R3;
		/* 82135E54h case    5:*/		return 0x82135E58;
		  /* 82135E58h */ case    6:  		/* li R22, 18 */
		/* 82135E58h case    6:*/		cpu::op::li<0>(regs,&regs.R22,0x12);
		/* 82135E58h case    6:*/		return 0x82135E5C;
		  /* 82135E5Ch */ case    7:  		/* li R10, 0 */
		/* 82135E5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82135E5Ch case    7:*/		return 0x82135E60;
		  /* 82135E60h */ case    8:  		/* mtspr CTR, R11 */
		/* 82135E60h case    8:*/		regs.CTR = regs.R11;
		/* 82135E60h case    8:*/		return 0x82135E64;
		  /* 82135E64h */ case    9:  		/* lwzx R11, <#[R10 + R9]> */
		/* 82135E64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82135E64h case    9:*/		return 0x82135E68;
		  /* 82135E68h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82135E68h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135E68h case   10:*/		return 0x82135E6C;
		  /* 82135E6Ch */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 82135E6Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82135E8C;  }
		/* 82135E6Ch case   11:*/		return 0x82135E70;
		  /* 82135E70h */ case   12:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82135E70h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82135E70h case   12:*/		return 0x82135E74;
		  /* 82135E74h */ case   13:  		/* lis R8, 4352 */
		/* 82135E74h case   13:*/		cpu::op::lis<0>(regs,&regs.R8,0x1100);
		/* 82135E74h case   13:*/		return 0x82135E78;
		  /* 82135E78h */ case   14:  		/* lwz R11, <#[R11]> */
		/* 82135E78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82135E78h case   14:*/		return 0x82135E7C;
		  /* 82135E7Ch */ case   15:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82135E7Ch case   15:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82135E7Ch case   15:*/		return 0x82135E80;
		  /* 82135E80h */ case   16:  		/* cmplw CR6, R11, R8 */
		/* 82135E80h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82135E80h case   16:*/		return 0x82135E84;
		  /* 82135E84h */ case   17:  		/* bc 12, CR6_EQ, 8 */
		/* 82135E84h case   17:*/		if ( regs.CR[6].eq ) { return 0x82135E8C;  }
		/* 82135E84h case   17:*/		return 0x82135E88;
		  /* 82135E88h */ case   18:  		/* addi R22, R22, -3 */
		/* 82135E88h case   18:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0xFFFFFFFD);
		/* 82135E88h case   18:*/		return 0x82135E8C;
	}
	return 0x82135E8C;
} // Block from 82135E40h-82135E8Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82135E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135E8C);
		  /* 82135E8Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 82135E8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82135E8Ch case    0:*/		return 0x82135E90;
		  /* 82135E90h */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 82135E90h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82135E64;  }
		/* 82135E90h case    1:*/		return 0x82135E94;
		  /* 82135E94h */ case    2:  		/* lwz R11, <#[R4 + 548]> */
		/* 82135E94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000224) );
		/* 82135E94h case    2:*/		return 0x82135E98;
		  /* 82135E98h */ case    3:  		/* li R23, 0 */
		/* 82135E98h case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82135E98h case    3:*/		return 0x82135E9C;
		  /* 82135E9Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82135E9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135E9Ch case    4:*/		return 0x82135EA0;
		  /* 82135EA0h */ case    5:  		/* bc 12, CR6_EQ, 256 */
		/* 82135EA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82135FA0;  }
		/* 82135EA0h case    5:*/		return 0x82135EA4;
		  /* 82135EA4h */ case    6:  		/* lwz R25, <#[R4 + 560]> */
		/* 82135EA4h case    6:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R4 + 0x00000230) );
		/* 82135EA4h case    6:*/		return 0x82135EA8;
		  /* 82135EA8h */ case    7:  		/* mr R24, R11 */
		/* 82135EA8h case    7:*/		regs.R24 = regs.R11;
		/* 82135EA8h case    7:*/		return 0x82135EAC;
		  /* 82135EACh */ case    8:  		/* lwz R27, <#[R25]> */
		/* 82135EACh case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + 0x00000000) );
		/* 82135EACh case    8:*/		return 0x82135EB0;
		  /* 82135EB0h */ case    9:  		/* cmplwi CR6, R27, 0 */
		/* 82135EB0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82135EB0h case    9:*/		return 0x82135EB4;
		  /* 82135EB4h */ case   10:  		/* bc 12, CR6_EQ, 212 */
		/* 82135EB4h case   10:*/		if ( regs.CR[6].eq ) { return 0x82135F88;  }
		/* 82135EB4h case   10:*/		return 0x82135EB8;
		  /* 82135EB8h */ case   11:  		/* lwz R11, <#[R27 + 12]> */
		/* 82135EB8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82135EB8h case   11:*/		return 0x82135EBC;
		  /* 82135EBCh */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82135EBCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135EBCh case   12:*/		return 0x82135EC0;
		  /* 82135EC0h */ case   13:  		/* bc 12, CR6_EQ, 200 */
		/* 82135EC0h case   13:*/		if ( regs.CR[6].eq ) { return 0x82135F88;  }
		/* 82135EC0h case   13:*/		return 0x82135EC4;
		  /* 82135EC4h */ case   14:  		/* lwz R28, <#[R4 + 12]> */
		/* 82135EC4h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x0000000C) );
		/* 82135EC4h case   14:*/		return 0x82135EC8;
		  /* 82135EC8h */ case   15:  		/* li R31, 0 */
		/* 82135EC8h case   15:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82135EC8h case   15:*/		return 0x82135ECC;
		  /* 82135ECCh */ case   16:  		/* mr R26, R11 */
		/* 82135ECCh case   16:*/		regs.R26 = regs.R11;
		/* 82135ECCh case   16:*/		return 0x82135ED0;
		  /* 82135ED0h */ case   17:  		/* li R30, 0 */
		/* 82135ED0h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82135ED0h case   17:*/		return 0x82135ED4;
		  /* 82135ED4h */ case   18:  		/* cmplwi CR6, R28, 0 */
		/* 82135ED4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82135ED4h case   18:*/		return 0x82135ED8;
		  /* 82135ED8h */ case   19:  		/* bc 12, CR6_EQ, 152 */
		/* 82135ED8h case   19:*/		if ( regs.CR[6].eq ) { return 0x82135F70;  }
		/* 82135ED8h case   19:*/		return 0x82135EDC;
		  /* 82135EDCh */ case   20:  		/* lwz R29, <#[R4 + 24]> */
		/* 82135EDCh case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x00000018) );
		/* 82135EDCh case   20:*/		return 0x82135EE0;
		  /* 82135EE0h */ case   21:  		/* lwz R10, <#[R29]> */
		/* 82135EE0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82135EE0h case   21:*/		return 0x82135EE4;
		  /* 82135EE4h */ case   22:  		/* lwz R11, <#[R10 + 40]> */
		/* 82135EE4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 82135EE4h case   22:*/		return 0x82135EE8;
		  /* 82135EE8h */ case   23:  		/* cmplwi CR6, R11, 1 */
		/* 82135EE8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82135EE8h case   23:*/		return 0x82135EEC;
		  /* 82135EECh */ case   24:  		/* bc 12, CR6_EQ, 116 */
		/* 82135EECh case   24:*/		if ( regs.CR[6].eq ) { return 0x82135F60;  }
		/* 82135EECh case   24:*/		return 0x82135EF0;
		  /* 82135EF0h */ case   25:  		/* lwz R11, <#[R10]> */
		/* 82135EF0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82135EF0h case   25:*/		return 0x82135EF4;
		  /* 82135EF4h */ case   26:  		/* rlwinm R3, R11, 0, 0, 11 */
		/* 82135EF4h case   26:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R3,regs.R11);
		/* 82135EF4h case   26:*/		return 0x82135EF8;
		  /* 82135EF8h */ case   27:  		/* bl -26520 */
		/* 82135EF8h case   27:*/		regs.LR = 0x82135EFC; return 0x8212F760;
		/* 82135EF8h case   27:*/		return 0x82135EFC;
		  /* 82135EFCh */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 82135EFCh case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82135EFCh case   28:*/		return 0x82135F00;
		  /* 82135F00h */ case   29:  		/* bc 4, CR0_EQ, 96 */
		/* 82135F00h case   29:*/		if ( !regs.CR[0].eq ) { return 0x82135F60;  }
		/* 82135F00h case   29:*/		return 0x82135F04;
		  /* 82135F04h */ case   30:  		/* lwz R5, <#[R10 + 4]> */
		/* 82135F04h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 82135F04h case   30:*/		return 0x82135F08;
		  /* 82135F08h */ case   31:  		/* li R6, 0 */
		/* 82135F08h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82135F08h case   31:*/		return 0x82135F0C;
		  /* 82135F0Ch */ case   32:  		/* cmplwi CR6, R5, 0 */
		/* 82135F0Ch case   32:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82135F0Ch case   32:*/		return 0x82135F10;
		  /* 82135F10h */ case   33:  		/* bc 12, CR6_EQ, 72 */
		/* 82135F10h case   33:*/		if ( regs.CR[6].eq ) { return 0x82135F58;  }
		/* 82135F10h case   33:*/		return 0x82135F14;
		  /* 82135F14h */ case   34:  		/* lwz R9, <#[R27 + 16]> */
		/* 82135F14h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 82135F14h case   34:*/		return 0x82135F18;
		  /* 82135F18h */ case   35:  		/* li R11, 0 */
		/* 82135F18h case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82135F18h case   35:*/		return 0x82135F1C;
		  /* 82135F1Ch */ case   36:  		/* lwz R7, <#[R10 + 8]> */
		/* 82135F1Ch case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 82135F1Ch case   36:*/		return 0x82135F20;
		  /* 82135F20h */ case   37:  		/* lwz R8, <#[R4 + 20]> */
		/* 82135F20h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000014) );
		/* 82135F20h case   37:*/		return 0x82135F24;
		  /* 82135F24h */ case   38:  		/* lwzx R10, <#[R9 + R31]> */
		/* 82135F24h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 82135F24h case   38:*/		return 0x82135F28;
		  /* 82135F28h */ case   39:  		/* lwzx R9, <#[R11 + R7]> */
		/* 82135F28h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82135F28h case   39:*/		return 0x82135F2C;
		  /* 82135F2Ch */ case   40:  		/* rlwinm R3, R9, 2, 0, 29 */
		/* 82135F2Ch case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R9);
		/* 82135F2Ch case   40:*/		return 0x82135F30;
		  /* 82135F30h */ case   41:  		/* lwzx R3, <#[R3 + R8]> */
		/* 82135F30h case   41:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 82135F30h case   41:*/		return 0x82135F34;
		  /* 82135F34h */ case   42:  		/* lwz R3, <#[R3 + 56]> */
		/* 82135F34h case   42:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000038) );
		/* 82135F34h case   42:*/		return 0x82135F38;
		  /* 82135F38h */ case   43:  		/* cmplw CR6, R3, R10 */
		/* 82135F38h case   43:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R10);
		/* 82135F38h case   43:*/		return 0x82135F3C;
		  /* 82135F3Ch */ case   44:  		/* bc 12, CR6_EQ, 28 */
		/* 82135F3Ch case   44:*/		if ( regs.CR[6].eq ) { return 0x82135F58;  }
		/* 82135F3Ch case   44:*/		return 0x82135F40;
		  /* 82135F40h */ case   45:  		/* cmplw CR6, R9, R10 */
		/* 82135F40h case   45:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82135F40h case   45:*/		return 0x82135F44;
		  /* 82135F44h */ case   46:  		/* bc 12, CR6_EQ, 20 */
		/* 82135F44h case   46:*/		if ( regs.CR[6].eq ) { return 0x82135F58;  }
		/* 82135F44h case   46:*/		return 0x82135F48;
		  /* 82135F48h */ case   47:  		/* addi R6, R6, 1 */
		/* 82135F48h case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82135F48h case   47:*/		return 0x82135F4C;
		  /* 82135F4Ch */ case   48:  		/* addi R11, R11, 4 */
		/* 82135F4Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82135F4Ch case   48:*/		return 0x82135F50;
		  /* 82135F50h */ case   49:  		/* cmplw CR6, R6, R5 */
		/* 82135F50h case   49:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 82135F50h case   49:*/		return 0x82135F54;
		  /* 82135F54h */ case   50:  		/* bc 12, CR6_LT, -44 */
		/* 82135F54h case   50:*/		if ( regs.CR[6].lt ) { return 0x82135F28;  }
		/* 82135F54h case   50:*/		return 0x82135F58;
	}
	return 0x82135F58;
} // Block from 82135E8Ch-82135F58h (51 instructions)

